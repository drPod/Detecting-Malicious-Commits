{
  "cve_id": "CVE-2022-23475",
  "github_data": {
    "repository": "lirantal/daloradius",
    "fix_commit": "ec3b4a419e20540cf28ce60e48998b893e3f1dea",
    "related_commits": [
      "ec3b4a419e20540cf28ce60e48998b893e3f1dea",
      "ec3b4a419e20540cf28ce60e48998b893e3f1dea"
    ],
    "patch_url": "https://github.com/lirantal/daloradius/commit/ec3b4a419e20540cf28ce60e48998b893e3f1dea.patch",
    "fix_commit_details": {
      "sha": "ec3b4a419e20540cf28ce60e48998b893e3f1dea",
      "commit_date": "2022-11-28T15:12:03Z",
      "author": {
        "login": "filippolauria",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Improvements to PDF ticket printing and security issues fix/mitigation (#297)",
        "length": 230,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 7944,
        "additions": 6081,
        "deletions": 1863
      },
      "files": [
        {
          "filename": "bill-payments-list.php",
          "status": "modified",
          "additions": 9,
          "deletions": 21,
          "patch": "@@ -252,26 +252,14 @@\n     }\n     \n     include('library/closedb.php');\n-?>\n-                \n-        </div><!-- #contentnorightbar -->\n-        \n-        <div id=\"footer\">\n-<?php\n     include('include/config/logging.php');\n-    include('page-footer.php');\n+    \n+    $inline_extra_js = \"\n+var tooltipObj = new DHTMLgoodies_formTooltip();\n+tooltipObj.setTooltipPosition('right');\n+tooltipObj.setPageBgColor('#EEEEEE');\n+tooltipObj.setTooltipCornerSize(15);\n+tooltipObj.initFormFieldTooltip()\";\n+    \n+    print_footer_and_html_epilogue($inline_extra_js);\n ?>\n-        </div><!-- #footer -->\n-    </div>\n-</div>\n-\n-<script>\n-    var tooltipObj = new DHTMLgoodies_formTooltip();\n-    tooltipObj.setTooltipPosition('right');\n-    tooltipObj.setPageBgColor('#EEEEEE');\n-    tooltipObj.setTooltipCornerSize(15);\n-    tooltipObj.initFormFieldTooltip();\n-</script>\n-\n-</body>\n-</html>"
        },
        {
          "filename": "bill-pos-list.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -245,6 +245,8 @@\n ?>\n     </table>\n \n+    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= dalo_csrf_token() ?>\">\n+\n </form>\n \n <?php"
        },
        {
          "filename": "bill-pos-new.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -43,13 +43,14 @@\n         strtolower($configValues['CONFIG_DB_PASSWORD_ENCRYPTION']) !== 'cleartext') {\n         $valid_passwordTypes = array_diff($valid_passwordTypes, array(\"Cleartext-Password\"));\n     }\n+    $passwordType = (array_key_exists('passwordType', $_POST) && isset($_POST['passwordType']) &&\n+                     in_array($_POST['passwordType'], $valid_passwordTypes)) ? $_POST['passwordType'] : \"\";\n+\n \n     isset($_POST['username']) ? $username = $_POST['username'] : $username = \"\";\n     isset($_POST['password']) ? $password = $_POST['password'] : $password = \"\";\n     isset($_POST['planName']) ? $planName = $_POST['planName'] : $planName = \"\";\n     isset($_POST['profiles']) ? $profiles = $_POST['profiles'] : $profiles = \"\";\n-    $passwordType = (array_key_exists('passwordType', $_POST) && isset($_POST['passwordType']) &&\n-                         in_array($_POST['passwordType'], $valid_passwordTypes)) ? $_POST['passwordType'] : \"\";\n     isset($_POST['notificationWelcome']) ? $notificationWelcome = $_POST['notificationWelcome'] : $notificationWelcome = \"\";\n     \n "
        },
        {
          "filename": "include/common/notificationsBatchDetails.php",
          "status": "modified",
          "additions": 255,
          "deletions": 345,
          "patch": "@@ -1,4 +1,4 @@\n-<?php\n+<?php \n /*\n  *********************************************************************************************************\n  * daloRADIUS - RADIUS Web Platform\n@@ -15,353 +15,263 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n \n-  include (\"library/checklogin.php\");\n-  $operator = $_SESSION['operator_user'];\n-\n-\trequire_once(dirname(__FILE__).\"/../../notifications/processNotificationBatchDetails.php\");\n-\trequire_once(dirname(__FILE__).\"/../../library/config_read.php\");\n-\n-\tisset($_GET['batch_name']) ? $batch_name = $_GET['batch_name'] : $batch_name = \"\";\n-\tisset($_GET['destination']) ? $destination = $_GET['destination'] : $destination = \"download\";\n-\n-\tif ($batch_name != \"\") {\n-\t\t$customerInfo = @getBatchDetails($batch_name);\n-\n-\t\t$smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n-\t\t$smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n-\t\t$smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n-\t\t$from = $configValues['CONFIG_MAIL_SMTPFROM'];\n-\n-\t\t$pdfDocument = @createBatchDetailsNotification($customerInfo);\n-\n-\t\tif ($destination == \"download\") {\n-\n-\t\t\theader(\"Content-type: application/pdf\");\n-\t\t\theader(\"Content-Disposition: attachment; filename=batch_notification_invoice_\" . date(\"Ymd\") . \".pdf; size=\" . strlen($pdfDocument));\n-\t\t\tprint $pdfDocument;\n-\n-\t\t} else if ($destination == \"email\") {\n-\n-\t\t\t@emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from);\n-\t\t\theader(\"Location: \".$_SERVER['HTTP_REFERER']);\n-\t\t}\n-\n-\t}\n-\n-\n-\tfunction getBatchDetails($batch_name = NULL) {\n-\n-\t\trequire(dirname(__FILE__).\"/../../library/opendb.php\");\n-\t\trequire_once(dirname(__FILE__).\"/../../lang/main.php\");\n-\n-\t\tglobal $configValues;\n-\n-\t\tif ($batch_name == NULL || empty($batch_name))\n-\t\t\texit;\n-\n-\n-\n-\t\t$tableTags = \"width='580px' \";\n-\t\t$tableTrTags = \"bgcolor='#ECE5B6'\";\n-\n-\t\t$customerInfo = array();\n-\n-\t\t$sql = \"SELECT \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_description,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_status,\".\n-\n-\t\t\t\"COUNT(DISTINCT(\".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".id)) as total_users,\".\n-\t\t\t\"COUNT(DISTINCT(\".$configValues['CONFIG_DB_TBL_RADACCT'].\".username)) as active_users,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".planname,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".plancost,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".plancurrency,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\".name as HotspotName,\".\n-\n-\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".creationdate,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".creationby,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".updatedate,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".updateby \".\n-\t\t\t\" FROM \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id) \".\n-\n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".planname = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".planname) \".\n-\n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".hotspot_id = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\".id) \".\n-\n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_RADACCT'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_RADACCT'].\".username = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username) \".\n-\n-\t\t\t\" WHERE \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name = '\".$dbSocket->escapeSimple($batch_name).\"' \".\n-\t\t\t\" GROUP by \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name \";\n-\n-\t\t$res = $dbSocket->query($sql);\n-\n-\t\t$batch_details = \"\";\n-\n-\t\t$batch_details .= \"<table $tableTags><tr $tableTrTags>\n-\t\t\t\t\t<td>\n-\t\t\t\".t('all','BatchName').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','HotSpot').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','BatchStatus').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','TotalUsers').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','ActiveUsers').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','PlanName').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','PlanCost').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','BatchCost').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','CreationDate').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','CreationBy').\"\n-\t\t\t</td>\n-\n-\t\t\t</tr>\";\n-\n-\t\t$active_users_per = 0;\n-\t\t$total_users = 0;\n-\t\t$active_users = 0;\n-\t\t$batch_cost = 0;\n-\n-\t\t$hotspot_name = \"\";\n-\t\t$batch_id = \"\";\n-\t\t$planname = \"\";\n-\n-\t\twhile($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n-\n-\t\t\t$batch_id = $row['id'];\n-\t\t\t$hotspot_name = $row['HotspotName'];\n-\t\t\t$batch_status = $row['batch_status'];\n-\t\t\t$plancost = $row['plancost'];\n-\t\t\t$total_users = $row['total_users'];\n-\t\t\t$active_users = $row['active_users'];\n-\t\t\t$batch_cost = ($active_users * $plancost);\n-\t\t\t$plan_currency = $row['plancurrency'];\n-\t\t\t$planname = $row['planname'];\n-\n-\n-\t\t\t$batch_details .= \"\n-\t\t\t\t\t<tr>\n-\n-\t\t\t\t\t<td>\".$row['batch_name'].\"\n-\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$hotspot_name.\"\n-\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$batch_status.\"\n-\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$total_users.\"\n-\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$active_users.\"\n-\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".\n-\t\t\t\t\t\t$row['planname'].\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$plancost.\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$batch_cost.\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".\n-\t\t\t\t\t\t$row['creationdate'].\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".\n-\t\t\t\t\t\t$row['creationby'].\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t</tr>\n-\t\t\t\";\n-\n-\n-\n-\t\t}\n-\n-\t\t$batch_details .= \"</table>\";\n-\n-\t\t$customerInfo['batch_details'] = $batch_details;\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\t\t$sql = \"SELECT planId, planName, planRecurringPeriod, planCost, planSetupCost, planTax, planCurrency FROM \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\n-\t\t\t\t\" WHERE planName = '\".$planname.\"'\";\n-\t\t$res = $dbSocket->query($sql);\n-\t\t$row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n-\n-\t\t$service_plan_info = \"\";\n-\t\t$service_plan_info = \"<table $tableTags>\";\n-\n-\t\tforeach($row as $rowName => $rowValue) {\n-\n-\t\t\t$service_plan_info .= \"<tr $tableTrTags'>\n-\t\t\t\t\t\t<td>$rowName</td>\n-\t\t\t\t\t\t<td>$rowValue</td>\n-\t\t\t\t\t\t</tr>\";\n-\n-\t\t}\n-\n-\t\t$service_plan_info .= \"</table>\";\n-\t\t$customerInfo['service_plan_info'] = $service_plan_info;\n-\n-\n-\t\t$sql = \"SELECT id, name, owner, address, companyphone, companyemail, companywebsite FROM \".$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\n-\t\t\t\t\t\" WHERE name='\".$hotspot_name.\"'\";\n-\t\t$res = $dbSocket->query($sql);\n-\t\t$row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n-\n-\t\t$customerInfo['business_name'] = $row['name'];\n-\t\t$customerInfo['business_owner_name'] = $row['owner'];\n-\t\t$customerInfo['business_address'] = $row['address'];\n-\t\t$customerInfo['business_phone'] = $row['companyphone'];\n-\t\t$customerInfo['business_email'] = $row['companyemail'];\n-\t\t$customerInfo['business_web'] = $row['companywebsite'];\n-\n-\n-\n-\n-\n-\n-\t\t$batch_active_users = \"\";\n-\n-\t\t$sql = \"SELECT \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".id,\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username,\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_RADACCT'].\".acctstarttime,\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name \".\n-\n-\t\t\t\t\" FROM \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\",\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_RADACCT'].\",\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\n-\n-\t\t\t\t\" WHERE \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id = \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id\".\n-\t\t\t\t\" AND \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id = '$batch_id' \".\n-\t\t\t\t\" AND \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username = \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_RADACCT'].\".username\".\n-\n-\t\t\t\t\" GROUP by \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username \".\n-\t\t\t\t\" ORDER BY id ,\".$configValues['CONFIG_DB_TBL_RADACCT'].\".radacctid ASC \";\n-\n-\t\t$res = $dbSocket->query($sql);\n-\n-\t\t$batch_active_users = \"<table $tableTags><tr $tableTrTags'>\n-\t\t\t<td>\n-\t\t\t\".t('all','BatchName').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','Username').\"\n-\t\t\t</td>\n-\n-\t\t\t<td>\n-\t\t\t\".t('all','StartTime').\"\n-\t\t\t</td>\n-\n-\t\t\t</tr>\";\n-\n-\n-\t\t$active_users_per = 0;\n-\t\t$total_users = 0;\n-\t\t$active_users = 0;\n-\t\t$batch_cost = 0;\n-\t\twhile($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n-\n-\t\t\t$username = $row['username'];\n-\t\t\t$acctstarttime = $row['acctstarttime'];\n-\t\t\t$batch_name = $row['batch_name'];\n-\n-\t\t\t$batch_active_users .= \"\n-\t\t\t\t\t<tr>\n-\n-\t\t\t\t\t<td>\".$batch_name.\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$username.\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t\t<td>\".$acctstarttime.\"\n-\t\t\t\t\t</td>\n-\n-\t\t\t\t</tr>\n-\t\t\t\";\n-\n-\t\t}\n-\n-\n-\t\t$batch_active_users .= \"</table>\";\n-\t\t$customerInfo['batch_active_users'] = $batch_active_users;\n-\n-\n-\t\trequire(dirname(__FILE__).\"/../../library/closedb.php\");\n-\n-\t\treturn $customerInfo;\n-\n-\n-\t}\n+    include(\"../../library/checklogin.php\");\n+    $operator = $_SESSION['operator_user'];\n+\n+    $batch_name = (array_key_exists('batch_name', $_GET) && !empty(str_replace(\"%\", \"\", trim($_GET['batch_name']))))\n+                ? str_replace(\"%\", \"\", trim($_GET['batch_name'])) : \"\";\n+\n+    $destination = (array_key_exists('destination', $_GET) && !empty(trim($_GET['destination'])) &&\n+                    in_array(strtolower(trim($_GET['destination'])), array( \"download\", \"email\" )))\n+                 ? strtolower($_GET['destination']) : \"download\";\n+\n+    if (empty($batch_name)) {\n+        die(\"you should provide a valid batch name\");\n+    }\n+    \n+    include_once(\"../../notifications/processNotificationBatchDetails.php\");\n+    include_once(\"../../library/config_read.php\");\n+    \n+    \n+    function getBatchDetails($batch_name = NULL) {\n+        global $configValues;\n+\n+        if ($batch_name == NULL || empty(trim($batch_name))) {\n+            return false;\n+        }\n+\n+        include(\"../../library/opendb.php\");\n+        include_once(\"../../lang/main.php\");\n+\n+        $tableTags = 'style=\"width: 580px\"';\n+        $tableTrTags = 'style=\"background-color: #ECE5B6\"';\n+\n+        $customerInfo = array();\n+\n+        $ths = array(\n+                        t('all','BatchName'),\n+                        t('all','HotSpot'),\n+                        t('all','BatchStatus'),\n+                        t('all','TotalUsers'),\n+                        t('all','ActiveUsers'),\n+                        t('all','PlanName'),\n+                        t('all','PlanCost'),\n+                        t('all','BatchCost'),\n+                        t('all','CreationDate'),\n+                        t('all','CreationBy'),\n+                    );\n+\n+        // start filling in batch details\n+        $batch_details = \"<table $tableTags><tr $tableTrTags>\";\n+        \n+        foreach ($ths as $th) {\n+            $batch_details .= sprintf(\"<th>%s</th>\", $th);\n+        }\n+        \n+        $batch_details .= \"</tr>\";\n+\n+        $sql = sprintf(\"SELECT dbh.id AS batch_id, dbh.batch_name, dbh.batch_description, dbh.batch_status,\n+                               COUNT(DISTINCT(ubi.id)) AS total_users, COUNT(DISTINCT(ra.username)) AS active_users,\n+                               ubi.planname, dbp.plancost, dbp.plancurrency, dhs.name AS hotspot_name,\n+                               dbh.creationdate, dbh.creationby, dbh.updatedate, dbh.updateby\n+                          FROM %s AS dbh LEFT JOIN %s AS ubi ON dbh.id=ubi.batch_id\n+                                        LEFT JOIN %s AS dbp ON dbp.planname=ubi.planname\n+                                        LEFT JOIN %s AS dhs ON dbh.hotspot_id=dhs.id\n+                                        LEFT JOIN %s AS ra ON ra.username=ubi.username\n+                         WHERE dbh.batch_name='%s'\n+                         GROUP BY dbh.batch_name\", $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'],\n+                                                   $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'],\n+                                                   $configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'],\n+                                                   $configValues['CONFIG_DB_TBL_DALOHOTSPOTS'],\n+                                                   $configValues['CONFIG_DB_TBL_RADACCT'],\n+                                                   $dbSocket->escapeSimple($batch_name));\n+        $res = $dbSocket->query($sql);\n+\n+        \n+        $active_users_per = 0;\n+        $total_users = 0;\n+        $active_users = 0;\n+        $batch_cost = 0;\n+\n+        $hotspot_name = \"\";\n+        $batch_id = \"\";\n+        $planname = \"\";\n+\n+        while($row = $res->fetchRow()) {\n+\n+            foreach ($row as $i => $value) {\n+                $row[$i] = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');\n+            }\n+\n+            list(\n+                    $batch_id, $batch_name, $batch_description, $batch_status, $total_users, $active_users, $planname,\n+                    $plancost, $plancurrency, $hotspot_name, $creationdate, $creationby, $updatedate, $updateby\n+                ) = $row;\n+\n+            \n+            $batch_cost = (intval($active_users) * intval($plancost));\n+\n+            $tds = array(\n+                            $batch_name,\n+                            $hotspot_name,\n+                            $batch_status,\n+                            $total_users,\n+                            $active_users,\n+                            $planname,\n+                            $plancost,\n+                            $batch_cost,\n+                            $creationdate,\n+                            $creationby\n+                        );\n+                        \n+            $batch_details .= \"<tr>\";\n+            foreach ($tds as $td) {\n+                $batch_details .= sprintf(\"<td>%s</td>\", $td);\n+            }\n+            $batch_details .= \"</tr>\";\n+\n+        }\n+\n+        $batch_details .= \"</table>\";\n+\n+        $customerInfo['batch_details'] = $batch_details;\n+\n+\n+        // filling in plan info\n+        if (!empty($planname)) {\n+        \n+            $sql = sprintf(\"SELECT planId, planName, planRecurringPeriod, planCost, planSetupCost, planTax, planCurrency\n+                              FROM %s WHERE planName='%s'\", $configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'],\n+                                                            $dbSocket->escapeSimple($planname));\n+            $res = $dbSocket->query($sql);\n+            $row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n+            \n+            echo $sql;\n+            echo $row;\n+            exit;\n+\n+            $service_plan_info = \"<table $tableTags>\";\n+\n+            foreach ($row as $rowName => $rowValue) {\n+                $rowName = htmlspecialchars($rowName, ENT_QUOTES, 'UTF-8');\n+                $rowValue = htmlspecialchars($rowValue, ENT_QUOTES, 'UTF-8');\n+\n+                $service_plan_info .= \"<tr $tableTrTags>\"\n+                                    . sprintf(\"<th>%s</th>\", $rowName)\n+                                    . sprintf(\"<td>%s</td>\", $rowValue)\n+                                    . \"</tr>\";\n+            }\n+\n+            $service_plan_info .= \"</table>\";\n+            $customerInfo['service_plan_info'] = $service_plan_info;\n+        }\n+\n+        // filling in business info\n+        if (!empty($hotspot_name)) {\n+            $sql = sprintf(\"SELECT id, name, owner, address, companyphone, companyemail, companywebsite\n+                              FROM %s WHERE name='%s'\", $configValues['CONFIG_DB_TBL_DALOHOTSPOTS'],\n+                                                        $dbSocket->escapeSimple($hotspot_name));\n+            $res = $dbSocket->query($sql);\n+            $row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n+\n+            $customerInfo['business_name'] = $row['name'];\n+            $customerInfo['business_owner_name'] = $row['owner'];\n+            $customerInfo['business_address'] = $row['address'];\n+            $customerInfo['business_phone'] = $row['companyphone'];\n+            $customerInfo['business_email'] = $row['companyemail'];\n+            $customerInfo['business_web'] = $row['companywebsite'];\n+        }\n+\n+        // active users details\n+        $sql = sprintf(\"SELECT ubi.id, ubi.username, ra.acctstarttime, dbh.batch_name\n+                          FROM %s AS ubi, %s AS ra, %s AS dbh\n+                         WHERE ubi.batch_id=dbh.id\n+                           AND ubi.batch_id='%s'\n+                           AND ubi.username=ra.username\n+                         GROUP BY ubi.username\n+                         ORDER BY id, ra.radacctid ASC\", $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'],\n+                                                         $configValues['CONFIG_DB_TBL_RADACCT'],\n+                                                         $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'],\n+                                                         $dbSocket->escapeSimple($batch_id));\n+        $res = $dbSocket->query($sql);\n+\n+        $ths = array(\n+                        t('all','BatchName'),\n+                        t('all','Username'),\n+                        t('all','StartTime'),\n+                    );\n+\n+        $batch_active_users = \"<table $tableTags><tr $tableTrTags>\";\n+        foreach ($ths as $th) {\n+            $batch_active_users .= sprintf(\"<th>%s</th>\", $th);\n+        }\n+        $batch_active_users .= \"</tr>\";\n+        \n+        $active_users_per = 0;\n+        $total_users = 0;\n+        $active_users = 0;\n+        $batch_cost = 0;\n+        while($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n+            foreach ($row as $i => $value) {\n+                $row[$i] = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');\n+            }\n+\n+            list($id, $username, $acctstarttime, $batch_name) = $row;\n+\n+            $tds = array( $username, $acctstarttime, $batch_name );\n+\n+            $batch_active_users .= \"<tr>\";\n+            foreach ($tds as $td) {\n+                $batch_active_users .= sprintf(\"<td>%s</td>\", $td);\n+            }\n+            $batch_active_users .= \"</tr>\";\n+        }\n+        \n+        $batch_active_users .= \"</table>\";\n+        $customerInfo['batch_active_users'] = $batch_active_users;\n+\n+\n+        require(\"../../library/closedb.php\");\n+\n+        return $customerInfo;\n+    }\n+    \n+    $customerInfo = getBatchDetails($batch_name);\n+    \n+    if ($customerInfo === false) {\n+        die(\"error when loading batch details\");\n+    }\n+\n+    $smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n+    $smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n+    $smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n+    $from = $configValues['CONFIG_MAIL_SMTPFROM'];\n+\n+    $pdfDocument = @createBatchDetailsNotification($customerInfo);\n+\n+    if ($destination == \"download\") {\n+        $filename = sprintf('batch_notification_invoice_%s.pdf', date(\"Ymd\"));\n+        $size = strlen($pdfDocument);\n+        \n+        header(\"Content-type: application/pdf\");\n+        header(sprintf(\"Content-Disposition: attachment; filename=%s; size=%d\", $filename, $size));\n+        print $pdfDocument;\n+        \n+    } else if ($destination == \"email\") {\n+        \n+        @emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from);\n+        \n+        $redirect = (array_key_exists('PREV_LIST_PAGE', $_SESSION) && !empty(trim($_SESSION['PREV_LIST_PAGE'])))\n+                  ? trim($_SESSION['PREV_LIST_PAGE']) : \"/mng-batch.php\";\n+        header(\"Location: \" . $redirect);\n+        \n+    }\n+    \n \n ?>"
        },
        {
          "filename": "include/common/notificationsUserDetailsInvoice.php",
          "status": "modified",
          "additions": 461,
          "deletions": 454,
          "patch": "@@ -1,4 +1,4 @@\n-<?php\n+<?php \n /*\n  *********************************************************************************************************\n  * daloRADIUS - RADIUS Web Platform\n@@ -15,473 +15,480 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n \n-\trequire_once(dirname(__FILE__).\"/../../notifications/processNotificationUserDetailsInvoice.php\");\n-\t//require_once(dirname(__FILE__).\"/../../library/config_read.php\");\n+    // prevent this file to be directly accessed\n+    if (strpos($_SERVER['PHP_SELF'], '/include/common/notificationsUserDetailsInvoice.php') !== false) {\n+        header(\"Location: ../../index.php\");\n+        exit;\n+    }\n \n-\t/*\n-\tisset($_GET['batch_name']) ? $batch_name = $_GET['batch_name'] : $batch_name = \"\";\n-\tisset($_GET['destination']) ? $destination = $_GET['destination'] : $destination = \"download\";\n-\t\n-\t//test\n-\t$batch_name = \"batch_test6\"; \n-\t\n-\tif ($batch_name != \"\") {\n-\t\t$customerInfo = @getBatchDetails($batch_name);\n-\t\t\n-\t\t$smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n-\t\t$smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n-\t\t$smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n-\t\t$from = $configValues['CONFIG_MAIL_SMTPFROM'];\n-\t\t\n-\t\t$pdfDocument = @createBatchDetailsNotification($customerInfo);\n-\t\t\n-\t\tif ($destination == \"download\") {\n-\t\t\t\n-\t\t\theader(\"Content-type: application/pdf\");\n-\t\t\theader(\"Content-Disposition: attachment; filename=batch_notification_invoice_\" . date(\"Ymd\") . \".pdf; size=\" . strlen($pdfDocument));\n-\t\t\tprint $pdfDocument;\n-\t\t\t\n-\t\t} else if ($destination == \"email\") {\n-\t\t\t\n-\t\t\t@emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from);\n-\t\t\theader(\"Location: \".$_SERVER['HTTP_REFERER']);\n-\t\t}\n-\t\t\n-\t}\n-\t*/\n-\t\n-\tfunction getCustomerInfo($row) {\n-\t\n-\t\t//global $configValues;\n-\t\t\n-\t\t$customerInfo = array();\n-\t\t\n+    require_once(dirname(__FILE__).\"/../../notifications/processNotificationUserDetailsInvoice.php\");\n+    //require_once(dirname(__FILE__).\"/../../library/config_read.php\");\n \n-\t\tgetCustomerInfo_customer_info($row, $customerInfo);\n-\t\tgetCustomerInfo_service_plan($row, $customerInfo);\n-\t\t\n-\t\treturn $customerInfo;\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\tfunction getCustomerInfo_customer_info($row, &$customerInfo) {\n-\t\t\t\t\n-\t\tglobal $configValues;\n-\t\trequire(dirname(__FILE__).\"/../../lang/main.php\");\n-\t\t\n-\t\t$tableTags = \"width='580px' \";\n-\t\t$tableTrTags = \"bgcolor='#ECE5B6'\";\n-\t\t\n-\t\t\n-\t\tif (!empty($row['email1']))\n-\t\t\t$invoice_email = $row['email1'];\n-\t\telse if (!empty($row['email2']))\n-\t\t\t$invoice_email = $row['email2'];\n-\t\telse if (!empty($row['email3']))\n-\t\t\t$invoice_email = $row['email3'];\n-\t\telse\n-\t\t\t$invoice_email = \"\";\n-\t\t\n-\t\tif (!empty($row['mobilephone']))\n-\t\t\t$invoice_phone = $row['mobilephone'];\n-\t\telse if (!empty($row['workphone']))\n-\t\t\t$invoice_phone = $row['mobilephone'];\n-\t\telse if (!empty($row['homephone']))\n-\t\t\t$invoice_phone = $row['homephone'];\n-\t\telse\n-\t\t\t$invoice_phone = \"Unavailable\";\n-\t\t\t\n-\t\t$invoice_address = \"\";\n-\t\tif (!empty($row['address']))\n-\t\t\t$invoice_address = $row['address'];\n-\t\t\n-\t\tif (!empty($row['city']))\n-\t\t\t$invoice_address .= \", \".$row['city'];\n-\t\t\n-\t\tif (!empty($row['state']))\n-\t\t\t$invoice_address .= \"<br/>\".$row['state'];\n-\t\t\n-\t\tif (!empty($row['zip']))\n-\t\t\t$invoice_address .= \" \".$row['zip'];\n-\t\t\n-\t\tif (empty($invoice_address))\n-\t\t\t$invoice_address = \"Unavailable\";\n-\t\t\n-\t\t$customerInfo['business_name'] = $row['firstname']. \" \" .$row['lastname'];\n-\t\t$customerInfo['business_address'] = $invoice_address;\n-\t\t$customerInfo['business_phone'] = $invoice_phone;\n-\t\t$customerInfo['business_email'] = $invoice_email;\n+    /*\n+    isset($_GET['batch_name']) ? $batch_name = $_GET['batch_name'] : $batch_name = \"\";\n+    isset($_GET['destination']) ? $destination = $_GET['destination'] : $destination = \"download\";\n+    \n+    //test\n+    $batch_name = \"batch_test6\"; \n+    \n+    if ($batch_name != \"\") {\n+        $customerInfo = @getBatchDetails($batch_name);\n+        \n+        $smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n+        $smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n+        $smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n+        $from = $configValues['CONFIG_MAIL_SMTPFROM'];\n+        \n+        $pdfDocument = @createBatchDetailsNotification($customerInfo);\n+        \n+        if ($destination == \"download\") {\n+            \n+            header(\"Content-type: application/pdf\");\n+            header(\"Content-Disposition: attachment; filename=batch_notification_invoice_\" . date(\"Ymd\") . \".pdf; size=\" . strlen($pdfDocument));\n+            print $pdfDocument;\n+            \n+        } else if ($destination == \"email\") {\n+            \n+            @emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from);\n+            header(\"Location: \".$_SERVER['HTTP_REFERER']);\n+        }\n+        \n+    }\n+    */\n+    \n+    function getCustomerInfo($row) {\n+    \n+        //global $configValues;\n+        \n+        $customerInfo = array();\n+        \n \n+        getCustomerInfo_customer_info($row, $customerInfo);\n+        getCustomerInfo_service_plan($row, $customerInfo);\n+        \n+        return $customerInfo;\n+        \n+    }\n+    \n+    \n+    \n+    function getCustomerInfo_customer_info($row, &$customerInfo) {\n+                \n+        global $configValues;\n+        require(dirname(__FILE__).\"/../../lang/main.php\");\n+        \n+        $tableTags = \"width='580px' \";\n+        $tableTrTags = \"bgcolor='#ECE5B6'\";\n+        \n+        \n+        if (!empty($row['email1']))\n+            $invoice_email = $row['email1'];\n+        else if (!empty($row['email2']))\n+            $invoice_email = $row['email2'];\n+        else if (!empty($row['email3']))\n+            $invoice_email = $row['email3'];\n+        else\n+            $invoice_email = \"\";\n+        \n+        if (!empty($row['mobilephone']))\n+            $invoice_phone = $row['mobilephone'];\n+        else if (!empty($row['workphone']))\n+            $invoice_phone = $row['mobilephone'];\n+        else if (!empty($row['homephone']))\n+            $invoice_phone = $row['homephone'];\n+        else\n+            $invoice_phone = \"Unavailable\";\n+            \n+        $invoice_address = \"\";\n+        if (!empty($row['address']))\n+            $invoice_address = $row['address'];\n+        \n+        if (!empty($row['city']))\n+            $invoice_address .= \", \".$row['city'];\n+        \n+        if (!empty($row['state']))\n+            $invoice_address .= \"<br/>\".$row['state'];\n+        \n+        if (!empty($row['zip']))\n+            $invoice_address .= \" \".$row['zip'];\n+        \n+        if (empty($invoice_address))\n+            $invoice_address = \"Unavailable\";\n+        \n+        $customerInfo['business_name'] = $row['firstname']. \" \" .$row['lastname'];\n+        $customerInfo['business_address'] = $invoice_address;\n+        $customerInfo['business_phone'] = $invoice_phone;\n+        $customerInfo['business_email'] = $invoice_email;\n \n-\t}\n-\t\n-\t\n-\tfunction getCustomerInfo_service_plan($row, &$customerInfo) {\n-\t\t\t\t\n-\t\tglobal $configValues;\n-\t\trequire(dirname(__FILE__).\"/../../lang/main.php\");\n-\t\t\n-\t\t$tableTags = \"width='580px' \";\n-\t\t$tableTrTags = \"bgcolor='#ECE5B6'\";\n-\t\t\n-\t\t$service_plan_info = \"\";\n-\t\t$service_plan_info = \"<table $tableTags>\";\n-\t\t\n-\t\t$service_plan_info .= \"\".\n \n-\t\t\t\t\t\"<tr $tableTrTags'>\n-\t\t\t\t\t<td>\".t('all','Username').\"</td>\n-\t\t\t\t\t<td>\".$row['username'].\"</td>\n-\t\t\t\t\t</tr>\".\n-\t\t\n-\t\t\t\t\t\"<tr $tableTrTags'>\n-\t\t\t\t\t<td>\".t('all','PlanName').\"</td>\n-\t\t\t\t\t<td>\".$row['planname'].\"</td>\n-\t\t\t\t\t</tr>\".\n-\t\t\t\t\t\"<tr $tableTrTags'>\n-\t\t\t\t\t<td>\".t('all','PlanRecurring').\"</td>\n-\t\t\t\t\t<td>\".$row['planRecurring'].\"</td>\n-\t\t\t\t\t</tr>\".\n-\t\t\t\t\t\"<tr $tableTrTags'>\n-\t\t\t\t\t<td>\".t('all','PlanRecurringPeriod').\"</td>\n-\t\t\t\t\t<td>\".$row['planRecurringPeriod'].\"</td>\n-\t\t\t\t\t</tr>\".\n-\t\t\t\t\t\"<tr $tableTrTags'>\n-\t\t\t\t\t<td>\".t('all','PlanCost').\"</td>\n-\t\t\t\t\t<td>\".$row['planCost'].\"</td>\n-\t\t\t\t\t</tr>\".\n-\t\t\t\t\t\"<tr $tableTrTags'>\n-\t\t\t\t\t<td>\".t('all','NextBill').\"</td>\n-\t\t\t\t\t<td>\".$row['nextbill'].\"</td>\n-\t\t\t\t\t</tr>\".\n-\t\t\t\t\t\"<tr $tableTrTags'>\n-\t\t\t\t\t<td>\".t('all','BillDue').\"</td>\n-\t\t\t\t\t<td>\".$row['billdue'].\"</td>\n-\t\t\t\t\t</tr>\".\n-\t\t\t\t\t\"\";\n-\t\t\n-\t\t$service_plan_info .= \"</table>\";\n-\t\t$customerInfo['service_plan_info'] = $service_plan_info;\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t/*\n-\tfunction getBatchDetails($batch_name = NULL) {\n-\t\t\n-\t\trequire(dirname(__FILE__).\"/../../library/opendb.php\");\n-\t\trequire_once(dirname(__FILE__).\"/../../lang/main.php\");\n-\t\t\n-\t\tglobal $configValues;\n-\t\t\n-\t\tif ($batch_name == NULL || empty($batch_name))\n-\t\t\texit;\n-\t\t\t\n+    }\n+    \n+    \n+    function getCustomerInfo_service_plan($row, &$customerInfo) {\n+                \n+        global $configValues;\n+        require(dirname(__FILE__).\"/../../lang/main.php\");\n+        \n+        $tableTags = \"width='580px' \";\n+        $tableTrTags = \"bgcolor='#ECE5B6'\";\n+        \n+        $service_plan_info = \"\";\n+        $service_plan_info = \"<table $tableTags>\";\n+        \n+        $service_plan_info .= \"\".\n \n-\t\t\t\n-\t\t$tableTags = \"width='580px' \";\n-\t\t$tableTrTags = \"bgcolor='#ECE5B6'\";\n-\t\t\n-\t\t$customerInfo = array();\n-\t\t\n-\t\t$sql = \"SELECT \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_description,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_status,\".\n-\t\t\t\n-\t\t\t\"COUNT(DISTINCT(\".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".id)) as total_users,\".\n-\t\t\t\"COUNT(DISTINCT(\".$configValues['CONFIG_DB_TBL_RADACCT'].\".username)) as active_users,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".planname,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".plancost,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".plancurrency,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\".name as HotspotName,\".\n-\t\t\t\n-\t\t\t\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".creationdate,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".creationby,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".updatedate,\".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".updateby \".\n-\t\t\t\" FROM \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id) \".\n+                    \"<tr $tableTrTags'>\n+                    <td>\".t('all','Username').\"</td>\n+                    <td>\".$row['username'].\"</td>\n+                    </tr>\".\n+        \n+                    \"<tr $tableTrTags'>\n+                    <td>\".t('all','PlanName').\"</td>\n+                    <td>\".$row['planname'].\"</td>\n+                    </tr>\".\n+                    \"<tr $tableTrTags'>\n+                    <td>\".t('all','PlanRecurring').\"</td>\n+                    <td>\".$row['planRecurring'].\"</td>\n+                    </tr>\".\n+                    \"<tr $tableTrTags'>\n+                    <td>\".t('all','PlanRecurringPeriod').\"</td>\n+                    <td>\".$row['planRecurringPeriod'].\"</td>\n+                    </tr>\".\n+                    \"<tr $tableTrTags'>\n+                    <td>\".t('all','PlanCost').\"</td>\n+                    <td>\".$row['planCost'].\"</td>\n+                    </tr>\".\n+                    \"<tr $tableTrTags'>\n+                    <td>\".t('all','NextBill').\"</td>\n+                    <td>\".$row['nextbill'].\"</td>\n+                    </tr>\".\n+                    \"<tr $tableTrTags'>\n+                    <td>\".t('all','BillDue').\"</td>\n+                    <td>\".$row['billdue'].\"</td>\n+                    </tr>\".\n+                    \"\";\n+        \n+        $service_plan_info .= \"</table>\";\n+        $customerInfo['service_plan_info'] = $service_plan_info;    \n+        \n+    }\n+    \n+    \n+    /*\n+    function getBatchDetails($batch_name = NULL) {\n+        \n+        require(dirname(__FILE__).\"/../../library/opendb.php\");\n+        require_once(dirname(__FILE__).\"/../../lang/main.php\");\n+        \n+        global $configValues;\n+        \n+        if ($batch_name == NULL || empty($batch_name))\n+            exit;\n+            \n \n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".planname = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".planname) \".\n+            \n+        $tableTags = \"width='580px' \";\n+        $tableTrTags = \"bgcolor='#ECE5B6'\";\n+        \n+        $customerInfo = array();\n+        \n+        $sql = \"SELECT \".\n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id,\".\n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name,\".\n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_description,\".\n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_status,\".\n+            \n+            \"COUNT(DISTINCT(\".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".id)) as total_users,\".\n+            \"COUNT(DISTINCT(\".$configValues['CONFIG_DB_TBL_RADACCT'].\".username)) as active_users,\".\n+            $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".planname,\".\n+            $configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".plancost,\".\n+            $configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".plancurrency,\".\n+            $configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\".name as HotspotName,\".\n+            \n+            \n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".creationdate,\".\n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".creationby,\".\n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".updatedate,\".\n+            $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".updateby \".\n+            \" FROM \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\n+            \" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\n+            \" ON \".\n+            \"(\".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id = \".\n+            $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id) \".\n \n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".hotspot_id = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\".id) \".\n-\t\t\t\n-\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_RADACCT'].\n-\t\t\t\" ON \".\n-\t\t\t\"(\".$configValues['CONFIG_DB_TBL_RADACCT'].\".username = \".\n-\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username) \".\n-\t\t\t\n-\t\t\t\" WHERE \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name = '$batch_name' \".\n-\t\t\t\" GROUP by \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name \";\n-\t\t\t\n-\t\t$res = $dbSocket->query($sql);\n+            \" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\n+            \" ON \".\n+            \"(\".$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\".planname = \".\n+            $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".planname) \".\n \n-\t\t$batch_details = \"\";\n-\t\t\n-\t\t$batch_details .= \"<table $tableTags><tr $tableTrTags>\n-\t\t\t\t\t<td> \n-\t\t\t\".t('all','BatchName').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','HotSpot').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','BatchStatus').\"\n-\t\t\t</td>\n-\t\t\t\n-\t\t\t<td> \n-\t\t\t\".t('all','TotalUsers').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','ActiveUsers').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','PlanName').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','PlanCost').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','BatchCost').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','CreationDate').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','CreationBy').\"\n-\t\t\t</td>\n-\t\n-\t\t\t</tr>\";\n-\t\t\n-\t\t$active_users_per = 0;\n-\t\t$total_users = 0;\n-\t\t$active_users = 0;\n-\t\t$batch_cost = 0;\n-\t\t\n-\t\t$hotspot_name = \"\";\n-\t\t$batch_id = \"\";\n-\t\t$planname = \"\";\n-\t\t\n-\t\twhile($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n-\t\t\t\n-\t\t\t$batch_id = $row['id'];\n-\t\t\t$hotspot_name = $row['HotspotName'];\n-\t\t\t$batch_status = $row['batch_status'];\n-\t\t\t$plancost = $row['plancost'];\n-\t\t\t$total_users = $row['total_users'];\n-\t\t\t$active_users = $row['active_users'];\n-\t\t\t$batch_cost = ($active_users * $plancost);\n-\t\t\t$plan_currency = $row['plancurrency'];\n-\t\t\t$planname = $row['planname'];\n-\t\t\t\n-\t\n-\t\t\t$batch_details .= \"\n-\t\t\t\t\t<tr>\n-\t\t\t\t\t\n-\t\t\t\t\t<td>\".$row['batch_name'].\"\n-\t\t\t\t\t\t\n-\t\t\t\t\t</td>\n-\t\t\t\t\t\n-\t\t\t\t\t<td>\".$hotspot_name.\"\n-\t\t\t\t\t\t\n-\t\t\t\t\t</td>\n-\t\t\t\n-\t\t\t\t\t<td>\".$batch_status.\"\n-\t\t\t\t\t\t\n-\t\t\t\t\t</td>\n-\t\t\t\t\t\n-\t\t\t\t\t<td>\".$total_users.\"\n-\t\t\t\t\t\t\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\".$active_users.\"\n-\t\t\t\t\t\t\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\".\n-\t\t\t\t\t\t$row['planname'].\"\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\".$plancost.\"\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\".$batch_cost.\"\n-\t\t\t\t\t</td>\n-\t\t\t\t\t\n-\t\t\t\t\t<td>\".\n-\t\t\t\t\t\t$row['creationdate'].\"\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\".\n-\t\t\t\t\t\t$row['creationby'].\"\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t</tr>\n-\t\t\t\";\n-\t\t\t\n+            \" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\n+            \" ON \".\n+            \"(\".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".hotspot_id = \".\n+            $configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\".id) \".\n+            \n+            \" LEFT JOIN \".$configValues['CONFIG_DB_TBL_RADACCT'].\n+            \" ON \".\n+            \"(\".$configValues['CONFIG_DB_TBL_RADACCT'].\".username = \".\n+            $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username) \".\n+            \n+            \" WHERE \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name = '$batch_name' \".\n+            \" GROUP by \".$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name \";\n+            \n+        $res = $dbSocket->query($sql);\n \n-\t\t\t\n-\t\t}\n-\t\t\n-\t\t$batch_details .= \"</table>\";\n-\t\t\n-\t\t$customerInfo['batch_details'] = $batch_details;\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t$sql = \"SELECT planId, planName, planRecurringPeriod, planCost, planSetupCost, planTax, planCurrency FROM \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\n-\t\t\t\t\" WHERE planName = '\".$planname.\"'\";\n-\t\t$res = $dbSocket->query($sql);\n-\t\t$row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n-\t\t\n-\t\t$service_plan_info = \"\";\n-\t\t$service_plan_info = \"<table $tableTags>\";\n-\t\t\n-\t\tforeach($row as $rowName => $rowValue) {\n-\t\t\n-\t\t\t$service_plan_info .= \"<tr $tableTrTags'>\n-\t\t\t\t\t\t<td>$rowName</td>\n-\t\t\t\t\t\t<td>$rowValue</td>\n-\t\t\t\t\t\t</tr>\";\n-\t\t\n-\t\t}\n-\t\t\n-\t\t$service_plan_info .= \"</table>\";\n-\t\t$customerInfo['service_plan_info'] = $service_plan_info;\n-\t\t\n-\t\t\n-\t\t$sql = \"SELECT id, name, owner, address, companyphone, companyemail, companywebsite FROM \".$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\n-\t\t\t\t\t\" WHERE name='\".$hotspot_name.\"'\";\n-\t\t$res = $dbSocket->query($sql);\n-\t\t$row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n-\t\t\n-\t\t$customerInfo['business_name'] = $row['name'];\n-\t\t$customerInfo['business_owner_name'] = $row['owner'];\n-\t\t$customerInfo['business_address'] = $row['address'];\n-\t\t$customerInfo['business_phone'] = $row['companyphone'];\n-\t\t$customerInfo['business_email'] = $row['companyemail'];\n-\t\t$customerInfo['business_web'] = $row['companywebsite'];\n-\t\t\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t$batch_active_users = \"\";\n-\t\t\n-\t\t$sql = \"SELECT \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".id,\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username,\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_RADACCT'].\".acctstarttime,\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name \".\n-\t\t\t\t\n-\t\t\t\t\" FROM \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\",\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_RADACCT'].\",\".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\n-\t\t\t\t\n-\t\t\t\t\" WHERE \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id = \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id\".\n-\t\t\t\t\" AND \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id = '$batch_id' \".\n-\t\t\t\t\" AND \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username = \".\n-\t\t\t\t$configValues['CONFIG_DB_TBL_RADACCT'].\".username\".\n-\t\n-\t\t\t\t\" GROUP by \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username \".\n-\t\t\t\t\" ORDER BY id ,\".$configValues['CONFIG_DB_TBL_RADACCT'].\".radacctid ASC \";\n-\t\t\t\t\n-\t\t$res = $dbSocket->query($sql);\n-\t\t\n-\t\t$batch_active_users = \"<table $tableTags><tr $tableTrTags'>\n-\t\t\t<td> \n-\t\t\t\".t('all','BatchName').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','Username').\"\n-\t\t\t</td>\n-\t\n-\t\t\t<td> \n-\t\t\t\".t('all','StartTime').\"\n-\t\t\t</td>\n-\t\n-\t\t\t</tr>\";\n+        $batch_details = \"\";\n+        \n+        $batch_details .= \"<table $tableTags><tr $tableTrTags>\n+                    <td> \n+            \".t('all','BatchName').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','HotSpot').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','BatchStatus').\"\n+            </td>\n+            \n+            <td> \n+            \".t('all','TotalUsers').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','ActiveUsers').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','PlanName').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','PlanCost').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','BatchCost').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','CreationDate').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','CreationBy').\"\n+            </td>\n+    \n+            </tr>\";\n+        \n+        $active_users_per = 0;\n+        $total_users = 0;\n+        $active_users = 0;\n+        $batch_cost = 0;\n+        \n+        $hotspot_name = \"\";\n+        $batch_id = \"\";\n+        $planname = \"\";\n+        \n+        while($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n+            \n+            $batch_id = $row['id'];\n+            $hotspot_name = $row['HotspotName'];\n+            $batch_status = $row['batch_status'];\n+            $plancost = $row['plancost'];\n+            $total_users = $row['total_users'];\n+            $active_users = $row['active_users'];\n+            $batch_cost = ($active_users * $plancost);\n+            $plan_currency = $row['plancurrency'];\n+            $planname = $row['planname'];\n+            \n+    \n+            $batch_details .= \"\n+                    <tr>\n+                    \n+                    <td>\".$row['batch_name'].\"\n+                        \n+                    </td>\n+                    \n+                    <td>\".$hotspot_name.\"\n+                        \n+                    </td>\n+            \n+                    <td>\".$batch_status.\"\n+                        \n+                    </td>\n+                    \n+                    <td>\".$total_users.\"\n+                        \n+                    </td>\n+    \n+                    <td>\".$active_users.\"\n+                        \n+                    </td>\n+    \n+                    <td>\".\n+                        $row['planname'].\"\n+                    </td>\n+    \n+                    <td>\".$plancost.\"\n+                    </td>\n+    \n+                    <td>\".$batch_cost.\"\n+                    </td>\n+                    \n+                    <td>\".\n+                        $row['creationdate'].\"\n+                    </td>\n+    \n+                    <td>\".\n+                        $row['creationby'].\"\n+                    </td>\n+    \n+                </tr>\n+            \";\n+            \n \n-\t\t\t\n-\t\t$active_users_per = 0;\n-\t\t$total_users = 0;\n-\t\t$active_users = 0;\n-\t\t$batch_cost = 0;\n-\t\twhile($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n-\t\n-\t\t\t$username = $row['username'];\n-\t\t\t$acctstarttime = $row['acctstarttime'];\n-\t\t\t$batch_name = $row['batch_name'];\n-\t\t\t\n-\t\t\t$batch_active_users .= \"\n-\t\t\t\t\t<tr>\n-\t\t\t\t\t\n-\t\t\t\t\t<td>\".$batch_name.\"\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\".$username.\"\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\".$acctstarttime.\"\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t</tr>\n-\t\t\t\";\n+            \n+        }\n+        \n+        $batch_details .= \"</table>\";\n+        \n+        $customerInfo['batch_details'] = $batch_details;\n+        \n+        \n+        \n+        \n+        \n+        \n+        \n+        \n+        \n+        \n+        $sql = \"SELECT planId, planName, planRecurringPeriod, planCost, planSetupCost, planTax, planCurrency FROM \".\n+                $configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\n+                \" WHERE planName = '\".$planname.\"'\";\n+        $res = $dbSocket->query($sql);\n+        $row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n+        \n+        $service_plan_info = \"\";\n+        $service_plan_info = \"<table $tableTags>\";\n+        \n+        foreach($row as $rowName => $rowValue) {\n+        \n+            $service_plan_info .= \"<tr $tableTrTags'>\n+                        <td>$rowName</td>\n+                        <td>$rowValue</td>\n+                        </tr>\";\n+        \n+        }\n+        \n+        $service_plan_info .= \"</table>\";\n+        $customerInfo['service_plan_info'] = $service_plan_info;\n+        \n+        \n+        $sql = \"SELECT id, name, owner, address, companyphone, companyemail, companywebsite FROM \".$configValues['CONFIG_DB_TBL_DALOHOTSPOTS'].\n+                    \" WHERE name='\".$hotspot_name.\"'\";\n+        $res = $dbSocket->query($sql);\n+        $row = $res->fetchRow(DB_FETCHMODE_ASSOC);\n+        \n+        $customerInfo['business_name'] = $row['name'];\n+        $customerInfo['business_owner_name'] = $row['owner'];\n+        $customerInfo['business_address'] = $row['address'];\n+        $customerInfo['business_phone'] = $row['companyphone'];\n+        $customerInfo['business_email'] = $row['companyemail'];\n+        $customerInfo['business_web'] = $row['companywebsite'];\n+                \n+        \n+        \n+        \n+        \n+        \n+        $batch_active_users = \"\";\n+        \n+        $sql = \"SELECT \".\n+                $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".id,\".\n+                $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username,\".\n+                $configValues['CONFIG_DB_TBL_RADACCT'].\".acctstarttime,\".\n+                $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".batch_name \".\n+                \n+                \" FROM \".\n+                $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\",\".\n+                $configValues['CONFIG_DB_TBL_RADACCT'].\",\".\n+                $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\n+                \n+                \" WHERE \".\n+                $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id = \".\n+                $configValues['CONFIG_DB_TBL_DALOBATCHHISTORY'].\".id\".\n+                \" AND \".\n+                $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".batch_id = '$batch_id' \".\n+                \" AND \".\n+                $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username = \".\n+                $configValues['CONFIG_DB_TBL_RADACCT'].\".username\".\n+    \n+                \" GROUP by \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\".username \".\n+                \" ORDER BY id ,\".$configValues['CONFIG_DB_TBL_RADACCT'].\".radacctid ASC \";\n+                \n+        $res = $dbSocket->query($sql);\n+        \n+        $batch_active_users = \"<table $tableTags><tr $tableTrTags'>\n+            <td> \n+            \".t('all','BatchName').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','Username').\"\n+            </td>\n+    \n+            <td> \n+            \".t('all','StartTime').\"\n+            </td>\n+    \n+            </tr>\";\n \n-\t\t}\n-\t\t\n+            \n+        $active_users_per = 0;\n+        $total_users = 0;\n+        $active_users = 0;\n+        $batch_cost = 0;\n+        while($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n+    \n+            $username = $row['username'];\n+            $acctstarttime = $row['acctstarttime'];\n+            $batch_name = $row['batch_name'];\n+            \n+            $batch_active_users .= \"\n+                    <tr>\n+                    \n+                    <td>\".$batch_name.\"\n+                    </td>\n+    \n+                    <td>\".$username.\"\n+                    </td>\n+    \n+                    <td>\".$acctstarttime.\"\n+                    </td>\n+    \n+                </tr>\n+            \";\n \n-\t\t$batch_active_users .= \"</table>\";\n-\t\t$customerInfo['batch_active_users'] = $batch_active_users;\n-\t\t\n-\t\t\n-\t\trequire(dirname(__FILE__).\"/../../library/closedb.php\");\n-\t\t\n-\t\treturn $customerInfo;\n-\t\t\n-\t\t\n-\t}\n-\t*/\n-?>\n\\ No newline at end of file\n+        }\n+        \n+\n+        $batch_active_users .= \"</table>\";\n+        $customerInfo['batch_active_users'] = $batch_active_users;\n+        \n+        \n+        require(dirname(__FILE__).\"/../../library/closedb.php\");\n+        \n+        return $customerInfo;\n+        \n+        \n+    }\n+    */\n+?>"
        },
        {
          "filename": "include/common/notificationsUserInvoice.php",
          "status": "modified",
          "additions": 218,
          "deletions": 176,
          "patch": "@@ -1,4 +1,4 @@\n-<?php\n+<?php \n /*\n  *********************************************************************************************************\n  * daloRADIUS - RADIUS Web Platform\n@@ -15,190 +15,232 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n \n-\trequire_once(dirname(__FILE__).\"/../../notifications/processNotificationUserInvoice.php\");\n-\trequire_once(dirname(__FILE__).\"/../../library/config_read.php\");\n-\t\n-\tisset($_GET['invoice_id']) ? $invoice_id = $_GET['invoice_id'] : $invoice_id = \"\";\n-\tisset($_GET['destination']) ? $destination = $_GET['destination'] : $destination = \"preview\";\n-\t\n-\tif ($invoice_id != \"\") {\n-\t\t$customerInfo = @getInvoiceDetails($invoice_id);\n-\t\t$document = @createNotification($customerInfo, $destination == \"preview\");\n-\t\t\n-\t\tif ($destination == \"download\") {\n-\t\t\t\n-\t\t\t$pdfDocument = $document;\n-\t\t\t\n-\t\t\theader(\"Content-type: application/pdf\");\n-\t\t\theader(\"Content-Disposition: attachment; filename=notification_user_invoice_\" . date(\"Ymd\") . \".pdf; size=\" . strlen($pdfDocument));\n-\t\t\tprint $pdfDocument;\n-\t\t\t\n-\t\t} else if ($destination == \"email\") {\n-\t\t\t\n-\t\t\t$pdfDocument = $document;\n-\t\t\t\n-\t\t\t$smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n-\t\t\t$smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n-\t\t\t$smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n-\t\t\t$from = $configValues['CONFIG_MAIL_SMTPFROM'];\n-\t\t\n-\t\t\t@emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from);\n-\t\t\theader(\"Location: \".$_SERVER['HTTP_REFERER']);\n-\t\t\t\n-\t\t} else if ($destination == 'preview') {\n+    include(\"../../library/checklogin.php\");\n+    $operator = $_SESSION['operator_user'];\n \n-\t\t\t$htmlDocument = $document;\n+    $invoice_id = (array_key_exists('invoice_id', $_GET) && !empty(str_replace(\"%\", \"\", trim($_GET['invoice_id']))))\n+                ? str_replace(\"%\", \"\", trim($_GET['invoice_id'])) : \"\";\n \n-\t\t\t$result = file_put_contents(dirname(__FILE__).'/../../notifications/templates/invoice_preview.html', $htmlDocument);\n-\t\t\theader('Location: ../../notifications/templates/invoice_preview.html');\n-\t\t}\n-\t}\n-\t\n-\t\n-\tfunction getInvoiceDetails($invoice_id = NULL) {\n-\t\t\n-\t\trequire(dirname(__FILE__).\"/../../library/opendb.php\");\n-\t\trequire_once(dirname(__FILE__).\"/../../lang/main.php\");\n-\t\t\n-\t\tglobal $configValues;\n-\t\t\n-\t\tif ($invoice_id == NULL || empty($invoice_id))\n-\t\t\texit;\n-\t\t\t\n-\t\t$tableTags = \"width='580px' \";\n-\t\t$tableTrTags = \"bgcolor='#ECE5B6'\";\n-\t\t\n-\t\t// get invoice details\n-\t\t$sql = \"SELECT a.id, a.date, a.status_id, a.type_id, a.user_id, a.notes, b.contactperson, b.username, b.company, \".\n-\t\t\t\t\" b.city, b.state, b.country, b.zip, b.address, b.email, b.emailinvoice, b.phone, f.value as type, \".\n-\t\t\t\t\" c.value AS status, COALESCE(e2.totalpayed, 0) as totalpayed, COALESCE(d2.totalbilled, 0) as totalbilled \".\n-\t\t\t\t\" FROM \".$configValues['CONFIG_DB_TBL_DALOBILLINGINVOICE'].\" AS a\".\n-\t\t\t\t\" INNER JOIN \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\" AS b ON (a.user_id = b.id) \".\n-\t\t\t\t\" INNER JOIN \".$configValues['CONFIG_DB_TBL_DALOBILLINGINVOICESTATUS'].\" AS c ON (a.status_id = c.id) \".\n-\t\t\t\t\" INNER JOIN \".$configValues['CONFIG_DB_TBL_DALOBILLINGINVOICETYPE'].\" AS f ON (a.type_id = f.id) \".\n-\t\t\t\t\" LEFT JOIN (SELECT SUM(d.amount + d.tax_amount) \".\n-\t\t\t\t\t\" as totalbilled, invoice_id, amount, tax_amount, notes, plan_id FROM \".$configValues['CONFIG_DB_TBL_DALOBILLINGINVOICEITEMS'].\" AS d \".\n-\t\t\t\t\t\" GROUP BY d.invoice_id) AS d2 ON (d2.invoice_id = a.id) \".\n-\t\t\t\t\" LEFT JOIN \".$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].\" AS bp2 ON (bp2.id = d2.plan_id) \".\n-\t\t\t\t\" LEFT JOIN (SELECT SUM(e.amount) as totalpayed, invoice_id FROM \". \n-\t\t\t\t$configValues['CONFIG_DB_TBL_DALOPAYMENTS'].\" AS e GROUP BY e.invoice_id) AS e2 ON (e2.invoice_id = a.id) \".\n-\t\t\t\t\" WHERE a.id = '\".$dbSocket->escapeSimple($invoice_id).\"'\".\n-\t\t\t\t\" GROUP BY a.id \";\n-\t\t$res = $dbSocket->query($sql);\t\n-\t\t$invoiceDetails = $res->fetchRow(DB_FETCHMODE_ASSOC);\n+    $destination = (array_key_exists('destination', $_GET) && !empty(trim($_GET['destination'])) &&\n+                    in_array(strtolower(trim($_GET['destination'])), array( \"download\", \"email\", \"preview\" )))\n+                 ? strtolower($_GET['destination']) : \"preview\";\n+                 \n+    if (empty($invoice_id)) {\n+        die(\"you should provide a valid invoice id\");\n+    }\n \n-\t\tif (empty($invoiceDetails['email']))\n-\t\t\t$customer_email = $invoiceDetails['emailinvoice'];\n-\t\telse\n-\t\t\t$customer_email = $invoiceDetails['email'];\n-\t\t\t\n-\t\t// populate user contact informatin\n-\t\t$customerInfo['customer_name'] = $invoiceDetails['contactperson'];\n-\t\t$customerInfo['customer_address'] = $invoiceDetails['address']. \" \" . $invoiceDetails['city']. \" \" . $invoiceDetails['state'];\n-\t\t$customerInfo['customer_email'] = $customer_email;\n-\t\t$customerInfo['customer_phone'] = $invoiceDetails['phone'];\n-\t\t\n-\t\t// populate user invoice details\n-\t\t$balance = (float) ($invoiceDetails['totalpayed'] - $invoiceDetails['totalbilled']);\n-\t\t$invoice_details = \"\";\n-\t\t$invoice_details .= \"\".\n-\t\t\"<b>\".t('all','ClientName').\"</b>: \".$invoiceDetails['contactperson'].\"<br/>\".\n-\t\t\"<b>\".t('all','Invoice').\"</b>: \".$invoice_id.\"<br/>\".\n-\t\t\"<b>\".t('all','Date').\"</b>: \".$invoiceDetails['date'].\"<br/>\".\n-\t\t\"<b>\".t('all','TotalBilled').\"</b>: \".$invoiceDetails['totalbilled'].\"<br/>\".\n-\t\t\"<b>\".t('all','TotalPayed').\"</b>: \".$invoiceDetails['totalpayed'].\"<br/>\".\n-\t\t\"<b>\".t('all','Balance').\"</b>: \".$balance.\"<br/>\".\n-\t\t\"<b>\".t('all','Status').\"</b>: \".$invoiceDetails['status'].\"<br/>\".\n-\t\t\"<b>\".t('ContactInfo','Notes').\"</b>: \".$invoiceDetails['notes'].\"<br/><br/><br/>\";\n-\t\t\n-\t\t$customerInfo['invoice_details'] = $invoice_details;\n-\t\t\n-\t\t// populate customer data - NEW STYLE\n-\t\t$customerInfo['customerId'] = $invoiceDetails['user_id'];\n-\t\t$customerInfo['customerName'] = (isset($invoiceDetails['company']) ? $invoiceDetails['company'] : $invoiceDetails['contactperson']);\n-\t\t$customerInfo['customerAddress'] = $invoiceDetails['address'];\n-\t\t$customerInfo['customerAddress2'] = $invoiceDetails['zip'] . ' '. $invoiceDetails['city'] . ' ' .\n-\t\t                                    $invoiceDetails['state'] . ' ' . $invoiceDetails['country'];\n-\t\t$customerInfo['customerEmail'] = $invoiceDetails['email'];\n-\t\t$customerInfo['customerPhone'] = $invoiceDetails['phone'];\n-\t\t$customerInfo['customerContact'] = $invoiceDetails['contactperson'];\n-\t\t\n-\t\t$customerInfo['invoiceNumber'] = $invoice_id;\n-\t\t$customerInfo['invoiceDate'] = date('Y-m-d', strtotime($invoiceDetails['date']));\n-\t\t$customerInfo['invoiceStatus'] = strtoupper($invoiceDetails['status']);\n-\t\t$customerInfo['invoiceTotalBilled'] = $invoiceDetails['totalbilled'];\n-\t\t$customerInfo['invoicePaid'] = $invoiceDetails['totalpayed'];\n-\t\t$customerInfo['invoiceDue'] = $balance;\n-\t\t$customerInfo['invoiceNotes'] = $invoiceDetails['notes'];\n-\t\t\n-\t\t// populate user invoice items\n-\t\t$invoice_items = \"\";\n-\t\t$invoice_items .= \"<table $tableTags><tr $tableTrTags>\n-\t\t\t<th>Plan</th>\n-\t\t\t<th>Item Amount</th>\n-\t\t\t<th>Item Tax</th>\n-\t\t\t<th>Notes</th>\n-\t\t\t</tr>\n-\t\t\t\";\n+    require_once(\"../../notifications/processNotificationUserInvoice.php\");\n+    require_once(\"../../library/config_read.php\");\n+    \n+    $customerInfo = @getInvoiceDetails($invoice_id);\n+    \n+    if ($customerInfo === false) {\n+        die(\"error when loading invoice\");\n+    }\n+    \n+    $document = @createNotification($customerInfo, $destination == \"preview\");\n+        \n+    if ($destination == \"download\") {\n+        $filename = sprintf('notification_invoice_%s.pdf', date(\"Ymd\"));\n+        $size = strlen($document);\n+        \n+        header(\"Content-type: application/pdf\");\n+        header(sprintf(\"Content-Disposition: attachment; filename=%s; size=%d\", $filename, $size));\n+            \n+        print $document;\n \n-\t\t// get all invoice items\n-\t\t$sql = 'SELECT a.id, a.plan_id, a.amount, a.tax_amount, a.notes, b.planName '.\n-\t\t\t\t' FROM '.$configValues['CONFIG_DB_TBL_DALOBILLINGINVOICEITEMS'].' a '.\n-\t\t\t\t' LEFT JOIN '.$configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'].' b ON a.plan_id = b.id '.\n-\t\t\t\t' WHERE a.invoice_id = '.$invoice_id.' ORDER BY a.id ASC';\n-\t\t$res = $dbSocket->query($sql);\n-\t\t$logDebugSQL .= $sql . \"\\n\";\n-\t\t\n-\t\t// initialize invoice items - NEW STYLE\n-\t\t$invoiceItems = array();\n-\t\t$invoiceItemsNumber = 1;\n-\t\t$invoiceItemsTotalAmount = 0;\n-\t\t$invoiceItemsTotalTax = 0;\n-\t\t\n-\t\twhile($row = $res->fetchRow(DB_FETCHMODE_ASSOC)) {\n+    } else if ($destination == \"email\") {\n+        $smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n+        $smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n+        $smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n+        \n+        $from = $configValues['CONFIG_MAIL_SMTPFROM'];\n+        \n+        @emailNotification($document, $customerInfo, $smtpInfo, $from);\n+        $redirect = (array_key_exists('PREV_LIST_PAGE', $_SESSION) && !empty(trim($_SESSION['PREV_LIST_PAGE'])))\n+                  ? trim($_SESSION['PREV_LIST_PAGE']) : \"/bill-invoice.php\";\n+        header(\"Location: \" . $redirect);\n+            \n+    } else /*if ($destination == \"preview\")*/ {\n+        print $document;\n+        //~ $result = file_put_contents(dirname(__FILE__).'/../../notifications/templates/invoice_preview.html', $htmlDocument);\n+        //~ header('Location: ../../notifications/templates/invoice_preview.html');\n+    }\n+    \n+    \n+    \n+    function getInvoiceDetails($invoice_id = NULL) {\n+        global $configValues;\n+        \n+        if ($invoice_id == NULL || empty($invoice_id)) {\n+            exit;\n+        }\n+        \n+        include(\"../../library/opendb.php\");\n+        include_once(\"../../lang/main.php\");\n+            \n+        $tableTags = 'style=\"width: 580px\"';\n+        $tableTrTags = 'style=\"background-color: #ECE5B6\"';\n+        \n+        // get invoice details\n+        $sql = sprintf(\"SELECT a.id, a.date, a.status_id, a.type_id, a.user_id, a.notes, b.contactperson, b.username,\n+                               b.company, b.city, b.state, b.country, b.zip, b.address, b.email, b.emailinvoice, b.phone,\n+                               f.value AS type, c.value AS status, COALESCE(e2.totalpayed, 0) AS totalpayed,\n+                               COALESCE(d2.totalbilled, 0) AS totalbilled\n+                          FROM %s AS a INNER JOIN %s AS b ON a.user_id=b.id\n+                                       INNER JOIN %s AS c ON a.status_id=c.id\n+                                       INNER JOIN %s AS f ON a.type_id=f.id\n+                                       LEFT JOIN (\n+                                                    SELECT SUM(d.amount + d.tax_amount) AS totalbilled, invoice_id,\n+                                                           amount, tax_amount, notes, plan_id\n+                                                      FROM %s AS d\n+                                                     GROUP BY d.invoice_id\n+                                                 ) AS d2 ON d2.invoice_id=a.id\n+                                       LEFT JOIN %s AS bp2 ON bp2.id=d2.plan_id\n+                                       LEFT JOIN (\n+                                                    SELECT SUM(e.amount) AS totalpayed, invoice_id\n+                                                      FROM %s AS e\n+                                                     GROUP BY e.invoice_id\n+                                                 ) AS e2 ON e2.invoice_id=a.id\n+                         WHERE a.id=%d\n+                         GROUP BY a.id\", $configValues['CONFIG_DB_TBL_DALOBILLINGINVOICE'],\n+                                         $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'],\n+                                         $configValues['CONFIG_DB_TBL_DALOBILLINGINVOICESTATUS'],\n+                                         $configValues['CONFIG_DB_TBL_DALOBILLINGINVOICETYPE'],\n+                                         $configValues['CONFIG_DB_TBL_DALOBILLINGINVOICEITEMS'],\n+                                         $configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'],\n+                                         $configValues['CONFIG_DB_TBL_DALOPAYMENTS'],\n+                                         $dbSocket->escapeSimple($invoice_id));\n+        $res = $dbSocket->query($sql);    \n+        $invoiceDetails = $res->fetchRow(DB_FETCHMODE_ASSOC);\n \n-\t\t\t$invoice_items .= \"\". \n-\t\t\t\t\"<tr>\".\n-\t\t\t\t\t\"<td>\".$row['planName'].\"</td>\".\n-\t\t\t\t\t\"<td>\".$row['amount'].\"</td>\".\n-\t\t\t\t\t\"<td>\".$row['tax_amount'].\"</td>\".\n-\t\t\t\t\t\"<td>\".$row['notes'].\"</td>\".\n-\t\t\t\t\"</tr>\";\n-\t\t\t\t\n-\t\t\t// populate invoice items - NEW STYLE\n-\t\t\t$invoiceItem = array();\n-\t\t\t\n-\t\t\t$invoiceItem['invoiceItemNumber'] = sprintf('%02d', $invoiceItemsNumber);\n-\t\t\t$invoiceItem['invoiceItemPlan'] = $row['planName'];\n-\t\t\t$invoiceItem['invoiceItemNotes'] = $row['notes'];\n-\t\t\t$invoiceItem['invoiceItemAmount'] = $row['amount'];\n-\t\t\t$invoiceItem['invoiceItemTaxAmount'] = $row['tax_amount'];\n-\t\t\t$invoiceItem['invoiceItemTotalAmount'] = $row['amount'] + $row['tax_amount'];\n-\t\t\t\n-\t\t\t$invoiceItems[] = $invoiceItem;\n-\t\t\t$invoiceItemsTotalAmount += $row['amount'];\n-\t\t\t$invoiceItemsTotalTax += $row['tax_amount'];\n-\t\t\t\n-\t\t\t++$invoiceItemsNumber;\n-\t\t}\n+        $customer_email = (empty($invoiceDetails['email'])) ? $invoiceDetails['emailinvoice'] : $invoiceDetails['email'];\n+            \n+        // populate user contact informatin\n+        $customerInfo['customer_name'] = $invoiceDetails['contactperson'];\n+        $customerInfo['customer_address'] = $invoiceDetails['address'] . \" \" . $invoiceDetails['city'] . \" \" . $invoiceDetails['state'];\n+        $customerInfo['customer_email'] = $customer_email;\n+        $customerInfo['customer_phone'] = $invoiceDetails['phone'];\n+        \n+        // populate user invoice details\n+        $balance = floatval($invoiceDetails['totalpayed'] - $invoiceDetails['totalbilled']);\n+        \n+        $details = array(\n+                            array( t('all','ClientName'), $invoiceDetails['contactperson'] ),\n+                            array( t('all','Invoice'), $invoice_id ), \n+                            array( t('all','Date'), $invoiceDetails['date'] ), \n+                            array( t('all','TotalBilled'), $invoiceDetails['totalbilled'] ), \n+                            array( t('all','TotalPayed'), $invoiceDetails['totalpayed'] ), \n+                            array( t('all','Balance'), $balance ), \n+                            array( t('all','Status'), $invoiceDetails['status'] ), \n+                            array( t('ContactInfo','Notes'), $invoiceDetails['notes'] ), \n+                        );\n+        \n+        $invoice_details = \"\";\n+        foreach ($details as $detail) {\n+            list( $caption, $data ) = $detail;\n+            $invoice_details .= sprintf(\"<b>%s</b>; %s<br>\", $caption, $data);\n+        }\n+        $invoice_details .= \"<br><br>\";\n \n-\t\t$invoice_items .= \"</table>\";\n-\t\t\n-\t\t$customerInfo['invoice_items'] = $invoice_items;\n-\t\t\n-\t\t// populate invoice items - NEW STYLE\n-\t\t$customerInfo['invoiceItems'] = $invoiceItems;\n-\t\t$customerInfo['invoiceTotalAmount'] = $invoiceItemsTotalAmount;\n-\t\t$customerInfo['invoiceTotalTax'] = $invoiceItemsTotalTax;\n-\t\t\n-\t\trequire(dirname(__FILE__).\"/../../library/closedb.php\");\n+        $customerInfo['invoice_details'] = $invoice_details;\n+        \n+        // populate customer data - NEW STYLE\n+        $customerInfo['customerId'] = $invoiceDetails['user_id'];\n+        $customerInfo['customerName'] = (isset($invoiceDetails['company']) ? $invoiceDetails['company'] : $invoiceDetails['contactperson']);\n+        $customerInfo['customerAddress'] = $invoiceDetails['address'];\n+        $customerInfo['customerAddress2'] = $invoiceDetails['zip'] . ' '. $invoiceDetails['city'] . ' ' .\n+                                            $invoiceDetails['state'] . ' ' . $invoiceDetails['country'];\n+        $customerInfo['customerEmail'] = $invoiceDetails['email'];\n+        $customerInfo['customerPhone'] = $invoiceDetails['phone'];\n+        $customerInfo['customerContact'] = $invoiceDetails['contactperson'];\n+        \n+        $customerInfo['invoiceNumber'] = $invoice_id;\n+        $customerInfo['invoiceDate'] = date('Y-m-d', strtotime($invoiceDetails['date']));\n+        $customerInfo['invoiceStatus'] = strtoupper($invoiceDetails['status']);\n+        $customerInfo['invoiceTotalBilled'] = $invoiceDetails['totalbilled'];\n+        $customerInfo['invoicePaid'] = $invoiceDetails['totalpayed'];\n+        $customerInfo['invoiceDue'] = $balance;\n+        $customerInfo['invoiceNotes'] = $invoiceDetails['notes'];\n \n-\t\treturn $customerInfo;\n-\t}\n-\t\n+        $ths = array(\n+                        t('title','Plan']),\n+                        t('all','Tax']),\n+                        t('all','Amount']),\n+                        t('ContactInfo','Notes']),\n+                    );\n+        // populate user invoice items\n+        $invoice_items = \"<table $tableTags><tr $tableTrTags>\";\n+        foreach ($ths as $th) {\n+            $invoice_items .= sprintf(\"<th>%s</th>\", $th);\n+        }\n+        $invoice_items .= \"</tr>\";\n+        \n+        // get all invoice items\n+        $sql = sprintf(\"SELECT a.id, a.plan_id, a.amount, a.tax_amount, a.notes, b.planName\n+                          FROM %s a LEFT JOIN %s b ON a.plan_id=b.id\n+                         WHERE a.invoice_id=%d\n+                         ORDER BY a.id ASC\", $configValues['CONFIG_DB_TBL_DALOBILLINGINVOICEITEMS'],\n+                                             $configValues['CONFIG_DB_TBL_DALOBILLINGPLANS'],\n+                                             $dbSocket->escapeSimple($invoice_id));\n+        $res = $dbSocket->query($sql);\n+        \n+        // initialize invoice items - NEW STYLE\n+        $invoiceItems = array();\n+        $invoiceItemsNumber = 1;\n+        $invoiceItemsTotalAmount = 0;\n+        $invoiceItemsTotalTax = 0;\n+        \n+        while ($row = $res->fetchRow()) {\n+            foreach ($row as $i => $value) {\n+                $row[$i] = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');\n+            }\n+\n+            list($id, $plan_id, $amount, $tax_amount, $notes, $planName) = $row;\n+\n+            $tds = array( $planName, $amount, $tax_amount, $notes );\n+            \n+            $invoice_items .= \"<tr>\";\n+            foreach ($tds as $td) {\n+                $invoice_items .= sprintf(\"<td>%s</td>\", $td);\n+            }\n+            $invoice_items .= \"</tr>\";\n+\n+            // populate invoice items - NEW STYLE\n+            $invoiceItem = array();\n+            \n+            $invoiceItem['invoiceItemNumber'] = sprintf('%02d', $invoiceItemsNumber);\n+            $invoiceItem['invoiceItemPlan'] = $planName;\n+            $invoiceItem['invoiceItemNotes'] = $notes;\n+            $invoiceItem['invoiceItemAmount'] = $amount;\n+            $invoiceItem['invoiceItemTaxAmount'] = $tax_amount;\n+            $invoiceItem['invoiceItemTotalAmount'] = intval($amount) + intval($tax_amount);\n+            \n+            $invoiceItems[] = $invoiceItem;\n+            $invoiceItemsTotalAmount += intval($amount);\n+            $invoiceItemsTotalTax += intval($tax_amount);\n+            \n+            ++$invoiceItemsNumber;\n+        }\n+\n+        $invoice_items .= \"</table>\";\n+        \n+        $customerInfo['invoice_items'] = $invoice_items;\n+        \n+        // populate invoice items - NEW STYLE\n+        $customerInfo['invoiceItems'] = $invoiceItems;\n+        $customerInfo['invoiceTotalAmount'] = $invoiceItemsTotalAmount;\n+        $customerInfo['invoiceTotalTax'] = $invoiceItemsTotalTax;\n+        \n+        include(\"../../library/closedb.php\");\n+\n+        return $customerInfo;\n+    }\n+    \n ?>"
        },
        {
          "filename": "include/common/notificationsWelcome.php",
          "status": "modified",
          "additions": 76,
          "deletions": 54,
          "patch": "@@ -1,4 +1,4 @@\n-<?php\n+<?php \n /*\n  *********************************************************************************************************\n  * daloRADIUS - RADIUS Web Platform\n@@ -15,60 +15,82 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n+ \n+    // prevent this file to be directly accessed\n+    if (strpos($_SERVER['PHP_SELF'], '/include/common/notificationWelcome.php') !== false) {\n+        header(\"Location: ../../index.php\");\n+        exit;\n+    }\n+ \n+    include_once(\"notifications/processNotificationWelcome.php\");\n+    \n+    // we (try to) init the email\n+    if (isset($email) && !empty($email)) {\n+        $invoice_email = $email;\n+    } else if (isset($bi_emailinvoice) && !empty($bi_emailinvoice)) {\n+        $invoice_email = $bi_emailinvoice;\n+    } else if (isset($bi_email) && !empty($bi_email)) {\n+        $invoice_email = $bi_email;\n+    } else {\n+        $invoice_email = \"\";\n+    }\n+    \n+    \n+    // we (try to) init the phone\n+    if (isset($mobilephone) && !empty($mobilephone)) {\n+        $invoice_phone = $mobilephone;\n+    } else if (isset($workphone) && !empty($workphone)) {\n+        $invoice_phone = $workphone;\n+    } else if (isset($homephone) && !empty($homephone)) {\n+        $invoice_phone = $homephone;\n+    } else {\n+        $invoice_phone = \"(n/a)\";\n+    }\n+    \n+    // we also (try to) init the address\n+    $invoice_address = \"\";\n+    if (isset($ui_address) &&!empty($ui_address)) {\n+        $invoice_address = $ui_address;\n+    }\n+    \n+    if (isset($ui_city) && !empty($ui_city)) {\n+        $invoice_address .= \", \" . $ui_city;\n+    }\n+    \n+    if (isset($ui_state) && !empty($ui_state)) {\n+        $invoice_address .= \"<br>\" . $ui_state;\n+    }\n+    \n+    if (isset($ui_zip) && !empty($ui_zip)) {\n+        $invoice_address .= \" \" . $ui_zip;\n+    }\n+    \n+    if (empty($invoice_address)) {\n+        $invoice_address = \"(n/a)\";\n+    }\n+    \n+    // set SMTP server info\n+    $smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n+    $smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n+    $smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n+    \n+    // set the from field\n+    $from = $configValues['CONFIG_MAIL_SMTPFROM'];\n+    \n+    // set customer info\n+    $customerInfo = array();\n+    $customerInfo['customer_name'] = sprintf(\"%s %s\", $firstname, $lastname);\n+    $customerInfo['customer_address'] = $invoice_address;\n+    $customerInfo['customer_phone'] = $invoice_phone;\n+    $customerInfo['customer_email'] = $invoice_email;\n+    \n+    $customerInfo['service_plan_name'] = $planName;\n+    \n+    @sendWelcomeNotification($customerInfo, $smtpInfo, $from);\n \n-\trequire_once(dirname(__FILE__).\"/../../notifications/processNotificationWelcome.php\");\n-\t\n-\tif (!empty($email))\n-\t\t$invoice_email = $email;\n-\telse if (!empty($bi_emailinvoice))\n-\t\t$invoice_email = $bi_emailinvoice;\n-\telse if (!empty($bi_email))\n-\t\t$invoice_email = $bi_email;\n-\telse\n-\t\t$invoice_email = \"\";\n-\t\n-\tif (!empty($mobilephone))\n-\t\t$invoice_phone = $mobilephone;\n-\telse if (!empty($workphone))\n-\t\t$invoice_phone = $workphone;\n-\telse if (!empty($homephone))\n-\t\t$invoice_phone = $homephone;\n-\telse\n-\t\t$invoice_phone = \"Unavailable\";\n-\t\t\n-\t$invoice_address = \"\";\n-\tif (!empty($ui_address))\n-\t\t$invoice_address = $ui_address;\n-\t\n-\tif (!empty($ui_city))\n-\t\t$invoice_address .= \", \".$ui_city;\n-\t\n-\tif (!empty($ui_state))\n-\t\t$invoice_address .= \"<br/>\".$ui_state;\n-\t\n-\tif (!empty($ui_zip))\n-\t\t$invoice_address .= \" \".$ui_zip;\n-\t\n-\tif (empty($invoice_address))\n-\t\t$invoice_address = \"Unavailable\";\n-\t\n-\t$customerInfo = array();\n-\t$customerInfo['customer_name'] = $firstname .\" \".$lastname;\n-\t$customerInfo['customer_address'] = $invoice_address;\n-\t\n-\t$customerInfo['customer_phone'] = $invoice_phone;\n-\t$customerInfo['customer_email'] = $invoice_email;\n-\t$customerInfo['service_plan_name'] = $planName;\n-\t\n-\t$smtpInfo['host'] = $configValues['CONFIG_MAIL_SMTPADDR'];\n-\t$smtpInfo['port'] = $configValues['CONFIG_MAIL_SMTPPORT'];\n-\t$smtpInfo['auth'] = $configValues['CONFIG_MAIL_SMTPAUTH'];\n-\t$from = $configValues['CONFIG_MAIL_SMTPFROM'];\n-\t\n-\t@sendWelcomeNotification($customerInfo, $smtpInfo, $from);\n-\n-?>\n\\ No newline at end of file\n+?>"
        },
        {
          "filename": "include/common/printTickets.php",
          "status": "modified",
          "additions": 74,
          "deletions": 33,
          "patch": "@@ -145,8 +145,7 @@ function printTicketsHTMLTable($accounts, $ticketCost, $ticketTime) {\n \n }\n \n-    $ticketInformation = \"Information: To use this card, please connect your device to the nearest ssid.\"\n-                       . \"<br>\"\n+    $ticketInformation = \"<strong>Information</strong>:<br>to use this card, please connect your device to the nearest ssid.\"\n                        . \"Open your web browser and enter each needed field.\";\n     $ticketLogoFile = \"/images/daloradius_small.png\";\n \n@@ -155,16 +154,22 @@ function printTicketsHTMLTable($accounts, $ticketCost, $ticketTime) {\n         if (array_key_exists('accounts', $_POST) && !empty($_POST['accounts']) && is_array($_POST['accounts']) &&\n             array_key_exists('type', $_POST) && $_POST['type'] == \"batch\") {\n             \n+            $batch_name = (array_key_exists('batch_name', $_POST) && !empty(trim($_POST['batch_name'])))\n+                        ? htmlspecialchars(trim($_POST['batch_name']), ENT_QUOTES, 'UTF-8') : \"\";\n+            \n             $accounts = $_POST['accounts'];\n             \n             if (array_key_exists('ticketInformation', $_POST) && !empty(trim($_POST['ticketInformation']))) {\n-                $ticketInformation = htmlspecialchars(trim($_POST['ticketInformation']), ENT_QUOTES, 'UTF-8');\n+                $ticketInformation = \"<strong>Information</strong>:<br>\" . htmlspecialchars(trim($_POST['ticketInformation']), ENT_QUOTES, 'UTF-8');\n                 $ticketInformation = str_replace(\"\\n\", \"<br>\", $ticketInformation);\n             }\n             \n             $plan = (array_key_exists('plan', $_POST) && !empty(trim($_POST['plan'])))\n                   ? trim($_POST['plan']) : \"\";\n-                  \n+            \n+            $ticketCost = \"\";\n+            $ticketTime = \"\";\n+            \n             if (!empty($plan)) {\n                 include_once('../../library/opendb.php');\n                 include_once('../management/pages_common.php');\n@@ -179,19 +184,38 @@ function printTicketsHTMLTable($accounts, $ticketCost, $ticketTime) {\n                 $ticketTime = time2str($ticketTime);\n \n                 include_once('../../library/closedb.php');\n-            } else {\n-                $ticketCost = $ticketTime = $ticketCurrency = \"(n/a)\";\n+            }\n+            \n+            $card_body_height = 10;\n+            $card_foot_height = 30;\n+            if (!empty($ticketCost)) {\n+                $card_foot_height -= 5;\n+                $card_body_height += 5;\n+            }\n+            if (!empty($ticketTime)) {\n+                $card_foot_height -= 5;\n+                $card_body_height += 5;\n             }\n             \n ?>\n <!DOCTYPE html>\n <html lang=\"en\">\n     <head>\n         <meta charset=\"utf-8\" />\n-        <title>untitled</title>\n+        <title><?= (!empty($batch_name)) ? $batch_name : \"user cards\" ?></title>\n         \n         <style>\n \n+@page {\n+    size: 21cm 29.7cm;\n+    margin: 0;\n+}\n+\n+body {\n+    font-family: Tahoma;\n+    padding: 1cm;\n+}\n+\n .container:first-child .card {\n     border-top: 1px dotted gray;\n }\n@@ -229,8 +253,8 @@ function printTicketsHTMLTable($accounts, $ticketCost, $ticketTime) {\n }\n \n .card-body {\n-    height: 18mm;\n-    width: 100%;\n+    height: <?= $card_body_height ?>mm;\n+    width: 42mm;\n     margin: 0;\n     padding: 1mm;\n }\n@@ -240,25 +264,40 @@ function printTicketsHTMLTable($accounts, $ticketCost, $ticketTime) {\n     margin: 0;\n     width: 100%;\n     text-align: center;\n-    font-size: 9pt;\n+    font-size: 8pt;\n     padding: 0;\n }\n \n-.card-foot {\n-    height: 24mm;\n+.card-body table tr {\n+    border: 0;\n+    margin: 0;\n     width: 100%;\n+    height: 5mm;\n+    padding: 0;\n+}\n+\n+.card-body table th {\n+    text-align: right;\n+}\n+\n+.card-body table td {\n+    text-align: left;\n+}\n+\n+.card-foot {\n+    height: <?= $card_foot_height ?>mm;\n     margin: 0;\n }\n \n .card-foot p {\n     margin: 0;\n-    padding: 2mm;\n-    font-size: 7pt;\n+    width: 42mm;\n+    padding: 1mm;\n+    font-size: 8pt;\n     font-weight: normal;\n     text-align: justify;\n }\n \n-\n .container {\n     text-align: center;\n     padding: 0;\n@@ -291,27 +330,29 @@ function printTicketsHTMLTable($accounts, $ticketCost, $ticketTime) {\n                 echo '</div><div class=\"container\">';\n             }\n             \n+            $trs = array(\n+                            \"User\" => $username,\n+                            \"Pass\" => $password\n+                        );\n+            \n+            if (!empty($ticketTime)) {\n+                $trs[\"Validity\"] = $ticketTime;\n+            }\n+            \n+            if (!empty($ticketCost)) {\n+                $trs[\"Price\"] = $ticketCost;\n+            }\n+            \n             echo '<div class=\"card\">';\n             printf('<div class=\"card-head\"><img src=\"%s\"></div>', $ticketLogoFile); \n             echo '<div class=\"card-body\">'\n-               . '<table>'\n-               . '<tr>'\n-               . '<th>Login</th>';\n-            printf('<td>%s</td>', htmlspecialchars($username, ENT_QUOTES, 'UTF-8'));\n-            echo '</tr>'\n-               . '<tr>'\n-               . '<th>Password</th>';\n-            printf('<td>%s</td>', htmlspecialchars($password, ENT_QUOTES, 'UTF-8'));\n-            echo '</tr>'\n-               . '<tr>'\n-               . '<th>Validity</th>';\n-            printf('<td>%s</td>', htmlspecialchars($ticketTime, ENT_QUOTES, 'UTF-8'));\n-            echo '</tr>'\n-               . '<tr>'\n-               . '<th>Price</th>';\n-            printf('<td>%s</td>', htmlspecialchars($ticketCost, ENT_QUOTES, 'UTF-8'));\n-            echo '</tr>'\n-               . '</table>'\n+               . '<table>';\n+\n+            foreach ($trs as $label => $value) {\n+                printf('<tr><th>%s:</th><td>%s</td></tr>', $label, htmlspecialchars($value, ENT_QUOTES, 'UTF-8'));\n+            }\n+\n+            echo '</table>'\n                . '</div>'\n                . '<div class=\"card-foot\">';\n             printf('<p>%s</p>', $ticketInformation);"
        },
        {
          "filename": "library/checklogin.php",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -33,9 +33,15 @@\n include('sessions.php');\n dalo_session_start();\n \n+\n if (!array_key_exists('daloradius_logged_in', $_SESSION) || $_SESSION['daloradius_logged_in'] !== true) {\n     $_SESSION['daloradius_logged_in'] = false;\n-    header('Location: /login.php');\n+\n+    // implement a sort of \"dynamic redirect finder\" based on the number of \"/\" in the PHP_SELF value\n+    $count = substr_count($_SERVER['PHP_SELF'], \"/\", 1);\n+    $location = str_repeat(\"../\", $count) . \"login.php\";\n+\n+    header(\"Location: \" . $location);\n     exit;\n }\n "
        },
        {
          "filename": "mng-batch-add.php",
          "status": "modified",
          "additions": 15,
          "deletions": 20,
          "patch": "@@ -398,11 +398,11 @@ function addUserBatchHistory($dbSocket) {\n                     } // end for\n                     \n                     $form_id = \"export-users-form\";\n-                    $exportForm .= sprintf('<form target=\"_blank\" style=\"display: none\" id=\"%s\" ', $form_id)\n+                    $exportForm .= sprintf('<form target=\"_blank\" id=\"%s\" ', $form_id)\n                                  . 'method=\"POST\">'\n-                                 . sprintf('<input type=\"hidden\" name=\"batch_name\" value=\"%s\">',\n+                                 . sprintf('<input style=\"display: none\" type=\"hidden\" name=\"batch_name\" value=\"%s\">',\n                                            htmlspecialchars($batch_name, ENT_QUOTES, 'UTF-8'))\n-                                 . '<input type=\"hidden\" name=\"type\" value=\"batch\">';\n+                                 . '<input style=\"display: none\" type=\"hidden\" name=\"type\" value=\"batch\">';\n                                  \n                     if (!empty($planName)) {\n                         $exportForm .= sprintf('<input type=\"hidden\" name=\"plan\" value=\"%s\">',\n@@ -412,30 +412,25 @@ function addUserBatchHistory($dbSocket) {\n                     for ($i = 0; $i < count($inserted_usernames); $i++) {\n                         $u = $inserted_usernames[$i];\n                         $p = $inserted_passwords[$i];\n-                        $exportForm .= sprintf('<input type=\"hidden\" name=\"accounts[%d][0]\" value=\"%s\">', $i, htmlspecialchars($u, ENT_QUOTES, 'UTF-8'))\n-                                     . sprintf('<input type=\"hidden\" name=\"accounts[%d][1]\" value=\"%s\">', $i, htmlspecialchars($p, ENT_QUOTES, 'UTF-8'));\n+                        $exportForm .= sprintf('<input style=\"display: none\" type=\"hidden\" name=\"accounts[%d][0]\" value=\"%s\">', $i, htmlspecialchars($u, ENT_QUOTES, 'UTF-8'))\n+                                     . sprintf('<input style=\"display: none\" type=\"hidden\" name=\"accounts[%d][1]\" value=\"%s\">', $i, htmlspecialchars($p, ENT_QUOTES, 'UTF-8'));\n                     }\n-                    $exportForm .= '</form>';\n+                    \n+                    \n+                    $exportForm .= '<fieldset><label for=\"ticketInformation\" class=\"form\">Description</label>'\n+                                 . '<textarea class=\"form\" id=\"ticketInformation\" name=\"ticketInformation\">'\n+                                 . 'to use this card, please connect your device to the nearest ssid.' . \"\\n\"\n+                                 . 'Open your web browser and enter each needed field.</textarea>';\n+                    $exportForm .= '</fieldset></form>';\n                     $onclick = \"batch_export('include/common/fileExportCSV.php')\";\n-                    $exportForm .= sprintf('<input type=\"button\" onclick=\"%s\" value=\"CSV Download\">', $onclick);\n+                    $exportForm .= sprintf('<input style=\"margin: 10px\" type=\"button\" onclick=\"%s\" value=\"CSV Download\">', $onclick);\n                     $onclick = \"batch_export('include/common/printTickets.php')\";\n-                    $exportForm .= sprintf('<input type=\"button\" onclick=\"%s\" value=\"Printable Tickets\">', $onclick);\n+                    $exportForm .= sprintf('<input style=\"margin: 10px\" type=\"button\" onclick=\"%s\" value=\"Printable Tickets\">', $onclick);\n                             \n-                            // if batch_history record was created successfuly\n-                            //~ if ($sql_batch_id != 0) {\n-                                //~ // remove the last || chars to sanitize it for proper format\n-                                //~ $exportCSV = substr($exportCSV, 0, -2);\n-                                //~ $successMsg = \"Exported Usernames - \".\n-                                                    //~ \"<a href='include/common/fileExportCSV.php?csv_output=$exportCSV'>download</a><br/>\".\n-                                                //~ \"Printable Tickets - \".\n-                                                    //~ \"<a href='include/common/printTickets.php?type=batch&plan=$planName&accounts=$exportCSV'>view</a><br/>\".\n-                                                //~ \"Added to database new user(s): <b> $actionMsgGoodUsernames </b><br/>\";\n                     $successMsg = sprintf(\"Created %d user(s) (batch name: <strong>%s</strong>)\", count($inserted_usernames)-1, $batch_name);\n                     $logAction .= sprintf(\"Successfully added to database new users [%s] with prefix [%s] on page: \",\n                                           implode(\", \", $inserted_usernames), $username_prefix);\n-                            //~ }\n-                \n-                \n+\n                 } else {// $number > 0\n                     $failureMsg = \"specify a valid number of accounts\";\n                     $logAction = \"specified an invalid number of accounts on page: \";"
        },
        {
          "filename": "mng-del.php",
          "status": "modified",
          "additions": 249,
          "deletions": 192,
          "patch": "@@ -32,167 +32,199 @@\n     $logAction = \"\";\n     $logDebugSQL = \"\";\n \n-    isset($_GET['username']) ? $username = $_GET['username'] : $username = \"\";\n-    isset($_GET['attribute']) ? $attribute = $_GET['attribute'] : $attribute = \"\";\n-    isset($_GET['tablename']) ? $tablename = $_GET['tablename'] : $tablename = \"\";\n-    isset($_GET['delradacct']) ? $delradacct = $_GET['delradacct'] : $delradacct = \"\";\n-    isset($_GET['clearSessionsUsers']) ? $clearSessionsUsers = $_GET['clearSessionsUsers'] : $clearSessionsUsers = \"\";\n-\n-    $logAction = \"\";\n-    $logDebugSQL = \"\";\n-\n-    $showRemoveDiv = \"block\";\n-\n-    if ( (isset($_GET['username'])) && (!(isset($_GET['attribute']))) && (!(isset($_GET['tablename']))) ) {\n-\n-        $allUsernames = \"\";\n-        $isSuccessful = 0;\n-\n-        /* since the foreach loop will report an error/notice of undefined variable $value because\n-           it is possible that the $username is not an array, but rather a simple GET request\n-           with just some value, in this case we check if it's not an array and convert it to one with\n-           a NULL 2nd element\n-        */\n-        if (!is_array($username))\n-            $username = array($username, NULL);\n-\n-        foreach ($username as $variable=>$value) {\n-\n-            if (trim($variable) != \"\") {\n-\n-                $username = $value;\n-                $allUsernames .= $username . \", \";\n-\n-                include 'library/opendb.php';\n-\n-                // setting table-related parameters first\n-                switch($configValues['FREERADIUS_VERSION']) {\n-                    case '1' :\n-                        $tableSetting['postauth']['user'] = 'user';\n-                        $tableSetting['postauth']['date'] = 'date';\n-                        break;\n-                    case '2' :\n-                        // down\n-                    case '3' :\n-                        // down\n-                    default  :\n-                        $tableSetting['postauth']['user'] = 'username';\n-                        $tableSetting['postauth']['date'] = 'authdate';\n-                        break;\n+    $valid_tablenames = array(\n+                                $configValues['CONFIG_DB_TBL_RADCHECK'],\n+                                $configValues['CONFIG_DB_TBL_RADREPLY'],\n+                                $configValues['CONFIG_DB_TBL_RADGROUPREPLY'],\n+                                $configValues['CONFIG_DB_TBL_RADGROUPCHECK']\n+                             );\n+\n+    include('library/opendb.php');\n+\n+    if ($_SERVER['REQUEST_METHOD'] === 'POST') {\n+        if (array_key_exists('csrf_token', $_POST) && isset($_POST['csrf_token']) && dalo_check_csrf_token($_POST['csrf_token'])) {\n+                \n+            $id__attribute = (array_key_exists('attribute', $_POST) && !empty(trim($_POST['attribute'])) &&\n+                              preg_match(\"/__/\", trim($_POST['attribute'])) !== false) ? trim($_POST['attribute']) : \"\";\n+            \n+            $tablename = (!empty($id__attribute) && array_key_exists('tablename', $_POST) &&\n+                          !empty(trim($_POST['tablename'])) && in_array(trim($_POST['tablename']), $valid_tablenames))\n+                       ? trim($_POST['tablename']) : \"\";\n+\n+            $delradacct = (array_key_exists('delradacct', $_POST) && strtolower(trim($_POST['delradacct'])) == 'yes');\n+\n+\n+            // validate values\n+            $usernames = array();\n+            \n+            if (array_key_exists('username', $_POST) && !empty($_POST['username'])) {\n+                \n+                $tmp = (!is_array($_POST['username'])) ? array($_POST['username']) : $_POST['username'];\n+                foreach ($tmp as $value) {\n+                    \n+                    $value = trim(str_replace(\"%\", \"\", $value));\n+                    \n+                    if (!in_array($value, $usernames)) {\n+                        $usernames[] = $value;\n+                    }\n                 }\n-\n-                // delete all attributes associated with a username\n-                $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_RADCHECK'].\" WHERE Username='\".$dbSocket->escapeSimple($username).\"'\";\n-                $res = $dbSocket->query($sql);\n-                $logDebugSQL .= $sql . \"\\n\";\n-\n-                $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_RADREPLY'].\" WHERE Username='\".$dbSocket->escapeSimple($username).\"'\";\n-                $res = $dbSocket->query($sql);\n-                $logDebugSQL .= $sql . \"\\n\";\n-\n-                $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_DALOUSERINFO'].\" WHERE Username='\".$dbSocket->escapeSimple($username).\"'\";\n-                $res = $dbSocket->query($sql);\n-                $logDebugSQL .= $sql . \"\\n\";\n-\n-                $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'].\" WHERE Username='\".$dbSocket->escapeSimple($username).\"'\";\n-                $res = $dbSocket->query($sql);\n-                $logDebugSQL .= $sql . \"\\n\";\n-\n-                $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_RADUSERGROUP'].\" WHERE Username='\".$dbSocket->escapeSimple($username).\"'\";\n-                $res = $dbSocket->query($sql);\n-                $logDebugSQL .= $sql . \"\\n\";\n-\n-                $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_RADPOSTAUTH'].\" WHERE \".\n-                    $tableSetting['postauth']['user'].\"='\".$dbSocket->escapeSimple($username).\"'\";\n-                $res = $dbSocket->query($sql);\n-                $logDebugSQL .= $sql . \"\\n\";\n-\n-                if (strtolower($delradacct) == \"yes\") {\n-                    $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_RADACCT'].\" WHERE Username='\".$dbSocket->escapeSimple($username).\"'\";\n-                    $res = $dbSocket->query($sql);\n-                    $logDebugSQL .= $sql . \"\\n\";\n+                \n+                if (count($usernames) > 0) {\n+                \n+                    if (!empty($id__attribute) && !empty($tablename)) {\n+                        \n+                        $sql = sprintf(\"SELECT COUNT(id) FROM %s WHERE username='%s'\",\n+                                       $configValues['CONFIG_DB_TBL_RADCHECK'], $dbSocket->escapeSimple($usernames[0]));\n+                        $res = $dbSocket->query($sql);\n+                        $logDebugSQL .= \"$sql;\\n\";\n+                        \n+                        $check_attr_count = intval($res->fetchrow()[0]);\n+                        \n+                        $sql = sprintf(\"SELECT COUNT(id) FROM %s WHERE username='%s' AND attribute='Auth-Type' OR attribute LIKE '%%-Password'\",\n+                                       $configValues['CONFIG_DB_TBL_RADCHECK'], $dbSocket->escapeSimple($usernames[0]));\n+                        $res = $dbSocket->query($sql);\n+                        $logDebugSQL .= \"$sql;\\n\";\n+                        \n+                        $check_auth_attr_count = intval($res->fetchrow()[0]);\n+                        \n+                        list($columnId, $attribute) = explode(\"__\", $id__attribute);\n+                        $attribute = trim($attribute);\n+                        $columnId = intval(trim($columnId));\n+                        \n+                        if ($tablename == 'radcheck' && $check_attr_count == 1 ||\n+                            (($attribute == 'Auth-Type' || preg_match(\"/-Password$/\", $attribute) !== false) && $check_auth_attr_count == 1)) {\n+                            // if operator wants to remove the last check attribute\n+                            // or the last \"password-like\" check attribute\n+                            // they should delete all user related info stored in the db\n+                            \n+                            $format = \"Cannot delete the last check (password like?) attribute for the selected user (<strong>%s</strong>)\";\n+                            $failureMsg = sprintf($format,\n+                                                  htmlspecialchars($usernames[0], ENT_QUOTES, 'UTF-8'));\n+                            $logAction = sprintf(\"$format on page: \", $username[0]);\n+                        } else {\n+                        \n+                            $sql = sprintf(\"DELETE FROM %s WHERE username='%s' AND attribute='%s' AND id=%s\",\n+                                           $dbSocket->escapeSimple($tablename), $dbSocket->escapeSimple($usernames[0]),\n+                                           $dbSocket->escapeSimple($attribute), $dbSocket->escapeSimple($columnId));\n+                            $res = $dbSocket->query($sql);\n+                            $logDebugSQL .= \"$sql;\\n\";\n+                            \n+                            $format = \"Deleted attribute <strong>%s</strong> for user <strong>%s</strong>\";\n+                            $successMsg = sprintf($format, htmlspecialchars($attribute, ENT_QUOTES, 'UTF-8'),\n+                                                           htmlspecialchars($usernames[0], ENT_QUOTES, 'UTF-8'));\n+                            $logAction = sprintf(\"$format on page: \", $attribute, $usernames[0]);\n+                        }\n+                    } else {\n+                        $dbusers = array();\n+                        \n+                        foreach ($usernames as $u) {\n+                            if (!empty($dbSocket->escapeSimple($u))) {\n+                                $dbusers[] = $dbSocket->escapeSimple($u);\n+                            }\n+                        }\n+                        \n+                        $dbusersLen = count($dbusers);\n+                        if ($dbusersLen > 0) {\n+                            // setting table-related parameters first                \n+                            switch($configValues['FREERADIUS_VERSION']) {\n+                                case '1' :\n+                                    $tableSetting['postauth']['user'] = 'user';\n+                                    $tableSetting['postauth']['date'] = 'date';\n+                                    break;\n+                                case '2' :\n+                                    // down\n+                                case '3' :\n+                                    // down\n+                                default  :\n+                                    $tableSetting['postauth']['user'] = 'username';\n+                                    $tableSetting['postauth']['date'] = 'authdate';\n+                                    break;\n+                            }\n+                            \n+                            $sql_format = \"DELETE FROM %s WHERE %s IN ('\" . implode(\"', '\", $dbusers) . \"')\";\n+                            \n+                            $sql = sprintf($sql_format, $configValues['CONFIG_DB_TBL_RADPOSTAUTH'],\n+                                                        $tableSetting['postauth']['user']);\n+                            $res = $dbSocket->query($sql);\n+                            $logDebugSQL .= \"$sql;\\n\";\n+                            \n+                            $tables = array(\n+                                                $configValues['CONFIG_DB_TBL_RADCHECK'],\n+                                                $configValues['CONFIG_DB_TBL_RADREPLY'],\n+                                                $configValues['CONFIG_DB_TBL_DALOUSERINFO'],\n+                                                $configValues['CONFIG_DB_TBL_DALOUSERBILLINFO'],\n+                                                $configValues['CONFIG_DB_TBL_RADUSERGROUP'],\n+                                           );\n+\n+                            if ($delradacct) {\n+                                $tables[] = $configValues['CONFIG_DB_TBL_RADACCT'];\n+                            }\n+                            \n+                            foreach ($tables as $table) {\n+                                $sql = sprintf($sql_format, $table, 'username');\n+                                $res = $dbSocket->query($sql);\n+                                $logDebugSQL .= \"$sql;\\n\";\n+                            }\n+                            \n+                            $format = \"<strong>%d user(s)</strong> have been deleted\";\n+                            $successMsg = sprintf($format, $dbusersLen);\n+                            $logAction = sprintf(\"$format on page: \", $dbusersLen);\n+                            \n+                        } else {\n+                            $failureMsg = \"You have provided an empty or invalid username list\";\n+                            $logAction = \"Provided an empty or invalid username list (user(s) deletion) on page: \";\n+                        }\n+                    }\n+                } else {\n+                    $failureMsg = \"You have provided an empty or invalid username list\";\n+                    $logAction = \"Provided an empty or invalid username list (user(s) deletion) on page: \";\n+                }\n+            } else if (array_key_exists('clearSessionsUsers', $_POST) && !empty($_POST['clearSessionsUsers'])) {\n+                \n+                $username__starttimes = array();\n+                \n+                $tmp = (!is_array($_POST['clearSessionsUsers'])) ? array($_POST['clearSessionsUsers']) : $_POST['clearSessionsUsers'];\n+                foreach ($tmp as $value) {\n+                    \n+                    $value = trim(str_replace(\"%\", \"\", $value));\n+                    \n+                    if (!in_array($value, $username__starttimes)) {\n+                        $username__starttimes[] = $value;\n+                    }\n+                }\n+                \n+                \n+                $userstimesLen = count($username__starttimes);\n+                if ($userstimesLen > 0) {\n+                    \n+                    foreach ($username__starttimes as $username__starttime) {\n+                        list($username, $starttime) = explode('||', $username__starttime);\n+                        $sql = sprintf(\"DELETE FROM %s\n+                                         WHERE username='%s' AND AcctStartTime='%s'\n+                                           AND (AcctStopTime='0000-00-00 00:00:00' OR AcctStopTime IS NULL)\",\n+                                       $configValues['CONFIG_DB_TBL_RADACCT'], $dbSocket->escapeSimple($username),\n+                                       $dbSocket->escapeSimple($starttime));\n+                        $res = $dbSocket->query($sql);\n+                        $logDebugSQL .= \"$sql;\\n\";\n+                    }\n+                    \n+                    $format = \"<strong>%d user' session(s)</strong> have been cleaned\";\n+                    $successMsg = sprintf($format, $userstimesLen);\n+                    $logAction = sprintf(\"$format on page: \", $userstimesLen);\n+                    \n+                } else {\n+                    $failureMsg = \"You have provided an empty or invalid username list\";\n+                    $logAction = \"Provided an empty or invalid username list (session cleaning) on page: \";\n                 }\n-\n-                $successMsg = \"Deleted user(s): <b> $allUsernames </b>\";\n-                $logAction .= \"Successfully deleted user(s) [$allUsernames] on page: \";\n-\n-                include 'library/closedb.php';\n-\n-            }  else {\n-                $failureMsg = \"no user was entered, please specify a username to remove from database\";\n-                $logAction .= \"Failed deleting user(s) [$allUsernames] on page: \";\n             }\n-\n-\n-        $showRemoveDiv = \"none\";\n-\n-        } //foreach\n-\n-\n-    } else     if ( (isset($_GET['username'])) && (isset($_GET['attribute'])) && (isset($_GET['tablename'])) ) {\n-\n-        /* this section of the deletion process only deletes the username record with the specified attribute\n-         * variable from $tablename, this is in order to support just removing a single attribute for the user\n-         */\n-\n-        include 'library/opendb.php';\n-\n-        if (isset($attribute)) {\n-            if (preg_match('/__/', $attribute))\n-                list($columnId, $attribute) = explode(\"__\", $attribute);\n-            else\n-                $attribute = $attribute;\n+        } else {\n+            $failureMsg = sprintf(\"CSRF token error\");\n+            $logAction .= sprintf(\"CSRF token error on page: \");\n         }\n-\n-        $sql = \"DELETE FROM \".$dbSocket->escapeSimple($tablename).\" WHERE Username='\".$dbSocket->escapeSimple($username).\"' \".\n-                \" AND Attribute='\".$dbSocket->escapeSimple($attribute).\"' AND id=\".$dbSocket->escapeSimple($columnId);\n-        $res = $dbSocket->query($sql);\n-        $logDebugSQL .= $sql . \"\\n\";\n-\n-        $successMsg = \"Deleted attribute: <b> $attribute </b> for user(s): <b> $username </b> from database\";\n-        $logAction .= \"Successfully deleted attribute [$attribute] for user [$username] on page: \";\n-\n-        include 'library/closedb.php';\n-\n-        $showRemoveDiv = \"none\";\n-\n-    } else if ( (isset($clearSessionsUsers)) && ($clearSessionsUsers != \"\") ) {\n-\n-        /* this is used to remove stale user sessions from the accounting table\n-        */\n-        $allUsernames = \"\";\n-\n-        if (!is_array($clearSessionsUsers))\n-            $clearSessionsUsers = array($clearSessionsUsers, NULL);\n-\n-            foreach ($clearSessionsUsers as $variable=>$value) {\n-\n-                if (trim($value) != \"\") {\n-\n-                    list($userSessions,$acctStartTime) = preg_split('/\\\\|\\\\|/', $value);\n-\n-                    $allUsernames .= $userSessions . \", \";\n-\n-                    include 'library/opendb.php';\n-\n-                    $sql = \"DELETE FROM \".$configValues['CONFIG_DB_TBL_RADACCT'].\n-                        \" WHERE Username='$userSessions' AND AcctStartTime='$acctStartTime' \".\n-                        \" AND (AcctStopTime='0000-00-00 00:00:00' OR AcctStopTime IS NULL)\";\n-                    $res = $dbSocket->query($sql);\n-                    $logDebugSQL .= $sql . \"\\n\";\n-\n-                    $successMsg = \"Deleted stale accounting sessions for user: <b> $allUsernames </b> from database\";\n-                    $logAction .= \"Successfully deleted stale accounting sessions for user [$allUsernames] on page: \";\n-\n-                    include 'library/closedb.php';\n-            } // if trim\n-\n-        } // foreach\n-\n-        $showRemoveDiv = \"none\";\n-\n     }\n \n+    include('library/closedb.php');\n+\n     include_once(\"lang/main.php\");\n     include(\"library/layout.php\");\n \n@@ -213,50 +245,75 @@\n \n     include_once('include/management/actionMessages.php');\n \n+    include('library/opendb.php');\n+    \n+    $sql = sprintf(\"SELECT DISTINCT(username) FROM %s\", $configValues['CONFIG_DB_TBL_RADCHECK']);\n+    $res = $dbSocket->query($sql);\n+    $logDebugSQL .= \"$sql;\\n\";\n+    \n+    $options = array();\n+    while ($row = $res->fetchrow()) {\n+        $options[] = $row[0];\n+    }\n+    \n+    include('library/closedb.php');\n+\n+    $input_descriptors1 = array();\n+\n+    $input_descriptors1[] = array(\n+                                'name' => 'username[]',\n+                                'id' => 'username',\n+                                'type' => 'select',\n+                                'caption' => t('all','Username'),\n+                                'options' => $options,\n+                                'multiple' => true,\n+                                'size' => 5\n+                             );\n+\n+    $input_descriptors1[] = array(\n+                                'name' => 'delradacct',\n+                                'type' => 'select',\n+                                'caption' => t('all','RemoveRadacctRecords'),\n+                                'options' => array(\"\", \"yes\", \"no\"),\n+                             );\n+\n+    $input_descriptors1[] = array(\n+                                    \"name\" => \"csrf_token\",\n+                                    \"type\" => \"hidden\",\n+                                    \"value\" => dalo_csrf_token(),\n+                                 );\n+\n+    $input_descriptors1[] = array(\n+                                    'type' => 'submit',\n+                                    'name' => 'submit',\n+                                    'value' => t('buttons','apply')\n+                                 );\n ?>\n \n-    <div id=\"removeDiv\" style=\"display:<?php echo $showRemoveDiv ?>;visibility:visible\" >\n-    <form action=\"<?php echo $_SERVER['PHP_SELF']; ?>\" method=\"get\">\n-\n+<form method=\"POST\">\n     <fieldset>\n+        <h302><?= t('title','AccountRemoval') ?></h302>\n+        <ul style=\"margin: 10px auto\">\n+<?php\n+        foreach ($input_descriptors1 as $input_descriptor) {\n+            print_form_component($input_descriptor);\n+        }\n+?>\n \n-        <h302> <?php echo t('title','AccountRemoval') ?> </h302>\n-        <br/>\n-\n-        <label for='username' class='form'><?php echo t('all','Username')?></label>\n-        <input name='username[]' type='text' id='username' value='<?php echo $username ?>' tabindex=100 />\n-        <br />\n-\n-        <label for='delradacct' class='form'><?php echo t('all','RemoveRadacctRecords')?></label>\n-        <select class='form' tabindex=102 name='delradacct' tabindex=101>\n-            <option value='no'>no</option>\n-            <option value='yes'>yes</option>\n-        </select>\n-        <br />\n-\n-        <br/><br/>\n-        <hr><br/>\n-        <input type=\"submit\" name=\"submit\" value=\"<?php echo t('buttons','apply') ?>\" tabindex=1000\n-            class='button' />\n-\n+        </ul>\n     </fieldset>\n+</form>\n+<?php\n \n-    </form>\n-    </div>\n+    if (array_key_exists('PREV_LIST_PAGE', $_SESSION) && !empty(trim($_SESSION['PREV_LIST_PAGE']))) {\n+        echo '<div style=\"float: right; text-align: right; margin: 0; font-size: small\">';\n+        printf('<a href=\"%s\" title=\"Back to Previous Page\">Back to Previous Page</a>', trim($_SESSION['PREV_LIST_PAGE']));\n+        echo '</div>';\n+        \n+        unset($_SESSION['PREV_LIST_PAGE']);\n+    }\n \n-<?php\n     include('include/config/logging.php');\n-    \n-    include_once(\"include/management/autocomplete.php\");\n-    \n-    if ($autoComplete) {\n-         $inline_extra_js = \"\n-autoComEdit = new DHTMLSuite.autoComplete();\n-autoComEdit.add('username','include/management/dynamicAutocomplete.php','_small','getAjaxAutocompleteUsernames');\";\n-    } else {\n-        $inline_extra_js = \"\";\n-    }\n-    \n-    print_footer_and_html_epilogue($inline_extra_js);\n+    print_footer_and_html_epilogue();\n ?>\n "
        },
        {
          "filename": "mng-edit.php",
          "status": "modified",
          "additions": 52,
          "deletions": 8,
          "patch": "@@ -473,6 +473,12 @@ function enableUser() {\n     if (!empty($username)) {\n         $input_descriptors1 = array();\n         \n+        $input_descriptors1[] = array(\n+                                        \"type\" => \"hidden\",\n+                                        \"value\" => dalo_csrf_token(),\n+                                        \"name\" => \"csrf_token\"\n+                                     );\n+        \n         $input_descriptors1[] = array(\n                                         \"type\" => \"hidden\",\n                                         \"value\" => $username_enc,\n@@ -610,10 +616,10 @@ function enableUser() {\n             $id__attribute = sprintf('%s__%s', $row[5], $row[0]);\n             $name = sprintf('editValues%s[]', $editCounter);\n             $type = (preg_match(\"/-Password$/\", $row[0])) ? $hiddenPassword : \"text\";\n-\n+            $onclick = sprintf(\"document.getElementById('form-%d-radcheck').submit()\", $editCounter);\n+            \n             echo '<li>';\n-            printf('<a class=\"tablenovisit\" href=\"mng-del.php?username=%s&attribute=%s&tablename=radcheck\">',\n-                   urlencode($username_enc), urlencode($id__attribute));\n+            printf('<a class=\"tablenovisit\" href=\"#\" onclick=\"%s\">', $onclick);\n             echo '<img src=\"images/icons/delete.png\" border=\"0\" alt=\"Remove\"></a>';\n             \n             printf('<label for=\"attribute\" class=\"attributes\">%s</label>', $row[0]);\n@@ -630,7 +636,7 @@ function enableUser() {\n \n \n             if (!empty($row[3]) || !empty($row[4])) {\n-                $divId = sprintf(\"%s-Tooltip-%d-check\", $row[0], $editCounter);\n+                $divId = sprintf(\"%s-Tooltip-%d-radcheck\", $row[0], $editCounter);\n                 $onclick = sprintf(\"toggleShowDiv('%s')\", $divId);\n                 printf('<img src=\"images/icons/comment.png\" alt=\"Tip\" border=\"0\" onClick=\"%s\">', $onclick);\n                 printf('<div id=\"%s\" style=\"display:none;visibility:visible\" class=\"ToolTip2\">', $divId);\n@@ -707,10 +713,10 @@ function enableUser() {\n             $id__attribute = sprintf('%s__%s', $row[5], $row[0]);\n             $name = sprintf('editValues%s[]', $editCounter);\n             $type = (preg_match(\"/-Password$/\", $row[0])) ? $hiddenPassword : \"text\";\n-    \n+            $onclick = sprintf(\"document.getElementById('form-%d-radreply').submit()\", $editCounter);\n+            \n             echo '<li>';\n-            printf('<a class=\"tablenovisit\" href=\"mng-del.php?username=%s&attribute=%s&tablename=radreply\">',\n-                   urlencode($username_enc), urlencode($id__attribute));\n+            printf('<a class=\"tablenovisit\" href=\"#\" onclick=\"%s\">', $onclick);\n             echo '<img src=\"images/icons/delete.png\" border=\"0\" alt=\"Remove\"></a>';\n \n             printf('<label for=\"attribute\" class=\"attributes\">%s</label>', $row[0]);\n@@ -726,7 +732,7 @@ function enableUser() {\n             printf('<input type=\"hidden\" name=\"%s\" value=\"radreply\">', $name);\n \n             if (!empty($row[3]) || !empty($row[4])) {\n-                $divId = sprintf(\"%s-Tooltip-%d-reply\", $row[0], $editCounter);\n+                $divId = sprintf(\"%s-Tooltip-%d-radreply\", $row[0], $editCounter);\n                 $onclick = sprintf(\"toggleShowDiv('%s')\", $divId);\n                 printf('<img src=\"images/icons/comment.png\" alt=\"Tip\" border=\"0\" onClick=\"%s\">', $onclick);\n                 printf('<div id=\"%s\" style=\"display:none;visibility:visible\" class=\"ToolTip2\">', $divId);\n@@ -843,6 +849,44 @@ function enableUser() {\n \n </form>\n \n+<?php\n+    include('library/opendb.php');\n+\n+    $tables = array(\n+                        'radcheck' => $configValues['CONFIG_DB_TBL_RADCHECK'],\n+                        'radreply' => $configValues['CONFIG_DB_TBL_RADREPLY']\n+                   );\n+\n+    $csrf_token = dalo_csrf_token();\n+\n+    foreach ($tables as $table_value => $table) {\n+\n+        $sql = sprintf(\"SELECT id, attribute, value FROM %s WHERE username='%s'\",\n+                       $table, $dbSocket->escapeSimple($username));\n+        $res = $dbSocket->query($sql);\n+        $logDebugSQL .= \"$sql;\\n\";\n+\n+        if ($res->numRows() > 0) {\n+            $counter = 0;\n+            while ($row = $res->fetchrow()) {\n+                list($id, $attribute, $value) = $row;\n+                \n+                $formId = sprintf(\"form-%d-%s\", $counter, $table_value);\n+                $id__attribute = sprintf(\"%d__%s\", intval($id), htmlspecialchars($attribute, ENT_QUOTES, 'UTF-8'));\n+                \n+                printf('<form id=\"%s\" style=\"display: none\" method=\"POST\" action=\"mng-del.php\">', $formId);\n+                printf('<input type=\"hidden\" name=\"username\" value=\"%s\">', $username_enc);\n+                printf('<input type=\"hidden\" name=\"attribute\" value=\"%s\">', $id__attribute);\n+                printf('<input type=\"hidden\" name=\"csrf_token\" value=\"%s\">', $csrf_token);\n+                printf('<input type=\"hidden\" name=\"tablename\" value=\"%s\">', $table_value);\n+                echo '</form>';\n+                \n+                $counter++;\n+            }\n+        }\n+    }\n+    include('library/closedb.php');\n+?>\n     <div id=\"OtherInfo-tab\" class=\"tabcontent\" title=\"Other Info\">\n <?php\n         include_once('include/management/userReports.php');"
        },
        {
          "filename": "mng-list-all.php",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -195,7 +195,7 @@\n         $action = \"mng-del.php\";\n ?>\n \n-<form name=\"listall\" method=\"GET\" action=\"<?= $action ?>\">\n+<form name=\"listall\" method=\"POST\" action=\"<?= $action ?>\">\n \n     <table border=\"0\" class=\"table1\">\n         <thead>\n@@ -289,6 +289,9 @@\n ?>\n \n     </table>\n+\n+    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= dalo_csrf_token() ?>\">\n+    \n </form>\n \n <?php"
        },
        {
          "filename": "mng-rad-profiles-list.php",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -184,11 +184,11 @@\n     include('include/config/logging.php');\n     \n     $inline_extra_js = \"\n-    var tooltipObj = new DHTMLgoodies_formTooltip();\n-    tooltipObj.setTooltipPosition('right');\n-    tooltipObj.setPageBgColor('#EEEEEE');\n-    tooltipObj.setTooltipCornerSize(15);\n-    tooltipObj.initFormFieldTooltip();\";\n+var tooltipObj = new DHTMLgoodies_formTooltip();\n+tooltipObj.setTooltipPosition('right');\n+tooltipObj.setPageBgColor('#EEEEEE');\n+tooltipObj.setTooltipCornerSize(15);\n+tooltipObj.initFormFieldTooltip();\";\n     \n     print_footer_and_html_epilogue($inline_extra_js);\n ?>"
        },
        {
          "filename": "mng-search.php",
          "status": "modified",
          "additions": 28,
          "deletions": 34,
          "patch": "@@ -50,6 +50,16 @@\n                   ? htmlspecialchars($username, ENT_QUOTES, 'UTF-8')\n                   : \"\";\n \n+    // init logging variables\n+    $log = \"visited page: \";\n+    $logQuery = \"performed query for \";\n+    if (!empty($username)) {\n+         $logQuery .= \"username(s) starting with [$username] \";\n+    } else {\n+        $logQuery .= \"all usernames \";\n+    }\n+    $logQuery .= \"on page: \";\n+\n     //feed the sidebar variables\n     $search_username = $username_enc;\n \n@@ -142,9 +152,13 @@\n         // the partial query is built starting from user input\n         // and for being passed to setupNumbering and setupLinks functions\n         $partial_query_string = (!empty($username_enc) ? \"&usernameOnline=\" . urlencode($username_enc) : \"\");\n+        \n+        // this can be passed as form attribute and \n+        // printTableFormControls function parameter\n+        $action = \"mng-del.php\";\n ?>\n         \n-<form name=\"searchusers\" method=\"GET\" action=\"mng-del.php\">\n+<form name=\"searchusers\" method=\"POST\" action=\"<?= $action ?>\">\n     <table border=\"0\" class=\"table1\">\n         <thead>\n             <tr style=\"background-color: white\">\n@@ -164,7 +178,7 @@\n             <tr>\n                 <th style=\"text-align: left\" colspan=\"<?= $colspan ?>\">\n <?php\n-        printTableFormControls('username[]', 'mng-del.php', 'searchusers');\n+        printTableFormControls('username[]', $action, 'searchusers');\n ?>\n                 </th>\n             </tr>\n@@ -235,6 +249,9 @@\n ?>\n \n     </table>\n+    \n+    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= dalo_csrf_token() ?>\">\n+    \n </form>\n \n <?php\n@@ -244,38 +261,15 @@\n     }\n     \n     include('library/closedb.php');\n-?>\n-\n-        </div><!-- #contentnorightbar -->\n-\n-        <div id=\"footer\">\n-\n-<?php\n-    $log = \"visited page: \";\n-    $logQuery = \"performed query for \";\n-    if (!empty($username)) {\n-         $logQuery .= \"username(s) starting with [$username] \";\n-    } else {\n-        $logQuery .= \"all usernames \";\n-    }\n-    $logQuery .= \"on page: \";\n \n     include('include/config/logging.php');\n-    include('page-footer.php');\n-?>\n-\n-\n-        </div><!-- #footer -->\n-    </div>\n-</div>\n-\n-<script>\n-    var tooltipObj = new DHTMLgoodies_formTooltip();\n-    tooltipObj.setTooltipPosition('right');\n-    tooltipObj.setPageBgColor('#EEEEEE');\n-    tooltipObj.setTooltipCornerSize(15);\n-    tooltipObj.initFormFieldTooltip();\n-</script>\n+    \n+    $inline_extra_js = \"\n+var tooltipObj = new DHTMLgoodies_formTooltip();\n+tooltipObj.setTooltipPosition('right');\n+tooltipObj.setPageBgColor('#EEEEEE');\n+tooltipObj.setTooltipCornerSize(15);\n+tooltipObj.initFormFieldTooltip()\";\n \n-</body>\n-</html>\n+    print_footer_and_html_epilogue($inline_extra_js);\n+?>"
        },
        {
          "filename": "notifications/common.php",
          "status": "added",
          "additions": 92,
          "deletions": 0,
          "patch": "@@ -0,0 +1,92 @@\n+<?php \n+/*\n+ *********************************************************************************************************\n+ * daloRADIUS - RADIUS Web Platform\n+ * Copyright (C) 2007 - Liran Tal <liran@enginx.com> All Rights Reserved.\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU General Public License\n+ * as published by the Free Software Foundation; either version 2\n+ * of the License, or (at your option) any later version.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n+ *\n+ *********************************************************************************************************\n+ *\n+ * Authors:    Filippo Lauria <filippo.lauria@iit.cnr.it>\n+ *\n+ *********************************************************************************************************\n+ */\n+\n+// prevent this file to be directly accessed\n+if (strpos($_SERVER['PHP_SELF'], '/notifications/common.php') !== false) {\n+    header(\"Location: ../index.php\");\n+    exit;\n+}\n+\n+//include the dompdf class\n+require_once(\"dompdf/dompdf_config.inc.php\");\n+\n+//include the Pear Mail classes for sending out emails\n+@require_once('Mail.php');\n+@require_once('Mail/mime.php');\n+\n+/**\n+ * createPDF()\n+ * creates a PDF document for a given html file\n+ * \n+ * @param         string        the html file to convert to pdf\n+ * \n+ * @return        string        returns the pdf in binary/string stream\n+ */\n+function createPDF($html, $base_path) {\n+    // this fix has been set in place according to this thread:\n+    // https://stackoverflow.com/questions/37521775/dompdf-error-no-block-level-parent-found-not-good\n+    $html = str_replace(\"\\n\", \"\", $html);\n+    \n+    // instansiate the pdf document\n+    $dompdf = new DOMPDF();\n+    $dompdf->set_base_path($base_path);\n+    $dompdf->load_html($html);\n+    $dompdf->render();\n+    return $dompdf->output();\n+}\n+\n+\n+/**\n+ * send_notification_via_email()\n+ * creates an email message with the pdf and sends it\n+ * \n+ * @param        string        pdf binary/string stream\n+ * @param        array         smtp server information\n+ * @param        string        destination email address\n+ * @param        string        from email address of the sender identity\n+ * @param        string        email subject\n+ * @param        string        email body\n+ * @param        string        pdf attachment name\n+ * \n+ */\n+function send_notification_via_email($pdfDocument, $smtpInfo, $sendTo, $from, $subject, $body, $attachmentName) {\n+    if (filter_var($sendTo, FILTER_VALIDATE_EMAIL) === false) {\n+        return false;\n+    }\n+    \n+    $headers = array(\n+                       \"From\"     => $from, \n+                       \"Subject\"  => $subject,\n+                       \"Reply-To\" => $from\n+                    );\n+\n+    $mime = new Mail_mime();\n+    $mime->setTXTBody($body); \n+    $mime->addAttachment($pdfDocument, \"application/pdf\", $attachmentName, false, 'base64');\n+    $body = $mime->get();\n+    $headers = $mime->headers($headers);\n+    $mail =& Mail::factory(\"smtp\", $smtpInfo);\n+    $mail->send($sendTo, $headers, $body);\n+\n+    return true;\n+}\n+?>"
        },
        {
          "filename": "notifications/dompdf/dompdf_config.inc.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -331,7 +331,7 @@\n  */\n if (DOMPDF_ENABLE_AUTOLOAD) {\n   require_once(DOMPDF_INC_DIR . \"/autoload.inc.php\");\n-  require_once(DOMPDF_LIB_DIR . \"/php-font-lib/classes/Font.php\");\n+  require_once(DOMPDF_LIB_DIR . \"/php-font-lib/Font.php\");\n }\n \n /**"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/AdobeFontMetrics.php",
          "status": "added",
          "additions": 217,
          "deletions": 0,
          "patch": "@@ -0,0 +1,217 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib;\n+\n+use FontLib\\Table\\Type\\name;\n+use FontLib\\TrueType\\File;\n+\n+/**\n+ * Adobe Font Metrics file creation utility class.\n+ *\n+ * @package php-font-lib\n+ */\n+class AdobeFontMetrics {\n+  private $f;\n+\n+  /**\n+   * @var File\n+   */\n+  private $font;\n+\n+  function __construct(File $font) {\n+    $this->font = $font;\n+  }\n+\n+  function write($file, $encoding = null) {\n+    $map_data = array();\n+\n+    if ($encoding) {\n+      $encoding = preg_replace(\"/[^a-z0-9-_]/\", \"\", $encoding);\n+      $map_file = dirname(__FILE__) . \"/../maps/$encoding.map\";\n+      if (!file_exists($map_file)) {\n+        throw new \\Exception(\"Unknown encoding ($encoding)\");\n+      }\n+\n+      $map      = new EncodingMap($map_file);\n+      $map_data = $map->parse();\n+    }\n+\n+    $this->f = fopen($file, \"w+\");\n+\n+    $font = $this->font;\n+\n+    $this->startSection(\"FontMetrics\", 4.1);\n+    $this->addPair(\"Notice\", \"Converted by PHP-font-lib\");\n+    $this->addPair(\"Comment\", \"https://github.com/PhenX/php-font-lib\");\n+\n+    $encoding_scheme = ($encoding ? $encoding : \"FontSpecific\");\n+    $this->addPair(\"EncodingScheme\", $encoding_scheme);\n+\n+    $records = $font->getData(\"name\", \"records\");\n+    foreach ($records as $id => $record) {\n+      if (!isset(name::$nameIdCodes[$id]) || preg_match(\"/[\\r\\n]/\", $record->string)) {\n+        continue;\n+      }\n+\n+      $this->addPair(name::$nameIdCodes[$id], $record->string);\n+    }\n+\n+    $os2 = $font->getData(\"OS/2\");\n+    $this->addPair(\"Weight\", ($os2[\"usWeightClass\"] > 400 ? \"Bold\" : \"Medium\"));\n+\n+    $post = $font->getData(\"post\");\n+    $this->addPair(\"ItalicAngle\", $post[\"italicAngle\"]);\n+    $this->addPair(\"IsFixedPitch\", ($post[\"isFixedPitch\"] ? \"true\" : \"false\"));\n+    $this->addPair(\"UnderlineThickness\", $font->normalizeFUnit($post[\"underlineThickness\"]));\n+    $this->addPair(\"UnderlinePosition\", $font->normalizeFUnit($post[\"underlinePosition\"]));\n+\n+    $hhea = $font->getData(\"hhea\");\n+\n+    if (isset($hhea[\"ascent\"])) {\n+      $this->addPair(\"FontHeightOffset\", $font->normalizeFUnit($hhea[\"lineGap\"]));\n+      $this->addPair(\"Ascender\", $font->normalizeFUnit($hhea[\"ascent\"]));\n+      $this->addPair(\"Descender\", $font->normalizeFUnit($hhea[\"descent\"]));\n+    }\n+    else {\n+      $this->addPair(\"FontHeightOffset\", $font->normalizeFUnit($os2[\"typoLineGap\"]));\n+      $this->addPair(\"Ascender\", $font->normalizeFUnit($os2[\"typoAscender\"]));\n+      $this->addPair(\"Descender\", -abs($font->normalizeFUnit($os2[\"typoDescender\"])));\n+    }\n+\n+    $head = $font->getData(\"head\");\n+    $this->addArray(\"FontBBox\", array(\n+      $font->normalizeFUnit($head[\"xMin\"]),\n+      $font->normalizeFUnit($head[\"yMin\"]),\n+      $font->normalizeFUnit($head[\"xMax\"]),\n+      $font->normalizeFUnit($head[\"yMax\"]),\n+    ));\n+\n+    $glyphIndexArray = $font->getUnicodeCharMap();\n+\n+    if ($glyphIndexArray) {\n+      $hmtx  = $font->getData(\"hmtx\");\n+      $names = $font->getData(\"post\", \"names\");\n+\n+      $this->startSection(\"CharMetrics\", count($hmtx));\n+\n+      if ($encoding) {\n+        foreach ($map_data as $code => $value) {\n+          list($c, $name) = $value;\n+\n+          if (!isset($glyphIndexArray[$c])) {\n+            continue;\n+          }\n+\n+          $g = $glyphIndexArray[$c];\n+\n+          if (!isset($hmtx[$g])) {\n+            $hmtx[$g] = $hmtx[0];\n+          }\n+\n+          $this->addMetric(array(\n+            \"C\"  => ($code > 255 ? -1 : $code),\n+            \"WX\" => $font->normalizeFUnit($hmtx[$g][0]),\n+            \"N\"  => $name,\n+          ));\n+        }\n+      }\n+      else {\n+        foreach ($glyphIndexArray as $c => $g) {\n+          if (!isset($hmtx[$g])) {\n+            $hmtx[$g] = $hmtx[0];\n+          }\n+\n+          $this->addMetric(array(\n+            \"U\"  => $c,\n+            \"WX\" => $font->normalizeFUnit($hmtx[$g][0]),\n+            \"N\"  => (isset($names[$g]) ? $names[$g] : sprintf(\"uni%04x\", $c)),\n+            \"G\"  => $g,\n+          ));\n+        }\n+      }\n+\n+      $this->endSection(\"CharMetrics\");\n+\n+      $kern = $font->getData(\"kern\", \"subtable\");\n+      $tree = is_array($kern) ? $kern[\"tree\"] : null;\n+\n+      if (!$encoding && is_array($tree)) {\n+        $this->startSection(\"KernData\");\n+        $this->startSection(\"KernPairs\", count($tree, COUNT_RECURSIVE) - count($tree));\n+\n+        foreach ($tree as $left => $values) {\n+          if (!is_array($values)) {\n+            continue;\n+          }\n+          if (!isset($glyphIndexArray[$left])) {\n+            continue;\n+          }\n+\n+          $left_gid = $glyphIndexArray[$left];\n+\n+          if (!isset($names[$left_gid])) {\n+            continue;\n+          }\n+\n+          $left_name = $names[$left_gid];\n+\n+          $this->addLine(\"\");\n+\n+          foreach ($values as $right => $value) {\n+            if (!isset($glyphIndexArray[$right])) {\n+              continue;\n+            }\n+\n+            $right_gid = $glyphIndexArray[$right];\n+\n+            if (!isset($names[$right_gid])) {\n+              continue;\n+            }\n+\n+            $right_name = $names[$right_gid];\n+            $this->addPair(\"KPX\", \"$left_name $right_name $value\");\n+          }\n+        }\n+\n+        $this->endSection(\"KernPairs\");\n+        $this->endSection(\"KernData\");\n+      }\n+    }\n+\n+    $this->endSection(\"FontMetrics\");\n+  }\n+\n+  function addLine($line) {\n+    fwrite($this->f, \"$line\\n\");\n+  }\n+\n+  function addPair($key, $value) {\n+    $this->addLine(\"$key $value\");\n+  }\n+\n+  function addArray($key, $array) {\n+    $this->addLine(\"$key \" . implode(\" \", $array));\n+  }\n+\n+  function addMetric($data) {\n+    $array = array();\n+    foreach ($data as $key => $value) {\n+      $array[] = \"$key $value\";\n+    }\n+    $this->addLine(implode(\" ; \", $array));\n+  }\n+\n+  function startSection($name, $value = \"\") {\n+    $this->addLine(\"Start$name $value\");\n+  }\n+\n+  function endSection($name) {\n+    $this->addLine(\"End$name\");\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Autoloader.php",
          "status": "added",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -0,0 +1,43 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\ufffdnager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib;\n+\n+/**\n+ * Autoloads FontLib classes\n+ *\n+ * @package php-font-lib\n+ */\n+class Autoloader {\n+  const PREFIX = 'FontLib';\n+\n+  /**\n+   * Register the autoloader\n+   */\n+  public static function register() {\n+    spl_autoload_register(array(new self, 'autoload'));\n+  }\n+\n+  /**\n+   * Autoloader\n+   *\n+   * @param string\n+   */\n+  public static function autoload($class) {\n+    $prefixLength = strlen(self::PREFIX);\n+    if (0 === strncmp(self::PREFIX, $class, $prefixLength)) {\n+      $file = str_replace('\\\\', DIRECTORY_SEPARATOR, substr($class, $prefixLength));\n+      $file = realpath(__DIR__ . (empty($file) ? '' : DIRECTORY_SEPARATOR) . $file . '.php');\n+      if (file_exists($file)) {\n+        require_once $file;\n+      }\n+    }\n+  }\n+}\n+\n+Autoloader::register();\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/BinaryStream.php",
          "status": "added",
          "additions": 449,
          "deletions": 0,
          "patch": "@@ -0,0 +1,449 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib;\n+\n+/**\n+ * Generic font file binary stream.\n+ *\n+ * @package php-font-lib\n+ */\n+class BinaryStream {\n+  /**\n+   * @var resource The file pointer\n+   */\n+  protected $f;\n+\n+  const uint8        = 1;\n+  const  int8        = 2;\n+  const uint16       = 3;\n+  const  int16       = 4;\n+  const uint32       = 5;\n+  const  int32       = 6;\n+  const shortFrac    = 7;\n+  const Fixed        = 8;\n+  const  FWord       = 9;\n+  const uFWord       = 10;\n+  const F2Dot14      = 11;\n+  const longDateTime = 12;\n+  const char         = 13;\n+\n+  const modeRead      = \"rb\";\n+  const modeWrite     = \"wb\";\n+  const modeReadWrite = \"rb+\";\n+\n+  static function backtrace() {\n+    var_dump(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS));\n+  }\n+\n+  /**\n+   * Open a font file in read mode\n+   *\n+   * @param string $filename The file name of the font to open\n+   *\n+   * @return bool\n+   */\n+  public function load($filename) {\n+    return $this->open($filename, self::modeRead);\n+  }\n+\n+  /**\n+   * Open a font file in a chosen mode\n+   *\n+   * @param string $filename The file name of the font to open\n+   * @param string $mode     The opening mode\n+   *\n+   * @throws \\Exception\n+   * @return bool\n+   */\n+  public function open($filename, $mode = self::modeRead) {\n+    if (!in_array($mode, array(self::modeRead, self::modeWrite, self::modeReadWrite))) {\n+      throw new \\Exception(\"Unknown file open mode\");\n+    }\n+\n+    $this->f = fopen($filename, $mode);\n+\n+    return $this->f != false;\n+  }\n+\n+  /**\n+   * Close the internal file pointer\n+   */\n+  public function close() {\n+    return fclose($this->f) != false;\n+  }\n+\n+  /**\n+   * Change the internal file pointer\n+   *\n+   * @param resource $fp\n+   *\n+   * @throws \\Exception\n+   */\n+  public function setFile($fp) {\n+    if (!is_resource($fp)) {\n+      throw new \\Exception('$fp is not a valid resource');\n+    }\n+\n+    $this->f = $fp;\n+  }\n+\n+  /**\n+   * Create a temporary file in write mode\n+   *\n+   * @param bool $allow_memory Allow in-memory files\n+   *\n+   * @return resource the temporary file pointer resource\n+   */\n+  public static function getTempFile($allow_memory = true) {\n+    $f = null;\n+\n+    if ($allow_memory) {\n+      $f = fopen(\"php://temp\", \"rb+\");\n+    }\n+    else {\n+      $f = fopen(tempnam(sys_get_temp_dir(), \"fnt\"), \"rb+\");\n+    }\n+\n+    return $f;\n+  }\n+\n+  /**\n+   * Move the internal file pinter to $offset bytes\n+   *\n+   * @param int $offset\n+   *\n+   * @return bool True if the $offset position exists in the file\n+   */\n+  public function seek($offset) {\n+    return fseek($this->f, $offset, SEEK_SET) == 0;\n+  }\n+\n+  /**\n+   * Gives the current position in the file\n+   *\n+   * @return int The current position\n+   */\n+  public function pos() {\n+    return ftell($this->f);\n+  }\n+\n+  public function skip($n) {\n+    fseek($this->f, $n, SEEK_CUR);\n+  }\n+\n+  /**\n+   * @param int $n The number of bytes to read\n+   *\n+   * @return string\n+   */\n+  public function read($n) {\n+    if ($n < 1) {\n+      return \"\";\n+    }\n+\n+    return (string) fread($this->f, $n);\n+  }\n+\n+  public function write($data, $length = null) {\n+    if ($data === null || $data === \"\" || $data === false) {\n+      return 0;\n+    }\n+\n+    return fwrite($this->f, $data, $length);\n+  }\n+\n+  public function readUInt8() {\n+    return ord($this->read(1));\n+  }\n+\n+  public function readUInt8Many($count) {\n+    return array_values(unpack(\"C*\", $this->read($count)));\n+  }\n+\n+  public function writeUInt8($data) {\n+    return $this->write(chr($data), 1);\n+  }\n+\n+  public function readInt8() {\n+    $v = $this->readUInt8();\n+\n+    if ($v >= 0x80) {\n+      $v -= 0x100;\n+    }\n+\n+    return $v;\n+  }\n+\n+  public function readInt8Many($count) {\n+    return array_values(unpack(\"c*\", $this->read($count)));\n+  }\n+\n+  public function writeInt8($data) {\n+    if ($data < 0) {\n+      $data += 0x100;\n+    }\n+\n+    return $this->writeUInt8($data);\n+  }\n+\n+  public function readUInt16() {\n+    $a = unpack(\"nn\", $this->read(2));\n+\n+    return $a[\"n\"];\n+  }\n+\n+  public function readUInt16Many($count) {\n+    return array_values(unpack(\"n*\", $this->read($count * 2)));\n+  }\n+\n+  public function readUFWord() {\n+    return $this->readUInt16();\n+  }\n+\n+  public function writeUInt16($data) {\n+    return $this->write(pack(\"n\", $data), 2);\n+  }\n+\n+  public function writeUFWord($data) {\n+    return $this->writeUInt16($data);\n+  }\n+\n+  public function readInt16() {\n+    $a = unpack(\"nn\", $this->read(2));\n+    $v = $a[\"n\"];\n+\n+    if ($v >= 0x8000) {\n+      $v -= 0x10000;\n+    }\n+\n+    return $v;\n+  }\n+\n+  public function readInt16Many($count) {\n+    $vals = array_values(unpack(\"n*\", $this->read($count * 2)));\n+    foreach ($vals as &$v) {\n+      if ($v >= 0x8000) {\n+        $v -= 0x10000;\n+      }\n+    }\n+\n+    return $vals;\n+  }\n+\n+  public function readFWord() {\n+    return $this->readInt16();\n+  }\n+\n+  public function writeInt16($data) {\n+    if ($data < 0) {\n+      $data += 0x10000;\n+    }\n+\n+    return $this->writeUInt16($data);\n+  }\n+\n+  public function writeFWord($data) {\n+    return $this->writeInt16($data);\n+  }\n+\n+  public function readUInt32() {\n+    $a = unpack(\"NN\", $this->read(4));\n+\n+    return $a[\"N\"];\n+  }\n+\n+  public function writeUInt32($data) {\n+    return $this->write(pack(\"N\", $data), 4);\n+  }\n+\n+  public function readFixed() {\n+    $d  = $this->readInt16();\n+    $d2 = $this->readUInt16();\n+\n+    return round($d + $d2 / 0x10000, 4);\n+  }\n+\n+  public function writeFixed($data) {\n+    $left  = floor($data);\n+    $right = ($data - $left) * 0x10000;\n+\n+    return $this->writeInt16($left) + $this->writeUInt16($right);\n+  }\n+\n+  public function readLongDateTime() {\n+    $this->readUInt32(); // ignored\n+    $date = $this->readUInt32() - 2082844800;\n+    \n+    # PHP_INT_MIN isn't defined in PHP < 7.0\n+    $php_int_min = defined(\"PHP_INT_MIN\") ? PHP_INT_MIN : ~PHP_INT_MAX;\n+\n+    if (is_string($date) || $date > PHP_INT_MAX || $date < $php_int_min) {\n+      $date = 0;\n+    }\n+\n+    return date(\"Y-m-d H:i:s\", $date);\n+  }\n+\n+  public function writeLongDateTime($data) {\n+    $date = strtotime($data);\n+    $date += 2082844800;\n+\n+    return $this->writeUInt32(0) + $this->writeUInt32($date);\n+  }\n+\n+  public function unpack($def) {\n+    $d = array();\n+    foreach ($def as $name => $type) {\n+      $d[$name] = $this->r($type);\n+    }\n+\n+    return $d;\n+  }\n+\n+  public function pack($def, $data) {\n+    $bytes = 0;\n+    foreach ($def as $name => $type) {\n+      $bytes += $this->w($type, $data[$name]);\n+    }\n+\n+    return $bytes;\n+  }\n+\n+  /**\n+   * Read a data of type $type in the file from the current position\n+   *\n+   * @param mixed $type The data type to read\n+   *\n+   * @return mixed The data that was read\n+   */\n+  public function r($type) {\n+    switch ($type) {\n+      case self::uint8:\n+        return $this->readUInt8();\n+      case self::int8:\n+        return $this->readInt8();\n+      case self::uint16:\n+        return $this->readUInt16();\n+      case self::int16:\n+        return $this->readInt16();\n+      case self::uint32:\n+        return $this->readUInt32();\n+      case self::int32:\n+        return $this->readUInt32();\n+      case self::shortFrac:\n+        return $this->readFixed();\n+      case self::Fixed:\n+        return $this->readFixed();\n+      case self::FWord:\n+        return $this->readInt16();\n+      case self::uFWord:\n+        return $this->readUInt16();\n+      case self::F2Dot14:\n+        return $this->readInt16();\n+      case self::longDateTime:\n+        return $this->readLongDateTime();\n+      case self::char:\n+        return $this->read(1);\n+      default:\n+        if (is_array($type)) {\n+          if ($type[0] == self::char) {\n+            return $this->read($type[1]);\n+          }\n+          if ($type[0] == self::uint16) {\n+            return $this->readUInt16Many($type[1]);\n+          }\n+          if ($type[0] == self::int16) {\n+            return $this->readInt16Many($type[1]);\n+          }\n+          if ($type[0] == self::uint8) {\n+            return $this->readUInt8Many($type[1]);\n+          }\n+          if ($type[0] == self::int8) {\n+            return $this->readInt8Many($type[1]);\n+          }\n+\n+          $ret = array();\n+          for ($i = 0; $i < $type[1]; $i++) {\n+            $ret[] = $this->r($type[0]);\n+          }\n+\n+          return $ret;\n+        }\n+\n+        return null;\n+    }\n+  }\n+\n+  /**\n+   * Write $data of type $type in the file from the current position\n+   *\n+   * @param mixed $type The data type to write\n+   * @param mixed $data The data to write\n+   *\n+   * @return int The number of bytes read\n+   */\n+  public function w($type, $data) {\n+    switch ($type) {\n+      case self::uint8:\n+        return $this->writeUInt8($data);\n+      case self::int8:\n+        return $this->writeInt8($data);\n+      case self::uint16:\n+        return $this->writeUInt16($data);\n+      case self::int16:\n+        return $this->writeInt16($data);\n+      case self::uint32:\n+        return $this->writeUInt32($data);\n+      case self::int32:\n+        return $this->writeUInt32($data);\n+      case self::shortFrac:\n+        return $this->writeFixed($data);\n+      case self::Fixed:\n+        return $this->writeFixed($data);\n+      case self::FWord:\n+        return $this->writeInt16($data);\n+      case self::uFWord:\n+        return $this->writeUInt16($data);\n+      case self::F2Dot14:\n+        return $this->writeInt16($data);\n+      case self::longDateTime:\n+        return $this->writeLongDateTime($data);\n+      case self::char:\n+        return $this->write($data, 1);\n+      default:\n+        if (is_array($type)) {\n+          if ($type[0] == self::char) {\n+            return $this->write($data, $type[1]);\n+          }\n+\n+          $ret = 0;\n+          for ($i = 0; $i < $type[1]; $i++) {\n+            if (isset($data[$i])) {\n+              $ret += $this->w($type[0], $data[$i]);\n+            }\n+          }\n+\n+          return $ret;\n+        }\n+\n+        return null;\n+    }\n+  }\n+\n+  /**\n+   * Converts a Uint32 value to string\n+   *\n+   * @param int $uint32\n+   *\n+   * @return string The string\n+   */\n+  public function convertUInt32ToStr($uint32) {\n+    return chr(($uint32 >> 24) & 0xFF) . chr(($uint32 >> 16) & 0xFF) . chr(($uint32 >> 8) & 0xFF) . chr($uint32 & 0xFF);\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/EOT/File.php",
          "status": "added",
          "additions": 159,
          "deletions": 0,
          "patch": "@@ -0,0 +1,159 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\EOT;\n+\n+/**\n+ * EOT font file.\n+ *\n+ * @package php-font-lib\n+ */\n+class File extends \\FontLib\\TrueType\\File {\n+  const TTEMBED_SUBSET                   = 0x00000001;\n+  const TTEMBED_TTCOMPRESSED             = 0x00000004;\n+  const TTEMBED_FAILIFVARIATIONSIMULATED = 0x00000010;\n+  const TTMBED_EMBEDEUDC                 = 0x00000020;\n+  const TTEMBED_VALIDATIONTESTS          = 0x00000040; // Deprecated\n+  const TTEMBED_WEBOBJECT      = 0x00000080;\n+  const TTEMBED_XORENCRYPTDATA = 0x10000000;\n+\n+  /**\n+   * @var Header\n+   */\n+  public $header;\n+\n+  function parseHeader() {\n+    if (!empty($this->header)) {\n+      return;\n+    }\n+\n+    $this->header = new Header($this);\n+    $this->header->parse();\n+  }\n+\n+  function parse() {\n+    $this->parseHeader();\n+\n+    $flags = $this->header->data[\"Flags\"];\n+\n+    if ($flags & self::TTEMBED_TTCOMPRESSED) {\n+      $mtx_version    = $this->readUInt8();\n+      $mtx_copy_limit = $this->readUInt8() << 16 | $this->readUInt8() << 8 | $this->readUInt8();\n+      $mtx_offset_1   = $this->readUInt8() << 16 | $this->readUInt8() << 8 | $this->readUInt8();\n+      $mtx_offset_2   = $this->readUInt8() << 16 | $this->readUInt8() << 8 | $this->readUInt8();\n+      /*\n+      var_dump(\"$mtx_version $mtx_copy_limit $mtx_offset_1 $mtx_offset_2\");\n+\n+      $pos = $this->pos();\n+      $size = $mtx_offset_1 - $pos;\n+      var_dump(\"pos: $pos\");\n+      var_dump(\"size: $size\");*/\n+    }\n+\n+    if ($flags & self::TTEMBED_XORENCRYPTDATA) {\n+      // Process XOR\n+    }\n+    // TODO Read font data ...\n+  }\n+\n+  /**\n+   * Little endian version of the read method\n+   *\n+   * @param int $n The number of bytes to read\n+   *\n+   * @return string\n+   */\n+  public function read($n) {\n+    if ($n < 1) {\n+      return \"\";\n+    }\n+\n+    $string = (string) fread($this->f, $n);\n+    $chunks = mb_str_split($string, 2, '8bit');\n+    $chunks = array_map(\"strrev\", $chunks);\n+    return implode(\"\", $chunks);\n+  }\n+\n+  public function readUInt32() {\n+    $uint32 = parent::readUInt32();\n+\n+    return $uint32 >> 16 & 0x0000FFFF | $uint32 << 16 & 0xFFFF0000;\n+  }\n+\n+  /**\n+   * Get font copyright\n+   *\n+   * @return string|null\n+   */\n+  function getFontCopyright() {\n+    return null;\n+  }\n+\n+  /**\n+   * Get font name\n+   *\n+   * @return string|null\n+   */\n+  function getFontName() {\n+    return $this->header->data[\"FamilyName\"];\n+  }\n+\n+  /**\n+   * Get font subfamily\n+   *\n+   * @return string|null\n+   */\n+  function getFontSubfamily() {\n+    return $this->header->data[\"StyleName\"];\n+  }\n+\n+  /**\n+   * Get font subfamily ID\n+   *\n+   * @return string|null\n+   */\n+  function getFontSubfamilyID() {\n+    return $this->header->data[\"StyleName\"];\n+  }\n+\n+  /**\n+   * Get font full name\n+   *\n+   * @return string|null\n+   */\n+  function getFontFullName() {\n+    return $this->header->data[\"FullName\"];\n+  }\n+\n+  /**\n+   * Get font version\n+   *\n+   * @return string|null\n+   */\n+  function getFontVersion() {\n+    return $this->header->data[\"VersionName\"];\n+  }\n+\n+  /**\n+   * Get font weight\n+   *\n+   * @return string|null\n+   */\n+  function getFontWeight() {\n+    return $this->header->data[\"Weight\"];\n+  }\n+\n+  /**\n+   * Get font Postscript name\n+   *\n+   * @return string|null\n+   */\n+  function getFontPostscriptName() {\n+    return null;\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/EOT/Header.php",
          "status": "added",
          "additions": 113,
          "deletions": 0,
          "patch": "@@ -0,0 +1,113 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\EOT;\n+\n+use Exception;\n+use FontLib\\Font;\n+\n+/**\n+ * TrueType font file header.\n+ *\n+ * @package php-font-lib\n+ *\n+ * @property File $font\n+ */\n+class Header extends \\FontLib\\Header {\n+  protected $def = array(\n+    \"format\"        => self::uint32,\n+    \"numTables\"     => self::uint16,\n+    \"searchRange\"   => self::uint16,\n+    \"entrySelector\" => self::uint16,\n+    \"rangeShift\"    => self::uint16,\n+  );\n+\n+  public function parse() {\n+    $font = $this->font;\n+\n+    $this->data = $font->unpack(array(\n+      \"EOTSize\"            => self::uint32,\n+      \"FontDataSize\"       => self::uint32,\n+      \"Version\"            => self::uint32,\n+      \"Flags\"              => self::uint32,\n+      \"FontPANOSE\"         => array(self::uint8, 10),\n+      \"Charset\"            => self::uint8,\n+      \"Italic\"             => self::uint8,\n+      \"Weight\"             => self::uint32,\n+      \"fsType\"             => self::uint16,\n+      \"MagicNumber\"        => self::uint16,\n+      \"UnicodeRange1\"      => self::uint32,\n+      \"UnicodeRange2\"      => self::uint32,\n+      \"UnicodeRange3\"      => self::uint32,\n+      \"UnicodeRange4\"      => self::uint32,\n+      \"CodePageRange1\"     => self::uint32,\n+      \"CodePageRange2\"     => self::uint32,\n+      \"CheckSumAdjustment\" => self::uint32,\n+      \"Reserved1\"          => self::uint32,\n+      \"Reserved2\"          => self::uint32,\n+      \"Reserved3\"          => self::uint32,\n+      \"Reserved4\"          => self::uint32,\n+    ));\n+\n+    $this->data[\"Padding1\"] = $font->readUInt16();\n+    $this->readString(\"FamilyName\");\n+\n+    $this->data[\"Padding2\"] = $font->readUInt16();\n+    $this->readString(\"StyleName\");\n+\n+    $this->data[\"Padding3\"] = $font->readUInt16();\n+    $this->readString(\"VersionName\");\n+\n+    $this->data[\"Padding4\"] = $font->readUInt16();\n+    $this->readString(\"FullName\");\n+\n+    switch ($this->data[\"Version\"]) {\n+      default:\n+        throw new Exception(\"Unknown EOT version \" . $this->data[\"Version\"]);\n+\n+      case 0x00010000:\n+        // Nothing to do more\n+        break;\n+\n+      case 0x00020001:\n+        $this->data[\"Padding5\"] = $font->readUInt16();\n+        $this->readString(\"RootString\");\n+        break;\n+\n+      case 0x00020002:\n+        $this->data[\"Padding5\"] = $font->readUInt16();\n+        $this->readString(\"RootString\");\n+\n+        $this->data[\"RootStringCheckSum\"] = $font->readUInt32();\n+        $this->data[\"EUDCCodePage\"]       = $font->readUInt32();\n+\n+        $this->data[\"Padding6\"] = $font->readUInt16();\n+        $this->readString(\"Signature\");\n+\n+        $this->data[\"EUDCFlags\"]    = $font->readUInt32();\n+        $this->data[\"EUDCFontSize\"] = $font->readUInt32();\n+        break;\n+    }\n+\n+    if (!empty($this->data[\"RootString\"])) {\n+      $this->data[\"RootString\"] = explode(\"\\0\", $this->data[\"RootString\"]);\n+    }\n+  }\n+\n+  private function readString($name) {\n+    $font = $this->font;\n+    $size = $font->readUInt16();\n+\n+    $this->data[\"{$name}Size\"] = $size;\n+    $this->data[$name]         = Font::UTF16ToUTF8($font->read($size));\n+  }\n+\n+  public function encode() {\n+    //return $this->font->pack($this->def, $this->data);\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/EncodingMap.php",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -0,0 +1,37 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib;\n+\n+/**\n+ * Encoding map used to map a code point to a Unicode char.\n+ *\n+ * @package php-font-lib\n+ */\n+class EncodingMap {\n+  private $f;\n+\n+  function __construct($file) {\n+    $this->f = fopen($file, \"r\");\n+  }\n+\n+  function parse() {\n+    $map = array();\n+\n+    while ($line = fgets($this->f)) {\n+      if (preg_match('/^[\\!\\=]([0-9A-F]{2,})\\s+U\\+([0-9A-F]{2})([0-9A-F]{2})\\s+([^\\s]+)/', $line, $matches)) {\n+        $unicode = (hexdec($matches[2]) << 8) + hexdec($matches[3]);\n+        $map[hexdec($matches[1])] = array($unicode, $matches[4]);\n+      }\n+    }\n+\n+    ksort($map);\n+\n+    return $map;\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Exception/FontNotFoundException.php",
          "status": "added",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -0,0 +1,11 @@\n+<?php\n+\n+namespace FontLib\\Exception;\n+\n+class FontNotFoundException extends \\Exception\n+{\n+    public function __construct($fontPath)\n+    {\n+        $this->message = 'Font not found in: ' . $fontPath;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Font.php",
          "status": "added",
          "additions": 89,
          "deletions": 0,
          "patch": "@@ -0,0 +1,89 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib;\n+\n+use FontLib\\Exception\\FontNotFoundException;\n+\n+/**\n+ * Generic font file.\n+ *\n+ * @package php-font-lib\n+ */\n+class Font {\n+  static $debug = false;\n+\n+  /**\n+   * @param string $file The font file\n+   *\n+   * @return TrueType\\File|null $file\n+   */\n+  public static function load($file) {\n+      if(!file_exists($file)){\n+          throw new FontNotFoundException($file);\n+      }\n+\n+    $header = file_get_contents($file, false, null, 0, 4);\n+    $class  = null;\n+\n+    switch ($header) {\n+      case \"\\x00\\x01\\x00\\x00\":\n+      case \"true\":\n+      case \"typ1\":\n+        $class = \"TrueType\\\\File\";\n+        break;\n+\n+      case \"OTTO\":\n+        $class = \"OpenType\\\\File\";\n+        break;\n+\n+      case \"wOFF\":\n+        $class = \"WOFF\\\\File\";\n+        break;\n+\n+      case \"ttcf\":\n+        $class = \"TrueType\\\\Collection\";\n+        break;\n+\n+      // Unknown type or EOT\n+      default:\n+        $magicNumber = file_get_contents($file, false, null, 34, 2);\n+\n+        if ($magicNumber === \"LP\") {\n+          $class = \"EOT\\\\File\";\n+        }\n+    }\n+\n+    if ($class) {\n+      $class = \"FontLib\\\\$class\";\n+\n+      /** @var TrueType\\File $obj */\n+      $obj = new $class;\n+      $obj->load($file);\n+\n+      return $obj;\n+    }\n+\n+    return null;\n+  }\n+\n+  static function d($str) {\n+    if (!self::$debug) {\n+      return;\n+    }\n+    echo \"$str\\n\";\n+  }\n+\n+  static function UTF16ToUTF8($str) {\n+    return mb_convert_encoding($str, \"utf-8\", \"utf-16\");\n+  }\n+\n+  static function UTF8ToUTF16($str) {\n+    return mb_convert_encoding($str, \"utf-16\", \"utf-8\");\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Glyph/Outline.php",
          "status": "added",
          "additions": 109,
          "deletions": 0,
          "patch": "@@ -0,0 +1,109 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ * @version $Id: Font_Table_glyf.php 46 2012-04-02 20:22:38Z fabien.menager $\n+ */\n+namespace FontLib\\Glyph;\n+\n+use FontLib\\Table\\Type\\glyf;\n+use FontLib\\TrueType\\File;\n+use FontLib\\BinaryStream;\n+\n+/**\n+ * `glyf` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class Outline extends BinaryStream {\n+  /**\n+   * @var \\FontLib\\Table\\Type\\glyf\n+   */\n+  protected $table;\n+\n+  protected $offset;\n+  protected $size;\n+\n+  // Data\n+  public $numberOfContours;\n+  public $xMin;\n+  public $yMin;\n+  public $xMax;\n+  public $yMax;\n+\n+  /**\n+   * @var string|null\n+   */\n+  public $raw;\n+\n+  /**\n+   * @param glyf $table\n+   * @param                 $offset\n+   * @param                 $size\n+   *\n+   * @return Outline\n+   */\n+  static function init(glyf $table, $offset, $size, BinaryStream $font) {\n+    $font->seek($offset);\n+\n+    if ($font->readInt16() > -1) {\n+      /** @var OutlineSimple $glyph */\n+      $glyph = new OutlineSimple($table, $offset, $size);\n+    }\n+    else {\n+      /** @var OutlineComposite $glyph */\n+      $glyph = new OutlineComposite($table, $offset, $size);\n+    }\n+\n+    $glyph->parse($font);\n+\n+    return $glyph;\n+  }\n+\n+  /**\n+   * @return File\n+   */\n+  function getFont() {\n+    return $this->table->getFont();\n+  }\n+\n+  function __construct(glyf $table, $offset = null, $size = null) {\n+    $this->table  = $table;\n+    $this->offset = $offset;\n+    $this->size   = $size;\n+  }\n+\n+  function parse(BinaryStream $font) {\n+    $font->seek($this->offset);\n+\n+      $this->raw = $font->read($this->size);\n+  }\n+\n+  function parseData() {\n+    $font = $this->getFont();\n+    $font->seek($this->offset);\n+\n+    $this->numberOfContours = $font->readInt16();\n+    $this->xMin             = $font->readFWord();\n+    $this->yMin             = $font->readFWord();\n+    $this->xMax             = $font->readFWord();\n+    $this->yMax             = $font->readFWord();\n+  }\n+\n+  function encode() {\n+    $font = $this->getFont();\n+\n+    return $font->write($this->raw, mb_strlen((string) $this->raw, '8bit'));\n+  }\n+\n+  function getSVGContours() {\n+    // Inherit\n+  }\n+\n+  function getGlyphIDs() {\n+    return array();\n+  }\n+}\n+"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Glyph/OutlineComponent.php",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ * @version $Id: Font_Table_glyf.php 46 2012-04-02 20:22:38Z fabien.menager $\n+ */\n+\n+namespace FontLib\\Glyph;\n+/**\n+ * Glyph outline component\n+ *\n+ * @package php-font-lib\n+ */\n+class OutlineComponent {\n+  public $flags;\n+  public $glyphIndex;\n+  public $a, $b, $c, $d, $e, $f;\n+  public $point_compound;\n+  public $point_component;\n+  public $instructions;\n+\n+  function getMatrix() {\n+    return array(\n+      $this->a, $this->b,\n+      $this->c, $this->d,\n+      $this->e, $this->f,\n+    );\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Glyph/OutlineComposite.php",
          "status": "added",
          "additions": 242,
          "deletions": 0,
          "patch": "@@ -0,0 +1,242 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ * @version $Id: Font_Table_glyf.php 46 2012-04-02 20:22:38Z fabien.menager $\n+ */\n+\n+namespace FontLib\\Glyph;\n+\n+/**\n+ * Composite glyph outline\n+ *\n+ * @package php-font-lib\n+ */\n+class OutlineComposite extends Outline {\n+  const ARG_1_AND_2_ARE_WORDS    = 0x0001;\n+  const ARGS_ARE_XY_VALUES       = 0x0002;\n+  const ROUND_XY_TO_GRID         = 0x0004;\n+  const WE_HAVE_A_SCALE          = 0x0008;\n+  const MORE_COMPONENTS          = 0x0020;\n+  const WE_HAVE_AN_X_AND_Y_SCALE = 0x0040;\n+  const WE_HAVE_A_TWO_BY_TWO     = 0x0080;\n+  const WE_HAVE_INSTRUCTIONS     = 0x0100;\n+  const USE_MY_METRICS           = 0x0200;\n+  const OVERLAP_COMPOUND         = 0x0400;\n+\n+  /**\n+   * @var OutlineComponent[]\n+   */\n+  public $components = array();\n+\n+  function getGlyphIDs() {\n+    if (empty($this->components)) {\n+      $this->parseData();\n+    }\n+\n+    $glyphIDs = array();\n+    foreach ($this->components as $_component) {\n+      $glyphIDs[] = $_component->glyphIndex;\n+\n+      $_glyph   = $this->table->data[$_component->glyphIndex];\n+\n+      if ($_glyph !== $this) {\n+        $glyphIDs = array_merge($glyphIDs, $_glyph->getGlyphIDs());\n+      }\n+    }\n+\n+    return $glyphIDs;\n+  }\n+\n+  /*function parse() {\n+    //$this->parseData();\n+  }*/\n+\n+  function parseData() {\n+    parent::parseData();\n+\n+    $font = $this->getFont();\n+\n+    do {\n+      $flags      = $font->readUInt16();\n+      $glyphIndex = $font->readUInt16();\n+\n+      $a = 1.0;\n+      $b = 0.0;\n+      $c = 0.0;\n+      $d = 1.0;\n+      $e = 0.0;\n+      $f = 0.0;\n+\n+      $point_compound  = null;\n+      $point_component = null;\n+\n+      $instructions = null;\n+\n+      if ($flags & self::ARG_1_AND_2_ARE_WORDS) {\n+        if ($flags & self::ARGS_ARE_XY_VALUES) {\n+          $e = $font->readInt16();\n+          $f = $font->readInt16();\n+        }\n+        else {\n+          $point_compound  = $font->readUInt16();\n+          $point_component = $font->readUInt16();\n+        }\n+      }\n+      else {\n+        if ($flags & self::ARGS_ARE_XY_VALUES) {\n+          $e = $font->readInt8();\n+          $f = $font->readInt8();\n+        }\n+        else {\n+          $point_compound  = $font->readUInt8();\n+          $point_component = $font->readUInt8();\n+        }\n+      }\n+\n+      if ($flags & self::WE_HAVE_A_SCALE) {\n+        $a = $d = $font->readInt16();\n+      }\n+      elseif ($flags & self::WE_HAVE_AN_X_AND_Y_SCALE) {\n+        $a = $font->readInt16();\n+        $d = $font->readInt16();\n+      }\n+      elseif ($flags & self::WE_HAVE_A_TWO_BY_TWO) {\n+        $a = $font->readInt16();\n+        $b = $font->readInt16();\n+        $c = $font->readInt16();\n+        $d = $font->readInt16();\n+      }\n+\n+      //if ($flags & self::WE_HAVE_INSTRUCTIONS) {\n+      //\n+      //}\n+\n+      $component                  = new OutlineComponent();\n+      $component->flags           = $flags;\n+      $component->glyphIndex      = $glyphIndex;\n+      $component->a               = $a;\n+      $component->b               = $b;\n+      $component->c               = $c;\n+      $component->d               = $d;\n+      $component->e               = $e;\n+      $component->f               = $f;\n+      $component->point_compound  = $point_compound;\n+      $component->point_component = $point_component;\n+      $component->instructions    = $instructions;\n+\n+      $this->components[] = $component;\n+    } while ($flags & self::MORE_COMPONENTS);\n+  }\n+\n+  function encode() {\n+    $font = $this->getFont();\n+\n+    $gids = $font->getSubset();\n+\n+    $size = $font->writeInt16(-1);\n+    $size += $font->writeFWord($this->xMin);\n+    $size += $font->writeFWord($this->yMin);\n+    $size += $font->writeFWord($this->xMax);\n+    $size += $font->writeFWord($this->yMax);\n+\n+    foreach ($this->components as $_i => $_component) {\n+      $flags = 0;\n+      if ($_component->point_component === null && $_component->point_compound === null) {\n+        $flags |= self::ARGS_ARE_XY_VALUES;\n+\n+        if (abs($_component->e) > 0x7F || abs($_component->f) > 0x7F) {\n+          $flags |= self::ARG_1_AND_2_ARE_WORDS;\n+        }\n+      }\n+      elseif ($_component->point_component > 0xFF || $_component->point_compound > 0xFF) {\n+        $flags |= self::ARG_1_AND_2_ARE_WORDS;\n+      }\n+\n+      if ($_component->b == 0 && $_component->c == 0) {\n+        if ($_component->a == $_component->d) {\n+          if ($_component->a != 1.0) {\n+            $flags |= self::WE_HAVE_A_SCALE;\n+          }\n+        }\n+        else {\n+          $flags |= self::WE_HAVE_AN_X_AND_Y_SCALE;\n+        }\n+      }\n+      else {\n+        $flags |= self::WE_HAVE_A_TWO_BY_TWO;\n+      }\n+\n+      if ($_i < count($this->components) - 1) {\n+        $flags |= self::MORE_COMPONENTS;\n+      }\n+\n+      $size += $font->writeUInt16($flags);\n+\n+      $new_gid = array_search($_component->glyphIndex, $gids);\n+      $size += $font->writeUInt16($new_gid);\n+\n+      if ($flags & self::ARG_1_AND_2_ARE_WORDS) {\n+        if ($flags & self::ARGS_ARE_XY_VALUES) {\n+          $size += $font->writeInt16($_component->e);\n+          $size += $font->writeInt16($_component->f);\n+        }\n+        else {\n+          $size += $font->writeUInt16($_component->point_compound);\n+          $size += $font->writeUInt16($_component->point_component);\n+        }\n+      }\n+      else {\n+        if ($flags & self::ARGS_ARE_XY_VALUES) {\n+          $size += $font->writeInt8($_component->e);\n+          $size += $font->writeInt8($_component->f);\n+        }\n+        else {\n+          $size += $font->writeUInt8($_component->point_compound);\n+          $size += $font->writeUInt8($_component->point_component);\n+        }\n+      }\n+\n+      if ($flags & self::WE_HAVE_A_SCALE) {\n+        $size += $font->writeInt16($_component->a);\n+      }\n+      elseif ($flags & self::WE_HAVE_AN_X_AND_Y_SCALE) {\n+        $size += $font->writeInt16($_component->a);\n+        $size += $font->writeInt16($_component->d);\n+      }\n+      elseif ($flags & self::WE_HAVE_A_TWO_BY_TWO) {\n+        $size += $font->writeInt16($_component->a);\n+        $size += $font->writeInt16($_component->b);\n+        $size += $font->writeInt16($_component->c);\n+        $size += $font->writeInt16($_component->d);\n+      }\n+    }\n+\n+    return $size;\n+  }\n+\n+  public function getSVGContours() {\n+    $contours = array();\n+\n+    /** @var \\FontLib\\Table\\Type\\glyf $glyph_data */\n+    $glyph_data = $this->getFont()->getTableObject(\"glyf\");\n+\n+    /** @var Outline[] $glyphs */\n+    $glyphs = $glyph_data->data;\n+\n+    foreach ($this->components as $component) {\n+      $_glyph = $glyphs[$component->glyphIndex];\n+\n+      if ($_glyph !== $this) {\n+        $contours[] = array(\n+          \"contours\"  => $_glyph->getSVGContours(),\n+          \"transform\" => $component->getMatrix(),\n+        );\n+      }\n+    }\n+\n+    return $contours;\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Glyph/OutlineSimple.php",
          "status": "added",
          "additions": 335,
          "deletions": 0,
          "patch": "@@ -0,0 +1,335 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ * @version $Id: Font_Table_glyf.php 46 2012-04-02 20:22:38Z fabien.menager $\n+ */\n+\n+namespace FontLib\\Glyph;\n+\n+/**\n+ * `glyf` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class OutlineSimple extends Outline {\n+  const ON_CURVE       = 0x01;\n+  const X_SHORT_VECTOR = 0x02;\n+  const Y_SHORT_VECTOR = 0x04;\n+  const REPEAT         = 0x08;\n+  const THIS_X_IS_SAME = 0x10;\n+  const THIS_Y_IS_SAME = 0x20;\n+\n+  public $instructions;\n+  public $points;\n+\n+  function parseData() {\n+    parent::parseData();\n+\n+    if (!$this->size) {\n+      return;\n+    }\n+\n+    $font = $this->getFont();\n+\n+    $noc = $this->numberOfContours;\n+\n+    if ($noc == 0) {\n+      return;\n+    }\n+\n+    $endPtsOfContours = $font->r(array(self::uint16, $noc));\n+\n+    $instructionLength  = $font->readUInt16();\n+    $this->instructions = $font->r(array(self::uint8, $instructionLength));\n+\n+    $count = $endPtsOfContours[$noc - 1] + 1;\n+\n+    // Flags\n+    $flags = array();\n+    for ($index = 0; $index < $count; $index++) {\n+      $flags[$index] = $font->readUInt8();\n+\n+      if ($flags[$index] & self::REPEAT) {\n+        $repeats = $font->readUInt8();\n+\n+        for ($i = 1; $i <= $repeats; $i++) {\n+          $flags[$index + $i] = $flags[$index];\n+        }\n+\n+        $index += $repeats;\n+      }\n+    }\n+\n+    $points = array();\n+    foreach ($flags as $i => $flag) {\n+      $points[$i][\"onCurve\"]      = $flag & self::ON_CURVE;\n+      $points[$i][\"endOfContour\"] = in_array($i, $endPtsOfContours);\n+    }\n+\n+    // X Coords\n+    $x = 0;\n+    for ($i = 0; $i < $count; $i++) {\n+      $flag = $flags[$i];\n+\n+      if ($flag & self::THIS_X_IS_SAME) {\n+        if ($flag & self::X_SHORT_VECTOR) {\n+          $x += $font->readUInt8();\n+        }\n+      }\n+      else {\n+        if ($flag & self::X_SHORT_VECTOR) {\n+          $x -= $font->readUInt8();\n+        }\n+        else {\n+          $x += $font->readInt16();\n+        }\n+      }\n+\n+      $points[$i][\"x\"] = $x;\n+    }\n+\n+    // Y Coords\n+    $y = 0;\n+    for ($i = 0; $i < $count; $i++) {\n+      $flag = $flags[$i];\n+\n+      if ($flag & self::THIS_Y_IS_SAME) {\n+        if ($flag & self::Y_SHORT_VECTOR) {\n+          $y += $font->readUInt8();\n+        }\n+      }\n+      else {\n+        if ($flag & self::Y_SHORT_VECTOR) {\n+          $y -= $font->readUInt8();\n+        }\n+        else {\n+          $y += $font->readInt16();\n+        }\n+      }\n+\n+      $points[$i][\"y\"] = $y;\n+    }\n+\n+    $this->points = $points;\n+  }\n+\n+  public function splitSVGPath($path) {\n+    preg_match_all('/([a-z])|(-?\\d+(?:\\.\\d+)?)/i', $path, $matches, PREG_PATTERN_ORDER);\n+\n+    return $matches[0];\n+  }\n+\n+  public function makePoints($path) {\n+    $path = $this->splitSVGPath($path);\n+    $l    = count($path);\n+    $i    = 0;\n+\n+    $points = array();\n+\n+    while ($i < $l) {\n+      switch ($path[$i]) {\n+        // moveTo\n+        case \"M\":\n+          $points[] = array(\n+            \"onCurve\"      => true,\n+            \"x\"            => $path[++$i],\n+            \"y\"            => $path[++$i],\n+            \"endOfContour\" => false,\n+          );\n+          break;\n+\n+        // lineTo\n+        case \"L\":\n+          $points[] = array(\n+            \"onCurve\"      => true,\n+            \"x\"            => $path[++$i],\n+            \"y\"            => $path[++$i],\n+            \"endOfContour\" => false,\n+          );\n+          break;\n+\n+        // quadraticCurveTo\n+        case \"Q\":\n+          $points[] = array(\n+            \"onCurve\"      => false,\n+            \"x\"            => $path[++$i],\n+            \"y\"            => $path[++$i],\n+            \"endOfContour\" => false,\n+          );\n+          $points[] = array(\n+            \"onCurve\"      => true,\n+            \"x\"            => $path[++$i],\n+            \"y\"            => $path[++$i],\n+            \"endOfContour\" => false,\n+          );\n+          break;\n+\n+        // closePath\n+        /** @noinspection PhpMissingBreakStatementInspection */\n+        case \"z\":\n+          $points[count($points) - 1][\"endOfContour\"] = true;\n+\n+        default:\n+          $i++;\n+          break;\n+      }\n+    }\n+\n+    return $points;\n+  }\n+\n+  function encode() {\n+    if (empty($this->points)) {\n+      return parent::encode();\n+    }\n+\n+    return $this->size = $this->encodePoints($this->points);\n+  }\n+\n+  public function encodePoints($points) {\n+    $endPtsOfContours = array();\n+    $flags            = array();\n+    $coords_x         = array();\n+    $coords_y         = array();\n+\n+    $last_x = 0;\n+    $last_y = 0;\n+    $xMin   = $yMin = 0xFFFF;\n+    $xMax   = $yMax = -0xFFFF;\n+    foreach ($points as $i => $point) {\n+      $flag = 0;\n+      if ($point[\"onCurve\"]) {\n+        $flag |= self::ON_CURVE;\n+      }\n+\n+      if ($point[\"endOfContour\"]) {\n+        $endPtsOfContours[] = $i;\n+      }\n+\n+      // Simplified, we could do some optimizations\n+      if ($point[\"x\"] == $last_x) {\n+        $flag |= self::THIS_X_IS_SAME;\n+      }\n+      else {\n+        $x          = intval($point[\"x\"]);\n+        $xMin       = min($x, $xMin);\n+        $xMax       = max($x, $xMax);\n+        $coords_x[] = $x - $last_x; // int16\n+      }\n+\n+      // Simplified, we could do some optimizations\n+      if ($point[\"y\"] == $last_y) {\n+        $flag |= self::THIS_Y_IS_SAME;\n+      }\n+      else {\n+        $y          = intval($point[\"y\"]);\n+        $yMin       = min($y, $yMin);\n+        $yMax       = max($y, $yMax);\n+        $coords_y[] = $y - $last_y; // int16\n+      }\n+\n+      $flags[] = $flag;\n+      $last_x  = $point[\"x\"];\n+      $last_y  = $point[\"y\"];\n+    }\n+\n+    $font = $this->getFont();\n+\n+    $l = 0;\n+    $l += $font->writeInt16(count($endPtsOfContours)); // endPtsOfContours\n+    $l += $font->writeFWord(isset($this->xMin) ? $this->xMin : $xMin); // xMin\n+    $l += $font->writeFWord(isset($this->yMin) ? $this->yMin : $yMin); // yMin\n+    $l += $font->writeFWord(isset($this->xMax) ? $this->xMax : $xMax); // xMax\n+    $l += $font->writeFWord(isset($this->yMax) ? $this->yMax : $yMax); // yMax\n+\n+    // Simple glyf\n+    $l += $font->w(array(self::uint16, count($endPtsOfContours)), $endPtsOfContours); // endPtsOfContours\n+    $l += $font->writeUInt16(0); // instructionLength\n+    $l += $font->w(array(self::uint8, count($flags)), $flags); // flags\n+    $l += $font->w(array(self::int16, count($coords_x)), $coords_x); // xCoordinates\n+    $l += $font->w(array(self::int16, count($coords_y)), $coords_y); // yCoordinates\n+    return $l;\n+  }\n+\n+  public function getSVGContours($points = null) {\n+    $path = \"\";\n+\n+    if (!$points) {\n+      if (empty($this->points)) {\n+        $this->parseData();\n+      }\n+\n+      $points = $this->points;\n+    }\n+\n+    $length     = (empty($points) ? 0 : count($points));\n+    $firstIndex = 0;\n+    $count      = 0;\n+\n+    for ($i = 0; $i < $length; $i++) {\n+      $count++;\n+\n+      if ($points[$i][\"endOfContour\"]) {\n+        $path .= $this->getSVGPath($points, $firstIndex, $count);\n+        $firstIndex = $i + 1;\n+        $count      = 0;\n+      }\n+    }\n+\n+    return $path;\n+  }\n+\n+  protected function getSVGPath($points, $startIndex, $count) {\n+    $offset = 0;\n+    $path   = \"\";\n+\n+    while ($offset < $count) {\n+      $point    = $points[$startIndex + $offset % $count];\n+      $point_p1 = $points[$startIndex + ($offset + 1) % $count];\n+\n+      if ($offset == 0) {\n+        $path .= \"M{$point['x']},{$point['y']} \";\n+      }\n+\n+      if ($point[\"onCurve\"]) {\n+        if ($point_p1[\"onCurve\"]) {\n+          $path .= \"L{$point_p1['x']},{$point_p1['y']} \";\n+          $offset++;\n+        }\n+        else {\n+          $point_p2 = $points[$startIndex + ($offset + 2) % $count];\n+\n+          if ($point_p2[\"onCurve\"]) {\n+            $path .= \"Q{$point_p1['x']},{$point_p1['y']},{$point_p2['x']},{$point_p2['y']} \";\n+          }\n+          else {\n+            $path .= \"Q{$point_p1['x']},{$point_p1['y']},\" . $this->midValue($point_p1['x'], $point_p2['x']) . \",\" . $this->midValue($point_p1['y'], $point_p2['y']) . \" \";\n+          }\n+\n+          $offset += 2;\n+        }\n+      }\n+      else {\n+        if ($point_p1[\"onCurve\"]) {\n+          $path .= \"Q{$point['x']},{$point['y']},{$point_p1['x']},{$point_p1['y']} \";\n+        }\n+        else {\n+          $path .= \"Q{$point['x']},{$point['y']},\" . $this->midValue($point['x'], $point_p1['x']) . \",\" . $this->midValue($point['y'], $point_p1['y']) . \" \";\n+        }\n+\n+        $offset++;\n+      }\n+    }\n+\n+    $path .= \"z \";\n+\n+    return $path;\n+  }\n+\n+  function midValue($a, $b) {\n+    return $a + ($b - $a) / 2;\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Header.php",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -0,0 +1,37 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+namespace FontLib;\n+\n+use FontLib\\TrueType\\File;\n+\n+/**\n+ * Font header container.\n+ *\n+ * @package php-font-lib\n+ */\n+abstract class Header extends BinaryStream {\n+  /**\n+   * @var File\n+   */\n+  protected $font;\n+  protected $def = array();\n+\n+  public $data;\n+\n+  public function __construct(File $font) {\n+    $this->font = $font;\n+  }\n+\n+  public function encode() {\n+    return $this->font->pack($this->def, $this->data);\n+  }\n+\n+  public function parse() {\n+    $this->data = $this->font->unpack($this->def);\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/OpenType/File.php",
          "status": "added",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -0,0 +1,18 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\OpenType;\n+\n+/**\n+ * Open Type font, the same as a TrueType one.\n+ *\n+ * @package php-font-lib\n+ */\n+class File extends \\FontLib\\TrueType\\File {\n+  //\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/OpenType/TableDirectoryEntry.php",
          "status": "added",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -0,0 +1,18 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\OpenType;\n+\n+/**\n+ * Open Type Table directory entry, the same as a TrueType one.\n+ *\n+ * @package php-font-lib\n+ */\n+class TableDirectoryEntry extends \\FontLib\\TrueType\\TableDirectoryEntry {\n+\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/DirectoryEntry.php",
          "status": "added",
          "additions": 134,
          "deletions": 0,
          "patch": "@@ -0,0 +1,134 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+namespace FontLib\\Table;\n+\n+use FontLib\\TrueType\\File;\n+use FontLib\\Font;\n+use FontLib\\BinaryStream;\n+\n+/**\n+ * Generic Font table directory entry.\n+ *\n+ * @package php-font-lib\n+ */\n+class DirectoryEntry extends BinaryStream {\n+  /**\n+   * @var File\n+   */\n+  protected $font;\n+\n+  /**\n+   * @var Table\n+   */\n+  protected $font_table;\n+\n+  public $entryLength = 4;\n+\n+  public $tag;\n+  public $checksum;\n+  public $offset;\n+  public $length;\n+\n+  protected $origF;\n+\n+  /**\n+   * @param string $data\n+   *\n+   * @return int\n+   */\n+  static function computeChecksum($data) {\n+    $len = mb_strlen($data, '8bit');\n+    $mod = $len % 4;\n+\n+    if ($mod) {\n+      $data = str_pad($data, $len + (4 - $mod), \"\\0\");\n+    }\n+\n+    $len = mb_strlen($data, '8bit');\n+\n+    $hi = 0x0000;\n+    $lo = 0x0000;\n+\n+    for ($i = 0; $i < $len; $i += 4) {\n+      $hi += (ord($data[$i]) << 8) + ord($data[$i + 1]);\n+      $lo += (ord($data[$i + 2]) << 8) + ord($data[$i + 3]);\n+      $hi += $lo >> 16;\n+      $lo = $lo & 0xFFFF;\n+      $hi = $hi & 0xFFFF;\n+    }\n+\n+    return ($hi << 8) + $lo;\n+  }\n+\n+  function __construct(File $font) {\n+    $this->font = $font;\n+    $this->f    = $font->f;\n+  }\n+\n+  function parse() {\n+    $this->tag = $this->font->read(4);\n+  }\n+\n+  function open($filename, $mode = self::modeRead) {\n+    // void\n+  }\n+\n+  function setTable(Table $font_table) {\n+    $this->font_table = $font_table;\n+  }\n+\n+  function encode($entry_offset) {\n+    Font::d(\"\\n==== $this->tag ====\");\n+    //Font::d(\"Entry offset  = $entry_offset\");\n+\n+    $data = $this->font_table;\n+    $font = $this->font;\n+\n+    $table_offset = $font->pos();\n+    $this->offset = $table_offset;\n+    $table_length = $data->encode();\n+\n+    $font->seek($table_offset);\n+    $table_data = $font->read($table_length);\n+\n+    $font->seek($entry_offset);\n+\n+    $font->write($this->tag, 4);\n+    $font->writeUInt32(self::computeChecksum($table_data));\n+    $font->writeUInt32($table_offset);\n+    $font->writeUInt32($table_length);\n+\n+    Font::d(\"Bytes written = $table_length\");\n+\n+    $font->seek($table_offset + $table_length);\n+  }\n+\n+  /**\n+   * @return File\n+   */\n+  function getFont() {\n+    return $this->font;\n+  }\n+\n+  function startRead() {\n+    $this->font->seek($this->offset);\n+  }\n+\n+  function endRead() {\n+    //\n+  }\n+\n+  function startWrite() {\n+    $this->font->seek($this->offset);\n+  }\n+\n+  function endWrite() {\n+    //\n+  }\n+}\n+"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Table.php",
          "status": "added",
          "additions": 93,
          "deletions": 0,
          "patch": "@@ -0,0 +1,93 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+namespace FontLib\\Table;\n+\n+use FontLib\\TrueType\\File;\n+use FontLib\\Font;\n+use FontLib\\BinaryStream;\n+\n+/**\n+ * Generic font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class Table extends BinaryStream {\n+  /**\n+   * @var DirectoryEntry\n+   */\n+  protected $entry;\n+  protected $def = array();\n+\n+  public $data;\n+\n+  final public function __construct(DirectoryEntry $entry) {\n+    $this->entry = $entry;\n+    $entry->setTable($this);\n+  }\n+\n+  /**\n+   * @return File\n+   */\n+  public function getFont() {\n+    return $this->entry->getFont();\n+  }\n+\n+  protected function _encode() {\n+    if (empty($this->data)) {\n+      Font::d(\"  >> Table is empty\");\n+\n+      return 0;\n+    }\n+\n+    return $this->getFont()->pack($this->def, $this->data);\n+  }\n+\n+  protected function _parse() {\n+    $this->data = $this->getFont()->unpack($this->def);\n+  }\n+\n+  protected function _parseRaw() {\n+    $this->data = $this->getFont()->read($this->entry->length);\n+  }\n+\n+  protected function _encodeRaw() {\n+    return $this->getFont()->write($this->data, $this->entry->length);\n+  }\n+\n+  public function toHTML() {\n+    return \"<pre>\" . var_export($this->data, true) . \"</pre>\";\n+  }\n+\n+  final public function encode() {\n+    $this->entry->startWrite();\n+\n+    if (false && empty($this->def)) {\n+      $length = $this->_encodeRaw();\n+    }\n+    else {\n+      $length = $this->_encode();\n+    }\n+\n+    $this->entry->endWrite();\n+\n+    return $length;\n+  }\n+\n+  final public function parse() {\n+    $this->entry->startRead();\n+\n+    if (false && empty($this->def)) {\n+      $this->_parseRaw();\n+    }\n+    else {\n+      $this->_parse();\n+    }\n+\n+    $this->entry->endRead();\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/cmap.php",
          "status": "added",
          "additions": 298,
          "deletions": 0,
          "patch": "@@ -0,0 +1,298 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+\n+/**\n+ * `cmap` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class cmap extends Table {\n+  private static $header_format = array(\n+    \"version\"         => self::uint16,\n+    \"numberSubtables\" => self::uint16,\n+  );\n+\n+  private static $subtable_header_format = array(\n+    \"platformID\"         => self::uint16,\n+    \"platformSpecificID\" => self::uint16,\n+    \"offset\"             => self::uint32,\n+  );\n+\n+  private static $subtable_v4_format = array(\n+    \"length\"        => self::uint16,\n+    \"language\"      => self::uint16,\n+    \"segCountX2\"    => self::uint16,\n+    \"searchRange\"   => self::uint16,\n+    \"entrySelector\" => self::uint16,\n+    \"rangeShift\"    => self::uint16,\n+  );\n+\n+  private static $subtable_v12_format = array(\n+    \"length\"        => self::uint32,\n+    \"language\"      => self::uint32,\n+    \"ngroups\"    => self::uint32\n+  );\n+\n+  protected function _parse() {\n+    $font = $this->getFont();\n+\n+    $cmap_offset = $font->pos();\n+\n+    $data = $font->unpack(self::$header_format);\n+\n+    $subtables = array();\n+    for ($i = 0; $i < $data[\"numberSubtables\"]; $i++) {\n+      $subtables[] = $font->unpack(self::$subtable_header_format);\n+    }\n+\n+    $data[\"subtables\"] = $subtables;\n+\n+    foreach ($data[\"subtables\"] as $i => &$subtable) {\n+      $font->seek($cmap_offset + $subtable[\"offset\"]);\n+\n+      $subtable[\"format\"] = $font->readUInt16();\n+\n+      // @todo Only CMAP version 4 and 12\n+      if (($subtable[\"format\"] != 4) && ($subtable[\"format\"] != 12)) {\n+        unset($data[\"subtables\"][$i]);\n+        $data[\"numberSubtables\"]--;\n+        continue;\n+      }\n+\n+      if ($subtable[\"format\"] == 12) {\n+\n+        $font->readUInt16();\n+\n+        $subtable += $font->unpack(self::$subtable_v12_format);\n+\n+        $glyphIndexArray = array();\n+        $endCodes = array();\n+        $startCodes = array();\n+\n+        for ($p = 0; $p < $subtable['ngroups']; $p++) {\n+\n+          $startCode = $startCodes[] = $font->readUInt32();\n+          $endCode = $endCodes[] = $font->readUInt32();\n+          $startGlyphCode = $font->readUInt32();\n+\n+          for ($c = $startCode; $c <= $endCode; $c++) {\n+            $glyphIndexArray[$c] = $startGlyphCode;\n+            $startGlyphCode++;\n+          }\n+        }\n+\n+        $subtable += array(\n+          \"startCode\" => $startCodes,\n+          \"endCode\" => $endCodes,\n+          \"glyphIndexArray\" => $glyphIndexArray,\n+        );\n+\n+      }\n+      else if ($subtable[\"format\"] == 4) {\n+\n+        $subtable += $font->unpack(self::$subtable_v4_format);\n+\n+        $segCount             = $subtable[\"segCountX2\"] / 2;\n+        $subtable[\"segCount\"] = $segCount;\n+\n+        $endCode = $font->readUInt16Many($segCount);\n+\n+        $font->readUInt16(); // reservedPad\n+\n+        $startCode = $font->readUInt16Many($segCount);\n+        $idDelta   = $font->readInt16Many($segCount);\n+\n+        $ro_start      = $font->pos();\n+        $idRangeOffset = $font->readUInt16Many($segCount);\n+\n+        $glyphIndexArray = array();\n+        for ($i = 0; $i < $segCount; $i++) {\n+          $c1 = $startCode[$i];\n+          $c2 = $endCode[$i];\n+          $d  = $idDelta[$i];\n+          $ro = $idRangeOffset[$i];\n+\n+          if ($ro > 0) {\n+            $font->seek($subtable[\"offset\"] + 2 * $i + $ro);\n+          }\n+\n+          for ($c = $c1; $c <= $c2; $c++) {\n+            if ($ro == 0) {\n+              $gid = ($c + $d) & 0xFFFF;\n+            }\n+            else {\n+              $offset = ($c - $c1) * 2 + $ro;\n+              $offset = $ro_start + 2 * $i + $offset;\n+\n+              $font->seek($offset);\n+              $gid = $font->readUInt16();\n+\n+              if ($gid != 0) {\n+                $gid = ($gid + $d) & 0xFFFF;\n+              }\n+            }\n+\n+            if ($gid > 0) {\n+              $glyphIndexArray[$c] = $gid;\n+            }\n+          }\n+        }\n+\n+        $subtable += array(\n+          \"endCode\"         => $endCode,\n+          \"startCode\"       => $startCode,\n+          \"idDelta\"         => $idDelta,\n+          \"idRangeOffset\"   => $idRangeOffset,\n+          \"glyphIndexArray\" => $glyphIndexArray,\n+        );\n+      }\n+    }\n+\n+    $this->data = $data;\n+  }\n+\n+  function _encode() {\n+    $font = $this->getFont();\n+\n+    $subset          = $font->getSubset();\n+    $glyphIndexArray = $font->getUnicodeCharMap();\n+\n+    $newGlyphIndexArray = array();\n+    foreach ($glyphIndexArray as $code => $gid) {\n+      $new_gid = array_search($gid, $subset);\n+      if ($new_gid !== false) {\n+        $newGlyphIndexArray[$code] = $new_gid;\n+      }\n+    }\n+\n+    ksort($newGlyphIndexArray); // Sort by char code\n+\n+    $segments = array();\n+\n+    $i        = -1;\n+    $prevCode = 0xFFFF;\n+    $prevGid  = 0xFFFF;\n+\n+    foreach ($newGlyphIndexArray as $code => $gid) {\n+      if (\n+        $prevCode + 1 != $code ||\n+        $prevGid + 1 != $gid\n+      ) {\n+        $i++;\n+        $segments[$i] = array();\n+      }\n+\n+      $segments[$i][] = array($code, $gid);\n+\n+      $prevCode = $code;\n+      $prevGid  = $gid;\n+    }\n+\n+    $segments[][] = array(0xFFFF, 0xFFFF);\n+\n+    $startCode = array();\n+    $endCode   = array();\n+    $idDelta   = array();\n+\n+    foreach ($segments as $codes) {\n+      $start = reset($codes);\n+      $end   = end($codes);\n+\n+      $startCode[] = $start[0];\n+      $endCode[]   = $end[0];\n+      $idDelta[]   = $start[1] - $start[0];\n+    }\n+\n+    $segCount      = count($startCode);\n+    $idRangeOffset = array_fill(0, $segCount, 0);\n+\n+    $searchRange   = 1;\n+    $entrySelector = 0;\n+    while ($searchRange * 2 <= $segCount) {\n+      $searchRange *= 2;\n+      $entrySelector++;\n+    }\n+    $searchRange *= 2;\n+    $rangeShift = $segCount * 2 - $searchRange;\n+\n+    $subtables = array(\n+      array(\n+        // header\n+        \"platformID\"         => 3, // Unicode\n+        \"platformSpecificID\" => 1,\n+        \"offset\"             => null,\n+\n+        // subtable\n+        \"format\"             => 4,\n+        \"length\"             => null,\n+        \"language\"           => 0,\n+        \"segCount\"           => $segCount,\n+        \"segCountX2\"         => $segCount * 2,\n+        \"searchRange\"        => $searchRange,\n+        \"entrySelector\"      => $entrySelector,\n+        \"rangeShift\"         => $rangeShift,\n+        \"startCode\"          => $startCode,\n+        \"endCode\"            => $endCode,\n+        \"idDelta\"            => $idDelta,\n+        \"idRangeOffset\"      => $idRangeOffset,\n+        \"glyphIndexArray\"    => $newGlyphIndexArray,\n+      )\n+    );\n+\n+    $data = array(\n+      \"version\"         => 0,\n+      \"numberSubtables\" => count($subtables),\n+      \"subtables\"       => $subtables,\n+    );\n+\n+    $length = $font->pack(self::$header_format, $data);\n+\n+    $subtable_headers_size   = $data[\"numberSubtables\"] * 8; // size of self::$subtable_header_format\n+    $subtable_headers_offset = $font->pos();\n+\n+    $length += $font->write(str_repeat(\"\\0\", $subtable_headers_size), $subtable_headers_size);\n+\n+    // write subtables data\n+    foreach ($data[\"subtables\"] as $i => $subtable) {\n+      $length_before                   = $length;\n+      $data[\"subtables\"][$i][\"offset\"] = $length;\n+\n+      $length += $font->writeUInt16($subtable[\"format\"]);\n+\n+      $before_subheader = $font->pos();\n+      $length += $font->pack(self::$subtable_v4_format, $subtable);\n+\n+      $segCount = $subtable[\"segCount\"];\n+      $length += $font->w(array(self::uint16, $segCount), $subtable[\"endCode\"]);\n+      $length += $font->writeUInt16(0); // reservedPad\n+      $length += $font->w(array(self::uint16, $segCount), $subtable[\"startCode\"]);\n+      $length += $font->w(array(self::int16, $segCount), $subtable[\"idDelta\"]);\n+      $length += $font->w(array(self::uint16, $segCount), $subtable[\"idRangeOffset\"]);\n+      $length += $font->w(array(self::uint16, $segCount), array_values($subtable[\"glyphIndexArray\"]));\n+\n+      $after_subtable = $font->pos();\n+\n+      $subtable[\"length\"] = $length - $length_before;\n+      $font->seek($before_subheader);\n+      $length += $font->pack(self::$subtable_v4_format, $subtable);\n+\n+      $font->seek($after_subtable);\n+    }\n+\n+    // write subtables headers\n+    $font->seek($subtable_headers_offset);\n+    foreach ($data[\"subtables\"] as $subtable) {\n+      $font->pack(self::$subtable_header_format, $subtable);\n+    }\n+\n+    return $length;\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/glyf.php",
          "status": "added",
          "additions": 154,
          "deletions": 0,
          "patch": "@@ -0,0 +1,154 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+\n+use FontLib\\Table\\Table;\n+use FontLib\\Glyph\\Outline;\n+use FontLib\\Glyph\\OutlineSimple;\n+\n+/**\n+ * `glyf` font table.\n+ *\n+ * @package php-font-lib\n+ * @property Outline[] $data\n+ */\n+class glyf extends Table {\n+  protected function _parse() {\n+    $font   = $this->getFont();\n+    $offset = $font->pos();\n+\n+    $loca      = $font->getData(\"loca\");\n+    $real_loca = array_slice($loca, 0, -1); // Not the last dummy loca entry\n+\n+    $data = array();\n+\n+    foreach ($real_loca as $gid => $location) {\n+      $_offset    = $offset + $loca[$gid];\n+      $_size      = $loca[$gid + 1] - $loca[$gid];\n+      $data[$gid] = Outline::init($this, $_offset, $_size, $font);\n+    }\n+\n+    $this->data = $data;\n+  }\n+\n+  public function getGlyphIDs($gids = array()) {\n+    $glyphIDs = array();\n+\n+    foreach ($gids as $_gid) {\n+      $_glyph   = $this->data[$_gid];\n+      $glyphIDs = array_merge($glyphIDs, $_glyph->getGlyphIDs());\n+    }\n+\n+    return array_unique(array_merge($gids, $glyphIDs));\n+  }\n+\n+  public function toHTML() {\n+    $max  = 160;\n+    $font = $this->getFont();\n+\n+    $head      = $font->getData(\"head\");\n+    $head_json = json_encode($head);\n+\n+    $os2      = $font->getData(\"OS/2\");\n+    $os2_json = json_encode($os2);\n+\n+    $hmtx      = $font->getData(\"hmtx\");\n+    $hmtx_json = json_encode($hmtx);\n+\n+    $names           = $font->getData(\"post\", \"names\");\n+    $glyphIndexArray = array_flip($font->getUnicodeCharMap());\n+\n+    $width  = (abs($head[\"xMin\"]) + $head[\"xMax\"]);\n+    $height = (abs($head[\"yMin\"]) + $head[\"yMax\"]);\n+\n+    $ratio = 1;\n+    if ($width > $max || $height > $max) {\n+      $ratio  = max($width, $height) / $max;\n+      $width  = round($width / $ratio);\n+      $height = round($height / $ratio);\n+    }\n+\n+    $n = 500;\n+\n+    $s = \"<h3>\" . \"Only the first $n simple glyphs are shown (\" . count($this->data) . \" total)\n+    <div class='glyph-view simple'>Simple glyph</div>\n+    <div class='glyph-view composite'>Composite glyph</div>\n+    Zoom: <input type='range' value='100' max='400' onchange='Glyph.resize(this.value)' />\n+    </h3>\n+    <script>\n+      Glyph.ratio  = $ratio;\n+      Glyph.head   = $head_json;\n+      Glyph.os2    = $os2_json;\n+      Glyph.hmtx   = $hmtx_json;\n+      Glyph.width  = $width;\n+      Glyph.height = $height;\n+    </script>\";\n+\n+    foreach ($this->data as $g => $glyph) {\n+      if ($n-- <= 0) {\n+        break;\n+      }\n+\n+      $glyph->parseData();\n+\n+      $shape      = array(\n+        \"SVGContours\" => $glyph->getSVGContours(),\n+        \"xMin\"        => $glyph->xMin,\n+        \"yMin\"        => $glyph->yMin,\n+        \"xMax\"        => $glyph->xMax,\n+        \"yMax\"        => $glyph->yMax,\n+      );\n+      $shape_json = json_encode($shape);\n+\n+      $type = ($glyph instanceof OutlineSimple ? \"simple\" : \"composite\");\n+      $char = isset($glyphIndexArray[$g]) ? $glyphIndexArray[$g] : 0;\n+      $name = isset($names[$g]) ? $names[$g] : sprintf(\"uni%04x\", $char);\n+      $char = $char ? \"&#{$glyphIndexArray[$g]};\" : \"\";\n+\n+      $s .= \"<div class='glyph-view $type' id='glyph-$g'>\n+              <span class='glyph-id'>$g</span>\n+              <span class='char'>$char</span>\n+              <span class='char-name'>$name</span>\n+              \";\n+\n+      if ($type == \"composite\") {\n+        foreach ($glyph->getGlyphIDs() as $_id) {\n+          $s .= \"<a href='#glyph-$_id' class='glyph-component-id'>$_id</a> \";\n+        }\n+      }\n+\n+      $s .= \"<br />\n+            <canvas width='$width' height='$height' id='glyph-canvas-$g'></canvas>\n+            </div>\n+            <script>Glyph.glyphs.push([$g,$shape_json]);</script>\";\n+    }\n+\n+    return $s;\n+  }\n+\n+\n+  protected function _encode() {\n+    $font   = $this->getFont();\n+    $subset = $font->getSubset();\n+    $data   = $this->data;\n+\n+    $loca = array();\n+\n+    $length = 0;\n+    foreach ($subset as $gid) {\n+      $loca[] = $length;\n+      $length += $data[$gid]->encode();\n+    }\n+\n+    $loca[]                             = $length; // dummy loca\n+    $font->getTableObject(\"loca\")->data = $loca;\n+\n+    return $length;\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/head.php",
          "status": "added",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -0,0 +1,46 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+use Exception;\n+\n+/**\n+ * `head` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class head extends Table {\n+  protected $def = array(\n+    \"tableVersion\"       => self::Fixed,\n+    \"fontRevision\"       => self::Fixed,\n+    \"checkSumAdjustment\" => self::uint32,\n+    \"magicNumber\"        => self::uint32,\n+    \"flags\"              => self::uint16,\n+    \"unitsPerEm\"         => self::uint16,\n+    \"created\"            => self::longDateTime,\n+    \"modified\"           => self::longDateTime,\n+    \"xMin\"               => self::FWord,\n+    \"yMin\"               => self::FWord,\n+    \"xMax\"               => self::FWord,\n+    \"yMax\"               => self::FWord,\n+    \"macStyle\"           => self::uint16,\n+    \"lowestRecPPEM\"      => self::uint16,\n+    \"fontDirectionHint\"  => self::int16,\n+    \"indexToLocFormat\"   => self::int16,\n+    \"glyphDataFormat\"    => self::int16,\n+  );\n+\n+  protected function _parse() {\n+    parent::_parse();\n+\n+    if ($this->data[\"magicNumber\"] != 0x5F0F3CF5) {\n+      throw new Exception(\"Incorrect magic number (\" . dechex($this->data[\"magicNumber\"]) . \")\");\n+    }\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/hhea.php",
          "status": "added",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -0,0 +1,44 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+\n+/**\n+ * `hhea` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class hhea extends Table {\n+  protected $def = array(\n+    \"version\"             => self::Fixed,\n+    \"ascent\"              => self::FWord,\n+    \"descent\"             => self::FWord,\n+    \"lineGap\"             => self::FWord,\n+    \"advanceWidthMax\"     => self::uFWord,\n+    \"minLeftSideBearing\"  => self::FWord,\n+    \"minRightSideBearing\" => self::FWord,\n+    \"xMaxExtent\"          => self::FWord,\n+    \"caretSlopeRise\"      => self::int16,\n+    \"caretSlopeRun\"       => self::int16,\n+    \"caretOffset\"         => self::FWord,\n+    self::int16,\n+    self::int16,\n+    self::int16,\n+    self::int16,\n+    \"metricDataFormat\"    => self::int16,\n+    \"numOfLongHorMetrics\" => self::uint16,\n+  );\n+\n+  function _encode() {\n+    $font                              = $this->getFont();\n+    $this->data[\"numOfLongHorMetrics\"] = count($font->getSubset());\n+\n+    return parent::_encode();\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/hmtx.php",
          "status": "added",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -0,0 +1,59 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+\n+/**\n+ * `hmtx` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class hmtx extends Table {\n+  protected function _parse() {\n+    $font   = $this->getFont();\n+    $offset = $font->pos();\n+\n+    $numOfLongHorMetrics = $font->getData(\"hhea\", \"numOfLongHorMetrics\");\n+    $numGlyphs           = $font->getData(\"maxp\", \"numGlyphs\");\n+\n+    $font->seek($offset);\n+\n+    $data = array();\n+    $metrics = $font->readUInt16Many($numOfLongHorMetrics * 2);\n+    for ($gid = 0, $mid = 0; $gid < $numOfLongHorMetrics; $gid++) {\n+      $advanceWidth    = isset($metrics[$mid]) ? $metrics[$mid] : 0;\n+      $mid += 1;\n+      $leftSideBearing = isset($metrics[$mid]) ? $metrics[$mid] : 0;\n+      $mid += 1;\n+      $data[$gid]      = array($advanceWidth, $leftSideBearing);\n+    }\n+\n+    if ($numOfLongHorMetrics < $numGlyphs) {\n+      $lastWidth = end($data);\n+      $data      = array_pad($data, $numGlyphs, $lastWidth);\n+    }\n+\n+    $this->data = $data;\n+  }\n+\n+  protected function _encode() {\n+    $font   = $this->getFont();\n+    $subset = $font->getSubset();\n+    $data   = $this->data;\n+\n+    $length = 0;\n+\n+    foreach ($subset as $gid) {\n+      $length += $font->writeUInt16($data[$gid][0]);\n+      $length += $font->writeUInt16($data[$gid][1]);\n+    }\n+\n+    return $length;\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/kern.php",
          "status": "added",
          "additions": 80,
          "deletions": 0,
          "patch": "@@ -0,0 +1,80 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+\n+/**\n+ * `kern` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class kern extends Table {\n+  protected function _parse() {\n+    $font = $this->getFont();\n+\n+    $data = $font->unpack(array(\n+      \"version\"         => self::uint16,\n+      \"nTables\"         => self::uint16,\n+\n+      // only the first subtable will be parsed\n+      \"subtableVersion\" => self::uint16,\n+      \"length\"          => self::uint16,\n+      \"coverage\"        => self::uint16,\n+    ));\n+\n+    $data[\"format\"] = ($data[\"coverage\"] >> 8);\n+\n+    $subtable = array();\n+\n+    switch ($data[\"format\"]) {\n+      case 0:\n+        $subtable = $font->unpack(array(\n+          \"nPairs\"        => self::uint16,\n+          \"searchRange\"   => self::uint16,\n+          \"entrySelector\" => self::uint16,\n+          \"rangeShift\"    => self::uint16,\n+        ));\n+\n+        $pairs = array();\n+        $tree  = array();\n+\n+        $values = $font->readUInt16Many($subtable[\"nPairs\"] * 3);\n+        for ($i = 0, $idx = 0; $i < $subtable[\"nPairs\"]; $i++) {\n+          $left  = $values[$idx++];\n+          $right = $values[$idx++];\n+          $value = $values[$idx++];\n+\n+          if ($value >= 0x8000) {\n+            $value -= 0x10000;\n+          }\n+\n+          $pairs[] = array(\n+            \"left\"  => $left,\n+            \"right\" => $right,\n+            \"value\" => $value,\n+          );\n+\n+          $tree[$left][$right] = $value;\n+        }\n+\n+        //$subtable[\"pairs\"] = $pairs;\n+        $subtable[\"tree\"] = $tree;\n+        break;\n+\n+      case 1:\n+      case 2:\n+      case 3:\n+        break;\n+    }\n+\n+    $data[\"subtable\"] = $subtable;\n+\n+    $this->data = $data;\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/loca.php",
          "status": "added",
          "additions": 80,
          "deletions": 0,
          "patch": "@@ -0,0 +1,80 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+\n+/**\n+ * `loca` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class loca extends Table {\n+  protected function _parse() {\n+    $font   = $this->getFont();\n+    $offset = $font->pos();\n+\n+    $indexToLocFormat = $font->getData(\"head\", \"indexToLocFormat\");\n+    $numGlyphs        = $font->getData(\"maxp\", \"numGlyphs\");\n+\n+    $font->seek($offset);\n+\n+    $data = array();\n+\n+    // 2 bytes\n+    if ($indexToLocFormat == 0) {\n+      $d   = $font->read(($numGlyphs + 1) * 2);\n+      $loc = unpack(\"n*\", $d);\n+\n+      for ($i = 0; $i <= $numGlyphs; $i++) {\n+        $data[] = isset($loc[$i + 1]) ?  $loc[$i + 1] * 2 : 0;\n+      }\n+    }\n+\n+    // 4 bytes\n+    else {\n+      if ($indexToLocFormat == 1) {\n+        $d   = $font->read(($numGlyphs + 1) * 4);\n+        $loc = unpack(\"N*\", $d);\n+\n+        for ($i = 0; $i <= $numGlyphs; $i++) {\n+          $data[] = isset($loc[$i + 1]) ? $loc[$i + 1] : 0;\n+        }\n+      }\n+    }\n+\n+    $this->data = $data;\n+  }\n+\n+  function _encode() {\n+    $font = $this->getFont();\n+    $data = $this->data;\n+\n+    $indexToLocFormat = $font->getData(\"head\", \"indexToLocFormat\");\n+    $numGlyphs        = $font->getData(\"maxp\", \"numGlyphs\");\n+    $length           = 0;\n+\n+    // 2 bytes\n+    if ($indexToLocFormat == 0) {\n+      for ($i = 0; $i <= $numGlyphs; $i++) {\n+        $length += $font->writeUInt16($data[$i] / 2);\n+      }\n+    }\n+\n+    // 4 bytes\n+    else {\n+      if ($indexToLocFormat == 1) {\n+        for ($i = 0; $i <= $numGlyphs; $i++) {\n+          $length += $font->writeUInt32($data[$i]);\n+        }\n+      }\n+    }\n+\n+    return $length;\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/maxp.php",
          "status": "added",
          "additions": 42,
          "deletions": 0,
          "patch": "@@ -0,0 +1,42 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+\n+/**\n+ * `maxp` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class maxp extends Table {\n+  protected $def = array(\n+    \"version\"               => self::Fixed,\n+    \"numGlyphs\"             => self::uint16,\n+    \"maxPoints\"             => self::uint16,\n+    \"maxContours\"           => self::uint16,\n+    \"maxComponentPoints\"    => self::uint16,\n+    \"maxComponentContours\"  => self::uint16,\n+    \"maxZones\"              => self::uint16,\n+    \"maxTwilightPoints\"     => self::uint16,\n+    \"maxStorage\"            => self::uint16,\n+    \"maxFunctionDefs\"       => self::uint16,\n+    \"maxInstructionDefs\"    => self::uint16,\n+    \"maxStackElements\"      => self::uint16,\n+    \"maxSizeOfInstructions\" => self::uint16,\n+    \"maxComponentElements\"  => self::uint16,\n+    \"maxComponentDepth\"     => self::uint16,\n+  );\n+\n+  function _encode() {\n+    $font                    = $this->getFont();\n+    $this->data[\"numGlyphs\"] = count($font->getSubset());\n+\n+    return parent::_encode();\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/name.php",
          "status": "added",
          "additions": 193,
          "deletions": 0,
          "patch": "@@ -0,0 +1,193 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+\n+use FontLib\\Table\\Table;\n+use FontLib\\Font;\n+\n+/**\n+ * `name` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class name extends Table {\n+  private static $header_format = array(\n+    \"format\"       => self::uint16,\n+    \"count\"        => self::uint16,\n+    \"stringOffset\" => self::uint16,\n+  );\n+\n+  const NAME_COPYRIGHT          = 0;\n+  const NAME_NAME               = 1;\n+  const NAME_SUBFAMILY          = 2;\n+  const NAME_SUBFAMILY_ID       = 3;\n+  const NAME_FULL_NAME          = 4;\n+  const NAME_VERSION            = 5;\n+  const NAME_POSTSCRIPT_NAME    = 6;\n+  const NAME_TRADEMARK          = 7;\n+  const NAME_MANUFACTURER       = 8;\n+  const NAME_DESIGNER           = 9;\n+  const NAME_DESCRIPTION        = 10;\n+  const NAME_VENDOR_URL         = 11;\n+  const NAME_DESIGNER_URL       = 12;\n+  const NAME_LICENSE            = 13;\n+  const NAME_LICENSE_URL        = 14;\n+  const NAME_PREFERRE_FAMILY    = 16;\n+  const NAME_PREFERRE_SUBFAMILY = 17;\n+  const NAME_COMPAT_FULL_NAME   = 18;\n+  const NAME_SAMPLE_TEXT        = 19;\n+\n+  static $nameIdCodes = array(\n+    0  => \"Copyright\",\n+    1  => \"FontName\",\n+    2  => \"FontSubfamily\",\n+    3  => \"UniqueID\",\n+    4  => \"FullName\",\n+    5  => \"Version\",\n+    6  => \"PostScriptName\",\n+    7  => \"Trademark\",\n+    8  => \"Manufacturer\",\n+    9  => \"Designer\",\n+    10 => \"Description\",\n+    11 => \"FontVendorURL\",\n+    12 => \"FontDesignerURL\",\n+    13 => \"LicenseDescription\",\n+    14 => \"LicenseURL\",\n+    // 15\n+    16 => \"PreferredFamily\",\n+    17 => \"PreferredSubfamily\",\n+    18 => \"CompatibleFullName\",\n+    19 => \"SampleText\",\n+  );\n+\n+  static $platforms = array(\n+    0 => \"Unicode\",\n+    1 => \"Macintosh\",\n+    // 2 =>  Reserved\n+    3 => \"Microsoft\",\n+  );\n+\n+  static $platformSpecific = array(\n+    // Unicode\n+    0 => array(\n+      0 => \"Default semantics\",\n+      1 => \"Version 1.1 semantics\",\n+      2 => \"ISO 10646 1993 semantics (deprecated)\",\n+      3 => \"Unicode 2.0 or later semantics\",\n+    ),\n+\n+    // Macintosh\n+    1 => array(\n+      0  => \"Roman\",\n+      1  => \"Japanese\",\n+      2  => \"Traditional Chinese\",\n+      3  => \"Korean\",\n+      4  => \"Arabic\",\n+      5  => \"Hebrew\",\n+      6  => \"Greek\",\n+      7  => \"Russian\",\n+      8  => \"RSymbol\",\n+      9  => \"Devanagari\",\n+      10 => \"Gurmukhi\",\n+      11 => \"Gujarati\",\n+      12 => \"Oriya\",\n+      13 => \"Bengali\",\n+      14 => \"Tamil\",\n+      15 => \"Telugu\",\n+      16 => \"Kannada\",\n+      17 => \"Malayalam\",\n+      18 => \"Sinhalese\",\n+      19 => \"Burmese\",\n+      20 => \"Khmer\",\n+      21 => \"Thai\",\n+      22 => \"Laotian\",\n+      23 => \"Georgian\",\n+      24 => \"Armenian\",\n+      25 => \"Simplified Chinese\",\n+      26 => \"Tibetan\",\n+      27 => \"Mongolian\",\n+      28 => \"Geez\",\n+      29 => \"Slavic\",\n+      30 => \"Vietnamese\",\n+      31 => \"Sindhi\",\n+    ),\n+\n+    // Microsoft\n+    3 => array(\n+      0  => \"Symbol\",\n+      1  => \"Unicode BMP (UCS-2)\",\n+      2  => \"ShiftJIS\",\n+      3  => \"PRC\",\n+      4  => \"Big5\",\n+      5  => \"Wansung\",\n+      6  => \"Johab\",\n+      //  7 => Reserved\n+      //  8 => Reserved\n+      //  9 => Reserved\n+      10 => \"Unicode UCS-4\",\n+    ),\n+  );\n+\n+  protected function _parse() {\n+    $font = $this->getFont();\n+\n+    $tableOffset = $font->pos();\n+\n+    $data = $font->unpack(self::$header_format);\n+\n+    $records = array();\n+    for ($i = 0; $i < $data[\"count\"]; $i++) {\n+      $record      = new nameRecord();\n+      $record_data = $font->unpack(nameRecord::$format);\n+      $record->map($record_data);\n+\n+      $records[] = $record;\n+    }\n+\n+    $names = array();\n+    foreach ($records as $record) {\n+      $font->seek($tableOffset + $data[\"stringOffset\"] + $record->offset);\n+      $s                      = $font->read($record->length);\n+      $record->string         = Font::UTF16ToUTF8($s);\n+      $names[$record->nameID] = $record;\n+    }\n+\n+    $data[\"records\"] = $names;\n+\n+    $this->data = $data;\n+  }\n+\n+  protected function _encode() {\n+    $font = $this->getFont();\n+\n+    /** @var nameRecord[] $records */\n+    $records       = $this->data[\"records\"];\n+    $count_records = count($records);\n+\n+    $this->data[\"count\"]        = $count_records;\n+    $this->data[\"stringOffset\"] = 6 + $count_records * 12; // 6 => uint16 * 3, 12 => sizeof self::$record_format\n+\n+    $length = $font->pack(self::$header_format, $this->data);\n+\n+    $offset = 0;\n+    foreach ($records as $record) {\n+      $record->length = mb_strlen($record->getUTF16(), \"8bit\");\n+      $record->offset = $offset;\n+      $offset += $record->length;\n+      $length += $font->pack(nameRecord::$format, (array)$record);\n+    }\n+\n+    foreach ($records as $record) {\n+      $str = $record->getUTF16();\n+      $length += $font->write($str, mb_strlen($str, \"8bit\"));\n+    }\n+\n+    return $length;\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/nameRecord.php",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+namespace FontLib\\Table\\Type;\n+\n+use FontLib\\Font;\n+use FontLib\\BinaryStream;\n+\n+/**\n+ * Font table name record.\n+ *\n+ * @package php-font-lib\n+ */\n+class nameRecord extends BinaryStream {\n+  public $platformID;\n+  public $platformSpecificID;\n+  public $languageID;\n+  public $nameID;\n+  public $length;\n+  public $offset;\n+  public $string;\n+\n+  public static $format = array(\n+    \"platformID\"         => self::uint16,\n+    \"platformSpecificID\" => self::uint16,\n+    \"languageID\"         => self::uint16,\n+    \"nameID\"             => self::uint16,\n+    \"length\"             => self::uint16,\n+    \"offset\"             => self::uint16,\n+  );\n+\n+  public function map($data) {\n+    foreach ($data as $key => $value) {\n+      $this->$key = $value;\n+    }\n+  }\n+\n+  public function getUTF8() {\n+    return $this->string;\n+  }\n+\n+  public function getUTF16() {\n+    return Font::UTF8ToUTF16($this->string);\n+  }\n+\n+  function __toString() {\n+    return $this->string;\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/os2.php",
          "status": "added",
          "additions": 47,
          "deletions": 0,
          "patch": "@@ -0,0 +1,47 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+\n+/**\n+ * `OS/2` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class os2 extends Table {\n+  protected $def = array(\n+    \"version\"             => self::uint16,\n+    \"xAvgCharWidth\"       => self::int16,\n+    \"usWeightClass\"       => self::uint16,\n+    \"usWidthClass\"        => self::uint16,\n+    \"fsType\"              => self::int16,\n+    \"ySubscriptXSize\"     => self::int16,\n+    \"ySubscriptYSize\"     => self::int16,\n+    \"ySubscriptXOffset\"   => self::int16,\n+    \"ySubscriptYOffset\"   => self::int16,\n+    \"ySuperscriptXSize\"   => self::int16,\n+    \"ySuperscriptYSize\"   => self::int16,\n+    \"ySuperscriptXOffset\" => self::int16,\n+    \"ySuperscriptYOffset\" => self::int16,\n+    \"yStrikeoutSize\"      => self::int16,\n+    \"yStrikeoutPosition\"  => self::int16,\n+    \"sFamilyClass\"        => self::int16,\n+    \"panose\"              => array(self::uint8, 10),\n+    \"ulCharRange\"         => array(self::uint32, 4),\n+    \"achVendID\"           => array(self::char, 4),\n+    \"fsSelection\"         => self::uint16,\n+    \"fsFirstCharIndex\"    => self::uint16,\n+    \"fsLastCharIndex\"     => self::uint16,\n+    \"typoAscender\"        => self::int16,\n+    \"typoDescender\"       => self::int16,\n+    \"typoLineGap\"         => self::int16,\n+    \"winAscent\"           => self::int16,\n+    \"winDescent\"          => self::int16,\n+  );\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/Table/Type/post.php",
          "status": "added",
          "additions": 143,
          "deletions": 0,
          "patch": "@@ -0,0 +1,143 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\Table\\Type;\n+use FontLib\\Table\\Table;\n+use FontLib\\TrueType\\File;\n+\n+/**\n+ * `post` font table.\n+ *\n+ * @package php-font-lib\n+ */\n+class post extends Table {\n+  protected $def = array(\n+    \"format\"             => self::Fixed,\n+    \"italicAngle\"        => self::Fixed,\n+    \"underlinePosition\"  => self::FWord,\n+    \"underlineThickness\" => self::FWord,\n+    \"isFixedPitch\"       => self::uint32,\n+    \"minMemType42\"       => self::uint32,\n+    \"maxMemType42\"       => self::uint32,\n+    \"minMemType1\"        => self::uint32,\n+    \"maxMemType1\"        => self::uint32,\n+  );\n+\n+  protected function _parse() {\n+    $font = $this->getFont();\n+    $data = $font->unpack($this->def);\n+\n+    $names = array();\n+\n+    switch ($data[\"format\"]) {\n+      case 1:\n+        $names = File::$macCharNames;\n+        break;\n+\n+      case 2:\n+        $data[\"numberOfGlyphs\"] = $font->readUInt16();\n+\n+        $glyphNameIndex = $font->readUInt16Many($data[\"numberOfGlyphs\"]);\n+\n+        $data[\"glyphNameIndex\"] = $glyphNameIndex;\n+\n+        $namesPascal = array();\n+        for ($i = 0; $i < $data[\"numberOfGlyphs\"]; $i++) {\n+          $len           = $font->readUInt8();\n+          $namesPascal[] = $font->read($len);\n+        }\n+\n+        foreach ($glyphNameIndex as $g => $index) {\n+          if ($index < 258) {\n+            $names[$g] = File::$macCharNames[$index];\n+          }\n+          else {\n+            if (array_key_exists($index - 258, $namesPascal)) {\n+              $names[$g] = $namesPascal[$index - 258];\n+            }\n+          }\n+        }\n+\n+        break;\n+\n+      case 2.5:\n+        // TODO\n+        break;\n+\n+      case 3:\n+        // nothing\n+        break;\n+\n+      case 4:\n+        // TODO\n+        break;\n+    }\n+\n+    $data[\"names\"] = $names;\n+\n+    $this->data = $data;\n+  }\n+\n+  function _encode() {\n+    $font           = $this->getFont();\n+    $data           = $this->data;\n+    $data[\"format\"] = 3;\n+\n+    $length = $font->pack($this->def, $data);\n+\n+    return $length;\n+    /*\n+    $subset = $font->getSubset();\n+\n+    switch($data[\"format\"]) {\n+      case 1:\n+        // nothing to do\n+      break;\n+\n+      case 2:\n+        $old_names = $data[\"names\"];\n+\n+        $glyphNameIndex = range(0, count($subset));\n+\n+        $names = array();\n+        foreach($subset as $gid) {\n+          $names[] = $data[\"names\"][$data[\"glyphNameIndex\"][$gid]];\n+        }\n+\n+        $numberOfGlyphs = count($names);\n+        $length += $font->writeUInt16($numberOfGlyphs);\n+\n+        foreach($glyphNameIndex as $gni) {\n+          $length += $font->writeUInt16($gni);\n+        }\n+\n+        //$names = array_slice($names, 257);\n+        foreach($names as $name) {\n+          $len = strlen($name);\n+          $length += $font->writeUInt8($len);\n+          $length += $font->write($name, $len);\n+        }\n+\n+      break;\n+\n+      case 2.5:\n+        // TODO\n+      break;\n+\n+      case 3:\n+        // nothing\n+      break;\n+\n+      case 4:\n+        // TODO\n+      break;\n+    }\n+\n+    return $length;*/\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/TrueType/Collection.php",
          "status": "added",
          "additions": 100,
          "deletions": 0,
          "patch": "@@ -0,0 +1,100 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\TrueType;\n+\n+use Countable;\n+use FontLib\\BinaryStream;\n+use Iterator;\n+use OutOfBoundsException;\n+\n+/**\n+ * TrueType collection font file.\n+ *\n+ * @package php-font-lib\n+ */\n+class Collection extends BinaryStream implements Iterator, Countable {\n+  /**\n+   * Current iterator position.\n+   *\n+   * @var integer\n+   */\n+  private $position = 0;\n+\n+  protected $collectionOffsets = array();\n+  protected $collection = array();\n+  protected $version;\n+  protected $numFonts;\n+\n+  function parse() {\n+    if (isset($this->numFonts)) {\n+      return;\n+    }\n+\n+    $this->read(4); // tag name\n+\n+    $this->version  = $this->readFixed();\n+    $this->numFonts = $this->readUInt32();\n+\n+    for ($i = 0; $i < $this->numFonts; $i++) {\n+      $this->collectionOffsets[] = $this->readUInt32();\n+    }\n+  }\n+\n+  /**\n+   * @param int $fontId\n+   *\n+   * @throws OutOfBoundsException\n+   * @return File\n+   */\n+  function getFont($fontId) {\n+    $this->parse();\n+\n+    if (!isset($this->collectionOffsets[$fontId])) {\n+      throw new OutOfBoundsException();\n+    }\n+\n+    if (isset($this->collection[$fontId])) {\n+      return $this->collection[$fontId];\n+    }\n+\n+    $font    = new File();\n+    $font->f = $this->f;\n+    $font->setTableOffset($this->collectionOffsets[$fontId]);\n+\n+    return $this->collection[$fontId] = $font;\n+  }\n+\n+  function current() {\n+    return $this->getFont($this->position);\n+  }\n+\n+  function key() {\n+    return $this->position;\n+  }\n+\n+  function next() {\n+    return ++$this->position;\n+  }\n+\n+  function rewind() {\n+    $this->position = 0;\n+  }\n+\n+  function valid() {\n+    $this->parse();\n+\n+    return isset($this->collectionOffsets[$this->position]);\n+  }\n+\n+  function count() {\n+    $this->parse();\n+\n+    return $this->numFonts;\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/TrueType/File.php",
          "status": "added",
          "additions": 471,
          "deletions": 0,
          "patch": "@@ -0,0 +1,471 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\TrueType;\n+\n+use FontLib\\AdobeFontMetrics;\n+use FontLib\\Font;\n+use FontLib\\BinaryStream;\n+use FontLib\\Table\\Table;\n+use FontLib\\Table\\DirectoryEntry;\n+use FontLib\\Table\\Type\\glyf;\n+use FontLib\\Table\\Type\\name;\n+use FontLib\\Table\\Type\\nameRecord;\n+\n+/**\n+ * TrueType font file.\n+ *\n+ * @package php-font-lib\n+ */\n+class File extends BinaryStream {\n+  /**\n+   * @var Header\n+   */\n+  public $header = array();\n+\n+  private $tableOffset = 0; // Used for TTC\n+\n+  private static $raw = false;\n+\n+  protected $directory = array();\n+  protected $data = array();\n+\n+  protected $glyph_subset = array();\n+\n+  public $glyph_all = array();\n+\n+  static $macCharNames = array(\n+    \".notdef\", \".null\", \"CR\",\n+    \"space\", \"exclam\", \"quotedbl\", \"numbersign\",\n+    \"dollar\", \"percent\", \"ampersand\", \"quotesingle\",\n+    \"parenleft\", \"parenright\", \"asterisk\", \"plus\",\n+    \"comma\", \"hyphen\", \"period\", \"slash\",\n+    \"zero\", \"one\", \"two\", \"three\",\n+    \"four\", \"five\", \"six\", \"seven\",\n+    \"eight\", \"nine\", \"colon\", \"semicolon\",\n+    \"less\", \"equal\", \"greater\", \"question\",\n+    \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n+    \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\",\n+    \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\",\n+    \"X\", \"Y\", \"Z\", \"bracketleft\",\n+    \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\",\n+    \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\n+    \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\",\n+    \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\",\n+    \"x\", \"y\", \"z\", \"braceleft\",\n+    \"bar\", \"braceright\", \"asciitilde\", \"Adieresis\",\n+    \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\",\n+    \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\",\n+    \"acircumflex\", \"adieresis\", \"atilde\", \"aring\",\n+    \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\",\n+    \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\",\n+    \"idieresis\", \"ntilde\", \"oacute\", \"ograve\",\n+    \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\",\n+    \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\",\n+    \"degree\", \"cent\", \"sterling\", \"section\",\n+    \"bullet\", \"paragraph\", \"germandbls\", \"registered\",\n+    \"copyright\", \"trademark\", \"acute\", \"dieresis\",\n+    \"notequal\", \"AE\", \"Oslash\", \"infinity\",\n+    \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\",\n+    \"mu\", \"partialdiff\", \"summation\", \"product\",\n+    \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\",\n+    \"Omega\", \"ae\", \"oslash\", \"questiondown\",\n+    \"exclamdown\", \"logicalnot\", \"radical\", \"florin\",\n+    \"approxequal\", \"increment\", \"guillemotleft\", \"guillemotright\",\n+    \"ellipsis\", \"nbspace\", \"Agrave\", \"Atilde\",\n+    \"Otilde\", \"OE\", \"oe\", \"endash\",\n+    \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\",\n+    \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\",\n+    \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\",\n+    \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\",\n+    \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\",\n+    \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\",\n+    \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\",\n+    \"Igrave\", \"Oacute\", \"Ocircumflex\", \"applelogo\",\n+    \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\",\n+    \"dotlessi\", \"circumflex\", \"tilde\", \"macron\",\n+    \"breve\", \"dotaccent\", \"ring\", \"cedilla\",\n+    \"hungarumlaut\", \"ogonek\", \"caron\", \"Lslash\",\n+    \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\",\n+    \"zcaron\", \"brokenbar\", \"Eth\", \"eth\",\n+    \"Yacute\", \"yacute\", \"Thorn\", \"thorn\",\n+    \"minus\", \"multiply\", \"onesuperior\", \"twosuperior\",\n+    \"threesuperior\", \"onehalf\", \"onequarter\", \"threequarters\",\n+    \"franc\", \"Gbreve\", \"gbreve\", \"Idot\",\n+    \"Scedilla\", \"scedilla\", \"Cacute\", \"cacute\",\n+    \"Ccaron\", \"ccaron\", \"dmacron\"\n+  );\n+\n+  function getTable() {\n+    $this->parseTableEntries();\n+\n+    return $this->directory;\n+  }\n+\n+  function setTableOffset($offset) {\n+    $this->tableOffset = $offset;\n+  }\n+\n+  function parse() {\n+    $this->parseTableEntries();\n+\n+    $this->data = array();\n+\n+    foreach ($this->directory as $tag => $table) {\n+      if (empty($this->data[$tag])) {\n+        $this->readTable($tag);\n+      }\n+    }\n+  }\n+\n+  function utf8toUnicode($str) {\n+    $len = mb_strlen($str, '8bit');\n+    $out = array();\n+\n+    for ($i = 0; $i < $len; $i++) {\n+      $uni = -1;\n+      $h   = ord($str[$i]);\n+\n+      if ($h <= 0x7F) {\n+        $uni = $h;\n+      }\n+      elseif ($h >= 0xC2) {\n+        if (($h <= 0xDF) && ($i < $len - 1)) {\n+          $uni = ($h & 0x1F) << 6 | (ord($str[++$i]) & 0x3F);\n+        }\n+        elseif (($h <= 0xEF) && ($i < $len - 2)) {\n+          $uni = ($h & 0x0F) << 12 | (ord($str[++$i]) & 0x3F) << 6 | (ord($str[++$i]) & 0x3F);\n+        }\n+        elseif (($h <= 0xF4) && ($i < $len - 3)) {\n+          $uni = ($h & 0x0F) << 18 | (ord($str[++$i]) & 0x3F) << 12 | (ord($str[++$i]) & 0x3F) << 6 | (ord($str[++$i]) & 0x3F);\n+        }\n+      }\n+\n+      if ($uni >= 0) {\n+        $out[] = $uni;\n+      }\n+    }\n+\n+    return $out;\n+  }\n+\n+  function getUnicodeCharMap() {\n+    $subtable = null;\n+    foreach ($this->getData(\"cmap\", \"subtables\") as $_subtable) {\n+      if ($_subtable[\"platformID\"] == 0 || $_subtable[\"platformID\"] == 3 && $_subtable[\"platformSpecificID\"] == 1) {\n+        $subtable = $_subtable;\n+        break;\n+      }\n+    }\n+\n+    if ($subtable) {\n+      return $subtable[\"glyphIndexArray\"];\n+    }\n+\n+    return null;\n+  }\n+\n+  function setSubset($subset) {\n+    if (!is_array($subset)) {\n+      $subset = $this->utf8toUnicode($subset);\n+    }\n+\n+    $subset = array_unique($subset);\n+\n+    $glyphIndexArray = $this->getUnicodeCharMap();\n+\n+    if (!$glyphIndexArray) {\n+      return;\n+    }\n+\n+    $gids = array(\n+      0, // .notdef\n+      1, // .null\n+    );\n+\n+    foreach ($subset as $code) {\n+      if (!isset($glyphIndexArray[$code])) {\n+        continue;\n+      }\n+\n+      $gid        = $glyphIndexArray[$code];\n+      $gids[$gid] = $gid;\n+    }\n+\n+    /** @var glyf $glyf */\n+    $glyf = $this->getTableObject(\"glyf\");\n+    $gids = $glyf->getGlyphIDs($gids);\n+\n+    sort($gids);\n+\n+    $this->glyph_subset = $gids;\n+    $this->glyph_all    = array_values($glyphIndexArray); // FIXME\n+  }\n+\n+  function getSubset() {\n+    if (empty($this->glyph_subset)) {\n+      return $this->glyph_all;\n+    }\n+\n+    return $this->glyph_subset;\n+  }\n+\n+  function encode($tags = array()) {\n+    if (!self::$raw) {\n+      $tags = array_merge(array(\"head\", \"hhea\", \"cmap\", \"hmtx\", \"maxp\", \"glyf\", \"loca\", \"name\", \"post\"), $tags);\n+    }\n+    else {\n+      $tags = array_keys($this->directory);\n+    }\n+\n+    $num_tables = count($tags);\n+    $n          = 16; // @todo\n+\n+    Font::d(\"Tables : \" . implode(\", \", $tags));\n+\n+    /** @var DirectoryEntry[] $entries */\n+    $entries = array();\n+    foreach ($tags as $tag) {\n+      if (!isset($this->directory[$tag])) {\n+        Font::d(\"  >> '$tag' table doesn't exist\");\n+        continue;\n+      }\n+\n+      $entries[$tag] = $this->directory[$tag];\n+    }\n+\n+    $this->header->data[\"numTables\"] = $num_tables;\n+    $this->header->encode();\n+\n+    $directory_offset = $this->pos();\n+    $offset           = $directory_offset + $num_tables * $n;\n+    $this->seek($offset);\n+\n+    $i = 0;\n+    foreach ($entries as $entry) {\n+      $entry->encode($directory_offset + $i * $n);\n+      $i++;\n+    }\n+  }\n+\n+  function parseHeader() {\n+    if (!empty($this->header)) {\n+      return;\n+    }\n+\n+    $this->seek($this->tableOffset);\n+\n+    $this->header = new Header($this);\n+    $this->header->parse();\n+  }\n+\n+  function getFontType(){\n+    $class_parts = explode(\"\\\\\", get_class($this));\n+    return $class_parts[1];\n+  }\n+\n+  function parseTableEntries() {\n+    $this->parseHeader();\n+\n+    if (!empty($this->directory)) {\n+      return;\n+    }\n+\n+    if (empty($this->header->data[\"numTables\"])) {\n+      return;\n+    }\n+\n+\n+    $type = $this->getFontType();\n+    $class = \"FontLib\\\\$type\\\\TableDirectoryEntry\";\n+\n+    for ($i = 0; $i < $this->header->data[\"numTables\"]; $i++) {\n+      /** @var TableDirectoryEntry $entry */\n+      $entry = new $class($this);\n+      $entry->parse();\n+\n+      $this->directory[$entry->tag] = $entry;\n+    }\n+  }\n+\n+  function normalizeFUnit($value, $base = 1000) {\n+    return round($value * ($base / $this->getData(\"head\", \"unitsPerEm\")));\n+  }\n+\n+  protected function readTable($tag) {\n+    $this->parseTableEntries();\n+\n+    if (!self::$raw) {\n+      $name_canon = preg_replace(\"/[^a-z0-9]/\", \"\", strtolower($tag));\n+\n+      $class = \"FontLib\\\\Table\\\\Type\\\\$name_canon\";\n+\n+      if (!isset($this->directory[$tag]) || !@class_exists($class)) {\n+        return;\n+      }\n+    }\n+    else {\n+      $class = \"FontLib\\\\Table\\\\Table\";\n+    }\n+\n+    /** @var Table $table */\n+    $table = new $class($this->directory[$tag]);\n+    $table->parse();\n+\n+    $this->data[$tag] = $table;\n+  }\n+\n+  /**\n+   * @param $name\n+   *\n+   * @return Table\n+   */\n+  public function getTableObject($name) {\n+    return $this->data[$name];\n+  }\n+\n+  public function setTableObject($name, Table $data) {\n+    $this->data[$name] = $data;\n+  }\n+\n+  public function getData($name, $key = null) {\n+    $this->parseTableEntries();\n+\n+    if (empty($this->data[$name])) {\n+      $this->readTable($name);\n+    }\n+\n+    if (!isset($this->data[$name])) {\n+      return null;\n+    }\n+\n+    if (!$key) {\n+      return $this->data[$name]->data;\n+    }\n+    else {\n+      return $this->data[$name]->data[$key];\n+    }\n+  }\n+\n+  function addDirectoryEntry(DirectoryEntry $entry) {\n+    $this->directory[$entry->tag] = $entry;\n+  }\n+\n+  function saveAdobeFontMetrics($file, $encoding = null) {\n+    $afm = new AdobeFontMetrics($this);\n+    $afm->write($file, $encoding);\n+  }\n+\n+  /**\n+   * Get a specific name table string value from its ID\n+   *\n+   * @param int $nameID The name ID\n+   *\n+   * @return string|null\n+   */\n+  function getNameTableString($nameID) {\n+    /** @var nameRecord[] $records */\n+    $records = $this->getData(\"name\", \"records\");\n+\n+    if (!isset($records[$nameID])) {\n+      return null;\n+    }\n+\n+    return $records[$nameID]->string;\n+  }\n+\n+  /**\n+   * Get font copyright\n+   *\n+   * @return string|null\n+   */\n+  function getFontCopyright() {\n+    return $this->getNameTableString(name::NAME_COPYRIGHT);\n+  }\n+\n+  /**\n+   * Get font name\n+   *\n+   * @return string|null\n+   */\n+  function getFontName() {\n+    return $this->getNameTableString(name::NAME_NAME);\n+  }\n+\n+  /**\n+   * Get font subfamily\n+   *\n+   * @return string|null\n+   */\n+  function getFontSubfamily() {\n+    return $this->getNameTableString(name::NAME_SUBFAMILY);\n+  }\n+\n+  /**\n+   * Get font subfamily ID\n+   *\n+   * @return string|null\n+   */\n+  function getFontSubfamilyID() {\n+    return $this->getNameTableString(name::NAME_SUBFAMILY_ID);\n+  }\n+\n+  /**\n+   * Get font full name\n+   *\n+   * @return string|null\n+   */\n+  function getFontFullName() {\n+    return $this->getNameTableString(name::NAME_FULL_NAME);\n+  }\n+\n+  /**\n+   * Get font version\n+   *\n+   * @return string|null\n+   */\n+  function getFontVersion() {\n+    return $this->getNameTableString(name::NAME_VERSION);\n+  }\n+\n+  /**\n+   * Get font weight\n+   *\n+   * @return string|null\n+   */\n+  function getFontWeight() {\n+    return $this->getTableObject(\"OS/2\")->data[\"usWeightClass\"];\n+  }\n+\n+  /**\n+   * Get font Postscript name\n+   *\n+   * @return string|null\n+   */\n+  function getFontPostscriptName() {\n+    return $this->getNameTableString(name::NAME_POSTSCRIPT_NAME);\n+  }\n+\n+  function reduce() {\n+    $names_to_keep = array(\n+      name::NAME_COPYRIGHT,\n+      name::NAME_NAME,\n+      name::NAME_SUBFAMILY,\n+      name::NAME_SUBFAMILY_ID,\n+      name::NAME_FULL_NAME,\n+      name::NAME_VERSION,\n+      name::NAME_POSTSCRIPT_NAME,\n+    );\n+\n+    foreach ($this->data[\"name\"]->data[\"records\"] as $id => $rec) {\n+      if (!in_array($id, $names_to_keep)) {\n+        unset($this->data[\"name\"]->data[\"records\"][$id]);\n+      }\n+    }\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/TrueType/Header.php",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\TrueType;\n+\n+/**\n+ * TrueType font file header.\n+ *\n+ * @package php-font-lib\n+ */\n+class Header extends \\FontLib\\Header {\n+  protected $def = array(\n+    \"format\"        => self::uint32,\n+    \"numTables\"     => self::uint16,\n+    \"searchRange\"   => self::uint16,\n+    \"entrySelector\" => self::uint16,\n+    \"rangeShift\"    => self::uint16,\n+  );\n+\n+  public function parse() {\n+    parent::parse();\n+\n+    $format                   = $this->data[\"format\"];\n+    $this->data[\"formatText\"] = $this->convertUInt32ToStr($format);\n+  }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/TrueType/TableDirectoryEntry.php",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\TrueType;\n+\n+use FontLib\\Table\\DirectoryEntry;\n+\n+/**\n+ * TrueType table directory entry.\n+ *\n+ * @package php-font-lib\n+ */\n+class TableDirectoryEntry extends DirectoryEntry {\n+  function __construct(File $font) {\n+    parent::__construct($font);\n+  }\n+\n+  function parse() {\n+    parent::parse();\n+\n+    $font           = $this->font;\n+    $this->checksum = $font->readUInt32();\n+    $this->offset   = $font->readUInt32();\n+    $this->length   = $font->readUInt32();\n+    $this->entryLength += 12;\n+  }\n+}\n+"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/WOFF/File.php",
          "status": "added",
          "additions": 81,
          "deletions": 0,
          "patch": "@@ -0,0 +1,81 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\WOFF;\n+\n+use FontLib\\Table\\DirectoryEntry;\n+\n+/**\n+ * WOFF font file.\n+ *\n+ * @package php-font-lib\n+ *\n+ * @property TableDirectoryEntry[] $directory\n+ */\n+class File extends \\FontLib\\TrueType\\File {\n+  function parseHeader() {\n+    if (!empty($this->header)) {\n+      return;\n+    }\n+\n+    $this->header = new Header($this);\n+    $this->header->parse();\n+  }\n+\n+  public function load($file) {\n+    parent::load($file);\n+\n+    $this->parseTableEntries();\n+    $dataOffset = $this->pos() + count($this->directory) * 20;\n+\n+    $fw = $this->getTempFile(false);\n+    $fr = $this->f;\n+\n+    $this->f = $fw;\n+    $offset  = $this->header->encode();\n+\n+    foreach ($this->directory as $entry) {\n+      // Read ...\n+      $this->f = $fr;\n+      $this->seek($entry->offset);\n+      $data = $this->read($entry->length);\n+\n+      if ($entry->length < $entry->origLength) {\n+        $data = (string) gzuncompress($data);\n+      }\n+\n+      // Prepare data ...\n+      $length        = mb_strlen($data, '8bit');\n+      $entry->length = $entry->origLength = $length;\n+      $entry->offset = $dataOffset;\n+\n+      // Write ...\n+      $this->f = $fw;\n+\n+      // Woff Entry\n+      $this->seek($offset);\n+      $offset += $this->write($entry->tag, 4); // tag\n+      $offset += $this->writeUInt32($dataOffset); // offset\n+      $offset += $this->writeUInt32($length); // length\n+      $offset += $this->writeUInt32($length); // origLength\n+      $offset += $this->writeUInt32(DirectoryEntry::computeChecksum($data)); // checksum\n+\n+      // Data\n+      $this->seek($dataOffset);\n+      $dataOffset += $this->write($data, $length);\n+    }\n+\n+    $this->f = $fw;\n+    $this->seek(0);\n+\n+    // Need to re-parse this, don't know why\n+    $this->header    = null;\n+    $this->directory = array();\n+    $this->parseTableEntries();\n+  }\n+}"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/WOFF/Header.php",
          "status": "added",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -0,0 +1,32 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\WOFF;\n+\n+/**\n+ * WOFF font file header.\n+ *\n+ * @package php-font-lib\n+ */\n+class Header extends \\FontLib\\TrueType\\Header {\n+  protected $def = array(\n+    \"format\"         => self::uint32,\n+    \"flavor\"         => self::uint32,\n+    \"length\"         => self::uint32,\n+    \"numTables\"      => self::uint16,\n+    self::uint16,\n+    \"totalSfntSize\"  => self::uint32,\n+    \"majorVersion\"   => self::uint16,\n+    \"minorVersion\"   => self::uint16,\n+    \"metaOffset\"     => self::uint32,\n+    \"metaLength\"     => self::uint32,\n+    \"metaOrigLength\" => self::uint32,\n+    \"privOffset\"     => self::uint32,\n+    \"privLength\"     => self::uint32,\n+  );\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "notifications/dompdf/lib/php-font-lib/WOFF/TableDirectoryEntry.php",
          "status": "added",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -0,0 +1,34 @@\n+<?php\n+/**\n+ * @package php-font-lib\n+ * @link    https://github.com/PhenX/php-font-lib\n+ * @author  Fabien M\u00e9nager <fabien.menager@gmail.com>\n+ * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n+ */\n+\n+namespace FontLib\\WOFF;\n+\n+use FontLib\\Table\\DirectoryEntry;\n+\n+/**\n+ * WOFF font file table directory entry.\n+ *\n+ * @package php-font-lib\n+ */\n+class TableDirectoryEntry extends DirectoryEntry {\n+  public $origLength;\n+\n+  function __construct(File $font) {\n+    parent::__construct($font);\n+  }\n+\n+  function parse() {\n+    parent::parse();\n+\n+    $font             = $this->font;\n+    $this->offset     = $font->readUInt32();\n+    $this->length     = $font->readUInt32();\n+    $this->origLength = $font->readUInt32();\n+    $this->checksum   = $font->readUInt32();\n+  }\n+}"
        },
        {
          "filename": "notifications/processNotificationBatchDetails.php",
          "status": "modified",
          "additions": 94,
          "deletions": 121,
          "patch": "@@ -1,4 +1,4 @@\n-<?php\n+<?php \n /*\n  *********************************************************************************************************\n  * daloRADIUS - RADIUS Web Platform\n@@ -15,133 +15,106 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n-\t//include the dompdf class\n-\trequire_once(\"dompdf/dompdf_config.inc.php\");\n \n-\t//include the Pear Mail classes for sending out emails\n-\t@require_once('Mail.php');\n-\t@require_once('Mail/mime.php');\n-\t\n-\t$base = dirname(__FILE__);\n-\t\n-\t/**\n-\t * createBatchDetailsNotification()\n-\t * wrapper-function to create the notification to the customer\n-\t * \n-\t * @param\t\tarray\t\t\tcustomer information array\n-\t */\n-\tfunction createBatchDetailsNotification($customerInfo) {\n+    // prevent this file to be directly accessed\n+    if (strpos($_SERVER['PHP_SELF'], '/notifications/processNotificationBatchDetails.php') !== false) {\n+        header(\"Location: ../index.php\");\n+        exit;\n+    }\n \n-\t\tglobal $base;\n-\t\t\n-\t\t$html = prepareNotificationTemplate($customerInfo);\n-\t\t$pdfDocument = createPDF($html);\n-\t\t\n-\t\treturn $pdfDocument;\n-\t\t\n-\t}\n+    // common notification functions\n+    include(\"common.php\");\n+    \n+    $base = dirname(__FILE__);\n+    $base_path = \"$base/templates/\";\n+    \n+    /**\n+     * createBatchDetailsNotification()\n+     * wrapper-function to create the notification to the customer\n+     * \n+     * @param        array        customer information array\n+     */\n+    function createBatchDetailsNotification($customerInfo) {\n+        global $base_path;\n+        \n+        $html = prepareNotificationTemplate($customerInfo);\n+        return createPDF($html, $base_path);\n+    }\n \n-\t\n-\t/**\n-\t * emailNotification()\n-\t * creates an email message with the pdf and sends it\n-\t * \n-\t * @param\t\tstring\t\t\tpdf binary/string stream\n-\t * @param\t\tarray\t\t\tcustomer information array\n-\t * @param\t\tarray\t\t\tsmtp server information\n-\t * @param\t\tstring\t\t\tfrom email address of the sender identity\n-\t */\n-\tfunction emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from) {\n+    \n+    /**\n+     * emailNotification()\n+     * creates an email message with the pdf and sends it\n+     * \n+     * @param        string        pdf binary/string stream\n+     * @param        array         customer information array\n+     * @param        array         smtp server information\n+     * @param        string        from email address of the sender identity\n+     */\n+    function emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from) {\n+        $sendTo = $customerInfo['business_email'];\n+        $subject = \"Business Pre-Paid Batch Information\";\n+        $body = \"Notification letter of service\";\n+        $attachmentName = \"notification.pdf\";\n+        \n+        return send_notification_via_email($pdfDocument, $smtpInfo, $sendTo, $from, $subject, $body, $attachmentName);\n+    }\n+    \n+    \n+    /**\n+     * prepareNotificationTemplate()\n+     * reads the notification (html) template and returns the formatted (html) notification\n+     * \n+     * @param         array         Array of notification information\n+     * @return        string        HTML notification\n+     */\n+    function prepareNotificationTemplate($customerInfo) {\n+        global $base_path;\n+        \n+        // the HTML template\n+        $notification_template = $base_path . \"/batch_details.html\";\n+        \n+        $notification_html_template = file_get_contents($notification_template);\n+        \n+        $date = date(\"Y-m-d\");\n+        \n+        $business_name = $customerInfo['business_name'];\n+        $business_owner_name = $customerInfo['business_owner_name']; \n+        $business_address = $customerInfo['business_address'];\n+        $business_phone = $customerInfo['business_phone'];\n+        $business_email = $customerInfo['business_email'];\n+        $business_web = $customerInfo['business_web'];\n+        $batch_details = $customerInfo['batch_details'];\n+        $batch_active_users = $customerInfo['batch_active_users'];\n+        $service_plan_info = $customerInfo['service_plan_info'];\n+    \n+        $tagname_value_mappings = array(\n+                                            \"__INVOICE_CREATION_DATE__\" => $date,\n+                                            \"__BUSINESS_NAME__\" => $business_name,\n+                                            \"__BUSINESS_OWNER_NAME__\" => $business_owner_name,\n+                                            \"__BUSINESS_ADDRESS__\" => $business_address,\n+                                            \"__BUSINESS_PHONE__\" => $business_phone,\n+                                            \"__BUSINESS_EMAIL__\" => $business_email,\n+                                            \"__BUSINESS_WEB__\" => $business_web,\n+                                            \"__BATCH_DETAILS__\" => $batch_details,\n+                                            \"__BATCH_ACTIVE_USERS__\" => $batch_active_users,\n+                                            \"__SERVICE_PLAN_INFO__\" => $service_plan_info,\n+                                       );\n+    \n+        foreach ($tagname_value_mappings as $tagname => $value) {\n+            $tag = sprintf(\"####%s####\", $tagname);\n+            $notification_html_template = str_replace($tag, $value, $notification_html_template);\n+        }\n \n-\t\tglobal $base;\n-\t\t\n-\t\tif (empty($customerInfo['business_email']))\n-\t\t\treturn;\n-\t\t\n-\t\t$headers = array(\t\"From\"\t=>\t$from, \n-\t\t\t\t\t\t\t\"Subject\"\t=>\t\"Business Pre-Paid Batch Information\",\n-\t\t\t\t\t\t\t\"Reply-To\"=> $from\n-\t\t\t\t\t);\n-\t\t\t\t\n-\t\t$mime = new Mail_mime();\n-\t\t$mime->setTXTBody(\"Notification letter of service\"); \n-\t\t$mime->addAttachment($pdfDocument, \"application/pdf\", \"notification.pdf\", false, 'base64');\n-\t\t$body = $mime->get();\n-\t\t$headers = $mime->headers($headers);\n-\t\t$mail =& Mail::factory(\"smtp\", $smtpInfo);\n-\t\t$mail->send($customerInfo['business_email'], $headers, $body);\n-\t\n-\t}\n-\t\n-\t\n-\t/**\n-\t * prepareNotificationTemplate()\n-\t * reads the notification (html) template and returns the formatted (html) notification\n-\t * \n-\t * @param\t\tarray\t\t\tArray of notification information\n-\t * @return\t\tstring\t\t\tHTML notification\n-\t */\n-\tfunction prepareNotificationTemplate($customerInfo) {\n-\t\n-\t\tglobal $base;\n-\t\t\n-\t\t// the HTML template\n-\t\t$notification_template = \"$base/templates/batch_details.html\";\n-\t\t$notification_html_template = file_get_contents($notification_template);\n-\t\n-\t\t$date = date(\"Y-m-d\");\n-\t\t\n-\t\t$business_name = $customerInfo['business_name'];\n-\t\t$business_owner_name = $customerInfo['business_owner_name']; \n-\t\t$business_address = $customerInfo['business_address'];\n-\t\t$business_phone = $customerInfo['business_phone'];\n-\t\t$business_email = $customerInfo['business_email'];\n-\t\t$business_web = $customerInfo['business_web'];\n-\t\t$batch_details = $customerInfo['batch_details'];\n-\t\t$batch_active_users = $customerInfo['batch_active_users'];\n-\t\t$service_plan_info = $customerInfo['service_plan_info'];\n-\t\n-\t\t$notification_html_template = str_replace(\"####__INVOICE_CREATION_DATE__####\", $date, $notification_html_template);\n-\t\t\n-\t\t$notification_html_template = str_replace(\"####__BUSINESS_NAME__####\", $business_name, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__BUSINESS_OWNER_NAME__####\", $business_owner_name, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__BUSINESS_ADDRESS__####\", $business_address, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__BUSINESS_PHONE__####\", $business_phone, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__BUSINESS_EMAIL__####\", $business_email, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__BUSINESS_WEB__####\", $business_web, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__BATCH_DETAILS__####\", $batch_details, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__BATCH_ACTIVE_USERS__####\", $batch_active_users, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__SERVICE_PLAN_INFO__####\", $service_plan_info, $notification_html_template);\n-\t\t\n+        // this fix has been set in place according to this thread:\n+        // https://stackoverflow.com/questions/37521775/dompdf-error-no-block-level-parent-found-not-good\n+        return str_replace(\"\\n\", \"\", $notification_html_template);\n+    }\n \n-\t\treturn $notification_html_template;\n-\t}\n-\t\n-\t/**\n-\t * createPDF()\n-\t * creates a PDF document for a given html file\n-\t * \n-\t * @param \t\tstring\t\t\tthe html file to convert to pdf\t\t\t\n-\t * @return \t\tstring\t\t\treturns the pdf in binary/string stream\n-\t */\n-\tfunction createPDF($html) {\n-\t\n-\t\tglobal $base;\n-\t\t\n-\t\t// instansiate the pdf document\n-\t\t$dompdf = new DOMPDF();\n-\t\t$dompdf->set_base_path(\"$base/templates/\");\n-\t\t$dompdf->load_html($html);\n-\t\t$dompdf->render();\n-\t\n-\t\t$notification_pdf = $dompdf->output();\n-\t\t\n-\t\treturn $notification_pdf;\n-\n-\t}\n \n ?>"
        },
        {
          "filename": "notifications/processNotificationUserDetailsInvoice.php",
          "status": "modified",
          "additions": 27,
          "deletions": 66,
          "patch": "@@ -1,4 +1,4 @@\n-<?php\n+<?php \n /*\n  *********************************************************************************************************\n  * daloRADIUS - RADIUS Web Platform\n@@ -15,36 +15,35 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n-\t//include the dompdf class\n-\trequire_once(\"dompdf/dompdf_config.inc.php\");\n \n-\t//include the Pear Mail classes for sending out emails\n-\t@require_once('Mail.php');\n-\t@require_once('Mail/mime.php');\n-\t\n-\t$base = dirname(__FILE__);\n-\t\n+    // prevent this file to be directly accessed\n+    if (strpos($_SERVER['PHP_SELF'], '/notifications/processNotificationUserDetailsInvoice.php') !== false) {\n+        header(\"Location: ../index.php\");\n+        exit;\n+    }\n+    \n+    // common notification functions\n+    include(\"common.php\");\n+    \n+    $base = dirname(__FILE__);\n+\t$base_path = \"$base/templates/\";\n+    \n \t/**\n \t * createUserDetailsInvoiceNotification()\n \t * wrapper-function to create the notification to the customer\n \t * \n \t * @param\t\tarray\t\t\tcustomer information array\n \t */\n \tfunction createUserDetailsInvoiceNotification($customerInfo) {\n-\n-\t\tglobal $base;\n-\t\t\n-\t\t$html = prepareNotificationTemplate($customerInfo);\n-\t\t$pdfDocument = createPDF($html);\n-\n-\t\tfile_put_contents(\"$base/out4.pdf\", $pdfDocument);\n-\t\t\n-\t\treturn $pdfDocument;\n-\t\t\n+\t\tglobal $base_path;\n+        \n+        $html = prepareNotificationTemplate($customerInfo);\n+\t\treturn createPDF($html, $base_path);\n \t}\n \n \t\n@@ -58,25 +57,12 @@ function createUserDetailsInvoiceNotification($customerInfo) {\n \t * @param\t\tstring\t\t\tfrom email address of the sender identity\n \t */\n \tfunction emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from) {\n-\n-\t\tglobal $base;\n-\t\t\n-\t\tif (empty($customerInfo['business_email']))\n-\t\t\treturn;\n-\t\t\n-\t\t$headers = array(\t\"From\"\t=>\t$from, \n-\t\t\t\t\t\t\t\"Subject\"\t=>\t\"User Invoice Notification\",\n-\t\t\t\t\t\t\t\"Reply-To\"=> $from\n-\t\t\t\t\t);\n-\t\t\t\t\n-\t\t$mime = new Mail_mime();\n-\t\t$mime->setTXTBody(\"Notification letter of service\"); \n-\t\t$mime->addAttachment($pdfDocument, \"application/pdf\", \"invoice.pdf\", false, 'base64');\n-\t\t$body = $mime->get();\n-\t\t$headers = $mime->headers($headers);\n-\t\t$mail =& Mail::factory(\"smtp\", $smtpInfo);\n-\t\t$mail->send($customerInfo['business_email'], $headers, $body);\n-\t\n+        $sendTo = $customerInfo['business_email'];\n+        $subject = \"User Invoice Notification\";\n+        $body = \"Notification letter of service\";\n+        $attachmentName = \"invoice.pdf\";\n+        \n+        return send_notification_via_email($pdfDocument, $smtpInfo, $sendTo, $from, $subject, $body, $attachmentName);\n \t}\n \t\n \t\n@@ -88,11 +74,10 @@ function emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from) {\n \t * @return\t\tstring\t\t\tHTML notification\n \t */\n \tfunction prepareNotificationTemplate($customerInfo) {\n-\t\n-\t\tglobal $base;\n+\t\tglobal $base_path;\n \t\t\n \t\t// the HTML template\n-\t\t$notification_template = \"$base/templates/user_invoice_details.html\";\n+\t\t$notification_template = $base_path . \"/user_invoice_details.html\";\n \t\t$notification_html_template = file_get_contents($notification_template);\n \t\n \t\t$date = date(\"Y-m-d\");\n@@ -111,31 +96,7 @@ function prepareNotificationTemplate($customerInfo) {\n \t\t$notification_html_template = str_replace(\"####__BUSINESS_EMAIL__####\", $business_email, $notification_html_template);\n \t\t$notification_html_template = str_replace(\"####__SERVICE_PLAN_INFO__####\", $service_plan_info, $notification_html_template);\n \t\t\n-\n \t\treturn $notification_html_template;\n \t}\n-\t\n-\t/**\n-\t * createPDF()\n-\t * creates a PDF document for a given html file\n-\t * \n-\t * @param \t\tstring\t\t\tthe html file to convert to pdf\t\t\t\n-\t * @return \t\tstring\t\t\treturns the pdf in binary/string stream\n-\t */\n-\tfunction createPDF($html) {\n-\t\n-\t\tglobal $base;\n-\t\t\n-\t\t// instansiate the pdf document\n-\t\t$dompdf = new DOMPDF();\n-\t\t$dompdf->set_base_path(\"$base/templates/\");\n-\t\t$dompdf->load_html($html);\n-\t\t$dompdf->render();\n-\t\n-\t\t$notification_pdf = $dompdf->output();\n-\t\t\n-\t\treturn $notification_pdf;\n-\n-\t}\n \n ?>"
        },
        {
          "filename": "notifications/processNotificationUserInvoice.php",
          "status": "modified",
          "additions": 158,
          "deletions": 196,
          "patch": "@@ -15,209 +15,171 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n- *          Miguel Garc\u00eda <miguelvisgarcia@gmail.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Miguel Garc\u00eda <miguelvisgarcia@gmail.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n-\t//include the dompdf class\n-\trequire_once(\"dompdf/dompdf_config.inc.php\");\n \n-\t//include the Pear Mail classes for sending out emails\n-\t@require_once('Mail.php');\n-\t@require_once('Mail/mime.php');\n-\t\n-\t$base = dirname(__FILE__);\n-\t\n-\t/**\n-\t * createNotification()\n-\t * wrapper-function to create the notification to the customer\n-\t * \n-\t * @param\t\tarray\t\t\tcustomer information array\n-\t * @param\t\tboolean\t\t\ttrue for HTML output, false for PDF output\n-\t * @return \t\tstring\t\t\treturns the HTML or PDF output\n-\t */\n-\tfunction createNotification($customerInfo, $asHTML = false) {\n+    // common notification functions\n+    include(\"common.php\");\n+    \n+    $base = dirname(__FILE__);\n+    $base_path = \"$base/templates/\";\n+    \n+    /**\n+     * createNotification()\n+     * wrapper-function to create the notification to the customer\n+     * \n+     * @param         array          customer information array\n+     * @param         boolean        true for HTML output, false for PDF output\n+     * \n+     * @return        string         returns the HTML or PDF output\n+     */\n+    function createNotification($customerInfo, $asHTML = false) {\n+        global $base_path;\n+        \n+        $html = prepareNotificationTemplate($customerInfo);\n+        return (($asHTML) ? $html : createPDF($html, $base_path));\n+    }\n \n-\t\tglobal $base;\n-\t\t\n-\t\t$html = prepareNotificationTemplate($customerInfo);\n-\t\t\n-\t\tif($asHTML) {\n-\t\t\t$document = $html;\n-\t\t}\n-\t\telse {\n-\t\t\t$document = createPDF($html);\n-\t\t}\n+    \n+    /**\n+     * emailNotification()\n+     * creates an email message with the pdf and sends it\n+     * \n+     * @param        string        pdf binary/string stream\n+     * @param        array         customer information array\n+     * @param        array         smtp server information\n+     * @param        string        from email address of the sender identity\n+     */\n+    function emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from) {\n+        $sendTo = $customerInfo['business_email'];\n+        $subject = \"Invoice Information\";\n+        $body = \"Notification letter of service\";\n+        $attachmentName = \"notification.pdf\";\n+        \n+        return send_notification_via_email($pdfDocument, $smtpInfo, $sendTo, $from, $subject, $body, $attachmentName);\n+    }\n+    \n+    \n+    /**\n+     * prepareNotificationTemplate()\n+     * reads the notification (html) template and returns the formatted (html) notification\n+     * \n+     * @param         array         Array of notification information\n+     * \n+     * @return        string        HTML notification\n+     */\n+    function prepareNotificationTemplate($customerInfo) {\n+        global $base_path, $configValues;\n+        \n+        $templates_base = $base_path;\n+        \n+        // the default HTML template - OLD STYLE\n+        $notification_template = $templates_base . \"user_invoice.html\";\n+        $notification_item_template = null;\n+        \n+        // the default HTML template - NEW STYLE\n+        if(isset($configValues['CONFIG_INVOICE_TEMPLATE'])) {\n+            $notification_template = $templates_base . $configValues['CONFIG_INVOICE_TEMPLATE'];\n+            \n+            if(isset($configValues['CONFIG_INVOICE_ITEM_TEMPLATE'])) {\n+                $notification_item_template = $templates_base . $configValues['CONFIG_INVOICE_ITEM_TEMPLATE'];\n+            }\n+        }\n+        \n+        // the default HTML template for current location - NEW STYLE\n+        if ((isset($_SESSION['location_name'])) && ($_SESSION['location_name'] != \"default\")) {\n+            $location_name = $_SESSION['location_name'];\n+            $location = $configValues['CONFIG_LOCATIONS'][$location_name];\n+        \n+            if (isset($location['CONFIG_INVOICE_TEMPLATE'])) {\n+                $notification_template = $templates_base . $location['CONFIG_INVOICE_TEMPLATE'];\n+                \n+                if (isset($location['CONFIG_INVOICE_ITEM_TEMPLATE'])) {\n+                    $notification_item_template = $templates_base . $location['CONFIG_INVOICE_ITEM_TEMPLATE'];\n+                }\n+            }\n+        }\n \n-\t\treturn $document;\n-\t}\n+        // load template for invoice\n+        $notification_html_template = file_get_contents($notification_template);\n+        \n+        // load template for each invoice item\n+        if ($notification_item_template !== null) {\n+            $notification_item_html_template = file_get_contents($notification_item_template);\n+        }\n \n-\t\n-\t/**\n-\t * emailNotification()\n-\t * creates an email message with the pdf and sends it\n-\t * \n-\t * @param\t\tstring\t\t\tpdf binary/string stream\n-\t * @param\t\tarray\t\t\tcustomer information array\n-\t * @param\t\tarray\t\t\tsmtp server information\n-\t * @param\t\tstring\t\t\tfrom email address of the sender identity\n-\t */\n-\tfunction emailNotification($pdfDocument, $customerInfo, $smtpInfo, $from) {\n+        $date = date(\"Y-m-d\");\n+        \n+        $name = $customerInfo['customer_name'];\n+        $address = $customerInfo['customer_address'];\n+        $phone = $customerInfo['customer_phone'];\n+        $email = $customerInfo['customer_email'];\n+        \n+        $invoice_details = $customerInfo['invoice_details'];\n+        $invoice_items = $customerInfo['invoice_items'];\n+    \n+        // notification date\n+        $notification_html_template = str_replace(\"####__INVOICE_CREATION_DATE__####\", $date, $notification_html_template);\n+        \n+        // user details\n+        $notification_html_template = str_replace(\"####__CUSTOMER_NAME__####\", $name, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__CUSTOMER_ADDRESS__####\", $address, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__CUSTOMER_PHONE__####\", $phone, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__CUSTOMER_EMAIL__####\", $email, $notification_html_template);\n+        \n+        // invoice information\n+        $notification_html_template = str_replace(\"####__INVOICE_DETAILS__####\", $invoice_details, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__INVOICE_ITEMS__####\", $invoice_items, $notification_html_template);\n+        \n+        // customer details - NEW STYLE            \n+        $notification_html_template = str_replace(\"[CustomerId]\", $customerInfo['customerId'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[CustomerName]\", $customerInfo['customerName'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[CustomerAddress]\", $customerInfo['customerAddress'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[CustomerAddress2]\", $customerInfo['customerAddress2'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[CustomerPhone]\", $customerInfo['customerPhone'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[CustomerEmail]\", $customerInfo['customerEmail'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[CustomerContact]\", $customerInfo['customerContact'], $notification_html_template);\n+        \n+        // invoice details - NEW STYLE\n+        $notification_html_template = str_replace(\"[InvoiceNumber]\", $customerInfo['invoiceNumber'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[InvoiceDate]\", $customerInfo['invoiceDate'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[InvoiceStatus]\", $customerInfo['invoiceStatus'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[InvoiceTotalBilled]\", $customerInfo['invoiceTotalBilled'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[InvoicePaid]\", $customerInfo['invoicePaid'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[InvoiceDue]\", $customerInfo['invoiceDue'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[InvoiceNotes]\", $customerInfo['invoiceNotes'], $notification_html_template);\n+        \n+        // invoice items - NEW STYLE\n+        if($notification_item_template !== null) {\n+            $invoiceItems = '';\n+            \n+            foreach($customerInfo['invoiceItems'] as $invoiceItem) {\n+                $invoiceItemTemplate = $notification_item_html_template;\n+        \n+                $invoiceItemTemplate = str_replace(\"[InvoiceItemNumber]\", $invoiceItem['invoiceItemNumber'], $invoiceItemTemplate);\n+                $invoiceItemTemplate = str_replace(\"[InvoiceItemPlan]\", $invoiceItem['invoiceItemPlan'], $invoiceItemTemplate);\n+                $invoiceItemTemplate = str_replace(\"[InvoiceItemNotes]\", $invoiceItem['invoiceItemNotes'], $invoiceItemTemplate);\n+                $invoiceItemTemplate = str_replace(\"[InvoiceItemAmount]\", $invoiceItem['invoiceItemAmount'], $invoiceItemTemplate);\n+                $invoiceItemTemplate = str_replace(\"[InvoiceItemTaxAmount]\", $invoiceItem['invoiceItemTaxAmount'], $invoiceItemTemplate);\n+                $invoiceItemTemplate = str_replace(\"[InvoiceItemTotalAmount]\", $invoiceItem['invoiceItemTotalAmount'], $invoiceItemTemplate);\n+                \n+                $invoiceItems .= $invoiceItemTemplate;\n+            }\n \n-\t\tglobal $base;\n-\t\t\n-\t\tif (empty($customerInfo['customer_email']))\n-\t\t\treturn;\n-\t\t\n-\t\t$headers = array (\n-\t\t\t\"From\" => $from, \n-\t\t\t\"Subject\" => \"Invoice Information\",\n-\t\t\t\"Reply-To\" => $from\n-\t\t);\n-\t\t\t\t\n-\t\t$mime = new Mail_mime();\n-\t\t$mime->setTXTBody(\"Notification letter of service\"); \n-\t\t$mime->addAttachment($pdfDocument, \"application/pdf\", \"notification.pdf\", false, 'base64');\n-\t\t$body = $mime->get();\n-\t\t$headers = $mime->headers($headers);\n-\t\t$mail =& Mail::factory(\"smtp\", $smtpInfo);\n-\t\t$mail->send($customerInfo['customer_email'], $headers, $body);\n-\t}\n-\t\n-\t\n-\t/**\n-\t * prepareNotificationTemplate()\n-\t * reads the notification (html) template and returns the formatted (html) notification\n-\t * \n-\t * @param\t\tarray\t\t\tArray of notification information\n-\t * @return\t\tstring\t\t\tHTML notification\n-\t */\n-\tfunction prepareNotificationTemplate($customerInfo) {\n-\t\n-\t\tglobal $base;\n-\t\tglobal $configValues;\n-\t\t\n-\t\t// the default HTML template - OLD STYLE\n-\t\t$notification_template = \"$base/templates/user_invoice.html\";\n-\t\t$notification_item_template = null;\n-\t\t\n-\t\t// the default HTML template - NEW STYLE\n-\t\tif(isset($configValues['CONFIG_INVOICE_TEMPLATE'])) {\n-\t\t\t$notification_template = \"$base/templates/\" . $configValues['CONFIG_INVOICE_TEMPLATE'];\n-\t\t\t\n-\t\t\tif(isset($configValues['CONFIG_INVOICE_ITEM_TEMPLATE'])) {\n-\t\t\t\t$notification_item_template = \"$base/templates/\" . $configValues['CONFIG_INVOICE_ITEM_TEMPLATE'];\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t// the default HTML template for current location - NEW STYLE\n-\t\tif((isset($_SESSION['location_name'])) && ($_SESSION['location_name'] != \"default\")) {\n-\t\t\tif(isset($configValues['CONFIG_LOCATIONS'][$_SESSION['location_name']]['CONFIG_INVOICE_TEMPLATE'])) {\n-\t\t\t\t$notification_template = \"$base/templates/\" . $configValues['CONFIG_LOCATIONS'][$_SESSION['location_name']]['CONFIG_INVOICE_TEMPLATE'];\n-\t\t\t\t\n-\t\t\t\tif(isset($configValues['CONFIG_LOCATIONS'][$_SESSION['location_name']]['CONFIG_INVOICE_ITEM_TEMPLATE'])) {\n-\t\t\t\t\t$notification_item_template = \"$base/templates/\" . $configValues['CONFIG_LOCATIONS'][$_SESSION['location_name']]['CONFIG_INVOICE_ITEM_TEMPLATE'];\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// load template for invoice\n-\t\t$notification_html_template = file_get_contents($notification_template);\n-\t\t\n-\t\t// load template for each invoice item\n-\t\tif($notification_item_template !== null) {\n-\t\t\t$notification_item_html_template = file_get_contents($notification_item_template);\n-\t\t}\n-\n-\t\t$date = date(\"Y-m-d\");\n-\t\t\n-\t\t$name = $customerInfo['customer_name'];\n-\t\t$address = $customerInfo['customer_address'];\n-\t\t$phone = $customerInfo['customer_phone'];\n-\t\t$email = $customerInfo['customer_email'];\n-\t\t\n-\t\t$invoice_details = $customerInfo['invoice_details'];\n-\t\t$invoice_items = $customerInfo['invoice_items'];\n-\t\n-\t\t// notification date\n-\t\t$notification_html_template = str_replace(\"####__INVOICE_CREATION_DATE__####\", $date, $notification_html_template);\n-\t\t\n-\t\t// user details\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_NAME__####\", $name, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_ADDRESS__####\", $address, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_PHONE__####\", $phone, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_EMAIL__####\", $email, $notification_html_template);\n-\t\t\n-\t\t// invoice information\n-\t\t$notification_html_template = str_replace(\"####__INVOICE_DETAILS__####\", $invoice_details, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__INVOICE_ITEMS__####\", $invoice_items, $notification_html_template);\n-\t\t\n-\t\t// customer details - NEW STYLE\t\t\t\n-\t\t$notification_html_template = str_replace(\"[CustomerId]\", $customerInfo['customerId'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[CustomerName]\", $customerInfo['customerName'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[CustomerAddress]\", $customerInfo['customerAddress'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[CustomerAddress2]\", $customerInfo['customerAddress2'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[CustomerPhone]\", $customerInfo['customerPhone'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[CustomerEmail]\", $customerInfo['customerEmail'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[CustomerContact]\", $customerInfo['customerContact'], $notification_html_template);\n-\t\t\n-\t\t// invoice details - NEW STYLE\n-\t\t$notification_html_template = str_replace(\"[InvoiceNumber]\", $customerInfo['invoiceNumber'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[InvoiceDate]\", $customerInfo['invoiceDate'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[InvoiceStatus]\", $customerInfo['invoiceStatus'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[InvoiceTotalBilled]\", $customerInfo['invoiceTotalBilled'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[InvoicePaid]\", $customerInfo['invoicePaid'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[InvoiceDue]\", $customerInfo['invoiceDue'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[InvoiceNotes]\", $customerInfo['invoiceNotes'], $notification_html_template);\n-\t\t\n-\t\t// invoice items - NEW STYLE\n-\t\tif($notification_item_template !== null) {\n-\t\t\t$invoiceItems = '';\n-\t\t\t\n-\t\t\tforeach($customerInfo['invoiceItems'] as $invoiceItem) {\n-\t\t\t\t$invoiceItemTemplate = $notification_item_html_template;\n-\t\t\n-\t\t\t\t$invoiceItemTemplate = str_replace(\"[InvoiceItemNumber]\", $invoiceItem['invoiceItemNumber'], $invoiceItemTemplate);\n-\t\t\t\t$invoiceItemTemplate = str_replace(\"[InvoiceItemPlan]\", $invoiceItem['invoiceItemPlan'], $invoiceItemTemplate);\n-\t\t\t\t$invoiceItemTemplate = str_replace(\"[InvoiceItemNotes]\", $invoiceItem['invoiceItemNotes'], $invoiceItemTemplate);\n-\t\t\t\t$invoiceItemTemplate = str_replace(\"[InvoiceItemAmount]\", $invoiceItem['invoiceItemAmount'], $invoiceItemTemplate);\n-\t\t\t\t$invoiceItemTemplate = str_replace(\"[InvoiceItemTaxAmount]\", $invoiceItem['invoiceItemTaxAmount'], $invoiceItemTemplate);\n-\t\t\t\t$invoiceItemTemplate = str_replace(\"[InvoiceItemTotalAmount]\", $invoiceItem['invoiceItemTotalAmount'], $invoiceItemTemplate);\n-\t\t\t\t\n-\t\t\t\t$invoiceItems .= $invoiceItemTemplate;\n-\t\t\t}\n-\n-\t\t\t$notification_html_template = str_replace(\"[InvoiceItems]\", $invoiceItems, $notification_html_template);\n-\t\t}\n-\t\t\n-\t\t// more invoice details - NEW STYLE\n-\t\t$notification_html_template = str_replace(\"[InvoiceTotalAmount]\", $customerInfo['invoiceTotalAmount'], $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"[InvoiceTotalTax]\", $customerInfo['invoiceTotalTax'], $notification_html_template);\n-\t\t\n-\t\treturn $notification_html_template;\n-\t}\n-\t\n-\t/**\n-\t * createPDF()\n-\t * creates a PDF document for a given html file\n-\t * \n-\t * @param \t\tstring\t\t\tthe html file to convert to pdf\t\t\t\n-\t * @return \t\tstring\t\t\treturns the pdf in binary/string stream\n-\t */\n-\tfunction createPDF($html) {\n-\t\n-\t\tglobal $base;\n-\t\t\n-\t\t// instansiate the pdf document\n-\t\t$dompdf = new DOMPDF();\n-\t\t$dompdf->set_base_path(\"$base/templates/\");\n-\t\t$dompdf->load_html($html);\n-\t\t$dompdf->render();\n-\t\n-\t\t$notification_pdf = $dompdf->output();\n-\t\t\n-\t\treturn $notification_pdf;\n-\t}\n+            $notification_html_template = str_replace(\"[InvoiceItems]\", $invoiceItems, $notification_html_template);\n+        }\n+        \n+        // more invoice details - NEW STYLE\n+        $notification_html_template = str_replace(\"[InvoiceTotalAmount]\", $customerInfo['invoiceTotalAmount'], $notification_html_template);\n+        $notification_html_template = str_replace(\"[InvoiceTotalTax]\", $customerInfo['invoiceTotalTax'], $notification_html_template);\n+        \n+        // this fix has been set in place according to this thread:\n+        // https://stackoverflow.com/questions/37521775/dompdf-error-no-block-level-parent-found-not-good\n+        return str_replace(\"\\n\", \"\", $notification_html_template);\n+    }\n \n ?>"
        },
        {
          "filename": "notifications/processNotificationWelcome.php",
          "status": "modified",
          "additions": 60,
          "deletions": 95,
          "patch": "@@ -1,4 +1,4 @@\n-<?php\n+<?php \n /*\n  *********************************************************************************************************\n  * daloRADIUS - RADIUS Web Platform\n@@ -15,105 +15,70 @@\n  *\n  *********************************************************************************************************\n  *\n- * Authors:\tLiran Tal <liran@enginx.com>\n+ * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n-\t//include the dompdf class\n-\trequire_once(\"dompdf/dompdf_config.inc.php\");\n \n-\t//include the Pear Mail classes for sending out emails\n-\t@require_once('Mail.php');\n-\t@require_once('Mail/mime.php');\n-\t\n-\t$base = dirname(__FILE__);\n-\t\n-\t/**\n-\t * sendWelcomeNotification()\n-\t * wrapper-function to send notification to the customer\n-\t * \n-\t * @param\t\tarray\t\t\tcustomer information array\n-\t * @param\t\tarray\t\t\tsmtp server information\n-\t * @param\t\tstring\t\t\tfrom email address of the sender identity\n-\t */\n-\tfunction sendWelcomeNotification($customerInfo, $smtpInfo, $from) {\n+    // prevent this file to be directly accessed\n+    if (strpos($_SERVER['PHP_SELF'], '/notifications/processNotificationWelcome.php') !== false) {\n+        header(\"Location: ../index.php\");\n+        exit;\n+    }\n+    \n+    // common notification functions\n+    include(\"common.php\");\n+    \n+    $base = dirname(__FILE__);\n+    $base_path = \"$base/templates/\";\n+    \n+    /**\n+     * sendWelcomeNotification()\n+     * wrapper-function to send notification to the customer\n+     * \n+     * @param        array         customer information array\n+     * @param        array         smtp server information\n+     * @param        string        from email address of the sender identity\n+     */\n+    function sendWelcomeNotification($customerInfo, $smtpInfo, $from) {\n+        $sendTo = $customerInfo['business_email'];\n+        $subject = \"Welcome new customer!\";\n+        $body = \"Notification letter of service\";\n+        $attachmentName = \"notification.pdf\";\n+        \n+        return send_notification_via_email($pdfDocument, $smtpInfo, $sendTo, $from, $subject, $body, $attachmentName);\n+    }\n \n-\t\tglobal $base;\n-\t\t\n-\t\tif (empty($customerInfo['customer_email']))\n-\t\t\treturn;\n-\t\t\n-\t\t$headers = array(\t\"From\"\t=>\t$from, \n-\t\t\t\t\t\t\t\"Subject\"\t=>\t\"Welcome new customer!\",\n-\t\t\t\t\t\t\t\"Reply-To\"=> $from\n-\t\t\t\t\t);\n-\t\t\n-\t\t$html = prepareNotificationTemplate($customerInfo);\n-\t\t$pdfDocument = createPDF($html);\n-\t\t\n-\t\t$mime = new Mail_mime(); \n-\t\t$mime->setTXTBody(\"Notification letter of service\"); \n-\t\t$mime->addAttachment($pdfDocument, \"application/pdf\", \"notification.pdf\", false, 'base64');\n-\t\t$body = $mime->get();\n-\t\t$headers = $mime->headers($headers);\n-\t\t$mail =& Mail::factory(\"smtp\", $smtpInfo);\n-\t\t$mail->send($customerInfo['customer_email'], $headers, $body);\t\t\n-\t\t\n-\t}\n+    \n+    /**\n+     * prepareNotificationTemplate()\n+     * reads the notification (html) template and returns the formatted (html) notification\n+     * \n+     * @param         array         Array of notification information\n+     * @return        string        HTML notification\n+     */\n+    function prepareNotificationTemplate($customerInfo) {\n+        global $base_path;\n+        \n+        // the HTML template\n+        $notification_template = $base_path . \"welcome.html\";\n+        $notification_html_template = file_get_contents($notification_template);\n+    \n+        $date = date(\"Y-m-d\");\n+    \n+        $customer_name = $customerInfo['customer_name'];\n+        $customer_address = $customerInfo['customer_address']; \n+        $customer_phone = $customerInfo['customer_phone'];\n+        $customer_email = $customerInfo['customer_email'];\n+    \n+        $notification_html_template = str_replace(\"####__INVOICE_CREATION_DATE__####\", $date, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__CUSTOMER_NAME__####\", $customer_name, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__CUSTOMER_ADDRESS__####\", $customer_address, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__CUSTOMER_PHONE__####\", $customer_phone, $notification_html_template);\n+        $notification_html_template = str_replace(\"####__CUSTOMER_EMAIL__####\", $customer_email, $notification_html_template);\n \n-\t\n-\t/**\n-\t * prepareNotificationTemplate()\n-\t * reads the notification (html) template and returns the formatted (html) notification\n-\t * \n-\t * @param\t\tarray\t\t\tArray of notification information\n-\t * @return\t\tstring\t\t\tHTML notification\n-\t */\n-\tfunction prepareNotificationTemplate($customerInfo) {\n-\t\n-\t\tglobal $base;\n-\t\t\n-\t\t// the HTML template\n-\t\t$notification_template = \"$base/templates/welcome.html\";\n-\t\t$notification_html_template = file_get_contents($notification_template);\n-\t\n-\t\t$date = date(\"Y-m-d\");\n-\t\n-\t\t$customer_name = $customerInfo['customer_name'];\n-\t\t$customer_address = $customerInfo['customer_address']; \n-\t\t$customer_phone = $customerInfo['customer_phone'];\n-\t\t$customer_email = $customerInfo['customer_email'];\n-\t\n-\t\t$notification_html_template = str_replace(\"####__INVOICE_CREATION_DATE__####\", $date, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_NAME__####\", $customer_name, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_ADDRESS__####\", $customer_address, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_PHONE__####\", $customer_phone, $notification_html_template);\n-\t\t$notification_html_template = str_replace(\"####__CUSTOMER_EMAIL__####\", $customer_email, $notification_html_template);\n-\n-\t\treturn $notification_html_template;\n-\t}\n-\t\n-\t/**\n-\t * createPDF()\n-\t * creates a PDF document for a given html file\n-\t * \n-\t * @param \t\tstring\t\t\tthe html file to convert to pdf\t\t\t\n-\t * @return \t\tstring\t\t\treturns the pdf in binary/string stream\n-\t */\n-\tfunction createPDF($html) {\n-\t\n-\t\tglobal $base;\n-\t\t\n-\t\t// instansiate the pdf document\n-\t\t$dompdf = new DOMPDF();\n-\t\t$dompdf->set_base_path(\"$base/templates/\");\n-\t\t$dompdf->load_html($html);\n-\t\t$dompdf->render();\n-\t\n-\t\t$notification_pdf = $dompdf->output();\n-\t\t\n-\t\treturn $notification_pdf;\n-\n-\t}\n+        return $notification_html_template;\n+    }\n \n ?>"
        },
        {
          "filename": "rep-batch-details.php",
          "status": "modified",
          "additions": 18,
          "deletions": 35,
          "patch": "@@ -16,6 +16,7 @@\n  *********************************************************************************************************\n  *\n  * Authors:    Liran Tal <liran@enginx.com>\n+ *             Filippo Lauria <filippo.lauria@iit.cnr.it>\n  *\n  *********************************************************************************************************\n  */\n@@ -39,6 +40,9 @@\n     $logQuery = \"performed query for batch [$batch_name] on page: \";\n     $logDebugSQL = \"\";\n \n+    // set session's page variable\n+    $_SESSION['PREV_LIST_PAGE'] = $_SERVER['REQUEST_URI'];\n+\n     include_once(\"lang/main.php\");\n     \n     // first table\n@@ -82,23 +86,14 @@\n \n     // print HTML prologue   \n     $title = t('Intro','repbatchdetails.php');\n+    $help = t('helpPage','repbatchdetails');\n     \n     print_html_prologue($title, $langCode);\n \n     include (\"menu-reports-batch.php\");\n-      \n-?>    \n-\n-        <div id=\"contentnorightbar\">\n-            <h2 id=\"Intro\">\n-                <a href=\"#\"  onclick=\"javascript:toggleShowDiv('helpPage')\">\n-                    <?= t('Intro','repbatchdetails.php'); ?><h144>&#x2754;</h144>\n-                </a>\n-            </h2>\n-\n-            <div id=\"helpPage\" style=\"display:none;visibility:visible\"><?= t('helpPage','repbatchdetails') ?><br></div>\n-\n-<?php\n+    \n+    echo '<div id=\"contentnorightbar\">';\n+    print_title_and_help($title, $help);\n \n     include('library/opendb.php');\n     include('include/management/pages_common.php');\n@@ -148,7 +143,7 @@\n             <tr style=\"background-color: white\">\n                 <td style=\"text-align: right\" colspan=\"<?= $colspan1 ?>\">\n                     <input class=\"button\" type=\"button\" value=\"Download Invoice\"\n-                        onclick=\"location.href='include/common/notificationsBatchDetails.php?batch_name=<?= urlencode($batch_name_enc) ?>&destination=download'\">\n+                        onclick=\"window.open('include/common/notificationsBatchDetails.php?batch_name=<?= urlencode($batch_name_enc) ?>&destination=download')\">\n                     <input class=\"button\" type=\"button\" value=\"Email Invoice to Business/Hotspot\"\n                         onclick=\"location.href='include/common/notificationsBatchDetails.php?batch_name=<?= urlencode($batch_name_enc) ?>&destination=email'\">\n                     <input class=\"button\" type=\"button\" value=\"CSV Export\"\n@@ -318,26 +313,14 @@\n     \n     include('library/closedb.php');\n \n-?>\n-\n-</div><!-- #contentnorightbar -->\n-        \n-        <div id=\"footer\">\n-<?php\n     include('include/config/logging.php');\n-    include('page-footer.php');\n+    \n+    $inline_extra_js = \"\n+var tooltipObj = new DHTMLgoodies_formTooltip();\n+tooltipObj.setTooltipPosition('right');\n+tooltipObj.setPageBgColor('#EEEEEE');\n+tooltipObj.setTooltipCornerSize(15);\n+tooltipObj.initFormFieldTooltip()\";\n+    \n+    print_footer_and_html_epilogue($inline_extra_js);\n ?>\n-        </div><!-- #footer -->\n-    </div>\n-</div>\n-\n-<script>\n-    var tooltipObj = new DHTMLgoodies_formTooltip();\n-    tooltipObj.setTooltipPosition('right');\n-    tooltipObj.setPageBgColor('#EEEEEE');\n-    tooltipObj.setTooltipCornerSize(15);\n-    tooltipObj.initFormFieldTooltip();\n-</script>\n-\n-</body>\n-</html>"
        },
        {
          "filename": "rep-online.php",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -189,7 +189,7 @@\n         // printTableFormControls function parameter\n         $action = \"mng-del.php\";\n ?>\n-<form name=\"listall\" method=\"GET\" action=\"<?= $action ?>\">\n+<form name=\"listall\" method=\"POST\" action=\"<?= $action ?>\">\n     <table border=\"0\" class=\"table1\">\n         <thead>\n             <tr style=\"background-color: white\">\n@@ -301,6 +301,9 @@\n ?>\n \n     </table>\n+    \n+    <input name=\"csrf_token\" type=\"hidden\" value=\"<?= dalo_csrf_token() ?>\">\n+    \n </form>    \n \n <?php"
        },
        {
          "filename": "rep-username.php",
          "status": "modified",
          "additions": 13,
          "deletions": 2,
          "patch": "@@ -120,6 +120,8 @@\n \n     <tbody>\n <?php\n+            $csrf_token = dalo_csrf_token();\n+\n             while ($row = $res->fetchRow()) {\n                 $rowlen = count($row);\n                 \n@@ -129,8 +131,17 @@\n                 }\n                 \n                 $this_username = htmlspecialchars($row[1], ENT_QUOTES, 'UTF-8');\n-                printf('<td><a href=\"mng-edit.php?username=%s\">%s</a>&nbsp;<a href=\"mng-del.php?username=%s\">%s</a></td>',\n-                       urlencode($this_username), t('all','edit'), urlencode($this_username), t('all','del'));\n+                echo '<td>';\n+                $formId = $this_username . \"-form-del\";\n+                printf('<form id=\"%s\" style=\"display: none\" method=\"POST\" action=\"mng-del.php\">', $formId);\n+                printf('<input type=\"hidden\" name=\"username[]\" value=\"%s\">', $this_username);\n+                printf('<input type=\"hidden\" name=\"csrf_token\" value=\"%s\">', $csrf_token);\n+                echo '</form>';\n+                \n+                $onclick = sprintf(\"document.getElementById('%s').submit()\", $formId);\n+                printf('<a href=\"mng-edit.php?username=%s\">%s</a>&nbsp;<a href=\"#\" onclick=\"%s\">%s</a>',\n+                       urlencode($this_username), t('all','edit'), $onclick, t('all','del'));\n+                echo '</td>';\n                 echo \"</tr>\";\n             }\n ?>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 14,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cda8c51659e296beeb56d69dea2f0fe978335f44",
            "date": "2025-01-03T15:57:00Z",
            "author_login": "dot-mike"
          },
          {
            "sha": "d9fb2eb77a340338e9307d2bfc436656797ad10e",
            "date": "2024-12-05T05:44:31Z",
            "author_login": "jahknem"
          },
          {
            "sha": "37e0dbbaa6831c6ea8c2d7aec75882f9fc263dec",
            "date": "2024-11-27T09:28:27Z",
            "author_login": "dpkrane"
          },
          {
            "sha": "5b99b4bcdd6f53864c1653d2d6cba45a9e9c4740",
            "date": "2024-11-24T11:47:00Z",
            "author_login": "parsa97"
          },
          {
            "sha": "30988bf24ac713039073a45526c97601fc5af238",
            "date": "2024-10-29T14:22:40Z",
            "author_login": "aweher"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "daloRADIUS is an open source RADIUS web management application. daloRadius 1.3 and prior are vulnerable to a combination cross site scripting (XSS) and cross site request forgery (CSRF) vulnerability which leads to account takeover in the mng-del.php file because of an unescaped variable reflected in the DOM on line 116. This issue has been addressed in commit `ec3b4a419e`. Users are advised to manually apply the commit in order to mitigate this issue. Users may also mitigate this issue with in two parts 1) The CSRF vulnerability can be mitigated  by making the daloRadius session cookie to samesite=Lax or by the implimentation of a CSRF token in all forms. 2) The XSS vulnerability may be mitigated by escaping it or by introducing a Content-Security policy.\n\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-06T20:15:10.467",
    "last_modified": "2024-11-21T06:48:38.270",
    "fix_date": "2022-11-28T15:12:03Z"
  },
  "references": [
    {
      "url": "https://github.com/lirantal/daloradius/commit/ec3b4a419e20540cf28ce60e48998b893e3f1dea",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lirantal/daloradius/security/advisories/GHSA-c9xx-6mvw-9v84",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lirantal/daloradius/commit/ec3b4a419e20540cf28ce60e48998b893e3f1dea",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lirantal/daloradius/security/advisories/GHSA-c9xx-6mvw-9v84",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.206726",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "daloradius",
    "owner": "lirantal",
    "created_at": "2015-05-02T09:06:40Z",
    "updated_at": "2025-01-13T13:09:54Z",
    "pushed_at": "2025-01-03T15:57:00Z",
    "size": 26603,
    "stars": 707,
    "forks": 350,
    "open_issues": 68,
    "watchers": 707,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 9561369,
      "HTML": 976444,
      "JavaScript": 234162,
      "Shell": 65413,
      "CSS": 47766,
      "Hack": 4356,
      "Dockerfile": 2182
    },
    "commit_activity": {
      "total_commits_last_year": 29,
      "avg_commits_per_week": 0.5576923076923077,
      "days_active_last_year": 24
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:25:23.249627"
  }
}