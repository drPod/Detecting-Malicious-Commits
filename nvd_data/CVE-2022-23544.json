{
  "cve_id": "CVE-2022-23544",
  "github_data": {
    "repository": "metersphere/metersphere",
    "fix_commit": "d0f95b50737c941b29d507a4cc3545f2dc6ab121",
    "related_commits": [
      "d0f95b50737c941b29d507a4cc3545f2dc6ab121",
      "d0f95b50737c941b29d507a4cc3545f2dc6ab121"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d0f95b50737c941b29d507a4cc3545f2dc6ab121",
      "commit_date": "2022-12-08T08:49:42Z",
      "author": {
        "login": "AgAngle",
        "type": "User",
        "stats": {
          "total_commits": 3304,
          "average_weekly_commits": 12.659003831417625,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 221
        }
      },
      "commit_message": {
        "title": "fix(\u6d4b\u8bd5\u8ddf\u8e2a): \u7f3a\u9677\u5e73\u53f0\u8bf7\u6c42\u8f6c\u53d1\u6dfb\u52a0\u767d\u540d\u5355",
        "length": 24,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 126,
        "additions": 63,
        "deletions": 63
      },
      "files": [
        {
          "filename": "framework/gateway/src/main/java/io/metersphere/gateway/filter/SessionFilter.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@ public class SessionFilter implements WebFilter {\n     private static final String[] TO_SUB_SERVICE = new String[]{\"/license\", \"/system\", \"/resource\", \"/sso/callback/logout\", \"/sso/callback/cas/logout\"};\n     private static final String PERFORMANCE_DOWNLOAD_PREFIX = \"/jmeter/\";\n     private static final String API_DOWNLOAD_PREFIX = \"/api/jmeter/\";\n-    private static final String TRACK_IMAGE_PREFIX = \"/resource/md/get/url\";\n+    private static final String TRACK_IMAGE_PREFIX = \"/resource/md/get/path\";\n \n     @Resource\n     private DiscoveryClient discoveryClient;"
        },
        {
          "filename": "framework/sdk-parent/xpack-interface/src/main/java/io/metersphere/xpack/track/issue/IssuesPlatform.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -106,10 +106,10 @@ public interface IssuesPlatform {\n \n     /**\n      * Get\u8bf7\u6c42\u7684\u4ee3\u7406\n-     * @param url\n+     * @param path\n      * @return\n      */\n-    ResponseEntity proxyForGet(String url, Class responseEntityClazz);\n+    ResponseEntity proxyForGet(String path, Class responseEntityClazz);\n \n     /**\n      * \u540c\u6b65MS\u7f3a\u9677\u9644\u4ef6\u5230\u7b2c\u4e09\u65b9\u5e73\u53f0"
        },
        {
          "filename": "pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@\n         <spring-cloud.version>2021.0.5</spring-cloud.version>\n         <spring-security.version>5.7.5</spring-security.version>\n         <dubbo.version>2.7.18</dubbo.version>\n-        <platform-plugin-sdk.version>1.0.0</platform-plugin-sdk.version>\n+        <platform-plugin-sdk.version>1.1.0</platform-plugin-sdk.version>\n         <flyway.version>7.15.0</flyway.version>\n         <shiro.version>1.10.1</shiro.version>\n         <mssql-jdbc.version>7.4.1.jre8</mssql-jdbc.version>"
        },
        {
          "filename": "test-track/backend/src/main/java/io/metersphere/controller/IssueProxyResourceController.java",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -15,9 +15,10 @@ public class IssueProxyResourceController {\n     @Resource\n     IssueProxyResourceService issueProxyResourceService;\n \n-    @GetMapping(value = \"/md/get/url\")\n-    public ResponseEntity<byte[]> getFileByUrl(@RequestParam (\"url\") String url, @RequestParam (value = \"platform\", required = false) String platform,\n-                                               @RequestParam (value = \"workspace_id\", required = false) String workspaceId) {\n-        return issueProxyResourceService.getMdImageByUrl(url, platform, workspaceId);\n+    @GetMapping(value = \"/md/get/path\")\n+    public ResponseEntity<byte[]> getFileByPath(@RequestParam (\"path\") String path,\n+                                                @RequestParam (value = \"platform\") String platform,\n+                                                @RequestParam (value = \"workspaceId\") String workspaceId) {\n+        return issueProxyResourceService.getMdImageByPath(path, platform, workspaceId);\n     }\n }"
        },
        {
          "filename": "test-track/backend/src/main/java/io/metersphere/service/IssuesService.java",
          "status": "modified",
          "additions": 0,
          "deletions": 32,
          "patch": "@@ -59,7 +59,6 @@\n import io.metersphere.xpack.track.dto.request.IssuesRequest;\n import io.metersphere.xpack.track.dto.request.IssuesUpdateRequest;\n import io.metersphere.xpack.track.issue.IssuesPlatform;\n-import jodd.util.CollectionUtil;\n import io.metersphere.xpack.track.service.XpackIssueService;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.collections.MapUtils;\n@@ -697,8 +696,6 @@ public List<IssuesDao> list(IssuesRequest request) {\n             item.setCaseCount(caseIdSet.size());\n         });\n         buildCustomField(issues);\n-        //\u5904\u7406MD\u56fe\u7247\u94fe\u63a5\u5185\u5bb9\n-        handleJiraIssueMdUrl(request.getWorkspaceId(), request.getProjectId(), issues);\n         return issues;\n     }\n \n@@ -789,35 +786,6 @@ private void buildCustomField(List<IssuesDao> data, Boolean isThirdTemplate, Lis\n \n     }\n \n-    private void handleJiraIssueMdUrl(String workPlaceId, String projectId, List<IssuesDao> issues) {\n-        issues.forEach(issue -> {\n-            if (StringUtils.isNotEmpty(issue.getDescription()) && issue.getDescription().contains(\"platform=Jira&\")) {\n-                issue.setDescription(replaceJiraMdUrlParam(issue.getDescription(), workPlaceId, projectId));\n-            }\n-            if (StringUtils.isNotEmpty(issue.getCustomFields()) && issue.getCustomFields().contains(\"platform=Jira&\")) {\n-                issue.setCustomFields(replaceJiraMdUrlParam(issue.getCustomFields(), workPlaceId, projectId));\n-            }\n-            if (CollectionUtils.isNotEmpty(issue.getFields())) {\n-                issue.getFields().forEach(field -> {\n-                    if (StringUtils.isNotEmpty(field.getTextValue()) && field.getTextValue().contains(\"platform=Jira&\")) {\n-                        field.setTextValue(replaceJiraMdUrlParam(field.getTextValue(), workPlaceId, projectId));\n-                    }\n-                    if (StringUtils.isNotEmpty(field.getValue()) && field.getValue().contains(\"platform=Jira&\")) {\n-                        field.setValue(replaceJiraMdUrlParam(field.getValue(), workPlaceId, projectId));\n-                    }\n-                });\n-            }\n-        });\n-    }\n-\n-    private String replaceJiraMdUrlParam(String url, String workspaceId, String projectId) {\n-        if (url.contains(\"&workspace_id=\")) {\n-            return url;\n-        }\n-        return url.replaceAll(\"platform=Jira&\",\n-                \"platform=Jira&workspace_id=\" + workspaceId + \"&\");\n-    }\n-\n     private Map<String, List<IssueCommentDTO>> getCommentMap(List<IssuesDao> issues) {\n         List<String> issueIds = issues.stream().map(IssuesDao::getId).collect(Collectors.toList());\n         List<IssueCommentDTO> comments = extIssueCommentMapper.getCommentsByIssueIds(issueIds);"
        },
        {
          "filename": "test-track/backend/src/main/java/io/metersphere/service/PlatformPluginService.java",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -88,6 +88,7 @@ public Platform getPlatform(String platformKey, String workspaceId) {\n         ServiceIntegration serviceIntegration = baseIntegrationService.get(integrationRequest);\n \n         PlatformRequest pluginRequest = new PlatformRequest();\n+        pluginRequest.setWorkspaceId(workspaceId);\n         pluginRequest.setIntegrationConfig(serviceIntegration.getConfiguration());\n         Platform platform = getPluginManager().getPlatformByKey(platformKey, pluginRequest);\n         if (platform == null) {"
        },
        {
          "filename": "test-track/backend/src/main/java/io/metersphere/service/issue/client/ZentaoClient.java",
          "status": "modified",
          "additions": 17,
          "deletions": 1,
          "patch": "@@ -4,7 +4,6 @@\n import io.metersphere.commons.utils.JSON;\n import io.metersphere.commons.utils.LogUtil;\n import io.metersphere.commons.utils.UnicodeConvertUtils;\n-import io.metersphere.i18n.Translator;\n import io.metersphere.service.issue.domain.zentao.*;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.core.io.FileSystemResource;\n@@ -13,6 +12,8 @@\n import org.springframework.util.MultiValueMap;\n \n import java.io.File;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.util.Map;\n \n public abstract class ZentaoClient extends BaseClient {\n@@ -244,4 +245,19 @@ public byte[] getAttachmentBytes(String fileId) {\n                 null, byte[].class, fileId, sessionId);\n         return response.getBody();\n     }\n+\n+    public ResponseEntity proxyForGet(String path, Class responseEntityClazz) {\n+        im.metersphere.plugin.utils.LogUtil.info(\"zentao proxyForGet: \" + path);\n+        String url = this.ENDPOINT + path;\n+        try {\n+            if (!StringUtils.containsAny(new URI(url).getPath(), \"/index.php\", \"/file-read-\")) {\n+                // \u53ea\u5141\u8bb8\u8bbf\u95ee\u56fe\u7247\n+                MSException.throwException(\"illegal path\");\n+            }\n+        } catch (URISyntaxException e) {\n+            LogUtil.error(e);\n+            MSException.throwException(\"illegal path\");\n+        }\n+        return restTemplate.exchange(url, HttpMethod.GET, null, responseEntityClazz);\n+    }\n }"
        },
        {
          "filename": "test-track/backend/src/main/java/io/metersphere/service/issue/platform/AbstractIssuePlatform.java",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -6,7 +6,6 @@\n import io.metersphere.base.mapper.TestCaseIssuesMapper;\n import io.metersphere.base.mapper.ext.ExtIssuesMapper;\n import io.metersphere.commons.constants.CustomFieldType;\n-import io.metersphere.commons.constants.IssueRefType;\n import io.metersphere.commons.constants.IssuesStatus;\n import io.metersphere.commons.exception.MSException;\n import io.metersphere.commons.utils.*;\n@@ -32,6 +31,7 @@\n \n import java.io.File;\n import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.*;\n import java.util.function.Function;\n@@ -65,6 +65,8 @@ public abstract class AbstractIssuePlatform implements IssuesPlatform {\n     protected AttachmentModuleRelationMapper attachmentModuleRelationMapper;\n     protected BaseProjectService baseProjectService;\n \n+    public static final String PROXY_PATH = \"/resource/md/get/path?platform=%s&workspaceId=%s&path=%s\";\n+\n     public String getKey() {\n         return key;\n     }\n@@ -114,6 +116,10 @@ protected String getPlatformConfig(String platform) {\n         return integration.getConfiguration();\n     }\n \n+    protected String getProxyPath(String path) {\n+        return String.format(PROXY_PATH, this.key, this.workspaceId, URLEncoder.encode(path, StandardCharsets.UTF_8));\n+    }\n+\n     protected HttpHeaders auth(String apiUser, String password) {\n         String authKey = EncryptUtils.base64Encoding(apiUser + \":\" + password);\n         HttpHeaders headers = new HttpHeaders();\n@@ -333,7 +339,7 @@ public List<File> getImageFiles(String input) {\n         while (matcher.find()) {\n             try {\n                 String path = matcher.group(2);\n-                if (!path.contains(\"/resource/md/get/url\")) {\n+                if (!path.contains(\"/resource/md/get/url\") && !path.contains(\"/resource/md/get/path\")) {\n                     if (path.contains(\"/resource/md/get/\")) { // \u517c\u5bb9\u65e7\u6570\u636e\n                         String name = path.substring(path.indexOf(\"/resource/md/get/\") + 17);\n                         files.add(new File(FileUtils.MD_IMAGE_DIR + \"/\" + name));"
        },
        {
          "filename": "test-track/backend/src/main/java/io/metersphere/service/issue/platform/ZentaoPlatform.java",
          "status": "modified",
          "additions": 15,
          "deletions": 8,
          "patch": "@@ -492,7 +492,7 @@ private String ms2ZentaoDescription(String msDescription) {\n         while (matcher.find()) {\n             // get file name\n             String originSubUrl = matcher.group(1);\n-            if (originSubUrl.contains(\"/url?url=\")) {\n+            if (originSubUrl.contains(\"/url?url=\") || originSubUrl.contains(\"/path?\")) {\n                 String path = URLDecoder.decode(originSubUrl, StandardCharsets.UTF_8);\n                 String fileName;\n                 if (path.indexOf(\"fileID\") > 0) {\n@@ -565,15 +565,17 @@ private String packageDescriptionByPathAndName(String path, String name) {\n                     }\n                 } else {\n                     name = name.replaceAll(\"&amp;\", \"&\");\n-                    try {\n-                        URI uri = new URI(zentaoClient.getBaseUrl());\n-                        path = uri.getScheme() + \"://\" + uri.getHost() + path.replaceAll(\"&amp;\", \"&\");\n-                    } catch (URISyntaxException e) {\n-                        path = zentaoClient.getBaseUrl() + path.replaceAll(\"&amp;\", \"&\");\n-                        LogUtil.error(e);\n+                    path = path.replaceAll(\"&amp;\", \"&\");\n+                }\n+                StringBuilder stringBuilder = new StringBuilder();\n+                for (String item : path.split(\"&\")) {\n+                    // \u53bb\u6389\u591a\u4f59\u7684\u53c2\u6570\n+                    if (!StringUtils.containsAny(item, \"platform\", \"workspaceId\")) {\n+                        stringBuilder.append(item);\n+                        stringBuilder.append(\"&\");\n                     }\n                 }\n-                path = \"/resource/md/get/url?url=\" + URLEncoder.encode(path, StandardCharsets.UTF_8);\n+                path = getProxyPath(stringBuilder.toString());\n             }\n             // \u56fe\u7247\u4e0e\u63cf\u8ff0\u4fe1\u606f\u4e4b\u95f4\u9700\u6362\u884c\uff0c\u5426\u5219\u65e0\u6cd5\u9884\u89c8\u56fe\u7247\n             result = \"\\n\\n![\" + name + \"](\" + path + \")\";\n@@ -682,4 +684,9 @@ public List<PlatformStatusDTO> getTransitions(String issueKey) {\n         }\n         return platformStatusDTOS;\n     }\n+\n+    @Override\n+    public ResponseEntity proxyForGet(String path, Class responseEntityClazz) {\n+        return zentaoClient.proxyForGet(path, responseEntityClazz);\n+    }\n }"
        },
        {
          "filename": "test-track/backend/src/main/java/io/metersphere/service/wapper/IssueProxyResourceService.java",
          "status": "modified",
          "additions": 13,
          "deletions": 12,
          "patch": "@@ -1,10 +1,10 @@\n package io.metersphere.service.wapper;\n \n-import io.metersphere.commons.exception.MSException;\n-import io.metersphere.i18n.Translator;\n+import io.metersphere.commons.constants.IssuesManagePlatform;\n import io.metersphere.service.PlatformPluginService;\n+import io.metersphere.service.issue.platform.IssueFactory;\n+import io.metersphere.xpack.track.dto.request.IssuesRequest;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.http.HttpMethod;\n import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n@@ -25,19 +25,20 @@ public class IssueProxyResourceService {\n      * http \u4ee3\u7406\n      * \u5982\u679c\u5f53\u524d\u8bbf\u95ee\u5730\u5740\u662f https\uff0c\u76f4\u63a5\u8bbf\u95ee http \u7684\u56fe\u7247\u8d44\u6e90\n      * \u7531\u4e8e\u6d4f\u89c8\u5668\u7684\u5b89\u5168\u673a\u5236\uff0chttp \u4f1a\u88ab\u8f6c\u6210 https\n-     * @param url\n+     * @param path\n      * @param platform\n      * @return\n      */\n-    public ResponseEntity<byte[]> getMdImageByUrl(String url, String platform, String workspaceId) {\n-        if (url.contains(\"md/get/url\")) {\n-            MSException.throwException(Translator.get(\"invalid_parameter\"));\n-        }\n-        if (StringUtils.isNotBlank(platform)) {\n-            return platformPluginService.getPlatform(platform, workspaceId)\n-                    .proxyForGet(url, byte[].class);\n+    public ResponseEntity<byte[]> getMdImageByPath(String path, String platform, String workspaceId) {\n+        if (StringUtils.equals(IssuesManagePlatform.Zentao.name(), platform)) {\n+            IssuesRequest issuesRequest = new IssuesRequest();\n+            issuesRequest.setWorkspaceId(workspaceId);\n+            return IssueFactory.createPlatform(platform, issuesRequest)\n+                    .proxyForGet(path, byte[].class);\n \n+        } else {\n+            return platformPluginService.getPlatform(platform, workspaceId)\n+                    .proxyForGet(path, byte[].class);\n         }\n-        return restTemplate.exchange(url, HttpMethod.GET, null, byte[].class);\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 8,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "91cd58c6490f128283e7713a2a935b57f1f2208f",
            "date": "2025-01-24T07:20:40Z",
            "author_login": "ba1q1"
          },
          {
            "sha": "ddf18efe14a94636cf64787ad45cfbcc072993b5",
            "date": "2025-01-24T03:33:06Z",
            "author_login": "ba1q1"
          },
          {
            "sha": "f595cf228dddb1fe6851427d6624aa514183bef3",
            "date": "2025-01-24T03:23:18Z",
            "author_login": "liuruibin"
          },
          {
            "sha": "efac7deb5c8c3406f6161d2cac5d9b352e33c8f7",
            "date": "2025-01-23T06:54:52Z",
            "author_login": "ba1q1"
          },
          {
            "sha": "694dbd370fd63b6e894ee33376182039289f6a4d",
            "date": "2025-01-22T08:45:13Z",
            "author_login": "ba1q1"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "MeterSphere is a one-stop open source continuous testing platform, covering test management, interface testing, UI testing and performance testing. Versions prior to 2.5.0 are subject to a Server-Side Request Forgery that leads to Cross-Site Scripting. A Server-Side request forgery in `IssueProxyResourceService::getMdImageByUrl` allows an attacker to access internal resources, as well as executing JavaScript code in the context of Metersphere's origin by a victim of a reflected XSS. This vulnerability has been fixed in v2.5.0. There are no known workarounds. ",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-28T00:15:13.567",
    "last_modified": "2024-11-21T06:48:47.020",
    "fix_date": "2022-12-08T08:49:42Z"
  },
  "references": [
    {
      "url": "https://github.com/metersphere/metersphere/commit/d0f95b50737c941b29d507a4cc3545f2dc6ab121",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/metersphere/metersphere/security/advisories/GHSA-vrv6-cg45-rmjj",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/metersphere/metersphere/commit/d0f95b50737c941b29d507a4cc3545f2dc6ab121",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/metersphere/metersphere/security/advisories/GHSA-vrv6-cg45-rmjj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.225462",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "metersphere",
    "owner": "metersphere",
    "created_at": "2020-02-03T02:06:12Z",
    "updated_at": "2025-01-26T07:11:12Z",
    "pushed_at": "2025-01-24T07:39:57Z",
    "size": 420613,
    "stars": 11794,
    "forks": 2631,
    "open_issues": 48,
    "watchers": 11794,
    "has_security_policy": false,
    "default_branch": "v3.x",
    "protected_branches": [
      "v1.0",
      "v1.1",
      "v1.2",
      "v1.3",
      "v1.4",
      "v1.5",
      "v1.6",
      "v1.7",
      "v1.8",
      "v1.9",
      "v1.10",
      "v1.11",
      "v1.12",
      "v1.13",
      "v1.14",
      "v1.15",
      "v1.16",
      "v1.17",
      "v1.18",
      "v1.19",
      "v1.20",
      "v2.0",
      "v2.1",
      "v2.2",
      "v2.3",
      "v2.4",
      "v2.5",
      "v2.6",
      "v2.7"
    ],
    "languages": {
      "Java": 14777563,
      "Vue": 5725884,
      "TypeScript": 1961294,
      "MAXScript": 77425,
      "Less": 39452,
      "JavaScript": 34573,
      "CSS": 23345,
      "Dockerfile": 993,
      "HTML": 538,
      "Shell": 181
    },
    "commit_activity": {
      "total_commits_last_year": 4657,
      "avg_commits_per_week": 89.5576923076923,
      "days_active_last_year": 266
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:45:44.841792"
  }
}