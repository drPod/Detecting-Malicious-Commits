{
  "cve_id": "CVE-2022-23556",
  "github_data": {
    "repository": "codeigniter4/CodeIgniter4",
    "fix_commit": "5ca8c99b2db09a2a08a013836628028ddc984659",
    "related_commits": [
      "5ca8c99b2db09a2a08a013836628028ddc984659",
      "5ca8c99b2db09a2a08a013836628028ddc984659"
    ],
    "patch_url": "https://github.com/codeigniter4/CodeIgniter4/commit/5ca8c99b2db09a2a08a013836628028ddc984659.patch",
    "fix_commit_details": {
      "sha": "5ca8c99b2db09a2a08a013836628028ddc984659",
      "commit_date": "2022-12-22T02:32:22Z",
      "author": {
        "login": "MGatner",
        "type": "User",
        "stats": {
          "total_commits": 1465,
          "average_weekly_commits": 2.983706720977597,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 188
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-ghw3-5qvm-3mqc",
        "length": 58,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 426,
        "additions": 314,
        "deletions": 112
      },
      "files": [
        {
          "filename": "app/Config/App.php",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -332,18 +332,21 @@ class App extends BaseConfig\n      *\n      * If your server is behind a reverse proxy, you must whitelist the proxy\n      * IP addresses from which CodeIgniter should trust headers such as\n-     * HTTP_X_FORWARDED_FOR and HTTP_CLIENT_IP in order to properly identify\n+     * X-Forwarded-For or Client-IP in order to properly identify\n      * the visitor's IP address.\n      *\n-     * You can use both an array or a comma-separated list of proxy addresses,\n-     * as well as specifying whole subnets. Here are a few examples:\n+     * You need to set a proxy IP address or IP address with subnets and\n+     * the HTTP header for the client IP address.\n      *\n-     * Comma-separated: '10.0.1.200,192.168.5.0/24'\n-     * Array: ['10.0.1.200', '192.168.5.0/24']\n+     * Here are some examples:\n+     *     [\n+     *         '10.0.1.200'     => 'X-Forwarded-For',\n+     *         '192.168.5.0/24' => 'X-Real-IP',\n+     *     ]\n      *\n-     * @var string|string[]\n+     * @var array<string, string>\n      */\n-    public $proxyIPs = '';\n+    public $proxyIPs = [];\n \n     /**\n      * --------------------------------------------------------------------------"
        },
        {
          "filename": "phpstan-baseline.neon.dist",
          "status": "modified",
          "additions": 0,
          "deletions": 5,
          "patch": "@@ -500,11 +500,6 @@ parameters:\n \t\t\tcount: 1\n \t\t\tpath: system/HTTP/RedirectResponse.php\n \n-\t\t-\n-\t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:\\\\$proxyIPs \\\\(array\\\\|string\\\\) on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: system/HTTP/Request.php\n-\n \t\t-\n \t\t\tmessage: \"#^Property CodeIgniter\\\\\\\\HTTP\\\\\\\\Request\\\\:\\\\:\\\\$uri \\\\(CodeIgniter\\\\\\\\HTTP\\\\\\\\URI\\\\) in empty\\\\(\\\\) is not falsy\\\\.$#\"\n \t\t\tcount: 1"
        },
        {
          "filename": "system/HTTP/Request.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ class Request extends Message implements MessageInterface, RequestInterface\n     /**\n      * Proxy IPs\n      *\n-     * @var array|string\n+     * @var array<string, string>\n      *\n      * @deprecated Check the App config directly\n      */"
        },
        {
          "filename": "system/HTTP/RequestTrait.php",
          "status": "modified",
          "additions": 89,
          "deletions": 65,
          "patch": "@@ -11,6 +11,7 @@\n \n namespace CodeIgniter\\HTTP;\n \n+use CodeIgniter\\Exceptions\\ConfigException;\n use CodeIgniter\\Validation\\FormatRules;\n \n /**\n@@ -43,7 +44,9 @@ trait RequestTrait\n     /**\n      * Gets the user's IP address.\n      *\n-     * @return string IP address\n+     * @return string IP address if it can be detected, or empty string.\n+     *                If the IP address is not a valid IP address,\n+     *                then will return '0.0.0.0'.\n      */\n     public function getIPAddress(): string\n     {\n@@ -59,93 +62,86 @@ public function getIPAddress(): string\n         /**\n          * @deprecated $this->proxyIPs property will be removed in the future\n          */\n+        // @phpstan-ignore-next-line\n         $proxyIPs = $this->proxyIPs ?? config('App')->proxyIPs;\n-        if (! empty($proxyIPs) && ! is_array($proxyIPs)) {\n-            $proxyIPs = explode(',', str_replace(' ', '', $proxyIPs));\n+        if (! empty($proxyIPs)) {\n+            // @phpstan-ignore-next-line\n+            if (! is_array($proxyIPs) || is_int(array_key_first($proxyIPs))) {\n+                throw new ConfigException(\n+                    'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'\n+                );\n+            }\n         }\n \n         $this->ipAddress = $this->getServer('REMOTE_ADDR');\n \n         if ($proxyIPs) {\n-            foreach (['x-forwarded-for', 'client-ip', 'x-client-ip', 'x-cluster-client-ip'] as $header) {\n-                $spoof     = null;\n-                $headerObj = $this->header($header);\n-\n-                if ($headerObj !== null) {\n-                    $spoof = $headerObj->getValue();\n-\n-                    // Some proxies typically list the whole chain of IP\n-                    // addresses through which the client has reached us.\n-                    // e.g. client_ip, proxy_ip1, proxy_ip2, etc.\n-                    sscanf($spoof, '%[^,]', $spoof);\n-\n-                    if (! $ipValidator($spoof)) {\n-                        $spoof = null;\n-                    } else {\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            if ($spoof) {\n-                foreach ($proxyIPs as $proxyIP) {\n-                    // Check if we have an IP address or a subnet\n-                    if (strpos($proxyIP, '/') === false) {\n-                        // An IP address (and not a subnet) is specified.\n-                        // We can compare right away.\n-                        if ($proxyIP === $this->ipAddress) {\n+            // @TODO Extract all this IP address logic to another class.\n+            foreach ($proxyIPs as $proxyIP => $header) {\n+                // Check if we have an IP address or a subnet\n+                if (strpos($proxyIP, '/') === false) {\n+                    // An IP address (and not a subnet) is specified.\n+                    // We can compare right away.\n+                    if ($proxyIP === $this->ipAddress) {\n+                        $spoof = $this->getClientIP($header);\n+\n+                        if ($spoof !== null) {\n                             $this->ipAddress = $spoof;\n                             break;\n                         }\n-\n-                        continue;\n                     }\n \n-                    // We have a subnet ... now the heavy lifting begins\n-                    if (! isset($separator)) {\n-                        $separator = $ipValidator($this->ipAddress, 'ipv6') ? ':' : '.';\n-                    }\n+                    continue;\n+                }\n \n-                    // If the proxy entry doesn't match the IP protocol - skip it\n-                    if (strpos($proxyIP, $separator) === false) {\n-                        continue;\n-                    }\n+                // We have a subnet ... now the heavy lifting begins\n+                if (! isset($separator)) {\n+                    $separator = $ipValidator($this->ipAddress, 'ipv6') ? ':' : '.';\n+                }\n \n-                    // Convert the REMOTE_ADDR IP address to binary, if needed\n-                    if (! isset($ip, $sprintf)) {\n-                        if ($separator === ':') {\n-                            // Make sure we're have the \"full\" IPv6 format\n-                            $ip = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($this->ipAddress, ':')), $this->ipAddress));\n+                // If the proxy entry doesn't match the IP protocol - skip it\n+                if (strpos($proxyIP, $separator) === false) {\n+                    continue;\n+                }\n \n-                            for ($j = 0; $j < 8; $j++) {\n-                                $ip[$j] = intval($ip[$j], 16);\n-                            }\n+                // Convert the REMOTE_ADDR IP address to binary, if needed\n+                if (! isset($ip, $sprintf)) {\n+                    if ($separator === ':') {\n+                        // Make sure we're having the \"full\" IPv6 format\n+                        $ip = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($this->ipAddress, ':')), $this->ipAddress));\n \n-                            $sprintf = '%016b%016b%016b%016b%016b%016b%016b%016b';\n-                        } else {\n-                            $ip      = explode('.', $this->ipAddress);\n-                            $sprintf = '%08b%08b%08b%08b';\n+                        for ($j = 0; $j < 8; $j++) {\n+                            $ip[$j] = intval($ip[$j], 16);\n                         }\n \n-                        $ip = vsprintf($sprintf, $ip);\n+                        $sprintf = '%016b%016b%016b%016b%016b%016b%016b%016b';\n+                    } else {\n+                        $ip      = explode('.', $this->ipAddress);\n+                        $sprintf = '%08b%08b%08b%08b';\n                     }\n \n-                    // Split the netmask length off the network address\n-                    sscanf($proxyIP, '%[^/]/%d', $netaddr, $masklen);\n+                    $ip = vsprintf($sprintf, $ip);\n+                }\n \n-                    // Again, an IPv6 address is most likely in a compressed form\n-                    if ($separator === ':') {\n-                        $netaddr = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($netaddr, ':')), $netaddr));\n+                // Split the netmask length off the network address\n+                sscanf($proxyIP, '%[^/]/%d', $netaddr, $masklen);\n \n-                        for ($i = 0; $i < 8; $i++) {\n-                            $netaddr[$i] = intval($netaddr[$i], 16);\n-                        }\n-                    } else {\n-                        $netaddr = explode('.', $netaddr);\n+                // Again, an IPv6 address is most likely in a compressed form\n+                if ($separator === ':') {\n+                    $netaddr = explode(':', str_replace('::', str_repeat(':', 9 - substr_count($netaddr, ':')), $netaddr));\n+\n+                    for ($i = 0; $i < 8; $i++) {\n+                        $netaddr[$i] = intval($netaddr[$i], 16);\n                     }\n+                } else {\n+                    $netaddr = explode('.', $netaddr);\n+                }\n+\n+                // Convert to binary and finally compare\n+                if (strncmp($ip, vsprintf($sprintf, $netaddr), $masklen) === 0) {\n+                    $spoof = $this->getClientIP($header);\n \n-                    // Convert to binary and finally compare\n-                    if (strncmp($ip, vsprintf($sprintf, $netaddr), $masklen) === 0) {\n+                    if ($spoof !== null) {\n                         $this->ipAddress = $spoof;\n                         break;\n                     }\n@@ -160,6 +156,34 @@ public function getIPAddress(): string\n         return empty($this->ipAddress) ? '' : $this->ipAddress;\n     }\n \n+    /**\n+     * Gets the client IP address from the HTTP header.\n+     */\n+    private function getClientIP(string $header): ?string\n+    {\n+        $ipValidator = [\n+            new FormatRules(),\n+            'valid_ip',\n+        ];\n+        $spoof     = null;\n+        $headerObj = $this->header($header);\n+\n+        if ($headerObj !== null) {\n+            $spoof = $headerObj->getValue();\n+\n+            // Some proxies typically list the whole chain of IP\n+            // addresses through which the client has reached us.\n+            // e.g. client_ip, proxy_ip1, proxy_ip2, etc.\n+            sscanf($spoof, '%[^,]', $spoof);\n+\n+            if (! $ipValidator($spoof)) {\n+                $spoof = null;\n+            }\n+        }\n+\n+        return $spoof;\n+    }\n+\n     /**\n      * Fetch an item from the $_SERVER array.\n      *"
        },
        {
          "filename": "system/Test/Mock/MockAppConfig.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ class MockAppConfig extends App\n     public $cookieSecure     = false;\n     public $cookieHTTPOnly   = false;\n     public $cookieSameSite   = 'Lax';\n-    public $proxyIPs         = '';\n+    public $proxyIPs         = [];\n     public $CSRFTokenName    = 'csrf_test_name';\n     public $CSRFHeaderName   = 'X-CSRF-TOKEN';\n     public $CSRFCookieName   = 'csrf_cookie_name';"
        },
        {
          "filename": "system/Test/Mock/MockCLIConfig.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ class MockCLIConfig extends App\n     public $cookieSecure     = false;\n     public $cookieHTTPOnly   = false;\n     public $cookieSameSite   = 'Lax';\n-    public $proxyIPs         = '';\n+    public $proxyIPs         = [];\n     public $CSRFTokenName    = 'csrf_test_name';\n     public $CSRFCookieName   = 'csrf_cookie_name';\n     public $CSRFExpire       = 7200;"
        },
        {
          "filename": "tests/system/HTTP/IncomingRequestTest.php",
          "status": "modified",
          "additions": 154,
          "deletions": 14,
          "patch": "@@ -11,6 +11,7 @@\n \n namespace CodeIgniter\\HTTP;\n \n+use CodeIgniter\\Exceptions\\ConfigException;\n use CodeIgniter\\HTTP\\Exceptions\\HTTPException;\n use CodeIgniter\\HTTP\\Files\\UploadedFile;\n use CodeIgniter\\Test\\CIUnitTestCase;\n@@ -714,24 +715,64 @@ public function testGetIPAddressThruProxy()\n         $expected                        = '123.123.123.123';\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n         $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n-        $config                          = new App();\n-        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n \n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '10.0.1.200'     => 'X-Forwarded-For',\n+            '192.168.5.0/24' => 'X-Forwarded-For',\n+        ];\n         $this->request = new Request($config);\n         $this->request->populateHeaders();\n \n         // we should see the original forwarded address\n         $this->assertSame($expected, $this->request->getIPAddress());\n     }\n \n-    public function testGetIPAddressThruProxyInvalid()\n+    public function testGetIPAddressThruProxyIPv6()\n+    {\n+        $expected                        = '123.123.123.123';\n+        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n+        $_SERVER['REMOTE_ADDR']          = '2001:db8::2:1';\n+\n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '2001:db8::2:1' => 'X-Forwarded-For',\n+        ];\n+        $this->request = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        // we should see the original forwarded address\n+        $this->assertSame($expected, $this->request->getIPAddress());\n+    }\n+\n+    public function testGetIPAddressThruProxyInvalidIPAddress()\n     {\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n         $expected                        = '10.0.1.200';\n         $_SERVER['REMOTE_ADDR']          = $expected;\n-        $config                          = new App();\n-        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n \n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '10.0.1.200'     => 'X-Forwarded-For',\n+            '192.168.5.0/24' => 'X-Forwarded-For',\n+        ];\n+        $this->request = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        // spoofed address invalid\n+        $this->assertSame($expected, $this->request->getIPAddress());\n+    }\n+\n+    public function testGetIPAddressThruProxyInvalidIPAddressIPv6()\n+    {\n+        $_SERVER['HTTP_X_FORWARDED_FOR'] = '2001:xyz::1';\n+        $expected                        = '2001:db8::2:1';\n+        $_SERVER['REMOTE_ADDR']          = $expected;\n+\n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '2001:db8::2:1' => 'X-Forwarded-For',\n+        ];\n         $this->request = new Request($config);\n         $this->request->populateHeaders();\n \n@@ -744,9 +785,29 @@ public function testGetIPAddressThruProxyNotWhitelisted()\n         $expected                        = '10.10.1.200';\n         $_SERVER['REMOTE_ADDR']          = $expected;\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n-        $config                          = new App();\n-        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n \n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '10.0.1.200'     => 'X-Forwarded-For',\n+            '192.168.5.0/24' => 'X-Forwarded-For',\n+        ];\n+        $this->request = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        // spoofed address invalid\n+        $this->assertSame($expected, $this->request->getIPAddress());\n+    }\n+\n+    public function testGetIPAddressThruProxyNotWhitelistedIPv6()\n+    {\n+        $expected                        = '2001:db8::2:2';\n+        $_SERVER['REMOTE_ADDR']          = $expected;\n+        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.456.23.123';\n+\n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '2001:db8::2:1' => 'X-Forwarded-For',\n+        ];\n         $this->request = new Request($config);\n         $this->request->populateHeaders();\n \n@@ -759,29 +820,108 @@ public function testGetIPAddressThruProxySubnet()\n         $expected                        = '123.123.123.123';\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n         $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n-        $config                          = new App();\n-        $config->proxyIPs                = ['192.168.5.0/24'];\n \n-        $this->request = new Request($config);\n+        $config           = new App();\n+        $config->proxyIPs = ['192.168.5.0/24' => 'X-Forwarded-For'];\n+        $this->request    = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        // we should see the original forwarded address\n+        $this->assertSame($expected, $this->request->getIPAddress());\n+    }\n+\n+    public function testGetIPAddressThruProxySubnetIPv6()\n+    {\n+        $expected                        = '123.123.123.123';\n+        $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n+        $_SERVER['REMOTE_ADDR']          = '2001:db8:1234:ffff:ffff:ffff:ffff:ffff';\n+\n+        $config           = new App();\n+        $config->proxyIPs = ['2001:db8:1234::/48' => 'X-Forwarded-For'];\n+        $this->request    = new Request($config);\n         $this->request->populateHeaders();\n \n         // we should see the original forwarded address\n         $this->assertSame($expected, $this->request->getIPAddress());\n     }\n \n-    public function testGetIPAddressThruProxyOutofSubnet()\n+    public function testGetIPAddressThruProxyOutOfSubnet()\n     {\n         $expected                        = '192.168.5.21';\n         $_SERVER['REMOTE_ADDR']          = $expected;\n-        $config                          = new App();\n-        $config->proxyIPs                = ['192.168.5.0/28'];\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';\n-        $this->request                   = new Request($config);\n+\n+        $config           = new App();\n+        $config->proxyIPs = ['192.168.5.0/28' => 'X-Forwarded-For'];\n+        $this->request    = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        // we should see the original forwarded address\n+        $this->assertSame($expected, $this->request->getIPAddress());\n+    }\n+\n+    public function testGetIPAddressThruProxyOutOfSubnetIPv6()\n+    {\n+        $expected                        = '2001:db8:1235:ffff:ffff:ffff:ffff:ffff';\n+        $_SERVER['REMOTE_ADDR']          = $expected;\n+        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';\n+\n+        $config           = new App();\n+        $config->proxyIPs = ['2001:db8:1234::/48' => 'X-Forwarded-For'];\n+        $this->request    = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        // we should see the original forwarded address\n+        $this->assertSame($expected, $this->request->getIPAddress());\n+    }\n+\n+    public function testGetIPAddressThruProxyBothIPv4AndIPv6()\n+    {\n+        $expected                        = '2001:db8:1235:ffff:ffff:ffff:ffff:ffff';\n+        $_SERVER['REMOTE_ADDR']          = $expected;\n+        $_SERVER['HTTP_X_FORWARDED_FOR'] = '123.123.123.123';\n+\n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '192.168.5.0/28'     => 'X-Forwarded-For',\n+            '2001:db8:1234::/48' => 'X-Forwarded-For',\n+        ];\n+        $this->request = new Request($config);\n         $this->request->populateHeaders();\n \n         // we should see the original forwarded address\n         $this->assertSame($expected, $this->request->getIPAddress());\n     }\n \n+    public function testGetIPAddressThruProxyInvalidConfigString()\n+    {\n+        $this->expectException(ConfigException::class);\n+        $this->expectExceptionMessage(\n+            'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'\n+        );\n+\n+        $config           = new App();\n+        $config->proxyIPs = '192.168.5.0/28';\n+        $this->request    = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        $this->request->getIPAddress();\n+    }\n+\n+    public function testGetIPAddressThruProxyInvalidConfigArray()\n+    {\n+        $this->expectException(ConfigException::class);\n+        $this->expectExceptionMessage(\n+            'You must set an array with Proxy IP address key and HTTP header name value in Config\\App::$proxyIPs.'\n+        );\n+\n+        $config           = new App();\n+        $config->proxyIPs = ['192.168.5.0/28'];\n+        $this->request    = new Request($config);\n+        $this->request->populateHeaders();\n+\n+        $this->request->getIPAddress();\n+    }\n+\n     // @TODO getIPAddress should have more testing, to 100% code coverage\n }"
        },
        {
          "filename": "tests/system/HTTP/RequestTest.php",
          "status": "modified",
          "additions": 29,
          "deletions": 15,
          "patch": "@@ -609,10 +609,14 @@ public function testGetIPAddressThruProxy()\n     {\n         $expected                        = '123.123.123.123';\n         $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n-        $config                          = new App();\n-        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n-        $this->request                   = new Request($config);\n+\n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '10.0.1.200'     => 'X-Forwarded-For',\n+            '192.168.5.0/24' => 'X-Forwarded-For',\n+        ];\n+        $this->request = new Request($config);\n         $this->request->populateHeaders();\n \n         // we should see the original forwarded address\n@@ -623,10 +627,14 @@ public function testGetIPAddressThruProxyInvalid()\n     {\n         $expected                        = '123.456.23.123';\n         $_SERVER['REMOTE_ADDR']          = '10.0.1.200';\n-        $config                          = new App();\n-        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n-        $this->request                   = new Request($config);\n+        $config                          = new App();\n+        $config->proxyIPs                = [\n+            '10.0.1.200'     => 'X-Forwarded-For',\n+            '192.168.5.0/24' => 'X-Forwarded-For',\n+        ];\n+\n+        $this->request = new Request($config);\n         $this->request->populateHeaders();\n \n         // spoofed address invalid\n@@ -637,10 +645,14 @@ public function testGetIPAddressThruProxyNotWhitelisted()\n     {\n         $expected                        = '123.456.23.123';\n         $_SERVER['REMOTE_ADDR']          = '10.10.1.200';\n-        $config                          = new App();\n-        $config->proxyIPs                = '10.0.1.200,192.168.5.0/24';\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n-        $this->request                   = new Request($config);\n+\n+        $config           = new App();\n+        $config->proxyIPs = [\n+            '10.0.1.200'     => 'X-Forwarded-For',\n+            '192.168.5.0/24' => 'X-Forwarded-For',\n+        ];\n+        $this->request = new Request($config);\n         $this->request->populateHeaders();\n \n         // spoofed address invalid\n@@ -651,10 +663,11 @@ public function testGetIPAddressThruProxySubnet()\n     {\n         $expected                        = '123.123.123.123';\n         $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n-        $config                          = new App();\n-        $config->proxyIPs                = ['192.168.5.0/24'];\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n-        $this->request                   = new Request($config);\n+\n+        $config           = new App();\n+        $config->proxyIPs = ['192.168.5.0/24' => 'X-Forwarded-For'];\n+        $this->request    = new Request($config);\n         $this->request->populateHeaders();\n \n         // we should see the original forwarded address\n@@ -665,10 +678,11 @@ public function testGetIPAddressThruProxyOutofSubnet()\n     {\n         $expected                        = '123.123.123.123';\n         $_SERVER['REMOTE_ADDR']          = '192.168.5.21';\n-        $config                          = new App();\n-        $config->proxyIPs                = ['192.168.5.0/28'];\n         $_SERVER['HTTP_X_FORWARDED_FOR'] = $expected;\n-        $this->request                   = new Request($config);\n+\n+        $config           = new App();\n+        $config->proxyIPs = ['192.168.5.0/28' => 'X-Forwarded-For'];\n+        $this->request    = new Request($config);\n         $this->request->populateHeaders();\n \n         // we should see the original forwarded address"
        },
        {
          "filename": "user_guide_src/source/changelogs/v4.2.11.rst",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -9,6 +9,16 @@ Release Date: December 21, 2022\n     :local:\n     :depth: 2\n \n+SECURITY\n+********\n+\n+- *Attackers may spoof IP address when using proxy* was fixed. See the `Security advisory GHSA-ghw3-5qvm-3mqc <https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-ghw3-5qvm-3mqc>`_ for more information.\n+\n+BREAKING\n+********\n+\n+- The ``Config\\App::$proxyIPs`` value format has been changed. See :ref:`Upgrading Guide <upgrade-4211-proxyips>`.\n+\n Bugs Fixed\n **********\n "
        },
        {
          "filename": "user_guide_src/source/incoming/request.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -28,9 +28,8 @@ Class Reference\n \n         .. literalinclude:: request/001.php\n \n-        .. important:: This method takes into account the ``App->proxyIPs`` setting and will\n-            return the reported HTTP_X_FORWARDED_FOR, HTTP_CLIENT_IP, HTTP_X_CLIENT_IP, or\n-            HTTP_X_CLUSTER_CLIENT_IP address for the allowed IP address.\n+        .. important:: This method takes into account the ``Config\\App::$proxyIPs`` setting and will\n+            return the reported client IP address by the HTTP header for the allowed IP address.\n \n     .. php:method:: isValidIP($ip[, $which = ''])\n "
        },
        {
          "filename": "user_guide_src/source/installation/upgrade_4211.rst",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -12,6 +12,23 @@ Please refer to the upgrade instructions corresponding to your installation meth\n     :local:\n     :depth: 2\n \n+Breaking Changes\n+****************\n+\n+.. _upgrade-4211-proxyips:\n+\n+Config\\\\App::$proxyIPs\n+======================\n+\n+The config value format has been changed. Now you must set your proxy IP address and the HTTP header name for the client IP address pair as an array::\n+\n+    public $proxyIPs = [\n+            '10.0.1.200'     => 'X-Forwarded-For',\n+            '192.168.5.0/24' => 'X-Forwarded-For',\n+    ];\n+\n+``ConfigException`` will be thrown for old format config value.\n+\n Project Files\n *************\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d47a25850c2360387023164bd05222fb5e656c67",
            "date": "2025-01-14T03:42:27Z",
            "author_login": "neznaika0"
          },
          {
            "sha": "a3704a1df4e78e55d17b33b5e13ad9f45a4b6a69",
            "date": "2025-01-13T04:49:37Z",
            "author_login": "neznaika0"
          },
          {
            "sha": "c3ac0f948390965490bc8caf7cfec63cee72f6e4",
            "date": "2025-01-13T03:03:02Z",
            "author_login": "paulbalandan"
          },
          {
            "sha": "155f1c14de69cf144081df008f3aeb36789b724c",
            "date": "2025-01-13T02:52:54Z",
            "author_login": "neznaika0"
          },
          {
            "sha": "231b6b0ce05995163046d0adfc860d093215fff7",
            "date": "2025-01-11T15:47:23Z",
            "author_login": "samsonasik"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-345",
    "description": "CodeIgniter is a PHP full-stack web framework. This vulnerability may allow attackers to spoof their IP address when the server is behind a reverse proxy. This issue has been patched, please upgrade to version 4.2.11 or later, and configure `Config\\App::$proxyIPs`. As a workaround, do not use `$request->getIPAddress()`.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-12-22T19:15:09.090",
    "last_modified": "2024-11-21T06:48:48.380",
    "fix_date": "2022-12-22T02:32:22Z"
  },
  "references": [
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/commit/5ca8c99b2db09a2a08a013836628028ddc984659",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-ghw3-5qvm-3mqc",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/commit/5ca8c99b2db09a2a08a013836628028ddc984659",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-ghw3-5qvm-3mqc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.199416",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "CodeIgniter4",
    "owner": "codeigniter4",
    "created_at": "2015-08-27T03:32:45Z",
    "updated_at": "2025-01-14T03:42:33Z",
    "pushed_at": "2025-01-14T05:50:28Z",
    "size": 319188,
    "stars": 5473,
    "forks": 1907,
    "open_issues": 85,
    "watchers": 5473,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "4.6",
      "develop"
    ],
    "languages": {
      "PHP": 6346790,
      "CSS": 44934,
      "JavaScript": 38194,
      "SCSS": 17971,
      "Shell": 9817,
      "Python": 5182,
      "Smarty": 4865,
      "HTML": 4653,
      "Clojure": 2862,
      "Batchfile": 764,
      "Makefile": 638,
      "Hack": 106
    },
    "commit_activity": {
      "total_commits_last_year": 2279,
      "avg_commits_per_week": 43.82692307692308,
      "days_active_last_year": 270
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:18:02.605920"
  }
}