{
  "cve_id": "CVE-2022-23564",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "14fea662350e7c26eb5fe1be2ac31704e5682ee6",
    "related_commits": [
      "14fea662350e7c26eb5fe1be2ac31704e5682ee6",
      "14fea662350e7c26eb5fe1be2ac31704e5682ee6"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/14fea662350e7c26eb5fe1be2ac31704e5682ee6.patch",
    "fix_commit_details": {
      "sha": "14fea662350e7c26eb5fe1be2ac31704e5682ee6",
      "commit_date": "2021-11-06T17:22:51Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1590,
          "average_weekly_commits": 3.3125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 214
        }
      },
      "commit_message": {
        "title": "Prevent `CHECK`-fail when decoding resource handles from proto",
        "length": 392,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 80,
        "additions": 72,
        "deletions": 8
      },
      "files": [
        {
          "filename": "tensorflow/core/framework/BUILD",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -734,7 +734,9 @@ cc_library(\n         \"//tensorflow/core/lib/core:errors\",\n         \"//tensorflow/core/lib/strings:strcat\",\n         \"//tensorflow/core/platform:casts\",\n+        \"//tensorflow/core/platform:errors\",\n         \"//tensorflow/core/platform:intrusive_ptr\",\n+        \"//tensorflow/core/platform:macros\",\n         \"//tensorflow/core/platform:statusor\",\n         \"//tensorflow/core/platform:tensor_coding\",\n         \"//tensorflow/core/platform:types\","
        },
        {
          "filename": "tensorflow/core/framework/resource_handle.cc",
          "status": "modified",
          "additions": 24,
          "deletions": 7,
          "patch": "@@ -17,8 +17,11 @@ limitations under the License.\n \n #include \"absl/strings/str_format.h\"\n #include \"tensorflow/core/framework/resource_handle.pb.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n #include \"tensorflow/core/lib/strings/strcat.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n+#include \"tensorflow/core/platform/macros.h\"\n \n namespace tensorflow {\n \n@@ -28,7 +31,15 @@ namespace tensorflow {\n ResourceHandle::ResourceHandle() {}\n \n ResourceHandle::ResourceHandle(const ResourceHandleProto& proto) {\n-  FromProto(proto);\n+  TF_CHECK_OK(FromProto(proto));\n+}\n+\n+Status ResourceHandle::BuildResourceHandle(const ResourceHandleProto& proto,\n+                                           ResourceHandle* out) {\n+  if (out == nullptr)\n+    return errors::Internal(\n+        \"BuildResourceHandle() was called with nullptr for the output\");\n+  return out->FromProto(proto);\n }\n \n ResourceHandle::~ResourceHandle() {}\n@@ -46,7 +57,7 @@ void ResourceHandle::AsProto(ResourceHandleProto* proto) const {\n   }\n }\n \n-void ResourceHandle::FromProto(const ResourceHandleProto& proto) {\n+Status ResourceHandle::FromProto(const ResourceHandleProto& proto) {\n   set_device(proto.device());\n   set_container(proto.container());\n   set_name(proto.name());\n@@ -55,10 +66,16 @@ void ResourceHandle::FromProto(const ResourceHandleProto& proto) {\n   std::vector<DtypeAndPartialTensorShape> dtypes_and_shapes;\n   for (const auto& dtype_and_shape : proto.dtypes_and_shapes()) {\n     DataType dtype = dtype_and_shape.dtype();\n-    PartialTensorShape shape(dtype_and_shape.shape());\n+    PartialTensorShape shape;\n+    Status s = PartialTensorShape::BuildPartialTensorShape(\n+        dtype_and_shape.shape(), &shape);\n+    if (!s.ok()) {\n+      return s;\n+    }\n     dtypes_and_shapes.push_back(DtypeAndPartialTensorShape{dtype, shape});\n   }\n   dtypes_and_shapes_ = std::move(dtypes_and_shapes);\n+  return Status::OK();\n }\n \n string ResourceHandle::SerializeAsString() const {\n@@ -69,9 +86,7 @@ string ResourceHandle::SerializeAsString() const {\n \n bool ResourceHandle::ParseFromString(const string& s) {\n   ResourceHandleProto proto;\n-  const bool status = proto.ParseFromString(s);\n-  if (status) FromProto(proto);\n-  return status;\n+  return proto.ParseFromString(s) && FromProto(proto).ok();\n }\n \n string ResourceHandle::DebugString() const {\n@@ -140,7 +155,9 @@ bool DecodeResourceHandleList(std::unique_ptr<port::StringListDecoder> d,\n     if (!proto.ParseFromArray(d->Data(sizes[i]), sizes[i])) {\n       return false;\n     }\n-    ps[i].FromProto(proto);\n+    if (!ps[i].FromProto(proto).ok()) {\n+      return false;\n+    }\n   }\n   return true;\n }"
        },
        {
          "filename": "tensorflow/core/framework/resource_handle.h",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -46,6 +46,11 @@ class ResourceHandle {\n   ResourceHandle(const ResourceHandleProto& proto);\n   ~ResourceHandle();\n \n+  // Use this factory method if the `proto` comes from user controlled input, to\n+  // prevent a denial of service.\n+  static Status BuildResourceHandle(const ResourceHandleProto& proto,\n+                                    ResourceHandle* out);\n+\n   // Unique name for the device containing the resource.\n   const std::string& device() const { return device_; }\n \n@@ -91,7 +96,7 @@ class ResourceHandle {\n \n   // Conversion to and from ResourceHandleProto\n   void AsProto(ResourceHandleProto* proto) const;\n-  void FromProto(const ResourceHandleProto& proto);\n+  Status FromProto(const ResourceHandleProto& proto);\n \n   // Serialization via ResourceHandleProto\n   std::string SerializeAsString() const;"
        },
        {
          "filename": "tensorflow/core/framework/tensor.cc",
          "status": "modified",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -537,6 +537,46 @@ TensorBuffer* FromProtoField(Allocator* a, const TensorProto& in, int64_t n) {\n   return buf;\n }\n \n+// Separate implementation for `ResourceHandle` to handle the case when the\n+// proto for the resource is invalid. See `resource_handle.h` constructor and\n+// static factory builder.\n+template <>\n+TensorBuffer* FromProtoField<ResourceHandle>(Allocator* a,\n+                                             const TensorProto& in, int64_t n) {\n+  CHECK_GT(n, 0);\n+  Buffer<ResourceHandle>* buf = new Buffer<ResourceHandle>(a, n);\n+  ResourceHandle* data = buf->template base<ResourceHandle>();\n+  if (data == nullptr) {\n+    buf->Unref();\n+    return nullptr;\n+  }\n+  const int64_t in_n = ProtoHelper<ResourceHandle>::NumElements(in);\n+  if (in_n <= 0) {\n+    std::fill_n(data, n, ResourceHandle());\n+  } else {\n+    // If tensor shape says we have n < in_n elements in the output tensor\n+    // then make sure to only decode the first n out of the in_n elements in the\n+    // in tensors. In all other cases, we decode all in_n elements of in and set\n+    // the remaining elements up to n to be the default ResourceHandle() value.\n+    const int64_t real_n = n < in_n ? n : in_n;\n+    for (int64_t i = 0; i < real_n; ++i) {\n+      Status s = ResourceHandle::BuildResourceHandle(in.resource_handle_val(i),\n+                                                     &data[i]);\n+      if (!s.ok()) {\n+        LOG(ERROR) << \"Could not decode resource handle from proto \\\"\"\n+                   << in.resource_handle_val(i).ShortDebugString()\n+                   << \"\\\", returned status: \" << s.ToString();\n+        buf->Unref();\n+        return nullptr;\n+      }\n+    }\n+    for (int64_t i = in_n; i < n; ++i) {\n+      data[i] = ResourceHandle();\n+    }\n+  }\n+  return buf;\n+}\n+\n template <>\n TensorBuffer* FromProtoField<Variant>(Allocator* a, const TensorProto& in,\n                                       int64_t n) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b13ee8b852a232dc6dd339e0de4e22f735136b7a",
            "date": "2025-01-14T16:59:22Z",
            "author_login": "Moerafaat"
          },
          {
            "sha": "d65ab241c92b18a8e82a53b03575775279713930",
            "date": "2025-01-14T16:17:42Z",
            "author_login": "akuegel"
          },
          {
            "sha": "7f1cdb4f94bf497a8f81b47cb0b0f6f33dfcdf2f",
            "date": "2025-01-14T15:43:26Z",
            "author_login": "vwbaker"
          },
          {
            "sha": "8f888e57d9fab1d2e4127fdeaabc3f8976471065",
            "date": "2025-01-14T15:28:59Z",
            "author_login": "ddunl"
          },
          {
            "sha": "4e74930bd620da4ea2bb691359aaa9b2dc6b0605",
            "date": "2025-01-14T15:28:20Z",
            "author_login": "tensorflower-gardener"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-617",
    "description": "Tensorflow is an Open Source Machine Learning Framework. When decoding a resource handle tensor from protobuf, a TensorFlow process can encounter cases where a `CHECK` assertion is invalidated based on user controlled arguments. This allows attackers to cause denial of services in TensorFlow processes. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-04T23:15:13.953",
    "last_modified": "2024-11-21T06:48:49.417",
    "fix_date": "2021-11-06T17:22:51Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/14fea662350e7c26eb5fe1be2ac31704e5682ee6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/14fea662350e7c26eb5fe1be2ac31704e5682ee6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rcj-c8pj-v3m3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.138813",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}