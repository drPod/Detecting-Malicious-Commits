{
  "cve_id": "CVE-2022-23600",
  "github_data": {
    "repository": "fleetdm/fleet",
    "fix_commit": "35d5a7b285f15ddd47486fa656e8b1acf3d48374",
    "related_commits": [
      "35d5a7b285f15ddd47486fa656e8b1acf3d48374",
      "35d5a7b285f15ddd47486fa656e8b1acf3d48374"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "35d5a7b285f15ddd47486fa656e8b1acf3d48374",
      "commit_date": "2022-02-02T23:50:09Z",
      "author": {
        "login": "chiiph",
        "type": "User",
        "stats": {
          "total_commits": 291,
          "average_weekly_commits": 0.6539325842696629,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 59
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-ch68-7cf4-35vr",
        "length": 196,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 81,
        "additions": 63,
        "deletions": 18
      },
      "files": [
        {
          "filename": "changes/sso-check-audience",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+* Check for audience restrictions when validating a SAML request."
        },
        {
          "filename": "server/service/service_sessions.go",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -156,7 +156,11 @@ func (svc *Service) CallbackSSO(ctx context.Context, auth fleet.Auth) (*fleet.SS\n \t}\n \n \t// Validate response\n-\tvalidator, err := sso.NewValidator(*metadata)\n+\tvalidator, err := sso.NewValidator(*metadata, sso.WithExpectedAudience(\n+\t\tappConfig.SSOSettings.EntityID,\n+\t\tappConfig.ServerSettings.ServerURL,\n+\t\tappConfig.ServerSettings.ServerURL+svc.config.Server.URLPrefix+\"/api/v1/fleet/sso/callback\", // ACS\n+\t))\n \tif err != nil {\n \t\treturn nil, ctxerr.Wrap(ctx, err, \"create validator from metadata\")\n \t}"
        },
        {
          "filename": "server/sso/types.go",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -205,9 +205,14 @@ type Assertion struct {\n }\n \n type Conditions struct {\n-\tXMLName      xml.Name\n-\tNotBefore    string `xml:\",attr\"`\n-\tNotOnOrAfter string `xml:\",attr\"`\n+\tXMLName             xml.Name\n+\tNotBefore           string              `xml:\",attr\"`\n+\tNotOnOrAfter        string              `xml:\",attr\"`\n+\tAudienceRestriction AudienceRestriction `xml:\"AudienceRestriction\"`\n+}\n+\n+type AudienceRestriction struct {\n+\tAudience string `xml:\"Audience\"`\n }\n \n type Subject struct {"
        },
        {
          "filename": "server/sso/validate.go",
          "status": "modified",
          "additions": 22,
          "deletions": 3,
          "patch": "@@ -24,9 +24,10 @@ type Validator interface {\n }\n \n type validator struct {\n-\tcontext  *dsig.ValidationContext\n-\tclock    *dsig.Clock\n-\tmetadata Metadata\n+\tcontext           *dsig.ValidationContext\n+\tclock             *dsig.Clock\n+\tmetadata          Metadata\n+\texpectedAudiences []string\n }\n \n func Clock(clock *dsig.Clock) func(v *validator) {\n@@ -35,6 +36,12 @@ func Clock(clock *dsig.Clock) func(v *validator) {\n \t}\n }\n \n+func WithExpectedAudience(audiences ...string) func(v *validator) {\n+\treturn func(v *validator) {\n+\t\tv.expectedAudiences = audiences\n+\t}\n+}\n+\n // NewValidator is used to validate the response to an auth request.\n // metadata is from the IDP.\n func NewValidator(metadata Metadata, opts ...func(v *validator)) (Validator, error) {\n@@ -86,6 +93,18 @@ func (v *validator) ValidateResponse(auth fleet.Auth) error {\n \tif currentTime.Before(notBefore) {\n \t\treturn errors.New(\"response too early\")\n \t}\n+\n+\tverifiesAudience := false\n+\tfor _, audience := range v.expectedAudiences {\n+\t\tif info.response.Assertion.Conditions.AudienceRestriction.Audience == audience {\n+\t\t\tverifiesAudience = true\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tif !verifiesAudience {\n+\t\treturn errors.New(\"wrong audience:\" + info.response.Assertion.Conditions.AudienceRestriction.Audience)\n+\t}\n+\n \tif auth.UserID() == \"\" {\n \t\treturn errors.New(\"missing user id\")\n \t}"
        },
        {
          "filename": "server/sso/validate_test.go",
          "status": "modified",
          "additions": 27,
          "deletions": 11,
          "patch": "@@ -49,19 +49,35 @@ func TestValidate(t *testing.T) {\n \trequire.Nil(t, err)\n \n \tclock := dsig.NewFakeClockAt(tm)\n-\tvalidator, err := NewValidator(testMetadata(), Clock(clock))\n-\trequire.Nil(t, err)\n-\trequire.NotNil(t, validator)\n \n-\tauth, err := DecodeAuthResponse(testResponse)\n-\trequire.Nil(t, err)\n+\ttestCases := []struct {\n+\t\taudiences  []string\n+\t\tshouldFail bool\n+\t}{\n+\t\t{audiences: []string{\"kolide\"}, shouldFail: false},\n+\t\t{audiences: []string{\"someotheraudience\"}, shouldFail: true},\n+\t\t{audiences: nil, shouldFail: true},\n+\t}\n \n-\tsigned, err := validator.ValidateSignature(auth)\n-\trequire.Nil(t, err)\n-\trequire.NotNil(t, signed)\n+\tfor _, tt := range testCases {\n+\t\tvalidator, err := NewValidator(testMetadata(), Clock(clock), WithExpectedAudience(tt.audiences...))\n+\t\trequire.Nil(t, err)\n+\t\trequire.NotNil(t, validator)\n \n-\terr = validator.ValidateResponse(auth)\n-\tassert.Nil(t, err)\n+\t\tauth, err := DecodeAuthResponse(testResponse)\n+\t\trequire.Nil(t, err)\n+\n+\t\tsigned, err := validator.ValidateSignature(auth)\n+\t\trequire.Nil(t, err)\n+\t\trequire.NotNil(t, signed)\n+\n+\t\terr = validator.ValidateResponse(auth)\n+\t\tif tt.shouldFail {\n+\t\t\trequire.Error(t, err)\n+\t\t} else {\n+\t\t\trequire.NoError(t, err)\n+\t\t}\n+\t}\n }\n \n func tamperedResponse(original string) (string, error) {\n@@ -169,7 +185,7 @@ func TestVerifyValidGoogleResponse(t *testing.T) {\n \ttm, err := time.Parse(time.RFC3339, \"2017-07-18T14:47:08.035Z\")\n \trequire.Nil(t, err)\n \tclock := dsig.NewFakeClockAt(tm)\n-\tvalidator, err := NewValidator(testGoogleMetadata(), Clock(clock))\n+\tvalidator, err := NewValidator(testGoogleMetadata(), Clock(clock), WithExpectedAudience(\"kolide.edilok.net\"))\n \trequire.Nil(t, err)\n \trequire.NotNil(t, validator)\n \tauth, err := DecodeAuthResponse(samlResponse)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ac03358703c41bde8101e411bfe67fabc14ac205",
            "date": "2025-01-25T00:52:58Z",
            "author_login": "rachaelshaw"
          },
          {
            "sha": "3089c960490612b95b62df389556d8db7c7ffad9",
            "date": "2025-01-25T00:14:15Z",
            "author_login": "eashaw"
          },
          {
            "sha": "d074ba2b48d771671b1d95f16f9499a75a4a62ee",
            "date": "2025-01-24T22:32:03Z",
            "author_login": "jordan-wright"
          },
          {
            "sha": "2589092849fa79968d5299a0eb617f2c2917015c",
            "date": "2025-01-24T22:28:43Z",
            "author_login": "eashaw"
          },
          {
            "sha": "c21ad843453a24f5c14b8e67d350d709c69016ed",
            "date": "2025-01-24T21:04:56Z",
            "author_login": "Sampfluger88"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-287",
    "description": "fleet is an open source device management, built on osquery. Versions prior to 4.9.1 expose a limited ability to spoof SAML authentication with missing audience verification. This impacts deployments using SAML SSO in two specific cases: 1. A malicious or compromised Service Provider (SP) could reuse the SAML response to log into Fleet as a user -- only if the user has an account with the same email in Fleet, _and_ the user signs into the malicious SP via SAML SSO from the same Identity Provider (IdP) configured with Fleet. 2. A user with an account in Fleet could reuse a SAML response intended for another SP to log into Fleet. This is only a concern if the user is blocked from Fleet in the IdP, but continues to have an account in Fleet. If the user is blocked from the IdP entirely, this cannot be exploited. Fleet 4.9.1 resolves this issue. Users unable to upgrade should: Reduce the length of sessions on your IdP to reduce the window for malicious re-use, Limit the amount of SAML Service Providers/Applications used by user accounts with access to Fleet, and When removing access to Fleet in the IdP, delete the Fleet user from Fleet as well.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-04T23:15:15.513",
    "last_modified": "2024-11-21T06:48:54.237",
    "fix_date": "2022-02-02T23:50:09Z"
  },
  "references": [
    {
      "url": "https://github.com/fleetdm/fleet/commit/35d5a7b285f15ddd47486fa656e8b1acf3d48374",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fleetdm/fleet/security/advisories/GHSA-ch68-7cf4-35vr",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fleetdm/fleet/commit/35d5a7b285f15ddd47486fa656e8b1acf3d48374",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fleetdm/fleet/security/advisories/GHSA-ch68-7cf4-35vr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.143450",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "fleet",
    "owner": "fleetdm",
    "created_at": "2020-11-03T22:17:18Z",
    "updated_at": "2025-01-26T07:02:30Z",
    "pushed_at": "2025-01-26T00:22:12Z",
    "size": 738940,
    "stars": 3434,
    "forks": 465,
    "open_issues": 2199,
    "watchers": 3434,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 17008265,
      "JavaScript": 5463823,
      "TypeScript": 4078457,
      "Augeas": 703542,
      "HCL": 412124,
      "EJS": 346613,
      "SCSS": 341789,
      "Shell": 197477,
      "Less": 75399,
      "HTML": 54731,
      "PowerShell": 48967,
      "Ruby": 42872,
      "Makefile": 34427,
      "Open Policy Agent": 28606,
      "Perl": 24185,
      "Python": 20720,
      "Dockerfile": 10660,
      "Roff": 5414,
      "PHP": 3891,
      "Smarty": 3636,
      "CSS": 3494,
      "Puppet": 2310,
      "Jinja": 94
    },
    "commit_activity": {
      "total_commits_last_year": 5409,
      "avg_commits_per_week": 104.01923076923077,
      "days_active_last_year": 297
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:03:49.100456"
  }
}