{
  "cve_id": "CVE-2022-23617",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "30c52b01559b8ef5ed1035dac7c34aaf805764d5",
    "related_commits": [
      "30c52b01559b8ef5ed1035dac7c34aaf805764d5",
      "b35ef0edd4f2ff2c974cbeef6b80fcf9b5a44554",
      "30c52b01559b8ef5ed1035dac7c34aaf805764d5",
      "b35ef0edd4f2ff2c974cbeef6b80fcf9b5a44554"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/30c52b01559b8ef5ed1035dac7c34aaf805764d5.patch",
    "fix_commit_details": {
      "sha": "30c52b01559b8ef5ed1035dac7c34aaf805764d5",
      "commit_date": "2021-03-12T16:00:38Z",
      "author": {
        "login": "tmortagne",
        "type": "User",
        "stats": {
          "total_commits": 12783,
          "average_weekly_commits": 13.39937106918239,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 847
        }
      },
      "commit_message": {
        "title": "XWIKI-18430: Page content is revealed to users that don't have rights if used as a template for the creation of another page",
        "length": 124,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 387,
        "additions": 239,
        "deletions": 148
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/AdminAction.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -129,7 +129,7 @@ public String render(XWikiContext context) throws XWikiException\n             }\n             context.put(\"tdoc\", tdoc2);\n             try {\n-                tdoc2.readFromTemplate(peform, context);\n+                readFromTemplate(tdoc2, peform.getTemplate(), context);\n             } catch (XWikiException e) {\n                 if (e.getCode() == XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY) {\n                     context.put(\"exception\", e);"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/CreateAction.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -299,7 +299,6 @@ private void initAndSaveDocument(XWikiContext context, XWikiDocument newDocument\n         String parent) throws XWikiException\n     {\n         XWiki xwiki = context.getWiki();\n-        DocumentReferenceResolver<String> resolver = getCurrentMixedDocumentReferenceResolver();\n \n         // Set the locale and default locale, considering that we're creating the original version of the document\n         // (not a translation).\n@@ -309,12 +308,11 @@ private void initAndSaveDocument(XWikiContext context, XWikiDocument newDocument\n         }\n \n         // Copy the template.\n-        DocumentReference templateReference = resolver.resolve(template);\n-        newDocument.readFromTemplate(templateReference, context);\n+        readFromTemplate(newDocument, template, context);\n \n         // Set the parent field.\n         if (!StringUtils.isEmpty(parent)) {\n-            DocumentReference parentReference = resolver.resolve(parent);\n+            DocumentReference parentReference = this.currentmixedReferenceResolver.resolve(parent);\n             newDocument.setParentReference(parentReference);\n         }\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/EditAction.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -102,7 +102,7 @@ protected XWikiDocument prepareEditedDocument(XWikiContext context) throws XWiki\n         EditForm editForm = (EditForm) context.getForm();\n \n         // Update the edited document based on the template specified on the request.\n-        editedDocument.readFromTemplate(editForm, context);\n+        readFromTemplate(editedDocument, editForm.getTemplate(), context);\n \n         // The default values from the template can be overwritten by additional request parameters.\n         updateDocumentTitleAndContentFromRequest(editedDocument, context);"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/InlineAction.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -82,7 +82,7 @@ public String render(XWikiContext context) throws XWikiException\n                 doc2.setDefaultLanguage(context.getWiki().getLanguagePreference(context));\n             }\n             try {\n-                doc2.readFromTemplate(peform, context);\n+                readFromTemplate(doc2, peform.getTemplate(), context);\n             } catch (XWikiException e) {\n                 if (e.getCode() == XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY) {\n                     return \"docalreadyexists\";\n@@ -93,7 +93,7 @@ public String render(XWikiContext context) throws XWikiException\n                 context.put(\"cdoc\", doc2);\n             } else {\n                 XWikiDocument cdoc2 = cdoc.clone();\n-                cdoc2.readFromTemplate(peform, context);\n+                readFromTemplate(cdoc2, peform.getTemplate(), context);\n                 context.put(\"cdoc\", cdoc2);\n             }\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/SaveAction.java",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -193,7 +193,7 @@ public boolean save(XWikiContext context) throws XWikiException\n         }\n \n         try {\n-            tdoc.readFromTemplate(form.getTemplate(), context);\n+            readFromTemplate(tdoc, form.getTemplate(), context);\n         } catch (XWikiException e) {\n             if (e.getCode() == XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY) {\n                 context.put(\"exception\", e);\n@@ -569,7 +569,9 @@ private boolean isAsync(XWikiRequest request)\n \n     private Job startCreateJob(EntityReference entityReference, EditForm editForm) throws XWikiException\n     {\n-        if (StringUtils.isBlank(editForm.getTemplate())) {\n+        DocumentReference templateReference = resolveTemplate(editForm.getTemplate());\n+\n+        if (templateReference == null) {\n             // No template specified, nothing more to do.\n             return null;\n         }\n@@ -585,9 +587,6 @@ private Job startCreateJob(EntityReference entityReference, EditForm editForm) t\n         // Set the target document.\n         request.setEntityReferences(Arrays.asList(entityReference));\n         // Set the template to use.\n-        DocumentReferenceResolver<String> resolver =\n-            Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n-        EntityReference templateReference = resolver.resolve(editForm.getTemplate());\n         request.setTemplateReference(templateReference);\n         // We`ve already created and populated the fields of the target document, focus only on the remaining children\n         // specified in the template."
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/XWikiAction.java",
          "status": "modified",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@\n import java.util.Vector;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n import javax.script.ScriptContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n@@ -80,6 +81,8 @@\n import org.xwiki.resource.entity.EntityResourceReference;\n import org.xwiki.resource.internal.DefaultResourceReferenceHandlerChain;\n import org.xwiki.script.ScriptContextManager;\n+import org.xwiki.security.authorization.ContextualAuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.stability.Unstable;\n import org.xwiki.template.TemplateManager;\n import org.xwiki.velocity.VelocityManager;\n@@ -150,6 +153,13 @@ public abstract class XWikiAction implements LegacyAction\n     @Inject\n     protected Execution execution;\n \n+    @Inject\n+    protected ContextualAuthorizationManager autorization;\n+\n+    @Inject\n+    @Named(\"currentmixed\")\n+    protected DocumentReferenceResolver<String> currentmixedReferenceResolver;\n+\n     /**\n      * Indicate if the action allow asynchronous display (among which the XWiki initialization).\n      */\n@@ -1136,4 +1146,53 @@ protected void setContentLength(XWikiResponse response, long length)\n         // Set the content length in the response\n         response.setContentLengthLong(length);\n     }\n+\n+    /**\n+     * Helper used resolve the template passed to the action if the current user have access to it.\n+     * \n+     * @param template the template to copy\n+     * @return the reference of the template if not empty and the current user have access to it\n+     * @since 12.10.6\n+     * @since 13.2RC1\n+     */\n+    protected DocumentReference resolveTemplate(String template)\n+    {\n+        if (StringUtils.isNotBlank(template)) {\n+            DocumentReference templateReference = this.currentmixedReferenceResolver.resolve(template);\n+\n+            // Make sure the current user have access to the template document before copying it\n+            if (this.autorization.hasAccess(Right.VIEW, templateReference)) {\n+                return templateReference;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Helper used by various actions to initialize a document by copying a template to it.\n+     * \n+     * @param document the document to update\n+     * @param template the template to copy\n+     * @param context the XWiki context\n+     * @return true if the document was updated, false otherwise (for example when the current user does not have view\n+     *         right on the template document)\n+     * @throws XWikiException when failing to copy the template\n+     * @since 12.10.6\n+     * @since 13.2RC1\n+     */\n+    @Unstable\n+    protected boolean readFromTemplate(XWikiDocument document, String template, XWikiContext context)\n+        throws XWikiException\n+    {\n+        DocumentReference templateReference = resolveTemplate(template);\n+\n+        if (templateReference != null) {\n+            document.readFromTemplate(templateReference, context);\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/CreateActionTest.java",
          "status": "modified",
          "additions": 105,
          "deletions": 110,
          "patch": "@@ -28,9 +28,8 @@\n \n import javax.inject.Provider;\n \n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.EntityReference;\n import org.xwiki.model.reference.SpaceReference;\n@@ -40,17 +39,20 @@\n import org.xwiki.query.QueryManager;\n import org.xwiki.security.authorization.Right;\n import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.objects.BaseObject;\n-import com.xpn.xwiki.test.MockitoOldcoreRule;\n+import com.xpn.xwiki.test.MockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n import com.xpn.xwiki.test.reference.ReferenceComponentList;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n@@ -65,13 +67,15 @@\n  */\n @ComponentList\n @ReferenceComponentList\n-public class CreateActionTest\n+@OldcoreTest\n+class CreateActionTest\n {\n-    @Rule\n-    public MockitoOldcoreRule oldcore = new MockitoOldcoreRule();\n+    @InjectMockitoOldcore\n+    MockitoOldcore oldcore;\n \n     XWikiURLFactory mockURLFactory;\n \n+    @InjectMockComponents\n     CreateAction action;\n \n     XWikiContext context;\n@@ -82,46 +86,44 @@ public class CreateActionTest\n \n     Query mockTemplateProvidersQuery;\n \n-    @Before\n-    public void setUp() throws Exception\n+    @BeforeEach\n+    public void beforeEach() throws Exception\n     {\n-        context = oldcore.getXWikiContext();\n+        this.context = this.oldcore.getXWikiContext();\n \n-        Utils.setComponentManager(oldcore.getMocker());\n+        Utils.setComponentManager(this.oldcore.getMocker());\n \n         QueryManager mockSecureQueryManager =\n-            oldcore.getMocker().registerMockComponent((Type) QueryManager.class, \"secure\");\n+            this.oldcore.getMocker().registerMockComponent((Type) QueryManager.class, \"secure\");\n \n-        mockTemplateProvidersQuery = mock(Query.class);\n-        when(mockSecureQueryManager.createQuery(any(), any())).thenReturn(mockTemplateProvidersQuery);\n-        when(mockTemplateProvidersQuery.execute()).thenReturn(Collections.emptyList());\n+        this.mockTemplateProvidersQuery = mock(Query.class);\n+        when(mockSecureQueryManager.createQuery(any(), any())).thenReturn(this.mockTemplateProvidersQuery);\n+        when(this.mockTemplateProvidersQuery.execute()).thenReturn(Collections.emptyList());\n \n-        when(oldcore.getMockContextualAuthorizationManager().hasAccess(any(Right.class), any(EntityReference.class)))\n-            .thenReturn(true);\n+        when(this.oldcore.getMockContextualAuthorizationManager().hasAccess(any(Right.class),\n+            any(EntityReference.class))).thenReturn(true);\n \n         Provider<DocumentReference> mockDocumentReferenceProvider =\n-            oldcore.getMocker().registerMockComponent(DocumentReference.TYPE_PROVIDER);\n+            this.oldcore.getMocker().registerMockComponent(DocumentReference.TYPE_PROVIDER);\n         when(mockDocumentReferenceProvider.get())\n             .thenReturn(new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\"));\n \n-        mockURLFactory = mock(XWikiURLFactory.class);\n-        context.setURLFactory(mockURLFactory);\n+        this.mockURLFactory = mock(XWikiURLFactory.class);\n+        this.context.setURLFactory(this.mockURLFactory);\n \n-        action = new CreateAction();\n+        this.mockRequest = mock(XWikiRequest.class);\n+        this.context.setRequest(this.mockRequest);\n \n-        mockRequest = mock(XWikiRequest.class);\n-        context.setRequest(mockRequest);\n+        this.mockResponse = mock(XWikiResponse.class);\n+        this.context.setResponse(this.mockResponse);\n \n-        mockResponse = mock(XWikiResponse.class);\n-        context.setResponse(mockResponse);\n-\n-        when(mockRequest.get(\"type\")).thenReturn(\"plain\");\n+        when(this.mockRequest.get(\"type\")).thenReturn(\"plain\");\n \n         this.oldcore.getMocker().registerMockComponent(ObservationManager.class);\n     }\n \n     @Test\n-    public void newDocumentFromURL() throws Exception\n+    void newDocumentFromURL() throws Exception\n     {\n         // new document = xwiki:X.Y\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n@@ -144,7 +146,7 @@ public void newDocumentFromURL() throws Exception\n     }\n \n     @Test\n-    public void newDocumentButNonTerminalFromURL() throws Exception\n+    void newDocumentButNonTerminalFromURL() throws Exception\n     {\n         // new document = xwiki:X.Y\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n@@ -170,7 +172,7 @@ public void newDocumentButNonTerminalFromURL() throws Exception\n     }\n \n     @Test\n-    public void newDocumentFromURLWhenNoType() throws Exception\n+    void newDocumentFromURLWhenNoType() throws Exception\n     {\n         // No type has been set by the user\n         when(mockRequest.get(\"type\")).thenReturn(null);\n@@ -193,7 +195,7 @@ public void newDocumentFromURLWhenNoType() throws Exception\n     }\n \n     @Test\n-    public void newDocumentWebHomeTopLevelFromURL() throws Exception\n+    void newDocumentWebHomeTopLevelFromURL() throws Exception\n     {\n         // new document = xwiki:X.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"WebHome\");\n@@ -217,7 +219,7 @@ public void newDocumentWebHomeTopLevelFromURL() throws Exception\n     }\n \n     @Test\n-    public void newDocumentWebHomeFromURL() throws Exception\n+    void newDocumentWebHomeFromURL() throws Exception\n     {\n         // new document = xwiki:X.Y.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n@@ -242,7 +244,7 @@ public void newDocumentWebHomeFromURL() throws Exception\n     }\n \n     @Test\n-    public void newDocumentWebHomeButTerminalFromURL() throws Exception\n+    void newDocumentWebHomeButTerminalFromURL() throws Exception\n     {\n         // new document = xwiki:X.Y.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n@@ -269,7 +271,7 @@ public void newDocumentWebHomeButTerminalFromURL() throws Exception\n     }\n \n     @Test\n-    public void newDocumentWebHomeTopLevelSpaceButTerminalFromURL() throws Exception\n+    void newDocumentWebHomeTopLevelSpaceButTerminalFromURL() throws Exception\n     {\n         // new document = xwiki:X.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"WebHome\");\n@@ -294,12 +296,11 @@ public void newDocumentWebHomeTopLevelSpaceButTerminalFromURL() throws Exception\n         // none was able to be deducted from the given information. The user needs to specify more info in order to\n         // continue.\n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void existingDocumentFromUINoName() throws Exception\n+    void existingDocumentFromUINoName() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -320,12 +321,11 @@ public void existingDocumentFromUINoName() throws Exception\n         assertEquals(\"create\", result);\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void existingDocumentFromUI() throws Exception\n+    void existingDocumentFromUI() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -353,7 +353,7 @@ public void existingDocumentFromUI() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentFromUICheckEscaping() throws Exception\n+    void existingDocumentFromUICheckEscaping() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -381,7 +381,7 @@ public void existingDocumentFromUICheckEscaping() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentTerminalFromUI() throws Exception\n+    void existingDocumentTerminalFromUI() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -410,7 +410,7 @@ public void existingDocumentTerminalFromUI() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentTerminalFromUICheckEscaping() throws Exception\n+    void existingDocumentTerminalFromUICheckEscaping() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -439,7 +439,7 @@ public void existingDocumentTerminalFromUICheckEscaping() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentTerminalFromUIButAlreadyExisting() throws Exception\n+    void existingDocumentTerminalFromUIButAlreadyExisting() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -473,12 +473,11 @@ public void existingDocumentTerminalFromUIButAlreadyExisting() throws Exception\n         assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY, exception.getCode());\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void notExistingDocumentFromUIButNameTooLong() throws Exception\n+    void notExistingDocumentFromUIButNameTooLong() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -505,12 +504,11 @@ public void notExistingDocumentFromUIButNameTooLong() throws Exception\n         assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_PATH_TOO_LONG, exception.getCode());\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void notExistingDocumentFromUIButSpaceTooLong() throws Exception\n+    void notExistingDocumentFromUIButSpaceTooLong() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -537,12 +535,11 @@ public void notExistingDocumentFromUIButSpaceTooLong() throws Exception\n         assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_PATH_TOO_LONG, exception.getCode());\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void existingDocumentFromUITopLevelDocument() throws Exception\n+    void existingDocumentFromUITopLevelDocument() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -573,7 +570,7 @@ public void existingDocumentFromUITopLevelDocument() throws Exception\n      */\n \n     @Test\n-    public void existingDocumentFromUIDeprecated() throws Exception\n+    void existingDocumentFromUIDeprecated() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -601,7 +598,7 @@ public void existingDocumentFromUIDeprecated() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentFromUIDeprecatedCheckEscaping() throws Exception\n+    void existingDocumentFromUIDeprecatedCheckEscaping() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -630,7 +627,7 @@ public void existingDocumentFromUIDeprecatedCheckEscaping() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentNonTerminalFromUIDeprecated() throws Exception\n+    void existingDocumentNonTerminalFromUIDeprecated() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -658,7 +655,7 @@ public void existingDocumentNonTerminalFromUIDeprecated() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentNonTerminalFromUIDeprecatedIgnoringPage() throws Exception\n+    void existingDocumentNonTerminalFromUIDeprecatedIgnoringPage() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -688,7 +685,7 @@ public void existingDocumentNonTerminalFromUIDeprecatedIgnoringPage() throws Exc\n     }\n \n     @Test\n-    public void existingDocumentNonTerminalFromUIDeprecatedCheckEscaping() throws Exception\n+    void existingDocumentNonTerminalFromUIDeprecatedCheckEscaping() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -721,7 +718,7 @@ public void existingDocumentNonTerminalFromUIDeprecatedCheckEscaping() throws Ex\n      */\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderExistingButNoneSelected() throws Exception\n+    void existingDocumentFromUITemplateProviderExistingButNoneSelected() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -737,7 +734,7 @@ public void existingDocumentFromUITemplateProviderExistingButNoneSelected() thro\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(\"XWiki.MyTemplateProvider\",\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST);\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList());\n \n         // Run the action\n         String result = action.render(context);\n@@ -748,8 +745,7 @@ public void existingDocumentFromUITemplateProviderExistingButNoneSelected() thro\n         assertEquals(\"create\", result);\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     /**\n@@ -845,7 +841,7 @@ private void mockTemplateDocumentExisting(String templateDocumentFullName,\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecified() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecified() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -863,7 +859,7 @@ public void existingDocumentFromUITemplateProviderSpecified() throws Exception\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST);\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList());\n \n         // Run the action\n         String result = action.render(context);\n@@ -879,7 +875,7 @@ public void existingDocumentFromUITemplateProviderSpecified() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedRestrictionExists() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedRestrictionExists() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -915,7 +911,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedRestrictionExists() t\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedRestrictionExistsOnParentSpace() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedRestrictionExistsOnParentSpace() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -953,7 +949,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedRestrictionExistsOnPa\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedButNotAllowed() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedButNotAllowed() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -988,12 +984,11 @@ public void existingDocumentFromUITemplateProviderSpecifiedButNotAllowed() throw\n         assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void newDocumentFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n+    void newDocumentFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n     {\n         // new document = xwiki:X.Y\n         DocumentReference documentReference =\n@@ -1027,12 +1022,11 @@ public void newDocumentFromURLTemplateProviderSpecifiedButNotAllowed() throws Ex\n         assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n+    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n     {\n         // new document = xwiki:X.Y.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n@@ -1065,12 +1059,11 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButNotAllowed() th\n         assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n \n         // We should not get this far so no redirect should be done, just the template will be rendered.\n-        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),\n-            any(), any(XWikiContext.class));\n+        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n     }\n \n     @Test\n-    public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminal() throws Exception\n+    void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminal() throws Exception\n     {\n         // new document = xwiki:X.Y.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n@@ -1086,7 +1079,8 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminal() throws\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, true);\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n+            true);\n \n         // Run the action\n         String result = action.render(context);\n@@ -1103,8 +1097,7 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminal() throws\n     }\n \n     @Test\n-    public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminalOverriddenFromUIToNonTerminal()\n-        throws Exception\n+    void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminalOverriddenFromUIToNonTerminal() throws Exception\n     {\n         // new document = xwiki:X.Y.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n@@ -1121,7 +1114,8 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminalOverridden\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, true);\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n+            true);\n \n         // Run the action\n         String result = action.render(context);\n@@ -1138,7 +1132,7 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminalOverridden\n     }\n \n     @Test\n-    public void newDocumentFromURLTemplateProviderSpecifiedNonTerminal() throws Exception\n+    void newDocumentFromURLTemplateProviderSpecifiedNonTerminal() throws Exception\n     {\n         // new document = xwiki:X.Y\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n@@ -1154,7 +1148,7 @@ public void newDocumentFromURLTemplateProviderSpecifiedNonTerminal() throws Exce\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n             false);\n \n         // Run the action\n@@ -1172,7 +1166,7 @@ public void newDocumentFromURLTemplateProviderSpecifiedNonTerminal() throws Exce\n     }\n \n     @Test\n-    public void newDocumentFromURLTemplateProviderSpecifiedNonTerminalButOverriddenFromUITerminal() throws Exception\n+    void newDocumentFromURLTemplateProviderSpecifiedNonTerminalButOverriddenFromUITerminal() throws Exception\n     {\n         // new document = xwiki:X.Y\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n@@ -1189,7 +1183,7 @@ public void newDocumentFromURLTemplateProviderSpecifiedNonTerminalButOverriddenF\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n             false);\n \n         // Run the action\n@@ -1207,7 +1201,7 @@ public void newDocumentFromURLTemplateProviderSpecifiedNonTerminalButOverriddenF\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateSpecified() throws Exception\n+    void existingDocumentFromUITemplateSpecified() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -1243,7 +1237,7 @@ public void existingDocumentFromUITemplateSpecified() throws Exception\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedTerminal() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedTerminal() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -1262,7 +1256,8 @@ public void existingDocumentFromUITemplateProviderSpecifiedTerminal() throws Exc\n \n         // Mock 1 existing template provider that creates terminal documents.\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, true);\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n+            true);\n \n         // Run the action\n         String result = action.render(context);\n@@ -1279,7 +1274,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedTerminal() throws Exc\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedTerminalOverridenFromUIToNonTerminal() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedTerminalOverridenFromUIToNonTerminal() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -1299,7 +1294,8 @@ public void existingDocumentFromUITemplateProviderSpecifiedTerminalOverridenFrom\n \n         // Mock 1 existing template provider that creates terminal documents.\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, true);\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n+            true);\n \n         // Run the action\n         String result = action.render(context);\n@@ -1316,7 +1312,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedTerminalOverridenFrom\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedNonTerminal() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedNonTerminal() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -1335,7 +1331,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedNonTerminal() throws\n \n         // Mock 1 existing template provider that creates terminal documents.\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n             false);\n \n         // Run the action\n@@ -1353,7 +1349,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedNonTerminal() throws\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedNonTerminalOverridenFromUIToTerminal() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedNonTerminalOverridenFromUIToTerminal() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -1373,7 +1369,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedNonTerminalOverridenF\n \n         // Mock 1 existing template provider that creates terminal documents.\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n             false);\n \n         // Run the action\n@@ -1391,7 +1387,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedNonTerminalOverridenF\n     }\n \n     @Test\n-    public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageType() throws Exception\n+    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageType() throws Exception\n     {\n         // new document = xwiki:X.Y.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n@@ -1407,7 +1403,7 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageType() t\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, null,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n             \"page\");\n \n         // Run the action\n@@ -1426,7 +1422,7 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageType() t\n     }\n \n     @Test\n-    public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageTypeButOverriddenFromUIToNonTerminal()\n+    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageTypeButOverriddenFromUIToNonTerminal()\n         throws Exception\n     {\n         // new document = xwiki:X.Y.WebHome\n@@ -1444,7 +1440,7 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageTypeButO\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, null,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n             \"page\");\n \n         // Run the action\n@@ -1463,7 +1459,7 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageTypeButO\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceType() throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceType() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -1481,7 +1477,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceType() thr\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, null,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n             \"space\");\n \n         // Run the action\n@@ -1500,8 +1496,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceType() thr\n     }\n \n     @Test\n-    public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceTypeButOverridenFromUIToTerminal()\n-        throws Exception\n+    void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceTypeButOverridenFromUIToTerminal() throws Exception\n     {\n         // current document = xwiki:Main.WebHome\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n@@ -1520,7 +1515,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceTypeButOve\n \n         // Mock 1 existing template provider\n         mockExistingTemplateProviders(templateProviderFullName,\n-            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.EMPTY_LIST, null,\n+            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n             \"space\");\n \n         // Run the action\n@@ -1538,7 +1533,7 @@ public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceTypeButOve\n     }\n \n     @Test\n-    public void newDocumentWebHomeFromURLTemplateProviderSpecifiedWithSaveAndEdit() throws Exception\n+    void newDocumentWebHomeFromURLTemplateProviderSpecifiedWithSaveAndEdit() throws Exception\n     {\n         // Mock the document to create.\n         DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n@@ -1559,11 +1554,11 @@ public void newDocumentWebHomeFromURLTemplateProviderSpecifiedWithSaveAndEdit()\n         this.context.setUserReference(userReference);\n \n         // Mock the creation request.\n-        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n-        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n-        when(mockRequest.getParameter(\"title\")).thenReturn(\"Yippee\");\n+        when(this.mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n+        when(this.mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n+        when(this.mockRequest.getParameter(\"title\")).thenReturn(\"Yippee\");\n         String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n-        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n+        when(this.mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n \n         // Mock the template provider.\n         mockExistingTemplateProviders(templateProviderFullName,"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/SaveActionTest.java",
          "status": "modified",
          "additions": 65,
          "deletions": 25,
          "patch": "@@ -24,18 +24,27 @@\n \n import javax.inject.Named;\n \n-import org.apache.commons.lang.time.DateUtils;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.suigeneris.jrcs.rcs.Version;\n import org.xwiki.configuration.ConfigurationSource;\n import org.xwiki.context.Execution;\n+import org.xwiki.job.Job;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.validation.EntityNameValidation;\n import org.xwiki.model.validation.EntityNameValidationConfiguration;\n import org.xwiki.model.validation.EntityNameValidationManager;\n+import org.xwiki.refactoring.job.CreateRequest;\n+import org.xwiki.refactoring.script.RefactoringScriptService;\n+import org.xwiki.refactoring.script.RequestFactory;\n+import org.xwiki.script.service.ScriptService;\n+import org.xwiki.security.authorization.ContextualAuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.mockito.InjectComponentManager;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.test.mockito.MockitoComponentManager;\n \n import com.xpn.xwiki.XWiki;\n import com.xpn.xwiki.XWikiContext;\n@@ -54,6 +63,7 @@\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n@@ -65,13 +75,16 @@\n @ComponentList\n @ReferenceComponentList\n @OldcoreTest(mockXWiki = false)\n-public class SaveActionTest\n+class SaveActionTest\n {\n     private static final DocumentReference USER_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"FooBar\");\n \n     @InjectMockitoOldcore\n     private MockitoOldcore oldcore;\n \n+    @InjectComponentManager\n+    private MockitoComponentManager componentManager;\n+\n     @MockComponent\n     private EntityNameValidationManager entityNameValidationManager;\n \n@@ -85,11 +98,15 @@ public class SaveActionTest\n     @Named(\"xwikiproperties\")\n     private ConfigurationSource propertiesConf;\n \n+    @MockComponent\n+    private ContextualAuthorizationManager autorization;\n+\n     @MockComponent\n     private DocumentRevisionProvider documentRevisionProvider;\n \n     private XWikiContext context;\n \n+    @InjectMockComponents\n     private SaveAction saveAction;\n \n     private XWikiRequest mockRequest;\n@@ -107,30 +124,28 @@ public class SaveActionTest\n     @BeforeEach\n     void setup()\n     {\n-        this.saveAction = new SaveAction();\n-\n-        context = oldcore.getXWikiContext();\n+        this.context = this.oldcore.getXWikiContext();\n \n-        xWiki = mock(XWiki.class);\n-        context.setWiki(this.xWiki);\n+        this.xWiki = mock(XWiki.class);\n+        this.context.setWiki(this.xWiki);\n \n-        mockRequest = mock(XWikiRequest.class);\n-        context.setRequest(mockRequest);\n+        this.mockRequest = mock(XWikiRequest.class);\n+        this.context.setRequest(this.mockRequest);\n \n-        mockResponse = mock(XWikiResponse.class);\n-        context.setResponse(mockResponse);\n+        this.mockResponse = mock(XWikiResponse.class);\n+        this.context.setResponse(this.mockResponse);\n \n-        mockDocument = mock(XWikiDocument.class);\n-        context.setDoc(mockDocument);\n+        this.mockDocument = mock(XWikiDocument.class);\n+        this.context.setDoc(this.mockDocument);\n \n-        mockClonedDocument = mock(XWikiDocument.class);\n-        when(mockDocument.clone()).thenReturn(mockClonedDocument);\n+        this.mockClonedDocument = mock(XWikiDocument.class);\n+        when(this.mockDocument.clone()).thenReturn(this.mockClonedDocument);\n \n-        mockForm = mock(EditForm.class);\n-        context.setForm(mockForm);\n+        this.mockForm = mock(EditForm.class);\n+        this.context.setForm(this.mockForm);\n         when(this.entityNameValidationConfiguration.useValidation()).thenReturn(false);\n \n-        context.setUserReference(USER_REFERENCE);\n+        this.context.setUserReference(USER_REFERENCE);\n     }\n \n     @Test\n@@ -146,7 +161,7 @@ void newDocumentInvalidName() throws Exception\n \n         assertTrue(saveAction.save(this.context));\n         assertEquals(\"entitynamevalidation.create.invalidname\", context.get(\"message\"));\n-        assertArrayEquals(new Object[] { \"Foo.Bar\" }, (Object[]) context.get(\"messageParameters\"));\n+        assertArrayEquals(new Object[] {\"Foo.Bar\"}, (Object[]) context.get(\"messageParameters\"));\n     }\n \n     @Test\n@@ -159,7 +174,6 @@ void validSave() throws Exception\n         assertFalse(saveAction.save(this.context));\n         assertEquals(new Version(\"1.2\"), this.context.get(\"SaveAction.savedObjectVersion\"));\n \n-        verify(mockClonedDocument).readFromTemplate(\"\", this.context);\n         verify(mockClonedDocument).setAuthor(\"XWiki.FooBar\");\n         verify(mockClonedDocument).setMetaDataDirty(true);\n         verify(this.xWiki).checkSavingDocument(USER_REFERENCE, mockClonedDocument, \"My Changes\", false, this.context);\n@@ -181,8 +195,8 @@ void validSaveNewTranslation() throws Exception\n         when(mockRequest.getParameter(\"isNew\")).thenReturn(\"true\");\n         assertFalse(saveAction.save(this.context));\n         assertEquals(new Version(\"1.1\"), this.context.get(\"SaveAction.savedObjectVersion\"));\n-        verify(this.xWiki).checkSavingDocument(eq(USER_REFERENCE), any(XWikiDocument.class), eq(\"\"),\n-            eq(false), eq(this.context));\n+        verify(this.xWiki).checkSavingDocument(eq(USER_REFERENCE), any(XWikiDocument.class), eq(\"\"), eq(false),\n+            eq(this.context));\n         verify(this.xWiki).saveDocument(any(XWikiDocument.class), eq(\"\"), eq(false), eq(this.context));\n     }\n \n@@ -210,8 +224,8 @@ void validSaveOldTranslation() throws Exception\n     }\n \n     /**\n-     * This tests aims at checking the usecase when uploading an image in the WYSIWYG editor before the first save\n-     * and saving afterwards.\n+     * This tests aims at checking the usecase when uploading an image in the WYSIWYG editor before the first save and\n+     * saving afterwards.\n      */\n     @Test\n     void validSaveRequestImageUploadAndConflictCheck() throws Exception\n@@ -237,12 +251,38 @@ void validSaveRequestImageUploadAndConflictCheck() throws Exception\n         assertFalse(saveAction.save(this.context));\n         assertEquals(new Version(\"1.2\"), this.context.get(\"SaveAction.savedObjectVersion\"));\n \n-        verify(mockClonedDocument).readFromTemplate(\"\", this.context);\n         verify(mockClonedDocument).setAuthor(\"XWiki.FooBar\");\n         verify(mockClonedDocument).setMetaDataDirty(true);\n         verify(this.xWiki).checkSavingDocument(USER_REFERENCE, mockClonedDocument, \"My Changes\", false, this.context);\n         verify(this.xWiki).saveDocument(mockClonedDocument, \"My Changes\", false, this.context);\n         verify(mockClonedDocument).removeLock(this.context);\n+    }\n+\n+    @Test\n+    void saveFromTemplate() throws Exception\n+    {\n+        when(this.mockForm.getTemplate()).thenReturn(\"TemplateSpace.TemplateDocument\");\n+        DocumentReference templateReference =\n+            new DocumentReference(context.getWikiId(), \"TemplateSpace\", \"TemplateDocument\");\n+\n+        when(this.autorization.hasAccess(Right.VIEW, templateReference)).thenReturn(false);\n+\n+        assertFalse(this.saveAction.save(this.context));\n+\n+        verify(this.mockClonedDocument, never()).readFromTemplate(templateReference, this.context);\n+\n+        when(this.autorization.hasAccess(Right.VIEW, templateReference)).thenReturn(true);\n+        RefactoringScriptService refactoring = mock(RefactoringScriptService.class);\n+        RequestFactory requestFactory = mock(RequestFactory.class);\n+        when(refactoring.getRequestFactory()).thenReturn(requestFactory);\n+        CreateRequest request = mock(CreateRequest.class);\n+        when(requestFactory.createCreateRequest(any())).thenReturn(request);\n+        Job job = mock(Job.class);\n+        when(refactoring.create(request)).thenReturn(job);\n+        this.componentManager.registerComponent(ScriptService.class, \"refactoring\", refactoring);\n+\n+        assertFalse(this.saveAction.save(this.context));\n \n+        verify(this.mockClonedDocument).readFromTemplate(templateReference, this.context);\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-862",
    "description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions any user with edit right can copy the content of a page it does not have access to by using it as template of a new page. This issue has been patched in XWiki 13.2CR1 and 12.10.6. Users are advised to update. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-09T21:15:07.937",
    "last_modified": "2024-11-21T06:48:56.643",
    "fix_date": "2021-03-12T16:00:38Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/30c52b01559b8ef5ed1035dac7c34aaf805764d5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/b35ef0edd4f2ff2c974cbeef6b80fcf9b5a44554",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-gf7x-2j2x-7f73",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-18430",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/30c52b01559b8ef5ed1035dac7c34aaf805764d5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/b35ef0edd4f2ff2c974cbeef6b80fcf9b5a44554",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-gf7x-2j2x-7f73",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-18430",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.694482",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}