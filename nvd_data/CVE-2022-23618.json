{
  "cve_id": "CVE-2022-23618",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "5251c02080466bf9fb55288f04a37671108f8096",
    "related_commits": [
      "5251c02080466bf9fb55288f04a37671108f8096",
      "5251c02080466bf9fb55288f04a37671108f8096"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/5251c02080466bf9fb55288f04a37671108f8096.patch",
    "fix_commit_details": {
      "sha": "5251c02080466bf9fb55288f04a37671108f8096",
      "commit_date": "2021-04-15T09:35:55Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": {
          "total_commits": 1932,
          "average_weekly_commits": 2.0251572327044025,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 283
        }
      },
      "commit_message": {
        "title": "XWIKI-10309: Check URL domains based on a whitelist (#1592)",
        "length": 1075,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 649,
        "additions": 640,
        "deletions": 9
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/impl/xwiki/MyFormAuthenticator.java",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -41,6 +41,8 @@\n import org.xwiki.security.authentication.AuthenticationFailureManager;\n import com.xpn.xwiki.internal.user.UserAuthenticatedEventNotifier;\n \n+import com.xpn.xwiki.web.XWikiResponse;\n+\n public class MyFormAuthenticator extends FormAuthenticator implements XWikiAuthenticator\n {\n     private static final Logger LOGGER = LoggerFactory.getLogger(MyFormAuthenticator.class);\n@@ -244,8 +246,8 @@ public boolean processLogin(String username, String password, String rememberme,\n \n             Boolean bAjax = (Boolean) context.get(\"ajax\");\n             if ((bAjax == null) || (!bAjax.booleanValue())) {\n-                String continueToURL = getContinueToURL(request);\n                 // This is the url that the user was initially accessing before being prompted for login.\n+                String continueToURL = getContinueToURL(request);\n                 response.sendRedirect(response.encodeRedirectURL(continueToURL));\n             }\n         } else {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/XWikiAction.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -981,6 +981,12 @@ protected boolean sendGlobalRedirect(XWikiResponse response, String url, XWikiCo\n         return false;\n     }\n \n+    /**\n+     * Perform a redirect to the given URL.\n+     * @param response the response to use to perform the redirect\n+     * @param url the location of the redirect\n+     * @throws XWikiException in case of IOException when performing the redirect.\n+     */\n     protected void sendRedirect(XWikiResponse response, String url) throws XWikiException\n     {\n         try {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/XWikiServletResponse.java",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -21,8 +21,10 @@\n \n import java.io.IOException;\n import java.io.PrintWriter;\n+import java.net.URL;\n import java.util.Collection;\n import java.util.Locale;\n+import java.util.regex.Pattern;\n \n import javax.servlet.ServletOutputStream;\n import javax.servlet.http.Cookie;\n@@ -31,10 +33,12 @@\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.xwiki.url.URLSecurityManager;\n \n public class XWikiServletResponse implements XWikiResponse\n {\n     private static final Logger LOGGER = LoggerFactory.getLogger(XWikiServletResponse.class);\n+    private static final Pattern ABSOLUTE_URL_PATTERN = Pattern.compile(\"[a-z0-9]+://.*\");\n \n     private HttpServletResponse response;\n \n@@ -66,9 +70,25 @@ public void sendRedirect(String redirect) throws IOException\n             LOGGER.warn(\"Possible HTTP Response Splitting attack, attempting to redirect to [{}]\", redirect);\n             return;\n         }\n+\n+        // check for trusted domains, only if the given location is an absolute URL.\n+        if (ABSOLUTE_URL_PATTERN.matcher(redirect).matches()) {\n+            if (!getURLSecurityManager().isDomainTrusted(new URL(redirect))) {\n+                LOGGER.warn(\n+                    \"Possible phishing attack, attempting to redirect to [{}], this request has been blocked. \"\n+                        + \"If the request was legitimate, add the domain related to this request in the list \"\n+                        + \"of trusted domains in the configuration.\", redirect);\n+                return;\n+            }\n+        }\n         this.response.sendRedirect(redirect);\n     }\n \n+    private URLSecurityManager getURLSecurityManager()\n+    {\n+        return Utils.getComponent(URLSecurityManager.class);\n+    }\n+\n     @Override\n     public void setContentType(String type)\n     {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -35,6 +35,7 @@\n     <!-- Sorted Alphabetically -->\n     <module>xwiki-platform-url-api</module>\n     <module>xwiki-platform-url-container</module>\n+    <module>xwiki-platform-url-default</module>\n     <module>xwiki-platform-url-schemes</module>\n   </modules>\n </project>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-api/pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -32,9 +32,7 @@\n   <packaging>jar</packaging>\n   <description>Allows configuration of the URL scheme used by XWiki to parse/serialize URLs</description>\n   <properties>\n-    <!-- The reason for this low TPC value is because this module is tested using integration tests in the various\n-         URL Scheme modules -->\n-    <xwiki.jacoco.instructionRatio>0.45</xwiki.jacoco.instructionRatio>\n+    <xwiki.jacoco.instructionRatio>0.85</xwiki.jacoco.instructionRatio>\n     <!-- Name to display by the Extension Manager -->\n     <xwiki.extension.name>URL API</xwiki.extension.name>\n   </properties>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-api/src/main/java/org/xwiki/url/URLConfiguration.java",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -19,7 +19,11 @@\n  */\n package org.xwiki.url;\n \n+import java.util.Collections;\n+import java.util.List;\n+\n import org.xwiki.component.annotation.Role;\n+import org.xwiki.stability.Unstable;\n \n /**\n  * Configuration options for the URL module.\n@@ -47,4 +51,30 @@ default boolean useResourceLastModificationDate()\n     {\n         return true;\n     }\n+\n+    /**\n+     * Specify the list of domains that are considered as trusted by the administrators of the wiki: those domains can\n+     * be used safely for redirections from the wiki or for performing other requests on them.\n+     * @return the list of trusted domains that can be used in the wiki.\n+     * @since 13.3RC1\n+     * @since 12.10.7\n+     */\n+    @Unstable\n+    default List<String> getTrustedDomains()\n+    {\n+        return Collections.emptyList();\n+    }\n+\n+    /**\n+     * Define if the trusted domains check should be performed or not. This option is provided only to allow bypassing\n+     * security checks globally on the wiki in case of problems.\n+     * @return {@code true} if the security check on domains should be performed. {@code false} otherwise.\n+     * @since 13.3RC1\n+     * @since 12.10.7\n+     */\n+    @Unstable\n+    default boolean isTrustedDomainsEnabled()\n+    {\n+        return true;\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-api/src/main/java/org/xwiki/url/URLSecurityManager.java",
          "status": "added",
          "additions": 56,
          "deletions": 0,
          "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.url;\n+\n+import java.net.URL;\n+\n+import org.xwiki.component.annotation.Role;\n+import org.xwiki.stability.Unstable;\n+\n+/**\n+ * Dedicated component to perform security checks on URLs.\n+ *\n+ * @version $Id$\n+ * @since 13.3RC1\n+ * @since 12.10.7\n+ */\n+@Role\n+@Unstable\n+public interface URLSecurityManager\n+{\n+    /**\n+     * Constant to be used in {@link org.xwiki.context.ExecutionContext} with the value {@code \"true\"} to bypass a\n+     * check of {@link #isDomainTrusted(URL)}.\n+     */\n+    String BYPASS_DOMAIN_SECURITY_CHECK_CONTEXT_PROPERTY = \"bypassDomainSecurityCheck\";\n+\n+    /**\n+     * Check if the given {@link URL} can be trusted based on the trusted domains of the wiki.\n+     * This method check on both the list of trusted domains given by the configuration\n+     * (see {@link URLConfiguration#getTrustedDomains()}) and the list of aliases used by the wiki descriptors.\n+     * Note that this method always returns {@code true} if {@link URLConfiguration#isTrustedDomainsEnabled()} returns\n+     * {@code true}. Also the method will return {@code true} whenever the {@link org.xwiki.context.ExecutionContext}\n+     * contains a property named {@link #BYPASS_DOMAIN_SECURITY_CHECK_CONTEXT_PROPERTY} with the value {@code \"true\"}.\n+     *\n+     * @param urlToCheck the URL for which we want to know if the domain is trusted or not.\n+     * @return {@code true} if the URL domain can be trusted or if the check is skipped, {@code false} otherwise\n+     */\n+    boolean isDomainTrusted(URL urlToCheck);\n+}"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/pom.xml",
          "status": "added",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.xwiki.platform</groupId>\n+    <artifactId>xwiki-platform-url</artifactId>\n+    <version>13.3-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>xwiki-platform-url-default</artifactId>\n+  <name>XWiki Platform - URL - Default</name>\n+  <packaging>jar</packaging>\n+  <description>Default implementations of the API defined in xwiki-platform-url-api</description>\n+  <properties>\n+    <!-- The reason for this low TPC value is because this module is tested using integration tests in the various\n+    URL Scheme modules -->\n+    <xwiki.jacoco.instructionRatio>0.31</xwiki.jacoco.instructionRatio>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.xwiki.platform</groupId>\n+      <artifactId>xwiki-platform-url-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.xwiki.platform</groupId>\n+      <artifactId>xwiki-platform-oldcore</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.xwiki.platform</groupId>\n+      <artifactId>xwiki-platform-wiki-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <!-- Testing Dependencies -->\n+    <dependency>\n+      <groupId>org.xwiki.commons</groupId>\n+      <artifactId>xwiki-commons-tool-test-component</artifactId>\n+      <version>${commons.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+</project>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/AbstractExtendedURLResourceReferenceSerializer.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/AbstractExtendedURLResourceTypeResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/AbstractParentResourceReferenceResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/AbstractResourceReferenceResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/DefaultResourceReferenceResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/DefaultResourceReferenceSerializer.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/DefaultResourceTypeResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/DefaultStringResourceTypeResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/DefaultURLConfiguration.java",
          "status": "renamed",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -19,6 +19,9 @@\n  */\n package org.xwiki.url.internal;\n \n+import java.util.Collections;\n+import java.util.List;\n+\n import javax.inject.Inject;\n import javax.inject.Provider;\n import javax.inject.Singleton;\n@@ -60,4 +63,16 @@ public boolean useResourceLastModificationDate()\n     {\n         return this.configuration.get().getProperty(PREFIX + \"useResourceLastModificationDate\", true);\n     }\n+\n+    @Override\n+    public List<String> getTrustedDomains()\n+    {\n+        return this.configuration.get().getProperty(PREFIX + \"trustedDomains\", Collections.emptyList());\n+    }\n+\n+    @Override\n+    public boolean isTrustedDomainsEnabled()\n+    {\n+        return this.configuration.get().getProperty(PREFIX + \"trustedDomainsEnabled\", true);\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/DefaultURLContextManager.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/DefaultURLSecurityManager.java",
          "status": "added",
          "additions": 137,
          "deletions": 0,
          "patch": "@@ -0,0 +1,137 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.url.internal;\n+\n+import java.net.URL;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.xwiki.component.annotation.Component;\n+import org.xwiki.context.Execution;\n+import org.xwiki.url.URLConfiguration;\n+import org.xwiki.url.URLSecurityManager;\n+import org.xwiki.wiki.descriptor.WikiDescriptor;\n+import org.xwiki.wiki.descriptor.WikiDescriptorManager;\n+import org.xwiki.wiki.manager.WikiManagerException;\n+\n+/**\n+ * Default implementation of {@link URLSecurityManager}.\n+ * This implementation keeps a HashSet in memory containing the trusted domains defined in the configuration and\n+ * for all subwikis. Use {@link #invalidateCache()} to compute back this hashset.\n+ *\n+ * @version $Id$\n+ * @since 13.3RC1\n+ * @since 12.10.7\n+ */\n+@Component\n+@Singleton\n+public class DefaultURLSecurityManager implements URLSecurityManager\n+{\n+    private static final Pattern ACCEPTED_DOMAIN_PATTERN = Pattern.compile(\"([^.]+\\\\.[^.]+)+\");\n+    private static final char DOT = '.';\n+\n+    @Inject\n+    private URLConfiguration urlConfiguration;\n+\n+    @Inject\n+    private WikiDescriptorManager wikiDescriptorManager;\n+\n+    @Inject\n+    private Execution execution;\n+\n+    @Inject\n+    private Logger logger;\n+\n+    private Set<String> trustedDomains;\n+\n+    private void computeTrustedDomains()\n+    {\n+        Set<String> domains;\n+        domains = new HashSet<>(this.urlConfiguration.getTrustedDomains());\n+\n+        try {\n+            for (WikiDescriptor wikiDescriptor : wikiDescriptorManager.getAll()) {\n+                domains.addAll(wikiDescriptor.getAliases());\n+            }\n+        } catch (WikiManagerException e) {\n+            logger.warn(\"Error while getting wiki descriptor to fill list of trusted domains: [{}]. \"\n+                + \"The subwikis won't be taken into account for the list of trusted domains.\",\n+                ExceptionUtils.getRootCauseMessage(e));\n+        }\n+        this.trustedDomains = new HashSet<>();\n+\n+        for (String domain : domains) {\n+            if (ACCEPTED_DOMAIN_PATTERN.matcher(domain).matches()) {\n+                this.trustedDomains.add(domain);\n+            } else {\n+                logger.warn(\"The domain [{}] specified in the trusted domains configuration won't be taken into \"\n+                    + \"account since it doesn't respect the documented format.\", domain);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isDomainTrusted(URL urlToCheck)\n+    {\n+        if (this.urlConfiguration.isTrustedDomainsEnabled()) {\n+            if (this.trustedDomains == null) {\n+                computeTrustedDomains();\n+            }\n+\n+            String host = urlToCheck.getHost();\n+\n+            while (StringUtils.contains(host, DOT)) {\n+                if (trustedDomains.contains(host)) {\n+                    return true;\n+                } else {\n+                    host = host.substring(host.indexOf(DOT) + 1);\n+                }\n+            }\n+\n+            Object bypassCheckProperty = execution.getContext()\n+                .getProperty(URLSecurityManager.BYPASS_DOMAIN_SECURITY_CHECK_CONTEXT_PROPERTY);\n+            boolean bypassCheck = bypassCheckProperty != null && Boolean.parseBoolean(bypassCheckProperty.toString());\n+\n+            if (bypassCheck) {\n+                logger.info(\"Domain of URL [{}] does not belong to the list of trusted domains but it's considered as \"\n+                    + \"trusted since the check has been bypassed.\", urlToCheck);\n+            }\n+\n+            return bypassCheck;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Invalidate the set of trusted domains: this should mainly be used when a subwiki is added/edited/deleted.\n+     */\n+    public void invalidateCache()\n+    {\n+        this.trustedDomains = null;\n+    }\n+}"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/GenericResourceReferenceResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/GenericStringResourceTypeResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/ParentResourceReference.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/RelativeExtendedURL.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/URLExecutionContextInitializer.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/URLStringEntityReferenceResolver.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/URLStringEntityReferenceSerializer.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/URLSymbolScheme.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/java/org/xwiki/url/internal/XWikiServerClassListener.java",
          "status": "added",
          "additions": 84,
          "deletions": 0,
          "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.url.internal;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+\n+import org.xwiki.component.annotation.Component;\n+import org.xwiki.model.reference.LocalDocumentReference;\n+import org.xwiki.observation.AbstractEventListener;\n+import org.xwiki.observation.event.Event;\n+import org.xwiki.url.URLSecurityManager;\n+\n+import com.xpn.xwiki.internal.event.XObjectAddedEvent;\n+import com.xpn.xwiki.internal.event.XObjectDeletedEvent;\n+import com.xpn.xwiki.internal.event.XObjectUpdatedEvent;\n+\n+/**\n+ * Listener for changes on XWikiServerClass xobjects to ensure the {@link URLSecurityManager} cache is invalidated\n+ * in case of change on XWikiServerClass objects.\n+ *\n+ * @version $Id$\n+ * @since 13.3RC1\n+ * @since 12.10.7\n+ */\n+@Component\n+@Singleton\n+@Named(XWikiServerClassListener.NAME)\n+public class XWikiServerClassListener extends AbstractEventListener\n+{\n+    /**\n+     * Name of the listener.\n+     */\n+    public static final String NAME = \"org.xwiki.url.internal.XWikiServerClassListener\";\n+\n+    private static final LocalDocumentReference XWIKISERVER_CLASS =\n+        new LocalDocumentReference(\"XWiki\", \"XWikiServerClass\");\n+\n+    private static final List<Event> EVENTS = Arrays.asList(\n+        new XObjectAddedEvent(XWIKISERVER_CLASS),\n+        new XObjectDeletedEvent(XWIKISERVER_CLASS),\n+        new XObjectUpdatedEvent(XWIKISERVER_CLASS)\n+    );\n+\n+    @Inject\n+    private URLSecurityManager securityManager;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public XWikiServerClassListener()\n+    {\n+        super(NAME, EVENTS);\n+    }\n+\n+    @Override\n+    public void onEvent(Event event, Object source, Object data)\n+    {\n+        if (this.securityManager instanceof DefaultURLSecurityManager) {\n+            ((DefaultURLSecurityManager) this.securityManager).invalidateCache();\n+        }\n+    }\n+}"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/main/resources/META-INF/components.txt",
          "status": "renamed",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1,3 +1,5 @@\n+org.xwiki.url.internal.XWikiServerClassListener\n+org.xwiki.url.internal.DefaultURLSecurityManager\n org.xwiki.url.internal.DefaultURLConfiguration\n org.xwiki.url.internal.DefaultResourceReferenceResolver\n org.xwiki.url.internal.DefaultResourceReferenceSerializer"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/test/java/org/xwiki/url/internal/AbstractParentResourceReferenceResolverTest.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/test/java/org/xwiki/url/internal/DefaultURLConfigurationTest.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/test/java/org/xwiki/url/internal/DefaultURLSecurityManagerTest.java",
          "status": "added",
          "additions": 197,
          "deletions": 0,
          "patch": "@@ -0,0 +1,197 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.url.internal;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.xwiki.context.Execution;\n+import org.xwiki.context.ExecutionContext;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.url.URLConfiguration;\n+import org.xwiki.url.URLSecurityManager;\n+import org.xwiki.wiki.descriptor.WikiDescriptor;\n+import org.xwiki.wiki.descriptor.WikiDescriptorManager;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests for {@link DefaultURLSecurityManager}.\n+ *\n+ * @version $Id$\n+ * @since 13.3RC1\n+ * @since 12.10.7\n+ */\n+@ComponentTest\n+class DefaultURLSecurityManagerTest\n+{\n+    @InjectMockComponents\n+    private DefaultURLSecurityManager urlSecurityManager;\n+\n+    @MockComponent\n+    private URLConfiguration urlConfiguration;\n+\n+    @MockComponent\n+    private WikiDescriptorManager wikiDescriptorManager;\n+\n+    @MockComponent\n+    private Execution execution;\n+    \n+    private ExecutionContext executionContext;\n+\n+    @RegisterExtension\n+    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.INFO);\n+    \n+    @BeforeEach\n+    void setup()\n+    {\n+        this.executionContext = mock(ExecutionContext.class);\n+        when(this.execution.getContext()).thenReturn(this.executionContext);\n+        when(this.urlConfiguration.isTrustedDomainsEnabled()).thenReturn(true);\n+    }\n+\n+    @Test\n+    void isDomainTrusted() throws Exception\n+    {\n+        when(urlConfiguration.getTrustedDomains()).thenReturn(Arrays.asList(\n+            \"foo.acme.org\",\n+            \"com\" // this should not be taken into account\n+        ));\n+\n+        WikiDescriptor wikiDescriptor1 = mock(WikiDescriptor.class);\n+        when(wikiDescriptor1.getAliases()).thenReturn(Arrays.asList(\n+            \"www.xwiki.org\",\n+            \"something.bar.com\"\n+        ));\n+\n+        WikiDescriptor wikiDescriptor2 = mock(WikiDescriptor.class);\n+        when(wikiDescriptor2.getAliases()).thenReturn(Collections.singletonList(\n+            \"enterprise.eu\"\n+        ));\n+\n+        when(this.wikiDescriptorManager.getAll()).thenReturn(Arrays.asList(wikiDescriptor1, wikiDescriptor2));\n+\n+        assertThat(\"www.xwiki.org is trusted\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"http://www.xwiki.org/xwiki/bin/view/XWiki/Login\")));\n+        assertThat(\"www.xwiki.org is trusted\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://www.xwiki.org/xwiki/bin/view/XWiki/Login\")));\n+        assertThat(\"www.xwiki.com is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://www.xwiki.com/xwiki/bin/view/XWiki/Login\")));\n+        assertThat(\"xwiki.org is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://xwiki.org/xwiki/bin/view/XWiki/Login\")));\n+        assertThat(\"foo.acme.org is trusted\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://foo.acme.org/something/else\")));\n+        assertThat(\"bar.foo.acme.org is trusted since foo.acme.org is\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://bar.foo.acme.org/something/else\")));\n+        assertThat(\"buz.bar.foo.acme.org is trusted since foo.acme.org is\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://buz.bar.foo.acme.org/something/else\")));\n+        assertThat(\"acme.org is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://acme.org/something/else\")));\n+        assertThat(\"www.acme.org is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://www.acme.org/something/else\")));\n+        assertThat(\"something.bar.thing.com is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://something.bar.thing.com\")));\n+        assertThat(\"bar.thing.com is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://bar.thing.com\")));\n+        assertThat(\"something.bar.com is tristed\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://something.bar.com\")));\n+        assertThat(\"enterprise.eu is trusted\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://enterprise.eu/xwiki/\")));\n+        assertThat(\"enterprise.eu. is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://enterprise.eu./xwiki/\")));\n+\n+        assertEquals(\"The domain [com] specified in the trusted domains configuration won't be taken into account \"\n+                + \"since it doesn't respect the documented format.\",\n+            logCapture.getMessage(0));\n+    }\n+\n+    @Test\n+    void invalidateCache() throws Exception\n+    {\n+        when(urlConfiguration.getTrustedDomains()).thenReturn(Collections.singletonList(\n+            \"xwiki.org\"\n+        ));\n+        assertThat(\"www.xwiki.org is trusted\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"http://www.xwiki.org\")));\n+        assertThat(\"foo.acme.org is not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://foo.acme.org/something/else\")));\n+\n+        when(urlConfiguration.getTrustedDomains()).thenReturn(Collections.singletonList(\n+            \"foo.acme.org\"\n+        ));\n+\n+        // the asserts are still the same because we rely on cached values\n+        assertThat(\"www.xwiki.org is still trusted\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"http://www.xwiki.org\")));\n+        assertThat(\"foo.acme.org is still not trusted\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://foo.acme.org/something/else\")));\n+\n+        // after invalidation the cache has been recomputed.\n+        this.urlSecurityManager.invalidateCache();\n+        assertThat(\"www.xwiki.org is not trusted anymore\", !this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"http://www.xwiki.org\")));\n+        assertThat(\"foo.acme.org is trusted now\", this.urlSecurityManager\n+            .isDomainTrusted(new URL(\"https://foo.acme.org/something/else\")));\n+    }\n+\n+    @Test\n+    void isDomainTrustedWhenCheckSkipped() throws MalformedURLException\n+    {\n+        when(urlConfiguration.getTrustedDomains()).thenReturn(Collections.singletonList(\n+            \"foo.acme.org\"\n+        ));\n+        when(urlConfiguration.isTrustedDomainsEnabled()).thenReturn(false);\n+        assertThat(\"Any domain can be trusted when check is skipped: check with www.xwiki.org\",\n+            this.urlSecurityManager.isDomainTrusted(new URL(\"http://www.xwiki.org\")));\n+        assertThat(\"Any domain can be trusted when check is skipped: check with www.bar.eu\",\n+            this.urlSecurityManager.isDomainTrusted(new URL(\"http://www.bar.eu\")));\n+        assertThat(\"Any domain can be trusted when check is skipped: check with foo.acme.org\",\n+            this.urlSecurityManager.isDomainTrusted(new URL(\"http://foo.acme.org\")));\n+\n+        when(urlConfiguration.isTrustedDomainsEnabled()).thenReturn(true);\n+        assertThat(\"www.xwiki.org should not be trusted\",\n+            !this.urlSecurityManager.isDomainTrusted(new URL(\"http://www.xwiki.org\")));\n+        assertThat(\"www.bar.eu should not be trusted\",\n+            !this.urlSecurityManager.isDomainTrusted(new URL(\"http://www.bar.eu\")));\n+        assertThat(\"foo.acme.org should be trusted\",\n+            this.urlSecurityManager.isDomainTrusted(new URL(\"http://foo.acme.org\")));\n+\n+        when(this.executionContext.getProperty(URLSecurityManager.BYPASS_DOMAIN_SECURITY_CHECK_CONTEXT_PROPERTY))\n+            .thenReturn(true);\n+        assertThat(\"www.xwiki.org should be trusted when check is bypassed\",\n+            this.urlSecurityManager.isDomainTrusted(new URL(\"http://www.xwiki.org\")));\n+\n+        assertEquals(\"Domain of URL [http://www.xwiki.org] does not belong to the list of trusted domains but \"\n+                + \"it's considered as trusted since the check has been bypassed.\",\n+            logCapture.getMessage(0));\n+    }\n+}"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/test/java/org/xwiki/url/internal/RelativeExtendedURLTest.java",
          "status": "renamed",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -17,7 +17,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n-package org.xwiki.url;\n+package org.xwiki.url.internal;\n \n import java.util.Arrays;\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/test/java/org/xwiki/url/internal/URLExecutionContextInitializerTest.java",
          "status": "renamed",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -17,13 +17,14 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n-package org.xwiki.url;\n+package org.xwiki.url.internal;\n \n import org.junit.jupiter.api.Test;\n import org.xwiki.context.ExecutionContext;\n import org.xwiki.test.junit5.mockito.ComponentTest;\n import org.xwiki.test.junit5.mockito.InjectMockComponents;\n import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.url.URLConfiguration;\n import org.xwiki.url.internal.URLExecutionContextInitializer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/test/java/org/xwiki/url/internal/URLStringEntityReferenceResolverTest.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-default/src/test/java/org/xwiki/url/internal/URLStringEntityReferenceSerializerTest.java",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-schemes/xwiki-platform-url-scheme-filesystem/pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -39,7 +39,7 @@\n   <dependencies>\n     <dependency>\n       <groupId>org.xwiki.platform</groupId>\n-      <artifactId>xwiki-platform-url-api</artifactId>\n+      <artifactId>xwiki-platform-url-default</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-schemes/xwiki-platform-url-scheme-reference/pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -38,7 +38,7 @@\n   <dependencies>\n     <dependency>\n       <groupId>org.xwiki.platform</groupId>\n-      <artifactId>xwiki-platform-url-api</artifactId>\n+      <artifactId>xwiki-platform-url-default</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-url/xwiki-platform-url-schemes/xwiki-platform-url-scheme-standard/pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -46,7 +46,7 @@\n     </dependency>\n     <dependency>\n       <groupId>org.xwiki.platform</groupId>\n-      <artifactId>xwiki-platform-url-api</artifactId>\n+      <artifactId>xwiki-platform-url-default</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>"
        },
        {
          "filename": "xwiki-platform-tools/xwiki-platform-tool-configuration-resources/src/main/resources/xwiki.properties.vm",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -744,6 +744,25 @@ extension.versioncheck.environment.enabled=$xwikiPropertiesEnvironmentVersionChe\n #-# The default is:\n # url.useResourceLastModificationDate=true\n \n+#-# [Since 13.3RC1]\n+#-# [Since 12.10.7]\n+#-# Define a list of trusted domains that can be used in the wiki for performing requests or redirections even if\n+#-# the wiki does not use it. Domains are listed without http and separated with a comma in the list. Subdomains can be\n+#-# specified.\n+#-# Example of accepted value: foo.acme.org,enterprise.org\n+#-#\n+#-# By default the list of trusted domains is empty:\n+# url.trustedDomains=\n+\n+#-# [Since 13.3RC1]\n+#-# [Since 12.10.7]\n+#-# Allow to enable or disable checks performed on domains by taking into account the list of trusted domains.\n+#-# Disable this property only if you experienced some issues on your wiki: some security check won't be performed when\n+#-# this property is set to false.\n+#-#\n+#-# By default this property is set to true:\n+# url.trustedDomainsEnabled=true\n+\n #-------------------------------------------------------------------------------------\n # Attachment\n #-------------------------------------------------------------------------------------"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 13,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-601",
    "description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions there is no protection against URL redirection to untrusted sites, in particular some well known parameters (xredirect) can be used to perform url redirections. This problem has been patched in XWiki 12.10.7 and XWiki 13.3RC1. Users are advised to update. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-09T21:15:07.993",
    "last_modified": "2024-11-21T06:48:56.797",
    "fix_date": "2021-04-15T09:35:55Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/5251c02080466bf9fb55288f04a37671108f8096",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-jp55-vvmf-63mv",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-10309",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/5251c02080466bf9fb55288f04a37671108f8096",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-jp55-vvmf-63mv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-10309",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.694642",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}