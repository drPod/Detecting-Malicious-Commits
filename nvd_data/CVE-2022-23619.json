{
  "cve_id": "CVE-2022-23619",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "d8a3cce48e0ac1a0f4a3cea7a19747382d9c9494",
    "related_commits": [
      "d8a3cce48e0ac1a0f4a3cea7a19747382d9c9494",
      "d8a3cce48e0ac1a0f4a3cea7a19747382d9c9494"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/d8a3cce48e0ac1a0f4a3cea7a19747382d9c9494.patch",
    "fix_commit_details": {
      "sha": "d8a3cce48e0ac1a0f4a3cea7a19747382d9c9494",
      "commit_date": "2021-06-29T07:48:38Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": {
          "total_commits": 1932,
          "average_weekly_commits": 2.0251572327044025,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 283
        }
      },
      "commit_message": {
        "title": "XWIKI-18787: Authentication API does not return proper results (#1651)",
        "length": 177,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 435,
        "additions": 222,
        "deletions": 213
      },
      "files": [
        {
          "filename": "xwiki-platform-core/pom.xml",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -156,6 +156,24 @@\n                    </differences>\n                  </revapi.differences>\n             -->\n+            <revapi.differences>\n+              <criticality>highlight</criticality>\n+              <differences>\n+                <item>\n+                  <ignore>true</ignore>\n+                  <code>java.method.returnTypeChanged</code>\n+                  <old>method javax.mail.internet.InternetAddress org.xwiki.security.authentication.script.AuthenticationScriptService::requestResetPassword(org.xwiki.user.UserReference) throws org.xwiki.security.authentication.ResetPasswordException</old>\n+                  <new>method void org.xwiki.security.authentication.script.AuthenticationScriptService::requestResetPassword(org.xwiki.user.UserReference) throws org.xwiki.security.authentication.ResetPasswordException</new>\n+                  <justification>Unstable API: this API was not properly designed and shouldn't have returned that in first place.</justification>\n+                </item>\n+                <item>\n+                  <ignore>true</ignore>\n+                  <code>java.method.removed</code>\n+                  <old>method javax.mail.internet.InternetAddress org.xwiki.security.authentication.ResetPasswordRequestResponse::getUserEmail()</old>\n+                  <justification>Unstable API: this API was not properly designed and shouldn't have returned that in first place.</justification>\n+                </item>\n+              </differences>\n+            </revapi.differences>\n           </analysisConfiguration>\n         </configuration>\n       </plugin>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-docker/src/test/it/org/xwiki/administration/test/ui/ResetPasswordIT.java",
          "status": "modified",
          "additions": 8,
          "deletions": 6,
          "patch": "@@ -117,17 +117,19 @@ public void resetForgottenPassword(TestUtils setup) throws Exception\n         // Try to reset the password of a non existent user\n         resetPasswordPage.setUserName(\"SomeUserThatDoesNotExist\");\n         resetPasswordPage = resetPasswordPage.clickResetPassword();\n-        assertFalse(resetPasswordPage.isResetPasswordSent());\n-        assertTrue(resetPasswordPage.getMessage().contains(\"user does not exist\"));\n+\n+        // there should not have any indication if the user exists or not.\n+        assertTrue(resetPasswordPage.isFormSubmitted());\n \n         // Try again\n-        resetPasswordPage = resetPasswordPage.clickRetry();\n+        resetPasswordPage = ResetPasswordPage.gotoPage();\n \n         // Try to reset the password of our user, when he has no email set\n         resetPasswordPage.setUserName(userName);\n         resetPasswordPage.clickResetPassword();\n-        assertFalse(resetPasswordPage.isResetPasswordSent());\n-        assertTrue(resetPasswordPage.getMessage().contains(\"email address not provided\"));\n+\n+        // there should not have any indication if an email address is provided or not.\n+        assertTrue(resetPasswordPage.isFormSubmitted());\n \n         // Try again. This time, set the user's email address in the profile\n         setup.loginAsSuperAdmin();\n@@ -145,7 +147,7 @@ public void resetForgottenPassword(TestUtils setup) throws Exception\n             \"Actual message: \" + newResetPasswordPage.getMessage());\n \n         // Check the result\n-        assertTrue(resetPasswordPage.isResetPasswordSent());\n+        assertTrue(resetPasswordPage.isFormSubmitted());\n         // Check the emails received by the user\n         assertTrue(this.mail.waitForIncomingEmail(1));\n         MimeMessage[] receivedEmails = this.mail.getReceivedMessages();"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-administration/xwiki-platform-administration-test/xwiki-platform-administration-test-pageobjects/src/main/java/org/xwiki/administration/test/po/ResetPasswordPage.java",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -67,7 +67,13 @@ public ResetPasswordPage clickResetPassword()\n         return new ResetPasswordPage();\n     }\n \n-    public boolean isResetPasswordSent()\n+    /**\n+     * This method only checks if the form was properly submitted and didn't return an error.\n+     * It does not mean that an email was necessarily sent.\n+     *\n+     * @return {@code true} if the form is properly submitted.\n+     */\n+    public boolean isFormSubmitted()\n     {\n         // If there is no form and we see an info box, then the request was sent.\n         return !getDriver().hasElementWithoutWaiting(By.cssSelector(\"#resetPasswordForm\"))"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/resources/ApplicationResources.properties",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -2449,7 +2449,7 @@ xe.admin.passwordReset.title=Forgot your password?\n xe.admin.passwordReset.instructions=Please enter your username to start the password reset process.\n xe.admin.passwordReset.username.label=Username\n xe.admin.passwordReset.submit=Reset password\n-xe.admin.passwordReset.emailSent=An e-mail was sent to {0}. Please follow the instructions in that e-mail to complete the password reset procedure.\n+xe.admin.passwordReset.emailSentToUsername=An e-mail was sent to the address configured for user \"{0}\". Please follow the instructions in that e-mail to complete the password reset procedure.\n xe.admin.passwordReset.login=Login \\u00BB\n xe.admin.passwordReset.error.noUser=The {0} user does not exist.\n xe.admin.passwordReset.error.ldapUser=The {0} user is an LDAP user. In that case the password has to be changed on the LDAP server.\n@@ -5501,6 +5501,11 @@ xe.admin.forgotUsername.result=Your username is: {0}\n xe.admin.forgotUsername.multipleResults=The following usernames are registered with this email address:\n xe.admin.forgotUsername.error.noAccount=No account is registered using this email address.\n \n+#######################################\n+## until 12.10.9, 13.6RC1, 13.4.1\n+#######################################\n+xe.admin.passwordReset.emailSent=An e-mail was sent to {0}. Please follow the instructions in that e-mail to complete the password reset procedure.\n+\n ## Used to indicate where deprecated keys end\n #@deprecatedend\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-api/src/main/java/org/xwiki/security/authentication/ResetPasswordRequestResponse.java",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -19,8 +19,6 @@\n  */\n package org.xwiki.security.authentication;\n \n-import javax.mail.internet.InternetAddress;\n-\n import org.xwiki.stability.Unstable;\n import org.xwiki.user.UserReference;\n \n@@ -38,11 +36,6 @@ public interface ResetPasswordRequestResponse\n      */\n     UserReference getUserReference();\n \n-    /**\n-     * @return the email address of the user for whom the reset password request have been performed.\n-     */\n-    InternetAddress getUserEmail();\n-\n     /**\n      * @return the verification code to be send to the user.\n      */"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManager.java",
          "status": "modified",
          "additions": 145,
          "deletions": 138,
          "patch": "@@ -29,6 +29,7 @@\n import javax.mail.internet.InternetAddress;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n import org.xwiki.component.annotation.Component;\n import org.xwiki.localization.ContextualLocalizationManager;\n import org.xwiki.model.reference.DocumentReference;\n@@ -110,180 +111,186 @@ public class DefaultResetPasswordManager implements ResetPasswordManager\n     @Inject\n     private Provider<ResetPasswordMailSender> resetPasswordMailSenderProvider;\n \n-    private void checkUserReference(UserReference userReference) throws ResetPasswordException\n-    {\n-        if (!this.userManager.exists(userReference)) {\n-            String exceptionMessage =\n-                this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",\n-                    userReference.toString());\n-            throw new ResetPasswordException(exceptionMessage);\n-        }\n+    @Inject\n+    private Logger logger;\n \n+    private boolean checkUserReference(UserReference userReference) throws ResetPasswordException\n+    {\n         // FIXME: This check shouldn't be needed if we'd have the proper API to determine which kind of\n         // authentication is used.\n         if (!(userReference instanceof DocumentUserReference)) {\n             throw new ResetPasswordException(\"Only user having a page on the wiki can reset their password.\");\n         }\n+\n+        return this.userManager.exists(userReference);\n     }\n \n     @Override\n     public ResetPasswordRequestResponse requestResetPassword(UserReference userReference) throws ResetPasswordException\n     {\n-        this.checkUserReference(userReference);\n-\n-        UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);\n-        InternetAddress email = userProperties.getEmail();\n-\n-        if (email == null) {\n-            String exceptionMessage =\n-                this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noEmail\");\n-            throw new ResetPasswordException(exceptionMessage);\n-        }\n-\n-        DocumentUserReference documentUserReference = (DocumentUserReference) userReference;\n-        DocumentReference reference = documentUserReference.getReference();\n-        XWikiContext context = this.contextProvider.get();\n-\n-        try {\n-            XWikiDocument userDocument = context.getWiki().getDocument(reference, context);\n-\n-            if (userDocument.getXObject(LDAP_CLASS_REFERENCE) != null) {\n-                String exceptionMessage =\n-                    this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.ldapUser\",\n-                        userReference.toString());\n-                throw new ResetPasswordException(exceptionMessage);\n+        if (this.checkUserReference(userReference)) {\n+            UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);\n+            InternetAddress email = userProperties.getEmail();\n+\n+            if (email != null) {\n+                DocumentUserReference documentUserReference = (DocumentUserReference) userReference;\n+                DocumentReference reference = documentUserReference.getReference();\n+                XWikiContext context = this.contextProvider.get();\n+\n+                try {\n+                    XWikiDocument userDocument = context.getWiki().getDocument(reference, context);\n+\n+                    if (userDocument.getXObject(LDAP_CLASS_REFERENCE) != null) {\n+                        String exceptionMessage =\n+                            this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.ldapUser\",\n+                                userReference.toString());\n+                        throw new ResetPasswordException(exceptionMessage);\n+                    }\n+\n+                    BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE, true, context);\n+                    String verificationCode = context.getWiki().generateRandomString(30);\n+                    xObject.set(VERIFICATION_PROPERTY, verificationCode, context);\n+\n+                    String saveComment =\n+                        this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.versionComment\");\n+                    context.getWiki().saveDocument(userDocument, saveComment, true, context);\n+\n+                    return new DefaultResetPasswordRequestResponse(userReference, verificationCode);\n+                } catch (XWikiException e) {\n+                    throw new ResetPasswordException(\n+                        \"Error when reading user document to perform reset password request.\",\n+                        e);\n+                }\n+            } else {\n+                // In case the mail is not configured, we log a message to the admin.\n+                this.logger.info(\"User [{}] asked to reset their password, but did not have any email configured.\",\n+                    userReference);\n             }\n-\n-            BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE, true, context);\n-            String verificationCode = context.getWiki().generateRandomString(30);\n-            xObject.set(VERIFICATION_PROPERTY, verificationCode, context);\n-\n-            String saveComment =\n-                this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.versionComment\");\n-            context.getWiki().saveDocument(userDocument, saveComment, true, context);\n-\n-            return new DefaultResetPasswordRequestResponse(userReference, email, verificationCode);\n-        } catch (XWikiException e) {\n-            throw new ResetPasswordException(\"Error when reading user document to perform reset password request.\", e);\n         }\n+        return new DefaultResetPasswordRequestResponse(userReference, null);\n     }\n \n     @Override\n     public void sendResetPasswordEmailRequest(ResetPasswordRequestResponse requestResponse)\n         throws ResetPasswordException\n     {\n-        AuthenticationResourceReference resourceReference =\n-            new AuthenticationResourceReference(AuthenticationAction.RESET_PASSWORD);\n-\n-        UserReference userReference = requestResponse.getUserReference();\n-        UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);\n-        String serializedUserReference = this.referenceSerializer.serialize(userReference);\n-\n-        // FIXME: this should be provided as part of the User API.\n-        String formattedName = \"\";\n-        if (!StringUtils.isBlank(userProperties.getFirstName())) {\n-            formattedName += userProperties.getFirstName();\n-        }\n-        if (!StringUtils.isBlank(userProperties.getLastName())) {\n-            if (!StringUtils.isBlank(formattedName)) {\n-                formattedName += \" \";\n+        if (this.checkUserReference(requestResponse.getUserReference())) {\n+            AuthenticationResourceReference resourceReference =\n+                new AuthenticationResourceReference(AuthenticationAction.RESET_PASSWORD);\n+\n+            UserReference userReference = requestResponse.getUserReference();\n+            UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);\n+            InternetAddress email = userProperties.getEmail();\n+            String serializedUserReference = this.referenceSerializer.serialize(userReference);\n+\n+            // FIXME: this should be provided as part of the User API.\n+            String formattedName = \"\";\n+            if (!StringUtils.isBlank(userProperties.getFirstName())) {\n+                formattedName += userProperties.getFirstName();\n+            }\n+            if (!StringUtils.isBlank(userProperties.getLastName())) {\n+                if (!StringUtils.isBlank(formattedName)) {\n+                    formattedName += \" \";\n+                }\n+                formattedName += userProperties.getLastName();\n+            }\n+            if (StringUtils.isBlank(formattedName)) {\n+                formattedName = serializedUserReference;\n+            }\n+            resourceReference.addParameter(\"u\", serializedUserReference);\n+            resourceReference.addParameter(\"v\", requestResponse.getVerificationCode());\n+\n+            XWikiContext context = contextProvider.get();\n+\n+            ExtendedURL extendedURL = null;\n+            try {\n+                extendedURL = this.resourceReferenceSerializer.serialize(resourceReference);\n+                extendedURL = this.urlNormalizer.normalize(extendedURL);\n+                URL serverURL = context.getURLFactory().getServerURL(context);\n+                URL externalVerificationURL = new URL(serverURL, extendedURL.serialize());\n+\n+                this.resetPasswordMailSenderProvider.get()\n+                    .sendResetPasswordEmail(formattedName, email, externalVerificationURL);\n+            } catch (SerializeResourceReferenceException | UnsupportedResourceReferenceException\n+                | MalformedURLException e) {\n+                throw new ResetPasswordException(\"Error when processing information for creating the email.\", e);\n             }\n-            formattedName += userProperties.getLastName();\n-        }\n-        if (StringUtils.isBlank(formattedName)) {\n-            formattedName = serializedUserReference;\n-        }\n-        resourceReference.addParameter(\"u\", serializedUserReference);\n-        resourceReference.addParameter(\"v\", requestResponse.getVerificationCode());\n-\n-        XWikiContext context = contextProvider.get();\n-\n-        ExtendedURL extendedURL = null;\n-        try {\n-            extendedURL = this.resourceReferenceSerializer.serialize(resourceReference);\n-            extendedURL = this.urlNormalizer.normalize(extendedURL);\n-            URL serverURL = context.getURLFactory().getServerURL(context);\n-            URL externalVerificationURL = new URL(serverURL, extendedURL.serialize());\n-\n-            this.resetPasswordMailSenderProvider.get()\n-                .sendResetPasswordEmail(formattedName, requestResponse.getUserEmail(), externalVerificationURL);\n-        } catch (SerializeResourceReferenceException | UnsupportedResourceReferenceException | MalformedURLException e)\n-        {\n-            throw new ResetPasswordException(\"Error when processing information for creating the email.\", e);\n         }\n     }\n \n     @Override\n     public ResetPasswordRequestResponse checkVerificationCode(UserReference userReference, String verificationCode)\n         throws ResetPasswordException\n     {\n-        this.checkUserReference(userReference);\n-        XWikiContext context = this.contextProvider.get();\n-\n-        UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);\n-        InternetAddress email = userProperties.getEmail();\n-\n-        DocumentUserReference documentUserReference = (DocumentUserReference) userReference;\n-        DocumentReference reference = documentUserReference.getReference();\n-        String exceptionMessage =\n-            this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.step2.error.wrongParameters\",\n-                userReference.toString());\n-\n-        try {\n-            XWikiDocument userDocument = context.getWiki().getDocument(reference, context);\n-            BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);\n-            if (xObject == null) {\n-                throw new ResetPasswordException(exceptionMessage);\n-            }\n+        if (this.checkUserReference(userReference)) {\n+            XWikiContext context = this.contextProvider.get();\n \n-            String storedVerificationCode = xObject.getStringValue(VERIFICATION_PROPERTY);\n-            BaseClass xClass = xObject.getXClass(context);\n-            PropertyInterface verification = xClass.get(VERIFICATION_PROPERTY);\n-            if (!(verification instanceof PasswordClass)) {\n-                throw new ResetPasswordException(\"Bad definition of ResetPassword XClass.\");\n-            }\n-            PasswordClass passwordClass = (PasswordClass) verification;\n-            String equivalentPassword =\n-                passwordClass.getEquivalentPassword(storedVerificationCode, verificationCode);\n-\n-            // We ensure to reset the verification code before checking if it's correct to avoid any bruteforce attack.\n-            String newVerificationCode = context.getWiki().generateRandomString(30);\n-            xObject.set(VERIFICATION_PROPERTY, newVerificationCode, context);\n-            String saveComment = this.localizationManager\n-                .getTranslationPlain(\"xe.admin.passwordReset.step2.versionComment.changeValidationKey\");\n-            context.getWiki().saveDocument(userDocument, saveComment, true, context);\n-\n-            if (!storedVerificationCode.equals(equivalentPassword)) {\n-                throw new ResetPasswordException(exceptionMessage);\n-            }\n+            DocumentUserReference documentUserReference = (DocumentUserReference) userReference;\n+            DocumentReference reference = documentUserReference.getReference();\n+            String exceptionMessage =\n+                this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.step2.error.wrongParameters\",\n+                    userReference.toString());\n \n-            return new DefaultResetPasswordRequestResponse(userReference, email, newVerificationCode);\n-        } catch (XWikiException e) {\n-            throw new ResetPasswordException(\"Cannot open user document to check verification code.\", e);\n+            try {\n+                XWikiDocument userDocument = context.getWiki().getDocument(reference, context);\n+                BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);\n+                if (xObject == null) {\n+                    throw new ResetPasswordException(exceptionMessage);\n+                }\n+\n+                String storedVerificationCode = xObject.getStringValue(VERIFICATION_PROPERTY);\n+                BaseClass xClass = xObject.getXClass(context);\n+                PropertyInterface verification = xClass.get(VERIFICATION_PROPERTY);\n+                if (!(verification instanceof PasswordClass)) {\n+                    throw new ResetPasswordException(\"Bad definition of ResetPassword XClass.\");\n+                }\n+                PasswordClass passwordClass = (PasswordClass) verification;\n+                String equivalentPassword =\n+                    passwordClass.getEquivalentPassword(storedVerificationCode, verificationCode);\n+\n+                // We ensure to reset the verification code before checking if it's correct to avoid\n+                // any bruteforce attack.\n+                String newVerificationCode = context.getWiki().generateRandomString(30);\n+                xObject.set(VERIFICATION_PROPERTY, newVerificationCode, context);\n+                String saveComment = this.localizationManager\n+                    .getTranslationPlain(\"xe.admin.passwordReset.step2.versionComment.changeValidationKey\");\n+                context.getWiki().saveDocument(userDocument, saveComment, true, context);\n+\n+                if (!storedVerificationCode.equals(equivalentPassword)) {\n+                    throw new ResetPasswordException(exceptionMessage);\n+                }\n+\n+                return new DefaultResetPasswordRequestResponse(userReference, newVerificationCode);\n+            } catch (XWikiException e) {\n+                throw new ResetPasswordException(\"Cannot open user document to check verification code.\", e);\n+            }\n+        } else {\n+            return new DefaultResetPasswordRequestResponse(userReference, null);\n         }\n     }\n \n     @Override\n     public void resetPassword(UserReference userReference, String newPassword)\n         throws ResetPasswordException\n     {\n-        this.checkUserReference(userReference);\n-        XWikiContext context = this.contextProvider.get();\n-\n-        DocumentUserReference documentUserReference = (DocumentUserReference) userReference;\n-        DocumentReference reference = documentUserReference.getReference();\n-\n-        try {\n-            XWikiDocument userDocument = context.getWiki().getDocument(reference, context);\n-            userDocument.removeXObjects(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);\n-            BaseObject userXObject = userDocument.getXObject(USER_CLASS_REFERENCE);\n-            userXObject.setStringValue(\"password\", newPassword);\n-\n-            String saveComment = this.localizationManager.getTranslationPlain(\n-                \"xe.admin.passwordReset.step2.versionComment.passwordReset\");\n-            context.getWiki().saveDocument(userDocument, saveComment, true, context);\n-        } catch (XWikiException e) {\n-            throw new ResetPasswordException(\"Cannot open user document to perform reset password.\", e);\n+        if (this.checkUserReference(userReference)) {\n+            XWikiContext context = this.contextProvider.get();\n+\n+            DocumentUserReference documentUserReference = (DocumentUserReference) userReference;\n+            DocumentReference reference = documentUserReference.getReference();\n+\n+            try {\n+                XWikiDocument userDocument = context.getWiki().getDocument(reference, context);\n+                userDocument.removeXObjects(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);\n+                BaseObject userXObject = userDocument.getXObject(USER_CLASS_REFERENCE);\n+                userXObject.setStringValue(\"password\", newPassword);\n+\n+                String saveComment = this.localizationManager.getTranslationPlain(\n+                    \"xe.admin.passwordReset.step2.versionComment.passwordReset\");\n+                context.getWiki().saveDocument(userDocument, saveComment, true, context);\n+            } catch (XWikiException e) {\n+                throw new ResetPasswordException(\"Cannot open user document to perform reset password.\", e);\n+            }\n         }\n     }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/main/java/org/xwiki/security/authentication/internal/DefaultResetPasswordRequestResponse.java",
          "status": "modified",
          "additions": 1,
          "deletions": 16,
          "patch": "@@ -19,8 +19,6 @@\n  */\n package org.xwiki.security.authentication.internal;\n \n-import javax.mail.internet.InternetAddress;\n-\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.xwiki.security.authentication.ResetPasswordRequestResponse;\n@@ -35,19 +33,16 @@\n public final class DefaultResetPasswordRequestResponse implements ResetPasswordRequestResponse\n {\n     private final UserReference userReference;\n-    private final InternetAddress userEmail;\n     private final String verificationCode;\n \n     /**\n      * Default constructor.\n      * @param reference the user for whom a reset password request is performed.\n-     * @param userEmail the email of the user.\n      * @param verificationCode the code to send for resetting the password.\n      */\n-    DefaultResetPasswordRequestResponse(UserReference reference, InternetAddress userEmail, String verificationCode)\n+    DefaultResetPasswordRequestResponse(UserReference reference, String verificationCode)\n     {\n         this.userReference = reference;\n-        this.userEmail = userEmail;\n         this.verificationCode = verificationCode;\n     }\n \n@@ -59,14 +54,6 @@ public UserReference getUserReference()\n         return userReference;\n     }\n \n-    /**\n-     * @return the email of the user.\n-     */\n-    public InternetAddress getUserEmail()\n-    {\n-        return userEmail;\n-    }\n-\n     /**\n      * @return the code to send for resetting the password.\n      */\n@@ -90,7 +77,6 @@ public boolean equals(Object o)\n \n         return new EqualsBuilder()\n             .append(userReference, that.userReference)\n-            .append(userEmail, that.userEmail)\n             .append(verificationCode, that.verificationCode)\n             .isEquals();\n     }\n@@ -100,7 +86,6 @@ public int hashCode()\n     {\n         return new HashCodeBuilder(17, 37)\n             .append(userReference)\n-            .append(userEmail)\n             .append(verificationCode)\n             .toHashCode();\n     }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-default/src/test/java/org/xwiki/security/authentication/internal/DefaultResetPasswordManagerTest.java",
          "status": "modified",
          "additions": 32,
          "deletions": 32,
          "patch": "@@ -28,6 +28,7 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n import org.xwiki.localization.ContextualLocalizationManager;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.resource.ResourceReference;\n@@ -37,6 +38,8 @@\n import org.xwiki.security.authentication.ResetPasswordException;\n import org.xwiki.security.authentication.ResetPasswordManager;\n import org.xwiki.security.authentication.ResetPasswordRequestResponse;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n import org.xwiki.test.junit5.mockito.ComponentTest;\n import org.xwiki.test.junit5.mockito.InjectMockComponents;\n import org.xwiki.test.junit5.mockito.MockComponent;\n@@ -59,7 +62,11 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n@@ -100,6 +107,9 @@ class DefaultResetPasswordManagerTest\n     @MockComponent\n     private Provider<ResetPasswordMailSender> resetPasswordMailSenderProvider;\n \n+    @RegisterExtension\n+    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.INFO);\n+\n     private ResetPasswordMailSender resetPasswordMailSender;\n \n     private DocumentUserReference userReference;\n@@ -145,24 +155,19 @@ void requestResetPassword() throws Exception\n             .thenReturn(\"Save verification code 42\");\n \n         ResetPasswordRequestResponse expectedResult =\n-            new DefaultResetPasswordRequestResponse(this.userReference, email,\n-                verificationCode);\n+            new DefaultResetPasswordRequestResponse(this.userReference, verificationCode);\n         assertEquals(expectedResult, this.resetPasswordManager.requestResetPassword(this.userReference));\n         verify(xObject).set(DefaultResetPasswordManager.VERIFICATION_PROPERTY, verificationCode, context);\n         verify(this.xWiki).saveDocument(this.userDocument, \"Save verification code 42\", true, this.context);\n     }\n \n     @Test\n-    void requestResetPasswordUnexistingUser()\n+    void requestResetPasswordUnexistingUser() throws ResetPasswordException\n     {\n         when(this.userReference.toString()).thenReturn(\"user:Foobar\");\n         when(this.userManager.exists(this.userReference)).thenReturn(false);\n-        String exceptionMessage = \"User [user:Foobar] doesn't exist\";\n-        when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",\n-            \"user:Foobar\")).thenReturn(exceptionMessage);\n-        ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,\n-            () -> this.resetPasswordManager.requestResetPassword(this.userReference));\n-        assertEquals(exceptionMessage, resetPasswordException.getMessage());\n+        assertEquals(new DefaultResetPasswordRequestResponse(this.userReference, null),\n+            this.resetPasswordManager.requestResetPassword(this.userReference));\n     }\n \n     @Test\n@@ -180,12 +185,11 @@ void requestResetPasswordNotDocumentReferenceUser()\n     void requestResetPasswordNoEmail() throws Exception\n     {\n         when(this.userManager.exists(this.userReference)).thenReturn(true);\n-        String exceptionMessage = \"User has no email address.\";\n-        when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noEmail\"))\n-            .thenReturn(exceptionMessage);\n-        ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,\n-            () -> this.resetPasswordManager.requestResetPassword(this.userReference));\n-        assertEquals(exceptionMessage, resetPasswordException.getMessage());\n+        assertEquals(new DefaultResetPasswordRequestResponse(this.userReference, null),\n+            this.resetPasswordManager.requestResetPassword(this.userReference));\n+        when(this.userReference.toString()).thenReturn(\"foo\");\n+        assertEquals(\"User [foo] asked to reset their password, but did not have any email configured.\",\n+            logCapture.getMessage(0));\n     }\n \n     @Test\n@@ -210,6 +214,7 @@ void requestResetPasswordLdapUser() throws Exception\n     @Test\n     void sendResetPasswordEmailRequest() throws Exception\n     {\n+        when(this.userManager.exists(this.userReference)).thenReturn(true);\n         when(this.referenceSerializer.serialize(this.userReference)).thenReturn(\"user:Foobar\");\n         when(this.userProperties.getFirstName()).thenReturn(\"Foo\");\n         when(this.userProperties.getLastName()).thenReturn(\"Bar\");\n@@ -231,9 +236,10 @@ void sendResetPasswordEmailRequest() throws Exception\n         when(urlFactory.getServerURL(this.context)).thenReturn(new URL(\"http://xwiki.org\"));\n \n         InternetAddress email = new InternetAddress(\"foobar@xwiki.org\");\n+        when(this.userProperties.getEmail()).thenReturn(email);\n+\n         DefaultResetPasswordRequestResponse requestResponse =\n-            new DefaultResetPasswordRequestResponse(this.userReference, email,\n-                verificationCode);\n+            new DefaultResetPasswordRequestResponse(this.userReference, verificationCode);\n         this.resetPasswordManager.sendResetPasswordEmailRequest(requestResponse);\n         verify(this.resetPasswordMailSender).sendResetPasswordEmail(\"Foo Bar\", email,\n             new URL(\"http://xwiki.org/xwiki/authenticate/reset?u=user%3AFoobar&v=foobar4242\"));\n@@ -266,24 +272,20 @@ void checkVerificationCode() throws Exception\n             .getTranslationPlain(\"xe.admin.passwordReset.step2.versionComment.changeValidationKey\"))\n             .thenReturn(saveComment);\n         DefaultResetPasswordRequestResponse expected =\n-            new DefaultResetPasswordRequestResponse(this.userReference, email,\n-                newVerificationCode);\n+            new DefaultResetPasswordRequestResponse(this.userReference, newVerificationCode);\n \n         assertEquals(expected, this.resetPasswordManager.checkVerificationCode(this.userReference, verificationCode));\n         verify(this.xWiki).saveDocument(this.userDocument, saveComment, true, context);\n     }\n \n     @Test\n-    void checkVerificationCodeUnexistingUser()\n+    void checkVerificationCodeUnexistingUser() throws ResetPasswordException\n     {\n         when(this.userReference.toString()).thenReturn(\"user:Foobar\");\n         when(this.userManager.exists(this.userReference)).thenReturn(false);\n-        String exceptionMessage = \"User [user:Foobar] doesn't exist\";\n-        when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",\n-            \"user:Foobar\")).thenReturn(exceptionMessage);\n-        ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,\n-            () -> this.resetPasswordManager.checkVerificationCode(this.userReference, \"some code\"));\n-        assertEquals(exceptionMessage, resetPasswordException.getMessage());\n+        ResetPasswordRequestResponse resetPasswordRequestResponse =\n+            this.resetPasswordManager.checkVerificationCode(this.userReference, \"some code\");\n+        assertEquals(new DefaultResetPasswordRequestResponse(this.userReference, null), resetPasswordRequestResponse);\n     }\n \n     @Test\n@@ -358,12 +360,10 @@ void resetPasswordUnexistingUser() throws Exception\n     {\n         when(this.userReference.toString()).thenReturn(\"user:Foobar\");\n         when(this.userManager.exists(this.userReference)).thenReturn(false);\n-        String exceptionMessage = \"User [user:Foobar] doesn't exist\";\n-        when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",\n-            \"user:Foobar\")).thenReturn(exceptionMessage);\n-        ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,\n-            () -> this.resetPasswordManager.resetPassword(this.userReference, \"some password\"));\n-        assertEquals(exceptionMessage, resetPasswordException.getMessage());\n+        this.resetPasswordManager.resetPassword(this.userReference, \"some password\");\n+        verify(this.xWiki, never()).getDocument(any(DocumentReference.class), any(XWikiContext.class));\n+        verify(this.xWiki, never()).saveDocument(any(XWikiDocument.class), anyString(), anyBoolean(),\n+            any(XWikiContext.class));\n     }\n \n     @Test"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/main/java/org/xwiki/security/authentication/script/AuthenticationScriptService.java",
          "status": "modified",
          "additions": 1,
          "deletions": 7,
          "patch": "@@ -27,7 +27,6 @@\n import javax.inject.Named;\n import javax.inject.Provider;\n import javax.inject.Singleton;\n-import javax.mail.internet.InternetAddress;\n \n import org.slf4j.Logger;\n import org.xwiki.component.annotation.Component;\n@@ -190,21 +189,16 @@ public String getAuthenticationURL(String action, Map<String, Object> params)\n      * This method returns the email address used, so that we can display it to the user.\n      *\n      * @param user the user for which to perform a reset password request.\n-     * @return the email address used to send the verification code or {@code null} if the user calling this method\n-     *         doesn't have programming rights.\n      * @throws ResetPasswordException if any error occurs for performing the reset password request.\n      * @since 13.1RC1\n      */\n     @Unstable\n-    public InternetAddress requestResetPassword(UserReference user) throws ResetPasswordException\n+    public void requestResetPassword(UserReference user) throws ResetPasswordException\n     {\n         if (this.authorizationManager.hasAccess(Right.PROGRAM)) {\n             ResetPasswordRequestResponse resetPasswordRequestResponse =\n                 this.resetPasswordManager.requestResetPassword(user);\n             this.resetPasswordManager.sendResetPasswordEmailRequest(resetPasswordRequestResponse);\n-            return resetPasswordRequestResponse.getUserEmail();\n-        } else {\n-            return null;\n         }\n     }\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authentication/xwiki-platform-security-authentication-script/src/test/java/org/xwiki/security/authentication/script/AuthenticationScriptServiceTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -195,9 +195,8 @@ void requestResetPassword() throws Exception\n         ResetPasswordRequestResponse requestResponse = mock(ResetPasswordRequestResponse.class);\n         when(this.resetPasswordManager.requestResetPassword(userReference)).thenReturn(requestResponse);\n         InternetAddress userEmail = new InternetAddress(\"acme@xwiki.org\");\n-        when(requestResponse.getUserEmail()).thenReturn(userEmail);\n \n-        assertEquals(userEmail, this.scriptService.requestResetPassword(userReference));\n+        this.scriptService.requestResetPassword(userReference);\n         verify(this.resetPasswordManager).sendResetPasswordEmailRequest(requestResponse);\n     }\n \n@@ -206,7 +205,7 @@ void requestResetPasswordWithoutPR() throws Exception\n     {\n         when(this.authorizationManager.hasAccess(Right.PROGRAM)).thenReturn(false);\n \n-        assertNull(this.scriptService.requestResetPassword(mock(UserReference.class)));\n+        this.scriptService.requestResetPassword(mock(UserReference.class));\n         verify(this.resetPasswordManager, never()).requestResetPassword(any());\n         verify(this.resetPasswordManager, never()).sendResetPasswordEmailRequest(any());\n     }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/resetpasswordinline.vm",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -77,14 +77,14 @@ $services.localization.render('xe.admin.passwordReset.instructions')\n         $services.localization.render('xe.admin.passwordReset.error.csrf')\n     #else\n         #try()\n-            #set ($email = $services.security.authentication.requestResetPassword($userName))\n+            #set ($discard = $services.security.authentication.requestResetPassword($userName))\n         #end\n         #if (\"$!exception\" != '')\n             #resetPasswordBoxStart(\"warning\")\n             #displayResetPasswordException()\n         #else\n             #resetPasswordBoxStart(\"default\")\n-            $services.localization.render('xe.admin.passwordReset.emailSent', [\"$services.mail.general.obfuscate($email)\"])\n+            $services.localization.render('xe.admin.passwordReset.emailSentToUsername', [\"$escapetool.xml($userName)\"])\n         #end\n     #end\n   <div>"
        }
      ],
      "file_patterns": {
        "security_files": 9,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 10,
        "max_directory_depth": 12
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions it's possible to guess if a user has an account on the wiki by using the \"Forgot your password\" form, even if the wiki is closed to guest users. This problem has been patched on XWiki 12.10.9, 13.4.1 and 13.6RC1. Users are advised yo update. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-09T21:15:08.053",
    "last_modified": "2024-11-21T06:48:56.937",
    "fix_date": "2021-06-29T07:48:38Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/d8a3cce48e0ac1a0f4a3cea7a19747382d9c9494",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-35fg-hjcr-j65f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-18787",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/d8a3cce48e0ac1a0f4a3cea7a19747382d9c9494",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-35fg-hjcr-j65f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-18787",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.694793",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}