{
  "cve_id": "CVE-2022-23623",
  "github_data": {
    "repository": "frouriojs/frourio",
    "fix_commit": "7c19ac5363305b81b1c6b5232620228763d427af",
    "related_commits": [
      "7c19ac5363305b81b1c6b5232620228763d427af",
      "7c19ac5363305b81b1c6b5232620228763d427af"
    ],
    "patch_url": "https://github.com/frouriojs/frourio/commit/7c19ac5363305b81b1c6b5232620228763d427af.patch",
    "fix_commit_details": {
      "sha": "7c19ac5363305b81b1c6b5232620228763d427af",
      "commit_date": "2022-01-31T10:33:31Z",
      "author": {
        "login": "SegaraRai",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat(validation): use class-transformer to support validation of nested objects",
        "length": 79,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 209,
        "additions": 185,
        "deletions": 24
      },
      "files": [
        {
          "filename": "__test__/index.spec.ts",
          "status": "modified",
          "additions": 83,
          "deletions": 0,
          "patch": "@@ -204,6 +204,89 @@ test('POST: 400', async () => {\n   ).rejects.toHaveProperty('response.status', 400)\n })\n \n+test('POST: nested validation', async () => {\n+  const res1 = await client.users.post({\n+    body: {\n+      id: 123,\n+      name: 'foo',\n+      location: {\n+        country: 'JP',\n+        stateProvince: 'Tokyo'\n+      }\n+    }\n+  })\n+  expect(res1.status).toBe(204)\n+\n+  // Note that extraneous properties are allowed by default\n+  const res2 = await client.users.post({\n+    body: {\n+      id: 123,\n+      name: 'foo',\n+      location: {\n+        country: 'JP',\n+        stateProvince: 'Tokyo',\n+        extra1: {\n+          extra1a: 'bar',\n+          extra1b: 'baz'\n+        }\n+      },\n+      extra2: 'qux'\n+    } as any\n+  })\n+  expect(res2.status).toBe(204)\n+})\n+\n+test('POST: 400 (nested validation)', async () => {\n+  // id is not a number\n+  await expect(\n+    client.users.post({\n+      body: {\n+        id: '123',\n+        name: 'foo',\n+        location: {\n+          country: 'JP',\n+          stateProvince: 'Tokyo'\n+        }\n+      } as any\n+    })\n+  ).rejects.toHaveProperty('response.status', 400)\n+\n+  // location is missing\n+  await expect(\n+    client.users.post({\n+      body: { id: 123, name: 'foo' } as any\n+    })\n+  ).rejects.toHaveProperty('response.status', 400)\n+\n+  // country is not a valid 2-letter country code\n+  await expect(\n+    client.users.post({\n+      body: {\n+        id: 123,\n+        name: 'foo',\n+        location: {\n+          country: 'XX',\n+          stateProvince: 'Tokyo'\n+        }\n+      } as any\n+    })\n+  ).rejects.toHaveProperty('response.status', 400)\n+\n+  // stateProvince is not a string\n+  await expect(\n+    client.users.post({\n+      body: {\n+        id: 123,\n+        name: 'foo',\n+        location: {\n+          country: 'JP',\n+          stateProvince: 1234\n+        }\n+      } as any\n+    })\n+  ).rejects.toHaveProperty('response.status', 400)\n+})\n+\n test('controller dependency injection', async () => {\n   let val = 0\n   const id = '5'"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -95,6 +95,7 @@\n     \"@typescript-eslint/eslint-plugin\": \"^4.28.1\",\n     \"@typescript-eslint/parser\": \"^4.28.1\",\n     \"axios\": \"^0.21.1\",\n+    \"class-transformer\": \"^0.5.1\",\n     \"class-validator\": \"^0.13.1\",\n     \"eslint\": \"^7.30.0\",\n     \"eslint-config-prettier\": \"^8.3.0\",\n@@ -109,6 +110,7 @@\n     \"jest\": \"^27.0.6\",\n     \"node-fetch\": \"^2.6.1\",\n     \"prettier\": \"^2.3.2\",\n+    \"reflect-metadata\": \"^0.1.13\",\n     \"rimraf\": \"^3.0.2\",\n     \"standard-version\": \"^9.3.0\",\n     \"ts-jest\": \"^27.0.3\","
        },
        {
          "filename": "servers/all/$server.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -1,9 +1,13 @@\n /* eslint-disable */\n // prettier-ignore\n-import multipart, { FastifyMultipartAttactFieldsToBodyOptions, Multipart } from 'fastify-multipart'\n+import 'reflect-metadata'\n+// prettier-ignore\n+import { ClassTransformOptions, plainToInstance } from 'class-transformer'\n // prettier-ignore\n import { validateOrReject, ValidatorOptions } from 'class-validator'\n // prettier-ignore\n+import multipart, { FastifyMultipartAttactFieldsToBodyOptions, Multipart } from 'fastify-multipart'\n+// prettier-ignore\n import * as Validators from './validators'\n // prettier-ignore\n import hooksFn0 from './api/hooks'\n@@ -43,6 +47,7 @@ import type { FastifyInstance, RouteHandlerMethod, preValidationHookHandler, Fas\n // prettier-ignore\n export type FrourioOptions = {\n   basePath?: string\n+  transformer?: ClassTransformOptions\n   validator?: ValidatorOptions\n   multipart?: FastifyMultipartAttactFieldsToBodyOptions\n }\n@@ -260,6 +265,7 @@ const asyncMethodToHandler = (\n // prettier-ignore\n export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n   const basePath = options.basePath ?? ''\n+  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }\n   const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }\n   const hooks0 = hooksFn0(fastify)\n   const hooks1 = hooksFn1(fastify)\n@@ -292,7 +298,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n         callParserIfExistsQuery(parseBooleanTypeQueryParams([['bool', false, false], ['optionalBool', true, false], ['boolArray', false, true], ['optionalBoolArray', true, true]])),\n         normalizeQuery,\n         createValidateHandler(req => [\n-          Object.keys(req.query as any).length ? validateOrReject(Object.assign(new Validators.Query(), req.query as any), validatorOptions) : null\n+          Object.keys(req.query as any).length ? validateOrReject(plainToInstance(Validators.Query, req.query as any, transformerOptions), validatorOptions) : null\n         ])\n       ]\n     },\n@@ -310,8 +316,8 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n         formatMultipartData([]),\n         normalizeQuery,\n         createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.Query(), req.query as any), validatorOptions),\n-          validateOrReject(Object.assign(new Validators.Body(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.Query, req.query as any, transformerOptions), validatorOptions),\n+          validateOrReject(plainToInstance(Validators.Body, req.body as any, transformerOptions), validatorOptions)\n         ])\n       ]\n     },\n@@ -344,7 +350,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n       preValidation: [\n         formatMultipartData([['requiredArr', false], ['optionalArr', true], ['empty', true], ['vals', false], ['files', false]]),\n         createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.MultiForm(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.MultiForm, req.body as any, transformerOptions), validatorOptions)\n         ])\n       ]\n     },\n@@ -404,7 +410,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n       onRequest: [...hooks0.onRequest, hooks2.onRequest],\n       preParsing: hooks0.preParsing,\n       preValidation: createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.UserInfo(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.UserInfo, req.body as any, transformerOptions), validatorOptions)\n         ]),\n       preHandler: ctrlHooks1.preHandler\n     } as RouteShorthandOptions,"
        },
        {
          "filename": "servers/all/api/users/_userId@number/controller.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -5,5 +5,15 @@ export type AdditionalRequest = {\n }\n \n export default defineController(() => ({\n-  get: ({ params }) => ({ status: 200, body: { id: params.userId, name: 'bbb' } })\n+  get: ({ params }) => ({\n+    status: 200,\n+    body: {\n+      id: params.userId,\n+      name: 'bbb',\n+      location: {\n+        country: 'JP',\n+        stateProvince: 'Tokyo'\n+      }\n+    }\n+  })\n }))"
        },
        {
          "filename": "servers/all/api/users/controller.ts",
          "status": "modified",
          "additions": 13,
          "deletions": 1,
          "patch": "@@ -16,6 +16,18 @@ const hooks = defineHooks(() => ({\n export { hooks, AdditionalRequest }\n \n export default defineController(() => ({\n-  get: async () => ({ status: 200, body: [{ id: 1, name: 'aa' }] }),\n+  get: async () => ({\n+    status: 200,\n+    body: [\n+      {\n+        id: 1,\n+        name: 'aa',\n+        location: {\n+          country: 'JP',\n+          stateProvince: 'Tokyo'\n+        }\n+      }\n+    ]\n+  }),\n   post: () => ({ status: 204 })\n }))"
        },
        {
          "filename": "servers/all/validators/index.ts",
          "status": "modified",
          "additions": 20,
          "deletions": 1,
          "patch": "@@ -1,3 +1,4 @@\n+import { Type } from 'class-transformer'\n import {\n   IsNumberString,\n   IsBooleanString,\n@@ -8,7 +9,10 @@ import {\n   IsString,\n   Allow,\n   IsOptional,\n-  ArrayNotEmpty\n+  ArrayNotEmpty,\n+  IsISO31661Alpha2,\n+  ValidateNested,\n+  IsObject\n } from 'class-validator'\n import type { ReadStream } from 'fs'\n \n@@ -52,12 +56,27 @@ export class Body {\n   file: File | ReadStream\n }\n \n+export class UserInfoLocation {\n+  @IsISO31661Alpha2()\n+  country: string\n+\n+  @IsString()\n+  stateProvince: string\n+}\n+\n export class UserInfo {\n   @IsInt()\n   id: number\n \n   @MaxLength(20)\n   name: string\n+\n+  // @Type decorator is required to validate nested object properly\n+  // @IsObject decorator is required or class-validator will not throw an error when the property is missing\n+  @ValidateNested()\n+  @IsObject()\n+  @Type(() => UserInfoLocation)\n+  location: UserInfoLocation\n }\n \n export class MultiForm {"
        },
        {
          "filename": "servers/noMulter/$server.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -1,5 +1,9 @@\n /* eslint-disable */\n // prettier-ignore\n+import 'reflect-metadata'\n+// prettier-ignore\n+import { ClassTransformOptions, plainToInstance } from 'class-transformer'\n+// prettier-ignore\n import { validateOrReject, ValidatorOptions } from 'class-validator'\n // prettier-ignore\n import * as Validators from './validators'\n@@ -27,6 +31,7 @@ import type { FastifyInstance, RouteHandlerMethod, preValidationHookHandler, Fas\n // prettier-ignore\n export type FrourioOptions = {\n   basePath?: string\n+  transformer?: ClassTransformOptions\n   validator?: ValidatorOptions\n }\n \n@@ -122,6 +127,7 @@ const asyncMethodToHandler = (\n // prettier-ignore\n export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n   const basePath = options.basePath ?? ''\n+  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }\n   const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }\n   const hooks0 = hooksFn0(fastify)\n   const hooks1 = hooksFn1(fastify)\n@@ -139,7 +145,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n     {\n       onRequest: [hooks0.onRequest, ctrlHooks0.onRequest],\n       preValidation: createValidateHandler(req => [\n-          Object.keys(req.query as any).length ? validateOrReject(Object.assign(new Validators.Query(), req.query as any), validatorOptions) : null\n+          Object.keys(req.query as any).length ? validateOrReject(plainToInstance(Validators.Query, req.query as any, transformerOptions), validatorOptions) : null\n         ])\n     },\n     asyncMethodToHandler(controller0.get)\n@@ -150,8 +156,8 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n     {\n       onRequest: [hooks0.onRequest, ctrlHooks0.onRequest],\n       preValidation: createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.Query(), req.query as any), validatorOptions),\n-          validateOrReject(Object.assign(new Validators.Body(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.Query, req.query as any, transformerOptions), validatorOptions),\n+          validateOrReject(plainToInstance(Validators.Body, req.body as any, transformerOptions), validatorOptions)\n         ])\n     },\n     methodToHandler(controller0.post)\n@@ -203,7 +209,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n     {\n       onRequest: [hooks0.onRequest, hooks1.onRequest],\n       preValidation: createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.UserInfo(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.UserInfo, req.body as any, transformerOptions), validatorOptions)\n         ]),\n       preHandler: ctrlHooks1.preHandler\n     } as RouteShorthandOptions,"
        },
        {
          "filename": "servers/noTypedParams/$server.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -1,9 +1,13 @@\n /* eslint-disable */\n // prettier-ignore\n-import multipart, { FastifyMultipartAttactFieldsToBodyOptions, Multipart } from 'fastify-multipart'\n+import 'reflect-metadata'\n+// prettier-ignore\n+import { ClassTransformOptions, plainToInstance } from 'class-transformer'\n // prettier-ignore\n import { validateOrReject, ValidatorOptions } from 'class-validator'\n // prettier-ignore\n+import multipart, { FastifyMultipartAttactFieldsToBodyOptions, Multipart } from 'fastify-multipart'\n+// prettier-ignore\n import * as Validators from './validators'\n // prettier-ignore\n import hooksFn0 from './api/hooks'\n@@ -31,6 +35,7 @@ import type { FastifyInstance, RouteHandlerMethod, preValidationHookHandler, Fas\n // prettier-ignore\n export type FrourioOptions = {\n   basePath?: string\n+  transformer?: ClassTransformOptions\n   validator?: ValidatorOptions\n   multipart?: FastifyMultipartAttactFieldsToBodyOptions\n }\n@@ -146,6 +151,7 @@ const asyncMethodToHandler = (\n // prettier-ignore\n export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n   const basePath = options.basePath ?? ''\n+  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }\n   const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }\n   const hooks0 = hooksFn0(fastify)\n   const hooks1 = hooksFn1(fastify)\n@@ -165,7 +171,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n     {\n       onRequest: [hooks0.onRequest, ctrlHooks0.onRequest],\n       preValidation: createValidateHandler(req => [\n-          Object.keys(req.query as any).length ? validateOrReject(Object.assign(new Validators.Query(), req.query as any), validatorOptions) : null\n+          Object.keys(req.query as any).length ? validateOrReject(plainToInstance(Validators.Query, req.query as any, transformerOptions), validatorOptions) : null\n         ])\n     },\n     asyncMethodToHandler(controller0.get)\n@@ -178,8 +184,8 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n       preValidation: [\n         formatMultipartData([]),\n         createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.Query(), req.query as any), validatorOptions),\n-          validateOrReject(Object.assign(new Validators.Body(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.Query, req.query as any, transformerOptions), validatorOptions),\n+          validateOrReject(plainToInstance(Validators.Body, req.body as any, transformerOptions), validatorOptions)\n         ])\n       ]\n     },\n@@ -201,7 +207,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n       preValidation: [\n         formatMultipartData([['empty', false], ['vals', false], ['files', false]]),\n         createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.MultiForm(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.MultiForm, req.body as any, transformerOptions), validatorOptions)\n         ])\n       ]\n     },\n@@ -246,7 +252,7 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n     {\n       onRequest: [hooks0.onRequest, hooks1.onRequest],\n       preValidation: createValidateHandler(req => [\n-          validateOrReject(Object.assign(new Validators.UserInfo(), req.body as any), validatorOptions)\n+          validateOrReject(plainToInstance(Validators.UserInfo, req.body as any, transformerOptions), validatorOptions)\n         ]),\n       preHandler: ctrlHooks1.preHandler\n     } as RouteShorthandOptions,"
        },
        {
          "filename": "src/buildServerFile.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -29,10 +29,16 @@ export default (input: string, project?: string) => {\n \n   return {\n     text: addPrettierIgnore(`/* eslint-disable */${\n+      hasValidator\n+        ? \"\\nimport 'reflect-metadata'\" +\n+          \"\\nimport { ClassTransformOptions, plainToInstance } from 'class-transformer'\" +\n+          \"\\nimport { validateOrReject, ValidatorOptions } from 'class-validator'\"\n+        : ''\n+    }${\n       hasMultipart\n         ? \"\\nimport multipart, { FastifyMultipartAttactFieldsToBodyOptions, Multipart } from 'fastify-multipart'\"\n         : ''\n-    }${hasValidator ? \"\\nimport { validateOrReject, ValidatorOptions } from 'class-validator'\" : ''}\n+    }\n ${hasValidator ? \"import * as Validators from './validators'\\n\" : ''}${imports}${\n       hasMultipart ? \"import type { ReadStream } from 'fs'\\n\" : ''\n     }import type { LowerHttpMethod, AspidaMethods, HttpStatusOk, AspidaMethodParams } from 'aspida'\n@@ -46,7 +52,7 @@ import type { FastifyInstance, RouteHandlerMethod${\n \n export type FrourioOptions = {\n   basePath?: string\n-${hasValidator ? '  validator?: ValidatorOptions\\n' : ''}${\n+${hasValidator ? '  transformer?: ClassTransformOptions\\n  validator?: ValidatorOptions\\n' : ''}${\n       hasMultipart ? '  multipart?: FastifyMultipartAttactFieldsToBodyOptions\\n' : ''\n     }}\n \n@@ -262,7 +268,8 @@ export default (fastify: FastifyInstance, options: FrourioOptions = {}) => {\n   const basePath = options.basePath ?? ''\n ${\n   hasValidator\n-    ? '  const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }\\n'\n+    ? '  const transformerOptions: ClassTransformOptions = { enableCircularCheck: true, ...options.transformer }\\n' +\n+      '  const validatorOptions: ValidatorOptions = { validationError: { target: false }, ...options.validator }\\n'\n     : ''\n }${consts}\n ${"
        },
        {
          "filename": "src/createControllersText.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -482,9 +482,9 @@ ${validateInfo\n     v.type\n       ? `          ${\n           v.hasQuestion ? `Object.keys(req.${v.name} as any).length ? ` : ''\n-        }validateOrReject(Object.assign(new Validators.${checker.typeToString(v.type)}(), req.${\n+        }validateOrReject(plainToInstance(Validators.${checker.typeToString(v.type)}, req.${\n           v.name\n-        } as any), validatorOptions)${v.hasQuestion ? ' : null' : ''}`\n+        } as any, transformerOptions), validatorOptions)${v.hasQuestion ? ' : null' : ''}`\n       : ''\n   )\n   .join(',\\n')}\\n        ])`"
        },
        {
          "filename": "yarn.lock",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -1555,6 +1555,11 @@ cjs-module-lexer@^1.0.0:\n   resolved \"https://registry.yarnpkg.com/cjs-module-lexer/-/cjs-module-lexer-1.2.1.tgz#2fd46d9906a126965aa541345c499aaa18e8cd73\"\n   integrity sha512-jVamGdJPDeuQilKhvVn1h3knuMOZzr8QDnpk+M9aMlCaMkTDd6fBWPhiDqFvFZ07pL0liqabAiuy8SY4jGHeaw==\n \n+class-transformer@^0.5.1:\n+  version \"0.5.1\"\n+  resolved \"https://registry.yarnpkg.com/class-transformer/-/class-transformer-0.5.1.tgz#24147d5dffd2a6cea930a3250a677addf96ab336\"\n+  integrity sha512-SQa1Ws6hUbfC98vKGxZH3KFY0Y1lm5Zm0SY8XX9zbK7FJCyVEac3ATW0RIpwzW+oOfmHE5PMPufDG9hCfoEOMw==\n+\n class-validator@^0.13.1:\n   version \"0.13.1\"\n   resolved \"https://registry.yarnpkg.com/class-validator/-/class-validator-0.13.1.tgz#381b2001ee6b9e05afd133671fbdf760da7dec67\"\n@@ -4636,6 +4641,11 @@ redent@^3.0.0:\n     indent-string \"^4.0.0\"\n     strip-indent \"^3.0.0\"\n \n+reflect-metadata@^0.1.13:\n+  version \"0.1.13\"\n+  resolved \"https://registry.yarnpkg.com/reflect-metadata/-/reflect-metadata-0.1.13.tgz#67ae3ca57c972a2aa1642b10fe363fe32d49dc08\"\n+  integrity sha512-Ts1Y/anZELhSsjMcU605fU9RE4Oi3p5ORujwbIKXfWa+0Zxs510Qrmrce5/Jowq3cHSZSJqBjypxmHarc+vEWg==\n+\n regexpp@^3.0.0, regexpp@^3.1.0:\n   version \"3.1.0\"\n   resolved \"https://registry.yarnpkg.com/regexpp/-/regexpp-3.1.0.tgz#206d0ad0a5648cffbdb8ae46438f3dc51c9f78e2\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 9,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c8db03188a99fea882814fd8851b7b5b44919786",
            "date": "2024-11-14T13:05:59Z",
            "author_login": "solufa"
          },
          {
            "sha": "164b3c80b2d03c4f151ee94b8b190b7eac893cd4",
            "date": "2024-11-14T12:59:37Z",
            "author_login": "solufa"
          },
          {
            "sha": "31f9ba84fcc2cdf35a3987a0fdc3e78b157c375c",
            "date": "2024-11-14T12:58:54Z",
            "author_login": "solufa"
          },
          {
            "sha": "4d8d9590cbd121267fee7a7dbad90653a87f7941",
            "date": "2024-11-14T11:06:51Z",
            "author_login": "solufa"
          },
          {
            "sha": "115661e309ff9dff210d8d2b6b5ed33f8eb246b5",
            "date": "2024-11-14T11:04:17Z",
            "author_login": "solufa"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "Frourio is a full stack framework, for TypeScript. Frourio users who uses frourio version prior to v0.26.0 and integration with class-validator through `validators/` folder are subject to a input validation vulnerability. Validators do not work properly for request bodies and queries in specific situations and some input is not validated at all. Users are advised to update frourio to v0.26.0 or later and to install `class-transformer` and `reflect-metadata`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-07T23:15:07.787",
    "last_modified": "2024-11-21T06:48:57.470",
    "fix_date": "2022-01-31T10:33:31Z"
  },
  "references": [
    {
      "url": "https://github.com/frouriojs/frourio/commit/7c19ac5363305b81b1c6b5232620228763d427af",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/frouriojs/frourio/security/advisories/GHSA-8xxm-h73r-ghfj",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/frouriojs/frourio/commit/7c19ac5363305b81b1c6b5232620228763d427af",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/frouriojs/frourio/security/advisories/GHSA-8xxm-h73r-ghfj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.145722",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "frourio",
    "owner": "frouriojs",
    "created_at": "2020-05-29T09:22:16Z",
    "updated_at": "2024-12-27T03:55:26Z",
    "pushed_at": "2024-11-14T13:06:30Z",
    "size": 2028,
    "stars": 1222,
    "forks": 24,
    "open_issues": 1,
    "watchers": 1222,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "develop",
      "main"
    ],
    "languages": {
      "TypeScript": 237619,
      "JavaScript": 2030,
      "Makefile": 160
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:11:24.134345"
  }
}