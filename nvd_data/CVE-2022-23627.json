{
  "cve_id": "CVE-2022-23627",
  "github_data": {
    "repository": "JustArchiNET/ArchiSteamFarm",
    "fix_commit": "7a29d9282bdc3280db2a379c24f73916d786f9b4",
    "related_commits": [
      "7a29d9282bdc3280db2a379c24f73916d786f9b4",
      "f807bdb660e75dee5a34994f2ea70970ca6d0492",
      "7a29d9282bdc3280db2a379c24f73916d786f9b4",
      "f807bdb660e75dee5a34994f2ea70970ca6d0492"
    ],
    "patch_url": "https://github.com/JustArchiNET/ArchiSteamFarm/commit/7a29d9282bdc3280db2a379c24f73916d786f9b4.patch",
    "fix_commit_details": {
      "sha": "7a29d9282bdc3280db2a379c24f73916d786f9b4",
      "commit_date": "2022-02-08T19:56:21Z",
      "author": {
        "login": "JustArchi",
        "type": "User",
        "stats": {
          "total_commits": 8867,
          "average_weekly_commits": 18.396265560165975,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 453
        }
      },
      "commit_message": {
        "title": "Fix permissions when proxifying commands",
        "length": 40,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 283,
        "additions": 153,
        "deletions": 130
      },
      "files": [
        {
          "filename": "ArchiSteamFarm/Steam/Interaction/Commands.cs",
          "status": "modified",
          "additions": 153,
          "deletions": 130,
          "patch": "@@ -149,7 +149,7 @@ public static string FormatStaticResponse(string response) {\n \t\t\t\t\tcase \"RESTART\":\n \t\t\t\t\t\treturn ResponseRestart(access);\n \t\t\t\t\tcase \"SA\":\n-\t\t\t\t\t\treturn await ResponseStatus(access, SharedInfo.ASF).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseStatus(access, SharedInfo.ASF, steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"START\":\n \t\t\t\t\t\treturn ResponseStart(access);\n \t\t\t\t\tcase \"STATS\":\n@@ -174,106 +174,106 @@ public static string FormatStaticResponse(string response) {\n \t\t\tdefault:\n \t\t\t\tswitch (args[0].ToUpperInvariant()) {\n \t\t\t\t\tcase \"2FA\":\n-\t\t\t\t\t\treturn await Response2FA(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await Response2FA(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"2FANO\":\n-\t\t\t\t\t\treturn await Response2FAConfirm(access, Utilities.GetArgsAsText(args, 1, \",\"), false).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await Response2FAConfirm(access, Utilities.GetArgsAsText(args, 1, \",\"), false, steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"2FAOK\":\n-\t\t\t\t\t\treturn await Response2FAConfirm(access, Utilities.GetArgsAsText(args, 1, \",\"), true).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await Response2FAConfirm(access, Utilities.GetArgsAsText(args, 1, \",\"), true, steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"ADDLICENSE\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseAddLicense(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseAddLicense(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"ADDLICENSE\":\n \t\t\t\t\t\treturn await ResponseAddLicense(access, args[1]).ConfigureAwait(false);\n \t\t\t\t\tcase \"BALANCE\":\n-\t\t\t\t\t\treturn await ResponseWalletBalance(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseWalletBalance(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"BGR\":\n-\t\t\t\t\t\treturn await ResponseBackgroundGamesRedeemer(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseBackgroundGamesRedeemer(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"ENCRYPT\" when args.Length > 2:\n \t\t\t\t\t\treturn ResponseEncrypt(access, args[1], Utilities.GetArgsAsText(message, 2));\n \t\t\t\t\tcase \"FARM\":\n-\t\t\t\t\t\treturn await ResponseFarm(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseFarm(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"FB\":\n-\t\t\t\t\t\treturn await ResponseFarmingBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseFarmingBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"FBADD\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseFarmingBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseFarmingBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"FBADD\":\n \t\t\t\t\t\treturn ResponseFarmingBlacklistAdd(access, args[1]);\n \t\t\t\t\tcase \"FBRM\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseFarmingBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseFarmingBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"FBRM\":\n \t\t\t\t\t\treturn ResponseFarmingBlacklistRemove(access, args[1]);\n \t\t\t\t\tcase \"FQ\":\n-\t\t\t\t\t\treturn await ResponseFarmingQueue(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseFarmingQueue(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"FQADD\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseFarmingQueueAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseFarmingQueueAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"FQADD\":\n \t\t\t\t\t\treturn ResponseFarmingQueueAdd(access, args[1]);\n \t\t\t\t\tcase \"FQRM\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseFarmingQueueRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseFarmingQueueRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"FQRM\":\n \t\t\t\t\t\treturn ResponseFarmingQueueRemove(access, args[1]);\n \t\t\t\t\tcase \"HASH\" when args.Length > 2:\n \t\t\t\t\t\treturn ResponseHash(access, args[1], Utilities.GetArgsAsText(message, 2));\n \t\t\t\t\tcase \"INPUT\" when args.Length > 3:\n-\t\t\t\t\t\treturn await ResponseInput(access, args[1], args[2], Utilities.GetArgsAsText(message, 3)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseInput(access, args[1], args[2], Utilities.GetArgsAsText(message, 3), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"INPUT\" when args.Length > 2:\n \t\t\t\t\t\treturn ResponseInput(access, args[1], args[2]);\n \t\t\t\t\tcase \"LEVEL\":\n-\t\t\t\t\t\treturn await ResponseLevel(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseLevel(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"LOOT\":\n-\t\t\t\t\t\treturn await ResponseLoot(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseLoot(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"LOOT^\" when args.Length > 3:\n-\t\t\t\t\t\treturn await ResponseAdvancedLoot(access, args[1], args[2], Utilities.GetArgsAsText(message, 3)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseAdvancedLoot(access, args[1], args[2], Utilities.GetArgsAsText(message, 3), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"LOOT^\" when args.Length > 2:\n \t\t\t\t\t\treturn await ResponseAdvancedLoot(access, args[1], args[2]).ConfigureAwait(false);\n \t\t\t\t\tcase \"LOOT@\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), false, steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"LOOT@\":\n-\t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1]).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], false).ConfigureAwait(false);\n \t\t\t\t\tcase \"LOOT%\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), true).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), true, steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"LOOT%\":\n \t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], true).ConfigureAwait(false);\n \t\t\t\t\tcase \"MAB\":\n-\t\t\t\t\t\treturn await ResponseMatchActivelyBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseMatchActivelyBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"MABADD\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseMatchActivelyBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseMatchActivelyBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"MABADD\":\n \t\t\t\t\t\treturn ResponseMatchActivelyBlacklistAdd(access, args[1]);\n \t\t\t\t\tcase \"MABRM\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseMatchActivelyBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseMatchActivelyBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"MABRM\":\n \t\t\t\t\t\treturn ResponseMatchActivelyBlacklistRemove(access, args[1]);\n \t\t\t\t\tcase \"NICKNAME\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseNickname(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseNickname(access, args[1], Utilities.GetArgsAsText(message, 2), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"NICKNAME\":\n \t\t\t\t\t\treturn ResponseNickname(access, args[1]);\n \t\t\t\t\tcase \"OA\":\n-\t\t\t\t\t\treturn await ResponseOwns(access, SharedInfo.ASF, Utilities.GetArgsAsText(message, 1)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseOwns(access, SharedInfo.ASF, Utilities.GetArgsAsText(message, 1), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"OWNS\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseOwns(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseOwns(access, args[1], Utilities.GetArgsAsText(message, 2), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"OWNS\":\n \t\t\t\t\t\treturn (await ResponseOwns(access, args[1]).ConfigureAwait(false)).Response;\n \t\t\t\t\tcase \"PAUSE\":\n-\t\t\t\t\t\treturn await ResponsePause(access, Utilities.GetArgsAsText(args, 1, \",\"), true).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponsePause(access, Utilities.GetArgsAsText(args, 1, \",\"), true, steamID: steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"PAUSE~\":\n-\t\t\t\t\t\treturn await ResponsePause(access, Utilities.GetArgsAsText(args, 1, \",\"), false).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponsePause(access, Utilities.GetArgsAsText(args, 1, \",\"), false, steamID: steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"PAUSE&\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponsePause(access, args[1], true, Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponsePause(access, args[1], true, Utilities.GetArgsAsText(message, 2), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"PAUSE&\":\n \t\t\t\t\t\treturn await ResponsePause(access, true, args[1]).ConfigureAwait(false);\n \t\t\t\t\tcase \"PLAY\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponsePlay(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponsePlay(access, args[1], Utilities.GetArgsAsText(message, 2), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"PLAY\":\n \t\t\t\t\t\treturn await ResponsePlay(access, args[1]).ConfigureAwait(false);\n \t\t\t\t\tcase \"POINTS\":\n-\t\t\t\t\t\treturn await ResponsePointsBalance(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponsePointsBalance(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"PRIVACY\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponsePrivacy(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponsePrivacy(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"PRIVACY\":\n \t\t\t\t\t\treturn await ResponsePrivacy(access, args[1]).ConfigureAwait(false);\n \t\t\t\t\tcase \"R\" when args.Length > 2:\n \t\t\t\t\tcase \"REDEEM\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseRedeem(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseRedeem(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID: steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"R\":\n \t\t\t\t\tcase \"REDEEM\":\n \t\t\t\t\t\treturn await ResponseRedeem(access, args[1], steamID).ConfigureAwait(false);\n@@ -284,43 +284,43 @@ public static string FormatStaticResponse(string response) {\n \t\t\t\t\tcase \"REDEEM^\" when args.Length > 2:\n \t\t\t\t\t\treturn await ResponseAdvancedRedeem(access, args[1], args[2], steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"RESET\":\n-\t\t\t\t\t\treturn await ResponseReset(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseReset(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"RESUME\":\n-\t\t\t\t\t\treturn await ResponseResume(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseResume(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"START\":\n-\t\t\t\t\t\treturn await ResponseStart(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseStart(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"STATUS\":\n-\t\t\t\t\t\treturn await ResponseStatus(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseStatus(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"STOP\":\n-\t\t\t\t\t\treturn await ResponseStop(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseStop(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TB\":\n-\t\t\t\t\t\treturn await ResponseTradingBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseTradingBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TBADD\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseTradingBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseTradingBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TBADD\":\n \t\t\t\t\t\treturn ResponseTradingBlacklistAdd(access, args[1]);\n \t\t\t\t\tcase \"TBRM\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseTradingBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseTradingBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TBRM\":\n \t\t\t\t\t\treturn ResponseTradingBlacklistRemove(access, args[1]);\n \t\t\t\t\tcase \"TRANSFER\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseTransfer(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseTransfer(access, args[1], Utilities.GetArgsAsText(message, 2), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TRANSFER\":\n \t\t\t\t\t\treturn await ResponseTransfer(access, args[1]).ConfigureAwait(false);\n \t\t\t\t\tcase \"TRANSFER^\" when args.Length > 4:\n-\t\t\t\t\t\treturn await ResponseAdvancedTransfer(access, args[1], args[2], args[3], Utilities.GetArgsAsText(message, 4)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseAdvancedTransfer(access, args[1], args[2], args[3], Utilities.GetArgsAsText(message, 4), steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TRANSFER^\" when args.Length > 3:\n \t\t\t\t\t\treturn await ResponseAdvancedTransfer(access, args[1], args[2], args[3]).ConfigureAwait(false);\n \t\t\t\t\tcase \"TRANSFER@\" when args.Length > 3:\n-\t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], Utilities.GetArgsAsText(message, 3)).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], Utilities.GetArgsAsText(message, 3), false, steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TRANSFER@\" when args.Length > 2:\n-\t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2]).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], false).ConfigureAwait(false);\n \t\t\t\t\tcase \"TRANSFER%\" when args.Length > 3:\n-\t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], Utilities.GetArgsAsText(message, 3), true).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], Utilities.GetArgsAsText(message, 3), true, steamID).ConfigureAwait(false);\n \t\t\t\t\tcase \"TRANSFER%\" when args.Length > 2:\n \t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], true).ConfigureAwait(false);\n \t\t\t\t\tcase \"UNPACK\":\n-\t\t\t\t\t\treturn await ResponseUnpackBoosters(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);\n+\t\t\t\t\t\treturn await ResponseUnpackBoosters(access, Utilities.GetArgsAsText(args, 1, \",\"), steamID).ConfigureAwait(false);\n \t\t\t\t\tdefault:\n \t\t\t\t\t\tstring? pluginsResponse = await PluginsCore.OnBotCommand(Bot, access, message, args, steamID).ConfigureAwait(false);\n \n@@ -516,6 +516,29 @@ internal void OnNewLicenseList() {\n \t\treturn gamesOwned;\n \t}\n \n+\tprivate static EAccess ProxyAccess(Bot bot, EAccess access, ulong steamID = 0) {\n+\t\t// The objective here should be simple, calculating effective access of the user\n+\t\t// Problem is, history already proved nothing in this damn file is as simple as it seems\n+\t\t// We use this function for proxying commands such as !status 2 sent to bot 1, which should use 2's user access instead\n+\t\tArgumentNullException.ThrowIfNull(bot);\n+\n+\t\tif (!Enum.IsDefined(access)) {\n+\t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n+\t\t}\n+\n+\t\tif ((steamID != 0) && !new SteamID(steamID).IsIndividualAccount) {\n+\t\t\tthrow new ArgumentOutOfRangeException(nameof(steamID));\n+\t\t}\n+\n+\t\t// If we got executed with owner access or lack steamID entirely, then this is effective access\n+\t\tif ((access >= EAccess.Owner) || (steamID == 0)) {\n+\t\t\treturn access;\n+\t\t}\n+\n+\t\t// Otherwise, effective access is the access of the user on target bot, whatever that would be, not this one\n+\t\treturn bot.GetAccess(steamID);\n+\t}\n+\n \tprivate async Task<string?> Response2FA(EAccess access) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n@@ -530,7 +553,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success && !string.IsNullOrEmpty(token) ? string.Format(CultureInfo.CurrentCulture, Strings.BotAuthenticatorToken, token) : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> Response2FA(EAccess access, string botNames) {\n+\tprivate static async Task<string?> Response2FA(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -545,7 +568,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.Response2FA(access))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.Response2FA(ProxyAccess(bot, access, steamID)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -574,7 +597,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> Response2FAConfirm(EAccess access, string botNames, bool confirm) {\n+\tprivate static async Task<string?> Response2FAConfirm(EAccess access, string botNames, bool confirm, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -589,7 +612,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.Response2FAConfirm(access, confirm))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.Response2FAConfirm(ProxyAccess(bot, access, steamID), confirm))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -668,7 +691,7 @@ internal void OnNewLicenseList() {\n \t\treturn response.Length > 0 ? response.ToString() : null;\n \t}\n \n-\tprivate static async Task<string?> ResponseAddLicense(EAccess access, string botNames, string query) {\n+\tprivate static async Task<string?> ResponseAddLicense(EAccess access, string botNames, string query, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -687,7 +710,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAddLicense(access, query))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAddLicense(ProxyAccess(bot, access, steamID), query))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -728,7 +751,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponseAdvancedLoot(EAccess access, string botNames, string appID, string contextID) {\n+\tprivate static async Task<string?> ResponseAdvancedLoot(EAccess access, string botNames, string appID, string contextID, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -751,7 +774,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedLoot(access, appID, contextID))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedLoot(ProxyAccess(bot, access, steamID), appID, contextID))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -866,7 +889,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedRedeem(access, options, keys, steamID))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedRedeem(ProxyAccess(bot, access, steamID), options, keys, steamID))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -939,7 +962,7 @@ internal void OnNewLicenseList() {\n \t\treturn await ResponseAdvancedTransfer(access, appID, contextID, targetBot).ConfigureAwait(false);\n \t}\n \n-\tprivate static async Task<string?> ResponseAdvancedTransfer(EAccess access, string botNames, string targetAppID, string targetContextID, string botNameTo) {\n+\tprivate static async Task<string?> ResponseAdvancedTransfer(EAccess access, string botNames, string targetAppID, string targetContextID, string botNameTo, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -980,7 +1003,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNameTo)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedTransfer(access, appID, contextID, targetBot))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedTransfer(ProxyAccess(bot, access, steamID), appID, contextID, targetBot))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1001,7 +1024,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotGamesToRedeemInBackgroundCount, count));\n \t}\n \n-\tprivate static async Task<string?> ResponseBackgroundGamesRedeemer(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseBackgroundGamesRedeemer(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1016,7 +1039,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseBackgroundGamesRedeemer(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseBackgroundGamesRedeemer(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1085,7 +1108,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseFarm(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseFarm(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1100,7 +1123,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseFarm(access))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseFarm(ProxyAccess(bot, access, steamID)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1115,7 +1138,7 @@ internal void OnNewLicenseList() {\n \t\treturn access < EAccess.Master ? null : FormatBotResponse(Bot.BotDatabase.FarmingBlacklistAppIDs.Count == 0 ? string.Format(CultureInfo.CurrentCulture, Strings.ErrorIsEmpty, nameof(Bot.BotDatabase.FarmingBlacklistAppIDs)) : string.Join(\", \", Bot.BotDatabase.FarmingBlacklistAppIDs));\n \t}\n \n-\tprivate static async Task<string?> ResponseFarmingBlacklist(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseFarmingBlacklist(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1130,7 +1153,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklist(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklist(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1182,7 +1205,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseFarmingBlacklistAdd(EAccess access, string botNames, string targetAppIDs) {\n+\tprivate static async Task<string?> ResponseFarmingBlacklistAdd(EAccess access, string botNames, string targetAppIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1201,7 +1224,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklistAdd(access, targetAppIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklistAdd(ProxyAccess(bot, access, steamID), targetAppIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1248,7 +1271,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseFarmingBlacklistRemove(EAccess access, string botNames, string targetAppIDs) {\n+\tprivate static async Task<string?> ResponseFarmingBlacklistRemove(EAccess access, string botNames, string targetAppIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1267,7 +1290,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklistRemove(access, targetAppIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklistRemove(ProxyAccess(bot, access, steamID), targetAppIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1282,7 +1305,7 @@ internal void OnNewLicenseList() {\n \t\treturn access < EAccess.Master ? null : FormatBotResponse(Bot.BotDatabase.FarmingPriorityQueueAppIDs.Count == 0 ? string.Format(CultureInfo.CurrentCulture, Strings.ErrorIsEmpty, nameof(Bot.BotDatabase.FarmingPriorityQueueAppIDs)) : string.Join(\", \", Bot.BotDatabase.FarmingPriorityQueueAppIDs));\n \t}\n \n-\tprivate static async Task<string?> ResponseFarmingQueue(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseFarmingQueue(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1297,7 +1320,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueue(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueue(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1356,7 +1379,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseFarmingQueueAdd(EAccess access, string botNames, string targetAppIDs) {\n+\tprivate static async Task<string?> ResponseFarmingQueueAdd(EAccess access, string botNames, string targetAppIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1375,7 +1398,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueueAdd(access, targetAppIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueueAdd(ProxyAccess(bot, access, steamID), targetAppIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1427,7 +1450,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseFarmingQueueRemove(EAccess access, string botNames, string targetAppIDs) {\n+\tprivate static async Task<string?> ResponseFarmingQueueRemove(EAccess access, string botNames, string targetAppIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1446,7 +1469,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueueRemove(access, targetAppIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueueRemove(ProxyAccess(bot, access, steamID), targetAppIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1519,7 +1542,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(result ? Strings.Done : Strings.WarningFailed);\n \t}\n \n-\tprivate static async Task<string?> ResponseInput(EAccess access, string botNames, string propertyName, string inputValue) {\n+\tprivate static async Task<string?> ResponseInput(EAccess access, string botNames, string propertyName, string inputValue, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1542,7 +1565,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseInput(access, propertyName, inputValue)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseInput(ProxyAccess(bot, access, steamID), propertyName, inputValue)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1567,7 +1590,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(level.HasValue ? string.Format(CultureInfo.CurrentCulture, Strings.BotLevel, level.Value) : Strings.WarningFailed);\n \t}\n \n-\tprivate static async Task<string?> ResponseLevel(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseLevel(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1582,7 +1605,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLevel(access))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLevel(ProxyAccess(bot, access, steamID)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1611,7 +1634,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponseLoot(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseLoot(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1626,14 +1649,14 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLoot(access))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLoot(ProxyAccess(bot, access, steamID)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n \t\treturn responses.Count > 0 ? string.Join(Environment.NewLine, responses) : null;\n \t}\n \n-\tprivate async Task<string?> ResponseLootByRealAppIDs(EAccess access, string realAppIDsText, bool exclude = false) {\n+\tprivate async Task<string?> ResponseLootByRealAppIDs(EAccess access, string realAppIDsText, bool exclude) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1675,7 +1698,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponseLootByRealAppIDs(EAccess access, string botNames, string realAppIDsText, bool exclude = false) {\n+\tprivate static async Task<string?> ResponseLootByRealAppIDs(EAccess access, string botNames, string realAppIDsText, bool exclude, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1694,7 +1717,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLootByRealAppIDs(access, realAppIDsText, exclude))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLootByRealAppIDs(ProxyAccess(bot, access, steamID), realAppIDsText, exclude))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1709,7 +1732,7 @@ internal void OnNewLicenseList() {\n \t\treturn access < EAccess.Master ? null : FormatBotResponse(Bot.BotDatabase.MatchActivelyBlacklistAppIDs.Count == 0 ? string.Format(CultureInfo.CurrentCulture, Strings.ErrorIsEmpty, nameof(Bot.BotDatabase.MatchActivelyBlacklistAppIDs)) : string.Join(\", \", Bot.BotDatabase.MatchActivelyBlacklistAppIDs));\n \t}\n \n-\tprivate static async Task<string?> ResponseMatchActivelyBlacklist(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseMatchActivelyBlacklist(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1724,7 +1747,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklist(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklist(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1763,7 +1786,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Bot.BotDatabase.MatchActivelyBlacklistAppIDs.AddRange(appIDs) ? Strings.Done : Strings.NothingFound);\n \t}\n \n-\tprivate static async Task<string?> ResponseMatchActivelyBlacklistAdd(EAccess access, string botNames, string targetAppIDs) {\n+\tprivate static async Task<string?> ResponseMatchActivelyBlacklistAdd(EAccess access, string botNames, string targetAppIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1782,7 +1805,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklistAdd(access, targetAppIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklistAdd(ProxyAccess(bot, access, steamID), targetAppIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1821,7 +1844,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Bot.BotDatabase.MatchActivelyBlacklistAppIDs.RemoveRange(appIDs) ? Strings.Done : Strings.NothingFound);\n \t}\n \n-\tprivate static async Task<string?> ResponseMatchActivelyBlacklistRemove(EAccess access, string botNames, string targetAppIDs) {\n+\tprivate static async Task<string?> ResponseMatchActivelyBlacklistRemove(EAccess access, string botNames, string targetAppIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1840,7 +1863,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklistRemove(access, targetAppIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklistRemove(ProxyAccess(bot, access, steamID), targetAppIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -1869,7 +1892,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseNickname(EAccess access, string botNames, string nickname) {\n+\tprivate static async Task<string?> ResponseNickname(EAccess access, string botNames, string nickname, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -1888,7 +1911,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseNickname(access, nickname)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseNickname(ProxyAccess(bot, access, steamID), nickname)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2047,7 +2070,7 @@ internal void OnNewLicenseList() {\n \t\treturn (response.Length > 0 ? response.ToString() : FormatBotResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotOwnedYet, query)), result);\n \t}\n \n-\tprivate static async Task<string?> ResponseOwns(EAccess access, string botNames, string query) {\n+\tprivate static async Task<string?> ResponseOwns(EAccess access, string botNames, string query, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2066,7 +2089,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<(string? Response, Dictionary<string, string>? OwnedGames)> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseOwns(access, query))).ConfigureAwait(false);\n+\t\tIList<(string? Response, Dictionary<string, string>? OwnedGames)> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseOwns(ProxyAccess(bot, access, steamID), query))).ConfigureAwait(false);\n \n \t\tList<(string Response, Dictionary<string, string> OwnedGames)> validResults = new(results.Where(static result => !string.IsNullOrEmpty(result.Response) && (result.OwnedGames != null))!);\n \n@@ -2119,7 +2142,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponsePause(EAccess access, string botNames, bool permanent, string? resumeInSecondsText = null) {\n+\tprivate static async Task<string?> ResponsePause(EAccess access, string botNames, bool permanent, string? resumeInSecondsText = null, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2134,7 +2157,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePause(access, permanent, resumeInSecondsText))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePause(ProxyAccess(bot, access, steamID), permanent, resumeInSecondsText))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2212,7 +2235,7 @@ internal void OnNewLicenseList() {\n \t\treturn await ResponsePlay(access, gamesToPlay, gameName.Length > 0 ? gameName.ToString() : null).ConfigureAwait(false);\n \t}\n \n-\tprivate static async Task<string?> ResponsePlay(EAccess access, string botNames, string targetGameIDs) {\n+\tprivate static async Task<string?> ResponsePlay(EAccess access, string botNames, string targetGameIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2231,7 +2254,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePlay(access, targetGameIDs))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePlay(ProxyAccess(bot, access, steamID), targetGameIDs))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2256,7 +2279,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(points.HasValue ? string.Format(CultureInfo.CurrentCulture, Strings.BotPointsBalance, points) : Strings.WarningFailed);\n \t}\n \n-\tprivate static async Task<string?> ResponsePointsBalance(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponsePointsBalance(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2271,7 +2294,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePointsBalance(access))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePointsBalance(ProxyAccess(bot, access, steamID)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2412,7 +2435,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(await Bot.ArchiWebHandler.ChangePrivacySettings(userPrivacy).ConfigureAwait(false) ? Strings.Success : Strings.WarningFailed);\n \t}\n \n-\tprivate static async Task<string?> ResponsePrivacy(EAccess access, string botNames, string privacySettingsText) {\n+\tprivate static async Task<string?> ResponsePrivacy(EAccess access, string botNames, string privacySettingsText, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2431,7 +2454,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePrivacy(access, privacySettingsText))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePrivacy(ProxyAccess(bot, access, steamID), privacySettingsText))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2697,7 +2720,7 @@ internal void OnNewLicenseList() {\n \t\treturn response.Length > 0 ? response.ToString() : null;\n \t}\n \n-\tprivate static async Task<string?> ResponseRedeem(EAccess access, string botNames, string keysText, ulong steamID = 0, ERedeemFlags redeemFlags = ERedeemFlags.None) {\n+\tprivate static async Task<string?> ResponseRedeem(EAccess access, string botNames, string keysText, ERedeemFlags redeemFlags = ERedeemFlags.None, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2716,7 +2739,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseRedeem(access, keysText, steamID, redeemFlags))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseRedeem(ProxyAccess(bot, access, steamID), keysText, steamID, redeemFlags))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2741,7 +2764,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseReset(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseReset(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2756,7 +2779,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseReset(access))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseReset(ProxyAccess(bot, access, steamID)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2791,7 +2814,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponseResume(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseResume(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2806,7 +2829,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseResume(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseResume(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2827,7 +2850,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponseStart(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseStart(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2842,7 +2865,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStart(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStart(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2906,7 +2929,7 @@ internal void OnNewLicenseList() {\n \t\treturn (FormatBotResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotStatusIdling, soloGame.AppID, soloGame.GameName, soloGame.CardsRemaining, Bot.CardsFarmer.GamesToFarmReadOnly.Count, Bot.CardsFarmer.GamesToFarmReadOnly.Sum(static game => game.CardsRemaining), Bot.CardsFarmer.TimeRemaining.ToHumanReadable())), Bot);\n \t}\n \n-\tprivate static async Task<string?> ResponseStatus(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseStatus(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2921,7 +2944,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<(string? Response, Bot Bot)> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStatus(access)))).ConfigureAwait(false);\n+\t\tIList<(string? Response, Bot Bot)> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStatus(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<(string Response, Bot Bot)> validResults = new(results.Where(static result => !string.IsNullOrEmpty(result.Response))!);\n \n@@ -2950,7 +2973,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponseStop(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseStop(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2965,7 +2988,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStop(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStop(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -2980,7 +3003,7 @@ internal void OnNewLicenseList() {\n \t\treturn access < EAccess.Master ? null : FormatBotResponse(Bot.BotDatabase.TradingBlacklistSteamIDs.Count == 0 ? string.Format(CultureInfo.CurrentCulture, Strings.ErrorIsEmpty, nameof(Bot.BotDatabase.TradingBlacklistSteamIDs)) : string.Join(\", \", Bot.BotDatabase.TradingBlacklistSteamIDs));\n \t}\n \n-\tprivate static async Task<string?> ResponseTradingBlacklist(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseTradingBlacklist(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -2995,7 +3018,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklist(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklist(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -3034,7 +3057,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Bot.BotDatabase.TradingBlacklistSteamIDs.AddRange(targetIDs) ? Strings.Done : Strings.NothingFound);\n \t}\n \n-\tprivate static async Task<string?> ResponseTradingBlacklistAdd(EAccess access, string botNames, string targetSteamIDs) {\n+\tprivate static async Task<string?> ResponseTradingBlacklistAdd(EAccess access, string botNames, string targetSteamIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3053,7 +3076,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklistAdd(access, targetSteamIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklistAdd(ProxyAccess(bot, access, steamID), targetSteamIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -3092,7 +3115,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(Bot.BotDatabase.TradingBlacklistSteamIDs.RemoveRange(targetIDs) ? Strings.Done : Strings.NothingFound);\n \t}\n \n-\tprivate static async Task<string?> ResponseTradingBlacklistRemove(EAccess access, string botNames, string targetSteamIDs) {\n+\tprivate static async Task<string?> ResponseTradingBlacklistRemove(EAccess access, string botNames, string targetSteamIDs, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3111,7 +3134,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklistRemove(access, targetSteamIDs)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklistRemove(ProxyAccess(bot, access, steamID), targetSteamIDs)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -3158,7 +3181,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate static async Task<string?> ResponseTransfer(EAccess access, string botNames, string botNameTo) {\n+\tprivate static async Task<string?> ResponseTransfer(EAccess access, string botNames, string botNameTo, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3177,14 +3200,14 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseTransfer(access, botNameTo))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseTransfer(ProxyAccess(bot, access, steamID), botNameTo))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n \t\treturn responses.Count > 0 ? string.Join(Environment.NewLine, responses) : null;\n \t}\n \n-\tprivate async Task<string?> ResponseTransferByRealAppIDs(EAccess access, IReadOnlyCollection<uint> realAppIDs, Bot targetBot, bool exclude = false) {\n+\tprivate async Task<string?> ResponseTransferByRealAppIDs(EAccess access, IReadOnlyCollection<uint> realAppIDs, Bot targetBot, bool exclude) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3220,7 +3243,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(success ? message : string.Format(CultureInfo.CurrentCulture, Strings.WarningFailedWithError, message));\n \t}\n \n-\tprivate async Task<string?> ResponseTransferByRealAppIDs(EAccess access, string realAppIDsText, string botNameTo, bool exclude = false) {\n+\tprivate async Task<string?> ResponseTransferByRealAppIDs(EAccess access, string realAppIDsText, string botNameTo, bool exclude) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3262,7 +3285,7 @@ internal void OnNewLicenseList() {\n \t\treturn await ResponseTransferByRealAppIDs(access, realAppIDs, targetBot, exclude).ConfigureAwait(false);\n \t}\n \n-\tprivate static async Task<string?> ResponseTransferByRealAppIDs(EAccess access, string botNames, string realAppIDsText, string botNameTo, bool exclude = false) {\n+\tprivate static async Task<string?> ResponseTransferByRealAppIDs(EAccess access, string botNames, string realAppIDsText, string botNameTo, bool exclude, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3307,7 +3330,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNameTo)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseTransferByRealAppIDs(access, realAppIDs, targetBot, exclude))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseTransferByRealAppIDs(ProxyAccess(bot, access, steamID), realAppIDs, targetBot, exclude))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -3358,7 +3381,7 @@ internal void OnNewLicenseList() {\n \t\treturn FormatBotResponse(completeSuccess ? Strings.Success : Strings.Done);\n \t}\n \n-\tprivate static async Task<string?> ResponseUnpackBoosters(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseUnpackBoosters(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3373,7 +3396,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseUnpackBoosters(access))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseUnpackBoosters(ProxyAccess(bot, access, steamID)))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n \n@@ -3414,7 +3437,7 @@ internal void OnNewLicenseList() {\n \t\treturn !Bot.IsConnectedAndLoggedOn ? FormatBotResponse(Strings.BotNotConnected) : FormatBotResponse(Bot.WalletCurrency != ECurrencyCode.Invalid ? string.Format(CultureInfo.CurrentCulture, Strings.BotWalletBalance, Bot.WalletBalance / 100.0, Bot.WalletCurrency.ToString()) : Strings.BotHasNoWallet);\n \t}\n \n-\tprivate static async Task<string?> ResponseWalletBalance(EAccess access, string botNames) {\n+\tprivate static async Task<string?> ResponseWalletBalance(EAccess access, string botNames, ulong steamID = 0) {\n \t\tif (!Enum.IsDefined(access)) {\n \t\t\tthrow new InvalidEnumArgumentException(nameof(access), (int) access, typeof(EAccess));\n \t\t}\n@@ -3429,7 +3452,7 @@ internal void OnNewLicenseList() {\n \t\t\treturn access >= EAccess.Owner ? FormatStaticResponse(string.Format(CultureInfo.CurrentCulture, Strings.BotNotFound, botNames)) : null;\n \t\t}\n \n-\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseWalletBalance(access)))).ConfigureAwait(false);\n+\t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseWalletBalance(ProxyAccess(bot, access, steamID))))).ConfigureAwait(false);\n \n \t\tList<string> responses = new(results.Where(static result => !string.IsNullOrEmpty(result))!);\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "32cde628156c126aa90d88dbdb1b5bcb741a284d",
            "date": "2025-01-14T02:17:39Z",
            "author_login": "JustArchi-ArchiBot"
          },
          {
            "sha": "d83e4fcecaeac513e0fa0c08959c12bacd636521",
            "date": "2025-01-13T18:01:12Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "af1d017123e9e0f27185d5a73fc32e11c3cb514f",
            "date": "2025-01-13T02:20:56Z",
            "author_login": "JustArchi-ArchiBot"
          },
          {
            "sha": "3759e906ccc27fe8030c2d4eda938d53199ed70b",
            "date": "2025-01-12T22:18:05Z",
            "author_login": "Abrynos"
          },
          {
            "sha": "764ec31559395575a5457eba486b125374462873",
            "date": "2025-01-12T05:12:51Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-863",
    "description": "ArchiSteamFarm (ASF) is a C# application with primary purpose of idling Steam cards from multiple accounts simultaneously. Due to a bug in ASF code, introduced in version V5.2.2.2, the program didn't adequately verify effective access of the user sending proxy (i.e. `[Bots]`) commands. In particular, a proxy-like command sent to bot `A` targeting bot `B` has incorrectly verified user's access against bot `A` - instead of bot `B`, to which the command was originally designated. This in result allowed access to resources beyond those configured, being a security threat affecting confidentiality of other bot instances. A successful attack exploiting this bug requires a significant access granted explicitly by original owner of the ASF process prior to that, as attacker has to control at least a single bot in the process to make use of this inadequate access verification loophole. The issue is patched in ASF V5.2.2.5, V5.2.3.2 and future versions. Users are advised to update as soon as possible.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-08T23:15:07.470",
    "last_modified": "2024-11-21T06:48:58.007",
    "fix_date": "2022-02-08T19:56:21Z"
  },
  "references": [
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/commit/7a29d9282bdc3280db2a379c24f73916d786f9b4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/commit/f807bdb660e75dee5a34994f2ea70970ca6d0492",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/pull/2501",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/pull/2509",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/releases/tag/5.2.2.5",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/releases/tag/5.2.3.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/security/advisories/GHSA-88ch-366c-5m89",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/commit/7a29d9282bdc3280db2a379c24f73916d786f9b4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/commit/f807bdb660e75dee5a34994f2ea70970ca6d0492",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/pull/2501",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/pull/2509",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/releases/tag/5.2.2.5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/releases/tag/5.2.3.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/JustArchiNET/ArchiSteamFarm/security/advisories/GHSA-88ch-366c-5m89",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.150530",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ArchiSteamFarm",
    "owner": "JustArchiNET",
    "created_at": "2015-10-25T05:12:33Z",
    "updated_at": "2025-01-14T12:52:42Z",
    "pushed_at": "2025-01-14T02:17:40Z",
    "size": 236512,
    "stars": 11558,
    "forks": 1061,
    "open_issues": 3,
    "watchers": 11558,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C#": 1624050,
      "C++": 21784,
      "Shell": 18528,
      "Dockerfile": 4480,
      "HTML": 773,
      "Batchfile": 112
    },
    "commit_activity": {
      "total_commits_last_year": 1183,
      "avg_commits_per_week": 22.75,
      "days_active_last_year": 331
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T17:40:40.686089"
  }
}