{
  "cve_id": "CVE-2022-23628",
  "github_data": {
    "repository": "open-policy-agent/opa",
    "fix_commit": "932e4ffc37a590ace79e9b75ca4340288c220239",
    "related_commits": [
      "932e4ffc37a590ace79e9b75ca4340288c220239",
      "bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717",
      "932e4ffc37a590ace79e9b75ca4340288c220239",
      "bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "932e4ffc37a590ace79e9b75ca4340288c220239",
      "commit_date": "2022-01-25T07:43:20Z",
      "author": {
        "login": "srenatus",
        "type": "User",
        "stats": {
          "total_commits": 622,
          "average_weekly_commits": 1.3094736842105263,
          "total_additions": 465936,
          "total_deletions": 200771,
          "weeks_active": 168
        }
      },
      "commit_message": {
        "title": "format: don't group iterable when one has defaulted location (#4260)",
        "length": 729,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 78,
        "additions": 67,
        "deletions": 11
      },
      "files": [
        {
          "filename": "format/format.go",
          "status": "modified",
          "additions": 20,
          "deletions": 10,
          "patch": "@@ -14,6 +14,11 @@ import (\n \t\"github.com/open-policy-agent/opa/ast\"\n )\n \n+// defaultLocationFile is the file name used in `Ast()` for terms\n+// without a location, as could happen when pretty-printing the\n+// results of partial eval.\n+const defaultLocationFile = \"__format_default__\"\n+\n // Source formats a Rego source file. The bytes provided must describe a complete\n // Rego module. If they don't, Source will return an error resulting from the attempt\n // to parse the bytes.\n@@ -154,7 +159,7 @@ func squashTrailingNewlines(bs []byte) []byte {\n }\n \n func defaultLocation(x ast.Node) *ast.Location {\n-\treturn ast.NewLocation([]byte(x.String()), \"\", 1, 1)\n+\treturn ast.NewLocation([]byte(x.String()), defaultLocationFile, 1, 1)\n }\n \n type writer struct {\n@@ -895,22 +900,27 @@ func (w *writer) listWriter() entryWriter {\n // location: anything on the same line will be put into a slice.\n func groupIterable(elements []interface{}, last *ast.Location) [][]interface{} {\n \t// Generated vars occur in the AST when we're rendering the result of\n-\t// partial evaluation in a bundle build with optimization. For those vars,\n-\t// there is no location, and the grouping based on source location will\n-\t// yield a bad result. So if there's a generated variable among elements,\n-\t// we'll render the elements all in one line.\n-\tvis := ast.NewVarVisitor()\n+\t// partial evaluation in a bundle build with optimization.\n+\t// Those variables, and wildcard variables have the \"default location\",\n+\t// set in `Ast()`). That is no proper file location, and the grouping\n+\t// based on source location will yield a bad result.\n+\tdef := false // default location found?\n \tfor _, elem := range elements {\n-\t\tvis.Walk(elem)\n-\t}\n-\tfor v := range vis.Vars() {\n-\t\tif v.IsGenerated() {\n+\t\tast.WalkTerms(elem, func(t *ast.Term) bool {\n+\t\t\tif t.Location.File == defaultLocationFile {\n+\t\t\t\tdef = true\n+\t\t\t\treturn true\n+\t\t\t}\n+\t\t\treturn false\n+\t\t})\n+\t\tif def { // return as-is\n \t\t\treturn [][]interface{}{elements}\n \t\t}\n \t}\n \tsort.Slice(elements, func(i, j int) bool {\n \t\treturn locLess(elements[i], elements[j])\n \t})\n+\n \tvar lines [][]interface{}\n \tvar cur []interface{}\n \tfor i, t := range elements {"
        },
        {
          "filename": "format/format_test.go",
          "status": "modified",
          "additions": 47,
          "deletions": 1,
          "patch": "@@ -336,6 +336,52 @@ a[_x[y]]`,\n \t\t\texpected: `_x\n a[_x[y][[z, w]]]`,\n \t\t},\n+\t\t{\n+\t\t\tnote: \"expr with wildcard that has a default location\",\n+\t\t\ttoFmt: func() *ast.Expr {\n+\t\t\t\texpr := ast.MustParseExpr(`[\"foo\", _] = split(input.foo, \":\")`)\n+\t\t\t\tast.WalkTerms(expr, func(term *ast.Term) bool {\n+\t\t\t\t\tv, ok := term.Value.(ast.Var)\n+\t\t\t\t\tif ok && v.IsWildcard() {\n+\t\t\t\t\t\tterm.Location = defaultLocation(term)\n+\t\t\t\t\t\treturn true\n+\t\t\t\t\t}\n+\t\t\t\t\tterm.Location.File = \"foo.rego\"\n+\t\t\t\t\tterm.Location.Row = 2\n+\t\t\t\t\treturn false\n+\t\t\t\t})\n+\t\t\t\treturn expr\n+\t\t\t}(),\n+\t\t\texpected: `[\"foo\", _] = split(input.foo, \":\")`,\n+\t\t},\n+\t\t{\n+\t\t\tnote: \"expr all terms having empty-file locations\",\n+\t\t\ttoFmt: ast.MustParseExpr(`[\n+\t\t\t\t\t\"foo\",\n+\t\t\t\t\t_\n+\t\t\t\t\t] = split(input.foo, \":\")`),\n+\t\t\texpected: `\n+[\n+\t\"foo\",\n+\t_,\n+] = split(input.foo, \":\")`,\n+\t\t},\n+\t\t{\n+\t\t\tnote: \"expr where all terms having empty-file locations, and one is a default location\",\n+\t\t\ttoFmt: func() *ast.Expr {\n+\t\t\t\texpr := ast.MustParseExpr(`\n+[\"foo\", __local1__] = split(input.foo, \":\")`)\n+\t\t\t\tast.WalkTerms(expr, func(term *ast.Term) bool {\n+\t\t\t\t\tif ast.VarTerm(\"__local1__\").Equal(term) {\n+\t\t\t\t\t\tterm.Location = defaultLocation(term)\n+\t\t\t\t\t\treturn true\n+\t\t\t\t\t}\n+\t\t\t\t\treturn false\n+\t\t\t\t})\n+\t\t\t\treturn expr\n+\t\t\t}(),\n+\t\t\texpected: `[\"foo\", __local1__] = split(input.foo, \":\")`,\n+\t\t},\n \t}\n \n \tfor _, tc := range cases {\n@@ -347,7 +393,7 @@ a[_x[y][[z, w]]]`,\n \t\t\texpected := strings.TrimSpace(tc.expected)\n \t\t\tactual := strings.TrimSpace(string(bs))\n \t\t\tif actual != expected {\n-\t\t\t\tt.Fatalf(\"Expected:\\n\\n%s\\n\\nGot:\\n\\n%s\\n\\n\", expected, actual)\n+\t\t\t\tt.Fatalf(\"Expected:\\n\\n%q\\n\\nGot:\\n\\n%q\\n\\n\", expected, actual)\n \t\t\t}\n \t\t})\n \t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6e83f2ac535b501d8d26859f71d32e31ec931ca6",
            "date": "2025-01-24T22:03:26Z",
            "author_login": "johanfylling"
          },
          {
            "sha": "211e95da7e04035f6cf27d6c221659d6fa0d0b86",
            "date": "2025-01-24T11:12:12Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e682a677922b23306501f53d2f418753968f2263",
            "date": "2025-01-24T19:00:06Z",
            "author_login": "anderseknert"
          },
          {
            "sha": "d20dd18f71df02874c82f6bd1c4557be17e1590e",
            "date": "2025-01-24T15:27:14Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b032e3bfc00044691bd1c749596d2429e06e2324",
            "date": "2025-01-24T12:47:16Z",
            "author_login": "johanfylling"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-682",
    "description": "OPA is an open source, general-purpose policy engine. Under certain conditions, pretty-printing an abstract syntax tree (AST) that contains synthetic nodes could change the logic of some statements by reordering array literals. Example of policies impacted are those that parse and compare web paths. **All of these** three conditions have to be met to create an adverse effect: 1. An AST of Rego had to be **created programmatically** such that it ends up containing terms without a location (such as wildcard variables). 2. The AST had to be **pretty-printed** using the `github.com/open-policy-agent/opa/format` package. 3. The result of the pretty-printing had to be **parsed and evaluated again** via an OPA instance using the bundles, or the Golang packages. If any of these three conditions are not met, you are not affected. Notably, all three would be true if using **optimized bundles**, i.e. bundles created with `opa build -O=1` or higher. In that case, the optimizer would fulfil condition (1.), the result of that would be pretty-printed when writing the bundle to disk, fulfilling (2.). When the bundle was then used, we'd satisfy (3.). As a workaround users may disable optimization when creating bundles.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-09T22:15:07.597",
    "last_modified": "2024-11-21T06:48:58.150",
    "fix_date": "2022-01-25T07:43:20Z"
  },
  "references": [
    {
      "url": "https://github.com/open-policy-agent/opa/commit/932e4ffc37a590ace79e9b75ca4340288c220239",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/commit/bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/pull/3851",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/security/advisories/GHSA-hcw3-j74m-qc58",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/commit/932e4ffc37a590ace79e9b75ca4340288c220239",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/commit/bfd984ddf93ef2c4963a08d4fdadae0bcf1a3717",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/pull/3851",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/security/advisories/GHSA-hcw3-j74m-qc58",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.695403",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "opa",
    "owner": "open-policy-agent",
    "created_at": "2015-12-28T22:08:25Z",
    "updated_at": "2025-01-26T04:05:51Z",
    "pushed_at": "2025-01-24T22:03:26Z",
    "size": 1083144,
    "stars": 9888,
    "forks": 1373,
    "open_issues": 381,
    "watchers": 9888,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "main-1.0",
      "master",
      "release-0.12",
      "release-0.13",
      "release-0.14",
      "release-0.16",
      "release-0.17",
      "release-0.19",
      "release-0.20",
      "release-0.21",
      "release-0.23",
      "release-0.30",
      "release-0.32",
      "release-0.33",
      "release-0.34",
      "release-0.36",
      "release-0.37",
      "release-0.38",
      "release-0.42",
      "release-0.43",
      "release-0.46",
      "release-0.47",
      "release-0.49",
      "release-0.50",
      "release-0.53",
      "release-0.57",
      "release-0.64",
      "release-0.67",
      "release-1.0"
    ],
    "languages": {
      "Go": 8228680,
      "C": 934778,
      "C++": 709198,
      "Open Policy Agent": 42095,
      "Makefile": 22395,
      "Shell": 18937,
      "JavaScript": 14203,
      "Python": 5616,
      "Dockerfile": 2601
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:54:50.889340"
  }
}