{
  "cve_id": "CVE-2022-23630",
  "github_data": {
    "repository": "gradle/gradle",
    "fix_commit": "88ab9b652933bc3b2e3161b31ad8b8f4f0516351",
    "related_commits": [
      "88ab9b652933bc3b2e3161b31ad8b8f4f0516351",
      "88ab9b652933bc3b2e3161b31ad8b8f4f0516351"
    ],
    "patch_url": "https://github.com/gradle/gradle/commit/88ab9b652933bc3b2e3161b31ad8b8f4f0516351.patch",
    "fix_commit_details": {
      "sha": "88ab9b652933bc3b2e3161b31ad8b8f4f0516351",
      "commit_date": "2022-02-02T09:08:54Z",
      "author": {
        "login": "bot-gradle",
        "type": "User",
        "stats": {
          "total_commits": 5560,
          "average_weekly_commits": 6.318181818181818,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 201
        }
      },
      "commit_message": {
        "title": "Merge pull request #19798 Do not share resolvable artifacts between verified and non-verified resolve contexts",
        "length": 110,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 86,
        "additions": 54,
        "deletions": 32
      },
      "files": [
        {
          "filename": "subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/DependencyVerifyingModuleComponentRepository.java",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -179,13 +179,6 @@ private File maybeFetchSignatureFile(ModuleComponentIdentifier moduleComponentId\n         @Override\n         public void resolveArtifacts(ComponentResolveMetadata component, ConfigurationMetadata variant, BuildableComponentArtifactsResolveResult result) {\n             delegate.resolveArtifacts(component, variant, result);\n-            if (result.hasResult() && result.isSuccessful()) {\n-                for (ComponentArtifactMetadata artifact : variant.getArtifacts()) {\n-                    if (isExternalArtifactId(artifact.getId()) && !operation.wasAlreadyProcessed((ModuleComponentArtifactIdentifier) artifact.getId(), getId())) {\n-                        resolveArtifact(artifact, component.getSources(), new DefaultBuildableArtifactResolveResult());\n-                    }\n-                }\n-            }\n         }\n \n         @Override"
        },
        {
          "filename": "subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/ResolveIvyFactory.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -129,7 +129,7 @@ public ComponentResolvers create(String resolveContextName,\n                 moduleComponentRepository = startParameterResolutionOverride.overrideModuleVersionRepository(moduleComponentRepository);\n                 moduleComponentRepository = new CachingModuleComponentRepository(moduleComponentRepository, cacheProvider.getPersistentCaches(), cachePolicy, timeProvider, componentMetadataProcessor, listener);\n             }\n-            moduleComponentRepository = cacheProvider.getResolvedArtifactCaches().provideResolvedArtifactCache(moduleComponentRepository);\n+            moduleComponentRepository = cacheProvider.getResolvedArtifactCaches().provideResolvedArtifactCache(moduleComponentRepository, resolutionStrategy.isDependencyVerificationEnabled());\n \n             if (baseRepository.isDynamicResolveMode()) {\n                 moduleComponentRepository = new IvyDynamicResolveModuleComponentRepository(moduleComponentRepository);"
        },
        {
          "filename": "subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/verification/ArtifactVerificationOperation.java",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -22,7 +22,6 @@\n \n public interface ArtifactVerificationOperation {\n     void onArtifact(ArtifactKind kind, ModuleComponentArtifactIdentifier artifact, File mainFile, Factory<File> signatureFile, String repositoryName, String repositoryId);\n-    boolean wasAlreadyProcessed(ModuleComponentArtifactIdentifier artifact, String repositoryId);\n \n     enum ArtifactKind {\n         METADATA,"
        },
        {
          "filename": "subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/verification/ChecksumAndSignatureVerificationOverride.java",
          "status": "modified",
          "additions": 46,
          "deletions": 11,
          "patch": "@@ -20,7 +20,6 @@\n import com.google.common.collect.Queues;\n import com.google.common.collect.Sets;\n import org.gradle.api.artifacts.component.ComponentArtifactIdentifier;\n-import org.gradle.api.artifacts.component.ModuleComponentIdentifier;\n import org.gradle.api.artifacts.result.ResolvedArtifactResult;\n import org.gradle.api.artifacts.result.ResolvedVariantResult;\n import org.gradle.api.artifacts.verification.DependencyVerificationMode;\n@@ -70,7 +69,7 @@ public class ChecksumAndSignatureVerificationOverride implements DependencyVerif\n     private final ChecksumService checksumService;\n     private final SignatureVerificationService signatureVerificationService;\n     private final DependencyVerificationMode verificationMode;\n-    private final Set<String> verificationQueries = Sets.newConcurrentHashSet();\n+    private final Set<VerificationQuery> verificationQueries = Sets.newConcurrentHashSet();\n     private final Deque<VerificationEvent> verificationEvents = Queues.newArrayDeque();\n     private final AtomicBoolean closed = new AtomicBoolean();\n     private final AtomicBoolean hasFatalFailure = new AtomicBoolean();\n@@ -108,19 +107,14 @@ private List<URI> keyServers() {\n \n     @Override\n     public void onArtifact(ArtifactKind kind, ModuleComponentArtifactIdentifier artifact, File mainFile, Factory<File> signatureFile, String repositoryName, String repositoryId) {\n-        if (verificationQueries.add(getVerificationQuery(artifact, repositoryId))) {\n+        if (verificationQueries.add(new VerificationQuery(artifact, repositoryId))) {\n             VerificationEvent event = new VerificationEvent(kind, artifact, mainFile, signatureFile, repositoryName);\n             synchronized (verificationEvents) {\n                 verificationEvents.add(event);\n             }\n         }\n     }\n \n-    @Override\n-    public boolean wasAlreadyProcessed(ModuleComponentArtifactIdentifier artifact, String repositoryId) {\n-        return verificationQueries.contains(getVerificationQuery(artifact, repositoryId));\n-    }\n-\n     private void verifyConcurrently() {\n         hasFatalFailure.set(false);\n         synchronized (verificationEvents) {\n@@ -230,9 +224,50 @@ public void stop() {\n         signatureVerificationService.stop();\n     }\n \n-    private String getVerificationQuery(ModuleComponentArtifactIdentifier artifactIdentifier, String repositoryId) {\n-        ModuleComponentIdentifier componentIdentifier = artifactIdentifier.getComponentIdentifier();\n-        return componentIdentifier.getVersion() + \":\" + componentIdentifier.getModule() + \":\" + componentIdentifier.getGroup() + \":\" + artifactIdentifier.getFileName() + \":\" + repositoryId;\n+    private static class VerificationQuery {\n+        private final ModuleComponentArtifactIdentifier artifact;\n+        private final String repositoryId;\n+        private final int hashCode;\n+\n+        public VerificationQuery(ModuleComponentArtifactIdentifier artifact, String repositoryId) {\n+            this.artifact = artifact;\n+            this.repositoryId = repositoryId;\n+            this.hashCode = precomputeHashCode(artifact, repositoryId);\n+        }\n+\n+        private int precomputeHashCode(ModuleComponentArtifactIdentifier artifact, String repositoryId) {\n+            int hashCode = artifact.getComponentIdentifier().hashCode();\n+            hashCode = 31 * hashCode + artifact.getFileName().hashCode();\n+            hashCode = 31 * hashCode + repositoryId.hashCode();\n+            return hashCode;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (o == null || getClass() != o.getClass()) {\n+                return false;\n+            }\n+\n+            VerificationQuery that = (VerificationQuery) o;\n+            if (hashCode != that.hashCode) {\n+                return false;\n+            }\n+            if (!artifact.getComponentIdentifier().equals(that.artifact.getComponentIdentifier())) {\n+                return false;\n+            }\n+            if (!artifact.getFileName().equals(that.artifact.getFileName())) {\n+                return false;\n+            }\n+            return repositoryId.equals(that.repositoryId);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return hashCode;\n+        }\n     }\n \n     private static class VerificationEvent {"
        },
        {
          "filename": "subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/ivyresolve/verification/writer/WriteDependencyVerificationFile.java",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -437,13 +437,6 @@ public void onArtifact(ArtifactKind kind, ModuleComponentArtifactIdentifier id,\n         }\n     }\n \n-    @Override\n-    public boolean wasAlreadyProcessed(ModuleComponentArtifactIdentifier artifact, String repositoryId) {\n-        // Since writing to a file is done rarely and this is called only to avoid resolving\n-        // artifacts again when already cached, there is not much penalty to not do any check here\n-        return false;\n-    }\n-\n     private void addPgp(ModuleComponentArtifactIdentifier id, ArtifactKind kind, File mainFile, Factory<File> signatureFile) {\n         PgpEntry entry = new PgpEntry(id, kind, mainFile, signatureFile);\n         synchronized (entriesToBeWritten) {"
        },
        {
          "filename": "subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/ivyservice/modulecache/ResolvedArtifactCaches.java",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -36,22 +36,23 @@ public class ResolvedArtifactCaches implements Stoppable {\n     private final static Logger LOG = Logging.getLogger(ResolvedArtifactCaches.class);\n \n     private final Map<String, Map<ComponentArtifactIdentifier, ResolvableArtifact>> cachePerRepo = new MapMaker().makeMap();\n+    private final Map<String, Map<ComponentArtifactIdentifier, ResolvableArtifact>> cachePerRepoWithVerification = new MapMaker().makeMap();\n \n     /**\n      * For a remote repository, the only thing required is a resolved artifact cache.\n      * The rest of the in-memory caching is handled by the CachingModuleComponentRepository.\n      */\n-    public ModuleComponentRepository provideResolvedArtifactCache(ModuleComponentRepository input) {\n-        Map<ComponentArtifactIdentifier, ResolvableArtifact> caches = getResolvedArtifactCache(input);\n+    public ModuleComponentRepository provideResolvedArtifactCache(ModuleComponentRepository input, boolean withVerification) {\n+        Map<ComponentArtifactIdentifier, ResolvableArtifact> caches = getResolvedArtifactCache(withVerification ? cachePerRepoWithVerification : cachePerRepo, input);\n         return new ResolvedArtifactCacheProvidingModuleComponentRepository(caches, input);\n     }\n \n-    private Map<ComponentArtifactIdentifier, ResolvableArtifact> getResolvedArtifactCache(ModuleComponentRepository input) {\n-        Map<ComponentArtifactIdentifier, ResolvableArtifact> resolvedArtifactCache = cachePerRepo.get(input.getId());\n+    private Map<ComponentArtifactIdentifier, ResolvableArtifact> getResolvedArtifactCache(Map<String, Map<ComponentArtifactIdentifier, ResolvableArtifact>> cache, ModuleComponentRepository input) {\n+        Map<ComponentArtifactIdentifier, ResolvableArtifact> resolvedArtifactCache = cache.get(input.getId());\n         if (resolvedArtifactCache == null) {\n             LOG.debug(\"Creating new in-memory cache for repo '{}' [{}].\", input.getName(), input.getId());\n             resolvedArtifactCache = Maps.newConcurrentMap();\n-            cachePerRepo.put(input.getId(), resolvedArtifactCache);\n+            cache.put(input.getId(), resolvedArtifactCache);\n         } else {\n             LOG.debug(\"Reusing in-memory cache for repo '{}' [{}].\", input.getName(), input.getId());\n         }\n@@ -61,6 +62,7 @@ private Map<ComponentArtifactIdentifier, ResolvableArtifact> getResolvedArtifact\n     @Override\n     public void stop() {\n         cachePerRepo.clear();\n+        cachePerRepoWithVerification.clear();\n     }\n \n     private static class ResolvedArtifactCacheProvidingModuleComponentRepository extends BaseModuleComponentRepository {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 14
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "092b111e6a90524bbae53c7131eecdf019a206bb",
            "date": "2025-01-14T17:20:04Z",
            "author_login": "lkasso"
          },
          {
            "sha": "566a39cdf73eaea07a34814a2d1021ae3f6ca00f",
            "date": "2025-01-14T16:43:05Z",
            "author_login": "lkasso"
          },
          {
            "sha": "8397d4444d926b04db1ff7c25759cdcb9228d820",
            "date": "2025-01-14T13:32:20Z",
            "author_login": "ov7a"
          },
          {
            "sha": "4685365f4b3576491cf3e12091be6a61929a876c",
            "date": "2025-01-14T12:29:16Z",
            "author_login": "cobexer"
          },
          {
            "sha": "868a7e0b83a23e0f3a2b6c6db49a1648649e858c",
            "date": "2025-01-14T12:08:22Z",
            "author_login": "blindpirate"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-829",
    "description": "Gradle is a build tool with a focus on build automation and support for multi-language development. In some cases, Gradle may skip that verification and accept a dependency that would otherwise fail the build as an untrusted external artifact. This occurs when dependency verification is disabled on one or more configurations and those configurations have common dependencies with other configurations that have dependency verification enabled. If the configuration that has dependency verification disabled is resolved first, Gradle does not verify the common dependencies for the configuration that has dependency verification enabled. Gradle 7.4 fixes that issue by validating artifacts at least once if they are present in a resolved configuration that has dependency verification active. For users who cannot update either do not use `ResolutionStrategy.disableDependencyVerification()` and do not use plugins that use that method to disable dependency verification for a single configuration or make sure resolution of configuration that disable that feature do not happen in builds that resolve configuration where the feature is enabled.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-10T20:15:07.317",
    "last_modified": "2024-11-21T06:48:58.287",
    "fix_date": "2022-02-02T09:08:54Z"
  },
  "references": [
    {
      "url": "https://docs.gradle.org/7.4/release-notes.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/commit/88ab9b652933bc3b2e3161b31ad8b8f4f0516351",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/security/advisories/GHSA-9pf5-88jw-3qgr",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.gradle.org/7.4/release-notes.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/commit/88ab9b652933bc3b2e3161b31ad8b8f4f0516351",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/security/advisories/GHSA-9pf5-88jw-3qgr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.699497",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gradle",
    "owner": "gradle",
    "created_at": "2009-09-09T18:27:19Z",
    "updated_at": "2025-01-14T11:57:21Z",
    "pushed_at": "2025-01-14T13:32:33Z",
    "size": 584073,
    "stars": 17169,
    "forks": 4814,
    "open_issues": 3031,
    "watchers": 17169,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Groovy": 35373708,
      "Java": 32924568,
      "Kotlin": 5104589,
      "C++": 888505,
      "JavaScript": 77171,
      "HTML": 15779,
      "CSS": 14880,
      "Shell": 12301,
      "XSLT": 7121,
      "C": 5785,
      "Scala": 2817,
      "Gherkin": 192,
      "Python": 58,
      "Brainfuck": 54
    },
    "commit_activity": {
      "total_commits_last_year": 9381,
      "avg_commits_per_week": 180.40384615384616,
      "days_active_last_year": 341
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:36:38.929346"
  }
}