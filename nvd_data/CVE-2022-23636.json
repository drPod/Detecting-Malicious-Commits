{
  "cve_id": "CVE-2022-23636",
  "github_data": {
    "repository": "bytecodealliance/wasmtime",
    "fix_commit": "886ecc562040bef61faf19438c22285c2d62403a",
    "related_commits": [
      "886ecc562040bef61faf19438c22285c2d62403a",
      "886ecc562040bef61faf19438c22285c2d62403a"
    ],
    "patch_url": "https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a.patch",
    "fix_commit_details": {
      "sha": "886ecc562040bef61faf19438c22285c2d62403a",
      "commit_date": "2022-02-16T18:00:19Z",
      "author": {
        "login": "peterhuene",
        "type": "User",
        "stats": {
          "total_commits": 215,
          "average_weekly_commits": 0.4684095860566449,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 77
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-88xq-w8cq-xfg7",
        "length": 1375,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 75,
        "additions": 74,
        "deletions": 1
      },
      "files": [
        {
          "filename": "crates/runtime/src/instance.rs",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -92,6 +92,10 @@ pub(crate) struct Instance {\n     /// allocation, but some host-defined objects will store their state here.\n     host_state: Box<dyn Any + Send + Sync>,\n \n+    /// Flag to track when the vmctx has been initialized.\n+    /// The pooling allocator may drop an instance before `vmctx` is initialized.\n+    vmctx_initialized: bool,\n+\n     /// Additional context used by compiled wasm code. This field is last, and\n     /// represents a dynamically-sized array that extends beyond the nominal\n     /// end of the struct (similar to a flexible array member).\n@@ -119,6 +123,7 @@ impl Instance {\n             dropped_data: EntitySet::with_capacity(module.passive_data_map.len()),\n             host_state,\n             wasm_data,\n+            vmctx_initialized: false,\n             vmctx: VMContext {\n                 _marker: std::marker::PhantomPinned,\n             },\n@@ -733,13 +738,18 @@ impl Instance {\n     }\n \n     fn drop_globals(&mut self) {\n+        // Dropping globals requires that the vmctx be fully initialized\n+        if !self.vmctx_initialized {\n+            return;\n+        }\n+\n         for (idx, global) in self.module.globals.iter() {\n             let idx = match self.module.defined_global_index(idx) {\n                 Some(idx) => idx,\n                 None => continue,\n             };\n             match global.wasm_ty {\n-                // For now only externref gloabls need to get destroyed\n+                // For now only externref globals need to get destroyed\n                 WasmType::ExternRef => {}\n                 _ => continue,\n             }"
        },
        {
          "filename": "crates/runtime/src/instance/allocator.rs",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -475,6 +475,8 @@ fn initialize_instance(\n }\n \n unsafe fn initialize_vmcontext(instance: &mut Instance, req: InstanceAllocationRequest) {\n+    assert!(!instance.vmctx_initialized);\n+\n     if let Some(store) = req.store.as_raw() {\n         *instance.interrupts() = (*store).vminterrupts();\n         *instance.epoch_ptr() = (*store).epoch_ptr();\n@@ -570,6 +572,9 @@ unsafe fn initialize_vmcontext(instance: &mut Instance, req: InstanceAllocationR\n \n     // Initialize the defined globals\n     initialize_vmcontext_globals(instance);\n+\n+    // Mark the vmctx as initialized\n+    instance.vmctx_initialized = true;\n }\n \n unsafe fn initialize_vmcontext_globals(instance: &Instance) {"
        },
        {
          "filename": "tests/all/pooling_allocator.rs",
          "status": "modified",
          "additions": 58,
          "deletions": 0,
          "patch": "@@ -511,3 +511,61 @@ fn preserve_data_segments() -> Result<()> {\n \n     Ok(())\n }\n+\n+#[test]\n+fn drop_externref_global_during_module_init() -> Result<()> {\n+    struct Limiter;\n+\n+    impl ResourceLimiter for Limiter {\n+        fn memory_growing(&mut self, _: usize, _: usize, _: Option<usize>) -> bool {\n+            false\n+        }\n+\n+        fn table_growing(&mut self, _: u32, _: u32, _: Option<u32>) -> bool {\n+            false\n+        }\n+    }\n+\n+    let mut config = Config::new();\n+    config.wasm_reference_types(true);\n+    config.allocation_strategy(InstanceAllocationStrategy::Pooling {\n+        strategy: PoolingAllocationStrategy::NextAvailable,\n+        module_limits: Default::default(),\n+        instance_limits: InstanceLimits { count: 1 },\n+    });\n+\n+    let engine = Engine::new(&config)?;\n+\n+    let module = Module::new(\n+        &engine,\n+        r#\"\n+            (module\n+                (global i32 (i32.const 1))\n+                (global i32 (i32.const 2))\n+                (global i32 (i32.const 3))\n+                (global i32 (i32.const 4))\n+                (global i32 (i32.const 5))\n+            )\n+        \"#,\n+    )?;\n+\n+    let mut store = Store::new(&engine, Limiter);\n+    drop(Instance::new(&mut store, &module, &[])?);\n+    drop(store);\n+\n+    let module = Module::new(\n+        &engine,\n+        r#\"\n+            (module\n+                (memory 1)\n+                (global (mut externref) (ref.null extern))\n+            )\n+        \"#,\n+    )?;\n+\n+    let mut store = Store::new(&engine, Limiter);\n+    store.limiter(|s| s);\n+    assert!(Instance::new(&mut store, &module, &[]).is_err());\n+\n+    Ok(())\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "21ab8ea016cf6a2c25527f644773a7d25e845d8e",
            "date": "2025-01-14T21:03:54Z",
            "author_login": "alexcrichton"
          },
          {
            "sha": "1c521e177ead5ae04cc0c942ee55d0442130b79d",
            "date": "2025-01-14T21:01:45Z",
            "author_login": "SingleAccretion"
          },
          {
            "sha": "be40551f98266fd427796efc37c0f0db96ccbff5",
            "date": "2025-01-14T19:17:16Z",
            "author_login": "alexcrichton"
          },
          {
            "sha": "a88eb702a4847d6ed2e09fa1ef1f86e38f49ca5e",
            "date": "2025-01-14T18:28:51Z",
            "author_login": "fitzgen"
          },
          {
            "sha": "8ed4470fc4aa70fe70502af0548fd7e5d6a529bc",
            "date": "2025-01-14T18:10:31Z",
            "author_login": "fitzgen"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-824",
    "description": "Wasmtime is an open source runtime for WebAssembly & WASI. Prior to versions 0.34.1 and 0.33.1, there exists a bug in the pooling instance allocator in Wasmtime's runtime where a failure to instantiate an instance for a module that defines an `externref` global will result in an invalid drop of a `VMExternRef` via an uninitialized pointer. A number of conditions listed in the GitHub Security Advisory must be true in order for an instance to be vulnerable to this issue. Maintainers believe that the effective impact of this bug is relatively small because the usage of `externref` is still uncommon and without a resource limiter configured on the `Store`, which is not the default configuration, it is only possible to trigger the bug from an error returned by `mprotect` or `VirtualAlloc`. Note that on Linux with the `uffd` feature enabled, it is only possible to trigger the bug from a resource limiter as the call to `mprotect` is skipped. The bug has been fixed in 0.34.1 and 0.33.1 and users are encouraged to upgrade as soon as possible. If it is not possible to upgrade to version 0.34.1 or 0.33.1 of the `wasmtime` crate, it is recommend that support for the reference types proposal be disabled by passing `false` to `Config::wasm_reference_types`. Doing so will prevent modules that use `externref` from being loaded entirely.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-16T22:15:07.820",
    "last_modified": "2024-11-21T06:48:59.280",
    "fix_date": "2022-02-16T18:00:19Z"
  },
  "references": [
    {
      "url": "https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.722877",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wasmtime",
    "owner": "bytecodealliance",
    "created_at": "2017-08-29T14:01:55Z",
    "updated_at": "2025-01-14T09:40:55Z",
    "pushed_at": "2025-01-14T01:52:50Z",
    "size": 111616,
    "stars": 15702,
    "forks": 1345,
    "open_issues": 787,
    "watchers": 15702,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-0.32.0",
      "release-0.33.0",
      "release-0.34.0",
      "release-0.35.0",
      "release-0.36.0",
      "release-0.37.0",
      "release-0.38.0",
      "release-0.39.0",
      "release-0.40.0",
      "release-1.0.0",
      "release-2.0.0",
      "release-3.0.0",
      "release-4.0.0",
      "release-5.0.0",
      "release-6.0.0",
      "release-7.0.0",
      "release-8.0.0",
      "release-9.0.0"
    ],
    "languages": {
      "Rust": 19224087,
      "WebAssembly": 6773216,
      "Common Lisp": 1793054,
      "C": 257019,
      "JavaScript": 24116,
      "Shell": 23820,
      "C++": 21050,
      "CMake": 7205,
      "OCaml": 6903,
      "Assembly": 4165,
      "Dockerfile": 2564,
      "Makefile": 1432,
      "CSS": 303
    },
    "commit_activity": {
      "total_commits_last_year": 1586,
      "avg_commits_per_week": 30.5,
      "days_active_last_year": 278
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:32:42.127815"
  }
}