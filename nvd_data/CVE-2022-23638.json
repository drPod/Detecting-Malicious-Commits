{
  "cve_id": "CVE-2022-23638",
  "github_data": {
    "repository": "darylldoyle/svg-sanitizer",
    "fix_commit": "17e12ba9c2881caa6b167d0fbea555c11207fbb0",
    "related_commits": [
      "17e12ba9c2881caa6b167d0fbea555c11207fbb0",
      "17e12ba9c2881caa6b167d0fbea555c11207fbb0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "17e12ba9c2881caa6b167d0fbea555c11207fbb0",
      "commit_date": "2022-02-13T00:42:56Z",
      "author": {
        "login": "darylldoyle",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-fqx8-v33p-4qcc",
        "length": 59,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 193,
        "additions": 121,
        "deletions": 72
      },
      "files": [
        {
          "filename": "src/Sanitizer.php",
          "status": "modified",
          "additions": 98,
          "deletions": 25,
          "patch": "@@ -214,13 +214,10 @@ public function sanitize($dirty)\n         $this->elementReferenceResolver->collect();\n         $elementsToRemove = $this->elementReferenceResolver->getElementsToRemove();\n \n-        // Grab all the elements\n-        $allElements = $this->xmlDocument->getElementsByTagName(\"*\");\n-\n         // remove doctype after node elements have been analyzed\n         $this->removeDoctype();\n         // Start the cleaning proccess\n-        $this->startClean($allElements, $elementsToRemove);\n+        $this->startClean($this->xmlDocument->childNodes, $elementsToRemove);\n \n         // Save cleaned XML to a variable\n         if ($this->removeXMLTag) {\n@@ -316,33 +313,63 @@ protected function startClean(\\DOMNodeList $elements, array $elementsToRemove)\n                 continue;\n             }\n \n-            // If the tag isn't in the whitelist, remove it and continue with next iteration\n-            if (!in_array(strtolower($currentElement->tagName), $this->allowedTags)) {\n-                $currentElement->parentNode->removeChild($currentElement);\n-                $this->xmlIssues[] = array(\n-                    'message' => 'Suspicious tag \\'' . $currentElement->tagName . '\\'',\n-                    'line' => $currentElement->getLineNo(),\n-                );\n-                continue;\n-            }\n-\n-            $this->cleanHrefs($currentElement);\n-\n-            $this->cleanXlinkHrefs($currentElement);\n-\n-            $this->cleanAttributesOnWhitelist($currentElement);\n-\n-            if (strtolower($currentElement->tagName) === 'use') {\n-                if ($this->isUseTagDirty($currentElement)\n-                    || $this->isUseTagExceedingThreshold($currentElement)\n-                ) {\n+            if ($currentElement instanceof \\DOMElement) {\n+                // If the tag isn't in the whitelist, remove it and continue with next iteration\n+                if (!in_array(strtolower($currentElement->tagName), $this->allowedTags)) {\n                     $currentElement->parentNode->removeChild($currentElement);\n                     $this->xmlIssues[] = array(\n-                        'message' => 'Suspicious \\'' . $currentElement->tagName . '\\'',\n+                        'message' => 'Suspicious tag \\'' . $currentElement->tagName . '\\'',\n                         'line' => $currentElement->getLineNo(),\n                     );\n                     continue;\n                 }\n+\n+                $this->cleanHrefs( $currentElement );\n+\n+                $this->cleanXlinkHrefs( $currentElement );\n+\n+                $this->cleanAttributesOnWhitelist($currentElement);\n+\n+                if (strtolower($currentElement->tagName) === 'use') {\n+                    if ($this->isUseTagDirty($currentElement)\n+                        || $this->isUseTagExceedingThreshold($currentElement)\n+                    ) {\n+                        $currentElement->parentNode->removeChild($currentElement);\n+                        $this->xmlIssues[] = array(\n+                            'message' => 'Suspicious \\'' . $currentElement->tagName . '\\'',\n+                            'line' => $currentElement->getLineNo(),\n+                        );\n+                        continue;\n+                    }\n+                }\n+\n+                // Strip out font elements that will break out of foreign content.\n+                if (strtolower($currentElement->tagName) === 'font') {\n+                    $breaksOutOfForeignContent = false;\n+                    for ($x = $currentElement->attributes->length - 1; $x >= 0; $x--) {\n+                        // get attribute name\n+                        $attrName = $currentElement->attributes->item( $x )->name;\n+\n+                        if (in_array($attrName, ['face', 'color', 'size'])) {\n+                            $breaksOutOfForeignContent = true;\n+                        }\n+                    }\n+\n+                    if ($breaksOutOfForeignContent) {\n+                        $currentElement->parentNode->removeChild($currentElement);\n+                        $this->xmlIssues[] = array(\n+                            'message' => 'Suspicious tag \\'' . $currentElement->tagName . '\\'',\n+                            'line' => $currentElement->getLineNo(),\n+                        );\n+                        continue;\n+                    }\n+                }\n+            }\n+\n+            $this->cleanUnsafeNodes($currentElement);\n+\n+            if ($currentElement->hasChildNodes()) {\n+                $this->startClean($currentElement->childNodes, $elementsToRemove);\n             }\n         }\n     }\n@@ -627,4 +654,50 @@ public function setUseNestingLimit($limit)\n     {\n         $this->useNestingLimit = (int) $limit;\n     }\n+\n+    /**\n+     * Determines whether a node is safe or not.\n+     *\n+     * @param \\DOMNode $node\n+     * @return bool\n+     */\n+    protected function isNodeSafe(\\DOMNode $node) {\n+        $safeNodes = [\n+            '#text',\n+        ];\n+\n+        if (!in_array($node->nodeName, $safeNodes, true)) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Remove nodes that are either invalid or malformed.\n+     *\n+     * @param \\DOMNode $currentElement The current element.\n+     */\n+    protected function cleanUnsafeNodes(\\DOMNode $currentElement) {\n+        // If the element doesn't have a tagname, remove it and continue with next iteration\n+        if (!property_exists($currentElement, 'tagName')) {\n+            if (!$this->isNodeSafe($currentElement)) {\n+                $currentElement->parentNode->removeChild($currentElement);\n+                $this->xmlIssues[] = array(\n+                    'message' => 'Suspicious node \\'' . $currentElement->nodeName . '\\'',\n+                    'line' => $currentElement->getLineNo(),\n+                );\n+\n+                return;\n+            }\n+        }\n+\n+        if ( $currentElement->childNodes && $currentElement->childNodes->length > 0 ) {\n+            for ($j = $currentElement->childNodes->length - 1; $j >= 0; $j--) {\n+                /** @var \\DOMElement $childElement */\n+                $childElement = $currentElement->childNodes->item($j);\n+                $this->cleanUnsafeNodes($childElement);\n+            }\n+        }\n+    }\n }"
        },
        {
          "filename": "src/data/AllowedTags.php",
          "status": "modified",
          "additions": 0,
          "deletions": 46,
          "patch": "@@ -29,56 +29,35 @@ public static function getTags()\n             'article',\n             'aside',\n             'audio',\n-            'b',\n             'bdi',\n             'bdo',\n-            'big',\n             'blink',\n-            'blockquote',\n-            'body',\n-            'br',\n             'button',\n             'canvas',\n             'caption',\n-            'center',\n             'cite',\n-            'code',\n             'col',\n             'colgroup',\n             'content',\n             'data',\n             'datalist',\n-            'dd',\n             'decorator',\n             'del',\n             'details',\n             'dfn',\n             'dir',\n             'div',\n-            'dl',\n-            'dt',\n             'element',\n-            'em',\n             'fieldset',\n             'figcaption',\n             'figure',\n             'font',\n             'footer',\n             'form',\n-            'h1',\n-            'h2',\n-            'h3',\n-            'h4',\n-            'h5',\n-            'h6',\n-            'head',\n             'header',\n             'hgroup',\n-            'hr',\n             'html',\n-            'i',\n             'image',\n-            'img',\n             'input',\n             'ins',\n             'kbd',\n@@ -89,52 +68,27 @@ public static function getTags()\n             'map',\n             'mark',\n             'marquee',\n-            'menu',\n-            'menuitem',\n             'meter',\n             'nav',\n-            'nobr',\n-            'ol',\n             'optgroup',\n             'option',\n             'output',\n-            'p',\n-            'pre',\n             'progress',\n             'q',\n             'rp',\n             'rt',\n-            'ruby',\n-            's',\n             'samp',\n             'section',\n             'select',\n             'shadow',\n-            'small',\n             'source',\n             'spacer',\n-            'span',\n-            'strike',\n-            'strong',\n             'style',\n-            'sub',\n             'summary',\n-            'sup',\n-            'table',\n-            'tbody',\n-            'td',\n             'template',\n             'textarea',\n-            'tfoot',\n-            'th',\n-            'thead',\n             'time',\n-            'tr',\n             'track',\n-            'tt',\n-            'u',\n-            'ul',\n-            'var',\n             'video',\n             'wbr',\n "
        },
        {
          "filename": "tests/SanitizerTest.php",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -294,4 +294,17 @@ public function testLargeUseDOSattacksAreNullified()\n \n         self::assertXmlStringEqualsXmlString($expected, $cleanData);\n     }\n+\n+\tpublic function testInvalidNodesAreHandled()\n+\t{\n+\t\t$dataDirectory = __DIR__ . '/data';\n+\t\t$initialData = file_get_contents($dataDirectory . '/htmlTest.svg');\n+\t\t$expected = file_get_contents($dataDirectory . '/htmlClean.svg');\n+\n+\t\t$sanitizer = new Sanitizer();\n+\t\t$sanitizer->minify(false);\n+\t\t$cleanData = $sanitizer->sanitize($initialData);\n+\n+\t\tself::assertXmlStringEqualsXmlString($expected, $cleanData);\n+\t}\n }"
        },
        {
          "filename": "tests/data/entityClean.svg",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n <svg xmlns=\"http://www.w3.org/2000/svg\">\n-  <text x=\"0\" y=\"20\" font-size=\"20\">&lab;</text>\n+  <text x=\"0\" y=\"20\" font-size=\"20\"></text>\n </svg>"
        },
        {
          "filename": "tests/data/htmlClean.svg",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-1 -1 2 2\"></svg>"
        },
        {
          "filename": "tests/data/htmlTest.svg",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-1 -1 2 2\">\n+    <!--><img src onerror=alert(1)><!-->\n+    <?x ><img src onerror=alert(1)><?x?>\n+    <p/><![CDATA[ ><img src onerror=alert(1)> ]]>\n+    <font face=\"\"/><![CDATA[ ><img src onerror=alert(1)> ]]>\n+</svg>\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5e477468fac5c5ce933dce53af3e8e4e58dcccc9",
            "date": "2025-01-13T09:32:25Z",
            "author_login": "darylldoyle"
          },
          {
            "sha": "b154c6ec5a607193b3e0bbb20aa052426a5edb89",
            "date": "2025-01-10T08:11:22Z",
            "author_login": "Orgoth"
          },
          {
            "sha": "068d9fcf912c88a0471d101d95a2caa87c50aee7",
            "date": "2024-09-05T10:18:12Z",
            "author_login": "darylldoyle"
          },
          {
            "sha": "7dd11e47abe71e8aaeb089d453e3b5a99923e38c",
            "date": "2024-08-12T12:30:40Z",
            "author_login": "lolli42"
          },
          {
            "sha": "fd26ab8996126501b2cfd6eef6d6b8e416e2845d",
            "date": "2024-08-12T12:27:45Z",
            "author_login": "lolli42"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-79",
    "description": "svg-sanitizer is a SVG/XML sanitizer written in PHP. A cross-site scripting vulnerability impacts all users of the `svg-sanitizer` library prior to version 0.15.0. This issue is fixed in version 0.15.0. There is currently no workaround available.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-14T21:15:09.853",
    "last_modified": "2024-11-21T06:48:59.550",
    "fix_date": "2022-02-13T00:42:56Z"
  },
  "references": [
    {
      "url": "https://github.com/darylldoyle/svg-sanitizer/commit/17e12ba9c2881caa6b167d0fbea555c11207fbb0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/darylldoyle/svg-sanitizer/security/advisories/GHSA-fqx8-v33p-4qcc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/darylldoyle/svg-sanitizer/commit/17e12ba9c2881caa6b167d0fbea555c11207fbb0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/darylldoyle/svg-sanitizer/security/advisories/GHSA-fqx8-v33p-4qcc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.710113",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "svg-sanitizer",
    "owner": "darylldoyle",
    "created_at": "2015-06-18T22:17:33Z",
    "updated_at": "2025-01-21T15:08:27Z",
    "pushed_at": "2025-01-13T09:34:53Z",
    "size": 362,
    "stars": 477,
    "forks": 67,
    "open_issues": 19,
    "watchers": 477,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "PHP": 69257
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:44:11.043066"
  }
}