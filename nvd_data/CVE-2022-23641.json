{
  "cve_id": "CVE-2022-23641",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "a34075d205a8857e29574ffd82aaece0c467565e",
    "related_commits": [
      "a34075d205a8857e29574ffd82aaece0c467565e",
      "a34075d205a8857e29574ffd82aaece0c467565e"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a34075d205a8857e29574ffd82aaece0c467565e",
      "commit_date": "2022-02-14T01:11:09Z",
      "author": {
        "login": "lis2",
        "type": "User",
        "stats": {
          "total_commits": 515,
          "average_weekly_commits": 0.7410071942446043,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 199
        }
      },
      "commit_message": {
        "title": "SECURITY: Onebox response timeout and size limit (#15927)",
        "length": 170,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 38,
        "additions": 35,
        "deletions": 3
      },
      "files": [
        {
          "filename": "lib/final_destination.rb",
          "status": "modified",
          "additions": 14,
          "deletions": 3,
          "patch": "@@ -8,6 +8,8 @@\n \n # Determine the final endpoint for a Web URI, following redirects\n class FinalDestination\n+  MAX_REQUEST_TIME_SECONDS = 10\n+  MAX_REQUEST_SIZE_BYTES = 1_048_576 # 1024 * 1024\n \n   def self.clear_https_cache!(domain)\n     key = redis_https_key(domain)\n@@ -203,12 +205,21 @@ def resolve\n     middlewares = Excon.defaults[:middlewares]\n     middlewares << Excon::Middleware::Decompress if @http_verb == :get\n \n+    request_start_time = Time.now\n+    response_body = +\"\"\n+    request_validator = lambda do |chunk, _remaining_bytes, _total_bytes|\n+      response_body << chunk\n+      raise Excon::Errors::ExpectationFailed.new(\"response size too big: #{@uri.to_s}\") if response_body.bytesize > MAX_REQUEST_SIZE_BYTES\n+      raise Excon::Errors::ExpectationFailed.new(\"connect timeout reached: #{@uri.to_s}\") if Time.now - request_start_time > MAX_REQUEST_TIME_SECONDS\n+    end\n+\n     response = Excon.public_send(@http_verb,\n       @uri.to_s,\n       read_timeout: timeout,\n       connect_timeout: timeout,\n       headers: headers,\n-      middlewares: middlewares\n+      middlewares: middlewares,\n+      response_block: request_validator\n     )\n \n     location = nil\n@@ -220,12 +231,12 @@ def resolve\n       # Cache body of successful `get` requests\n       if @http_verb == :get\n         if Oneboxer.cache_response_body?(@uri)\n-          Oneboxer.cache_response_body(@uri.to_s, response.body)\n+          Oneboxer.cache_response_body(@uri.to_s, response_body)\n         end\n       end\n \n       if @follow_canonical\n-        next_url = fetch_canonical_url(response.body)\n+        next_url = fetch_canonical_url(response_body)\n \n         if next_url.to_s.present? && next_url != @uri\n           @follow_canonical = false"
        },
        {
          "filename": "spec/components/final_destination_spec.rb",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -49,6 +49,13 @@\n     }\n   end\n \n+  let(:body_response) do\n+    {\n+      status: 200,\n+      body: \"<body>test</body>\"\n+    }\n+  end\n+\n   def canonical_follow(from, dest)\n     stub_request(:get, from).to_return(\n       status: 200,\n@@ -182,6 +189,20 @@ def fd(url)\n       end\n     end\n \n+    it 'raises error when response is too big' do\n+      stub_const(described_class, \"MAX_REQUEST_SIZE_BYTES\", 1) do\n+        stub_request(:get, \"https://codinghorror.com/blog\").to_return(body_response)\n+        final = FinalDestination.new('https://codinghorror.com/blog', opts.merge(follow_canonical: true))\n+        expect { final.resolve }.to raise_error(Excon::Errors::ExpectationFailed, \"response size too big: https://codinghorror.com/blog\")\n+      end\n+    end\n+\n+    it 'raises error when response is too slow' do\n+      stub_request(:get, \"https://codinghorror.com/blog\").to_return(lambda { |request| freeze_time(11.seconds.from_now) ; body_response })\n+      final = FinalDestination.new('https://codinghorror.com/blog', opts.merge(follow_canonical: true))\n+      expect { final.resolve }.to raise_error(Excon::Errors::ExpectationFailed, \"connect timeout reached: https://codinghorror.com/blog\")\n+    end\n+\n     context 'follows canonical links' do\n       it 'resolves the canonical link as the final destination' do\n         canonical_follow(\"https://eviltrout.com\", \"https://codinghorror.com/blog\")"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d2efdf5282a868d80e916caaeb51d40d1ea256a2",
            "date": "2025-01-24T21:33:06Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "4c1c4ba8d42db4d1c732af69c39740d2aee91410",
            "date": "2025-01-24T19:50:52Z",
            "author_login": "featheredtoast"
          },
          {
            "sha": "59a67758489683457e7dca5fd712710034c08631",
            "date": "2025-01-24T19:42:22Z",
            "author_login": "xfalcox"
          },
          {
            "sha": "9cc99ef6db77d82b4af95911ee503e227cceae62",
            "date": "2025-01-24T18:36:35Z",
            "author_login": "SamSaffron"
          },
          {
            "sha": "5a94ceda542e5a0d0d8b90219bb835a51780b502",
            "date": "2025-01-24T18:05:47Z",
            "author_login": "xfalcox"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "Discourse is an open source discussion platform. In versions prior to 2.8.1 in the `stable` branch, 2.9.0.beta2 in the `beta` branch, and 2.9.0.beta2 in the `tests-passed` branch, users can trigger a Denial of Service attack by posting a streaming URL. Parsing Oneboxes in the background job trigger an infinite loop, which cause memory leaks. This issue is patched in version 2.8.1 of the `stable` branch, 2.9.0.beta2 of the `beta` branch, and 2.9.0.beta2 of the `tests-passed` branch. As a workaround, disable onebox in admin panel completely or specify allow list of domains that will be oneboxed.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-15T21:15:07.657",
    "last_modified": "2024-11-21T06:48:59.933",
    "fix_date": "2022-02-14T01:11:09Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/a34075d205a8857e29574ffd82aaece0c467565e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/pull/15927",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-22xw-f62v-cfxv",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/a34075d205a8857e29574ffd82aaece0c467565e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/pull/15927",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-22xw-f62v-cfxv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.716576",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-26T07:21:20Z",
    "pushed_at": "2025-01-25T09:40:42Z",
    "size": 701178,
    "stars": 42998,
    "forks": 8411,
    "open_issues": 82,
    "watchers": 42998,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20337451,
      "JavaScript": 9453662,
      "HTML": 1461712,
      "Handlebars": 1061673,
      "SCSS": 987048,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5042,
      "avg_commits_per_week": 96.96153846153847,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:34:08.623080"
  }
}