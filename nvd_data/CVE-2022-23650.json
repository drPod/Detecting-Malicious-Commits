{
  "cve_id": "CVE-2022-23650",
  "github_data": {
    "repository": "gravitl/netmaker",
    "fix_commit": "3d4f44ecfe8be4ca38920556ba3b90502ffb4fee",
    "related_commits": [
      "3d4f44ecfe8be4ca38920556ba3b90502ffb4fee",
      "e9bce264719f88c30e252ecc754d08f422f4c080",
      "3d4f44ecfe8be4ca38920556ba3b90502ffb4fee",
      "e9bce264719f88c30e252ecc754d08f422f4c080"
    ],
    "patch_url": "https://github.com/gravitl/netmaker/commit/3d4f44ecfe8be4ca38920556ba3b90502ffb4fee.patch",
    "fix_commit_details": {
      "sha": "3d4f44ecfe8be4ca38920556ba3b90502ffb4fee",
      "commit_date": "2022-02-15T15:04:22Z",
      "author": {
        "login": "0xdcarns",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #770 from gravitl/hotfix_v0.10.0_jwt_data",
        "length": 75,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 54,
        "additions": 52,
        "deletions": 2
      },
      "files": [
        {
          "filename": "logic/jwts.go",
          "status": "modified",
          "additions": 22,
          "deletions": 1,
          "patch": "@@ -2,14 +2,29 @@ package logic\n \n import (\n \t\"errors\"\n+\t\"fmt\"\n \t\"time\"\n \n \t\"github.com/golang-jwt/jwt/v4\"\n+\t\"github.com/gravitl/netmaker/logger\"\n \t\"github.com/gravitl/netmaker/models\"\n \t\"github.com/gravitl/netmaker/servercfg\"\n )\n \n-var jwtSecretKey = []byte(\"(BytesOverTheWire)\")\n+var jwtSecretKey []byte\n+\n+// SetJWTSecret - sets the jwt secret on server startup\n+func SetJWTSecret() {\n+\tcurrentSecret, jwtErr := FetchJWTSecret()\n+\tif jwtErr != nil {\n+\t\tjwtSecretKey = []byte(RandomString(64)) // 512 bit random password\n+\t\tif err := StoreJWTSecret(string(jwtSecretKey)); err != nil {\n+\t\t\tlogger.FatalLog(\"something went wrong when configuring JWT authentication\")\n+\t\t}\n+\t} else {\n+\t\tjwtSecretKey = []byte(currentSecret)\n+\t}\n+}\n \n // CreateJWT func will used to create the JWT while signing in and signing out\n func CreateJWT(uuid string, macAddress string, network string) (response string, err error) {\n@@ -19,6 +34,9 @@ func CreateJWT(uuid string, macAddress string, network string) (response string,\n \t\tNetwork:    network,\n \t\tMacAddress: macAddress,\n \t\tStandardClaims: jwt.StandardClaims{\n+\t\t\tIssuer:    \"Netmaker\",\n+\t\t\tSubject:   fmt.Sprintf(\"node|%s\", uuid),\n+\t\t\tIssuedAt:  time.Now().Unix(),\n \t\t\tExpiresAt: expirationTime.Unix(),\n \t\t},\n \t}\n@@ -39,6 +57,9 @@ func CreateUserJWT(username string, networks []string, isadmin bool) (response s\n \t\tNetworks: networks,\n \t\tIsAdmin:  isadmin,\n \t\tStandardClaims: jwt.StandardClaims{\n+\t\t\tIssuer:    \"Netmaker\",\n+\t\t\tIssuedAt:  time.Now().Unix(),\n+\t\t\tSubject:   fmt.Sprintf(\"user|%s\", username),\n \t\t\tExpiresAt: expirationTime.Unix(),\n \t\t},\n \t}"
        },
        {
          "filename": "logic/serverconf.go",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -43,3 +43,32 @@ func FetchPrivKey(serverID string) (string, error) {\n func RemovePrivKey(serverID string) error {\n \treturn database.DeleteRecord(database.SERVERCONF_TABLE_NAME, serverID)\n }\n+\n+// FetchJWTSecret - fetches jwt secret from db\n+func FetchJWTSecret() (string, error) {\n+\tvar dbData string\n+\tvar err error\n+\tvar fetchedData = serverData{}\n+\tdbData, err = database.FetchRecord(database.SERVERCONF_TABLE_NAME, \"nm-jwt-secret\")\n+\tif err != nil {\n+\t\treturn \"\", err\n+\t}\n+\terr = json.Unmarshal([]byte(dbData), &fetchedData)\n+\tif err != nil {\n+\t\treturn \"\", err\n+\t}\n+\treturn fetchedData.PrivateKey, nil\n+}\n+\n+// StoreJWTSecret - stores server jwt secret if needed\n+func StoreJWTSecret(privateKey string) error {\n+\tvar newData = serverData{}\n+\tvar err error\n+\tvar data []byte\n+\tnewData.PrivateKey = privateKey\n+\tdata, err = json.Marshal(&newData)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn database.Insert(\"nm-jwt-secret\", string(data), database.SERVERCONF_TABLE_NAME)\n+}"
        },
        {
          "filename": "main.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -40,7 +40,6 @@ func main() {\n \n func initialize() { // Client Mode Prereq Check\n \tvar err error\n-\n \tif servercfg.GetNodeID() == \"\" {\n \t\tlogger.FatalLog(\"error: must set NODE_ID, currently blank\")\n \t}\n@@ -49,6 +48,7 @@ func initialize() { // Client Mode Prereq Check\n \t\tlogger.FatalLog(\"Error connecting to database\")\n \t}\n \tlogger.Log(0, \"database successfully connected\")\n+\tlogic.SetJWTSecret()\n \n \terr = logic.TimerCheckpoint()\n \tif err != nil {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bfaac66a5df82c483eb7d55e16a3988a7d574d6b",
            "date": "2025-01-14T05:09:20Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "81f8f3ee7be89c3a2bd2be6f5a8b8c04bd57e0d4",
            "date": "2025-01-10T11:26:00Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "5ae74739069debc9e8b500239a4269c960c38ec5",
            "date": "2025-01-10T07:51:47Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "26300dc9ed2ae5790253141ec884b104ef7c637b",
            "date": "2025-01-10T07:51:14Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "d47be71f3388c2792ae708531177cb2362ea326f",
            "date": "2025-01-10T07:50:37Z",
            "author_login": "abhishek9686"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-321",
    "description": "Netmaker is a platform for creating and managing virtual overlay networks using WireGuard. Prior to versions 0.8.5, 0.9.4, and 010.0, there is a hard-coded cryptographic key in the code base which can be exploited to run admin commands on a remote server if the exploiter know the address and username of the admin. This effects the server (netmaker) component, and not clients. This has been patched in Netmaker v0.8.5, v0.9.4, and v0.10.0. There are currently no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-18T22:15:13.283",
    "last_modified": "2024-11-21T06:49:01.237",
    "fix_date": "2022-02-15T15:04:22Z"
  },
  "references": [
    {
      "url": "https://github.com/gravitl/netmaker/commit/3d4f44ecfe8be4ca38920556ba3b90502ffb4fee",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/commit/e9bce264719f88c30e252ecc754d08f422f4c080",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/pull/781/commits/1bec97c662670dfdab804343fc42ae4b1d050a87",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/security/advisories/GHSA-86f3-hf24-76q4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/commit/3d4f44ecfe8be4ca38920556ba3b90502ffb4fee",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/commit/e9bce264719f88c30e252ecc754d08f422f4c080",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/pull/781/commits/1bec97c662670dfdab804343fc42ae4b1d050a87",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/security/advisories/GHSA-86f3-hf24-76q4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.732027",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "netmaker",
    "owner": "gravitl",
    "created_at": "2021-03-25T15:33:08Z",
    "updated_at": "2025-01-14T07:58:58Z",
    "pushed_at": "2025-01-14T10:13:45Z",
    "size": 276029,
    "stars": 9655,
    "forks": 555,
    "open_issues": 177,
    "watchers": 9655,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 1060295,
      "Shell": 83822,
      "Dockerfile": 441
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:50:17.648713"
  }
}