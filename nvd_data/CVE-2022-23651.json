{
  "cve_id": "CVE-2022-23651",
  "github_data": {
    "repository": "Backblaze/b2-sdk-python",
    "fix_commit": "62476638986e5b6d7459aca5ef8ce220760226e0",
    "related_commits": [
      "62476638986e5b6d7459aca5ef8ce220760226e0",
      "62476638986e5b6d7459aca5ef8ce220760226e0"
    ],
    "patch_url": "https://github.com/Backblaze/b2-sdk-python/commit/62476638986e5b6d7459aca5ef8ce220760226e0.patch",
    "fix_commit_details": {
      "sha": "62476638986e5b6d7459aca5ef8ce220760226e0",
      "commit_date": "2022-02-23T18:58:01Z",
      "author": {
        "login": "ppolewicz",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-p867-fxfr-ph2w",
        "length": 428,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 58,
        "additions": 39,
        "deletions": 19
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n ### Fixed\n * Fix downloading files with unverified checksum\n+* Fix setting permissions for local sqlite database (thanks to Jan Schejbal for responsible disclosure!)\n \n ## [1.14.0] - 2021-12-23\n "
        },
        {
          "filename": "b2sdk/account_info/sqlite_account_info.py",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -165,9 +165,16 @@ def _connect(self):\n \n     def _create_database(self, last_upgrade_to_run):\n         \"\"\"\n-        Make sure that the database is created and sets the file permissions.\n+        Make sure that the database is created and has appropriate file permissions.\n         This should be done before storing any sensitive data in it.\n         \"\"\"\n+        # Prepare a file\n+        fd = os.open(\n+            self.filename,\n+            flags=os.O_RDWR | os.O_CREAT,\n+            mode=stat.S_IRUSR | stat.S_IWUSR,\n+        )\n+        os.close(fd)\n         # Create the tables in the database\n         conn = self._connect()\n         try:\n@@ -176,9 +183,6 @@ def _create_database(self, last_upgrade_to_run):\n         finally:\n             conn.close()\n \n-        # Set the file permissions\n-        os.chmod(self.filename, stat.S_IRUSR | stat.S_IWUSR)\n-\n     def _create_tables(self, conn, last_upgrade_to_run):\n         conn.execute(\n             \"\"\""
        },
        {
          "filename": "test/unit/account_info/test_account_info.py",
          "status": "modified",
          "additions": 30,
          "deletions": 15,
          "patch": "@@ -14,6 +14,7 @@\n import os\n import platform\n import shutil\n+import stat\n import tempfile\n \n import pytest\n@@ -319,15 +320,29 @@ def setUp(self, request):\n             os.unlink(self.db_path)\n         except OSError:\n             pass\n-        self.home = tempfile.mkdtemp()\n+        self.test_home = tempfile.mkdtemp()\n \n         yield\n-        for cleanup_method in [lambda: os.unlink(self.db_path), lambda: shutil.rmtree(self.home)]:\n+        for cleanup_method in [\n+            lambda: os.unlink(self.db_path), lambda: shutil.rmtree(self.test_home)\n+        ]:\n             try:\n-                cleanup_method\n+                cleanup_method()\n             except OSError:\n                 pass\n \n+    @pytest.mark.skipif(\n+        platform.system() == 'Windows',\n+        reason='different permission system on Windows'\n+    )\n+    def test_permissions(self):\n+        \"\"\"\n+        Test that a new database won't be readable by just any user\n+        \"\"\"\n+        s = SqliteAccountInfo(file_name=self.db_path,)\n+        mode = os.stat(self.db_path).st_mode\n+        assert stat.filemode(mode) == '-rw-------'\n+\n     def test_corrupted(self):\n         \"\"\"\n         Test that a corrupted file will be replaced with a blank file.\n@@ -371,7 +386,7 @@ def _make_sqlite_account_info(self, env=None, last_upgrade_to_run=None):\n         :param dict env: Override Environment variables.\n         \"\"\"\n         # Override HOME to ensure hermetic tests\n-        with mock.patch('os.environ', env or {'HOME': self.home}):\n+        with mock.patch('os.environ', env or {'HOME': self.test_home}):\n             return SqliteAccountInfo(\n                 file_name=self.db_path if not env else None,\n                 last_upgrade_to_run=last_upgrade_to_run,\n@@ -380,24 +395,24 @@ def _make_sqlite_account_info(self, env=None, last_upgrade_to_run=None):\n     def test_uses_default(self):\n         account_info = self._make_sqlite_account_info(\n             env={\n-                'HOME': self.home,\n-                'USERPROFILE': self.home,\n+                'HOME': self.test_home,\n+                'USERPROFILE': self.test_home,\n             }\n         )\n         actual_path = os.path.abspath(account_info.filename)\n-        assert os.path.join(self.home, '.b2_account_info') == actual_path\n+        assert os.path.join(self.test_home, '.b2_account_info') == actual_path\n \n     def test_uses_xdg_config_home(self, apiver):\n         with WindowsSafeTempDir() as d:\n             account_info = self._make_sqlite_account_info(\n                 env={\n-                    'HOME': self.home,\n-                    'USERPROFILE': self.home,\n+                    'HOME': self.test_home,\n+                    'USERPROFILE': self.test_home,\n                     XDG_CONFIG_HOME_ENV_VAR: d,\n                 }\n             )\n             if apiver in ['v0', 'v1']:\n-                expected_path = os.path.abspath(os.path.join(self.home, '.b2_account_info'))\n+                expected_path = os.path.abspath(os.path.join(self.test_home, '.b2_account_info'))\n             else:\n                 assert os.path.exists(os.path.join(d, 'b2'))\n                 expected_path = os.path.abspath(os.path.join(d, 'b2', 'account_info'))\n@@ -406,12 +421,12 @@ def test_uses_xdg_config_home(self, apiver):\n \n     def test_uses_existing_file_and_ignores_xdg(self):\n         with WindowsSafeTempDir() as d:\n-            default_db_file_location = os.path.join(self.home, '.b2_account_info')\n+            default_db_file_location = os.path.join(self.test_home, '.b2_account_info')\n             open(default_db_file_location, 'a').close()\n             account_info = self._make_sqlite_account_info(\n                 env={\n-                    'HOME': self.home,\n-                    'USERPROFILE': self.home,\n+                    'HOME': self.test_home,\n+                    'USERPROFILE': self.test_home,\n                     XDG_CONFIG_HOME_ENV_VAR: d,\n                 }\n             )\n@@ -423,8 +438,8 @@ def test_account_info_env_var_overrides_xdg_config_home(self):\n         with WindowsSafeTempDir() as d:\n             account_info = self._make_sqlite_account_info(\n                 env={\n-                    'HOME': self.home,\n-                    'USERPROFILE': self.home,\n+                    'HOME': self.test_home,\n+                    'USERPROFILE': self.test_home,\n                     XDG_CONFIG_HOME_ENV_VAR: d,\n                     B2_ACCOUNT_INFO_ENV_VAR: os.path.join(d, 'b2_account_info'),\n                 }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c209618863ee3062c61ae4cc6bacb32d200a6029",
            "date": "2025-01-07T09:09:56Z",
            "author_login": "mlech-reef"
          },
          {
            "sha": "c25ae8e21fe51a57160e0b5c6ea9f413527ba114",
            "date": "2024-12-31T19:31:45Z",
            "author_login": "mlech-reef"
          },
          {
            "sha": "a4a0cc5d3be9af7e72aab6b30140d423fe0e8e4b",
            "date": "2024-12-31T16:29:29Z",
            "author_login": "olzhasar-reef"
          },
          {
            "sha": "9c726826f05cbf86fbed3f23409e7241ca65611f",
            "date": "2024-12-31T13:52:17Z",
            "author_login": "mlech-reef"
          },
          {
            "sha": "7c4bf32f2495b6771955dbe33b01a36af106e5f4",
            "date": "2024-12-29T11:14:47Z",
            "author_login": "mlech-reef"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.7,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-367",
    "description": "b2-sdk-python is a python library to access cloud storage provided by backblaze. Linux and Mac releases of the SDK version 1.14.0 and below contain a key disclosure vulnerability that, in certain conditions, can be exploited by local attackers through a time-of-check-time-of-use (TOCTOU) race condition. SDK users of the SqliteAccountInfo format are vulnerable while users of the InMemoryAccountInfo format are safe. The SqliteAccountInfo saves API keys (and bucket name-to-id mapping) in a local database file ($XDG_CONFIG_HOME/b2/account_info, ~/.b2_account_info or a user-defined path). When first created, the file is world readable and is (typically a few milliseconds) later altered to be private to the user. If the directory containing the file is readable by a local attacker then during the brief period between file creation and permission modification, a local attacker can race to open the file and maintain a handle to it. This allows the local attacker to read the contents after the file after the sensitive information has been saved to it. Consumers of this SDK who rely on it to save data using SqliteAccountInfo class should upgrade to the latest version of the SDK. Those who believe a local user might have opened a handle using this race condition, should remove the affected database files and regenerate all application keys. Users should upgrade to b2-sdk-python 1.14.1 or later.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-23T23:15:07.837",
    "last_modified": "2024-11-21T06:49:01.377",
    "fix_date": "2022-02-23T18:58:01Z"
  },
  "references": [
    {
      "url": "https://github.com/Backblaze/b2-sdk-python/commit/62476638986e5b6d7459aca5ef8ce220760226e0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Backblaze/b2-sdk-python/security/advisories/GHSA-p867-fxfr-ph2w",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/b2sdk/",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/Backblaze/b2-sdk-python/commit/62476638986e5b6d7459aca5ef8ce220760226e0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Backblaze/b2-sdk-python/security/advisories/GHSA-p867-fxfr-ph2w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/b2sdk/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.743555",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "b2-sdk-python",
    "owner": "Backblaze",
    "created_at": "2019-01-28T18:13:01Z",
    "updated_at": "2025-01-07T09:10:01Z",
    "pushed_at": "2025-01-07T09:09:59Z",
    "size": 4691,
    "stars": 189,
    "forks": 61,
    "open_issues": 38,
    "watchers": 189,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1660822,
      "Shell": 486
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T22:47:57.086010"
  }
}