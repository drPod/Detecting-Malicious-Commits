{
  "cve_id": "CVE-2022-23948",
  "github_data": {
    "repository": "keylime/keylime",
    "fix_commit": "1a4f31a6368d651222683c9debe7d6832db6f607",
    "related_commits": [
      "1a4f31a6368d651222683c9debe7d6832db6f607",
      "d37c406e69cb6689baa2fb7964bad75209703724",
      "1a4f31a6368d651222683c9debe7d6832db6f607",
      "d37c406e69cb6689baa2fb7964bad75209703724"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1a4f31a6368d651222683c9debe7d6832db6f607",
      "commit_date": "2022-01-14T13:27:26Z",
      "author": {
        "login": "aplanas",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "secure_mount: use /proc/self/mountinfo",
        "length": 415,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 137,
        "additions": 117,
        "deletions": 20
      },
      "files": [
        {
          "filename": "keylime/secure_mount.py",
          "status": "modified",
          "additions": 36,
          "deletions": 20,
          "patch": "@@ -13,29 +13,45 @@\n \n \n def check_mounted(secdir):\n-    whatsmounted = cmd_exec.run(\"mount\")['retout']\n-    whatsmounted_converted = config.convert(whatsmounted)\n-    for line in whatsmounted_converted:\n-        tokens = line.split()\n-        tmpfs = False\n-        if len(tokens) < 3:\n-            continue\n-        if tokens[0] == 'tmpfs':\n-            tmpfs = True\n-        if tokens[2] == secdir:\n-            if not tmpfs:\n-                logger.error(\"secure storage location %s already mounted \"\n-                             \"on wrong file system type: %s.  Unmount to\"\n-                             \"continue.\", secdir, tokens[0])\n-                raise Exception(\n-                    f\"secure storage location {secdir} already mounted on \"\n-                    f\"wrong file system type: {tokens[0]}.  Unmount to \"\n-                    f\"continue.\")\n+    \"\"\"Inspect mountinfo to detect if a directory is mounted.\"\"\"\n+    secdir_escaped = secdir.replace(\" \", r\"\\040\")\n+    for line in open(\"/proc/self/mountinfo\", \"r\"):\n+        # /proc/[pid]/mountinfo have 10+ elements separated with\n+        # spaces (check proc (5) for a complete description)\n+        #\n+        # At position 7 there are some optional fields, so we need\n+        # first to determine the separator mark, and validate the\n+        # final total number of fields.\n+        elements = line.split()\n+        try:\n+            separator = elements.index(\"-\")\n+        except ValueError:\n+            msg = \"Separator filed not found. \" \\\n+                \"Information line cannot be parsed\"\n+            logger.error(msg)\n+            raise Exception(msg)\n+\n+        if len(elements) < 10 or len(elements) - separator < 4:\n+            msg = \"Mount information line cannot be parsed\"\n+            logger.error(msg)\n+            raise Exception(msg)\n+\n+        mount_point = elements[4]\n+        filesystem_type = elements[separator + 1]\n+        if mount_point == secdir_escaped:\n+            if filesystem_type != \"tmpfs\":\n+                msg = f\"Secure storage location {secdir} already mounted \" \\\n+                    f\"on wrong file system type: {filesystem_type}. \" \\\n+                    \"Unmount to continue.\"\n+                logger.error(msg)\n+                raise Exception(msg)\n \n             logger.debug(\n-                \"secure storage location %s already mounted on tmpfs\" % secdir)\n+                \"Secure storage location %s already mounted on tmpfs\", secdir\n+            )\n             return True\n-    logger.debug(\"secure storage location %s not mounted \" % secdir)\n+\n+    logger.debug(\"Secure storage location %s not mounted\", secdir)\n     return False\n \n "
        },
        {
          "filename": "test/test_secure_mount.py",
          "status": "added",
          "additions": 81,
          "deletions": 0,
          "patch": "@@ -0,0 +1,81 @@\n+import unittest\n+from unittest.mock import patch\n+\n+from keylime import secure_mount\n+\n+\n+class TestSecureMount(unittest.TestCase):\n+\n+    @patch(\"keylime.secure_mount.logger\")\n+    @patch(\"keylime.secure_mount.open\")\n+    def test_check_mounted_not_found(self, open_mock, logger_mock):\n+        \"\"\"Test when secdir is not mounted.\"\"\"\n+        open_mock.return_value = (\n+            \"23 106 0:21 / /proc rw,nosuid,nodev,noexec,relatime shared:26 - proc proc rw\",\n+            )\n+        self.assertFalse(secure_mount.check_mounted(\"/secdir\"))\n+\n+    @patch(\"keylime.secure_mount.logger\")\n+    @patch(\"keylime.secure_mount.open\")\n+    def test_check_mounted_found(self, open_mock, logger_mock):\n+        \"\"\"Test when secdir is mounted.\"\"\"\n+        open_mock.return_value = (\n+            \"23 106 0:21 / /proc rw,nosuid,nodev,noexec,relatime shared:26 - proc proc rw\",\n+            \"303 154 0:69 / /secdir rw,relatime shared:130 - tmpfs tmpfs rw,size=1024k,mode=700,inode64\",\n+            )\n+        self.assertTrue(secure_mount.check_mounted(\"/secdir\"))\n+\n+    @patch(\"keylime.secure_mount.logger\")\n+    @patch(\"keylime.secure_mount.open\")\n+    def test_check_mounted_found_zero_optional_fields(self, open_mock, logger_mock):\n+        \"\"\"Test when secdir is mounted when there are no optional fields.\"\"\"\n+        open_mock.return_value = (\n+            \"23 106 0:21 / /proc rw,nosuid,nodev,noexec,relatime shared:26 - proc proc rw\",\n+            \"303 154 0:69 / /secdir rw,relatime - tmpfs tmpfs rw,size=1024k,mode=700,inode64\",\n+        )\n+        self.assertTrue(secure_mount.check_mounted(\"/secdir\"))\n+\n+    @patch(\"keylime.secure_mount.logger\")\n+    @patch(\"keylime.secure_mount.open\")\n+    def test_check_mounted_found_extra_optional_fields(self, open_mock, logger_mock):\n+        \"\"\"Test when secdir is mounted when there are extra optional fields.\"\"\"\n+        open_mock.return_value = (\n+            \"23 106 0:21 / /proc rw,nosuid,nodev,noexec,relatime shared:26 - proc proc rw\",\n+            \"303 154 0:69 / /secdir rw,relatime shared:130 extra:1 - tmpfs tmpfs rw,size=1024k,mode=700,inode64\",\n+        )\n+        self.assertTrue(secure_mount.check_mounted(\"/secdir\"))\n+\n+    @patch(\"keylime.secure_mount.logger\")\n+    @patch(\"keylime.secure_mount.open\")\n+    def test_check_mounted_found_wrong_fs(self, open_mock, logger_mock):\n+        \"\"\"Test when secdir is mounted but under a wrong fs.\"\"\"\n+        open_mock.return_value = (\n+            \"23 106 0:21 / /proc rw,nosuid,nodev,noexec,relatime shared:26 - proc proc rw\",\n+            \"303 154 0:69 / /secdir rw,relatime shared:130 - btrfs /dev/sda2 rw\",\n+            )\n+        with self.assertRaises(Exception) as e:\n+            secure_mount.check_mounted(\"/secdir\")\n+        self.assertTrue(\"wrong file system\" in str(e.exception))\n+\n+    @patch(\"keylime.secure_mount.logger\")\n+    @patch(\"keylime.secure_mount.open\")\n+    def test_check_mounted_found_spaces(self, open_mock, logger_mock):\n+        \"\"\"Test when secdir is mounted and contains spaces.\"\"\"\n+        open_mock.return_value = (\n+            \"23 106 0:21 / /proc rw,nosuid,nodev,noexec,relatime shared:26 - proc proc rw\",\n+            r\"303 154 0:69 / /sec\\040dir rw,relatime shared:130 - tmpfs tmpfs rw,size=1024k,mode=700,inode64\",\n+            )\n+        self.assertTrue(secure_mount.check_mounted(\"/sec dir\"))\n+\n+    @patch(\"keylime.secure_mount.logger\")\n+    @patch(\"keylime.secure_mount.open\")\n+    def test_check_mounted_wrong_format(self, open_mock, logger_mock):\n+        \"\"\"Test when the mount info lines are wrong.\"\"\"\n+        open_mock.return_value = (\"invalid line\",)\n+        with self.assertRaises(Exception) as e:\n+            secure_mount.check_mounted(\"/secdir\")\n+        self.assertTrue(\"cannot be parsed\" in str(e.exception))\n+\n+\n+if __name__ == \"__main__\":\n+    unittest.main()"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ff927f21120ee59bb66a6f2aefee54b951756732",
            "date": "2025-01-21T09:11:20Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "52144069aab56757799ab379cac31bc77cff59e9",
            "date": "2025-01-08T16:06:13Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "e02e66d88c98f47397fce209d01daff20911afbf",
            "date": "2025-01-08T09:14:27Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "d7089c933b56286650a0f71cd94da5e3c29e6e73",
            "date": "2025-01-17T15:55:19Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "a77290d2d7aa08189edac763d87c19cb35f6eb56",
            "date": "2025-01-13T18:57:41Z",
            "author_login": "ansasaki"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "A flaw was found in Keylime before 6.3.0. The logic in the Keylime agent for checking for a secure mount can be fooled by previously created unprivileged mounts allowing secrets to be leaked to other processes on the host.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-21T19:15:09.893",
    "last_modified": "2024-11-21T06:49:30.730",
    "fix_date": "2022-01-14T13:27:26Z"
  },
  "references": [
    {
      "url": "https://github.com/keylime/keylime/commit/1a4f31a6368d651222683c9debe7d6832db6f607",
      "source": "patrick@puiterwijk.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/commit/d37c406e69cb6689baa2fb7964bad75209703724",
      "source": "patrick@puiterwijk.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/security/advisories/GHSA-wj36-qcfg-5j52",
      "source": "patrick@puiterwijk.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/oss-sec/2022/q1/101",
      "source": "patrick@puiterwijk.org",
      "tags": [
        "Exploit",
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/commit/1a4f31a6368d651222683c9debe7d6832db6f607",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/commit/d37c406e69cb6689baa2fb7964bad75209703724",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/security/advisories/GHSA-wj36-qcfg-5j52",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/oss-sec/2022/q1/101",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.268645",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "keylime",
    "owner": "keylime",
    "created_at": "2016-10-19T13:25:46Z",
    "updated_at": "2025-01-21T14:21:32Z",
    "pushed_at": "2025-01-21T10:27:21Z",
    "size": 15824,
    "stars": 441,
    "forks": 153,
    "open_issues": 42,
    "watchers": 441,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 1407733,
      "Jinja": 185366,
      "Shell": 68927,
      "Dockerfile": 1771,
      "Standard ML": 1202,
      "Mako": 919,
      "Makefile": 138
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:42:23.828474"
  }
}