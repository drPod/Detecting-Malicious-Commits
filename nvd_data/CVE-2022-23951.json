{
  "cve_id": "CVE-2022-23951",
  "github_data": {
    "repository": "keylime/keylime",
    "fix_commit": "6e44758b64b0ee13564fc46e807f4ba98091c355",
    "related_commits": [
      "6e44758b64b0ee13564fc46e807f4ba98091c355",
      "6e44758b64b0ee13564fc46e807f4ba98091c355"
    ],
    "patch_url": "https://github.com/keylime/keylime/commit/6e44758b64b0ee13564fc46e807f4ba98091c355.patch",
    "fix_commit_details": {
      "sha": "6e44758b64b0ee13564fc46e807f4ba98091c355",
      "commit_date": "2022-01-16T15:14:07Z",
      "author": {
        "login": "THS-on",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "tpm: do not compress quote with zlib by default",
        "length": 298,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 43,
        "additions": 29,
        "deletions": 14
      },
      "files": [
        {
          "filename": "keylime/cloud_verifier_common.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -152,7 +152,8 @@ def process_quote_response(agent, json_response, agentAttestState) -> Failure:\n         algorithms.Hash(hash_alg),\n         ima_keyrings,\n         mb_measurement_list,\n-        agent['mb_refstate'])\n+        agent['mb_refstate'],\n+        compressed=(agent['supported_version'] == \"1.0\"))  # TODO: change this to always False after initial update\n     failure.merge(quote_validation_failure)\n \n     if not failure:"
        },
        {
          "filename": "keylime/tenant.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -545,7 +545,9 @@ def validate_tpm_quote(self, public_key, quote, hash_alg):\n             logger.warning(\"AIK not found in registrar, quote not validated\")\n             return False\n \n-        failure = self.tpm_instance.check_quote(AgentAttestState(self.agent_uuid), self.nonce, public_key, quote, self.registrar_data['aik_tpm'], hash_alg=hash_alg)\n+        failure = self.tpm_instance.check_quote(AgentAttestState(self.agent_uuid), self.nonce, public_key, quote,\n+                                                self.registrar_data['aik_tpm'], hash_alg=hash_alg,\n+                                                compressed=(self.supported_version == \"1.0\"))\n         if failure:\n             if self.registrar_data['regcount'] > 1:\n                 logger.error(\"WARNING: This UUID had more than one ek-ekcert registered to it! This might indicate that your system is misconfigured or a malicious host is present. Run 'regdelete' for this agent and restart\")"
        },
        {
          "filename": "keylime/tpm/tpm_abstract.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -158,11 +158,11 @@ def tpm_init(self, self_activate=False, config_pw=None):\n \n     # tpm_quote\n     @abstractmethod\n-    def create_quote(self, nonce, data=None, pcrmask=EMPTYMASK, hash_alg=None):\n+    def create_quote(self, nonce, data=None, pcrmask=EMPTYMASK, hash_alg=None, compress=False):\n         pass\n \n     @abstractmethod\n-    def check_quote(self, agentAttestState, nonce, data, quote, aikTpmFromRegistrar, tpm_policy={}, ima_measurement_list=None, allowlist={}, hash_alg=None, ima_keyrings=None, mb_measurement_list=None, mb_refstate=None):\n+    def check_quote(self, agentAttestState, nonce, data, quote, aikTpmFromRegistrar, tpm_policy={}, ima_measurement_list=None, allowlist={}, hash_alg=None, ima_keyrings=None, mb_measurement_list=None, mb_refstate=None, compressed=False):\n         pass\n \n     def START_HASH(self, algorithm=None):"
        },
        {
          "filename": "keylime/tpm/tpm_main.py",
          "status": "modified",
          "additions": 22,
          "deletions": 10,
          "patch": "@@ -959,7 +959,7 @@ def __pcr_mask_to_list(mask):\n                 pcr_list.append(str(pcr))\n         return \",\".join(pcr_list)\n \n-    def create_quote(self, nonce, data=None, pcrmask=tpm_abstract.AbstractTPM.EMPTYMASK, hash_alg=None):\n+    def create_quote(self, nonce, data=None, pcrmask=tpm_abstract.AbstractTPM.EMPTYMASK, hash_alg=None, compress=False):\n         if hash_alg is None:\n             hash_alg = self.defaults['hash']\n \n@@ -992,11 +992,15 @@ def create_quote(self, nonce, data=None, pcrmask=tpm_abstract.AbstractTPM.EMPTYM\n                     command = [\"tpm2_quote\", \"-c\", keyhandle, \"-l\", \"%s:%s\" % (hash_alg, pcrlist), \"-q\", nonce, \"-m\", quotepath.name, \"-s\", sigpath.name, \"-o\", pcrpath.name, \"-g\", hash_alg, \"-p\", aik_pw]\n                 retDict = self.__run(command, lock=False, outputpaths=[quotepath.name, sigpath.name, pcrpath.name])\n                 quoteraw = retDict['fileouts'][quotepath.name]\n-                quote_b64encode = base64.b64encode(zlib.compress(quoteraw))\n                 sigraw = retDict['fileouts'][sigpath.name]\n-                sigraw_b64encode = base64.b64encode(zlib.compress(sigraw))\n                 pcrraw = retDict['fileouts'][pcrpath.name]\n-                pcrraw_b64encode = base64.b64encode(zlib.compress(pcrraw))\n+                if compress:\n+                    quoteraw = zlib.compress(quoteraw)\n+                    sigraw = zlib.compress(sigraw)\n+                    pcrraw = zlib.compress(pcrraw)\n+                quote_b64encode = base64.b64encode(quoteraw)\n+                sigraw_b64encode = base64.b64encode(sigraw)\n+                pcrraw_b64encode = base64.b64encode(pcrraw)\n                 quote = quote_b64encode.decode('utf-8') + \":\" + sigraw_b64encode.decode('utf-8') + \":\" + pcrraw_b64encode.decode('utf-8')\n \n         return 'r' + quote\n@@ -1018,12 +1022,13 @@ def __tpm2_checkquote(self, pubaik, nonce, quoteFile, sigFile, pcrFile, hash_alg\n         retDict = self.__run(command, lock=False)\n         return retDict\n \n-    def _tpm2_checkquote(self, aikTpmFromRegistrar, quote, nonce, hash_alg):\n+    def _tpm2_checkquote(self, aikTpmFromRegistrar, quote, nonce, hash_alg, compressed):\n         \"\"\"Write the files from data returned from tpm2_quote for running tpm2_checkquote\n         :param aikTpmFromRegistrar: AIK used to generate the quote and is needed for verifying it now.\n         :param quote: quote data in the format 'r<b64-compressed-quoteblob>:<b64-compressed-sigblob>:<b64-compressed-pcrblob>\n         :param nonce: nonce that was used to create the quote\n         :param hash_alg: the hash algorithm that was used\n+        :param compressed: if the quote data is compressed with zlib or not\n         :returns: Returns the 'retout' from running tpm2_checkquote and True in case of success, None and False in case of error.\n         This function throws an Exception on bad input.\n         \"\"\"\n@@ -1042,9 +1047,16 @@ def _tpm2_checkquote(self, aikTpmFromRegistrar, quote, nonce, hash_alg):\n         if len(quote_tokens) < 3:\n             raise Exception(\"Quote is not compound! %s\" % quote)\n \n-        quoteblob = zlib.decompress(base64.b64decode(quote_tokens[0]))\n-        sigblob = zlib.decompress(base64.b64decode(quote_tokens[1]))\n-        pcrblob = zlib.decompress(base64.b64decode(quote_tokens[2]))\n+        quoteblob = base64.b64decode(quote_tokens[0])\n+        sigblob = base64.b64decode(quote_tokens[1])\n+        pcrblob = base64.b64decode(quote_tokens[2])\n+\n+        if compressed:\n+            logger.warning(\"Decompressing quote data which is unsafe!\")\n+            quoteblob = zlib.decompress(quoteblob)\n+            sigblob = zlib.decompress(sigblob)\n+            pcrblob = zlib.decompress(pcrblob)\n+\n \n         qfd = sfd = pfd = afd = -1\n         quoteFile = None\n@@ -1100,12 +1112,12 @@ def _tpm2_checkquote(self, aikTpmFromRegistrar, quote, nonce, hash_alg):\n \n     def check_quote(self, agentAttestState, nonce, data, quote, aikTpmFromRegistrar, tpm_policy={},\n                     ima_measurement_list=None, allowlist={}, hash_alg=None, ima_keyrings=None,\n-                    mb_measurement_list=None, mb_refstate=None) -> Failure:\n+                    mb_measurement_list=None, mb_refstate=None, compressed=False) -> Failure:\n         failure = Failure(Component.QUOTE_VALIDATION)\n         if hash_alg is None:\n             hash_alg = self.defaults['hash']\n \n-        retout, success = self._tpm2_checkquote(aikTpmFromRegistrar, quote, nonce, hash_alg)\n+        retout, success = self._tpm2_checkquote(aikTpmFromRegistrar, quote, nonce, hash_alg, compressed)\n         if not success:\n             # If the quote validation fails we will skip all other steps therefore this failure is irrecoverable.\n             failure.add_event(\"quote_validation\", {\"message\": \"Quote validation using tpm2-tools\", \"data\": retout}, False)"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7acb977f46355cd56495316733f622c7937a9e03",
            "date": "2025-01-06T15:32:59Z",
            "author_login": "sergio-correia"
          },
          {
            "sha": "f832ad542b169902949f350fb03f3e4354201b3b",
            "date": "2024-12-18T19:45:24Z",
            "author_login": "sergio-correia"
          },
          {
            "sha": "29ddc5d047a889da10e58df6b6b11c13f3463b1e",
            "date": "2025-01-02T09:27:25Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "5756729b8a5ff6b15ac4af4a1a90a5a551b46291",
            "date": "2024-12-20T16:54:24Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "c366e821b0f6cda3a7459a40d9a5199b5b245eaf",
            "date": "2024-12-23T10:27:03Z",
            "author_login": "ansasaki"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "In Keylime before 6.3.0, quote responses from the agent can contain possibly untrusted ZIP data which can lead to zip bombs.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-21T19:15:10.240",
    "last_modified": "2024-11-21T06:49:31.123",
    "fix_date": "2022-01-16T15:14:07Z"
  },
  "references": [
    {
      "url": "https://github.com/keylime/keylime/commit/6e44758b64b0ee13564fc46e807f4ba98091c355",
      "source": "patrick@puiterwijk.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/security/advisories/GHSA-6xx7-m45w-76m2",
      "source": "patrick@puiterwijk.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/oss-sec/2022/q1/101",
      "source": "patrick@puiterwijk.org",
      "tags": [
        "Exploit",
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/commit/6e44758b64b0ee13564fc46e807f4ba98091c355",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/security/advisories/GHSA-6xx7-m45w-76m2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/oss-sec/2022/q1/101",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.269130",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "keylime",
    "owner": "keylime",
    "created_at": "2016-10-19T13:25:46Z",
    "updated_at": "2025-01-12T12:34:11Z",
    "pushed_at": "2025-01-09T12:26:20Z",
    "size": 15805,
    "stars": 438,
    "forks": 153,
    "open_issues": 34,
    "watchers": 438,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 1433962,
      "Jinja": 185366,
      "Shell": 68786,
      "Dockerfile": 1771,
      "Standard ML": 1202,
      "Mako": 919,
      "Makefile": 138
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:30:01.325109"
  }
}