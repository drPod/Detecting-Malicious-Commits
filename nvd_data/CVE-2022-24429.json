{
  "cve_id": "CVE-2022-24429",
  "github_data": {
    "repository": "neocotic/convert-svg",
    "fix_commit": "a43dffaab0f1e419d5be84e2e7356b86ffac3cf1",
    "related_commits": [
      "a43dffaab0f1e419d5be84e2e7356b86ffac3cf1",
      "a43dffaab0f1e419d5be84e2e7356b86ffac3cf1"
    ],
    "patch_url": "https://github.com/neocotic/convert-svg/commit/a43dffaab0f1e419d5be84e2e7356b86ffac3cf1.patch",
    "fix_commit_details": {
      "sha": "a43dffaab0f1e419d5be84e2e7356b86ffac3cf1",
      "commit_date": "2022-06-06T10:45:30Z",
      "author": {
        "login": "neocotic",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Remove all disallowed SVG element attributes",
        "length": 373,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 222,
        "additions": 171,
        "deletions": 51
      },
      "files": [
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -18,6 +18,9 @@\n     \"outdated:packages\": \"lerna exec --stream --no-bail \\\"npm outdated\\\"\",\n     \"publish:packages\": \"lerna publish from-package\",\n     \"test\": \"mocha -O maxDiffSize=32 -R list \\\"packages/*/test/**/*.spec.js\\\"\",\n+    \"test:jpeg\": \"npm test -- --grep convert-svg-to-jpeg\",\n+    \"test:png\": \"npm test -- --grep convert-svg-to-png\",\n+    \"test:webp\": \"npm test -- --grep convert-svg-to-webp\",\n     \"verify\": \"npm run bootstrap && npm run lint && npm test\",\n     \"version:packages\": \"lerna version --no-git-tag-version --no-push\"\n   },"
        },
        {
          "filename": "packages/convert-svg-core/README.md",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -35,13 +35,13 @@ you can contribute.\n \n ## Implementation\n \n-In order to create a new SVG converter that uses `convert-svg-core`, you'll need to create a new sub-directory for your\n+In order to create a new SVG converter that uses `convert-svg-core`, you'll need to create a new subdirectory for your\n package under the [packages](https://github.com/neocotic/convert-svg/tree/main/packages) directory. Try to follow the\n `convert-svg-to-<FORMAT>` naming convention for the converter package name.\n \n-Take a look at the other packages in this directory to setup the new package directory. They are all very similar, by\n-design, as the you should just need to provide the minimal amount of information required to support your intended\n-output format.\n+Take a look at the other packages in this directory to set up the new package directory. They are all very similar, by\n+design, as you should just need to provide the minimal amount of information required to support your intended output\n+format.\n \n The most important thing that's needed is a implementation of\n [convert-svg-core/src/Provider](https://github.com/neocotic/convert-svg/blob/main/packages/convert-svg-core/src/Provider.js).\n@@ -63,7 +63,7 @@ const MyFormatProvider = require('./MyFormatProvider');\n module.exports = new API(new MyFormatProvider());\n ```  \n \n-Configure this in your `package.json` file and you're API is ready!\n+Configure this in your `package.json` file and your API is ready!\n \n ### CLI\n \n@@ -95,7 +95,7 @@ Make sure that your file is executable. For example;\n $ chmod a+x bin/<PACKAGE-NAME>\n ```\n \n-Configure this in your `package.json` file and you're CLI is ready!\n+Configure this in your `package.json` file and your CLI is ready!\n \n ## Testing\n "
        },
        {
          "filename": "packages/convert-svg-core/src/Converter.js",
          "status": "modified",
          "additions": 96,
          "deletions": 6,
          "patch": "@@ -35,12 +35,15 @@ const util = require('util');\n const readFile = util.promisify(fs.readFile);\n const writeFile = util.promisify(fs.writeFile);\n \n+const _allowedAttributeNames = Symbol('allowedAttributeNames');\n+const _allowedDeprecatedAttributeNames = Symbol('allowedDeprecatedAttributeNames');\n const _browser = Symbol('browser');\n const _convert = Symbol('convert');\n const _destroyed = Symbol('destroyed');\n const _getDimensions = Symbol('getDimensions');\n const _getPage = Symbol('getPage');\n const _getTempFile = Symbol('getTempFile');\n+const _isAttributeAllowed = Symbol('isAttributeAllowed');\n const _options = Symbol('options');\n const _page = Symbol('page');\n const _parseOptions = Symbol('parseOptions');\n@@ -63,8 +66,8 @@ const _validate = Symbol('validate');\n  * it to convert a collection of SVG files to files in another format and then destroy it afterwards. It's not\n  * recommended to keep an instance around for too long, as it will use up resources.\n  *\n- * Due constraints within Chromium, the SVG input is first written to a temporary HTML file and then navigated to. This\n- * is because the default page for Chromium is using the <code>chrome</code> protocol so cannot load externally\n+ * Due to constraints within Chromium, the SVG input is first written to a temporary HTML file and then navigated to.\n+ * This is because the default page for Chromium is using the <code>chrome</code> protocol so cannot load externally\n  * referenced files (e.g. that use the <code>file</code> protocol). This temporary file is reused for the lifespan of\n  * each {@link Converter} instance and will be deleted when it is destroyed.\n  *\n@@ -86,18 +89,82 @@ class Converter {\n   constructor(provider, options) {\n     this[_provider] = provider;\n     this[_options] = Object.assign({}, options);\n+    this[_allowedAttributeNames] = new Set([\n+      // Core\n+      'height',\n+      'preserveAspectRatio',\n+      'viewBox',\n+      'width',\n+      'x',\n+      'xmlns',\n+      'y',\n+      // Conditional Processing\n+      'requiredExtensions',\n+      'systemLanguage',\n+      // Presentation\n+      'clip-path',\n+      'clip-rule',\n+      'color',\n+      'color-interpolation',\n+      'cursor',\n+      'display',\n+      'fill',\n+      'fill-opacity',\n+      'fill-rule',\n+      'filter',\n+      'mask',\n+      'opacity',\n+      'overflow',\n+      'pointer-events',\n+      'shape-rendering',\n+      'stroke',\n+      'stroke-dasharray',\n+      'stroke-dashoffset',\n+      'stroke-linecap',\n+      'stroke-linejoin',\n+      'stroke-miterlimit',\n+      'stroke-opacity',\n+      'stroke-width',\n+      'style',\n+      'transform',\n+      'vector-effect',\n+      'visibility',\n+      // XML\n+      'xml:lang',\n+      'xmlns',\n+      'xmlns:xlink'\n+    ]);\n+    this[_allowedDeprecatedAttributeNames] = new Set([\n+      // Core\n+      'baseProfile',\n+      'version',\n+      'zoomAndPan',\n+      // Conditional Processing\n+      'requiredFeatures',\n+      // Presentation\n+      'clip',\n+      'color-rendering',\n+      'enable-background',\n+      // XML\n+      'xml:base',\n+      'xml:space'\n+    ]);\n     this[_destroyed] = false;\n   }\n \n   /**\n    * Converts the specified <code>input</code> SVG into another format using the <code>options</code> provided.\n    *\n-   * <code>input</code> can either be a SVG buffer or string.\n+   * <code>input</code> can either be an SVG buffer or string.\n    *\n    * If the width and/or height cannot be derived from <code>input</code> then they must be provided via their\n    * corresponding options. This method attempts to derive the dimensions from <code>input</code> via any\n    * <code>width</code>/<code>height</code> attributes or its calculated <code>viewBox</code> attribute.\n    *\n+   * Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG\n+   * before being converted. This includes deprecated attributes unless the <code>allowDeprecatedAttributes</code>\n+   * option is disabled. This is primarily for security purposes to ensure that malicious code cannot be injected.\n+   *\n    * This method is resolved with the converted output buffer.\n    *\n    * An error will occur if this {@link Converter} has been destroyed, both the <code>baseFile</code> and\n@@ -129,6 +196,10 @@ class Converter {\n    * options. This method attempts to derive the dimensions from the input file via any\n    * <code>width</code>/<code>height</code> attributes or its calculated <code>viewBox</code> attribute.\n    *\n+   * Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG\n+   * before being converted. This includes deprecated attributes unless the <code>allowDeprecatedAttributes</code>\n+   * option is disabled. This is primarily for security purposes to ensure that malicious code cannot be injected.\n+   *\n    * This method is resolved with the path of the converted output file for reference.\n    *\n    * An error will occur if this {@link Converter} has been destroyed, both the <code>baseFile</code> and\n@@ -190,7 +261,7 @@ class Converter {\n     input = Buffer.isBuffer(input) ? input.toString('utf8') : input;\n \n     const { provider } = this;\n-    const svg = cheerio.default.html(this[_sanitize](cheerio.load(input, null, false)('svg')));\n+    const svg = cheerio.default.html(this[_sanitize](cheerio.load(input, null, false)('svg'), options));\n \n     if (!svg) {\n       throw new Error('SVG element not found in input. Check the SVG input');\n@@ -321,6 +392,11 @@ html { background-color: ${provider.getBackgroundColor(options)}; }\n     });\n   }\n \n+  [_isAttributeAllowed](attributeName, options) {\n+    return this[_allowedAttributeNames].has(attributeName) ||\n+      (options.allowDeprecatedAttributes && this[_allowedDeprecatedAttributeNames].has(attributeName));\n+  }\n+\n   [_parseOptions](options, inputFilePath) {\n     options = Object.assign({}, options);\n \n@@ -334,6 +410,10 @@ html { background-color: ${provider.getBackgroundColor(options)}; }\n       options.outputFilePath = path.join(outputDirPath, outputFileName);\n     }\n \n+    if (typeof options.allowDeprecatedAttributes !== 'boolean') {\n+      options.allowDeprecatedAttributes = true;\n+    }\n+\n     if (options.baseFile != null && options.baseUrl != null) {\n       throw new Error('Both baseFile and baseUrl options specified. Use only one');\n     }\n@@ -385,8 +465,16 @@ html { background-color: ${provider.getBackgroundColor(options)}; }\n     };\n   }\n \n-  [_sanitize](svg) {\n-    return svg.removeAttr('onload');\n+  [_sanitize](svg, options) {\n+    const attributeNames = Object.keys(svg.attr() || {});\n+\n+    for (const attributeName of attributeNames) {\n+      if (!this[_isAttributeAllowed](attributeName, options)) {\n+        svg.removeAttr(attributeName);\n+      }\n+    }\n+\n+    return svg;\n   }\n \n   async [_setDimensions](page, dimensions) {\n@@ -457,6 +545,8 @@ module.exports = Converter;\n  * The options that can be passed to {@link Converter#convert}.\n  *\n  * @typedef {Object} Converter~ConvertOptions\n+ * @property {boolean} [allowDeprecatedAttributes=true] - Whether deprecated SVG element attributes should be retained\n+ * in the SVG during conversion.\n  * @property {string} [background] - The background color to be used to fill transparent regions within the SVG. If\n  * omitted, the {@link Provider} will determine the default background color.\n  * @property {string} [baseFile] - The path of the file to be converted into a file URL to use for all relative URLs"
        },
        {
          "filename": "packages/convert-svg-test-helper/src/fixtures/input/data-url-font.svg",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" viewPort=\"0 0 1000 1000\">\n+<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\">\n     <circle cx=\"230\" cy=\"230\" r=\"230\" fill=\"#E91E63\" />\n     <text x=\"230\" y=\"235\" alignment-baseline=\"central\" text-anchor=\"middle\" fill=\"#fff\" font-size=\"275\" font-weight=\"100\" font-family=\"Roboto\">X</text>\n     <defs>"
        },
        {
          "filename": "packages/convert-svg-test-helper/src/fixtures/input/viewbox-only-2.svg",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n-<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 99.864\" enable-background=\"new 0 0 100 99.864\" xml:space=\"preserve\">\n+<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 99.864\" style=\"enable-background: new 0 0 100 99.864\" xml:space=\"preserve\">\n   <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"#808080\"/>\n   <path fill=\"#231F20\" d=\"M83.713,63.42c-0.307-1.176-0.998-2.188-1.795-3.023c0.539-2.354,0.832-4.801,0.832-7.314\n   C77.318,54.467,77.18,55.815,76.98,57.143\"></path>"
        },
        {
          "filename": "packages/convert-svg-test-helper/src/fixtures/input/width-height-viewbox-2.svg",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n <!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n-\t width=\"100px\" height=\"100px\" viewBox=\"206 206 100 100\" enable-background=\"new 206 206 100 100\" xml:space=\"preserve\">\n+\t width=\"100px\" height=\"100px\" viewBox=\"206 206 100 100\" style=\"enable-background: new 206 206 100 100\" xml:space=\"preserve\">\n <path id=\"check-mark-3-icon\" d=\"M256,206c-27.614,0-50,22.386-50,50s22.386,50,50,50s50-22.386,50-50S283.614,206,256,206z\n \t M247.493,282.932l-23.623-23.629l10.058-10.06l13.564,13.568l31.315-31.315l10.063,10.056L247.493,282.932z\"/>\n </svg>"
        },
        {
          "filename": "packages/convert-svg-test-helper/src/fixtures/input/width-height-viewbox-3.svg",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n <!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n-     width=\"148px\" height=\"35px\" viewBox=\"0.3 0 148 35\" enable-background=\"new 0.3 0 148 35\" xml:space=\"preserve\">\n+     width=\"148px\" height=\"35px\" viewBox=\"0.3 0 148 35\" style=\"enable-background: new 0.3 0 148 35\" xml:space=\"preserve\">\n <g>\n     <g>\n         <path fill=\"#2AB098\" d=\"M25.9,17.7c0-3.3-2.7-6-6-6s-6,2.7-6,6s2.7,6,6,6S25.9,21,25.9,17.7 M20,27.2c-5.3,0-9.6-4.3-9.6-9.6"
        },
        {
          "filename": "packages/convert-svg-test-helper/src/fixtures/input/width-height-viewbox.svg",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n <!-- Generator: Adobe Illustrator 14.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 43363)  -->\n <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n-\t width=\"505px\" height=\"505px\" viewBox=\"0 0 505 505\" enable-background=\"new 0 0 505 505\" xml:space=\"preserve\">\n+\t width=\"505px\" height=\"505px\" viewBox=\"0 0 505 505\" style=\"enable-background: new 0 0 505 505\" xml:space=\"preserve\">\n <rect y=\"0.498\" fill=\"#FBDE34\" width=\"504.67\" height=\"504.442\"/>\n <g>\n \t<path fill=\"#524739\" d=\"M217.503,388.691v14.757h-16.155v39.766c0,3.729,0.621,6.214,1.864,7.457"
        },
        {
          "filename": "packages/convert-svg-to-jpeg/README.md",
          "status": "modified",
          "additions": 21,
          "deletions": 12,
          "patch": "@@ -67,30 +67,35 @@ The CLI can be used in the following ways:\n \n Converts the specified `input` SVG into a JPEG using the `options` provided via a headless Chromium instance.\n \n-`input` can either be a SVG buffer or string.\n+`input` can either be an SVG buffer or string.\n \n If the width and/or height cannot be derived from `input` then they must be provided via their corresponding options.\n This method attempts to derive the dimensions from `input` via any `width`/`height` attributes or its calculated\n `viewBox` attribute.\n \n+Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG before\n+being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is disabled. This is\n+primarily for security purposes to ensure that malicious code cannot be injected.\n+\n This method is resolved with the JPEG output buffer.\n \n An error will occur if both the `baseFile` and `baseUrl` options have been provided, `input` does not contain an SVG\n element or no `width` and/or `height` options were provided and this information could not be derived from `input`.\n \n #### Options\n \n-| Option       | Type                   | Default                 | Description                                                                                                                                                      |\n-|--------------|------------------------|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| `background` | String                 | N/A                     | Background color to be used to fill transparent regions within the SVG. White will be used if omitted.                                                           |\n-| `baseFile`   | String                 | N/A                     | Path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseUrl` option. |\n-| `baseUrl`    | String                 | `\"file:///path/to/cwd\"` | Base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseFile` option.                                        |\n-| `height`     | Number/String          | N/A                     | Height of the output to be generated. Derived from SVG input if omitted.                                                                                         |\n-| `puppeteer`  | Object                 | N/A                     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance.                                                               |\n-| `quality`    | Number                 | `100`                   | Quality of the output to be generated.                                                                                                                           |\n-| `rounding`   | `ceil`/`floor`/`round` | `\"round\"`               | Type of rounding to be applied to the width and height.                                                                                                          |\n-| `scale`      | Number                 | `1`                     | Scale to be applied to the width and height (specified as options or derived).                                                                                   |\n-| `width`      | Number/String          | N/A                     | Width of the output to be generated. Derived from SVG input if omitted.                                                                                          |\n+| Option                      | Type                   | Default                 | Description                                                                                                                                                      |\n+|-----------------------------|------------------------|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `allowDeprecatedAttributes` | Boolean                | `true`                  | Whether deprecated SVG element attributes should be retained in the SVG during conversion.                                                                       |\n+| `background`                | String                 | N/A                     | Background color to be used to fill transparent regions within the SVG. White will be used if omitted.                                                           |\n+| `baseFile`                  | String                 | N/A                     | Path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseUrl` option. |\n+| `baseUrl`                   | String                 | `\"file:///path/to/cwd\"` | Base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseFile` option.                                        |\n+| `height`                    | Number/String          | N/A                     | Height of the output to be generated. Derived from SVG input if omitted.                                                                                         |\n+| `puppeteer`                 | Object                 | N/A                     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance.                                                               |\n+| `quality`                   | Number                 | `100`                   | Quality of the output to be generated.                                                                                                                           |\n+| `rounding`                  | `ceil`/`floor`/`round` | `\"round\"`               | Type of rounding to be applied to the width and height.                                                                                                          |\n+| `scale`                     | Number                 | `1`                     | Scale to be applied to the width and height (specified as options or derived).                                                                                   |\n+| `width`                     | Number/String          | N/A                     | Width of the output to be generated. Derived from SVG input if omitted.                                                                                          |\n \n The `puppeteer` option is not available when calling this method on a `Converter` instance created using\n `createConverter`.\n@@ -123,6 +128,10 @@ If the width and/or height cannot be derived from the input file then they must\n options. This method attempts to derive the dimensions from the input file via any `width`/`height` attributes or its\n calculated `viewBox` attribute.\n \n+Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG before\n+being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is disabled. This is\n+primarily for security purposes to ensure that malicious code cannot be injected.\n+\n This method is resolved with the path of the JPEG output file for reference.\n \n An error will occur if both the `baseFile` and `baseUrl` options have been provided, the input file does not contain an"
        },
        {
          "filename": "packages/convert-svg-to-jpeg/test/fixtures/expected/20.jpeg",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "packages/convert-svg-to-png/README.md",
          "status": "modified",
          "additions": 20,
          "deletions": 11,
          "patch": "@@ -66,29 +66,34 @@ The CLI can be used in the following ways:\n \n Converts the specified `input` SVG into a PNG using the `options` provided via a headless Chromium instance.\n \n-`input` can either be a SVG buffer or string.\n+`input` can either be an SVG buffer or string.\n \n If the width and/or height cannot be derived from `input` then they must be provided via their corresponding options.\n This method attempts to derive the dimensions from `input` via any `width`/`height` attributes or its calculated\n `viewBox` attribute.\n \n+Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG before\n+being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is disabled. This is\n+primarily for security purposes to ensure that malicious code cannot be injected.\n+\n This method is resolved with the PNG output buffer.\n \n An error will occur if both the `baseFile` and `baseUrl` options have been provided, `input` does not contain an SVG\n element or no `width` and/or `height` options were provided and this information could not be derived from `input`.\n \n #### Options\n \n-| Option       | Type                   | Default                 | Description                                                                                                                                                      |\n-|--------------|------------------------|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| `background` | String                 | N/A                     | Background color to be used to fill transparent regions within the SVG. Will remain transparent if omitted.                                                      |\n-| `baseFile`   | String                 | N/A                     | Path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseUrl` option. |\n-| `baseUrl`    | String                 | `\"file:///path/to/cwd\"` | Base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseFile` option.                                        |\n-| `height`     | Number/String          | N/A                     | Height of the output to be generated. Derived from SVG input if omitted.                                                                                         |\n-| `puppeteer`  | Object                 | N/A                     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance.                                                               |\n-| `rounding`   | `ceil`/`floor`/`round` | `\"round\"`               | Type of rounding to be applied to the width and height.                                                                                                          |\n-| `scale`      | Number                 | `1`                     | Scale to be applied to the width and height (specified as options or derived).                                                                                   |\n-| `width`      | Number/String          | N/A                     | Width of the output to be generated. Derived from SVG input if omitted.                                                                                          |\n+| Option                      | Type                   | Default                 | Description                                                                                                                                                      |\n+|-----------------------------|------------------------|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `allowDeprecatedAttributes` | Boolean                | `true`                  | Whether deprecated SVG element attributes should be retained in the SVG during conversion.                                                                       |\n+| `background`                | String                 | N/A                     | Background color to be used to fill transparent regions within the SVG. Will remain transparent if omitted.                                                      |\n+| `baseFile`                  | String                 | N/A                     | Path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseUrl` option. |\n+| `baseUrl`                   | String                 | `\"file:///path/to/cwd\"` | Base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseFile` option.                                        |\n+| `height`                    | Number/String          | N/A                     | Height of the output to be generated. Derived from SVG input if omitted.                                                                                         |\n+| `puppeteer`                 | Object                 | N/A                     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance.                                                               |\n+| `rounding`                  | `ceil`/`floor`/`round` | `\"round\"`               | Type of rounding to be applied to the width and height.                                                                                                          |\n+| `scale`                     | Number                 | `1`                     | Scale to be applied to the width and height (specified as options or derived).                                                                                   |\n+| `width`                     | Number/String          | N/A                     | Width of the output to be generated. Derived from SVG input if omitted.                                                                                          |\n \n The `puppeteer` option is not available when calling this method on a `Converter` instance created using\n `createConverter`.\n@@ -121,6 +126,10 @@ If the width and/or height cannot be derived from the input file then they must\n options. This method attempts to derive the dimensions from the input file via any `width`/`height` attributes or its\n calculated `viewBox` attribute.\n \n+Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG before\n+being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is disabled. This is\n+primarily for security purposes to ensure that malicious code cannot be injected.\n+\n This method is resolved with the path of the PNG output file for reference.\n \n An error will occur if both the `baseFile` and `baseUrl` options have been provided, the input file does not contain an"
        },
        {
          "filename": "packages/convert-svg-to-png/test/fixtures/expected/20.png",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "packages/convert-svg-to-webp/README.md",
          "status": "modified",
          "additions": 20,
          "deletions": 11,
          "patch": "@@ -66,29 +66,34 @@ The CLI can be used in the following ways:\n \n Converts the specified `input` SVG into a WEBP using the `options` provided via a headless Chromium instance.\n \n-`input` can either be a SVG buffer or string.\n+`input` can either be an SVG buffer or string.\n \n If the width and/or height cannot be derived from `input` then they must be provided via their corresponding options.\n This method attempts to derive the dimensions from `input` via any `width`/`height` attributes or its calculated\n `viewBox` attribute.\n \n+Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG before\n+being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is disabled. This is\n+primarily for security purposes to ensure that malicious code cannot be injected.\n+\n This method is resolved with the WEBP output buffer.\n \n An error will occur if both the `baseFile` and `baseUrl` options have been provided, `input` does not contain an SVG\n element or no `width` and/or `height` options were provided and this information could not be derived from `input`.\n \n #### Options\n \n-| Option       | Type                   | Default                 | Description                                                                                                                                                      |\n-|--------------|------------------------|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n-| `background` | String                 | N/A                     | Background color to be used to fill transparent regions within the SVG. Will remain transparent if omitted.                                                      |\n-| `baseFile`   | String                 | N/A                     | Path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseUrl` option. |\n-| `baseUrl`    | String                 | `\"file:///path/to/cwd\"` | Base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseFile` option.                                        |\n-| `height`     | Number/String          | N/A                     | Height of the output to be generated. Derived from SVG input if omitted.                                                                                         |\n-| `puppeteer`  | Object                 | N/A                     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance.                                                               |\n-| `rounding`   | `ceil`/`floor`/`round` | `\"round\"`               | Type of rounding to be applied to the width and height.                                                                                                          |\n-| `scale`      | Number                 | `1`                     | Scale to be applied to the width and height (specified as options or derived).                                                                                   |\n-| `width`      | Number/String          | N/A                     | Width of the output to be generated. Derived from SVG input if omitted.                                                                                          |\n+| Option                      | Type                   | Default                 | Description                                                                                                                                                      |\n+|-----------------------------|------------------------|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `allowDeprecatedAttributes` | Boolean                | `true`                  | Whether deprecated SVG element attributes should be retained in the SVG during conversion.                                                                       |\n+| `background`                | String                 | N/A                     | Background color to be used to fill transparent regions within the SVG. Will remain transparent if omitted.                                                      |\n+| `baseFile`                  | String                 | N/A                     | Path of the file to be converted into a file URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseUrl` option. |\n+| `baseUrl`                   | String                 | `\"file:///path/to/cwd\"` | Base URL to use for all relative URLs contained within the SVG. Cannot be used in conjunction with the `baseFile` option.                                        |\n+| `height`                    | Number/String          | N/A                     | Height of the output to be generated. Derived from SVG input if omitted.                                                                                         |\n+| `puppeteer`                 | Object                 | N/A                     | Options that are to be passed directly to `puppeteer.launch` when creating the `Browser` instance.                                                               |\n+| `rounding`                  | `ceil`/`floor`/`round` | `\"round\"`               | Type of rounding to be applied to the width and height.                                                                                                          |\n+| `scale`                     | Number                 | `1`                     | Scale to be applied to the width and height (specified as options or derived).                                                                                   |\n+| `width`                     | Number/String          | N/A                     | Width of the output to be generated. Derived from SVG input if omitted.                                                                                          |\n \n The `puppeteer` option is not available when calling this method on a `Converter` instance created using\n `createConverter`.\n@@ -121,6 +126,10 @@ If the width and/or height cannot be derived from the input file then they must\n options. This method attempts to derive the dimensions from the input file via any `width`/`height` attributes or its\n calculated `viewBox` attribute.\n \n+Only standard SVG element attributes (excl. event attributes) are allowed and others are stripped from the SVG before\n+being converted. This includes deprecated attributes unless the `allowDeprecatedAttributes` option is disabled. This is\n+primarily for security purposes to ensure that malicious code cannot be injected.\n+\n This method is resolved with the path of the WEBP output file for reference.\n \n An error will occur if both the `baseFile` and `baseUrl` options have been provided, the input file does not contain an"
        },
        {
          "filename": "packages/convert-svg-to-webp/test/fixtures/expected/20.webp",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 8,
        "unique_directories": 10,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "063ad00149f42a260ba1d0e13ce81c4a23683e30",
            "date": "2022-06-07T11:03:38Z",
            "author_login": "neocotic"
          },
          {
            "sha": "2bbc498c5029238637206661dbac9e44d37d17c5",
            "date": "2022-06-07T09:14:34Z",
            "author_login": "neocotic"
          },
          {
            "sha": "faef02a13d61cc511d23689902f33edba00cae5b",
            "date": "2022-06-06T11:03:07Z",
            "author_login": "neocotic"
          },
          {
            "sha": "a43dffaab0f1e419d5be84e2e7356b86ffac3cf1",
            "date": "2022-06-06T10:45:30Z",
            "author_login": "neocotic"
          },
          {
            "sha": "ebd2ad630ba0ad54f54de93e142a7a8f91e9e0f2",
            "date": "2022-05-29T16:14:56Z",
            "author_login": "neocotic"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-94",
    "description": "The package convert-svg-core before 0.6.3 are vulnerable to Arbitrary Code Injection when using a specially crafted SVG file. An attacker can read arbitrary files from the file system and then show the file content as a converted PNG file.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-10T20:15:08.067",
    "last_modified": "2024-11-21T06:50:24.337",
    "fix_date": "2022-06-06T10:45:30Z"
  },
  "references": [
    {
      "url": "https://github.com/neocotic/convert-svg/commit/a43dffaab0f1e419d5be84e2e7356b86ffac3cf1",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/neocotic/convert-svg/issues/84",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-CONVERTSVGCORE-2859212",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/neocotic/convert-svg/commit/a43dffaab0f1e419d5be84e2e7356b86ffac3cf1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/neocotic/convert-svg/issues/84",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-CONVERTSVGCORE-2859212",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.429368",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "convert-svg",
    "owner": "neocotic",
    "created_at": "2017-10-17T20:20:30Z",
    "updated_at": "2025-01-06T11:00:42Z",
    "pushed_at": "2024-06-17T12:04:28Z",
    "size": 6585,
    "stars": 199,
    "forks": 47,
    "open_issues": 26,
    "watchers": 199,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 104777
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:17:52.205341"
  }
}