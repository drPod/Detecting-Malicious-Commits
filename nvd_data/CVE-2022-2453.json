{
  "cve_id": "CVE-2022-2453",
  "github_data": {
    "repository": "gpac/gpac",
    "fix_commit": "dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
    "related_commits": [
      "dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
      "dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c"
    ],
    "patch_url": "https://github.com/gpac/gpac/commit/dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c.patch",
    "fix_commit_details": {
      "sha": "dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
      "commit_date": "2022-07-12T15:57:03Z",
      "author": {
        "login": "jeanlf",
        "type": "User",
        "stats": {
          "total_commits": 11740,
          "average_weekly_commits": 11.521099116781159,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 832
        }
      },
      "commit_message": {
        "title": "fixed #2212",
        "length": 11,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 99,
        "additions": 53,
        "deletions": 46
      },
      "files": [
        {
          "filename": "src/bifs/field_decode.c",
          "status": "modified",
          "additions": 53,
          "deletions": 46,
          "patch": "@@ -427,64 +427,71 @@ GF_Err BD_DecMFFieldVec(GF_BifsDecoder * codec, GF_BitStream *bs, GF_Node *node,\n \t\t\te = gf_bifs_dec_sf_field(codec, bs, node, &sffield, GF_FALSE);\n \t\t\tif (e) return e;\n \t\t}\n-\t} else {\n-\t\tlast = NULL;\n-\t\tfor (i=0; i<nbFields; i++) {\n-\t\t\tGF_Node *new_node = gf_bifs_dec_node(codec, bs, field->NDTtype);\n-\t\t\tif (new_node) {\n-\t\t\t\te = gf_node_register(new_node, is_mem_com ? NULL : node);\n-\t\t\t\tif (e) return e;\n-\n-\t\t\t\tif (node) {\n-\t\t\t\t\t/*special case for QP, register as the current QP*/\n-\t\t\t\t\tif (gf_node_get_tag(new_node) == TAG_MPEG4_QuantizationParameter) {\n-\t\t\t\t\t\tqp_local = ((M_QuantizationParameter *)new_node)->isLocal;\n-\t\t\t\t\t\t/*we have a QP in the same scope, remove previous\n-\t\t\t\t\t\tNB: we assume this is the right behavior, the spec doesn't say\n-\t\t\t\t\t\twhether QP is cumulative or not*/\n-\t\t\t\t\t\tif (qp_on) gf_bifs_dec_qp_remove(codec, GF_FALSE);\n+\t\treturn GF_OK;\n+\t}\n \n-\t\t\t\t\t\te = gf_bifs_dec_qp_set(codec, new_node);\n-\t\t\t\t\t\tif (e) return e;\n-\t\t\t\t\t\tqp_on = 1;\n-\t\t\t\t\t\tif (qp_local) qp_local = 2;\n-\t\t\t\t\t\tif (codec->force_keep_qp) {\n-\t\t\t\t\t\t\te = gf_node_list_add_child_last(field->far_ptr, new_node, &last);\n-\t\t\t\t\t\t\tif (e) return e;\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tgf_node_register(new_node, NULL);\n-\t\t\t\t\t\t\tgf_node_unregister(new_node, node);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n+\te = GF_OK;\n+\tlast = NULL;\n+\tfor (i=0; i<nbFields; i++) {\n+\t\tGF_Node *new_node = gf_bifs_dec_node(codec, bs, field->NDTtype);\n+\t\tif (new_node) {\n+\t\t\te = gf_node_register(new_node, is_mem_com ? NULL : node);\n+\t\t\tif (e) goto exit;\n+\n+\t\t\tif (node) {\n+\t\t\t\t/*special case for QP, register as the current QP*/\n+\t\t\t\tif (gf_node_get_tag(new_node) == TAG_MPEG4_QuantizationParameter) {\n+\t\t\t\t\tqp_local = ((M_QuantizationParameter *)new_node)->isLocal;\n+\t\t\t\t\t/*we have a QP in the same scope, remove previous\n+\t\t\t\t\tNB: we assume this is the right behavior, the spec doesn't say\n+\t\t\t\t\twhether QP is cumulative or not*/\n+\t\t\t\t\tif (qp_on) gf_bifs_dec_qp_remove(codec, GF_FALSE);\n+\n+\t\t\t\t\te = gf_bifs_dec_qp_set(codec, new_node);\n+\t\t\t\t\tif (e) goto exit;\n+\t\t\t\t\tqp_on = 1;\n+\t\t\t\t\tif (qp_local) qp_local = 2;\n+\t\t\t\t\tif (codec->force_keep_qp) {\n \t\t\t\t\t\te = gf_node_list_add_child_last(field->far_ptr, new_node, &last);\n-\t\t\t\t\t\tif (e) return e;\n+\t\t\t\t\t\tif (e) goto exit;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tgf_node_register(new_node, NULL);\n+\t\t\t\t\t\tgf_node_unregister(new_node, node);\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\te = gf_node_list_add_child_last(field->far_ptr, new_node, &last);\n+\t\t\t\t\tif (e) goto exit;\n \t\t\t\t}\n-\t\t\t\t/*proto coding*/\n-\t\t\t\telse if (codec->pCurrentProto) {\n-\t\t\t\t\t/*TO DO: what happens if this is a QP node on the interface ?*/\n-\t\t\t\t\te = gf_node_list_add_child_last( (GF_ChildNodeItem **)field->far_ptr, new_node, &last);\n-\t\t\t\t\tif (e) return e;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;\n \t\t\t}\n+\t\t\t/*proto coding*/\n+\t\t\telse if (codec->pCurrentProto) {\n+\t\t\t\t/*TO DO: what happens if this is a QP node on the interface ?*/\n+\t\t\t\te = gf_node_list_add_child_last( (GF_ChildNodeItem **)field->far_ptr, new_node, &last);\n+\t\t\t\tif (e)goto exit;\n+\t\t\t}\n+\t\t} else {\n+\t\t\te = codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;\n+\t\t\tgoto exit;\n \t\t}\n-\t\t/*according to the spec, the QP applies to the current node itself, not just children.\n-\t\tIf IsLocal is TRUE remove the node*/\n-\t\tif (qp_on && qp_local) {\n-\t\t\tif (qp_local == 2) {\n+\t}\n+\n+exit:\n+\n+\t/*according to the spec, the QP applies to the current node itself, not just children.\n+\tIf IsLocal is TRUE remove the node*/\n+\tif (qp_on && qp_local) {\n+\t\tif (qp_local == 2) {\n //\t\t\t\tqp_local = 1;\n-\t\t\t} else {\n-\t\t\t\t//ask to get rid of QP and reactivate if we had a QP when entering the node\n-\t\t\t\tgf_bifs_dec_qp_remove(codec, initial_qp);\n+\t\t} else {\n+\t\t\t//ask to get rid of QP and reactivate if we had a QP when entering the node\n+\t\t\tgf_bifs_dec_qp_remove(codec, initial_qp);\n //\t\t\t\tqp_local = 0;\n-\t\t\t}\n \t\t}\n \t}\n+\n \t/*finally delete the QP if any (local or not) as we get out of this node*/\n \tif (qp_on) gf_bifs_dec_qp_remove(codec, GF_TRUE);\n-\treturn GF_OK;\n+\treturn e;\n }\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e075efa1bd0984e0e87f6752f1e5b991ba3a7cf7",
            "date": "2025-01-14T15:00:34Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "7af1bfcdc25dd74e158437abd13858281ae1bea0",
            "date": "2025-01-14T12:33:00Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "08572e41a7eae3d7e4329bf88a455ba6cb209936",
            "date": "2025-01-14T12:18:43Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "5f2c53efbc58ecfb01885c73b9507413efde6c81",
            "date": "2025-01-14T11:46:01Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "f2082beb80c470f4eaf2bb0421b56e8adcde303a",
            "date": "2025-01-14T11:45:02Z",
            "author_login": "aureliendavid"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-416",
    "description": "Use After Free in GitHub repository gpac/gpac prior to 2.1-DEV.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-19T14:15:08.650",
    "last_modified": "2024-11-21T07:01:01.023",
    "fix_date": "2022-07-12T15:57:03Z"
  },
  "references": [
    {
      "url": "https://github.com/gpac/gpac/commit/dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c8c964de-046a-41b2-9ff5-e25cfdb36b5a",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/commit/dc7de8d3d604426c7a6e628d90cb9fb88e7b4c2c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c8c964de-046a-41b2-9ff5-e25cfdb36b5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.502429",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gpac",
    "owner": "gpac",
    "created_at": "2014-05-03T11:29:57Z",
    "updated_at": "2025-01-14T12:51:06Z",
    "pushed_at": "2025-01-14T12:51:01Z",
    "size": 148655,
    "stars": 2857,
    "forks": 539,
    "open_issues": 84,
    "watchers": 2857,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29230795,
      "JavaScript": 1164507,
      "C++": 591365,
      "Roff": 570792,
      "Python": 185337,
      "Makefile": 105620,
      "HTML": 100652,
      "Java": 92437,
      "GLSL": 90260,
      "Objective-C": 24884,
      "Shell": 21810,
      "NSIS": 17560,
      "Rez": 13704,
      "CSS": 4998,
      "Batchfile": 4898,
      "Dockerfile": 3216,
      "Nix": 1229
    },
    "commit_activity": {
      "total_commits_last_year": 1273,
      "avg_commits_per_week": 24.48076923076923,
      "days_active_last_year": 239
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:56:58.367536"
  }
}