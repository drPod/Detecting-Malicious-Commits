{
  "cve_id": "CVE-2022-24713",
  "github_data": {
    "repository": "rust-lang/regex",
    "fix_commit": "ae70b41d4f46641dbc45c7a4f87954aea356283e",
    "related_commits": [
      "ae70b41d4f46641dbc45c7a4f87954aea356283e",
      "ae70b41d4f46641dbc45c7a4f87954aea356283e"
    ],
    "patch_url": "https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e.patch",
    "fix_commit_details": {
      "sha": "ae70b41d4f46641dbc45c7a4f87954aea356283e",
      "commit_date": "2022-02-25T17:48:15Z",
      "author": {
        "login": "BurntSushi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "security: fix denial-of-service bug in compiler",
        "length": 1179,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 97,
        "additions": 95,
        "deletions": 2
      },
      "files": [
        {
          "filename": "src/compile.rs",
          "status": "modified",
          "additions": 25,
          "deletions": 2,
          "patch": "@@ -38,6 +38,16 @@ pub struct Compiler {\n     suffix_cache: SuffixCache,\n     utf8_seqs: Option<Utf8Sequences>,\n     byte_classes: ByteClassSet,\n+    // This keeps track of extra bytes allocated while compiling the regex\n+    // program. Currently, this corresponds to two things. First is the heap\n+    // memory allocated by Unicode character classes ('InstRanges'). Second is\n+    // a \"fake\" amount of memory used by empty sub-expressions, so that enough\n+    // empty sub-expressions will ultimately trigger the compiler to bail\n+    // because of a size limit restriction. (That empty sub-expressions don't\n+    // add to heap memory usage is more-or-less an implementation detail.) In\n+    // the second case, if we don't bail, then an excessively large repetition\n+    // on an empty sub-expression can result in the compiler using a very large\n+    // amount of CPU time.\n     extra_inst_bytes: usize,\n }\n \n@@ -260,7 +270,7 @@ impl Compiler {\n \n         self.check_size()?;\n         match *expr.kind() {\n-            Empty => Ok(None),\n+            Empty => self.c_empty(),\n             Literal(hir::Literal::Unicode(c)) => self.c_char(c),\n             Literal(hir::Literal::Byte(b)) => {\n                 assert!(self.compiled.uses_bytes());\n@@ -378,6 +388,19 @@ impl Compiler {\n         }\n     }\n \n+    fn c_empty(&mut self) -> ResultOrEmpty {\n+        // See: https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8\n+        // See: CVE-2022-24713\n+        //\n+        // Since 'empty' sub-expressions don't increase the size of\n+        // the actual compiled object, we \"fake\" an increase in its\n+        // size so that our 'check_size_limit' routine will eventually\n+        // stop compilation if there are too many empty sub-expressions\n+        // (e.g., via a large repetition).\n+        self.extra_inst_bytes += std::mem::size_of::<Inst>();\n+        Ok(None)\n+    }\n+\n     fn c_capture(&mut self, first_slot: usize, expr: &Hir) -> ResultOrEmpty {\n         if self.num_exprs > 1 || self.compiled.is_dfa {\n             // Don't ever compile Save instructions for regex sets because\n@@ -496,7 +519,7 @@ impl Compiler {\n         let mut exprs = exprs.into_iter();\n         let Patch { mut hole, entry } = loop {\n             match exprs.next() {\n-                None => return Ok(None),\n+                None => return self.c_empty(),\n                 Some(e) => {\n                     if let Some(p) = self.c(e)? {\n                         break p;"
        },
        {
          "filename": "tests/test_default.rs",
          "status": "modified",
          "additions": 70,
          "deletions": 0,
          "patch": "@@ -150,3 +150,73 @@ fn regex_is_reasonably_small() {\n     assert_eq!(16, size_of::<bytes::Regex>());\n     assert_eq!(16, size_of::<bytes::RegexSet>());\n }\n+\n+// See: https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8\n+// See: CVE-2022-24713\n+//\n+// We test that our regex compiler will correctly return a \"too big\" error when\n+// we try to use a very large repetition on an *empty* sub-expression.\n+//\n+// At the time this test was written, the regex compiler does not represent\n+// empty sub-expressions with any bytecode instructions. In effect, it's an\n+// \"optimization\" to leave them out, since they would otherwise correspond\n+// to an unconditional JUMP in the regex bytecode (i.e., an unconditional\n+// epsilon transition in the NFA graph). Therefore, an empty sub-expression\n+// represents an interesting case for the compiler's size limits. Since it\n+// doesn't actually contribute any additional memory to the compiled regex\n+// instructions, the size limit machinery never detects it. Instead, it just\n+// dumbly tries to compile the empty sub-expression N times, where N is the\n+// repetition size.\n+//\n+// When N is very large, this will cause the compiler to essentially spin and\n+// do nothing for a decently large amount of time. It causes the regex to take\n+// quite a bit of time to compile, despite the concrete syntax of the regex\n+// being quite small.\n+//\n+// The degree to which this is actually a problem is somewhat of a judgment\n+// call. Some regexes simply take a long time to compile. But in general, you\n+// should be able to reasonably control this by setting lower or higher size\n+// limits on the compiled object size. But this mitigation doesn't work at all\n+// for this case.\n+//\n+// This particular test is somewhat narrow. It merely checks that regex\n+// compilation will, at some point, return a \"too big\" error. Before the\n+// fix landed, this test would eventually fail because the regex would be\n+// successfully compiled (after enough time elapsed). So while this test\n+// doesn't check that we exit in a reasonable amount of time, it does at least\n+// check that we are properly returning an error at some point.\n+#[test]\n+fn big_empty_regex_fails() {\n+    use regex::Regex;\n+\n+    let result = Regex::new(\"(?:){4294967295}\");\n+    assert!(result.is_err());\n+}\n+\n+// Below is a \"billion laughs\" variant of the previous test case.\n+#[test]\n+fn big_empty_reps_chain_regex_fails() {\n+    use regex::Regex;\n+\n+    let result = Regex::new(\"(?:){64}{64}{64}{64}{64}{64}\");\n+    assert!(result.is_err());\n+}\n+\n+// Below is another situation where a zero-length sub-expression can be\n+// introduced.\n+#[test]\n+fn big_zero_reps_regex_fails() {\n+    use regex::Regex;\n+\n+    let result = Regex::new(r\"x{0}{4294967295}\");\n+    assert!(result.is_err());\n+}\n+\n+// Testing another case for completeness.\n+#[test]\n+fn empty_alt_regex_fails() {\n+    use regex::Regex;\n+\n+    let result = Regex::new(r\"(?:|){4294967295}\");\n+    assert!(result.is_err());\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1a069b9232c607b34c4937122361aa075ef573fa",
            "date": "2024-11-11T15:16:22Z",
            "author_login": "BurntSushi"
          },
          {
            "sha": "225c94cafae22a5ad84022731da9e39168ed1458",
            "date": "2024-11-11T14:32:26Z",
            "author_login": "BurntSushi"
          },
          {
            "sha": "9870c06e6c772daaad7ab612faab29130753e41c",
            "date": "2024-10-24T14:17:01Z",
            "author_login": "BurntSushi"
          },
          {
            "sha": "80df54e4b9ed4a9b14c502668856c3fc47b30cf4",
            "date": "2024-10-24T14:16:57Z",
            "author_login": "BurntSushi"
          },
          {
            "sha": "991ba8836b3dea741bdcb4e6f680543ab10331d6",
            "date": "2024-10-24T13:58:32Z",
            "author_login": "BurntSushi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "regex is an implementation of regular expressions for the Rust language. The regex crate features built-in mitigations to prevent denial of service attacks caused by untrusted regexes, or untrusted input matched by trusted regexes. Those (tunable) mitigations already provide sane defaults to prevent attacks. This guarantee is documented and it's considered part of the crate's API. Unfortunately a bug was discovered in the mitigations designed to prevent untrusted regexes to take an arbitrary amount of time during parsing, and it's possible to craft regexes that bypass such mitigations. This makes it possible to perform denial of service attacks by sending specially crafted regexes to services accepting user-controlled, untrusted regexes. All versions of the regex crate before or equal to 1.5.4 are affected by this issue. The fix is include starting from regex 1.5.5. All users accepting user-controlled regexes are recommended to upgrade immediately to the latest version of the regex crate. Unfortunately there is no fixed set of problematic regexes, as there are practically infinite regexes that could be crafted to exploit this vulnerability. Because of this, it us not recommend to deny known problematic regexes.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-08T19:15:08.000",
    "last_modified": "2024-11-21T06:50:55.947",
    "fix_date": "2022-02-25T17:48:15Z"
  },
  "references": [
    {
      "url": "https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/04/msg00003.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/04/msg00009.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/JANLZ3JXWJR7FSHE57K66UIZUIJZI67T/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/O3YB7CURSG64CIPCDPNMGPE4UU24AB6H/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PDOWTHNVGBOP2HN27PUFIGRYNSNDTYRJ/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-08",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-14",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5113",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5118",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/04/msg00003.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/04/msg00009.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/JANLZ3JXWJR7FSHE57K66UIZUIJZI67T/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/O3YB7CURSG64CIPCDPNMGPE4UU24AB6H/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PDOWTHNVGBOP2HN27PUFIGRYNSNDTYRJ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-08",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5113",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5118",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.785382",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "regex",
    "owner": "rust-lang",
    "created_at": "2014-12-11T20:39:09Z",
    "updated_at": "2025-01-14T10:38:21Z",
    "pushed_at": "2024-11-11T15:16:30Z",
    "size": 7793,
    "stars": 3597,
    "forks": 450,
    "open_issues": 62,
    "watchers": 3597,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Rust": 5490415,
      "C": 41867,
      "Shell": 7331
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:07:03.889979"
  }
}