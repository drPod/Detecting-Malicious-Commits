{
  "cve_id": "CVE-2022-24746",
  "github_data": {
    "repository": "shopware/platform",
    "fix_commit": "651598a61073cbe59368e311817bdc6e7fb349c6",
    "related_commits": [
      "651598a61073cbe59368e311817bdc6e7fb349c6",
      "651598a61073cbe59368e311817bdc6e7fb349c6"
    ],
    "patch_url": "https://github.com/shopware/platform/commit/651598a61073cbe59368e311817bdc6e7fb349c6.patch",
    "fix_commit_details": {
      "sha": "651598a61073cbe59368e311817bdc6e7fb349c6",
      "commit_date": "2022-02-03T10:34:06Z",
      "author": {
        "login": "mstegmeyer",
        "type": "User",
        "stats": {
          "total_commits": 564,
          "average_weekly_commits": 1.4498714652956297,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 145
        }
      },
      "commit_message": {
        "title": "NEXT-19276 - Add filtering to promotion and product codes",
        "length": 57,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 110,
        "additions": 82,
        "deletions": 28
      },
      "files": [
        {
          "filename": "changelog/_unreleased/2022-02-03-add-filtering-to-product-and-promotion-codes.md",
          "status": "added",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -0,0 +1,8 @@\n+---\n+title: Add filtering to product and promotion codes\n+issue: NEXT-19276\n+author: Max Stegmeyer\n+author_email: m.stegmeyer@shopware.com\n+---\n+# Storefront\n+* Changed `Shopware\\Storefront\\Controller\\CartLineItemController` to sanitize from promotion codes and product number error messages"
        },
        {
          "filename": "src/Core/Checkout/Cart/LineItemFactoryHandler/PromotionLineItemFactory.php",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -15,13 +15,15 @@ public function supports(string $type): bool\n \n     public function create(array $data, SalesChannelContext $context): LineItem\n     {\n-        $uniqueKey = 'promotion-' . $data['referencedId'];\n+        $code = $data['referencedId'];\n+\n+        $uniqueKey = 'promotion-' . $code;\n         $item = new LineItem($uniqueKey, LineItem::PROMOTION_LINE_ITEM_TYPE);\n         $item->setLabel($uniqueKey);\n         $item->setGood(false);\n \n         // this is used to pass on the code for later usage\n-        $item->setReferencedId($data['referencedId']);\n+        $item->setReferencedId($code);\n \n         // this is important to avoid any side effects when calculating the cart\n         // a percentage of 0,00 will just do nothing"
        },
        {
          "filename": "src/Core/Checkout/DependencyInjection/promotion.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -70,6 +70,7 @@\n         <service id=\"Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector\">\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Promotion\\Gateway\\PromotionGateway\"/>\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder\"/>\n+            <argument type=\"service\" id=\"Shopware\\Core\\Framework\\Util\\HtmlSanitizer\"/>\n             <!-- // inject after product collector(5000) -->\n             <tag name=\"shopware.cart.collector\" priority=\"4900\"/>\n         </service>"
        },
        {
          "filename": "src/Core/Checkout/Promotion/Cart/PromotionCollector.php",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -22,6 +22,7 @@\n use Shopware\\Core\\Checkout\\Promotion\\PromotionEntity;\n use Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\InconsistentCriteriaIdsException;\n use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\n+use Shopware\\Core\\Framework\\Util\\HtmlSanitizer;\n use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n \n class PromotionCollector implements CartDataCollectorInterface\n@@ -35,12 +36,15 @@ class PromotionCollector implements CartDataCollectorInterface\n \n     private PromotionItemBuilder $itemBuilder;\n \n+    private HtmlSanitizer $htmlSanitizer;\n+\n     private array $requiredDalAssociations;\n \n-    public function __construct(PromotionGatewayInterface $gateway, PromotionItemBuilder $itemBuilder)\n+    public function __construct(PromotionGatewayInterface $gateway, PromotionItemBuilder $itemBuilder, HtmlSanitizer $htmlSanitizer)\n     {\n         $this->gateway = $gateway;\n         $this->itemBuilder = $itemBuilder;\n+        $this->htmlSanitizer = $htmlSanitizer;\n \n         $this->requiredDalAssociations = [\n             'personaRules',\n@@ -134,7 +138,8 @@ public function collect(CartDataCollection $data, Cart $original, SalesChannelCo\n         foreach ($allCodes as $code) {\n             if (!\\in_array($code, $foundCodes, true)) {\n                 $cartExtension->removeCode($code);\n-                $this->addPromotionNotFoundError($code, $original);\n+\n+                $this->addPromotionNotFoundError($this->htmlSanitizer->sanitize($code, null, true), $original);\n             }\n         }\n "
        },
        {
          "filename": "src/Storefront/Controller/CartLineItemController.php",
          "status": "modified",
          "additions": 15,
          "deletions": 19,
          "patch": "@@ -20,6 +20,7 @@\n use Shopware\\Core\\Framework\\Routing\\Annotation\\RouteScope;\n use Shopware\\Core\\Framework\\Routing\\Annotation\\Since;\n use Shopware\\Core\\Framework\\Routing\\Exception\\MissingRequestParameterException;\n+use Shopware\\Core\\Framework\\Util\\HtmlSanitizer;\n use Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\n use Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelRepositoryInterface;\n use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n@@ -32,36 +33,28 @@\n  */\n class CartLineItemController extends StorefrontController\n {\n-    /**\n-     * @var CartService\n-     */\n-    private $cartService;\n+    private CartService $cartService;\n \n-    /**\n-     * @var PromotionItemBuilder\n-     */\n-    private $promotionItemBuilder;\n+    private PromotionItemBuilder $promotionItemBuilder;\n \n-    /**\n-     * @var SalesChannelRepositoryInterface\n-     */\n-    private $productRepository;\n+    private SalesChannelRepositoryInterface $productRepository;\n \n-    /**\n-     * @var ProductLineItemFactory\n-     */\n-    private $productLineItemFactory;\n+    private ProductLineItemFactory $productLineItemFactory;\n+\n+    private HtmlSanitizer $htmlSanitizer;\n \n     public function __construct(\n         CartService $cartService,\n         SalesChannelRepositoryInterface $productRepository,\n         PromotionItemBuilder $promotionItemBuilder,\n-        ProductLineItemFactory $productLineItemFactory\n+        ProductLineItemFactory $productLineItemFactory,\n+        HtmlSanitizer $htmlSanitizer\n     ) {\n         $this->cartService = $cartService;\n         $this->productRepository = $productRepository;\n         $this->promotionItemBuilder = $promotionItemBuilder;\n         $this->productLineItemFactory = $productLineItemFactory;\n+        $this->htmlSanitizer = $htmlSanitizer;\n     }\n \n     /**\n@@ -169,7 +162,7 @@ public function changeQuantity(Cart $cart, string $id, Request $request, SalesCh\n      */\n     public function addProductByNumber(Request $request, SalesChannelContext $salesChannelContext): Response\n     {\n-        $number = $request->request->get('number');\n+        $number = (string) $request->request->get('number');\n \n         if (!$number) {\n             throw new MissingRequestParameterException('number');\n@@ -183,7 +176,10 @@ public function addProductByNumber(Request $request, SalesChannelContext $salesC\n         $data = $idSearchResult->getIds();\n \n         if (empty($data)) {\n-            $this->addFlash(self::DANGER, $this->trans('error.productNotFound', ['%number%' => $number]));\n+            $this->addFlash(self::DANGER, $this->trans(\n+                'error.productNotFound',\n+                ['%number%' => $this->htmlSanitizer->sanitize($number, null, true)]\n+            ));\n \n             return $this->createActionResponse($request);\n         }"
        },
        {
          "filename": "src/Storefront/DependencyInjection/controller.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -98,6 +98,7 @@\n             <argument type=\"service\" id=\"sales_channel.product.repository\"/>\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder\"/>\n             <argument type=\"service\" id=\"Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemFactory\"/>\n+            <argument type=\"service\" id=\"Shopware\\Core\\Framework\\Util\\HtmlSanitizer\"/>\n             <call method=\"setContainer\">\n                 <argument type=\"service\" id=\"service_container\"/>\n             </call>"
        },
        {
          "filename": "src/Storefront/Test/Controller/CartLineItemControllerTest.php",
          "status": "modified",
          "additions": 46,
          "deletions": 5,
          "patch": "@@ -38,21 +38,29 @@ public function clearFlashBag(): void\n     /**\n      * @dataProvider productNumbers\n      */\n-    public function testAddProductByNumber(string $productId, string $productNumber): void\n+    public function testAddProductByNumber(?string $productId, string $productNumber): void\n     {\n         $contextToken = Uuid::randomHex();\n \n         $cartService = $this->getContainer()->get(CartService::class);\n-        $this->createProduct($productId, $productNumber);\n+        if ($productId) {\n+            $this->createProduct($productId, $productNumber);\n+        }\n         $request = $this->createRequest(['number' => $productNumber]);\n \n         $salesChannelContext = $this->createSalesChannelContext($contextToken);\n         $response = $this->getContainer()->get(CartLineItemController::class)->addProductByNumber($request, $salesChannelContext);\n \n         $cartLineItem = $cartService->getCart($contextToken, $salesChannelContext)->getLineItems()->get($productId);\n-\n-        static::assertArrayHasKey('success', $this->getFlashBag()->all());\n-        static::assertNotNull($cartLineItem);\n+        $flashBag = $this->getFlashBag()->all();\n+        if ($productId) {\n+            static::assertArrayHasKey('success', $flashBag);\n+            static::assertNotNull($cartLineItem);\n+        } else {\n+            static::assertArrayHasKey('danger', $flashBag);\n+            static::assertSame($this->getContainer()->get('translator')->trans('error.productNotFound', ['%number%' => \\strip_tags($productNumber)]), $flashBag['danger'][0]);\n+            static::assertNull($cartLineItem);\n+        }\n         static::assertSame(200, $response->getStatusCode());\n     }\n \n@@ -65,9 +73,42 @@ public function productNumbers(): array\n             [Uuid::randomHex(), 'test_123'],\n             [Uuid::randomHex(), 'test\u00e4\u00fc\u00f6123'],\n             [Uuid::randomHex(), 'test/123'],\n+            [null, 'nonExisting'],\n+            [null, 'with<br>HTML'],\n+        ];\n+    }\n+\n+    public function promotions(): array\n+    {\n+        return [\n+            ['testCode'],\n+            ['with<br>HTML'],\n         ];\n     }\n \n+    /**\n+     * @dataProvider promotions\n+     */\n+    public function testAddPromotion(string $code): void\n+    {\n+        $contextToken = Uuid::randomHex();\n+\n+        $cartService = $this->getContainer()->get(CartService::class);\n+        $request = $this->createRequest(['code' => $code]);\n+\n+        $salesChannelContext = $this->createSalesChannelContext($contextToken);\n+        $this->getContainer()->get(CartLineItemController::class)->addPromotion(\n+            $cartService->getCart($contextToken, $salesChannelContext),\n+            $request,\n+            $salesChannelContext\n+        );\n+\n+        $flashBag = $this->getFlashBag()->all();\n+        static::assertArrayHasKey('danger', $flashBag);\n+        static::assertSame($this->getContainer()->get('translator')->trans('checkout.promotion-not-found', ['%code%' => \\strip_tags($code)]), $flashBag['danger'][0]);\n+        static::assertSame(0, $cartService->getCart($contextToken, $salesChannelContext)->getLineItems()->count());\n+    }\n+\n     private function getLineItemAddPayload(string $productId): array\n     {\n         return ["
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a87d38f4e4ab920afb728d396a4fdff6dd1ed893",
            "date": "2025-01-14T12:59:02Z",
            "author_login": "Bird87ZA"
          },
          {
            "sha": "e957d7150a872944c008a7169bf5f8d97889b355",
            "date": "2025-01-14T11:55:14Z",
            "author_login": "shyim"
          },
          {
            "sha": "02af717865eb1d240850314ad103fc276dbb56f8",
            "date": "2025-01-14T10:50:49Z",
            "author_login": "akf-bw"
          },
          {
            "sha": "17723a093f9cf2c4617a471091ef4607da1d8769",
            "date": "2025-01-14T10:29:25Z",
            "author_login": "jleifeld"
          },
          {
            "sha": "9b977d57e54a9275be40804a7dd7cca05c0f748c",
            "date": "2025-01-14T10:24:01Z",
            "author_login": "frobel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Shopware is an open commerce platform based on the Symfony php Framework and the Vue javascript framework. In affected versions it is possible to inject code via the voucher code form. This issue has been patched in version 6.4.8.1. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-09T23:15:08.110",
    "last_modified": "2024-11-21T06:51:00.337",
    "fix_date": "2022-02-03T10:34:06Z"
  },
  "references": [
    {
      "url": "https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-02-2022",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/651598a61073cbe59368e311817bdc6e7fb349c6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-952p-fqcp-g8pc",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-02-2022",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/651598a61073cbe59368e311817bdc6e7fb349c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-952p-fqcp-g8pc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.787848",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shopware",
    "owner": "shopware",
    "created_at": "2018-05-03T13:00:31Z",
    "updated_at": "2025-01-14T12:59:07Z",
    "pushed_at": "2025-01-14T13:28:13Z",
    "size": 289410,
    "stars": 2894,
    "forks": 1042,
    "open_issues": 911,
    "watchers": 2894,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [
      "6.4",
      "6.5.x"
    ],
    "languages": {
      "PHP": 33467815,
      "JavaScript": 12727064,
      "Twig": 5566016,
      "TypeScript": 1850093,
      "SCSS": 1033491,
      "CSS": 135217,
      "Vue": 32178,
      "Shell": 30871,
      "HTML": 26015,
      "Nix": 4972,
      "Groovy": 3900,
      "Dockerfile": 2862,
      "Smarty": 1216
    },
    "commit_activity": {
      "total_commits_last_year": 4219,
      "avg_commits_per_week": 81.13461538461539,
      "days_active_last_year": 285
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:37:45.571181"
  }
}