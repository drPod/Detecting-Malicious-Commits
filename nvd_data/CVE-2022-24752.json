{
  "cve_id": "CVE-2022-24752",
  "github_data": {
    "repository": "Sylius/SyliusGridBundle",
    "fix_commit": "73d0791d0575f955e830a3da4c3345f420d2f784",
    "related_commits": [
      "73d0791d0575f955e830a3da4c3345f420d2f784",
      "73d0791d0575f955e830a3da4c3345f420d2f784"
    ],
    "patch_url": "https://github.com/Sylius/SyliusGridBundle/commit/73d0791d0575f955e830a3da4c3345f420d2f784.patch",
    "fix_commit_details": {
      "sha": "73d0791d0575f955e830a3da4c3345f420d2f784",
      "commit_date": "2022-03-14T14:40:46Z",
      "author": {
        "login": "lchrusciel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "bug #222 [Security] Dql injection through sorting parameters blocked (TheMilek)",
        "length": 254,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 293,
        "additions": 265,
        "deletions": 28
      },
      "files": [
        {
          "filename": "src/Bundle/Resources/config/services.xml",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -46,7 +46,12 @@\n             <argument type=\"service\" id=\"sylius.registry.grid_filter\" />\n             <argument type=\"service\" id=\"sylius.grid.filters_criteria_resolver\" />\n         </service>\n-        <service id=\"sylius.grid.sorter\" class=\"Sylius\\Component\\Grid\\Sorting\\Sorter\" />\n+        <service id=\"sylius.grid.sorter.validator\" class=\"Sylius\\Component\\Grid\\Validation\\SortingParametersValidator\" />\n+        <service id=\"sylius.grid.field.validator\" class=\"Sylius\\Component\\Grid\\Validation\\FieldValidator\" />\n+        <service id=\"sylius.grid.sorter\" class=\"Sylius\\Component\\Grid\\Sorting\\Sorter\">\n+            <argument type=\"service\" id=\"sylius.grid.sorter.validator\" />\n+            <argument type=\"service\" id=\"sylius.grid.field.validator\" />\n+        </service>\n         <service id=\"sylius.grid.data_source_provider\" class=\"Sylius\\Component\\Grid\\Data\\DataSourceProvider\">\n             <argument type=\"service\" id=\"sylius.registry.grid_driver\" />\n         </service>"
        },
        {
          "filename": "src/Component/Sorting/Sorter.php",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -13,19 +13,37 @@\n \n namespace Sylius\\Component\\Grid\\Sorting;\n \n+use Sylius\\Component\\Grid\\Validation\\FieldValidator;\n+use Sylius\\Component\\Grid\\Validation\\SortingParametersValidator;\n use Sylius\\Component\\Grid\\Data\\DataSourceInterface;\n use Sylius\\Component\\Grid\\Definition\\Grid;\n use Sylius\\Component\\Grid\\Parameters;\n+use Sylius\\Component\\Grid\\Validation\\SortingParametersValidatorInterface;\n+use Sylius\\Component\\Grid\\Validation\\FieldValidatorInterface;\n \n final class Sorter implements SorterInterface\n {\n+    private SortingParametersValidatorInterface $sortingValidator;\n+\n+    private FieldValidatorInterface $fieldValidator;\n+\n+    public function __construct(?SortingParametersValidatorInterface $sortingValidator = null, ?FieldValidatorInterface $fieldValidator = null)\n+    {\n+        $this->sortingValidator = $sortingValidator ?? new SortingParametersValidator();\n+        $this->fieldValidator = $fieldValidator ?? new FieldValidator();\n+    }\n+\n     public function sort(DataSourceInterface $dataSource, Grid $grid, Parameters $parameters): void\n     {\n+        $enabledFields = $grid->getEnabledFields();\n+\n         $expressionBuilder = $dataSource->getExpressionBuilder();\n \n         $sorting = $parameters->get('sorting', $grid->getSorting());\n+        $this->sortingValidator->validateSortingParameters($sorting, $enabledFields);\n \n         foreach ($sorting as $field => $order) {\n+            $this->fieldValidator->validateFieldName($field, $enabledFields);\n             $gridField = $grid->getField($field);\n             $property = $gridField->getSortable();\n "
        },
        {
          "filename": "src/Component/Validation/FieldValidator.php",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace Sylius\\Component\\Grid\\Validation;\n+\n+use Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n+\n+final class FieldValidator implements FieldValidatorInterface\n+{\n+    public function validateFieldName(string $fieldName, array $enabledFields): void\n+    {\n+        $enabledFieldsNames = array_keys($enabledFields);\n+\n+        if (!in_array($fieldName, $enabledFieldsNames, true)) {\n+            throw new BadRequestHttpException(sprintf('%s is not valid field, did you mean one of these: %s?', $fieldName, implode(', ', $enabledFieldsNames)));\n+        }\n+    }\n+}"
        },
        {
          "filename": "src/Component/Validation/FieldValidatorInterface.php",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace Sylius\\Component\\Grid\\Validation;\n+\n+interface FieldValidatorInterface\n+{\n+    public function validateFieldName(string $fieldName, array $enabledFields): void;\n+}"
        },
        {
          "filename": "src/Component/Validation/SortingParametersValidator.php",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace Sylius\\Component\\Grid\\Validation;\n+\n+use Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n+\n+final class SortingParametersValidator implements SortingParametersValidatorInterface\n+{\n+    public function validateSortingParameters(array $sorting, array $enabledFields): void\n+    {\n+        foreach (array_keys($enabledFields) as $key) {\n+            if (array_key_exists($key, $sorting) && !in_array($sorting[$key], ['asc', 'desc'])) {\n+                throw new BadRequestHttpException(sprintf('%s is not valid, use asc or desc instead.', $sorting[$key]));\n+            }\n+        }\n+    }\n+}"
        },
        {
          "filename": "src/Component/Validation/SortingParametersValidatorInterface.php",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace Sylius\\Component\\Grid\\Validation;\n+\n+interface SortingParametersValidatorInterface\n+{\n+    public function validateSortingParameters(array $sorting, array $enabledFields): void;\n+}"
        },
        {
          "filename": "src/Component/composer.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@\n         \"sylius/registry\": \"^1.5\",\n         \"symfony/deprecation-contracts\": \"^2.2\",\n         \"symfony/event-dispatcher\": \"^4.4 || ^5.2\",\n+        \"symfony/http-kernel\": \"^4.4 || ^5.2\",\n         \"webmozart/assert\": \"^1.9\"\n     },\n     \"require-dev\": {"
        },
        {
          "filename": "src/Component/spec/Sorting/SorterSpec.php",
          "status": "modified",
          "additions": 34,
          "deletions": 27,
          "patch": "@@ -20,68 +20,75 @@\n use Sylius\\Component\\Grid\\Definition\\Grid;\n use Sylius\\Component\\Grid\\Parameters;\n use Sylius\\Component\\Grid\\Sorting\\SorterInterface;\n+use Sylius\\Component\\Grid\\Validation\\SortingParametersValidatorInterface;\n+use Sylius\\Component\\Grid\\Validation\\FieldValidatorInterface;\n \n final class SorterSpec extends ObjectBehavior\n {\n+    function let(SortingParametersValidatorInterface $sortingValidator, FieldValidatorInterface $fieldValidator): void\n+    {\n+        $this->beConstructedWith($sortingValidator, $fieldValidator);\n+    }\n+\n     function it_implements_grid_data_source_sorter_interface(): void\n     {\n         $this->shouldImplement(SorterInterface::class);\n     }\n \n     function it_sorts_the_data_source_via_expression_builder_based_on_the_grid_definition(\n         Grid $grid,\n-        Field $nameField,\n-        Field $nonSortableField,\n+        Field $field,\n+        Field $anotherField,\n         DataSourceInterface $dataSource,\n-        ExpressionBuilderInterface $expressionBuilder\n+        ExpressionBuilderInterface $expressionBuilder,\n+        SortingParametersValidatorInterface $sortingValidator,\n+        FieldValidatorInterface $fieldValidator\n     ): void {\n         $parameters = new Parameters();\n \n         $dataSource->getExpressionBuilder()->willReturn($expressionBuilder);\n \n-        $grid->getSorting()->willReturn(['name' => 'desc', 'non_sortable_field' => 'asc']);\n+        $grid->getSorting()->willReturn(['name' => 'desc']);\n+        $grid->getEnabledFields()->willReturn(['name'=> $field, 'code' => $anotherField]);\n \n-        $grid->hasField('name')->willReturn(true);\n-        $grid->getField('name')->willReturn($nameField);\n-        $nameField->isSortable()->willReturn(true);\n-        $nameField->getSortable()->willReturn('translation.name');\n+        $sortingValidator->validateSortingParameters(['name' => 'desc'], ['name' => $field , 'code' => $anotherField])->shouldBeCalled();\n+        $fieldValidator->validateFieldName('name', ['name' => $field , 'code' => $anotherField])->shouldBeCalled();\n \n-        $grid->hasField('non_sortable_field')->willReturn(true);\n-        $grid->getField('non_sortable_field')->willReturn($nonSortableField);\n-        $nonSortableField->isSortable()->willReturn(false);\n-        $nonSortableField->getSortable()->willReturn(null);\n+        $grid->hasField('name')->willReturn(true);\n+        $grid->getField('name')->willReturn($field);\n+        $field->isSortable()->willReturn(true);\n+        $field->getSortable()->willReturn('translation.name');\n \n         $expressionBuilder->addOrderBy('translation.name', 'desc')->shouldBeCalled();\n-        $expressionBuilder->addOrderBy(null, 'asc')->shouldNotBeCalled();\n \n         $this->sort($dataSource, $grid, $parameters);\n     }\n \n     function it_sorts_the_data_source_via_expression_builder_based_on_sorting_parameter(\n         Grid $grid,\n-        Field $nameField,\n-        Field $nonSortableField,\n+        Field $field,\n+        Field $anotherField,\n         DataSourceInterface $dataSource,\n-        ExpressionBuilderInterface $expressionBuilder\n+        ExpressionBuilderInterface $expressionBuilder,\n+        SortingParametersValidatorInterface $sortingValidator,\n+        FieldValidatorInterface $fieldValidator\n     ): void {\n-        $parameters = new Parameters(['sorting' => ['name' => 'asc', 'non_sortable_field' => 'asc']]);\n+        $parameters = new Parameters(['sorting' => ['name' => 'asc']]);\n \n         $dataSource->getExpressionBuilder()->willReturn($expressionBuilder);\n \n-        $grid->getSorting()->willReturn(['code' => 'desc']);\n+        $grid->getSorting()->willReturn(['code' => 'asc']);\n+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);\n \n-        $grid->hasField('name')->willReturn(true);\n-        $grid->getField('name')->willReturn($nameField);\n-        $nameField->isSortable()->willReturn(true);\n-        $nameField->getSortable()->willReturn('translation.name');\n+        $sortingValidator->validateSortingParameters(['name' => 'asc'], ['name' => $field , 'code' => $anotherField])->shouldBeCalled();\n+        $fieldValidator->validateFieldName('name', ['name' => $field , 'code' => $anotherField])->shouldBeCalled();\n \n-        $grid->hasField('non_sortable_field')->willReturn(true);\n-        $grid->getField('non_sortable_field')->willReturn($nonSortableField);\n-        $nonSortableField->isSortable()->willReturn(false);\n-        $nonSortableField->getSortable()->willReturn(null);\n+        $grid->hasField('name')->willReturn(true);\n+        $grid->getField('name')->willReturn($field);\n+        $field->isSortable()->willReturn(true);\n+        $field->getSortable()->willReturn('translation.name');\n \n         $expressionBuilder->addOrderBy('translation.name', 'asc')->shouldBeCalled();\n-        $expressionBuilder->addOrderBy(null, 'asc')->shouldNotBeCalled();\n \n         $this->sort($dataSource, $grid, $parameters);\n     }"
        },
        {
          "filename": "src/Component/spec/Validation/FieldValidatorSpec.php",
          "status": "added",
          "additions": 56,
          "deletions": 0,
          "patch": "@@ -0,0 +1,56 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace spec\\Sylius\\Component\\Grid\\Validation;\n+\n+use PhpSpec\\ObjectBehavior;\n+use Sylius\\Component\\Grid\\Definition\\Field;\n+use Sylius\\Component\\Grid\\Definition\\Grid;\n+use Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n+use Sylius\\Component\\Grid\\Validation\\FieldValidatorInterface;\n+\n+final class FieldValidatorSpec extends ObjectBehavior\n+{\n+    function it_implements_field_validator_interface(): void\n+    {\n+        $this->shouldImplement(FieldValidatorInterface::class);\n+    }\n+\n+    function it_throws_exception_if_wrong_field_name_provided(\n+        Grid $grid,\n+        Field $field,\n+        Field $anotherField\n+    ): void {\n+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);\n+        $grid->getSorting()->willReturn(['sorting' => ['non_sortable_field' => 'desc']]);\n+\n+        $this\n+            ->shouldThrow(new BadRequestHttpException('non_sortable_field is not valid field, did you mean one of these: name, code?'))\n+            ->during('validateFieldName', ['non_sortable_field', ['name' => $field , 'code' => $anotherField]])\n+        ;\n+    }\n+\n+    function it_passes_if_valid_sorting_parameter_provided(\n+        Grid $grid,\n+        Field $field,\n+        Field $anotherField\n+    ): void {\n+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);\n+        $grid->getSorting()->willReturn(['sorting' => ['sortable_field' => 'desc']]);\n+\n+        $this\n+            ->shouldNotThrow(new BadRequestHttpException())\n+            ->during('validateFieldName', ['sortable_field', ['sortable_field' => $field , 'code' => $anotherField]])\n+        ;\n+    }\n+}"
        },
        {
          "filename": "src/Component/spec/Validation/SortingParametersValidatorSpec.php",
          "status": "added",
          "additions": 56,
          "deletions": 0,
          "patch": "@@ -0,0 +1,56 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace spec\\Sylius\\Component\\Grid\\Validation;\n+\n+use PhpSpec\\ObjectBehavior;\n+use Sylius\\Component\\Grid\\Definition\\Field;\n+use Sylius\\Component\\Grid\\Definition\\Grid;\n+use Sylius\\Component\\Grid\\Validation\\SortingParametersValidatorInterface;\n+use Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\n+\n+final class SortingParametersValidatorSpec extends ObjectBehavior\n+{\n+    function it_implements_grid_data_source_sorting_validator_interface(): void\n+    {\n+        $this->shouldImplement(SortingParametersValidatorInterface::class);\n+    }\n+\n+    function it_throws_exception_if_wrong_sorting_parameter_provided(\n+        Grid $grid,\n+        Field $field,\n+        Field $anotherField\n+    ): void {\n+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);\n+        $grid->getSorting()->willReturn(['name' => 'non_sortable_parameter']);\n+\n+        $this\n+            ->shouldThrow(new BadRequestHttpException('non_sortable_parameter is not valid, use asc or desc instead.'))\n+            ->during('validateSortingParameters', [['name' => 'non_sortable_parameter'], ['name' => $field , 'code' => $anotherField]])\n+        ;\n+    }\n+\n+    function it_passes_if_valid_sorting_parameter_provided(\n+        Grid $grid,\n+        Field $field,\n+        Field $anotherField\n+    ): void {\n+        $grid->getEnabledFields()->willReturn(['name' => $field , 'code' => $anotherField]);\n+        $grid->getSorting()->willReturn(['name' => 'asc']);\n+\n+        $this\n+            ->shouldNotThrow(new BadRequestHttpException())\n+            ->during('validateSortingParameters', [['name' => 'asc'], ['name' => $field , 'code' => $anotherField]])\n+        ;\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e2902ed6411a9a526e7805cd2658d59da38da6b7",
            "date": "2024-11-29T12:47:42Z",
            "author_login": "GSadee"
          },
          {
            "sha": "32f3ca68ff2747045747af0852008fa829330c18",
            "date": "2024-11-29T12:43:51Z",
            "author_login": "GSadee"
          },
          {
            "sha": "56aed34a0df1936a2a2199c1999e35995202d5af",
            "date": "2024-11-29T12:34:00Z",
            "author_login": "NoResponseMate"
          },
          {
            "sha": "4ef5215e4f1b98bfb327049332c165ae52918e7c",
            "date": "2024-11-29T12:29:14Z",
            "author_login": "GSadee"
          },
          {
            "sha": "525ef05251d02c18679e3d3f65fb114758c05369",
            "date": "2024-11-29T11:24:31Z",
            "author_login": "GSadee"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "SyliusGridBundle is a package of generic data grids for Symfony applications. Prior to versions 1.10.1 and 1.11-rc2, values added at the end of query sorting were passed directly to the database. The maintainers do not know if this could lead to direct SQL injections but took steps to remediate the vulnerability. The issue is fixed in versions 1.10.1 and 1.11-rc2. As a workaround, overwrite the`Sylius\\Component\\Grid\\Sorting\\Sorter.php` class and register it in the container. More information about this workaround is available in the GitHub Security Advisory.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-15T15:15:08.020",
    "last_modified": "2024-11-21T06:51:01.087",
    "fix_date": "2022-03-14T14:40:46Z"
  },
  "references": [
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/commit/73d0791d0575f955e830a3da4c3345f420d2f784",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/pull/222",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.10.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.11.0-RC.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/security/advisories/GHSA-2xmm-g482-4439",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/commit/73d0791d0575f955e830a3da4c3345f420d2f784",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/pull/222",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.10.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.11.0-RC.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/SyliusGridBundle/security/advisories/GHSA-2xmm-g482-4439",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:01.999668",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "SyliusGridBundle",
    "owner": "Sylius",
    "created_at": "2016-04-11T11:09:56Z",
    "updated_at": "2024-12-20T23:03:43Z",
    "pushed_at": "2024-12-05T08:11:57Z",
    "size": 1936,
    "stars": 122,
    "forks": 50,
    "open_issues": 43,
    "watchers": 122,
    "has_security_policy": false,
    "default_branch": "1.14",
    "protected_branches": [
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.4",
      "1.5",
      "1.6",
      "1.7",
      "1.8",
      "1.9",
      "1.10",
      "1.11",
      "1.12",
      "1.13",
      "1.14"
    ],
    "languages": {
      "PHP": 549636,
      "Twig": 4436
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:09:28.445650"
  }
}