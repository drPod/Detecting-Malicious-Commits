{
  "cve_id": "CVE-2022-24754",
  "github_data": {
    "repository": "pjsip/pjproject",
    "fix_commit": "d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
    "related_commits": [
      "d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
      "d27f79da11df7bc8bb56c2f291d71e54df8d2c47"
    ],
    "patch_url": "https://github.com/pjsip/pjproject/commit/d27f79da11df7bc8bb56c2f291d71e54df8d2c47.patch",
    "fix_commit_details": {
      "sha": "d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
      "commit_date": "2022-03-08T15:20:39Z",
      "author": {
        "login": "trengginas",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Use PJ_ASSERT_RETURN() on pjsip_auth_create_digest() and pjsua_init_tpselector() (#3009)",
        "length": 345,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 143,
        "additions": 99,
        "deletions": 44
      },
      "files": [
        {
          "filename": "pjsip/include/pjsip/sip_auth.h",
          "status": "modified",
          "additions": 39,
          "deletions": 9,
          "patch": "@@ -584,16 +584,46 @@ PJ_DECL(pj_status_t) pjsip_auth_srv_challenge( pjsip_auth_srv *auth_srv,\n  * @param realm\t\tRealm.\n  * @param cred_info\tCredential info.\n  * @param method\tSIP method.\n+ *\n+ * @return\t\tPJ_SUCCESS on success.\n  */\n-PJ_DECL(void) pjsip_auth_create_digest(pj_str_t *result,\n-\t\t\t\t       const pj_str_t *nonce,\n-\t\t\t\t       const pj_str_t *nc,\n-\t\t\t\t       const pj_str_t *cnonce,\n-\t\t\t\t       const pj_str_t *qop,\n-\t\t\t\t       const pj_str_t *uri,\n-\t\t\t\t       const pj_str_t *realm,\n-\t\t\t\t       const pjsip_cred_info *cred_info,\n-\t\t\t\t       const pj_str_t *method);\n+PJ_DECL(pj_status_t) pjsip_auth_create_digest(pj_str_t *result,\n+\t\t\t\t\t      const pj_str_t *nonce,\n+\t\t\t\t\t      const pj_str_t *nc,\n+\t\t\t\t\t      const pj_str_t *cnonce,\n+\t\t\t\t\t      const pj_str_t *qop,\n+\t\t\t\t\t      const pj_str_t *uri,\n+\t\t\t\t\t      const pj_str_t *realm,\n+\t\t\t\t\t      const pjsip_cred_info *cred_info,\n+\t\t\t\t\t      const pj_str_t *method);\n+\n+/**\n+ * Helper function to create SHA-256 digest out of the specified \n+ * parameters.\n+ *\n+ * @param result\tString to store the response digest. This string\n+ *\t\t\tmust have been preallocated by caller with the \n+ *\t\t\tbuffer at least PJSIP_SHA256STRLEN (64 bytes) in size.\n+ * @param nonce\t\tOptional nonce.\n+ * @param nc\t\tNonce count.\n+ * @param cnonce\tOptional cnonce.\n+ * @param qop\t\tOptional qop.\n+ * @param uri\t\tURI.\n+ * @param realm\t\tRealm.\n+ * @param cred_info\tCredential info.\n+ * @param method\tSIP method.\n+ *\n+ * @return\t\tPJ_SUCCESS on success. \n+ */\n+PJ_DEF(pj_status_t) pjsip_auth_create_digestSHA256(pj_str_t* result,\n+\t\t\t\t\t    const pj_str_t* nonce,\n+\t\t\t\t\t    const pj_str_t* nc,\n+\t\t\t\t\t    const pj_str_t* cnonce,\n+\t\t\t\t\t    const pj_str_t* qop,\n+\t\t\t\t\t    const pj_str_t* uri,\n+\t\t\t\t\t    const pj_str_t* realm,\n+\t\t\t\t\t    const pjsip_cred_info* cred_info,\n+\t\t\t\t\t    const pj_str_t* method);\n \n /**\n  * @}"
        },
        {
          "filename": "pjsip/src/pjsip/sip_auth_aka.c",
          "status": "modified",
          "additions": 11,
          "deletions": 10,
          "patch": "@@ -57,18 +57,19 @@ PJ_DEF(pj_status_t) pjsip_auth_create_aka_response(\n     pj_uint8_t xmac[PJSIP_AKA_MACLEN];\n     pjsip_cred_info aka_cred;\n     int i, len;\n-    pj_status_t status;\n+    pj_status_t status = PJ_SUCCESS;\n \n     /* Check the algorithm is supported. */\n     if (chal->algorithm.slen==0 || pj_stricmp2(&chal->algorithm, \"md5\") == 0) {\n \t/*\n-\t * A normal MD5 authentication is requested. Fallbackt to the usual\n+\t * A normal MD5 authentication is requested. Fallback to the usual\n \t * MD5 digest creation.\n \t */\n-\tpjsip_auth_create_digest(&auth->response, &auth->nonce, &auth->nc,\n-\t\t\t\t &auth->cnonce, &auth->qop, &auth->uri,\n-\t\t\t\t &auth->realm, cred, method);\n-\treturn PJ_SUCCESS;\n+\tstatus = pjsip_auth_create_digest(&auth->response, &auth->nonce, \n+\t\t\t         &auth->nc, &auth->cnonce, &auth->qop, \n+\t\t\t         &auth->uri, &auth->realm, cred, method);\n+\n+\treturn status;\n \n     } else if (pj_stricmp(&chal->algorithm, &pjsip_AKAv1_MD5) == 0) {\n \t/*\n@@ -147,9 +148,9 @@ PJ_DEF(pj_status_t) pjsip_auth_create_aka_response(\n \taka_cred.data.ptr = (char*)res;\n \taka_cred.data.slen = PJSIP_AKA_RESLEN;\n \n-\tpjsip_auth_create_digest(&auth->response, &chal->nonce, \n+\tstatus = pjsip_auth_create_digest(&auth->response, &chal->nonce, \n \t\t\t\t &auth->nc, &auth->cnonce, &auth->qop, \n-\t\t\t\t &auth->uri, &chal->realm, &aka_cred, method);\n+\t\t\t\t &auth->uri, &chal->realm, &aka_cred, method);\t\n \n     } else if (aka_version == 2) {\n \n@@ -186,7 +187,7 @@ PJ_DEF(pj_status_t) pjsip_auth_create_aka_response(\n \t                 aka_cred.data.ptr, &len);\n \taka_cred.data.slen = hmac64_len;\n \n-\tpjsip_auth_create_digest(&auth->response, &chal->nonce, \n+\tstatus = pjsip_auth_create_digest(&auth->response, &chal->nonce, \n \t\t\t\t &auth->nc, &auth->cnonce, &auth->qop, \n \t\t\t\t &auth->uri, &chal->realm, &aka_cred, method);\n \n@@ -196,7 +197,7 @@ PJ_DEF(pj_status_t) pjsip_auth_create_aka_response(\n     }\n \n     /* Done */\n-    return PJ_SUCCESS;\n+    return status;\n }\n \n "
        },
        {
          "filename": "pjsip/src/pjsip/sip_auth_client.c",
          "status": "modified",
          "additions": 42,
          "deletions": 23,
          "patch": "@@ -160,15 +160,15 @@ static void digestNtoStr(const unsigned char digest[], int n, char *output)\n  * Create response digest based on the parameters and store the\n  * digest ASCII in 'result'.\n  */\n-PJ_DEF(void) pjsip_auth_create_digest( pj_str_t *result,\n-\t\t\t\t       const pj_str_t *nonce,\n-\t\t\t\t       const pj_str_t *nc,\n-\t\t\t\t       const pj_str_t *cnonce,\n-\t\t\t\t       const pj_str_t *qop,\n-\t\t\t\t       const pj_str_t *uri,\n-\t\t\t\t       const pj_str_t *realm,\n-\t\t\t\t       const pjsip_cred_info *cred_info,\n-\t\t\t\t       const pj_str_t *method)\n+PJ_DEF(pj_status_t) pjsip_auth_create_digest( pj_str_t *result,\n+\t\t\t\t\t      const pj_str_t *nonce,\n+\t\t\t\t\t      const pj_str_t *nc,\n+\t\t\t\t\t      const pj_str_t *cnonce,\n+\t\t\t\t\t      const pj_str_t *qop,\n+\t\t\t\t\t      const pj_str_t *uri,\n+\t\t\t\t\t      const pj_str_t *realm,\n+\t\t\t\t\t      const pjsip_cred_info *cred_info,\n+\t\t\t\t\t      const pj_str_t *method)\n {\n     char ha1[PJSIP_MD5STRLEN];\n     char ha2[PJSIP_MD5STRLEN];\n@@ -194,10 +194,18 @@ PJ_DEF(void) pjsip_auth_create_digest( pj_str_t *result,\n \tdigestNtoStr(digest, 16, ha1);\n \n     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST) {\n-\tpj_assert(cred_info->data.slen == 32);\n+\tif (cred_info->data.slen != 32) {\n+\t    pj_assert(!\"Invalid cred_info data length\");\n+\t    pj_bzero(result->ptr, result->slen);\n+\t    result->slen = 0;\n+\t    return PJ_EINVAL;\n+\t}\n \tpj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );\n     } else {\n \tpj_assert(!\"Invalid data_type\");\n+\tpj_bzero(result->ptr, result->slen);\n+\tresult->slen = 0;\n+\treturn PJ_EINVAL;\n     }\n \n     AUTH_TRACE_((THIS_FILE, \"  ha1=%.32s\", ha1));\n@@ -245,14 +253,15 @@ PJ_DEF(void) pjsip_auth_create_digest( pj_str_t *result,\n \n     AUTH_TRACE_((THIS_FILE, \"  digest=%.32s\", result->ptr));\n     AUTH_TRACE_((THIS_FILE, \"Digest created\"));\n+    return PJ_SUCCESS;\n }\n \n \n /*\n  * Create response SHA-256 digest based on the parameters and store the\n  * digest ASCII in 'result'.\n  */\n-PJ_DEF(void) pjsip_auth_create_digestSHA256(pj_str_t *result,\n+PJ_DEF(pj_status_t) pjsip_auth_create_digestSHA256(pj_str_t *result,\n \t\t\t\t\t    const pj_str_t *nonce,\n \t\t\t\t\t    const pj_str_t *nc,\n \t\t\t\t\t    const pj_str_t *cnonce,\n@@ -291,10 +300,18 @@ PJ_DEF(void) pjsip_auth_create_digestSHA256(pj_str_t *result,\n \n     } else if ((cred_info->data_type & PASSWD_MASK) == PJSIP_CRED_DATA_DIGEST)\n     {\n-\tpj_assert(cred_info->data.slen == 32);\n+\tif (cred_info->data.slen != 64) {\n+\t    pj_assert(!\"Invalid cred_info data length\");\n+\t    pj_bzero(result->ptr, result->slen);\n+\t    result->slen = 0;\n+\t    return PJ_EINVAL;\n+\t}\n \tpj_memcpy( ha1, cred_info->data.ptr, cred_info->data.slen );\n     } else {\n \tpj_assert(!\"Invalid data_type\");\n+\tpj_bzero(result->ptr, result->slen);\n+\tresult->slen = 0;\n+\treturn PJ_EINVAL;\n     }\n \n     AUTH_TRACE_((THIS_FILE, \" ha1=%.64s\", ha1));\n@@ -354,6 +371,7 @@ PJ_DEF(void) pjsip_auth_create_digestSHA256(pj_str_t *result,\n     PJ_UNUSED_ARG(cred_info);\n     PJ_UNUSED_ARG(method);\n #endif\n+    return PJ_SUCCESS;\n }\n \n \n@@ -408,6 +426,7 @@ static pj_status_t respond_digest( pj_pool_t *pool,\n {\n     const pj_str_t pjsip_AKAv1_MD5_STR = { \"AKAv1-MD5\", 9 };\n     pj_bool_t algo_sha256 = PJ_FALSE;\n+    pj_status_t status = PJ_SUCCESS;\n \n     /* Check if algo is sha256 */\n #if PJSIP_AUTH_HAS_DIGEST_SHA256\n@@ -452,14 +471,14 @@ static pj_status_t respond_digest( pj_pool_t *pool,\n \telse {\n \t    /* Convert digest to string and store in chal->response. */\n \t    if (algo_sha256) {\n-\t\tpjsip_auth_create_digestSHA256(\n+\t\tstatus = pjsip_auth_create_digestSHA256(\n \t\t\t\t\t  &cred->response, &cred->nonce, NULL,\n \t\t\t\t\t  NULL,  NULL, uri, &chal->realm,\n \t\t\t\t\t  cred_info, method);\n \t    } else {\n-\t\tpjsip_auth_create_digest( &cred->response, &cred->nonce, NULL,\n-\t\t\t\t\t  NULL,  NULL, uri, &chal->realm,\n-\t\t\t\t\t  cred_info, method);\n+\t\tstatus = pjsip_auth_create_digest( &cred->response, \n+\t\t\t\t\t  &cred->nonce, NULL, NULL, NULL, uri, \n+\t\t\t\t\t  &chal->realm, cred_info, method);\n \t    }\n \t}\n \n@@ -486,18 +505,18 @@ static pj_status_t respond_digest( pj_pool_t *pool,\n \telse {\n \t    /* Convert digest to string and store in chal->response. */\n \t    if (algo_sha256) {\n-\t\tpjsip_auth_create_digestSHA256(\n+\t\tstatus = pjsip_auth_create_digestSHA256(\n \t\t\t\t\t  &cred->response, &cred->nonce,\n \t\t\t\t\t  &cred->nc, &cred->cnonce,\n \t\t\t\t\t  &pjsip_AUTH_STR, uri,\n \t\t\t\t\t  &chal->realm, cred_info,\n \t\t\t\t\t  method);\n \t    } else {\n-\t\tpjsip_auth_create_digest( &cred->response, &cred->nonce,\n-\t\t\t\t\t  &cred->nc, &cred->cnonce,\n-\t\t\t\t\t  &pjsip_AUTH_STR, uri,\n-\t\t\t\t\t  &chal->realm, cred_info,\n-\t\t\t\t\t  method);\n+\t\tstatus = pjsip_auth_create_digest( &cred->response, \n+\t\t\t\t\t  &cred->nonce, &cred->nc, \n+\t\t\t\t          &cred->cnonce, &pjsip_AUTH_STR, \n+\t\t\t\t\t  uri, &chal->realm, \n+\t\t\t\t\t  cred_info, method);\n \t    }\n \t}\n \n@@ -508,7 +527,7 @@ static pj_status_t respond_digest( pj_pool_t *pool,\n \treturn PJSIP_EINVALIDQOP;\n     }\n \n-    return PJ_SUCCESS;\n+    return status;\n }\n \n #if defined(PJSIP_AUTH_QOP_SUPPORT) && PJSIP_AUTH_QOP_SUPPORT!=0"
        },
        {
          "filename": "pjsip/src/pjsip/sip_auth_server.c",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -79,6 +79,7 @@ static pj_status_t pjsip_auth_verify( const pjsip_authorization_hdr *hdr,\n     if (pj_stricmp(&hdr->scheme, &pjsip_DIGEST_STR) == 0) {\n \tchar digest_buf[PJSIP_MD5STRLEN];\n \tpj_str_t digest;\n+\tpj_status_t status;\n \tconst pjsip_digest_credential *dig = &hdr->credential.digest;\n \n \t/* Check that username and realm match. \n@@ -95,7 +96,7 @@ static pj_status_t pjsip_auth_verify( const pjsip_authorization_hdr *hdr,\n \tdigest.slen = PJSIP_MD5STRLEN;\n \n \t/* Create digest for comparison. */\n-\tpjsip_auth_create_digest(&digest, \n+\tstatus = pjsip_auth_create_digest(&digest, \n \t\t\t\t &hdr->credential.digest.nonce,\n \t\t\t\t &hdr->credential.digest.nc, \n \t\t\t\t &hdr->credential.digest.cnonce,\n@@ -105,6 +106,9 @@ static pj_status_t pjsip_auth_verify( const pjsip_authorization_hdr *hdr,\n \t\t\t\t cred_info, \n \t\t\t\t method );\n \n+\tif (status != PJ_SUCCESS)\n+\t    return status;\n+\n \t/* Compare digest. */\n \treturn (pj_stricmp(&digest, &hdr->credential.digest.response) == 0) ?\n \t       PJ_SUCCESS : PJSIP_EAUTHINVALIDDIGEST;"
        },
        {
          "filename": "pjsip/src/pjsua-lib/pjsua_core.c",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -3126,7 +3126,8 @@ void pjsua_init_tpselector(pjsua_transport_id tp_id,\n     if (tp_id == PJSUA_INVALID_ID)\n \treturn;\n \n-    pj_assert(tp_id >= 0 && tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata));\n+    PJ_ASSERT_RETURN(tp_id >= 0 && \n+\t\t     tp_id < (int)PJ_ARRAY_SIZE(pjsua_var.tpdata), );\n     tpdata = &pjsua_var.tpdata[tp_id];\n \n     flag = pjsip_transport_get_flag_from_type(tpdata->type);"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d8795bab62d6f99303b587f9d21d7e53cf2e5b10",
            "date": "2025-01-14T02:17:11Z",
            "author_login": "sauwming"
          },
          {
            "sha": "90293ccc52ea16c5d0e2f5c81768a59b4fc10481",
            "date": "2025-01-13T13:47:33Z",
            "author_login": "sauwming"
          },
          {
            "sha": "b955e8f925c3a932d07fe6d21b23ef33703b0ab8",
            "date": "2025-01-13T08:00:34Z",
            "author_login": "sauwming"
          },
          {
            "sha": "2d4b94a74e2738a174aa7c4cc2fe022620b67132",
            "date": "2025-01-10T09:49:42Z",
            "author_login": "bennylp"
          },
          {
            "sha": "6853491ade9b816b948c09ffe87c9e3aad5a5719",
            "date": "2025-01-10T03:58:44Z",
            "author_login": "nanangizz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-120",
    "description": "PJSIP is a free and open source multimedia communication library written in C language. In versions prior to and including 2.12 PJSIP there is a stack-buffer overflow vulnerability which only impacts PJSIP users who accept hashed digest credentials (credentials with data_type `PJSIP_CRED_DATA_DIGEST`). This issue has been patched in the master branch of the PJSIP repository and will be included with the next release. Users unable to upgrade need to check that the hashed digest data length must be equal to `PJSIP_MD5STRLEN` before passing to PJSIP.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-03-11T20:15:08.873",
    "last_modified": "2024-11-21T06:51:01.337",
    "fix_date": "2022-03-08T15:20:39Z"
  },
  "references": [
    {
      "url": "https://github.com/pjsip/pjproject/commit/d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pjsip/pjproject/security/advisories/GHSA-73f7-48m9-w662",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/03/msg00035.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/08/msg00038.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202210-37",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pjsip/pjproject/commit/d27f79da11df7bc8bb56c2f291d71e54df8d2c47",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pjsip/pjproject/security/advisories/GHSA-73f7-48m9-w662",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/03/msg00035.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/08/msg00038.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202210-37",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:01.990367",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pjproject",
    "owner": "pjsip",
    "created_at": "2016-01-24T05:00:33Z",
    "updated_at": "2025-01-14T02:17:17Z",
    "pushed_at": "2025-01-14T02:17:16Z",
    "size": 45263,
    "stars": 2158,
    "forks": 806,
    "open_issues": 9,
    "watchers": 2158,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 15266807,
      "C++": 1658301,
      "Python": 553465,
      "Shell": 394887,
      "Objective-C": 326996,
      "C#": 141563,
      "Makefile": 115036,
      "Java": 114622,
      "Mathematica": 86105,
      "SWIG": 41289,
      "Swift": 38034,
      "CSS": 21213,
      "Kotlin": 17696,
      "Rust": 4860,
      "Objective-C++": 3801,
      "HTML": 3320,
      "QMake": 3180,
      "Batchfile": 1805,
      "QML": 1121,
      "Pan": 288,
      "Prolog": 25
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:52:01.488842"
  }
}