{
  "cve_id": "CVE-2022-24762",
  "github_data": {
    "repository": "jcubic/sysend.js",
    "fix_commit": "a24f4b776fb18191ae0f7e3d90c2c7bec459431a",
    "related_commits": [
      "a24f4b776fb18191ae0f7e3d90c2c7bec459431a",
      "a24f4b776fb18191ae0f7e3d90c2c7bec459431a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a24f4b776fb18191ae0f7e3d90c2c7bec459431a",
      "commit_date": "2022-03-13T13:21:22Z",
      "author": {
        "login": "jcubic",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix security issue with Cross-Domain communication #33",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 167,
        "additions": 110,
        "deletions": 57
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 16,
          "deletions": 32,
          "patch": "@@ -2,20 +2,20 @@\n   <img src=\"https://github.com/jcubic/sysend.js/blob/master/assets/logo.svg?raw=true\" alt=\"Sysend.js logo\"/>\n </p>\n \n-[![npm](https://img.shields.io/badge/npm-1.9.0-blue.svg)](https://www.npmjs.com/package/sysend)\n-![bower](https://img.shields.io/badge/bower-1.9.0-yellow.svg)\n+[![npm](https://img.shields.io/badge/npm-1.10.0-blue.svg)](https://www.npmjs.com/package/sysend)\n+![bower](https://img.shields.io/badge/bower-1.10.0-yellow.svg)\n ![downloads](https://img.shields.io/npm/dt/sysend.svg)\n [![jsdelivr](https://img.shields.io/jsdelivr/npm/hm/sysend)](https://www.jsdelivr.com/package/npm/sysend)\n \n # [Web application synchronization between different tabs](https://github.com/jcubic/sysend.js/)\n \n-sysend.js is a small library that allows to send messages between pages that are\n-open in the same browser. It also supports Cross-Domain communication. The library doesn't have\n-any dependencies and uses the HTML5 LocalStorage API or BroadcastChannel API.\n-If your browser don't support BroadcastChannel (see [Can I Use](https://caniuse.com/#feat=broadcastchannel))\n-then you can send any object that can be serialized to JSON. With BroadcastChannel you can send any object\n-(it will not be serialized to string but the values are limited to the ones that can be copied by\n-the [structured cloning algorithm](https://html.spec.whatwg.org/multipage/structured-data.html#structured-clone)).\n+sysend.js is a small library that allows to send messages between pages that are open in the same\n+browser. It also supports Cross-Domain communication (Cross-Origin). The library doesn't have any\n+dependencies and uses the HTML5 LocalStorage API or BroadcastChannel API.  If your browser don't\n+support BroadcastChannel (see [Can I Use](https://caniuse.com/#feat=broadcastchannel)) then you can\n+send any object that can be serialized to JSON. With BroadcastChannel you can send any object (it\n+will not be serialized to string but the values are limited to the ones that can be copied by the\n+[structured cloning algorithm](https://html.spec.whatwg.org/multipage/structured-data.html#structured-clone)).\n You can also send empty notifications.\n \n Tested on:\n@@ -26,11 +26,10 @@ MacOS X El Captain: Safari 9, Chrome 56, Firefox 51\n \n ## Note about Safari 7+ and Cross-Domain communication\n \n-All cross-domain communication is disabled by default with Safari 7+.\n-Because of a feature that block 3rd party tracking for iframe, and any\n-iframe used for cross-domain communication runs in sandboxed environment.\n-That's why this library like any other solution for cross-domain comunication,\n-don't work on Safari.\n+All cross-domain communication is disabled by default with Safari 7+.  Because of a feature that\n+block 3rd party tracking for iframe, and any iframe used for cross-domain communication runs in\n+sandboxed environment.  That's why this library like any other solution for cross-domain\n+comunication, don't work on Safari.\n \n ## Installation\n \n@@ -106,23 +105,6 @@ And here is [multiple window tracking demo](https://jcubic.pl/windows.html). Ope\n \n ![Screen capture of Operating System Windows dragging and moving around animation](https://github.com/jcubic/sysend.js/blob/master/assets/windows-demo.gif?raw=true)\n \n-## Cross-domain Commuication Security\n-\n-The iframe communication proxy, allow attackers to listen to any events sent to the iframe.\n-All they need to do is to use this code on any domain to connect to sysend channel:\n-\n-```javascript\n-sysend.proxy('https://jcubic.pl/');\n-window.addEventListener('message', (e) => {\n-    console.log(e);\n-});\n-```\n-\n-This can lead to potential leaking of sensitive information from the website.\n-As of now there are not soution how to secure sysend cross-domain communication channel.\n-\n-**To protect your application, don't send any sensitive infromation with cross-domain communication!**\n-\n ## API\n \n sysend object:\n@@ -137,9 +119,11 @@ sysend object:\n | `emit(name, [, object])` | same as `broadcast()` but also invoke the even on same page | name - string - The name of the event<br>object - optional any data | 1.5.0 |\n | `post(<window_id>, [, object])` | send any data to other window | window_id - string of the target window<br>object - any data | 1.6.0 |\n | `list()` | returns a Promise of objects `{id:<UUID>, primary}` for other windows, you can use those to send a message with `post()` | NA | 1.6.0 |\n-| `track(event, callback)` | track inter window communication events  | event - any of the strings: `\"open\"`, `\"close\"`, `\"primary\"`, <br>`\"secondary\"`, `\"message\"`<br>callback - different function depend on the event:<br>* `\"message\"` - `{data, origin}` - where data is anything the `post()` sends, and origin is `id` of the sender.<br>* `\"open\"` - `{count, primary, id}` when new window/tab is opened<br>* `\"close\"` - `{count, primary, id, self}` when window/tab is closed<br>* `\"primary\"` and `\"secondary\"` function has no arguments and is called when window/tab become secondary or primary.<br>* `\"ready\"` - event when tracking is ready. | 1.6.0 except `ready` - 1.9.0 |\n+| `track(event, callback)` | track inter window communication events  | event - any of the strings: `\"open\"`, `\"close\"`, `\"primary\"`, <br>`\"secondary\"`, `\"message\"`<br>callback - different function depend on the event:<br>* `\"message\"` - `{data, origin}` - where data is anything the `post()` sends, and origin is `id` of the sender.<br>* `\"open\"` - `{count, primary, id}` when new window/tab is opened<br>* `\"close\"` - `{count, primary, id, self}` when window/tab is closed<br>* `\"primary\"` and `\"secondary\"` function has no arguments and is called when window/tab become secondary or primary.<br>* `\"ready\"` - event when tracking is ready. | 1.6.0 except `ready` - 1.10.0 |\n | `untrack(event [,callback])` | remove sigle event listener all all listeners for a given event | event - any of the strings `'open'`, `'close'`, `'primary'`, `'secondary'`, or `'message'`. | 1.6.0 |\n | `isPrimary()` | function returns true if window is primary (first open or last that remain) | NA  | 1.6.0 |\n+| `channel()` | function restrict cross domain communication to only allowed domains. You need to call this function on proxy iframe to limit number of domains (origins) that can listen and send events.  | any number of origins (e.g. 'http://localhost:8080' or 'https://jcubic.github.io') you can also use valid URL. | 1.10.0 |\n+\n \n To see details of using the API, see [demo.html source code](https://github.com/jcubic/sysend.js/blob/master/demo.html) or [TypeScript definition file](https://github.com/jcubic/sysend.js/blob/master/sysend.d.ts).\n "
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"sysend\",\n-  \"version\": \"1.9.0\",\n+  \"version\": \"1.10.0\",\n   \"description\": \"Web application synchronization between different tabs\",\n   \"main\": \"sysend.js\",\n   \"typings\": \"sysend.d.ts\","
        },
        {
          "filename": "proxy.html",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -3,7 +3,11 @@\n <head>\n     <meta charset=\"utf-8\" />\n     <meta name=\"robots\" content=\"noindex,nofollow\"/>\n-    <script src=\"https://cdn.jsdelivr.net/npm/sysend\"></script>\n+    <script src=\"./sysend.js\"></script>\n+    <!-- EDIT THIS FILE AND CALL sysend.channel() WITH ALLOWED DOMAINS -->\n+    <script>\n+       sysend.channel();\n+    </script>\n </head>\n <body>\n </body>"
        },
        {
          "filename": "sysend.d.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n /**@license\n- *  sysend.js - send messages between browser windows/tabs version 1.9.0\n+ *  sysend.js - send messages between browser windows/tabs version 1.10.0\n  *\n  *  Copyright (C) 2014-2022 Jakub T. Jankiewicz <https://jcubic.pl/me>\n  *  Released under the MIT license\n@@ -23,6 +23,7 @@ interface Sysend {\n     untrack(event: 'open' | 'close' | 'primary' | 'secondary' | 'message', fn?: (input?: any) => void): void;\n     list(): Promise<Array<{ id: string, primary: boolean }>>;\n     post(target: string, data?: any): void;\n+    channel(...domains: string[]): void;\n     isPrimary(): boolean;\n }\n "
        },
        {
          "filename": "sysend.js",
          "status": "modified",
          "additions": 86,
          "deletions": 22,
          "patch": "@@ -1,5 +1,5 @@\n /**@license\n- *  sysend.js - send messages between browser windows/tabs version 1.9.0\n+ *  sysend.js - send messages between browser windows/tabs version 1.10.0\n  *\n  *  Copyright (C) 2014-2022 Jakub T. Jankiewicz <https://jcubic.pl/me>\n  *  Released under the MIT license\n@@ -41,6 +41,7 @@\n     // id of the window/tab\n     var target_id = generate_uuid();\n     var target_count = 1;\n+    var domains;\n \n     var handlers = {\n         primary: [],\n@@ -84,6 +85,8 @@\n         },\n         proxy: function(url) {\n             if (typeof url === 'string' && host(url) !== window.location.host) {\n+                domains = domains || [];\n+                domains.push(origin(url));\n                 var iframe = document.createElement('iframe');\n                 iframe.style.width = iframe.style.height = 0;\n                 iframe.style.border = 'none';\n@@ -176,6 +179,9 @@\n                 });\n             });\n         },\n+        channel: function() {\n+            domains = [].slice.apply(arguments).map(origin);\n+        },\n         isPrimary: function() {\n             return primary;\n         }\n@@ -207,8 +213,6 @@\n         };\n     })();\n     // -------------------------------------------------------------------------\n-    init();\n-    // -------------------------------------------------------------------------\n     function delay(time) {\n         return function() {\n             return new Promise(function(resolve) {\n@@ -217,13 +221,37 @@\n         };\n     }\n     // -------------------------------------------------------------------------\n-    function onLoad() {\n+    var origin = (function() {\n+        var a = document.createElement('a');\n+        return function origin(url) {\n+            a.href = url;\n+            return a.origin;\n+        };\n+    })();\n+    // -------------------------------------------------------------------------\n+    // :: show only single message of this kind\n+    // -------------------------------------------------------------------------\n+    var warn_messages = [];\n+    function warn(message) {\n+        if (!warn_messages.includes(message)) {\n+            warn_messages.push(message);\n+            if (console && console.warn) {\n+                console.warn(message);\n+            } else {\n+                setTimeout(function() {\n+                    throw new Error(message);\n+                }, 0);\n+            }\n+        }\n+    }\n+    // -------------------------------------------------------------------------\n+    function on_load() {\n         return new Promise(function(resolve) {\n             window.addEventListener('load', resolve, true);\n-        }).then(iframeLoaded);\n+        }).then(iframe_loaded);\n     }\n     // -------------------------------------------------------------------------\n-    function iframeLoaded() {\n+    function iframe_loaded() {\n         var iframes = Array.from(document.querySelectorAll('iframe'));\n         return Promise.all(iframes.filter(function(iframe) {\n             return iframe.src;\n@@ -239,8 +267,30 @@\n         // the number was pick by experimentation\n     }\n     // -------------------------------------------------------------------------\n-    // ref: https://stackoverflow.com/a/8809472/387194\n-    // license: Public Domain/MIT\n+    // :: valid sysend message\n+    // -------------------------------------------------------------------------\n+    function is_sysend_post_message(e) {\n+        return typeof e.data === 'string' && e.data.match(prefix_re);\n+    }\n+    // -------------------------------------------------------------------------\n+    function is_valid_origin(origin) {\n+        if (!domains) {\n+            warn('Call sysend.channel() on iframe to restrict domains that can '+\n+                 'use sysend channel');\n+            return true;\n+        }\n+        var valid = domains.includes(origin);\n+        if (!valid) {\n+            warn(origin + ' domain is not on the list of allowed '+\n+                 'domains use sysend.channel() on iframe to allow'+\n+                 ' access to this domain');\n+        }\n+        return valid;\n+    }\n+    // -------------------------------------------------------------------------\n+    // :: ref: https://stackoverflow.com/a/8809472/387194\n+    // :: license: Public Domain/MIT\n+    // -------------------------------------------------------------------------\n     function generate_uuid() {\n         var d = new Date().getTime();\n         //Time in microseconds since page-load or 0 if unsupported\n@@ -295,20 +345,20 @@\n                 }\n                 return data;\n             } catch (e) {\n-                console.warn(prefix_message + e.message);\n+                warn(prefix_message + e.message);\n             }\n         };\n     }\n     // -------------------------------------------------------------------------\n     // ref: https://stackoverflow.com/a/326076/387194\n     // -------------------------------------------------------------------------\n-    function is_iframe() {\n+    var is_iframe = (function is_iframe() {\n         try {\n             return window.self !== window.top;\n         } catch (e) {\n             return true;\n         }\n-    }\n+    })();\n     // -------------------------------------------------------------------------\n     function send_to_iframes(key, data) {\n         // propagate events to iframes\n@@ -318,7 +368,9 @@\n               key: key,\n               data: data\n             };\n-            iframe.window.postMessage(JSON.stringify(payload), \"*\");\n+            if (is_valid_origin(origin(iframe.node.src))) {\n+                iframe.window.postMessage(JSON.stringify(payload), \"*\");\n+            }\n         });\n     }\n     // -------------------------------------------------------------------------\n@@ -387,21 +439,34 @@\n         sysend.emit('__primary__');\n     }\n     // -------------------------------------------------------------------------\n+    init();\n+    // -------------------------------------------------------------------------\n     function init() {\n         if (typeof window.BroadcastChannel === 'function') {\n             channel = new window.BroadcastChannel(uniq_prefix);\n             channel.addEventListener('message', function(event) {\n                 if (event.target.name === uniq_prefix) {\n-                    var key = event.data && event.data.name;\n-                    if (callbacks[key]) {\n-                        invoke(key, unserialize(event.data.data));\n+                    if (is_iframe) {\n+                        var payload = {\n+                          name: uniq_prefix,\n+                          data: event.data,\n+                          iframe_id: target_id\n+                        };\n+                        if (is_valid_origin(origin(document.referrer))) {\n+                            window.parent.postMessage(JSON.stringify(payload), \"*\");\n+                        }\n+                    } else {\n+                        var key = event.data && event.data.name;\n+                        if (callbacks[key]) {\n+                            invoke(key, unserialize(event.data.data));\n+                        }\n                     }\n                 }\n             });\n         } else if (is_private_mode()) {\n-            console.warn('Your browser don\\'t support localStorgage. ' +\n-                         'In Safari this is most of the time because ' +\n-                         'of \"Private Browsing Mode\"');\n+            warn('Your browser don\\'t support localStorgage. ' +\n+                 'In Safari this is most of the time because ' +\n+                 'of \"Private Browsing Mode\"');\n         } else {\n             // we need to clean up localStorage if broadcast called on unload\n             // because setTimeout will never fire, even setTimeout 0\n@@ -429,9 +494,9 @@\n             }, false);\n         }\n \n-        if (is_iframe()) {\n+        if (is_iframe) {\n             window.addEventListener('message', function(e) {\n-                if (typeof e.data === 'string' && e.data.match(prefix_re)) {\n+                if (is_sysend_post_message(e) && is_valid_origin(e.origin)) {\n                     try {\n                         var payload = JSON.parse(e.data);\n                         if (payload && payload.name === uniq_prefix) {\n@@ -448,7 +513,6 @@\n             init_visiblity();\n \n             sysend.track('visbility', function(visible) {\n-                console.log({visible, has_primary});\n                 if (visible && !has_primary) {\n                     become_primary();\n                 }\n@@ -518,7 +582,7 @@\n                 sysend.emit('__close__', { id: target_id, wasPrimary: primary });\n             }, { capture: true });\n \n-            onLoad().then(function() {\n+            on_load().then(function() {\n                 sysend.list().then(function(list) {\n                     target_count = list.length;\n                     primary = list.length === 0;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "dd8651579a4f9d0e425e41a37ca043b05805b2df",
            "date": "2024-10-14T20:51:08Z",
            "author_login": "jcubic"
          },
          {
            "sha": "f3ed43d7ebcc9da53605cafe9185a7c937c56615",
            "date": "2024-10-14T20:50:24Z",
            "author_login": "jcubic"
          },
          {
            "sha": "db02381ab67e3cc38a2b239a71e85b11508cea39",
            "date": "2024-10-11T18:41:19Z",
            "author_login": "jcubic"
          },
          {
            "sha": "1d3bec9bba621bc316437eb03c1357be7f1ce5f5",
            "date": "2024-07-14T16:02:07Z",
            "author_login": "jcubic"
          },
          {
            "sha": "2b4936df4d33519b621b819d730e4b63459b5bbb",
            "date": "2024-04-20T19:43:55Z",
            "author_login": "jcubic"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "sysend.js is a library that allows a user to send messages between pages that are open in the same browser. Users that use cross-origin communication may have their communications intercepted. Impact is limited by the communication occurring in the same browser. This issue has been patched in sysend.js version 1.10.0. The only currently known workaround is to avoid sending communications that a user does not want to have intercepted via sysend messages.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-14T23:15:08.427",
    "last_modified": "2024-11-21T06:51:02.423",
    "fix_date": "2022-03-13T13:21:22Z"
  },
  "references": [
    {
      "url": "https://github.com/jcubic/sysend.js/commit/a24f4b776fb18191ae0f7e3d90c2c7bec459431a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcubic/sysend.js/issues/33",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcubic/sysend.js/releases/tag/1.10.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcubic/sysend.js/security/advisories/GHSA-4vvg-x86p-mvqc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcubic/sysend.js/commit/a24f4b776fb18191ae0f7e3d90c2c7bec459431a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcubic/sysend.js/issues/33",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcubic/sysend.js/releases/tag/1.10.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcubic/sysend.js/security/advisories/GHSA-4vvg-x86p-mvqc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:01.996734",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "sysend.js",
    "owner": "jcubic",
    "created_at": "2014-06-12T11:27:32Z",
    "updated_at": "2025-01-17T21:06:36Z",
    "pushed_at": "2024-10-14T20:53:10Z",
    "size": 12801,
    "stars": 1140,
    "forks": 72,
    "open_issues": 4,
    "watchers": 1140,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 35042,
      "HTML": 12122,
      "TypeScript": 804
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:58:21.952253"
  }
}