{
  "cve_id": "CVE-2022-24770",
  "github_data": {
    "repository": "gradio-app/gradio",
    "fix_commit": "80fea89117358ee105973453fdc402398ae20239",
    "related_commits": [
      "80fea89117358ee105973453fdc402398ae20239",
      "80fea89117358ee105973453fdc402398ae20239"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "80fea89117358ee105973453fdc402398ae20239",
      "commit_date": "2022-03-14T20:46:37Z",
      "author": {
        "login": "abidlabs",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #817 from gradio-app/csv-sec",
        "length": 95,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 80,
        "additions": 68,
        "deletions": 12
      },
      "files": [
        {
          "filename": "gradio/flagging.py",
          "status": "modified",
          "additions": 13,
          "deletions": 11,
          "patch": "@@ -9,7 +9,7 @@\n from typing import Any, List, Optional\n \n import gradio as gr\n-from gradio import encryptor\n+from gradio import encryptor, utils\n \n \n class FlaggingCallback(ABC):\n@@ -99,7 +99,7 @@ def flag(\n \n         with open(log_filepath, \"a\", newline=\"\") as csvfile:\n             writer = csv.writer(csvfile)\n-            writer.writerow(csv_data)\n+            writer.writerow(utils.santize_for_csv(csv_data))\n \n         with open(log_filepath, \"r\") as csvfile:\n             line_count = len([None for row in csv.reader(csvfile)]) - 1\n@@ -186,7 +186,7 @@ def replace_flag_at_index(file_content):\n             content[flag_index][flag_col_index] = flag_option\n             output = io.StringIO()\n             writer = csv.writer(output)\n-            writer.writerows(content)\n+            writer.writerows(utils.santize_for_csv(content))\n             return output.getvalue()\n \n         if interface.encrypt:\n@@ -200,33 +200,35 @@ def replace_flag_at_index(file_content):\n                     file_content = decrypted_csv.decode()\n                     if flag_index is not None:\n                         file_content = replace_flag_at_index(file_content)\n-                    output.write(file_content)\n+                    output.write(utils.santize_for_csv(file_content))\n             writer = csv.writer(output)\n             if flag_index is None:\n                 if is_new:\n                     writer.writerow(headers)\n                 writer.writerow(csv_data)\n             with open(log_fp, \"wb\") as csvfile:\n                 csvfile.write(\n-                    encryptor.encrypt(\n-                        interface.encryption_key, output.getvalue().encode()\n+                    utils.santize_for_csv(\n+                        encryptor.encrypt(\n+                            interface.encryption_key, output.getvalue().encode()\n+                        )\n                     )\n                 )\n         else:\n             if flag_index is None:\n                 with open(log_fp, \"a\", newline=\"\") as csvfile:\n                     writer = csv.writer(csvfile)\n                     if is_new:\n-                        writer.writerow(headers)\n-                    writer.writerow(csv_data)\n+                        writer.writerow(utils.santize_for_csv(headers))\n+                    writer.writerow(utils.santize_for_csv(csv_data))\n             else:\n                 with open(log_fp) as csvfile:\n                     file_content = csvfile.read()\n                     file_content = replace_flag_at_index(file_content)\n                 with open(\n                     log_fp, \"w\", newline=\"\"\n                 ) as csvfile:  # newline parameter needed for Windows\n-                    csvfile.write(file_content)\n+                    csvfile.write(utils.santize_for_csv(file_content))\n         with open(log_fp, \"r\") as csvfile:\n             line_count = len([None for row in csv.reader(csvfile)]) - 1\n         return line_count\n@@ -368,7 +370,7 @@ def flag(\n                         \"_type\": \"Value\",\n                     }\n \n-                writer.writerow(headers)\n+                writer.writerow(utils.santize_for_csv(headers))\n \n             # Generate the row corresponding to the flagged sample\n             csv_data = []\n@@ -403,7 +405,7 @@ def flag(\n             if flag_option is not None:\n                 csv_data.append(flag_option)\n \n-            writer.writerow(csv_data)\n+            writer.writerow(utils.santize_for_csv(csv_data))\n \n         if is_new:\n             json.dump(infos, open(self.infos_file, \"w\"))"
        },
        {
          "filename": "gradio/utils.py",
          "status": "modified",
          "additions": 36,
          "deletions": 1,
          "patch": "@@ -2,6 +2,7 @@\n \n from __future__ import annotations\n \n+import copy\n import csv\n import inspect\n import json\n@@ -10,7 +11,7 @@\n import random\n import warnings\n from distutils.version import StrictVersion\n-from typing import TYPE_CHECKING, Any, Callable, Dict\n+from typing import TYPE_CHECKING, Any, Callable, Dict, List\n \n import aiohttp\n import analytics\n@@ -286,3 +287,37 @@ def get_default_args(func: Callable) -> Dict[str, Any]:\n         v.default if v.default is not inspect.Parameter.empty else None\n         for v in signature.parameters.values()\n     ]\n+\n+\n+def santize_for_csv(data: str | List[str] | List[List[str]]):\n+    \"\"\"Sanitizes data so that it can be safely written to a CSV file.\"\"\"\n+\n+    def sanitize(item):\n+        return \"'\" + item\n+\n+    unsafe_prefixes = (\"+\", \"=\", \"-\", \"@\")\n+    warning_message = \"Sanitizing flagged data by escaping cell contents that begin \"\n+    \"with one of the following characters: '+', '=', '-', '@'.\"\n+\n+    if isinstance(data, str):\n+        if data.startswith(unsafe_prefixes):\n+            warnings.warn(warning_message)\n+            return sanitize(data)\n+        return data\n+    elif isinstance(data, list) and isinstance(data[0], str):\n+        sanitized_data = copy.deepcopy(data)\n+        for index, item in enumerate(data):\n+            if item.startswith(unsafe_prefixes):\n+                warnings.warn(warning_message)\n+                sanitized_data[index] = sanitize(item)\n+        return sanitized_data\n+    elif isinstance(data[0], list) and isinstance(data[0][0], str):\n+        sanitized_data = copy.deepcopy(data)\n+        for outer_index, sublist in enumerate(data):\n+            for inner_index, item in enumerate(sublist):\n+                if item.startswith(unsafe_prefixes):\n+                    warnings.warn(warning_message)\n+                    sanitized_data[outer_index][inner_index] = sanitize(item)\n+        return sanitized_data\n+    else:\n+        raise ValueError(\"Unsupported data type: \" + str(type(data)))"
        },
        {
          "filename": "test/test_utils.py",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -15,6 +15,7 @@\n     json,\n     launch_analytics,\n     readme_to_html,\n+    santize_for_csv,\n     version_check,\n )\n \n@@ -116,5 +117,23 @@ def test_get_ip_without_internet(self, mock_get):\n         self.assertEqual(ip, \"No internet connection\")\n \n \n+class TestSanitizeForCSV(unittest.TestCase):\n+    def test_safe(self):\n+        safe_data = santize_for_csv(\"abc\")\n+        self.assertEquals(safe_data, \"abc\")\n+        safe_data = santize_for_csv([\"def\"])\n+        self.assertEquals(safe_data, [\"def\"])\n+        safe_data = santize_for_csv([[\"abc\"]])\n+        self.assertEquals(safe_data, [[\"abc\"]])\n+\n+    def test_unsafe(self):\n+        safe_data = santize_for_csv(\"=abc\")\n+        self.assertEquals(safe_data, \"'=abc\")\n+        safe_data = santize_for_csv([\"abc\", \"+abc\"])\n+        self.assertEquals(safe_data, [\"abc\", \"'+abc\"])\n+        safe_data = santize_for_csv([[\"abc\", \"=abc\"]])\n+        self.assertEquals(safe_data, [[\"abc\", \"'=abc\"]])\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7174340c00ce8f9a6af490e994f334ff084d57b6",
            "date": "2025-01-25T00:51:04Z",
            "author_login": "ddayto21"
          },
          {
            "sha": "36084466301c1c7242bb44ab2d5271d508cafa65",
            "date": "2025-01-24T03:38:46Z",
            "author_login": "gradio-pr-bot"
          },
          {
            "sha": "90e0b47be30687347d5d7f2ec8bff16ac6a99560",
            "date": "2025-01-24T03:31:32Z",
            "author_login": "LArkema"
          },
          {
            "sha": "92dda15f6d1c71929d3bdca1910734309db72458",
            "date": "2025-01-24T03:13:36Z",
            "author_login": "abidlabs"
          },
          {
            "sha": "516d98b74bb8bbea7194e9963eb44d1864852150",
            "date": "2025-01-24T02:06:01Z",
            "author_login": "abidlabs"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-1236",
    "description": "`gradio` is an open source framework for building interactive machine learning models and demos. Prior to version 2.8.11, `gradio` suffers from Improper Neutralization of Formula Elements in a CSV File. The `gradio` library has a flagging functionality which saves input/output data into a CSV file on the developer's computer. This can allow a user to save arbitrary text into the CSV file, such as commands. If a program like MS Excel opens such a file, then it automatically runs these commands, which could lead to arbitrary commands running on the user's computer. The problem has been patched as of `2.8.11`, which escapes the saved csv with single quotes. As a workaround, avoid opening csv files generated by `gradio` with Excel or similar spreadsheet programs.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-17T21:15:08.133",
    "last_modified": "2024-11-21T06:51:03.740",
    "fix_date": "2022-03-14T20:46:37Z"
  },
  "references": [
    {
      "url": "https://github.com/gradio-app/gradio/commit/80fea89117358ee105973453fdc402398ae20239",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradio-app/gradio/pull/817",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradio-app/gradio/security/advisories/GHSA-f8xq-q7px-wg8c",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradio-app/gradio/commit/80fea89117358ee105973453fdc402398ae20239",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradio-app/gradio/pull/817",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradio-app/gradio/security/advisories/GHSA-f8xq-q7px-wg8c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.034991",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "gradio",
    "owner": "gradio-app",
    "created_at": "2018-12-19T08:24:04Z",
    "updated_at": "2025-01-26T07:02:04Z",
    "pushed_at": "2025-01-25T01:55:36Z",
    "size": 280265,
    "stars": 35496,
    "forks": 2678,
    "open_issues": 454,
    "watchers": 35496,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 3126379,
      "Svelte": 1185093,
      "TypeScript": 963828,
      "JavaScript": 60825,
      "CSS": 51082,
      "Jupyter Notebook": 32113,
      "HTML": 22988,
      "Batchfile": 6463,
      "Shell": 6049,
      "MDX": 1670
    },
    "commit_activity": {
      "total_commits_last_year": 1161,
      "avg_commits_per_week": 22.326923076923077,
      "days_active_last_year": 253
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:41:58.788413"
  }
}