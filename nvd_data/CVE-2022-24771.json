{
  "cve_id": "CVE-2022-24771",
  "github_data": {
    "repository": "digitalbazaar/forge",
    "fix_commit": "3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
    "related_commits": [
      "3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
      "3f0b49a0573ef1bb7af7f5673c0cfebf00424df1"
    ],
    "patch_url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1.patch",
    "fix_commit_details": {
      "sha": "3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
      "commit_date": "2022-03-08T00:53:18Z",
      "author": {
        "login": "davidlehn",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix signature verification issues.",
        "length": 2191,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 288,
        "additions": 284,
        "deletions": 4
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -3,8 +3,46 @@ Forge ChangeLog\n \n ## 1.3.0 - 2022-XXX\n \n+### Security\n+- **SECURITY**: Three RSA PKCS#1 v1.5 signature verification issues were\n+  reported by Moosa Yahyazadeh (moosa-yahyazadeh@uiowa.edu).\n+  - Leniency in checking `digestAlgorithm` structure can lead to signature\n+    forgery.\n+    - The code is lenient in checking the digest algorithm structure. This can\n+      allow a crafted structure that steals padding bytes and uses unchecked\n+      portion of the PKCS#1 encoded message to forge a signature when a low\n+      public exponent is being used. For more information, please see\n+      [\"Bleichenbacher's RSA signature forgery based on implementation\n+      error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\n+      by Hal Finney.\n+  - Failing to check tailing garbage bytes can lead to signature forgery.\n+    - The code does not check for tailing garbage bytes after decoding a\n+      `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed\n+      and garbage data added to forge a signature when a low public exponent is\n+      being used.  For more information, please see [\"Bleichenbacher's RSA\n+      signature forgery based on implementation\n+      error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\n+      by Hal Finney.\n+  - Leniency in checking type octet.\n+    - `DigestInfo` is not properly checked for proper ASN.1 structure. This can\n+      lead to successful verification with signatures that contain invalid\n+      structures but a valid digest.\n+\n ### Fixed\n - [asn1] Add fallback to pretty print invalid UTF8 data.\n+- [asn1] `fromDer` is now more strict and will default to ensuring all input\n+  bytes are parsed or throw an error. A new option `parseAllBytes` can disable\n+  this behavior.\n+  - **NOTE**: The previous behavior is being changed since it can lead to\n+    security issues with crafted inputs. It is possible that code doing custom\n+    DER parsing may need to adapt to this new behavior and optional flag.\n+- [rsa] Add and use a validator to check for proper structure of parsed ASN.1\n+  `RSASSA-PKCS-v1_5` `DigestInfo` data. Additionally check that the hash\n+  algorithm identifier is a known value. An invalid `DigestInfo` or algorithm\n+  identifier will now cause an error to be thrown.\n+\n+### Added\n+- [oid] Added `1.2.840.113549.2.2` / `md2` for hash algorithm checking.\n \n ## 1.2.1 - 2022-01-11\n "
        },
        {
          "filename": "lib/asn1.js",
          "status": "modified",
          "additions": 18,
          "deletions": 1,
          "patch": "@@ -411,31 +411,40 @@ var _getValueLength = function(bytes, remaining) {\n  * @param [options] object with options or boolean strict flag\n  *          [strict] true to be strict when checking value lengths, false to\n  *            allow truncated values (default: true).\n+ *          [parseAllBytes] true to ensure all bytes are parsed\n+ *            (default: true)\n  *          [decodeBitStrings] true to attempt to decode the content of\n  *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that\n  *            without schema support to understand the data context this can\n  *            erroneously decode values that happen to be valid ASN.1. This\n  *            flag will be deprecated or removed as soon as schema support is\n  *            available. (default: true)\n  *\n+ * @throws Will throw an error for various malformed input conditions.\n+ *\n  * @return the parsed asn1 object.\n  */\n asn1.fromDer = function(bytes, options) {\n   if(options === undefined) {\n     options = {\n       strict: true,\n+      parseAllBytes: true,\n       decodeBitStrings: true\n     };\n   }\n   if(typeof options === 'boolean') {\n     options = {\n       strict: options,\n+      parseAllBytes: true,\n       decodeBitStrings: true\n     };\n   }\n   if(!('strict' in options)) {\n     options.strict = true;\n   }\n+  if(!('parseAllBytes' in options)) {\n+    options.parseAllBytes = true;\n+  }\n   if(!('decodeBitStrings' in options)) {\n     options.decodeBitStrings = true;\n   }\n@@ -445,7 +454,15 @@ asn1.fromDer = function(bytes, options) {\n     bytes = forge.util.createBuffer(bytes);\n   }\n \n-  return _fromDer(bytes, bytes.length(), 0, options);\n+  var byteCount = bytes.length();\n+  var value = _fromDer(bytes, bytes.length(), 0, options);\n+  if(options.parseAllBytes && bytes.length() !== 0) {\n+    var error = new Error('Unparsed DER bytes remain after ASN.1 parsing.');\n+    error.byteCount = byteCount;\n+    error.remaining = bytes.length();\n+    throw error;\n+  }\n+  return value;\n };\n \n /**"
        },
        {
          "filename": "lib/oids.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -47,6 +47,7 @@ _IN('1.3.14.3.2.29', 'sha1WithRSASignature');\n _IN('2.16.840.1.101.3.4.2.1', 'sha256');\n _IN('2.16.840.1.101.3.4.2.2', 'sha384');\n _IN('2.16.840.1.101.3.4.2.3', 'sha512');\n+_IN('1.2.840.113549.2.2', 'md2');\n _IN('1.2.840.113549.2.5', 'md5');\n \n // pkcs#7 content types"
        },
        {
          "filename": "lib/rsa.js",
          "status": "modified",
          "additions": 77,
          "deletions": 3,
          "patch": "@@ -264,6 +264,40 @@ var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {\n   }]\n };\n \n+// validator for a DigestInfo structure\n+var digestInfoValidator = {\n+  name: 'DigestInfo',\n+  tagClass: asn1.Class.UNIVERSAL,\n+  type: asn1.Type.SEQUENCE,\n+  constructed: true,\n+  value: [{\n+    name: 'DigestInfo.DigestAlgorithm',\n+    tagClass: asn1.Class.UNIVERSAL,\n+    type: asn1.Type.SEQUENCE,\n+    constructed: true,\n+    value: [{\n+      name: 'DigestInfo.DigestAlgorithm.algorithmIdentifier',\n+      tagClass: asn1.Class.UNIVERSAL,\n+      type: asn1.Type.OID,\n+      constructed: false,\n+      capture: 'algorithmIdentifier'\n+    }, {\n+      // NULL paramters\n+      name: 'DigestInfo.DigestAlgorithm.parameters',\n+      tagClass: asn1.Class.UNIVERSAL,\n+      type: asn1.Type.NULL,\n+      constructed: false\n+    }]\n+  }, {\n+    // digest\n+    name: 'DigestInfo.digest',\n+    tagClass: asn1.Class.UNIVERSAL,\n+    type: asn1.Type.OCTETSTRING,\n+    constructed: false,\n+    capture: 'digest'\n+  }]\n+};\n+\n /**\n  * Wrap digest in DigestInfo object.\n  *\n@@ -1092,25 +1126,65 @@ pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {\n    *          a Forge PSS object for RSASSA-PSS,\n    *          'NONE' or null for none, DigestInfo will not be expected, but\n    *            PKCS#1 v1.5 padding will still be used.\n+   * @param options optional verify options\n+   *          _parseAllDigestBytes testing flag to control parsing of all\n+   *            digest bytes. Unsupported and not for general usage.\n+   *            (default: true)\n    *\n    * @return true if the signature was verified, false if not.\n    */\n-  key.verify = function(digest, signature, scheme) {\n+  key.verify = function(digest, signature, scheme, options) {\n     if(typeof scheme === 'string') {\n       scheme = scheme.toUpperCase();\n     } else if(scheme === undefined) {\n       scheme = 'RSASSA-PKCS1-V1_5';\n     }\n+    if(options === undefined) {\n+      options = {\n+        _parseAllDigestBytes: true\n+      };\n+    }\n+    if(!('_parseAllDigestBytes' in options)) {\n+      options._parseAllDigestBytes = true;\n+    }\n \n     if(scheme === 'RSASSA-PKCS1-V1_5') {\n       scheme = {\n         verify: function(digest, d) {\n           // remove padding\n           d = _decodePkcs1_v1_5(d, key, true);\n           // d is ASN.1 BER-encoded DigestInfo\n-          var obj = asn1.fromDer(d);\n+          var obj = asn1.fromDer(d, {\n+            parseAllBytes: options._parseAllDigestBytes\n+          });\n+\n+          // validate DigestInfo\n+          var capture = {};\n+          var errors = [];\n+          if(!asn1.validate(obj, digestInfoValidator, capture, errors)) {\n+            var error = new Error(\n+              'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 ' +\n+              'DigestInfo value.');\n+            error.errors = errors;\n+            throw error;\n+          }\n+          // check hash algorithm identifier\n+          // FIXME: add support to vaidator for strict value choices\n+          var oid = asn1.derToOid(capture.algorithmIdentifier);\n+          if(!(oid === forge.oids.md2 ||\n+            oid === forge.oids.md5 ||\n+            oid === forge.oids.sha1 ||\n+            oid === forge.oids.sha256 ||\n+            oid === forge.oids.sha384 ||\n+            oid === forge.oids.sha512)) {\n+            var error = new Error(\n+              'Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.');\n+            error.oid = oid;\n+            throw error;\n+          }\n+\n           // compare the given digest to the decrypted one\n-          return digest === obj.value[1].value;\n+          return digest === capture.digest;\n         }\n       };\n     } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {"
        },
        {
          "filename": "tests/unit/rsa.js",
          "status": "modified",
          "additions": 150,
          "deletions": 0,
          "patch": "@@ -1,5 +1,6 @@\n var ASSERT = require('assert');\n var FORGE = require('../../lib/forge');\n+var JSBN = require('../../lib/jsbn');\n var MD = require('../../lib/md.all');\n var MGF = require('../../lib/mgf');\n var PKI = require('../../lib/pki');\n@@ -773,5 +774,154 @@ var UTIL = require('../../lib/util');\n         });\n       }\n     })();\n+\n+    describe('bad data', function() {\n+      // params for tests\n+\n+      // public modulus / 256 bytes\n+      var N = new JSBN.BigInteger(\n+        'E932AC92252F585B3A80A4DD76A897C8B7652952FE788F6EC8DD640587A1EE56' +\n+        '47670A8AD4C2BE0F9FA6E49C605ADF77B5174230AF7BD50E5D6D6D6D28CCF0A8' +\n+        '86A514CC72E51D209CC772A52EF419F6A953F3135929588EBE9B351FCA61CED7' +\n+        '8F346FE00DBB6306E5C2A4C6DFC3779AF85AB417371CF34D8387B9B30AE46D7A' +\n+        '5FF5A655B8D8455F1B94AE736989D60A6F2FD5CADBFFBD504C5A756A2E6BB5CE' +\n+        'CC13BCA7503F6DF8B52ACE5C410997E98809DB4DC30D943DE4E812A47553DCE5' +\n+        '4844A78E36401D13F77DC650619FED88D8B3926E3D8E319C80C744779AC5D6AB' +\n+        'E252896950917476ECE5E8FC27D5F053D6018D91B502C4787558A002B9283DA7',\n+        16);\n+\n+      // private exponent\n+      var d = new JSBN.BigInteger(\n+        '009b771db6c374e59227006de8f9c5ba85cf98c63754505f9f30939803afc149' +\n+        '8eda44b1b1e32c7eb51519edbd9591ea4fce0f8175ca528e09939e48f37088a0' +\n+        '7059c36332f74368c06884f718c9f8114f1b8d4cb790c63b09d46778bfdc4134' +\n+        '8fb4cd9feab3d24204992c6dd9ea824fbca591cd64cf68a233ad0526775c9848' +\n+        'fafa31528177e1f8df9181a8b945081106fd58bd3d73799b229575c4f3b29101' +\n+        'a03ee1f05472b3615784d9244ce0ed639c77e8e212ab52abddf4a928224b6b6f' +\n+        '74b7114786dd6071bd9113d7870c6b52c0bc8b9c102cfe321dac357e030ed6c5' +\n+        '80040ca41c13d6b4967811807ef2a225983ea9f88d67faa42620f42a4f5bdbe0' +\n+        '3b',\n+        16);\n+\n+      // public exponent\n+      var e = new JSBN.BigInteger('3');\n+\n+      // hash function\n+      // H = SHA-256 (OID = 0x608648016503040201)\n+\n+      // message\n+      var m = 'hello world!';\n+\n+      // to-be-signed RSA PKCS#1 v1.5 signature scheme input structure\n+      // I\n+\n+      // signature value obtained by I^d mod N\n+      // S\n+\n+      function _checkBadTailingGarbage(publicKey, S) {\n+        var md = MD.sha256.create();\n+        md.update(m);\n+\n+        ASSERT.throws(function() {\n+          publicKey.verify(md.digest().getBytes(), S);\n+        }, {\n+          message: 'Unparsed DER bytes remain after ASN.1 parsing.'\n+        });\n+      }\n+\n+      function _checkBadDigestInfo(publicKey, S, skipTailingGarbage) {\n+        var md = MD.sha256.create();\n+        md.update(m);\n+\n+        ASSERT.throws(function() {\n+          publicKey.verify(md.digest().getBytes(), S, undefined, {\n+            _parseAllDigestBytes: !skipTailingGarbage\n+          });\n+        }, {\n+          message: 'ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value.'\n+        });\n+      }\n+\n+      it('should check DigestInfo structure', function() {\n+        var publicKey = RSA.setPublicKey(N, e);\n+        var S = UTIL.binary.hex.decode(\n+          'e7410e05bdc38d1c72fab784be41df3d3de2ae83894d9ec86cb5fe343d5dc7d45df2a36fc60363faf32f0d37ab457648af40a48a6c53ae7af0575e92cb1ffc236d55e1325af8c71b3ac313f2630fb498b8e1546093aca1ed56026a96cb525d991159a2d6ccbfd5ef63ae718f8ace2469e357ccf3f6a048bbf9760f5fb36b9dd38fb330eab504f05078b83f5d8bd95dce8fccc6b46babd56f678300f2b39083e53e04e79f503358a6222f8dd66b561fea3a51ecf3be16c9e2ea6ba8aaed9fbe6ba510ff752e4529385f759d4d6120b15f65534248ed5bbb1307a7d0a9838329697f5fbae91f48e478dcbb77190f0d173b6cb8b1299cf4202570d25d11a7862b47');\n+\n+        _checkBadDigestInfo(publicKey, S);\n+      });\n+\n+      it('should check tailing garbage and DigestInfo [1]', function() {\n+        var publicKey = RSA.setPublicKey(N, e);\n+        var S = UTIL.binary.hex.decode(\n+          'c2ad2fa23c246ee98c453d69023e7ec05956b48bd0e287341ba9d342ad49b0fff2bcbb9adc50f1ccbfc54106305cc74a88db89ff94901a08359893a08426373e7949a8794798233445af6c48bc6ccbe278bdeb62c31e40c3bf0014af2faadcc9ed7885756789a5b95c2a355fbb3f04412f42e0f9ed335ab51af8f091a62aaaaf6577422220917daaece3ca2f4e66dc4e0574356762592052b406768c31c25cf4c1754e6da9dc3440e238c4f9b25cccc174dd1b17b027e0f9ce2763b86f0e6871690ddd018d2e774bc968c9c6e907a000daf5044ba31a0b9eefbd7b4b1ec466d20bc1dd3f020cb1091af6b476416da3024ea046b09fbbbc4d2355da9a2bc6ddb9');\n+\n+        _checkBadTailingGarbage(publicKey, S);\n+        _checkBadDigestInfo(publicKey, S, true);\n+      });\n+\n+      it('should check tailing garbage and DigestIfno [2]', function() {\n+        var publicKey = RSA.setPublicKey(N, e);\n+        var S = UTIL.binary.hex.decode(\n+          'a7c5812d7fc0eef766a481aac18c8c48483daf9b5ffb6614bd98ebe4ecb746dd493cf5dd2cbe16ecaa0b52109b744930eda49316605fc823fd57a68b5b2c62e8c1b158b26e1547a2e33cdd79427d7c513f07d02261ffe43db197d8cddca2b5b43c1df85aaed6e91aadd44a46bff7f5c70f1acc1a193917e3908444632f30e69cfe95d8036d3b6ad318eefd3952804f16613c969e6d13604bb4e723dfad24c42c8d9b5b16a9f5a4b40dcf17b167d319017740f9cc0836436c14d51c3d8a697f1fa2b65196deb5c21b1559c7dea7f598007fa7320909825009f8bf376491c298d8155a382e967042db952e995d14b2f961e1b22f911d1b77895def1c7ef229c87e');\n+\n+        _checkBadTailingGarbage(publicKey, S);\n+        _checkBadDigestInfo(publicKey, S, true);\n+      });\n+\n+      it('should check tailing garbage and DigestInfo [e=3]', function() {\n+        var N = new JSBN.BigInteger(\n+          '29438513389594867490232201282478838726734464161887801289068585100507839535636256317277708295678804401391394313946142335874609638666081950936114152574870224034382561784743283763961349980806819078028975594777103388280272392844112380900374508170221075553517641170327441791034393719271744724924194371070527213991317221667249077972700842199037403799480569910844701030644322616045408039715278394572328099192023924503077673178227614549351191204851805076359472439160130994385433568113626206477097769842080459156024112389406200687233341779381667082591421496870666931268548504674362230725756397511775557878046572472650613407143');\n+        var e = new JSBN.BigInteger('3');\n+        var publicKey = RSA.setPublicKey(N, e);\n+\n+        var S = UTIL.binary.hex.decode(\n+          '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002853ccc2cd32a8d430dd3bde37e70782ac82cdb7bce3c044219b50aefd689c20d3b840299f28e2fde6c67c8a7f9e528ac222fae947a6dee0d812e3c3b3452171717396e8bedc3132d92d8317e3593642640d1431ef');\n+\n+        _checkBadTailingGarbage(publicKey, S);\n+        _checkBadDigestInfo(publicKey, S, true);\n+      });\n+\n+      it('should check tailing garbage and DigestInfo [e=5]', function() {\n+        var N = new JSBN.BigInteger(\n+          '29438513389594867490232201282478838726734464161887801289068585100507839535636256317277708295678804401391394313946142335874609638666081950936114152574870224034382561784743283763961349980806819078028975594777103388280272392844112380900374508170221075553517641170327441791034393719271744724924194371070527213991317221667249077972700842199037403799480569910844701030644322616045408039715278394572328099192023924503077673178227614549351191204851805076359472439160130994385433568113626206477097769842080459156024112389406200687233341779381667082591421496870666931268548504674362230725756397511775557878046572472650613407143');\n+        var e = new JSBN.BigInteger('5');\n+        var publicKey = RSA.setPublicKey(N, e);\n+\n+        var S = UTIL.binary.hex.decode(\n+          '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005475fe2681d7125972bd2c2f2c7ab7b8003b03d4a487d6dee07c14eb5212a9fe0071b93f84ba5bb4b0cfaf20c976b11d902013');\n+\n+        _checkBadTailingGarbage(publicKey, S);\n+        _checkBadDigestInfo(publicKey, S, true);\n+      });\n+\n+      it('should check tailing garbage and DigestInfo [e=17]', function() {\n+        var N = new JSBN.BigInteger(\n+          '928365641661298526294114382771769657905695995680009680444002258089796055192245321020911051590379097587133341820043795407471021630328875171430160513961779154294247563032373839871165519961382202811828883364651574763124699947662060849683176689286181021501400261976653416725246403933613615758181648971537689642956474563961490989544033629566558036444831495046301215543198107208071526376318961481739278769122885031686763776874806317352741548232110892401401727195758835975800106904020775937891505819798776295294696516670437057465296389148672556848624501468669295285428387365416747516180652630054765393335211528084329716917821726670549155619986875030049107668205064454104328601041931972319966348825621299693193542460060799067674344247887198933507132592770898312271636011037138984729256515515185153334743685479709085410902269777563691615719884708908509618352792737826421059819474305949001978916949447029010362775778664826653636547333219983468955600305523140183269580452792812503399042201081785972707218144968460623663922470814889738564730816412201128810370324070680245854669130551872958017494277468722193869883705529583737211815974801292292728082721785855274147991979220001018156560009927148374995236030383474031418802554714043680969417015155298092390680188406177667101020936206754551985229636814788735090951246816765035721775759652424641736739668936540450232814857289312589998505627375553038062765493408460941597629291231866042662108291164359496334978563287523685872262509560463225096226739991402761266388226652661345282274508037924611589455395655512013078629375186805951823181371561289129616028768733583565439798508002546685505512478002960132511531323264596144585611962969372672455541953777622436993987703564293487820434112162562492086865147598436647725445230861246093950020099084994990632102506848190196407855705745530407617253129971665939853842224965079537303198339986953399517682750248394628026225887174258267456078564070387327653989505416943226163989004419377363130466566387761757272563996086708621913140580687414698126490572618509858141748692837570235128900627675422927964369356691123905362222855545719945605604307263252851081309622569225811979426856464673233875589085773616373798857001344093594417138323005260179781153950803127773817702016534081581157881295739782000814998795398671806283018844936919299070562538763900037469485135699677248580365379125702903186174995651938469412191388327852955727869345476087173047665259892129895247785416834855450881318585909376917039');\n+        var e = new JSBN.BigInteger('17');\n+        var publicKey = RSA.setPublicKey(N, e);\n+\n+        var S = UTIL.binary.hex.decode(\neb90acbec1bf590ba1e50960db8381fb5bdc363d46379d09956560a616b88616ce7fa4309dc45f47f5fa47d61bf66baa3d11732ce71768ded295f962');\n+\n+        _checkBadTailingGarbage(publicKey, S);\n+        _checkBadDigestInfo(publicKey, S, true);\n+      });\n+\n+      it('should check DigestInfo type octet [1]', function() {\n+        var publicKey = RSA.setPublicKey(N, e);\n+        var S = UTIL.binary.hex.decode(\n+          'd8298a199e1b6ac18f3c0067a004bd9ff7af87be6ad857d73cc3d24ef06195b82aaddb0194f8e61fc31453b9163062255e8baf9c480200d0991a5f764f63d5f6afd283b9cd6afe54f0b7f738707b4eb6b8807539bb627e74db87a50413ab18e504e37975aad1edc612bc8ecad53b81ea249deb5a2acc27e6419c61ab9acec6608f5ae6a2985ba0b6f42d831bc6cce4b044864154b935cf179967d129e0ad8eda9bfbb638121c3ff13c64d439632e62250d4be928a3deb112ef76a025c5d918051e601878eac0049fc9d82be9ae3475deb7ca515c830c20b91b7bedf2184fef66aea0bde62ccd1659afbfd1342322b095309451b1a87e007e640e368fb68a13c9');\n+\n+        _checkBadDigestInfo(publicKey, S);\n+      });\n+\n+      it('should check DigestInfo type octet [2]', function() {\n+        var publicKey = RSA.setPublicKey(N, e);\n+        var S = UTIL.binary.hex.decode(\n+          'c1acdd3aef5f0439c254980295fc0d81b628df00726310a1041d79b5dd94c11d3bcaf0236763c77c25d9ab49522ed2a7d6ea3a4e483a29838acd48f2d60a790275f4cd46e4b1d09c527a426ec373e8a21746ad3ea541d3b85ba4c303ff793ea8a0a3458e93a7ec42ed66f675d7c299b0817ac95f7f45b2f48c09b3c070171f31a33ac789da9943da5dabcda1c95b42531d45484ac1efde0fe0519077debb93183e63de8f80d7f3cbfecb03cbb44ac4a2d56699e33fca0663b79ca627755fc4fc684b4ab358a0b4ac5b7e9d0cc18b6ab6300b40781502a1c03d34f31dd19d81195f8a44bc03a2595a706f06f0cb39b8e3f4afe06675fe7439b057f1200a06f4fd');\n+\n+        _checkBadDigestInfo(publicKey, S);\n+      });\n+    });\n   });\n })();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2bb97afb5058285ef09bcf1d04d6bd6b87cffd58",
            "date": "2022-03-30T00:12:23Z",
            "author_login": "davidlehn"
          },
          {
            "sha": "a0a4a4264bedb3296974b9675349c9c190144aeb",
            "date": "2022-03-30T00:11:45Z",
            "author_login": "davidlehn"
          },
          {
            "sha": "a33830f61c351e8e3a34309767e8dd0de148376b",
            "date": "2022-03-30T00:11:45Z",
            "author_login": "davidlehn"
          },
          {
            "sha": "740954d747ac56b76a6e1ae12a057c9548843436",
            "date": "2022-03-30T00:01:31Z",
            "author_login": "davidlehn"
          },
          {
            "sha": "56f4316b4cc6592e678f8c416209c45984b6547b",
            "date": "2022-03-28T13:41:04Z",
            "author_login": "dhensby"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-347",
    "description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-18T14:15:10.280",
    "last_modified": "2024-11-21T06:51:03.860",
    "fix_date": "2022-03-08T00:53:18Z"
  },
  "references": [
    {
      "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.036345",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "forge",
    "owner": "digitalbazaar",
    "created_at": "2010-07-16T20:49:48Z",
    "updated_at": "2025-01-14T05:37:20Z",
    "pushed_at": "2024-08-14T16:12:50Z",
    "size": 5027,
    "stars": 5117,
    "forks": 794,
    "open_issues": 444,
    "watchers": 5117,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.6.x",
      "0.8.x",
      "main"
    ],
    "languages": {
      "JavaScript": 1642997,
      "HTML": 73308,
      "ActionScript": 25864,
      "C": 13441,
      "Python": 3547,
      "CSS": 1244
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:34:30.447028"
  }
}