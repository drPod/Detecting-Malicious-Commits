{
  "cve_id": "CVE-2022-24792",
  "github_data": {
    "repository": "pjsip/pjproject",
    "fix_commit": "947bc1ee6d05be10204b918df75a503415fd3213",
    "related_commits": [
      "947bc1ee6d05be10204b918df75a503415fd3213",
      "947bc1ee6d05be10204b918df75a503415fd3213"
    ],
    "patch_url": "https://github.com/pjsip/pjproject/commit/947bc1ee6d05be10204b918df75a503415fd3213.patch",
    "fix_commit_details": {
      "sha": "947bc1ee6d05be10204b918df75a503415fd3213",
      "commit_date": "2022-04-25T04:54:19Z",
      "author": {
        "login": "trengginas",
        "type": "User",
        "stats": {
          "total_commits": 458,
          "average_weekly_commits": 0.45663010967098705,
          "total_additions": 571682,
          "total_deletions": 325420,
          "weeks_active": 236
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-rwgw-vwxg-q799",
        "length": 467,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 61,
        "additions": 51,
        "deletions": 10
      },
      "files": [
        {
          "filename": "pjlib/include/pj/types.h",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -31,6 +31,7 @@\n  * @{\n  */\n #include <pj/config.h>\n+#include <pj/limits.h>\n \n PJ_BEGIN_DECL\n \n@@ -361,6 +362,13 @@ PJ_INLINE(pj_int32_t) pj_swap32(pj_int32_t val32)\n     return val32;\n }\n \n+/* This is to check if uint32 var will overflow if converted to signed long */\n+#define PJ_CHECK_OVERFLOW_UINT32_TO_LONG(uint32_var, exec_on_overflow) \\\n+\tdo { \\\n+\t    if (uint32_var > PJ_MAXLONG) { \\\n+\t\texec_on_overflow; \\\n+\t    } \\\n+\t} while (0)\n \n /**\n  * @}"
        },
        {
          "filename": "pjlib/src/pj/file_io_ansi.c",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@\n #include <pj/file_io.h>\n #include <pj/assert.h>\n #include <pj/errno.h>\n+#include <pj/limits.h>\n #include <stdio.h>\n #include <errno.h>\n \n@@ -124,6 +125,12 @@ PJ_DEF(pj_status_t) pj_file_setpos( pj_oshandle_t fd,\n {\n     int mode;\n \n+    if ((sizeof(pj_off_t) > sizeof(long)) &&\n+        (offset > PJ_MAXLONG || offset < PJ_MINLONG)) \n+    {\n+        return PJ_ENOTSUP;\n+    }\n+\n     switch (whence) {\n     case PJ_SEEK_SET:\n         mode = SEEK_SET; break;"
        },
        {
          "filename": "pjmedia/src/pjmedia/avi_player.c",
          "status": "modified",
          "additions": 18,
          "deletions": 4,
          "patch": "@@ -282,7 +282,7 @@ pjmedia_avi_player_create_streams(pj_pool_t *pool,\n     /* Read the headers of each stream. */\n     for (i = 0; i < avi_hdr.avih_hdr.num_streams; i++) {\n         pj_size_t elem = 0;\n-        pj_ssize_t size_to_read;\n+        pj_off_t size_to_read;\n \n         /* Read strl header */\n         status = file_read(fport[0]->fd, &avi_hdr.strl_hdr[i],\n@@ -335,6 +335,7 @@ pjmedia_avi_player_create_streams(pj_pool_t *pool,\n     do {\n         pjmedia_avi_subchunk ch;\n         int read = 0;\n+        pj_off_t size_to_read;\n \n         status = file_read(fport[0]->fd, &ch, sizeof(pjmedia_avi_subchunk));\n         if (status != PJ_SUCCESS) {\n@@ -349,7 +350,15 @@ pjmedia_avi_player_create_streams(pj_pool_t *pool,\n                 break;\n         }\n \n-        status = pj_file_setpos(fport[0]->fd, ch.len-read, PJ_SEEK_CUR);\n+        if (ch.len < read) {\n+            status = PJ_EINVAL;\n+            goto on_error;\n+        }\n+        PJ_CHECK_OVERFLOW_UINT32_TO_LONG(ch.len - read, \n+                                         status = PJ_EINVAL; goto on_error;);\n+        size_to_read = (pj_off_t)ch.len - read;\n+\n+        status = pj_file_setpos(fport[0]->fd, size_to_read, PJ_SEEK_CUR);\n         if (status != PJ_SUCCESS) {\n             goto on_error;\n         }\n@@ -775,6 +784,8 @@ static pj_status_t avi_get_frame(pjmedia_port *this_port,\n         /* Read new chunk data */\n         if (fport->size_left == 0) {\n             pj_off_t pos;\n+            pj_off_t ch_len;\n+\n             pj_file_getpos(fport->fd, &pos);\n \n             /* Data is padded to the nearest WORD boundary */\n@@ -788,6 +799,10 @@ static pj_status_t avi_get_frame(pjmedia_port *this_port,\n                 size_read = 0;\n                 goto on_error2;\n             }\n+            \n+            PJ_CHECK_OVERFLOW_UINT32_TO_LONG(ch.len, \n+                                         status = PJ_EINVAL;  goto on_error2;);\n+            ch_len = ch.len;\n \n             cid = (char *)&ch.id;\n             if (cid[0] >= '0' && cid[0] <= '9' &&\n@@ -814,8 +829,7 @@ static pj_status_t avi_get_frame(pjmedia_port *this_port,\n                     goto on_error2;\n                 }\n \n-                status = pj_file_setpos(fport->fd, ch.len,\n-                                        PJ_SEEK_CUR);\n+                status = pj_file_setpos(fport->fd, ch_len, PJ_SEEK_CUR);\n                 continue;\n             }\n             fport->size_left = ch.len;"
        },
        {
          "filename": "pjmedia/src/pjmedia/wav_player.c",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -188,7 +188,8 @@ PJ_DEF(pj_status_t) pjmedia_wav_player_port_create( pj_pool_t *pool,\n \t\t\t\t\t\t     pjmedia_port **p_port )\n {\n     pjmedia_wave_hdr wave_hdr;\n-    pj_ssize_t size_to_read, size_read;\n+    pj_ssize_t size_read;\n+    pj_off_t size_to_read;\n     struct file_reader_port *fport;\n     pjmedia_audio_format_detail *ad;\n     pj_off_t pos;\n@@ -234,7 +235,7 @@ PJ_DEF(pj_status_t) pjmedia_wav_player_port_create( pj_pool_t *pool,\n \treturn status;\n \n     /* Read the file header plus fmt header only. */\n-    size_read = size_to_read = sizeof(wave_hdr) - 8;\n+    size_to_read = size_read = sizeof(wave_hdr) - 8;\n     status = pj_file_read( fport->fd, &wave_hdr, &size_read);\n     if (status != PJ_SUCCESS) {\n \tpj_file_close(fport->fd);\n@@ -297,7 +298,9 @@ PJ_DEF(pj_status_t) pjmedia_wav_player_port_create( pj_pool_t *pool,\n      * fmt header data.\n      */\n     if (wave_hdr.fmt_hdr.len > 16) {\n-\tsize_to_read = wave_hdr.fmt_hdr.len - 16;\n+\tPJ_CHECK_OVERFLOW_UINT32_TO_LONG(wave_hdr.fmt_hdr.len - 16,\n+\t\t      pj_file_close(fport->fd); return PJMEDIA_ENOTVALIDWAVE;);\n+\tsize_to_read = (pj_off_t)wave_hdr.fmt_hdr.len - 16;\n \tstatus = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);\n \tif (status != PJ_SUCCESS) {\n \t    pj_file_close(fport->fd);\n@@ -326,7 +329,10 @@ PJ_DEF(pj_status_t) pjmedia_wav_player_port_create( pj_pool_t *pool,\n \t}\n \n \t/* Otherwise skip the chunk contents */\n+\tPJ_CHECK_OVERFLOW_UINT32_TO_LONG(subchunk.len, \n+\t\t      pj_file_close(fport->fd); return PJMEDIA_ENOTVALIDWAVE;);\n \tsize_to_read = subchunk.len;\n+\n \tstatus = pj_file_setpos(fport->fd, size_to_read, PJ_SEEK_CUR);\n \tif (status != PJ_SUCCESS) {\n \t    pj_file_close(fport->fd);"
        },
        {
          "filename": "pjmedia/src/pjmedia/wav_playlist.c",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -419,7 +419,8 @@ PJ_DEF(pj_status_t) pjmedia_wav_playlist_create(pj_pool_t *pool,\n     for (index=file_count-1; index>=0; index--) {\n \n \tpjmedia_wave_hdr wavehdr;\n-\tpj_ssize_t size_to_read, size_read;\n+\tpj_ssize_t size_read;\n+\tpj_off_t size_to_read;\n \n \t/* we end with the last one so we are good to go if still in function*/\n \tpj_memcpy(filename, file_list[index].ptr, file_list[index].slen);\n@@ -442,7 +443,7 @@ PJ_DEF(pj_status_t) pjmedia_wav_playlist_create(pj_pool_t *pool,\n \t    goto on_error;\n \t\n \t/* Read the file header plus fmt header only. */\n-\tsize_read = size_to_read = sizeof(wavehdr) - 8;\n+\tsize_to_read = size_read = sizeof(wavehdr) - 8;\t\n \tstatus = pj_file_read( fport->fd_list[index], &wavehdr, &size_read);\n \tif (status != PJ_SUCCESS) {\n \t    goto on_error;\n@@ -492,7 +493,9 @@ PJ_DEF(pj_status_t) pjmedia_wav_playlist_create(pj_pool_t *pool,\n \t * fmt header data.\n \t */\n \tif (wavehdr.fmt_hdr.len > 16) {\n-\t    size_to_read = wavehdr.fmt_hdr.len - 16;\n+\t    PJ_CHECK_OVERFLOW_UINT32_TO_LONG(wavehdr.fmt_hdr.len-16,\n+\t\t\t       status = PJMEDIA_ENOTVALIDWAVE; goto on_error;);\n+\t    size_to_read = (pj_off_t)wavehdr.fmt_hdr.len - 16;\n \t    status = pj_file_setpos(fport->fd_list[index], size_to_read, \n \t\t\t\t    PJ_SEEK_CUR);\n \t    if (status != PJ_SUCCESS) {\n@@ -522,7 +525,10 @@ PJ_DEF(pj_status_t) pjmedia_wav_playlist_create(pj_pool_t *pool,\n \t    }\n \t    \n \t    /* Otherwise skip the chunk contents */\n+\t    PJ_CHECK_OVERFLOW_UINT32_TO_LONG(subchunk.len, \n+\t\t\t       status = PJMEDIA_ENOTVALIDWAVE; goto on_error;);\n \t    size_to_read = subchunk.len;\n+\n \t    status = pj_file_setpos(fport->fd_list[index], size_to_read, \n \t\t\t\t    PJ_SEEK_CUR);\n \t    if (status != PJ_SUCCESS) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d8795bab62d6f99303b587f9d21d7e53cf2e5b10",
            "date": "2025-01-14T02:17:11Z",
            "author_login": "sauwming"
          },
          {
            "sha": "90293ccc52ea16c5d0e2f5c81768a59b4fc10481",
            "date": "2025-01-13T13:47:33Z",
            "author_login": "sauwming"
          },
          {
            "sha": "b955e8f925c3a932d07fe6d21b23ef33703b0ab8",
            "date": "2025-01-13T08:00:34Z",
            "author_login": "sauwming"
          },
          {
            "sha": "2d4b94a74e2738a174aa7c4cc2fe022620b67132",
            "date": "2025-01-10T09:49:42Z",
            "author_login": "bennylp"
          },
          {
            "sha": "6853491ade9b816b948c09ffe87c9e3aad5a5719",
            "date": "2025-01-10T03:58:44Z",
            "author_login": "nanangizz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "PJSIP is a free and open source multimedia communication library written in C. A denial-of-service vulnerability affects applications on a 32-bit systems that use PJSIP versions 2.12 and prior to play/read invalid WAV files. The vulnerability occurs when reading WAV file data chunks with length greater than 31-bit integers. The vulnerability does not affect 64-bit apps and should not affect apps that only plays trusted WAV files. A patch is available on the `master` branch of the `pjsip/project` GitHub repository. As a workaround, apps can reject a WAV file received from an unknown source or validate the file first.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-25T16:16:09.003",
    "last_modified": "2024-11-21T06:51:06.410",
    "fix_date": "2022-04-25T04:54:19Z"
  },
  "references": [
    {
      "url": "https://github.com/pjsip/pjproject/commit/947bc1ee6d05be10204b918df75a503415fd3213",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pjsip/pjproject/security/advisories/GHSA-rwgw-vwxg-q799",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/05/msg00047.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00021.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202210-37",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5285",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pjsip/pjproject/commit/947bc1ee6d05be10204b918df75a503415fd3213",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pjsip/pjproject/security/advisories/GHSA-rwgw-vwxg-q799",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/05/msg00047.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202210-37",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5285",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.415165",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pjproject",
    "owner": "pjsip",
    "created_at": "2016-01-24T05:00:33Z",
    "updated_at": "2025-01-14T02:17:17Z",
    "pushed_at": "2025-01-14T02:17:16Z",
    "size": 45263,
    "stars": 2158,
    "forks": 806,
    "open_issues": 9,
    "watchers": 2158,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 15266807,
      "C++": 1658301,
      "Python": 553465,
      "Shell": 394887,
      "Objective-C": 326996,
      "C#": 141563,
      "Makefile": 115036,
      "Java": 114622,
      "Mathematica": 86105,
      "SWIG": 41289,
      "Swift": 38034,
      "CSS": 21213,
      "Kotlin": 17696,
      "Rust": 4860,
      "Objective-C++": 3801,
      "HTML": 3320,
      "QMake": 3180,
      "Batchfile": 1805,
      "QML": 1121,
      "Pan": 288,
      "Prolog": 25
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:52:01.488842"
  }
}