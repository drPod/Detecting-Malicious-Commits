{
  "cve_id": "CVE-2022-24797",
  "github_data": {
    "repository": "pomerium/pomerium",
    "fix_commit": "b435f73e2b54088da2aca5e8c3aa1808293d6903",
    "related_commits": [
      "b435f73e2b54088da2aca5e8c3aa1808293d6903",
      "b435f73e2b54088da2aca5e8c3aa1808293d6903"
    ],
    "patch_url": "https://github.com/pomerium/pomerium/commit/b435f73e2b54088da2aca5e8c3aa1808293d6903.patch",
    "fix_commit_details": {
      "sha": "b435f73e2b54088da2aca5e8c3aa1808293d6903",
      "commit_date": "2022-03-30T15:37:37Z",
      "author": {
        "login": "calebdoxsey",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "authenticate: fix debug and metrics endpoints (#3212)",
        "length": 53,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 295,
        "additions": 167,
        "deletions": 128
      },
      "files": [
        {
          "filename": "config/config.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -18,6 +18,10 @@ type Config struct {\n \tHTTPPort string\n \t// OutboundPort is the port the outbound gRPC listener is running on.\n \tOutboundPort string\n+\t// MetricsPort is the port the metrics listener is running on.\n+\tMetricsPort string\n+\t// DebugPort is the port the debug listener is running on.\n+\tDebugPort string\n }\n \n // Clone creates a clone of the config.\n@@ -32,6 +36,8 @@ func (cfg *Config) Clone() *Config {\n \t\tGRPCPort:     cfg.GRPCPort,\n \t\tHTTPPort:     cfg.HTTPPort,\n \t\tOutboundPort: cfg.OutboundPort,\n+\t\tMetricsPort:  cfg.MetricsPort,\n+\t\tDebugPort:    cfg.DebugPort,\n \t}\n }\n "
        },
        {
          "filename": "config/config_source.go",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -110,13 +110,15 @@ func NewFileOrEnvironmentSource(\n \t\treturn nil, err\n \t}\n \n-\tports, err := netutil.AllocatePorts(3)\n+\tports, err := netutil.AllocatePorts(5)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \tgrpcPort := ports[0]\n \thttpPort := ports[1]\n \toutboundPort := ports[2]\n+\tmetricsPort := ports[3]\n+\tdebugPort := ports[4]\n \n \tcfg := &Config{\n \t\tOptions:      options,\n@@ -125,6 +127,8 @@ func NewFileOrEnvironmentSource(\n \t\tGRPCPort:     grpcPort,\n \t\tHTTPPort:     httpPort,\n \t\tOutboundPort: outboundPort,\n+\t\tMetricsPort:  metricsPort,\n+\t\tDebugPort:    debugPort,\n \t}\n \tmetrics.SetConfigInfo(ctx, cfg.Options.Services, \"local\", cfg.Checksum(), true)\n "
        },
        {
          "filename": "config/envoyconfig/bootstrap_test.go",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -11,7 +11,7 @@ import (\n )\n \n func TestBuilder_BuildBootstrapAdmin(t *testing.T) {\n-\tb := New(\"local-grpc\", \"local-http\", filemgr.NewManager(), nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", filemgr.NewManager(), nil)\n \tt.Run(\"valid\", func(t *testing.T) {\n \t\tadminCfg, err := b.BuildBootstrapAdmin(&config.Config{\n \t\t\tOptions: &config.Options{\n@@ -41,7 +41,7 @@ func TestBuilder_BuildBootstrapAdmin(t *testing.T) {\n }\n \n func TestBuilder_BuildBootstrapLayeredRuntime(t *testing.T) {\n-\tb := New(\"localhost:1111\", \"localhost:2222\", filemgr.NewManager(), nil)\n+\tb := New(\"localhost:1111\", \"localhost:2222\", \"localhost:3333\", filemgr.NewManager(), nil)\n \tstaticCfg, err := b.BuildBootstrapLayeredRuntime()\n \tassert.NoError(t, err)\n \ttestutil.AssertProtoJSONEqual(t, `\n@@ -58,7 +58,7 @@ func TestBuilder_BuildBootstrapLayeredRuntime(t *testing.T) {\n \n func TestBuilder_BuildBootstrapStaticResources(t *testing.T) {\n \tt.Run(\"valid\", func(t *testing.T) {\n-\t\tb := New(\"localhost:1111\", \"localhost:2222\", filemgr.NewManager(), nil)\n+\t\tb := New(\"localhost:1111\", \"localhost:2222\", \"localhost:3333\", filemgr.NewManager(), nil)\n \t\tstaticCfg, err := b.BuildBootstrapStaticResources()\n \t\tassert.NoError(t, err)\n \t\ttestutil.AssertProtoJSONEqual(t, `\n@@ -90,14 +90,14 @@ func TestBuilder_BuildBootstrapStaticResources(t *testing.T) {\n \t\t`, staticCfg)\n \t})\n \tt.Run(\"bad gRPC address\", func(t *testing.T) {\n-\t\tb := New(\"xyz:zyx\", \"localhost:2222\", filemgr.NewManager(), nil)\n+\t\tb := New(\"xyz:zyx\", \"localhost:2222\", \"localhost:3333\", filemgr.NewManager(), nil)\n \t\t_, err := b.BuildBootstrapStaticResources()\n \t\tassert.Error(t, err)\n \t})\n }\n \n func TestBuilder_BuildBootstrapStatsConfig(t *testing.T) {\n-\tb := New(\"local-grpc\", \"local-http\", filemgr.NewManager(), nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", filemgr.NewManager(), nil)\n \tt.Run(\"valid\", func(t *testing.T) {\n \t\tstatsCfg, err := b.BuildBootstrapStatsConfig(&config.Config{\n \t\t\tOptions: &config.Options{"
        },
        {
          "filename": "config/envoyconfig/builder.go",
          "status": "modified",
          "additions": 11,
          "deletions": 8,
          "patch": "@@ -7,23 +7,26 @@ import (\n \n // A Builder builds envoy config from pomerium config.\n type Builder struct {\n-\tlocalGRPCAddress string\n-\tlocalHTTPAddress string\n-\tfilemgr          *filemgr.Manager\n-\treproxy          *reproxy.Handler\n+\tlocalGRPCAddress    string\n+\tlocalHTTPAddress    string\n+\tlocalMetricsAddress string\n+\tfilemgr             *filemgr.Manager\n+\treproxy             *reproxy.Handler\n }\n \n // New creates a new Builder.\n func New(\n \tlocalGRPCAddress string,\n \tlocalHTTPAddress string,\n+\tlocalMetricsAddress string,\n \tfileManager *filemgr.Manager,\n \treproxyHandler *reproxy.Handler,\n ) *Builder {\n \treturn &Builder{\n-\t\tlocalGRPCAddress: localGRPCAddress,\n-\t\tlocalHTTPAddress: localHTTPAddress,\n-\t\tfilemgr:          fileManager,\n-\t\treproxy:          reproxyHandler,\n+\t\tlocalGRPCAddress:    localGRPCAddress,\n+\t\tlocalHTTPAddress:    localHTTPAddress,\n+\t\tlocalMetricsAddress: localMetricsAddress,\n+\t\tfilemgr:             fileManager,\n+\t\treproxy:             reproxyHandler,\n \t}\n }"
        },
        {
          "filename": "config/envoyconfig/clusters.go",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -34,6 +34,10 @@ func (b *Builder) BuildClusters(ctx context.Context, cfg *config.Config) ([]*env\n \t\tScheme: \"http\",\n \t\tHost:   b.localHTTPAddress,\n \t}\n+\tmetricsURL := &url.URL{\n+\t\tScheme: \"http\",\n+\t\tHost:   b.localMetricsAddress,\n+\t}\n \tauthorizeURLs, err := cfg.Options.GetInternalAuthorizeURLs()\n \tif err != nil {\n \t\treturn nil, err\n@@ -53,6 +57,11 @@ func (b *Builder) BuildClusters(ctx context.Context, cfg *config.Config) ([]*env\n \t\treturn nil, err\n \t}\n \n+\tcontrolMetrics, err := b.buildInternalCluster(ctx, cfg.Options, \"pomerium-control-plane-metrics\", []*url.URL{metricsURL}, upstreamProtocolAuto)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n \tauthorizeCluster, err := b.buildInternalCluster(ctx, cfg.Options, \"pomerium-authorize\", authorizeURLs, upstreamProtocolHTTP2)\n \tif err != nil {\n \t\treturn nil, err\n@@ -74,6 +83,7 @@ func (b *Builder) BuildClusters(ctx context.Context, cfg *config.Config) ([]*env\n \tclusters := []*envoy_config_cluster_v3.Cluster{\n \t\tcontrolGRPC,\n \t\tcontrolHTTP,\n+\t\tcontrolMetrics,\n \t\tauthorizeCluster,\n \t\tdatabrokerCluster,\n \t}"
        },
        {
          "filename": "config/envoyconfig/clusters_test.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -25,7 +25,7 @@ func Test_buildPolicyTransportSocket(t *testing.T) {\n \tcacheDir, _ := os.UserCacheDir()\n \tcustomCA := filepath.Join(cacheDir, \"pomerium\", \"envoy\", \"files\", \"custom-ca-32484c314b584447463735303142374c31414145374650305a525539554938594d524855353757313942494d473847535231.pem\")\n \n-\tb := New(\"local-grpc\", \"local-http\", filemgr.NewManager(), nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", filemgr.NewManager(), nil)\n \trootCABytes, _ := getCombinedCertificateAuthority(\"\", \"\")\n \trootCA := b.filemgr.BytesDataSource(\"ca.pem\", rootCABytes).GetFilename()\n \n@@ -379,7 +379,7 @@ func Test_buildPolicyTransportSocket(t *testing.T) {\n \n func Test_buildCluster(t *testing.T) {\n \tctx := context.Background()\n-\tb := New(\"local-grpc\", \"local-http\", filemgr.NewManager(), nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", filemgr.NewManager(), nil)\n \trootCABytes, _ := getCombinedCertificateAuthority(\"\", \"\")\n \trootCA := b.filemgr.BytesDataSource(\"ca.pem\", rootCABytes).GetFilename()\n \to1 := config.NewDefaultOptions()\n@@ -858,7 +858,7 @@ func Test_bindConfig(t *testing.T) {\n \tctx, clearTimeout := context.WithTimeout(context.Background(), time.Second*10)\n \tdefer clearTimeout()\n \n-\tb := New(\"local-grpc\", \"local-http\", filemgr.NewManager(), nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", filemgr.NewManager(), nil)\n \tt.Run(\"no bind config\", func(t *testing.T) {\n \t\tcluster, err := b.buildPolicyCluster(ctx, &config.Options{}, &config.Policy{\n \t\t\tFrom: \"https://from.example.com\","
        },
        {
          "filename": "config/envoyconfig/listeners.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -486,7 +486,7 @@ func (b *Builder) buildMetricsHTTPConnectionManagerFilter() (*envoy_config_liste\n \t\t\tAction: &envoy_config_route_v3.Route_Route{\n \t\t\t\tRoute: &envoy_config_route_v3.RouteAction{\n \t\t\t\t\tClusterSpecifier: &envoy_config_route_v3.RouteAction_Cluster{\n-\t\t\t\t\t\tCluster: \"pomerium-control-plane-http\",\n+\t\t\t\t\t\tCluster: \"pomerium-control-plane-metrics\",\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},"
        },
        {
          "filename": "config/envoyconfig/listeners_test.go",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -25,7 +25,7 @@ func Test_buildMetricsHTTPConnectionManagerFilter(t *testing.T) {\n \tcertFileName := filepath.Join(cacheDir, \"pomerium\", \"envoy\", \"files\", \"tls-crt-354e49305a5a39414a545530374e58454e48334148524c4e324258463837364355564c4e4532464b54355139495547514a38.pem\")\n \tkeyFileName := filepath.Join(cacheDir, \"pomerium\", \"envoy\", \"files\", \"tls-key-3350415a38414e4e4a4655424e55393430474147324651433949384e485341334b5157364f424b4c5856365a545937383735.pem\")\n \n-\tb := New(\"local-grpc\", \"local-http\", filemgr.NewManager(), nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", filemgr.NewManager(), nil)\n \tli, err := b.buildMetricsListener(&config.Config{\n \t\tOptions: &config.Options{\n \t\t\tMetricsAddr:           \"127.0.0.1:9902\",\n@@ -65,7 +65,7 @@ func Test_buildMetricsHTTPConnectionManagerFilter(t *testing.T) {\n \t\t\t\t\t\t\t\t\"prefix\": \"/\"\n \t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\"route\": {\n-\t\t\t\t\t\t\t\t\"cluster\": \"pomerium-control-plane-http\"\n+\t\t\t\t\t\t\t\t\"cluster\": \"pomerium-control-plane-metrics\"\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}]\n \t\t\t\t\t}]\n@@ -108,7 +108,7 @@ func Test_buildMetricsHTTPConnectionManagerFilter(t *testing.T) {\n }\n \n func Test_buildMainHTTPConnectionManagerFilter(t *testing.T) {\n-\tb := New(\"local-grpc\", \"local-http\", nil, nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", nil, nil)\n \n \toptions := config.NewDefaultOptions()\n \toptions.SkipXffAppend = true\n@@ -523,7 +523,7 @@ func Test_buildMainHTTPConnectionManagerFilter(t *testing.T) {\n }\n \n func Test_buildDownstreamTLSContext(t *testing.T) {\n-\tb := New(\"local-grpc\", \"local-http\", filemgr.NewManager(), nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", filemgr.NewManager(), nil)\n \n \tcacheDir, _ := os.UserCacheDir()\n \tcertFileName := filepath.Join(cacheDir, \"pomerium\", \"envoy\", \"files\", \"tls-crt-354e49305a5a39414a545530374e58454e48334148524c4e324258463837364355564c4e4532464b54355139495547514a38.pem\")\n@@ -805,7 +805,7 @@ func Test_hostMatchesDomain(t *testing.T) {\n }\n \n func Test_buildRouteConfiguration(t *testing.T) {\n-\tb := New(\"local-grpc\", \"local-http\", nil, nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", nil, nil)\n \tvirtualHosts := make([]*envoy_config_route_v3.VirtualHost, 10)\n \trouteConfig, err := b.buildRouteConfiguration(\"test-route-configuration\", virtualHosts)\n \trequire.NoError(t, err)\n@@ -815,7 +815,7 @@ func Test_buildRouteConfiguration(t *testing.T) {\n }\n \n func Test_requireProxyProtocol(t *testing.T) {\n-\tb := New(\"local-grpc\", \"local-http\", nil, nil)\n+\tb := New(\"local-grpc\", \"local-http\", \"local-metrics\", nil, nil)\n \tt.Run(\"required\", func(t *testing.T) {\n \t\tli, err := b.buildMainListener(context.Background(), &config.Config{Options: &config.Options{\n \t\t\tUseProxyProtocol: true,"
        },
        {
          "filename": "config/envoyconfig/routes.go",
          "status": "modified",
          "additions": 20,
          "deletions": 52,
          "patch": "@@ -57,51 +57,20 @@ func (b *Builder) buildPomeriumHTTPRoutes(options *config.Options, domain string\n \t\treturn nil, err\n \t}\n \tif !isFrontingAuthenticate {\n-\t\t// enable ext_authz\n-\t\tr, err := b.buildControlPlanePathRoute(\"/.pomerium/jwt\", true)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n-\n-\t\t// disable ext_authz and passthrough to proxy handlers\n-\t\tr, err = b.buildControlPlanePathRoute(\"/ping\", false)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n-\t\tr, err = b.buildControlPlanePathRoute(\"/healthz\", false)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n-\t\tr, err = b.buildControlPlanePathRoute(\"/.pomerium\", false)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n-\t\tr, err = b.buildControlPlanePrefixRoute(\"/.pomerium/\", false)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n-\t\tr, err = b.buildControlPlanePathRoute(\"/.well-known/pomerium\", false)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n-\t\tr, err = b.buildControlPlanePrefixRoute(\"/.well-known/pomerium/\", false)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n+\t\troutes = append(routes,\n+\t\t\t// enable ext_authz\n+\t\t\tb.buildControlPlanePathRoute(\"/.pomerium/jwt\", true),\n+\t\t\t// disable ext_authz and passthrough to proxy handlers\n+\t\t\tb.buildControlPlanePathRoute(\"/ping\", false),\n+\t\t\tb.buildControlPlanePathRoute(\"/healthz\", false),\n+\t\t\tb.buildControlPlanePathRoute(\"/.pomerium\", false),\n+\t\t\tb.buildControlPlanePrefixRoute(\"/.pomerium/\", false),\n+\t\t\tb.buildControlPlanePathRoute(\"/.well-known/pomerium\", false),\n+\t\t\tb.buildControlPlanePrefixRoute(\"/.well-known/pomerium/\", false),\n+\t\t)\n \t\t// per #837, only add robots.txt if there are no unauthenticated routes\n \t\tif !hasPublicPolicyMatchingURL(options, url.URL{Scheme: \"https\", Host: domain, Path: \"/robots.txt\"}) {\n-\t\t\tr, err := b.buildControlPlanePathRoute(\"/robots.txt\", false)\n-\t\t\tif err != nil {\n-\t\t\t\treturn nil, err\n-\t\t\t}\n-\t\t\troutes = append(routes, r)\n+\t\t\troutes = append(routes, b.buildControlPlanePathRoute(\"/robots.txt\", false))\n \t\t}\n \t}\n \t// if we're handling authentication, add the oauth2 callback url\n@@ -110,11 +79,10 @@ func (b *Builder) buildPomeriumHTTPRoutes(options *config.Options, domain string\n \t\treturn nil, err\n \t}\n \tif config.IsAuthenticate(options.Services) && hostMatchesDomain(authenticateURL, domain) {\n-\t\tr, err := b.buildControlPlanePrefixRoute(\"/\", false)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t\troutes = append(routes, r)\n+\t\troutes = append(routes,\n+\t\t\tb.buildControlPlanePathRoute(options.AuthenticateCallbackPath, false),\n+\t\t\tb.buildControlPlanePathRoute(\"/\", false),\n+\t\t)\n \t}\n \t// if we're the proxy and this is the forward-auth url\n \tforwardAuthURL, err := options.GetForwardAuthURL()\n@@ -196,7 +164,7 @@ func (b *Builder) buildControlPlanePathAndQueryRoute(path string, queryparams []\n \t}, nil\n }\n \n-func (b *Builder) buildControlPlanePathRoute(path string, protected bool) (*envoy_config_route_v3.Route, error) {\n+func (b *Builder) buildControlPlanePathRoute(path string, protected bool) *envoy_config_route_v3.Route {\n \tr := &envoy_config_route_v3.Route{\n \t\tName: \"pomerium-path-\" + path,\n \t\tMatch: &envoy_config_route_v3.RouteMatch{\n@@ -215,10 +183,10 @@ func (b *Builder) buildControlPlanePathRoute(path string, protected bool) (*envo\n \t\t\t\"envoy.filters.http.ext_authz\": disableExtAuthz,\n \t\t}\n \t}\n-\treturn r, nil\n+\treturn r\n }\n \n-func (b *Builder) buildControlPlanePrefixRoute(prefix string, protected bool) (*envoy_config_route_v3.Route, error) {\n+func (b *Builder) buildControlPlanePrefixRoute(prefix string, protected bool) *envoy_config_route_v3.Route {\n \tr := &envoy_config_route_v3.Route{\n \t\tName: \"pomerium-prefix-\" + prefix,\n \t\tMatch: &envoy_config_route_v3.RouteMatch{\n@@ -237,7 +205,7 @@ func (b *Builder) buildControlPlanePrefixRoute(prefix string, protected bool) (*\n \t\t\t\"envoy.filters.http.ext_authz\": disableExtAuthz,\n \t\t}\n \t}\n-\treturn r, nil\n+\treturn r\n }\n \n // getClusterID returns a cluster ID"
        },
        {
          "filename": "config/envoyconfig/routes_test.go",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -96,7 +96,8 @@ func Test_buildPomeriumHTTPRoutes(t *testing.T) {\n \t\t\t`+routeString(\"path\", \"/.well-known/pomerium\", false)+`,\n \t\t\t`+routeString(\"prefix\", \"/.well-known/pomerium/\", false)+`,\n \t\t\t`+routeString(\"path\", \"/robots.txt\", false)+`,\n-\t\t\t`+routeString(\"prefix\", \"/\", false)+`\n+\t\t\t`+routeString(\"path\", \"/oauth2/callback\", false)+`,\n+\t\t\t`+routeString(\"path\", \"/\", false)+`\n \t\t]`, routes)\n \t})\n \tt.Run(\"proxy fronting authenticate\", func(t *testing.T) {\n@@ -167,8 +168,7 @@ func Test_buildPomeriumHTTPRoutes(t *testing.T) {\n \n func Test_buildControlPlanePathRoute(t *testing.T) {\n \tb := &Builder{filemgr: filemgr.NewManager()}\n-\troute, err := b.buildControlPlanePathRoute(\"/hello/world\", false)\n-\trequire.NoError(t, err)\n+\troute := b.buildControlPlanePathRoute(\"/hello/world\", false)\n \ttestutil.AssertProtoJSONEqual(t, `\n \t\t{\n \t\t\t\"name\": \"pomerium-path-/hello/world\",\n@@ -190,8 +190,7 @@ func Test_buildControlPlanePathRoute(t *testing.T) {\n \n func Test_buildControlPlanePrefixRoute(t *testing.T) {\n \tb := &Builder{filemgr: filemgr.NewManager()}\n-\troute, err := b.buildControlPlanePrefixRoute(\"/hello/world/\", false)\n-\trequire.NoError(t, err)\n+\troute := b.buildControlPlanePrefixRoute(\"/hello/world/\", false)\n \ttestutil.AssertProtoJSONEqual(t, `\n \t\t{\n \t\t\t\"name\": \"pomerium-prefix-/hello/world/\","
        },
        {
          "filename": "config/metrics.go",
          "status": "modified",
          "additions": 25,
          "deletions": 15,
          "patch": "@@ -3,6 +3,7 @@ package config\n import (\n \t\"context\"\n \t\"net/http\"\n+\t\"net/url\"\n \t\"os\"\n \t\"sync\"\n \n@@ -16,12 +17,13 @@ import (\n \n // A MetricsManager manages metrics for a given configuration.\n type MetricsManager struct {\n-\tmu             sync.RWMutex\n-\tinstallationID string\n-\tserviceName    string\n-\taddr           string\n-\tbasicAuth      string\n-\thandler        http.Handler\n+\tmu                sync.RWMutex\n+\tinstallationID    string\n+\tserviceName       string\n+\taddr              string\n+\tbasicAuth         string\n+\tenvoyAdminAddress string\n+\thandler           http.Handler\n }\n \n // NewMetricsManager creates a new MetricsManager.\n@@ -46,8 +48,8 @@ func (mgr *MetricsManager) OnConfigChange(ctx context.Context, cfg *Config) {\n \tmgr.mu.Lock()\n \tdefer mgr.mu.Unlock()\n \n-\tmgr.updateInfo(cfg)\n-\tmgr.updateServer(cfg)\n+\tmgr.updateInfo(ctx, cfg)\n+\tmgr.updateServer(ctx, cfg)\n }\n \n func (mgr *MetricsManager) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n@@ -61,42 +63,50 @@ func (mgr *MetricsManager) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n \tmgr.handler.ServeHTTP(w, r)\n }\n \n-func (mgr *MetricsManager) updateInfo(cfg *Config) {\n+func (mgr *MetricsManager) updateInfo(ctx context.Context, cfg *Config) {\n \tserviceName := telemetry.ServiceName(cfg.Options.Services)\n \tif serviceName == mgr.serviceName {\n \t\treturn\n \t}\n \n \thostname, err := os.Hostname()\n \tif err != nil {\n-\t\tlog.Error(context.TODO()).Err(err).Msg(\"telemetry/metrics: failed to get OS hostname\")\n+\t\tlog.Error(ctx).Err(err).Msg(\"telemetry/metrics: failed to get OS hostname\")\n \t\thostname = \"__unknown__\"\n \t}\n \n \tmetrics.SetBuildInfo(serviceName, hostname, cfg.EnvoyVersion)\n \tmgr.serviceName = serviceName\n }\n \n-func (mgr *MetricsManager) updateServer(cfg *Config) {\n+func (mgr *MetricsManager) updateServer(ctx context.Context, cfg *Config) {\n \tif cfg.Options.MetricsAddr == mgr.addr &&\n \t\tcfg.Options.MetricsBasicAuth == mgr.basicAuth &&\n-\t\tcfg.Options.InstallationID == mgr.installationID {\n+\t\tcfg.Options.InstallationID == mgr.installationID &&\n+\t\tcfg.Options.EnvoyAdminAddress == mgr.envoyAdminAddress {\n \t\treturn\n \t}\n \n \tmgr.addr = cfg.Options.MetricsAddr\n \tmgr.basicAuth = cfg.Options.MetricsBasicAuth\n \tmgr.installationID = cfg.Options.InstallationID\n+\tmgr.envoyAdminAddress = cfg.Options.EnvoyAdminAddress\n \tmgr.handler = nil\n \n \tif mgr.addr == \"\" {\n-\t\tlog.Info(context.TODO()).Msg(\"metrics: http server disabled\")\n+\t\tlog.Info(ctx).Msg(\"metrics: http server disabled\")\n \t\treturn\n \t}\n \n-\thandler, err := metrics.PrometheusHandler(EnvoyAdminURL, mgr.installationID)\n+\tenvoyURL, err := url.Parse(\"http://\" + cfg.Options.EnvoyAdminAddress)\n \tif err != nil {\n-\t\tlog.Error(context.TODO()).Err(err).Msg(\"metrics: failed to create prometheus handler\")\n+\t\tlog.Error(ctx).Err(err).Msg(\"metrics: invalid envoy admin address, disabling\")\n+\t\treturn\n+\t}\n+\n+\thandler, err := metrics.PrometheusHandler(envoyURL, mgr.installationID)\n+\tif err != nil {\n+\t\tlog.Error(ctx).Err(err).Msg(\"metrics: failed to create prometheus handler\")\n \t\treturn\n \t}\n "
        },
        {
          "filename": "config/options.go",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -49,9 +49,6 @@ const (\n // gRPC server, or is used for healthchecks (authorize only service)\n const DefaultAlternativeAddr = \":5443\"\n \n-// EnvoyAdminURL indicates where the envoy control plane is listening\n-var EnvoyAdminURL = &url.URL{Host: \"127.0.0.1:9901\", Scheme: \"http\"}\n-\n // The randomSharedKey is used if no shared key is supplied in all-in-one mode.\n var randomSharedKey = cryptutil.NewBase64Key()\n "
        },
        {
          "filename": "internal/cmd/pomerium/pomerium.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -86,6 +86,8 @@ func Run(ctx context.Context, configFile string) error {\n \t\tStr(\"grpc-port\", src.GetConfig().GRPCPort).\n \t\tStr(\"http-port\", src.GetConfig().HTTPPort).\n \t\tStr(\"outbound-port\", src.GetConfig().OutboundPort).\n+\t\tStr(\"metrics-port\", src.GetConfig().MetricsPort).\n+\t\tStr(\"debug-port\", src.GetConfig().DebugPort).\n \t\tMsg(\"server started\")\n \n \t// create envoy server"
        },
        {
          "filename": "internal/controlplane/http.go",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -49,12 +49,12 @@ func (srv *Server) addHTTPMiddleware() {\n \troot.HandleFunc(\"/ping\", httputil.HealthCheck)\n \n \t// pprof\n-\troot.Path(\"/debug/pprof/cmdline\").HandlerFunc(pprof.Cmdline)\n-\troot.Path(\"/debug/pprof/profile\").HandlerFunc(pprof.Profile)\n-\troot.Path(\"/debug/pprof/symbol\").HandlerFunc(pprof.Symbol)\n-\troot.Path(\"/debug/pprof/trace\").HandlerFunc(pprof.Trace)\n-\troot.PathPrefix(\"/debug/pprof/\").HandlerFunc(pprof.Index)\n+\tsrv.DebugRouter.Path(\"/debug/pprof/cmdline\").HandlerFunc(pprof.Cmdline)\n+\tsrv.DebugRouter.Path(\"/debug/pprof/profile\").HandlerFunc(pprof.Profile)\n+\tsrv.DebugRouter.Path(\"/debug/pprof/symbol\").HandlerFunc(pprof.Symbol)\n+\tsrv.DebugRouter.Path(\"/debug/pprof/trace\").HandlerFunc(pprof.Trace)\n+\tsrv.DebugRouter.PathPrefix(\"/debug/pprof/\").HandlerFunc(pprof.Index)\n \n \t// metrics\n-\troot.Handle(\"/metrics\", srv.metricsMgr)\n+\tsrv.MetricsRouter.Handle(\"/metrics\", srv.metricsMgr)\n }"
        },
        {
          "filename": "internal/controlplane/server.go",
          "status": "modified",
          "additions": 59,
          "deletions": 23,
          "patch": "@@ -50,11 +50,15 @@ func (avo *atomicVersionedConfig) Store(cfg versionedConfig) {\n \n // A Server is the control-plane gRPC and HTTP servers.\n type Server struct {\n-\tGRPCListener net.Listener\n-\tGRPCServer   *grpc.Server\n-\tHTTPListener net.Listener\n-\tHTTPRouter   *mux.Router\n-\tBuilder      *envoyconfig.Builder\n+\tGRPCListener    net.Listener\n+\tGRPCServer      *grpc.Server\n+\tHTTPListener    net.Listener\n+\tHTTPRouter      *mux.Router\n+\tMetricsListener net.Listener\n+\tMetricsRouter   *mux.Router\n+\tDebugListener   net.Listener\n+\tDebugRouter     *mux.Router\n+\tBuilder         *envoyconfig.Builder\n \n \tcurrentConfig atomicVersionedConfig\n \tname          string\n@@ -106,7 +110,25 @@ func NewServer(cfg *config.Config, metricsMgr *config.MetricsManager) (*Server,\n \t\t_ = srv.GRPCListener.Close()\n \t\treturn nil, err\n \t}\n+\n+\tsrv.MetricsListener, err = net.Listen(\"tcp4\", net.JoinHostPort(\"127.0.0.1\", cfg.MetricsPort))\n+\tif err != nil {\n+\t\t_ = srv.GRPCListener.Close()\n+\t\t_ = srv.HTTPListener.Close()\n+\t\treturn nil, err\n+\t}\n+\n+\tsrv.DebugListener, err = net.Listen(\"tcp4\", net.JoinHostPort(\"127.0.0.1\", cfg.DebugPort))\n+\tif err != nil {\n+\t\t_ = srv.GRPCListener.Close()\n+\t\t_ = srv.HTTPListener.Close()\n+\t\t_ = srv.DebugListener.Close()\n+\t\treturn nil, err\n+\t}\n+\n \tsrv.HTTPRouter = mux.NewRouter()\n+\tsrv.DebugRouter = mux.NewRouter()\n+\tsrv.MetricsRouter = mux.NewRouter()\n \tsrv.addHTTPMiddleware()\n \n \tsrv.filemgr = filemgr.NewManager()\n@@ -115,6 +137,7 @@ func NewServer(cfg *config.Config, metricsMgr *config.MetricsManager) (*Server,\n \tsrv.Builder = envoyconfig.New(\n \t\tsrv.GRPCListener.Addr().String(),\n \t\tsrv.HTTPListener.Addr().String(),\n+\t\tsrv.MetricsListener.Addr().String(),\n \t\tsrv.filemgr,\n \t\tsrv.reproxy,\n \t)\n@@ -175,28 +198,41 @@ func (srv *Server) Run(ctx context.Context) error {\n \t\treturn nil\n \t})\n \n-\thsrv := (&http.Server{\n-\t\tBaseContext: func(li net.Listener) context.Context {\n-\t\t\treturn ctx\n-\t\t},\n-\t\tHandler: srv.HTTPRouter,\n-\t})\n+\tfor _, entry := range []struct {\n+\t\tName     string\n+\t\tListener net.Listener\n+\t\tHandler  *mux.Router\n+\t}{\n+\t\t{\"http\", srv.HTTPListener, srv.HTTPRouter},\n+\t\t{\"debug\", srv.DebugListener, srv.DebugRouter},\n+\t\t{\"metrics\", srv.MetricsListener, srv.MetricsRouter},\n+\t} {\n+\t\tentry := entry\n+\t\thsrv := (&http.Server{\n+\t\t\tBaseContext: func(li net.Listener) context.Context {\n+\t\t\t\treturn ctx\n+\t\t\t},\n+\t\t\tHandler: entry.Handler,\n+\t\t})\n \n-\t// start the HTTP server\n-\teg.Go(func() error {\n-\t\tlog.Info(ctx).Str(\"addr\", srv.HTTPListener.Addr().String()).Msg(\"starting control-plane HTTP server\")\n-\t\treturn hsrv.Serve(srv.HTTPListener)\n-\t})\n+\t\t// start the HTTP server\n+\t\teg.Go(func() error {\n+\t\t\tlog.Info(ctx).\n+\t\t\t\tStr(\"addr\", entry.Listener.Addr().String()).\n+\t\t\t\tMsgf(\"starting control-plane %s server\", entry.Name)\n+\t\t\treturn hsrv.Serve(entry.Listener)\n+\t\t})\n \n-\t// gracefully stop the HTTP server on context cancellation\n-\teg.Go(func() error {\n-\t\t<-ctx.Done()\n+\t\t// gracefully stop the HTTP server on context cancellation\n+\t\teg.Go(func() error {\n+\t\t\t<-ctx.Done()\n \n-\t\tctx, cleanup := context.WithTimeout(ctx, time.Second*5)\n-\t\tdefer cleanup()\n+\t\t\tctx, cleanup := context.WithTimeout(ctx, time.Second*5)\n+\t\t\tdefer cleanup()\n \n-\t\treturn hsrv.Shutdown(ctx)\n-\t})\n+\t\t\treturn hsrv.Shutdown(ctx)\n+\t\t})\n+\t}\n \n \treturn eg.Wait()\n }"
        },
        {
          "filename": "internal/registry/reporter.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -66,6 +66,10 @@ func (r *Reporter) OnConfigChange(ctx context.Context, cfg *config.Config) {\n }\n \n func getReportedServices(cfg *config.Config) ([]*pb.Service, error) {\n+\tif cfg.Options.MetricsAddr == \"\" {\n+\t\treturn nil, nil\n+\t}\n+\n \tmu, err := metricsURL(*cfg.Options)\n \tif err != nil {\n \t\treturn nil, err"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 12,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8bc86fe06f0cc10edb4709c63e3a905ec7400a9f",
            "date": "2025-01-14T21:55:14Z",
            "author_login": "calebdoxsey"
          },
          {
            "sha": "dfd2457bb648be771ab96ab7d4b463dcb8bbde29",
            "date": "2025-01-14T21:51:04Z",
            "author_login": "kralicky"
          },
          {
            "sha": "5ff53ef2b1f2649c1a67f9bd68540ae03b702d0d",
            "date": "2025-01-14T21:50:00Z",
            "author_login": "calebdoxsey"
          },
          {
            "sha": "e5ede2d167ecdf21841174b4ee3d0320a2216c9b",
            "date": "2025-01-14T19:00:38Z",
            "author_login": "kralicky"
          },
          {
            "sha": "6502d6816255ba07fe7d85543ef5da999ac93dcd",
            "date": "2025-01-14T18:50:22Z",
            "author_login": "kralicky"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L",
    "cwe_id": "CWE-200",
    "description": "Pomerium is an identity-aware access proxy. In distributed service mode, Pomerium's Authenticate service exposes pprof debug and prometheus metrics handlers to untrusted traffic. This can leak potentially sensitive environmental information or lead to limited denial of service conditions. This issue is patched in version v0.17.1 Workarounds: Block access to `/debug` and `/metrics` paths on the authenticate service. This can be done with any L7 proxy, including Pomerium's own proxy service.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-31T23:15:08.247",
    "last_modified": "2024-11-21T06:51:07.110",
    "fix_date": "2022-03-30T15:37:37Z"
  },
  "references": [
    {
      "url": "https://github.com/pomerium/pomerium/commit/b435f73e2b54088da2aca5e8c3aa1808293d6903",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/pull/3212",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/security/advisories/GHSA-q98f-2x4p-prjr",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/commit/b435f73e2b54088da2aca5e8c3aa1808293d6903",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/pull/3212",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/security/advisories/GHSA-q98f-2x4p-prjr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.087323",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pomerium",
    "owner": "pomerium",
    "created_at": "2019-01-01T08:04:37Z",
    "updated_at": "2025-01-14T00:14:02Z",
    "pushed_at": "2025-01-13T22:43:45Z",
    "size": 72777,
    "stars": 4107,
    "forks": 285,
    "open_issues": 124,
    "watchers": 4107,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0-0-4",
      "0-0-5",
      "0-1-0",
      "0-2-0",
      "0-3-0",
      "0-4-0",
      "0-5-0",
      "0-6-0",
      "0-7-0",
      "0-8-0",
      "0-9-0",
      "0-10-0",
      "0-11-0",
      "0-12-0",
      "0-13-0",
      "0-14-0-doc-updates",
      "0-14-0-rc",
      "0-14-0",
      "0-15-0",
      "0-16-0",
      "0-17-0",
      "0-18-0",
      "0-19-0",
      "0-20-0",
      "0-21-0",
      "0-22-0",
      "0-23-0",
      "0-24-0",
      "0-25-0",
      "0-26-0"
    ],
    "languages": {
      "Go": 2725391,
      "TypeScript": 62427,
      "Jsonnet": 32800,
      "Shell": 9294,
      "Lua": 4397,
      "Makefile": 3867,
      "Python": 3228,
      "Dockerfile": 1093
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:30:58.767488"
  }
}