{
  "cve_id": "CVE-2022-24803",
  "github_data": {
    "repository": "jirutka/asciidoctor-include-ext",
    "fix_commit": "c7ea001a597c7033575342c51483dab7b87ae155",
    "related_commits": [
      "c7ea001a597c7033575342c51483dab7b87ae155",
      "cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
      "c7ea001a597c7033575342c51483dab7b87ae155",
      "cbaccf3de533cbca224bf61d0b74e4b84d41d8ee"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "c7ea001a597c7033575342c51483dab7b87ae155",
      "commit_date": "2022-03-29T22:10:20Z",
      "author": {
        "login": "jirutka",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix command injection vulnerability",
        "length": 825,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 37,
        "additions": 28,
        "deletions": 9
      },
      "files": [
        {
          "filename": "lib/asciidoctor/include_ext/include_processor.rb",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "patch": "@@ -1,6 +1,7 @@\n # frozen_string_literal: true\n require 'logger'\n require 'open-uri'\n+require 'uri'\n \n require 'asciidoctor/include_ext/version'\n require 'asciidoctor/include_ext/reader_ext'\n@@ -86,15 +87,15 @@ def include_allowed?(target, reader)\n \n       return false if doc.safe >= ::Asciidoctor::SafeMode::SECURE\n       return false if doc.attributes.fetch('max-include-depth', 64).to_i < 1\n-      return false if target_uri?(target) && !doc.attributes.key?('allow-uri-read')\n+      return false if target_http?(target) && !doc.attributes.key?('allow-uri-read')\n       true\n     end\n \n     # @param target (see #process)\n     # @param reader (see #process)\n     # @return [String, nil] file path or URI of the *target*, or `nil` if not found.\n     def resolve_target_path(target, reader)\n-      return target if target_uri? target\n+      return target if target_http? target\n \n       # Include file is resolved relative to dir of the current include,\n       # or base_dir if within original docfile.\n@@ -106,16 +107,16 @@ def resolve_target_path(target, reader)\n     # Reads the specified file as individual lines, filters them using the\n     # *selector* (if provided) and returns those lines in an array.\n     #\n-    # @param filename [String] path of the file to be read.\n+    # @param path [String] URL or path of the file to be read.\n     # @param selector [#to_proc, nil] predicate to filter lines that should be\n     #   included in the output. It must accept two arguments: line and\n     #   the line number. If `nil` is given, all lines are passed.\n     # @return [Array<String>] an array of read lines.\n-    def read_lines(filename, selector)\n+    def read_lines(path, selector)\n       if selector\n-        IO.foreach(filename).select.with_index(1, &selector)\n+        IO.foreach(path).select.with_index(1, &selector)\n       else\n-        URI.open(filename, &:read)\n+        URI.open(path, &:read)\n       end\n     end\n \n@@ -142,9 +143,13 @@ def unresolved_include!(target, reader)\n     private\n \n     # @param target (see #process)\n-    # @return [Boolean] `true` if the *target* is an URI, `false` otherwise.\n-    def target_uri?(target)\n-      ::Asciidoctor::Helpers.uriish?(target)\n+    # @return [Boolean] `true` if the *target* is a valid HTTP(S) URI, `false` otherwise.\n+    def target_http?(target)\n+      # First do a fast test, then try to parse it.\n+      target.downcase.start_with?('http://', 'https://') \\\n+        && URI.parse(target).is_a?(URI::HTTP)\n+    rescue URI::InvalidURIError\n+      false\n     end\n   end\n end"
        },
        {
          "filename": "spec/integration_spec.rb",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -138,6 +138,20 @@\n       should match /let s = SS.empty;;/\n       should_not match /(?:tag|end)::snippet\\[\\]/\n     end\n+\n+    it 'does not allow execution of system command when allow-uri-read is set' do\n+      options.merge!(attributes: { 'allow-uri-read' => '' })\n+      given <<~ADOC\n+        :app-name: |cat LICENSE # + \\\\\n+        http://test.com\n+\n+        include::{app-name}[]\n+      ADOC\n+\n+      should match /unresolved/i\n+      should_not match /The MIT License/\n+    end\n+\n   end\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7ef454cf4ea9b849c5b797f626e18fde1d6cf828",
            "date": "2023-05-22T15:43:25Z",
            "author_login": "digitalmoksha"
          },
          {
            "sha": "201971e83c691f73d3390e1bf840b68038d90811",
            "date": "2023-05-22T15:42:49Z",
            "author_login": "digitalmoksha"
          },
          {
            "sha": "cd6707c8c5010f5104c271b125f7d6ff700a9491",
            "date": "2022-04-02T09:28:38Z",
            "author_login": "gogainda"
          },
          {
            "sha": "e5ab21fba4462be842efb87a3b99b9124445b0b7",
            "date": "2022-03-29T23:35:26Z",
            "author_login": "jirutka"
          },
          {
            "sha": "7913ca74e8669a0c0eae4799a06d03d97704ff43",
            "date": "2022-03-29T23:29:25Z",
            "author_login": "jirutka"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "Asciidoctor-include-ext is Asciidoctor\u2019s standard include processor reimplemented as an extension. Versions prior to 0.4.0, when used to render user-supplied input in AsciiDoc markup, may allow an attacker to execute arbitrary system commands on the host operating system. This attack is possible even when `allow-uri-read` is disabled! The problem has been patched in the referenced commits.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-01T00:15:08.950",
    "last_modified": "2024-11-21T06:51:08.023",
    "fix_date": "2022-03-29T22:10:20Z"
  },
  "references": [
    {
      "url": "https://github.com/jirutka/asciidoctor-include-ext/commit/c7ea001a597c7033575342c51483dab7b87ae155",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jirutka/asciidoctor-include-ext/commit/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jirutka/asciidoctor-include-ext/security/advisories/GHSA-v222-6mr4-qj29",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jirutka/asciidoctor-include-ext/commit/c7ea001a597c7033575342c51483dab7b87ae155",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jirutka/asciidoctor-include-ext/commit/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jirutka/asciidoctor-include-ext/security/advisories/GHSA-v222-6mr4-qj29",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.088790",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "asciidoctor-include-ext",
    "owner": "jirutka",
    "created_at": "2017-12-10T20:13:44Z",
    "updated_at": "2023-08-23T15:10:12Z",
    "pushed_at": "2023-05-22T15:51:22Z",
    "size": 41,
    "stars": 9,
    "forks": 5,
    "open_issues": 1,
    "watchers": 9,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Ruby": 22917
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:09:29.306110"
  }
}