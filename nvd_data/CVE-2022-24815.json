{
  "cve_id": "CVE-2022-24815",
  "github_data": {
    "repository": "jhipster/generator-jhipster",
    "fix_commit": "c220a210fd7742c53eea72bd5fadbb96220faa98",
    "related_commits": [
      "c220a210fd7742c53eea72bd5fadbb96220faa98",
      "c220a210fd7742c53eea72bd5fadbb96220faa98"
    ],
    "patch_url": "https://github.com/jhipster/generator-jhipster/commit/c220a210fd7742c53eea72bd5fadbb96220faa98.patch",
    "fix_commit_details": {
      "sha": "c220a210fd7742c53eea72bd5fadbb96220faa98",
      "commit_date": "2022-04-05T20:21:54Z",
      "author": {
        "login": "atomfrede",
        "type": "User",
        "stats": {
          "total_commits": 627,
          "average_weekly_commits": 1.0681431005110733,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 224
        }
      },
      "commit_message": {
        "title": "use conditions instead of criteria as workaround",
        "length": 63,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 62,
        "additions": 27,
        "deletions": 35
      },
      "files": [
        {
          "filename": "generators/entity-server/templates/src/main/java/package/repository/EntityRepositoryInternalImpl_reactive.java.ejs",
          "status": "modified",
          "additions": 10,
          "deletions": 11,
          "patch": "@@ -50,6 +50,9 @@ import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;\n import org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;\n import org.springframework.data.relational.core.query.Criteria;\n import org.springframework.data.relational.core.sql.Column;\n+import org.springframework.data.relational.core.sql.Comparison;\n+import org.springframework.data.relational.core.sql.Condition;\n+import org.springframework.data.relational.core.sql.Conditions;\n import org.springframework.data.relational.core.sql.Expression;\n import org.springframework.data.relational.core.sql.Select;\n import org.springframework.data.relational.core.sql.SelectBuilder.SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %>;\n@@ -121,15 +124,10 @@ _%>\n \n     @Override\n     public Flux<<%= persistClass %>> findAllBy(Pageable pageable) {\n-        return findAllBy(pageable, null);\n+        return createQuery(pageable, null).all();\n     }\n \n-    @Override\n-    public Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria) {\n-        return createQuery(pageable, criteria).all();\n-    }\n-\n-    RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Criteria criteria) {\n+    RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Condition whereClause) {\n         List<Expression> columns = <%= entityClass %>SqlHelper.getColumns(entityTable, EntityManager.ENTITY_ALIAS);\n <%_ reactiveEagerRelations.forEach(function(rel) { _%>\n         columns.addAll(<%= rel.otherEntityNameCapitalized %>SqlHelper.getColumns(<%= rel.relationshipName %>Table, \"<%= rel.relationshipName %>\"));\n@@ -138,19 +136,20 @@ _%>\n <%_ reactiveEagerRelations.forEach(function(rel) { _%>\n             .leftOuterJoin(<%= rel.relationshipName %>Table).on(Column.create(\"<%= rel.joinColumnNames[0] %>\", entityTable)).equals(Column.create(\"<%= rel.otherEntity.primaryKey.fields[0].columnName %>\", <%= rel.relationshipName %>Table ))\n <%_ }); _%>;\n-\n-        String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, criteria);\n+        // we do not support Criteria here for now as of https://github.com/jhipster/generator-jhipster/issues/18269\n+        String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, whereClause);\n         return db.sql(select).map(this::process);\n     }\n \n     @Override\n     public Flux<<%= persistClass %>> findAll() {\n-        return findAllBy(null, null);\n+        return findAllBy(null);\n     }\n \n     @Override\n     public Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id) {\n-        return createQuery(null, where(EntityManager.ENTITY_ALIAS + \".<%= primaryKey.fields[0].columnName %>\").is(id)).one();\n+        Comparison whereClause = Conditions.isEqual(entityTable.column(\"<%= primaryKey.fields[0].columnName %>\"), Conditions.just(id.toString()));\n+        return createQuery(null, whereClause).one();\n     }\n \n <%_ if (implementsEagerLoadApis) { _%>"
        },
        {
          "filename": "generators/entity-server/templates/src/main/java/package/repository/EntityRepository_reactive.java.ejs",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -144,8 +144,8 @@ interface <%= entityClass %>RepositoryInternal {\n     Flux<<%= persistClass %>> findAll();\n \n     Mono<<%= persistClass %>> findById(<%= primaryKey.type %> id);\n-\n-    Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria);\n+    // this is not supported at the moment because of https://github.com/jhipster/generator-jhipster/issues/18269\n+    // Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria);\n \n   <%_ if (implementsEagerLoadApis) { _%>\n "
        },
        {
          "filename": "generators/server/templates/src/main/java/package/repository/EntityManager.java.ejs",
          "status": "modified",
          "additions": 15,
          "deletions": 22,
          "patch": "@@ -33,6 +33,7 @@ import org.springframework.data.r2dbc.core.StatementMapper;\n import org.springframework.data.r2dbc.mapping.OutboundRow;\n import org.springframework.data.r2dbc.query.UpdateMapper;\n import org.springframework.data.relational.core.query.Criteria;\n+import org.springframework.data.relational.core.sql.Condition;\n import org.springframework.data.relational.core.mapping.RelationalPersistentEntity;\n import org.springframework.data.relational.core.sql.Conditions;\n import org.springframework.data.relational.core.sql.OrderByField;\n@@ -93,19 +94,11 @@ public class EntityManager {\n      * @param pageable page parameter, or null, if everything needs to be returned\n      * @return sql select statement\n      */\n-    public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Criteria criteria) {\n+    public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable) {\n         if (pageable != null) {\n-            if (criteria != null) {\n-                return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(Conditions.just(criteria.toString())), entityType, pageable.getSort());\n-            } else {\n-                return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());\n-            }\n+            return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());\n         } else {\n-            if (criteria != null) {\n-                return createSelectImpl(selectFrom.where(Conditions.just(criteria.toString())), entityType, null);\n-            } else {\n-                return createSelectImpl(selectFrom, entityType, null);\n-            }\n+            return createSelectImpl(selectFrom, entityType, null);\n         }\n     }\n \n@@ -116,19 +109,19 @@ public class EntityManager {\n      * @param pageable page parameter, or null, if everything needs to be returned\n      * @return sql select statement\n      */\n-    public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Criteria criteria) {\n+    public String createSelect(SelectFromAndJoinCondition selectFrom, Class<?> entityType, Pageable pageable, Condition where) {\n         if (pageable != null) {\n-            if (criteria != null) {\n-                return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(Conditions.just(criteria.toString())), entityType, pageable.getSort());\n-            } else {\n-                return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());\n-            }\n+            return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()), entityType, pageable.getSort());\n         } else {\n-            if (criteria != null) {\n-                return createSelectImpl(selectFrom.where(Conditions.just(criteria.toString())), entityType, null);\n-            } else {\n-                return createSelectImpl(selectFrom, entityType, null);\n-            }\n+            return createSelectImpl(selectFrom.where(where), entityType, null);\n+        }\n+    }\n+\n+    public String createSelect(SelectFromAndJoin selectFrom, Class<?> entityType, Pageable pageable, Condition where) {\n+        if (pageable != null) {\n+            return createSelectImpl(selectFrom.limitOffset(pageable.getPageSize(), pageable.getOffset()).where(where), entityType, pageable.getSort());\n+        } else {\n+            return createSelectImpl(selectFrom.where(where), entityType, null);\n         }\n     }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ed1890edfb648f0ccab11ce2c3f2ee290f989a2f",
            "date": "2025-01-14T08:30:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "94ed9e6c1afa6cfb154457ed0d017118768bccad",
            "date": "2025-01-14T02:31:18Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "395c82f642a9e92999de257c2d7545df2c62ebcd",
            "date": "2025-01-14T01:40:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1bac847e29b04ffa3d7a99ba975f168822a272fc",
            "date": "2025-01-14T01:35:04Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d50021ed287c24c287853f448b22cf53350a0e5c",
            "date": "2025-01-14T01:02:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "JHipster is a development platform to quickly generate, develop, & deploy modern web applications & microservice architectures. SQL Injection vulnerability in entities for applications generated with the option \"reactive with Spring WebFlux\" enabled and an SQL database using r2dbc. Applications created without \"reactive with Spring WebFlux\" and applications with NoSQL databases are not affected. Users who have generated a microservice Gateway using the affected version may be impacted as Gateways are reactive by default. Currently, SQL injection is possible in the findAllBy(Pageable pageable, Criteria criteria) method of an entity repository class generated in these applications as the where clause using Criteria for queries are not sanitized and user input is passed on as it is by the criteria. This issue has been patched in v7.8.1. Users unable to upgrade should be careful when combining criterias and conditions as the root of the issue lies in the `EntityManager.java` class when creating the where clause via `Conditions.just(criteria.toString())`. `just` accepts the literal string provided. Criteria's `toString` method returns a plain string and this combination is vulnerable to sql injection as the string is not sanitized and will contain whatever used passed as input using any plain SQL.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-04-11T20:15:20.217",
    "last_modified": "2024-11-21T06:51:09.587",
    "fix_date": "2022-04-05T20:21:54Z"
  },
  "references": [
    {
      "url": "https://github.com/jhipster/generator-jhipster/commit/c220a210fd7742c53eea72bd5fadbb96220faa98",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jhipster/generator-jhipster/issues/18269",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jhipster/generator-jhipster/security/advisories/GHSA-qjmq-8hjr-qcv6",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jhipster/generator-jhipster/commit/c220a210fd7742c53eea72bd5fadbb96220faa98",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jhipster/generator-jhipster/issues/18269",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jhipster/generator-jhipster/security/advisories/GHSA-qjmq-8hjr-qcv6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.370379",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "generator-jhipster",
    "owner": "jhipster",
    "created_at": "2013-10-21T20:07:22Z",
    "updated_at": "2025-01-14T13:05:54Z",
    "pushed_at": "2025-01-14T09:46:33Z",
    "size": 170169,
    "stars": 21679,
    "forks": 4032,
    "open_issues": 127,
    "watchers": 21679,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "master"
    ],
    "languages": {
      "TypeScript": 5363730,
      "Java": 1293399,
      "EJS": 595069,
      "JavaScript": 176353,
      "Vue": 142849,
      "Shell": 63262,
      "SCSS": 45339,
      "Dockerfile": 6004,
      "CSS": 4201,
      "Mustache": 2339,
      "HTML": 793
    },
    "commit_activity": {
      "total_commits_last_year": 5498,
      "avg_commits_per_week": 105.73076923076923,
      "days_active_last_year": 346
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:21:26.930376"
  }
}