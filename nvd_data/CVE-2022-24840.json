{
  "cve_id": "CVE-2022-24840",
  "github_data": {
    "repository": "codingjoe/django-s3file",
    "fix_commit": "68ccd2c621a40eb66fdd6af2be9d5fcc9c373318",
    "related_commits": [
      "68ccd2c621a40eb66fdd6af2be9d5fcc9c373318",
      "68ccd2c621a40eb66fdd6af2be9d5fcc9c373318"
    ],
    "patch_url": "https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318.patch",
    "fix_commit_details": {
      "sha": "68ccd2c621a40eb66fdd6af2be9d5fcc9c373318",
      "commit_date": "2022-04-11T17:47:05Z",
      "author": {
        "login": "codingjoe",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix CVE-XXXX-XXXX -- Fix Path Traversal security vulnerability",
        "length": 62,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 245,
        "additions": 187,
        "deletions": 58
      },
      "files": [
        {
          "filename": "s3file/forms.py",
          "status": "modified",
          "additions": 13,
          "deletions": 3,
          "patch": "@@ -4,6 +4,7 @@\n import uuid\n \n from django.conf import settings\n+from django.core import signing\n from django.utils.functional import cached_property\n from storages.utils import safe_join\n \n@@ -16,10 +17,14 @@ class S3FileInputMixin:\n     \"\"\"FileInput that uses JavaScript to directly upload to Amazon S3.\"\"\"\n \n     needs_multipart_form = False\n-    upload_path = str(\n-        getattr(settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\"))\n+    upload_path = safe_join(\n+        str(storage.aws_location),\n+        str(\n+            getattr(\n+                settings, \"S3FILE_UPLOAD_PATH\", pathlib.PurePosixPath(\"tmp\", \"s3file\")\n+            )\n+        ),\n     )\n-    upload_path = safe_join(str(storage.location), upload_path)\n     expires = settings.SESSION_COOKIE_AGE\n \n     @property\n@@ -45,6 +50,11 @@ def build_attrs(self, *args, **kwargs):\n             \"data-fields-%s\" % key: value for key, value in response[\"fields\"].items()\n         }\n         defaults[\"data-url\"] = response[\"url\"]\n+        signer = signing.Signer(\n+            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n+        )\n+        print(self.upload_folder)\n+        defaults[\"data-s3f-signature\"] = signer.signature(self.upload_folder)\n         defaults.update(attrs)\n \n         try:"
        },
        {
          "filename": "s3file/middleware.py",
          "status": "modified",
          "additions": 36,
          "deletions": 7,
          "patch": "@@ -1,9 +1,13 @@\n import logging\n import pathlib\n \n-from s3file.storages import local_dev, storage\n+from django.core import signing\n+from django.core.exceptions import PermissionDenied, SuspiciousFileOperation\n+from django.utils.crypto import constant_time_compare\n \n from . import views\n+from .forms import S3FileInputMixin\n+from .storages import local_dev, storage\n \n logger = logging.getLogger(\"s3file\")\n \n@@ -15,25 +19,50 @@ def __init__(self, get_response):\n     def __call__(self, request):\n         file_fields = request.POST.getlist(\"s3file\")\n         for field_name in file_fields:\n+\n             paths = request.POST.getlist(field_name)\n-            request.FILES.setlist(field_name, list(self.get_files_from_storage(paths)))\n+            if paths:\n+                try:\n+                    signature = request.POST[f\"{field_name}-s3f-signature\"]\n+                except KeyError:\n+                    raise PermissionDenied(\"No signature provided.\")\n+                try:\n+                    request.FILES.setlist(\n+                        field_name, list(self.get_files_from_storage(paths, signature))\n+                    )\n+                except SuspiciousFileOperation as e:\n+                    raise PermissionDenied(\"Illegal file name!\") from e\n \n         if local_dev and request.path == \"/__s3_mock__/\":\n             return views.S3MockView.as_view()(request)\n \n         return self.get_response(request)\n \n     @staticmethod\n-    def get_files_from_storage(paths):\n+    def get_files_from_storage(paths, signature):\n         \"\"\"Return S3 file where the name does not include the path.\"\"\"\n+        try:\n+            location = storage.aws_location\n+        except AttributeError:\n+            location = storage.location\n+        signer = signing.Signer(\n+            salt=f\"{S3FileInputMixin.__module__}.{S3FileInputMixin.__name__}\"\n+        )\n         for path in paths:\n             path = pathlib.PurePosixPath(path)\n+            print(path)\n+            print(signer.signature(path.parent), signature)\n+            if not constant_time_compare(signer.signature(path.parent), signature):\n+                raise PermissionDenied(\"Illegal signature!\")\n             try:\n-                location = storage.aws_location\n-            except AttributeError:\n-                location = storage.location\n+                relative_path = str(path.relative_to(location))\n+            except ValueError as e:\n+                raise SuspiciousFileOperation(\n+                    f\"Path is not inside the designated upload location: {path}\"\n+                ) from e\n+\n             try:\n-                f = storage.open(str(path.relative_to(location)))\n+                f = storage.open(relative_path)\n                 f.name = path.name\n                 yield f\n             except (OSError, ValueError):"
        },
        {
          "filename": "s3file/static/s3file/js/s3file.js",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -94,6 +94,12 @@\n         hiddenFileInput.name = name\n         hiddenFileInput.value = parseURL(result)\n         form.appendChild(hiddenFileInput)\n+        var hiddenSignatureInput = document.createElement('input')\n+        hiddenSignatureInput.type = 'hidden'\n+        hiddenSignatureInput.name = name + '-s3f-signature'\n+        console.log(fileInput.dataset.s3fSignature)\n+        hiddenSignatureInput.value = fileInput.dataset.s3fSignature\n+        form.appendChild(hiddenSignatureInput)\n       })\n       fileInput.name = ''\n       window.uploading -= 1"
        },
        {
          "filename": "s3file/views.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n import hashlib\n import hmac\n import logging\n+from pathlib import Path\n \n from django import http\n from django.conf import settings"
        },
        {
          "filename": "tests/conftest.py",
          "status": "modified",
          "additions": 37,
          "deletions": 16,
          "patch": "@@ -1,12 +1,14 @@\n-import os\n import tempfile\n+from pathlib import Path\n \n import pytest\n from django.core.files.base import ContentFile\n from django.utils.encoding import force_str\n from selenium import webdriver\n from selenium.common.exceptions import WebDriverException\n \n+from s3file.storages import storage\n+\n \n @pytest.fixture(scope=\"session\")\n def driver():\n@@ -22,30 +24,49 @@ def driver():\n \n \n @pytest.fixture\n-def upload_file(request):\n-    path = tempfile.mkdtemp()\n-    file_name = os.path.join(path, \"%s.txt\" % request.node.name)\n-    with open(file_name, \"w\") as f:\n+def freeze_upload_folder(monkeypatch):\n+    \"\"\"Freeze datetime and UUID.\"\"\"\n+    upload_folder = Path(storage.aws_location) / \"tmp\" / \"s3file\"\n+    monkeypatch.setattr(\n+        \"s3file.forms.S3FileInputMixin.upload_folder\",\n+        str(upload_folder),\n+    )\n+    return upload_folder\n+\n+\n+@pytest.fixture\n+def upload_file(request, freeze_upload_folder):\n+    path = Path(tempfile.mkdtemp()) / freeze_upload_folder / f\"{request.node.name}.txt\"\n+    path.parent.mkdir(parents=True, exist_ok=True)\n+    with path.open(\"w\") as f:\n         f.write(request.node.name)\n-    return file_name\n+    return str(path.absolute())\n \n \n @pytest.fixture\n-def another_upload_file(request):\n-    path = tempfile.mkdtemp()\n-    file_name = os.path.join(path, \"another_%s.txt\" % request.node.name)\n-    with open(file_name, \"w\") as f:\n+def another_upload_file(request, freeze_upload_folder):\n+    path = (\n+        Path(tempfile.mkdtemp())\n+        / freeze_upload_folder\n+        / f\"another_{request.node.name}.txt\"\n+    )\n+    path.parent.mkdir(parents=True, exist_ok=True)\n+    with path.open(\"w\") as f:\n         f.write(request.node.name)\n-    return file_name\n+    return str(path.absolute())\n \n \n @pytest.fixture\n-def yet_another_upload_file(request):\n-    path = tempfile.mkdtemp()\n-    file_name = os.path.join(path, \"yet_another_%s.txt\" % request.node.name)\n-    with open(file_name, \"w\") as f:\n+def yet_another_upload_file(request, freeze_upload_folder):\n+    path = (\n+        Path(tempfile.mkdtemp())\n+        / freeze_upload_folder\n+        / f\"yet_another_{request.node.name}.txt\"\n+    )\n+    path.parent.mkdir(parents=True, exist_ok=True)\n+    with path.open(\"w\") as f:\n         f.write(request.node.name)\n-    return file_name\n+    return str(path.absolute())\n \n \n @pytest.fixture"
        },
        {
          "filename": "tests/test_forms.py",
          "status": "modified",
          "additions": 31,
          "deletions": 23,
          "patch": "@@ -31,23 +31,15 @@ class TestS3FileInput:\n     def url(self):\n         return reverse(\"upload\")\n \n-    @pytest.fixture\n-    def freeze(self, monkeypatch):\n-        \"\"\"Freeze datetime and UUID.\"\"\"\n-        monkeypatch.setattr(\n-            \"s3file.forms.S3FileInputMixin.upload_folder\",\n-            os.path.join(storage.aws_location, \"tmp\"),\n-        )\n-\n-    def test_value_from_datadict(self, client, upload_file):\n-        print(storage.location)\n+    def test_value_from_datadict(self, freeze_upload_folder, client, upload_file):\n         with open(upload_file) as f:\n-            uploaded_file = storage.save(\"test.jpg\", f)\n+            uploaded_file = storage.save(freeze_upload_folder / \"test.jpg\", f)\n         response = client.post(\n             reverse(\"upload\"),\n             {\n-                \"file\": json.dumps([uploaded_file]),\n-                \"s3file\": '[\"file\"]',\n+                \"file\": f\"custom/location/{uploaded_file}\",\n+                \"file-s3f-signature\": \"m94qBxBsnMIuIICiY133kX18KkllSPMVbhGAdAwNn1A\",\n+                \"s3file\": \"file\",\n             },\n         )\n \n@@ -82,7 +74,7 @@ def test_clear(self, filemodel):\n         assert form.is_valid()\n         assert not form.cleaned_data[\"file\"]\n \n-    def test_build_attr(self):\n+    def test_build_attr(self, freeze_upload_folder):\n         assert set(ClearableFileInput().build_attrs({}).keys()) == {\n             \"class\",\n             \"data-url\",\n@@ -92,21 +84,26 @@ def test_build_attr(self):\n             \"data-fields-x-amz-credential\",\n             \"data-fields-policy\",\n             \"data-fields-key\",\n+            \"data-s3f-signature\",\n         }\n+        assert (\n+            ClearableFileInput().build_attrs({})[\"data-s3f-signature\"]\n+            == \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\"\n+        )\n         assert ClearableFileInput().build_attrs({})[\"class\"] == \"s3file\"\n         assert (\n             ClearableFileInput().build_attrs({\"class\": \"my-class\"})[\"class\"]\n             == \"my-class s3file\"\n         )\n \n-    def test_get_conditions(self, freeze):\n+    def test_get_conditions(self, freeze_upload_folder):\n         conditions = ClearableFileInput().get_conditions(None)\n         assert all(\n             condition in conditions\n             for condition in [\n                 {\"bucket\": \"test-bucket\"},\n                 {\"success_action_status\": \"201\"},\n-                [\"starts-with\", \"$key\", \"custom/location/tmp\"],\n+                [\"starts-with\", \"$key\", \"custom/location/tmp/s3file\"],\n                 [\"starts-with\", \"$Content-Type\", \"\"],\n             ]\n         ), conditions\n@@ -145,20 +142,24 @@ def test_no_js_error(self, driver, live_server):\n             error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n             pytest.fail(error.get_attribute(\"JSError\"))\n \n-    def test_file_insert(self, request, driver, live_server, upload_file, freeze):\n+    def test_file_insert(\n+        self, request, driver, live_server, upload_file, freeze_upload_folder\n+    ):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n         file_input.send_keys(upload_file)\n         assert file_input.get_attribute(\"name\") == \"file\"\n         with wait_for_page_load(driver, timeout=10):\n             file_input.submit()\n-        assert storage.exists(\"tmp/%s.txt\" % request.node.name)\n+        assert storage.exists(\"tmp/s3file/%s.txt\" % request.node.name)\n \n         with pytest.raises(NoSuchElementException):\n             error = driver.find_element(By.XPATH, \"//body[@JSError]\")\n             pytest.fail(error.get_attribute(\"JSError\"))\n \n-    def test_file_insert_submit_value(self, driver, live_server, upload_file, freeze):\n+    def test_file_insert_submit_value(\n+        self, driver, live_server, upload_file, freeze_upload_folder\n+    ):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n         file_input.send_keys(upload_file)\n@@ -178,7 +179,7 @@ def test_file_insert_submit_value(self, driver, live_server, upload_file, freeze\n         assert \"save_continue\" in driver.page_source\n         assert \"continue_value\" in driver.page_source\n \n-    def test_progress(self, driver, live_server, upload_file, freeze):\n+    def test_progress(self, driver, live_server, upload_file, freeze_upload_folder):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n         file_input.send_keys(upload_file)\n@@ -202,16 +203,23 @@ def test_multi_file(\n         self,\n         driver,\n         live_server,\n-        freeze,\n+        freeze_upload_folder,\n         upload_file,\n         another_upload_file,\n         yet_another_upload_file,\n     ):\n         driver.get(live_server + self.url)\n         file_input = driver.find_element(By.XPATH, \"//input[@name='file']\")\n-        file_input.send_keys(\" \\n \".join([upload_file, another_upload_file]))\n+        file_input.send_keys(\n+            \" \\n \".join(\n+                [\n+                    str(freeze_upload_folder / upload_file),\n+                    str(freeze_upload_folder / another_upload_file),\n+                ]\n+            )\n+        )\n         file_input = driver.find_element(By.XPATH, \"//input[@name='other_file']\")\n-        file_input.send_keys(yet_another_upload_file)\n+        file_input.send_keys(str(freeze_upload_folder / yet_another_upload_file))\n         save_button = driver.find_element(By.XPATH, \"//input[@name='save']\")\n         with wait_for_page_load(driver, timeout=10):\n             save_button.click()"
        },
        {
          "filename": "tests/test_middleware.py",
          "status": "modified",
          "additions": 63,
          "deletions": 9,
          "patch": "@@ -1,5 +1,7 @@\n import os\n \n+import pytest\n+from django.core.exceptions import PermissionDenied, SuspiciousFileOperation\n from django.core.files.base import ContentFile\n from django.core.files.uploadedfile import SimpleUploadedFile\n \n@@ -8,18 +10,19 @@\n \n \n class TestS3FileMiddleware:\n-    def test_get_files_from_storage(self):\n+    def test_get_files_from_storage(self, freeze_upload_folder):\n         content = b\"test_get_files_from_storage\"\n         name = storage.save(\n             \"tmp/s3file/test_get_files_from_storage\", ContentFile(content)\n         )\n         files = S3FileMiddleware.get_files_from_storage(\n-            [os.path.join(storage.aws_location, name)]\n+            [os.path.join(storage.aws_location, name)],\n+            \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n         )\n         file = next(files)\n         assert file.read() == content\n \n-    def test_process_request(self, rf):\n+    def test_process_request(self, freeze_upload_folder, rf):\n         uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n         request = rf.post(\"/\", data={\"file\": uploaded_file})\n         S3FileMiddleware(lambda x: None)(request)\n@@ -32,13 +35,28 @@ def test_process_request(self, rf):\n             data={\n                 \"file\": \"custom/location/tmp/s3file/s3_file.txt\",\n                 \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n             },\n         )\n         S3FileMiddleware(lambda x: None)(request)\n         assert request.FILES.getlist(\"file\")\n         assert request.FILES.get(\"file\").read() == b\"s3file\"\n \n-    def test_process_request__multiple_files(self, rf):\n+    def test_process_request__location_escape(self, freeze_upload_folder, rf):\n+        storage.save(\"secrets/passwords.txt\", ContentFile(b\"keep this secret\"))\n+        request = rf.post(\n+            \"/\",\n+            data={\n+                \"file\": \"custom/location/secrets/passwords.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n+            },\n+        )\n+        with pytest.raises(PermissionDenied) as e:\n+            S3FileMiddleware(lambda x: None)(request)\n+        assert \"Illegal signature!\" in str(e.value)\n+\n+    def test_process_request__multiple_files(self, freeze_upload_folder, rf):\n         storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n         storage.save(\"tmp/s3file/s3_other_file.txt\", ContentFile(b\"other s3file\"))\n         request = rf.post(\n@@ -48,6 +66,8 @@ def test_process_request__multiple_files(self, rf):\n                     \"custom/location/tmp/s3file/s3_file.txt\",\n                     \"custom/location/tmp/s3file/s3_other_file.txt\",\n                 ],\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n+                \"other_file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n                 \"s3file\": [\"file\", \"other_file\"],\n             },\n         )\n@@ -56,7 +76,7 @@ def test_process_request__multiple_files(self, rf):\n         assert files[0].read() == b\"s3file\"\n         assert files[1].read() == b\"other s3file\"\n \n-    def test_process_request__no_location(self, rf, settings):\n+    def test_process_request__no_location(self, freeze_upload_folder, rf, settings):\n         settings.AWS_LOCATION = \"\"\n         uploaded_file = SimpleUploadedFile(\"uploaded_file.txt\", b\"uploaded\")\n         request = rf.post(\"/\", data={\"file\": uploaded_file})\n@@ -66,14 +86,48 @@ def test_process_request__no_location(self, rf, settings):\n \n         storage.save(\"tmp/s3file/s3_file.txt\", ContentFile(b\"s3file\"))\n         request = rf.post(\n-            \"/\", data={\"file\": \"tmp/s3file/s3_file.txt\", \"s3file\": \"file\"}\n+            \"/\",\n+            data={\n+                \"file\": f\"tmp/s3file/s3_file.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"scjzm3N8njBQIVSGEhOchtM0TkGyb2U6OXGLVlRUZhY\",\n+            },\n         )\n         S3FileMiddleware(lambda x: None)(request)\n         assert request.FILES.getlist(\"file\")\n         assert request.FILES.get(\"file\").read() == b\"s3file\"\n \n-    def test_process_request__no_file(self, rf, caplog):\n-        request = rf.post(\"/\", data={\"file\": \"does_not_exist.txt\", \"s3file\": \"file\"})\n+    def test_process_request__no_file(self, freeze_upload_folder, rf, caplog):\n+        request = rf.post(\n+            \"/\",\n+            data={\n+                \"file\": \"custom/location/tmp/s3file/does_not_exist.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"tFV9nGZlq9WX1I5Sotit18z1f4C_3lPnj33_zo4LZRc\",\n+            },\n+        )\n         S3FileMiddleware(lambda x: None)(request)\n         assert not request.FILES.getlist(\"file\")\n-        assert \"File not found: does_not_exist.txt\" in caplog.text\n+        assert (\n+            \"File not found: custom/location/tmp/s3file/does_not_exist.txt\"\n+            in caplog.text\n+        )\n+\n+    def test_process_request__no_signature(self, rf, caplog):\n+        request = rf.post(\n+            \"/\", data={\"file\": \"tmp/s3file/does_not_exist.txt\", \"s3file\": \"file\"}\n+        )\n+        with pytest.raises(PermissionDenied) as e:\n+            S3FileMiddleware(lambda x: None)(request)\n+\n+    def test_process_request__wrong_signature(self, rf, caplog):\n+        request = rf.post(\n+            \"/\",\n+            data={\n+                \"file\": \"tmp/s3file/does_not_exist.txt\",\n+                \"s3file\": \"file\",\n+                \"file-s3f-signature\": \"fake\",\n+            },\n+        )\n+        with pytest.raises(PermissionDenied) as e:\n+            S3FileMiddleware(lambda x: None)(request)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "26ba42e6e6bc97c65ecaf74a695e08ba491063cb",
            "date": "2025-01-13T10:23:24Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "7bac6290937144f05befca3376d4ac9a042a33eb",
            "date": "2025-01-13T10:45:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bf29f71af0b624b3293d0bb425417d8dbfea931e",
            "date": "2024-11-27T10:17:21Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "53f8c66599e98be41123082de6023258469dfa00",
            "date": "2024-11-15T10:17:37Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2706cb3a244f40ce00843d66fb9bb178370e062e",
            "date": "2024-11-11T16:50:02Z",
            "author_login": "codingjoe"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-22",
    "description": "django-s3file is a lightweight file upload input for Django and Amazon S3 . In versions prior to 5.5.1 it was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files. If the `AWS_LOCATION` setting was set, traversal was limited to that location only. The issue was discovered by the maintainer. There were no reports of the vulnerability being known to or exploited by a third party, prior to the release of the patch. The vulnerability has been fixed in version 5.5.1 and above. There is no feasible workaround. We must urge all users to immediately updated to a patched version.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-09T04:15:10.707",
    "last_modified": "2024-11-21T06:51:12.843",
    "fix_date": "2022-04-11T17:47:05Z"
  },
  "references": [
    {
      "url": "https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codingjoe/django-s3file/security/advisories/GHSA-4w8f-hjm9-xwgf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codingjoe/django-s3file/security/advisories/GHSA-4w8f-hjm9-xwgf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.419512",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "django-s3file",
    "owner": "codingjoe",
    "created_at": "2014-11-10T15:57:22Z",
    "updated_at": "2025-01-14T18:06:06Z",
    "pushed_at": "2025-01-14T18:06:05Z",
    "size": 786,
    "stars": 80,
    "forks": 17,
    "open_issues": 2,
    "watchers": 80,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 45973,
      "JavaScript": 9262,
      "HTML": 707
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:15:38.925969"
  }
}