{
  "cve_id": "CVE-2022-24848",
  "github_data": {
    "repository": "dhis2/dhis2-core",
    "fix_commit": "3b245d04a58b78f0dc9bae8559f36ee4ca36dfac",
    "related_commits": [
      "3b245d04a58b78f0dc9bae8559f36ee4ca36dfac",
      "ef04483a9b177d62e48dcf4e498b302a11f95e7d",
      "3b245d04a58b78f0dc9bae8559f36ee4ca36dfac",
      "ef04483a9b177d62e48dcf4e498b302a11f95e7d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3b245d04a58b78f0dc9bae8559f36ee4ca36dfac",
      "commit_date": "2022-06-01T08:33:48Z",
      "author": {
        "login": "ameenhere",
        "type": "User",
        "stats": {
          "total_commits": 287,
          "average_weekly_commits": 0.6522727272727272,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 129
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-52vp-f7hj-cj92",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 156,
        "additions": 148,
        "deletions": 8
      },
      "files": [
        {
          "filename": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/common/IdentifiableObjectManager.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -108,6 +108,9 @@ <T extends IdentifiableObject> List<AttributeValue> getAllValuesByAttributes( Cl\n     <T extends IdentifiableObject> long countAllValuesByAttributes( Class<T> klass, List<Attribute> attributes );\n \n     <T extends IdentifiableObject> List<T> getByUid( Class<T> clazz, Collection<String> uids );\n+    \n+    <T extends IdentifiableObject> List<T> getAndValidateByUid( Class<T> type, Collection<String> uids )\n+        throws IllegalQueryException;\n \n     <T extends IdentifiableObject> List<T> getById( Class<T> clazz, Collection<Long> ids );\n "
        },
        {
          "filename": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/feedback/ErrorCode.java",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -46,6 +46,7 @@ public enum ErrorCode\n     E1105( \"Data set not found or not accessible: `{0}`\" ),\n     E1106( \"There are duplicate translation record for property `{0}` and locale `{1}`\" ),\n     E1107( \"Object type `{0}` is not translatable.\" ),\n+    E1112( \"Object(s) of type `{0}` not found or not accessible: `{1}`\" ),\n \n     /* Data */\n     E2000( \"Query parameters cannot be null\" ),"
        },
        {
          "filename": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/association/ProgramOrganisationUnitAssociationsQueryBuilder.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -34,6 +34,7 @@\n import static org.hisp.dhis.hibernate.jsonb.type.JsonbFunctions.HAS_USER_GROUP_IDS;\n import static org.hisp.dhis.hibernate.jsonb.type.JsonbFunctions.HAS_USER_ID;\n import static org.hisp.dhis.security.acl.AclService.LIKE_READ_METADATA;\n+import static org.hisp.dhis.system.util.SqlUtils.singleQuote;\n \n import java.util.Arrays;\n import java.util.Objects;\n@@ -43,6 +44,7 @@\n import lombok.RequiredArgsConstructor;\n \n import org.hisp.dhis.commons.collection.CollectionUtils;\n+import org.hisp.dhis.system.util.SqlUtils;\n import org.hisp.dhis.user.CurrentUserGroupInfo;\n import org.hisp.dhis.user.CurrentUserService;\n import org.hisp.dhis.user.User;\n@@ -133,14 +135,14 @@ private String getSharingConditions( String access )\n     private String getOwnerCondition( CurrentUserGroupInfo currentUserGroupInfo )\n     {\n         return String.join( \" or \",\n-            jsonbFunction( EXTRACT_PATH_TEXT, \"owner\" ) + \" = \" + withQuotes( currentUserGroupInfo.getUserUID() ),\n+            jsonbFunction( EXTRACT_PATH_TEXT, \"owner\" ) + \" = \" + singleQuote( currentUserGroupInfo.getUserUID() ),\n             jsonbFunction( EXTRACT_PATH_TEXT, \"owner\" ) + \" is null\" );\n     }\n \n     private String getPublicSharingCondition( String access )\n     {\n         return String.join( \" or \",\n-            jsonbFunction( EXTRACT_PATH_TEXT, \"public\" ) + \" like \" + withQuotes( access ),\n+            jsonbFunction( EXTRACT_PATH_TEXT, \"public\" ) + \" like \" + singleQuote( access ),\n             jsonbFunction( EXTRACT_PATH_TEXT, \"public\" ) + \" is null\" );\n     }\n \n@@ -173,7 +175,7 @@ private String jsonbFunction( String functionName, String... params )\n             \"(\",\n             String.join( \",\", \"prg.sharing\",\n                 Arrays.stream( params )\n-                    .map( this::withQuotes )\n+                    .map( SqlUtils::singleQuote )\n                     .collect( joining( \",\" ) ) ),\n             \")\" );\n     }\n@@ -187,15 +189,11 @@ private String getProgramUidsFilter( Set<String> programUids )\n     {\n         return \"pr.uid in (\" +\n             programUids.stream()\n-                .map( this::withQuotes )\n+                .map( SqlUtils::singleQuote )\n                 .collect( joining( \",\" ) )\n             + \")\";\n     }\n \n-    private String withQuotes( String programUid )\n-    {\n-        return String.join( \"\", \"'\", programUid, \"'\" );\n-    }\n \n     private String getUserOrgUnitPathsFilter( Set<String> userOrgUnitPaths )\n     {"
        },
        {
          "filename": "dhis-2/dhis-services/dhis-service-core/src/main/java/org/hisp/dhis/common/DefaultIdentifiableObjectManager.java",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -57,6 +57,9 @@\n import org.hisp.dhis.category.CategoryOptionCombo;\n import org.hisp.dhis.chart.Chart;\n import org.hisp.dhis.common.exception.InvalidIdentifierReferenceException;\n+import org.hisp.dhis.commons.collection.CollectionUtils;\n+import org.hisp.dhis.feedback.ErrorCode;\n+import org.hisp.dhis.feedback.ErrorMessage;\n import org.hisp.dhis.hibernate.HibernateProxyUtils;\n import org.hisp.dhis.reporttable.ReportTable;\n import org.hisp.dhis.schema.Schema;\n@@ -618,6 +621,25 @@ public <T extends IdentifiableObject> List<T> getByUid( Class<T> clazz, Collecti\n \n         return (List<T>) store.getByUid( uids );\n     }\n+    \n+    @Override\n+    @Transactional( readOnly = true )\n+    public <T extends IdentifiableObject> List<T> getAndValidateByUid( Class<T> type, Collection<String> uids )\n+        throws IllegalQueryException\n+    {\n+        List<T> objects = getByUid( type, uids );\n+\n+        List<String> identifiers = IdentifiableObjectUtils.getUids( objects );\n+        List<String> difference = CollectionUtils.difference( uids, identifiers );\n+\n+        if ( !difference.isEmpty() )\n+        {\n+            throw new IllegalQueryException( new ErrorMessage(\n+                ErrorCode.E1112, type.getSimpleName(), difference ) );\n+        }\n+\n+        return objects;\n+    }\n \n     @Override\n     @Transactional( readOnly = true )"
        },
        {
          "filename": "dhis-2/dhis-services/dhis-service-core/src/test/java/org/hisp/dhis/common/IdentifiableObjectManagerTest.java",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -46,6 +47,7 @@\n import org.hisp.dhis.dataelement.DataElementGroup;\n import org.hisp.dhis.dataelement.DataElementOperand;\n import org.hisp.dhis.dataelement.DataElementService;\n+import org.hisp.dhis.feedback.ErrorCode;\n import org.hisp.dhis.hibernate.exception.CreateAccessDeniedException;\n import org.hisp.dhis.hibernate.exception.DeleteAccessDeniedException;\n import org.hisp.dhis.hibernate.exception.UpdateAccessDeniedException;\n@@ -444,6 +446,32 @@ public void getByUidTest()\n         assertTrue( cd.contains( dataElementC ) );\n         assertTrue( cd.contains( dataElementD ) );\n     }\n+    \n+    @Test\n+    public void getAndValidateByUidTest()\n+    {\n+        DataElement dataElementA = createDataElement( 'A' );\n+        DataElement dataElementB = createDataElement( 'B' );\n+        DataElement dataElementC = createDataElement( 'C' );\n+        identifiableObjectManager.save( dataElementA );\n+        identifiableObjectManager.save( dataElementB );\n+        identifiableObjectManager.save( dataElementC );\n+        List<DataElement> ab = identifiableObjectManager.getAndValidateByUid( DataElement.class,\n+            Arrays.asList( dataElementA.getUid(), dataElementB.getUid() ) );\n+        assertTrue( ab.contains( dataElementA ) );\n+        assertTrue( ab.contains( dataElementB ) );\n+        assertFalse( ab.contains( dataElementC ) );\n+    }\n+\n+    @Test\n+    public void getAndValidateByUidExceptionTest()\n+    {\n+        DataElement dataElementA = createDataElement( 'A' );\n+        identifiableObjectManager.save( dataElementA );\n+        IllegalQueryException ex = assertThrows( IllegalQueryException.class, () -> identifiableObjectManager\n+            .getAndValidateByUid( DataElement.class, Arrays.asList( dataElementA.getUid(), \"xhjG82jHaky\" ) ) );\n+        assertEquals( ErrorCode.E1112, ex.getErrorCode() );\n+    }\n \n     @Test\n     public void getOrderedUidIdSchemeTest()"
        },
        {
          "filename": "dhis-2/dhis-support/dhis-support-commons/src/main/java/org/hisp/dhis/commons/collection/CollectionUtils.java",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -27,9 +27,12 @@\n  */\n package org.hisp.dhis.commons.collection;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Objects;\n import java.util.Set;\n import java.util.function.Consumer;\n@@ -57,6 +60,22 @@ public static <T> Collection<T> intersection( Collection<T> c1, Collection<T> c2\n         set1.retainAll( new HashSet<>( c2 ) );\n         return set1;\n     }\n+    \n+    /**\n+     * Returns all elements which are contained by {@code collection1} but not\n+     * contained by {@code collection2} as an immutable list.\n+     *\n+     * @param <T>\n+     * @param collection1 the first collection.\n+     * @param collection2 the second collection.\n+     * @return all elements in {@code collection1} not in {@code collection2}.\n+     */\n+    public static <A> List<A> difference( Collection<A> collection1, Collection<A> collection2 )\n+    {\n+        List<A> list = new ArrayList<>( collection1 );\n+        list.removeAll( collection2 );\n+        return Collections.unmodifiableList( list );\n+    }\n \n     /**\n      * Searches for and returns the first string which starts with the given"
        },
        {
          "filename": "dhis-2/dhis-support/dhis-support-commons/src/test/java/org/hisp/dhis/commons/util/CollectionUtilsTest.java",
          "status": "added",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2004-2022, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package org.hisp.dhis.commons.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.List;\n+\n+import org.hisp.dhis.commons.collection.CollectionUtils;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+class CollectionUtilsTest\n+{\n+\n+    @Test\n+    public void testDifference()\n+    {\n+        List<String> collection1 = Lists.newArrayList( \"One\", \"Two\", \"Three\" );\n+        List<String> collection2 = Lists.newArrayList( \"One\", \"Two\", \"Four\" );\n+        List<String> difference = CollectionUtils.difference( collection1, collection2 );\n+\n+        assertEquals( 1, difference.size() );\n+        assertEquals( \"Three\", difference.get( 0 ) );\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/SqlUtils.java",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -45,6 +45,8 @@\n public class SqlUtils\n {\n     public static final String QUOTE = \"\\\"\";\n+    \n+    public static final String SINGLE_QUOTE = \"'\";\n \n     public static final String SEPARATOR = \".\";\n \n@@ -79,6 +81,21 @@ public static String quote( String alias, String relation )\n \n         return alias + SEPARATOR + quote( relation );\n     }\n+    \n+    /**\n+     * Single-quotes the given relation (typically a value). Single-quotes part\n+     * of the given relation are encoded (replaced by double single-quotes that\n+     * is).\n+     *\n+     * @param relation the relation (typically a column).\n+     * @return the single-quoted relation.\n+     */\n+    public static String singleQuote( String relation )\n+    {\n+        String rel = relation.replaceAll( SINGLE_QUOTE, (SINGLE_QUOTE + SINGLE_QUOTE) );\n+\n+        return SINGLE_QUOTE + rel + SINGLE_QUOTE;\n+    }\n \n     /**\n      * Returns a string set for the given result set and column. Assumes that"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 8,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2b28ecf1ae1e9e039601d8344da1e5857c9e7cb8",
            "date": "2025-01-24T10:38:34Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "cb9960ac909a31b6ecc6d57dd43b768546a85136",
            "date": "2025-01-24T10:37:27Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "4924ac4c9dce9cf18056204352d566422b4c7dac",
            "date": "2025-01-24T07:16:00Z",
            "author_login": "enricocolasante"
          },
          {
            "sha": "77a97898ebfbad856c7f545eb9a1dd4a5585c3a0",
            "date": "2025-01-23T17:19:50Z",
            "author_login": "jbee"
          },
          {
            "sha": "237752e831cab824961fda330b93c2e53fea837b",
            "date": "2025-01-23T15:32:50Z",
            "author_login": "luciano-fiandesio"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "DHIS2 is an information system for data capture, management, validation, analytics and visualization. A SQL injection security vulnerability affects the `/api/programs/orgUnits?programs=` API endpoint in DHIS2 versions prior to 2.36.10.1 and 2.37.6.1. The system is vulnerable to attack only from users that are logged in to DHIS2, and there is no known way of exploiting the vulnerability without first being logged in as a DHIS2 user. The vulnerability is not exposed to a non-malicious user and requires a conscious attack to be exploited. A successful exploit of this vulnerability could allow the malicious user to read, edit and delete data in the DHIS2 instance's database. Security patches are now available for DHIS2 versions 2.36.10.1 and 2.37.6.1. One may apply mitigations at the web proxy level as a workaround. More information about these mitigations is available in the GitHub Security Advisory.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-01T18:15:07.793",
    "last_modified": "2024-11-21T06:51:13.850",
    "fix_date": "2022-06-01T08:33:48Z"
  },
  "references": [
    {
      "url": "https://github.com/dhis2/dhis2-core/commit/3b245d04a58b78f0dc9bae8559f36ee4ca36dfac",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dhis2/dhis2-core/commit/ef04483a9b177d62e48dcf4e498b302a11f95e7d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dhis2/dhis2-core/pull/10953",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dhis2/dhis2-core/security/advisories/GHSA-52vp-f7hj-cj92",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dhis2/dhis2-core/commit/3b245d04a58b78f0dc9bae8559f36ee4ca36dfac",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dhis2/dhis2-core/commit/ef04483a9b177d62e48dcf4e498b302a11f95e7d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dhis2/dhis2-core/pull/10953",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dhis2/dhis2-core/security/advisories/GHSA-52vp-f7hj-cj92",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.196452",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "dhis2-core",
    "owner": "dhis2",
    "created_at": "2016-08-30T12:57:05Z",
    "updated_at": "2025-01-24T10:38:39Z",
    "pushed_at": "2025-01-24T16:12:18Z",
    "size": 219674,
    "stars": 299,
    "forks": 357,
    "open_issues": 38,
    "watchers": 299,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.21",
      "2.22",
      "2.23",
      "2.24",
      "2.25",
      "2.26",
      "2.27",
      "2.28",
      "2.29",
      "2.30",
      "2.31",
      "2.32",
      "2.33",
      "2.34",
      "2.35-DHIS2-TECH842-backport",
      "2.35",
      "2.35.8_rwanda_eq",
      "2.35.9_log4j_upgrade_2.15.0",
      "2.35.11_rwanda_eq",
      "2.36_ks",
      "2.36",
      "2.37-DHIS2-10907",
      "2.37-DHIS2-12152-backport",
      "2.37-DHIS2-14805-backport",
      "2.37",
      "2.38-DHIS2-11190",
      "2.38-DHIS2-12656-2",
      "2.38-DHIS2-12853",
      "2.38-DHIS2-15268-backport",
      "2.38-DHIS2-15724"
    ],
    "languages": {
      "Java": 37434313,
      "JavaScript": 758945,
      "CSS": 169636,
      "PLpgSQL": 75232,
      "HTML": 61589,
      "Groovy": 33500,
      "Shell": 17966,
      "XSLT": 6968,
      "SCSS": 4229,
      "Ruby": 1011,
      "Dockerfile": 107
    },
    "commit_activity": {
      "total_commits_last_year": 1606,
      "avg_commits_per_week": 30.884615384615383,
      "days_active_last_year": 276
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:22:05.235274"
  }
}