{
  "cve_id": "CVE-2022-24856",
  "github_data": {
    "repository": "flyteorg/flyteconsole",
    "fix_commit": "05b88ed2d2ecdb5d8a8404efea25414e57189709",
    "related_commits": [
      "05b88ed2d2ecdb5d8a8404efea25414e57189709",
      "05b88ed2d2ecdb5d8a8404efea25414e57189709"
    ],
    "patch_url": "https://github.com/flyteorg/flyteconsole/commit/05b88ed2d2ecdb5d8a8404efea25414e57189709.patch",
    "fix_commit_details": {
      "sha": "05b88ed2d2ecdb5d8a8404efea25414e57189709",
      "commit_date": "2022-04-14T22:31:24Z",
      "author": {
        "login": "ursucarina",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: cleanup (#389)",
        "length": 115,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 96,
        "additions": 1,
        "deletions": 95
      },
      "files": [
        {
          "filename": "CONTRIBUTING.md",
          "status": "modified",
          "additions": 0,
          "deletions": 19,
          "patch": "@@ -134,25 +134,6 @@ asdf install\n yarn install\n ```\n \n-## CORS Proxying: Recommended Setup\n-\n-In the common hosting arrangement, all API requests will be to the same origin\n-serving the client application, making CORS unnecessary. However, if you would like\n-to setup your local dev enviornment to target a FlyteAdmin service running on a different\n-domain you will need to configure your enviornment to support CORS. One example would be\n-hosting the Admin API on a different domain than the console. Another example is\n-when fetching execution data from external storage such as S3.\n-\n-The fastest (recommended) way to setup a CORS solution is to do so within the browser.\n-If you would like to handle this at the Node level you will need to disable authentication\n-(see below).\n-\n-_NOTE:_ Do not configure for both browser and Node solutions.\n-\n-These instructions require using Google Chrome. You will also need to identify the\n-URL of your target FlyteAdmin API instance. These instructions will use\n-`https://different.admin.service.com` as an example.\n-\n 1. Set `ADMIN_API_URL` and `ADMIN_API_USE_SSL`\n \n     ```"
        },
        {
          "filename": "Dockerfile",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -17,7 +17,7 @@ RUN : \\\n   # build\n   && make build_prod \\\n   # place the runtime application in /app\n-  && mv dist corsProxy.js index.js env.js plugins.js /app\n+  && mv dist index.js env.js plugins.js /app\n \n FROM gcr.io/distroless/nodejs\n LABEL org.opencontainers.image.source https://github.com/lyft/flyteconsole"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -88,10 +88,6 @@ For help with installing dependencies look into\n     `/api/v1` and `/console` for example). For local development, this is\n     usually not needed, so the default behavior is to run without a prefix.\n \n-* `CORS_PROXY_PREFIX` (default: `/cors_proxy`)\n-\n-    Sets the local endpoint for [CORS request proxying](CONTRIBUTING.md#cors-proxying-recommended-setup).\n-\n ### Running from docker image as localhost\n \n To run flyteconsole directly from your docker image as localhost you must set a\n@@ -140,26 +136,6 @@ For continious development we are using:\n \n More info on each section could be found at [CONTRIBUTING.md](CONTRIBUTING.md)\n \n-### CORS Proxying: Recommended setup\n-\n-In the common hosting arrangement, all API requests will be to the same origin\n-serving the client application, making CORS unnecessary. However, if you would like\n-to setup your local dev enviornment to target a FlyteAdmin service running on a different\n-domain you will need to configure your enviornment support CORS. One example would be\n-hosting the Admin API on a different domain than the console. Another example is\n-when fetching execution data from external storage such as S3.\n-\n-The fastest (recommended) way to setup a CORS solution is to do so within the browser. \n-If you would like to handle this at the Node level you will need to disable authentication\n-(see below)\n-\n-> Do not configure for both browser and Node solutions. \n-\n-These instructions require using Google Chrome. You will also need to identify the \n-URL of your target FlyteAdmin API instance. These instructions will use\n-`https://different.admin.service.com` as an example.\n-\n-\n * Set `ADMIN_API_URL` and `ADMIN_API_USE_SSL`\n    \n    ```bash"
        },
        {
          "filename": "corsProxy.js",
          "status": "removed",
          "additions": 0,
          "deletions": 49,
          "patch": "@@ -1,49 +0,0 @@\n-const http = require('http');\n-const https = require('https');\n-const url = require('url');\n-\n-/** Mounts a proxy at `basePath` such that requests of the form\n- * `${basePath}/http://www.example.com?queryString=value` will be converted to\n- * `http://www.example.com?queryString=value`, preserving any request headers.\n- * The response is piped directly to the client with no processing.\n- */\n-module.exports = function corsProxy(basePath) {\n-  const pathOffset = basePath.length;\n-  return function (req, res, next) {\n-    const pathIndex = req.url.indexOf(basePath);\n-    // base path doesn't match, ignore\n-    if (pathIndex < 0) {\n-      return next();\n-    }\n-\n-    const targetUrl = req.url.substring(pathIndex + pathOffset + 1);\n-    const config = url.parse(targetUrl);\n-    config.method = req.method;\n-\n-    // We need to use a different request class depending on the\n-    // protocol\n-    const handler = config.protocol === 'https:' ? https : http;\n-\n-    const proxyReq = handler.request(config, function (proxyRes) {\n-      res.writeHead(proxyRes.statusCode, proxyRes.headers);\n-      proxyRes.pipe(res, {\n-        end: true,\n-      });\n-    });\n-\n-    proxyReq.on('error', (err) => res.status(500).send(err));\n-\n-    // Copy over all headers except for 'Host', since that value would\n-    // point to *this* server, and not the remote server.\n-    Object.keys(req.headers).forEach((key) => {\n-      if (key.toLowerCase() === 'host') {\n-        return;\n-      }\n-      proxyReq.setHeader(key, req.headers[key]);\n-    });\n-\n-    req.pipe(proxyReq, {\n-      end: true,\n-    });\n-  };\n-};"
        },
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -8,15 +8,13 @@ const morgan = require('morgan');\n const express = require('express');\n const env = require('./env');\n const { applyMiddleware } = require('./plugins');\n-const corsProxy = require('./corsProxy.js');\n \n const app = express();\n \n // Enable logging for HTTP access\n app.use(morgan('combined'));\n app.use(express.json());\n app.get(`${env.BASE_URL}/healthz`, (_req, res) => res.status(200).send());\n-app.use(corsProxy(`${env.BASE_URL}${env.CORS_PROXY_PREFIX}`));\n \n if (typeof applyMiddleware === 'function') {\n   console.log('Found middleware plugins, applying...');"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "17ef806840d939132a25de1284ee229ab30b8837",
            "date": "2024-11-12T19:14:56Z",
            "author_login": "ursucarina"
          },
          {
            "sha": "d1dc8898e8c105bf6338e3cd5a536ebf24318274",
            "date": "2024-10-17T21:23:52Z",
            "author_login": "lyonlu13"
          },
          {
            "sha": "8b0d3cc5d715f460f9e1a1d415b674b466664dd9",
            "date": "2024-07-25T19:29:38Z",
            "author_login": "ddl-rliu"
          },
          {
            "sha": "7636e32d2b1dbefb7d08fb79e5ed063c3ad44ca4",
            "date": "2024-07-10T20:19:15Z",
            "author_login": "blaketastic2"
          },
          {
            "sha": "b686df9d213c1cc77f060e9deacddd6d79653171",
            "date": "2024-07-09T18:48:00Z",
            "author_login": "blaketastic2"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-918",
    "description": "FlyteConsole is the web user interface for the Flyte platform. FlyteConsole prior to version 0.52.0 is vulnerable to server-side request forgery (SSRF) when FlyteConsole is open to the general internet. An attacker can exploit any user of a vulnerable instance to access the internal metadata server or other unauthenticated URLs. Passing of headers to an unauthorized actor may occur. The patch for this issue deletes the entire `cors_proxy`, as this is not required for console anymore. A patch is available in FlyteConsole version 0.52.0. Disable FlyteConsole availability on the internet as a workaround.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-17T16:15:09.157",
    "last_modified": "2024-11-21T06:51:14.777",
    "fix_date": "2022-04-14T22:31:24Z"
  },
  "references": [
    {
      "url": "https://github.com/flyteorg/flyteconsole/commit/05b88ed2d2ecdb5d8a8404efea25414e57189709",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteconsole/pull/389",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteconsole/releases/tag/v0.52.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteconsole/security/advisories/GHSA-www6-hf2v-v9m9",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteconsole/commit/05b88ed2d2ecdb5d8a8404efea25414e57189709",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteconsole/pull/389",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteconsole/releases/tag/v0.52.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteconsole/security/advisories/GHSA-www6-hf2v-v9m9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.124864",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "flyteconsole",
    "owner": "flyteorg",
    "created_at": "2019-08-23T21:26:59Z",
    "updated_at": "2024-11-25T10:07:58Z",
    "pushed_at": "2024-12-12T01:38:20Z",
    "size": 9564,
    "stars": 37,
    "forks": 59,
    "open_issues": 45,
    "watchers": 37,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "devmain",
      "master"
    ],
    "languages": {
      "TypeScript": 2191976,
      "JavaScript": 34243,
      "Shell": 8470,
      "MDX": 5440,
      "CSS": 2254,
      "Makefile": 1652,
      "HTML": 1562,
      "Dockerfile": 981
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:54:02.126968"
  }
}