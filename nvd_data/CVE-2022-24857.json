{
  "cve_id": "CVE-2022-24857",
  "github_data": {
    "repository": "xi/django-mfa3",
    "fix_commit": "32f656e22df120b84bdf010e014bb19bd97971de",
    "related_commits": [
      "32f656e22df120b84bdf010e014bb19bd97971de",
      "32f656e22df120b84bdf010e014bb19bd97971de"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "32f656e22df120b84bdf010e014bb19bd97971de",
      "commit_date": "2022-04-15T09:38:42Z",
      "author": {
        "login": "xi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix bypass via admin login",
        "length": 62,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 63,
        "deletions": 1
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -21,7 +21,10 @@ pip install django-mfa3\n ## Usage\n \n 1.  Add `'mfa'` to `INSTALLED_APPS`\n-2.  Use `mfa.views.LoginView` instead of the regular login view\n+2.  Use `mfa.views.LoginView` instead of the regular login view. (Be sure to\n+    remove any other login routes, otherwise the multi factor authentication\n+    can be circumvented. The admin login will automatically be patched to\n+    redirect to the regular login.)\n 3.  Set `MFA_DOMAIN = 'example.com'` and `MFA_SITE_TITLE = 'My site'`\n 4.  Register URLs: `path('mfa/', include('mfa.urls', namespace='mfa')`\n 5.  The included templates are just examples, so you should [replace them](https://docs.djangoproject.com/en/stable/howto/overriding-templates/) with your own"
        },
        {
          "filename": "mfa/admin.py",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -1,7 +1,29 @@\n from django.contrib import admin\n+from django.contrib.auth import REDIRECT_FIELD_NAME\n+from django.contrib.auth.views import redirect_to_login\n+from django.urls import reverse\n \n from .models import MFAKey\n \n+original_login = admin.AdminSite.login\n+\n+\n+def custom_login(self, request, extra_context=None):\n+    next_url = (\n+        request.GET.get(REDIRECT_FIELD_NAME)\n+        or request.POST.get(REDIRECT_FIELD_NAME)\n+        or reverse('admin:index')\n+    )\n+    return redirect_to_login(next_url)\n+\n+\n+def patch_admin():\n+    setattr(admin.AdminSite, 'login', custom_login)\n+\n+\n+def unpatch_admin():\n+    setattr(admin.AdminSite, 'login', original_login)\n+\n \n @admin.register(MFAKey)\n class MFAKeyAdmin(admin.ModelAdmin):"
        },
        {
          "filename": "mfa/apps.py",
          "status": "added",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -0,0 +1,10 @@\n+from django.apps import AppConfig\n+\n+\n+class TwoFactorConfig(AppConfig):\n+    name = 'mfa'\n+    verbose_name = 'Multi Factor Authentication'\n+\n+    def ready(self):\n+        from .admin import patch_admin\n+        patch_admin()"
        },
        {
          "filename": "tests/tests.py",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -262,6 +262,31 @@ def test_public(self):\n         self.assertEqual(res.url, '/')\n \n \n+class PatchAdminTest(TestCase):\n+    def test_root(self):\n+        res = self.client.get('/admin/')\n+        self.assertEqual(res.status_code, 302)\n+        self.assertEqual(res.url, '/admin/login/?next=/admin/')\n+\n+        res = self.client.get(res.url)\n+        self.assertEqual(res.status_code, 302)\n+        self.assertEqual(res.url, '/login/?next=/admin/')\n+\n+    def test_app(self):\n+        res = self.client.get('/admin/mfa/')\n+        self.assertEqual(res.status_code, 302)\n+        self.assertEqual(res.url, '/admin/login/?next=/admin/mfa/')\n+\n+        res = self.client.get(res.url)\n+        self.assertEqual(res.status_code, 302)\n+        self.assertEqual(res.url, '/login/?next=/admin/mfa/')\n+\n+    def test_login(self):\n+        res = self.client.get('/admin/login/')\n+        self.assertEqual(res.status_code, 302)\n+        self.assertEqual(res.url, '/login/?next=/admin/')\n+\n+\n class QRCodeTest(TestCase):\n     def test_is_svg(self):\n         code = get_qrcode('some_data')"
        },
        {
          "filename": "tests/urls.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1,3 +1,4 @@\n+from django.contrib import admin\n from django.contrib.auth.decorators import login_required\n from django.contrib.auth.views import LogoutView\n from django.http import HttpResponse\n@@ -16,5 +17,6 @@ def dummy(request):\n     path('', login_required(dummy)),\n     path('login/', LoginView.as_view()),\n     path('logout/', public(LogoutView.as_view(next_page='/'))),\n+    path('admin/', admin.site.urls),\n     path('mfa/', include('mfa.urls', namespace='mfa')),\n ]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e4056204f24f63bac543ba86020d20f5b32df4fb",
            "date": "2025-01-20T13:16:35Z",
            "author_login": "xi"
          },
          {
            "sha": "0c4256f7d3e73bba5a003f722c23e0a7ab2c73f0",
            "date": "2025-01-20T13:08:25Z",
            "author_login": "xi"
          },
          {
            "sha": "9390c4828cf37ee6fe6898020b17dee4f3ac8f29",
            "date": "2025-01-20T12:59:21Z",
            "author_login": "xi"
          },
          {
            "sha": "dd13aea88032e278d2419bb4b672389a7c14c015",
            "date": "2024-12-06T08:21:37Z",
            "author_login": "xi"
          },
          {
            "sha": "ecabef2b9029745e24ea3a7552e103ddd3bbd179",
            "date": "2024-12-06T08:15:38Z",
            "author_login": "xi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-287",
    "description": "django-mfa3 is a library that implements multi factor authentication for the django web framework. It achieves this by modifying the regular login view. Django however has a second login view for its admin area. This second login view was not modified, so the multi factor authentication can be bypassed. Users are affected if they have activated both django-mfa3 (< 0.5.0) and django.contrib.admin and have not taken any other measures to prevent users from accessing the admin login view. The issue has been fixed in django-mfa3 0.5.0. It is possible to work around the issue by overwriting the admin login route, e.g. by adding the following URL definition *before* the admin routes: url('admin/login/', lambda request: redirect(settings.LOGIN_URL)",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-15T19:15:12.447",
    "last_modified": "2024-11-21T06:51:14.910",
    "fix_date": "2022-04-15T09:38:42Z"
  },
  "references": [
    {
      "url": "https://github.com/xi/django-mfa3/blob/main/CHANGES.md#050-2022-04-15",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xi/django-mfa3/commit/32f656e22df120b84bdf010e014bb19bd97971de",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xi/django-mfa3/security/advisories/GHSA-3r7g-wrpr-j5g4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220609-0003/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xi/django-mfa3/blob/main/CHANGES.md#050-2022-04-15",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xi/django-mfa3/commit/32f656e22df120b84bdf010e014bb19bd97971de",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xi/django-mfa3/security/advisories/GHSA-3r7g-wrpr-j5g4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220609-0003/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.388681",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "django-mfa3",
    "owner": "xi",
    "created_at": "2021-06-20T21:48:36Z",
    "updated_at": "2025-01-20T13:16:56Z",
    "pushed_at": "2025-01-20T13:16:54Z",
    "size": 96,
    "stars": 23,
    "forks": 8,
    "open_issues": 6,
    "watchers": 23,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 32630,
      "HTML": 4672,
      "JavaScript": 2112
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:30:53.130889"
  }
}