{
  "cve_id": "CVE-2022-24861",
  "github_data": {
    "repository": "vran-dev/databasir",
    "fix_commit": "ca22a8fef7a31c0235b0b2951260a7819b89993b",
    "related_commits": [
      "ca22a8fef7a31c0235b0b2951260a7819b89993b",
      "ca22a8fef7a31c0235b0b2951260a7819b89993b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "ca22a8fef7a31c0235b0b2951260a7819b89993b",
      "commit_date": "2022-04-18T03:43:33Z",
      "author": {
        "login": "vran-dev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix some security bug (#103)",
        "length": 154,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 188,
        "additions": 127,
        "deletions": 61
      },
      "files": [
        {
          "filename": "api/src/main/resources/application-local.properties",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -9,4 +9,5 @@ spring.flyway.locations=classpath:db/migration\n databasir.db.url=localhost:3306\n databasir.db.username=root\n databasir.db.password=123456\n-databasir.db.driver-directory=drivers\n\\ No newline at end of file\n+databasir.db.driver-directory=drivers\n+databasir.jwt.secret=DatabasirJwtSecret\n\\ No newline at end of file"
        },
        {
          "filename": "api/src/main/resources/application.properties",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -11,4 +11,5 @@ spring.flyway.enabled=true\n spring.flyway.baseline-on-migrate=true\n spring.flyway.locations=classpath:db/migration\n # driver directory\n-databasir.db.driver-directory=drivers\n\\ No newline at end of file\n+databasir.db.driver-directory=drivers\n+databasir.jwt.secret=${random.uuid}\n\\ No newline at end of file"
        },
        {
          "filename": "core/src/main/java/com/databasir/core/domain/DomainErrors.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -44,7 +44,7 @@ public enum DomainErrors implements DatabasirErrors {\n     DUPLICATE_COLUMN(\"A_10028\", \"\u91cd\u590d\u7684\u5217\"),\n     INVALID_MOCK_DATA_SCRIPT(\"A_10029\", \"\u4e0d\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\"),\n     CANNOT_DELETE_SELF(\"A_10030\", \"\u65e0\u6cd5\u5bf9\u81ea\u5df1\u6267\u884c\u5220\u9664\u8d26\u53f7\u64cd\u4f5c\"),\n-    DRIVER_CLASS_NAME_OBTAIN_ERROR(\"A_10031\", \"\u83b7\u53d6\u9a71\u52a8\u7c7b\u540d\u5931\u8d25\"),\n+    DRIVER_CLASS_NOT_FOUND(\"A_10031\", \"\u83b7\u53d6\u9a71\u52a8\u7c7b\u540d\u5931\u8d25\"),\n     ;\n \n     private final String errCode;"
        },
        {
          "filename": "core/src/main/java/com/databasir/core/domain/database/service/DatabaseTypeService.java",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -36,6 +36,7 @@ public class DatabaseTypeService {\n     private final DatabaseTypePojoConverter databaseTypePojoConverter;\n \n     public Integer create(DatabaseTypeCreateRequest request) {\n+        driverResources.validateJar(request.getJdbcDriverFileUrl(), request.getJdbcDriverClassName());\n         DatabaseTypePojo pojo = databaseTypePojoConverter.of(request);\n         try {\n             return databaseTypeDao.insertAndReturnId(pojo);\n@@ -50,7 +51,7 @@ public void update(DatabaseTypeUpdateRequest request) {\n             if (DatabaseTypes.has(data.getDatabaseType())) {\n                 throw DomainErrors.MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE.exception();\n             }\n-\n+            driverResources.validateJar(request.getJdbcDriverFileUrl(), request.getJdbcDriverClassName());\n             DatabaseTypePojo pojo = databaseTypePojoConverter.of(request);\n             try {\n                 databaseTypeDao.updateById(pojo);\n@@ -61,7 +62,7 @@ public void update(DatabaseTypeUpdateRequest request) {\n             // \u540d\u79f0\u4fee\u6539\uff0c\u4e0b\u8f7d\u5730\u5740\u4fee\u6539\u9700\u8981\u5220\u9664\u539f\u6709\u7684 driver\n             if (!Objects.equals(request.getDatabaseType(), data.getDatabaseType())\n                     || !Objects.equals(request.getJdbcDriverFileUrl(), data.getJdbcDriverFileUrl())) {\n-                driverResources.delete(data.getDatabaseType());\n+                driverResources.deleteByDatabaseType(data.getDatabaseType());\n             }\n         });\n \n@@ -73,7 +74,7 @@ public void deleteById(Integer id) {\n                 throw DomainErrors.MUST_NOT_MODIFY_SYSTEM_DEFAULT_DATABASE_TYPE.exception();\n             }\n             databaseTypeDao.deleteById(id);\n-            driverResources.delete(data.getDatabaseType());\n+            driverResources.deleteByDatabaseType(data.getDatabaseType());\n         });\n     }\n \n@@ -109,7 +110,7 @@ public Optional<DatabaseTypeDetailResponse> selectOne(Integer id) {\n     }\n \n     public String resolveDriverClassName(DriverClassNameResolveRequest request) {\n-        return driverResources.resolveSqlDriverNameFromJar(request.getJdbcDriverFileUrl());\n+        return driverResources.resolveDriverClassName(request.getJdbcDriverFileUrl());\n     }\n \n }"
        },
        {
          "filename": "core/src/main/java/com/databasir/core/infrastructure/connection/CustomDatabaseConnectionFactory.java",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -36,8 +36,10 @@ public boolean support(String databaseType) {\n \n     @Override\n     public Connection getConnection(Context context) throws SQLException {\n-        DatabaseTypePojo type = databaseTypeDao.selectByDatabaseType(context.getDatabaseType());\n-        File driverFile = driverResources.loadOrDownload(context.getDatabaseType(), type.getJdbcDriverFileUrl());\n+        String databaseType = context.getDatabaseType();\n+        DatabaseTypePojo type = databaseTypeDao.selectByDatabaseType(databaseType);\n+        File driverFile = driverResources.loadOrDownloadByDatabaseType(databaseType, type.getJdbcDriverFileUrl());\n+\n         URLClassLoader loader = null;\n         try {\n             loader = new URLClassLoader(\n@@ -55,11 +57,11 @@ public Connection getConnection(Context context) throws SQLException {\n         Class<?> clazz = null;\n         Driver driver = null;\n         try {\n-            clazz = Class.forName(type.getJdbcDriverClassName(), true, loader);\n+            clazz = Class.forName(type.getJdbcDriverClassName(), false, loader);\n             driver = (Driver) clazz.getConstructor().newInstance();\n         } catch (ClassNotFoundException e) {\n             log.error(\"init driver error\", e);\n-            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38, \u8bf7\u68c0\u67e5 Driver name\uff1a\" + e.getMessage());\n+            throw DomainErrors.CONNECT_DATABASE_FAILED.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38, \u8bf7\u68c0\u67e5\u9a71\u52a8\u7c7b\u540d\uff1a\" + e.getMessage());\n         } catch (InvocationTargetException\n                  | InstantiationException\n                  | IllegalAccessException"
        },
        {
          "filename": "core/src/main/java/com/databasir/core/infrastructure/driver/DriverResources.java",
          "status": "modified",
          "additions": 90,
          "deletions": 46,
          "patch": "@@ -4,16 +4,22 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.ClassUtils;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.http.HttpMethod;\n import org.springframework.stereotype.Component;\n import org.springframework.util.StreamUtils;\n+import org.springframework.web.client.RestClientException;\n import org.springframework.web.client.RestTemplate;\n \n import java.io.*;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.Optional;\n import java.util.UUID;\n import java.util.jar.JarFile;\n \n@@ -27,7 +33,7 @@ public class DriverResources {\n \n     private final RestTemplate restTemplate;\n \n-    public void delete(String databaseType) {\n+    public void deleteByDatabaseType(String databaseType) {\n         Path path = Paths.get(driverFilePath(driverBaseDirectory, databaseType));\n         try {\n             Files.deleteIfExists(path);\n@@ -36,10 +42,24 @@ public void delete(String databaseType) {\n         }\n     }\n \n-    public String resolveSqlDriverNameFromJar(String driverFileUrl) {\n+    public Optional<File> loadByDatabaseType(String databaseType) {\n+        Path path = Paths.get(driverFilePath(driverBaseDirectory, databaseType));\n+        if (Files.exists(path)) {\n+            return Optional.of(path.toFile());\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public File loadOrDownloadByDatabaseType(String databaseType, String driverFileUrl) {\n+        return loadByDatabaseType(databaseType)\n+                .orElseGet(() -> download(driverFileUrl, driverFilePath(driverBaseDirectory, databaseType)));\n+    }\n+\n+    public String resolveDriverClassName(String driverFileUrl) {\n         String tempFilePath = \"temp/\" + UUID.randomUUID() + \".jar\";\n-        File driverFile = doDownload(driverFileUrl, tempFilePath);\n-        String className = doResolveSqlDriverNameFromJar(driverFile);\n+        File driverFile = download(driverFileUrl, tempFilePath);\n+        String className = resolveDriverClassName(driverFile);\n         try {\n             Files.deleteIfExists(driverFile.toPath());\n         } catch (IOException e) {\n@@ -48,27 +68,48 @@ public String resolveSqlDriverNameFromJar(String driverFileUrl) {\n         return className;\n     }\n \n-    public File loadOrDownload(String databaseType, String driverFileUrl) {\n-        String filePath = driverFilePath(driverBaseDirectory, databaseType);\n-        Path path = Path.of(filePath);\n-        if (Files.exists(path)) {\n-            // ignore\n-            log.debug(\"{} already exists, ignore download from {}\", filePath, driverFileUrl);\n-            return path.toFile();\n+    public String resolveDriverClassName(File driverFile) {\n+        JarFile jarFile = null;\n+        try {\n+            jarFile = new JarFile(driverFile);\n+        } catch (IOException e) {\n+            log.error(\"resolve driver class name error\", e);\n+            throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(e.getMessage());\n         }\n-        return this.doDownload(driverFileUrl, filePath);\n+\n+        final JarFile driverJar = jarFile;\n+        String driverClassName = jarFile.stream()\n+                .filter(entry -> entry.getName().contains(\"META-INF/services/java.sql.Driver\"))\n+                .findFirst()\n+                .map(entry -> {\n+                    InputStream stream = null;\n+                    BufferedReader reader = null;\n+                    try {\n+                        stream = driverJar.getInputStream(entry);\n+                        reader = new BufferedReader(new InputStreamReader(stream));\n+                        return reader.readLine();\n+                    } catch (IOException e) {\n+                        log.error(\"resolve driver class name error\", e);\n+                        throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(e.getMessage());\n+                    } finally {\n+                        IOUtils.closeQuietly(reader, ex -> log.error(\"close reader error\", ex));\n+                    }\n+                })\n+                .orElseThrow(DomainErrors.DRIVER_CLASS_NOT_FOUND::exception);\n+        IOUtils.closeQuietly(jarFile, ex -> log.error(\"close jar file error\", ex));\n+        return driverClassName;\n     }\n \n-    private File doDownload(String driverFileUrl, String filePath) {\n-        Path path = Path.of(filePath);\n+    private File download(String driverFileUrl, String targetFile) {\n+        Path path = Path.of(targetFile);\n \n         // create parent directory\n         if (Files.notExists(path)) {\n             path.getParent().toFile().mkdirs();\n             try {\n                 Files.createFile(path);\n             } catch (IOException e) {\n-                log.error(\"create file error \" + filePath, e);\n+                log.error(\"create file error \" + targetFile, e);\n                 throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n             }\n         }\n@@ -81,52 +122,55 @@ private File doDownload(String driverFileUrl, String filePath) {\n                     FileOutputStream out = new FileOutputStream(file);\n                     StreamUtils.copy(response.getBody(), out);\n                     IOUtils.closeQuietly(out, ex -> log.error(\"close file error\", ex));\n-                    log.info(\"{} download success \", filePath);\n+                    log.info(\"{} download success \", targetFile);\n                     return file;\n                 } else {\n-                    log.error(\"{} download error from {}: {} \", filePath, driverFileUrl, response);\n+                    log.error(\"{} download error from {}: {} \", targetFile, driverFileUrl, response);\n                     throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(\"\u9a71\u52a8\u4e0b\u8f7d\u5931\u8d25\uff1a\"\n                             + response.getStatusCode()\n                             + \", \"\n                             + response.getStatusText());\n                 }\n             });\n-        } catch (IllegalArgumentException e) {\n-            log.error(filePath + \" download driver error\", e);\n+        } catch (RestClientException e) {\n+            log.error(targetFile + \" download driver error\", e);\n             throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n         }\n     }\n \n-    private String doResolveSqlDriverNameFromJar(File driverFile) {\n-        JarFile jarFile = null;\n+    public void validateJar(String driverFileUrl, String className) {\n+        String tempFilePath = \"temp/\" + UUID.randomUUID() + \".jar\";\n+        File driverFile = download(driverFileUrl, tempFilePath);\n+        URLClassLoader loader = null;\n         try {\n-            jarFile = new JarFile(driverFile);\n-        } catch (IOException e) {\n-            log.error(\"resolve driver class name error\", e);\n-            throw DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR.exception(e.getMessage());\n+            loader = new URLClassLoader(\n+                    new URL[]{driverFile.toURI().toURL()},\n+                    this.getClass().getClassLoader()\n+            );\n+        } catch (MalformedURLException e) {\n+            log.error(\"load driver jar error \", e);\n+            throw DomainErrors.DOWNLOAD_DRIVER_ERROR.exception(e.getMessage());\n         }\n \n-        final JarFile driverJar = jarFile;\n-        String driverClassName = jarFile.stream()\n-                .filter(entry -> entry.getName().contains(\"META-INF/services/java.sql.Driver\"))\n-                .findFirst()\n-                .map(entry -> {\n-                    InputStream stream = null;\n-                    BufferedReader reader = null;\n-                    try {\n-                        stream = driverJar.getInputStream(entry);\n-                        reader = new BufferedReader(new InputStreamReader(stream));\n-                        return reader.readLine();\n-                    } catch (IOException e) {\n-                        log.error(\"resolve driver class name error\", e);\n-                        throw DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR.exception(e.getMessage());\n-                    } finally {\n-                        IOUtils.closeQuietly(reader, ex -> log.error(\"close reader error\", ex));\n-                    }\n-                })\n-                .orElseThrow(DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR::exception);\n-        IOUtils.closeQuietly(jarFile, ex -> log.error(\"close jar file error\", ex));\n-        return driverClassName;\n+        try {\n+            Class clazz = Class.forName(className, false, loader);\n+            boolean isValid = ClassUtils.getAllInterfaces(clazz)\n+                    .stream()\n+                    .anyMatch(cls -> cls.getName().equals(\"java.sql.Driver\"));\n+            if (!isValid) {\n+                throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(\"\u4e0d\u5408\u6cd5\u7684\u9a71\u52a8\u7c7b\uff0c\u8bf7\u91cd\u65b0\u6307\u5b9a\");\n+            }\n+        } catch (ClassNotFoundException e) {\n+            log.error(\"init driver error\", e);\n+            throw DomainErrors.DRIVER_CLASS_NOT_FOUND.exception(\"\u9a71\u52a8\u521d\u59cb\u5316\u5f02\u5e38, \u8bf7\u68c0\u67e5\u9a71\u52a8\u7c7b\u540d\uff1a\" + e.getMessage());\n+        } finally {\n+            IOUtils.closeQuietly(loader);\n+            try {\n+                Files.deleteIfExists(driverFile.toPath());\n+            } catch (IOException e) {\n+                log.error(\"delete driver error \" + tempFilePath, e);\n+            }\n+        }\n     }\n \n     private String driverFilePath(String baseDir, String databaseType) {"
        },
        {
          "filename": "core/src/main/java/com/databasir/core/infrastructure/jwt/JwtTokens.java",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -5,6 +5,7 @@\n import com.auth0.jwt.exceptions.JWTVerificationException;\n import com.auth0.jwt.interfaces.JWTVerifier;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n import java.time.Instant;\n@@ -23,10 +24,11 @@ public class JwtTokens {\n \n     private static final String ISSUER = \"Databasir\";\n \n-    private static final String SECRET = \"Databasir2022\";\n+    @Value(\"${databasir.jwt.secret}\")\n+    private String tokenSecret;\n \n     public String accessToken(String username) {\n-        Algorithm algorithm = Algorithm.HMAC256(SECRET);\n+        Algorithm algorithm = Algorithm.HMAC256(tokenSecret);\n \n         return JWT.create()\n                 .withExpiresAt(new Date(new Date().getTime() + ACCESS_EXPIRE_TIME))\n@@ -36,7 +38,7 @@ public String accessToken(String username) {\n     }\n \n     public boolean verify(String token) {\n-        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET))\n+        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(tokenSecret))\n                 .withIssuer(ISSUER)\n                 .build();\n         try {"
        },
        {
          "filename": "core/src/test/java/com/databasir/core/domain/database/service/DatabaseTypeServiceTest.java",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -5,14 +5,20 @@\n import com.databasir.core.domain.DomainErrors;\n import com.databasir.core.domain.database.data.DatabaseTypeCreateRequest;\n import com.databasir.core.domain.database.data.DatabaseTypeUpdateRequest;\n+import com.databasir.core.infrastructure.driver.DriverResources;\n import com.databasir.dao.impl.DatabaseTypeDao;\n import com.databasir.dao.tables.pojos.DatabaseTypePojo;\n import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n import org.springframework.test.context.jdbc.Sql;\n import org.springframework.transaction.annotation.Transactional;\n \n+import static org.mockito.ArgumentMatchers.anyString;\n+\n @Transactional\n class DatabaseTypeServiceTest extends BaseTest {\n \n@@ -22,6 +28,14 @@ class DatabaseTypeServiceTest extends BaseTest {\n     @Autowired\n     private DatabaseTypeDao databaseTypeDao;\n \n+    @MockBean\n+    private DriverResources driverResources;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        Mockito.doNothing().when(driverResources).validateJar(anyString(), anyString());\n+    }\n+\n     @Test\n     void create() {\n         DatabaseTypeCreateRequest request = new DatabaseTypeCreateRequest();"
        },
        {
          "filename": "core/src/test/resources/application-ut.properties",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -15,4 +15,5 @@ spring.flyway.locations=classpath:db/migration\n databasir.db.url=localhost:3306\n databasir.db.username=root\n databasir.db.password=123456\n-databasir.db.driver-directory=drivers\n\\ No newline at end of file\n+databasir.db.driver-directory=drivers\n+databasir.jwt.secret=DatabasirJwtSecret\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 8,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "01fa3284b6155dd104965307c162cbdaf22c9a3a",
            "date": "2023-12-01T11:46:40Z",
            "author_login": "vran-dev"
          },
          {
            "sha": "bb2e5a786a9601a72ece474a7807b866320e3f89",
            "date": "2023-09-17T04:49:08Z",
            "author_login": "vran-dev"
          },
          {
            "sha": "2925a579170caa0bc0b34eadf3af43e3dc4521ba",
            "date": "2023-08-29T03:03:42Z",
            "author_login": "vran-dev"
          },
          {
            "sha": "2592056cd7f4d80154ca4c2cbc617aa12079684f",
            "date": "2023-08-28T05:32:34Z",
            "author_login": "vran-dev"
          },
          {
            "sha": "2d927dae222cb31281ee93395f00cf1519859346",
            "date": "2023-08-27T12:40:26Z",
            "author_login": "vran-dev"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "Databasir is a team-oriented relational database model document management platform. Databasir 1.01 has remote code execution vulnerability. JDBC drivers are not validated prior to use and may be provided by users of the system. This can lead to code execution by any basic user who has access to the system. Users are advised to upgrade. There are no known workarounds to this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-20T19:15:07.920",
    "last_modified": "2024-11-21T06:51:15.447",
    "fix_date": "2022-04-18T03:43:33Z"
  },
  "references": [
    {
      "url": "https://github.com/vran-dev/databasir/commit/ca22a8fef7a31c0235b0b2951260a7819b89993b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vran-dev/databasir/pull/103",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vran-dev/databasir/security/advisories/GHSA-5r2v-wcwh-7xmp",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vran-dev/databasir/commit/ca22a8fef7a31c0235b0b2951260a7819b89993b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vran-dev/databasir/pull/103",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vran-dev/databasir/security/advisories/GHSA-5r2v-wcwh-7xmp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.396422",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "databasir",
    "owner": "vran-dev",
    "created_at": "2021-12-26T15:23:15Z",
    "updated_at": "2025-01-23T02:47:35Z",
    "pushed_at": "2023-12-01T11:46:44Z",
    "size": 126472,
    "stars": 755,
    "forks": 105,
    "open_issues": 10,
    "watchers": 755,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 728310,
      "FreeMarker": 14368,
      "HTML": 850,
      "Dockerfile": 731,
      "CSS": 124
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:49:02.921539"
  }
}