{
  "cve_id": "CVE-2022-24897",
  "github_data": {
    "repository": "xwiki/xwiki-commons",
    "fix_commit": "215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
    "related_commits": [
      "215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
      "215951cfb0f808d0bf5b1097c9e7d1e503449ab8"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-commons/commit/215951cfb0f808d0bf5b1097c9e7d1e503449ab8.patch",
    "fix_commit_details": {
      "sha": "215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
      "commit_date": "2021-01-06T09:11:42Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "XWIKI-5168: Don't allow some methods in velocity introspector (#127)",
        "length": 68,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 184,
        "additions": 155,
        "deletions": 29
      },
      "files": [
        {
          "filename": "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java",
          "status": "modified",
          "additions": 75,
          "deletions": 29,
          "patch": "@@ -19,7 +19,11 @@\n  */\n package org.xwiki.velocity.introspection;\n \n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n \n import org.apache.velocity.util.introspection.SecureIntrospectorImpl;\n@@ -33,7 +37,8 @@\n  */\n public class SecureIntrospector extends SecureIntrospectorImpl\n {\n-    private final Set<String> secureClassMethods = new HashSet<>();\n+    private static final String GETNAME = \"getname\";\n+    private final Map<Class, Set<String>> whitelistedMethods;\n \n     /**\n      * @param badClasses forbidden classes\n@@ -44,41 +49,82 @@ public SecureIntrospector(String[] badClasses, String[] badPackages, Logger log)\n     {\n         super(badClasses, badPackages, log);\n \n-        this.secureClassMethods.add(\"getname\");\n-        this.secureClassMethods.add(\"getName\");\n-        this.secureClassMethods.add(\"getsimpleName\");\n-        this.secureClassMethods.add(\"getSimpleName\");\n+        this.whitelistedMethods = new HashMap<>();\n+        this.prepareWhitelistClass();\n+        this.prepareWhiteListFile();\n+    }\n \n-        this.secureClassMethods.add(\"isarray\");\n-        this.secureClassMethods.add(\"isArray\");\n-        this.secureClassMethods.add(\"isassignablefrom\");\n-        this.secureClassMethods.add(\"isAssignableFrom\");\n-        this.secureClassMethods.add(\"isenum\");\n-        this.secureClassMethods.add(\"isEnum\");\n-        this.secureClassMethods.add(\"isinstance\");\n-        this.secureClassMethods.add(\"isInstance\");\n-        this.secureClassMethods.add(\"isinterface\");\n-        this.secureClassMethods.add(\"isInterface\");\n-        this.secureClassMethods.add(\"islocalClass\");\n-        this.secureClassMethods.add(\"isLocalClass\");\n-        this.secureClassMethods.add(\"ismemberclass\");\n-        this.secureClassMethods.add(\"isMemberClass\");\n-        this.secureClassMethods.add(\"isprimitive\");\n-        this.secureClassMethods.add(\"isPrimitive\");\n-        this.secureClassMethods.add(\"issynthetic\");\n-        this.secureClassMethods.add(\"isSynthetic\");\n-        this.secureClassMethods.add(\"getEnumConstants\");\n+    private void prepareWhitelistClass()\n+    {\n+        Set<String> whitelist = new HashSet<>(Arrays.asList(\n+            GETNAME,\n+            \"getsimpleName\",\n+            \"isarray\",\n+            \"isassignablefrom\",\n+            \"isenum\",\n+            \"isinstance\",\n+            \"isinterface\",\n+            \"islocalclass\",\n+            \"ismemberclass\",\n+            \"isprimitive\",\n+            \"issynthetic\",\n+            \"getenumconstants\"\n+        ));\n+        this.whitelistedMethods.put(Class.class, whitelist);\n+    }\n \n-        // TODO: add more when needed\n+    private void prepareWhiteListFile()\n+    {\n+        Set<String> whitelist = new HashSet<>(Arrays.asList(\n+            \"canexecute\",\n+            \"canread\",\n+            \"canwrite\",\n+            \"compareto\",\n+            \"createtempfile\",\n+            \"equals\",\n+            \"getabsolutefile\",\n+            \"getabsolutepath\",\n+            \"getcanonicalfile\",\n+            \"getcanonicalpath\",\n+            \"getfreespace\",\n+            GETNAME,\n+            \"getparent\",\n+            \"getparentfile\",\n+            \"getpath\",\n+            \"gettotalspace\",\n+            \"getusablespace\",\n+            \"hashcode\",\n+            \"isabsolute\",\n+            \"isdirectory\",\n+            \"isfile\",\n+            \"ishidden\",\n+            \"lastmodified\",\n+            \"length\",\n+            \"topath\",\n+            \"tostring\",\n+            \"touri\",\n+            \"tourl\",\n+            \"getclass\"\n+        ));\n+        this.whitelistedMethods.put(File.class, whitelist);\n     }\n \n     @Override\n     public boolean checkObjectExecutePermission(Class clazz, String methodName)\n     {\n-        if (Class.class.isAssignableFrom(clazz) && methodName != null && this.secureClassMethods.contains(methodName)) {\n-            return true;\n-        } else {\n-            return super.checkObjectExecutePermission(clazz, methodName);\n+        Boolean result = null;\n+        if (methodName != null) {\n+            for (Map.Entry<Class, Set<String>> classSetEntry : this.whitelistedMethods.entrySet()) {\n+                if (classSetEntry.getKey().isAssignableFrom(clazz)) {\n+                    result = classSetEntry.getValue().contains(methodName.toLowerCase());\n+                    break;\n+                }\n+            }\n+        }\n+\n+        if (result == null) {\n+            result = super.checkObjectExecutePermission(clazz, methodName);\n         }\n+        return result;\n     }\n }"
        },
        {
          "filename": "xwiki-commons-core/xwiki-commons-velocity/src/test/java/org/xwiki/velocity/introspection/SecureIntrospectorTest.java",
          "status": "added",
          "additions": 80,
          "deletions": 0,
          "patch": "@@ -0,0 +1,80 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.velocity.introspection;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.slf4j.Logger;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests for {@link SecureIntrospector}.\n+ *\n+ * @version $Id$\n+ */\n+class SecureIntrospectorTest\n+{\n+    @Mock\n+    private Logger logger;\n+\n+    class CustomFile extends File\n+    {\n+        public CustomFile(String s)\n+        {\n+            super(s);\n+        }\n+    }\n+\n+    @Test\n+    void checkObjectExecutePermissionWithClass()\n+    {\n+        SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, this.logger);\n+        assertTrue(secureIntrospector.checkObjectExecutePermission(Class.class, \"isLocalClass\"));\n+    }\n+\n+    @Test\n+    void checkObjectExecutePermissionWithFile()\n+    {\n+        SecureIntrospector secureIntrospector = new SecureIntrospector(new String[] {}, new String[] {}, this.logger);\n+        assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"toString\"));\n+        assertFalse(secureIntrospector.checkObjectExecutePermission(File.class, \"mkdir\"));\n+\n+        assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"tostring\"));\n+        assertFalse(secureIntrospector.checkObjectExecutePermission(File.class, \"renameto\"));\n+        assertFalse(secureIntrospector.checkObjectExecutePermission(File.class, \"renameTo\"));\n+\n+        assertTrue(secureIntrospector.checkObjectExecutePermission(CustomFile.class, \"toString\"));\n+        assertFalse(secureIntrospector.checkObjectExecutePermission(CustomFile.class, \"mkdir\"));\n+    }\n+\n+    @Test\n+    void checkObjectExecutePermissionBlacklistedClass()\n+    {\n+        SecureIntrospector secureIntrospector = new SecureIntrospector(\n+            new String[] { \"java.util.ArrayList\" }, new String[] {}, this.logger);\n+        assertTrue(secureIntrospector.checkObjectExecutePermission(File.class, \"toString\"));\n+        assertFalse(secureIntrospector.checkObjectExecutePermission(ArrayList.class, \"toString\"));\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "85b59159bb4fb19b6419bac3169b4d40f3d348b2",
            "date": "2025-01-13T15:52:46Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "f3fd1088356deb08a7ef9f13100339111922fc82",
            "date": "2025-01-13T15:51:12Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "0ecc68313bbc332ad0920eb13df5036bee737b02",
            "date": "2025-01-10T16:43:17Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "c6c8a421e5ce215f3e62c8ea7d12254e5483f3b5",
            "date": "2025-01-10T14:52:33Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "eaf8b5b360fd57d5c262f0830766b92fcf334d04",
            "date": "2025-01-10T14:08:59Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-22",
    "description": "APIs to evaluate content with Velocity is a package for APIs to evaluate content with Velocity. Starting with version 2.3 and prior to 12.6.7, 12.10.3, and 13.0, the velocity scripts are not properly sandboxed against using the Java File API to perform read or write operations on the filesystem. Writing an attacking script in Velocity requires the Script rights in XWiki so not all users can use it, and it also requires finding an XWiki API which returns a File. The problem has been patched in versions 12.6.7, 12.10.3, and 13.0. There is no easy workaround for fixing this vulnerability other than upgrading and being careful when giving Script rights.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-05-02T22:15:09.767",
    "last_modified": "2024-11-21T06:51:20.850",
    "fix_date": "2021-01-06T09:11:42Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-commons/commit/215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-commons/pull/127",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-commons/security/advisories/GHSA-cvx5-m8vg-vxgc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-5168",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-commons/commit/215951cfb0f808d0bf5b1097c9e7d1e503449ab8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-commons/pull/127",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-commons/security/advisories/GHSA-cvx5-m8vg-vxgc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-5168",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.433518",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-commons",
    "owner": "xwiki",
    "created_at": "2011-03-04T21:31:54Z",
    "updated_at": "2025-01-13T15:52:59Z",
    "pushed_at": "2025-01-13T15:52:55Z",
    "size": 38500,
    "stars": 85,
    "forks": 123,
    "open_issues": 27,
    "watchers": 85,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable-14.10.x",
      "stable-15.10.x",
      "stable-16.4.x",
      "stable-16.10.x"
    ],
    "languages": {
      "Java": 7553862,
      "AspectJ": 6773,
      "AMPL": 4949,
      "Groovy": 1367,
      "JavaScript": 911,
      "CSS": 21
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T16:59:29.086917"
  }
}