{
  "cve_id": "CVE-2022-25044",
  "github_data": {
    "repository": "espruino/Espruino",
    "fix_commit": "e069be2ecc5060ef47391716e4de94999595b260",
    "related_commits": [
      "e069be2ecc5060ef47391716e4de94999595b260",
      "e069be2ecc5060ef47391716e4de94999595b260"
    ],
    "patch_url": "https://github.com/espruino/Espruino/commit/e069be2ecc5060ef47391716e4de94999595b260.patch",
    "fix_commit_details": {
      "sha": "e069be2ecc5060ef47391716e4de94999595b260",
      "commit_date": "2022-02-08T14:59:00Z",
      "author": {
        "login": "gfwilliams",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix potential corruption issue caused by `delete [].__proto__` (fix #2142)",
        "length": 74,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 23,
        "additions": 19,
        "deletions": 4
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -9,6 +9,7 @@\n             Much-improved whitespace lexing code using single jumptable - 3% speed increase\n             Allow `process.memory(false)` to get memory info but skip GC\n             Graphics: fix height calculation bug in fillRect/clearRect when given an object with w/h as an argument\n+            Fix potential corruption issue caused by `delete [].__proto__` (fix #2142)\n \n      2v12 : nRF52840: Flow control XOFF is now sent at only 3/8th full - delays in BLE mean we can sometimes fill our 1k input buffer otherwise\n             __FILE__ is now set correctly for apps (fixes 2v11 regression)"
        },
        {
          "filename": "src/jsparse.c",
          "status": "modified",
          "additions": 13,
          "deletions": 3,
          "patch": "@@ -952,7 +952,12 @@ static NO_INLINE JsVar *jspGetNamedFieldInParents(JsVar *object, const char* nam\n     } else if (strcmp(name, JSPARSE_INHERITS_VAR)==0) {\n       const char *objName = jswGetBasicObjectName(object);\n       if (objName) {\n-        child = jspNewPrototype(objName);\n+        JsVar *p = jsvSkipNameAndUnLock(jspNewPrototype(objName));\n+        // jspNewPrototype returns a 'prototype' name that's already a child of eg. an array\n+        // Create a new 'name' called __proto__ that links to it\n+        JsVar *i = jsvNewFromString(JSPARSE_INHERITS_VAR);\n+        if (p) child = jsvCreateNewChild(object, i, p);\n+        jsvUnLock(i);\n       }\n     }\n   }\n@@ -1372,8 +1377,13 @@ NO_INLINE JsVar *jspeFactorDelete() {\n       if (!parent && jsvIsChild(execInfo.root, a))\n         parent = jsvLockAgain(execInfo.root);\n \n-      if (jsvHasChildren(parent)) {\n+#ifdef DEBUG\n+      if (jsvHasChildren(parent)) assert(jsvIsChild(parent, a));\n+#endif\n+      if (jsvHasChildren(parent) && jsvIsChild(parent, a)) {\n         // else remove properly.\n+        /* we use jsvIsChild here just in case. delete probably isn't called\n+        that often so it pays to be safe */\n         if (jsvIsArray(parent)) {\n           // For arrays, we must make sure we don't change the length\n           JsVarInt l = jsvGetArrayLength(parent);\n@@ -2848,7 +2858,7 @@ JsVar *jspNewBuiltin(const char *instanceOf) {\n   return objFunc;\n }\n \n-/// Create a new Class of the given instance and return its prototype\n+/// Create a new Class of the given instance and return its prototype (as a name 'prototype')\n NO_INLINE JsVar *jspNewPrototype(const char *instanceOf) {\n   JsVar *objFuncName = jsvFindChildFromString(execInfo.root, instanceOf, true);\n   if (!objFuncName) // out of memory"
        },
        {
          "filename": "src/jsparse.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -37,7 +37,7 @@ bool jspCheckStackPosition();\n /// Create a new built-in object that jswrapper can use to check for built-in functions\n JsVar *jspNewBuiltin(const char *name);\n \n-/// Create a new Class of the given instance and return its prototype\n+/// Create a new Class of the given instance and return its prototype (as a name 'prototype')\n NO_INLINE JsVar *jspNewPrototype(const char *instanceOf);\n \n /** Create a new object of the given instance and add it to root with name 'name'."
        },
        {
          "filename": "src/jsvar.c",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -2555,6 +2555,7 @@ void jsvAddName(JsVar *parent, JsVar *namedChild) {\n     }\n \n     if (insertAfter) {\n+      assert(jsvIsName(insertAfter));\n       if (jsvGetNextSibling(insertAfter)) {\n         // great, we're in the middle...\n         JsVar *insertBefore = jsvLock(jsvGetNextSibling(insertAfter));\n@@ -2761,6 +2762,9 @@ JsVar *jsvFindChildFromVar(JsVar *parent, JsVar *childName, bool addIfNotFound)\n void jsvRemoveChild(JsVar *parent, JsVar *child) {\n   assert(jsvHasChildren(parent));\n   assert(jsvIsName(child));\n+#ifdef DEBUG\n+  assert(jsvIsChild(parent, child));\n+#endif\n   JsVarRef childref = jsvGetRef(child);\n   bool wasChild = false;\n   // unlink from parent"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e905fd716bfce31ba761fab586bf09b300771c0a",
            "date": "2025-01-13T10:07:22Z",
            "author_login": "gfwilliams"
          },
          {
            "sha": "300602cdaa14cef833087897c0986fd58bd536e9",
            "date": "2025-01-13T09:11:49Z",
            "author_login": "gfwilliams"
          },
          {
            "sha": "572b9314c629393e73d7d93db93c032e9bf14bcf",
            "date": "2025-01-13T01:06:57Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5627e898a05add6e6e50f863db742184a1afa97b",
            "date": "2025-01-09T13:42:12Z",
            "author_login": "gfwilliams"
          },
          {
            "sha": "d55ac84753af4e2f510609cb2e5edfab748ae203",
            "date": "2025-01-09T10:12:24Z",
            "author_login": "gfwilliams"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-787",
    "description": "Espruino 2v11.251 was discovered to contain a stack buffer overflow via src/jsvar.c in jsvNewFromString.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-05T02:15:06.900",
    "last_modified": "2024-11-21T06:51:34.873",
    "fix_date": "2022-02-08T14:59:00Z"
  },
  "references": [
    {
      "url": "https://github.com/espruino/Espruino/commit/e069be2ecc5060ef47391716e4de94999595b260",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/espruino/Espruino/issues/2142",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/espruino/Espruino/commit/e069be2ecc5060ef47391716e4de94999595b260",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/espruino/Espruino/issues/2142",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.781656",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Espruino",
    "owner": "espruino",
    "created_at": "2013-09-26T13:29:36Z",
    "updated_at": "2025-01-13T10:27:06Z",
    "pushed_at": "2025-01-13T10:18:08Z",
    "size": 225266,
    "stars": 2821,
    "forks": 754,
    "open_issues": 126,
    "watchers": 2821,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 81680781,
      "C++": 1840907,
      "Assembly": 1602080,
      "Python": 693732,
      "JavaScript": 594793,
      "HTML": 431581,
      "Rich Text Format": 203125,
      "Makefile": 133192,
      "Shell": 53005,
      "CMake": 10139,
      "CSS": 2637,
      "GDB": 2462,
      "Dockerfile": 1361,
      "Batchfile": 1177,
      "Ruby": 688,
      "Tcl": 110
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:34:02.365250"
  }
}