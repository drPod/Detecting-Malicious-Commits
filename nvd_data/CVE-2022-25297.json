{
  "cve_id": "CVE-2022-25297",
  "github_data": {
    "repository": "drogonframework/drogon",
    "fix_commit": "3c785326c63a34aa1799a639ae185bc9453cb447",
    "related_commits": [
      "3c785326c63a34aa1799a639ae185bc9453cb447",
      "3c785326c63a34aa1799a639ae185bc9453cb447"
    ],
    "patch_url": "https://github.com/drogonframework/drogon/commit/3c785326c63a34aa1799a639ae185bc9453cb447.patch",
    "fix_commit_details": {
      "sha": "3c785326c63a34aa1799a639ae185bc9453cb447",
      "commit_date": "2022-02-11T15:54:42Z",
      "author": {
        "login": "Kirill89",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent malformed upload path causing arbitrary write (#1174)",
        "length": 61,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 172,
        "additions": 123,
        "deletions": 49
      },
      "files": [
        {
          "filename": "lib/src/HttpFileImpl.cc",
          "status": "modified",
          "additions": 30,
          "deletions": 12,
          "patch": "@@ -18,6 +18,7 @@\n #include <drogon/MultiPart.h>\n #include <fstream>\n #include <iostream>\n+#include <algorithm>\n \n using namespace drogon;\n \n@@ -31,28 +32,45 @@ int HttpFileImpl::save(const std::string &path) const\n     assert(!path.empty());\n     if (fileName_.empty())\n         return -1;\n-    filesystem::path fsPath(utils::toNativePath(path));\n-    if (!fsPath.is_absolute() &&\n-        (!fsPath.has_parent_path() ||\n-         (fsPath.begin()->string() != \".\" && fsPath.begin()->string() != \"..\")))\n+    filesystem::path fsUploadDir(utils::toNativePath(path));\n+\n+    if (!fsUploadDir.is_absolute() && (!fsUploadDir.has_parent_path() ||\n+                                       (fsUploadDir.begin()->string() != \".\" &&\n+                                        fsUploadDir.begin()->string() != \"..\")))\n     {\n-        filesystem::path fsUploadPath(utils::toNativePath(\n-            HttpAppFrameworkImpl::instance().getUploadPath()));\n-        fsPath = fsUploadPath / fsPath;\n+        fsUploadDir = utils::toNativePath(\n+                          HttpAppFrameworkImpl::instance().getUploadPath()) /\n+                      fsUploadDir;\n     }\n-    filesystem::path fsFileName(utils::toNativePath(fileName_));\n-    if (!filesystem::exists(fsPath))\n+\n+    fsUploadDir = filesystem::weakly_canonical(fsUploadDir);\n+\n+    if (!filesystem::exists(fsUploadDir))\n     {\n-        LOG_TRACE << \"create path:\" << fsPath;\n+        LOG_TRACE << \"create path:\" << fsUploadDir;\n         drogon::error_code err;\n-        filesystem::create_directories(fsPath, err);\n+        filesystem::create_directories(fsUploadDir, err);\n         if (err)\n         {\n             LOG_SYSERR;\n             return -1;\n         }\n     }\n-    return saveTo(fsPath / fsFileName);\n+\n+    filesystem::path fsSaveToPath(filesystem::weakly_canonical(\n+        fsUploadDir / utils::toNativePath(fileName_)));\n+\n+    if (!std::equal(fsUploadDir.begin(),\n+                    fsUploadDir.end(),\n+                    fsSaveToPath.begin()))\n+    {\n+        LOG_ERROR\n+            << \"Attempt writing outside of upload directory detected. Path: \"\n+            << fileName_;\n+        return -1;\n+    }\n+\n+    return saveTo(fsSaveToPath);\n }\n int HttpFileImpl::saveAs(const std::string &fileName) const\n {"
        },
        {
          "filename": "lib/tests/CMakeLists.txt",
          "status": "modified",
          "additions": 41,
          "deletions": 37,
          "patch": "@@ -1,45 +1,49 @@\n link_libraries(${PROJECT_NAME})\n-set(UNITTEST_SOURCES unittests/main.cc\n-                        unittests/Base64Test.cc\n-                        unittests/UrlCodecTest.cc\n-                        unittests/GzipTest.cc\n-                        unittests/HttpViewDataTest.cc\n-                        unittests/CookieTest.cc\n-                        unittests/ClassNameTest.cc\n-                        unittests/HttpDateTest.cc\n-                        unittests/HttpHeaderTest.cc\n-                        unittests/MD5Test.cc\n-                        unittests/MsgBufferTest.cc\n-                        unittests/OStringStreamTest.cc\n-                        unittests/PubSubServiceUnittest.cc\n-                        unittests/Sha1Test.cc\n-                        ../src/ssl_funcs/Sha1.cc\n-                        ../src/HttpUtils.cc\n-                        unittests/FileTypeTest.cc\n-                        unittests/DrObjectTest.cc\n-                        unittests/HttpFullDateTest.cc\n-                        unittests/MainLoopTest.cc\n-                        unittests/CacheMapTest.cc\n-                        unittests/StringOpsTest.cc)\n+set(UNITTEST_SOURCES\n+    unittests/main.cc\n+    unittests/Base64Test.cc\n+    unittests/UrlCodecTest.cc\n+    unittests/GzipTest.cc\n+    unittests/HttpViewDataTest.cc\n+    unittests/CookieTest.cc\n+    unittests/ClassNameTest.cc\n+    unittests/HttpDateTest.cc\n+    unittests/HttpHeaderTest.cc\n+    unittests/MD5Test.cc\n+    unittests/MsgBufferTest.cc\n+    unittests/OStringStreamTest.cc\n+    unittests/PubSubServiceUnittest.cc\n+    unittests/Sha1Test.cc\n+    ../src/ssl_funcs/Sha1.cc\n+    unittests/FileTypeTest.cc\n+    unittests/DrObjectTest.cc\n+    unittests/HttpFullDateTest.cc\n+    unittests/MainLoopTest.cc\n+    unittests/CacheMapTest.cc\n+    unittests/StringOpsTest.cc)\n \n if(DROGON_CXX_STANDARD GREATER_EQUAL 20 AND HAS_COROUTINE)\n-    set(UNITTEST_SOURCES ${UNITTEST_SOURCES} unittests/CoroutineTest.cc)\n+  set(UNITTEST_SOURCES ${UNITTEST_SOURCES} unittests/CoroutineTest.cc)\n endif()\n \n if(Brotli_FOUND)\n-    set(UNITTEST_SOURCES ${UNITTEST_SOURCES} unittests/BrotliTest.cc)\n+  set(UNITTEST_SOURCES ${UNITTEST_SOURCES} unittests/BrotliTest.cc)\n endif()\n \n-if (CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\" AND BUILD_DROGON_SHARED)\n-    set(UNITTEST_SOURCES ${UNITTEST_SOURCES} ../src/HttpUtils.cc)\n+if(CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\" AND BUILD_DROGON_SHARED)\n+  set(UNITTEST_SOURCES ${UNITTEST_SOURCES} ../src/HttpUtils.cc)\n+else()\n+  set(UNITTEST_SOURCES ${UNITTEST_SOURCES} ../src/HttpFileImpl.cc\n+                       unittests/HttpFileTest.cc)\n endif()\n \n add_executable(unittest ${UNITTEST_SOURCES})\n \n-set(INTEGRATION_TEST_CLIENT_SOURCES integration_test/client/main.cc\n-                                    integration_test/client/WebSocketTest.cc\n-                                    integration_test/client/MultipleWsTest.cc\n-                                    integration_test/client/HttpPipeliningTest.cc)\n+set(INTEGRATION_TEST_CLIENT_SOURCES\n+    integration_test/client/main.cc\n+    integration_test/client/WebSocketTest.cc\n+    integration_test/client/MultipleWsTest.cc\n+    integration_test/client/HttpPipeliningTest.cc)\n add_executable(integration_test_client ${INTEGRATION_TEST_CLIENT_SOURCES})\n \n set(INTEGRATION_TEST_SERVER_SOURCES\n@@ -64,10 +68,11 @@ set(INTEGRATION_TEST_SERVER_SOURCES\n     integration_test/server/main.cc)\n \n if(DROGON_CXX_STANDARD GREATER_EQUAL 20 AND HAS_COROUTINE)\n-    set(INTEGRATION_TEST_SERVER_SOURCES ${INTEGRATION_TEST_SERVER_SOURCES}\n-        integration_test/server/api_v1_CoroTest.cc)\n-    set(CMAKE_CXX_STANDARD 20)\n-    set(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n+  set(INTEGRATION_TEST_SERVER_SOURCES\n+      ${INTEGRATION_TEST_SERVER_SOURCES}\n+      integration_test/server/api_v1_CoroTest.cc)\n+  set(CMAKE_CXX_STANDARD 20)\n+  set(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n endif(DROGON_CXX_STANDARD GREATER_EQUAL 20 AND HAS_COROUTINE)\n \n add_executable(integration_test_server ${INTEGRATION_TEST_SERVER_SOURCES})\n@@ -98,9 +103,8 @@ add_custom_command(\n           $<TARGET_FILE_DIR:integration_test_server>/a-directory)\n \n set(tests unittest integration_test_server integration_test_client)\n-set_property(TARGET ${tests}\n-             PROPERTY CXX_STANDARD ${DROGON_CXX_STANDARD})\n+set_property(TARGET ${tests} PROPERTY CXX_STANDARD ${DROGON_CXX_STANDARD})\n set_property(TARGET ${tests} PROPERTY CXX_STANDARD_REQUIRED ON)\n set_property(TARGET ${tests} PROPERTY CXX_EXTENSIONS OFF)\n \n-ParseAndAddDrogonTests(unittest)\n+parseandadddrogontests(unittest)"
        },
        {
          "filename": "lib/tests/unittests/HttpFileTest.cc",
          "status": "added",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -0,0 +1,52 @@\n+#include \"../../lib/src/HttpFileImpl.h\"\n+#include <drogon/drogon_test.h>\n+#include <filesystem>\n+\n+using namespace drogon;\n+using namespace std;\n+\n+DROGON_TEST(HttpFile)\n+{\n+    SUBSECTION(Save)\n+    {\n+        HttpFileImpl file;\n+        file.setFileName(\"test_file_name\");\n+        file.setFile(\"test\", 4);\n+        auto out = file.save(\"./test_uploads_dir\");\n+\n+        CHECK(out == 0);\n+        CHECK(filesystem::exists(\"./test_uploads_dir/test_file_name\"));\n+\n+        filesystem::remove_all(\"./test_uploads_dir\");\n+    }\n+\n+    SUBSECTION(SavePathRelativeTraversal)\n+    {\n+        auto uploadPath = filesystem::current_path() / \"test_uploads_dir\";\n+\n+        HttpFileImpl file;\n+        file.setFileName(\"../test_malicious_file_name\");\n+        file.setFile(\"test\", 4);\n+        auto out = file.save(uploadPath.string());\n+\n+        CHECK(out == -1);\n+        CHECK(!filesystem::exists(uploadPath / \"../test_malicious_file_name\"));\n+\n+        filesystem::remove_all(uploadPath);\n+        filesystem::remove(uploadPath / \"../test_malicious_file_name\");\n+    }\n+\n+    SUBSECTION(SavePathAbsoluteTraversal)\n+    {\n+        HttpFileImpl file;\n+        file.setFileName(\"/tmp/test_malicious_file_name\");\n+        file.setFile(\"test\", 4);\n+        auto out = file.save(\"./test_uploads_dir\");\n+\n+        CHECK(out == -1);\n+        CHECK(!filesystem::exists(\"/tmp/test_malicious_file_name\"));\n+\n+        filesystem::remove_all(\"test_uploads_dir\");\n+        filesystem::remove_all(\"/tmp/test_malicious_file_name\");\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a3b4779540831cb8c03addb591ced3080b488917",
            "date": "2025-01-14T12:08:30Z",
            "author_login": "pan93412"
          },
          {
            "sha": "686f68a12ff82c6c3114a4c48502334261f258f6",
            "date": "2025-01-08T12:00:44Z",
            "author_login": "fantasy-peak"
          },
          {
            "sha": "152a69f1e96c610f8490376b515b9ee029f2cfca",
            "date": "2025-01-02T14:44:09Z",
            "author_login": "an-tao"
          },
          {
            "sha": "38dd5fea31a7a2727c0a6f6b6b04252374796cab",
            "date": "2025-01-01T03:25:29Z",
            "author_login": "an-tao"
          },
          {
            "sha": "3a6268f7e98cf2179a90bdac2f3566ba9382f6ad",
            "date": "2024-12-19T02:36:20Z",
            "author_login": "Demilivor"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-552",
    "description": "This affects the package drogonframework/drogon before 1.7.5. The unsafe handling of file names during upload using HttpFile::save() method may enable attackers to write files to arbitrary locations outside the designated target folder.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-21T08:15:06.607",
    "last_modified": "2024-11-21T06:51:56.963",
    "fix_date": "2022-02-11T15:54:42Z"
  },
  "references": [
    {
      "url": "https://github.com/drogonframework/drogon/commit/3c785326c63a34aa1799a639ae185bc9453cb447",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/pull/1174",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-UNMANAGED-DROGONFRAMEWORKDROGON-2407243",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/commit/3c785326c63a34aa1799a639ae185bc9453cb447",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/pull/1174",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-UNMANAGED-DROGONFRAMEWORKDROGON-2407243",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.737189",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "drogon",
    "owner": "drogonframework",
    "created_at": "2018-04-27T02:49:26Z",
    "updated_at": "2025-01-14T12:08:36Z",
    "pushed_at": "2025-01-14T12:08:31Z",
    "size": 5629,
    "stars": 11796,
    "forks": 1133,
    "open_issues": 307,
    "watchers": 11796,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2740972,
      "CMake": 81994,
      "HTML": 21220,
      "Shell": 9097,
      "Dockerfile": 2627,
      "C": 1822
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:49:43.487795"
  }
}