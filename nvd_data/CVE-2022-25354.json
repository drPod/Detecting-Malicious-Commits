{
  "cve_id": "CVE-2022-25354",
  "github_data": {
    "repository": "ahdinosaur/set-in",
    "fix_commit": "6bad255961d379e4b1f5fbc52ef9dc8420816f24",
    "related_commits": [
      "6bad255961d379e4b1f5fbc52ef9dc8420816f24",
      "6bad255961d379e4b1f5fbc52ef9dc8420816f24"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "6bad255961d379e4b1f5fbc52ef9dc8420816f24",
      "commit_date": "2022-03-07T12:21:35Z",
      "author": {
        "login": "ahdinosaur",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "better fix for prototype pollution vulnerability",
        "length": 84,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 3386,
        "additions": 3359,
        "deletions": 27
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 9,
          "deletions": 12,
          "patch": "@@ -5,6 +5,10 @@ module.exports = setIn\n function setIn (object, path, value) {\n   assert.equal(typeof object, 'object', 'setIn: expected object as first argument.')\n   assert.ok(Array.isArray(path), 'setIn: expected array path as second argument.')\n+  assert.ok(\n+    path.every(p => typeof p === 'number' || typeof p === 'string'),\n+    'setIn: expected array path (of strings and numbers) as second argument.'\n+  )\n \n   return recursivelySetIn(object, path, value, 0)\n }\n@@ -16,18 +20,6 @@ function recursivelySetIn (object, path, value, index) {\n \n   object = object || {}\n \n-  // https://stackoverflow.com/a/60850027\n-  assert.ok(\n-    path[index] !== '__proto__',\n-    'setIn: \"__proto__\" is disallowed in path due to possible prototype pollution attack.'\n-  )\n-  if (index < path.length - 1) {\n-    assert.ok(\n-      path[index] !== 'constructor' && path[index + 1] !== 'prototype',\n-      'setIn: [\"constructor\", \"prototype\"] is disallowed in path due to possible prototype pollution attack.'\n-    )\n-  }\n-\n   var key = path[index]\n \n   if (key === '-') {\n@@ -40,7 +32,12 @@ function recursivelySetIn (object, path, value, index) {\n   return set(object, key, next)\n }\n \n+const POLLUTED_KEYS = ['__proto__', 'constructor', 'prototype']\n+\n function set (object, key, value) {\n+  // CVE-2020-28273\n+  assert.ok(!POLLUTED_KEYS.includes(key), `setIn: ${key} is disallowed in path due to possible prototype pollution attack.`)\n+\n   object[key] = value\n   return object\n }"
        },
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 3344,
          "deletions": 13,
          "patch": null
        },
        {
          "filename": "test/index.js",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -178,12 +178,16 @@ test('object with custom get function', function (t) {\n \n test('prototype pollution', function (t) {\n   t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['__proto__'], { a: 'x' }))\n+  t.throws(() => setIn({ 'a': { 'b': 'c' }}, [['__proto__']], { a: 'x' }))\n   t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['__proto__', 'a'], 'x'))\n+  t.throws(() => setIn({ 'a': { 'b': 'c' }}, [['__proto__'], 'a'], 'x'))\n   t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['a', '__proto__'], 'x'))\n+  t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['a', ['__proto__']], 'x'))\n   t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['constructor', 'prototype'], { a: 'x' }))\n   t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['constructor', 'prototype', 'a'], 'x'))\n-  setIn({ 'a': { 'b': 'c' }}, ['prototype', 'a'], 'x')\n-  setIn({ 'a': { 'b': 'c' }}, ['constructor'], 'x')\n+  t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['prototype', 'a'], 'x'))\n+  t.throws(() => setIn({ 'a': { 'b': 'c' }}, ['constructor'], 'x'))\n+\n   t.end()\n })\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1266bdd0a0efd61615c8a671300afe3fc4b4713c",
            "date": "2022-04-21T12:25:37Z",
            "author_login": "ahdinosaur"
          },
          {
            "sha": "34842cc02de3fd65d6f8bd0b268347e7b390125b",
            "date": "2022-04-21T12:25:25Z",
            "author_login": "ahdinosaur"
          },
          {
            "sha": "d87c1a09fa2edb55cd76440a67d83d1cb828df11",
            "date": "2022-04-21T12:18:10Z",
            "author_login": "erik-krogh"
          },
          {
            "sha": "20e22da170a7bcba3cab6084e660ad913052d1da",
            "date": "2022-03-07T12:22:30Z",
            "author_login": "ahdinosaur"
          },
          {
            "sha": "6bad255961d379e4b1f5fbc52ef9dc8420816f24",
            "date": "2022-03-07T12:21:35Z",
            "author_login": "ahdinosaur"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:L",
    "cwe_id": "CWE-1321",
    "description": "The package set-in before 2.0.3 are vulnerable to Prototype Pollution via the setIn method, as it allows an attacker to merge object prototypes into it. **Note:** This vulnerability derives from an incomplete fix of [CVE-2020-28273](https://security.snyk.io/vuln/SNYK-JS-SETIN-1048049)",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-17T12:15:08.243",
    "last_modified": "2024-11-21T06:52:03.643",
    "fix_date": "2022-03-07T12:21:35Z"
  },
  "references": [
    {
      "url": "https://github.com/ahdinosaur/set-in/blob/dfc226d95cce8129de6708661e06e0c2c06f3490/index.js%23L5",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/ahdinosaur/set-in/commit/6bad255961d379e4b1f5fbc52ef9dc8420816f24",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-SETIN-2388571",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ahdinosaur/set-in/blob/dfc226d95cce8129de6708661e06e0c2c06f3490/index.js%23L5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/ahdinosaur/set-in/commit/6bad255961d379e4b1f5fbc52ef9dc8420816f24",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-SETIN-2388571",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.032999",
    "processing_status": "enhanced"
  }
}