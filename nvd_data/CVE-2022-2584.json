{
  "cve_id": "CVE-2022-2584",
  "github_data": {
    "repository": "ipld/go-codec-dagpb",
    "fix_commit": "a17ace35cc760a2698645c09868f9050fa219f57",
    "related_commits": [
      "a17ace35cc760a2698645c09868f9050fa219f57",
      "a17ace35cc760a2698645c09868f9050fa219f57"
    ],
    "patch_url": "https://github.com/ipld/go-codec-dagpb/commit/a17ace35cc760a2698645c09868f9050fa219f57.patch",
    "fix_commit_details": {
      "sha": "a17ace35cc760a2698645c09868f9050fa219f57",
      "commit_date": "2022-03-11T00:27:13Z",
      "author": {
        "login": "rvagg",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: use protowire for Links bytes decoding",
        "length": 43,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 53,
        "additions": 34,
        "deletions": 19
      },
      "files": [
        {
          "filename": "compat_test.go",
          "status": "modified",
          "additions": 32,
          "deletions": 16,
          "patch": "@@ -32,6 +32,7 @@ type testCase struct {\n \texpectedForm  string\n \tencodeError   string\n \tdecodeError   string\n+\ttestEncode    bool\n }\n \n var testCases = []testCase{\n@@ -64,6 +65,13 @@ var testCases = []testCase{\n }`,\n \t\tencodeError: \"missing required fields: Links\",\n \t},\n+\t{\n+\t\tname:          \"Data some, short\",\n+\t\tnode:          &pbNode{data: dataSome},\n+\t\texpectedBytes: \"0a0500010203\",\n+\t\tdecodeError:   \"unexpected EOF\",\n+\t\tencodeError:   \"missing required fields: Links\",\n+\t},\n \t{\n \t\tname:          \"Links zero\",\n \t\tnode:          &pbNode{links: []pbLink{}},\n@@ -113,6 +121,12 @@ var testCases = []testCase{\n }`,\n \t},\n \t{\n+\t\tname:          \"Links Hash some, short\",\n+\t\tnode:          &pbNode{links: []pbLink{{hash: acid}}},\n+\t\texpectedBytes: \"120b0a090155000500010203\",\n+\t\tdecodeError:   \"unexpected EOF\",\n+\t\ttestEncode:    false,\n+\t}, {\n \t\tname:          \"Links Name zero\",\n \t\tnode:          &pbNode{links: []pbLink{{name: zeroName, hasName: true}}},\n \t\texpectedBytes: \"12021200\",\n@@ -211,24 +225,26 @@ func verifyRoundTrip(t *testing.T, tc testCase) {\n \t\tnode := buildNode(*tc.node)\n \t\tactualBytes, err = nodeToString(t, node)\n \n-\t\tif tc.encodeError != \"\" {\n-\t\t\tif err != nil {\n-\t\t\t\tif !strings.Contains(err.Error(), tc.encodeError) {\n-\t\t\t\t\tt.Fatalf(\"got unexpeced encode error: [%v] (expected [%v])\", err.Error(), tc.encodeError)\n+\t\tif tc.testEncode {\n+\t\t\tif tc.encodeError != \"\" {\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tif !strings.Contains(err.Error(), tc.encodeError) {\n+\t\t\t\t\t\tt.Fatalf(\"got unexpeced encode error: [%v] (expected [%v])\", err.Error(), tc.encodeError)\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tt.Fatalf(\"did not get expected encode error: %v\", tc.encodeError)\n \t\t\t\t}\n \t\t\t} else {\n-\t\t\t\tt.Fatalf(\"did not get expected encode error: %v\", tc.encodeError)\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif err != nil {\n-\t\t\t\tt.Fatal(err)\n-\t\t\t} else {\n-\t\t\t\tif actualBytes != tc.expectedBytes {\n-\t\t\t\t\tt.Logf(\n-\t\t\t\t\t\t\"Expected bytes: [%v]\\nGot: [%v]\\n\",\n-\t\t\t\t\t\ttc.expectedBytes,\n-\t\t\t\t\t\tactualBytes)\n-\t\t\t\t\tt.Error(\"Did not match\")\n+\t\t\t\tif err != nil {\n+\t\t\t\t\tt.Fatal(err)\n+\t\t\t\t} else {\n+\t\t\t\t\tif actualBytes != tc.expectedBytes {\n+\t\t\t\t\t\tt.Logf(\n+\t\t\t\t\t\t\t\"Expected bytes: [%v]\\nGot: [%v]\\n\",\n+\t\t\t\t\t\t\ttc.expectedBytes,\n+\t\t\t\t\t\t\tactualBytes)\n+\t\t\t\t\t\tt.Error(\"Did not match\")\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}"
        },
        {
          "filename": "unmarshal.go",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -98,7 +98,7 @@ func DecodeBytes(na ipld.NodeAssembler, src []byte) error {\n \t\t\thaveData = true\n \n \t\tcase 2:\n-\t\t\tbytesLen, n := protowire.ConsumeVarint(remaining)\n+\t\t\tchunk, n := protowire.ConsumeBytes(remaining)\n \t\t\tif n < 0 {\n \t\t\t\treturn protowire.ParseError(n)\n \t\t\t}\n@@ -123,10 +123,9 @@ func DecodeBytes(na ipld.NodeAssembler, src []byte) error {\n \t\t\tif err != nil {\n \t\t\t\treturn err\n \t\t\t}\n-\t\t\tif err := unmarshalLink(remaining[:bytesLen], curLink); err != nil {\n+\t\t\tif err := unmarshalLink(chunk, curLink); err != nil {\n \t\t\t\treturn err\n \t\t\t}\n-\t\t\tremaining = remaining[bytesLen:]\n \t\t\tif err := curLink.Finish(); err != nil {\n \t\t\t\treturn err\n \t\t\t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "30098664a0b3b6a31136ebf6f084556d81489190",
            "date": "2025-01-13T15:58:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0f26d44d75f4fe7fc54bd098f8f8b75454dbc050",
            "date": "2024-12-23T15:56:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5145a96571cb202350fadc9c6be606b7833913f2",
            "date": "2024-11-18T16:04:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b9876af87cc05cad05062b56a19d73aaa2913c06",
            "date": "2024-10-07T15:29:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "79e32f9841b046f1259a46f559d7aad8ed79149b",
            "date": "2024-08-26T01:08:43Z",
            "author_login": "web3-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-119",
    "description": "The dag-pb codec can panic when decoding invalid blocks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T22:15:12.653",
    "last_modified": "2024-11-21T07:01:17.623",
    "fix_date": "2022-03-11T00:27:13Z"
  },
  "references": [
    {
      "url": "https://github.com/ipld/go-codec-dagpb/commit/a17ace35cc760a2698645c09868f9050fa219f57",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2022-0422",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ipld/go-codec-dagpb/commit/a17ace35cc760a2698645c09868f9050fa219f57",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2022-0422",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.223451",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "go-codec-dagpb",
    "owner": "ipld",
    "created_at": "2020-09-28T11:49:23Z",
    "updated_at": "2025-01-14T02:09:05Z",
    "pushed_at": "2025-01-14T02:09:03Z",
    "size": 167,
    "stars": 9,
    "forks": 5,
    "open_issues": 1,
    "watchers": 9,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 39136
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:12:09.489175"
  }
}