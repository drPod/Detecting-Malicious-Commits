{
  "cve_id": "CVE-2022-25856",
  "github_data": {
    "repository": "argoproj/argo-events",
    "fix_commit": "d0f66dbce78bc31923ca057b20fc722aa24ca961",
    "related_commits": [
      "d0f66dbce78bc31923ca057b20fc722aa24ca961",
      "d0f66dbce78bc31923ca057b20fc722aa24ca961"
    ],
    "patch_url": "https://github.com/argoproj/argo-events/commit/d0f66dbce78bc31923ca057b20fc722aa24ca961.patch",
    "fix_commit_details": {
      "sha": "d0f66dbce78bc31923ca057b20fc722aa24ca961",
      "commit_date": "2022-05-13T03:18:33Z",
      "author": {
        "login": "whynowy",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: git artifactory arbitrary file read issue (#1965)",
        "length": 101,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 36,
        "additions": 34,
        "deletions": 2
      },
      "files": [
        {
          "filename": "sensors/artifacts/git.go",
          "status": "modified",
          "additions": 34,
          "deletions": 2,
          "patch": "@@ -20,6 +20,8 @@ import (\n \t\"fmt\"\n \t\"io/ioutil\"\n \t\"os\"\n+\t\"path\"\n+\t\"strings\"\n \n \t\"github.com/go-git/go-git/v5\"\n \t\"github.com/go-git/go-git/v5/config\"\n@@ -44,6 +46,8 @@ var (\n \t\t\"refs/*:refs/*\",\n \t\t\"HEAD:refs/heads/HEAD\",\n \t}\n+\n+\tnotAllowedInPath = []string{\"..\", \"~\", \"\\\\\"}\n )\n \n type GitArtifactReader struct {\n@@ -52,6 +56,15 @@ type GitArtifactReader struct {\n \n // NewGitReader returns a new git reader\n func NewGitReader(gitArtifact *v1alpha1.GitArtifact) (*GitArtifactReader, error) {\n+\tif gitArtifact == nil {\n+\t\treturn nil, fmt.Errorf(\"nil git artifact\")\n+\t}\n+\tfor _, na := range notAllowedInPath {\n+\t\tif strings.Contains(gitArtifact.FilePath, na) {\n+\t\t\treturn nil, fmt.Errorf(\"%q is not allowed in the filepath\", na)\n+\t\t}\n+\t}\n+\n \treturn &GitArtifactReader{\n \t\tartifact: gitArtifact,\n \t}, nil\n@@ -176,8 +189,16 @@ func (g *GitArtifactReader) readFromRepository(r *git.Repository, dir string) ([\n \t\t\treturn nil, fmt.Errorf(\"failed to pull latest updates. err: %+v\", err)\n \t\t}\n \t}\n-\n-\treturn ioutil.ReadFile(fmt.Sprintf(\"%s/%s\", dir, g.artifact.FilePath))\n+\tfilePath := fmt.Sprintf(\"%s/%s\", dir, g.artifact.FilePath)\n+\t// symbol link is not allowed due to security concern\n+\tisSymbolLink, err := isSymbolLink(filePath)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif isSymbolLink {\n+\t\treturn nil, fmt.Errorf(\"%q is a symbol link which is not allowed\", g.artifact.FilePath)\n+\t}\n+\treturn ioutil.ReadFile(filePath)\n }\n \n func (g *GitArtifactReader) getBranchOrTag() *git.CheckoutOptions {\n@@ -241,3 +262,14 @@ func (g *GitArtifactReader) Read() ([]byte, error) {\n \t}\n \treturn g.readFromRepository(r, cloneDir)\n }\n+\n+func isSymbolLink(filepath string) (bool, error) {\n+\tfi, err := os.Lstat(path.Clean(filepath))\n+\tif err != nil {\n+\t\treturn false, err\n+\t}\n+\tif fi.Mode()&os.ModeSymlink != 0 {\n+\t\treturn true, nil\n+\t}\n+\treturn false, nil\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "30541a1dc6f773e4116a79a7f97ad4b29dd9fcb1",
            "date": "2025-01-11T12:53:45Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "505c9259f67636252a24a0721e2af1f06f32123e",
            "date": "2025-01-11T12:36:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "02cc9bb02d0abf21465baa7287fc08f53e0f6665",
            "date": "2025-01-11T12:33:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e3a92c53bf32aabfa27d2df917e8c6df0a09a811",
            "date": "2025-01-11T12:33:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "199e05467950d6204382ed58ccf315161873e800",
            "date": "2025-01-11T12:32:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "The package github.com/argoproj/argo-events/sensors/artifacts before 1.7.1 are vulnerable to Directory Traversal in the (g *GitArtifactReader).Read() API in git.go. This could allow arbitrary file reads if the GitArtifactReader is provided a pathname containing a symbolic link or an implicit directory name such as ...",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-17T20:15:10.607",
    "last_modified": "2024-11-21T06:53:07.453",
    "fix_date": "2022-05-13T03:18:33Z"
  },
  "references": [
    {
      "url": "https://github.com/argoproj/argo-events/commit/d0f66dbce78bc31923ca057b20fc722aa24ca961",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-events/issues/1947",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMARGOPROJARGOEVENTSSENSORSARTIFACTS-2864522",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-events/commit/d0f66dbce78bc31923ca057b20fc722aa24ca961",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-events/issues/1947",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMARGOPROJARGOEVENTSSENSORSARTIFACTS-2864522",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.459281",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "argo-events",
    "owner": "argoproj",
    "created_at": "2018-05-17T15:06:49Z",
    "updated_at": "2025-01-13T20:11:56Z",
    "pushed_at": "2025-01-11T12:55:18Z",
    "size": 159355,
    "stars": 2409,
    "forks": 749,
    "open_issues": 147,
    "watchers": 2409,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 1641980,
      "Shell": 15374,
      "Makefile": 9200,
      "Smarty": 3292,
      "Dockerfile": 1240
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:20:24.927235"
  }
}