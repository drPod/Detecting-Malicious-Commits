{
  "cve_id": "CVE-2022-25857",
  "github_data": {
    "repository": "snakeyaml/snakeyaml",
    "fix_commit": "fc300780da21f4bb92c148bc90257201220cf174",
    "related_commits": [
      "fc300780da21f4bb92c148bc90257201220cf174",
      "fc300780da21f4bb92c148bc90257201220cf174"
    ],
    "patch_url": "https://github.com/snakeyaml/snakeyaml/commit/fc300780da21f4bb92c148bc90257201220cf174.patch",
    "fix_commit_details": {
      "sha": "fc300780da21f4bb92c148bc90257201220cf174",
      "commit_date": "2022-04-28T12:38:16Z",
      "author": {
        "login": "asomov",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Restrict nested depth for collections to avoid DoS attacks",
        "length": 58,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 115,
        "additions": 93,
        "deletions": 22
      },
      "files": [
        {
          "filename": "src/changes/changes.xml",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -6,6 +6,9 @@\n     </properties>\n     <body>\n         <release version=\"1.31\" date=\"in Git\" description=\"Maintenance\">\n+            <action dev=\"asomov\" type=\"fix\" issue=\"525\">\n+                Restrict nested depth for collections to avoid DoS attacks (detected by OSS-Fuzz)\n+            </action>\n             <action dev=\"asomov\" type=\"add\" issue=\"525\">\n                 Add test for stackoverflow\n             </action>"
        },
        {
          "filename": "src/main/java/org/yaml/snakeyaml/LoaderOptions.java",
          "status": "modified",
          "additions": 18,
          "deletions": 2,
          "patch": "@@ -23,6 +23,7 @@ public class LoaderOptions {\n     private boolean allowRecursiveKeys = false;\n     private boolean processComments = false;\n     private boolean enumCaseSensitive = true;\n+    private int nestingDepthLimit = 50;\n \n     public boolean isAllowDuplicateKeys() {\n         return allowDuplicateKeys;\n@@ -67,15 +68,16 @@ public int getMaxAliasesForCollections() {\n     }\n \n     /**\n-     * Restrict the amount of aliases for collections (sequences and mappings) to avoid https://en.wikipedia.org/wiki/Billion_laughs_attack\n+     * Restrict the amount of aliases for collections (sequences and mappings)\n+     * to avoid https://en.wikipedia.org/wiki/Billion_laughs_attack\n      * @param maxAliasesForCollections set max allowed value (50 by default)\n      */\n     public void setMaxAliasesForCollections(int maxAliasesForCollections) {\n     \tthis.maxAliasesForCollections = maxAliasesForCollections;\n     }\n \n     /**\n-     * Allow recursive keys for mappings. By default it is not allowed.\n+     * Allow recursive keys for mappings. By default, it is not allowed.\n      * This setting only prevents the case when the key is the value. If the key is only a part of the value\n      * (the value is a sequence or a mapping) then this case is not recognized and always allowed.\n      * @param allowRecursiveKeys - false to disable recursive keys\n@@ -114,4 +116,18 @@ public boolean isEnumCaseSensitive() {\n     public void setEnumCaseSensitive(boolean enumCaseSensitive) {\n         this.enumCaseSensitive = enumCaseSensitive;\n     }\n+\n+    public int getNestingDepthLimit() {\n+        return nestingDepthLimit;\n+    }\n+\n+    /**\n+     * Set max depth of nested collections. When the limit is exceeded an exception is thrown.\n+     * Aliases/Anchors are not counted.\n+     * This is to prevent a DoS attack\n+     * @param nestingDepthLimit - depth to be accepted (50 by default)\n+     */\n+    public void setNestingDepthLimit(int nestingDepthLimit) {\n+        this.nestingDepthLimit = nestingDepthLimit;\n+    }\n }"
        },
        {
          "filename": "src/main/java/org/yaml/snakeyaml/composer/Composer.java",
          "status": "modified",
          "additions": 27,
          "deletions": 1,
          "patch": "@@ -36,7 +36,6 @@\n import org.yaml.snakeyaml.events.NodeEvent;\n import org.yaml.snakeyaml.events.ScalarEvent;\n import org.yaml.snakeyaml.events.SequenceStartEvent;\n-import org.yaml.snakeyaml.nodes.AnchorNode;\n import org.yaml.snakeyaml.nodes.MappingNode;\n import org.yaml.snakeyaml.nodes.Node;\n import org.yaml.snakeyaml.nodes.NodeId;\n@@ -63,6 +62,9 @@ public class Composer {\n     private final LoaderOptions loadingConfig;\n     private final CommentEventsCollector blockCommentsCollector;\n     private final CommentEventsCollector inlineCommentsCollector;\n+    // keep the nesting of collections inside other collections\n+    private int nestingDepth = 0;\n+    private final int nestingDepthLimit;\n \n     public Composer(Parser parser, Resolver resolver) {\n         this(parser, resolver, new LoaderOptions());\n@@ -78,6 +80,7 @@ public Composer(Parser parser, Resolver resolver, LoaderOptions loadingConfig) {\n                 CommentType.BLANK_LINE, CommentType.BLOCK);\n         this.inlineCommentsCollector = new CommentEventsCollector(parser,\n                 CommentType.IN_LINE);\n+        nestingDepthLimit = loadingConfig.getNestingDepthLimit();\n     }\n \n     /**\n@@ -182,6 +185,7 @@ private Node composeNode(Node parent) {\n         } else {\n             NodeEvent event = (NodeEvent) parser.peekEvent();\n             String anchor = event.getAnchor();\n+            increaseNestingDepth();\n             // the check for duplicate anchors has been removed (issue 174)\n             if (parser.checkEvent(Event.ID.Scalar)) {\n                 node = composeScalarNode(anchor, blockCommentsCollector.consume());\n@@ -190,6 +194,7 @@ private Node composeNode(Node parent) {\n             } else {\n                 node = composeMappingNode(anchor);\n             }\n+            decreaseNestingDepth();\n         }\n         recursiveNodes.remove(parent);\n         return node;\n@@ -316,4 +321,25 @@ protected Node composeKeyNode(MappingNode node) {\n     protected Node composeValueNode(MappingNode node) {\n         return composeNode(node);\n     }\n+\n+    /**\n+     * Increase nesting depth and fail when it exceeds the denied limit\n+     */\n+    private void increaseNestingDepth() {\n+        if (nestingDepth > nestingDepthLimit) {\n+            throw new YAMLException(\"Nesting Depth exceeded max \" + nestingDepthLimit);\n+        }\n+        nestingDepth++;\n+    }\n+\n+    /**\n+     * Indicate that the collection is finished and the nesting is decreased\n+     */\n+    private void decreaseNestingDepth() {\n+        if (nestingDepth > 0) {\n+            nestingDepth--;\n+        } else {\n+            throw new YAMLException(\"Nesting Depth cannot be negative\");\n+        }\n+    }\n }"
        },
        {
          "filename": "src/test/java/org/yaml/snakeyaml/issues/issue377/ReferencesTest.java",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -118,20 +118,22 @@ public void parseManyAliasesForCollections() {\n     }\n \n     @Test\n-    public void referencesWithRestrictedAliases() {\n+    public void referencesWithRestrictedNesting() {\n         // without alias restriction this size should occupy tons of CPU, memory and time to parse\n-        String bigYAML = createDump(35);\n+        int depth = 35;\n+        String bigYAML = createDump(depth);\n         // Load\n         long time1 = System.currentTimeMillis();\n         LoaderOptions settings = new LoaderOptions();\n-        settings.setMaxAliasesForCollections(40);\n+        settings.setMaxAliasesForCollections(1000);\n         settings.setAllowRecursiveKeys(true);\n+        settings.setNestingDepthLimit(depth);\n         Yaml yaml = new Yaml(settings);\n         try {\n             yaml.load(bigYAML);\n             fail();\n         } catch (Exception e) {\n-            assertEquals(\"Number of aliases for non-scalar nodes exceeds the specified max=40\", e.getMessage());\n+            assertEquals(\"Nesting Depth exceeded max 35\", e.getMessage());\n         }\n         long time2 = System.currentTimeMillis();\n         float duration = (time2 - time1) / 1000;"
        },
        {
          "filename": "src/test/java/org/yaml/snakeyaml/issues/issue525/FuzzyStackOverflowTest.java",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -15,16 +15,17 @@\n  */\n package org.yaml.snakeyaml.issues.issue525;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import org.junit.Test;\n+import org.yaml.snakeyaml.LoaderOptions;\n import org.yaml.snakeyaml.Util;\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.error.YAMLException;\n \n public class FuzzyStackOverflowTest {\n-\n   @Test\n   public void parseOpenUnmatchedMappings() {\n     try {\n@@ -33,9 +34,21 @@ public void parseOpenUnmatchedMappings() {\n       yaml.load(strYaml);\n       fail(\"Should report invalid YAML\");\n     } catch (YAMLException e) {\n-      assertTrue(false);\n-    } catch (Error e) {\n-      //TODO FIXME stackoverflow\n+      assertEquals(\"Nesting Depth exceeded max 50\", e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void parseOpenUnmatchedMappingsWithCustomLimit() {\n+    try {\n+      LoaderOptions options = new LoaderOptions();\n+      options.setNestingDepthLimit(1000);\n+      Yaml yaml = new Yaml(options);\n+      String strYaml = Util.getLocalResource(\"fuzzer/YamlFuzzer-4626423186325504\");\n+      yaml.load(strYaml);\n+      fail(\"Should report invalid YAML\");\n+    } catch (YAMLException e) {\n+      assertEquals(\"Nesting Depth exceeded max 1000\", e.getMessage());\n     }\n   }\n }"
        },
        {
          "filename": "src/test/java/org/yaml/snakeyaml/issues/issue526/Fuzzy47027Test.java",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -15,10 +15,11 @@\n  */\n package org.yaml.snakeyaml.issues.issue526;\n \n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n import org.junit.Test;\n+import org.yaml.snakeyaml.LoaderOptions;\n import org.yaml.snakeyaml.Util;\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.error.YAMLException;\n@@ -34,9 +35,21 @@ public void parseOpenUnmatchedSequences_47027() {\n       yaml.load(strYaml);\n       fail(\"Should report invalid YAML\");\n     } catch (YAMLException e) {\n-      assertTrue(false);\n-    } catch (Error e) {\n-      //TODO FIXME stackoverflow\n+      assertEquals(\"Nesting Depth exceeded max 50\", e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void setCustomLimit100() {\n+    try {\n+      LoaderOptions options = new LoaderOptions();\n+      options.setNestingDepthLimit(100);\n+      Yaml yaml = new Yaml(options);\n+      String strYaml = Util.getLocalResource(\"fuzzer/YamlFuzzer-5427149240139776\");\n+      yaml.load(strYaml);\n+      fail(\"Should report invalid YAML\");\n+    } catch (YAMLException e) {\n+      assertEquals(\"Nesting Depth exceeded max 100\", e.getMessage());\n     }\n   }\n }"
        },
        {
          "filename": "src/test/java/org/yaml/snakeyaml/issues/issue527/Fuzzy47047Test.java",
          "status": "modified",
          "additions": 5,
          "deletions": 7,
          "patch": "@@ -15,7 +15,7 @@\n  */\n package org.yaml.snakeyaml.issues.issue527;\n \n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n import org.junit.Test;\n@@ -27,16 +27,14 @@\n public class Fuzzy47047Test {\n \n   @Test\n-  public void parseOpenUnmatchedSequences_47047() {\n+  public void parseKeyIndicators_47047() {\n     try {\n       Yaml yaml = new Yaml();\n       String strYaml = Util.getLocalResource(\"fuzzer/YamlFuzzer-5868638424399872\");\n-      yaml.load(strYaml);\n-      fail(\"Should report invalid YAML\");\n+      //yaml.load(strYaml);\n+      //TODO FIXME fail(\"Should report invalid YAML\");\n     } catch (YAMLException e) {\n-      assertTrue(false);\n-    } catch (Error e) {\n-      //TODO FIXME it runs for 35 seconds !!!\n+      assertEquals(\"Nesting Depth exceeded max 25\", e.getMessage());\n     }\n   }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 6,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 7,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a51246b7bbc66394bdbb7d5ab23b7898a724054b",
            "date": "2025-01-02T13:09:52Z",
            "author_login": "asomov"
          },
          {
            "sha": "1acea70e3aae47257678761695de54779a38ee96",
            "date": "2024-12-24T12:15:04Z",
            "author_login": "maslovalex"
          },
          {
            "sha": "b16f9485f33136fb30f8472f3ccf0209707c023e",
            "date": "2024-12-16T22:23:58Z",
            "author_login": "fugerit79"
          },
          {
            "sha": "ff42f3654ae982ce6f512d7fd1296e85372e4953",
            "date": "2024-12-24T09:58:35Z",
            "author_login": "maslovalex"
          },
          {
            "sha": "03b9294b7feb2768b3e3f7688c62e21a61ab9a7e",
            "date": "2024-12-16T22:23:58Z",
            "author_login": "fugerit79"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-776",
    "description": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-30T05:15:07.667",
    "last_modified": "2024-11-21T06:53:07.563",
    "fix_date": "2022-04-28T12:38:16Z"
  },
  "references": [
    {
      "url": "https://bitbucket.org/snakeyaml/snakeyaml/commits/fc300780da21f4bb92c148bc90257201220cf174",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bitbucket.org/snakeyaml/snakeyaml/issues/525",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/snakeyaml/snakeyaml/commit/fc300780da21f4bb92c148bc90257201220cf174",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/10/msg00001.html",
      "source": "report@snyk.io",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240315-0010/",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGYAML-2806360",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bitbucket.org/snakeyaml/snakeyaml/commits/fc300780da21f4bb92c148bc90257201220cf174",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bitbucket.org/snakeyaml/snakeyaml/issues/525",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/snakeyaml/snakeyaml/commit/fc300780da21f4bb92c148bc90257201220cf174",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/10/msg00001.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240315-0010/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGYAML-2806360",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.059038",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "snakeyaml",
    "owner": "snakeyaml",
    "created_at": "2021-10-22T08:41:46Z",
    "updated_at": "2025-01-11T10:05:25Z",
    "pushed_at": "2025-01-02T13:13:50Z",
    "size": 14821,
    "stars": 110,
    "forks": 44,
    "open_issues": 0,
    "watchers": 110,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 1955733,
      "Shell": 520
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:00:59.892969"
  }
}