{
  "cve_id": "CVE-2022-25858",
  "github_data": {
    "repository": "terser/terser",
    "fix_commit": "a4da7349fdc92c05094f41d33d06d8cd4e90e76b",
    "related_commits": [
      "a4da7349fdc92c05094f41d33d06d8cd4e90e76b",
      "d8cc5691be980d663c29cc4d5ce67e852d597012",
      "a4da7349fdc92c05094f41d33d06d8cd4e90e76b",
      "d8cc5691be980d663c29cc4d5ce67e852d597012"
    ],
    "patch_url": "https://github.com/terser/terser/commit/a4da7349fdc92c05094f41d33d06d8cd4e90e76b.patch",
    "fix_commit_details": {
      "sha": "a4da7349fdc92c05094f41d33d06d8cd4e90e76b",
      "commit_date": "2022-04-28T14:15:45Z",
      "author": {
        "login": "fabiosantoscode",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix potential regexp DDOS",
        "length": 25,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 38,
        "additions": 31,
        "deletions": 7
      },
      "files": [
        {
          "filename": "lib/compress/evaluate.js",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -46,7 +46,8 @@ import {\n     makePredicate,\n     return_this,\n     string_template,\n-    regexp_source_fix\n+    regexp_source_fix,\n+    regexp_is_safe,\n } from \"../utils/index.js\";\n import {\n     AST_Array,\n@@ -129,7 +130,7 @@ def_eval(AST_BigInt, return_this);\n \n def_eval(AST_RegExp, function (compressor) {\n     let evaluated = compressor.evaluated_regexps.get(this.value);\n-    if (evaluated === undefined) {\n+    if (evaluated === undefined && regexp_is_safe(this.value.source)) {\n         try {\n             const { source, flags } = this.value;\n             evaluated = new RegExp(source, flags);"
        },
        {
          "filename": "lib/compress/index.js",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -158,6 +158,7 @@ import {\n     return_true,\n     regexp_source_fix,\n     has_annotation,\n+    regexp_is_safe,\n } from \"../utils/index.js\";\n import { first_in_statement } from \"../utils/first_in_statement.js\";\n import { equivalent_to } from \"../equivalent-to.js\";\n@@ -2140,6 +2141,7 @@ def_optimize(AST_Call, function(self, compressor) {\n                     params.push(value);\n                     return arg !== value;\n                 })\n+                && regexp_is_safe(params[0])\n             ) {\n                 let [ source, flags ] = params;\n                 source = regexp_source_fix(new RegExp(source).source);"
        },
        {
          "filename": "lib/utils/index.js",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -249,7 +249,15 @@ function regexp_source_fix(source) {\n         return (escaped ? \"\" : \"\\\\\") + lineTerminatorEscape[match];\n     });\n }\n-const all_flags = \"gimuy\";\n+\n+// Subset of regexps that is not going to cause regexp based DDOS\n+// https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n+const re_safe_regexp = /^[\\\\/|\\0\\s\\w^$.[\\]()]*$/;\n+\n+/** Check if the regexp is safe for Terser to create without risking a RegExp DOS */\n+export const regexp_is_safe = (source) => re_safe_regexp.test(source);\n+\n+const all_flags = \"dgimsuy\";\n function sort_regexp_flags(flags) {\n     const existing_flags = new Set(flags.split(\"\"));\n     let out = \"\";"
        },
        {
          "filename": "test/compress/regexp.js",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -30,10 +30,10 @@ regexp_2: {\n         unsafe: true,\n     }\n     input: {\n-        console.log(JSON.stringify(\"COMPASS? Overpass.\".match(new RegExp(\"([Sap]+)\", \"ig\"))));\n+        console.log(JSON.stringify(\"COMPASS? Overpass.\".match(new RegExp(\"(pass)\", \"ig\"))));\n     }\n     expect: {\n-        console.log(JSON.stringify(\"COMPASS? Overpass.\".match(/([Sap]+)/gi)));\n+        console.log(JSON.stringify(\"COMPASS? Overpass.\".match(/(pass)/gi)));\n     }\n     expect_stdout: '[\"PASS\",\"pass\"]'\n }\n@@ -44,10 +44,10 @@ unsafe_slashes: {\n         unsafe: true\n     }\n     input: {\n-        console.log(new RegExp(\"^https://\"))\n+        console.log(new RegExp(\"^https//\"))\n     }\n     expect: {\n-        console.log(/^https:\\/\\//)\n+        console.log(/^https\\/\\//)\n     }\n }\n unsafe_nul_byte: {\n@@ -75,3 +75,16 @@ inline_script: {\n     }\n     expect_exact: '/* <\\\\/script> */\\n/[<\\\\/script>]/;'\n }\n+\n+regexp_no_ddos: {\n+    options = { unsafe: true, evaluate: true }\n+    input: {\n+        console.log(/(b+)b+/.test(\"bbb\"))\n+        console.log(RegExp(\"(b+)b+\").test(\"bbb\"))\n+    }\n+    expect: {\n+        console.log(/(b+)b+/.test(\"bbb\"))\n+        console.log(RegExp(\"(b+)b+\").test(\"bbb\"))\n+    }\n+    expect_stdout: [\"true\", \"true\"]\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "914c31a2d547f980d09421e4a9e3519d393c9786",
            "date": "2024-12-30T20:52:27Z",
            "author_login": "fabiosantoscode"
          },
          {
            "sha": "e5be79d5a1746469388806abe0c3ceb1bedd67e7",
            "date": "2024-12-30T19:55:58Z",
            "author_login": "fabiosantoscode"
          },
          {
            "sha": "430795bbd73bed2737fcd0cd352901889d13b5f7",
            "date": "2024-12-29T13:44:37Z",
            "author_login": "fabiosantoscode"
          },
          {
            "sha": "ce4a5827edc02567425ea698ab555f248fe8bb42",
            "date": "2024-12-28T13:54:17Z",
            "author_login": "WofWca"
          },
          {
            "sha": "58ba5c163fa1684f2a63c7bc19b7ebcf85b74f73",
            "date": "2024-12-05T12:10:02Z",
            "author_login": "fabiosantoscode"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-1333",
    "description": "The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-15T20:15:08.427",
    "last_modified": "2024-11-21T06:53:07.677",
    "fix_date": "2022-04-28T14:15:45Z"
  },
  "references": [
    {
      "url": "https://github.com/terser/terser/blob/master/lib/compress/evaluate.js%23L135",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/terser/terser/commit/a4da7349fdc92c05094f41d33d06d8cd4e90e76b",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/terser/terser/commit/d8cc5691be980d663c29cc4d5ce67e852d597012",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2949722",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-TERSER-2806366",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/terser/terser/blob/master/lib/compress/evaluate.js%23L135",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/terser/terser/commit/a4da7349fdc92c05094f41d33d06d8cd4e90e76b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/terser/terser/commit/d8cc5691be980d663c29cc4d5ce67e852d597012",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2949722",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-TERSER-2806366",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.494834",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "terser",
    "owner": "terser",
    "created_at": "2015-01-11T16:06:46Z",
    "updated_at": "2025-01-14T09:50:22Z",
    "pushed_at": "2024-12-30T20:53:01Z",
    "size": 13303,
    "stars": 8788,
    "forks": 393,
    "open_issues": 294,
    "watchers": 8788,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 2795673,
      "HTML": 2021,
      "Shell": 523
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T18:33:04.693244"
  }
}