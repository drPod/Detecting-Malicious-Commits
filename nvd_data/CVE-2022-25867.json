{
  "cve_id": "CVE-2022-25867",
  "github_data": {
    "repository": "socketio/socket.io-client-java",
    "fix_commit": "8664499b6f31154f49783531f778dac5387b766b",
    "related_commits": [
      "8664499b6f31154f49783531f778dac5387b766b",
      "e8ffe9d1383736f6a21090ab959a2f4fa5a41284",
      "8664499b6f31154f49783531f778dac5387b766b",
      "e8ffe9d1383736f6a21090ab959a2f4fa5a41284"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "8664499b6f31154f49783531f778dac5387b766b",
      "commit_date": "2021-04-26T21:30:53Z",
      "author": {
        "login": "darrachequesne",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: ensure the payload format is valid",
        "length": 443,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 114,
        "additions": 72,
        "deletions": 42
      },
      "files": [
        {
          "filename": "src/main/java/io/socket/client/Manager.java",
          "status": "modified",
          "additions": 9,
          "deletions": 12,
          "patch": "@@ -2,6 +2,7 @@\n \n import io.socket.backo.Backoff;\n import io.socket.emitter.Emitter;\n+import io.socket.parser.DecodingException;\n import io.socket.parser.IOParser;\n import io.socket.parser.Packet;\n import io.socket.parser.Parser;\n@@ -370,10 +371,14 @@ private void onopen() {\n             @Override\n             public void call(Object... objects) {\n                 Object data = objects[0];\n-                if (data instanceof String) {\n-                    Manager.this.ondata((String)data);\n-                } else if (data instanceof byte[]) {\n-                    Manager.this.ondata((byte[])data);\n+                try {\n+                    if (data instanceof String) {\n+                        Manager.this.decoder.add((String) data);\n+                    } else if (data instanceof byte[]) {\n+                        Manager.this.decoder.add((byte[]) data);\n+                    }\n+                } catch (DecodingException e) {\n+                    logger.fine(\"error while decoding the packet: \" + e.getMessage());\n                 }\n             }\n         }));\n@@ -419,14 +424,6 @@ private void onpong() {\n                 null != this.lastPing ? new Date().getTime() - this.lastPing.getTime() : 0);\n     }\n \n-    private void ondata(String data) {\n-        this.decoder.add(data);\n-    }\n-\n-    private void ondata(byte[] data) {\n-        this.decoder.add(data);\n-    }\n-\n     private void ondecoded(Packet packet) {\n         this.emit(EVENT_PACKET, packet);\n     }"
        },
        {
          "filename": "src/main/java/io/socket/parser/DecodingException.java",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+package io.socket.parser;\n+\n+public class DecodingException extends RuntimeException {\n+    public DecodingException(String message) {\n+        super(message);\n+    }\n+}"
        },
        {
          "filename": "src/main/java/io/socket/parser/IOParser.java",
          "status": "modified",
          "additions": 35,
          "deletions": 9,
          "patch": "@@ -1,7 +1,9 @@\n package io.socket.parser;\n \n import io.socket.hasbinary.HasBinary;\n+import org.json.JSONArray;\n import org.json.JSONException;\n+import org.json.JSONObject;\n import org.json.JSONTokener;\n \n import java.util.ArrayList;\n@@ -14,10 +16,6 @@ final public class IOParser implements Parser {\n \n     private static final Logger logger = Logger.getLogger(IOParser.class.getName());\n \n-    private static Packet<String> error() {\n-        return new Packet<String>(ERROR, \"parser error\");\n-    }\n-\n     private IOParser() {}\n \n     final public static class Encoder implements Parser.Encoder {\n@@ -126,12 +124,16 @@ private static Packet decodeString(String str) {\n             int i = 0;\n             int length = str.length();\n \n-            Packet<Object> p = new Packet<Object>(Character.getNumericValue(str.charAt(0)));\n+            Packet<Object> p = new Packet<>(Character.getNumericValue(str.charAt(0)));\n \n-            if (p.type < 0 || p.type > types.length - 1) return error();\n+            if (p.type < 0 || p.type > types.length - 1) {\n+                throw new DecodingException(\"unknown packet type \" + p.type);\n+            }\n \n             if (BINARY_EVENT == p.type || BINARY_ACK == p.type) {\n-                if (!str.contains(\"-\") || length <= i + 1) return error();\n+                if (!str.contains(\"-\") || length <= i + 1) {\n+                    throw new DecodingException(\"illegal attachments\");\n+                }\n                 StringBuilder attachments = new StringBuilder();\n                 while (str.charAt(++i) != '-') {\n                     attachments.append(str.charAt(i));\n@@ -170,7 +172,7 @@ private static Packet decodeString(String str) {\n                     try {\n                         p.id = Integer.parseInt(id.toString());\n                     } catch (NumberFormatException e){\n-                        return error();\n+                        throw new DecodingException(\"invalid payload\");\n                     }\n                 }\n             }\n@@ -181,7 +183,10 @@ private static Packet decodeString(String str) {\n                     p.data = new JSONTokener(str.substring(i)).nextValue();\n                 } catch (JSONException e) {\n                     logger.log(Level.WARNING, \"An error occured while retrieving data from JSONTokener\", e);\n-                    return error();\n+                    throw new DecodingException(\"invalid payload\");\n+                }\n+                if (!isPayloadValid(p.type, p.data)) {\n+                    throw new DecodingException(\"invalid payload\");\n                 }\n             }\n \n@@ -191,6 +196,27 @@ private static Packet decodeString(String str) {\n             return p;\n         }\n \n+        private static boolean isPayloadValid(int type, Object payload) {\n+            switch (type) {\n+                case Parser.CONNECT:\n+                    return payload instanceof JSONObject;\n+                case Parser.ERROR:\n+                    return payload instanceof String;\n+                case Parser.DISCONNECT:\n+                    return payload == null;\n+                case Parser.EVENT:\n+                case Parser.BINARY_EVENT:\n+                    return payload instanceof JSONArray\n+                            && ((JSONArray) payload).length() > 0\n+                            && !((JSONArray) payload).isNull(0);\n+                case Parser.ACK:\n+                case Parser.BINARY_ACK:\n+                    return payload instanceof JSONArray;\n+                default:\n+                    return false;\n+            }\n+        }\n+\n         @Override\n         public void destroy() {\n             if (this.reconstructor != null) {"
        },
        {
          "filename": "src/test/java/io/socket/parser/ByteArrayTest.java",
          "status": "modified",
          "additions": 13,
          "deletions": 13,
          "patch": "@@ -1,15 +1,15 @@\n package io.socket.parser;\n \n-import io.socket.emitter.Emitter;\n import org.json.JSONArray;\n import org.json.JSONException;\n-import org.json.JSONObject;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n \n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n \n+import static java.util.Arrays.asList;\n import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.assertThat;\n \n@@ -20,29 +20,29 @@ public class ByteArrayTest {\n \n     @Test\n     public void encodeByteArray() {\n-        Packet<byte[]> packet = new Packet<byte[]>(Parser.BINARY_EVENT);\n-        packet.data = \"abc\".getBytes(Charset.forName(\"UTF-8\"));\n+        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);\n+        packet.data = new JSONArray(asList(\"abc\", \"abc\".getBytes(StandardCharsets.UTF_8)));\n         packet.id = 23;\n         packet.nsp = \"/cool\";\n         Helpers.testBin(packet);\n     }\n \n     @Test\n     public void encodeByteArray2() {\n-        Packet<byte[]> packet = new Packet<byte[]>(Parser.BINARY_EVENT);\n-        packet.data = new byte[2];\n+        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);\n+        packet.data = new JSONArray(asList(\"2\", new byte[] { 0, 1 }));\n         packet.id = 0;\n         packet.nsp = \"/\";\n         Helpers.testBin(packet);\n     }\n \n     @Test\n     public void encodeByteArrayDeepInJson() throws JSONException {\n-        JSONObject data = new JSONObject(\"{a: \\\"hi\\\", b: {}, c: {a: \\\"bye\\\", b: {}}}\");\n-        data.getJSONObject(\"b\").put(\"why\", new byte[3]);\n-        data.getJSONObject(\"c\").getJSONObject(\"b\").put(\"a\", new byte[6]);\n+        JSONArray data = new JSONArray(\"[{a: \\\"hi\\\", b: {}, c: {a: \\\"bye\\\", b: {}}}]\");\n+        data.getJSONObject(0).getJSONObject(\"b\").put(\"why\", new byte[3]);\n+        data.getJSONObject(0).getJSONObject(\"c\").getJSONObject(\"b\").put(\"a\", new byte[6]);\n \n-        Packet<JSONObject> packet = new Packet<JSONObject>(Parser.BINARY_EVENT);\n+        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);\n         packet.data = data;\n         packet.id = 999;\n         packet.nsp = \"/deep\";\n@@ -51,10 +51,10 @@ public void encodeByteArrayDeepInJson() throws JSONException {\n \n     @Test\n     public void encodeDeepBinaryJSONWithNullValue() throws JSONException {\n-        JSONObject data = new JSONObject(\"{a: \\\"b\\\", c: 4, e: {g: null}, h: null}\");\n-        data.put(\"h\", new byte[9]);\n+        JSONArray data = new JSONArray(\"[{a: \\\"b\\\", c: 4, e: {g: null}, h: null}]\");\n+        data.getJSONObject(0).put(\"h\", new byte[9]);\n \n-        Packet<JSONObject> packet = new Packet<JSONObject>(Parser.BINARY_EVENT);\n+        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);\n         packet.data = data;\n         packet.nsp = \"/\";\n         packet.id = 600;"
        },
        {
          "filename": "src/test/java/io/socket/parser/Helpers.java",
          "status": "modified",
          "additions": 5,
          "deletions": 8,
          "patch": "@@ -1,6 +1,5 @@\n package io.socket.parser;\n \n-import io.socket.emitter.Emitter;\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n@@ -10,6 +9,7 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n \n @RunWith(JUnit4.class)\n public class Helpers {\n@@ -35,13 +35,10 @@ public void call(Packet packet) {\n \n     public static void testDecodeError(final String errorMessage) {\n         Parser.Decoder decoder = new IOParser.Decoder();\n-        decoder.onDecoded(new IOParser.Decoder.Callback() {\n-            @Override\n-            public void call(Packet packet) {\n-                assertPacket(errorPacket, packet);\n-            }\n-        });\n-        decoder.add(errorMessage);\n+        try {\n+            decoder.add(errorMessage);\n+            fail();\n+        } catch (DecodingException e) {}\n     }\n \n     @SuppressWarnings(\"unchecked\")"
        },
        {
          "filename": "src/test/java/io/socket/parser/ParserTest.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -63,5 +63,8 @@ public void decodeInError() throws JSONException {\n         Helpers.testDecodeError(Parser.EVENT + \"2sd\");\n         // event with invalid json data\n         Helpers.testDecodeError(Parser.EVENT + \"2[\\\"a\\\",1,{asdf}]\");\n+        Helpers.testDecodeError(Parser.EVENT + \"2{}\");\n+        Helpers.testDecodeError(Parser.EVENT + \"2[]\");\n+        Helpers.testDecodeError(Parser.EVENT + \"2[null]\");\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6ea9c15a34bc2cf2aef0b85f77d949853c88231a",
            "date": "2024-07-10T10:27:19Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "6d5d74ed8cb1e992e5ffa0fe3582f0e10584295f",
            "date": "2024-07-10T10:23:32Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "0e11f2f7bb17feff2f883fd1652fd639001e4ef3",
            "date": "2024-07-10T09:57:59Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "54645ece2cd132f3e305b80904e1fc38bd41c4f9",
            "date": "2024-07-10T09:38:53Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "b00ae8eec1ef0aa5094fca7fad918a437603eb12",
            "date": "2024-07-10T09:10:17Z",
            "author_login": "Harsh5488"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "The package io.socket:socket.io-client before 2.0.1 are vulnerable to NULL Pointer Dereference when parsing a packet with with invalid payload format.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-02T14:15:10.103",
    "last_modified": "2024-11-21T06:53:08.457",
    "fix_date": "2021-04-26T21:30:53Z"
  },
  "references": [
    {
      "url": "https://github.com/socketio/socket.io-client-java/commit/8664499b6f31154f49783531f778dac5387b766b",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-client-java/commit/e8ffe9d1383736f6a21090ab959a2f4fa5a41284",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-client-java/issues/508%23issuecomment-1179817361",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-client-java/releases/tag/socket.io-client-2.0.1",
      "source": "report@snyk.io",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-IOSOCKET-2949738",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-client-java/commit/8664499b6f31154f49783531f778dac5387b766b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-client-java/commit/e8ffe9d1383736f6a21090ab959a2f4fa5a41284",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-client-java/issues/508%23issuecomment-1179817361",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-client-java/releases/tag/socket.io-client-2.0.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-IOSOCKET-2949738",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.191785",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "socket.io-client-java",
    "owner": "socketio",
    "created_at": "2013-04-28T17:04:05Z",
    "updated_at": "2025-01-24T00:59:04Z",
    "pushed_at": "2024-08-01T12:12:45Z",
    "size": 2351,
    "stars": 5364,
    "forks": 978,
    "open_issues": 116,
    "watchers": 5364,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 162118,
      "JavaScript": 3399,
      "Makefile": 255
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:32:56.868504"
  }
}