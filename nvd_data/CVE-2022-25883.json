{
  "cve_id": "CVE-2022-25883",
  "github_data": {
    "repository": "npm/node-semver",
    "fix_commit": "717534ee353682f3bcf33e60a8af4292626d4441",
    "related_commits": [
      "717534ee353682f3bcf33e60a8af4292626d4441",
      "717534ee353682f3bcf33e60a8af4292626d4441"
    ],
    "patch_url": "https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441.patch",
    "fix_commit_details": {
      "sha": "717534ee353682f3bcf33e60a8af4292626d4441",
      "commit_date": "2023-06-15T19:21:14Z",
      "author": {
        "login": "lukekarrys",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: better handling of whitespace (#564)",
        "length": 41,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 208,
        "additions": 136,
        "deletions": 72
      },
      "files": [
        {
          "filename": "classes/comparator.js",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -16,6 +16,7 @@ class Comparator {\n       }\n     }\n \n+    comp = comp.trim().split(/\\s+/).join(' ')\n     debug('comparator', comp, options)\n     this.options = options\n     this.loose = !!options.loose\n@@ -133,7 +134,7 @@ class Comparator {\n module.exports = Comparator\n \n const parseOptions = require('../internal/parse-options')\n-const { re, t } = require('../internal/re')\n+const { safeRe: re, t } = require('../internal/re')\n const cmp = require('../functions/cmp')\n const debug = require('../internal/debug')\n const SemVer = require('./semver')"
        },
        {
          "filename": "classes/range.js",
          "status": "modified",
          "additions": 37,
          "deletions": 27,
          "patch": "@@ -26,19 +26,26 @@ class Range {\n     this.loose = !!options.loose\n     this.includePrerelease = !!options.includePrerelease\n \n-    // First, split based on boolean or ||\n+    // First reduce all whitespace as much as possible so we do not have to rely\n+    // on potentially slow regexes like \\s*. This is then stored and used for\n+    // future error messages as well.\n     this.raw = range\n-    this.set = range\n+      .trim()\n+      .split(/\\s+/)\n+      .join(' ')\n+\n+    // First, split on ||\n+    this.set = this.raw\n       .split('||')\n       // map the range to a 2d array of comparators\n-      .map(r => this.parseRange(r.trim()))\n+      .map(r => this.parseRange(r))\n       // throw out any comparator lists that are empty\n       // this generally means that it was not a valid range, which is allowed\n       // in loose mode, but will still throw if the WHOLE range is invalid.\n       .filter(c => c.length)\n \n     if (!this.set.length) {\n-      throw new TypeError(`Invalid SemVer Range: ${range}`)\n+      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n     }\n \n     // if we have any that are not the null set, throw out null sets.\n@@ -64,9 +71,7 @@ class Range {\n \n   format () {\n     this.range = this.set\n-      .map((comps) => {\n-        return comps.join(' ').trim()\n-      })\n+      .map((comps) => comps.join(' ').trim())\n       .join('||')\n       .trim()\n     return this.range\n@@ -77,8 +82,6 @@ class Range {\n   }\n \n   parseRange (range) {\n-    range = range.trim()\n-\n     // memoize range parsing for performance.\n     // this is a very hot path, and fully deterministic.\n     const memoOpts =\n@@ -105,9 +108,6 @@ class Range {\n     // `^ 1.2.3` => `^1.2.3`\n     range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n \n-    // normalize spaces\n-    range = range.split(/\\s+/).join(' ')\n-\n     // At this point, the range is completely trimmed and\n     // ready to be split into comparators.\n \n@@ -203,7 +203,7 @@ const Comparator = require('./comparator')\n const debug = require('../internal/debug')\n const SemVer = require('./semver')\n const {\n-  re,\n+  safeRe: re,\n   t,\n   comparatorTrimReplace,\n   tildeTrimReplace,\n@@ -257,10 +257,13 @@ const isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n // ~0.0.1 --> >=0.0.1 <0.1.0-0\n-const replaceTildes = (comp, options) =>\n-  comp.trim().split(/\\s+/).map((c) => {\n-    return replaceTilde(c, options)\n-  }).join(' ')\n+const replaceTildes = (comp, options) => {\n+  return comp\n+    .trim()\n+    .split(/\\s+/)\n+    .map((c) => replaceTilde(c, options))\n+    .join(' ')\n+}\n \n const replaceTilde = (comp, options) => {\n   const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n@@ -298,10 +301,13 @@ const replaceTilde = (comp, options) => {\n // ^1.2.0 --> >=1.2.0 <2.0.0-0\n // ^0.0.1 --> >=0.0.1 <0.0.2-0\n // ^0.1.0 --> >=0.1.0 <0.2.0-0\n-const replaceCarets = (comp, options) =>\n-  comp.trim().split(/\\s+/).map((c) => {\n-    return replaceCaret(c, options)\n-  }).join(' ')\n+const replaceCarets = (comp, options) => {\n+  return comp\n+    .trim()\n+    .split(/\\s+/)\n+    .map((c) => replaceCaret(c, options))\n+    .join(' ')\n+}\n \n const replaceCaret = (comp, options) => {\n   debug('caret', comp, options)\n@@ -358,9 +364,10 @@ const replaceCaret = (comp, options) => {\n \n const replaceXRanges = (comp, options) => {\n   debug('replaceXRanges', comp, options)\n-  return comp.split(/\\s+/).map((c) => {\n-    return replaceXRange(c, options)\n-  }).join(' ')\n+  return comp\n+    .split(/\\s+/)\n+    .map((c) => replaceXRange(c, options))\n+    .join(' ')\n }\n \n const replaceXRange = (comp, options) => {\n@@ -443,12 +450,15 @@ const replaceXRange = (comp, options) => {\n const replaceStars = (comp, options) => {\n   debug('replaceStars', comp, options)\n   // Looseness is ignored here.  star is always as loose as it gets!\n-  return comp.trim().replace(re[t.STAR], '')\n+  return comp\n+    .trim()\n+    .replace(re[t.STAR], '')\n }\n \n const replaceGTE0 = (comp, options) => {\n   debug('replaceGTE0', comp, options)\n-  return comp.trim()\n+  return comp\n+    .trim()\n     .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n }\n \n@@ -486,7 +496,7 @@ const hyphenReplace = incPr => ($0,\n     to = `<=${to}`\n   }\n \n-  return (`${from} ${to}`).trim()\n+  return `${from} ${to}`.trim()\n }\n \n const testSet = (set, version, options) => {"
        },
        {
          "filename": "classes/semver.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n const debug = require('../internal/debug')\n const { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\n-const { re, t } = require('../internal/re')\n+const { safeRe: re, t } = require('../internal/re')\n \n const parseOptions = require('../internal/parse-options')\n const { compareIdentifiers } = require('../internal/identifiers')"
        },
        {
          "filename": "functions/coerce.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n const SemVer = require('../classes/semver')\n const parse = require('./parse')\n-const { re, t } = require('../internal/re')\n+const { safeRe: re, t } = require('../internal/re')\n \n const coerce = (version, options) => {\n   if (version instanceof SemVer) {"
        },
        {
          "filename": "internal/re.js",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -4,16 +4,27 @@ exports = module.exports = {}\n \n // The actual regexps go on exports.re\n const re = exports.re = []\n+const safeRe = exports.safeRe = []\n const src = exports.src = []\n const t = exports.t = {}\n let R = 0\n \n const createToken = (name, value, isGlobal) => {\n+  // Replace all greedy whitespace to prevent regex dos issues. These regex are\n+  // used internally via the safeRe object since all inputs in this library get\n+  // normalized first to trim and collapse all extra whitespace. The original\n+  // regexes are exported for userland consumption and lower level usage. A\n+  // future breaking change could export the safer regex only with a note that\n+  // all input should have extra whitespace removed.\n+  const safe = value\n+    .split('\\\\s*').join('\\\\s{0,1}')\n+    .split('\\\\s+').join('\\\\s')\n   const index = R++\n   debug(name, index, value)\n   t[name] = index\n   src[index] = value\n   re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n+  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n }\n \n // The following Regular Expressions can be used for tokenizing,"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -37,7 +37,7 @@\n     \"range.bnf\"\n   ],\n   \"tap\": {\n-    \"check-coverage\": true,\n+    \"timeout\": 30,\n     \"coverage-map\": \"map.js\",\n     \"nyc-arg\": [\n       \"--exclude\","
        },
        {
          "filename": "test/integration/whitespace.js",
          "status": "added",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -0,0 +1,39 @@\n+const { test } = require('tap')\n+const Range = require('../../classes/range')\n+const SemVer = require('../../classes/semver')\n+const Comparator = require('../../classes/comparator')\n+const validRange = require('../../ranges/valid')\n+const minVersion = require('../../ranges/min-version')\n+const minSatisfying = require('../../ranges/min-satisfying')\n+const maxSatisfying = require('../../ranges/max-satisfying')\n+\n+const s = (n = 500000) => ' '.repeat(n)\n+\n+test('regex dos via range whitespace', (t) => {\n+  // a range with this much whitespace would take a few minutes to process if\n+  // any redos susceptible regexes were used. there is a global tap timeout per\n+  // file set in the package.json that will error if this test takes too long.\n+  const r = `1.2.3 ${s()} <1.3.0`\n+\n+  t.equal(new Range(r).range, '1.2.3 <1.3.0')\n+  t.equal(validRange(r), '1.2.3 <1.3.0')\n+  t.equal(minVersion(r).version, '1.2.3')\n+  t.equal(minSatisfying(['1.2.3'], r), '1.2.3')\n+  t.equal(maxSatisfying(['1.2.3'], r), '1.2.3')\n+\n+  t.end()\n+})\n+\n+test('semver version', (t) => {\n+  const v = `${s(125)}1.2.3${s(125)}`\n+  const tooLong = `${s()}1.2.3${s()}`\n+  t.equal(new SemVer(v).version, '1.2.3')\n+  t.throws(() => new SemVer(tooLong))\n+  t.end()\n+})\n+\n+test('comparator', (t) => {\n+  const c = `${s()}<${s()}1.2.3${s()}`\n+  t.equal(new Comparator(c).value, '<1.2.3')\n+  t.end()\n+})"
        },
        {
          "filename": "test/internal/re.js",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n const { test } = require('tap')\n-const { src, re } = require('../../internal/re')\n+const { src, re, safeRe } = require('../../internal/re')\n const semver = require('../../')\n \n test('has a list of src, re, and tokens', (t) => {\n@@ -13,5 +13,11 @@ test('has a list of src, re, and tokens', (t) => {\n   for (const i in semver.tokens) {\n     t.match(semver.tokens[i], Number, 'tokens are numbers')\n   }\n+\n+  safeRe.forEach(r => {\n+    t.notMatch(r.source, '\\\\s+', 'safe regex do not contain greedy whitespace')\n+    t.notMatch(r.source, '\\\\s*', 'safe regex do not contain greedy whitespace')\n+  })\n+\n   t.end()\n })"
        },
        {
          "filename": "test/map.js",
          "status": "modified",
          "additions": 37,
          "deletions": 40,
          "patch": "@@ -1,49 +1,46 @@\n const t = require('tap')\n+const { resolve, join, relative, extname, dirname, basename } = require('path')\n+const { statSync, readdirSync } = require('fs')\n+const map = require('../map.js')\n+const pkg = require('../package.json')\n \n-// ensure that the coverage map maps all coverage\n-const ignore = [\n-  '.git',\n-  '.github',\n-  '.commitlintrc.js',\n-  '.eslintrc.js',\n-  '.eslintrc.local.js',\n-  'node_modules',\n-  'coverage',\n-  'tap-snapshots',\n-  'test',\n-  'fixtures',\n-]\n+const ROOT = resolve(__dirname, '..')\n+const TEST = join(ROOT, 'test')\n+const IGNORE_DIRS = ['fixtures', 'integration']\n \n-const { statSync, readdirSync } = require('fs')\n-const find = (folder, set = [], root = true) => {\n-  const ent = readdirSync(folder)\n-  set.push(...ent.filter(f => !ignore.includes(f) && /\\.m?js$/.test(f)).map(f => folder + '/' + f))\n-  for (const e of ent.filter(f => !ignore.includes(f) && !/\\.m?js$/.test(f))) {\n-    if (statSync(folder + '/' + e).isDirectory()) {\n-      find(folder + '/' + e, set, false)\n+const getFile = (f) => {\n+  try {\n+    if (statSync(f).isFile()) {\n+      return extname(f) === '.js' ? [f] : []\n     }\n+  } catch {\n+    return []\n   }\n-  if (!root) {\n-    return\n-  }\n-  return set.map(f => f.slice(folder.length + 1)\n-    .replace(/\\\\/g, '/'))\n-    .sort((a, b) => a.localeCompare(b))\n }\n \n-const { resolve } = require('path')\n-const root = resolve(__dirname, '..')\n+const walk = (item, res = []) => getFile(item) || readdirSync(item)\n+  .map(f => join(item, f))\n+  .reduce((acc, f) => acc.concat(statSync(f).isDirectory() ? walk(f, res) : getFile(f)), [])\n+  .filter(Boolean)\n \n-const sut = find(root)\n-const tests = find(root + '/test')\n-t.strictSame(sut, tests, 'test files should match system files')\n-const map = require('../map.js')\n+const walkAll = (items, relativeTo) => items\n+  .reduce((acc, f) => acc.concat(walk(join(ROOT, f))), [])\n+  .map((f) => relative(relativeTo, f))\n+  .sort()\n \n-for (const testFile of tests) {\n-  t.test(testFile, t => {\n-    t.plan(1)\n-    // cast to an array, since map() can return a string or array\n-    const systemFiles = [].concat(map(testFile))\n-    t.ok(systemFiles.some(sys => sut.includes(sys)), 'test covers a file')\n-  })\n-}\n+t.test('tests match system', t => {\n+  const sut = walkAll([pkg.tap['coverage-map'], ...pkg.files], ROOT)\n+  const tests = walkAll([basename(TEST)], TEST)\n+    .filter(f => !IGNORE_DIRS.includes(dirname(f)))\n+\n+  t.strictSame(sut, tests, 'test files should match system files')\n+\n+  for (const f of tests) {\n+    t.test(f, t => {\n+      t.plan(1)\n+      t.ok(sut.includes(map(f)), 'test covers a file')\n+    })\n+  }\n+\n+  t.end()\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 3,
        "unique_directories": 7,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "868d4bbe3d318c52544f38d5f9977a1103e924c2",
            "date": "2024-12-04T16:00:47Z",
            "author_login": "mbtools"
          },
          {
            "sha": "145c554b8c7b7ecfcb451153ad18bdb2f24ad10d",
            "date": "2024-08-29T11:54:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0b812d5fb5fbb208e89dc1250e2efafeaa549437",
            "date": "2024-08-28T17:28:36Z",
            "author_login": "hashtagchris"
          },
          {
            "sha": "6502a15af34181b14a443d38bb75fc2d84bff0f9",
            "date": "2024-08-28T07:06:20Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "beb480195368914492614d5609a0029affa3fdea",
            "date": "2024-07-22T23:27:52Z",
            "author_login": "hashtagchris"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-1333",
    "description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-21T05:15:09.060",
    "last_modified": "2024-12-06T17:15:07.260",
    "fix_date": "2023-06-15T19:21:14Z"
  },
  "references": [
    {
      "url": "https://github.com/npm/node-semver/blob/main/classes/range.js%23L97-L104",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/blob/main/internal/re.js%23L138",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/blob/main/internal/re.js%23L160",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/pull/564",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-SEMVER-3247795",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/blob/main/classes/range.js%23L97-L104",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/blob/main/internal/re.js%23L138",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/blob/main/internal/re.js%23L160",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/commit/717534ee353682f3bcf33e60a8af4292626d4441",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/npm/node-semver/pull/564",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20241025-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-SEMVER-3247795",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.846649",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "node-semver",
    "owner": "npm",
    "created_at": "2011-02-12T00:06:03Z",
    "updated_at": "2025-01-13T01:19:04Z",
    "pushed_at": "2024-12-11T23:32:26Z",
    "size": 1251,
    "stars": 5157,
    "forks": 499,
    "open_issues": 49,
    "watchers": 5157,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release/v5",
      "release/v6"
    ],
    "languages": {
      "JavaScript": 151976
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "isc"
    },
    "collected_at": "2025-01-14T22:54:17.647275"
  }
}