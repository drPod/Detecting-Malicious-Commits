{
  "cve_id": "CVE-2022-2589",
  "github_data": {
    "repository": "beancount/fava",
    "fix_commit": "68bbb6e39319deb35ab9f18d0b6aa9fa70472539",
    "related_commits": [
      "68bbb6e39319deb35ab9f18d0b6aa9fa70472539",
      "68bbb6e39319deb35ab9f18d0b6aa9fa70472539"
    ],
    "patch_url": "https://github.com/beancount/fava/commit/68bbb6e39319deb35ab9f18d0b6aa9fa70472539.patch",
    "fix_commit_details": {
      "sha": "68bbb6e39319deb35ab9f18d0b6aa9fa70472539",
      "commit_date": "2022-07-30T07:18:04Z",
      "author": {
        "login": "yagebu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "create tooltip contents in a xss-safe way",
        "length": 41,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 116,
        "additions": 73,
        "deletions": 43
      },
      "files": [
        {
          "filename": "frontend/src/charts/ScatterPlot.svelte",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -10,7 +10,7 @@\n   import { scatterplotScale } from \"./helpers\";\n   import type { ScatterPlotDatum } from \"./scatterplot\";\n   import type { TooltipFindNode } from \"./tooltip\";\n-  import { positionedTooltip } from \"./tooltip\";\n+  import { domHelpers, positionedTooltip } from \"./tooltip\";\n \n   export let data: ScatterPlotDatum[];\n   export let width: number;\n@@ -51,7 +51,7 @@\n   );\n \n   function tooltipText(d: ScatterPlotDatum) {\n-    return `${d.description}<em>${day(d.date)}</em>`;\n+    return [domHelpers.t(d.description), domHelpers.em(day(d.date))];\n   }\n \n   const tooltipFindNode: TooltipFindNode = (xPos, yPos) => {"
        },
        {
          "filename": "frontend/src/charts/Treemap.svelte",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -11,7 +11,7 @@\n     AccountHierarchyDatum,\n     AccountHierarchyNode,\n   } from \"./hierarchy\";\n-  import { followingTooltip } from \"./tooltip\";\n+  import { domHelpers, followingTooltip } from \"./tooltip\";\n \n   export let data: AccountHierarchyNode;\n   export let width: number;\n@@ -35,9 +35,12 @@\n     const val = d.value ?? 0;\n     const rootValue = root.value || 1;\n \n-    return `${$ctx.amount(val, currency)} (${formatPercentage(\n-      val / rootValue\n-    )})<em>${d.data.account}</em>`;\n+    return [\n+      domHelpers.t(\n+        `${$ctx.amount(val, currency)} (${formatPercentage(val / rootValue)})`\n+      ),\n+      domHelpers.em(d.data.account),\n+    ];\n   }\n \n   function setVisibility("
        },
        {
          "filename": "frontend/src/charts/bar.ts",
          "status": "modified",
          "additions": 24,
          "deletions": 11,
          "patch": "@@ -7,6 +7,8 @@ import type { Result } from \"../lib/result\";\n import { array, date, number, object, record } from \"../lib/validation\";\n \n import type { ChartContext } from \"./context\";\n+import type { TooltipContent } from \"./tooltip\";\n+import { domHelpers } from \"./tooltip\";\n \n export interface BarChartDatumValue {\n   currency: string;\n@@ -38,7 +40,11 @@ export interface BarChart {\n     /** Whether this chart contains any stacks (or is just a single account). */\n     hasStackedData: boolean;\n   };\n-  tooltipText: (c: FormatterContext, d: BarChartDatum, e: string) => string;\n+  tooltipText: (\n+    c: FormatterContext,\n+    d: BarChartDatum,\n+    e: string\n+  ) => TooltipContent;\n }\n \n const bar_validator = array(\n@@ -91,24 +97,31 @@ export function bar(\n     type: \"barchart\" as const,\n     data: { accounts, bar_groups, stacks, hasStackedData },\n     tooltipText: (c, d, e) => {\n-      let text = \"\";\n+      const content: TooltipContent = [];\n       if (e === \"\") {\n         d.values.forEach((a) => {\n-          text += c.amount(a.value, a.currency);\n-          if (a.budget) {\n-            text += ` / ${c.amount(a.budget, a.currency)}`;\n-          }\n-          text += \"<br>\";\n+          content.push(\n+            domHelpers.t(\n+              a.budget\n+                ? `${c.amount(a.value, a.currency)} / ${c.amount(\n+                    a.budget,\n+                    a.currency\n+                  )}`\n+                : c.amount(a.value, a.currency)\n+            )\n+          );\n+          content.push(domHelpers.br());\n         });\n       } else {\n-        text += `<em>${e}</em>`;\n+        content.push(domHelpers.em(e));\n         d.values.forEach((a) => {\n           const value = d.account_balances[e]?.[a.currency] ?? 0;\n-          text += `${c.amount(value, a.currency)}<br>`;\n+          content.push(domHelpers.t(`${c.amount(value, a.currency)}`));\n+          content.push(domHelpers.br());\n         });\n       }\n-      text += `<em>${d.label}</em>`;\n-      return text;\n+      content.push(domHelpers.em(d.label));\n+      return content;\n     },\n   });\n }"
        },
        {
          "filename": "frontend/src/charts/context.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 12,
          "patch": "@@ -2,7 +2,7 @@ import type { Readable } from \"svelte/store\";\n import { derived } from \"svelte/store\";\n \n import { currentDateFormat } from \"../format\";\n-import { conversion, operating_currency } from \"../stores\";\n+import { conversion, currencies, operating_currency } from \"../stores\";\n \n export type ChartContext = {\n   currencies: string[];\n@@ -13,17 +13,12 @@ export type ChartContext = {\n  * The list of operating currencies, adding in the current conversion currency.\n  */\n const operatingCurrenciesWithConversion = derived(\n-  [operating_currency, conversion],\n-  ([operating_currency_val, conversion_val]) => {\n-    if (\n-      !conversion_val ||\n-      [\"at_cost\", \"at_value\", \"units\"].includes(conversion_val) ||\n-      operating_currency_val.includes(conversion_val)\n-    ) {\n-      return operating_currency_val;\n-    }\n-    return [...operating_currency_val, conversion_val];\n-  }\n+  [operating_currency, currencies, conversion],\n+  ([operating_currency_val, currencies_val, conversion_val]) =>\n+    currencies_val.includes(conversion_val) &&\n+    !operating_currency_val.includes(conversion_val)\n+      ? [...operating_currency_val, conversion_val]\n+      : operating_currency_val\n );\n \n export const chartContext: Readable<ChartContext> = derived("
        },
        {
          "filename": "frontend/src/charts/line.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -12,6 +12,9 @@ import {\n   tuple,\n } from \"../lib/validation\";\n \n+import type { TooltipContent } from \"./tooltip\";\n+import { domHelpers } from \"./tooltip\";\n+\n export interface LineChartDatum {\n   name: string;\n   date: Date;\n@@ -26,7 +29,7 @@ export type LineChartData = {\n export interface LineChart {\n   type: \"linechart\";\n   data: LineChartData[];\n-  tooltipText: (c: FormatterContext, d: LineChartDatum) => string;\n+  tooltipText: (c: FormatterContext, d: LineChartDatum) => TooltipContent;\n }\n \n const balances_validator = array(object({ date, balance: record(number) }));\n@@ -57,8 +60,10 @@ export function balances(json: unknown): Result<LineChart, string> {\n   return ok({\n     type: \"linechart\" as const,\n     data,\n-    tooltipText: (c, d) =>\n-      `${c.amount(d.value, d.name)}<em>${day(d.date)}</em>`,\n+    tooltipText: (c, d) => [\n+      domHelpers.t(c.amount(d.value, d.name)),\n+      domHelpers.em(day(d.date)),\n+    ],\n   });\n }\n \n@@ -82,8 +87,9 @@ export function commodities(\n   return ok({\n     type: \"linechart\" as const,\n     data: [{ name: label, values }],\n-    tooltipText(c, d) {\n-      return `1 ${base} = ${c.amount(d.value, quote)}<em>${day(d.date)}</em>`;\n-    },\n+    tooltipText: (c, d) => [\n+      domHelpers.t(`1 ${base} = ${c.amount(d.value, quote)}`),\n+      domHelpers.em(day(d.date)),\n+    ],\n   });\n }"
        },
        {
          "filename": "frontend/src/charts/tooltip.ts",
          "status": "modified",
          "additions": 19,
          "deletions": 6,
          "patch": "@@ -19,6 +19,19 @@ const hide = (): void => {\n   t.style.opacity = \"0\";\n };\n \n+/** Some small utilities to create tooltip contents. */\n+export const domHelpers = {\n+  br: () => document.createElement(\"br\"),\n+  em: (content: string) => {\n+    const em = document.createElement(\"em\");\n+    em.textContent = content;\n+    return em;\n+  },\n+  t: (text: string) => document.createTextNode(text),\n+};\n+\n+export type TooltipContent = (HTMLElement | Text)[];\n+\n /**\n  * Svelte action to have the given element act on mouse to show a tooltip.\n  *\n@@ -27,8 +40,8 @@ const hide = (): void => {\n  */\n export function followingTooltip(\n   node: SVGElement,\n-  text: () => string\n-): { destroy: () => void; update: (t: () => string) => void } {\n+  text: () => TooltipContent\n+): { destroy: () => void; update: (t: () => TooltipContent) => void } {\n   let getter = text;\n   /** Event listener to have the tooltip follow the mouse. */\n   function followMouse(event: MouseEvent): void {\n@@ -39,14 +52,14 @@ export function followingTooltip(\n   }\n   node.addEventListener(\"mouseenter\", () => {\n     const t = tooltip();\n-    t.innerHTML = getter();\n+    t.replaceChildren(...getter());\n   });\n   node.addEventListener(\"mousemove\", followMouse);\n   node.addEventListener(\"mouseleave\", hide);\n \n   return {\n     destroy: hide,\n-    update(t: () => string): void {\n+    update(t: () => TooltipContent): void {\n       getter = t;\n     },\n   };\n@@ -56,7 +69,7 @@ export function followingTooltip(\n export type TooltipFindNode = (\n   x: number,\n   y: number\n-) => [number, number, string] | undefined;\n+) => [number, number, TooltipContent] | undefined;\n \n /**\n  * Svelte action to have the given <g> element act on mouse to show a tooltip.\n@@ -78,7 +91,7 @@ export function positionedTooltip(\n       const [x, y, content] = res;\n       const t = tooltip();\n       t.style.opacity = \"1\";\n-      t.innerHTML = content;\n+      t.replaceChildren(...content);\n       t.style.left = `${window.scrollX + x + matrix.e}px`;\n       t.style.top = `${window.scrollY + y + matrix.f - 15}px`;\n     } else {"
        },
        {
          "filename": "frontend/src/keyboard-shortcuts.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@ function showTooltip(target: HTMLElement): () => void {\n     target.classList.remove(\"hidden\");\n   }\n   tooltip.className = \"keyboard-tooltip\";\n-  tooltip.innerHTML = target.getAttribute(\"data-key\") || \"\";\n+  tooltip.textContent = target.getAttribute(\"data-key\") ?? \"\";\n   document.body.appendChild(tooltip);\n   const parentCoords = target.getBoundingClientRect();\n   // Padded 10px to the left if there is space or centered otherwise"
        },
        {
          "filename": "frontend/src/sidebar/index.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -26,7 +26,7 @@ export function initSidebar(): void {\n       errorCountEl.classList.toggle(\"hidden\", errorCount_val === 0);\n       const span = errorCountEl.querySelector(\"span\");\n       if (span) {\n-        span.innerHTML = `${errorCount_val}`;\n+        span.textContent = `${errorCount_val}`;\n       }\n     });\n   }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e71d724a118d848c8136da521798d397b3c214f2",
            "date": "2025-01-06T14:00:15Z",
            "author_login": "yagebu"
          },
          {
            "sha": "3365454e00ce2a58b6a0a575d7ae0e7fea68ce15",
            "date": "2025-01-04T16:58:30Z",
            "author_login": "yagebu"
          },
          {
            "sha": "20621a8b152c82b479a6cff983de1e44521b2f67",
            "date": "2025-01-02T16:25:09Z",
            "author_login": "yagebu"
          },
          {
            "sha": "cde3f06c01bc072a46191ef177a77403b9392430",
            "date": "2025-01-02T15:10:38Z",
            "author_login": "yagebu"
          },
          {
            "sha": "a910c4561cf2bdfcdb3a4458758727dc00446bf1",
            "date": "2025-01-02T13:25:00Z",
            "author_login": "yagebu"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Reflected in GitHub repository beancount/fava prior to 1.22.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-01T15:15:09.583",
    "last_modified": "2024-11-21T07:01:18.370",
    "fix_date": "2022-07-30T07:18:04Z"
  },
  "references": [
    {
      "url": "https://github.com/beancount/fava/commit/68bbb6e39319deb35ab9f18d0b6aa9fa70472539",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8705800d-cf2f-433d-9c3e-dbef6a3f7e08",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/beancount/fava/commit/68bbb6e39319deb35ab9f18d0b6aa9fa70472539",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8705800d-cf2f-433d-9c3e-dbef6a3f7e08",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.184894",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fava",
    "owner": "beancount",
    "created_at": "2015-12-04T15:12:55Z",
    "updated_at": "2025-01-14T06:40:56Z",
    "pushed_at": "2025-01-13T20:56:03Z",
    "size": 14960,
    "stars": 2025,
    "forks": 293,
    "open_issues": 93,
    "watchers": 2025,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 488452,
      "TypeScript": 241454,
      "Svelte": 163446,
      "CSS": 28581,
      "HTML": 19984,
      "JavaScript": 5192,
      "Makefile": 3972,
      "Shell": 1383,
      "Dockerfile": 241
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:01:08.206188"
  }
}