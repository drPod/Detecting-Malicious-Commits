{
  "cve_id": "CVE-2022-25897",
  "github_data": {
    "repository": "eclipse/milo",
    "fix_commit": "4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5",
    "related_commits": [
      "4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5",
      "4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5"
    ],
    "patch_url": "https://github.com/eclipse/milo/commit/4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5.patch",
    "fix_commit_details": {
      "sha": "4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5",
      "commit_date": "2022-08-24T13:14:36Z",
      "author": {
        "login": "kevinherron",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Allow max MonitoredItems per session to be configured via OpcUaServerConfigLimits",
        "length": 81,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 30,
        "additions": 28,
        "deletions": 2
      },
      "files": [
        {
          "filename": "opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/api/config/OpcUaServerConfigLimits.java",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -112,6 +112,15 @@ default UInteger getMaxMonitoredItems() {\n         return uint(Integer.MAX_VALUE);\n     }\n \n+    /**\n+     * Get the maximum number of MonitoredItems, per Session, that can be created.\n+     *\n+     * @return the maximum number of MonitoredItems, per Session, that can be created.\n+     */\n+    default UInteger getMaxMonitoredItemsPerSession() {\n+        return uint(Integer.MAX_VALUE);\n+    }\n+\n     //region ServerCapabilities\n \n     default Double getMinSupportedSampleRate() {"
        },
        {
          "filename": "opc-ua-sdk/sdk-server/src/main/java/org/eclipse/milo/opcua/sdk/server/subscriptions/SubscriptionManager.java",
          "status": "modified",
          "additions": 19,
          "deletions": 2,
          "patch": "@@ -122,6 +122,8 @@ private static UInteger nextSubscriptionId() {\n     private final Map<UInteger, Subscription> subscriptions = Maps.newConcurrentMap();\n     private final List<Subscription> transferred = Lists.newCopyOnWriteArrayList();\n \n+    private final AtomicLong monitoredItemCount = new AtomicLong(0L);\n+\n     private final Session session;\n     private final OpcUaServer server;\n \n@@ -190,6 +192,7 @@ public void createSubscription(ServiceRequest service) {\n                     eventItems -> server.getAddressSpaceManager().onEventItemsDeleted(eventItems)\n                 );\n \n+                monitoredItemCount.getAndUpdate(count -> count - monitoredItems.size());\n                 server.getMonitoredItemCount().getAndUpdate(count -> count - monitoredItems.size());\n \n                 monitoredItems.clear();\n@@ -267,6 +270,7 @@ public void deleteSubscription(ServiceRequest service) throws UaException {\n \n                 results[i] = StatusCode.GOOD;\n \n+                monitoredItemCount.getAndUpdate(count -> count - deletedItems.size());\n                 server.getMonitoredItemCount().getAndUpdate(count -> count - deletedItems.size());\n             } else {\n                 results[i] = new StatusCode(StatusCodes.Bad_SubscriptionIdInvalid);\n@@ -348,13 +352,20 @@ public void createMonitoredItems(ServiceRequest service) throws UaException {\n \n             List<BaseMonitoredItem<?>> monitoredItems = new ArrayList<>();\n \n+            long globalMax = server.getConfig()\n+                .getLimits().getMaxMonitoredItems().longValue();\n+\n+            long sessionMax = server.getConfig()\n+                .getLimits().getMaxMonitoredItemsPerSession().longValue();\n+\n             for (int i = 0; i < itemsToCreate.size(); i++) {\n                 MonitoredItemCreateRequest createRequest = itemsToCreate.get(i);\n \n                 try {\n-                    long maxMonitoredItems = server.getConfig().getLimits().getMaxMonitoredItems().longValue();\n+                    long globalCount = server.getMonitoredItemCount().incrementAndGet();\n+                    long sessionCount = monitoredItemCount.incrementAndGet();\n \n-                    if (server.getMonitoredItemCount().incrementAndGet() <= maxMonitoredItems) {\n+                    if (globalCount <= globalMax && sessionCount <= sessionMax) {\n                         BaseMonitoredItem<?> monitoredItem = createMonitoredItem(\n                             createRequest,\n                             subscription,\n@@ -375,6 +386,7 @@ public void createMonitoredItems(ServiceRequest service) throws UaException {\n                         throw new UaException(StatusCodes.Bad_TooManyMonitoredItems);\n                     }\n                 } catch (UaException e) {\n+                    monitoredItemCount.decrementAndGet();\n                     server.getMonitoredItemCount().decrementAndGet();\n \n                     createResults[i] = new MonitoredItemCreateResult(\n@@ -979,6 +991,7 @@ public void deleteMonitoredItems(ServiceRequest service) throws UaException {\n \n                     deleteResults[i] = StatusCode.GOOD;\n \n+                    monitoredItemCount.decrementAndGet();\n                     server.getMonitoredItemCount().decrementAndGet();\n                 }\n             }\n@@ -1250,6 +1263,7 @@ public void sessionClosed(boolean deleteSubscriptions) {\n                     eventItems -> server.getAddressSpaceManager().onEventItemsDeleted(eventItems)\n                 );\n \n+                monitoredItemCount.getAndUpdate(count -> count - deletedItems.size());\n                 server.getMonitoredItemCount().getAndUpdate(count -> count - deletedItems.size());\n             }\n \n@@ -1293,6 +1307,7 @@ public void addSubscription(Subscription subscription) {\n                     eventItems -> server.getAddressSpaceManager().onEventItemsDeleted(eventItems)\n                 );\n \n+                monitoredItemCount.getAndUpdate(count -> count - monitoredItems.size());\n                 server.getMonitoredItemCount().getAndUpdate(count -> count - monitoredItems.size());\n \n                 monitoredItems.clear();\n@@ -1312,6 +1327,8 @@ public Subscription removeSubscription(UInteger subscriptionId) {\n \n         if (subscription != null) {\n             subscription.setStateListener(null);\n+\n+            monitoredItemCount.getAndUpdate(count -> count - subscription.getMonitoredItems().size());\n         }\n \n         return subscription;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 13
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c6a875c2fa8f65c48815410d6bbf02d43560bcd4",
            "date": "2024-12-04T14:45:33Z",
            "author_login": "kevinherron"
          },
          {
            "sha": "059d54c15f9a11fb32991435f3d524718eb689fe",
            "date": "2024-12-04T14:45:10Z",
            "author_login": "kevinherron"
          },
          {
            "sha": "96e2994a2a418c90e124d72d3c29721c82ed0769",
            "date": "2024-12-03T21:18:14Z",
            "author_login": "eclipse-milo-bot"
          },
          {
            "sha": "3d342a9b835560f39b2eaceeb4a51ec97f2ab615",
            "date": "2024-12-03T21:18:12Z",
            "author_login": "eclipse-milo-bot"
          },
          {
            "sha": "5e413f58ea75410ad4b4b7a302fea17239c72178",
            "date": "2024-11-29T02:24:04Z",
            "author_login": "kevinherron"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "The package org.eclipse.milo:sdk-server before 0.6.8 are vulnerable to Denial of Service (DoS) when bypassing the limitations for excessive memory consumption by sending multiple CloseSession requests with the deleteSubscription parameter equal to False.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-08T05:15:07.410",
    "last_modified": "2024-11-21T06:53:11.030",
    "fix_date": "2022-08-24T13:14:36Z"
  },
  "references": [
    {
      "url": "https://github.com/eclipse/milo/commit/4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/milo/issues/1030",
      "source": "report@snyk.io",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/milo/pull/1031",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGECLIPSEMILO-2990191",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/milo/commit/4534381760d7d9f0bf00cbf6a8449bb0d13c6ce5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/milo/issues/1030",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/milo/pull/1031",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGECLIPSEMILO-2990191",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.091211",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "milo",
    "owner": "eclipse",
    "created_at": "2016-05-06T13:20:04Z",
    "updated_at": "2025-01-14T03:13:05Z",
    "pushed_at": "2025-01-09T19:43:12Z",
    "size": 19646,
    "stars": 1195,
    "forks": 439,
    "open_issues": 4,
    "watchers": 1195,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 12828615,
      "HTML": 9013
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "epl-2.0"
    },
    "collected_at": "2025-01-14T21:53:57.647346"
  }
}