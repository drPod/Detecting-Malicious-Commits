{
  "cve_id": "CVE-2022-25912",
  "github_data": {
    "repository": "steveukx/git-js",
    "fix_commit": "774648049eb3e628379e292ea172dccaba610504",
    "related_commits": [
      "774648049eb3e628379e292ea172dccaba610504",
      "774648049eb3e628379e292ea172dccaba610504"
    ],
    "patch_url": "https://github.com/steveukx/git-js/commit/774648049eb3e628379e292ea172dccaba610504.patch",
    "fix_commit_details": {
      "sha": "774648049eb3e628379e292ea172dccaba610504",
      "commit_date": "2022-11-12T13:46:07Z",
      "author": {
        "login": "steveukx",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Chore: bump lerna, jest and create prettier workflow (#862)",
        "length": 137,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 3017,
        "additions": 1586,
        "deletions": 1431
      },
      "files": [
        {
          "filename": ".changeset/poor-tools-doubt.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'simple-git': minor\n+---\n+\n+Disables the use of inline configuration arguments to prevent unitentionally allowing non-standard remote protocols without explicitly opting in to this practice with the new `allowUnsafeProtocolOverride` property having been enabled."
        },
        {
          "filename": ".changeset/skip-hop-jump.md",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+---\n+'simple-git': patch\n+---\n+\n+- Upgrade repo dependencies - lerna and jest\n+- Include node@19 in the test matrix"
        },
        {
          "filename": ".github/FUNDING.yml",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1,7 +1,6 @@\n # These are supported funding model platforms\n \n github: [steveukx]\n-\n # patreon: # Replace with a single Patreon username\n # open_collective: # Replace with a single Open Collective username\n # ko_fi: # Replace with a single Ko-fi username"
        },
        {
          "filename": ".github/delete-merged-branch-config.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,3 +1,3 @@\n exclude:\n-   -  changeset-release/*\n+   - changeset-release/*\n delete_closed_pr: false"
        },
        {
          "filename": ".github/dependabot.yml",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1,6 +1,6 @@\n version: 2\n updates:\n-- package-ecosystem: \"github-actions\"\n-  directory: \"/\"\n-  schedule:\n-      interval: \"weekly\"\n+   - package-ecosystem: 'github-actions'\n+     directory: '/'\n+     schedule:\n+        interval: 'weekly'"
        },
        {
          "filename": ".github/workflows/changesets.yml",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -9,21 +9,21 @@ jobs:\n    release:\n       runs-on: ubuntu-latest\n       steps:\n-        -  name: Checkout Repo\n+         - name: Checkout Repo\n            uses: actions/checkout@v3\n            with:\n-             fetch-depth: 0\n+              fetch-depth: 0\n \n-        -  uses: actions/setup-node@v3\n+         - uses: actions/setup-node@v3\n            with:\n-               node-version: 16\n+              node-version: 18\n \n-        -  run: yarn --frozen-lockfile\n-        -  run: yarn build\n+         - run: yarn --frozen-lockfile\n+         - run: yarn build\n \n-        -  uses: changesets/action@v1\n+         - uses: changesets/action@v1\n            with:\n               publish: yarn changeset publish\n            env:\n-               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n-               NPM_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}\n+              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+              NPM_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}"
        },
        {
          "filename": ".github/workflows/ci.yml",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -2,32 +2,32 @@ name: CI\n \n on:\n    push:\n-      branches: [ main ]\n+      branches: [main]\n    pull_request:\n-      branches: [ main ]\n+      branches: [main]\n \n permissions:\n-  contents: read\n+   contents: read\n \n jobs:\n    build:\n       runs-on: ubuntu-latest\n       strategy:\n          matrix:\n-            node-version: [14, 16, 18]\n+            node-version: [14, 16, 18, 19]\n       steps:\n          - uses: actions/checkout@v3\n          - name: Use Node.js ${{ matrix.node-version }}\n            uses: actions/setup-node@v3\n            with:\n-             node-version: ${{ matrix.node-version }}\n-             cache: yarn\n+              node-version: ${{ matrix.node-version }}\n+              cache: yarn\n          - run: node --version\n          - run: git --version\n          - run: yarn install --frozen-lockfile\n          - run: yarn build\n          - name: Test\n            env:\n-              GIT_AUTHOR_NAME: \"Simple Git Tests\"\n-              GIT_AUTHOR_EMAIL: \"tests@simple-git.dev\"\n+              GIT_AUTHOR_NAME: 'Simple Git Tests'\n+              GIT_AUTHOR_EMAIL: 'tests@simple-git.dev'\n            run: yarn test"
        },
        {
          "filename": ".github/workflows/quality.yml",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+name: Lint\n+\n+on:\n+   push:\n+      branches: [main]\n+   pull_request:\n+      branches: [main]\n+\n+permissions:\n+   contents: read\n+\n+jobs:\n+   lint:\n+      runs-on: ubuntu-latest\n+      steps:\n+         - uses: actions/checkout@v3\n+         - name: Use Node.js\n+           uses: actions/setup-node@v3\n+           with:\n+              node-version: 18\n+              cache: yarn\n+         - run: yarn install --frozen-lockfile\n+         - run: yarn prettier --check ."
        },
        {
          "filename": ".prettierignore",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1,3 +1,5 @@\n-node_modules\n+*.md\n+.changeset\n dist\n-CHANGELOG.md\n+coverage\n+node_modules"
        },
        {
          "filename": "lerna.json",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -6,10 +6,7 @@\n       \"license\": \"MIT\"\n     }\n   },\n-  \"ignoreChanges\": [\n-    \"**/test/**\",\n-    \"**/*.md\"\n-  ],\n+  \"ignoreChanges\": [\"**/test/**\", \"**/*.md\"],\n   \"useWorkspaces\": true,\n   \"version\": \"2.48.0\"\n }"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -17,7 +17,7 @@\n   \"dependencies\": {\n     \"@changesets/changelog-github\": \"^0.4.2\",\n     \"@changesets/cli\": \"^2.20.0\",\n-    \"lerna\": \"^5.5.1\",\n+    \"lerna\": \"^6.0.3\",\n     \"prettier\": \"^2.7.1\"\n   }\n }"
        },
        {
          "filename": "packages/babel-config/babel.config.js",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1,9 +1,9 @@\n const { resolve } = require('path');\n const { existsSync } = require('fs');\n \n-function resolver() {\n+function resolver(resolveToDist) {\n    const root = resolve(__dirname, '../..', 'simple-git');\n-   const dist = resolve(root, 'dist', 'cjs');\n+   const dist = resolveToDist ? resolve(root, 'dist', 'cjs') : root;\n \n    const pkg = existsSync(dist) ? dist : root;\n \n@@ -19,7 +19,7 @@ function resolver() {\n    ];\n }\n \n-module.exports = function (resolve = false) {\n+module.exports = function (resolveToDist = false) {\n    return {\n       presets: [\n          [\n@@ -32,6 +32,6 @@ module.exports = function (resolve = false) {\n          ],\n          '@babel/preset-typescript',\n       ],\n-      plugins: resolve ? [resolver()] : [],\n+      plugins: [resolver(resolveToDist)],\n    };\n };"
        },
        {
          "filename": "packages/test-utils/src/expectations.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-import { GitError, GitResponseError } from \"simple-git\";\n+import { GitError, GitResponseError } from 'simple-git';\n \n /**\n  * Convenience for asserting the type and message of a `GitError`"
        },
        {
          "filename": "simple-git/package.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -23,11 +23,11 @@\n     \"@simple-git/babel-config\": \"^1.0.0\",\n     \"@simple-git/test-utils\": \"^2.0.0\",\n     \"@types/debug\": \"^4.1.5\",\n-    \"@types/jest\": \"^27.0.3\",\n+    \"@types/jest\": \"^29.2.2\",\n     \"@types/node\": \"^16\",\n     \"esbuild\": \"^0.14.10\",\n     \"esbuild-node-externals\": \"^1.4.1\",\n-    \"jest\": \"^27.4.5\",\n+    \"jest\": \"^29.3.1\",\n     \"ts-node\": \"^9.0.0\",\n     \"typescript\": \"^4.1.2\"\n   },"
        },
        {
          "filename": "simple-git/src/git.js",
          "status": "modified",
          "additions": 53,
          "deletions": 53,
          "patch": "@@ -69,7 +69,7 @@ function Git(options, plugins) {\n  * @param {string} command\n  * @returns {Git}\n  */\n-Git.prototype.customBinary = function(command) {\n+Git.prototype.customBinary = function (command) {\n    this._executor.binary = command;\n    return this;\n };\n@@ -82,7 +82,7 @@ Git.prototype.customBinary = function(command) {\n  * @param {string} [value]\n  * @returns {Git}\n  */\n-Git.prototype.env = function(name, value) {\n+Git.prototype.env = function (name, value) {\n    if (arguments.length === 1 && typeof name === 'object') {\n       this._executor.env = name;\n    } else {\n@@ -95,7 +95,7 @@ Git.prototype.env = function(name, value) {\n /**\n  * List the stash(s) of the local repo\n  */\n-Git.prototype.stashList = function(options) {\n+Git.prototype.stashList = function (options) {\n    return this._runTask(\n       stashListTask(\n          trailingOptionsArgument(arguments) || {},\n@@ -116,7 +116,7 @@ function createCloneTask(api, task, repoPath, localPath) {\n /**\n  * Clone a git repo\n  */\n-Git.prototype.clone = function() {\n+Git.prototype.clone = function () {\n    return this._runTask(\n       createCloneTask('clone', cloneTask, ...arguments),\n       trailingFunctionArgument(arguments)\n@@ -126,7 +126,7 @@ Git.prototype.clone = function() {\n /**\n  * Mirror a git repo\n  */\n-Git.prototype.mirror = function() {\n+Git.prototype.mirror = function () {\n    return this._runTask(\n       createCloneTask('mirror', cloneMirrorTask, ...arguments),\n       trailingFunctionArgument(arguments)\n@@ -141,7 +141,7 @@ Git.prototype.mirror = function() {\n  * @param {string|string[]} from\n  * @param {string} to\n  */\n-Git.prototype.mv = function(from, to) {\n+Git.prototype.mv = function (from, to) {\n    return this._runTask(moveTask(from, to), trailingFunctionArgument(arguments));\n };\n \n@@ -150,10 +150,10 @@ Git.prototype.mv = function(from, to) {\n  *\n  * @param {Function} [then]\n  */\n-Git.prototype.checkoutLatestTag = function(then) {\n+Git.prototype.checkoutLatestTag = function (then) {\n    var git = this;\n-   return this.pull(function() {\n-      git.tags(function(err, tags) {\n+   return this.pull(function () {\n+      git.tags(function (err, tags) {\n          git.checkout(tags.latest, then);\n       });\n    });\n@@ -162,7 +162,7 @@ Git.prototype.checkoutLatestTag = function(then) {\n /**\n  * Pull the updated contents of the current repo\n  */\n-Git.prototype.pull = function(remote, branch, options, then) {\n+Git.prototype.pull = function (remote, branch, options, then) {\n    return this._runTask(\n       pullTask(\n          filterType(remote, filterString),\n@@ -183,7 +183,7 @@ Git.prototype.pull = function(remote, branch, options, then) {\n  * @param {string} [remote]\n  * @param {string} [branch]\n  */\n-Git.prototype.fetch = function(remote, branch) {\n+Git.prototype.fetch = function (remote, branch) {\n    return this._runTask(\n       fetchTask(\n          filterType(remote, filterString),\n@@ -201,7 +201,7 @@ Git.prototype.fetch = function(remote, branch) {\n  * @param {boolean} silence\n  * @returns {Git}\n  */\n-Git.prototype.silent = function(silence) {\n+Git.prototype.silent = function (silence) {\n    console.warn(\n       'simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3'\n    );\n@@ -217,7 +217,7 @@ Git.prototype.silent = function(silence) {\n  * @param {Object} [options]\n  * @param {Function} [then]\n  */\n-Git.prototype.tags = function(options, then) {\n+Git.prototype.tags = function (options, then) {\n    return this._runTask(\n       tagListTask(getTrailingOptions(arguments)),\n       trailingFunctionArgument(arguments)\n@@ -228,7 +228,7 @@ Git.prototype.tags = function(options, then) {\n  * Rebases the current working copy. Options can be supplied either as an array of string parameters\n  * to be sent to the `git rebase` command, or a standard options object.\n  */\n-Git.prototype.rebase = function() {\n+Git.prototype.rebase = function () {\n    return this._runTask(\n       straightThroughStringTask(['rebase', ...getTrailingOptions(arguments)]),\n       trailingFunctionArgument(arguments)\n@@ -238,7 +238,7 @@ Git.prototype.rebase = function() {\n /**\n  * Reset a repo\n  */\n-Git.prototype.reset = function(mode) {\n+Git.prototype.reset = function (mode) {\n    return this._runTask(\n       resetTask(getResetMode(mode), getTrailingOptions(arguments)),\n       trailingFunctionArgument(arguments)\n@@ -248,7 +248,7 @@ Git.prototype.reset = function(mode) {\n /**\n  * Revert one or more commits in the local working copy\n  */\n-Git.prototype.revert = function(commit) {\n+Git.prototype.revert = function (commit) {\n    const next = trailingFunctionArgument(arguments);\n \n    if (typeof commit !== 'string') {\n@@ -264,7 +264,7 @@ Git.prototype.revert = function(commit) {\n /**\n  * Add a lightweight tag to the head of the current branch\n  */\n-Git.prototype.addTag = function(name) {\n+Git.prototype.addTag = function (name) {\n    const task =\n       typeof name === 'string'\n          ? addTagTask(name)\n@@ -276,7 +276,7 @@ Git.prototype.addTag = function(name) {\n /**\n  * Add an annotated tag to the head of the current branch\n  */\n-Git.prototype.addAnnotatedTag = function(tagName, tagMessage) {\n+Git.prototype.addAnnotatedTag = function (tagName, tagMessage) {\n    return this._runTask(\n       addAnnotatedTagTask(tagName, tagMessage),\n       trailingFunctionArgument(arguments)\n@@ -287,7 +287,7 @@ Git.prototype.addAnnotatedTag = function(tagName, tagMessage) {\n  * Check out a tag or revision, any number of additional arguments can be passed to the `git checkout` command\n  * by supplying either a string or array of strings as the first argument.\n  */\n-Git.prototype.checkout = function() {\n+Git.prototype.checkout = function () {\n    const commands = ['checkout', ...getTrailingOptions(arguments, true)];\n    return this._runTask(straightThroughStringTask(commands), trailingFunctionArgument(arguments));\n };\n@@ -299,21 +299,21 @@ Git.prototype.checkout = function() {\n  * @param {string} startPoint (e.g origin/development)\n  * @param {Function} [then]\n  */\n-Git.prototype.checkoutBranch = function(branchName, startPoint, then) {\n+Git.prototype.checkoutBranch = function (branchName, startPoint, then) {\n    return this.checkout(['-b', branchName, startPoint], trailingFunctionArgument(arguments));\n };\n \n /**\n  * Check out a local branch\n  */\n-Git.prototype.checkoutLocalBranch = function(branchName, then) {\n+Git.prototype.checkoutLocalBranch = function (branchName, then) {\n    return this.checkout(['-b', branchName], trailingFunctionArgument(arguments));\n };\n \n /**\n  * Delete a local branch\n  */\n-Git.prototype.deleteLocalBranch = function(branchName, forceDelete, then) {\n+Git.prototype.deleteLocalBranch = function (branchName, forceDelete, then) {\n    return this._runTask(\n       deleteBranchTask(branchName, typeof forceDelete === 'boolean' ? forceDelete : false),\n       trailingFunctionArgument(arguments)\n@@ -323,7 +323,7 @@ Git.prototype.deleteLocalBranch = function(branchName, forceDelete, then) {\n /**\n  * Delete one or more local branches\n  */\n-Git.prototype.deleteLocalBranches = function(branchNames, forceDelete, then) {\n+Git.prototype.deleteLocalBranches = function (branchNames, forceDelete, then) {\n    return this._runTask(\n       deleteBranchesTask(branchNames, typeof forceDelete === 'boolean' ? forceDelete : false),\n       trailingFunctionArgument(arguments)\n@@ -336,7 +336,7 @@ Git.prototype.deleteLocalBranches = function(branchNames, forceDelete, then) {\n  * @param {Object | string[]} [options]\n  * @param {Function} [then]\n  */\n-Git.prototype.branch = function(options, then) {\n+Git.prototype.branch = function (options, then) {\n    return this._runTask(\n       branchTask(getTrailingOptions(arguments)),\n       trailingFunctionArgument(arguments)\n@@ -348,14 +348,14 @@ Git.prototype.branch = function(options, then) {\n  *\n  * @param {Function} [then]\n  */\n-Git.prototype.branchLocal = function(then) {\n+Git.prototype.branchLocal = function (then) {\n    return this._runTask(branchLocalTask(), trailingFunctionArgument(arguments));\n };\n \n /**\n  * Executes any command against the git binary.\n  */\n-Git.prototype.raw = function(commands) {\n+Git.prototype.raw = function (commands) {\n    const createRestCommands = !Array.isArray(commands);\n    const command = [].slice.call(createRestCommands ? arguments : commands, 0);\n \n@@ -380,32 +380,32 @@ Git.prototype.raw = function(commands) {\n    return this._runTask(straightThroughStringTask(command, this._trimmed), next);\n };\n \n-Git.prototype.submoduleAdd = function(repo, path, then) {\n+Git.prototype.submoduleAdd = function (repo, path, then) {\n    return this._runTask(addSubModuleTask(repo, path), trailingFunctionArgument(arguments));\n };\n \n-Git.prototype.submoduleUpdate = function(args, then) {\n+Git.prototype.submoduleUpdate = function (args, then) {\n    return this._runTask(\n       updateSubModuleTask(getTrailingOptions(arguments, true)),\n       trailingFunctionArgument(arguments)\n    );\n };\n \n-Git.prototype.submoduleInit = function(args, then) {\n+Git.prototype.submoduleInit = function (args, then) {\n    return this._runTask(\n       initSubModuleTask(getTrailingOptions(arguments, true)),\n       trailingFunctionArgument(arguments)\n    );\n };\n \n-Git.prototype.subModule = function(options, then) {\n+Git.prototype.subModule = function (options, then) {\n    return this._runTask(\n       subModuleTask(getTrailingOptions(arguments)),\n       trailingFunctionArgument(arguments)\n    );\n };\n \n-Git.prototype.listRemote = function() {\n+Git.prototype.listRemote = function () {\n    return this._runTask(\n       listRemotesTask(getTrailingOptions(arguments)),\n       trailingFunctionArgument(arguments)\n@@ -415,7 +415,7 @@ Git.prototype.listRemote = function() {\n /**\n  * Adds a remote to the list of remotes.\n  */\n-Git.prototype.addRemote = function(remoteName, remoteRepo, then) {\n+Git.prototype.addRemote = function (remoteName, remoteRepo, then) {\n    return this._runTask(\n       addRemoteTask(remoteName, remoteRepo, getTrailingOptions(arguments)),\n       trailingFunctionArgument(arguments)\n@@ -425,15 +425,15 @@ Git.prototype.addRemote = function(remoteName, remoteRepo, then) {\n /**\n  * Removes an entry by name from the list of remotes.\n  */\n-Git.prototype.removeRemote = function(remoteName, then) {\n+Git.prototype.removeRemote = function (remoteName, then) {\n    return this._runTask(removeRemoteTask(remoteName), trailingFunctionArgument(arguments));\n };\n \n /**\n  * Gets the currently available remotes, setting the optional verbose argument to true includes additional\n  * detail on the remotes themselves.\n  */\n-Git.prototype.getRemotes = function(verbose, then) {\n+Git.prototype.getRemotes = function (verbose, then) {\n    return this._runTask(getRemotesTask(verbose === true), trailingFunctionArgument(arguments));\n };\n \n@@ -443,7 +443,7 @@ Git.prototype.getRemotes = function(verbose, then) {\n  * @param {string[]} options\n  * @param {Function} [then]\n  */\n-Git.prototype.remote = function(options, then) {\n+Git.prototype.remote = function (options, then) {\n    return this._runTask(\n       remoteTask(getTrailingOptions(arguments)),\n       trailingFunctionArgument(arguments)\n@@ -456,7 +456,7 @@ Git.prototype.remote = function(options, then) {\n  * @param {string[]} options\n  * @param {Function} [then]\n  */\n-Git.prototype.tag = function(options, then) {\n+Git.prototype.tag = function (options, then) {\n    const command = getTrailingOptions(arguments);\n \n    if (command[0] !== 'tag') {\n@@ -471,7 +471,7 @@ Git.prototype.tag = function(options, then) {\n  *\n  * @param {Function} [then]\n  */\n-Git.prototype.updateServerInfo = function(then) {\n+Git.prototype.updateServerInfo = function (then) {\n    return this._runTask(\n       straightThroughStringTask(['update-server-info']),\n       trailingFunctionArgument(arguments)\n@@ -485,7 +485,7 @@ Git.prototype.updateServerInfo = function(then) {\n  * @param {string} [remote]\n  * @param {Function} [then]\n  */\n-Git.prototype.pushTags = function(remote, then) {\n+Git.prototype.pushTags = function (remote, then) {\n    const task = pushTagsTask(\n       { remote: filterType(remote, filterString) },\n       getTrailingOptions(arguments)\n@@ -497,7 +497,7 @@ Git.prototype.pushTags = function(remote, then) {\n /**\n  * Removes the named files from source control.\n  */\n-Git.prototype.rm = function(files) {\n+Git.prototype.rm = function (files) {\n    return this._runTask(\n       straightThroughStringTask(['rm', '-f', ...asArray(files)]),\n       trailingFunctionArgument(arguments)\n@@ -510,7 +510,7 @@ Git.prototype.rm = function(files) {\n  *\n  * @param {string|string[]} files\n  */\n-Git.prototype.rmKeepLocal = function(files) {\n+Git.prototype.rmKeepLocal = function (files) {\n    return this._runTask(\n       straightThroughStringTask(['rm', '--cached', ...asArray(files)]),\n       trailingFunctionArgument(arguments)\n@@ -526,15 +526,15 @@ Git.prototype.rmKeepLocal = function(files) {\n  * @param {string[]} [options]\n  * @param {Function} [then]\n  */\n-Git.prototype.catFile = function(options, then) {\n+Git.prototype.catFile = function (options, then) {\n    return this._catFile('utf-8', arguments);\n };\n \n-Git.prototype.binaryCatFile = function() {\n+Git.prototype.binaryCatFile = function () {\n    return this._catFile('buffer', arguments);\n };\n \n-Git.prototype._catFile = function(format, args) {\n+Git.prototype._catFile = function (format, args) {\n    var handler = trailingFunctionArgument(args);\n    var command = ['cat-file'];\n    var options = args[0];\n@@ -556,7 +556,7 @@ Git.prototype._catFile = function(format, args) {\n    return this._runTask(task, handler);\n };\n \n-Git.prototype.diff = function(options, then) {\n+Git.prototype.diff = function (options, then) {\n    const task = filterString(options)\n       ? configurationErrorTask(\n            'git.diff: supplying options as a single string is no longer supported, switch to an array of strings'\n@@ -566,14 +566,14 @@ Git.prototype.diff = function(options, then) {\n    return this._runTask(task, trailingFunctionArgument(arguments));\n };\n \n-Git.prototype.diffSummary = function() {\n+Git.prototype.diffSummary = function () {\n    return this._runTask(\n       diffSummaryTask(getTrailingOptions(arguments, 1)),\n       trailingFunctionArgument(arguments)\n    );\n };\n \n-Git.prototype.applyPatch = function(patches) {\n+Git.prototype.applyPatch = function (patches) {\n    const task = !filterStringOrStringArray(patches)\n       ? configurationErrorTask(\n            `git.applyPatch requires one or more string patches as the first argument`\n@@ -583,7 +583,7 @@ Git.prototype.applyPatch = function(patches) {\n    return this._runTask(task, trailingFunctionArgument(arguments));\n };\n \n-Git.prototype.revparse = function() {\n+Git.prototype.revparse = function () {\n    const commands = ['rev-parse', ...getTrailingOptions(arguments, true)];\n    return this._runTask(\n       straightThroughStringTask(commands, true),\n@@ -597,7 +597,7 @@ Git.prototype.revparse = function() {\n  * @param {string[]} [options]\n  * @param {Function} [then]\n  */\n-Git.prototype.show = function(options, then) {\n+Git.prototype.show = function (options, then) {\n    return this._runTask(\n       straightThroughStringTask(['show', ...getTrailingOptions(arguments, 1)]),\n       trailingFunctionArgument(arguments)\n@@ -606,7 +606,7 @@ Git.prototype.show = function(options, then) {\n \n /**\n  */\n-Git.prototype.clean = function(mode, options, then) {\n+Git.prototype.clean = function (mode, options, then) {\n    const usingCleanOptionsArray = isCleanOptionsArray(mode);\n    const cleanMode =\n       (usingCleanOptionsArray && mode.join('')) || filterType(mode, filterString) || '';\n@@ -618,7 +618,7 @@ Git.prototype.clean = function(mode, options, then) {\n    );\n };\n \n-Git.prototype.exec = function(then) {\n+Git.prototype.exec = function (then) {\n    const task = {\n       commands: [],\n       format: 'utf-8',\n@@ -637,7 +637,7 @@ Git.prototype.exec = function(then) {\n  *\n  * @returns {Git}\n  */\n-Git.prototype.clearQueue = function() {\n+Git.prototype.clearQueue = function () {\n    // TODO:\n    // this._executor.clear();\n    return this;\n@@ -649,14 +649,14 @@ Git.prototype.clearQueue = function() {\n  * @param {string|string[]} pathnames\n  * @param {Function} [then]\n  */\n-Git.prototype.checkIgnore = function(pathnames, then) {\n+Git.prototype.checkIgnore = function (pathnames, then) {\n    return this._runTask(\n       checkIgnoreTask(asArray(filterType(pathnames, filterStringOrStringArray, []))),\n       trailingFunctionArgument(arguments)\n    );\n };\n \n-Git.prototype.checkIsRepo = function(checkType, then) {\n+Git.prototype.checkIsRepo = function (checkType, then) {\n    return this._runTask(\n       checkIsRepoTask(filterType(checkType, filterString)),\n       trailingFunctionArgument(arguments)"
        },
        {
          "filename": "simple-git/src/lib/plugins/timout-plugin.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,6 +1,6 @@\n-import { SimpleGitOptions } from '../types';\n+import type { SimpleGitPlugin } from './simple-git-plugin';\n \n-import { SimpleGitPlugin } from './simple-git-plugin';\n+import type { SimpleGitOptions } from '../types';\n import { GitPluginError } from '../errors/git-plugin-error';\n \n export function timeoutPlugin({"
        },
        {
          "filename": "simple-git/test/integration/broken-chains.spec.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -1,6 +1,11 @@\n-import { isPromiseFailure, promiseError, promiseResult } from \"@kwsites/promise-result\";\n-import { assertGitError, createTestContext, newSimpleGit, SimpleGitTestContext } from \"@simple-git/test-utils\";\n-import { SimpleGit } from \"../../typings\";\n+import { isPromiseFailure, promiseError, promiseResult } from '@kwsites/promise-result';\n+import {\n+   assertGitError,\n+   createTestContext,\n+   newSimpleGit,\n+   SimpleGitTestContext,\n+} from '@simple-git/test-utils';\n+import { SimpleGit } from '../../typings';\n \n /*\n    The broken chains test assures the behaviour of both standard and Promise wrapped versions"
        },
        {
          "filename": "simple-git/test/integration/plugin.abort.spec.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -32,16 +32,16 @@ describe('timeout', () => {\n \n       const repos = await Promise.all('abcdef'.split('').map((p) => context.dir(p)));\n \n-      await Promise.all(\n-         repos.map((baseDir) => {\n-            const git = newSimpleGit({ baseDir, abort });\n-            if (baseDir.endsWith('a')) {\n-               return promiseError(git.init().then(() => controller.abort()));\n-            }\n-\n-            return promiseError(git.clone(upstream, baseDir));\n-         })\n-      );\n+      repos.map((baseDir) => {\n+         const git = newSimpleGit({ baseDir, abort });\n+         if (baseDir.endsWith('a')) {\n+            return promiseError(git.init());\n+         }\n+         return promiseError(git.clone(upstream, baseDir));\n+      });\n+\n+      await wait(0);\n+      controller.abort();\n \n       const results = await Promise.all(\n          repos.map((baseDir) => newSimpleGit(baseDir).checkIsRepo())"
        },
        {
          "filename": "yarn.lock",
          "status": "modified",
          "additions": 1444,
          "deletions": 1326,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 10,
        "dependency_files": 2,
        "test_files": 3,
        "unique_directories": 10,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "95c556f3c13cb21061025bdb37c3af197a28c0e9",
            "date": "2024-09-19T12:32:05Z",
            "author_login": "steveukx"
          },
          {
            "sha": "4a6126b3474897f82d355b40df96f81462da7127",
            "date": "2024-09-19T12:14:12Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "52f767b6a66a2fab6ed2e5085615a6b0b2f9d4a3",
            "date": "2024-09-19T12:13:33Z",
            "author_login": "steveukx"
          },
          {
            "sha": "03e1c64e36bd6aa2622a3a05defe18806af82cbf",
            "date": "2024-09-15T12:32:47Z",
            "author_login": "steveukx"
          },
          {
            "sha": "739b0d9b931de0b25f0086a765bb84943868e3c5",
            "date": "2024-09-15T11:25:44Z",
            "author_login": "steveukx"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "The package simple-git before 3.15.0 are vulnerable to Remote Code Execution (RCE) when enabling the ext transport protocol, which makes it exploitable via clone() method. This vulnerability exists due to an incomplete fix of [CVE-2022-24066](https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-2434306).",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-12-06T05:15:11.570",
    "last_modified": "2024-11-21T06:53:12.270",
    "fix_date": "2022-11-12T13:46:07Z"
  },
  "references": [
    {
      "url": "https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-UNSAFE-ACTIONS.md%23overriding-allowed-protocols",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/steveukx/git-js/commit/774648049eb3e628379e292ea172dccaba610504",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/steveukx/git-js/releases/tag/simple-git%403.15.0",
      "source": "report@snyk.io",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3153532",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-3112221",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-UNSAFE-ACTIONS.md%23overriding-allowed-protocols",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/steveukx/git-js/commit/774648049eb3e628379e292ea172dccaba610504",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/steveukx/git-js/releases/tag/simple-git%403.15.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3153532",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-3112221",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.204884",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "git-js",
    "owner": "steveukx",
    "created_at": "2013-08-03T04:48:11Z",
    "updated_at": "2025-01-13T06:08:02Z",
    "pushed_at": "2024-12-31T15:08:15Z",
    "size": 5505,
    "stars": 3567,
    "forks": 320,
    "open_issues": 61,
    "watchers": 3567,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 473735,
      "JavaScript": 24594
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:57:57.967003"
  }
}