{
  "cve_id": "CVE-2022-25948",
  "github_data": {
    "repository": "harttle/liquidjs",
    "fix_commit": "7e99efc5131e20cf3f59e1fc2c371a15aa4109db",
    "related_commits": [
      "7e99efc5131e20cf3f59e1fc2c371a15aa4109db",
      "7eb621601c2b05d6e379e5ce42219f2b1f556208",
      "7e99efc5131e20cf3f59e1fc2c371a15aa4109db",
      "7eb621601c2b05d6e379e5ce42219f2b1f556208"
    ],
    "patch_url": "https://github.com/harttle/liquidjs/commit/7e99efc5131e20cf3f59e1fc2c371a15aa4109db.patch",
    "fix_commit_details": {
      "sha": "7e99efc5131e20cf3f59e1fc2c371a15aa4109db",
      "commit_date": "2022-01-28T17:07:42Z",
      "author": {
        "login": "harttle",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: `ownPropertyOnly` option to protect prototype, #454",
        "length": 57,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 102,
        "additions": 93,
        "deletions": 9
      },
      "files": [
        {
          "filename": "docs/source/tutorials/options.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -128,6 +128,8 @@ it defaults to false.  For example, when set to true, a blank string would evalu\n \n **lenientIf** modifies the behavior of `strictVariables` to allow handling optional variables. If set to `true`, an undefined variable will *not* cause an exception in the following two situations: a) it is the condition to an `if`, `elsif`, or `unless` tag; b) it occurs right before a `default` filter. Irrelevant if `strictVariables` is not set. Defaults to `false`.\n \n+**ownPropertyOnly** hides scope variables from prototypes, useful when you're passing a not sanitized object into LiquidJS or need to hide prototypes from templates. Defaults to `false`.\n+\n {% note info Non-existent Tags %}\n Non-existent tags always throw errors during parsing and this behavior can not be customized.\n {% endnote %}"
        },
        {
          "filename": "docs/source/zh-cn/tutorials/options.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -125,6 +125,8 @@ LiquidJS \u628a\u8fd9\u4e2a\u9009\u9879\u9ed8\u8ba4\u503c\u8bbe\u4e3a <code>true</code> \u4ee5\u517c\u5bb9\u4e8e shopify/l\n \n **strictVariables** \u7528\u6765\u542f\u7528\u53d8\u91cf\u4e25\u683c\u6a21\u5f0f\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a `true` \u53d8\u91cf\u4e0d\u5b58\u5728\u65f6\u6e32\u67d3\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u9ed8\u8ba4\u4e3a `false` \u8fd9\u65f6\u4e0d\u5b58\u5728\u7684\u53d8\u91cf\u4f1a\u88ab\u6e32\u67d3\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002\n \n+**ownPropertyOnly** \u7528\u6765\u9690\u85cf\u539f\u578b\u4e0a\u7684\u53d8\u91cf\uff0c\u5982\u679c\u4f60\u9700\u8981\u628a\u672a\u7ecf\u5904\u7406\u8fc7\u7684\u5bf9\u8c61\u4f20\u9012\u7ed9\u6a21\u677f\u65f6\uff0c\u53ef\u4ee5\u8bbe\u7f6e `ownPropertyOnly` \u4e3a `true`\uff0c\u9ed8\u8ba4\u4e3a `false`\u3002\n+\n {% note info \u4e0d\u5b58\u5728\u7684\u6807\u7b7e %}\n \u4e0d\u5b58\u5728\u7684\u6807\u7b7e\u603b\u662f\u4f1a\u629b\u51fa\u4e00\u4e2a\u89e3\u6790\u5f02\u5e38\uff0c\u8fd9\u4e00\u884c\u4e3a\u65e0\u6cd5\u81ea\u5b9a\u4e49\u3002\n {% endnote %}"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@\n   \"types\": \"dist/liquid.d.ts\",\n   \"scripts\": {\n     \"lint\": \"eslint \\\"**/*.ts\\\" .\",\n-    \"check\": \"npm run build && npm test && npm run lint\",\n+    \"check\": \"npm run build && npm test && npm run lint && npm run perf:diff\",\n     \"test\": \"nyc mocha \\\"test/**/*.ts\\\"\",\n     \"test:e2e\": \"mocha \\\"test/e2e/**/*.ts\\\"\",\n     \"perf\": \"cd benchmark && npm ci && npm start\","
        },
        {
          "filename": "src/context/context.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 6,
          "patch": "@@ -59,11 +59,11 @@ export class Context {\n     return this.getFromScope(scope, paths)\n   }\n   public getFromScope (scope: object, paths: string[] | string) {\n-    if (typeof paths === 'string') paths = paths.split('.')\n-    return paths.reduce((scope, path) => {\n-      scope = readProperty(scope, path)\n+    if (isString(paths)) paths = paths.split('.')\n+    return paths.reduce((scope, path, i) => {\n+      scope = readProperty(scope, path, this.opts.ownPropertyOnly)\n       if (isNil(scope) && this.strictVariables) {\n-        throw new InternalUndefinedVariableError(path)\n+        throw new InternalUndefinedVariableError((paths as string[]).slice(0, i + 1).join!('.'))\n       }\n       return scope\n     }, scope)\n@@ -87,17 +87,22 @@ export class Context {\n   }\n }\n \n-export function readProperty (obj: Scope, key: string) {\n+export function readProperty (obj: Scope, key: string, ownPropertyOnly: boolean) {\n   if (isNil(obj)) return obj\n   obj = toLiquid(obj)\n-  if (isFunction(obj[key])) return obj[key]()\n+  const jsProperty = readJSProperty(obj, key, ownPropertyOnly)\n+  if (isFunction(jsProperty)) return jsProperty.call(obj)\n   if (obj instanceof Drop) {\n     if (obj.hasOwnProperty(key)) return obj[key]\n     return obj.liquidMethodMissing(key)\n   }\n   if (key === 'size') return readSize(obj)\n   if (key === 'first') return readFirst(obj)\n   if (key === 'last') return readLast(obj)\n+  return jsProperty\n+}\n+export function readJSProperty (obj: Scope, key: string, ownPropertyOnly: boolean) {\n+  if (ownPropertyOnly && !Object.hasOwnProperty.call(obj, key)) return undefined\n   return obj[key]\n }\n "
        },
        {
          "filename": "src/liquid-options.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -31,6 +31,8 @@ export interface LiquidOptions {\n   strictFilters?: boolean;\n   /** Whether or not to assert variable existence.  If set to `false`, undefined variables will be rendered as empty string.  Otherwise, undefined variables will cause an exception. Defaults to `false`. */\n   strictVariables?: boolean;\n+  /** Hide scope variables from prototypes, useful when you're passing a not sanitized object into LiquidJS or need to hide prototypes from templates. */\n+  ownPropertyOnly?: boolean;\n   /** Modifies the behavior of `strictVariables`. If set, a single undefined variable will *not* cause an exception in the context of the `if`/`elsif`/`unless` tag and the `default` filter. Instead, it will evaluate to `false` and `null`, respectively. Irrelevant if `strictVariables` is not set. Defaults to `false`. **/\n   lenientIf?: boolean;\n   /** JavaScript timezoneOffset for `date` filter, default to local time. That means if you're in Australia (UTC+10), it'll default to -600 */\n@@ -80,6 +82,10 @@ export interface RenderOptions {\n    * Same as `strictVariables` on LiquidOptions, but only for current render() call\n    */\n   strictVariables?: boolean;\n+  /**\n+   * Same as `ownPropertyOnly` on LiquidOptions, but only for current render() call\n+   */\n+  ownPropertyOnly?: boolean;\n }\n \n interface NormalizedOptions extends LiquidOptions {\n@@ -103,6 +109,7 @@ export interface NormalizedFullOptions extends NormalizedOptions {\n   fs: FS;\n   strictFilters: boolean;\n   strictVariables: boolean;\n+  ownPropertyOnly: boolean;\n   lenientIf: boolean;\n   trimTagRight: boolean;\n   trimTagLeft: boolean;\n@@ -143,6 +150,7 @@ export const defaultOptions: NormalizedFullOptions = {\n   preserveTimezones: false,\n   strictFilters: false,\n   strictVariables: false,\n+  ownPropertyOnly: false,\n   lenientIf: false,\n   globals: {},\n   keepOutputType: false,"
        },
        {
          "filename": "test/e2e/issues.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -194,4 +194,9 @@ describe('Issues', function () {\n     const html = engine.parseAndRenderSync(template, { array: [1, 2, 3] })\n     expect(html).to.equal('4#8#12#6')\n   })\n+  it('#454 leaking JS prototype getter functions in evaluation', async () => {\n+    const engine = new Liquid({ ownPropertyOnly: true })\n+    const html = engine.parseAndRenderSync('{{foo |\u00a0size}}-{{bar.coo}}', { foo: 'foo', bar: Object.create({ coo: 'COO' }) })\n+    expect(html).to.equal('3-')\n+  })\n })"
        },
        {
          "filename": "test/unit/context/context.ts",
          "status": "modified",
          "additions": 64,
          "deletions": 2,
          "patch": "@@ -95,11 +95,11 @@ describe('Context', function () {\n     })\n     it('should throw when deep variable not exist', async function () {\n       ctx.push({ foo: 'FOO' })\n-      return expect(() => ctx.get(['foo', 'bar', 'not', 'defined'])).to.throw(/undefined variable: bar/)\n+      return expect(() => ctx.get(['foo', 'bar', 'not', 'defined'])).to.throw(/undefined variable: foo.bar/)\n     })\n     it('should throw when itself not defined', async function () {\n       ctx.push({ foo: 'FOO' })\n-      return expect(() => ctx.get(['foo', 'BAR'])).to.throw(/undefined variable: BAR/)\n+      return expect(() => ctx.get(['foo', 'BAR'])).to.throw(/undefined variable: foo.BAR/)\n     })\n     it('should find variable in parent scope', async function () {\n       ctx.push({ 'foo': 'foo' })\n@@ -110,6 +110,68 @@ describe('Context', function () {\n     })\n   })\n \n+  describe('ownPropertyOnly', async function () {\n+    let ctx: Context\n+    beforeEach(function () {\n+      ctx = new Context(ctx, {\n+        ownPropertyOnly: true\n+      } as any)\n+    })\n+    it('should return undefined for prototype object property', function () {\n+      ctx.push({ foo: Object.create({ bar: 'BAR' }) })\n+      return expect(ctx.get(['foo', 'bar'])).to.equal(undefined)\n+    })\n+    it('should return undefined for Array.prototype.reduce', function () {\n+      ctx.push({ foo: [] })\n+      return expect(ctx.get(['foo', 'reduce'])).to.equal(undefined)\n+    })\n+    it('should return undefined for function prototype property', function () {\n+      function Foo () {}\n+      Foo.prototype.bar = 'BAR'\n+      ctx.push({ foo: new (Foo as any)() })\n+      return expect(ctx.get(['foo', 'bar'])).to.equal(undefined)\n+    })\n+    it('should allow function constructor properties', function () {\n+      function Foo (this: any) { this.bar = 'BAR' }\n+      ctx.push({ foo: new (Foo as any)() })\n+      return expect(ctx.get(['foo', 'bar'])).to.equal('BAR')\n+    })\n+    it('should return undefined for class method', function () {\n+      class Foo { bar () {} }\n+      ctx.push({ foo: new Foo() })\n+      return expect(ctx.get(['foo', 'bar'])).to.equal(undefined)\n+    })\n+    it('should allow class property', function () {\n+      class Foo { bar = 'BAR' }\n+      ctx.push({ foo: new Foo() })\n+      return expect(ctx.get(['foo', 'bar'])).to.equal('BAR')\n+    })\n+    it('should allow Array.prototype.length', function () {\n+      ctx.push({ foo: [1, 2] })\n+      return expect(ctx.get(['foo', 'length'])).to.equal(2)\n+    })\n+    it('should allow size to access Array.prototype.length', function () {\n+      ctx.push({ foo: [1, 2] })\n+      return expect(ctx.get(['foo', 'size'])).to.equal(2)\n+    })\n+    it('should allow size to access Set.prototype.size', function () {\n+      ctx.push({ foo: new Set([1, 2]) })\n+      return expect(ctx.get(['foo', 'size'])).to.equal(2)\n+    })\n+    it('should allow size to access Object key count', function () {\n+      ctx.push({ foo: { bar: 'BAR', coo: 'COO' } })\n+      return expect(ctx.get(['foo', 'size'])).to.equal(2)\n+    })\n+    it('should throw when property is hidden and strictVariables is true', function () {\n+      ctx = new Context(ctx, {\n+        ownPropertyOnly: true,\n+        strictVariables: true\n+      } as any)\n+      ctx.push({ foo: Object.create({ bar: 'BAR' }) })\n+      return expect(() => ctx.get(['foo', 'bar'])).to.throw(/undefined variable: foo.bar/)\n+    })\n+  })\n+\n   describe('.getAll()', function () {\n     it('should get all properties when arguments empty', async function () {\n       expect(ctx.getAll()).deep.equal(scope)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 2,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b070594fc79f14238ffc04f9c40aed26435895f4",
            "date": "2025-01-04T15:42:58Z",
            "author_login": "semantic-release-bot"
          },
          {
            "sha": "25ef104446731f4b6cb3a2e78f4d3b99efb635f4",
            "date": "2025-01-04T15:41:25Z",
            "author_login": "harttle"
          },
          {
            "sha": "59cf3c08dbc5f2e5b109ffcb5375ae738b5ac386",
            "date": "2025-01-04T14:41:23Z",
            "author_login": "harttle"
          },
          {
            "sha": "5f1a4cfdc9d6bde31ce86ddc88b8f4bdf52f7893",
            "date": "2025-01-04T13:48:24Z",
            "author_login": "harttle"
          },
          {
            "sha": "8c32ab4f42a672782761a82a7b9a8d4b826aaead",
            "date": "2024-12-28T13:53:20Z",
            "author_login": "semantic-release-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "The package liquidjs before 10.0.0 are vulnerable to Information Exposure when ownPropertyOnly parameter is set to False, which results in leaking properties of a prototype. Workaround For versions 9.34.0 and higher, an option to disable this functionality is provided.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-22T05:15:10.487",
    "last_modified": "2024-11-21T06:53:15.380",
    "fix_date": "2022-01-28T17:07:42Z"
  },
  "references": [
    {
      "url": "https://github.com/harttle/liquidjs/commit/7e99efc5131e20cf3f59e1fc2c371a15aa4109db",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/harttle/liquidjs/commit/7eb621601c2b05d6e379e5ce42219f2b1f556208",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/harttle/liquidjs/issues/454",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/u/0/a/snyk.io/g/report/c/9ipXecWRtTM/m/IgLadevtCQAJ",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-LIQUIDJS-2952868",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/harttle/liquidjs/commit/7e99efc5131e20cf3f59e1fc2c371a15aa4109db",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/harttle/liquidjs/commit/7eb621601c2b05d6e379e5ce42219f2b1f556208",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/harttle/liquidjs/issues/454",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/u/0/a/snyk.io/g/report/c/9ipXecWRtTM/m/IgLadevtCQAJ",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-LIQUIDJS-2952868",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.197812",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "liquidjs",
    "owner": "harttle",
    "created_at": "2016-06-13T07:39:30Z",
    "updated_at": "2025-01-12T11:37:01Z",
    "pushed_at": "2025-01-04T15:43:01Z",
    "size": 48306,
    "stars": 1561,
    "forks": 237,
    "open_issues": 7,
    "watchers": 1561,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "TypeScript": 610186,
      "JavaScript": 24734,
      "Liquid": 5254,
      "Shell": 3913,
      "Handlebars": 2003,
      "HTML": 47
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:36:38.765609"
  }
}