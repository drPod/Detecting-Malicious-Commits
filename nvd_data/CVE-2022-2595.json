{
  "cve_id": "CVE-2022-2595",
  "github_data": {
    "repository": "kromitgmbh/titra",
    "fix_commit": "fe8c3cdeb70e53b9f38f1022186ab16324d332c5",
    "related_commits": [
      "fe8c3cdeb70e53b9f38f1022186ab16324d332c5",
      "fe8c3cdeb70e53b9f38f1022186ab16324d332c5"
    ],
    "patch_url": "https://github.com/kromitgmbh/titra/commit/fe8c3cdeb70e53b9f38f1022186ab16324d332c5.patch",
    "fix_commit_details": {
      "sha": "fe8c3cdeb70e53b9f38f1022186ab16324d332c5",
      "commit_date": "2022-06-27T17:14:15Z",
      "author": {
        "login": "faburem",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "\ud83d\udc1b fixed a bug in the oidc configuration preventing saving changes",
        "length": 194,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 14,
        "deletions": 13
      },
      "files": [
        {
          "filename": "imports/api/customfields/server/methods.js",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1,5 +1,5 @@\n import CustomFields from '../customfields.js'\n-import { checkAuthentication } from '../../../utils/server_method_helpers'\n+import { checkAdminAuthentication } from '../../../utils/server_method_helpers'\n \n Meteor.methods({\n   addCustomField: function addCustomField({\n@@ -10,7 +10,7 @@ Meteor.methods({\n     check(type, String)\n     check(desc, String)\n     check(possibleValues, Match.Maybe([String]))\n-    checkAuthentication(this)\n+    checkAdminAuthentication(this)\n     if (CustomFields.findOne({ name })) {\n       throw new Meteor.Error('error-custom-field-exists', 'Custom field already exists', { method: 'addCustomField' })\n     }\n@@ -28,7 +28,7 @@ Meteor.methods({\n   },\n   removeCustomField: function removeCustomField({ _id }) {\n     check(_id, String)\n-    checkAuthentication(this)\n+    checkAdminAuthentication(this)\n     if (!CustomFields.findOne({ _id })) {\n       throw new Meteor.Error('error-custom-field-not-found', 'Custom field not found', { method: 'removeCustomField' })\n     }\n@@ -37,7 +37,7 @@ Meteor.methods({\n   updateCustomField: function updateCustomField({\n     _id, desc, type, possibleValues,\n   }) {\n-    checkAuthentication(this)\n+    checkAdminAuthentication(this)\n     check(_id, String)\n     check(type, String)\n     check(desc, String)"
        },
        {
          "filename": "imports/api/extensions/methods.js",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -1,10 +1,10 @@\n import AdmZip from 'adm-zip'\n import Extensions from './extensions'\n-import { checkAuthentication } from '../../utils/server_method_helpers'\n+import { checkAdminAuthentication } from '../../utils/server_method_helpers'\n \n Meteor.methods({\n   addExtension({ zipFile }) {\n-    checkAuthentication(this)\n+    checkAdminAuthentication(this)\n     const regex = /^data:.+\\/(.+);base64,(.*)$/\n     const matches = zipFile.match(regex)\n     const data = matches[2]\n@@ -36,7 +36,7 @@ Meteor.methods({\n     return new Meteor.Error('Extension has been added before.')\n   },\n   removeExtension({ extensionId }) {\n-    checkAuthentication(this)\n+    checkAdminAuthentication(this)\n     const extension = Extensions.findOne({ _id: extensionId })\n     if (extension) {\n       Extensions.remove({ _id: extension._id })\n@@ -45,7 +45,7 @@ Meteor.methods({\n     return new Meteor.Error('Extension does not exist.')\n   },\n   launchExtension({ extensionId }) {\n-    checkAuthentication(this)\n+    checkAdminAuthentication(this)\n     const extension = Extensions.findOne({ _id: extensionId })\n     if (extension) {\n       eval(extension.server)\n@@ -54,7 +54,7 @@ Meteor.methods({\n     return new Meteor.Error('Extension does not exist')\n   },\n   toggleExtensionState({ extensionId, state }) {\n-    checkAuthentication(this)\n+    checkAdminAuthentication(this)\n     const extension = Extensions.findOne({ _id: extensionId })\n     if (extension) {\n       Extensions.update({ _id: extension._id }, { $set: { isActive: state } })"
        },
        {
          "filename": "imports/api/globalsettings/methods.js",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -30,10 +30,11 @@ Meteor.methods({\n     }\n   },\n   updateOidcSettings(configuration) {\n+    check(configuration, Object)\n     checkAdminAuthentication(this)\n     ServiceConfiguration.configurations.remove({\n       service: 'oidc',\n     })\n     ServiceConfiguration.configurations.insert(configuration)\n-  }\n+  },\n })"
        },
        {
          "filename": "imports/ui/components/projectTasks.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -87,7 +87,7 @@ Template.projectTasks.onRendered(() => {\n       const ganttTasks = tasks.fetch()?.map((task) => (\n         {\n           id: task._id,\n-          name: task.name,\n+          name: $('span').text(task.name).get(0).innerHTML,\n           start: dayjs(task.start).format('YYYY-MM-DD'),\n           end: dayjs(task.end).format('YYYY-MM-DD'),\n           dependencies: task.dependencies,"
        },
        {
          "filename": "imports/ui/pages/administration.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -289,7 +289,7 @@ Template.administration.events({\n     }\n \n     // Fetch the value of each input field\n-    Oidc.fields.forEach((field) => {\n+    oidcFields.forEach((field) => {\n       configuration[field.property] = document.getElementById(\n         `configure-oidc-${field.property}`\n       ).value.replace(/^\\s*|\\s*$/g, '') // trim() doesnt work on IE8"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"titra\",\n-  \"version\": \"0.79.0\",\n+  \"version\": \"0.79.1\",\n   \"private\": true,\n   \"scripts\": {\n     \"start\": \"meteor run\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "277720a93575dd43157705e12e628f2b0a658961",
            "date": "2025-01-10T09:24:18Z",
            "author_login": "faburem"
          },
          {
            "sha": "d80a2887d324cbae8831862d7419fc27b8fb16f7",
            "date": "2025-01-10T08:29:01Z",
            "author_login": "faburem"
          },
          {
            "sha": "a016d71d270ecf1f929a315ec4bc5ae642cfbb29",
            "date": "2024-12-18T16:19:42Z",
            "author_login": "faburem"
          },
          {
            "sha": "32531b38378effc3f515f46d38056c8069f9d80b",
            "date": "2024-12-02T14:05:54Z",
            "author_login": "faburem"
          },
          {
            "sha": "ae3d182e1966238eac760aba8ad7838c16dad6a9",
            "date": "2024-12-02T10:28:58Z",
            "author_login": "faburem"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-285",
    "description": "Improper Authorization in GitHub repository kromitgmbh/titra prior to 0.79.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-01T15:15:09.650",
    "last_modified": "2024-11-21T07:01:19.117",
    "fix_date": "2022-06-27T17:14:15Z"
  },
  "references": [
    {
      "url": "https://github.com/kromitgmbh/titra/commit/fe8c3cdeb70e53b9f38f1022186ab16324d332c5",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1c6afb84-2025-46d8-9e9f-cbfc20e5d04d",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/kromitgmbh/titra/commit/fe8c3cdeb70e53b9f38f1022186ab16324d332c5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1c6afb84-2025-46d8-9e9f-cbfc20e5d04d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.185064",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "titra",
    "owner": "kromitgmbh",
    "created_at": "2016-12-19T10:55:48Z",
    "updated_at": "2025-01-10T09:24:21Z",
    "pushed_at": "2025-01-10T09:24:18Z",
    "size": 25998,
    "stars": 409,
    "forks": 56,
    "open_issues": 9,
    "watchers": 409,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "JavaScript": 605317,
      "HTML": 158544,
      "SCSS": 39393,
      "Cap'n Proto": 11256,
      "Dockerfile": 1921,
      "Shell": 697
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T14:28:21.088757"
  }
}