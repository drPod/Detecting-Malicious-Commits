{
  "cve_id": "CVE-2022-25967",
  "github_data": {
    "repository": "eta-dev/eta",
    "fix_commit": "5651392462ee0ff19d77c8481081a99e5b9138dd",
    "related_commits": [
      "5651392462ee0ff19d77c8481081a99e5b9138dd",
      "5651392462ee0ff19d77c8481081a99e5b9138dd"
    ],
    "patch_url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd.patch",
    "fix_commit_details": {
      "sha": "5651392462ee0ff19d77c8481081a99e5b9138dd",
      "commit_date": "2023-01-28T03:29:45Z",
      "author": {
        "login": "nebrelbug",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Don't use data object for Eta configuration (#214)",
        "length": 50,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 110,
        "additions": 18,
        "deletions": 92
      },
      "files": [
        {
          "filename": "deno_dist/file-handlers.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 35,
          "patch": "@@ -4,7 +4,6 @@ import EtaErr from \"./err.ts\";\n import compile from \"./compile.ts\";\n import { getConfig } from \"./config.ts\";\n import { getPath, readFile } from \"./file-utils.ts\";\n-import { copyProps } from \"./utils.ts\";\n import { promiseImpl } from \"./polyfills.ts\";\n \n /* TYPES */\n@@ -19,10 +18,6 @@ import type { TemplateFunction } from \"./compile.ts\";\n export type CallbackFn = (err: Error | null, str?: string) => void;\n \n interface DataObj {\n-  /** Express.js settings may be stored here */\n-  settings?: {\n-    [key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n-  };\n   [key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n }\n \n@@ -173,8 +168,7 @@ function includeFile(\n  *\n  * This can take two different function signatures:\n  *\n- * - `renderFile(filename, dataAndConfig, [cb])`\n- *   - Eta will merge `dataAndConfig` into `eta.config`\n+ * - `renderFile(filename, data, [cb])`\n  * - `renderFile(filename, data, [config], [cb])`\n  *\n  * Note that renderFile does not immediately return the rendered result. If you pass in a callback function, it will be called with `(err, res)`. Otherwise, `renderFile` will return a `Promise` that resolves to the render result.\n@@ -189,7 +183,6 @@ function includeFile(\n  *\n  * let rendered = await eta.renderFile(\"./template.eta\", data, {cache: true})\n  *\n- * let rendered = await eta.renderFile(\"./template\", {...data, cache: true})\n  * ```\n  */\n \n@@ -224,14 +217,13 @@ function renderFile(\n   /*\n   Here we have some function overloading.\n   Essentially, the first 2 arguments to renderFile should always be the filename and data\n-  However, with Express, configuration options will be passed along with the data.\n-  Thus, Express will call renderFile with (filename, dataAndOptions, cb)\n-  And we want to also make (filename, data, options, cb) available\n+  Express will call renderFile with (filename, data, cb)\n+  We also want to make (filename, data, options, cb) available\n   */\n \n   let renderConfig: EtaConfigWithFilename;\n   let callback: CallbackFn | undefined;\n-  data = data || {}; // If data is undefined, we don't want accessing data.settings to error\n+  data = data || {};\n \n   // First, assign our callback function to `callback`\n   // We can leave it undefined if neither parameter is a function;\n@@ -250,26 +242,8 @@ function renderFile(\n       (config as PartialConfig) || {},\n     ) as EtaConfigWithFilename;\n   } else {\n-    // Otherwise, get the config from the data object\n-    // And then grab some config options from data.settings\n-    // Which is where Express sometimes stores them\n-    renderConfig = getConfig(data as PartialConfig) as EtaConfigWithFilename;\n-    if (data.settings) {\n-      // Pull a few things from known locations\n-      if (data.settings.views) {\n-        renderConfig.views = data.settings.views;\n-      }\n-      if (data.settings[\"view cache\"]) {\n-        renderConfig.cache = true;\n-      }\n-      // Undocumented after Express 2, but still usable, esp. for\n-      // items that are unsafe to be passed along with data, like `root`\n-      const viewOpts = data.settings[\"view options\"];\n-\n-      if (viewOpts) {\n-        copyProps(renderConfig, viewOpts);\n-      }\n-    }\n+    // Otherwise, get the default config\n+    renderConfig = getConfig({}) as EtaConfigWithFilename;\n   }\n \n   // Set the filename option on the template\n@@ -286,8 +260,7 @@ function renderFile(\n  *\n  * This can take two different function signatures:\n  *\n- * - `renderFile(filename, dataAndConfig, [cb])`\n- *   - Eta will merge `dataAndConfig` into `eta.config`\n+ * - `renderFile(filename, data, [cb])`\n  * - `renderFile(filename, data, [config], [cb])`\n  *\n  * Note that renderFile does not immediately return the rendered result. If you pass in a callback function, it will be called with `(err, res)`. Otherwise, `renderFile` will return a `Promise` that resolves to the render result.\n@@ -302,7 +275,6 @@ function renderFile(\n  *\n  * let rendered = await eta.renderFile(\"./template.eta\", data, {cache: true})\n  *\n- * let rendered = await eta.renderFile(\"./template\", {...data, cache: true})\n  * ```\n  */\n "
        },
        {
          "filename": "src/file-handlers.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 35,
          "patch": "@@ -4,7 +4,6 @@ import EtaErr from \"./err.js\";\n import compile from \"./compile.js\";\n import { getConfig } from \"./config.js\";\n import { getPath, readFile } from \"./file-utils.js\";\n-import { copyProps } from \"./utils.js\";\n import { promiseImpl } from \"./polyfills.js\";\n \n /* TYPES */\n@@ -15,10 +14,6 @@ import type { TemplateFunction } from \"./compile.js\";\n export type CallbackFn = (err: Error | null, str?: string) => void;\n \n interface DataObj {\n-  /** Express.js settings may be stored here */\n-  settings?: {\n-    [key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n-  };\n   [key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n }\n \n@@ -150,8 +145,7 @@ function includeFile(path: string, options: EtaConfig): [TemplateFunction, EtaCo\n  *\n  * This can take two different function signatures:\n  *\n- * - `renderFile(filename, dataAndConfig, [cb])`\n- *   - Eta will merge `dataAndConfig` into `eta.config`\n+ * - `renderFile(filename, data, [cb])`\n  * - `renderFile(filename, data, [config], [cb])`\n  *\n  * Note that renderFile does not immediately return the rendered result. If you pass in a callback function, it will be called with `(err, res)`. Otherwise, `renderFile` will return a `Promise` that resolves to the render result.\n@@ -166,7 +160,6 @@ function includeFile(path: string, options: EtaConfig): [TemplateFunction, EtaCo\n  *\n  * let rendered = await eta.renderFile(\"./template.eta\", data, {cache: true})\n  *\n- * let rendered = await eta.renderFile(\"./template\", {...data, cache: true})\n  * ```\n  */\n \n@@ -192,14 +185,13 @@ function renderFile(\n   /*\n   Here we have some function overloading.\n   Essentially, the first 2 arguments to renderFile should always be the filename and data\n-  However, with Express, configuration options will be passed along with the data.\n-  Thus, Express will call renderFile with (filename, dataAndOptions, cb)\n-  And we want to also make (filename, data, options, cb) available\n+  Express will call renderFile with (filename, data, cb)\n+  We also want to make (filename, data, options, cb) available\n   */\n \n   let renderConfig: EtaConfigWithFilename;\n   let callback: CallbackFn | undefined;\n-  data = data || {}; // If data is undefined, we don't want accessing data.settings to error\n+  data = data || {};\n \n   // First, assign our callback function to `callback`\n   // We can leave it undefined if neither parameter is a function;\n@@ -216,26 +208,8 @@ function renderFile(\n   if (typeof config === \"object\") {\n     renderConfig = getConfig((config as PartialConfig) || {}) as EtaConfigWithFilename;\n   } else {\n-    // Otherwise, get the config from the data object\n-    // And then grab some config options from data.settings\n-    // Which is where Express sometimes stores them\n-    renderConfig = getConfig(data as PartialConfig) as EtaConfigWithFilename;\n-    if (data.settings) {\n-      // Pull a few things from known locations\n-      if (data.settings.views) {\n-        renderConfig.views = data.settings.views;\n-      }\n-      if (data.settings[\"view cache\"]) {\n-        renderConfig.cache = true;\n-      }\n-      // Undocumented after Express 2, but still usable, esp. for\n-      // items that are unsafe to be passed along with data, like `root`\n-      const viewOpts = data.settings[\"view options\"];\n-\n-      if (viewOpts) {\n-        copyProps(renderConfig, viewOpts);\n-      }\n-    }\n+    // Otherwise, get the default config\n+    renderConfig = getConfig({}) as EtaConfigWithFilename;\n   }\n \n   // Set the filename option on the template\n@@ -252,8 +226,7 @@ function renderFile(\n  *\n  * This can take two different function signatures:\n  *\n- * - `renderFile(filename, dataAndConfig, [cb])`\n- *   - Eta will merge `dataAndConfig` into `eta.config`\n+ * - `renderFile(filename, data, [cb])`\n  * - `renderFile(filename, data, [config], [cb])`\n  *\n  * Note that renderFile does not immediately return the rendered result. If you pass in a callback function, it will be called with `(err, res)`. Otherwise, `renderFile` will return a `Promise` that resolves to the render result.\n@@ -268,7 +241,6 @@ function renderFile(\n  *\n  * let rendered = await eta.renderFile(\"./template.eta\", data, {cache: true})\n  *\n- * let rendered = await eta.renderFile(\"./template\", {...data, cache: true})\n  * ```\n  */\n "
        },
        {
          "filename": "test/file-handlers.spec.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 22,
          "patch": "@@ -67,28 +67,10 @@ describe(\"Simple renderFile tests\", () => {\n     templates.define(fakeFilePath, compile(\"This template does not exist\"));\n \n     // renderFile should just look straight in the cache for the template\n-    renderFile(fakeFilePath, { cache: true }, function (_err: Error | null, res?: string) {\n+    renderFile(fakeFilePath, {}, { cache: true }, function (_err: Error | null, res?: string) {\n       expect(res).toEqual(\"This template does not exist\");\n     });\n   });\n-\n-  it(\"parses a simple template w/ settings from Express\", async () => {\n-    renderFile(\n-      filePath,\n-      {\n-        name: \"<p>Ben</p>\",\n-        cache: true,\n-        settings: {\n-          views: [path.join(__dirname, \"templates\"), path.join(__dirname, \"othertemplates\")],\n-          \"view cache\": true,\n-          \"view options\": { autoEscape: false },\n-        },\n-      },\n-      function (_err: Error | null, res?: string) {\n-        expect(res).toEqual(\"Hi <p>Ben</p>\");\n-      }\n-    );\n-  });\n });\n \n describe(\"File location tests\", () => {\n@@ -105,9 +87,9 @@ describe(\"File location tests\", () => {\n \n describe(\"renderFile error tests\", () => {\n   it(\"render file with callback works on error\", (done) => {\n-    function cb(err: Error, _res?: string) {\n+    function cb(err: Error | null, _res?: string) {\n       expect(err).toBeTruthy();\n-      expect(err.message).toMatch(\n+      expect(err?.message).toMatch(\n         buildRegEx(`\n var tR='',__l,__lP,include=E.include.bind(E),includeFile=E.includeFile.bind(E)\n function layout(p,d){__l=p;__lP=d}\n@@ -120,7 +102,7 @@ if(cb){cb(null,tR)} return tR\n       done();\n     }\n \n-    renderFile(errFilePath, { name: \"Ada Lovelace\", async: true }, cb);\n+    renderFile(errFilePath, { name: \"Ada Lovelace\" }, { async: true }, cb);\n   });\n \n   test(\"throws with bad inner JS syntax using Promises\", async () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "760a1f1f9dfe181f34a3f2ce81247385066d6311",
            "date": "2024-08-26T18:01:03Z",
            "author_login": "bribes"
          },
          {
            "sha": "dd743117b3ac74700ba2291951cbc7bf151826cf",
            "date": "2024-08-12T21:51:29Z",
            "author_login": "nebrelbug"
          },
          {
            "sha": "54f2f0dd68a368100b7b15cc03f3694778a88819",
            "date": "2024-08-12T21:50:31Z",
            "author_login": "kobim"
          },
          {
            "sha": "f59155eb51aa4e864a1948c8a380bce83b9eed14",
            "date": "2024-08-07T21:57:59Z",
            "author_login": "nebrelbug"
          },
          {
            "sha": "1c52a11e8ef9e620def6ee3ee5f0879f2ed298a7",
            "date": "2024-08-07T21:56:11Z",
            "author_login": "nebrelbug"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "Versions of the package eta before 2.0.0 are vulnerable to Remote Code Execution (RCE) by overwriting template engine configuration variables with view options received from The Express render API.\r\r**Note:** This is exploitable only for users who are rendering templates with user-defined data.\r\r",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-01-30T05:15:10.177",
    "last_modified": "2024-11-21T06:53:16.090",
    "fix_date": "2023-01-28T03:29:45Z"
  },
  "references": [
    {
      "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-ETA-2936803",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/compile-string.ts%23L21",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/eta-dev/eta/blob/9c8e4263d3a559444a3881a85c1607bf344d0b28/src/file-handlers.ts%23L182",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/eta-dev/eta/commit/5651392462ee0ff19d77c8481081a99e5b9138dd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-ETA-2936803",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:03.953395",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "eta",
    "owner": "eta-dev",
    "created_at": "2020-03-26T02:30:08Z",
    "updated_at": "2025-01-13T13:19:54Z",
    "pushed_at": "2024-08-26T18:01:03Z",
    "size": 2573,
    "stars": 1446,
    "forks": 66,
    "open_issues": 19,
    "watchers": 1446,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "v2"
    ],
    "languages": {
      "TypeScript": 53178,
      "JavaScript": 10776,
      "HTML": 10542
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:55:01.971480"
  }
}