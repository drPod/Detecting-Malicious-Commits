{
  "cve_id": "CVE-2022-26530",
  "github_data": {
    "repository": "swaywm/swaylock",
    "fix_commit": "1d1c75b6316d21933069a9d201f966d84099f6ca",
    "related_commits": [
      "1d1c75b6316d21933069a9d201f966d84099f6ca",
      "1d1c75b6316d21933069a9d201f966d84099f6ca"
    ],
    "patch_url": "https://github.com/swaywm/swaylock/commit/1d1c75b6316d21933069a9d201f966d84099f6ca.patch",
    "fix_commit_details": {
      "sha": "1d1c75b6316d21933069a9d201f966d84099f6ca",
      "commit_date": "2021-12-20T16:25:44Z",
      "author": {
        "login": "emersion",
        "type": "User",
        "stats": {
          "total_commits": 53,
          "average_weekly_commits": 0.11134453781512606,
          "total_additions": 881,
          "total_deletions": 1167,
          "weeks_active": 18
        }
      },
      "commit_message": {
        "title": "Add support for ext-session-lock-v1",
        "length": 231,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 131,
        "additions": 101,
        "deletions": 30
      },
      "files": [
        {
          "filename": "include/swaylock.h",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -89,6 +89,8 @@ struct swaylock_state {\n \tint failed_attempts;\n \tbool run_display;\n \tstruct zxdg_output_manager_v1 *zxdg_output_manager;\n+\tstruct ext_session_lock_manager_v1 *ext_session_lock_manager_v1;\n+\tstruct ext_session_lock_v1 *ext_session_lock_v1;\n };\n \n struct swaylock_surface {\n@@ -101,6 +103,7 @@ struct swaylock_surface {\n \tstruct wl_surface *child; // surface made into subsurface\n \tstruct wl_subsurface *subsurface;\n \tstruct zwlr_layer_surface_v1 *layer_surface;\n+\tstruct ext_session_lock_surface_v1 *ext_session_lock_surface_v1;\n \tstruct pool_buffer buffers[2];\n \tstruct pool_buffer indicator_buffers[2];\n \tstruct pool_buffer *current_buffer;"
        },
        {
          "filename": "main.c",
          "status": "modified",
          "additions": 96,
          "deletions": 29,
          "patch": "@@ -26,6 +26,7 @@\n #include \"wlr-input-inhibitor-unstable-v1-client-protocol.h\"\n #include \"wlr-layer-shell-unstable-v1-client-protocol.h\"\n #include \"xdg-output-unstable-v1-client-protocol.h\"\n+#include \"ext-session-lock-v1-client-protocol.h\"\n \n static uint32_t parse_color(const char *color) {\n \tif (color[0] == '#') {\n@@ -97,6 +98,9 @@ static void destroy_surface(struct swaylock_surface *surface) {\n \tif (surface->layer_surface != NULL) {\n \t\tzwlr_layer_surface_v1_destroy(surface->layer_surface);\n \t}\n+\tif (surface->ext_session_lock_surface_v1 != NULL) {\n+\t\text_session_lock_surface_v1_destroy(surface->ext_session_lock_surface_v1);\n+\t}\n \tif (surface->surface != NULL) {\n \t\twl_surface_destroy(surface->surface);\n \t}\n@@ -109,6 +113,7 @@ static void destroy_surface(struct swaylock_surface *surface) {\n }\n \n static const struct zwlr_layer_surface_v1_listener layer_surface_listener;\n+static const struct ext_session_lock_surface_v1_listener ext_session_lock_surface_v1_listener;\n \n static cairo_surface_t *select_image(struct swaylock_state *state,\n \t\tstruct swaylock_surface *surface);\n@@ -120,7 +125,7 @@ static bool surface_is_opaque(struct swaylock_surface *surface) {\n \treturn (surface->state->args.colors.background & 0xff) == 0xff;\n }\n \n-static void create_layer_surface(struct swaylock_surface *surface) {\n+static void create_surface(struct swaylock_surface *surface) {\n \tstruct swaylock_state *state = surface->state;\n \n \tsurface->image = select_image(state, surface);\n@@ -134,22 +139,28 @@ static void create_layer_surface(struct swaylock_surface *surface) {\n \tassert(surface->subsurface);\n \twl_subsurface_set_sync(surface->subsurface);\n \n-\tsurface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(\n-\t\t\tstate->layer_shell, surface->surface, surface->output,\n-\t\t\tZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");\n-\tassert(surface->layer_surface);\n-\n-\tzwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);\n-\tzwlr_layer_surface_v1_set_anchor(surface->layer_surface,\n-\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |\n-\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |\n-\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |\n-\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);\n-\tzwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);\n-\tzwlr_layer_surface_v1_set_keyboard_interactivity(\n-\t\t\tsurface->layer_surface, true);\n-\tzwlr_layer_surface_v1_add_listener(surface->layer_surface,\n-\t\t\t&layer_surface_listener, surface);\n+\tif (state->ext_session_lock_v1) {\n+\t\tsurface->ext_session_lock_surface_v1 = ext_session_lock_v1_get_lock_surface(\n+\t\t\t\tstate->ext_session_lock_v1, surface->surface, surface->output);\n+\t\text_session_lock_surface_v1_add_listener(surface->ext_session_lock_surface_v1,\n+\t\t\t\t&ext_session_lock_surface_v1_listener, surface);\n+\t} else {\n+\t\tsurface->layer_surface = zwlr_layer_shell_v1_get_layer_surface(\n+\t\t\t\tstate->layer_shell, surface->surface, surface->output,\n+\t\t\t\tZWLR_LAYER_SHELL_V1_LAYER_OVERLAY, \"lockscreen\");\n+\n+\t\tzwlr_layer_surface_v1_set_size(surface->layer_surface, 0, 0);\n+\t\tzwlr_layer_surface_v1_set_anchor(surface->layer_surface,\n+\t\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |\n+\t\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT |\n+\t\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |\n+\t\t\t\tZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT);\n+\t\tzwlr_layer_surface_v1_set_exclusive_zone(surface->layer_surface, -1);\n+\t\tzwlr_layer_surface_v1_set_keyboard_interactivity(\n+\t\t\t\tsurface->layer_surface, true);\n+\t\tzwlr_layer_surface_v1_add_listener(surface->layer_surface,\n+\t\t\t\t&layer_surface_listener, surface);\n+\t}\n \n \tif (surface_is_opaque(surface) &&\n \t\t\tsurface->state->args.mode != BACKGROUND_MODE_CENTER &&\n@@ -161,7 +172,9 @@ static void create_layer_surface(struct swaylock_surface *surface) {\n \t\twl_region_destroy(region);\n \t}\n \n-\twl_surface_commit(surface->surface);\n+\tif (!state->ext_session_lock_v1) {\n+\t\twl_surface_commit(surface->surface);\n+\t}\n }\n \n static void layer_surface_configure(void *data,\n@@ -188,6 +201,23 @@ static const struct zwlr_layer_surface_v1_listener layer_surface_listener = {\n \t.closed = layer_surface_closed,\n };\n \n+static void ext_session_lock_surface_v1_handle_configure(void *data,\n+\t\tstruct ext_session_lock_surface_v1 *lock_surface, uint32_t serial,\n+\t\tuint32_t width, uint32_t height) {\n+\tstruct swaylock_surface *surface = data;\n+\tsurface->width = width;\n+\tsurface->height = height;\n+\tsurface->indicator_width = 0;\n+\tsurface->indicator_height = 0;\n+\text_session_lock_surface_v1_ack_configure(lock_surface, serial);\n+\trender_frame_background(surface);\n+\trender_frame(surface);\n+}\n+\n+static const struct ext_session_lock_surface_v1_listener ext_session_lock_surface_v1_listener = {\n+\t.configure = ext_session_lock_surface_v1_handle_configure,\n+};\n+\n static const struct wl_callback_listener surface_frame_listener;\n \n static void surface_frame_handle_done(void *data, struct wl_callback *callback,\n@@ -302,6 +332,21 @@ struct zxdg_output_v1_listener _xdg_output_listener = {\n \t.description = handle_xdg_output_description,\n };\n \n+static void ext_session_lock_v1_handle_locked(void *data, struct ext_session_lock_v1 *lock) {\n+\t// Who cares\n+}\n+\n+static void ext_session_lock_v1_handle_finished(void *data, struct ext_session_lock_v1 *lock) {\n+\tswaylock_log(LOG_ERROR, \"Failed to lock session -- \"\n+\t\t\t\"is another lockscreen running?\");\n+\texit(2);\n+}\n+\n+static const struct ext_session_lock_v1_listener ext_session_lock_v1_listener = {\n+\t.locked = ext_session_lock_v1_handle_locked,\n+\t.finished = ext_session_lock_v1_handle_finished,\n+};\n+\n static void handle_global(void *data, struct wl_registry *registry,\n \t\tuint32_t name, const char *interface, uint32_t version) {\n \tstruct swaylock_state *state = data;\n@@ -341,9 +386,12 @@ static void handle_global(void *data, struct wl_registry *registry,\n \t\twl_list_insert(&state->surfaces, &surface->link);\n \n \t\tif (state->run_display) {\n-\t\t\tcreate_layer_surface(surface);\n+\t\t\tcreate_surface(surface);\n \t\t\twl_display_roundtrip(state->display);\n \t\t}\n+\t} else if (strcmp(interface, ext_session_lock_manager_v1_interface.name) == 0) {\n+\t\tstate->ext_session_lock_manager_v1 = wl_registry_bind(registry, name,\n+\t\t\t\t&ext_session_lock_manager_v1_interface, 1);\n \t}\n }\n \n@@ -1182,20 +1230,34 @@ int main(int argc, char **argv) {\n \tstruct wl_registry *registry = wl_display_get_registry(state.display);\n \twl_registry_add_listener(registry, &registry_listener, &state);\n \twl_display_roundtrip(state.display);\n-\tassert(state.compositor && state.layer_shell && state.shm);\n-\tif (!state.input_inhibit_manager) {\n-\t\tfree(state.args.font);\n-\t\tswaylock_log(LOG_ERROR, \"Compositor does not support the input \"\n-\t\t\t\t\"inhibitor protocol, refusing to run insecurely\");\n+\n+\tif (!state.compositor || !state.shm) {\n+\t\tswaylock_log(LOG_ERROR, \"Missing wl_compositor or wl_shm\");\n+\t\treturn 1;\n+\t}\n+\n+\tif (state.ext_session_lock_manager_v1) {\n+\t\tswaylock_log(LOG_DEBUG, \"Using ext-session-lock-v1\");\n+\t\tstate.ext_session_lock_v1 = ext_session_lock_manager_v1_lock(state.ext_session_lock_manager_v1);\n+\t\text_session_lock_v1_add_listener(state.ext_session_lock_v1,\n+\t\t\t\t&ext_session_lock_v1_listener, &state);\n+\t} else if (state.layer_shell && state.input_inhibit_manager) {\n+\t\tswaylock_log(LOG_DEBUG, \"Using wlr-layer-shell + wlr-input-inhibitor\");\n+\t\tzwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);\n+\t} else {\n+\t\tswaylock_log(LOG_ERROR, \"Missing ext-session-lock-v1, wlr-layer-shell \"\n+\t\t\t\t\"and wlr-input-inhibitor\");\n \t\treturn 1;\n \t}\n \n-\tzwlr_input_inhibit_manager_v1_get_inhibitor(state.input_inhibit_manager);\n \tif (wl_display_roundtrip(state.display) == -1) {\n \t\tfree(state.args.font);\n-\t\tswaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\"\n-\t\t\t\t\" is another lockscreen already running?\");\n-\t\treturn 2;\n+\t\tif (state.input_inhibit_manager) {\n+\t\t\tswaylock_log(LOG_ERROR, \"Exiting - failed to inhibit input:\"\n+\t\t\t\t\t\" is another lockscreen already running?\");\n+\t\t\treturn 2;\n+\t\t}\n+\t\treturn 1;\n \t}\n \n \tif (state.zxdg_output_manager) {\n@@ -1214,7 +1276,7 @@ int main(int argc, char **argv) {\n \n \tstruct swaylock_surface *surface;\n \twl_list_for_each(surface, &state.surfaces, link) {\n-\t\tcreate_layer_surface(surface);\n+\t\tcreate_surface(surface);\n \t}\n \n \tif (state.args.daemonize) {\n@@ -1237,6 +1299,11 @@ int main(int argc, char **argv) {\n \t\tloop_poll(state.eventloop);\n \t}\n \n+\tif (state.ext_session_lock_v1) {\n+\t\text_session_lock_v1_unlock_and_destroy(state.ext_session_lock_v1);\n+\t\twl_display_flush(state.display);\n+\t}\n+\n \tfree(state.args.font);\n \treturn 0;\n }"
        },
        {
          "filename": "meson.build",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -36,7 +36,7 @@ if is_freebsd\n endif\n \n wayland_client = dependency('wayland-client')\n-wayland_protos = dependency('wayland-protocols', version: '>=1.14', fallback: 'wayland-protocols')\n+wayland_protos = dependency('wayland-protocols', version: '>=1.25', fallback: 'wayland-protocols')\n xkbcommon      = dependency('xkbcommon')\n cairo          = dependency('cairo')\n gdk_pixbuf     = dependency('gdk-pixbuf-2.0', required: get_option('gdk-pixbuf'))\n@@ -86,6 +86,7 @@ client_protos_headers = []\n client_protocols = [\n \t[wl_protocol_dir, 'stable/xdg-shell/xdg-shell.xml'],\n \t[wl_protocol_dir, 'unstable/xdg-output/xdg-output-unstable-v1.xml'],\n+\t[wl_protocol_dir, 'staging/ext-session-lock/ext-session-lock-v1.xml'],\n \t['wlr-layer-shell-unstable-v1.xml'],\n \t['wlr-input-inhibitor-unstable-v1.xml'],\n ]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fbc5a8136187491e5ee3071e8a60e6593ca9b90b",
            "date": "2024-11-17T10:24:16Z",
            "author_login": "OkamiW"
          },
          {
            "sha": "96f0a0f9c6a9412fc1886bf54e37ece75b0e9f99",
            "date": "2024-11-01T19:46:15Z",
            "author_login": "mstoeckl"
          },
          {
            "sha": "fc6fbc98fba775e152443a3d587600767d451fa1",
            "date": "2024-10-12T13:24:10Z",
            "author_login": "mstoeckl"
          },
          {
            "sha": "cca2436ba535d17c49b7d7ba75ebfa6a18ec9209",
            "date": "2024-09-06T22:27:37Z",
            "author_login": "kennylevinsen"
          },
          {
            "sha": "de0731de6a44d99532fcd46c5894cff5f10e65a6",
            "date": "2024-08-23T20:39:33Z",
            "author_login": "emersion"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H",
    "cwe_id": null,
    "description": "swaylock before 1.6 allows attackers to trigger a crash and achieve unlocked access to a Wayland compositor.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-03T23:15:08.103",
    "last_modified": "2024-11-21T06:54:07.330",
    "fix_date": "2021-12-20T16:25:44Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2066596",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/swaywm/swaylock/commit/1d1c75b6316d21933069a9d201f966d84099f6ca",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/swaywm/swaylock/pull/219",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2066596",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/swaywm/swaylock/commit/1d1c75b6316d21933069a9d201f966d84099f6ca",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/swaywm/swaylock/pull/219",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.093414",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "swaylock",
    "owner": "swaywm",
    "created_at": "2019-01-14T02:25:09Z",
    "updated_at": "2025-01-11T11:09:17Z",
    "pushed_at": "2024-11-17T18:15:58Z",
    "size": 320,
    "stars": 864,
    "forks": 202,
    "open_issues": 86,
    "watchers": 864,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 100273,
      "Shell": 6325,
      "Meson": 5445
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:16:37.409870"
  }
}