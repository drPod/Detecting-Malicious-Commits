{
  "cve_id": "CVE-2022-28068",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "637f4bd1af6752e28e0a9998e954e2e9ce6fa992",
    "related_commits": [
      "637f4bd1af6752e28e0a9998e954e2e9ce6fa992",
      "637f4bd1af6752e28e0a9998e954e2e9ce6fa992"
    ],
    "patch_url": "https://github.com/radareorg/radare2/commit/637f4bd1af6752e28e0a9998e954e2e9ce6fa992.patch",
    "fix_commit_details": {
      "sha": "637f4bd1af6752e28e0a9998e954e2e9ce6fa992",
      "commit_date": "2021-10-29T22:25:13Z",
      "author": {
        "login": "trufae",
        "type": "User",
        "stats": {
          "total_commits": 1783,
          "average_weekly_commits": 2.140456182472989,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 235
        }
      },
      "commit_message": {
        "title": "Fix oobread crash in DWARF parser (tests_64924) ##crash",
        "length": 102,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 39,
        "additions": 18,
        "deletions": 21
      },
      "files": [
        {
          "filename": "libr/anal/dwarf_process.c",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -1004,13 +1004,18 @@ static VariableLocation *parse_dwarf_location (Context *ctx, const RBinDwarfAttr\n \tfor (i = 0; i < block.length; i++) {\n \t\tswitch (block.data[i]) {\n \t\tcase DW_OP_fbreg: {\n-\t\t/* TODO sometimes CFA is referenced, but we don't parse that yet\n-\t\t   just an offset involving framebase of a function*/\n+\t\t\t/* TODO sometimes CFA is referenced, but we don't parse that yet\n+\t\t\t   just an offset involving framebase of a function*/\n \t\t\tif (i == block.length - 1) {\n \t\t\t\treturn NULL;\n \t\t\t}\n-\t\t\tconst ut8 *dump = &block.data[++i];\n-\t\t\toffset = r_sleb128 (&dump, &block.data[loc->block.length]);\n+\t\t\ti++;\n+\t\t\tconst ut8 *dump = block.data + i;\n+\t\t\tif (loc->block.length > block.length) {\n+\t\t\t\t// eprintf (\"skip = %d%c\", loc->block.length, 10);\n+\t\t\t\treturn NULL;\n+\t\t\t}\n+\t\t\toffset = r_sleb128 (&dump, block.data + loc->block.length);\n \t\t\tif (frame_base) {\n \t\t\t\t/* recursive parsing, but frame_base should be only one, but someone\n \t\t\t\t   could make malicious resource exhaustion attack, so a depth counter might be cool? */\n@@ -1019,12 +1024,10 @@ static VariableLocation *parse_dwarf_location (Context *ctx, const RBinDwarfAttr\n \t\t\t\t\tlocation->offset += offset;\n \t\t\t\t\treturn location;\n \t\t\t\t}\n-\t\t\t\treturn NULL;\n \t\t\t} else {\n \t\t\t\t/* Might happen if frame_base has a frame_base reference? I don't think it can tho */\n-\t\t\t\treturn NULL;\n \t\t\t}\n-\t\t\tbreak;\n+\t\t\treturn NULL;\n \t\t}\n \t\tcase DW_OP_reg0:\n \t\tcase DW_OP_reg1:"
        },
        {
          "filename": "libr/bin/dwarf.c",
          "status": "modified",
          "additions": 8,
          "deletions": 14,
          "patch": "@@ -383,21 +383,18 @@ static inline ut64 dwarf_read_offset(bool is_64bit, const ut8 **buf, const ut8 *\n \tif (is_64bit) {\n \t\tresult = READ64 (*buf);\n \t} else {\n-\t\tresult = READ32 (*buf);\n+\t\tresult = (ut64)READ32 (*buf);\n \t}\n \treturn result;\n }\n \n static inline ut64 dwarf_read_address(size_t size, const ut8 **buf, const ut8 *buf_end) {\n \tut64 result;\n \tswitch (size) {\n-\t\tcase 2:\n-\t\tresult = READ16 (*buf); break;\n-\t\tcase 4:\n-\t\tresult = READ32 (*buf); break;\n-\t\tcase 8:\n-\t\tresult = READ64 (*buf); break;\n-\t\tdefault:\n+\tcase 2: result = READ16 (*buf); break;\n+\tcase 4: result = READ32 (*buf); break;\n+\tcase 8: result = READ64 (*buf); break;\n+\tdefault:\n \t\tresult = 0;\n \t\t*buf += size;\n \t\teprintf (\"Weird dwarf address size: %zu.\", size);\n@@ -1857,8 +1854,7 @@ static const ut8 *parse_attr_value(const ut8 *obuf, int obuf_len,\n  * @param sdb\n  * @return const ut8* Updated buffer\n  */\n-static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev,\n-\t\tRBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n+static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevDecl *abbrev, RBinDwarfCompUnitHdr *hdr, RBinDwarfDie *die, const ut8 *debug_str, size_t debug_str_len, Sdb *sdb) {\n \tsize_t i;\n \tfor (i = 0; i < abbrev->count - 1; i++) {\n \t\tmemset (&die->attr_values[i], 0, sizeof (die->attr_values[i]));\n@@ -1868,9 +1864,8 @@ static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevD\n \n \t\tRBinDwarfAttrValue *attribute = &die->attr_values[i];\n \n-\t\tbool is_valid_string_form = (attribute->attr_form == DW_FORM_strp ||\n-\t\t\tattribute->attr_form == DW_FORM_string) &&\n-\t\t\tattribute->string.content;\n+\t\tbool is_string = (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string);\n+\t\tbool is_valid_string_form = is_string && attribute->string.content;\n \t\t// TODO  does this have a purpose anymore?\n \t\t// Or atleast it needs to rework becase there will be\n \t\t// more comp units -> more comp dirs and only the last one will be kept\n@@ -1880,7 +1875,6 @@ static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevD\n \t\t}\n \t\tdie->count++;\n \t}\n-\n \treturn buf;\n }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a7e958f9ebdf9771c36e8376078f027792981fea",
            "date": "2025-01-14T17:22:24Z",
            "author_login": "radare"
          },
          {
            "sha": "0f85675c7a5d542a89318b62d4a4bc997e595e03",
            "date": "2025-01-14T11:01:39Z",
            "author_login": "radare"
          },
          {
            "sha": "92d45a6034fe60123adc23bf49b398809fe36d25",
            "date": "2025-01-14T11:11:00Z",
            "author_login": "radare"
          },
          {
            "sha": "07be136859c56f96a692c8d5d1a3531345f16a0c",
            "date": "2025-01-14T10:46:07Z",
            "author_login": "radare"
          },
          {
            "sha": "05ebe2e92fc1905702201106228b285c80bd958b",
            "date": "2025-01-14T10:28:47Z",
            "author_login": "radare"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-787",
    "description": "A heap buffer overflow in r_sleb128 function in radare2 5.4.2 and 5.4.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-22T19:16:22.423",
    "last_modified": "2024-11-21T06:56:42.550",
    "fix_date": "2021-10-29T22:25:13Z"
  },
  "references": [
    {
      "url": "https://github.com/radareorg/radare2/commit/637f4bd1af6752e28e0a9998e954e2e9ce6fa992",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/637f4bd1af6752e28e0a9998e954e2e9ce6fa992",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.459172",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-14T11:39:09Z",
    "pushed_at": "2025-01-14T11:39:05Z",
    "size": 182812,
    "stars": 20990,
    "forks": 3027,
    "open_issues": 874,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29143253,
      "Makefile": 262919,
      "Shell": 145034,
      "Meson": 123192,
      "C++": 82794,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1594,
      "avg_commits_per_week": 30.653846153846153,
      "days_active_last_year": 294
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:16.054007"
  }
}