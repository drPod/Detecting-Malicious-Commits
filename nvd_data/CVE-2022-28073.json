{
  "cve_id": "CVE-2022-28073",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "59a9dfb60acf8b5c0312061cffd9693fc9526053",
    "related_commits": [
      "59a9dfb60acf8b5c0312061cffd9693fc9526053",
      "59a9dfb60acf8b5c0312061cffd9693fc9526053"
    ],
    "patch_url": "https://github.com/radareorg/radare2/commit/59a9dfb60acf8b5c0312061cffd9693fc9526053.patch",
    "fix_commit_details": {
      "sha": "59a9dfb60acf8b5c0312061cffd9693fc9526053",
      "commit_date": "2021-10-29T22:51:53Z",
      "author": {
        "login": "trufae",
        "type": "User",
        "stats": {
          "total_commits": 1783,
          "average_weekly_commits": 2.140456182472989,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 235
        }
      },
      "commit_message": {
        "title": "Fix uaf crash in aaft (tests_64927) ##crash",
        "length": 90,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 15,
        "deletions": 9
      },
      "files": [
        {
          "filename": "libr/core/anal_tp.c",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -510,16 +510,16 @@ R_API void r_core_anal_type_match(RCore *core, RAnalFunction *fcn) {\n \t\treturn;\n \t}\n \tchar *pc = strdup (_pc);\n-\tRRegItem *r = r_reg_get (core->dbg->reg, pc, -1);\n-\tif (!r) {\n-\t\tfree (buf);\n-\t\treturn;\n-\t}\n \tr_cons_break_push (NULL, NULL);\n \tr_list_sort (fcn->bbs, bb_cmpaddr); // TODO: The algorithm can be more accurate if blocks are followed by their jmp/fail, not just by address\n \tr_list_foreach (fcn->bbs, it, bb) {\n \t\tut64 addr = bb->addr;\n \t\tint i = 0;\n+\t\tRRegItem *r = r_reg_get (core->dbg->reg, pc, -1);\n+\t\tif (!r) {\n+\t\t\tfree (buf);\n+\t\t\treturn;\n+\t\t}\n \t\tr_reg_set_value (core->dbg->reg, r, addr);\n \t\twhile (1) {\n \t\t\tif (r_cons_is_breaked ()) {\n@@ -549,6 +549,11 @@ R_API void r_core_anal_type_match(RCore *core, RAnalFunction *fcn) {\n \t\t\t}\n \t\t\tsdb_num_set (anal->esil->trace->db, sdb_fmt (\"0x%\"PFMT64x\".count\", addr), loop_count + 1, 0);\n \t\t\tif (r_anal_op_nonlinear (aop.type)) {   // skip the instr\n+\t\t\t\tRRegItem *r = r_reg_get (core->dbg->reg, pc, -1);\n+\t\t\t\tif (!r) {\n+\t\t\t\t\tfree (buf);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tr_reg_set_value (core->dbg->reg, r, addr + ret);\n \t\t\t} else {\n \t\t\t\tr_core_esil_step (core, UT64_MAX, NULL, NULL, false);"
        },
        {
          "filename": "libr/core/cmd_anal.c",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -4766,7 +4766,7 @@ void cmd_anal_reg(RCore *core, const char *str) {\n \tint size = 0, i, type = R_REG_TYPE_GPR;\n \tint bits = (core->anal->bits & R_SYS_BITS_64)? 64: 32;\n \tint use_colors = r_config_get_i (core->config, \"scr.color\");\n-\tRRegItem *r;\n+\tRRegItem *r = NULL;\n \tconst char *use_color;\n \tconst char *name;\n \tchar *arg;\n@@ -5098,6 +5098,7 @@ void cmd_anal_reg(RCore *core, const char *str) {\n \t\targ = strchr (str + 1, '=');\n \t\tif (arg) {\n \t\t\t*arg = 0;\n+\t\t\tut64 n = r_num_math (core->num, arg + 1);\n \t\t\tchar *ostr = r_str_trim_dup (str + 1);\n \t\t\tchar *regname = r_str_trim_nc (ostr);\n \t\t\tr = r_reg_get (core->dbg->reg, regname, -1);\n@@ -5113,8 +5114,7 @@ void cmd_anal_reg(RCore *core, const char *str) {\n \t\t\tif (r) {\n \t\t\t\t//eprintf (\"%s 0x%08\"PFMT64x\" -> \", str,\n \t\t\t\t//\tr_reg_get_value (core->dbg->reg, r));\n-\t\t\t\tr_reg_set_value (core->dbg->reg, r,\n-\t\t\t\t\t\tr_num_math (core->num, arg + 1));\n+\t\t\t\tr_reg_set_value (core->dbg->reg, r, n); \n \t\t\t\tr_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);\n \t\t\t\t//eprintf (\"0x%08\"PFMT64x\"\\n\",\n \t\t\t\t//\tr_reg_get_value (core->dbg->reg, r));"
        },
        {
          "filename": "libr/reg/rvalue.c",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -141,9 +141,10 @@ R_API ut64 r_reg_get_value_by_role(RReg *reg, RRegisterId role) {\n }\n \n R_API bool r_reg_set_value(RReg *reg, RRegItem *item, ut64 value) {\n+\tr_return_val_if_fail (reg && item, false);\n+\n \tut8 bytes[12];\n \tut8 *src = bytes;\n-\tr_return_val_if_fail (reg && item, false);\n \n \tif (r_reg_is_readonly (reg, item)) {\n \t\treturn true;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f85675c7a5d542a89318b62d4a4bc997e595e03",
            "date": "2025-01-14T11:01:39Z",
            "author_login": "radare"
          },
          {
            "sha": "92d45a6034fe60123adc23bf49b398809fe36d25",
            "date": "2025-01-14T11:11:00Z",
            "author_login": "radare"
          },
          {
            "sha": "07be136859c56f96a692c8d5d1a3531345f16a0c",
            "date": "2025-01-14T10:46:07Z",
            "author_login": "radare"
          },
          {
            "sha": "05ebe2e92fc1905702201106228b285c80bd958b",
            "date": "2025-01-14T10:28:47Z",
            "author_login": "radare"
          },
          {
            "sha": "e672c13d0f3620daf80a718e47d759f933bd8961",
            "date": "2025-01-14T10:18:30Z",
            "author_login": "trufae"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-416",
    "description": "A use after free in r_reg_set_value function in radare2 5.4.2 and 5.4.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-22T19:16:22.843",
    "last_modified": "2024-11-21T06:56:43.400",
    "fix_date": "2021-10-29T22:51:53Z"
  },
  "references": [
    {
      "url": "https://github.com/radareorg/radare2/commit/59a9dfb60acf8b5c0312061cffd9693fc9526053",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/59a9dfb60acf8b5c0312061cffd9693fc9526053",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.459852",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-14T11:39:09Z",
    "pushed_at": "2025-01-14T11:39:05Z",
    "size": 182812,
    "stars": 20990,
    "forks": 3027,
    "open_issues": 874,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29143253,
      "Makefile": 262919,
      "Shell": 145034,
      "Meson": 123192,
      "C++": 82794,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1594,
      "avg_commits_per_week": 30.653846153846153,
      "days_active_last_year": 294
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:16.054007"
  }
}