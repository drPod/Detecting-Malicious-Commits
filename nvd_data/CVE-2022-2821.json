{
  "cve_id": "CVE-2022-2821",
  "github_data": {
    "repository": "namelessmc/nameless",
    "fix_commit": "98fe4b7fce5509e49e71f1357118db887b8b88e0",
    "related_commits": [
      "98fe4b7fce5509e49e71f1357118db887b8b88e0",
      "98fe4b7fce5509e49e71f1357118db887b8b88e0"
    ],
    "patch_url": "https://github.com/namelessmc/nameless/commit/98fe4b7fce5509e49e71f1357118db887b8b88e0.patch",
    "fix_commit_details": {
      "sha": "98fe4b7fce5509e49e71f1357118db887b8b88e0",
      "commit_date": "2022-08-07T19:32:07Z",
      "author": {
        "login": "samerton",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add ability to rate limit via Validate class (#2998)",
        "length": 52,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 76,
        "additions": 70,
        "deletions": 6
      },
      "files": [
        {
          "filename": "core/classes/Core/Validate.php",
          "status": "modified",
          "additions": 59,
          "deletions": 2,
          "patch": "@@ -81,6 +81,11 @@ class Validate {\n      */\n     public const NOT_START_WITH = 'not_start_with';\n \n+    /**\n+     * @var string Set a rate limit\n+     */\n+    public const RATE_LIMIT = 'rate_limit';\n+\n     private DB $_db;\n \n     private ?string $_message = null;\n@@ -112,6 +117,7 @@ private function __construct() {\n      * @param array $items subset of inputs to be validated\n      *\n      * @return Validate New instance of Validate.\n+     * @throws Exception If provided configuration for a rule is invalid - not if a provided value is invalid!\n      */\n     public static function check(array $source, array $items = []): Validate {\n         $validator = new Validate();\n@@ -318,6 +324,51 @@ public static function check(array $source, array $items = []): Validate {\n                             break;\n                         }\n                         break;\n+\n+                    case self::RATE_LIMIT:\n+                        if (is_array($rule_value) && count($rule_value) === 2) {\n+                            // If array treat as [limit, seconds]\n+                            [$limit, $seconds] = $rule_value;\n+                        } else if (is_int($rule_value)) {\n+                            // If integer default seconds to 60\n+                            [$limit, $seconds] = [$rule_value, 60];\n+                        }\n+\n+                        if (!isset($limit) || !isset($seconds)) {\n+                            throw new Exception('Invalid rate limit configuration');\n+                        }\n+\n+                        $key = \"rate_limit_{$item}\";\n+                        $session = $_SESSION[$key];\n+                        $time = date('U');\n+                        $limit_end = $time + $seconds;\n+\n+                        if (isset($session) && is_array($session) && count($session) === 2) {\n+                            [$count, $expires] = $session;\n+                            $diff = $expires - $time;\n+\n+                            if (++$count >= $limit && $diff > 0) {\n+                                $validator->addError([\n+                                    'field' => $item,\n+                                    'rule' => self::RATE_LIMIT,\n+                                    'fallback' => \"$item has reached the rate limit which expires in $diff seconds.\",\n+                                    'meta' => ['expires' => $diff],\n+                                ]);\n+                                break;\n+                            }\n+\n+                            if ($diff <= 0) {\n+                                // Reset\n+                                $_SESSION[$key] = [1, $limit_end];\n+                                break;\n+                            }\n+\n+                            $_SESSION[$key] = [$count, $expires];\n+                        } else {\n+                            $_SESSION[$key] = [1, $limit_end];\n+                        }\n+\n+                        break;\n                 }\n             }\n         }\n@@ -379,7 +430,7 @@ public function errors(): array {\n         // Loop all errors to convert and get their custom messages\n         foreach ($this->_to_convert as $error) {\n \n-            $message = $this->getMessage($error['field'], $error['rule'], $error['fallback']);\n+            $message = $this->getMessage($error['field'], $error['rule'], $error['fallback'], $error['meta']);\n \n             // If there is no generic `message()` set or the translated message is not equal to generic message\n             // we can continue without worrying about duplications\n@@ -409,10 +460,11 @@ public function errors(): array {\n      * @param string $field name of field to search for.\n      * @param string $rule rule which check failed. should be from the constants defined above.\n      * @param string $fallback fallback default message if custom message and generic message are not supplied.\n+     * @param ?array $meta optional meta to provide to message.\n      *\n      * @return string Message for this field and rule.\n      */\n-    private function getMessage(string $field, string $rule, string $fallback): string {\n+    private function getMessage(string $field, string $rule, string $fallback, ?array $meta = []): string {\n \n         // No custom messages defined for this field\n         if (!isset($this->_messages[$field])) {\n@@ -436,6 +488,11 @@ private function getMessage(string $field, string $rule, string $fallback): stri\n             return $this->_message ?? $fallback;\n         }\n \n+        // If the message is a callback function, provide it with meta\n+        if (is_callable($this->_messages[$field][$rule])) {\n+            return $this->_messages[$field][$rule]($meta);\n+        }\n+\n         // Rule-specific custom message was supplied\n         return $this->_messages[$field][$rule];\n     }"
        },
        {
          "filename": "custom/languages/en_UK.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -798,6 +798,7 @@\n     \"general/previous\": \"Previous\",\n     \"general/privacy_policy\": \"Privacy Policy\",\n     \"general/profile\": \"Profile\",\n+    \"general/rate_limit\": \"Please try again in {{expires}} seconds\",\n     \"general/register\": \"Register\",\n     \"general/remove\": \"Remove\",\n     \"general/report\": \"Report\","
        },
        {
          "filename": "modules/Core/pages/login.php",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -54,12 +54,15 @@\n                 unset($_SESSION['remember'], $_SESSION['password'], $_SESSION['tfa']);\n             }\n \n+            $rate_limit = [5, 60]; // 5 attempts in 60 seconds - TODO allow this to be customised?\n+\n             if ($login_method == 'email') {\n                 $to_validate = [\n                     'email' => [\n                         Validate::REQUIRED => true,\n                         Validate::IS_BANNED => true,\n-                        Validate::IS_ACTIVE => true\n+                        Validate::IS_ACTIVE => true,\n+                        Validate::RATE_LIMIT => $rate_limit,\n                     ],\n                     'password' => [\n                         Validate::REQUIRED => true\n@@ -70,7 +73,8 @@\n                     'username' => [\n                         Validate::REQUIRED => true,\n                         Validate::IS_BANNED => true,\n-                        Validate::IS_ACTIVE => true\n+                        Validate::IS_ACTIVE => true,\n+                        Validate::RATE_LIMIT => $rate_limit,\n                     ],\n                     'password' => [\n                         Validate::REQUIRED => true\n@@ -82,12 +86,14 @@\n                 'email' => [\n                     Validate::REQUIRED => $language->get('user', 'must_input_email'),\n                     Validate::IS_BANNED => $language->get('user', 'account_banned'),\n-                    Validate::IS_ACTIVE => $language->get('user', 'inactive_account')\n+                    Validate::IS_ACTIVE => $language->get('user', 'inactive_account'),\n+                    Validate::RATE_LIMIT => fn($meta) => $language->get('general', 'rate_limit', $meta),\n                 ],\n                 'username' => [\n                     Validate::REQUIRED => ($login_method == 'username' ? $language->get('user', 'must_input_username') : $language->get('user', 'must_input_email_or_username')),\n                     Validate::IS_BANNED => $language->get('user', 'account_banned'),\n-                    Validate::IS_ACTIVE => $language->get('user', 'inactive_account')\n+                    Validate::IS_ACTIVE => $language->get('user', 'inactive_account'),\n+                    Validate::RATE_LIMIT => fn($meta) => $language->get('general', 'rate_limit', $meta),\n                 ],\n                 'password' => $language->get('user', 'must_input_password')\n             ]);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1e4031d9890bd578813fe413040747b01e28bbf1",
            "date": "2025-01-12T19:50:55Z",
            "author_login": "samerton"
          },
          {
            "sha": "9242bd180b2e1333a358ef1bdc90a937c214102d",
            "date": "2025-01-12T12:32:49Z",
            "author_login": "samerton"
          },
          {
            "sha": "fd32bea3b356f3d3167625e272d10c5bf21af2f5",
            "date": "2025-01-08T20:19:02Z",
            "author_login": "samerton"
          },
          {
            "sha": "702efce1ec38a5303352fe8a975e9d0e7086977f",
            "date": "2025-01-08T20:18:22Z",
            "author_login": "samerton"
          },
          {
            "sha": "1705691d328b7958fc8f956129b0822918be895c",
            "date": "2025-01-08T19:19:50Z",
            "author_login": "partydragen"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-304",
    "description": "Missing Critical Step in Authentication in GitHub repository namelessmc/nameless prior to v2.0.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-15T11:21:32.013",
    "last_modified": "2024-11-21T07:01:45.233",
    "fix_date": "2022-08-07T19:32:07Z"
  },
  "references": [
    {
      "url": "https://github.com/namelessmc/nameless/commit/98fe4b7fce5509e49e71f1357118db887b8b88e0",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c216db15-fe2f-42a7-852a-6c47498cf069",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/namelessmc/nameless/commit/98fe4b7fce5509e49e71f1357118db887b8b88e0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c216db15-fe2f-42a7-852a-6c47498cf069",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.217595",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Nameless",
    "owner": "namelessmc",
    "created_at": "2015-08-03T18:29:27Z",
    "updated_at": "2025-01-12T19:51:00Z",
    "pushed_at": "2025-01-12T20:27:20Z",
    "size": 63805,
    "stars": 618,
    "forks": 309,
    "open_issues": 126,
    "watchers": 618,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "main"
    ],
    "languages": {
      "PHP": 2152025,
      "Smarty": 974384,
      "CSS": 53767,
      "JavaScript": 18851,
      "Python": 5996,
      "HTML": 2462,
      "Shell": 2462
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:39:34.531582"
  }
}