{
  "cve_id": "CVE-2022-28927",
  "github_data": {
    "repository": "tindy2013/subconverter",
    "fix_commit": "ce8d2bd0f13f05fcbd2ed90755d097f402393dd3",
    "related_commits": [
      "ce8d2bd0f13f05fcbd2ed90755d097f402393dd3",
      "ce8d2bd0f13f05fcbd2ed90755d097f402393dd3"
    ],
    "patch_url": "https://github.com/tindy2013/subconverter/commit/ce8d2bd0f13f05fcbd2ed90755d097f402393dd3.patch",
    "fix_commit_details": {
      "sha": "ce8d2bd0f13f05fcbd2ed90755d097f402393dd3",
      "commit_date": "2022-04-03T16:38:44Z",
      "author": {
        "login": "tindy2013",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Enhancements",
        "length": 113,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 29,
        "additions": 17,
        "deletions": 12
      },
      "files": [
        {
          "filename": "src/generator/config/nodemanip.cpp",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -51,7 +51,7 @@ int addNodes(std::string link, std::vector<Proxy> &allNodes, int groupID, parse_\n     link = replaceAllDistinct(link, \"\\\"\", \"\");\n \n     /// script:filepath,arg1,arg2,...\n-    script_safe_runner(parse_set.js_runtime, parse_set.js_context, [&](qjs::Context &ctx)\n+    if(authorized) script_safe_runner(parse_set.js_runtime, parse_set.js_context, [&](qjs::Context &ctx)\n     {\n         if(startsWith(link, \"script:\")) /// process subscription with script\n         {\n@@ -380,7 +380,7 @@ void nodeRename(Proxy &node, const RegexMatchConfigs &rename_array, extra_settin\n \n     for(const RegexMatchConfig &x : rename_array)\n     {\n-        if(!x.Script.empty())\n+        if(!x.Script.empty() && ext.authorized)\n         {\n             script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx)\n             {\n@@ -432,7 +432,7 @@ std::string addEmoji(const Proxy &node, const RegexMatchConfigs &emoji_array, ex\n \n     for(const RegexMatchConfig &x : emoji_array)\n     {\n-        if(!x.Script.empty())\n+        if(!x.Script.empty() && ext.authorized)\n         {\n             std::string result;\n             script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx)\n@@ -481,7 +481,7 @@ void preprocessNodes(std::vector<Proxy> &nodes, extra_settings &ext)\n     if(ext.sort_flag)\n     {\n         bool failed = true;\n-        if(ext.sort_script.size())\n+        if(ext.sort_script.size() && ext.authorized)\n         {\n             std::string script = ext.sort_script;\n             if(startsWith(script, \"path:\"))"
        },
        {
          "filename": "src/generator/config/subexport.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -183,7 +183,7 @@ void groupGenerate(const std::string &rule, std::vector<Proxy> &nodelist, string\n         filtered_nodelist.emplace_back(rule.substr(2));\n     }\n #ifndef NO_JS_RUNTIME\n-    else if(startsWith(rule, \"script:\"))\n+    else if(startsWith(rule, \"script:\") && ext.authorized)\n     {\n         script_safe_runner(ext.js_runtime, ext.js_context, [&](qjs::Context &ctx){\n             std::string script = fileGet(rule.substr(7), true);"
        },
        {
          "filename": "src/generator/config/subexport.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -39,6 +39,7 @@ struct extra_settings\n     bool clash_classical_ruleset = false;\n     std::string sort_script = \"\";\n     std::string clash_proxies_style = \"flow\";\n+    bool authorized = false;\n \n     extra_settings() {};\n     extra_settings(const extra_settings&) = delete;"
        },
        {
          "filename": "src/handler/interfaces.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -407,6 +407,7 @@ std::string subconverter(RESPONSE_CALLBACK_ARGS)\n     std::string proxy = parseProxy(global.proxySubscription);\n \n     /// check other flags\n+    ext.authorized = authorized;\n     ext.append_proxy_type = argAppendType.get(global.appendType);\n     if((argTarget == \"clash\" || argTarget == \"clashr\") && argGenClashScript.is_undef())\n         argExpandRulesets.define(true);"
        },
        {
          "filename": "src/handler/settings.cpp",
          "status": "modified",
          "additions": 9,
          "deletions": 6,
          "patch": "@@ -577,6 +577,7 @@ void readYAMLConf(YAML::Node &node)\n         node[\"advanced\"][\"async_fetch_ruleset\"] >> global.asyncFetchRuleset;\n         node[\"advanced\"][\"skip_failed_links\"] >> global.skipFailedLinks;\n     }\n+    writeLog(0, \"Load preference settings in YAML format completed.\", LOG_LEVEL_INFO);\n }\n \n template <class T, class... U>\n@@ -786,13 +787,14 @@ void readTOMLConf(toml::value &root)\n     {\n         global.cacheSubscription = global.cacheConfig = global.cacheRuleset = 0;\n     }\n+\n+    writeLog(0, \"Load preference settings in TOML format completed.\", LOG_LEVEL_INFO);\n }\n \n void readConf()\n {\n     guarded_mutex guard(gMutexConfigure);\n-    //std::cerr<<\"Reading preference settings...\"<<std::endl;\n-    writeLog(0, \"Reading preference settings...\", LOG_LEVEL_INFO);\n+    writeLog(0, \"Loading preference settings...\", LOG_LEVEL_INFO);\n \n     eraseElements(global.excludeRemarks);\n     eraseElements(global.includeRemarks);\n@@ -815,11 +817,14 @@ void readConf()\n     catch (YAML::Exception &e)\n     {\n         //ignore yaml parse error\n+        writeLog(0, e.what(), LOG_LEVEL_DEBUG);\n+        writeLog(0, \"Unable to load preference settings as YAML.\", LOG_LEVEL_DEBUG);\n     }\n     catch (toml::exception &e)\n     {\n         //ignore toml parse error\n         writeLog(0, e.what(), LOG_LEVEL_DEBUG);\n+        writeLog(0, \"Unable to load preference settings as TOML.\", LOG_LEVEL_DEBUG);\n     }\n \n     INIReader ini;\n@@ -828,8 +833,7 @@ void readConf()\n     int retVal = ini.ParseFile(global.prefPath);\n     if(retVal != INIREADER_EXCEPTION_NONE)\n     {\n-        //std::cerr<<\"Unable to load preference settings. Reason: \"<<ini.GetLastError()<<\"\\n\";\n-        writeLog(0, \"Unable to load preference settings. Reason: \" + ini.GetLastError(), LOG_LEVEL_FATAL);\n+        writeLog(0, \"Unable to load preference settings as INI. Reason: \" + ini.GetLastError(), LOG_LEVEL_FATAL);\n         return;\n     }\n \n@@ -1070,8 +1074,7 @@ void readConf()\n     ini.GetBoolIfExist(\"async_fetch_ruleset\", global.asyncFetchRuleset);\n     ini.GetBoolIfExist(\"skip_failed_links\", global.skipFailedLinks);\n \n-    //std::cerr<<\"Read preference settings completed.\"<<std::endl;\n-    writeLog(0, \"Read preference settings completed.\", LOG_LEVEL_INFO);\n+    writeLog(0, \"Load preference settings in INI format completed.\", LOG_LEVEL_INFO);\n }\n \n int loadExternalYAML(YAML::Node &node, ExternalConfig &ext)"
        },
        {
          "filename": "src/handler/settings.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -29,7 +29,7 @@ struct Settings\n     bool printDbgInfo = false, CFWChildProcess = false, appendUserinfo = true, asyncFetchRuleset = false, surgeResolveHostname = true;\n     std::string accessToken, basePath = \"base\";\n     std::string custom_group;\n-    int logLevel = LOG_LEVEL_INFO;\n+    int logLevel = LOG_LEVEL_VERBOSE;\n     long maxAllowedDownloadSize = 1048576L;\n     string_map aliases;\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 5,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3f5ed82672f714425ba8dbfd8667539acb188c22",
            "date": "2024-12-31T07:38:56Z",
            "author_login": "tindy2013"
          },
          {
            "sha": "05910ac5ddbdb50dc66894e3fd86eb5687fb72de",
            "date": "2024-12-31T07:37:24Z",
            "author_login": "FanxJK"
          },
          {
            "sha": "1d56f44696db920330e828e198f77fbded157418",
            "date": "2024-12-08T14:27:01Z",
            "author_login": "tindy2013"
          },
          {
            "sha": "c207bfc1f03185114467b50a4ce97f2d0394c782",
            "date": "2024-11-28T17:00:26Z",
            "author_login": "lonelam"
          },
          {
            "sha": "79a7e888b11c343d18a064f08065e7962f1a1f49",
            "date": "2024-09-29T22:39:23Z",
            "author_login": "mrhaoxx"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "A remote code execution (RCE) vulnerability in Subconverter v0.7.2 allows attackers to execute arbitrary code via crafted config and url parameters.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-19T16:15:07.963",
    "last_modified": "2024-11-21T06:58:12.297",
    "fix_date": "2022-04-03T16:38:44Z"
  },
  "references": [
    {
      "url": "https://gist.github.com/CwithW/01a726e5af709655d6ee0b2067cdae03",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tindy2013/subconverter/commit/ce8d2bd0f13f05fcbd2ed90755d097f402393dd3",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://gist.github.com/CwithW/01a726e5af709655d6ee0b2067cdae03",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tindy2013/subconverter/commit/ce8d2bd0f13f05fcbd2ed90755d097f402393dd3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.133595",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "subconverter",
    "owner": "tindy2013",
    "created_at": "2019-10-31T04:51:54Z",
    "updated_at": "2025-01-14T12:18:17Z",
    "pushed_at": "2024-12-31T07:38:58Z",
    "size": 6931,
    "stars": 13722,
    "forks": 2930,
    "open_issues": 215,
    "watchers": 13722,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2234474,
      "Smarty": 17087,
      "CMake": 14799,
      "Shell": 7650,
      "Python": 3732,
      "Dockerfile": 2341,
      "C": 1291
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:59:37.892915"
  }
}