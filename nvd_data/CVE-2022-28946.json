{
  "cve_id": "CVE-2022-28946",
  "github_data": {
    "repository": "open-policy-agent/opa",
    "fix_commit": "e9d3828db670cbe11129885f37f08cbf04935264",
    "related_commits": [
      "e9d3828db670cbe11129885f37f08cbf04935264",
      "e9d3828db670cbe11129885f37f08cbf04935264"
    ],
    "patch_url": "https://github.com/open-policy-agent/opa/commit/e9d3828db670cbe11129885f37f08cbf04935264.patch",
    "fix_commit_details": {
      "sha": "e9d3828db670cbe11129885f37f08cbf04935264",
      "commit_date": "2022-04-05T11:17:11Z",
      "author": {
        "login": "srenatus",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "ast/parser: guard against invalid domains for \"some\" and \"every\" (#4548)",
        "length": 652,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 25,
        "additions": 24,
        "deletions": 1
      },
      "files": [
        {
          "filename": "ast/parser.go",
          "status": "modified",
          "additions": 18,
          "deletions": 1,
          "patch": "@@ -897,7 +897,16 @@ func (p *Parser) parseSome() *Expr {\n \tif term := p.parseTermInfixCall(); term != nil {\n \t\tif call, ok := term.Value.(Call); ok {\n \t\t\tswitch call[0].String() {\n-\t\t\tcase Member.Name, MemberWithKey.Name: // OK\n+\t\t\tcase Member.Name:\n+\t\t\t\tif len(call) != 3 {\n+\t\t\t\t\tp.illegal(\"illegal domain\")\n+\t\t\t\t\treturn nil\n+\t\t\t\t}\n+\t\t\tcase MemberWithKey.Name:\n+\t\t\t\tif len(call) != 4 {\n+\t\t\t\t\tp.illegal(\"illegal domain\")\n+\t\t\t\t\treturn nil\n+\t\t\t\t}\n \t\t\tdefault:\n \t\t\t\tp.illegal(\"expected `x in xs` or `x, y in xs` expression\")\n \t\t\t\treturn nil\n@@ -972,9 +981,17 @@ func (p *Parser) parseEvery() *Expr {\n \t}\n \tswitch call[0].String() {\n \tcase Member.Name: // x in xs\n+\t\tif len(call) != 3 {\n+\t\t\tp.illegal(\"illegal domain\")\n+\t\t\treturn nil\n+\t\t}\n \t\tqb.Value = call[1]\n \t\tqb.Domain = call[2]\n \tcase MemberWithKey.Name: // k, v in xs\n+\t\tif len(call) != 4 {\n+\t\t\tp.illegal(\"illegal domain\")\n+\t\t\treturn nil\n+\t\t}\n \t\tqb.Key = call[1]\n \t\tqb.Value = call[2]\n \t\tqb.Domain = call[3]"
        },
        {
          "filename": "ast/parser_test.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -785,6 +785,10 @@ func TestSomeDeclExpr(t *testing.T) {\n \t\t\t},\n \t\t\tWith: []*With{{Value: ArrayTerm(), Target: NewTerm(MustParseRef(\"input\"))}},\n \t\t}, opts)\n+\n+\tassertParseErrorContains(t, \"invalid domain (internal.member_2)\", \"some internal.member_2()\", \"illegal domain\", opts)\n+\tassertParseErrorContains(t, \"invalid domain (internal.member_3)\", \"some internal.member_3()\", \"illegal domain\", opts)\n+\n }\n \n func TestEvery(t *testing.T) {\n@@ -851,6 +855,8 @@ func TestEvery(t *testing.T) {\n \t\t\"unexpected ident token: expected \\\\n or ; or }\\n\\tevery x\\n\", // this asserts that the tail of the error message doesn't contain a hint\n \t)\n \n+\tassertParseErrorContains(t, \"invalid domain (internal.member_2)\", \"every internal.member_2()\", \"illegal domain\", opts)\n+\tassertParseErrorContains(t, \"invalid domain (internal.member_3)\", \"every internal.member_3()\", \"illegal domain\", opts)\n }\n \n func TestNestedExpressions(t *testing.T) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f270d1cf22f3c390e7d303a046bb8241138494bc",
            "date": "2025-01-13T19:37:35Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a56d28af82910f5861961758abaa23c929cfe4c6",
            "date": "2025-01-13T12:04:24Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "269a118ad9f1b5673c68e97803d722fd4e28c0a1",
            "date": "2025-01-13T10:48:03Z",
            "author_login": "charlieegan3"
          },
          {
            "sha": "93baf4e98a81d03f7de24b9669e81a7bf87d3934",
            "date": "2025-01-11T21:30:16Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b0be9553bb4c7f563850591e7c40aad4a8b06d29",
            "date": "2025-01-11T21:16:15Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": null,
    "description": "An issue in the component ast/parser.go of Open Policy Agent v0.39.0 causes the application to incorrectly interpret every expression, causing a Denial of Service (DoS) via triggering out-of-range memory access.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-19T19:15:07.737",
    "last_modified": "2024-11-21T06:58:13.870",
    "fix_date": "2022-04-05T11:17:11Z"
  },
  "references": [
    {
      "url": "https://github.com/open-policy-agent/opa/commit/e9d3828db670cbe11129885f37f08cbf04935264",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-policy-agent/opa/commit/e9d3828db670cbe11129885f37f08cbf04935264",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.133787",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "opa",
    "owner": "open-policy-agent",
    "created_at": "2015-12-28T22:08:25Z",
    "updated_at": "2025-01-14T14:30:21Z",
    "pushed_at": "2025-01-13T20:58:04Z",
    "size": 1086711,
    "stars": 9857,
    "forks": 1368,
    "open_issues": 386,
    "watchers": 9857,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "main-1.0",
      "master",
      "release-0.12",
      "release-0.13",
      "release-0.14",
      "release-0.16",
      "release-0.17",
      "release-0.19",
      "release-0.20",
      "release-0.21",
      "release-0.23",
      "release-0.30",
      "release-0.32",
      "release-0.33",
      "release-0.34",
      "release-0.36",
      "release-0.37",
      "release-0.38",
      "release-0.42",
      "release-0.43",
      "release-0.46",
      "release-0.47",
      "release-0.49",
      "release-0.50",
      "release-0.53",
      "release-0.57",
      "release-0.64",
      "release-0.67"
    ],
    "languages": {
      "Go": 8113294,
      "C": 934778,
      "C++": 709198,
      "Open Policy Agent": 42095,
      "Makefile": 22395,
      "Shell": 18937,
      "JavaScript": 14203,
      "Python": 5616,
      "Dockerfile": 2601
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:06:07.409105"
  }
}