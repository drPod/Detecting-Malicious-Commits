{
  "cve_id": "CVE-2022-2900",
  "github_data": {
    "repository": "ionicabizau/parse-url",
    "fix_commit": "b88c81df8f4c5168af454eaa4f92afa9349e4e13",
    "related_commits": [
      "b88c81df8f4c5168af454eaa4f92afa9349e4e13",
      "b88c81df8f4c5168af454eaa4f92afa9349e4e13"
    ],
    "patch_url": "https://github.com/ionicabizau/parse-url/commit/b88c81df8f4c5168af454eaa4f92afa9349e4e13.patch",
    "fix_commit_details": {
      "sha": "b88c81df8f4c5168af454eaa4f92afa9349e4e13",
      "commit_date": "2022-08-03T08:22:27Z",
      "author": {
        "login": "IonicaBizau",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Throw if url is invalid. Add a length limit.",
        "length": 44,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 62,
        "additions": 49,
        "deletions": 13
      },
      "files": [
        {
          "filename": "lib/index.js",
          "status": "modified",
          "additions": 17,
          "deletions": 3,
          "patch": "@@ -32,18 +32,27 @@ import normalizeUrl from \"normalize-url\";\n  *    - `search` (String): The url querystring value.\n  *    - `href` (String): The input url.\n  *    - `query` (Object): The url querystring, parsed as object.\n+ *    - `parse_failed` (Boolean): Whether the parsing failed or not.\n  */\n const parseUrl = (url, normalize = false) => {\n \n     // Constants\n     const GIT_RE = /(^(git@|http(s)?:\\/\\/)([\\w\\.\\-@]+)(\\/|:))(([\\~,\\.\\w,\\-,\\_,\\/]+)(.git){0,1}((\\/){0,1}))/\n \n-    if (typeof url !== \"string\" || !url.trim()) {\n-        const err = new Error(\"Invalid url.\")\n+    const throwErr = msg => {\n+        const err = new Error(msg)\n         err.subject_url = url\n         throw err\n     }\n \n+    if (typeof url !== \"string\" || !url.trim()) {\n+        throwErr(\"Invalid url.\")\n+    }\n+\n+    if (url.length > parseUrl.MAX_INPUT_LENGTH) {\n+        throwErr(\"Input exceeds maximum length. If needed, change the value of parseUrl.MAX_INPUT_LENGTH.\")\n+    }\n+\n     if (normalize) {\n         if (typeof normalize !== \"object\") {\n             normalize = {\n@@ -56,7 +65,7 @@ const parseUrl = (url, normalize = false) => {\n     const parsed = parsePath(url)\n \n     // Potential git-ssh urls\n-    if (parsed.protocol === \"file\") {\n+    if (parsed.parse_failed) {\n         const matched  = parsed.href.match(GIT_RE)\n         if (matched) {\n             parsed.protocols = [\"ssh\"]\n@@ -65,10 +74,15 @@ const parseUrl = (url, normalize = false) => {\n             parsed.host = matched[4]\n             parsed.user = \"git\"\n             parsed.pathname = `/${matched[6]}`\n+            parsed.parse_failed = false\n+        } else {\n+            throwErr(\"URL parsing failed.\")\n         }\n     }\n \n     return parsed;\n }\n \n+parseUrl.MAX_INPUT_LENGTH = 2048\n+\n export default parseUrl;"
        },
        {
          "filename": "test/index.js",
          "status": "modified",
          "additions": 32,
          "deletions": 10,
          "patch": "@@ -17,6 +17,7 @@ const INPUTS = [\n           , hash: \"\"\n           , search: \"\"\n           , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n@@ -32,6 +33,7 @@ const INPUTS = [\n           , hash: \"\"\n           , search: \"\"\n           , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n@@ -47,6 +49,7 @@ const INPUTS = [\n           , hash: \"some-hash?foo=bar\"\n           , search: \"\"\n           , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n@@ -62,6 +65,7 @@ const INPUTS = [\n           , hash: \"\"\n           , search: \"\"\n           , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n@@ -77,6 +81,7 @@ const INPUTS = [\n           , hash: \"\"\n           , search: \"\"\n           , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n@@ -92,6 +97,7 @@ const INPUTS = [\n           , hash: \"\"\n           , search: \"\"\n           , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n@@ -107,22 +113,24 @@ const INPUTS = [\n           , hash: \"http://a:1:1\"\n           , search: \"\"\n           , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n         [\"git@github.my-enterprise.com:my-org/my-repo.git\", false],\n         {\n             protocols: [ 'ssh' ]\n-            , protocol: 'ssh'\n-            , port: ''\n-            , resource: 'github.my-enterprise.com'\n-            , host: 'github.my-enterprise.com'\n-            , user: 'git'\n-            , password: ''\n-            , pathname: '/my-org/my-repo.git'\n-            , hash: ''\n-            , search: ''\n-            , query: {}\n+          , protocol: 'ssh'\n+          , port: ''\n+          , resource: 'github.my-enterprise.com'\n+          , host: 'github.my-enterprise.com'\n+          , user: 'git'\n+          , password: ''\n+          , pathname: '/my-org/my-repo.git'\n+          , hash: ''\n+          , search: ''\n+          , query: {}\n+          , parse_failed: false\n         }\n     ]\n   , [\n@@ -138,6 +146,7 @@ const INPUTS = [\n         , hash: \"\"\n         , search: \"\"\n         , query: {}\n+        , parse_failed: false\n       }\n   ]\n ];\n@@ -165,4 +174,17 @@ tester.describe(\"check urls\", test => {\n             parseUrl(\"\")\n         }).toThrow(/invalid url/i)\n     })\n+\n+    test.should(\"throw if url is too long\", () => {\n+        parseUrl.MAX_INPUT_LENGTH = 10\n+        test.expect(() => {\n+            parseUrl(\"https://domain.com/\")\n+        }).toThrow(/input exceeds maximum length/i)\n+    })\n+\n+    test.should(\"throw if url is invalid\", () => {\n+        test.expect(() => {\n+            parseUrl(\"foo\")\n+        }).toThrow(/url parsing failed/i)\n+    })\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bb9472d885d6a083c726b24686700d75b25f2b91",
            "date": "2024-04-03T05:25:50Z",
            "author_login": "IonicaBizau"
          },
          {
            "sha": "a58414d3c7bb26507b2eb5aa3aa9e7b84743ff8d",
            "date": "2024-04-03T05:24:12Z",
            "author_login": "IonicaBizau"
          },
          {
            "sha": "35b9f17915348802f8865b5501c3fc8a35264cf1",
            "date": "2024-04-03T05:22:59Z",
            "author_login": "IonicaBizau"
          },
          {
            "sha": "eaaf5e117b77f8e11ecedf12efbe0cca3d0af531",
            "date": "2024-04-03T05:22:51Z",
            "author_login": "IonicaBizau"
          },
          {
            "sha": "752c2254424ebd332eb542ef560076e4f2acc396",
            "date": "2024-04-03T05:18:07Z",
            "author_login": "IonicaBizau"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-918",
    "description": "Server-Side Request Forgery (SSRF) in GitHub repository ionicabizau/parse-url prior to 8.1.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-14T11:15:47.513",
    "last_modified": "2024-11-21T07:01:53.857",
    "fix_date": "2022-08-03T08:22:27Z"
  },
  "references": [
    {
      "url": "https://github.com/ionicabizau/parse-url/commit/b88c81df8f4c5168af454eaa4f92afa9349e4e13",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1b4c972a-abc8-41eb-a2e1-696db746b5fd",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ionicabizau/parse-url/commit/b88c81df8f4c5168af454eaa4f92afa9349e4e13",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1b4c972a-abc8-41eb-a2e1-696db746b5fd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.112081",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "parse-url",
    "owner": "ionicabizau",
    "created_at": "2017-08-21T08:59:30Z",
    "updated_at": "2024-12-21T22:09:06Z",
    "pushed_at": "2024-04-03T05:25:55Z",
    "size": 361,
    "stars": 58,
    "forks": 37,
    "open_issues": 0,
    "watchers": 58,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 12831,
      "TypeScript": 784
    },
    "commit_activity": {
      "total_commits_last_year": 10,
      "avg_commits_per_week": 0.19230769230769232,
      "days_active_last_year": 3
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:35:45.008088"
  }
}