{
  "cve_id": "CVE-2022-29184",
  "github_data": {
    "repository": "gocd/gocd",
    "fix_commit": "37d35115db2ada2190173f9413cfe1bc6c295ecb",
    "related_commits": [
      "37d35115db2ada2190173f9413cfe1bc6c295ecb",
      "37d35115db2ada2190173f9413cfe1bc6c295ecb"
    ],
    "patch_url": "https://github.com/gocd/gocd/commit/37d35115db2ada2190173f9413cfe1bc6c295ecb.patch",
    "fix_commit_details": {
      "sha": "37d35115db2ada2190173f9413cfe1bc6c295ecb",
      "commit_date": "2022-03-04T10:21:03Z",
      "author": {
        "login": "chadlwilson",
        "type": "User",
        "stats": {
          "total_commits": 5215,
          "average_weekly_commits": 8.991379310344827,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 185
        }
      },
      "commit_message": {
        "title": "Improve escaping of arguments when constructing Hg command calls",
        "length": 64,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 130,
        "additions": 86,
        "deletions": 44
      },
      "files": [
        {
          "filename": "common/src/test/java/com/thoughtworks/go/domain/materials/mercurial/HgCommandTest.java",
          "status": "modified",
          "additions": 50,
          "deletions": 14,
          "patch": "@@ -35,27 +35,28 @@\n import static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.*;\n \n public class HgCommandTest {\n+\n+    private static final String REVISION_0 = \"b61d12de515d82d3a377ae3aae6e8abe516a2651\";\n+    private static final String REVISION_1 = \"35ff2159f303ecf986b3650fc4299a6ffe5a14e1\";\n+    private static final String REVISION_2 = \"ca3ebb67f527c0ad7ed26b789056823d8b9af23f\";\n+\n     private File serverRepo;\n     private File clientRepo;\n \n     private HgCommand hgCommand;\n \n     private InMemoryStreamConsumer outputStreamConsumer = inMemoryConsumer();\n     private File workingDirectory;\n-    private static final String REVISION_0 = \"b61d12de515d82d3a377ae3aae6e8abe516a2651\";\n-    private static final String REVISION_1 = \"35ff2159f303ecf986b3650fc4299a6ffe5a14e1\";\n-    private static final String REVISION_2 = \"ca3ebb67f527c0ad7ed26b789056823d8b9af23f\";\n     private File secondBranchWorkingCopy;\n \n     @BeforeEach\n     public void setUp(@TempDir Path tempDir) throws IOException {\n         serverRepo = TempDirUtils.createTempDirectoryIn(tempDir, \"testHgServerRepo\").toFile();\n-        clientRepo =  TempDirUtils.createTempDirectoryIn(tempDir, \"testHgClientRepo\").toFile();\n-        secondBranchWorkingCopy =  TempDirUtils.createTempDirectoryIn(tempDir, \"second\").toFile();\n+        clientRepo = TempDirUtils.createTempDirectoryIn(tempDir, \"testHgClientRepo\").toFile();\n+        secondBranchWorkingCopy = TempDirUtils.createTempDirectoryIn(tempDir, \"second\").toFile();\n \n         setUpServerRepoFromHgBundle(serverRepo, new File(\"../common/src/test/resources/data/hgrepo.hgbundle\"));\n         workingDirectory = new File(clientRepo.getPath());\n@@ -65,11 +66,32 @@ public void setUp(@TempDir Path tempDir) throws IOException {\n \n     @Test\n     public void shouldCloneFromRemoteRepo() {\n-        assertThat(clientRepo.listFiles().length > 0, is(true));\n+        assertThat(clientRepo.listFiles().length, is(2));\n+    }\n+\n+    @Test\n+    public void shouldCloneWithEscapedRepoUrl() {\n+        hgCommand.clone(outputStreamConsumer, new UrlArgument(echoingAliasFor(\"clone\")));\n+        assertNoUnescapedEcho();\n     }\n \n     @Test\n-    public void shouldGetLatestModifications() throws Exception {\n+    public void shouldCloneWithEscapedBranch() {\n+        hgCommand = new HgCommand(null, workingDirectory, echoingAliasFor(\"clone\"), serverRepo.getAbsolutePath(), null);\n+        hgCommand.clone(outputStreamConsumer, new UrlArgument(serverRepo.getAbsolutePath()));\n+        assertNoUnescapedEcho();\n+    }\n+\n+    private String echoingAliasFor(String command) {\n+        return String.format(\"--config=alias.%s=!echo hello world\", command);\n+    }\n+\n+    private void assertNoUnescapedEcho() {\n+        assertThat(outputStreamConsumer.getAllOutput(), not(containsString(\"\\nhello world\\n\")));\n+    }\n+\n+    @Test\n+    public void shouldGetLatestModifications() {\n         List<Modification> actual = hgCommand.latestOneModificationAsModifications();\n         assertThat(actual.size(), is(1));\n         final Modification modification = actual.get(0);\n@@ -79,7 +101,7 @@ public void shouldGetLatestModifications() throws Exception {\n     }\n \n     @Test\n-    public void shouldNotIncludeCommitFromAnotherBranchInGetLatestModifications() throws Exception {\n+    public void shouldNotIncludeCommitFromAnotherBranchInGetLatestModifications() {\n         Modification lastCommit = hgCommand.latestOneModificationAsModifications().get(0);\n \n         makeACommitToSecondBranch();\n@@ -98,7 +120,7 @@ public void shouldGetModifications() throws Exception {\n     }\n \n     @Test\n-    public void shouldNotGetModificationsFromOtherBranches() throws Exception {\n+    public void shouldNotGetModificationsFromOtherBranches() {\n         makeACommitToSecondBranch();\n         hg(workingDirectory, \"pull\").runOrBomb(null);\n \n@@ -131,7 +153,7 @@ public void shouldUpdateToSpecificRevisionOnGivenBranch() {\n     }\n \n     @Test\n-    public void shouldThrowExceptionIfUpdateFails() throws Exception {\n+    public void shouldThrowExceptionIfUpdateFails() {\n         InMemoryStreamConsumer output =\n                 ProcessOutputStreamConsumer.inMemoryConsumer();\n \n@@ -140,7 +162,8 @@ public void shouldThrowExceptionIfUpdateFails() throws Exception {\n \n         // now hg pull will fail and throw an exception\n         assertThatThrownBy(() -> hgCommand.updateTo(new StringRevision(\"tip\"), output))\n-                .isExactlyInstanceOf(RuntimeException.class);\n+                .isExactlyInstanceOf(RuntimeException.class)\n+                .hasMessageContaining(\"Unable to update to revision [StringRevision[tip]]\");\n     }\n \n     @Test\n@@ -151,7 +174,20 @@ public void shouldGetWorkingUrl() {\n     }\n \n     @Test\n-    public void shouldThrowExceptionForBadConnection() throws Exception {\n+    public void shouldCheckConnection() {\n+        hgCommand.checkConnection(new UrlArgument(serverRepo.getAbsolutePath()));\n+    }\n+\n+    @Test\n+    public void shouldCheckConnectionWithEscapedRepoUrl() {\n+        assertThatThrownBy(() -> hgCommand.checkConnection(new UrlArgument(echoingAliasFor(\"id\"))))\n+                .isExactlyInstanceOf(CommandLineException.class)\n+                .hasMessageContaining(\"repository --config\")\n+                .hasMessageContaining(\"not found\");\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionForBadConnection() {\n         String url = \"http://not-exists\";\n         HgCommand hgCommand = new HgCommand(null, null, null, null, null);\n "
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/domain/materials/mercurial/HgCommand.java",
          "status": "modified",
          "additions": 36,
          "deletions": 30,
          "patch": "@@ -24,8 +24,8 @@\n import org.slf4j.LoggerFactory;\n \n import java.io.File;\n-import java.io.UnsupportedEncodingException;\n import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -52,27 +52,31 @@ public HgCommand(String materialFingerprint, File workingDir, String branch, Str\n         this.secrets = secrets != null ? secrets : new ArrayList<>();\n     }\n \n-\n-    private boolean pull(ConsoleOutputStreamConsumer outputStreamConsumer) {\n-        CommandLine hg = hg(\"pull\", \"-b\", branch, \"--config\", String.format(\"paths.default=%s\", url));\n-        return execute(hg, outputStreamConsumer) == 0;\n-    }\n-\n     public HgVersion version() {\n-        CommandLine hg = createCommandLine(\"hg\").withArgs(\"version\").withEncoding(\"utf-8\");\n+        CommandLine hg = createCommandLine(\"hg\").withArgs(\"version\").withEncoding(\"UTF-8\");\n         String hgOut = execute(hg, new NamedProcessTag(\"hg version check\")).outputAsString();\n         return HgVersion.parse(hgOut);\n     }\n \n-\n     public int clone(ConsoleOutputStreamConsumer outputStreamConsumer, UrlArgument repositoryUrl) {\n-        CommandLine hg = createCommandLine(\"hg\").withArgs(\"clone\").withArg(\"-b\").withArg(branch).withArg(repositoryUrl)\n-                .withArg(workingDir.getAbsolutePath()).withNonArgSecrets(secrets).withEncoding(\"utf-8\");\n+        CommandLine hg = createCommandLine(\"hg\")\n+                .withArgs(\"clone\")\n+                .withArg(branchArg())\n+                .withArg(\"--\")\n+                .withArg(repositoryUrl)\n+                .withArg(workingDir.getAbsolutePath())\n+                .withNonArgSecrets(secrets)\n+                .withEncoding(\"UTF-8\");\n         return execute(hg, outputStreamConsumer);\n     }\n \n     public void checkConnection(UrlArgument repositoryURL) {\n-        execute(createCommandLine(\"hg\").withArgs(\"id\", \"--id\").withArg(repositoryURL).withNonArgSecrets(secrets).withEncoding(\"utf-8\"), new NamedProcessTag(repositoryURL.forDisplay()));\n+        CommandLine hg = createCommandLine(\"hg\")\n+                .withArgs(\"id\", \"--id\", \"--\")\n+                .withArg(repositoryURL)\n+                .withNonArgSecrets(secrets)\n+                .withEncoding(\"UTF-8\");\n+        execute(hg, new NamedProcessTag(repositoryURL.forDisplay()));\n     }\n \n     public void updateTo(Revision revision, ConsoleOutputStreamConsumer outputStreamConsumer) {\n@@ -81,6 +85,11 @@ public void updateTo(Revision revision, ConsoleOutputStreamConsumer outputStream\n         }\n     }\n \n+    private boolean pull(ConsoleOutputStreamConsumer outputStreamConsumer) {\n+        CommandLine hg = hg(\"pull\", branchArg(), \"--config\", String.format(\"paths.default=%s\", url));\n+        return execute(hg, outputStreamConsumer) == 0;\n+    }\n+\n     private boolean update(Revision revision, ConsoleOutputStreamConsumer outputStreamConsumer) {\n         CommandLine hg = hg(\"update\", \"--clean\", \"-r\", revision.getRevision());\n         return execute(hg, outputStreamConsumer) == 0;\n@@ -105,36 +114,29 @@ public List<Modification> latestOneModificationAsModifications() {\n         return findRecentModifications(1);\n     }\n \n-    private String templatePath() {\n-        if (templatePath == null) {\n-            String file = HgCommand.class.getResource(\"/hg.template\").getFile();\n-            try {\n-                templatePath = URLDecoder.decode(new File(file).getAbsolutePath(), \"UTF-8\");\n-            } catch (UnsupportedEncodingException e) {\n-                templatePath = URLDecoder.decode(new File(file).getAbsolutePath());\n-            }\n-        }\n-        return templatePath;\n-    }\n-\n-    List<Modification> findRecentModifications(int count) {\n+    private List<Modification> findRecentModifications(int count) {\n         // Currently impossible to check modifications on a remote repository.\n         InMemoryStreamConsumer consumer = inMemoryConsumer();\n         bombUnless(pull(consumer), \"Failed to run hg pull command: \" + consumer.getAllOutput());\n-        CommandLine hg = hg(\"log\", \"--limit\", String.valueOf(count), \"-b\", branch, \"--style\", templatePath());\n+        CommandLine hg = hg(\"log\", \"--limit\", String.valueOf(count), branchArg(), \"--style\", templatePath());\n         return new HgModificationSplitter(execute(hg)).modifications();\n     }\n \n     public List<Modification> modificationsSince(Revision revision) {\n         InMemoryStreamConsumer consumer = inMemoryConsumer();\n         bombUnless(pull(consumer), \"Failed to run hg pull command: \" + consumer.getAllOutput());\n-        CommandLine hg = hg(\"log\",\n-                \"-r\", \"tip:\" + revision.getRevision(),\n-                \"-b\", branch,\n-                \"--style\", templatePath());\n+        CommandLine hg = hg(\"log\", \"-r\", \"tip:\" + revision.getRevision(), branchArg(), \"--style\", templatePath());\n         return new HgModificationSplitter(execute(hg)).filterOutRevision(revision);\n     }\n \n+    private String templatePath() {\n+        if (templatePath == null) {\n+            String file = HgCommand.class.getResource(\"/hg.template\").getFile();\n+            templatePath = URLDecoder.decode(new File(file).getAbsolutePath(), StandardCharsets.UTF_8);\n+        }\n+        return templatePath;\n+    }\n+\n     public ConsoleResult workingRepositoryUrl() {\n         CommandLine hg = hg(\"showconfig\", \"paths.default\");\n \n@@ -144,6 +146,10 @@ public ConsoleResult workingRepositoryUrl() {\n         return result;\n     }\n \n+    private String branchArg() {\n+        return \"--branch=\" + branch;\n+    }\n+\n     private CommandLine hg(String... arguments) {\n         return createCommandLine(\"hg\").withArgs(arguments).withNonArgSecrets(secrets).withWorkingDir(workingDir).withEncoding(\"UTF-8\");\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "745b8846335e2d352bd17223122b3585ba63bc18",
            "date": "2025-01-14T11:10:03Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "7e0e0c87401d8ce8d76c651194e9165523416037",
            "date": "2025-01-14T11:09:46Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "99aa6ecc886d9c30f79601e30c06224112da3045",
            "date": "2025-01-14T11:09:29Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "6e87477e6527985cddd634b48bd3505be1079d4d",
            "date": "2025-01-14T11:09:11Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "90fccf4ddc5b1641b3fcaadd6eaeff34501aefb6",
            "date": "2025-01-14T10:44:32Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-77",
    "description": "GoCD is a continuous delivery server. In GoCD versions prior to 22.1.0, it is possible for existing authenticated users who have permissions to edit or create pipeline materials or pipeline configuration repositories to get remote code execution capability on the GoCD server via configuring a malicious branch name which abuses Mercurial hooks/aliases to exploit a command injection weakness. An attacker would require access to an account with existing GoCD administration permissions to either create/edit (`hg`-based) configuration repositories; create/edit pipelines and their (`hg`-based) materials; or, where \"pipelines-as-code\" configuration repositories are used, to commit malicious configuration to such an external repository which will be automatically parsed into a pipeline configuration and (`hg`) material definition by the GoCD server. This issue is fixed in GoCD 22.1.0. As a workaround, users who do not use/rely upon Mercurial materials can uninstall/remove the `hg`/Mercurial binary from the underlying GoCD Server operating system or Docker image.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-20T20:15:10.073",
    "last_modified": "2024-11-21T06:58:39.750",
    "fix_date": "2022-03-04T10:21:03Z"
  },
  "references": [
    {
      "url": "https://github.com/gocd/gocd/commit/37d35115db2ada2190173f9413cfe1bc6c295ecb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/releases/tag/22.1.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/security/advisories/GHSA-vf5r-r7j2-cf2h",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.gocd.org/releases/#22-1-0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/commit/37d35115db2ada2190173f9413cfe1bc6c295ecb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/releases/tag/22.1.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/security/advisories/GHSA-vf5r-r7j2-cf2h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.gocd.org/releases/#22-1-0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.140299",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gocd",
    "owner": "gocd",
    "created_at": "2013-12-13T05:26:16Z",
    "updated_at": "2025-01-14T12:47:48Z",
    "pushed_at": "2025-01-14T11:10:10Z",
    "size": 393992,
    "stars": 7159,
    "forks": 972,
    "open_issues": 82,
    "watchers": 7159,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 20251061,
      "TypeScript": 4424594,
      "Groovy": 2080119,
      "JavaScript": 753678,
      "SCSS": 564746,
      "Ruby": 364252,
      "HTML": 253777,
      "XSLT": 202698,
      "NSIS": 24216,
      "Shell": 15469,
      "FreeMarker": 13061,
      "EJS": 1626,
      "CSS": 1575,
      "Batchfile": 474
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:11:02.445502"
  }
}