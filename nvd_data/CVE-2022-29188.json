{
  "cve_id": "CVE-2022-29188",
  "github_data": {
    "repository": "stripe/smokescreen",
    "fix_commit": "dea7b3c89df000f4072ff9866d61d78e30df6a36",
    "related_commits": [
      "dea7b3c89df000f4072ff9866d61d78e30df6a36",
      "dea7b3c89df000f4072ff9866d61d78e30df6a36"
    ],
    "patch_url": "https://github.com/stripe/smokescreen/commit/dea7b3c89df000f4072ff9866d61d78e30df6a36.patch",
    "fix_commit_details": {
      "sha": "dea7b3c89df000f4072ff9866d61d78e30df6a36",
      "commit_date": "2022-04-28T02:11:50Z",
      "author": {
        "login": "jjiang-stripe",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix hostname parsing for square brackets",
        "length": 40,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 87,
        "additions": 69,
        "deletions": 18
      },
      "files": [
        {
          "filename": "pkg/smokescreen/smokescreen.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -457,7 +457,7 @@ func BuildProxy(config *Config) *goproxy.ProxyHttpServer {\n \t\tpctx.RoundTripper = rtFn\n \n \t\t// Build an address parsable by net.ResolveTCPAddr\n-\t\tremoteHost := req.Host\n+\t\tremoteHost := req.URL.Hostname()\n \t\tif strings.LastIndex(remoteHost, \":\") <= strings.LastIndex(remoteHost, \"]\") {\n \t\t\tswitch req.URL.Scheme {\n \t\t\tcase \"http\":\n@@ -600,7 +600,7 @@ func handleConnect(config *Config, pctx *goproxy.ProxyCtx) error {\n \tsctx := pctx.UserData.(*smokescreenContext)\n \n \t// Check if requesting role is allowed to talk to remote\n-\tsctx.decision, sctx.lookupTime, pctx.Error = checkIfRequestShouldBeProxied(config, pctx.Req, pctx.Req.Host)\n+\tsctx.decision, sctx.lookupTime, pctx.Error = checkIfRequestShouldBeProxied(config, pctx.Req, pctx.Req.URL.Hostname())\n \tif pctx.Error != nil {\n \t\treturn pctx.Error\n \t}"
        },
        {
          "filename": "pkg/smokescreen/smokescreen_test.go",
          "status": "modified",
          "additions": 48,
          "deletions": 3,
          "patch": "@@ -107,11 +107,11 @@ func TestClassifyAddr(t *testing.T) {\n \t}\n }\n \n-func TestUnsafeAllowPrivateRanges (t *testing.T) {\n+func TestUnsafeAllowPrivateRanges(t *testing.T) {\n \ta := assert.New(t)\n \n \tconf := NewConfig()\n-\ta.NoError(conf.SetDenyRanges([]string {\"192.168.0.0/24\", \"10.0.0.0/8\"}))\n+\ta.NoError(conf.SetDenyRanges([]string{\"192.168.0.0/24\", \"10.0.0.0/8\"}))\n \tconf.ConnectTimeout = 10 * time.Second\n \tconf.ExitTimeout = 10 * time.Second\n \tconf.AdditionalErrorMessageOnDeny = \"Proxy denied\"\n@@ -160,7 +160,6 @@ func TestUnsafeAllowPrivateRanges (t *testing.T) {\n \t\t}\n \t}\n \n-\n }\n \n // TestClearsErrors tests that we are correctly preserving/removing the X-Smokescreen-Error header.\n@@ -443,6 +442,52 @@ func TestInvalidHost(t *testing.T) {\n \t}\n }\n \n+var hostSquareBracketsCases = []struct {\n+\tscheme    string\n+\tproxyType string\n+}{\n+\t{\"http\", \"http\"},\n+\t{\"https\", \"connect\"},\n+}\n+\n+func TestHostSquareBrackets(t *testing.T) {\n+\tfor _, testCase := range hostSquareBracketsCases {\n+\t\tt.Run(testCase.scheme, func(t *testing.T) {\n+\t\t\ta := assert.New(t)\n+\t\t\tr := require.New(t)\n+\n+\t\t\tcfg, err := testConfig(\"test-open-srv\")\n+\t\t\trequire.NoError(t, err)\n+\t\t\tlogHook := proxyLogHook(cfg)\n+\n+\t\t\tproxySrv := proxyServer(cfg)\n+\t\t\tdefer proxySrv.Close()\n+\n+\t\t\t// Create a http.Client that uses our proxy\n+\t\t\tclient, err := proxyClient(proxySrv.URL)\n+\t\t\tr.NoError(err)\n+\n+\t\t\tresp, err := client.Get(fmt.Sprintf(\"%s://[stripe.com]\", testCase.scheme))\n+\t\t\tif err != nil {\n+\t\t\t\tr.Contains(err.Error(), \"Request rejected by proxy\")\n+\t\t\t} else {\n+\t\t\t\tr.Equal(http.StatusProxyAuthRequired, resp.StatusCode)\n+\t\t\t}\n+\n+\t\t\tentry := findCanonicalProxyDecision(logHook.AllEntries())\n+\t\t\tr.NotNil(entry)\n+\n+\t\t\tif a.Contains(entry.Data, \"allow\") {\n+\t\t\t\ta.Equal(false, entry.Data[\"allow\"])\n+\t\t\t\ta.Equal(\"host matched rule in global deny list\", entry.Data[\"decision_reason\"])\n+\t\t\t}\n+\t\t\tif a.Contains(entry.Data, \"proxy_type\") {\n+\t\t\t\ta.Contains(entry.Data[\"proxy_type\"], testCase.proxyType)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n func TestErrorHeader(t *testing.T) {\n \ta := assert.New(t)\n \tr := require.New(t)"
        },
        {
          "filename": "pkg/smokescreen/testdata/acl.yaml",
          "status": "modified",
          "additions": 19,
          "deletions": 13,
          "patch": "@@ -1,14 +1,20 @@\n ---\n-    version: v1\n-    services:\n-      - name: test-trusted-srv\n-        project: security\n-        action: enforce\n-        allowed_domains:\n-          - notarealhost.test\n-          - httpbin.org\n-      - name: test-local-srv\n-        project: security\n-        action: open\n-        allowed_domains:\n-          - 127.0.0.1\n+version: v1\n+services:\n+  - name: test-trusted-srv\n+    project: security\n+    action: enforce\n+    allowed_domains:\n+      - notarealhost.test\n+      - httpbin.org\n+  - name: test-local-srv\n+    project: security\n+    action: open\n+    allowed_domains:\n+      - 127.0.0.1\n+  - name: test-open-srv\n+    project: security\n+    action: open\n+\n+global_deny_list:\n+  - stripe.com"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bffe947fa6f682884d48592ff7e9ed13bb7941a4",
            "date": "2024-11-04T22:00:37Z",
            "author_login": "jjiang-stripe"
          },
          {
            "sha": "1c315f895caadb2da00b9d45919a14c03592b6de",
            "date": "2024-11-04T21:44:37Z",
            "author_login": "jjiang-stripe"
          },
          {
            "sha": "523d9278201b1151d04e02409c3a21d79994b2a5",
            "date": "2024-10-23T06:26:16Z",
            "author_login": "saurabhbhatia-stripe"
          },
          {
            "sha": "5b0cc7a2612686a320f7d2e528e1005536a78412",
            "date": "2024-10-18T22:51:55Z",
            "author_login": "eastebry"
          },
          {
            "sha": "9556eb95409a35ba96b08b60ca2b77369b4590c1",
            "date": "2024-10-17T11:29:49Z",
            "author_login": "saurabhbhatia-stripe"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "Smokescreen is an HTTP proxy. The primary use case for Smokescreen is to prevent server-side request forgery (SSRF) attacks in which external attackers leverage the behavior of applications to connect to or scan internal infrastructure. Smokescreen also offers an option to deny access to additional (e.g., external) URLs by way of a deny list. There was an issue in Smokescreen that made it possible to bypass the deny list feature by surrounding the hostname with square brackets (e.g. `[example.com]`). This only impacted the HTTP proxy functionality of Smokescreen. HTTPS requests were not impacted. Smokescreen version 0.0.4 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-21T00:15:11.323",
    "last_modified": "2024-11-21T06:58:40.273",
    "fix_date": "2022-04-28T02:11:50Z"
  },
  "references": [
    {
      "url": "https://github.com/stripe/smokescreen/commit/dea7b3c89df000f4072ff9866d61d78e30df6a36",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/stripe/smokescreen/security/advisories/GHSA-qwrf-gfpj-qvj6",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/stripe/smokescreen/commit/dea7b3c89df000f4072ff9866d61d78e30df6a36",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/stripe/smokescreen/security/advisories/GHSA-qwrf-gfpj-qvj6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.145094",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "smokescreen",
    "owner": "stripe",
    "created_at": "2016-07-01T19:14:36Z",
    "updated_at": "2025-01-02T15:04:33Z",
    "pushed_at": "2024-11-04T22:00:37Z",
    "size": 20554,
    "stars": 1142,
    "forks": 73,
    "open_issues": 19,
    "watchers": 1142,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 220369
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:22:24.525933"
  }
}