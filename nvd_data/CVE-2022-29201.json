{
  "cve_id": "CVE-2022-29201",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
    "related_commits": [
      "0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
      "0f0b080ecde4d3dfec158d6f60da34d5e31693c4"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/0f0b080ecde4d3dfec158d6f60da34d5e31693c4.patch",
    "fix_commit_details": {
      "sha": "0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
      "commit_date": "2022-04-29T22:22:06Z",
      "author": {
        "login": "cantonios",
        "type": "User",
        "stats": {
          "total_commits": 299,
          "average_weekly_commits": 0.6229166666666667,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 96
        }
      },
      "commit_message": {
        "title": "Fix undefined behavior in QuantizedConv2D",
        "length": 470,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 133,
        "additions": 107,
        "deletions": 26
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/quantized_conv_ops.cc",
          "status": "modified",
          "additions": 20,
          "deletions": 6,
          "patch": "@@ -18,8 +18,6 @@ limitations under the License.\n #include <algorithm>\n #include <vector>\n \n-#include \"tensorflow/core/platform/errors.h\"\n-\n #define EIGEN_USE_THREADS\n \n #define GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\n@@ -32,6 +30,7 @@ limitations under the License.\n #include \"tensorflow/core/kernels/quantization_utils.h\"\n #include \"tensorflow/core/kernels/reference_gemm.h\"\n #include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/errors.h\"\n #include \"tensorflow/core/util/padding.h\"\n \n namespace tensorflow {\n@@ -499,11 +498,26 @@ class QuantizedConv2DOp : public OpKernel {\n \n     // For 2D convolution, there should be 4 dimensions.\n     OP_REQUIRES(context, input.dims() == 4,\n-                errors::InvalidArgument(\"input must be 4-dimensional\",\n-                                        input.shape().DebugString()));\n+                errors::InvalidArgument(\"input must be rank 4 but is rank \",\n+                                        input.shape().dims()));\n     OP_REQUIRES(context, filter.dims() == 4,\n-                errors::InvalidArgument(\"filter must be 4-dimensional: \",\n-                                        filter.shape().DebugString()));\n+                errors::InvalidArgument(\"filter must be rank 4 but is rank \",\n+                                        filter.shape().dims()));\n+\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()),\n+                errors::InvalidArgument(\"min_input must be rank 0 but is rank \",\n+                                        context->input(2).shape().dims()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()),\n+                errors::InvalidArgument(\"max_input must be rank 0 but is rank \",\n+                                        context->input(3).shape().dims()));\n+    OP_REQUIRES(\n+        context, TensorShapeUtils::IsScalar(context->input(4).shape()),\n+        errors::InvalidArgument(\"min_filter must be rank 0 but is rank \",\n+                                context->input(4).shape().dims()));\n+    OP_REQUIRES(\n+        context, TensorShapeUtils::IsScalar(context->input(5).shape()),\n+        errors::InvalidArgument(\"max_filter must be rank 0 but is rank \",\n+                                context->input(5).shape().dims()));\n \n     const float min_input = context->input(2).flat<float>()(0);\n     const float max_input = context->input(3).flat<float>()(0);"
        },
        {
          "filename": "tensorflow/core/kernels/quantized_conv_ops_test.cc",
          "status": "modified",
          "additions": 20,
          "deletions": 20,
          "patch": "@@ -91,10 +91,10 @@ TEST_F(QuantizedConv2DTest, Small) {\n                             image_quantized.flat<quint8>());\n   AddInputFromArray<quint8>(filter_quantized.shape(),\n                             filter_quantized.flat<quint8>());\n-  AddInputFromArray<float>(TensorShape({1}), {image_min});\n-  AddInputFromArray<float>(TensorShape({1}), {image_max});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_min});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_max});\n+  AddInputFromArray<float>(TensorShape({}), {image_min});\n+  AddInputFromArray<float>(TensorShape({}), {image_max});\n+  AddInputFromArray<float>(TensorShape({}), {filter_min});\n+  AddInputFromArray<float>(TensorShape({}), {filter_max});\n   TF_ASSERT_OK(RunOpKernel());\n \n   // We're sliding the 3x3 filter across the 3x4 image, with accesses outside\n@@ -158,10 +158,10 @@ TEST_F(QuantizedConv2DTest, Small32Bit) {\n   AddInputFromArray<quint8>(\n       TensorShape({filter_size, filter_size, depth, filter_count}),\n       {10, 40, 70, 20, 50, 80, 30, 60, 90});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n \n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width;\n@@ -201,10 +201,10 @@ TEST_F(QuantizedConv2DTest, OddPadding) {\n   AddInputFromArray<quint8>(\n       TensorShape({filter_size, filter_size, depth, filter_count}),\n       {1, 2, 3, 4, 5, 6, 7, 8, 9});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n \n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width / stride;\n@@ -244,10 +244,10 @@ TEST_F(QuantizedConv2DTest, OddPaddingBatch) {\n   AddInputFromArray<quint8>(\n       TensorShape({filter_size, filter_size, depth, filter_count}),\n       {1, 2, 3, 4, 5, 6, 7, 8, 9});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n-  AddInputFromArray<float>(TensorShape({1}), {0});\n-  AddInputFromArray<float>(TensorShape({1}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n+  AddInputFromArray<float>(TensorShape({}), {0});\n+  AddInputFromArray<float>(TensorShape({}), {255.0f});\n \n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width / stride;\n@@ -302,10 +302,10 @@ TEST_F(QuantizedConv2DTest, SmallWithNoZero) {\n                             image_quantized.flat<quint8>());\n   AddInputFromArray<quint8>(filter_quantized.shape(),\n                             filter_quantized.flat<quint8>());\n-  AddInputFromArray<float>(TensorShape({1}), {image_min});\n-  AddInputFromArray<float>(TensorShape({1}), {image_max});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_min});\n-  AddInputFromArray<float>(TensorShape({1}), {filter_max});\n+  AddInputFromArray<float>(TensorShape({}), {image_min});\n+  AddInputFromArray<float>(TensorShape({}), {image_max});\n+  AddInputFromArray<float>(TensorShape({}), {filter_min});\n+  AddInputFromArray<float>(TensorShape({}), {filter_max});\n   TF_ASSERT_OK(RunOpKernel());\n   const int expected_width = image_width;\n   const int expected_height = image_height * filter_count;"
        },
        {
          "filename": "tensorflow/python/ops/quantized_conv_ops_test.py",
          "status": "modified",
          "additions": 67,
          "deletions": 0,
          "patch": "@@ -18,6 +18,8 @@\n \n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n+from tensorflow.python.ops import math_ops\n from tensorflow.python.ops import nn_ops\n from tensorflow.python.platform import test\n \n@@ -196,6 +198,71 @@ def testConv2D2x2FilterStride2Same(self):\n         padding=\"SAME\",\n         expected=expected_output)\n \n+  def _testBadInputSize(self,\n+                        tin=None,\n+                        tfilter=None,\n+                        min_input=None,\n+                        max_input=None,\n+                        min_filter=None,\n+                        max_filter=None,\n+                        error_regex=\"\"):\n+    strides = [1, 1, 1, 1]\n+    padding = \"SAME\"\n+    if tin is None:\n+      tin = math_ops.cast(\n+          constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)\n+\n+    if tfilter is None:\n+      tfilter = math_ops.cast(\n+          constant_op.constant(1, shape=[1, 2, 3, 3]), dtype=dtypes.quint8)\n+\n+    if min_input is None:\n+      min_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    if max_input is None:\n+      max_input = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    if min_filter is None:\n+      min_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    if max_filter is None:\n+      max_filter = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                error_regex):\n+      self.evaluate(\n+          nn_ops.quantized_conv2d(\n+              tin,\n+              tfilter,\n+              out_type=dtypes.qint32,\n+              strides=strides,\n+              padding=padding,\n+              min_input=min_input,\n+              max_input=max_input,\n+              min_filter=min_filter,\n+              max_filter=max_filter))\n+\n+  def testBadInputSizes(self):\n+    self._testBadInputSize(\n+        tin=math_ops.cast(\n+            constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),\n+        error_regex=\"must be rank 4\")\n+    self._testBadInputSize(\n+        tfilter=math_ops.cast(\n+            constant_op.constant(1, shape=[1, 2]), dtype=dtypes.quint8),\n+        error_regex=\"must be rank 4\")\n+    self._testBadInputSize(\n+        min_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n+    self._testBadInputSize(\n+        max_input=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n+    self._testBadInputSize(\n+        min_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n+    self._testBadInputSize(\n+        max_filter=constant_op.constant(0, shape=[1], dtype=dtypes.float32),\n+        error_regex=\"must be rank 0\")\n \n if __name__ == \"__main__\":\n   test.main()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ee156c15e5d1cd7d2bd85885e7fd2bf7e143c2c3",
            "date": "2025-01-14T12:46:22Z",
            "author_login": "pifon2a"
          },
          {
            "sha": "bd43a8255ce9e203b740bcdc09e8f79d3a26f887",
            "date": "2025-01-14T12:33:02Z",
            "author_login": "metaflow"
          },
          {
            "sha": "8003fb40987f176d35364da2af8fcdfab339349e",
            "date": "2025-01-14T11:27:47Z",
            "author_login": "vwbaker"
          },
          {
            "sha": "aeb438b3a08e82ffd347aebf68ea77c5aeb6784f",
            "date": "2025-01-14T10:32:36Z",
            "author_login": "WillFroom"
          },
          {
            "sha": "88136f4028f541553becd7701da1a63610d8079e",
            "date": "2025-01-14T09:58:36Z",
            "author_login": "loislo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-20",
    "description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.QuantizedConv2D` does not fully validate the input arguments. In this case, references get bound to `nullptr` for each argument that is empty. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-20T23:15:44.390",
    "last_modified": "2024-11-21T06:58:42.103",
    "fix_date": "2022-04-29T22:22:06Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantized_conv_ops.cc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqhm-4wvf-2jg8",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/kernels/quantized_conv_ops.cc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/0f0b080ecde4d3dfec158d6f60da34d5e31693c4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pqhm-4wvf-2jg8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.143561",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}