{
  "cve_id": "CVE-2022-29203",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "acd56b8bcb72b163c834ae4f18469047b001fadf",
    "related_commits": [
      "acd56b8bcb72b163c834ae4f18469047b001fadf",
      "acd56b8bcb72b163c834ae4f18469047b001fadf"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf.patch",
    "fix_commit_details": {
      "sha": "acd56b8bcb72b163c834ae4f18469047b001fadf",
      "commit_date": "2022-04-29T23:08:37Z",
      "author": {
        "login": "sagunb",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix security vulnerability with SpaceToBatchNDOp.",
        "length": 79,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 103,
        "additions": 90,
        "deletions": 13
      },
      "files": [
        {
          "filename": "tensorflow/compiler/tests/spacetobatch_op_test.py",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@\n import numpy as np\n \n from tensorflow.compiler.tests import xla_test\n+from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n from tensorflow.python.ops import array_ops\n from tensorflow.python.ops import gen_array_ops\n@@ -145,6 +146,29 @@ def testLargerInputBatch2x2(self):\n     self._testOne(x_np, block_size, x_out)\n \n \n+class SpaceToBatchNDErrorHandlingTest(xla_test.XLATestCase):\n+\n+  def testInvalidBlockShape(self):\n+    with self.assertRaisesRegex(ValueError, \"block_shape must be positive\"):\n+      with self.session() as sess, self.test_scope():\n+        tf_in = constant_op.constant(\n+            -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)\n+        block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)\n+        paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n+        sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))\n+\n+  def testOutputSizeOutOfBounds(self):\n+    with self.assertRaisesRegex(ValueError,\n+                                \"Negative.* dimension size caused by overflow\"):\n+      with self.session() as sess, self.test_scope():\n+        tf_in = constant_op.constant(\n+            -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)\n+        block_shape = constant_op.constant(\n+            1879048192, shape=[2], dtype=dtypes.int64)\n+        paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n+        sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))\n+\n+\n class SpaceToBatchNDTest(xla_test.XLATestCase):\n   \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"\n "
        },
        {
          "filename": "tensorflow/compiler/tf2xla/kernels/BUILD",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -211,6 +211,7 @@ tf_kernel_library(\n         \"//tensorflow/core/kernels:stateful_random_ops_header\",\n         \"//tensorflow/core/kernels:stateless_random_ops_v2_header\",\n         \"//tensorflow/core/tpu:tpu_defs\",\n+        \"//tensorflow/core/util:overflow\",\n         \"//tensorflow/stream_executor/lib\",\n         \"@com_google_absl//absl/algorithm:container\",\n         \"@com_google_absl//absl/container:flat_hash_map\","
        },
        {
          "filename": "tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc",
          "status": "modified",
          "additions": 17,
          "deletions": 3,
          "patch": "@@ -17,6 +17,7 @@ limitations under the License.\n #include \"tensorflow/compiler/tf2xla/xla_op_kernel.h\"\n #include \"tensorflow/compiler/tf2xla/xla_op_registry.h\"\n #include \"tensorflow/compiler/xla/client/xla_builder.h\"\n+#include \"tensorflow/core/util/overflow.h\"\n \n namespace tensorflow {\n namespace {\n@@ -60,10 +61,14 @@ void SpaceToBatch(XlaOpKernelContext* ctx, const xla::XlaOp& input,\n     int64_t pad_end = paddings.Get<int64_t>({i, 1});\n     OP_REQUIRES(ctx, pad_start >= 0 && pad_end >= 0,\n                 errors::InvalidArgument(\"Paddings must be non-negative\"));\n+    OP_REQUIRES(ctx, block_shape[i] >= 1,\n+                errors::InvalidArgument(\n+                    \"All values in block_shape must be positive, got value, \",\n+                    block_shape[i], \" at index \", i, \".\"));\n     dim->set_edge_padding_low(pad_start);\n     dim->set_edge_padding_high(pad_end);\n     padded_shape[1 + i] += pad_start + pad_end;\n-    block_num_elems *= block_shape[i];\n+    block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i]);\n   }\n   // Don't pad the remainder dimensions.\n   for (int i = 0; i < remainder_shape.size(); ++i) {\n@@ -72,6 +77,16 @@ void SpaceToBatch(XlaOpKernelContext* ctx, const xla::XlaOp& input,\n   OP_REQUIRES(ctx, block_num_elems > 0,\n               errors::InvalidArgument(\n                   \"The product of the block dimensions must be positive\"));\n+  const int64_t batch_size = input_shape[0];\n+  const int64_t output_dim =\n+      MultiplyWithoutOverflow(batch_size, block_num_elems);\n+  if (output_dim < 0) {\n+    OP_REQUIRES(\n+        ctx, output_dim >= 0,\n+        errors::InvalidArgument(\"Negative output dimension size caused by \"\n+                                \"overflow when multiplying \",\n+                                batch_size, \" and \", block_num_elems));\n+  }\n \n   xla::XlaOp padded =\n       xla::Pad(input, XlaHelpers::Zero(b, input_dtype), padding_config);\n@@ -85,7 +100,6 @@ void SpaceToBatch(XlaOpKernelContext* ctx, const xla::XlaOp& input,\n   //       padded_shape[M] / block_shape[M-1],\n   //       block_shape[M-1]] +\n   //      remaining_shape\n-  const int64_t batch_size = input_shape[0];\n   std::vector<int64_t> reshaped_padded_shape(input_rank + block_rank);\n   reshaped_padded_shape[0] = batch_size;\n   for (int i = 0; i < block_rank; ++i) {\n@@ -134,7 +148,7 @@ void SpaceToBatch(XlaOpKernelContext* ctx, const xla::XlaOp& input,\n   // Determine the length of the prefix of block dims that can be combined\n   // into the batch dimension due to having no padding and block_shape=1.\n   std::vector<int64_t> output_shape(input_rank);\n-  output_shape[0] = batch_size * block_num_elems;\n+  output_shape[0] = output_dim;\n   for (int i = 0; i < block_rank; ++i) {\n     output_shape[1 + i] = padded_shape[1 + i] / block_shape[i];\n   }"
        },
        {
          "filename": "tensorflow/core/framework/BUILD",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -891,6 +891,7 @@ cc_library(\n         \"//tensorflow/core/lib/strings:scanner\",\n         \"//tensorflow/core/lib/strings:str_util\",\n         \"//tensorflow/core/platform:macros\",\n+        \"//tensorflow/core/util:overflow\",\n         \"@com_google_absl//absl/memory\",\n     ],\n )"
        },
        {
          "filename": "tensorflow/core/framework/shape_inference.cc",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -26,6 +26,7 @@ limitations under the License.\n #include \"tensorflow/core/lib/strings/numbers.h\"\n #include \"tensorflow/core/lib/strings/scanner.h\"\n #include \"tensorflow/core/lib/strings/str_util.h\"\n+#include \"tensorflow/core/util/overflow.h\"\n \n namespace tensorflow {\n namespace shape_inference {\n@@ -1111,7 +1112,7 @@ Status InferenceContext::Multiply(DimensionHandle first,\n     *out = UnknownDim();\n   } else {\n     // Invariant: Both values are known and greater than 1.\n-    const int64_t product = first_value * second_value;\n+    const int64_t product = MultiplyWithoutOverflow(first_value, second_value);\n     if (product < 0) {\n       return errors::InvalidArgument(\n           \"Negative dimension size caused by overflow when multiplying \","
        },
        {
          "filename": "tensorflow/core/kernels/BUILD",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -29,6 +29,7 @@ load(\n load(\n     \"//third_party/mkl:build_defs.bzl\",\n     \"if_mkl\",\n+    \"mkl_deps\",\n )\n \n # buildifier: disable=same-origin-load\n@@ -61,10 +62,6 @@ load(\n     \"//tensorflow/core/platform:build_config_root.bzl\",\n     \"tf_cuda_tests_tags\",\n )\n-load(\n-    \"//third_party/mkl:build_defs.bzl\",\n-    \"mkl_deps\",\n-)\n load(\"@local_config_cuda//cuda:build_defs.bzl\", \"if_cuda\")\n load(\n     \"@local_config_rocm//rocm:build_defs.bzl\",\n@@ -4569,6 +4566,7 @@ tf_kernel_library(\n         \"//tensorflow/core:framework\",\n         \"//tensorflow/core:lib\",\n         \"//tensorflow/core/framework:bounds_check\",\n+        \"//tensorflow/core/util:overflow\",\n         \"//third_party/eigen3\",\n     ],\n )"
        },
        {
          "filename": "tensorflow/core/kernels/spacetobatch_op.cc",
          "status": "modified",
          "additions": 17,
          "deletions": 5,
          "patch": "@@ -21,8 +21,6 @@ limitations under the License.\n #include <string>\n #include <utility>\n \n-#include \"tensorflow/core/kernels/spacetobatch_functor.h\"\n-\n #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n #include \"tensorflow/core/framework/op.h\"\n #include \"tensorflow/core/framework/op_kernel.h\"\n@@ -31,8 +29,10 @@ limitations under the License.\n #include \"tensorflow/core/framework/tensor_shape.h\"\n #include \"tensorflow/core/framework/tensor_types.h\"\n #include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/kernels/spacetobatch_functor.h\"\n #include \"tensorflow/core/platform/logging.h\"\n #include \"tensorflow/core/platform/types.h\"\n+#include \"tensorflow/core/util/overflow.h\"\n \n namespace tensorflow {\n \n@@ -99,7 +99,13 @@ Status SpaceToBatchOpCompute(OpKernelContext* context,\n   // Compute the product of the block_shape values.\n   int64_t block_shape_product = 1;\n   for (int block_dim = 0; block_dim < block_dims; ++block_dim) {\n-    block_shape_product *= block_shape[block_dim];\n+    if (block_shape[block_dim] < 1) {\n+      return errors::InvalidArgument(\n+          \"All values in block_shape must be positive, got value, \",\n+          block_shape[block_dim], \" at index \", block_dim, \".\");\n+    }\n+    block_shape_product =\n+        MultiplyWithoutOverflow(block_shape_product, block_shape[block_dim]);\n   }\n   if (block_shape_product <= 0) {\n     return errors::InvalidArgument(\n@@ -131,8 +137,14 @@ Status SpaceToBatchOpCompute(OpKernelContext* context,\n   // The actual output shape exposed to callers.\n   TensorShape external_output_shape;\n \n-  external_output_shape.AddDim(orig_input_tensor.dim_size(0) *\n-                               block_shape_product);\n+  const int64_t output_shape = MultiplyWithoutOverflow(\n+      orig_input_tensor.dim_size(0), block_shape_product);\n+  if (output_shape < 0) {\n+    return errors::InvalidArgument(\n+        \"Negative output dimension size caused by overflow when multiplying \",\n+        orig_input_tensor.dim_size(0), \" and \", block_shape_product);\n+  }\n+  external_output_shape.AddDim(output_shape);\n \n   int64_t input_batch_size = orig_input_tensor.dim_size(0);\n   for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {"
        },
        {
          "filename": "tensorflow/core/util/BUILD",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -533,6 +533,9 @@ tf_cuda_library(\n cc_library(\n     name = \"overflow\",\n     hdrs = [\"overflow.h\"],\n+    visibility = [\n+        \"//tensorflow:internal\",\n+    ],\n     deps = [\n         \"//tensorflow/core/platform:logging\",\n         \"//tensorflow/core/platform:macros\","
        },
        {
          "filename": "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -16,7 +16,9 @@\n \n import numpy as np\n \n+from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import tensor_util\n from tensorflow.python.framework import test_util\n@@ -516,6 +518,27 @@ def testUnknown(self):\n             dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])\n     self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())\n \n+  @test_util.run_in_graph_and_eager_modes\n+  def testInvalidBlockShape(self):\n+    tf_in = constant_op.constant(\n+        -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)\n+    block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)\n+    paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"block_shape must be positive\"):\n+      array_ops.space_to_batch_nd(tf_in, block_shape, paddings)\n+\n+  @test_util.run_in_graph_and_eager_modes\n+  def testOutputSizeOutOfBounds(self):\n+    tf_in = constant_op.constant(\n+        -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)\n+    block_shape = constant_op.constant(\n+        1879048192, shape=[2], dtype=dtypes.int64)\n+    paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"Negative.* dimension size caused by overflow\"):\n+      array_ops.space_to_batch_nd(tf_in, block_shape, paddings)\n+\n \n class SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f04ac71a7ba0972752968c52b299e9e53795c9bf",
            "date": "2025-01-14T18:36:27Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "af7f5e877165ab909d171a6ec560a8ce80f410b5",
            "date": "2025-01-14T18:29:16Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "29a59f3245aadc7db8c6cc3a3a0d214f2dd10d6b",
            "date": "2025-01-14T18:26:14Z",
            "author_login": "sergey-kozub"
          },
          {
            "sha": "56e196bc47a70e2f41926613f4cd370ddd734f3a",
            "date": "2025-01-14T18:00:32Z",
            "author_login": "loislo"
          },
          {
            "sha": "b13ee8b852a232dc6dd339e0de4e22f735136b7a",
            "date": "2025-01-14T16:59:22Z",
            "author_login": "Moerafaat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-190",
    "description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow: The result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-20T23:15:44.543",
    "last_modified": "2024-11-21T06:58:42.410",
    "fix_date": "2022-04-29T23:08:37Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jjm6-4vf7-cjh4",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jjm6-4vf7-cjh4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.144008",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}