{
  "cve_id": "CVE-2022-29209",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "b917181c29b50cb83399ba41f4d938dc369109a1",
    "related_commits": [
      "b917181c29b50cb83399ba41f4d938dc369109a1",
      "b917181c29b50cb83399ba41f4d938dc369109a1"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/b917181c29b50cb83399ba41f4d938dc369109a1.patch",
    "fix_commit_details": {
      "sha": "b917181c29b50cb83399ba41f4d938dc369109a1",
      "commit_date": "2022-04-28T21:41:18Z",
      "author": {
        "login": "tensorflower-gardener",
        "type": "User",
        "stats": {
          "total_commits": 51279,
          "average_weekly_commits": 106.83125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 450
        }
      },
      "commit_message": {
        "title": "Merge pull request #55730 from graphcore:awf/issue-55530",
        "length": 86,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 101,
        "additions": 73,
        "deletions": 28
      },
      "files": [
        {
          "filename": "tensorflow/core/platform/default/logging.h",
          "status": "modified",
          "additions": 73,
          "deletions": 28,
          "patch": "@@ -85,7 +85,7 @@ class LogMessage : public std::basic_ostringstream<char> {\n // that the ternary VLOG() implementation is balanced, type wise.\n struct Voidifier {\n   template <typename T>\n-  void operator&(const T&)const {}\n+  void operator&(const T&) const {}\n };\n \n // LogMessageFatal ensures the process will exit in failure after\n@@ -348,11 +348,13 @@ string* MakeCheckOpString(const T1& v1, const T2& v2, const char* exprtext) {\n }\n \n // Helper functions for CHECK_OP macro.\n-// The (int, int) specialization works around the issue that the compiler\n+// We use the full name Check_EQ, Check_NE, etc. in case the file including\n+// base/logging.h provides its own #defines for the simpler names EQ, NE, etc.\n+// This happens if, for example, those are used as token names in a\n+// yacc grammar.\n+// The (int, int) overload works around the issue that the compiler\n // will not instantiate the template version of the function on values of\n // unnamed enum type - see comment below.\n-// The (size_t, int) and (int, size_t) specialization are to handle unsigned\n-// comparison errors while still being thorough with the comparison.\n #define TF_DEFINE_CHECK_OP_IMPL(name, op)                                 \\\n   template <typename T1, typename T2>                                     \\\n   inline string* name##Impl(const T1& v1, const T2& v2,                   \\\n@@ -364,34 +366,77 @@ string* MakeCheckOpString(const T1& v1, const T2& v2, const char* exprtext) {\n   }                                                                       \\\n   inline string* name##Impl(int v1, int v2, const char* exprtext) {       \\\n     return name##Impl<int, int>(v1, v2, exprtext);                        \\\n-  }                                                                       \\\n-  inline string* name##Impl(const size_t v1, const int v2,                \\\n-                            const char* exprtext) {                       \\\n-    if (TF_PREDICT_FALSE(v2 < 0)) {                                       \\\n-      return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\\n-    }                                                                     \\\n-    return name##Impl<size_t, size_t>(v1, v2, exprtext);                  \\\n-  }                                                                       \\\n-  inline string* name##Impl(const int v1, const size_t v2,                \\\n-                            const char* exprtext) {                       \\\n-    if (TF_PREDICT_FALSE(v2 >= std::numeric_limits<int>::max())) {        \\\n-      return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext); \\\n-    }                                                                     \\\n-    const size_t uval = (size_t)((unsigned)v2);                           \\\n-    return name##Impl<size_t, size_t>(v1, uval, exprtext);                \\\n   }\n \n-// We use the full name Check_EQ, Check_NE, etc. in case the file including\n-// base/logging.h provides its own #defines for the simpler names EQ, NE, etc.\n-// This happens if, for example, those are used as token names in a\n-// yacc grammar.\n-TF_DEFINE_CHECK_OP_IMPL(Check_EQ,\n-                        ==)  // Compilation error with CHECK_EQ(NULL, x)?\n-TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)  // Use CHECK(x == NULL) instead.\n+// The (size_t, int) and (int, size_t) specialization are to handle unsigned\n+// comparison errors while still being thorough with the comparison.\n+\n+TF_DEFINE_CHECK_OP_IMPL(Check_EQ, ==)\n+// Compilation error with CHECK_EQ(NULL, x)?\n+// Use CHECK(x == NULL) instead.\n+\n+inline string* Check_EQImpl(int v1, size_t v2, const char* exprtext) {\n+  if (TF_PREDICT_FALSE(v1 < 0))\n+    ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);\n+\n+  return Check_EQImpl(size_t(v1), v2, exprtext);\n+}\n+\n+inline string* Check_EQImpl(size_t v1, int v2, const char* exprtext) {\n+  return Check_EQImpl(v2, v1, exprtext);\n+}\n+\n+TF_DEFINE_CHECK_OP_IMPL(Check_NE, !=)\n+\n+inline string* Check_NEImpl(int v1, size_t v2, const char* exprtext) {\n+  if (v1 < 0) return NULL;\n+\n+  return Check_NEImpl(size_t(v1), v2, exprtext);\n+}\n+\n+inline string* Check_NEImpl(size_t v1, int v2, const char* exprtext) {\n+  return Check_NEImpl(v2, v1, exprtext);\n+}\n+\n TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)\n+\n+inline string* Check_LEImpl(int v1, size_t v2, const char* exprtext) {\n+  if (v1 <= 0) return NULL;\n+\n+  return Check_LEImpl(size_t(v1), v2, exprtext);\n+}\n+\n+inline string* Check_LEImpl(size_t v1, int v2, const char* exprtext) {\n+  if (TF_PREDICT_FALSE(v2 < 0))\n+    return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);\n+  return Check_LEImpl(v1, size_t(v2), exprtext);\n+}\n+\n TF_DEFINE_CHECK_OP_IMPL(Check_LT, <)\n-TF_DEFINE_CHECK_OP_IMPL(Check_GE, >=)\n-TF_DEFINE_CHECK_OP_IMPL(Check_GT, >)\n+\n+inline string* Check_LTImpl(int v1, size_t v2, const char* exprtext) {\n+  if (v1 < 0) return NULL;\n+\n+  return Check_LTImpl(size_t(v1), v2, exprtext);\n+}\n+\n+inline string* Check_LTImpl(size_t v1, int v2, const char* exprtext) {\n+  if (v2 < 0)\n+    return ::tensorflow::internal::MakeCheckOpString(v1, v2, exprtext);\n+  return Check_LTImpl(v1, size_t(v2), exprtext);\n+}\n+\n+// Implement GE,GT in terms of LE,LT\n+template <typename T1, typename T2>\n+inline string* Check_GEImpl(const T1& v1, const T2& v2, const char* exprtext) {\n+  return Check_LEImpl(v2, v1, exprtext);\n+}\n+\n+template <typename T1, typename T2>\n+inline string* Check_GTImpl(const T1& v1, const T2& v2, const char* exprtext) {\n+  return Check_LTImpl(v2, v1, exprtext);\n+}\n+\n #undef TF_DEFINE_CHECK_OP_IMPL\n \n // In optimized mode, use CheckOpString to hint to compiler that"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c141307fbd02349cf4d83f9a73bdba73fcba9b87",
            "date": "2025-01-14T14:26:56Z",
            "author_login": "mooskagh"
          },
          {
            "sha": "9263c01097f54dbb932ac56d6d87a61a93409221",
            "date": "2025-01-14T14:18:52Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "e7f7cefc7d284c486f84596811d07bb5cd0890ca",
            "date": "2025-01-14T14:16:10Z",
            "author_login": "krasimirgg"
          },
          {
            "sha": "fd41705e0ad7a123a9d01b8be2a3b34b3266493e",
            "date": "2025-01-14T13:33:52Z",
            "author_login": "loislo"
          },
          {
            "sha": "af5275c5731565cbf2a2c01ee418a8cf62388431",
            "date": "2025-01-14T12:48:20Z",
            "author_login": "akuegel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-843",
    "description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the macros that TensorFlow uses for writing assertions (e.g., `CHECK_LT`, `CHECK_GT`, etc.) have an incorrect logic when comparing `size_t` and `int` values. Due to type conversion rules, several of the macros would trigger incorrectly. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-21T00:15:11.517",
    "last_modified": "2024-11-21T06:58:43.323",
    "fix_date": "2022-04-28T21:41:18Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/platform/default/logging.h",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/b917181c29b50cb83399ba41f4d938dc369109a1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/issues/55530",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/pull/55730",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4rr-5m7v-wxcw",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/platform/default/logging.h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/b917181c29b50cb83399ba41f4d938dc369109a1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/issues/55530",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/pull/55730",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f4rr-5m7v-wxcw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.145570",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}