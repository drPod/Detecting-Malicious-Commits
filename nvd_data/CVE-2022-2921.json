{
  "cve_id": "CVE-2022-2921",
  "github_data": {
    "repository": "notrinos/notrinoserp",
    "fix_commit": "1b9903f4deea3289872793e60d730c63ecbf7b45",
    "related_commits": [
      "1b9903f4deea3289872793e60d730c63ecbf7b45",
      "1b9903f4deea3289872793e60d730c63ecbf7b45"
    ],
    "patch_url": "https://github.com/notrinos/notrinoserp/commit/1b9903f4deea3289872793e60d730c63ecbf7b45.patch",
    "fix_commit_details": {
      "sha": "1b9903f4deea3289872793e60d730c63ecbf7b45",
      "commit_date": "2022-08-21T02:07:55Z",
      "author": {
        "login": "notrinos",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "changed password hash method from md5 to bcrypt.",
        "length": 48,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 49,
        "additions": 33,
        "deletions": 16
      },
      "files": [
        {
          "filename": "admin/change_current_user_password.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -25,7 +25,7 @@ function can_process() {\n \t$Auth_Result = hook_authenticate($_SESSION['wa_current_user']->username, $_POST['cur_password']);\n \n \tif (!isset($Auth_Result))\t// if not used external login: standard method\n-\t\t$Auth_Result = get_user_auth($_SESSION['wa_current_user']->username, md5($_POST['cur_password']));\n+\t\t$Auth_Result = authenticate_user($_SESSION['wa_current_user']->username, $_POST['cur_password']);\n \n \tif (!$Auth_Result) {\n \t\tdisplay_error( _('Invalid password entered.'));\n@@ -57,7 +57,7 @@ function can_process() {\n \t\tif ($SysPrefs->allow_demo_mode)\n \t\t\tdisplay_warning(_('Password cannot be changed in demo mode.'));\n \t\telse {\n-\t\t\tupdate_user_password($_SESSION['wa_current_user']->user, $_SESSION['wa_current_user']->username, md5($_POST['password']));\n+\t\t\tupdate_user_password($_SESSION['wa_current_user']->user, $_SESSION['wa_current_user']->username, password_hash($_POST['password'], PASSWORD_DEFAULT));\n \t\t\tdisplay_notification(_('Your password has been updated.'));\n \t\t}\n \t\t$Ajax->activate('_page_body');\n@@ -86,4 +86,4 @@ function can_process() {\n \n submit_center( 'UPDATE_ITEM', _('Change password'), true, '',  'default');\n end_form();\n-end_page();\n\\ No newline at end of file\n+end_page();"
        },
        {
          "filename": "admin/create_coy.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -20,7 +20,7 @@\n \n page(_($help_context = 'Create/Update Company'));\n \n-$comp_subdirs = array('images', 'pdf_files', 'backup','js_cache', 'reporting', 'attachments');\n+$comp_subdirs = array('images', 'pdf_files', 'backup', 'js_cache', 'reporting', 'attachments');\n \n simple_page_mode(true);\n /*\n@@ -107,7 +107,7 @@ function handle_submit($selected_id) {\n \n \t\t$conn = $db_connections[$selected_id];\n \t\tif (($db = db_create_db($conn)) === false) {\n-\t\t\tdisplay_error(_('Error creating Database: ') . $conn['dbname'] . _(', Please create it manually'));\n+\t\t\tdisplay_error(_('Error creating Database: ').$conn['dbname']._(', Please create it manually'));\n \t\t\t$error = true;\n \t\t}\n \t\telse {\n@@ -120,7 +120,7 @@ function handle_submit($selected_id) {\n \t\t\telse {\n \t\t\t\tif (!isset($_POST['admpassword']) || $_POST['admpassword'] == '')\n \t\t\t\t\t$_POST['admpassword'] = 'password';\n-\t\t\t\tupdate_admin_password($conn, md5($_POST['admpassword']));\n+\t\t\t\tupdate_admin_password($conn, password_hash($_POST['admpassword']), PASSWORD_DEFAULT);\n \t\t\t}\n \t\t}\n \t\tif ($error) {\n@@ -350,4 +350,4 @@ function display_company_edit($selected_id) {\n \n end_form();\n \n-end_page();\n\\ No newline at end of file\n+end_page();"
        },
        {
          "filename": "admin/db/users_db.inc",
          "status": "modified",
          "additions": 21,
          "deletions": 4,
          "patch": "@@ -112,12 +112,29 @@ function delete_user($id) {\n \n //-----------------------------------------------------------------------------------------------\n \n-function get_user_auth($user_id, $password) {\n+function authenticate_user($user_id, $password) {\n \n-\t$sql = \"SELECT * FROM \".TB_PREF.\"users WHERE user_id = \".db_escape($user_id).\" AND\"\n-\t\t.\" password=\".db_escape($password);\n+\t$sql1 = \"SELECT password FROM \".TB_PREF.\"users WHERE user_id = \".db_escape($user_id);\n \n-\treturn db_num_rows(db_query($sql, 'could not get validate user login for '.$user_id)) != 0;\n+\t$result = db_query($sql1, 'could not get user login for '.$user_id);\n+\n+\tif(db_num_rows($result) == 0)\n+\t\treturn false;\n+\n+\t$hash = db_fetch($result)[0];\n+\n+\t// The user's password hash may have been created long ago by md5 password algorithm on the old NotrinosERP versions\n+\tif(password_verify($password, $hash) || $hash == md5($password)) {\n+\t\tif(password_needs_rehash($hash, PASSWORD_DEFAULT) === true) {\n+\t\t\t$new_hash = password_hash($password, PASSWORD_DEFAULT);\n+\t\t\t$sql2 = \"UPDATE \".TB_PREF.\"users SET password = \".db_escape($new_hash).\" WHERE user_id = \".db_escape($user_id);\n+\t\t\tdb_query($sql2, 'could not update password hash for '.$user_id);\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\treturn false;\n }\n \n //-----------------------------------------------------------------------------------------------"
        },
        {
          "filename": "admin/users.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -56,12 +56,12 @@ function can_process($new) {\n \t\t\tupdate_user_prefs($selected_id, get_post(array('user_id', 'real_name', 'phone', 'email', 'role_id', 'language', 'print_profile', 'rep_popup' => 0, 'pos')));\n \n \t\t\tif ($_POST['password'] != '')\n-\t\t\t\tupdate_user_password($selected_id, $_POST['user_id'], md5($_POST['password']));\n+\t\t\t\tupdate_user_password($selected_id, $_POST['user_id'], password_hash($_POST['password'], PASSWORD_DEFAULT));\n \n \t\t\tdisplay_notification_centered(_('The selected user has been updated.'));\n \t\t} \n \t\telse {\n-\t\t\tadd_user($_POST['user_id'], $_POST['real_name'], md5($_POST['password']), $_POST['phone'], $_POST['email'], $_POST['role_id'], $_POST['language'], $_POST['print_profile'], check_value('rep_popup'), $_POST['pos']);\n+\t\t\tadd_user($_POST['user_id'], $_POST['real_name'], password_hash($_POST['password'], PASSWORD_DEFAULT), $_POST['phone'], $_POST['email'], $_POST['role_id'], $_POST['language'], $_POST['print_profile'], check_value('rep_popup'), $_POST['pos']);\n \t\t\t$id = db_insert_id();\n \t\t\t// use current user display preferences as start point for new user\n \t\t\t$prefs = $_SESSION['wa_current_user']->prefs->get_all();"
        },
        {
          "filename": "includes/current_user.inc",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -69,11 +69,11 @@ class current_user {\n \n \t\t// Use external authentication source if any.\n \t\t// Keep in mind you need to have user data set for $loginname\n-\t\t// in FA users table anyway to successfully log in.\n+\t\t// in NotrinosERP users table anyway to successfully log in.\n \t\t$Auth_Result = hook_authenticate($loginname, $password);\n \n \t\tif (!isset($Auth_Result))\t// if not used: standard method\n-\t\t\t$Auth_Result = get_user_auth($loginname, md5($password));\n+\t\t\t$Auth_Result = authenticate_user($loginname, $password);\n \t\tif ($SysPrefs->login_delay > 0)\n \t\t\twrite_login_filelog($loginname, $Auth_Result);\n \t\tif ($Auth_Result) {\n@@ -151,7 +151,7 @@ class current_user {\n \t\tif ($user != false) {\n \n \t\t\t$password = generate_password();\n-\t\t\t$hash = md5($password);\n+\t\t\t$hash = password_hash($password);\n \n \t\t\tupdate_user_password($user['id'], $user['user_id'], $hash);\n \t\t\t"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "943a559dc96b7354febc7a3bb9d9a90dc1952abf",
            "date": "2023-03-21T02:43:25Z",
            "author_login": "notrinos"
          },
          {
            "sha": "b7fcf1260f16ee138ee786db84f30cc6a44de525",
            "date": "2023-03-11T06:40:14Z",
            "author_login": "notrinos"
          },
          {
            "sha": "2dda6057f6556e36703ce990aca8c13d12493f9f",
            "date": "2023-03-11T03:20:20Z",
            "author_login": "notrinos"
          },
          {
            "sha": "7ba68d4cb3ffa82023b141b89b0e97b334be811f",
            "date": "2023-02-11T15:04:03Z",
            "author_login": "notrinos"
          },
          {
            "sha": "fbee295480fcc329f5daa1bd0f58de71203458d1",
            "date": "2023-02-10T21:15:29Z",
            "author_login": "notrinos"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-359",
    "description": "Exposure of Private Personal Information to an Unauthorized Actor in GitHub repository notrinos/notrinoserp prior to v0.7. This results in privilege escalation to a system administrator account. An attacker can gain access to protected functionality such as create/update companies, install/update languages, install/activate extensions, install/activate themes and other permissive actions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-21T04:15:10.703",
    "last_modified": "2024-11-21T07:01:55.277",
    "fix_date": "2022-08-21T02:07:55Z"
  },
  "references": [
    {
      "url": "https://github.com/notrinos/notrinoserp/commit/1b9903f4deea3289872793e60d730c63ecbf7b45",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/51b32a1c-946b-4390-a212-b6c4b6e4115c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/notrinos/notrinoserp/commit/1b9903f4deea3289872793e60d730c63ecbf7b45",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/51b32a1c-946b-4390-a212-b6c4b6e4115c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.243088",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "NotrinosERP",
    "owner": "notrinos",
    "created_at": "2021-01-03T04:38:58Z",
    "updated_at": "2025-01-09T09:14:45Z",
    "pushed_at": "2023-03-21T02:45:30Z",
    "size": 5599,
    "stars": 114,
    "forks": 54,
    "open_issues": 3,
    "watchers": 114,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 4064328,
      "JavaScript": 79232,
      "CSS": 76622
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T16:36:25.891129"
  }
}