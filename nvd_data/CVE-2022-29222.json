{
  "cve_id": "CVE-2022-29222",
  "github_data": {
    "repository": "pion/dtls",
    "fix_commit": "d2f797183a9f044ce976e6df6f362662ca722412",
    "related_commits": [
      "d2f797183a9f044ce976e6df6f362662ca722412",
      "d2f797183a9f044ce976e6df6f362662ca722412"
    ],
    "patch_url": "https://github.com/pion/dtls/commit/d2f797183a9f044ce976e6df6f362662ca722412.patch",
    "fix_commit_details": {
      "sha": "d2f797183a9f044ce976e6df6f362662ca722412",
      "commit_date": "2022-05-15T19:19:30Z",
      "author": {
        "login": "Sean-Der",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Require CertificateVerify when Client Cert sent",
        "length": 157,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 120,
        "additions": 120,
        "deletions": 0
      },
      "files": [
        {
          "filename": "flight4handler.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -89,6 +89,10 @@ func flight4Parse(ctx context.Context, c flightConn, state *State, cache *handsh\n \t\t\t}\n \t\t}\n \t\tstate.peerCertificatesVerified = verified\n+\t} else if state.PeerCertificates != nil {\n+\t\t// A certificate was received, but we haven't seen a CertificateVerify\n+\t\t// keep reading until we receieve one\n+\t\treturn 0, nil, nil\n \t}\n \n \tif !state.cipherSuite.IsInitialized() {"
        },
        {
          "filename": "flight4handler_test.go",
          "status": "added",
          "additions": 116,
          "deletions": 0,
          "patch": "@@ -0,0 +1,116 @@\n+package dtls\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/pion/dtls/v2/internal/ciphersuite\"\n+\t\"github.com/pion/dtls/v2/pkg/protocol/alert\"\n+\t\"github.com/pion/dtls/v2/pkg/protocol/handshake\"\n+\t\"github.com/pion/transport/test\"\n+)\n+\n+type flight4TestMockFlightConn struct{}\n+\n+func (f *flight4TestMockFlightConn) notify(ctx context.Context, level alert.Level, desc alert.Description) error {\n+\treturn nil\n+}\n+func (f *flight4TestMockFlightConn) writePackets(context.Context, []*packet) error { return nil }\n+func (f *flight4TestMockFlightConn) recvHandshake() <-chan chan struct{}           { return nil }\n+func (f *flight4TestMockFlightConn) setLocalEpoch(epoch uint16)                    {}\n+func (f *flight4TestMockFlightConn) handleQueuedPackets(context.Context) error     { return nil }\n+func (f *flight4TestMockFlightConn) sessionKey() []byte                            { return nil }\n+\n+type flight4TestMockCipherSuite struct {\n+\tciphersuite.TLSEcdheEcdsaWithAes128GcmSha256\n+\n+\tt *testing.T\n+}\n+\n+func (f *flight4TestMockCipherSuite) IsInitialized() bool {\n+\tf.t.Fatal(\"IsInitialized called with Certificate but not CertificateVerify\")\n+\treturn true\n+}\n+\n+// Assert that if a Client sends a certificate they\n+// must also send a CertificateVerify message.\n+// The flight4handler must not interact with the CipherSuite\n+// if the CertificateVerify is missing\n+func TestFlight4_Process_CertificateVerify(t *testing.T) {\n+\t// Limit runtime in case of deadlocks\n+\tlim := test.TimeOut(5 * time.Second)\n+\tdefer lim.Stop()\n+\n+\t// Check for leaking routines\n+\treport := test.CheckRoutines(t)\n+\tdefer report()\n+\n+\tmockConn := &flight4TestMockFlightConn{}\n+\tstate := &State{\n+\t\tcipherSuite: &flight4TestMockCipherSuite{t: t},\n+\t}\n+\tcache := newHandshakeCache()\n+\tcfg := &handshakeConfig{}\n+\n+\trawCertificate := []byte{\n+\t\t0x0b, 0x00, 0x01, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x01, 0x9b, 0x00, 0x01, 0x98, 0x00, 0x01, 0x95, 0x30, 0x82,\n+\t\t0x01, 0x91, 0x30, 0x82, 0x01, 0x38, 0xa0, 0x03, 0x02, 0x01,\n+\t\t0x02, 0x02, 0x11, 0x01, 0x65, 0x03, 0x3f, 0x4d, 0x0b, 0x9a,\n+\t\t0x62, 0x91, 0xdb, 0x4d, 0x28, 0x2c, 0x1f, 0xd6, 0x73, 0x32,\n+\t\t0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,\n+\t\t0x03, 0x02, 0x30, 0x00, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x32,\n+\t\t0x30, 0x35, 0x31, 0x35, 0x31, 0x38, 0x34, 0x33, 0x35, 0x35,\n+\t\t0x5a, 0x17, 0x0d, 0x32, 0x32, 0x30, 0x36, 0x31, 0x35, 0x31,\n+\t\t0x38, 0x34, 0x33, 0x35, 0x35, 0x5a, 0x30, 0x00, 0x30, 0x59,\n+\t\t0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,\n+\t\t0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01,\n+\t\t0x07, 0x03, 0x42, 0x00, 0x04, 0xc3, 0xb7, 0x13, 0x1a, 0x0a,\n+\t\t0xfc, 0xd0, 0x82, 0xf8, 0x94, 0x5e, 0xc0, 0x77, 0x07, 0x81,\n+\t\t0x28, 0xc9, 0xcb, 0x08, 0x84, 0x50, 0x6b, 0xf0, 0x22, 0xe8,\n+\t\t0x79, 0xb9, 0x15, 0x33, 0xc4, 0x56, 0xa1, 0xd3, 0x1b, 0x24,\n+\t\t0xe3, 0x61, 0xbd, 0x4d, 0x65, 0x80, 0x6b, 0x5d, 0x96, 0x48,\n+\t\t0xa2, 0x44, 0x9e, 0xce, 0xe8, 0x65, 0xd6, 0x3c, 0xe0, 0x9b,\n+\t\t0x6b, 0xa1, 0x36, 0x34, 0xb2, 0x39, 0xe2, 0x03, 0x00, 0xa3,\n+\t\t0x81, 0x92, 0x30, 0x81, 0x8f, 0x30, 0x0e, 0x06, 0x03, 0x55,\n+\t\t0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02,\n+\t\t0xa4, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16,\n+\t\t0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,\n+\t\t0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,\n+\t\t0x03, 0x01, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,\n+\t\t0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,\n+\t\t0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,\n+\t\t0xb1, 0x1a, 0xe3, 0xeb, 0x6f, 0x7c, 0xc3, 0x8f, 0xba, 0x6f,\n+\t\t0x1c, 0xe8, 0xf0, 0x23, 0x08, 0x50, 0x8d, 0x3c, 0xea, 0x31,\n+\t\t0x30, 0x2e, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x01, 0x01, 0xff,\n+\t\t0x04, 0x24, 0x30, 0x22, 0x82, 0x20, 0x30, 0x30, 0x30, 0x30,\n+\t\t0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,\n+\t\t0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,\n+\t\t0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0a,\n+\t\t0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02,\n+\t\t0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x06, 0x31, 0x43,\n+\t\t0xac, 0x03, 0x45, 0x79, 0x3c, 0xd7, 0x5f, 0x6e, 0x6a, 0xf8,\n+\t\t0x0e, 0xfd, 0x35, 0x49, 0xee, 0x1b, 0xbc, 0x47, 0xce, 0xe3,\n+\t\t0x39, 0xec, 0xe4, 0x62, 0xe1, 0x30, 0x1a, 0xa1, 0x89, 0x02,\n+\t\t0x20, 0x35, 0xcd, 0x7a, 0x15, 0x68, 0x09, 0x50, 0x49, 0x9e,\n+\t\t0x3e, 0x05, 0xd7, 0xc2, 0x69, 0x3f, 0x9c, 0x0c, 0x98, 0x92,\n+\t\t0x65, 0xec, 0xae, 0x44, 0xfe, 0xe5, 0x68, 0xb8, 0x09, 0x78,\n+\t\t0x7f, 0x6b, 0x77,\n+\t}\n+\n+\trawClientKeyExchange := []byte{\n+\t\t0x10, 0x00, 0x00, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n+\t\t0x00, 0x21, 0x20, 0x96, 0xed, 0x0c, 0xee, 0xf3, 0x11, 0xb1,\n+\t\t0x9d, 0x8b, 0x1c, 0x02, 0x7f, 0x06, 0x7c, 0x57, 0x7a, 0x14,\n+\t\t0xa6, 0x41, 0xde, 0x63, 0x57, 0x9e, 0xcd, 0x34, 0x54, 0xba,\n+\t\t0x37, 0x4d, 0x34, 0x15, 0x18,\n+\t}\n+\n+\tcache.push(rawCertificate, 0, 0, handshake.TypeCertificate, true)\n+\tcache.push(rawClientKeyExchange, 0, 1, handshake.TypeClientKeyExchange, true)\n+\n+\tif _, _, err := flight4Parse(context.TODO(), mockConn, state, cache, cfg); err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1e4ae60e28516c475e999b389bcbe96a168c4470",
            "date": "2024-12-19T01:22:36Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "ceb84588accbb1b0ca0a51e807cc0062278c6d38",
            "date": "2024-12-12T03:18:39Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "4e34db5ca6566b816295c74f5e547fc260a69749",
            "date": "2024-12-01T04:41:51Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "02434c73b48f63397b58dc1f7615b62575f0e93e",
            "date": "2024-12-01T00:37:09Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "b3e02c4ba7e207c6dfce4e490f30fe09c8c926be",
            "date": "2024-11-04T20:14:27Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-295",
    "description": "Pion DTLS is a Go implementation of Datagram Transport Layer Security. Prior to version 2.1.5, a DTLS Client could provide a Certificate that it doesn't posses the private key for and Pion DTLS wouldn't reject it. This issue affects users that are using Client certificates only. The connection itself is still secure. The Certificate provided by clients can't be trusted when using a Pion DTLS server prior to version 2.1.5. Users should upgrade to version 2.1.5 to receive a patch. There are currently no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-05-21T00:15:12.047",
    "last_modified": "2024-11-21T06:58:45.117",
    "fix_date": "2022-05-15T19:19:30Z"
  },
  "references": [
    {
      "url": "https://github.com/pion/dtls/commit/d2f797183a9f044ce976e6df6f362662ca722412",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pion/dtls/releases/tag/v2.1.5",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pion/dtls/security/advisories/GHSA-w45j-f832-hxvh",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pion/dtls/commit/d2f797183a9f044ce976e6df6f362662ca722412",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pion/dtls/releases/tag/v2.1.5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pion/dtls/security/advisories/GHSA-w45j-f832-hxvh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.147351",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dtls",
    "owner": "pion",
    "created_at": "2018-10-19T05:38:21Z",
    "updated_at": "2025-01-13T08:03:16Z",
    "pushed_at": "2024-12-19T05:02:20Z",
    "size": 1403,
    "stars": 612,
    "forks": 160,
    "open_issues": 9,
    "watchers": 612,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 708925,
      "Dockerfile": 270
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:50:58.128138"
  }
}