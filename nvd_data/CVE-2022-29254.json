{
  "cve_id": "CVE-2022-29254",
  "github_data": {
    "repository": "silverstripe/silverstripe-omnipay",
    "fix_commit": "7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b",
    "related_commits": [
      "7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b",
      "7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b"
    ],
    "patch_url": "https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b.patch",
    "fix_commit_details": {
      "sha": "7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b",
      "commit_date": "2022-04-05T16:51:13Z",
      "author": {
        "login": "kinglozzer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[CVE-2022-29254] Add extra validation on payment completion",
        "length": 59,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 192,
        "additions": 106,
        "deletions": 86
      },
      "files": [
        {
          "filename": "src/Service/AuthorizeService.php",
          "status": "modified",
          "additions": 8,
          "deletions": 11,
          "patch": "@@ -2,15 +2,15 @@\n \n namespace SilverStripe\\Omnipay\\Service;\n \n-use SilverStripe\\Omnipay\\Exception\\InvalidStateException;\n use SilverStripe\\Omnipay\\Exception\\InvalidConfigurationException;\n+use SilverStripe\\Omnipay\\Exception\\InvalidStateException;\n use SilverStripe\\Omnipay\\Helper\\ErrorHandling;\n-use SilverStripe\\Omnipay\\Model\\Message\\AuthorizeRequest;\n use SilverStripe\\Omnipay\\Model\\Message\\AuthorizedResponse;\n-use SilverStripe\\Omnipay\\Model\\Message\\CompleteAuthorizeError;\n use SilverStripe\\Omnipay\\Model\\Message\\AuthorizeError;\n use SilverStripe\\Omnipay\\Model\\Message\\AuthorizeRedirectResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\AuthorizeRequest;\n use SilverStripe\\Omnipay\\Model\\Message\\AwaitingAuthorizeResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\CompleteAuthorizeError;\n use SilverStripe\\Omnipay\\Model\\Message\\CompleteAuthorizeRequest;\n \n class AuthorizeService extends PaymentService\n@@ -67,7 +67,7 @@ public function initiate($data = array())\n             );\n         } elseif ($serviceResponse->isError()) {\n             $this->createMessage(AuthorizeError::class, $response);\n-        } else {\n+        } elseif ($serviceResponse->isSuccessful()) {\n             $this->markCompleted('Authorized', $serviceResponse, $response);\n         }\n \n@@ -118,15 +118,12 @@ public function complete($data = array(), $isNotification = false)\n \n         $serviceResponse = $this->wrapOmnipayResponse($response, $isNotification);\n \n-        if ($serviceResponse->isError()) {\n+        if ($serviceResponse->isAwaitingNotification()) {\n+            ErrorHandling::safeExtend($this->payment, 'onAwaitingAuthorized', $serviceResponse);\n+        } elseif ($serviceResponse->isError()) {\n             $this->createMessage(CompleteAuthorizeError::class, $response);\n-            return $serviceResponse;\n-        }\n-\n-        if (!$serviceResponse->isAwaitingNotification()) {\n+        } elseif ($serviceResponse->isSuccessful()) {\n             $this->markCompleted('Authorized', $serviceResponse, $response);\n-        } else {\n-            ErrorHandling::safeExtend($this->payment, 'onAwaitingAuthorized', $serviceResponse);\n         }\n \n         return $serviceResponse;"
        },
        {
          "filename": "src/Service/CaptureService.php",
          "status": "modified",
          "additions": 9,
          "deletions": 11,
          "patch": "@@ -138,25 +138,23 @@ public function initiate($data = array())\n \n         $serviceResponse = $this->wrapOmnipayResponse($response);\n \n-        if ($serviceResponse->isAwaitingNotification()) {\n+        if ($serviceResponse->isError()) {\n+            $this->createMessage($this->errorMessageType, $response);\n+        } elseif ($serviceResponse->isRedirect() || $serviceResponse->isAwaitingNotification()) {\n             if ($diff < 0) {\n                 $this->createPartialPayment(PaymentMath::multiply($amount, '-1'), $this->pendingState);\n             } elseif ($diff > 0) {\n                 $this->createPartialPayment($diff, $this->pendingState);\n             }\n             $this->payment->Status = $this->pendingState;\n             $this->payment->write();\n-        } else {\n-            if ($serviceResponse->isError()) {\n-                $this->createMessage($this->errorMessageType, $response);\n-            } else {\n-                if ($diff < 0) {\n-                    $this->createPartialPayment(PaymentMath::multiply($amount, '-1'), $this->pendingState);\n-                } elseif ($diff > 0) {\n-                    $this->createPartialPayment($diff, $this->pendingState);\n-                }\n-                $this->markCompleted($this->endState, $serviceResponse, $response);\n+        } elseif ($serviceResponse->isSuccessful()) {\n+            if ($diff < 0) {\n+                $this->createPartialPayment(PaymentMath::multiply($amount, '-1'), $this->pendingState);\n+            } elseif ($diff > 0) {\n+                $this->createPartialPayment($diff, $this->pendingState);\n             }\n+            $this->markCompleted($this->endState, $serviceResponse, $response);\n         }\n \n         return $serviceResponse;"
        },
        {
          "filename": "src/Service/CreateCardService.php",
          "status": "modified",
          "additions": 21,
          "deletions": 19,
          "patch": "@@ -3,14 +3,19 @@\n namespace SilverStripe\\Omnipay\\Service;\n \n use Omnipay\\Common\\Message\\RequestInterface;\n-use SilverStripe\\Omnipay\\Exception\\InvalidStateException;\n use SilverStripe\\Omnipay\\Exception\\InvalidConfigurationException;\n+use SilverStripe\\Omnipay\\Exception\\InvalidStateException;\n use SilverStripe\\Omnipay\\Helper\\ErrorHandling;\n-use SilverStripe\\Omnipay\\Model\\Message;\n+use SilverStripe\\Omnipay\\Model\\Message\\AwaitingCreateCardResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\CompleteCreateCardError;\n+use SilverStripe\\Omnipay\\Model\\Message\\CompleteCreateCardRequest;\n+use SilverStripe\\Omnipay\\Model\\Message\\CreateCardError;\n+use SilverStripe\\Omnipay\\Model\\Message\\CreateCardRedirectResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\CreateCardRequest;\n+use SilverStripe\\Omnipay\\Model\\Message\\CreateCardResponse;\n \n class CreateCardService extends PaymentService\n {\n-\n     /**\n      * Start a createcard request\n      *\n@@ -39,12 +44,12 @@ public function initiate($data = array())\n         $request = $this->oGateway()->createCard($gatewayData);\n         $this->extend('onAfterCreateCard', $request);\n \n-        $this->createMessage(Message\\CreateCardRequest::class, $request);\n+        $this->createMessage(CreateCardRequest::class, $request);\n \n         try {\n             $response = $this->response = $request->send();\n         } catch (\\Omnipay\\Common\\Exception\\OmnipayException $e) {\n-            $this->createMessage(Message\\CreateCardError::class, $e);\n+            $this->createMessage(CreateCardError::class, $e);\n             // create an error response\n             return $this->generateServiceResponse(ServiceResponse::SERVICE_ERROR);\n         }\n@@ -58,12 +63,12 @@ public function initiate($data = array())\n             $this->payment->write();\n \n             $this->createMessage(\n-                $serviceResponse->isRedirect() ? Message\\CreateCardRedirectResponse::class : Message\\AwaitingCreateCardResponse::class,\n+                $serviceResponse->isRedirect() ? CreateCardRedirectResponse::class : AwaitingCreateCardResponse::class,\n                 $response\n             );\n         } elseif ($serviceResponse->isError()) {\n-            $this->createMessage(Message\\CreateCardError::class, $response);\n-        } else {\n+            $this->createMessage(CreateCardError::class, $response);\n+        } elseif ($serviceResponse->isSuccessful()) {\n             $this->markCompleted('CardCreated', $serviceResponse, $response);\n         }\n \n@@ -103,26 +108,23 @@ public function complete($data = array(), $isNotification = false)\n         $request = $gateway->completeCreateCard($gatewayData);\n         $this->extend('onAfterCompleteCreateCard', $request);\n \n-        $this->createMessage(Message\\CompleteCreateCardRequest::class, $request);\n+        $this->createMessage(CompleteCreateCardRequest::class, $request);\n         $response = null;\n         try {\n             $response       = $this->response = $request->send();\n         } catch (\\Omnipay\\Common\\Exception\\OmnipayException $e) {\n-            $this->createMessage(Message\\CompleteCreateCardError::class, $e);\n+            $this->createMessage(CompleteCreateCardError::class, $e);\n             return $this->generateServiceResponse($flags | ServiceResponse::SERVICE_ERROR);\n         }\n \n         $serviceResponse = $this->wrapOmnipayResponse($response, $isNotification);\n \n-        if ($serviceResponse->isError()) {\n-            $this->createMessage(Message\\CompleteCreateCardError::class, $response);\n-            return $serviceResponse;\n-        }\n-\n-        if (!$serviceResponse->isAwaitingNotification()) {\n-            $this->markCompleted('CardCreated', $serviceResponse, $response);\n-        } else {\n+        if ($serviceResponse->isAwaitingNotification()) {\n             ErrorHandling::safeExtend($this->payment, 'onAwaitingCreateCard', $serviceResponse);\n+        } elseif ($serviceResponse->isError()) {\n+            $this->createMessage(CompleteCreateCardError::class, $response);\n+        } elseif ($serviceResponse->isSuccessful()) {\n+            $this->markCompleted('CardCreated', $serviceResponse, $response);\n         }\n \n         return $serviceResponse;\n@@ -131,7 +133,7 @@ public function complete($data = array(), $isNotification = false)\n     protected function markCompleted($endStatus, ServiceResponse $serviceResponse, $gatewayMessage)\n     {\n         parent::markCompleted($endStatus, $serviceResponse, $gatewayMessage);\n-        $this->createMessage(Message\\CreateCardResponse::class, $gatewayMessage);\n+        $this->createMessage(CreateCardResponse::class, $gatewayMessage);\n         ErrorHandling::safeExtend($this->payment, 'onCardCreated', $serviceResponse);\n     }\n }"
        },
        {
          "filename": "src/Service/NotificationCompleteService.php",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -79,7 +79,10 @@ public function complete($data = array(), $isNotification = true)\n         }\n \n         // check if we're done\n-        if (!$serviceResponse->isError() && !$serviceResponse->isAwaitingNotification()) {\n+        if (!$serviceResponse->isError()\n+            && !$serviceResponse->isAwaitingNotification()\n+            && $serviceResponse->isSuccessful()\n+        ) {\n             $this->markCompleted($this->endState, $serviceResponse, $serviceResponse->getOmnipayResponse());\n         }\n "
        },
        {
          "filename": "src/Service/PurchaseService.php",
          "status": "modified",
          "additions": 20,
          "deletions": 18,
          "patch": "@@ -5,7 +5,13 @@\n use SilverStripe\\Omnipay\\Exception\\InvalidStateException;\n use SilverStripe\\Omnipay\\Exception\\InvalidConfigurationException;\n use SilverStripe\\Omnipay\\Helper\\ErrorHandling;\n-use SilverStripe\\Omnipay\\Model\\Message;\n+use SilverStripe\\Omnipay\\Model\\Message\\AwaitingPurchaseResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\CompletePurchaseError;\n+use SilverStripe\\Omnipay\\Model\\Message\\CompletePurchaseRequest;\n+use SilverStripe\\Omnipay\\Model\\Message\\PurchasedResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\PurchaseError;\n+use SilverStripe\\Omnipay\\Model\\Message\\PurchaseRedirectResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\PurchaseRequest;\n \n class PurchaseService extends PaymentService\n {\n@@ -43,12 +49,12 @@ public function initiate($data = array())\n         $request = $this->oGateway()->purchase($gatewayData);\n         $this->extend('onAfterPurchase', $request);\n \n-        $this->createMessage(Message\\PurchaseRequest::class, $request);\n+        $this->createMessage(PurchaseRequest::class, $request);\n \n         try {\n             $response = $this->response = $request->send();\n         } catch (\\Omnipay\\Common\\Exception\\OmnipayException $e) {\n-            $this->createMessage(Message\\PurchaseError::class, $e);\n+            $this->createMessage(PurchaseError::class, $e);\n             // create an error response\n             return $this->generateServiceResponse(ServiceResponse::SERVICE_ERROR);\n         }\n@@ -62,12 +68,12 @@ public function initiate($data = array())\n             $this->payment->write();\n \n             $this->createMessage(\n-                $serviceResponse->isRedirect() ? Message\\PurchaseRedirectResponse::class : Message\\AwaitingPurchaseResponse::class,\n+                $serviceResponse->isRedirect() ? PurchaseRedirectResponse::class : AwaitingPurchaseResponse::class,\n                 $response\n             );\n         } elseif ($serviceResponse->isError()) {\n-            $this->createMessage(Message\\PurchaseError::class, $response);\n-        } else {\n+            $this->createMessage(PurchaseError::class, $response);\n+        } elseif ($serviceResponse->isSuccessful()) {\n             $this->markCompleted('Captured', $serviceResponse, $response);\n         }\n \n@@ -105,36 +111,32 @@ public function complete($data = array(), $isNotification = false)\n         $request = $gateway->completePurchase($gatewayData);\n         $this->extend('onAfterCompletePurchase', $request);\n \n-        $this->createMessage(Message\\CompletePurchaseRequest::class, $request);\n+        $this->createMessage(CompletePurchaseRequest::class, $request);\n         $response = null;\n         try {\n             $response = $this->response = $request->send();\n         } catch (\\Omnipay\\Common\\Exception\\OmnipayException $e) {\n-            $this->createMessage(Message\\CompletePurchaseError::class, $e);\n+            $this->createMessage(CompletePurchaseError::class, $e);\n             return $this->generateServiceResponse($flags | ServiceResponse::SERVICE_ERROR);\n         }\n \n         $serviceResponse = $this->wrapOmnipayResponse($response, $isNotification);\n-        if ($serviceResponse->isError()) {\n-            $this->createMessage(Message\\CompletePurchaseError::class, $response);\n-            return $serviceResponse;\n-        }\n \n-        // only update payment status if we're not waiting for a notification\n-        if (!$serviceResponse->isAwaitingNotification()) {\n-            $this->markCompleted('Captured', $serviceResponse, $response);\n-        } else {\n+        if ($serviceResponse->isAwaitingNotification()) {\n             ErrorHandling::safeExtend($this->payment, 'onAwaitingCaptured', $serviceResponse);\n+        } elseif ($serviceResponse->isError()) {\n+            $this->createMessage(CompletePurchaseError::class, $response);\n+        } elseif ($serviceResponse->isSuccessful()) {\n+            $this->markCompleted('Captured', $serviceResponse, $response);\n         }\n \n-\n         return $serviceResponse;\n     }\n \n     protected function markCompleted($endStatus, ServiceResponse $serviceResponse, $gatewayMessage)\n     {\n         parent::markCompleted($endStatus, $serviceResponse, $gatewayMessage);\n-        $this->createMessage(Message\\PurchasedResponse::class, $gatewayMessage);\n+        $this->createMessage(PurchasedResponse::class, $gatewayMessage);\n         ErrorHandling::safeExtend($this->payment, 'onCaptured', $serviceResponse);\n     }\n }"
        },
        {
          "filename": "src/Service/RefundService.php",
          "status": "modified",
          "additions": 16,
          "deletions": 14,
          "patch": "@@ -9,7 +9,10 @@\n use SilverStripe\\Omnipay\\GatewayInfo;\n use SilverStripe\\Omnipay\\Helper\\ErrorHandling;\n use SilverStripe\\Omnipay\\Helper\\PaymentMath;\n-use SilverStripe\\Omnipay\\Model\\Message;\n+use SilverStripe\\Omnipay\\Model\\Message\\PartiallyRefundedResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\RefundedResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\RefundError;\n+use SilverStripe\\Omnipay\\Model\\Message\\RefundRequest;\n use SilverStripe\\Omnipay\\Model\\Payment;\n \n class RefundService extends NotificationCompleteService\n@@ -20,9 +23,9 @@ class RefundService extends NotificationCompleteService\n \n     protected $pendingState = 'PendingRefund';\n \n-    protected $requestMessageType = Message\\RefundRequest::class;\n+    protected $requestMessageType = RefundRequest::class;\n \n-    protected $errorMessageType = Message\\RefundError::class;\n+    protected $errorMessageType = RefundError::class;\n \n     /**\n      * Return money to the previously charged credit card.\n@@ -127,21 +130,20 @@ public function initiate($data = array())\n \n         $serviceResponse = $this->wrapOmnipayResponse($response);\n \n-        if ($serviceResponse->isAwaitingNotification()) {\n+        if ($serviceResponse->isError()) {\n+            $this->createMessage($this->errorMessageType, $response);\n+        } elseif ($serviceResponse->isRedirect() || $serviceResponse->isAwaitingNotification()) {\n             if ($isPartial) {\n                 $this->createPartialPayment(PaymentMath::multiply($amount, '-1'), $this->pendingState);\n             }\n             $this->payment->Status = $this->pendingState;\n             $this->payment->write();\n-        } else {\n-            if ($serviceResponse->isError()) {\n-                $this->createMessage($this->errorMessageType, $response);\n-            } else {\n-                if ($isPartial) {\n-                    $this->createPartialPayment(PaymentMath::multiply($amount, '-1'), $this->pendingState);\n-                }\n-                $this->markCompleted($this->endState, $serviceResponse, $response);\n+        } elseif ($serviceResponse->isSuccessful()) {\n+            if ($isPartial) {\n+                $this->createPartialPayment(PaymentMath::multiply($amount, '-1'), $this->pendingState);\n             }\n+\n+            $this->markCompleted($this->endState, $serviceResponse, $response);\n         }\n \n         return $serviceResponse;\n@@ -182,9 +184,9 @@ protected function markCompleted($endStatus, ServiceResponse $serviceResponse, $\n \n         parent::markCompleted($endStatus, $serviceResponse, $gatewayMessage);\n         if ($endStatus === 'Captured') {\n-            $this->createMessage(Message\\PartiallyRefundedResponse::class, $gatewayMessage);\n+            $this->createMessage(PartiallyRefundedResponse::class, $gatewayMessage);\n         } else {\n-            $this->createMessage(Message\\RefundedResponse::class, $gatewayMessage);\n+            $this->createMessage(RefundedResponse::class, $gatewayMessage);\n         }\n \n         ErrorHandling::safeExtend($this->payment, 'onRefunded', $serviceResponse);"
        },
        {
          "filename": "src/Service/ServiceResponse.php",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -97,6 +97,22 @@ public function getPayment()\n         return $this->payment;\n     }\n \n+    /**\n+     * Whether the response is marked as successful by Omnipay.\n+     *\n+     * @return bool\n+     */\n+    public function isSuccessful()\n+    {\n+        if ($this->omnipayResponse instanceof NotificationInterface) {\n+            return $this->omnipayResponse->getTransactionStatus() === NotificationInterface::STATUS_COMPLETED;\n+        } elseif ($this->omnipayResponse instanceof AbstractResponse) {\n+            return $this->omnipayResponse->isSuccessful();\n+        }\n+\n+        return false;\n+    }\n+\n     /**\n      * Whether or not this is an *offsite* redirect.\n      * This is only the case when there's an Omnipay response present that *is* a redirect."
        },
        {
          "filename": "src/Service/VoidService.php",
          "status": "modified",
          "additions": 12,
          "deletions": 12,
          "patch": "@@ -2,12 +2,14 @@\n \n namespace SilverStripe\\Omnipay\\Service;\n \n+use Omnipay\\Common\\Exception\\OmnipayException;\n use SilverStripe\\Omnipay\\Exception\\InvalidConfigurationException;\n use SilverStripe\\Omnipay\\Exception\\MissingParameterException;\n-use Omnipay\\Common\\Exception\\OmnipayException;\n use SilverStripe\\Omnipay\\GatewayInfo;\n use SilverStripe\\Omnipay\\Helper\\ErrorHandling;\n-use SilverStripe\\Omnipay\\Model\\Message;\n+use SilverStripe\\Omnipay\\Model\\Message\\VoidedResponse;\n+use SilverStripe\\Omnipay\\Model\\Message\\VoidError;\n+use SilverStripe\\Omnipay\\Model\\Message\\VoidRequest;\n \n class VoidService extends NotificationCompleteService\n {\n@@ -17,9 +19,9 @@ class VoidService extends NotificationCompleteService\n \n     protected $pendingState = 'PendingVoid';\n \n-    protected $requestMessageType = Message\\VoidRequest::class;\n+    protected $requestMessageType = VoidRequest::class;\n \n-    protected $errorMessageType = Message\\VoidError::class;\n+    protected $errorMessageType = VoidError::class;\n \n     /**\n      * Void/cancel a payment\n@@ -97,15 +99,13 @@ public function initiate($data = array())\n \n         $serviceResponse = $this->wrapOmnipayResponse($response);\n \n-        if ($serviceResponse->isAwaitingNotification()) {\n+        if ($serviceResponse->isError()) {\n+            $this->createMessage($this->errorMessageType, $response);\n+        } elseif ($serviceResponse->isRedirect() || $serviceResponse->isAwaitingNotification()) {\n             $this->payment->Status = $this->pendingState;\n             $this->payment->write();\n-        } else {\n-            if ($serviceResponse->isError()) {\n-                $this->createMessage($this->errorMessageType, $response);\n-            } else {\n-                $this->markCompleted($this->endState, $serviceResponse, $response);\n-            }\n+        } elseif ($serviceResponse->isSuccessful()) {\n+            $this->markCompleted($this->endState, $serviceResponse, $response);\n         }\n \n         return $serviceResponse;\n@@ -114,7 +114,7 @@ public function initiate($data = array())\n     protected function markCompleted($endStatus, ServiceResponse $serviceResponse, $gatewayMessage)\n     {\n         parent::markCompleted($endStatus, $serviceResponse, $gatewayMessage);\n-        $this->createMessage(Message\\VoidedResponse::class, $gatewayMessage);\n+        $this->createMessage(VoidedResponse::class, $gatewayMessage);\n \n         ErrorHandling::safeExtend($this->payment, 'onVoid', $serviceResponse);\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ff9b3adfd13365f7d8b693a946a4286a4a546abb",
            "date": "2024-09-03T08:37:57Z",
            "author_login": "wernerkrauss"
          },
          {
            "sha": "5b8c174082dc359974ff83a1e425c4445d7210f4",
            "date": "2024-04-10T03:19:58Z",
            "author_login": "wilr"
          },
          {
            "sha": "0a3f1248a0dfa24d602e8af508ef25db7818aed5",
            "date": "2024-04-09T19:10:19Z",
            "author_login": "wilr"
          },
          {
            "sha": "8c48ae0c5a007018abc2bb39e88cb1553804568c",
            "date": "2024-04-09T19:03:06Z",
            "author_login": "wilr"
          },
          {
            "sha": "dde9c772476659772ff4730f3200f7a8cddb7ff9",
            "date": "2024-04-09T19:00:34Z",
            "author_login": "wilr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-436",
    "description": "silverstripe-omnipay is a SilverStripe integration with Omnipay PHP payments library. For a subset of Omnipay gateways (those that use intermediary states like `isNotification()` or `isRedirect()`), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data. The following versions have been patched to fix this issue: `2.5.2`, `3.0.2`, `3.1.4`, and `3.2.1`. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-06-09T07:15:06.913",
    "last_modified": "2024-11-21T06:58:48.953",
    "fix_date": "2022-04-05T16:51:13Z"
  },
  "references": [
    {
      "url": "https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.420448",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "silverstripe-omnipay",
    "owner": "silverstripe",
    "created_at": "2013-08-27T21:19:55Z",
    "updated_at": "2024-09-03T08:38:02Z",
    "pushed_at": "2024-09-03T08:45:19Z",
    "size": 946,
    "stars": 39,
    "forks": 67,
    "open_issues": 17,
    "watchers": 39,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 409732,
      "Scheme": 3832
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T18:16:58.687046"
  }
}