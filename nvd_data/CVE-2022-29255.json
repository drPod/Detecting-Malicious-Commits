{
  "cve_id": "CVE-2022-29255",
  "github_data": {
    "repository": "vyperlang/vyper",
    "fix_commit": "6b4d8ff185de071252feaa1c319712b2d6577f8d",
    "related_commits": [
      "6b4d8ff185de071252feaa1c319712b2d6577f8d",
      "6b4d8ff185de071252feaa1c319712b2d6577f8d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "6b4d8ff185de071252feaa1c319712b2d6577f8d",
      "commit_date": "2022-06-06T18:38:28Z",
      "author": {
        "login": "charles-cooper",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4v9q-cgpw-cf38",
        "length": 296,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 65,
        "additions": 56,
        "deletions": 9
      },
      "files": [
        {
          "filename": "tests/parser/features/external_contracts/test_external_contract_calls.py",
          "status": "modified",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -2411,3 +2411,44 @@ def bar(foo: Foo):\n     # fails due to returndatasize being nonzero but also lt 64\n     assert_tx_failed(lambda: c.bar(bad_1.address))\n     c.bar(bad_2.address)\n+\n+\n+def test_contract_address_evaluation(get_contract):\n+    callee_code = \"\"\"\n+# implements: Foo\n+\n+interface Counter:\n+    def increment_counter(): nonpayable\n+\n+@external\n+def foo():\n+    pass\n+\n+@external\n+def bar() -> address:\n+    Counter(msg.sender).increment_counter()\n+    return self\n+    \"\"\"\n+    code = \"\"\"\n+# implements: Counter\n+\n+interface Foo:\n+    def foo(): nonpayable\n+    def bar() -> address: nonpayable\n+\n+counter: uint256\n+\n+@external\n+def increment_counter():\n+    self.counter += 1\n+\n+@external\n+def do_stuff(f: Foo) -> uint256:\n+    Foo(f.bar()).foo()\n+    return self.counter\n+    \"\"\"\n+\n+    c1 = get_contract(code)\n+    c2 = get_contract(callee_code)\n+\n+    assert c1.do_stuff(c2.address) == 1"
        },
        {
          "filename": "vyper/codegen/external_call.py",
          "status": "modified",
          "additions": 15,
          "deletions": 9,
          "patch": "@@ -168,15 +168,7 @@ def _extcodesize_check(address):\n     return [\"assert\", [\"extcodesize\", address]]\n \n \n-def ir_for_external_call(call_expr, context):\n-    from vyper.codegen.expr import Expr  # TODO rethink this circular import\n-\n-    contract_address = Expr.parse_value_expr(call_expr.func.value, context)\n-    call_kwargs = _parse_kwargs(call_expr, context)\n-    args_ir = [Expr(x, context).ir_node for x in call_expr.args]\n-\n-    assert isinstance(contract_address.typ, InterfaceType)\n-\n+def _external_call_helper(contract_address, args_ir, call_kwargs, call_expr, context):\n     # expr.func._metadata[\"type\"].return_type is more accurate\n     # than fn_sig.return_type in the case of JSON interfaces.\n     fn_type = call_expr.func._metadata[\"type\"]\n@@ -223,3 +215,17 @@ def ir_for_external_call(call_expr, context):\n         ret.append(ret_unpacker)\n \n     return IRnode.from_list(ret, typ=return_t, location=MEMORY)\n+\n+\n+def ir_for_external_call(call_expr, context):\n+    from vyper.codegen.expr import Expr  # TODO rethink this circular import\n+\n+    contract_address = Expr.parse_value_expr(call_expr.func.value, context)\n+    assert isinstance(contract_address.typ, InterfaceType)\n+    args_ir = [Expr(x, context).ir_node for x in call_expr.args]\n+    call_kwargs = _parse_kwargs(call_expr, context)\n+\n+    with contract_address.cache_when_complex(\"external_contract\") as (b1, contract_address):\n+        return b1.resolve(\n+            _external_call_helper(contract_address, args_ir, call_kwargs, call_expr, context)\n+        )"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "762eec682450a6631342fad06898471ea2a6aa90",
            "date": "2025-01-21T04:17:56Z",
            "author_login": "tserg"
          },
          {
            "sha": "4d693b7212be28171a2a75a452d44659c0d80444",
            "date": "2025-01-20T19:05:04Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "9a2cb2ed95d0c970ca4c2012593f8851787e547e",
            "date": "2025-01-20T17:04:06Z",
            "author_login": "HodanPlodky"
          },
          {
            "sha": "7136eab0a254aa2ff7ddca41cc05f2ee1fa99caf",
            "date": "2025-01-20T16:51:21Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "d7f50dfe6a361557968a4a01278d8ea0d96e227e",
            "date": "2025-01-20T16:14:26Z",
            "author_login": "tserg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
    "cwe_id": "CWE-670",
    "description": "Vyper is a Pythonic Smart Contract Language for the ethereum virtual machine. In versions prior to 0.3.4 when a calling an external contract with no return value, the contract address (including side effects) could be evaluated twice. This may result in incorrect outcomes for contracts. This issue has been addressed in v0.3.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-09T09:15:08.377",
    "last_modified": "2024-11-21T06:58:49.077",
    "fix_date": "2022-06-06T18:38:28Z"
  },
  "references": [
    {
      "url": "https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.420580",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "vyper",
    "owner": "vyperlang",
    "created_at": "2016-11-11T08:56:41Z",
    "updated_at": "2025-01-25T00:21:50Z",
    "pushed_at": "2025-01-21T04:17:56Z",
    "size": 12406,
    "stars": 4956,
    "forks": 821,
    "open_issues": 496,
    "watchers": 4956,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 2697203,
      "Makefile": 2222,
      "Batchfile": 1614,
      "Dockerfile": 1145,
      "Shell": 793
    },
    "commit_activity": {
      "total_commits_last_year": 318,
      "avg_commits_per_week": 6.115384615384615,
      "days_active_last_year": 155
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:47:54.079255"
  }
}