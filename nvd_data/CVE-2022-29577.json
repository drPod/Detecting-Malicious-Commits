{
  "cve_id": "CVE-2022-29577",
  "github_data": {
    "repository": "nahsra/antisamy",
    "fix_commit": "32e273507da0e964b58c50fd8a4c94c9d9363af0",
    "related_commits": [
      "32e273507da0e964b58c50fd8a4c94c9d9363af0",
      "32e273507da0e964b58c50fd8a4c94c9d9363af0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "32e273507da0e964b58c50fd8a4c94c9d9363af0",
      "commit_date": "2022-04-09T21:47:07Z",
      "author": {
        "login": "spassarop",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix child node removal on style tag processing",
        "length": 46,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 14,
        "additions": 8,
        "deletions": 6
      },
      "files": [
        {
          "filename": "src/main/java/org/owasp/validator/html/scan/AntiSamyDOMScanner.java",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -407,7 +407,8 @@ private boolean processStyleTag(Element ele, Node parentNode) {\n         CssScanner styleScanner = new CssScanner(policy, messages, policy.isEmbedStyleSheets());\n \n         try {\n-            if (ele.getChildNodes().getLength() > 0) {\n+            int childNodesCount = ele.getChildNodes().getLength();\n+            if (childNodesCount > 0) {\n                 StringBuffer toScan = new StringBuffer();\n \n                 for (int i = 0; i < ele.getChildNodes().getLength(); i++) {\n@@ -428,29 +429,26 @@ private boolean processStyleTag(Element ele, Node parentNode) {\n                  * would normally be left with an empty style tag and\n                  * break all CSS. To prevent that, we have this check.\n                  */\n-\n                 String cleanHTML = cr.getCleanHTML();\n                 cleanHTML = cleanHTML == null || cleanHTML.equals(\"\") ? \"/* */\" : cleanHTML;\n \n                 ele.getFirstChild().setNodeValue(cleanHTML);\n                 /*\n                  * Remove every other node after cleaning CSS, there will\n                  * be only one node in the end, as it always should have.\n+                 * Starting from the end due to list updating on the fly.\n                  */\n-                for (int i = 1; i < ele.getChildNodes().getLength(); i++) {\n+                for (int i = childNodesCount - 1; i >= 1; i--) {\n                     Node childNode = ele.getChildNodes().item(i);\n                     ele.removeChild(childNode);\n                 }\n             }\n-\n         } catch (DOMException | ScanException | ParseException | NumberFormatException e) {\n-\n             /*\n              * ParseException shouldn't be possible anymore, but we'll leave it\n              * here because I (Arshan) am hilariously dumb sometimes.\n              * Batik can throw NumberFormatExceptions (see bug #48).\n              */\n-\n             addError(ErrorMessageUtil.ERROR_CSS_TAG_MALFORMED, new Object[]{HTMLEntityEncoder.htmlEntityEncode(ele.getFirstChild().getNodeValue())});\n             parentNode.removeChild(ele);\n             return true;"
        },
        {
          "filename": "src/test/java/org/owasp/validator/html/test/AntiSamyTest.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1713,10 +1713,14 @@ public void testSmuggledTagsInStyleContent() throws ScanException, PolicyExcepti\n         Policy revised = policy.cloneWithDirective(Policy.USE_XHTML,\"true\");\n         assertThat(as.scan(\"<style/>b<![cdata[</style><a href=javascript:alert(1)>test\", revised, AntiSamy.DOM).getCleanHTML(), not(containsString(\"javascript\")));\n         assertThat(as.scan(\"<style/>b<![cdata[</style><a href=javascript:alert(1)>test\", revised, AntiSamy.SAX).getCleanHTML(), not(containsString(\"javascript\")));\n+        assertThat(as.scan(\"<select<style/>k<input<</>input/onfocus=alert(1)>\", revised, AntiSamy.DOM).getCleanHTML(), not(containsString(\"input\")));\n+        assertThat(as.scan(\"<select<style/>k<input<</>input/onfocus=alert(1)>\", revised, AntiSamy.SAX).getCleanHTML(), not(containsString(\"input\")));\n \n         Policy revised2 = policy.cloneWithDirective(Policy.USE_XHTML,\"false\");\n         assertThat(as.scan(\"<select<style/>W<xmp<script>alert(1)</script>\", revised2, AntiSamy.DOM).getCleanHTML(), not(containsString(\"script\")));\n         assertThat(as.scan(\"<select<style/>W<xmp<script>alert(1)</script>\", revised2, AntiSamy.SAX).getCleanHTML(), not(containsString(\"script\")));\n+        assertThat(as.scan(\"<select<style/>k<input<</>input/onfocus=alert(1)>\", revised2, AntiSamy.DOM).getCleanHTML(), not(containsString(\"input\")));\n+        assertThat(as.scan(\"<select<style/>k<input<</>input/onfocus=alert(1)>\", revised2, AntiSamy.SAX).getCleanHTML(), not(containsString(\"input\")));\n     }\n \n     @Test(timeout = 3000)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5c59b75260462430839fa319dad7ecb52c450026",
            "date": "2025-01-23T15:15:50Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "786b18cdbf767ec621587163cee19114d7a08d85",
            "date": "2025-01-18T01:15:39Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e8661cd787744602bc632277c5cda19c412c76c3",
            "date": "2025-01-18T01:04:26Z",
            "author_login": "davewichers"
          },
          {
            "sha": "ef53fa0e7e9fbfa5639d31858daeeb9763521220",
            "date": "2025-01-13T15:42:53Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "285b8b006fc25744d9c66e8d800ddba2066646d7",
            "date": "2025-01-13T15:42:44Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "OWASP AntiSamy before 1.6.7 allows XSS via HTML tag smuggling on STYLE content with crafted input. The output serializer does not properly encode the supposed Cascading Style Sheets (CSS) content. NOTE: this issue exists because of an incomplete fix for CVE-2022-28367.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-21T23:15:10.467",
    "last_modified": "2024-11-21T06:59:20.210",
    "fix_date": "2022-04-09T21:47:07Z"
  },
  "references": [
    {
      "url": "https://github.com/nahsra/antisamy/commit/32e273507da0e964b58c50fd8a4c94c9d9363af0",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nahsra/antisamy/releases/tag/v1.6.7",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nahsra/antisamy/commit/32e273507da0e964b58c50fd8a4c94c9d9363af0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nahsra/antisamy/releases/tag/v1.6.7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.408945",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "antisamy",
    "owner": "nahsra",
    "created_at": "2016-09-24T22:00:02Z",
    "updated_at": "2025-01-23T15:15:56Z",
    "pushed_at": "2025-01-23T15:15:59Z",
    "size": 5166,
    "stars": 196,
    "forks": 93,
    "open_issues": 19,
    "watchers": 196,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "DIGITAL Command Language": 694157,
      "HTML": 620575,
      "Java": 417469,
      "JavaScript": 150770,
      "CSS": 127283,
      "Shell": 92913,
      "Roff": 11750,
      "PHP": 22,
      "ASP.NET": 3
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T07:50:39.925424"
  }
}