{
  "cve_id": "CVE-2022-3023",
  "github_data": {
    "repository": "pingcap/tidb",
    "fix_commit": "d0376379d615cc8f263a0b17c031ce403c8dcbfb",
    "related_commits": [
      "d0376379d615cc8f263a0b17c031ce403c8dcbfb",
      "d0376379d615cc8f263a0b17c031ce403c8dcbfb"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d0376379d615cc8f263a0b17c031ce403c8dcbfb",
      "commit_date": "2022-10-19T02:27:52Z",
      "author": {
        "login": "lance6716",
        "type": "User",
        "stats": {
          "total_commits": 362,
          "average_weekly_commits": 0.7372708757637475,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 141
        }
      },
      "commit_message": {
        "title": "*: don't use DSN to avoid some security problems (#38342)",
        "length": 57,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 274,
        "additions": 144,
        "deletions": 130
      },
      "files": [
        {
          "filename": "br/pkg/lightning/checkpoints/checkpoints.go",
          "status": "modified",
          "additions": 18,
          "deletions": 2,
          "patch": "@@ -517,7 +517,15 @@ func OpenCheckpointsDB(ctx context.Context, cfg *config.Config) (DB, error) {\n \n \tswitch cfg.Checkpoint.Driver {\n \tcase config.CheckpointDriverMySQL:\n-\t\tdb, err := common.ConnectMySQL(cfg.Checkpoint.DSN)\n+\t\tvar (\n+\t\t\tdb  *sql.DB\n+\t\t\terr error\n+\t\t)\n+\t\tif cfg.Checkpoint.MySQLParam != nil {\n+\t\t\tdb, err = cfg.Checkpoint.MySQLParam.Connect()\n+\t\t} else {\n+\t\t\tdb, err = sql.Open(\"mysql\", cfg.Checkpoint.DSN)\n+\t\t}\n \t\tif err != nil {\n \t\t\treturn nil, errors.Trace(err)\n \t\t}\n@@ -546,7 +554,15 @@ func IsCheckpointsDBExists(ctx context.Context, cfg *config.Config) (bool, error\n \t}\n \tswitch cfg.Checkpoint.Driver {\n \tcase config.CheckpointDriverMySQL:\n-\t\tdb, err := sql.Open(\"mysql\", cfg.Checkpoint.DSN)\n+\t\tvar (\n+\t\t\tdb  *sql.DB\n+\t\t\terr error\n+\t\t)\n+\t\tif cfg.Checkpoint.MySQLParam != nil {\n+\t\t\tdb, err = cfg.Checkpoint.MySQLParam.Connect()\n+\t\t} else {\n+\t\t\tdb, err = sql.Open(\"mysql\", cfg.Checkpoint.DSN)\n+\t\t}\n \t\tif err != nil {\n \t\t\treturn false, errors.Trace(err)\n \t\t}"
        },
        {
          "filename": "br/pkg/lightning/common/util.go",
          "status": "modified",
          "additions": 28,
          "deletions": 23,
          "patch": "@@ -23,7 +23,6 @@ import (\n \t\"io\"\n \t\"net\"\n \t\"net/http\"\n-\t\"net/url\"\n \t\"os\"\n \t\"strconv\"\n \t\"strings\"\n@@ -58,28 +57,38 @@ type MySQLConnectParam struct {\n \tVars             map[string]string\n }\n \n-func (param *MySQLConnectParam) ToDSN() string {\n-\thostPort := net.JoinHostPort(param.Host, strconv.Itoa(param.Port))\n-\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/?charset=utf8mb4&sql_mode='%s'&maxAllowedPacket=%d&tls=%s\",\n-\t\tparam.User, param.Password, hostPort,\n-\t\tparam.SQLMode, param.MaxAllowedPacket, param.TLS)\n+func (param *MySQLConnectParam) ToDriverConfig() *mysql.Config {\n+\tcfg := mysql.NewConfig()\n+\tcfg.Params = make(map[string]string)\n+\n+\tcfg.User = param.User\n+\tcfg.Passwd = param.Password\n+\tcfg.Net = \"tcp\"\n+\tcfg.Addr = net.JoinHostPort(param.Host, strconv.Itoa(param.Port))\n+\tcfg.Params[\"charset\"] = \"utf8mb4\"\n+\tcfg.Params[\"sql_mode\"] = fmt.Sprintf(\"'%s'\", param.SQLMode)\n+\tcfg.MaxAllowedPacket = int(param.MaxAllowedPacket)\n+\tcfg.TLSConfig = param.TLS\n \n \tfor k, v := range param.Vars {\n-\t\tdsn += fmt.Sprintf(\"&%s='%s'\", k, url.QueryEscape(v))\n+\t\tcfg.Params[k] = fmt.Sprintf(\"'%s'\", v)\n \t}\n-\n-\treturn dsn\n+\treturn cfg\n }\n \n-func tryConnectMySQL(dsn string) (*sql.DB, error) {\n-\tdriverName := \"mysql\"\n-\tfailpoint.Inject(\"MockMySQLDriver\", func(val failpoint.Value) {\n-\t\tdriverName = val.(string)\n+func tryConnectMySQL(cfg *mysql.Config) (*sql.DB, error) {\n+\tfailpoint.Inject(\"MustMySQLPassword\", func(val failpoint.Value) {\n+\t\tpwd := val.(string)\n+\t\tif cfg.Passwd != pwd {\n+\t\t\tfailpoint.Return(nil, &mysql.MySQLError{Number: tmysql.ErrAccessDenied, Message: \"access denied\"})\n+\t\t}\n+\t\tfailpoint.Return(nil, nil)\n \t})\n-\tdb, err := sql.Open(driverName, dsn)\n+\tc, err := mysql.NewConnector(cfg)\n \tif err != nil {\n \t\treturn nil, errors.Trace(err)\n \t}\n+\tdb := sql.OpenDB(c)\n \tif err = db.Ping(); err != nil {\n \t\t_ = db.Close()\n \t\treturn nil, errors.Trace(err)\n@@ -89,13 +98,9 @@ func tryConnectMySQL(dsn string) (*sql.DB, error) {\n \n // ConnectMySQL connects MySQL with the dsn. If access is denied and the password is a valid base64 encoding,\n // we will try to connect MySQL with the base64 decoding of the password.\n-func ConnectMySQL(dsn string) (*sql.DB, error) {\n-\tcfg, err := mysql.ParseDSN(dsn)\n-\tif err != nil {\n-\t\treturn nil, errors.Trace(err)\n-\t}\n+func ConnectMySQL(cfg *mysql.Config) (*sql.DB, error) {\n \t// Try plain password first.\n-\tdb, firstErr := tryConnectMySQL(dsn)\n+\tdb, firstErr := tryConnectMySQL(cfg)\n \tif firstErr == nil {\n \t\treturn db, nil\n \t}\n@@ -104,9 +109,9 @@ func ConnectMySQL(dsn string) (*sql.DB, error) {\n \t\t// If password is encoded by base64, try the decoded string as well.\n \t\tif password, decodeErr := base64.StdEncoding.DecodeString(cfg.Passwd); decodeErr == nil && string(password) != cfg.Passwd {\n \t\t\tcfg.Passwd = string(password)\n-\t\t\tdb, err = tryConnectMySQL(cfg.FormatDSN())\n+\t\t\tdb2, err := tryConnectMySQL(cfg)\n \t\t\tif err == nil {\n-\t\t\t\treturn db, nil\n+\t\t\t\treturn db2, nil\n \t\t\t}\n \t\t}\n \t}\n@@ -115,7 +120,7 @@ func ConnectMySQL(dsn string) (*sql.DB, error) {\n }\n \n func (param *MySQLConnectParam) Connect() (*sql.DB, error) {\n-\tdb, err := ConnectMySQL(param.ToDSN())\n+\tdb, err := ConnectMySQL(param.ToDriverConfig())\n \tif err != nil {\n \t\treturn nil, errors.Trace(err)\n \t}"
        },
        {
          "filename": "br/pkg/lightning/common/util_test.go",
          "status": "modified",
          "additions": 5,
          "deletions": 64,
          "patch": "@@ -16,16 +16,12 @@ package common_test\n \n import (\n \t\"context\"\n-\t\"database/sql\"\n-\t\"database/sql/driver\"\n \t\"encoding/base64\"\n \t\"encoding/json\"\n \t\"fmt\"\n \t\"io\"\n-\t\"math/rand\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n-\t\"strconv\"\n \t\"testing\"\n \t\"time\"\n \n@@ -35,7 +31,6 @@ import (\n \t\"github.com/pingcap/failpoint\"\n \t\"github.com/pingcap/tidb/br/pkg/lightning/common\"\n \t\"github.com/pingcap/tidb/br/pkg/lightning/log\"\n-\ttmysql \"github.com/pingcap/tidb/errno\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n )\n@@ -85,66 +80,14 @@ func TestGetJSON(t *testing.T) {\n \trequire.Regexp(t, \".*http status code != 200.*\", err.Error())\n }\n \n-func TestToDSN(t *testing.T) {\n-\tparam := common.MySQLConnectParam{\n-\t\tHost:             \"127.0.0.1\",\n-\t\tPort:             4000,\n-\t\tUser:             \"root\",\n-\t\tPassword:         \"123456\",\n-\t\tSQLMode:          \"strict\",\n-\t\tMaxAllowedPacket: 1234,\n-\t\tTLS:              \"cluster\",\n-\t\tVars: map[string]string{\n-\t\t\t\"tidb_distsql_scan_concurrency\": \"1\",\n-\t\t},\n-\t}\n-\trequire.Equal(t, \"root:123456@tcp(127.0.0.1:4000)/?charset=utf8mb4&sql_mode='strict'&maxAllowedPacket=1234&tls=cluster&tidb_distsql_scan_concurrency='1'\", param.ToDSN())\n-\n-\tparam.Host = \"::1\"\n-\trequire.Equal(t, \"root:123456@tcp([::1]:4000)/?charset=utf8mb4&sql_mode='strict'&maxAllowedPacket=1234&tls=cluster&tidb_distsql_scan_concurrency='1'\", param.ToDSN())\n-}\n-\n-type mockDriver struct {\n-\tdriver.Driver\n-\tplainPsw string\n-}\n-\n-func (m *mockDriver) Open(dsn string) (driver.Conn, error) {\n-\tcfg, err := mysql.ParseDSN(dsn)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\taccessDenied := cfg.Passwd != m.plainPsw\n-\treturn &mockConn{accessDenied: accessDenied}, nil\n-}\n-\n-type mockConn struct {\n-\tdriver.Conn\n-\tdriver.Pinger\n-\taccessDenied bool\n-}\n-\n-func (c *mockConn) Ping(ctx context.Context) error {\n-\tif c.accessDenied {\n-\t\treturn &mysql.MySQLError{Number: tmysql.ErrAccessDenied, Message: \"access denied\"}\n-\t}\n-\treturn nil\n-}\n-\n-func (c *mockConn) Close() error {\n-\treturn nil\n-}\n-\n func TestConnect(t *testing.T) {\n \tplainPsw := \"dQAUoDiyb1ucWZk7\"\n-\tdriverName := \"mysql-mock-\" + strconv.Itoa(rand.Int())\n-\tsql.Register(driverName, &mockDriver{plainPsw: plainPsw})\n \n \trequire.NoError(t, failpoint.Enable(\n-\t\t\"github.com/pingcap/tidb/br/pkg/lightning/common/MockMySQLDriver\",\n-\t\tfmt.Sprintf(\"return(\\\"%s\\\")\", driverName)))\n+\t\t\"github.com/pingcap/tidb/br/pkg/lightning/common/MustMySQLPassword\",\n+\t\tfmt.Sprintf(\"return(\\\"%s\\\")\", plainPsw)))\n \tdefer func() {\n-\t\trequire.NoError(t, failpoint.Disable(\"github.com/pingcap/tidb/br/pkg/lightning/common/MockMySQLDriver\"))\n+\t\trequire.NoError(t, failpoint.Disable(\"github.com/pingcap/tidb/br/pkg/lightning/common/MustMySQLPassword\"))\n \t}()\n \n \tparam := common.MySQLConnectParam{\n@@ -155,13 +98,11 @@ func TestConnect(t *testing.T) {\n \t\tSQLMode:          \"strict\",\n \t\tMaxAllowedPacket: 1234,\n \t}\n-\tdb, err := param.Connect()\n+\t_, err := param.Connect()\n \trequire.NoError(t, err)\n-\trequire.NoError(t, db.Close())\n \tparam.Password = base64.StdEncoding.EncodeToString([]byte(plainPsw))\n-\tdb, err = param.Connect()\n+\t_, err = param.Connect()\n \trequire.NoError(t, err)\n-\trequire.NoError(t, db.Close())\n }\n \n func TestIsContextCanceledError(t *testing.T) {"
        },
        {
          "filename": "br/pkg/lightning/config/config.go",
          "status": "modified",
          "additions": 7,
          "deletions": 6,
          "patch": "@@ -553,11 +553,12 @@ type TikvImporter struct {\n }\n \n type Checkpoint struct {\n-\tSchema           string                 `toml:\"schema\" json:\"schema\"`\n-\tDSN              string                 `toml:\"dsn\" json:\"-\"` // DSN may contain password, don't expose this to JSON.\n-\tDriver           string                 `toml:\"driver\" json:\"driver\"`\n-\tEnable           bool                   `toml:\"enable\" json:\"enable\"`\n-\tKeepAfterSuccess CheckpointKeepStrategy `toml:\"keep-after-success\" json:\"keep-after-success\"`\n+\tSchema           string                    `toml:\"schema\" json:\"schema\"`\n+\tDSN              string                    `toml:\"dsn\" json:\"-\"` // DSN may contain password, don't expose this to JSON.\n+\tMySQLParam       *common.MySQLConnectParam `toml:\"-\" json:\"-\"`   // For some security reason, we use MySQLParam instead of DSN.\n+\tDriver           string                    `toml:\"driver\" json:\"driver\"`\n+\tEnable           bool                      `toml:\"enable\" json:\"enable\"`\n+\tKeepAfterSuccess CheckpointKeepStrategy    `toml:\"keep-after-success\" json:\"keep-after-success\"`\n }\n \n type Cron struct {\n@@ -1142,7 +1143,7 @@ func (cfg *Config) AdjustCheckPoint() {\n \t\t\t\tMaxAllowedPacket: defaultMaxAllowedPacket,\n \t\t\t\tTLS:              cfg.TiDB.TLS,\n \t\t\t}\n-\t\t\tcfg.Checkpoint.DSN = param.ToDSN()\n+\t\t\tcfg.Checkpoint.MySQLParam = &param\n \t\tcase CheckpointDriverFile:\n \t\t\tcfg.Checkpoint.DSN = \"/tmp/\" + cfg.Checkpoint.Schema + \".pb\"\n \t\t}"
        },
        {
          "filename": "br/pkg/lightning/config/config_test.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -32,7 +32,6 @@ import (\n \t\"github.com/BurntSushi/toml\"\n \t\"github.com/pingcap/tidb/br/pkg/lightning/common\"\n \t\"github.com/pingcap/tidb/br/pkg/lightning/config\"\n-\t\"github.com/pingcap/tidb/parser/mysql\"\n \t\"github.com/stretchr/testify/require\"\n )\n \n@@ -626,7 +625,9 @@ func TestLoadConfig(t *testing.T) {\n \ttaskCfg.TiDB.DistSQLScanConcurrency = 1\n \terr = taskCfg.Adjust(context.Background())\n \trequire.NoError(t, err)\n-\trequire.Equal(t, \"guest:12345@tcp(172.16.30.11:4001)/?charset=utf8mb4&sql_mode='\"+mysql.DefaultSQLMode+\"'&maxAllowedPacket=67108864&tls=false\", taskCfg.Checkpoint.DSN)\n+\tequivalentDSN := taskCfg.Checkpoint.MySQLParam.ToDriverConfig().FormatDSN()\n+\texpectedDSN := \"guest:12345@tcp(172.16.30.11:4001)/?tls=false&maxAllowedPacket=67108864&charset=utf8mb4&sql_mode=%27ONLY_FULL_GROUP_BY%2CSTRICT_TRANS_TABLES%2CNO_ZERO_IN_DATE%2CNO_ZERO_DATE%2CERROR_FOR_DIVISION_BY_ZERO%2CNO_AUTO_CREATE_USER%2CNO_ENGINE_SUBSTITUTION%27\"\n+\trequire.Equal(t, expectedDSN, equivalentDSN)\n \n \tresult := taskCfg.String()\n \trequire.Regexp(t, `.*\"pd-addr\":\"172.16.30.11:2379,172.16.30.12:2379\".*`, result)"
        },
        {
          "filename": "cmd/importer/db.go",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -22,7 +22,7 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \n-\t_ \"github.com/go-sql-driver/mysql\"\n+\tmysql2 \"github.com/go-sql-driver/mysql\"\n \t\"github.com/pingcap/errors\"\n \t\"github.com/pingcap/log\"\n \t\"github.com/pingcap/tidb/parser/mysql\"\n@@ -318,13 +318,18 @@ func execSQL(db *sql.DB, sql string) error {\n }\n \n func createDB(cfg DBConfig) (*sql.DB, error) {\n-\tdbDSN := fmt.Sprintf(\"%s:%s@tcp(%s:%d)/%s?charset=utf8\", cfg.User, cfg.Password, cfg.Host, cfg.Port, cfg.Name)\n-\tdb, err := sql.Open(\"mysql\", dbDSN)\n+\tdriverCfg := mysql2.NewConfig()\n+\tdriverCfg.User = cfg.User\n+\tdriverCfg.Passwd = cfg.Password\n+\tdriverCfg.Net = \"tcp\"\n+\tdriverCfg.Addr = cfg.Host + \":\" + strconv.Itoa(cfg.Port)\n+\tdriverCfg.DBName = cfg.Name\n+\n+\tc, err := mysql2.NewConnector(driverCfg)\n \tif err != nil {\n \t\treturn nil, errors.Trace(err)\n \t}\n-\n-\treturn db, nil\n+\treturn sql.OpenDB(c), nil\n }\n \n func closeDB(db *sql.DB) error {"
        },
        {
          "filename": "dumpling/export/config.go",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -218,6 +218,31 @@ func (conf *Config) GetDSN(db string) string {\n \treturn dsn\n }\n \n+// GetDriverConfig returns the MySQL driver config from Config.\n+func (conf *Config) GetDriverConfig(db string) *mysql.Config {\n+\tdriverCfg := mysql.NewConfig()\n+\t// maxAllowedPacket=0 can be used to automatically fetch the max_allowed_packet variable from server on every connection.\n+\t// https://github.com/go-sql-driver/mysql#maxallowedpacket\n+\thostPort := net.JoinHostPort(conf.Host, strconv.Itoa(conf.Port))\n+\tdriverCfg.User = conf.User\n+\tdriverCfg.Passwd = conf.Password\n+\tdriverCfg.Net = \"tcp\"\n+\tdriverCfg.Addr = hostPort\n+\tdriverCfg.DBName = db\n+\tdriverCfg.Collation = \"utf8mb4_general_ci\"\n+\tdriverCfg.ReadTimeout = conf.ReadTimeout\n+\tdriverCfg.WriteTimeout = 30 * time.Second\n+\tdriverCfg.InterpolateParams = true\n+\tdriverCfg.MaxAllowedPacket = 0\n+\tif conf.Security.DriveTLSName != \"\" {\n+\t\tdriverCfg.TLSConfig = conf.Security.DriveTLSName\n+\t}\n+\tif conf.AllowCleartextPasswords {\n+\t\tdriverCfg.AllowCleartextPasswords = true\n+\t}\n+\treturn driverCfg\n+}\n+\n func timestampDirName() string {\n \treturn fmt.Sprintf(\"./export-%s\", time.Now().Format(time.RFC3339))\n }"
        },
        {
          "filename": "dumpling/export/dump.go",
          "status": "modified",
          "additions": 13,
          "deletions": 5,
          "patch": "@@ -37,7 +37,7 @@ import (\n \t\"golang.org/x/sync/errgroup\"\n )\n \n-var openDBFunc = sql.Open\n+var openDBFunc = openDB\n \n var errEmptyHandleVals = errors.New(\"empty handleVals for TiDB table\")\n \n@@ -1309,11 +1309,11 @@ func startHTTPService(d *Dumper) error {\n // openSQLDB is an initialization step of Dumper.\n func openSQLDB(d *Dumper) error {\n \tconf := d.conf\n-\tpool, err := sql.Open(\"mysql\", conf.GetDSN(\"\"))\n+\tc, err := mysql.NewConnector(conf.GetDriverConfig(\"\"))\n \tif err != nil {\n \t\treturn errors.Trace(err)\n \t}\n-\td.dbHandle = pool\n+\td.dbHandle = sql.OpenDB(c)\n \treturn nil\n }\n \n@@ -1510,12 +1510,20 @@ func setSessionParam(d *Dumper) error {\n \t\t\t}\n \t\t}\n \t}\n-\tif d.dbHandle, err = resetDBWithSessionParams(d.tctx, pool, conf.GetDSN(\"\"), conf.SessionParams); err != nil {\n+\tif d.dbHandle, err = resetDBWithSessionParams(d.tctx, pool, conf.GetDriverConfig(\"\"), conf.SessionParams); err != nil {\n \t\treturn errors.Trace(err)\n \t}\n \treturn nil\n }\n \n+func openDB(cfg *mysql.Config) (*sql.DB, error) {\n+\tc, err := mysql.NewConnector(cfg)\n+\tif err != nil {\n+\t\treturn nil, errors.Trace(err)\n+\t}\n+\treturn sql.OpenDB(c), nil\n+}\n+\n func (d *Dumper) renewSelectTableRegionFuncForLowerTiDB(tctx *tcontext.Context) error {\n \tconf := d.conf\n \tif !(conf.ServerInfo.ServerType == version.ServerTypeTiDB && conf.ServerInfo.ServerVersion != nil && conf.ServerInfo.HasTiKV &&\n@@ -1532,7 +1540,7 @@ func (d *Dumper) renewSelectTableRegionFuncForLowerTiDB(tctx *tcontext.Context)\n \td.selectTiDBTableRegionFunc = func(_ *tcontext.Context, _ *BaseConn, meta TableMeta) (pkFields []string, pkVals [][]string, err error) {\n \t\treturn nil, nil, errors.Annotatef(errEmptyHandleVals, \"table: `%s`.`%s`\", escapeString(meta.DatabaseName()), escapeString(meta.TableName()))\n \t}\n-\tdbHandle, err := openDBFunc(\"mysql\", conf.GetDSN(\"\"))\n+\tdbHandle, err := openDBFunc(conf.GetDriverConfig(\"\"))\n \tif err != nil {\n \t\treturn errors.Trace(err)\n \t}"
        },
        {
          "filename": "dumpling/export/sql.go",
          "status": "modified",
          "additions": 16,
          "deletions": 11,
          "patch": "@@ -10,7 +10,6 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"math\"\n-\t\"net/url\"\n \t\"strconv\"\n \t\"strings\"\n \n@@ -834,7 +833,7 @@ func isUnknownSystemVariableErr(err error) bool {\n \n // resetDBWithSessionParams will return a new sql.DB as a replacement for input `db` with new session parameters.\n // If returned error is nil, the input `db` will be closed.\n-func resetDBWithSessionParams(tctx *tcontext.Context, db *sql.DB, dsn string, params map[string]interface{}) (*sql.DB, error) {\n+func resetDBWithSessionParams(tctx *tcontext.Context, db *sql.DB, cfg *mysql.Config, params map[string]interface{}) (*sql.DB, error) {\n \tsupport := make(map[string]interface{})\n \tfor k, v := range params {\n \t\tvar pv interface{}\n@@ -862,6 +861,10 @@ func resetDBWithSessionParams(tctx *tcontext.Context, db *sql.DB, dsn string, pa\n \t\tsupport[k] = pv\n \t}\n \n+\tif cfg.Params == nil {\n+\t\tcfg.Params = make(map[string]string)\n+\t}\n+\n \tfor k, v := range support {\n \t\tvar s string\n \t\t// Wrap string with quote to handle string with space. For example, '2020-10-20 13:41:40'\n@@ -871,19 +874,21 @@ func resetDBWithSessionParams(tctx *tcontext.Context, db *sql.DB, dsn string, pa\n \t\t} else {\n \t\t\ts = fmt.Sprintf(\"%v\", v)\n \t\t}\n-\t\tdsn += fmt.Sprintf(\"&%s=%s\", k, url.QueryEscape(s))\n+\t\tcfg.Params[k] = s\n \t}\n \n \tdb.Close()\n-\tnewDB, err := sql.Open(\"mysql\", dsn)\n-\tif err == nil {\n-\t\t// ping to make sure all session parameters are set correctly\n-\t\terr = newDB.PingContext(tctx)\n-\t\tif err != nil {\n-\t\t\tnewDB.Close()\n-\t\t}\n+\tc, err := mysql.NewConnector(cfg)\n+\tif err != nil {\n+\t\treturn nil, errors.Trace(err)\n+\t}\n+\tnewDB := sql.OpenDB(c)\n+\t// ping to make sure all session parameters are set correctly\n+\terr = newDB.PingContext(tctx)\n+\tif err != nil {\n+\t\tnewDB.Close()\n \t}\n-\treturn newDB, errors.Trace(err)\n+\treturn newDB, nil\n }\n \n func createConnWithConsistency(ctx context.Context, db *sql.DB, repeatableRead bool) (*sql.Conn, error) {"
        },
        {
          "filename": "dumpling/export/sql_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1345,7 +1345,7 @@ func TestBuildVersion3RegionQueries(t *testing.T) {\n \tdefer func() {\n \t\topenDBFunc = oldOpenFunc\n \t}()\n-\topenDBFunc = func(_, _ string) (*sql.DB, error) {\n+\topenDBFunc = func(*mysql.Config) (*sql.DB, error) {\n \t\treturn db, nil\n \t}\n "
        },
        {
          "filename": "dumpling/tests/s3/import.go",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -6,7 +6,9 @@ import (\n \t\"context\"\n \t\"database/sql\"\n \t\"fmt\"\n+\t\"net\"\n \t\"os\"\n+\t\"strconv\"\n \n \t_ \"github.com/go-sql-driver/mysql\"\n \t\"github.com/pingcap/errors\"\n@@ -48,7 +50,7 @@ func main() {\n \t\t\treturn errors.Trace(err)\n \t\t}\n \n-\t\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s:%d)/%s?charset=utf8mb4\", \"root\", \"\", \"127.0.0.1\", port, database)\n+\t\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?charset=utf8mb4\", \"root\", \"\", net.JoinHostPort(\"127.0.0.1\", strconv.Itoa(port)), database)\n \t\tdb, err := sql.Open(\"mysql\", dsn)\n \t\tif err != nil {\n \t\t\treturn errors.Trace(err)"
        },
        {
          "filename": "util/dbutil/common.go",
          "status": "modified",
          "additions": 15,
          "deletions": 10,
          "patch": "@@ -19,7 +19,7 @@ import (\n \t\"database/sql\"\n \t\"encoding/json\"\n \t\"fmt\"\n-\t\"net/url\"\n+\t\"net\"\n \t\"os\"\n \t\"strconv\"\n \t\"strings\"\n@@ -107,26 +107,31 @@ func GetDBConfigFromEnv(schema string) DBConfig {\n \n // OpenDB opens a mysql connection FD\n func OpenDB(cfg DBConfig, vars map[string]string) (*sql.DB, error) {\n-\tvar dbDSN string\n+\tdriverCfg := mysql.NewConfig()\n+\tdriverCfg.Params = make(map[string]string)\n+\tdriverCfg.User = cfg.User\n+\tdriverCfg.Passwd = cfg.Password\n+\tdriverCfg.Net = \"tcp\"\n+\tdriverCfg.Addr = net.JoinHostPort(cfg.Host, strconv.Itoa(cfg.Port))\n+\tdriverCfg.Params[\"charset\"] = \"utf8mb4\"\n+\n \tif len(cfg.Snapshot) != 0 {\n \t\tlog.Info(\"create connection with snapshot\", zap.String(\"snapshot\", cfg.Snapshot))\n-\t\tdbDSN = fmt.Sprintf(\"%s:%s@tcp(%s:%d)/?charset=utf8mb4&tidb_snapshot=%s\", cfg.User, cfg.Password, cfg.Host, cfg.Port, cfg.Snapshot)\n-\t} else {\n-\t\tdbDSN = fmt.Sprintf(\"%s:%s@tcp(%s:%d)/?charset=utf8mb4\", cfg.User, cfg.Password, cfg.Host, cfg.Port)\n+\t\tdriverCfg.Params[\"tidb_snapshot\"] = cfg.Snapshot\n \t}\n \n \tfor key, val := range vars {\n \t\t// key='val'. add single quote for better compatibility.\n-\t\tdbDSN += fmt.Sprintf(\"&%s=%%27%s%%27\", key, url.QueryEscape(val))\n+\t\tdriverCfg.Params[key] = fmt.Sprintf(\"'%s'\", val)\n \t}\n \n-\tdbConn, err := sql.Open(\"mysql\", dbDSN)\n+\tc, err := mysql.NewConnector(driverCfg)\n \tif err != nil {\n \t\treturn nil, errors.Trace(err)\n \t}\n-\n-\terr = dbConn.Ping()\n-\treturn dbConn, errors.Trace(err)\n+\tdb := sql.OpenDB(c)\n+\terr = db.Ping()\n+\treturn db, errors.Trace(err)\n }\n \n // CloseDB closes the mysql fd"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "debfc320af2811b3fa878b4d70b8fc8ef8062762",
            "date": "2025-01-26T07:43:44Z",
            "author_login": "Tristan1900"
          },
          {
            "sha": "1dad768253c1ab704752ba85eebc01f28ed1ecee",
            "date": "2025-01-26T06:54:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5ba9e6f57d6acb99ff4e6d3c335a07c3c4a7bb2c",
            "date": "2025-01-26T02:24:53Z",
            "author_login": "terry1purcell"
          },
          {
            "sha": "24123512f14876973475667d99ab26b4c83d0104",
            "date": "2025-01-25T02:51:14Z",
            "author_login": "L-maple"
          },
          {
            "sha": "4b98d4e74c0db18eb34ed18cfa055e269141dddf",
            "date": "2025-01-24T14:08:50Z",
            "author_login": "Leavrth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-134",
    "description": "Use of Externally-Controlled Format String in GitHub repository pingcap/tidb prior to 6.4.0, 6.1.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-04T12:15:14.127",
    "last_modified": "2024-11-21T07:18:39.287",
    "fix_date": "2022-10-19T02:27:52Z"
  },
  "references": [
    {
      "url": "https://github.com/pingcap/tidb/commit/d0376379d615cc8f263a0b17c031ce403c8dcbfb",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/120f1346-e958-49d0-b66c-0f889a469540",
      "source": "security@huntr.dev",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pingcap/tidb/commit/d0376379d615cc8f263a0b17c031ce403c8dcbfb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/120f1346-e958-49d0-b66c-0f889a469540",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:00.992289",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tidb",
    "owner": "pingcap",
    "created_at": "2015-09-06T04:01:52Z",
    "updated_at": "2025-01-26T07:43:49Z",
    "pushed_at": "2025-01-26T07:43:45Z",
    "size": 527010,
    "stars": 37793,
    "forks": 5882,
    "open_issues": 4840,
    "watchers": 37793,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 45218366,
      "Starlark": 1486008,
      "Shell": 669734,
      "Yacc": 410939,
      "Jsonnet": 62826,
      "TypeScript": 61875,
      "Makefile": 37406,
      "Dockerfile": 4639,
      "Smarty": 4344,
      "Ragel": 3669,
      "JavaScript": 900,
      "HTML": 420
    },
    "commit_activity": {
      "total_commits_last_year": 2656,
      "avg_commits_per_week": 51.07692307692308,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:08:41.677494"
  }
}