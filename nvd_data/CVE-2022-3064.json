{
  "cve_id": "CVE-2022-3064",
  "github_data": {
    "repository": "go-yaml/yaml",
    "fix_commit": "f221b8435cfb71e54062f6c6e99e9ade30b124d5",
    "related_commits": [
      "f221b8435cfb71e54062f6c6e99e9ade30b124d5",
      "f221b8435cfb71e54062f6c6e99e9ade30b124d5"
    ],
    "patch_url": "https://github.com/go-yaml/yaml/commit/f221b8435cfb71e54062f6c6e99e9ade30b124d5.patch",
    "fix_commit_details": {
      "sha": "f221b8435cfb71e54062f6c6e99e9ade30b124d5",
      "commit_date": "2019-10-02T18:33:36Z",
      "author": {
        "login": "liggitt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Improve heuristics preventing CPU/memory abuse (#515)",
        "length": 905,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 166,
        "additions": 165,
        "deletions": 1
      },
      "files": [
        {
          "filename": "benchmark_test.go",
          "status": "added",
          "additions": 123,
          "deletions": 0,
          "patch": "@@ -0,0 +1,123 @@\n+package yaml_test\n+\n+import (\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t. \"gopkg.in/check.v1\"\n+\t\"gopkg.in/yaml.v2\"\n+)\n+\n+type testcase struct {\n+\tname  string\n+\tdata  []byte\n+\terror string\n+}\n+\n+func testcases() []testcase {\n+\treturn []testcase{\n+\t\t{\n+\t\t\tname:  \"1000kb of maps with 100 aliases\",\n+\t\t\tdata:  []byte(`{a: &a [{a}` + strings.Repeat(`,{a}`, 1000*1024/4-100) + `], b: &b [*a` + strings.Repeat(`,*a`, 99) + `]}`),\n+\t\t\terror: \"yaml: document contains excessive aliasing\",\n+\t\t},\n+\t\t{\n+\t\t\tname:  \"1000kb of deeply nested slices\",\n+\t\t\tdata:  []byte(strings.Repeat(`[`, 1000*1024)),\n+\t\t\terror: \"yaml: exceeded max depth of 10000\",\n+\t\t},\n+\t\t{\n+\t\t\tname:  \"1000kb of deeply nested maps\",\n+\t\t\tdata:  []byte(\"x: \" + strings.Repeat(`{`, 1000*1024)),\n+\t\t\terror: \"yaml: exceeded max depth of 10000\",\n+\t\t},\n+\t\t{\n+\t\t\tname:  \"1000kb of deeply nested indents\",\n+\t\t\tdata:  []byte(strings.Repeat(`- `, 1000*1024)),\n+\t\t\terror: \"yaml: exceeded max depth of 10000\",\n+\t\t},\n+\t\t{\n+\t\t\tname: \"1000kb of 1000-indent lines\",\n+\t\t\tdata: []byte(strings.Repeat(strings.Repeat(`- `, 1000)+\"\\n\", 1024/2)),\n+\t\t},\n+\t\t{name: \"1kb of maps\", data: []byte(`a: &a [{a}` + strings.Repeat(`,{a}`, 1*1024/4-1) + `]`)},\n+\t\t{name: \"10kb of maps\", data: []byte(`a: &a [{a}` + strings.Repeat(`,{a}`, 10*1024/4-1) + `]`)},\n+\t\t{name: \"100kb of maps\", data: []byte(`a: &a [{a}` + strings.Repeat(`,{a}`, 100*1024/4-1) + `]`)},\n+\t\t{name: \"1000kb of maps\", data: []byte(`a: &a [{a}` + strings.Repeat(`,{a}`, 1000*1024/4-1) + `]`)},\n+\t}\n+}\n+\n+func (s *S) TestLimits(c *C) {\n+\tif testing.Short() {\n+\t\treturn\n+\t}\n+\tfor _, tc := range testcases() {\n+\t\tvar v interface{}\n+\t\terr := yaml.Unmarshal(tc.data, &v)\n+\t\tif len(tc.error) > 0 {\n+\t\t\tc.Assert(err, ErrorMatches, tc.error, Commentf(\"testcase: %s\", tc.name))\n+\t\t} else {\n+\t\t\tc.Assert(err, IsNil, Commentf(\"testcase: %s\", tc.name))\n+\t\t}\n+\t}\n+}\n+\n+func Benchmark1000KB100Aliases(b *testing.B) {\n+\tbenchmark(b, \"1000kb of maps with 100 aliases\")\n+}\n+func Benchmark1000KBDeeplyNestedSlices(b *testing.B) {\n+\tbenchmark(b, \"1000kb of deeply nested slices\")\n+}\n+func Benchmark1000KBDeeplyNestedMaps(b *testing.B) {\n+\tbenchmark(b, \"1000kb of deeply nested maps\")\n+}\n+func Benchmark1000KBDeeplyNestedIndents(b *testing.B) {\n+\tbenchmark(b, \"1000kb of deeply nested indents\")\n+}\n+func Benchmark1000KB1000IndentLines(b *testing.B) {\n+\tbenchmark(b, \"1000kb of 1000-indent lines\")\n+}\n+func Benchmark1KBMaps(b *testing.B) {\n+\tbenchmark(b, \"1kb of maps\")\n+}\n+func Benchmark10KBMaps(b *testing.B) {\n+\tbenchmark(b, \"10kb of maps\")\n+}\n+func Benchmark100KBMaps(b *testing.B) {\n+\tbenchmark(b, \"100kb of maps\")\n+}\n+func Benchmark1000KBMaps(b *testing.B) {\n+\tbenchmark(b, \"1000kb of maps\")\n+}\n+\n+func benchmark(b *testing.B, name string) {\n+\tvar tc testcase\n+\tfor _, t := range testcases() {\n+\t\tif t.name == name {\n+\t\t\ttc = t\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tif tc.name != name {\n+\t\tb.Errorf(\"testcase %q not found\", name)\n+\t\treturn\n+\t}\n+\n+\tb.ResetTimer()\n+\n+\tfor i := 0; i < b.N; i++ {\n+\t\tvar v interface{}\n+\t\terr := yaml.Unmarshal(tc.data, &v)\n+\t\tif len(tc.error) > 0 {\n+\t\t\tif err == nil {\n+\t\t\t\tb.Errorf(\"expected error, got none\")\n+\t\t\t} else if err.Error() != tc.error {\n+\t\t\t\tb.Errorf(\"expected error '%s', got '%s'\", tc.error, err.Error())\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif err != nil {\n+\t\t\t\tb.Errorf(\"unexpected error: %v\", err)\n+\t\t\t}\n+\t\t}\n+\t}\n+}"
        },
        {
          "filename": "decode.go",
          "status": "modified",
          "additions": 26,
          "deletions": 1,
          "patch": "@@ -318,12 +318,37 @@ func (d *decoder) prepare(n *node, out reflect.Value) (newout reflect.Value, unm\n \treturn out, false, false\n }\n \n+const (\n+\t// 400,000 decode operations is ~500kb of dense object declarations, or ~5kb of dense object declarations with 10000% alias expansion\n+\talias_ratio_range_low = 400000\n+\t// 4,000,000 decode operations is ~5MB of dense object declarations, or ~4.5MB of dense object declarations with 10% alias expansion\n+\talias_ratio_range_high = 4000000\n+\t// alias_ratio_range is the range over which we scale allowed alias ratios\n+\talias_ratio_range = float64(alias_ratio_range_high - alias_ratio_range_low)\n+)\n+\n+func allowedAliasRatio(decodeCount int) float64 {\n+\tswitch {\n+\tcase decodeCount <= alias_ratio_range_low:\n+\t\t// allow 99% to come from alias expansion for small-to-medium documents\n+\t\treturn 0.99\n+\tcase decodeCount >= alias_ratio_range_high:\n+\t\t// allow 10% to come from alias expansion for very large documents\n+\t\treturn 0.10\n+\tdefault:\n+\t\t// scale smoothly from 99% down to 10% over the range.\n+\t\t// this maps to 396,000 - 400,000 allowed alias-driven decodes over the range.\n+\t\t// 400,000 decode operations is ~100MB of allocations in worst-case scenarios (single-item maps).\n+\t\treturn 0.99 - 0.89*(float64(decodeCount-alias_ratio_range_low)/alias_ratio_range)\n+\t}\n+}\n+\n func (d *decoder) unmarshal(n *node, out reflect.Value) (good bool) {\n \td.decodeCount++\n \tif d.aliasDepth > 0 {\n \t\td.aliasCount++\n \t}\n-\tif d.aliasCount > 100 && d.decodeCount > 1000 && float64(d.aliasCount)/float64(d.decodeCount) > 0.99 {\n+\tif d.aliasCount > 100 && d.decodeCount > 1000 && float64(d.aliasCount)/float64(d.decodeCount) > allowedAliasRatio(d.decodeCount) {\n \t\tfailf(\"document contains excessive aliasing\")\n \t}\n \tswitch n.kind {"
        },
        {
          "filename": "scannerc.go",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -906,13 +906,21 @@ func yaml_parser_remove_simple_key(parser *yaml_parser_t) bool {\n \treturn true\n }\n \n+// max_flow_level limits the flow_level\n+const max_flow_level = 10000\n+\n // Increase the flow level and resize the simple key list if needed.\n func yaml_parser_increase_flow_level(parser *yaml_parser_t) bool {\n \t// Reset the simple key on the next level.\n \tparser.simple_keys = append(parser.simple_keys, yaml_simple_key_t{})\n \n \t// Increase the flow level.\n \tparser.flow_level++\n+\tif parser.flow_level > max_flow_level {\n+\t\treturn yaml_parser_set_scanner_error(parser,\n+\t\t\t\"while increasing flow level\", parser.simple_keys[len(parser.simple_keys)-1].mark,\n+\t\t\tfmt.Sprintf(\"exceeded max depth of %d\", max_flow_level))\n+\t}\n \treturn true\n }\n \n@@ -925,6 +933,9 @@ func yaml_parser_decrease_flow_level(parser *yaml_parser_t) bool {\n \treturn true\n }\n \n+// max_indents limits the indents stack size\n+const max_indents = 10000\n+\n // Push the current indentation level to the stack and set the new level\n // the current column is greater than the indentation level.  In this case,\n // append or insert the specified token into the token queue.\n@@ -939,6 +950,11 @@ func yaml_parser_roll_indent(parser *yaml_parser_t, column, number int, typ yaml\n \t\t// indentation level.\n \t\tparser.indents = append(parser.indents, parser.indent)\n \t\tparser.indent = column\n+\t\tif len(parser.indents) > max_indents {\n+\t\t\treturn yaml_parser_set_scanner_error(parser,\n+\t\t\t\t\"while increasing indent level\", parser.simple_keys[len(parser.simple_keys)-1].mark,\n+\t\t\t\tfmt.Sprintf(\"exceeded max depth of %d\", max_indents))\n+\t\t}\n \n \t\t// Create a token and insert it into the queue.\n \t\ttoken := yaml_token_t{"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f6f7691b1fdeb513f56608cd2c32c51f8194bf51",
            "date": "2022-05-27T08:35:30Z",
            "author_login": "niemeyer"
          },
          {
            "sha": "00bbc0947ae889b9e480044dbc3bc3e3216a6a89",
            "date": "2022-05-21T10:33:21Z",
            "author_login": "niemeyer"
          },
          {
            "sha": "8f96da9f5d5eff988554c1aae1784627c4bf6754",
            "date": "2022-05-21T10:31:04Z",
            "author_login": "niemeyer"
          },
          {
            "sha": "539c8e751b99281a79dc659ba8dc44d91e444723",
            "date": "2022-05-12T14:02:31Z",
            "author_login": "niemeyer"
          },
          {
            "sha": "496545a6307b2a7d7a710fd516e5e16e8ab62dbc",
            "date": "2021-01-07T19:29:22Z",
            "author_login": "niemeyer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Parsing malicious or large YAML documents can consume excessive amounts of CPU or memory.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T22:15:14.507",
    "last_modified": "2024-11-21T07:18:44.827",
    "fix_date": "2019-10-02T18:33:36Z"
  },
  "references": [
    {
      "url": "https://github.com/go-yaml/yaml/commit/f221b8435cfb71e54062f6c6e99e9ade30b124d5",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/go-yaml/yaml/releases/tag/v2.2.4",
      "source": "security@golang.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/07/msg00001.html",
      "source": "security@golang.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4SBIUECMLNC572P23DDOKJNKPJVX26SP/",
      "source": "security@golang.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ANIOPUXWIHVRA6CEWXCGOMX3YYS6KFHG/",
      "source": "security@golang.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC/",
      "source": "security@golang.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PW3XC47AUW5J5M2ULJX7WCCL3B2ETLMT/",
      "source": "security@golang.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE/",
      "source": "security@golang.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI/",
      "source": "security@golang.org",
      "tags": []
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2022-0956",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/go-yaml/yaml/commit/f221b8435cfb71e54062f6c6e99e9ade30b124d5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/go-yaml/yaml/releases/tag/v2.2.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/07/msg00001.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4SBIUECMLNC572P23DDOKJNKPJVX26SP/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ANIOPUXWIHVRA6CEWXCGOMX3YYS6KFHG/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PW3XC47AUW5J5M2ULJX7WCCL3B2ETLMT/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2022-0956",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.223593",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "yaml",
    "owner": "go-yaml",
    "created_at": "2014-03-05T18:54:57Z",
    "updated_at": "2025-01-14T17:20:29Z",
    "pushed_at": "2024-08-15T20:03:31Z",
    "size": 1599,
    "stars": 6944,
    "forks": 1063,
    "open_issues": 423,
    "watchers": 6944,
    "has_security_policy": false,
    "default_branch": "v3",
    "protected_branches": [],
    "languages": {
      "Go": 455065
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T20:22:24.768364"
  }
}