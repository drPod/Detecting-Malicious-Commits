{
  "cve_id": "CVE-2022-31005",
  "github_data": {
    "repository": "vapor/vapor",
    "fix_commit": "953a349b539b3e0d3653585c8ffb50c427986df1",
    "related_commits": [
      "953a349b539b3e0d3653585c8ffb50c427986df1",
      "953a349b539b3e0d3653585c8ffb50c427986df1"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "953a349b539b3e0d3653585c8ffb50c427986df1",
      "commit_date": "2022-05-31T09:33:26Z",
      "author": {
        "login": "0xTim",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-vj2m-9f5j-mpr5",
        "length": 323,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 85,
        "additions": 82,
        "deletions": 3
      },
      "files": [
        {
          "filename": "Sources/Vapor/Utilities/FileIO.swift",
          "status": "modified",
          "additions": 31,
          "deletions": 3,
          "patch": "@@ -1,4 +1,5 @@\n import NIO\n+import Logging\n \n extension Request {\n     public var fileio: FileIO {\n@@ -138,6 +139,11 @@ public struct FileIO {\n             } else {\n                 contentRange = nil\n             }\n+        } else if request.headers.contains(name: .range) {\n+            // Range header was supplied but could not be parsed i.e. it was invalid\n+            request.logger.debug(\"Range header was provided in request but was invalid\")\n+            let response = Response(status: .badRequest)\n+            return response\n         } else {\n             contentRange = nil\n         }\n@@ -163,7 +169,12 @@ public struct FileIO {\n             if let firstRange = contentRange.ranges.first {\n                 let range = firstRange.asResponseContentRange(limit: fileSize)\n                 response.headers.contentRange = HTTPHeaders.ContentRange(unit: contentRange.unit, range: range)\n-                (offset, byteCount) = firstRange.asByteBufferBounds(withMaxSize: fileSize)\n+                do {\n+                    (offset, byteCount) = try firstRange.asByteBufferBounds(withMaxSize: fileSize, logger: request.logger)\n+                } catch {\n+                    let response = Response(status: .badRequest)\n+                    return response\n+                }\n             } else {\n                 offset = 0\n                 byteCount = fileSize\n@@ -252,14 +263,31 @@ public struct FileIO {\n \n extension HTTPHeaders.Range.Value {\n     \n-    fileprivate func asByteBufferBounds(withMaxSize size: Int) -> (offset: Int64, byteCount: Int) {\n+    fileprivate func asByteBufferBounds(withMaxSize size: Int, logger: Logger) throws -> (offset: Int64, byteCount: Int) {\n         switch self {\n             case .start(let value):\n+                guard value <= size, value >= 0 else {\n+                    logger.debug(\"Requested range start was invalid: \\(value)\")\n+                    throw Abort(.badRequest)\n+                }\n                 return (offset: numericCast(value), byteCount: size - value)\n             case .tail(let value):\n+                guard value <= size, value >= 0 else {\n+                    logger.debug(\"Requested range end was invalid: \\(value)\")\n+                    throw Abort(.badRequest)\n+                }\n                 return (offset: numericCast(size - value), byteCount: value)\n             case .within(let start, let end):\n-                return (offset: numericCast(start), byteCount: end - start + 1)\n+                guard start >= 0, end >= 0, start < end else {\n+                    logger.debug(\"Requested range was invalid: \\(start)-\\(end)\")\n+                    throw Abort(.badRequest)\n+                }\n+                let (byteCount, overflow) =  (end - start).addingReportingOverflow(1)\n+                guard !overflow else {\n+                    logger.debug(\"Requested range was invalid: \\(start)-\\(end)\")\n+                    throw Abort(.badRequest)\n+                }\n+                return (offset: numericCast(start), byteCount: byteCount)\n         }\n     }\n }"
        },
        {
          "filename": "Tests/VaporTests/FileTests.swift",
          "status": "modified",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -246,4 +246,55 @@ final class FileTests: XCTestCase {\n             XCTAssertEqual(res.status, .notFound)\n         }\n     }\n+    \n+    // https://github.com/vapor/vapor/security/advisories/GHSA-vj2m-9f5j-mpr5\n+    func testInvalidRangeHeaderDoesNotCrash() throws {\n+        let app = Application(.testing)\n+        defer { app.shutdown() }\n+\n+        app.get(\"file-stream\") { req in\n+            return req.fileio.streamFile(at: #file)\n+        }\n+\n+        var headers = HTTPHeaders()\n+        headers.replaceOrAdd(name: .range, value: \"bytes=0-9223372036854775807\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+        \n+        headers.replaceOrAdd(name: .range, value: \"bytes=-1-10\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+        \n+        headers.replaceOrAdd(name: .range, value: \"bytes=100-10\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+        \n+        headers.replaceOrAdd(name: .range, value: \"bytes=10--100\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+        \n+        headers.replaceOrAdd(name: .range, value: \"bytes=9223372036854775808-\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+        \n+        headers.replaceOrAdd(name: .range, value: \"bytes=922337203-\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+        \n+        headers.replaceOrAdd(name: .range, value: \"bytes=-922337203\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+        \n+        headers.replaceOrAdd(name: .range, value: \"bytes=-9223372036854775808\")\n+        try app.testable(method: .running).test(.GET, \"/file-stream\", headers: headers) { res in\n+            XCTAssertEqual(res.status, .badRequest)\n+        }\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8589cb562feab069f2563bdcdeb8f9608a07a2c7",
            "date": "2025-01-22T15:39:59Z",
            "author_login": "NeedleInAJayStack"
          },
          {
            "sha": "eafbca78d0ced81a127c94f3703fc3fc76827963",
            "date": "2025-01-14T13:15:43Z",
            "author_login": "weissi"
          },
          {
            "sha": "4d7456c0d4b33ef82783a90ecfeae33a52a3972a",
            "date": "2024-12-30T18:52:00Z",
            "author_login": "WilliamFernsV3"
          },
          {
            "sha": "73dfe634f04945285054b261369cd93f5100b44c",
            "date": "2024-12-28T12:23:23Z",
            "author_login": "gwynne"
          },
          {
            "sha": "4c5d467a96fc4c64f6279327d8fd1e1600e85bc5",
            "date": "2024-12-26T15:37:40Z",
            "author_login": "MahdiBM"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-190",
    "description": "Vapor is an HTTP web framework for Swift. Users of Vapor prior to version 4.60.3 with FileMiddleware enabled are vulnerable to an integer overflow vulnerability that can crash the application. Version 4.60.3 contains a patch for this issue. As a workaround, disable FileMiddleware and serve via a Content Delivery Network.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-31T20:15:07.973",
    "last_modified": "2024-11-21T07:03:41.977",
    "fix_date": "2022-05-31T09:33:26Z"
  },
  "references": [
    {
      "url": "https://github.com/vapor/vapor/commit/953a349b539b3e0d3653585c8ffb50c427986df1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/releases/tag/4.60.3",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/security/advisories/GHSA-vj2m-9f5j-mpr5",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/commit/953a349b539b3e0d3653585c8ffb50c427986df1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/releases/tag/4.60.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/security/advisories/GHSA-vj2m-9f5j-mpr5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.194926",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "vapor",
    "owner": "vapor",
    "created_at": "2016-01-18T22:37:52Z",
    "updated_at": "2025-01-26T01:06:08Z",
    "pushed_at": "2025-01-22T15:40:06Z",
    "size": 17162,
    "stars": 24763,
    "forks": 1455,
    "open_issues": 98,
    "watchers": 24763,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3",
      "main"
    ],
    "languages": {
      "Swift": 1448974,
      "C": 38624,
      "HTML": 67
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:38:31.990010"
  }
}