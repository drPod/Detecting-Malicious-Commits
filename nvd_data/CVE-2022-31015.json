{
  "cve_id": "CVE-2022-31015",
  "github_data": {
    "repository": "Pylons/waitress",
    "fix_commit": "4f6789b035610e0552738cdc4b35ca809a592d48",
    "related_commits": [
      "4f6789b035610e0552738cdc4b35ca809a592d48",
      "4f6789b035610e0552738cdc4b35ca809a592d48"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "4f6789b035610e0552738cdc4b35ca809a592d48",
      "commit_date": "2022-05-25T03:07:10Z",
      "author": {
        "login": "mmerickel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #377 from Pylons/bugfix/select-closed-socket-race",
        "length": 136,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 15,
        "deletions": 12
      },
      "files": [
        {
          "filename": "src/waitress/channel.py",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -126,10 +126,10 @@ def handle_write(self):\n         if self.will_close:\n             self.handle_close()\n \n-    def _flush_exception(self, flush):\n+    def _flush_exception(self, flush, do_close=True):\n         if flush:\n             try:\n-                return (flush(), False)\n+                return (flush(do_close=do_close), False)\n             except OSError:\n                 if self.adj.log_socket_errors:\n                     self.logger.exception(\"Socket error\")\n@@ -240,20 +240,20 @@ def received(self, data):\n \n         return True\n \n-    def _flush_some_if_lockable(self):\n+    def _flush_some_if_lockable(self, do_close=True):\n         # Since our task may be appending to the outbuf, we try to acquire\n         # the lock, but we don't block if we can't.\n \n         if self.outbuf_lock.acquire(False):\n             try:\n-                self._flush_some()\n+                self._flush_some(do_close=do_close)\n \n                 if self.total_outbufs_len < self.adj.outbuf_high_watermark:\n                     self.outbuf_lock.notify()\n             finally:\n                 self.outbuf_lock.release()\n \n-    def _flush_some(self):\n+    def _flush_some(self, do_close=True):\n         # Send as much data as possible to our client\n \n         sent = 0\n@@ -267,7 +267,7 @@ def _flush_some(self):\n \n             while outbuflen > 0:\n                 chunk = outbuf.get(self.sendbuf_len)\n-                num_sent = self.send(chunk)\n+                num_sent = self.send(chunk, do_close=do_close)\n \n                 if num_sent:\n                     outbuf.skip(num_sent, True)\n@@ -374,7 +374,9 @@ def write_soon(self, data):\n                 self.total_outbufs_len += num_bytes\n \n                 if self.total_outbufs_len >= self.adj.send_bytes:\n-                    (flushed, exception) = self._flush_exception(self._flush_some)\n+                    (flushed, exception) = self._flush_exception(\n+                        self._flush_some, do_close=False\n+                    )\n \n                     if (\n                         exception\n@@ -392,7 +394,7 @@ def _flush_outbufs_below_high_watermark(self):\n \n         if self.total_outbufs_len > self.adj.outbuf_high_watermark:\n             with self.outbuf_lock:\n-                (_, exception) = self._flush_exception(self._flush_some)\n+                (_, exception) = self._flush_exception(self._flush_some, do_close=False)\n \n                 if exception:\n                     # An exception happened while flushing, wake up the main"
        },
        {
          "filename": "src/waitress/wasyncore.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -426,15 +426,16 @@ def accept(self):\n         else:\n             return conn, addr\n \n-    def send(self, data):\n+    def send(self, data, do_close=True):\n         try:\n             result = self.socket.send(data)\n             return result\n         except OSError as why:\n             if why.args[0] == EWOULDBLOCK:\n                 return 0\n             elif why.args[0] in _DISCONNECTED:\n-                self.handle_close()\n+                if do_close:\n+                    self.handle_close()\n                 return 0\n             else:\n                 raise"
        },
        {
          "filename": "tests/test_channel.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -376,7 +376,7 @@ def test_handle_write_no_notify_after_flush(self):\n         inst.total_outbufs_len = len(inst.outbufs[0])\n         inst.adj.send_bytes = 1\n         inst.adj.outbuf_high_watermark = 2\n-        sock.send = lambda x: False\n+        sock.send = lambda x, do_close=True: False\n         inst.will_close = False\n         inst.last_activity = 0\n         result = inst.handle_write()\n@@ -453,7 +453,7 @@ def get(self, numbytes):\n \n         buf = DummyHugeOutbuffer()\n         inst.outbufs = [buf]\n-        inst.send = lambda *arg: 0\n+        inst.send = lambda *arg, do_close: 0\n         result = inst._flush_some()\n         # we are testing that _flush_some doesn't raise an OverflowError\n         # when one of its outbufs has a __len__ that returns gt sys.maxint"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fc592e804a1aed87654c1ad21337dad86582c71f",
            "date": "2024-11-25T01:07:27Z",
            "author_login": "mmerickel"
          },
          {
            "sha": "7a19337321c43b81076da20bc9c4e2e077a7e01c",
            "date": "2024-11-24T19:55:09Z",
            "author_login": "kgaughan"
          },
          {
            "sha": "2a1524a9b5786459786a4b86e5b2f09d1041e53d",
            "date": "2024-11-23T19:40:01Z",
            "author_login": "kgaughan"
          },
          {
            "sha": "b11ae729cc51ca2998a1ad9b4992b34f34ac95e7",
            "date": "2024-11-16T19:46:41Z",
            "author_login": "digitalresistor"
          },
          {
            "sha": "38ffad094b785168aba197f6b6d8df5de713cc2b",
            "date": "2024-11-16T19:39:00Z",
            "author_login": "digitalresistor"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-248",
    "description": "Waitress is a Web Server Gateway Interface server for Python 2 and 3. Waitress versions 2.1.0 and 2.1.1 may terminate early due to a thread closing a socket while the main thread is about to call select(). This will lead to the main thread raising an exception that is not handled and then causing the entire application to be killed. This issue has been fixed in Waitress 2.1.2 by no longer allowing the WSGI thread to close the socket. Instead, that is always delegated to the main thread. There is no work-around for this issue. However, users using waitress behind a reverse proxy server are less likely to have issues if the reverse proxy always reads the full response.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-31T23:15:07.960",
    "last_modified": "2024-11-21T07:03:43.063",
    "fix_date": "2022-05-25T03:07:10Z"
  },
  "references": [
    {
      "url": "https://github.com/Pylons/waitress/commit/4f6789b035610e0552738cdc4b35ca809a592d48",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/issues/374",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/pull/377",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/security/advisories/GHSA-f5x9-8jwc-25rw",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/commit/4f6789b035610e0552738cdc4b35ca809a592d48",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/issues/374",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/pull/377",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/security/advisories/GHSA-f5x9-8jwc-25rw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.195998",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "waitress",
    "owner": "Pylons",
    "created_at": "2011-12-17T06:58:21Z",
    "updated_at": "2025-01-24T08:47:57Z",
    "pushed_at": "2024-11-25T01:07:27Z",
    "size": 1868,
    "stars": 1468,
    "forks": 178,
    "open_issues": 16,
    "watchers": 1468,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 495340
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:28:55.652876"
  }
}