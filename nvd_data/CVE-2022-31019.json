{
  "cve_id": "CVE-2022-31019",
  "github_data": {
    "repository": "vapor/vapor",
    "fix_commit": "6c63226a4ab82ce53730eb1afb9ca63866fcf033",
    "related_commits": [
      "6c63226a4ab82ce53730eb1afb9ca63866fcf033",
      "6c63226a4ab82ce53730eb1afb9ca63866fcf033"
    ],
    "patch_url": "https://github.com/vapor/vapor/commit/6c63226a4ab82ce53730eb1afb9ca63866fcf033.patch",
    "fix_commit_details": {
      "sha": "6c63226a4ab82ce53730eb1afb9ca63866fcf033",
      "commit_date": "2022-06-06T16:36:34Z",
      "author": {
        "login": "0xTim",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-qvxg-wjxc-r4gg",
        "length": 168,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 20,
        "deletions": 4
      },
      "files": [
        {
          "filename": "Sources/Vapor/URLEncodedForm/URLEncodedFormData.swift",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -54,6 +54,7 @@ enum URLQueryFragment: ExpressibleByStringLiteral, Equatable {\n internal struct URLEncodedFormData: ExpressibleByArrayLiteral, ExpressibleByStringLiteral, ExpressibleByDictionaryLiteral, Equatable {\n     var values: [URLQueryFragment]\n     var children: [String: URLEncodedFormData]\n+    let maxRecursionDepth = 100\n     \n     var hasOnlyValues: Bool {\n         return children.count == 0\n@@ -90,7 +91,10 @@ internal struct URLEncodedFormData: ExpressibleByArrayLiteral, ExpressibleByStri\n         self.children = Dictionary(uniqueKeysWithValues: dictionaryLiteral)\n     }\n         \n-    mutating func set(value: URLQueryFragment, forPath path: [String]) {\n+    mutating func set(value: URLQueryFragment, forPath path: [String], recursionDepth: Int) throws {\n+        guard recursionDepth <= maxRecursionDepth else {\n+            throw URLEncodedFormError.reachedNestingLimit\n+        }\n         guard let firstElement = path.first else {\n             self.values.append(value)\n             return\n@@ -101,7 +105,7 @@ internal struct URLEncodedFormData: ExpressibleByArrayLiteral, ExpressibleByStri\n         } else {\n             child = []\n         }\n-        child.set(value: value, forPath: Array(path[1...]))\n+        try child.set(value: value, forPath: Array(path[1...]), recursionDepth: recursionDepth + 1)\n         self.children[firstElement] = child\n     }\n }"
        },
        {
          "filename": "Sources/Vapor/URLEncodedForm/URLEncodedFormError.swift",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n /// Errors thrown while encoding/decoding `application/x-www-form-urlencoded` data.\n enum URLEncodedFormError: Error {\n     case malformedKey(key: Substring)\n+    case reachedNestingLimit\n }\n \n extension URLEncodedFormError: AbortError {\n@@ -12,6 +13,8 @@ extension URLEncodedFormError: AbortError {\n         switch self {\n         case .malformedKey(let path):\n             return \"Malformed form-urlencoded key encountered: \\(path)\"\n+        case .reachedNestingLimit:\n+            return \"The data supplied is too nested\"\n         }\n     }\n }"
        },
        {
          "filename": "Sources/Vapor/URLEncodedForm/URLEncodedFormParser.swift",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -14,11 +14,11 @@ internal struct URLEncodedFormParser {\n             switch kv.count {\n             case 1:\n                 let value = String(kv[0])\n-                result.set(value: .urlEncoded(value), forPath: [])\n+                try result.set(value: .urlEncoded(value), forPath: [], recursionDepth: 0)\n             case 2:\n                 let key = kv[0]\n                 let value = String(kv[1])\n-                result.set(value: .urlEncoded(value), forPath: try parseKey(key: Substring(key)))\n+                try result.set(value: .urlEncoded(value), forPath: try parseKey(key: Substring(key)), recursionDepth: 0)\n             default:\n                 //Empty `&&`\n                 continue"
        },
        {
          "filename": "Tests/VaporTests/URLEncodedFormTests.swift",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -574,6 +574,15 @@ final class URLEncodedFormTests: XCTestCase {\n         ])\n         XCTAssertEqual(data, \"test=%26%3B!$'(),/:%3D%3F@~\")\n     }\n+    \n+    func testHeavilyNestedArray() throws {\n+        var body = \"x\"\n+        body += String(repeating: \"[]\", count: 80000)\n+        body += \"=y\"\n+        struct Foo: Content {}\n+        XCTAssertThrowsError(try URLEncodedFormDecoder().decode(Foo.self, from: body))\n+        XCTAssert(true, \"We should not have crashed\")\n+    }\n }\n \n private struct User: Codable, Equatable {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eafbca78d0ced81a127c94f3703fc3fc76827963",
            "date": "2025-01-14T13:15:43Z",
            "author_login": "weissi"
          },
          {
            "sha": "4d7456c0d4b33ef82783a90ecfeae33a52a3972a",
            "date": "2024-12-30T18:52:00Z",
            "author_login": "WilliamFernsV3"
          },
          {
            "sha": "73dfe634f04945285054b261369cd93f5100b44c",
            "date": "2024-12-28T12:23:23Z",
            "author_login": "gwynne"
          },
          {
            "sha": "4c5d467a96fc4c64f6279327d8fd1e1600e85bc5",
            "date": "2024-12-26T15:37:40Z",
            "author_login": "MahdiBM"
          },
          {
            "sha": "1f29415ed888a942bb23486ca9e422123a07e70f",
            "date": "2024-12-21T01:33:12Z",
            "author_login": "MahdiBM"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-120",
    "description": "Vapor is a server-side Swift HTTP web framework. When using automatic content decoding an attacker can craft a request body that can make the server crash with the following request: `curl -d \"array[_0][0][array][_0][0][array]$(for f in $(seq 1100); do echo -n '[_0][0][array]'; done)[string][_0]=hello%20world\" http://localhost:8080/foo`. The issue is unbounded, attacker controlled stack growth which will at some point lead to a stack overflow and a process crash. This issue has been fixed in version 4.61.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-09T13:15:08.393",
    "last_modified": "2024-11-21T07:03:43.540",
    "fix_date": "2022-06-06T16:36:34Z"
  },
  "references": [
    {
      "url": "https://github.com/vapor/vapor/commit/6c63226a4ab82ce53730eb1afb9ca63866fcf033",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/security/advisories/GHSA-qvxg-wjxc-r4gg",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/commit/6c63226a4ab82ce53730eb1afb9ca63866fcf033",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vapor/vapor/security/advisories/GHSA-qvxg-wjxc-r4gg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.420866",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vapor",
    "owner": "vapor",
    "created_at": "2016-01-18T22:37:52Z",
    "updated_at": "2025-01-14T13:38:54Z",
    "pushed_at": "2025-01-14T13:15:50Z",
    "size": 17155,
    "stars": 24729,
    "forks": 1453,
    "open_issues": 95,
    "watchers": 24729,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3",
      "main"
    ],
    "languages": {
      "Swift": 1446558,
      "C": 38624,
      "HTML": 67
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:50:15.643999"
  }
}