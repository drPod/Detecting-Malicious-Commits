{
  "cve_id": "CVE-2022-31030",
  "github_data": {
    "repository": "containerd/containerd",
    "fix_commit": "c1bcabb4541930f643aa36a2b38655e131346382",
    "related_commits": [
      "c1bcabb4541930f643aa36a2b38655e131346382",
      "c1bcabb4541930f643aa36a2b38655e131346382"
    ],
    "patch_url": "https://github.com/containerd/containerd/commit/c1bcabb4541930f643aa36a2b38655e131346382.patch",
    "fix_commit_details": {
      "sha": "c1bcabb4541930f643aa36a2b38655e131346382",
      "commit_date": "2022-06-06T17:19:23Z",
      "author": {
        "login": "dmcgowan",
        "type": "User",
        "stats": {
          "total_commits": 1775,
          "average_weekly_commits": 3.69022869022869,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 348
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-5ffw-gxpp-mxpf",
        "length": 80,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 97,
        "additions": 95,
        "deletions": 2
      },
      "files": [
        {
          "filename": "pkg/cri/server/container_execsync.go",
          "status": "modified",
          "additions": 43,
          "deletions": 2,
          "patch": "@@ -38,14 +38,55 @@ import (\n \tcioutil \"github.com/containerd/containerd/pkg/ioutil\"\n )\n \n+type cappedWriter struct {\n+\tw      io.WriteCloser\n+\tremain int\n+}\n+\n+func (cw *cappedWriter) Write(p []byte) (int, error) {\n+\tif cw.remain <= 0 {\n+\t\treturn len(p), nil\n+\t}\n+\n+\tend := cw.remain\n+\tif end > len(p) {\n+\t\tend = len(p)\n+\t}\n+\twritten, err := cw.w.Write(p[0:end])\n+\tcw.remain -= written\n+\n+\tif err != nil {\n+\t\treturn written, err\n+\t}\n+\treturn len(p), nil\n+}\n+\n+func (cw *cappedWriter) Close() error {\n+\treturn cw.w.Close()\n+}\n+\n+func (cw *cappedWriter) isFull() bool {\n+\treturn cw.remain <= 0\n+}\n+\n // ExecSync executes a command in the container, and returns the stdout output.\n // If command exits with a non-zero exit code, an error is returned.\n func (c *criService) ExecSync(ctx context.Context, r *runtime.ExecSyncRequest) (*runtime.ExecSyncResponse, error) {\n+\tconst maxStreamSize = 1024 * 1024 * 16\n+\n \tvar stdout, stderr bytes.Buffer\n+\n+\t// cappedWriter truncates the output. In that case, the size of\n+\t// the ExecSyncResponse will hit the CRI plugin's gRPC response limit.\n+\t// Thus the callers outside of the containerd process (e.g. Kubelet) never see\n+\t// the truncated output.\n+\tcout := &cappedWriter{w: cioutil.NewNopWriteCloser(&stdout), remain: maxStreamSize}\n+\tcerr := &cappedWriter{w: cioutil.NewNopWriteCloser(&stderr), remain: maxStreamSize}\n+\n \texitCode, err := c.execInContainer(ctx, r.GetContainerId(), execOptions{\n \t\tcmd:     r.GetCmd(),\n-\t\tstdout:  cioutil.NewNopWriteCloser(&stdout),\n-\t\tstderr:  cioutil.NewNopWriteCloser(&stderr),\n+\t\tstdout:  cout,\n+\t\tstderr:  cerr,\n \t\ttimeout: time.Duration(r.GetTimeout()) * time.Second,\n \t})\n \tif err != nil {"
        },
        {
          "filename": "pkg/cri/server/container_execsync_test.go",
          "status": "added",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -0,0 +1,52 @@\n+/*\n+   Copyright The containerd Authors.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package server\n+\n+import (\n+\t\"bytes\"\n+\t\"testing\"\n+\n+\tcioutil \"github.com/containerd/containerd/pkg/ioutil\"\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestCWWrite(t *testing.T) {\n+\tvar buf bytes.Buffer\n+\tcw := &cappedWriter{w: cioutil.NewNopWriteCloser(&buf), remain: 10}\n+\n+\tn, err := cw.Write([]byte(\"hello\"))\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 5, n)\n+\n+\tn, err = cw.Write([]byte(\"helloworld\"))\n+\tassert.NoError(t, err, \"no errors even it hits the cap\")\n+\tassert.Equal(t, 10, n, \"no indication of partial write\")\n+\tassert.True(t, cw.isFull())\n+\tassert.Equal(t, []byte(\"hellohello\"), buf.Bytes(), \"the underlying writer is capped\")\n+\n+\t_, err = cw.Write([]byte(\"world\"))\n+\tassert.NoError(t, err)\n+\tassert.True(t, cw.isFull())\n+\tassert.Equal(t, []byte(\"hellohello\"), buf.Bytes(), \"the underlying writer is capped\")\n+}\n+\n+func TestCWClose(t *testing.T) {\n+\tvar buf bytes.Buffer\n+\tcw := &cappedWriter{w: cioutil.NewNopWriteCloser(&buf), remain: 5}\n+\terr := cw.Close()\n+\tassert.NoError(t, err)\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "432d32cd9dc739c04441202b6287063e67bdec3e",
            "date": "2025-01-14T14:08:26Z",
            "author_login": "fuweid"
          },
          {
            "sha": "d44d76186391365d6e251527bbbe5007e5c760b6",
            "date": "2025-01-14T07:56:05Z",
            "author_login": "samuelkarp"
          },
          {
            "sha": "04bac22dfc99d0d9991ba33e4b05b7d85bd86548",
            "date": "2025-01-14T07:27:22Z",
            "author_login": "AkihiroSuda"
          },
          {
            "sha": "b87d67fcc2795b662c6445f7960242e24e743cbd",
            "date": "2025-01-14T07:26:35Z",
            "author_login": "samuelkarp"
          },
          {
            "sha": "bdc847f1eb535a6728b6db3f2619d2a5ed0edbb9",
            "date": "2025-01-14T06:01:10Z",
            "author_login": "dmcgowan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "containerd is an open source container runtime. A bug was found in the containerd's CRI implementation where programs inside a container can cause the containerd daemon to consume memory without bound during invocation of the `ExecSync` API. This can cause containerd to consume all available memory on the computer, denying service to other legitimate workloads. Kubernetes and crictl can both be configured to use containerd's CRI implementation; `ExecSync` may be used when running probes or when executing processes via an \"exec\" facility. This bug has been fixed in containerd 1.6.6 and 1.5.13. Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-09T14:15:08.550",
    "last_modified": "2024-11-21T07:03:44.867",
    "fix_date": "2022-06-06T17:19:23Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2022/06/07/1",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/containerd/containerd/commit/c1bcabb4541930f643aa36a2b38655e131346382",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/containerd/containerd/security/advisories/GHSA-5ffw-gxpp-mxpf",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/REOZCUAPCA7NFDWYBDYX6EYXWLHABKBO/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/WSIGDBHAB3I75JBJNGWEPBTJPS2FOVHD/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202401-31",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5162",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2022/06/07/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/containerd/containerd/commit/c1bcabb4541930f643aa36a2b38655e131346382",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/containerd/containerd/security/advisories/GHSA-5ffw-gxpp-mxpf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/REOZCUAPCA7NFDWYBDYX6EYXWLHABKBO/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/WSIGDBHAB3I75JBJNGWEPBTJPS2FOVHD/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202401-31",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5162",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.421420",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "containerd",
    "owner": "containerd",
    "created_at": "2015-11-13T00:27:43Z",
    "updated_at": "2025-01-14T14:43:38Z",
    "pushed_at": "2025-01-14T14:43:31Z",
    "size": 158285,
    "stars": 17816,
    "forks": 3512,
    "open_issues": 357,
    "watchers": 17816,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release/1.0",
      "release/1.1",
      "release/1.2",
      "release/1.3",
      "release/1.4",
      "release/1.5",
      "release/1.6",
      "release/1.7",
      "release/2.0"
    ],
    "languages": {
      "Go": 5381141,
      "Shell": 94349,
      "Makefile": 26121,
      "PowerShell": 6191,
      "jq": 4089,
      "Dockerfile": 3995
    },
    "commit_activity": {
      "total_commits_last_year": 1314,
      "avg_commits_per_week": 25.26923076923077,
      "days_active_last_year": 277
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:50:55.249369"
  }
}