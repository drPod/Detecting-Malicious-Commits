{
  "cve_id": "CVE-2022-31034",
  "github_data": {
    "repository": "argoproj/argo-cd",
    "fix_commit": "17f7f4f462bdb233e1b9b36f67099f41052d8cb0",
    "related_commits": [
      "17f7f4f462bdb233e1b9b36f67099f41052d8cb0",
      "17f7f4f462bdb233e1b9b36f67099f41052d8cb0"
    ],
    "patch_url": "https://github.com/argoproj/argo-cd/commit/17f7f4f462bdb233e1b9b36f67099f41052d8cb0.patch",
    "fix_commit_details": {
      "sha": "17f7f4f462bdb233e1b9b36f67099f41052d8cb0",
      "commit_date": "2022-06-21T13:39:01Z",
      "author": {
        "login": "crenshaw-dev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-2m7h-86qq-fp4v",
        "length": 538,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 117,
        "additions": 73,
        "deletions": 44
      },
      "files": [
        {
          "filename": "cmd/argocd/commands/login.go",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -202,7 +202,10 @@ func oauth2Login(ctx context.Context, port int, oidcSettings *settingspkg.OIDCCo\n \t// completionChan is to signal flow completed. Non-empty string indicates error\n \tcompletionChan := make(chan string)\n \t// stateNonce is an OAuth2 state nonce\n-\tstateNonce := rand.RandString(10)\n+\t// According to the spec (https://www.rfc-editor.org/rfc/rfc6749#section-10.10), this must be guessable with\n+\t// probability <= 2^(-128). The following call generates one of 52^24 random strings, ~= 2^136 possibilities.\n+\tstateNonce, err := rand.String(24)\n+\terrors.CheckError(err)\n \tvar tokenString string\n \tvar refreshToken string\n \n@@ -212,7 +215,8 @@ func oauth2Login(ctx context.Context, port int, oidcSettings *settingspkg.OIDCCo\n \t}\n \n \t// PKCE implementation of https://tools.ietf.org/html/rfc7636\n-\tcodeVerifier := rand.RandStringCharset(43, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\")\n+\tcodeVerifier, err := rand.StringFromCharset(43, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\")\n+\terrors.CheckError(err)\n \tcodeChallengeHash := sha256.Sum256([]byte(codeVerifier))\n \tcodeChallenge := base64.RawURLEncoding.EncodeToString(codeChallengeHash[:])\n \n@@ -296,7 +300,8 @@ func oauth2Login(ctx context.Context, port int, oidcSettings *settingspkg.OIDCCo\n \t\topts = append(opts, oauth2.SetAuthURLParam(\"code_challenge_method\", \"S256\"))\n \t\turl = oauth2conf.AuthCodeURL(stateNonce, opts...)\n \tcase oidcutil.GrantTypeImplicit:\n-\t\turl = oidcutil.ImplicitFlowURL(oauth2conf, stateNonce, opts...)\n+\t\turl, err = oidcutil.ImplicitFlowURL(oauth2conf, stateNonce, opts...)\n+\t\terrors.CheckError(err)\n \tdefault:\n \t\tlog.Fatalf(\"Unsupported grant type: %v\", grantType)\n \t}"
        },
        {
          "filename": "controller/sync.go",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -149,7 +149,13 @@ func (m *appStateManager) SyncAppState(app *v1alpha1.Application, state *v1alpha\n \t}\n \n \tatomic.AddUint64(&syncIdPrefix, 1)\n-\tsyncId := fmt.Sprintf(\"%05d-%s\", syncIdPrefix, rand.RandString(5))\n+\trandSuffix, err := rand.String(5)\n+\tif err != nil {\n+\t\tstate.Phase = common.OperationError\n+\t\tstate.Message = fmt.Sprintf(\"Failed generate random sync ID: %v\", err)\n+\t\treturn\n+\t}\n+\tsyncId := fmt.Sprintf(\"%05d-%s\", syncIdPrefix, randSuffix)\n \n \tlogEntry := log.WithFields(log.Fields{\"application\": app.Name, \"syncId\": syncId})\n \tinitialResourcesRes := make([]common.ResourceSyncResult, 0)"
        },
        {
          "filename": "pkg/apiclient/grpcproxy.go",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -100,7 +100,11 @@ func (c *client) executeRequest(fullMethodName string, msg []byte, md metadata.M\n }\n \n func (c *client) startGRPCProxy() (*grpc.Server, net.Listener, error) {\n-\tserverAddr := fmt.Sprintf(\"%s/argocd-%s.sock\", os.TempDir(), rand.RandString(16))\n+\trandSuffix, err := rand.String(16)\n+\tif err != nil {\n+\t\treturn nil, nil, fmt.Errorf(\"failed to generate random socket filename: %w\", err)\n+\t}\n+\tserverAddr := fmt.Sprintf(\"%s/argocd-%s.sock\", os.TempDir(), randSuffix)\n \tln, err := net.Listen(\"unix\", serverAddr)\n \n \tif err != nil {"
        },
        {
          "filename": "test/e2e/fixture/fixture.go",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -561,7 +561,9 @@ func EnsureCleanState(t *testing.T) {\n \tFailOnErr(Run(\"\", \"mkdir\", \"-p\", TmpDir))\n \n \t// random id - unique across test runs\n-\tpostFix := \"-\" + strings.ToLower(rand.RandString(5))\n+\trandString, err := rand.String(5)\n+\tCheckError(err)\n+\tpostFix := \"-\" + strings.ToLower(randString)\n \tid = t.Name() + postFix\n \tname = DnsFriendly(t.Name(), \"\")\n \tdeploymentNamespace = DnsFriendly(fmt.Sprintf(\"argocd-e2e-%s\", t.Name()), postFix)"
        },
        {
          "filename": "test/e2e/selective_sync_test.go",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -7,6 +7,7 @@ import (\n \n \t\"github.com/argoproj/gitops-engine/pkg/health\"\n \t. \"github.com/argoproj/gitops-engine/pkg/sync/common\"\n+\t\"github.com/stretchr/testify/require\"\n \n \t. \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n \t\"github.com/argoproj/argo-cd/v2/test/e2e/fixture\"\n@@ -110,7 +111,9 @@ func TestSelectiveSyncWithNamespace(t *testing.T) {\n }\n \n func getNewNamespace(t *testing.T) string {\n-\tpostFix := \"-\" + strings.ToLower(rand.RandString(5))\n+\trandStr, err := rand.String(5)\n+\trequire.NoError(t, err)\n+\tpostFix := \"-\" + strings.ToLower(randStr)\n \tname := fixture.DnsFriendly(t.Name(), \"\")\n \treturn fixture.DnsFriendly(fmt.Sprintf(\"argocd-e2e-%s\", name), postFix)\n }"
        },
        {
          "filename": "util/oidc/oidc.go",
          "status": "modified",
          "additions": 19,
          "deletions": 5,
          "patch": "@@ -144,7 +144,12 @@ func (a *ClientApp) oauth2Config(scopes []string) (*oauth2.Config, error) {\n \n // generateAppState creates an app state nonce\n func (a *ClientApp) generateAppState(returnURL string, w http.ResponseWriter) (string, error) {\n-\trandStr := rand.RandString(10)\n+\t// According to the spec (https://www.rfc-editor.org/rfc/rfc6749#section-10.10), this must be guessable with\n+\t// probability <= 2^(-128). The following call generates one of 52^24 random strings, ~= 2^136 possibilities.\n+\trandStr, err := rand.String(24)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to generate app state: %w\", err)\n+\t}\n \tif returnURL == \"\" {\n \t\treturnURL = a.baseHRef\n \t}\n@@ -283,7 +288,12 @@ func (a *ClientApp) HandleLogin(w http.ResponseWriter, r *http.Request) {\n \tcase GrantTypeAuthorizationCode:\n \t\turl = oauth2Config.AuthCodeURL(stateNonce, opts...)\n \tcase GrantTypeImplicit:\n-\t\turl = ImplicitFlowURL(oauth2Config, stateNonce, opts...)\n+\t\turl, err = ImplicitFlowURL(oauth2Config, stateNonce, opts...)\n+\t\tif err != nil {\n+\t\t\tlog.Errorf(\"Failed to initiate implicit login flow: %v\", err)\n+\t\t\thttp.Error(w, \"Failed to initiate implicit login flow\", http.StatusInternalServerError)\n+\t\t\treturn\n+\t\t}\n \tdefault:\n \t\thttp.Error(w, fmt.Sprintf(\"Unsupported grant type: %v\", grantType), http.StatusInternalServerError)\n \t\treturn\n@@ -415,10 +425,14 @@ func (a *ClientApp) handleImplicitFlow(r *http.Request, w http.ResponseWriter, s\n \n // ImplicitFlowURL is an adaptation of oauth2.Config::AuthCodeURL() which returns a URL\n // appropriate for an OAuth2 implicit login flow (as opposed to authorization code flow).\n-func ImplicitFlowURL(c *oauth2.Config, state string, opts ...oauth2.AuthCodeOption) string {\n+func ImplicitFlowURL(c *oauth2.Config, state string, opts ...oauth2.AuthCodeOption) (string, error) {\n \topts = append(opts, oauth2.SetAuthURLParam(\"response_type\", \"id_token\"))\n-\topts = append(opts, oauth2.SetAuthURLParam(\"nonce\", rand.RandString(10)))\n-\treturn c.AuthCodeURL(state, opts...)\n+\trandString, err := rand.String(24)\n+\tif err != nil {\n+\t\treturn \"\", fmt.Errorf(\"failed to generate nonce for implicit flow URL: %w\", err)\n+\t}\n+\topts = append(opts, oauth2.SetAuthURLParam(\"nonce\", randString))\n+\treturn c.AuthCodeURL(state, opts...), nil\n }\n \n // OfflineAccess returns whether or not 'offline_access' is a supported scope"
        },
        {
          "filename": "util/rand/rand.go",
          "status": "modified",
          "additions": 17,
          "deletions": 24,
          "patch": "@@ -1,37 +1,30 @@\n package rand\n \n import (\n-\t\"math/rand\"\n-\t\"time\"\n+\t\"crypto/rand\"\n+\t\"fmt\"\n+\t\"math/big\"\n )\n \n const letterBytes = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n-const (\n-\tletterIdxBits = 6                    // 6 bits to represent a letter index\n-\tletterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits\n-\tletterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits\n-)\n-\n-var src = rand.NewSource(time.Now().UnixNano())\n \n-// RandString generates, from a given charset, a cryptographically-secure pseudo-random string of a given length.\n-func RandString(n int) string {\n-\treturn RandStringCharset(n, letterBytes)\n+// String generates, from the set of capital and lowercase letters, a cryptographically-secure pseudo-random string of a given length.\n+func String(n int) (string, error) {\n+\treturn StringFromCharset(n, letterBytes)\n }\n \n-func RandStringCharset(n int, charset string) string {\n+// StringFromCharset generates, from a given charset, a cryptographically-secure pseudo-random string of a given length.\n+func StringFromCharset(n int, charset string) (string, error) {\n \tb := make([]byte, n)\n-\t// A src.Int63() generates 63 random bits, enough for letterIdxMax characters!\n-\tfor i, cache, remain := n-1, src.Int63(), letterIdxMax; i >= 0; {\n-\t\tif remain == 0 {\n-\t\t\tcache, remain = src.Int63(), letterIdxMax\n-\t\t}\n-\t\tif idx := int(cache & letterIdxMask); idx < len(charset) {\n-\t\t\tb[i] = charset[idx]\n-\t\t\ti--\n+\tmaxIdx := big.NewInt(int64(len(charset)))\n+\tfor i := 0; i < n; i++ {\n+\t\trandIdx, err := rand.Int(rand.Reader, maxIdx)\n+\t\tif err != nil {\n+\t\t\treturn \"\", fmt.Errorf(\"failed to generate random string: %w\", err)\n \t\t}\n-\t\tcache >>= letterIdxBits\n-\t\tremain--\n+\t\t// randIdx is necessarily safe to convert to int, because the max came from an int.\n+\t\trandIdxInt := int(randIdx.Int64())\n+\t\tb[i] = charset[randIdxInt]\n \t}\n-\treturn string(b)\n+\treturn string(b), nil\n }"
        },
        {
          "filename": "util/rand/rand_test.go",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -2,15 +2,17 @@ package rand\n \n import (\n \t\"testing\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n )\n \n func TestRandString(t *testing.T) {\n-\tss := RandStringCharset(10, \"A\")\n-\tif ss != \"AAAAAAAAAA\" {\n-\t\tt.Errorf(\"Expected 10 As, but got %q\", ss)\n-\t}\n-\tss = RandStringCharset(5, \"ABC123\")\n-\tif len(ss) != 5 {\n-\t\tt.Errorf(\"Expected random string of length 10, but got %q\", ss)\n-\t}\n+\tss, err := StringFromCharset(10, \"A\")\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, \"AAAAAAAAAA\", ss)\n+\n+\tss, err = StringFromCharset(5, \"ABC123\")\n+\trequire.NoError(t, err)\n+\tassert.Len(t, ss, 5)\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 7,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "72962014b53970b7eae3922ee0458fdc6d896f92",
            "date": "2025-01-14T21:11:40Z",
            "author_login": "surajyadav1108"
          },
          {
            "sha": "d23e6ac79bb95a911b988551ba33bfc9939c5f18",
            "date": "2025-01-14T16:10:14Z",
            "author_login": "crenshaw-dev"
          },
          {
            "sha": "9a51757049dc028596d4950d7a6c7cd5a446301a",
            "date": "2025-01-14T15:41:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c3600d240a42a4708ec65091ffb23689b4513f85",
            "date": "2025-01-14T12:37:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b77d9d9f5f9cf3862ef75e14a5877a3fcf60fa40",
            "date": "2025-01-14T12:16:41Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-330",
    "description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of Argo CD starting with v0.11.0 are vulnerable to a variety of attacks when an SSO login is initiated from the Argo CD CLI or UI. The vulnerabilities are due to the use of insufficiently random values in parameters in Oauth2/OIDC login flows. In each case, using a relatively-predictable (time-based) seed in a non-cryptographically-secure pseudo-random number generator made the parameter less random than required by the relevant spec or by general best practices. In some cases, using too short a value made the entropy even less sufficient. The attacks on login flows which are meant to be mitigated by these parameters are difficult to accomplish but can have a high impact potentially granting an attacker admin access to Argo CD. Patches for this vulnerability has been released in the following Argo CD versions: v2.4.1, v2.3.5, v2.2.10 and v2.1.16. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-06-27T19:15:08.393",
    "last_modified": "2024-11-21T07:03:45.407",
    "fix_date": "2022-06-21T13:39:01Z"
  },
  "references": [
    {
      "url": "https://github.com/argoproj/argo-cd/commit/17f7f4f462bdb233e1b9b36f67099f41052d8cb0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/17f7f4f462bdb233e1b9b36f67099f41052d8cb0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.485916",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "argo-cd",
    "owner": "argoproj",
    "created_at": "2018-02-09T11:12:01Z",
    "updated_at": "2025-01-14T12:37:12Z",
    "pushed_at": "2025-01-14T12:37:08Z",
    "size": 125601,
    "stars": 18420,
    "forks": 5620,
    "open_issues": 3601,
    "watchers": 18420,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 6686751,
      "TypeScript": 1298168,
      "Lua": 199797,
      "SCSS": 92938,
      "Shell": 58329,
      "Makefile": 24983,
      "Dockerfile": 15204,
      "Procfile": 10040,
      "JavaScript": 5975,
      "CSS": 2209,
      "Mustache": 1066,
      "HTML": 895
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:15:10.212233"
  }
}