{
  "cve_id": "CVE-2022-31035",
  "github_data": {
    "repository": "argoproj/argo-cd",
    "fix_commit": "8bc3ef690de29c68a36f473908774346a44d4038",
    "related_commits": [
      "8bc3ef690de29c68a36f473908774346a44d4038",
      "8bc3ef690de29c68a36f473908774346a44d4038"
    ],
    "patch_url": "https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038.patch",
    "fix_commit_details": {
      "sha": "8bc3ef690de29c68a36f473908774346a44d4038",
      "commit_date": "2022-06-21T13:36:38Z",
      "author": {
        "login": "crenshaw-dev",
        "type": "User",
        "stats": {
          "total_commits": 693,
          "average_weekly_commits": 1.9143646408839778,
          "total_additions": 456241,
          "total_deletions": 166650,
          "weeks_active": 136
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-h4w9-6x78-8vrj",
        "length": 171,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 58,
        "additions": 55,
        "deletions": 3
      },
      "files": [
        {
          "filename": "server/server.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1010,6 +1010,7 @@ func (a *ArgoCDServer) Authenticate(ctx context.Context) (context.Context, error\n \t\tif !argoCDSettings.AnonymousUserEnabled {\n \t\t\treturn ctx, claimsErr\n \t\t} else {\n+\t\t\t// nolint:staticcheck\n \t\t\tctx = context.WithValue(ctx, \"claims\", \"\")\n \t\t}\n \t}"
        },
        {
          "filename": "server/server_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -508,7 +508,7 @@ func getTestServer(t *testing.T, anonymousEnabled bool, withFakeSSO bool) (argoc\n \t\tcm.Data[\"users.anonymous.enabled\"] = \"true\"\n \t}\n \tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n-\t\treturn  // Start with a placeholder. We need the server URL before setting up the real handler.\n+\t\t// Start with a placeholder. We need the server URL before setting up the real handler.\n \t}))\n \tts.Config.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tdexMockHandler(t, ts.URL)(w, r)"
        },
        {
          "filename": "ui/src/app/applications/components/application-urls.test.ts",
          "status": "added",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -0,0 +1,20 @@\n+import {ExternalLink, InvalidExternalLinkError} from './application-urls';\n+\n+test('rejects malicious URLs', () => {\n+    expect(() => {\n+        const _ = new ExternalLink('javascript:alert(\"hi\")');\n+    }).toThrowError(InvalidExternalLinkError);\n+    expect(() => {\n+        const _ = new ExternalLink('data:text/html;<h1>hi</h1>');\n+    }).toThrowError(InvalidExternalLinkError);\n+});\n+\n+test('allows absolute URLs', () => {\n+    expect(new ExternalLink('https://localhost:8080/applications').ref).toEqual('https://localhost:8080/applications');\n+});\n+\n+test('allows relative URLs', () => {\n+    // @ts-ignore\n+    window.location = new URL('https://localhost:8080/applications');\n+    expect(new ExternalLink('/applications').ref).toEqual('/applications');\n+});"
        },
        {
          "filename": "ui/src/app/applications/components/application-urls.tsx",
          "status": "modified",
          "additions": 33,
          "deletions": 2,
          "patch": "@@ -1,7 +1,15 @@\n import {DropDownMenu} from 'argo-ui';\n import * as React from 'react';\n \n-class ExternalLink {\n+export class InvalidExternalLinkError extends Error {\n+    constructor(message: string) {\n+        super(message);\n+        Object.setPrototypeOf(this, InvalidExternalLinkError.prototype);\n+        this.name = 'InvalidExternalLinkError';\n+    }\n+}\n+\n+export class ExternalLink {\n     public title: string;\n     public ref: string;\n \n@@ -14,13 +22,36 @@ class ExternalLink {\n             this.title = url;\n             this.ref = url;\n         }\n+        if (!ExternalLink.isValidURL(this.ref)) {\n+            throw new InvalidExternalLinkError('Invalid URL');\n+        }\n+    }\n+\n+    private static isValidURL(url: string): boolean {\n+        try {\n+            const parsedUrl = new URL(url);\n+            return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';\n+        } catch (TypeError) {\n+            try {\n+                // Try parsing as a relative URL.\n+                const parsedUrl = new URL(url, window.location.origin);\n+                return parsedUrl.protocol !== 'javascript:' && parsedUrl.protocol !== 'data:';\n+            } catch (TypeError) {\n+                return false;\n+            }\n+        }\n     }\n }\n \n export const ApplicationURLs = ({urls}: {urls: string[]}) => {\n     const externalLinks: ExternalLink[] = [];\n     for (const url of urls || []) {\n-        externalLinks.push(new ExternalLink(url));\n+        try {\n+            const externalLink = new ExternalLink(url);\n+            externalLinks.push(externalLink);\n+        } catch (InvalidExternalLinkError) {\n+            continue;\n+        }\n     }\n \n     // sorted alphabetically & links with titles first"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "72962014b53970b7eae3922ee0458fdc6d896f92",
            "date": "2025-01-14T21:11:40Z",
            "author_login": "surajyadav1108"
          },
          {
            "sha": "d23e6ac79bb95a911b988551ba33bfc9939c5f18",
            "date": "2025-01-14T16:10:14Z",
            "author_login": "crenshaw-dev"
          },
          {
            "sha": "9a51757049dc028596d4950d7a6c7cd5a446301a",
            "date": "2025-01-14T15:41:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c3600d240a42a4708ec65091ffb23689b4513f85",
            "date": "2025-01-14T12:37:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b77d9d9f5f9cf3862ef75e14a5877a3fcf60fa40",
            "date": "2025-01-14T12:16:41Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a `javascript:` link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin). The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources. A patch for this vulnerability has been released in the following Argo CD versions: v2.4.1, v2.3.5, v2.2.10 and v2.1.16. There are no completely-safe workarounds besides upgrading.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-27T19:15:08.457",
    "last_modified": "2024-11-21T07:03:45.533",
    "fix_date": "2022-06-21T13:36:38Z"
  },
  "references": [
    {
      "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.486101",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "argo-cd",
    "owner": "argoproj",
    "created_at": "2018-02-09T11:12:01Z",
    "updated_at": "2025-01-14T12:37:12Z",
    "pushed_at": "2025-01-14T12:37:08Z",
    "size": 125601,
    "stars": 18420,
    "forks": 5620,
    "open_issues": 3601,
    "watchers": 18420,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 6686751,
      "TypeScript": 1298168,
      "Lua": 199797,
      "SCSS": 92938,
      "Shell": 58329,
      "Makefile": 24983,
      "Dockerfile": 15204,
      "Procfile": 10040,
      "JavaScript": 5975,
      "CSS": 2209,
      "Mustache": 1066,
      "HTML": 895
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:15:10.212233"
  }
}