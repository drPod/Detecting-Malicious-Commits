{
  "cve_id": "CVE-2022-31036",
  "github_data": {
    "repository": "argoproj/argo-cd",
    "fix_commit": "04c305396458508a31d03d44afea07b1c620d7cd",
    "related_commits": [
      "04c305396458508a31d03d44afea07b1c620d7cd",
      "04c305396458508a31d03d44afea07b1c620d7cd"
    ],
    "patch_url": "https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd.patch",
    "fix_commit_details": {
      "sha": "04c305396458508a31d03d44afea07b1c620d7cd",
      "commit_date": "2022-06-21T13:39:56Z",
      "author": {
        "login": "crenshaw-dev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-q4w5-4gq2-98vm",
        "length": 171,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 82,
        "additions": 63,
        "deletions": 19
      },
      "files": [
        {
          "filename": "reposerver/repository/repository.go",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "patch": "@@ -1461,19 +1461,23 @@ func populateHelmAppDetails(res *apiclient.RepoAppDetailsResponse, appPath strin\n \t\treturn err\n \t}\n \n-\tif err := loadFileIntoIfExists(filepath.Join(appPath, \"values.yaml\"), &res.Helm.Values); err != nil {\n-\t\treturn err\n+\tif resolvedValuesPath, _, err := pathutil.ResolveFilePath(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {\n+\t\tif err := loadFileIntoIfExists(resolvedValuesPath, &res.Helm.Values); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t} else {\n+\t\tlog.Warnf(\"Values file %s is not allowed: %v\", filepath.Join(appPath, \"values.yaml\"), err)\n \t}\n \tvar resolvedSelectedValueFiles []pathutil.ResolvedFilePath\n \t// drop not allowed values files\n \tfor _, file := range selectedValueFiles {\n \t\tif resolvedFile, _, err := pathutil.ResolveFilePath(appPath, repoRoot, file, q.GetValuesFileSchemes()); err == nil {\n \t\t\tresolvedSelectedValueFiles = append(resolvedSelectedValueFiles, resolvedFile)\n \t\t} else {\n-\t\t\tlog.Debugf(\"Values file %s is not allowed: %v\", file, err)\n+\t\t\tlog.Warnf(\"Values file %s is not allowed: %v\", file, err)\n \t\t}\n \t}\n-\tparams, err := h.GetParameters(resolvedSelectedValueFiles)\n+\tparams, err := h.GetParameters(resolvedSelectedValueFiles, appPath, repoRoot)\n \tif err != nil {\n \t\treturn err\n \t}\n@@ -1492,15 +1496,16 @@ func populateHelmAppDetails(res *apiclient.RepoAppDetailsResponse, appPath strin\n \treturn nil\n }\n \n-func loadFileIntoIfExists(path string, destination *string) error {\n-\tinfo, err := os.Stat(path)\n+func loadFileIntoIfExists(path pathutil.ResolvedFilePath, destination *string) error {\n+\tstringPath := string(path)\n+\tinfo, err := os.Stat(stringPath)\n \n \tif err == nil && !info.IsDir() {\n-\t\tif bytes, err := ioutil.ReadFile(path); err != nil {\n-\t\t\t*destination = string(bytes)\n-\t\t} else {\n+\t\tbytes, err := ioutil.ReadFile(stringPath);\n+\t\tif err != nil {\n \t\t\treturn err\n \t\t}\n+\t\t*destination = string(bytes)\n \t}\n \n \treturn nil"
        },
        {
          "filename": "reposerver/repository/repository_test.go",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -1125,11 +1125,13 @@ func TestListApps(t *testing.T) {\n \t\t\"app-parameters/single-app-only\": \"Kustomize\",\n \t\t\"app-parameters/single-global\":   \"Kustomize\",\n \t\t\"invalid-helm\":                   \"Helm\",\n+\t\t\"in-bounds-values-file-link\":     \"Helm\",\n \t\t\"invalid-kustomize\":              \"Kustomize\",\n \t\t\"kustomization_yaml\":             \"Kustomize\",\n \t\t\"kustomization_yml\":              \"Kustomize\",\n \t\t\"my-chart\":                       \"Helm\",\n \t\t\"my-chart-2\":                     \"Helm\",\n+\t\t\"out-of-bounds-values-file-link\": \"Helm\",\n \t\t\"values-files\":                   \"Helm\",\n \t}\n \tassert.Equal(t, expectedApps, res.Apps)\n@@ -2027,3 +2029,23 @@ func Test_populateHelmAppDetails(t *testing.T) {\n \tassert.Len(t, res.Helm.Parameters, 3)\n \tassert.Len(t, res.Helm.ValueFiles, 4)\n }\n+\n+func Test_populateHelmAppDetails_values_symlinks(t *testing.T) {\n+\tt.Run(\"inbound\", func(t *testing.T) {\n+\t\tres := apiclient.RepoAppDetailsResponse{}\n+\t\tq := apiclient.RepoServerAppDetailsQuery{Repo: &argoappv1.Repository{}, Source: &argoappv1.ApplicationSource{}}\n+\t\terr := populateHelmAppDetails(&res, \"./testdata/in-bounds-values-file-link/\", \"./testdata/in-bounds-values-file-link/\", &q)\n+\t\trequire.NoError(t, err)\n+\t\tassert.NotEmpty(t, res.Helm.Values)\n+\t\tassert.NotEmpty(t, res.Helm.Parameters)\n+\t})\n+\n+\tt.Run(\"out of bounds\", func(t *testing.T) {\n+\t\tres := apiclient.RepoAppDetailsResponse{}\n+\t\tq := apiclient.RepoServerAppDetailsQuery{Repo: &argoappv1.Repository{}, Source: &argoappv1.ApplicationSource{}}\n+\t\terr := populateHelmAppDetails(&res, \"./testdata/out-of-bounds-values-file-link/\", \"./testdata/out-of-bounds-values-file-link/\", &q)\n+\t\trequire.NoError(t, err)\n+\t\tassert.Empty(t, res.Helm.Values)\n+\t\tassert.Empty(t, res.Helm.Parameters)\n+\t})\n+}"
        },
        {
          "filename": "reposerver/repository/testdata/in-bounds-values-file-link/Chart.yaml",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+name: my-chart\n+version: 1.1.0"
        },
        {
          "filename": "reposerver/repository/testdata/in-bounds-values-file-link/values-2.yaml",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+some: yaml"
        },
        {
          "filename": "reposerver/repository/testdata/in-bounds-values-file-link/values.yaml",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+values-2.yaml\n\\ No newline at end of file"
        },
        {
          "filename": "reposerver/repository/testdata/out-of-bounds-values-file-link/Chart.yaml",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+name: my-chart\n+version: 1.1.0"
        },
        {
          "filename": "reposerver/repository/testdata/out-of-bounds-values-file-link/values.yaml",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+../out-of-bounds.yaml\n\\ No newline at end of file"
        },
        {
          "filename": "reposerver/repository/testdata/out-of-bounds.yaml",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+some: yaml"
        },
        {
          "filename": "util/helm/helm.go",
          "status": "modified",
          "additions": 16,
          "deletions": 7,
          "patch": "@@ -6,9 +6,11 @@ import (\n \t\"net/url\"\n \t\"os\"\n \t\"os/exec\"\n+\t\"path/filepath\"\n \t\"strings\"\n \n \t\"github.com/ghodss/yaml\"\n+\tlog \"github.com/sirupsen/logrus\"\n \n \t\"github.com/argoproj/argo-cd/v2/util/config\"\n \texecutil \"github.com/argoproj/argo-cd/v2/util/exec\"\n@@ -27,7 +29,7 @@ type Helm interface {\n \t// Template returns a list of unstructured objects from a `helm template` command\n \tTemplate(opts *TemplateOpts) (string, error)\n \t// GetParameters returns a list of chart parameters taking into account values in provided YAML files.\n-\tGetParameters(valuesFiles []pathutil.ResolvedFilePath) (map[string]string, error)\n+\tGetParameters(valuesFiles []pathutil.ResolvedFilePath, appPath, repoRoot string) (map[string]string, error)\n \t// DependencyBuild runs `helm dependency build` to download a chart's dependencies\n \tDependencyBuild() error\n \t// Init runs `helm init --client-only`\n@@ -129,12 +131,19 @@ func Version(shortForm bool) (string, error) {\n \treturn strings.TrimSpace(version), nil\n }\n \n-func (h *helm) GetParameters(valuesFiles []pathutil.ResolvedFilePath) (map[string]string, error) {\n-\tout, err := h.cmd.inspectValues(\".\")\n-\tif err != nil {\n-\t\treturn nil, err\n+func (h *helm) GetParameters(valuesFiles []pathutil.ResolvedFilePath, appPath, repoRoot string) (map[string]string, error) {\n+\tvar values []string\n+\t// Don't load values.yaml if it's an out-of-bounds link.\n+\tif resolved, _, err := pathutil.ResolveFilePath(appPath, repoRoot, \"values.yaml\", []string{}); err == nil {\n+\t\tfmt.Println(resolved)\n+\t\tout, err := h.cmd.inspectValues(\".\")\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tvalues = append(values, out)\n+\t} else {\n+\t\tlog.Warnf(\"Values file %s is not allowed: %v\", filepath.Join(appPath, \"values.yaml\"), err)\n \t}\n-\tvalues := []string{out}\n \tfor i := range valuesFiles {\n \t\tfile := string(valuesFiles[i])\n \t\tvar fileValues []byte\n@@ -156,7 +165,7 @@ func (h *helm) GetParameters(valuesFiles []pathutil.ResolvedFilePath) (map[strin\n \toutput := map[string]string{}\n \tfor _, file := range values {\n \t\tvalues := map[string]interface{}{}\n-\t\tif err = yaml.Unmarshal([]byte(file), &values); err != nil {\n+\t\tif err := yaml.Unmarshal([]byte(file), &values); err != nil {\n \t\t\treturn nil, fmt.Errorf(\"failed to parse values: %s\", err)\n \t\t}\n \t\tflatVals(values, output)"
        },
        {
          "filename": "util/helm/helm_test.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -85,7 +85,7 @@ func TestHelmGetParams(t *testing.T) {\n \trequire.NoError(t, err)\n \th, err := NewHelmApp(repoRootAbs, nil, false, \"\", \"\", false)\n \tassert.NoError(t, err)\n-\tparams, err := h.GetParameters(nil)\n+\tparams, err := h.GetParameters(nil, repoRootAbs, repoRootAbs)\n \tassert.Nil(t, err)\n \n \tslaveCountParam := params[\"cluster.slaveCount\"]\n@@ -100,7 +100,7 @@ func TestHelmGetParamsValueFiles(t *testing.T) {\n \tassert.NoError(t, err)\n \tvaluesPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)\n \trequire.NoError(t, err)\n-\tparams, err := h.GetParameters([]path.ResolvedFilePath{valuesPath})\n+\tparams, err := h.GetParameters([]path.ResolvedFilePath{valuesPath}, repoRootAbs, repoRootAbs)\n \tassert.Nil(t, err)\n \n \tslaveCountParam := params[\"cluster.slaveCount\"]\n@@ -117,7 +117,7 @@ func TestHelmGetParamsValueFilesThatExist(t *testing.T) {\n \trequire.NoError(t, err)\n \tvaluesProductionPath, _, err := path.ResolveFilePath(repoRootAbs, repoRootAbs, \"values-production.yaml\", nil)\n \trequire.NoError(t, err)\n-\tparams, err := h.GetParameters([]path.ResolvedFilePath{valuesMissingPath, valuesProductionPath})\n+\tparams, err := h.GetParameters([]path.ResolvedFilePath{valuesMissingPath, valuesProductionPath}, repoRootAbs, repoRootAbs)\n \tassert.Nil(t, err)\n \n \tslaveCountParam := params[\"cluster.slaveCount\"]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 8,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d23e6ac79bb95a911b988551ba33bfc9939c5f18",
            "date": "2025-01-14T16:10:14Z",
            "author_login": "crenshaw-dev"
          },
          {
            "sha": "9a51757049dc028596d4950d7a6c7cd5a446301a",
            "date": "2025-01-14T15:41:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c3600d240a42a4708ec65091ffb23689b4513f85",
            "date": "2025-01-14T12:37:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b77d9d9f5f9cf3862ef75e14a5877a3fcf60fa40",
            "date": "2025-01-14T12:16:41Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2f579404f68ded0b0156fc25d6e554640c4ad009",
            "date": "2025-01-14T12:12:38Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-20",
    "description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server. A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file. Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server. Patches for this vulnerability has been released in the following Argo CD versions: v2.4.1, v2.3.5, v2.2.10 and v2.1.16. If you are using a version >=v2.3.0 and do not have any Helm-type Applications you may disable the Helm config management tool as a workaround.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-27T20:15:08.400",
    "last_modified": "2024-11-21T07:03:45.647",
    "fix_date": "2022-06-21T13:39:56Z"
  },
  "references": [
    {
      "url": "https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.486253",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "argo-cd",
    "owner": "argoproj",
    "created_at": "2018-02-09T11:12:01Z",
    "updated_at": "2025-01-14T12:37:12Z",
    "pushed_at": "2025-01-14T12:37:08Z",
    "size": 125601,
    "stars": 18420,
    "forks": 5620,
    "open_issues": 3601,
    "watchers": 18420,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 6686751,
      "TypeScript": 1298168,
      "Lua": 199797,
      "SCSS": 92938,
      "Shell": 58329,
      "Makefile": 24983,
      "Dockerfile": 15204,
      "Procfile": 10040,
      "JavaScript": 5975,
      "CSS": 2209,
      "Mustache": 1066,
      "HTML": 895
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:15:10.212233"
  }
}