{
  "cve_id": "CVE-2022-31040",
  "github_data": {
    "repository": "open-formulieren/open-forms",
    "fix_commit": "3e8c9cce386e548765783354694fbb9d7a6ea7d3",
    "related_commits": [
      "3e8c9cce386e548765783354694fbb9d7a6ea7d3",
      "3e8c9cce386e548765783354694fbb9d7a6ea7d3"
    ],
    "patch_url": "https://github.com/open-formulieren/open-forms/commit/3e8c9cce386e548765783354694fbb9d7a6ea7d3.patch",
    "fix_commit_details": {
      "sha": "3e8c9cce386e548765783354694fbb9d7a6ea7d3",
      "commit_date": "2022-06-13T08:17:22Z",
      "author": {
        "login": "sergei-maertens",
        "type": "User",
        "stats": {
          "total_commits": 6313,
          "average_weekly_commits": 27.56768558951965,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 202
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-c97h-m5qf-j8mf",
        "length": 96,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 86,
        "additions": 83,
        "deletions": 3
      },
      "files": [
        {
          "filename": "src/openforms/forms/templatetags/openforms.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n from rest_framework.reverse import reverse\n \n from openforms.config.models import GlobalConfiguration\n+from openforms.utils.redirect import allow_redirect_url\n \n from ..context_processors import sdk_urls\n \n@@ -30,3 +31,20 @@ def sdk_info_banner():\n         \"enabled\": config.display_sdk_information,\n         **sdk_urls(request=None),\n     }\n+\n+\n+@register.simple_tag\n+def get_allowed_redirect_url(*candidates: str) -> str:\n+    \"\"\"\n+    Output the first variable passed that is not empty and is an allowed redirect URL.\n+\n+    Output nothing if none of the values satisfy the requirements.\n+\n+    Heavily insired on the builtin {% firstof %} tag.\n+    \"\"\"\n+    for candidate in candidates:\n+        if not candidate:\n+            continue\n+        if allow_redirect_url(candidate):\n+            return candidate\n+    return \"\""
        },
        {
          "filename": "src/openforms/templates/cookie_consent/cookiegroup_list.html",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,9 +1,9 @@\n {% extends 'ui/views/abstract/list.html' %}\n-{% load i18n %}\n+{% load i18n openforms %}\n \n \n {% block card %}\n-    {% firstof request.GET.referer request.headers.referer as referer %}\n+    {% get_allowed_redirect_url request.GET.referer request.headers.referer as referer %}\n     <header class=\"card__header\">\n         <h1 class=\"title\">{% trans \"Cookies\" %}</h1>\n     </header>"
        },
        {
          "filename": "src/openforms/tests/test_cookie_notice.py",
          "status": "modified",
          "additions": 46,
          "deletions": 1,
          "patch": "@@ -1,12 +1,14 @@\n from io import StringIO\n \n from django.core.management import call_command\n-from django.test import override_settings\n+from django.test import override_settings, tag\n from django.urls import reverse\n+from django.utils.translation import gettext as _\n \n from cookie_consent.cache import delete_cache\n from cookie_consent.models import CookieGroup\n from django_webtest import WebTest\n+from furl import furl\n \n from openforms.config.models import GlobalConfiguration\n from openforms.forms.tests.factories import FormFactory\n@@ -122,3 +124,46 @@ def test_analytics_snippets_not_rendered(self):\n             self.assertTemplateUsed(\n                 refreshed_form_page, \"includes/analytics/all_bottom.html\"\n             )\n+\n+    @tag(\"GHSA-c97h-m5qf-j8mf\")\n+    @override_settings(\n+        CORS_ALLOW_ALL_ORIGINS=False,\n+        CORS_ALLOWED_ORIGINS=[\"https://external.domain.com\"],\n+        ALLOWED_HOSTS=[\"testserver\", \"example.com\"],\n+        IS_HTTPS=True,\n+    )\n+    def test_accept_reject_does_not_allow_open_redirect(self):\n+        url = reverse(\"cookie_consent_cookie_group_list\")\n+        allowed_redirects = (\n+            \"https://example.com/foo/bar\",\n+            \"https://testserver/admin/\",\n+            \"/admin/\",\n+        )\n+        blocked_redirects = (\n+            \"http://example.com\",\n+            \"https://evil.com\",\n+        )\n+\n+        for allowed in allowed_redirects:\n+            with self.subTest(f\"Allowed redirect to '{allowed}'\"):\n+                self.renew_app()\n+\n+                cookies_page = self.app.get(url, {\"referer\": allowed})\n+\n+                button = cookies_page.pyquery.find(\"a.button--primary\")\n+                self.assertEqual(button.attr[\"href\"], allowed)\n+                self.assertEqual(button.text(), _(\"Close\"))\n+\n+        for blocked in blocked_redirects:\n+            with self.subTest(f\"Blockedredirect to '{blocked}'\"):\n+                self.renew_app()\n+\n+                cookies_page = self.app.get(url, {\"referer\": blocked})\n+\n+                button = cookies_page.pyquery.find(\"a.button--primary\")\n+                self.assertFalse(button)\n+\n+                for form in cookies_page.forms.values():\n+                    next_url = furl(form[\"next\"].value)\n+\n+                    self.assertEqual(next_url.args.get(\"referer\", \"\"), \"\")"
        },
        {
          "filename": "src/openforms/utils/redirect.py",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -1,5 +1,8 @@\n from urllib.parse import urlparse, urlunparse\n \n+from django.conf import settings\n+from django.utils.http import url_has_allowed_host_and_scheme\n+\n from corsheaders.conf import conf as cors_conf\n from corsheaders.middleware import CorsMiddleware\n \n@@ -18,6 +21,20 @@ def allow_redirect_url(url: str) -> bool:\n     are allowed to access Open Forms. We leverage this configuration to block or allow\n     redirects to external hosts.\n     \"\"\"\n+    # first, check if the URL is in ALLOWED_HOSTS. We deliberately exclude the wildcard\n+    # setting to require explicit configuration either via ALLOWED_HOSTS or CORS_* settings.\n+    allowed_hosts_check = url_has_allowed_host_and_scheme(\n+        url=url,\n+        allowed_hosts=[host for host in settings.ALLOWED_HOSTS if host != \"*\"],\n+        # settings.ALLOWED_HOSTS means we are serving the domain, so we can enforce our\n+        # own custom HTTPS setting.\n+        require_https=settings.IS_HTTPS,\n+    )\n+    # if we pass via ALLOWED_HOSTS, short-circuit, otherwise we check the CORS policy\n+    # for allowed external domains.\n+    if allowed_hosts_check:\n+        return True\n+\n     cors = CorsMiddleware()\n     origin = origin_from_url(url)\n     parts = urlparse(url)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "41616e328b3680048416d082e2c460aeed5b54e7",
            "date": "2025-01-14T15:57:31Z",
            "author_login": "sergei-maertens"
          },
          {
            "sha": "bcf2262691b54c62469778521fd836fbcf5ba407",
            "date": "2025-01-14T10:45:49Z",
            "author_login": "vaszig"
          },
          {
            "sha": "134ee74f04dbd2b65a679554ca15fcb95806393d",
            "date": "2025-01-14T14:50:49Z",
            "author_login": "sergei-maertens"
          },
          {
            "sha": "950463d0ace9b9b5496ffa2c32ee8ada1e05d6ba",
            "date": "2025-01-14T11:15:15Z",
            "author_login": "sergei-maertens"
          },
          {
            "sha": "719dbb4697bcc38ace68c8cca3f1e717d006fcf3",
            "date": "2025-01-14T10:44:49Z",
            "author_login": "sergei-maertens"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:H/A:N",
    "cwe_id": "CWE-601",
    "description": "Open Forms is an application for creating and publishing smart forms. Prior to versions 1.0.9 and 1.1.1, the cookie consent page in Open Forms contains an open redirect by injecting a `referer` querystring parameter and failing to validate the value. A malicious actor is able to redirect users to a website under their control, opening them up for phishing attacks. The redirect is initiated by the open forms backend which is a legimate page, making it less obvious to end users they are being redirected to a malicious website. Versions 1.0.9 and 1.1.1 contain patches for this issue. There are no known workarounds avaialble.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-13T12:15:08.360",
    "last_modified": "2024-11-21T07:03:46.093",
    "fix_date": "2022-06-13T08:17:22Z"
  },
  "references": [
    {
      "url": "https://github.com/open-formulieren/open-forms/commit/3e8c9cce386e548765783354694fbb9d7a6ea7d3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-formulieren/open-forms/security/advisories/GHSA-c97h-m5qf-j8mf",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-formulieren/open-forms/commit/3e8c9cce386e548765783354694fbb9d7a6ea7d3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-formulieren/open-forms/security/advisories/GHSA-c97h-m5qf-j8mf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.432641",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "open-forms",
    "owner": "open-formulieren",
    "created_at": "2020-08-12T15:06:09Z",
    "updated_at": "2025-01-14T15:57:36Z",
    "pushed_at": "2025-01-14T15:57:33Z",
    "size": 69377,
    "stars": 39,
    "forks": 26,
    "open_issues": 498,
    "watchers": 39,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable/2.8.x",
      "stable/3.0.x"
    ],
    "languages": {
      "Python": 7043749,
      "JavaScript": 1065841,
      "HTML": 119350,
      "SCSS": 93719,
      "MDX": 19281,
      "Shell": 12385,
      "Dockerfile": 5927,
      "Jinja": 2335,
      "EJS": 1794,
      "Smarty": 1630
    },
    "commit_activity": {
      "total_commits_last_year": 2826,
      "avg_commits_per_week": 54.34615384615385,
      "days_active_last_year": 245
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:48:05.807912"
  }
}