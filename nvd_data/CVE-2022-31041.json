{
  "cve_id": "CVE-2022-31041",
  "github_data": {
    "repository": "open-formulieren/open-forms",
    "fix_commit": "0978a29e821a7228c5d46c0527c3e925eb91b071",
    "related_commits": [
      "0978a29e821a7228c5d46c0527c3e925eb91b071",
      "0978a29e821a7228c5d46c0527c3e925eb91b071"
    ],
    "patch_url": "https://github.com/open-formulieren/open-forms/commit/0978a29e821a7228c5d46c0527c3e925eb91b071.patch",
    "fix_commit_details": {
      "sha": "0978a29e821a7228c5d46c0527c3e925eb91b071",
      "commit_date": "2022-06-13T08:18:10Z",
      "author": {
        "login": "sergei-maertens",
        "type": "User",
        "stats": {
          "total_commits": 6313,
          "average_weekly_commits": 27.56768558951965,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 202
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-h85r-xv4w-cg8g",
        "length": 107,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 241,
        "additions": 228,
        "deletions": 13
      },
      "files": [
        {
          "filename": "Dockerfile",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -74,6 +74,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n         vim \\\n         mime-support \\\n         postgresql-client \\\n+        libmagic1 \\\n         libxmlsec1 \\\n         libxmlsec1-openssl \\\n         gettext \\"
        },
        {
          "filename": "INSTALL.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -17,13 +17,14 @@ You need the following libraries and/or programs:\n * `Python`_ 3.8 or above\n * Python `Virtualenv`_ and `Pip`_\n * `PostgreSQL`_ 10 or above\n-* `Node.js`_ (LTS version, see the Dockerfile for version information)\n+* `Node.js`_ (LTS version, see ``.nvmrc`` for version information)\n * `npm`_\n * `yarn`_\n \n You will also need the following libraries:\n \n * pkg-config\n+* libmagic1\n * libxml2-dev\n * libxmlsec1-dev\n * libxmlsec1-openssl"
        },
        {
          "filename": "requirements/base.in",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -10,11 +10,12 @@ lxml\n O365  # microsoft graph\n phonenumbers\n Pillow  # handle images\n+portalocker[redis]\n psycopg2  # database driver\n pytz  # handle timezones\n python-dotenv  # environment variables for secrets\n python-decouple  # processing of envvar configs\n-portalocker[redis]\n+python-magic\n tablib[xlsx]\n xmltodict\n self-certifi"
        },
        {
          "filename": "requirements/base.txt",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -316,6 +316,8 @@ python-decouple==3.3\n     # via -r requirements/base.in\n python-dotenv==0.14.0\n     # via -r requirements/base.in\n+python-magic==0.4.27\n+    # via -r requirements/base.in\n python3-saml @ git+https://github.com/maykinmedia/python3-saml.git@f587f77b78be79d51139f29a957b406072e2b537\n     # via -r requirements/base.in\n pytz==2021.3"
        },
        {
          "filename": "requirements/ci.txt",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -622,6 +622,10 @@ python-dotenv==0.14.0\n     # via\n     #   -c requirements/base.txt\n     #   -r requirements/base.txt\n+python-magic==0.4.27\n+    # via\n+    #   -c requirements/base.txt\n+    #   -r requirements/base.txt\n python3-saml @ git+https://github.com/maykinmedia/python3-saml.git@f587f77b78be79d51139f29a957b406072e2b537\n     # via\n     #   -c requirements/base.txt"
        },
        {
          "filename": "requirements/dev.txt",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -737,6 +737,10 @@ python-dotenv==0.14.0\n     # via\n     #   -c requirements/ci.txt\n     #   -r requirements/ci.txt\n+python-magic==0.4.27\n+    # via\n+    #   -c requirements/ci.txt\n+    #   -r requirements/ci.txt\n python3-saml @ git+https://github.com/maykinmedia/python3-saml.git@f587f77b78be79d51139f29a957b406072e2b537\n     # via\n     #   -c requirements/ci.txt"
        },
        {
          "filename": "src/openforms/submissions/attachments.py",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -1,5 +1,6 @@\n import os.path\n import re\n+from collections import defaultdict\n from datetime import timedelta\n from typing import Iterable, Optional, Tuple\n from urllib.parse import urlparse\n@@ -9,9 +10,11 @@\n from django.urls import Resolver404, resolve\n from django.utils.translation import gettext as _\n \n+import magic\n import PIL\n from glom import glom\n from PIL import Image\n+from rest_framework.exceptions import ValidationError\n \n from openforms.api.exceptions import RequestEntityTooLarge\n from openforms.conf.utils import Filesize\n@@ -85,6 +88,7 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:\n     uploads = resolve_uploads_from_data(components, submission_step.data)\n \n     result = list()\n+    validation_errors = defaultdict(list)\n     for key, (component, uploads) in uploads.items():\n         # grab resize settings\n         resize_apply = glom(component, \"of.image.resize.apply\", default=False)\n@@ -94,6 +98,7 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:\n                 component, \"of.image.resize.height\", default=DEFAULT_IMAGE_MAX_SIZE[1]\n             ),\n         )\n+        allowed_mime_types = glom(component, \"file.type\", default=[])\n         file_max_size = file_size_cast(\n             glom(component, \"fileMaxSize\", default=\"\") or settings.MAX_FILE_UPLOAD_SIZE\n         )\n@@ -112,6 +117,28 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:\n                     ),\n                 )\n \n+            # perform content type validation\n+            with upload.content.open(\"rb\") as infile:\n+                # 2048 bytes per recommendation of python-magic\n+                file_mime_type = magic.from_buffer(infile.read(2048), mime=True)\n+\n+            invalid_file_type_error = ValidationError(\n+                _(\"The file '{filename}' is not a valid file type.\").format(\n+                    filename=upload.file_name\n+                ),\n+                code=\"invalid\",\n+            )\n+\n+            if upload.content_type != file_mime_type:\n+                validation_errors[key].append(invalid_file_type_error)\n+                continue\n+\n+            # if no allowed_mime_types are defined on the file component, then all filetypes\n+            # are allowed and we skip validation.\n+            if allowed_mime_types and file_mime_type not in allowed_mime_types:\n+                validation_errors[key].append(invalid_file_type_error)\n+                continue\n+\n             file_name = append_file_num_postfix(\n                 upload.file_name, base_name, i, len(uploads)\n             )\n@@ -126,6 +153,9 @@ def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:\n                 # see https://github.com/open-formulieren/open-forms/issues/507\n                 resize_submission_attachment.delay(attachment.id, resize_size)\n \n+    if validation_errors:\n+        raise ValidationError(validation_errors)\n+\n     return result\n \n "
        },
        {
          "filename": "src/openforms/submissions/models/submission_files.py",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -95,19 +95,18 @@ def create_from_upload(\n                 False,\n             )\n         except self.model.DoesNotExist:\n-            return (\n-                self.create(\n+            with upload.content.open(\"rb\") as content:\n+                instance = self.create(\n                     submission_step=submission_step,\n                     temporary_file=upload,\n                     form_key=form_key,\n                     # wrap in File() so it will be physically copied\n-                    content=File(upload.content, name=upload.file_name),\n+                    content=File(content, name=upload.file_name),\n                     content_type=upload.content_type,\n                     original_name=upload.file_name,\n                     file_name=file_name,\n-                ),\n-                True,\n-            )\n+                )\n+            return (instance, True)\n \n \n class SubmissionFileAttachment(DeleteFileFieldFilesMixin, models.Model):"
        },
        {
          "filename": "src/openforms/submissions/tests/factories.py",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -5,6 +5,7 @@\n from django.utils import timezone\n \n import factory\n+import magic\n from glom import PathAccessError, glom\n \n from openforms.forms.models import FormVariable\n@@ -188,12 +189,16 @@ class Meta:\n \n class TemporaryFileUploadFactory(factory.django.DjangoModelFactory):\n     file_name = factory.Faker(\"file_name\")\n-    content_type = factory.Faker(\"mime_type\")\n     content = factory.django.FileField(filename=\"file.dat\", data=b\"content\")\n \n     class Meta:\n         model = TemporaryFileUpload\n \n+    @factory.lazy_attribute\n+    def content_type(self) -> str:\n+        buffer = self.content.read(2048)\n+        return magic.from_buffer(buffer, mime=True)\n+\n \n class SubmissionFileAttachmentFactory(factory.django.DjangoModelFactory):\n     submission_step = factory.SubFactory(SubmissionStepFactory)"
        },
        {
          "filename": "src/openforms/submissions/tests/files/README.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+# Test files\n+\n+- `image-256x256.png` is a 256px red square.\n+- `image-256x256.pdf` is the same file as `image-256x256.png` but pretends to be a PDF by extension.\n+  This file is used for content-type validation."
        },
        {
          "filename": "src/openforms/submissions/tests/files/image-256x256.pdf",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "src/openforms/submissions/tests/test_submission_attachment.py",
          "status": "modified",
          "additions": 167,
          "deletions": 4,
          "patch": "@@ -1,12 +1,14 @@\n import os\n+from pathlib import Path\n from unittest.mock import patch\n \n from django.core.files import File\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, tag\n from django.urls import reverse\n \n from PIL import Image, UnidentifiedImageError\n from privates.test import temp_private_root\n+from rest_framework.exceptions import ValidationError\n \n from openforms.accounts.tests.factories import SuperUserFactory\n from openforms.api.exceptions import RequestEntityTooLarge\n@@ -30,14 +32,16 @@\n )\n from .mixins import VariablesTestMixin\n \n+TEST_FILES_DIR = Path(__file__).parent / \"files\"\n+\n \n @temp_private_root()\n class SubmissionAttachmentTest(VariablesTestMixin, TestCase):\n     @classmethod\n     def setUpTestData(cls):\n-        cls.test_image_path = os.path.join(\n-            os.path.dirname(__file__), \"files\", \"image-256x256.png\"\n-        )\n+        super().setUpTestData()\n+\n+        cls.test_image_path = (TEST_FILES_DIR / \"image-256x256.png\").resolve()\n \n     def test_resolve_uploads_from_formio_data(self):\n         upload = TemporaryFileUploadFactory.create()\n@@ -332,6 +336,165 @@ def test_attach_upload_larger_than_configured_max_size_raises_413(self):\n         with self.assertRaises(RequestEntityTooLarge):\n             attach_uploads_to_submission_step(submission_step)\n \n+    @tag(\"GHSA-h85r-xv4w-cg8g\")\n+    def test_attach_upload_validates_file_content_types_malicious_content(self):\n+        \"\"\"\n+        Regression test for CVE-2022-31041 to ensure the file content is validated\n+        against the formio configuration.\n+\n+        We cannot rely on file extension or browser mime-type. Therefore, we have a test\n+        file that claims to be a PDF but is actually an image that we put in the upload\n+        data. The step attaching the uploads to the form data must validate the\n+        configuration.\n+        \"\"\"\n+        with open(TEST_FILES_DIR / \"image-256x256.pdf\", \"rb\") as infile:\n+            upload1 = TemporaryFileUploadFactory.create(\n+                file_name=\"my-pdf.pdf\",\n+                content=File(infile),\n+                content_type=\"application/pdf\",\n+            )\n+            upload2 = TemporaryFileUploadFactory.create(\n+                file_name=\"my-pdf2.pdf\", content=File(infile), content_type=\"image/png\"\n+            )\n+\n+        data = {\n+            \"my_file\": [\n+                {\n+                    \"url\": f\"http://server/api/v1/submissions/files/{upload1.uuid}\",\n+                    \"data\": {\n+                        \"url\": f\"http://server/api/v1/submissions/files/{upload1.uuid}\",\n+                        \"form\": \"\",\n+                        \"name\": \"my-pdf.pdf\",\n+                        \"size\": 585,\n+                        \"baseUrl\": \"http://server\",\n+                        \"project\": \"\",\n+                    },\n+                    \"name\": \"my-pdf-12305610-2da4-4694-a341-ccb919c3d543.png\",\n+                    \"size\": 585,\n+                    \"type\": \"application/pdf\",  # we are lying!\n+                    \"storage\": \"url\",\n+                    \"originalName\": \"my-pdf.pdf\",\n+                },\n+                {\n+                    \"url\": f\"http://server/api/v1/submissions/files/{upload2.uuid}\",\n+                    \"data\": {\n+                        \"url\": f\"http://server/api/v1/submissions/files/{upload2.uuid}\",\n+                        \"form\": \"\",\n+                        \"name\": \"my-pdf2.pdf\",\n+                        \"size\": 585,\n+                        \"baseUrl\": \"http://server\",\n+                        \"project\": \"\",\n+                    },\n+                    \"name\": \"my-pdf2-12305610-2da4-4694-a341-ccb919c3d543.png\",\n+                    \"size\": 585,\n+                    \"type\": \"image/png\",  # we are lying!\n+                    \"storage\": \"url\",\n+                    \"originalName\": \"my-pdf2.pdf\",\n+                },\n+            ],\n+        }\n+        formio_components = {\n+            \"key\": \"my_file\",\n+            \"type\": \"file\",\n+            \"multiple\": True,\n+            \"file\": {\n+                \"name\": \"\",\n+                \"type\": [\"application/pdf\"],\n+            },\n+            \"filePattern\": \"application/pdf\",\n+        }\n+\n+        submission = SubmissionFactory.from_components(\n+            [formio_components],\n+            submitted_data=data,\n+        )\n+        submission_step = submission.submissionstep_set.get()\n+\n+        with self.assertRaises(ValidationError) as err_context:\n+            attach_uploads_to_submission_step(submission_step)\n+\n+        validation_error = err_context.exception.get_full_details()\n+        self.assertEqual(len(validation_error[\"my_file\"]), 2)\n+\n+    @tag(\"GHSA-h85r-xv4w-cg8g\")\n+    def test_attach_upload_validates_file_content_types_ok(self):\n+        \"\"\"\n+        Regression test for CVE-2022-31041 to ensure the file content is validated\n+        against the formio configuration.\n+\n+        We cannot rely on file extension or browser mime-type. Therefore, we have a test\n+        file that claims to be a PDF but is actually an image that we put in the upload\n+        data. The step attaching the uploads to the form data must validate the\n+        configuration.\n+        \"\"\"\n+        with open(TEST_FILES_DIR / \"image-256x256.png\", \"rb\") as infile:\n+            upload1 = TemporaryFileUploadFactory.create(\n+                file_name=\"my-img.png\",\n+                content=File(infile),\n+                content_type=\"image/png\",\n+            )\n+            upload2 = TemporaryFileUploadFactory.create(\n+                file_name=\"my-img2.png\", content=File(infile), content_type=\"image/png\"\n+            )\n+\n+        data = {\n+            \"my_file\": [\n+                {\n+                    \"url\": f\"http://server/api/v1/submissions/files/{upload1.uuid}\",\n+                    \"data\": {\n+                        \"url\": f\"http://server/api/v1/submissions/files/{upload1.uuid}\",\n+                        \"form\": \"\",\n+                        \"name\": \"my-img.png\",\n+                        \"size\": 585,\n+                        \"baseUrl\": \"http://server\",\n+                        \"project\": \"\",\n+                    },\n+                    \"name\": \"my-img-12305610-2da4-4694-a341-ccb919c3d543.png\",\n+                    \"size\": 585,\n+                    \"type\": \"image/png\",  # we are lying!\n+                    \"storage\": \"url\",\n+                    \"originalName\": \"my-img.png\",\n+                },\n+                {\n+                    \"url\": f\"http://server/api/v1/submissions/files/{upload2.uuid}\",\n+                    \"data\": {\n+                        \"url\": f\"http://server/api/v1/submissions/files/{upload2.uuid}\",\n+                        \"form\": \"\",\n+                        \"name\": \"my-img2.png\",\n+                        \"size\": 585,\n+                        \"baseUrl\": \"http://server\",\n+                        \"project\": \"\",\n+                    },\n+                    \"name\": \"my-img2-12305610-2da4-4694-a341-ccb919c3d543.png\",\n+                    \"size\": 585,\n+                    \"type\": \"image/png\",  # we are lying!\n+                    \"storage\": \"url\",\n+                    \"originalName\": \"my-img2.png\",\n+                },\n+            ],\n+        }\n+        formio_components = {\n+            \"key\": \"my_file\",\n+            \"type\": \"file\",\n+            \"multiple\": True,\n+            \"file\": {\n+                \"name\": \"\",\n+                \"type\": [\"image/png\", \"image/jpeg\"],\n+            },\n+            \"filePattern\": \"image/png,image/jpeg\",\n+        }\n+\n+        submission = SubmissionFactory.from_components(\n+            [formio_components],\n+            submitted_data=data,\n+        )\n+        submission_step = submission.submissionstep_set.get()\n+\n+        try:\n+            attach_uploads_to_submission_step(submission_step)\n+        except ValidationError:\n+            self.fail(\"Uploads should be accepted since the content types are valid\")\n+\n     @disable_2fa\n     def test_attachment_retrieve_view_requires_permission(self):\n         attachment = SubmissionFileAttachmentFactory.create()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 6,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "41616e328b3680048416d082e2c460aeed5b54e7",
            "date": "2025-01-14T15:57:31Z",
            "author_login": "sergei-maertens"
          },
          {
            "sha": "bcf2262691b54c62469778521fd836fbcf5ba407",
            "date": "2025-01-14T10:45:49Z",
            "author_login": "vaszig"
          },
          {
            "sha": "134ee74f04dbd2b65a679554ca15fcb95806393d",
            "date": "2025-01-14T14:50:49Z",
            "author_login": "sergei-maertens"
          },
          {
            "sha": "950463d0ace9b9b5496ffa2c32ee8ada1e05d6ba",
            "date": "2025-01-14T11:15:15Z",
            "author_login": "sergei-maertens"
          },
          {
            "sha": "719dbb4697bcc38ace68c8cca3f1e717d006fcf3",
            "date": "2025-01-14T10:44:49Z",
            "author_login": "sergei-maertens"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:L",
    "cwe_id": "CWE-20",
    "description": "Open Forms is an application for creating and publishing smart forms. Open Forms supports file uploads as one of the form field types. These fields can be configured to allow only certain file extensions to be uploaded by end users (e.g. only PDF / Excel / ...). The input validation of uploaded files is insufficient in versions prior to 1.0.9 and 1.1.1. Users could alter or strip file extensions to bypass this validation. This results in files being uploaded to the server that are of a different file type than indicated by the file name extension. These files may be downloaded (manually or automatically) by staff and/or other applications for further processing. Malicious files can therefore find their way into internal/trusted networks. Versions 1.0.9 and 1.1.1 contain patches for this issue. As a workaround, an API gateway or intrusion detection solution in front of open-forms may be able to scan for and block malicious content before it reaches the Open Forms application.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-13T13:15:13.667",
    "last_modified": "2024-11-21T07:03:46.203",
    "fix_date": "2022-06-13T08:18:10Z"
  },
  "references": [
    {
      "url": "https://github.com/open-formulieren/open-forms/commit/0978a29e821a7228c5d46c0527c3e925eb91b071",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-formulieren/open-forms/security/advisories/GHSA-h85r-xv4w-cg8g",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-formulieren/open-forms/commit/0978a29e821a7228c5d46c0527c3e925eb91b071",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-formulieren/open-forms/security/advisories/GHSA-h85r-xv4w-cg8g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.433771",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "open-forms",
    "owner": "open-formulieren",
    "created_at": "2020-08-12T15:06:09Z",
    "updated_at": "2025-01-14T15:57:36Z",
    "pushed_at": "2025-01-14T15:57:33Z",
    "size": 69377,
    "stars": 39,
    "forks": 26,
    "open_issues": 498,
    "watchers": 39,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable/2.8.x",
      "stable/3.0.x"
    ],
    "languages": {
      "Python": 7043749,
      "JavaScript": 1065841,
      "HTML": 119350,
      "SCSS": 93719,
      "MDX": 19281,
      "Shell": 12385,
      "Dockerfile": 5927,
      "Jinja": 2335,
      "EJS": 1794,
      "Smarty": 1630
    },
    "commit_activity": {
      "total_commits_last_year": 2826,
      "avg_commits_per_week": 54.34615384615385,
      "days_active_last_year": 245
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:48:05.807912"
  }
}