{
  "cve_id": "CVE-2022-31042",
  "github_data": {
    "repository": "guzzle/guzzle",
    "fix_commit": "e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
    "related_commits": [
      "e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
      "e3ff079b22820c2029d4c2a87796b6a0b8716ad8"
    ],
    "patch_url": "https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8.patch",
    "fix_commit_details": {
      "sha": "e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
      "commit_date": "2022-06-09T21:39:15Z",
      "author": {
        "login": "GrahamCampbell",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Release 7.4.4 (#3023)",
        "length": 21,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 75,
        "additions": 63,
        "deletions": 12
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -2,6 +2,11 @@\n \n Please refer to [UPGRADING](UPGRADING.md) guide for upgrading to a major version.\n \n+## 7.4.4 - 2022-06-09\n+\n+* Fix failure to strip Authorization header on HTTP downgrade\n+* Fix failure to strip the Cookie header on change in host or HTTP downgrade\n+\n ## 7.4.3 - 2022-05-25\n \n * Fix cross-domain cookie leakage"
        },
        {
          "filename": "src/RedirectMiddleware.php",
          "status": "modified",
          "additions": 34,
          "deletions": 7,
          "patch": "@@ -142,7 +142,7 @@ static function (ResponseInterface $response) use ($uri, $statusCode) {\n     }\n \n     /**\n-     * Check for too many redirects\n+     * Check for too many redirects.\n      *\n      * @throws TooManyRedirectsException Too many redirects.\n      */\n@@ -178,7 +178,7 @@ public function modifyRequest(RequestInterface $request, array $options, Respons\n             $modify['body'] = '';\n         }\n \n-        $uri = $this->redirectUri($request, $response, $protocols);\n+        $uri = self::redirectUri($request, $response, $protocols);\n         if (isset($options['idn_conversion']) && ($options['idn_conversion'] !== false)) {\n             $idnOptions = ($options['idn_conversion'] === true) ? \\IDNA_DEFAULT : $options['idn_conversion'];\n             $uri = Utils::idnUriConvert($uri, $idnOptions);\n@@ -198,19 +198,46 @@ public function modifyRequest(RequestInterface $request, array $options, Respons\n             $modify['remove_headers'][] = 'Referer';\n         }\n \n-        // Remove Authorization header if host is different.\n-        if ($request->getUri()->getHost() !== $modify['uri']->getHost()) {\n+        // Remove Authorization and Cookie headers if required.\n+        if (self::shouldStripSensitiveHeaders($request->getUri(), $modify['uri'])) {\n             $modify['remove_headers'][] = 'Authorization';\n+            $modify['remove_headers'][] = 'Cookie';\n         }\n \n         return Psr7\\Utils::modifyRequest($request, $modify);\n     }\n \n     /**\n-     * Set the appropriate URL on the request based on the location header\n+     * Determine if we should strip sensitive headers from the request.\n+     *\n+     * We return true if either of the following conditions are true:\n+     *\n+     * 1. the host is different;\n+     * 2. the scheme has changed, and now is non-https.\n      */\n-    private function redirectUri(RequestInterface $request, ResponseInterface $response, array $protocols): UriInterface\n-    {\n+    private static function shouldStripSensitiveHeaders(\n+        UriInterface $originalUri,\n+        UriInterface $modifiedUri\n+    ): bool {\n+        if (\\strcasecmp($originalUri->getHost(), $modifiedUri->getHost()) !== 0) {\n+            return true;\n+        }\n+\n+        if ($originalUri->getScheme() !== $modifiedUri->getScheme() && 'https' !== $modifiedUri->getScheme()) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Set the appropriate URL on the request based on the location header.\n+     */\n+    private static function redirectUri(\n+        RequestInterface $request,\n+        ResponseInterface $response,\n+        array $protocols\n+    ): UriInterface {\n         $location = Psr7\\UriResolver::resolve(\n             $request->getUri(),\n             new Psr7\\Uri($response->getHeaderLine('Location'))"
        },
        {
          "filename": "tests/RedirectMiddlewareTest.php",
          "status": "modified",
          "additions": 24,
          "deletions": 5,
          "patch": "@@ -272,18 +272,37 @@ public function testInvokesOnRedirectForRedirects()\n         self::assertTrue($call);\n     }\n \n-    public function testRemoveAuthorizationHeaderOnRedirect()\n+    public function crossOriginRedirectProvider()\n+    {\n+        return [\n+            ['http://example.com?a=b', 'http://test.com/', false],\n+            ['https://example.com?a=b', 'https://test.com/', false],\n+            ['http://example.com?a=b', 'https://test.com/', false],\n+            ['https://example.com?a=b', 'http://test.com/', false],\n+            ['http://example.com?a=b', 'http://example.com/', true],\n+            ['https://example.com?a=b', 'https://example.com/', true],\n+            ['http://example.com?a=b', 'https://example.com/', true],\n+            ['https://example.com?a=b', 'http://example.com/', false],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider crossOriginRedirectProvider\n+     */\n+    public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $shouldBePresent)\n     {\n         $mock = new MockHandler([\n-            new Response(302, ['Location' => 'http://test.com']),\n-            static function (RequestInterface $request) {\n-                self::assertFalse($request->hasHeader('Authorization'));\n+            new Response(302, ['Location' => $targetUri]),\n+            static function (RequestInterface $request) use ($shouldBePresent) {\n+                self::assertSame($shouldBePresent, $request->hasHeader('Authorization'));\n+                self::assertSame($shouldBePresent, $request->hasHeader('Cookie'));\n+\n                 return new Response(200);\n             }\n         ]);\n         $handler = HandlerStack::create($mock);\n         $client = new Client(['handler' => $handler]);\n-        $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);\n+        $client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);\n     }\n \n     public function testNotRemoveAuthorizationHeaderOnRedirect()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d281ed313b989f213357e3be1a179f02196ac99b",
            "date": "2024-07-24T11:22:20Z",
            "author_login": "GrahamCampbell"
          },
          {
            "sha": "11d3f21339f6c4c559419922abf3a0afc6038bfa",
            "date": "2024-07-24T10:27:45Z",
            "author_login": "GrahamCampbell"
          },
          {
            "sha": "a629e5b69db96eb4939c1b34114130077dd4c6fc",
            "date": "2024-07-19T16:19:57Z",
            "author_login": "GrahamCampbell"
          },
          {
            "sha": "40ad735f966e6a5b22162e53e1bcb5f520bf52eb",
            "date": "2024-07-19T16:12:32Z",
            "author_login": "pcf0"
          },
          {
            "sha": "84ac2b2afc44e40d3e8e658a45d68d6d20437612",
            "date": "2024-07-18T11:52:56Z",
            "author_login": "GrahamCampbell"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Guzzle is an open source PHP HTTP client. In affected versions the `Cookie` headers on requests are sensitive information. On making a request using the `https` scheme to a server which responds with a redirect to a URI with the `http` scheme, or on making a request to a server which responds with a redirect to a a URI to a different host, we should not forward the `Cookie` header on. Prior to this fix, only cookies that were managed by our cookie middleware would be safely removed, and any `Cookie` header manually added to the initial request would not be stripped. We now always strip it, and allow the cookie middleware to re-add any cookies that it deems should be there. Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4. Users unable to upgrade may consider an alternative approach to use your own redirect middleware, rather than ours. If you do not require or expect redirects to be followed, one should simply disable redirects all together.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-10T00:15:07.690",
    "last_modified": "2024-11-21T07:03:46.327",
    "fix_date": "2022-06-09T21:39:15Z"
  },
  "references": [
    {
      "url": "https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/guzzle/guzzle/security/advisories/GHSA-f2wf-25xc-69c9",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5246",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.drupal.org/sa-core-2022-011",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/guzzle/guzzle/security/advisories/GHSA-f2wf-25xc-69c9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5246",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.drupal.org/sa-core-2022-011",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.427218",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "guzzle",
    "owner": "guzzle",
    "created_at": "2011-02-28T02:44:05Z",
    "updated_at": "2025-01-14T12:02:09Z",
    "pushed_at": "2024-08-04T18:39:54Z",
    "size": 10101,
    "stars": 23274,
    "forks": 2401,
    "open_issues": 43,
    "watchers": 23274,
    "has_security_policy": false,
    "default_branch": "7.9",
    "protected_branches": [
      "4.x",
      "5.3",
      "6.5",
      "7.5"
    ],
    "languages": {
      "PHP": 462110,
      "JavaScript": 8050,
      "Makefile": 2734,
      "Dockerfile": 349
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:05:28.609717"
  }
}