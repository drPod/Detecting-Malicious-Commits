{
  "cve_id": "CVE-2022-31046",
  "github_data": {
    "repository": "TYPO3/typo3",
    "fix_commit": "7447a3d1283017d2ee08737a7972c720001a93e9",
    "related_commits": [
      "7447a3d1283017d2ee08737a7972c720001a93e9",
      "7447a3d1283017d2ee08737a7972c720001a93e9"
    ],
    "patch_url": "https://github.com/TYPO3/typo3/commit/7447a3d1283017d2ee08737a7972c720001a93e9.patch",
    "fix_commit_details": {
      "sha": "7447a3d1283017d2ee08737a7972c720001a93e9",
      "commit_date": "2022-06-14T07:12:56Z",
      "author": {
        "login": "derhansen",
        "type": "User",
        "stats": {
          "total_commits": 381,
          "average_weekly_commits": 0.3426258992805755,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "[SECURITY] Restrict export functionality to allowed users",
        "length": 1462,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 269,
        "additions": 236,
        "deletions": 33
      },
      "files": [
        {
          "filename": "typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -2289,4 +2289,26 @@ public function isMfaSetupRequired(): bool\n             || ($globalConfig === 3 && $isAdmin)\n             || ($globalConfig === 4 && $this->isSystemMaintainer());\n     }\n+\n+    /**\n+     * Returns if import functionality is available for current user\n+     *\n+     * @internal\n+     */\n+    public function isImportEnabled(): bool\n+    {\n+        return $this->isAdmin()\n+            || ($this->getTSConfig()['options.']['impexp.']['enableImportForNonAdminUser'] ?? false);\n+    }\n+\n+    /**\n+     * Returns if export functionality is available for current user\n+     *\n+     * @internal\n+     */\n+    public function isExportEnabled(): bool\n+    {\n+        return $this->isAdmin()\n+            || ($this->getTSConfig()['options.']['impexp.']['enableExportForNonAdminUser'] ?? false);\n+    }\n }"
        },
        {
          "filename": "typo3/sysext/core/Classes/Resource/Filter/ImportExportFilter.php",
          "status": "added",
          "additions": 55,
          "deletions": 0,
          "patch": "@@ -0,0 +1,55 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of the TYPO3 CMS project.\n+ *\n+ * It is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU General Public License, either version 2\n+ * of the License, or any later version.\n+ *\n+ * For the full copyright and license information, please read the\n+ * LICENSE.txt file that was distributed with this source code.\n+ *\n+ * The TYPO3 project - inspiring people to share!\n+ */\n+\n+namespace TYPO3\\CMS\\Core\\Resource\\Filter;\n+\n+use TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication;\n+use TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface;\n+\n+/**\n+ * Utility methods for filtering filenames stored in `importexport` temporary folder.\n+ * Albeit this filter is in the scope of `ext:impexp`, it is located in `ext:core` to\n+ * apply filters on left-over fragments, even when `ext:impexp` is not installed.\n+ *\n+ * @internal\n+ */\n+class ImportExportFilter\n+{\n+    /**\n+     * Filter method that checks if a directory or a file in such directory belongs to the temp directory of EXT:impexp\n+     * and the user has \"export\" permissions.\n+     */\n+    public static function filterImportExportFilesAndFolders(string $itemName, string $itemIdentifier, string $parentIdentifier, array $additionalInformation, DriverInterface $driverInstance)\n+    {\n+        // + `_temp_` is hard-coded in `BackendUserAuthentication::getDefaultUploadTemporaryFolder()`\n+        // + `importexport` is hard-coded in `ImportExport::createDefaultImportExportFolder()`\n+        $importExportFolderSubPath = '/_temp_/importexport/';\n+        if (str_ends_with($parentIdentifier, $importExportFolderSubPath) || str_contains($itemIdentifier, $importExportFolderSubPath)) {\n+            $backendUser = self::getBackendUser();\n+            if ($backendUser === null || !$backendUser->isExportEnabled()) {\n+                return -1;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    protected static function getBackendUser(): ?BackendUserAuthentication\n+    {\n+        return $GLOBALS['BE_USER'] ?? null;\n+    }\n+}"
        },
        {
          "filename": "typo3/sysext/core/Classes/Resource/ResourceStorage.php",
          "status": "modified",
          "additions": 22,
          "deletions": 7,
          "patch": "@@ -74,6 +74,7 @@\n use TYPO3\\CMS\\Core\\Resource\\Exception\\ResourcePermissionsUnavailableException;\n use TYPO3\\CMS\\Core\\Resource\\Exception\\UploadException;\n use TYPO3\\CMS\\Core\\Resource\\Exception\\UploadSizeException;\n+use TYPO3\\CMS\\Core\\Resource\\Filter\\ImportExportFilter;\n use TYPO3\\CMS\\Core\\Resource\\Index\\FileIndexRepository;\n use TYPO3\\CMS\\Core\\Resource\\Index\\Indexer;\n use TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry;\n@@ -1517,14 +1518,27 @@ public function resetFileAndFolderNameFiltersToDefault()\n         $this->fileAndFolderNameFilters = $GLOBALS['TYPO3_CONF_VARS']['SYS']['fal']['defaultFilterCallbacks'];\n     }\n \n+    /**\n+     * Returns a filter for files generated by EXT:impexp\n+     *\n+     * @return array<int, ImportExportFilter|string>\n+     * @internal\n+     */\n+    public function getImportExportFilter(): array\n+    {\n+        $filter = GeneralUtility::makeInstance(ImportExportFilter::class);\n+\n+        return [$filter, 'filterImportExportFilesAndFolders'];\n+    }\n+\n     /**\n      * Returns the file and folder name filters used by this storage.\n      *\n      * @return array\n      */\n     public function getFileAndFolderNameFilters()\n     {\n-        return $this->fileAndFolderNameFilters;\n+        return array_merge($this->fileAndFolderNameFilters, [$this->getImportExportFilter()]);\n     }\n \n     /**\n@@ -1589,7 +1603,7 @@ public function getFilesInFolder(Folder $folder, $start = 0, $maxNumberOfItems =\n \n         $rows = $this->getFileIndexRepository()->findByFolder($folder);\n \n-        $filters = $useFilters == true ? $this->fileAndFolderNameFilters : [];\n+        $filters = $useFilters == true ? $this->getFileAndFolderNameFilters() : [];\n         $fileIdentifiers = array_values($this->driver->getFilesInFolder($folder->getIdentifier(), $start, $maxNumberOfItems, $recursive, $filters, $sort, $sortRev));\n \n         $items = [];\n@@ -1619,7 +1633,7 @@ public function getFilesInFolder(Folder $folder, $start = 0, $maxNumberOfItems =\n      */\n     public function getFileIdentifiersInFolder($folderIdentifier, $useFilters = true, $recursive = false)\n     {\n-        $filters = $useFilters == true ? $this->fileAndFolderNameFilters : [];\n+        $filters = $useFilters == true ? $this->getFileAndFolderNameFilters() : [];\n         return $this->driver->getFilesInFolder($folderIdentifier, 0, 0, $recursive, $filters);\n     }\n \n@@ -1633,7 +1647,7 @@ public function getFileIdentifiersInFolder($folderIdentifier, $useFilters = true\n     public function countFilesInFolder(Folder $folder, $useFilters = true, $recursive = false)\n     {\n         $this->assureFolderReadPermission($folder);\n-        $filters = $useFilters ? $this->fileAndFolderNameFilters : [];\n+        $filters = $useFilters ? $this->getFileAndFolderNameFilters() : [];\n         return $this->driver->countFilesInFolder($folder->getIdentifier(), $recursive, $filters);\n     }\n \n@@ -1645,7 +1659,7 @@ public function countFilesInFolder(Folder $folder, $useFilters = true, $recursiv\n      */\n     public function getFolderIdentifiersInFolder($folderIdentifier, $useFilters = true, $recursive = false)\n     {\n-        $filters = $useFilters == true ? $this->fileAndFolderNameFilters : [];\n+        $filters = $useFilters == true ? $this->getFileAndFolderNameFilters() : [];\n         return $this->driver->getFoldersInFolder($folderIdentifier, 0, 0, $recursive, $filters);\n     }\n \n@@ -2417,7 +2431,7 @@ public function getFolderInFolder($folderName, Folder $parentFolder, $returnInac\n      */\n     public function getFoldersInFolder(Folder $folder, $start = 0, $maxNumberOfItems = 0, $useFilters = true, $recursive = false, $sort = '', $sortRev = false)\n     {\n-        $filters = $useFilters == true ? $this->fileAndFolderNameFilters : [];\n+        $filters = $useFilters == true ? $this->getFileAndFolderNameFilters() : [];\n \n         $folderIdentifiers = $this->driver->getFoldersInFolder($folder->getIdentifier(), $start, $maxNumberOfItems, $recursive, $filters, $sort, $sortRev);\n \n@@ -2428,6 +2442,7 @@ public function getFoldersInFolder(Folder $folder, $start = 0, $maxNumberOfItems\n                 unset($folderIdentifiers[$processingIdentifier]);\n             }\n         }\n+\n         $folders = [];\n         foreach ($folderIdentifiers as $folderIdentifier) {\n             $folders[$folderIdentifier] = $this->getFolder($folderIdentifier, true);\n@@ -2445,7 +2460,7 @@ public function getFoldersInFolder(Folder $folder, $start = 0, $maxNumberOfItems\n     public function countFoldersInFolder(Folder $folder, $useFilters = true, $recursive = false)\n     {\n         $this->assureFolderReadPermission($folder);\n-        $filters = $useFilters ? $this->fileAndFolderNameFilters : [];\n+        $filters = $useFilters ? $this->getFileAndFolderNameFilters() : [];\n         return $this->driver->countFoldersInFolder($folder->getIdentifier(), $recursive, $filters);\n     }\n "
        },
        {
          "filename": "typo3/sysext/core/Tests/Acceptance/Application/Impexp/UsersCest.php",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -52,7 +52,7 @@ public function _before(ApplicationTester $I): void\n     /**\n      * @throws \\Exception\n      */\n-    public function doNotShowImportInContextMenuForNonAdminUser(ApplicationTester $I, PageTree $pageTree): void\n+    public function doNotShowImportAndExportInContextMenuForNonAdminUser(ApplicationTester $I, PageTree $pageTree): void\n     {\n         $selectedPageTitle = 'Root';\n         $selectedPageIcon = '//*[text()=\\'' . $selectedPageTitle . '\\']/../*[contains(@class, \\'node-icon-container\\')]';\n@@ -65,7 +65,7 @@ public function doNotShowImportInContextMenuForNonAdminUser(ApplicationTester $I\n         $I->click($selectedPageIcon);\n         $this->selectInContextMenu($I, [$this->contextMenuMore]);\n         $I->waitForElementVisible('#contentMenu1', 5);\n-        $I->seeElement($this->contextMenuExport);\n+        $I->dontSeeElement($this->contextMenuExport);\n         $I->dontSeeElement($this->contextMenuImport);\n \n         $I->useExistingSession('admin');\n@@ -74,19 +74,19 @@ public function doNotShowImportInContextMenuForNonAdminUser(ApplicationTester $I\n     /**\n      * @throws \\Exception\n      */\n-    public function showImportInContextMenuForNonAdminUserIfFlagSet(ApplicationTester $I): void\n+    public function showImportExportInContextMenuForNonAdminUserIfFlagSet(ApplicationTester $I): void\n     {\n         $selectedPageTitle = 'Root';\n         $selectedPageIcon = '//*[text()=\\'' . $selectedPageTitle . '\\']/../*[contains(@class, \\'node-icon-container\\')]';\n \n-        $this->setUserTsConfig($I, 2, 'options.impexp.enableImportForNonAdminUser = 1');\n+        $this->setUserTsConfig($I, 2, \"options.impexp.enableImportForNonAdminUser = 1\\noptions.impexp.enableExportForNonAdminUser = 1\");\n         $I->useExistingSession('editor');\n \n         $I->click($selectedPageIcon);\n         $this->selectInContextMenu($I, [$this->contextMenuMore]);\n         $I->waitForElementVisible('#contentMenu1', 5);\n-        $I->seeElement($this->contextMenuExport);\n         $I->seeElement($this->contextMenuImport);\n+        $I->seeElement($this->contextMenuExport);\n \n         $I->useExistingSession('admin');\n     }"
        },
        {
          "filename": "typo3/sysext/core/Tests/Functional/Authentication/BackendUserAuthenticationTest.php",
          "status": "modified",
          "additions": 66,
          "deletions": 0,
          "patch": "@@ -147,4 +147,70 @@ public function mfaRequiredExceptionIsThrown(): void\n         // which should fail since the user in the fixture has MFA activated but not yet passed.\n         $this->setUpBackendUser(4);\n     }\n+\n+    public function isImportEnabledDataProvider(): array\n+    {\n+        return [\n+            'admin user' => [\n+                1,\n+                '',\n+                true,\n+            ],\n+            'editor user' => [\n+                2,\n+                '',\n+                false,\n+            ],\n+            'editor user - enableImportForNonAdminUser = 1' => [\n+                2,\n+                'options.impexp.enableImportForNonAdminUser = 1',\n+                true,\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @test\n+     * @dataProvider isImportEnabledDataProvider\n+     */\n+    public function isImportEnabledReturnsExpectedValues(int $userId, string $tsConfig, bool $expected): void\n+    {\n+        $GLOBALS['TYPO3_CONF_VARS']['BE']['defaultUserTSconfig'] = $tsConfig;\n+\n+        $subject = $this->setUpBackendUser($userId);\n+        self::assertEquals($expected, $subject->isImportEnabled());\n+    }\n+\n+    public function isExportEnabledDataProvider(): array\n+    {\n+        return [\n+            'admin user' => [\n+                1,\n+                '',\n+                true,\n+            ],\n+            'editor user' => [\n+                2,\n+                '',\n+                false,\n+            ],\n+            'editor user - enableExportForNonAdminUser = 1' => [\n+                2,\n+                'options.impexp.enableExportForNonAdminUser = 1',\n+                true,\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @test\n+     * @dataProvider isExportEnabledDataProvider\n+     */\n+    public function isExportEnabledReturnsExpectedValues(int $userId, string $tsConfig, bool $expected): void\n+    {\n+        $GLOBALS['TYPO3_CONF_VARS']['BE']['defaultUserTSconfig'] = $tsConfig;\n+\n+        $subject = $this->setUpBackendUser($userId);\n+        self::assertEquals($expected, $subject->isExportEnabled());\n+    }\n }"
        },
        {
          "filename": "typo3/sysext/impexp/Classes/ContextMenu/ItemProvider.php",
          "status": "modified",
          "additions": 2,
          "deletions": 11,
          "patch": "@@ -97,10 +97,10 @@ protected function canRender(string $itemName, string $type): bool\n         $canRender = false;\n         switch ($itemName) {\n             case 'exportT3d':\n-                $canRender = true;\n+                $canRender = $this->backendUser->isExportEnabled();\n                 break;\n             case 'importT3d':\n-                $canRender = $this->table === 'pages' && $this->isImportEnabled();\n+                $canRender = $this->table === 'pages' && $this->backendUser->isImportEnabled();\n                 break;\n         }\n         return $canRender;\n@@ -131,13 +131,4 @@ protected function getAdditionalAttributes(string $itemName): array\n \n         return $attributes;\n     }\n-\n-    /**\n-     * Check if import functionality is available for current user\n-     */\n-    protected function isImportEnabled(): bool\n-    {\n-        return $this->backendUser->isAdmin()\n-            || (bool)($this->backendUser->getTSConfig()['options.']['impexp.']['enableImportForNonAdminUser'] ?? false);\n-    }\n }"
        },
        {
          "filename": "typo3/sysext/impexp/Classes/Controller/ExportController.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -81,6 +81,14 @@ public function __construct(\n \n     public function handleRequest(ServerRequestInterface $request): ResponseInterface\n     {\n+        if ($this->getBackendUser()->isExportEnabled() === false) {\n+            throw new \\RuntimeException(\n+                'Export module is disabled for non admin users and '\n+                . 'userTsConfig options.impexp.enableExportForNonAdminUser is not enabled.',\n+                1636901978\n+            );\n+        }\n+\n         $backendUser = $this->getBackendUser();\n         $queryParams = $request->getQueryParams();\n         $parsedBody = $request->getParsedBody();"
        },
        {
          "filename": "typo3/sysext/impexp/Classes/Controller/ImportController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 10,
          "patch": "@@ -59,7 +59,7 @@ public function __construct(\n \n     public function handleRequest(ServerRequestInterface $request): ResponseInterface\n     {\n-        if (!$this->isImportEnabled()) {\n+        if (!$this->getBackendUser()->isImportEnabled()) {\n             throw new \\RuntimeException(\n                 'Import module is disabled for non admin users and userTsConfig options.impexp.enableImportForNonAdminUser is not enabled.',\n                 1464435459\n@@ -142,15 +142,6 @@ protected function addDocHeaderPreviewButton(ModuleTemplate $view, int $pageUid)\n         $buttonBar->addButton($viewButton);\n     }\n \n-    /**\n-     * Check if import functionality is available for current user.\n-     */\n-    protected function isImportEnabled(): bool\n-    {\n-        $backendUser = $this->getBackendUser();\n-        return $backendUser->isAdmin() || ($backendUser->getTSConfig()['options.']['impexp.']['enableImportForNonAdminUser'] ?? false);\n-    }\n-\n     protected function handleFileUpload(ServerRequestInterface $request): ?File\n     {\n         $parsedBody = $request->getParsedBody() ?? [];"
        },
        {
          "filename": "typo3/sysext/reports/Classes/Report/Status/SecurityStatus.php",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -55,6 +55,7 @@ public function getStatus(ServerRequestInterface $request = null): array\n             'fileDenyPattern' => $this->getFileDenyPatternStatus(),\n             'htaccessUpload' => $this->getHtaccessUploadStatus(),\n             'exceptionHandler' => $this->getExceptionHandlerStatus(),\n+            'exportedFiles' => $this->getExportedFilesStatus(),\n         ];\n \n         if ($request !== null) {\n@@ -265,6 +266,51 @@ protected function getExceptionHandlerStatus(): ReportStatus\n         return GeneralUtility::makeInstance(ReportStatus::class, $this->getLanguageService()->getLL('status_exceptionHandler'), $value, $message, $severity);\n     }\n \n+    protected function getExportedFilesStatus(): ReportStatus\n+    {\n+        $value = $this->getLanguageService()->getLL('status_ok');\n+        $message = '';\n+        $severity = ReportStatus::OK;\n+\n+        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('sys_file');\n+        $exportedFiles = $queryBuilder\n+            ->select('storage', 'identifier')\n+            ->from('sys_file')\n+            ->where(\n+                $queryBuilder->expr()->like(\n+                    'identifier',\n+                    $queryBuilder->createNamedParameter('%/_temp_/importexport/%')\n+                ),\n+                $queryBuilder->expr()->or(\n+                    $queryBuilder->expr()->like(\n+                        'identifier',\n+                        $queryBuilder->createNamedParameter('%.xml')\n+                    ),\n+                    $queryBuilder->expr()->like(\n+                        'identifier',\n+                        $queryBuilder->createNamedParameter('%.t3d')\n+                    )\n+                ),\n+            )\n+            ->executeQuery()\n+            ->fetchAllAssociative();\n+\n+        if (count($exportedFiles) > 0) {\n+            $files = [];\n+            foreach ($exportedFiles as $exportedFile) {\n+                $files[] = '<li>' . htmlspecialchars($exportedFile['storage'] . ':' . $exportedFile['identifier']) . '</li>';\n+            }\n+\n+            $value = $this->getLanguageService()->getLL('status_insecure');\n+            $severity = ReportStatus::WARNING;\n+            $message = $this->getLanguageService()->getLL('status_exportedFiles_warningMessage');\n+            $message .= '<ul>' . implode(PHP_EOL, $files) . '</ul>';\n+            $message .= $this->getLanguageService()->getLL('status_exportedFiles_warningRecommendation');\n+        }\n+\n+        return GeneralUtility::makeInstance(ReportStatus::class, $this->getLanguageService()->getLL('status_exportedFiles'), $value, $message, $severity);\n+    }\n+\n     protected function getLanguageService(): LanguageService\n     {\n         return $GLOBALS['LANG'];"
        },
        {
          "filename": "typo3/sysext/reports/Resources/Private/Language/locallang_reports.xlf",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -156,12 +156,21 @@\n \t\t\t<trans-unit id=\"status_exceptionHandler\" resname=\"status_exceptionHandler\">\n \t\t\t\t<source>Exception Handler / Error Reporting</source>\n \t\t\t</trans-unit>\n+\t\t\t<trans-unit id=\"status_exportedFiles\" resname=\"status_exportedFiles\">\n+\t\t\t\t<source>XML/T3D export files</source>\n+\t\t\t</trans-unit>\n \t\t\t<trans-unit id=\"status_exceptionHandler_warningMessage\" resname=\"status_exceptionHandler_warningMessage\">\n \t\t\t\t<source>Display Errors is set to 1 - errors will be displayed with the DebugExceptionHandler including stack traces.</source>\n \t\t\t</trans-unit>\n \t\t\t<trans-unit id=\"status_exceptionHandler_errorMessage\" resname=\"status_exceptionHandler_errorMessage\">\n \t\t\t\t<source>Debug Exception Handler enabled in Production Context - will show full error messages including stack traces.</source>\n \t\t\t</trans-unit>\n+\t\t\t<trans-unit id=\"status_exportedFiles_warningMessage\" resname=\"status_exportedFiles_warningMessage\">\n+\t\t\t\t<source>The following exported files where found:</source>\n+\t\t\t</trans-unit>\n+\t\t\t<trans-unit id=\"status_exportedFiles_warningRecommendation\" resname=\"status_exportedFiles_warningRecommendation\">\n+\t\t\t\t<source>It is recommended to delete exported files to avoid possible disclosure of exported data to backend users with lower/different access rights than user(s) who originally created the export(s).</source>\n+\t\t\t</trans-unit>\n \t\t\t<trans-unit id=\"status_installTool\" resname=\"status_installTool\">\n \t\t\t\t<source>Install Tool</source>\n \t\t\t</trans-unit>"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 9,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "03027a9cb4c558284289da7007c225aa42a72619",
            "date": "2024-07-04T09:57:38Z",
            "author_login": "mbrodala"
          },
          {
            "sha": "705b5bf51516821047b47ff0d4a1d643f35ed594",
            "date": "2025-01-13T11:53:46Z",
            "author_login": "lolli42"
          },
          {
            "sha": "c2460f9507bcb11bbe22765f50501f0177c9eb23",
            "date": "2024-08-28T09:13:49Z",
            "author_login": "wouter90"
          },
          {
            "sha": "1bd1923ef7fb3290e9e8303a2a30bc34c1dc83f6",
            "date": "2025-01-14T13:29:37Z",
            "author_login": "lolli42"
          },
          {
            "sha": "18d54b5c8fdf9c1363e80ed293076e7301f197c2",
            "date": "2025-01-14T09:47:45Z",
            "author_login": "benjaminkott"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "TYPO3 is an open source web content management system. Prior to versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11, the export functionality fails to limit the result set to allowed columns of a particular database table. This way, authenticated users can export internal details of database tables they already have access to. TYPO3 versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, 11.5.11 fix the problem described above. In order to address this issue, access to mentioned export functionality is completely denied for regular backend users.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-14T21:15:15.987",
    "last_modified": "2024-11-21T07:03:46.810",
    "fix_date": "2022-06-14T07:12:56Z"
  },
  "references": [
    {
      "url": "https://github.com/TYPO3/typo3/commit/7447a3d1283017d2ee08737a7972c720001a93e9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-8gmv-9hwg-w89g",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2022-001",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/commit/7447a3d1283017d2ee08737a7972c720001a93e9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-8gmv-9hwg-w89g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2022-001",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.443272",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "typo3",
    "owner": "TYPO3",
    "created_at": "2011-03-02T10:02:23Z",
    "updated_at": "2025-01-14T11:43:28Z",
    "pushed_at": "2025-01-14T12:27:55Z",
    "size": 598075,
    "stars": 1068,
    "forks": 674,
    "open_issues": 5,
    "watchers": 1068,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 34380148,
      "TypeScript": 2495477,
      "HTML": 1939183,
      "CSS": 573865,
      "SCSS": 460567,
      "JavaScript": 414810,
      "Shell": 94213,
      "XSLT": 6781,
      "Batchfile": 412
    },
    "commit_activity": {
      "total_commits_last_year": 2075,
      "avg_commits_per_week": 39.90384615384615,
      "days_active_last_year": 334
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:14:13.729873"
  }
}