{
  "cve_id": "CVE-2022-31050",
  "github_data": {
    "repository": "TYPO3/typo3",
    "fix_commit": "592387972912290c135ebecc91768a67f83a3a4d",
    "related_commits": [
      "592387972912290c135ebecc91768a67f83a3a4d",
      "592387972912290c135ebecc91768a67f83a3a4d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "592387972912290c135ebecc91768a67f83a3a4d",
      "commit_date": "2022-06-14T07:18:38Z",
      "author": {
        "login": "ohader",
        "type": "User",
        "stats": {
          "total_commits": 1841,
          "average_weekly_commits": 1.6526032315978456,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 514
        }
      },
      "commit_message": {
        "title": "[SECURITY] Synchronize admin tools session with backend user session",
        "length": 677,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 157,
        "additions": 153,
        "deletions": 4
      },
      "files": [
        {
          "filename": "typo3/sysext/install/Classes/Controller/BackendModuleController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -175,7 +175,8 @@ protected function getBackendUserConfirmationUri(array $parameters): Uri\n      */\n     protected function setAuthorizedAndRedirect(string $controller): ResponseInterface\n     {\n-        $this->getSessionService()->setAuthorizedBackendSession();\n+        $userSession = $this->getBackendUser()->getSession();\n+        $this->getSessionService()->setAuthorizedBackendSession($userSession);\n         $redirectLocation = PathUtility::getAbsoluteWebPath('install.php?install[controller]=' . $controller . '&install[context]=backend');\n         return new RedirectResponse($redirectLocation, 303);\n     }"
        },
        {
          "filename": "typo3/sysext/install/Classes/Middleware/Maintenance.php",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -143,6 +143,21 @@ public function process(ServerRequestInterface $request, RequestHandlerInterface\n \n         // session related actions\n         $session = new SessionService();\n+\n+        // the backend user has an active session but the admin / maintainer\n+        // rights have been revoked or the user was disabled or deleted in the meantime\n+        if ($session->isAuthorizedBackendUserSession() && !$session->hasActiveBackendUserRoleAndSession()) {\n+            // log out the user and destroy the session\n+            $session->resetSession();\n+            $session->destroySession();\n+            $formProtection = FormProtectionFactory::get(\n+                InstallToolFormProtection::class\n+            );\n+            $formProtection->clean();\n+\n+            return new HtmlResponse('', 403);\n+        }\n+\n         if ($actionName === 'preAccessCheck') {\n             $response = new JsonResponse([\n                 'installToolLocked' => !$this->checkEnableInstallToolFile(),"
        },
        {
          "filename": "typo3/sysext/install/Classes/Service/SessionService.php",
          "status": "modified",
          "additions": 128,
          "deletions": 2,
          "patch": "@@ -17,8 +17,15 @@\n \n use Symfony\\Component\\HttpFoundation\\Cookie;\n use TYPO3\\CMS\\Core\\Core\\Environment;\n+use TYPO3\\CMS\\Core\\Database\\ConnectionPool;\n+use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DefaultRestrictionContainer;\n+use TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\RootLevelRestriction;\n use TYPO3\\CMS\\Core\\Messaging\\FlashMessage;\n use TYPO3\\CMS\\Core\\Security\\BlockSerializationTrait;\n+use TYPO3\\CMS\\Core\\Session\\Backend\\HashableSessionBackendInterface;\n+use TYPO3\\CMS\\Core\\Session\\Backend\\SessionBackendInterface;\n+use TYPO3\\CMS\\Core\\Session\\SessionManager;\n+use TYPO3\\CMS\\Core\\Session\\UserSession;\n use TYPO3\\CMS\\Core\\SingletonInterface;\n use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n use TYPO3\\CMS\\Install\\Exception;\n@@ -188,14 +195,28 @@ public function setAuthorized()\n     /**\n      * Marks this session as an \"authorized by backend user\" one.\n      * This is called by BackendModuleController from backend context.\n+     *\n+     * @param UserSession $userSession session of the current backend user\n      */\n-    public function setAuthorizedBackendSession()\n+    public function setAuthorizedBackendSession(UserSession $userSession)\n     {\n+        $nonce = bin2hex(random_bytes(20));\n+        $sessionBackend = $this->getBackendUserSessionBackend();\n+        // use hash mechanism of session backend, or pass plain value through generic hmac\n+        $sessionHmac = $sessionBackend instanceof HashableSessionBackendInterface\n+            ? $sessionBackend->hash($userSession->getIdentifier())\n+            : hash_hmac('sha256', $userSession->getIdentifier(), $nonce);\n+\n         $_SESSION['authorized'] = true;\n         $_SESSION['lastSessionId'] = time();\n         $_SESSION['tstamp'] = time();\n         $_SESSION['expires'] = time() + $this->expireTimeInMinutes * 60;\n         $_SESSION['isBackendSession'] = true;\n+        $_SESSION['backendUserSession'] = [\n+            'nonce' => $nonce,\n+            'userId' => $userSession->getUserId(),\n+            'hmac' => $sessionHmac,\n+        ];\n         // Renew the session id to avoid session fixation\n         $this->renewSession();\n     }\n@@ -222,7 +243,7 @@ public function isAuthorized()\n      *\n      * @return bool TRUE if this session has been authorized before and initialized by a backend system maintainer\n      */\n-    public function isAuthorizedBackendUserSession()\n+    public function isAuthorizedBackendUserSession(): bool\n     {\n         if (!$this->hasSessionCookie()) {\n             return false;\n@@ -234,6 +255,49 @@ public function isAuthorizedBackendUserSession()\n         return !$this->isExpired();\n     }\n \n+    /**\n+     * Evaluates whether the backend user that initiated this admin tool session,\n+     * has an active role (is still admin & system maintainer) and has an active backend user interface session.\n+     *\n+     * @return bool whether the backend user has an active role and backend user interface session\n+     */\n+    public function hasActiveBackendUserRoleAndSession(): bool\n+    {\n+        // @see \\TYPO3\\CMS\\Install\\Controller\\BackendModuleController::setAuthorizedAndRedirect()\n+        $backendUserSession = $this->getBackendUserSession();\n+        $backendUserRecord = $this->getBackendUserRecord($backendUserSession['userId']);\n+        if ($backendUserRecord === null || empty($backendUserRecord['uid'])) {\n+            return false;\n+        }\n+        $isAdmin = (($backendUserRecord['admin'] ?? 0) & 1) === 1;\n+        $systemMaintainers = array_map('intval', $GLOBALS['TYPO3_CONF_VARS']['SYS']['systemMaintainers'] ?? []);\n+        // stop here, in case the current admin tool session does not belong to a backend user having admin & maintainer privileges\n+        if (!$isAdmin || !in_array((int)$backendUserRecord['uid'], $systemMaintainers, true)) {\n+            return false;\n+        }\n+\n+        $sessionBackend = $this->getBackendUserSessionBackend();\n+        foreach ($sessionBackend->getAll() as $sessionRecord) {\n+            $sessionUserId = (int)($sessionRecord['ses_userid'] ?? 0);\n+            // skip, in case backend user id does not match\n+            if ($backendUserSession['userId'] !== $sessionUserId) {\n+                continue;\n+            }\n+            $sessionId = (string)($sessionRecord['ses_id'] ?? '');\n+            // use persisted hashed `ses_id` directly, or pass through hmac for plain values\n+            $sessionHmac = $sessionBackend instanceof HashableSessionBackendInterface\n+                ? $sessionId\n+                : hash_hmac('sha256', $sessionId, $backendUserSession['nonce']);\n+            // skip, in case backend user session id does not match\n+            if ($backendUserSession['hmac'] !== $sessionHmac) {\n+                continue;\n+            }\n+            // backend user id and session id matched correctly\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     /**\n      * Check if our session is expired.\n      * Useful only right after a FALSE \"isAuthorized\" to see if this is the\n@@ -299,6 +363,20 @@ public function getMessagesAndFlush()\n         return $messages;\n     }\n \n+    /**\n+     * @return array{userId: int, nonce: string, hmac: string} backend user session references\n+     */\n+    public function getBackendUserSession(): array\n+    {\n+        if (empty($_SESSION['backendUserSession'])) {\n+            throw new Exception(\n+                'The backend user session is only available if invoked via the backend user interface.',\n+                1624879295\n+            );\n+        }\n+        return $_SESSION['backendUserSession'];\n+    }\n+\n     /**\n      * Check if php session.auto_start is enabled\n      *\n@@ -323,4 +401,52 @@ protected function getIniValueBoolean($configOption)\n             [FILTER_REQUIRE_SCALAR, FILTER_NULL_ON_FAILURE]\n         );\n     }\n+\n+    /**\n+     * Fetching a user record with uid=$uid.\n+     * Functionally similar to TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication::setBeUserByUid().\n+     *\n+     * @param int $uid The UID of the backend user\n+     * @return array<string, int>|null The backend user record or NULL\n+     */\n+    protected function getBackendUserRecord(int $uid): ?array\n+    {\n+        $restrictionContainer = GeneralUtility::makeInstance(DefaultRestrictionContainer::class);\n+        $restrictionContainer->add(GeneralUtility::makeInstance(RootLevelRestriction::class, ['be_users']));\n+\n+        $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('be_users');\n+        $queryBuilder->setRestrictions($restrictionContainer);\n+        $queryBuilder->select('uid', 'admin')\n+            ->from('be_users')\n+            ->where($queryBuilder->expr()->eq('uid', $queryBuilder->createNamedParameter($uid, \\PDO::PARAM_INT)));\n+\n+        $resetBeUsersTca = false;\n+        if (!isset($GLOBALS['TCA']['be_users'])) {\n+            // The admin tool intentionally does not load any TCA information at this time.\n+            // The database restictions, needs the enablecolumns TCA information\n+            // for 'be_users' to load the user correctly.\n+            // That is why this part of the TCA ($GLOBALS['TCA']['be_users']['ctrl']['enablecolumns'])\n+            // is simulated.\n+            // The simulation state will be removed later to avoid unexpected side effects.\n+            $GLOBALS['TCA']['be_users']['ctrl']['enablecolumns'] = [\n+                'rootLevel' => 1,\n+                'deleted' => 'deleted',\n+                'disabled' => 'disable',\n+                'starttime' => 'starttime',\n+                'endtime' => 'endtime',\n+            ];\n+            $resetBeUsersTca = true;\n+        }\n+        $result = $queryBuilder->executeQuery()->fetchAssociative();\n+        if ($resetBeUsersTca) {\n+            unset($GLOBALS['TCA']['be_users']);\n+        }\n+\n+        return is_array($result) ? $result : null;\n+    }\n+\n+    protected function getBackendUserSessionBackend(): SessionBackendInterface\n+    {\n+        return GeneralUtility::makeInstance(SessionManager::class)->getSessionBackend('BE');\n+    }\n }"
        },
        {
          "filename": "typo3/sysext/install/Tests/Functional/Controller/BackendModuleControllerTest.php",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -19,6 +19,7 @@\n \n use TYPO3\\CMS\\Backend\\Routing\\UriBuilder;\n use TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory;\n+use TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication;\n use TYPO3\\CMS\\Core\\Core\\ApplicationContext;\n use TYPO3\\CMS\\Core\\Core\\Environment;\n use TYPO3\\CMS\\Install\\Controller\\BackendModuleController;\n@@ -84,7 +85,13 @@ public function environmentContextIsRespectedTest(string $module): void\n             Environment::isWindows() ? 'WINDOWS' : 'UNIX'\n         );\n \n-        // Authorized redirect to the install tool is performed, sudo mode is not required\n+        // Authorized redirect to the admin tool is performed\n+        // sudo mode is not required (due to development context)\n+        $GLOBALS['BE_USER'] = new BackendUserAuthentication();\n+        // using anonymous user session, which is fine for this test case\n+        $GLOBALS['BE_USER']->initializeUserSessionManager();\n+        $GLOBALS['BE_USER']->user = ['uid' => 1];\n+\n         $response = $subject->{$action}();\n         self::assertEquals(303, $response->getStatusCode());\n         self::assertNotEmpty($response->getHeader('location'));"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ff77e4fc77e6f94cce92301c4a48276dad924121",
            "date": "2025-01-20T13:29:31Z",
            "author_login": "alexanderschnitzler"
          },
          {
            "sha": "5bc80824b8df44b41358321cdcda49c521894396",
            "date": "2025-01-23T11:51:37Z",
            "author_login": "andreaskienast"
          },
          {
            "sha": "cae183517c0278f33119076a80fcae606c824df5",
            "date": "2025-01-24T13:06:15Z",
            "author_login": "fe-hicking"
          },
          {
            "sha": "1e6844171f4c51b33cb85634bd30c3ba4787e2a1",
            "date": "2025-01-22T15:15:24Z",
            "author_login": "andreaskienast"
          },
          {
            "sha": "baa3371c43944a233ae3e286cc5556f2ce72cb4b",
            "date": "2024-06-11T11:20:54Z",
            "author_login": "cweiske"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-613",
    "description": "TYPO3 is an open source web content management system. Prior to versions 9.5.34 ELTS, 10.4.29, and 11.5.11, Admin Tool sessions initiated via the TYPO3 backend user interface had not been revoked even if the corresponding user account was degraded to lower permissions or disabled completely. This way, sessions in the admin tool theoretically could have been prolonged without any limit. TYPO3 versions 9.5.34 ELTS, 10.4.29, and 11.5.11 contain a fix for the problem.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-14T21:15:16.247",
    "last_modified": "2024-11-21T07:03:47.317",
    "fix_date": "2022-06-14T07:18:38Z"
  },
  "references": [
    {
      "url": "https://github.com/TYPO3/typo3/commit/592387972912290c135ebecc91768a67f83a3a4d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-wwjw-r3gj-39fq",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2022-005",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/commit/592387972912290c135ebecc91768a67f83a3a4d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-wwjw-r3gj-39fq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2022-005",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.443871",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "typo3",
    "owner": "TYPO3",
    "created_at": "2011-03-02T10:02:23Z",
    "updated_at": "2025-01-26T02:06:22Z",
    "pushed_at": "2025-01-25T18:54:20Z",
    "size": 598562,
    "stars": 1073,
    "forks": 674,
    "open_issues": 5,
    "watchers": 1073,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 34406950,
      "TypeScript": 2498657,
      "HTML": 1956716,
      "CSS": 574596,
      "SCSS": 465521,
      "JavaScript": 415265,
      "Shell": 94213,
      "XSLT": 6781,
      "Batchfile": 412
    },
    "commit_activity": {
      "total_commits_last_year": 2004,
      "avg_commits_per_week": 38.53846153846154,
      "days_active_last_year": 329
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T08:19:34.176956"
  }
}