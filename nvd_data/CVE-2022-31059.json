{
  "cve_id": "CVE-2022-31059",
  "github_data": {
    "repository": "discourse/discourse-calendar",
    "fix_commit": "2719b9e81994e961bf8c4e12b4556dc9777dd62f",
    "related_commits": [
      "2719b9e81994e961bf8c4e12b4556dc9777dd62f",
      "2719b9e81994e961bf8c4e12b4556dc9777dd62f"
    ],
    "patch_url": "https://github.com/discourse/discourse-calendar/commit/2719b9e81994e961bf8c4e12b4556dc9777dd62f.patch",
    "fix_commit_details": {
      "sha": "2719b9e81994e961bf8c4e12b4556dc9777dd62f",
      "commit_date": "2022-06-13T17:13:56Z",
      "author": {
        "login": "oblakeerickson",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SECURITY: correctly escape event name (#280)",
        "length": 44,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 92,
        "additions": 86,
        "deletions": 6
      },
      "files": [
        {
          "filename": "assets/javascripts/discourse/widgets/discourse-post-event.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -10,6 +10,7 @@ import { createWidget } from \"discourse/widgets/widget\";\n import { routeAction } from \"discourse/helpers/route-action\";\n import { buildParams, replaceRaw } from \"../../lib/raw-event-helper\";\n import bootbox from \"bootbox\";\n+import { escapeExpression } from \"discourse/lib/utilities\";\n \n export default createWidget(\"discourse-post-event\", {\n   tagName: \"div.discourse-post-event-widget\",\n@@ -160,7 +161,7 @@ export default createWidget(\"discourse-post-event\", {\n       startsAtMonth: moment(eventModel.starts_at).format(\"MMM\"),\n       startsAtDay: moment(eventModel.starts_at).format(\"D\"),\n       eventName: emojiUnescape(\n-        eventModel.name ||\n+        escapeExpression(eventModel.name) ||\n           this._cleanTopicTitle(\n             eventModel.post.topic.title,\n             eventModel.starts_at\n@@ -257,6 +258,7 @@ export default createWidget(\"discourse-post-event\", {\n   `,\n \n   _cleanTopicTitle(topicTitle, startsAt) {\n+    topicTitle = escapeExpression(topicTitle);\n     const cleaned = cleanTitle(topicTitle, startsAt);\n     if (cleaned) {\n       return topicTitle.replace(cleaned, \"\");"
        },
        {
          "filename": "assets/javascripts/discourse/widgets/event-invitation-notification-item.js",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1,7 +1,7 @@\n import I18n from \"I18n\";\n import { createWidgetFrom } from \"discourse/widgets/widget\";\n import { DefaultNotificationItem } from \"discourse/widgets/default-notification-item\";\n-import { formatUsername } from \"discourse/lib/utilities\";\n+import { escapeExpression, formatUsername } from \"discourse/lib/utilities\";\n import { iconNode } from \"discourse-common/lib/icon-library\";\n \n createWidgetFrom(\n@@ -16,7 +16,9 @@ createWidgetFrom(\n       const username = `<span>${formatUsername(data.display_username)}</span>`;\n       let description;\n       if (data.topic_title) {\n-        description = `<span data-topic-id=\"${this.attrs.topic_id}\">${data.topic_title}</span>`;\n+        description = `<span data-topic-id=\"${\n+          this.attrs.topic_id\n+        }\">${escapeExpression(data.topic_title)}</span>`;\n       } else {\n         description = this.description(data);\n       }"
        },
        {
          "filename": "assets/javascripts/discourse/widgets/event-reminder-notification-item.js",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1,7 +1,7 @@\n import I18n from \"I18n\";\n import { createWidgetFrom } from \"discourse/widgets/widget\";\n import { DefaultNotificationItem } from \"discourse/widgets/default-notification-item\";\n-import { formatUsername } from \"discourse/lib/utilities\";\n+import { escapeExpression, formatUsername } from \"discourse/lib/utilities\";\n import { iconNode } from \"discourse-common/lib/icon-library\";\n \n createWidgetFrom(DefaultNotificationItem, \"event-reminder-notification-item\", {\n@@ -14,7 +14,9 @@ createWidgetFrom(DefaultNotificationItem, \"event-reminder-notification-item\", {\n \n     let description;\n     if (data.topic_title) {\n-      description = `<span data-topic-id=\"${this.attrs.topic_id}\">${data.topic_title}</span>`;\n+      description = `<span data-topic-id=\"${\n+        this.attrs.topic_id\n+      }\">${escapeExpression(data.topic_title)}</span>`;\n     } else {\n       description = this.description(data);\n     }"
        },
        {
          "filename": "db/post_migrate/20220613073844_unescape_event_name.rb",
          "status": "added",
          "additions": 65,
          "deletions": 0,
          "patch": "@@ -0,0 +1,65 @@\n+# frozen_string_literal: true\n+\n+class UnescapeEventName < ActiveRecord::Migration[7.0]\n+  disable_ddl_transaction!\n+\n+  def up\n+    # event notifications\n+    start = 1\n+    limit = DB.query_single(\"SELECT MAX(id) FROM notifications WHERE notification_type IN (27, 28)\").first.to_i\n+\n+    notifications_query = <<~SQL\n+      SELECT id, data\n+      FROM notifications\n+      WHERE\n+        id >= :start AND\n+        notification_type IN (27, 28) AND\n+        data::json ->> 'topic_title' LIKE '%&%'\n+      ORDER BY id ASC\n+      LIMIT 1000\n+    SQL\n+    while true\n+      if start > limit\n+        break\n+      end\n+      max_seen = -1\n+      DB.query(notifications_query, start: start).each do |record|\n+        id = record.id\n+        if id > max_seen\n+          max_seen = id\n+        end\n+        data = JSON.parse(record.data)\n+        unescaped = CGI.unescapeHTML(data[\"topic_title\"])\n+        next if unescaped == data[\"topic_title\"]\n+        data[\"topic_title\"] = unescaped\n+        DB.exec(<<~SQL, data: data.to_json, id: id)\n+          UPDATE notifications SET data = :data WHERE id = :id\n+        SQL\n+      end\n+      start += 1000\n+      if max_seen > start\n+        start = max_seen + 1\n+      end\n+    end\n+\n+    # event names\n+    events_query = <<~SQL\n+      SELECT id, name\n+      FROM discourse_post_event_events\n+      WHERE name LIKE '%&%'\n+      ORDER BY id ASC\n+    SQL\n+\n+    DB.query(events_query).each do |event|\n+      unescaped_name = CGI.unescapeHTML(event.name)\n+      next if unescaped_name == event.name\n+      DB.exec(<<~SQL, unescaped_name: unescaped_name, id: event.id)\n+        UPDATE discourse_post_event_events SET name = :unescaped_name WHERE id = :id\n+      SQL\n+    end\n+  end\n+\n+  def down\n+    raise ActiveRecord::IrreversibleMigration\n+  end\n+end"
        },
        {
          "filename": "lib/discourse_post_event/event_parser.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -34,7 +34,11 @@ def self.extract_events(post)\n \n           if value && valid_options.include?(name)\n             event ||= {}\n-            event[name.sub('data-', '').to_sym] = CGI.escapeHTML(value)\n+            event[name.sub('data-', '').to_sym] = if name == \"data-name\"\n+              value\n+            else\n+              CGI.escapeHTML(value)\n+            end\n           end\n \n           valid_custom_fields.each do |valid_custom_field|"
        },
        {
          "filename": "spec/lib/discourse_post_event/event_parser_spec.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -80,6 +80,11 @@ def build_post(user, raw)\n     expect(events).to eq([])\n   end\n \n+  it 'doesn\u2019t escape event name' do\n+    events = subject.extract_events(build_post(user, '[event start=\"foo\" name=\"bar <script> baz\"]\\n[/event]'))\n+    expect(events[0][:name]).to eq(\"bar <script> baz\")\n+  end\n+\n   context 'with custom fields' do\n     before do\n       SiteSetting.discourse_post_event_allowed_custom_fields = 'foo-bar|bar'"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "76d8b9a6022b5353f7849e4d329db6df52f56546",
            "date": "2025-01-08T17:31:45Z",
            "author_login": "renato"
          },
          {
            "sha": "3c833c99e32aab9ac708d92617b6b740681ab5ba",
            "date": "2025-01-08T11:23:24Z",
            "author_login": "renato"
          },
          {
            "sha": "764fd67b5ef92f356e977e4c61b27150b138b9c5",
            "date": "2025-01-06T09:00:32Z",
            "author_login": "tgxworld"
          },
          {
            "sha": "2a1bc44f961f014d9975bffa5a7444e49b382bda",
            "date": "2025-01-03T13:01:54Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "73502dd180022de1c4a46ab5a846b6bd53c8205b",
            "date": "2025-01-03T07:42:41Z",
            "author_login": "arpitjalan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "Discourse Calendar is a calendar plugin for Discourse, an open-source messaging app. Prior to version 1.0.1, parsing and rendering of Event names can be susceptible to cross-site scripting (XSS) attacks. This vulnerability only affects sites which have modified or disabled Discourse\u2019s default Content Security Policy. This issue is patched in version 1.0.1 of the Discourse Calendar plugin. As a workaround, ensure that the Content Security Policy is enabled, and has not been modified in a way which would make it more vulnerable to XSS attacks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-14T20:15:07.847",
    "last_modified": "2024-11-21T07:03:48.520",
    "fix_date": "2022-06-13T17:13:56Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse-calendar/commit/2719b9e81994e961bf8c4e12b4556dc9777dd62f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/pull/280",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/security/advisories/GHSA-c783-x9vm-xxp5",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/commit/2719b9e81994e961bf8c4e12b4556dc9777dd62f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/pull/280",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/security/advisories/GHSA-c783-x9vm-xxp5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.442895",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse-calendar",
    "owner": "discourse",
    "created_at": "2018-09-17T14:48:07Z",
    "updated_at": "2025-01-08T17:31:49Z",
    "pushed_at": "2025-01-08T17:31:47Z",
    "size": 2949,
    "stars": 64,
    "forks": 54,
    "open_issues": 6,
    "watchers": 64,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 339295,
      "JavaScript": 219324,
      "SCSS": 29785,
      "Handlebars": 16271
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:26:54.925307"
  }
}