{
  "cve_id": "CVE-2022-31071",
  "github_data": {
    "repository": "octokit/octopoller.rb",
    "fix_commit": "abed2b8d05abe2cc3eb6bdfb34e53d465e7c7874",
    "related_commits": [
      "abed2b8d05abe2cc3eb6bdfb34e53d465e7c7874",
      "abed2b8d05abe2cc3eb6bdfb34e53d465e7c7874"
    ],
    "patch_url": "https://github.com/octokit/octopoller.rb/commit/abed2b8d05abe2cc3eb6bdfb34e53d465e7c7874.patch",
    "fix_commit_details": {
      "sha": "abed2b8d05abe2cc3eb6bdfb34e53d465e7c7874",
      "commit_date": "2022-06-15T20:03:32Z",
      "author": {
        "login": "nickfloyd",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #25 from octokit/updates-release-steps-checks",
        "length": 122,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 129,
        "additions": 112,
        "deletions": 17
      },
      "files": [
        {
          "filename": "RELEASE.md",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -2,14 +2,17 @@\n \n 1. Create a list of all the changes since the prior release\n     1. Compare the previous release to `master` using `https://github.com/octokit/octopoller.rb/compare/`v1.3.3.7...master` (assuming that the last release was `v1.3.3.7`)\n-1. Ensure there are no breaking changes _(if there are breaking changes you'll need to create a release branch without those changes or bump the major version)_\n-1. Update the version\n+2. Ensure there are no breaking changes _(if there are breaking changes you'll need to create a release branch without those changes or bump the major version)_\n+3. Update the version\n     1. Checkout `master`\n-    1. Update the constant in `lib/octopoller/version.rb` (when `bundle` is executed the version in the `Gemfile.lock` will be updated)\n-    1. Run `bin/setup` so that `Gemfile.lock` will be updated with the new version\n-    1. Commit and push directly to `master`\n-1. Run the `script/release` script to cut a release\n-1. Draft a new release at <https://github.com/octokit/octopoller.rb/releases/new> containing the changelog from step 1\n+    2. Update the constant in `lib/octopoller/version.rb` (when `bundle` is executed the version in the `Gemfile.lock` will be updated)\n+    3. Run `bin/setup` so that `Gemfile.lock` will be updated with the new version\n+    4. Commit and push directly to `master`\n+5. (Optional) Run `script/release` with no parameters to execute a dry run of a release\n+6. Run the `script/release -r` script to cut a release (this will also run `script/validate` to perform the permission check)\n+7. Draft a new release at <https://github.com/octokit/octopoller.rb/releases/new> containing the changelog from step 1\n+\n+----\n \n ## Prerequisites\n "
        },
        {
          "filename": "script/package",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -4,4 +4,15 @@\n \n mkdir -p pkg\n gem build *.gemspec\n-mv *.gem pkg\n+\n+./script/validate || rm *.gem\n+\n+echo \"*** Packing and moving the octopoller gem ***\"\n+if [ -f *.gem ]; then\n+  mv *.gem pkg\n+  echo -e '\u2611 success'\n+else\n+  echo -e '\u2612 failure'\n+  exit 1\n+fi\n+"
        },
        {
          "filename": "script/release",
          "status": "modified",
          "additions": 46,
          "deletions": 9,
          "patch": "@@ -5,12 +5,49 @@\n \n set -e\n \n-version=\"$(script/package | grep Version: | awk '{print $2}')\"\n-[ -n \"$version\" ] || exit 1\n-\n-echo $version\n-git commit --allow-empty -a -m \"Release $version\"\n-git tag \"v$version\"\n-git push origin\n-git push origin \"v$version\"\n-gem push pkg/*-${version}.gem\n+usage() { \n+  echo \"Usage: $0 [-r] Tags and releases/publishes Octopoller\" 1>&2; exit 1; \n+}\n+\n+while [ $# -gt 0 ]\n+do\n+    case $1 in\n+        '-r')\n+            r=true\n+            ;;\n+        '-h')\n+            usage\n+            ;;\n+        *)\n+            echo \"No valid parameter passed in, performing a dry run...\";\n+            ;;\n+    esac\n+    shift\n+done\n+\n+if [ -z \"${r}\" ]; then\n+  ./script/package\n+    echo \"*** Dry run: octopoller was not tagged or released ***\"\n+    echo -e '\u2611 success'\n+else\n+\n+  # We execite the script separately to get logging and proper exit conditions\n+  ./script/package\n+\n+  # We need to pull the version from the actual file that is about to be published\n+  file=$(ls pkg/*.gem| head -1)\n+  version=$(echo $file | sed -e 's/.*octopoller-\\(.*\\).gem.*/\\1/') \n+  \n+  [ -n \"$version\" ] || exit 1\n+\n+  echo \"*** Tagging and publishing $version of octopoller ***\"\n+\n+  git commit --allow-empty -a -m \"Release $version\"\n+  git tag \"v$version\"\n+  git push origin\n+  git push origin \"v$version\"\n+  gem push pkg/*-${version}.gem\n+  echo -e '\u2611 success'\n+fi\n+\n+"
        },
        {
          "filename": "script/validate",
          "status": "added",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -0,0 +1,44 @@\n+#!/usr/bin/env bash\n+# Usage: script/gem\n+# Validates the packed gem to determine if file permissions are correct.\n+\n+<<'###SCRIPT_COMMENT'\n+Purpose: \n+(Given octopoller.rb is currently shipped \"manually\")\n+\n+Because different environments behave differently, it is recommended that the integrity and file permissions of the files packed in the gem are verified.\n+This is to help prevent things like releasing world writeable files in the gem. The simple check below looks at each file contained in the packed gem and\n+verifies that the files are only owner writeable.\n+\n+Requirements:\n+This script expects that script/package, script/release or 'gem build *.gemspec' have been run\n+\n+###SCRIPT_COMMENT\n+\n+\n+FILE=$(ls *.gem| head -1)\n+\n+echo \"*** Validating file permissions in the octopoller gem ***\"\n+\n+if [ ! -f \"$FILE\" ]; then\n+    echo \"$FILE does not exist. Please run script/package, script/release or 'gem build *.gemspec' to generate the gem to be validated\"\n+    echo -e '\u2612 failure'\n+    exit 1\n+fi\n+\n+tar -xf \"${FILE}\"\n+\n+# naive check to quickly see if any files in the gem are set to the wrong permissions\n+for f in $(tar --numeric-owner -tvf data.tar.gz )\n+do\n+  if [ $f == \"-rw-rw-rw-\" ]; then\n+     echo \"World writeable files (-rw-rw-rw- | 666) detected in the gem. Please repack and make sure that all files in the gem are owner read write ( -rw-r--r-- | 644 )\"\n+     echo -e '\u2612 failure'\n+     rm -f checksums.yaml.gz data.tar.gz metadata.gz\n+     exit 1\n+  fi\n+done\n+\n+# Check clean up\n+echo -e '\u2611 success'\n+rm -f checksums.yaml.gz data.tar.gz metadata.gz\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7d209dd79911e163ffc41aa17c80dc2f1b622526",
            "date": "2024-06-05T20:09:55Z",
            "author_login": "nickfloyd"
          },
          {
            "sha": "5c5ff205d86c4625194de0f29705fe462f625dd6",
            "date": "2024-06-04T18:47:36Z",
            "author_login": "octokitbot"
          },
          {
            "sha": "83ef9e49d066ea8f1a976464856e93d058e33c45",
            "date": "2024-06-04T13:13:56Z",
            "author_login": "nickfloyd"
          },
          {
            "sha": "988095cea289124c44b6dd106295116131b94f0c",
            "date": "2024-06-03T22:27:16Z",
            "author_login": "octokitbot"
          },
          {
            "sha": "0b230bed42862fd00fc17265d9e0f6153b62dbfb",
            "date": "2023-12-11T19:00:02Z",
            "author_login": "octokitbot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-276",
    "description": "Octopoller is a micro gem for polling and retrying. Version 0.2.0 of the octopoller gem was published containing world-writeable files. Specifically, the gem was packed with files having their permissions set to `-rw-rw-rw-` (i.e. 0666) instead of `rw-r--r--` (i.e. 0644). This means everyone who is not the owner (Group and Public) with access to the instance where this release had been installed could modify the world-writable files from this gem. This issue is patched in Octopoller 0.3.0. Two workarounds are available. Users can use the previous version of the gem, v0.1.0. Alternatively, users can modify the file permissions manually until they are able to upgrade to the latest version.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-06-15T23:15:09.837",
    "last_modified": "2024-11-21T07:03:50.040",
    "fix_date": "2022-06-15T20:03:32Z"
  },
  "references": [
    {
      "url": "https://github.com/octokit/octopoller.rb/commit/abed2b8d05abe2cc3eb6bdfb34e53d465e7c7874",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/octokit/octopoller.rb/security/advisories/GHSA-26qj-cr27-r5c4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/octokit/octopoller.rb/commit/abed2b8d05abe2cc3eb6bdfb34e53d465e7c7874",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/octokit/octopoller.rb/security/advisories/GHSA-26qj-cr27-r5c4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.449557",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "octopoller.rb",
    "owner": "octokit",
    "created_at": "2018-08-06T23:04:36Z",
    "updated_at": "2024-08-15T06:12:07Z",
    "pushed_at": "2024-06-05T20:09:56Z",
    "size": 86,
    "stars": 45,
    "forks": 5,
    "open_issues": 0,
    "watchers": 45,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 8325,
      "Shell": 3137
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:36:47.005917"
  }
}