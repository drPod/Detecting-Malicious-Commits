{
  "cve_id": "CVE-2022-31090",
  "github_data": {
    "repository": "guzzle/guzzle",
    "fix_commit": "1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
    "related_commits": [
      "1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
      "1dd98b0564cb3f6bd16ce683cb755f94c10fbd82"
    ],
    "patch_url": "https://github.com/guzzle/guzzle/commit/1dd98b0564cb3f6bd16ce683cb755f94c10fbd82.patch",
    "fix_commit_details": {
      "sha": "1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
      "commit_date": "2022-06-20T22:16:13Z",
      "author": {
        "login": "GrahamCampbell",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Release 7.4.5 (#3043)",
        "length": 21,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 199,
        "additions": 137,
        "deletions": 62
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -2,6 +2,11 @@\n \n Please refer to [UPGRADING](UPGRADING.md) guide for upgrading to a major version.\n \n+## 7.4.5 - 2022-06-20\n+\n+* Fix change in port should be considered a change in origin\n+* Fix `CURLOPT_HTTPAUTH` option not cleared on change of origin\n+\n ## 7.4.4 - 2022-06-09\n \n * Fix failure to strip Authorization header on HTTP downgrade"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -44,7 +44,7 @@ We use GitHub issues only to discuss bugs and new features. For support please r\n \n - [Documentation](https://docs.guzzlephp.org)\n - [Stack Overflow](https://stackoverflow.com/questions/tagged/guzzle)\n-- [#guzzle](https://app.slack.com/client/T0D2S9JCT/CE6UAAKL4) channel on [PHP-HTTP Slack](http://slack.httplug.io/)\n+- [#guzzle](https://app.slack.com/client/T0D2S9JCT/CE6UAAKL4) channel on [PHP-HTTP Slack](https://slack.httplug.io/)\n - [Gitter](https://gitter.im/guzzle/guzzle)\n \n \n@@ -73,10 +73,10 @@ composer require guzzlehttp/guzzle\n [guzzle-5-repo]: https://github.com/guzzle/guzzle/tree/5.3\n [guzzle-6-repo]: https://github.com/guzzle/guzzle/tree/6.5\n [guzzle-7-repo]: https://github.com/guzzle/guzzle\n-[guzzle-3-docs]: http://guzzle3.readthedocs.org\n-[guzzle-5-docs]: http://docs.guzzlephp.org/en/5.3/\n-[guzzle-6-docs]: http://docs.guzzlephp.org/en/6.5/\n-[guzzle-7-docs]: http://docs.guzzlephp.org/en/latest/\n+[guzzle-3-docs]: https://guzzle3.readthedocs.io/\n+[guzzle-5-docs]: https://docs.guzzlephp.org/en/5.3/\n+[guzzle-6-docs]: https://docs.guzzlephp.org/en/6.5/\n+[guzzle-7-docs]: https://docs.guzzlephp.org/en/latest/\n \n \n ## Security"
        },
        {
          "filename": "composer.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -54,7 +54,7 @@\n         \"php\": \"^7.2.5 || ^8.0\",\n         \"ext-json\": \"*\",\n         \"guzzlehttp/promises\": \"^1.5\",\n-        \"guzzlehttp/psr7\": \"^1.8.3 || ^2.1\",\n+        \"guzzlehttp/psr7\": \"^1.9 || ^2.4\",\n         \"psr/http-client\": \"^1.0\",\n         \"symfony/deprecation-contracts\": \"^2.2 || ^3.0\"\n     },"
        },
        {
          "filename": "src/RedirectMiddleware.php",
          "status": "modified",
          "additions": 4,
          "deletions": 29,
          "patch": "@@ -88,10 +88,8 @@ public function checkRedirect(RequestInterface $request, array $options, Respons\n         $this->guardMax($request, $response, $options);\n         $nextRequest = $this->modifyRequest($request, $options, $response);\n \n-        // If authorization is handled by curl, unset it if host is different.\n-        if ($request->getUri()->getHost() !== $nextRequest->getUri()->getHost()\n-            && defined('\\CURLOPT_HTTPAUTH')\n-        ) {\n+        // If authorization is handled by curl, unset it if URI is cross-origin.\n+        if (Psr7\\UriComparator::isCrossOrigin($request->getUri(), $nextRequest->getUri()) && defined('\\CURLOPT_HTTPAUTH')) {\n             unset(\n                 $options['curl'][\\CURLOPT_HTTPAUTH],\n                 $options['curl'][\\CURLOPT_USERPWD]\n@@ -198,38 +196,15 @@ public function modifyRequest(RequestInterface $request, array $options, Respons\n             $modify['remove_headers'][] = 'Referer';\n         }\n \n-        // Remove Authorization and Cookie headers if required.\n-        if (self::shouldStripSensitiveHeaders($request->getUri(), $modify['uri'])) {\n+        // Remove Authorization and Cookie headers if URI is cross-origin.\n+        if (Psr7\\UriComparator::isCrossOrigin($request->getUri(), $modify['uri'])) {\n             $modify['remove_headers'][] = 'Authorization';\n             $modify['remove_headers'][] = 'Cookie';\n         }\n \n         return Psr7\\Utils::modifyRequest($request, $modify);\n     }\n \n-    /**\n-     * Determine if we should strip sensitive headers from the request.\n-     *\n-     * We return true if either of the following conditions are true:\n-     *\n-     * 1. the host is different;\n-     * 2. the scheme has changed, and now is non-https.\n-     */\n-    private static function shouldStripSensitiveHeaders(\n-        UriInterface $originalUri,\n-        UriInterface $modifiedUri\n-    ): bool {\n-        if (\\strcasecmp($originalUri->getHost(), $modifiedUri->getHost()) !== 0) {\n-            return true;\n-        }\n-\n-        if ($originalUri->getScheme() !== $modifiedUri->getScheme() && 'https' !== $modifiedUri->getScheme()) {\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n     /**\n      * Set the appropriate URL on the request based on the location header.\n      */"
        },
        {
          "filename": "tests/RedirectMiddlewareTest.php",
          "status": "modified",
          "additions": 122,
          "deletions": 27,
          "patch": "@@ -272,65 +272,105 @@ public function testInvokesOnRedirectForRedirects()\n         self::assertTrue($call);\n     }\n \n-    public function crossOriginRedirectProvider()\n+    /**\n+     * @testWith [\"digest\"]\n+     *           [\"ntlm\"]\n+     */\n+    public function testRemoveCurlAuthorizationOptionsOnRedirectCrossHost($auth)\n     {\n-        return [\n-            ['http://example.com?a=b', 'http://test.com/', false],\n-            ['https://example.com?a=b', 'https://test.com/', false],\n-            ['http://example.com?a=b', 'https://test.com/', false],\n-            ['https://example.com?a=b', 'http://test.com/', false],\n-            ['http://example.com?a=b', 'http://example.com/', true],\n-            ['https://example.com?a=b', 'https://example.com/', true],\n-            ['http://example.com?a=b', 'https://example.com/', true],\n-            ['https://example.com?a=b', 'http://example.com/', false],\n-        ];\n+        if (!defined('\\CURLOPT_HTTPAUTH')) {\n+            self::markTestSkipped('ext-curl is required for this test');\n+        }\n+\n+        $mock = new MockHandler([\n+            new Response(302, ['Location' => 'http://test.com']),\n+            static function (RequestInterface $request, $options) {\n+                self::assertFalse(\n+                    isset($options['curl'][\\CURLOPT_HTTPAUTH]),\n+                    'curl options still contain CURLOPT_HTTPAUTH entry'\n+                );\n+                self::assertFalse(\n+                    isset($options['curl'][\\CURLOPT_USERPWD]),\n+                    'curl options still contain CURLOPT_USERPWD entry'\n+                );\n+                return new Response(200);\n+            }\n+        ]);\n+        $handler = HandlerStack::create($mock);\n+        $client = new Client(['handler' => $handler]);\n+        $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);\n     }\n \n     /**\n-     * @dataProvider crossOriginRedirectProvider\n+     * @testWith [\"digest\"]\n+     *           [\"ntlm\"]\n      */\n-    public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $shouldBePresent)\n+    public function testRemoveCurlAuthorizationOptionsOnRedirectCrossPort($auth)\n     {\n-        $mock = new MockHandler([\n-            new Response(302, ['Location' => $targetUri]),\n-            static function (RequestInterface $request) use ($shouldBePresent) {\n-                self::assertSame($shouldBePresent, $request->hasHeader('Authorization'));\n-                self::assertSame($shouldBePresent, $request->hasHeader('Cookie'));\n+        if (!defined('\\CURLOPT_HTTPAUTH')) {\n+            self::markTestSkipped('ext-curl is required for this test');\n+        }\n \n+        $mock = new MockHandler([\n+            new Response(302, ['Location' => 'http://example.com:81/']),\n+            static function (RequestInterface $request, $options) {\n+                self::assertFalse(\n+                    isset($options['curl'][\\CURLOPT_HTTPAUTH]),\n+                    'curl options still contain CURLOPT_HTTPAUTH entry'\n+                );\n+                self::assertFalse(\n+                    isset($options['curl'][\\CURLOPT_USERPWD]),\n+                    'curl options still contain CURLOPT_USERPWD entry'\n+                );\n                 return new Response(200);\n             }\n         ]);\n         $handler = HandlerStack::create($mock);\n         $client = new Client(['handler' => $handler]);\n-        $client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);\n+        $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);\n     }\n \n-    public function testNotRemoveAuthorizationHeaderOnRedirect()\n+    /**\n+     * @testWith [\"digest\"]\n+     *           [\"ntlm\"]\n+     */\n+    public function testRemoveCurlAuthorizationOptionsOnRedirectCrossScheme($auth)\n     {\n+        if (!defined('\\CURLOPT_HTTPAUTH')) {\n+            self::markTestSkipped('ext-curl is required for this test');\n+        }\n+\n         $mock = new MockHandler([\n-            new Response(302, ['Location' => 'http://example.com/2']),\n-            static function (RequestInterface $request) {\n-                self::assertTrue($request->hasHeader('Authorization'));\n+            new Response(302, ['Location' => 'http://example.com?a=b']),\n+            static function (RequestInterface $request, $options) {\n+                self::assertFalse(\n+                    isset($options['curl'][\\CURLOPT_HTTPAUTH]),\n+                    'curl options still contain CURLOPT_HTTPAUTH entry'\n+                );\n+                self::assertFalse(\n+                    isset($options['curl'][\\CURLOPT_USERPWD]),\n+                    'curl options still contain CURLOPT_USERPWD entry'\n+                );\n                 return new Response(200);\n             }\n         ]);\n         $handler = HandlerStack::create($mock);\n         $client = new Client(['handler' => $handler]);\n-        $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);\n+        $client->get('https://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);\n     }\n \n     /**\n      * @testWith [\"digest\"]\n      *           [\"ntlm\"]\n      */\n-    public function testRemoveCurlAuthorizationOptionsOnRedirect($auth)\n+    public function testRemoveCurlAuthorizationOptionsOnRedirectCrossSchemeSamePort($auth)\n     {\n         if (!defined('\\CURLOPT_HTTPAUTH')) {\n             self::markTestSkipped('ext-curl is required for this test');\n         }\n \n         $mock = new MockHandler([\n-            new Response(302, ['Location' => 'http://test.com']),\n+            new Response(302, ['Location' => 'http://example.com:80?a=b']),\n             static function (RequestInterface $request, $options) {\n                 self::assertFalse(\n                     isset($options['curl'][\\CURLOPT_HTTPAUTH]),\n@@ -345,7 +385,7 @@ static function (RequestInterface $request, $options) {\n         ]);\n         $handler = HandlerStack::create($mock);\n         $client = new Client(['handler' => $handler]);\n-        $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);\n+        $client->get('https://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);\n     }\n \n     /**\n@@ -377,6 +417,61 @@ static function (RequestInterface $request, $options) {\n         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);\n     }\n \n+    public function crossOriginRedirectProvider()\n+    {\n+        return [\n+            ['http://example.com/123', 'http://example.com/', false],\n+            ['http://example.com/123', 'http://example.com:80/', false],\n+            ['http://example.com:80/123', 'http://example.com/', false],\n+            ['http://example.com:80/123', 'http://example.com:80/', false],\n+            ['http://example.com/123', 'https://example.com/', true],\n+            ['http://example.com/123', 'http://www.example.com/', true],\n+            ['http://example.com/123', 'http://example.com:81/', true],\n+            ['http://example.com:80/123', 'http://example.com:81/', true],\n+            ['https://example.com/123', 'https://example.com/', false],\n+            ['https://example.com/123', 'https://example.com:443/', false],\n+            ['https://example.com:443/123', 'https://example.com/', false],\n+            ['https://example.com:443/123', 'https://example.com:443/', false],\n+            ['https://example.com/123', 'http://example.com/', true],\n+            ['https://example.com/123', 'https://www.example.com/', true],\n+            ['https://example.com/123', 'https://example.com:444/', true],\n+            ['https://example.com:443/123', 'https://example.com:444/', true],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider crossOriginRedirectProvider\n+     */\n+    public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $isCrossOrigin)\n+    {\n+        $mock = new MockHandler([\n+            new Response(302, ['Location' => $targetUri]),\n+            static function (RequestInterface $request) use ($isCrossOrigin) {\n+                self::assertSame(!$isCrossOrigin, $request->hasHeader('Authorization'));\n+                self::assertSame(!$isCrossOrigin, $request->hasHeader('Cookie'));\n+\n+                return new Response(200);\n+            }\n+        ]);\n+        $handler = HandlerStack::create($mock);\n+        $client = new Client(['handler' => $handler]);\n+        $client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);\n+    }\n+\n+    public function testNotRemoveAuthorizationHeaderOnRedirect()\n+    {\n+        $mock = new MockHandler([\n+            new Response(302, ['Location' => 'http://example.com/2']),\n+            static function (RequestInterface $request) {\n+                self::assertTrue($request->hasHeader('Authorization'));\n+                return new Response(200);\n+            }\n+        ]);\n+        $handler = HandlerStack::create($mock);\n+        $client = new Client(['handler' => $handler]);\n+        $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);\n+    }\n+\n     /**\n      * Verifies how RedirectMiddleware::modifyRequest() modifies the method and body of a request issued when\n      * encountering a redirect response."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d281ed313b989f213357e3be1a179f02196ac99b",
            "date": "2024-07-24T11:22:20Z",
            "author_login": "GrahamCampbell"
          },
          {
            "sha": "11d3f21339f6c4c559419922abf3a0afc6038bfa",
            "date": "2024-07-24T10:27:45Z",
            "author_login": "GrahamCampbell"
          },
          {
            "sha": "a629e5b69db96eb4939c1b34114130077dd4c6fc",
            "date": "2024-07-19T16:19:57Z",
            "author_login": "GrahamCampbell"
          },
          {
            "sha": "40ad735f966e6a5b22162e53e1bcb5f520bf52eb",
            "date": "2024-07-19T16:12:32Z",
            "author_login": "pcf0"
          },
          {
            "sha": "84ac2b2afc44e40d3e8e658a45d68d6d20437612",
            "date": "2024-07-18T11:52:56Z",
            "author_login": "GrahamCampbell"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Guzzle, an extensible PHP HTTP client. `Authorization` headers on requests are sensitive information. In affected versions when using our Curl handler, it is possible to use the `CURLOPT_HTTPAUTH` option to specify an `Authorization` header. On making a request which responds with a redirect to a URI with a different origin (change in host, scheme or port), if we choose to follow it, we should remove the `CURLOPT_HTTPAUTH` option before continuing, stopping curl from appending the `Authorization` header to the new request. Affected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5. Note that a partial fix was implemented in Guzzle 7.4.2, where a change in host would trigger removal of the curl-added Authorization header, however this earlier fix did not cover change in scheme or change in port. If you do not require or expect redirects to be followed, one should simply disable redirects all together. Alternatively, one can specify to use the Guzzle steam handler backend, rather than curl.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-27T22:15:08.873",
    "last_modified": "2024-11-21T07:03:52.457",
    "fix_date": "2022-06-20T22:16:13Z"
  },
  "references": [
    {
      "url": "https://github.com/guzzle/guzzle/commit/1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/guzzle/guzzle/security/advisories/GHSA-25mq-v84q-4j7r",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202305-24",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5246",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/guzzle/guzzle/commit/1dd98b0564cb3f6bd16ce683cb755f94c10fbd82",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/guzzle/guzzle/security/advisories/GHSA-25mq-v84q-4j7r",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202305-24",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5246",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.489349",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "guzzle",
    "owner": "guzzle",
    "created_at": "2011-02-28T02:44:05Z",
    "updated_at": "2025-01-14T12:02:09Z",
    "pushed_at": "2024-08-04T18:39:54Z",
    "size": 10101,
    "stars": 23274,
    "forks": 2401,
    "open_issues": 43,
    "watchers": 23274,
    "has_security_policy": false,
    "default_branch": "7.9",
    "protected_branches": [
      "4.x",
      "5.3",
      "6.5",
      "7.5"
    ],
    "languages": {
      "PHP": 462110,
      "JavaScript": 8050,
      "Makefile": 2734,
      "Dockerfile": 349
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:05:28.609717"
  }
}