{
  "cve_id": "CVE-2022-31108",
  "github_data": {
    "repository": "mermaid-js/mermaid",
    "fix_commit": "0ae1bdb61adff1cd485caff8c62ec6b8ac57b225",
    "related_commits": [
      "0ae1bdb61adff1cd485caff8c62ec6b8ac57b225",
      "0ae1bdb61adff1cd485caff8c62ec6b8ac57b225"
    ],
    "patch_url": "https://github.com/mermaid-js/mermaid/commit/0ae1bdb61adff1cd485caff8c62ec6b8ac57b225.patch",
    "fix_commit_details": {
      "sha": "0ae1bdb61adff1cd485caff8c62ec6b8ac57b225",
      "commit_date": "2022-06-28T16:55:12Z",
      "author": {
        "login": "knsv",
        "type": "User",
        "stats": {
          "total_commits": 2756,
          "average_weekly_commits": 5.170731707317073,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 322
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-x3vm-38hw-55wf",
        "length": 73,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 159,
        "additions": 155,
        "deletions": 4
      },
      "files": [
        {
          "filename": "cypress/e2e/other/ghsa.spec.js",
          "status": "added",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -0,0 +1,10 @@\n+import { urlSnapshotTest } from '../../helpers/util';\n+\n+describe('CSS injections', () => {\n+  it('should not allow CSS injections outside of the diagram', () => {\n+    urlSnapshotTest('http://localhost:9000/ghsa1.html', {\n+      logLevel: 1,\n+      flowchart: { htmlLabels: false },\n+    });\n+  });\n+});"
        },
        {
          "filename": "cypress/helpers/util.js",
          "status": "modified",
          "additions": 50,
          "deletions": 0,
          "patch": "@@ -70,6 +70,56 @@ export const imgSnapshotTest = (graphStr, _options, api = false, validation) =>\n   }\n };\n \n+export const urlSnapshotTest = (url, _options, api = false, validation) => {\n+  cy.log(_options);\n+  const options = Object.assign(_options);\n+  if (!options.fontFamily) {\n+    options.fontFamily = 'courier';\n+  }\n+  if (!options.sequence) {\n+    options.sequence = {};\n+  }\n+  if (!options.sequence || (options.sequence && !options.sequence.actorFontFamily)) {\n+    options.sequence.actorFontFamily = 'courier';\n+  }\n+  if (options.sequence && !options.sequence.noteFontFamily) {\n+    options.sequence.noteFontFamily = 'courier';\n+  }\n+  options.sequence.actorFontFamily = 'courier';\n+  options.sequence.noteFontFamily = 'courier';\n+  options.sequence.messageFontFamily = 'courier';\n+  if (options.sequence && !options.sequence.actorFontFamily) {\n+    options.sequence.actorFontFamily = 'courier';\n+  }\n+  if (!options.fontSize) {\n+    options.fontSize = '16px';\n+  }\n+  const useAppli = Cypress.env('useAppli');\n+  const branch = Cypress.env('codeBranch');\n+  cy.log('Hello ' + useAppli ? 'Appli' : 'image-snapshot');\n+  const name = (options.name || cy.state('runnable').fullTitle()).replace(/\\s+/g, '-');\n+\n+  if (useAppli) {\n+    cy.eyesOpen({\n+      appName: 'Mermaid-' + branch,\n+      testName: name,\n+      batchName: branch,\n+    });\n+  }\n+\n+  cy.visit(url);\n+  if (validation) cy.get('svg').should(validation);\n+  cy.get('body');\n+  // Default name to test title\n+\n+  if (useAppli) {\n+    cy.eyesCheckWindow('Click!');\n+    cy.eyesClose();\n+  } else {\n+    cy.matchImageSnapshot(name);\n+  }\n+};\n+\n export const renderGraph = (graphStr, options, api) => {\n   const url = mermaidUrl(graphStr, options, api);\n "
        },
        {
          "filename": "cypress/platform/ghsa1.html",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+<html>\n+<script>\n+    //      %%{ init: { \"logLevel\":0, \"themeVariables\" : { \"primaryColor\": \"#fff000\",\"textColor\": \"green\",\"apa\":\"} #target { background-color: crimson }\" } } }%%\n+</script>\n+<body>\n+    <div id=\"target\">\n+        <h1>This element does not belong to the SVG but we can style it</h1>\n+    </div>\n+    <svg id=\"diagram\">\n+    </svg>\n+\n+    <script src=\"./mermaid.js\"></script>\n+    <script>\n+        mermaid.initialize({ startOnLoad: false, logLevel: 0 });\n+\n+        const graph = `\n+     %%{ init: { \"themeVariables\" : { \"textColor\": \"green;} #target { background-color: crimson }\", \"mainBkg\": \"#fff000\" } } }%%\n+            graph TD\n+                A[Goose]\n+            `;\n+\n+        const diagram = document.getElementById('diagram');\n+        const svg = mermaid.render('diagram-svg', graph);\n+        diagram.innerHTML = svg;\n+    </script>\n+</body>\n+\n+</html>"
        },
        {
          "filename": "cypress/platform/ghsa2.html",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+<html>\n+<script>\n+    //      %%{ init: { \"logLevel\":0, \"themeVariables\" : { \"primaryColor\": \"#fff000\",\"textColor\": \"green\",\"apa\":\"} #target { background-color: crimson }\" } } }%%\n+</script>\n+<body>\n+    <div id=\"target\">\n+        <h1>This element does not belong to the SVG but we can style it</h1>\n+    </div>\n+    <svg id=\"diagram\">\n+    </svg>\n+\n+    <script src=\"./mermaid.js\"></script>\n+    <script>\n+        mermaid.initialize({ startOnLoad: false, logLevel: 0 });\n+\n+        const graph = `\n+     %%{ init: { \"fontFamily\" : \"&125; * { background: red }\" } }%%\n+            graph TD\n+                A[Goose]\n+            `;\n+\n+        const diagram = document.getElementById('diagram');\n+        const svg = mermaid.render('diagram-svg', graph);\n+        diagram.innerHTML = svg;\n+    </script>\n+</body>\n+\n+</html>"
        },
        {
          "filename": "src/mermaidAPI.js",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -385,6 +385,8 @@ const render = function (id, _txt, cb, container) {\n \n   let userStyles = '';\n   // user provided theme CSS\n+  // If you add more configuration driven data into the user styles make sure that the value is\n+  // sanitized bye the santiizeCSS function\n   if (cnf.themeCSS !== undefined) {\n     userStyles += `\\n${cnf.themeCSS}`;\n   }"
        },
        {
          "filename": "src/styles.js",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -10,6 +10,7 @@ import sequence from './diagrams/sequence/styles';\n import stateDiagram from './diagrams/state/styles';\n import journey from './diagrams/user-journey/styles';\n import c4 from './diagrams/c4/styles';\n+import { log } from './logger';\n \n const themes = {\n   flowchart,\n@@ -30,7 +31,10 @@ const themes = {\n   c4,\n };\n \n-export const calcThemeVariables = (theme, userOverRides) => theme.calcColors(userOverRides);\n+export const calcThemeVariables = (theme, userOverRides) => {\n+  log.info('userOverides', userOverRides);\n+  return theme.calcColors(userOverRides);\n+};\n \n const getStyles = (type, userStyles, options) => {\n   return ` {"
        },
        {
          "filename": "src/utils.js",
          "status": "modified",
          "additions": 32,
          "deletions": 3,
          "patch": "@@ -1032,6 +1032,14 @@ export const directiveSanitizer = (args) => {\n           log.debug('sanitizing themeCss option');\n           args[key] = sanitizeCss(args[key]);\n         }\n+        if (key.indexOf('fontFamily') >= 0) {\n+          log.debug('sanitizing fontFamily option');\n+          args[key] = sanitizeCss(args[key]);\n+        }\n+        if (key.indexOf('altFontFamily') >= 0) {\n+          log.debug('sanitizing altFontFamily option');\n+          args[key] = sanitizeCss(args[key]);\n+        }\n         if (configKeys.indexOf(key) < 0) {\n           log.debug('sanitize deleting option', key);\n           delete args[key];\n@@ -1044,11 +1052,32 @@ export const directiveSanitizer = (args) => {\n       });\n     }\n   }\n+  if (args.themeVariables) {\n+    const kArr = Object.keys(args.themeVariables);\n+    for (let i = 0; i < kArr.length; i++) {\n+      const k = kArr[i];\n+      const val = args.themeVariables[k];\n+      if (val && val.match && !val.match(/^[a-zA-Z0-9#,\";()%. ]+$/)) {\n+        args.themeVariables[k] = '';\n+      }\n+    }\n+  }\n+  log.debug('After sanitization', args);\n };\n export const sanitizeCss = (str) => {\n-  const stringsearch = 'o';\n-  const startCnt = (str.match(/\\{/g) || []).length;\n-  const endCnt = (str.match(/\\}/g) || []).length;\n+  let startCnt = 0;\n+  let endCnt = 0;\n+\n+  for (let i = 0; i < str.length; i++) {\n+    if (startCnt < endCnt) {\n+      return '{ /* ERROR: Unbalanced CSS */ }';\n+    }\n+    if (str[i] === '{') {\n+      startCnt++;\n+    } else if (str[i] === '}') {\n+      endCnt++;\n+    }\n+  }\n   if (startCnt !== endCnt) {\n     return '{ /* ERROR: Unbalanced CSS */ }';\n   }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bc2cc61240987ac956c69e262c93971cd254f00a",
            "date": "2025-01-07T08:59:52Z",
            "author_login": "ashishjain0512"
          },
          {
            "sha": "ec0d9c389aa6018043187654044c1e0b5aa4f600",
            "date": "2024-12-18T10:59:39Z",
            "author_login": "knsv"
          },
          {
            "sha": "323b07a2e4255b8339a29a919634ce2e7b7322bf",
            "date": "2024-12-18T10:56:48Z",
            "author_login": "knsv"
          },
          {
            "sha": "c153d0455fdc89abd49f61d117a64aac1f3748b0",
            "date": "2024-12-17T15:28:38Z",
            "author_login": "knsv"
          },
          {
            "sha": "9b00f1f2fb6843a5ff94b13974bcb646640a3b4d",
            "date": "2024-12-17T13:56:18Z",
            "author_login": "knsv"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-74",
    "description": "Mermaid is a JavaScript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. An attacker is able to inject arbitrary `CSS` into the generated graph allowing them to change the styling of elements outside of the generated graph, and potentially exfiltrate sensitive information by using specially crafted `CSS` selectors. The following example shows how an attacker can exfiltrate the contents of an input field by bruteforcing the `value` attribute one character at a time. Whenever there is an actual match, an `http` request will be made by the browser in order to \"load\" a background image that will let an attacker know what's the value of the character. This issue may lead to `Information Disclosure` via CSS selectors and functions able to generate HTTP requests. This also allows an attacker to change the document in ways which may lead a user to perform unintended actions, such as clicking on a link, etc. This issue has been resolved in version 9.1.3. Users are advised to upgrade. Users unable to upgrade should ensure that user input is adequately escaped before embedding it in CSS blocks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-28T19:15:09.423",
    "last_modified": "2024-11-21T07:03:54.697",
    "fix_date": "2022-06-28T16:55:12Z"
  },
  "references": [
    {
      "url": "https://github.com/mermaid-js/mermaid/commit/0ae1bdb61adff1cd485caff8c62ec6b8ac57b225",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mermaid-js/mermaid/security/advisories/GHSA-x3vm-38hw-55wf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mermaid-js/mermaid/commit/0ae1bdb61adff1cd485caff8c62ec6b8ac57b225",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mermaid-js/mermaid/security/advisories/GHSA-x3vm-38hw-55wf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.494855",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mermaid",
    "owner": "mermaid-js",
    "created_at": "2014-11-01T23:52:32Z",
    "updated_at": "2025-01-14T14:59:55Z",
    "pushed_at": "2025-01-14T13:33:51Z",
    "size": 239825,
    "stars": 74333,
    "forks": 6805,
    "open_issues": 1195,
    "watchers": 74333,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1570997,
      "JavaScript": 1450624,
      "HTML": 342929,
      "Yacc": 155561,
      "Vue": 7243,
      "Shell": 3909,
      "CSS": 2374,
      "Dockerfile": 321
    },
    "commit_activity": {
      "total_commits_last_year": 2201,
      "avg_commits_per_week": 42.32692307692308,
      "days_active_last_year": 252
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:52:15.884866"
  }
}