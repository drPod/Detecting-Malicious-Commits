{
  "cve_id": "CVE-2022-31111",
  "github_data": {
    "repository": "paritytech/frontier",
    "fix_commit": "e3e427fa2e5d1200a784679f8015d4774cedc934",
    "related_commits": [
      "e3e427fa2e5d1200a784679f8015d4774cedc934",
      "fed5e0a9577c10bea021721e8c2c5c378e16bf66",
      "e3e427fa2e5d1200a784679f8015d4774cedc934",
      "fed5e0a9577c10bea021721e8c2c5c378e16bf66"
    ],
    "patch_url": "https://github.com/paritytech/frontier/commit/e3e427fa2e5d1200a784679f8015d4774cedc934.patch",
    "fix_commit_details": {
      "sha": "e3e427fa2e5d1200a784679f8015d4774cedc934",
      "commit_date": "2022-06-29T09:28:33Z",
      "author": {
        "login": "sorpaas",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Limit number of iterations in genesis nonce building (#753)",
        "length": 59,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 73,
        "additions": 48,
        "deletions": 25
      },
      "files": [
        {
          "filename": "frame/ethereum/src/lib.rs",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -814,7 +814,7 @@ impl<T: Config> Pallet<T> {\n \t\t\t\t\ttarget,\n \t\t\t\t\tinput,\n \t\t\t\t\tvalue,\n-\t\t\t\t\tgas_limit.low_u64(),\n+\t\t\t\t\tgas_limit.unique_saturated_into(),\n \t\t\t\t\tmax_fee_per_gas,\n \t\t\t\t\tmax_priority_fee_per_gas,\n \t\t\t\t\tnonce,\n@@ -841,7 +841,7 @@ impl<T: Config> Pallet<T> {\n \t\t\t\t\tfrom,\n \t\t\t\t\tinput,\n \t\t\t\t\tvalue,\n-\t\t\t\t\tgas_limit.low_u64(),\n+\t\t\t\t\tgas_limit.unique_saturated_into(),\n \t\t\t\t\tmax_fee_per_gas,\n \t\t\t\t\tmax_priority_fee_per_gas,\n \t\t\t\t\tnonce,"
        },
        {
          "filename": "frame/evm/src/lib.rs",
          "status": "modified",
          "additions": 20,
          "deletions": 11,
          "patch": "@@ -77,7 +77,7 @@ use sp_runtime::{\n \ttraits::{BadOrigin, Saturating, UniqueSaturatedInto, Zero},\n \tAccountId32, DispatchErrorWithPostInfo,\n };\n-use sp_std::vec::Vec;\n+use sp_std::{cmp::min, vec::Vec};\n \n pub use evm::{\n \tConfig as EvmConfig, Context, ExitError, ExitFatal, ExitReason, ExitRevert, ExitSucceed,\n@@ -410,21 +410,26 @@ pub mod pallet {\n \t}\n \n \t#[pallet::genesis_build]\n-\timpl<T: Config> GenesisBuild<T> for GenesisConfig {\n+\timpl<T: Config> GenesisBuild<T> for GenesisConfig\n+\twhere\n+\t\tU256: UniqueSaturatedInto<BalanceOf<T>>,\n+\t{\n \t\tfn build(&self) {\n+\t\t\tconst MAX_ACCOUNT_NONCE: usize = 100;\n+\n \t\t\tfor (address, account) in &self.accounts {\n \t\t\t\tlet account_id = T::AddressMapping::into_account_id(*address);\n \n \t\t\t\t// ASSUME: in one single EVM transaction, the nonce will not increase more than\n \t\t\t\t// `u128::max_value()`.\n-\t\t\t\tfor _ in 0..account.nonce.low_u128() {\n+\t\t\t\tfor _ in 0..min(\n+\t\t\t\t\tMAX_ACCOUNT_NONCE,\n+\t\t\t\t\tUniqueSaturatedInto::<usize>::unique_saturated_into(account.nonce),\n+\t\t\t\t) {\n \t\t\t\t\tframe_system::Pallet::<T>::inc_account_nonce(&account_id);\n \t\t\t\t}\n \n-\t\t\t\tT::Currency::deposit_creating(\n-\t\t\t\t\t&account_id,\n-\t\t\t\t\taccount.balance.low_u128().unique_saturated_into(),\n-\t\t\t\t);\n+\t\t\t\tT::Currency::deposit_creating(&account_id, account.balance.unique_saturated_into());\n \n \t\t\t\tPallet::<T>::create_account(*address, account.code.clone());\n \n@@ -707,6 +712,7 @@ where\n \t\tOpposite = C::PositiveImbalance,\n \t>,\n \tOU: OnUnbalanced<NegativeImbalanceOf<C, T>>,\n+\tU256: UniqueSaturatedInto<<C as Currency<<T as frame_system::Config>::AccountId>>::Balance>,\n {\n \t// Kept type as Option to satisfy bound of Default\n \ttype LiquidityInfo = Option<NegativeImbalanceOf<C, T>>;\n@@ -718,7 +724,7 @@ where\n \t\tlet account_id = T::AddressMapping::into_account_id(*who);\n \t\tlet imbalance = C::withdraw(\n \t\t\t&account_id,\n-\t\t\tfee.low_u128().unique_saturated_into(),\n+\t\t\tfee.unique_saturated_into(),\n \t\t\tWithdrawReasons::FEE,\n \t\t\tExistenceRequirement::AllowDeath,\n \t\t)\n@@ -738,7 +744,7 @@ where\n \t\t\t// Calculate how much refund we should return\n \t\t\tlet refund_amount = paid\n \t\t\t\t.peek()\n-\t\t\t\t.saturating_sub(corrected_fee.low_u128().unique_saturated_into());\n+\t\t\t\t.saturating_sub(corrected_fee.unique_saturated_into());\n \t\t\t// refund to the account that paid the fees. If this fails, the\n \t\t\t// account might have dropped below the existential balance. In\n \t\t\t// that case we don't refund anything.\n@@ -769,7 +775,7 @@ where\n \t\t\t\t.same()\n \t\t\t\t.unwrap_or_else(|_| C::NegativeImbalance::zero());\n \n-\t\t\tlet (base_fee, tip) = adjusted_paid.split(base_fee.low_u128().unique_saturated_into());\n+\t\t\tlet (base_fee, tip) = adjusted_paid.split(base_fee.unique_saturated_into());\n \t\t\t// Handle base fee. Can be either burned, rationed, etc ...\n \t\t\tOU::on_unbalanced(base_fee);\n \t\t\treturn Some(tip);\n@@ -793,7 +799,10 @@ impl<T> OnChargeEVMTransaction<T> for ()\n \t<T::Currency as Currency<<T as frame_system::Config>::AccountId>>::PositiveImbalance:\n \t\tImbalance<<T::Currency as Currency<<T as frame_system::Config>::AccountId>>::Balance, Opposite = <T::Currency as Currency<<T as frame_system::Config>::AccountId>>::NegativeImbalance>,\n \t<T::Currency as Currency<<T as frame_system::Config>::AccountId>>::NegativeImbalance:\n-\t\tImbalance<<T::Currency as Currency<<T as frame_system::Config>::AccountId>>::Balance, Opposite = <T::Currency as Currency<<T as frame_system::Config>::AccountId>>::PositiveImbalance>, {\n+Imbalance<<T::Currency as Currency<<T as frame_system::Config>::AccountId>>::Balance, Opposite = <T::Currency as Currency<<T as frame_system::Config>::AccountId>>::PositiveImbalance>,\n+U256: UniqueSaturatedInto<BalanceOf<T>>,\n+\n+{\n \t// Kept type as Option to satisfy bound of Default\n \ttype LiquidityInfo = Option<NegativeImbalanceOf<T::Currency, T>>;\n "
        },
        {
          "filename": "frame/evm/src/runner/stack.rs",
          "status": "modified",
          "additions": 18,
          "deletions": 6,
          "patch": "@@ -18,8 +18,9 @@\n //! EVM stack-based runner.\n \n use crate::{\n-\trunner::Runner as RunnerT, AccountCodes, AccountStorages, AddressMapping, BlockHashMapping,\n-\tConfig, Error, Event, FeeCalculator, OnChargeEVMTransaction, Pallet, RunnerError,\n+\trunner::Runner as RunnerT, AccountCodes, AccountStorages, AddressMapping, BalanceOf,\n+\tBlockHashMapping, Config, Error, Event, FeeCalculator, OnChargeEVMTransaction, Pallet,\n+\tRunnerError,\n };\n use evm::{\n \tbackend::Backend as BackendT,\n@@ -41,8 +42,11 @@ pub struct Runner<T: Config> {\n \t_marker: PhantomData<T>,\n }\n \n-impl<T: Config> Runner<T> {\n-\t/// Execute an EVM operation.\n+impl<T: Config> Runner<T>\n+where\n+\tBalanceOf<T>: TryFrom<U256> + Into<U256>,\n+{\n+\t/// Execute an already validated EVM operation.\n \tpub fn execute<'config, 'precompiles, F, R>(\n \t\tsource: H160,\n \t\tvalue: U256,\n@@ -245,7 +249,10 @@ impl<T: Config> Runner<T> {\n \t}\n }\n \n-impl<T: Config> RunnerT<T> for Runner<T> {\n+impl<T: Config> RunnerT<T> for Runner<T>\n+where\n+\tBalanceOf<T>: TryFrom<U256> + Into<U256>,\n+{\n \ttype Error = Error<T>;\n \n \tfn call(\n@@ -542,6 +549,8 @@ impl<'vicinity, 'config, T: Config> BackendT for SubstrateStackState<'vicinity,\n \n impl<'vicinity, 'config, T: Config> StackStateT<'config>\n \tfor SubstrateStackState<'vicinity, 'config, T>\n+where\n+\tBalanceOf<T>: TryFrom<U256> + Into<U256>,\n {\n \tfn metadata(&self) -> &StackSubstateMetadata<'config> {\n \t\tself.substate.metadata()\n@@ -630,7 +639,10 @@ impl<'vicinity, 'config, T: Config> StackStateT<'config>\n \t\tT::Currency::transfer(\n \t\t\t&source,\n \t\t\t&target,\n-\t\t\ttransfer.value.low_u128().unique_saturated_into(),\n+\t\t\ttransfer\n+\t\t\t\t.value\n+\t\t\t\t.try_into()\n+\t\t\t\t.map_err(|_| ExitError::OutOfFund)?,\n \t\t\tExistenceRequirement::AllowDeath,\n \t\t)\n \t\t.map_err(|_| ExitError::OutOfFund)"
        },
        {
          "filename": "frame/evm/src/tests.rs",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -268,8 +268,10 @@ fn issuance_after_tip() {\n \t\tresult.expect(\"EVM can be called\");\n \t\tlet after_tip = <Test as Config>::Currency::total_issuance();\n \t\t// Only base fee is burned\n-\t\tlet (base_fee, _) = <Test as Config>::FeeCalculator::min_gas_price();\n-\t\tassert_eq!(after_tip, (before_tip - (base_fee.low_u64() * 21_000)));\n+\t\tlet base_fee: u64 = <Test as Config>::FeeCalculator::min_gas_price()\n+\t\t\t.0\n+\t\t\t.unique_saturated_into();\n+\t\tassert_eq!(after_tip, (before_tip - (base_fee * 21_000)));\n \t});\n }\n \n@@ -355,7 +357,7 @@ fn refunds_and_priority_should_work() {\n \t\tassert_eq!(after_call, before_call - total_cost);\n \n \t\tlet after_tip = EVM::account_basic(&author).0.balance;\n-\t\tassert_eq!(after_tip, (before_tip + actual_tip.low_u128()));\n+\t\tassert_eq!(after_tip, (before_tip + actual_tip));\n \t});\n }\n "
        },
        {
          "filename": "template/runtime/src/lib.rs",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -24,7 +24,7 @@ use sp_runtime::{\n \tcreate_runtime_str, generic, impl_opaque_keys,\n \ttraits::{\n \t\tAccountIdLookup, BlakeTwo256, Block as BlockT, DispatchInfoOf, Dispatchable,\n-\t\tIdentifyAccount, NumberFor, PostDispatchInfoOf, Verify,\n+\t\tIdentifyAccount, NumberFor, PostDispatchInfoOf, UniqueSaturatedInto, Verify,\n \t},\n \ttransaction_validity::{TransactionSource, TransactionValidity, TransactionValidityError},\n \tApplyExtrinsicResult, MultiSignature,\n@@ -663,7 +663,7 @@ impl_runtime_apis! {\n \t\t\t\tto,\n \t\t\t\tdata,\n \t\t\t\tvalue,\n-\t\t\t\tgas_limit.low_u64(),\n+\t\t\t\tgas_limit.unique_saturated_into(),\n \t\t\t\tmax_fee_per_gas,\n \t\t\t\tmax_priority_fee_per_gas,\n \t\t\t\tnonce,\n@@ -697,7 +697,7 @@ impl_runtime_apis! {\n \t\t\t\tfrom,\n \t\t\t\tdata,\n \t\t\t\tvalue,\n-\t\t\t\tgas_limit.low_u64(),\n+\t\t\t\tgas_limit.unique_saturated_into(),\n \t\t\t\tmax_fee_per_gas,\n \t\t\t\tmax_priority_fee_per_gas,\n \t\t\t\tnonce,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "802b196808ddb6ef5565b0e9c3baa8b904c637f3",
            "date": "2025-01-13T05:57:49Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "30b0fad98b3da35f202f91bf98c8b1a0f467d656",
            "date": "2025-01-13T05:56:55Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "817a938a0b4e5a464163c189bcd6abaec8b0a6d6",
            "date": "2025-01-13T05:56:31Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6c84eaae3d86c78a5c6baecafe68451251e96707",
            "date": "2025-01-13T05:56:03Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "04e2f665e5227109d2100ab2f59ad4f31ff91058",
            "date": "2025-01-13T05:54:29Z",
            "author_login": "pLabarta"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-670",
    "description": "Frontier is Substrate's Ethereum compatibility layer. In affected versions the truncation done when converting between EVM balance type and Substrate balance type was incorrectly implemented. This leads to possible discrepancy between appeared EVM transfer value and actual Substrate value transferred. It is recommended that an emergency upgrade to be planned and EVM execution temporarily paused in the mean time. The issue is patched in Frontier master branch commit fed5e0a9577c10bea021721e8c2c5c378e16bf66 and polkadot-v0.9.22 branch commit e3e427fa2e5d1200a784679f8015d4774cedc934. This vulnerability affects only EVM internal states, but not Substrate balance states or node. You can temporarily pause EVM execution (by setting up a Substrate `CallFilter` that disables `pallet-evm` and `pallet-ethereum` calls before the patch can be applied.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-06T18:15:19.217",
    "last_modified": "2024-11-21T07:03:55.113",
    "fix_date": "2022-06-29T09:28:33Z"
  },
  "references": [
    {
      "url": "https://github.com/paritytech/frontier/commit/e3e427fa2e5d1200a784679f8015d4774cedc934",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/commit/fed5e0a9577c10bea021721e8c2c5c378e16bf66",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/pull/753",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/security/advisories/GHSA-hc8w-mx86-9fcj",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/commit/e3e427fa2e5d1200a784679f8015d4774cedc934",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/commit/fed5e0a9577c10bea021721e8c2c5c378e16bf66",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/pull/753",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/security/advisories/GHSA-hc8w-mx86-9fcj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.459966",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "frontier",
    "owner": "paritytech",
    "created_at": "2018-11-08T13:10:57Z",
    "updated_at": "2025-01-13T05:57:53Z",
    "pushed_at": "2025-01-14T05:05:02Z",
    "size": 71567,
    "stars": 580,
    "forks": 511,
    "open_issues": 149,
    "watchers": 580,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Rust": 1552689,
      "TypeScript": 219803,
      "Solidity": 7119,
      "Handlebars": 5345,
      "JavaScript": 4300,
      "Makefile": 2075,
      "Shell": 1769,
      "Nix": 867
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:36:30.286455"
  }
}