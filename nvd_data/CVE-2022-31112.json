{
  "cve_id": "CVE-2022-31112",
  "github_data": {
    "repository": "parse-community/parse-server",
    "fix_commit": "309f64ced8700321df056fb3cc97f15007a00df1",
    "related_commits": [
      "309f64ced8700321df056fb3cc97f15007a00df1",
      "9fd4516cde5c742f9f29dd05468b4a43a85639a6",
      "309f64ced8700321df056fb3cc97f15007a00df1",
      "9fd4516cde5c742f9f29dd05468b4a43a85639a6"
    ],
    "patch_url": "https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1.patch",
    "fix_commit_details": {
      "sha": "309f64ced8700321df056fb3cc97f15007a00df1",
      "commit_date": "2022-06-30T10:26:39Z",
      "author": {
        "login": "mtrezza",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: protected fields exposed via LiveQuery; this removes protected fields from the client response; this may be a breaking change if your app is currently expecting to receive these protected fields ([GHSA-crrq-vr9j-fxxh](https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh)) (https://github.com/parse-community/parse-server/pull/8074) (#8073)",
        "length": 380,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 156,
        "additions": 132,
        "deletions": 24
      },
      "files": [
        {
          "filename": "spec/ParseLiveQuery.spec.js",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -1066,6 +1066,52 @@ describe('ParseLiveQuery', function () {\n     }\n   });\n \n+  it('should strip out protected fields', async () => {\n+    await reconfigureServer({\n+      liveQuery: { classNames: ['Test'] },\n+      startLiveQueryServer: true,\n+    });\n+    const obj1 = new Parse.Object('Test');\n+    obj1.set('foo', 'foo');\n+    obj1.set('bar', 'bar');\n+    obj1.set('qux', 'qux');\n+    await obj1.save();\n+    const config = Config.get(Parse.applicationId);\n+    const schemaController = await config.database.loadSchema();\n+    await schemaController.updateClass(\n+      'Test',\n+      {},\n+      {\n+        get: { '*': true },\n+        find: { '*': true },\n+        update: { '*': true },\n+        protectedFields: {\n+          '*': ['foo'],\n+        },\n+      }\n+    );\n+    const object = await obj1.fetch();\n+    expect(object.get('foo')).toBe(undefined);\n+    expect(object.get('bar')).toBeDefined();\n+    expect(object.get('qux')).toBeDefined();\n+\n+    const subscription = await new Parse.Query('Test').subscribe();\n+    await Promise.all([\n+      new Promise(resolve => {\n+        subscription.on('update', (obj, original) => {\n+          expect(obj.get('foo')).toBe(undefined);\n+          expect(obj.get('bar')).toBeDefined();\n+          expect(obj.get('qux')).toBeDefined();\n+          expect(original.get('foo')).toBe(undefined);\n+          expect(original.get('bar')).toBeDefined();\n+          expect(original.get('qux')).toBeDefined();\n+          resolve();\n+        });\n+      }),\n+      obj1.save({ foo: 'abc' }),\n+    ]);\n+  });\n+\n   afterEach(async function (done) {\n     const client = await Parse.CoreManager.getLiveQueryController().getDefaultLiveQueryClient();\n     client.close();"
        },
        {
          "filename": "src/Controllers/DatabaseController.js",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -127,7 +127,7 @@ const filterSensitiveData = (\n   aclGroup: any[],\n   auth: any,\n   operation: any,\n-  schema: SchemaController.SchemaController,\n+  schema: SchemaController.SchemaController | any,\n   className: string,\n   protectedFields: null | Array<any>,\n   object: any\n@@ -136,7 +136,8 @@ const filterSensitiveData = (\n   if (auth && auth.user) userId = auth.user.id;\n \n   // replace protectedFields when using pointer-permissions\n-  const perms = schema.getClassLevelPermissions(className);\n+  const perms =\n+    schema && schema.getClassLevelPermissions ? schema.getClassLevelPermissions(className) : {};\n   if (perms) {\n     const isReadOperation = ['get', 'find'].indexOf(operation) > -1;\n \n@@ -1533,14 +1534,17 @@ class DatabaseController {\n   }\n \n   addProtectedFields(\n-    schema: SchemaController.SchemaController,\n+    schema: SchemaController.SchemaController | any,\n     className: string,\n     query: any = {},\n     aclGroup: any[] = [],\n     auth: any = {},\n     queryOptions: FullQueryOptions = {}\n   ): null | string[] {\n-    const perms = schema.getClassLevelPermissions(className);\n+    const perms =\n+      schema && schema.getClassLevelPermissions\n+        ? schema.getClassLevelPermissions(className)\n+        : schema;\n     if (!perms) return null;\n \n     const protectedFields = perms.protectedFields;\n@@ -1806,8 +1810,10 @@ class DatabaseController {\n   }\n \n   static _validateQuery: any => void;\n+  static filterSensitiveData: (boolean, any[], any, any, any, string, any[], any) => void;\n }\n \n module.exports = DatabaseController;\n // Expose validateQuery for tests\n module.exports._validateQuery = validateQuery;\n+module.exports.filterSensitiveData = filterSensitiveData;"
        },
        {
          "filename": "src/LiveQuery/ParseCloudCodePublisher.js",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -33,6 +33,9 @@ class ParseCloudCodePublisher {\n     if (request.original) {\n       message.originalParseObject = request.original._toFullJSON();\n     }\n+    if (request.classLevelPermissions) {\n+      message.classLevelPermissions = request.classLevelPermissions;\n+    }\n     this.parsePublisher.publish(type, JSON.stringify(message));\n   }\n }"
        },
        {
          "filename": "src/LiveQuery/ParseLiveQueryServer.js",
          "status": "modified",
          "additions": 73,
          "deletions": 20,
          "patch": "@@ -10,11 +10,18 @@ import { ParsePubSub } from './ParsePubSub';\n import SchemaController from '../Controllers/SchemaController';\n import _ from 'lodash';\n import { v4 as uuidv4 } from 'uuid';\n-import { runLiveQueryEventHandlers, getTrigger, runTrigger, resolveError, toJSONwithObjects } from '../triggers';\n+import {\n+  runLiveQueryEventHandlers,\n+  getTrigger,\n+  runTrigger,\n+  resolveError,\n+  toJSONwithObjects,\n+} from '../triggers';\n import { getAuthForSessionToken, Auth } from '../Auth';\n-import { getCacheController } from '../Controllers';\n+import { getCacheController, getDatabaseController } from '../Controllers';\n import LRU from 'lru-cache';\n import UserRouter from '../Routers/UsersRouter';\n+import DatabaseController from '../Controllers/DatabaseController';\n \n class ParseLiveQueryServer {\n   clients: Map;\n@@ -185,14 +192,14 @@ class ParseLiveQueryServer {\n             if (res.object && typeof res.object.toJSON === 'function') {\n               deletedParseObject = toJSONwithObjects(res.object, res.object.className || className);\n             }\n-            if (\n-              (deletedParseObject.className === '_User' ||\n-                deletedParseObject.className === '_Session') &&\n-              !client.hasMasterKey\n-            ) {\n-              delete deletedParseObject.sessionToken;\n-              delete deletedParseObject.authData;\n-            }\n+            await this._filterSensitiveData(\n+              classLevelPermissions,\n+              res,\n+              client,\n+              requestId,\n+              op,\n+              subscription.query\n+            );\n             client.pushDelete(requestId, deletedParseObject);\n           } catch (e) {\n             const error = resolveError(e);\n@@ -339,16 +346,14 @@ class ParseLiveQueryServer {\n                 res.original.className || className\n               );\n             }\n-            if (\n-              (currentParseObject.className === '_User' ||\n-                currentParseObject.className === '_Session') &&\n-              !client.hasMasterKey\n-            ) {\n-              delete currentParseObject.sessionToken;\n-              delete originalParseObject?.sessionToken;\n-              delete currentParseObject.authData;\n-              delete originalParseObject?.authData;\n-            }\n+            await this._filterSensitiveData(\n+              classLevelPermissions,\n+              res,\n+              client,\n+              requestId,\n+              op,\n+              subscription.query\n+            );\n             const functionName = 'push' + res.event.charAt(0).toUpperCase() + res.event.slice(1);\n             if (client[functionName]) {\n               client[functionName](requestId, currentParseObject, originalParseObject);\n@@ -540,6 +545,54 @@ class ParseLiveQueryServer {\n     // return rolesQuery.find({useMasterKey:true});\n   }\n \n+  async _filterSensitiveData(\n+    classLevelPermissions: ?any,\n+    res: any,\n+    client: any,\n+    requestId: number,\n+    op: string,\n+    query: any\n+  ) {\n+    const subscriptionInfo = client.getSubscriptionInfo(requestId);\n+    const aclGroup = ['*'];\n+    let clientAuth;\n+    if (typeof subscriptionInfo !== 'undefined') {\n+      const { userId, auth } = await this.getAuthForSessionToken(subscriptionInfo.sessionToken);\n+      if (userId) {\n+        aclGroup.push(userId);\n+      }\n+      clientAuth = auth;\n+    }\n+    const filter = obj => {\n+      if (!obj) {\n+        return;\n+      }\n+      let protectedFields = classLevelPermissions?.protectedFields || [];\n+      if (!client.hasMasterKey && !Array.isArray(protectedFields)) {\n+        protectedFields = getDatabaseController(this.config).addProtectedFields(\n+          classLevelPermissions,\n+          res.object.className,\n+          query,\n+          aclGroup,\n+          clientAuth\n+        );\n+      }\n+      return DatabaseController.filterSensitiveData(\n+        client.hasMasterKey,\n+        aclGroup,\n+        clientAuth,\n+        op,\n+        classLevelPermissions,\n+        res.object.className,\n+        protectedFields,\n+        obj,\n+        query\n+      );\n+    };\n+    res.object = filter(res.object);\n+    res.original = filter(res.original);\n+  }\n+\n   _getCLPOperation(query: any) {\n     return typeof query === 'object' &&\n       Object.keys(query).length == 1 &&"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "28b3edee4e76679dedee9fe115283110fd952678",
            "date": "2025-01-13T15:19:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1b61cab81c4206ce135f1239f17a53dabbc698d7",
            "date": "2025-01-13T14:47:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a0efad88d2177f027ee3709beba13282a6ca9d35",
            "date": "2025-01-12T20:55:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bb1daafef0f5f0b6a9c9b33c9d7e0529fd49afbf",
            "date": "2025-01-12T18:53:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3f0f29b4dfaf6038cb0f0dd205cfa8e1cf92c0c4",
            "date": "2025-01-12T14:04:34Z",
            "author_login": "semantic-release-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-200",
    "description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. In affected versions parse Server LiveQuery does not remove protected fields in classes, passing them to the client. The LiveQueryController now removes protected fields from the client response. Users are advised to upgrade. Users unable t upgrade should use `Parse.Cloud.afterLiveQueryEvent` to manually remove protected fields.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-30T17:15:07.977",
    "last_modified": "2024-11-21T07:03:55.237",
    "fix_date": "2022-06-30T10:26:39Z"
  },
  "references": [
    {
      "url": "https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/9fd4516cde5c742f9f29dd05468b4a43a85639a6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/issues/8073",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/pull/8074",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/5.2.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/9fd4516cde5c742f9f29dd05468b4a43a85639a6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/issues/8073",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/pull/8074",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/5.2.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.502386",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "parse-server",
    "owner": "parse-community",
    "created_at": "2016-01-28T18:29:14Z",
    "updated_at": "2025-01-13T16:51:06Z",
    "pushed_at": "2025-01-14T11:16:34Z",
    "size": 73208,
    "stars": 20994,
    "forks": 4781,
    "open_issues": 474,
    "watchers": 20994,
    "has_security_policy": false,
    "default_branch": "alpha",
    "protected_branches": [
      "alpha",
      "beta",
      "release",
      "release-4.x.x",
      "release-5.x.x",
      "release-6.x.x",
      "release-7.x.x"
    ],
    "languages": {
      "JavaScript": 4248231,
      "HTML": 25876,
      "Shell": 7825,
      "Handlebars": 2113,
      "Dockerfile": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:26:59.166995"
  }
}