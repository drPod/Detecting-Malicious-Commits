{
  "cve_id": "CVE-2022-31121",
  "github_data": {
    "repository": "hyperledger/fabric",
    "fix_commit": "0f18359493bcbd5f9f9d1a9b05adabfe5da23b06",
    "related_commits": [
      "0f18359493bcbd5f9f9d1a9b05adabfe5da23b06",
      "0f18359493bcbd5f9f9d1a9b05adabfe5da23b06"
    ],
    "patch_url": "https://github.com/hyperledger/fabric/commit/0f18359493bcbd5f9f9d1a9b05adabfe5da23b06.patch",
    "fix_commit_details": {
      "sha": "0f18359493bcbd5f9f9d1a9b05adabfe5da23b06",
      "commit_date": "2022-06-20T18:09:26Z",
      "author": {
        "login": "yacovm",
        "type": "User",
        "stats": {
          "total_commits": 1317,
          "average_weekly_commits": 2.9008810572687223,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 228
        }
      },
      "commit_message": {
        "title": "Check if inner consensus message is missing",
        "length": 216,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 66,
        "additions": 62,
        "deletions": 4
      },
      "files": [
        {
          "filename": "orderer/common/cluster/comm_test.go",
          "status": "modified",
          "additions": 58,
          "deletions": 2,
          "patch": "@@ -120,6 +120,11 @@ func (*mockChannelExtractor) TargetChannel(msg proto.Message) string {\n \t}\n }\n \n+type clusterServer interface {\n+\t// Step passes an implementation-specific message to another cluster member.\n+\tStep(server orderer.Cluster_StepServer) error\n+}\n+\n type clusterNode struct {\n \tlock         sync.Mutex\n \tfrozen       bool\n@@ -132,6 +137,7 @@ type clusterNode struct {\n \tclientConfig comm_utils.ClientConfig\n \tserverConfig comm_utils.ServerConfig\n \tc            *cluster.Comm\n+\tdispatcher   clusterServer\n }\n \n func (cn *clusterNode) Step(stream orderer.Cluster_StepServer) error {\n@@ -179,7 +185,7 @@ func (cn *clusterNode) resurrect() {\n \t\tpanic(fmt.Errorf(\"failed starting gRPC server: %v\", err))\n \t}\n \tcn.srv = gRPCServer\n-\torderer.RegisterClusterServer(gRPCServer.Server(), cn)\n+\torderer.RegisterClusterServer(gRPCServer.Server(), cn.dispatcher)\n \tgo cn.srv.Start()\n }\n \n@@ -257,6 +263,10 @@ func newTestNodeWithMetrics(t *testing.T, metrics cluster.MetricsProvider, tlsCo\n \t\tsrv: gRPCServer,\n \t}\n \n+\tif tstSrv.dispatcher == nil {\n+\t\ttstSrv.dispatcher = tstSrv\n+\t}\n+\n \ttstSrv.freezeCond.L = &tstSrv.lock\n \n \tcompareCert := cluster.CachePublicKeyComparisons(func(a, b []byte) bool {\n@@ -275,7 +285,7 @@ func newTestNodeWithMetrics(t *testing.T, metrics cluster.MetricsProvider, tlsCo\n \t\tCompareCertificate:      compareCert,\n \t}\n \n-\torderer.RegisterClusterServer(gRPCServer.Server(), tstSrv)\n+\torderer.RegisterClusterServer(gRPCServer.Server(), tstSrv.dispatcher)\n \tgo gRPCServer.Start()\n \treturn tstSrv\n }\n@@ -481,6 +491,52 @@ func TestBlockingSend(t *testing.T) {\n \t}\n }\n \n+func TestEmptyRequest(t *testing.T) {\n+\t// Scenario: Ensures empty messages are discarded and an error is returned\n+\t// back to the sender.\n+\n+\tnode1 := newTestNode(t)\n+\tnode2 := newTestNode(t)\n+\n+\tnode2.srv.Stop()\n+\tsvc := &cluster.Service{\n+\t\tStepLogger: flogging.MustGetLogger(\"test\"),\n+\t\tLogger:     flogging.MustGetLogger(\"test\"),\n+\t\tStreamCountReporter: &cluster.StreamCountReporter{\n+\t\t\tMetrics: cluster.NewMetrics(&disabled.Provider{}),\n+\t\t},\n+\t\tDispatcher: node2.c,\n+\t}\n+\tnode2.dispatcher = svc\n+\n+\t// Sleep to let the gRPC service be closed\n+\ttime.Sleep(time.Second)\n+\n+\t// Resurrect the node with the new dispatcher\n+\tnode2.resurrect()\n+\n+\tdefer node1.stop()\n+\tdefer node2.stop()\n+\n+\tconfig := []cluster.RemoteNode{node1.nodeInfo, node2.nodeInfo}\n+\tnode1.c.Configure(testChannel, config)\n+\tnode2.c.Configure(testChannel, config)\n+\n+\tassertBiDiCommunication(t, node1, node2, testReq)\n+\n+\trm, err := node1.c.Remote(testChannel, node2.nodeInfo.ID)\n+\trequire.NoError(t, err)\n+\n+\tstream, err := rm.NewStream(time.Second * 10)\n+\trequire.NoError(t, err)\n+\n+\terr = stream.Send(&orderer.StepRequest{})\n+\trequire.NoError(t, err)\n+\n+\t_, err = stream.Recv()\n+\trequire.Error(t, err, \"message is neither a Submit nor a Consensus request\")\n+}\n+\n func TestBasic(t *testing.T) {\n \t// Scenario: Basic test that spawns 2 nodes and sends each other\n \t// messages that are expected to be echoed back"
        },
        {
          "filename": "orderer/common/cluster/service.go",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -14,6 +14,7 @@ import (\n \t\"github.com/hyperledger/fabric-protos-go/orderer\"\n \t\"github.com/hyperledger/fabric/common/flogging\"\n \t\"github.com/hyperledger/fabric/common/util\"\n+\t\"github.com/pkg/errors\"\n \t\"go.uber.org/zap\"\n \t\"google.golang.org/grpc\"\n )\n@@ -90,10 +91,11 @@ func (s *Service) handleMessage(stream StepStream, addr string, exp *certificate\n \t\tnodeName := commonNameFromContext(stream.Context())\n \t\ts.Logger.Debugf(\"Received message from %s(%s): %v\", nodeName, addr, requestAsString(request))\n \t\treturn s.handleSubmit(submitReq, stream, addr)\n+\t} else if consensusReq := request.GetConsensusRequest(); consensusReq != nil {\n+\t\treturn s.Dispatcher.DispatchConsensus(stream.Context(), request.GetConsensusRequest())\n \t}\n \n-\t// Else, it's a consensus message.\n-\treturn s.Dispatcher.DispatchConsensus(stream.Context(), request.GetConsensusRequest())\n+\treturn errors.Errorf(\"message is neither a Submit nor a Consensus request\")\n }\n \n func (s *Service) handleSubmit(request *orderer.SubmitRequest, stream StepStream, addr string) error {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "713f8c7702db8cb7387d56ef4d8521e209443f96",
            "date": "2025-01-10T16:45:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a074996677c9e9f9bf20957e0a8762d0a247273f",
            "date": "2025-01-10T16:45:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "f0498f297e8e8c9ac8b71fef330d40ffae942a84",
            "date": "2025-01-10T16:44:44Z",
            "author_login": "pfi79"
          },
          {
            "sha": "267b251e32995b8b99aa9c74869f2ec3827de4bd",
            "date": "2025-01-08T17:53:50Z",
            "author_login": "ryjones"
          },
          {
            "sha": "68ca5b7088df75394860239068a22b5ef586ce7a",
            "date": "2025-01-08T13:42:25Z",
            "author_login": "chloefeal"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-20",
    "description": "Hyperledger Fabric is a permissioned distributed ledger framework. In affected versions if a consensus client sends a malformed consensus request to an orderer it may crash the orderer node. A fix has been added in commit 0f1835949 which checks for missing consensus messages and returns an error to the consensus client should the message be missing. Users are advised to upgrade to versions 2.2.7 or v2.4.5. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-07T18:15:09.517",
    "last_modified": "2024-11-21T07:03:56.330",
    "fix_date": "2022-06-20T18:09:26Z"
  },
  "references": [
    {
      "url": "https://github.com/hyperledger/fabric/commit/0f18359493bcbd5f9f9d1a9b05adabfe5da23b06",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/fabric/releases/tag/v2.2.7",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/fabric/releases/tag/v2.4.5",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/fabric/security/advisories/GHSA-72x4-cq6r-jp4p",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/fabric/commit/0f18359493bcbd5f9f9d1a9b05adabfe5da23b06",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/fabric/releases/tag/v2.2.7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/fabric/releases/tag/v2.4.5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/fabric/security/advisories/GHSA-72x4-cq6r-jp4p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.462642",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fabric",
    "owner": "hyperledger",
    "created_at": "2016-08-25T16:05:27Z",
    "updated_at": "2025-01-13T20:11:40Z",
    "pushed_at": "2025-01-10T18:07:15Z",
    "size": 151186,
    "stars": 15876,
    "forks": 8885,
    "open_issues": 190,
    "watchers": 15876,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-1.0",
      "release-1.1",
      "release-1.2",
      "release-1.3",
      "release-1.4",
      "release-2.0",
      "release-2.1",
      "release-2.2",
      "release-2.3",
      "release-2.4",
      "release-2.5"
    ],
    "languages": {
      "Go": 11838841,
      "Shell": 67867,
      "Makefile": 19092,
      "Dockerfile": 8735
    },
    "commit_activity": {
      "total_commits_last_year": 300,
      "avg_commits_per_week": 5.769230769230769,
      "days_active_last_year": 159
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:34:23.884343"
  }
}