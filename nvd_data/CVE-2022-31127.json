{
  "cve_id": "CVE-2022-31127",
  "github_data": {
    "repository": "nextauthjs/next-auth",
    "fix_commit": "ae834f1e08a4a9915665eecb9479c74c6b039c9c",
    "related_commits": [
      "ae834f1e08a4a9915665eecb9479c74c6b039c9c",
      "ae834f1e08a4a9915665eecb9479c74c6b039c9c"
    ],
    "patch_url": "https://github.com/nextauthjs/next-auth/commit/ae834f1e08a4a9915665eecb9479c74c6b039c9c.patch",
    "fix_commit_details": {
      "sha": "ae834f1e08a4a9915665eecb9479c74c6b039c9c",
      "commit_date": "2022-07-05T14:02:04Z",
      "author": {
        "login": "balazsorban44",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat(providers): allow styling e-mail through `theme` option (#4841)",
        "length": 361,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 296,
        "additions": 127,
        "deletions": 169
      },
      "files": [
        {
          "filename": "apps/dev/pages/api/auth/[...nextauth].ts",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -46,7 +46,10 @@ import BoxyHQSAMLProvider from \"next-auth/providers/boxyhq-saml\"\n // })\n // const adapter = FaunaAdapter(client)\n export const authOptions: NextAuthOptions = {\n-  // adapter,\n+  // adapter: {\n+  //   getUserByEmail: (email) => ({ id: \"1\", email, emailVerified: null }),\n+  //   createVerificationToken: (token) => token,\n+  // } as any,\n   providers: [\n     // E-mail\n     // Start fake e-mail server with `npm run start:email`"
        },
        {
          "filename": "docs/docs/configuration/options.md",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -366,11 +366,14 @@ Changes the color scheme theme of [pages](/configuration/pages) as well as allow\n \n In addition, you can define a logo URL in `theme.logo` which will be rendered above the main card in the default signin/signout/error/verify-request pages, as well as a `theme.brandColor` which will affect the accent color of these pages.\n \n+The sign-in button's background color will match the `brandColor` and defaults to `\"#346df1\"`. The text color is `#fff` by default, but if your brand color gives a weak contrast, correct it with the `buttonText` color option.\n+\n ```js\n theme: {\n   colorScheme: \"auto\", // \"auto\" | \"dark\" | \"light\"\n   brandColor: \"\", // Hex color code\n-  logo: \"\" // Absolute URL to image\n+  logo: \"\", // Absolute URL to image\n+  buttonText: \"\" // Hex color code\n }\n ```\n "
        },
        {
          "filename": "docs/docs/providers/email.md",
          "status": "modified",
          "additions": 49,
          "deletions": 42,
          "patch": "@@ -124,67 +124,74 @@ providers: [\n The following code shows the complete source for the built-in `sendVerificationRequest()` method:\n \n ```js\n-import nodemailer from \"nodemailer\"\n+import { createTransport } from \"nodemailer\"\n \n-async function sendVerificationRequest({\n-  identifier: email,\n-  url,\n-  provider: { server, from },\n-}) {\n+async function sendVerificationRequest(params) {\n+  const { identifier, url, provider, theme } = params\n   const { host } = new URL(url)\n-  const transport = nodemailer.createTransport(server)\n-  await transport.sendMail({\n-    to: email,\n-    from,\n+  // NOTE: You are not required to use `nodemailer`, use whatever you want.\n+  const transport = createTransport(provider.server)\n+  const result = await transport.sendMail({\n+    to: identifier,\n+    from: provider.from,\n     subject: `Sign in to ${host}`,\n     text: text({ url, host }),\n-    html: html({ url, host, email }),\n+    html: html({ url, host, theme }),\n   })\n+  const failed = result.rejected.concat(result.pending).filter(Boolean)\n+  if (failed.length) {\n+    throw new Error(`Email(s) (${failed.join(\", \")}) could not be sent`)\n+  }\n }\n \n-// Email HTML body\n-function html({ url, host, email }: Record<\"url\" | \"host\" | \"email\", string>) {\n-  // Insert invisible space into domains and email address to prevent both the\n-  // email address and the domain from being turned into a hyperlink by email\n-  // clients like Outlook and Apple mail, as this is confusing because it seems\n-  // like they are supposed to click on their email address to sign in.\n-  const escapedEmail = `${email.replace(/\\./g, \"&#8203;.\")}`\n-  const escapedHost = `${host.replace(/\\./g, \"&#8203;.\")}`\n-\n-  // Some simple styling options\n-  const backgroundColor = \"#f9f9f9\"\n-  const textColor = \"#444444\"\n-  const mainBackgroundColor = \"#ffffff\"\n-  const buttonBackgroundColor = \"#346df1\"\n-  const buttonBorderColor = \"#346df1\"\n-  const buttonTextColor = \"#ffffff\"\n+/**\n+ * Email HTML body\n+ * Insert invisible space into domains from being turned into a hyperlink by email\n+ * clients like Outlook and Apple mail, as this is confusing because it seems\n+ * like they are supposed to click on it to sign in.\n+ *\n+ * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!\n+ */\n+function html(params: { url: string; host: string; theme: Theme }) {\n+  const { url, host, theme } = params\n+\n+  const escapedHost = host.replace(/\\./g, \"&#8203;.\")\n+\n+  const brandColor = theme.brandColor || \"#346df1\"\n+  const color = {\n+    background: \"#f9f9f9\",\n+    text: \"#444\",\n+    mainBackground: \"#fff\",\n+    buttonBackground: brandColor,\n+    buttonBorder: brandColor,\n+    buttonText: theme.buttonText || \"#fff\",\n+  }\n \n   return `\n-<body style=\"background: ${backgroundColor};\">\n-  <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n+<body style=\"background: ${color.background};\">\n+  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\"\n+    style=\"background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;\">\n     <tr>\n-      <td align=\"center\" style=\"padding: 10px 0px 20px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n-        <strong>${escapedHost}</strong>\n-      </td>\n-    </tr>\n-  </table>\n-  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\" style=\"background: ${mainBackgroundColor}; max-width: 600px; margin: auto; border-radius: 10px;\">\n-    <tr>\n-      <td align=\"center\" style=\"padding: 10px 0px 0px 0px; font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n-        Sign in as <strong>${escapedEmail}</strong>\n+      <td align=\"center\"\n+        style=\"padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n+        Sign in to <strong>${escapedHost}</strong>\n       </td>\n     </tr>\n     <tr>\n       <td align=\"center\" style=\"padding: 20px 0;\">\n         <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n           <tr>\n-            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${buttonBackgroundColor}\"><a href=\"${url}\" target=\"_blank\" style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${buttonTextColor}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${buttonBorderColor}; display: inline-block; font-weight: bold;\">Sign in</a></td>\n+            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${color.buttonBackground}\"><a href=\"${url}\"\n+                target=\"_blank\"\n+                style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;\">Sign\n+                in</a></td>\n           </tr>\n         </table>\n       </td>\n     </tr>\n     <tr>\n-      <td align=\"center\" style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n+      <td align=\"center\"\n+        style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n         If you did not request this email you can safely ignore it.\n       </td>\n     </tr>\n@@ -193,8 +200,8 @@ function html({ url, host, email }: Record<\"url\" | \"host\" | \"email\", string>) {\n `\n }\n \n-// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)\n-function text({ url, host }: Record<\"url\" | \"host\", string>) {\n+/** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */\n+function text({ url, host }: { url: string; host: string }) {\n   return `Sign in to ${host}\\n${url}\\n\\n`\n }\n ```"
        },
        {
          "filename": "packages/next-auth/src/core/init.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -62,6 +62,7 @@ export async function init({\n       colorScheme: \"auto\",\n       logo: \"\",\n       brandColor: \"\",\n+      buttonText: \"\",\n     },\n     // Custom options override defaults\n     ...userOptions,"
        },
        {
          "filename": "packages/next-auth/src/core/lib/email/signin.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@ export default async function email(\n   identifier: string,\n   options: InternalOptions<\"email\">\n ) {\n-  const { url, adapter, provider, logger, callbackUrl } = options\n+  const { url, adapter, provider, logger, callbackUrl, theme } = options\n \n   // Generate token\n   const token =\n@@ -42,6 +42,7 @@ export default async function email(\n       expires,\n       url: _url,\n       provider,\n+      theme,\n     })\n   } catch (error) {\n     logger.error(\"SEND_VERIFICATION_EMAIL_ERROR\", {"
        },
        {
          "filename": "packages/next-auth/src/core/routes/signin.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 10,
          "patch": "@@ -37,19 +37,10 @@ export default async function signin(params: {\n      * it solves. We treat email addresses as all lower case. If anyone\n      * complains about this we can make strict RFC 2821 compliance an option.\n      */\n-    let email = body?.email?.toLowerCase()\n+    const email = body?.email?.toLowerCase()\n \n     if (!email) return { redirect: `${url}/error?error=EmailSignin` }\n \n-    email = email\n-      .split(\",\")[0]\n-      .trim()\n-      .replaceAll(\"&\", \"&amp;\")\n-      .replaceAll(\"<\", \"&lt;\")\n-      .replaceAll(\">\", \"&gt;\")\n-      .replaceAll('\"', \"&quot;\")\n-      .replaceAll(\"'\", \"&#x27;\")\n-\n     // Verified in `assertConfig`\n     // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n     const { getUserByEmail } = adapter!"
        },
        {
          "filename": "packages/next-auth/src/core/types.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -217,6 +217,7 @@ export interface Theme {\n   colorScheme: \"auto\" | \"dark\" | \"light\"\n   logo?: string\n   brandColor?: string\n+  buttonText?: string\n }\n \n /**"
        },
        {
          "filename": "packages/next-auth/src/providers/email.ts",
          "status": "modified",
          "additions": 65,
          "deletions": 55,
          "patch": "@@ -3,6 +3,16 @@ import { createTransport } from \"nodemailer\"\n import type { CommonProviderOptions } from \".\"\n import type { Options as SMTPConnectionOptions } from \"nodemailer/lib/smtp-connection\"\n import type { Awaitable } from \"..\"\n+import type { Theme } from \"../core/types\"\n+\n+export interface SendVerificationRequestParams {\n+  identifier: string\n+  url: string\n+  expires: Date\n+  provider: EmailConfig\n+  token: string\n+  theme: Theme\n+}\n \n export interface EmailConfig extends CommonProviderOptions {\n   type: \"email\"\n@@ -16,13 +26,10 @@ export interface EmailConfig extends CommonProviderOptions {\n    * @default 86400\n    */\n   maxAge?: number\n-  sendVerificationRequest: (params: {\n-    identifier: string\n-    url: string\n-    expires: Date\n-    provider: EmailConfig\n-    token: string\n-  }) => Awaitable<void>\n+  /** [Documentation](https://next-auth.js.org/providers/email#customizing-emails) */\n+  sendVerificationRequest: (\n+    params: SendVerificationRequestParams\n+  ) => Awaitable<void>\n   /**\n    * By default, we are generating a random verification token.\n    * You can make it predictable or modify it as you like with this method.\n@@ -56,78 +63,81 @@ export default function Email(options: EmailUserConfig): EmailConfig {\n     type: \"email\",\n     name: \"Email\",\n     // Server can be an SMTP connection string or a nodemailer config object\n-    server: {\n-      host: \"localhost\",\n-      port: 25,\n-      auth: {\n-        user: \"\",\n-        pass: \"\",\n-      },\n-    },\n+    server: { host: \"localhost\", port: 25, auth: { user: \"\", pass: \"\" } },\n     from: \"NextAuth <no-reply@example.com>\",\n     maxAge: 24 * 60 * 60,\n-    async sendVerificationRequest({\n-      identifier: email,\n-      url,\n-      provider: { server, from },\n-    }) {\n+    async sendVerificationRequest(params) {\n+      const { identifier, url, provider, theme } = params\n       const { host } = new URL(url)\n-      const transport = createTransport(server)\n-      await transport.sendMail({\n-        to: email,\n-        from,\n+      const transport = createTransport(provider.server)\n+      const result = await transport.sendMail({\n+        to: identifier,\n+        from: provider.from,\n         subject: `Sign in to ${host}`,\n         text: text({ url, host }),\n-        html: html({ url, host, email }),\n+        html: html({ url, host, theme }),\n       })\n+      const failed = result.rejected.concat(result.pending).filter(Boolean)\n+      if (failed.length) {\n+        throw new Error(`Email(s) (${failed.join(\", \")}) could not be sent`)\n+      }\n     },\n     options,\n   }\n }\n \n-// Email HTML body\n-function html({ url, host, email }: Record<\"url\" | \"host\" | \"email\", string>) {\n-  // Insert invisible space into domains and email address to prevent both the\n-  // email address and the domain from being turned into a hyperlink by email\n-  // clients like Outlook and Apple mail, as this is confusing because it seems\n-  // like they are supposed to click on their email address to sign in.\n-  const escapedEmail = `${email.replace(/\\./g, \"&#8203;.\")}`\n-  const escapedHost = `${host.replace(/\\./g, \"&#8203;.\")}`\n+/**\n+ * Email HTML body\n+ * Insert invisible space into domains from being turned into a hyperlink by email\n+ * clients like Outlook and Apple mail, as this is confusing because it seems\n+ * like they are supposed to click on it to sign in.\n+ *\n+ * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!\n+ */\n+function html(params: { url: string; host: string; theme: Theme }) {\n+  const { url, host, theme } = params\n+\n+  const escapedHost = host.replace(/\\./g, \"&#8203;.\")\n+\n+  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n+  const brandColor = theme.brandColor || \"#346df1\"\n+  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n+  const buttonText = theme.buttonText || \"#fff\"\n \n-  // Some simple styling options\n-  const backgroundColor = \"#f9f9f9\"\n-  const textColor = \"#444444\"\n-  const mainBackgroundColor = \"#ffffff\"\n-  const buttonBackgroundColor = \"#346df1\"\n-  const buttonBorderColor = \"#346df1\"\n-  const buttonTextColor = \"#ffffff\"\n+  const color = {\n+    background: \"#f9f9f9\",\n+    text: \"#444\",\n+    mainBackground: \"#fff\",\n+    buttonBackground: brandColor,\n+    buttonBorder: brandColor,\n+    buttonText,\n+  }\n \n   return `\n-<body style=\"background: ${backgroundColor};\">\n-  <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n-    <tr>\n-      <td align=\"center\" style=\"padding: 10px 0px 20px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n-        <strong>${escapedHost}</strong>\n-      </td>\n-    </tr>\n-  </table>\n-  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\" style=\"background: ${mainBackgroundColor}; max-width: 600px; margin: auto; border-radius: 10px;\">\n+<body style=\"background: ${color.background};\">\n+  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\"\n+    style=\"background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;\">\n     <tr>\n-      <td align=\"center\" style=\"padding: 10px 0px 0px 0px; font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n-        Sign in as <strong>${escapedEmail}</strong>\n+      <td align=\"center\"\n+        style=\"padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n+        Sign in to <strong>${escapedHost}</strong>\n       </td>\n     </tr>\n     <tr>\n       <td align=\"center\" style=\"padding: 20px 0;\">\n         <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n           <tr>\n-            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${buttonBackgroundColor}\"><a href=\"${url}\" target=\"_blank\" style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${buttonTextColor}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${buttonBorderColor}; display: inline-block; font-weight: bold;\">Sign in</a></td>\n+            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${color.buttonBackground}\"><a href=\"${url}\"\n+                target=\"_blank\"\n+                style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;\">Sign\n+                in</a></td>\n           </tr>\n         </table>\n       </td>\n     </tr>\n     <tr>\n-      <td align=\"center\" style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n+      <td align=\"center\"\n+        style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n         If you did not request this email you can safely ignore it.\n       </td>\n     </tr>\n@@ -136,7 +146,7 @@ function html({ url, host, email }: Record<\"url\" | \"host\" | \"email\", string>) {\n `\n }\n \n-// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)\n-function text({ url, host }: Record<\"url\" | \"host\", string>) {\n+/** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */\n+function text({ url, host }: { url: string; host: string }) {\n   return `Sign in to ${host}\\n${url}\\n\\n`\n }"
        },
        {
          "filename": "packages/next-auth/tests/email.test.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 59,
          "patch": "@@ -1,59 +0,0 @@\n-import { createCSRF, handler } from \"./lib\"\n-import EmailProvider from \"../src/providers/email\"\n-\n-const originalEmail = \"balazs@email.com\"\n-\n-test.each([\n-  [originalEmail, `,<a href=\"example.com\">Click here!</a>`],\n-  [originalEmail, \"\"],\n-])(\"Sanitize email\", async (emailOriginal, emailCompromised) => {\n-  const sendEmail = jest.fn()\n-\n-  const { secret, csrf } = createCSRF()\n-\n-  const email = {\n-    original: emailOriginal,\n-    compromised: `${emailOriginal}${emailCompromised}`,\n-  }\n-\n-  const { res } = await handler(\n-    {\n-      providers: [EmailProvider({ sendVerificationRequest: sendEmail })],\n-      adapter: {\n-        getUserByEmail: (email) => ({ id: \"1\", email, emailVerified: null }),\n-        createVerificationToken: (token) => token,\n-      } as any,\n-      secret,\n-    },\n-    {\n-      prod: true,\n-      path: \"signin/email\",\n-      requestInit: {\n-        method: \"POST\",\n-        body: JSON.stringify({\n-          email: email.compromised,\n-          csrfToken: csrf.value,\n-        }),\n-        headers: { \"Content-Type\": \"application/json\", Cookie: csrf.cookie },\n-      },\n-    }\n-  )\n-\n-  if (!emailCompromised) {\n-    expect(res.redirect).toBe(\n-      \"http://localhost:3000/api/auth/verify-request?provider=email&type=email\"\n-    )\n-    expect(sendEmail).toHaveBeenCalledWith(\n-      expect.objectContaining({\n-        identifier: email.original,\n-        token: expect.any(String),\n-      })\n-    )\n-  } else {\n-    expect(res.redirect).not.toContain(\"error=EmailSignin\")\n-\n-    const emailTo = sendEmail.mock.calls[0][0].identifier\n-    expect(emailTo).not.toBe(email.compromised)\n-    expect(emailTo).toBe(email.original)\n-  }\n-})"
        }
      ],
      "file_patterns": {
        "security_files": 7,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 8,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9d704a00206c25f96adfb1e0d4a74e7c272811f9",
            "date": "2025-01-09T23:23:30Z",
            "author_login": "giedrius-jankauskas"
          },
          {
            "sha": "e62a6347572a2769bdd7a328c435d61ec631d3fe",
            "date": "2025-01-08T23:36:43Z",
            "author_login": "Ersch"
          },
          {
            "sha": "c10f2f91647b0f194e9b87792c2c4cba61fede14",
            "date": "2025-01-07T16:43:51Z",
            "author_login": "halvaradop"
          },
          {
            "sha": "80a2c147f9dff7a67e311dffceabc38da146a7b8",
            "date": "2025-01-07T16:41:48Z",
            "author_login": "KostyaTretyak"
          },
          {
            "sha": "7f2c94f08ee3d8c37f63e18151b3c6501cb25a83",
            "date": "2025-01-07T16:38:21Z",
            "author_login": "rishi-raj-jain"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "NextAuth.js is a complete open source authentication solution for Next.js applications. An attacker can pass a compromised input to the e-mail [signin endpoint](https://next-auth.js.org/getting-started/rest-api#post-apiauthsigninprovider) that contains some malicious HTML, tricking the e-mail server to send it to the user, so they can perform a phishing attack. Eg.: `balazs@email.com, <a href=\"http://attacker.com\">Before signing in, claim your money!</a>`. This was previously sent to `balazs@email.com`, and the content of the email containing a link to the attacker's site was rendered in the HTML. This has been remedied in the following releases, by simply not rendering that e-mail in the HTML, since it should be obvious to the receiver what e-mail they used: next-auth v3 users before version 3.29.8 are impacted. (We recommend upgrading to v4, as v3 is considered unmaintained. next-auth v4 users before version 4.9.0 are impacted. If for some reason you cannot upgrade, the workaround requires you to sanitize the `email` parameter that is passed to `sendVerificationRequest` and rendered in the HTML. If you haven't created a custom `sendVerificationRequest`, you only need to upgrade. Otherwise, make sure to either exclude `email` from the HTML body or efficiently sanitize it.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-06T18:15:19.497",
    "last_modified": "2024-11-21T07:03:57.163",
    "fix_date": "2022-07-05T14:02:04Z"
  },
  "references": [
    {
      "url": "https://github.com/nextauthjs/next-auth/commit/ae834f1e08a4a9915665eecb9479c74c6b039c9c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.9.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/security/advisories/GHSA-pgjx-7f9g-9463",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/getting-started/upgrade-v4",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/providers/email#customizing-emails",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/commit/ae834f1e08a4a9915665eecb9479c74c6b039c9c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.9.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/security/advisories/GHSA-pgjx-7f9g-9463",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/getting-started/upgrade-v4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/providers/email#customizing-emails",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.460530",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "next-auth",
    "owner": "nextauthjs",
    "created_at": "2018-01-27T12:28:16Z",
    "updated_at": "2025-01-14T10:48:28Z",
    "pushed_at": "2025-01-09T23:23:30Z",
    "size": 68610,
    "stars": 25574,
    "forks": 3634,
    "open_issues": 405,
    "watchers": 25574,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1444478,
      "JavaScript": 42514,
      "CSS": 20770,
      "Shell": 15579,
      "Svelte": 14754,
      "PLpgSQL": 3973,
      "Pug": 3791,
      "Dockerfile": 1787,
      "HTML": 564
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "isc"
    },
    "collected_at": "2025-01-14T13:09:36.526109"
  }
}