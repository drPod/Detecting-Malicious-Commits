{
  "cve_id": "CVE-2022-31136",
  "github_data": {
    "repository": "bookwyrm-social/bookwyrm",
    "fix_commit": "fe33fdcf564a6a5667aef75d5456bea08feab50d",
    "related_commits": [
      "fe33fdcf564a6a5667aef75d5456bea08feab50d",
      "fe33fdcf564a6a5667aef75d5456bea08feab50d"
    ],
    "patch_url": "https://github.com/bookwyrm-social/bookwyrm/commit/fe33fdcf564a6a5667aef75d5456bea08feab50d.patch",
    "fix_commit_details": {
      "sha": "fe33fdcf564a6a5667aef75d5456bea08feab50d",
      "commit_date": "2022-07-04T21:07:36Z",
      "author": {
        "login": "mouse-reeve",
        "type": "User",
        "stats": {
          "total_commits": 4871,
          "average_weekly_commits": 18.662835249042146,
          "total_additions": 536738,
          "total_deletions": 346141,
          "weeks_active": 163
        }
      },
      "commit_message": {
        "title": "Merge pull request #2173 from bookwyrm-social/html-sanitizer",
        "length": 76,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 155,
        "additions": 45,
        "deletions": 110
      },
      "files": [
        {
          "filename": "bookwyrm/models/fields.py",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -16,7 +16,7 @@\n \n from bookwyrm import activitypub\n from bookwyrm.connectors import get_image\n-from bookwyrm.sanitize_html import InputHtmlParser\n+from bookwyrm.utils.sanitizer import clean\n from bookwyrm.settings import MEDIA_FULL_URL\n \n \n@@ -497,9 +497,7 @@ class HtmlField(ActivitypubFieldMixin, models.TextField):\n     def field_from_activity(self, value):\n         if not value or value == MISSING:\n             return None\n-        sanitizer = InputHtmlParser()\n-        sanitizer.feed(value)\n-        return sanitizer.get_output()\n+        return clean(value)\n \n \n class ArrayField(ActivitypubFieldMixin, DjangoArrayField):"
        },
        {
          "filename": "bookwyrm/sanitize_html.py",
          "status": "removed",
          "additions": 0,
          "deletions": 71,
          "patch": "@@ -1,71 +0,0 @@\n-\"\"\" html parser to clean up incoming text from unknown sources \"\"\"\n-from html.parser import HTMLParser\n-\n-\n-class InputHtmlParser(HTMLParser):  # pylint: disable=abstract-method\n-    \"\"\"Removes any html that isn't allowed_tagsed from a block\"\"\"\n-\n-    def __init__(self):\n-        HTMLParser.__init__(self)\n-        self.allowed_tags = [\n-            \"p\",\n-            \"blockquote\",\n-            \"br\",\n-            \"b\",\n-            \"i\",\n-            \"strong\",\n-            \"em\",\n-            \"pre\",\n-            \"a\",\n-            \"span\",\n-            \"ul\",\n-            \"ol\",\n-            \"li\",\n-        ]\n-        self.allowed_attrs = [\"href\", \"rel\", \"src\", \"alt\"]\n-        self.tag_stack = []\n-        self.output = []\n-        # if the html appears invalid, we just won't allow any at all\n-        self.allow_html = True\n-\n-    def handle_starttag(self, tag, attrs):\n-        \"\"\"check if the tag is valid\"\"\"\n-        if self.allow_html and tag in self.allowed_tags:\n-            allowed_attrs = \" \".join(\n-                f'{a}=\"{v}\"' for a, v in attrs if a in self.allowed_attrs\n-            )\n-            reconstructed = f\"<{tag}\"\n-            if allowed_attrs:\n-                reconstructed += \" \" + allowed_attrs\n-            reconstructed += \">\"\n-            self.output.append((\"tag\", reconstructed))\n-            self.tag_stack.append(tag)\n-        else:\n-            self.output.append((\"data\", \"\"))\n-\n-    def handle_endtag(self, tag):\n-        \"\"\"keep the close tag\"\"\"\n-        if not self.allow_html or tag not in self.allowed_tags:\n-            self.output.append((\"data\", \"\"))\n-            return\n-\n-        if not self.tag_stack or self.tag_stack[-1] != tag:\n-            # the end tag doesn't match the most recent start tag\n-            self.allow_html = False\n-            self.output.append((\"data\", \"\"))\n-            return\n-\n-        self.tag_stack = self.tag_stack[:-1]\n-        self.output.append((\"tag\", f\"</{tag}>\"))\n-\n-    def handle_data(self, data):\n-        \"\"\"extract the answer, if we're in an answer tag\"\"\"\n-        self.output.append((\"data\", data))\n-\n-    def get_output(self):\n-        \"\"\"convert the output from a list of tuples to a string\"\"\"\n-        if self.tag_stack:\n-            self.allow_html = False\n-        if not self.allow_html:\n-            return \"\".join(v for (k, v) in self.output if k == \"data\")\n-        return \"\".join(v for (k, v) in self.output)"
        },
        {
          "filename": "bookwyrm/settings.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -11,7 +11,7 @@\n env = Env()\n env.read_env()\n DOMAIN = env(\"DOMAIN\")\n-VERSION = \"0.4.0\"\n+VERSION = \"0.4.1\"\n \n RELEASE_API = env(\n     \"RELEASE_API\","
        },
        {
          "filename": "bookwyrm/status.py",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -2,15 +2,13 @@\n from django.db import transaction\n \n from bookwyrm import models\n-from bookwyrm.sanitize_html import InputHtmlParser\n+from bookwyrm.utils import sanitizer\n \n \n def create_generated_note(user, content, mention_books=None, privacy=\"public\"):\n     \"\"\"a note created by the app about user activity\"\"\"\n     # sanitize input html\n-    parser = InputHtmlParser()\n-    parser.feed(content)\n-    content = parser.get_output()\n+    content = sanitizer.clean(content)\n \n     with transaction.atomic():\n         # create but don't save"
        },
        {
          "filename": "bookwyrm/tests/test_sanitize_html.py",
          "status": "modified",
          "additions": 11,
          "deletions": 25,
          "patch": "@@ -1,7 +1,7 @@\n \"\"\" make sure only valid html gets to the app \"\"\"\n from django.test import TestCase\n \n-from bookwyrm.sanitize_html import InputHtmlParser\n+from bookwyrm.utils.sanitizer import clean\n \n \n class Sanitizer(TestCase):\n@@ -10,53 +10,39 @@ class Sanitizer(TestCase):\n     def test_no_html(self):\n         \"\"\"just text\"\"\"\n         input_text = \"no      html  \"\n-        parser = InputHtmlParser()\n-        parser.feed(input_text)\n-        output = parser.get_output()\n+        output = clean(input_text)\n         self.assertEqual(input_text, output)\n \n     def test_valid_html(self):\n         \"\"\"leave the html untouched\"\"\"\n         input_text = \"<b>yes    </b> <i>html</i>\"\n-        parser = InputHtmlParser()\n-        parser.feed(input_text)\n-        output = parser.get_output()\n+        output = clean(input_text)\n         self.assertEqual(input_text, output)\n \n     def test_valid_html_attrs(self):\n         \"\"\"and don't remove useful attributes\"\"\"\n         input_text = '<a href=\"fish.com\">yes    </a> <i>html</i>'\n-        parser = InputHtmlParser()\n-        parser.feed(input_text)\n-        output = parser.get_output()\n+        output = clean(input_text)\n         self.assertEqual(input_text, output)\n \n     def test_valid_html_invalid_attrs(self):\n         \"\"\"do remove un-approved attributes\"\"\"\n         input_text = '<a href=\"fish.com\" fish=\"hello\">yes    </a> <i>html</i>'\n-        parser = InputHtmlParser()\n-        parser.feed(input_text)\n-        output = parser.get_output()\n+        output = clean(input_text)\n         self.assertEqual(output, '<a href=\"fish.com\">yes    </a> <i>html</i>')\n \n     def test_invalid_html(self):\n-        \"\"\"remove all html when the html is malformed\"\"\"\n+        \"\"\"don't allow malformed html\"\"\"\n         input_text = \"<b>yes  <i>html</i>\"\n-        parser = InputHtmlParser()\n-        parser.feed(input_text)\n-        output = parser.get_output()\n-        self.assertEqual(\"yes  html\", output)\n+        output = clean(input_text)\n+        self.assertEqual(\"<b>yes  <i>html</i></b>\", output)\n \n         input_text = \"yes <i></b>html   </i>\"\n-        parser = InputHtmlParser()\n-        parser.feed(input_text)\n-        output = parser.get_output()\n-        self.assertEqual(\"yes html   \", output)\n+        output = clean(input_text)\n+        self.assertEqual(\"yes <i>html   </i>\", output)\n \n     def test_disallowed_html(self):\n         \"\"\"remove disallowed html but keep allowed html\"\"\"\n         input_text = \"<div>  yes <i>html</i></div>\"\n-        parser = InputHtmlParser()\n-        parser.feed(input_text)\n-        output = parser.get_output()\n+        output = clean(input_text)\n         self.assertEqual(\"  yes <i>html</i>\", output)"
        },
        {
          "filename": "bookwyrm/utils/sanitizer.py",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+\"\"\"Clean user-provided text\"\"\"\n+import bleach\n+\n+\n+def clean(input_text):\n+    \"\"\"Run through \"bleach\" \"\"\"\n+    return bleach.clean(\n+        input_text,\n+        tags=[\n+            \"p\",\n+            \"blockquote\",\n+            \"br\",\n+            \"b\",\n+            \"i\",\n+            \"strong\",\n+            \"em\",\n+            \"pre\",\n+            \"a\",\n+            \"span\",\n+            \"ul\",\n+            \"ol\",\n+            \"li\",\n+        ],\n+        attributes=[\"href\", \"rel\", \"src\", \"alt\"],\n+        strip=True,\n+    )"
        },
        {
          "filename": "bookwyrm/views/status.py",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -16,9 +16,8 @@\n \n from markdown import markdown\n from bookwyrm import forms, models\n-from bookwyrm.sanitize_html import InputHtmlParser\n from bookwyrm.settings import DOMAIN\n-from bookwyrm.utils import regex\n+from bookwyrm.utils import regex, sanitizer\n from .helpers import handle_remote_webfinger, is_api_request\n from .helpers import load_date_in_user_tz_as_utc\n \n@@ -268,6 +267,4 @@ def to_markdown(content):\n     content = format_links(content)\n     content = markdown(content)\n     # sanitize resulting html\n-    sanitizer = InputHtmlParser()\n-    sanitizer.feed(content)\n-    return sanitizer.get_output()\n+    return sanitizer.clean(content)"
        },
        {
          "filename": "requirements.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,4 +1,5 @@\n aiohttp==3.8.1\n+bleach==5.0.1\n celery==5.2.2\n colorthief==0.2.1\n Django==3.2.13"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "03bab92ee6fe00ba27396a40bcf294c2ad219f7a",
            "date": "2025-01-11T02:21:17Z",
            "author_login": "mouse-reeve"
          },
          {
            "sha": "d9d614b3bce07267fe46b5314b5528b5179ddcac",
            "date": "2025-01-11T02:11:57Z",
            "author_login": "mouse-reeve"
          },
          {
            "sha": "609b7f58c832bc19550630449b2044221399e321",
            "date": "2025-01-11T02:01:48Z",
            "author_login": "mouse-reeve"
          },
          {
            "sha": "3916666897059f3e56b79742e8cab81d8b00515e",
            "date": "2024-12-07T00:15:01Z",
            "author_login": "mouse-reeve"
          },
          {
            "sha": "305ef9195b3e2e187f7de5394a1d302df314849e",
            "date": "2024-12-06T18:58:00Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "Bookwyrm is an open source social reading and reviewing program. Versions of Bookwyrm prior to 0.4.1 did not properly sanitize html being rendered to users. Unprivileged users are able to inject scripts into user profiles, book descriptions, and statuses. These vulnerabilities may be exploited as cross site scripting attacks on users viewing these fields. Users are advised to upgrade to version 0.4.1. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-07T18:15:09.697",
    "last_modified": "2024-11-21T07:03:58.410",
    "fix_date": "2022-07-04T21:07:36Z"
  },
  "references": [
    {
      "url": "https://github.com/bookwyrm-social/bookwyrm/commit/fe33fdcf564a6a5667aef75d5456bea08feab50d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookwyrm-social/bookwyrm/security/advisories/GHSA-2cfh-v7rf-pxfp",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookwyrm-social/bookwyrm/commit/fe33fdcf564a6a5667aef75d5456bea08feab50d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookwyrm-social/bookwyrm/security/advisories/GHSA-2cfh-v7rf-pxfp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.463090",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bookwyrm",
    "owner": "bookwyrm-social",
    "created_at": "2020-01-27T03:51:54Z",
    "updated_at": "2025-01-14T15:02:17Z",
    "pushed_at": "2025-01-12T15:11:47Z",
    "size": 76297,
    "stars": 2324,
    "forks": 267,
    "open_issues": 457,
    "watchers": 2324,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 2427684,
      "HTML": 736375,
      "JavaScript": 53491,
      "SCSS": 37863,
      "Shell": 19201,
      "Dockerfile": 803,
      "CSS": 155
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:36:04.763876"
  }
}