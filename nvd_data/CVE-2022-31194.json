{
  "cve_id": "CVE-2022-31194",
  "github_data": {
    "repository": "DSpace/DSpace",
    "fix_commit": "7569c6374aefeafb996e202cf8d631020eda5f24",
    "related_commits": [
      "7569c6374aefeafb996e202cf8d631020eda5f24",
      "d1dd7d23329ef055069759df15cfa200c8e3",
      "7569c6374aefeafb996e202cf8d631020eda5f24",
      "d1dd7d23329ef055069759df15cfa200c8e3"
    ],
    "patch_url": "https://github.com/DSpace/DSpace/commit/7569c6374aefeafb996e202cf8d631020eda5f24.patch",
    "fix_commit_details": {
      "sha": "7569c6374aefeafb996e202cf8d631020eda5f24",
      "commit_date": "2020-04-08T00:48:31Z",
      "author": {
        "login": "kshepherd",
        "type": "User",
        "stats": {
          "total_commits": 311,
          "average_weekly_commits": 0.2622259696458685,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 103
        }
      },
      "commit_message": {
        "title": "[DS-4132] Fix JSPUI resumable upload path traversal",
        "length": 51,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 61,
        "additions": 53,
        "deletions": 8
      },
      "files": [
        {
          "filename": "dspace-jspui/src/main/java/org/dspace/app/webui/servlet/SubmissionController.java",
          "status": "modified",
          "additions": 26,
          "deletions": 5,
          "patch": "@@ -234,7 +234,7 @@ else if (!StringUtils.isEmpty(resumableFilename)) // if resumable.js asks whethe\n         {\n             if (request.getMethod().equals(\"GET\"))\n             {\n-                DoGetResumable(request, response);\n+                DoGetResumable(context, request, response);\n             }\n         }\n         else\n@@ -1586,27 +1586,38 @@ public void uploadFiles(Context context, HttpServletRequest request)\n     \n     // Resumable.js uses HTTP Get to recognize whether a specific part/chunk of \n     // a file was uploaded already. This method handles those requests.\n-    protected void DoGetResumable(HttpServletRequest request, HttpServletResponse response) \n+    protected void DoGetResumable(Context context, HttpServletRequest request, HttpServletResponse response)\n         throws IOException\n     {\n+        String baseDir;\n+\n         if (ConfigurationManager.getProperty(\"upload.temp.dir\") != null)\n         {\n-            tempDir = ConfigurationManager.getProperty(\"upload.temp.dir\");\n+            baseDir = ConfigurationManager.getProperty(\"upload.temp.dir\");\n         }\n         else\n         {\n-            tempDir = System.getProperty(\"java.io.tmpdir\");\n+            baseDir = System.getProperty(\"java.io.tmpdir\");\n         }\n \n         String resumableIdentifier = request.getParameter(\"resumableIdentifier\");\n         String resumableChunkNumber = request.getParameter(\"resumableChunkNumber\");\n         long resumableCurrentChunkSize = \n                 Long.valueOf(request.getParameter(\"resumableCurrentChunkSize\"));\n \n-        tempDir = tempDir + File.separator + resumableIdentifier;\n+        tempDir = baseDir + File.separator + resumableIdentifier;\n \n         File fileDir = new File(tempDir);\n \n+        // Test fileDir to see if canonical path is within the original baseDir\n+        if(!fileDir.getCanonicalPath().startsWith(baseDir)) {\n+            log.error(\"Error processing resumable upload chunk: temporary chunk file would be created outside \" +\n+                    \"permissible temp dir (\"+ baseDir +\") for submitter: \" + context.getCurrentUser().getEmail());\n+            throw new IOException(\"Error processing resumableIdentifier: \" + resumableIdentifier +\n+                    \" (submitter: \" + context.getCurrentUser().getEmail() + \")\" +\n+                    \". Temporary upload directory would be created outside permissible base temp dir (\"+ baseDir +\")\");\n+        }\n+\n         // create a new directory for each resumableIdentifier\n         if (!fileDir.exists()) {\n             fileDir.mkdir();\n@@ -1615,6 +1626,16 @@ protected void DoGetResumable(HttpServletRequest request, HttpServletResponse re\n         String chunkPath = tempDir + File.separator + \"part\" + resumableChunkNumber;\n \n         File chunkFile = new File(chunkPath);\n+\n+        // Test chunkFile to see if canonical path is within the original baseDir\n+        if(!chunkFile.getCanonicalPath().startsWith(baseDir)) {\n+            log.error(\"Error processing resumable upload chunk: temporary chunk file would be created outside \" +\n+                    \"permissible temp dir (\"+ baseDir +\") for submitter: \" + context.getCurrentUser().getEmail());\n+            throw new IOException(\"Error processing resumableIdentifier: \" + resumableIdentifier +\n+                    \" (submitter: \" + context.getCurrentUser().getEmail() + \")\" +\n+                    \". Temporary upload directory would be created outside permissible base temp dir (\"+ baseDir +\")\");\n+        }\n+\n         // if the chunk was uploaded already, we send a status code of 200\n         if (chunkFile.exists()) {\n             if (chunkFile.length() == resumableCurrentChunkSize) {"
        },
        {
          "filename": "dspace-jspui/src/main/java/org/dspace/app/webui/util/FileUploadRequest.java",
          "status": "modified",
          "additions": 27,
          "deletions": 3,
          "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.fileupload.servlet.ServletFileUpload;\n import org.apache.commons.fileupload.disk.DiskFileItemFactory;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n import org.dspace.core.ConfigurationManager;\n \n /**\n@@ -44,6 +45,10 @@ public class FileUploadRequest extends HttpServletRequestWrapper\n \n     private String tempDir = null;\n \n+    /** log4j logger */\n+    private static Logger log = Logger\n+            .getLogger(FileUploadRequest.class);\n+\n     /** Original request */\n     private HttpServletRequest original = null;\n \n@@ -102,8 +107,18 @@ public FileUploadRequest(HttpServletRequest req) throws IOException, FileSizeLim\n                         {\n                             String chunkDirPath = tempDir + File.separator + parameters.get(\"resumableIdentifier\");\n                             String chunkPath = chunkDirPath + File.separator + \"part\" + parameters.get(\"resumableChunkNumber\");\n+\n                             File fileDir = new File(chunkDirPath);\n-                            \n+\n+                            // Test fileDir to see if canonical path is within the original tempDir\n+                            if(!fileDir.getCanonicalPath().startsWith(tempDir)) {\n+                                log.error(\"Error processing resumable upload chunk: temporary chunk file would be created outside \" +\n+                                        \"permissible temp dir (\"+ tempDir +\") for file: \" + filename);\n+                                throw new IOException(\"Error processing resumable chunk directory \" + chunkDirPath +\n+                                        \" (filename: \" + filename + \")\" +\n+                                        \". Temporary upload directory would be created outside permissible base temp dir (\"+ tempDir +\")\");\n+                            }\n+\n                             if(fileDir.exists())\n                             {\n                                 item.write(new File(chunkPath));\n@@ -119,8 +134,17 @@ public FileUploadRequest(HttpServletRequest req) throws IOException, FileSizeLim\n                         String filename = getFilename(item.getName());\n                         if (filename != null && !\"\".equals(filename))\n                         {\n-                            item.write(new File(tempDir + File.separator\n-                                            + filename));\n+                            File fileDir = new File(tempDir + File.separator+ filename);\n+                            // Test fileDir to see if canonical path is within the original tempDir\n+                            if(!fileDir.getCanonicalPath().startsWith(tempDir)) {\n+                                log.error(\"Error processing resumable upload chunk: temporary chunk file would be created outside \" +\n+                                        \"permissible temp dir (\"+ tempDir +\") for file: \" + filename);\n+                                throw new IOException(\"Error processing resumable chunk directory \" + fileDir +\n+                                        \" (filename: \" + filename + \")\" +\n+                                        \". Temporary upload directory would be created outside permissible base temp dir (\"+ tempDir +\")\");\n+                            }\n+\n+                            item.write(fileDir);\n                         }\n                     }\n                 }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b85380452ace549aff960629751d554ed15c4732",
            "date": "2025-01-13T20:57:54Z",
            "author_login": "tdonohue"
          },
          {
            "sha": "8ed2cdcff7bbefb14e6e48fbc2731f2c9da67e98",
            "date": "2024-10-08T11:42:07Z",
            "author_login": "floriangantner"
          },
          {
            "sha": "8e8979c4fb6e43965f6f3c4a80565243fdc91341",
            "date": "2025-01-10T19:54:26Z",
            "author_login": "tdonohue"
          },
          {
            "sha": "74c66bb869a67b26e98c2eca2f6aa4e719c77448",
            "date": "2025-01-10T17:36:22Z",
            "author_login": "tdonohue"
          },
          {
            "sha": "c0aa3439eaf516ca87caa2c3de95d4b326e75134",
            "date": "2025-01-10T17:21:27Z",
            "author_login": "tdonohue"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:L/I:L/A:H",
    "cwe_id": "CWE-22",
    "description": "DSpace open source software is a repository application which provides durable access to digital resources. dspace-jspui is a UI component for DSpace. The JSPUI resumable upload implementations in SubmissionController and FileUploadRequest are vulnerable to multiple path traversal attacks, allowing an attacker to create files/directories anywhere on the server writable by the Tomcat/DSpace user, by modifying some request parameters during submission. This path traversal can only be executed by a user with special privileges (submitter rights). This vulnerability only impacts the JSPUI. Users are advised to upgrade. There are no known workarounds. However, this vulnerability cannot be exploited by an anonymous user or a basic user. The user must first have submitter privileges to at least one Collection and be able to determine how to modify the request parameters to exploit the vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-01T21:15:13.490",
    "last_modified": "2024-11-21T07:04:05.913",
    "fix_date": "2020-04-08T00:48:31Z"
  },
  "references": [
    {
      "url": "https://github.com/DSpace/DSpace/commit/7569c6374aefeafb996e202cf8d631020eda5f24",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/DSpace/DSpace/commit/d1dd7d23329ef055069759df15cfa200c8e3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/DSpace/DSpace/security/advisories/GHSA-qp5m-c3m9-8q2p",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/DSpace/DSpace/commit/7569c6374aefeafb996e202cf8d631020eda5f24",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/DSpace/DSpace/commit/d1dd7d23329ef055069759df15cfa200c8e3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/DSpace/DSpace/security/advisories/GHSA-qp5m-c3m9-8q2p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.189282",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "DSpace",
    "owner": "DSpace",
    "created_at": "2012-03-16T21:44:52Z",
    "updated_at": "2025-01-13T20:58:00Z",
    "pushed_at": "2025-01-13T22:39:04Z",
    "size": 173075,
    "stars": 919,
    "forks": 1322,
    "open_issues": 754,
    "watchers": 919,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "dspace-1_4_x",
      "dspace-1_5_x",
      "dspace-1_6_x",
      "dspace-1_7_x",
      "dspace-1_8_x",
      "dspace-3_x",
      "dspace-4_x",
      "dspace-5_x",
      "dspace-6_x",
      "dspace-7_x",
      "dspace-8_x",
      "main"
    ],
    "languages": {
      "Java": 23696011,
      "XSLT": 450986,
      "HTML": 60715,
      "Rich Text Format": 47367,
      "Shell": 10219,
      "Dockerfile": 8697,
      "Perl": 8695,
      "JavaScript": 6281,
      "Batchfile": 4292,
      "FreeMarker": 2995,
      "CSS": 2772,
      "PLpgSQL": 1032,
      "TeX": 748
    },
    "commit_activity": {
      "total_commits_last_year": 1157,
      "avg_commits_per_week": 22.25,
      "days_active_last_year": 198
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T14:29:39.085028"
  }
}