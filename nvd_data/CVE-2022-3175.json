{
  "cve_id": "CVE-2022-3175",
  "github_data": {
    "repository": "ikus060/rdiffweb",
    "fix_commit": "233befc33bdc45d4838c773d5aed4408720504c5",
    "related_commits": [
      "233befc33bdc45d4838c773d5aed4408720504c5",
      "233befc33bdc45d4838c773d5aed4408720504c5"
    ],
    "patch_url": "https://github.com/ikus060/rdiffweb/commit/233befc33bdc45d4838c773d5aed4408720504c5.patch",
    "fix_commit_details": {
      "sha": "233befc33bdc45d4838c773d5aed4408720504c5",
      "commit_date": "2022-09-12T14:53:06Z",
      "author": {
        "login": "ikus060",
        "type": "User",
        "stats": {
          "total_commits": 1123,
          "average_weekly_commits": 1.757433489827856,
          "total_additions": 294030,
          "total_deletions": 240959,
          "weeks_active": 268
        }
      },
      "commit_message": {
        "title": "Enforce minimum and maximum password length #211",
        "length": 48,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 112,
        "additions": 95,
        "deletions": 17
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -113,6 +113,7 @@ This releases include a security fix. If you are using an earlier version, you s\n \n * Use 'Secure' Attribute with Sensitive Cookie in HTTPS Session. [CVE-2022-3174](https://nvd.nist.gov/vuln/detail/CVE-2022-3174) #209\n * Avoid leakage of the stack trace in the default error page. [CVE-2022-3175](https://nvd.nist.gov/vuln/detail/CVE-2022-3175) #210\n+* Enforce minimum and maximum password length #211\n \n ## 2.4.1 (2022-09-08)\n "
        },
        {
          "filename": "doc/configuration.md",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -278,6 +278,20 @@ session even if the web server gets restarted, you may persist them on disk with\n | --- | --- | --- |\n | session-dir | location where to store user session information. When undefined, the user sessions are kept in memory. | /var/lib/rdiffweb/session |\n \n+## Custom user's password length limits\n+\n+By default, Rdiffweb supports passwords with the following lengths:\n+\n+* Minimum: 8 characters\n+* Maximum: 128 characters\n+\n+Changing the minimum or maximum length does not affect existing users' passwords. Existing users are not prompted to reset their passwords to meet the new limits. The new limit only applies when an existing user changes their password.\n+\n+| Option | Description | Example |\n+| --- | --- | --- |\n+| password-min-length | Minimum length of the user's password | 8 |\n+| password-max-length | Maximum length of the user's password | 128 |\n+\n ## Configure Rdiffweb appearance\n \n A number of options are available to customize the appearance of Rdiffweb to your"
        },
        {
          "filename": "rdiffweb/controller/page_admin.py",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -168,7 +168,7 @@ class UserForm(CherryForm):\n     userid = StringField(_('UserID'))\n     username = StringField(_('Username'), validators=[validators.data_required()])\n     email = EmailField(_('Email'), validators=[validators.optional()])\n-    password = PasswordField(_('Password'))\n+    password = PasswordField(_('Password'), validators=[validators.optional()])\n     user_root = StringField(\n         _('Root directory'), description=_(\"Absolute path defining the location of the repositories for this user.\")\n     )\n@@ -190,6 +190,20 @@ class UserForm(CherryForm):\n         _('Quota Used'), validators=[validators.optional()], description=_(\"Disk spaces (in bytes) used by this user.\")\n     )\n \n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.password.validators += [\n+            validators.length(\n+                min=self.app.cfg.password_min_length,\n+                max=self.app.cfg.password_max_length,\n+                message=_('Password must have between %(min)d and %(max)d characters.'),\n+            )\n+        ]\n+\n+    @property\n+    def app(self):\n+        return cherrypy.request.app\n+\n     def validate_role(self, field):\n         # Don't allow the user to changes it's \"role\" state.\n         currentuser = cherrypy.request.currentuser"
        },
        {
          "filename": "rdiffweb/controller/pref_general.py",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -25,7 +25,7 @@\n import cherrypy\n from wtforms.fields.html5 import EmailField\n from wtforms.fields.simple import PasswordField\n-from wtforms.validators import DataRequired, EqualTo, InputRequired, Regexp\n+from wtforms.validators import DataRequired, EqualTo, InputRequired, Length, Regexp\n \n from rdiffweb.controller import Controller, flash\n from rdiffweb.controller.cherrypy_wtf import CherryForm\n@@ -54,6 +54,20 @@ class UserPasswordForm(CherryForm):\n         _('Confirm new password'), validators=[InputRequired(_(\"Confirmation password is missing.\"))]\n     )\n \n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.new.validators += [\n+            Length(\n+                min=self.app.cfg.password_min_length,\n+                max=self.app.cfg.password_max_length,\n+                message=_('Password must have between %(min)d and %(max)d characters.'),\n+            )\n+        ]\n+\n+    @property\n+    def app(self):\n+        return cherrypy.request.app\n+\n \n class PrefsGeneralPanelProvider(Controller):\n     \"\"\""
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_admin.py",
          "status": "modified",
          "additions": 21,
          "deletions": 12,
          "patch": "@@ -107,7 +107,7 @@ class AdminUsersAsAdminTest(AbstractAdminTest):\n \n     def test_add_user_with_role_admin(self):\n         # When trying to create a new user with role admin\n-        self._add_user(\"admin_role\", \"admin_role@test.com\", \"test2\", \"/home/\", ADMIN_ROLE)\n+        self._add_user(\"admin_role\", \"admin_role@test.com\", \"password\", \"/home/\", ADMIN_ROLE)\n         # Then page return success\n         self.assertStatus(200)\n         # Then database is updated\n@@ -117,18 +117,18 @@ def test_add_user_with_role_admin(self):\n         self.listener.user_added.assert_called_once_with(userobj)\n \n     def test_add_user_with_role_maintainer(self):\n-        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"test2\", \"/home/\", MAINTAINER_ROLE)\n+        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"password\", \"/home/\", MAINTAINER_ROLE)\n         self.assertStatus(200)\n         self.assertEqual(MAINTAINER_ROLE, self.app.store.get_user('maintainer_role').role)\n \n     def test_add_user_with_role_user(self):\n-        self._add_user(\"user_role\", \"user_role@test.com\", \"test2\", \"/home/\", USER_ROLE)\n+        self._add_user(\"user_role\", \"user_role@test.com\", \"password\", \"/home/\", USER_ROLE)\n         self.assertStatus(200)\n         self.assertEqual(USER_ROLE, self.app.store.get_user('user_role').role)\n \n     def test_add_user_with_invalid_role(self):\n         # When trying to create a new user with an invalid role (admin instead of 0)\n-        self._add_user(\"invalid\", \"invalid@test.com\", \"test2\", \"/home/\", 'admin')\n+        self._add_user(\"invalid\", \"invalid@test.com\", \"test1234\", \"/home/\", 'admin')\n         # Then an error message is displayed to the user\n         self.assertStatus(200)\n         self.assertInBody('role: Invalid Choice: could not coerce')\n@@ -145,7 +145,7 @@ def test_add_user_with_invalid_role(self):\n \n     def test_add_edit_delete(self):\n         #  Add user to be listed\n-        self._add_user(\"test2\", \"test2@test.com\", \"test2\", \"/home/\", USER_ROLE)\n+        self._add_user(\"test2\", \"test2@test.com\", \"test1234\", \"/home/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n         self.assertInBody(\"test2\")\n         self.assertInBody(\"test2@test.com\")\n@@ -175,7 +175,7 @@ def test_add_edit_delete_user_with_encoding(self):\n         \"\"\"\n         Check creation of user with non-ascii char.\n         \"\"\"\n-        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"\u00c9ric\", \"/home/\", USER_ROLE)\n+        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"password\", \"/home/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n         self.assertInBody(\"\u00c9ric\")\n         self.assertInBody(\"\u00e9ric@test.com\")\n@@ -207,9 +207,9 @@ def test_add_user_with_existing_username(self):\n         Verify failure trying to add the same user.\n         \"\"\"\n         # Given a user named `test1`\n-        self._add_user(\"test1\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n         # When trying to create a new user with the same name\n-        self._add_user(\"test1\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n         # Then the user list is displayed with an error message.\n         self.assertStatus(200)\n         self.assertInBody(\"User test1 already exists.\")\n@@ -222,18 +222,18 @@ def test_add_user_with_invalid_root_directory(self):\n             self._delete_user(\"test5\")\n         except Exception:\n             pass\n-        self._add_user(\"test5\", \"test1@test.com\", \"test5\", \"/var/invalid/\", USER_ROLE)\n+        self._add_user(\"test5\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n         self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n \n     def test_add_without_email(self):\n         #  Add user to be listed\n-        self._add_user(\"test2\", None, \"test2\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"test2\", None, \"password\", \"/tmp/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n \n     def test_add_without_user_root(self):\n         #  Add user to be listed\n-        self._add_user(\"test6\", None, \"test6\", None, USER_ROLE)\n+        self._add_user(\"test6\", None, \"password\", None, USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n \n         user = self.app.store.get_user('test6')\n@@ -267,6 +267,15 @@ def test_delete_user_admin(self):\n         self.assertStatus(200)\n         self.assertInBody(\"can&#39;t delete admin user\")\n \n+    def test_change_password_with_too_short(self):\n+        self._edit_user(self.USERNAME, password='short')\n+        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n+\n+    def test_change_password_with_too_long(self):\n+        new_password = 'a' * 129\n+        self._edit_user(self.USERNAME, password=new_password)\n+        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n+\n     def test_change_admin_password(self):\n         # Given rdiffweb is configured with admin-password option\n         self.app.cfg.admin_password = 'hardcoded'\n@@ -284,7 +293,7 @@ def test_edit_user_with_invalid_path(self):\n         Verify failure trying to update user with invalid path.\n         \"\"\"\n         self.app.store.add_user('test1')\n-        self._edit_user(\"test1\", \"test1@test.com\", \"test\", \"/var/invalid/\", USER_ROLE)\n+        self._edit_user(\"test1\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n         self.assertNotInBody(\"User added successfully.\")\n         self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n "
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_prefs.py",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -86,22 +86,31 @@ def test_change_email_with_invalid_email(self):\n \n     def test_change_password(self):\n         # When udating user's password\n-        self._set_password(self.PASSWORD, \"newpass\", \"newpass\")\n+        self._set_password(self.PASSWORD, \"newpassword\", \"newpassword\")\n         self.assertInBody(\"Password updated successfully.\")\n         # Then a notification is raised\n         self.listener.user_password_changed.assert_called_once()\n         # Change it back\n-        self._set_password(\"newpass\", self.PASSWORD, self.PASSWORD)\n+        self._set_password(\"newpassword\", self.PASSWORD, self.PASSWORD)\n         self.assertInBody(\"Password updated successfully.\")\n \n     def test_change_password_with_wrong_confirmation(self):\n         self._set_password(self.PASSWORD, \"t\", \"a\")\n         self.assertInBody(\"The new password and its confirmation do not match.\")\n \n     def test_change_password_with_wrong_password(self):\n-        self._set_password(\"oups\", \"t\", \"t\")\n+        self._set_password(\"oups\", \"newpassword\", \"newpassword\")\n         self.assertInBody(\"Wrong password\")\n \n+    def test_change_password_with_too_short(self):\n+        self._set_password(self.PASSWORD, \"short\", \"short\")\n+        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n+\n+    def test_change_password_with_too_long(self):\n+        new_password = 'a' * 129\n+        self._set_password(self.PASSWORD, new_password, new_password)\n+        self.assertInBody(\"Password must have between 8 and 128 characters.\")\n+\n     def test_invalid_pref(self):\n         \"\"\"\n         Check if invalid prefs url is 404 Not Found."
        },
        {
          "filename": "rdiffweb/core/config.py",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -420,6 +420,20 @@ def get_parser():\n         default=False,\n     )\n \n+    parser.add(\n+        '--password-min-length',\n+        type=int,\n+        help=\"Minimum length of the user's password\",\n+        default=8,\n+    )\n+\n+    parser.add(\n+        '--password-max-length',\n+        type=int,\n+        help=\"Maximum length of the user's password\",\n+        default=128,\n+    )\n+\n     parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n \n     # Here we append a list of arguments for each locale."
        },
        {
          "filename": "rdiffweb/core/store.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -397,6 +397,9 @@ def set_password(self, password, old_password=None):\n         assert old_password is None or isinstance(old_password, str)\n         if not password:\n             raise ValueError(\"password can't be empty\")\n+        cfg = self._store.app.cfg\n+        if cfg.password_min_length > len(password) > cfg.password_max_length:\n+            raise ValueError(\"invalid password length\")\n \n         # Cannot update admin-password if defined\n         if self.username == self._store._admin_user and self._store._admin_password:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb9b10fde29c125a7641a8daad96976bd2cf1307",
            "date": "2024-11-20T02:02:20Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9becf16f0a96fad246021256de58a204318687b8",
            "date": "2024-11-09T12:27:19Z",
            "author_login": "ikus060"
          },
          {
            "sha": "3364f0644d62590b65ad6610d74139edc8a1740f",
            "date": "2024-11-05T20:54:35Z",
            "author_login": "ikus060"
          },
          {
            "sha": "a96f583797b65a8f68d3780c1ed470c7989a56dc",
            "date": "2024-10-24T19:17:53Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9fad72d2a19b78be1e5b9dcd4e880e3f7496dbd0",
            "date": "2024-10-24T18:13:13Z",
            "author_login": "ikus060"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-756",
    "description": "Missing Custom Error Page in GitHub repository ikus060/rdiffweb prior to 2.4.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-13T10:15:12.193",
    "last_modified": "2024-11-21T07:18:58.840",
    "fix_date": "2022-09-12T14:53:06Z"
  },
  "references": [
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/233befc33bdc45d4838c773d5aed4408720504c5",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c40badc3-c9e7-4b69-9e2e-2b9f05865159",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/233befc33bdc45d4838c773d5aed4408720504c5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c40badc3-c9e7-4b69-9e2e-2b9f05865159",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.106386",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rdiffweb",
    "owner": "ikus060",
    "created_at": "2012-10-22T14:14:23Z",
    "updated_at": "2025-01-12T13:25:42Z",
    "pushed_at": "2025-01-07T15:16:06Z",
    "size": 25971,
    "stars": 124,
    "forks": 28,
    "open_issues": 1,
    "watchers": 124,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 857869,
      "HTML": 104946,
      "JavaScript": 7655,
      "Shell": 3945,
      "CSS": 3081,
      "Dockerfile": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:43.805427"
  }
}