{
  "cve_id": "CVE-2022-32166",
  "github_data": {
    "repository": "cloudbase/ovs",
    "fix_commit": "2ed6505555cdcb46f9b1f0329d1491b75290fc73",
    "related_commits": [
      "2ed6505555cdcb46f9b1f0329d1491b75290fc73",
      "2ed6505555cdcb46f9b1f0329d1491b75290fc73"
    ],
    "patch_url": "https://github.com/cloudbase/ovs/commit/2ed6505555cdcb46f9b1f0329d1491b75290fc73.patch",
    "fix_commit_details": {
      "sha": "2ed6505555cdcb46f9b1f0329d1491b75290fc73",
      "commit_date": "2019-07-17T17:55:16Z",
      "author": {
        "login": "blp",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "flow: Avoid unsafe comparison of minimasks.",
        "length": 2099,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 19,
        "additions": 16,
        "deletions": 3
      },
      "files": [
        {
          "filename": "lib/flow.c",
          "status": "modified",
          "additions": 16,
          "deletions": 3,
          "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2017 Nicira, Inc.\n+ * Copyright (c) 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2017, 2019 Nicira, Inc.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -3506,8 +3506,21 @@ minimask_expand(const struct minimask *mask, struct flow_wildcards *wc)\n bool\n minimask_equal(const struct minimask *a, const struct minimask *b)\n {\n-    return !memcmp(a, b, sizeof *a\n-                   + MINIFLOW_VALUES_SIZE(miniflow_n_values(&a->masks)));\n+    /* At first glance, it might seem that this can be reasonably optimized\n+     * into a single memcmp() for the total size of the region.  Such an\n+     * optimization will work OK with most implementations of memcmp() that\n+     * proceed from the start of the regions to be compared to the end in\n+     * reasonably sized chunks.  However, memcmp() is not required to be\n+     * implemented that way, and an implementation that, for example, compares\n+     * all of the bytes in both regions without early exit when it finds a\n+     * difference, or one that compares, say, 64 bytes at a time, could access\n+     * an unmapped region of memory if minimasks 'a' and 'b' have different\n+     * lengths.  By first checking that the maps are the same with the first\n+     * memcmp(), we verify that 'a' and 'b' have the same length and therefore\n+     * ensure that the second memcmp() is safe. */\n+    return (!memcmp(a, b, sizeof *a)\n+            && !memcmp(a + 1, b + 1,\n+                       MINIFLOW_VALUES_SIZE(miniflow_n_values(&a->masks))));\n }\n \n /* Returns true if at least one bit matched by 'b' is wildcarded by 'a',"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "29004db273985088cdb60097bdfd4a6bc6a966d1",
            "date": "2019-07-25T16:09:22Z",
            "author_login": "igsilya"
          },
          {
            "sha": "d560bc1baa522e3c101d3740ecfb17b7723df83d",
            "date": "2019-07-05T15:37:58Z",
            "author_login": "igsilya"
          },
          {
            "sha": "f627cf1dd922bb644b6480bfbda67a9460cb2947",
            "date": "2019-07-22T13:05:20Z",
            "author_login": "igsilya"
          },
          {
            "sha": "91a38e891da7342b84b8ebc86cf0623dd0b203e3",
            "date": "2019-07-22T16:47:09Z",
            "author_login": "blp"
          },
          {
            "sha": "031b1f46d9fdb7f726e102847d1961fbe0f0270f",
            "date": "2019-07-22T16:47:08Z",
            "author_login": "blp"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "In ovs versions v0.90.0 through v2.5.0 are vulnerable to heap buffer over-read in flow.c. An unsafe comparison of \u201cminimasks\u201d function could lead access to an unmapped region of memory. This vulnerability is capable of crashing the software, memory modification, and possible remote execution.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2022-09-28T10:15:09.560",
    "last_modified": "2024-11-21T07:05:51.930",
    "fix_date": "2019-07-17T17:55:16Z"
  },
  "references": [
    {
      "url": "https://github.com/cloudbase/ovs/commit/2ed6505555cdcb46f9b1f0329d1491b75290fc73",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/10/msg00036.html",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.mend.io/vulnerability-database/CVE-2022-32166",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cloudbase/ovs/commit/2ed6505555cdcb46f9b1f0329d1491b75290fc73",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/10/msg00036.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.mend.io/vulnerability-database/CVE-2022-32166",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.294133",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ovs",
    "owner": "cloudbase",
    "created_at": "2015-08-13T15:11:31Z",
    "updated_at": "2019-07-26T12:39:37Z",
    "pushed_at": "2020-12-02T14:51:55Z",
    "size": 90978,
    "stars": 5,
    "forks": 10,
    "open_issues": 0,
    "watchers": 5,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 15246768,
      "Python": 956397,
      "Roff": 324437,
      "Shell": 286152,
      "M4": 139539,
      "Makefile": 126499,
      "C++": 98831,
      "JavaScript": 7350,
      "PowerShell": 5683,
      "Ruby": 3136,
      "Objective-C": 2375,
      "Batchfile": 85
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:30:56.765337"
  }
}