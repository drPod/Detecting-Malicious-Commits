{
  "cve_id": "CVE-2022-32200",
  "github_data": {
    "repository": "davea42/libdwarf-code",
    "fix_commit": "8151575a6ace77d005ca5bb5d71c1bfdba3f7069",
    "related_commits": [
      "8151575a6ace77d005ca5bb5d71c1bfdba3f7069",
      "8151575a6ace77d005ca5bb5d71c1bfdba3f7069"
    ],
    "patch_url": "https://github.com/davea42/libdwarf-code/commit/8151575a6ace77d005ca5bb5d71c1bfdba3f7069.patch",
    "fix_commit_details": {
      "sha": "8151575a6ace77d005ca5bb5d71c1bfdba3f7069",
      "commit_date": "2022-05-29T16:35:39Z",
      "author": {
        "login": "davea42",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixes vulnerability DW202205-001",
        "length": 204,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 81,
        "additions": 73,
        "deletions": 8
      },
      "files": [
        {
          "filename": "src/lib/libdwarf/dwarf_global.c",
          "status": "modified",
          "additions": 73,
          "deletions": 8,
          "patch": "@@ -31,7 +31,6 @@\n #include <config.h>\n \n #include <string.h> /* strlen() */\n-\n #if defined(_WIN32) && defined(HAVE_STDAFX_H)\n #include \"stdafx.h\"\n #endif /* HAVE_STDAFX_H */\n@@ -83,6 +82,33 @@ _dwarf_fix_up_offset_irix(Dwarf_Debug dbg,\n }\n #endif /* __sgi */\n \n+#if 0\n+/*  Debugging only. Requires start. can calulate one of len, end */\n+static void\n+debug_print_range(const char *msg,\n+    int lineno,\n+    void *start, signed long len,\n+    void *end)\n+{\n+\n+    char *st = (char *)start;\n+    char *en = (char *)end;\n+    signed long le = len;\n+\n+    if (len) {\n+        if (en) {\n+            le = (long)(en-st);\n+        } else {\n+            en= start+len;\n+        }\n+    } else if (en) {\n+        le = (long)(en-st);\n+    }\n+    printf(\"RANGEdebug %s  st=0x%lx le=%ld en=0x%lx line %d\\n\",\n+        msg,(unsigned long)st,le,(unsigned long)en,lineno);\n+}\n+#endif\n+\n static void\n dealloc_globals_chain(Dwarf_Debug dbg,\n     Dwarf_Chain head_chain)\n@@ -287,9 +313,9 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,\n     Dwarf_Off pubnames_section_offset = 0;\n     Dwarf_Small *section_end_ptr = section_data_ptr +section_length;\n \n-    /*  Points to the context for the current set of global names, and\n-        contains information to identify the compilation-unit that the\n-        set refers to. */\n+    /*  Points to the context for the current set of global names,\n+        and contains information to identify the compilation-unit\n+        that the set refers to. */\n     Dwarf_Global_Context pubnames_context = 0;\n     Dwarf_Bool           pubnames_context_on_list = FALSE;\n \n@@ -301,6 +327,10 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,\n \n     Dwarf_Unsigned global_count = 0;\n \n+    /*  The count is just to improve the error message\n+        a few lines above. */\n+    Dwarf_Unsigned context_count = 0;\n+\n     /*  Used to chain the Dwarf_Global_s structs for\n         creating contiguous list of pointers to the structs. */\n     Dwarf_Chain head_chain = 0;\n@@ -384,6 +414,41 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,\n             }\n             return mres;\n         }\n+        {\n+            Dwarf_Small * localend =pubnames_like_ptr + length;\n+\n+            if ((length > section_length) ||\n+                (localend > section_end_ptr)){\n+                /*  The length field  is corrupted */\n+                dwarfstring m;\n+\n+                dwarfstring_constructor(&m);\n+                dwarfstring_append_printf_u(&m,\n+                    \"DW_DLE_PUBNAMES_LENGTH_BAD (or similar) \"\n+                    \"A DWARF length field in cu context %u \",\n+                    context_count);\n+                dwarfstring_append_printf_s(&m,\"of section %s \",\n+                    (char *)secname);\n+                dwarfstring_append_printf_u(&m,\"of \"\n+                    \"%u bytes \",length);\n+                dwarfstring_append_printf_u(&m,\n+                    \"runs off the end of \"\n+                    \"the %u bytes of the real section\",\n+                    section_length);\n+                _dwarf_error_string(dbg, error,length_err_num,\n+                    dwarfstring_string(&m));\n+                dwarfstring_destructor(&m);\n+                dealloc_globals_chain(dbg,head_chain);\n+                if (!pubnames_context_on_list) {\n+                    dwarf_dealloc(dbg,pubnames_context,\n+                        context_DLA_code);\n+                }\n+                return DW_DLV_ERROR;\n+            }\n+        }\n+        /*  The count is just to improve the error message\n+            a few lines above. */\n+        ++context_count;\n         pubnames_context->pu_alloc_type = context_DLA_code;\n         pubnames_context->pu_length_size = local_length_size;\n         pubnames_context->pu_length = length;\n@@ -393,8 +458,7 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,\n         pubnames_ptr_past_end_cu = pubnames_like_ptr + length;\n         pubnames_context->pu_pub_entries_end_ptr =\n             pubnames_ptr_past_end_cu;\n-\n-        if ((pubnames_like_ptr + (DWARF_HALF_SIZE) ) >\n+        if ((pubnames_like_ptr + (DWARF_HALF_SIZE) ) >=\n             /* A minimum size needed */\n             section_end_ptr) {\n             pubnames_error_length(dbg,error,\n@@ -554,6 +618,7 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,\n         while (die_offset_in_cu) {\n             int res = 0;\n             unsigned char *glname = 0;\n+            Dwarf_Unsigned nstrlen = 0;\n \n             /*  non-zero die_offset_in_cu already read, so\n                 pubnames_like_ptr points to a string.  */\n@@ -570,8 +635,8 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,\n                 return res;\n             }\n             glname = (unsigned char *)pubnames_like_ptr;\n-            pubnames_like_ptr = pubnames_like_ptr +\n-                strlen((char *) pubnames_like_ptr) + 1;\n+            nstrlen = strlen((char *)pubnames_like_ptr);\n+            pubnames_like_ptr += nstrlen + 1;\n             /*  Already read offset and verified string, glname\n                 now points to the string. */\n             res = _dwarf_make_global_add_to_chain(dbg,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ed74b438dcbbf74759a15324c93d924191823ea7",
            "date": "2025-01-08T16:46:57Z",
            "author_login": "davea42"
          },
          {
            "sha": "85df8598586f0020cabc61d301679cea718e9071",
            "date": "2025-01-03T23:26:32Z",
            "author_login": "davea42"
          },
          {
            "sha": "dd06108cc6beea4ae1be2eaf1953328ffab313d7",
            "date": "2025-01-03T23:11:30Z",
            "author_login": "davea42"
          },
          {
            "sha": "8de7d149d6e10f06dc03f50741350aa1d75adaa6",
            "date": "2025-01-03T23:05:15Z",
            "author_login": "davea42"
          },
          {
            "sha": "22250afb0ade2fef537629fb428ab305707cf3dc",
            "date": "2025-01-03T22:51:55Z",
            "author_login": "davea42"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-125",
    "description": "libdwarf 0.4.0 has a heap-based buffer over-read in _dwarf_check_string_valid in dwarf_util.c.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-02T14:16:01.167",
    "last_modified": "2024-11-21T07:05:54.413",
    "fix_date": "2022-05-29T16:35:39Z"
  },
  "references": [
    {
      "url": "https://github.com/davea42/libdwarf-code/commit/8151575a6ace77d005ca5bb5d71c1bfdba3f7069",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/davea42/libdwarf-code/issues/116",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.prevanders.net/dwarfbug.html",
      "source": "cve@mitre.org",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/davea42/libdwarf-code/commit/8151575a6ace77d005ca5bb5d71c1bfdba3f7069",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/davea42/libdwarf-code/issues/116",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.prevanders.net/dwarfbug.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.218486",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libdwarf-code",
    "owner": "davea42",
    "created_at": "2021-05-13T22:28:28Z",
    "updated_at": "2025-01-14T06:13:32Z",
    "pushed_at": "2025-01-08T16:51:12Z",
    "size": 119213,
    "stars": 186,
    "forks": 72,
    "open_issues": 1,
    "watchers": 186,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C": 5268374,
      "HTML": 370020,
      "C++": 229587,
      "Shell": 49342,
      "CMake": 43031,
      "Python": 42860,
      "Makefile": 32614,
      "Meson": 25330,
      "M4": 20654
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:07:46.695109"
  }
}