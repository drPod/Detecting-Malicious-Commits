{
  "cve_id": "CVE-2022-32234",
  "github_data": {
    "repository": "facebook/hermes",
    "fix_commit": "06eaec767e376bfdb883d912cb15e987ddf2bda1",
    "related_commits": [
      "06eaec767e376bfdb883d912cb15e987ddf2bda1",
      "06eaec767e376bfdb883d912cb15e987ddf2bda1"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "06eaec767e376bfdb883d912cb15e987ddf2bda1",
      "commit_date": "2022-07-06T23:51:56Z",
      "author": {
        "login": "facebook-github-bot",
        "type": "User",
        "stats": {
          "total_commits": 11,
          "average_weekly_commits": 0.037800687285223365,
          "total_additions": 608,
          "total_deletions": 17685,
          "weeks_active": 11
        }
      },
      "commit_message": {
        "title": "Re-sync with internal repository (#772)",
        "length": 134,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 80,
        "additions": 69,
        "deletions": 11
      },
      "files": [
        {
          "filename": "external/llvh/include/llvh/ADT/SmallVector.h",
          "status": "modified",
          "additions": 9,
          "deletions": 5,
          "patch": "@@ -238,12 +238,16 @@ class SmallVectorTemplateBase : public SmallVectorTemplateCommon<T> {\n // Define this out-of-line to dissuade the C++ compiler from inlining it.\n template <typename T, bool isPodLike>\n void SmallVectorTemplateBase<T, isPodLike>::grow(size_t MinSize) {\n-  if (MinSize > UINT32_MAX)\n-    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n-\n   // Always grow, even from zero.\n-  size_t NewCapacity = size_t(NextPowerOf2(this->capacity() + 2));\n-  NewCapacity = std::min(std::max(NewCapacity, MinSize), size_t(UINT32_MAX));\n+  constexpr size_t MinGrowth = 2;\n+  size_t NewCapacity = size_t(NextPowerOf2(this->capacity() + MinGrowth));\n+  NewCapacity = static_cast<unsigned>(std::max(NewCapacity, MinSize));\n+  // Ensure that NewCapacity did not overflow an unsigned int,\n+  // and that the capacity in bytes will not overflow a size_t.\n+  if (NewCapacity <= this->capacity() ||\n+      NewCapacity < MinSize ||\n+      NewCapacity > size_t(-1) / sizeof(T))\n+    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n   T *NewElts = static_cast<T*>(llvh::safe_malloc(NewCapacity*sizeof(T)));\n \n   // Move the elements over."
        },
        {
          "filename": "external/llvh/lib/Support/SmallVector.cpp",
          "status": "modified",
          "additions": 9,
          "deletions": 6,
          "patch": "@@ -42,13 +42,16 @@ static_assert(sizeof(SmallVector<void *, 1>) ==\n /// on POD-like datatypes and is out of line to reduce code duplication.\n void SmallVectorBase::grow_pod(void *FirstEl, size_t MinCapacity,\n                                size_t TSize) {\n-  // Ensure we can fit the new capacity in 32 bits.\n-  if (MinCapacity > UINT32_MAX)\n-    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n+  constexpr size_t MinGrowth = 1;\n+  size_t NewCapacity = 2 * capacity() + MinGrowth; // Always grow.\n+  NewCapacity = static_cast<unsigned>(std::max(NewCapacity, MinCapacity));\n \n-  size_t NewCapacity = 2 * capacity() + 1; // Always grow.\n-  NewCapacity =\n-      std::min(std::max(NewCapacity, MinCapacity), size_t(UINT32_MAX));\n+  // Ensure that NewCapacity did not overflow an unsigned int,\n+  // and that the capacity in bytes will not overflow a size_t.\n+  if (NewCapacity <= this->capacity() ||\n+      NewCapacity < MinCapacity ||\n+      NewCapacity > size_t(-1) / TSize)\n+    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n \n   void *NewElts;\n   if (BeginX == FirstEl) {"
        },
        {
          "filename": "external/llvh/patches/SmallVector.patch",
          "status": "added",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -0,0 +1,51 @@\n+diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/SmallVector.h b/xplat/hermes/external/llvh/include/llvh/ADT/SmallVector.h\n+--- a/xplat/hermes/external/llvh/include/llvh/ADT/SmallVector.h\n++++ b/xplat/hermes/external/llvh/include/llvh/ADT/SmallVector.h\n+@@ -238,12 +238,16 @@\n+ // Define this out-of-line to dissuade the C++ compiler from inlining it.\n+ template <typename T, bool isPodLike>\n+ void SmallVectorTemplateBase<T, isPodLike>::grow(size_t MinSize) {\n+-  if (MinSize > UINT32_MAX)\n+-    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n+-\n+   // Always grow, even from zero.\n+-  size_t NewCapacity = size_t(NextPowerOf2(this->capacity() + 2));\n+-  NewCapacity = std::min(std::max(NewCapacity, MinSize), size_t(UINT32_MAX));\n++  constexpr size_t MinGrowth = 2;\n++  size_t NewCapacity = size_t(NextPowerOf2(this->capacity() + MinGrowth));\n++  NewCapacity = static_cast<unsigned>(std::max(NewCapacity, MinSize));\n++  // Ensure that NewCapacity did not overflow an unsigned int,\n++  // and that the capacity in bytes will not overflow a size_t.\n++  if (NewCapacity <= this->capacity() ||\n++      NewCapacity < MinSize ||\n++      NewCapacity > size_t(-1) / sizeof(T))\n++    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n+   T *NewElts = static_cast<T*>(llvh::safe_malloc(NewCapacity*sizeof(T)));\n+ \n+   // Move the elements over.\n+diff --git a/xplat/hermes/external/llvh/lib/Support/SmallVector.cpp b/xplat/hermes/external/llvh/lib/Support/SmallVector.cpp\n+--- a/xplat/hermes/external/llvh/lib/Support/SmallVector.cpp\n++++ b/xplat/hermes/external/llvh/lib/Support/SmallVector.cpp\n+@@ -42,13 +42,16 @@\n+ /// on POD-like datatypes and is out of line to reduce code duplication.\n+ void SmallVectorBase::grow_pod(void *FirstEl, size_t MinCapacity,\n+                                size_t TSize) {\n+-  // Ensure we can fit the new capacity in 32 bits.\n+-  if (MinCapacity > UINT32_MAX)\n+-    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n++  constexpr size_t MinGrowth = 1;\n++  size_t NewCapacity = 2 * capacity() + MinGrowth; // Always grow.\n++  NewCapacity = static_cast<unsigned>(std::max(NewCapacity, MinCapacity));\n+ \n+-  size_t NewCapacity = 2 * capacity() + 1; // Always grow.\n+-  NewCapacity =\n+-      std::min(std::max(NewCapacity, MinCapacity), size_t(UINT32_MAX));\n++  // Ensure that NewCapacity did not overflow an unsigned int,\n++  // and that the capacity in bytes will not overflow a size_t.\n++  if (NewCapacity <= this->capacity() ||\n++      NewCapacity < MinCapacity ||\n++      NewCapacity > size_t(-1) / TSize)\n++    report_bad_alloc_error(\"SmallVector capacity overflow during allocation\");\n+ \n+   void *NewElts;\n+   if (BeginX == FirstEl) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7af61dbdde40ff8beefdebd778c116b10b43977b",
            "date": "2025-01-25T02:21:37Z",
            "author_login": "panagosg7"
          },
          {
            "sha": "ee1ac30851fb6f17250bdf756f917c2c7817ec15",
            "date": "2025-01-24T23:46:27Z",
            "author_login": "neildhar"
          },
          {
            "sha": "608c5ba92c43bcac98c268075be8c15fc891dcd5",
            "date": "2025-01-24T22:56:03Z",
            "author_login": "lavenzg"
          },
          {
            "sha": "576fbeac375e30747f539e595e81ac62f0001cca",
            "date": "2025-01-24T22:03:46Z",
            "author_login": "tsaichien"
          },
          {
            "sha": "a08b71bb6f93966e9f58ea91105b648c5573e191",
            "date": "2025-01-24T22:03:46Z",
            "author_login": "tsaichien"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-787",
    "description": "An out of bounds write in hermes, while handling large arrays, prior to commit 06eaec767e376bfdb883d912cb15e987ddf2bda1 allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-11T01:15:08.893",
    "last_modified": "2024-11-21T07:05:58.767",
    "fix_date": "2022-07-06T23:51:56Z"
  },
  "references": [
    {
      "url": "https://github.com/facebook/hermes/commit/06eaec767e376bfdb883d912cb15e987ddf2bda1",
      "source": "cve-assign@fb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.facebook.com/security/advisories/CVE-2022-32234",
      "source": "cve-assign@fb.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/facebook/hermes/commit/06eaec767e376bfdb883d912cb15e987ddf2bda1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.facebook.com/security/advisories/CVE-2022-32234",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.321872",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "hermes",
    "owner": "facebook",
    "created_at": "2018-10-22T19:13:00Z",
    "updated_at": "2025-01-25T02:24:07Z",
    "pushed_at": "2025-01-25T02:24:02Z",
    "size": 97415,
    "stars": 10060,
    "forks": 651,
    "open_issues": 165,
    "watchers": 10060,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "gh-pages",
      "main"
    ],
    "languages": {
      "C++": 10951483,
      "JavaScript": 7957683,
      "Rust": 1201532,
      "Python": 337456,
      "Java": 319660,
      "TypeScript": 184977,
      "Objective-C++": 113458,
      "CMake": 113065,
      "C": 41344,
      "Shell": 38189,
      "Swift": 22129,
      "NASL": 4993,
      "Ruby": 3189,
      "DTrace": 574,
      "Objective-C": 303,
      "D": 225
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:38:59.629104"
  }
}