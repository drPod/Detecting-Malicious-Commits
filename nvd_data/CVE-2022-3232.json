{
  "cve_id": "CVE-2022-3232",
  "github_data": {
    "repository": "ikus060/rdiffweb",
    "fix_commit": "422791ea45713aaaa865bdca74addb9fffd93a71",
    "related_commits": [
      "422791ea45713aaaa865bdca74addb9fffd93a71",
      "422791ea45713aaaa865bdca74addb9fffd93a71"
    ],
    "patch_url": "https://github.com/ikus060/rdiffweb/commit/422791ea45713aaaa865bdca74addb9fffd93a71.patch",
    "fix_commit_details": {
      "sha": "422791ea45713aaaa865bdca74addb9fffd93a71",
      "commit_date": "2022-09-16T15:38:46Z",
      "author": {
        "login": "ikus060",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Mitigate CSRF on repository deletion and user deletion #214 #215",
        "length": 64,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 161,
        "additions": 109,
        "deletions": 52
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -107,6 +107,12 @@ Professional support for Rdiffweb is available by contacting [IKUS Soft](https:/\n \n # Changelog\n \n+## 2.4.5 (2002-09-16)\n+\n+This releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n+\n+* Mitigate CSRF on repository deletion and user deletion [CVE-2022-3232](https://nvd.nist.gov/vuln/detail/CVE-2022-3232) #214 #215\n+\n ## 2.4.4 (2002-09-15)\n \n This releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n@@ -117,7 +123,7 @@ This releases include a security fix. If you are using an earlier version, you s\n \n This releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n \n-* Mitigate CSRF in profile's SSH Keys #212\n+* Mitigate CSRF in profile's SSH Keys [CVE-2022-3221](https://nvd.nist.gov/vuln/detail/CVE-2022-3221) #212\n \n ## 2.4.2 (2022-09-12)\n "
        },
        {
          "filename": "rdiffweb/controller/page_admin.py",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -190,15 +190,13 @@ class UserForm(CherryForm):\n         _('Quota Used'), validators=[validators.optional()], description=_(\"Disk spaces (in bytes) used by this user.\")\n     )\n \n-    def __init__(self, *args, **kwargs):\n-        super().__init__(*args, **kwargs)\n-        self.password.validators += [\n-            validators.length(\n-                min=self.app.cfg.password_min_length,\n-                max=self.app.cfg.password_max_length,\n-                message=_('Password must have between %(min)d and %(max)d characters.'),\n-            )\n-        ]\n+    def validate_password(self, field):\n+        validator = validators.length(\n+            min=self.app.cfg.password_min_length,\n+            max=self.app.cfg.password_max_length,\n+            message=_('Password must have between %(min)d and %(max)d characters.'),\n+        )\n+        validator(self, field)\n \n     @property\n     def app(self):\n@@ -340,7 +338,9 @@ def users(self, username=None, criteria=u\"\", search=u\"\", action=u\"\", **kwargs):\n             else:\n                 flash(_(\"Cannot edit user `%s`: user doesn't exists\") % username, level='error')\n         elif action == 'delete':\n-            self._delete_user(action, DeleteUserForm())\n+            form = DeleteUserForm()\n+            if form.validate_on_submit():\n+                self._delete_user(action, form)\n \n         params = {\n             \"add_form\": UserForm(formdata=None),"
        },
        {
          "filename": "rdiffweb/controller/page_delete.py",
          "status": "modified",
          "additions": 22,
          "deletions": 15,
          "patch": "@@ -22,24 +22,29 @@\n # Define the logger\r\n \r\n import logging\r\n+import os\r\n \r\n import cherrypy\r\n-from wtforms import validators\r\n from wtforms.fields.core import StringField\r\n+from wtforms.validators import DataRequired, ValidationError\r\n \r\n from rdiffweb.controller import Controller\r\n from rdiffweb.controller.cherrypy_wtf import CherryForm\r\n from rdiffweb.controller.dispatch import poppath\r\n from rdiffweb.controller.filter_authorization import is_maintainer\r\n from rdiffweb.core.librdiff import AccessDeniedError, DoesNotExistError\r\n+from rdiffweb.core.rdw_templating import url_for\r\n from rdiffweb.tools.i18n import ugettext as _\r\n \r\n _logger = logging.getLogger(__name__)\r\n \r\n \r\n class DeleteRepoForm(CherryForm):\r\n-    confirm = StringField(_('Confirmation'), validators=[validators.data_required()])\r\n-    redirect = StringField(default='/')\r\n+    confirm = StringField(_('Confirmation'), validators=[DataRequired()])\r\n+\r\n+    def validate_confirm(self, field):\r\n+        if self.confirm.data != self.expected_confirm:\r\n+            raise ValidationError(_('Invalid value, must be: %s') % self.expected_confirm)\r\n \r\n \r\n @poppath()\r\n@@ -61,15 +66,17 @@ def default(self, path=b\"\", **kwargs):\n \r\n         # validate form\r\n         form = DeleteRepoForm()\r\n-        if not form.validate():\r\n-            raise cherrypy.HTTPError(400, form.error_message)\r\n-\r\n-        # Validate the name\r\n-        if form.confirm.data != path_obj.display_name:\r\n-            _logger.info(\"do not delete repo, bad confirmation %r != %r\", form.confirm.data, path_obj.display_name)\r\n-            raise cherrypy.HTTPError(400, 'bad confirmation')\r\n-\r\n-        # Delete repository in background using a schedule task.\r\n-        scheduled = cherrypy.engine.publish('schedule_task', repo.delete, path)\r\n-        assert scheduled\r\n-        raise cherrypy.HTTPRedirect(form.redirect.data)\r\n+        form.expected_confirm = path_obj.display_name\r\n+        if form.is_submitted():\r\n+            if form.validate():\r\n+                cherrypy.engine.publish('schedule_task', repo.delete, path)\r\n+                # Redirect to parent folder or to root if repo get deleted\r\n+                if path_obj.isroot:\r\n+                    raise cherrypy.HTTPRedirect(url_for('/'))\r\n+                else:\r\n+                    parent_path = repo.fstat(os.path.dirname(path_obj.path))\r\n+                    raise cherrypy.HTTPRedirect(url_for('browse', repo, parent_path))\r\n+            else:\r\n+                raise cherrypy.HTTPError(400, form.error_message)\r\n+        else:\r\n+            raise cherrypy.HTTPError(405)\r"
        },
        {
          "filename": "rdiffweb/controller/pref_general.py",
          "status": "modified",
          "additions": 7,
          "deletions": 9,
          "patch": "@@ -54,15 +54,13 @@ class UserPasswordForm(CherryForm):\n         _('Confirm new password'), validators=[InputRequired(_(\"Confirmation password is missing.\"))]\n     )\n \n-    def __init__(self, *args, **kwargs):\n-        super().__init__(*args, **kwargs)\n-        self.new.validators += [\n-            Length(\n-                min=self.app.cfg.password_min_length,\n-                max=self.app.cfg.password_max_length,\n-                message=_('Password must have between %(min)d and %(max)d characters.'),\n-            )\n-        ]\n+    def validate_new(self, field):\n+        validator = Length(\n+            min=self.app.cfg.password_min_length,\n+            max=self.app.cfg.password_max_length,\n+            message=_('Password must have between %(min)d and %(max)d characters.'),\n+        )\n+        validator(self, field)\n \n     @property\n     def app(self):"
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_admin.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -267,6 +267,16 @@ def test_delete_user_admin(self):\n         self.assertStatus(200)\n         self.assertInBody(\"can&#39;t delete admin user\")\n \n+    def test_delete_user_method_get(self):\n+        # Given a user\n+        self.app.store.add_user('newuser')\n+        # When trying to delete this user using method GET\n+        self.getPage(\"/admin/users/?action=delete&username=newuser\", method='GET')\n+        # Then page return without error\n+        self.assertStatus(200)\n+        # Then user is not deleted\n+        self.assertIsNotNone(self.app.store.get_user('newuser'))\n+\n     def test_change_password_with_too_short(self):\n         self._edit_user(self.USERNAME, password='short')\n         self.assertInBody(\"Password must have between 8 and 128 characters.\")"
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_delete.py",
          "status": "modified",
          "additions": 53,
          "deletions": 17,
          "patch": "@@ -37,33 +37,59 @@ class DeleteRepoTest(rdiffweb.test.WebCase):\n \n     login = True\n \n-    def _delete(self, user, repo, confirm, redirect=None):\n+    def _delete(self, user, repo, confirm):\n         body = {}\n         if confirm is not None:\n             body.update({'confirm': confirm})\n-        if redirect is not None:\n-            body['redirect'] = redirect\n         self.getPage(\"/delete/\" + user + \"/\" + repo + \"/\", method=\"POST\", body=body)\n \n     @skipIf(RDIFF_BACKUP_VERSION < (2, 0, 1), \"rdiff-backup-delete is available since 2.0.1\")\n     @parameterized.expand(\n         [\n-            (\"with_dir\", 'admin', '/testcases/Revisions', 'Revisions', 303, 404),\n+            (\"with_dir\", 'admin', '/testcases/Revisions', 'Revisions', 303, 404, '/browse/admin/testcases'),\n             (\"with_dir_wrong_confirmation\", 'admin', '/testcases/Revisions', 'invalid', 400, 200),\n-            (\"with_file\", 'admin', '/testcases/Revisions/Data', 'Data', 303, 404),\n+            (\"with_file\", 'admin', '/testcases/Revisions/Data', 'Data', 303, 404, '/browse/admin/testcases/Revisions'),\n             (\"with_file_wrong_confirmation\", 'admin', '/testcases/Revisions/Data', 'invalid', 400, 200),\n             (\"with_invalid\", 'admin', '/testcases/invalid', 'invalid', 404, 404),\n-            (\"with_broken_symlink\", 'admin', '/testcases/BrokenSymlink', 'BrokenSymlink', 303, 404),\n-            (\"with_utf8\", 'admin', '/testcases/R%C3%A9pertoire%20Existant', 'R\u00e9pertoire Existant', 303, 404),\n+            (\n+                \"with_broken_symlink\",\n+                'admin',\n+                '/testcases/BrokenSymlink',\n+                'BrokenSymlink',\n+                303,\n+                404,\n+                '/browse/admin/testcases',\n+            ),\n+            (\n+                \"with_utf8\",\n+                'admin',\n+                '/testcases/R%C3%A9pertoire%20Existant',\n+                'R\u00e9pertoire Existant',\n+                303,\n+                404,\n+                '/browse/admin/testcases',\n+            ),\n             (\"with_rdiff_backup_data\", 'admin', '/testcases/rdiff-backup-data', 'rdiff-backup-data', 404, 404),\n-            (\"with_quoted_path\", 'admin', '/testcases/Char%20%3B090%20to%20quote', 'Char Z to quote', 303, 404),\n+            (\n+                \"with_quoted_path\",\n+                'admin',\n+                '/testcases/Char%20%3B090%20to%20quote',\n+                'Char Z to quote',\n+                303,\n+                404,\n+                '/browse/admin/testcases',\n+            ),\n         ]\n     )\n-    def test_delete_path(self, unused, username, path, confirmation, expected_status, expected_history_status):\n+    def test_delete_path(\n+        self, unused, username, path, confirmation, expected_status, expected_history_status, expected_redirect=None\n+    ):\n         # When trying to delete a file or a folder with a confirmation\n         self._delete(username, path, confirmation)\n         # Then a status is returned\n         self.assertStatus(expected_status)\n+        if expected_redirect:\n+            self.assertHeaderItemValue('Location', self.baseurl + expected_redirect)\n         # Check filesystem\n         sleep(1)\n         self.getPage(\"/history/\" + username + \"/\" + path)\n@@ -78,6 +104,7 @@ def test_delete_repo(self):\n         # Delete repo\n         self._delete(self.USERNAME, self.REPO, 'testcases')\n         self.assertStatus(303)\n+        self.assertHeaderItemValue('Location', self.baseurl + '/')\n         # Check filesystem\n         sleep(1)\n         self.assertEqual(['broker-repo'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n@@ -89,6 +116,7 @@ def test_delete_repo_with_slash(self):\n         # Then delete it.\n         self._delete(self.USERNAME, self.REPO, 'testcases')\n         self.assertStatus(303)\n+        self.assertHeaderItemValue('Location', self.baseurl + '/')\n         # Check filesystem\n         sleep(1)\n         self.assertEqual(['broker-repo'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n@@ -125,10 +153,9 @@ def test_delete_repo_as_admin(self):\n         user_obj.user_root = self.testcases\n         self.assertEqual(['broker-repo', 'testcases'], [r.name for r in user_obj.repo_objs])\n \n-        self._delete('anotheruser', 'testcases', 'testcases', redirect='/admin/repos/')\n+        self._delete('anotheruser', 'testcases', 'testcases')\n         self.assertStatus(303)\n-        location = self.assertHeader('Location')\n-        self.assertTrue(location.endswith('/admin/repos/'))\n+        self.assertHeaderItemValue('Location', self.baseurl + '/')\n \n         # Check filesystem\n         sleep(1)\n@@ -147,11 +174,10 @@ def test_delete_repo_as_maintainer(self):\n         # Login as maintainer\n         self._login('maintainer', 'password')\n \n-        # Try to delete own own repo\n-        self._delete('maintainer', 'testcases', 'testcases', redirect='/admin/repos/')\n+        # Try to delete your own repo\n+        self._delete('maintainer', 'testcases', 'testcases')\n         self.assertStatus(303)\n-        location = self.assertHeader('Location')\n-        self.assertTrue(location.endswith('/admin/repos/'))\n+        self.assertHeaderItemValue('Location', self.baseurl + '/')\n \n         # Check filesystem\n         sleep(1)\n@@ -169,7 +195,7 @@ def test_delete_repo_as_user(self):\n         self._login('user', 'password')\n \n         # Try to delete own own repo\n-        self._delete('user', 'testcases', 'testcases', redirect='/admin/repos/')\n+        self._delete('user', 'testcases', 'testcases')\n         self.assertStatus(403)\n \n         # Check database don't change\n@@ -183,3 +209,13 @@ def test_delete_repo_does_not_exists(self):\n         self._delete(self.USERNAME, repo, repo)\n         # Then a 404 is return to the user\n         self.assertStatus(404)\n+\n+    def test_delete_method_get(self):\n+        # Given a user with repo\n+        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])\n+        # When trying to deleted repo with GET method\n+        self.getPage(\"/delete/\" + self.USERNAME + \"/\" + self.REPO + \"/?confirm=\" + self.REPO, method=\"GET\")\n+        # Then An error is returned\n+        self.assertStatus(405)\n+        # Then repo still exists\n+        self.assertEqual(['broker-repo', 'testcases'], [r.name for r in self.app.store.get_user('admin').repo_objs])"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb9b10fde29c125a7641a8daad96976bd2cf1307",
            "date": "2024-11-20T02:02:20Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9becf16f0a96fad246021256de58a204318687b8",
            "date": "2024-11-09T12:27:19Z",
            "author_login": "ikus060"
          },
          {
            "sha": "3364f0644d62590b65ad6610d74139edc8a1740f",
            "date": "2024-11-05T20:54:35Z",
            "author_login": "ikus060"
          },
          {
            "sha": "a96f583797b65a8f68d3780c1ed470c7989a56dc",
            "date": "2024-10-24T19:17:53Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9fad72d2a19b78be1e5b9dcd4e880e3f7496dbd0",
            "date": "2024-10-24T18:13:13Z",
            "author_login": "ikus060"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-352",
    "description": "Cross-Site Request Forgery (CSRF) in GitHub repository ikus060/rdiffweb prior to 2.4.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-17T20:15:09.283",
    "last_modified": "2024-11-21T07:19:06.240",
    "fix_date": "2022-09-16T15:38:46Z"
  },
  "references": [
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/422791ea45713aaaa865bdca74addb9fffd93a71",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/15c8fd98-7f50-4d46-b013-42710af1f99c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/422791ea45713aaaa865bdca74addb9fffd93a71",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/15c8fd98-7f50-4d46-b013-42710af1f99c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.137719",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rdiffweb",
    "owner": "ikus060",
    "created_at": "2012-10-22T14:14:23Z",
    "updated_at": "2025-01-12T13:25:42Z",
    "pushed_at": "2025-01-07T15:16:06Z",
    "size": 25971,
    "stars": 124,
    "forks": 28,
    "open_issues": 1,
    "watchers": 124,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 857869,
      "HTML": 104946,
      "JavaScript": 7655,
      "Shell": 3945,
      "CSS": 3081,
      "Dockerfile": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:43.805427"
  }
}