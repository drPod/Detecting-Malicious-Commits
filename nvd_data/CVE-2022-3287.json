{
  "cve_id": "CVE-2022-3287",
  "github_data": {
    "repository": "fwupd/fwupd",
    "fix_commit": "ea676855f2119e36d433fbd2ed604039f53b2091",
    "related_commits": [
      "ea676855f2119e36d433fbd2ed604039f53b2091",
      "ea676855f2119e36d433fbd2ed604039f53b2091"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "ea676855f2119e36d433fbd2ed604039f53b2091",
      "commit_date": "2022-09-21T13:56:10Z",
      "author": {
        "login": "hughsie",
        "type": "User",
        "stats": {
          "total_commits": 8025,
          "average_weekly_commits": 15.46242774566474,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 478
        }
      },
      "commit_message": {
        "title": "Never save the Redfish passwords to a file readable by users",
        "length": 774,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 125,
        "additions": 114,
        "deletions": 11
      },
      "files": [
        {
          "filename": "contrib/fwupd.spec.in",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -326,6 +326,9 @@ for fn in /etc/fwupd/remotes.d/*.conf; do\n     fi\n done\n \n+# ensure this is private\n+chmod 0660 /etc/fwupd/redfish.conf\n+\n %preun\n %systemd_preun fwupd.service\n "
        },
        {
          "filename": "libfwupdplugin/fu-plugin.c",
          "status": "modified",
          "additions": 54,
          "deletions": 11,
          "patch": "@@ -9,6 +9,7 @@\n #include \"config.h\"\n \n #include <errno.h>\n+#include <fcntl.h>\n #include <fwupd.h>\n #include <glib/gstdio.h>\n #include <gmodule.h>\n@@ -2417,6 +2418,46 @@ fu_plugin_set_config_value(FuPlugin *self, const gchar *key, const gchar *value,\n \treturn g_key_file_save_to_file(keyfile, conf_path, error);\n }\n \n+#if !GLIB_CHECK_VERSION(2, 66, 0)\n+\n+#define G_FILE_SET_CONTENTS_CONSISTENT 0\n+typedef guint GFileSetContentsFlags;\n+static gboolean\n+g_file_set_contents_full(const gchar *filename,\n+\t\t\t const gchar *contents,\n+\t\t\t gssize length,\n+\t\t\t GFileSetContentsFlags flags,\n+\t\t\t int mode,\n+\t\t\t GError **error)\n+{\n+\tgint fd;\n+\tgssize wrote;\n+\n+\tif (length < 0)\n+\t\tlength = strlen(contents);\n+\tfd = g_open(filename, O_CREAT, mode);\n+\tif (fd <= 0) {\n+\t\tg_set_error(error,\n+\t\t\t    G_IO_ERROR,\n+\t\t\t    G_IO_ERROR_FAILED,\n+\t\t\t    \"could not open %s file\",\n+\t\t\t    filename);\n+\t\treturn FALSE;\n+\t}\n+\twrote = write(fd, contents, length);\n+\tif (wrote != length) {\n+\t\tg_set_error(error,\n+\t\t\t    G_IO_ERROR,\n+\t\t\t    G_IO_ERROR_FAILED,\n+\t\t\t    \"did not write %s file\",\n+\t\t\t    filename);\n+\t\tg_close(fd, NULL);\n+\t\treturn FALSE;\n+\t}\n+\treturn g_close(fd, error);\n+}\n+#endif\n+\n /**\n  * fu_plugin_set_secure_config_value:\n  * @self: a #FuPlugin\n@@ -2438,7 +2479,8 @@ fu_plugin_set_secure_config_value(FuPlugin *self,\n \t\t\t\t  GError **error)\n {\n \tg_autofree gchar *conf_path = fu_plugin_get_config_filename(self);\n-\tgint ret;\n+\tg_autofree gchar *data = NULL;\n+\tg_autoptr(GKeyFile) keyfile = g_key_file_new();\n \n \tg_return_val_if_fail(FU_IS_PLUGIN(self), FALSE);\n \tg_return_val_if_fail(error == NULL || *error == NULL, FALSE);\n@@ -2447,17 +2489,18 @@ fu_plugin_set_secure_config_value(FuPlugin *self,\n \t\tg_set_error(error, FWUPD_ERROR, FWUPD_ERROR_NOT_FOUND, \"%s is missing\", conf_path);\n \t\treturn FALSE;\n \t}\n-\tret = g_chmod(conf_path, 0660);\n-\tif (ret == -1) {\n-\t\tg_set_error(error,\n-\t\t\t    FWUPD_ERROR,\n-\t\t\t    FWUPD_ERROR_INTERNAL,\n-\t\t\t    \"failed to set permissions on %s\",\n-\t\t\t    conf_path);\n+\tif (!g_key_file_load_from_file(keyfile, conf_path, G_KEY_FILE_KEEP_COMMENTS, error))\n \t\treturn FALSE;\n-\t}\n-\n-\treturn fu_plugin_set_config_value(self, key, value, error);\n+\tg_key_file_set_string(keyfile, fu_plugin_get_name(self), key, value);\n+\tdata = g_key_file_to_data(keyfile, NULL, error);\n+\tif (data == NULL)\n+\t\treturn FALSE;\n+\treturn g_file_set_contents_full(conf_path,\n+\t\t\t\t\tdata,\n+\t\t\t\t\t-1,\n+\t\t\t\t\tG_FILE_SET_CONTENTS_CONSISTENT,\n+\t\t\t\t\t0660,\n+\t\t\t\t\terror);\n }\n \n /**"
        },
        {
          "filename": "libfwupdplugin/fu-self-test.c",
          "status": "modified",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -674,6 +674,62 @@ _plugin_device_added_cb(FuPlugin *plugin, FuDevice *device, gpointer user_data)\n \tfu_test_loop_quit();\n }\n \n+static void\n+fu_plugin_config_func(void)\n+{\n+\tGStatBuf statbuf = {0};\n+\tgboolean ret;\n+\tgint rc;\n+\tg_autofree gchar *conf_dir = NULL;\n+\tg_autofree gchar *conf_file = NULL;\n+\tg_autofree gchar *fn = NULL;\n+\tg_autofree gchar *testdatadir = NULL;\n+\tg_autofree gchar *value = NULL;\n+\tg_autoptr(FuPlugin) plugin = fu_plugin_new(NULL);\n+\tg_autoptr(GError) error = NULL;\n+\n+\t/* this is a build file */\n+\ttestdatadir = g_test_build_filename(G_TEST_BUILT, \"tests\", NULL);\n+\t(void)g_setenv(\"FWUPD_SYSCONFDIR\", testdatadir, TRUE);\n+\tconf_dir = fu_path_from_kind(FU_PATH_KIND_SYSCONFDIR_PKG);\n+\n+\t/* remove existing file */\n+\tfu_plugin_set_name(plugin, \"test\");\n+\tconf_file = g_strdup_printf(\"%s.conf\", fu_plugin_get_name(plugin));\n+\tfn = g_build_filename(conf_dir, conf_file, NULL);\n+\tret = fu_path_mkdir_parent(fn, &error);\n+\tg_assert_no_error(error);\n+\tg_assert_true(ret);\n+\tg_remove(fn);\n+\tret = g_file_set_contents(fn, \"\", -1, &error);\n+\tg_assert_no_error(error);\n+\tg_assert_true(ret);\n+\n+\t/* set a value */\n+\tret = fu_plugin_set_config_value(plugin, \"Key\", \"True\", &error);\n+\tg_assert_no_error(error);\n+\tg_assert_true(ret);\n+\tg_assert_true(g_file_test(fn, G_FILE_TEST_EXISTS));\n+\n+\t/* check it is world readable */\n+\trc = g_stat(fn, &statbuf);\n+\tg_assert_cmpint(rc, ==, 0);\n+\tg_assert_cmpint(statbuf.st_mode & 0777, ==, 0644);\n+\n+\t/* read back the value */\n+\tvalue = fu_plugin_get_config_value(plugin, \"Key\");\n+\tg_assert_cmpstr(value, ==, \"True\");\n+\tg_assert_true(fu_plugin_get_config_value_boolean(plugin, \"Key\"));\n+\n+\t/* check it is private, i.e. only readable by the user/group */\n+\tret = fu_plugin_set_secure_config_value(plugin, \"Key\", \"False\", &error);\n+\tg_assert_no_error(error);\n+\tg_assert_true(ret);\n+\trc = g_stat(fn, &statbuf);\n+\tg_assert_cmpint(rc, ==, 0);\n+\tg_assert_cmpint(statbuf.st_mode & 0777, ==, 0640);\n+}\n+\n static void\n fu_plugin_devices_func(void)\n {\n@@ -3598,6 +3654,7 @@ main(int argc, char **argv)\n \tg_test_add_func(\"/fwupd/progress{finish}\", fu_progress_finish_func);\n \tg_test_add_func(\"/fwupd/bios-attrs{load}\", fu_bios_settings_load_func);\n \tg_test_add_func(\"/fwupd/security-attrs{hsi}\", fu_security_attrs_hsi_func);\n+\tg_test_add_func(\"/fwupd/plugin{config}\", fu_plugin_config_func);\n \tg_test_add_func(\"/fwupd/plugin{devices}\", fu_plugin_devices_func);\n \tg_test_add_func(\"/fwupd/plugin{device-inhibit-children}\",\n \t\t\tfu_plugin_device_inhibit_children_func);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1272ad37e991ee38a6863a089bc3dce9c34b8c38",
            "date": "2025-01-24T20:13:35Z",
            "author_login": "superm1"
          },
          {
            "sha": "f55f14db16f08addc7d817185477b244d3c97cb2",
            "date": "2025-01-24T20:13:02Z",
            "author_login": "superm1"
          },
          {
            "sha": "8fd530a1918435e62a978221b56d882c487809fc",
            "date": "2025-01-24T17:06:03Z",
            "author_login": "superm1"
          },
          {
            "sha": "4d2f9c862ce8514314d864c2831e76f036e46914",
            "date": "2025-01-25T10:24:02Z",
            "author_login": "hughsie"
          },
          {
            "sha": "e36202c520e749a5ae44a53a51a3a055a1868a75",
            "date": "2025-01-25T10:06:14Z",
            "author_login": "hughsie"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-256",
    "description": "When creating an OPERATOR user account on the BMC, the redfish plugin saved the auto-generated password to /etc/fwupd/redfish.conf without proper restriction, allowing any user on the system to read the same configuration file.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-28T20:15:18.433",
    "last_modified": "2024-11-21T07:19:13.427",
    "fix_date": "2022-09-21T13:56:10Z"
  },
  "references": [
    {
      "url": "https://github.com/fwupd/fwupd/commit/ea676855f2119e36d433fbd2ed604039f53b2091",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fwupd/fwupd/commit/ea676855f2119e36d433fbd2ed604039f53b2091",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.296848",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "fwupd",
    "owner": "fwupd",
    "created_at": "2015-02-26T15:52:25Z",
    "updated_at": "2025-01-25T19:34:47Z",
    "pushed_at": "2025-01-25T15:21:20Z",
    "size": 55620,
    "stars": 3214,
    "forks": 450,
    "open_issues": 96,
    "watchers": 3214,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0_1_X",
      "0_5_X",
      "0_6_X",
      "0_7_X",
      "0_8_X",
      "0_9_X",
      "1_0_X",
      "1_1_X",
      "1_2_X",
      "1_3_X",
      "1_4_X",
      "1_5_X",
      "1_6_X",
      "1_7_X",
      "1_8_X",
      "1_9_X"
    ],
    "languages": {
      "C": 10028830,
      "Python": 430412,
      "Rust": 196806,
      "Meson": 192067,
      "Shell": 60132,
      "Makefile": 4186,
      "C++": 716,
      "Assembly": 448,
      "AGS Script": 24
    },
    "commit_activity": {
      "total_commits_last_year": 1983,
      "avg_commits_per_week": 38.13461538461539,
      "days_active_last_year": 295
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:34:19.556241"
  }
}