{
  "cve_id": "CVE-2022-3299",
  "github_data": {
    "repository": "open5gs/open5gs",
    "fix_commit": "724fa568435dae45ef0c3a48b2aabde052afae88",
    "related_commits": [
      "724fa568435dae45ef0c3a48b2aabde052afae88",
      "724fa568435dae45ef0c3a48b2aabde052afae88"
    ],
    "patch_url": "https://github.com/open5gs/open5gs/commit/724fa568435dae45ef0c3a48b2aabde052afae88.patch",
    "fix_commit_details": {
      "sha": "724fa568435dae45ef0c3a48b2aabde052afae88",
      "commit_date": "2022-09-25T06:06:37Z",
      "author": {
        "login": "acetcom",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixed HTTP2 crashes for random JSON data (#1769)",
        "length": 48,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 93,
        "additions": 65,
        "deletions": 28
      },
      "files": [
        {
          "filename": "lib/sbi/client.c",
          "status": "modified",
          "additions": 29,
          "deletions": 11,
          "patch": "@@ -44,6 +44,7 @@ typedef struct connection_s {\n \n     char *memory;\n     size_t size;\n+    bool memory_overflow;\n \n     char *location;\n \n@@ -533,6 +534,8 @@ static void check_multi_info(ogs_sbi_client_t *client)\n \n             res = resource->data.result;\n             if (res == CURLE_OK) {\n+                ogs_log_level_e level = OGS_LOG_DEBUG;\n+\n                 response = ogs_sbi_response_new();\n                 ogs_assert(response);\n \n@@ -546,7 +549,17 @@ static void check_multi_info(ogs_sbi_client_t *client)\n                 response->h.uri = ogs_strdup(url);\n                 ogs_assert(response->h.uri);\n \n-                ogs_debug(\"[%d:%s] %s\",\n+                if (content_type)\n+                    ogs_sbi_header_set(response->http.headers,\n+                            OGS_SBI_CONTENT_TYPE, content_type);\n+                if (conn->location)\n+                    ogs_sbi_header_set(response->http.headers,\n+                            OGS_SBI_LOCATION, conn->location);\n+\n+                if (conn->memory_overflow == true)\n+                    level = OGS_LOG_ERROR;\n+\n+                ogs_log_message(level, 0, \"[%d:%s] %s\",\n                         response->status, response->h.method, response->h.uri);\n \n                 if (conn->memory) {\n@@ -557,16 +570,17 @@ static void check_multi_info(ogs_sbi_client_t *client)\n                     ogs_assert(response->http.content_length);\n                 }\n \n-                ogs_debug(\"RECEIVED[%d]\", (int)response->http.content_length);\n+                ogs_log_message(level, 0, \"RECEIVED[%d]\",\n+                        (int)response->http.content_length);\n                 if (response->http.content_length && response->http.content)\n-                    ogs_debug(\"%s\", response->http.content);\n+                    ogs_log_message(level, 0, \"%s\", response->http.content);\n+\n+                if (conn->memory_overflow == true) {\n+                    ogs_sbi_response_free(response);\n+                    connection_remove(conn);\n+                    break;\n+                }\n \n-                if (content_type)\n-                    ogs_sbi_header_set(response->http.headers,\n-                            OGS_SBI_CONTENT_TYPE, content_type);\n-                if (conn->location)\n-                    ogs_sbi_header_set(response->http.headers,\n-                            OGS_SBI_LOCATION, conn->location);\n             } else\n                 ogs_warn(\"[%d] %s\", res, conn->error);\n \n@@ -727,8 +741,12 @@ static size_t write_cb(void *contents, size_t size, size_t nmemb, void *data)\n     realsize = size * nmemb;\n     ptr = ogs_realloc(conn->memory, conn->size + realsize + 1);\n     if(!ptr) {\n-        ogs_fatal(\"not enough memory (realloc returned NULL)\");\n-        ogs_assert_if_reached();\n+        conn->memory_overflow = true;\n+\n+        ogs_error(\"Overflow : conn->size[%d], realsize[%d]\",\n+                    (int)conn->size, (int)realsize);\n+        ogs_log_hexdump(OGS_LOG_ERROR, contents, realsize);\n+\n         return 0;\n     }\n "
        },
        {
          "filename": "lib/sbi/nghttp2-server.c",
          "status": "modified",
          "additions": 36,
          "deletions": 17,
          "patch": "@@ -82,6 +82,7 @@ typedef struct ogs_sbi_stream_s {\n \n     int32_t                 stream_id;\n     ogs_sbi_request_t       *request;\n+    bool                    memory_overflow;\n \n     ogs_sbi_session_t       *session;\n } ogs_sbi_stream_t;\n@@ -791,12 +792,23 @@ static int on_frame_recv(nghttp2_session *session,\n     case NGHTTP2_DATA:\n         /* HEADERS or DATA frame with +END_STREAM flag */\n         if (frame->hd.flags & NGHTTP2_FLAG_END_STREAM) {\n+            ogs_log_level_e level = OGS_LOG_DEBUG;\n \n-            ogs_debug(\"[%s] %s\", request->h.method, request->h.uri);\n+            if (stream->memory_overflow == true)\n+                level = OGS_LOG_ERROR;\n+\n+            ogs_log_message(level, 0,\n+                    \"[%s] %s\", request->h.method, request->h.uri);\n \n             if (request->http.content_length && request->http.content) {\n-                ogs_debug(\"RECEIVED: %d\", (int)request->http.content_length);\n-                ogs_debug(\"%s\", request->http.content);\n+                ogs_log_message(level, 0,\n+                        \"RECEIVED: %d\", (int)request->http.content_length);\n+                ogs_log_message(level, 0, \"%s\", request->http.content);\n+            }\n+\n+            if (stream->memory_overflow == true) {\n+                ogs_error(\"[DROP] Overflow\");\n+                break;\n             }\n \n             if (server->cb(request, stream) != OGS_OK) {\n@@ -967,23 +979,30 @@ static int on_data_chunk_recv(nghttp2_session *session, uint8_t flags,\n     ogs_assert(len);\n \n     if (request->http.content == NULL) {\n-        request->http.content_length = len;\n-        request->http.content =\n-            (char*)ogs_malloc(request->http.content_length + 1);\n-        ogs_assert(request->http.content);\n+        ogs_assert(request->http.content_length == 0);\n+        ogs_assert(offset == 0);\n+\n+        request->http.content = (char*)ogs_malloc(len + 1);\n     } else {\n-        offset = request->http.content_length;\n-        if ((request->http.content_length + len) > OGS_HUGE_LEN) {\n-            ogs_error(\"Overflow : Content-Length[%d], len[%d]\",\n-                        (int)request->http.content_length, (int)len);\n-            ogs_assert_if_reached();\n-        }\n-        request->http.content_length += len;\n-        request->http.content = (char *)ogs_realloc(\n-                request->http.content, request->http.content_length + 1);\n-        ogs_assert(request->http.content);\n+        ogs_assert(request->http.content_length != 0);\n+\n+        request->http.content = (char*)ogs_realloc(\n+                request->http.content, request->http.content_length + len + 1);\n     }\n \n+    if (!request->http.content) {\n+        stream->memory_overflow = true;\n+\n+        ogs_error(\"Overflow : Content-Length[%d], len[%d]\",\n+                    (int)request->http.content_length, (int)len);\n+        ogs_log_hexdump(OGS_LOG_ERROR, data, len);\n+\n+        return 0;\n+    }\n+\n+    offset = request->http.content_length;\n+    request->http.content_length += len;\n+\n     memcpy(request->http.content + offset, data, len);\n     request->http.content[request->http.content_length] = '\\0';\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "13585a34e3d5505dd86d2cdf78c91829f3936851",
            "date": "2025-01-12T02:47:12Z",
            "author_login": "acetcom"
          },
          {
            "sha": "d181ab54ccf9fb829ec491dfc18ab42e4179ae8f",
            "date": "2025-01-11T05:32:39Z",
            "author_login": "acetcom"
          },
          {
            "sha": "8ff1d1b66675c69e2916e3289e481899df5bfc23",
            "date": "2025-01-06T01:38:51Z",
            "author_login": "acetcom"
          },
          {
            "sha": "df079b48d85e26ffe03fc18579ed9f7d69e1bff5",
            "date": "2025-01-05T13:17:38Z",
            "author_login": "acetcom"
          },
          {
            "sha": "ff917e9436a1925fb7a84729ae6b083918d2d9d1",
            "date": "2025-01-04T05:11:08Z",
            "author_login": "acetcom"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-404",
    "description": "A vulnerability was found in Open5GS up to 2.4.10. It has been declared as problematic. Affected by this vulnerability is an unknown functionality in the library lib/sbi/client.c of the component AMF. The manipulation leads to denial of service. The attack can be launched remotely. The name of the patch is 724fa568435dae45ef0c3a48b2aabde052afae88. It is recommended to apply a patch to fix this issue. The identifier VDB-209545 was assigned to this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-26T13:15:11.410",
    "last_modified": "2024-11-21T07:19:14.870",
    "fix_date": "2022-09-25T06:06:37Z"
  },
  "references": [
    {
      "url": "https://github.com/open5gs/open5gs/commit/724fa568435dae45ef0c3a48b2aabde052afae88",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open5gs/open5gs/issues/1769",
      "source": "cna@vuldb.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.209545",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open5gs/open5gs/commit/724fa568435dae45ef0c3a48b2aabde052afae88",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open5gs/open5gs/issues/1769",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.209545",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.287880",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "open5gs",
    "owner": "open5gs",
    "created_at": "2017-02-01T10:48:49Z",
    "updated_at": "2025-01-14T11:52:37Z",
    "pushed_at": "2025-01-12T02:47:33Z",
    "size": 70375,
    "stars": 1936,
    "forks": 783,
    "open_issues": 203,
    "watchers": 1936,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C": 49736410,
      "Mustache": 466439,
      "JavaScript": 248805,
      "Meson": 241352,
      "Python": 187063,
      "Shell": 84460,
      "Dockerfile": 6508,
      "C++": 3446,
      "Awk": 2639,
      "CSS": 2192
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T15:34:10.765143"
  }
}