{
  "cve_id": "CVE-2022-3326",
  "github_data": {
    "repository": "ikus060/rdiffweb",
    "fix_commit": "ee98e5af78ec60db8a17fef6ea0ca250e3f31eec",
    "related_commits": [
      "ee98e5af78ec60db8a17fef6ea0ca250e3f31eec",
      "ee98e5af78ec60db8a17fef6ea0ca250e3f31eec"
    ],
    "patch_url": "https://github.com/ikus060/rdiffweb/commit/ee98e5af78ec60db8a17fef6ea0ca250e3f31eec.patch",
    "fix_commit_details": {
      "sha": "ee98e5af78ec60db8a17fef6ea0ca250e3f31eec",
      "commit_date": "2022-09-27T16:32:40Z",
      "author": {
        "login": "ikus060",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add password score validation",
        "length": 29,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 107,
        "additions": 56,
        "deletions": 51
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -112,6 +112,7 @@ Professional support for Rdiffweb is available by contacting [IKUS Soft](https:/\n This releases include a security fix. If you are using an earlier version, you should upgrade to this release immediately.\n \n * Add `Cache-Control` and other security headers [CVE-2022-3292](https://nvd.nist.gov/vuln/detail/CVE-2022-3292)\n+* Enforce password policy using `password-score` based on [zxcvbn](https://github.com/dropbox/zxcvbn) [CVE-2022-3326](https://nvd.nist.gov/vuln/detail/CVE-2022-3326)\n \n ## 2.4.8 (2022-09-26)\n "
        },
        {
          "filename": "debian/control",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ Build-Depends:\n  python3-setuptools-scm,\n  python3-sqlalchemy,\n  python3-wtforms,\n+ python3-zxcvbn,\n  rdiff-backup,\n Rules-Requires-Root: no\n Standards-Version: 4.5.1"
        },
        {
          "filename": "doc/configuration.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -291,6 +291,9 @@ Changing the minimum or maximum length does not affect existing users' passwords\n | --- | --- | --- |\n | password-min-length | Minimum length of the user's password | 8 |\n | password-max-length | Maximum length of the user's password | 128 |\n+| password-score      | Minimum zxcvbn's score for password. Value from 0 to 4. Default value 1. | 4 |\n+\n+You may want to read more about [zxcvbn](https://github.com/dropbox/zxcvbn) score value.\n \n ## Configure Rdiffweb appearance\n "
        },
        {
          "filename": "rdiffweb/controller/page_admin.py",
          "status": "modified",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -209,18 +209,6 @@ class UserForm(CherryForm):\n         _('Quota Used'), validators=[validators.optional()], description=_(\"Disk spaces (in bytes) used by this user.\")\n     )\n \n-    def validate_password(self, field):\n-        validator = validators.length(\n-            min=self.app.cfg.password_min_length,\n-            max=self.app.cfg.password_max_length,\n-            message=_('Password must have between %(min)d and %(max)d characters.'),\n-        )\n-        validator(self, field)\n-\n-    @property\n-    def app(self):\n-        return cherrypy.request.app\n-\n     def validate_role(self, field):\n         # Don't allow the user to changes it's \"role\" state.\n         currentuser = cherrypy.request.currentuser"
        },
        {
          "filename": "rdiffweb/controller/pref_general.py",
          "status": "modified",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -61,18 +61,6 @@ class UserPasswordForm(CherryForm):\n         _('Confirm new password'), validators=[InputRequired(_(\"Confirmation password is missing.\"))]\n     )\n \n-    def validate_new(self, field):\n-        validator = Length(\n-            min=self.app.cfg.password_min_length,\n-            max=self.app.cfg.password_max_length,\n-            message=_('Password must have between %(min)d and %(max)d characters.'),\n-        )\n-        validator(self, field)\n-\n-    @property\n-    def app(self):\n-        return cherrypy.request.app\n-\n \n class PrefsGeneralPanelProvider(Controller):\n     \"\"\""
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_admin.py",
          "status": "modified",
          "additions": 19,
          "deletions": 19,
          "patch": "@@ -107,7 +107,7 @@ class AdminUsersAsAdminTest(AbstractAdminTest):\n \n     def test_add_user_with_role_admin(self):\n         # When trying to create a new user with role admin\n-        self._add_user(\"admin_role\", \"admin_role@test.com\", \"password\", \"/home/\", ADMIN_ROLE)\n+        self._add_user(\"admin_role\", \"admin_role@test.com\", \"pr3j5Dwi\", \"/home/\", ADMIN_ROLE)\n         # Then page return success\n         self.assertStatus(200)\n         # Then database is updated\n@@ -117,26 +117,26 @@ def test_add_user_with_role_admin(self):\n         self.listener.user_added.assert_called_once_with(userobj)\n \n     def test_add_user_with_role_maintainer(self):\n-        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"password\", \"/home/\", MAINTAINER_ROLE)\n+        self._add_user(\"maintainer_role\", \"maintainer_role@test.com\", \"pr3j5Dwi\", \"/home/\", MAINTAINER_ROLE)\n         self.assertStatus(200)\n         self.assertEqual(MAINTAINER_ROLE, self.app.store.get_user('maintainer_role').role)\n \n     def test_add_user_with_role_user(self):\n-        self._add_user(\"user_role\", \"user_role@test.com\", \"password\", \"/home/\", USER_ROLE)\n+        self._add_user(\"user_role\", \"user_role@test.com\", \"pr3j5Dwi\", \"/home/\", USER_ROLE)\n         self.assertStatus(200)\n         self.assertEqual(USER_ROLE, self.app.store.get_user('user_role').role)\n \n     def test_add_user_with_invalid_role(self):\n         # When trying to create a new user with an invalid role (admin instead of 0)\n-        self._add_user(\"invalid\", \"invalid@test.com\", \"test1234\", \"/home/\", 'admin')\n+        self._add_user(\"invalid\", \"invalid@test.com\", \"pr3j5Dwi\", \"/home/\", 'admin')\n         # Then an error message is displayed to the user\n         self.assertStatus(200)\n         self.assertInBody('role: Invalid Choice: could not coerce')\n         # Then listener are not called\n         self.listener.user_added.assert_not_called()\n \n         # When trying to create a new user with an invalid role (-1)\n-        self._add_user(\"invalid\", \"invalid@test.com\", \"test2\", \"/home/\", -1)\n+        self._add_user(\"invalid\", \"invalid@test.com\", \"pr3j5Dwi\", \"/home/\", -1)\n         # Then an error message is displayed to the user\n         self.assertStatus(200)\n         self.assertInBody('role: Not a valid choice')\n@@ -145,7 +145,7 @@ def test_add_user_with_invalid_role(self):\n \n     def test_add_edit_delete(self):\n         #  Add user to be listed\n-        self._add_user(\"test2\", \"test2@test.com\", \"test1234\", \"/home/\", USER_ROLE)\n+        self._add_user(\"test2\", \"test2@test.com\", \"pr3j5Dwi\", \"/home/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n         self.assertInBody(\"test2\")\n         self.assertInBody(\"test2@test.com\")\n@@ -175,7 +175,7 @@ def test_add_edit_delete_user_with_encoding(self):\n         \"\"\"\n         Check creation of user with non-ascii char.\n         \"\"\"\n-        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"password\", \"/home/\", USER_ROLE)\n+        self._add_user(\"\u00c9ric\", \"\u00e9ric@test.com\", \"pr3j5Dwi\", \"/home/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n         self.assertInBody(\"\u00c9ric\")\n         self.assertInBody(\"\u00e9ric@test.com\")\n@@ -198,7 +198,7 @@ def test_add_user_with_empty_username(self):\n         \"\"\"\n         Verify failure trying to create user without username.\n         \"\"\"\n-        self._add_user(\"\", \"test1@test.com\", \"test1\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"\", \"test1@test.com\", \"pr3j5Dwi\", \"/tmp/\", USER_ROLE)\n         self.assertStatus(200)\n         self.assertInBody(\"username: This field is required.\")\n \n@@ -207,9 +207,9 @@ def test_add_user_with_existing_username(self):\n         Verify failure trying to add the same user.\n         \"\"\"\n         # Given a user named `test1`\n-        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"test1\", \"test1@test.com\", \"pr3j5Dwi\", \"/tmp/\", USER_ROLE)\n         # When trying to create a new user with the same name\n-        self._add_user(\"test1\", \"test1@test.com\", \"password\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"test1\", \"test1@test.com\", \"pr3j5Dwi\", \"/tmp/\", USER_ROLE)\n         # Then the user list is displayed with an error message.\n         self.assertStatus(200)\n         self.assertInBody(\"User test1 already exists.\")\n@@ -222,18 +222,18 @@ def test_add_user_with_invalid_root_directory(self):\n             self._delete_user(\"test5\")\n         except Exception:\n             pass\n-        self._add_user(\"test5\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n+        self._add_user(\"test5\", \"test1@test.com\", \"pr3j5Dwi\", \"/var/invalid/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n         self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n \n     def test_add_without_email(self):\n         #  Add user to be listed\n-        self._add_user(\"test2\", None, \"password\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"test2\", None, \"pr3j5Dwi\", \"/tmp/\", USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n \n     def test_add_without_user_root(self):\n         #  Add user to be listed\n-        self._add_user(\"test6\", None, \"password\", None, USER_ROLE)\n+        self._add_user(\"test6\", None, \"pr3j5Dwi\", None, USER_ROLE)\n         self.assertInBody(\"User added successfully.\")\n \n         user = self.app.store.get_user('test6')\n@@ -243,7 +243,7 @@ def test_add_with_username_too_long(self):\n         # Given a too long username\n         username = \"test2\" * 52\n         # When trying to create the user\n-        self._add_user(username, None, \"password\", \"/tmp/\", USER_ROLE)\n+        self._add_user(username, None, \"pr3j5Dwi\", \"/tmp/\", USER_ROLE)\n         # Then an error is raised\n         self.assertStatus(200)\n         self.assertInBody(\"Username too long.\")\n@@ -252,7 +252,7 @@ def test_add_with_email_too_long(self):\n         # Given a too long username\n         email = (\"test2\" * 50) + \"@test.com\"\n         # When trying to create the user\n-        self._add_user(\"test2\", email, \"password\", \"/tmp/\", USER_ROLE)\n+        self._add_user(\"test2\", email, \"pr3j5Dwi\", \"/tmp/\", USER_ROLE)\n         # Then an error is raised\n         self.assertStatus(200)\n         self.assertInBody(\"Email too long.\")\n@@ -261,7 +261,7 @@ def test_add_with_user_root_too_long(self):\n         # Given a too long user root\n         user_root = \"/temp/\" * 50\n         # When trying to create the user\n-        self._add_user(\"test2\", \"test@test,com\", \"password\", user_root, USER_ROLE)\n+        self._add_user(\"test2\", \"test@test,com\", \"pr3j5Dwi\", user_root, USER_ROLE)\n         # Then an error is raised\n         self.assertStatus(200)\n         self.assertInBody(\"Root directory too long.\")\n@@ -285,9 +285,9 @@ def test_delete_user_admin(self):\n         Verify failure to delete our self.\n         \"\"\"\n         # Create another admin user\n-        self._add_user('admin2', '', 'password', '', ADMIN_ROLE)\n+        self._add_user('admin2', '', 'pr3j5Dwi', '', ADMIN_ROLE)\n         self.getPage(\"/logout/\")\n-        self._login('admin2', 'password')\n+        self._login('admin2', 'pr3j5Dwi')\n \n         # Try deleting admin user\n         self._delete_user(self.USERNAME)\n@@ -330,7 +330,7 @@ def test_edit_user_with_invalid_path(self):\n         Verify failure trying to update user with invalid path.\n         \"\"\"\n         self.app.store.add_user('test1')\n-        self._edit_user(\"test1\", \"test1@test.com\", \"password\", \"/var/invalid/\", USER_ROLE)\n+        self._edit_user(\"test1\", \"test1@test.com\", \"pr3j5Dwi\", \"/var/invalid/\", USER_ROLE)\n         self.assertNotInBody(\"User added successfully.\")\n         self.assertInBody(\"User&#39;s root directory /var/invalid/ is not accessible!\")\n "
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_prefs.py",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -90,20 +90,17 @@ def test_change_email_with_too_long(self):\n \n     def test_change_password(self):\n         # When udating user's password\n-        self._set_password(self.PASSWORD, \"newpassword\", \"newpassword\")\n+        self._set_password(self.PASSWORD, \"pr3j5Dwi\", \"pr3j5Dwi\")\n         self.assertInBody(\"Password updated successfully.\")\n         # Then a notification is raised\n         self.listener.user_password_changed.assert_called_once()\n-        # Change it back\n-        self._set_password(\"newpassword\", self.PASSWORD, self.PASSWORD)\n-        self.assertInBody(\"Password updated successfully.\")\n \n     def test_change_password_with_wrong_confirmation(self):\n         self._set_password(self.PASSWORD, \"t\", \"a\")\n         self.assertInBody(\"The new password and its confirmation do not match.\")\n \n     def test_change_password_with_wrong_password(self):\n-        self._set_password(\"oups\", \"newpassword\", \"newpassword\")\n+        self._set_password(\"oups\", \"pr3j5Dwi\", \"pr3j5Dwi\")\n         self.assertInBody(\"Wrong password\")\n \n     def test_change_password_with_too_short(self):"
        },
        {
          "filename": "rdiffweb/core/config.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -434,6 +434,13 @@ def get_parser():\n         default=128,\n     )\n \n+    parser.add(\n+        '--password-score',\n+        type=lambda x: max(1, min(int(x), 4)),\n+        help=\"Minimum zxcvbn's score for password. Value from 1 to 4. Default value 2. Read more about it here: https://github.com/dropbox/zxcvbn\",\n+        default=2,\n+    )\n+\n     parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)\n \n     # Here we append a list of arguments for each locale."
        },
        {
          "filename": "rdiffweb/core/store.py",
          "status": "modified",
          "additions": 22,
          "deletions": 3,
          "patch": "@@ -28,6 +28,7 @@\n from sqlalchemy.exc import IntegrityError\n from sqlalchemy.sql.expression import and_, or_, select\n from sqlalchemy.sql.functions import count\n+from zxcvbn import zxcvbn\n \n from rdiffweb.core import RdiffError, authorizedkeys\n from rdiffweb.core.config import Option\n@@ -397,17 +398,35 @@ def set_password(self, password, old_password=None):\n         assert old_password is None or isinstance(old_password, str)\n         if not password:\n             raise ValueError(\"password can't be empty\")\n-        cfg = self._store.app.cfg\n-        if cfg.password_min_length > len(password) > cfg.password_max_length:\n-            raise ValueError(\"invalid password length\")\n \n         # Cannot update admin-password if defined\n         if self.username == self._store._admin_user and self._store._admin_password:\n             raise ValueError(_(\"can't update admin-password defined in configuration file\"))\n \n+        # Check current password\n         if old_password and not check_password(old_password, self.hash_password):\n             raise ValueError(_(\"Wrong password\"))\n \n+        # Check password length\n+        cfg = self._store.app.cfg\n+        if cfg.password_min_length > len(password) or len(password) > cfg.password_max_length:\n+            raise ValueError(\n+                _('Password must have between %(min)d and %(max)d characters.')\n+                % {'min': cfg.password_min_length, 'max': cfg.password_max_length}\n+            )\n+\n+        # Verify password score using zxcvbn\n+        stats = zxcvbn(password)\n+        if stats.get('score') < cfg.password_score:\n+            msg = _('Password too weak.')\n+            warning = stats.get('feedback', {}).get('warning')\n+            suggestions = stats.get('feedback', {}).get('suggestions')\n+            if warning:\n+                msg += ' ' + warning\n+            if suggestions:\n+                msg += ' ' + ' '.join(suggestions)\n+            raise ValueError(msg)\n+\n         logger.info(\"updating user password [%s]\", self.username)\n         self.hash_password = hash_password(password)\n         self._store.bus.publish('user_password_changed', self)"
        },
        {
          "filename": "setup.cfg",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -37,6 +37,7 @@ install_requires =\n     psutil>=2.1.1\n     sqlalchemy\n     WTForms<3.0.0\n+    zxcvbn>=4.4.27\n setup_requires = \n     babel>=0.9.6\n     setuptools_scm"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb9b10fde29c125a7641a8daad96976bd2cf1307",
            "date": "2024-11-20T02:02:20Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9becf16f0a96fad246021256de58a204318687b8",
            "date": "2024-11-09T12:27:19Z",
            "author_login": "ikus060"
          },
          {
            "sha": "3364f0644d62590b65ad6610d74139edc8a1740f",
            "date": "2024-11-05T20:54:35Z",
            "author_login": "ikus060"
          },
          {
            "sha": "a96f583797b65a8f68d3780c1ed470c7989a56dc",
            "date": "2024-10-24T19:17:53Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9fad72d2a19b78be1e5b9dcd4e880e3f7496dbd0",
            "date": "2024-10-24T18:13:13Z",
            "author_login": "ikus060"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-521",
    "description": "Weak Password Requirements in GitHub repository ikus060/rdiffweb prior to 2.4.9.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-29T00:15:12.187",
    "last_modified": "2024-11-21T07:19:18.170",
    "fix_date": "2022-09-27T16:32:40Z"
  },
  "references": [
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/ee98e5af78ec60db8a17fef6ea0ca250e3f31eec",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1f6a5e49-23f2-45f7-8661-19f9cee8ae97",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/ee98e5af78ec60db8a17fef6ea0ca250e3f31eec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1f6a5e49-23f2-45f7-8661-19f9cee8ae97",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.297752",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rdiffweb",
    "owner": "ikus060",
    "created_at": "2012-10-22T14:14:23Z",
    "updated_at": "2025-01-12T13:25:42Z",
    "pushed_at": "2025-01-07T15:16:06Z",
    "size": 25971,
    "stars": 124,
    "forks": 28,
    "open_issues": 1,
    "watchers": 124,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 857869,
      "HTML": 104946,
      "JavaScript": 7655,
      "Shell": 3945,
      "CSS": 3081,
      "Dockerfile": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:43.805427"
  }
}