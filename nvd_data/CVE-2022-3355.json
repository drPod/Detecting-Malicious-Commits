{
  "cve_id": "CVE-2022-3355",
  "github_data": {
    "repository": "inventree/inventree",
    "fix_commit": "5a08ef908dd5344b4433436a4679d122f7f99e41",
    "related_commits": [
      "5a08ef908dd5344b4433436a4679d122f7f99e41",
      "5a08ef908dd5344b4433436a4679d122f7f99e41"
    ],
    "patch_url": "https://github.com/inventree/inventree/commit/5a08ef908dd5344b4433436a4679d122f7f99e41.patch",
    "fix_commit_details": {
      "sha": "5a08ef908dd5344b4433436a4679d122f7f99e41",
      "commit_date": "2022-09-23T06:56:29Z",
      "author": {
        "login": "matmair",
        "type": "User",
        "stats": {
          "total_commits": 3048,
          "average_weekly_commits": 7.452322738386308,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 181
        }
      },
      "commit_message": {
        "title": "Add sanitation for SVG attachments (#3701)",
        "length": 208,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 95,
        "additions": 95,
        "deletions": 0
      },
      "files": [
        {
          "filename": "InvenTree/InvenTree/models.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n import os\n import re\n from datetime import datetime\n+from io import BytesIO\n \n from django.conf import settings\n from django.contrib.auth import get_user_model\n@@ -24,6 +25,7 @@\n import InvenTree.helpers\n from common.models import InvenTreeSetting\n from InvenTree.fields import InvenTreeURLField\n+from InvenTree.sanitizer import sanitize_svg\n \n logger = logging.getLogger('inventree')\n \n@@ -383,8 +385,16 @@ def save(self, *args, **kwargs):\n                 'link': _('Missing external link'),\n             })\n \n+        if self.attachment.name.lower().endswith('.svg'):\n+            self.attachment.file.file = self.clean_svg(self.attachment)\n+\n         super().save(*args, **kwargs)\n \n+    def clean_svg(self, field):\n+        \"\"\"Sanitize SVG file before saving.\"\"\"\n+        cleaned = sanitize_svg(field.file.read())\n+        return BytesIO(bytes(cleaned, 'utf8'))\n+\n     def __str__(self):\n         \"\"\"Human name for attachment.\"\"\"\n         if self.attachment is not None:"
        },
        {
          "filename": "InvenTree/InvenTree/sanitizer.py",
          "status": "added",
          "additions": 67,
          "deletions": 0,
          "patch": "@@ -0,0 +1,67 @@\n+\"\"\"Functions to sanitize user input files.\"\"\"\n+from bleach import clean\n+from bleach.css_sanitizer import CSSSanitizer\n+\n+ALLOWED_ELEMENTS_SVG = [\n+    'a', 'animate', 'animateColor', 'animateMotion',\n+    'animateTransform', 'circle', 'defs', 'desc', 'ellipse', 'font-face',\n+    'font-face-name', 'font-face-src', 'g', 'glyph', 'hkern',\n+    'linearGradient', 'line', 'marker', 'metadata', 'missing-glyph',\n+    'mpath', 'path', 'polygon', 'polyline', 'radialGradient', 'rect',\n+    'set', 'stop', 'svg', 'switch', 'text', 'title', 'tspan', 'use'\n+]\n+\n+ALLOWED_ATTRIBUTES_SVG = [\n+    'accent-height', 'accumulate', 'additive', 'alphabetic',\n+    'arabic-form', 'ascent', 'attributeName', 'attributeType',\n+    'baseProfile', 'bbox', 'begin', 'by', 'calcMode', 'cap-height',\n+    'class', 'color', 'color-rendering', 'content', 'cx', 'cy', 'd', 'dx',\n+    'dy', 'descent', 'display', 'dur', 'end', 'fill', 'fill-opacity',\n+    'fill-rule', 'font-family', 'font-size', 'font-stretch', 'font-style',\n+    'font-variant', 'font-weight', 'from', 'fx', 'fy', 'g1', 'g2',\n+    'glyph-name', 'gradientUnits', 'hanging', 'height', 'horiz-adv-x',\n+    'horiz-origin-x', 'id', 'ideographic', 'k', 'keyPoints',\n+    'keySplines', 'keyTimes', 'lang', 'marker-end', 'marker-mid',\n+    'marker-start', 'markerHeight', 'markerUnits', 'markerWidth',\n+    'mathematical', 'max', 'min', 'name', 'offset', 'opacity', 'orient',\n+    'origin', 'overline-position', 'overline-thickness', 'panose-1',\n+    'path', 'pathLength', 'points', 'preserveAspectRatio', 'r', 'refX',\n+    'refY', 'repeatCount', 'repeatDur', 'requiredExtensions',\n+    'requiredFeatures', 'restart', 'rotate', 'rx', 'ry', 'slope',\n+    'stemh', 'stemv', 'stop-color', 'stop-opacity',\n+    'strikethrough-position', 'strikethrough-thickness', 'stroke',\n+    'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap',\n+    'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity',\n+    'stroke-width', 'systemLanguage', 'target', 'text-anchor', 'to',\n+    'transform', 'type', 'u1', 'u2', 'underline-position',\n+    'underline-thickness', 'unicode', 'unicode-range', 'units-per-em',\n+    'values', 'version', 'viewBox', 'visibility', 'width', 'widths', 'x',\n+    'x-height', 'x1', 'x2', 'xlink:actuate', 'xlink:arcrole',\n+    'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title',\n+    'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'xmlns',\n+    'xmlns:xlink', 'y', 'y1', 'y2', 'zoomAndPan', 'style'\n+]\n+\n+\n+def sanitize_svg(file_data: str, strip: bool = True, elements: str = ALLOWED_ELEMENTS_SVG, attributes: str = ALLOWED_ATTRIBUTES_SVG) -> str:\n+    \"\"\"Sanatize a SVG file.\n+\n+    Args:\n+        file_data (str): SVG as string.\n+        strip (bool, optional): Should invalid elements get removed. Defaults to True.\n+        elements (str, optional): Allowed elements. Defaults to ALLOWED_ELEMENTS_SVG.\n+        attributes (str, optional): Allowed attributes. Defaults to ALLOWED_ATTRIBUTES_SVG.\n+\n+    Returns:\n+        str: Sanitzied SVG file.\n+    \"\"\"\n+\n+    cleaned = clean(\n+        file_data,\n+        tags=elements,\n+        attributes=attributes,\n+        strip=strip,\n+        strip_comments=strip,\n+        css_sanitizer=CSSSanitizer()\n+    )\n+    return cleaned"
        },
        {
          "filename": "InvenTree/InvenTree/tests.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@\n import InvenTree.tasks\n from common.models import InvenTreeSetting\n from common.settings import currency_codes\n+from InvenTree.sanitizer import sanitize_svg\n from part.models import Part, PartCategory\n from stock.models import StockItem, StockLocation\n \n@@ -878,3 +879,20 @@ def test_bacode_hash(self):\n \n         for barcode, hash in hashing_tests.items():\n             self.assertEqual(InvenTree.helpers.hash_barcode(barcode), hash)\n+\n+\n+class SanitizerTest(TestCase):\n+    \"\"\"Simple tests for sanitizer functions.\"\"\"\n+\n+    def test_svg_sanitizer(self):\n+        \"\"\"Test that SVGs are sanitized acordingly.\"\"\"\n+        valid_string = \"\"\"<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" id=\"svg2\" height=\"400\" width=\"400\">{0}\n+        <path id=\"path1\" d=\"m -151.78571,359.62883 v 112.76373 l 97.068507,-56.04253 V 303.14815 Z\" style=\"fill:#ddbc91;\"></path>\n+        </svg>\"\"\"\n+        dangerous_string = valid_string.format('<script>alert();</script>')\n+\n+        # Test that valid string\n+        self.assertEqual(valid_string, sanitize_svg(valid_string))\n+\n+        # Test that invalid string is cleanded\n+        self.assertNotEqual(dangerous_string, sanitize_svg(dangerous_string))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "412bba50babdf20ac4008e1896f5e7a438ef8505",
            "date": "2025-01-14T02:42:03Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "46f6450ee156b0c14e5d14d3772a83f084f41e2b",
            "date": "2025-01-13T23:38:48Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "ea1b2e3079dc0545fcd9ade15d1636c396398580",
            "date": "2025-01-13T20:05:21Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "dd5aa5f4e43c8890526328fe3f09b54c17ae154f",
            "date": "2025-01-13T03:31:03Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "b06b762895d976cdb634f7ddfa6b0411248601cf",
            "date": "2025-01-12T03:58:52Z",
            "author_login": "SchrodingersGat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository inventree/inventree prior to 0.8.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-29T10:15:09.747",
    "last_modified": "2024-11-21T07:19:21.747",
    "fix_date": "2022-09-23T06:56:29Z"
  },
  "references": [
    {
      "url": "https://github.com/inventree/inventree/commit/5a08ef908dd5344b4433436a4679d122f7f99e41",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/4b7fb92c-f06b-4bbf-82dc-9f013b30b6a6",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/inventree/inventree/commit/5a08ef908dd5344b4433436a4679d122f7f99e41",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/4b7fb92c-f06b-4bbf-82dc-9f013b30b6a6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.300394",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "InvenTree",
    "owner": "inventree",
    "created_at": "2017-03-23T01:44:10Z",
    "updated_at": "2025-01-14T11:58:48Z",
    "pushed_at": "2025-01-14T02:46:44Z",
    "size": 196475,
    "stars": 4595,
    "forks": 822,
    "open_issues": 228,
    "watchers": 4595,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 4038541,
      "TypeScript": 1595359,
      "HTML": 51404,
      "Shell": 37446,
      "CSS": 17146,
      "Dockerfile": 6143,
      "JavaScript": 5474,
      "Procfile": 426
    },
    "commit_activity": {
      "total_commits_last_year": 1500,
      "avg_commits_per_week": 28.846153846153847,
      "days_active_last_year": 308
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:44:58.684843"
  }
}