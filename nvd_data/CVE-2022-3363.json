{
  "cve_id": "CVE-2022-3363",
  "github_data": {
    "repository": "ikus060/rdiffweb",
    "fix_commit": "c27c46bac656b1da74f28eac1b52dfa5df76e6f2",
    "related_commits": [
      "c27c46bac656b1da74f28eac1b52dfa5df76e6f2",
      "c27c46bac656b1da74f28eac1b52dfa5df76e6f2"
    ],
    "patch_url": "https://github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2.patch",
    "fix_commit_details": {
      "sha": "c27c46bac656b1da74f28eac1b52dfa5df76e6f2",
      "commit_date": "2022-10-21T16:14:40Z",
      "author": {
        "login": "ikus060",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Send email notification when enabling or disabling MFA",
        "length": 54,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 252,
        "additions": 132,
        "deletions": 120
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -138,6 +138,7 @@ This next release focus on two-factor-authentication as a measure to increase se\n * Enforce better rate limit on login, mfa, password change and API [CVE-2022-3439](https://nvd.nist.gov/vuln/detail/CVE-2022-3439) [CVE-2022-3456](https://nvd.nist.gov/vuln/detail/CVE-2022-3456)\n * Enforce 'Origin' validation [CVE-2022-3457](https://nvd.nist.gov/vuln/detail/CVE-2022-3457)\n * Define idle and absolute session timeout with agressive default to protect usage on public computer [CVE-2022-3327](https://nvd.nist.gov/vuln/detail/CVE-2022-3327)\n+* Send email notification when enabling or disabling MFA [CVE-2022-3363](https://nvd.nist.gov/vuln/detail/CVE-2022-3363)\n \n Breaking changes:\n "
        },
        {
          "filename": "rdiffweb/controller/page_mfa.py",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -105,10 +105,10 @@ def send_code(self):\n                     \"Multi-factor authentication is enabled for your account, but your account does not have a valid email address to send the verification code to. Check your account settings with your administrator.\"\n                 )\n             )\n-        else:\n-            code = cherrypy.tools.auth_mfa.generate_code()\n-            body = self.app.templates.compile_template(\n-                \"email_mfa.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n-            )\n-            cherrypy.engine.publish('queue_mail', to=userobj.email, subject=_(\"Your verification code\"), message=body)\n-            flash(_(\"A new verification code has been sent to your email.\"))\n+            return\n+        code = cherrypy.tools.auth_mfa.generate_code()\n+        body = self.app.templates.compile_template(\n+            \"email_verification_code.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n+        )\n+        cherrypy.engine.publish('queue_mail', to=userobj.email, subject=_(\"Your verification code\"), message=body)\n+        flash(_(\"A new verification code has been sent to your email.\"))"
        },
        {
          "filename": "rdiffweb/controller/page_pref_mfa.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -126,7 +126,7 @@ def send_code(self):\n             return\n         code = cherrypy.tools.auth_mfa.generate_code()\n         body = self.app.templates.compile_template(\n-            \"email_mfa.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n+            \"email_verification_code.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj, 'code': code}\n         )\n         cherrypy.engine.publish('queue_mail', to=userobj.email, subject=_(\"Your verification code\"), message=body)\n         flash(_(\"A new verification code has been sent to your email.\"))"
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_prefs_mfa.py",
          "status": "modified",
          "additions": 37,
          "deletions": 33,
          "patch": "@@ -15,7 +15,7 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n-from unittest.mock import MagicMock\n+from unittest.mock import ANY, MagicMock\n \n import cherrypy\n from parameterized import parameterized\n@@ -34,47 +34,49 @@ def setUp(self):\n         userobj = UserObject.get_user(self.USERNAME)\n         userobj.email = 'admin@example.com'\n         userobj.add()\n+        # Register a listener on email\n+        self.listener = MagicMock()\n+        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n+\n+    def tearDown(self):\n+        cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n+        return super().tearDown()\n \n     def _set_mfa(self, mfa):\n         # Define mfa for user\n         userobj = UserObject.get_user(self.USERNAME)\n         userobj.mfa = mfa\n         userobj.add()\n+        # Reset mock.\n+        self.listener.queue_email.reset_mock()\n+        # Leave to disable mfa\n         if mfa == UserObject.DISABLED_MFA:\n             return\n         # Generate a code for login if required\n-        self.listener = MagicMock()\n-        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n-        try:\n-            self.getPage(\"/mfa/\")\n-            self.assertStatus(200)\n-            self.assertInBody(\"A new verification code has been sent to your email.\")\n-            # Extract code from email between <strong> and </strong>\n-            self.listener.queue_email.assert_called_once()\n-            message = self.listener.queue_email.call_args[1]['message']\n-            code = message.split('<strong>', 1)[1].split('</strong>')[0]\n-            # Login to MFA\n-            self.getPage(\"/mfa/\", method='POST', body={'code': code, 'submit': '1'})\n-            self.assertStatus(303)\n-        finally:\n-            cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n+        self.getPage(\"/mfa/\")\n+        self.assertStatus(200)\n+        self.assertInBody(\"A new verification code has been sent to your email.\")\n+        # Extract code from email between <strong> and </strong>\n+        self.listener.queue_email.assert_called_once()\n+        message = self.listener.queue_email.call_args[1]['message']\n+        code = message.split('<strong>', 1)[1].split('</strong>')[0]\n+        # Login to MFA\n+        self.getPage(\"/mfa/\", method='POST', body={'code': code, 'submit': '1'})\n+        self.assertStatus(303)\n+        # Clear mock.\n+        self.listener.queue_email.reset_mock()\n \n     def _get_code(self, action):\n         assert action in ['enable_mfa', 'disable_mfa', 'resend_code']\n-        # Register an email listeer to capture email send\n-        self.listener = MagicMock()\n-        cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)\n         # Query MFA page to generate a code\n-        try:\n-            self.getPage(\"/prefs/mfa\", method='POST', body={action: '1'})\n-            self.assertStatus(200)\n-            self.assertInBody(\"A new verification code has been sent to your email.\")\n-            # Extract code from email between <strong> and </strong>\n-            self.listener.queue_email.assert_called_once()\n-            message = self.listener.queue_email.call_args[1]['message']\n-            return message.split('<strong>', 1)[1].split('</strong>')[0]\n-        finally:\n-            cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)\n+        self.getPage(\"/prefs/mfa\", method='POST', body={action: '1'})\n+        self.assertStatus(200)\n+        self.assertInBody(\"A new verification code has been sent to your email.\")\n+        # Extract code from email between <strong> and </strong>\n+        self.listener.queue_email.assert_called_once()\n+        message = self.listener.queue_email.call_args[1]['message']\n+        self.listener.queue_email.reset_mock()\n+        return message.split('<strong>', 1)[1].split('</strong>')[0]\n \n     def test_get(self):\n         # When getting the page\n@@ -84,11 +86,11 @@ def test_get(self):\n \n     @parameterized.expand(\n         [\n-            ('enable_mfa', UserObject.DISABLED_MFA, UserObject.ENABLED_MFA),\n-            ('disable_mfa', UserObject.ENABLED_MFA, UserObject.DISABLED_MFA),\n+            ('enable_mfa', UserObject.DISABLED_MFA, UserObject.ENABLED_MFA, \"Two-Factor Authentication turned on\"),\n+            ('disable_mfa', UserObject.ENABLED_MFA, UserObject.DISABLED_MFA, \"Two-Factor Authentication turned off\"),\n         ]\n     )\n-    def test_with_valid_code(self, action, initial_mfa, expected_mfa):\n+    def test_with_valid_code(self, action, initial_mfa, expected_mfa, expected_subject):\n         # Define mfa for user\n         self._set_mfa(initial_mfa)\n         # Given a user with email requesting a code\n@@ -99,8 +101,10 @@ def test_with_valid_code(self, action, initial_mfa, expected_mfa):\n         self.assertStatus(200)\n         userobj = UserObject.get_user(self.USERNAME)\n         self.assertEqual(userobj.mfa, expected_mfa)\n-        # Then no email get sent\n+        # Then no verification code get sent\n         self.assertNotInBody(\"A new verification code has been sent to your email.\")\n+        # Then an email confirmation get send\n+        self.listener.queue_email.assert_called_once_with(to=ANY, subject=expected_subject, message=ANY)\n         # Then next page request is still working.\n         self.getPage('/')\n         self.assertStatus(200)"
        },
        {
          "filename": "rdiffweb/core/config.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -159,7 +159,7 @@ def get_parser():\n         '--emailsendchangednotification',\n         help='True to send notification when sensitive information get change in user profile.',\n         action='store_true',\n-        default=False,\n+        default=True,\n     )\n \n     parser.add_argument("
        },
        {
          "filename": "rdiffweb/core/model/_user.py",
          "status": "modified",
          "additions": 28,
          "deletions": 51,
          "patch": "@@ -24,7 +24,7 @@\n from sqlalchemy import Column, Integer, SmallInteger, String, and_, event, inspect, or_\n from sqlalchemy.exc import IntegrityError\n from sqlalchemy.ext.hybrid import hybrid_property\n-from sqlalchemy.orm import deferred, relationship\n+from sqlalchemy.orm import deferred, relationship, validates\n from zxcvbn import zxcvbn\n \n import rdiffweb.tools.db  # noqa\n@@ -74,9 +74,9 @@ class UserObject(Base):\n     PATTERN_USERNAME = r\"[a-zA-Z0-9_.\\-]+$\"\n \n     userid = Column('UserID', Integer, primary_key=True)\n-    _username = Column('Username', String, nullable=False, unique=True)\n+    username = Column('Username', String, nullable=False, unique=True)\n     hash_password = Column('Password', String, nullable=False, default=\"\")\n-    _user_root = Column('UserRoot', String, nullable=False, default=\"\")\n+    user_root = Column('UserRoot', String, nullable=False, default=\"\")\n     _is_admin = deferred(\n         Column(\n             'IsAdmin',\n@@ -86,7 +86,7 @@ class UserObject(Base):\n             doc=\"DEPRECATED This column is replaced by 'role'\",\n         )\n     )\n-    _email = Column('UserEmail', String, nullable=False, default=\"\")\n+    email = Column('UserEmail', String, nullable=False, default=\"\")\n     restore_format = deferred(\n         Column(\n             'RestoreFormat',\n@@ -96,7 +96,7 @@ class UserObject(Base):\n             doc=\"DEPRECATED This column is not used anymore\",\n         )\n     )\n-    _role = Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE))\n+    role = Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE), default=USER_ROLE)\n     fullname = Column('fullname', String, nullable=False, default=\"\")\n     mfa = Column('mfa', SmallInteger, nullable=False, default=DISABLED_MFA)\n     repo_objs = relationship(\n@@ -129,7 +129,7 @@ def create_admin_user(cls, default_username, default_password):\n         userobj.add()\n \n     @classmethod\n-    def add_user(cls, username, password=None, **attrs):\n+    def add_user(cls, username, password=None, role=USER_ROLE, **attrs):\n         \"\"\"\n         Used to add a new user with an optional password.\n         \"\"\"\n@@ -143,6 +143,7 @@ def add_user(cls, username, password=None, **attrs):\n         userobj = UserObject(\n             username=username,\n             hash_password=hash_password(password) if password else '',\n+            role=role,\n             **attrs,\n         ).add()\n         # Raise event\n@@ -383,51 +384,11 @@ def set_password(self, password):\n     def __eq__(self, other):\n         return type(self) == type(other) and inspect(self).key == inspect(other).key\n \n-    @hybrid_property\n-    def username(self):\n-        return self._username\n-\n-    @username.setter\n-    def username(self, value):\n-        oldvalue = self._username\n-        self._username = value\n-        if oldvalue != value:\n-            cherrypy.engine.publish('user_attr_changed', self, {'username': (oldvalue, value)})\n-\n-    @hybrid_property\n-    def role(self):\n-        if self._role is None:\n-            return self.USER_ROLE\n-        return self._role\n-\n-    @role.setter\n-    def role(self, value):\n-        oldvalue = self._role\n-        self._role = value\n-        if oldvalue != value:\n-            cherrypy.engine.publish('user_attr_changed', self, {'role': (oldvalue, value)})\n-\n-    @hybrid_property\n-    def email(self):\n-        return self._email\n-\n-    @email.setter\n-    def email(self, value):\n-        oldvalue = self._email\n-        self._email = value\n-        if oldvalue != value:\n-            cherrypy.engine.publish('user_attr_changed', self, {'email': (oldvalue, value)})\n-\n-    @hybrid_property\n-    def user_root(self):\n-        return self._user_root\n-\n-    @user_root.setter\n-    def user_root(self, value):\n-        oldvalue = self._user_root\n-        self._user_root = value\n-        if oldvalue != value:\n-            cherrypy.engine.publish('user_attr_changed', self, {'user_root': (oldvalue, value)})\n+    @validates('username')\n+    def validates_username(self, key, value):\n+        if self.username:\n+            raise ValueError('Username cannot be modified.')\n+        return value\n \n     def validate_access_token(self, token):\n         \"\"\"\n@@ -460,3 +421,19 @@ def user_after_delete(mapper, connection, target):\n     Publish event when user is deleted.\n     \"\"\"\n     cherrypy.engine.publish('user_deleted', target.username)\n+\n+\n+@event.listens_for(UserObject, 'after_update')\n+def user_attr_changed(mapper, connection, target):\n+    changes = {}\n+    state = inspect(target)\n+    for attr in state.attrs:\n+        if attr.key in ['user_root', 'email', 'role', 'mfa']:\n+            hist = attr.load_history()\n+            if hist.has_changes():\n+                changes[attr.key] = (\n+                    hist.deleted[0] if len(hist.deleted) >= 1 else None,\n+                    hist.added[0] if len(hist.added) >= 1 else None,\n+                )\n+    if changes:\n+        cherrypy.engine.publish('user_attr_changed', target, changes)"
        },
        {
          "filename": "rdiffweb/core/model/tests/test_user.py",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -36,11 +36,6 @@\n \n \n class UserObjectTest(rdiffweb.test.WebCase):\n-\n-    default_config = {\n-        'email-send-changed-notification': True,\n-    }\n-\n     def _read_ssh_key(self):\n         \"\"\"Readthe pub key from test packages\"\"\"\n         filename = pkg_resources.resource_filename('rdiffweb.core.tests', 'test_publickey_ssh_rsa.pub')\n@@ -174,12 +169,16 @@ def test_get_set(self):\n         user.refresh_repos()\n         self.listener.user_attr_changed.assert_called_with(user, {'user_root': ('', self.testcases)})\n         self.listener.user_attr_changed.reset_mock()\n+        user = UserObject.get_user('larry')\n         user.role = UserObject.ADMIN_ROLE\n+        user.add()\n         self.listener.user_attr_changed.assert_called_with(\n             user, {'role': (UserObject.USER_ROLE, UserObject.ADMIN_ROLE)}\n         )\n         self.listener.user_attr_changed.reset_mock()\n+        user = UserObject.get_user('larry')\n         user.email = 'larry@gmail.com'\n+        user.add()\n         self.listener.user_attr_changed.assert_called_with(user, {'email': ('', 'larry@gmail.com')})\n         self.listener.user_attr_changed.reset_mock()\n "
        },
        {
          "filename": "rdiffweb/core/notification.py",
          "status": "modified",
          "additions": 25,
          "deletions": 13,
          "patch": "@@ -78,19 +78,31 @@ def user_attr_changed(self, userobj, attrs={}):\n             return\n \n         # Leave if the mail was not changed.\n-        if 'email' not in attrs:\n-            return\n-\n-        old_email = attrs['email'][0]\n-        if not old_email:\n-            logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n-            return\n-\n-        # If the email attributes was changed, send a mail notification.\n-        body = self.app.templates.compile_template(\n-            \"email_changed.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n-        )\n-        self.bus.publish('queue_mail', to=old_email, subject=_(\"Email address changed\"), message=body)\n+        if 'email' in attrs:\n+            old_email = attrs['email'][0]\n+            if not old_email:\n+                logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n+                return\n+            # If the email attributes was changed, send a mail notification.\n+            subject = _(\"Email address changed\")\n+            body = self.app.templates.compile_template(\n+                \"email_changed.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n+            )\n+            self.bus.publish('queue_mail', to=old_email, subject=str(subject), message=body)\n+\n+        if 'mfa' in attrs:\n+            if not userobj.email:\n+                logger.info(\"can't sent mail to user [%s] without an email\", userobj.username)\n+                return\n+            subject = (\n+                _(\"Two-Factor Authentication turned off\")\n+                if userobj.mfa == UserObject.DISABLED_MFA\n+                else _(\"Two-Factor Authentication turned on\")\n+            )\n+            body = self.app.templates.compile_template(\n+                \"email_mfa.html\", **{\"header_name\": self.app.cfg.header_name, 'user': userobj}\n+            )\n+            self.bus.publish('queue_mail', to=userobj.email, subject=str(subject), message=body)\n \n     def user_password_changed(self, userobj):\n         if not self.send_changed:"
        },
        {
          "filename": "rdiffweb/core/tests/test_notification.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -118,10 +118,13 @@ def test_email_changed(self):\n         # Given a user with an email address\n         user = UserObject.get_user(self.USERNAME)\n         user.email = 'original_email@test.com'\n+        user.add()\n         self.listener.queue_email.reset_mock()\n \n         # When updating the user's email\n+        user = UserObject.get_user(self.USERNAME)\n         user.email = 'email_changed@test.com'\n+        user.add()\n \n         # Then a email is queue to notify the user.\n         self.listener.queue_email.assert_called_once_with("
        },
        {
          "filename": "rdiffweb/templates/email_mfa.html",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -3,16 +3,14 @@\n   <body>\n     {% trans username=(user.fullname or user.username) %}Hey {{ username }},{% endtrans %}\n     <p>\n-      {% trans %}To help us make sure it's really you, here's the verification code you'll need to log in:{% endtrans %}\n+      {% if user.mfa %}\n+        {% trans %}Your {{ header_name }} Account is now protected with Two-Factor Authentication. When you sign in on a new or untrusted device, you'll need your second factor to verify your identity.{% endtrans %}\n+      {% else %}\n+        {% trans %}Your {{ header_name }} account is no longer protected with Two-Factor Authentication. You don't need your second factor to sign in.{% endtrans %}\n+      {% endif %}\n     </p>\n     <p>\n-      <strong>{{ code }}</strong>\n-    </p>\n-    <p>\n-      {% trans %}If this wasn't you logging in, and you use a password to log in, please reset your password.{% endtrans %}\n-    </p>\n-    <p>\n-      {% trans %}This code will expire in 1 hour. Once the code expires, you will need to request a new verification code by going through the login procedure again.{% endtrans %}\n+      {% trans %}You received this email to let you know about important changes to your Google Account and services.{% endtrans %}\n     </p>\n   </body>\n </html>"
        },
        {
          "filename": "rdiffweb/templates/email_verification_code.html",
          "status": "added",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -0,0 +1,18 @@\n+<html>\n+  <head></head>\n+  <body>\n+    {% trans username=(user.fullname or user.username) %}Hey {{ username }},{% endtrans %}\n+    <p>\n+      {% trans %}To help us make sure it's really you, here's the verification code you'll need to log in:{% endtrans %}\n+    </p>\n+    <p>\n+      <strong>{{ code }}</strong>\n+    </p>\n+    <p>\n+      {% trans %}If this wasn't you logging in, and you use a password to log in, please reset your password.{% endtrans %}\n+    </p>\n+    <p>\n+      {% trans %}This code will expire in 1 hour. Once the code expires, you will need to request a new verification code by going through the login procedure again.{% endtrans %}\n+    </p>\n+  </body>\n+</html>"
        },
        {
          "filename": "tox.ini",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -77,7 +77,7 @@ commands = black --check --diff setup.py rdiffweb\n skip_install = true\n \n [testenv:djlint]\n-deps = djlint==1.12.1\n+deps = djlint==1.19.2\n allowlist_externals = sh\n commands = sh -c 'djlint --check rdiffweb/templates/*.html  rdiffweb/templates/**/*.html'\n skip_install = true"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 8,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb9b10fde29c125a7641a8daad96976bd2cf1307",
            "date": "2024-11-20T02:02:20Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9becf16f0a96fad246021256de58a204318687b8",
            "date": "2024-11-09T12:27:19Z",
            "author_login": "ikus060"
          },
          {
            "sha": "3364f0644d62590b65ad6610d74139edc8a1740f",
            "date": "2024-11-05T20:54:35Z",
            "author_login": "ikus060"
          },
          {
            "sha": "a96f583797b65a8f68d3780c1ed470c7989a56dc",
            "date": "2024-10-24T19:17:53Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9fad72d2a19b78be1e5b9dcd4e880e3f7496dbd0",
            "date": "2024-10-24T18:13:13Z",
            "author_login": "ikus060"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-840",
    "description": "Business Logic Errors in GitHub repository ikus060/rdiffweb prior to 2.5.0a7.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-26T21:15:10.537",
    "last_modified": "2024-11-21T07:19:22.617",
    "fix_date": "2022-10-21T16:14:40Z"
  },
  "references": [
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b8a40ba6-2452-4abe-a80a-2d065ee8891e",
      "source": "security@huntr.dev",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b8a40ba6-2452-4abe-a80a-2d065ee8891e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:00.960254",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rdiffweb",
    "owner": "ikus060",
    "created_at": "2012-10-22T14:14:23Z",
    "updated_at": "2025-01-12T13:25:42Z",
    "pushed_at": "2025-01-07T15:16:06Z",
    "size": 25971,
    "stars": 124,
    "forks": 28,
    "open_issues": 1,
    "watchers": 124,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 857869,
      "HTML": 104946,
      "JavaScript": 7655,
      "Shell": 3945,
      "CSS": 3081,
      "Dockerfile": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:43.805427"
  }
}