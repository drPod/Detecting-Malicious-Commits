{
  "cve_id": "CVE-2022-3491",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "3558afe9e9e904cabb8475392d859f2d2fc21041",
    "related_commits": [
      "3558afe9e9e904cabb8475392d859f2d2fc21041",
      "3558afe9e9e904cabb8475392d859f2d2fc21041"
    ],
    "patch_url": "https://github.com/vim/vim/commit/3558afe9e9e904cabb8475392d859f2d2fc21041.patch",
    "fix_commit_details": {
      "sha": "3558afe9e9e904cabb8475392d859f2d2fc21041",
      "commit_date": "2022-10-13T15:12:57Z",
      "author": {
        "login": "brammool",
        "type": "User",
        "stats": {
          "total_commits": 16567,
          "average_weekly_commits": 15.411162790697674,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 874
        }
      },
      "commit_message": {
        "title": "patch 9.0.0742: reading past end of the line when compiling a function",
        "length": 236,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 169,
        "additions": 136,
        "deletions": 33
      },
      "files": [
        {
          "filename": "src/testdir/test_vim9_func.vim",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -4339,6 +4339,33 @@ def Test_defer()\n   assert_equal('', glob('XdeferFile'))\n enddef\n \n+def Test_invalid_redir()\n+  var lines =<< trim END\n+      def Tone()\n+        if 1\n+          redi =>@\u00000\n+          redi END\n+        endif\n+      enddef\n+      defcompile\n+  END\n+  v9.CheckScriptFailure(lines, 'E354:')\n+  delfunc g:Tone\n+\n+  # this was reading past the end of the line\n+  lines =<< trim END\n+      def Ttwo()\n+        if 0\n+          redi =>@\u00000\n+          redi END\n+        endif\n+      enddef\n+      defcompile\n+  END\n+  v9.CheckScriptFailure(lines, 'E354:')\n+  delfunc g:Ttwo\n+enddef\n+\n \" The following messes up syntax highlight, keep near the end.\n if has('python3')\n   def Test_python3_command()"
        },
        {
          "filename": "src/testdir/test_vim9_script.vim",
          "status": "modified",
          "additions": 53,
          "deletions": 2,
          "patch": "@@ -2136,15 +2136,66 @@ enddef\n \n def Test_skipped_redir()\n   var lines =<< trim END\n-      def T()\n+      def Tredir()\n         if 0\n-          redir =>l[0]\n+          redir => l[0]\n           redir END\n         endif\n       enddef\n       defcompile\n   END\n   v9.CheckScriptSuccess(lines)\n+  delfunc g:Tredir\n+\n+  lines =<< trim END\n+      def Tredir()\n+        if 0\n+          redir => l[0]\n+        endif\n+        echo 'executed'\n+        if 0\n+          redir END\n+        endif\n+      enddef\n+      defcompile\n+  END\n+  v9.CheckScriptSuccess(lines)\n+  delfunc g:Tredir\n+\n+  lines =<< trim END\n+      def Tredir()\n+        var l = ['']\n+        if 1\n+          redir => l[0]\n+        endif\n+        echo 'executed'\n+        if 0\n+          redir END\n+        else\n+          redir END\n+        endif\n+      enddef\n+      defcompile\n+  END\n+  v9.CheckScriptSuccess(lines)\n+  delfunc g:Tredir\n+\n+  lines =<< trim END\n+      let doit = 1\n+      def Tredir()\n+        var l = ['']\n+        if g:doit\n+          redir => l[0]\n+        endif\n+        echo 'executed'\n+        if g:doit\n+          redir END\n+        endif\n+      enddef\n+      defcompile\n+  END\n+  v9.CheckScriptSuccess(lines)\n+  delfunc g:Tredir\n enddef\n \n def Test_for_loop()"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -699,6 +699,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    742,\n /**/\n     741,\n /**/"
        },
        {
          "filename": "src/vim9cmds.c",
          "status": "modified",
          "additions": 36,
          "deletions": 26,
          "patch": "@@ -2412,34 +2412,37 @@ compile_redir(char_u *line, exarg_T *eap, cctx_T *cctx)\n     {\n \tif (STRNCMP(arg, \"END\", 3) == 0)\n \t{\n-\t    if (lhs->lhs_append)\n+\t    if (cctx->ctx_skip != SKIP_YES)\n \t    {\n-\t\t// First load the current variable value.\n-\t\tif (compile_load_lhs_with_index(lhs, lhs->lhs_whole,\n+\t\tif (lhs->lhs_append)\n+\t\t{\n+\t\t    // First load the current variable value.\n+\t\t    if (compile_load_lhs_with_index(lhs, lhs->lhs_whole,\n \t\t\t\t\t\t\t\t cctx) == FAIL)\n-\t\t    return NULL;\n-\t    }\n+\t\t\treturn NULL;\n+\t\t}\n \n-\t    // Gets the redirected text and put it on the stack, then store it\n-\t    // in the variable.\n-\t    generate_instr_type(cctx, ISN_REDIREND, &t_string);\n+\t\t// Gets the redirected text and put it on the stack, then store\n+\t\t// it in the variable.\n+\t\tgenerate_instr_type(cctx, ISN_REDIREND, &t_string);\n \n-\t    if (lhs->lhs_append)\n-\t\tgenerate_CONCAT(cctx, 2);\n+\t\tif (lhs->lhs_append)\n+\t\t    generate_CONCAT(cctx, 2);\n \n-\t    if (lhs->lhs_has_index)\n-\t    {\n-\t\t// Use the info in \"lhs\" to store the value at the index in the\n-\t\t// list or dict.\n-\t\tif (compile_assign_unlet(lhs->lhs_whole, lhs, TRUE,\n+\t\tif (lhs->lhs_has_index)\n+\t\t{\n+\t\t    // Use the info in \"lhs\" to store the value at the index in\n+\t\t    // the list or dict.\n+\t\t    if (compile_assign_unlet(lhs->lhs_whole, lhs, TRUE,\n \t\t\t\t\t\t      &t_string, cctx) == FAIL)\n+\t\t\treturn NULL;\n+\t\t}\n+\t\telse if (generate_store_lhs(cctx, lhs, -1, FALSE) == FAIL)\n \t\t    return NULL;\n-\t    }\n-\t    else if (generate_store_lhs(cctx, lhs, -1, FALSE) == FAIL)\n-\t\treturn NULL;\n \n-\t    VIM_CLEAR(lhs->lhs_name);\n-\t    VIM_CLEAR(lhs->lhs_whole);\n+\t\tVIM_CLEAR(lhs->lhs_name);\n+\t\tVIM_CLEAR(lhs->lhs_whole);\n+\t    }\n \t    return arg + 3;\n \t}\n \temsg(_(e_cannot_nest_redir));\n@@ -2465,13 +2468,20 @@ compile_redir(char_u *line, exarg_T *eap, cctx_T *cctx)\n \tif (need_type(&t_string, lhs->lhs_member_type,\n \t\t\t\t\t    -1, 0, cctx, FALSE, FALSE) == FAIL)\n \t    return NULL;\n-\tgenerate_instr(cctx, ISN_REDIRSTART);\n-\tlhs->lhs_append = append;\n-\tif (lhs->lhs_has_index)\n+\tif (cctx->ctx_skip == SKIP_YES)\n \t{\n-\t    lhs->lhs_whole = vim_strnsave(arg, lhs->lhs_varlen_total);\n-\t    if (lhs->lhs_whole == NULL)\n-\t\treturn NULL;\n+\t    VIM_CLEAR(lhs->lhs_name);\n+\t}\n+\telse\n+\t{\n+\t    generate_instr(cctx, ISN_REDIRSTART);\n+\t    lhs->lhs_append = append;\n+\t    if (lhs->lhs_has_index)\n+\t    {\n+\t\tlhs->lhs_whole = vim_strnsave(arg, lhs->lhs_varlen_total);\n+\t\tif (lhs->lhs_whole == NULL)\n+\t\t    return NULL;\n+\t    }\n \t}\n \n \treturn arg + lhs->lhs_varlen_total;"
        },
        {
          "filename": "src/vim9compile.c",
          "status": "modified",
          "additions": 18,
          "deletions": 5,
          "patch": "@@ -1283,6 +1283,19 @@ vim9_declare_error(char_u *name)\n     semsg(_(e_cannot_declare_a_scope_variable), scope, name);\n }\n \n+/*\n+ * Return TRUE if \"name\" is a valid register to use.\n+ * Return FALSE and give an error message if not.\n+ */\n+    static int\n+valid_dest_reg(int name)\n+{\n+    if ((name == '@' || valid_yank_reg(name, FALSE)) && name != '.')\n+\treturn TRUE;\n+    emsg_invreg(name);\n+    return FAIL;\n+}\n+\n /*\n  * For one assignment figure out the type of destination.  Return it in \"dest\".\n  * When not recognized \"dest\" is not set.\n@@ -1364,12 +1377,8 @@ get_var_dest(\n     }\n     else if (*name == '@')\n     {\n-\tif (name[1] != '@'\n-\t\t\t&& (!valid_yank_reg(name[1], FALSE) || name[1] == '.'))\n-\t{\n-\t    emsg_invreg(name[1]);\n+\tif (!valid_dest_reg(name[1]))\n \t    return FAIL;\n-\t}\n \t*dest = dest_reg;\n \t*type = name[1] == '#' ? &t_number_or_string : &t_string;\n     }\n@@ -1445,7 +1454,11 @@ compile_lhs(\n     // \"var_end\" is the end of the variable/option/etc. name.\n     lhs->lhs_dest_end = skip_var_one(var_start, FALSE);\n     if (*var_start == '@')\n+    {\n+\tif (!valid_dest_reg(var_start[1]))\n+\t    return FAIL;\n \tvar_end = var_start + 2;\n+    }\n     else\n     {\n \t// skip over the leading \"&\", \"&l:\", \"&g:\" and \"$\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1aefe1de0b20fe4966863e07efa14b6aa87323ee",
            "date": "2025-01-14T16:29:42Z",
            "author_login": "yegappan"
          },
          {
            "sha": "1ac53b84ada3a992f320566737e66fa00d48611f",
            "date": "2025-01-14T16:25:02Z",
            "author_login": "chrisbra"
          },
          {
            "sha": "57f0119358ed7f060d5020309b9043463121435f",
            "date": "2025-01-14T16:21:42Z",
            "author_login": "h-east"
          },
          {
            "sha": "045564d0a73218594691953c0c8bf2035e1e176e",
            "date": "2025-01-14T16:15:59Z",
            "author_login": "habamax"
          },
          {
            "sha": "6289f9159102e0855bedc566636b5e7ca6ced72c",
            "date": "2025-01-14T16:13:36Z",
            "author_login": "yegappan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-122",
    "description": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 9.0.0742.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-03T13:15:09.713",
    "last_modified": "2024-11-21T07:19:38.590",
    "fix_date": "2022-10-13T15:12:57Z"
  },
  "references": [
    {
      "url": "https://github.com/vim/vim/commit/3558afe9e9e904cabb8475392d859f2d2fc21041",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/6e6e05c2-2cf7-4aa5-a817-a62007bf92cb",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202305-16",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/vim/vim/commit/3558afe9e9e904cabb8475392d859f2d2fc21041",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/6e6e05c2-2cf7-4aa5-a817-a62007bf92cb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202305-16",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.199602",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}