{
  "cve_id": "CVE-2022-35919",
  "github_data": {
    "repository": "minio/minio",
    "fix_commit": "bc72e4226e669d98c8e0f3eccc9297be9251c692",
    "related_commits": [
      "bc72e4226e669d98c8e0f3eccc9297be9251c692",
      "bc72e4226e669d98c8e0f3eccc9297be9251c692"
    ],
    "patch_url": "https://github.com/minio/minio/commit/bc72e4226e669d98c8e0f3eccc9297be9251c692.patch",
    "fix_commit_details": {
      "sha": "bc72e4226e669d98c8e0f3eccc9297be9251c692",
      "commit_date": "2022-07-29T00:44:21Z",
      "author": {
        "login": "harshavardhana",
        "type": "User",
        "stats": {
          "total_commits": 4369,
          "average_weekly_commits": 8.181647940074907,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 489
        }
      },
      "commit_message": {
        "title": "do not allow filesystem fallback in server download (#15429)",
        "length": 386,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 79,
        "additions": 33,
        "deletions": 46
      },
      "files": [
        {
          "filename": "cmd/update.go",
          "status": "modified",
          "additions": 33,
          "deletions": 46,
          "patch": "@@ -291,63 +291,50 @@ func getUserAgent(mode string) string {\n }\n \n func downloadReleaseURL(u *url.URL, timeout time.Duration, mode string) (content string, err error) {\n-\tvar reader io.ReadCloser\n-\tif u.Scheme == \"https\" || u.Scheme == \"http\" {\n-\t\treq, err := http.NewRequest(http.MethodGet, u.String(), nil)\n-\t\tif err != nil {\n-\t\t\treturn content, AdminError{\n-\t\t\t\tCode:       AdminUpdateUnexpectedFailure,\n-\t\t\t\tMessage:    err.Error(),\n-\t\t\t\tStatusCode: http.StatusInternalServerError,\n-\t\t\t}\n+\treq, err := http.NewRequest(http.MethodGet, u.String(), nil)\n+\tif err != nil {\n+\t\treturn content, AdminError{\n+\t\t\tCode:       AdminUpdateUnexpectedFailure,\n+\t\t\tMessage:    err.Error(),\n+\t\t\tStatusCode: http.StatusInternalServerError,\n \t\t}\n-\t\treq.Header.Set(\"User-Agent\", getUserAgent(mode))\n+\t}\n+\treq.Header.Set(\"User-Agent\", getUserAgent(mode))\n \n-\t\tclient := &http.Client{Transport: getUpdateTransport(timeout)}\n-\t\tresp, err := client.Do(req)\n-\t\tif err != nil {\n-\t\t\tif xnet.IsNetworkOrHostDown(err, false) {\n-\t\t\t\treturn content, AdminError{\n-\t\t\t\t\tCode:       AdminUpdateURLNotReachable,\n-\t\t\t\t\tMessage:    err.Error(),\n-\t\t\t\t\tStatusCode: http.StatusServiceUnavailable,\n-\t\t\t\t}\n-\t\t\t}\n+\tclient := &http.Client{Transport: getUpdateTransport(timeout)}\n+\tresp, err := client.Do(req)\n+\tif err != nil {\n+\t\tif xnet.IsNetworkOrHostDown(err, false) {\n \t\t\treturn content, AdminError{\n-\t\t\t\tCode:       AdminUpdateUnexpectedFailure,\n+\t\t\t\tCode:       AdminUpdateURLNotReachable,\n \t\t\t\tMessage:    err.Error(),\n-\t\t\t\tStatusCode: http.StatusInternalServerError,\n+\t\t\t\tStatusCode: http.StatusServiceUnavailable,\n \t\t\t}\n \t\t}\n-\t\tif resp == nil {\n-\t\t\treturn content, AdminError{\n-\t\t\t\tCode:       AdminUpdateUnexpectedFailure,\n-\t\t\t\tMessage:    fmt.Sprintf(\"No response from server to download URL %s\", u),\n-\t\t\t\tStatusCode: http.StatusInternalServerError,\n-\t\t\t}\n+\t\treturn content, AdminError{\n+\t\t\tCode:       AdminUpdateUnexpectedFailure,\n+\t\t\tMessage:    err.Error(),\n+\t\t\tStatusCode: http.StatusInternalServerError,\n \t\t}\n-\t\treader = resp.Body\n-\t\tdefer xhttp.DrainBody(resp.Body)\n-\n-\t\tif resp.StatusCode != http.StatusOK {\n-\t\t\treturn content, AdminError{\n-\t\t\t\tCode:       AdminUpdateUnexpectedFailure,\n-\t\t\t\tMessage:    fmt.Sprintf(\"Error downloading URL %s. Response: %v\", u, resp.Status),\n-\t\t\t\tStatusCode: resp.StatusCode,\n-\t\t\t}\n+\t}\n+\tif resp == nil {\n+\t\treturn content, AdminError{\n+\t\t\tCode:       AdminUpdateUnexpectedFailure,\n+\t\t\tMessage:    fmt.Sprintf(\"No response from server to download URL %s\", u),\n+\t\t\tStatusCode: http.StatusInternalServerError,\n \t\t}\n-\t} else {\n-\t\treader, err = os.Open(u.Path)\n-\t\tif err != nil {\n-\t\t\treturn content, AdminError{\n-\t\t\t\tCode:       AdminUpdateURLNotReachable,\n-\t\t\t\tMessage:    err.Error(),\n-\t\t\t\tStatusCode: http.StatusServiceUnavailable,\n-\t\t\t}\n+\t}\n+\tdefer xhttp.DrainBody(resp.Body)\n+\n+\tif resp.StatusCode != http.StatusOK {\n+\t\treturn content, AdminError{\n+\t\t\tCode:       AdminUpdateUnexpectedFailure,\n+\t\t\tMessage:    fmt.Sprintf(\"Error downloading URL %s. Response: %v\", u, resp.Status),\n+\t\t\tStatusCode: resp.StatusCode,\n \t\t}\n \t}\n \n-\tcontentBytes, err := ioutil.ReadAll(reader)\n+\tcontentBytes, err := ioutil.ReadAll(resp.Body)\n \tif err != nil {\n \t\treturn content, AdminError{\n \t\t\tCode:       AdminUpdateUnexpectedFailure,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4952bdb77035e8142b2f0fc5b86181aeb1d3e82e",
            "date": "2025-01-14T19:53:02Z",
            "author_login": "poornas"
          },
          {
            "sha": "00b2ef29323e786a8958bf0bedced133cb06245f",
            "date": "2025-01-08T11:09:24Z",
            "author_login": "vadmeste"
          },
          {
            "sha": "4536ecfaa4d81dd3f648616094a4936162089db8",
            "date": "2025-01-06T15:51:54Z",
            "author_login": "klauspost"
          },
          {
            "sha": "43a74029685512ce9b1b76c053d48b43fc8d64fc",
            "date": "2025-01-03T05:34:47Z",
            "author_login": "harshavardhana"
          },
          {
            "sha": "330dca9a354cdf445d71979170bbe3d27971d127",
            "date": "2024-12-21T04:24:45Z",
            "author_login": "allanrogerr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-22",
    "description": "MinIO is a High Performance Object Storage released under GNU Affero General Public License v3.0. In affected versions all 'admin' users authorized for `admin:ServerUpdate` can selectively trigger an error that in response, returns the content of the path requested. Any normal OS system would allow access to contents at any arbitrary paths that are readable by MinIO process. Users are advised to upgrade. Users unable to upgrade may disable ServerUpdate API by denying the `admin:ServerUpdate` action for your admin users via IAM policies.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-01T22:15:10.280",
    "last_modified": "2024-11-21T07:11:57.743",
    "fix_date": "2022-07-29T00:44:21Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/175010/Minio-2022-07-29T19-40-48Z-Path-Traversal.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/commit/bc72e4226e669d98c8e0f3eccc9297be9251c692",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/pull/15429",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-gr9v-6pcm-rqvg",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/175010/Minio-2022-07-29T19-40-48Z-Path-Traversal.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/commit/bc72e4226e669d98c8e0f3eccc9297be9251c692",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/pull/15429",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-gr9v-6pcm-rqvg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.190263",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "minio",
    "owner": "minio",
    "created_at": "2015-01-14T19:23:58Z",
    "updated_at": "2025-01-14T10:52:24Z",
    "pushed_at": "2025-01-08T11:09:25Z",
    "size": 131770,
    "stars": 49440,
    "forks": 5609,
    "open_issues": 33,
    "watchers": 49440,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release"
    ],
    "languages": {
      "Go": 8661217,
      "Shell": 72203,
      "Makefile": 11634,
      "Mustache": 6628,
      "Smarty": 872,
      "Dockerfile": 229
    },
    "commit_activity": {
      "total_commits_last_year": 949,
      "avg_commits_per_week": 18.25,
      "days_active_last_year": 271
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:53:58.932687"
  }
}