{
  "cve_id": "CVE-2022-35924",
  "github_data": {
    "repository": "nextauthjs/next-auth",
    "fix_commit": "afb1fcdae3cc30445038ef588e491d139b916003",
    "related_commits": [
      "afb1fcdae3cc30445038ef588e491d139b916003",
      "afb1fcdae3cc30445038ef588e491d139b916003"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "afb1fcdae3cc30445038ef588e491d139b916003",
      "commit_date": "2022-08-01T11:42:41Z",
      "author": {
        "login": "balazsorban44",
        "type": "User",
        "stats": {
          "total_commits": 1440,
          "average_weekly_commits": 3.923705722070845,
          "total_additions": 494363,
          "total_deletions": 498776,
          "weeks_active": 179
        }
      },
      "commit_message": {
        "title": "fix(providers): add `normalizeIdentifier` to EmailProvider",
        "length": 529,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 367,
        "additions": 301,
        "deletions": 66
      },
      "files": [
        {
          "filename": "docs/docs/providers/email.md",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -223,3 +223,31 @@ providers: [\n   })\n ],\n ```\n+\n+## Normalizing the email address\n+\n+By default, NextAuth.js will normalize the email address. It treats values as case-insensitive (which is technically not compliant to the [RFC 2821 spec](https://datatracker.ietf.org/doc/html/rfc2821), but in practice this causes more problems than it solves, eg. when looking up users by e-mail from databases.) and also removes any secondary email address that was passed in as a comma-separated list. You can apply your own normalization via the `normalizeIdentifier` method on the `EmailProvider`. The following example shows the default behavior:\n+```ts\n+  EmailProvider({\n+    // ...\n+    normalizeIdentifier(identifier: string): string {\n+      // Get the first two elements only,\n+      // separated by `@` from user input.\n+      let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n+      // The part before \"@\" can contain a \",\"\n+      // but we remove it on the domain part\n+      domain = domain.split(\",\")[0]\n+      return `${local}@${domain}`\n+\n+      // You can also throw an error, which will redirect the user\n+      // to the error page with error=EmailSignin in the URL\n+      // if (identifier.split(\"@\").length > 2) {\n+      //   throw new Error(\"Only one email allowed\")\n+      // }\n+    },\n+  })\n+```\n+\n+:::warning\n+Always make sure this returns a single e-mail address, even if multiple ones were passed in.\n+:::\n\\ No newline at end of file"
        },
        {
          "filename": "packages/next-auth/config/jest.client.config.js",
          "status": "removed",
          "additions": 0,
          "deletions": 16,
          "patch": "@@ -1,16 +0,0 @@\n-/** @type {import('@jest/types').Config.InitialOptions} */\n-module.exports = {\n-  transform: {\n-    \"\\\\.(js|jsx|ts|tsx)$\": [\"@swc/jest\", require(\"./swc.config\")],\n-  },\n-  rootDir: \"../src\",\n-  setupFilesAfterEnv: [\"../config/jest-setup.js\"],\n-  testMatch: [\"**/*.test.js\"],\n-  // collectCoverageFrom: [\"!client/__tests__/**\"],\n-  // coverageDirectory: \"../coverage\",\n-  testEnvironment: \"jsdom\",\n-  watchPlugins: [\n-    \"jest-watch-typeahead/filename\",\n-    \"jest-watch-typeahead/testname\",\n-  ],\n-}"
        },
        {
          "filename": "packages/next-auth/config/jest.config.js",
          "status": "added",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -0,0 +1,34 @@\n+/** @type {import('jest').Config} */\n+module.exports = {\n+  projects: [\n+    {\n+      displayName: \"core\",\n+      testMatch: [\"**/*.test.ts\"],\n+      rootDir: \".\",\n+      setupFilesAfterEnv: [\"./config/jest-setup.js\"],\n+      transform: {\n+        \"\\\\.(js|jsx|ts|tsx)$\": [\"@swc/jest\", require(\"./swc.config\")],\n+      },\n+      coveragePathIgnorePatterns: [\"tests\"],\n+    },\n+    {\n+      displayName: \"client\",\n+      testMatch: [\"**/*.test.js\"],\n+      setupFilesAfterEnv: [\"./config/jest-setup.js\"],\n+      rootDir: \".\",\n+      transform: {\n+        \"\\\\.(js|jsx|ts|tsx)$\": [\"@swc/jest\", require(\"./swc.config\")],\n+      },\n+      testEnvironment: \"jsdom\",\n+      coveragePathIgnorePatterns: [\"__tests__\"],\n+    },\n+  ],\n+  watchPlugins: [\n+    \"jest-watch-typeahead/filename\",\n+    \"jest-watch-typeahead/testname\",\n+  ],\n+  collectCoverage: true,\n+  coverageDirectory: \"../coverage\",\n+  coverageReporters: [\"html\", \"text-summary\"],\n+  collectCoverageFrom: [\"src/**/*.(js|jsx|ts|tsx)\"],\n+}"
        },
        {
          "filename": "packages/next-auth/config/jest.core.config.js",
          "status": "removed",
          "additions": 0,
          "deletions": 13,
          "patch": "@@ -1,13 +0,0 @@\n-/** @type {import('@jest/types').Config.InitialOptions} */\n-module.exports = {\n-  transform: {\n-    \"\\\\.(js|jsx|ts|tsx)$\": [\"@swc/jest\", require(\"./swc.config\")],\n-  },\n-  rootDir: \"..\",\n-  testMatch: [\"**/*.test.ts\"],\n-  setupFilesAfterEnv: [\"./config/jest-setup.js\"],\n-  watchPlugins: [\n-    \"jest-watch-typeahead/filename\",\n-    \"jest-watch-typeahead/testname\",\n-  ],\n-}"
        },
        {
          "filename": "packages/next-auth/package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -42,9 +42,7 @@\n     \"build:js\": \"pnpm clean && pnpm generate-providers && tsc && babel --config-file ./config/babel.config.js src --out-dir . --extensions \\\".tsx,.ts,.js,.jsx\\\"\",\n     \"build:css\": \"postcss --config config/postcss.config.js src/**/*.css --base src --dir . && node config/wrap-css.js\",\n     \"watch:css\": \"postcss --config config/postcss.config.js --watch src/**/*.css --base src --dir .\",\n-    \"test:client\": \"jest --config ./config/jest.client.config.js\",\n-    \"test:core\": \"jest --config ./config/jest.core.config.js\",\n-    \"test\": \"pnpm test:core && pnpm test:client\",\n+    \"test\": \"jest --config ./config/jest.config.js\",\n     \"prepublishOnly\": \"pnpm build\",\n     \"generate-providers\": \"node ./config/generate-providers.js\",\n     \"setup\": \"pnpm generate-providers\","
        },
        {
          "filename": "packages/next-auth/src/core/lib/email/signin.ts",
          "status": "modified",
          "additions": 18,
          "deletions": 17,
          "patch": "@@ -21,27 +21,28 @@ export default async function email(\n     Date.now() + (provider.maxAge ?? ONE_DAY_IN_SECONDS) * 1000\n   )\n \n-  // Save in database\n-  // @ts-expect-error\n-  await adapter.createVerificationToken({\n-    identifier,\n-    token: hashToken(token, options),\n-    expires,\n-  })\n-\n   // Generate a link with email, unhashed token and callback url\n   const params = new URLSearchParams({ callbackUrl, token, email: identifier })\n   const _url = `${url}/callback/${provider.id}?${params}`\n \n-  // Send to user\n-  await provider.sendVerificationRequest({\n-    identifier,\n-    token,\n-    expires,\n-    url: _url,\n-    provider,\n-    theme,\n-  })\n+  await Promise.all([\n+    // Send to user\n+    provider.sendVerificationRequest({\n+      identifier,\n+      token,\n+      expires,\n+      url: _url,\n+      provider,\n+      theme,\n+    }),\n+    // Save in database\n+    // @ts-expect-error // verified in `assertConfig`\n+    adapter.createVerificationToken({\n+      identifier,\n+      token: hashToken(token, options),\n+      expires,\n+    }),\n+  ])\n \n   return `${url}/verify-request?${new URLSearchParams({\n     provider: provider.id,"
        },
        {
          "filename": "packages/next-auth/src/core/routes/signin.ts",
          "status": "modified",
          "additions": 20,
          "deletions": 13,
          "patch": "@@ -33,16 +33,26 @@ export default async function signin(params: {\n       return { redirect: `${url}/error?error=OAuthSignin` }\n     }\n   } else if (provider.type === \"email\") {\n-    /**\n-     * @note Technically the part of the email address local mailbox element\n-     * (everything before the @ symbol) should be treated as 'case sensitive'\n-     * according to RFC 2821, but in practice this causes more problems than\n-     * it solves. We treat email addresses as all lower case. If anyone\n-     * complains about this we can make strict RFC 2821 compliance an option.\n-     */\n-    const email = body?.email?.toLowerCase()\n-\n+    let email: string = body?.email\n     if (!email) return { redirect: `${url}/error?error=EmailSignin` }\n+    const normalizer: (identifier: string) => string =\n+      provider.normalizeIdentifier ??\n+      ((identifier) => {\n+        // Get the first two elements only,\n+        // separated by `@` from user input.\n+        let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n+        // The part before \"@\" can contain a \",\"\n+        // but we remove it on the domain part\n+        domain = domain.split(\",\")[0]\n+        return `${local}@${domain}`\n+      })\n+\n+    try {\n+      email = normalizer(body?.email)\n+    } catch (error) {\n+      logger.error(\"SIGNIN_EMAIL_ERROR\", { error, providerId: provider.id })\n+      return { redirect: `${url}/error?error=EmailSignin` }\n+    }\n \n     // Verified in `assertConfig`\n     // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n@@ -85,10 +95,7 @@ export default async function signin(params: {\n       const redirect = await emailSignin(email, options)\n       return { redirect }\n     } catch (error) {\n-      logger.error(\"SIGNIN_EMAIL_ERROR\", {\n-        error: error as Error,\n-        providerId: provider.id,\n-      })\n+      logger.error(\"SIGNIN_EMAIL_ERROR\", { error, providerId: provider.id })\n       return { redirect: `${url}/error?error=EmailSignin` }\n     }\n   }"
        },
        {
          "filename": "packages/next-auth/src/providers/email.ts",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -46,6 +46,21 @@ export interface EmailConfig extends CommonProviderOptions {\n   generateVerificationToken?: () => Awaitable<string>\n   /** If defined, it is used to hash the verification token when saving to the database . */\n   secret?: string\n+  /**\n+   * Normalizes the user input before sending the verification request.\n+   *\n+   * \u26a0\ufe0f Always make sure this method returns a single email address.\n+   *\n+   * @note Technically, the part of the email address local mailbox element\n+   * (everything before the `@` symbol) should be treated as 'case sensitive'\n+   * according to RFC 2821, but in practice this causes more problems than\n+   * it solves, e.g.: when looking up users by e-mail from databases.\n+   * By default, we treat email addresses as all lower case,\n+   * but you can override this function to change this behavior.\n+   *\n+   * [Documentation](https://next-auth.js.org/providers/email#normalizing-the-e-mail-address) | [RFC 2821](https://tools.ietf.org/html/rfc2821) | [Email syntax](https://en.wikipedia.org/wiki/Email_address#Syntax)\n+   */\n+  normalizeIdentifier?: (identifier: string) => string\n   options: EmailUserConfig\n }\n \n@@ -79,7 +94,7 @@ export default function Email(options: EmailUserConfig): EmailConfig {\n       })\n       const failed = result.rejected.concat(result.pending).filter(Boolean)\n       if (failed.length) {\n-        throw new Error(`Email(s) (${failed.join(\", \")}) could not be sent`)\n+        throw new Error(`Email (${failed.join(\", \")}) could not be sent`)\n       }\n     },\n     options,"
        },
        {
          "filename": "packages/next-auth/tests/email.test.ts",
          "status": "added",
          "additions": 167,
          "deletions": 0,
          "patch": "@@ -0,0 +1,167 @@\n+import { createCSRF, handler, mockAdapter } from \"./lib\"\n+import EmailProvider from \"../src/providers/email\"\n+\n+it(\"Send e-mail to the only address correctly\", async () => {\n+  const { secret, csrf } = await createCSRF()\n+  const sendVerificationRequest = jest.fn()\n+  const signIn = jest.fn(() => true)\n+\n+  const email = \"email@example.com\"\n+  const { res } = await handler(\n+    {\n+      adapter: mockAdapter(),\n+      providers: [EmailProvider({ sendVerificationRequest })],\n+      callbacks: { signIn },\n+      secret,\n+    },\n+    {\n+      path: \"signin/email\",\n+      requestInit: {\n+        method: \"POST\",\n+        headers: { cookie: csrf.cookie },\n+        body: JSON.stringify({ email: email, csrfToken: csrf.value }),\n+      },\n+    }\n+  )\n+\n+  expect(res.redirect).toBe(\n+    \"http://localhost:3000/api/auth/verify-request?provider=email&type=email\"\n+  )\n+\n+  expect(signIn).toBeCalledTimes(1)\n+  expect(signIn).toHaveBeenCalledWith(\n+    expect.objectContaining({\n+      user: expect.objectContaining({ email }),\n+    })\n+  )\n+\n+  expect(sendVerificationRequest).toHaveBeenCalledWith(\n+    expect.objectContaining({ identifier: email })\n+  )\n+})\n+\n+it(\"Send e-mail to first address only\", async () => {\n+  const { secret, csrf } = await createCSRF()\n+  const sendVerificationRequest = jest.fn()\n+  const signIn = jest.fn(() => true)\n+\n+  const firstEmail = \"email@email.com\"\n+  const email = `${firstEmail},email@email2.com`\n+  const { res } = await handler(\n+    {\n+      adapter: mockAdapter(),\n+      providers: [EmailProvider({ sendVerificationRequest })],\n+      callbacks: { signIn },\n+      secret,\n+    },\n+    {\n+      path: \"signin/email\",\n+      requestInit: {\n+        method: \"POST\",\n+        headers: { cookie: csrf.cookie },\n+        body: JSON.stringify({ email: email, csrfToken: csrf.value }),\n+      },\n+    }\n+  )\n+\n+  expect(res.redirect).toBe(\n+    \"http://localhost:3000/api/auth/verify-request?provider=email&type=email\"\n+  )\n+\n+  expect(signIn).toBeCalledTimes(1)\n+  expect(signIn).toHaveBeenCalledWith(\n+    expect.objectContaining({\n+      user: expect.objectContaining({ email: firstEmail }),\n+    })\n+  )\n+\n+  expect(sendVerificationRequest).toHaveBeenCalledWith(\n+    expect.objectContaining({ identifier: firstEmail })\n+  )\n+})\n+\n+it(\"Send e-mail to address with first domain\", async () => {\n+  const { secret, csrf } = await createCSRF()\n+  const sendVerificationRequest = jest.fn()\n+  const signIn = jest.fn(() => true)\n+\n+  const firstEmail = \"email@email.com\"\n+  const email = `${firstEmail},email2.com`\n+  const { res } = await handler(\n+    {\n+      adapter: mockAdapter(),\n+      providers: [EmailProvider({ sendVerificationRequest })],\n+      callbacks: { signIn },\n+      secret,\n+    },\n+    {\n+      path: \"signin/email\",\n+      requestInit: {\n+        method: \"POST\",\n+        headers: { cookie: csrf.cookie },\n+        body: JSON.stringify({ email: email, csrfToken: csrf.value }),\n+      },\n+    }\n+  )\n+\n+  expect(res.redirect).toBe(\n+    \"http://localhost:3000/api/auth/verify-request?provider=email&type=email\"\n+  )\n+\n+  expect(signIn).toBeCalledTimes(1)\n+  expect(signIn).toHaveBeenCalledWith(\n+    expect.objectContaining({\n+      user: expect.objectContaining({ email: firstEmail }),\n+    })\n+  )\n+\n+  expect(sendVerificationRequest).toHaveBeenCalledWith(\n+    expect.objectContaining({ identifier: firstEmail })\n+  )\n+})\n+\n+it(\"Redirect to error page if multiple addresses aren't allowed\", async () => {\n+  const { secret, csrf } = await createCSRF()\n+  const sendVerificationRequest = jest.fn()\n+  const signIn = jest.fn()\n+  const error = new Error(\"Only one email allowed\")\n+  const { res, log } = await handler(\n+    {\n+      adapter: mockAdapter(),\n+      callbacks: { signIn },\n+      providers: [\n+        EmailProvider({\n+          sendVerificationRequest,\n+          normalizeIdentifier(identifier) {\n+            if (identifier.split(\"@\").length > 2) throw error\n+            return identifier\n+          },\n+        }),\n+      ],\n+      secret,\n+    },\n+    {\n+      path: \"signin/email\",\n+      requestInit: {\n+        method: \"POST\",\n+        headers: { cookie: csrf.cookie },\n+        body: JSON.stringify({\n+          email: \"email@email.com,email@email2.com\",\n+          csrfToken: csrf.value,\n+        }),\n+      },\n+    }\n+  )\n+\n+  expect(signIn).toBeCalledTimes(0)\n+  expect(sendVerificationRequest).toBeCalledTimes(0)\n+\n+  expect(log.error.mock.calls[0]).toEqual([\n+    \"SIGNIN_EMAIL_ERROR\",\n+    { error, providerId: \"email\" },\n+  ])\n+\n+  expect(res.redirect).toBe(\n+    \"http://localhost:3000/api/auth/error?error=EmailSignin\"\n+  )\n+})"
        },
        {
          "filename": "packages/next-auth/tests/getServerSession.test.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1,4 +1,3 @@\n-import type { NextApiRequest } from \"next\"\n import { MissingSecret } from \"../src/core/errors\"\n import { unstable_getServerSession } from \"../src/next\"\n import { mockLogger } from \"./lib\""
        },
        {
          "filename": "packages/next-auth/tests/lib.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -1,6 +1,7 @@\n import { createHash } from \"crypto\"\n-import type { LoggerInstance, NextAuthOptions } from \"../src\"\n import { NextAuthHandler } from \"../src/core\"\n+import type { LoggerInstance, NextAuthOptions } from \"../src\"\n+import type { Adapter } from \"../src/adapters\"\n \n export const mockLogger: () => LoggerInstance = () => ({\n   error: jest.fn(() => {}),\n@@ -56,3 +57,10 @@ export function createCSRF() {\n     csrf: { value, token, cookie: `next-auth.csrf-token=${value}|${token}` },\n   }\n }\n+\n+export function mockAdapter(): Adapter {\n+  return {\n+    createVerificationToken: jest.fn(() => {}),\n+    getUserByEmail: jest.fn(() => {}),\n+  } as Adapter\n+}"
        },
        {
          "filename": "packages/next-auth/tsconfig.json",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -19,5 +19,12 @@\n       \"next\": [\"node_modules/next\"]\n     }\n   },\n-  \"exclude\": [\"./*.js\", \"./*.d.ts\", \"config\", \"**/__tests__\", \"tests\"]\n+  \"exclude\": [\n+    \"./*.js\",\n+    \"./*.d.ts\",\n+    \"config\",\n+    \"**/__tests__\",\n+    \"tests\",\n+    \"coverage\"\n+  ]\n }"
        }
      ],
      "file_patterns": {
        "security_files": 11,
        "config_files": 5,
        "dependency_files": 1,
        "test_files": 3,
        "unique_directories": 7,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6a72f3d041a0e4ac0d311b59f6c5f1e969f2cd5a",
            "date": "2025-01-22T00:03:10Z",
            "author_login": "halvaradop"
          },
          {
            "sha": "b45e75aad8149759099e89f422a3883e7a70f808",
            "date": "2025-01-19T13:25:03Z",
            "author_login": "balazsorban44"
          },
          {
            "sha": "9d704a00206c25f96adfb1e0d4a74e7c272811f9",
            "date": "2025-01-09T23:23:30Z",
            "author_login": "giedrius-jankauskas"
          },
          {
            "sha": "e62a6347572a2769bdd7a328c435d61ec631d3fe",
            "date": "2025-01-08T23:36:43Z",
            "author_login": "Ersch"
          },
          {
            "sha": "c10f2f91647b0f194e9b87792c2c4cba61fede14",
            "date": "2025-01-07T16:43:51Z",
            "author_login": "halvaradop"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-20",
    "description": "NextAuth.js is a complete open source authentication solution for Next.js applications. `next-auth` users who are using the `EmailProvider` either in versions before `4.10.3` or `3.29.10` are affected. If an attacker could forge a request that sent a comma-separated list of emails (eg.: `attacker@attacker.com,victim@victim.com`) to the sign-in endpoint, NextAuth.js would send emails to both the attacker and the victim's e-mail addresses. The attacker could then login as a newly created user with the email being `attacker@attacker.com,victim@victim.com`. This means that basic authorization like `email.endsWith(\"@victim.com\")` in the `signIn` callback would fail to communicate a threat to the developer and would let the attacker bypass authorization, even with an `@attacker.com` address. This vulnerability has been patched in `v4.10.3` and `v3.29.10` by normalizing the email value that is sent to the sign-in endpoint before accessing it anywhere else. We also added a `normalizeIdentifier` callback on the `EmailProvider` configuration, where you can further tweak your requirements for what your system considers a valid e-mail address. (E.g.: strict RFC2821 compliance). Users are advised to upgrade. There are no known workarounds for this vulnerability. If for some reason you cannot upgrade, you can normalize the incoming request using Advanced Initialization.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-02T18:15:08.893",
    "last_modified": "2024-11-21T07:11:58.417",
    "fix_date": "2022-08-01T11:42:41Z"
  },
  "references": [
    {
      "url": "https://en.wikipedia.org/wiki/Email_address#Local-part",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/commit/afb1fcdae3cc30445038ef588e491d139b916003",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/security/advisories/GHSA-xv97-c62v-4587",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/configuration/callbacks#sign-in-callback",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/configuration/initialization#advanced-initialization",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/providers/email",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/providers/email#normalizing-the-e-mail-address",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://nodemailer.com/message/addresses",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://en.wikipedia.org/wiki/Email_address#Local-part",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/commit/afb1fcdae3cc30445038ef588e491d139b916003",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nextauthjs/next-auth/security/advisories/GHSA-xv97-c62v-4587",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/configuration/callbacks#sign-in-callback",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/configuration/initialization#advanced-initialization",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/providers/email",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://next-auth.js.org/providers/email#normalizing-the-e-mail-address",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://nodemailer.com/message/addresses",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.192439",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "next-auth",
    "owner": "nextauthjs",
    "created_at": "2018-01-27T12:28:16Z",
    "updated_at": "2025-01-26T07:50:14Z",
    "pushed_at": "2025-01-22T00:03:10Z",
    "size": 68267,
    "stars": 25697,
    "forks": 3655,
    "open_issues": 418,
    "watchers": 25697,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1448106,
      "JavaScript": 42514,
      "CSS": 20770,
      "Shell": 15579,
      "Svelte": 14754,
      "PLpgSQL": 3973,
      "Pug": 3791,
      "Dockerfile": 1787,
      "HTML": 564
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "isc"
    },
    "collected_at": "2025-01-26T07:59:11.325430"
  }
}