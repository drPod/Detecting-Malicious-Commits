{
  "cve_id": "CVE-2022-35929",
  "github_data": {
    "repository": "sigstore/cosign",
    "fix_commit": "c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
    "related_commits": [
      "c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
      "c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94"
    ],
    "patch_url": "https://github.com/sigstore/cosign/commit/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94.patch",
    "fix_commit_details": {
      "sha": "c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
      "commit_date": "2022-08-04T16:05:27Z",
      "author": {
        "login": "mattmoor",
        "type": "User",
        "stats": {
          "total_commits": 133,
          "average_weekly_commits": 0.642512077294686,
          "total_additions": 89614,
          "total_deletions": 9240,
          "weeks_active": 21
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-vjxv-45g9-9296",
        "length": 6155,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 11,
        "additions": 10,
        "deletions": 1
      },
      "files": [
        {
          "filename": "cmd/cosign/cli/verify/verify_attestation.go",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -201,6 +201,7 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\n \t\t\t}\n \t\t}\n \n+\t\tvar checked []oci.Signature\n \t\tvar validationErrors []error\n \t\tfor _, vp := range verified {\n \t\t\tpayload, err := policy.AttestationToPayloadJSON(ctx, c.PredicateType, vp)\n@@ -217,6 +218,7 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\n \t\t\t\tcueValidationErr := cue.ValidateJSON(payload, cuePolicies)\n \t\t\t\tif cueValidationErr != nil {\n \t\t\t\t\tvalidationErrors = append(validationErrors, cueValidationErr)\n+\t\t\t\t\tcontinue\n \t\t\t\t}\n \t\t\t}\n \n@@ -225,8 +227,11 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\n \t\t\t\tregoValidationErrs := rego.ValidateJSON(payload, regoPolicies)\n \t\t\t\tif len(regoValidationErrs) > 0 {\n \t\t\t\t\tvalidationErrors = append(validationErrors, regoValidationErrs...)\n+\t\t\t\t\tcontinue\n \t\t\t\t}\n \t\t\t}\n+\n+\t\t\tchecked = append(checked, vp)\n \t\t}\n \n \t\tif len(validationErrors) > 0 {\n@@ -237,10 +242,14 @@ func (c *VerifyAttestationCommand) Exec(ctx context.Context, images []string) (e\n \t\t\treturn fmt.Errorf(\"%d validation errors occurred\", len(validationErrors))\n \t\t}\n \n+\t\tif len(checked) == 0 {\n+\t\t\treturn fmt.Errorf(\"none of the attestations matched the predicate type: %s\", c.PredicateType)\n+\t\t}\n+\n \t\t// TODO: add CUE validation report to `PrintVerificationHeader`.\n \t\tPrintVerificationHeader(imageRef, co, bundleVerified, fulcioVerified)\n \t\t// The attestations are always JSON, so use the raw \"text\" mode for outputting them instead of conversion\n-\t\tPrintVerification(imageRef, verified, \"text\")\n+\t\tPrintVerification(imageRef, checked, \"text\")\n \t}\n \n \treturn nil"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "accc80a840524890790c5c368fee26e22ec60bda",
            "date": "2025-01-13T20:41:02Z",
            "author_login": "codysoyland"
          },
          {
            "sha": "e5aa062fa9e4c8b893cf14e77f07127031395ca9",
            "date": "2025-01-13T17:30:27Z",
            "author_login": "haydentherapper"
          },
          {
            "sha": "d01988ed7edc1d9c67d3383e7a02b988ba7d14fd",
            "date": "2025-01-13T03:54:54Z",
            "author_login": "nianyush"
          },
          {
            "sha": "87c08b00fca8a96a2ef756cee3953372a5783a45",
            "date": "2025-01-10T08:26:43Z",
            "author_login": "cpanato"
          },
          {
            "sha": "342f8d89f88f1de022d35d720b54322cfe7352fb",
            "date": "2025-01-09T16:07:26Z",
            "author_login": "cmurphy"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-347",
    "description": "cosign is a container signing and verification utility. In versions prior to 1.10.1 cosign can report a false positive if any attestation exists. `cosign verify-attestation` used with the `--type` flag will report a false positive verification when there is at least one attestation with a valid signature and there are NO attestations of the type being verified (--type defaults to \"custom\"). This can happen when signing with a standard keypair and with \"keyless\" signing with Fulcio. This vulnerability can be reproduced with the `distroless.dev/static@sha256:dd7614b5a12bc4d617b223c588b4e0c833402b8f4991fb5702ea83afad1986e2` image. This image has a `vuln` attestation but not an `spdx` attestation. However, if you run `cosign verify-attestation --type=spdx` on this image, it incorrectly succeeds. This issue has been addressed in version 1.10.1 of cosign. Users are advised to upgrade. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-08-04T19:15:09.937",
    "last_modified": "2024-11-21T07:11:59.103",
    "fix_date": "2022-08-04T16:05:27Z"
  },
  "references": [
    {
      "url": "https://github.com/sigstore/cosign/commit/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sigstore/cosign/security/advisories/GHSA-vjxv-45g9-9296",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sigstore/cosign/commit/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sigstore/cosign/security/advisories/GHSA-vjxv-45g9-9296",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.197869",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cosign",
    "owner": "sigstore",
    "created_at": "2021-02-04T12:49:39Z",
    "updated_at": "2025-01-14T13:11:06Z",
    "pushed_at": "2025-01-13T20:41:02Z",
    "size": 22969,
    "stars": 4642,
    "forks": 553,
    "open_issues": 250,
    "watchers": 4642,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-1.13"
    ],
    "languages": {
      "Go": 1543441,
      "Shell": 15352,
      "Makefile": 8067,
      "PowerShell": 1530
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:36:50.204114"
  }
}