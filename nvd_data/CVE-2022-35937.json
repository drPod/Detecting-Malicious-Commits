{
  "cve_id": "CVE-2022-35937",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "595a65a3e224a0362d7e68c2213acfc2b499a196",
    "related_commits": [
      "595a65a3e224a0362d7e68c2213acfc2b499a196",
      "595a65a3e224a0362d7e68c2213acfc2b499a196"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/595a65a3e224a0362d7e68c2213acfc2b499a196.patch",
    "fix_commit_details": {
      "sha": "595a65a3e224a0362d7e68c2213acfc2b499a196",
      "commit_date": "2022-07-25T11:25:01Z",
      "author": {
        "login": "tensorflower-gardener",
        "type": "User",
        "stats": {
          "total_commits": 51281,
          "average_weekly_commits": 106.83541666666666,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 450
        }
      },
      "commit_message": {
        "title": "Return a TFLite error if gather_nd will result in reading invalid memory",
        "length": 102,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 61,
        "additions": 45,
        "deletions": 16
      },
      "files": [
        {
          "filename": "tensorflow/lite/kernels/gather_nd.cc",
          "status": "modified",
          "additions": 14,
          "deletions": 10,
          "patch": "@@ -14,6 +14,7 @@ limitations under the License.\n ==============================================================================*/\n #include <stdint.h>\n \n+#include \"tensorflow/lite/c/c_api_types.h\"\n #include \"tensorflow/lite/c/common.h\"\n #include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"\n@@ -102,13 +103,16 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n }\n \n template <typename ParamsT, typename IndicesT>\n-TfLiteStatus GatherNd(const TfLiteTensor* params, const TfLiteTensor* indices,\n-                      TfLiteTensor* output) {\n-  reference_ops::GatherNd(\n+TfLiteStatus GatherNd(TfLiteContext* context, const TfLiteTensor* params,\n+                      const TfLiteTensor* indices, TfLiteTensor* output) {\n+  const TfLiteStatus status = reference_ops::GatherNd(\n       GetTensorShape(params), GetTensorData<ParamsT>(params),\n       GetTensorShape(indices), GetTensorData<IndicesT>(indices),\n       GetTensorShape(output), GetTensorData<ParamsT>(output));\n-  return kTfLiteOk;\n+  if (status != kTfLiteOk) {\n+    TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");\n+  }\n+  return status;\n }\n \n template <typename IndicesT>\n@@ -136,17 +140,17 @@ TfLiteStatus EvalGatherNd(TfLiteContext* context, const TfLiteTensor* params,\n \n   switch (params->type) {\n     case kTfLiteFloat32:\n-      return GatherNd<float, IndicesT>(params, indices, output);\n+      return GatherNd<float, IndicesT>(context, params, indices, output);\n     case kTfLiteUInt8:\n-      return GatherNd<uint8_t, IndicesT>(params, indices, output);\n+      return GatherNd<uint8_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt8:\n-      return GatherNd<int8_t, IndicesT>(params, indices, output);\n+      return GatherNd<int8_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt16:\n-      return GatherNd<int16_t, IndicesT>(params, indices, output);\n+      return GatherNd<int16_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt32:\n-      return GatherNd<int32_t, IndicesT>(params, indices, output);\n+      return GatherNd<int32_t, IndicesT>(context, params, indices, output);\n     case kTfLiteInt64:\n-      return GatherNd<int64_t, IndicesT>(params, indices, output);\n+      return GatherNd<int64_t, IndicesT>(context, params, indices, output);\n     case kTfLiteString:\n       return GatherNdString<IndicesT>(params, indices, output);\n     default:"
        },
        {
          "filename": "tensorflow/lite/kernels/gather_nd_test.cc",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -73,6 +73,22 @@ TEST(GatherNdOpTest, ElementIndexingIntoMatrix) {\n   EXPECT_THAT(m.GetOutput<float>(), ElementsAreArray({1.1, 2.2}));\n }\n \n+TEST(GatherNdOpTest, ErrorOnOutOfBoundsTooLarge) {\n+  GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});\n+  m.SetInput<float>({1.1, 1.2, 2.1, 2.2});\n+  m.SetPositions<int32_t>({0, 0, 2, 0});\n+  EXPECT_EQ(m.Invoke(), kTfLiteError);\n+  m.SetPositions<int32_t>({0, 0, 1, 2});\n+  EXPECT_EQ(m.Invoke(), kTfLiteError);\n+}\n+\n+TEST(GatherNdOpTest, ErrorOnOutOfBoundsNegative) {\n+  GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 2}});\n+  m.SetInput<float>({1.1, 1.2, 2.1, 2.2});\n+  m.SetPositions<int32_t>({1, -1, 1, 1});\n+  EXPECT_EQ(m.Invoke(), kTfLiteError);\n+}\n+\n TEST(GatherNdOpTest, SliceIndexingIntoMatrix) {\n   GatherNdOpModel m({TensorType_FLOAT32, {2, 2}}, {TensorType_INT32, {2, 1}});\n   m.SetInput<float>({1.1, 1.2, 2.1, 2.2});"
        },
        {
          "filename": "tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "status": "modified",
          "additions": 15,
          "deletions": 6,
          "patch": "@@ -29,6 +29,7 @@ limitations under the License.\n #include \"third_party/eigen3/Eigen/Core\"\n #include \"fixedpoint/fixedpoint.h\"\n #include \"ruy/profiler/instrumentation.h\"  // from @ruy\n+#include \"tensorflow/lite/c/c_api_types.h\"\n #include \"tensorflow/lite/c/common.h\"\n #include \"tensorflow/lite/kernels/internal/common.h\"\n #include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n@@ -595,23 +596,31 @@ inline GatherNdHelperResult GatherNdHelper(const RuntimeShape& params_shape,\n   return ret;\n }\n \n+// Implements GatherNd.\n+// Returns an error if any of the indices_data would cause an out of bounds\n+// memory read.\n template <typename ParamsT, typename IndicesT = int32>\n-inline void GatherNd(const RuntimeShape& params_shape,\n-                     const ParamsT* params_data,\n-                     const RuntimeShape& indices_shape,\n-                     const IndicesT* indices_data,\n-                     const RuntimeShape& output_shape, ParamsT* output_data) {\n+inline TfLiteStatus GatherNd(const RuntimeShape& params_shape,\n+                             const ParamsT* params_data,\n+                             const RuntimeShape& indices_shape,\n+                             const IndicesT* indices_data,\n+                             const RuntimeShape& output_shape,\n+                             ParamsT* output_data) {\n   ruy::profiler::ScopeLabel label(\"GatherNd\");\n \n   const GatherNdHelperResult res = GatherNdHelper(params_shape, indices_shape);\n   for (int i = 0; i < res.n_slices; ++i) {\n-    int from_pos = 0;\n+    int64_t from_pos = 0;\n     for (int j = 0; j < res.indices_nd; ++j) {\n       from_pos += indices_data[i * res.indices_nd + j] * res.dims_to_count[j];\n     }\n+    if (from_pos < 0 || from_pos + res.slice_size > params_shape.FlatSize()) {\n+      return kTfLiteError;\n+    }\n     std::memcpy(output_data + i * res.slice_size, params_data + from_pos,\n                 sizeof(ParamsT) * res.slice_size);\n   }\n+  return kTfLiteOk;\n }\n \n #ifndef TF_LITE_STATIC_MEMORY"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d65ab241c92b18a8e82a53b03575775279713930",
            "date": "2025-01-14T16:17:42Z",
            "author_login": "akuegel"
          },
          {
            "sha": "7f1cdb4f94bf497a8f81b47cb0b0f6f33dfcdf2f",
            "date": "2025-01-14T15:43:26Z",
            "author_login": "vwbaker"
          },
          {
            "sha": "8f888e57d9fab1d2e4127fdeaabc3f8976471065",
            "date": "2025-01-14T15:28:59Z",
            "author_login": "ddunl"
          },
          {
            "sha": "4e74930bd620da4ea2bb691359aaa9b2dc6b0605",
            "date": "2025-01-14T15:28:20Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "251362e6c6746aaf6bffcfe514e79c6cc65336d7",
            "date": "2025-01-14T15:24:59Z",
            "author_login": "loislo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
    "cwe_id": "CWE-125",
    "description": "TensorFlow is an open source platform for machine learning. The `GatherNd` function takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read is triggered. This issue has been patched in GitHub commit 595a65a3e224a0362d7e68c2213acfc2b499a196. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-16T20:15:10.110",
    "last_modified": "2024-11-21T07:12:00.250",
    "fix_date": "2022-07-25T11:25:01Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/f463040eb3997e42e60a2ffc6dc72de7ef11dbb4/tensorflow/lite/kernels/gather_nd.cc#L105-L111",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/595a65a3e224a0362d7e68c2213acfc2b499a196",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/f463040eb3997e42e60a2ffc6dc72de7ef11dbb4/tensorflow/lite/kernels/gather_nd.cc#L105-L111",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/595a65a3e224a0362d7e68c2213acfc2b499a196",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pxrw-j2fv-hx3h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.126860",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}