{
  "cve_id": "CVE-2022-35938",
  "github_data": {
    "repository": "tensorflow/tflite-micro",
    "fix_commit": "4142e47e9e31db481781b955ed3ff807a781b494",
    "related_commits": [
      "4142e47e9e31db481781b955ed3ff807a781b494",
      "4142e47e9e31db481781b955ed3ff807a781b494"
    ],
    "patch_url": "https://github.com/tensorflow/tflite-micro/commit/4142e47e9e31db481781b955ed3ff807a781b494.patch",
    "fix_commit_details": {
      "sha": "4142e47e9e31db481781b955ed3ff807a781b494",
      "commit_date": "2022-07-26T19:54:47Z",
      "author": {
        "login": "alankelly",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "GatherNd verifies that an index is valid before reading. (#1286)",
        "length": 64,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 63,
        "additions": 51,
        "deletions": 12
      },
      "files": [
        {
          "filename": "tensorflow/lite/micro/kernels/gather_nd.cc",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -131,7 +131,8 @@ TfLiteStatus GatherNd(const TfLiteEvalTensor* params,\n     slice_size *= params->dims->data[i];\n   }\n \n-  int remain_flat_size = ElementCount(*params->dims);\n+  int params_flat_size = ElementCount(*params->dims);\n+  int remain_flat_size = params_flat_size;\n \n   // Number of elements per dimension\n   int dims_to_count[MAX_INDICES_ND];\n@@ -147,6 +148,9 @@ TfLiteStatus GatherNd(const TfLiteEvalTensor* params,\n       IndicesT index = index_data[offset];\n       from_pos += index * dims_to_count[j];\n     }\n+    if (from_pos < 0 || from_pos + slice_size > params_flat_size) {\n+      return kTfLiteError;\n+    }\n     std::memcpy(output_data + i * slice_size, param_data + from_pos,\n                 sizeof(ParamsT) * slice_size);\n   }\n@@ -158,19 +162,24 @@ TfLiteStatus EvalGatherNd(TfLiteContext* context,\n                           const TfLiteEvalTensor* params,\n                           const TfLiteEvalTensor* indices,\n                           TfLiteEvalTensor* output) {\n+  TfLiteStatus status = kTfLiteError;\n   switch (params->type) {\n     case kTfLiteFloat32:\n-      return GatherNd<float, IndicesT>(params, indices, output);\n+      status = GatherNd<float, IndicesT>(params, indices, output);\n       break;\n     case kTfLiteInt8:\n-      return GatherNd<int8_t, IndicesT>(params, indices, output);\n+      status = GatherNd<int8_t, IndicesT>(params, indices, output);\n       break;\n     default:\n       TF_LITE_KERNEL_LOG(context,\n                          \"Params type '%s' are not supported by gather_nd.\",\n                          TfLiteTypeGetName(params->type));\n       return kTfLiteError;\n   }\n+  if (status != kTfLiteOk) {\n+    TF_LITE_KERNEL_LOG(context, \"gather_nd index out of bounds\");\n+  }\n+  return status;\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {"
        },
        {
          "filename": "tensorflow/lite/micro/kernels/gather_nd_test.cc",
          "status": "modified",
          "additions": 39,
          "deletions": 9,
          "patch": "@@ -26,8 +26,8 @@ namespace {\n template <typename ParamType, typename IndexType>\n void TestGatherNd(int* param_dims, const ParamType* param_data, int* index_dims,\n                   const IndexType* index_data, int* output_dims,\n-                  ParamType* output_data,\n-                  const ParamType* expected_output_data) {\n+                  ParamType* output_data, const ParamType* expected_output_data,\n+                  const TfLiteStatus expected_status = kTfLiteOk) {\n   TfLiteIntArray* pdims = IntArrayFromInts(param_dims);\n   TfLiteIntArray* idims = IntArrayFromInts(index_dims);\n   TfLiteIntArray* odims = IntArrayFromInts(output_dims);\n@@ -49,14 +49,16 @@ void TestGatherNd(int* param_dims, const ParamType* param_data, int* index_dims,\n   micro::KernelRunner runner(registration, tensors, tensors_size, inputs_array,\n                              outputs_array, /*builtin_data=*/nullptr);\n   TF_LITE_MICRO_EXPECT_EQ(kTfLiteOk, runner.InitAndPrepare());\n-  TF_LITE_MICRO_EXPECT_EQ(kTfLiteOk, runner.Invoke());\n+  TF_LITE_MICRO_EXPECT_EQ(expected_status, runner.Invoke());\n \n-  // The output tensor's data and shape have been updated by the kernel.\n-  TfLiteTensor* actual_output_tensor = &tensors[2];\n-  TfLiteIntArray* actual_output_dims = actual_output_tensor->dims;\n-  const int output_size = ElementCount(*actual_output_dims);\n-  for (int i = 0; i < output_size; ++i) {\n-    TF_LITE_MICRO_EXPECT_EQ(expected_output_data[i], output_data[i]);\n+  if (expected_status == kTfLiteOk) {\n+    // The output tensor's data and shape have been updated by the kernel.\n+    TfLiteTensor* actual_output_tensor = &tensors[2];\n+    TfLiteIntArray* actual_output_dims = actual_output_tensor->dims;\n+    const int output_size = ElementCount(*actual_output_dims);\n+    for (int i = 0; i < output_size; ++i) {\n+      TF_LITE_MICRO_EXPECT_EQ(expected_output_data[i], output_data[i]);\n+    }\n   }\n }\n \n@@ -298,4 +300,32 @@ TF_LITE_MICRO_TEST(GatherNd_Int8Int32) {\n       golden_data);\n }\n \n+TF_LITE_MICRO_TEST(GatherNd_ReadOOB) {\n+  // For input_dims[], index_dims[], or output_dims[], element 0 is the\n+  // number of dimensions in that array, not the actual dimension data.\n+  int input_dims[] = {2, 2, 2};\n+  int index_dims[] = {2, 2, 2};\n+  const int32_t index_data[] = {0, 1, 2, 0};\n+  const int8_t input_data[] = {1, -1, 1, -2};\n+  int8_t output_data;\n+  int output_dims[] = {1, 0, 0};\n+  tflite::testing::TestGatherNd<int8_t, int32_t>(\n+      input_dims, input_data, index_dims, index_data, output_dims, &output_data,\n+      nullptr, kTfLiteError);\n+}\n+\n+TF_LITE_MICRO_TEST(GatherNd_ReadOOBNegative) {\n+  // For input_dims[], index_dims[], or output_dims[], element 0 is the\n+  // number of dimensions in that array, not the actual dimension data.\n+  int input_dims[] = {2, 2, 2};\n+  int index_dims[] = {2, 2, 2};\n+  const int32_t index_data[] = {0, -1, 1, 0};\n+  const int8_t input_data[] = {1, -1, 1, -2};\n+  int8_t output_data;\n+  int output_dims[] = {1, 0, 0};\n+  tflite::testing::TestGatherNd<int8_t, int32_t>(\n+      input_dims, input_data, index_dims, index_data, output_dims, &output_data,\n+      nullptr, kTfLiteError);\n+}\n+\n TF_LITE_MICRO_TESTS_END"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "10ebaab9fcb796319df88dbf0db1a05d13a812c5",
            "date": "2025-01-07T19:10:40Z",
            "author_login": "TFLM-bot"
          },
          {
            "sha": "87d5152c92a6677d93c53877dcdea51614d3019a",
            "date": "2024-12-23T18:01:07Z",
            "author_login": "TFLM-bot"
          },
          {
            "sha": "01e31b74938a743b4a0f8edba6a6231bd93e8103",
            "date": "2024-12-19T18:20:46Z",
            "author_login": "rkuester"
          },
          {
            "sha": "e3ac890725b22a37293f64203b5270fbefebdfe1",
            "date": "2024-12-19T00:21:00Z",
            "author_login": "suleshahid"
          },
          {
            "sha": "e425abb60e15e91cc8b75114ca8ead4af439595f",
            "date": "2024-12-18T02:17:24Z",
            "author_login": "rkuester"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
    "cwe_id": "CWE-125",
    "description": "TensorFlow is an open source platform for machine learning. The `GatherNd` function takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. This issue has been patched in GitHub commit 4142e47e9e31db481781b955ed3ff807a781b494. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-16T20:15:10.177",
    "last_modified": "2024-11-21T07:12:00.387",
    "fix_date": "2022-07-26T19:54:47Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3m3g-pf5v-5hpj",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tflite-micro/blob/1bc98621180a350eb4e8d3318ea8e228c7559b37/tensorflow/lite/micro/kernels/gather_nd.cc#L143-L154",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tflite-micro/commit/4142e47e9e31db481781b955ed3ff807a781b494",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3m3g-pf5v-5hpj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tflite-micro/blob/1bc98621180a350eb4e8d3318ea8e228c7559b37/tensorflow/lite/micro/kernels/gather_nd.cc#L143-L154",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tflite-micro/commit/4142e47e9e31db481781b955ed3ff807a781b494",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.127010",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tflite-micro",
    "owner": "tensorflow",
    "created_at": "2021-04-08T21:40:50Z",
    "updated_at": "2025-01-14T15:45:24Z",
    "pushed_at": "2025-01-10T14:02:38Z",
    "size": 32979,
    "stars": 2021,
    "forks": 840,
    "open_issues": 28,
    "watchers": 2021,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "streaming_conv",
      "sync-from-upstream-tf"
    ],
    "languages": {
      "C++": 6815325,
      "Python": 1235517,
      "Starlark": 372082,
      "C": 235547,
      "Shell": 188431,
      "Makefile": 124016,
      "BitBake": 69840,
      "Jupyter Notebook": 23140,
      "Mako": 17983,
      "Assembly": 12287,
      "Pascal": 2360,
      "Dockerfile": 913
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:50:26.205693"
  }
}