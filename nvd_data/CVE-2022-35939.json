{
  "cve_id": "CVE-2022-35939",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
    "related_commits": [
      "b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
      "b4d4b4cb019bd7240a52daa4ba61e3cc814f0384"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/b4d4b4cb019bd7240a52daa4ba61e3cc814f0384.patch",
    "fix_commit_details": {
      "sha": "b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
      "commit_date": "2022-07-26T17:04:53Z",
      "author": {
        "login": "alankelly",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Check bounds for reads and writes in scatter_nd",
        "length": 77,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 74,
        "additions": 60,
        "deletions": 14
      },
      "files": [
        {
          "filename": "tensorflow/lite/kernels/internal/reference/reference_ops.h",
          "status": "modified",
          "additions": 13,
          "deletions": 6,
          "patch": "@@ -656,11 +656,12 @@ inline TfLiteStatus GatherNdString(const RuntimeShape& params_shape,\n #endif\n \n template <typename IndicesT, typename UpdatesT>\n-inline void ScatterNd(const RuntimeShape& indices_shape,\n-                      const IndicesT* indices_data,\n-                      const RuntimeShape& updates_shape,\n-                      const UpdatesT* updates_data,\n-                      const RuntimeShape& output_shape, UpdatesT* output_data) {\n+inline TfLiteStatus ScatterNd(const RuntimeShape& indices_shape,\n+                              const IndicesT* indices_data,\n+                              const RuntimeShape& updates_shape,\n+                              const UpdatesT* updates_data,\n+                              const RuntimeShape& output_shape,\n+                              UpdatesT* output_data) {\n   ruy::profiler::ScopeLabel label(\"ScatterNd\");\n \n   int n_slices = 1;\n@@ -683,18 +684,24 @@ inline void ScatterNd(const RuntimeShape& indices_shape,\n     remain_flat_size = dims_to_count[i];\n   }\n \n+  if (n_slices * slice_size > updates_shape.FlatSize()) {\n+    return kTfLiteError;\n+  }\n   memset(output_data, 0, sizeof(UpdatesT) * output_flat_size);\n   for (int i = 0; i < n_slices; ++i) {\n     int to_pos = 0;\n     for (int j = 0; j < indices_nd; ++j) {\n       IndicesT idx = indices_data[i * indices_nd + j];\n-      TFLITE_DCHECK(0 <= idx && idx < output_shape.Dims(j));\n       to_pos += idx * dims_to_count[j];\n     }\n+    if (to_pos < 0 || to_pos + slice_size > output_flat_size) {\n+      return kTfLiteError;\n+    }\n     for (int j = 0; j < slice_size; j++) {\n       output_data[to_pos + j] += updates_data[i * slice_size + j];\n     }\n   }\n+  return kTfLiteOk;\n }\n \n template <typename T>"
        },
        {
          "filename": "tensorflow/lite/kernels/scatter_nd.cc",
          "status": "modified",
          "additions": 18,
          "deletions": 8,
          "patch": "@@ -129,11 +129,10 @@ TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n template <typename IndicesT, typename UpdatesT>\n TfLiteStatus ScatterNd(const TfLiteTensor* indices, const TfLiteTensor* updates,\n                        TfLiteTensor* output) {\n-  reference_ops::ScatterNd(\n+  return reference_ops::ScatterNd(\n       GetTensorShape(indices), GetTensorData<IndicesT>(indices),\n       GetTensorShape(updates), GetTensorData<UpdatesT>(updates),\n       GetTensorShape(output), GetTensorData<UpdatesT>(output));\n-  return kTfLiteOk;\n }\n \n template <typename IndicesT>\n@@ -149,25 +148,36 @@ TfLiteStatus EvalScatterNd(TfLiteContext* context, const TfLiteTensor* indices,\n                       ResizeOutputTensor<IndicesT>(context, shape, output));\n   }\n \n+  TfLiteStatus status = kTfLiteError;\n   switch (updates->type) {\n     case kTfLiteFloat32:\n-      return ScatterNd<IndicesT, float>(indices, updates, output);\n+      status = ScatterNd<IndicesT, float>(indices, updates, output);\n+      break;\n     case kTfLiteUInt8:\n-      return ScatterNd<IndicesT, uint8_t>(indices, updates, output);\n+      status = ScatterNd<IndicesT, uint8_t>(indices, updates, output);\n+      break;\n     case kTfLiteBool:\n-      return ScatterNd<IndicesT, bool>(indices, updates, output);\n+      status = ScatterNd<IndicesT, bool>(indices, updates, output);\n+      break;\n     case kTfLiteInt8:\n-      return ScatterNd<IndicesT, int8_t>(indices, updates, output);\n+      status = ScatterNd<IndicesT, int8_t>(indices, updates, output);\n+      break;\n     case kTfLiteInt32:\n-      return ScatterNd<IndicesT, int32_t>(indices, updates, output);\n+      status = ScatterNd<IndicesT, int32_t>(indices, updates, output);\n+      break;\n     case kTfLiteInt64:\n-      return ScatterNd<IndicesT, int64_t>(indices, updates, output);\n+      status = ScatterNd<IndicesT, int64_t>(indices, updates, output);\n+      break;\n     default:\n       TF_LITE_KERNEL_LOG(\n           context, \"Updates of type '%s' are not supported by scatter_nd.\",\n           TfLiteTypeGetName(updates->type));\n       return kTfLiteError;\n   }\n+  if (status != kTfLiteOk) {\n+    TF_LITE_KERNEL_LOG(context, \"scatter_nd index out of bounds\");\n+  }\n+  return status;\n }\n \n TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {"
        },
        {
          "filename": "tensorflow/lite/kernels/scatter_nd_test.cc",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -361,5 +361,34 @@ TEST(ScatterNdOpTest, DynamicShape) {\n                                 /*2, 3*/ 1,  2,  3,  4,  5}));\n }\n \n+TEST(ScatterNdOpTest, ReadAndWriteArrayLimits) {\n+  ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},\n+                     {TensorType_INT32, {1}});\n+  m.SetIndices<int32_t>({4, 3, 1, 0, 2});\n+  m.SetUpdates<int32_t>({1, 2, 3, 7, 9});\n+  m.SetShape<int32_t>({5});\n+  ASSERT_EQ(m.Invoke(), kTfLiteOk);\n+  EXPECT_THAT(m.GetOutputShape(), ElementsAreArray({5}));\n+  EXPECT_THAT(m.GetOutput<int32_t>(), ElementsAreArray({7, 3, 9, 2, 1}));\n+}\n+\n+TEST(ScatterNdOpTest, OOBRead) {\n+  ScatterNdOpModel m({TensorType_INT32, {1, 1}}, {TensorType_INT32, {1}},\n+                     {TensorType_INT32, {1}});\n+  m.SetIndices<int32_t>({4});\n+  m.SetUpdates<int32_t>({1});\n+  m.SetShape<int32_t>({1});\n+  ASSERT_EQ(m.Invoke(), kTfLiteError);\n+}\n+\n+TEST(ScatterNdOpTest, OOBWrites) {\n+  ScatterNdOpModel m({TensorType_INT32, {5, 1}}, {TensorType_INT32, {5}},\n+                     {TensorType_INT32, {1}});\n+  m.SetIndices<int32_t>({4, 3, 1, -0x38, 0x38});\n+  m.SetUpdates<int32_t>({1, 2, 3, 0x44444444, 0x55555555});\n+  m.SetShape<int32_t>({1});\n+  ASSERT_EQ(m.Invoke(), kTfLiteError);\n+}\n+\n }  // namespace\n }  // namespace tflite"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c141307fbd02349cf4d83f9a73bdba73fcba9b87",
            "date": "2025-01-14T14:26:56Z",
            "author_login": "mooskagh"
          },
          {
            "sha": "9263c01097f54dbb932ac56d6d87a61a93409221",
            "date": "2025-01-14T14:18:52Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "e7f7cefc7d284c486f84596811d07bb5cd0890ca",
            "date": "2025-01-14T14:16:10Z",
            "author_login": "krasimirgg"
          },
          {
            "sha": "fd41705e0ad7a123a9d01b8be2a3b34b3266493e",
            "date": "2025-01-14T13:33:52Z",
            "author_login": "loislo"
          },
          {
            "sha": "af5275c5731565cbf2a2c01ee418a8cf62388431",
            "date": "2025-01-14T12:48:20Z",
            "author_login": "akuegel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
    "cwe_id": "CWE-787",
    "description": "TensorFlow is an open source platform for machine learning. The `ScatterNd` function takes an input argument that determines the indices of of the output tensor. An input index greater than the output tensor or less than zero will either write content at the wrong index or trigger a crash. We have patched the issue in GitHub commit b4d4b4cb019bd7240a52daa4ba61e3cc814f0384. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-16T20:15:10.243",
    "last_modified": "2024-11-21T07:12:00.530",
    "fix_date": "2022-07-26T17:04:53Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/266558ac4c1f361e9a178ee9d3f0ce2e648ae499/tensorflow/lite/kernels/internal/reference/reference_ops.h#L659-L698",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/266558ac4c1f361e9a178ee9d3f0ce2e648ae499/tensorflow/lite/kernels/internal/reference/reference_ops.h#L659-L698",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/b4d4b4cb019bd7240a52daa4ba61e3cc814f0384",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-ffjm-4qwc-7cmf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.127160",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}