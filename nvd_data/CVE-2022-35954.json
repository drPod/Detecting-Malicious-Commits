{
  "cve_id": "CVE-2022-35954",
  "github_data": {
    "repository": "actions/toolkit",
    "fix_commit": "4beda9cbc00ba6eefe387a937c21087ccb8ee9df",
    "related_commits": [
      "4beda9cbc00ba6eefe387a937c21087ccb8ee9df",
      "4beda9cbc00ba6eefe387a937c21087ccb8ee9df"
    ],
    "patch_url": "https://github.com/actions/toolkit/commit/4beda9cbc00ba6eefe387a937c21087ccb8ee9df.patch",
    "fix_commit_details": {
      "sha": "4beda9cbc00ba6eefe387a937c21087ccb8ee9df",
      "commit_date": "2022-08-08T18:16:39Z",
      "author": {
        "login": "cory-miller",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-7r3h-m5j6-3q42",
        "length": 501,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 103,
        "additions": 92,
        "deletions": 11
      },
      "files": [
        {
          "filename": "packages/core/RELEASES.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,5 +1,8 @@\n # @actions/core Releases\n \n+### 1.9.1\n+- Randomize delimiter when calling `core.exportVariable`\n+\n ### 1.9.0\n - Added `toPosixPath`, `toWin32Path` and `toPlatformPath` utilities [#1102](https://github.com/actions/toolkit/pull/1102)\n "
        },
        {
          "filename": "packages/core/__tests__/core.test.ts",
          "status": "modified",
          "additions": 41,
          "deletions": 3,
          "patch": "@@ -4,6 +4,9 @@ import * as path from 'path'\n import * as core from '../src/core'\n import {HttpClient} from '@actions/http-client'\n import {toCommandProperties} from '../src/utils'\n+import * as uuid from 'uuid'\n+\n+jest.mock('uuid')\n \n /* eslint-disable @typescript-eslint/unbound-method */\n \n@@ -41,6 +44,9 @@ const testEnvVars = {\n   GITHUB_ENV: ''\n }\n \n+const UUID = '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n+const DELIMITER = `ghadelimiter_${UUID}`\n+\n describe('@actions/core', () => {\n   beforeAll(() => {\n     const filePath = path.join(__dirname, `test`)\n@@ -54,6 +60,14 @@ describe('@actions/core', () => {\n       process.env[key] = testEnvVars[key as keyof typeof testEnvVars]\n     }\n     process.stdout.write = jest.fn()\n+\n+    jest.spyOn(uuid, 'v4').mockImplementation(() => {\n+      return UUID\n+    })\n+  })\n+\n+  afterEach(() => {\n+    jest.restoreAllMocks()\n   })\n \n   it('legacy exportVariable produces the correct command and sets the env', () => {\n@@ -91,7 +105,7 @@ describe('@actions/core', () => {\n     core.exportVariable('my var', 'var val')\n     verifyFileCommand(\n       command,\n-      `my var<<_GitHubActionsFileCommandDelimeter_${os.EOL}var val${os.EOL}_GitHubActionsFileCommandDelimeter_${os.EOL}`\n+      `my var<<${DELIMITER}${os.EOL}var val${os.EOL}${DELIMITER}${os.EOL}`\n     )\n   })\n \n@@ -101,7 +115,7 @@ describe('@actions/core', () => {\n     core.exportVariable('my var', true)\n     verifyFileCommand(\n       command,\n-      `my var<<_GitHubActionsFileCommandDelimeter_${os.EOL}true${os.EOL}_GitHubActionsFileCommandDelimeter_${os.EOL}`\n+      `my var<<${DELIMITER}${os.EOL}true${os.EOL}${DELIMITER}${os.EOL}`\n     )\n   })\n \n@@ -111,10 +125,34 @@ describe('@actions/core', () => {\n     core.exportVariable('my var', 5)\n     verifyFileCommand(\n       command,\n-      `my var<<_GitHubActionsFileCommandDelimeter_${os.EOL}5${os.EOL}_GitHubActionsFileCommandDelimeter_${os.EOL}`\n+      `my var<<${DELIMITER}${os.EOL}5${os.EOL}${DELIMITER}${os.EOL}`\n     )\n   })\n \n+  it('exportVariable does not allow delimiter as value', () => {\n+    const command = 'ENV'\n+    createFileCommandFile(command)\n+    \n+    expect(() => {\n+      core.exportVariable('my var', `good stuff ${DELIMITER} bad stuff`)\n+    }).toThrow(`Unexpected input: value should not contain the delimiter \"${DELIMITER}\"`)\n+\n+    const filePath = path.join(__dirname, `test/${command}`)\n+    fs.unlinkSync(filePath)\n+  })\n+\n+  it('exportVariable does not allow delimiter as name', () => {\n+    const command = 'ENV'\n+    createFileCommandFile(command)\n+    \n+    expect(() => {\n+      core.exportVariable(`good stuff ${DELIMITER} bad stuff`, 'test')\n+    }).toThrow(`Unexpected input: name should not contain the delimiter \"${DELIMITER}\"`)\n+    \n+    const filePath = path.join(__dirname, `test/${command}`)\n+    fs.unlinkSync(filePath)\n+  })\n+\n   it('setSecret produces the correct command', () => {\n     core.setSecret('secret val')\n     assertWriteCalls([`::add-mask::secret val${os.EOL}`])"
        },
        {
          "filename": "packages/core/package-lock.json",
          "status": "modified",
          "additions": 31,
          "deletions": 4,
          "patch": "@@ -1,18 +1,20 @@\n {\n   \"name\": \"@actions/core\",\n-  \"version\": \"1.9.0\",\n+  \"version\": \"1.9.1\",\n   \"lockfileVersion\": 2,\n   \"requires\": true,\n   \"packages\": {\n     \"\": {\n       \"name\": \"@actions/core\",\n-      \"version\": \"1.8.1\",\n+      \"version\": \"1.9.1\",\n       \"license\": \"MIT\",\n       \"dependencies\": {\n-        \"@actions/http-client\": \"^2.0.1\"\n+        \"@actions/http-client\": \"^2.0.1\",\n+        \"uuid\": \"^8.3.2\"\n       },\n       \"devDependencies\": {\n-        \"@types/node\": \"^12.0.2\"\n+        \"@types/node\": \"^12.0.2\",\n+        \"@types/uuid\": \"^8.3.4\"\n       }\n     },\n     \"node_modules/@actions/http-client\": {\n@@ -29,13 +31,27 @@\n       \"integrity\": \"sha512-5tabW/i+9mhrfEOUcLDu2xBPsHJ+X5Orqy9FKpale3SjDA17j5AEpYq5vfy3oAeAHGcvANRCO3NV3d2D6q3NiA==\",\n       \"dev\": true\n     },\n+    \"node_modules/@types/uuid\": {\n+      \"version\": \"8.3.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@types/uuid/-/uuid-8.3.4.tgz\",\n+      \"integrity\": \"sha512-c/I8ZRb51j+pYGAu5CrFMRxqZ2ke4y2grEBO5AUjgSkSk+qT2Ea+OdWElz/OiMf5MNpn2b17kuVBwZLQJXzihw==\",\n+      \"dev\": true\n+    },\n     \"node_modules/tunnel\": {\n       \"version\": \"0.0.6\",\n       \"resolved\": \"https://registry.npmjs.org/tunnel/-/tunnel-0.0.6.tgz\",\n       \"integrity\": \"sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==\",\n       \"engines\": {\n         \"node\": \">=0.6.11 <=0.7.0 || >=0.7.3\"\n       }\n+    },\n+    \"node_modules/uuid\": {\n+      \"version\": \"8.3.2\",\n+      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz\",\n+      \"integrity\": \"sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==\",\n+      \"bin\": {\n+        \"uuid\": \"dist/bin/uuid\"\n+      }\n     }\n   },\n   \"dependencies\": {\n@@ -53,10 +69,21 @@\n       \"integrity\": \"sha512-5tabW/i+9mhrfEOUcLDu2xBPsHJ+X5Orqy9FKpale3SjDA17j5AEpYq5vfy3oAeAHGcvANRCO3NV3d2D6q3NiA==\",\n       \"dev\": true\n     },\n+    \"@types/uuid\": {\n+      \"version\": \"8.3.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@types/uuid/-/uuid-8.3.4.tgz\",\n+      \"integrity\": \"sha512-c/I8ZRb51j+pYGAu5CrFMRxqZ2ke4y2grEBO5AUjgSkSk+qT2Ea+OdWElz/OiMf5MNpn2b17kuVBwZLQJXzihw==\",\n+      \"dev\": true\n+    },\n     \"tunnel\": {\n       \"version\": \"0.0.6\",\n       \"resolved\": \"https://registry.npmjs.org/tunnel/-/tunnel-0.0.6.tgz\",\n       \"integrity\": \"sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==\"\n+    },\n+    \"uuid\": {\n+      \"version\": \"8.3.2\",\n+      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz\",\n+      \"integrity\": \"sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==\"\n     }\n   }\n }"
        },
        {
          "filename": "packages/core/package.json",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"@actions/core\",\n-  \"version\": \"1.9.0\",\n+  \"version\": \"1.9.1\",\n   \"description\": \"Actions core lib\",\n   \"keywords\": [\n     \"github\",\n@@ -36,9 +36,11 @@\n     \"url\": \"https://github.com/actions/toolkit/issues\"\n   },\n   \"dependencies\": {\n-    \"@actions/http-client\": \"^2.0.1\"\n+    \"@actions/http-client\": \"^2.0.1\",\n+    \"uuid\": \"^8.3.2\"\n   },\n   \"devDependencies\": {\n-    \"@types/node\": \"^12.0.2\"\n+    \"@types/node\": \"^12.0.2\",\n+    \"@types/uuid\": \"^8.3.4\"\n   }\n }"
        },
        {
          "filename": "packages/core/src/core.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@ import {toCommandProperties, toCommandValue} from './utils'\n \n import * as os from 'os'\n import * as path from 'path'\n+import { v4 as uuidv4 } from 'uuid'\n \n import {OidcClient} from './oidc-utils'\n \n@@ -86,7 +87,17 @@ export function exportVariable(name: string, val: any): void {\n \n   const filePath = process.env['GITHUB_ENV'] || ''\n   if (filePath) {\n-    const delimiter = '_GitHubActionsFileCommandDelimeter_'\n+    const delimiter = `ghadelimiter_${uuidv4()}`\n+\n+    // These should realistically never happen, but just in case someone finds a way to exploit uuid generation let's not allow keys or values that contain the delimiter.  \n+    if (name.includes(delimiter)) {\n+      throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`)\n+    }\n+\n+    if (convertedVal.includes(delimiter)) {\n+      throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`)\n+    }\n+\n     const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`\n     issueFileCommand('ENV', commandValue)\n   } else {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5e8c25d1f5d92a53f2438de763f92d4809dd666f",
            "date": "2025-01-09T14:21:32Z",
            "author_login": "yacaovsnc"
          },
          {
            "sha": "3095d112efe9a0e61b1af14a1f4b9f936b20cc21",
            "date": "2025-01-08T21:11:59Z",
            "author_login": "yacaovsnc"
          },
          {
            "sha": "16ef1448d78c0641d842c14654b8e7a643a7abc4",
            "date": "2025-01-08T21:07:30Z",
            "author_login": "yacaovsnc"
          },
          {
            "sha": "e55409315fb4946675f6859c12243eff19570ed4",
            "date": "2025-01-08T20:32:45Z",
            "author_login": "yacaovsnc"
          },
          {
            "sha": "d4385a64a79e01e0b5eff991f721f234bdcd7620",
            "date": "2025-01-08T18:14:04Z",
            "author_login": "yacaovsnc"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:N/I:L/A:N",
    "cwe_id": "CWE-77",
    "description": "The GitHub Actions ToolKit provides a set of packages to make creating actions easier. The `core.exportVariable` function uses a well known delimiter that attackers can use to break out of that specific variable and assign values to other arbitrary variables. Workflows that write untrusted values to the `GITHUB_ENV` file may cause the path or other environment variables to be modified without the intention of the workflow or action author. Users should upgrade to `@actions/core v1.9.1`. If you are unable to upgrade the `@actions/core` package, you can modify your action to ensure that any user input does not contain the delimiter `_GitHubActionsFileCommandDelimeter_` before calling `core.exportVariable`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-15T11:21:39.040",
    "last_modified": "2024-11-21T07:12:02.783",
    "fix_date": "2022-08-08T18:16:39Z"
  },
  "references": [
    {
      "url": "https://github.com/actions/toolkit/commit/4beda9cbc00ba6eefe387a937c21087ccb8ee9df",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/actions/toolkit/security/advisories/GHSA-7r3h-m5j6-3q42",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/actions/toolkit/commit/4beda9cbc00ba6eefe387a937c21087ccb8ee9df",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/actions/toolkit/security/advisories/GHSA-7r3h-m5j6-3q42",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.218040",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "toolkit",
    "owner": "actions",
    "created_at": "2019-04-19T17:08:00Z",
    "updated_at": "2025-01-12T14:09:03Z",
    "pushed_at": "2025-01-09T14:21:32Z",
    "size": 9513,
    "stars": 5093,
    "forks": 1482,
    "open_issues": 473,
    "watchers": 5093,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 757765,
      "JavaScript": 5814,
      "PowerShell": 2276,
      "Shell": 478,
      "Batchfile": 393,
      "C#": 296
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:09:40.367053"
  }
}