{
  "cve_id": "CVE-2022-35969",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "50156d547b9a1da0144d7babe665cf690305b33c",
    "related_commits": [
      "50156d547b9a1da0144d7babe665cf690305b33c",
      "50156d547b9a1da0144d7babe665cf690305b33c"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/50156d547b9a1da0144d7babe665cf690305b33c.patch",
    "fix_commit_details": {
      "sha": "50156d547b9a1da0144d7babe665cf690305b33c",
      "commit_date": "2022-07-26T19:02:26Z",
      "author": {
        "login": "tensorflower-gardener",
        "type": "User",
        "stats": {
          "total_commits": 51283,
          "average_weekly_commits": 106.83958333333334,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 450
        }
      },
      "commit_message": {
        "title": "Add security vulnerability test for raw_ops.Conv2DBackpropInput",
        "length": 93,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 35,
        "deletions": 4
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/conv_grad_input_ops.h",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -422,6 +422,11 @@ class Conv2DBackpropInputOp : public OpKernel {\n     const Tensor& filter = context->input(1);\n     const Tensor& out_backprop = context->input(2);\n \n+    OP_REQUIRES(\n+        context, out_backprop.dims() == 4,\n+        errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",\n+                                out_backprop.dims()));\n+\n     TensorShape input_shape;\n     OP_REQUIRES_OK(context,\n                    Conv2DBackpropComputeInputShape(input_sizes, filter.shape(),\n@@ -527,6 +532,10 @@ class Conv2DCustomBackpropInputOp : public OpKernel {\n     const Tensor& input_sizes = context->input(0);\n     const Tensor& filter = context->input(1);\n     const Tensor& out_backprop = context->input(2);\n+    OP_REQUIRES(\n+        context, out_backprop.dims() == 4,\n+        errors::InvalidArgument(\"input_sizes must be 4-dimensional, got: \",\n+                                out_backprop.dims()));\n \n     TensorShape input_shape;\n     OP_REQUIRES_OK(context,"
        },
        {
          "filename": "tensorflow/python/kernel_tests/nn_ops/conv_ops_test.py",
          "status": "modified",
          "additions": 26,
          "deletions": 4,
          "patch": "@@ -32,6 +32,7 @@\n from tensorflow.python.layers import convolutional\n from tensorflow.python.ops import array_ops\n from tensorflow.python.ops import control_flow_ops\n+from tensorflow.python.ops import gen_nn_ops\n from tensorflow.python.ops import gradient_checker\n from tensorflow.python.ops import gradients_impl\n from tensorflow.python.ops import math_ops\n@@ -1319,7 +1320,7 @@ def _RunAndVerifyBackpropInputDilation(self, input_sizes, filter_sizes,\n     x2 = self._CreateNumpyTensor(filter_sizes)\n     default_dilations = (dilations[0] == 1 and dilations[1] == 1)\n     if default_dilations or use_gpu:\n-      with self.cached_session(use_gpu=use_gpu) as sess:\n+      with self.cached_session(use_gpu=use_gpu):\n         if data_format == \"NCHW\":\n           input_sizes = test_util.NHWCToNCHW(input_sizes)\n         t1 = constant_op.constant(x1, shape=input_sizes)\n@@ -1365,7 +1366,7 @@ def _RunAndVerifyBackpropFilterDilation(self, input_sizes, filter_sizes,\n     x2 = self._CreateNumpyTensor(filter_sizes)\n     default_dilations = (dilations[0] == 1 and dilations[1] == 1)\n     if default_dilations or use_gpu:\n-      with self.cached_session(use_gpu=use_gpu) as sess:\n+      with self.cached_session(use_gpu=use_gpu):\n         if data_format == \"NCHW\":\n           input_sizes = test_util.NHWCToNCHW(input_sizes)\n         t1 = constant_op.constant(x1, shape=input_sizes)\n@@ -2628,6 +2629,27 @@ def testOpEdgeCases(self):\n               strides=[1, 1, 1, 1],\n               padding=[[0, 0], [-1, 0], [0, 0], [0, 0]]))\n \n+  def testConv2DBackpropInputInvalidOutBackpropRaiseError(self):\n+    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n+      with self.cached_session():\n+        input_sizes = constant_op.constant([65534, 65534],\n+                                           shape=[2],\n+                                           dtype=dtypes.int32)\n+        filters = constant_op.constant(\n+            0.159749106, shape=[3, 3, 2, 2], dtype=dtypes.float32)\n+        out_backprop = constant_op.constant(0, shape=[], dtype=dtypes.float32)\n+        t = gen_nn_ops.conv2d_backprop_input(\n+            input_sizes=input_sizes,\n+            filter=filters,\n+            out_backprop=out_backprop,\n+            strides=[1, 1, 1, 1],\n+            padding=\"SAME\",\n+            use_cudnn_on_gpu=True,\n+            explicit_paddings=[],\n+            data_format=\"NHWC\",\n+            dilations=[1, 1, 1, 1])\n+        self.evaluate(t)\n+\n \n @test_util.run_all_without_tensor_float_32(\"Avoid TF32 conv on GPU\")\n class DepthwiseConv2DTest(test.TestCase):\n@@ -2655,7 +2677,7 @@ def _VerifyValues(self, tensor_in_sizes, filter_in_sizes, stride, padding,\n     # numbers from 1.\n     x1 = [f * 1.0 for f in range(1, total_size_1 + 1)]\n     x2 = [f * 1.0 for f in range(1, total_size_2 + 1)]\n-    with self.cached_session() as sess:\n+    with self.cached_session():\n       t1 = constant_op.constant(x1, shape=tensor_in_sizes)\n       t1.set_shape(tensor_in_sizes)\n       t2 = constant_op.constant(x2, shape=filter_in_sizes)\n@@ -2926,7 +2948,7 @@ def _CompareFwdConv2D(self, tensor_in_sizes, filter_in_sizes, conv_strides,\n     x1 = np.random.rand(*tensor_in_sizes).astype(np.float32)\n     x2 = np.random.rand(*filter_in_sizes).astype(np.float32)\n \n-    with self.cached_session(use_gpu=False) as sess:\n+    with self.cached_session(use_gpu=False):\n       t1 = constant_op.constant(x1, shape=tensor_in_sizes)\n       t2 = constant_op.constant(x2, shape=filter_in_sizes)\n       strides = [1] + conv_strides + [1]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d93cc4f4f767f0d4a72f2fafcc59005be939c019",
            "date": "2025-01-14T20:36:32Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "d4e4516cc7d11a68a81a82227f3a432f7ab350a0",
            "date": "2025-01-14T19:59:15Z",
            "author_login": "ddunl"
          },
          {
            "sha": "65367823d999b6a36a685617100a7bb6ce03add4",
            "date": "2025-01-14T19:58:00Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "36cbae5466dbf356d91cf56127b2ab2ccd5a8b1f",
            "date": "2025-01-14T19:54:19Z",
            "author_login": "penpornk"
          },
          {
            "sha": "0a99598a8f76735ac32b5466385b0f5af08a06bb",
            "date": "2025-01-14T19:45:23Z",
            "author_login": "wangpengmit"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-617",
    "description": "TensorFlow is an open source platform for machine learning. The implementation of `Conv2DBackpropInput` requires `input_sizes` to be 4-dimensional. Otherwise, it gives a `CHECK` failure which can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 50156d547b9a1da0144d7babe665cf690305b33c. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-16T21:15:09.227",
    "last_modified": "2024-11-21T07:12:04.633",
    "fix_date": "2022-07-26T19:02:26Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/50156d547b9a1da0144d7babe665cf690305b33c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/50156d547b9a1da0144d7babe665cf690305b33c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-q2c3-jpmc-gfjx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.129070",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}