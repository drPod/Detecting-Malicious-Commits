{
  "cve_id": "CVE-2022-35977",
  "github_data": {
    "repository": "redis/redis",
    "fix_commit": "1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
    "related_commits": [
      "1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
      "1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7"
    ],
    "patch_url": "https://github.com/redis/redis/commit/1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7.patch",
    "fix_commit_details": {
      "sha": "1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
      "commit_date": "2023-01-16T11:49:30Z",
      "author": {
        "login": "oranagra",
        "type": "User",
        "stats": {
          "total_commits": 812,
          "average_weekly_commits": 0.9830508474576272,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 261
        }
      },
      "commit_message": {
        "title": "Avoid integer overflows in SETRANGE and SORT (CVE-2022-35977) (#11720)",
        "length": 286,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 36,
        "deletions": 8
      },
      "files": [
        {
          "filename": "src/sort.c",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -328,8 +328,10 @@ void sortCommandGeneric(client *c, int readonly) {\n     default: vectorlen = 0; serverPanic(\"Bad SORT type\"); /* Avoid GCC warning */\n     }\n \n-    /* Perform LIMIT start,count sanity checking. */\n-    start = (limit_start < 0) ? 0 : limit_start;\n+    /* Perform LIMIT start,count sanity checking.\n+     * And avoid integer overflow by limiting inputs to object sizes. */\n+    start = min(max(limit_start, 0), vectorlen);\n+    limit_count = min(max(limit_count, -1), vectorlen);\n     end = (limit_count < 0) ? vectorlen-1 : start+limit_count-1;\n     if (start >= vectorlen) {\n         start = vectorlen-1;"
        },
        {
          "filename": "src/t_string.c",
          "status": "modified",
          "additions": 11,
          "deletions": 6,
          "patch": "@@ -37,8 +37,14 @@ int getGenericCommand(client *c);\n  * String Commands\n  *----------------------------------------------------------------------------*/\n \n-static int checkStringLength(client *c, long long size) {\n-    if (!mustObeyClient(c) && size > server.proto_max_bulk_len) {\n+static int checkStringLength(client *c, long long size, long long append) {\n+    if (mustObeyClient(c))\n+        return C_OK;\n+    /* 'uint64_t' cast is there just to prevent undefined behavior on overflow */\n+    long long total = (uint64_t)size + append;\n+    /* Test configured max-bulk-len represending a limit of the biggest string object,\n+     * and also test for overflow. */\n+    if (total > server.proto_max_bulk_len || total < size || total < append) {\n         addReplyError(c,\"string exceeds maximum allowed size (proto-max-bulk-len)\");\n         return C_ERR;\n     }\n@@ -454,7 +460,7 @@ void setrangeCommand(client *c) {\n         }\n \n         /* Return when the resulting string exceeds allowed size */\n-        if (checkStringLength(c,offset+sdslen(value)) != C_OK)\n+        if (checkStringLength(c,offset,sdslen(value)) != C_OK)\n             return;\n \n         o = createObject(OBJ_STRING,sdsnewlen(NULL, offset+sdslen(value)));\n@@ -474,7 +480,7 @@ void setrangeCommand(client *c) {\n         }\n \n         /* Return when the resulting string exceeds allowed size */\n-        if (checkStringLength(c,offset+sdslen(value)) != C_OK)\n+        if (checkStringLength(c,offset,sdslen(value)) != C_OK)\n             return;\n \n         /* Create a copy when the object is shared or encoded. */\n@@ -703,8 +709,7 @@ void appendCommand(client *c) {\n \n         /* \"append\" is an argument, so always an sds */\n         append = c->argv[2];\n-        totlen = stringObjectLen(o)+sdslen(append->ptr);\n-        if (checkStringLength(c,totlen) != C_OK)\n+        if (checkStringLength(c,stringObjectLen(o),sdslen(append->ptr)) != C_OK)\n             return;\n \n         /* Append the value */"
        },
        {
          "filename": "tests/unit/sort.tcl",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -339,4 +339,15 @@ start_server {\n             }\n         } {} {cluster:skip}\n     }\n+\n+    test {SETRANGE with huge offset} {\n+        r lpush L 2 1 0\n+        # expecting a different outcome on 32 and 64 bit systems\n+        foreach value {9223372036854775807 2147483647} {\n+            catch {[r sort_ro L by a limit 2 $value]} res\n+            if {![string match \"2\" $res] && ![string match \"*out of range*\" $res]} {\n+                assert_not_equal $res \"expecting an error or 2\"\n+            }\n+        }\n+    }\n }"
        },
        {
          "filename": "tests/unit/type/string.tcl",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -598,4 +598,14 @@ start_server {tags {\"string\"}} {\n     test {LCS indexes with match len and minimum match len} {\n         dict get [r LCS virus1{t} virus2{t} IDX WITHMATCHLEN MINMATCHLEN 5] matches\n     } {{{1 222} {13 234} 222}}\n+\n+    test {SETRANGE with huge offset} {\n+        foreach value {9223372036854775807 2147483647} {\n+            catch {[r setrange K $value A]} res\n+            # expecting a different error on 32 and 64 bit systems\n+            if {![string match \"*string exceeds maximum allowed size*\" $res] && ![string match \"*out of range*\" $res]} {\n+                assert_equal $res \"expecting an error\"\n+           }\n+        }\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f65806b5b0f21b96e9c688ce7d2d00062203a51",
            "date": "2025-01-14T09:30:18Z",
            "author_login": "sundb"
          },
          {
            "sha": "5b8b58e472fc567337429f63e93927f86db7f838",
            "date": "2025-01-14T07:51:05Z",
            "author_login": "ShooterIT"
          },
          {
            "sha": "342ee426ad0d0731b2272553bd4db2cd78e24772",
            "date": "2024-12-15T19:41:45Z",
            "author_login": "YaacovHazan"
          },
          {
            "sha": "4a95b3005a140165bbb9df373ba61f775c936554",
            "date": "2024-12-15T09:27:48Z",
            "author_login": "YaacovHazan"
          },
          {
            "sha": "73a9b916c9f42f2e07b9338a975f9a473ad0cd9b",
            "date": "2025-01-13T12:09:52Z",
            "author_login": "tezc"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-190",
    "description": "Redis is an in-memory database that persists on disk. Authenticated users issuing specially crafted `SETRANGE` and `SORT(_RO)` commands can trigger an integer overflow, resulting with Redis attempting to allocate impossible amounts of memory and abort with an out-of-memory (OOM) panic. The problem is fixed in Redis versions 7.0.8, 6.2.9 and 6.0.17. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-20T19:15:14.470",
    "last_modified": "2024-11-21T07:12:05.760",
    "fix_date": "2023-01-16T11:49:30Z"
  },
  "references": [
    {
      "url": "https://github.com/redis/redis/commit/1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/releases/tag/6.0.17",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/releases/tag/6.2.9",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/releases/tag/7.0.8",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/security/advisories/GHSA-mrcw-fhw9-fj8j",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/commit/1ec82e6e97e1db06a72ca505f9fbf6b981f31ef7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/releases/tag/6.0.17",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/releases/tag/6.2.9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/releases/tag/7.0.8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/security/advisories/GHSA-mrcw-fhw9-fj8j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.580437",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "redis",
    "owner": "redis",
    "created_at": "2009-03-21T22:32:25Z",
    "updated_at": "2025-01-14T13:39:40Z",
    "pushed_at": "2025-01-14T13:24:52Z",
    "size": 142912,
    "stars": 67707,
    "forks": 23864,
    "open_issues": 2530,
    "watchers": 67707,
    "has_security_policy": false,
    "default_branch": "unstable",
    "protected_branches": [
      "2.2",
      "2.4",
      "2.6",
      "2.8",
      "3.0",
      "3.2",
      "4.0",
      "5.0",
      "6.0",
      "6.2",
      "7.0",
      "7.2",
      "7.4",
      "8.0",
      "LiorKogan-patch-1",
      "LiorKogan-patch-2",
      "acl-api-pr",
      "acl-log",
      "antiaffinity",
      "aofrdb",
      "argv-accounting",
      "arm",
      "client-unblock",
      "conduct",
      "cow-pipe",
      "csc2",
      "current-client-fix",
      "dict-clustered-entries",
      "dict-split-by-slot"
    ],
    "languages": {
      "C": 6937367,
      "Tcl": 2354158,
      "Python": 40222,
      "Makefile": 26062,
      "Shell": 23597,
      "Ruby": 23260,
      "C++": 5987,
      "Smarty": 1047,
      "JavaScript": 953
    },
    "commit_activity": {
      "total_commits_last_year": 425,
      "avg_commits_per_week": 8.173076923076923,
      "days_active_last_year": 171
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:05:59.165273"
  }
}