{
  "cve_id": "CVE-2022-35982",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "40adbe4dd15b582b0210dfbf40c243a62f5119fa",
    "related_commits": [
      "40adbe4dd15b582b0210dfbf40c243a62f5119fa",
      "40adbe4dd15b582b0210dfbf40c243a62f5119fa"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/40adbe4dd15b582b0210dfbf40c243a62f5119fa.patch",
    "fix_commit_details": {
      "sha": "40adbe4dd15b582b0210dfbf40c243a62f5119fa",
      "commit_date": "2022-07-12T23:04:01Z",
      "author": {
        "login": "cantonios",
        "type": "User",
        "stats": {
          "total_commits": 299,
          "average_weekly_commits": 0.6229166666666667,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 96
        }
      },
      "commit_message": {
        "title": "Add sparse tensor validation to SparseBincountOp.",
        "length": 108,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 46,
        "additions": 38,
        "deletions": 8
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/BUILD",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -4421,6 +4421,7 @@ tf_kernel_library(\n     deps = [\n         \":fill_functor\",\n         \":gpu_prim_hdrs\",\n+        \":sparse_utils\",\n         \"//tensorflow/core:framework\",\n         \"//tensorflow/core:lib\",\n         \"//tensorflow/core:lib_internal\",\n@@ -5007,6 +5008,7 @@ cc_library(\n SPARSE_DEPS = [\n     \"//tensorflow/core:framework\",\n     \"//tensorflow/core:lib\",\n+    \":sparse_utils\",\n ]\n \n tf_kernel_library(\n@@ -6480,6 +6482,7 @@ filegroup(\n         \"sparse_reorder_op.h\",\n         \"sparse_slice_op.h\",\n         \"sparse_tensor_dense_matmul_op.h\",\n+        \"sparse_utils.h\",\n         \"string_util.h\",\n         \"string_to_hash_bucket_op.h\",\n         \"string_to_hash_bucket_fast_op.h\",\n@@ -6718,6 +6721,7 @@ filegroup(\n         \"random_ops_util.h\",\n         \"random_poisson_op.cc\",\n         \"shuffle_common.h\",\n+        \"sparse_utils.cc\",\n         \"random_shuffle_op.cc\",\n         \"reduce_join_op.cc\",\n         \"reduction_ops_all.cc\","
        },
        {
          "filename": "tensorflow/core/kernels/bincount_op.cc",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -23,6 +23,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/types.h\"\n #include \"tensorflow/core/kernels/bincount_op.h\"\n #include \"tensorflow/core/kernels/fill_functor.h\"\n+#include \"tensorflow/core/kernels/sparse_utils.h\"\n #include \"tensorflow/core/lib/core/threadpool.h\"\n #include \"tensorflow/core/platform/types.h\"\n #include \"tensorflow/core/util/determinism.h\"\n@@ -369,7 +370,8 @@ class SparseBincountOp : public OpKernel {\n \n   void Compute(OpKernelContext* ctx) override {\n     const Tensor& indices = ctx->input(0);\n-    const auto values = ctx->input(1).flat<Tidx>();\n+    const Tensor& values = ctx->input(1);\n+    const auto values_flat = values.flat<Tidx>();\n     const Tensor& dense_shape = ctx->input(2);\n     const Tensor& size_t = ctx->input(3);\n     const auto weights = ctx->input(4).flat<T>();\n@@ -382,6 +384,9 @@ class SparseBincountOp : public OpKernel {\n     OP_REQUIRES(\n         ctx, size >= 0,\n         errors::InvalidArgument(\"size (\", size, \") must be non-negative\"));\n+    OP_REQUIRES_OK(\n+        ctx, sparse_utils::ValidateSparseTensor<int64_t>(\n+                 indices, values, dense_shape, /*validate_indices=*/true));\n \n     bool is_1d = dense_shape.NumElements() == 1;\n \n@@ -394,11 +399,11 @@ class SparseBincountOp : public OpKernel {\n       if (binary_output_) {\n         OP_REQUIRES_OK(ctx,\n                        functor::BincountFunctor<Device, Tidx, T, true>::Compute(\n-                           ctx, values, weights, out, size));\n+                           ctx, values_flat, weights, out, size));\n       } else {\n         OP_REQUIRES_OK(\n             ctx, functor::BincountFunctor<Device, Tidx, T, false>::Compute(\n-                     ctx, values, weights, out, size));\n+                     ctx, values_flat, weights, out, size));\n       }\n     } else {\n       const auto shape = dense_shape.flat<int64_t>();\n@@ -410,7 +415,7 @@ class SparseBincountOp : public OpKernel {\n       const auto indices_mat = indices.matrix<int64_t>();\n       for (int64_t i = 0; i < indices_mat.dimension(0); ++i) {\n         const int64_t batch = indices_mat(i, 0);\n-        const Tidx bin = values(i);\n+        const Tidx bin = values_flat(i);\n         OP_REQUIRES(\n             ctx, batch < out.dimension(0),\n             errors::InvalidArgument(\"Index out of bound. `batch` (\", batch,"
        },
        {
          "filename": "tensorflow/python/kernel_tests/math_ops/bincount_op_test.py",
          "status": "modified",
          "additions": 25,
          "deletions": 4,
          "patch": "@@ -366,7 +366,7 @@ def test_sparse_bincount_all_count(self, dtype):\n     num_rows = 128\n     size = 1000\n     n_elems = 4096\n-    inp_indices = np.random.randint(0, num_rows, (n_elems,))\n+    inp_indices = np.random.randint(0, num_rows, (n_elems, 1))\n     inp_vals = np.random.randint(0, size, (n_elems,), dtype=dtype)\n \n     np_out = np.bincount(inp_vals, minlength=size)\n@@ -390,7 +390,7 @@ def test_sparse_bincount_all_count_with_weights(self, dtype):\n     num_rows = 128\n     size = 1000\n     n_elems = 4096\n-    inp_indices = np.random.randint(0, num_rows, (n_elems,))\n+    inp_indices = np.random.randint(0, num_rows, (n_elems, 1))\n     inp_vals = np.random.randint(0, size, (n_elems,), dtype=dtype)\n     inp_weight = np.random.random((n_elems,))\n \n@@ -415,7 +415,7 @@ def test_sparse_bincount_all_binary(self, dtype):\n     num_rows = 128\n     size = 10\n     n_elems = 4096\n-    inp_indices = np.random.randint(0, num_rows, (n_elems,))\n+    inp_indices = np.random.randint(0, num_rows, (n_elems, 1))\n     inp_vals = np.random.randint(0, size, (n_elems,), dtype=dtype)\n \n     np_out = np.ones((size,))\n@@ -440,7 +440,7 @@ def test_sparse_bincount_all_binary_weights(self, dtype):\n     num_rows = 128\n     size = 10\n     n_elems = 4096\n-    inp_indices = np.random.randint(0, num_rows, (n_elems,))\n+    inp_indices = np.random.randint(0, num_rows, (n_elems, 1))\n     inp_vals = np.random.randint(0, size, (n_elems,), dtype=dtype)\n     inp_weight = np.random.random((n_elems,))\n \n@@ -532,6 +532,27 @@ def test_size_is_not_scalar(self):  # b/206619828\n               weights=[0, 0],\n               binary_output=False))\n \n+  def test_sparse_bincount_input_validation(self):\n+    np.random.seed(42)\n+    num_rows = 128\n+    size = 1000\n+    n_elems = 4096\n+    inp_indices = np.random.randint(0, num_rows, (n_elems, 1))\n+    inp_vals = np.random.randint(0, size, (n_elems,))\n+\n+    # Insert negative index.\n+    inp_indices[10, 0] = -2\n+\n+    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n+                                \"out of bounds\"):\n+      self.evaluate(\n+          gen_math_ops.sparse_bincount(\n+              indices=inp_indices,\n+              values=inp_vals,\n+              dense_shape=[num_rows],\n+              size=size,\n+              weights=[]))\n+\n \n class RaggedBincountOpTest(test_util.TensorFlowTestCase,\n                            parameterized.TestCase):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "36cbae5466dbf356d91cf56127b2ab2ccd5a8b1f",
            "date": "2025-01-14T19:54:19Z",
            "author_login": "penpornk"
          },
          {
            "sha": "0a99598a8f76735ac32b5466385b0f5af08a06bb",
            "date": "2025-01-14T19:45:23Z",
            "author_login": "wangpengmit"
          },
          {
            "sha": "df078d626d561e6ae8f34d4702cbead44a3cbf82",
            "date": "2025-01-14T19:36:18Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "2a6c919b732bc36a8aa444c03c455a5ba7376ad5",
            "date": "2025-01-14T19:00:47Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "ea89878e945fdb95ec85b5d396d45b70a42d268e",
            "date": "2025-01-14T19:00:19Z",
            "author_login": "eunjaekim-0"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-20",
    "description": "TensorFlow is an open source platform for machine learning. If `SparseBincount` is given inputs for `indices`, `values`, and `dense_shape` that do not make a valid sparse tensor, it results in a segfault that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 40adbe4dd15b582b0210dfbf40c243a62f5119fa. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-16T22:15:11.243",
    "last_modified": "2024-11-21T07:12:06.497",
    "fix_date": "2022-07-12T23:04:01Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/40adbe4dd15b582b0210dfbf40c243a62f5119fa",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/40adbe4dd15b582b0210dfbf40c243a62f5119fa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-397c-5g2j-qxpv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.130312",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}