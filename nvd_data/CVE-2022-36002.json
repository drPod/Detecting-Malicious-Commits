{
  "cve_id": "CVE-2022-36002",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "4419d10d576adefa36b0e0a9425d2569f7c0189f",
    "related_commits": [
      "4419d10d576adefa36b0e0a9425d2569f7c0189f",
      "4419d10d576adefa36b0e0a9425d2569f7c0189f"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/4419d10d576adefa36b0e0a9425d2569f7c0189f.patch",
    "fix_commit_details": {
      "sha": "4419d10d576adefa36b0e0a9425d2569f7c0189f",
      "commit_date": "2022-07-18T17:48:37Z",
      "author": {
        "login": "ishark",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix check failure in Unbatch Op kernel by checking whether input argument is a scalar before trying to extract value.",
        "length": 147,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 27,
        "deletions": 0
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/batch_kernels.cc",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@ limitations under the License.\n #include \"tensorflow/core/framework/op_requires.h\"\n #include \"tensorflow/core/framework/resource_mgr.h\"\n #include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n #include \"tensorflow/core/framework/tensor_util.h\"\n #include \"tensorflow/core/framework/types.h\"\n #include \"tensorflow/core/kernels/batching_util/adaptive_shared_batch_scheduler.h\"\n@@ -654,6 +655,12 @@ class UnbatchResource : public ResourceBase {\n           batch_index_t.shape().dim_size(1), \".\");\n     }\n \n+    if (!TensorShapeUtils::IsScalar(context->input(2).shape())) {\n+      return errors::InvalidArgument(\n+          \"Input id should be scalar; \"\n+          \"Got: \",\n+          context->input(2).DebugString(), \".\");\n+    }\n     const int64_t batch_key = context->input(2).scalar<int64_t>()();\n     const bool nonempty_input = batch_index_t.dim_size(0) > 0;\n "
        },
        {
          "filename": "tensorflow/python/ops/batch_ops_test.py",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -236,6 +236,26 @@ def worker():\n       self.assertEqual(thread_results[0], [2])\n       self.assertEqual(main_results[0], [3])\n \n+  def testUnbatchInvalidIdArg(self):\n+    \"\"\"Tests that unbatch work together.\"\"\"\n+    if context.executing_eagerly():\n+      batched_tensor = constant_op.constant(\n+          value=np.random.random(size=(3, 3, 1)), dtype=dtypes.float64)\n+      batched_index = constant_op.constant(\n+          value=np.random.randint(0, 100, size=(3, 3, 1)), dtype=dtypes.int64)\n+      arg_id = constant_op.constant(\n+          value=np.random.randint(0, 100, size=(3, 3, 1)), dtype=dtypes.int64)\n+\n+      with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                  \"Input id should be scalar;\"):\n+        batch_ops.unbatch(\n+            batched_tensor=batched_tensor,\n+            batch_index=batched_index,\n+            id=arg_id,\n+            timeout_micros=50,\n+            container=\"\",\n+            shared_name=\"\")\n+\n   def testBatchDecoratedWithCapturedInput(self):\n     \"\"\"Tests that the batch_function decorator works.\"\"\"\n     if context.executing_eagerly():"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "251362e6c6746aaf6bffcfe514e79c6cc65336d7",
            "date": "2025-01-14T15:24:59Z",
            "author_login": "loislo"
          },
          {
            "sha": "eaa68cb298188196e413abfb1606c38f785dfed4",
            "date": "2025-01-14T15:15:19Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "c141307fbd02349cf4d83f9a73bdba73fcba9b87",
            "date": "2025-01-14T14:26:56Z",
            "author_login": "mooskagh"
          },
          {
            "sha": "9263c01097f54dbb932ac56d6d87a61a93409221",
            "date": "2025-01-14T14:18:52Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "e7f7cefc7d284c486f84596811d07bb5cd0890ca",
            "date": "2025-01-14T14:16:10Z",
            "author_login": "krasimirgg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-617",
    "description": "TensorFlow is an open source platform for machine learning. When `Unbatch` receives a nonscalar input `id`, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit 4419d10d576adefa36b0e0a9425d2569f7c0189f. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-16T23:15:10.763",
    "last_modified": "2024-11-21T07:12:09.457",
    "fix_date": "2022-07-18T17:48:37Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/4419d10d576adefa36b0e0a9425d2569f7c0189f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/4419d10d576adefa36b0e0a9425d2569f7c0189f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mh3m-62v7-68xg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.134965",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}