{
  "cve_id": "CVE-2022-36021",
  "github_data": {
    "repository": "redis/redis",
    "fix_commit": "dcbfcb916ca1a269b3feef86ee86835294758f84",
    "related_commits": [
      "dcbfcb916ca1a269b3feef86ee86835294758f84",
      "dcbfcb916ca1a269b3feef86ee86835294758f84"
    ],
    "patch_url": "https://github.com/redis/redis/commit/dcbfcb916ca1a269b3feef86ee86835294758f84.patch",
    "fix_commit_details": {
      "sha": "dcbfcb916ca1a269b3feef86ee86835294758f84",
      "commit_date": "2023-02-28T13:15:26Z",
      "author": {
        "login": "oranagra",
        "type": "User",
        "stats": {
          "total_commits": 812,
          "average_weekly_commits": 0.9830508474576272,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 261
        }
      },
      "commit_message": {
        "title": "String pattern matching had exponential time complexity on pathological patterns (CVE-2022-36021) (#11858)",
        "length": 339,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 33,
        "additions": 29,
        "deletions": 4
      },
      "files": [
        {
          "filename": "src/util.c",
          "status": "modified",
          "additions": 23,
          "deletions": 4,
          "patch": "@@ -53,8 +53,8 @@\n #define UNUSED(x) ((void)(x))\n \n /* Glob-style pattern matching. */\n-int stringmatchlen(const char *pattern, int patternLen,\n-        const char *string, int stringLen, int nocase)\n+static int stringmatchlen_impl(const char *pattern, int patternLen,\n+        const char *string, int stringLen, int nocase, int *skipLongerMatches)\n {\n     while(patternLen && stringLen) {\n         switch(pattern[0]) {\n@@ -66,12 +66,25 @@ int stringmatchlen(const char *pattern, int patternLen,\n             if (patternLen == 1)\n                 return 1; /* match */\n             while(stringLen) {\n-                if (stringmatchlen(pattern+1, patternLen-1,\n-                            string, stringLen, nocase))\n+                if (stringmatchlen_impl(pattern+1, patternLen-1,\n+                            string, stringLen, nocase, skipLongerMatches))\n                     return 1; /* match */\n+                if (*skipLongerMatches)\n+                    return 0; /* no match */\n                 string++;\n                 stringLen--;\n             }\n+            /* There was no match for the rest of the pattern starting\n+             * from anywhere in the rest of the string. If there were\n+             * any '*' earlier in the pattern, we can terminate the\n+             * search early without trying to match them to longer\n+             * substrings. This is because a longer match for the\n+             * earlier part of the pattern would require the rest of the\n+             * pattern to match starting later in the string, and we\n+             * have just determined that there is no match for the rest\n+             * of the pattern starting from anywhere in the current\n+             * string. */\n+            *skipLongerMatches = 1;\n             return 0; /* no match */\n             break;\n         case '?':\n@@ -173,6 +186,12 @@ int stringmatchlen(const char *pattern, int patternLen,\n     return 0;\n }\n \n+int stringmatchlen(const char *pattern, int patternLen,\n+        const char *string, int stringLen, int nocase) {\n+    int skipLongerMatches = 0;\n+    return stringmatchlen_impl(pattern,patternLen,string,stringLen,nocase,&skipLongerMatches);\n+}\n+\n int stringmatch(const char *pattern, const char *string, int nocase) {\n     return stringmatchlen(pattern,strlen(pattern),string,strlen(string),nocase);\n }"
        },
        {
          "filename": "tests/unit/keyspace.tcl",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -493,4 +493,10 @@ foreach {type large} [array get largevalue] {\n         r keys *\n         r keys *\n     } {dlskeriewrioeuwqoirueioqwrueoqwrueqw}\n+\n+    test {Regression for pattern matching long nested loops} {\n+        r flushdb\n+        r SET aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 1\n+        r KEYS \"a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*b\"\n+    } {}\n }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f65806b5b0f21b96e9c688ce7d2d00062203a51",
            "date": "2025-01-14T09:30:18Z",
            "author_login": "sundb"
          },
          {
            "sha": "5b8b58e472fc567337429f63e93927f86db7f838",
            "date": "2025-01-14T07:51:05Z",
            "author_login": "ShooterIT"
          },
          {
            "sha": "342ee426ad0d0731b2272553bd4db2cd78e24772",
            "date": "2024-12-15T19:41:45Z",
            "author_login": "YaacovHazan"
          },
          {
            "sha": "4a95b3005a140165bbb9df373ba61f775c936554",
            "date": "2024-12-15T09:27:48Z",
            "author_login": "YaacovHazan"
          },
          {
            "sha": "73a9b916c9f42f2e07b9338a975f9a473ad0cd9b",
            "date": "2025-01-13T12:09:52Z",
            "author_login": "tezc"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-407",
    "description": "Redis is an in-memory database that persists on disk. Authenticated users can use string matching commands (like `SCAN` or `KEYS`) with a specially crafted pattern to trigger a denial-of-service attack on Redis, causing it to hang and consume 100% CPU time. The problem is fixed in Redis versions 6.0.18, 6.2.11, 7.0.9.\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-01T16:15:09.400",
    "last_modified": "2024-11-21T07:12:12.090",
    "fix_date": "2023-02-28T13:15:26Z"
  },
  "references": [
    {
      "url": "https://github.com/redis/redis/commit/dcbfcb916ca1a269b3feef86ee86835294758f84",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/redis/redis/security/advisories/GHSA-jr7j-rfj5-8xqv",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/redis/redis/commit/dcbfcb916ca1a269b3feef86ee86835294758f84",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/redis/redis/security/advisories/GHSA-jr7j-rfj5-8xqv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.790517",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "redis",
    "owner": "redis",
    "created_at": "2009-03-21T22:32:25Z",
    "updated_at": "2025-01-14T13:39:40Z",
    "pushed_at": "2025-01-14T13:24:52Z",
    "size": 142912,
    "stars": 67707,
    "forks": 23864,
    "open_issues": 2530,
    "watchers": 67707,
    "has_security_policy": false,
    "default_branch": "unstable",
    "protected_branches": [
      "2.2",
      "2.4",
      "2.6",
      "2.8",
      "3.0",
      "3.2",
      "4.0",
      "5.0",
      "6.0",
      "6.2",
      "7.0",
      "7.2",
      "7.4",
      "8.0",
      "LiorKogan-patch-1",
      "LiorKogan-patch-2",
      "acl-api-pr",
      "acl-log",
      "antiaffinity",
      "aofrdb",
      "argv-accounting",
      "arm",
      "client-unblock",
      "conduct",
      "cow-pipe",
      "csc2",
      "current-client-fix",
      "dict-clustered-entries",
      "dict-split-by-slot"
    ],
    "languages": {
      "C": 6937367,
      "Tcl": 2354158,
      "Python": 40222,
      "Makefile": 26062,
      "Shell": 23597,
      "Ruby": 23260,
      "C++": 5987,
      "Smarty": 1047,
      "JavaScript": 953
    },
    "commit_activity": {
      "total_commits_last_year": 425,
      "avg_commits_per_week": 8.173076923076923,
      "days_active_last_year": 171
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:05:59.165273"
  }
}