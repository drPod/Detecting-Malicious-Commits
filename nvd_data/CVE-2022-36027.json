{
  "cve_id": "CVE-2022-36027",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "aa0b852a4588cea4d36b74feb05d93055540b450",
    "related_commits": [
      "aa0b852a4588cea4d36b74feb05d93055540b450",
      "aa0b852a4588cea4d36b74feb05d93055540b450"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "aa0b852a4588cea4d36b74feb05d93055540b450",
      "commit_date": "2022-07-25T14:28:07Z",
      "author": {
        "login": "abattery",
        "type": "User",
        "stats": {
          "total_commits": 399,
          "average_weekly_commits": 0.8278008298755186,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 125
        }
      },
      "commit_message": {
        "title": "Skip reordering dq-q patterns when the new quantization dimension is unknown.",
        "length": 309,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 56,
        "additions": 50,
        "deletions": 6
      },
      "files": [
        {
          "filename": "tensorflow/compiler/mlir/lite/quantization/quantization_utils.cc",
          "status": "modified",
          "additions": 8,
          "deletions": 6,
          "patch": "@@ -168,12 +168,10 @@ quant::UniformQuantizedPerAxisType ResetAxisAndBroadcast(\n         BroadcastVector<int64_t>(shaped.getDimSize(quant_dim), zero_points)) {\n       return {};\n     }\n-  } else if ((new_shape.size() == shape.size() + 1) && new_shape.back() == 1) {\n-    // This is a trivial shift left, then we shift the quant_dim as well.\n-    if (std::equal(shape.begin(), shape.end(), new_shape.begin()) &&\n-        quant_dim == -1) {\n-      quant_dim = shape.size() + quant_dim;\n-    } else {\n+  } else if ((new_shape.size() == shape.size() + 1) && new_shape.front() == 1) {\n+    // Handle the [A, B, C] -> [1, A, B, C] reshape case.\n+    if (!(std::equal(shape.begin(), shape.end(), new_shape.begin() + 1) &&\n+          quant_dim == new_shape.size() - 1)) {\n       return {};\n     }\n   } else {\n@@ -343,6 +341,10 @@ TypeAttr CastQuantizedTypeAttrFromExpressedType(Builder builder,\n   // Reset the quantization dimensions if it is per-axis.\n   if (auto per_axis =\n           qtype.dyn_cast_or_null<quant::UniformQuantizedPerAxisType>()) {\n+    // For the pass-through ops, we don't know which the dimension will be the\n+    // new quantization dimension. Only if the new quantization dimension can\n+    // be inferred, it is safe to reset the per-axis quantized type.\n+    if (axis == -1) return {};\n     qtype =\n         ResetAxisAndBroadcast(source_type.getShape(), per_axis, target, axis);\n   }"
        },
        {
          "filename": "tensorflow/compiler/mlir/lite/transforms/prepare_tf.cc",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1370,6 +1370,8 @@ void PrepareTFPass::runOnOperation() {\n \n   patterns.add<RemoveIdentity>(ctx);\n   TFL::populateWithGenerated(patterns);\n+  // Remove redundant reshape ops.\n+  TF::ReshapeOp::getCanonicalizationPatterns(patterns, ctx);\n   // TODO(karimnosseir): Split to separate pass probably after\n   // deciding on long term plan for this optimization.\n   // This will allow optimizing any TF_Mul->TF_Conv in the graph\n@@ -1399,6 +1401,8 @@ void PrepareTFPass::runOnOperation() {\n            ConvertRfftToRfft2d, RemoveIdentity>(ctx);\n   phase_2_patterns.add<ConvertTFConv2D, ConvertTFDepthwiseConv2dNative>(\n       ctx, allow_bf16_and_f16_type_legalization_);\n+  // Remove redundant reshape ops.\n+  TF::ReshapeOp::getCanonicalizationPatterns(phase_2_patterns, ctx);\n \n   (void)applyPatternsAndFoldGreedily(func, std::move(phase_2_patterns));\n }"
        },
        {
          "filename": "tensorflow/lite/python/lite_v2_test.py",
          "status": "modified",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -2311,6 +2311,44 @@ def testKerasFullyConnectedOutputShape3D(self):\n         list(output_details[0]['shape_signature']),\n         list(model.layers[-1].output_shape))\n \n+  @test_util.run_v2_only\n+  def testKerasConv2DTransposedWithMismatchQuantizedAxes(self):\n+\n+    class QuantConv2DTransposed(tf.keras.layers.Layer):\n+\n+      def build(self, input_shape):\n+        self.kernel = self.add_weight('kernel', [3, 3, input_shape[-1], 24])\n+\n+      def call(self, inputs):\n+        filters = tf.quantization.fake_quant_with_min_max_vars_per_channel(\n+            self.kernel,\n+            -3.0 * tf.ones([24]),\n+            3.0 * tf.ones([24]),\n+            narrow_range=True)\n+        filters = tf.transpose(filters, (0, 1, 3, 2))\n+        return tf.nn.conv2d_transpose(inputs, filters, [*inputs.shape[:-1], 24],\n+                                      1)\n+\n+    inp = tf.keras.Input(shape=(6, 8, 48), batch_size=1)\n+    x = tf.quantization.fake_quant_with_min_max_vars(\n+        inp, -3.0, 3.0, narrow_range=True)\n+    x = QuantConv2DTransposed()(x)\n+    x = tf.quantization.fake_quant_with_min_max_vars(\n+        x, -3.0, 3.0, narrow_range=True)\n+\n+    model = tf.keras.Model(inp, x)\n+\n+    saved_model_dir = os.path.join(self.get_temp_dir(),\n+                                   'keras_conv2d_transpose')\n+    model.save(saved_model_dir)\n+    converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)\n+    converter.optimizations = [tf.lite.Optimize.DEFAULT]\n+\n+    with self.assertRaises(convert.ConverterError) as error:\n+      _ = converter.convert()\n+    self.assertIn('mismatched quantized axes of input and output',\n+                  str(error.exception))\n+\n   def _createModelWithInputShape(self, shape):\n     \"\"\"Create a simple SavedModel with a certain shape.\"\"\"\n     saved_model_dir = os.path.join(self.get_temp_dir(), 'input_shape_model')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5c27f5f4dc39afdefbd93c2ef266a8c7ab534a98",
            "date": "2025-01-25T18:55:10Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "05df81c283627135b7651c9c7a8fa0035bff2206",
            "date": "2025-01-25T17:06:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4075a7dd74ea543557d1824e16721598e1a6af8d",
            "date": "2025-01-25T17:06:30Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4d08d96d6a0aea39c5bd90d9728dbcf59008993c",
            "date": "2025-01-25T17:04:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "1b58ec4dcd6e5752598dc57d4788119f8ea12e23",
            "date": "2025-01-25T11:39:06Z",
            "author_login": "tensorflower-gardener"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-20",
    "description": "TensorFlow is an open source platform for machine learning. When converting transposed convolutions using per-channel weight quantization the converter segfaults and crashes the Python process. We have patched the issue in GitHub commit aa0b852a4588cea4d36b74feb05d93055540b450. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-16T23:15:11.430",
    "last_modified": "2024-11-21T07:12:12.940",
    "fix_date": "2022-07-25T14:28:07Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/aa0b852a4588cea4d36b74feb05d93055540b450",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/issues/53767",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/aa0b852a4588cea4d36b74feb05d93055540b450",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/issues/53767",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-79h2-q768-fpxr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.136601",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-26T06:52:14Z",
    "pushed_at": "2025-01-26T07:27:00Z",
    "size": 1126495,
    "stars": 187418,
    "forks": 74442,
    "open_issues": 6822,
    "watchers": 187418,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101327392,
      "Python": 45791326,
      "MLIR": 10764225,
      "HTML": 7662661,
      "Starlark": 7439181,
      "Go": 2171369,
      "C": 1294440,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 702245,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 38067,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15545,
      "avg_commits_per_week": 298.9423076923077,
      "days_active_last_year": 354
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:37:26.588757"
  }
}