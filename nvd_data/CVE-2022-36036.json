{
  "cve_id": "CVE-2022-36036",
  "github_data": {
    "repository": "sjwall/mdx-mermaid",
    "fix_commit": "f2b99386660fd13316823529c3f1314ebbcdfd2a",
    "related_commits": [
      "f2b99386660fd13316823529c3f1314ebbcdfd2a",
      "f2b99386660fd13316823529c3f1314ebbcdfd2a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f2b99386660fd13316823529c3f1314ebbcdfd2a",
      "commit_date": "2022-08-22T17:10:59Z",
      "author": {
        "login": "sjwall",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-rvgm-35jw-q628",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 967,
        "additions": 710,
        "deletions": 257
      },
      "files": [
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -53,6 +53,7 @@\n     \"@rollup/plugin-babel\": \"^5.3.1\",\n     \"@rollup/plugin-commonjs\": \"^22.0.2\",\n     \"@rollup/plugin-typescript\": \"^8.3.4\",\n+    \"@testing-library/react\": \"^11.1.0\",\n     \"@types/jest\": \"^27.4.0\",\n     \"@types/mermaid\": \"^8.2.7\",\n     \"@types/react\": \"^17.0.38\",\n@@ -69,7 +70,7 @@\n     \"jest\": \"^27.4.7\",\n     \"mermaid\": \"^8.0.0\",\n     \"react\": \"^17.0.1\",\n-    \"react-test-renderer\": \"^17.0.2\",\n+    \"react-dom\": \"^17.0.0\",\n     \"rimraf\": \"^3.0.2\",\n     \"rollup\": \"^2.78.1\",\n     \"ts-jest\": \"^27.1.2\","
        },
        {
          "filename": "src/Mermaid.spec.tsx",
          "status": "modified",
          "additions": 92,
          "deletions": 152,
          "patch": "@@ -7,9 +7,8 @@\n  * This source code is licensed under the MIT license found in the\n  * license file in the root directory of this source tree.\n  */\n-import mermaid from 'mermaid'\n import React from 'react'\n-import renderer from 'react-test-renderer'\n+import { act, render, RenderResult } from '@testing-library/react'\n import { Mermaid } from './Mermaid'\n import {\n   DARK_THEME_KEY,\n@@ -18,185 +17,126 @@ import {\n } from './theme.helper'\n import * as ThemeHelper from './theme.helper'\n \n-async function waitFor (ms: number) {\n-  return new Promise<void>(resolve => {\n-    setTimeout(() => resolve(), ms)\n-  })\n-}\n-\n jest.mock('mermaid')\n \n+// eslint-disable-next-line import/first\n+import mermaid from 'mermaid'\n+\n+const getThemeSpy = jest.spyOn(ThemeHelper, 'getTheme')\n+\n+const diagram = `graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;`\n+\n afterEach(() => {\n   jest.clearAllMocks()\n })\n \n+const removeUniqueness = (element: Element) => {\n+  element.querySelectorAll('style').forEach((v) => v.remove())\n+  element.querySelectorAll('svg').forEach((v) => {\n+    v.removeAttribute('id')\n+    v.parentElement!.removeAttribute('id')\n+  })\n+}\n+\n+const expectMermaidMatch = (result: RenderResult) => {\n+  removeUniqueness(result.baseElement)\n+  expect(result.baseElement.parentElement).toMatchSnapshot()\n+  return result\n+}\n+\n it('renders without diagram', () => {\n-  const component = renderer.create(<Mermaid chart={''} config={{}}  />)\n-  expect(mermaid.initialize).toBeCalledTimes(0)\n-  expect(mermaid.render).toBeCalledTimes(0)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(mermaid.initialize).toBeCalledTimes(1)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(mermaid.initialize).toBeCalledTimes(1)\n+  expectMermaidMatch(render(<Mermaid chart={''} config={{}} />))\n })\n \n it('renders with diagram', () => {\n-  const component = renderer.create(<Mermaid chart={`graph TD;\n-      A-->B;\n-      A-->C;\n-      B-->D;\n-      C-->D;`} config={{}} />)\n-  expect(mermaid.initialize).toBeCalledTimes(0)\n-  expect(mermaid.render).toBeCalledTimes(0)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(mermaid.initialize).toBeCalledTimes(1)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(mermaid.initialize).toBeCalledTimes(1)\n+  expectMermaidMatch(render(<svg><Mermaid chart={diagram} config={{}} /></svg>))\n })\n \n-it('initializes only once', async () => {\n-  const component = renderer.create(<>\n-        <Mermaid chart={'foo'} config={{}} />\n-        <Mermaid chart={'bar'} />\n-      </>)\n-  expect(mermaid.initialize).toBeCalledTimes(0)\n-  expect(mermaid.render).toBeCalledTimes(0)\n-  await waitFor(1000)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(2)\n+it('renders with diagram change', () => {\n+  const config = {}\n+  jest.useFakeTimers()\n+  const view = expectMermaidMatch(render(<Mermaid chart={diagram} config={config} />))\n+  view.rerender(<Mermaid chart={`graph TD;\n+D-->C;\n+D-->B;\n+C-->A;\n+B-->A;`} config={config} />)\n+  jest.advanceTimersByTime(1000)\n+  expectMermaidMatch(view)\n+  jest.useRealTimers()\n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n   expect(mermaid.initialize).toBeCalledTimes(1)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(2)\n+})\n+\n+it('initializes only once', () => {\n+  expectMermaidMatch(render(<>\n+    <Mermaid chart={'foo'} config={{}} />\n+    <Mermaid chart={'bar'} />\n+  </>))\n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n   expect(mermaid.initialize).toBeCalledTimes(1)\n })\n \n it('renders with mermaid config', () => {\n-  const component = renderer.create(<Mermaid chart={`graph TD;\n-      A-->B;\n-      A-->C;\n-      B-->D;\n-      C-->D;`} config={{ mermaid: { theme: 'dark' } } } />)\n-  expect(mermaid.initialize).toBeCalledTimes(0)\n-  expect(mermaid.render).toBeCalledTimes(0)\n-  component.update()\n-  expect(mermaid.render).toHaveBeenCalled()\n-  expect(mermaid.initialize).toHaveBeenNthCalledWith(1, { startOnLoad: true, theme: 'dark' })\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(mermaid.initialize).toBeCalledTimes(1)\n+  expectMermaidMatch(render(<Mermaid chart={diagram} config={{ mermaid: { theme: 'dark' } }} />))\n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n+  expect(mermaid.initialize).toBeCalledWith({ startOnLoad: true, theme: 'dark' })\n })\n \n-it('re-renders mermaid theme on html data-theme attribute change', async () => {\n-  const component = renderer.create(\n-    <html data-theme='light'>\n-      <Mermaid chart={`graph TD;\n-            A-->B;\n-            A-->C;\n-            B-->D;\n-            C-->D;`} config={{}} />\n-    </html>)\n-  expect(mermaid.initialize).toBeCalledTimes(0)\n-  expect(mermaid.render).toBeCalledTimes(0)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(mermaid.initialize).toBeCalledTimes(1)\n-  component.update()\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(mermaid.initialize).toBeCalledTimes(1)\n+it('renders with mermaid config change', () => {\n+  const view = expectMermaidMatch(render(<Mermaid chart={diagram} config={{ mermaid: { theme: 'dark' } }} />))\n+  view.baseElement.querySelectorAll('div.mermaid').forEach((v) => {\n+    v.setAttribute('data-processed', 'true')\n+  })\n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n+  expect(mermaid.initialize).toBeCalledWith({ startOnLoad: true, theme: 'dark' })\n+  view.rerender(<Mermaid chart={diagram} config={{ mermaid: { theme: 'forest' } }} />)\n+  // await waitFor(1000)\n+  expectMermaidMatch(view)\n+  expect(mermaid.contentLoaded).toBeCalledTimes(2)\n+  expect(mermaid.initialize).toHaveBeenNthCalledWith(2, { startOnLoad: true, theme: 'forest' })\n+})\n \n-  component.update(\n-    <html data-theme='dark'>\n-      <Mermaid chart={`graph TD;\n-            A-->B;\n-            A-->C;\n-            B-->D;\n-            C-->D;`} config={{}} />\n-        </html>)\n+it('renders with string mermaid config', () => {\n+  expectMermaidMatch(render(<Mermaid chart={diagram} config={JSON.stringify({ mermaid: { theme: 'dark' } })} />))\n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n+  expect(mermaid.initialize).toBeCalledWith({ startOnLoad: true, theme: 'dark' })\n+})\n \n-  // Time for mutation observer to notice change.\n-  await waitFor(2000)\n+it('re-renders mermaid theme on html data-theme attribute change', () => {\n+  const component = render(\n+    <Mermaid chart={diagram} config={{}} />)\n \n-  expect(mermaid.render).toBeCalledTimes(2)\n-  expect(mermaid.initialize).toBeCalledTimes(2)\n-})\n+  expectMermaidMatch(component)\n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n+  expect(mermaid.initialize).toBeCalledTimes(1)\n+  expect(getThemeSpy).toBeCalledTimes(1)\n \n-it('renders the output of mermaid into the div', async () => {\n-  const expectedOutput = 'mermaid output'\n-  mermaid.render = jest.fn((_, __, cb) => {\n-    if (cb) cb(expectedOutput, () => 0)\n-    return expectedOutput\n-  })\n+  act(() => document.querySelector('html')!.setAttribute(HTML_THEME_ATTRIBUTE, DARK_THEME_KEY))\n \n-  let component: any\n-  renderer.act(() => {\n-    component = renderer.create(\n-      <Mermaid chart={`graph TD;\n-            A-->B;\n-            A-->C;\n-            B-->D;\n-            C-->D;`} config={{}} />\n-    )\n-  })\n+  expectMermaidMatch(component)\n \n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n   expect(mermaid.initialize).toBeCalledTimes(1)\n-  expect(mermaid.render).toBeCalledTimes(1)\n-  expect(component.toJSON()).toMatchSnapshot()\n-})\n+  expect(getThemeSpy).toBeCalledTimes(1)\n \n-describe('changing the theme at runtime', () => {\n-  let useRefSpy: jest.SpyInstance\n-  let html: HTMLHtmlElement\n+  act(() => document.querySelector('html')!.setAttribute(HTML_THEME_ATTRIBUTE, LIGHT_THEME_KEY))\n \n-  beforeEach(() => {\n-    html = document.createElement('html')\n-    html.setAttribute(HTML_THEME_ATTRIBUTE, LIGHT_THEME_KEY)\n-    useRefSpy = jest.spyOn(document, 'querySelector').mockReturnValue(html)\n-  })\n+  expectMermaidMatch(component)\n+})\n \n-  afterEach(() => {\n-    expect(useRefSpy).toHaveBeenCalled()\n-  })\n+it('does not react to non-theme attribute changes of html', () => {\n+  const component = render(<Mermaid chart={diagram} config={{}} />)\n \n-  it('reacts to changed theme', async () => {\n-    const getThemeSpy = jest.spyOn(ThemeHelper, 'getTheme')\n-    renderer.act(() => {\n-      renderer.create(\n-        <Mermaid chart={`graph TD;\n-              A-->B;\n-              A-->C;\n-              B-->D;\n-              C-->D;`} config={{}} />\n-      )\n-    })\n-\n-    await renderer.act(async () => {\n-      html.setAttribute(HTML_THEME_ATTRIBUTE, DARK_THEME_KEY)\n-      await waitFor(1000)\n-    })\n-\n-    expect(getThemeSpy.mock.calls.length).toBeGreaterThan(2)\n-  })\n+  expectMermaidMatch(component)\n+  expect(mermaid.contentLoaded).toBeCalledTimes(1)\n+  expect(mermaid.initialize).toBeCalledTimes(1)\n \n-  it('does not react to non-theme attribute changes of html', async () => {\n-    const getThemeSpy = jest.spyOn(ThemeHelper, 'getTheme')\n-    renderer.act(() => {\n-      renderer.create(\n-        <Mermaid chart={`graph TD;\n-              A-->B;\n-              A-->C;\n-              B-->D;\n-              C-->D;`} config={{}} />\n-      )\n-    })\n-\n-    await renderer.act(async () => {\n-      html.setAttribute('manifest', 'some-value')\n-      await waitFor(1000)\n-    })\n-    expect(getThemeSpy).toHaveBeenCalledTimes(2)\n-  })\n+  act(() => document.querySelector('html')!.setAttribute('manifest', 'some-value'))\n+\n+  expectMermaidMatch(component)\n })"
        },
        {
          "filename": "src/Mermaid.tsx",
          "status": "modified",
          "additions": 22,
          "deletions": 28,
          "patch": "@@ -5,19 +5,12 @@\n  * license file in the root directory of this source tree.\n  */\n \n-import React, { useEffect, useState, ReactElement } from 'react'\n+import React, { useEffect, useState, ReactElement, useMemo } from 'react'\n import mermaid from 'mermaid'\n-import mermaidAPI from 'mermaid/mermaidAPI'\n \n import { Config } from './config.model'\n import { getTheme } from './theme.helper'\n \n-/**\n- * Assign a unique ID to each mermaid svg as per requirements\n- * of `mermaid.render`.\n- */\n-let id = 0\n-\n /**\n  * Properties for Mermaid component.\n  */\n@@ -30,7 +23,7 @@ export type MermaidProps = {\n   /**\n    * Config to initialize mermaid with.\n    */\n-  config?: Config\n+  config?: Config | string\n }\n \n /**\n@@ -40,26 +33,29 @@ export type MermaidProps = {\n  * @param param1 Config.\n  * @returns The component.\n  */\n-export const Mermaid = ({ chart, config }: MermaidProps): ReactElement<MermaidProps> => {\n+export const Mermaid = ({ chart, config: configSrc }: MermaidProps): ReactElement<MermaidProps> => {\n   // Due to Docusaurus not correctly parsing client-side from server-side modules, use the provided workaround\n   // found in the accompanying issue: https://github.com/facebook/docusaurus/issues/4268#issuecomment-783553084\n   /* istanbul ignore next */\n   if (typeof window === 'undefined') {\n-    return <div></div>\n+    return <div className=\"mermaid\" data-mermaid-src={chart}>{chart}</div>\n   }\n \n+  const config: Config = useMemo(() => typeof configSrc === 'string' ? JSON.parse(configSrc) : configSrc, [configSrc])\n+\n   const html: HTMLHtmlElement = document.querySelector('html')!\n \n-  // Watch for changes in theme in the HTML attribute `data-theme`.\n-  const [theme, setTheme] = useState<mermaidAPI.Theme>(getTheme(html, config))\n+  const [rerender, setRerender] = useState<boolean>(false)\n+\n+  const theme = useMemo(() => getTheme(html, config), [config, rerender])\n \n   useEffect(() => {\n     const observer = new MutationObserver((mutations) => {\n       for (const mutation of mutations) {\n         if (mutation.type !== 'attributes' || mutation.attributeName !== 'data-theme') {\n           continue\n         }\n-        setTheme(getTheme(mutation.target as HTMLHtmlElement, config))\n+        setRerender((cur) => !cur)\n         break\n       }\n     })\n@@ -72,28 +68,26 @@ export const Mermaid = ({ chart, config }: MermaidProps): ReactElement<MermaidPr\n         // Do nothing\n       }\n     }\n-  }, [chart, config, theme])\n+  }, [])\n \n-  // When theme updates, rerender the SVG.\n-  const [svg, setSvg] = useState<string>('')\n   useEffect(() => {\n-    const render = () => {\n-      mermaid.render(`mermaid-svg-${id.toString()}`, chart, (renderedSvg) => setSvg(renderedSvg))\n-      id++\n-    }\n-\n     if (config) {\n       if (config.mermaid) {\n         mermaid.initialize({ startOnLoad: true, ...config.mermaid, theme })\n       } else {\n         mermaid.initialize({ startOnLoad: true, theme })\n       }\n-      render()\n-    } else {\n-      // Is there a better way?\n-      setTimeout(render, 0)\n+      document.querySelectorAll('div.mermaid[data-processed=\"true\"]').forEach((v) => {\n+        v.removeAttribute('data-processed')\n+        v.innerHTML = v.getAttribute('data-mermaid-src') as string\n+      })\n+      mermaid.contentLoaded()\n     }\n-  }, [theme, chart])\n+  }, [config, theme])\n+\n+  useEffect(() => {\n+    setTimeout(() => mermaid.contentLoaded, 0)\n+  }, [chart])\n \n-  return <div dangerouslySetInnerHTML={{ __html: svg }}></div>\n+  return <div className=\"mermaid\" data-mermaid-src={chart}>{chart}</div>\n }"
        },
        {
          "filename": "src/__snapshots__/Mermaid.spec.tsx.snap",
          "status": "modified",
          "additions": 333,
          "deletions": 8,
          "patch": "@@ -1,11 +1,336 @@\n // Jest Snapshot v1, https://goo.gl/fbAQLP\n \n-exports[`renders the output of mermaid into the div 1`] = `\n-<div\n-  dangerouslySetInnerHTML={\n-    Object {\n-      \"__html\": \"mermaid output\",\n-    }\n-  }\n-/>\n+exports[`does not react to non-theme attribute changes of html 1`] = `\n+<html\n+  data-theme=\"light\"\n+>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`does not react to non-theme attribute changes of html 2`] = `\n+<html\n+  data-theme=\"light\"\n+  manifest=\"some-value\"\n+>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`initializes only once 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"foo\"\n+      >\n+        foo\n+      </div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"bar\"\n+      >\n+        bar\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`re-renders mermaid theme on html data-theme attribute change 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`re-renders mermaid theme on html data-theme attribute change 2`] = `\n+<html\n+  data-theme=\"dark\"\n+>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`re-renders mermaid theme on html data-theme attribute change 3`] = `\n+<html\n+  data-theme=\"light\"\n+>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders with diagram 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <svg>\n+        <div\n+          class=\"mermaid\"\n+          data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+        >\n+          graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+        </div>\n+      </svg>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders with diagram change 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders with diagram change 2`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+D-->C;\n+D-->B;\n+C-->A;\n+B-->A;\"\n+      >\n+        graph TD;\n+D--&gt;C;\n+D--&gt;B;\n+C--&gt;A;\n+B--&gt;A;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders with mermaid config 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders with mermaid config change 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders with mermaid config change 2`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders with string mermaid config 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"graph TD;\n+A-->B;\n+A-->C;\n+B-->D;\n+C-->D;\"\n+      >\n+        graph TD;\n+A--&gt;B;\n+A--&gt;C;\n+B--&gt;D;\n+C--&gt;D;\n+      </div>\n+    </div>\n+  </body>\n+</html>\n+`;\n+\n+exports[`renders without diagram 1`] = `\n+<html>\n+  <head />\n+  <body>\n+    <div>\n+      <div\n+        class=\"mermaid\"\n+        data-mermaid-src=\"\"\n+      />\n+    </div>\n+  </body>\n+</html>\n `;"
        },
        {
          "filename": "src/mdxast-mermaid.spec.ts",
          "status": "modified",
          "additions": 154,
          "deletions": 30,
          "patch": "@@ -24,7 +24,24 @@ function createTestCompiler (config?: Config) {\n test('No mermaid', async () => {\n   const mdxCompiler = createTestCompiler()\n   const result = await mdxCompiler.process('# Heading 1\\n\\nNo Mermaid diagram :(')\n-  expect(result.contents).toEqual('\\n\\n\\nconst layoutProps = {\\n  \\n};\\nconst MDXLayout = \"wrapper\"\\nexport default function MDXContent({\\n  components,\\n  ...props\\n}) {\\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\\n    <h1>{`Heading 1`}</h1>\\n    <p>{`No Mermaid diagram :(`}</p>\\n    </MDXLayout>;\\n}\\n\\n;\\nMDXContent.isMDXComponent = true;')\n+  expect(result.contents).toEqual(`import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\n+\n+\n+const layoutProps = {\\n  \\n};\n+const MDXLayout = \"wrapper\"\n+export default function MDXContent({\n+  components,\n+  ...props\n+}) {\n+  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n+\n+    <h1>{\\`Heading 1\\`}</h1>\n+    <p>{\\`No Mermaid diagram :(\\`}</p>\n+    </MDXLayout>;\n+}\n+\n+;\n+MDXContent.isMDXComponent = true;`)\n })\n \n test('Basic', async () => {\n@@ -37,7 +54,26 @@ graph TD;\n     B-->D;\n     C-->D;\n \\`\\`\\``)\n-  expect(result.contents).toEqual(\"import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\\n\\n\\nconst layoutProps = {\\n  \\n};\\nconst MDXLayout = \\\"wrapper\\\"\\nexport default function MDXContent({\\n  components,\\n  ...props\\n}) {\\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\\"MDXLayout\\\">\\n\\n    <h1>{`Heading 1`}</h1>\\n    <Mermaid config={{}} chart={`graph TD;\\n    A-->B;\\n    A-->C;\\n    B-->D;\\n    C-->D;`} mdxType=\\\"Mermaid\\\" />\\n    </MDXLayout>;\\n}\\n\\n;\\nMDXContent.isMDXComponent = true;\")\n+  expect(result.contents).toEqual(`import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\n+\n+\n+const layoutProps = {\\n  \\n};\n+const MDXLayout = \"wrapper\"\n+export default function MDXContent({\n+  components,\n+  ...props\n+}) {\n+  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n+\n+    <h1>{\\`Heading 1\\`}</h1>\n+    <Mermaid {...{\n+      \"chart\": \"graph TD;\\\\n    A-->B;\\\\n    A-->C;\\\\n    B-->D;\\\\n    C-->D;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n+    </MDXLayout>;\n+}\n+\n+;\n+MDXContent.isMDXComponent = true;`)\n })\n \n test('Existing import', async () => {\n@@ -50,7 +86,26 @@ graph TD;\n     B-->D;\n     C-->D;\n \\`\\`\\``)\n-  expect(result.contents).toEqual(\"import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\\n\\n\\nconst layoutProps = {\\n  \\n};\\nconst MDXLayout = \\\"wrapper\\\"\\nexport default function MDXContent({\\n  components,\\n  ...props\\n}) {\\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\\"MDXLayout\\\">\\n\\n    <h1>{`Heading 1`}</h1>\\n    <Mermaid config={{}} chart={`graph TD;\\n    A-->B;\\n    A-->C;\\n    B-->D;\\n    C-->D;`} mdxType=\\\"Mermaid\\\" />\\n    </MDXLayout>;\\n}\\n\\n;\\nMDXContent.isMDXComponent = true;\")\n+  expect(result.contents).toEqual(`import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\n+\n+\n+const layoutProps = {\\n  \\n};\n+const MDXLayout = \"wrapper\"\n+export default function MDXContent({\n+  components,\n+  ...props\n+}) {\n+  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n+\n+    <h1>{\\`Heading 1\\`}</h1>\n+    <Mermaid {...{\n+      \"chart\": \"graph TD;\\\\n    A-->B;\\\\n    A-->C;\\\\n    B-->D;\\\\n    C-->D;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n+    </MDXLayout>;\n+}\n+\n+;\n+MDXContent.isMDXComponent = true;`)\n })\n \n test('Existing import from ts exports(without /lib)', async () => {\n@@ -63,7 +118,26 @@ graph TD;\n     B-->D;\n     C-->D;\n \\`\\`\\``)\n-  expect(result.contents).toEqual(\"import { Mermaid } from 'mdx-mermaid/Mermaid';\\n\\n\\nconst layoutProps = {\\n  \\n};\\nconst MDXLayout = \\\"wrapper\\\"\\nexport default function MDXContent({\\n  components,\\n  ...props\\n}) {\\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\\"MDXLayout\\\">\\n\\n    <h1>{`Heading 1`}</h1>\\n    <Mermaid config={{}} chart={`graph TD;\\n    A-->B;\\n    A-->C;\\n    B-->D;\\n    C-->D;`} mdxType=\\\"Mermaid\\\" />\\n    </MDXLayout>;\\n}\\n\\n;\\nMDXContent.isMDXComponent = true;\")\n+  expect(result.contents).toEqual(`import { Mermaid } from 'mdx-mermaid/Mermaid';\n+\n+\n+const layoutProps = {\\n  \\n};\n+const MDXLayout = \"wrapper\"\n+export default function MDXContent({\n+  components,\n+  ...props\n+}) {\n+  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n+\n+    <h1>{\\`Heading 1\\`}</h1>\n+    <Mermaid {...{\n+      \"chart\": \"graph TD;\\\\n    A-->B;\\\\n    A-->C;\\\\n    B-->D;\\\\n    C-->D;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n+    </MDXLayout>;\n+}\n+\n+;\n+MDXContent.isMDXComponent = true;`)\n })\n \n test('Other imports', async () => {\n@@ -76,7 +150,28 @@ graph TD;\n     B-->D;\n     C-->D;\n \\`\\`\\``)\n-  expect(result.contents).toEqual(\"import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\\nimport { A } from 'a';\\n\\n\\nconst layoutProps = {\\n  \\n};\\nconst MDXLayout = \\\"wrapper\\\"\\nexport default function MDXContent({\\n  components,\\n  ...props\\n}) {\\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\\"MDXLayout\\\">\\n\\n\\n    <h1>{`Heading 1`}</h1>\\n    <Mermaid config={{}} chart={`graph TD;\\n    A-->B;\\n    A-->C;\\n    B-->D;\\n    C-->D;`} mdxType=\\\"Mermaid\\\" />\\n    </MDXLayout>;\\n}\\n\\n;\\nMDXContent.isMDXComponent = true;\")\n+  expect(result.contents).toEqual(`import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\n+import { A } from 'a';\n+\n+\n+const layoutProps = {\\n  \\n};\n+const MDXLayout = \"wrapper\"\n+export default function MDXContent({\n+  components,\n+  ...props\n+}) {\n+  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n+\n+\n+    <h1>{\\`Heading 1\\`}</h1>\n+    <Mermaid {...{\n+      \"chart\": \"graph TD;\\\\n    A-->B;\\\\n    A-->C;\\\\n    B-->D;\\\\n    C-->D;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n+    </MDXLayout>;\n+}\n+\n+;\n+MDXContent.isMDXComponent = true;`)\n })\n \n test('Other imports component', async () => {\n@@ -101,7 +196,7 @@ export default function MDXContent({\n \n \n     <h1>{\\`Heading 1\\`}</h1>\n-    <Mermaid config={{}} chart={\\`graph TD;\n+    <Mermaid chart={\\`graph TD;\n       A-->B;\n       A-->C;\n       B-->D;\n@@ -144,7 +239,7 @@ export default function MDXContent({\n     <h1>{\\`Heading 1\\`}</h1>\n     <A mdxType=\"A\">Hi</A>\n     <h2>{\\`Heading 2\\`}</h2>\n-    <Mermaid config={{}} chart={\\`graph TD;\n+    <Mermaid chart={\\`graph TD;\n       A-->B;\n       A-->C;\n       B-->D;\n@@ -178,15 +273,10 @@ export default function MDXContent({\n   return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n \n     <h1>{\\`Heading 1\\`}</h1>\n-    <Mermaid config={{\n-      \"mermaid\": {\n-        \"theme\": \"dark\"\n-      }\n-    }} chart={\\`graph TD;\n-    A-->B;\n-    A-->C;\n-    B-->D;\n-    C-->D;\\`} mdxType=\"Mermaid\" />\n+    <Mermaid {...{\n+      \"config\": \"{\\\\\"mermaid\\\\\":{\\\\\"theme\\\\\":\\\\\"dark\\\\\"}}\",\n+      \"chart\": \"graph TD;\\\\n    A-->B;\\\\n    A-->C;\\\\n    B-->D;\\\\n    C-->D;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n     </MDXLayout>;\n }\n \n@@ -214,11 +304,7 @@ export default function MDXContent({\n   return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n \n     <h1>{\\`Heading 1\\`}</h1>\n-    <Mermaid config={{\n-      \"mermaid\": {\n-        \"theme\": \"dark\"\n-      }\n-    }} chart={\\`graph TD;\n+    <Mermaid chart={\\`graph TD;\n     A-->B;\n     A-->C;\n     B-->D;\n@@ -257,15 +343,10 @@ export default function MDXContent({\n   return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n \n     <h1>{\\`Heading 1\\`}</h1>\n-    <Mermaid config={{\n-      \"mermaid\": {\n-        \"theme\": \"dark\"\n-      }\n-    }} chart={\\`graph TD;\n-    A-->B;\n-    A-->C;\n-    B-->D;\n-    C-->D;\\`} mdxType=\"Mermaid\" />\n+    <Mermaid {...{\n+      \"config\": \"{\\\\\"mermaid\\\\\":{\\\\\"theme\\\\\":\\\\\"dark\\\\\"}}\",\n+      \"chart\": \"graph TD;\\\\n    A-->B;\\\\n    A-->C;\\\\n    B-->D;\\\\n    C-->D;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n     <Mermaid chart={\\`graph TD;\n     E-->F;\n     E-->G;\n@@ -277,3 +358,46 @@ export default function MDXContent({\n ;\n MDXContent.isMDXComponent = true;`)\n })\n+\n+test('Multiple code block', async () => {\n+  const mdxCompiler = createTestCompiler({ mermaid: { theme: 'dark' } })\n+  const result = await mdxCompiler.process(`# Heading 1\\n\n+\\`\\`\\`mermaid\n+graph TD;\n+    A-->B;\n+    A-->C;\n+    B-->D;\n+    C-->D;\n+\\`\\`\\`\n+\\`\\`\\`mermaid\n+graph TD;\n+E-->F;\n+E-->G;\n+F-->H;\n+G-->H;\n+\\`\\`\\``)\n+  expect(result.contents).toEqual(`import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\n+\n+\n+const layoutProps = {\\n  \\n};\n+const MDXLayout = \"wrapper\"\n+export default function MDXContent({\n+  components,\n+  ...props\n+}) {\n+  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n+\n+    <h1>{\\`Heading 1\\`}</h1>\n+    <Mermaid {...{\n+      \"config\": \"{\\\\\"mermaid\\\\\":{\\\\\"theme\\\\\":\\\\\"dark\\\\\"}}\",\n+      \"chart\": \"graph TD;\\\\n    A-->B;\\\\n    A-->C;\\\\n    B-->D;\\\\n    C-->D;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n+    <Mermaid {...{\n+      \"chart\": \"graph TD;\\\\nE-->F;\\\\nE-->G;\\\\nF-->H;\\\\nG-->H;\"\n+    }} mdxType=\"Mermaid\"></Mermaid>\n+    </MDXLayout>;\n+}\n+\n+;\n+MDXContent.isMDXComponent = true;`)\n+})"
        },
        {
          "filename": "src/mdxast-mermaid.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 18,
          "patch": "@@ -53,28 +53,20 @@ export default function plugin (config?: Config) {\n     })\n \n     // Replace each Mermaid code block with the Mermaid component\n-    instances.forEach(([node, index, parent]) => {\n+    instances.forEach(([node, index, parent], i) => {\n       parent.children.splice(index, 1, {\n-        type: 'jsx',\n-        value: `<Mermaid chart={\\`${node.value}\\`}/>`,\n-        position: node.position\n+        type: 'mermaidCodeBlock',\n+        data: {\n+          hName: 'Mermaid',\n+          hProperties: {\n+            config: i > 0 ? undefined : JSON.stringify(config),\n+            chart: node.value\n+          }\n+        }\n       })\n     })\n \n-    // Look for any components\n-    visit<Literal<string> & { type: 'jsx' }>(ast, { type: 'jsx' }, (node, index, parent) => {\n-      if (/.*<Mermaid.*/.test(node.value)) {\n-        // If the component doesn't have config\n-        if (!/.*config={.*/.test(node.value)) {\n-          const index = node.value.indexOf('<Mermaid') + 8\n-          node.value = node.value.substring(0, index) +\n-          ` config={${JSON.stringify(config || {})}}` +\n-            node.value.substring(index)\n-        }\n-        insertImport(ast)\n-        return visit.EXIT\n-      }\n-    })\n+    insertImport(ast)\n     return ast\n   }\n }"
        },
        {
          "filename": "yarn.lock",
          "status": "modified",
          "additions": 97,
          "deletions": 20,
          "patch": "@@ -1501,7 +1501,15 @@\n     pirates \"^4.0.0\"\n     source-map-support \"^0.5.16\"\n \n-\"@babel/runtime@^7.8.4\":\n+\"@babel/runtime-corejs3@^7.10.2\":\n+  version \"7.18.9\"\n+  resolved \"https://registry.yarnpkg.com/@babel/runtime-corejs3/-/runtime-corejs3-7.18.9.tgz#7bacecd1cb2dd694eacd32a91fcf7021c20770ae\"\n+  integrity sha512-qZEWeccZCrHA2Au4/X05QW5CMdm4VjUDCrGq5gf1ZDcM4hRqreKrtwAn7yci9zfgAS9apvnsFXiGBHBAxZdK9A==\n+  dependencies:\n+    core-js-pure \"^3.20.2\"\n+    regenerator-runtime \"^0.13.4\"\n+\n+\"@babel/runtime@^7.10.2\", \"@babel/runtime@^7.12.5\", \"@babel/runtime@^7.8.4\":\n   version \"7.18.9\"\n   resolved \"https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.18.9.tgz#b4fcfce55db3d2e5e080d2490f608a3b9f407f4a\"\n   integrity sha512-lkqXDcvlFT5rvEjiu6+QYO+1GXrEHRo2LOtS7E4GtX5ESIZOgepqsZBVIj6Pv+a6zqsya9VCgiK1KAK4BvJDAw==\n@@ -1852,6 +1860,17 @@\n     source-map \"^0.6.1\"\n     write-file-atomic \"^3.0.0\"\n \n+\"@jest/types@^26.6.2\":\n+  version \"26.6.2\"\n+  resolved \"https://registry.yarnpkg.com/@jest/types/-/types-26.6.2.tgz#bef5a532030e1d88a2f5a6d933f84e97226ed48e\"\n+  integrity sha512-fC6QCp7Sc5sX6g8Tvbmj4XUTbyrik0akgRy03yjXbQaBWWNWGE7SGtJk98m0N8nzegD/7SggrUlivxo5ax4KWQ==\n+  dependencies:\n+    \"@types/istanbul-lib-coverage\" \"^2.0.0\"\n+    \"@types/istanbul-reports\" \"^3.0.0\"\n+    \"@types/node\" \"*\"\n+    \"@types/yargs\" \"^15.0.0\"\n+    chalk \"^4.0.0\"\n+\n \"@jest/types@^27.0.6\":\n   version \"27.0.6\"\n   resolved \"https://registry.yarnpkg.com/@jest/types/-/types-27.0.6.tgz#9a992bc517e0c49f035938b8549719c2de40706b\"\n@@ -2114,11 +2133,38 @@\n   dependencies:\n     \"@sinonjs/commons\" \"^1.7.0\"\n \n+\"@testing-library/dom@^7.28.1\":\n+  version \"7.31.2\"\n+  resolved \"https://registry.yarnpkg.com/@testing-library/dom/-/dom-7.31.2.tgz#df361db38f5212b88555068ab8119f5d841a8c4a\"\n+  integrity sha512-3UqjCpey6HiTZT92vODYLPxTBWlM8ZOOjr3LX5F37/VRipW2M1kX6I/Cm4VXzteZqfGfagg8yXywpcOgQBlNsQ==\n+  dependencies:\n+    \"@babel/code-frame\" \"^7.10.4\"\n+    \"@babel/runtime\" \"^7.12.5\"\n+    \"@types/aria-query\" \"^4.2.0\"\n+    aria-query \"^4.2.2\"\n+    chalk \"^4.1.0\"\n+    dom-accessibility-api \"^0.5.6\"\n+    lz-string \"^1.4.4\"\n+    pretty-format \"^26.6.2\"\n+\n+\"@testing-library/react@^11.1.0\":\n+  version \"11.2.7\"\n+  resolved \"https://registry.yarnpkg.com/@testing-library/react/-/react-11.2.7.tgz#b29e2e95c6765c815786c0bc1d5aed9cb2bf7818\"\n+  integrity sha512-tzRNp7pzd5QmbtXNG/mhdcl7Awfu/Iz1RaVHY75zTdOkmHCuzMhRL83gWHSgOAcjS3CCbyfwUHMZgRJb4kAfpA==\n+  dependencies:\n+    \"@babel/runtime\" \"^7.12.5\"\n+    \"@testing-library/dom\" \"^7.28.1\"\n+\n \"@tootallnate/once@1\":\n   version \"1.1.2\"\n   resolved \"https://registry.yarnpkg.com/@tootallnate/once/-/once-1.1.2.tgz#ccb91445360179a04e7fe6aff78c00ffc1eeaf82\"\n   integrity sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==\n \n+\"@types/aria-query@^4.2.0\":\n+  version \"4.2.2\"\n+  resolved \"https://registry.yarnpkg.com/@types/aria-query/-/aria-query-4.2.2.tgz#ed4e0ad92306a704f9fb132a0cfcf77486dbe2bc\"\n+  integrity sha512-HnYpAE1Y6kRyKM/XkEuiRQhTHvkzMBurTHnpFLYLBGPIylZNPs9jJcuOOYWxPLJCSEtmZT0Y8rHDokKN7rRTig==\n+\n \"@types/babel__core@^7.0.0\", \"@types/babel__core@^7.1.14\":\n   version \"7.1.15\"\n   resolved \"https://registry.yarnpkg.com/@types/babel__core/-/babel__core-7.1.15.tgz#2ccfb1ad55a02c83f8e0ad327cbc332f55eb1024\"\n@@ -2279,6 +2325,13 @@\n   resolved \"https://registry.yarnpkg.com/@types/yargs-parser/-/yargs-parser-20.2.1.tgz#3b9ce2489919d9e4fea439b76916abc34b2df129\"\n   integrity sha512-7tFImggNeNBVMsn0vLrpn1H1uPrUBdnARPTpZoitY37ZrdJREzf7I16tMrlK3hen349gr1NYh8CmZQa7CTG6Aw==\n \n+\"@types/yargs@^15.0.0\":\n+  version \"15.0.14\"\n+  resolved \"https://registry.yarnpkg.com/@types/yargs/-/yargs-15.0.14.tgz#26d821ddb89e70492160b66d10a0eb6df8f6fb06\"\n+  integrity sha512-yEJzHoxf6SyQGhBhIYGXQDSCkJjB6HohDShto7m8vaKg9Yp0Yn8+71J9eakh2bnPg6BfsH9PRMhiRTZnd4eXGQ==\n+  dependencies:\n+    \"@types/yargs-parser\" \"*\"\n+\n \"@types/yargs@^16.0.0\":\n   version \"16.0.4\"\n   resolved \"https://registry.yarnpkg.com/@types/yargs/-/yargs-16.0.4.tgz#26aad98dd2c2a38e421086ea9ad42b9e51642977\"\n@@ -2492,6 +2545,14 @@ argparse@^2.0.1:\n   resolved \"https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38\"\n   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==\n \n+aria-query@^4.2.2:\n+  version \"4.2.2\"\n+  resolved \"https://registry.yarnpkg.com/aria-query/-/aria-query-4.2.2.tgz#0d2ca6c9aceb56b8977e9fed6aed7e15bbd2f83b\"\n+  integrity sha512-o/HelwhuKpTj/frsOsbNLNgnNGVIFsVP/SW2BSF14gVl7kAfMOJ6/8wUAUvG1R1NHKrfG+2sHZTu0yauT1qBrA==\n+  dependencies:\n+    \"@babel/runtime\" \"^7.10.2\"\n+    \"@babel/runtime-corejs3\" \"^7.10.2\"\n+\n arr-diff@^4.0.0:\n   version \"4.0.0\"\n   resolved \"https://registry.npmjs.org/arr-diff/-/arr-diff-4.0.0.tgz\"\n@@ -3114,6 +3175,11 @@ core-js-compat@^3.21.0, core-js-compat@^3.22.1:\n     browserslist \"^4.21.3\"\n     semver \"7.0.0\"\n \n+core-js-pure@^3.20.2:\n+  version \"3.24.1\"\n+  resolved \"https://registry.yarnpkg.com/core-js-pure/-/core-js-pure-3.24.1.tgz#8839dde5da545521bf282feb7dc6d0b425f39fd3\"\n+  integrity sha512-r1nJk41QLLPyozHUUPmILCEMtMw24NG4oWK6RbsDdjzQgg9ZvrUsPBj1MnG0wXXp1DCDU6j+wUvEmBSrtRbLXg==\n+\n cosmiconfig@^7.0.0:\n   version \"7.0.0\"\n   resolved \"https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.0.0.tgz\"\n@@ -3563,6 +3629,11 @@ doctrine@^3.0.0:\n   dependencies:\n     esutils \"^2.0.2\"\n \n+dom-accessibility-api@^0.5.6:\n+  version \"0.5.14\"\n+  resolved \"https://registry.yarnpkg.com/dom-accessibility-api/-/dom-accessibility-api-0.5.14.tgz#56082f71b1dc7aac69d83c4285eef39c15d93f56\"\n+  integrity sha512-NMt+m9zFMPZe0JcY9gN224Qvk6qLIdqex29clBvc/y75ZBX9YA9wNK3frsYvu2DI1xcCIwxwnX+TlsJ2DSOADg==\n+\n domexception@^2.0.1:\n   version \"2.0.1\"\n   resolved \"https://registry.yarnpkg.com/domexception/-/domexception-2.0.1.tgz#fb44aefba793e1574b0af6aed2801d057529f304\"\n@@ -5722,6 +5793,11 @@ lru-cache@^6.0.0:\n   dependencies:\n     yallist \"^4.0.0\"\n \n+lz-string@^1.4.4:\n+  version \"1.4.4\"\n+  resolved \"https://registry.yarnpkg.com/lz-string/-/lz-string-1.4.4.tgz#c0d8eaf36059f705796e1e344811cf4c498d3a26\"\n+  integrity sha512-0ckx7ZHRPqb0oUm8zNr+90mtf9DQB60H1wMCjBtfi62Kl3a7JbHob6gA2bC+xRvZoOL+1hzUK8jeuEIQE8svEQ==\n+\n magic-string@^0.25.7:\n   version \"0.25.9\"\n   resolved \"https://registry.yarnpkg.com/magic-string/-/magic-string-0.25.9.tgz#de7f9faf91ef8a1c91d02c2e5314c8277dbcdd1c\"\n@@ -6320,6 +6396,16 @@ prelude-ls@~1.1.2:\n   resolved \"https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54\"\n   integrity sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=\n \n+pretty-format@^26.6.2:\n+  version \"26.6.2\"\n+  resolved \"https://registry.yarnpkg.com/pretty-format/-/pretty-format-26.6.2.tgz#e35c2705f14cb7fe2fe94fa078345b444120fc93\"\n+  integrity sha512-7AeGuCYNGmycyQbCqd/3PWH4eOoX/OiCa0uphp57NVTeAGdJGaAliecxwBDHYQCIvrW7aDBZCYeNTP/WX69mkg==\n+  dependencies:\n+    \"@jest/types\" \"^26.6.2\"\n+    ansi-regex \"^5.0.0\"\n+    ansi-styles \"^4.0.0\"\n+    react-is \"^17.0.1\"\n+\n pretty-format@^27.0.0, pretty-format@^27.4.6:\n   version \"27.4.6\"\n   resolved \"https://registry.yarnpkg.com/pretty-format/-/pretty-format-27.4.6.tgz#1b784d2f53c68db31797b2348fa39b49e31846b7\"\n@@ -6373,33 +6459,24 @@ queue-microtask@^1.2.2:\n   resolved \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\"\n   integrity sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\n \n-\"react-is@^16.12.0 || ^17.0.0\", react-is@^17.0.1, react-is@^17.0.2:\n+react-dom@^17.0.0:\n   version \"17.0.2\"\n-  resolved \"https://registry.yarnpkg.com/react-is/-/react-is-17.0.2.tgz#e691d4a8e9c789365655539ab372762b0efb54f0\"\n-  integrity sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==\n+  resolved \"https://registry.yarnpkg.com/react-dom/-/react-dom-17.0.2.tgz#ecffb6845e3ad8dbfcdc498f0d0a939736502c23\"\n+  integrity sha512-s4h96KtLDUQlsENhMn1ar8t2bEa+q/YAtj8pPPdIjPDGBDIVNsrD9aXNWqspUe6AzKCIG0C1HZZLqLV7qpOBGA==\n+  dependencies:\n+    loose-envify \"^1.1.0\"\n+    object-assign \"^4.1.1\"\n+    scheduler \"^0.20.2\"\n \n react-is@^16.8.1:\n   version \"16.13.1\"\n   resolved \"https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz\"\n   integrity sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==\n \n-react-shallow-renderer@^16.13.1:\n-  version \"16.14.1\"\n-  resolved \"https://registry.yarnpkg.com/react-shallow-renderer/-/react-shallow-renderer-16.14.1.tgz#bf0d02df8a519a558fd9b8215442efa5c840e124\"\n-  integrity sha512-rkIMcQi01/+kxiTE9D3fdS959U1g7gs+/rborw++42m1O9FAQiNI/UNRZExVUoAOprn4umcXf+pFRou8i4zuBg==\n-  dependencies:\n-    object-assign \"^4.1.1\"\n-    react-is \"^16.12.0 || ^17.0.0\"\n-\n-react-test-renderer@^17.0.2:\n+react-is@^17.0.1:\n   version \"17.0.2\"\n-  resolved \"https://registry.yarnpkg.com/react-test-renderer/-/react-test-renderer-17.0.2.tgz#4cd4ae5ef1ad5670fc0ef776e8cc7e1231d9866c\"\n-  integrity sha512-yaQ9cB89c17PUb0x6UfWRs7kQCorVdHlutU1boVPEsB8IDZH6n9tHxMacc3y0JoXOJUsZb/t/Mb8FUWMKaM7iQ==\n-  dependencies:\n-    object-assign \"^4.1.1\"\n-    react-is \"^17.0.2\"\n-    react-shallow-renderer \"^16.13.1\"\n-    scheduler \"^0.20.2\"\n+  resolved \"https://registry.yarnpkg.com/react-is/-/react-is-17.0.2.tgz#e691d4a8e9c789365655539ab372762b0efb54f0\"\n+  integrity sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==\n \n react@^17.0.1:\n   version \"17.0.2\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1007cbe53cac4e484b461239b626f45591890aca",
            "date": "2024-12-06T13:32:46Z",
            "author_login": "sjwall"
          },
          {
            "sha": "c367e8d6d2d91429902befe200db8606d185f643",
            "date": "2024-12-06T13:30:49Z",
            "author_login": "sjwall"
          },
          {
            "sha": "c2f9212902b954e83232ea70fc466e677bc566d8",
            "date": "2024-12-06T13:25:49Z",
            "author_login": "sjwall"
          },
          {
            "sha": "3d33d842993fb3fc32cb5b8d2bfdc462525b043d",
            "date": "2024-11-05T21:41:19Z",
            "author_login": "sjwall"
          },
          {
            "sha": "5b0b26ceede1b0172471d8618be30f3dd09162bc",
            "date": "2024-11-05T21:25:25Z",
            "author_login": "sjwall"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.6,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-94",
    "description": "mdx-mermaid provides plug and play access to Mermaid in MDX. There is a potential for an arbitrary javascript injection in versions less than 1.3.0 and 2.0.0-rc1. Modify any mermaid code blocks with arbitrary code and it will execute when the component is loaded by MDXjs. This vulnerability was patched in version(s) 1.3.0 and 2.0.0-rc2. There are currently no known workarounds.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-08-29T18:15:09.803",
    "last_modified": "2024-11-21T07:12:14.183",
    "fix_date": "2022-08-22T17:10:59Z"
  },
  "references": [
    {
      "url": "https://github.com/sjwall/mdx-mermaid/commit/f2b99386660fd13316823529c3f1314ebbcdfd2a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sjwall/mdx-mermaid/security/advisories/GHSA-rvgm-35jw-q628",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sjwall/mdx-mermaid/commit/f2b99386660fd13316823529c3f1314ebbcdfd2a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sjwall/mdx-mermaid/security/advisories/GHSA-rvgm-35jw-q628",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.055588",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "mdx-mermaid",
    "owner": "sjwall",
    "created_at": "2021-08-03T18:41:29Z",
    "updated_at": "2024-12-06T13:32:22Z",
    "pushed_at": "2024-12-06T13:33:49Z",
    "size": 6621,
    "stars": 167,
    "forks": 29,
    "open_issues": 9,
    "watchers": 167,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "gh-pages",
      "main"
    ],
    "languages": {
      "TypeScript": 20416,
      "JavaScript": 1381,
      "Dockerfile": 1309
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:29:08.989179"
  }
}