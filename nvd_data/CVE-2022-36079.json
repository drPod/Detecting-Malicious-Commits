{
  "cve_id": "CVE-2022-36079",
  "github_data": {
    "repository": "parse-community/parse-server",
    "fix_commit": "634c44acd18f6ee6ec60fac89a2b602d92799bec",
    "related_commits": [
      "634c44acd18f6ee6ec60fac89a2b602d92799bec",
      "e39d51bd329cd978589983bd659db46e1d45aad4",
      "634c44acd18f6ee6ec60fac89a2b602d92799bec",
      "e39d51bd329cd978589983bd659db46e1d45aad4"
    ],
    "patch_url": "https://github.com/parse-community/parse-server/commit/634c44acd18f6ee6ec60fac89a2b602d92799bec.patch",
    "fix_commit_details": {
      "sha": "634c44acd18f6ee6ec60fac89a2b602d92799bec",
      "commit_date": "2022-09-02T19:15:09Z",
      "author": {
        "login": "mtrezza",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: brute force guessing of user sensitive data via search patterns; this fixes a security vulnerability in which internal and protected fields may be used as query constraints to guess the value of these fields and obtain sensitive data (GHSA-2m6g-crv8-p3c6) (#8143)",
        "length": 268,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 179,
        "additions": 139,
        "deletions": 40
      },
      "files": [
        {
          "filename": ".github/workflows/ci.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@ env:\n jobs:\n   check-mongo:\n     strategy:\n+      fail-fast: false\n       matrix:\n         include:\n           - name: Mongo 4.0.4, ReplicaSet, WiredTiger"
        },
        {
          "filename": "spec/RedisCacheAdapter.spec.js",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -378,7 +378,7 @@ describe_only(() => {\n \n     const query = new Parse.Query(TestObject);\n     await query.get(object.id);\n-    expect(getSpy.calls.count()).toBe(3);\n+    expect(getSpy.calls.count()).toBe(4);\n     expect(putSpy.calls.count()).toBe(1);\n     expect(delSpy.calls.count()).toBe(2);\n \n@@ -397,7 +397,7 @@ describe_only(() => {\n \n     const query = new Parse.Query(TestObject);\n     await query.get(object.id);\n-    expect(getSpy.calls.count()).toBe(2);\n+    expect(getSpy.calls.count()).toBe(3);\n     expect(putSpy.calls.count()).toBe(1);\n     expect(delSpy.calls.count()).toBe(1);\n \n@@ -420,7 +420,7 @@ describe_only(() => {\n     query.include('child');\n     await query.get(object.id);\n \n-    expect(getSpy.calls.count()).toBe(4);\n+    expect(getSpy.calls.count()).toBe(6);\n     expect(putSpy.calls.count()).toBe(1);\n     expect(delSpy.calls.count()).toBe(3);\n \n@@ -444,7 +444,7 @@ describe_only(() => {\n     expect(objects.length).toBe(1);\n     expect(objects[0].id).toBe(child.id);\n \n-    expect(getSpy.calls.count()).toBe(2);\n+    expect(getSpy.calls.count()).toBe(3);\n     expect(putSpy.calls.count()).toBe(1);\n     expect(delSpy.calls.count()).toBe(3);\n "
        },
        {
          "filename": "spec/RestQuery.spec.js",
          "status": "modified",
          "additions": 73,
          "deletions": 0,
          "patch": "@@ -191,6 +191,79 @@ describe('rest query', () => {\n     expect(result.results.length).toEqual(0);\n   });\n \n+  it('query internal field', async () => {\n+    const internalFields = [\n+      '_email_verify_token',\n+      '_perishable_token',\n+      '_tombstone',\n+      '_email_verify_token_expires_at',\n+      '_failed_login_count',\n+      '_account_lockout_expires_at',\n+      '_password_changed_at',\n+      '_password_history',\n+    ];\n+    await Promise.all([\n+      ...internalFields.map(field =>\n+        expectAsync(new Parse.Query(Parse.User).exists(field).find()).toBeRejectedWith(\n+          new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Invalid key name: ${field}`)\n+        )\n+      ),\n+      ...internalFields.map(field =>\n+        new Parse.Query(Parse.User).exists(field).find({ useMasterKey: true })\n+      ),\n+    ]);\n+  });\n+\n+  it('query protected field', async () => {\n+    const user = new Parse.User();\n+    user.setUsername('username1');\n+    user.setPassword('password');\n+    await user.signUp();\n+    const config = Config.get(Parse.applicationId);\n+    const obj = new Parse.Object('Test');\n+\n+    obj.set('owner', user);\n+    obj.set('test', 'test');\n+    obj.set('zip', 1234);\n+    await obj.save();\n+\n+    const schema = await config.database.loadSchema();\n+    await schema.updateClass(\n+      'Test',\n+      {},\n+      {\n+        get: { '*': true },\n+        find: { '*': true },\n+        protectedFields: { [user.id]: ['zip'] },\n+      }\n+    );\n+    await Promise.all([\n+      new Parse.Query('Test').exists('test').find(),\n+      expectAsync(new Parse.Query('Test').exists('zip').find()).toBeRejectedWith(\n+        new Parse.Error(\n+          Parse.Error.OPERATION_FORBIDDEN,\n+          'This user is not allowed to query zip on class Test'\n+        )\n+      ),\n+    ]);\n+  });\n+\n+  it('query protected field with matchesQuery', async () => {\n+    const user = new Parse.User();\n+    user.setUsername('username1');\n+    user.setPassword('password');\n+    await user.signUp();\n+    const test = new Parse.Object('TestObject', { user });\n+    await test.save();\n+    const subQuery = new Parse.Query(Parse.User);\n+    subQuery.exists('_perishable_token');\n+    await expectAsync(\n+      new Parse.Query('TestObject').matchesQuery('user', subQuery).find()\n+    ).toBeRejectedWith(\n+      new Parse.Error(Parse.Error.INVALID_KEY_NAME, 'Invalid key name: _perishable_token')\n+    );\n+  });\n+\n   it('query with wrongly encoded parameter', done => {\n     rest\n       .create(config, nobody, 'TestParameterEncode', { foo: 'bar' })"
        },
        {
          "filename": "src/Controllers/DatabaseController.js",
          "status": "modified",
          "additions": 34,
          "deletions": 36,
          "patch": "@@ -51,47 +51,43 @@ const transformObjectACL = ({ ACL, ...result }) => {\n   return result;\n };\n \n-const specialQuerykeys = [\n-  '$and',\n-  '$or',\n-  '$nor',\n-  '_rperm',\n-  '_wperm',\n-  '_perishable_token',\n+const specialQueryKeys = ['$and', '$or', '$nor', '_rperm', '_wperm'];\n+const specialMasterQueryKeys = [\n+  ...specialQueryKeys,\n   '_email_verify_token',\n+  '_perishable_token',\n+  '_tombstone',\n   '_email_verify_token_expires_at',\n-  '_account_lockout_expires_at',\n   '_failed_login_count',\n+  '_account_lockout_expires_at',\n+  '_password_changed_at',\n+  '_password_history',\n ];\n \n-const isSpecialQueryKey = key => {\n-  return specialQuerykeys.indexOf(key) >= 0;\n-};\n-\n-const validateQuery = (query: any): void => {\n+const validateQuery = (query: any, isMaster: boolean, update: boolean): void => {\n   if (query.ACL) {\n     throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Cannot query on ACL.');\n   }\n \n   if (query.$or) {\n     if (query.$or instanceof Array) {\n-      query.$or.forEach(validateQuery);\n+      query.$or.forEach(value => validateQuery(value, isMaster, update));\n     } else {\n       throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $or format - use an array value.');\n     }\n   }\n \n   if (query.$and) {\n     if (query.$and instanceof Array) {\n-      query.$and.forEach(validateQuery);\n+      query.$and.forEach(value => validateQuery(value, isMaster, update));\n     } else {\n       throw new Parse.Error(Parse.Error.INVALID_QUERY, 'Bad $and format - use an array value.');\n     }\n   }\n \n   if (query.$nor) {\n     if (query.$nor instanceof Array && query.$nor.length > 0) {\n-      query.$nor.forEach(validateQuery);\n+      query.$nor.forEach(value => validateQuery(value, isMaster, update));\n     } else {\n       throw new Parse.Error(\n         Parse.Error.INVALID_QUERY,\n@@ -111,7 +107,11 @@ const validateQuery = (query: any): void => {\n         }\n       }\n     }\n-    if (!isSpecialQueryKey(key) && !key.match(/^[a-zA-Z][a-zA-Z0-9_\\.]*$/)) {\n+    if (\n+      !key.match(/^[a-zA-Z][a-zA-Z0-9_\\.]*$/) &&\n+      ((!specialQueryKeys.includes(key) && !isMaster && !update) ||\n+        (update && isMaster && !specialMasterQueryKeys.includes(key)))\n+    ) {\n       throw new Parse.Error(Parse.Error.INVALID_KEY_NAME, `Invalid key name: ${key}`);\n     }\n   });\n@@ -204,27 +204,25 @@ const filterSensitiveData = (\n       perms.protectedFields.temporaryKeys.forEach(k => delete object[k]);\n   }\n \n-  if (!isUserClass) {\n-    return object;\n+  if (isUserClass) {\n+    object.password = object._hashed_password;\n+    delete object._hashed_password;\n+    delete object.sessionToken;\n   }\n \n-  object.password = object._hashed_password;\n-  delete object._hashed_password;\n+  if (isMaster) {\n+    return object;\n+  }\n \n-  delete object.sessionToken;\n+  for (const key in object) {\n+    if (key.charAt(0) === '_') {\n+      delete object[key];\n+    }\n+  }\n \n-  if (isMaster) {\n+  if (!isUserClass) {\n     return object;\n   }\n-  delete object._email_verify_token;\n-  delete object._perishable_token;\n-  delete object._perishable_token_expires_at;\n-  delete object._tombstone;\n-  delete object._email_verify_token_expires_at;\n-  delete object._failed_login_count;\n-  delete object._account_lockout_expires_at;\n-  delete object._password_changed_at;\n-  delete object._password_history;\n \n   if (aclGroup.indexOf(object.objectId) > -1) {\n     return object;\n@@ -513,7 +511,7 @@ class DatabaseController {\n           if (acl) {\n             query = addWriteACL(query, acl);\n           }\n-          validateQuery(query);\n+          validateQuery(query, isMaster, true);\n           return schemaController\n             .getOneSchema(className, true)\n             .catch(error => {\n@@ -759,7 +757,7 @@ class DatabaseController {\n         if (acl) {\n           query = addWriteACL(query, acl);\n         }\n-        validateQuery(query);\n+        validateQuery(query, isMaster, false);\n         return schemaController\n           .getOneSchema(className)\n           .catch(error => {\n@@ -1232,7 +1230,7 @@ class DatabaseController {\n                   query = addReadACL(query, aclGroup);\n                 }\n               }\n-              validateQuery(query);\n+              validateQuery(query, isMaster, false);\n               if (count) {\n                 if (!classExists) {\n                   return 0;\n@@ -1744,7 +1742,7 @@ class DatabaseController {\n     return Promise.resolve(response);\n   }\n \n-  static _validateQuery: any => void;\n+  static _validateQuery: (any, boolean, boolean) => void;\n   static filterSensitiveData: (boolean, any[], any, any, any, string, any[], any) => void;\n }\n "
        },
        {
          "filename": "src/RestQuery.js",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -187,6 +187,9 @@ RestQuery.prototype.execute = function (executeOptions) {\n     .then(() => {\n       return this.buildRestWhere();\n     })\n+    .then(() => {\n+      return this.denyProtectedFields();\n+    })\n     .then(() => {\n       return this.handleIncludeAll();\n     })\n@@ -664,6 +667,30 @@ RestQuery.prototype.runCount = function () {\n   });\n };\n \n+RestQuery.prototype.denyProtectedFields = async function () {\n+  if (this.auth.isMaster) {\n+    return;\n+  }\n+  const schemaController = await this.config.database.loadSchema();\n+  const protectedFields =\n+    this.config.database.addProtectedFields(\n+      schemaController,\n+      this.className,\n+      this.restWhere,\n+      this.findOptions.acl,\n+      this.auth,\n+      this.findOptions\n+    ) || [];\n+  for (const key of protectedFields) {\n+    if (this.restWhere[key]) {\n+      throw new Parse.Error(\n+        Parse.Error.OPERATION_FORBIDDEN,\n+        `This user is not allowed to query ${key} on class ${this.className}`\n+      );\n+    }\n+  }\n+};\n+\n // Augments this.response with all pointers on an object\n RestQuery.prototype.handleIncludeAll = function () {\n   if (!this.includeAll) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "28b3edee4e76679dedee9fe115283110fd952678",
            "date": "2025-01-13T15:19:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1b61cab81c4206ce135f1239f17a53dabbc698d7",
            "date": "2025-01-13T14:47:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a0efad88d2177f027ee3709beba13282a6ca9d35",
            "date": "2025-01-12T20:55:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bb1daafef0f5f0b6a9c9b33c9d7e0529fd49afbf",
            "date": "2025-01-12T18:53:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3f0f29b4dfaf6038cb0f0dd205cfa8e1cf92c0c4",
            "date": "2025-01-12T14:04:34Z",
            "author_login": "semantic-release-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. Internal fields (keys used internally by Parse Server, prefixed by `_`) and protected fields (user defined) can be used as query constraints. Internal and protected fields are removed by Parse Server and are only returned to the client using a valid master key. However, using query constraints, these fields can be guessed by enumerating until Parse Server, prior to versions 4.10.14 or 5.2.5, returns a response object. The patch available in versions 4.10.14 and 5.2.5 requires the maser key to use internal and protected fields as query constraints. As a workaround, implement a Parse Cloud Trigger `beforeFind` and manually remove the query constraints.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-07T21:15:08.560",
    "last_modified": "2024-11-21T07:12:20.153",
    "fix_date": "2022-09-02T19:15:09Z"
  },
  "references": [
    {
      "url": "https://github.com/parse-community/parse-server/commit/634c44acd18f6ee6ec60fac89a2b602d92799bec",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/e39d51bd329cd978589983bd659db46e1d45aad4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/issues/8143",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/issues/8144",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/4.10.14",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/5.2.5",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/634c44acd18f6ee6ec60fac89a2b602d92799bec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/e39d51bd329cd978589983bd659db46e1d45aad4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/issues/8143",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/issues/8144",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/4.10.14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/5.2.5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.088985",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "parse-server",
    "owner": "parse-community",
    "created_at": "2016-01-28T18:29:14Z",
    "updated_at": "2025-01-13T16:51:06Z",
    "pushed_at": "2025-01-14T11:16:34Z",
    "size": 73208,
    "stars": 20994,
    "forks": 4781,
    "open_issues": 474,
    "watchers": 20994,
    "has_security_policy": false,
    "default_branch": "alpha",
    "protected_branches": [
      "alpha",
      "beta",
      "release",
      "release-4.x.x",
      "release-5.x.x",
      "release-6.x.x",
      "release-7.x.x"
    ],
    "languages": {
      "JavaScript": 4248231,
      "HTML": 25876,
      "Shell": 7825,
      "Handlebars": 2113,
      "Dockerfile": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:26:59.166995"
  }
}