{
  "cve_id": "CVE-2022-3608",
  "github_data": {
    "repository": "thorsten/phpmyfaq",
    "fix_commit": "37123edd50f854bd141e6fbe65221af2d5cf2677",
    "related_commits": [
      "37123edd50f854bd141e6fbe65221af2d5cf2677",
      "37123edd50f854bd141e6fbe65221af2d5cf2677"
    ],
    "patch_url": "https://github.com/thorsten/phpmyfaq/commit/37123edd50f854bd141e6fbe65221af2d5cf2677.patch",
    "fix_commit_details": {
      "sha": "37123edd50f854bd141e6fbe65221af2d5cf2677",
      "commit_date": "2022-10-09T15:51:32Z",
      "author": {
        "login": "thorsten",
        "type": "User",
        "stats": {
          "total_commits": 7352,
          "average_weekly_commits": 9.19,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 647
        }
      },
      "commit_message": {
        "title": "feat(backup): added verification of backup files",
        "length": 48,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 793,
        "additions": 662,
        "deletions": 131
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -15,6 +15,7 @@ This is a log of major user-visible changes in each phpMyFAQ release.\n - added HTTPS support for local Docker development (Thorsten)\n - added Monolog v2 as logging solution (Thorsten)\n - added REST API v2.2 to fetch groups (Thorsten)\n+- added verification of backup files (Thorsten)\n - migrated from SwiftMailer to Symfony Mailer (Thorsten)\n - updated to Bootstrap v5.1 (Thorsten)\n - updated to TinyMCE v5.10 (Thorsten)"
        },
        {
          "filename": "composer.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@\n     \"ext-filter\": \"*\",\n     \"ext-gd\": \"*\",\n     \"ext-json\": \"*\",\n+    \"ext-sodium\": \"*\",\n     \"ext-xml\": \"*\",\n     \"ext-zip\": \"*\",\n     \"ext-xmlwriter\": \"*\","
        },
        {
          "filename": "composer.lock",
          "status": "modified",
          "additions": 8,
          "deletions": 11,
          "patch": "@@ -4,7 +4,7 @@\n         \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n         \"This file is @generated automatically\"\n     ],\n-    \"content-hash\": \"dba4f03bccb10ea790582b909d306ac5\",\n+    \"content-hash\": \"c4432f3947b3f562463e6633dd744fe6\",\n     \"packages\": [\n         {\n             \"name\": \"abraham/twitteroauth\",\n@@ -290,16 +290,16 @@\n         },\n         {\n             \"name\": \"elasticsearch/elasticsearch\",\n-            \"version\": \"v7.17.0\",\n+            \"version\": \"v7.17.1\",\n             \"source\": {\n                 \"type\": \"git\",\n-                \"url\": \"https://github.com/elastic/elasticsearch-php.git\",\n-                \"reference\": \"1890f9d7fde076b5a3ddcf579a802af05b2e781b\"\n+                \"url\": \"git@github.com:elastic/elasticsearch-php.git\",\n+                \"reference\": \"f1b8918f411b837ce5f6325e829a73518fd50367\"\n             },\n             \"dist\": {\n                 \"type\": \"zip\",\n-                \"url\": \"https://api.github.com/repos/elastic/elasticsearch-php/zipball/1890f9d7fde076b5a3ddcf579a802af05b2e781b\",\n-                \"reference\": \"1890f9d7fde076b5a3ddcf579a802af05b2e781b\",\n+                \"url\": \"https://api.github.com/repos/elastic/elasticsearch-php/zipball/f1b8918f411b837ce5f6325e829a73518fd50367\",\n+                \"reference\": \"f1b8918f411b837ce5f6325e829a73518fd50367\",\n                 \"shasum\": \"\"\n             },\n             \"require\": {\n@@ -349,11 +349,7 @@\n                 \"elasticsearch\",\n                 \"search\"\n             ],\n-            \"support\": {\n-                \"issues\": \"https://github.com/elastic/elasticsearch-php/issues\",\n-                \"source\": \"https://github.com/elastic/elasticsearch-php/tree/v7.17.0\"\n-            },\n-            \"time\": \"2022-02-03T13:40:04+00:00\"\n+            \"time\": \"2022-09-30T12:28:55+00:00\"\n         },\n         {\n             \"name\": \"erusev/parsedown\",\n@@ -4847,6 +4843,7 @@\n         \"ext-filter\": \"*\",\n         \"ext-gd\": \"*\",\n         \"ext-json\": \"*\",\n+        \"ext-sodium\": \"*\",\n         \"ext-xml\": \"*\",\n         \"ext-zip\": \"*\",\n         \"ext-xmlwriter\": \"*\""
        },
        {
          "filename": "phpmyfaq/admin/backup.export.php",
          "status": "modified",
          "additions": 23,
          "deletions": 41,
          "patch": "@@ -15,6 +15,7 @@\n  * @since     2009-08-18\n  */\n \n+use phpMyFAQ\\Backup;\n use phpMyFAQ\\Database;\n use phpMyFAQ\\Database\\DatabaseHelper;\n use phpMyFAQ\\Filter;\n@@ -49,11 +50,12 @@\n }\n \n if ($user->perm->hasPermission($user->getUserId(), 'backup')) {\n-    $tables = $tableNames = $faqConfig->getDb()->getTableNames(Database::getTablePrefix());\n-    $tablePrefix = (Database::getTablePrefix() !== '') ? Database::getTablePrefix() . '.phpmyfaq' : 'phpmyfaq';\n+    $tables = $faqConfig->getDb()->getTableNames(Database::getTablePrefix());\n     $tableNames = '';\n-    $majorVersion = substr($faqConfig->getVersion(), 0, 3);\n+\n     $dbHelper = new DatabaseHelper($faqConfig);\n+    $backup = new Backup($faqConfig, $dbHelper);\n+\n     $httpHelper = new HttpHelper();\n     $httpHelper->addHeader();\n     $httpHelper->addExtraHeader('Content-Type: application/octet-stream');\n@@ -82,49 +84,29 @@\n             break;\n     }\n \n-    $text[] = '-- pmf' . $majorVersion . ': ' . $tableNames;\n-    $text[] = '-- DO NOT REMOVE THE FIRST LINE!';\n-    $text[] = '-- pmftableprefix: ' . Database::getTablePrefix();\n-    $text[] = '-- DO NOT REMOVE THE LINES ABOVE!';\n-    $text[] = '-- Otherwise this backup will be broken.';\n-\n     switch ($action) {\n         case 'backup_content':\n-            $header = sprintf(\n-                'Content-Disposition: attachment; filename=%s',\n-                urlencode(\n-                    sprintf(\n-                        '%s-data.%s.sql',\n-                        $tablePrefix,\n-                        date('Y-m-d-H-i-s')\n-                    )\n-                )\n-            );\n-            $httpHelper->addExtraHeader($header);\n-            foreach (explode(' ', $tableNames) as $table) {\n-                echo implode(\"\\r\\n\", $text);\n-                if ('' !== $table) {\n-                    $text = $dbHelper->buildInsertQueries('SELECT * FROM ' . $table, $table);\n-                }\n+            $backupQueries = $backup->generateBackupQueries($tableNames);\n+            try {\n+                $backupFileName = $backup->createBackup(Backup::BACKUP_TYPE_DATA, $backupQueries);\n+                $header = sprintf('Content-Disposition: attachment; filename=%s', urlencode($backupFileName));\n+                $httpHelper->addExtraHeader($header);\n+\n+                echo $backupQueries;\n+            } catch (SodiumException $e) {\n+                // Handle exception\n             }\n             break;\n         case 'backup_logs':\n-            $header = sprintf(\n-                'Content-Disposition: attachment; filename=%s',\n-                urlencode(\n-                    sprintf(\n-                        '%s-logs.%s.sql',\n-                        $tablePrefix,\n-                        date('Y-m-d-H-i-s')\n-                    )\n-                )\n-            );\n-            $httpHelper->addExtraHeader($header);\n-            foreach (explode(' ', $tableNames) as $table) {\n-                echo implode(\"\\r\\n\", $text);\n-                if ('' !== $table) {\n-                    $text = $dbHelper->buildInsertQueries('SELECT * FROM ' . $table, $table);\n-                }\n+            $backupQueries = $backup->generateBackupQueries($tableNames);\n+            try {\n+                $backupFileName = $backup->createBackup(Backup::BACKUP_TYPE_LOGS, $backupQueries);\n+                $header = sprintf('Content-Disposition: attachment; filename=%s', urlencode($backupFileName));\n+                $httpHelper->addExtraHeader($header);\n+\n+                echo $backupQueries;\n+            } catch (SodiumException $e) {\n+                // Handle exception\n             }\n             break;\n     }"
        },
        {
          "filename": "phpmyfaq/admin/backup.import.php",
          "status": "modified",
          "additions": 30,
          "deletions": 7,
          "patch": "@@ -15,11 +15,13 @@\n  * @since     2003-02-24\n  */\n \n+use phpMyFAQ\\Backup;\n use phpMyFAQ\\Component\\Alert;\n use phpMyFAQ\\Database;\n use phpMyFAQ\\Database\\DatabaseHelper;\n use phpMyFAQ\\Filter;\n use phpMyFAQ\\Strings;\n+use phpMyFAQ\\Translation;\n \n if (!defined('IS_VALID_PHPMYFAQ')) {\n     http_response_code(400);\n@@ -37,7 +39,7 @@\n     <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n         <h1 class=\"h2\">\n             <i aria-hidden=\"true\" class=\"fa fa-download\"></i>\n-            <?= $PMF_LANG['ad_csv_rest'] ?>\n+            <?= Translation::get('ad_csv_rest') ?>\n         </h1>\n     </div>\n <?php\n@@ -47,20 +49,38 @@\n         $ok = 1;\n         $fileInfo = new finfo(FILEINFO_MIME_ENCODING);\n \n+        $dbHelper = new DatabaseHelper($faqConfig);\n+        $backup = new Backup($faqConfig, $dbHelper);\n+\n         if ('utf-8' !== $fileInfo->file($_FILES['userfile']['tmp_name'])) {\n             echo 'This file is not UTF-8 encoded.<br>';\n             $ok = 0;\n         }\n+\n         $handle = fopen($_FILES['userfile']['tmp_name'], 'r');\n         $backupData = fgets($handle, 65536);\n         $versionFound = Strings::substr($backupData, 0, 9);\n         $versionExpected = '-- pmf' . substr($faqConfig->getVersion(), 0, 3);\n         $queries = [];\n \n+        $fileName = $_FILES['userfile']['name'];\n+\n+        try {\n+            $verification = $backup->verifyBackup(file_get_contents($_FILES['userfile']['tmp_name']), $fileName);\n+            if ($verification) {\n+                $ok = 1;\n+            } else {\n+                $ok = 0;\n+            }\n+        } catch (SodiumException $e) {\n+            echo 'This file cannot be verified.<br>';\n+            $ok = 0;\n+        }\n+\n         if ($versionFound !== $versionExpected) {\n             printf(\n                 '%s (Version check failure: \"%s\" found, \"%s\" expected)',\n-                $PMF_LANG['ad_csv_no'],\n+                Translation::get('ad_csv_no'),\n                 $versionFound,\n                 $versionExpected\n             );\n@@ -78,7 +98,7 @@\n \n         if ($ok == 1) {\n             $tablePrefix = '';\n-            printf(\"<p>%s</p>\\n\", $PMF_LANG['ad_csv_prepare']);\n+            printf(\"<p>%s</p>\\n\", Translation::get('ad_csv_prepare'));\n             while ($backupData = fgets($handle, 65536)) {\n                 $backupData = trim($backupData);\n                 $backupPrefixPattern = '-- pmftableprefix:';\n@@ -93,11 +113,14 @@\n \n             $k = 0;\n             $g = 0;\n-            printf(\"<p>%s</p>\\n\", $PMF_LANG['ad_csv_process']);\n+\n+            printf(\"<p>%s</p>\\n\", Translation::get('ad_csv_process'));\n+\n             $numTables = count($queries);\n             $kg = '';\n             for ($i = 0; $i < $numTables; ++$i) {\n                 $queries[$i] = DatabaseHelper::alignTablePrefix($queries[$i], $tablePrefix, Database::getTablePrefix());\n+\n                 $kg = $faqConfig->getDb()->query($queries[$i]);\n                 if (!$kg) {\n                     printf(\n@@ -119,9 +142,9 @@\n             printf(\n                 '<p class=\"alert alert-success\">%d %s %d %s</p>',\n                 $g,\n-                $PMF_LANG['ad_csv_of'],\n+                Translation::get('ad_csv_of'),\n                 $numTables,\n-                $PMF_LANG['ad_csv_suc']\n+                Translation::get('ad_csv_suc')\n             );\n         }\n     } else {\n@@ -138,5 +161,5 @@\n         echo Alert::danger('ad_csv_no', $errorMessage);\n     }\n } else {\n-    echo $PMF_LANG['err_NotAuth'];\n+    echo Translation::get('err_NotAuth');\n }"
        },
        {
          "filename": "phpmyfaq/assets/themes/default/scss/_mixins.scss",
          "status": "added",
          "additions": 172,
          "deletions": 0,
          "patch": "@@ -0,0 +1,172 @@\n+@mixin text-shadow($string: 0 1px 3px rgba(0, 0, 0, 0.25)) {\n+  text-shadow: $string;\n+}\n+@mixin box-shadow($string) {\n+  -webkit-box-shadow: $string;\n+  -moz-box-shadow: $string;\n+  box-shadow: $string;\n+}\n+\n+@mixin box-sizing($type: border-box) {\n+  -webkit-box-sizing: $type;\n+  -moz-box-sizing: $type;\n+  box-sizing: $type;\n+}\n+\n+@mixin border-radius($radius: 5px) {\n+  -webkit-border-radius: $radius;\n+  -moz-border-radius: $radius;\n+  -ms-border-radius: $radius;\n+  -o-border-radius: $radius;\n+  border-radius: $radius;\n+\n+  -moz-background-clip: padding;\n+  -webkit-background-clip: padding-box;\n+  background-clip: padding-box;\n+}\n+@mixin border-radiuses($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {\n+  -webkit-border-top-right-radius: $topright;\n+  -webkit-border-bottom-right-radius: $bottomright;\n+  -webkit-border-bottom-left-radius: $bottomleft;\n+  -webkit-border-top-left-radius: $topleft;\n+\n+  -moz-border-radius-topright: $topright;\n+  -moz-border-radius-bottomright: $bottomright;\n+  -moz-border-radius-bottomleft: $bottomleft;\n+  -moz-border-radius-topleft: $topleft;\n+\n+  border-top-right-radius: $topright;\n+  border-bottom-right-radius: $bottomright;\n+  border-bottom-left-radius: $bottomleft;\n+  border-top-left-radius: $topleft;\n+\n+  -moz-background-clip: padding;\n+  -webkit-background-clip: padding-box;\n+  background-clip: padding-box;\n+}\n+\n+@mixin opacity($opacity: 0.5) {\n+  -webkit-opacity: $opacity;\n+  -moz-opacity: $opacity;\n+  opacity: $opacity;\n+}\n+\n+@mixin gradient($startColor: #eee, $endColor: white) {\n+  background-color: $startColor;\n+  background: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));\n+  background: -webkit-linear-gradient(top, $startColor, $endColor);\n+  background: -moz-linear-gradient(top, $startColor, $endColor);\n+  background: -ms-linear-gradient(top, $startColor, $endColor);\n+  background: -o-linear-gradient(top, $startColor, $endColor);\n+}\n+@mixin horizontal-gradient($startColor: #eee, $endColor: white) {\n+  background-color: $startColor;\n+  background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));\n+  background-image: -webkit-linear-gradient(left, $startColor, $endColor);\n+  background-image: -moz-linear-gradient(left, $startColor, $endColor);\n+  background-image: -ms-linear-gradient(left, $startColor, $endColor);\n+  background-image: -o-linear-gradient(left, $startColor, $endColor);\n+}\n+\n+@mixin animation($name, $duration: 300ms, $delay: 0, $ease: ease) {\n+  -webkit-animation: $name $duration $delay $ease;\n+  -moz-animation: $name $duration $delay $ease;\n+  -ms-animation: $name $duration $delay $ease;\n+}\n+\n+@mixin transition($transition) {\n+  -webkit-transition: $transition;\n+  -moz-transition: $transition;\n+  -ms-transition: $transition;\n+  -o-transition: $transition;\n+}\n+@mixin transform($string) {\n+  -webkit-transform: $string;\n+  -moz-transform: $string;\n+  -ms-transform: $string;\n+  -o-transform: $string;\n+}\n+@mixin scale($factor) {\n+  -webkit-transform: scale($factor);\n+  -moz-transform: scale($factor);\n+  -ms-transform: scale($factor);\n+  -o-transform: scale($factor);\n+}\n+@mixin rotate($deg) {\n+  -webkit-transform: rotate($deg);\n+  -moz-transform: rotate($deg);\n+  -ms-transform: rotate($deg);\n+  -o-transform: rotate($deg);\n+}\n+@mixin skew($deg, $deg2) {\n+  -webkit-transform: skew($deg, $deg2);\n+  -moz-transform: skew($deg, $deg2);\n+  -ms-transform: skew($deg, $deg2);\n+  -o-transform: skew($deg, $deg2);\n+}\n+@mixin translate($x, $y: 0) {\n+  -webkit-transform: translate($x, $y);\n+  -moz-transform: translate($x, $y);\n+  -ms-transform: translate($x, $y);\n+  -o-transform: translate($x, $y);\n+}\n+@mixin translate3d($x, $y: 0, $z: 0) {\n+  -webkit-transform: translate3d($x, $y, $z);\n+  -moz-transform: translate3d($x, $y, $z);\n+  -ms-transform: translate3d($x, $y, $z);\n+  -o-transform: translate3d($x, $y, $z);\n+}\n+@mixin perspective($value: 1000) {\n+  -webkit-perspective: $value;\n+  -moz-perspective: $value;\n+  -ms-perspective: $value;\n+  perspective: $value;\n+}\n+@mixin transform-origin($x: center, $y: center) {\n+  -webkit-transform-origin: $x $y;\n+  -moz-transform-origin: $x $y;\n+  -ms-transform-origin: $x $y;\n+  -o-transform-origin: $x $y;\n+}\n+\n+@mixin reset-box-sizing($size: content-box) {\n+  &,\n+  *,\n+  *:before,\n+  *:after {\n+    @include box-sizing($size);\n+  }\n+}\n+\n+@mixin truncate($max-width: 250px) {\n+  max-width: $max-width;\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+}\n+\n+@mixin background-size($string: contain) {\n+  -webkit-background-size: $string;\n+  -moz-background-size: $string;\n+  -o-background-size: $string;\n+  background-size: $string;\n+}\n+\n+@mixin placeholder($color: #999) {\n+  &::-webkit-input-placeholder {\n+    /* WebKit browsers */\n+    color: $color;\n+  }\n+  &:-moz-placeholder {\n+    /* Mozilla Firefox 4 to 18 */\n+    color: $color;\n+  }\n+  &::-moz-placeholder {\n+    /* Mozilla Firefox 19+ */\n+    color: $color;\n+  }\n+  &:-ms-input-placeholder {\n+    /* Internet Explorer 10+ */\n+    color: $color;\n+  }\n+}"
        },
        {
          "filename": "phpmyfaq/assets/themes/default/scss/_theme.scss",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+$color-primary: #fd7e14;\n+$color-green: #75c181;\n+$color-red: #f77b6b;\n+$color-blue: #58bbee;\n+$color-orange: #f88c30;\n+$color-pink: #ea5395;\n+$color-purple: #8a40a7;\n+\n+$text-color: #494d55;\n+$text-color-secondary: lighten($text-color, 10%);\n+$text-grey: lighten($text-color-secondary, 25%);\n+\n+$grey: lighten($text-color-secondary, 25%);\n+$light-grey: #c3c3c3;\n+$dark-grey: #666;\n+$black: #000;\n+$smoky-white: #f5f5f5;\n+$smoky-grey: #f9f9fb;\n+$divider: #f0f0f0;\n+\n+$new: #60a823;\n+$error: #e65348;\n+$facebook: #3b5998;\n+$twitter: #55acee;\n+$google: #dd4b39;\n+$github: #444;"
        },
        {
          "filename": "phpmyfaq/assets/themes/default/scss/layout/_startpage.scss",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+"
        },
        {
          "filename": "phpmyfaq/setup/update.php",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -395,6 +395,7 @@\n     //\n     if (version_compare($version, '3.2.0-alpha', '<=')) {\n         // Azure AD support\n+        $faqConfig->add('security.enableSignInWithMicrosoft', false);\n         if ('sqlite3' === $DB['type']) {\n             $query[] = 'ALTER TABLE ' . $prefix . 'faquser \n                 ADD COLUMN refresh_token TEXT NULL DEFAULT NULL,\n@@ -408,7 +409,16 @@\n                 ADD code_verifier VARCHAR(255) NULL DEFAULT NULL,\n                 ADD jwt TEXT NULL DEFAULT NULL';\n         }\n-        $faqConfig->add('security.enableSignInWithMicrosoft', false);\n+\n+        // New backup\n+        $query[] = 'CREATE TABLE ' . $prefix . 'faqbackup (\n+            id INT(11) NOT NULL,\n+            filename VARCHAR(255) NOT NULL,\n+            authkey VARCHAR(255) NOT NULL,\n+            authcode VARCHAR(255) NOT NULL,\n+            created timestamp NOT NULL,\n+            PRIMARY KEY (id))';\n+\n \n         if ('sqlserv' === $DB['type']) {\n             // queries to update VARCHAR -> NVARCHAR on MS SQL Server"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Backup.php",
          "status": "added",
          "additions": 147,
          "deletions": 0,
          "patch": "@@ -0,0 +1,147 @@\n+<?php\n+\n+/**\n+ * Provides methods for phpMyFAQ backups\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at https://mozilla.org/MPL/2.0/.\n+ *\n+ * @package   phpMyFAQ\n+ * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n+ * @copyright 2022 phpMyFAQ Team\n+ * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n+ * @link      https://www.phpmyfaq.de\n+ * @since     2022-10-08\n+ */\n+\n+namespace phpMyFAQ;\n+\n+use phpMyFAQ\\Core\\Exception;\n+use phpMyFAQ\\Database\\DatabaseHelper;\n+use SodiumException;\n+\n+/**\n+ * Class Backup\n+ *\n+ * @package phpMyFAQ\n+ */\n+class Backup\n+{\n+    public const BACKUP_TYPE_DATA = 'data';\n+    public const BACKUP_TYPE_LOGS = 'logs';\n+\n+    /** @var Configuration */\n+    private Configuration $config;\n+\n+    /** @var DatabaseHelper */\n+    private DatabaseHelper $databaseHelper;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param Configuration  $config\n+     * @param DatabaseHelper $databaseHelper\n+     */\n+    public function __construct(Configuration $config, DatabaseHelper $databaseHelper)\n+    {\n+        $this->config = $config;\n+        $this->databaseHelper = $databaseHelper;\n+    }\n+\n+    /**\n+     * @param string $backupType\n+     * @param string $backupFile\n+     * @return string\n+     * @throws SodiumException\n+     */\n+    public function createBackup(string $backupType, string $backupFile): string\n+    {\n+        $backupDate = date('Y-m-d-H-i-s');\n+\n+        $fileNamePrefix = (Database::getTablePrefix() !== '') ? Database::getTablePrefix() . '.phpmyfaq' : 'phpmyfaq';\n+        $fileName = sprintf('%s-%s.%s.sql', $fileNamePrefix, $backupType, $backupDate);\n+\n+        $authKey = sodium_crypto_auth_keygen();\n+        $authCode = sodium_crypto_auth($backupFile, $authKey);\n+\n+        $query = sprintf(\n+            \"INSERT INTO %sfaqbackup (id, filename, authkey, authcode, created) VALUES (%d, '%s', '%s', '%s', '%s')\",\n+            Database::getTablePrefix(),\n+            $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqbackup', 'id'),\n+            $this->config->getDb()->escape($fileName),\n+            $this->config->getDb()->escape(sodium_bin2hex($authKey)),\n+            $this->config->getDb()->escape(sodium_bin2hex($authCode)),\n+            $backupDate\n+        );\n+\n+        $this->config->getDb()->query($query);\n+\n+        return $fileName;\n+    }\n+\n+    /**\n+     * @param string $backup\n+     * @param string $backupFileName\n+     * @return bool\n+     * @throws SodiumException\n+     */\n+    public function verifyBackup(string $backup, string $backupFileName): bool\n+    {\n+        $query = sprintf(\n+            \"SELECT id, filename, authkey, authcode, created FROM %sfaqbackup WHERE filename = '%s'\",\n+            Database::getTablePrefix(),\n+            $this->config->getDb()->escape($backupFileName),\n+        );\n+\n+        $result = $this->config->getDb()->query($query);\n+\n+        if ($this->config->getDb()->numRows($result) > 0) {\n+            $row = $this->config->getDb()->fetchObject($result);\n+\n+            return sodium_crypto_auth_verify(\n+                sodium_hex2bin($row->authcode),\n+                $backup,\n+                sodium_hex2bin($row->authkey)\n+            );\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * @param string $tableNames\n+     * @return string\n+     */\n+    public function generateBackupQueries(string $tableNames): string\n+    {\n+        $backup = implode(\"\\r\\n\", $this->getBackupHeader($tableNames));\n+\n+        foreach (explode(' ', $tableNames) as $table) {\n+            if ('' !== $table) {\n+                $backup .= implode(\n+                    \"\\r\\n\",\n+                    $this->databaseHelper->buildInsertQueries('SELECT * FROM ' . $table, $table)\n+                );\n+            }\n+        }\n+\n+        return $backup;\n+    }\n+\n+    /**\n+     * Returns the backup file header\n+     * @param string $tableNames\n+     * @return string[]\n+     */\n+    private function getBackupHeader(string $tableNames): array\n+    {\n+        return [\n+            sprintf('-- pmf%s: %s', substr($this->config->getVersion(), 0, 3), $tableNames),\n+            '-- DO NOT REMOVE THE FIRST LINE!',\n+            '-- pmftableprefix: ' . Database::getTablePrefix(),\n+            '-- DO NOT REMOVE THE LINES ABOVE!',\n+            '-- Otherwise this backup will be broken.'\n+        ];\n+    }\n+}"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Database.php",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -141,13 +141,15 @@ public static function checkOnEmptyTable(string $tableName): bool\n      *\n      * @param string $method\n      */\n-    public static function errorPage(string $method)\n+    public static function errorPage(string $method): void\n     {\n         echo '<!DOCTYPE html>\n             <html lang=\"en\" class=\"no-js\">\n             <head>\n                 <meta charset=\"utf-8\">\n                 <title>Fatal phpMyFAQ Error</title>\n+                <link href=\"assets/dist/styles.css\" rel=\"stylesheet\">\n+                <script src=\"assets/dist/frontend.js\"></script>\n             </head>\n             <body>\n                 <div class=\"container\">\n@@ -163,7 +165,7 @@ public static function errorPage(string $method)\n      *\n      * @param string $tablePrefix\n      */\n-    public static function setTablePrefix(string $tablePrefix)\n+    public static function setTablePrefix(string $tablePrefix): void\n     {\n         self::$tablePrefix = $tablePrefix;\n     }"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Database/DatabaseHelper.php",
          "status": "modified",
          "additions": 12,
          "deletions": 11,
          "patch": "@@ -7,13 +7,13 @@\n  * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n  * obtain one at https://mozilla.org/MPL/2.0/.\n  *\n- * @package phpMyFAQ\n- * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n- * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n+ * @package   phpMyFAQ\n+ * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n+ * @author    Matteo Scaramuccia <matteo@phpmyfaq.de>\n  * @copyright 2012-2022 phpMyFAQ Team\n- * @license https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n- * @link https://www.phpmyfaq.de\n- * @since 2012-04-12\n+ * @license   https://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n+ * @link      https://www.phpmyfaq.de\n+ * @since     2012-04-12\n  */\n \n namespace phpMyFAQ\\Database;\n@@ -28,10 +28,8 @@\n  */\n class DatabaseHelper\n {\n-    /**\n-     * @var Configuration\n-     */\n-    private $config;\n+    /** @var Configuration */\n+    private Configuration $config;\n \n     /**\n      * Constructor.\n@@ -103,7 +101,7 @@ private static function alignTablePrefixByPattern(\n      *\n      * @param string $query\n      * @param string $table\n-     * @return array\n+     * @return string[]\n      */\n     public function buildInsertQueries(string $query, string $table): array\n     {\n@@ -118,6 +116,9 @@ public function buildInsertQueries(string $query, string $table): array\n             $p1 = [];\n             $p2 = [];\n             foreach ($row as $key => $val) {\n+                if (is_int($key)) {\n+                    continue; // Fix for SQLite3\n+                }\n                 $p1[] = $key;\n                 if ('rights' != $key && is_numeric($val)) {\n                     $p2[] = $val;"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Export.php",
          "status": "modified",
          "additions": 13,
          "deletions": 17,
          "patch": "@@ -30,14 +30,14 @@\n  */\n class Export\n {\n-    /** @var Faq */\n-    protected $faq = null;\n+    /** @var Faq|null */\n+    protected ?Faq $faq = null;\n \n-    /** @var Category */\n-    protected $category = null;\n+    /** @var Category|null */\n+    protected ?Category $category = null;\n \n-    /** @var Configuration */\n-    protected $config = null;\n+    /** @var Configuration|null */\n+    protected ?Configuration $config = null;\n \n     /**\n      * Factory.\n@@ -49,18 +49,14 @@ class Export\n      * @return mixed\n      * @throws \\Exception\n      */\n-    public static function create(Faq $faq, Category $category, Configuration $config, string $mode = 'pdf')\n+    public static function create(Faq $faq, Category $category, Configuration $config, string $mode = 'pdf'): mixed\n     {\n-        switch ($mode) {\n-            case 'json':\n-                return new Json($faq, $category, $config);\n-            case 'pdf':\n-                return new Pdf($faq, $category, $config);\n-            case 'html5':\n-                return new Html5($faq, $category, $config);\n-            default:\n-                throw new Exception('Export not implemented!');\n-        }\n+        return match ($mode) {\n+            'json' => new Json($faq, $category, $config),\n+            'pdf' => new Pdf($faq, $category, $config),\n+            'html5' => new Html5($faq, $category, $config),\n+            default => throw new Exception('Export not implemented!'),\n+        };\n     }\n \n     /**"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Filesystem.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -29,27 +29,27 @@ class Filesystem\n     /**\n      * @var string\n      */\n-    private $rootPath;\n+    private string $rootPath;\n \n     /**\n      * @var string\n      */\n-    private $path;\n+    private string $path;\n \n     /**\n      * @var string[]\n      */\n-    private $folders = [];\n+    private array $folders = [];\n \n     /**\n      * Constructor, sets the root path of the master phpMyFAQ installation.\n      *\n      * @param string $rootPath\n      */\n-    public function __construct($rootPath = '')\n+    public function __construct(string $rootPath = '')\n     {\n         if (empty($rootPath)) {\n-            $this->rootPath = dirname(dirname(__DIR__));\n+            $this->rootPath = dirname(__DIR__, 2);\n         } else {\n             $this->rootPath = $rootPath;\n         }\n@@ -141,7 +141,7 @@ public function recursiveCopy(string $source, string $dest): bool\n      *                          specified in the pathname.\n      * @return bool\n      */\n-    public function createDirectory(string $pathname, $mode = 0777, $recursive = false): bool\n+    public function createDirectory(string $pathname, int $mode = 0777, bool $recursive = false): bool\n     {\n         if (is_dir($pathname)) {\n             return true; // Directory already exists"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Helper/CategoryHelper.php",
          "status": "modified",
          "additions": 10,
          "deletions": 21,
          "patch": "@@ -342,31 +342,20 @@ public function renderStartPageCategories(array $categories): string\n         }\n \n         $decks = '';\n-        $key = 1;\n         foreach ($categories as $category) {\n-            $decks .= '<div class=\"card mb-4\"><a href=\"' . $category['url'] . '\">';\n+            $decks .= '<div class=\"phpmyfaq-startpage-item phpmyfaq-startpage-item-primary col-lg-4 col-6\">';\n+            $decks .= ' <div class=\"phpmyfaq-startpage-item-inner\">';\n+            $decks .= '   <div class=\"icon-holder\">';\n             if ('' !== $category['image']) {\n                 $decks .= '<img class=\"card-img-top embed-responsive-item\" width=\"200\" alt=\"' .\n-                $category['name'] . '\" src=\"' . $category['image'] . '\" />';\n+                    $category['name'] . '\" src=\"' . $category['image'] . '\" />';\n             }\n-            $decks .= '</a>' .\n-                '<div class=\"card-body\">' .\n-                '<h4 class=\"card-title text-center\">' .\n-                '<a href=\"' . $category['url'] . '\">' . $category['name'] . '</a>' .\n-                '</h4>' .\n-                '<p class=\"card-text\">' . $category['description'] . '</p>' .\n-                '</div>' .\n-                '</div>';\n-            if ($key % 2 === 0) {\n-                $decks .= '<div class=\"w-100 d-none d-sm-block d-md-none\"></div>';\n-            }\n-            if ($key % 3 === 0) {\n-                $decks .= '<div class=\"w-100 d-none d-md-block d-lg-none\"></div>';\n-            }\n-            if ($key % 4 === 0) {\n-                $decks .= '<div class=\"w-100 d-none d-lg-block d-xl-block\"></div>';\n-            }\n-            $key++;\n+            $decks .= '     </div>';\n+            $decks .= '     <h3 class=\"title\">' . $category['name'] . '</h3>';\n+            $decks .= '     <p class=\"intro\">' . $category['description'] . '</p>';\n+            $decks .= '     <a class=\"link\" href=\"' . $category['url'] . '\"><span></span></a>';\n+            $decks .= ' </div>';\n+            $decks .= '</div>';\n         }\n \n         return $decks;"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Instance/Database/Mysqli.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -57,6 +57,14 @@ class Mysqli extends Database implements Driver\n             contents BLOB NOT NULL,\n             PRIMARY KEY (virtual_hash)) DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci',\n \n+        'faqbackup' => 'CREATE TABLE %sfaqbackup (\n+            id INT(11) NOT NULL,\n+            filename VARCHAR(255) NOT NULL,\n+            authkey VARCHAR(255) NOT NULL,\n+            authcode VARCHAR(255) NOT NULL,\n+            created timestamp NOT NULL,\n+            PRIMARY KEY (id))',\n+\n         'faqcaptcha' => 'CREATE TABLE %sfaqcaptcha (\n             id VARCHAR(6) NOT NULL,\n             useragent VARCHAR(255) NOT NULL,"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Instance/Database/Pgsql.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -59,6 +59,14 @@ class Pgsql extends Database implements Driver\n             contents BYTEA,\n             PRIMARY KEY (virtual_hash))',\n \n+        'faqbackup' => 'CREATE TABLE %sfaqbackup (\n+            id INT(11) NOT NULL,\n+            filename VARCHAR(255) NOT NULL,\n+            authkey VARCHAR(255) NOT NULL,\n+            authcode VARCHAR(255) NOT NULL,\n+            created timestamp NOT NULL,\n+            PRIMARY KEY (id))',\n+\n         'faqcaptcha' => 'CREATE TABLE %sfaqcaptcha (\n             id VARCHAR(6) NOT NULL,\n             useragent VARCHAR(255) NOT NULL,"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Instance/Database/Sqlite3.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -57,6 +57,14 @@ class Sqlite3 extends Database implements Driver\n             contents TEXT NOT NULL,\n             PRIMARY KEY (virtual_hash))',\n \n+        'faqbackup' => 'CREATE TABLE %sfaqbackup (\n+            id INT(11) NOT NULL,\n+            filename VARCHAR(255) NOT NULL,\n+            authkey VARCHAR(255) NOT NULL,\n+            authcode VARCHAR(255) NOT NULL,\n+            created timestamp NOT NULL,\n+            PRIMARY KEY (id))',\n+\n         'faqcaptcha' => 'CREATE TABLE %sfaqcaptcha (\n             id VARCHAR(6) NOT NULL,\n             useragent VARCHAR(255) NOT NULL,"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Instance/Database/Sqlsrv.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -57,6 +57,14 @@ class Sqlsrv extends Database implements Driver\n             contents NVARCHAR(MAX) NOT NULL,\n             PRIMARY KEY (virtual_hash))',\n \n+        'faqbackup' => 'CREATE TABLE %sfaqbackup (\n+            id INT(11) NOT NULL,\n+            filename VARCHAR(255) NOT NULL,\n+            authkey VARCHAR(255) NOT NULL,\n+            authcode VARCHAR(255) NOT NULL,\n+            created timestamp NOT NULL,\n+            PRIMARY KEY (id))',\n+\n         'faqcaptcha' => 'CREATE TABLE %sfaqcaptcha (\n             id NVARCHAR(6) NOT NULL,\n             useragent NVARCHAR(255) NOT NULL,"
        },
        {
          "filename": "phpmyfaq/src/phpMyFAQ/Instance/Setup.php",
          "status": "modified",
          "additions": 13,
          "deletions": 13,
          "patch": "@@ -31,7 +31,7 @@ class Setup\n     /**\n      * @var string\n      */\n-    private $rootDir;\n+    private string $rootDir;\n \n     /**\n      * Setup constructor.\n@@ -46,7 +46,7 @@ public function __construct()\n      *\n      * @param string $rootDir\n      */\n-    public function setRootDir($rootDir)\n+    public function setRootDir(string $rootDir): void\n     {\n         $this->rootDir = $rootDir;\n     }\n@@ -73,9 +73,9 @@ public function createAnonymousUser(Configuration $faqConfig): void\n      * Checks basic folders and creates them if necessary.\n      *\n      * @param  string[] $dirs\n-     * @return array\n+     * @return string[]\n      */\n-    public function checkDirs(array $dirs)\n+    public function checkDirs(array $dirs): array\n     {\n         $failedDirs = [];\n \n@@ -113,11 +113,11 @@ public function checkDirs(array $dirs)\n     /**\n      * Creates the file /config/database.php.\n      *\n-     * @param  array  $data   Array with database credentials\n-     * @param  string $folder Folder\n+     * @param  int[]|string[] $data   Array with database credentials\n+     * @param  string         $folder Folder\n      * @return int|bool\n      */\n-    public function createDatabaseFile(array $data, $folder = '/config')\n+    public function createDatabaseFile(array $data, string $folder = '/config'): int|bool\n     {\n         return file_put_contents(\n             $this->rootDir . $folder . '/database.php',\n@@ -136,11 +136,11 @@ public function createDatabaseFile(array $data, $folder = '/config')\n     /**\n      * Creates the file /config/ldap.php.\n      *\n-     * @param  array  $data   Array with LDAP credentials\n-     * @param  string $folder Folder\n+     * @param  int[]|string[] $data   Array with LDAP credentials\n+     * @param  string         $folder Folder\n      * @return int|bool\n      */\n-    public function createLdapFile(array $data, string $folder = '/config')\n+    public function createLdapFile(array $data, string $folder = '/config'): int|bool\n     {\n         return file_put_contents(\n             $this->rootDir . $folder . '/config/ldap.php',\n@@ -157,11 +157,11 @@ public function createLdapFile(array $data, string $folder = '/config')\n     /**\n      * Creates the file /config/elasticsearch.php\n      *\n-     * @param  array  $data   Array with LDAP credentials\n-     * @param  string $folder Folder\n+     * @param  int[]|string[] $data   Array with Elasticsearch credentials\n+     * @param  string         $folder Folder\n      * @return int|bool\n      */\n-    public function createElasticsearchFile(array $data, string $folder = '/config')\n+    public function createElasticsearchFile(array $data, string $folder = '/config'): int|bool\n     {\n         return file_put_contents(\n             $this->rootDir . $folder . '/config/elasticsearch.php',"
        },
        {
          "filename": "tests/phpMyFAQ/ApiTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -13,7 +13,6 @@\n  */\n class ApiTest extends TestCase\n {\n-\n     /** @var Configuration */\n     private Configuration $configuration;\n \n@@ -29,6 +28,7 @@ protected function setUp(): void\n \n     /**\n      * @testdox return the available versions\n+     * @throws Core\\Exception\n      */\n     public function testGetVersions(): void\n     {\n@@ -52,6 +52,7 @@ public function testGetVersions(): void\n \n     /**\n      * @testdox return the current verification hashes\n+     * @throws Core\\Exception\n      */\n     public function testGetVerificationIssues(): void\n     {"
        },
        {
          "filename": "tests/phpMyFAQ/BackupTest.php",
          "status": "added",
          "additions": 87,
          "deletions": 0,
          "patch": "@@ -0,0 +1,87 @@\n+<?php\n+\n+namespace phpMyFAQ;\n+\n+use phpMyFAQ\\Database\\DatabaseHelper;\n+use phpMyFAQ\\Database\\Sqlite3;\n+use PHPUnit\\Framework\\TestCase;\n+use SodiumException;\n+\n+/**\n+ * Class BackupTest\n+ *\n+ * @testdox Backup should\n+ * @package phpMyFAQ\n+ */\n+class BackupTest extends TestCase\n+{\n+    /** @var Configuration */\n+    protected Configuration $configuration;\n+\n+    /** @var DatabaseHelper */\n+    protected DatabaseHelper $databaseHelper;\n+\n+    /** @var Backup */\n+    protected Backup $backup;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $dbHandle = new Sqlite3();\n+        $dbHandle->connect(PMF_TEST_DIR . '/test.db', '', '');\n+\n+        $this->configuration = new Configuration($dbHandle);\n+        $this->configuration->config['main.currentVersion'] = System::getVersion();\n+\n+        $this->databaseHelper = new DatabaseHelper($this->configuration);\n+\n+        $this->backup = new Backup($this->configuration, $this->databaseHelper);\n+    }\n+\n+    /**\n+     * @testdox create a complete backup file\n+     * @throws SodiumException\n+     */\n+    public function testCreateBackup(): void\n+    {\n+        $tableNames = 'faqconfig faqinstances';\n+        $backupQueries = $this->backup->generateBackupQueries($tableNames);\n+        $dataBackup = $this->backup->createBackup(Backup::BACKUP_TYPE_DATA, $backupQueries);\n+        $expected = 'phpmyfaq-data.' . date('Y-m-d-H-i-s') . '.sql';\n+\n+        $this->assertEquals($expected, $dataBackup);\n+\n+        $tableNames = 'faqadminlog faqsessions';\n+        $backupQueries = $this->backup->generateBackupQueries($tableNames);\n+        $logsBackup = $this->backup->createBackup(Backup::BACKUP_TYPE_LOGS, $backupQueries);\n+        $expected = 'phpmyfaq-logs.' . date('Y-m-d-H-i-s') . '.sql';\n+\n+        $this->assertEquals($expected, $logsBackup);\n+    }\n+\n+    /**\n+     * @throws SodiumException\n+     */\n+    public function testVerifyBackup(): void\n+    {\n+        $tableNames = 'faqconfig faqinstances';\n+        $backupQueries = $this->backup->generateBackupQueries($tableNames);\n+        $dataBackup = $this->backup->createBackup(Backup::BACKUP_TYPE_DATA, $backupQueries);\n+\n+        $result = $this->backup->verifyBackup($backupQueries, $dataBackup);\n+\n+        $this->assertTrue($result);\n+    }\n+\n+    /**\n+     * @testdox generates correct INSERT queries for the backup\n+     */\n+    public function testGenerateBackupQueries(): void\n+    {\n+        $tableNames = 'faqconfig faqinstances';\n+        $queries = $this->backup->generateBackupQueries($tableNames);\n+\n+        $this->assertStringContainsString('DO NOT REMOVE THE FIRST LINE!', $queries);\n+    }\n+}"
        },
        {
          "filename": "tests/phpMyFAQ/Database/DatabaseHelperTest.php",
          "status": "added",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -0,0 +1,63 @@\n+<?php\n+\n+namespace phpMyFAQ\\Database;\n+\n+use phpMyFAQ\\Configuration;\n+use phpMyFAQ\\System;\n+use PHPUnit\\Framework\\TestCase;\n+\n+/**\n+ * Class DatabaseHelperTest\n+ *\n+ * @testdox DatabaseHelper should\n+ * @package phpMyFAQ\n+ */\n+class DatabaseHelperTest extends TestCase\n+{\n+    /** @var DatabaseHelper */\n+    private DatabaseHelper $databaseHelper;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $dbHandle = new Sqlite3();\n+        $dbHandle->connect(PMF_TEST_DIR . '/test.db', '', '');\n+        $dbHandle->query(\n+            'CREATE TABLE faqtest (name VARCHAR(255) NOT NULL, testvalue VARCHAR(255) DEFAULT NULL, PRIMARY KEY (name))'\n+        );\n+        $dbHandle->query(\"INSERT INTO faqtest (name,testvalue) VALUES ('foo','bar')\");\n+        $dbHandle->query(\"INSERT INTO faqtest (name,testvalue) VALUES ('bar','baz')\");\n+\n+        $configuration = new Configuration($dbHandle);\n+        $configuration->config['main.currentVersion'] = System::getVersion();\n+\n+        $this->databaseHelper = new DatabaseHelper($configuration);\n+    }\n+\n+    protected function tearDown(): void\n+    {\n+        parent::tearDown();\n+\n+        $dbHandle = new Sqlite3();\n+        $dbHandle->connect(PMF_TEST_DIR . '/test.db', '', '');\n+        $dbHandle->query('DROP TABLE faqtest');\n+    }\n+\n+    /**\n+     * @testdox create the correct INSERT queries\n+     */\n+    public function testBuildInsertQueries(): void\n+    {\n+        $table = 'faqtest';\n+        $queries = $this->databaseHelper->buildInsertQueries('SELECT * FROM ' . $table, $table);\n+\n+        $expected = [\n+            \"\\r\\n-- Table: faqtest\",\n+            \"INSERT INTO faqtest (name,testvalue) VALUES ('foo','bar');\",\n+            \"INSERT INTO faqtest (name,testvalue) VALUES ('bar','baz');\"\n+        ];\n+\n+        $this->assertEquals($expected, $queries);\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 12,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0bde62632e8a6501702a5e0dc76b821b0e193cd1",
            "date": "2025-01-14T14:57:50Z",
            "author_login": "modelrailroader"
          },
          {
            "sha": "69ccf3a0310a91e580ba3fbae763cf6fc4e70e8c",
            "date": "2025-01-14T04:44:45Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0aff5a567446adbf5d024e0d8b2b132666f91464",
            "date": "2025-01-13T20:29:34Z",
            "author_login": "modelrailroader"
          },
          {
            "sha": "0ee934f2713e59ed829afa56b95697670cdcfad7",
            "date": "2025-01-13T19:58:07Z",
            "author_login": "modelrailroader"
          },
          {
            "sha": "471ebc8577558da4bcdbf45f7b18ab75e33f9a37",
            "date": "2025-01-13T19:57:09Z",
            "author_login": "modelrailroader"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.2.0-alpha.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-19T13:15:08.910",
    "last_modified": "2024-11-21T07:19:52.403",
    "fix_date": "2022-10-09T15:51:32Z"
  },
  "references": [
    {
      "url": "https://github.com/thorsten/phpmyfaq/commit/37123edd50f854bd141e6fbe65221af2d5cf2677",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8f0f3635-9d81-4c55-9826-2ba955c3a850",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/thorsten/phpmyfaq/commit/37123edd50f854bd141e6fbe65221af2d5cf2677",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8f0f3635-9d81-4c55-9826-2ba955c3a850",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:00.940931",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "phpMyFAQ",
    "owner": "thorsten",
    "created_at": "2009-08-04T19:26:15Z",
    "updated_at": "2025-01-14T04:55:59Z",
    "pushed_at": "2025-01-14T04:56:02Z",
    "size": 56435,
    "stars": 589,
    "forks": 255,
    "open_issues": 19,
    "watchers": 589,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 9489706,
      "Twig": 348463,
      "JavaScript": 322766,
      "SCSS": 19741,
      "Shell": 9475,
      "Dockerfile": 2594,
      "CSS": 1125,
      "HTML": 205
    },
    "commit_activity": {
      "total_commits_last_year": 1338,
      "avg_commits_per_week": 25.73076923076923,
      "days_active_last_year": 282
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mpl-2.0"
    },
    "collected_at": "2025-01-14T13:07:11.405854"
  }
}