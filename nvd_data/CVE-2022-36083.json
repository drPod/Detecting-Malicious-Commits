{
  "cve_id": "CVE-2022-36083",
  "github_data": {
    "repository": "panva/jose",
    "fix_commit": "03d6d013bf6e070e85adfe5731f526978e3e8e4d",
    "related_commits": [
      "03d6d013bf6e070e85adfe5731f526978e3e8e4d",
      "03d6d013bf6e070e85adfe5731f526978e3e8e4d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "03d6d013bf6e070e85adfe5731f526978e3e8e4d",
      "commit_date": "2022-08-31T13:47:55Z",
      "author": {
        "login": "panva",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: limit default PBES2 alg's computational expense",
        "length": 114,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 37,
        "additions": 31,
        "deletions": 6
      },
      "files": [
        {
          "filename": "src/jwe/flattened/decrypt.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -188,9 +188,9 @@ export async function flattenedDecrypt(\n \n   let cek: KeyLike | Uint8Array\n   try {\n-    cek = await decryptKeyManagement(alg, key, encryptedKey, joseHeader)\n+    cek = await decryptKeyManagement(alg, key, encryptedKey, joseHeader, options)\n   } catch (err) {\n-    if (err instanceof TypeError) {\n+    if (err instanceof TypeError || err instanceof JWEInvalid || err instanceof JOSENotSupported) {\n       throw err\n     }\n     // https://www.rfc-editor.org/rfc/rfc7516#section-11.5"
        },
        {
          "filename": "src/lib/decrypt_key_management.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@ import { decrypt as pbes2Kw } from '../runtime/pbes2kw.js'\n import { decrypt as rsaEs } from '../runtime/rsaes.js'\n import { decode as base64url } from '../runtime/base64url.js'\n \n-import type { JWEHeaderParameters, KeyLike, JWK } from '../types.d'\n+import type { DecryptOptions, JWEHeaderParameters, KeyLike, JWK } from '../types.d'\n import { JOSENotSupported, JWEInvalid } from '../util/errors.js'\n import { bitLength as cekLength } from '../lib/cek.js'\n import { importJWK } from '../key/import.js'\n@@ -17,6 +17,7 @@ async function decryptKeyManagement(\n   key: KeyLike | Uint8Array,\n   encryptedKey: Uint8Array | undefined,\n   joseHeader: JWEHeaderParameters,\n+  options?: DecryptOptions,\n ): Promise<KeyLike | Uint8Array> {\n   checkKeyType(alg, key, 'decrypt')\n \n@@ -96,6 +97,11 @@ async function decryptKeyManagement(\n       if (typeof joseHeader.p2c !== 'number')\n         throw new JWEInvalid(`JOSE Header \"p2c\" (PBES2 Count) missing or invalid`)\n \n+      const p2cLimit = options?.maxPBES2Count || 10_000\n+\n+      if (joseHeader.p2c > p2cLimit)\n+        throw new JWEInvalid(`JOSE Header \"p2c\" (PBES2 Count) out is of acceptable bounds`)\n+\n       if (typeof joseHeader.p2s !== 'string')\n         throw new JWEInvalid(`JOSE Header \"p2s\" (PBES2 Salt) missing or invalid`)\n "
        },
        {
          "filename": "src/types.d.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -401,6 +401,13 @@ export interface DecryptOptions extends CritOption {\n    * with compressed plaintext.\n    */\n   inflateRaw?: InflateFunction\n+\n+  /**\n+   * (PBES2 Key Management Algorithms only) Maximum allowed \"p2c\" (PBES2 Count) Header Parameter\n+   * value. The PBKDF2 iteration count defines the algorithm's computational expense. By default\n+   * this value is set to 10000.\n+   */\n+  maxPBES2Count?: number\n }\n \n /** JWE Deflate option. */"
        },
        {
          "filename": "test/jwe/flattened.decrypt.test.mjs",
          "status": "modified",
          "additions": 15,
          "deletions": 3,
          "patch": "@@ -1,6 +1,6 @@\n import test from 'ava'\n import * as crypto from 'crypto'\n-import { root } from '../dist.mjs'\n+import { root, conditional } from '../dist.mjs'\n \n const { FlattenedEncrypt, flattenedDecrypt, base64url } = await import(root)\n \n@@ -177,8 +177,8 @@ test('JWE format validation', async (t) => {\n     jwe.encrypted_key = 'foo'\n \n     await t.throwsAsync(flattenedDecrypt(jwe, t.context.secret), {\n-      message: 'decryption operation failed',\n-      code: 'ERR_JWE_DECRYPTION_FAILED',\n+      message: 'Encountered unexpected JWE Encrypted Key',\n+      code: 'ERR_JWE_INVALID',\n     })\n   }\n })\n@@ -239,3 +239,15 @@ test('decrypt empty data (CBC)', async (t) => {\n   const { plaintext } = await flattenedDecrypt(jwe, new Uint8Array(32))\n   t.is(plaintext.byteLength, 0)\n })\n+\n+conditional({ electron: 0 })('decrypt PBES2 p2c limit', async (t) => {\n+  const jwe = await new FlattenedEncrypt(new Uint8Array(0))\n+    .setProtectedHeader({ alg: 'PBES2-HS256+A128KW', enc: 'A128CBC-HS256' })\n+    .setKeyManagementParameters({ p2c: 2049 })\n+    .encrypt(new Uint8Array(32))\n+\n+  await t.throwsAsync(flattenedDecrypt(jwe, new Uint8Array(32), { maxPBES2Count: 2048 }), {\n+    message: 'JOSE Header \"p2c\" (PBES2 Count) out is of acceptable bounds',\n+    code: 'ERR_JWE_INVALID',\n+  })\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "08be0340ea04eef260bfc206a7962011d1f9ba14",
            "date": "2024-12-02T16:20:01Z",
            "author_login": "panva"
          },
          {
            "sha": "0d9f5f15a9b4f7966e09e192d93841a4eec387b3",
            "date": "2024-12-02T22:18:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1e8b430b08a18a18883a69e7991832c9c602ca1a",
            "date": "2024-11-25T11:27:55Z",
            "author_login": "panva"
          },
          {
            "sha": "a05fa5403791ecb795e9d23eae04d47315796497",
            "date": "2024-11-12T09:30:12Z",
            "author_login": "panva"
          },
          {
            "sha": "626d96592984bbee67ead9cd4425c568b50243f8",
            "date": "2024-11-11T20:26:07Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-400",
    "description": "JOSE is \"JSON Web Almost Everything\" - JWA, JWS, JWE, JWT, JWK, JWKS with no dependencies using runtime's native crypto in Node.js, Browser, Cloudflare Workers, Electron, and Deno. The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named `p2c` PBES2 Count, which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive. This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish. Under certain conditions, it is possible to have the user's environment consume unreasonable amount of CPU time. The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (`alg` Header Parameter) using the `keyManagementAlgorithms` (or `algorithms` in v1.x) decryption option or through other means. The `v1.28.2`, `v2.0.6`, `v3.20.4`, and `v4.9.2` releases limit the maximum PBKDF2 iteration count to `10000` by default. It is possible to adjust this limit with a newly introduced `maxPBES2Count` decryption option. If users are unable to upgrade their required library version, they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms. They can use the `keyManagementAlgorithms` decryption option to disable accepting PBKDF2 altogether, or they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (`p2c` Header Parameter).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-07T22:15:08.657",
    "last_modified": "2024-11-21T07:12:20.793",
    "fix_date": "2022-08-31T13:47:55Z"
  },
  "references": [
    {
      "url": "https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/panva/jose/releases/tag/v4.9.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/panva/jose/releases/tag/v4.9.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.089574",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "jose",
    "owner": "panva",
    "created_at": "2018-11-06T08:46:01Z",
    "updated_at": "2025-01-26T05:28:42Z",
    "pushed_at": "2025-01-19T17:50:23Z",
    "size": 13759,
    "stars": 5995,
    "forks": 322,
    "open_issues": 0,
    "watchers": 5995,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v1.x",
      "v2.x",
      "v3.x",
      "v4.x",
      "v5.x"
    ],
    "languages": {
      "TypeScript": 344157,
      "JavaScript": 203852,
      "Shell": 3730
    },
    "commit_activity": {
      "total_commits_last_year": 159,
      "avg_commits_per_week": 3.0576923076923075,
      "days_active_last_year": 73
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:45:37.808643"
  }
}