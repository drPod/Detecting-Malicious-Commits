{
  "cve_id": "CVE-2022-36090",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "e074d226d9b2b96a0a1ba4349d1b73a802842986",
    "related_commits": [
      "e074d226d9b2b96a0a1ba4349d1b73a802842986",
      "e074d226d9b2b96a0a1ba4349d1b73a802842986"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e074d226d9b2b96a0a1ba4349d1b73a802842986",
      "commit_date": "2022-03-24T12:51:57Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": {
          "total_commits": 1946,
          "average_weekly_commits": 2.0355648535564854,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 284
        }
      },
      "commit_message": {
        "title": "XWIKI-19559: Refactor handling of users in oldcore",
        "length": 491,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 147,
        "additions": 88,
        "deletions": 59
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-resources/src/main/resources/flamingo/drawer.vm",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -31,9 +31,15 @@\n         #largeUserAvatar($xcontext.user)\n       </a>\n       <div class=\"brand-links\">\n+        #define ($logoutLink)\n+          <a href=\"$xwiki.getURL('XWiki.XWikiLogout', 'logout', \"xredirect=$escapetool.url($xwiki.relativeRequestURL)\")\" id=\"tmLogout\" rel=\"nofollow\">$services.icon.renderHTML('log-out') $escapetool.xml($services.localization.render('logout'))</a>\n+        #end\n         #if ($xcontext.user != 'XWiki.XWikiGuest')\n           <a href=\"$xwiki.getURL($xcontext.user, 'view')\" class=\"brand-user\" id=\"tmUser\">$!xwiki.getUserName($xcontext.user, false)</a>\n-          <a href=\"$xwiki.getURL('XWiki.XWikiLogout', 'logout', \"xredirect=$escapetool.url($xwiki.relativeRequestURL)\")\" id=\"tmLogout\" rel=\"nofollow\">$services.icon.renderHTML('log-out') $escapetool.xml($services.localization.render('logout'))</a>\n+          $logoutLink\n+        #elseif($xcontext.user == 'XWiki.XWikiGuest' && $xcontext.inactiveUserReference)\n+          <a href=\"$xwiki.getURL($xcontext.inactiveUserReference, 'view')\" class=\"brand-user\" id=\"tmUser\">$!xwiki.getUserName($xcontext.inactiveUserReference, false)</a>\n+          $logoutLink\n         #else\n           <a href=\"$xwiki.getURL('XWiki.XWikiLogin', 'login', \"xredirect=$escapetool.url($xwiki.relativeRequestURL)&loginLink=1\")\" id=\"tmLogin\" rel=\"nofollow\">$services.icon.renderHTML('log-in') $escapetool.xml($services.localization.render('login'))</a>\n           #if ($xwiki.hasAccessLevel('register', 'XWiki.XWikiPreferences'))"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-notifications/xwiki-platform-notifications-rest/src/main/java/org/xwiki/notifications/rest/internal/DefaultNotificationsResource.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -185,7 +185,7 @@ public Response getNotificationsCount(String useUserPreferences, String userId,\n     {\n         // Build the response\n         Response.ResponseBuilder response;\n-        XWikiUser xWikiUser = getXWikiContext().getWiki().getAuthService().checkAuth(getXWikiContext());\n+        XWikiUser xWikiUser = getXWikiContext().getWiki().checkAuth(getXWikiContext());\n         if (xWikiUser == null) {\n             response = Response.status(Status.UNAUTHORIZED);\n         } else {\n@@ -215,7 +215,7 @@ public String getNotificationsRSS(String useUserPreferences, String userId, Stri\n         String tags, String currentWiki) throws Exception\n     {\n         // Build the response\n-        XWikiUser xWikiUser = getXWikiContext().getWiki().getAuthService().checkAuth(getXWikiContext());\n+        XWikiUser xWikiUser = getXWikiContext().getWiki().checkAuth(getXWikiContext());\n         DocumentReference userIdDoc = this.documentReferenceResolver.resolve(userId);\n         if (xWikiUser == null || !userIdDoc.equals(xWikiUser.getUserReference())) {\n             getXWikiContext().getResponse().sendError(HttpServletResponse.SC_UNAUTHORIZED);"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWiki.java",
          "status": "modified",
          "additions": 54,
          "deletions": 53,
          "patch": "@@ -4322,9 +4322,23 @@ public void prepareResources(XWikiContext context)\n         }\n     }\n \n+    /**\n+     * Authenticate the user from the context and check if the user is disabled or not.\n+     * If the user is disabled, the method returns {@code null} but set the reference of the authenticated user in the\n+     * context with the {@link XWikiContext#INACTIVE_USER_REFERENCE} property.\n+     *\n+     * @param context the context used to authenticate the user.\n+     * @return an {@link XWikiUser} if the user is authenticated and enabled, else {@code null}.\n+     * @throws XWikiException in case of problem when dealing with the authentication.\n+     */\n     public XWikiUser checkAuth(XWikiContext context) throws XWikiException\n     {\n-        return getAuthService().checkAuth(context);\n+        XWikiUser user = getAuthService().checkAuth(context);\n+        if (user != null && user.isDisabled(context)) {\n+            context.put(XWikiContext.INACTIVE_USER_REFERENCE, user.getUserReference());\n+            user = null;\n+        }\n+        return user;\n     }\n \n     public boolean checkAccess(String action, XWikiDocument doc, XWikiContext context) throws XWikiException\n@@ -5864,70 +5878,26 @@ public boolean prepareDocuments(XWikiRequest request, XWikiContext context, Velo\n         boolean hasAccess = checkAccess(context.getAction(), doc, context);\n \n         XWikiUser user;\n+        XWikiUser inactiveUser = null;\n+        if (context.getUserReference() == null && context.get(XWikiContext.INACTIVE_USER_REFERENCE) != null) {\n+            inactiveUser = new XWikiUser((DocumentReference) context.get(XWikiContext.INACTIVE_USER_REFERENCE));\n+        }\n         if (context.getUserReference() != null) {\n             user = new XWikiUser(context.getUserReference());\n         } else {\n             user = new XWikiUser(context.getUser());\n         }\n \n+        if (inactiveUser != null && context.getAction().equals(\"view\")) {\n+            this.handleInactiveUserViewAction(inactiveUser, context, reference, vcontext);\n+        }\n         // We need to check rights before we look for translations\n         // Otherwise we don't have the user language\n-        if (!hasAccess) {\n+        else if (!hasAccess) {\n             Object[] args = { doc.getFullName(), user.getUser() };\n             setPhonyDocument(reference, context, vcontext);\n             throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                 \"Access to document {0} has been denied to user {1}\", null, args);\n-        // User is disabled: the mail address is marked as checked\n-        } else if (user.isDisabled(context) && user.isEmailChecked(context)) {\n-            String action = context.getAction();\n-            /*\n-             * Allow inactive users to see skins, ressources, SSX, JSX and downloads they could have seen as guest. The\n-             * rational behind this behaviour is that inactive users should be able to access the same UI that guests\n-             * are used to see, including custom icons, panels, and so on...\n-             */\n-            if (!((action.equals(\"skin\") && (doc.getSpace().equals(\"skins\") || doc.getSpace().equals(\"resources\")))\n-                || ((action.equals(\"skin\") || action.equals(\"download\") || action.equals(\"ssx\") || action.equals(\"jsx\"))\n-                    && getRightService().hasAccessLevel(\"view\", XWikiRightService.GUEST_USER_FULLNAME,\n-                        doc.getPrefixedFullName(), context))\n-                || ((action.equals(\"view\") && doc.getFullName().equals(\"XWiki.AccountValidation\"))))) {\n-                Object[] args = { user.getUser() };\n-                setPhonyDocument(reference, context, vcontext);\n-                throw new XWikiException(XWikiException.MODULE_XWIKI_USER, XWikiException.ERROR_XWIKI_USER_DISABLED,\n-                    \"User {0} account is disabled\", null, args);\n-            }\n-        // User actually needs to activate his mail address.\n-        } else if (user.isDisabled(context) && !user.isEmailChecked(context)) {\n-            boolean allow = false;\n-            String action = context.getAction();\n-            /*\n-             * Allow inactive users to see skins, ressources, SSX, JSX and downloads they could have seen as guest. The\n-             * rational behind this behaviour is that inactive users should be able to access the same UI that guests\n-             * are used to see, including custom icons, panels, and so on...\n-             */\n-            if ((action.equals(\"skin\") && (doc.getSpace().equals(\"skins\") || doc.getSpace().equals(\"resources\")))\n-                || ((action.equals(\"skin\") || action.equals(\"download\") || action.equals(\"ssx\") || action.equals(\"jsx\"))\n-                    && getRightService().hasAccessLevel(\"view\", XWikiRightService.GUEST_USER_FULLNAME,\n-                        doc.getPrefixedFullName(), context))\n-                || ((action.equals(\"view\") && doc.getFullName().equals(\"XWiki.AccountValidation\")))) {\n-                allow = true;\n-            } else {\n-                String allowed = getConfiguration().getProperty(\"xwiki.inactiveuser.allowedpages\", \"\");\n-                if (context.getAction().equals(\"view\") && !allowed.equals(\"\")) {\n-                    String[] allowedList = StringUtils.split(allowed, \" ,\");\n-                    for (String element : allowedList) {\n-                        if (element.equals(doc.getFullName())) {\n-                            allow = true;\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-            if (!allow) {\n-                Object[] args = { context.getUser() };\n-                setPhonyDocument(reference, context, vcontext);\n-                throw new XWikiException(XWikiException.MODULE_XWIKI_USER, XWikiException.ERROR_XWIKI_USER_INACTIVE,\n-                    \"User {0} account is inactive\", null, args);\n-            }\n         }\n \n         if (!\"skin\".equals(context.getAction())\n@@ -5969,6 +5939,37 @@ && getRightService().hasAccessLevel(\"view\", XWikiRightService.GUEST_USER_FULLNAM\n         return true;\n     }\n \n+    private void handleInactiveUserViewAction(XWikiUser inactiveUser, XWikiContext context, DocumentReference reference,\n+        VelocityContext vcontext) throws XWikiException\n+    {\n+        if (inactiveUser.isEmailChecked(context)) {\n+            Object[] args = { inactiveUser.getUser() };\n+            setPhonyDocument(reference, context, vcontext);\n+            throw new XWikiException(XWikiException.MODULE_XWIKI_USER, XWikiException.ERROR_XWIKI_USER_DISABLED,\n+                \"User {0} account is disabled\", null, args);\n+        } else if (!reference.getLocalDocumentReference().equals(XWikiUser.ACCOUNT_VALIDATION_DOCUMENT_REFERENCE)) {\n+            String allowed = getConfiguration().getProperty(\"xwiki.inactiveuser.allowedpages\", \"\");\n+            boolean allow = false;\n+            if (!StringUtils.isEmpty(allowed)) {\n+                XWikiDocument doc = this.getDocument(reference, context);\n+                String[] allowedList = StringUtils.split(allowed, \" ,\");\n+                for (String element : allowedList) {\n+                    if (element.equals(doc.getFullName())) {\n+                        allow = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            if (!allow) {\n+                Object[] args = { inactiveUser.getUser() };\n+                setPhonyDocument(reference, context, vcontext);\n+                throw new XWikiException(XWikiException.MODULE_XWIKI_USER, XWikiException.ERROR_XWIKI_USER_INACTIVE,\n+                    \"User {0} account is inactive\", null, args);\n+            }\n+        }\n+    }\n+\n     /**\n      * @since 8.3M1\n      */"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/XWikiContext.java",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -101,6 +101,16 @@ public class XWikiContext extends Hashtable<Object, Object>\n     @Deprecated\n     public static final String KEY_LEGACY_VELOCITYCONTEXT = \"vcontext\";\n \n+    /**\n+     * The reference of a logged-in inactive user: in such case the context user reference is guest, so we store\n+     * the actual logged-in user with that key.\n+     *\n+     * @since 14.3RC1\n+     * @since 13.10.5\n+     */\n+    @Unstable\n+    public static final String INACTIVE_USER_REFERENCE = \"inactiveUserReference\";\n+\n     /** Logging helper object. */\n     protected static final Logger LOGGER = LoggerFactory.getLogger(XWikiContext.class);\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/XWiki.java",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -2910,7 +2910,7 @@ public String getCounter(String name)\n      */\n     public XWikiUser checkAuth() throws XWikiException\n     {\n-        return this.context.getWiki().getAuthService().checkAuth(this.context);\n+        return this.context.getWiki().checkAuth(this.context);\n     }\n \n     /**\n@@ -2925,7 +2925,13 @@ public XWikiUser checkAuth() throws XWikiException\n      */\n     public XWikiUser checkAuth(String username, String password, String rememberme) throws XWikiException\n     {\n-        return this.context.getWiki().getAuthService().checkAuth(username, password, rememberme, this.context);\n+        XWikiUser user =\n+            this.context.getWiki().getAuthService().checkAuth(username, password, rememberme, this.context);\n+        if (user.isDisabled(this.context)) {\n+            this.context.put(XWikiContext.INACTIVE_USER_REFERENCE, user.getUserReference());\n+            user = null;\n+        }\n+        return user;\n     }\n \n     /**"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/api/XWikiUser.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.model.reference.LocalDocumentReference;\n import org.xwiki.model.reference.WikiReference;\n \n import com.xpn.xwiki.XWiki;\n@@ -58,6 +59,9 @@ public class XWikiUser\n      */\n     public static final String EMAIL_CHECKED_PROPERTY = \"email_checked\";\n \n+    public static final LocalDocumentReference ACCOUNT_VALIDATION_DOCUMENT_REFERENCE =\n+        new LocalDocumentReference(XWiki.SYSTEM_SPACE, \"AccountValidation\");\n+\n     /**\n      * @see com.xpn.xwiki.internal.model.reference.CurrentMixedStringDocumentReferenceResolver\n      */"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-security/xwiki-platform-security-authorization/xwiki-platform-security-authorization-bridge/src/main/java/org/xwiki/security/authorization/internal/XWikiCachingRightService.java",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -280,7 +280,9 @@ public boolean checkAccess(String action, XWikiDocument doc, XWikiContext contex\n         // implementation, so code that simply want to verify if a user can delete (but is not actually deleting)\n         // has to call checkAccess. This happen really often, and this why we should not redirect to login on failed\n         // delete, since it would prevent most user to do anything.\n-        if (context.getUserReference() == null && !DELETE_ACTION.equals(action) && !LOGIN_ACTION.equals(action)) {\n+        // Also we don't show the login if an inactive user logged in.\n+        if (context.getUserReference() == null && !DELETE_ACTION.equals(action) && !LOGIN_ACTION.equals(action)\n+            && context.get(XWikiContext.INACTIVE_USER_REFERENCE) == null) {\n             LOGGER.debug(\"Redirecting unauthenticated user to login, since it have been denied [{}] on [{}].\",\n                          right, entityReference);\n             showLogin(context);"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 12
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "20d352276c008c8ea2a1cf1ea9ceb84193098477",
            "date": "2025-01-25T19:15:09Z",
            "author_login": "mflorea"
          },
          {
            "sha": "e29b630b2d5a42b6f12ed3f0e4f59bd078f8a0f7",
            "date": "2025-01-24T07:34:53Z",
            "author_login": "mflorea"
          },
          {
            "sha": "023144daf732d04b085c2423ebd4552edd09ac5c",
            "date": "2025-01-24T15:44:30Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "a46579427dc202957d623b8e69a6a894243c6690",
            "date": "2025-01-21T16:53:45Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "3d661180a9075925c3d2d75816356925f32ae89d",
            "date": "2025-01-21T16:13:46Z",
            "author_login": "Sereza7"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-285",
    "description": "XWiki Platform Old Core is a core package for XWiki Platform, a generic wiki platform. Prior to versions 13.1.0.5 and 14.3-rc-1, some resources are missing a check for inactive (not yet activated or disabled) users in XWiki, including the REST service. This means a disabled user can enable themselves using a REST call. On the same way some resources handler created by extensions are not protected by default, so an inactive user could perform actions for such extensions. This issue has existed since at least version 1.1 of XWiki for instance configured with the email activation required for new users. Now it's more critical for versions 11.3-rc-1 and later since the maintainers provided the capability to disable user without deleting them and encouraged using that feature. XWiki 14.3-rc-1 and XWiki 13.10.5 contain a patch. There is no workaround for this other than upgrading XWiki.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-08T15:15:07.793",
    "last_modified": "2024-11-21T07:12:21.833",
    "fix_date": "2022-03-24T12:51:57Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/e074d226d9b2b96a0a1ba4349d1b73a802842986",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-jgc8-gvcx-9vfx",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19559",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/e074d226d9b2b96a0a1ba4349d1b73a802842986",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-jgc8-gvcx-9vfx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19559",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.092307",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-25T19:23:49Z",
    "pushed_at": "2025-01-25T19:23:45Z",
    "size": 563394,
    "stars": 1035,
    "forks": 555,
    "open_issues": 143,
    "watchers": 1035,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34352251,
      "JavaScript": 2404688,
      "HTML": 388086,
      "Less": 318876,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115582,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 261
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:34:26.816515"
  }
}