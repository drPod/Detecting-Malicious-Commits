{
  "cve_id": "CVE-2022-36112",
  "github_data": {
    "repository": "glpi-project/glpi",
    "fix_commit": "ad66d69049ae02bead8ed0f4ee654a458643244e",
    "related_commits": [
      "ad66d69049ae02bead8ed0f4ee654a458643244e",
      "ad66d69049ae02bead8ed0f4ee654a458643244e"
    ],
    "patch_url": "https://github.com/glpi-project/glpi/commit/ad66d69049ae02bead8ed0f4ee654a458643244e.patch",
    "fix_commit_details": {
      "sha": "ad66d69049ae02bead8ed0f4ee654a458643244e",
      "commit_date": "2022-08-26T13:03:23Z",
      "author": {
        "login": "orthagh",
        "type": "User",
        "stats": {
          "total_commits": 1687,
          "average_weekly_commits": 1.5434583714547119,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 337
        }
      },
      "commit_message": {
        "title": "Mitigate SSRF exploits",
        "length": 22,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 254,
        "additions": 229,
        "deletions": 25
      },
      "files": [
        {
          "filename": ".composer-require-checker.config.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -34,7 +34,7 @@\n     \"GLPI_MARKETPLACE_PRERELEASES\", \"GLPI_NETWORK_REGISTRATION_API_URL\", \"GLPI_NETWORK_MAIL\",\n     \"GLPI_NETWORK_SERVICES\", \"GLPI_PICTURE_DIR\", \"GLPI_PLUGIN_DOC_DIR\", \"GLPI_RSS_DIR\", \"GLPI_SESSION_DIR\",\n     \"GLPI_TELEMETRY_URI\", \"GLPI_TMP_DIR\", \"GLPI_UPLOAD_DIR\", \"GLPI_USE_CSRF_CHECK\", \"GLPI_USE_IDOR_CHECK\",\n-    \"GLPI_USER_AGENT_EXTRA_COMMENTS\", \"GLPI_VAR_DIR\", \"GLPI_CENTRAL_WARNINGS\",\n+    \"GLPI_USER_AGENT_EXTRA_COMMENTS\", \"GLPI_VAR_DIR\", \"GLPI_CENTRAL_WARNINGS\", \"GLPI_SERVERSIDE_URL_ALLOWLIST\",\n \n     \"// GLPI optionnal constants\",\n     \"GLPI_FORCE_MAIL\", \"GLPI_LOG_LVL\","
        },
        {
          "filename": "css/legacy/includes/_planning.scss",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -108,6 +108,11 @@\n                text-overflow: ellipsis;\n                display: inline-block;\n                white-space: nowrap;\n+\n+               > i {\n+                  color: $warning;\n+                  float: right;\n+               }\n             }\n \n             .filter-icon {"
        },
        {
          "filename": "inc/based_config.php",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -82,6 +82,11 @@\n         'GLPI_USE_IDOR_CHECK'            => '1',\n         'GLPI_IDOR_EXPIRES'              => '7200',\n         'GLPI_ALLOW_IFRAME_IN_RICH_TEXT' => false,\n+        'GLPI_SERVERSIDE_URL_ALLOWLIST'  => [\n+            // allowlist (regex format) of URL that can be fetched from server side (used for RSS feeds and external calendars, among others)\n+            // URL will be considered as safe as long as it matches at least one entry of the allowlist\n+            '/^(https?|feed):\\/\\/[^@:]+(\\/.*)?$/', // only accept http/https/feed protocols, and reject presence of @ (username) and : (protocol) in host part of URL\n+        ],\n \n       // Constants related to GLPI Project / GLPI Network external services\n         'GLPI_TELEMETRY_URI'                => 'https://telemetry.glpi-project.org', // Telemetry project URL\n@@ -127,7 +132,7 @@\n    // This logic is quiet simple and is not made to handle chain inheritance.\n     $inherit_pattern = '/\\{(?<name>GLPI_[\\w]+)\\}/';\n     foreach ($constants as $key => $value) {\n-        if (!defined($key) && !preg_match($inherit_pattern, $value)) {\n+        if (!defined($key) && (!is_string($value) || !preg_match($inherit_pattern, $value))) {\n             define($key, $value);\n         }\n     }"
        },
        {
          "filename": "src/Planning.php",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -1003,7 +1003,13 @@ class='\" . $filter_data['type'] . $expanded . \"'>\";\n             echo \"<i class='actor_icon fa fa-fw fa-$icon'></i>\";\n         }\n \n-        echo \"<label for='$filter_key'>$title</label>\";\n+        echo \"<label for='$filter_key'>\";\n+        echo $title;\n+        if ($filter_data['type'] == 'external' && !Toolbox::isUrlSafe($filter_data['url'])) {\n+            $warning = sprintf(__s('URL \"%s\" is not allowed by your administrator.'), $filter_data['url']);\n+            echo \"<i class='fas fa-exclamation-triangle' title='{$warning}'></i>\";\n+        }\n+        echo \"</label>\";\n \n         $color = self::$palette_bg[$params['filter_color_index']];\n         if (isset($filter_data['color']) && !empty($filter_data['color'])) {\n@@ -1396,6 +1402,15 @@ public static function showAddExternalForm()\n      */\n     public static function sendAddExternalForm($params = [])\n     {\n+        if (!Toolbox::isUrlSafe($params['url'])) {\n+            Session::addMessageAfterRedirect(\n+                sprintf(__('URL \"%s\" is not allowed by your administrator.'), $params['url']),\n+                false,\n+                ERROR\n+            );\n+            return;\n+        }\n+\n         $_SESSION['glpi_plannings']['plannings']['external_' . md5($params['url'])] = [\n             'color'   => self::getPaletteColor('bg', $_SESSION['glpi_plannings_color_index']),\n             'display' => true,"
        },
        {
          "filename": "src/RSSFeed.php",
          "status": "modified",
          "additions": 42,
          "deletions": 14,
          "patch": "@@ -603,12 +603,11 @@ public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $\n         return false;\n     }\n \n-\n-    /**\n-     * @see CommonDBTM::prepareInputForAdd()\n-     **/\n     public function prepareInputForAdd($input)\n     {\n+        if (!$this->checkUrlInput($input['url'])) {\n+            return false;\n+        }\n \n         if ($feed = self::getRSSFeed($input['url'])) {\n             $input['have_error'] = 0;\n@@ -628,12 +627,11 @@ public function prepareInputForAdd($input)\n         return $input;\n     }\n \n-\n-    /**\n-     * @see CommonDBTM::prepareInputForAdd()\n-     **/\n     public function prepareInputForUpdate($input)\n     {\n+        if (array_key_exists('url', $input) && !$this->checkUrlInput($input['url'])) {\n+            return false;\n+        }\n \n         if (\n             empty($input['name'])\n@@ -648,6 +646,24 @@ public function prepareInputForUpdate($input)\n         return $input;\n     }\n \n+    /**\n+     * Check URL given in input.\n+     * @param string $url\n+     * @return bool\n+     */\n+    private function checkUrlInput(string $url): bool\n+    {\n+        if (parse_url($url) === false) {\n+            Session::addMessageAfterRedirect(__('Feed URL is invalid.'), false, ERROR);\n+            return false;\n+        } elseif (!Toolbox::isUrlSafe($url)) {\n+            Session::addMessageAfterRedirect(sprintf(__('URL \"%s\" is not allowed by your administrator.'), $url), false, ERROR);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n \n     public function pre_updateInDB()\n     {\n@@ -769,7 +785,11 @@ public function showForm($ID, array $options = [])\n         echo \"<tr class='tab_bg_2'>\";\n         echo \"<td>\" . __('Error retrieving RSS feed') . \"</td>\";\n         echo \"<td>\";\n-        echo Dropdown::getYesNo($this->fields['have_error']);\n+        if ($this->fields['have_error'] && !Toolbox::isUrlSafe($this->fields['url'])) {\n+            echo sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url']);\n+        } else {\n+            echo Dropdown::getYesNo($this->fields['have_error']);\n+        }\n         echo \"</td>\";\n         if ($this->fields['have_error']) {\n             echo \"<td>\" . __('RSS feeds found');\n@@ -823,15 +843,11 @@ public function showFeedContent()\n         if (!$this->canViewItem()) {\n             return false;\n         }\n-        $feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate']);\n         $rss_feed = [\n             'items'  => []\n         ];\n         echo \"<div class='firstbloc'>\";\n-        if (!$feed || $feed->error()) {\n-            $rss_feed['error'] = !$feed ? __('Error retrieving RSS feed') : $feed->error();\n-            $this->setError(true);\n-        } else {\n+        if ($feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate'])) {\n             $this->setError(false);\n             $rss_feed['title'] = $feed->get_title();\n             foreach ($feed->get_items(0, $this->fields['max_items']) as $item) {\n@@ -842,6 +858,11 @@ public function showFeedContent()\n                     'content'   => $item->get_content()\n                 ];\n             }\n+        } else {\n+            $rss_feed['error'] = !Toolbox::isUrlSafe($this->fields['url'])\n+                ? sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url'])\n+                : __('Error retrieving RSS feed');\n+            $this->setError(true);\n         }\n \n         TemplateRenderer::getInstance()->display('components/rss_feed.html.twig', [\n@@ -857,6 +878,9 @@ public function showFeedContent()\n      **/\n     public function showDiscoveredFeeds()\n     {\n+        if (!Toolbox::isUrlSafe($this->fields['url'])) {\n+            return;\n+        }\n \n         $feed = new SimplePie();\n         $feed->set_cache_location(GLPI_RSS_DIR);\n@@ -903,6 +927,10 @@ public static function getRSSFeed($url, $cache_duration = DAY_TIMESTAMP)\n     {\n         global $CFG_GLPI;\n \n+        if (!Toolbox::isUrlSafe($url)) {\n+            return false;\n+        }\n+\n         if (Sanitizer::isHtmlEncoded($url)) {\n             $url = Sanitizer::decodeHtmlSpecialChars($url);\n         }"
        },
        {
          "filename": "src/System/Status/StatusChecker.php",
          "status": "modified",
          "additions": 14,
          "deletions": 4,
          "patch": "@@ -392,11 +392,21 @@ public static function getCASStatus($public_only = true): array\n                     $url .= ':' . (int)$CFG_GLPI['cas_port'];\n                 }\n                 $url .= '/' . $CFG_GLPI['cas_uri'];\n-                $data = Toolbox::getURLContent($url);\n-                if (!empty($data)) {\n-                    $status['status'] = self::STATUS_OK;\n+                if (Toolbox::isUrlSafe($url)) {\n+                    $data = Toolbox::getURLContent($url);\n+                    if (!empty($data)) {\n+                        $status['status'] = self::STATUS_OK;\n+                    } else {\n+                        $status['status'] = self::STATUS_PROBLEM;\n+                    }\n                 } else {\n-                    $status['status'] = self::STATUS_PROBLEM;\n+                    $status['status'] = self::STATUS_NO_DATA;\n+                    if (!$public_only) {\n+                        $status['status_msg'] = sprintf(\n+                            __('URL \"%s\" is not considered safe and cannot be fetched from GLPI server.'),\n+                            $url\n+                        );\n+                    }\n                 }\n             }\n         }"
        },
        {
          "filename": "src/Toolbox.php",
          "status": "modified",
          "additions": 51,
          "deletions": 3,
          "patch": "@@ -1094,6 +1094,10 @@ public static function checkNewVersionAvailable()\n        //parse github releases (get last version number)\n         $error = \"\";\n         $json_gh_releases = self::getURLContent(\"https://api.github.com/repos/glpi-project/glpi/releases\", $error);\n+        if (empty($json_gh_releases)) {\n+            return $error;\n+        }\n+\n         $all_gh_releases = json_decode($json_gh_releases, true);\n         $released_tags = [];\n         foreach ($all_gh_releases as $release) {\n@@ -1329,6 +1333,35 @@ public static function getTimestampTimeUnits($time)\n     }\n \n \n+    /**\n+     * Check an url is safe.\n+     * Used to mitigate SSRF exploits.\n+     *\n+     * @since 10.0.3\n+     *\n+     * @param string    $url        URL to check\n+     * @param array     $allowlist  Allowlist (regex array)\n+     *\n+     * @return bool\n+     */\n+    public static function isUrlSafe(string $url, array $allowlist = GLPI_SERVERSIDE_URL_ALLOWLIST): bool\n+    {\n+        foreach ($allowlist as $allow_regex) {\n+            $result = preg_match($allow_regex, $url);\n+            if ($result === false) {\n+                trigger_error(\n+                    sprintf('Unable to validate URL safeness. Following regex is probably invalid: \"%s\".', $allow_regex),\n+                    E_USER_WARNING\n+                );\n+            } elseif ($result === 1) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+\n     /**\n      * Get a web page. Use proxy if configured\n      *\n@@ -1340,7 +1373,8 @@ public static function getTimestampTimeUnits($time)\n      **/\n     public static function getURLContent($url, &$msgerr = null, $rec = 0)\n     {\n-        $content = self::callCurl($url);\n+        $curl_error = null;\n+        $content = self::callCurl($url, [], $msgerr, $curl_error, true);\n         return $content;\n     }\n \n@@ -1354,10 +1388,24 @@ public static function getURLContent($url, &$msgerr = null, $rec = 0)\n      *\n      * @return string\n      */\n-    public static function callCurl($url, array $eopts = [], &$msgerr = null, &$curl_error = null)\n-    {\n+    public static function callCurl(\n+        $url,\n+        array $eopts = [],\n+        &$msgerr = null,\n+        &$curl_error = null,\n+        bool $check_url_safeness = false\n+    ) {\n         global $CFG_GLPI;\n \n+        if ($check_url_safeness && !Toolbox::isUrlSafe($url)) {\n+            $msgerr = sprintf(\n+                __('URL \"%s\" is not considered safe and cannot be fetched from GLPI server.'),\n+                $url\n+            );\n+            trigger_error(sprintf('Unsafe URL \"%s\" fetching has been blocked.', $url), E_USER_NOTICE);\n+            return '';\n+        }\n+\n         $content = \"\";\n         $taburl  = parse_url($url);\n "
        },
        {
          "filename": "templates/components/rss_feed.html.twig",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -33,7 +33,7 @@\n \n <div class=\"firstbloc\">\n    {% if rss_feed.error is defined and rss_feed.error is not null %}\n-      {{ __('Error retrieving RSS feed') }}\n+      {{ rss_feed.error }}\n    {% endif %}\n    <table class=\"table table-striped table-hover\">\n       <thead>"
        },
        {
          "filename": "tests/bootstrap.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -55,6 +55,14 @@\n     ]\n );\n \n+define(\n+    'GLPI_SERVERSIDE_URL_ALLOWLIST',\n+    [\n+        '/^(https?|feed):\\/\\/[^@:]+(\\/.*)?$/', // default allowlist entry\n+        '/^file:\\/\\/.*\\.ics$/', // calendar mockups\n+    ]\n+);\n+\n define('TU_USER', '_test_user');\n define('TU_PASS', 'PhpUnit_4');\n "
        },
        {
          "filename": "tests/functionnal/Toolbox.php",
          "status": "modified",
          "additions": 85,
          "deletions": 0,
          "patch": "@@ -1431,4 +1431,89 @@ public function testGetMioSizeFromString(string $size, $expected): void\n         $result = \\Toolbox::getMioSizeFromString($size);\n         $this->variable($result)->isEqualTo($expected);\n     }\n+\n+    protected function safeUrlProvider(): iterable\n+    {\n+        // Invalid URLs are refused\n+        yield [\n+            'url'      => '',\n+            'expected' => false,\n+        ];\n+        yield [\n+            'url'      => ' ',\n+            'expected' => false,\n+        ];\n+\n+        // Invalid schemes are refused\n+        yield [\n+            'url'      => 'file://tmp/test',\n+            'expected' => false,\n+        ];\n+        yield [\n+            'url'      => 'test://localhost/',\n+            'expected' => false,\n+        ];\n+\n+        // Local file are refused\n+        yield [\n+            'url'      => '//tmp/test',\n+            'expected' => false,\n+        ];\n+\n+        // http, https and feed URLs are accepted, unless they contains a user or port information\n+        foreach (['http', 'https', 'feed'] as $scheme) {\n+            foreach (['', '/', '/path/to/feed.php'] as $path) {\n+                yield [\n+                    'url'      => sprintf('%s://localhost%s', $scheme, $path),\n+                    'expected' => true,\n+                ];\n+                yield [\n+                    'url'      => sprintf('%s://localhost:8080%s', $scheme, $path),\n+                    'expected' => false,\n+                ];\n+                yield [\n+                    'url'      => sprintf('%s://test@localhost%s', $scheme, $path),\n+                    'expected' => false,\n+                ];\n+                yield [\n+                    'url'      => sprintf('%s://test:pass@localhost%s', $scheme, $path),\n+                    'expected' => false,\n+                ];\n+            }\n+        }\n+\n+        // Custom allowlist with multiple entries\n+        $custom_allowlist = [\n+            '|^https://\\w+:[^/]+@calendar.mydomain.tld/|',\n+            '|//intra.mydomain.tld/|',\n+        ];\n+        yield [\n+            'url'       => 'https://calendar.external.tld/',\n+            'expected'  => false,\n+            'allowlist' => $custom_allowlist,\n+        ];\n+        yield [\n+            'url'       => 'https://user:pass@calendar.mydomain.tld/',\n+            'expected'  => true, // validates first item of allowlist\n+            'allowlist' => $custom_allowlist,\n+        ];\n+        yield [\n+            'url'       => 'http://intra.mydomain.tld/news.feed.php',\n+            'expected'  => true, // validates second item of allowlist\n+            'allowlist' => $custom_allowlist,\n+        ];\n+    }\n+\n+\n+    /**\n+     * @dataProvider safeUrlProvider\n+     */\n+    public function testIsUrlSafe(string $url, bool $expected, ?array $allowlist = null): void\n+    {\n+        $params = [$url];\n+        if ($allowlist !== null) {\n+            $params[] = $allowlist;\n+        }\n+        $this->boolean(call_user_func_array('Toolbox::isUrlSafe', $params))->isEqualTo($expected);\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ec0e2a11b56e8ef9d1d28f503a363e4ba64fd4ab",
            "date": "2025-01-14T16:55:01Z",
            "author_login": "ccailly"
          },
          {
            "sha": "50989595d9386f3eed353125d7a693ef1241b517",
            "date": "2025-01-14T15:16:58Z",
            "author_login": "cconard96"
          },
          {
            "sha": "515f37f98fdfc8fdc1eb2f090252b2f3af1fdfa4",
            "date": "2025-01-14T14:43:36Z",
            "author_login": "ccailly"
          },
          {
            "sha": "9869867f24c899d79e4675ad93131bbb2cba53a2",
            "date": "2025-01-14T14:39:56Z",
            "author_login": "ccailly"
          },
          {
            "sha": "4b9fbaea0bb355b49990ee51c690fed5e7302443",
            "date": "2025-01-14T13:22:29Z",
            "author_login": "SebSept"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "GLPI stands for Gestionnaire Libre de Parc Informatique and is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Usage of RSS feeds or extenal calendar in planning is subject to SSRF exploit. Server-side requests can be used to scan server port or services opened on GLPI server or its private network. Queries responses are not exposed to end-user (blind SSRF). Users are advised to upgrade to version 10.0.3 to resolve this issue. There are no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-09-14T18:15:10.697",
    "last_modified": "2024-11-21T07:12:24.993",
    "fix_date": "2022-08-26T13:03:23Z"
  },
  "references": [
    {
      "url": "https://github.com/glpi-project/glpi/commit/ad66d69049ae02bead8ed0f4ee654a458643244e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-rqgx-gqhp-x8vv",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/commit/ad66d69049ae02bead8ed0f4ee654a458643244e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-rqgx-gqhp-x8vv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.114509",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "glpi",
    "owner": "glpi-project",
    "created_at": "2015-07-16T07:20:21Z",
    "updated_at": "2025-01-14T12:00:43Z",
    "pushed_at": "2025-01-14T12:00:37Z",
    "size": 864638,
    "stars": 4447,
    "forks": 1324,
    "open_issues": 223,
    "watchers": 4447,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.70/bugfixes",
      "0.71/bugfixes",
      "0.72/bugfixes",
      "0.78/bugfixes",
      "0.80/bugfixes",
      "0.83/bugfixes",
      "0.84/bugfixes",
      "0.85/bugfixes",
      "0.90/bugfixes",
      "9.1/bugfixes",
      "9.2/bugfixes",
      "9.3/bugfixes",
      "9.4/bugfixes",
      "9.5/bugfixes",
      "10.0/bugfixes",
      "main"
    ],
    "languages": {
      "PHP": 24867216,
      "Twig": 1834187,
      "JavaScript": 1339721,
      "SCSS": 362786,
      "Vue": 188168,
      "Shell": 24779,
      "Makefile": 2692,
      "CSS": 1716,
      "Dockerfile": 638
    },
    "commit_activity": {
      "total_commits_last_year": 1737,
      "avg_commits_per_week": 33.40384615384615,
      "days_active_last_year": 259
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:16:26.208966"
  }
}