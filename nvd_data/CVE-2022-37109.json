{
  "cve_id": "CVE-2022-37109",
  "github_data": {
    "repository": "patrickfuller/camp",
    "fix_commit": "bf6af5c2e5cf713e4050c11c52dd4c55e89880b1",
    "related_commits": [
      "bf6af5c2e5cf713e4050c11c52dd4c55e89880b1",
      "bf6af5c2e5cf713e4050c11c52dd4c55e89880b1"
    ],
    "patch_url": "https://github.com/patrickfuller/camp/commit/bf6af5c2e5cf713e4050c11c52dd4c55e89880b1.patch",
    "fix_commit_details": {
      "sha": "bf6af5c2e5cf713e4050c11c52dd4c55e89880b1",
      "commit_date": "2022-07-21T14:03:39Z",
      "author": {
        "login": "patrickfuller",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix vulnerability and add warning",
        "length": 33,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 30,
        "additions": 13,
        "deletions": 17
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 8,
          "deletions": 7,
          "patch": "@@ -3,7 +3,9 @@ camp\n \n Another Raspberry Pi camera webserver.\n \n-![](img/example.png)\n+**USE AT YOUR OWN RISK. SEE [#11](https://github.com/patrickfuller/camp/issues/11) FOR MORE.**\n+\n+![](static/img/example.png)\n \n What it does\n ============\n@@ -52,11 +54,11 @@ python camp/server.py\n \n Navigate to http://your.r.pi.ip:8000 and check out your webcam.\n \n-#### USB Camera\n+### USB Camera\n \n Use with `python server.py --use-usb`.\n \n-#### Password\n+### Password\n \n ![](img/login.png)\n \n@@ -73,18 +75,17 @@ python -c \"import hashlib; import getpass; print(hashlib.sha512(getpass.getpass(\n This will prompt you for a password, encrypt it, and save the result in\n `password.txt`.\n \n-Note that this level of password protection is basic - it's fine for keeping the\n-occasional stranger out, but won't stand up to targeted hacking.\n+**Note that this level of password protection is basic.** It's fine for keeping the occasional stranger out but won't stand up to targeted hacking.\n \n-#### Run on startup\n+### Run on startup\n \n It's nice to have your pi start camp whenever it turns on. Let's make that\n happen. Type `sudo nano /etc/rc.local` to open this file for editing, and add\n the line `nohup python /home/pi/camp/server.py &` before the last line. Note\n that you may need to change the path (`/home/pi/camp/server.py`) to point to\n the right file.\n \n-#### Customization\n+### Customization\n \n The website consists of `index.html`, `login.html`, and `style.css`. These can be\n edited to change the look of camp."
        },
        {
          "filename": "server.py",
          "status": "modified",
          "additions": 5,
          "deletions": 10,
          "patch": "@@ -7,7 +7,6 @@\n import hashlib\n import os\n import time\n-import threading\n import webbrowser\n \n try:\n@@ -42,19 +41,14 @@ def get(self):\n \n     def post(self):\n         password = self.get_argument(\"password\", \"\")\n-        if hashlib.sha512(password).hexdigest() == PASSWORD:\n+        if hashlib.sha512(password.encode()).hexdigest() == PASSWORD:\n             self.set_secure_cookie(COOKIE_NAME, str(time.time()))\n             self.redirect(\"/\")\n         else:\n             time.sleep(1)\n             self.redirect(u\"/login?error\")\n \n \n-class ErrorHandler(tornado.web.RequestHandler):\n-    def get(self):\n-        self.send_error(status_code=403)\n-\n-\n class WebSocket(tornado.websocket.WebSocketHandler):\n \n     def on_message(self, message):\n@@ -128,9 +122,10 @@ def loop(self):\n \n handlers = [(r\"/\", IndexHandler), (r\"/login\", LoginHandler),\n             (r\"/websocket\", WebSocket),\n-            (r\"/static/password.txt\", ErrorHandler),\n-            (r'/static/(.*)', tornado.web.StaticFileHandler, {'path': ROOT})]\n-application = tornado.web.Application(handlers, cookie_secret=PASSWORD)\n+            (r'/static/(.*)', tornado.web.StaticFileHandler, {'path': os.path.join(ROOT, 'static')})]\n+\n+secret = base64.b64encode(os.urandom(50)).decode('ascii')\n+application = tornado.web.Application(handlers, cookie_secret=secret)\n application.listen(args.port)\n \n webbrowser.open(\"http://localhost:%d/\" % args.port, new=2)"
        },
        {
          "filename": "static/client.js",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "static/favicon.ico",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "static/img/example.png",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "static/img/login.png",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "static/img/logo.png",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "static/style.css",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bf6af5c2e5cf713e4050c11c52dd4c55e89880b1",
            "date": "2022-07-21T14:03:39Z",
            "author_login": "patrickfuller"
          },
          {
            "sha": "bbd53a256ed70e79bd8758080936afbf6d738767",
            "date": "2021-01-07T14:15:10Z",
            "author_login": "patrickfuller"
          },
          {
            "sha": "a127b7c6c55e657a6ab94e3a70bfec4b300817d3",
            "date": "2021-01-07T14:05:09Z",
            "author_login": "ma2shita"
          },
          {
            "sha": "9d05fbd39d8d30744f1fa98cc5bc1bc5ccbb7022",
            "date": "2021-01-07T14:02:06Z",
            "author_login": "ma2shita"
          },
          {
            "sha": "ff37232dc901b05970660383f6193517dfc0ea95",
            "date": "2017-12-22T17:19:00Z",
            "author_login": "patrickfuller"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-522",
    "description": "patrickfuller camp up to and including commit bbd53a256ed70e79bd8758080936afbf6d738767 is vulnerable to Incorrect Access Control. Access to the password.txt file is not properly restricted as it is in the root directory served by StaticFileHandler and the Tornado rule to throw a 403 error when password.txt is accessed can be bypassed. Furthermore, it is not necessary to crack the password hash to authenticate with the application because the password hash is also used as the cookie secret, so an attacker can generate his own authentication cookie.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-14T21:15:13.920",
    "last_modified": "2024-11-21T07:14:28.367",
    "fix_date": "2022-07-21T14:03:39Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/171478/Raspberry-Pi-Camera-Server-1.0-Authentication-Bypass.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/ehtec/camp-exploit",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/patrickfuller/camp/commit/bf6af5c2e5cf713e4050c11c52dd4c55e89880b1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://medium.com/%40elias.hohl/authentication-bypass-vulnerability-in-camp-a-raspberry-pi-camera-server-477e5d270904",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://packetstormsecurity.com/files/171478/Raspberry-Pi-Camera-Server-1.0-Authentication-Bypass.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/ehtec/camp-exploit",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/patrickfuller/camp/commit/bf6af5c2e5cf713e4050c11c52dd4c55e89880b1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://medium.com/%40elias.hohl/authentication-bypass-vulnerability-in-camp-a-raspberry-pi-camera-server-477e5d270904",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:01.016592",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "camp",
    "owner": "patrickfuller",
    "created_at": "2014-06-03T17:01:09Z",
    "updated_at": "2024-10-30T22:41:14Z",
    "pushed_at": "2022-07-21T14:03:42Z",
    "size": 1120,
    "stars": 107,
    "forks": 50,
    "open_issues": 8,
    "watchers": 107,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 4333,
      "HTML": 2549,
      "CSS": 1019,
      "JavaScript": 934
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:33:03.089192"
  }
}