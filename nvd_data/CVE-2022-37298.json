{
  "cve_id": "CVE-2022-37298",
  "github_data": {
    "repository": "naparuba/shinken",
    "fix_commit": "2dae40fd1e713aec9e1966a0ab7a580b9180cff2",
    "related_commits": [
      "2dae40fd1e713aec9e1966a0ab7a580b9180cff2",
      "2dae40fd1e713aec9e1966a0ab7a580b9180cff2"
    ],
    "patch_url": "https://github.com/naparuba/shinken/commit/2dae40fd1e713aec9e1966a0ab7a580b9180cff2.patch",
    "fix_commit_details": {
      "sha": "2dae40fd1e713aec9e1966a0ab7a580b9180cff2",
      "commit_date": "2022-02-03T10:42:24Z",
      "author": {
        "login": "naparuba",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix: Dailymotion team (Nicolas Perraud) found a way to bypass pickle.loads protection and execute code from daemon if you can exchange with it's internal port. Now we whitelist allowed class only :)",
        "length": 272,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 230,
        "additions": 204,
        "deletions": 26
      },
      "files": [
        {
          "filename": "Changelog",
          "status": "modified",
          "additions": 47,
          "deletions": 1,
          "patch": "@@ -3,14 +3,60 @@ Shinken ChangeLog\n ########################\n \n \n-3.0.03 - X/X/2017\n+2.4.4 - XX/02/2022\n -----------------\n         CORE ENHANCEMENT\n         Enh: (backport from Enterprise, internal ref #SEF-202) Big boost for the broker daemons, especially for very large setups and slow modules (yes Graphite, I'm looking at you).\n         Enh: (backport from Enterprise ref:#SEF-103) Slight boost of startup time by remiving useless hash computation.\n+        Enh: (Christophe Simon) Force problem/impact evaluation\n+        Enh: (Christophe Simon) added strict object name conflict policy\n+        Enh: (Christophe Simon) better objects balancing between schedulers (#1999)\n+        Enh: (Christophe Simon) Maintenance checks (#1929)\n+        Enh: (Nicolas DUPEUX) Add an option to dump configuration as build by shinken to a json file (#1954)\n+        Enh: (Lionel Sausin) Add instructions to use --install-scripts in pip (#1890)\n+        Enh: (Christophe Simon) extend duplicate_foreach to host/hostgroups (#1905)\n+        Enh: (Christophe Simon) Made memory free an opt-in option\n+        Enh: (Christophe Simon) Explicitly frees memory when receiving new conf\n+        Enh: (Christophe Simon) Harmonized graceful restart\n+        Enh: (David Durieux) Add support of proxy socks5 for shinken cli (#1583)\n+        Enh: (Mateusz Korniak) Add info about exit error code when check finished with error/was signalled. (#1766)\n \n         CORE FIXES\n         Fix: (backport from Enterprise ref:#SEF-76) In some case, we can have \"negative\" value for downtime depth, and then the element will never exit from downtime.\n+        Fix: Dailymotion team (Nicolas Perraud) found a way to bypass pickle.loads protection and execute code from daemon if you can exchange with it's internal port. Now we whitelist allowed class only :)\n+        Fix: (Christophe Simon) Enforced downtime state after retention load\n+        Fix: (V. D'AGOSTINO) Update about.rst to fix a typo\n+        Fix: (Flavien Peyre) multiple notification way when using a contact template (#1867)\n+        Fix: (Dani Rodr\u00edguez) Update typographic errors and explain things in the help messages (#1968)\n+        Fix: (Dani Rodr\u00edguez) brok queues not producing broks (#1971)\n+        Fix: (David Gil) Pin CherryPy dependpency < 9.0.0 (#1983)\n+        Fix: (Vladimir Kazarin) Update dmz-monitoring.rst (#1980)\n+        Fix: (Muhammad Zeeshan Qazi) #1961 : Replace #!/usr/bin/python to #!/usr/bin/python2 (#1979)\n+        Fix: (Dani Rodr\u00edguez) Fixes calls to cProfile in shinken binaries (#1967)\n+        Fix: (wilfriedroset) shinken typo (#1974)\n+        Fix: (efficks) CherryPy >= 3 required (#1943)\n+        Fix: (David Gil) osmatch in nmap discovery process (#1944)\n+        Fix: (Konstantin Shalygin) modules_manager: ignore '.git' dir when load modules. (#1883)\n+        Fix: (Christophe Simon) http_client exceptions management\n+        Fix: (Christophe Simon) OSX (darwin) platform detection\n+        Fix: (Christophe Simon) unicode string parisng in shinken cmdline\n+        Fix: (Olivier Hanesse) missing ini file for shinken.io\n+        Fix: (Olivier Hanesse) #1857 Set default value for proxy/proxy_socks5 for shinken cli\n+        Fix: (Olivier Hanesse) #1845 Add missing paramter for statsd\n+        Fix: (Nicolas Le Manchet) Improve systemd units reliability\n+        Fix: (Fr\u00e9d\u00e9ric MOHIER) Iterate correctly in the Services object (#1842)\n+\n+\n+        MISC FIXES\n+        Fix: (Yann 'Ze' Richard) missing email header to prevent \"Out Of Office\" messages (#2014)\n+        Fix: (se4598*) #1951: Email notification in text mode (#1986)\n+        Enh: (Arthur Lutz) starttls and username/password for SMTP\n+        Fix: (George Shuklin) trace on sening smtp messages\n+        Doc: (rdmo) than -> as\n+        Doc: (dodofox) specify host inheritance for contact/contactgroup (#1872)\n+        Doc: (Elliott Peay) Fix default reactionner port in docs\n+        Fix: (Konstantin Shalygin) Encode attachment. (#1817)\n+        Fix: (Marc Remy) Typo: Update some doc files. (#1821)\n \n \n 2.4.3 - 10/03/2016"
        },
        {
          "filename": "THANKS",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -111,3 +111,4 @@ To Mathieu Parent for his patch about Thruk doc\n To Aina Rakotoson for his bug report about reactionner_tag logic fail, and his patch to fix about it\n To jylenhofgfi for his bug report about shinken cli problems and | grep\n To Alexandre Viau for his patch about passive unmanaged host broks generation\n+To Nicolas Perraud for his warn about a RCE in the daemon exchange"
        },
        {
          "filename": "setup.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -411,7 +411,7 @@ def _error(msg):\n required_pkgs = ['pycurl']\n setup(\n     name=\"Shinken\",\n-    version=\"2.4.3\",\n+    version=\"2.4.4\",\n     packages=find_packages(),\n     package_data={'': package_data},\n     description=\"Shinken is a monitoring framework compatible with Nagios configuration and plugins\","
        },
        {
          "filename": "shinken/safepickle.py",
          "status": "modified",
          "additions": 78,
          "deletions": 11,
          "patch": "@@ -26,29 +26,96 @@\n from cStringIO import StringIO\n \n \n-\n-# Unpickle but strip and remove all __reduce__ things\n-# so we don't allow external code to be executed\n+# Unpickle but strip and remove all __reduce__ things so we don't allow external code to be executed\n # Code from Graphite::carbon project\n class SafeUnpickler(object):\n     PICKLE_SAFE = {\n-        'copy_reg': set(['_reconstructor']),\n-        '__builtin__': set(['object', 'set']),\n+        'copy_reg'                                : set(['_reconstructor']),\n+        '__builtin__'                             : set(['object', 'set']),\n+        \n+        # Be sure to white list all we need to pickle.loads so user cannot exploit other modules (like bottle ^^)\n+        'shinken.acknowledge'                     : set(['Acknowledge']),\n+        'shinken.basemodule'                      : set(['BaseModule']),\n+        'shinken.borg'                            : set(['Borg']),\n+        'shinken.check'                           : set(['Check']),\n+        'shinken.brok'                            : set(['Brok']),\n+        'shinken.commandcall'                     : set(['CommandCall']),\n+        'shinken.comment'                         : set(['Comment']),\n+        'shinken.complexexpression'               : set(['ComplexExpressionNode']),\n+        'shinken.contactdowntime'                 : set(['ContactDowntime']),\n+        'shinken.daterange'                       : set(['Timerange',\n+                                                         'Daterange',\n+                                                         'CalendarDaterange',\n+                                                         'StandardDaterange',\n+                                                         'MonthWeekDayDaterange',\n+                                                         'MonthDateDaterange',\n+                                                         'WeekDayDaterange',\n+                                                         'MonthDayDaterange',\n+                                                         ]),\n+        'shinken.dependencynode'                  : set(['DependencyNode']),\n+        'shinken.downtime'                        : set(['Downtime']),\n+        'shinken.discovery.discoverymanager'      : set(['DiscoveredHost']),\n+        'shinken.eventhandler'                    : set(['EventHandler']),\n+        'shinken.external_command'                : set(['ExternalCommand']),\n+        'shinken.graph'                           : set(['Graph']),\n+        'shinken.message'                         : set(['Message']),\n+        'shinken.modulesctx'                      : set(['ModulesContext']),\n+        'shinken.modulesmanager'                  : set(['ModulesManager']),\n+        'shinken.notification'                    : set(['Notification']),\n+        'shinken.objects.command'                 : set(['DummyCommand', 'Command', 'Commands']),\n+        'shinken.objects.arbiterlink'             : set(['ArbiterLink', 'ArbiterLinks']),\n+        'shinken.objects.businessimpactmodulation': set(['Businessimpactmodulation', 'Businessimpactmodulations']),\n+        'shinken.objects.brokerlink'              : set(['BrokerLink', 'BrokerLinks']),\n+        'shinken.objects.checkmodulation'         : set(['CheckModulation', 'CheckModulations']),\n+        'shinken.objects.config'                  : set(['Config']),\n+        'shinken.objects.contact'                 : set(['Contact', 'Contacts']),\n+        'shinken.objects.contactgroup'            : set(['Contactgroup', 'Contactgroups']),\n+        'shinken.objects.discoveryrule'           : set(['Discoveryrule', 'Discoveryrules']),\n+        'shinken.objects.discoveryrun'            : set(['Discoveryrun', 'Discoveryruns']),\n+        'shinken.objects.escalation'              : set(['Escalation', 'Escalations']),\n+        'shinken.objects.hostdependency'          : set(['Hostdependency', 'Hostdependencies']),\n+        'shinken.objects.host'                    : set(['Host', 'Hosts']),\n+        'shinken.objects.hostescalation'          : set(['Hostescalation', 'Hostescalations']),\n+        'shinken.objects.itemgroup'               : set(['Itemgroup', 'Itemgroups']),\n+        'shinken.objects.hostgroup'               : set(['Hostgroup', 'Hostgroups']),\n+        'shinken.objects.hostextinfo'             : set(['HostExtInfo', 'HostsExtInfo']),\n+        'shinken.objects.item'                    : set(['Item', 'Items']),\n+        'shinken.objects.macromodulation'         : set(['MacroModulation', 'MacroModulations']),\n+        'shinken.objects.matchingitem'            : set(['MatchingItem']),\n+        'shinken.objects.pack'                    : set(['Pack', 'Packs']),\n+        'shinken.objects.notificationway'         : set(['NotificationWay', 'NotificationWays']),\n+        'shinken.objects.module'                  : set(['Module', 'Modules']),\n+        'shinken.objects.pollerlink'              : set(['PollerLink', 'PollerLinks']),\n+        'shinken.objects.reactionnerlink'         : set(['ReactionnerLink', 'ReactionnerLinks']),\n+        'shinken.objects.realm'                   : set(['Realm', 'Realms']),\n+        'shinken.objects.receiverlink'            : set(['ReceiverLink', 'ReceiverLinks']),\n+        'shinken.objects.resultmodulation'        : set(['Resultmodulation', 'Resultmodulations']),\n+        'shinken.objects.satellitelink'           : set(['SatelliteLink', 'SatelliteLinks']),\n+        'shinken.objects.schedulingitem'          : set(['SchedulingItem']),\n+        'shinken.objects.schedulerlink'           : set(['SchedulerLink', 'SchedulerLinks']),\n+        'shinken.objects.service'                 : set(['Service', 'Services']),\n+        'shinken.objects.servicedependency'       : set(['Servicedependency', 'Servicedependencies']),\n+        'shinken.objects.serviceescalation'       : set(['Serviceescalation', 'Serviceescalations']),\n+        'shinken.objects.serviceextinfo'          : set(['ServiceExtInfo', 'ServicesExtInfo']),\n+        'shinken.objects.servicegroup'            : set(['Servicegroup', 'Servicegroups']),\n+        'shinken.objects.timeperiod'              : set(['Timeperiod', 'Timeperiods']),\n+        'shinken.objects.trigger'                 : set(['Trigger', 'Triggers']),\n+        \n     }\n-\n-\n+    \n+    \n     @classmethod\n     def find_class(cls, module, name):\n-        if module not in cls.PICKLE_SAFE and not module.startswith('shinken.'):\n+        if module not in cls.PICKLE_SAFE:\n             raise ValueError('Attempting to unpickle unsafe module %s' % module)\n         __import__(module)\n         mod = sys.modules[module]\n-        if not module.startswith('shinken.') and name not in cls.PICKLE_SAFE[module]:\n+        if name not in cls.PICKLE_SAFE[module]:\n             raise ValueError('Attempting to unpickle unsafe class %s/%s' %\n                              (module, name))\n         return getattr(mod, name)\n-\n-\n+    \n+    \n     @classmethod\n     def loads(cls, pickle_string):\n         pickle_obj = cPickle.Unpickler(StringIO(pickle_string))"
        },
        {
          "filename": "test/test_safe_pickle.py",
          "status": "modified",
          "additions": 77,
          "deletions": 13,
          "patch": "@@ -24,12 +24,15 @@\n \n \n import cPickle as pickle\n+import sys\n+\n from shinken_test import *\n \n from shinken.safepickle import SafeUnpickler\n \n-\n should_not_change = False\n+\n+\n def fff(b):\n     global should_not_change\n     should_not_change = b\n@@ -41,37 +44,98 @@ def __reduce__(self):\n \n \n class TestSafePickle(ShinkenTest):\n-\n+    \n     def setUp(self):\n         pass\n-\n-\n+    \n+    \n     def launch_safe_pickle(self, buf):\n         SafeUnpickler.loads(buf)\n-        \n-        \n+    \n+    \n     def test_safe_pickle(self):\n         global should_not_change\n-\n-        print \"Creating payload\"\n+        \n+        print(\"Creating payload\")\n         buf = pickle.dumps(SadPanda(), 0)\n         should_not_change = False\n-        print \"Payload\", buf\n-        #self.assertEqual('HARD', host.state_type)\n-        print \"Now loading payload\"\n+        print(\"Payload\", buf)\n+        # self.assertEqual('HARD', host.state_type)\n+        print(\"Now loading payload\")\n         pickle.loads(buf)\n         print should_not_change\n         self.assertTrue(should_not_change)\n         \n         # reset and try our fix\n         should_not_change = False\n-        #SafeUnpickler.loads(buf)\n+        \n+        \n+        # SafeUnpickler.loads(buf)\n         def launch_safe_pickle():\n             SafeUnpickler.loads(buf)\n+        \n+        \n         self.assertRaises(ValueError, launch_safe_pickle)\n-        print should_not_change\n+        print (should_not_change)\n         self.assertFalse(should_not_change)\n+    \n+    \n+    # Thanks to security team @Dailymotion, we did have a RCE that ook like a return into libc\n+    # exploit: they are using the bottle._load code (that blindly __import__) so the injected\n+    # code will finally be executed. And as it's shinken.webui.bottle, it's ok with the\n+    # safe_pickle filter. Smart ^^\n+    def test_safe_pickle_exploit_rce(self):\n+        ###### Phase 1: can be exploited\n+        # Arrange\n+        rce_path = '/rce_exploited'\n+        if rce_path in sys.path:\n+            sys.path.remove(rce_path)\n+        \n+        payload = b\"\"\"cshinken.webui.bottlewebui\n+_load\n+(S'sys:path.append(\"%s\")'\n+tR.\"\"\" % rce_path\n+        \n+        # Act\n+        print(\"Now loading payload\")\n+        pickle.loads(payload)\n+        \n+        # Assert\n+        self.assertTrue(rce_path in sys.path)\n+        \n+        ##### Phase 2: no more exploitable by calling the good one\n+        # Arrange\n+        sys.path.remove(rce_path)\n+        \n+        \n+        # SafeUnpickler.loads(buf)\n+        def launch_safe_pickle():\n+            SafeUnpickler.loads(payload)\n         \n         \n+        # Act\n+        self.assertRaises(ValueError, launch_safe_pickle)\n+        \n+        # Assert\n+        self.assertTrue(rce_path not in sys.path)\n+    \n+    \n+    # Thanks to security team @Dailymotion, we did have a RCE that ook like a return into libc\n+    # exploit: they are using the bottle._load code (that blindly __import__) so the injected\n+    # code will finally be executed. And as it's shinken.webui.bottle, it's ok with the\n+    # safe_pickle filter. Smart ^^\n+    def test_safe_pickle_exploit_rce_can_load(self):\n+        ###### Phase 1: can be exploited\n+        # Arrange\n+        \n+        payload = pickle.dumps(Brok('void', {}))\n+        \n+        # Act\n+        b = SafeUnpickler.loads(payload)\n+        \n+        # Assert\n+        self.assertTrue(isinstance(b, Brok))\n+\n+\n if __name__ == '__main__':\n     unittest.main()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "62039bef9bc44fbe1805d66b6d2a9ea8aa9b38b7",
            "date": "2024-04-26T08:16:18Z",
            "author_login": "geektophe"
          },
          {
            "sha": "d0bc3b52518d0728435ec94aca48cfcd90e64006",
            "date": "2024-04-11T17:10:57Z",
            "author_login": "maethor"
          },
          {
            "sha": "a2c8ce17f9ba0785aedc2ffa50b0fa49eae6c4ee",
            "date": "2023-08-16T08:55:52Z",
            "author_login": "geektophe"
          },
          {
            "sha": "4c49e8547af31a62f8c1a9ea4d92cf6b2ceb03af",
            "date": "2023-07-21T07:49:33Z",
            "author_login": "jboulen"
          },
          {
            "sha": "c7c6b0b8b36fc0e1fe8a423cc2c5b51914da8639",
            "date": "2022-11-21T20:28:50Z",
            "author_login": "naparuba"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-287",
    "description": "Shinken Solutions Shinken Monitoring Version 2.4.3 affected is vulnerable to Incorrect Access Control. The SafeUnpickler class found in shinken/safepickle.py implements a weak authentication scheme when unserializing objects passed from monitoring nodes to the Shinken monitoring server.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-20T11:15:10.380",
    "last_modified": "2024-11-21T07:14:42.230",
    "fix_date": "2022-02-03T10:42:24Z"
  },
  "references": [
    {
      "url": "https://github.com/dbyio/cve-2022-37298",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/naparuba/shinken/commit/2dae40fd1e713aec9e1966a0ab7a580b9180cff2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dbyio/cve-2022-37298",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/naparuba/shinken/commit/2dae40fd1e713aec9e1966a0ab7a580b9180cff2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:00.947545",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shinken",
    "owner": "naparuba",
    "created_at": "2010-11-23T11:02:56Z",
    "updated_at": "2024-12-06T01:34:20Z",
    "pushed_at": "2024-04-26T08:16:18Z",
    "size": 50751,
    "stars": 1135,
    "forks": 334,
    "open_issues": 227,
    "watchers": 1135,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 2847466,
      "Shell": 302148,
      "Roff": 25726,
      "Ruby": 19862,
      "PHP": 10710,
      "Makefile": 6228,
      "Perl": 5066,
      "Batchfile": 2934,
      "Java": 2294,
      "Gherkin": 908
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:39:20.606787"
  }
}