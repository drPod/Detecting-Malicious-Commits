{
  "cve_id": "CVE-2022-39213",
  "github_data": {
    "repository": "pandatix/go-cvss",
    "fix_commit": "d9d478ff0c13b8b09ace030db9262f3c2fe031f4",
    "related_commits": [
      "d9d478ff0c13b8b09ace030db9262f3c2fe031f4",
      "d9d478ff0c13b8b09ace030db9262f3c2fe031f4"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d9d478ff0c13b8b09ace030db9262f3c2fe031f4",
      "commit_date": "2022-09-13T17:46:05Z",
      "author": {
        "login": "pandatix",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Improve CVSS v2.0 implementation (0/1 allocs/op)",
        "length": 48,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 716,
        "additions": 468,
        "deletions": 248
      },
      "files": [
        {
          "filename": "20/cvss20.go",
          "status": "modified",
          "additions": 187,
          "deletions": 101,
          "patch": "@@ -3,172 +3,250 @@ package gocvss20\n import (\n \t\"math\"\n \t\"strings\"\n+\t\"sync\"\n+\t\"unsafe\"\n )\n \n+var order = [][]string{\n+\t{\"AV\", \"AC\", \"Au\", \"C\", \"I\", \"A\"}, // Base metrics\n+\t{\"E\", \"RL\", \"RC\"},                 // Temporal metrics\n+\t{\"CDP\", \"TD\", \"CR\", \"IR\", \"AR\"},   // Environmental metrics\n+}\n+\n // ParseVector parses a CVSS v2.0 vector.\n func ParseVector(vector string) (*CVSS20, error) {\n \t// Split parts\n-\tpts := strings.Split(vector, \"/\")\n-\tif len(pts) != 6 && len(pts) != 9 && len(pts) != 14 {\n+\tpts, l := split(vector)\n+\tif l != 6 && l != 9 && l != 14 {\n \t\treturn nil, ErrTooShortVector\n \t}\n+\tpts = pts[:l]\n \n \t// Work on each CVSS part\n \tcvss20 := &CVSS20{\n-\t\tBase: Base{},\n-\t\tTemporal: Temporal{\n-\t\t\tExploitability:   \"ND\",\n-\t\t\tRemediationLevel: \"ND\",\n-\t\t\tReportConfidence: \"ND\",\n+\t\tbase: base{},\n+\t\ttemporal: temporal{\n+\t\t\texploitability:   \"ND\",\n+\t\t\tremediationLevel: \"ND\",\n+\t\t\treportConfidence: \"ND\",\n \t\t},\n-\t\tEnvironmental: Environmental{\n-\t\t\tCollateralDamagePotential:  \"ND\",\n-\t\t\tTargetDistribution:         \"ND\",\n-\t\t\tConfidentialityRequirement: \"ND\",\n-\t\t\tIntegrityRequirement:       \"ND\",\n-\t\t\tAvailabilityRequirement:    \"ND\",\n+\t\tenvironmental: environmental{\n+\t\t\tcollateralDamagePotential:  \"ND\",\n+\t\t\ttargetDistribution:         \"ND\",\n+\t\t\tconfidentialityRequirement: \"ND\",\n+\t\t\tintegrityRequirement:       \"ND\",\n+\t\t\tavailabilityRequirement:    \"ND\",\n \t\t},\n \t}\n \n-\t// Parse metrics in order\n-\tslcs := [][]string{\n-\t\t{\"AV\", \"AC\", \"Au\", \"C\", \"I\", \"A\"}, // Base metrics\n-\t\t{\"E\", \"RL\", \"RC\"},                 // Temporal metrics\n-\t\t{\"CDP\", \"TD\", \"CR\", \"IR\", \"AR\"},   // Environmental metrics\n-\t}\n \tslci := 0\n-\tcurrSlc := slcs[slci]\n \ti := 0\n \tfor _, pt := range pts {\n \t\tabv, v, _ := strings.Cut(pt, \":\")\n-\t\tif abv != currSlc[i] {\n+\t\tif slci == 4 {\n+\t\t\treturn nil, &ErrDefinedN{Abv: abv}\n+\t\t}\n+\t\tif abv != order[slci][i] {\n \t\t\treturn nil, ErrInvalidMetricOrder\n \t\t}\n+\n \t\tif err := cvss20.Set(abv, v); err != nil {\n \t\t\treturn nil, err\n \t\t}\n+\n \t\t// Go to next element in slice, or next slice if fully consumed\n \t\ti++\n-\t\tif i == len(currSlc) {\n+\t\tif i == len(order[slci]) {\n \t\t\tslci++\n-\t\t\tcurrSlc = slcs[slci]\n \t\t\ti = 0\n \t\t}\n \t}\n \n \treturn cvss20, nil\n }\n \n+var splitPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn make([]string, 14)\n+\t},\n+}\n+\n+func split(vector string) ([]string, int) {\n+\tpartsPtr := splitPool.Get()\n+\tdefer splitPool.Put(partsPtr)\n+\tparts := partsPtr.([]string)\n+\n+\tstart := 0\n+\tcurr := 0\n+\tl := len(vector)\n+\ti := 0\n+\tfor ; i < l; i++ {\n+\t\tif vector[i] == '/' {\n+\t\t\tparts[curr] = vector[start:i]\n+\n+\t\t\tstart = i + 1\n+\t\t\tcurr++\n+\n+\t\t\tif curr == 13 {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+\tparts[curr] = vector[start:]\n+\treturn parts, curr + 1\n+}\n+\n func (cvss20 CVSS20) Vector() string {\n-\ts := \"\"\n+\tl := lenVec(&cvss20)\n+\tb := make([]byte, 0, l)\n+\n \t// Base\n-\ts += \"AV:\" + cvss20.AccessVector\n-\ts += \"/AC:\" + cvss20.AccessComplexity\n-\ts += \"/Au:\" + cvss20.Authentication\n-\ts += \"/C:\" + cvss20.ConfidentialityImpact\n-\ts += \"/I:\" + cvss20.IntegrityImpact\n-\ts += \"/A:\" + cvss20.AvailabilityImpact\n-\t// Temporal, if any is defined\n-\tif cvss20.Exploitability != \"ND\" || cvss20.RemediationLevel != \"ND\" || cvss20.ReportConfidence != \"ND\" {\n-\t\ts += \"/E:\" + cvss20.Exploitability\n-\t\ts += \"/RL:\" + cvss20.RemediationLevel\n-\t\ts += \"/RC:\" + cvss20.ReportConfidence\n+\tapp(&b, \"AV:\", cvss20.accessVector)\n+\tapp(&b, \"/AC:\", cvss20.accessComplexity)\n+\tapp(&b, \"/Au:\", cvss20.authentication)\n+\tapp(&b, \"/C:\", cvss20.confidentialityImpact)\n+\tapp(&b, \"/I:\", cvss20.integrityImpact)\n+\tapp(&b, \"/A:\", cvss20.availabilityImpact)\n+\n+\t// Temporal\n+\tif cvss20.exploitability != \"ND\" || cvss20.remediationLevel != \"ND\" || cvss20.reportConfidence != \"ND\" {\n+\t\tapp(&b, \"/E:\", cvss20.exploitability)\n+\t\tapp(&b, \"/RL:\", cvss20.remediationLevel)\n+\t\tapp(&b, \"/RC:\", cvss20.reportConfidence)\n \t}\n-\t// Environmental, if any is defined\n-\tif cvss20.CollateralDamagePotential != \"ND\" || cvss20.TargetDistribution != \"ND\" || cvss20.ConfidentialityRequirement != \"ND\" || cvss20.IntegrityRequirement != \"ND\" || cvss20.AvailabilityRequirement != \"ND\" {\n-\t\ts += \"/CDP:\" + cvss20.CollateralDamagePotential\n-\t\ts += \"/TD:\" + cvss20.TargetDistribution\n-\t\ts += \"/CR:\" + cvss20.ConfidentialityRequirement\n-\t\ts += \"/IR:\" + cvss20.IntegrityRequirement\n-\t\ts += \"/AR:\" + cvss20.AvailabilityRequirement\n+\n+\t// Environmental\n+\tif cvss20.collateralDamagePotential != \"ND\" || cvss20.targetDistribution != \"ND\" || cvss20.confidentialityRequirement != \"ND\" || cvss20.integrityRequirement != \"ND\" || cvss20.availabilityRequirement != \"ND\" {\n+\t\tapp(&b, \"/CDP:\", cvss20.collateralDamagePotential)\n+\t\tapp(&b, \"/TD:\", cvss20.targetDistribution)\n+\t\tapp(&b, \"/CR:\", cvss20.confidentialityRequirement)\n+\t\tapp(&b, \"/IR:\", cvss20.integrityRequirement)\n+\t\tapp(&b, \"/AR:\", cvss20.availabilityRequirement)\n \t}\n-\treturn s\n+\n+\treturn *(*string)(unsafe.Pointer(&b))\n+}\n+\n+func lenVec(cvss20 *CVSS20) int {\n+\t// Base:\n+\t// - AV, AC, Au: 4\n+\t// - C, I, A: 3\n+\t// - separators: 5\n+\t// Total: 3*4 + 3*3 + 5 = 30\n+\tl := 26\n+\n+\t// Temporal:\n+\t// - E: 2 + len(v)\n+\t// - RL: 3 + len(v)\n+\t// - RC: 3 + len(v)\n+\t// - separators: 3\n+\t// Total: 11 + 3*len(v)\n+\tif cvss20.exploitability != \"ND\" || cvss20.remediationLevel != \"ND\" || cvss20.reportConfidence != \"ND\" {\n+\t\tl += 11 + len(cvss20.exploitability) + len(cvss20.remediationLevel) + len(cvss20.reportConfidence)\n+\t}\n+\n+\t// Environmental:\n+\t// - CDP: 4 + len(v)\n+\t// - TD: 3 + len(v)\n+\t// - CR, IR, AR: 3 + len(v)\n+\t// - separators: 5\n+\t// Total: 21 + 5*len(v)\n+\tif cvss20.collateralDamagePotential != \"ND\" || cvss20.targetDistribution != \"ND\" || cvss20.confidentialityRequirement != \"ND\" || cvss20.integrityRequirement != \"ND\" || cvss20.availabilityRequirement != \"ND\" {\n+\t\tl += 21 + len(cvss20.collateralDamagePotential) + len(cvss20.targetDistribution) + len(cvss20.confidentialityRequirement) + len(cvss20.integrityRequirement) + len(cvss20.availabilityRequirement)\n+\t}\n+\n+\treturn l\n+}\n+\n+func app(b *[]byte, pre, v string) {\n+\t*b = append(*b, pre...)\n+\t*b = append(*b, v...)\n }\n \n // CVSS20 embeds all the metric values defined by the CVSS v2.0\n // rev2 specification.\n // Attributes values must not be manipulated directly. Use Get\n // and Set methods.\n type CVSS20 struct {\n-\tBase\n-\tTemporal\n-\tEnvironmental\n+\tbase\n+\ttemporal\n+\tenvironmental\n }\n \n-// Base is the group of metrics defined with such name by the\n+// base is the group of metrics defined with such name by the\n // first.org CVSS v2.0 rev2 specification.\n // Mandatory.\n-type Base struct {\n+type base struct {\n \t// AV -> [L,A,N]\n-\tAccessVector string\n+\taccessVector string\n \t// AC -> [H,M,L]\n-\tAccessComplexity string\n+\taccessComplexity string\n \t// Au -> [M,S,N]\n-\tAuthentication string\n+\tauthentication string\n \t// C -> [N,P,C]\n-\tConfidentialityImpact string\n+\tconfidentialityImpact string\n \t// I -> [N,P,C]\n-\tIntegrityImpact string\n+\tintegrityImpact string\n \t// A -> [N,P,C]\n-\tAvailabilityImpact string\n+\tavailabilityImpact string\n }\n \n-// Temporal is the group of metrics defined with such name by the\n+// temporal is the group of metrics defined with such name by the\n // first.org CVSS v2.0 rev2 specification.\n // Not mandatory.\n-type Temporal struct {\n+type temporal struct {\n \t// E -> [U,POC,F,F,H,ND]\n-\tExploitability string\n+\texploitability string\n \t// RL -> [OF,TF,W,U,ND]\n-\tRemediationLevel string\n+\tremediationLevel string\n \t// RC -> [UC,UR,C,ND]\n-\tReportConfidence string\n+\treportConfidence string\n }\n \n-// Environmental is the group of metrics defined with such name by the\n+// environmental is the group of metrics defined with such name by the\n // first.org CVSS v2.0 rev2 specification.\n // Not mandatory.\n-type Environmental struct {\n+type environmental struct {\n \t// CDP -> [N,L,LM,MH,H,ND]\n-\tCollateralDamagePotential string\n+\tcollateralDamagePotential string\n \t// TD -> [N,L,M,H,ND]\n-\tTargetDistribution string\n+\ttargetDistribution string\n \t// CR,IR,AR -> [L,M,H,ND]\n-\tConfidentialityRequirement string\n-\tIntegrityRequirement       string\n-\tAvailabilityRequirement    string\n+\tconfidentialityRequirement string\n+\tintegrityRequirement       string\n+\tavailabilityRequirement    string\n }\n \n func (cvss20 CVSS20) Get(abv string) (string, error) {\n \tswitch abv {\n \tcase \"AV\":\n-\t\treturn cvss20.AccessVector, nil\n+\t\treturn cvss20.accessVector, nil\n \tcase \"AC\":\n-\t\treturn cvss20.AccessComplexity, nil\n+\t\treturn cvss20.accessComplexity, nil\n \tcase \"Au\":\n-\t\treturn cvss20.Authentication, nil\n+\t\treturn cvss20.authentication, nil\n \tcase \"C\":\n-\t\treturn cvss20.ConfidentialityImpact, nil\n+\t\treturn cvss20.confidentialityImpact, nil\n \tcase \"I\":\n-\t\treturn cvss20.IntegrityImpact, nil\n+\t\treturn cvss20.integrityImpact, nil\n \tcase \"A\":\n-\t\treturn cvss20.AvailabilityImpact, nil\n+\t\treturn cvss20.availabilityImpact, nil\n \tcase \"E\":\n-\t\treturn cvss20.Exploitability, nil\n+\t\treturn cvss20.exploitability, nil\n \tcase \"RL\":\n-\t\treturn cvss20.RemediationLevel, nil\n+\t\treturn cvss20.remediationLevel, nil\n \tcase \"RC\":\n-\t\treturn cvss20.ReportConfidence, nil\n+\t\treturn cvss20.reportConfidence, nil\n \tcase \"CDP\":\n-\t\treturn cvss20.CollateralDamagePotential, nil\n+\t\treturn cvss20.collateralDamagePotential, nil\n \tcase \"TD\":\n-\t\treturn cvss20.TargetDistribution, nil\n+\t\treturn cvss20.targetDistribution, nil\n \tcase \"CR\":\n-\t\treturn cvss20.ConfidentialityRequirement, nil\n+\t\treturn cvss20.confidentialityRequirement, nil\n \tcase \"IR\":\n-\t\treturn cvss20.IntegrityRequirement, nil\n+\t\treturn cvss20.integrityRequirement, nil\n \tcase \"AR\":\n-\t\treturn cvss20.AvailabilityRequirement, nil\n+\t\treturn cvss20.availabilityRequirement, nil\n \tdefault:\n \t\treturn \"\", &ErrInvalidMetric{Abv: abv}\n \t}\n@@ -181,74 +259,74 @@ func (cvss20 *CVSS20) Set(abv string, value string) error {\n \t\tif err := validate(value, []string{\"L\", \"A\", \"N\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.AccessVector = value\n+\t\tcvss20.accessVector = value\n \tcase \"AC\":\n \t\tif err := validate(value, []string{\"H\", \"M\", \"L\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.AccessComplexity = value\n+\t\tcvss20.accessComplexity = value\n \tcase \"Au\":\n \t\tif err := validate(value, []string{\"M\", \"S\", \"N\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.Authentication = value\n+\t\tcvss20.authentication = value\n \tcase \"C\":\n \t\tif err := validate(value, []string{\"N\", \"P\", \"C\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.ConfidentialityImpact = value\n+\t\tcvss20.confidentialityImpact = value\n \tcase \"I\":\n \t\tif err := validate(value, []string{\"N\", \"P\", \"C\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.IntegrityImpact = value\n+\t\tcvss20.integrityImpact = value\n \tcase \"A\":\n \t\tif err := validate(value, []string{\"N\", \"P\", \"C\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.AvailabilityImpact = value\n+\t\tcvss20.availabilityImpact = value\n \t// Temporal\n \tcase \"E\":\n \t\tif err := validate(value, []string{\"U\", \"POC\", \"F\", \"H\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.Exploitability = value\n+\t\tcvss20.exploitability = value\n \tcase \"RL\":\n \t\tif err := validate(value, []string{\"OF\", \"TF\", \"W\", \"U\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.RemediationLevel = value\n+\t\tcvss20.remediationLevel = value\n \tcase \"RC\":\n \t\tif err := validate(value, []string{\"UC\", \"UR\", \"C\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.ReportConfidence = value\n+\t\tcvss20.reportConfidence = value\n \t// Environmental\n \tcase \"CDP\":\n \t\tif err := validate(value, []string{\"N\", \"L\", \"LM\", \"MH\", \"H\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.CollateralDamagePotential = value\n+\t\tcvss20.collateralDamagePotential = value\n \tcase \"TD\":\n \t\tif err := validate(value, []string{\"N\", \"L\", \"M\", \"H\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.TargetDistribution = value\n+\t\tcvss20.targetDistribution = value\n \tcase \"CR\":\n \t\tif err := validate(value, []string{\"L\", \"M\", \"H\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.ConfidentialityRequirement = value\n+\t\tcvss20.confidentialityRequirement = value\n \tcase \"IR\":\n \t\tif err := validate(value, []string{\"L\", \"M\", \"H\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.IntegrityRequirement = value\n+\t\tcvss20.integrityRequirement = value\n \tcase \"AR\":\n \t\tif err := validate(value, []string{\"L\", \"M\", \"H\", \"ND\"}); err != nil {\n \t\t\treturn err\n \t\t}\n-\t\tcvss20.AvailabilityRequirement = value\n+\t\tcvss20.availabilityRequirement = value\n \tdefault:\n \t\treturn &ErrInvalidMetric{Abv: abv}\n \t}\n@@ -267,32 +345,40 @@ func validate(value string, enabled []string) error {\n \n // BaseScore returns the CVSS v2.0's base score.\n func (cvss20 CVSS20) BaseScore() float64 {\n-\timpact := 10.41 * (1 - (1-cia(cvss20.ConfidentialityImpact))*(1-cia(cvss20.IntegrityImpact))*(1-cia(cvss20.AvailabilityImpact)))\n+\timpact := cvss20.Impact()\n \tfimpact := 0.0\n \tif impact != 0 {\n \t\tfimpact = 1.176\n \t}\n-\texploitability := 20 * accessVector(cvss20.AccessVector) * accessComplexity(cvss20.AccessComplexity) * authentication(cvss20.Authentication)\n+\texploitability := cvss20.Exploitability()\n \treturn roundTo1Decimal(((0.6 * impact) + (0.4 * exploitability) - 1.5) * fimpact)\n }\n \n+func (cvss20 CVSS20) Impact() float64 {\n+\treturn 10.41 * (1 - (1-cia(cvss20.confidentialityImpact))*(1-cia(cvss20.integrityImpact))*(1-cia(cvss20.availabilityImpact)))\n+}\n+\n+func (cvss20 CVSS20) Exploitability() float64 {\n+\treturn 20 * accessVector(cvss20.accessVector) * accessComplexity(cvss20.accessComplexity) * authentication(cvss20.authentication)\n+}\n+\n // TemporalScore returns the CVSS v2.0's temporal score.\n func (cvss20 CVSS20) TemporalScore() float64 {\n-\treturn roundTo1Decimal(cvss20.BaseScore() * exploitability(cvss20.Exploitability) * remediationLevel(cvss20.RemediationLevel) * reportConfidence(cvss20.ReportConfidence))\n+\treturn roundTo1Decimal(cvss20.BaseScore() * exploitability(cvss20.exploitability) * remediationLevel(cvss20.remediationLevel) * reportConfidence(cvss20.reportConfidence))\n }\n \n // EnvironmentalScore returns the CVSS v2.0's environmental score.\n func (cvss20 CVSS20) EnvironmentalScore() float64 {\n \t// Recompute base score\n-\tadjustedImpact := math.Min(10, 10.41*(1-(1-cia(cvss20.ConfidentialityImpact)*ciar(cvss20.ConfidentialityRequirement))*(1-cia(cvss20.IntegrityImpact)*ciar(cvss20.IntegrityRequirement))*(1-cia(cvss20.AvailabilityImpact)*ciar(cvss20.AvailabilityRequirement))))\n+\tadjustedImpact := math.Min(10, 10.41*(1-(1-cia(cvss20.confidentialityImpact)*ciar(cvss20.confidentialityRequirement))*(1-cia(cvss20.integrityImpact)*ciar(cvss20.integrityRequirement))*(1-cia(cvss20.availabilityImpact)*ciar(cvss20.availabilityRequirement))))\n \tfimpactBase := 0.0\n \tif adjustedImpact != 0 {\n \t\tfimpactBase = 1.176\n \t}\n-\texpltBase := 20 * accessVector(cvss20.AccessVector) * accessComplexity(cvss20.AccessComplexity) * authentication(cvss20.Authentication)\n+\texpltBase := 20 * accessVector(cvss20.accessVector) * accessComplexity(cvss20.accessComplexity) * authentication(cvss20.authentication)\n \trecBase := roundTo1Decimal(((0.6 * adjustedImpact) + (0.4 * expltBase) - 1.5) * fimpactBase)\n-\tadjustedTemporal := roundTo1Decimal(recBase * exploitability(cvss20.Exploitability) * remediationLevel(cvss20.RemediationLevel) * reportConfidence(cvss20.ReportConfidence))\n-\treturn roundTo1Decimal((adjustedTemporal + (10-adjustedTemporal)*collateralDamagePotential(cvss20.CollateralDamagePotential)) * targetDistribution(cvss20.TargetDistribution))\n+\tadjustedTemporal := roundTo1Decimal(recBase * exploitability(cvss20.exploitability) * remediationLevel(cvss20.remediationLevel) * reportConfidence(cvss20.reportConfidence))\n+\treturn roundTo1Decimal((adjustedTemporal + (10-adjustedTemporal)*collateralDamagePotential(cvss20.collateralDamagePotential)) * targetDistribution(cvss20.targetDistribution))\n }\n \n // Helpers to compute CVSS v2.0 scores."
        },
        {
          "filename": "20/cvss20_bench_test.go",
          "status": "added",
          "additions": 100,
          "deletions": 0,
          "patch": "@@ -0,0 +1,100 @@\n+package gocvss20_test\n+\n+import (\n+\t\"testing\"\n+\n+\tgocvss20 \"github.com/pandatix/go-cvss/20\"\n+)\n+\n+var Gcvss20 *gocvss20.CVSS20\n+var Gerr error\n+\n+func BenchmarkParseVector_Base(b *testing.B) {\n+\tbenchmarkParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C\", b)\n+}\n+\n+func BenchmarkParseVector_WithTempAndEnv(b *testing.B) {\n+\tbenchmarkParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\", b)\n+}\n+\n+func benchmarkParseVector(vector string, b *testing.B) {\n+\tvar cvss20 *gocvss20.CVSS20\n+\tvar err error\n+\tb.ResetTimer()\n+\tfor i := 0; i < b.N; i++ {\n+\t\tcvss20, err = gocvss20.ParseVector(vector)\n+\t}\n+\tGcvss20 = cvss20\n+\tGerr = err\n+}\n+\n+var Gstr string\n+\n+func BenchmarkCVSS20Vector(b *testing.B) {\n+\tcvss20, _ := gocvss20.ParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\")\n+\tvar str string\n+\tb.ResetTimer()\n+\tfor i := 0; i < b.N; i++ {\n+\t\tstr = cvss20.Vector()\n+\t}\n+\tGstr = str\n+}\n+\n+var Gget string\n+\n+func BenchmarkCVSS20Get(b *testing.B) {\n+\tconst abv = \"Au\"\n+\tcvss20, _ := gocvss20.ParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\")\n+\tvar get string\n+\tvar err error\n+\tb.ResetTimer()\n+\tfor i := 0; i < b.N; i++ {\n+\t\tget, err = cvss20.Get(abv)\n+\t}\n+\tGget = get\n+\tGerr = err\n+}\n+\n+func BenchmarkCVSS20Set(b *testing.B) {\n+\tconst abv = \"Au\"\n+\tconst value = \"S\"\n+\tcvss20, _ := gocvss20.ParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\")\n+\tvar err error\n+\tb.ResetTimer()\n+\tfor i := 0; i < b.N; i++ {\n+\t\terr = cvss20.Set(abv, value)\n+\t}\n+\tGerr = err\n+}\n+\n+var Gscore float64\n+\n+func BenchmarkCVSS20BaseScore(b *testing.B) {\n+\tvar score float64\n+\tcvss20, _ := gocvss20.ParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\")\n+\tb.ResetTimer()\n+\tfor i := 0; i < b.N; i++ {\n+\t\tscore = cvss20.BaseScore()\n+\t}\n+\tGscore = score\n+}\n+\n+func BenchmarkCVSS20TemporalScore(b *testing.B) {\n+\tvar score float64\n+\tcvss20, _ := gocvss20.ParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\")\n+\tb.ResetTimer()\n+\tfor i := 0; i < b.N; i++ {\n+\t\tscore = cvss20.TemporalScore()\n+\t}\n+\tGscore = score\n+}\n+\n+func BenchmarkCVSS20EnvironmentalScore(b *testing.B) {\n+\tvar score float64\n+\tcvss20, _ := gocvss20.ParseVector(\"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\")\n+\tb.ResetTimer()\n+\tfor i := 0; i < b.N; i++ {\n+\t\tscore = cvss20.EnvironmentalScore()\n+\t}\n+\tGscore = score\n+}"
        },
        {
          "filename": "20/cvss20_fuzz_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,9 +1,7 @@\n-package gocvss20_test\n+package gocvss20\n \n import (\n \t\"testing\"\n-\n-\tgocvss20 \"github.com/pandatix/go-cvss/20\"\n )\n \n func FuzzParseVector(f *testing.F) {\n@@ -12,7 +10,7 @@ func FuzzParseVector(f *testing.F) {\n \t}\n \n \tf.Fuzz(func(t *testing.T, vector string) {\n-\t\tcvss20, err := gocvss20.ParseVector(vector)\n+\t\tcvss20, err := ParseVector(vector)\n \n \t\tif err != nil {\n \t\t\tif cvss20 != nil {"
        },
        {
          "filename": "20/cvss20_test.go",
          "status": "modified",
          "additions": 146,
          "deletions": 113,
          "patch": "@@ -1,95 +1,128 @@\n-package gocvss20_test\n+package gocvss20\n \n import (\n \t\"testing\"\n \n-\tgocvss20 \"github.com/pandatix/go-cvss/20\"\n \t\"github.com/stretchr/testify/assert\"\n )\n \n var testsParseVector = map[string]struct {\n \tVector         string\n-\tExpectedCVSS20 *gocvss20.CVSS20\n+\tExpectedCVSS20 *CVSS20\n \tExpectedErr    error\n }{\n \t\"CVSS v2.0 Guide Section 3.3.1 CVE-2002-0392\": {\n \t\tVector: \"AV:N/AC:L/Au:N/C:N/I:N/A:C/E:F/RL:OF/RC:C\",\n-\t\tExpectedCVSS20: &gocvss20.CVSS20{\n-\t\t\tBase: gocvss20.Base{\n-\t\t\t\tAccessVector:          \"N\",\n-\t\t\t\tAccessComplexity:      \"L\",\n-\t\t\t\tAuthentication:        \"N\",\n-\t\t\t\tConfidentialityImpact: \"N\",\n-\t\t\t\tIntegrityImpact:       \"N\",\n-\t\t\t\tAvailabilityImpact:    \"C\",\n+\t\tExpectedCVSS20: &CVSS20{\n+\t\t\tbase: base{\n+\t\t\t\taccessVector:          \"N\",\n+\t\t\t\taccessComplexity:      \"L\",\n+\t\t\t\tauthentication:        \"N\",\n+\t\t\t\tconfidentialityImpact: \"N\",\n+\t\t\t\tintegrityImpact:       \"N\",\n+\t\t\t\tavailabilityImpact:    \"C\",\n \t\t\t},\n-\t\t\tTemporal: gocvss20.Temporal{\n-\t\t\t\tExploitability:   \"F\",\n-\t\t\t\tRemediationLevel: \"OF\",\n-\t\t\t\tReportConfidence: \"C\",\n+\t\t\ttemporal: temporal{\n+\t\t\t\texploitability:   \"F\",\n+\t\t\t\tremediationLevel: \"OF\",\n+\t\t\t\treportConfidence: \"C\",\n \t\t\t},\n-\t\t\tEnvironmental: gocvss20.Environmental{\n-\t\t\t\tCollateralDamagePotential:  \"ND\",\n-\t\t\t\tTargetDistribution:         \"ND\",\n-\t\t\t\tConfidentialityRequirement: \"ND\",\n-\t\t\t\tIntegrityRequirement:       \"ND\",\n-\t\t\t\tAvailabilityRequirement:    \"ND\",\n+\t\t\tenvironmental: environmental{\n+\t\t\t\tcollateralDamagePotential:  \"ND\",\n+\t\t\t\ttargetDistribution:         \"ND\",\n+\t\t\t\tconfidentialityRequirement: \"ND\",\n+\t\t\t\tintegrityRequirement:       \"ND\",\n+\t\t\t\tavailabilityRequirement:    \"ND\",\n \t\t\t},\n \t\t},\n \t\tExpectedErr: nil,\n \t},\n \t\"CVSS v2.0 Guide Section 3.3.2 CVE-2003-0818\": {\n \t\tVector: \"AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:OF/RC:C\",\n-\t\tExpectedCVSS20: &gocvss20.CVSS20{\n-\t\t\tBase: gocvss20.Base{\n-\t\t\t\tAccessVector:          \"N\",\n-\t\t\t\tAccessComplexity:      \"L\",\n-\t\t\t\tAuthentication:        \"N\",\n-\t\t\t\tConfidentialityImpact: \"C\",\n-\t\t\t\tIntegrityImpact:       \"C\",\n-\t\t\t\tAvailabilityImpact:    \"C\",\n+\t\tExpectedCVSS20: &CVSS20{\n+\t\t\tbase: base{\n+\t\t\t\taccessVector:          \"N\",\n+\t\t\t\taccessComplexity:      \"L\",\n+\t\t\t\tauthentication:        \"N\",\n+\t\t\t\tconfidentialityImpact: \"C\",\n+\t\t\t\tintegrityImpact:       \"C\",\n+\t\t\t\tavailabilityImpact:    \"C\",\n \t\t\t},\n-\t\t\tTemporal: gocvss20.Temporal{\n-\t\t\t\tExploitability:   \"F\",\n-\t\t\t\tRemediationLevel: \"OF\",\n-\t\t\t\tReportConfidence: \"C\",\n+\t\t\ttemporal: temporal{\n+\t\t\t\texploitability:   \"F\",\n+\t\t\t\tremediationLevel: \"OF\",\n+\t\t\t\treportConfidence: \"C\",\n \t\t\t},\n-\t\t\tEnvironmental: gocvss20.Environmental{\n-\t\t\t\tCollateralDamagePotential:  \"ND\",\n-\t\t\t\tTargetDistribution:         \"ND\",\n-\t\t\t\tConfidentialityRequirement: \"ND\",\n-\t\t\t\tIntegrityRequirement:       \"ND\",\n-\t\t\t\tAvailabilityRequirement:    \"ND\",\n+\t\t\tenvironmental: environmental{\n+\t\t\t\tcollateralDamagePotential:  \"ND\",\n+\t\t\t\ttargetDistribution:         \"ND\",\n+\t\t\t\tconfidentialityRequirement: \"ND\",\n+\t\t\t\tintegrityRequirement:       \"ND\",\n+\t\t\t\tavailabilityRequirement:    \"ND\",\n \t\t\t},\n \t\t},\n \t\tExpectedErr: nil,\n \t},\n \t\"CVSS v2.0 Guide Section 3.3.3 CVE-2003-0062\": {\n \t\tVector: \"AV:L/AC:H/Au:N/C:C/I:C/A:C/E:POC/RL:OF/RC:C\",\n-\t\tExpectedCVSS20: &gocvss20.CVSS20{\n-\t\t\tBase: gocvss20.Base{\n-\t\t\t\tAccessVector:          \"L\",\n-\t\t\t\tAccessComplexity:      \"H\",\n-\t\t\t\tAuthentication:        \"N\",\n-\t\t\t\tConfidentialityImpact: \"C\",\n-\t\t\t\tIntegrityImpact:       \"C\",\n-\t\t\t\tAvailabilityImpact:    \"C\",\n+\t\tExpectedCVSS20: &CVSS20{\n+\t\t\tbase: base{\n+\t\t\t\taccessVector:          \"L\",\n+\t\t\t\taccessComplexity:      \"H\",\n+\t\t\t\tauthentication:        \"N\",\n+\t\t\t\tconfidentialityImpact: \"C\",\n+\t\t\t\tintegrityImpact:       \"C\",\n+\t\t\t\tavailabilityImpact:    \"C\",\n \t\t\t},\n-\t\t\tTemporal: gocvss20.Temporal{\n-\t\t\t\tExploitability:   \"POC\",\n-\t\t\t\tRemediationLevel: \"OF\",\n-\t\t\t\tReportConfidence: \"C\",\n+\t\t\ttemporal: temporal{\n+\t\t\t\texploitability:   \"POC\",\n+\t\t\t\tremediationLevel: \"OF\",\n+\t\t\t\treportConfidence: \"C\",\n \t\t\t},\n-\t\t\tEnvironmental: gocvss20.Environmental{\n-\t\t\t\tCollateralDamagePotential:  \"ND\",\n-\t\t\t\tTargetDistribution:         \"ND\",\n-\t\t\t\tConfidentialityRequirement: \"ND\",\n-\t\t\t\tIntegrityRequirement:       \"ND\",\n-\t\t\t\tAvailabilityRequirement:    \"ND\",\n+\t\t\tenvironmental: environmental{\n+\t\t\t\tcollateralDamagePotential:  \"ND\",\n+\t\t\t\ttargetDistribution:         \"ND\",\n+\t\t\t\tconfidentialityRequirement: \"ND\",\n+\t\t\t\tintegrityRequirement:       \"ND\",\n+\t\t\t\tavailabilityRequirement:    \"ND\",\n \t\t\t},\n \t\t},\n \t\tExpectedErr: nil,\n \t},\n+\t\"all-defined\": {\n+\t\tVector: \"AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M\",\n+\t\tExpectedCVSS20: &CVSS20{\n+\t\t\tbase: base{\n+\t\t\t\taccessVector:          \"N\",\n+\t\t\t\taccessComplexity:      \"L\",\n+\t\t\t\tauthentication:        \"N\",\n+\t\t\t\tconfidentialityImpact: \"P\",\n+\t\t\t\tintegrityImpact:       \"P\",\n+\t\t\t\tavailabilityImpact:    \"C\",\n+\t\t\t},\n+\t\t\ttemporal: temporal{\n+\t\t\t\texploitability:   \"U\",\n+\t\t\t\tremediationLevel: \"OF\",\n+\t\t\t\treportConfidence: \"C\",\n+\t\t\t},\n+\t\t\tenvironmental: environmental{\n+\t\t\t\tcollateralDamagePotential:  \"MH\",\n+\t\t\t\ttargetDistribution:         \"H\",\n+\t\t\t\tconfidentialityRequirement: \"M\",\n+\t\t\t\tintegrityRequirement:       \"M\",\n+\t\t\t\tavailabilityRequirement:    \"M\",\n+\t\t\t},\n+\t\t},\n+\t\tExpectedErr: nil,\n+\t},\n+\t\"Fuzz_50620a37c4a7716a77a14602b4bcc7b02e6f751d0a714ed796d9b04402c745ac\": {\n+\t\t// This fuzz crasher enabled detecting that the split function\n+\t\t// (comming from the optimization step) was doing an Out-Of-Bounds\n+\t\t// Write (CWE-787) if the vector was only composed of '/'.\n+\t\tVector:         \"//////////////\",\n+\t\tExpectedCVSS20: nil,\n+\t\tExpectedErr:    ErrInvalidMetricOrder,\n+\t},\n }\n \n func TestParseVector(t *testing.T) {\n@@ -99,7 +132,7 @@ func TestParseVector(t *testing.T) {\n \t\tt.Run(testname, func(t *testing.T) {\n \t\t\tassert := assert.New(t)\n \n-\t\t\tcvss20, err := gocvss20.ParseVector(tt.Vector)\n+\t\t\tcvss20, err := ParseVector(tt.Vector)\n \n \t\t\tassert.Equal(tt.ExpectedCVSS20, cvss20)\n \t\t\tassert.Equal(tt.ExpectedErr, err)\n@@ -111,86 +144,86 @@ func TestScores(t *testing.T) {\n \tt.Parallel()\n \n \tvar tests = map[string]struct {\n-\t\tCVSS20                     *gocvss20.CVSS20\n+\t\tCVSS20                     *CVSS20\n \t\tExpectedBaseScore          float64\n \t\tExpectedTemporalScore      float64\n \t\tExpectedEnvironmentalScore float64\n \t}{\n \t\t\"CVSS v2.0 Guide Section 3.3.1 CVE-2002-0392\": {\n-\t\t\tCVSS20: &gocvss20.CVSS20{\n-\t\t\t\tBase: gocvss20.Base{\n-\t\t\t\t\tAccessVector:          \"N\",\n-\t\t\t\t\tAccessComplexity:      \"L\",\n-\t\t\t\t\tAuthentication:        \"N\",\n-\t\t\t\t\tConfidentialityImpact: \"N\",\n-\t\t\t\t\tIntegrityImpact:       \"N\",\n-\t\t\t\t\tAvailabilityImpact:    \"C\",\n+\t\t\tCVSS20: &CVSS20{\n+\t\t\t\tbase: base{\n+\t\t\t\t\taccessVector:          \"N\",\n+\t\t\t\t\taccessComplexity:      \"L\",\n+\t\t\t\t\tauthentication:        \"N\",\n+\t\t\t\t\tconfidentialityImpact: \"N\",\n+\t\t\t\t\tintegrityImpact:       \"N\",\n+\t\t\t\t\tavailabilityImpact:    \"C\",\n \t\t\t\t},\n-\t\t\t\tTemporal: gocvss20.Temporal{\n-\t\t\t\t\tExploitability:   \"F\",\n-\t\t\t\t\tRemediationLevel: \"OF\",\n-\t\t\t\t\tReportConfidence: \"C\",\n+\t\t\t\ttemporal: temporal{\n+\t\t\t\t\texploitability:   \"F\",\n+\t\t\t\t\tremediationLevel: \"OF\",\n+\t\t\t\t\treportConfidence: \"C\",\n \t\t\t\t},\n-\t\t\t\tEnvironmental: gocvss20.Environmental{\n-\t\t\t\t\tCollateralDamagePotential:  \"ND\",\n-\t\t\t\t\tTargetDistribution:         \"ND\",\n-\t\t\t\t\tConfidentialityRequirement: \"ND\",\n-\t\t\t\t\tIntegrityRequirement:       \"ND\",\n-\t\t\t\t\tAvailabilityRequirement:    \"ND\",\n+\t\t\t\tenvironmental: environmental{\n+\t\t\t\t\tcollateralDamagePotential:  \"ND\",\n+\t\t\t\t\ttargetDistribution:         \"ND\",\n+\t\t\t\t\tconfidentialityRequirement: \"ND\",\n+\t\t\t\t\tintegrityRequirement:       \"ND\",\n+\t\t\t\t\tavailabilityRequirement:    \"ND\",\n \t\t\t\t},\n \t\t\t},\n \t\t\tExpectedBaseScore:          7.8,\n \t\t\tExpectedTemporalScore:      6.4,\n \t\t\tExpectedEnvironmentalScore: 6.4,\n \t\t},\n \t\t\"CVSS v2.0 Guide Section 3.3.2 CVE-2003-0818\": {\n-\t\t\tCVSS20: &gocvss20.CVSS20{\n-\t\t\t\tBase: gocvss20.Base{\n-\t\t\t\t\tAccessVector:          \"N\",\n-\t\t\t\t\tAccessComplexity:      \"L\",\n-\t\t\t\t\tAuthentication:        \"N\",\n-\t\t\t\t\tConfidentialityImpact: \"C\",\n-\t\t\t\t\tIntegrityImpact:       \"C\",\n-\t\t\t\t\tAvailabilityImpact:    \"C\",\n+\t\t\tCVSS20: &CVSS20{\n+\t\t\t\tbase: base{\n+\t\t\t\t\taccessVector:          \"N\",\n+\t\t\t\t\taccessComplexity:      \"L\",\n+\t\t\t\t\tauthentication:        \"N\",\n+\t\t\t\t\tconfidentialityImpact: \"C\",\n+\t\t\t\t\tintegrityImpact:       \"C\",\n+\t\t\t\t\tavailabilityImpact:    \"C\",\n \t\t\t\t},\n-\t\t\t\tTemporal: gocvss20.Temporal{\n-\t\t\t\t\tExploitability:   \"F\",\n-\t\t\t\t\tRemediationLevel: \"OF\",\n-\t\t\t\t\tReportConfidence: \"C\",\n+\t\t\t\ttemporal: temporal{\n+\t\t\t\t\texploitability:   \"F\",\n+\t\t\t\t\tremediationLevel: \"OF\",\n+\t\t\t\t\treportConfidence: \"C\",\n \t\t\t\t},\n-\t\t\t\tEnvironmental: gocvss20.Environmental{\n-\t\t\t\t\tCollateralDamagePotential:  \"ND\",\n-\t\t\t\t\tTargetDistribution:         \"ND\",\n-\t\t\t\t\tConfidentialityRequirement: \"ND\",\n-\t\t\t\t\tIntegrityRequirement:       \"ND\",\n-\t\t\t\t\tAvailabilityRequirement:    \"ND\",\n+\t\t\t\tenvironmental: environmental{\n+\t\t\t\t\tcollateralDamagePotential:  \"ND\",\n+\t\t\t\t\ttargetDistribution:         \"ND\",\n+\t\t\t\t\tconfidentialityRequirement: \"ND\",\n+\t\t\t\t\tintegrityRequirement:       \"ND\",\n+\t\t\t\t\tavailabilityRequirement:    \"ND\",\n \t\t\t\t},\n \t\t\t},\n \t\t\tExpectedBaseScore:          10.0,\n \t\t\tExpectedTemporalScore:      8.3,\n \t\t\tExpectedEnvironmentalScore: 8.3,\n \t\t},\n \t\t\"CVSS v2.0 Guide Section 3.3.3 CVE-2003-0062\": {\n-\t\t\tCVSS20: &gocvss20.CVSS20{\n-\t\t\t\tBase: gocvss20.Base{\n-\t\t\t\t\tAccessVector:          \"L\",\n-\t\t\t\t\tAccessComplexity:      \"H\",\n-\t\t\t\t\tAuthentication:        \"N\",\n-\t\t\t\t\tConfidentialityImpact: \"C\",\n-\t\t\t\t\tIntegrityImpact:       \"C\",\n-\t\t\t\t\tAvailabilityImpact:    \"C\",\n+\t\t\tCVSS20: &CVSS20{\n+\t\t\t\tbase: base{\n+\t\t\t\t\taccessVector:          \"L\",\n+\t\t\t\t\taccessComplexity:      \"H\",\n+\t\t\t\t\tauthentication:        \"N\",\n+\t\t\t\t\tconfidentialityImpact: \"C\",\n+\t\t\t\t\tintegrityImpact:       \"C\",\n+\t\t\t\t\tavailabilityImpact:    \"C\",\n \t\t\t\t},\n-\t\t\t\tTemporal: gocvss20.Temporal{\n-\t\t\t\t\tExploitability:   \"POC\",\n-\t\t\t\t\tRemediationLevel: \"OF\",\n-\t\t\t\t\tReportConfidence: \"C\",\n+\t\t\t\ttemporal: temporal{\n+\t\t\t\t\texploitability:   \"POC\",\n+\t\t\t\t\tremediationLevel: \"OF\",\n+\t\t\t\t\treportConfidence: \"C\",\n \t\t\t\t},\n-\t\t\t\tEnvironmental: gocvss20.Environmental{\n-\t\t\t\t\tCollateralDamagePotential:  \"ND\",\n-\t\t\t\t\tTargetDistribution:         \"ND\",\n-\t\t\t\t\tConfidentialityRequirement: \"ND\",\n-\t\t\t\t\tIntegrityRequirement:       \"ND\",\n-\t\t\t\t\tAvailabilityRequirement:    \"ND\",\n+\t\t\t\tenvironmental: environmental{\n+\t\t\t\t\tcollateralDamagePotential:  \"ND\",\n+\t\t\t\t\ttargetDistribution:         \"ND\",\n+\t\t\t\t\tconfidentialityRequirement: \"ND\",\n+\t\t\t\t\tintegrityRequirement:       \"ND\",\n+\t\t\t\t\tavailabilityRequirement:    \"ND\",\n \t\t\t\t},\n \t\t\t},\n \t\t\tExpectedBaseScore:          6.2,"
        },
        {
          "filename": "20/errors.go",
          "status": "modified",
          "additions": 2,
          "deletions": 14,
          "patch": "@@ -11,26 +11,14 @@ var (\n \tErrInvalidMetricValue = errors.New(\"invalid metric value\")\n )\n \n-// ErrBaseScore is an error returned by ParseVector when the\n-// given vector have missing base score attributes.\n-type ErrBaseScore struct {\n-\tMissings []string\n-}\n-\n-func (err ErrBaseScore) Error() string {\n-\treturn fmt.Sprintf(\"base score is missing metrics %v\", err.Missings)\n-}\n-\n-var _ error = (*ErrBaseScore)(nil)\n-\n // ErrDefinedN is an error return by ParseVector when the\n // given vector has metrics abbreviations defined multiple times.\n type ErrDefinedN struct {\n-\tAbv []string\n+\tAbv string\n }\n \n func (err ErrDefinedN) Error() string {\n-\treturn fmt.Sprintf(\"given CVSS v3.1 vector has %v metric abbreviations defined multiple times\", err.Abv)\n+\treturn fmt.Sprintf(\"given CVSS v3.1 vector has %s metric abbreviation defined after vector end\", err.Abv)\n }\n \n var _ error = (*ErrDefinedN)(nil)"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 31,
          "deletions": 16,
          "patch": "@@ -74,21 +74,36 @@ We challenge any other Go implementation to do better :stuck_out_tongue_winking_\n \n ### CVSS v2.0\n \n+```\n+goos: linux\n+goarch: amd64\n+pkg: github.com/pandatix/go-cvss/20\n+cpu: Intel(R) Core(TM) i5-2450M CPU @ 2.50GHz\n+BenchmarkParseVector_Base-4             \t 2089275\t       572.9 ns/op\t     224 B/op\t       1 allocs/op\n+BenchmarkParseVector_WithTempAndEnv-4   \t 1000000\t        1118 ns/op\t     224 B/op\t       1 allocs/op\n+BenchmarkCVSS20Vector-4                 \t 6806152\t       176.3 ns/op\t      80 B/op\t       1 allocs/op\n+BenchmarkCVSS20Get-4                    \t46162280\t       26.50 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS20Set-4                    \t42365036\t       27.50 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS20BaseScore-4              \t20117143\t       57.68 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS20TemporalScore-4          \t14383033\t       83.66 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS20EnvironmentalScore-4     \t15307656\t       79.48 ns/op\t       0 B/op\t       0 allocs/op\n+```\n+\n ### CVSS v3.0\n \n ```\n goos: linux\n goarch: amd64\n pkg: github.com/pandatix/go-cvss/30\n cpu: Intel(R) Core(TM) i5-2450M CPU @ 2.50GHz\n-BenchmarkParseVector_Base-4                      1443836               808.4 ns/op           352 B/op          1 allocs/op\n-BenchmarkParseVector_WithTempAndEnv-4             701901              1711 ns/op             352 B/op          1 allocs/op\n-BenchmarkCVSS30Vector-4                          5593758               215.8 ns/op            96 B/op          1 allocs/op\n-BenchmarkCVSS30Get-4                            27306528                41.66 ns/op            0 B/op          0 allocs/op\n-BenchmarkCVSS30Set-4                            31862641                37.94 ns/op            0 B/op          0 allocs/op\n-BenchmarkCVSS30BaseScore-4                       7769804               139.2 ns/op             0 B/op          0 allocs/op\n-BenchmarkCVSS30TemporalScore-4                   5814230               189.1 ns/op             0 B/op          0 allocs/op\n-BenchmarkCVSS30EnvironmentalScore-4              6402489               188.7 ns/op             0 B/op          0 allocs/op\n+BenchmarkParseVector_Base-4             \t 1458514\t       843.4 ns/op\t     352 B/op\t       1 allocs/op\n+BenchmarkParseVector_WithTempAndEnv-4   \t  703789\t        2067 ns/op\t     352 B/op\t       1 allocs/op\n+BenchmarkCVSS30Vector-4                 \t 4587404\t       237.0 ns/op\t      96 B/op\t       1 allocs/op\n+BenchmarkCVSS30Get-4                    \t26877397\t       51.38 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS30Set-4                    \t32284153\t       38.53 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS30BaseScore-4              \t 8275440\t       145.4 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS30TemporalScore-4          \t 6054021\t       195.7 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS30EnvironmentalScore-4     \t 6230708\t       191.2 ns/op\t       0 B/op\t       0 allocs/op\n ```\n \n ### CVSS v3.1\n@@ -98,14 +113,14 @@ goos: linux\n goarch: amd64\n pkg: github.com/pandatix/go-cvss/31\n cpu: Intel(R) Core(TM) i5-2450M CPU @ 2.50GHz\n-BenchmarkParseVector_Base-4             \t 1312525\t       895.0 ns/op\t     352 B/op\t       1 allocs/op\n-BenchmarkParseVector_WithTempAndEnv-4   \t  685629\t        2232 ns/op\t     352 B/op\t       1 allocs/op\n-BenchmarkCVSS31Vector-4                 \t 4867528\t       223.2 ns/op\t      96 B/op\t       1 allocs/op\n-BenchmarkCVSS31Get-4                    \t31498058\t       36.37 ns/op\t       0 B/op\t       0 allocs/op\n-BenchmarkCVSS31Set-4                    \t30187612\t       38.73 ns/op\t       0 B/op\t       0 allocs/op\n-BenchmarkCVSS31BaseScore-4              \t11144173\t       101.2 ns/op\t       0 B/op\t       0 allocs/op\n-BenchmarkCVSS31TemporalScore-4          \t 7856455\t       154.4 ns/op\t       0 B/op\t       0 allocs/op\n-BenchmarkCVSS31EnvironmentalScore-4     \t 6310815\t       169.4 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkParseVector_Base-4             \t 1445559\t       825.3 ns/op\t     352 B/op\t       1 allocs/op\n+BenchmarkParseVector_WithTempAndEnv-4   \t  658578\t        1836 ns/op\t     352 B/op\t       1 allocs/op\n+BenchmarkCVSS31Vector-4                 \t 5087984\t       244.1 ns/op\t      96 B/op\t       1 allocs/op\n+BenchmarkCVSS31Get-4                    \t28350058\t       41.40 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS31Set-4                    \t30340425\t       40.16 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS31BaseScore-4              \t 8535666\t       139.3 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS31TemporalScore-4          \t 6004561\t       189.7 ns/op\t       0 B/op\t       0 allocs/op\n+BenchmarkCVSS31EnvironmentalScore-4     \t 5937879\t       184.5 ns/op\t       0 B/op\t       0 allocs/op\n ```\n \n ## Feedbacks"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "650d5ed11d36b3267aa79185b5d8867b2bc93c2b",
            "date": "2025-01-20T18:49:45Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ffa43bf9b318d62ab3ed79b83647e64ade78dd14",
            "date": "2025-01-20T18:49:49Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "073867f967a8e673426fba6ad676097ab90954cc",
            "date": "2025-01-13T18:32:52Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "335a33001e0a8820466fe945516abd42301fe25a",
            "date": "2024-12-23T18:52:08Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d60e7805c154ce6dac59907a92a5ab2a2cf9f0b1",
            "date": "2024-12-16T18:28:28Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-125",
    "description": "go-cvss is a Go module to manipulate Common Vulnerability Scoring System (CVSS). In affected versions when a full CVSS v2.0 vector string is parsed using `ParseVector`, an Out-of-Bounds Read is possible due to a lack of tests. The Go module will then panic. The problem is patched in tag `v0.4.0`, by the commit `d9d478ff0c13b8b09ace030db9262f3c2fe031f4`. Users are advised to upgrade. Users unable to upgrade may avoid this issue by parsing only CVSS v2.0 vector strings that do not have all attributes defined (e.g. `AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M`). As stated in [SECURITY.md](https://github.com/pandatix/go-cvss/blob/master/SECURITY.md), the CPE v2.3 to refer to this Go module is `cpe:2.3:a:pandatix:go_cvss:*:*:*:*:*:*:*:*`. The entry has already been requested to the NVD CPE dictionary.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-15T22:15:11.463",
    "last_modified": "2024-11-21T07:17:48.043",
    "fix_date": "2022-09-13T17:46:05Z"
  },
  "references": [
    {
      "url": "https://github.com/pandatix/go-cvss/blob/master/SECURITY.md",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pandatix/go-cvss/commit/d9d478ff0c13b8b09ace030db9262f3c2fe031f4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pandatix/go-cvss/security/advisories/GHSA-xhmf-mmv2-4hhx",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pandatix/go-cvss/blob/master/SECURITY.md",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pandatix/go-cvss/commit/d9d478ff0c13b8b09ace030db9262f3c2fe031f4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pandatix/go-cvss/security/advisories/GHSA-xhmf-mmv2-4hhx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.121009",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "go-cvss",
    "owner": "pandatix",
    "created_at": "2022-06-13T14:46:55Z",
    "updated_at": "2025-01-26T08:01:38Z",
    "pushed_at": "2025-01-26T08:01:41Z",
    "size": 1139,
    "stars": 38,
    "forks": 4,
    "open_issues": 1,
    "watchers": 38,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 185268,
      "Makefile": 523,
      "Shell": 481,
      "Dockerfile": 331
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:09:33.764999"
  }
}