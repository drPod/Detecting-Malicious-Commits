{
  "cve_id": "CVE-2022-39254",
  "github_data": {
    "repository": "poljar/matrix-nio",
    "fix_commit": "b1cbf234a831daa160673defd596e6450e9c29f0",
    "related_commits": [
      "b1cbf234a831daa160673defd596e6450e9c29f0",
      "b1cbf234a831daa160673defd596e6450e9c29f0"
    ],
    "patch_url": "https://github.com/poljar/matrix-nio/commit/b1cbf234a831daa160673defd596e6450e9c29f0.patch",
    "fix_commit_details": {
      "sha": "b1cbf234a831daa160673defd596e6450e9c29f0",
      "commit_date": "2022-09-20T11:07:28Z",
      "author": {
        "login": "poljar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(crypto): Only accept forwarded room keys from our own trusted devices",
        "length": 73,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 54,
        "additions": 37,
        "deletions": 17
      },
      "files": [
        {
          "filename": "nio/crypto/olm_machine.py",
          "status": "modified",
          "additions": 37,
          "deletions": 17,
          "patch": "@@ -1182,30 +1182,22 @@ def _handle_room_key_event(\n \n         return event\n \n-    # This function is copyrighted under the Apache 2.0 license Zil0\n-    def _handle_forwarded_room_key_event(\n+    def _should_accept_forward(\n         self,\n-        sender,  # type: str\n-        sender_key,  # type: str\n-        payload,  # type: Dict[Any, Any]\n-    ):\n-        # type: (...) -> Union[ForwardedRoomKeyEvent, BadEventType, None]\n-        event = ForwardedRoomKeyEvent.from_dict(payload, sender, sender_key)\n-\n-        if isinstance(event, (BadEvent, UnknownBadEvent)):\n-            return event\n-\n+        sender: str,\n+        sender_key: str,\n+        event: ForwardedRoomKeyEvent,\n+    ) -> bool:\n         if event.algorithm != \"m.megolm.v1.aes-sha2\":\n             logger.error(\n                 f\"Error: unsupported forwarded room key of type {event.algorithm}\"\n             )\n-            return None\n-\n-        if event.session_id not in self.outgoing_key_requests:\n+            return False\n+        elif event.session_id not in self.outgoing_key_requests:\n             logger.info(\n                 \"Ignoring session key we have not requested from device {}.\", sender_key\n             )\n-            return None\n+            return False\n \n         key_request = self.outgoing_key_requests[event.session_id]\n \n@@ -1218,6 +1210,34 @@ def _handle_forwarded_room_key_event(\n                 \"Ignoring session key with mismatched algorithm, room_id, or \"\n                 \"session id.\"\n             )\n+            return False\n+\n+        device = self.device_store.device_from_sender_key(event.sender, sender_key)\n+\n+        # Only accept forwarded room keys from our own trusted devices\n+        if not device or not device.verified or not device.user_id == self.user_id:\n+            logger.warn(\n+                \"Received a forwarded room key from a untrusted device \"\n+                f\"{event.sender}, {sender_key}\"\n+            )\n+            return False\n+\n+        return True\n+\n+    # This function is copyrighted under the Apache 2.0 license Zil0\n+    def _handle_forwarded_room_key_event(\n+        self,\n+        sender,  # type: str\n+        sender_key,  # type: str\n+        payload,  # type: Dict[Any, Any]\n+    ):\n+        # type: (...) -> Union[ForwardedRoomKeyEvent, BadEventType, None]\n+        event = ForwardedRoomKeyEvent.from_dict(payload, sender, sender_key)\n+\n+        if isinstance(event, (BadEvent, UnknownBadEvent)):\n+            return event\n+\n+        if not self._should_accept_forward(sender, sender_key, event):\n             return None\n \n         content = payload[\"content\"]\n@@ -1241,7 +1261,7 @@ def _handle_forwarded_room_key_event(\n         if self.inbound_group_store.add(session):\n             self.save_inbound_group_session(session)\n \n-        key_request = self.outgoing_key_requests.pop(key_request.request_id)\n+        key_request = self.outgoing_key_requests.pop(event.session_id)\n         self.store.remove_outgoing_key_request(key_request)\n         self.outgoing_to_device_messages.append(\n             key_request.as_cancellation(self.user_id, self.device_id)"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "706597708eb109e763d7537d30bed97533f958b0",
            "date": "2024-10-04T07:49:07Z",
            "author_login": "PaarthShah"
          },
          {
            "sha": "67872a56c70c7e234e0579a98a715bdeb53055cb",
            "date": "2024-09-20T20:45:58Z",
            "author_login": "PaarthShah"
          },
          {
            "sha": "45af13b70cc60f4bf7be6cdfd5513b7730ec3108",
            "date": "2024-09-15T19:08:35Z",
            "author_login": "PaarthShah"
          },
          {
            "sha": "47e0ce689330aeeadc50477cf34dc7f4d62646b8",
            "date": "2024-09-15T19:08:06Z",
            "author_login": "jspricke"
          },
          {
            "sha": "eb6299409a5e1de912c0a5b7a3b40b4b1ab70a55",
            "date": "2024-09-15T11:06:47Z",
            "author_login": "hwipl"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N",
    "cwe_id": "CWE-287",
    "description": "matrix-nio is a Python Matrix client library, designed according to sans I/O principles. Prior to version 0.20, when a users requests a room key from their devices, the software correctly remember the request. Once they receive a forwarded room key, they accept it without checking who the room key came from. This allows homeservers to try to insert room keys of questionable validity, potentially mounting an impersonation attack. Version 0.20 fixes the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-29T15:15:10.513",
    "last_modified": "2024-11-21T07:17:53.233",
    "fix_date": "2022-09-20T11:07:28Z"
  },
  "references": [
    {
      "url": "https://github.com/poljar/matrix-nio/commit/b1cbf234a831daa160673defd596e6450e9c29f0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/poljar/matrix-nio/security/advisories/GHSA-w4pr-4vjg-hffh",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/poljar/matrix-nio/commit/b1cbf234a831daa160673defd596e6450e9c29f0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/poljar/matrix-nio/security/advisories/GHSA-w4pr-4vjg-hffh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.301853",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "matrix-nio",
    "owner": "poljar",
    "created_at": "2018-04-06T11:32:18Z",
    "updated_at": "2025-01-12T21:24:10Z",
    "pushed_at": "2024-10-04T07:50:46Z",
    "size": 8352,
    "stars": 605,
    "forks": 164,
    "open_issues": 93,
    "watchers": 605,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 1218882,
      "Dockerfile": 2142,
      "Shell": 688,
      "Makefile": 482,
      "HTML": 75
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:56:36.606927"
  }
}