{
  "cve_id": "CVE-2022-39309",
  "github_data": {
    "repository": "gocd/gocd",
    "fix_commit": "691b479f1310034992da141760e9c5d1f5b60e8a",
    "related_commits": [
      "691b479f1310034992da141760e9c5d1f5b60e8a",
      "691b479f1310034992da141760e9c5d1f5b60e8a"
    ],
    "patch_url": "https://github.com/gocd/gocd/commit/691b479f1310034992da141760e9c5d1f5b60e8a.patch",
    "fix_commit_details": {
      "sha": "691b479f1310034992da141760e9c5d1f5b60e8a",
      "commit_date": "2020-12-08T06:05:51Z",
      "author": {
        "login": "maheshp",
        "type": "User",
        "stats": {
          "total_commits": 681,
          "average_weekly_commits": 1.1741379310344828,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 198
        }
      },
      "commit_message": {
        "title": "SCMMaterial changes #000",
        "length": 188,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 284,
        "additions": 48,
        "deletions": 236
      },
      "files": [
        {
          "filename": "api/api-server-maintenance-mode-v1/src/test/groovy/com/thoughtworks/go/apiv1/servermaintenancemode/representers/MaintenanceModeInfoRepresenterTest.groovy",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -134,7 +134,7 @@ class MaintenanceModeInfoRepresenterTest {\n                 \"auto_update\"       : true,\n                 \"check_externals\"   : true,\n                 \"username\"          : \"user\",\n-                \"encrypted_password\": svnMaterial.encryptedPassword\n+                \"encrypted_password\": svnMaterial.config().getEncryptedPassword()\n               ],\n               \"mdu_start_time\": \"1970-01-01T08:20:00Z\"\n             ]"
        },
        {
          "filename": "common/src/test/java/com/thoughtworks/go/config/materials/perforce/P4MaterialTest.java",
          "status": "modified",
          "additions": 0,
          "deletions": 25,
          "patch": "@@ -97,31 +97,6 @@ void shouldNotDisplayPasswordInStringRepresentation() {\n         assertThat(p4.toString()).doesNotContain(\"loser\");\n     }\n \n-    @Test\n-    void shouldEncryptP4Password() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n-\n-        P4Material p4Material = new P4Material(\"example.com:1818\", \"view\", mockGoCipher);\n-        p4Material.setPassword(\"password\");\n-        p4Material.ensureEncrypted();\n-\n-        assertThat(p4Material.getEncryptedPassword()).isEqualTo(\"encrypted\");\n-        assertThat(p4Material.getPassword()).isNull();\n-    }\n-\n-    @Test\n-    void shouldDecryptP4Password() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n-\n-        P4Material p4Material = new P4Material(\"example.com:1818\", \"view\", mockGoCipher);\n-        ReflectionUtil.setField(p4Material, \"encryptedPassword\", \"encrypted\");\n-        p4Material.getPassword();\n-\n-        assertThat(p4Material.getPassword()).isEqualTo(\"password\");\n-    }\n-\n     @Test\n     void shouldReturnEqualsEvenIfPasswordsAreDifferent() throws Exception {\n         P4Material material = MaterialsMother.p4Material();"
        },
        {
          "filename": "common/src/test/java/com/thoughtworks/go/config/materials/tfs/TfsMaterialTest.java",
          "status": "modified",
          "additions": 18,
          "deletions": 70,
          "patch": "@@ -68,8 +68,8 @@ public class TfsMaterialTest {\n     @BeforeEach\n     void setUp() {\n         GoCipher goCipher = mock(GoCipher.class);\n-        tfsMaterialFirstCollectionFirstProject = new TfsMaterial(goCipher, new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_FIRST_PROJECT);\n-        tfsMaterialFirstCollectionSecondProject = new TfsMaterial(goCipher, new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_SECOND_PROJECT);\n+        tfsMaterialFirstCollectionFirstProject = new TfsMaterial(new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_FIRST_PROJECT);\n+        tfsMaterialFirstCollectionSecondProject = new TfsMaterial(new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_SECOND_PROJECT);\n     }\n \n     @Test\n@@ -104,7 +104,7 @@ void shouldLoadAllModificationsSinceAGivenRevision() throws IOException {\n \n     @Test\n     void shouldInjectAllRelevantAttributesInSqlCriteriaMap() {\n-        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n+        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n         assertThat(tfsMaterial.getSqlCriteria()).isEqualTo(m(\n                 SQL_CRITERIA_TYPE, (Object) \"TfsMaterial\",\n                 \"url\", \"my-url\",\n@@ -114,7 +114,7 @@ void shouldInjectAllRelevantAttributesInSqlCriteriaMap() {\n \n     @Test\n     void shouldInjectAllRelevantAttributesInAttributeMap() {\n-        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n+        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n         assertThat(tfsMaterial.getAttributesForXml()).isEqualTo(m(\n                 AbstractMaterial.SQL_CRITERIA_TYPE, (Object) \"TfsMaterial\",\n                 \"url\", \"my-url\",\n@@ -124,56 +124,31 @@ void shouldInjectAllRelevantAttributesInAttributeMap() {\n \n     @Test\n     void shouldReturnUrlForCommandLine_asUrl_IfSet() {\n-        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n+        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n         );\n         assertThat(tfsMaterial.getUrl()).isEqualTo(\"http://foo:bar@my-url.com\");\n \n-        tfsMaterial = new TfsMaterial(new GoCipher(), null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n+        tfsMaterial = new TfsMaterial(null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n         assertThat(tfsMaterial.getUrl()).isNull();\n     }\n \n     @Test\n     void shouldReturnUrlForCommandLine_asLocation_IfSet() {\n-        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n+        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n         );\n         assertThat(tfsMaterial.getLocation()).isEqualTo(\"http://foo:******@my-url.com\");\n \n-        tfsMaterial = new TfsMaterial(new GoCipher(), null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n+        tfsMaterial = new TfsMaterial(null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n         assertThat(tfsMaterial.getLocation()).isNull();\n     }\n \n-    @Test\n-    void shouldEncryptTfsPasswordAndMarkPasswordAsNull() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n-\n-        TfsMaterial tfsMaterial = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n-        tfsMaterial.ensureEncrypted();\n-\n-        assertThat(tfsMaterial.getPassword()).isNull();\n-        assertThat(tfsMaterial.getEncryptedPassword()).isEqualTo(\"encrypted\");\n-    }\n-\n-    @Test\n-    void shouldDecryptTfsPassword() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n-\n-        TfsMaterial tfsMaterial = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, null, \"\");\n-\n-        ReflectionUtil.setField(tfsMaterial, \"encryptedPassword\", \"encrypted\");\n-\n-        tfsMaterial.ensureEncrypted();\n-        assertThat(tfsMaterial.getPassword()).isEqualTo(\"password\");\n-    }\n-\n     @Test\n     void shouldNotDecryptPasswordIfPasswordIsNotNull() throws Exception {\n         GoCipher mockGoCipher = mock(GoCipher.class);\n         when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n         when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n \n-        TfsMaterial material = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n+        TfsMaterial material = new TfsMaterial(new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n         material.ensureEncrypted();\n         when(mockGoCipher.encrypt(\"new_password\")).thenReturn(\"new_encrypted\");\n         material.setPassword(\"new_password\");\n@@ -182,33 +157,6 @@ void shouldNotDecryptPasswordIfPasswordIsNotNull() throws Exception {\n         assertThat(material.getPassword()).isEqualTo(\"new_password\");\n     }\n \n-    @Test\n-    void shouldErrorOutIfDecryptionFails() throws CryptoException {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        String fakeCipherText = \"fake cipher text\";\n-        when(mockGoCipher.decrypt(fakeCipherText)).thenThrow(new CryptoException(\"exception\"));\n-        TfsMaterial material = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n-        ReflectionUtil.setField(material, \"encryptedPassword\", fakeCipherText);\n-        try {\n-            material.getPassword();\n-            fail(\"Should have thrown up\");\n-        } catch (Exception e) {\n-            assertThat(e.getMessage()).isEqualTo(\"Could not decrypt the password to get the real password\");\n-        }\n-    }\n-\n-    @Test\n-    void shouldErrorOutIfEncryptionFails() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.encrypt(\"password\")).thenThrow(new CryptoException(\"exception\"));\n-        try {\n-            new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n-            fail(\"Should have thrown up\");\n-        } catch (Exception e) {\n-            assertThat(e.getMessage()).isEqualTo(\"Password encryption failed. Please verify your cipher key.\");\n-        }\n-    }\n-\n     @Test\n     void shouldBePasswordAware() {\n         assertThat(PasswordAwareMaterial.class.isAssignableFrom(TfsMaterial.class)).isTrue();\n@@ -237,13 +185,13 @@ void shouldCheckConnection() {\n \n     @Test\n     void shouldGetLongDescriptionForMaterial() {\n-        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n+        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n         assertThat(material.getLongDescription()).isEqualTo(\"URL: http://url/, Username: user, Domain: domain, ProjectPath: $project/path/\");\n     }\n \n     @Test\n     void shouldCopyOverPasswordWhenConvertingToConfig() throws Exception {\n-        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n+        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n \n         TfsMaterialConfig config = (TfsMaterialConfig) material.config();\n \n@@ -253,7 +201,7 @@ void shouldCopyOverPasswordWhenConvertingToConfig() throws Exception {\n \n     @Test\n     void shouldGetAttributesWithSecureFields() {\n-        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n+        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n         Map<String, Object> attributes = material.getAttributes(true);\n \n         assertThat(attributes.get(\"type\")).isEqualTo(\"tfs\");\n@@ -267,7 +215,7 @@ void shouldGetAttributesWithSecureFields() {\n \n     @Test\n     void shouldGetAttributesWithoutSecureFields() {\n-        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n+        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n         Map<String, Object> attributes = material.getAttributes(false);\n \n         assertThat(attributes.get(\"type\")).isEqualTo(\"tfs\");\n@@ -283,14 +231,14 @@ void shouldGetAttributesWithoutSecureFields() {\n     class passwordForCommandLine {\n         @Test\n         void shouldReturnPasswordAsConfigured_IfNotDefinedAsSecretParam() {\n-            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"badger\", null);\n+            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"badger\", null);\n \n             assertThat(tfsMaterial.passwordForCommandLine()).isEqualTo(\"badger\");\n         }\n \n         @Test\n         void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n-            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n+            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n \n             tfsMaterial.getSecretParams().findFirst(\"lookup_pass\").ifPresent(secretParam -> secretParam.setValue(\"resolved_password\"));\n \n@@ -299,7 +247,7 @@ void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n \n         @Test\n         void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretParam() {\n-            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n+            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n \n             assertThatCode(tfsMaterial::passwordForCommandLine)\n                     .isInstanceOf(UnresolvedSecretParamException.class)\n@@ -311,7 +259,7 @@ void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretP\n     class setPassword {\n         @Test\n         void shouldParsePasswordString_IfDefinedAsSecretParam() {\n-            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n+            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n \n             assertThat(tfsMaterial.getSecretParams())\n                     .hasSize(1)\n@@ -339,7 +287,7 @@ void populateEnvContextShouldSetMaterialEnvVars() {\n \n     @Test\n     void shouldOnlyPopulateDomainEnvVarIfPresent() {\n-        TfsMaterial material = new TfsMaterial(mock(GoCipher.class), new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, \"\", PASSWORD, TFS_FIRST_PROJECT);\n+        TfsMaterial material = new TfsMaterial(new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, \"\", PASSWORD, TFS_FIRST_PROJECT);\n         EnvironmentVariableContext ctx = new EnvironmentVariableContext();\n         final ArrayList<Modification> modifications = new ArrayList<>();\n "
        },
        {
          "filename": "common/src/test/java/com/thoughtworks/go/domain/materials/DummyMaterial.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -18,7 +18,6 @@\n import com.thoughtworks.go.config.materials.ScmMaterial;\n import com.thoughtworks.go.config.materials.SubprocessExecutionContext;\n import com.thoughtworks.go.domain.MaterialInstance;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\n import com.thoughtworks.go.util.command.UrlArgument;\n \n@@ -35,7 +34,7 @@ public final class DummyMaterial extends ScmMaterial {\n     private String url;\n \n     public DummyMaterial() {\n-        super(\"DummyMaterial\", new GoCipher());\n+        super(\"DummyMaterial\");\n     }\n \n     @Override"
        },
        {
          "filename": "common/src/test/java/com/thoughtworks/go/domain/materials/svn/SvnMaterialTest.java",
          "status": "modified",
          "additions": 0,
          "deletions": 51,
          "patch": "@@ -328,30 +328,6 @@ void shouldNotUsePasswordForEquality() {\n         assertThat(svnBoozer).isEqualTo(svnZooser);\n     }\n \n-    @Test\n-    void shouldEncryptSvnPasswordAndMarkPasswordAsNull() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n-\n-        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);\n-        material.ensureEncrypted();\n-\n-        assertThat(material.getPassword()).isNull();\n-        assertThat(material.getEncryptedPassword()).isEqualTo(\"encrypted\");\n-    }\n-\n-    @Test\n-    void shouldDecryptSvnPassword() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n-\n-        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", null, false, mockGoCipher);\n-        ReflectionUtil.setField(material, \"encryptedPassword\", \"encrypted\");\n-\n-        material.ensureEncrypted();\n-        assertThat(material.getPassword()).isEqualTo(\"password\");\n-    }\n-\n     @Test\n     void shouldNotDecryptSvnPasswordIfPasswordIsNotNull() throws Exception {\n         GoCipher mockGoCipher = mock(GoCipher.class);\n@@ -367,33 +343,6 @@ void shouldNotDecryptSvnPasswordIfPasswordIsNotNull() throws Exception {\n         assertThat(material.getPassword()).isEqualTo(\"new_password\");\n     }\n \n-    @Test\n-    void shouldErrorOutIfDecryptionFails() throws CryptoException {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        String fakeCipherText = \"fake cipher text\";\n-        when(mockGoCipher.decrypt(fakeCipherText)).thenThrow(new CryptoException(\"exception\"));\n-        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", null, false, mockGoCipher);\n-        ReflectionUtil.setField(material, \"encryptedPassword\", fakeCipherText);\n-        try {\n-            material.getPassword();\n-            fail(\"Should have thrown up\");\n-        } catch (Exception e) {\n-            assertThat(e.getMessage()).isEqualTo(\"Could not decrypt the password to get the real password\");\n-        }\n-    }\n-\n-    @Test\n-    void shouldErrorOutIfEncryptionFails() throws Exception {\n-        GoCipher mockGoCipher = mock(GoCipher.class);\n-        when(mockGoCipher.encrypt(\"password\")).thenThrow(new CryptoException(\"exception\"));\n-        try {\n-            new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);\n-            fail(\"Should have thrown up\");\n-        } catch (Exception e) {\n-            assertThat(e.getMessage()).isEqualTo(\"Password encryption failed. Please verify your cipher key.\");\n-        }\n-    }\n-\n     @Test\n     void shouldGetLongDescriptionForMaterial() {\n         SvnMaterial material = new SvnMaterial(\"http://url/\", \"user\", \"password\", true, \"folder\");"
        },
        {
          "filename": "common/src/test/java/com/thoughtworks/go/server/service/MagicalMaterialAndMaterialConfigConversionTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -180,8 +180,7 @@ private boolean isNotAConcrete_NonTest_MaterialConfigImplementation(Class aClass\n     private void assertPasswordIsCorrect(Material material) {\n         if (material instanceof PasswordAwareMaterial) {\n             assertThat(\"Password setting is wrong for: \" + material.getClass(), ((PasswordAwareMaterial) material).getPassword(), is(\"pass\"));\n-            assertThat(\"Password setting is wrong for: \" + material.getClass(), ReflectionUtil.getField(material, \"password\"), is(nullValue()));\n-            assertThat(\"Password setting is wrong for: \" + material.getClass(), ReflectionUtil.getField(material, \"encryptedPassword\"), is(not(nullValue())));\n+            assertThat(\"Password setting is wrong for: \" + material.getClass(), ReflectionUtil.getField(material, \"password\"), is(\"pass\"));\n         }\n     }\n "
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/config/materials/Materials.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -32,7 +32,6 @@\n import com.thoughtworks.go.domain.ConfigVisitor;\n import com.thoughtworks.go.domain.MaterialRevisions;\n import com.thoughtworks.go.domain.materials.*;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.ArtifactLogUtil;\n import com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\n import com.thoughtworks.go.util.command.UrlArgument;\n@@ -205,7 +204,7 @@ public SvnMaterial getSvnMaterial() {\n     }\n \n     public TfsMaterial getTfsMaterial() {\n-        return getExistingOrDefaultMaterial(new TfsMaterial(new GoCipher(), new UrlArgument(\"\"), \"\", \"\", \"\", \"\"));\n+        return getExistingOrDefaultMaterial(new TfsMaterial(new UrlArgument(\"\"), \"\", \"\", \"\", \"\"));\n     }\n \n     public HgMaterial getHgMaterial() {"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/config/materials/ScmMaterial.java",
          "status": "modified",
          "additions": 2,
          "deletions": 39,
          "patch": "@@ -21,8 +21,6 @@\n import com.thoughtworks.go.config.SecretParams;\n import com.thoughtworks.go.domain.MaterialRevision;\n import com.thoughtworks.go.domain.materials.*;\n-import com.thoughtworks.go.security.CryptoException;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.command.EnvironmentVariableContext;\n import com.thoughtworks.go.util.command.InMemoryStreamConsumer;\n import com.thoughtworks.go.util.command.ProcessOutputStreamConsumer;\n@@ -34,9 +32,7 @@\n import java.util.Map;\n import java.util.Optional;\n \n-import static com.thoughtworks.go.util.ExceptionUtils.bomb;\n import static com.thoughtworks.go.util.command.EnvironmentVariableContext.escapeEnvironmentVariable;\n-import static org.apache.commons.lang3.StringUtils.isBlank;\n \n \n /**\n@@ -48,20 +44,17 @@ public abstract class ScmMaterial extends AbstractMaterial implements SecretPara\n     public static final String GO_TO_REVISION = \"GO_TO_REVISION\";\n     public static final String GO_FROM_REVISION = \"GO_FROM_REVISION\";\n     public static final String GO_MATERIAL_URL = \"GO_MATERIAL_URL\";\n-    protected final GoCipher goCipher;\n \n     protected Filter filter;\n     protected String folder;\n     protected boolean autoUpdate = true;\n     protected boolean invertFilter = false;\n     protected String userName;\n     protected String password;\n-    protected String encryptedPassword;\n     protected SecretParams secretParamsForPassword;\n \n-    public ScmMaterial(String typeName, GoCipher goCipher) {\n+    public ScmMaterial(String typeName) {\n         super(typeName);\n-        this.goCipher = goCipher;\n     }\n \n     @Override\n@@ -121,26 +114,12 @@ public final void setPassword(String password) {\n     }\n \n     private void resetPassword(String passwordToSet) {\n-        if (StringUtils.isBlank(passwordToSet)) {\n-            encryptedPassword = null;\n-        }\n         setPasswordIfNotBlank(passwordToSet);\n     }\n \n     private void setPasswordIfNotBlank(String password) {\n         this.password = StringUtils.stripToNull(password);\n         this.secretParamsForPassword = SecretParams.parse(password);\n-        this.encryptedPassword = StringUtils.stripToNull(encryptedPassword);\n-\n-        if (this.password == null) {\n-            return;\n-        }\n-        try {\n-            this.encryptedPassword = this.goCipher.encrypt(password);\n-        } catch (Exception e) {\n-            bomb(\"Password encryption failed. Please verify your cipher key.\", e);\n-        }\n-        this.password = null;\n     }\n \n     @PostConstruct\n@@ -153,16 +132,8 @@ public void setUserName(String userName) {\n         this.userName = userName;\n     }\n \n-    public final void setEncryptedPassword(String encryptedPassword) {\n-        this.encryptedPassword = encryptedPassword;\n-    }\n-\n-    public final String getEncryptedPassword() {\n-        return encryptedPassword;\n-    }\n-\n     public String getPassword() {\n-        return currentPassword();\n+        return password;\n     }\n \n     public String passwordForCommandLine() {\n@@ -179,14 +150,6 @@ public SecretParams getSecretParams() {\n         return secretParamsForPassword;\n     }\n \n-    public final String currentPassword() {\n-        try {\n-            return isBlank(encryptedPassword) ? null : this.goCipher.decrypt(encryptedPassword);\n-        } catch (CryptoException e) {\n-            throw new RuntimeException(\"Could not decrypt the password to get the real password\", e);\n-        }\n-    }\n-\n     public abstract boolean isCheckExternals();\n \n     public abstract String getUrl();"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -25,7 +25,6 @@\n import com.thoughtworks.go.domain.materials.git.GitMaterialInstance;\n import com.thoughtworks.go.domain.materials.git.GitVersion;\n import com.thoughtworks.go.domain.materials.svn.MaterialUrl;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.server.transaction.TransactionSynchronizationManager;\n import com.thoughtworks.go.util.GoConstants;\n import com.thoughtworks.go.util.command.*;\n@@ -65,7 +64,7 @@ public class GitMaterial extends ScmMaterial implements PasswordAwareMaterial {\n     private String submoduleFolder;\n \n     public GitMaterial(String url) {\n-        super(TYPE, new GoCipher());\n+        super(TYPE);\n         this.url = new UrlArgument(url);\n     }\n "
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/config/materials/mercurial/HgMaterial.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -26,7 +26,6 @@\n import com.thoughtworks.go.domain.materials.mercurial.HgMaterialInstance;\n import com.thoughtworks.go.domain.materials.mercurial.HgVersion;\n import com.thoughtworks.go.domain.materials.svn.MaterialUrl;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.GoConstants;\n import com.thoughtworks.go.util.command.*;\n import org.apache.commons.io.FileUtils;\n@@ -68,7 +67,7 @@ public class HgMaterial extends ScmMaterial implements PasswordAwareMaterial {\n     private String branch;\n \n     private HgMaterial() {\n-        super(TYPE, new GoCipher());\n+        super(TYPE);\n     }\n \n     public HgMaterial(String url, String folder) {"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/config/materials/perforce/P4Material.java",
          "status": "modified",
          "additions": 9,
          "deletions": 17,
          "patch": "@@ -58,32 +58,24 @@ public class P4Material extends ScmMaterial implements PasswordEncrypter, Passwo\n     //TODO: use iBatis to set the type for us, and we can get rid of this field.\n     public static final String TYPE = \"P4Material\";\n \n-    private P4Material(GoCipher goCipher) {\n-        super(TYPE, goCipher);\n+    private P4Material() {\n+        super(TYPE);\n     }\n \n-    public P4Material(String serverAndPort, String view, GoCipher goCipher) {\n-        this(goCipher);\n+    public P4Material(String serverAndPort, String view) {\n+        this();\n         bombIfNull(serverAndPort, \"null serverAndPort\");\n         this.serverAndPort = serverAndPort;\n         setView(view);\n     }\n \n-    public P4Material(String serverAndPort, String view) {\n-        this(serverAndPort, view, new GoCipher());\n-    }\n-\n-    public P4Material(String url, String view, String userName) {\n-        this(url, view);\n+    public P4Material(String serverAndPort, String view, String userName) {\n+        this(serverAndPort, view);\n         this.userName = userName;\n     }\n \n-    public P4Material(String url, String view, String userName, String folder) {\n-        this(url, view, userName, folder, new GoCipher());\n-    }\n-\n     public P4Material(P4MaterialConfig config) {\n-        this(config.getUrl(), config.getView(), config.getUserName(), config.getFolder(), config.getGoCipher());\n+        this(config.getUrl(), config.getView(), config.getUserName(), config.getFolder());\n         this.name = config.getName();\n         this.autoUpdate = config.getAutoUpdate();\n         this.filter = config.rawFilter();\n@@ -92,8 +84,8 @@ public P4Material(P4MaterialConfig config) {\n         this.useTickets = config.getUseTickets();\n     }\n \n-    private P4Material(String serverAndPort, String view, String userName, String folder, GoCipher goCipher) {\n-        this(goCipher);\n+    public P4Material(String serverAndPort, String view, String userName, String folder) {\n+        this();\n         bombIfNull(serverAndPort, \"null serverAndPort\");\n         this.serverAndPort = serverAndPort;\n         setView(view);"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/config/materials/svn/SvnMaterial.java",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -53,10 +53,6 @@ public class SvnMaterial extends ScmMaterial implements PasswordEncrypter, Passw\n \n     public static final String TYPE = \"SvnMaterial\";\n \n-    private SvnMaterial(GoCipher goCipher) {\n-        super(\"SvnMaterial\", goCipher);\n-    }\n-\n     public SvnMaterial(String url, String userName, String password, boolean checkExternals) {\n         this(url, userName, password, checkExternals, new GoCipher());\n     }\n@@ -81,7 +77,7 @@ public SvnMaterial(SvnMaterialConfig config) {\n     }\n \n     public SvnMaterial(String url, String userName, String password, boolean checkExternals, GoCipher goCipher) {\n-        super(\"SvnMaterial\", goCipher);\n+        super(\"SvnMaterial\");\n         bombIfNull(url, \"null url\");\n         setUrl(url);\n         this.userName = userName;"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/config/materials/tfs/TfsMaterial.java",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -25,7 +25,6 @@\n import com.thoughtworks.go.domain.materials.tfs.TfsCommand;\n import com.thoughtworks.go.domain.materials.tfs.TfsCommandFactory;\n import com.thoughtworks.go.domain.materials.tfs.TfsMaterialInstance;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.GoConstants;\n import com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\n import com.thoughtworks.go.util.command.EnvironmentVariableContext;\n@@ -54,12 +53,12 @@ public class TfsMaterial extends ScmMaterial implements PasswordAwareMaterial, P\n     private String domain = \"\";\n     private String projectPath;\n \n-    public TfsMaterial(GoCipher goCipher) {\n-        super(TYPE, goCipher);\n+    public TfsMaterial() {\n+        super(TYPE);\n     }\n \n-    public TfsMaterial(GoCipher goCipher, UrlArgument url, String userName, String domain, String password, String projectPath) {\n-        this(goCipher);\n+    public TfsMaterial(UrlArgument url, String userName, String domain, String password, String projectPath) {\n+        this();\n         this.url = url;\n         this.userName = userName;\n         this.domain = domain;\n@@ -68,7 +67,7 @@ public TfsMaterial(GoCipher goCipher, UrlArgument url, String userName, String d\n     }\n \n     public TfsMaterial(TfsMaterialConfig config) {\n-        this(config.getGoCipher(), new UrlArgument(config.getUrl()), config.getUserName(), config.getDomain(), config.getPassword(), config.getProjectPath());\n+        this(new UrlArgument(config.getUrl()), config.getUserName(), config.getDomain(), config.getPassword(), config.getProjectPath());\n         this.autoUpdate = config.getAutoUpdate();\n         this.filter = config.rawFilter();\n         this.invertFilter = config.getInvertFilter();"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/domain/materials/TestingMaterial.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -18,7 +18,6 @@\n import com.thoughtworks.go.config.materials.ScmMaterial;\n import com.thoughtworks.go.config.materials.SubprocessExecutionContext;\n import com.thoughtworks.go.domain.MaterialInstance;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\n import com.thoughtworks.go.util.command.UrlArgument;\n import org.joda.time.DateTime;\n@@ -40,7 +39,7 @@ public class TestingMaterial extends ScmMaterial {\n     private String url;\n \n     public TestingMaterial() {\n-        super(TYPE, new GoCipher());\n+        super(TYPE);\n     }\n \n     public TestingMaterial(TestingMaterialConfig config) {"
        },
        {
          "filename": "domain/src/main/java/com/thoughtworks/go/domain/materials/tfs/TfsMaterialInstance.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -17,7 +17,6 @@\n import com.thoughtworks.go.config.materials.tfs.TfsMaterial;\n import com.thoughtworks.go.domain.MaterialInstance;\n import com.thoughtworks.go.domain.materials.Material;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.command.UrlArgument;\n \n public class TfsMaterialInstance extends MaterialInstance {\n@@ -31,7 +30,7 @@ public TfsMaterialInstance(String url, String userName, String domain, String pr\n     }\n \n     @Override public Material toOldMaterial(String name, String folder, String password) {\n-        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(url), username, domain, password, projectPath);\n+        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(url), username, domain, password, projectPath);\n         tfsMaterial.setFolder(folder);\n         setName(name,tfsMaterial);\n         return tfsMaterial;"
        },
        {
          "filename": "domain/src/test/java/com/thoughtworks/go/helper/MaterialsMother.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -29,7 +29,6 @@\n import com.thoughtworks.go.domain.packagerepository.*;\n import com.thoughtworks.go.domain.scm.SCM;\n import com.thoughtworks.go.domain.scm.SCMMother;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.util.command.UrlArgument;\n \n import java.util.Arrays;\n@@ -175,7 +174,7 @@ public static P4Material p4Material(String serverAndPort, String userName, Strin\n     }\n \n     public static TfsMaterial tfsMaterial(String url) {\n-        return new TfsMaterial(new GoCipher(), new UrlArgument(url), \"username\", \"domain\", \"password\", \"project-path\");\n+        return new TfsMaterial(new UrlArgument(url), \"username\", \"domain\", \"password\", \"project-path\");\n     }\n \n     public static SvnMaterial svnMaterial(String svnUrl, String folder) {"
        },
        {
          "filename": "server/src/test-fast/java/com/thoughtworks/go/server/service/MaterialServiceTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -49,7 +49,6 @@\n import com.thoughtworks.go.plugin.api.material.packagerepository.PackageConfiguration;\n import com.thoughtworks.go.plugin.api.material.packagerepository.PackageRevision;\n import com.thoughtworks.go.plugin.api.material.packagerepository.RepositoryConfiguration;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.server.dao.FeedModifier;\n import com.thoughtworks.go.server.domain.Username;\n import com.thoughtworks.go.server.persistence.MaterialRepository;\n@@ -200,7 +199,7 @@ public List<Modification> modificationsSince(File baseDir, Revision revision, Su\n     }, HgMaterial.class);\n \n     @DataPoint\n-    public static RequestDataPoints TFS_LATEST_MODIFICATIONS = new RequestDataPoints(new TfsMaterial(mock(GoCipher.class)) {\n+    public static RequestDataPoints TFS_LATEST_MODIFICATIONS = new RequestDataPoints(new TfsMaterial() {\n         @Override\n         public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n             return (List<Modification>) MODIFICATIONS;"
        },
        {
          "filename": "server/src/test-integration/java/com/thoughtworks/go/domain/materials/tfs/TfsMaterialPersistenceTest.java",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -19,7 +19,6 @@\n import com.thoughtworks.go.config.materials.tfs.TfsMaterial;\n import com.thoughtworks.go.domain.MaterialInstance;\n import com.thoughtworks.go.domain.materials.Material;\n-import com.thoughtworks.go.security.GoCipher;\n import com.thoughtworks.go.server.cache.GoCache;\n import com.thoughtworks.go.server.dao.DatabaseAccessHelper;\n import com.thoughtworks.go.server.persistence.MaterialRepository;\n@@ -64,7 +63,7 @@ public void teardown() throws Exception {\n \n     @Test\n     public void shouldBeAbleToConvertAMaterialInstanceObjectToTfsMaterialObject() {\n-        TfsMaterial tfsCfg = new TfsMaterial(new GoCipher(), new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"password\", \"/dev/null\");\n+        TfsMaterial tfsCfg = new TfsMaterial(new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"password\", \"/dev/null\");\n         tfsCfg.setFolder(\"folder\");\n         tfsCfg.setName(new CaseInsensitiveString(\"materialName\"));\n         MaterialInstance tfsInstance = materialRepository.findOrCreateFrom(tfsCfg);\n@@ -75,7 +74,7 @@ public void shouldBeAbleToConvertAMaterialInstanceObjectToTfsMaterialObject() {\n \n     @Test\n     public void shouldFindOldMaterial() {\n-        TfsMaterial tfsCfg = new TfsMaterial(new GoCipher(), new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n+        TfsMaterial tfsCfg = new TfsMaterial(new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n         MaterialInstance tfsInstance1 = materialRepository.findOrCreateFrom(tfsCfg);\n         goCache.clear();\n         MaterialInstance tfsInstance2 = materialRepository.findOrCreateFrom(tfsCfg);\n@@ -85,7 +84,7 @@ public void shouldFindOldMaterial() {\n \n     @Test\n     public void shouldSaveMaterialInstance() throws Exception {\n-        TfsMaterial tfsCfg = new TfsMaterial(new GoCipher(), new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n+        TfsMaterial tfsCfg = new TfsMaterial(new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n         MaterialInstance materialInstance = materialRepository.findOrCreateFrom(tfsCfg);\n         assertThat(materialRepository.findMaterialInstance(tfsCfg), is(materialInstance));\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 10,
        "dependency_files": 0,
        "test_files": 10,
        "unique_directories": 17,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "745b8846335e2d352bd17223122b3585ba63bc18",
            "date": "2025-01-14T11:10:03Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "7e0e0c87401d8ce8d76c651194e9165523416037",
            "date": "2025-01-14T11:09:46Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "99aa6ecc886d9c30f79601e30c06224112da3045",
            "date": "2025-01-14T11:09:29Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "6e87477e6527985cddd634b48bd3505be1079d4d",
            "date": "2025-01-14T11:09:11Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "90fccf4ddc5b1641b3fcaadd6eaeff34501aefb6",
            "date": "2025-01-14T10:44:32Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "GoCD is a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for continuous delivery of your product. GoCD versions prior to 21.1.0 leak the symmetric key used to encrypt/decrypt any secure variables/secrets in GoCD configuration to authenticated agents. A malicious/compromised agent may then expose that key from memory, and potentially allow an attacker the ability to decrypt secrets intended for other agents/environments if they also are able to obtain access to encrypted configuration values from the GoCD server. This issue is fixed in GoCD version 21.1.0. There are currently no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-14T20:15:15.553",
    "last_modified": "2024-11-21T07:18:00.317",
    "fix_date": "2020-12-08T06:05:51Z"
  },
  "references": [
    {
      "url": "https://github.com/gocd/gocd/commit/691b479f1310034992da141760e9c5d1f5b60e8a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/releases/tag/21.1.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/security/advisories/GHSA-f9qg-xcxq-cgv9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.gocd.org/releases/#21-1-0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/commit/691b479f1310034992da141760e9c5d1f5b60e8a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/releases/tag/21.1.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/security/advisories/GHSA-f9qg-xcxq-cgv9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.gocd.org/releases/#21-1-0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.344047",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gocd",
    "owner": "gocd",
    "created_at": "2013-12-13T05:26:16Z",
    "updated_at": "2025-01-14T12:47:48Z",
    "pushed_at": "2025-01-14T11:10:10Z",
    "size": 393992,
    "stars": 7159,
    "forks": 972,
    "open_issues": 82,
    "watchers": 7159,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 20251061,
      "TypeScript": 4424594,
      "Groovy": 2080119,
      "JavaScript": 753678,
      "SCSS": 564746,
      "Ruby": 364252,
      "HTML": 253777,
      "XSLT": 202698,
      "NSIS": 24216,
      "Shell": 15469,
      "FreeMarker": 13061,
      "EJS": 1626,
      "CSS": 1575,
      "Batchfile": 474
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:11:02.445502"
  }
}