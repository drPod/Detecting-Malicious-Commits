{
  "cve_id": "CVE-2022-39311",
  "github_data": {
    "repository": "gocd/gocd",
    "fix_commit": "7b88b70d6f7f429562d5cab49a80ea856e34cdc8",
    "related_commits": [
      "7b88b70d6f7f429562d5cab49a80ea856e34cdc8",
      "7b88b70d6f7f429562d5cab49a80ea856e34cdc8"
    ],
    "patch_url": "https://github.com/gocd/gocd/commit/7b88b70d6f7f429562d5cab49a80ea856e34cdc8.patch",
    "fix_commit_details": {
      "sha": "7b88b70d6f7f429562d5cab49a80ea856e34cdc8",
      "commit_date": "2021-01-01T21:16:50Z",
      "author": {
        "login": "marques-work",
        "type": "User",
        "stats": {
          "total_commits": 1043,
          "average_weekly_commits": 1.7982758620689656,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 137
        }
      },
      "commit_message": {
        "title": "Disable RMI endpoint by default",
        "length": 180,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 83,
        "additions": 63,
        "deletions": 20
      },
      "files": [
        {
          "filename": "server/src/main/java/com/thoughtworks/go/remote/AgentRemoteInvokerServiceExporter.java",
          "status": "modified",
          "additions": 29,
          "deletions": 2,
          "patch": "@@ -20,6 +20,7 @@\n import com.thoughtworks.go.domain.JobResult;\n import com.thoughtworks.go.domain.JobState;\n import com.thoughtworks.go.server.service.AgentRuntimeInfo;\n+import com.thoughtworks.go.util.SystemEnvironment;\n import org.slf4j.LoggerFactory;\n import org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;\n import org.springframework.remoting.support.RemoteInvocation;\n@@ -35,9 +36,9 @@\n import java.util.Objects;\n import java.util.Set;\n \n+import static com.thoughtworks.go.util.SystemEnvironment.AGENT_EXTRA_PROPERTIES;\n import static java.lang.String.format;\n-import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n-import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static javax.servlet.http.HttpServletResponse.*;\n \n /**\n  * Custom invoker service exporter that validates UUID authorization on agent requests. This prevents compromised agents\n@@ -55,8 +56,29 @@ public class AgentRemoteInvokerServiceExporter extends HttpInvokerServiceExporte\n             new MethodSignature(\"getCookie\", AgentRuntimeInfo.class)\n     );\n \n+    private final SystemEnvironment env;\n+\n+    public AgentRemoteInvokerServiceExporter() {\n+        this(new SystemEnvironment());\n+    }\n+\n+    public AgentRemoteInvokerServiceExporter(SystemEnvironment env) {\n+        this.env = env;\n+    }\n+\n     @Override\n     public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        if (rejectRMI()) {\n+            // yes, ideally, this should be short-circuited in the agent auth filter, but keeping this logic here has\n+            // some advantages:\n+            //   - it keeps all deprecated RMI logic in one place so it's easier to remove (just remove this class)\n+            //   - it's 100% reliable by virtue of its proximity to the RMI invocation code and can't be thwarted by\n+            //     some clever URI encoding to circumvent the uri path test that we would need to write at the filter\n+            //     level in order to selectively apply this logic to the RMI endpoint and not the JSON API endpoint\n+            reject(response, SC_GONE, \"This RMI endpoint is disabled.\");\n+            return;\n+        }\n+\n         try {\n             RemoteInvocation invocation = readRemoteInvocation(request);\n \n@@ -71,6 +93,11 @@ public void handleRequest(HttpServletRequest request, HttpServletResponse respon\n         }\n     }\n \n+    private boolean rejectRMI() {\n+        final String props = env.get(AGENT_EXTRA_PROPERTIES).toLowerCase();\n+        return !Arrays.asList(props.split(\"\\\\s+\")).contains(\"gocd.agent.remoting.legacy=true\");\n+    }\n+\n     /**\n      * Verifies that the agent UUID from the deserialized payload matches the UUID permitted by the agent authentication\n      * filter."
        },
        {
          "filename": "server/src/test-fast/java/com/thoughtworks/go/remote/AgentRemoteInvokerServiceExporterTest.java",
          "status": "modified",
          "additions": 34,
          "deletions": 18,
          "patch": "@@ -23,6 +23,7 @@\n import com.thoughtworks.go.http.mocks.MockHttpServletResponse;\n import com.thoughtworks.go.server.messaging.BuildRepositoryMessageProducer;\n import com.thoughtworks.go.server.service.AgentRuntimeInfo;\n+import com.thoughtworks.go.util.SystemEnvironment;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n@@ -33,6 +34,7 @@\n import javax.servlet.http.HttpServletResponse;\n import java.lang.reflect.InvocationTargetException;\n \n+import static com.thoughtworks.go.util.SystemEnvironment.AGENT_EXTRA_PROPERTIES;\n import static javax.servlet.http.HttpServletResponse.*;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.fail;\n@@ -46,21 +48,35 @@ public class AgentRemoteInvokerServiceExporterTest {\n \n     private MockHttpServletResponse res;\n \n+    @Mock\n+    private SystemEnvironment env;\n+\n     @Mock\n     private BuildRepositoryMessageProducer target;\n \n     @BeforeEach\n     void setup() throws Exception {\n         openMocks(this).close();\n+        when(env.get(AGENT_EXTRA_PROPERTIES)).thenReturn(\"gocd.agent.remoting.legacy=true\");\n         req = new MockHttpServletRequest();\n         req.addHeader(\"X-Agent-GUID\", AGENT_UUID);\n         res = new MockHttpServletResponse();\n     }\n \n+    @Test\n+    void rejectsWhenLegacyDisabled() throws Exception {\n+        when(env.get(AGENT_EXTRA_PROPERTIES)).thenReturn(\"\");\n+        final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"ping\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n+        invoker.handleRequest(req, res);\n+        verify(target, never()).ping(agent);\n+        assertEquals(SC_GONE, res.getStatus());\n+    }\n+\n     @Test\n     void isIgnored_allowedForSameUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"isIgnored\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class}, new Object[]{agent, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"isIgnored\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class}, new Object[]{agent, null}));\n         invoker.handleRequest(req, res);\n         verify(target, only()).isIgnored(agent, null);\n         assertEquals(SC_OK, res.getStatus());\n@@ -69,7 +85,7 @@ void isIgnored_allowedForSameUUID() throws Exception {\n     @Test\n     void isIgnored_rejectedForDifferentUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(\"other\");\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"isIgnored\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class}, new Object[]{agent, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"isIgnored\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class}, new Object[]{agent, null}));\n         invoker.handleRequest(req, res);\n         verify(target, never()).isIgnored(any(AgentRuntimeInfo.class), any(JobIdentifier.class));\n         assertEquals(SC_FORBIDDEN, res.getStatus());\n@@ -78,7 +94,7 @@ void isIgnored_rejectedForDifferentUUID() throws Exception {\n     @Test\n     void ping_allowedForSameUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"ping\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"ping\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n         invoker.handleRequest(req, res);\n         verify(target, only()).ping(agent);\n         assertEquals(SC_OK, res.getStatus());\n@@ -87,7 +103,7 @@ void ping_allowedForSameUUID() throws Exception {\n     @Test\n     void ping_rejectedForDifferentUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(\"other\");\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"ping\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"ping\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n         invoker.handleRequest(req, res);\n         verify(target, never()).ping(any(AgentRuntimeInfo.class));\n         assertEquals(SC_FORBIDDEN, res.getStatus());\n@@ -96,7 +112,7 @@ void ping_rejectedForDifferentUUID() throws Exception {\n     @Test\n     void getWork_allowedForSameUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getWork\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getWork\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n         invoker.handleRequest(req, res);\n         verify(target, only()).getWork(agent);\n         assertEquals(SC_OK, res.getStatus());\n@@ -105,7 +121,7 @@ void getWork_allowedForSameUUID() throws Exception {\n     @Test\n     void getWork_rejectedForDifferentUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(\"other\");\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getWork\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getWork\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n         invoker.handleRequest(req, res);\n         verify(target, never()).getWork(any(AgentRuntimeInfo.class));\n         assertEquals(SC_FORBIDDEN, res.getStatus());\n@@ -114,7 +130,7 @@ void getWork_rejectedForDifferentUUID() throws Exception {\n     @Test\n     void getCookie_allowedForSameUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getCookie\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getCookie\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n         invoker.handleRequest(req, res);\n         verify(target, only()).getCookie(agent);\n         assertEquals(SC_OK, res.getStatus());\n@@ -123,7 +139,7 @@ void getCookie_allowedForSameUUID() throws Exception {\n     @Test\n     void getCookie_rejectedForDifferentUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(\"other\");\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getCookie\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"getCookie\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n         invoker.handleRequest(req, res);\n         verify(target, never()).getCookie(any(AgentRuntimeInfo.class));\n         assertEquals(SC_FORBIDDEN, res.getStatus());\n@@ -132,7 +148,7 @@ void getCookie_rejectedForDifferentUUID() throws Exception {\n     @Test\n     void reportCurrentStatus_allowedForSameUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCurrentStatus\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobState.class}, new Object[]{agent, null, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCurrentStatus\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobState.class}, new Object[]{agent, null, null}));\n         invoker.handleRequest(req, res);\n         verify(target, only()).reportCurrentStatus(agent, null, null);\n         assertEquals(SC_OK, res.getStatus());\n@@ -141,7 +157,7 @@ void reportCurrentStatus_allowedForSameUUID() throws Exception {\n     @Test\n     void reportCurrentStatus_rejectedForDifferentUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(\"other\");\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCurrentStatus\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobState.class}, new Object[]{agent, null, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCurrentStatus\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobState.class}, new Object[]{agent, null, null}));\n         invoker.handleRequest(req, res);\n         verify(target, never()).reportCurrentStatus(any(AgentRuntimeInfo.class), any(JobIdentifier.class), any(JobState.class));\n         assertEquals(SC_FORBIDDEN, res.getStatus());\n@@ -150,7 +166,7 @@ void reportCurrentStatus_rejectedForDifferentUUID() throws Exception {\n     @Test\n     void reportCompleting_allowedForSameUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleting\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleting\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}));\n         invoker.handleRequest(req, res);\n         verify(target, only()).reportCompleting(agent, null, null);\n         assertEquals(SC_OK, res.getStatus());\n@@ -159,7 +175,7 @@ void reportCompleting_allowedForSameUUID() throws Exception {\n     @Test\n     void reportCompleting_rejectedForDifferentUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(\"other\");\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleting\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleting\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}));\n         invoker.handleRequest(req, res);\n         verify(target, never()).reportCompleting(any(AgentRuntimeInfo.class), any(JobIdentifier.class), any(JobResult.class));\n         assertEquals(SC_FORBIDDEN, res.getStatus());\n@@ -168,7 +184,7 @@ void reportCompleting_rejectedForDifferentUUID() throws Exception {\n     @Test\n     void reportCompleted_allowedForSameUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleted\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleted\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}));\n         invoker.handleRequest(req, res);\n         verify(target, only()).reportCompleted(agent, null, null);\n         assertEquals(SC_OK, res.getStatus());\n@@ -177,7 +193,7 @@ void reportCompleted_allowedForSameUUID() throws Exception {\n     @Test\n     void reportCompleted_rejectedForDifferentUUID() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(\"other\");\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleted\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"reportCompleted\", new Class[]{AgentRuntimeInfo.class, JobIdentifier.class, JobResult.class}, new Object[]{agent, null, null}));\n         invoker.handleRequest(req, res);\n         verify(target, never()).reportCompleted(any(AgentRuntimeInfo.class), any(JobIdentifier.class), any(JobResult.class));\n         assertEquals(SC_FORBIDDEN, res.getStatus());\n@@ -186,7 +202,7 @@ void reportCompleted_rejectedForDifferentUUID() throws Exception {\n     @Test\n     void rejectsUnknownMethod() throws Exception {\n         final AgentRuntimeInfo agent = runtimeInfo(AGENT_UUID);\n-        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"nonexistent\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}), target);\n+        final AgentRemoteInvokerServiceExporter invoker = deserializingWith(new RemoteInvocation(\"nonexistent\", new Class[]{AgentRuntimeInfo.class}, new Object[]{agent}));\n         invoker.handleRequest(req, res);\n         verifyNoInteractions(target);\n         assertEquals(SC_BAD_REQUEST, res.getStatus());\n@@ -200,11 +216,11 @@ private AgentIdentifier identifier(String uuid) {\n         return new AgentIdentifier(null, null, uuid);\n     }\n \n-    private static AgentRemoteInvokerServiceExporter deserializingWith(final RemoteInvocation invocation, final BuildRepositoryMessageProducer proxy) {\n-        final AgentRemoteInvokerServiceExporter invoker = new AgentRemoteInvokerServiceExporter() {\n+    private AgentRemoteInvokerServiceExporter deserializingWith(final RemoteInvocation invocation) {\n+        final AgentRemoteInvokerServiceExporter invoker = new AgentRemoteInvokerServiceExporter(env) {\n             @Override\n             protected Object getProxyForService() {\n-                return proxy;\n+                return target;\n             }\n \n             @Override"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "745b8846335e2d352bd17223122b3585ba63bc18",
            "date": "2025-01-14T11:10:03Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "7e0e0c87401d8ce8d76c651194e9165523416037",
            "date": "2025-01-14T11:09:46Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "99aa6ecc886d9c30f79601e30c06224112da3045",
            "date": "2025-01-14T11:09:29Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "6e87477e6527985cddd634b48bd3505be1079d4d",
            "date": "2025-01-14T11:09:11Z",
            "author_login": "chadlwilson"
          },
          {
            "sha": "90fccf4ddc5b1641b3fcaadd6eaeff34501aefb6",
            "date": "2025-01-14T10:44:32Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-502",
    "description": "GoCD is a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for continuous delivery of your product. GoCD versions prior to 21.1.0 are vulnerable to remote code execution on the server from a malicious or compromised agent. The Spring RemoteInvocation endpoint exposed agent communication and allowed deserialization of arbitrary java objects, as well as subsequent remote code execution. Exploitation requires agent-level authentication, thus an attacker would need to either compromise an existing agent, its network communication or register a new agent to practically exploit this vulnerability. This issue is fixed in GoCD version 21.1.0. There are currently no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-14T20:15:16.183",
    "last_modified": "2024-11-21T07:18:00.563",
    "fix_date": "2021-01-01T21:16:50Z"
  },
  "references": [
    {
      "url": "https://github.com/gocd/gocd/commit/7b88b70d6f7f429562d5cab49a80ea856e34cdc8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/security/advisories/GHSA-2hjh-3p3p-8hcm",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.gocd.org/releases/#21-1-0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/commit/7b88b70d6f7f429562d5cab49a80ea856e34cdc8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gocd/gocd/security/advisories/GHSA-2hjh-3p3p-8hcm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.gocd.org/releases/#21-1-0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.344402",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gocd",
    "owner": "gocd",
    "created_at": "2013-12-13T05:26:16Z",
    "updated_at": "2025-01-14T12:47:48Z",
    "pushed_at": "2025-01-14T11:10:10Z",
    "size": 393992,
    "stars": 7159,
    "forks": 972,
    "open_issues": 82,
    "watchers": 7159,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 20251061,
      "TypeScript": 4424594,
      "Groovy": 2080119,
      "JavaScript": 753678,
      "SCSS": 564746,
      "Ruby": 364252,
      "HTML": 253777,
      "XSLT": 202698,
      "NSIS": 24216,
      "Shell": 15469,
      "FreeMarker": 13061,
      "EJS": 1626,
      "CSS": 1575,
      "Batchfile": 474
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:11:02.445502"
  }
}