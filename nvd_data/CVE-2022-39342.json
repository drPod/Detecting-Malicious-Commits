{
  "cve_id": "CVE-2022-39342",
  "github_data": {
    "repository": "openfga/openfga",
    "fix_commit": "c8db1ee3d2a366f18e585dd33236340e76e784c4",
    "related_commits": [
      "c8db1ee3d2a366f18e585dd33236340e76e784c4",
      "c8db1ee3d2a366f18e585dd33236340e76e784c4"
    ],
    "patch_url": "https://github.com/openfga/openfga/commit/c8db1ee3d2a366f18e585dd33236340e76e784c4.patch",
    "fix_commit_details": {
      "sha": "c8db1ee3d2a366f18e585dd33236340e76e784c4",
      "commit_date": "2022-10-21T16:18:07Z",
      "author": {
        "login": "jon-whit",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-f4mm-2r69-mg5f",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 250,
        "additions": 225,
        "deletions": 25
      },
      "files": [
        {
          "filename": "pkg/typesystem/typesystem.go",
          "status": "modified",
          "additions": 44,
          "deletions": 9,
          "patch": "@@ -2,6 +2,7 @@ package typesystem\n \n import (\n \t\"fmt\"\n+\t\"reflect\"\n \n \t\"github.com/go-errors/errors\"\n \topenfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"\n@@ -233,21 +234,41 @@ func containsDuplicateType(model *openfgapb.AuthorizationModel) bool {\n func validateRelationRewrites(model *openfgapb.AuthorizationModel) error {\n \ttypeDefinitions := model.GetTypeDefinitions()\n \n-\tallRelations := map[string]struct{}{}\n-\ttypeToRelations := map[string]map[string]struct{}{}\n+\trelations := map[string]*openfgapb.Relation{}\n+\ttyperels := map[string]map[string]*openfgapb.Relation{}\n+\n \tfor _, td := range typeDefinitions {\n \t\tobjectType := td.GetType()\n-\t\ttypeToRelations[objectType] = map[string]struct{}{}\n-\t\tfor relation := range td.GetRelations() {\n-\t\t\ttypeToRelations[objectType][relation] = struct{}{}\n-\t\t\tallRelations[relation] = struct{}{}\n+\n+\t\ttyperels[objectType] = map[string]*openfgapb.Relation{}\n+\n+\t\tfor relation, rewrite := range td.GetRelations() {\n+\t\t\trelationMetadata := td.GetMetadata().GetRelations()\n+\t\t\tmd, ok := relationMetadata[relation]\n+\n+\t\t\tvar typeinfo *openfgapb.RelationTypeInfo\n+\t\t\tif ok {\n+\t\t\t\ttypeinfo = &openfgapb.RelationTypeInfo{\n+\t\t\t\t\tDirectlyRelatedUserTypes: md.GetDirectlyRelatedUserTypes(),\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tr := &openfgapb.Relation{\n+\t\t\t\tName:     relation,\n+\t\t\t\tRewrite:  rewrite,\n+\t\t\t\tTypeInfo: typeinfo,\n+\t\t\t}\n+\n+\t\t\ttyperels[objectType][relation] = r\n+\t\t\trelations[relation] = r\n \t\t}\n \t}\n \n \tfor _, td := range typeDefinitions {\n \t\tobjectType := td.GetType()\n+\n \t\tfor relation, rewrite := range td.GetRelations() {\n-\t\t\terr := isUsersetRewriteValid(allRelations, typeToRelations[objectType], objectType, relation, rewrite)\n+\t\t\terr := isUsersetRewriteValid(relations, typerels[objectType], objectType, relation, rewrite)\n \t\t\tif err != nil {\n \t\t\t\treturn err\n \t\t\t}\n@@ -259,7 +280,12 @@ func validateRelationRewrites(model *openfgapb.AuthorizationModel) error {\n \n // isUsersetRewriteValid checks if a particular userset rewrite is valid. The first argument is all the relations in\n // the typeSystem, the second argument is the subset of relations on the type where the rewrite occurs.\n-func isUsersetRewriteValid(allRelations map[string]struct{}, relationsOnType map[string]struct{}, objectType, relation string, rewrite *openfgapb.Userset) error {\n+func isUsersetRewriteValid(\n+\tallRelations map[string]*openfgapb.Relation,\n+\trelationsOnType map[string]*openfgapb.Relation,\n+\tobjectType, relation string,\n+\trewrite *openfgapb.Userset,\n+) error {\n \tif rewrite.GetUserset() == nil {\n \t\treturn InvalidRelationError(objectType, relation)\n \t}\n@@ -275,10 +301,19 @@ func isUsersetRewriteValid(allRelations map[string]struct{}, relationsOnType map\n \t\t}\n \tcase *openfgapb.Userset_TupleToUserset:\n \t\ttupleset := t.TupleToUserset.GetTupleset().GetRelation()\n-\t\tif _, ok := relationsOnType[tupleset]; !ok {\n+\n+\t\ttuplesetRelation, ok := relationsOnType[tupleset]\n+\t\tif !ok {\n \t\t\treturn RelationDoesNotExistError(objectType, tupleset)\n \t\t}\n \n+\t\t// tupleset relations must only be direct relationships, no rewrites\n+\t\t// are allowed on them\n+\t\ttuplesetRewrite := tuplesetRelation.GetRewrite()\n+\t\tif reflect.TypeOf(tuplesetRewrite.GetUserset()) != reflect.TypeOf(&openfgapb.Userset_This{}) {\n+\t\t\treturn errors.Errorf(\"the '%s#%s' relation is referenced in at least one tupleset and thus must be a direct relation\", objectType, tupleset)\n+\t\t}\n+\n \t\tcomputedUserset := t.TupleToUserset.GetComputedUserset().GetRelation()\n \t\tif _, ok := allRelations[computedUserset]; !ok {\n \t\t\treturn RelationDoesNotExistError(\"\", computedUserset)"
        },
        {
          "filename": "server/test/write_authzmodel.go",
          "status": "modified",
          "additions": 181,
          "deletions": 16,
          "patch": "@@ -5,11 +5,12 @@ import (\n \t\"fmt\"\n \t\"testing\"\n \n+\t\"github.com/go-errors/errors\"\n \t\"github.com/openfga/openfga/pkg/id\"\n \t\"github.com/openfga/openfga/pkg/logger\"\n \t\"github.com/openfga/openfga/pkg/typesystem\"\n \t\"github.com/openfga/openfga/server/commands\"\n-\t\"github.com/openfga/openfga/server/errors\"\n+\tserverErrors \"github.com/openfga/openfga/server/errors\"\n \t\"github.com/openfga/openfga/storage\"\n \t\"github.com/stretchr/testify/require\"\n \topenfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"\n@@ -109,7 +110,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\tStoreId:         storeID,\n \t\t\t\tTypeDefinitions: items,\n \t\t\t},\n-\t\t\terr: errors.ExceededEntityLimit(\"type definitions in an authorization model\", datastore.MaxTypesInTypeDefinition()),\n+\t\t\terr: serverErrors.ExceededEntityLimit(\"type definitions in an authorization model\", datastore.MaxTypesInTypeDefinition()),\n \t\t},\n \t\t{\n \t\t\tname: \"empty relations is valid\",\n@@ -151,7 +152,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.ErrDuplicateTypes),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.ErrDuplicateTypes),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfEmptyRewrites\",\n@@ -166,7 +167,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInComputedUserset\",\n@@ -188,7 +189,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInTupleToUserset\",\n@@ -215,7 +216,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInUnion\",\n@@ -250,7 +251,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInDifferenceBaseArgument\",\n@@ -285,7 +286,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInDifferenceSubtractArgument\",\n@@ -320,7 +321,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInTupleToUsersetTupleset\",\n@@ -349,7 +350,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInTupleToUsersetComputedUserset\",\n@@ -378,7 +379,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfTupleToUsersetReferencesUnknownRelation\",\n@@ -414,7 +415,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"bar\", \"writer\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"bar\", \"writer\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnknownRelationInIntersection\",\n@@ -447,7 +448,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.RelationDoesNotExistError(\"repo\", \"owner\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfDifferenceIncludesSameRelationTwice\",\n@@ -477,7 +478,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"viewer\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"viewer\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfUnionIncludesSameRelationTwice\",\n@@ -504,7 +505,7 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"viewer\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"viewer\")),\n \t\t},\n \t\t{\n \t\t\tname: \"ExecuteWriteFailsIfIntersectionIncludesSameRelationTwice\",\n@@ -530,7 +531,171 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\terr: errors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"viewer\")),\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(typesystem.InvalidRelationError(\"repo\", \"viewer\")),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Union Rewrite Contains Repeated Definitions\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"parent\": typesystem.This(),\n+\t\t\t\t\t\t\t\"viewer\": typesystem.Union(\n+\t\t\t\t\t\t\t\ttypesystem.ComputedUserset(\"editor\"),\n+\t\t\t\t\t\t\t\ttypesystem.ComputedUserset(\"editor\"),\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t\"editor\": typesystem.Union(typesystem.This(), typesystem.This()),\n+\t\t\t\t\t\t\t\"manage\": typesystem.Union(\n+\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"manage\"),\n+\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"manage\"),\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Intersection Rewrite Contains Repeated Definitions\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"parent\": typesystem.This(),\n+\t\t\t\t\t\t\t\"viewer\": typesystem.Intersection(\n+\t\t\t\t\t\t\t\ttypesystem.ComputedUserset(\"editor\"),\n+\t\t\t\t\t\t\t\ttypesystem.ComputedUserset(\"editor\"),\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t\"editor\": typesystem.Intersection(typesystem.This(), typesystem.This()),\n+\t\t\t\t\t\t\t\"manage\": typesystem.Intersection(\n+\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"manage\"),\n+\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"manage\"),\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Exclusion Rewrite Contains Repeated Definitions\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"parent\": typesystem.This(),\n+\t\t\t\t\t\t\t\"viewer\": typesystem.Difference(\n+\t\t\t\t\t\t\t\ttypesystem.ComputedUserset(\"editor\"),\n+\t\t\t\t\t\t\t\ttypesystem.ComputedUserset(\"editor\"),\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\t\"editor\": typesystem.Difference(typesystem.This(), typesystem.This()),\n+\t\t\t\t\t\t\t\"manage\": typesystem.Difference(\n+\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"manage\"),\n+\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"manage\"),\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Tupleset relation involves ComputedUserset rewrite\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"ancestor\": typesystem.This(),\n+\t\t\t\t\t\t\t\"parent\":   typesystem.ComputedUserset(\"ancestor\"),\n+\t\t\t\t\t\t\t\"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(\n+\t\t\t\terrors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),\n+\t\t\t),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Tupleset relation involves Union rewrite\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"ancestor\": typesystem.This(),\n+\t\t\t\t\t\t\t\"parent\":   typesystem.Union(typesystem.This(), typesystem.ComputedUserset(\"ancestor\")),\n+\t\t\t\t\t\t\t\"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(\n+\t\t\t\terrors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),\n+\t\t\t),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Tupleset relation involves Intersection rewrite\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"ancestor\": typesystem.This(),\n+\t\t\t\t\t\t\t\"parent\":   typesystem.Intersection(typesystem.This(), typesystem.ComputedUserset(\"ancestor\")),\n+\t\t\t\t\t\t\t\"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(\n+\t\t\t\terrors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),\n+\t\t\t),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Tupleset relation involves Exclusion rewrite\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"restricted\": typesystem.This(),\n+\t\t\t\t\t\t\t\"parent\":     typesystem.Difference(typesystem.This(), typesystem.ComputedUserset(\"restricted\")),\n+\t\t\t\t\t\t\t\"viewer\":     typesystem.TupleToUserset(\"parent\", \"viewer\"),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(\n+\t\t\t\terrors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),\n+\t\t\t),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Tupleset relation involves TupleToUserset rewrite\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"document\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"ancestor\": typesystem.This(),\n+\t\t\t\t\t\t\t\"parent\":   typesystem.TupleToUserset(\"ancestor\", \"viewer\"),\n+\t\t\t\t\t\t\t\"viewer\":   typesystem.TupleToUserset(\"parent\", \"viewer\"),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(\n+\t\t\t\terrors.New(\"the 'document#parent' relation is referenced in at least one tupleset and thus must be a direct relation\"),\n+\t\t\t),\n \t\t},\n \t}\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "40cf00389f9498edd7edacfd2b0602888f55d1a5",
            "date": "2025-01-14T00:17:26Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0199bd6f08ddb3825587938e55b640366a39e9ed",
            "date": "2025-01-13T21:25:16Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "cfd75567075ef916f6e871e8c8cf787e9170bbc7",
            "date": "2025-01-13T21:10:20Z",
            "author_login": "adriantam"
          },
          {
            "sha": "dc1a4803b1ae2f539a67cfa78a929923642c631b",
            "date": "2025-01-13T20:38:41Z",
            "author_login": "justincoh"
          },
          {
            "sha": "a4491e49f446d5aa121b384675ced9010a35f761",
            "date": "2025-01-13T15:22:20Z",
            "author_login": "adriantam"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-285",
    "description": "OpenFGA is an authorization/permission engine. Versions prior to version 0.2.4 are vulnerable to authorization bypass under certain conditions. Users whose model has a relation defined as a tupleset (the right hand side of a \u2018from\u2019 statement) that involves anything other than a direct relationship (e.g. \u2018as self\u2019) are vulnerable. Version 0.2.4 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-10-25T17:15:56.333",
    "last_modified": "2024-11-21T07:18:04.627",
    "fix_date": "2022-10-21T16:18:07Z"
  },
  "references": [
    {
      "url": "https://github.com/openfga/openfga/commit/c8db1ee3d2a366f18e585dd33236340e76e784c4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/releases/tag/v0.2.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/security/advisories/GHSA-f4mm-2r69-mg5f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/commit/c8db1ee3d2a366f18e585dd33236340e76e784c4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/releases/tag/v0.2.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/security/advisories/GHSA-f4mm-2r69-mg5f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:00.954084",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openfga",
    "owner": "openfga",
    "created_at": "2022-06-08T18:47:15Z",
    "updated_at": "2025-01-14T13:09:15Z",
    "pushed_at": "2025-01-14T01:10:04Z",
    "size": 31758,
    "stars": 3129,
    "forks": 220,
    "open_issues": 127,
    "watchers": 3129,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 2873841,
      "Makefile": 7516,
      "Dockerfile": 1275,
      "HTML": 379
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:56:19.885603"
  }
}