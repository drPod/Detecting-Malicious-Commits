{
  "cve_id": "CVE-2022-39348",
  "github_data": {
    "repository": "twisted/twisted",
    "fix_commit": "f2f5e81c03f14e253e85fe457e646130780db40b",
    "related_commits": [
      "f2f5e81c03f14e253e85fe457e646130780db40b",
      "f49041bb67792506d85aeda9cf6157e92f8048f4",
      "f2f5e81c03f14e253e85fe457e646130780db40b",
      "f49041bb67792506d85aeda9cf6157e92f8048f4"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f2f5e81c03f14e253e85fe457e646130780db40b",
      "commit_date": "2022-10-26T18:52:32Z",
      "author": {
        "login": "adiroiban",
        "type": "User",
        "stats": {
          "total_commits": 1603,
          "average_weekly_commits": 1.3032520325203252,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 174
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-vg46-2rrj-3647",
        "length": 138,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 484,
        "additions": 416,
        "deletions": 68
      },
      "files": [
        {
          "filename": "docs/web/howto/web-in-60/error-handling.rst",
          "status": "modified",
          "additions": 7,
          "deletions": 19,
          "patch": "@@ -32,32 +32,20 @@ As in the previous examples, we'll start with :py:class:`Site <twisted.web.serve\n \n \n \n-Next, we'll add one more import. :py:class:`NoResource <twisted.web.resource.NoResource>` is one of the pre-defined error\n+Next, we'll add one more import. :py:class:`notFound <twisted.web.pages.notFound>` is one of the pre-defined error\n resources provided by Twisted Web. It generates the necessary 404 response code\n-and renders a simple html page telling the client there is no such resource.\n-\n-\n-\n-\n+and renders a simple HTML page telling the client there is no such resource.\n \n .. code-block:: python\n \n-\n-    from twisted.web.resource import NoResource\n-\n-\n-\n+    from twisted.web.pages import notFound\n \n Next, we'll define a custom resource which does some dynamic URL\n dispatch. This example is going to be just like\n the :doc:`previous one <dynamic-dispatch>` , where the path segment is\n interpreted as a year; the difference is that this time we'll handle requests\n which don't conform to that pattern by returning the not found response:\n \n-\n-\n-\n-\n .. code-block:: python\n \n \n@@ -66,7 +54,7 @@ which don't conform to that pattern by returning the not found response:\n             try:\n                 year = int(name)\n             except ValueError:\n-                return NoResource()\n+                return notFound()\n             else:\n                 return YearPage(year)\n \n@@ -88,7 +76,7 @@ complete code for this example:\n     from twisted.web.server import Site\n     from twisted.web.resource import Resource\n     from twisted.internet import reactor, endpoints\n-    from twisted.web.resource import NoResource\n+    from twisted.web.pages import notFound\n \n     from calendar import calendar\n \n@@ -100,14 +88,14 @@ complete code for this example:\n         def render_GET(self, request):\n             cal = calendar(self.year)\n             return (b\"<!DOCTYPE html><html><head><meta charset='utf-8'>\"\n-                    b\"<title></title></head><body><pre>\" + cal.encode('utf-8') + \"</pre>\")\n+                    b\"<title></title></head><body><pre>\" + cal.encode('utf-8') + b\"</pre>\")\n \n     class Calendar(Resource):\n         def getChild(self, name, request):\n             try:\n                 year = int(name)\n             except ValueError:\n-                return NoResource()\n+                return notFound()\n             else:\n                 return YearPage(year)\n "
        },
        {
          "filename": "src/twisted/web/_auth/wrapper.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -21,7 +21,7 @@\n from twisted.logger import Logger\n from twisted.python.components import proxyForInterface\n from twisted.web import util\n-from twisted.web.resource import ErrorPage, IResource\n+from twisted.web.resource import IResource, _UnsafeErrorPage\n \n \n @implementer(IResource)\n@@ -52,7 +52,7 @@ def generateWWWAuthenticate(scheme, challenge):\n             return b\" \".join([scheme, b\", \".join(lst)])\n \n         def quoteString(s):\n-            return b'\"' + s.replace(b\"\\\\\", br\"\\\\\").replace(b'\"', br\"\\\"\") + b'\"'\n+            return b'\"' + s.replace(b\"\\\\\", rb\"\\\\\").replace(b'\"', rb\"\\\"\") + b'\"'\n \n         request.setResponseCode(401)\n         for fact in self._credentialFactories:\n@@ -125,7 +125,7 @@ def _authorizedResource(self, request):\n             return UnauthorizedResource(self._credentialFactories)\n         except BaseException:\n             self._log.failure(\"Unexpected failure from credentials factory\")\n-            return ErrorPage(500, None, None)\n+            return _UnsafeErrorPage(500, \"Internal Error\", \"\")\n         else:\n             return util.DeferredResource(self._login(credentials))\n \n@@ -213,7 +213,7 @@ def _loginFailed(self, result):\n                 \"unexpected error\",\n                 failure=result,\n             )\n-            return ErrorPage(500, None, None)\n+            return _UnsafeErrorPage(500, \"Internal Error\", \"\")\n \n     def _selectParseHeader(self, header):\n         \"\"\""
        },
        {
          "filename": "src/twisted/web/_template_util.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1034,9 +1034,9 @@ class _TagFactory:\n     \"\"\"\n     A factory for L{Tag} objects; the implementation of the L{tags} object.\n \n-    This allows for the syntactic convenience of C{from twisted.web.html import\n-    tags; tags.a(href=\"linked-page.html\")}, where 'a' can be basically any HTML\n-    tag.\n+    This allows for the syntactic convenience of C{from twisted.web.template\n+    import tags; tags.a(href=\"linked-page.html\")}, where 'a' can be basically\n+    any HTML tag.\n \n     The class is not exposed publicly because you only ever need one of these,\n     and we already made it for you."
        },
        {
          "filename": "src/twisted/web/distrib.py",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -124,9 +124,10 @@ def failed(self, failure):\n         # XXX: Argh. FIXME.\n         failure = str(failure)\n         self.request.write(\n-            resource.ErrorPage(\n+            resource._UnsafeErrorPage(\n                 http.INTERNAL_SERVER_ERROR,\n                 \"Server Connection Lost\",\n+                # GHSA-vg46-2rrj-3647 note: _PRE does HTML-escape the input.\n                 \"Connection to distributed server lost:\" + util._PRE(failure),\n             ).render(self.request)\n         )\n@@ -376,7 +377,7 @@ def getChild(self, name, request):\n                 pw_shell,\n             ) = self._pwd.getpwnam(username.decode(sys.getfilesystemencoding()))\n         except KeyError:\n-            return resource.NoResource()\n+            return resource._UnsafeNoResource()\n         if sub:\n             twistdsock = os.path.join(pw_dir, self.userSocketName)\n             rs = ResourceSubscription(\"unix\", twistdsock)\n@@ -385,5 +386,5 @@ def getChild(self, name, request):\n         else:\n             path = os.path.join(pw_dir, self.userDirName)\n             if not os.path.exists(path):\n-                return resource.NoResource()\n+                return resource._UnsafeNoResource()\n             return static.File(path)"
        },
        {
          "filename": "src/twisted/web/newsfragments/11716.bugfix",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+twisted.web.vhost.NameVirtualHost no longer echoes HTML received in the Host header without escaping it (CVE-2022-39348, GHSA-vg46-2rrj-3647)."
        },
        {
          "filename": "src/twisted/web/newsfragments/11716.feature",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+The twisted.web.pages.errorPage, notFound, and forbidden each return an IResource that displays an HTML error pages safely rendered using twisted.web.template."
        },
        {
          "filename": "src/twisted/web/newsfragments/11716.removal",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+The twisted.web.resource.ErrorPage, NoResource, and ForbiddenResource classes have been deprecated in favor of new implementations twisted.web.pages module because they permit HTML injection."
        },
        {
          "filename": "src/twisted/web/pages.py",
          "status": "added",
          "additions": 134,
          "deletions": 0,
          "patch": "@@ -0,0 +1,134 @@\n+# -*- test-case-name: twisted.web.test.test_pages -*-\n+# Copyright (c) Twisted Matrix Laboratories.\n+# See LICENSE for details.\n+\n+\"\"\"\n+Utility implementations of L{IResource}.\n+\"\"\"\n+\n+__all__ = (\n+    \"errorPage\",\n+    \"notFound\",\n+    \"forbidden\",\n+)\n+\n+from typing import cast\n+\n+from twisted.web import http\n+from twisted.web.iweb import IRenderable, IRequest\n+from twisted.web.resource import IResource, Resource\n+from twisted.web.template import renderElement, tags\n+\n+\n+class _ErrorPage(Resource):\n+    \"\"\"\n+    L{_ErrorPage} is a resource that responds to all requests with a particular\n+    (parameterized) HTTP status code and an HTML body containing some\n+    descriptive text. This is useful for rendering simple error pages.\n+\n+    @see: L{twisted.web.pages.errorPage}\n+\n+    @ivar _code: An integer HTTP status code which will be used for the\n+        response.\n+\n+    @ivar _brief: A short string which will be included in the response body as\n+        the page title.\n+\n+    @ivar _detail: A longer string which will be included in the response body.\n+    \"\"\"\n+\n+    def __init__(self, code: int, brief: str, detail: str) -> None:\n+        super().__init__()\n+        self._code: int = code\n+        self._brief: str = brief\n+        self._detail: str = detail\n+\n+    def render(self, request: IRequest) -> object:\n+        \"\"\"\n+        Respond to all requests with the given HTTP status code and an HTML\n+        document containing the explanatory strings.\n+        \"\"\"\n+        request.setResponseCode(self._code)\n+        request.setHeader(b\"content-type\", b\"text/html; charset=utf-8\")\n+        return renderElement(\n+            request,\n+            # cast because the type annotations here seem off; Tag isn't an\n+            # IRenderable but also probably should be? See\n+            # https://github.com/twisted/twisted/issues/4982\n+            cast(\n+                IRenderable,\n+                tags.html(\n+                    tags.head(tags.title(f\"{self._code} - {self._brief}\")),\n+                    tags.body(tags.h1(self._brief), tags.p(self._detail)),\n+                ),\n+            ),\n+        )\n+\n+    def getChild(self, path: bytes, request: IRequest) -> Resource:\n+        \"\"\"\n+        Handle all requests for which L{_ErrorPage} lacks a child by returning\n+        this error page.\n+\n+        @param path: A path segment.\n+\n+        @param request: HTTP request\n+        \"\"\"\n+        return self\n+\n+\n+def errorPage(code: int, brief: str, detail: str) -> IResource:\n+    \"\"\"\n+    Build a resource that responds to all requests with a particular HTTP\n+    status code and an HTML body containing some descriptive text. This is\n+    useful for rendering simple error pages.\n+\n+    The resource dynamically handles all paths below it. Use\n+    L{IResource.putChild()} override specific path.\n+\n+    @param code: An integer HTTP status code which will be used for the\n+        response.\n+\n+    @param brief: A short string which will be included in the response\n+        body as the page title.\n+\n+    @param detail: A longer string which will be included in the\n+        response body.\n+\n+    @returns: An L{IResource}\n+    \"\"\"\n+    return _ErrorPage(code, brief, detail)\n+\n+\n+def notFound(\n+    brief: str = \"No Such Resource\",\n+    message: str = \"Sorry. No luck finding that resource.\",\n+) -> IResource:\n+    \"\"\"\n+    Generate an L{IResource} with a 404 Not Found status code.\n+\n+    @see: L{twisted.web.pages.errorPage}\n+\n+    @param brief: A short string displayed as the page title.\n+\n+    @param brief: A longer string displayed in the page body.\n+\n+    @returns: An L{IResource}\n+    \"\"\"\n+    return _ErrorPage(http.NOT_FOUND, brief, message)\n+\n+\n+def forbidden(\n+    brief: str = \"Forbidden Resource\", message: str = \"Sorry, resource is forbidden.\"\n+) -> IResource:\n+    \"\"\"\n+    Generate an L{IResource} with a 403 Forbidden status code.\n+\n+    @see: L{twisted.web.pages.errorPage}\n+\n+    @param brief: A short string displayed as the page title.\n+\n+    @param brief: A longer string displayed in the page body.\n+\n+    @returns: An L{IResource}\n+    \"\"\"\n+    return _ErrorPage(http.FORBIDDEN, brief, message)"
        },
        {
          "filename": "src/twisted/web/resource.py",
          "status": "modified",
          "additions": 60,
          "deletions": 15,
          "patch": "@@ -1,9 +1,11 @@\n-# -*- test-case-name: twisted.web.test.test_web -*-\n+# -*- test-case-name: twisted.web.test.test_web, twisted.web.test.test_resource -*-\n # Copyright (c) Twisted Matrix Laboratories.\n # See LICENSE for details.\n \n \"\"\"\n Implementation of the lowest-level Resource class.\n+\n+See L{twisted.web.pages} for some utility implementations.\n \"\"\"\n \n \n@@ -21,8 +23,11 @@\n \n from zope.interface import Attribute, Interface, implementer\n \n+from incremental import Version\n+\n from twisted.python.compat import nativeString\n from twisted.python.components import proxyForInterface\n+from twisted.python.deprecate import deprecatedModuleAttribute\n from twisted.python.reflect import prefixedMethodNames\n from twisted.web._responses import FORBIDDEN, NOT_FOUND\n from twisted.web.error import UnsupportedMethod\n@@ -180,7 +185,7 @@ def getChild(self, path, request):\n         Parameters and return value have the same meaning and requirements as\n         those defined by L{IResource.getChildWithDefault}.\n         \"\"\"\n-        return NoResource(\"No such child resource.\")\n+        return _UnsafeNoResource()\n \n     def getChildWithDefault(self, path, request):\n         \"\"\"\n@@ -287,20 +292,25 @@ def _computeAllowedMethods(resource):\n     return allowedMethods\n \n \n-class ErrorPage(Resource):\n+class _UnsafeErrorPage(Resource):\n     \"\"\"\n-    L{ErrorPage} is a resource which responds with a particular\n+    L{_UnsafeErrorPage}, publicly available via the deprecated alias\n+    C{ErrorPage}, is a resource which responds with a particular\n     (parameterized) status and a body consisting of HTML containing some\n     descriptive text.  This is useful for rendering simple error pages.\n \n+    Deprecated in Twisted NEXT because it permits HTML injection; use\n+    L{twisted.web.pages.errorPage} instead.\n+\n     @ivar template: A native string which will have a dictionary interpolated\n         into it to generate the response body.  The dictionary has the following\n         keys:\n \n-          - C{\"code\"}: The status code passed to L{ErrorPage.__init__}.\n-          - C{\"brief\"}: The brief description passed to L{ErrorPage.__init__}.\n+          - C{\"code\"}: The status code passed to L{_UnsafeErrorPage.__init__}.\n+          - C{\"brief\"}: The brief description passed to\n+            L{_UnsafeErrorPage.__init__}.\n           - C{\"detail\"}: The detailed description passed to\n-            L{ErrorPage.__init__}.\n+            L{_UnsafeErrorPage.__init__}.\n \n     @ivar code: An integer status code which will be used for the response.\n     @type code: C{int}\n@@ -343,24 +353,59 @@ def getChild(self, chnam, request):\n         return self\n \n \n-class NoResource(ErrorPage):\n+class _UnsafeNoResource(_UnsafeErrorPage):\n     \"\"\"\n-    L{NoResource} is a specialization of L{ErrorPage} which returns the HTTP\n-    response code I{NOT FOUND}.\n+    L{_UnsafeNoResource}, publicly available via the deprecated alias\n+    C{NoResource}, is a specialization of L{_UnsafeErrorPage} which\n+    returns the HTTP response code I{NOT FOUND}.\n+\n+    Deprecated in Twisted NEXT because it permits HTML injection; use\n+    L{twisted.web.pages.notFound} instead.\n     \"\"\"\n \n     def __init__(self, message=\"Sorry. No luck finding that resource.\"):\n-        ErrorPage.__init__(self, NOT_FOUND, \"No Such Resource\", message)\n+        _UnsafeErrorPage.__init__(self, NOT_FOUND, \"No Such Resource\", message)\n \n \n-class ForbiddenResource(ErrorPage):\n+class _UnsafeForbiddenResource(_UnsafeErrorPage):\n     \"\"\"\n-    L{ForbiddenResource} is a specialization of L{ErrorPage} which returns the\n-    I{FORBIDDEN} HTTP response code.\n+    L{_UnsafeForbiddenResource}, publicly available via the deprecated alias\n+    C{ForbiddenResource} is a specialization of L{_UnsafeErrorPage} which\n+    returns the I{FORBIDDEN} HTTP response code.\n+\n+    Deprecated in Twisted NEXT because it permits HTML injection; use\n+    L{twisted.web.pages.forbidden} instead.\n     \"\"\"\n \n     def __init__(self, message=\"Sorry, resource is forbidden.\"):\n-        ErrorPage.__init__(self, FORBIDDEN, \"Forbidden Resource\", message)\n+        _UnsafeErrorPage.__init__(self, FORBIDDEN, \"Forbidden Resource\", message)\n+\n+\n+# Deliberately undocumented public aliases. See GHSA-vg46-2rrj-3647.\n+ErrorPage = _UnsafeErrorPage\n+NoResource = _UnsafeNoResource\n+ForbiddenResource = _UnsafeForbiddenResource\n+\n+deprecatedModuleAttribute(\n+    Version(\"Twisted\", \"NEXT\", 0, 0),\n+    \"Use twisted.web.pages.errorPage instead, which properly escapes HTML.\",\n+    __name__,\n+    \"ErrorPage\",\n+)\n+\n+deprecatedModuleAttribute(\n+    Version(\"Twisted\", \"NEXT\", 0, 0),\n+    \"Use twisted.web.pages.notFound instead, which properly escapes HTML.\",\n+    __name__,\n+    \"NoResource\",\n+)\n+\n+deprecatedModuleAttribute(\n+    Version(\"Twisted\", \"NEXT\", 0, 0),\n+    \"Use twisted.web.pages.forbidden instead, which properly escapes HTML.\",\n+    __name__,\n+    \"ForbiddenResource\",\n+)\n \n \n class _IEncodingResource(Interface):"
        },
        {
          "filename": "src/twisted/web/script.py",
          "status": "modified",
          "additions": 9,
          "deletions": 5,
          "patch": "@@ -49,7 +49,7 @@ def recache(self):\n         self.doCache = 1\n \n \n-noRsrc = resource.ErrorPage(500, \"Whoops! Internal Error\", rpyNoResource)\n+noRsrc = resource._UnsafeErrorPage(500, \"Whoops! Internal Error\", rpyNoResource)\n \n \n def ResourceScript(path, registry):\n@@ -81,7 +81,9 @@ def ResourceTemplate(path, registry):\n \n     glob = {\n         \"__file__\": _coerceToFilesystemEncoding(\"\", path),\n-        \"resource\": resource.ErrorPage(500, \"Whoops! Internal Error\", rpyNoResource),\n+        \"resource\": resource._UnsafeErrorPage(\n+            500, \"Whoops! Internal Error\", rpyNoResource\n+        ),\n         \"registry\": registry,\n     }\n \n@@ -133,10 +135,10 @@ def getChild(self, path, request):\n             return ResourceScriptDirectory(fn, self.registry)\n         if os.path.exists(fn):\n             return ResourceScript(fn, self.registry)\n-        return resource.NoResource()\n+        return resource._UnsafeNoResource()\n \n     def render(self, request):\n-        return resource.NoResource().render(request)\n+        return resource._UnsafeNoResource().render(request)\n \n \n class PythonScript(resource.Resource):\n@@ -178,7 +180,9 @@ def render(self, request):\n         except OSError as e:\n             if e.errno == 2:  # file not found\n                 request.setResponseCode(http.NOT_FOUND)\n-                request.write(resource.NoResource(\"File not found.\").render(request))\n+                request.write(\n+                    resource._UnsafeNoResource(\"File not found.\").render(request)\n+                )\n         except BaseException:\n             io = StringIO()\n             traceback.print_exc(file=io)"
        },
        {
          "filename": "src/twisted/web/server.py",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -335,10 +335,12 @@ def render(self, resrc):\n                         \"allowed\": \", \".join([nativeString(x) for x in allowedMethods]),\n                     }\n                 )\n-                epage = resource.ErrorPage(http.NOT_ALLOWED, \"Method Not Allowed\", s)\n+                epage = resource._UnsafeErrorPage(\n+                    http.NOT_ALLOWED, \"Method Not Allowed\", s\n+                )\n                 body = epage.render(self)\n             else:\n-                epage = resource.ErrorPage(\n+                epage = resource._UnsafeErrorPage(\n                     http.NOT_IMPLEMENTED,\n                     \"Huh?\",\n                     \"I don't know how to treat a %s request.\"\n@@ -350,10 +352,11 @@ def render(self, resrc):\n         if body is NOT_DONE_YET:\n             return\n         if not isinstance(body, bytes):\n-            body = resource.ErrorPage(\n+            body = resource._UnsafeErrorPage(\n                 http.INTERNAL_SERVER_ERROR,\n                 \"Request did not return bytes\",\n                 \"Request: \"\n+                # GHSA-vg46-2rrj-3647 note: _PRE does HTML-escape the input.\n                 + util._PRE(reflect.safe_repr(self))\n                 + \"<br />\"\n                 + \"Resource: \"\n@@ -607,7 +610,7 @@ class GzipEncoderFactory:\n     @since: 12.3\n     \"\"\"\n \n-    _gzipCheckRegex = re.compile(br\"(:?^|[\\s,])gzip(:?$|[\\s,])\")\n+    _gzipCheckRegex = re.compile(rb\"(:?^|[\\s,])gzip(:?$|[\\s,])\")\n     compressLevel = 9\n \n     def encoderForRequest(self, request):"
        },
        {
          "filename": "src/twisted/web/static.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -31,7 +31,7 @@\n from twisted.web import http, resource, server\n from twisted.web.util import redirectTo\n \n-dangerousPathError = resource.NoResource(\"Invalid request URL.\")\n+dangerousPathError = resource._UnsafeNoResource(\"Invalid request URL.\")\n \n \n def isDangerous(path):\n@@ -255,8 +255,8 @@ def ignoreExt(self, ext):\n         \"\"\"\n         self.ignoredExts.append(ext)\n \n-    childNotFound = resource.NoResource(\"File not found.\")\n-    forbidden = resource.ForbiddenResource()\n+    childNotFound = resource._UnsafeNoResource(\"File not found.\")\n+    forbidden = resource._UnsafeForbiddenResource()\n \n     def directoryListing(self):\n         \"\"\""
        },
        {
          "filename": "src/twisted/web/test/test_pages.py",
          "status": "added",
          "additions": 113,
          "deletions": 0,
          "patch": "@@ -0,0 +1,113 @@\n+# Copyright (c) Twisted Matrix Laboratories.\n+# See LICENSE for details.\n+\n+\"\"\"\n+Test L{twisted.web.pages}\n+\"\"\"\n+\n+from typing import cast\n+\n+from twisted.trial.unittest import SynchronousTestCase\n+from twisted.web.http_headers import Headers\n+from twisted.web.iweb import IRequest\n+from twisted.web.pages import errorPage, forbidden, notFound\n+from twisted.web.resource import IResource\n+from twisted.web.test.requesthelper import DummyRequest\n+\n+\n+def _render(resource: IResource) -> DummyRequest:\n+    \"\"\"\n+    Render a response using the given resource.\n+\n+    @param resource: The resource to use to handle the request.\n+\n+    @returns: The request that the resource handled,\n+    \"\"\"\n+    request = DummyRequest([b\"\"])\n+    # The cast is necessary because DummyRequest isn't annotated\n+    # as an IRequest, and this can't be trivially done. See\n+    # https://github.com/twisted/twisted/issues/11719\n+    resource.render(cast(IRequest, request))\n+    return request\n+\n+\n+class ErrorPageTests(SynchronousTestCase):\n+    \"\"\"\n+    Test L{twisted.web.pages._ErrorPage} and its public aliases L{errorPage},\n+    L{notFound} and L{forbidden}.\n+    \"\"\"\n+\n+    maxDiff = None\n+\n+    def assertResponse(self, request: DummyRequest, code: int, body: bytes) -> None:\n+        self.assertEqual(request.responseCode, code)\n+        self.assertEqual(\n+            request.responseHeaders,\n+            Headers({b\"content-type\": [b\"text/html; charset=utf-8\"]}),\n+        )\n+        self.assertEqual(\n+            # Decode to str because unittest somehow still doesn't diff bytes\n+            # without truncating them in 2022.\n+            b\"\".join(request.written).decode(\"latin-1\"),\n+            body.decode(\"latin-1\"),\n+        )\n+\n+    def test_escapesHTML(self):\n+        \"\"\"\n+        The I{brief} and I{detail} parameters are HTML-escaped on render.\n+        \"\"\"\n+        self.assertResponse(\n+            _render(errorPage(400, \"A & B\", \"<script>alert('oops!')\")),\n+            400,\n+            (\n+                b\"<!DOCTYPE html>\\n\"\n+                b\"<html><head><title>400 - A &amp; B</title></head>\"\n+                b\"<body><h1>A &amp; B</h1><p>&lt;script&gt;alert('oops!')\"\n+                b\"</p></body></html>\"\n+            ),\n+        )\n+\n+    def test_getChild(self):\n+        \"\"\"\n+        The C{getChild} method of the resource returned by L{errorPage} returns\n+        the L{_ErrorPage} it is called on.\n+        \"\"\"\n+        page = errorPage(404, \"foo\", \"bar\")\n+        self.assertIs(\n+            page.getChild(b\"name\", DummyRequest([b\"\"])),\n+            page,\n+        )\n+\n+    def test_notFoundDefaults(self):\n+        \"\"\"\n+        The default arguments to L{twisted.web.pages.notFound} produce\n+        a reasonable error page.\n+        \"\"\"\n+        self.assertResponse(\n+            _render(notFound()),\n+            404,\n+            (\n+                b\"<!DOCTYPE html>\\n\"\n+                b\"<html><head><title>404 - No Such Resource</title></head>\"\n+                b\"<body><h1>No Such Resource</h1>\"\n+                b\"<p>Sorry. No luck finding that resource.</p>\"\n+                b\"</body></html>\"\n+            ),\n+        )\n+\n+    def test_forbiddenDefaults(self):\n+        \"\"\"\n+        The default arguments to L{twisted.web.pages.forbidden} produce\n+        a reasonable error page.\n+        \"\"\"\n+        self.assertResponse(\n+            _render(forbidden()),\n+            403,\n+            (\n+                b\"<!DOCTYPE html>\\n\"\n+                b\"<html><head><title>403 - Forbidden Resource</title></head>\"\n+                b\"<body><h1>Forbidden Resource</h1>\"\n+                b\"<p>Sorry, resource is forbidden.</p>\"\n+                b\"</body></html>\"\n+            ),\n+        )"
        },
        {
          "filename": "src/twisted/web/test/test_resource.py",
          "status": "modified",
          "additions": 47,
          "deletions": 4,
          "patch": "@@ -11,24 +11,67 @@\n from twisted.web.resource import (\n     FORBIDDEN,\n     NOT_FOUND,\n-    ErrorPage,\n-    ForbiddenResource,\n-    NoResource,\n     Resource,\n+    _UnsafeErrorPage as ErrorPage,\n+    _UnsafeForbiddenResource as ForbiddenResource,\n+    _UnsafeNoResource as NoResource,\n     getChildForRequest,\n )\n from twisted.web.test.requesthelper import DummyRequest\n \n \n class ErrorPageTests(TestCase):\n     \"\"\"\n-    Tests for L{ErrorPage}, L{NoResource}, and L{ForbiddenResource}.\n+    Tests for L{_UnafeErrorPage}, L{_UnsafeNoResource}, and\n+    L{_UnsafeForbiddenResource}.\n     \"\"\"\n \n     errorPage = ErrorPage\n     noResource = NoResource\n     forbiddenResource = ForbiddenResource\n \n+    def test_deprecatedErrorPage(self):\n+        \"\"\"\n+        The public C{twisted.web.resource.ErrorPage} alias for the\n+        corresponding C{_Unsafe} class produces a deprecation warning when\n+        imported.\n+        \"\"\"\n+        from twisted.web.resource import ErrorPage\n+\n+        self.assertIs(ErrorPage, self.errorPage)\n+\n+        [warning] = self.flushWarnings()\n+        self.assertEqual(warning[\"category\"], DeprecationWarning)\n+        self.assertIn(\"twisted.web.pages.errorPage\", warning[\"message\"])\n+\n+    def test_deprecatedNoResource(self):\n+        \"\"\"\n+        The public C{twisted.web.resource.NoResource} alias for the\n+        corresponding C{_Unsafe} class produces a deprecation warning when\n+        imported.\n+        \"\"\"\n+        from twisted.web.resource import NoResource\n+\n+        self.assertIs(NoResource, self.noResource)\n+\n+        [warning] = self.flushWarnings()\n+        self.assertEqual(warning[\"category\"], DeprecationWarning)\n+        self.assertIn(\"twisted.web.pages.notFound\", warning[\"message\"])\n+\n+    def test_deprecatedForbiddenResource(self):\n+        \"\"\"\n+        The public C{twisted.web.resource.ForbiddenResource} alias for the\n+        corresponding C{_Unsafe} class produce a deprecation warning when\n+        imported.\n+        \"\"\"\n+        from twisted.web.resource import ForbiddenResource\n+\n+        self.assertIs(ForbiddenResource, self.forbiddenResource)\n+\n+        [warning] = self.flushWarnings()\n+        self.assertEqual(warning[\"category\"], DeprecationWarning)\n+        self.assertIn(\"twisted.web.pages.forbidden\", warning[\"message\"])\n+\n     def test_getChild(self):\n         \"\"\"\n         The C{getChild} method of L{ErrorPage} returns the L{ErrorPage} it is"
        },
        {
          "filename": "src/twisted/web/test/test_vhost.py",
          "status": "modified",
          "additions": 16,
          "deletions": 3,
          "patch": "@@ -66,7 +66,7 @@ def test_renderWithoutHost(self):\n         \"\"\"\n         virtualHostResource = NameVirtualHost()\n         virtualHostResource.default = Data(b\"correct result\", \"\")\n-        request = DummyRequest([\"\"])\n+        request = DummyRequest([b\"\"])\n         self.assertEqual(virtualHostResource.render(request), b\"correct result\")\n \n     def test_renderWithoutHostNoDefault(self):\n@@ -76,7 +76,7 @@ def test_renderWithoutHostNoDefault(self):\n         header in the request.\n         \"\"\"\n         virtualHostResource = NameVirtualHost()\n-        request = DummyRequest([\"\"])\n+        request = DummyRequest([b\"\"])\n         d = _render(virtualHostResource, request)\n \n         def cbRendered(ignored):\n@@ -140,7 +140,7 @@ def test_renderWithUnknownHostNoDefault(self):\n         matching the value of the I{Host} header in the request.\n         \"\"\"\n         virtualHostResource = NameVirtualHost()\n-        request = DummyRequest([\"\"])\n+        request = DummyRequest([b\"\"])\n         request.requestHeaders.addRawHeader(b\"host\", b\"example.com\")\n         d = _render(virtualHostResource, request)\n \n@@ -150,6 +150,19 @@ def cbRendered(ignored):\n         d.addCallback(cbRendered)\n         return d\n \n+    async def test_renderWithHTMLHost(self):\n+        \"\"\"\n+        L{NameVirtualHost.render} doesn't echo unescaped HTML when present in\n+        the I{Host} header.\n+        \"\"\"\n+        virtualHostResource = NameVirtualHost()\n+        request = DummyRequest([b\"\"])\n+        request.requestHeaders.addRawHeader(b\"host\", b\"<b>example</b>.com\")\n+\n+        await _render(virtualHostResource, request)\n+\n+        self.assertNotIn(b\"<b>\", b\"\".join(request.written))\n+\n     def test_getChild(self):\n         \"\"\"\n         L{NameVirtualHost.getChild} returns correct I{Resource} based off"
        },
        {
          "filename": "src/twisted/web/vhost.py",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -9,7 +9,7 @@\n \n # Twisted Imports\n from twisted.python import roots\n-from twisted.web import resource\n+from twisted.web import pages, resource\n \n \n class VirtualHostCollection(roots.Homogenous):\n@@ -77,12 +77,13 @@ def removeHost(self, name):\n     def _getResourceForRequest(self, request):\n         \"\"\"(Internal) Get the appropriate resource for the given host.\"\"\"\n         hostHeader = request.getHeader(b\"host\")\n-        if hostHeader == None:\n-            return self.default or resource.NoResource()\n+        if hostHeader is None:\n+            return self.default or pages.notFound()\n         else:\n             host = hostHeader.lower().split(b\":\", 1)[0]\n-        return self.hosts.get(host, self.default) or resource.NoResource(\n-            \"host %s not in vhost map\" % repr(host)\n+        return self.hosts.get(host, self.default) or pages.notFound(\n+            \"Not Found\",\n+            f\"host {host.decode('ascii', 'replace')!r} not in vhost map\",\n         )\n \n     def render(self, request):"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6baa16d53bd3229a8151cf5c296a7e4ec40fd04a",
            "date": "2025-01-20T03:28:26Z",
            "author_login": "glyph"
          },
          {
            "sha": "319fcceea03f733b7c89a6c811a5903f06d1ef3e",
            "date": "2025-01-19T23:10:50Z",
            "author_login": "glyph"
          },
          {
            "sha": "28553be2b83a63e42c68973e5dae5603983dcffb",
            "date": "2025-01-19T22:55:38Z",
            "author_login": "glyph"
          },
          {
            "sha": "68cfcb2ef8e0c7ba8f103390b2d81e2ccc4ee7f8",
            "date": "2025-01-10T16:54:09Z",
            "author_login": "itamarst"
          },
          {
            "sha": "3564bce98d8585d820b4220ce0b2c50eb697cd2d",
            "date": "2025-01-10T16:34:01Z",
            "author_login": "pythonspeed"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Twisted is an event-based framework for internet applications. Started with version 0.9.4, when the host header does not match a configured host `twisted.web.vhost.NameVirtualHost` will return a `NoResource` resource which renders the Host header unescaped into the 404 response allowing HTML and script injection. In practice this should be very difficult to exploit as being able to modify the Host header of a normal HTTP request implies that one is already in a privileged position. This issue was fixed in version 22.10.0rc1. There are no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-26T20:15:10.580",
    "last_modified": "2024-11-25T18:12:24.673",
    "fix_date": "2022-10-26T18:52:32Z"
  },
  "references": [
    {
      "url": "https://github.com/twisted/twisted/commit/f2f5e81c03f14e253e85fe457e646130780db40b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/twisted/twisted/commit/f49041bb67792506d85aeda9cf6157e92f8048f4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/twisted/twisted/security/advisories/GHSA-vg46-2rrj-3647",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00038.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202301-02",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/twisted/twisted/commit/f2f5e81c03f14e253e85fe457e646130780db40b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/twisted/twisted/commit/f49041bb67792506d85aeda9cf6157e92f8048f4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/twisted/twisted/security/advisories/GHSA-vg46-2rrj-3647",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00038.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202301-02",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:00.959592",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "twisted",
    "owner": "twisted",
    "created_at": "2011-07-01T20:40:42Z",
    "updated_at": "2025-01-25T20:55:56Z",
    "pushed_at": "2025-01-20T03:28:28Z",
    "size": 76433,
    "stars": 5678,
    "forks": 1186,
    "open_issues": 2766,
    "watchers": 5678,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [],
    "languages": {
      "Python": 12636835,
      "GAP": 18052,
      "Batchfile": 3472,
      "Shell": 3244,
      "JavaScript": 752,
      "HTML": 270,
      "Gherkin": 140
    },
    "commit_activity": {
      "total_commits_last_year": 967,
      "avg_commits_per_week": 18.596153846153847,
      "days_active_last_year": 150
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:42:29.818195"
  }
}