{
  "cve_id": "CVE-2022-39387",
  "github_data": {
    "repository": "xwiki-contrib/oidc",
    "fix_commit": "0247af1417925b9734ab106ad7cd934ee870ac89",
    "related_commits": [
      "0247af1417925b9734ab106ad7cd934ee870ac89",
      "0247af1417925b9734ab106ad7cd934ee870ac89"
    ],
    "patch_url": "https://github.com/xwiki-contrib/oidc/commit/0247af1417925b9734ab106ad7cd934ee870ac89.patch",
    "fix_commit_details": {
      "sha": "0247af1417925b9734ab106ad7cd934ee870ac89",
      "commit_date": "2022-01-27T14:16:30Z",
      "author": {
        "login": "tmortagne",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "OIDC-118: Fix bad handling of request parameters",
        "length": 48,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 94,
        "additions": 79,
        "deletions": 15
      },
      "files": [
        {
          "filename": "oidc-authenticator/src/main/java/org/xwiki/contrib/oidc/auth/internal/OIDCClientConfiguration.java",
          "status": "modified",
          "additions": 27,
          "deletions": 15,
          "patch": "@@ -37,11 +37,11 @@\n import javax.servlet.http.HttpSession;\n \n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.joda.time.LocalDateTime;\n import org.slf4j.Logger;\n import org.xwiki.component.annotation.Component;\n-import org.xwiki.configuration.ConfigurationSource;\n import org.xwiki.container.Container;\n import org.xwiki.container.Request;\n import org.xwiki.container.Session;\n@@ -234,6 +234,8 @@ public Map<String, Set<String>> getProviderMapping()\n \n     private static final String XWIKI_GROUP_PREFIX = \"XWiki.\";\n \n+    private static final Set<String> SAFE_PROPERTIES = SetUtils.hashSet(PROP_SKIPPED);\n+\n     @Inject\n     private InstanceIdManager instance;\n \n@@ -249,10 +251,6 @@ public Map<String, Set<String>> getProviderMapping()\n     @Inject\n     private Logger logger;\n \n-    @Inject\n-    // TODO: store configuration in custom objects\n-    private ConfigurationSource configuration;\n-\n     private HttpSession getHttpSession()\n     {\n         Session session = this.container.getSession();\n@@ -335,10 +333,12 @@ public Map<String, String> getMap(String key)\n     @Override\n     protected <T> T getProperty(String key, Class<T> valueClass)\n     {\n-        // Get property from request\n-        String requestValue = getRequestParameter(key);\n-        if (requestValue != null) {\n-            return this.converter.convert(valueClass, requestValue);\n+        if (SAFE_PROPERTIES.contains(key)) {\n+            // Get property from request\n+            String requestValue = getRequestParameter(key);\n+            if (requestValue != null) {\n+                return this.converter.convert(valueClass, requestValue);\n+            }\n         }\n \n         // Get property from session\n@@ -354,10 +354,12 @@ protected <T> T getProperty(String key, Class<T> valueClass)\n     @Override\n     protected <T> T getProperty(String key, T def)\n     {\n-        // Get property from request\n-        String requestValue = getRequestParameter(key);\n-        if (requestValue != null) {\n-            return this.converter.convert(def.getClass(), requestValue);\n+        if (SAFE_PROPERTIES.contains(key)) {\n+            // Get property from request\n+            String requestValue = getRequestParameter(key);\n+            if (requestValue != null) {\n+                return this.converter.convert(def.getClass(), requestValue);\n+            }\n         }\n \n         // Get property from session\n@@ -426,9 +428,19 @@ private Endpoint getEndPoint(String hint) throws URISyntaxException\n             uri = new URI(uriString);\n         }\n \n-        // If we still don't have any endpoint URI, return null\n+        // If we still don't have any endpoint URI, try the request\n         if (uri == null) {\n-            return null;\n+            uriString = getRequestParameter(PROPPREFIX_ENDPOINT + hint);\n+            if (uriString == null) {\n+                String provider = getRequestParameter(PROP_XWIKIPROVIDER);\n+                if (provider == null) {\n+                    return null;\n+                }\n+\n+                uri = this.manager.createEndPointURI(provider, hint);\n+            } else {\n+                uri = new URI(uriString);\n+            }\n         }\n \n         // Find custom headers"
        },
        {
          "filename": "oidc-authenticator/src/test/java/org/xwiki/contrib/oidc/auth/internal/OIDCClientConfigurationTest.java",
          "status": "modified",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -19,20 +19,30 @@\n  */\n package org.xwiki.contrib.oidc.auth.internal;\n \n+import java.net.MalformedURLException;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.net.URL;\n import java.util.Arrays;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n \n import org.junit.jupiter.api.Test;\n import org.xwiki.configuration.ConfigurationSource;\n+import org.xwiki.container.Container;\n+import org.xwiki.container.servlet.ServletRequest;\n+import org.xwiki.contrib.oidc.provider.internal.OIDCManager;\n+import org.xwiki.contrib.oidc.provider.internal.endpoint.TokenOIDCEndpoint;\n+import org.xwiki.properties.ConverterManager;\n import org.xwiki.test.junit5.mockito.ComponentTest;\n import org.xwiki.test.junit5.mockito.InjectMockComponents;\n import org.xwiki.test.junit5.mockito.MockComponent;\n \n+import com.xpn.xwiki.web.XWikiServletRequestStub;\n+\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.when;\n@@ -51,6 +61,15 @@ class OIDCClientConfigurationTest\n     @MockComponent\n     private ConfigurationSource sourceConfiguration;\n \n+    @MockComponent\n+    private Container container;\n+\n+    @MockComponent\n+    private OIDCManager manager;\n+\n+    @MockComponent\n+    private ConverterManager converterManager;\n+\n     @Test\n     void getUserInfoOIDCEndpoint() throws URISyntaxException\n     {\n@@ -78,6 +97,39 @@ void getUserInfoOIDCEndpoint() throws URISyntaxException\n \n         assertEquals(uri, endpoint.getURI());\n         assertEquals(headers, endpoint.getHeaders());\n+    }\n+\n+    @Test\n+    void getPropertyOrder() throws MalformedURLException, URISyntaxException\n+    {\n+        String provider = \"http://urlprovider\";\n+        URI urlauthorization = new URI(\"http://urlauthorization\");\n+\n+        XWikiServletRequestStub requestStub = new XWikiServletRequestStub(new URL(\"http://url\"), null);\n+\n+        when(this.container.getRequest()).thenReturn(new ServletRequest(requestStub));\n+        when(this.sourceConfiguration.getProperty(OIDCClientConfiguration.PROP_SKIPPED, false)).thenReturn(false);\n+\n+        assertFalse(this.configuration.isSkipped());\n+        assertNull(this.configuration.getXWikiProvider());\n+        assertNull(this.configuration.getAuthorizationOIDCEndpoint());\n+        assertNull(this.configuration.getAuthorizationOIDCEndpoint());\n+        assertNull(this.configuration.getTokenOIDCEndpoint());\n+\n+        requestStub.put(OIDCClientConfiguration.PROP_SKIPPED, \"true\");\n+        when(this.converterManager.convert(Boolean.class, \"true\")).thenReturn(true);\n+\n+        assertTrue(this.configuration.isSkipped());\n+\n+        requestStub.put(OIDCClientConfiguration.PROP_GROUPS_ALLOWED, \"true\");\n+\n+        assertNull(this.configuration.getAllowedGroups());\n+\n+        requestStub.put(OIDCClientConfiguration.PROP_XWIKIPROVIDER, provider.toString());\n+        requestStub.put(OIDCClientConfiguration.PROP_ENDPOINT_AUTHORIZATION, urlauthorization.toString());\n+        when(this.manager.createEndPointURI(provider, TokenOIDCEndpoint.HINT)).thenReturn(new URI(provider));\n \n+        assertEquals(urlauthorization, this.configuration.getAuthorizationOIDCEndpoint().getURI());\n+        assertEquals(provider, this.configuration.getTokenOIDCEndpoint().getURI().toString());\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b1a0700c5652d7689772e115cd7e5acb7b3850cd",
            "date": "2025-01-13T15:55:45Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "c06113bd77cf955d5d9dec7f6dea0af86eea7450",
            "date": "2025-01-10T08:58:39Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "4b3c457a90ecd365ed3c9213a42716ca7fb36d90",
            "date": "2025-01-10T08:18:54Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "4e97a9ae90aad0052193a9a15ff70f5c5bb6fb48",
            "date": "2025-01-07T10:58:01Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "1d8db955fbc18f5acae72191c4f4fc21bf47b046",
            "date": "2024-12-23T09:48:09Z",
            "author_login": "petrenkonikita112263"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H",
    "cwe_id": "CWE-287",
    "description": "XWiki OIDC has various tools to manipulate OpenID Connect protocol in XWiki. Prior to version 1.29.1, even if a wiki has an OpenID provider configured through its xwiki.properties, it is possible to provide a third party provider its details through request parameters. One can then bypass the XWiki authentication altogether by specifying its own provider through the oidc.endpoint.* request parameters (or by using an XWiki-based OpenID provider with oidc.xwikiprovider. With the same approach, one could also provide a specific group mapping through oidc.groups.mapping that would make his user automatically part of the XWikiAdminGroup. This issue has been patched, please upgrade to 1.29.1. There is no workaround, an upgrade of the authenticator is required.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-04T19:15:10.983",
    "last_modified": "2024-11-21T07:18:11.417",
    "fix_date": "2022-01-27T14:16:30Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki-contrib/oidc/commit/0247af1417925b9734ab106ad7cd934ee870ac89",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki-contrib/oidc/security/advisories/GHSA-m7gv-v8xx-v47w",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/OIDC-118",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki-contrib/oidc/commit/0247af1417925b9734ab106ad7cd934ee870ac89",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki-contrib/oidc/security/advisories/GHSA-m7gv-v8xx-v47w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/OIDC-118",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:00.993374",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "oidc",
    "owner": "xwiki-contrib",
    "created_at": "2016-03-25T09:34:44Z",
    "updated_at": "2025-01-13T15:56:02Z",
    "pushed_at": "2025-01-13T15:55:58Z",
    "size": 944,
    "stars": 8,
    "forks": 22,
    "open_issues": 0,
    "watchers": 8,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 468192,
      "JavaScript": 1717
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T17:43:19.245635"
  }
}