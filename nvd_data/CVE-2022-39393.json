{
  "cve_id": "CVE-2022-39393",
  "github_data": {
    "repository": "bytecodealliance/wasmtime",
    "fix_commit": "2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0",
    "related_commits": [
      "2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0",
      "2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0"
    ],
    "patch_url": "https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0.patch",
    "fix_commit_details": {
      "sha": "2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0",
      "commit_date": "2022-11-10T17:34:37Z",
      "author": {
        "login": "alexcrichton",
        "type": "User",
        "stats": {
          "total_commits": 2087,
          "average_weekly_commits": 4.546840958605665,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 258
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wh6w-3828-g9qf",
        "length": 189,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 68,
        "additions": 65,
        "deletions": 3
      },
      "files": [
        {
          "filename": "crates/runtime/src/instance/allocator/pooling.rs",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -393,13 +393,13 @@ impl InstancePool {\n                 )\n             };\n \n+            let mut slot = self\n+                .memories\n+                .take_memory_image_slot(instance_index, defined_index);\n             if let Some(image) = runtime_info\n                 .memory_image(defined_index)\n                 .map_err(|err| InstantiationError::Resource(err.into()))?\n             {\n-                let mut slot = self\n-                    .memories\n-                    .take_memory_image_slot(instance_index, defined_index);\n                 let initial_size = plan.memory.minimum * WASM_PAGE_SIZE as u64;\n \n                 // If instantiation fails, we can propagate the error\n@@ -425,6 +425,7 @@ impl InstancePool {\n                     .map_err(InstantiationError::Resource)?,\n                 );\n             } else {\n+                drop(slot);\n                 memories.push(\n                     Memory::new_static(plan, memory, Some(commit_memory_pages), None, unsafe {\n                         &mut *store.unwrap()"
        },
        {
          "filename": "tests/all/pooling_allocator.rs",
          "status": "modified",
          "additions": 61,
          "deletions": 0,
          "patch": "@@ -615,6 +615,67 @@ fn drop_externref_global_during_module_init() -> Result<()> {\n     Ok(())\n }\n \n+#[test]\n+fn switch_image_and_non_image() -> Result<()> {\n+    let mut c = Config::new();\n+    c.allocation_strategy(InstanceAllocationStrategy::Pooling {\n+        instance_limits: InstanceLimits {\n+            count: 1,\n+            ..Default::default()\n+        },\n+        strategy: Default::default(),\n+    });\n+    let engine = Engine::new(&c)?;\n+    let module1 = Module::new(\n+        &engine,\n+        r#\"\n+            (module\n+                (memory 1)\n+                (func (export \"load\") (param i32) (result i32)\n+                    local.get 0\n+                    i32.load\n+                )\n+            )\n+        \"#,\n+    )?;\n+    let module2 = Module::new(\n+        &engine,\n+        r#\"\n+            (module\n+                (memory (export \"memory\") 1)\n+                (data (i32.const 0) \"1234\")\n+            )\n+        \"#,\n+    )?;\n+\n+    let assert_zero = || -> Result<()> {\n+        let mut store = Store::new(&engine, ());\n+        let instance = Instance::new(&mut store, &module1, &[])?;\n+        let func = instance.get_typed_func::<i32, i32, _>(&mut store, \"load\")?;\n+        assert_eq!(func.call(&mut store, 0)?, 0);\n+        Ok(())\n+    };\n+\n+    // Initialize with a heap image and make sure the next instance, without an\n+    // image, is zeroed\n+    Instance::new(&mut Store::new(&engine, ()), &module2, &[])?;\n+    assert_zero()?;\n+\n+    // ... transition back to heap image and do this again\n+    Instance::new(&mut Store::new(&engine, ()), &module2, &[])?;\n+    assert_zero()?;\n+\n+    // And go back to an image and make sure it's read/write on the host.\n+    let mut store = Store::new(&engine, ());\n+    let instance = Instance::new(&mut store, &module2, &[])?;\n+    let memory = instance.get_memory(&mut store, \"memory\").unwrap();\n+    let mem = memory.data_mut(&mut store);\n+    assert!(mem.starts_with(b\"1234\"));\n+    mem[..6].copy_from_slice(b\"567890\");\n+\n+    Ok(())\n+}\n+\n #[test]\n #[cfg(target_pointer_width = \"64\")]\n fn instance_too_large() -> Result<()> {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "75f7b2bed7b2c4360a1a01fdfdb2cfaac9b0b6ae",
            "date": "2025-01-14T15:49:21Z",
            "author_login": "nilsmartel"
          },
          {
            "sha": "e4fd50d1e27f3ba3d4757b85547d55f585d446f9",
            "date": "2025-01-14T01:28:53Z",
            "author_login": "alexcrichton"
          },
          {
            "sha": "8659e11c4ad12512defd6213de0a9d73f8ae6732",
            "date": "2025-01-14T00:47:04Z",
            "author_login": "fitzgen"
          },
          {
            "sha": "84f381fa1bc5c00438108d16fb14657a2c76a182",
            "date": "2025-01-13T22:31:43Z",
            "author_login": "saulecabrera"
          },
          {
            "sha": "a6a08570216d5c42b1c1fc9699fe5b9ae214f27e",
            "date": "2025-01-13T21:05:07Z",
            "author_login": "alexcrichton"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-226",
    "description": "Wasmtime is a standalone runtime for WebAssembly. Prior to version 2.0.2, there is a bug in Wasmtime's implementation of its pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance. This bug has been patched and users should upgrade to Wasmtime 2.0.2. Other mitigations include disabling the pooling allocator and disabling the `memory-init-cow`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-10T20:15:11.520",
    "last_modified": "2024-11-21T07:18:11.957",
    "fix_date": "2022-11-10T17:34:37Z"
  },
  "references": [
    {
      "url": "https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:01.007411",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wasmtime",
    "owner": "bytecodealliance",
    "created_at": "2017-08-29T14:01:55Z",
    "updated_at": "2025-01-14T09:40:55Z",
    "pushed_at": "2025-01-14T01:52:50Z",
    "size": 111616,
    "stars": 15702,
    "forks": 1345,
    "open_issues": 787,
    "watchers": 15702,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-0.32.0",
      "release-0.33.0",
      "release-0.34.0",
      "release-0.35.0",
      "release-0.36.0",
      "release-0.37.0",
      "release-0.38.0",
      "release-0.39.0",
      "release-0.40.0",
      "release-1.0.0",
      "release-2.0.0",
      "release-3.0.0",
      "release-4.0.0",
      "release-5.0.0",
      "release-6.0.0",
      "release-7.0.0",
      "release-8.0.0",
      "release-9.0.0"
    ],
    "languages": {
      "Rust": 19224087,
      "WebAssembly": 6773216,
      "Common Lisp": 1793054,
      "C": 257019,
      "JavaScript": 24116,
      "Shell": 23820,
      "C++": 21050,
      "CMake": 7205,
      "OCaml": 6903,
      "Assembly": 4165,
      "Dockerfile": 2564,
      "Makefile": 1432,
      "CSS": 303
    },
    "commit_activity": {
      "total_commits_last_year": 1586,
      "avg_commits_per_week": 30.5,
      "days_active_last_year": 278
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:32:42.127815"
  }
}