{
  "cve_id": "CVE-2022-39397",
  "github_data": {
    "repository": "tu6ge/oss-rs",
    "fix_commit": "e4553f7d74fce682d802f8fb073943387796df29",
    "related_commits": [
      "e4553f7d74fce682d802f8fb073943387796df29",
      "e4553f7d74fce682d802f8fb073943387796df29"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e4553f7d74fce682d802f8fb073943387796df29",
      "commit_date": "2022-11-08T09:16:41Z",
      "author": {
        "login": "tu6ge",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(auth): Prevent secret exposure",
        "length": 34,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 23,
        "additions": 14,
        "deletions": 9
      },
      "files": [
        {
          "filename": "src/auth.rs",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "patch": "@@ -177,7 +177,7 @@ impl Default for VERB {\n }\n \n #[cfg_attr(test, automock)]\n-pub trait AuthToHeaderMap {\n+pub(crate) trait AuthToHeaderMap {\n     fn get_original_header(&self) -> HeaderMap;\n     fn get_header_key(&self) -> OssResult<HeaderValue>;\n     fn get_header_secret(&self) -> OssResult<HeaderValue>;\n@@ -255,7 +255,7 @@ impl AuthToOssHeader for Auth {\n }\n \n /// \u4ece auth \u4e2d\u63d0\u53d6\u5404\u4e2a\u5b57\u6bb5\uff0c\u7528\u4e8e\u8ba1\u7b97\u7b7e\u540d\u7684\u539f\u59cb\u5b57\u7b26\u4e32\n-pub trait AuthSignString {\n+pub(crate) trait AuthSignString {\n     fn key(&self) -> Cow<'_, KeyId>;\n     fn secret(&self) -> Cow<'_, KeySecret>;\n     fn verb(&self) -> String;\n@@ -312,7 +312,7 @@ impl AuthGetHeader for Auth {\n     }\n }\n \n-pub trait AuthHeader {\n+pub(crate) trait AuthHeader {\n     fn from_auth(auth: &impl AuthToHeaderMap) -> OssResult<Self>\n     where\n         Self: Sized;\n@@ -399,7 +399,8 @@ impl SignString {\n     pub fn new(data: String, key: KeyId, secret: KeySecret) -> SignString {\n         SignString { data, key, secret }\n     }\n-    pub fn from_auth(\n+\n+    pub(crate) fn from_auth(\n         auth: &impl AuthSignString,\n         header: impl HeaderToSign,\n     ) -> OssResult<SignString> {\n@@ -427,11 +428,13 @@ impl SignString {\n         self.data.clone()\n     }\n \n-    pub fn key_string(&self) -> String {\n+    #[cfg(test)]\n+    pub(crate) fn key_string(&self) -> String {\n         self.key.to_string()\n     }\n \n-    pub fn secret_string(&self) -> String {\n+    #[cfg(test)]\n+    pub(crate) fn secret_string(&self) -> String {\n         self.secret.to_string()\n     }\n \n@@ -499,9 +502,10 @@ impl AuthBuilder {\n     ///\n     /// ```\n     /// # use aliyun_oss_client::auth::AuthBuilder;\n-    /// let auth = AuthBuilder::default()\n+    /// use aliyun_oss_client::auth::AuthGetHeader;\n+    /// let headers = AuthBuilder::default()\n     ///     .key(\"bar\".into())\n-    ///     .build();\n+    ///     .get_headers();\n     /// ```\n     pub fn key(mut self, key: KeyId) -> Self {\n         self.auth.set_key(key);\n@@ -574,7 +578,8 @@ impl AuthBuilder {\n         self\n     }\n \n-    pub fn build(self) -> Auth {\n+    #[allow(dead_code)]\n+    pub(crate) fn build(self) -> Auth {\n         self.auth\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9aaea9cae8673a4901324b09e8ea9d21181125cb",
            "date": "2024-11-26T00:39:28Z",
            "author_login": "tu6ge"
          },
          {
            "sha": "46341991f0ca7887176efd2bc7b585aa5055abbc",
            "date": "2024-11-25T07:48:59Z",
            "author_login": "tu6ge"
          },
          {
            "sha": "732302ffc1d9d2b3aa221067c90863f3f6cb13c2",
            "date": "2024-11-25T06:38:30Z",
            "author_login": "tu6ge"
          },
          {
            "sha": "40ba916754b4ab0b388368ad60c195f999363c17",
            "date": "2024-11-25T06:31:27Z",
            "author_login": "tu6ge"
          },
          {
            "sha": "4c5e31546e6a5559454f5a620ba6f4d29f7b0b7c",
            "date": "2024-11-25T06:22:18Z",
            "author_login": "tu6ge"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.6,
    "cvss_vector": "CVSS:3.1/AV:P/AC:L/PR:H/UI:R/S:C/C:H/I:L/A:N",
    "cwe_id": "CWE-200",
    "description": "aliyun-oss-client is a rust client for Alibaba Cloud OSS. Users of this library will be affected, the incoming secret will be disclosed unintentionally. This issue has been patched in version 0.8.1.",
    "attack_vector": "PHYSICAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-22T21:15:10.737",
    "last_modified": "2024-11-21T07:18:12.503",
    "fix_date": "2022-11-08T09:16:41Z"
  },
  "references": [
    {
      "url": "https://github.com/tu6ge/oss-rs/commit/e4553f7d74fce682d802f8fb073943387796df29",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tu6ge/oss-rs/security/advisories/GHSA-3w3h-7xgx-grwc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tu6ge/oss-rs/commit/e4553f7d74fce682d802f8fb073943387796df29",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tu6ge/oss-rs/security/advisories/GHSA-3w3h-7xgx-grwc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.153696",
    "processing_status": "enhanced"
  }
}