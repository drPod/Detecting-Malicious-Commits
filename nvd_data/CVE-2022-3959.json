{
  "cve_id": "CVE-2022-3959",
  "github_data": {
    "repository": "drogonframework/drogon",
    "fix_commit": "c0d48da99f66aaada17bcd28b07741cac8697647",
    "related_commits": [
      "c0d48da99f66aaada17bcd28b07741cac8697647",
      "c0d48da99f66aaada17bcd28b07741cac8697647"
    ],
    "patch_url": "https://github.com/drogonframework/drogon/commit/c0d48da99f66aaada17bcd28b07741cac8697647.patch",
    "fix_commit_details": {
      "sha": "c0d48da99f66aaada17bcd28b07741cac8697647",
      "commit_date": "2022-11-10T05:41:21Z",
      "author": {
        "login": "marty1885",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Avoid HashDoS attacks via random per-session hash initial state (#1433)",
        "length": 71,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 111,
        "additions": 86,
        "deletions": 25
      },
      "files": [
        {
          "filename": "lib/inc/drogon/HttpRequest.h",
          "status": "modified",
          "additions": 18,
          "deletions": 9,
          "patch": "@@ -148,21 +148,27 @@ class DROGON_EXPORT HttpRequest\n     virtual const std::string &getCookie(const std::string &field) const = 0;\n \n     /// Get all headers of the request\n-    virtual const std::unordered_map<std::string, std::string> &headers()\n-        const = 0;\n+    virtual const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &headers() const = 0;\n \n     /// Get all headers of the request\n-    const std::unordered_map<std::string, std::string> &getHeaders() const\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &getHeaders() const\n     {\n         return headers();\n     }\n \n     /// Get all cookies of the request\n-    virtual const std::unordered_map<std::string, std::string> &cookies()\n-        const = 0;\n+    virtual const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &cookies() const = 0;\n \n     /// Get all cookies of the request\n-    const std::unordered_map<std::string, std::string> &getCookies() const\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &getCookies() const\n     {\n         return cookies();\n     }\n@@ -267,11 +273,14 @@ class DROGON_EXPORT HttpRequest\n     }\n \n     /// Get parameters of the request.\n-    virtual const std::unordered_map<std::string, std::string> &parameters()\n-        const = 0;\n+    virtual const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &parameters() const = 0;\n \n     /// Get parameters of the request.\n-    const std::unordered_map<std::string, std::string> &getParameters() const\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &getParameters() const\n     {\n         return parameters();\n     }"
        },
        {
          "filename": "lib/inc/drogon/HttpResponse.h",
          "status": "modified",
          "additions": 13,
          "deletions": 5,
          "patch": "@@ -19,6 +19,7 @@\n #include <drogon/Cookie.h>\n #include <drogon/HttpTypes.h>\n #include <drogon/HttpViewData.h>\n+#include <drogon/utils/Utilities.h>\n #include <json/json.h>\n #include <memory>\n #include <string>\n@@ -190,11 +191,14 @@ class DROGON_EXPORT HttpResponse\n     virtual void removeHeader(std::string key) = 0;\n \n     /// Get all headers of the response\n-    virtual const std::unordered_map<std::string, std::string> &headers()\n-        const = 0;\n+    virtual const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &headers() const = 0;\n \n     /// Get all headers of the response\n-    const std::unordered_map<std::string, std::string> &getHeaders() const\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &getHeaders() const\n     {\n         return headers();\n     }\n@@ -222,10 +226,14 @@ class DROGON_EXPORT HttpResponse\n     virtual const Cookie &getCookie(const std::string &key) const = 0;\n \n     /// Get all cookies.\n-    virtual const std::unordered_map<std::string, Cookie> &cookies() const = 0;\n+    virtual const std::\n+        unordered_map<std::string, Cookie, utils::internal::SafeStringHash>\n+            &cookies() const = 0;\n \n     /// Get all cookies.\n-    const std::unordered_map<std::string, Cookie> &getCookies() const\n+    const std::\n+        unordered_map<std::string, Cookie, utils::internal::SafeStringHash>\n+            &getCookies() const\n     {\n         return cookies();\n     }"
        },
        {
          "filename": "lib/inc/drogon/utils/Utilities.h",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -408,5 +408,22 @@ inline bool fromString<bool>(const std::string &p) noexcept(false)\n     }\n     throw std::runtime_error(\"Can't convert from string '\" + p + \"' to bool\");\n }\n+\n+namespace internal\n+{\n+DROGON_EXPORT extern const size_t fixedRandomNumber;\n+struct SafeStringHash\n+{\n+    size_t operator()(const std::string &str) const\n+    {\n+        const size_t A = 6665339;\n+        const size_t B = 2534641;\n+        size_t h = fixedRandomNumber;\n+        for (char ch : str)\n+            h = (h * A) ^ (ch * B);\n+        return h;\n+    }\n+};\n+}  // namespace internal\n }  // namespace utils\n }  // namespace drogon"
        },
        {
          "filename": "lib/src/HttpRequestImpl.h",
          "status": "modified",
          "additions": 18,
          "deletions": 7,
          "patch": "@@ -137,8 +137,9 @@ class HttpRequestImpl : public HttpRequest\n         pathEncode_ = pathEncode;\n     }\n \n-    const std::unordered_map<std::string, std::string> &parameters()\n-        const override\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &parameters() const override\n     {\n         parseParametersOnce();\n         return parameters_;\n@@ -291,12 +292,16 @@ class HttpRequestImpl : public HttpRequest\n         return defaultVal;\n     }\n \n-    const std::unordered_map<std::string, std::string> &headers() const override\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &headers() const override\n     {\n         return headers_;\n     }\n \n-    const std::unordered_map<std::string, std::string> &cookies() const override\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &cookies() const override\n     {\n         return cookies_;\n     }\n@@ -541,9 +546,15 @@ class HttpRequestImpl : public HttpRequest\n     bool pathEncode_{true};\n     string_view matchedPathPattern_{\"\"};\n     std::string query_;\n-    std::unordered_map<std::string, std::string> headers_;\n-    std::unordered_map<std::string, std::string> cookies_;\n-    mutable std::unordered_map<std::string, std::string> parameters_;\n+    std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            headers_;\n+    std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            cookies_;\n+    mutable std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            parameters_;\n     mutable std::shared_ptr<Json::Value> jsonPtr_;\n     SessionPtr sessionPtr_;\n     mutable AttributesPtr attributesPtr_;"
        },
        {
          "filename": "lib/src/HttpResponseImpl.h",
          "status": "modified",
          "additions": 11,
          "deletions": 4,
          "patch": "@@ -130,7 +130,9 @@ class DROGON_EXPORT HttpResponseImpl : public HttpResponse\n         removeHeaderBy(key);\n     }\n \n-    const std::unordered_map<std::string, std::string> &headers() const override\n+    const std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            &headers() const override\n     {\n         return headers_;\n     }\n@@ -200,7 +202,9 @@ class DROGON_EXPORT HttpResponseImpl : public HttpResponse\n         return defaultCookie;\n     }\n \n-    const std::unordered_map<std::string, Cookie> &cookies() const override\n+    const std::\n+        unordered_map<std::string, Cookie, utils::internal::SafeStringHash>\n+            &cookies() const override\n     {\n         return cookies_;\n     }\n@@ -446,8 +450,11 @@ class DROGON_EXPORT HttpResponseImpl : public HttpResponse\n         statusMessage_ = string_view{message, messageLength};\n     }\n \n-    std::unordered_map<std::string, std::string> headers_;\n-    std::unordered_map<std::string, Cookie> cookies_;\n+    std::\n+        unordered_map<std::string, std::string, utils::internal::SafeStringHash>\n+            headers_;\n+    std::unordered_map<std::string, Cookie, utils::internal::SafeStringHash>\n+        cookies_;\n \n     int customStatusCode_{-1};\n     HttpStatusCode statusCode_{kUnknown};"
        },
        {
          "filename": "lib/src/Utilities.cc",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -1221,5 +1221,14 @@ bool secureRandomBytes(void *ptr, size_t size)\n     return false;\n }\n \n+namespace internal\n+{\n+DROGON_EXPORT const size_t fixedRandomNumber = []() {\n+    size_t res;\n+    utils::secureRandomBytes(&res, sizeof(res));\n+    return res;\n+}();\n+}\n+\n }  // namespace utils\n }  // namespace drogon"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a3b4779540831cb8c03addb591ced3080b488917",
            "date": "2025-01-14T12:08:30Z",
            "author_login": "pan93412"
          },
          {
            "sha": "686f68a12ff82c6c3114a4c48502334261f258f6",
            "date": "2025-01-08T12:00:44Z",
            "author_login": "fantasy-peak"
          },
          {
            "sha": "152a69f1e96c610f8490376b515b9ee029f2cfca",
            "date": "2025-01-02T14:44:09Z",
            "author_login": "an-tao"
          },
          {
            "sha": "38dd5fea31a7a2727c0a6f6b6b04252374796cab",
            "date": "2025-01-01T03:25:29Z",
            "author_login": "an-tao"
          },
          {
            "sha": "3a6268f7e98cf2179a90bdac2f3566ba9382f6ad",
            "date": "2024-12-19T02:36:20Z",
            "author_login": "Demilivor"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-330",
    "description": "A vulnerability, which was classified as problematic, has been found in drogon up to 1.8.1. Affected by this issue is some unknown functionality of the component Session Hash Handler. The manipulation leads to small space of random values. The attack may be launched remotely. Upgrading to version 1.8.2 is able to address this issue. The name of the patch is c0d48da99f66aaada17bcd28b07741cac8697647. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-213464.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-11-11T16:15:16.843",
    "last_modified": "2024-11-21T07:20:37.077",
    "fix_date": "2022-11-10T05:41:21Z"
  },
  "references": [
    {
      "url": "https://github.com/drogonframework/drogon/commit/c0d48da99f66aaada17bcd28b07741cac8697647",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/pull/1433",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/releases/tag/v1.8.2",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.213464",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/commit/c0d48da99f66aaada17bcd28b07741cac8697647",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/pull/1433",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/drogonframework/drogon/releases/tag/v1.8.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.213464",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:01.010311",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "drogon",
    "owner": "drogonframework",
    "created_at": "2018-04-27T02:49:26Z",
    "updated_at": "2025-01-14T12:08:36Z",
    "pushed_at": "2025-01-14T12:08:31Z",
    "size": 5629,
    "stars": 11796,
    "forks": 1133,
    "open_issues": 307,
    "watchers": 11796,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2740972,
      "CMake": 81994,
      "HTML": 21220,
      "Shell": 9097,
      "Dockerfile": 2627,
      "C": 1822
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:49:43.487795"
  }
}