{
  "cve_id": "CVE-2022-3993",
  "github_data": {
    "repository": "kareadita/kavita",
    "fix_commit": "f8db37d3f9aa42d47e7c4f4ca839e892d3f97afb",
    "related_commits": [
      "f8db37d3f9aa42d47e7c4f4ca839e892d3f97afb",
      "f8db37d3f9aa42d47e7c4f4ca839e892d3f97afb"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f8db37d3f9aa42d47e7c4f4ca839e892d3f97afb",
      "commit_date": "2022-10-31T13:07:55Z",
      "author": {
        "login": "majora2007",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Security Patches (#1624)",
        "length": 290,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 48,
        "additions": 37,
        "deletions": 11
      },
      "files": [
        {
          "filename": "API/Controllers/AccountController.cs",
          "status": "modified",
          "additions": 37,
          "deletions": 11,
          "patch": "@@ -186,7 +186,7 @@ public async Task<ActionResult<UserDto>> Login(LoginDto loginDto)\n             .Include(u => u.UserPreferences)\n             .SingleOrDefaultAsync(x => x.NormalizedUserName == loginDto.Username.ToUpper());\n \n-        if (user == null) return Unauthorized(\"Invalid username\");\n+        if (user == null) return Unauthorized(\"Your credentials are not correct\");\n \n         var result = await _signInManager\n             .CheckPasswordSignInAsync(user, loginDto.Password, true);\n@@ -198,7 +198,7 @@ public async Task<ActionResult<UserDto>> Login(LoginDto loginDto)\n \n         if (!result.Succeeded)\n         {\n-            return Unauthorized(result.IsNotAllowed ? \"You must confirm your email first\" : \"Your credentials are not correct.\");\n+            return Unauthorized(result.IsNotAllowed ? \"You must confirm your email first\" : \"Your credentials are not correct\");\n         }\n \n         // Update LastActive on account\n@@ -632,6 +632,11 @@ await _emailService.SendConfirmationEmail(new ConfirmationEmailDto()\n         return BadRequest(\"There was an error setting up your account. Please check the logs\");\n     }\n \n+    /// <summary>\n+    /// Last step in authentication flow, confirms the email token for email\n+    /// </summary>\n+    /// <param name=\"dto\"></param>\n+    /// <returns></returns>\n     [AllowAnonymous]\n     [HttpPost(\"confirm-email\")]\n     public async Task<ActionResult<UserDto>> ConfirmEmail(ConfirmEmailDto dto)\n@@ -640,7 +645,8 @@ public async Task<ActionResult<UserDto>> ConfirmEmail(ConfirmEmailDto dto)\n \n         if (user == null)\n         {\n-            return BadRequest(\"The email does not match the registered email\");\n+            _logger.LogInformation(\"confirm-email failed from invalid registered email: {Email}\", dto.Email);\n+            return BadRequest(\"Invalid email confirmation\");\n         }\n \n         // Validate Password and Username\n@@ -654,7 +660,11 @@ public async Task<ActionResult<UserDto>> ConfirmEmail(ConfirmEmailDto dto)\n         }\n \n \n-        if (!await ConfirmEmailToken(dto.Token, user)) return BadRequest(\"Invalid Email Token\");\n+        if (!await ConfirmEmailToken(dto.Token, user))\n+        {\n+            _logger.LogInformation(\"confirm-email failed from invalid token: {Token}\", dto.Token);\n+            return BadRequest(\"Invalid email confirmation\");\n+        }\n \n         user.UserName = dto.Username;\n         user.ConfirmationToken = null;\n@@ -694,11 +704,15 @@ public async Task<ActionResult> ConfirmEmailUpdate(ConfirmEmailUpdateDto dto)\n         var user = await _unitOfWork.UserRepository.GetUserByConfirmationToken(dto.Token);\n         if (user == null)\n         {\n-            return BadRequest(\"Invalid Email Token\");\n+            _logger.LogInformation(\"confirm-email failed from invalid registered email: {Email}\", dto.Email);\n+            return BadRequest(\"Invalid email confirmation\");\n         }\n \n-        if (!await ConfirmEmailToken(dto.Token, user)) return BadRequest(\"Invalid Email Token\");\n-\n+        if (!await ConfirmEmailToken(dto.Token, user))\n+        {\n+            _logger.LogInformation(\"confirm-email failed from invalid token: {Token}\", dto.Token);\n+            return BadRequest(\"Invalid email confirmation\");\n+        }\n \n         _logger.LogInformation(\"User is updating email from {OldEmail} to {NewEmail}\", user.Email, dto.Email);\n         var result = await _userManager.SetEmailAsync(user, dto.Email);\n@@ -728,12 +742,16 @@ public async Task<ActionResult<string>> ConfirmForgotPassword(ConfirmPasswordRes\n             var user = await _unitOfWork.UserRepository.GetUserByEmailAsync(dto.Email);\n             if (user == null)\n             {\n-                return BadRequest(\"Invalid Details\");\n+                return BadRequest(\"Invalid credentials\");\n             }\n \n             var result = await _userManager.VerifyUserTokenAsync(user, TokenOptions.DefaultProvider,\n                 \"ResetPassword\", dto.Token);\n-            if (!result) return BadRequest(\"Unable to reset password, your email token is not correct.\");\n+            if (!result)\n+            {\n+                _logger.LogInformation(\"Unable to reset password, your email token is not correct: {@Dto}\", dto);\n+                return BadRequest(\"Invalid credentials\");\n+            }\n \n             var errors = await _accountService.ChangeUserPassword(user, dto.Password);\n             return errors.Any() ? BadRequest(errors) : Ok(\"Password updated\");\n@@ -801,9 +819,13 @@ public async Task<ActionResult<bool>> IsEmailConfirmed()\n     public async Task<ActionResult<UserDto>> ConfirmMigrationEmail(ConfirmMigrationEmailDto dto)\n     {\n         var user = await _unitOfWork.UserRepository.GetUserByEmailAsync(dto.Email);\n-        if (user == null) return BadRequest(\"This email is not on system\");\n+        if (user == null) return BadRequest(\"Invalid credentials\");\n \n-        if (!await ConfirmEmailToken(dto.Token, user)) return BadRequest(\"Invalid Email Token\");\n+        if (!await ConfirmEmailToken(dto.Token, user))\n+        {\n+            _logger.LogInformation(\"confirm-migration-email email token is invalid\");\n+            return BadRequest(\"Invalid credentials\");\n+        }\n \n         await _unitOfWork.CommitAsync();\n \n@@ -865,6 +887,10 @@ private string GenerateEmailLink(string token, string routePart, string email, b\n     [HttpPost(\"migrate-email\")]\n     public async Task<ActionResult<string>> MigrateEmail(MigrateUserEmailDto dto)\n     {\n+        // If there is an admin account already, return\n+        var users = await _unitOfWork.UserRepository.GetAdminUsersAsync();\n+        if (users.Any()) return BadRequest(\"Admin already exists\");\n+\n         // Check if there is an existing invite\n         var emailValidationErrors = await _accountService.ValidateEmail(dto.Email);\n         if (emailValidationErrors.Any())"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eb667630786d9c32cfcf9740d7118104fdbe98e5",
            "date": "2025-01-20T14:46:30Z",
            "author_login": "majora2007"
          },
          {
            "sha": "541607cc5d3338142284ed76a779457228121c6a",
            "date": "2025-01-20T14:45:46Z",
            "author_login": "majora2007"
          },
          {
            "sha": "49b47a98fce5b37918251617d67557182539e6fb",
            "date": "2025-01-20T14:15:47Z",
            "author_login": "majora2007"
          },
          {
            "sha": "a5707617f2b5984f90e82294f5a5b2bab4578f10",
            "date": "2025-01-20T14:14:57Z",
            "author_login": "majora2007"
          },
          {
            "sha": "d880c1690c9b250a444a5db4464574ef224d803c",
            "date": "2025-01-03T21:17:00Z",
            "author_login": "OrioleNix"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:H",
    "cwe_id": "CWE-307",
    "description": "Improper Restriction of Excessive Authentication Attempts in GitHub repository kareadita/kavita prior to 0.6.0.3.\n\n\n\n\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-14T18:15:17.770",
    "last_modified": "2024-11-21T07:20:41.630",
    "fix_date": "2022-10-31T13:07:55Z"
  },
  "references": [
    {
      "url": "https://github.com/kareadita/kavita/commit/f8db37d3f9aa42d47e7c4f4ca839e892d3f97afb",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/bebd0cd6-18ec-469c-b6ca-19ffa9db0699",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/kareadita/kavita/commit/f8db37d3f9aa42d47e7c4f4ca839e892d3f97afb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/bebd0cd6-18ec-469c-b6ca-19ffa9db0699",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:01.015497",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "Kavita",
    "owner": "kareadita",
    "created_at": "2020-12-12T22:23:54Z",
    "updated_at": "2025-01-26T06:39:43Z",
    "pushed_at": "2025-01-23T02:48:17Z",
    "size": 186398,
    "stars": 6999,
    "forks": 367,
    "open_issues": 181,
    "watchers": 6999,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C#": 3462843,
      "TypeScript": 1528800,
      "HTML": 759703,
      "SCSS": 157269,
      "Shell": 8899,
      "JavaScript": 5479,
      "COBOL": 3544,
      "Dockerfile": 1283,
      "Python": 870
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:34:45.824523"
  }
}