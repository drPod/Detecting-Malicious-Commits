{
  "cve_id": "CVE-2022-40023",
  "github_data": {
    "repository": "sqlalchemy/mako",
    "fix_commit": "925760291d6efec64fda6e9dd1fd9cfbd5be068c",
    "related_commits": [
      "925760291d6efec64fda6e9dd1fd9cfbd5be068c",
      "925760291d6efec64fda6e9dd1fd9cfbd5be068c"
    ],
    "patch_url": "https://github.com/sqlalchemy/mako/commit/925760291d6efec64fda6e9dd1fd9cfbd5be068c.patch",
    "fix_commit_details": {
      "sha": "925760291d6efec64fda6e9dd1fd9cfbd5be068c",
      "commit_date": "2022-08-29T16:28:52Z",
      "author": {
        "login": "zzzeek",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix tag regexp to match quoted groups correctly",
        "length": 450,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 42,
        "additions": 34,
        "deletions": 8
      },
      "files": [
        {
          "filename": "doc/build/unreleased/366.rst",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+.. change::\n+    :tags: bug, lexer\n+    :tickets: 366\n+\n+    Fixed issue in lexer where the regexp used to match tags would not\n+    correctly interpret quoted sections individually. While this parsing issue\n+    still produced the same expected tag structure later on, the mis-handling\n+    of quoted sections was also subject to a regexp crash if a tag had a large\n+    number of quotes within its quoted sections.\n\\ No newline at end of file"
        },
        {
          "filename": "mako/lexer.py",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -272,20 +272,24 @@ def parse(self):\n         return self.template\n \n     def match_tag_start(self):\n-        match = self.match(\n-            r\"\"\"\n+        reg = r\"\"\"\n             \\<%     # opening tag\n \n             ([\\w\\.\\:]+)   # keyword\n \n-            ((?:\\s+\\w+|\\s*=\\s*|\".*?\"|'.*?')*)  # attrname, = \\\n+            ((?:\\s+\\w+|\\s*=\\s*|\"[^\"]*?\"|'[^']*?'|\\s*,\\s*)*)  # attrname, = \\\n                                                #        sign, string expression\n+                                               # comma is for backwards compat\n+                                               # identified in #366\n \n             \\s*     # more whitespace\n \n             (/)?>   # closing\n \n-            \"\"\",\n+        \"\"\"\n+\n+        match = self.match(\n+            reg,\n             re.I | re.S | re.X,\n         )\n "
        },
        {
          "filename": "test/test_lexer.py",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -1,5 +1,7 @@\n import re\n \n+import pytest\n+\n from mako import compat\n from mako import exceptions\n from mako import parsetree\n@@ -146,6 +148,10 @@ def test_noexpr_allowed(self):\n         \"\"\"\n         assert_raises(exceptions.CompileException, Lexer(template).parse)\n \n+    def test_tag_many_quotes(self):\n+        template = \"<%0\" + '\"' * 3000\n+        assert_raises(exceptions.SyntaxException, Lexer(template).parse)\n+\n     def test_unmatched_tag(self):\n         template = \"\"\"\n         <%namespace name=\"bar\">\n@@ -432,9 +438,16 @@ def test_expr_in_attribute(self):\n             ),\n         )\n \n-    def test_pagetag(self):\n-        template = \"\"\"\n-            <%page cached=\"True\", args=\"a, b\"/>\n+    @pytest.mark.parametrize(\"comma,numchars\", [(\",\", 48), (\"\", 47)])\n+    def test_pagetag(self, comma, numchars):\n+        # note that the comma here looks like:\n+        # <%page cached=\"True\", args=\"a, b\"/>\n+        # that's what this test has looked like for decades, however, the\n+        # comma there is not actually the right syntax.  When issue #366\n+        # was fixed, the reg was altered to accommodate for this comma to allow\n+        # backwards compat\n+        template = f\"\"\"\n+            <%page cached=\"True\"{comma} args=\"a, b\"/>\n \n             some template\n         \"\"\"\n@@ -453,7 +466,7 @@ def test_pagetag(self):\n \n             some template\n         \"\"\",\n-                        (2, 48),\n+                        (2, numchars),\n                     ),\n                 ],\n             ),"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "798abe413d936f9741d9091c7c814f2e6faa5a26",
            "date": "2025-01-02T21:46:04Z",
            "author_login": "zzzeek"
          },
          {
            "sha": "2548df273e9b9af6b2db34de2d0df68aa8262760",
            "date": "2024-12-07T18:41:47Z",
            "author_login": "zzzeek"
          },
          {
            "sha": "2c757d5219704030d900c6b2f83dab0a47b6ef82",
            "date": "2024-12-07T18:38:04Z",
            "author_login": "zzzeek"
          },
          {
            "sha": "4e2de73912edba747260ab8e18c30ca255a3355c",
            "date": "2024-12-07T18:18:42Z",
            "author_login": "zzzeek"
          },
          {
            "sha": "fbfb8126308ca6ef6a14cdf9a72d91d61af810e2",
            "date": "2024-12-03T19:04:15Z",
            "author_login": "ianjosephwilson"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-1333",
    "description": "Sqlalchemy mako before 1.2.2 is vulnerable to Regular expression Denial of Service when using the Lexer class to parse. This also affects babelplugin and linguaplugin.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-07T13:15:09.953",
    "last_modified": "2024-11-21T07:20:44.470",
    "fix_date": "2022-08-29T16:28:52Z"
  },
  "references": [
    {
      "url": "https://github.com/sqlalchemy/mako/blob/c2f392e0be52dc67d1b9770ab8cce6a9c736d547/mako/ext/extract.py#L21",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sqlalchemy/mako/commit/925760291d6efec64fda6e9dd1fd9cfbd5be068c",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sqlalchemy/mako/issues/366",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/09/msg00026.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages/",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pyup.io/vulnerabilities/CVE-2022-40023/50870/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sqlalchemy/mako/blob/c2f392e0be52dc67d1b9770ab8cce6a9c736d547/mako/ext/extract.py#L21",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sqlalchemy/mako/commit/925760291d6efec64fda6e9dd1fd9cfbd5be068c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sqlalchemy/mako/issues/366",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/09/msg00026.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pyup.io/vulnerabilities/CVE-2022-40023/50870/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.085449",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mako",
    "owner": "sqlalchemy",
    "created_at": "2018-11-26T22:21:34Z",
    "updated_at": "2025-01-13T18:05:53Z",
    "pushed_at": "2025-01-03T16:12:58Z",
    "size": 1670,
    "stars": 378,
    "forks": 62,
    "open_issues": 69,
    "watchers": 378,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 553487,
      "HTML": 61408,
      "Mako": 2482
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:10:46.127124"
  }
}