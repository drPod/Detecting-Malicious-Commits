{
  "cve_id": "CVE-2022-4093",
  "github_data": {
    "repository": "dolibarr/dolibarr",
    "fix_commit": "7c1eac9774bd1fed0b7b4594159f2ac2d12a4011",
    "related_commits": [
      "7c1eac9774bd1fed0b7b4594159f2ac2d12a4011",
      "7c1eac9774bd1fed0b7b4594159f2ac2d12a4011"
    ],
    "patch_url": "https://github.com/dolibarr/dolibarr/commit/7c1eac9774bd1fed0b7b4594159f2ac2d12a4011.patch",
    "fix_commit_details": {
      "sha": "7c1eac9774bd1fed0b7b4594159f2ac2d12a4011",
      "commit_date": "2022-11-21T02:58:22Z",
      "author": {
        "login": "eldy",
        "type": "User",
        "stats": {
          "total_commits": 81587,
          "average_weekly_commits": 68.79173693086004,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 1074
        }
      },
      "commit_message": {
        "title": "Fix sqli ->escape after ->escapeforlike",
        "length": 39,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 206,
        "additions": 194,
        "deletions": 12
      },
      "files": [
        {
          "filename": "htdocs/contact/list.php",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -502,16 +502,17 @@\n \t\tif ($value['active'] && strlen($search_[$key])) {\n \t\t\t$searchkeyinjsonformat = preg_replace('/\"$/', '', preg_replace('/^\"/', '', json_encode($search_[$key])));\n \t\t\tif (in_array($db->type, array('mysql', 'mysqli'))) {\n-\t\t\t\t$sql .= \" AND p.socialnetworks REGEXP '\\\"\".$db->escapeforlike($db->escape($key)).\"\\\":\\\"[^\\\"]*\".$db->escapeforlike($db->escape($searchkeyinjsonformat)).\"'\";\n+\t\t\t\t$sql .= \" AND p.socialnetworks REGEXP '\\\"\".$db->escape($db->escapeforlike($key)).\"\\\":\\\"[^\\\"]*\".$db->escape($db->escapeforlike($searchkeyinjsonformat)).\"'\";\n \t\t\t} elseif ($db->type == 'pgsql') {\n-\t\t\t\t$sql .= \" AND p.socialnetworks ~ '\\\"\".$db->escapeforlike($db->escape($key)).\"\\\":\\\"[^\\\"]*\".$db->escapeforlike($db->escape($searchkeyinjsonformat)).\"'\";\n+\t\t\t\t$sql .= \" AND p.socialnetworks ~ '\\\"\".$db->escape($db->escapeforlike($key)).\"\\\":\\\"[^\\\"]*\".$db->escape($db->escapeforlike($searchkeyinjsonformat)).\"'\";\n \t\t\t} else {\n \t\t\t\t// Works with all database but not reliable because search only for social network code starting with earched value\n-\t\t\t\t$sql .= \" AND p.socialnetworks LIKE '%\\\"\".$db->escapeforlike($db->escape($key)).\"\\\":\\\"\".$db->escapeforlike($db->escape($searchkeyinjsonformat)).\"%'\";\n+\t\t\t\t$sql .= \" AND p.socialnetworks LIKE '%\\\"\".$db->escape($db->escapeforlike($key)).\"\\\":\\\"\".$db->escape($db->escapeforlike($searchkeyinjsonformat)).\"%'\";\n \t\t\t}\n \t\t}\n \t}\n }\n+//print $sql;\n if (strlen($search_email)) {\n \t$sql .= natural_search('p.email', $search_email);\n }"
        },
        {
          "filename": "htdocs/core/lib/website.lib.php",
          "status": "modified",
          "additions": 8,
          "deletions": 5,
          "patch": "@@ -887,7 +887,7 @@ function getSocialNetworkSharingLinks()\n  * @param\tstring\t\t$langcode\t\t\tLanguage code ('' or 'en', 'fr', 'es', ...)\n  * @param\tarray\t\t$otherfilters\t\tOther filters\n  * @param\tint\t\t\t$status\t\t\t\t0 or 1, or -1 for both\n- * @return  string\t\t\t\t\t\t\tHTML content\n+ * @return  array\t\t\t\t\t\t\tArray with results of search\n  */\n function getPagesFromSearchCriterias($type, $algo, $searchstring, $max = 25, $sortfield = 'date_creation', $sortorder = 'DESC', $langcode = '', $otherfilters = 'null', $status = 1)\n {\n@@ -925,6 +925,8 @@ function getPagesFromSearchCriterias($type, $algo, $searchstring, $max = 25, $so\n \t$found = 0;\n \n \tif (!$error && (empty($max) || ($found < $max)) && (preg_match('/meta/', $algo) || preg_match('/content/', $algo))) {\n+\t\tinclude_once DOL_DOCUMENT_ROOT.'/website/class/websitepage.class.php';\n+\n \t\t$sql = 'SELECT wp.rowid FROM '.MAIN_DB_PREFIX.'website_page as wp';\n \t\tif (is_array($otherfilters) && !empty($otherfilters['category'])) {\n \t\t\t$sql .= ', '.MAIN_DB_PREFIX.'categorie_website_page as cwp';\n@@ -934,7 +936,7 @@ function getPagesFromSearchCriterias($type, $algo, $searchstring, $max = 25, $so\n \t\t\t$sql .= \" AND wp.status = \".((int) $status);\n \t\t}\n \t\tif ($langcode) {\n-\t\t\t$sql .= \" AND wp.lang ='\".$db->escape($langcode).\"'\";\n+\t\t\t$sql .= \" AND wp.lang = '\".$db->escape($langcode).\"'\";\n \t\t}\n \t\tif ($type) {\n \t\t\t$tmparrayoftype = explode(',', $type);\n@@ -947,11 +949,11 @@ function getPagesFromSearchCriterias($type, $algo, $searchstring, $max = 25, $so\n \t\t$sql .= \" AND (\";\n \t\t$searchalgo = '';\n \t\tif (preg_match('/meta/', $algo)) {\n-\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.title LIKE '%\".$db->escapeforlike($db->escape($searchstring)).\"%' OR wp.description LIKE '%\".$db->escapeforlike($db->escape($searchstring)).\"%'\";\n-\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.keywords LIKE '\".$db->escapeforlike($db->escape($searchstring)).\",%' OR wp.keywords LIKE '% \".$db->escapeforlike($db->escape($searchstring)).\"%'\"; // TODO Use a better way to scan keywords\n+\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.title LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%' OR wp.description LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%'\";\n+\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.keywords LIKE '\".$db->escape($db->escapeforlike($searchstring)).\",%' OR wp.keywords LIKE '% \".$db->escape($db->escapeforlike($searchstring)).\"%'\"; // TODO Use a better way to scan keywords\n \t\t}\n \t\tif (preg_match('/content/', $algo)) {\n-\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.content LIKE '%\".$db->escapeforlike($db->escape($searchstring)).\"%'\";\n+\t\t\t$searchalgo .= ($searchalgo ? ' OR ' : '').\"wp.content LIKE '%\".$db->escape($db->escapeforlike($searchstring)).\"%'\";\n \t\t}\n \t\t$sql .= $searchalgo;\n \t\tif (is_array($otherfilters) && !empty($otherfilters['category'])) {\n@@ -963,6 +965,7 @@ function getPagesFromSearchCriterias($type, $algo, $searchstring, $max = 25, $so\n \t\t//print $sql;\n \n \t\t$resql = $db->query($sql);\n+\n \t\tif ($resql) {\n \t\t\t$i = 0;\n \t\t\twhile (($obj = $db->fetch_object($resql)) && ($i < $max || $max == 0)) {"
        },
        {
          "filename": "htdocs/core/modules/import/import_csv.modules.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -862,8 +862,8 @@ public function import_insert($arrayrecord, $array_match_file_to_database, $obji\n \t\t\t\t\t\t\t\t\t\t$stringtosearch = json_encode($socialnetwork).':'.json_encode($json->$socialnetwork);\n \t\t\t\t\t\t\t\t\t\t//var_dump($stringtosearch);\n \t\t\t\t\t\t\t\t\t\t//var_dump($this->db->escape($stringtosearch));\t// This provide a value for sql string (but not for a like)\n-\t\t\t\t\t\t\t\t\t\t$where[] = $key.\" LIKE '%\".$this->db->escapeforlike($this->db->escape($stringtosearch)).\"%'\";\n-\t\t\t\t\t\t\t\t\t\t$filters[] = $col.\" LIKE '%\".$this->db->escapeforlike($this->db->escape($stringtosearch)).\"%'\";\n+\t\t\t\t\t\t\t\t\t\t$where[] = $key.\" LIKE '%\".$this->db->escape($this->db->escapeforlike($stringtosearch)).\"%'\";\n+\t\t\t\t\t\t\t\t\t\t$filters[] = $col.\" LIKE '%\".$this->db->escape($this->db->escapeforlike($stringtosearch)).\"%'\";\n \t\t\t\t\t\t\t\t\t\t//var_dump($where[1]); // This provide a value for sql string inside a like\n \t\t\t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t\t\t$where[] = $key.' = '.$data[$key];"
        },
        {
          "filename": "htdocs/core/modules/import/import_xlsx.modules.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -908,8 +908,8 @@ public function import_insert($arrayrecord, $array_match_file_to_database, $obji\n \t\t\t\t\t\t\t\t\t\t$stringtosearch = json_encode($socialnetwork).':'.json_encode($json->$socialnetwork);\n \t\t\t\t\t\t\t\t\t\t//var_dump($stringtosearch);\n \t\t\t\t\t\t\t\t\t\t//var_dump($this->db->escape($stringtosearch));\t// This provide a value for sql string (but not for a like)\n-\t\t\t\t\t\t\t\t\t\t$where[] = $key.\" LIKE '%\".$this->db->escapeforlike($this->db->escape($stringtosearch)).\"%'\";\n-\t\t\t\t\t\t\t\t\t\t$filters[] = $col.\" LIKE '%\".$this->db->escapeforlike($this->db->escape($stringtosearch)).\"%'\";\n+\t\t\t\t\t\t\t\t\t\t$where[] = $key.\" LIKE '%\".$this->db->escape($this->db->escapeforlike($stringtosearch)).\"%'\";\n+\t\t\t\t\t\t\t\t\t\t$filters[] = $col.\" LIKE '%\".$this->db->escape($this->db->escapeforlike($stringtosearch)).\"%'\";\n \t\t\t\t\t\t\t\t\t\t//var_dump($where[1]); // This provide a value for sql string inside a like\n \t\t\t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\t\t\t$where[] = $key.' = '.$data[$key];"
        },
        {
          "filename": "test/phpunit/Website.class.php",
          "status": "added",
          "additions": 178,
          "deletions": 0,
          "patch": "@@ -0,0 +1,178 @@\n+<?php\n+/* Copyright (C) 2010 Laurent Destailleur  <eldy@users.sourceforge.net>\n+ *\n+ * This program is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program. If not, see <https://www.gnu.org/licenses/>.\n+ * or see https://www.gnu.org/\n+ */\n+\n+/**\n+ *      \\file       test/phpunit/WebsiteTest.php\n+ *\t\t\\ingroup    test\n+ *      \\brief      PHPUnit test\n+ *\t\t\\remarks\tTo run this script as CLI:  phpunit filename.php\n+ */\n+\n+global $conf,$user,$langs,$db;\n+//define('TEST_DB_FORCE_TYPE','mysql');\t// This is to force using mysql driver\n+//require_once 'PHPUnit/Autoload.php';\n+\n+if (! defined('NOREQUIRESOC')) {\n+\tdefine('NOREQUIRESOC', '1');\n+}\n+if (! defined('NOCSRFCHECK')) {\n+\tdefine('NOCSRFCHECK', '1');\n+}\n+if (! defined('NOTOKENRENEWAL')) {\n+\tdefine('NOTOKENRENEWAL', '1');\n+}\n+if (! defined('NOREQUIREMENU')) {\n+\tdefine('NOREQUIREMENU', '1'); // If there is no menu to show\n+}\n+if (! defined('NOREQUIREHTML')) {\n+\tdefine('NOREQUIREHTML', '1'); // If we don't need to load the html.form.class.php\n+}\n+if (! defined('NOREQUIREAJAX')) {\n+\tdefine('NOREQUIREAJAX', '1');\n+}\n+if (! defined(\"NOLOGIN\")) {\n+\tdefine(\"NOLOGIN\", '1');       // If this page is public (can be called outside logged session)\n+}\n+if (! defined(\"NOSESSION\")) {\n+\tdefine(\"NOSESSION\", '1');\n+}\n+\n+require_once dirname(__FILE__).'/../../htdocs/main.inc.php';\n+require_once dirname(__FILE__).'/../../htdocs/core/lib/website.lib.php';\n+\n+\n+if (empty($user->id)) {\n+\tprint \"Load permissions for admin user nb 1\\n\";\n+\t$user->fetch(1);\n+\t$user->getrights();\n+}\n+$conf->global->MAIN_DISABLE_ALL_MAILS=1;\n+\n+\n+/**\n+ * Class for PHPUnit tests\n+ *\n+ * @backupGlobals disabled\n+ * @backupStaticAttributes enabled\n+ * @remarks\tbackupGlobals must be disabled to have db,conf,user and lang not erased.\n+ */\n+class WebsiteTest extends PHPUnit\\Framework\\TestCase\n+{\n+\tprotected $savconf;\n+\tprotected $savuser;\n+\tprotected $savlangs;\n+\tprotected $savdb;\n+\n+\t/**\n+\t * Constructor\n+\t * We save global variables into local variables\n+\t *\n+\t * @return SecurityTest\n+\t */\n+\tpublic function __construct()\n+\t{\n+\t\tparent::__construct();\n+\n+\t\t//$this->sharedFixture\n+\t\tglobal $conf,$user,$langs,$db;\n+\t\t$this->savconf=$conf;\n+\t\t$this->savuser=$user;\n+\t\t$this->savlangs=$langs;\n+\t\t$this->savdb=$db;\n+\n+\t\tprint __METHOD__.\" db->type=\".$db->type.\" user->id=\".$user->id;\n+\t\t//print \" - db \".$db->db;\n+\t\tprint \"\\n\";\n+\t}\n+\n+\t/**\n+\t * setUpBeforeClass\n+\t *\n+\t * @return void\n+\t */\n+\tpublic static function setUpBeforeClass()\n+\t{\n+\t\tglobal $conf,$user,$langs,$db;\n+\t\t$db->begin();\t// This is to have all actions inside a transaction even if test launched without suite.\n+\n+\t\tprint __METHOD__.\"\\n\";\n+\t}\n+\n+\t/**\n+\t * tearDownAfterClass\n+\t *\n+\t * @return\tvoid\n+\t */\n+\tpublic static function tearDownAfterClass()\n+\t{\n+\t\tglobal $conf,$user,$langs,$db;\n+\t\t$db->rollback();\n+\n+\t\tprint __METHOD__.\"\\n\";\n+\t}\n+\n+\t/**\n+\t * Init phpunit tests\n+\t *\n+\t * @return\tvoid\n+\t */\n+\tprotected function setUp()\n+\t{\n+\t\tglobal $conf,$user,$langs,$db;\n+\t\t$conf=$this->savconf;\n+\t\t$user=$this->savuser;\n+\t\t$langs=$this->savlangs;\n+\t\t$db=$this->savdb;\n+\n+\t\tprint __METHOD__.\"\\n\";\n+\t}\n+\n+\t/**\n+\t * End phpunit tests\n+\t *\n+\t * @return\tvoid\n+\t */\n+\tprotected function tearDown()\n+\t{\n+\t\tprint __METHOD__.\"\\n\";\n+\t}\n+\n+\n+\t/**\n+\t * testGetPagesFromSearchCriterias\n+\t *\n+\t * @return\tvoid\n+\t */\n+\tpublic function testGetPagesFromSearchCriterias()\n+\t{\n+\t\tglobal $db;\n+\n+\t\t$s = \"123') OR 1=1-- \\' xxx\";\n+\t\t/*\n+\t\tvar_dump($s);\n+\t\tvar_dump($db->escapeforlike($s));\n+\t\tvar_dump($db->escape($db->escapeforlike($s)));\n+\t\t*/\n+\n+\t\t$res = getPagesFromSearchCriterias('page,blogpost', 'meta,content', $s, 2, 'date_creation', 'DESC', 'en');\n+\t\t//var_dump($res);\n+\t\tprint __METHOD__.\" message=\".$res['code'].\"\\n\";\n+\t\t// We must found no line (so code should be KO). If we found somethiing, it means there is a SQL injection of the 1=1\n+\t\t$this->assertEquals($res['code'], 'KO');\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1198ae576900a672d95bc4750dbdffb80d5cd30e",
            "date": "2025-01-14T11:03:57Z",
            "author_login": "eldy"
          },
          {
            "sha": "84940c6f84946601d0d3bc3912ab1fedd2f0f456",
            "date": "2025-01-14T11:02:52Z",
            "author_login": "eldy"
          },
          {
            "sha": "ad36bdadad6e158a2043d88d98ff58cf2c7cd863",
            "date": "2025-01-14T08:26:48Z",
            "author_login": "eldy"
          },
          {
            "sha": "2edee4dba19d198be86aa986a354b78c765beb3c",
            "date": "2025-01-14T08:26:09Z",
            "author_login": "eldy"
          },
          {
            "sha": "a3fd2ad245fd01f60508aef183a35771ca9946f9",
            "date": "2025-01-14T06:40:08Z",
            "author_login": "hregis"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "SQL injection attacks can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information. Many high-profile data breaches in recent years have been the result of SQL injection attacks, leading to reputational damage and regulatory fines. In some cases, an attacker can obtain a persistent backdoor into an organization's systems, leading to a long-term compromise that can go unnoticed for an extended period. This affect 16.0.1 and 16.0.2 only. 16.0.0 or lower, and 16.0.3 or higher are not affected",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-21T05:15:10.733",
    "last_modified": "2024-11-21T07:34:34.257",
    "fix_date": "2022-11-21T02:58:22Z"
  },
  "references": [
    {
      "url": "https://github.com/dolibarr/dolibarr/commit/7c1eac9774bd1fed0b7b4594159f2ac2d12a4011",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/677ca8ee-ffbc-4b39-b294-2ce81bd56788",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dolibarr/dolibarr/commit/7c1eac9774bd1fed0b7b4594159f2ac2d12a4011",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/677ca8ee-ffbc-4b39-b294-2ce81bd56788",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.141459",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dolibarr",
    "owner": "dolibarr",
    "created_at": "2011-06-26T21:55:03Z",
    "updated_at": "2025-01-14T11:04:10Z",
    "pushed_at": "2025-01-14T13:35:25Z",
    "size": 1507308,
    "stars": 5629,
    "forks": 2830,
    "open_issues": 1165,
    "watchers": 5629,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "18.0"
    ],
    "languages": {
      "PHP": 72587948,
      "JavaScript": 19205220,
      "CSS": 416812,
      "SCSS": 227818,
      "Less": 206987,
      "Shell": 115721,
      "Perl": 111381,
      "Inno Setup": 72215,
      "HTML": 36084,
      "Promela": 24625,
      "PLpgSQL": 23627,
      "Gherkin": 10705,
      "Makefile": 8752,
      "C++": 8363,
      "Batchfile": 4681,
      "Python": 4235,
      "Dockerfile": 3723
    },
    "commit_activity": {
      "total_commits_last_year": 12583,
      "avg_commits_per_week": 241.98076923076923,
      "days_active_last_year": 350
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T15:25:45.089853"
  }
}