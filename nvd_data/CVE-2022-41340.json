{
  "cve_id": "CVE-2022-41340",
  "github_data": {
    "repository": "lionello/secp256k1-js",
    "fix_commit": "302800f0370b42e360a33774bb808274ac729c2e",
    "related_commits": [
      "302800f0370b42e360a33774bb808274ac729c2e",
      "302800f0370b42e360a33774bb808274ac729c2e"
    ],
    "patch_url": "https://github.com/lionello/secp256k1-js/commit/302800f0370b42e360a33774bb808274ac729c2e.patch",
    "fix_commit_details": {
      "sha": "302800f0370b42e360a33774bb808274ac729c2e",
      "commit_date": "2022-09-23T23:35:54Z",
      "author": {
        "login": "lionello",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix #11: add parameter validation",
        "length": 33,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 58,
        "deletions": 6
      },
      "files": [
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"@enumatech/secp256k1-js\",\n-  \"version\": \"1.0.0\",\n+  \"version\": \"1.0.1\",\n   \"lockfileVersion\": 1,\n   \"requires\": true,\n   \"dependencies\": {"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"@enumatech/secp256k1-js\",\n-  \"version\": \"1.0.0\",\n+  \"version\": \"1.0.1\",\n   \"description\": \"Pure JS implementation of secp256k1 signing, verification, recovery ECDSA.\",\n   \"engines\": {\n     \"node\": \">=14.0.0\""
        },
        {
          "filename": "src/secp256k1.js",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -70,7 +70,15 @@\n         return JtoA(PUBinJ)\n     }\n \n+    function assert(cond, msg) {\n+        if (!cond) {\n+            throw Error(\"assertion failed: \" + msg)\n+        }\n+    }\n+\n     function ecsign(d, z) {\n+        assert(d != 0, \"d must not be 0\")\n+        assert(z != 0, \"z must not be 0\")\n         while (true) {\n             const k = rnd(P)\n             const R = mulG(k)\n@@ -182,6 +190,9 @@\n     }\n \n     function ecrecover(recId, sigr, sigs, message) {\n+        assert(recId >= 0 && recId <= 3, \"recId must be 0..3\")\n+        assert(sigr != 0, \"sigr must not be 0\")\n+        assert(sigs != 0, \"sigs must not be 0\")\n         // 1.0 For j from 0 to h   (h == recId here and the loop is outside this function)\n         //   1.1 Let x = r + jn\n         const x = addmod(uint256(sigr), P.muln(recId >> 1), P)\n@@ -227,6 +238,9 @@\n     }\n \n     function ecverify (Qx, Qy, sigr, sigs, z) {\n+        if (sigs == 0 || sigr == 0) {\n+            return false\n+        }\n         const w = invmod(sigs, N)\n         const u1 = mulmod(z, w, N)\n         const u2 = mulmod(sigr, w, N)"
        },
        {
          "filename": "test/test.js",
          "status": "modified",
          "additions": 42,
          "deletions": 4,
          "patch": "@@ -51,32 +51,41 @@ describe('secp256k1', () => {\n         Assert.ok(/^[0-9a-f]{64}$/.test(sig.s), 'sig.s is not a hex string')\n         Assert.ok(sig.v===0 || sig.v===1, 'sig.v is not a 0 or 1')\n         if (Secp256k1Node) {\n-            const success = Secp256k1Node.verify(B(z), Buffer.concat([B(sig.r), B(sig.s)]), Buffer.concat([Buffer('\\04'), B(pubX), B(pubY)]))\n+            const success = Secp256k1Node.verify(B(z), Buffer.concat([B(sig.r), B(sig.s)]), Buffer.concat([Buffer.from('\\04'), B(pubX), B(pubY)]))\n             Assert.ok(success, JSON.stringify(sig))\n         }\n     })\n \n     it('has recovery bit', () => {\n         const sig = Secp256k1.ecsign(d, z)\n         if (Secp256k1Node) {\n-            const success = Secp256k1Node.verify(B(z), Buffer.concat([B(sig.r), B(sig.s)]), Buffer.concat([Buffer('\\04'), B(pubX), B(pubY)]))\n+            const success = Secp256k1Node.verify(B(z), Buffer.concat([B(sig.r), B(sig.s)]), Buffer.concat([Buffer.from('\\04'), B(pubX), B(pubY)]))\n             Assert.ok(success, JSON.stringify(sig))\n             const Q = Secp256k1Node.recover(B(z), Buffer.concat([B(sig.r), B(sig.s)]), sig.v, false)\n             Assert.deepStrictEqual({x: Q.toString('hex').substr(2,64), y: Q.toString('hex').slice(-64)}, {x: pubX.toString(16), y: pubY.toString(16)})\n         }\n     })\n \n-    it('can verify self', () =>  {\n+    it('can verify ours', () =>  {\n         const sig = Secp256k1.ecsign(d, z)\n         Assert.ok(Secp256k1.ecverify(pubX, pubY, Secp256k1.uint256(sig.r,16), Secp256k1.uint256(sig.s,16), z))\n     })\n \n+    it('can verify known sig', () =>  {\n+        Assert.ok(Secp256k1.ecverify(pubX, pubY, Secp256k1.uint256(r,16), Secp256k1.uint256(s,16), z))\n+    })\n+\n     it('can verify fff...', () =>  {\n         const z = Secp256k1.uint256(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16)\n         const sig = Secp256k1.ecsign(d, z)\n         Assert.ok(Secp256k1.ecverify(pubX, pubY, Secp256k1.uint256(sig.r,16), Secp256k1.uint256(sig.s,16), z))\n     })\n \n+    it('cannot sign 000...', () =>  {\n+        const z = Secp256k1.uint256(\"0000000000000000000000000000000000000000000000000000000000000000\", 16)\n+        Assert.throws(() => Secp256k1.ecsign(d, z), \"assertion failed: z must not be 0\")\n+    })\n+\n     it('can verify other sig', () => {\n         if (Secp256k1Node) {\n             const sig = Secp256k1Node.sign(B(z), B(d))\n@@ -86,6 +95,14 @@ describe('secp256k1', () => {\n         Assert.ok(Secp256k1.ecverify(pubX, pubY, Secp256k1.uint256(r,16), Secp256k1.uint256(s,16), z))\n     })\n \n+    it('verify fails if r=0', () => {\n+        Assert.isFalse(Secp256k1.ecverify(pubX, pubY, Secp256k1.uint256(0), Secp256k1.uint256(s,16), z))\n+    })\n+\n+    it('verify fails if s=0', () => {\n+        Assert.isFalse(Secp256k1.ecverify(pubX, pubY, Secp256k1.uint256(r,16), Secp256k1.uint256(0), z))\n+    })\n+\n     it('can recover other sig', () => {\n         if (Secp256k1Node) {\n             const sig = Secp256k1Node.sign(B(z), B(d))\n@@ -97,9 +114,30 @@ describe('secp256k1', () => {\n         Assert.deepStrictEqual(Q, {x: pubX.toString(16), y: pubY.toString(16)})\n     })\n \n-    it('can recover self', () =>  {\n+    it('can recover ours', () =>  {\n         const sig = Secp256k1.ecsign(d, z)\n         const Q = Secp256k1.ecrecover(sig.v, Secp256k1.uint256(sig.r,16), Secp256k1.uint256(sig.s,16), z)\n         Assert.deepStrictEqual(Q, {x: pubX.toString(16), y: pubY.toString(16)})\n     })\n+\n+    it('can recover known sig', () =>  {\n+        const Q = Secp256k1.ecrecover(v, Secp256k1.uint256(r,16), Secp256k1.uint256(s,16), z)\n+        Assert.deepStrictEqual(Q, {x: pubX.toString(16), y: pubY.toString(16)})\n+    })\n+\n+    it('recover fails if r=0', () => {\n+        Assert.throws(() => Secp256k1.ecrecover(v, Secp256k1.uint256(0), Secp256k1.uint256(s,16), z), \"assertion failed: sigr must not be 0\")\n+    })\n+\n+    it('recover fails if s=0', () => {\n+        Assert.throws(() => Secp256k1.ecrecover(v, Secp256k1.uint256(r,16), Secp256k1.uint256(0), z), \"assertion failed: sigs must not be 0\")\n+    })\n+\n+    it('recover fails if recId<0', () => {\n+        Assert.throws(() => Secp256k1.ecrecover(-1, Secp256k1.uint256(r,16), Secp256k1.uint256(s,16), z), \"assertion failed: recId must be 0..3\")\n+    })\n+\n+    it('recover fails if recId>3', () => {\n+        Assert.throws(() => Secp256k1.ecrecover(4, Secp256k1.uint256(r,16), Secp256k1.uint256(s,16), z), \"assertion failed: recId must be 0..3\")\n+    })\n })"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6e4a5afedfb64760f7981a7e543819ed31cc3dd9",
            "date": "2024-10-21T17:40:42Z",
            "author_login": "lionello"
          },
          {
            "sha": "37ae75728e3dae5734bbecfb8a5483f289c2cbc2",
            "date": "2024-10-21T17:31:04Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ee497f03ff485235ab1ab97a098022ab58f89972",
            "date": "2024-10-11T20:02:00Z",
            "author_login": "lionello"
          },
          {
            "sha": "29ef82e01a2ce2fa6f2d9a4b49f416d477d90255",
            "date": "2024-10-11T18:32:28Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d7cd614ac90726bb35fc4b51371e6211e8cdf676",
            "date": "2024-06-22T22:46:50Z",
            "author_login": "lionello"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-347",
    "description": "The secp256k1-js package before 1.1.0 for Node.js implements ECDSA without required r and s validation, leading to signature forgery.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-24T19:15:08.960",
    "last_modified": "2024-11-21T07:23:05.067",
    "fix_date": "2022-09-23T23:35:54Z"
  },
  "references": [
    {
      "url": "https://github.com/lionello/secp256k1-js/commit/302800f0370b42e360a33774bb808274ac729c2e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lionello/secp256k1-js/compare/1.0.1...1.1.0",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lionello/secp256k1-js/issues/11",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/%40lionello/secp256k1-js",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/lionello/secp256k1-js/commit/302800f0370b42e360a33774bb808274ac729c2e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lionello/secp256k1-js/compare/1.0.1...1.1.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lionello/secp256k1-js/issues/11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/%40lionello/secp256k1-js",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.285873",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "secp256k1-js",
    "owner": "lionello",
    "created_at": "2018-04-09T09:15:13Z",
    "updated_at": "2024-10-21T17:40:47Z",
    "pushed_at": "2024-10-31T02:33:20Z",
    "size": 124,
    "stars": 25,
    "forks": 15,
    "open_issues": 3,
    "watchers": 25,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 16648,
      "HTML": 661,
      "Nix": 166
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:01:42.448220"
  }
}