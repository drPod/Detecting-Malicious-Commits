{
  "cve_id": "CVE-2022-41896",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
    "related_commits": [
      "39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
      "39ec7eaf1428e90c37787e5b3fbd68ebd3c48860"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860.patch",
    "fix_commit_details": {
      "sha": "39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
      "commit_date": "2022-09-29T22:59:27Z",
      "author": {
        "login": "swachhandl",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Make MfccMelFilterbank fail initialization if num_channels is > max int value.",
        "length": 190,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 66,
        "additions": 58,
        "deletions": 8
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/mfcc.cc",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -38,8 +38,10 @@ bool Mfcc::Initialize(int input_length, double input_sample_rate) {\n   bool initialized = mel_filterbank_.Initialize(\n       input_length, input_sample_rate, filterbank_channel_count_,\n       lower_frequency_limit_, upper_frequency_limit_);\n-  initialized &=\n-      dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);\n+  if (initialized) {\n+    initialized =\n+        dct_.Initialize(filterbank_channel_count_, dct_coefficient_count_);\n+  }\n   initialized_ = initialized;\n   return initialized;\n }"
        },
        {
          "filename": "tensorflow/core/kernels/mfcc_mel_filterbank.cc",
          "status": "modified",
          "additions": 13,
          "deletions": 1,
          "patch": "@@ -32,6 +32,8 @@ limitations under the License.\n \n #include <math.h>\n \n+#include <limits>\n+\n #include \"tensorflow/core/platform/logging.h\"\n \n namespace tensorflow {\n@@ -74,7 +76,17 @@ bool MfccMelFilterbank::Initialize(int input_length, double input_sample_rate,\n \n   // An extra center frequency is computed at the top to get the upper\n   // limit on the high side of the final triangular filter.\n-  center_frequencies_.resize(num_channels_ + 1);\n+  std::size_t center_frequencies_size = std::size_t(num_channels_) + 1;\n+  if (center_frequencies_size >= std::numeric_limits<int>::max() ||\n+      center_frequencies_size > center_frequencies_.max_size()) {\n+    LOG(ERROR) << \"Number of filterbank channels must be less than \"\n+               << std::numeric_limits<int>::max()\n+               << \" and less than or equal to \"\n+               << center_frequencies_.max_size();\n+    return false;\n+  }\n+  center_frequencies_.resize(center_frequencies_size);\n+\n   const double mel_low = FreqToMel(lower_frequency_limit);\n   const double mel_hi = FreqToMel(upper_frequency_limit);\n   const double mel_span = mel_hi - mel_low;"
        },
        {
          "filename": "tensorflow/core/kernels/mfcc_mel_filterbank_test.cc",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -15,6 +15,7 @@ limitations under the License.\n \n #include \"tensorflow/core/kernels/mfcc_mel_filterbank.h\"\n \n+#include <limits>\n #include <vector>\n \n #include \"tensorflow/core/platform/test.h\"\n@@ -85,4 +86,37 @@ TEST(MfccMelFilterbankTest, IgnoresExistingContentOfOutputVector) {\n   }\n }\n \n+TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxIntValue) {\n+  // Test for bug where vector throws a length_error when it suspects the size\n+  // to be more than it's max_size. For now, we fail initialization when the\n+  // number of requested channels is >= the maximum value int can take (since\n+  // num_channels_ is an int).\n+  MfccMelFilterbank filterbank;\n+\n+  const int kSampleCount = 513;\n+  std::size_t num_channels = std::numeric_limits<int>::max();\n+  bool initialized = filterbank.Initialize(\n+      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n+      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n+\n+  EXPECT_FALSE(initialized);\n+}\n+\n+TEST(MfccMelFilterbankTest, FailsWhenChannelsGreaterThanMaxSize) {\n+  // Test for bug where vector throws a length_error when it suspects the size\n+  // to be more than it's max_size. For now, we fail initialization when the\n+  // number of requested channels is > than std::vector<double>::max_size().\n+  MfccMelFilterbank filterbank;\n+\n+  const int kSampleCount = 513;\n+  // Set num_channels to exceed the max_size a double vector can\n+  // theoretically take.\n+  std::size_t num_channels = std::vector<double>().max_size() + 1;\n+  bool initialized = filterbank.Initialize(\n+      kSampleCount, 2 /* sample rate */, num_channels /* channels */,\n+      1.0 /*  lower frequency limit */, 5.0 /* upper frequency limit */);\n+\n+  EXPECT_FALSE(initialized);\n+}\n+\n }  // namespace tensorflow"
        },
        {
          "filename": "tensorflow/core/kernels/mfcc_op.cc",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -25,7 +25,7 @@ limitations under the License.\n \n namespace tensorflow {\n \n-// Create a speech fingerpring from spectrogram data.\n+// Create a speech fingerprint from spectrogram data.\n class MfccOp : public OpKernel {\n  public:\n   explicit MfccOp(OpKernelConstruction* context) : OpKernel(context) {\n@@ -60,10 +60,12 @@ class MfccOp : public OpKernel {\n     mfcc.set_lower_frequency_limit(lower_frequency_limit_);\n     mfcc.set_filterbank_channel_count(filterbank_channel_count_);\n     mfcc.set_dct_coefficient_count(dct_coefficient_count_);\n-    OP_REQUIRES(context, mfcc.Initialize(spectrogram_channels, sample_rate),\n-                errors::InvalidArgument(\n-                    \"Mfcc initialization failed for channel count \",\n-                    spectrogram_channels, \" and sample rate \", sample_rate));\n+    OP_REQUIRES(\n+        context, mfcc.Initialize(spectrogram_channels, sample_rate),\n+        errors::InvalidArgument(\"Mfcc initialization failed for channel count \",\n+                                spectrogram_channels, \", sample rate \",\n+                                sample_rate, \" and filterbank_channel_count \",\n+                                filterbank_channel_count_));\n \n     Tensor* output_tensor = nullptr;\n     OP_REQUIRES_OK(context,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b13ee8b852a232dc6dd339e0de4e22f735136b7a",
            "date": "2025-01-14T16:59:22Z",
            "author_login": "Moerafaat"
          },
          {
            "sha": "d65ab241c92b18a8e82a53b03575775279713930",
            "date": "2025-01-14T16:17:42Z",
            "author_login": "akuegel"
          },
          {
            "sha": "7f1cdb4f94bf497a8f81b47cb0b0f6f33dfcdf2f",
            "date": "2025-01-14T15:43:26Z",
            "author_login": "vwbaker"
          },
          {
            "sha": "8f888e57d9fab1d2e4127fdeaabc3f8976471065",
            "date": "2025-01-14T15:28:59Z",
            "author_login": "ddunl"
          },
          {
            "sha": "4e74930bd620da4ea2bb691359aaa9b2dc6b0605",
            "date": "2025-01-14T15:28:20Z",
            "author_login": "tensorflower-gardener"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-20",
    "description": "TensorFlow is an open source platform for machine learning. If `ThreadUnsafeUnigramCandidateSampler` is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash. We have patched the issue in GitHub commit 39ec7eaf1428e90c37787e5b3fbd68ebd3c48860. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-11-18T22:15:18.590",
    "last_modified": "2024-11-21T07:24:01.047",
    "fix_date": "2022-09-29T22:59:27Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/mirror_pad_op.cc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/39ec7eaf1428e90c37787e5b3fbd68ebd3c48860",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rmg2-f698-wq35",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.137073",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}