{
  "cve_id": "CVE-2022-41900",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "216525144ee7c910296f5b05d214ca1327c9ce48",
    "related_commits": [
      "216525144ee7c910296f5b05d214ca1327c9ce48",
      "216525144ee7c910296f5b05d214ca1327c9ce48"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/216525144ee7c910296f5b05d214ca1327c9ce48.patch",
    "fix_commit_details": {
      "sha": "216525144ee7c910296f5b05d214ca1327c9ce48",
      "commit_date": "2022-10-24T21:30:10Z",
      "author": {
        "login": "tensorflower-gardener",
        "type": "User",
        "stats": {
          "total_commits": 51283,
          "average_weekly_commits": 106.83958333333334,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 450
        }
      },
      "commit_message": {
        "title": "Fix security vulnerability with FractionalMax(AVG)Pool with illegal pooling_ratio",
        "length": 111,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 94,
        "additions": 84,
        "deletions": 10
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/fractional_avg_pool_op.cc",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -44,6 +44,12 @@ class FractionalAvgPoolOp : public OpKernel {\n     OP_REQUIRES(context, pooling_ratio_.size() == 4,\n                 errors::InvalidArgument(\n                     \"pooling_ratio field must specify 4 dimensions\"));\n+    for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {\n+      OP_REQUIRES(context, pooling_ratio_[i] >= 1,\n+                  errors::InvalidArgument(\n+                      \"pooling_ratio cannot be smaller than 1, got: \",\n+                      pooling_ratio_[i]));\n+    }\n     OP_REQUIRES(\n         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,\n         errors::Unimplemented(\"Fractional average pooling is not yet \"\n@@ -82,9 +88,11 @@ class FractionalAvgPoolOp : public OpKernel {\n     for (int i = 0; i < tensor_in_and_out_dims; ++i) {\n       input_size[i] = tensor_in.dim_size(i);\n       OP_REQUIRES(\n-          context, pooling_ratio_[i] <= input_size[i],\n-          errors::InvalidArgument(\n-              \"Pooling ratio cannot be bigger than input tensor dim size.\"));\n+          context, input_size[i] >= pooling_ratio_[i],\n+          errors::InvalidArgument(\"Pooling ratio is higher than input \"\n+                                  \"dimension size for dimension \",\n+                                  i, \". Input dim size: \", input_size[i],\n+                                  \" pooling ratio: \", pooling_ratio_[i]));\n     }\n     // Output size.\n     for (int i = 0; i < tensor_in_and_out_dims; ++i) {"
        },
        {
          "filename": "tensorflow/core/kernels/fractional_max_pool_op.cc",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -45,6 +45,12 @@ class FractionalMaxPoolOp : public OpKernel {\n     OP_REQUIRES(context, pooling_ratio_.size() == 4,\n                 errors::InvalidArgument(\"pooling_ratio field must \"\n                                         \"specify 4 dimensions\"));\n+    for (std::size_t i = 0; i < pooling_ratio_.size(); ++i) {\n+      OP_REQUIRES(context, pooling_ratio_[i] >= 1,\n+                  errors::InvalidArgument(\n+                      \"pooling_ratio cannot be smaller than 1, got: \",\n+                      pooling_ratio_[i]));\n+    }\n \n     OP_REQUIRES(\n         context, pooling_ratio_[0] == 1 || pooling_ratio_[3] == 1,"
        },
        {
          "filename": "tensorflow/core/ops/nn_ops.cc",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -63,6 +63,13 @@ Status FractionalPoolShapeFn(InferenceContext* c) {\n     }\n   }\n \n+  for (std::size_t i = 0; i < pooling_ratio.size(); ++i) {\n+    if (pooling_ratio[i] < 1) {\n+      return errors::InvalidArgument(\n+          \"pooling_ratio cannot be smaller than 1, got: \", pooling_ratio[i]);\n+    }\n+  }\n+\n   c->set_output(0, c->MakeShape(output_dims));\n   c->set_output(1, c->Vector(output_dims[1]));\n   c->set_output(2, c->Vector(output_dims[2]));"
        },
        {
          "filename": "tensorflow/core/ops/nn_ops_test.cc",
          "status": "modified",
          "additions": 7,
          "deletions": 6,
          "patch": "@@ -523,7 +523,8 @@ TEST(NNOpsTest, FractionalPool_ShapeFn) {\n                        .Finalize(&op.node_def));\n     };\n \n-    set_op(std::vector<float>{2.0f, 1, 1 / 1.5f, 1 / 2.0f});\n+    // pooling_ratio must >= 1.0\n+    set_op(std::vector<float>{2.0f, 1, 1.5f, 4.0f});\n \n     // Rank check.\n     INFER_ERROR(\"must be rank 4\", op, \"[?,?,?]\");\n@@ -532,11 +533,11 @@ TEST(NNOpsTest, FractionalPool_ShapeFn) {\n     INFER_OK(op, \"?\", \"[?,?,?,?];[?];[?]\");\n     INFER_OK(op, \"[?,?,?,?]\", \"[?,?,?,?];[?];[?]\");\n \n-    INFER_OK(op, \"[10,20,30,40]\", \"[5,20,45,80];[20];[45]\");\n-    INFER_OK(op, \"[?,20,30,40]\", \"[?,20,45,80];[20];[45]\");\n-    INFER_OK(op, \"[10,?,30,40]\", \"[5,?,45,80];[?];[45]\");\n-    INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,80];[20];[?]\");\n-    INFER_OK(op, \"[10,20,30,?]\", \"[5,20,45,?];[20];[45]\");\n+    INFER_OK(op, \"[10,20,30,40]\", \"[5,20,20,10];[20];[20]\");\n+    INFER_OK(op, \"[?,20,30,40]\", \"[?,20,20,10];[20];[20]\");\n+    INFER_OK(op, \"[10,?,30,40]\", \"[5,?,20,10];[?];[20]\");\n+    INFER_OK(op, \"[10,20,?,40]\", \"[5,20,?,10];[20];[?]\");\n+    INFER_OK(op, \"[10,20,30,?]\", \"[5,20,20,?];[20];[20]\");\n \n     // Wrong number of values for pooling_ratio.\n     set_op(std::vector<float>{.5, 1.0, 1.5});"
        },
        {
          "filename": "tensorflow/python/kernel_tests/nn_ops/fractional_avg_pool_op_test.py",
          "status": "modified",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -333,6 +333,41 @@ def testNegativeSeqValuesForGradOp(self):\n \n         self.evaluate(z)\n \n+  def testPoolingRatioHasMoreDimThanInput(self):\n+    with self.cached_session() as _:\n+      with self.assertRaisesRegex(\n+          errors.InvalidArgumentError,\n+          r\"Pooling ratio is higher than input dimension size for dimension 1.*\"\n+      ):\n+        result = nn_ops.gen_nn_ops.fractional_avg_pool(\n+            value=constant_op.constant(\n+                value=[[[[1, 4, 2, 3]]]], dtype=dtypes.int64),\n+            pooling_ratio=[1.0, 1.44, 1.73, 1.0],\n+            pseudo_random=False,\n+            overlapping=False,\n+            deterministic=False,\n+            seed=0,\n+            seed2=0,\n+            name=None)\n+        self.evaluate(result)\n+\n+  def testPoolingRatioValueOutOfRange(self):\n+    with self.cached_session() as _:\n+      # Whether turn on `TF2_BEHAVIOR` generates different error messages\n+      with self.assertRaisesRegex(\n+          (errors.InvalidArgumentError, ValueError),\n+          r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):\n+        result = nn_ops.gen_nn_ops.fractional_avg_pool(\n+            value=np.zeros([3, 30, 30, 3]),\n+            pooling_ratio=[1, -1, 3, 1],\n+            pseudo_random=False,\n+            overlapping=False,\n+            deterministic=False,\n+            seed=0,\n+            seed2=0,\n+        )\n+        self.evaluate(result)\n+\n \n class FractionalAvgPoolGradTest(test.TestCase):\n   \"\"\"Tests for FractionalAvgPoolGrad."
        },
        {
          "filename": "tensorflow/python/kernel_tests/nn_ops/fractional_max_pool_op_test.py",
          "status": "modified",
          "additions": 18,
          "deletions": 1,
          "patch": "@@ -320,7 +320,7 @@ def testDeterminismExceptionThrowing(self):\n       nn_ops.fractional_max_pool(\n           rand_mat, [1, 1.5, 1.5, 1], seed=1, seed2=1, deterministic=True)\n \n-  def testPoolingRatio(self):\n+  def testPoolingRatioHasMoreDimThanInput(self):\n     with self.cached_session() as _:\n       with self.assertRaisesRegex(\n           errors.InvalidArgumentError,\n@@ -338,6 +338,23 @@ def testPoolingRatio(self):\n             name=None)\n         self.evaluate(result)\n \n+  def testPoolingRatioValueOutOfRange(self):\n+    with self.cached_session() as _:\n+      # Whether turn on `TF2_BEHAVIOR` generates different error messages\n+      with self.assertRaisesRegex(\n+          (errors.InvalidArgumentError, ValueError),\n+          r\"(pooling_ratio cannot be smaller than 1, got: .*)|(is negative)\"):\n+        result = nn_ops.gen_nn_ops.fractional_max_pool(\n+            value=np.zeros([3, 30, 30, 3]),\n+            pooling_ratio=[1, -1, 3, 1],\n+            pseudo_random=False,\n+            overlapping=False,\n+            deterministic=False,\n+            seed=0,\n+            seed2=0,\n+        )\n+        self.evaluate(result)\n+\n \n class FractionalMaxPoolGradTest(test.TestCase):\n   \"\"\"Tests for FractionalMaxPoolGrad."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "65367823d999b6a36a685617100a7bb6ce03add4",
            "date": "2025-01-14T19:58:00Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "36cbae5466dbf356d91cf56127b2ab2ccd5a8b1f",
            "date": "2025-01-14T19:54:19Z",
            "author_login": "penpornk"
          },
          {
            "sha": "0a99598a8f76735ac32b5466385b0f5af08a06bb",
            "date": "2025-01-14T19:45:23Z",
            "author_login": "wangpengmit"
          },
          {
            "sha": "df078d626d561e6ae8f34d4702cbead44a3cbf82",
            "date": "2025-01-14T19:36:18Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "2a6c919b732bc36a8aa444c03c455a5ba7376ad5",
            "date": "2025-01-14T19:00:47Z",
            "author_login": "sdasgup3"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-125",
    "description": "TensorFlow is an open source platform for machine learning. The security vulnerability results in FractionalMax(AVG)Pool with illegal pooling_ratio. Attackers using Tensorflow can exploit the vulnerability. They can access heap memory which is not in the control of user, leading to a crash or remote code execution. We have patched the issue in GitHub commit 216525144ee7c910296f5b05d214ca1327c9ce48. The fix will be included in TensorFlow 2.11.0. We will also cherry pick this commit on TensorFlow 2.10.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-11-18T22:15:20.273",
    "last_modified": "2024-11-21T07:24:01.587",
    "fix_date": "2022-10-24T21:30:10Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/216525144ee7c910296f5b05d214ca1327c9ce48",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/216525144ee7c910296f5b05d214ca1327c9ce48",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-xvwp-h6jv-7472",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.137679",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}