{
  "cve_id": "CVE-2022-41913",
  "github_data": {
    "repository": "discourse/discourse-calendar",
    "fix_commit": "ca5ae3e7e0c2b32af5ca4ec69c95e95b2ecef2e9",
    "related_commits": [
      "ca5ae3e7e0c2b32af5ca4ec69c95e95b2ecef2e9",
      "ca5ae3e7e0c2b32af5ca4ec69c95e95b2ecef2e9"
    ],
    "patch_url": "https://github.com/discourse/discourse-calendar/commit/ca5ae3e7e0c2b32af5ca4ec69c95e95b2ecef2e9.patch",
    "fix_commit_details": {
      "sha": "ca5ae3e7e0c2b32af5ca4ec69c95e95b2ecef2e9",
      "commit_date": "2022-11-14T14:18:15Z",
      "author": {
        "login": "AndrewPrigorshnev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SECURITY: Do not expose private group members (#345)",
        "length": 52,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 183,
        "additions": 177,
        "deletions": 6
      },
      "files": [
        {
          "filename": "config/locales/server.en.yml",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -81,6 +81,8 @@ en:\n           invalid_timezone: \"Timezone not recognized.\"\n           acting_user_not_allowed_to_create_event: \"Current user is not allowed to create events.\"\n           acting_user_not_allowed_to_act_on_this_event: \"Current user is not allowed to act on this event.\"\n+          invalid_allowed_groups: \"Invalid allowed groups.\"\n+          acting_user_not_allowed_to_invite_these_groups: \"Current user is not allowed to invite these groups.\"\n           custom_field_is_invalid: \"The custom field `%{field}` is not allowed.\"\n           name:\n             length: \"Event name length must be between %{minimum} and %{maximum} characters.\""
        },
        {
          "filename": "jobs/regular/discourse_post_event/bulk_invite.rb",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -33,6 +33,8 @@ def execute(args)\n     private\n \n     def process_invitees(invitees)\n+      invitees = filter_out_unavailable_groups(invitees)\n+\n       max_bulk_invitees = SiteSetting.discourse_post_event_max_bulk_invitees\n \n       invitees.each do |invitee|\n@@ -113,5 +115,18 @@ def notify_user\n         end\n       end\n     end\n+\n+    def invitee_groups(invitees)\n+      Group.where(name: invitees.map { |i| i[:identifier] })\n+    end\n+\n+    def filter_out_unavailable_groups(invitees)\n+      groups = invitee_groups(invitees)\n+      invitees.filter do |i|\n+        group = groups.find { |g| g.name === i[:identifier] }\n+\n+        !group || (@guardian.can_see_group?(group) && @guardian.can_see_group_members?(group))\n+      end\n+    end\n   end\n end"
        },
        {
          "filename": "lib/discourse_post_event/event_validator.rb",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -33,6 +33,8 @@ def validate_event\n \n       extracted_event = extracted_events.first\n \n+      return false unless can_invite_groups?(extracted_event)\n+\n       if @post.acting_user && @post.event\n         if !@post.acting_user.can_act_on_discourse_post_event?(@post.event)\n           @post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.acting_user_not_allowed_to_act_on_this_event\"))\n@@ -83,5 +85,28 @@ def validate_event\n \n       true\n     end\n+\n+    private\n+\n+    def can_invite_groups?(event)\n+      guardian = Guardian.new(@post.acting_user)\n+      return true unless event[:\"allowed-groups\"]\n+\n+      event[:\"allowed-groups\"].split(',').each do |group_name|\n+        group = Group.find_by(name: group_name)\n+\n+        if !group || !guardian.can_see_group?(group)\n+          @post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.invalid_allowed_groups\"))\n+          return false\n+        end\n+\n+        if !guardian.can_see_group_members?(group)\n+          @post.errors.add(:base, I18n.t(\"discourse_post_event.errors.models.event.acting_user_not_allowed_to_invite_these_groups\"))\n+          return false\n+        end\n+      end\n+\n+      true\n+    end\n   end\n end"
        },
        {
          "filename": "spec/integration/post_spec.rb",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -252,6 +252,9 @@\n           end\n \n           it 'works with allowedGroups attribute' do\n+            Fabricate(:group, name: \"euro\")\n+            Fabricate(:group, name: \"america\")\n+\n             post = create_post_with_event(user, 'allowedGroups=\"euro\"').reload\n             expect(post.event.raw_invitees).to eq([])\n \n@@ -569,6 +572,37 @@\n         expect(event_1.status).to eq(Event.statuses[:public])\n       end\n     end\n+\n+    it \"rejects private groups in allowedGroups\" do\n+      moderator = Fabricate(:user, moderator: true)\n+      private_group = Fabricate(\n+        :group,\n+        visibility_level: Group.visibility_levels[:owners])\n+\n+      expect {\n+        create_post_with_event(moderator, \"allowedGroups='#{private_group.name}'\")\n+      }.to raise_error(ActiveRecord::RecordNotSaved)\n+    end\n+\n+    it \"rejects non-existent groups in allowedGroups\" do\n+      moderator = Fabricate(:user, moderator: true)\n+\n+      expect {\n+        create_post_with_event(moderator, \"allowedGroups='non-existent_group_name'\")\n+      }.to raise_error(ActiveRecord::RecordNotSaved)\n+    end\n+\n+    it \"rejects public groups with private members in allowedGroups\" do\n+      moderator = Fabricate(:user, moderator: true)\n+      public_group_with_private_members = Fabricate(\n+        :group,\n+        visibility_level: Group.visibility_levels[:public],\n+        members_visibility_level: Group.visibility_levels[:owners])\n+\n+      expect {\n+        create_post_with_event(moderator, \"allowedGroups='#{public_group_with_private_members.name}'\")\n+      }.to raise_error(ActiveRecord::RecordNotSaved)\n+    end\n   end\n \n   context \"with holiday events\" do"
        },
        {
          "filename": "spec/requests/events_controller_spec.rb",
          "status": "modified",
          "additions": 101,
          "deletions": 6,
          "patch": "@@ -10,13 +10,13 @@ module DiscoursePostEvent\n       SiteSetting.displayed_invitees_limit = 3\n     end\n \n-    let(:user) { Fabricate(:user, admin: true) }\n-    let(:topic) { Fabricate(:topic, user: user) }\n-    let(:post1) { Fabricate(:post, user: user, topic: topic) }\n-    let(:invitee1) { Fabricate(:user) }\n-    let(:invitee2) { Fabricate(:user) }\n-\n     context 'with an existing post' do\n+      let(:user) { Fabricate(:user, admin: true) }\n+      let(:topic) { Fabricate(:topic, user: user) }\n+      let(:post1) { Fabricate(:post, user: user, topic: topic) }\n+      let(:invitee1) { Fabricate(:user) }\n+      let(:invitee2) { Fabricate(:user) }\n+\n       context 'with an existing event' do\n         let(:event_1) { Fabricate(:event, post: post1) }\n \n@@ -224,5 +224,100 @@ module DiscoursePostEvent\n         end\n       end\n     end\n+\n+    context 'with a private event' do\n+      let(:moderator) { Fabricate(:user, moderator: true) }\n+      let(:topic) { Fabricate(:topic, user: moderator) }\n+      let(:first_post) { Fabricate(:post, user: moderator, topic: topic) }\n+      let(:private_event) { Fabricate(:event, post: first_post, status: Event.statuses[:private]) }\n+\n+      before do\n+        sign_in(moderator)\n+      end\n+\n+      context 'when bulk inviting via CSV file' do\n+        def csv_file(content)\n+          file = Tempfile.new(\"invites.csv\")\n+          file.write(content)\n+          file.rewind\n+          file\n+        end\n+\n+        it \"doesn't invite a private group\" do\n+          private_group = Fabricate(:group, visibility_level: Group.visibility_levels[:owners])\n+\n+          file = csv_file(\"#{private_group.name},going\\n\")\n+          params = { file: fixture_file_upload(file) }\n+          post \"/discourse-post-event/events/#{private_event.id}/csv-bulk-invite.json\", { params: params }\n+\n+          expect(response.status).to eq(200)\n+          private_event.reload\n+          expect(private_event.raw_invitees).to be_nil\n+        end\n+\n+        it \"returns 200 when inviting a non-existent group\" do\n+          file = csv_file(\"non-existent group name,going\\n\")\n+          params = { file: fixture_file_upload(file) }\n+          post \"/discourse-post-event/events/#{private_event.id}/csv-bulk-invite.json\", { params: params }\n+\n+          expect(response.status).to eq(200)\n+        end\n+\n+        it \"doesn't invite a public group with private members\" do\n+          public_group_with_private_members = Fabricate(\n+            :group,\n+            visibility_level: Group.visibility_levels[:public],\n+            members_visibility_level: Group.visibility_levels[:owners])\n+\n+          file = csv_file(\"#{public_group_with_private_members.name},going\\n\")\n+          params = { file: fixture_file_upload(file) }\n+          post \"/discourse-post-event/events/#{private_event.id}/csv-bulk-invite.json\", { params: params }\n+\n+          expect(response.status).to eq(200)\n+          private_event.reload\n+          expect(private_event.raw_invitees).to be_nil\n+        end\n+      end\n+\n+      context 'when doing bulk inviting via UI' do\n+        it \"doesn't invite a private group\" do\n+          private_group = Fabricate(:group, visibility_level: Group.visibility_levels[:owners])\n+\n+          params = { invitees: [\n+            { 'identifier' => private_group.name, 'attendance' => 'going' }\n+          ] }\n+          post \"/discourse-post-event/events/#{private_event.id}/bulk-invite.json\", { params: params }\n+\n+          expect(response.status).to eq(200)\n+          private_event.reload\n+          expect(private_event.raw_invitees).to be_nil\n+        end\n+\n+        it \"returns 200 when inviting a non-existent group\" do\n+          params = { invitees: [\n+            { 'identifier' => 'non-existent group name', 'attendance' => 'going' }\n+          ] }\n+          post \"/discourse-post-event/events/#{private_event.id}/bulk-invite.json\", { params: params }\n+\n+          expect(response.status).to eq(200)\n+        end\n+\n+        it \"doesn't invite a public group with private members\" do\n+          public_group_with_private_members = Fabricate(\n+            :group,\n+            visibility_level: Group.visibility_levels[:public],\n+            members_visibility_level: Group.visibility_levels[:owners])\n+\n+          params = { invitees: [\n+            { 'identifier' => public_group_with_private_members.name, 'attendance' => 'going' }\n+          ] }\n+          post \"/discourse-post-event/events/#{private_event.id}/bulk-invite.json\", { params: params }\n+\n+          expect(response.status).to eq(200)\n+          private_event.reload\n+          expect(private_event.raw_invitees).to be_nil\n+        end\n+      end\n+    end\n   end\n end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "76d8b9a6022b5353f7849e4d329db6df52f56546",
            "date": "2025-01-08T17:31:45Z",
            "author_login": "renato"
          },
          {
            "sha": "3c833c99e32aab9ac708d92617b6b740681ab5ba",
            "date": "2025-01-08T11:23:24Z",
            "author_login": "renato"
          },
          {
            "sha": "764fd67b5ef92f356e977e4c61b27150b138b9c5",
            "date": "2025-01-06T09:00:32Z",
            "author_login": "tgxworld"
          },
          {
            "sha": "2a1bc44f961f014d9975bffa5a7444e49b382bda",
            "date": "2025-01-03T13:01:54Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "73502dd180022de1c4a46ab5a846b6bd53c8205b",
            "date": "2025-01-03T07:42:41Z",
            "author_login": "arpitjalan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Discourse-calendar is a plugin for the Discourse messaging platform which adds the ability to create a dynamic calendar in the first post of a topic. Members of private groups or public groups with private members can be listed by users, who can create and edit post events. This vulnerability only affects sites which have discourse post events enabled. This issue has been patched in commit `ca5ae3e7e` which will be included in future releases. Users unable to upgrade should disable the `discourse_post_event_enabled` setting to fully mitigate the issue. Also, it's possible to prevent regular users from using this vulnerability by removing all groups from the `discourse_post_event_allowed_on_groups` but note that moderators will still be able to use it.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-14T21:15:18.320",
    "last_modified": "2024-11-21T07:24:03.323",
    "fix_date": "2022-11-14T14:18:15Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse-calendar/commit/ca5ae3e7e0c2b32af5ca4ec69c95e95b2ecef2e9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/security/advisories/GHSA-jh96-w279-g7r9",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/commit/ca5ae3e7e0c2b32af5ca4ec69c95e95b2ecef2e9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-calendar/security/advisories/GHSA-jh96-w279-g7r9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:01.017032",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse-calendar",
    "owner": "discourse",
    "created_at": "2018-09-17T14:48:07Z",
    "updated_at": "2025-01-08T17:31:49Z",
    "pushed_at": "2025-01-08T17:31:47Z",
    "size": 2949,
    "stars": 64,
    "forks": 54,
    "open_issues": 6,
    "watchers": 64,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 339295,
      "JavaScript": 219324,
      "SCSS": 29785,
      "Handlebars": 16271
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:26:54.925307"
  }
}