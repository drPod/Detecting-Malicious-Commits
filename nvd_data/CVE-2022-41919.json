{
  "cve_id": "CVE-2022-41919",
  "github_data": {
    "repository": "fastify/fastify",
    "fix_commit": "62dde76f1f7aca76e38625fe8d983761f26e6fc9",
    "related_commits": [
      "62dde76f1f7aca76e38625fe8d983761f26e6fc9",
      "62dde76f1f7aca76e38625fe8d983761f26e6fc9"
    ],
    "patch_url": "https://github.com/fastify/fastify/commit/62dde76f1f7aca76e38625fe8d983761f26e6fc9.patch",
    "fix_commit_details": {
      "sha": "62dde76f1f7aca76e38625fe8d983761f26e6fc9",
      "commit_date": "2022-11-21T14:39:50Z",
      "author": {
        "login": "climba03003",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-3fjj-p79j-c9hh",
        "length": 106,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 302,
        "additions": 293,
        "deletions": 9
      },
      "files": [
        {
          "filename": "lib/contentTypeParser.js",
          "status": "modified",
          "additions": 75,
          "deletions": 6,
          "patch": "@@ -2,6 +2,8 @@\n \n const { AsyncResource } = require('async_hooks')\n const lru = require('tiny-lru').lru\n+// TODO: find more perforamant solution\n+const { parse: parseContentType } = require('content-type')\n \n const secureJson = require('secure-json-parse')\n const {\n@@ -33,7 +35,7 @@ function ContentTypeParser (bodyLimit, onProtoPoisoning, onConstructorPoisoning)\n   this.customParsers = new Map()\n   this.customParsers.set('application/json', new Parser(true, false, bodyLimit, this[kDefaultJsonParse]))\n   this.customParsers.set('text/plain', new Parser(true, false, bodyLimit, defaultPlainTextParser))\n-  this.parserList = ['application/json', 'text/plain']\n+  this.parserList = [new ParserListItem('application/json'), new ParserListItem('text/plain')]\n   this.parserRegExpList = []\n   this.cache = lru(100)\n }\n@@ -66,7 +68,7 @@ ContentTypeParser.prototype.add = function (contentType, opts, parserFn) {\n     this.customParsers.set('', parser)\n   } else {\n     if (contentTypeIsString) {\n-      this.parserList.unshift(contentType)\n+      this.parserList.unshift(new ParserListItem(contentType))\n     } else {\n       this.parserRegExpList.unshift(contentType)\n     }\n@@ -97,11 +99,20 @@ ContentTypeParser.prototype.getParser = function (contentType) {\n   const parser = this.cache.get(contentType)\n   if (parser !== undefined) return parser\n \n+  const parsed = safeParseContentType(contentType)\n+\n+  // dummyContentType always the same object\n+  // we can use === for the comparsion and return early\n+  if (parsed === dummyContentType) {\n+    return this.customParsers.get('')\n+  }\n+\n   // eslint-disable-next-line no-var\n   for (var i = 0; i !== this.parserList.length; ++i) {\n-    const parserName = this.parserList[i]\n-    if (contentType.indexOf(parserName) !== -1) {\n-      const parser = this.customParsers.get(parserName)\n+    const parserListItem = this.parserList[i]\n+    if (compareContentType(parsed, parserListItem)) {\n+      const parser = this.customParsers.get(parserListItem.name)\n+      // we set request content-type in cache to reduce parsing of MIME type\n       this.cache.set(contentType, parser)\n       return parser\n     }\n@@ -110,8 +121,9 @@ ContentTypeParser.prototype.getParser = function (contentType) {\n   // eslint-disable-next-line no-var\n   for (var j = 0; j !== this.parserRegExpList.length; ++j) {\n     const parserRegExp = this.parserRegExpList[j]\n-    if (parserRegExp.test(contentType)) {\n+    if (compareRegExpContentType(contentType, parsed.type, parserRegExp)) {\n       const parser = this.customParsers.get(parserRegExp.toString())\n+      // we set request content-type in cache to reduce parsing of MIME type\n       this.cache.set(contentType, parser)\n       return parser\n     }\n@@ -346,6 +358,63 @@ function removeAllContentTypeParsers () {\n   this[kContentTypeParser].removeAll()\n }\n \n+// dummy here to prevent repeated object creation\n+const dummyContentType = { type: '', parameters: Object.create(null) }\n+\n+function safeParseContentType (contentType) {\n+  try {\n+    return parseContentType(contentType)\n+  } catch (err) {\n+    return dummyContentType\n+  }\n+}\n+\n+function compareContentType (contentType, parserListItem) {\n+  if (parserListItem.isEssence) {\n+    // we do essence check\n+    return contentType.type.indexOf(parserListItem) !== -1\n+  } else {\n+    // when the content-type includes parameters\n+    // we do a full-text search\n+    // reject essence content-type before checking parameters\n+    if (contentType.type.indexOf(parserListItem.type) === -1) return false\n+    for (const key of parserListItem.parameterKeys) {\n+      // reject when missing parameters\n+      if (!(key in contentType.parameters)) return false\n+      // reject when parameters do not match\n+      if (contentType.parameters[key] !== parserListItem.parameters[key]) return false\n+    }\n+    return true\n+  }\n+}\n+\n+function compareRegExpContentType (contentType, essenceMIMEType, regexp) {\n+  if (regexp.source.indexOf(';') === -1) {\n+    // we do essence check\n+    return regexp.test(essenceMIMEType)\n+  } else {\n+    // when the content-type includes parameters\n+    // we do a full-text match\n+    return regexp.test(contentType)\n+  }\n+}\n+\n+function ParserListItem (contentType) {\n+  this.name = contentType\n+  // we pre-calculate all the needed information\n+  // before content-type comparsion\n+  const parsed = safeParseContentType(contentType)\n+  this.type = parsed.type\n+  this.parameters = parsed.parameters\n+  this.parameterKeys = Object.keys(parsed.parameters)\n+  this.isEssence = contentType.indexOf(';') === -1\n+}\n+\n+// used in ContentTypeParser.remove\n+ParserListItem.prototype.toString = function () {\n+  return this.name\n+}\n+\n module.exports = ContentTypeParser\n module.exports.helpers = {\n   buildContentTypeParser,"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -176,6 +176,7 @@\n     \"@fastify/fast-json-stringify-compiler\": \"^4.1.0\",\n     \"abstract-logging\": \"^2.0.1\",\n     \"avvio\": \"^8.2.0\",\n+    \"content-type\": \"^1.0.4\",\n     \"find-my-way\": \"^7.3.0\",\n     \"light-my-request\": \"^5.6.1\",\n     \"pino\": \"^8.5.0\","
        },
        {
          "filename": "test/content-parser.test.js",
          "status": "modified",
          "additions": 214,
          "deletions": 0,
          "patch": "@@ -395,3 +395,217 @@ test('Safeguard against malicious content-type / 3', async t => {\n \n   t.same(response.statusCode, 415)\n })\n+\n+test('Safeguard against content-type spoofing - string', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser('text/plain', function (request, body, done) {\n+    t.pass('should be called')\n+    done(null, body)\n+  })\n+  fastify.addContentTypeParser('application/json', function (request, body, done) {\n+    t.fail('shouldn\\'t be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'text/plain; content-type=\"application/json\"'\n+    },\n+    body: ''\n+  })\n+})\n+\n+test('Safeguard against content-type spoofing - regexp', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser(/text\\/plain/, function (request, body, done) {\n+    t.pass('should be called')\n+    done(null, body)\n+  })\n+  fastify.addContentTypeParser(/application\\/json/, function (request, body, done) {\n+    t.fail('shouldn\\'t be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'text/plain; content-type=\"application/json\"'\n+    },\n+    body: ''\n+  })\n+})\n+\n+test('content-type match parameters - string 1', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser('text/plain; charset=utf8', function (request, body, done) {\n+    t.fail('shouldn\\'t be called')\n+    done(null, body)\n+  })\n+  fastify.addContentTypeParser('application/json; charset=utf8', function (request, body, done) {\n+    t.pass('should be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'application/json; charset=utf8'\n+    },\n+    body: ''\n+  })\n+})\n+\n+test('content-type match parameters - string 2', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser('application/json; charset=utf8; foo=bar', function (request, body, done) {\n+    t.pass('should be called')\n+    done(null, body)\n+  })\n+  fastify.addContentTypeParser('text/plain; charset=utf8; foo=bar', function (request, body, done) {\n+    t.fail('shouldn\\'t be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'application/json; foo=bar; charset=utf8'\n+    },\n+    body: ''\n+  })\n+})\n+\n+test('content-type match parameters - regexp', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser(/application\\/json; charset=utf8/, function (request, body, done) {\n+    t.pass('should be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'application/json; charset=utf8'\n+    },\n+    body: ''\n+  })\n+})\n+\n+test('content-type fail when parameters not match - string 1', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser('application/json; charset=utf8; foo=bar', function (request, body, done) {\n+    t.fail('shouldn\\'t be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  const response = await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'application/json; charset=utf8'\n+    },\n+    body: ''\n+  })\n+\n+  t.same(response.statusCode, 415)\n+})\n+\n+test('content-type fail when parameters not match - string 2', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser('application/json; charset=utf8; foo=bar', function (request, body, done) {\n+    t.fail('shouldn\\'t be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  const response = await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'application/json; charset=utf8; foo=baz'\n+    },\n+    body: ''\n+  })\n+\n+  t.same(response.statusCode, 415)\n+})\n+\n+test('content-type fail when parameters not match - regexp', async t => {\n+  t.plan(1)\n+\n+  const fastify = Fastify()\n+  fastify.removeAllContentTypeParsers()\n+  fastify.addContentTypeParser(/application\\/json; charset=utf8; foo=bar/, function (request, body, done) {\n+    t.fail('shouldn\\'t be called')\n+    done(null, body)\n+  })\n+\n+  fastify.post('/', async () => {\n+    return 'ok'\n+  })\n+\n+  const response = await fastify.inject({\n+    method: 'POST',\n+    path: '/',\n+    headers: {\n+      'content-type': 'application/json; charset=utf8'\n+    },\n+    body: ''\n+  })\n+\n+  t.same(response.statusCode, 415)\n+})"
        },
        {
          "filename": "test/custom-parser.test.js",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1053,7 +1053,7 @@ test('The charset should not interfere with the content type handling', t => {\n       url: getUrl(fastify),\n       body: '{\"hello\":\"world\"}',\n       headers: {\n-        'Content-Type': 'application/json charset=utf-8'\n+        'Content-Type': 'application/json; charset=utf-8'\n       }\n     }, (err, response, body) => {\n       t.error(err)\n@@ -1236,7 +1236,7 @@ test('contentTypeParser should add a custom parser with RegExp value', t => {\n         url: getUrl(fastify),\n         body: '{\"hello\":\"world\"}',\n         headers: {\n-          'Content-Type': 'weird-content-type+json'\n+          'Content-Type': 'weird/content-type+json'\n         }\n       }, (err, response, body) => {\n         t.error(err)\n@@ -1266,7 +1266,7 @@ test('contentTypeParser should add multiple custom parsers with RegExp values',\n     done(null, 'xml')\n   })\n \n-  fastify.addContentTypeParser(/.*\\+myExtension$/, function (req, payload, done) {\n+  fastify.addContentTypeParser(/.*\\+myExtension$/i, function (req, payload, done) {\n     let data = ''\n     payload.on('data', chunk => { data += chunk })\n     payload.on('end', () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0367c8c919f7abd8d8b3cda479d9853313f02534",
            "date": "2025-01-14T17:09:35Z",
            "author_login": "Fdawgs"
          },
          {
            "sha": "4467cfcd96db8f84a5d2f64bfad8219a208ab0a2",
            "date": "2025-01-14T17:09:09Z",
            "author_login": "Fdawgs"
          },
          {
            "sha": "9db7990935caafcc72fbc7c64bf92af152552686",
            "date": "2025-01-14T17:07:55Z",
            "author_login": "Fdawgs"
          },
          {
            "sha": "c74c85c9a776dd471482c5ffd67ad050c6979b8d",
            "date": "2025-01-14T11:35:57Z",
            "author_login": "mcollina"
          },
          {
            "sha": "24c4da28e61c286609c2cc4d2f48dcf0cf9efd88",
            "date": "2025-01-11T22:10:01Z",
            "author_login": "gurgunday"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-352",
    "description": "Fastify is a web framework with minimal overhead and plugin architecture. The attacker can use the incorrect `Content-Type` to bypass the `Pre-Flight` checking of `fetch`. `fetch()` requests with Content-Type\u2019s essence as \"application/x-www-form-urlencoded\", \"multipart/form-data\", or \"text/plain\", could potentially be used to invoke routes that only accepts `application/json` content type, thus bypassing any CORS protection, and therefore they could lead to a Cross-Site Request Forgery attack. This issue has been patched in version 4.10.2 and 3.29.4. As a workaround, implement Cross-Site Request Forgery protection using `@fastify/csrf'.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-11-22T20:15:11.110",
    "last_modified": "2024-11-21T07:24:04.130",
    "fix_date": "2022-11-21T14:39:50Z"
  },
  "references": [
    {
      "url": "https://github.com/fastify/fastify/commit/62dde76f1f7aca76e38625fe8d983761f26e6fc9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify/security/advisories/GHSA-3fjj-p79j-c9hh",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/%40fastify/csrf",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/fastify/fastify/commit/62dde76f1f7aca76e38625fe8d983761f26e6fc9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify/security/advisories/GHSA-3fjj-p79j-c9hh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/%40fastify/csrf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.153554",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fastify",
    "owner": "fastify",
    "created_at": "2016-09-28T19:10:14Z",
    "updated_at": "2025-01-14T14:14:42Z",
    "pushed_at": "2025-01-14T11:36:00Z",
    "size": 8645,
    "stars": 32803,
    "forks": 2330,
    "open_issues": 97,
    "watchers": 32803,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.x",
      "2.x",
      "3.x",
      "4.x",
      "main"
    ],
    "languages": {
      "JavaScript": 1599272,
      "TypeScript": 155314,
      "Shell": 911
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:24:12.925727"
  }
}