{
  "cve_id": "CVE-2022-41954",
  "github_data": {
    "repository": "joniles/mpxj",
    "fix_commit": "ae0af24345d79ad45705265d9927fe55e94a5721",
    "related_commits": [
      "ae0af24345d79ad45705265d9927fe55e94a5721",
      "ae0af24345d79ad45705265d9927fe55e94a5721"
    ],
    "patch_url": "https://github.com/joniles/mpxj/commit/ae0af24345d79ad45705265d9927fe55e94a5721.patch",
    "fix_commit_details": {
      "sha": "ae0af24345d79ad45705265d9927fe55e94a5721",
      "commit_date": "2022-11-19T21:19:58Z",
      "author": {
        "login": "JLLeitschuh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "vuln-fix: Temporary File Information Disclosure",
        "length": 731,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 34,
        "deletions": 30
      },
      "files": [
        {
          "filename": "src/main/java/net/sf/mpxj/common/FileHelper.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -25,6 +25,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Files;\n \n /**\n  * Common helper methods for working with files.\n@@ -110,7 +111,7 @@ public static final void mkdirsQuietly(File file)\n     */\n    public static final File createTempDir() throws IOException\n    {\n-      File dir = File.createTempFile(\"mpxj\", \"tmp\");\n+      File dir = Files.createTempFile(\"mpxj\", \"tmp\").toFile();\n       delete(dir);\n       mkdirs(dir);\n       return dir;"
        },
        {
          "filename": "src/main/java/net/sf/mpxj/common/InputStreamHelper.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -27,6 +27,7 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.nio.file.Files;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipException;\n import java.util.zip.ZipInputStream;\n@@ -49,7 +50,7 @@ public static File writeStreamToTempFile(InputStream inputStream, String tempFil\n \n       try\n       {\n-         File file = File.createTempFile(\"mpxj\", tempFileSuffix);\n+         File file = Files.createTempFile(\"mpxj\", tempFileSuffix).toFile();\n          outputStream = new FileOutputStream(file);\n          byte[] buffer = new byte[1024];\n          while (true)"
        },
        {
          "filename": "src/test/java/net/sf/mpxj/junit/CustomerDataTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -174,7 +174,7 @@ public CustomerDataTest()\n \n       // Accessing the database directly from (new) Google Drive is too slow.\n       // Make a temporary local copy instead.\n-      File file = File.createTempFile(\"primavera\", \"db\");\n+      File file = Files.createTempFile(\"primavera\", \"db\").toFile();\n       file.deleteOnExit();\n       Files.copy(new File(m_primaveraFile).toPath(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n \n@@ -616,7 +616,7 @@ private boolean testBaseline(String name, ProjectFile project, File baselineDir,\n \n       if (baselineFile.exists())\n       {\n-         File out = File.createTempFile(\"junit\", suffix);\n+         File out = Files.createTempFile(\"junit\", suffix).toFile();\n          writer.write(project, out);\n          success = FileUtility.equals(baselineFile, out);\n "
        },
        {
          "filename": "src/test/java/net/sf/mpxj/junit/LocaleTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -26,6 +26,7 @@\n import static net.sf.mpxj.junit.MpxjAssert.*;\n \n import java.io.File;\n+import java.nio.file.Files;\n import java.util.Locale;\n \n import org.junit.Test;\n@@ -64,7 +65,7 @@ private void testLocale(Locale locale) throws Exception\n \n       File in = new File(MpxjTestData.filePath(\"legacy/sample.mpx\"));\n       ProjectFile mpx = reader.read(in);\n-      File out = File.createTempFile(\"junit-\" + locale.getLanguage(), \".mpx\");\n+      File out = Files.createTempFile(\"junit-\" + locale.getLanguage(), \".mpx\").toFile();\n       writer.setLocale(locale);\n       writer.write(mpx, out);\n "
        },
        {
          "filename": "src/test/java/net/sf/mpxj/junit/legacy/BasicTest.java",
          "status": "modified",
          "additions": 26,
          "deletions": 25,
          "patch": "@@ -26,6 +26,7 @@\n import static org.junit.Assert.*;\n \n import java.io.File;\n+import java.nio.file.Files;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.Iterator;\n@@ -74,7 +75,7 @@ public class BasicTest\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample.mpx\"));\n       ProjectFile mpx = new MPXReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       MPXWriter writer = new MPXWriter();\n       writer.setUseLocaleDefaults(false);\n       writer.write(mpx, out);\n@@ -93,7 +94,7 @@ public class BasicTest\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample1.xml\"));\n       ProjectFile xml = new MSPDIReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".xml\");\n+      File out = Files.createTempFile(\"junit\", \".xml\").toFile();\n       new MSPDIWriter().write(xml, out);\n       boolean success = FileUtility.equals(in, out);\n       assertTrue(\"Files are not identical\", success);\n@@ -110,7 +111,7 @@ public class BasicTest\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample1.mpx\"));\n       ProjectFile mpx = new MPXReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       MPXWriter writer = new MPXWriter();\n       writer.setUseLocaleDefaults(false);\n       writer.write(mpx, out);\n@@ -128,7 +129,7 @@ public class BasicTest\n       File in = new File(MpxjTestData.filePath(\"legacy/empty.mpp\"));\n       ProjectFile mpx = new MPPReader().read(in);\n       mpx.getProjectProperties().setCurrentDate(new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"01/03/2006\"));\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       MPXWriter writer = new MPXWriter();\n       writer.setUseLocaleDefaults(false);\n       writer.write(mpx, out);\n@@ -144,7 +145,7 @@ public class BasicTest\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample.mpx\"));\n       ProjectFile mpx = new MPXReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".planner\");\n+      File out = Files.createTempFile(\"junit\", \".planner\").toFile();\n       new PlannerWriter().write(mpx, out);\n       //success = FileUtility.equals (in, out);\n       //assertTrue (\"Files are not identical\", success);\n@@ -267,7 +268,7 @@ public class BasicTest\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample98.mpp\"));\n       ProjectFile mpp = new MPPReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpp, out);\n       commonTests(mpp);\n       out.deleteOnExit();\n@@ -280,7 +281,7 @@ public class BasicTest\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample.mpp\"));\n       ProjectFile mpp = new MPPReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpp, out);\n       commonTests(mpp);\n       out.deleteOnExit();\n@@ -293,7 +294,7 @@ public class BasicTest\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample.xml\"));\n       ProjectFile xml = new MSPDIReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(xml, out);\n       commonTests(xml);\n       out.deleteOnExit();\n@@ -353,12 +354,12 @@ private void commonTests(ProjectFile file)\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/sample.mpp\"));\n       ProjectFile mpp = new MPPReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpp, out);\n \n       ProjectFile mpx = new MPXReader().read(out);\n       out.deleteOnExit();\n-      out = File.createTempFile(\"junit\", \".xml\");\n+      out = Files.createTempFile(\"junit\", \".xml\").toFile();\n       new MSPDIWriter().write(mpx, out);\n       out.deleteOnExit();\n    }\n@@ -428,7 +429,7 @@ private void commonTests(ProjectFile file)\n       task5.setStart(new Date());\n       task5.setNotes(notes5);\n \n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(file1, out);\n \n       ProjectFile file2 = new MPXReader().read(out);\n@@ -490,7 +491,7 @@ private void commonTests(ProjectFile file)\n       resource5.setName(\"Test Resource 5\");\n       resource5.setNotes(notes5);\n \n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(file1, out);\n \n       ProjectFile file2 = new MPXReader().read(out);\n@@ -524,7 +525,7 @@ private void commonTests(ProjectFile file)\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/bug1.mpp\"));\n       ProjectFile mpp = new MPPReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpp, out);\n       out.deleteOnExit();\n    }\n@@ -536,7 +537,7 @@ private void commonTests(ProjectFile file)\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/bug2.mpp\"));\n       ProjectFile mpp = new MPPReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpp, out);\n       out.deleteOnExit();\n    }\n@@ -563,7 +564,7 @@ private void commonTests(ProjectFile file)\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/bug4.mpp\"));\n       ProjectFile mpp = new MPPReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpp, out.getAbsolutePath());\n       out.deleteOnExit();\n    }\n@@ -896,7 +897,7 @@ private boolean testSingleFlagTrue(boolean[] flags, int index)\n       //\n       // Write this out as an MSPDI file\n       //\n-      File out = File.createTempFile(\"junit\", \".xml\");\n+      File out = Files.createTempFile(\"junit\", \".xml\").toFile();\n       new MSPDIWriter().write(mpp, out);\n \n       //\n@@ -927,7 +928,7 @@ private boolean testSingleFlagTrue(boolean[] flags, int index)\n       ProjectFile xml = reader.read(in);\n       validateAliases(xml);\n \n-      File out = File.createTempFile(\"junit\", \".xml\");\n+      File out = Files.createTempFile(\"junit\", \".xml\").toFile();\n       writer.write(xml, out);\n \n       xml = reader.read(out);\n@@ -1247,7 +1248,7 @@ private void validateAliases(ProjectFile mpx)\n       //\n       // Write the file\n       //\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(file, out);\n \n       //\n@@ -1338,7 +1339,7 @@ private void validateAliases(ProjectFile mpx)\n       ProjectFile xml = reader.read(MpxjTestData.filePath(\"legacy/mspextattr.xml\"));\n       commonMspdiExtendedAttributeTests(xml);\n \n-      File out = File.createTempFile(\"junit\", \".xml\");\n+      File out = Files.createTempFile(\"junit\", \".xml\").toFile();\n       writer.write(xml, out);\n \n       xml = reader.read(out);\n@@ -1404,7 +1405,7 @@ private void commonMspdiExtendedAttributeTests(ProjectFile xml)\n       // Write the file, re-read it and test to ensure that\n       // the project properties have the expected values\n       //\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       writer.write(mpx, out);\n       mpx = reader.read(out);\n       testProperties(mpx);\n@@ -1435,7 +1436,7 @@ private void commonMspdiExtendedAttributeTests(ProjectFile xml)\n       // Write the file, re-read it and test to ensure that\n       // the project properties have the expected values\n       //\n-      out = File.createTempFile(\"junit\", \".xml\");\n+      out = Files.createTempFile(\"junit\", \".xml\").toFile();\n       new MSPDIWriter().write(mpx, out);\n \n       mpx = new MSPDIReader().read(out);\n@@ -1512,13 +1513,13 @@ private void testMspdiProperties(ProjectFile file)\n       ProjectFile xml = new MSPDIReader().read(MpxjTestData.filePath(\"legacy/mspdipriority.xml\"));\n       validatePriority(xml);\n \n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpx, out);\n       ProjectFile mpx2 = new MPXReader().read(out);\n       validatePriority(mpx2);\n       out.deleteOnExit();\n \n-      out = File.createTempFile(\"junit\", \".xml\");\n+      out = Files.createTempFile(\"junit\", \".xml\").toFile();\n       new MSPDIWriter().write(mpx, out);\n       ProjectFile xml3 = new MSPDIReader().read(out);\n       validatePriority(xml3);\n@@ -1720,7 +1721,7 @@ private void validateTaskCalendars(ProjectFile mpx)\n       //\n       // Write the file and re-read it to ensure we get consistent results.\n       //\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       new MPXWriter().write(mpp, out);\n \n       ProjectFile mpx = new MPXReader().read(out);\n@@ -1737,7 +1738,7 @@ private void validateTaskCalendars(ProjectFile mpx)\n    {\n       File in = new File(MpxjTestData.filePath(\"legacy/calendarExceptions.mpx\"));\n       ProjectFile mpx = new MPXReader().read(in);\n-      File out = File.createTempFile(\"junit\", \".mpx\");\n+      File out = Files.createTempFile(\"junit\", \".mpx\").toFile();\n       MPXWriter writer = new MPXWriter();\n       writer.setUseLocaleDefaults(false);\n       writer.write(mpx, out);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ffa0c002297c07e2ea92731d93f6bdcc37fc3afb",
            "date": "2025-01-09T19:37:48Z",
            "author_login": "joniles"
          },
          {
            "sha": "2e130ff381e56ddf83dd36805ae616e42f853714",
            "date": "2025-01-09T15:18:49Z",
            "author_login": "joniles"
          },
          {
            "sha": "6947f548c2a0cc893a8dda9bd3eb304ce0eb5424",
            "date": "2025-01-09T15:05:13Z",
            "author_login": "joniles"
          },
          {
            "sha": "12f62054d104fcdaf31ab5e388fcedbe95433466",
            "date": "2025-01-09T14:40:11Z",
            "author_login": "joniles"
          },
          {
            "sha": "77568f8289eb06641c5c18524486d6163e175911",
            "date": "2025-01-09T10:50:03Z",
            "author_login": "joniles"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "MPXJ is an open source library to read and write project plans from a variety of file formats and databases. On Unix-like operating systems (not Windows or macos), MPXJ's use of `File.createTempFile(..)` results in temporary files being created with the permissions `-rw-r--r--`. This means that any other user on the system can read the contents of this file. When MPXJ is reading a schedule file which requires the creation of a temporary file or directory, a knowledgeable local user could locate these transient files while they are in use and would then be able to read the schedule being processed by MPXJ. The problem has been patched, MPXJ version 10.14.1 and later includes the necessary changes. Users unable to upgrade may set `java.io.tmpdir` to a directory to which only the user running the application has access will prevent other users from accessing these temporary files.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-25T19:15:12.023",
    "last_modified": "2024-11-21T07:24:08.813",
    "fix_date": "2022-11-19T21:19:58Z"
  },
  "references": [
    {
      "url": "https://github.com/joniles/mpxj/commit/ae0af24345d79ad45705265d9927fe55e94a5721",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/joniles/mpxj/security/advisories/GHSA-jf2p-4gqj-849g",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/joniles/mpxj/commit/ae0af24345d79ad45705265d9927fe55e94a5721",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/joniles/mpxj/security/advisories/GHSA-jf2p-4gqj-849g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.168881",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mpxj",
    "owner": "joniles",
    "created_at": "2015-06-07T10:45:11Z",
    "updated_at": "2025-01-11T16:27:03Z",
    "pushed_at": "2025-01-14T14:15:14Z",
    "size": 459316,
    "stars": 253,
    "forks": 105,
    "open_issues": 18,
    "watchers": 253,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 14704319,
      "Ruby": 524731,
      "C#": 55518,
      "VBA": 35875,
      "Visual Basic .NET": 14934,
      "Batchfile": 3947,
      "CSS": 2622,
      "Python": 1196,
      "Shell": 353
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T14:23:00.371697"
  }
}