{
  "cve_id": "CVE-2022-41967",
  "github_data": {
    "repository": "HyperaDev/Dragonfly",
    "fix_commit": "9661375e1135127ca6cdb5712e978bec33cc06b3",
    "related_commits": [
      "9661375e1135127ca6cdb5712e978bec33cc06b3",
      "9661375e1135127ca6cdb5712e978bec33cc06b3"
    ],
    "patch_url": "https://github.com/HyperaDev/Dragonfly/commit/9661375e1135127ca6cdb5712e978bec33cc06b3.patch",
    "fix_commit_details": {
      "sha": "9661375e1135127ca6cdb5712e978bec33cc06b3",
      "commit_date": "2022-12-23T16:14:42Z",
      "author": {
        "login": "joshuasing",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: CVE-2022-41967",
        "length": 458,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 181,
        "additions": 110,
        "deletions": 71
      },
      "files": [
        {
          "filename": "AUTHORS",
          "status": "removed",
          "additions": 0,
          "deletions": 8,
          "patch": "@@ -1,8 +0,0 @@\n-#  This is a list of entities who own copyright to portions of Chameleon's code.\n-#  Please keep this list sorted alphabetically.\n-#\n-#  Acceptable formats:\n-#    Organization Name\n-#    My Name <myname@email.com>\n-\n-Joshua Sing <joshua@hypera.dev>\n\\ No newline at end of file"
        },
        {
          "filename": "LICENSE",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n MIT License\n \n-Copyright (c) 2021 Joshua Sing <joshua@hypera.dev>\n+Copyright (c) 2021-2022 Joshua Sing <joshua@hypera.dev>\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
        },
        {
          "filename": "SECURITY.md",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -7,8 +7,8 @@\n \n ### Supported Versions\n | Version | Supported          |\n-| ------- | ------------------ |\n-| 0.3.0   | :white_check_mark: |\n+|---------| ------------------ |\n+| 0.3.x   | :white_check_mark: |\n | < 0.3   | :x:                |\n \n ### Reporting a Vulnerability"
        },
        {
          "filename": "pom.xml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -29,7 +29,7 @@\n \n   <groupId>dev.hypera</groupId>\n   <artifactId>Dragonfly</artifactId>\n-  <version>0.3.0-SNAPSHOT</version>\n+  <version>0.3.1-SNAPSHOT</version>\n   <packaging>jar</packaging>\n \n   <name>Dragonfly</name>\n@@ -121,7 +121,7 @@\n     <dependency>\n       <groupId>org.jetbrains</groupId>\n       <artifactId>annotations</artifactId>\n-      <version>22.0.0</version>\n+      <version>23.1.0</version>\n     </dependency>\n     <dependency>\n       <groupId>me.lucko</groupId>"
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/Dragonfly.java",
          "status": "modified",
          "additions": 13,
          "deletions": 12,
          "patch": "@@ -40,23 +40,24 @@\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n import org.jetbrains.annotations.ApiStatus.Internal;\n+import org.jetbrains.annotations.NotNull;\n \n /**\n  * Main Dragonfly class.\n  * @author Joshua Sing <joshua@hypera.dev>\n  */\n public class Dragonfly {\n \n-\tprivate static final String VERSION = \"0.3.0-SNAPSHOT\";\n+\tprivate static final @NotNull String VERSION = \"0.3.1-SNAPSHOT\";\n \n \tprivate final int timeout;\n-\tprivate final Path directory;\n-\tprivate final Set<String> repositories;\n-\tprivate final Consumer<Status> statusHandler;\n+\tprivate final @NotNull Path directory;\n+\tprivate final @NotNull Set<String> repositories;\n+\tprivate final @NotNull Consumer<Status> statusHandler;\n \n-\tprivate final DependencyDownloader dependencyDownloader = new DependencyDownloader(this);\n-\tprivate final DependencyRelocator dependencyRelocator;\n-\tprivate final DependencyLoader dependencyLoader;\n+\tprivate final @NotNull DependencyDownloader dependencyDownloader = new DependencyDownloader(this);\n+\tprivate final @NotNull DependencyRelocator dependencyRelocator;\n+\tprivate final @NotNull DependencyLoader dependencyLoader;\n \n \n \t@Internal\n@@ -74,7 +75,7 @@ protected Dragonfly(int timeout, IClassLoader classLoader, Path directory, Set<S\n \t\t}\n \t}\n \n-\tpublic static String getVersion() {\n+\tpublic static @NotNull String getVersion() {\n \t\treturn VERSION;\n \t}\n \n@@ -84,7 +85,7 @@ public static String getVersion() {\n \t * @param dependencies Dependencies to be loaded.\n \t * @return If the load was successful, in the form of a {@link CompletableFuture<Boolean>}.\n \t */\n-\tpublic CompletableFuture<Boolean> load(Dependency... dependencies) {\n+\tpublic @NotNull CompletableFuture<Boolean> load(@NotNull Dependency... dependencies) {\n \t\treturn CompletableFuture.supplyAsync(() -> {\n \t\t\ttry {\n \t\t\t\tstatusHandler.accept(Status.STARTING);\n@@ -137,11 +138,11 @@ public int getTimeout() {\n \t\treturn timeout;\n \t}\n \n-\tpublic Path getDirectory() {\n+\tpublic @NotNull Path getDirectory() {\n \t\treturn directory;\n \t}\n \n-\tpublic Set<String> getRepositories() {\n+\tpublic @NotNull Set<String> getRepositories() {\n \t\treturn repositories;\n \t}\n \n@@ -151,7 +152,7 @@ public Set<String> getRepositories() {\n \t * @return Stored instance of {@link DependencyDownloader}.\n \t */\n \t@Internal\n-\tpublic DependencyDownloader getDependencyDownloader() {\n+\tpublic @NotNull DependencyDownloader getDependencyDownloader() {\n \t\treturn dependencyDownloader;\n \t}\n "
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/DragonflyBuilder.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -32,6 +32,7 @@\n import java.util.HashSet;\n import java.util.Set;\n import java.util.function.Consumer;\n+import org.jetbrains.annotations.Contract;\n import org.jetbrains.annotations.NotNull;\n \n /**\n@@ -115,6 +116,7 @@ private DragonflyBuilder(@NotNull IClassLoader classLoader, @NotNull Path direct\n \t *\n \t * @return New {@link Dragonfly} instance.\n \t */\n+\t@Contract(value = \"-> new\", pure = true)\n \tpublic @NotNull Dragonfly build() {\n \t\ttry {\n \t\t\treturn new Dragonfly(timeout, classLoader, directory, repositories, deleteOnRelocate, statusHandler);"
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/downloaders/impl/MavenDownloader.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -41,8 +41,8 @@\n @Downloader(MavenDependency.class)\n public class MavenDownloader implements IDownloader<MavenDependency> {\n \n-\tprivate final MavenResolver resolver = new MavenResolver();\n-\tprivate final MavenSnapshotResolver snapshotResolver = new MavenSnapshotResolver();\n+\tprivate final @NotNull MavenResolver resolver = new MavenResolver();\n+\tprivate final @NotNull MavenSnapshotResolver snapshotResolver = new MavenSnapshotResolver();\n \n \t@Override\n \tpublic void download(@NotNull Dragonfly dragonfly, @NotNull MavenDependency dependency) throws DownloadFailureException {"
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/exceptions/DownloadFailureException.java",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -23,25 +23,29 @@\n \n package dev.hypera.dragonfly.exceptions;\n \n+import org.jetbrains.annotations.NotNull;\n+\n public class DownloadFailureException extends DragonflyException {\n \n+\tprivate static final long serialVersionUID = 5648475409314204882L;\n+\n \tpublic DownloadFailureException() {\n \t\tsuper();\n \t}\n \n-\tpublic DownloadFailureException(String message) {\n+\tpublic DownloadFailureException(@NotNull String message) {\n \t\tsuper(message);\n \t}\n \n-\tpublic DownloadFailureException(String message, Throwable cause) {\n+\tpublic DownloadFailureException(@NotNull String message, @NotNull Throwable cause) {\n \t\tsuper(message, cause);\n \t}\n \n-\tpublic DownloadFailureException(Throwable cause) {\n+\tpublic DownloadFailureException(@NotNull Throwable cause) {\n \t\tsuper(cause);\n \t}\n \n-\tprotected DownloadFailureException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+\tprotected DownloadFailureException(@NotNull String message, @NotNull Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n \t\tsuper(message, cause, enableSuppression, writableStackTrace);\n \t}\n "
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/exceptions/DragonflyException.java",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -23,29 +23,33 @@\n \n package dev.hypera.dragonfly.exceptions;\n \n+import org.jetbrains.annotations.NotNull;\n+\n /**\n  * Dragonfly Exception.\n  * @author Joshua Sing <joshua@hypera.dev>\n  */\n public class DragonflyException extends Exception {\n \n+\tprivate static final long serialVersionUID = 3565376065959848642L;\n+\n \tpublic DragonflyException() {\n \t\tsuper();\n \t}\n \n-\tpublic DragonflyException(String message) {\n+\tpublic DragonflyException(@NotNull String message) {\n \t\tsuper(message);\n \t}\n \n-\tpublic DragonflyException(String message, Throwable cause) {\n+\tpublic DragonflyException(@NotNull String message, @NotNull Throwable cause) {\n \t\tsuper(message, cause);\n \t}\n \n-\tpublic DragonflyException(Throwable cause) {\n+\tpublic DragonflyException(@NotNull Throwable cause) {\n \t\tsuper(cause);\n \t}\n \n-\tprotected DragonflyException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+\tprotected DragonflyException(@NotNull String message, @NotNull Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n \t\tsuper(message, cause, enableSuppression, writableStackTrace);\n \t}\n "
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/exceptions/LoadFailureException.java",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -23,25 +23,29 @@\n \n package dev.hypera.dragonfly.exceptions;\n \n+import org.jetbrains.annotations.NotNull;\n+\n public class LoadFailureException extends DragonflyException {\n \n+\tprivate static final long serialVersionUID = -8555618454694039541L;\n+\n \tpublic LoadFailureException() {\n \t\tsuper();\n \t}\n \n-\tpublic LoadFailureException(String message) {\n+\tpublic LoadFailureException(@NotNull String message) {\n \t\tsuper(message);\n \t}\n \n-\tpublic LoadFailureException(String message, Throwable cause) {\n+\tpublic LoadFailureException(@NotNull String message, @NotNull Throwable cause) {\n \t\tsuper(message, cause);\n \t}\n \n-\tpublic LoadFailureException(Throwable cause) {\n+\tpublic LoadFailureException(@NotNull Throwable cause) {\n \t\tsuper(cause);\n \t}\n \n-\tprotected LoadFailureException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+\tprotected LoadFailureException(@NotNull String message, @NotNull Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n \t\tsuper(message, cause, enableSuppression, writableStackTrace);\n \t}\n "
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/exceptions/RelocationFailureException.java",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -23,25 +23,29 @@\n \n package dev.hypera.dragonfly.exceptions;\n \n+import org.jetbrains.annotations.NotNull;\n+\n public class RelocationFailureException extends DragonflyException {\n \n+\tprivate static final long serialVersionUID = -2817144091943660838L;\n+\n \tpublic RelocationFailureException() {\n \t\tsuper();\n \t}\n \n-\tpublic RelocationFailureException(String message) {\n+\tpublic RelocationFailureException(@NotNull String message) {\n \t\tsuper(message);\n \t}\n \n-\tpublic RelocationFailureException(String message, Throwable cause) {\n+\tpublic RelocationFailureException(@NotNull String message, @NotNull Throwable cause) {\n \t\tsuper(message, cause);\n \t}\n \n-\tpublic RelocationFailureException(Throwable cause) {\n+\tpublic RelocationFailureException(@NotNull Throwable cause) {\n \t\tsuper(cause);\n \t}\n \n-\tprotected RelocationFailureException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+\tprotected RelocationFailureException(@NotNull String message, @NotNull Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n \t\tsuper(message, cause, enableSuppression, writableStackTrace);\n \t}\n "
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/exceptions/ResolveFailureException.java",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -23,25 +23,29 @@\n \n package dev.hypera.dragonfly.exceptions;\n \n+import org.jetbrains.annotations.NotNull;\n+\n public class ResolveFailureException extends DownloadFailureException {\n \n+\tprivate static final long serialVersionUID = -8393996338726021911L;\n+\n \tpublic ResolveFailureException() {\n \t\tsuper();\n \t}\n \n-\tpublic ResolveFailureException(String message) {\n+\tpublic ResolveFailureException(@NotNull String message) {\n \t\tsuper(message);\n \t}\n \n-\tpublic ResolveFailureException(String message, Throwable cause) {\n+\tpublic ResolveFailureException(@NotNull String message, @NotNull Throwable cause) {\n \t\tsuper(message, cause);\n \t}\n \n-\tpublic ResolveFailureException(Throwable cause) {\n+\tpublic ResolveFailureException(@NotNull Throwable cause) {\n \t\tsuper(cause);\n \t}\n \n-\tprotected ResolveFailureException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+\tprotected ResolveFailureException(@NotNull String message, @NotNull Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n \t\tsuper(message, cause, enableSuppression, writableStackTrace);\n \t}\n "
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/loading/DependencyLoader.java",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -29,6 +29,7 @@\n import java.net.MalformedURLException;\n import java.util.List;\n import org.jetbrains.annotations.ApiStatus.Internal;\n+import org.jetbrains.annotations.NotNull;\n \n /**\n  * Dependency loader.\n@@ -37,11 +38,11 @@\n  */\n public class DependencyLoader {\n \n-\tprivate final Dragonfly dragonfly;\n-\tprivate final IClassLoader classLoader;\n+\tprivate final @NotNull Dragonfly dragonfly;\n+\tprivate final @NotNull IClassLoader classLoader;\n \n \t@Internal\n-\tpublic DependencyLoader(Dragonfly dragonfly, IClassLoader classLoader) {\n+\tpublic DependencyLoader(@NotNull Dragonfly dragonfly, @NotNull IClassLoader classLoader) {\n \t\tthis.dragonfly = dragonfly;\n \t\tthis.classLoader = classLoader;\n \t}\n@@ -52,7 +53,7 @@ public DependencyLoader(Dragonfly dragonfly, IClassLoader classLoader) {\n \t * @param dependencies Dependencies to be loaded.\n \t * @throws LoadFailureException if something went wrong while loading the dependencies.\n \t */\n-\tpublic void load(List<Dependency> dependencies) throws LoadFailureException {\n+\tpublic void load(@NotNull List<Dependency> dependencies) throws LoadFailureException {\n \t\tfor (Dependency dependency : dependencies) {\n \t\t\tload(dependency);\n \t\t}\n@@ -64,7 +65,7 @@ public void load(List<Dependency> dependencies) throws LoadFailureException {\n \t * @param dependency Dependency to be loaded.\n \t * @throws LoadFailureException if something went wrong while loading the dependency.\n \t */\n-\tprivate void load(Dependency dependency) throws LoadFailureException {\n+\tprivate void load(@NotNull Dependency dependency) throws LoadFailureException {\n \t\ttry {\n \t\t\tclassLoader.addURL(dragonfly.getDirectory().resolve(dependency.getFileName()).toUri().toURL());\n \t\t} catch (MalformedURLException ex) {"
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/loading/DragonflyClassLoader.java",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -26,6 +26,7 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import org.jetbrains.annotations.ApiStatus.Internal;\n+import org.jetbrains.annotations.NotNull;\n \n /**\n  * Dragonfly class loader, a child-first {@link URLClassLoader} used for loading Dragonfly's internal dependencies.\n@@ -35,17 +36,17 @@\n @Internal\n public class DragonflyClassLoader extends URLClassLoader {\n \n-\tpublic DragonflyClassLoader(ClassLoader classLoader) {\n+\tpublic DragonflyClassLoader(@NotNull ClassLoader classLoader) {\n \t\tsuper(new URL[0], classLoader);\n \t}\n \n \t@Override\n-\tpublic void addURL(URL url) {\n+\tpublic void addURL(@NotNull URL url) {\n \t\tsuper.addURL(url);\n \t}\n \n \t@Override\n-\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n+\tprotected @NotNull Class<?> loadClass(@NotNull String name, boolean resolve) throws ClassNotFoundException {\n \t\tClass<?> loadedClass = findLoadedClass(name);\n \t\tif (null == loadedClass) {\n \t\t\ttry {"
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/relocation/DependencyRelocator.java",
          "status": "modified",
          "additions": 8,
          "deletions": 7,
          "patch": "@@ -41,6 +41,7 @@\n import java.util.Map;\n import org.jetbrains.annotations.ApiStatus.Internal;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Dependency relocator.\n@@ -49,21 +50,21 @@\n  */\n public class DependencyRelocator {\n \n-\tprivate static final String RELOCATED_FILENAME = \"%s-relocated.jar\";\n+\tprivate static final @NotNull String RELOCATED_FILENAME = \"%s-relocated.jar\";\n \n-\tprivate final Dragonfly dragonfly;\n+\tprivate final @NotNull Dragonfly dragonfly;\n \tprivate final boolean deleteOld;\n \n-\tprivate final DragonflyClassLoader classLoader;\n-\tprivate final DependencyLoader dependencyLoader;\n+\tprivate final @NotNull DragonflyClassLoader classLoader;\n+\tprivate final @NotNull DependencyLoader dependencyLoader;\n \n \tprivate boolean dependenciesLoaded;\n \n-\tprivate Constructor<?> constructor;\n-\tprivate Method method;\n+\tprivate @Nullable Constructor<?> constructor;\n+\tprivate @Nullable Method method;\n \n \t@Internal\n-\tpublic DependencyRelocator(Dragonfly dragonfly, boolean deleteOld) {\n+\tpublic DependencyRelocator(@NotNull Dragonfly dragonfly, boolean deleteOld) {\n \t\tthis.dragonfly = dragonfly;\n \t\tthis.deleteOld = deleteOld;\n \t\tthis.classLoader = new DragonflyClassLoader(getClass().getClassLoader());"
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/relocation/Relocation.java",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -32,10 +32,10 @@\n  */\n public class Relocation {\n \n-\tprivate final String from;\n-\tprivate final String to;\n+\tprivate final @NotNull String from;\n+\tprivate final @NotNull String to;\n \n-\tprivate Relocation(String from, String to) {\n+\tprivate Relocation(@NotNull String from, @NotNull String to) {\n \t\tthis.from = from.replace(\"\\\\.\", \".\");\n \t\tthis.to = to;\n \t}\n@@ -44,11 +44,11 @@ private Relocation(String from, String to) {\n \t\treturn new Relocation(from, to);\n \t}\n \n-\tpublic String getFrom() {\n+\tpublic @NotNull String getFrom() {\n \t\treturn from;\n \t}\n \n-\tpublic String getTo() {\n+\tpublic @NotNull String getTo() {\n \t\treturn to;\n \t}\n "
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/resolvers/impl/MavenResolver.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -40,7 +40,7 @@\n  */\n public class MavenResolver implements IResolver<MavenDependency> {\n \n-\tprivate static final String FORMAT = \"%s%s/%s/%s/%s-%s.jar\";\n+\tprivate static final @NotNull String FORMAT = \"%s%s/%s/%s/%s-%s.jar\";\n \n \t@Override\n \tpublic @Nullable String resolve(@NotNull Dragonfly dragonfly, @NotNull MavenDependency dependency) throws ResolveFailureException {"
        },
        {
          "filename": "src/main/java/dev/hypera/dragonfly/resolvers/impl/MavenSnapshotResolver.java",
          "status": "modified",
          "additions": 24,
          "deletions": 3,
          "patch": "@@ -27,16 +27,19 @@\n import dev.hypera.dragonfly.dependency.impl.MavenDependency;\n import dev.hypera.dragonfly.exceptions.ResolveFailureException;\n import dev.hypera.dragonfly.resolvers.IResolver;\n+import java.io.IOException;\n import java.io.StringReader;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xml.sax.InputSource;\n+import sun.tools.jstat.ParserException;\n \n /**\n  * Maven snapshot resolver.\n@@ -45,8 +48,26 @@\n  */\n public class MavenSnapshotResolver implements IResolver<MavenDependency> {\n \n-\tprivate static final String FORMAT = \"%s%s/%s/%s/maven-metadata.xml\";\n-\tprivate static final String OUTPUT_FORMAT = \"%s/%s-%s-%s-%s.jar\";\n+\tprivate static final @NotNull String FORMAT = \"%s%s/%s/%s/maven-metadata.xml\";\n+\tprivate static final @NotNull String OUTPUT_FORMAT = \"%s/%s-%s-%s-%s.jar\";\n+\tprivate final @NotNull DocumentBuilderFactory documentBuilderFactory;\n+\n+\tpublic MavenSnapshotResolver() {\n+\t\ttry {\n+\t\t\t/* The below is an attempt to create an XML parser while preventing XML External Entity attacks */\n+\t\t\t/* Read more: https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java */\n+\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\t\t\tfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+\t\t\tfactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+\t\t\tfactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+\t\t\tfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+\t\t\tfactory.setXIncludeAware(false);\n+\t\t\tfactory.setExpandEntityReferences(false);\n+\t\t\tthis.documentBuilderFactory = factory;\n+\t\t} catch (ParserConfigurationException ex) {\n+\t\t\tthrow new RuntimeException(\"Failed to create DocumentBuilderFactory\", ex);\n+\t\t}\n+\t}\n \n \t@Override\n \tpublic @Nullable String resolve(@NotNull Dragonfly dragonfly, @NotNull MavenDependency dependency) throws ResolveFailureException {\n@@ -72,7 +93,7 @@ public class MavenSnapshotResolver implements IResolver<MavenDependency> {\n \t\t\t}\n \n \t\t\ttry {\n-\t\t\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+\t\t\t\tDocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();\n \t\t\t\tDocument document = builder.parse(new InputSource(new StringReader(data)));\n \t\t\t\tElement root = document.getDocumentElement();\n \t\t\t\tElement snapshotData = (Element) root.getElementsByTagName(\"snapshot\").item(0);"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a9e63ed41fa57e09095d55f09307cd370aeae1c0",
            "date": "2023-02-08T01:27:20Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "06168156aa221c8823f52f922c31d5279a484fa8",
            "date": "2023-02-02T21:50:26Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "73c1a27da4f0f93d15b03a6c8a02997698a62002",
            "date": "2023-01-24T05:53:47Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "867714acd6ae28ca22f2c53c32193f24973ea712",
            "date": "2023-01-24T05:53:38Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e55de05363e383d3270a9cf0e007e5297a6b9ed1",
            "date": "2023-01-06T04:50:33Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:L",
    "cwe_id": "CWE-611",
    "description": "Dragonfly is a Java runtime dependency management library. Dragonfly v0.3.0-SNAPSHOT does not configure DocumentBuilderFactory to prevent XML external entity (XXE) attacks. This issue is patched in 0.3.1-SNAPSHOT. As a workaround, since Dragonfly only parses XML `SNAPSHOT` versions are being resolved, this vulnerability may be avoided by not trying to resolve `SNAPSHOT` versions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-12-28T00:15:14.953",
    "last_modified": "2024-11-21T07:24:10.390",
    "fix_date": "2022-12-23T16:14:42Z"
  },
  "references": [
    {
      "url": "https://github.com/HyperaDev/Dragonfly/commit/9661375e1135127ca6cdb5712e978bec33cc06b3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/HyperaDev/Dragonfly/security/advisories/GHSA-6x3m-96qp-mmxv",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/HyperaDev/Dragonfly/commit/9661375e1135127ca6cdb5712e978bec33cc06b3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/HyperaDev/Dragonfly/security/advisories/GHSA-6x3m-96qp-mmxv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.225744",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Dragonfly",
    "owner": "HyperaDev",
    "created_at": "2021-09-10T06:37:23Z",
    "updated_at": "2024-09-21T19:16:44Z",
    "pushed_at": "2023-05-08T22:58:36Z",
    "size": 75,
    "stars": 7,
    "forks": 0,
    "open_issues": 6,
    "watchers": 7,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 73248
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:44:50.130901"
  }
}