{
  "cve_id": "CVE-2022-42003",
  "github_data": {
    "repository": "FasterXML/jackson-databind",
    "fix_commit": "d78d00ee7b5245b93103fef3187f70543d67ca33",
    "related_commits": [
      "d78d00ee7b5245b93103fef3187f70543d67ca33",
      "d78d00ee7b5245b93103fef3187f70543d67ca33"
    ],
    "patch_url": "https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33.patch",
    "fix_commit_details": {
      "sha": "d78d00ee7b5245b93103fef3187f70543d67ca33",
      "commit_date": "2022-09-07T00:05:53Z",
      "author": {
        "login": "cowtowncoder",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix #3590",
        "length": 9,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 149,
        "additions": 137,
        "deletions": 12
      },
      "files": [
        {
          "filename": "release-notes/VERSION-2.x",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -57,6 +57,8 @@ Project: jackson-databind\n #3559: Support `null`-valued `Map` fields with \"any setter\"\n #3568: Change `JsonNode.with(String)` and `withArray(String)` to consider\n   argument as `JsonPointer` if valid expression\n+#3590: Add check in primitive value deserializers to avoid deep wrapper array\n+  nesting wrt `UNWRAP_SINGLE_VALUE_ARRAYS`\n \n 2.13.4 (03-Sep-2022)\n "
        },
        {
          "filename": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
          "status": "modified",
          "additions": 40,
          "deletions": 12,
          "patch": "@@ -357,12 +357,8 @@ protected T _deserializeWrappedValue(JsonParser p, DeserializationContext ctxt)\n         // 23-Mar-2017, tatu: Let's specifically block recursive resolution to avoid\n         //   either supporting nested arrays, or to cause infinite looping.\n         if (p.hasToken(JsonToken.START_ARRAY)) {\n-            String msg = String.format(\n-\"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",\n-                    ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,\n-                    \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");\n             @SuppressWarnings(\"unchecked\")\n-            T result = (T) ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, msg);\n+            T result = (T) handleNestedArrayForSingle(p, ctxt);\n             return result;\n         }\n         return (T) deserialize(p, ctxt);\n@@ -413,7 +409,9 @@ protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationCont\n         case JsonTokenId.ID_START_ARRAY:\n             // 12-Jun-2020, tatu: For some reason calling `_deserializeFromArray()` won't work so:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (boolean) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final boolean parsed = _parseBooleanPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -582,7 +580,9 @@ protected final byte _parseBytePrimitive(JsonParser p, DeserializationContext ct\n         case JsonTokenId.ID_START_ARRAY: // unwrapping / from-empty-array coercion?\n             // 12-Jun-2020, tatu: For some reason calling `_deserializeFromArray()` won't work so:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (byte) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final byte parsed = _parseBytePrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -652,7 +652,9 @@ protected final short _parseShortPrimitive(JsonParser p, DeserializationContext\n         case JsonTokenId.ID_START_ARRAY:\n             // 12-Jun-2020, tatu: For some reason calling `_deserializeFromArray()` won't work so:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (short) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final short parsed = _parseShortPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -719,7 +721,9 @@ protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (int) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final int parsed = _parseIntPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -870,7 +874,9 @@ protected final long _parseLongPrimitive(JsonParser p, DeserializationContext ct\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (long) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final long parsed = _parseLongPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -1003,7 +1009,9 @@ protected final float _parseFloatPrimitive(JsonParser p, DeserializationContext\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (float) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final float parsed = _parseFloatPrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -1132,7 +1140,9 @@ protected final double _parseDoublePrimitive(JsonParser p, DeserializationContex\n             break;\n         case JsonTokenId.ID_START_ARRAY:\n             if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n-                p.nextToken();\n+                if (p.nextToken() == JsonToken.START_ARRAY) {\n+                    return (double) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final double parsed = _parseDoublePrimitive(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -1313,6 +1323,9 @@ protected java.util.Date _parseDateFromArray(JsonParser p, DeserializationContex\n                 default:\n                 }\n             } else if (unwrap) {\n+                if (t == JsonToken.START_ARRAY) {\n+                    return (java.util.Date) handleNestedArrayForSingle(p, ctxt);\n+                }\n                 final Date parsed = _parseDate(p, ctxt);\n                 _verifyEndArrayForSingle(p, ctxt);\n                 return parsed;\n@@ -2109,6 +2122,21 @@ protected void handleMissingEndArrayForSingle(JsonParser p, DeserializationConte\n         //     but for now just fall through\n     }\n \n+    /**\n+     * Helper method called when detecting a deep(er) nesting of Arrays when trying\n+     * to unwrap value for {@code DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS}.\n+     *\n+     * @since 2.14\n+     */\n+    protected Object handleNestedArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException\n+    {\n+        String msg = String.format(\n+\"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",\n+                ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,\n+                \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");\n+        return ctxt.handleUnexpectedToken(getValueType(ctxt), p.currentToken(), p, msg);\n+    }\n+\n     protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException\n     {\n         JsonToken t = p.nextToken();"
        },
        {
          "filename": "src/test/java/com/fasterxml/jackson/databind/deser/dos/DeepArrayWrappingForDeser3590Test.java",
          "status": "added",
          "additions": 95,
          "deletions": 0,
          "patch": "@@ -0,0 +1,95 @@\n+package com.fasterxml.jackson.databind.deser.dos;\n+\n+import java.util.Date;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n+\n+public class DeepArrayWrappingForDeser3590Test extends BaseMapTest\n+{\n+    // 05-Sep-2022, tatu: Before fix, failed with 5000\n+    private final static int TOO_DEEP_NESTING = 9999;\n+\n+    private final ObjectMapper MAPPER = jsonMapperBuilder()\n+            .enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)\n+            .build();\n+\n+    private final static String TOO_DEEP_DOC = _nestedDoc(TOO_DEEP_NESTING, \"[ \", \"] \", \"123\");\n+\n+    public void testArrayWrappingForBoolean() throws Exception\n+    {\n+        _testArrayWrappingFor(Boolean.class);\n+        _testArrayWrappingFor(Boolean.TYPE);\n+    }\n+\n+    public void testArrayWrappingForByte() throws Exception\n+    {\n+        _testArrayWrappingFor(Byte.class);\n+        _testArrayWrappingFor(Byte.TYPE);\n+    }\n+\n+    public void testArrayWrappingForShort() throws Exception\n+    {\n+        _testArrayWrappingFor(Short.class);\n+        _testArrayWrappingFor(Short.TYPE);\n+    }\n+\n+    public void testArrayWrappingForInt() throws Exception\n+    {\n+        _testArrayWrappingFor(Integer.class);\n+        _testArrayWrappingFor(Integer.TYPE);\n+    }\n+\n+    public void testArrayWrappingForLong() throws Exception\n+    {\n+        _testArrayWrappingFor(Long.class);\n+        _testArrayWrappingFor(Long.TYPE);\n+    }\n+\n+    public void testArrayWrappingForFloat() throws Exception\n+    {\n+        _testArrayWrappingFor(Float.class);\n+        _testArrayWrappingFor(Float.TYPE);\n+    }\n+\n+    public void testArrayWrappingForDouble() throws Exception\n+    {\n+        _testArrayWrappingFor(Double.class);\n+        _testArrayWrappingFor(Double.TYPE);\n+    }\n+\n+    public void testArrayWrappingForDate() throws Exception\n+    {\n+        _testArrayWrappingFor(Date.class);\n+    }\n+\n+    private void _testArrayWrappingFor(Class<?> cls) throws Exception\n+    {\n+        try {\n+            MAPPER.readValue(TOO_DEEP_DOC, cls);\n+            fail(\"Should not pass\");\n+        } catch (MismatchedInputException e) {\n+            verifyException(e, \"Cannot deserialize\");\n+            verifyException(e, \"nested Arrays not allowed\");\n+        }\n+    }\n+\n+    private static String _nestedDoc(int nesting, String open, String close, String content) {\n+        StringBuilder sb = new StringBuilder(nesting * (open.length() + close.length()));\n+        for (int i = 0; i < nesting; ++i) {\n+            sb.append(open);\n+            if ((i & 31) == 0) {\n+                sb.append(\"\\n\");\n+            }\n+        }\n+        sb.append(\"\\n\").append(content).append(\"\\n\");\n+        for (int i = 0; i < nesting; ++i) {\n+            sb.append(close);\n+            if ((i & 31) == 0) {\n+                sb.append(\"\\n\");\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "49f4daedecf5e4e0a6abbc690fa1369b774e34ed",
            "date": "2025-01-13T18:19:50Z",
            "author_login": "k163377"
          },
          {
            "sha": "369e4497ec8e3cb097af87da72a3f366b15a8822",
            "date": "2025-01-09T04:51:33Z",
            "author_login": "cowtowncoder"
          },
          {
            "sha": "5b1b9ab5984ef6a5265fe1618f6f43e22384fd09",
            "date": "2025-01-09T04:51:20Z",
            "author_login": "cowtowncoder"
          },
          {
            "sha": "ae02cb9afb5cb56afd4638b23fe9ec441c24469c",
            "date": "2025-01-09T02:53:12Z",
            "author_login": "cowtowncoder"
          },
          {
            "sha": "0604fabc3e2c965c9a47ab83df02da37aebe8f02",
            "date": "2025-01-09T02:12:16Z",
            "author_login": "cowtowncoder"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-502",
    "description": "In FasterXML jackson-databind before versions 2.13.4.1 and 2.12.17.1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-02T05:15:09.070",
    "last_modified": "2024-11-21T07:24:15.093",
    "fix_date": "2022-09-07T00:05:53Z"
  },
  "references": [
    {
      "url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FasterXML/jackson-databind/issues/3590",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202210-21",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20221124-0004/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5283",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FasterXML/jackson-databind/issues/3590",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202210-21",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20221124-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5283",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.307279",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jackson-databind",
    "owner": "FasterXML",
    "created_at": "2011-12-23T07:17:41Z",
    "updated_at": "2025-01-13T18:19:54Z",
    "pushed_at": "2025-01-14T04:12:39Z",
    "size": 81078,
    "stars": 3539,
    "forks": 1389,
    "open_issues": 451,
    "watchers": 3539,
    "has_security_policy": false,
    "default_branch": "2.19",
    "protected_branches": [
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "2.5",
      "2.6",
      "2.7",
      "2.8",
      "2.9",
      "2.10",
      "2.11",
      "2.12",
      "2.13",
      "2.14",
      "2.15",
      "2.16",
      "2.17",
      "2.18",
      "2.19",
      "master"
    ],
    "languages": {
      "Java": 8800356,
      "Logos": 210091,
      "Shell": 264
    },
    "commit_activity": {
      "total_commits_last_year": 534,
      "avg_commits_per_week": 10.26923076923077,
      "days_active_last_year": 202
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:06:18.365710"
  }
}