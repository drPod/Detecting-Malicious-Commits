{
  "cve_id": "CVE-2022-42703",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "2555283eb40df89945557273121e9393ef9b542b",
    "related_commits": [
      "2555283eb40df89945557273121e9393ef9b542b",
      "2555283eb40df89945557273121e9393ef9b542b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "2555283eb40df89945557273121e9393ef9b542b",
      "commit_date": "2022-08-31T17:06:00Z",
      "author": {
        "login": "thejh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "mm/rmap: Fix anon_vma->degree ambiguity leading to double-reuse",
        "length": 1628,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 36,
        "additions": 21,
        "deletions": 15
      },
      "files": [
        {
          "filename": "include/linux/rmap.h",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -41,12 +41,15 @@ struct anon_vma {\n \tatomic_t refcount;\n \n \t/*\n-\t * Count of child anon_vmas and VMAs which points to this anon_vma.\n+\t * Count of child anon_vmas. Equals to the count of all anon_vmas that\n+\t * have ->parent pointing to this one, including itself.\n \t *\n \t * This counter is used for making decision about reusing anon_vma\n \t * instead of forking new one. See comments in function anon_vma_clone.\n \t */\n-\tunsigned degree;\n+\tunsigned long num_children;\n+\t/* Count of VMAs whose ->anon_vma pointer points to this object. */\n+\tunsigned long num_active_vmas;\n \n \tstruct anon_vma *parent;\t/* Parent of this anon_vma */\n "
        },
        {
          "filename": "mm/rmap.c",
          "status": "modified",
          "additions": 16,
          "deletions": 13,
          "patch": "@@ -93,7 +93,8 @@ static inline struct anon_vma *anon_vma_alloc(void)\n \tanon_vma = kmem_cache_alloc(anon_vma_cachep, GFP_KERNEL);\n \tif (anon_vma) {\n \t\tatomic_set(&anon_vma->refcount, 1);\n-\t\tanon_vma->degree = 1;\t/* Reference for first vma */\n+\t\tanon_vma->num_children = 0;\n+\t\tanon_vma->num_active_vmas = 0;\n \t\tanon_vma->parent = anon_vma;\n \t\t/*\n \t\t * Initialise the anon_vma root to point to itself. If called\n@@ -201,6 +202,7 @@ int __anon_vma_prepare(struct vm_area_struct *vma)\n \t\tanon_vma = anon_vma_alloc();\n \t\tif (unlikely(!anon_vma))\n \t\t\tgoto out_enomem_free_avc;\n+\t\tanon_vma->num_children++; /* self-parent link for new root */\n \t\tallocated = anon_vma;\n \t}\n \n@@ -210,8 +212,7 @@ int __anon_vma_prepare(struct vm_area_struct *vma)\n \tif (likely(!vma->anon_vma)) {\n \t\tvma->anon_vma = anon_vma;\n \t\tanon_vma_chain_link(vma, avc, anon_vma);\n-\t\t/* vma reference or self-parent link for new root */\n-\t\tanon_vma->degree++;\n+\t\tanon_vma->num_active_vmas++;\n \t\tallocated = NULL;\n \t\tavc = NULL;\n \t}\n@@ -296,19 +297,19 @@ int anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)\n \t\tanon_vma_chain_link(dst, avc, anon_vma);\n \n \t\t/*\n-\t\t * Reuse existing anon_vma if its degree lower than two,\n-\t\t * that means it has no vma and only one anon_vma child.\n+\t\t * Reuse existing anon_vma if it has no vma and only one\n+\t\t * anon_vma child.\n \t\t *\n-\t\t * Do not choose parent anon_vma, otherwise first child\n-\t\t * will always reuse it. Root anon_vma is never reused:\n+\t\t * Root anon_vma is never reused:\n \t\t * it has self-parent reference and at least one child.\n \t\t */\n \t\tif (!dst->anon_vma && src->anon_vma &&\n-\t\t    anon_vma != src->anon_vma && anon_vma->degree < 2)\n+\t\t    anon_vma->num_children < 2 &&\n+\t\t    anon_vma->num_active_vmas == 0)\n \t\t\tdst->anon_vma = anon_vma;\n \t}\n \tif (dst->anon_vma)\n-\t\tdst->anon_vma->degree++;\n+\t\tdst->anon_vma->num_active_vmas++;\n \tunlock_anon_vma_root(root);\n \treturn 0;\n \n@@ -358,6 +359,7 @@ int anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)\n \tanon_vma = anon_vma_alloc();\n \tif (!anon_vma)\n \t\tgoto out_error;\n+\tanon_vma->num_active_vmas++;\n \tavc = anon_vma_chain_alloc(GFP_KERNEL);\n \tif (!avc)\n \t\tgoto out_error_free_anon_vma;\n@@ -378,7 +380,7 @@ int anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)\n \tvma->anon_vma = anon_vma;\n \tanon_vma_lock_write(anon_vma);\n \tanon_vma_chain_link(vma, avc, anon_vma);\n-\tanon_vma->parent->degree++;\n+\tanon_vma->parent->num_children++;\n \tanon_vma_unlock_write(anon_vma);\n \n \treturn 0;\n@@ -410,15 +412,15 @@ void unlink_anon_vmas(struct vm_area_struct *vma)\n \t\t * to free them outside the lock.\n \t\t */\n \t\tif (RB_EMPTY_ROOT(&anon_vma->rb_root.rb_root)) {\n-\t\t\tanon_vma->parent->degree--;\n+\t\t\tanon_vma->parent->num_children--;\n \t\t\tcontinue;\n \t\t}\n \n \t\tlist_del(&avc->same_vma);\n \t\tanon_vma_chain_free(avc);\n \t}\n \tif (vma->anon_vma) {\n-\t\tvma->anon_vma->degree--;\n+\t\tvma->anon_vma->num_active_vmas--;\n \n \t\t/*\n \t\t * vma would still be needed after unlink, and anon_vma will be prepared\n@@ -436,7 +438,8 @@ void unlink_anon_vmas(struct vm_area_struct *vma)\n \tlist_for_each_entry_safe(avc, next, &vma->anon_vma_chain, same_vma) {\n \t\tstruct anon_vma *anon_vma = avc->anon_vma;\n \n-\t\tVM_WARN_ON(anon_vma->degree);\n+\t\tVM_WARN_ON(anon_vma->num_children);\n+\t\tVM_WARN_ON(anon_vma->num_active_vmas);\n \t\tput_anon_vma(anon_vma);\n \n \t\tlist_del(&avc->same_vma);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-416",
    "description": "mm/rmap.c in the Linux kernel before 5.19.7 has a use-after-free related to leaf anon_vma double reuse.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-10-09T23:15:09.523",
    "last_modified": "2024-11-21T07:25:10.990",
    "fix_date": "2022-08-31T17:06:00Z"
  },
  "references": [
    {
      "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=2351",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.19.7",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2555283eb40df89945557273121e9393ef9b542b",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/2555283eb40df89945557273121e9393ef9b542b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://googleprojectzero.blogspot.com/2022/12/exploiting-CVE-2022-42703-bringing-back-the-stack-attack.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Technical Description",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=2351",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.19.7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2555283eb40df89945557273121e9393ef9b542b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/2555283eb40df89945557273121e9393ef9b542b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://googleprojectzero.blogspot.com/2022/12/exploiting-CVE-2022-42703-bringing-back-the-stack-attack.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Technical Description",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.320501",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}