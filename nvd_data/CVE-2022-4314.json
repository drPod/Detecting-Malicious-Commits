{
  "cve_id": "CVE-2022-4314",
  "github_data": {
    "repository": "ikus060/rdiffweb",
    "fix_commit": "b2df3679564d0daa2856213bb307d3e34bd89a25",
    "related_commits": [
      "b2df3679564d0daa2856213bb307d3e34bd89a25",
      "b2df3679564d0daa2856213bb307d3e34bd89a25"
    ],
    "patch_url": "https://github.com/ikus060/rdiffweb/commit/b2df3679564d0daa2856213bb307d3e34bd89a25.patch",
    "fix_commit_details": {
      "sha": "b2df3679564d0daa2856213bb307d3e34bd89a25",
      "commit_date": "2022-11-24T18:21:05Z",
      "author": {
        "login": "ikus060",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Block repository access when user_root directory is empty or a relative path",
        "length": 76,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 106,
        "additions": 61,
        "deletions": 45
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -108,7 +108,11 @@ Professional support for Rdiffweb is available by contacting [IKUS Soft](https:/\n \n # Changelog\n \n-## Next Rlease - 2.5.1\n+## Next Rlease 2.5.2\n+\n+* Block repository access when user_root directory is empty or a relative path\n+\n+## 2.5.1 (2022-11-11)\n \n * Add support for Ubuntu Kinetic #240\n * Disable filesize for deleted files to improve page loading #241"
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_admin_users.py",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -396,12 +396,8 @@ def test_edit_user_with_not_existing_username(self):\n         self.assertInBody(\"Cannot edit user `invalid`: user doesn&#39;t exists\")\n \n     def test_user_invalid_root(self):\n-        # Delete all user's\n-        for user in UserObject.query.all():\n-            if user.username != self.USERNAME:\n-                user.delete().commit()\n         # Change the user's root\n-        user = UserObject.get_user('admin')\n+        user = UserObject.get_user(self.USERNAME)\n         user.user_root = \"/invalid\"\n         user.commit()\n         self.getPage(\"/admin/users\")"
        },
        {
          "filename": "rdiffweb/core/librdiff.py",
          "status": "modified",
          "additions": 11,
          "deletions": 18,
          "patch": "@@ -845,21 +845,16 @@ class RdiffRepo(object):\n \n     \"\"\"Represent one rdiff-backup repository.\"\"\"\n \n-    def __init__(self, user_root, path, encoding):\n-        if isinstance(user_root, str):\n-            user_root = os.fsencode(user_root)\n-        if isinstance(path, str):\n-            path = os.fsencode(path)\n-        assert isinstance(user_root, bytes)\n-        assert isinstance(path, bytes)\n-        assert encoding\n+    def __init__(self, full_path, encoding):\n+        assert encoding, 'encoding is required'\n         self._encoding = encodings.search_function(encoding)\n-        assert self._encoding\n-        self.path = path.strip(b\"/\")\n-        if self.path:\n-            self.full_path = os.path.normpath(os.path.join(user_root, self.path))\n-        else:\n-            self.full_path = os.path.normpath(user_root)\n+        assert self._encoding, 'encoding must be a valid charset'\n+\n+        # Validate and sanitize the full_path\n+        assert full_path, 'full path is required'\n+        self.full_path = os.fsencode(full_path) if isinstance(full_path, str) else full_path\n+        assert os.path.isabs(self.full_path), 'full_path must be absolute path'\n+        self.full_path = os.path.normpath(self.full_path)\n \n         # The location of rdiff-backup-data directory.\n         self._data_path = os.path.join(self.full_path, RDIFF_BACKUP_DATA)\n@@ -1087,10 +1082,8 @@ def get_display_name(self, path):\n         assert isinstance(path, bytes)\n         path = path.strip(b'/')\n         if path in [b'.', b'']:\n-            # For repository we use either path if defined or the directory base name\n-            if not self.path:\n-                return self._decode(unquote(os.path.basename(self.full_path)))\n-            return self._decode(unquote(self.path))\n+            # For repository the directory base name\n+            return self._decode(unquote(os.path.basename(self.full_path)))\n         else:\n             # For path, we use the dir name\n             return self._decode(unquote(os.path.basename(path)))"
        },
        {
          "filename": "rdiffweb/core/model/_repo.py",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -133,14 +133,14 @@ def get_repo_path(cls, path, as_user=None, refresh=False):\n \n     @orm.reconstructor\n     def __init_on_load__(self):\n-        RdiffRepo.__init__(\n-            self, self.user.user_root, self.repopath, encoding=self.encoding or RepoObject.DEFAULT_REPO_ENCODING\n-        )\n-\n-    @property\n-    def displayname(self):\n-        # Repository displayName is the \"repopath\" too.\n-        return self.repopath.strip('/')\n+        # RdiffRepo required an absolute full path, When the user_root is invalid, let generate an invalid full path.\n+        if not self.user.user_root:\n+            full_path = os.path.join('/user_has_an_empty_user_root/', self.repopath.strip('/'))\n+        elif not os.path.isabs(self.user.user_root):\n+            full_path = os.path.join('/user_has_a_relative_user_root/', self.repopath.strip('/'))\n+        else:\n+            full_path = os.path.join(self.user.user_root, self.repopath.strip('/'))\n+        RdiffRepo.__init__(self, full_path, encoding=self.encoding or RepoObject.DEFAULT_REPO_ENCODING)\n \n     @property\n     def name(self):"
        },
        {
          "filename": "rdiffweb/core/model/tests/test_user.py",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -433,6 +433,26 @@ def test_refresh_repos_with_single_repo(self):\n         userobj.expire()\n         self.assertEqual([''], sorted([r.name for r in userobj.repo_objs]))\n \n+    def test_refresh_repos_with_empty_userroot(self):\n+        # Given a user with valid repositories relative to root\n+        userobj = UserObject.get_user(self.USERNAME)\n+        for repo in userobj.repo_objs:\n+            repo.repopath = self.testcases[1:] + '/' + repo.repopath\n+            repo.add().commit()\n+        userobj.user_root = '/'\n+        userobj.add().commit()\n+        self.assertEqual(['interrupted', 'ok'], sorted([r.status[0] for r in userobj.repo_objs]))\n+        # When updating it's userroot directory to an empty value\n+        userobj.user_root = ''\n+        userobj.add().commit()\n+        UserObject.session.expire_all()\n+        # Then close session\n+        cherrypy.tools.db.on_end_resource()\n+        # Then repo status is \"broken\"\n+        userobj = UserObject.get_user(self.USERNAME)\n+        self.assertFalse(userobj.valid_user_root())\n+        self.assertEqual(['failed', 'failed'], [r.status[0] for r in userobj.repo_objs])\n+\n \n class UserObjectWithAdminPassword(rdiffweb.test.WebCase):\n "
        },
        {
          "filename": "rdiffweb/core/rdw_templating.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -167,12 +167,12 @@ def url_for(*args, **kwargs):\n     for chunk in args:\n         if not chunk:\n             continue\n-        if hasattr(chunk, 'owner') and hasattr(chunk, 'path'):\n+        if hasattr(chunk, 'owner') and hasattr(chunk, 'repopath'):\n             # This is a RepoObject\n             path += \"/\"\n             path += chunk.owner\n             path += \"/\"\n-            path += rdw_helpers.quote_url(chunk.path.strip(b\"/\"))\n+            path += rdw_helpers.quote_url(chunk.repopath.strip(\"/\"))\n         elif hasattr(chunk, 'path'):\n             # This is a DirEntry\n             if chunk.path:"
        },
        {
          "filename": "rdiffweb/core/tests/test_librdiff.py",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -52,7 +52,7 @@\n class MockRdiffRepo(RdiffRepo):\n     def __init__(self):\n         p = bytes(pkg_resources.resource_filename('rdiffweb.core', 'tests'), encoding='utf-8')  # @UndefinedVariable\n-        RdiffRepo.__init__(self, os.path.dirname(p), os.path.basename(p), encoding='utf-8')\n+        RdiffRepo.__init__(self, p, encoding='utf-8')\n         self.root_path = MockDirEntry(self)\n \n \n@@ -221,7 +221,7 @@ def setUp(self):\n         # Define location of testcases\n         self.testcases_dir = os.path.normpath(os.path.join(self.temp_dir, 'testcases'))\n         self.testcases_dir = self.testcases_dir.encode('utf8')\n-        self.repo = RdiffRepo(self.temp_dir, b'testcases', encoding='utf-8')\n+        self.repo = RdiffRepo(os.path.join(self.temp_dir, 'testcases'), encoding='utf-8')\n \n     def tearDown(self):\n         shutil.rmtree(self.temp_dir.encode('utf8'), True)\n@@ -230,14 +230,13 @@ def test_init(self):\n         self.assertEqual('testcases', self.repo.display_name)\n \n     def test_init_with_absolute(self):\n-        self.repo = RdiffRepo(self.temp_dir, '/testcases', encoding='utf-8')\n+        self.repo = RdiffRepo(os.path.join(self.temp_dir, '/testcases'), encoding='utf-8')\n         self.assertEqual('testcases', self.repo.display_name)\n \n     def test_init_with_invalid(self):\n-        self.repo = RdiffRepo(self.temp_dir, 'invalid', encoding='utf-8')\n+        self.repo = RdiffRepo(os.path.join(self.temp_dir, 'invalid'), encoding='utf-8')\n         self.assertEqual('failed', self.repo.status[0])\n         self.assertEqual(None, self.repo.last_backup_date)\n-        self.assertEqual(b'invalid', self.repo.path)\n         self.assertEqual('invalid', self.repo.display_name)\n \n     @parameterized.expand(\n@@ -534,7 +533,7 @@ def test_status_access_denied_current_mirror(self):\n             0000,\n         )\n         # Create repo again to query status\n-        self.repo = RdiffRepo(self.temp_dir, b'testcases', encoding='utf-8')\n+        self.repo = RdiffRepo(os.path.join(self.temp_dir, 'testcases'), encoding='utf-8')\n         status = self.repo.status\n         self.assertEqual('failed', status[0])\n \n@@ -545,7 +544,7 @@ def test_status_access_denied_rdiff_backup_data(self):\n         # Change the permissions of the files.\n         os.chmod(os.path.join(self.testcases_dir, b'rdiff-backup-data'), 0000)\n         # Query status.\n-        self.repo = RdiffRepo(self.temp_dir, b'testcases', encoding='utf-8')\n+        self.repo = RdiffRepo(os.path.join(self.temp_dir, 'testcases'), encoding='utf-8')\n         status = self.repo.status\n         self.assertEqual('failed', status[0])\n         # Make sure history entry doesn't raise error"
        },
        {
          "filename": "tox.ini",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -98,10 +98,14 @@ skip_install = true\n \n [flake8]\n ignore =\n-  E203 # whitespace before ':'\n-  E501 # line too long (86 > 79 characters)\n-  W503 # line break before binary operator\n-  E741 # ambiguous variable name 'I'\n+  # whitespace before ':'\n+  E203\n+  # line too long (86 > 79 characters)\n+  E501\n+  # line break before binary operator\n+  W503\n+  # ambiguous variable name 'I'\n+  E741\n filename =\n   *.py\n   setup.py"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb9b10fde29c125a7641a8daad96976bd2cf1307",
            "date": "2024-11-20T02:02:20Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9becf16f0a96fad246021256de58a204318687b8",
            "date": "2024-11-09T12:27:19Z",
            "author_login": "ikus060"
          },
          {
            "sha": "3364f0644d62590b65ad6610d74139edc8a1740f",
            "date": "2024-11-05T20:54:35Z",
            "author_login": "ikus060"
          },
          {
            "sha": "a96f583797b65a8f68d3780c1ed470c7989a56dc",
            "date": "2024-10-24T19:17:53Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9fad72d2a19b78be1e5b9dcd4e880e3f7496dbd0",
            "date": "2024-10-24T18:13:13Z",
            "author_login": "ikus060"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-269",
    "description": "Improper Privilege Management in GitHub repository ikus060/rdiffweb prior to 2.5.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-12T18:15:13.473",
    "last_modified": "2024-11-21T07:35:00.987",
    "fix_date": "2022-11-24T18:21:05Z"
  },
  "references": [
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/b2df3679564d0daa2856213bb307d3e34bd89a25",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b2dc504d-92ae-4221-a096-12ff223d95a8",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/b2df3679564d0daa2856213bb307d3e34bd89a25",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b2dc504d-92ae-4221-a096-12ff223d95a8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.224680",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rdiffweb",
    "owner": "ikus060",
    "created_at": "2012-10-22T14:14:23Z",
    "updated_at": "2025-01-12T13:25:42Z",
    "pushed_at": "2025-01-07T15:16:06Z",
    "size": 25971,
    "stars": 124,
    "forks": 28,
    "open_issues": 1,
    "watchers": 124,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 857869,
      "HTML": 104946,
      "JavaScript": 7655,
      "Shell": 3945,
      "CSS": 3081,
      "Dockerfile": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:43.805427"
  }
}