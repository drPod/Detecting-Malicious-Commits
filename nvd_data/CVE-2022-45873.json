{
  "cve_id": "CVE-2022-45873",
  "github_data": {
    "repository": "systemd/systemd",
    "fix_commit": "076b807be472630692c5348c60d0c2b7b28ad437",
    "related_commits": [
      "076b807be472630692c5348c60d0c2b7b28ad437",
      "076b807be472630692c5348c60d0c2b7b28ad437"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "076b807be472630692c5348c60d0c2b7b28ad437",
      "commit_date": "2022-10-18T16:23:53Z",
      "author": {
        "login": "keszybz",
        "type": "User",
        "stats": {
          "total_commits": 10669,
          "average_weekly_commits": 9.366988586479367,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 601
        }
      },
      "commit_message": {
        "title": "coredump: avoid deadlock when passing processed backtrace data",
        "length": 1181,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 37,
        "additions": 31,
        "deletions": 6
      },
      "files": [
        {
          "filename": "src/shared/elf-util.c",
          "status": "modified",
          "additions": 31,
          "deletions": 6,
          "patch": "@@ -30,6 +30,9 @@\n #define THREADS_MAX 64\n #define ELF_PACKAGE_METADATA_ID 0xcafe1a7e\n \n+/* The amount of data we're willing to write to each of the output pipes. */\n+#define COREDUMP_PIPE_MAX (1024*1024U)\n+\n static void *dw_dl = NULL;\n static void *elf_dl = NULL;\n \n@@ -759,13 +762,13 @@ int parse_elf_object(int fd, const char *executable, bool fork_disable_dump, cha\n                 return r;\n \n         if (ret) {\n-                r = RET_NERRNO(pipe2(return_pipe, O_CLOEXEC));\n+                r = RET_NERRNO(pipe2(return_pipe, O_CLOEXEC|O_NONBLOCK));\n                 if (r < 0)\n                         return r;\n         }\n \n         if (ret_package_metadata) {\n-                r = RET_NERRNO(pipe2(json_pipe, O_CLOEXEC));\n+                r = RET_NERRNO(pipe2(json_pipe, O_CLOEXEC|O_NONBLOCK));\n                 if (r < 0)\n                         return r;\n         }\n@@ -809,8 +812,24 @@ int parse_elf_object(int fd, const char *executable, bool fork_disable_dump, cha\n                         goto child_fail;\n \n                 if (buf) {\n-                        r = loop_write(return_pipe[1], buf, strlen(buf), false);\n-                        if (r < 0)\n+                        size_t len = strlen(buf);\n+\n+                        if (len > COREDUMP_PIPE_MAX) {\n+                                /* This is iffy. A backtrace can be a few hundred kilobytes, but too much is\n+                                 * too much. Let's log a warning and ignore the rest. */\n+                                log_warning(\"Generated backtrace is %zu bytes (more than the limit of %u bytes), backtrace will be truncated.\",\n+                                            len, COREDUMP_PIPE_MAX);\n+                                len = COREDUMP_PIPE_MAX;\n+                        }\n+\n+                        /* Bump the space for the returned string.\n+                         * Failure is ignored, because partial output is still useful. */\n+                        (void) fcntl(return_pipe[1], F_SETPIPE_SZ, len);\n+\n+                        r = loop_write(return_pipe[1], buf, len, false);\n+                        if (r == -EAGAIN)\n+                                log_warning(\"Write failed, backtrace will be truncated.\");\n+                        else if (r < 0)\n                                 goto child_fail;\n \n                         return_pipe[1] = safe_close(return_pipe[1]);\n@@ -819,13 +838,19 @@ int parse_elf_object(int fd, const char *executable, bool fork_disable_dump, cha\n                 if (package_metadata) {\n                         _cleanup_fclose_ FILE *json_out = NULL;\n \n+                        /* Bump the space for the returned string. We don't know how much space we'll need in\n+                         * advance, so we'll just try to write as much as possible and maybe fail later. */\n+                        (void) fcntl(json_pipe[1], F_SETPIPE_SZ, COREDUMP_PIPE_MAX);\n+\n                         json_out = take_fdopen(&json_pipe[1], \"w\");\n                         if (!json_out) {\n                                 r = -errno;\n                                 goto child_fail;\n                         }\n \n-                        json_variant_dump(package_metadata, JSON_FORMAT_FLUSH, json_out, NULL);\n+                        r = json_variant_dump(package_metadata, JSON_FORMAT_FLUSH, json_out, NULL);\n+                        if (r < 0)\n+                                log_warning_errno(r, \"Failed to write JSON package metadata, ignoring: %m\");\n                 }\n \n                 _exit(EXIT_SUCCESS);\n@@ -860,7 +885,7 @@ int parse_elf_object(int fd, const char *executable, bool fork_disable_dump, cha\n \n                 r = json_parse_file(json_in, NULL, 0, &package_metadata, NULL, NULL);\n                 if (r < 0 && r != -ENODATA) /* ENODATA: json was empty, so we got nothing, but that's ok */\n-                        return r;\n+                        log_warning_errno(r, \"Failed to read or parse json metadata, ignoring: %m\");\n         }\n \n         if (ret)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ba0266b376d7cc5205d8a4a3d999aec13c24fe5d",
            "date": "2025-01-26T00:41:25Z",
            "author_login": "yuwata"
          },
          {
            "sha": "ff83795469a20af02a9bf3285992128799b16302",
            "date": "2025-01-25T19:42:54Z",
            "author_login": "DaanDeMeyer"
          },
          {
            "sha": "fc55da3d7c6fe7efa18f4341f581ef0c4f41803b",
            "date": "2025-01-26T00:35:42Z",
            "author_login": "yuwata"
          },
          {
            "sha": "126f545a010ad4304fbcfb45c6893e7cb2f430fb",
            "date": "2025-01-25T10:49:44Z",
            "author_login": "bluca"
          },
          {
            "sha": "829f57003d50634f28349f1ec6460421532ef318",
            "date": "2025-01-25T01:20:47Z",
            "author_login": "bluca"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "systemd 250 and 251 allows local users to achieve a systemd-coredump deadlock by triggering a crash that has a long backtrace. This occurs in parse_elf_object in shared/elf-util.c. The exploitation methodology is to crash a binary calling the same function recursively, and put it in a deeply nested directory to make its backtrace large enough to cause the deadlock. This must be done 16 times when MaxConnections=16 is set for the systemd/units/systemd-coredump.socket file.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-23T23:15:10.183",
    "last_modified": "2024-11-21T07:29:52.680",
    "fix_date": "2022-10-18T16:23:53Z"
  },
  "references": [
    {
      "url": "https://github.com/systemd/systemd/commit/076b807be472630692c5348c60d0c2b7b28ad437",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/systemd/systemd/pull/24853#issuecomment-1326561497",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/systemd/systemd/pull/25055#issuecomment-1313733553",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/MS5N5SLYAHKENLAJWYBDKU55ICU3SVZF/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/systemd/systemd/commit/076b807be472630692c5348c60d0c2b7b28ad437",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/systemd/systemd/pull/24853#issuecomment-1326561497",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/systemd/systemd/pull/25055#issuecomment-1313733553",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/MS5N5SLYAHKENLAJWYBDKU55ICU3SVZF/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.163927",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "systemd",
    "owner": "systemd",
    "created_at": "2015-03-25T15:27:27Z",
    "updated_at": "2025-01-26T05:23:43Z",
    "pushed_at": "2025-01-26T03:32:33Z",
    "size": 453297,
    "stars": 13622,
    "forks": 3869,
    "open_issues": 2668,
    "watchers": 13622,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v256-stable",
      "v257-stable"
    ],
    "languages": {
      "C": 35004897,
      "Python": 2093846,
      "Shell": 1613972,
      "Meson": 464158,
      "SmPL": 32042,
      "HTML": 23536,
      "C++": 10999,
      "Awk": 2537,
      "Emacs Lisp": 1187,
      "Vim Script": 825,
      "Dockerfile": 156,
      "GDB": 92,
      "sed": 72
    },
    "commit_activity": {
      "total_commits_last_year": 8104,
      "avg_commits_per_week": 155.84615384615384,
      "days_active_last_year": 356
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:43:18.070327"
  }
}