{
  "cve_id": "CVE-2022-4589",
  "github_data": {
    "repository": "cyface/django-termsandconditions",
    "fix_commit": "03396a1c2e0af95e12a45c5faef7e47a4b513e1a",
    "related_commits": [
      "03396a1c2e0af95e12a45c5faef7e47a4b513e1a",
      "03396a1c2e0af95e12a45c5faef7e47a4b513e1a"
    ],
    "patch_url": "https://github.com/cyface/django-termsandconditions/commit/03396a1c2e0af95e12a45c5faef7e47a4b513e1a.patch",
    "fix_commit_details": {
      "sha": "03396a1c2e0af95e12a45c5faef7e47a4b513e1a",
      "commit_date": "2022-06-20T20:27:46Z",
      "author": {
        "login": "amarsahinovic",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix open redirect vulnerability",
        "length": 31,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 63,
        "additions": 45,
        "deletions": 18
      },
      "files": [
        {
          "filename": "termsandconditions/tests.py",
          "status": "modified",
          "additions": 18,
          "deletions": 9,
          "patch": "@@ -242,7 +242,7 @@ def test_accept(self):\n         )\n         self.assertContains(accept_version_post_response, \"Secure\")\n \n-    def test_accept_redirect_safe(self):\n+    def _post_accept(self, return_to):\n         # Pre-accept terms 2 and 3\n         UserTermsAndConditions.objects.create(user=self.user1, terms=self.terms2)\n         UserTermsAndConditions.objects.create(user=self.user1, terms=self.terms3)\n@@ -253,19 +253,28 @@ def test_accept_redirect_safe(self):\n \n         LOGGER.debug(\"Test /terms/accept/site-terms/1/ post\")\n         accept_response = self.client.post(\n-            \"/terms/accept/\", {\"terms\": 1, \"returnTo\": \"/secure/\"}, follow=True\n+            \"/terms/accept/\", {\"terms\": 1, \"returnTo\": return_to}, follow=True\n         )\n+        return accept_response\n+\n+    def test_accept_redirect_safe(self):\n+        accept_response = self._post_accept(\"/secure/\")\n         self.assertRedirects(accept_response, \"/secure/\")\n \n     def test_accept_redirect_unsafe(self):\n-        # Pre-accept terms 2 and 3\n-        UserTermsAndConditions.objects.create(user=self.user1, terms=self.terms2)\n-        UserTermsAndConditions.objects.create(user=self.user1, terms=self.terms3)\n+        accept_response = self._post_accept(\"http://attacker/\")\n+        self.assertRedirects(accept_response, \"/\")\n \n-        LOGGER.debug(\"Test /terms/accept/contrib-terms/3/ post\")\n-        accept_response = self.client.post(\n-            \"/terms/accept/\", {\"terms\": 3, \"returnTo\": \"http://attacker/\"}, follow=False\n-        )\n+    def test_accept_redirect_unsafe_2(self):\n+        accept_response = self._post_accept(\"//attacker.com\")\n+        self.assertRedirects(accept_response, \"/\")\n+\n+    def test_accept_redirect_unsafe_3(self):\n+        accept_response = self._post_accept(\"///attacker.com\")\n+        self.assertRedirects(accept_response, \"/\")\n+\n+    def test_accept_redirect_unsafe_4(self):\n+        accept_response = self._post_accept(\"////attacker.com\")\n         self.assertRedirects(accept_response, \"/\")\n \n     def test_accept_store_ip_address(self):"
        },
        {
          "filename": "termsandconditions/views.py",
          "status": "modified",
          "additions": 27,
          "deletions": 9,
          "patch": "@@ -14,6 +14,7 @@\n from django.utils.translation import gettext as _\n from django.views.generic import DetailView, CreateView, FormView\n from django.template.loader import get_template\n+from django.utils.encoding import iri_to_uri\n import logging\n from smtplib import SMTPException\n \n@@ -44,6 +45,28 @@ def get_terms(self, kwargs):\n             terms = TermsAndConditions.get_active_terms_not_agreed_to(self.request.user)\n         return terms\n \n+    def get_return_to(self, from_dict):\n+        return_to = from_dict.get(\"returnTo\", \"/\")\n+\n+        if self.is_safe_url(return_to):\n+            # Django recommends to use this together with the helper above\n+            return iri_to_uri(return_to)\n+\n+        LOGGER.debug(\"Unsafe URL found: {}\".format(return_to))\n+        return \"/\"\n+\n+    def is_safe_url(self, url):\n+        # In Django 3.0 is_safe_url is renamed, so we import conditionally:\n+        # https://docs.djangoproject.com/en/3.2/releases/3.0/#id3\n+        try:\n+            from django.utils.http import url_has_allowed_host_and_scheme\n+        except ImportError:\n+            from django.utils.http import (\n+                is_safe_url as url_has_allowed_host_and_scheme,\n+            )\n+\n+        return url_has_allowed_host_and_scheme(url, settings.ALLOWED_HOSTS)\n+\n \n class AcceptTermsView(CreateView, GetTermsViewMixin):\n     \"\"\"\n@@ -69,22 +92,17 @@ def get_initial(self):\n         LOGGER.debug(\"termsandconditions.views.AcceptTermsView.get_initial\")\n \n         terms = self.get_terms(self.kwargs)\n-        return_to = self.request.GET.get(\"returnTo\", \"/\")\n+        return_to = self.get_return_to(self.request.GET)\n \n         return {\"terms\": terms, \"returnTo\": return_to}\n \n     def post(self, request, *args, **kwargs):\n         \"\"\"\n         Handles POST request.\n         \"\"\"\n-        return_url = request.POST.get(\"returnTo\", \"/\")\n+        return_url = self.get_return_to(self.request.POST)\n         terms_ids = request.POST.getlist(\"terms\")\n \n-        parsed = urlparse(return_url)\n-        if parsed.hostname and parsed.hostname not in settings.ALLOWED_HOSTS:\n-            # Make sure the return url is a relative path or a trusted hostname\n-            return_url = '/'\n-\n         if not terms_ids:  # pragma: nocover\n             return HttpResponseRedirect(return_url)\n \n@@ -147,7 +165,7 @@ def get_initial(self):\n \n         terms = self.get_terms(self.kwargs)\n \n-        return_to = self.request.GET.get(\"returnTo\", \"/\")\n+        return_to = self.get_return_to(self.request.GET)\n \n         return {\"terms\": terms, \"returnTo\": return_to}\n \n@@ -179,7 +197,7 @@ def form_valid(self, form):\n                 _(\"An Error Occurred Sending Your Message.\"),\n             )\n \n-        self.success_url = form.cleaned_data.get(\"returnTo\", \"/\") or \"/\"\n+        self.success_url = self.get_return_to(form.cleaned_data)\n \n         return super().form_valid(form)\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8a2902539f51985ff81574f1f86cff8e464d6b12",
            "date": "2025-01-10T18:21:11Z",
            "author_login": "cyface"
          },
          {
            "sha": "8196dbda27b4bc7b26b121f08bddd816c193bc18",
            "date": "2025-01-10T12:54:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b7ce32c2ffd23f82a8bc2074aea5263f4b541278",
            "date": "2025-01-02T14:04:35Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "500d8b87eef08fda55c025f133907f95ff92a27d",
            "date": "2025-01-02T14:04:34Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b8fb8ffc7fe9cd9da0b895f65586eb05251468e4",
            "date": "2025-01-02T12:50:01Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-601",
    "description": "A vulnerability has been found in cyface Terms and Conditions Module up to 2.0.9 and classified as problematic. Affected by this vulnerability is the function returnTo of the file termsandconditions/views.py. The manipulation leads to open redirect. The attack can be launched remotely. Upgrading to version 2.0.10 is able to address this issue. The name of the patch is 03396a1c2e0af95e12a45c5faef7e47a4b513e1a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216175.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-17T13:15:09.883",
    "last_modified": "2024-11-21T07:35:33.073",
    "fix_date": "2022-06-20T20:27:46Z"
  },
  "references": [
    {
      "url": "https://github.com/cyface/django-termsandconditions/commit/03396a1c2e0af95e12a45c5faef7e47a4b513e1a",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyface/django-termsandconditions/pull/239",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyface/django-termsandconditions/releases/tag/v2.0.10",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216175",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyface/django-termsandconditions/commit/03396a1c2e0af95e12a45c5faef7e47a4b513e1a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyface/django-termsandconditions/pull/239",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyface/django-termsandconditions/releases/tag/v2.0.10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216175",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.176515",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "django-termsandconditions",
    "owner": "cyface",
    "created_at": "2012-07-05T17:21:17Z",
    "updated_at": "2025-01-10T18:21:19Z",
    "pushed_at": "2025-01-10T18:21:16Z",
    "size": 1296,
    "stars": 108,
    "forks": 54,
    "open_issues": 0,
    "watchers": 108,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 73033,
      "HTML": 13805,
      "CSS": 1947,
      "Dockerfile": 550,
      "JavaScript": 268
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T22:06:07.965553"
  }
}