{
  "cve_id": "CVE-2022-45907",
  "github_data": {
    "repository": "pytorch/pytorch",
    "fix_commit": "767f6aa49fe20a2766b9843d01e3b7f7793df6a3",
    "related_commits": [
      "767f6aa49fe20a2766b9843d01e3b7f7793df6a3",
      "767f6aa49fe20a2766b9843d01e3b7f7793df6a3"
    ],
    "patch_url": "https://github.com/pytorch/pytorch/commit/767f6aa49fe20a2766b9843d01e3b7f7793df6a3.patch",
    "fix_commit_details": {
      "sha": "767f6aa49fe20a2766b9843d01e3b7f7793df6a3",
      "commit_date": "2022-11-17T22:05:27Z",
      "author": {
        "login": "malfet",
        "type": "User",
        "stats": {
          "total_commits": 2313,
          "average_weekly_commits": 3.5694444444444446,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 257
        }
      },
      "commit_message": {
        "title": "[JIT][Security] Do not blindly eval input string (#89189)",
        "length": 611,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 21,
        "deletions": 3
      },
      "files": [
        {
          "filename": "test/test_jit.py",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -3951,6 +3951,14 @@ def invalid4(a):\n                 return a + 2\n             torch.jit.script(invalid4)\n \n+    def test_calls_in_type_annotations(self):\n+        with self.assertRaisesRegex(RuntimeError, \"Type annotation should not contain calls\"):\n+            def spooky(a):\n+                # type: print(\"Hello\") -> Tensor # noqa: F723\n+                return a + 2\n+            print(torch.__file__)\n+            torch.jit.annotations.get_signature(spooky, None, 1, True)\n+\n     def test_is_optional(self):\n         ann = Union[List[int], List[float]]\n         torch._jit_internal.is_optional(ann)"
        },
        {
          "filename": "torch/csrc/jit/frontend/script_type_parser.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -316,7 +316,7 @@ std::vector<IValue> ScriptTypeParser::evaluateDefaults(\n   // We then run constant prop on this graph and check the results are\n   // constant. This approach avoids having to have separate handling of\n   // default arguments from standard expressions by piecing together existing\n-  // machinery for graph generation, constant propgation, and constant\n+  // machinery for graph generation, constant propagation, and constant\n   // extraction.\n   auto tuple_type = Subscript::create(\n       r,"
        },
        {
          "filename": "torch/jit/annotations.py",
          "status": "modified",
          "additions": 12,
          "deletions": 2,
          "patch": "@@ -1,4 +1,5 @@\n import ast\n+import dis\n import enum\n import inspect\n import re\n@@ -144,6 +145,15 @@ def check_fn(fn, loc):\n         raise torch.jit.frontend.FrontendError(loc, \"Expected a single top-level function\")\n \n \n+def _eval_no_call(stmt, glob, loc):\n+    \"\"\"Evaluate statement as long as it does not contain any method/function calls\"\"\"\n+    bytecode = compile(stmt, \"\", mode=\"eval\")\n+    for insn in dis.get_instructions(bytecode):\n+        if \"CALL\" in insn.opname:\n+            raise RuntimeError(f\"Type annotation should not contain calls, but '{stmt}' does\")\n+    return eval(bytecode, glob, loc)  # type: ignore[arg-type] # noqa: P204\n+\n+\n def parse_type_line(type_line, rcb, loc):\n     \"\"\"Parses a type annotation specified as a comment.\n \n@@ -154,15 +164,15 @@ def parse_type_line(type_line, rcb, loc):\n     arg_ann_str, ret_ann_str = split_type_line(type_line)\n \n     try:\n-        arg_ann = eval(arg_ann_str, {}, EvalEnv(rcb))  # type: ignore[arg-type] # noqa: P204\n+        arg_ann = _eval_no_call(arg_ann_str, {}, EvalEnv(rcb))\n     except (NameError, SyntaxError) as e:\n         raise RuntimeError(\"Failed to parse the argument list of a type annotation\") from e\n \n     if not isinstance(arg_ann, tuple):\n         arg_ann = (arg_ann,)\n \n     try:\n-        ret_ann = eval(ret_ann_str, {}, EvalEnv(rcb))  # type: ignore[arg-type] # noqa: P204\n+        ret_ann = _eval_no_call(ret_ann_str, {}, EvalEnv(rcb))\n     except (NameError, SyntaxError) as e:\n         raise RuntimeError(\"Failed to parse the return type of a type annotation\") from e\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bdd942efd76e74baa5dd0a262f7c843ddfe2e11b",
            "date": "2025-01-14T19:04:12Z",
            "author_login": "pytorchmergebot"
          },
          {
            "sha": "b4b4e574691ddcf538b483b947e27c6d1ba75e1c",
            "date": "2025-01-14T19:01:26Z",
            "author_login": "chuanqi129"
          },
          {
            "sha": "2683691237570a203f6e7b59ea504ab352f6c3d5",
            "date": "2025-01-14T14:53:53Z",
            "author_login": "desertfire"
          },
          {
            "sha": "e2891d43a8b68f117370984cbac900ce8a15d4f4",
            "date": "2025-01-14T18:34:54Z",
            "author_login": "r-barnes"
          },
          {
            "sha": "ec1c3ab3b28143c6e0392352c1c62ae0513ba024",
            "date": "2025-01-14T18:02:57Z",
            "author_login": "kundaMwiza"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-11-26T02:15:10.253",
    "last_modified": "2024-11-21T07:29:55.427",
    "fix_date": "2022-11-17T22:05:27Z"
  },
  "references": [
    {
      "url": "https://github.com/pytorch/pytorch/commit/767f6aa49fe20a2766b9843d01e3b7f7793df6a3",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pytorch/pytorch/issues/88868",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pytorch/pytorch/commit/767f6aa49fe20a2766b9843d01e3b7f7793df6a3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pytorch/pytorch/issues/88868",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.169751",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pytorch",
    "owner": "pytorch",
    "created_at": "2016-08-13T05:26:41Z",
    "updated_at": "2025-01-14T16:00:32Z",
    "pushed_at": "2025-01-14T16:15:59Z",
    "size": 1016876,
    "stars": 85832,
    "forks": 23112,
    "open_issues": 15457,
    "watchers": 85832,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 65937047,
      "C++": 40832565,
      "Cuda": 3440527,
      "C": 1784431,
      "Objective-C++": 1320301,
      "CMake": 808687,
      "Shell": 536307,
      "Assembly": 336348,
      "Starlark": 324382,
      "GLSL": 204577,
      "Jupyter Notebook": 183407,
      "Java": 135037,
      "Metal": 126611,
      "JavaScript": 91254,
      "Batchfile": 71927,
      "Objective-C": 53484,
      "Dockerfile": 49640,
      "Makefile": 11118,
      "PowerShell": 6523,
      "Thrift": 6046,
      "Ruby": 2774,
      "HTML": 689,
      "GDB": 653,
      "Smarty": 376,
      "CSS": 212,
      "Vim Script": 154
    },
    "commit_activity": {
      "total_commits_last_year": 14819,
      "avg_commits_per_week": 284.9807692307692,
      "days_active_last_year": 360
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:30:37.407231"
  }
}