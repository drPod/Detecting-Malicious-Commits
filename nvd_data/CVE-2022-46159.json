{
  "cve_id": "CVE-2022-46159",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "0ce38bd7bce862db251b882613ab7053ca777382",
    "related_commits": [
      "0ce38bd7bce862db251b882613ab7053ca777382",
      "0ce38bd7bce862db251b882613ab7053ca777382"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/0ce38bd7bce862db251b882613ab7053ca777382.patch",
    "fix_commit_details": {
      "sha": "0ce38bd7bce862db251b882613ab7053ca777382",
      "commit_date": "2022-12-01T10:26:35Z",
      "author": {
        "login": "s3lase",
        "type": "User",
        "stats": {
          "total_commits": 55,
          "average_weekly_commits": 0.07936507936507936,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 37
        }
      },
      "commit_message": {
        "title": "SECURITY: Restrict unlisted topic creation (#19259)",
        "length": 51,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 129,
        "additions": 128,
        "deletions": 1
      },
      "files": [
        {
          "filename": "config/locales/server.en.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -589,6 +589,7 @@ en:\n               target_user_not_found: \"One of the users you are sending this message to could not be found.\"\n               unable_to_update: \"There was an error updating that topic.\"\n               unable_to_tag: \"There was an error tagging the topic.\"\n+              unable_to_unlist: \"Sorry, you cannot create an unlisted topic.\"\n             featured_link:\n               invalid: \"is invalid. URL should include http:// or https://.\"\n         user:"
        },
        {
          "filename": "lib/guardian/topic_guardian.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -181,6 +181,8 @@ def can_toggle_topic_visibility?(topic)\n     can_moderate?(topic) || can_perform_action_available_to_group_moderators?(topic)\n   end\n \n+  alias :can_create_unlisted_topic? :can_toggle_topic_visibility?\n+\n   def can_convert_topic?(topic)\n     return false unless @user.in_any_groups?(SiteSetting.personal_message_enabled_groups_map)\n     return false if topic.blank?"
        },
        {
          "filename": "lib/topic_creator.rb",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -24,6 +24,8 @@ def valid?\n     # this allows us to add errors\n     valid = topic.valid?\n \n+    validate_visibility(topic)\n+\n     category = find_category\n     if category.present? && guardian.can_tag?(topic)\n       tags = @opts[:tags].presence || []\n@@ -46,6 +48,8 @@ def valid?\n \n   def create\n     topic = Topic.new(setup_topic_params)\n+\n+    validate_visibility!(topic)\n     setup_tags(topic)\n \n     if fields = @opts[:custom_fields]\n@@ -67,6 +71,18 @@ def create\n \n   private\n \n+  def validate_visibility(topic)\n+    if !@opts[:skip_validations] && !topic.visible && !guardian.can_create_unlisted_topic?(topic)\n+      topic.errors.add(:base, :unable_to_unlist)\n+    end\n+  end\n+\n+  def validate_visibility!(topic)\n+    validate_visibility(topic)\n+\n+    rollback_from_errors!(topic) if topic.errors.full_messages.present?\n+  end\n+\n   def create_shared_draft(topic)\n     return if @opts[:shared_draft].blank? || @opts[:shared_draft] == 'false'\n \n@@ -302,5 +318,4 @@ def find_or_create_user(email, display_name)\n \n     user\n   end\n-\n end"
        },
        {
          "filename": "spec/lib/guardian/topic_guardian_spec.rb",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -132,6 +132,22 @@\n     end\n   end\n \n+  describe \"#can_create_unlisted_topic?\" do\n+    it \"returns true for moderators\" do\n+      expect(Guardian.new(moderator).can_create_unlisted_topic?(topic)).to eq(true)\n+    end\n+\n+    it \"returns true for TL4 users\" do\n+      tl4_user = Fabricate(:user, trust_level: TrustLevel[4])\n+\n+      expect(Guardian.new(tl4_user).can_create_unlisted_topic?(topic)).to eq(true)\n+    end\n+\n+    it \"returns false for regular users\" do\n+      expect(Guardian.new(user).can_create_unlisted_topic?(topic)).to eq(false)\n+    end\n+  end\n+\n   # The test cases here are intentionally kept brief because majority of the cases are already handled by\n   # `TopicGuardianCanSeeConsistencyCheck` which we run to ensure that the implementation between `TopicGuardian#can_see_topic_ids`\n   # and `TopicGuardian#can_see_topic?` is consistent."
        },
        {
          "filename": "spec/lib/topic_creator_spec.rb",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -518,5 +518,27 @@\n         expect(topic.external_id).to eq('external_id')\n       end\n     end\n+\n+    context \"when invisible/unlisted\" do\n+      let(:unlisted_attrs) { valid_attrs.merge(visible: false) }\n+\n+      it \"throws an exception for a non-staff user\" do\n+        expect do\n+          TopicCreator.create(user, Guardian.new(user), unlisted_attrs)\n+        end.to raise_error(ActiveRecord::Rollback)\n+      end\n+\n+      it \"is invalid for a non-staff user\" do\n+        expect(TopicCreator.new(user, Guardian.new(user), unlisted_attrs).valid?).to eq(false)\n+      end\n+\n+      it \"creates unlisted topic for an admin\" do\n+        expect(TopicCreator.create(admin, Guardian.new(admin), unlisted_attrs)).to be_valid\n+      end\n+\n+      it \"is valid for an admin\" do\n+        expect(TopicCreator.new(admin, Guardian.new(admin), unlisted_attrs).valid?).to eq(true)\n+      end\n+    end\n   end\n end"
        },
        {
          "filename": "spec/requests/posts_controller_spec.rb",
          "status": "modified",
          "additions": 71,
          "deletions": 0,
          "patch": "@@ -923,6 +923,34 @@\n \n         expect(response.status).to eq(422)\n       end\n+\n+      it \"creates unlisted topic with admin master key\" do\n+        master_key = Fabricate(:api_key).key\n+\n+        expect do\n+          post \"/posts.json\",\n+            params: { raw: \"this is a test title\", title: \"this is test body\", unlist_topic: true },\n+            headers: { HTTP_API_USERNAME: admin.username, HTTP_API_KEY: master_key }\n+        end.to change { Topic.count }.by(1)\n+\n+        expect(response.status).to eq(200)\n+        expect(Topic.find(response.parsed_body[\"topic_id\"]).visible).to eq(false)\n+      end\n+\n+      it \"prevents creation of unlisted topic with non-admin key\" do\n+        user_key = ApiKey.create!(user: user).key\n+\n+        expect do\n+          post \"/posts.json\",\n+            params: { raw: \"this is a test title\", title: \"this is test body\", unlist_topic: true },\n+            headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: user_key }\n+        end.not_to change { Topic.count }\n+\n+        expect(response.status).to eq(422)\n+        expect(response.parsed_body[\"errors\"]).to include(\n+          I18n.t(\"activerecord.errors.models.topic.attributes.base.unable_to_unlist\")\n+        )\n+      end\n     end\n \n     describe \"when logged in\" do\n@@ -1250,6 +1278,7 @@\n         expect(topic.title).to eq('This is the test title for the topic')\n         expect(topic.category).to eq(category)\n         expect(topic.meta_data).to eq(\"xyz\" => 'abc')\n+        expect(topic.visible).to eq(true)\n       end\n \n       it 'can create an uncategorized topic' do\n@@ -1411,6 +1440,48 @@\n       end\n     end\n \n+    context \"with topic unlisting\" do\n+      context \"when logged in as staff\" do\n+        before do\n+          sign_in(admin)\n+        end\n+\n+        it \"creates an unlisted topic\" do\n+          expect do\n+            post \"/posts.json\", params: {\n+              raw: \"this is the test content\",\n+              title: \"this is the test title for the topic\",\n+              unlist_topic: true\n+            }\n+          end.to change { Topic.count }.by(1)\n+\n+          expect(response.status).to eq(200)\n+          expect(Topic.find(response.parsed_body[\"topic_id\"]).visible).to eq(false)\n+        end\n+      end\n+\n+      context \"when logged in as a non-staff user\" do\n+        before do\n+          sign_in(user)\n+        end\n+\n+        it \"prevents creation of an unlisted topic\" do\n+          expect do\n+            post \"/posts.json\", params: {\n+              raw: \"this is the test content\",\n+              title: \"this is the test title for the topic\",\n+              unlist_topic: true\n+            }\n+          end.not_to change { Topic.count }\n+\n+          expect(response.status).to eq(422)\n+          expect(response.parsed_body[\"errors\"]).to include(\n+            I18n.t(\"activerecord.errors.models.topic.attributes.base.unable_to_unlist\")\n+          )\n+        end\n+      end\n+    end\n+\n     describe 'shared draft' do\n       fab!(:destination_category) { Fabricate(:category) }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f8c493f3c4ee5e38dff460288996c780a6458e29",
            "date": "2025-01-14T12:47:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6cb8b576d0c7902b99cbb39bc7aaa473d454118a",
            "date": "2025-01-14T12:46:14Z",
            "author_login": "CvX"
          },
          {
            "sha": "12c412acc699ac47bd98c999a483ced96888f799",
            "date": "2025-01-14T12:35:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3e14f1c9f9098c6dfc33ef122e7b3878a0c4d0e1",
            "date": "2025-01-14T09:55:29Z",
            "author_login": "tyb-talks"
          },
          {
            "sha": "33ea3599c2e22b413826459d2d0bd1086ef36c49",
            "date": "2025-01-14T07:37:36Z",
            "author_login": "dbattersby"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-770",
    "description": "Discourse is an open-source discussion platform. In version 2.8.13 and prior on the `stable` branch and version 2.9.0.beta14 and prior on the `beta` and `tests-passed` branches, any authenticated user can create an unlisted topic. These topics, which are not readily available to other users, can take up unnecessary site resources. A patch for this issue is available in the `main` branch of Discourse. There are no known workarounds available.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-02T15:15:10.090",
    "last_modified": "2024-11-21T07:30:13.710",
    "fix_date": "2022-12-01T10:26:35Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/0ce38bd7bce862db251b882613ab7053ca777382",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-qf99-xpx6-hgxp",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/0ce38bd7bce862db251b882613ab7053ca777382",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-qf99-xpx6-hgxp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.187835",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}