{
  "cve_id": "CVE-2022-46166",
  "github_data": {
    "repository": "codecentric/spring-boot-admin",
    "fix_commit": "c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
    "related_commits": [
      "c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
      "c14c3ec12533f71f84de9ce3ce5ceb7991975f75"
    ],
    "patch_url": "https://github.com/codecentric/spring-boot-admin/commit/c14c3ec12533f71f84de9ce3ce5ceb7991975f75.patch",
    "fix_commit_details": {
      "sha": "c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
      "commit_date": "2022-11-30T14:47:40Z",
      "author": {
        "login": "SteKoe",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: improve notifiers",
        "length": 23,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 180,
        "additions": 100,
        "deletions": 80
      },
      "files": [
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DingTalkNotifier.java",
          "status": "modified",
          "additions": 8,
          "deletions": 5,
          "patch": "@@ -17,6 +17,7 @@\n package de.codecentric.boot.admin.server.notify;\n \n import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -29,7 +30,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n@@ -101,17 +103,18 @@ private Object getText(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n \t\treturn message.getValue(context, String.class);\n \t}\n \n \tprivate String getSign(Long timestamp) {\n \t\ttry {\n \t\t\tString stringToSign = timestamp + \"\\n\" + secret;\n \t\t\tMac mac = Mac.getInstance(\"HmacSHA256\");\n-\t\t\tmac.init(new SecretKeySpec(secret.getBytes(\"UTF-8\"), \"HmacSHA256\"));\n-\t\t\tbyte[] signData = mac.doFinal(stringToSign.getBytes(\"UTF-8\"));\n+\t\t\tmac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), \"HmacSHA256\"));\n+\t\t\tbyte[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));\n \t\t\treturn URLEncoder.encode(new String(Base64.encodeBase64(signData)), \"UTF-8\");\n \t\t}\n \t\tcatch (Exception ex) {"
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/DiscordNotifier.java",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -26,7 +26,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n@@ -117,8 +118,9 @@ protected String createContent(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n \t\treturn message.getValue(context, String.class);\n \t}\n "
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/HipchatNotifier.java",
          "status": "modified",
          "additions": 18,
          "deletions": 16,
          "patch": "@@ -26,7 +26,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n@@ -96,7 +97,7 @@ protected String buildUrl() {\n \t\tif (url == null) {\n \t\t\tthrow new IllegalStateException(\"'url' must not be null.\");\n \t\t}\n-\t\treturn String.format(\"%s/room/%s/notification?auth_token=%s\", url.toString(), roomId, authToken);\n+\t\treturn String.format(\"%s/room/%s/notification?auth_token=%s\", url, roomId, authToken);\n \t}\n \n \tprotected HttpEntity<Map<String, Object>> createHipChatNotification(InstanceEvent event, Instance instance) {\n@@ -121,8 +122,9 @@ protected String getMessage(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n \t\treturn description.getValue(context, String.class);\n \t}\n \n@@ -136,49 +138,49 @@ protected String getColor(InstanceEvent event) {\n \t\t}\n \t}\n \n-\tpublic void setUrl(@Nullable URI url) {\n-\t\tthis.url = url;\n-\t}\n-\n \t@Nullable\n \tpublic URI getUrl() {\n \t\treturn url;\n \t}\n \n-\tpublic void setAuthToken(@Nullable String authToken) {\n-\t\tthis.authToken = authToken;\n+\tpublic void setUrl(@Nullable URI url) {\n+\t\tthis.url = url;\n \t}\n \n \t@Nullable\n \tpublic String getAuthToken() {\n \t\treturn authToken;\n \t}\n \n-\tpublic void setRoomId(@Nullable String roomId) {\n-\t\tthis.roomId = roomId;\n+\tpublic void setAuthToken(@Nullable String authToken) {\n+\t\tthis.authToken = authToken;\n \t}\n \n \t@Nullable\n \tpublic String getRoomId() {\n \t\treturn roomId;\n \t}\n \n-\tpublic void setNotify(boolean notify) {\n-\t\tthis.notify = notify;\n+\tpublic void setRoomId(@Nullable String roomId) {\n+\t\tthis.roomId = roomId;\n \t}\n \n \tpublic boolean isNotify() {\n \t\treturn notify;\n \t}\n \n-\tpublic void setDescription(String description) {\n-\t\tthis.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);\n+\tpublic void setNotify(boolean notify) {\n+\t\tthis.notify = notify;\n \t}\n \n \tpublic String getDescription() {\n \t\treturn description.getExpressionString();\n \t}\n \n+\tpublic void setDescription(String description) {\n+\t\tthis.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);\n+\t}\n+\n \tpublic void setRestTemplate(RestTemplate restTemplate) {\n \t\tthis.restTemplate = restTemplate;\n \t}"
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/LetsChatNotifier.java",
          "status": "modified",
          "additions": 17,
          "deletions": 15,
          "patch": "@@ -27,7 +27,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n@@ -119,56 +120,57 @@ protected String getText(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n \t\treturn message.getValue(context, String.class);\n \t}\n \n \tpublic void setRestTemplate(RestTemplate restTemplate) {\n \t\tthis.restTemplate = restTemplate;\n \t}\n \n-\tpublic void setUrl(@Nullable URI url) {\n-\t\tthis.url = url;\n-\t}\n-\n \t@Nullable\n \tpublic URI getUrl() {\n \t\treturn url;\n \t}\n \n-\tpublic void setUsername(String username) {\n-\t\tthis.username = username;\n+\tpublic void setUrl(@Nullable URI url) {\n+\t\tthis.url = url;\n \t}\n \n \tpublic String getUsername() {\n \t\treturn username;\n \t}\n \n-\tpublic void setRoom(@Nullable String room) {\n-\t\tthis.room = room;\n+\tpublic void setUsername(String username) {\n+\t\tthis.username = username;\n \t}\n \n \t@Nullable\n \tpublic String getRoom() {\n \t\treturn room;\n \t}\n \n-\tpublic void setToken(@Nullable String token) {\n-\t\tthis.token = token;\n+\tpublic void setRoom(@Nullable String room) {\n+\t\tthis.room = room;\n \t}\n \n \t@Nullable\n \tpublic String getToken() {\n \t\treturn token;\n \t}\n \n-\tpublic void setMessage(String message) {\n-\t\tthis.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);\n+\tpublic void setToken(@Nullable String token) {\n+\t\tthis.token = token;\n \t}\n \n \tpublic String getMessage() {\n \t\treturn message.getExpressionString();\n \t}\n \n+\tpublic void setMessage(String message) {\n+\t\tthis.message = parser.parseExpression(message, ParserContext.TEMPLATE_EXPRESSION);\n+\t}\n+\n }"
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/MicrosoftTeamsNotifier.java",
          "status": "modified",
          "additions": 13,
          "deletions": 11,
          "patch": "@@ -30,10 +30,12 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.expression.MapAccessor;\n+import org.springframework.expression.EvaluationContext;\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n@@ -141,7 +143,7 @@ public MicrosoftTeamsNotifier(InstanceRepository repository, RestTemplate restTe\n \t@Override\n \tprotected Mono<Void> doNotify(InstanceEvent event, Instance instance) {\n \t\tMessage message;\n-\t\tStandardEvaluationContext context = createEvaluationContext(event, instance);\n+\t\tEvaluationContext context = createEvaluationContext(event, instance);\n \t\tif (event instanceof InstanceRegisteredEvent) {\n \t\t\tmessage = getRegisteredMessage(instance, context);\n \t\t}\n@@ -172,23 +174,23 @@ protected boolean shouldNotify(InstanceEvent event, Instance instance) {\n \t\t\t\t|| super.shouldNotify(event, instance);\n \t}\n \n-\tprotected Message getDeregisteredMessage(Instance instance, StandardEvaluationContext context) {\n+\tprotected Message getDeregisteredMessage(Instance instance, EvaluationContext context) {\n \t\tString activitySubtitle = evaluateExpression(context, deregisterActivitySubtitle);\n \t\treturn createMessage(instance, deRegisteredTitle, activitySubtitle, context);\n \t}\n \n-\tprotected Message getRegisteredMessage(Instance instance, StandardEvaluationContext context) {\n+\tprotected Message getRegisteredMessage(Instance instance, EvaluationContext context) {\n \t\tString activitySubtitle = evaluateExpression(context, registerActivitySubtitle);\n \t\treturn createMessage(instance, registeredTitle, activitySubtitle, context);\n \t}\n \n-\tprotected Message getStatusChangedMessage(Instance instance, StandardEvaluationContext context) {\n+\tprotected Message getStatusChangedMessage(Instance instance, EvaluationContext context) {\n \t\tString activitySubtitle = evaluateExpression(context, statusActivitySubtitle);\n \t\treturn createMessage(instance, statusChangedTitle, activitySubtitle, context);\n \t}\n \n \tprotected Message createMessage(Instance instance, String registeredTitle, String activitySubtitle,\n-\t\t\tStandardEvaluationContext context) {\n+\t\t\tEvaluationContext context) {\n \t\tList<Fact> facts = new ArrayList<>();\n \t\tfacts.add(new Fact(STATUS_KEY, instance.getStatusInfo().getStatus()));\n \t\tfacts.add(new Fact(SERVICE_URL_KEY, instance.getRegistration().getServiceUrl()));\n@@ -203,18 +205,18 @@ protected Message createMessage(Instance instance, String registeredTitle, Strin\n \t\t\t\t.themeColor(evaluateExpression(context, themeColor)).sections(singletonList(section)).build();\n \t}\n \n-\tprotected String evaluateExpression(StandardEvaluationContext context, Expression expression) {\n+\tprotected String evaluateExpression(EvaluationContext context, Expression expression) {\n \t\treturn Objects.requireNonNull(expression.getValue(context, String.class));\n \t}\n \n-\tprotected StandardEvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {\n+\tprotected EvaluationContext createEvaluationContext(InstanceEvent event, Instance instance) {\n \t\tMap<String, Object> root = new HashMap<>();\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n-\t\treturn context;\n+\t\treturn SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n \t}\n \n \t@Nullable"
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/OpsGenieNotifier.java",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -26,7 +26,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n@@ -118,7 +119,7 @@ protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {\n \tprotected String buildUrl(InstanceEvent event, Instance instance) {\n \t\tif ((event instanceof InstanceStatusChangedEvent)\n \t\t\t\t&& (StatusInfo.STATUS_UP.equals(((InstanceStatusChangedEvent) event).getStatusInfo().getStatus()))) {\n-\t\t\treturn String.format(\"%s/%s/close\", url.toString(), generateAlias(instance));\n+\t\t\treturn String.format(\"%s/%s/close\", url, generateAlias(instance));\n \t\t}\n \t\treturn url.toString();\n \t}\n@@ -172,8 +173,9 @@ protected String getMessage(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n \t\treturn description.getValue(context, String.class);\n \t}\n \n@@ -183,15 +185,15 @@ protected String getDescription(InstanceEvent event, Instance instance) {\n \t\t\t\t((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());\n \t}\n \n-\tpublic void setApiKey(@Nullable String apiKey) {\n-\t\tthis.apiKey = apiKey;\n-\t}\n-\n \t@Nullable\n \tpublic String getApiKey() {\n \t\treturn apiKey;\n \t}\n \n+\tpublic void setApiKey(@Nullable String apiKey) {\n+\t\tthis.apiKey = apiKey;\n+\t}\n+\n \tpublic void setDescription(String description) {\n \t\tthis.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);\n \t}"
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/PagerdutyNotifier.java",
          "status": "modified",
          "additions": 17,
          "deletions": 16,
          "patch": "@@ -26,7 +26,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.web.client.RestTemplate;\n import reactor.core.publisher.Mono;\n \n@@ -132,9 +133,9 @@ protected String getDescription(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n-\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n \t\treturn description.getValue(context, String.class);\n \t}\n \n@@ -147,49 +148,49 @@ protected Map<String, Object> getDetails(InstanceEvent event) {\n \t\treturn details;\n \t}\n \n-\tpublic void setUrl(URI url) {\n-\t\tthis.url = url;\n-\t}\n-\n \tpublic URI getUrl() {\n \t\treturn url;\n \t}\n \n-\tpublic void setClient(@Nullable String client) {\n-\t\tthis.client = client;\n+\tpublic void setUrl(URI url) {\n+\t\tthis.url = url;\n \t}\n \n \t@Nullable\n \tpublic String getClient() {\n \t\treturn client;\n \t}\n \n-\tpublic void setClientUrl(@Nullable URI clientUrl) {\n-\t\tthis.clientUrl = clientUrl;\n+\tpublic void setClient(@Nullable String client) {\n+\t\tthis.client = client;\n \t}\n \n \t@Nullable\n \tpublic URI getClientUrl() {\n \t\treturn clientUrl;\n \t}\n \n-\tpublic void setServiceKey(@Nullable String serviceKey) {\n-\t\tthis.serviceKey = serviceKey;\n+\tpublic void setClientUrl(@Nullable URI clientUrl) {\n+\t\tthis.clientUrl = clientUrl;\n \t}\n \n \t@Nullable\n \tpublic String getServiceKey() {\n \t\treturn serviceKey;\n \t}\n \n-\tpublic void setDescription(String description) {\n-\t\tthis.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);\n+\tpublic void setServiceKey(@Nullable String serviceKey) {\n+\t\tthis.serviceKey = serviceKey;\n \t}\n \n \tpublic String getDescription() {\n \t\treturn description.getExpressionString();\n \t}\n \n+\tpublic void setDescription(String description) {\n+\t\tthis.description = parser.parseExpression(description, ParserContext.TEMPLATE_EXPRESSION);\n+\t}\n+\n \tpublic void setRestTemplate(RestTemplate restTemplate) {\n \t\tthis.restTemplate = restTemplate;\n \t}"
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/SlackNotifier.java",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -27,7 +27,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n@@ -128,8 +129,10 @@ protected String getText(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n+\n \t\treturn message.getValue(context, String.class);\n \t}\n "
        },
        {
          "filename": "spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/server/notify/TelegramNotifier.java",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -25,7 +25,8 @@\n import org.springframework.expression.Expression;\n import org.springframework.expression.ParserContext;\n import org.springframework.expression.spel.standard.SpelExpressionParser;\n-import org.springframework.expression.spel.support.StandardEvaluationContext;\n+import org.springframework.expression.spel.support.DataBindingPropertyAccessor;\n+import org.springframework.expression.spel.support.SimpleEvaluationContext;\n import org.springframework.web.client.RestTemplate;\n import reactor.core.publisher.Mono;\n \n@@ -107,8 +108,10 @@ protected String getText(InstanceEvent event, Instance instance) {\n \t\troot.put(\"event\", event);\n \t\troot.put(\"instance\", instance);\n \t\troot.put(\"lastStatus\", getLastStatus(event.getInstance()));\n-\t\tStandardEvaluationContext context = new StandardEvaluationContext(root);\n-\t\tcontext.addPropertyAccessor(new MapAccessor());\n+\t\tSimpleEvaluationContext context = SimpleEvaluationContext\n+\t\t\t\t.forPropertyAccessors(DataBindingPropertyAccessor.forReadOnlyAccess(), new MapAccessor())\n+\t\t\t\t.withRootObject(root).build();\n+\n \t\treturn message.getValue(context, String.class);\n \t}\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e52f4432979e92cae7ed355c635457e4c9dee65e",
            "date": "2025-01-14T05:17:30Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "1f0348e739720d04c0a819a76288793075f4b296",
            "date": "2025-01-14T02:01:27Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "721eda0b67ff9d065f7eda459eaca323e31dc7dc",
            "date": "2025-01-13T21:56:30Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "17d12ba652e9f12257d0b125558ad0647dfa2ae5",
            "date": "2025-01-13T18:10:14Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "59e44fed93a5b08fec0ed86049b319bae51cffbc",
            "date": "2025-01-10T18:46:28Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "Spring boot admins is an open source administrative user interface for management of spring boot applications. All users who run Spring Boot Admin Server, having enabled Notifiers (e.g. Teams-Notifier) and write access to environment variables via UI are affected. Users are advised to upgrade to the most recent releases of Spring Boot Admin 2.6.10 and 2.7.8 to resolve this issue. Users unable to upgrade may disable any notifier or disable write access (POST request) on `/env` actuator endpoint.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-12-09T21:15:14.843",
    "last_modified": "2024-11-21T07:30:14.600",
    "fix_date": "2022-11-30T14:47:40Z"
  },
  "references": [
    {
      "url": "https://github.com/codecentric/spring-boot-admin/commit/c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecentric/spring-boot-admin/security/advisories/GHSA-w3x5-427h-wfq6",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecentric/spring-boot-admin/commit/c14c3ec12533f71f84de9ce3ce5ceb7991975f75",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecentric/spring-boot-admin/security/advisories/GHSA-w3x5-427h-wfq6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.219555",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "spring-boot-admin",
    "owner": "codecentric",
    "created_at": "2014-07-25T11:39:13Z",
    "updated_at": "2025-01-14T08:11:48Z",
    "pushed_at": "2025-01-14T05:17:31Z",
    "size": 76229,
    "stars": 12433,
    "forks": 3077,
    "open_issues": 27,
    "watchers": 12433,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 1243494,
      "TypeScript": 658537,
      "Vue": 517937,
      "JavaScript": 31345,
      "HTML": 12727,
      "CSS": 7161,
      "MDX": 582,
      "Dockerfile": 171
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:00:35.088577"
  }
}