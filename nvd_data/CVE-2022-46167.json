{
  "cve_id": "CVE-2022-46167",
  "github_data": {
    "repository": "clastix/capsule",
    "fix_commit": "1df430e71be8c4778c82eca3459978ad7d0b4b7b",
    "related_commits": [
      "1df430e71be8c4778c82eca3459978ad7d0b4b7b",
      "75525ac19254b0c5111e34d7985e2be7bc8b1ac1",
      "1df430e71be8c4778c82eca3459978ad7d0b4b7b",
      "75525ac19254b0c5111e34d7985e2be7bc8b1ac1"
    ],
    "patch_url": "https://github.com/clastix/capsule/commit/1df430e71be8c4778c82eca3459978ad7d0b4b7b.patch",
    "fix_commit_details": {
      "sha": "1df430e71be8c4778c82eca3459978ad7d0b4b7b",
      "commit_date": "2022-11-23T14:29:38Z",
      "author": {
        "login": "prometherion",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "test: preventing serviceaccount privilege escalation",
        "length": 52,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 146,
        "additions": 146,
        "deletions": 0
      },
      "files": [
        {
          "filename": "e2e/sa_prevent_privilege_escalation_test.go",
          "status": "added",
          "additions": 146,
          "deletions": 0,
          "patch": "@@ -0,0 +1,146 @@\n+//go:build e2e\n+\n+// Copyright 2020-2021 Clastix Labs\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package e2e\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"time\"\n+\n+\t. \"github.com/onsi/ginkgo\"\n+\t. \"github.com/onsi/gomega\"\n+\trbacv1 \"k8s.io/api/rbac/v1\"\n+\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n+\t\"k8s.io/apimachinery/pkg/types\"\n+\t\"k8s.io/apimachinery/pkg/util/uuid\"\n+\t\"k8s.io/client-go/kubernetes\"\n+\t\"sigs.k8s.io/controller-runtime/pkg/client/config\"\n+\n+\tcapsulev1beta1 \"github.com/clastix/capsule/api/v1beta1\"\n+)\n+\n+var _ = Describe(\"trying to escalate from a Tenant Namespace ServiceAccount\", func() {\n+\ttnt := &capsulev1beta1.Tenant{\n+\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\tName: \"sa-privilege-escalation\",\n+\t\t},\n+\t\tSpec: capsulev1beta1.TenantSpec{\n+\t\t\tOwners: capsulev1beta1.OwnerListSpec{\n+\t\t\t\t{\n+\t\t\t\t\tName: \"mario\",\n+\t\t\t\t\tKind: \"User\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tNodeSelector: map[string]string{\n+\t\t\t\t\"kubernetes.io/os\": \"linux\",\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\tns := NewNamespace(\"attack\")\n+\n+\tJustBeforeEach(func() {\n+\t\tEventuallyCreation(func() error {\n+\t\t\treturn k8sClient.Create(context.TODO(), tnt)\n+\t\t}).Should(Succeed())\n+\n+\t\tNamespaceCreation(ns, tnt.Spec.Owners[0], defaultTimeoutInterval).Should(Succeed())\n+\t\tTenantNamespaceList(tnt, defaultTimeoutInterval).Should(ContainElement(ns.GetName()))\n+\t})\n+\n+\tJustAfterEach(func() {\n+\t\tExpect(k8sClient.Delete(context.TODO(), tnt)).Should(Succeed())\n+\t})\n+\n+\tIt(\"should block Namespace changes\", func() {\n+\t\trole := rbacv1.Role{\n+\t\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\t\tName:      \"ns-update-role\",\n+\t\t\t\tNamespace: ns.GetName(),\n+\t\t\t},\n+\t\t\tRules: []rbacv1.PolicyRule{\n+\t\t\t\t{\n+\t\t\t\t\tVerbs:         []string{\"update\"},\n+\t\t\t\t\tAPIGroups:     []string{\"\"},\n+\t\t\t\t\tResources:     []string{\"namespaces\"},\n+\t\t\t\t\tResourceNames: []string{ns.GetName()},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}\n+\n+\t\tEventuallyCreation(func() error {\n+\t\t\treturn k8sClient.Create(context.Background(), &role)\n+\t\t}).Should(Succeed())\n+\n+\t\trolebinding := rbacv1.RoleBinding{\n+\t\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\t\tName:      \"attacker-rolebinding\",\n+\t\t\t\tNamespace: ns.GetName(),\n+\t\t\t},\n+\t\t\tSubjects: []rbacv1.Subject{\n+\t\t\t\t{\n+\t\t\t\t\tKind:      \"ServiceAccount\",\n+\t\t\t\t\tName:      \"attacker\",\n+\t\t\t\t\tNamespace: ns.GetName(),\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tRoleRef: rbacv1.RoleRef{\n+\t\t\t\tAPIGroup: \"rbac.authorization.k8s.io\",\n+\t\t\t\tKind:     \"Role\",\n+\t\t\t\tName:     role.GetName(),\n+\t\t\t},\n+\t\t}\n+\n+\t\tEventuallyCreation(func() error {\n+\t\t\treturn k8sClient.Create(context.Background(), &rolebinding)\n+\t\t}).Should(Succeed())\n+\n+\t\tc, err := config.GetConfig()\n+\t\tExpect(err).ToNot(HaveOccurred())\n+\t\tc.Impersonate.Groups = []string{\"system:serviceaccounts\"}\n+\t\tc.Impersonate.UserName = fmt.Sprintf(\"system:serviceaccount:%s:%s\", rolebinding.Subjects[0].Namespace, rolebinding.Subjects[0].Name)\n+\t\tsaClient, err := kubernetes.NewForConfig(c)\n+\t\tExpect(err).ToNot(HaveOccurred())\n+\t\t// Changing Owner Reference is forbidden\n+\t\tConsistently(func() error {\n+\t\t\tif err := k8sClient.Get(context.Background(), types.NamespacedName{Name: ns.GetName()}, ns); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\n+\t\t\tns.OwnerReferences[0].UID = uuid.NewUUID()\n+\n+\t\t\t_, err = saClient.CoreV1().Namespaces().Update(context.Background(), ns, metav1.UpdateOptions{})\n+\n+\t\t\treturn err\n+\t\t}, 10*time.Second, time.Second).ShouldNot(Succeed())\n+\t\t// Removing Owner Reference is forbidden\n+\t\tConsistently(func() error {\n+\t\t\tif err := k8sClient.Get(context.Background(), types.NamespacedName{Name: ns.GetName()}, ns); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\n+\t\t\tns.SetOwnerReferences(nil)\n+\n+\t\t\t_, err = saClient.CoreV1().Namespaces().Update(context.Background(), ns, metav1.UpdateOptions{})\n+\n+\t\t\treturn err\n+\t\t}, 10*time.Second, time.Second).ShouldNot(Succeed())\n+\t\t// Breaking nodeSelector is forbidden\n+\t\tConsistently(func() error {\n+\t\t\tif err := k8sClient.Get(context.Background(), types.NamespacedName{Name: ns.GetName()}, ns); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\n+\t\t\tns.SetAnnotations(map[string]string{\n+\t\t\t\t\"scheduler.alpha.kubernetes.io/node-selector\": \"kubernetes.io/os=forbidden\",\n+\t\t\t})\n+\n+\t\t\t_, err = saClient.CoreV1().Namespaces().Update(context.Background(), ns, metav1.UpdateOptions{})\n+\n+\t\t\treturn err\n+\t\t}, 10*time.Second, time.Second).ShouldNot(Succeed())\n+\t})\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "49fb3075298adb12ab3d5bfe867aedb61c8ab507",
            "date": "2025-01-13T14:24:06Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "ace0d74c23da860eaf1fd56414333e52ef37560c",
            "date": "2025-01-10T01:12:06Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "b74095be25bb762c05d3951b740840d4bef7c82a",
            "date": "2025-01-05T08:39:59Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "8ba9e9af1bd6f4c95a8ed5ae375f09b9354daa8b",
            "date": "2025-01-02T21:51:42Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "7d7adf9c5811c650c2b17088ddaa9364b4f8fac5",
            "date": "2025-01-02T21:51:04Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-863",
    "description": "Capsule is a multi-tenancy and policy-based framework for Kubernetes. Prior to version 0.1.3, a ServiceAccount deployed in a Tenant Namespace, when granted with `PATCH` capabilities on its own Namespace, is able to edit it and remove the Owner Reference, breaking the reconciliation of the Capsule Operator and removing all the enforcement like Pod Security annotations, Network Policies, Limit Range and Resource Quota items. An attacker could detach the Namespace from a Tenant that is forbidding starting privileged Pods using the Pod Security labels by removing the OwnerReference, removing the enforcement labels, and being able to start privileged containers that would be able to start a generic Kubernetes privilege escalation. Patches have been released for version 0.1.3. No known workarounds are available.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-02T19:15:11.097",
    "last_modified": "2024-11-21T07:30:14.737",
    "fix_date": "2022-11-23T14:29:38Z"
  },
  "references": [
    {
      "url": "https://github.com/clastix/capsule/commit/1df430e71be8c4778c82eca3459978ad7d0b4b7b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/clastix/capsule/commit/75525ac19254b0c5111e34d7985e2be7bc8b1ac1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/clastix/capsule/releases/tag/v0.1.3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/clastix/capsule/security/advisories/GHSA-x45c-cvp8-q4fm",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/clastix/capsule/commit/1df430e71be8c4778c82eca3459978ad7d0b4b7b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/clastix/capsule/commit/75525ac19254b0c5111e34d7985e2be7bc8b1ac1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/clastix/capsule/releases/tag/v0.1.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/clastix/capsule/security/advisories/GHSA-x45c-cvp8-q4fm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.193953",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "capsule",
    "owner": "clastix",
    "created_at": "2020-06-29T20:27:51Z",
    "updated_at": "2025-01-14T15:33:49Z",
    "pushed_at": "2025-01-14T15:22:18Z",
    "size": 6171,
    "stars": 1711,
    "forks": 163,
    "open_issues": 47,
    "watchers": 1711,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 664313,
      "Shell": 14873,
      "Makefile": 10200,
      "Smarty": 8214,
      "Dockerfile": 1160,
      "JavaScript": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T19:58:15.009890"
  }
}