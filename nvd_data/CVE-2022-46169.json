{
  "cve_id": "CVE-2022-46169",
  "github_data": {
    "repository": "Cacti/cacti",
    "fix_commit": "7f0e16312dd5ce20f93744ef8b9c3b0f1ece2216",
    "related_commits": [
      "7f0e16312dd5ce20f93744ef8b9c3b0f1ece2216",
      "a8d59e8fa5f0054aa9c6981b1cbe30ef0e2a0ec9",
      "b43f13ae7f1e6bfe4e8e56a80a7cd867cf2db52b",
      "7f0e16312dd5ce20f93744ef8b9c3b0f1ece2216",
      "a8d59e8fa5f0054aa9c6981b1cbe30ef0e2a0ec9",
      "b43f13ae7f1e6bfe4e8e56a80a7cd867cf2db52b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7f0e16312dd5ce20f93744ef8b9c3b0f1ece2216",
      "commit_date": "2022-12-05T08:41:01Z",
      "author": {
        "login": "netniV",
        "type": "User",
        "stats": {
          "total_commits": 784,
          "average_weekly_commits": 0.6610455311973018,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 167
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-6p93-p743-35gf",
        "length": 231,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 142,
        "additions": 99,
        "deletions": 43
      },
      "files": [
        {
          "filename": "CHANGELOG",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@ Cacti CHANGELOG\n \n 1.2.23\n -security#4920: Add .htaccess file to scripts folder\n+-security#XXXX: CVE-2022-46169 Unauthenticated Command Injection in Remote Agent\n -issue#4418: When using Single Signon Frameworks like SiteMinder Cacti does not properly detect ticket revocation in callbacks\n -issue#4682: New templates are not installed during the update\n -issue#4838: CLI Based upgrade generates warnings in PHP 8.1"
        },
        {
          "filename": "auth_login.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -161,7 +161,7 @@\n \t\t\tcacti_log(\"LOGIN: Guest User '\" . $user['username'] . \"' in use\", false, 'AUTH');\n \t\t}\n \n-\t\t$client_addr = get_client_addr('');\n+\t\t$client_addr = get_client_addr();\n \n \t\tdb_execute_prepared('INSERT IGNORE INTO user_log\n \t\t\t(username, user_id, result, ip, time)\n@@ -260,9 +260,9 @@\n \t\tdb_execute_prepared('INSERT IGNORE INTO user_log\n \t\t\t(username, user_id, result, ip, time)\n \t\t\tVALUES (?, ?, 0, ?, NOW())',\n-\t\t\tarray($username, !empty($id) ? $id:0, get_client_addr('')));\n+\t\t\tarray($username, !empty($id) ? $id:0, get_client_addr()));\n \n-\t\tcacti_log('LOGIN FAILED: ' . $realm_name . \" Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr('') . \"'.\", false, 'AUTH');\n+\t\tcacti_log('LOGIN FAILED: ' . $realm_name . \" Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr() . \"'.\", false, 'AUTH');\n \t}\n }\n "
        },
        {
          "filename": "include/config.php.dist",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -163,3 +163,29 @@ $disable_log_rotation = false;\n  * are defined in lib/database.php\n  */\n # define('DEBUG_SQL_FLOW', true);\n+\n+/*\n+ * Allow the use of Proxy IPs when searching for client\n+ * IP to be used\n+ *\n+ * This can be set to one of the following:\n+ *   - false: to use only REMOTE_ADDR\n+ *   - true: to use all allowed headers (not advised)\n+ *   - array of one or more the following:\n+ *\t\t'X-Forwarded-For',\n+ *\t\t'X-Client-IP',\n+ *\t\t'X-Real-IP',\n+ *\t\t'X-ProxyUser-Ip',\n+ *\t\t'CF-Connecting-IP',\n+ *\t\t'True-Client-IP',\n+ *\t\t'HTTP_X_FORWARDED',\n+ *\t\t'HTTP_X_FORWARDED_FOR',\n+ *\t\t'HTTP_X_CLUSTER_CLIENT_IP',\n+ *\t\t'HTTP_FORWARDED_FOR',\n+ *\t\t'HTTP_FORWARDED',\n+ *\t\t'HTTP_CLIENT_IP',\n+ *\n+ * NOTE: The following will always be checked:\n+ *\t\t'REMOTE_ADDR',\n+ */\n+$proxy_headers = null;"
        },
        {
          "filename": "include/global.php",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -95,6 +95,9 @@\n \texit;\n }\n \n+/* Should we allow proxy ip headers? */\n+$config['proxy_headers'] = $proxy_headers ?? null;\n+\n /* Set the poller_id */\n if (isset($poller_id)) {\n \t$config['poller_id'] = $poller_id;"
        },
        {
          "filename": "include/global_arrays.php",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -2904,4 +2904,20 @@\n \t);\n }\n \n+$allowed_proxy_headers =\tarray(\n+\t'X-Forwarded-For',\n+\t'X-Client-IP',\n+\t'X-Real-IP',\n+\t'X-ProxyUser-Ip',\n+\t'CF-Connecting-IP',\n+\t'True-Client-IP',\n+\t'HTTP_X_FORWARDED',\n+\t'HTTP_X_FORWARDED_FOR',\n+\t'HTTP_X_CLUSTER_CLIENT_IP',\n+\t'HTTP_FORWARDED_FOR',\n+\t'HTTP_FORWARDED',\n+\t'HTTP_CLIENT_IP',\n+\t'REMOTE_ADDR',\n+);\n+\n api_plugin_hook('config_arrays');"
        },
        {
          "filename": "lib/auth.php",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -78,15 +78,15 @@ function set_auth_cookie($user) {\n \tif (db_table_exists('user_auth_cache')) {\n \t\tclear_auth_cookie();\n \n-\t\t$nssecret = md5($_SERVER['REQUEST_TIME'] .  mt_rand(10000,10000000)) . md5(get_client_addr(''));\n+\t\t$nssecret = md5($_SERVER['REQUEST_TIME'] .  mt_rand(10000,10000000)) . md5(get_client_addr());\n \n \t\t$secret = hash('sha512', $nssecret, false);\n \n \t\tdb_execute_prepared('REPLACE INTO user_auth_cache\n \t\t\t(user_id, hostname, last_update, token)\n \t\t\tVALUES\n \t\t\t(?, ?, NOW(), ?);',\n-\t\t\tarray($user['id'], get_client_addr(''), $secret));\n+\t\t\tarray($user['id'], get_client_addr(), $secret));\n \n \t\tcacti_cookie_session_set($user['id'], $user['realm'], $nssecret);\n \t}\n@@ -157,7 +157,7 @@ function check_auth_cookie() {\n \t\t\t\t\t\t(username, user_id, result, ip, time)\n \t\t\t\t\t\tVALUES\n \t\t\t\t\t\t(?, ?, 2, ?, NOW())',\n-\t\t\t\t\t\tarray($user_info['username'], $user_info['id'], get_client_addr(''))\n+\t\t\t\t\t\tarray($user_info['username'], $user_info['id'], get_client_addr())\n \t\t\t\t\t);\n \n \t\t\t\t\treturn $user_info['id'];\n@@ -3425,7 +3425,7 @@ function auth_process_lockout($username, $realm) {\n \n \t\t\tif (cacti_sizeof($user)) {\n \t\t\t\tif ($user['enabled'] == '') {\n-\t\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr('') . \"'.  User account Disabled.\", false, 'AUTH');\n+\t\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr() . \"'.  User account Disabled.\", false, 'AUTH');\n \n \t\t\t\t\t$error     = true;\n \t\t\t\t\t$error_msg = __('Access Denied!  Login Disabled.');\n@@ -3459,22 +3459,22 @@ function auth_process_lockout($username, $realm) {\n \t\t\t\tdb_execute_prepared('INSERT IGNORE INTO user_log\n \t\t\t\t\t(username, user_id, result, ip, time)\n \t\t\t\t\tVALUES (?, ?, 0, ?, NOW())',\n-\t\t\t\t\tarray($username, isset($user['id']) ? $user['id']:0, get_client_addr('')));\n+\t\t\t\t\tarray($username, isset($user['id']) ? $user['id']:0, get_client_addr()));\n \n \t\t\t\tif ($user['locked'] == 'on') {\n-\t\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr('') . \"'.  Account is locked out.\", false, 'AUTH');\n+\t\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr() . \"'.  Account is locked out.\", false, 'AUTH');\n \n \t\t\t\t\t$error     = true;\n \t\t\t\t\t$error_msg = __('Your account has been locked.  Please contact your Administrator.');\n \t\t\t\t} else {\n-\t\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr('') . \"'.\", false, 'AUTH');\n+\t\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr() . \"'.\", false, 'AUTH');\n \n \t\t\t\t\t/* error */\n \t\t\t\t\t$error     = true;\n \t\t\t\t\t$error_msg = __('Access Denied!  Login Failed.');\n \t\t\t\t}\n \t\t\t} elseif ($user['locked'] == 'on') {\n-\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr('') . \"'.\", false, 'AUTH');\n+\t\t\t\tcacti_log(\"LOGIN FAILED: Local Login Failed for user '\" . $username . \"' from IP Address '\" . get_client_addr() . \"'.\", false, 'AUTH');\n \n \t\t\t\t$error     = true;\n \t\t\t\t$error_msg = __('Access Denied!  Login Failed.');"
        },
        {
          "filename": "lib/functions.php",
          "status": "modified",
          "additions": 38,
          "deletions": 28,
          "patch": "@@ -6722,37 +6722,47 @@ function get_debug_prefix() {\n \treturn sprintf('<[ %s | %7d ]> -- ', $dateTime, getmypid());\n }\n \n-function get_client_addr($client_addr = false, $restrictive = false) {\n-\tif (!$restrictive) {\n-\t\t$http_addr_headers = array(\n-\t\t\t'X-Forwarded-For',\n-\t\t\t'X-Client-IP',\n-\t\t\t'X-Real-IP',\n-\t\t\t'X-ProxyUser-Ip',\n-\t\t\t'CF-Connecting-IP',\n-\t\t\t'True-Client-IP',\n-\t\t\t'HTTP_X_FORWARDED',\n-\t\t\t'HTTP_X_FORWARDED_FOR',\n-\t\t\t'HTTP_X_CLUSTER_CLIENT_IP',\n-\t\t\t'HTTP_FORWARDED_FOR',\n-\t\t\t'HTTP_FORWARDED',\n-\t\t\t'HTTP_CLIENT_IP',\n-\t\t\t'REMOTE_ADDR',\n-\t\t);\n-\t} else {\n-\t\t$http_addr_headers = array(\n-\t\t\t'X-Forwarded-For',\n-\t\t\t'X-Client-IP',\n-\t\t\t'X-Real-IP',\n-\t\t\t'X-ProxyUser-Ip',\n-\t\t\t'CF-Connecting-IP',\n-\t\t\t'True-Client-IP',\n-\t\t\t'REMOTE_ADDR',\n-\t\t);\n+function get_client_addr() {\n+\tglobal $config, $allowed_proxy_headers;\n+\n+\t$proxy_headers = $config['proxy_headers'] ?? null;\n+\tif ($proxy_headers === null) {\n+\t\t$last_time = read_config_option('proxy_alert');\n+\t\tif (empty($last_time)) {\n+\t\t\t$last_time = date('Y-m-d');\n+\t\t}\n+\n+\t\t$last_date = new DateTime($last_time);\n+\t\t$this_date = new Datetime();\n+\n+\t\t$this_diff = $this_date->diff($last_date);\n+\t\t$this_days = $this_diff->format('%a');\n+\n+\t\tif ($this_days) {\n+\t\t\tcacti_log('WARNING: Configuration option \"proxy_headers\" will be automatically false in future releases.  Please set if you require proxy IPs to be used', false, 'AUTH');\n+\t\t\tset_config_option('proxy_alert', date('Y-m-d'));\n+\t\t}\n+\n+\t\t$proxy_headers = true;\n+\t}\n+\n+\t/* IMPORTANT: The null default for 1.2.x is true, but this will change in future version */\n+\tif ($proxy_headers === null || $proxy_headers === true) {\n+\t\t$proxy_headers = $allowed_proxy_headers;\n+\t} elseif (is_array($proxy_headers)) {\n+\t\t$proxy_headers = array_intersect($proxy_headers, $allowed_proxy_headers);\n+\t}\n+\n+\tif (!is_array($proxy_headers)) {\n+\t\t$proxy_headers = [];\n+\t}\n+\n+\tif (!in_array('REMOTE_ADDR', $proxy_headers)) {\n+\t\t$proxy_headers[] = 'REMOTE_ADDR';\n \t}\n \n \t$client_addr = false;\n-\tforeach ($http_addr_headers as $header) {\n+\tforeach ($proxy_headers as $header) {\n \t\tif (!empty($_SERVER[$header])) {\n \t\t\t$header_ips = explode(',', $_SERVER[$header]);\n \t\t\tforeach ($header_ips as $header_ip) {"
        },
        {
          "filename": "remote_agent.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -298,7 +298,7 @@ function poll_for_data() {\n \n \t$local_data_ids = get_nfilter_request_var('local_data_ids');\n \t$host_id        = get_filter_request_var('host_id');\n-\t$poller_id      = get_nfilter_request_var('poller_id');\n+\t$poller_id      = get_filter_request_var('poller_id');\n \t$return         = array();\n \n \t$i = 0;\n@@ -382,7 +382,7 @@ function poll_for_data() {\n \t\t\t\t\t\t);\n \n \t\t\t\t\t\tif (function_exists('proc_open')) {\n-\t\t\t\t\t\t\t$cactiphp = proc_open(read_config_option('path_php_binary') . ' -q ' . $config['base_path'] . '/script_server.php realtime ' . $poller_id, $cactides, $pipes);\n+\t\t\t\t\t\t\t$cactiphp = proc_open(read_config_option('path_php_binary') . ' -q ' . $config['base_path'] . '/script_server.php realtime ' . cacti_escapeshellarg($poller_id), $cactides, $pipes);\n \t\t\t\t\t\t\t$output = fgets($pipes[1], 1024);\n \t\t\t\t\t\t\t$using_proc_function = true;\n \t\t\t\t\t\t} else {\n@@ -443,8 +443,8 @@ function run_remote_data_query() {\n function run_remote_discovery() {\n \tglobal $config;\n \n-\t$poller_id = $config['poller_id'];\n-\t$network   = get_filter_request_var('network');\n+\t$poller_id = cacti_escapeshellarg($config['poller_id']);\n+\t$network   = cacti_escapeshellarg(get_filter_request_var('network'));\n \t$php       = cacti_escapeshellcmd(read_config_option('path_php_binary'));\n \t$path      = cacti_escapeshellarg(read_config_option('path_webroot') . '/poller_automation.php');\n "
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b17d3f3c66d361d00ed9d0f1a616beee01f5630e",
            "date": "2025-01-19T20:18:54Z",
            "author_login": "xmacan"
          },
          {
            "sha": "7aa4291891186467309bec8ff705e7af2322a3b2",
            "date": "2025-01-19T18:41:19Z",
            "author_login": "TheWitness"
          },
          {
            "sha": "c67d4f25ec032fbffc5dce7c0dca9cd12f43a456",
            "date": "2025-01-17T18:29:52Z",
            "author_login": "TheWitness"
          },
          {
            "sha": "c062291c3195bae693cefef8f45c645c3e03acc6",
            "date": "2025-01-17T18:20:52Z",
            "author_login": "TheWitness"
          },
          {
            "sha": "683b566f6f12a5c778c37688c8e285b06006d9b8",
            "date": "2025-01-17T18:11:09Z",
            "author_login": "TheWitness"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-74",
    "description": "Cacti is an open source platform which provides a robust and extensible operational monitoring and fault management framework for users. In affected versions a command injection vulnerability allows an unauthenticated user to execute arbitrary code on a server running Cacti, if a specific data source was selected for any monitored device. The vulnerability resides in the `remote_agent.php` file. This file can be accessed without authentication. This function retrieves the IP address of the client via `get_client_addr` and resolves this IP address to the corresponding hostname via `gethostbyaddr`. After this, it is verified that an entry within the `poller` table exists, where the hostname corresponds to the resolved hostname. If such an entry was found, the function returns `true` and the client is authorized. This authorization can be bypassed due to the implementation of the `get_client_addr` function. The function is defined in the file `lib/functions.php` and checks serval `$_SERVER` variables to determine the IP address of the client. The variables beginning with `HTTP_` can be arbitrarily set by an attacker. Since there is a default entry in the `poller` table with the hostname of the server running Cacti, an attacker can bypass the authentication e.g. by providing the header `Forwarded-For: <TARGETIP>`. This way the function `get_client_addr` returns the IP address of the server running Cacti. The following call to `gethostbyaddr` will resolve this IP address to the hostname of the server, which will pass the `poller` hostname check because of the default entry. After the authorization of the `remote_agent.php` file is bypassed, an attacker can trigger different actions. One of these actions is called `polldata`. The called function `poll_for_data` retrieves a few request parameters and loads the corresponding `poller_item` entries from the database. If the `action` of a `poller_item` equals `POLLER_ACTION_SCRIPT_PHP`, the function `proc_open` is used to execute a PHP script. The attacker-controlled parameter `$poller_id` is retrieved via the function `get_nfilter_request_var`, which allows arbitrary strings. This variable is later inserted into the string passed to `proc_open`, which leads to a command injection vulnerability. By e.g. providing the `poller_id=;id` the `id` command is executed. In order to reach the vulnerable call, the attacker must provide a `host_id` and `local_data_id`, where the `action` of the corresponding `poller_item` is set to `POLLER_ACTION_SCRIPT_PHP`. Both of these ids (`host_id` and `local_data_id`) can easily be bruteforced. The only requirement is that a `poller_item` with an `POLLER_ACTION_SCRIPT_PHP` action exists. This is very likely on a productive instance because this action is added by some predefined templates like `Device - Uptime` or `Device - Polling Time`.\n\nThis command injection vulnerability allows an unauthenticated user to execute arbitrary commands if a `poller_item` with the `action` type `POLLER_ACTION_SCRIPT_PHP` (`2`) is configured. The authorization bypass should be prevented by not allowing an attacker to make `get_client_addr` (file `lib/functions.php`) return an arbitrary IP address. This could be done by not honoring the `HTTP_...` `$_SERVER` variables. If these should be kept for compatibility reasons it should at least be prevented to fake the IP address of the server running Cacti. This vulnerability has been addressed in both the 1.2.x and 1.3.x release branches with `1.2.23` being the first release containing the patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-05T21:15:10.527",
    "last_modified": "2024-11-21T07:30:14.963",
    "fix_date": "2022-12-05T08:41:01Z"
  },
  "references": [
    {
      "url": "https://github.com/Cacti/cacti/commit/7f0e16312dd5ce20f93744ef8b9c3b0f1ece2216",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Cacti/cacti/commit/a8d59e8fa5f0054aa9c6981b1cbe30ef0e2a0ec9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Cacti/cacti/commit/b43f13ae7f1e6bfe4e8e56a80a7cd867cf2db52b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Cacti/cacti/commit/7f0e16312dd5ce20f93744ef8b9c3b0f1ece2216",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Cacti/cacti/commit/a8d59e8fa5f0054aa9c6981b1cbe30ef0e2a0ec9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Cacti/cacti/commit/b43f13ae7f1e6bfe4e8e56a80a7cd867cf2db52b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Cacti/cacti/security/advisories/GHSA-6p93-p743-35gf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.203247",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "cacti",
    "owner": "Cacti",
    "created_at": "2015-01-19T05:36:15Z",
    "updated_at": "2025-01-25T05:49:30Z",
    "pushed_at": "2025-01-20T00:42:51Z",
    "size": 275847,
    "stars": 1678,
    "forks": 407,
    "open_issues": 147,
    "watchers": 1678,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "1.2.x",
      "develop",
      "master",
      "old-develop"
    ],
    "languages": {
      "PHP": 6987281,
      "JavaScript": 2534141,
      "CSS": 1217770,
      "SCSS": 255696,
      "Less": 246030,
      "Shell": 51180,
      "Perl": 7357,
      "HTML": 5181,
      "Ruby": 2138
    },
    "commit_activity": {
      "total_commits_last_year": 1094,
      "avg_commits_per_week": 21.03846153846154,
      "days_active_last_year": 178
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:35:31.414665"
  }
}