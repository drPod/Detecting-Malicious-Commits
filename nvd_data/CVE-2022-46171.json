{
  "cve_id": "CVE-2022-46171",
  "github_data": {
    "repository": "tauri-apps/tauri",
    "fix_commit": "72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
    "related_commits": [
      "72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
      "f0602e7c294245ab6ef6fbf2a976ef398340ef58",
      "72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
      "f0602e7c294245ab6ef6fbf2a976ef398340ef58"
    ],
    "patch_url": "https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3.patch",
    "fix_commit_details": {
      "sha": "72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
      "commit_date": "2022-12-22T13:53:46Z",
      "author": {
        "login": "amrbashir",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-6mv3-wm7j-h4w5",
        "length": 199,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 127,
        "additions": 103,
        "deletions": 24
      },
      "files": [
        {
          "filename": ".changes/glob-match-require_literal_separator.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+\"tauri\": \"patch\"\n+---\n+\n+Fix the filesystem scope allowing sub-directories of the directory picked by the dialog when `recursive` option was `false`."
        },
        {
          "filename": "core/tauri/src/scope/fs.rs",
          "status": "modified",
          "additions": 98,
          "deletions": 24,
          "patch": "@@ -141,7 +141,7 @@ impl Scope {\n   /// Extend the allowed patterns with the given directory.\n   ///\n   /// After this function has been called, the frontend will be able to use the Tauri API to read\n-  /// the directory and all of its files and subdirectories.\n+  /// the directory and all of its files. If `recursive` is `true`, subdirectories will be accessible too.\n   pub fn allow_directory<P: AsRef<Path>>(&self, path: P, recursive: bool) -> crate::Result<()> {\n     let path = path.as_ref();\n     {\n@@ -216,13 +216,22 @@ impl Scope {\n \n     if let Ok(path) = path {\n       let path: PathBuf = path.components().collect();\n+      let options = glob::MatchOptions {\n+        // this is needed so `/dir/*` doesn't match files within subdirectories such as `/dir/subdir/file.txt`\n+        // see: https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5\n+        require_literal_separator: true,\n+        // dotfiles are not supposed to be exposed by default\n+        #[cfg(unix)]\n+        require_literal_leading_dot: true,\n+        ..Default::default()\n+      };\n \n       let forbidden = self\n         .forbidden_patterns\n         .lock()\n         .unwrap()\n         .iter()\n-        .any(|p| p.matches_path(&path));\n+        .any(|p| p.matches_path_with(&path, options));\n \n       if forbidden {\n         false\n@@ -232,7 +241,7 @@ impl Scope {\n           .lock()\n           .unwrap()\n           .iter()\n-          .any(|p| p.matches_path(&path));\n+          .any(|p| p.matches_path_with(&path, options));\n         allowed\n       }\n     } else {\n@@ -269,32 +278,97 @@ mod tests {\n   #[test]\n   fn path_is_escaped() {\n     let scope = new_scope();\n-    scope.allow_directory(\"/home/tauri/**\", false).unwrap();\n-    assert!(scope.is_allowed(\"/home/tauri/**\"));\n-    assert!(scope.is_allowed(\"/home/tauri/**/file\"));\n-    assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));\n+    #[cfg(unix)]\n+    {\n+      scope.allow_directory(\"/home/tauri/**\", false).unwrap();\n+      assert!(scope.is_allowed(\"/home/tauri/**\"));\n+      assert!(scope.is_allowed(\"/home/tauri/**/file\"));\n+      assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));\n+    }\n+    #[cfg(windows)]\n+    {\n+      scope.allow_directory(\"C:\\\\home\\\\tauri\\\\**\", false).unwrap();\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));\n+    }\n \n     let scope = new_scope();\n-    scope.allow_file(\"/home/tauri/**\").unwrap();\n-    assert!(scope.is_allowed(\"/home/tauri/**\"));\n-    assert!(!scope.is_allowed(\"/home/tauri/**/file\"));\n-    assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));\n+    #[cfg(unix)]\n+    {\n+      scope.allow_file(\"/home/tauri/**\").unwrap();\n+      assert!(scope.is_allowed(\"/home/tauri/**\"));\n+      assert!(!scope.is_allowed(\"/home/tauri/**/file\"));\n+      assert!(!scope.is_allowed(\"/home/tauri/anyfile\"));\n+    }\n+    #[cfg(windows)]\n+    {\n+      scope.allow_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));\n+    }\n+\n+    let scope = new_scope();\n+    #[cfg(unix)]\n+    {\n+      scope.allow_directory(\"/home/tauri\", true).unwrap();\n+      scope.forbid_directory(\"/home/tauri/**\", false).unwrap();\n+      assert!(!scope.is_allowed(\"/home/tauri/**\"));\n+      assert!(!scope.is_allowed(\"/home/tauri/**/file\"));\n+      assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));\n+      assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));\n+      assert!(scope.is_allowed(\"/home/tauri/anyfile\"));\n+    }\n+    #[cfg(windows)]\n+    {\n+      scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();\n+      scope\n+        .forbid_directory(\"C:\\\\home\\\\tauri\\\\**\", false)\n+        .unwrap();\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\inner\\\\folder\\\\anyfile\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));\n+    }\n \n     let scope = new_scope();\n-    scope.allow_directory(\"/home/tauri\", true).unwrap();\n-    scope.forbid_directory(\"/home/tauri/**\", false).unwrap();\n-    assert!(!scope.is_allowed(\"/home/tauri/**\"));\n-    assert!(!scope.is_allowed(\"/home/tauri/**/file\"));\n-    assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));\n-    assert!(scope.is_allowed(\"/home/tauri/inner/folder/anyfile\"));\n-    assert!(scope.is_allowed(\"/home/tauri/anyfile\"));\n+    #[cfg(unix)]\n+    {\n+      scope.allow_directory(\"/home/tauri\", true).unwrap();\n+      scope.forbid_file(\"/home/tauri/**\").unwrap();\n+      assert!(!scope.is_allowed(\"/home/tauri/**\"));\n+      assert!(scope.is_allowed(\"/home/tauri/**/file\"));\n+      assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));\n+      assert!(scope.is_allowed(\"/home/tauri/anyfile\"));\n+    }\n+    #[cfg(windows)]\n+    {\n+      scope.allow_directory(\"C:\\\\home\\\\tauri\", true).unwrap();\n+      scope.forbid_file(\"C:\\\\home\\\\tauri\\\\**\").unwrap();\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));\n+    }\n \n     let scope = new_scope();\n-    scope.allow_directory(\"/home/tauri\", true).unwrap();\n-    scope.forbid_file(\"/home/tauri/**\").unwrap();\n-    assert!(!scope.is_allowed(\"/home/tauri/**\"));\n-    assert!(scope.is_allowed(\"/home/tauri/**/file\"));\n-    assert!(scope.is_allowed(\"/home/tauri/**/inner/file\"));\n-    assert!(scope.is_allowed(\"/home/tauri/anyfile\"));\n+    #[cfg(unix)]\n+    {\n+      scope.allow_directory(\"/home/tauri\", false).unwrap();\n+      assert!(scope.is_allowed(\"/home/tauri/**\"));\n+      assert!(!scope.is_allowed(\"/home/tauri/**/file\"));\n+      assert!(!scope.is_allowed(\"/home/tauri/**/inner/file\"));\n+      assert!(scope.is_allowed(\"/home/tauri/anyfile\"));\n+    }\n+    #[cfg(windows)]\n+    {\n+      scope.allow_directory(\"C:\\\\home\\\\tauri\", false).unwrap();\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\"));\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\file\"));\n+      assert!(!scope.is_allowed(\"C:\\\\home\\\\tauri\\\\**\\\\inner\\\\file\"));\n+      assert!(scope.is_allowed(\"C:\\\\home\\\\tauri\\\\anyfile\"));\n+    }\n   }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4c3f04773534c0b33ea81bcff6dd7719ef265662",
            "date": "2025-01-13T12:08:29Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "61e69db9e48f6a652ed3ecb05567c648c6e788d0",
            "date": "2025-01-13T11:23:17Z",
            "author_login": "FabianLars"
          },
          {
            "sha": "75d56e8364fb203387bb5a5235f316dd7dfa6acd",
            "date": "2025-01-13T02:03:36Z",
            "author_login": "oscartbeaumont"
          },
          {
            "sha": "a8aca701515a1059b1cdf3abf37e487b21b9bd11",
            "date": "2025-01-11T17:13:55Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "cad5504455ffa53e297cebff473c113b1afa5d29",
            "date": "2025-01-11T16:28:54Z",
            "author_login": "FabianLars"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Tauri is a framework for building binaries for all major desktop platforms. The filesystem glob pattern wildcards `*`, `?`, and `[...]` match file path literals and leading dots by default, which unintentionally exposes sub folder content of allowed paths. Scopes without the wildcards are not affected. As `**` allows for sub directories the behavior there is also as expected. The issue has been patched in the latest release and was backported into the currently supported 1.x branches. There are no known workarounds at the time of publication.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-23T14:15:10.360",
    "last_modified": "2024-11-21T07:30:15.227",
    "fix_date": "2022-12-22T13:53:46Z"
  },
  "references": [
    {
      "url": "https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.203847",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tauri",
    "owner": "tauri-apps",
    "created_at": "2019-07-13T09:09:37Z",
    "updated_at": "2025-01-14T15:28:32Z",
    "pushed_at": "2025-01-14T16:01:17Z",
    "size": 93444,
    "stars": 88352,
    "forks": 2688,
    "open_issues": 943,
    "watchers": 88352,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "1.x",
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.6",
      "dev",
      "next"
    ],
    "languages": {
      "Rust": 2431452,
      "TypeScript": 209615,
      "NSIS": 104592,
      "Kotlin": 63116,
      "JavaScript": 49640,
      "Shell": 43350,
      "Swift": 22030,
      "Dockerfile": 2143,
      "HTML": 2143,
      "PowerShell": 1951,
      "AppleScript": 1828,
      "Svelte": 1727,
      "CSS": 1654,
      "Standard ML": 1348,
      "Ruby": 839,
      "Objective-C": 414,
      "Objective-C++": 100,
      "C++": 82
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:04:01.084221"
  }
}