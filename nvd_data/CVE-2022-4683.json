{
  "cve_id": "CVE-2022-4683",
  "github_data": {
    "repository": "usememos/memos",
    "fix_commit": "7efa749c6628c75b19a912ca170529f5c293bb2e",
    "related_commits": [
      "7efa749c6628c75b19a912ca170529f5c293bb2e",
      "7efa749c6628c75b19a912ca170529f5c293bb2e"
    ],
    "patch_url": "https://github.com/usememos/memos/commit/7efa749c6628c75b19a912ca170529f5c293bb2e.patch",
    "fix_commit_details": {
      "sha": "7efa749c6628c75b19a912ca170529f5c293bb2e",
      "commit_date": "2022-12-22T11:48:44Z",
      "author": {
        "login": "boojack",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: customize system profile (#828)",
        "length": 37,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 312,
        "additions": 171,
        "deletions": 141
      },
      "files": [
        {
          "filename": "api/system_setting.go",
          "status": "modified",
          "additions": 19,
          "deletions": 2,
          "patch": "@@ -3,6 +3,8 @@ package api\n import (\n \t\"encoding/json\"\n \t\"fmt\"\n+\n+\t\"golang.org/x/exp/slices\"\n )\n \n type SystemSettingName string\n@@ -24,6 +26,12 @@ type CustomizedProfile struct {\n \tName string `json:\"name\"`\n \t// IconURL is the url of icon image.\n \tIconURL string `json:\"iconUrl\"`\n+\t// Description is the server description.\n+\tDescription string `json:\"description\"`\n+\t// Locale is the server default locale.\n+\tLocale string `json:\"locale\"`\n+\t// Appearance is the server default appearance.\n+\tAppearance string `json:\"appearance\"`\n \t// ExternalURL is the external url of server. e.g. https://usermemos.com\n \tExternalURL string `json:\"externalUrl\"`\n }\n@@ -90,15 +98,24 @@ func (upsert SystemSettingUpsert) Validate() error {\n \t\t\treturn fmt.Errorf(\"failed to unmarshal system setting additional script value\")\n \t\t}\n \t} else if upsert.Name == SystemSettingCustomizedProfileName {\n-\t\tvalue := CustomizedProfile{\n+\t\tcustomizedProfile := CustomizedProfile{\n \t\t\tName:        \"memos\",\n \t\t\tIconURL:     \"\",\n+\t\t\tDescription: \"\",\n+\t\t\tLocale:      \"en\",\n+\t\t\tAppearance:  \"system\",\n \t\t\tExternalURL: \"\",\n \t\t}\n-\t\terr := json.Unmarshal([]byte(upsert.Value), &value)\n+\t\terr := json.Unmarshal([]byte(upsert.Value), &customizedProfile)\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"failed to unmarshal system setting customized profile value\")\n \t\t}\n+\t\tif !slices.Contains(UserSettingLocaleValue, customizedProfile.Locale) {\n+\t\t\treturn fmt.Errorf(\"invalid locale value\")\n+\t\t}\n+\t\tif !slices.Contains(UserSettingAppearanceValue, customizedProfile.Appearance) {\n+\t\t\treturn fmt.Errorf(\"invalid appearance value\")\n+\t\t}\n \t} else {\n \t\treturn fmt.Errorf(\"invalid system setting name\")\n \t}"
        },
        {
          "filename": "api/user_setting.go",
          "status": "modified",
          "additions": 7,
          "deletions": 37,
          "patch": "@@ -3,6 +3,8 @@ package api\n import (\n \t\"encoding/json\"\n \t\"fmt\"\n+\n+\t\"golang.org/x/exp/slices\"\n )\n \n type UserSettingKey string\n@@ -60,32 +62,16 @@ func (upsert UserSettingUpsert) Validate() error {\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"failed to unmarshal user setting locale value\")\n \t\t}\n-\n-\t\tinvalid := true\n-\t\tfor _, value := range UserSettingLocaleValue {\n-\t\t\tif localeValue == value {\n-\t\t\t\tinvalid = false\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tif invalid {\n+\t\tif !slices.Contains(UserSettingLocaleValue, localeValue) {\n \t\t\treturn fmt.Errorf(\"invalid user setting locale value\")\n \t\t}\n \t} else if upsert.Key == UserSettingAppearanceKey {\n-\t\tappearanceValue := \"light\"\n+\t\tappearanceValue := \"system\"\n \t\terr := json.Unmarshal([]byte(upsert.Value), &appearanceValue)\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"failed to unmarshal user setting appearance value\")\n \t\t}\n-\n-\t\tinvalid := true\n-\t\tfor _, value := range UserSettingAppearanceValue {\n-\t\t\tif appearanceValue == value {\n-\t\t\t\tinvalid = false\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tif invalid {\n+\t\tif !slices.Contains(UserSettingAppearanceValue, appearanceValue) {\n \t\t\treturn fmt.Errorf(\"invalid user setting appearance value\")\n \t\t}\n \t} else if upsert.Key == UserSettingMemoVisibilityKey {\n@@ -94,15 +80,7 @@ func (upsert UserSettingUpsert) Validate() error {\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"failed to unmarshal user setting memo visibility value\")\n \t\t}\n-\n-\t\tinvalid := true\n-\t\tfor _, value := range UserSettingMemoVisibilityValue {\n-\t\t\tif memoVisibilityValue == value {\n-\t\t\t\tinvalid = false\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tif invalid {\n+\t\tif !slices.Contains(UserSettingMemoVisibilityValue, memoVisibilityValue) {\n \t\t\treturn fmt.Errorf(\"invalid user setting memo visibility value\")\n \t\t}\n \t} else if upsert.Key == UserSettingMemoDisplayTsOptionKey {\n@@ -111,15 +89,7 @@ func (upsert UserSettingUpsert) Validate() error {\n \t\tif err != nil {\n \t\t\treturn fmt.Errorf(\"failed to unmarshal user setting memo display ts option\")\n \t\t}\n-\n-\t\tinvalid := true\n-\t\tfor _, value := range UserSettingMemoDisplayTsOptionKeyValue {\n-\t\t\tif memoDisplayTsOption == value {\n-\t\t\t\tinvalid = false\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tif invalid {\n+\t\tif !slices.Contains(UserSettingMemoDisplayTsOptionKeyValue, memoDisplayTsOption) {\n \t\t\treturn fmt.Errorf(\"invalid user setting memo display ts option value\")\n \t\t}\n \t} else {"
        },
        {
          "filename": "go.mod",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -38,11 +38,14 @@ require (\n \tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n \tgithub.com/valyala/fasttemplate v1.2.1 // indirect\n \tgithub.com/xtgo/uuid v0.0.0-20140804021211-a0b114877d4c // indirect\n-\tgolang.org/x/sys v0.0.0-20220728004956-3c1f35247d10 // indirect\n+\tgolang.org/x/sys v0.1.0 // indirect\n \tgolang.org/x/text v0.3.7 // indirect\n \tgolang.org/x/time v0.0.0-20220722155302-e5dcc9cfc0b9 // indirect\n \tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\n \tgopkg.in/yaml.v3 v3.0.1 // indirect\n )\n \n-require github.com/segmentio/analytics-go v3.1.0+incompatible\n+require (\n+\tgithub.com/segmentio/analytics-go v3.1.0+incompatible\n+\tgolang.org/x/exp v0.0.0-20221217163422-3c43f8badb15\n+)"
        },
        {
          "filename": "go.sum",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -70,14 +70,16 @@ github.com/xtgo/uuid v0.0.0-20140804021211-a0b114877d4c h1:3lbZUMbMiGUW/LMkfsEAB\n github.com/xtgo/uuid v0.0.0-20140804021211-a0b114877d4c/go.mod h1:UrdRz5enIKZ63MEE3IF9l2/ebyx59GyGgPi+tICQdmM=\n golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa h1:zuSxTR4o9y82ebqCUJYNGJbGPo6sKVl54f/TVDObg1c=\n golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\n+golang.org/x/exp v0.0.0-20221217163422-3c43f8badb15 h1:5oN1Pz/eDhCpbMbLstvIPa0b/BEQo6g6nwV3pLjfM6w=\n+golang.org/x/exp v0.0.0-20221217163422-3c43f8badb15/go.mod h1:CxIveKay+FTh1D0yPZemJVgC/95VzuuOLq5Qi4xnoYc=\n golang.org/x/net v0.0.0-20220728030405-41545e8bf201 h1:bvOltf3SADAfG05iRml8lAB3qjoEX5RCyN4K6G5v3N0=\n golang.org/x/net v0.0.0-20220728030405-41545e8bf201/go.mod h1:YDH+HFinaLZZlnHAfSS6ZXJJ9M9t4Dl22yv3iI2vPwk=\n golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.0.0-20211103235746-7861aae1554b/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/sys v0.0.0-20220405052023-b1e9470b6e64/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n-golang.org/x/sys v0.0.0-20220728004956-3c1f35247d10 h1:WIoqL4EROvwiPdUtaip4VcDdpZ4kha7wBWZrbVKCIZg=\n-golang.org/x/sys v0.0.0-20220728004956-3c1f35247d10/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n+golang.org/x/sys v0.1.0 h1:kunALQeHf1/185U1i0GOB/fy1IPRDDpuoOOqRReG57U=\n+golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\n golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\n golang.org/x/time v0.0.0-20220722155302-e5dcc9cfc0b9 h1:ftMN5LMiBFjbzleLqtoBZk7KdJwhuybIU+FckUHgoyQ="
        },
        {
          "filename": "server/acl.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -27,6 +27,7 @@ func setUserSession(ctx echo.Context, user *api.User) error {\n \t\tPath:     \"/\",\n \t\tMaxAge:   3600 * 24 * 30,\n \t\tHttpOnly: true,\n+\t\tSecure:   true,\n \t}\n \tsess.Values[userIDContextKey] = user.ID\n \terr := sess.Save(ctx.Request(), ctx.Response())"
        },
        {
          "filename": "server/system.go",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -47,7 +47,12 @@ func (s *Server) registerSystemRoutes(g *echo.Group) {\n \t\t\tAdditionalStyle:  \"\",\n \t\t\tAdditionalScript: \"\",\n \t\t\tCustomizedProfile: api.CustomizedProfile{\n-\t\t\t\tName: \"memos\",\n+\t\t\t\tName:        \"memos\",\n+\t\t\t\tIconURL:     \"\",\n+\t\t\t\tDescription: \"\",\n+\t\t\t\tLocale:      \"en\",\n+\t\t\t\tAppearance:  \"system\",\n+\t\t\t\tExternalURL: \"\",\n \t\t\t},\n \t\t}\n \n@@ -73,6 +78,9 @@ func (s *Server) registerSystemRoutes(g *echo.Group) {\n \t\t\t\tsystemStatus.CustomizedProfile = api.CustomizedProfile{\n \t\t\t\t\tName:        valueMap[\"name\"].(string),\n \t\t\t\t\tIconURL:     valueMap[\"iconUrl\"].(string),\n+\t\t\t\t\tDescription: valueMap[\"description\"].(string),\n+\t\t\t\t\tLocale:      valueMap[\"locale\"].(string),\n+\t\t\t\t\tAppearance:  valueMap[\"appearance\"].(string),\n \t\t\t\t\tExternalURL: valueMap[\"externalUrl\"].(string),\n \t\t\t\t}\n \t\t\t}"
        },
        {
          "filename": "web/src/components/AppearanceSelect.tsx",
          "status": "modified",
          "additions": 13,
          "deletions": 13,
          "patch": "@@ -1,16 +1,19 @@\n import { Option, Select } from \"@mui/joy\";\n+import { FC } from \"react\";\n import { useTranslation } from \"react-i18next\";\n-import { useGlobalStore, useUserStore } from \"../store/module\";\n import Icon from \"./Icon\";\n \n+interface Props {\n+  value: Appearance;\n+  onChange: (appearance: Appearance) => void;\n+  className?: string;\n+}\n+\n const appearanceList = [\"system\", \"light\", \"dark\"];\n \n-const AppearanceSelect = () => {\n+const AppearanceSelect: FC<Props> = (props: Props) => {\n+  const { onChange, value, className } = props;\n   const { t } = useTranslation();\n-  const globalStore = useGlobalStore();\n-  const userStore = useUserStore();\n-  const { appearance } = globalStore.state;\n-  const user = userStore.state.user;\n \n   const getPrefixIcon = (apperance: Appearance) => {\n     const className = \"w-4 h-auto\";\n@@ -24,22 +27,19 @@ const AppearanceSelect = () => {\n   };\n \n   const handleSelectChange = async (appearance: Appearance) => {\n-    if (user) {\n-      await userStore.upsertUserSetting(\"appearance\", appearance);\n-    }\n-    globalStore.setAppearance(appearance);\n+    onChange(appearance);\n   };\n \n   return (\n     <Select\n-      className=\"!min-w-[10rem] w-auto text-sm\"\n-      value={appearance}\n+      className={`!min-w-[10rem] w-auto whitespace-nowrap ${className ?? \"\"}`}\n+      value={value}\n       onChange={(_, appearance) => {\n         if (appearance) {\n           handleSelectChange(appearance);\n         }\n       }}\n-      startDecorator={getPrefixIcon(appearance)}\n+      startDecorator={getPrefixIcon(value)}\n     >\n       {appearanceList.map((item) => (\n         <Option key={item} value={item} className=\"whitespace-nowrap\">"
        },
        {
          "filename": "web/src/components/LocaleSelect.tsx",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -0,0 +1,37 @@\n+import { Option, Select } from \"@mui/joy\";\n+import { FC } from \"react\";\n+import Icon from \"./Icon\";\n+\n+interface Props {\n+  value: Locale;\n+  onChange: (locale: Locale) => void;\n+  className?: string;\n+}\n+\n+const LocaleSelect: FC<Props> = (props: Props) => {\n+  const { onChange, value, className } = props;\n+\n+  const handleSelectChange = async (locale: Locale) => {\n+    onChange(locale);\n+  };\n+\n+  return (\n+    <Select\n+      className={`!min-w-[10rem] w-auto whitespace-nowrap ${className ?? \"\"}`}\n+      startDecorator={<Icon.Globe className=\"w-4 h-auto\" />}\n+      value={value}\n+      onChange={(_, value) => handleSelectChange(value as Locale)}\n+    >\n+      <Option value=\"en\">English</Option>\n+      <Option value=\"zh\">\u4e2d\u6587</Option>\n+      <Option value=\"vi\">Ti\u1ebfng Vi\u1ec7t</Option>\n+      <Option value=\"fr\">French</Option>\n+      <Option value=\"nl\">Nederlands</Option>\n+      <Option value=\"sv\">Svenska</Option>\n+      <Option value=\"de\">German</Option>\n+      <Option value=\"es\">Espa\u00f1ol</Option>\n+    </Select>\n+  );\n+};\n+\n+export default LocaleSelect;"
        },
        {
          "filename": "web/src/components/Settings/PreferencesSection.tsx",
          "status": "modified",
          "additions": 12,
          "deletions": 56,
          "patch": "@@ -2,49 +2,15 @@ import { Select, Switch, Option } from \"@mui/joy\";\n import { useTranslation } from \"react-i18next\";\n import { useGlobalStore, useUserStore } from \"../../store/module\";\n import { VISIBILITY_SELECTOR_ITEMS, MEMO_DISPLAY_TS_OPTION_SELECTOR_ITEMS } from \"../../helpers/consts\";\n-import Icon from \"../Icon\";\n import AppearanceSelect from \"../AppearanceSelect\";\n+import LocaleSelect from \"../LocaleSelect\";\n import \"../../less/settings/preferences-section.less\";\n \n-const localeSelectorItems = [\n-  {\n-    text: \"English\",\n-    value: \"en\",\n-  },\n-  {\n-    text: \"\u4e2d\u6587\",\n-    value: \"zh\",\n-  },\n-  {\n-    text: \"Ti\u1ebfng Vi\u1ec7t\",\n-    value: \"vi\",\n-  },\n-  {\n-    text: \"French\",\n-    value: \"fr\",\n-  },\n-  {\n-    text: \"Nederlands\",\n-    value: \"nl\",\n-  },\n-  {\n-    text: \"Svenska\",\n-    value: \"sv\",\n-  },\n-  {\n-    text: \"German\",\n-    value: \"de\",\n-  },\n-  {\n-    text: \"Espa\u00f1ol\",\n-    value: \"es\",\n-  },\n-];\n-\n const PreferencesSection = () => {\n   const { t } = useTranslation();\n   const globalStore = useGlobalStore();\n   const userStore = useUserStore();\n+  const { appearance, locale } = globalStore.state;\n   const { setting, localSetting } = userStore.state.user as User;\n   const visibilitySelectorItems = VISIBILITY_SELECTOR_ITEMS.map((item) => {\n     return {\n@@ -60,9 +26,14 @@ const PreferencesSection = () => {\n     };\n   });\n \n-  const handleLocaleChanged = async (value: string) => {\n-    await userStore.upsertUserSetting(\"locale\", value);\n-    globalStore.setLocale(value as Locale);\n+  const handleLocaleSelectChange = async (locale: Locale) => {\n+    await userStore.upsertUserSetting(\"locale\", locale);\n+    globalStore.setLocale(locale);\n+  };\n+\n+  const handleAppearanceSelectChange = async (appearance: Appearance) => {\n+    await userStore.upsertUserSetting(\"appearance\", appearance);\n+    globalStore.setAppearance(appearance);\n   };\n \n   const handleDefaultMemoVisibilityChanged = async (value: string) => {\n@@ -82,26 +53,11 @@ const PreferencesSection = () => {\n       <p className=\"title-text\">{t(\"common.basic\")}</p>\n       <div className=\"form-label selector\">\n         <span className=\"normal-text\">{t(\"common.language\")}</span>\n-        <Select\n-          className=\"!min-w-[10rem] w-auto text-sm\"\n-          value={setting.locale}\n-          onChange={(_, locale) => {\n-            if (locale) {\n-              handleLocaleChanged(locale);\n-            }\n-          }}\n-          startDecorator={<Icon.Globe className=\"w-4 h-auto\" />}\n-        >\n-          {localeSelectorItems.map((item) => (\n-            <Option key={item.value} value={item.value} className=\"whitespace-nowrap\">\n-              {item.text}\n-            </Option>\n-          ))}\n-        </Select>\n+        <LocaleSelect value={locale} onChange={handleLocaleSelectChange} />\n       </div>\n       <div className=\"form-label selector\">\n         <span className=\"normal-text\">{t(\"setting.preference-section.theme\")}</span>\n-        <AppearanceSelect />\n+        <AppearanceSelect value={appearance} onChange={handleAppearanceSelectChange} />\n       </div>\n       <p className=\"title-text\">{t(\"setting.preference\")}</p>\n       <div className=\"form-label selector\">"
        },
        {
          "filename": "web/src/components/UpdateCustomizedProfileDialog.tsx",
          "status": "modified",
          "additions": 37,
          "deletions": 2,
          "patch": "@@ -5,6 +5,8 @@ import * as api from \"../helpers/api\";\n import Icon from \"./Icon\";\n import { generateDialog } from \"./Dialog\";\n import toastHelper from \"./Toast\";\n+import LocaleSelect from \"./LocaleSelect\";\n+import AppearanceSelect from \"./AppearanceSelect\";\n \n type Props = DialogProps;\n \n@@ -39,6 +41,33 @@ const UpdateCustomizedProfileDialog: React.FC<Props> = ({ destroy }: Props) => {\n     });\n   };\n \n+  const handleDescriptionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n+    setState((state) => {\n+      return {\n+        ...state,\n+        description: e.target.value as string,\n+      };\n+    });\n+  };\n+\n+  const handleLocaleSelectChange = (locale: Locale) => {\n+    setState((state) => {\n+      return {\n+        ...state,\n+        locale: locale,\n+      };\n+    });\n+  };\n+\n+  const handleAppearanceSelectChange = (appearance: Appearance) => {\n+    setState((state) => {\n+      return {\n+        ...state,\n+        appearance: appearance,\n+      };\n+    });\n+  };\n+\n   const handleSaveBtnClick = async () => {\n     if (state.name === \"\" || state.iconUrl === \"\") {\n       toastHelper.error(t(\"message.fill-all\"));\n@@ -61,20 +90,26 @@ const UpdateCustomizedProfileDialog: React.FC<Props> = ({ destroy }: Props) => {\n \n   return (\n     <>\n-      <div className=\"dialog-header-container !w-64\">\n+      <div className=\"dialog-header-container\">\n         <p className=\"title-text\">{t(\"setting.system-section.customize-server.title\")}</p>\n         <button className=\"btn close-btn\" onClick={handleCloseBtnClick}>\n           <Icon.X />\n         </button>\n       </div>\n-      <div className=\"dialog-content-container\">\n+      <div className=\"dialog-content-container !w-80\">\n         <p className=\"text-sm mb-1\">\n           {t(\"setting.system-section.server-name\")}\n           <span className=\"text-sm text-gray-400 ml-1\">({t(\"setting.system-section.customize-server.default\")})</span>\n         </p>\n         <input type=\"text\" className=\"input-text\" value={state.name} onChange={handleNameChanged} />\n         <p className=\"text-sm mb-1 mt-2\">{t(\"setting.system-section.customize-server.icon-url\")}</p>\n         <input type=\"text\" className=\"input-text\" value={state.iconUrl} onChange={handleIconUrlChanged} />\n+        <p className=\"text-sm mb-1 mt-2\">Description</p>\n+        <input type=\"text\" className=\"input-text\" value={state.description} onChange={handleDescriptionChanged} />\n+        <p className=\"text-sm mb-1 mt-2\">Server locale</p>\n+        <LocaleSelect className=\"w-full\" value={state.locale} onChange={handleLocaleSelectChange} />\n+        <p className=\"text-sm mb-1 mt-2\">Server appearance</p>\n+        <AppearanceSelect className=\"w-full\" value={state.appearance} onChange={handleAppearanceSelectChange} />\n         <div className=\"mt-4 w-full flex flex-row justify-end items-center space-x-2\">\n           <span className=\"btn-text\" onClick={handleCloseBtnClick}>\n             {t(\"common.cancel\")}"
        },
        {
          "filename": "web/src/pages/Auth.tsx",
          "status": "modified",
          "additions": 14,
          "deletions": 24,
          "patch": "@@ -1,4 +1,3 @@\n-import { Option, Select } from \"@mui/joy\";\n import { useEffect, useState } from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { useNavigate } from \"react-router-dom\";\n@@ -9,6 +8,7 @@ import useLoading from \"../hooks/useLoading\";\n import Icon from \"../components/Icon\";\n import toastHelper from \"../components/Toast\";\n import AppearanceSelect from \"../components/AppearanceSelect\";\n+import LocaleSelect from \"../components/LocaleSelect\";\n import \"../less/auth.less\";\n \n const validateConfig: ValidatorConfig = {\n@@ -19,12 +19,12 @@ const validateConfig: ValidatorConfig = {\n };\n \n const Auth = () => {\n-  const { t, i18n } = useTranslation();\n+  const { t } = useTranslation();\n   const navigate = useNavigate();\n   const globalStore = useGlobalStore();\n   const userStore = useUserStore();\n   const actionBtnLoadingState = useLoading(false);\n-  const systemStatus = globalStore.state.systemStatus;\n+  const { appearance, locale, systemStatus } = globalStore.state;\n   const mode = systemStatus.profile.mode;\n   const [username, setUsername] = useState(mode === \"dev\" ? \"demohero\" : \"\");\n   const [password, setPassword] = useState(mode === \"dev\" ? \"secret\" : \"\");\n@@ -43,6 +43,14 @@ const Auth = () => {\n     setPassword(text);\n   };\n \n+  const handleLocaleSelectChange = (locale: Locale) => {\n+    globalStore.setLocale(locale);\n+  };\n+\n+  const handleAppearanceSelectChange = (appearance: Appearance) => {\n+    globalStore.setAppearance(appearance);\n+  };\n+\n   const handleSigninBtnsClick = async () => {\n     if (actionBtnLoadingState.isLoading) {\n       return;\n@@ -109,10 +117,6 @@ const Auth = () => {\n     actionBtnLoadingState.setFinish();\n   };\n \n-  const handleLocaleItemClick = (locale: Locale) => {\n-    globalStore.setLocale(locale);\n-  };\n-\n   return (\n     <div className=\"page-wrapper auth\">\n       <div className=\"page-container\">\n@@ -122,7 +126,7 @@ const Auth = () => {\n               <img className=\"logo-img\" src={systemStatus.customizedProfile.iconUrl} alt=\"\" />\n               <p className=\"logo-text\">{systemStatus.customizedProfile.name}</p>\n             </div>\n-            <p className=\"slogan-text\">{t(\"slogan\")}</p>\n+            <p className=\"slogan-text\">{systemStatus.customizedProfile.description || t(\"slogan\")}</p>\n           </div>\n           <div className={`page-content-container ${actionBtnLoadingState.isLoading ? \"requesting\" : \"\"}`}>\n             <div className=\"form-item-container input-form-container\">\n@@ -167,22 +171,8 @@ const Auth = () => {\n           {!systemStatus?.host && <p className=\"tip-text\">{t(\"auth.host-tip\")}</p>}\n         </div>\n         <div className=\"flex flex-row items-center justify-center w-full gap-2\">\n-          <Select\n-            className=\"!min-w-[9rem] w-auto whitespace-nowrap\"\n-            startDecorator={<Icon.Globe className=\"w-4 h-auto\" />}\n-            value={i18n.language}\n-            onChange={(_, value) => handleLocaleItemClick(value as Locale)}\n-          >\n-            <Option value=\"en\">English</Option>\n-            <Option value=\"zh\">\u4e2d\u6587</Option>\n-            <Option value=\"vi\">Ti\u1ebfng Vi\u1ec7t</Option>\n-            <Option value=\"fr\">French</Option>\n-            <Option value=\"nl\">Nederlands</Option>\n-            <Option value=\"sv\">Svenska</Option>\n-            <Option value=\"de\">German</Option>\n-            <Option value=\"es\">Espa\u00f1ol</Option>\n-          </Select>\n-          <AppearanceSelect />\n+          <LocaleSelect value={locale} onChange={handleLocaleSelectChange} />\n+          <AppearanceSelect value={appearance} onChange={handleAppearanceSelectChange} />\n         </div>\n       </div>\n     </div>"
        },
        {
          "filename": "web/src/store/module/global.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -13,7 +13,10 @@ export const initialGlobalState = async () => {\n       additionalScript: \"\",\n       customizedProfile: {\n         name: \"memos\",\n-        iconUrl: \"/logo.webp\",\n+        iconUrl: \"https://usememos.com/logo.webp\",\n+        description: \"\",\n+        locale: \"en\",\n+        appearance: \"system\",\n         externalUrl: \"\",\n       },\n     } as SystemStatus,\n@@ -31,6 +34,8 @@ export const initialGlobalState = async () => {\n     const { data } = (await api.getSystemStatus()).data;\n     if (data) {\n       defaultGlobalState.systemStatus = data;\n+      defaultGlobalState.locale = data.customizedProfile.locale;\n+      defaultGlobalState.appearance = data.customizedProfile.appearance;\n     }\n   } catch (error) {\n     // do nth"
        },
        {
          "filename": "web/src/store/reducer/global.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -23,7 +23,10 @@ const globalSlice = createSlice({\n       additionalScript: \"\",\n       customizedProfile: {\n         name: \"memos\",\n-        iconUrl: \"/logo.webp\",\n+        iconUrl: \"https://usememos.com/logo.webp\",\n+        description: \"\",\n+        locale: \"en\",\n+        appearance: \"system\",\n         externalUrl: \"\",\n       },\n     },"
        },
        {
          "filename": "web/src/types/modules/system.d.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -6,6 +6,9 @@ interface Profile {\n interface CustomizedProfile {\n   name: string;\n   iconUrl: string;\n+  description: string;\n+  locale: Locale;\n+  appearance: Appearance;\n   externalUrl: string;\n }\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8b65d248b1e271f74fbd28df041c560cde1c6991",
            "date": "2025-01-13T16:05:33Z",
            "author_login": "boojack"
          },
          {
            "sha": "ee96465be06f0e69880ab5443676928cb8cb4bd2",
            "date": "2025-01-13T15:14:44Z",
            "author_login": "johnnyjoygh"
          },
          {
            "sha": "cde058c72ac5944a3d6909cf82f10942d0627ee3",
            "date": "2025-01-13T11:46:06Z",
            "author_login": "johnnyjoygh"
          },
          {
            "sha": "94517490f5bf65010a56a19889b2453e6952d622",
            "date": "2025-01-13T11:44:53Z",
            "author_login": "X1Vi"
          },
          {
            "sha": "d050a6fd4602d08573288cbb45b0856fe692b302",
            "date": "2025-01-11T12:12:02Z",
            "author_login": "johnnyjoygh"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-614",
    "description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository usememos/memos prior to 0.9.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-23T12:15:08.627",
    "last_modified": "2024-11-21T07:35:43.680",
    "fix_date": "2022-12-22T11:48:44Z"
  },
  "references": [
    {
      "url": "https://github.com/usememos/memos/commit/7efa749c6628c75b19a912ca170529f5c293bb2e",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/84973f6b-739a-4d7e-8757-fc58cbbaf6ef",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/usememos/memos/commit/7efa749c6628c75b19a912ca170529f5c293bb2e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/84973f6b-739a-4d7e-8757-fc58cbbaf6ef",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.202786",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "memos",
    "owner": "usememos",
    "created_at": "2021-12-08T15:30:18Z",
    "updated_at": "2025-01-14T12:48:48Z",
    "pushed_at": "2025-01-13T16:05:42Z",
    "size": 32666,
    "stars": 35917,
    "forks": 2577,
    "open_issues": 27,
    "watchers": 35917,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 491864,
      "TypeScript": 430326,
      "Less": 2572,
      "JavaScript": 1558,
      "HTML": 1074,
      "Dockerfile": 900,
      "Shell": 500,
      "CSS": 439
    },
    "commit_activity": {
      "total_commits_last_year": 1082,
      "avg_commits_per_week": 20.807692307692307,
      "days_active_last_year": 257
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:15:47.491461"
  }
}