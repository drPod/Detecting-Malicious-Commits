{
  "cve_id": "CVE-2022-4722",
  "github_data": {
    "repository": "ikus060/rdiffweb",
    "fix_commit": "d1aaa96b665a39fba9e98d6054a9de511ba0a837",
    "related_commits": [
      "d1aaa96b665a39fba9e98d6054a9de511ba0a837",
      "d1aaa96b665a39fba9e98d6054a9de511ba0a837"
    ],
    "patch_url": "https://github.com/ikus060/rdiffweb/commit/d1aaa96b665a39fba9e98d6054a9de511ba0a837.patch",
    "fix_commit_details": {
      "sha": "d1aaa96b665a39fba9e98d6054a9de511ba0a837",
      "commit_date": "2022-12-23T01:33:38Z",
      "author": {
        "login": "ikus060",
        "type": "User",
        "stats": {
          "total_commits": 1123,
          "average_weekly_commits": 1.757433489827856,
          "total_additions": 294030,
          "total_deletions": 240959,
          "weeks_active": 268
        }
      },
      "commit_message": {
        "title": "Make username case-insensitive",
        "length": 30,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 167,
        "additions": 119,
        "deletions": 48
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -26,7 +26,7 @@ by [rdiff-backup](https://rdiff-backup.net/). The purpose of this\n application is to ease the management of backups and quickly restore your data\n with a rich and powerful web interface.\n \n-Rdiffweb is written in Python and is released as open source project under the \n+Rdiffweb is written in Python and is released as open source project under the\n GNU GENERAL PUBLIC LICENSE (GPL). All source code and documentation are\n Copyright Rdiffweb contributors.\n \n@@ -36,7 +36,7 @@ since November 2014.\n The Rdiffweb source code is hosted on [Gitlab](https://gitlab.com/ikus-soft/rdiffweb)\n and mirrored to [Github](https://github.com/ikus060/rdiffweb).\n \n-The Rdiffweb website is https://rdiffweb.org/.\n+The Rdiffweb website is <https://rdiffweb.org/>.\n \n ## Features\n \n@@ -100,7 +100,7 @@ Rdiffweb users should use the [Rdiffweb mailing list](https://groups.google.com/\n \n ### Bug Reports\n \n-Bug reports should be reported on the Rdiffweb Gitlab at https://gitlab.com/ikus-soft/rdiffweb/-/issues\n+Bug reports should be reported on the Rdiffweb Gitlab at <https://gitlab.com/ikus-soft/rdiffweb/-/issues>\n \n ### Professional support\n \n@@ -114,6 +114,11 @@ Professional support for Rdiffweb is available by contacting [IKUS Soft](https:/\n * Ensure Gmail and other mail client doesn't create hyperlink automatically for any nodification sent by Rdiffweb to avoid phishing - credit to [Nehal Pillai](https://www.linkedin.com/in/nehal-pillai-02a854172)\n * Sent email notification to user when a new SSH Key get added - credit to [Nehal Pillai](https://www.linkedin.com/in/nehal-pillai-02a854172)\n * Ratelimit \"Resend code to my email\" in Two-Factor Authentication view - credit to [Nehal Pillai](https://www.linkedin.com/in/nehal-pillai-02a854172)\n+* Username are not case-insensitive - credits to [raiders0786](https://www.linkedin.com/in/chirag-agrawal-770488144/)\n+\n+Breaking changes:\n+\n+* Username with different cases (e.g.: admin vs Ammin) are not supported. If your database contains such username make sure to remove them before upgrading otherwise Rdiffweb will not start.\n \n ## 2.5.4 (2022-12-19)\n \n@@ -378,7 +383,7 @@ Maintenance release to fix minor issues\n \n ## 2.1.0 (2021-01-15)\n \n-* Debian package: Remove dh-systemd from Debian build dependencies (https://bugs.debian.org/871312we)\n+* Debian package: Remove dh-systemd from Debian build dependencies (<https://bugs.debian.org/871312we>)\n * Improve Quota management:\n   * `QuotaSetCmd`, `QuotaGetCmd` and `QuotaUsedCmd` options could be used to customize how to set the quota for your environment.\n   * Display user's quota in User View"
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_login.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -64,6 +64,15 @@ def test_login_success(self):\n         self.assertEqual('admin', session.get(SESSION_KEY))\n         self.assertIsNotNone(session.get(LOGIN_TIME))\n \n+    def test_login_case_insensitive(self):\n+        # When authenticating with valid credentials with all uppercase username\n+        self.getPage('/login/', method='POST', body={'login': self.USERNAME.upper(), 'password': self.PASSWORD})\n+        # Then a new session_id is generated\n+        self.assertStatus('303 See Other')\n+        self.assertHeaderItemValue('Location', self.baseurl + '/')\n+        self.getPage('/')\n+        self.assertStatus(200)\n+\n     def test_cookie_http_only(self):\n         # Given a request made to rdiffweb\n         # When receiving the response"
        },
        {
          "filename": "rdiffweb/controller/tests/test_page_prefs_general.py",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -85,8 +85,8 @@ def test_change_username_noop(self):\n         self.assertStatus(303)\n         self.getPage(self.PREFS)\n         self.assertInBody(\"Profile updated successfully.\")\n-        # Then database is updated with fullname\n-        user = UserObject.query.filter(UserObject.username == self.USERNAME).first()\n+        # Then database is not updated with new username.\n+        user = UserObject.get_user(self.USERNAME)\n         self.assertIsNotNone(user)\n         self.assertEqual(\"test@test.com\", user.email)\n \n@@ -112,7 +112,7 @@ def test_change_fullname(self, new_fullname, expected_valid):\n             self.assertInBody(\"Profile updated successfully.\")\n             # Then database is updated with fullname\n             self.assertInBody(new_fullname)\n-            user = UserObject.query.filter(UserObject.username == self.USERNAME).first()\n+            user = UserObject.get_user(self.USERNAME)\n             self.assertEqual(new_fullname, user.fullname)\n         else:\n             self.assertStatus(200)\n@@ -125,7 +125,7 @@ def test_change_fullname_method_get(self):\n         # Then nothing happen\n         self.assertStatus(200)\n         self.assertNotInBody(\"Profile updated successfully.\")\n-        user = UserObject.query.filter(UserObject.username == self.USERNAME).first()\n+        user = UserObject.get_user(self.USERNAME)\n         self.assertEqual(\"\", user.fullname)\n \n     def test_change_fullname_too_long(self):\n@@ -137,7 +137,7 @@ def test_change_fullname_too_long(self):\n         self.assertNotInBody(\"Profile updated successfully.\")\n         self.assertInBody(\"Fullname too long.\")\n         # Then database is not updated\n-        user = UserObject.query.filter(UserObject.username == self.USERNAME).first()\n+        user = UserObject.get_user(self.USERNAME)\n         self.assertEqual(\"\", user.fullname)\n \n     def test_change_email(self):"
        },
        {
          "filename": "rdiffweb/core/login.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -50,7 +50,7 @@ def authenticate(self, username, password):\n         \"\"\"\n         Only verify the user's credentials using the database store.\n         \"\"\"\n-        user = UserObject.query.filter_by(username=username).first()\n+        user = UserObject.get_user(username)\n         if user and user.validate_password(password):\n             return username, {}\n         return False\n@@ -69,7 +69,7 @@ def login(self, username, password):\n         fullname = extra_attrs.get('_fullname', None)\n         email = extra_attrs.get('_email', None)\n         # When enabled, create missing userobj in database.\n-        userobj = UserObject.query.filter_by(username=username).first()\n+        userobj = UserObject.get_user(username)\n         if userobj is None and self.add_missing_user:\n             try:\n                 # At this point, we need to create a new user in database."
        },
        {
          "filename": "rdiffweb/core/model/__init__.py",
          "status": "modified",
          "additions": 68,
          "deletions": 32,
          "patch": "@@ -15,74 +15,91 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n+import logging\n+import sys\n+\n import cherrypy\n from sqlalchemy import event\n+from sqlalchemy.exc import IntegrityError\n \n from ._repo import RepoObject  # noqa\n from ._session import DbSession, SessionObject  # noqa\n from ._sshkey import SshKey  # noqa\n from ._token import Token  # noqa\n-from ._user import DuplicateSSHKeyError, UserObject  # noqa\n+from ._user import DuplicateSSHKeyError, UserObject, user_username_index  # noqa\n \n Base = cherrypy.tools.db.get_base()\n \n+logger = logging.getLogger(__name__)\n+\n+\n+def _column_add(connection, column):\n+    if _column_exists(connection, column):\n+        return\n+    table_name = column.table.fullname\n+    column_name = column.name\n+    column_type = column.type.compile(connection.engine.dialect)\n+    connection.engine.execute('ALTER TABLE %s ADD COLUMN %s %s' % (table_name, column_name, column_type))\n+\n+\n+def _column_exists(connection, column):\n+    table_name = column.table.fullname\n+    column_name = column.name\n+    if 'SQLite' in connection.engine.dialect.__class__.__name__:\n+        sql = \"SELECT COUNT(*) FROM pragma_table_info('%s') WHERE LOWER(name)=LOWER('%s')\" % (\n+            table_name,\n+            column_name,\n+        )\n+    else:\n+        sql = \"SELECT COUNT(*) FROM information_schema.columns WHERE table_name='%s' and column_name='%s'\" % (\n+            table_name,\n+            column_name,\n+        )\n+    data = connection.engine.execute(sql).first()\n+    return data[0] >= 1\n+\n+\n+def _index_exists(connection, index_name):\n+    if 'SQLite' in connection.engine.dialect.__class__.__name__:\n+        sql = \"SELECT name FROM sqlite_master WHERE type = 'index' AND name = '%s';\" % (index_name)\n+    else:\n+        sql = \"SELECT * FROM pg_indexes WHERE indexname = '%s'\" % (index_name)\n+    return connection.engine.execute(sql).first() is not None\n+\n \n @event.listens_for(Base.metadata, 'after_create')\n def db_after_create(target, connection, **kw):\n     \"\"\"\n     Called on database creation to update database schema.\n     \"\"\"\n \n-    def exists(column):\n-        table_name = column.table.fullname\n-        column_name = column.name\n-        if 'SQLite' in connection.engine.dialect.__class__.__name__:\n-            sql = \"SELECT COUNT(*) FROM pragma_table_info('%s') WHERE LOWER(name)=LOWER('%s')\" % (\n-                table_name,\n-                column_name,\n-            )\n-        else:\n-            sql = \"SELECT COUNT(*) FROM information_schema.columns WHERE table_name='%s' and column_name='%s'\" % (\n-                table_name,\n-                column_name,\n-            )\n-        data = connection.engine.execute(sql).first()\n-        return data[0] >= 1\n-\n-    def add_column(column):\n-        if exists(column):\n-            return\n-        table_name = column.table.fullname\n-        column_name = column.name\n-        column_type = column.type.compile(connection.engine.dialect)\n-        connection.engine.execute('ALTER TABLE %s ADD COLUMN %s %s' % (table_name, column_name, column_type))\n-\n     if getattr(connection, '_transaction', None):\n         connection._transaction.commit()\n \n     # Add repo's Encoding\n-    add_column(RepoObject.__table__.c.Encoding)\n-    add_column(RepoObject.__table__.c.keepdays)\n+    _column_add(connection, RepoObject.__table__.c.Encoding)\n+    _column_add(connection, RepoObject.__table__.c.keepdays)\n \n     # Create column for roles using \"isadmin\" column. Keep the\n     # original column in case we need to revert to previous version.\n-    if not exists(UserObject.__table__.c.role):\n-        add_column(UserObject.__table__.c.role)\n+    if not _column_exists(connection, UserObject.__table__.c.role):\n+        _column_add(connection, UserObject.__table__.c.role)\n         UserObject.query.filter(UserObject._is_admin == 1).update({UserObject.role: UserObject.ADMIN_ROLE})\n \n     # Add user's fullname column\n-    add_column(UserObject.__table__.c.fullname)\n+    _column_add(connection, UserObject.__table__.c.fullname)\n \n     # Add user's mfa column\n-    add_column(UserObject.__table__.c.mfa)\n+    _column_add(connection, UserObject.__table__.c.mfa)\n \n     # Re-create session table if Number column is missing\n-    if not exists(SessionObject.__table__.c.Number):\n+    if not _column_exists(connection, SessionObject.__table__.c.Number):\n         SessionObject.__table__.drop()\n         SessionObject.__table__.create()\n \n     if getattr(connection, '_transaction', None):\n         connection._transaction.commit()\n+\n     # Remove preceding and leading slash (/) generated by previous\n     # versions. Also rename '.' to ''\n     result = RepoObject.query.all()\n@@ -101,3 +118,22 @@ def add_column(column):\n             row.delete()\n         else:\n             prev_repo = (row.userid, row.repopath)\n+\n+    # Fix username case insensitive unique\n+    if not _index_exists(connection, 'user_username_index'):\n+        duplicate_users = (\n+            UserObject.query.with_entities(func.lower(UserObject.username))\n+            .group_by(func.lower(UserObject.username))\n+            .having(func.count(UserObject.username) > 1)\n+        ).all()\n+        try:\n+            user_username_index.create()\n+        except IntegrityError:\n+            msg = (\n+                'Failure to upgrade your database to make Username case insensitive. '\n+                'You must downgrade and deleted duplicate Username. '\n+                '%s' % '\\n'.join([str(k) for k in duplicate_users]),\n+            )\n+            logger.error(msg)\n+            print(msg, file=sys.stderr)\n+            raise SystemExit(12)"
        },
        {
          "filename": "rdiffweb/core/model/_user.py",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -20,7 +20,7 @@\n import string\n \n import cherrypy\n-from sqlalchemy import Column, Integer, SmallInteger, String, and_, event, inspect, or_\n+from sqlalchemy import Column, Index, Integer, SmallInteger, String, and_, event, func, inspect, or_\n from sqlalchemy.exc import IntegrityError\n from sqlalchemy.ext.hybrid import hybrid_property\n from sqlalchemy.orm import deferred, relationship, validates\n@@ -74,7 +74,7 @@ class UserObject(Base):\n     PATTERN_USERNAME = r\"[a-zA-Z0-9_.\\-]+$\"\n \n     userid = Column('UserID', Integer, primary_key=True)\n-    username = Column('Username', String, nullable=False, unique=True)\n+    username = Column('Username', String, nullable=False)\n     hash_password = Column('Password', String, nullable=False, default=\"\")\n     user_root = Column('UserRoot', String, nullable=False, default=\"\")\n     _is_admin = deferred(\n@@ -110,8 +110,8 @@ class UserObject(Base):\n \n     @classmethod\n     def get_user(cls, user):\n-        \"\"\"Return a user object.\"\"\"\n-        return UserObject.query.filter(UserObject.username == user).first()\n+        \"\"\"Return a user object with username case-insensitive\"\"\"\n+        return UserObject.query.filter(func.lower(UserObject.username) == user.lower()).first()\n \n     @classmethod\n     def create_admin_user(cls, default_username, default_password):\n@@ -413,6 +413,10 @@ def validate_password(self, password):\n         return check_password(password, self.hash_password)\n \n \n+# Username should be case insensitive\n+user_username_index = Index('user_username_index', func.lower(UserObject.username), unique=True)\n+\n+\n @event.listens_for(UserObject.hash_password, \"set\")\n def hash_password_set(target, value, oldvalue, initiator):\n     if value and value != oldvalue:"
        },
        {
          "filename": "rdiffweb/core/model/tests/test_user.py",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -103,6 +103,16 @@ def test_add_user_with_duplicate(self):\n         # Check if listener called\n         self.listener.user_added.assert_not_called()\n \n+    def test_add_user_with_duplicate_caseinsensitive(self):\n+        \"\"\"Add user to database.\"\"\"\n+        user = UserObject.add_user('denise')\n+        user.commit()\n+        self.listener.user_added.reset_mock()\n+        with self.assertRaises(ValueError):\n+            UserObject.add_user('dEnIse')\n+        # Check if listener called\n+        self.listener.user_added.assert_not_called()\n+\n     def test_add_user_with_password(self):\n         \"\"\"Add user to database with password.\"\"\"\n         userobj = UserObject.add_user('jo', 'password')\n@@ -158,6 +168,13 @@ def test_get_user(self):\n         self.assertEqual('testcases', obj.repo_objs[1].name)\n         self.assertEqual(3, obj.repo_objs[1].maxage)\n \n+    def test_get_user_case_insensitive(self):\n+        userobj1 = UserObject.get_user(self.USERNAME)\n+        userobj2 = UserObject.get_user(self.USERNAME.lower())\n+        userobj3 = UserObject.get_user(self.USERNAME.upper())\n+        self.assertEqual(userobj1, userobj2)\n+        self.assertEqual(userobj2, userobj3)\n+\n     def test_get_user_with_invalid_user(self):\n         self.assertIsNone(UserObject.get_user('invalid'))\n "
        },
        {
          "filename": "rdiffweb/core/tests/test_rdw_templating.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -110,7 +110,7 @@ def test_list_parents_with_root_subdir(self):\n class UrlForTest(WebCase):\n     @property\n     def repo_obj(self):\n-        user = UserObject.query.filter(UserObject.username == 'admin').first()\n+        user = UserObject.get_user('admin')\n         return RepoObject.query.filter(RepoObject.user == user, RepoObject.repopath == self.REPO).first()\n \n     def test_url_for_absolute_path(self):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb9b10fde29c125a7641a8daad96976bd2cf1307",
            "date": "2024-11-20T02:02:20Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9becf16f0a96fad246021256de58a204318687b8",
            "date": "2024-11-09T12:27:19Z",
            "author_login": "ikus060"
          },
          {
            "sha": "3364f0644d62590b65ad6610d74139edc8a1740f",
            "date": "2024-11-05T20:54:35Z",
            "author_login": "ikus060"
          },
          {
            "sha": "a96f583797b65a8f68d3780c1ed470c7989a56dc",
            "date": "2024-10-24T19:17:53Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9fad72d2a19b78be1e5b9dcd4e880e3f7496dbd0",
            "date": "2024-10-24T18:13:13Z",
            "author_login": "ikus060"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-305",
    "description": "Authentication Bypass by Primary Weakness in GitHub repository ikus060/rdiffweb prior to 2.5.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T15:15:11.900",
    "last_modified": "2024-11-21T07:35:48.660",
    "fix_date": "2022-12-23T01:33:38Z"
  },
  "references": [
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/d1aaa96b665a39fba9e98d6054a9de511ba0a837",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c62126dc-d9a6-4d3e-988d-967031876c58",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/d1aaa96b665a39fba9e98d6054a9de511ba0a837",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c62126dc-d9a6-4d3e-988d-967031876c58",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.218213",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rdiffweb",
    "owner": "ikus060",
    "created_at": "2012-10-22T14:14:23Z",
    "updated_at": "2025-01-12T13:25:42Z",
    "pushed_at": "2025-01-07T15:16:06Z",
    "size": 25971,
    "stars": 124,
    "forks": 28,
    "open_issues": 1,
    "watchers": 124,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 857869,
      "HTML": 104946,
      "JavaScript": 7655,
      "Shell": 3945,
      "CSS": 3081,
      "Dockerfile": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:43.805427"
  }
}