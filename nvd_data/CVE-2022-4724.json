{
  "cve_id": "CVE-2022-4724",
  "github_data": {
    "repository": "ikus060/rdiffweb",
    "fix_commit": "c4a19cf67d575c4886171b8efcbf4675d51f3929",
    "related_commits": [
      "c4a19cf67d575c4886171b8efcbf4675d51f3929",
      "c4a19cf67d575c4886171b8efcbf4675d51f3929"
    ],
    "patch_url": "https://github.com/ikus060/rdiffweb/commit/c4a19cf67d575c4886171b8efcbf4675d51f3929.patch",
    "fix_commit_details": {
      "sha": "c4a19cf67d575c4886171b8efcbf4675d51f3929",
      "commit_date": "2022-12-23T18:01:27Z",
      "author": {
        "login": "ikus060",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Make sure that all ssh keys are unique, regardless of the user",
        "length": 62,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 71,
        "additions": 64,
        "deletions": 7
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -115,6 +115,7 @@ Professional support for Rdiffweb is available by contacting [IKUS Soft](https:/\n * Sent email notification to user when a new SSH Key get added - credit to [Nehal Pillai](https://www.linkedin.com/in/nehal-pillai-02a854172)\n * Ratelimit \"Resend code to my email\" in Two-Factor Authentication view - credit to [Nehal Pillai](https://www.linkedin.com/in/nehal-pillai-02a854172)\n * Username are not case-insensitive - credits to [raiders0786](https://www.linkedin.com/in/chirag-agrawal-770488144/)\n+* Make sure that all ssh keys are unique, regardless of the user - credit to [Nehal Pillai](https://www.linkedin.com/in/nehal-pillai-02a854172)\n \n Breaking changes:\n "
        },
        {
          "filename": "rdiffweb/core/model/__init__.py",
          "status": "modified",
          "additions": 21,
          "deletions": 2,
          "patch": "@@ -19,12 +19,12 @@\n import sys\n \n import cherrypy\n-from sqlalchemy import event\n+from sqlalchemy import event, func\n from sqlalchemy.exc import IntegrityError\n \n from ._repo import RepoObject  # noqa\n from ._session import DbSession, SessionObject  # noqa\n-from ._sshkey import SshKey  # noqa\n+from ._sshkey import SshKey, sshkey_fingerprint_index  # noqa\n from ._token import Token  # noqa\n from ._user import DuplicateSSHKeyError, UserObject, user_username_index  # noqa\n \n@@ -137,3 +137,22 @@ def db_after_create(target, connection, **kw):\n             logger.error(msg)\n             print(msg, file=sys.stderr)\n             raise SystemExit(12)\n+\n+    # Fix SSH Key uniqueness - since 2.5.4\n+    if not _index_exists(connection, 'sshkey_fingerprint_index'):\n+        duplicate_sshkeys = (\n+            SshKey.query.with_entities(SshKey.fingerprint)\n+            .group_by(SshKey.fingerprint)\n+            .having(func.count(SshKey.fingerprint) > 1)\n+        ).all()\n+        try:\n+            sshkey_fingerprint_index.create()\n+        except IntegrityError:\n+            msg = (\n+                'Failure to upgrade your database to make SSH Keys unique. '\n+                'You must downgrade and deleted duplicate SSH Keys. '\n+                '%s' % '\\n'.join([str(k) for k in duplicate_sshkeys]),\n+            )\n+            logger.error(msg)\n+            print(msg, file=sys.stderr)\n+            raise SystemExit(12)"
        },
        {
          "filename": "rdiffweb/core/model/_sshkey.py",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -16,7 +16,7 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n import cherrypy\n-from sqlalchemy import Column, Integer, Text\n+from sqlalchemy import Column, Index, Integer, Text\n \n Base = cherrypy.tools.db.get_base()\n \n@@ -27,3 +27,7 @@ class SshKey(Base):\n     fingerprint = Column('Fingerprint', Text)\n     key = Column('Key', Text, unique=True, primary_key=True)\n     userid = Column('UserID', Integer, nullable=False)\n+\n+\n+# Make finger print unique\n+sshkey_fingerprint_index = Index('sshkey_fingerprint_index', SshKey.fingerprint, unique=True)"
        },
        {
          "filename": "rdiffweb/core/model/_user.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -159,7 +159,7 @@ def add_authorizedkey(self, key, comment=None):\n         assert key\n         key = authorizedkeys.check_publickey(key)\n \n-        # Remove option, replace comments.\n+        # Remove option & Remove comment for SQL storage\n         key = authorizedkeys.AuthorizedKey(\n             options=None, keytype=key.keytype, key=key.key, comment=comment or key.comment\n         )\n@@ -176,7 +176,8 @@ def add_authorizedkey(self, key, comment=None):\n             # Also look in database.\n             logger.info(\"add key [%s] to [%s] database\", key, self.username)\n             try:\n-                SshKey(userid=self.userid, fingerprint=key.fingerprint, key=key.getvalue()).add().flush()\n+                sshkey = SshKey(userid=self.userid, fingerprint=key.fingerprint, key=key.getvalue())\n+                sshkey.add().flush()\n             except IntegrityError:\n                 raise DuplicateSSHKeyError(\n                     _(\"Duplicate key. This key already exists or is associated to another user.\")"
        },
        {
          "filename": "rdiffweb/core/model/tests/test_user.py",
          "status": "modified",
          "additions": 34,
          "deletions": 2,
          "patch": "@@ -325,15 +325,47 @@ def test_add_authorizedkey_without_file(self):\n     def test_add_authorizedkey_duplicate(self):\n         # Read the pub key\n         key = self._read_ssh_key()\n-        # Add the key to the user\n+        # Given a user with a SSH Key\n         userobj = UserObject.get_user(self.USERNAME)\n         userobj.add_authorizedkey(key)\n         userobj.commit()\n-        # Add the same key\n+\n+        # When adding the same identical key.\n+        # Then an error is raised\n         with self.assertRaises(DuplicateSSHKeyError):\n             userobj.add_authorizedkey(key)\n             userobj.commit()\n \n+    def test_add_authorizedkey_duplicate_new_comment(self):\n+        # Read the pub key\n+        key = self._read_ssh_key()\n+        # Given a user with a SSH Key\n+        userobj = UserObject.get_user(self.USERNAME)\n+        userobj.add_authorizedkey(key)\n+        userobj.commit()\n+\n+        # When adding the same key with a different comment\n+        # Then an error is raised\n+        with self.assertRaises(DuplicateSSHKeyError):\n+            userobj.add_authorizedkey(key, comment=\"new comment\")\n+            userobj.commit()\n+\n+    def test_add_authorizedkey_duplicate_new_user(self):\n+        # Read the pub key\n+        key = self._read_ssh_key()\n+        # Given a user with a SSH Key\n+        userobj = UserObject.get_user(self.USERNAME)\n+        userobj.add_authorizedkey(key)\n+        userobj.commit()\n+\n+        # When adding the same key to a different user\n+        # Then an error is raised\n+        newuser = UserObject.add_user(\"newuser\")\n+        newuser.commit()\n+        with self.assertRaises(DuplicateSSHKeyError):\n+            newuser.add_authorizedkey(key, comment=\"new comment\")\n+            newuser.commit()\n+\n     def test_add_authorizedkey_with_file(self):\n         \"\"\"\n         Add an ssh key for a user with an authorizedkey file."
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb9b10fde29c125a7641a8daad96976bd2cf1307",
            "date": "2024-11-20T02:02:20Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9becf16f0a96fad246021256de58a204318687b8",
            "date": "2024-11-09T12:27:19Z",
            "author_login": "ikus060"
          },
          {
            "sha": "3364f0644d62590b65ad6610d74139edc8a1740f",
            "date": "2024-11-05T20:54:35Z",
            "author_login": "ikus060"
          },
          {
            "sha": "a96f583797b65a8f68d3780c1ed470c7989a56dc",
            "date": "2024-10-24T19:17:53Z",
            "author_login": "ikus060"
          },
          {
            "sha": "9fad72d2a19b78be1e5b9dcd4e880e3f7496dbd0",
            "date": "2024-10-24T18:13:13Z",
            "author_login": "ikus060"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-284",
    "description": "Improper Access Control in GitHub repository ikus060/rdiffweb prior to 2.5.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T15:15:12.057",
    "last_modified": "2024-11-21T07:35:48.903",
    "fix_date": "2022-12-23T18:01:27Z"
  },
  "references": [
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/c4a19cf67d575c4886171b8efcbf4675d51f3929",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/e6fb1931-8d9c-4895-be4a-59839b4b6445",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ikus060/rdiffweb/commit/c4a19cf67d575c4886171b8efcbf4675d51f3929",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/e6fb1931-8d9c-4895-be4a-59839b4b6445",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.218533",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rdiffweb",
    "owner": "ikus060",
    "created_at": "2012-10-22T14:14:23Z",
    "updated_at": "2025-01-12T13:25:42Z",
    "pushed_at": "2025-01-07T15:16:06Z",
    "size": 25971,
    "stars": 124,
    "forks": 28,
    "open_issues": 1,
    "watchers": 124,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 857869,
      "HTML": 104946,
      "JavaScript": 7655,
      "Shell": 3945,
      "CSS": 3081,
      "Dockerfile": 686
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:43.805427"
  }
}