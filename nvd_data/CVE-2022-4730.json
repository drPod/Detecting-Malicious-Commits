{
  "cve_id": "CVE-2022-4730",
  "github_data": {
    "repository": "graphite-project/graphite-web",
    "fix_commit": "2f178f490e10efc03cd1d27c72f64ecab224eb23",
    "related_commits": [
      "2f178f490e10efc03cd1d27c72f64ecab224eb23",
      "2f178f490e10efc03cd1d27c72f64ecab224eb23"
    ],
    "patch_url": "https://github.com/graphite-project/graphite-web/commit/2f178f490e10efc03cd1d27c72f64ecab224eb23.patch",
    "fix_commit_details": {
      "sha": "2f178f490e10efc03cd1d27c72f64ecab224eb23",
      "commit_date": "2022-10-31T10:22:17Z",
      "author": {
        "login": "msaf1980",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": " Fix XSS in some dashboards queries (#2785)",
        "length": 121,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 109,
        "additions": 94,
        "deletions": 15
      },
      "files": [
        {
          "filename": "webapp/content/js/dashboard.js",
          "status": "modified",
          "additions": 10,
          "deletions": 6,
          "patch": "@@ -163,6 +163,10 @@ function htmlEncode(input) {\n   });\n }\n \n+function htmlStriped(input) {\n+  return htmlEncode(input).replace(/\\s/g, '_')\n+}\n+\n function initDashboard () {\n \n   // Populate naming-scheme based datastructures\n@@ -1229,7 +1233,7 @@ function selectRelativeTime() {\n     fieldLabel: 'Show the past',\n     width: 90,\n     allowBlank: false,\n-    regex: /\\d+/,\n+    regex: /^\\d+$/,\n     regexText: 'Please enter a number',\n     value: TimeRange.relativeStartQuantity\n   });\n@@ -1251,7 +1255,7 @@ function selectRelativeTime() {\n     fieldLabel: 'Until',\n     width: 90,\n     allowBlank: true,\n-    regex: /\\d+/,\n+    regex: /^\\d+$/,\n     regexText: 'Please enter a number',\n     value: TimeRange.relativeUntilQuantity\n   });\n@@ -1291,10 +1295,10 @@ function selectRelativeTime() {\n \n   function updateTimeRange() {\n     TimeRange.type = 'relative';\n-    TimeRange.relativeStartQuantity = quantityField.getValue();\n-    TimeRange.relativeStartUnits = unitField.getValue();\n-    TimeRange.relativeUntilQuantity = untilQuantityField.getValue();\n-    TimeRange.relativeUntilUnits = untilUnitField.getValue();\n+    TimeRange.relativeStartQuantity = htmlStriped(quantityField.getValue());\n+    TimeRange.relativeStartUnits = htmlStriped(unitField.getValue());\n+    TimeRange.relativeUntilQuantity = htmlStriped(untilQuantityField.getValue());\n+    TimeRange.relativeUntilUnits = htmlStriped(untilUnitField.getValue());\n     win.close();\n     timeRangeUpdated();\n   }"
        },
        {
          "filename": "webapp/graphite/dashboard/views.py",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@\n from graphite.render.views import renderView\n from graphite.util import json\n from graphite.user_util import isAuthenticated\n+from graphite.errors import handleInputParameterError, str_param\n \n fieldRegex = re.compile(r'<([^>]+)>')\n defaultScheme = {\n@@ -108,7 +109,9 @@ def load(self):\n config = DashboardConfig()\n \n \n+@handleInputParameterError\n def dashboard(request, name=None):\n+  name = str_param('name', name)\n   dashboard_conf_missing = False\n \n   try:\n@@ -155,7 +158,9 @@ def dashboard(request, name=None):\n   return render(request, \"dashboard.html\", context)\n \n \n+@handleInputParameterError\n def template(request, name, val):\n+  name = str_param('name', name)\n   template_conf_missing = False\n \n   try:\n@@ -221,7 +226,10 @@ def getPermissions(user):\n   return permissions\n \n \n+@handleInputParameterError\n def save(request, name):\n+  name = str_param('name', name)\n+\n   if 'change' not in getPermissions(request.user):\n     return json_response( dict(error=\"Must be logged in with appropriate permissions to save\") )\n   # Deserialize and reserialize as a validation step\n@@ -238,7 +246,11 @@ def save(request, name):\n   return json_response( dict(success=True) )\n \n \n+@handleInputParameterError\n def save_template(request, name, key):\n+  name = str_param('name', name)\n+  key = str_param('key', key)\n+\n   if 'change' not in getPermissions(request.user):\n     return json_response( dict(error=\"Must be logged in with appropriate permissions to save the template\") )\n   # Deserialize and reserialize as a validation step\n@@ -257,7 +269,9 @@ def save_template(request, name, key):\n   return json_response( dict(success=True) )\n \n \n+@handleInputParameterError\n def load(request, name):\n+  name = str_param('name', name)\n   try:\n     dashboard = Dashboard.objects.get(name=name)\n   except Dashboard.DoesNotExist:\n@@ -266,7 +280,9 @@ def load(request, name):\n   return json_response( dict(state=json.loads(dashboard.state)) )\n \n \n+@handleInputParameterError\n def load_template(request, name, val):\n+  name = str_param('name', name)\n   try:\n     template = Template.objects.get(name=name)\n   except Template.DoesNotExist:\n@@ -277,7 +293,9 @@ def load_template(request, name, val):\n   return json_response( dict(state=state) )\n \n \n+@handleInputParameterError\n def delete(request, name):\n+  name = str_param('name', name)\n   if 'delete' not in getPermissions(request.user):\n     return json_response( dict(error=\"Must be logged in with appropriate permissions to delete\") )\n \n@@ -290,7 +308,9 @@ def delete(request, name):\n     return json_response( dict(success=True) )\n \n \n+@handleInputParameterError\n def delete_template(request, name):\n+  name = str_param('name', name)\n   if 'delete' not in getPermissions(request.user):\n     return json_response( dict(error=\"Must be logged in with appropriate permissions to delete the template\") )\n "
        },
        {
          "filename": "webapp/graphite/errors.py",
          "status": "modified",
          "additions": 17,
          "deletions": 6,
          "patch": "@@ -1,5 +1,6 @@\n from django.http import HttpResponseBadRequest\n from graphite.logger import log\n+from graphite.util import htmlEscape, is_unsafe_str\n \n \n class NormalizeEmptyResultError(Exception):\n@@ -94,12 +95,22 @@ def __str__(self):\n         return msg\n \n \n-# Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.\n-def escape(s):\n-    s = s.replace(\"&\", \"&amp;\")  # Must be done first!\n-    s = s.replace(\"<\", \"&lt;\")\n-    s = s.replace(\">\", \"&gt;\")\n+def safe_param(name, s):\n+    if is_unsafe_str(s):\n+        raise InputParameterError(\"{} contain unsafe symbols\".format(name))\n+    return s\n+\n+\n+def is_unclean_str(s):\n+    for symbol in '&<>~!@#$%^*()`':\n+        if s.find(symbol) >= 0:\n+            return True\n+    return False\n+\n \n+def str_param(name, s):\n+    if s is not None and is_unclean_str(s):\n+        raise InputParameterError(\"{} contain restricted symbols\".format(name))\n     return s\n \n \n@@ -111,6 +122,6 @@ def new_f(*args, **kwargs):\n         except InputParameterError as e:\n             msgStr = str(e)\n             log.warning('%s', msgStr)\n-            return HttpResponseBadRequest(escape(msgStr))\n+            return HttpResponseBadRequest(htmlEscape(msgStr))\n \n     return new_f"
        },
        {
          "filename": "webapp/graphite/util.py",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -128,6 +128,21 @@ def find_escaped_pattern_fields(pattern_string):\n       yield index\n \n \n+# Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.\n+def htmlEscape(s):\n+    s = s.replace(\"&\", \"&amp;\")  # Must be done first!\n+    s = s.replace(\"<\", \"&lt;\")\n+    s = s.replace(\">\", \"&gt;\")\n+    return s\n+\n+\n+def is_unsafe_str(s):\n+    for symbol in '<>':\n+        if s.find(symbol) >= 0:\n+            return True\n+    return False\n+\n+\n def load_module(module_path, member=None):\n   module_name = splitext(basename(module_path))[0]\n   try:  # 'U' is default from Python 3.0 and deprecated since 3.9"
        },
        {
          "filename": "webapp/tests/base.py",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -2,6 +2,13 @@\n from graphite.worker_pool.pool import stop_pools\n \n \n+def is_unsafe_str(s):\n+    for symbol in '<>':\n+        if s.find(symbol) > 0:\n+            return True\n+        return False\n+\n+\n class TestCase(OriginalTestCase):\n     def tearDown(self):\n         stop_pools()\n@@ -15,5 +22,6 @@ def assertXSS(self, response, status_code=200, msg_prefix=''):\n                 \" (expected %d)\" % (response.status_code, status_code)\n             )\n \n-        xss = response.content.find(b\"<\") != -1 or response.content.find(b\">\") != -1\n-        self.assertFalse(xss, msg=msg_prefix+str(response.content))\n+        content = str(response.content)\n+        xss = is_unsafe_str(content)\n+        self.assertFalse(xss, msg=msg_prefix+content)"
        },
        {
          "filename": "webapp/tests/test_dashboard.py",
          "status": "modified",
          "additions": 22,
          "deletions": 1,
          "patch": "@@ -20,6 +20,8 @@\n except ImportError:\n     from django.contrib.auth.models import User\n \n+from graphite.util import htmlEscape\n+\n \n class DashboardTest(TestCase):\n     # Set config to the test config file\n@@ -244,23 +246,42 @@ def test_dashboard_find_template_empty(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(response.content, b'{\"templates\": []}')\n \n+    def test_dashboard_save_temporary_xss_name(self):\n+        xssStr = htmlEscape('<img src=1 onerror=alert(1)>')\n+        url = '/graphite/dashboard/save_template/' + xssStr + '/testkey'\n+\n+        request = copy.deepcopy(self.testtemplate)\n+        response = self.client.post(url, request)\n+        self.assertContains(response, 'name contain restricted symbols', status_code=400)\n+\n+    def test_dashboard_save_temporary_xss_key(self):\n+        xssStr = htmlEscape('<img src=1 onerror=alert(1)>')\n+        url = '/graphite/dashboard/save_template/testtemplate/' + xssStr\n+\n+        request = copy.deepcopy(self.testtemplate)\n+        response = self.client.post(url, request)\n+        self.assertContains(response, 'key contain restricted symbols', status_code=400)\n+\n     def test_dashboard_save_template(self):\n         url = reverse('dashboard_save_template', args=['testtemplate', 'testkey'])\n         request = copy.deepcopy(self.testtemplate)\n         response = self.client.post(url, request)\n         self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'{\"success\": true}')\n \n-        # Save again after it now exists\n+    # Save again after it now exists\n     def test_dashboard_save_template_overwrite(self):\n         url = reverse('dashboard_save_template', args=['testtemplate', 'testkey'])\n         request = copy.deepcopy(self.testtemplate)\n         response = self.client.post(url, request)\n         self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'{\"success\": true}')\n \n         url = reverse('dashboard_save_template', args=['testtemplate', 'testkey'])\n         request = copy.deepcopy(self.testtemplate)\n         response = self.client.post(url, request)\n         self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'{\"success\": true}')\n \n     def test_dashboard_find_template(self):\n         url = reverse('dashboard_save_template', args=['testtemplate', 'testkey'])"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "55adbb6fd80a3dcd089a2c4458c71af01f191c9b",
            "date": "2024-08-25T21:42:17Z",
            "author_login": "deniszh"
          },
          {
            "sha": "3020e453fe631b867ce8ce49bc5bc7a54af7efac",
            "date": "2024-08-25T21:41:56Z",
            "author_login": "deniszh"
          },
          {
            "sha": "d12d3b3d6555a430679b088082e07793fb0422bb",
            "date": "2024-08-25T21:33:09Z",
            "author_login": "deniszh"
          },
          {
            "sha": "d33148451c5b0a672f6b1556de5588644fbcaa6a",
            "date": "2024-08-25T21:32:45Z",
            "author_login": "deniszh"
          },
          {
            "sha": "8017c0e086cf6c1d1388f6151df5539e09bebb5b",
            "date": "2024-08-25T20:51:40Z",
            "author_login": "deniszh"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-707",
    "description": "A vulnerability was found in Graphite Web. It has been classified as problematic. Affected is an unknown function of the component Absolute Time Range Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 2f178f490e10efc03cd1d27c72f64ecab224eb23. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216744.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T15:15:12.543",
    "last_modified": "2024-11-21T07:35:49.707",
    "fix_date": "2022-10-31T10:22:17Z"
  },
  "references": [
    {
      "url": "https://github.com/graphite-project/graphite-web/commit/2f178f490e10efc03cd1d27c72f64ecab224eb23",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/graphite-project/graphite-web/issues/2746",
      "source": "cna@vuldb.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/graphite-project/graphite-web/pull/2785",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216744",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/graphite-project/graphite-web/commit/2f178f490e10efc03cd1d27c72f64ecab224eb23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/graphite-project/graphite-web/issues/2746",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/graphite-project/graphite-web/pull/2785",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216744",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.219379",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "graphite-web",
    "owner": "graphite-project",
    "created_at": "2012-05-07T21:30:55Z",
    "updated_at": "2025-01-11T17:21:57Z",
    "pushed_at": "2024-12-01T13:41:01Z",
    "size": 23860,
    "stars": 5930,
    "forks": 1259,
    "open_issues": 44,
    "watchers": 5930,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "0.9.x",
      "1.0.x",
      "1.1.x",
      "master"
    ],
    "languages": {
      "JavaScript": 1691623,
      "Python": 1346082,
      "CSS": 150191,
      "HTML": 21435,
      "Ruby": 1950,
      "Shell": 1112,
      "Perl": 857
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:58:11.568934"
  }
}