{
  "cve_id": "CVE-2022-48285",
  "github_data": {
    "repository": "Stuk/jszip",
    "fix_commit": "2edab366119c9ee948357c02f1206c28566cdf15",
    "related_commits": [
      "2edab366119c9ee948357c02f1206c28566cdf15",
      "2edab366119c9ee948357c02f1206c28566cdf15"
    ],
    "patch_url": "https://github.com/Stuk/jszip/commit/2edab366119c9ee948357c02f1206c28566cdf15.patch",
    "fix_commit_details": {
      "sha": "2edab366119c9ee948357c02f1206c28566cdf15",
      "commit_date": "2022-03-30T19:09:27Z",
      "author": {
        "login": "Stuk",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Sanitize filenames with `loadAsync` to prevent zip slip attacks",
        "length": 63,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 128,
        "additions": 113,
        "deletions": 15
      },
      "files": [
        {
          "filename": "CHANGES.md",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -4,10 +4,14 @@ layout: default\n section: main\n ---\n \n+### v3.8.0 2022-03-30\n+\n+- Santize filenames when files are loaded with `loadAsync`, to avoid [\"zip slip\" attacks](https://snyk.io/research/zip-slip-vulnerability). The original filename is available on each zip entry as `unsafeOriginalName`. See the [documentation](https://stuk.github.io/jszip/documentation/api_jszip/load_async.html). Many thanks to McCaulay Hudson for reporting.\n+\n ### v3.7.1 2021-08-05\n \n - Fix build of `dist` files.\n-    + Note: this version ensures the changes from 3.7.0 are actually included in the `dist` files. Thanks to Evan W for reporting. \n+    + Note: this version ensures the changes from 3.7.0 are actually included in the `dist` files. Thanks to Evan W for reporting.\n \n ### v3.7.0 2021-07-23\n "
        },
        {
          "filename": "dist/jszip.js",
          "status": "modified",
          "additions": 37,
          "deletions": 5,
          "patch": "@@ -1,6 +1,6 @@\n /*!\n \n-JSZip v3.7.1 - A JavaScript class for generating and reading zip files\n+JSZip v3.8.0 - A JavaScript class for generating and reading zip files\n <http://stuartk.com/jszip>\n \n (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\n@@ -1059,7 +1059,7 @@ JSZip.defaults = require('./defaults');\n \n // TODO find a better way to handle this version,\n // a require('package.json').version doesn't work with webpack, see #327\n-JSZip.version = \"3.7.1\";\n+JSZip.version = \"3.8.0\";\n \n JSZip.loadAsync = function (content, options) {\n     return new JSZip().loadAsync(content, options);\n@@ -1132,7 +1132,11 @@ module.exports = function (data, options) {\n             var files = zipEntries.files;\n             for (var i = 0; i < files.length; i++) {\n                 var input = files[i];\n-                zip.file(input.fileNameStr, input.decompressed, {\n+\n+                var unsafeName = input.fileNameStr;\n+                var safeName = utils.resolve(input.fileNameStr);\n+\n+                zip.file(safeName, input.decompressed, {\n                     binary: true,\n                     optimizedBinaryString: true,\n                     date: input.date,\n@@ -1142,6 +1146,9 @@ module.exports = function (data, options) {\n                     dosPermissions: input.dosPermissions,\n                     createFolders: options.createFolders\n                 });\n+                if (!input.dir) {\n+                    zip.file(safeName).unsafeOriginalName = unsafeName;\n+                }\n             }\n             if (zipEntries.zipComment.length) {\n                 zip.comment = zipEntries.zipComment;\n@@ -3352,6 +3359,31 @@ exports.transformTo = function(outputType, input) {\n     return result;\n };\n \n+/**\n+ * Resolve all relative path components, \".\" and \"..\", in a path. If these relative components\n+ * traverse above the root then the resulting path will only contain the final path component.\n+ *\n+ * All empty components, e.g. \"//\", are removed.\n+ * @param {string} path A path with / or \\ separators\n+ * @returns {string} The path with all relative path components resolved.\n+ */\n+exports.resolve = function(path) {\n+    var parts = path.split(\"/\");\n+    var result = [];\n+    for (var index = 0; index < parts.length; index++) {\n+        var part = parts[index];\n+        // Allow the first and last component to be empty for trailing slashes.\n+        if (part === \".\" || (part === \"\" && index !== 0 && index !== parts.length - 1)) {\n+            continue;\n+        } else if (part === \"..\") {\n+            result.pop();\n+        } else {\n+            result.push(part);\n+        }\n+    }\n+    return result.join(\"/\");\n+};\n+\n /**\n  * Return the type of the input.\n  * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.\n@@ -3460,8 +3492,8 @@ exports.prepareContent = function(name, inputData, isBinary, isOptimizedBinarySt\n \n     // if inputData is already a promise, this flatten it.\n     var promise = external.Promise.resolve(inputData).then(function(data) {\n-        \n-        \n+\n+\n         var isBlob = support.blob && (data instanceof Blob || ['[object File]', '[object Blob]'].indexOf(Object.prototype.toString.call(data)) !== -1);\n \n         if (isBlob && typeof FileReader !== \"undefined\") {"
        },
        {
          "filename": "dist/jszip.min.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": null
        },
        {
          "filename": "documentation/api_jszip/load_async.md",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -10,6 +10,8 @@ object at the current folder level. This technique has some limitations, see\n If the JSZip object already contains entries, new entries will be merged. If\n two have the same name, the loaded one will replace the other.\n \n+Since v3.8.0 this method will santize relative path components (i.e. `..`) in loaded filenames to avoid [\"zip slip\" attacks](https://snyk.io/research/zip-slip-vulnerability). For example: `../../../example.txt` \u2192 `example.txt`, `src/images/../example.txt` \u2192 `src/example.txt`. The original filename is available on each zip entry as `unsafeOriginalName`.\n+\n __Returns__ : A [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) with the updated zip object.\n The promise can fail if the loaded data is not valid zip data or if it\n uses unsupported features (multi volume, password protected, etc).\n@@ -194,3 +196,24 @@ zip.loadAsync(bin1)\n     // file3.txt, from bin2\n });\n ```\n+\n+Reading a zip file with relative filenames:\n+\n+```js\n+// here, \"unsafe.zip\" is zip file containing:\n+// src/images/../file.txt\n+// ../../example.txt\n+\n+require(\"fs\").readFile(\"unsafe.zip\", function (err, data) {\n+    if (err) throw err;\n+    var zip = new JSZip();\n+    zip.loadAsync(data)\n+    .then(function (zip) {\n+        console.log(zip.files);\n+        // src/file.txt\n+        // example.txt\n+        console.log(zip.files[\"example.txt\"].unsafeOriginalName);\n+        // \"../../example.txt\"\n+    });\n+}\n+```"
        },
        {
          "filename": "index.d.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -65,6 +65,11 @@ declare namespace JSZip {\n \n     interface JSZipObject {\n         name: string;\n+        /**\n+         * Present for files loadded with `loadAsync`. May contain \"..\" path components that could\n+         * result in a zip-slip attack. See https://snyk.io/research/zip-slip-vulnerability\n+         */\n+        unsafeOriginalName?: string;\n         dir: boolean;\n         date: Date;\n         comment: string;"
        },
        {
          "filename": "lib/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -45,7 +45,7 @@ JSZip.defaults = require('./defaults');\n \n // TODO find a better way to handle this version,\n // a require('package.json').version doesn't work with webpack, see #327\n-JSZip.version = \"3.7.1\";\n+JSZip.version = \"3.8.0\";\n \n JSZip.loadAsync = function (content, options) {\n     return new JSZip().loadAsync(content, options);"
        },
        {
          "filename": "lib/load.js",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -61,7 +61,11 @@ module.exports = function (data, options) {\n             var files = zipEntries.files;\n             for (var i = 0; i < files.length; i++) {\n                 var input = files[i];\n-                zip.file(input.fileNameStr, input.decompressed, {\n+\n+                var unsafeName = input.fileNameStr;\n+                var safeName = utils.resolve(input.fileNameStr);\n+\n+                zip.file(safeName, input.decompressed, {\n                     binary: true,\n                     optimizedBinaryString: true,\n                     date: input.date,\n@@ -71,6 +75,9 @@ module.exports = function (data, options) {\n                     dosPermissions: input.dosPermissions,\n                     createFolders: options.createFolders\n                 });\n+                if (!input.dir) {\n+                    zip.file(safeName).unsafeOriginalName = unsafeName;\n+                }\n             }\n             if (zipEntries.zipComment.length) {\n                 zip.comment = zipEntries.zipComment;"
        },
        {
          "filename": "lib/utils.js",
          "status": "modified",
          "additions": 27,
          "deletions": 2,
          "patch": "@@ -317,6 +317,31 @@ exports.transformTo = function(outputType, input) {\n     return result;\n };\n \n+/**\n+ * Resolve all relative path components, \".\" and \"..\", in a path. If these relative components\n+ * traverse above the root then the resulting path will only contain the final path component.\n+ *\n+ * All empty components, e.g. \"//\", are removed.\n+ * @param {string} path A path with / or \\ separators\n+ * @returns {string} The path with all relative path components resolved.\n+ */\n+exports.resolve = function(path) {\n+    var parts = path.split(\"/\");\n+    var result = [];\n+    for (var index = 0; index < parts.length; index++) {\n+        var part = parts[index];\n+        // Allow the first and last component to be empty for trailing slashes.\n+        if (part === \".\" || (part === \"\" && index !== 0 && index !== parts.length - 1)) {\n+            continue;\n+        } else if (part === \"..\") {\n+            result.pop();\n+        } else {\n+            result.push(part);\n+        }\n+    }\n+    return result.join(\"/\");\n+};\n+\n /**\n  * Return the type of the input.\n  * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.\n@@ -425,8 +450,8 @@ exports.prepareContent = function(name, inputData, isBinary, isOptimizedBinarySt\n \n     // if inputData is already a promise, this flatten it.\n     var promise = external.Promise.resolve(inputData).then(function(data) {\n-        \n-        \n+\n+\n         var isBlob = support.blob && (data instanceof Blob || ['[object File]', '[object Blob]'].indexOf(Object.prototype.toString.call(data)) !== -1);\n \n         if (isBlob && typeof FileReader !== \"undefined\") {"
        },
        {
          "filename": "test/asserts/utils.js",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -1,19 +1,21 @@\n /* global QUnit,JSZip,JSZipTestUtils */\n 'use strict';\n \n+// These tests only run in Node\n var utils = require(\"../../lib/utils\");\n \n QUnit.module(\"utils\");\n \n QUnit.test(\"Paths are resolved correctly\", function (assert) {\n-    assert.strictEqual(utils.resolve(\"root\\\\a\\\\b\"), \"root/a/b\");\n+    // Backslashes can be part of filenames\n+    assert.strictEqual(utils.resolve(\"root\\\\a\\\\b\"), \"root\\\\a\\\\b\");\n     assert.strictEqual(utils.resolve(\"root/a/b\"), \"root/a/b\");\n     assert.strictEqual(utils.resolve(\"root/a/..\"), \"root\");\n     assert.strictEqual(utils.resolve(\"root/a/../b\"), \"root/b\");\n     assert.strictEqual(utils.resolve(\"root/a/./b\"), \"root/a/b\");\n     assert.strictEqual(utils.resolve(\"root/../../../\"), \"\");\n-    assert.strictEqual(utils.resolve(\"////\"), \"\");\n-    assert.strictEqual(utils.resolve(\"/a/b/c\"), \"a/b/c\");\n+    assert.strictEqual(utils.resolve(\"////\"), \"/\");\n+    assert.strictEqual(utils.resolve(\"/a/b/c\"), \"/a/b/c\");\n     assert.strictEqual(utils.resolve(\"a/b/c/\"), \"a/b/c/\");\n     assert.strictEqual(utils.resolve(\"../../../../../a\"), \"a\");\n     assert.strictEqual(utils.resolve(\"../app.js\"), \"app.js\");"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2ceb998e29d4171b4f3f2ecab1a2195c696543c0",
            "date": "2022-08-02T22:59:39Z",
            "author_login": "Stuk"
          },
          {
            "sha": "0f2f1e4d0509514417db83fe5b86bde90e0ffe8d",
            "date": "2022-08-02T22:48:27Z",
            "author_login": "Stuk"
          },
          {
            "sha": "cae55105f5e8bd37c270cdb76eab2cf40388dfd9",
            "date": "2022-08-02T22:48:09Z",
            "author_login": "Stuk"
          },
          {
            "sha": "179c9a0340477985b82734f1b09560411adb5b94",
            "date": "2022-08-02T22:38:17Z",
            "author_login": "Stuk"
          },
          {
            "sha": "61e1df58dac54eec1e9733649638518b79896731",
            "date": "2022-07-22T20:49:43Z",
            "author_login": "Stuk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-22",
    "description": "loadAsync in JSZip before 3.8.0 allows Directory Traversal via a crafted ZIP archive.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-29T05:15:10.070",
    "last_modified": "2024-11-21T07:33:05.220",
    "fix_date": "2022-03-30T19:09:27Z"
  },
  "references": [
    {
      "url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/244499",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/Stuk/jszip/commit/2edab366119c9ee948357c02f1206c28566cdf15",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Stuk/jszip/compare/v3.7.1...v3.8.0",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240621-0005/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.mend.io/vulnerability-database/WS-2023-0004",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/244499",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/Stuk/jszip/commit/2edab366119c9ee948357c02f1206c28566cdf15",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Stuk/jszip/compare/v3.7.1...v3.8.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240621-0005/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.mend.io/vulnerability-database/WS-2023-0004",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:03.951437",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jszip",
    "owner": "Stuk",
    "created_at": "2009-08-30T17:09:20Z",
    "updated_at": "2025-01-14T13:31:03Z",
    "pushed_at": "2024-06-15T22:48:49Z",
    "size": 25007,
    "stars": 9870,
    "forks": 1311,
    "open_issues": 420,
    "watchers": 9870,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "JavaScript": 286424,
      "HTML": 7809
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:11:05.085317"
  }
}