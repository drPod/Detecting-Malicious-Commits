{
  "cve_id": "CVE-2022-48365",
  "github_data": {
    "repository": "ezsystems/ezpublish-kernel",
    "fix_commit": "957e67a08af2b3265753f9763943e8225ed779ab",
    "related_commits": [
      "957e67a08af2b3265753f9763943e8225ed779ab",
      "957e67a08af2b3265753f9763943e8225ed779ab"
    ],
    "patch_url": "https://github.com/ezsystems/ezpublish-kernel/commit/957e67a08af2b3265753f9763943e8225ed779ab.patch",
    "fix_commit_details": {
      "sha": "957e67a08af2b3265753f9763943e8225ed779ab",
      "commit_date": "2022-11-10T11:22:29Z",
      "author": {
        "login": "ViniTou",
        "type": "User",
        "stats": {
          "total_commits": 49,
          "average_weekly_commits": 0.06834030683403068,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 32
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-99r3-xmmq-7q7g",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 1384,
        "additions": 1383,
        "deletions": 1
      },
      "files": [
        {
          "filename": "eZ/Publish/Core/settings/policies.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -30,7 +30,7 @@ parameters:\n             administrate: ~\n \n         role:\n-            assign: ~\n+            assign: { MemberOf: true, Role: true }\n             update: ~\n             create: ~\n             delete: ~"
        },
        {
          "filename": "eZ/Publish/Core/settings/roles.yml",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -146,3 +146,15 @@ services:\n         class: \"%ezpublish.api.role.limitation_type.blocking.class%\"\n         arguments: ['AntiSpam']\n         tags: [{name: ezpublish.limitationType, alias: AntiSpam}]\n+\n+    Ibexa\\Core\\Limitation\\MemberOfLimitationType:\n+        arguments:\n+            $persistence: '@ezpublish.api.persistence_handler'\n+        tags:\n+            - { name: ezpublish.limitationType, alias: MemberOf }\n+\n+    Ibexa\\Core\\Limitation\\RoleLimitationType:\n+        arguments:\n+            $persistence: '@ezpublish.api.persistence_handler'\n+        tags:\n+            - { name: ezpublish.limitationType, alias: Role }"
        },
        {
          "filename": "phpunit-integration-legacy.xml",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -73,6 +73,9 @@\n         <testsuite name=\"gateway-integration\">\n             <file>eZ/Publish/SPI/Tests/Search/Content/IndexerGatewayTest.php</file>\n         </testsuite>\n+        <testsuite name=\"Ibexa\\Tests\\Integration\\\">\n+            <directory>tests/integration</directory>\n+        </testsuite>\n     </testsuites>\n     <filter>\n         <whitelist>"
        },
        {
          "filename": "phpunit.xml",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -73,6 +73,9 @@\n     <testsuite name=\"eZ\\Publish\\API\\Repository\\Values\\Content\">\n       <directory>eZ/Publish/API/Repository/Tests/Values/Content</directory>\n     </testsuite>\n+    <testsuite name=\"Ibexa\\Tests\\Core\\\">\n+        <directory>tests/lib</directory>\n+    </testsuite>\n   </testsuites>\n   <filter>\n     <whitelist>"
        },
        {
          "filename": "src/contracts/Repository/Values/User/Limitation/MemberOfLimitation.php",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Values\\User\\Limitation;\n+\n+final class MemberOfLimitation extends Limitation\n+{\n+    public const IDENTIFIER = 'MemberOf';\n+\n+    public function getIdentifier(): string\n+    {\n+        return self::IDENTIFIER;\n+    }\n+}"
        },
        {
          "filename": "src/contracts/Repository/Values/User/Limitation/RoleLimitation.php",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Values\\User\\Limitation;\n+\n+final class RoleLimitation extends Limitation\n+{\n+    public const IDENTIFIER = 'Role';\n+\n+    public function getIdentifier(): string\n+    {\n+        return self::IDENTIFIER;\n+    }\n+}"
        },
        {
          "filename": "src/lib/Limitation/MemberOfLimitationType.php",
          "status": "added",
          "additions": 201,
          "deletions": 0,
          "patch": "@@ -0,0 +1,201 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Core\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Exceptions\\NotImplementedException;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\User;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserGroup;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserGroupRoleAssignment;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserReference as APIUserReference;\n+use eZ\\Publish\\API\\Repository\\Exceptions\\NotFoundException;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserRoleAssignment;\n+use eZ\\Publish\\API\\Repository\\Values\\ValueObject;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentException;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentType;\n+use eZ\\Publish\\Core\\FieldType\\ValidationError;\n+use eZ\\Publish\\Core\\Limitation\\AbstractPersistenceLimitationType;\n+use eZ\\Publish\\SPI\\Limitation\\Type as SPILimitationTypeInterface;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\Limitation as APILimitationValue;\n+use Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation\\MemberOfLimitation;\n+\n+final class MemberOfLimitationType extends AbstractPersistenceLimitationType implements SPILimitationTypeInterface\n+{\n+    public const SELF_USER_GROUP = -1;\n+\n+    /**\n+     * @throws \\eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentType\n+     */\n+    public function acceptValue(APILimitationValue $limitationValue): void\n+    {\n+        if (!$limitationValue instanceof MemberOfLimitation) {\n+            throw new InvalidArgumentType(\n+                '$limitationValue',\n+                MemberOfLimitation::class,\n+                $limitationValue\n+            );\n+        }\n+\n+        if (!is_array($limitationValue->limitationValues)) {\n+            throw new InvalidArgumentType(\n+                '$limitationValue->limitationValues',\n+                'array',\n+                $limitationValue->limitationValues\n+            );\n+        }\n+\n+        foreach ($limitationValue->limitationValues as $key => $id) {\n+            if (!is_int($id)) {\n+                throw new InvalidArgumentType(\"\\$limitationValue->limitationValues[{$key}]\", 'int|string', $id);\n+            }\n+        }\n+    }\n+\n+    public function validate(APILimitationValue $limitationValue)\n+    {\n+        $validationErrors = [];\n+\n+        foreach ($limitationValue->limitationValues as $key => $id) {\n+            if ($id === self::SELF_USER_GROUP) {\n+                continue;\n+            }\n+            try {\n+                $this->persistence->contentHandler()->loadContentInfo($id);\n+            } catch (NotFoundException $e) {\n+                $validationErrors[] = new ValidationError(\n+                    \"limitationValues[%key%] => '%value%' does not exist in the backend\",\n+                    null,\n+                    [\n+                        'value' => $id,\n+                        'key' => $key,\n+                    ]\n+                );\n+            }\n+        }\n+\n+        return $validationErrors;\n+    }\n+\n+    /**\n+     * @param mixed[] $limitationValues\n+     *\n+     * @return \\eZ\\Publish\\API\\Repository\\Values\\User\\Limitation\n+     */\n+    public function buildValue(array $limitationValues): APILimitationValue\n+    {\n+        return new MemberOfLimitation(['limitationValues' => $limitationValues]);\n+    }\n+\n+    public function evaluate(APILimitationValue $value, APIUserReference $currentUser, ValueObject $object, array $targets = null)\n+    {\n+        if (!$value instanceof MemberOfLimitation) {\n+            throw new InvalidArgumentException(\n+                '$value',\n+                sprintf('Must be of type: %s', MemberOfLimitation::class)\n+            );\n+        }\n+\n+        if (!$object instanceof User\n+            && !$object instanceof UserGroup\n+            && !$object instanceof UserRoleAssignment\n+            && !$object instanceof UserGroupRoleAssignment\n+        ) {\n+            return self::ACCESS_ABSTAIN;\n+        }\n+\n+        if ($object instanceof User) {\n+            return $this->evaluateUser($value, $object, $currentUser);\n+        }\n+\n+        if ($object instanceof UserGroup) {\n+            return $this->evaluateUserGroup($value, $object, $currentUser);\n+        }\n+\n+        if ($object instanceof UserRoleAssignment) {\n+            return $this->evaluateUser($value, $object->getUser(), $currentUser);\n+        }\n+\n+        if ($object instanceof UserGroupRoleAssignment) {\n+            return $this->evaluateUserGroup($value, $object->getUserGroup(), $currentUser);\n+        }\n+\n+        return self::ACCESS_DENIED;\n+    }\n+\n+    public function getCriterion(APILimitationValue $value, APIUserReference $currentUser)\n+    {\n+        throw new NotImplementedException('Member of Limitation Criterion');\n+    }\n+\n+    public function valueSchema()\n+    {\n+        throw new NotImplementedException(__METHOD__);\n+    }\n+\n+    private function evaluateUser(MemberOfLimitation $value, User $object, APIUserReference $currentUser): bool\n+    {\n+        if (empty($value->limitationValues)) {\n+            return self::ACCESS_DENIED;\n+        }\n+\n+        $userLocations = $this->persistence->locationHandler()->loadLocationsByContent($object->getUserId());\n+\n+        $userGroups = [];\n+        foreach ($userLocations as $userLocation) {\n+            $userGroups[] = $this->persistence->locationHandler()->load($userLocation->parentId);\n+        }\n+        $userGroupsIdList = array_column($userGroups, 'contentId');\n+        $limitationValuesUserGroupsIdList = $value->limitationValues;\n+\n+        if (in_array(self::SELF_USER_GROUP, $limitationValuesUserGroupsIdList)) {\n+            $currentUserGroupsIdList = $this->getCurrentUserGroupsIdList($currentUser);\n+\n+            // Granted, if current user is in exactly those same groups\n+            if (count(array_intersect($userGroupsIdList, $currentUserGroupsIdList)) === count($userGroupsIdList)) {\n+                return self::ACCESS_GRANTED;\n+            }\n+\n+            // Unset SELF value, for next check\n+            $key = array_search(self::SELF_USER_GROUP, $limitationValuesUserGroupsIdList);\n+            unset($limitationValuesUserGroupsIdList[$key]);\n+        }\n+\n+        // Granted, if limitationValues matched user groups 1:1\n+        if (!empty($limitationValuesUserGroupsIdList)\n+            && empty(array_diff($userGroupsIdList, $limitationValuesUserGroupsIdList))\n+        ) {\n+            return self::ACCESS_GRANTED;\n+        }\n+\n+        return self::ACCESS_DENIED;\n+    }\n+\n+    private function evaluateUserGroup(MemberOfLimitation $value, UserGroup $userGroup, APIUserReference $currentUser): bool\n+    {\n+        $limitationValuesUserGroupsIdList = $value->limitationValues;\n+        if (in_array(self::SELF_USER_GROUP, $limitationValuesUserGroupsIdList)) {\n+            $limitationValuesUserGroupsIdList = $this->getCurrentUserGroupsIdList($currentUser);\n+        }\n+\n+        return in_array($userGroup->id, $limitationValuesUserGroupsIdList);\n+    }\n+\n+    private function getCurrentUserGroupsIdList(APIUserReference $currentUser): array\n+    {\n+        $currentUserLocations = $this->persistence->locationHandler()->loadLocationsByContent($currentUser->getUserId());\n+        $currentUserGroups = [];\n+        foreach ($currentUserLocations as $currentUserLocation) {\n+            $currentUserGroups[] = $this->persistence->locationHandler()->load($currentUserLocation->parentId);\n+        }\n+\n+        return array_column(\n+            $currentUserGroups,\n+            'contentId'\n+        );\n+    }\n+}"
        },
        {
          "filename": "src/lib/Limitation/RoleLimitationType.php",
          "status": "added",
          "additions": 143,
          "deletions": 0,
          "patch": "@@ -0,0 +1,143 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Core\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Exceptions\\NotImplementedException;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\Role;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\User;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserGroup;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserGroupRoleAssignment;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserReference as APIUserReference;\n+use eZ\\Publish\\API\\Repository\\Exceptions\\NotFoundException;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\UserRoleAssignment;\n+use eZ\\Publish\\API\\Repository\\Values\\ValueObject;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentException;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentType;\n+use eZ\\Publish\\Core\\FieldType\\ValidationError;\n+use eZ\\Publish\\Core\\Limitation\\AbstractPersistenceLimitationType;\n+use eZ\\Publish\\SPI\\Limitation\\Type as SPILimitationTypeInterface;\n+use eZ\\Publish\\API\\Repository\\Values\\User\\Limitation as APILimitationValue;\n+use Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation\\RoleLimitation;\n+\n+final class RoleLimitationType extends AbstractPersistenceLimitationType implements SPILimitationTypeInterface\n+{\n+    /**\n+     * @throws \\eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentType\n+     */\n+    public function acceptValue(APILimitationValue $limitationValue): void\n+    {\n+        if (!$limitationValue instanceof RoleLimitation) {\n+            throw new InvalidArgumentType(\n+                '$limitationValue',\n+                RoleLimitation::class,\n+                $limitationValue\n+            );\n+        }\n+\n+        if (!is_array($limitationValue->limitationValues)) {\n+            throw new InvalidArgumentType(\n+                '$limitationValue->limitationValues',\n+                'array',\n+                $limitationValue->limitationValues\n+            );\n+        }\n+\n+        foreach ($limitationValue->limitationValues as $key => $id) {\n+            if (!is_int($id)) {\n+                throw new InvalidArgumentType(\"\\$limitationValue->limitationValues[{$key}]\", 'int|string', $id);\n+            }\n+        }\n+    }\n+\n+    public function validate(APILimitationValue $limitationValue)\n+    {\n+        $validationErrors = [];\n+\n+        foreach ($limitationValue->limitationValues as $key => $id) {\n+            try {\n+                $this->persistence->userHandler()->loadRole($id);\n+            } catch (NotFoundException $e) {\n+                $validationErrors[] = new ValidationError(\n+                    \"limitationValues[%key%] => '%value%' does not exist in the backend\",\n+                    null,\n+                    [\n+                        'value' => $id,\n+                        'key' => $key,\n+                    ]\n+                );\n+            }\n+        }\n+\n+        return $validationErrors;\n+    }\n+\n+    /**\n+     * @param mixed[] $limitationValues\n+     *\n+     * @return \\eZ\\Publish\\API\\Repository\\Values\\User\\Limitation\n+     */\n+    public function buildValue(array $limitationValues): APILimitationValue\n+    {\n+        return new RoleLimitation(['limitationValues' => $limitationValues]);\n+    }\n+\n+    public function evaluate(APILimitationValue $value, APIUserReference $currentUser, ValueObject $object, array $targets = null)\n+    {\n+        if (!$value instanceof RoleLimitation) {\n+            throw new InvalidArgumentException(\n+                '$value',\n+                sprintf('Must be of type: %s', RoleLimitation::class)\n+            );\n+        }\n+\n+        if (\n+            !$object instanceof Role\n+            && !$object instanceof UserRoleAssignment\n+            && !$object instanceof UserGroupRoleAssignment\n+            && ($targets === null && ($object instanceof User || $object instanceof UserGroup))\n+        ) {\n+            return self::ACCESS_ABSTAIN;\n+        }\n+\n+        if ($targets !== null) {\n+            foreach ($targets as $target) {\n+                if ($target instanceof Role && !$this->evaluateRole($value, $target)) {\n+                    return self::ACCESS_DENIED;\n+                }\n+\n+                return self::ACCESS_GRANTED;\n+            }\n+        }\n+\n+        if ($object instanceof Role) {\n+            return $this->evaluateRole($value, $object);\n+        }\n+\n+        if ($object instanceof UserRoleAssignment || $object instanceof UserGroupRoleAssignment) {\n+            return $this->evaluateRole($value, $object->getRole());\n+        }\n+\n+        return self::ACCESS_DENIED;\n+    }\n+\n+    public function getCriterion(APILimitationValue $value, APIUserReference $currentUser)\n+    {\n+        throw new NotImplementedException('Role Limitation Criterion');\n+    }\n+\n+    public function valueSchema()\n+    {\n+        throw new NotImplementedException(__METHOD__);\n+    }\n+\n+    private function evaluateRole(RoleLimitation $value, Role $role): bool\n+    {\n+        return in_array($role->id, $value->limitationValues);\n+    }\n+}"
        },
        {
          "filename": "tests/integration/Core/.gitkeep",
          "status": "removed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "tests/integration/Core/Limitation/MemberOfLimitationTest.php",
          "status": "added",
          "additions": 74,
          "deletions": 0,
          "patch": "@@ -0,0 +1,74 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Tests\\Integration\\Core\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Repository;\n+use eZ\\Publish\\API\\Repository\\Tests\\Limitation\\PermissionResolver\\BaseLimitationIntegrationTest;\n+use Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation\\MemberOfLimitation;\n+use Ibexa\\Core\\Limitation\\MemberOfLimitationType;\n+\n+class MemberOfLimitationTest extends BaseLimitationIntegrationTest\n+{\n+    private const ADMIN_GROUP_ID = 14;\n+    private const USERS_GROUP_ID = 4;\n+\n+    public function userPermissionLimitationProvider(): array\n+    {\n+        $allowInAdministratorsLimitation = new MemberOfLimitation();\n+        $allowInAdministratorsLimitation->limitationValues[] = self::ADMIN_GROUP_ID;\n+\n+        $allowInUsersLimitation = new MemberOfLimitation();\n+        $allowInUsersLimitation->limitationValues[] = self::USERS_GROUP_ID;\n+\n+        $allowInSelfGroupLimitation = new MemberOfLimitation();\n+        $allowInSelfGroupLimitation->limitationValues[] = MemberOfLimitationType::SELF_USER_GROUP;\n+\n+        return [\n+            [[$allowInAdministratorsLimitation], false],\n+            [[$allowInUsersLimitation], true],\n+            [[$allowInSelfGroupLimitation], true],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider userPermissionLimitationProvider\n+     */\n+    public function testCanUserAssignRoleToUser(array $limitations, bool $expectedResult): void\n+    {\n+        $repository = $this->getRepository();\n+        $roleService = $repository->getRoleService();\n+        $userService = $repository->getUserService();\n+\n+        $adminRoleThatWillBeSet = $roleService->loadRoleByIdentifier('Administrator');\n+        $this->loginAsEditorUserWithLimitations('role', 'assign', $limitations);\n+\n+        $this->assertCanUser(\n+            $expectedResult,\n+            'role',\n+            'assign',\n+            $limitations,\n+            $userService->loadUser($this->permissionResolver->getCurrentUserReference()->getUserId()),\n+            [$adminRoleThatWillBeSet]\n+        );\n+\n+        $this->assertCanUser(\n+            $expectedResult,\n+            'role',\n+            'assign',\n+            $limitations,\n+            $repository->sudo(\n+                static function (Repository $repository) {\n+                    return $repository->getUserService()->loadUserGroup(self::USERS_GROUP_ID);\n+                },\n+                $repository\n+            ),\n+            [$adminRoleThatWillBeSet]\n+        );\n+    }\n+}"
        },
        {
          "filename": "tests/integration/Core/Limitation/RoleLimitationTest.php",
          "status": "added",
          "additions": 69,
          "deletions": 0,
          "patch": "@@ -0,0 +1,69 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Tests\\Integration\\Core\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Repository;\n+use eZ\\Publish\\API\\Repository\\Tests\\Limitation\\PermissionResolver\\BaseLimitationIntegrationTest;\n+use Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation\\RoleLimitation;\n+\n+class RoleLimitationTest extends BaseLimitationIntegrationTest\n+{\n+    private const USERS_GROUP_ID = 4;\n+\n+    public function userPermissionLimitationProvider(): array\n+    {\n+        $allowEditorLimitation = new RoleLimitation();\n+        $roleService = $this->getRepository()->getRoleService();\n+        $allowEditorLimitation->limitationValues[] = $roleService->loadRoleByIdentifier('Editor')->id;\n+\n+        $allowAdministratorLimitation = new RoleLimitation();\n+        $allowAdministratorLimitation->limitationValues[] = $roleService->loadRoleByIdentifier('Administrator')->id;\n+\n+        return [\n+            [[$allowEditorLimitation], false],\n+            [[$allowAdministratorLimitation], true],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider userPermissionLimitationProvider\n+     */\n+    public function testCanUserAssignRole(array $limitations, bool $expectedResult): void\n+    {\n+        $repository = $this->getRepository();\n+        $roleService = $repository->getRoleService();\n+        $userService = $repository->getUserService();\n+\n+        $adminRoleThatWillBeSet = $roleService->loadRoleByIdentifier('Administrator');\n+        $this->loginAsEditorUserWithLimitations('role', 'assign', $limitations);\n+\n+        $this->assertCanUser(\n+            $expectedResult,\n+            'role',\n+            'assign',\n+            $limitations,\n+            $userService->loadUser($this->permissionResolver->getCurrentUserReference()->getUserId()),\n+            [$adminRoleThatWillBeSet]\n+        );\n+\n+        $this->assertCanUser(\n+            $expectedResult,\n+            'role',\n+            'assign',\n+            $limitations,\n+            $repository->sudo(\n+                static function (Repository $repository) {\n+                    return $repository->getUserService()->loadUserGroup(self::USERS_GROUP_ID);\n+                },\n+                $repository\n+            ),\n+            [$adminRoleThatWillBeSet]\n+        );\n+    }\n+}"
        },
        {
          "filename": "tests/lib/Limitation/MemberOfLimitationTypeTest.php",
          "status": "added",
          "additions": 517,
          "deletions": 0,
          "patch": "@@ -0,0 +1,517 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Tests\\Core\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Values\\Content\\ContentInfo;\n+use eZ\\Publish\\API\\Repository\\Values\\ValueObject;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentType;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\NotFoundException;\n+use eZ\\Publish\\Core\\Limitation\\Tests\\Base;\n+use eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Handler as ContentHandlerInterface;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\UserGroupRoleAssignment;\n+use eZ\\Publish\\SPI\\Persistence\\Content\\Location;\n+use eZ\\Publish\\SPI\\Persistence\\Content\\Location\\Handler as LocationHandlerInterface;\n+use eZ\\Publish\\Core\\Repository\\Values\\Content\\Content;\n+use eZ\\Publish\\Core\\Repository\\Values\\Content\\VersionInfo;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\Role;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\User;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\UserGroup;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\UserRoleAssignment;\n+use Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation\\MemberOfLimitation;\n+use Ibexa\\Core\\Limitation\\MemberOfLimitationType;\n+\n+class MemberOfLimitationTypeTest extends Base\n+{\n+    /** @var \\Ibexa\\Core\\Limitation\\MemberOfLimitationType */\n+    private $limitationType;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->limitationType = new MemberOfLimitationType(\n+            $this->getPersistenceMock()\n+        );\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestAcceptValue\n+     */\n+    public function testAcceptValue(MemberOfLimitation $limitation): void\n+    {\n+        $this->expectNotToPerformAssertions();\n+        $this->limitationType->acceptValue($limitation);\n+    }\n+\n+    public function providerForTestAcceptValue(): array\n+    {\n+        return [\n+            [\n+                new MemberOfLimitation([\n+                    'limitationValues' => [],\n+                ]),\n+            ],\n+            [\n+                new MemberOfLimitation([\n+                    'limitationValues' => [MemberOfLimitationType::SELF_USER_GROUP, 8],\n+                ]),\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestAcceptValueException\n+     */\n+    public function testAcceptValueException(MemberOfLimitation $limitation): void\n+    {\n+        $this->expectException(InvalidArgumentType::class);\n+        $this->limitationType->acceptValue($limitation);\n+    }\n+\n+    public function providerForTestAcceptValueException(): array\n+    {\n+        return [\n+            [\n+                new MemberOfLimitation([\n+                    'limitationValues' => 1,\n+                ]),\n+            ],\n+            [\n+                new MemberOfLimitation([\n+                    'limitationValues' => null,\n+                ]),\n+            ],\n+            [\n+                new MemberOfLimitation([\n+                    'limitationValues' => 'string',\n+                ]),\n+            ],\n+            [\n+                new MemberOfLimitation([\n+                    'limitationValues' => ['string'],\n+                ]),\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestAcceptValue\n+     */\n+    public function testValidatePass(MemberOfLimitation $limitation): void\n+    {\n+        $contentHandlerMock = $this->createMock(ContentHandlerInterface::class);\n+\n+        $contentHandlerMock\n+            ->method('loadContentInfo')\n+            ->with(8);\n+\n+        $this->getPersistenceMock()\n+            ->method('contentHandler')\n+            ->willReturn($contentHandlerMock);\n+\n+        $validationErrors = $this->limitationType->validate($limitation);\n+\n+        self::assertEmpty($validationErrors);\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestValidateError\n+     */\n+    public function testValidateError(MemberOfLimitation $limitation, int $errorCount): void\n+    {\n+        $contentHandlerMock = $this->createMock(ContentHandlerInterface::class);\n+\n+        if ($limitation->limitationValues !== null) {\n+            $contentHandlerMock\n+                ->method('loadContentInfo')\n+                ->withConsecutive([14], [18])\n+                ->willReturnOnConsecutiveCalls(\n+                    $this->throwException(new NotFoundException('UserGroup', 18)),\n+                    new ContentInfo()\n+                );\n+\n+            $this->getPersistenceMock()\n+                ->method('contentHandler')\n+                ->willReturn($contentHandlerMock);\n+        }\n+\n+        $validationErrors = $this->limitationType->validate($limitation);\n+        self::assertCount($errorCount, $validationErrors);\n+    }\n+\n+    public function providerForTestValidateError()\n+    {\n+        return [\n+            [\n+                new MemberOfLimitation([\n+                    'limitationValues' => [14, 18],\n+                ]),\n+                1,\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestEvaluate\n+     */\n+    public function testEvaluate(\n+        MemberOfLimitation $limitation,\n+        ValueObject $object,\n+        ?bool $expected\n+    ): void {\n+        $locationHandlerMock = $this->createMock(LocationHandlerInterface::class);\n+\n+        if ($object instanceof User || $object instanceof UserRoleAssignment) {\n+            $locationHandlerMock\n+                ->method('loadLocationsByContent')\n+                ->with($object instanceof User ? $object->getUserId() : $object->getUser()->getUserId())\n+                ->willReturn([\n+                    new Location(['parentId' => 13]),\n+                    new Location(['parentId' => 14]),\n+                ]);\n+\n+            $locationHandlerMock\n+                ->method('load')\n+                ->withConsecutive(\n+                    [13], [14]\n+                )\n+                ->willReturnOnConsecutiveCalls(\n+                    new Location(['contentId' => 14]),\n+                    new Location(['contentId' => 25])\n+                );\n+\n+            $this->getPersistenceMock()\n+                ->method('locationHandler')\n+                ->willReturn($locationHandlerMock);\n+        }\n+\n+        $value = (new MemberOfLimitationType($this->getPersistenceMock()))->evaluate(\n+            $limitation,\n+            $this->getUserMock(),\n+            $object\n+        );\n+\n+        self::assertEquals($expected, $value);\n+    }\n+\n+    public function providerForTestEvaluate()\n+    {\n+        return [\n+            'valid_group_limitation' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [14, 18],\n+                ]),\n+                'object' => new UserGroup([\n+                    'content' => new Content([\n+                        'versionInfo' => new VersionInfo([\n+                            'contentInfo' => new ContentInfo([\n+                                'id' => 14,\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'expected' => true,\n+            ],\n+            'allow_non_user_groups_limitation' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [],\n+                ]),\n+                'object' => new UserGroup([\n+                    'content' => new Content([\n+                        'versionInfo' => new VersionInfo([\n+                            'contentInfo' => new ContentInfo([\n+                                'id' => 14,\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'expected' => false,\n+            ],\n+            'pass_to_next_limitation' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [14, 18],\n+                ]),\n+                'object' => new VersionInfo([\n+                    'contentInfo' => new ContentInfo([\n+                        'id' => 14,\n+                    ]),\n+                ]),\n+                'expected' => null,\n+            ],\n+            'invalid_user_must_have_permission_to_every_group_user_is_in' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [25, 10],\n+                ]),\n+                'object' => new User([\n+                    'content' => new Content([\n+                        'versionInfo' => new VersionInfo([\n+                            'contentInfo' => new ContentInfo([\n+                                'id' => 66,\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'expected' => false,\n+            ],\n+            'user_must_have_permission_to_every_group_user_is_in' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [14, 25],\n+                ]),\n+                'object' => new User([\n+                    'content' => new Content([\n+                        'versionInfo' => new VersionInfo([\n+                            'contentInfo' => new ContentInfo([\n+                                'id' => 66,\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'expected' => true,\n+            ],\n+            'user_role_assigment_valid' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [14, 25],\n+                ]),\n+                'object' => new UserRoleAssignment([\n+                    'user' => new User([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'expected' => true,\n+            ],\n+            'user_role_assigment_invalid_user' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [25, 10],\n+                ]),\n+                'object' => new UserRoleAssignment([\n+                    'user' => new User([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 7]),\n+                ]),\n+                'expected' => false,\n+            ],\n+            'user_group_role_assigment_valid' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [14, 18],\n+                ]),\n+                'object' => new UserGroupRoleAssignment([\n+                    'userGroup' => new UserGroup([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 14,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 7]),\n+                ]),\n+                'expected' => true,\n+            ],\n+            'user_group_role_assigment_invalid_user_group' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [18],\n+                ]),\n+                'object' => new UserGroupRoleAssignment([\n+                    'userGroup' => new UserGroup([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 14,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 7]),\n+                ]),\n+                'expected' => false,\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @param \\eZ\\Publish\\API\\Repository\\Values\\User\\User|\\eZ\\Publish\\API\\Repository\\Values\\User\\UserRoleAssignment $object\n+     * @dataProvider providerForTestEvaluateSelfGroup\n+     */\n+    public function testEvaluateSelfGroup(\n+        MemberOfLimitation $limitation,\n+        ValueObject $object,\n+        array $currentUserGroupLocations,\n+        ?bool $expected\n+    ): void {\n+        $locationHandlerMock = $this->createMock(LocationHandlerInterface::class);\n+\n+        $currentUserLocation = [];\n+\n+        foreach ($currentUserGroupLocations as $groupLocation) {\n+            $currentUserLocation[] = new Location(['parentId' => $groupLocation->contentId - 1]);\n+        }\n+        $locationHandlerMock\n+            ->method('loadLocationsByContent')\n+            ->withConsecutive(\n+                [$object instanceof User ? $object->getUserId() : $object->getUser()->getUserId()],\n+                [$this->getUserMock()->getUserId()]\n+            )\n+            ->willReturnOnConsecutiveCalls(\n+                [\n+                    new Location(['parentId' => 13]),\n+                    new Location(['parentId' => 43]),\n+                ],\n+                $currentUserLocation\n+            );\n+\n+        $locationHandlerMock\n+            ->method('load')\n+            ->withConsecutive(\n+                [13], [43]\n+            )\n+            ->willReturnOnConsecutiveCalls(\n+                new Location(['contentId' => 14]),\n+                new Location(['contentId' => 44]),\n+                ...$currentUserGroupLocations\n+            );\n+\n+        $this->getPersistenceMock()\n+            ->method('locationHandler')\n+            ->willReturn($locationHandlerMock);\n+\n+        $this->getPersistenceMock()\n+            ->method('locationHandler')\n+            ->willReturn($locationHandlerMock);\n+\n+        $value = (new MemberOfLimitationType($this->getPersistenceMock()))->evaluate(\n+            $limitation,\n+            $this->getUserMock(),\n+            $object\n+        );\n+\n+        self::assertEquals($expected, $value);\n+    }\n+\n+    public function providerForTestEvaluateSelfGroup(): array\n+    {\n+        return [\n+            'role_assign_to_user_in_same_group' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [MemberOfLimitationType::SELF_USER_GROUP],\n+                ]),\n+                'object' => new User([\n+                    'content' => new Content([\n+                        'versionInfo' => new VersionInfo([\n+                            'contentInfo' => new ContentInfo([\n+                                'id' => 66,\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'currentUserGroupLocations' => [\n+                    new Location(['contentId' => 14]),\n+                    new Location(['contentId' => 44]),\n+                    new Location(['contentId' => 55]),\n+                ],\n+                'expected' => true,\n+            ],\n+            'role_assign_to_user_in_other_group' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [MemberOfLimitationType::SELF_USER_GROUP],\n+                ]),\n+                'object' => new User([\n+                    'content' => new Content([\n+                        'versionInfo' => new VersionInfo([\n+                            'contentInfo' => new ContentInfo([\n+                                'id' => 66,\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'currentUserGroupLocations' => [\n+                    new Location(['contentId' => 11]),\n+                    new Location(['contentId' => 14]),\n+                ],\n+                'expected' => false,\n+            ],\n+            'role_assign_to_user_in_overlapped_groups' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [MemberOfLimitationType::SELF_USER_GROUP, 14, 44],\n+                ]),\n+                'object' => new User([\n+                    'content' => new Content([\n+                        'versionInfo' => new VersionInfo([\n+                            'contentInfo' => new ContentInfo([\n+                                'id' => 66,\n+                            ]),\n+                        ]),\n+                    ]),\n+                ]),\n+                'currentUserGroupLocations' => [\n+                    new Location(['contentId' => 1]),\n+                ],\n+                'expected' => true,\n+            ],\n+            'user_role_assigment_to_user_in_same_group' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [MemberOfLimitationType::SELF_USER_GROUP],\n+                ]),\n+                'object' => new UserRoleAssignment([\n+                    'user' => new User([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 4]),\n+                ]),\n+                'currentUserGroupLocations' => [\n+                    new Location(['contentId' => 14]),\n+                    new Location(['contentId' => 44]),\n+                    new Location(['contentId' => 55]),\n+                ],\n+                'expected' => true,\n+            ],\n+            'user_role_assigment_to_user_in_other_group' => [\n+                'limitation' => new MemberOfLimitation([\n+                    'limitationValues' => [MemberOfLimitationType::SELF_USER_GROUP],\n+                ]),\n+                'object' => new UserRoleAssignment([\n+                    'user' => new User([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 4]),\n+                ]),\n+                'currentUserGroupLocations' => [\n+                    new Location(['contentId' => 11]),\n+                    new Location(['contentId' => 14]),\n+                ],\n+                'expected' => false,\n+            ],\n+        ];\n+    }\n+}"
        },
        {
          "filename": "tests/lib/Limitation/RoleLimitationTypeTest.php",
          "status": "added",
          "additions": 318,
          "deletions": 0,
          "patch": "@@ -0,0 +1,318 @@\n+<?php\n+\n+/**\n+ * @copyright Copyright (C) eZ Systems AS. All rights reserved.\n+ * @license For full copyright and license information view LICENSE file distributed with this source code.\n+ */\n+declare(strict_types=1);\n+\n+namespace Ibexa\\Tests\\Core\\Limitation;\n+\n+use eZ\\Publish\\API\\Repository\\Values\\Content\\ContentInfo;\n+use eZ\\Publish\\API\\Repository\\Values\\ValueObject;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\InvalidArgumentType;\n+use eZ\\Publish\\Core\\Base\\Exceptions\\NotFoundException;\n+use eZ\\Publish\\Core\\Limitation\\Tests\\Base;\n+use eZ\\Publish\\Core\\Persistence\\Legacy\\User\\Handler as UserHandlerInterface;\n+use eZ\\Publish\\Core\\Persistence\\Legacy\\Content\\Handler as ContentHandlerInterface;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\UserGroup;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\UserGroupRoleAssignment;\n+use eZ\\Publish\\SPI\\Persistence\\Content\\Location;\n+use eZ\\Publish\\SPI\\Persistence\\Content\\Location\\Handler as LocationHandlerInterface;\n+use eZ\\Publish\\Core\\Repository\\Values\\Content\\Content;\n+use eZ\\Publish\\Core\\Repository\\Values\\Content\\VersionInfo;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\Role;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\User;\n+use eZ\\Publish\\Core\\Repository\\Values\\User\\UserRoleAssignment;\n+use Ibexa\\Contracts\\Core\\Repository\\Values\\User\\Limitation\\RoleLimitation;\n+use Ibexa\\Core\\Limitation\\RoleLimitationType;\n+\n+class RoleLimitationTypeTest extends Base\n+{\n+    /** @var \\Ibexa\\Core\\Limitation\\RoleLimitationType */\n+    private $limitationType;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->limitationType = new RoleLimitationType(\n+            $this->getPersistenceMock()\n+        );\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestAcceptValue\n+     */\n+    public function testAcceptValue(RoleLimitation $limitation): void\n+    {\n+        $this->expectNotToPerformAssertions();\n+        $this->limitationType->acceptValue($limitation);\n+    }\n+\n+    public function providerForTestAcceptValue(): array\n+    {\n+        return [\n+            [\n+                new RoleLimitation([\n+                    'limitationValues' => [],\n+                ]),\n+            ],\n+            [\n+                new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestAcceptValueException\n+     */\n+    public function testAcceptValueException(RoleLimitation $limitation): void\n+    {\n+        $this->expectException(InvalidArgumentType::class);\n+        $this->limitationType->acceptValue($limitation);\n+    }\n+\n+    public function providerForTestAcceptValueException(): array\n+    {\n+        return [\n+            [\n+                new RoleLimitation([\n+                    'limitationValues' => 1,\n+                ]),\n+            ],\n+            [\n+                new RoleLimitation([\n+                    'limitationValues' => null,\n+                ]),\n+            ],\n+            [\n+                new RoleLimitation([\n+                    'limitationValues' => 'string',\n+                ]),\n+            ],\n+            [\n+                new RoleLimitation([\n+                    'limitationValues' => ['string'],\n+                ]),\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestAcceptValue\n+     */\n+    public function testValidatePass(RoleLimitation $limitation): void\n+    {\n+        $userHandlerMock = $this->createMock(UserHandlerInterface::class);\n+        $contentHandlerMock = $this->createMock(ContentHandlerInterface::class);\n+\n+        if ($limitation->limitationValues !== null) {\n+            $userHandlerMock\n+                ->method('loadRole')\n+                ->withConsecutive([4, Role::STATUS_DEFINED], [8, Role::STATUS_DEFINED]);\n+\n+            $this->getPersistenceMock()\n+                ->method('userHandler')\n+                ->willReturn($userHandlerMock);\n+        }\n+\n+        if ($limitation->limitationValues !== null) {\n+            $contentHandlerMock\n+                ->method('loadContentInfo')\n+                ->withConsecutive([14], [21]);\n+\n+            $this->getPersistenceMock()\n+                ->method('contentHandler')\n+                ->willReturn($contentHandlerMock);\n+        }\n+\n+        $validationErrors = $this->limitationType->validate($limitation);\n+\n+        self::assertEmpty($validationErrors);\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestValidateError\n+     */\n+    public function testValidateError(RoleLimitation $limitation, int $errorCount): void\n+    {\n+        $userHandlerMock = $this->createMock(UserHandlerInterface::class);\n+\n+        if ($limitation->limitationValues !== null) {\n+            $userHandlerMock\n+                ->method('loadRole')\n+                ->withConsecutive([4, Role::STATUS_DEFINED], [8, Role::STATUS_DEFINED])\n+                ->willReturnOnConsecutiveCalls(\n+                    $this->throwException(new NotFoundException('Role', 4)),\n+                    new Role()\n+                );\n+\n+            $this->getPersistenceMock()\n+                ->method('userHandler')\n+                ->willReturn($userHandlerMock);\n+        }\n+\n+        $validationErrors = $this->limitationType->validate($limitation);\n+        self::assertCount($errorCount, $validationErrors);\n+    }\n+\n+    public function providerForTestValidateError()\n+    {\n+        return [\n+            [\n+                new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+                1,\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider providerForTestEvaluate\n+     */\n+    public function testEvaluate(\n+        RoleLimitation $limitation,\n+        ValueObject $object,\n+        ?array $targets,\n+        ?bool $expected\n+    ): void {\n+        $locationHandlerMock = $this->createMock(LocationHandlerInterface::class);\n+\n+        if ($object instanceof UserRoleAssignment) {\n+            $locationHandlerMock\n+                ->method('loadLocationsByContent')\n+                ->with($object instanceof User ? $object->getUserId() : $object->getUser()->getUserId())\n+                ->willReturn([\n+                    new Location(['contentId' => 14]),\n+                    new Location(['contentId' => 25]),\n+                ]);\n+\n+            $this->getPersistenceMock()\n+                ->method('locationHandler')\n+                ->willReturn($locationHandlerMock);\n+        }\n+\n+        $value = (new RoleLimitationType($this->getPersistenceMock()))->evaluate(\n+            $limitation,\n+            $this->getUserMock(),\n+            $object,\n+            $targets\n+        );\n+\n+        self::assertEquals($expected, $value);\n+    }\n+\n+    public function providerForTestEvaluate()\n+    {\n+        return [\n+            'valid_role_limitation' => [\n+                'limitation' => new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+                'object' => new Role(['id' => 4]),\n+                'targets' => null,\n+                'expected' => true,\n+            ],\n+            'allow_non_role_limitation' => [\n+                'limitation' => new RoleLimitation([\n+                    'limitationValues' => [],\n+                ]),\n+                'object' => new Role(['id' => 4]),\n+                'targets' => null,\n+                'expected' => false,\n+            ],\n+            'pass_to_next_limitation' => [\n+                'limitation' => new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+                'object' => new VersionInfo([\n+                    'contentInfo' => new ContentInfo([\n+                        'id' => 14,\n+                    ]),\n+                ]),\n+                'targets' => null,\n+                'expected' => null,\n+            ],\n+            'user_role_assigment_valid' => [\n+                'limitation' => new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+                'object' => new UserRoleAssignment([\n+                    'user' => new User([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 4]),\n+                ]),\n+                'targets' => null,\n+                'expected' => true,\n+            ],\n+            'user_role_assigment_invalid_role' => [\n+                'limitation' => new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+                'object' => new UserRoleAssignment([\n+                    'user' => new User([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 7]),\n+                ]),\n+                'targets' => null,\n+                'expected' => false,\n+            ],\n+            'user_group_role_assigment_valid' => [\n+                'limitation' => new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+                'object' => new UserGroupRoleAssignment([\n+                    'userGroup' => new UserGroup([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 4]),\n+                ]),\n+                'targets' => null,\n+                'expected' => true,\n+            ],\n+            'user_group_role_assigment_invalid_role' => [\n+                'limitation' => new RoleLimitation([\n+                    'limitationValues' => [4, 8],\n+                ]),\n+                'object' => new UserGroupRoleAssignment([\n+                    'userGroup' => new UserGroup([\n+                        'content' => new Content([\n+                            'versionInfo' => new VersionInfo([\n+                                'contentInfo' => new ContentInfo([\n+                                    'id' => 66,\n+                                ]),\n+                            ]),\n+                        ]),\n+                    ]),\n+                    'role' => new Role(['id' => 7]),\n+                ]),\n+                'targets' => null,\n+                'expected' => false,\n+            ],\n+        ];\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 7,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4e93c5beb78a297b65a850c53a91baad5e9d20de",
            "date": "2023-12-22T10:16:04Z",
            "author_login": "glye"
          },
          {
            "sha": "142152f9bae4c4835713df0bdfe22bc98d03f9a1",
            "date": "2023-11-03T09:24:35Z",
            "author_login": "glye"
          },
          {
            "sha": "4e38715e48e61f314f8b9da4577a3631c5bc8dd4",
            "date": "2023-10-31T09:04:05Z",
            "author_login": "glye"
          },
          {
            "sha": "6c44c707508e042764d36b531e456dca9edd4b70",
            "date": "2023-07-18T11:29:16Z",
            "author_login": "glye"
          },
          {
            "sha": "957e67a08af2b3265753f9763943e8225ed779ab",
            "date": "2022-11-10T11:22:29Z",
            "author_login": "ViniTou"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-269",
    "description": "An issue was discovered in eZ Platform Ibexa Kernel before 1.3.26. The Company admin role gives excessive privileges.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-12T05:15:11.917",
    "last_modified": "2024-11-21T07:33:15.613",
    "fix_date": "2022-11-10T11:22:29Z"
  },
  "references": [
    {
      "url": "https://developers.ibexa.co/security-advisories/ibexa-sa-2022-009-critical-vulnerabilities-in-graphql-role-assignment-ct-editing-and-drafts-tooltips",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ezsystems/ezplatform-kernel/security/advisories/GHSA-8h83-chh2-fchp",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ezsystems/ezpublish-kernel/commit/957e67a08af2b3265753f9763943e8225ed779ab",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ezsystems/ezpublish-kernel/security/advisories/GHSA-99r3-xmmq-7q7g",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://developers.ibexa.co/security-advisories/ibexa-sa-2022-009-critical-vulnerabilities-in-graphql-role-assignment-ct-editing-and-drafts-tooltips",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ezsystems/ezplatform-kernel/security/advisories/GHSA-8h83-chh2-fchp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ezsystems/ezpublish-kernel/commit/957e67a08af2b3265753f9763943e8225ed779ab",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ezsystems/ezpublish-kernel/security/advisories/GHSA-99r3-xmmq-7q7g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.833746",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ezpublish-kernel",
    "owner": "ezsystems",
    "created_at": "2011-04-26T08:54:24Z",
    "updated_at": "2024-01-12T12:11:15Z",
    "pushed_at": "2023-12-22T10:16:07Z",
    "size": 61520,
    "stars": 161,
    "forks": 203,
    "open_issues": 4,
    "watchers": 161,
    "has_security_policy": false,
    "default_branch": "7.5",
    "protected_branches": [
      "5.4",
      "6.7",
      "6.13",
      "7.5"
    ],
    "languages": {
      "PHP": 26977192,
      "XSLT": 296124,
      "Twig": 60153,
      "PLpgSQL": 48038,
      "Gherkin": 20448,
      "Shell": 3269
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:17:35.004665"
  }
}