{
  "cve_id": "CVE-2023-0107",
  "github_data": {
    "repository": "usememos/memos",
    "fix_commit": "0f8ce3dd1696722f951d7195ad1f88b39a5d15d7",
    "related_commits": [
      "0f8ce3dd1696722f951d7195ad1f88b39a5d15d7",
      "0f8ce3dd1696722f951d7195ad1f88b39a5d15d7"
    ],
    "patch_url": "https://github.com/usememos/memos/commit/0f8ce3dd1696722f951d7195ad1f88b39a5d15d7.patch",
    "fix_commit_details": {
      "sha": "0f8ce3dd1696722f951d7195ad1f88b39a5d15d7",
      "commit_date": "2023-01-06T16:13:49Z",
      "author": {
        "login": "boojack",
        "type": "User",
        "stats": {
          "total_commits": 2202,
          "average_weekly_commits": 13.50920245398773,
          "total_additions": 418328,
          "total_deletions": 387434,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "refactor: return jsx element instead of string in marked (#910)",
        "length": 142,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1054,
        "additions": 417,
        "deletions": 637
      },
      "files": [
        {
          "filename": "web/src/components/CreateTagDialog.tsx",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -2,6 +2,7 @@ import { TextField } from \"@mui/joy\";\n import React, { useEffect, useState } from \"react\";\r\n import { useTagStore } from \"../store/module\";\r\n import { getTagSuggestionList } from \"../helpers/api\";\r\n+import { matcher } from \"../labs/marked/matcher\";\r\n import Tag from \"../labs/marked/parser/Tag\";\r\n import Icon from \"./Icon\";\r\n import toastHelper from \"./Toast\";\r\n@@ -10,7 +11,7 @@ import { generateDialog } from \"./Dialog\";\n type Props = DialogProps;\r\n \r\n const validateTagName = (tagName: string): boolean => {\r\n-  const matchResult = Tag.matcher(`#${tagName}`);\r\n+  const matchResult = matcher(`#${tagName}`, Tag.regexp);\r\n   if (!matchResult || matchResult[1] !== tagName) {\r\n     return false;\r\n   }\r"
        },
        {
          "filename": "web/src/components/Memo.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 6,
          "patch": "@@ -15,7 +15,6 @@ import \"../less/memo.less\";\n \n interface Props {\n   memo: Memo;\n-  highlightWord?: string;\n }\n \n export const getFormatedMemoTimeStr = (time: number, locale = \"en\"): string => {\n@@ -27,7 +26,7 @@ export const getFormatedMemoTimeStr = (time: number, locale = \"en\"): string => {\n };\n \n const Memo: React.FC<Props> = (props: Props) => {\n-  const { memo, highlightWord } = props;\n+  const { memo } = props;\n   const { t, i18n } = useTranslation();\n   const navigate = useNavigate();\n   const editorStore = useEditorStore();\n@@ -143,9 +142,6 @@ const Memo: React.FC<Props> = (props: Props) => {\n       if (imgUrl) {\n         showPreviewImageDialog([imgUrl], 0);\n       }\n-    } else if (targetEl.tagName === \"BUTTON\" && targetEl.className === \"codeblock-copy-btn\") {\n-      copy(targetEl.parentElement?.children[1].textContent ?? \"\");\n-      toastHelper.success(t(\"message.succeed-copy-code\"));\n     }\n   };\n \n@@ -228,7 +224,6 @@ const Memo: React.FC<Props> = (props: Props) => {\n       </div>\n       <MemoContent\n         content={memo.content}\n-        highlightWord={highlightWord}\n         onMemoContentClick={handleMemoContentClick}\n         onMemoContentDoubleClick={handleMemoContentDoubleClick}\n       />"
        },
        {
          "filename": "web/src/components/MemoContent.tsx",
          "status": "modified",
          "additions": 7,
          "deletions": 10,
          "patch": "@@ -2,7 +2,6 @@ import { useEffect, useMemo, useRef, useState } from \"react\";\n import { useTranslation } from \"react-i18next\";\n import { useUserStore } from \"../store/module\";\n import { marked } from \"../labs/marked\";\n-import { highlightWithWord } from \"../labs/highlighter\";\n import Icon from \"./Icon\";\n import \"../less/memo-content.less\";\n \n@@ -12,7 +11,6 @@ export interface DisplayConfig {\n \n interface Props {\n   content: string;\n-  highlightWord?: string;\n   className?: string;\n   displayConfig?: Partial<DisplayConfig>;\n   onMemoContentClick?: (e: React.MouseEvent) => void;\n@@ -30,14 +28,14 @@ const defaultDisplayConfig: DisplayConfig = {\n };\n \n const MemoContent: React.FC<Props> = (props: Props) => {\n-  const { className, content, highlightWord, onMemoContentClick, onMemoContentDoubleClick } = props;\n+  const { className, content, onMemoContentClick, onMemoContentDoubleClick } = props;\n+  const { t } = useTranslation();\n+  const userStore = useUserStore();\n+  const user = userStore.state.user;\n   const foldedContent = useMemo(() => {\n     const firstHorizontalRuleIndex = content.search(/^---$|^\\*\\*\\*$|^___$/m);\n     return firstHorizontalRuleIndex !== -1 ? content.slice(0, firstHorizontalRuleIndex) : content;\n   }, [content]);\n-  const { t } = useTranslation();\n-  const userStore = useUserStore();\n-  const user = userStore.state.user;\n \n   const [state, setState] = useState<State>({\n     expandButtonStatus: -1,\n@@ -97,10 +95,9 @@ const MemoContent: React.FC<Props> = (props: Props) => {\n         className={`memo-content-text ${state.expandButtonStatus === 0 ? \"expanded\" : \"\"}`}\n         onClick={handleMemoContentClick}\n         onDoubleClick={handleMemoContentDoubleClick}\n-        dangerouslySetInnerHTML={{\n-          __html: highlightWithWord(marked(state.expandButtonStatus === 0 ? foldedContent : content), highlightWord),\n-        }}\n-      ></div>\n+      >\n+        {marked(state.expandButtonStatus === 0 ? foldedContent : content)}\n+      </div>\n       {state.expandButtonStatus !== -1 && (\n         <div className=\"expand-btn-container\">\n           <span className={`btn ${state.expandButtonStatus === 0 ? \"expand-btn\" : \"fold-btn\"}`} onClick={handleExpandBtnClick}>"
        },
        {
          "filename": "web/src/components/MemoList.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -19,7 +19,6 @@ const MemoList = () => {\n   const memoDisplayTsOption = userStore.state.user?.setting.memoDisplayTsOption;\n   const { memos, isFetching } = memoStore.state;\n   const [isComplete, setIsComplete] = useState<boolean>(false);\n-  const [highlightWord, setHighlightWord] = useState<string | undefined>(\"\");\n \n   const { tag: tagQuery, duration, type: memoType, text: textQuery, shortcutId, visibility } = query ?? {};\n   const shortcut = shortcutId ? shortcutStore.getShortcutById(shortcutId) : null;\n@@ -107,7 +106,6 @@ const MemoList = () => {\n     if (pageWrapper) {\n       pageWrapper.scrollTo(0, 0);\n     }\n-    setHighlightWord(query?.text);\n   }, [query]);\n \n   useEffect(() => {\n@@ -136,7 +134,7 @@ const MemoList = () => {\n   return (\n     <div className=\"memo-list-container\">\n       {sortedMemos.map((memo) => (\n-        <Memo key={`${memo.id}-${memo.displayTs}`} memo={memo} highlightWord={highlightWord} />\n+        <Memo key={`${memo.id}-${memo.displayTs}`} memo={memo} />\n       ))}\n       {isFetching ? (\n         <div className=\"status-text-container fetching-tip\">"
        },
        {
          "filename": "web/src/labs/highlighter/index.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-import { escape } from \"lodash\";\n-\n-const walkthroughNodeWithKeyword = (node: HTMLElement, keyword: string) => {\n-  if (node.nodeType === 3) {\n-    const span = document.createElement(\"span\");\n-    span.innerHTML = node.nodeValue?.replace(new RegExp(keyword, \"g\"), `<mark>${keyword}</mark>`) ?? \"\";\n-    node.parentNode?.insertBefore(span, node);\n-    node.parentNode?.removeChild(node);\n-  }\n-  for (const child of Array.from(node.childNodes)) {\n-    walkthroughNodeWithKeyword(<HTMLElement>child, keyword);\n-  }\n-  return node.innerHTML;\n-};\n-\n-export const highlightWithWord = (html: string, keyword?: string): string => {\n-  if (!keyword) {\n-    return html;\n-  }\n-  keyword = escape(keyword);\n-  const wrap = document.createElement(\"div\");\n-  wrap.innerHTML = escape(html);\n-  return walkthroughNodeWithKeyword(wrap, keyword);\n-};"
        },
        {
          "filename": "web/src/labs/marked/index.tsx",
          "status": "renamed",
          "additions": 33,
          "deletions": 11,
          "patch": "@@ -1,21 +1,36 @@\n+import { matcher } from \"./matcher\";\n import { blockElementParserList, inlineElementParserList } from \"./parser\";\n \n-export const marked = (markdownStr: string, blockParsers = blockElementParserList, inlineParsers = inlineElementParserList): string => {\n+export const marked = (\n+  markdownStr: string,\n+  blockParsers = blockElementParserList,\n+  inlineParsers = inlineElementParserList\n+): string | JSX.Element => {\n   for (const parser of blockParsers) {\n-    const matchResult = parser.matcher(markdownStr);\n+    const matchResult = matcher(markdownStr, parser.regexp);\n     if (!matchResult) {\n       continue;\n     }\n     const matchedStr = matchResult[0];\n     const retainContent = markdownStr.slice(matchedStr.length);\n \n     if (parser.name === \"br\") {\n-      return parser.renderer(matchedStr) + marked(retainContent, blockParsers, inlineParsers);\n+      return (\n+        <>\n+          {parser.renderer(matchedStr)}\n+          {marked(retainContent, blockParsers, inlineParsers)}\n+        </>\n+      );\n     } else {\n       if (retainContent === \"\") {\n         return parser.renderer(matchedStr);\n       } else if (retainContent.startsWith(\"\\n\")) {\n-        return parser.renderer(matchedStr) + marked(retainContent.slice(1), blockParsers, inlineParsers);\n+        return (\n+          <>\n+            {parser.renderer(matchedStr)}\n+            {marked(retainContent.slice(1), blockParsers, inlineParsers)}\n+          </>\n+        );\n       }\n     }\n   }\n@@ -24,7 +39,7 @@ export const marked = (markdownStr: string, blockParsers = blockElementParserLis\n   let matchedIndex = -1;\n \n   for (const parser of inlineParsers) {\n-    const matchResult = parser.matcher(markdownStr);\n+    const matchResult = matcher(markdownStr, parser.regexp);\n     if (!matchResult) {\n       continue;\n     }\n@@ -41,17 +56,23 @@ export const marked = (markdownStr: string, blockParsers = blockElementParserLis\n   }\n \n   if (matchedInlineParser) {\n-    const matchResult = matchedInlineParser.matcher(markdownStr);\n+    const matchResult = matcher(markdownStr, matchedInlineParser.regexp);\n     if (matchResult) {\n       const matchedStr = matchResult[0];\n       const matchedLength = matchedStr.length;\n       const prefixStr = markdownStr.slice(0, matchedIndex);\n       const suffixStr = markdownStr.slice(matchedIndex + matchedLength);\n-      return marked(prefixStr, [], inlineParsers) + matchedInlineParser.renderer(matchedStr) + marked(suffixStr, [], inlineParsers);\n+      return (\n+        <>\n+          {marked(prefixStr, [], inlineParsers)}\n+          {matchedInlineParser.renderer(matchedStr)}\n+          {marked(suffixStr, [], inlineParsers)}\n+        </>\n+      );\n     }\n   }\n \n-  return markdownStr;\n+  return <>{markdownStr}</>;\n };\n \n interface MatchedNode {\n@@ -64,7 +85,7 @@ export const getMatchedNodes = (markdownStr: string): MatchedNode[] => {\n \n   const walkthough = (markdownStr: string, blockParsers = blockElementParserList, inlineParsers = inlineElementParserList): string => {\n     for (const parser of blockParsers) {\n-      const matchResult = parser.matcher(markdownStr);\n+      const matchResult = matcher(markdownStr, parser.regexp);\n       if (!matchResult) {\n         continue;\n       }\n@@ -79,6 +100,7 @@ export const getMatchedNodes = (markdownStr: string): MatchedNode[] => {\n         return walkthough(retainContent, blockParsers, inlineParsers);\n       } else {\n         if (retainContent.startsWith(\"\\n\")) {\n+          walkthough(matchedStr, [], inlineParsers);\n           return walkthough(retainContent.slice(1), blockParsers, inlineParsers);\n         }\n       }\n@@ -88,7 +110,7 @@ export const getMatchedNodes = (markdownStr: string): MatchedNode[] => {\n     let matchedIndex = -1;\n \n     for (const parser of inlineParsers) {\n-      const matchResult = parser.matcher(markdownStr);\n+      const matchResult = matcher(markdownStr, parser.regexp);\n       if (!matchResult) {\n         continue;\n       }\n@@ -105,7 +127,7 @@ export const getMatchedNodes = (markdownStr: string): MatchedNode[] => {\n     }\n \n     if (matchedInlineParser) {\n-      const matchResult = matchedInlineParser.matcher(markdownStr);\n+      const matchResult = matcher(markdownStr, matchedInlineParser.regexp);\n       if (matchResult) {\n         const matchedStr = matchResult[0];\n         const matchedLength = matchedStr.length;"
        },
        {
          "filename": "web/src/labs/marked/marked.test.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 174,
          "patch": "@@ -1,174 +0,0 @@\n-/* eslint-disable no-irregular-whitespace */\n-import { describe, expect, test } from \"@jest/globals\";\n-import { unescape } from \"lodash-es\";\n-import { marked } from \".\";\n-\n-describe(\"test marked parser\", () => {\n-  test(\"horizontal rule\", () => {\n-    const tests = [\n-      {\n-        markdown: `---\n-This is some text after the horizontal rule.\n-___\n-This is some text after the horizontal rule.\n-***\n-This is some text after the horizontal rule.`,\n-        want: `<hr><p>This is some text after the horizontal rule.</p><hr><p>This is some text after the horizontal rule.</p><hr><p>This is some text after the horizontal rule.</p>`,\n-      },\n-    ];\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse code block\", () => {\n-    const tests = [\n-      {\n-        markdown: `\\`\\`\\`\n-hello world!\n-\\`\\`\\``,\n-        want: `<pre><button class=\"codeblock-copy-btn\">copy</button><code class=\"language-plaintext\">hello world!\n-</code></pre>`,\n-      },\n-      {\n-        markdown: `test code block\n-\n-\\`\\`\\`js\n-console.log(\"hello world!\")\n-\\`\\`\\``,\n-        want: `<p>test code block</p><br><pre><button class=\"codeblock-copy-btn\">copy</button><code class=\"language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"hello world!\"</span>)\n-</code></pre>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse todo list block\", () => {\n-    const tests = [\n-      {\n-        markdown: `My task:\n-- [ ] finish my homework\n-- [x] yahaha`,\n-        want: `<p>My task:</p><p class='li-container'><span class='todo-block todo' data-value='TODO'></span><span>finish my homework</span></p><p class='li-container'><span class='todo-block done' data-value='DONE'>\u2713</span><span>yahaha</span></p>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse list block\", () => {\n-    const tests = [\n-      {\n-        markdown: `This is a list\n-* list 123\n-1. 123123`,\n-        want: `<p>This is a list</p><p class='li-container'><span class='ul-block'>\u2022</span><span>list 123</span></p><p class='li-container'><span class='ol-block'>1.</span><span>123123</span></p>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse inline element\", () => {\n-    const tests = [\n-      {\n-        markdown: `Link: [baidu](https://baidu.com#1231)`,\n-        want: `<p>Link: <a class='link' target='_blank' rel='noreferrer' href='https://baidu.com#1231'>baidu</a></p>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse inline code within inline element\", () => {\n-    const tests = [\n-      {\n-        markdown: `Link: [\\`baidu\\`](https://baidu.com)`,\n-        want: `<p>Link: <a class='link' target='_blank' rel='noreferrer' href='https://baidu.com'><code>baidu</code></a></p>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse plain link\", () => {\n-    const tests = [\n-      {\n-        markdown: `Link:https://baidu.com#1231`,\n-        want: `<p>Link:<a class='link' target='_blank' rel='noreferrer' href='https://baidu.com#1231'>https://baidu.com#1231</a></p>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse inline code\", () => {\n-    const tests = [\n-      {\n-        markdown: `Code: \\`console.log(\"Hello world!\")\\``,\n-        want: `<p>Code: <code>console.log(\"Hello world!\")</code></p>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse bold and em text\", () => {\n-    const tests = [\n-      {\n-        markdown: `Important: **Minecraft**`,\n-        want: `<p>Important: <strong>Minecraft</strong></p>`,\n-      },\n-      {\n-        markdown: `Em: *Minecraft*`,\n-        want: `<p>Em: <em>Minecraft</em></p>`,\n-      },\n-      {\n-        markdown: `Important: ***Minecraft/123***`,\n-        want: `<p>Important: <strong><em>Minecraft/123</em></strong></p>`,\n-      },\n-      {\n-        markdown: `Important: ***[baidu](https://baidu.com)***`,\n-        want: `<p>Important: <strong><em><a class='link' target='_blank' rel='noreferrer' href='https://baidu.com'>baidu</a></em></strong></p>`,\n-      },\n-    ];\n-\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse full width space\", () => {\n-    const tests = [\n-      {\n-        markdown: `\u3000\u3000line1\n-\u3000\u3000line2`,\n-        want: `<p>\u3000\u3000line1</p><p>\u3000\u3000line2</p>`,\n-      },\n-    ];\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-  test(\"parse heading\", () => {\n-    const tests = [\n-      {\n-        markdown: `# 123 `,\n-        want: `<h1>123 </h1>`,\n-      },\n-      {\n-        markdown: `## 123 `,\n-        want: `<h2>123 </h2>`,\n-      },\n-    ];\n-    for (const t of tests) {\n-      expect(unescape(marked(t.markdown))).toBe(t.want);\n-    }\n-  });\n-});"
        },
        {
          "filename": "web/src/labs/marked/matcher.ts",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+export const matcher = (rawStr: string, regexp: RegExp) => {\n+  const matchResult = rawStr.match(regexp);\n+  return matchResult;\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/Blockquote.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-import { escape } from \"lodash\";\n-\n-export const BLOCKQUOTE_REG = /^> ([^\\n]+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(BLOCKQUOTE_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  return `<blockquote>${escape(matchResult[1])}</blockquote>`;\n-};\n-\n-export default {\n-  name: \"blockquote\",\n-  regex: BLOCKQUOTE_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/Blockquote.tsx",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+import { escape } from \"lodash\";\n+import { matcher } from \"../matcher\";\n+\n+export const BLOCKQUOTE_REG = /^> ([^\\n]+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, BLOCKQUOTE_REG);\n+  if (!matchResult) {\n+    return <>{rawStr}</>;\n+  }\n+\n+  return <blockquote>{escape(matchResult[1])}</blockquote>;\n+};\n+\n+export default {\n+  name: \"blockquote\",\n+  regexp: BLOCKQUOTE_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/Bold.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 27,
          "patch": "@@ -1,27 +0,0 @@\n-import { marked } from \"..\";\n-import Link from \"./Link\";\n-import PlainText from \"./PlainText\";\n-\n-export const BOLD_REG = /\\*\\*(.+?)\\*\\*/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(BOLD_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  const parsedContent = marked(matchResult[1], [], [Link, PlainText]);\n-  return `<strong>${parsedContent}</strong>`;\n-};\n-\n-export default {\n-  name: \"bold\",\n-  regex: BOLD_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/Bold.tsx",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+import { marked } from \"..\";\n+import { matcher } from \"../matcher\";\n+import Link from \"./Link\";\n+import PlainText from \"./PlainText\";\n+\n+export const BOLD_REG = /\\*\\*(.+?)\\*\\*/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, BOLD_REG);\n+  if (!matchResult) {\n+    return <>{rawStr}</>;\n+  }\n+\n+  const parsedContent = marked(matchResult[1], [], [Link, PlainText]);\n+  return <strong>{parsedContent}</strong>;\n+};\n+\n+export default {\n+  name: \"bold\",\n+  regexp: BOLD_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/BoldEmphasis.tsx",
          "status": "renamed",
          "additions": 9,
          "deletions": 10,
          "patch": "@@ -1,27 +1,26 @@\n import { marked } from \"..\";\n+import { matcher } from \"../matcher\";\n import Link from \"./Link\";\n import PlainText from \"./PlainText\";\n \n export const BOLD_EMPHASIS_REG = /\\*\\*\\*(.+?)\\*\\*\\*/;\n \n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(BOLD_EMPHASIS_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, BOLD_EMPHASIS_REG);\n   if (!matchResult) {\n     return rawStr;\n   }\n \n   const parsedContent = marked(matchResult[1], [], [Link, PlainText]);\n-  return `<strong><em>${parsedContent}</em></strong>`;\n+  return (\n+    <strong>\n+      <em>${parsedContent}</em>\n+    </strong>\n+  );\n };\n \n export default {\n   name: \"bold emphasis\",\n-  regex: BOLD_EMPHASIS_REG,\n-  matcher,\n+  regexp: BOLD_EMPHASIS_REG,\n   renderer,\n };"
        },
        {
          "filename": "web/src/labs/marked/parser/Br.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 17,
          "patch": "@@ -1,17 +0,0 @@\n-export const BR_REG = /^(\\n+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(BR_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  return rawStr.replaceAll(\"\\n\", \"<br>\");\n-};\n-\n-export default {\n-  name: \"br\",\n-  regex: BR_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/Br.tsx",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+export const BR_REG = /^(\\n+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const length = rawStr.split(\"\\n\").length - 1;\n+  const brList = [];\n+  for (let i = 0; i < length; i++) {\n+    brList.push(<br />);\n+  }\n+  return <>{...brList}</>;\n+};\n+\n+export default {\n+  name: \"br\",\n+  regexp: BR_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/CodeBlock.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 37,
          "patch": "@@ -1,37 +0,0 @@\n-import { escape } from \"lodash-es\";\n-import hljs from \"highlight.js\";\n-\n-export const CODE_BLOCK_REG = /^```(\\S*?)\\s([\\s\\S]*?)```/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(CODE_BLOCK_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  const language = escape(matchResult[1]) || \"plaintext\";\n-  let highlightedCode = hljs.highlightAuto(matchResult[2]).value;\n-\n-  try {\n-    const temp = hljs.highlight(matchResult[2], {\n-      language,\n-    }).value;\n-    highlightedCode = temp;\n-  } catch (error) {\n-    // do nth\n-  }\n-\n-  return `<pre><button class=\"codeblock-copy-btn\">copy</button><code class=\"language-${language}\">${highlightedCode}</code></pre>`;\n-};\n-\n-export default {\n-  name: \"code block\",\n-  regex: CODE_BLOCK_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/CodeBlock.tsx",
          "status": "added",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -0,0 +1,51 @@\n+import copy from \"copy-to-clipboard\";\n+import { escape } from \"lodash-es\";\n+import hljs from \"highlight.js\";\n+import { useTranslation } from \"react-i18next\";\n+import { matcher } from \"../matcher\";\n+import toastHelper from \"../../../components/Toast\";\n+\n+export const CODE_BLOCK_REG = /^```(\\S*?)\\s([\\s\\S]*?)```/;\n+\n+const renderer = (rawStr: string) => {\n+  const { t } = useTranslation();\n+  const matchResult = matcher(rawStr, CODE_BLOCK_REG);\n+  if (!matchResult) {\n+    return <>{rawStr}</>;\n+  }\n+\n+  const language = escape(matchResult[1]) || \"plaintext\";\n+  let highlightedCode = hljs.highlightAuto(matchResult[2]).value;\n+\n+  try {\n+    const temp = hljs.highlight(matchResult[2], {\n+      language,\n+    }).value;\n+    highlightedCode = temp;\n+  } catch (error) {\n+    // do nth\n+  }\n+\n+  const handleCopyButtonClick = () => {\n+    copy(matchResult[2]);\n+    toastHelper.success(t(\"message.succeed-copy-code\"));\n+  };\n+\n+  return (\n+    <pre>\n+      <button\n+        className=\"text-xs font-mono italic absolute top-0 right-0 px-2 leading-6 border btn-text rounded opacity-60\"\n+        onClick={handleCopyButtonClick}\n+      >\n+        copy\n+      </button>\n+      <code className={`language-${language}`}>{highlightedCode}</code>\n+    </pre>\n+  );\n+};\n+\n+export default {\n+  name: \"code block\",\n+  regexp: CODE_BLOCK_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/DoneList.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -1,26 +0,0 @@\n-import { inlineElementParserList } from \".\";\n-import { marked } from \"..\";\n-\n-export const DONE_LIST_REG = /^- \\[[xX]\\] ([^\\n]+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(DONE_LIST_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  const parsedContent = marked(matchResult[1], [], inlineElementParserList);\n-  return `<p class='li-container'><span class='todo-block done' data-value='DONE'>\u2713</span><span>${parsedContent}</span></p>`;\n-};\n-\n-export default {\n-  name: \"done list\",\n-  regex: DONE_LIST_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/DoneList.tsx",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+import { inlineElementParserList } from \".\";\n+import { marked } from \"..\";\n+import { matcher } from \"../matcher\";\n+\n+export const DONE_LIST_REG = /^- \\[[xX]\\] ([^\\n]+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, DONE_LIST_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  const parsedContent = marked(matchResult[1], [], inlineElementParserList);\n+  return (\n+    <p className=\"li-container\">\n+      <span className=\"todo-block done\" data-value=\"DONE\">\n+        \u2713\n+      </span>\n+      <span>{parsedContent}</span>\n+    </p>\n+  );\n+};\n+\n+export default {\n+  name: \"done list\",\n+  regexp: DONE_LIST_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/Emphasis.tsx",
          "status": "renamed",
          "additions": 5,
          "deletions": 10,
          "patch": "@@ -1,27 +1,22 @@\n import { marked } from \"..\";\n+import { matcher } from \"../matcher\";\n import Link from \"./Link\";\n import PlainText from \"./PlainText\";\n \n export const EMPHASIS_REG = /\\*(.+?)\\*/;\n \n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(EMPHASIS_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, EMPHASIS_REG);\n   if (!matchResult) {\n     return rawStr;\n   }\n \n   const parsedContent = marked(matchResult[1], [], [Link, PlainText]);\n-  return `<em>${parsedContent}</em>`;\n+  return <em>{parsedContent}</em>;\n };\n \n export default {\n   name: \"emphasis\",\n-  regex: EMPHASIS_REG,\n-  matcher,\n+  regexp: EMPHASIS_REG,\n   renderer,\n };"
        },
        {
          "filename": "web/src/labs/marked/parser/Heading.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 25,
          "patch": "@@ -1,25 +0,0 @@\n-import { escape } from \"lodash\";\n-\n-export const HEADING_REG = /^(#+) ([^\\n]+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(HEADING_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  const level = matchResult[1].length;\n-  return `<h${level}>${escape(matchResult[2])}</h${level}>`;\n-};\n-\n-export default {\n-  name: \"heading\",\n-  regex: HEADING_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/Heading.tsx",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+import { escape } from \"lodash\";\n+import { matcher } from \"../matcher\";\n+\n+export const HEADING_REG = /^(#+) ([^\\n]+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, HEADING_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  const level = matchResult[1].length;\n+  if (level === 1) {\n+    return <h1>{escape(matchResult[2])}</h1>;\n+  } else if (level === 2) {\n+    return <h2>{escape(matchResult[2])}</h2>;\n+  } else if (level === 3) {\n+    return <h3>{escape(matchResult[2])}</h3>;\n+  } else if (level === 4) {\n+    return <h4>{escape(matchResult[2])}</h4>;\n+  }\n+  return <h5>{escape(matchResult[2])}</h5>;\n+};\n+\n+export default {\n+  name: \"heading\",\n+  regexp: HEADING_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/HorizontalRules.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 18,
          "patch": "@@ -1,18 +0,0 @@\n-export const HORIZONTAL_RULES_REG = /^_{3}|^-{3}|^\\*{3}/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(HORIZONTAL_RULES_REG);\n-  return matchResult;\n-};\n-\n-// eslint-disable-next-line @typescript-eslint/no-unused-vars\n-export const renderer = (rawStr: string): string => {\n-  return `<hr>`;\n-};\n-\n-export default {\n-  name: \"horizontal rules\",\n-  regex: HORIZONTAL_RULES_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/HorizontalRules.tsx",
          "status": "added",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -0,0 +1,12 @@\n+export const HORIZONTAL_RULES_REG = /^_{3}|^-{3}|^\\*{3}/;\n+\n+// eslint-disable-next-line @typescript-eslint/no-unused-vars\n+export const renderer = (rawStr: string) => {\n+  return <hr />;\n+};\n+\n+export default {\n+  name: \"horizontal rules\",\n+  regexp: HORIZONTAL_RULES_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/Image.tsx",
          "status": "renamed",
          "additions": 5,
          "deletions": 10,
          "patch": "@@ -1,26 +1,21 @@\n import { escape } from \"lodash-es\";\n import { absolutifyLink } from \"../../../helpers/utils\";\n+import { matcher } from \"../matcher\";\n \n export const IMAGE_REG = /!\\[.*?\\]\\((.+?)\\)/;\n \n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(IMAGE_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, IMAGE_REG);\n   if (!matchResult) {\n     return rawStr;\n   }\n \n   const imageUrl = absolutifyLink(escape(matchResult[1]));\n-  return `<img class='img' src='${imageUrl}' />`;\n+  return <img className=\"img\" src={imageUrl} />;\n };\n \n export default {\n   name: \"image\",\n-  regex: IMAGE_REG,\n-  matcher,\n+  regexp: IMAGE_REG,\n   renderer,\n };"
        },
        {
          "filename": "web/src/labs/marked/parser/InlineCode.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-import { escape } from \"lodash-es\";\n-\n-export const INLINE_CODE_REG = /`(.+?)`/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(INLINE_CODE_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  return `<code>${escape(matchResult[1])}</code>`;\n-};\n-\n-export default {\n-  name: \"inline code\",\n-  regex: INLINE_CODE_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/InlineCode.tsx",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+import { escape } from \"lodash-es\";\n+import { matcher } from \"../matcher\";\n+\n+export const INLINE_CODE_REG = /`(.+?)`/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, INLINE_CODE_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  return <code>{escape(matchResult[1])}</code>;\n+};\n+\n+export default {\n+  name: \"inline code\",\n+  regexp: INLINE_CODE_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/Link.tsx",
          "status": "renamed",
          "additions": 9,
          "deletions": 10,
          "patch": "@@ -5,26 +5,25 @@ import { marked } from \"..\";\n import InlineCode from \"./InlineCode\";\n import BoldEmphasis from \"./BoldEmphasis\";\n import PlainText from \"./PlainText\";\n+import { matcher } from \"../matcher\";\n \n export const LINK_REG = /\\[(.*?)\\]\\((.+?)\\)+/;\n \n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(LINK_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, LINK_REG);\n   if (!matchResult) {\n     return rawStr;\n   }\n   const parsedContent = marked(matchResult[1], [], [InlineCode, BoldEmphasis, Emphasis, Bold, PlainText]);\n-  return `<a class='link' target='_blank' rel='noreferrer' href='${escape(matchResult[2])}'>${parsedContent}</a>`;\n+  return (\n+    <a className=\"link\" target=\"_blank\" rel=\"noreferrer\" href={escape(matchResult[2])}>\n+      {parsedContent}\n+    </a>\n+  );\n };\n \n export default {\n   name: \"link\",\n-  regex: LINK_REG,\n-  matcher,\n+  regexp: LINK_REG,\n   renderer,\n };"
        },
        {
          "filename": "web/src/labs/marked/parser/OrderedList.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -1,26 +0,0 @@\n-import { inlineElementParserList } from \".\";\n-import { marked } from \"..\";\n-\n-export const ORDERED_LIST_REG = /^(\\d+)\\. (.+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(ORDERED_LIST_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  const parsedContent = marked(matchResult[2], [], inlineElementParserList);\n-  return `<p class='li-container'><span class='ol-block'>${matchResult[1]}.</span><span>${parsedContent}</span></p>`;\n-};\n-\n-export default {\n-  name: \"ordered list\",\n-  regex: ORDERED_LIST_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/OrderedList.tsx",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+import { inlineElementParserList } from \".\";\n+import { marked } from \"..\";\n+import { matcher } from \"../matcher\";\n+\n+export const ORDERED_LIST_REG = /^(\\d+)\\. (.+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, ORDERED_LIST_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  const parsedContent = marked(matchResult[2], [], inlineElementParserList);\n+  return (\n+    <p className=\"li-container\">\n+      <span className=\"ol-block\">{matchResult[1]}.</span>\n+      <span>{parsedContent}</span>\n+    </p>\n+  );\n+};\n+\n+export default {\n+  name: \"ordered list\",\n+  regexp: ORDERED_LIST_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/Paragraph.tsx",
          "status": "renamed",
          "additions": 3,
          "deletions": 9,
          "patch": "@@ -3,19 +3,13 @@ import { marked } from \"..\";\n \n export const PARAGRAPH_REG = /^([^\\n]+)/;\n \n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(PARAGRAPH_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n+const renderer = (rawStr: string) => {\n   const parsedContent = marked(rawStr, [], inlineElementParserList);\n-  return `<p>${parsedContent}</p>`;\n+  return <p>{parsedContent}</p>;\n };\n \n export default {\n   name: \"paragraph\",\n-  regex: PARAGRAPH_REG,\n-  matcher,\n+  regexp: PARAGRAPH_REG,\n   renderer,\n };"
        },
        {
          "filename": "web/src/labs/marked/parser/PlainLink.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-import { escape } from \"lodash-es\";\n-\n-export const PLAIN_LINK_REG = /(https?:\\/\\/[^ ]+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(PLAIN_LINK_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  return `<a class='link' target='_blank' rel='noreferrer' href='${escape(matchResult[1])}'>${escape(matchResult[1])}</a>`;\n-};\n-\n-export default {\n-  name: \"plain link\",\n-  regex: PLAIN_LINK_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/PlainLink.tsx",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+import { escape } from \"lodash-es\";\n+import { matcher } from \"../matcher\";\n+\n+export const PLAIN_LINK_REG = /(https?:\\/\\/[^ ]+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, PLAIN_LINK_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  return (\n+    <a className=\"link\" target=\"_blank\" rel=\"noreferrer\" href={escape(matchResult[1])}>\n+      {escape(matchResult[1])}\n+    </a>\n+  );\n+};\n+\n+export default {\n+  name: \"plain link\",\n+  regexp: PLAIN_LINK_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/PlainText.tsx",
          "status": "renamed",
          "additions": 3,
          "deletions": 8,
          "patch": "@@ -1,14 +1,10 @@\n import { escape } from \"lodash-es\";\n+import { matcher } from \"../matcher\";\n \n export const PLAIN_TEXT_REG = /(.+)/;\n \n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(PLAIN_TEXT_REG);\n-  return matchResult;\n-};\n-\n const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n+  const matchResult = matcher(rawStr, PLAIN_TEXT_REG);\n   if (!matchResult) {\n     return rawStr;\n   }\n@@ -18,7 +14,6 @@ const renderer = (rawStr: string): string => {\n \n export default {\n   name: \"plain text\",\n-  regex: PLAIN_TEXT_REG,\n-  matcher,\n+  regexp: PLAIN_TEXT_REG,\n   renderer,\n };"
        },
        {
          "filename": "web/src/labs/marked/parser/Strikethrough.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-import { escape } from \"lodash\";\n-\n-export const STRIKETHROUGH_REG = /~~(.+?)~~/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(STRIKETHROUGH_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  return `<del>${escape(matchResult[1])}</del>`;\n-};\n-\n-export default {\n-  name: \"Strikethrough\",\n-  regex: STRIKETHROUGH_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/Strikethrough.tsx",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+import { escape } from \"lodash\";\n+import { matcher } from \"../matcher\";\n+\n+export const STRIKETHROUGH_REG = /~~(.+?)~~/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, STRIKETHROUGH_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  return <del>{escape(matchResult[1])}</del>;\n+};\n+\n+export default {\n+  name: \"Strikethrough\",\n+  regexp: STRIKETHROUGH_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/Tag.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 27,
          "patch": "@@ -1,27 +0,0 @@\n-import { escape } from \"lodash-es\";\n-\n-export const TAG_REG = /#([^\\s#]+)/;\n-\n-export const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(TAG_REG);\n-  if (matchResult) {\n-    return matchResult;\n-  }\n-  return null;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  return `<span class='tag-span'>#${escape(matchResult[1])}</span>`;\n-};\n-\n-export default {\n-  name: \"tag\",\n-  regex: TAG_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/Tag.tsx",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+import { escape } from \"lodash-es\";\n+import { matcher } from \"../matcher\";\n+\n+export const TAG_REG = /#([^\\s#]+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, TAG_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  return <span className=\"tag-span\">#{escape(matchResult[1])}</span>;\n+};\n+\n+export default {\n+  name: \"tag\",\n+  regexp: TAG_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/TodoList.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -1,26 +0,0 @@\n-import { inlineElementParserList } from \".\";\n-import { marked } from \"..\";\n-\n-export const TODO_LIST_REG = /^- \\[ \\] ([^\\n]+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(TODO_LIST_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  const parsedContent = marked(matchResult[1], [], inlineElementParserList);\n-  return `<p class='li-container'><span class='todo-block todo' data-value='TODO'></span><span>${parsedContent}</span></p>`;\n-};\n-\n-export default {\n-  name: \"todo list\",\n-  regex: TODO_LIST_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/TodoList.tsx",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+import { inlineElementParserList } from \".\";\n+import { marked } from \"..\";\n+import { matcher } from \"../matcher\";\n+\n+export const TODO_LIST_REG = /^- \\[ \\] ([^\\n]+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, TODO_LIST_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  const parsedContent = marked(matchResult[1], [], inlineElementParserList);\n+  return (\n+    <p className=\"li-container\">\n+      <span className=\"todo-block todo\" data-value=\"TODO\"></span>\n+      <span>{parsedContent}</span>\n+    </p>\n+  );\n+};\n+\n+export default {\n+  name: \"todo list\",\n+  regexp: TODO_LIST_REG,\n+  renderer,\n+};"
        },
        {
          "filename": "web/src/labs/marked/parser/UnorderedList.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -1,26 +0,0 @@\n-import { inlineElementParserList } from \".\";\n-import { marked } from \"..\";\n-\n-export const UNORDERED_LIST_REG = /^[*-] ([^\\n]+)/;\n-\n-const matcher = (rawStr: string) => {\n-  const matchResult = rawStr.match(UNORDERED_LIST_REG);\n-  return matchResult;\n-};\n-\n-const renderer = (rawStr: string): string => {\n-  const matchResult = matcher(rawStr);\n-  if (!matchResult) {\n-    return rawStr;\n-  }\n-\n-  const parsedContent = marked(matchResult[1], [], inlineElementParserList);\n-  return `<p class='li-container'><span class='ul-block'>\u2022</span><span>${parsedContent}</span></p>`;\n-};\n-\n-export default {\n-  name: \"unordered list\",\n-  regex: UNORDERED_LIST_REG,\n-  matcher,\n-  renderer,\n-};"
        },
        {
          "filename": "web/src/labs/marked/parser/UnorderedList.tsx",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+import { inlineElementParserList } from \".\";\n+import { marked } from \"..\";\n+import { matcher } from \"../matcher\";\n+\n+export const UNORDERED_LIST_REG = /^[*-] ([^\\n]+)/;\n+\n+const renderer = (rawStr: string) => {\n+  const matchResult = matcher(rawStr, UNORDERED_LIST_REG);\n+  if (!matchResult) {\n+    return rawStr;\n+  }\n+\n+  const parsedContent = marked(matchResult[1], [], inlineElementParserList);\n+  return (\n+    <p className=\"li-container\">\n+      <span className=\"ul-block\">\u2022</span>\n+      <span>${parsedContent}</span>\n+    </p>\n+  );\n+};\n+\n+export default {\n+  name: \"unordered list\",\n+  regexp: UNORDERED_LIST_REG,\n+  renderer,\n+};"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8b65d248b1e271f74fbd28df041c560cde1c6991",
            "date": "2025-01-13T16:05:33Z",
            "author_login": "boojack"
          },
          {
            "sha": "ee96465be06f0e69880ab5443676928cb8cb4bd2",
            "date": "2025-01-13T15:14:44Z",
            "author_login": "johnnyjoygh"
          },
          {
            "sha": "cde058c72ac5944a3d6909cf82f10942d0627ee3",
            "date": "2025-01-13T11:46:06Z",
            "author_login": "johnnyjoygh"
          },
          {
            "sha": "94517490f5bf65010a56a19889b2453e6952d622",
            "date": "2025-01-13T11:44:53Z",
            "author_login": "X1Vi"
          },
          {
            "sha": "d050a6fd4602d08573288cbb45b0856fe692b302",
            "date": "2025-01-11T12:12:02Z",
            "author_login": "johnnyjoygh"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.10.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-07T04:15:08.167",
    "last_modified": "2024-11-21T07:36:33.983",
    "fix_date": "2023-01-06T16:13:49Z"
  },
  "references": [
    {
      "url": "https://github.com/usememos/memos/commit/0f8ce3dd1696722f951d7195ad1f88b39a5d15d7",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0b28fa57-acb0-47c8-ac48-962ff3898156",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/usememos/memos/commit/0f8ce3dd1696722f951d7195ad1f88b39a5d15d7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0b28fa57-acb0-47c8-ac48-962ff3898156",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.522726",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "memos",
    "owner": "usememos",
    "created_at": "2021-12-08T15:30:18Z",
    "updated_at": "2025-01-14T12:48:48Z",
    "pushed_at": "2025-01-13T16:05:42Z",
    "size": 32666,
    "stars": 35917,
    "forks": 2577,
    "open_issues": 27,
    "watchers": 35917,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 491864,
      "TypeScript": 430326,
      "Less": 2572,
      "JavaScript": 1558,
      "HTML": 1074,
      "Dockerfile": 900,
      "Shell": 500,
      "CSS": 439
    },
    "commit_activity": {
      "total_commits_last_year": 1082,
      "avg_commits_per_week": 20.807692307692307,
      "days_active_last_year": 257
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:15:47.491461"
  }
}