{
  "cve_id": "CVE-2023-0108",
  "github_data": {
    "repository": "usememos/memos",
    "fix_commit": "46c13a4b7f675b92d297df6dabb4441f13c7cd9c",
    "related_commits": [
      "46c13a4b7f675b92d297df6dabb4441f13c7cd9c",
      "46c13a4b7f675b92d297df6dabb4441f13c7cd9c"
    ],
    "patch_url": "https://github.com/usememos/memos/commit/46c13a4b7f675b92d297df6dabb4441f13c7cd9c.patch",
    "fix_commit_details": {
      "sha": "46c13a4b7f675b92d297df6dabb4441f13c7cd9c",
      "commit_date": "2023-01-07T02:51:34Z",
      "author": {
        "login": "boojack",
        "type": "User",
        "stats": {
          "total_commits": 2202,
          "average_weekly_commits": 13.50920245398773,
          "total_additions": 418328,
          "total_deletions": 387434,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "chore: add skipper for secure (#913)",
        "length": 36,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 80,
        "additions": 74,
        "deletions": 6
      },
      "files": [
        {
          "filename": "server/common.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1,6 +1,8 @@\n package server\n \n import (\n+\t\"net/http\"\n+\n \t\"github.com/labstack/echo/v4\"\n \t\"github.com/usememos/memos/api\"\n \t\"github.com/usememos/memos/common\"\n@@ -16,6 +18,10 @@ func composeResponse(data interface{}) response {\n \t}\n }\n \n+func DefaultGetRequestSkipper(c echo.Context) bool {\n+\treturn c.Request().Method == http.MethodGet\n+}\n+\n func (server *Server) DefaultAuthSkipper(c echo.Context) bool {\n \tctx := c.Request().Context()\n \tpath := c.Path()"
        },
        {
          "filename": "server/resource.go",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -7,6 +7,7 @@ import (\n \t\"net/http\"\n \t\"net/url\"\n \t\"strconv\"\n+\t\"strings\"\n \t\"time\"\n \n \t\"github.com/pkg/errors\"\n@@ -266,7 +267,11 @@ func (s *Server) registerResourcePublicRoutes(g *echo.Group) {\n \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, fmt.Sprintf(\"Failed to fetch resource ID: %v\", resourceID)).SetInternal(err)\n \t\t}\n \n-\t\tc.Response().Writer.Header().Set(\"Content-Type\", resource.Type)\n+\t\tif strings.HasPrefix(resource.Type, \"text\") || strings.HasPrefix(resource.Type, \"application\") {\n+\t\t\tc.Response().Writer.Header().Set(\"Content-Type\", echo.MIMETextPlain)\n+\t\t} else {\n+\t\t\tc.Response().Writer.Header().Set(\"Content-Type\", resource.Type)\n+\t\t}\n \t\tc.Response().Writer.WriteHeader(http.StatusOK)\n \t\tc.Response().Writer.Header().Set(echo.HeaderCacheControl, \"max-age=31536000, immutable\")\n \t\tc.Response().Writer.Header().Set(echo.HeaderContentSecurityPolicy, \"default-src 'self'\")"
        },
        {
          "filename": "server/server.go",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -64,7 +64,13 @@ func NewServer(ctx context.Context, profile *profile.Profile) (*Server, error) {\n \n \te.Use(middleware.CORS())\n \n-\te.Use(middleware.Secure())\n+\te.Use(middleware.SecureWithConfig(middleware.SecureConfig{\n+\t\tSkipper:            DefaultGetRequestSkipper,\n+\t\tXSSProtection:      \"1; mode=block\",\n+\t\tContentTypeNosniff: \"nosniff\",\n+\t\tXFrameOptions:      \"SAMEORIGIN\",\n+\t\tHSTSPreloadEnabled: false,\n+\t}))\n \n \te.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{\n \t\tSkipper:      middleware.DefaultSkipper,"
        },
        {
          "filename": "server/version/version.go",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -7,10 +7,10 @@ import (\n \n // Version is the service current released version.\n // Semantic versioning: https://semver.org/\n-var Version = \"0.9.1\"\n+var Version = \"0.10.0\"\n \n // DevVersion is the service current development version.\n-var DevVersion = \"0.9.1\"\n+var DevVersion = \"0.10.0\"\n \n func GetCurrentVersion(mode string) string {\n \tif mode == \"dev\" {\n@@ -29,7 +29,6 @@ func GetMinorVersion(version string) string {\n \n func GetSchemaVersion(version string) string {\n \tminorVersion := GetMinorVersion(version)\n-\n \treturn minorVersion + \".0\"\n }\n "
        },
        {
          "filename": "server/version/version_test.go",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+package version\n+\n+import \"testing\"\n+\n+func TestIsVersionGreaterOrEqualThan(t *testing.T) {\n+\ttests := []struct {\n+\t\tversion string\n+\t\ttarget  string\n+\t\twant    bool\n+\t}{\n+\t\t{\n+\t\t\tversion: \"0.9.1\",\n+\t\t\ttarget:  \"0.9.1\",\n+\t\t\twant:    true,\n+\t\t},\n+\t\t{\n+\t\t\tversion: \"0.10.0\",\n+\t\t\ttarget:  \"0.9.1\",\n+\t\t\twant:    true,\n+\t\t},\n+\t\t{\n+\t\t\tversion: \"0.9.0\",\n+\t\t\ttarget:  \"0.9.1\",\n+\t\t\twant:    false,\n+\t\t},\n+\t}\n+\tfor _, test := range tests {\n+\t\tresult := IsVersionGreaterOrEqualThan(test.version, test.target)\n+\t\tif result != test.want {\n+\t\t\tt.Errorf(\"got result %v, want %v.\", result, test.want)\n+\t\t}\n+\t}\n+}"
        },
        {
          "filename": "store/db/migration/prod/0.10/00__activity.sql",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+-- activity\n+CREATE TABLE activity (\n+  id INTEGER PRIMARY KEY AUTOINCREMENT,\n+  creator_id INTEGER NOT NULL,\n+  created_ts BIGINT NOT NULL DEFAULT (strftime('%s', 'now')),\n+  type TEXT NOT NULL DEFAULT '',\n+  level TEXT NOT NULL CHECK (level IN ('INFO', 'WARN', 'ERROR')) DEFAULT 'INFO',\n+  payload TEXT NOT NULL DEFAULT '{}'\n+);"
        },
        {
          "filename": "store/db/migration/prod/LATEST__SCHEMA.sql",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -93,3 +93,13 @@ CREATE TABLE tag (\n   creator_id INTEGER NOT NULL,\n   UNIQUE(name, creator_id)\n );\n+\n+-- activity\n+CREATE TABLE activity (\n+  id INTEGER PRIMARY KEY AUTOINCREMENT,\n+  creator_id INTEGER NOT NULL,\n+  created_ts BIGINT NOT NULL DEFAULT (strftime('%s', 'now')),\n+  type TEXT NOT NULL DEFAULT '',\n+  level TEXT NOT NULL CHECK (level IN ('INFO', 'WARN', 'ERROR')) DEFAULT 'INFO',\n+  payload TEXT NOT NULL DEFAULT '{}'\n+);"
        },
        {
          "filename": "web/src/components/EmbedMemoDialog.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -34,7 +34,7 @@ const EmbedMemoDialog: React.FC<Props> = (props: Props) => {\n           <code className=\"w-full break-all whitespace-pre-wrap\">{memoEmbeddedCode()}</code>\r\n         </pre>\r\n         <p className=\"w-full text-sm leading-6 flex flex-row justify-between items-center mt-2\">\r\n-          * Only the public memo supports.\r\n+          <span className=\"italic opacity-80\">* Only the public memo supports.</span>\r\n           <span className=\"btn-primary\" onClick={handleCopyCode}>\r\n             Copy\r\n           </span>\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8b65d248b1e271f74fbd28df041c560cde1c6991",
            "date": "2025-01-13T16:05:33Z",
            "author_login": "boojack"
          },
          {
            "sha": "ee96465be06f0e69880ab5443676928cb8cb4bd2",
            "date": "2025-01-13T15:14:44Z",
            "author_login": "johnnyjoygh"
          },
          {
            "sha": "cde058c72ac5944a3d6909cf82f10942d0627ee3",
            "date": "2025-01-13T11:46:06Z",
            "author_login": "johnnyjoygh"
          },
          {
            "sha": "94517490f5bf65010a56a19889b2453e6952d622",
            "date": "2025-01-13T11:44:53Z",
            "author_login": "X1Vi"
          },
          {
            "sha": "d050a6fd4602d08573288cbb45b0856fe692b302",
            "date": "2025-01-11T12:12:02Z",
            "author_login": "johnnyjoygh"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.10.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-07T04:15:08.240",
    "last_modified": "2024-11-21T07:36:34.097",
    "fix_date": "2023-01-07T02:51:34Z"
  },
  "references": [
    {
      "url": "https://github.com/usememos/memos/commit/46c13a4b7f675b92d297df6dabb4441f13c7cd9c",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/f66d33df-6588-4ab4-80a0-847451517944",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/usememos/memos/commit/46c13a4b7f675b92d297df6dabb4441f13c7cd9c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/f66d33df-6588-4ab4-80a0-847451517944",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.522863",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "memos",
    "owner": "usememos",
    "created_at": "2021-12-08T15:30:18Z",
    "updated_at": "2025-01-14T12:48:48Z",
    "pushed_at": "2025-01-13T16:05:42Z",
    "size": 32666,
    "stars": 35917,
    "forks": 2577,
    "open_issues": 27,
    "watchers": 35917,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 491864,
      "TypeScript": 430326,
      "Less": 2572,
      "JavaScript": 1558,
      "HTML": 1074,
      "Dockerfile": 900,
      "Shell": 500,
      "CSS": 439
    },
    "commit_activity": {
      "total_commits_last_year": 1082,
      "avg_commits_per_week": 20.807692307692307,
      "days_active_last_year": 257
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:15:47.491461"
  }
}