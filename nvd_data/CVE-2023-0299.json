{
  "cve_id": "CVE-2023-0299",
  "github_data": {
    "repository": "publify/publify",
    "fix_commit": "ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
    "related_commits": [
      "ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
      "ca46da283572b4f8c0b5aa245008756c8a5fd1b1"
    ],
    "patch_url": "https://github.com/publify/publify/commit/ca46da283572b4f8c0b5aa245008756c8a5fd1b1.patch",
    "fix_commit_details": {
      "sha": "ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
      "commit_date": "2022-08-14T11:03:05Z",
      "author": {
        "login": "mvz",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Validate lengths of string attributes",
        "length": 454,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 179,
        "additions": 177,
        "deletions": 2
      },
      "files": [
        {
          "filename": "publify_core/Manifest.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -160,6 +160,7 @@ app/models/article.rb\n app/models/article/factory.rb\n app/models/blog.rb\n app/models/comment.rb\n+app/models/concerns/string_length_limit.rb\n app/models/config_manager.rb\n app/models/content.rb\n app/models/content_base.rb"
        },
        {
          "filename": "publify_core/app/models/blog.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -9,6 +9,8 @@\n #\n class Blog < ApplicationRecord\n   include ConfigManager\n+  include StringLengthLimit\n+\n   include Rails.application.routes.url_helpers\n \n   has_many :contents\n@@ -139,6 +141,7 @@ class Blog < ApplicationRecord\n \n   validate :permalink_has_identifier\n   # validates :base_url, presence: true\n+  validates_default_string_length :base_url\n \n   # Find the Blog that matches a specific base URL. If no Blog object is found\n   # that matches, then grab the first blog. If *that* fails, then create a new"
        },
        {
          "filename": "publify_core/app/models/concerns/string_length_limit.rb",
          "status": "added",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -0,0 +1,17 @@\n+# frozen_string_literal: true\n+\n+module StringLengthLimit\n+  # Default string length limit for model attributes. When running on MySQL,\n+  # this is equal to the default string length in the database as set by Rails.\n+  STRING_LIMIT = 255\n+\n+  extend ActiveSupport::Concern\n+\n+  class_methods do\n+    def validates_default_string_length(*names)\n+      names.each do |name|\n+        validates name, length: { maximum: STRING_LIMIT }\n+      end\n+    end\n+  end\n+end"
        },
        {
          "filename": "publify_core/app/models/content.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -5,6 +5,7 @@\n \n class Content < ApplicationRecord\n   include ContentBase\n+  include StringLengthLimit\n \n   belongs_to :user, optional: true, touch: true\n   belongs_to :blog\n@@ -38,6 +39,9 @@ class Content < ApplicationRecord\n \n   serialize :whiteboard\n \n+  validates_default_string_length :title, :author, :permalink, :name,\n+                                  :post_type, :text_filter_name\n+\n   def author=(user)\n     if user.respond_to?(:login)\n       self[:author] = user.login"
        },
        {
          "filename": "publify_core/app/models/feedback.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -10,10 +10,16 @@ class Feedback < ApplicationRecord\n \n   include PublifyGuid\n   include ContentBase\n+  include StringLengthLimit\n \n   validate :feedback_allowed, on: :create\n   validates :article, presence: true\n \n+  validates_default_string_length :title, :author, :email, :url, :blog_name,\n+                                  :user_agent, :text_filter_name\n+\n+  validates :ip, length: { maximum: 40 }\n+\n   before_save :correct_url, :classify_content\n   before_create :create_guid\n "
        },
        {
          "filename": "publify_core/app/models/ping.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,5 +1,8 @@\n # frozen_string_literal: true\n \n class Ping < ApplicationRecord\n+  include StringLengthLimit\n+\n   belongs_to :article\n+  validates_default_string_length :url\n end"
        },
        {
          "filename": "publify_core/app/models/post_type.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,9 +1,13 @@\n # frozen_string_literal: true\n \n class PostType < ApplicationRecord\n+  include StringLengthLimit\n+\n   validates :name, uniqueness: true\n   validates :name, presence: true\n   validate :name_is_not_read\n+  validates_default_string_length :name, :permalink, :description\n+\n   before_save :sanitize_title\n \n   def name_is_not_read"
        },
        {
          "filename": "publify_core/app/models/redirect.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,13 +1,17 @@\n # frozen_string_literal: true\n \n class Redirect < ApplicationRecord\n+  include StringLengthLimit\n+\n   belongs_to :content, optional: true, touch: true\n   belongs_to :blog\n \n   validates :from_path, uniqueness: true\n   validates :to_path, presence: true\n   validates :blog, presence: true\n \n+  validates_default_string_length :from_path, :to_path\n+\n   def full_to_path\n     path = to_path\n     # FIXME: Unify HTTP URI matchers"
        },
        {
          "filename": "publify_core/app/models/resource.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -4,9 +4,12 @@\n require \"carrierwave/orm/activerecord\"\n \n class Resource < ApplicationRecord\n+  include StringLengthLimit\n   belongs_to :blog\n   belongs_to :content, optional: true\n \n   mount_uploader :upload, ResourceUploader\n   validates :upload, presence: true\n+\n+  validates_default_string_length :mime\n end"
        },
        {
          "filename": "publify_core/app/models/tag.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,12 +1,15 @@\n # frozen_string_literal: true\n \n class Tag < ApplicationRecord\n+  include StringLengthLimit\n+\n   belongs_to :blog\n   has_and_belongs_to_many :contents, order: \"created_at DESC\"\n \n   validates :name, uniqueness: { scope: :blog_id }\n   validates :blog, presence: true\n   validates :name, presence: true\n+  validates_default_string_length :display_name\n \n   before_validation :ensure_naming_conventions\n "
        },
        {
          "filename": "publify_core/app/models/user.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -14,12 +14,14 @@ class User < ApplicationRecord\n   devise :database_authenticatable, :registerable,\n          :recoverable, :rememberable, :trackable, :validatable\n   include ConfigManager\n+  include StringLengthLimit\n \n   before_validation :set_default_profile\n \n   validates :login, uniqueness: true\n   validates :email, :login, presence: true\n   validates :login, length: { in: 3..40 }\n+  validates_default_string_length :email, :text_filter_name\n \n   belongs_to :resource, optional: true\n   has_many :notifications, foreign_key: \"notify_user_id\""
        },
        {
          "filename": "publify_core/spec/models/blog_spec.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -113,6 +113,10 @@\n   describe \"validations\" do\n     let(:blog) { described_class.new }\n \n+    it \"requires base url to not be too long\" do\n+      expect(blog).to validate_length_of(:base_url).is_at_most(255)\n+    end\n+\n     it \"requires blog name to not be too long\" do\n       expect(blog).to validate_length_of(:blog_name).is_at_most(256)\n     end"
        },
        {
          "filename": "publify_core/spec/models/content_spec.rb",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -144,4 +144,32 @@\n       it { expect(content.author_name).to eq(author.login) }\n     end\n   end\n+\n+  describe \"validations\" do\n+    let(:content) { described_class.new }\n+\n+    it \"requires title to not be too long\" do\n+      expect(content).to validate_length_of(:title).is_at_most(255)\n+    end\n+\n+    it \"requires author to not be too long\" do\n+      expect(content).to validate_length_of(:author).is_at_most(255)\n+    end\n+\n+    it \"requires permalink to not be too long\" do\n+      expect(content).to validate_length_of(:permalink).is_at_most(255)\n+    end\n+\n+    it \"requires name to not be too long\" do\n+      expect(content).to validate_length_of(:name).is_at_most(255)\n+    end\n+\n+    it \"requires post_type to not be too long\" do\n+      expect(content).to validate_length_of(:post_type).is_at_most(255)\n+    end\n+\n+    it \"requires text_filter_name to not be too long\" do\n+      expect(content).to validate_length_of(:text_filter_name).is_at_most(255)\n+    end\n+  end\n end"
        },
        {
          "filename": "publify_core/spec/models/feedback_spec.rb",
          "status": "modified",
          "additions": 36,
          "deletions": 0,
          "patch": "@@ -178,4 +178,40 @@ def classify\n       assert !@comment.published?\n     end\n   end\n+\n+  describe \"validations\" do\n+    let(:feedback) { described_class.new }\n+\n+    it \"requires title to not be too long\" do\n+      expect(feedback).to validate_length_of(:title).is_at_most(255)\n+    end\n+\n+    it \"requires author to not be too long\" do\n+      expect(feedback).to validate_length_of(:author).is_at_most(255)\n+    end\n+\n+    it \"requires email to not be too long\" do\n+      expect(feedback).to validate_length_of(:email).is_at_most(255)\n+    end\n+\n+    it \"requires url to not be too long\" do\n+      expect(feedback).to validate_length_of(:url).is_at_most(255)\n+    end\n+\n+    it \"requires ip to not be too long\" do\n+      expect(feedback).to validate_length_of(:ip).is_at_most(40)\n+    end\n+\n+    it \"requires blog_name to not be too long\" do\n+      expect(feedback).to validate_length_of(:blog_name).is_at_most(255)\n+    end\n+\n+    it \"requires user_agent to not be too long\" do\n+      expect(feedback).to validate_length_of(:user_agent).is_at_most(255)\n+    end\n+\n+    it \"requires text_filter_name to not be too long\" do\n+      expect(feedback).to validate_length_of(:text_filter_name).is_at_most(255)\n+    end\n+  end\n end"
        },
        {
          "filename": "publify_core/spec/models/ping_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -3,4 +3,11 @@\n require \"rails_helper\"\n \n describe Ping, type: :model do\n+  describe \"validations\" do\n+    let(:ping) { described_class.new }\n+\n+    it \"requires url to not be too long\" do\n+      expect(ping).to validate_length_of(:url).is_at_most(255)\n+    end\n+  end\n end"
        },
        {
          "filename": "publify_core/spec/models/post_type_spec.rb",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -29,4 +29,20 @@\n     expect(test_type).not_to be_valid\n     expect(test_type.errors[:name]).to eq([\"has already been taken\"])\n   end\n+\n+  describe \"validations\" do\n+    let(:post_type) { described_class.new }\n+\n+    it \"requires name to not be too long\" do\n+      expect(post_type).to validate_length_of(:name).is_at_most(255)\n+    end\n+\n+    it \"requires permalink to not be too long\" do\n+      expect(post_type).to validate_length_of(:permalink).is_at_most(255)\n+    end\n+\n+    it \"requires description to not be too long\" do\n+      expect(post_type).to validate_length_of(:description).is_at_most(255)\n+    end\n+  end\n end"
        },
        {
          "filename": "publify_core/spec/models/redirect_spec.rb",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -20,4 +20,16 @@\n       expect(redirect.from_url).to eq \"#{blog.base_url}/right/here\"\n     end\n   end\n+\n+  describe \"validations\" do\n+    let(:redirect) { described_class.new }\n+\n+    it \"requires from_path to not be too long\" do\n+      expect(redirect).to validate_length_of(:from_path).is_at_most(255)\n+    end\n+\n+    it \"requires to_path to not be too long\" do\n+      expect(redirect).to validate_length_of(:to_path).is_at_most(255)\n+    end\n+  end\n end"
        },
        {
          "filename": "publify_core/spec/models/resource_spec.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -33,4 +33,12 @@\n       expect(img_resource.upload_url(:thumb)).to eq \"/files/resource/1/thumb_testfile.png\"\n     end\n   end\n+\n+  describe \"validations\" do\n+    let(:resource) { described_class.new }\n+\n+    it \"requires mime to not be too long\" do\n+      expect(resource).to validate_length_of(:mime).is_at_most(255)\n+    end\n+  end\n end"
        },
        {
          "filename": "publify_core/spec/models/tag_spec.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -12,9 +12,15 @@\n     expect(test_tag.errors[:name]).to eq([\"has already been taken\"])\n   end\n \n-  describe \"validation\" do\n+  describe \"validations\" do\n+    let(:tag) { described_class.new }\n+\n     it \"requires name to be present\" do\n-      expect(blog.tags.build(name: \"\")).not_to be_valid\n+      expect(tag).to validate_presence_of(:name)\n+    end\n+\n+    it \"requires display_name to not be too long\" do\n+      expect(tag).to validate_length_of(:display_name).is_at_most(255)\n     end\n   end\n "
        },
        {
          "filename": "publify_core/spec/models/user_spec.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -45,6 +45,10 @@\n   describe \"validations\" do\n     let(:user) { described_class.new }\n \n+    it \"requires email to not be too long\" do\n+      expect(user).to validate_length_of(:email).is_at_most(255)\n+    end\n+\n     it \"requires first name to not be too long\" do\n       expect(user).to validate_length_of(:firstname).is_at_most(256)\n     end\n@@ -73,6 +77,10 @@\n       expect(user).to validate_presence_of(:login)\n     end\n \n+    it \"requires text_filter_name to not be too long\" do\n+      expect(user).to validate_length_of(:text_filter_name).is_at_most(255)\n+    end\n+\n     it \"does not allow duplicate logins when updating a user\" do\n       create :user, login: \"foo\"\n       bar = create :user, login: \"bar\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9514eaf5293956182bd58e70ae01b1a3b0633614",
            "date": "2025-01-12T11:19:19Z",
            "author_login": "mvz"
          },
          {
            "sha": "b13b6d705822f34c48d96813ec2dd5a3a66782eb",
            "date": "2025-01-10T09:41:19Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bc406080b2baff54e26f00a4ca36ac5a7c2ce36f",
            "date": "2024-12-28T11:33:09Z",
            "author_login": "mvz"
          },
          {
            "sha": "7c73543d855d0b2cac1baa690c7eb4c6cf6a49dd",
            "date": "2024-12-25T10:01:38Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "effb2f66c060b40d482885333c474c41c7bf5b1b",
            "date": "2024-12-13T14:31:38Z",
            "author_login": "mvz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "Improper Input Validation in GitHub repository publify/publify prior to 9.2.10.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-14T15:15:08.997",
    "last_modified": "2024-11-21T07:36:55.420",
    "fix_date": "2022-08-14T11:03:05Z"
  },
  "references": [
    {
      "url": "https://github.com/publify/publify/commit/ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0049774b-1857-46dc-a834-f1fb15138c53",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/publify/publify/commit/ca46da283572b4f8c0b5aa245008756c8a5fd1b1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0049774b-1857-46dc-a834-f1fb15138c53",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.555238",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "publify",
    "owner": "publify",
    "created_at": "2008-10-23T14:45:23Z",
    "updated_at": "2025-01-12T11:19:26Z",
    "pushed_at": "2025-01-12T11:19:21Z",
    "size": 32806,
    "stars": 1828,
    "forks": 3689,
    "open_issues": 86,
    "watchers": 1828,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Less": 189139,
      "Ruby": 136723,
      "HTML": 16246,
      "CSS": 1115
    },
    "commit_activity": {
      "total_commits_last_year": 41,
      "avg_commits_per_week": 0.7884615384615384,
      "days_active_last_year": 30
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T12:55:41.326580"
  }
}