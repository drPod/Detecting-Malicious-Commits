{
  "cve_id": "CVE-2023-0300",
  "github_data": {
    "repository": "alfio-event/alf.io",
    "fix_commit": "c1ae54ac84f1c7a5ec2831876f6445cb79be96fc",
    "related_commits": [
      "c1ae54ac84f1c7a5ec2831876f6445cb79be96fc",
      "c1ae54ac84f1c7a5ec2831876f6445cb79be96fc"
    ],
    "patch_url": "https://github.com/alfio-event/alf.io/commit/c1ae54ac84f1c7a5ec2831876f6445cb79be96fc.patch",
    "fix_commit_details": {
      "sha": "c1ae54ac84f1c7a5ec2831876f6445cb79be96fc",
      "commit_date": "2022-12-09T17:22:07Z",
      "author": {
        "login": "cbellone",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "escape HTML in group name and description (#1155)",
        "length": 49,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 54,
        "additions": 46,
        "deletions": 8
      },
      "files": [
        {
          "filename": "src/main/java/alfio/manager/GroupManager.java",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -35,6 +35,7 @@\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.Validate;\n+import org.apache.commons.text.StringEscapeUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.PlatformTransactionManager;\n import org.springframework.transaction.TransactionDefinition;\n@@ -49,6 +50,7 @@\n import static alfio.model.group.LinkedGroup.MatchType.FULL;\n import static alfio.model.group.LinkedGroup.Type.*;\n import static java.util.Collections.singletonList;\n+import static org.apache.commons.text.StringEscapeUtils.escapeHtml4;\n \n @Component\n @Log4j2\n@@ -81,7 +83,7 @@ public Result<Integer> createNew(GroupModification input) {\n     }\n \n     Group createNew(String name, String description, int organizationId) {\n-        AffectedRowCountAndKey<Integer> insert = groupRepository.insert(name, description, organizationId);\n+        AffectedRowCountAndKey<Integer> insert = groupRepository.insert(escapeHtml4(name), escapeHtml4(description), organizationId);\n         return groupRepository.getById(insert.getKey());\n     }\n \n@@ -247,7 +249,7 @@ public Optional<GroupModification> update(int listId, GroupModification modifica\n                 throw new DuplicateGroupItemException(error.getDescription());\n             }\n         }\n-        groupRepository.update(listId, modification.getName(), modification.getDescription());\n+        groupRepository.update(listId, escapeHtml4(modification.getName()), escapeHtml4(modification.getDescription()));\n         return loadComplete(listId);\n     }\n "
        },
        {
          "filename": "src/main/java/alfio/repository/GroupRepository.java",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -28,6 +28,8 @@\n import java.util.Optional;\n import java.util.UUID;\n \n+import static org.apache.commons.text.StringEscapeUtils.escapeHtml4;\n+\n @QueryRepository\n public interface GroupRepository {\n \n@@ -66,7 +68,9 @@ AffectedRowCountAndKey<Integer> createConfiguration(@Bind(\"groupId\") int groupId\n \n     default int[] insert(int groupId, List<GroupMemberModification> members) {\n         MapSqlParameterSource[] params = members.stream()\n-            .map(i -> new MapSqlParameterSource(\"groupId\", groupId).addValue(\"value\", i.getValue().toLowerCase()).addValue(\"description\", i.getDescription()))\n+            .map(i -> new MapSqlParameterSource(\"groupId\", groupId)\n+                .addValue(\"value\", i.getValue().toLowerCase())\n+                .addValue(\"description\", escapeHtml4(i.getDescription())))\n             .toArray(MapSqlParameterSource[]::new);\n \n         return getNamedParameterJdbcTemplate().batchUpdate(\"insert into group_member(a_group_id_fk, value, description) values(:groupId, :value, :description)\", params);"
        },
        {
          "filename": "src/main/webapp/resources/js/admin/service/service.js",
          "status": "modified",
          "additions": 11,
          "deletions": 5,
          "patch": "@@ -622,20 +622,26 @@\n         };\n     }]);\n \n-    baseServices.service(\"NotificationHandler\", [\"growl\", function (growl) {\n+    baseServices.service(\"NotificationHandler\", [\"growl\", \"$sanitize\", function (growl, $sanitize) {\n         var config = {ttl: 5000, disableCountDown: true};\n+        var sanitize = function(message) {\n+            var sanitized = $sanitize(message);\n+            return sanitized.split(' ').map(function(part) {\n+                return encodeURIComponent(part);\n+            }).join(' ');\n+        };\n         return {\n             showSuccess: function (message) {\n-                return growl.success(message, config);\n+                return growl.success(sanitize(message), config);\n             },\n             showWarning: function (message) {\n-                return growl.warning(message, config);\n+                return growl.warning(sanitize(message), config);\n             },\n             showInfo : function (message) {\n-                return growl.info(message, config);\n+                return growl.info(sanitize(message), config);\n             },\n             showError : function (message) {\n-                return growl.error(message, config);\n+                return growl.error(sanitize(message), config);\n             }\n         }\n "
        },
        {
          "filename": "src/test/java/alfio/manager/GroupManagerIntegrationTest.java",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -160,4 +160,30 @@ public void testDuplicates() {\n         assertEquals(\"value.duplicate\", items.getFirstErrorOrNull().getCode());\n         assertEquals(\"test@test.ch\", items.getFirstErrorOrNull().getDescription());\n     }\n+\n+    @Test\n+    void testEscape() {\n+        List<TicketCategoryModification> categories = Collections.singletonList(\n+            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 10,\n+                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),\n+                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(2), LocalTime.now(ClockProvider.clock())),\n+                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n+        Pair<Event, String> pair = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n+        Event event = pair.getKey();\n+        Group group = groupManager.createNew(\"test > 1\", \"This is a test < 1\", event.getOrganizationId());\n+        assertNotNull(group);\n+        assertEquals(\"This is a test &lt; 1\", group.getDescription());\n+        assertEquals(\"test &gt; 1\", group.getName());\n+        LinkedGroupModification modification = new LinkedGroupModification(null, group.getId(), event.getId(), null, LinkedGroup.Type.ONCE_PER_VALUE, LinkedGroup.MatchType.FULL, null);\n+        LinkedGroup configuration = groupManager.createLink(group.getId(), event.getId(), modification);\n+        assertNotNull(configuration);\n+        Result<Integer> items = groupManager.insertMembers(group.getId(), List.of(new GroupMemberModification(null,\"test@test.ch\", \"description <>\")));\n+        assertTrue(items.isSuccess());\n+        var persistedGroup = groupManager.loadComplete(group.getId()).orElseThrow();\n+        assertEquals(\"description &lt;&gt;\", persistedGroup.getItems().get(0).getDescription());\n+        groupManager.update(group.getId(), new GroupModification(group.getId(), \"test > 1\", \"This is a test < 1\", event.getOrganizationId(), List.of(new GroupMemberModification(null,\"test@test.ch\", \"description <>\"))));\n+        persistedGroup = groupManager.loadComplete(group.getId()).orElseThrow();\n+        assertEquals(\"This is a test &lt; 1\", persistedGroup.getDescription());\n+        assertEquals(\"test &gt; 1\", persistedGroup.getName());\n+    }\n }\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b4a52f45765a6054bf6a2dd89a528660e9959532",
            "date": "2025-01-08T14:28:08Z",
            "author_login": "cbellone"
          },
          {
            "sha": "4e6977dd094e59361e52dd57c5d4322e100f4cdf",
            "date": "2024-12-31T19:17:59Z",
            "author_login": "cbellone"
          },
          {
            "sha": "48e77f87ad5bc73b6a6a87834bdc9cf59ad75610",
            "date": "2024-12-31T18:59:47Z",
            "author_login": "cbellone"
          },
          {
            "sha": "8acd38834864b854b371bf16a539023c6802d4c4",
            "date": "2024-12-31T18:56:17Z",
            "author_login": "cbellone"
          },
          {
            "sha": "c08abfe37f97885e191ec22750a1732b64ebed35",
            "date": "2024-12-31T13:55:07Z",
            "author_login": "syjer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Reflected in GitHub repository alfio-event/alf.io prior to 2.0-M4-2301.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-14T18:15:09.887",
    "last_modified": "2024-11-21T07:36:55.570",
    "fix_date": "2022-12-09T17:22:07Z"
  },
  "references": [
    {
      "url": "https://github.com/alfio-event/alf.io/commit/c1ae54ac84f1c7a5ec2831876f6445cb79be96fc",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0a91fec7-a76e-4ca3-80ba-81de1f10d59d",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/alfio-event/alf.io/commit/c1ae54ac84f1c7a5ec2831876f6445cb79be96fc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0a91fec7-a76e-4ca3-80ba-81de1f10d59d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.555386",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "alf.io",
    "owner": "alfio-event",
    "created_at": "2014-07-26T10:12:57Z",
    "updated_at": "2025-01-10T18:01:09Z",
    "pushed_at": "2025-01-08T14:28:22Z",
    "size": 47674,
    "stars": 1448,
    "forks": 354,
    "open_issues": 180,
    "watchers": 1448,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 5083128,
      "HTML": 700691,
      "JavaScript": 601739,
      "TypeScript": 366686,
      "PLpgSQL": 78190,
      "MAXScript": 77119,
      "CSS": 41234,
      "SCSS": 16853,
      "Shell": 1723,
      "Procfile": 62
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:09:08.045599"
  }
}