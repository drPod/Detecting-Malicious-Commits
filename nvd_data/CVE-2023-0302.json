{
  "cve_id": "CVE-2023-0302",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "961f0e723903011d4f54c2396e44efa91fcc74ce",
    "related_commits": [
      "961f0e723903011d4f54c2396e44efa91fcc74ce",
      "961f0e723903011d4f54c2396e44efa91fcc74ce"
    ],
    "patch_url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce.patch",
    "fix_commit_details": {
      "sha": "961f0e723903011d4f54c2396e44efa91fcc74ce",
      "commit_date": "2023-01-06T11:55:15Z",
      "author": {
        "login": "trufae",
        "type": "User",
        "stats": {
          "total_commits": 1783,
          "average_weekly_commits": 2.140456182472989,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 235
        }
      },
      "commit_message": {
        "title": "Fix ANSI Escape Sequence Injection vulns via DWARF ##vuln",
        "length": 187,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 130,
        "additions": 107,
        "deletions": 23
      },
      "files": [
        {
          "filename": "libr/anal/meta.c",
          "status": "modified",
          "additions": 7,
          "deletions": 6,
          "patch": "@@ -111,12 +111,13 @@ static bool meta_set(RAnal *a, RAnalMetaType type, int subtype, ut64 from, ut64\n \titem->subtype = subtype;\n \titem->space = space;\n \tfree (item->str);\n-\titem->str = str ? strdup (str) : NULL;\n-\tif (str && !item->str) {\n-\t\tif (!node) { // If we just created this\n-\t\t\tfree (item);\n-\t\t}\n-\t\treturn false;\n+\tif (R_STR_ISNOTEMPTY (str)) {\n+\t\titem->str = strdup (str);\n+\t\t// this breaks the `ecHw` command\n+\t\t// (highlights word in current instruction, which uses ansi\n+\t\t// r_str_ansi_strip (item->str);\n+\t} else {\n+\t\titem->str = NULL;\n \t}\n \tR_DIRTY (a);\n \tif (!node) {"
        },
        {
          "filename": "libr/bin/dwarf.c",
          "status": "modified",
          "additions": 36,
          "deletions": 11,
          "patch": "@@ -431,6 +431,7 @@ static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const u\n \tint i = 0;\n \tsize_t count;\n \tconst ut8 *tmp_buf = NULL;\n+\tchar *fn = NULL;\n \n \tif (mode == R_MODE_PRINT) {\n \t\tprint (\" The Directory Table:\\n\");\n@@ -464,10 +465,12 @@ static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const u\n \n \tfor (i = 0; i < 2; i++) {\n \t\twhile (buf + 1 < buf_end) {\n-\t\t\tconst char *filename = (const char *)buf;\n \t\t\tsize_t maxlen = R_MIN ((size_t) (buf_end - buf - 1), 0xfff);\n \t\t\tut64 id_idx, mod_time, file_len;\n-\t\t\tsize_t len = r_str_nlen (filename, maxlen);\n+\t\t\tfree (fn);\n+\t\t\tfn = r_str_ndup ((const char *)buf, maxlen);\n+\t\t\tr_str_ansi_strip (fn);\n+\t\t\tsize_t len = strlen (fn);\n \n \t\t\tif (!len) {\n \t\t\t\tbuf++;\n@@ -512,7 +515,7 @@ static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const u\n \t\t\t\t}\n \n \t\t\t\tif (hdr->file_names) {\n-\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);\n+\t\t\t\t\thdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);\n \t\t\t\t\thdr->file_names[count].id_idx = id_idx;\n \t\t\t\t\thdr->file_names[count].mod_time = mod_time;\n \t\t\t\t\thdr->file_names[count].file_len = file_len;\n@@ -525,7 +528,8 @@ static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const u\n \t\t\t}\n \t\t\tcount++;\n \t\t\tif (mode == R_MODE_PRINT && i) {\n-\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);\n+\t\t\t\tprint (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\",\n+\t\t\t\t\t\tentry_index++, id_idx, mod_time, file_len, fn);\n \t\t\t}\n \t\t}\n \t\tif (i == 0) {\n@@ -544,6 +548,7 @@ static const ut8 *parse_line_header_source(RBinFile *bf, const ut8 *buf, const u\n \t}\n \n beach:\n+\tfree (fn);\n \tsdb_free (sdb);\n \n \treturn buf;\n@@ -677,7 +682,6 @@ static const ut8 *parse_line_header(\n \n static inline void add_sdb_addrline(Sdb *s, ut64 addr, const char *file, ut64 line, int mode, PrintfCallback print) {\n \tconst char *p;\n-\tchar *fileline;\n \tchar offset[SDB_NUM_BUFSZ];\n \tchar *offset_ptr;\n \n@@ -706,7 +710,10 @@ static inline void add_sdb_addrline(Sdb *s, ut64 addr, const char *file, ut64 li\n #else\n \tp = file;\n #endif\n-\tfileline = r_str_newf (\"%s|%\"PFMT64d, p, line);\n+\tchar *fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);\n+\tr_str_ansi_strip (fileline);\n+\tr_str_replace_ch (fileline, '\\n', 0, true);\n+\tr_str_replace_ch (fileline, '\\t', 0, true);\n \toffset_ptr = sdb_itoa (addr, 16, offset, sizeof (offset));\n \tsdb_add (s, offset_ptr, fileline, 0);\n \tsdb_add (s, fileline, offset_ptr, 0);\n@@ -1666,7 +1673,15 @@ static const ut8 *parse_attr_value(const ut8 *obuf, int obuf_len,\n \t\tbreak;\n \tcase DW_FORM_string:\n \t\tvalue->kind = DW_AT_KIND_STRING;\n-\t\tvalue->string.content = *buf ? r_str_ndup ((const char *)buf, buf_end - buf) : NULL;\n+\t\tif (*buf) {\n+\t\t\tchar *name = r_str_ndup ((const char *)buf, buf_end - buf);\n+\t\t\tr_str_ansi_strip (name);\n+\t\t\tr_str_replace_ch (name, '\\n', 0, true);\n+\t\t\tr_str_replace_ch (name, '\\t', 0, true);\n+\t\t\tvalue->string.content = name;\n+\t\t} else {\n+\t\t\tvalue->string.content = NULL;\n+\t\t}\n \t\tif (value->string.content) {\n \t\t\tbuf += strlen (value->string.content) + 1;\n \t\t}\n@@ -1711,8 +1726,15 @@ static const ut8 *parse_attr_value(const ut8 *obuf, int obuf_len,\n \t\tvalue->kind = DW_AT_KIND_STRING;\n \t\tvalue->string.offset = dwarf_read_offset (hdr->is_64bit, &buf, buf_end);\n \t\tif (debug_str && value->string.offset < debug_str_len) {\n-\t\t\tconst char *ds = (const char *)(debug_str + value->string.offset);\n-\t\t\tvalue->string.content = strdup (ds); // r_str_ndup (ds, debug_str_len - value->string.offset);\n+\t\t\tchar *ds = r_str_ndup ((const char *)(debug_str + value->string.offset), debug_str_len);\n+\t\t\tif (ds) {\n+\t\t\t\tr_str_ansi_strip (ds);\n+\t\t\t\tr_str_replace_ch (ds, '\\n', 0, true);\n+\t\t\t\tr_str_replace_ch (ds, '\\t', 0, true);\n+\t\t\t\tvalue->string.content = ds;\n+\t\t\t} else {\n+\t\t\t\tvalue->string.content = NULL;\n+\t\t\t}\n \t\t} else {\n \t\t\tvalue->string.content = NULL; // Means malformed DWARF, should we print error message?\n \t\t}\n@@ -1903,8 +1925,11 @@ static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RBinDwarfAbbrevD\n \t\t// Or atleast it needs to rework becase there will be\n \t\t// more comp units -> more comp dirs and only the last one will be kept\n \t\tif (attribute->attr_name == DW_AT_comp_dir && is_valid_string_form) {\n-\t\t\tconst char *name = attribute->string.content;\n-\t\t\tsdb_set (sdb, \"DW_AT_comp_dir\", name, 0);\n+\t\t\tchar *name = strdup (attribute->string.content);\n+\t\t\tr_str_ansi_strip (name);\n+\t\t\tr_str_replace_ch (name, '\\n', 0, true);\n+\t\t\tr_str_replace_ch (name, '\\t', 0, true);\n+\t\t\tsdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);\n \t\t}\n \t\tdie->count++;\n \t}"
        },
        {
          "filename": "libr/cons/hud.c",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-/* radare - LGPL - Copyright 2008-2021 - pancake */\n+/* radare - LGPL - Copyright 2008-2023 - pancake */\n \n #include <r_cons.h>\n #include <ctype.h>\n@@ -9,6 +9,7 @@\n R_API char *r_cons_hud_file(const char *f) {\n \tchar *s = r_file_slurp (f, NULL);\n \tif (s) {\n+\t\tr_str_ansi_strip (s);\n \t\tchar *ret = r_cons_hud_string (s);\n \t\tfree (s);\n \t\treturn ret;\n@@ -29,6 +30,7 @@ R_API char *r_cons_hud_line_string(const char *s) {\n \t}\n \tr_str_replace_ch (o, '\\r', 0, true);\n \tr_str_replace_ch (o, '\\t', 0, true);\n+\tr_str_ansi_strip (o);\n \tRList *fl = r_list_new ();\n \tint i;\n \tif (!fl) {\n@@ -66,6 +68,7 @@ R_API char *r_cons_hud_string(const char *s) {\n \tif (!o) {\n \t\treturn NULL;\n \t}\n+\tr_str_ansi_strip (o);\n \tr_str_replace_ch (o, '\\r', 0, true);\n \tr_str_replace_ch (o, '\\t', 0, true);\n \tRList *fl = r_list_new ();"
        },
        {
          "filename": "libr/core/cmd_meta.c",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -539,10 +539,10 @@ static int cmd_meta_comment(RCore *core, const char *input) {\n \t\tbreak;\n \tcase '!':\n \t\t{\n-\t\t\tchar *out;\n \t\t\tconst char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);\n-\t\t\tout = r_core_editor (core, NULL, comment);\n+\t\t\tchar *out = r_core_editor (core, NULL, comment);\n \t\t\tif (out) {\n+\t\t\t\tr_str_ansi_strip (out);\n \t\t\t\t//r_meta_set (core->anal->meta, R_META_TYPE_COMMENT, addr, 0, out);\n \t\t\t\tr_core_cmdf (core, \"CC-@0x%08\"PFMT64x, addr);\n \t\t\t\t//r_meta_del (core->anal->meta, input[0], addr, addr+1);\n@@ -560,6 +560,7 @@ static int cmd_meta_comment(RCore *core, const char *input) {\n \t\tchar *text;\n \t\tchar *nc = strdup (newcomment);\n \t\tr_str_unescape (nc);\n+\t\tr_str_ansi_strip (nc);\n \t\tif (comment) {\n \t\t\ttext = malloc (strlen (comment) + strlen (newcomment) + 2);\n \t\t\tif (text) {"
        },
        {
          "filename": "libr/core/cmd_print.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-/* radare - LGPL - Copyright 2009-2022 - pancake */\n+/* radare - LGPL - Copyright 2009-2023 - pancake */\n \n #include <r_core.h>\n #include <limits.h>"
        },
        {
          "filename": "libr/util/str.c",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1957,14 +1957,16 @@ R_API size_t r_str_ansi_nlen(const char *str, size_t slen) {\n }\n \n // remove ansi escape codes from string, decolorizing it\n+// TODO : optimize by just using two counter variables instead of strcpy()\n R_API size_t r_str_ansi_strip(char *str) {\n \tsize_t i = 0;\n \twhile (str[i]) {\n \t\tsize_t chlen = __str_ansi_length (str + i);\n \t\tif (chlen > 1) {\n-\t\t\tr_str_cpy (str + i + 1, str + i + chlen);\n+\t\t\tr_str_cpy (str + i, str + i + chlen);\n+\t\t} else {\n+\t\t\ti++;\n \t\t}\n-\t\ti++;\n \t}\n \treturn i;\n }"
        },
        {
          "filename": "test/db/cmd/dwarf",
          "status": "modified",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -1,3 +1,55 @@\n+NAME=\"ansi injection via dwarf\"\n+FILE=bins/elf/dwarf_test_func_patched\n+ARGS=-AA\n+CMDS=<<EOF\n+CL\n+xc\n+EOF\n+EXPECT=<<EOF\n+file: /_test.c\n+line: 5\n+addr: 0x00001159\n+file: /_test.c\n+line: 11\n+addr: 0x00001184\n+file: /_test.c\n+line: 6\n+addr: 0x00001165\n+file: /_test.c\n+line: 11\n+addr: 0x00001186\n+file: /_test.c\n+line: 9\n+addr: 0x00001170\n+file: /_test.c\n+line: 8\n+addr: 0x00001168\n+file: /_test.c\n+line: 4\n+addr: 0x00001149\n+file: /_test.c\n+line: 10\n+addr: 0x0000117f\n+- offset -  6061 6263 6465 6667 6869 6A6B 6C6D 6E6F  0123456789ABCDEF  comment\n+0x00001060  f30f 1efa 31ed 4989 d15e 4889 e248 83e4  ....1.I..^H..H..  ; rip ; [16] -r-x section size 294 named .text ; arg3\n+0x00001070  f050 5445 31c0 31c9 488d 3de9 0000 00ff  .PTE1.1.H.=.....\n+0x00001080  1553 2f00 00f4 662e 0f1f 8400 0000 0000  .S/...f.........\n+0x00001090  488d 3d79 2f00 0048 8d05 722f 0000 4839  H.=y/..H..r/..H9  ; sym.deregister_tm_clones\n+0x000010a0  f874 1548 8b05 362f 0000 4885 c074 09ff  .t.H..6/..H..t..\n+0x000010b0  e00f 1f80 0000 0000 c30f 1f80 0000 0000  ................\n+0x000010c0  488d 3d49 2f00 0048 8d35 422f 0000 4829  H.=I/..H.5B/..H)  ; sym.register_tm_clones\n+0x000010d0  fe48 89f0 48c1 ee3f 48c1 f803 4801 c648  .H..H..?H...H..H\n+0x000010e0  d1fe 7414 488b 0505 2f00 0048 85c0 7408  ..t.H.../..H..t.\n+0x000010f0  ffe0 660f 1f44 0000 c30f 1f80 0000 0000  ..f..D..........\n+0x00001100  f30f 1efa 803d 052f 0000 0075 2b55 4883  .....=./...u+UH.  ; sym.__do_global_dtors_aux\n+0x00001110  3de2 2e00 0000 4889 e574 0c48 8b3d e62e  =.....H..t.H.=..\n+0x00001120  0000 e819 ffff ffe8 64ff ffff c605 dd2e  ........d.......\n+0x00001130  0000 015d c30f 1f00 c30f 1f80 0000 0000  ...]............\n+0x00001140  f30f 1efa e977 ffff fff3 0f1e fa55 4889  .....w.......UH.  ; sym.frame_dummy  ; dbg._func ; void _func(char * msg);\n+0x00001150  e548 83ec 1048 897d f848 8b45 f848 89c7  .H...H.}.H.E.H.. ; arg1 ; const char *s\n+EOF\n+RUN\n+\n NAME=\"open companion file for macho dwarf\"\n FILE=bins/mach0/dwarf/a.out\n CMDS=<<EOF"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bf6227e9295110ab97c8cf3237914acd6cfa09b0",
            "date": "2024-12-27T21:02:32Z",
            "author_login": "dennis-doyensec"
          },
          {
            "sha": "a7e958f9ebdf9771c36e8376078f027792981fea",
            "date": "2025-01-14T17:22:24Z",
            "author_login": "radare"
          },
          {
            "sha": "0f85675c7a5d542a89318b62d4a4bc997e595e03",
            "date": "2025-01-14T11:01:39Z",
            "author_login": "radare"
          },
          {
            "sha": "92d45a6034fe60123adc23bf49b398809fe36d25",
            "date": "2025-01-14T11:11:00Z",
            "author_login": "radare"
          },
          {
            "sha": "07be136859c56f96a692c8d5d1a3531345f16a0c",
            "date": "2025-01-14T10:46:07Z",
            "author_login": "radare"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-75",
    "description": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection) in GitHub repository radareorg/radare2 prior to 5.8.2.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-15T01:15:15.147",
    "last_modified": "2024-11-21T07:36:55.820",
    "fix_date": "2023-01-06T11:55:15Z"
  },
  "references": [
    {
      "url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/583133af-7ae6-4a21-beef-a4b0182cf82e",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/961f0e723903011d4f54c2396e44efa91fcc74ce",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/583133af-7ae6-4a21-beef-a4b0182cf82e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.556169",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-14T11:39:09Z",
    "pushed_at": "2025-01-14T11:39:05Z",
    "size": 182812,
    "stars": 20990,
    "forks": 3027,
    "open_issues": 874,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29143253,
      "Makefile": 262919,
      "Shell": 145034,
      "Meson": 123192,
      "C++": 82794,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1594,
      "avg_commits_per_week": 30.653846153846153,
      "days_active_last_year": 294
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:16.054007"
  }
}