{
  "cve_id": "CVE-2023-0440",
  "github_data": {
    "repository": "healthchecks/healthchecks",
    "fix_commit": "359edbd2709e27b60687061a32e19322bc971c1f",
    "related_commits": [
      "359edbd2709e27b60687061a32e19322bc971c1f",
      "359edbd2709e27b60687061a32e19322bc971c1f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "359edbd2709e27b60687061a32e19322bc971c1f",
      "commit_date": "2023-01-23T10:33:39Z",
      "author": {
        "login": "cuu508",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix login and signup views to make email enumeration harder",
        "length": 59,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 65,
        "additions": 37,
        "deletions": 28
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@ All notable changes to this project will be documented in this file.\n - Fix special character encoding in project invite emails\n - Fix check transfer between same account's projects when at check limit\n - Fix wording in the invite email when inviting read-only users\n+- Fix login and signup views to make email enumeration harder\n \n ## v2.5 - 2022-12-14\n "
        },
        {
          "filename": "hc/accounts/forms.py",
          "status": "modified",
          "additions": 1,
          "deletions": 6,
          "patch": "@@ -30,11 +30,6 @@ def clean_identity(self):\n         if len(v) > 254:\n             raise forms.ValidationError(\"Address is too long.\")\n \n-        if User.objects.filter(email=v).exists():\n-            raise forms.ValidationError(\n-                \"An account with this email address already exists.\"\n-            )\n-\n         return v\n \n     def clean_tz(self):\n@@ -60,7 +55,7 @@ def clean_identity(self):\n         try:\n             self.user = User.objects.get(email=v)\n         except User.DoesNotExist:\n-            raise forms.ValidationError(\"Unknown email address.\")\n+            self.user = None\n \n         return v\n "
        },
        {
          "filename": "hc/accounts/tests/test_login.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -57,6 +57,16 @@ def test_it_sends_link_with_next(self):\n         body = mail.outbox[0].body\n         self.assertTrue(\"/?next=\" + self.channels_url in body)\n \n+    def test_it_handles_unknown_email(self):\n+        form = {\"identity\": \"surprise@example.org\"}\n+\n+        r = self.client.post(\"/accounts/login/\", form)\n+        self.assertRedirects(r, \"/accounts/login_link_sent/\")\n+        self.assertIn(\"auto-login\", r.cookies)\n+\n+        # There should be no sent emails.\n+        self.assertEqual(len(mail.outbox), 0)\n+\n     @override_settings(SECRET_KEY=\"test-secret\")\n     def test_it_rate_limits_emails(self):\n         # \"d60d...\" is sha1(\"alice@example.orgtest-secret\")"
        },
        {
          "filename": "hc/accounts/tests/test_signup.py",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -16,7 +16,7 @@ def test_it_works(self):\n         form = {\"identity\": \"alice@example.org\", \"tz\": \"Europe/Riga\"}\n \n         r = self.client.post(\"/accounts/signup/\", form)\n-        self.assertContains(r, \"Account created\")\n+        self.assertContains(r, \"check your email\")\n         self.assertIn(\"auto-login\", r.cookies)\n \n         # An user should have been created\n@@ -75,13 +75,17 @@ def test_it_ignores_case(self):\n         q = User.objects.filter(email=\"alice@example.org\")\n         self.assertTrue(q.exists)\n \n-    def test_it_checks_for_existing_users(self):\n+    def test_it_handles_existing_users(self):\n         alice = User(username=\"alice\", email=\"alice@example.org\")\n         alice.save()\n \n         form = {\"identity\": \"alice@example.org\", \"tz\": \"\"}\n         r = self.client.post(\"/accounts/signup/\", form)\n-        self.assertContains(r, \"already exists\")\n+        self.assertContains(r, \"check your email\")\n+        self.assertIn(\"auto-login\", r.cookies)\n+\n+        # It should not send an email\n+        self.assertEqual(len(mail.outbox), 0)\n \n     def test_it_checks_syntax(self):\n         form = {\"identity\": \"alice at example org\", \"tz\": \"\"}\n@@ -101,7 +105,7 @@ def test_it_ignores_bad_tz(self):\n         form = {\"identity\": \"alice@example.org\", \"tz\": \"Foo/Bar\"}\n \n         r = self.client.post(\"/accounts/signup/\", form)\n-        self.assertContains(r, \"Account created\")\n+        self.assertContains(r, \"check your email\")\n         self.assertIn(\"auto-login\", r.cookies)\n \n         profile = Profile.objects.get()"
        },
        {
          "filename": "hc/accounts/views.py",
          "status": "modified",
          "additions": 10,
          "deletions": 9,
          "patch": "@@ -161,10 +161,11 @@ def login(request):\n                 if not _allow_redirect(redirect_url):\n                     redirect_url = None\n \n-                profile = Profile.objects.for_user(magic_form.user)\n-                profile.send_instant_login_link(redirect_url=redirect_url)\n-                response = redirect(\"hc-login-link-sent\")\n+                if magic_form.user:\n+                    profile = Profile.objects.for_user(magic_form.user)\n+                    profile.send_instant_login_link(redirect_url=redirect_url)\n \n+                response = redirect(\"hc-login-link-sent\")\n                 # check_token looks for this cookie to decide if\n                 # it needs to do the extra POST step.\n                 response.set_cookie(\"auto-login\", \"1\", max_age=300, httponly=True)\n@@ -201,16 +202,16 @@ def signup(request):\n     form = forms.SignupForm(request.POST)\n     if form.is_valid():\n         email = form.cleaned_data[\"identity\"]\n-        tz = form.cleaned_data[\"tz\"]\n-        user = _make_user(email, tz)\n-        profile = Profile.objects.for_user(user)\n-        profile.send_instant_login_link()\n-        ctx[\"created\"] = True\n+        if not User.objects.filter(email=email).exists():\n+            tz = form.cleaned_data[\"tz\"]\n+            user = _make_user(email, tz)\n+            profile = Profile.objects.for_user(user)\n+            profile.send_instant_login_link()\n     else:\n         ctx = {\"form\": form}\n \n     response = render(request, \"accounts/signup_result.html\", ctx)\n-    if ctx.get(\"created\"):\n+    if \"form\" not in ctx:\n         response.set_cookie(\"auto-login\", \"1\", max_age=300, httponly=True)\n \n     return response"
        },
        {
          "filename": "templates/accounts/login_link_sent.html",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1,16 +1,16 @@\n {% extends \"base.html\" %}\n+{% load hc_extras %}\n \n {% block content %}\n <div class=\"row\">\n     <div class=\"col-sm-6 col-sm-offset-3\">\n         <div class=\"hc-dialog\">\n-            <h1>Login Link Sent!</h1>\n+            <h1>Check Your Email!</h1>\n             <br />\n             <p>\n-                We've sent you an email with login instructions.\n-                Please check your inbox!\n+                If a {% site_name %} account exists for this email address,\n+                you will receive a login link in your email shortly.\n             </p>\n-\n         </div>\n     </div>\n </div>"
        },
        {
          "filename": "templates/accounts/signup_result.html",
          "status": "modified",
          "additions": 3,
          "deletions": 5,
          "patch": "@@ -1,7 +1,5 @@\n {% for error in form.identity.errors %}\n <p class=\"text-danger\">{{ error }}</p>\n-{% endfor %}\n-\n-{% if created %}\n-<p class=\"text-success\">Account created, please check your email!</p>\n-{% endif %}\n\\ No newline at end of file\n+{% empty %}\n+<p class=\"text-success\">Please check your email!</p>\n+{% endfor %}\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "85ae3e30f261476f50511fc232acab94fb0cad38",
            "date": "2025-01-24T12:52:14Z",
            "author_login": "cuu508"
          },
          {
            "sha": "840bdec764436f0f926b988f021a991662840008",
            "date": "2025-01-24T12:45:25Z",
            "author_login": "cuu508"
          },
          {
            "sha": "abc3ee1ef1fe5f681f348cd4dbc116c9bf301ecd",
            "date": "2025-01-24T12:42:59Z",
            "author_login": "cuu508"
          },
          {
            "sha": "3162ef64848ebc2022f9995b695f8dc3f25e08f2",
            "date": "2025-01-21T11:15:54Z",
            "author_login": "wie-niet"
          },
          {
            "sha": "bd7f6584219b1660221a8316e9b4aebacef2663e",
            "date": "2025-01-23T08:07:09Z",
            "author_login": "cuu508"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-203",
    "description": "Observable Discrepancy in GitHub repository healthchecks/healthchecks prior to v2.6.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-23T14:15:11.720",
    "last_modified": "2024-11-21T07:37:11.130",
    "fix_date": "2023-01-23T10:33:39Z"
  },
  "references": [
    {
      "url": "https://github.com/healthchecks/healthchecks/commit/359edbd2709e27b60687061a32e19322bc971c1f",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/208a096f-7986-4eed-8629-b7285348a686",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/healthchecks/healthchecks/commit/359edbd2709e27b60687061a32e19322bc971c1f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/208a096f-7986-4eed-8629-b7285348a686",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.588209",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "healthchecks",
    "owner": "healthchecks",
    "created_at": "2015-06-25T18:38:33Z",
    "updated_at": "2025-01-26T07:43:03Z",
    "pushed_at": "2025-01-24T12:52:28Z",
    "size": 24157,
    "stars": 8529,
    "forks": 854,
    "open_issues": 90,
    "watchers": 8529,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1369211,
      "HTML": 446751,
      "Less": 210582,
      "CSS": 71132,
      "JavaScript": 67943,
      "Dockerfile": 1584,
      "Shell": 124
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:30:32.015107"
  }
}