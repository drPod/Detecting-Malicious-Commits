{
  "cve_id": "CVE-2023-0608",
  "github_data": {
    "repository": "microweber/microweber",
    "fix_commit": "20df56615e61624f5fff149849753869e4b3b936",
    "related_commits": [
      "20df56615e61624f5fff149849753869e4b3b936",
      "20df56615e61624f5fff149849753869e4b3b936"
    ],
    "patch_url": "https://github.com/microweber/microweber/commit/20df56615e61624f5fff149849753869e4b3b936.patch",
    "fix_commit_details": {
      "sha": "20df56615e61624f5fff149849753869e4b3b936",
      "commit_date": "2022-11-29T12:22:23Z",
      "author": {
        "login": "peter-mw",
        "type": "User",
        "stats": {
          "total_commits": 7965,
          "average_weekly_commits": 15.0,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 408
        }
      },
      "commit_message": {
        "title": "update",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 606,
        "additions": 564,
        "deletions": 42
      },
      "files": [
        {
          "filename": "src/MicroweberPackages/App/Utils/Parser.php",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -135,10 +135,14 @@ public function replace_url_placeholders($layout)\n \n     public function make_tags($layout, $options = array())\n     {\n-\n-        if ($layout == '') {\n+         if ($layout == '') {\n             return $layout;\n         }\n+\n+        $layout = str_ireplace('{SITE_URL}','___mw-site-url-temp-replace-on-make-tags___', $layout);\n+\n+\n+\n         require_once __DIR__ . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'phpQuery.php';\n \n         $pq = \\phpQuery::newDocument($layout);\n@@ -261,6 +265,10 @@ public function make_tags($layout, $options = array())\n             }\n         }\n \n+        $layout = str_ireplace('___mw-site-url-temp-replace-on-make-tags___','{SITE_URL}', $layout);\n+\n+\n+\n         return $layout;\n     }\n "
        },
        {
          "filename": "src/MicroweberPackages/App/Utils/lib/phpQuery.php",
          "status": "modified",
          "additions": 34,
          "deletions": 3,
          "patch": "@@ -221,7 +221,14 @@ public function load($markup, $contentType = null, $newDocumentID = null)\n         }\n         if ($loaded) {\n             //\t\t\t$this->document->formatOutput = true;\n+            $this->document->formatOutput = false;\n             $this->document->preserveWhiteSpace = true;\n+\n+            $this->document->validateOnParse=false;\n+            $this->document->strictErrorChecking=false;\n+            $this->document->recover=false;\n+\n+\n             $this->xpath = new DOMXPath($this->document);\n             $this->afterMarkupLoad();\n \n@@ -294,11 +301,21 @@ protected function documentCreate($charset, $version = '1.0')\n         if (!$version) {\n             $version = '1.0';\n         }\n+\n+        libxml_use_internal_errors(true);\n+\n         $this->document = new DOMDocument($version, $charset);\n         $this->charset = $this->document->encoding;\n         //\t\t$this->document->encoding = $charset;\n-        $this->document->formatOutput = true;\n+       // $this->document->formatOutput = true;\n+        $this->document->formatOutput = false;\n+       // $this->document->standalone = true;\n         $this->document->preserveWhiteSpace = true;\n+\n+\n+        $this->document->validateOnParse=false;\n+        $this->document->strictErrorChecking=false;\n+        $this->document->recover=false;\n     }\n \n     protected function loadMarkupHTML($markup, $requestedCharset = null)\n@@ -378,7 +395,15 @@ protected function loadMarkupHTML($markup, $requestedCharset = null)\n               ? $this->document->loadHTML($markup)\n               : @$this->document->loadHTML($markup); */\n \n-            $return = @$this->document->loadHTML($markup);\n+         // $return = @$this->document->loadHTML($markup);\n+            $return = @$this->document->loadHTML($markup,\n+                LIBXML_SCHEMA_CREATE |\n+                LIBXML_HTML_NOIMPLIED |\n+                LIBXML_HTML_NODEFDTD |\n+                LIBXML_NOERROR |\n+                LIBXML_NONET |\n+                LIBXML_NOWARNING\n+            );\n \n             if ($return) {\n                 $this->root = $this->document;\n@@ -763,6 +788,10 @@ private function documentFragmentLoadMarkup($fragment, $charset, $markup = null)\n                         .'<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" '\n                         .'\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">'\n                         .'<fake xmlns=\"http://www.w3.org/1999/xhtml\">'.$markup.'</fake>');\n+\n+/*                $fragment->loadMarkupXML('<?xml version=\"1.0\" encoding=\"'.$charset.'\"?>'*/\n+//                       . phpQuery::$defaultDoctype.''\n+//                        .'<fake xmlns=\"http://www.w3.org/1999/xhtml\">'.$markup.'</fake>');\n                 $fragment->root = $fragment->document->firstChild->nextSibling;\n             } else {\n                 $fragment->loadMarkupXML('<?xml version=\"1.0\" encoding=\"'.$charset.'\"?><fake>'.$markup.'</fake>');\n@@ -5079,8 +5108,10 @@ abstract class phpQuery\n      *\n      * @var unknown_type\n      */\n-    public static $defaultDoctype = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n+    public static $defaultDoctype_old = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n \"http://www.w3.org/TR/html4/loose.dtd\">';\n+\n+    public static $defaultDoctype = '<!doctype html>';\n     public static $defaultCharset = 'UTF-8';\n \n     /**"
        },
        {
          "filename": "src/MicroweberPackages/Content/ContentManagerCrud.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n namespace MicroweberPackages\\Content;\n \n use MicroweberPackages\\Content\\Repositories\\ContentRepository;\n+use MicroweberPackages\\Content\\Models\\Content;\n use MicroweberPackages\\Database\\Crud;\n use Illuminate\\Support\\Facades\\DB;\n use function Opis\\Closure\\serialize as serializeClosure;"
        },
        {
          "filename": "src/MicroweberPackages/Content/ContentManagerHelpers.php",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -1065,15 +1065,14 @@ public function save_from_live_edit($post_data)\n \n                         $html_to_save = $content =  $this->app->parser->make_tags($html_to_save);\n \n-//  AntiXSS makes bug on save convertind comments to htmlentities\n-//                        $antixss = new AntiXSS();\n-//                        $html_to_save = $content = $antixss->xss_clean($html_to_save);\n+                        //\\Log::info($html_to_save);\n+\n \n                         $xssClean = new XSSClean();\n                         $html_to_save = $content = $xssClean->clean($html_to_save);\n \n \n-\n+                      //  \\Log::info($html_to_save);\n \n                         if ($save_module == false and $save_global == false and $save_layout == false) {\n                             if ($content_id) {\n@@ -1135,6 +1134,8 @@ public function save_from_live_edit($post_data)\n                                         $cont_table_save[$field]=$html_to_save;\n                                     }\n                                 }\n+\n+\n                                 $this->app->event_manager->trigger('mw.content.save_edit', $cont_field);\n \n                                 $to_save = array();\n@@ -1371,6 +1372,7 @@ public function save_content_field($data, $delete_the_cache = true)\n             $table = $table_drafts;\n         }\n \n+\n         $data = $this->app->format->strip_unsafe($data);\n \n         if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n@@ -1506,6 +1508,8 @@ public function save_content_field($data, $delete_the_cache = true)\n             $data['id'] = $find['id'];\n         }\n \n+\n+\n         $save = $this->app->database_manager->save($data);\n \n         $this->app->cache_manager->delete('content_fields');"
        },
        {
          "filename": "src/MicroweberPackages/Content/tests/ContentApiControllerLiveEditSaveTest.php",
          "status": "modified",
          "additions": 413,
          "deletions": 22,
          "patch": "@@ -1,33 +1,31 @@\n <?php\n+\n namespace MicroweberPackages\\Content\\tests;\n \n use Illuminate\\Database\\Eloquent\\Model;\n use Illuminate\\Support\\Facades\\Auth;\n use MicroweberPackages\\Category\\Models\\Category;\n use MicroweberPackages\\Core\\tests\\TestCase;\n+use MicroweberPackages\\Helper\\XSSClean;\n use MicroweberPackages\\Multilanguage\\MultilanguageHelpers;\n use MicroweberPackages\\Page\\Models\\Page;\n use MicroweberPackages\\User\\Models\\User;\n \n class ContentApiControllerLiveEditSaveTest extends TestCase\n {\n-    public function testSaveContentOnPageLiveEdit()\n+    public function testSaveContentOnPageLiveEditSingle()\n     {\n-        $user = User::where('is_admin', '=', '1')->first();\n-        Auth::login($user);\n-\n-\n-        MultilanguageHelpers::setMultilanguageEnabled(0);\n+        $this->cleanupAndPrepare();\n \n         $unique = uniqid('testSaveContentOnPage');\n         $newCleanMlPage = save_content([\n             'subtype' => 'static',\n             'content_type' => 'page',\n             'layout_file' => 'clean.php',\n-            'title' => 'pagecontent222'.$unique,\n-            'url' => 'pagecontent222'.$unique,\n+            'title' => 'pagecontent222' . $unique,\n+            'url' => 'pagecontent222' . $unique,\n             'preview_layout_file' => 'clean.php',\n-            'active_site_template'=> 'new-world',\n+            'active_site_template' => 'new-world',\n             'is_active' => 1,\n         ]);\n \n@@ -37,10 +35,10 @@ public function testSaveContentOnPageLiveEdit()\n         $this->assertEquals($findPage->id, $newCleanMlPage);\n \n         $pageLink = content_link($pageId);\n-        $pageLink = '/' . str_replace(site_url(),'', $pageLink);\n+        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n \n         $_SERVER['PHP_SELF'] = '/index.php';\n-        $_SERVER['REQUEST_URI'] = $pageLink;\n+        $_SERVER['REQ`UEST_URI'] = $pageLink;\n         $_SERVER['REDIRECT_URL'] = $pageLink;\n         $_SERVER['HTTP_REFERER'] = content_link($pageId);\n \n@@ -52,26 +50,30 @@ public function testSaveContentOnPageLiveEdit()\n <div class=\"feature-icon bg-primary bg-gradient\">\n <svg class=\"bi\" width=\"1em\" height=\"1em\"><use xlink:href=\"#collection\"></use></svg>\n </div>\n+<div class=\"feature-icon bg-primary bg-gradient\">\n <h2>Featured title</h2>\n <p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>\n <a href=\"#\" class=\"icon-link\">\n Call to action\n-</a><a class=\"mb-2\" href=\"\"><i class=\"mdi mdi-arrow-right\"></i></a>\n+</a>\n+<a class=\"mb-2\" href=\"\"><i class=\"mdi mdi-arrow-right\"></i></a>\n+<a class=\"mb-2\" href=\"https://example.com\"><i class=\"mdi mdi-arrow-up\"></i>example link</a>\n+<a class=\"mb-3\" target=\"_blank\" href=\"https://example.com/2\"><i class=\"mdi mdi-arrow-left-bold-box\"></i>link 2</a>\n+</div>\n HTML;\n \n \n         $fieldsData = [\n-            'field_data_0'=>[\n-                'attributes'=>[\n-                    'class'=>'container edit',\n-                    'rel'=>'content',\n-                    'rel_id'=>$findPage->id,\n-                    'field'=>'content',\n+            'field_data_0' => [\n+                'attributes' => [\n+                    'class' => 'container edit',\n+                    'rel' => 'content',\n+                    'rel_id' => $findPage->id,\n+                    'field' => 'content',\n                 ],\n-                'html'=>$contentFieldHtml\n+                'html' => $contentFieldHtml\n             ]\n         ];\n-\n         $encoded = base64_encode(json_encode($fieldsData));\n \n         $response = $this->call(\n@@ -92,14 +94,403 @@ public function testSaveContentOnPageLiveEdit()\n         $this->assertEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n         $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n         $this->assertEquals($fieldSaved[0]['field'], 'content');\n+        $findPage = Page::whereId($findPage->id)->first();\n \n-\n-        $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n         $this->assertTrue(str_contains($findPage->content, 'svg class=\"bi\" width=\"1em\" height=\"1em\"'));\n         $this->assertTrue(str_contains($findPage->content, '<h2>Featured title</h2>'));\n+        $this->assertTrue(str_contains($findPage->content, '<a class=\"mb-2\" href=\"https://example.com\"><i class=\"mdi mdi-arrow-up\"></i>example link</a>'));\n+        $this->assertTrue(str_contains($findPage->content, '<a class=\"mb-3\" target=\"_blank\" href=\"https://example.com/2\"><i class=\"mdi mdi-arrow-left-bold-box\"></i>link 2</a>'));\n+\n+\n+    }\n+\n+\n+    public function testSaveContentOnPageLiveEditFromBootstrapExamples()\n+    {\n+        $this->cleanupAndPrepare();\n+        $unique = uniqid('testSaveContentOnPage');\n+        $newCleanMlPage = save_content([\n+            'subtype' => 'static',\n+            'content_type' => 'page',\n+            'layout_file' => 'clean.php',\n+            'title' => 'pagecontent-bs-examples-save' . $unique,\n+            'preview_layout_file' => 'clean.php',\n+            'is_active' => 1,\n+        ]);\n+\n+\n+\n+        $findPage = Page::whereId($newCleanMlPage)->first();\n+\n+        $pageId = $findPage->id;\n+        $this->assertEquals($findPage->id, $newCleanMlPage);\n+\n+        $pageLink = content_link($pageId);\n+        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n+\n+        $_SERVER['PHP_SELF'] = '/index.php';\n+        $_SERVER['REQ`UEST_URI'] = $pageLink;\n+        $_SERVER['REDIRECT_URL'] = $pageLink;\n+        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n+\n+        $zipname = __DIR__ . '/../../Helper/tests/misc/bootstrap-5.0.2-examples.zip';\n+\n+\n+        //\n+\n+        $zip = new \\ZipArchive();\n+\n+        $htmls = [];\n+        if ($zip->open($zipname)) {\n+            for ($i = 0; $i < $zip->numFiles; $i++) {\n+                $fn = $zip->getNameIndex($i);\n+                $ext = get_file_extension($fn);\n+                if ($ext == 'html') {\n+                    $string = $zip->getFromName($fn);\n+                    $htmls[$fn] = $string;\n+                }\n+            }\n+        }\n+        $zip->close();\n+\n+\n+        $this->assertTrue(!empty($htmls));\n+\n+\n+        foreach ($htmls as $k => $html) {\n+\n+\n+            //remove empty tags\n+           $html =  preg_replace('/<[^\\/>]*>([\\s]?)*<\\/[^>]*>/', '', $html);\n+\n+            // remove script tags\n+            $html = preg_replace('/<script\\b[^>]*>(.*?)<\\/script>/is', \"\", $html);\n+\n+             // remove code tags\n+            $html = preg_replace('/<code\\b[^>]*>(.*?)<\\/code>/is', \"\", $html);\n+\n+\n+            $l = $html;\n+            $pq = \\phpQuery::newDocument($l);\n+\n+            // $isolated_html = pq('main')->eq(0)->htmlOuter();\n+            $contentFieldHtml = pq('main')->eq(0)->htmlOuter();\n+\n+\n+            $fieldsData = [\n+                'field_data_0' => [\n+                    'attributes' => [\n+                        'class' => 'container edit',\n+                        'rel' => 'content',\n+                        'rel_id' => $findPage->id,\n+                        'field' => 'content',\n+                    ],\n+                    'html' => $contentFieldHtml\n+                ]\n+            ];\n+\n+\n+\n+\n+            $encoded = base64_encode(json_encode($fieldsData));\n+\n+            $response = $this->call(\n+                'POST',\n+                route('api.content.save_edit'),\n+                [\n+                    'data_base64' => $encoded,\n+                ],\n+                [],//params\n+                $_COOKIE,//cookie\n+                [],//files\n+                $_SERVER //server\n+            );\n+\n+\n+            $fieldSaved = $response->decodeResponseJson();\n+\n+            $this->assertEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n+            $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n+            $this->assertEquals($fieldSaved[0]['field'], 'content');\n+\n+\n+\n+            $pq2 = \\phpQuery::newDocument($contentFieldHtml);\n+            $this->assertEquals($contentFieldHtml, $pq2->htmlOuter());\n+\n+\n+            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n+            $contentFieldHtml1 = trim($contentFieldHtml);\n+            $contentFieldHtml2 = trim($findPage->content);\n+\n+            $this->assertEquals($contentFieldHtml1, $contentFieldHtml2);\n+            $this->assertEquals($contentFieldHtml, $findPage->content);\n+\n+\n+        }\n+\n+\n+    }\n+\n+\n+    public function testSaveContentOnPageLiveEditXssList()\n+    {\n+\n+        $this->cleanupAndPrepare();\n+\n+        $unique = uniqid('testSaveContentOnPageLiveEditXssList');\n+        $newCleanMlPage = save_content([\n+            'subtype' => 'static',\n+            'content_type' => 'page',\n+            'layout_file' => 'clean.php',\n+            'title' => 'xss-test-' . $unique,\n+            'preview_layout_file' => 'clean.php',\n+            'is_active' => 1,\n+        ]);\n+\n+        $findPage = Page::whereId($newCleanMlPage)->first();\n+\n+        $pageId = $findPage->id;\n+        $this->assertEquals($findPage->id, $newCleanMlPage);\n+\n+        $pageLink = content_link($pageId);\n+        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n+\n+        $_SERVER['PHP_SELF'] = '/index.php';\n+        $_SERVER['REQ`UEST_URI'] = $pageLink;\n+        $_SERVER['REDIRECT_URL'] = $pageLink;\n+        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n+\n+\n+\n+        $zip = new \\ZipArchive();\n+        $zip->open(__DIR__ . '/../../Helper/tests/misc/xss-test-files.zip');\n+        $xssList = $zip->getFromName('xss-payload-list.txt');\n+        $zip->close();\n+\n+        $xssList = preg_replace('~\\R~u', \"\\r\\n\", $xssList);\n+        $xssList = explode(PHP_EOL, $xssList);\n+\n+\n+        $xssListChunks = array_chunk($xssList, 100);\n+\n+\n+        foreach ($xssListChunks as $stringChunk) {\n+\n+            $string = implode(PHP_EOL, $stringChunk);\n+             if (empty(trim($string))) {\n+                continue;\n+            }\n+\n+            $contentFieldHtml = $string;\n+\n+            $fieldsData = [\n+                'field_data_0' => [\n+                    'attributes' => [\n+                        'class' => 'container edit',\n+                        'rel' => 'content',\n+                        'rel_id' => $findPage->id,\n+                        'field' => 'content',\n+                    ],\n+                    'html' => $contentFieldHtml\n+                ]\n+            ];\n+\n+            $encoded = base64_encode(json_encode($fieldsData));\n+\n+            $response = $this->call(\n+                'POST',\n+                route('api.content.save_edit'),\n+                [\n+                    'data_base64' => $encoded,\n+                ],\n+                [],//params\n+                $_COOKIE,//cookie\n+                [],//files\n+                $_SERVER //server\n+            );\n+\n+            $fieldSaved = $response->decodeResponseJson();\n+\n+            $this->assertNotEquals(trim($fieldSaved[0]['content']), trim($contentFieldHtml));\n+            $this->assertEquals($fieldSaved[0]['rel_type'], 'content');\n+            $this->assertEquals($fieldSaved[0]['field'], 'content');\n+\n+            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n+            $contentFieldHtml1 = trim($contentFieldHtml);\n+            $contentFieldHtml2 = trim($findPage->content);\n+\n+           $this->assertNotEquals($contentFieldHtml1, $contentFieldHtml2);\n+\n+\n+            foreach ($stringChunk as $stringItem) {\n+                if (trim($stringItem) == '') {\n+                    continue;\n+                }\n+                $this->assertStringNotContainsString($stringItem, $findPage->content);\n+            }\n+\n+\n+\n+        }\n+    }\n+\n+\n+\n+    public function testSaveContentOnPageLiveEditFromOtherExamples()\n+    {\n+        $this->cleanupAndPrepare();\n+\n+\n+        $unique = uniqid('testSaveContentOnPageLiveEditFromOtherExamples');\n+        $newCleanMlPage = save_content([\n+            'subtype' => 'static',\n+            'content_type' => 'page',\n+            'layout_file' => 'clean.php',\n+            'title' => 'pagecontent-other-examples-save' . $unique,\n+            'preview_layout_file' => 'clean.php',\n+            'is_active' => 1,\n+        ]);\n+\n+        $findPage = Page::whereId($newCleanMlPage)->first();\n+\n+        $pageId = $findPage->id;\n+        $this->assertEquals($findPage->id, $newCleanMlPage);\n+\n+        $pageLink = content_link($pageId);\n+        $pageLink = '/' . str_replace(site_url(), '', $pageLink);\n+\n+        $_SERVER['PHP_SELF'] = '/index.php';\n+        $_SERVER['REQ`UEST_URI'] = $pageLink;\n+        $_SERVER['REDIRECT_URL'] = $pageLink;\n+        $_SERVER['HTTP_REFERER'] = content_link($pageId);\n+\n+        $zipname = __DIR__ . '/../../Helper/tests/misc/edit-fields-other-html.zip';\n+\n+\n+        $zip = new \\ZipArchive();\n+\n+        $htmls = [];\n+        if ($zip->open($zipname)) {\n+            for ($i = 0; $i < $zip->numFiles; $i++) {\n+                $fn = $zip->getNameIndex($i);\n+                $ext = get_file_extension($fn);\n+                if ($ext == 'html') {\n+                    $string = $zip->getFromName($fn);\n+                    if(trim($string) == ''){\n+                        continue;\n+                    }\n+                    $htmls[$fn] = $string;\n+                }\n+            }\n+        }\n+        $zip->close();\n+\n+\n+        $this->assertTrue(!empty($htmls));\n+\n+        foreach ($htmls as $k => $html) {\n+\n+            $contentFieldHtml = $html;\n+            $contentFieldHtml = self::fixLinksPrecentAttributes($contentFieldHtml);\n+\n+            $contentFieldHtmlTest1 = app()->parser->make_tags($contentFieldHtml);\n+            $this->assertEquals($contentFieldHtmlTest1, $contentFieldHtml);\n+\n+\n+            $xssClean = new XSSClean();\n+            $contentFieldHtmlTest1 = $xssClean->clean($contentFieldHtml);\n+            $this->assertEquals($contentFieldHtmlTest1, $contentFieldHtml);\n+\n+\n+        }\n+\n+        $htmlsChunks = array_chunk($htmls, 100);\n+\n+\n+\n+      foreach ($htmlsChunks as $k => $htmlChunk) {\n+\n+          $html = implode('--------chunk-------', $htmlChunk);\n+         $contentFieldHtml = $html;\n+\n+\n+           // $contentFieldHtml = str_replace('{SITE_URL}', site_url(), $contentFieldHtml);\n+            $fieldsData = [\n+                'field_data_0' => [\n+                    'attributes' => [\n+                        'class' => 'container edit',\n+                        'rel' => 'content',\n+                        'rel_id' => $findPage->id,\n+                        'field' => 'content',\n+                    ],\n+                    'html' => $contentFieldHtml\n+                ]\n+            ];\n+\n+            $contentFieldHtml = self::fixLinksPrecentAttributes($contentFieldHtml);\n+\n \n+            $encoded = base64_encode(json_encode($fieldsData));\n \n+            $response = $this->call(\n+                'POST',\n+                route('api.content.save_edit'),\n+                [\n+                    'data_base64' => $encoded,\n+                ],\n+                [],//params\n+                $_COOKIE,//cookie\n+                [],//files\n+                $_SERVER //server\n+            );\n+\n+\n+            $fieldSaved = $response->decodeResponseJson();\n+\n+\n+\n+            $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n+            $contentFieldHtml1 = trim($contentFieldHtml);\n+            $contentFieldHtml2 = trim($findPage->content);\n+\n+            $this->assertEquals($contentFieldHtml1, $contentFieldHtml2);\n+            $this->assertEquals($contentFieldHtml, $findPage->content);\n+\n+\n+       }\n+\n+\n+    }\n \n+\n+    private function cleanupAndPrepare(){\n+        $user = User::where('is_admin', '=', '1')->first();\n+        Auth::login($user);\n+        \\Config::set('microweber.disable_model_cache', 1);\n+\n+\n+        MultilanguageHelpers::setMultilanguageEnabled(0);\n+        Page::truncate();\n     }\n \n+    public static function fixLinksPrecentAttributes($text)\n+    {\n+        $text = str_ireplace('{SITE_URL}','___mw-site-url-temp-replace-on-clean___', $text);\n+        $pq = \\phpQuery::newDocument($text);\n+\n+        foreach($pq->find('a') as $stuffs)\n+        {\n+            $href = pq($stuffs)->attr('href');\n+            if($href){\n+            pq($stuffs)->attr('href', str_replace(' ', '%20', $href));\n+            }\n+        }\n+        $text = $pq->htmlOuter();\n+        $text = str_ireplace('___mw-site-url-temp-replace-on-clean___','{SITE_URL}',     $text);\n+        return $text;\n+\n+    }\n+\n+\n }"
        },
        {
          "filename": "src/MicroweberPackages/Database/DatabaseManager.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -618,7 +618,6 @@ public function save($table, $data = false, $data_to_save_options = false)\n \n         $criteria_orig = $data;\n         $criteria = $this->map_array_to_table($table, $data);\n-\n         if ($allow_html == false) {\n             $criteria = $this->app->format->clean_html($criteria);\n         } else {"
        },
        {
          "filename": "src/MicroweberPackages/Database/Utils.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -606,7 +606,7 @@ public function clean_input($input)\n             $search = array(\n                 '@<script[^>]*?>.*?</script>@si', // Strip out javascript\n \n-                '@<![\\s\\S]*?--[ \\t\\n\\r]*>@', // Strip multi-line comments\n+          //      '@<![\\s\\S]*?--[ \\t\\n\\r]*>@', // Strip multi-line comments\n             );\n             if (is_string($input)) {\n                 $output = preg_replace($search, '', $input);"
        },
        {
          "filename": "src/MicroweberPackages/Helper/Format.php",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -630,6 +630,7 @@ public function clean_html($var, $do_not_strip_tags = false)\n \n     public function strip_unsafe($string, $img = false)\n     {\n+\n         if (is_array($string)) {\n             foreach ($string as $key => $val) {\n                 $string[$key] = $this->strip_unsafe($val, $img);\n@@ -641,10 +642,10 @@ public function strip_unsafe($string, $img = false)\n             // Unsafe HTML tags that members may abuse\n             $unsafe = array(\n                 '/<iframe(.*?)<\\/iframe>/is',\n-                '/<title(.*?)<\\/title>/is',\n+               // '/<title(.*?)<\\/title>/is',\n                 //'/<pre(.*?)<\\/pre>/is',\n-                '/<audio(.*?)<\\/audio>/is',\n-                '/<video(.*?)<\\/video>/is',\n+              //  '/<audio(.*?)<\\/audio>/is',\n+             //   '/<video(.*?)<\\/video>/is',\n                 '/<frame(.*?)<\\/frame>/is',\n                 '/<frameset(.*?)<\\/frameset>/is',\n                 '/<object(.*?)<\\/object>/is',\n@@ -657,7 +658,7 @@ public function strip_unsafe($string, $img = false)\n                 '/<style(.*?)<\\/style>/is',\n                 '/<body(.*?)>/is',\n                 '/<\\/body>/is',\n-                '/<head(.*?)>/is',\n+               // '/<head(.*?)>/is',\n                 '/<\\/head>/is',\n                 '/onload=\"(.*?)\"/is',\n                 '/onunload=\"(.*?)\"/is',"
        },
        {
          "filename": "src/MicroweberPackages/Helper/XSSClean.php",
          "status": "modified",
          "additions": 92,
          "deletions": 5,
          "patch": "@@ -34,6 +34,42 @@ public function clean($html)\n         if(is_array($html)){\n             return $this->cleanArray($html);\n         }\n+\n+\n+        $_preserve_replaced_tags = [];\n+        $html = str_ireplace('{SITE_URL}','___mw-site-url-temp-replace-on-clean___', $html);\n+//        $tags = [ 'textarea', 'pre','code', 'svg', 'kbd'];\n+//\n+//        foreach ($tags as $tag) {\n+//\n+//            //  $script_pattern = \"/<\".$tag.\"[^>]*>(.*)<\\/.$tag.>/Uis\";\n+//            $script_pattern = \"/\\<\" . $tag . \"(.*?)?\\>(.|\\s)*?\\<\\/\" . $tag . \"\\>/i\";\n+//\n+//            preg_match_all($script_pattern, $html, $mw_script_matches);\n+//\n+//            if (!empty($mw_script_matches)) {\n+//                foreach ($mw_script_matches [0] as $key => $value) {\n+//                    if ($value != '') {\n+//                        $v1 = crc32($value);\n+//                        $v1 = 'mw_xss_clean_repeserve_tags_tag_' . $tag . $v1 . '';\n+//                        $html = str_replace($value, $v1, $html);\n+//                        $_preserve_replaced_tags[$v1] = $value;\n+//\n+//                    }\n+//                }\n+//            }\n+//\n+//        }\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n          // from https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#ontransitionend\n         $cleanStrings = [\n             'ontransitionstart',\n@@ -154,23 +190,74 @@ public function clean($html)\n         $antiXss->addEvilAttributes($cleanStrings);\n         $antiXss->addNeverAllowedOnEventsAfterwards($cleanStrings);\n \n-        $allow_attibutes = [\n+        $allowAttibutes = [\n             'style',\n+\n+            'href',\n+            'alt',\n+            'target',\n+            'srcset',\n+            'sizes',\n+            'title',\n             'xlink:href',\n         ];\n-        $antiXss->removeEvilAttributes($allow_attibutes);\n+        $antiXss->removeEvilAttributes($allowAttibutes);\n \n-        $allow_tags = [\n+        $allowTags = [\n+            'head',\n+            'header',\n+            'main',\n+            'aside',\n             'img',\n+            'form',\n             'svg',\n+            'title',\n+            'input',\n+            'button',\n+            'select',\n+            'option',\n+            'textarea',\n+            'picture',\n+            'source',\n+         ];\n+\n+        $antiXss->removeEvilHtmlTags($allowTags);\n+        $allowRegex = [\n+//            '<!--(.*)-->' => '<!--(.*)-->',\n+//            '&lt;!--',\n+//            '&lt;!--$1--&gt;'\n+            '<!--(.*)-->' => '&lt;!--$1--&gt;',\n+            '&lt;!--', '&lt;!--$1--&gt;'\n         ];\n \n-        $antiXss->removeEvilHtmlTags($allow_tags);\n+\n+\n+        $antiXss->removeNeverAllowedRegex($allowRegex);\n+\n+        $allowNotClosed= [\n+            'li',\n+            'ul',\n+            'textarea',\n+        ];\n+        $antiXss->removeDoNotCloseHtmlTags($allowNotClosed);\n+\n \n         $html = $antiXss->xss_clean($html);\n+        $html_to_return = $html;\n+        if ($_preserve_replaced_tags) {\n+            foreach ($_preserve_replaced_tags as $key => $value) {\n+\n+                $html_to_return = str_replace($key, $value, $html_to_return);\n+            }\n+        }\n+\n+\n+        $html_to_return = str_ireplace('___mw-site-url-temp-replace-on-clean___','{SITE_URL}', $html_to_return);\n+\n+\n \n \n-        return $html;\n+        return $html_to_return;\n     }\n \n }"
        },
        {
          "filename": "src/MicroweberPackages/Helper/tests/misc/bootstrap-5.0.2-examples.zip",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "src/MicroweberPackages/Helper/tests/misc/edit-fields-other-html.zip",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d4e8c4a13967ac9856c3e1179d4185e59b8d9311",
            "date": "2024-11-26T15:08:46Z",
            "author_login": "peter-mw"
          },
          {
            "sha": "9a701a997a4041f040b00d989b19e446c34419e5",
            "date": "2024-06-26T12:33:18Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "5851e060318fb8065a478df6b63b335b1d3a52c2",
            "date": "2024-06-26T11:34:21Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "7c37d77e617d35cdefdcaf96c7a18a33a9758289",
            "date": "2024-06-26T11:14:53Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "eff6fadcadd749e8f4295bec99bf173d2401f3ac",
            "date": "2024-06-26T11:11:53Z",
            "author_login": "Radanovn"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - DOM in GitHub repository microweber/microweber prior to 1.3.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-01T06:15:09.360",
    "last_modified": "2024-11-21T07:37:28.713",
    "fix_date": "2022-11-29T12:22:23Z"
  },
  "references": [
    {
      "url": "https://github.com/microweber/microweber/commit/20df56615e61624f5fff149849753869e4b3b936",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/02a86e0d-dff7-4e27-89d5-2f7dcd4b580c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/microweber/microweber/commit/20df56615e61624f5fff149849753869e4b3b936",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/02a86e0d-dff7-4e27-89d5-2f7dcd4b580c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:03.962568",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "microweber",
    "owner": "microweber",
    "created_at": "2010-10-07T09:04:43Z",
    "updated_at": "2025-01-13T15:04:29Z",
    "pushed_at": "2025-01-14T13:26:48Z",
    "size": 1026007,
    "stars": 3170,
    "forks": 887,
    "open_issues": 360,
    "watchers": 3170,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "HTML": 12566636,
      "PHP": 11976208,
      "JavaScript": 8696748,
      "CSS": 3597687,
      "SCSS": 2178754,
      "Blade": 1663671,
      "Less": 518400,
      "Hack": 476030,
      "MDX": 387317,
      "Vue": 344860,
      "Ruby": 12504,
      "OCaml": 4815,
      "Dockerfile": 1548,
      "CoffeeScript": 950,
      "Batchfile": 61,
      "Shell": 59,
      "Sass": 1
    },
    "commit_activity": {
      "total_commits_last_year": 1332,
      "avg_commits_per_week": 25.615384615384617,
      "days_active_last_year": 106
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:59:40.368111"
  }
}