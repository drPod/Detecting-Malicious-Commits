{
  "cve_id": "CVE-2023-0610",
  "github_data": {
    "repository": "wallabag/wallabag",
    "fix_commit": "5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e",
    "related_commits": [
      "5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e",
      "5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e"
    ],
    "patch_url": "https://github.com/wallabag/wallabag/commit/5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e.patch",
    "fix_commit_details": {
      "sha": "5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e",
      "commit_date": "2023-02-01T08:32:22Z",
      "author": {
        "login": "j0k3r",
        "type": "User",
        "stats": {
          "total_commits": 3349,
          "average_weekly_commits": 5.436688311688312,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 378
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-mrqx-mjc4-vfh3",
        "length": 107,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 233,
        "additions": 172,
        "deletions": 61
      },
      "files": [
        {
          "filename": "src/Wallabag/AnnotationBundle/Controller/WallabagAnnotationController.php",
          "status": "modified",
          "additions": 47,
          "deletions": 26,
          "patch": "@@ -3,9 +3,9 @@\n namespace Wallabag\\AnnotationBundle\\Controller;\n \n use FOS\\RestBundle\\Controller\\FOSRestController;\n-use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\n use Symfony\\Component\\HttpFoundation\\JsonResponse;\n use Symfony\\Component\\HttpFoundation\\Request;\n+use Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n use Wallabag\\AnnotationBundle\\Entity\\Annotation;\n use Wallabag\\AnnotationBundle\\Form\\EditAnnotationType;\n use Wallabag\\AnnotationBundle\\Form\\NewAnnotationType;\n@@ -25,7 +25,7 @@ public function getAnnotationsAction(Entry $entry)\n         $annotationRows = $this\n             ->getDoctrine()\n             ->getRepository('WallabagAnnotationBundle:Annotation')\n-            ->findAnnotationsByPageId($entry->getId(), $this->getUser()->getId());\n+            ->findByEntryIdAndUserId($entry->getId(), $this->getUser()->getId());\n         $total = \\count($annotationRows);\n         $annotations = ['total' => $total, 'rows' => $annotationRows];\n \n@@ -72,50 +72,71 @@ public function postAnnotationAction(Request $request, Entry $entry)\n      *\n      * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n      *\n-     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n-     *\n      * @return JsonResponse\n      */\n-    public function putAnnotationAction(Annotation $annotation, Request $request)\n+    public function putAnnotationAction(Request $request, int $annotation)\n     {\n-        $data = json_decode($request->getContent(), true);\n+        try {\n+            $annotation = $this->validateAnnotation($annotation, $this->getUser()->getId());\n \n-        $form = $this->get('form.factory')->createNamed('', EditAnnotationType::class, $annotation, [\n-            'csrf_protection' => false,\n-            'allow_extra_fields' => true,\n-        ]);\n-        $form->submit($data);\n+            $data = json_decode($request->getContent(), true, 512, \\JSON_THROW_ON_ERROR);\n \n-        if ($form->isValid()) {\n-            $em = $this->getDoctrine()->getManager();\n-            $em->persist($annotation);\n-            $em->flush();\n+            $form = $this->get('form.factory')->createNamed('', EditAnnotationType::class, $annotation, [\n+                'csrf_protection' => false,\n+                'allow_extra_fields' => true,\n+            ]);\n+            $form->submit($data);\n \n-            $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n+            if ($form->isValid()) {\n+                $em = $this->getDoctrine()->getManager();\n+                $em->persist($annotation);\n+                $em->flush();\n \n-            return JsonResponse::fromJsonString($json);\n-        }\n+                $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n \n-        return $form;\n+                return JsonResponse::fromJsonString($json);\n+            }\n+\n+            return $form;\n+        } catch (\\InvalidArgumentException $e) {\n+            throw new NotFoundHttpException($e);\n+        }\n     }\n \n     /**\n      * Removes an annotation.\n      *\n      * @see Wallabag\\ApiBundle\\Controller\\WallabagRestController\n      *\n-     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n-     *\n      * @return JsonResponse\n      */\n-    public function deleteAnnotationAction(Annotation $annotation)\n+    public function deleteAnnotationAction(int $annotation)\n+    {\n+        try {\n+            $annotation = $this->validateAnnotation($annotation, $this->getUser()->getId());\n+\n+            $em = $this->getDoctrine()->getManager();\n+            $em->remove($annotation);\n+            $em->flush();\n+\n+            $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n+\n+            return (new JsonResponse())->setJson($json);\n+        } catch (\\InvalidArgumentException $e) {\n+            throw new NotFoundHttpException($e);\n+        }\n+    }\n+\n+    private function validateAnnotation(int $annotationId, int $userId)\n     {\n         $em = $this->getDoctrine()->getManager();\n-        $em->remove($annotation);\n-        $em->flush();\n \n-        $json = $this->get('jms_serializer')->serialize($annotation, 'json');\n+        $annotation = $em->getRepository('WallabagAnnotationBundle:Annotation')->findOneByIdAndUserId($annotationId, $userId);\n \n-        return (new JsonResponse())->setJson($json);\n+        if (null === $annotation) {\n+            throw new NotFoundHttpException();\n+        }\n+\n+        return $annotation;\n     }\n }"
        },
        {
          "filename": "src/Wallabag/AnnotationBundle/DataFixtures/AnnotationFixtures.php",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -34,6 +34,15 @@ public function load(ObjectManager $manager)\n \n         $this->addReference('annotation2', $annotation2);\n \n+        $annotation3 = new Annotation($this->getReference('bob-user'));\n+        $annotation3->setEntry($this->getReference('entry3'));\n+        $annotation3->setText('This is my first annotation !');\n+        $annotation3->setQuote('content');\n+\n+        $manager->persist($annotation3);\n+\n+        $this->addReference('annotation3', $annotation3);\n+\n         $manager->flush();\n     }\n "
        },
        {
          "filename": "src/Wallabag/AnnotationBundle/Repository/AnnotationRepository.php",
          "status": "modified",
          "additions": 20,
          "deletions": 2,
          "patch": "@@ -41,6 +41,24 @@ public function findAnnotationById($annotationId)\n         ;\n     }\n \n+    /**\n+     * Find annotation by id and user.\n+     *\n+     * @param int $annotationId\n+     * @param int $userId\n+     *\n+     * @return Annotation\n+     */\n+    public function findOneByIdAndUserId($annotationId, $userId)\n+    {\n+        return $this->createQueryBuilder('a')\n+                    ->where('a.id = :annotationId')->setParameter('annotationId', $annotationId)\n+                    ->andWhere('a.user = :userId')->setParameter('userId', $userId)\n+                    ->setMaxResults(1)\n+                    ->getQuery()\n+                    ->getOneOrNullResult();\n+    }\n+\n     /**\n      * Find annotations for entry id.\n      *\n@@ -49,7 +67,7 @@ public function findAnnotationById($annotationId)\n      *\n      * @return array\n      */\n-    public function findAnnotationsByPageId($entryId, $userId)\n+    public function findByEntryIdAndUserId($entryId, $userId)\n     {\n         return $this->createQueryBuilder('a')\n             ->where('a.entry = :entryId')->setParameter('entryId', $entryId)\n@@ -66,7 +84,7 @@ public function findAnnotationsByPageId($entryId, $userId)\n      *\n      * @return array\n      */\n-    public function findLastAnnotationByPageId($entryId, $userId)\n+    public function findLastAnnotationByUserId($entryId, $userId)\n     {\n         return $this->createQueryBuilder('a')\n             ->where('a.entry = :entryId')->setParameter('entryId', $entryId)"
        },
        {
          "filename": "src/Wallabag/ApiBundle/Controller/AnnotationRestController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 7,
          "patch": "@@ -3,7 +3,6 @@\n namespace Wallabag\\ApiBundle\\Controller;\n \n use Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\n-use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter;\n use Symfony\\Component\\HttpFoundation\\JsonResponse;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Wallabag\\AnnotationBundle\\Entity\\Annotation;\n@@ -63,11 +62,9 @@ public function postAnnotationAction(Request $request, Entry $entry)\n      *      }\n      * )\n      *\n-     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n-     *\n      * @return JsonResponse\n      */\n-    public function putAnnotationAction(Annotation $annotation, Request $request)\n+    public function putAnnotationAction(int $annotation, Request $request)\n     {\n         $this->validateAuthentication();\n \n@@ -86,11 +83,9 @@ public function putAnnotationAction(Annotation $annotation, Request $request)\n      *      }\n      * )\n      *\n-     * @ParamConverter(\"annotation\", class=\"WallabagAnnotationBundle:Annotation\")\n-     *\n      * @return JsonResponse\n      */\n-    public function deleteAnnotationAction(Annotation $annotation)\n+    public function deleteAnnotationAction(int $annotation)\n     {\n         $this->validateAuthentication();\n "
        },
        {
          "filename": "tests/Wallabag/AnnotationBundle/Controller/AnnotationControllerTest.php",
          "status": "modified",
          "additions": 91,
          "deletions": 23,
          "patch": "@@ -22,8 +22,6 @@ public function dataForEachAnnotations()\n     }\n \n     /**\n-     * Test fetching annotations for an entry.\n-     *\n      * @dataProvider dataForEachAnnotations\n      */\n     public function testGetAnnotations($prefixUrl)\n@@ -35,15 +33,7 @@ public function testGetAnnotations($prefixUrl)\n             ->findOneByUserName('admin');\n         $entry = $em\n             ->getRepository('WallabagCoreBundle:Entry')\n-            ->findOneByUsernameAndNotArchived('admin');\n-\n-        $annotation = new Annotation($user);\n-        $annotation->setEntry($entry);\n-        $annotation->setText('This is my annotation /o/');\n-        $annotation->setQuote('content');\n-\n-        $em->persist($annotation);\n-        $em->flush();\n+            ->findByUrlAndUserId('http://0.0.0.0/entry1', $user->getId());\n \n         if ('annotations' === $prefixUrl) {\n             $this->logInAs('admin');\n@@ -54,23 +44,44 @@ public function testGetAnnotations($prefixUrl)\n \n         $content = json_decode($this->client->getResponse()->getContent(), true);\n         $this->assertGreaterThanOrEqual(1, $content['total']);\n-        $this->assertSame($annotation->getText(), $content['rows'][0]['text']);\n+    }\n \n-        // we need to re-fetch the annotation becase after the flush, it has been \"detached\" from the entity manager\n-        $annotation = $em->getRepository('WallabagAnnotationBundle:Annotation')->findAnnotationById($annotation->getId());\n-        $em->remove($annotation);\n-        $em->flush();\n+    /**\n+     * @dataProvider dataForEachAnnotations\n+     */\n+    public function testGetAnnotationsFromAnOtherUser($prefixUrl)\n+    {\n+        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n+\n+        $otherUser = $em\n+            ->getRepository('WallabagUserBundle:User')\n+            ->findOneByUserName('bob');\n+        $entry = $em\n+            ->getRepository('WallabagCoreBundle:Entry')\n+            ->findByUrlAndUserId('http://0.0.0.0/entry3', $otherUser->getId());\n+\n+        if ('annotations' === $prefixUrl) {\n+            $this->logInAs('admin');\n+        }\n+\n+        $this->client->request('GET', $prefixUrl . '/' . $entry->getId() . '.json');\n+        $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n+\n+        $content = json_decode($this->client->getResponse()->getContent(), true);\n+        $this->assertGreaterThanOrEqual(0, $content['total']);\n     }\n \n     /**\n-     * Test creating an annotation for an entry.\n-     *\n      * @dataProvider dataForEachAnnotations\n      */\n     public function testSetAnnotation($prefixUrl)\n     {\n         $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n \n+        $user = $em\n+            ->getRepository('WallabagUserBundle:User')\n+            ->findOneByUserName('admin');\n+\n         if ('annotations' === $prefixUrl) {\n             $this->logInAs('admin');\n         }\n@@ -102,7 +113,7 @@ public function testSetAnnotation($prefixUrl)\n         /** @var Annotation $annotation */\n         $annotation = $em\n             ->getRepository('WallabagAnnotationBundle:Annotation')\n-            ->findLastAnnotationByPageId($entry->getId(), 1);\n+            ->findLastAnnotationByUserId($entry->getId(), $user->getId());\n \n         $this->assertSame('my annotation', $annotation->getText());\n     }\n@@ -195,8 +206,6 @@ public function testSetAnnotationWithQuoteTooLong($prefixUrl)\n     }\n \n     /**\n-     * Test editing an existing annotation.\n-     *\n      * @dataProvider dataForEachAnnotations\n      */\n     public function testEditAnnotation($prefixUrl)\n@@ -243,8 +252,31 @@ public function testEditAnnotation($prefixUrl)\n     }\n \n     /**\n-     * Test deleting an annotation.\n-     *\n+     * @dataProvider dataForEachAnnotations\n+     */\n+    public function testEditAnnotationFromAnOtherUser($prefixUrl)\n+    {\n+        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n+\n+        $otherUser = $em\n+            ->getRepository('WallabagUserBundle:User')\n+            ->findOneByUserName('bob');\n+        $entry = $em\n+            ->getRepository('WallabagCoreBundle:Entry')\n+            ->findByUrlAndUserId('http://0.0.0.0/entry3', $otherUser->getId());\n+        $annotation = $em\n+            ->getRepository('WallabagAnnotationBundle:Annotation')\n+            ->findLastAnnotationByUserId($entry->getId(), $otherUser->getId());\n+\n+        $headers = ['CONTENT_TYPE' => 'application/json'];\n+        $content = json_encode([\n+            'text' => 'a modified annotation',\n+        ]);\n+        $this->client->request('PUT', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n+        $this->assertSame(404, $this->client->getResponse()->getStatusCode());\n+    }\n+\n+    /**\n      * @dataProvider dataForEachAnnotations\n      */\n     public function testDeleteAnnotation($prefixUrl)\n@@ -287,4 +319,40 @@ public function testDeleteAnnotation($prefixUrl)\n \n         $this->assertNull($annotationDeleted);\n     }\n+\n+    /**\n+     * @dataProvider dataForEachAnnotations\n+     */\n+    public function testDeleteAnnotationFromAnOtherUser($prefixUrl)\n+    {\n+        $em = $this->client->getContainer()->get('doctrine.orm.entity_manager');\n+\n+        $otherUser = $em\n+            ->getRepository('WallabagUserBundle:User')\n+            ->findOneByUserName('bob');\n+        $entry = $em\n+            ->getRepository('WallabagCoreBundle:Entry')\n+            ->findByUrlAndUserId('http://0.0.0.0/entry3', $otherUser->getId());\n+        $annotation = $em\n+            ->getRepository('WallabagAnnotationBundle:Annotation')\n+            ->findLastAnnotationByUserId($entry->getId(), $otherUser->getId());\n+\n+        $user = $em\n+            ->getRepository('WallabagUserBundle:User')\n+            ->findOneByUserName('admin');\n+        $entry = $em\n+            ->getRepository('WallabagCoreBundle:Entry')\n+            ->findOneByUsernameAndNotArchived('admin');\n+\n+        if ('annotations' === $prefixUrl) {\n+            $this->logInAs('admin');\n+        }\n+\n+        $headers = ['CONTENT_TYPE' => 'application/json'];\n+        $content = json_encode([\n+            'text' => 'a modified annotation',\n+        ]);\n+        $this->client->request('DELETE', $prefixUrl . '/' . $annotation->getId() . '.json', [], [], $headers, $content);\n+        $this->assertSame(404, $this->client->getResponse()->getStatusCode());\n+    }\n }"
        },
        {
          "filename": "tests/Wallabag/CoreBundle/Controller/ConfigControllerTest.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -932,7 +932,7 @@ public function testReset()\n \n         $annotationsReset = $em\n             ->getRepository('WallabagAnnotationBundle:Annotation')\n-            ->findAnnotationsByPageId($entry->getId(), $user->getId());\n+            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n \n         $this->assertEmpty($annotationsReset, 'Annotations were reset');\n \n@@ -1040,7 +1040,7 @@ public function testResetArchivedEntries()\n \n         $annotationsReset = $em\n             ->getRepository('WallabagAnnotationBundle:Annotation')\n-            ->findAnnotationsByPageId($annotationArchived->getId(), $user->getId());\n+            ->findByEntryIdAndUserId($annotationArchived->getId(), $user->getId());\n \n         $this->assertEmpty($annotationsReset, 'Annotations were reset');\n     }\n@@ -1097,7 +1097,7 @@ public function testResetEntriesCascade()\n \n         $annotationsReset = $em\n             ->getRepository('WallabagAnnotationBundle:Annotation')\n-            ->findAnnotationsByPageId($entry->getId(), $user->getId());\n+            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n \n         $this->assertEmpty($annotationsReset, 'Annotations were reset');\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "63d6647d164f418c2dc2572707380a9e3da84aad",
            "date": "2025-01-14T05:41:36Z",
            "author_login": "j0k3r"
          },
          {
            "sha": "1da052b5286e379b60d3f4c248b1be993af2fe1a",
            "date": "2025-01-14T05:41:13Z",
            "author_login": "j0k3r"
          },
          {
            "sha": "6c70a12fd4cb6b2980c6b1cf69eedb96b9cf8f6a",
            "date": "2025-01-14T03:07:57Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "4d3bce3aca068e440b11477efc27b7846383076f",
            "date": "2025-01-14T03:07:19Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "34e79483780fea0232ab69d91096ee84630caf13",
            "date": "2025-01-13T04:54:12Z",
            "author_login": "j0k3r"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-285",
    "description": "Improper Authorization in GitHub repository wallabag/wallabag prior to 2.5.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-01T12:15:09.257",
    "last_modified": "2024-11-21T07:37:28.913",
    "fix_date": "2023-02-01T08:32:22Z"
  },
  "references": [
    {
      "url": "https://github.com/wallabag/wallabag/commit/5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8fdd9b31-d89b-4bbe-9557-20b960faf926",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wallabag/wallabag/commit/5ac6b6bff9e2e3a87fd88c2904ff3c6aac40722e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8fdd9b31-d89b-4bbe-9557-20b960faf926",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:03.963209",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wallabag",
    "owner": "wallabag",
    "created_at": "2013-04-03T12:21:14Z",
    "updated_at": "2025-01-14T07:24:12Z",
    "pushed_at": "2025-01-14T05:41:37Z",
    "size": 132325,
    "stars": 10808,
    "forks": 784,
    "open_issues": 663,
    "watchers": 10808,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.6",
      "master"
    ],
    "languages": {
      "PHP": 1560787,
      "Twig": 233625,
      "SCSS": 34476,
      "JavaScript": 31079,
      "Shell": 4565,
      "Dockerfile": 3360,
      "Makefile": 1807
    },
    "commit_activity": {
      "total_commits_last_year": 1006,
      "avg_commits_per_week": 19.346153846153847,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:07:34.527195"
  }
}