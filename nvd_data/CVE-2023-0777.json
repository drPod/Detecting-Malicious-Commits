{
  "cve_id": "CVE-2023-0777",
  "github_data": {
    "repository": "modoboa/modoboa",
    "fix_commit": "47d17ac6643f870719691073956a26e4be0a4806",
    "related_commits": [
      "47d17ac6643f870719691073956a26e4be0a4806",
      "47d17ac6643f870719691073956a26e4be0a4806"
    ],
    "patch_url": "https://github.com/modoboa/modoboa/commit/47d17ac6643f870719691073956a26e4be0a4806.patch",
    "fix_commit_details": {
      "sha": "47d17ac6643f870719691073956a26e4be0a4806",
      "commit_date": "2023-02-10T17:51:30Z",
      "author": {
        "login": "tonioo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #2767 from modoboa/api-throttling",
        "length": 87,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 253,
        "additions": 228,
        "deletions": 25
      },
      "files": [
        {
          "filename": "doc/upgrade.rst",
          "status": "modified",
          "additions": 32,
          "deletions": 1,
          "patch": "@@ -123,6 +123,7 @@ The following modifications must be applied to the :file:`settings.py` file:\n        },\n    ]\n \n+\n * Add the following variable::\n \n .. sourcecode:: python\n@@ -141,10 +142,40 @@ The following modifications must be applied to the :file:`settings.py` file:\n    },\n \n \n-You now have the possibility to customize the url of the new-admin\n+* You now have the possibility to customize the url of the new-admin\n interface.  To do so please head up to :ref:`the custom configuration\n chapter <customization>` (advanced user).\n \n+* Add ``DEFAULT_THROTTLE_RATES`` to ``REST_FRAMEWORK``:\n+\n+.. sourcecode:: python\n+\n+   REST_FRAMEWORK = {\n+      'DEFAULT_THROTTLE_RATES': {\n+         'user': '300/minute',\n+         'ddos': '5/second',\n+         'ddos_lesser': '200/minute',\n+         'login': '10/minute',\n+         'password_recovery_request': '12/hour',\n+         'password_recovery_totp_check': '25/hour',\n+         'password_recovery_apply': '25/hour'\n+      },\n+      'DEFAULT_AUTHENTICATION_CLASSES': (\n+         'modoboa.core.drf_authentication.JWTAuthenticationWith2FA',\n+         'rest_framework.authentication.TokenAuthentication',\n+         'rest_framework.authentication.SessionAuthentication',\n+      ),\n+      'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n+      'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n+   }\n+\n+* You can edit the ``DEFAULT_THROTTLE_RATES`` to whatever value suits you.\n+   - `user` is for every endpoint, it is per user or per ip if not logged.\n+   - `ddos` is per api endpoint and per user or per ip if not logged. \n+   - `ddos_lesser` is for per api endpoint and per user or per ip if not logged. This is for api endpoint that are lighter.\n+   - `login` the number of time an ip can attempt to log. The counter will reset on login success.\n+   - `password_` is for the recovery, it is divided per step in the recovery process.\n+\n \n 2.0.3\n ====="
        },
        {
          "filename": "frontend/src/App.vue",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -60,9 +60,11 @@ export default {\n   }),\n   methods: {\n     showNotification (options) {\n-      this.notification = options.msg\n-      this.notificationColor = (options.type) ? options.type : 'success'\n-      this.snackbar = true\n+      if (this.isAuthenticated) {\n+        this.notification = options.msg\n+        this.notificationColor = (options.type) ? options.type : 'success'\n+        this.snackbar = true\n+      }\n     }\n   }\n }"
        },
        {
          "filename": "frontend/src/api/repository.js",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -3,8 +3,11 @@ import Cookies from 'js-cookie'\n \n import router from '../router'\n import store from '../store'\n+import { translate } from 'vue-gettext'\n+import { bus } from '@/main'\n \n const _axios = axios.create()\n+const { gettext: $gettext } = translate\n \n _axios.interceptors.request.use(\n   function (config) {\n@@ -31,6 +34,10 @@ _axios.interceptors.response.use(\n       router.push({ name: 'TwoFA' })\n       return Promise.reject(error)\n     }\n+    if (error.response.status === 429) {\n+      bus.$emit('notification', { msg: $gettext('You are throttled, please try later.'), type: 'error' })\n+      return Promise.reject(error)\n+    }\n     if (error.response.status !== 401 || router.currentRoute.path === '/login/') {\n       return Promise.reject(error)\n     }"
        },
        {
          "filename": "frontend/src/views/Login.vue",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -94,6 +94,10 @@ export default {\n           this.$refs.observer.setErrors({\n             password: this.$gettext('Invalid username and/or password')\n           })\n+        } else if (err.response.status === 429) {\n+          this.$refs.observer.setErrors({\n+            password: this.$gettext('Too many unsuccessful attempts, please try later.')\n+          })\n         }\n       })\n     }"
        },
        {
          "filename": "frontend/src/views/user/PasswordRecoveryChangeForm.vue",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -81,7 +81,6 @@ export default {\n       } else {\n         const decodedId = atob(this.$route.params.id)\n         if (!/^\\d+$/.test(decodedId)) {\n-          console.error('Received ID is invalid')\n           this.$router.push({ name: 'PasswordRecoveryForm' })\n         } else {\n           this.id = this.$route.params.id\n@@ -119,6 +118,8 @@ export default {\n           err.response.data.errors.forEach(element => {\n             message += this.$gettext(element) + '<br>'\n           })\n+        } else if (err.response.status === 429) {\n+          message = this.$gettext('Too many unsuccessful attempts, please try later.')\n         }\n         this.password_validation_error = message\n       })"
        },
        {
          "filename": "frontend/src/views/user/PasswordRecoveryForm.vue",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -110,6 +110,10 @@ export default {\n           }\n         } else if (err.response.status === 503 && err.response.data.type === 'email') {\n           this.showDialog('Error', err.response.data.reason, true)\n+        } else if (err.response.status === 429) {\n+          this.$refs.observer.setErrors({\n+            email: this.$gettext('Too many unsuccessful attempts, please try later.')\n+          })\n         }\n       })\n     }"
        },
        {
          "filename": "frontend/src/views/user/PasswordRecoverySmsTotpForm.vue",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -82,13 +82,17 @@ export default {\n         this.loading = false\n         if (resp.status === 200) {\n           this.$refs.observer.setErrors({\n-            password_confirmed: this.$gettext('TOTP resent.')\n+            sms_totp: this.$gettext('TOTP resent.')\n           })\n         }\n       }).catch(err => {\n         if (err.response.status === 400) {\n           this.loading = false\n           this.showErrorDialog(this.$t('User seems wrong, return to login or restart reset the process?'))\n+        } else if (err.response.status === 429) {\n+          this.$refs.observer.setErrors({\n+            sms_totp: this.$gettext('Too many unsuccessful attempts, please try later.')\n+          })\n         }\n       })\n     },"
        },
        {
          "filename": "modoboa/admin/api/v1/viewsets.py",
          "status": "modified",
          "additions": 14,
          "deletions": 5,
          "patch": "@@ -16,6 +16,7 @@\n from modoboa.core import sms_backends\n from modoboa.lib import renderers as lib_renderers\n from modoboa.lib import viewsets as lib_viewsets\n+from modoboa.lib.throttle import GetThrottleViewsetMixin, PasswordResetRequestThrottle\n \n from ... import lib, models\n from . import serializers\n@@ -35,7 +36,7 @@\n         summary=\"Create a new domain\"\n     )\n )\n-class DomainViewSet(lib_viewsets.RevisionModelMixin, viewsets.ModelViewSet):\n+class DomainViewSet(GetThrottleViewsetMixin, lib_viewsets.RevisionModelMixin, viewsets.ModelViewSet):\n     \"\"\"Domain viewset.\"\"\"\n \n     permission_classes = [IsAuthenticated, DjangoModelPermissions, ]\n@@ -60,7 +61,7 @@ class Meta:\n         fields = [\"domain\"]\n \n \n-class DomainAliasViewSet(lib_viewsets.RevisionModelMixin,\n+class DomainAliasViewSet(GetThrottleViewsetMixin, lib_viewsets.RevisionModelMixin,\n                          viewsets.ModelViewSet):\n     \"\"\"ViewSet for DomainAlias.\"\"\"\n \n@@ -80,13 +81,21 @@ def get_renderer_context(self):\n         return context\n \n \n-class AccountViewSet(lib_viewsets.RevisionModelMixin, viewsets.ModelViewSet):\n+class AccountViewSet(GetThrottleViewsetMixin, lib_viewsets.RevisionModelMixin, viewsets.ModelViewSet):\n     \"\"\"ViewSet for User/Mailbox.\"\"\"\n \n     filter_backends = (filters.SearchFilter, )\n     permission_classes = [IsAuthenticated, DjangoModelPermissions, ]\n     search_fields = (\"^first_name\", \"^last_name\", \"^email\")\n \n+    def get_throttles(self):\n+\n+        throttles = super().get_throttles()\n+        if self.action == \"reset_password\":\n+            throttles.append(PasswordResetRequestThrottle())\n+        \n+        return throttles\n+\n     def get_serializer_class(self):\n         \"\"\"Return a serializer.\"\"\"\n         action_dict = {\n@@ -175,7 +184,7 @@ def reset_password(self, request):\n         return Response(body)\n \n \n-class AliasViewSet(lib_viewsets.RevisionModelMixin, viewsets.ModelViewSet):\n+class AliasViewSet(GetThrottleViewsetMixin, lib_viewsets.RevisionModelMixin, viewsets.ModelViewSet):\n     \"\"\"\n     create:\n     Create a new alias instance.\n@@ -207,7 +216,7 @@ class Meta:\n         fields = [\"mailbox\"]\n \n \n-class SenderAddressViewSet(lib_viewsets.RevisionModelMixin,\n+class SenderAddressViewSet(GetThrottleViewsetMixin, lib_viewsets.RevisionModelMixin,\n                            viewsets.ModelViewSet):\n     \"\"\"View set for SenderAddress model.\"\"\"\n "
        },
        {
          "filename": "modoboa/admin/api/v2/tests.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -224,6 +224,7 @@ def test_create_with_bad_password(self):\n         self.assertIn(\"password\", resp.json())\n \n     def test_validate(self):\n+        \"\"\"Test validate and throttling.\"\"\"\n         data = {\"username\": \"toto@test.com\"}\n         url = reverse(\"v2:account-validate\")\n         resp = self.client.post(url, data, format=\"json\")"
        },
        {
          "filename": "modoboa/admin/api/v2/viewsets.py",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -16,6 +16,7 @@\n from modoboa.core import models as core_models\n from modoboa.lib import renderers as lib_renderers\n from modoboa.lib import viewsets as lib_viewsets\n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n \n from ... import lib\n from ... import models\n@@ -40,7 +41,7 @@\n         summary=\"Delete a particular domain\"\n     ),\n )\n-class DomainViewSet(lib_viewsets.RevisionModelMixin,\n+class DomainViewSet(GetThrottleViewsetMixin, lib_viewsets.RevisionModelMixin,\n                     mixins.ListModelMixin,\n                     mixins.RetrieveModelMixin,\n                     mixins.CreateModelMixin,\n@@ -160,6 +161,7 @@ class AccountViewSet(v1_viewsets.AccountViewSet):\n     filter_backends = (filters.SearchFilter, dj_filters.DjangoFilterBackend)\n     filterset_class = AccountFilterSet\n \n+\n     def get_serializer_class(self):\n         if self.action in [\"create\", \"validate\", \"update\", \"partial_update\"]:\n             return serializers.WritableAccountSerializer\n@@ -208,7 +210,7 @@ def delete(self, request, **kwargs):\n         return response.Response(status=status.HTTP_204_NO_CONTENT)\n \n \n-class IdentityViewSet(viewsets.ViewSet):\n+class IdentityViewSet(GetThrottleViewsetMixin, viewsets.ViewSet):\n     \"\"\"Viewset for identities.\"\"\"\n \n     permission_classes = (permissions.IsAuthenticated, )\n@@ -270,7 +272,7 @@ def random_address(self, request, **kwargs):\n         })\n \n \n-class UserAccountViewSet(viewsets.ViewSet):\n+class UserAccountViewSet(GetThrottleViewsetMixin, viewsets.ViewSet):\n     \"\"\"Viewset for current user operations.\"\"\"\n \n     @action(methods=[\"get\", \"post\"], detail=False)\n@@ -323,7 +325,7 @@ def forward(self, request, **kwargs):\n         return response.Response(serializer.validated_data)\n \n \n-class AlarmViewSet(viewsets.ReadOnlyModelViewSet):\n+class AlarmViewSet(GetThrottleViewsetMixin, viewsets.ReadOnlyModelViewSet):\n     \"\"\"Viewset for Alarm.\"\"\"\n \n     filter_backends = (filters.OrderingFilter, filters.SearchFilter, )"
        },
        {
          "filename": "modoboa/core/api/v1/viewsets.py",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -5,14 +5,18 @@\n import django_otp\n from django_otp.plugins.otp_static.models import StaticDevice, StaticToken\n from django_otp.plugins.otp_totp.models import TOTPDevice\n+\n from rest_framework import permissions, response, viewsets\n from rest_framework.decorators import action\n+\n from drf_spectacular.utils import extend_schema\n \n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n+\n from . import serializers\n \n \n-class AccountViewSet(viewsets.ViewSet):\n+class AccountViewSet(GetThrottleViewsetMixin, viewsets.ViewSet):\n     \"\"\"Account viewset.\n \n     Contains endpoints used to manipulate current user's account."
        },
        {
          "filename": "modoboa/core/api/v2/views.py",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@\n \n from modoboa.core.password_hashers import get_password_hasher\n from modoboa.core.utils import check_for_updates\n+from modoboa.lib.throttle import UserLesserDdosUser, LoginThrottle, PasswordResetApplyThrottle, PasswordResetRequestThrottle, PasswordResetTotpThrottle\n from modoboa.parameters import tools as param_tools\n \n from smtplib import SMTPException\n@@ -25,9 +26,20 @@\n logger = logging.getLogger(\"modoboa.auth\")\n \n \n+def delete_cache_key(class_target, throttles, request):\n+    \"\"\"Attempt to delete cache key from throttling on login/password reset success.\"\"\"\n+    \n+    for throttle in throttles:\n+        if type(throttle) == class_target:\n+            throttle.reset_cache(request)\n+            return\n+\n+\n class TokenObtainPairView(jwt_views.TokenObtainPairView):\n     \"\"\"We overwrite this view to deal with password scheme update.\"\"\"\n \n+    throttle_classes = [LoginThrottle]\n+\n     def post(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)\n         try:\n@@ -42,6 +54,10 @@ def post(self, request, *args, **kwargs):\n \n         user = serializer.user\n         login(request, user)\n+\n+        # Reset login throttle\n+        delete_cache_key(LoginThrottle, self.get_throttles(), request)\n+\n         logger.info(\n             _(\"User '%s' successfully logged in\"), user.username\n         )\n@@ -85,6 +101,8 @@ class EmailPasswordResetView(APIView):\n     An Api View which provides a method to request a password reset token based on an e-mail address.\n     \"\"\"\n \n+    throttle_classes = [PasswordResetRequestThrottle]\n+\n     def post(self, request, *args, **kwargs):\n         serializer = serializers.PasswordRecoveryEmailSerializer(\n             data=request.data, context={'request': request})\n@@ -96,6 +114,7 @@ def post(self, request, *args, **kwargs):\n                 \"type\": \"email\",\n                 \"reason\": \"Error while sending the email. Please contact an administrator.\"\n             }, 503)\n+\n         # Email response\n         return response.Response({\"type\": \"email\"}, 200)\n \n@@ -114,13 +133,16 @@ def post(self, request, *args, **kwargs):\n             serializer.is_valid(raise_exception=True)\n         except serializers.NoSMSAvailable:\n             return super().post(request, *args, **kwargs)\n+        \n         # SMS response\n         return response.Response({\"type\": \"sms\"}, 200)\n \n \n class PasswordResetSmsTOTP(APIView):\n     \"\"\" Check SMS Totp code. \"\"\"\n \n+    throttle_classes = [PasswordResetTotpThrottle]\n+\n     def post(self, request, *args, **kwargs):\n         try:\n             if request.data[\"type\"] == \"confirm\":\n@@ -140,12 +162,15 @@ def post(self, request, *args, **kwargs):\n                 \"id\": serializer_response[1],\n                 \"type\": \"confirm\"\n             })\n+        delete_cache_key(PasswordResetTotpThrottle, self.get_throttles(), request)\n         return response.Response(payload, 200)\n \n \n class PasswordResetConfirmView(APIView):\n     \"\"\" Get and set new user password. \"\"\"\n \n+    throttle_classes = [PasswordResetApplyThrottle]\n+\n     def post(self, request, *args, **kwargs):\n         serializer = serializers.PasswordRecoveryConfirmSerializer(\n             data=request.data)\n@@ -159,12 +184,15 @@ def post(self, request, *args, **kwargs):\n             data.update({\"errors\": errors})\n             return response.Response(data, 400)\n         serializer.save()\n+        delete_cache_key(PasswordResetApplyThrottle, self.get_throttles(), request)\n         return response.Response(status=200)\n \n \n class ComponentsInformationAPIView(APIView):\n     \"\"\"Retrieve information about installed components.\"\"\"\n \n+    throttle_classes = [UserLesserDdosUser]\n+\n     @extend_schema(responses=serializers.ModoboaComponentSerializer(many=True))\n     def get(self, request, *args, **kwargs):\n         status, extensions = check_for_updates()"
        },
        {
          "filename": "modoboa/core/api/v2/viewsets.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -17,6 +17,7 @@\n from modoboa.core.api.v1 import serializers as core_v1_serializers\n from modoboa.core.api.v1 import viewsets as core_v1_viewsets\n from modoboa.lib import pagination\n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n \n from ... import constants\n from ... import models\n@@ -148,7 +149,7 @@ def tfa_setup_check(self, request):\n         })\n \n \n-class LogViewSet(viewsets.ReadOnlyModelViewSet):\n+class LogViewSet(GetThrottleViewsetMixin, viewsets.ReadOnlyModelViewSet):\n     \"\"\"Log viewset.\"\"\"\n \n     filter_backends = [filters.OrderingFilter, filters.SearchFilter]\n@@ -164,7 +165,7 @@ class LogViewSet(viewsets.ReadOnlyModelViewSet):\n     serializer_class = serializers.LogSerializer\n \n \n-class LanguageViewSet(viewsets.ViewSet):\n+class LanguageViewSet(GetThrottleViewsetMixin, viewsets.ViewSet):\n     \"\"\"Language viewset.\"\"\"\n \n     permission_classes = ("
        },
        {
          "filename": "modoboa/core/commands/templates/settings.py.tpl",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -193,6 +193,15 @@ MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n # Rest framework settings\n \n REST_FRAMEWORK = {\n+    'DEFAULT_THROTTLE_RATES': {\n+        'user': '300/minute',\n+        'ddos': '5/second',\n+        'ddos_lesser': '200/minute',\n+        'login': '10/minute',\n+        'password_recovery_request': '12/hour',\n+        'password_recovery_totp_check': '25/hour',\n+        'password_recovery_apply': '25/hour'\n+    },\n     'DEFAULT_AUTHENTICATION_CLASSES': (\n         'modoboa.core.drf_authentication.JWTAuthenticationWith2FA',\n         'rest_framework.authentication.TokenAuthentication',"
        },
        {
          "filename": "modoboa/dnstools/api/v2/viewsets.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4,11 +4,12 @@\n from rest_framework.decorators import action\n \n from modoboa.admin import models as admin_models\n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n \n from . import serializers\n \n \n-class DNSViewSet(viewsets.GenericViewSet):\n+class DNSViewSet(GetThrottleViewsetMixin, viewsets.GenericViewSet):\n     \"\"\"A viewset to provide extra routes related to DNS information.\"\"\"\n \n     permission_classes = (permissions.IsAuthenticated, )"
        },
        {
          "filename": "modoboa/lib/throttle.py",
          "status": "added",
          "additions": 79,
          "deletions": 0,
          "patch": "@@ -0,0 +1,79 @@\n+from rest_framework.throttling import SimpleRateThrottle, UserRateThrottle\n+from django.urls import resolve\n+\n+class UserDdosPerView(SimpleRateThrottle):\n+    \"\"\"Custom Throttle class for rest_framework. The throttling is applied on a per view basis for authentificated users.\"\"\"\n+\n+    scope = 'ddos'\n+\n+    def get_cache_key(self, request, view):\n+        if request.user and request.user.is_authenticated:\n+            ident = request.user.pk\n+        else:\n+            ident = self.get_ident(request)\n+        return self.cache_format % {\n+            'scope': hash(resolve(request.path).url_name),\n+            'ident': ident\n+        }\n+\n+\n+class UserLesserDdosUser(SimpleRateThrottle):\n+    \"\"\"Custom Throttle class for rest_framework. The throttling is applied on a per view basis for authentificated users.\"\"\"\n+\n+    scope = 'ddos_lesser'\n+\n+    def get_cache_key(self, request, view):\n+        if request.user and request.user.is_authenticated:\n+            ident = request.user.pk\n+        else:\n+            ident = self.get_ident(request)\n+        return self.cache_format % {\n+            'scope': hash(resolve(request.path).url_name),\n+            'ident': ident\n+        }\n+\n+\n+class LoginThrottle(SimpleRateThrottle):\n+    \"\"\" Custom throttle to reset the cache counter on success. \"\"\"\n+\n+    scope = 'login'\n+\n+    def get_cache_key(self, request, view):\n+            return self.cache_format % {\n+            'scope': self.scope,\n+            'ident': self.get_ident(request)\n+        }\n+\n+    def reset_cache(self, request):\n+        self.key = self.get_cache_key(request, None)\n+        self.cache.delete(self.key)\n+\n+\n+class PasswordResetRequestThrottle(LoginThrottle):\n+\n+    scope = 'password_recovery_request'\n+\n+\n+class PasswordResetTotpThrottle(LoginThrottle):\n+\n+    scope = 'password_recovery_totp_check'\n+\n+\n+class PasswordResetApplyThrottle(LoginThrottle):\n+\n+    scope = 'password_recovery_apply'\n+\n+\n+class GetThrottleViewsetMixin():\n+    \"\"\"Override default get_throttle behaviour to assign throttle classes to different actions.\"\"\"\n+\n+    def get_throttles(self):\n+        \"\"\"Give lesser_ddos to GET type actions and ddos to others.\"\"\"\n+\n+        throttles = [UserRateThrottle()]\n+    \n+        if self.action in [\"list\", \"retrieve\", \"validate\", \"dns_detail\", \"me\", \"dns_detail\", \"applications\", \"structure\"]:\n+            throttles.append(UserLesserDdosUser())\n+        else:\n+            throttles.append(UserDdosPerView())\n+        return throttles\n\\ No newline at end of file"
        },
        {
          "filename": "modoboa/limits/api/v1/viewsets.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -6,10 +6,11 @@\n from rest_framework.permissions import DjangoModelPermissions, IsAuthenticated\n \n from modoboa.core import models as core_models\n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n from . import serializers\n \n \n-class ResourcesViewSet(\n+class ResourcesViewSet(GetThrottleViewsetMixin,\n         mixins.RetrieveModelMixin,\n         mixins.UpdateModelMixin,\n         viewsets.GenericViewSet):"
        },
        {
          "filename": "modoboa/maillog/api/v2/viewsets.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -9,13 +9,14 @@\n \n from modoboa.admin import models as admin_models\n from modoboa.lib import pagination\n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n \n from ... import models\n from ... import signals\n from . import serializers\n \n \n-class StatisticsViewSet(viewsets.ViewSet):\n+class StatisticsViewSet(GetThrottleViewsetMixin,viewsets.ViewSet):\n     \"\"\"A viewset to provide extra route related to mail statistics.\"\"\"\n \n     permission_classes = (permissions.IsAuthenticated, )\n@@ -51,7 +52,7 @@ def list(self, request, **kwargs):\n         return response.Response({\"graphs\": graphs})\n \n \n-class MaillogViewSet(viewsets.ReadOnlyModelViewSet):\n+class MaillogViewSet(GetThrottleViewsetMixin, viewsets.ReadOnlyModelViewSet):\n     \"\"\"Simple viewset to access message log.\"\"\"\n \n     filter_backends = [filters.OrderingFilter, filters.SearchFilter]"
        },
        {
          "filename": "modoboa/parameters/api/v2/viewsets.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -4,11 +4,13 @@\n from rest_framework import response, viewsets\n from rest_framework.decorators import action\n \n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n+\n from . import serializers\n from ... import tools\n \n \n-class ParametersViewSet(viewsets.ViewSet):\n+class ParametersViewSet(GetThrottleViewsetMixin, viewsets.ViewSet):\n     \"\"\"Parameter viewset.\"\"\"\n \n     lookup_value_regex = r\"\\w+\""
        },
        {
          "filename": "modoboa/relaydomains/api/v1/viewsets.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4,11 +4,12 @@\n from rest_framework.permissions import DjangoModelPermissions, IsAuthenticated\n \n from modoboa.admin import models as admin_models\n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n from modoboa.lib.viewsets import RevisionModelMixin\n from . import serializers\n \n \n-class RelayDomainViewSet(RevisionModelMixin, viewsets.ModelViewSet):\n+class RelayDomainViewSet(GetThrottleViewsetMixin, RevisionModelMixin, viewsets.ModelViewSet):\n     \"\"\"RelayDomain viewset.\"\"\"\n \n     permission_classes = [IsAuthenticated, DjangoModelPermissions, ]"
        },
        {
          "filename": "modoboa/transport/api/v2/viewsets.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -3,11 +3,13 @@\n from drf_spectacular.utils import extend_schema\n from rest_framework import permissions, response, viewsets\n \n+from modoboa.lib.throttle import GetThrottleViewsetMixin\n+\n from . import serializers\n from ... import backends\n \n \n-class TransportViewSet(viewsets.ViewSet):\n+class TransportViewSet(GetThrottleViewsetMixin, viewsets.ViewSet):\n     \"\"\"Viewset for Transport.\"\"\"\n \n     permissions = (permissions.IsAuthenticated, )"
        },
        {
          "filename": "test_project/test_project/settings.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -186,6 +186,15 @@\n # Rest framework settings\n \n REST_FRAMEWORK = {\n+    'DEFAULT_THROTTLE_RATES': {\n+        'user': '200/minute',\n+        'ddos': '10/second',\n+        'ddos_lesser': '200/minute',\n+        'login': '10/minute',\n+        'password_recovery_request': '11/hour',\n+        'password_recovery_totp_check': '25/hour',\n+        'password_recovery_apply': '25/hour'\n+    },\n     'DEFAULT_AUTHENTICATION_CLASSES': (\n         'modoboa.core.drf_authentication.JWTAuthenticationWith2FA',\n         'rest_framework.authentication.TokenAuthentication',"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 18,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b23d454f8b75548979a779a3732799b02117bdbb",
            "date": "2025-01-13T13:17:03Z",
            "author_login": "tonioo"
          },
          {
            "sha": "ccad63fb0a843d77bf1ec5f2445b0a907e4abfd5",
            "date": "2025-01-13T13:12:10Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "8a24595a3e42ae0c319c33a26656ff05db1633d8",
            "date": "2025-01-13T11:30:04Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2cb6ccebfa0224ef8a3e392ac130e637edf9e4b3",
            "date": "2024-12-21T15:23:32Z",
            "author_login": "Spitfireap"
          },
          {
            "sha": "3c5d3218701d75f0c6ac15123648da52f4deecd5",
            "date": "2024-12-21T13:04:33Z",
            "author_login": "tonioo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-305",
    "description": "Authentication Bypass by Primary Weakness in GitHub repository modoboa/modoboa prior to 2.0.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-10T19:15:12.937",
    "last_modified": "2024-11-21T07:37:48.087",
    "fix_date": "2023-02-10T17:51:30Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/171744/modoboa-2.0.4-Admin-Takeover.html",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/modoboa/modoboa/commit/47d17ac6643f870719691073956a26e4be0a4806",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a17e7a9f-0fee-4130-a522-5a0466fc17c7",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/171744/modoboa-2.0.4-Admin-Takeover.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/modoboa/modoboa/commit/47d17ac6643f870719691073956a26e4be0a4806",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a17e7a9f-0fee-4130-a522-5a0466fc17c7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.014166",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "modoboa",
    "owner": "modoboa",
    "created_at": "2013-04-16T09:43:55Z",
    "updated_at": "2025-01-13T16:20:20Z",
    "pushed_at": "2025-01-14T12:36:53Z",
    "size": 33390,
    "stars": 3111,
    "forks": 406,
    "open_issues": 103,
    "watchers": 3111,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "1.7.x",
      "1.8.x",
      "master"
    ],
    "languages": {
      "Python": 1574593,
      "Vue": 277698,
      "JavaScript": 179636,
      "HTML": 107974,
      "Smarty": 12172,
      "CSS": 11929,
      "Shell": 1021,
      "SCSS": 271
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "isc"
    },
    "collected_at": "2025-01-14T14:23:52.368610"
  }
}