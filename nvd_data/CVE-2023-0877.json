{
  "cve_id": "CVE-2023-0877",
  "github_data": {
    "repository": "froxlor/froxlor",
    "fix_commit": "aa48ffca2bcaf7ae57be3b8147bb3138abdab984",
    "related_commits": [
      "aa48ffca2bcaf7ae57be3b8147bb3138abdab984",
      "aa48ffca2bcaf7ae57be3b8147bb3138abdab984"
    ],
    "patch_url": "https://github.com/froxlor/froxlor/commit/aa48ffca2bcaf7ae57be3b8147bb3138abdab984.patch",
    "fix_commit_details": {
      "sha": "aa48ffca2bcaf7ae57be3b8147bb3138abdab984",
      "commit_date": "2023-02-07T12:02:11Z",
      "author": {
        "login": "d00p",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "run Form::processForm() when importing settings so the same validations apply if the import file has malicious content",
        "length": 170,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 98,
        "additions": 38,
        "deletions": 60
      },
      "files": [
        {
          "filename": "lib/Froxlor/Froxlor.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -89,7 +89,7 @@ public static function getFullVersion(): string\n \t *\n \t * @return bool true if version to check does not match, else false\n \t */\n-\tpublic static function hasUpdates(string $to_check): bool\n+\tpublic static function hasUpdates(string $to_check = ''): bool\n \t{\n \t\tif (empty($to_check)) {\n \t\t\t$to_check = self::VERSION;\n@@ -109,7 +109,7 @@ public static function hasUpdates(string $to_check): bool\n \t *\n \t * @return bool true if version to check does not match, else false\n \t */\n-\tpublic static function hasDbUpdates(string $to_check): bool\n+\tpublic static function hasDbUpdates(string $to_check = ''): bool\n \t{\n \t\tif (empty($to_check)) {\n \t\t\t$to_check = self::DBVERSION;"
        },
        {
          "filename": "lib/Froxlor/SImExporter.php",
          "status": "modified",
          "additions": 29,
          "deletions": 57,
          "patch": "@@ -27,6 +27,7 @@\n \n use Exception;\n use Froxlor\\Database\\Database;\n+use Froxlor\\UI\\Form;\n use PDO;\n \n /**\n@@ -79,14 +80,16 @@ public static function export()\n \t\t\t\t$_data[$index] = $row['value'];\n \t\t\t}\n \n-\t\t\tif (array_key_exists($row['settinggroup'], $settings_definitions) && array_key_exists($row['varname'], $settings_definitions[$row['settinggroup']])) {\n+\t\t\tif (array_key_exists($row['settinggroup'], $settings_definitions) && array_key_exists($row['varname'],\n+\t\t\t\t\t$settings_definitions[$row['settinggroup']])) {\n \t\t\t\t// Export image file\n \t\t\t\tif ($settings_definitions[$row['settinggroup']][$row['varname']]['type'] === \"image\") {\n \t\t\t\t\tif ($row['value'] === \"\") {\n \t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n \n-\t\t\t\t\t$_data[$index . '.image_data'] = base64_encode(file_get_contents(explode('?', $row['value'], 2)[0]));\n+\t\t\t\t\t$_data[$index . '.image_data'] = base64_encode(file_get_contents(explode('?', $row['value'],\n+\t\t\t\t\t\t2)[0]));\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -140,66 +143,35 @@ public static function import($json_str = null)\n \t\t\t\t\t$_data['system.le_froxlor_redirect'] = 0;\n \t\t\t\t}\n \t\t\t}\n-\t\t\t// store new data\n-\t\t\tforeach ($_data as $index => $value) {\n-\t\t\t\t$index_split = explode('.', $index, 3);\n-\n-\t\t\t\t// Catch image_data and save it\n-\t\t\t\tif (isset($index_split[2]) && $index_split[2] === 'image_data' && !empty($_data[$index_split[0] . '.' . $index_split[1]])) {\n-\t\t\t\t\t$path = Froxlor::getInstallDir() . '/img/';\n-\t\t\t\t\tif (!is_dir($path) && !mkdir($path, 0775)) {\n-\t\t\t\t\t\tthrow new Exception(\"img directory does not exist and cannot be created\");\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Make sure we can write to the upload directory\n-\t\t\t\t\tif (!is_writable($path)) {\n-\t\t\t\t\t\tif (!chmod($path, 0775)) {\n-\t\t\t\t\t\t\tthrow new Exception(\"Cannot write to img directory\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t$img_data = base64_decode($value);\n-\t\t\t\t\t$img_filename = Froxlor::getInstallDir() . '/' . str_replace('../', '', explode('?', $_data[$index_split[0] . '.' . $index_split[1]], 2)[0]);\n \n-\t\t\t\t\tfile_put_contents($img_filename, $img_data);\n-\n-\t\t\t\t\tif (function_exists('finfo_open')) {\n-\t\t\t\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);\n-\t\t\t\t\t\t$mimetype = finfo_file($finfo, $img_filename);\n-\t\t\t\t\t\tfinfo_close($finfo);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t$mimetype = mime_content_type($img_filename);\n-\t\t\t\t\t}\n-\t\t\t\t\tif (empty($mimetype)) {\n-\t\t\t\t\t\t$mimetype = 'application/octet-stream';\n+\t\t\t$form_data = [];\n+\t\t\t// read in all current settings\n+\t\t\t$current_settings = Settings::getAll();\n+\t\t\tforeach ($current_settings as $setting_group => $setting) {\n+\t\t\t\tforeach ($setting as $varname => $value) {\n+\t\t\t\t\t// set all group/varname:values which are not in the import file\n+\t\t\t\t\tif (!isset($_data[$setting_group.'.'.$varname])) {\n+\t\t\t\t\t\t$_data[$setting_group.'.'.$varname] = $value;\n \t\t\t\t\t}\n-\t\t\t\t\tif (!in_array($mimetype, ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'])) {\n-\t\t\t\t\t\t@unlink($img_filename);\n-\t\t\t\t\t\tthrow new Exception(\"Uploaded file is not a valid image\");\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t$spl = explode('.', $img_filename);\n-\t\t\t\t\t$file_extension = strtolower(array_pop($spl));\n-\t\t\t\t\tunset($spl);\n-\n-\t\t\t\t\tif (!in_array($file_extension, [\n-\t\t\t\t\t\t'jpeg',\n-\t\t\t\t\t\t'jpg',\n-\t\t\t\t\t\t'png',\n-\t\t\t\t\t\t'gif'\n-\t\t\t\t\t])) {\n-\t\t\t\t\t\t@unlink($img_filename);\n-\t\t\t\t\t\tthrow new Exception(\"Invalid file-extension, use one of: jpeg, jpg, png, gif\");\n-\t\t\t\t\t}\n-\t\t\t\t\tcontinue;\n \t\t\t\t}\n+\t\t\t}\n+\t\t\t// re-format the array-key for Form::processForm\n+\t\t\tforeach ($_data as $key => $value) {\n+\t\t\t\t$form_data[str_replace(\".\", \"_\", $key)] = $value;\n+\t\t\t}\n \n-\t\t\t\tSettings::Set($index, $value);\n+\t\t\t// store new data\n+\t\t\t$settings_data = PhpHelper::loadConfigArrayDir(Froxlor::getInstallDir() . '/actions/admin/settings/');\n+\t\t\tSettings::loadSettingsInto($settings_data);\n+\n+\t\t\tif (Form::processForm($settings_data, $form_data, [], null, true)) {\n+\t\t\t\t// save to DB\n+\t\t\t\tSettings::Flush();\n+\t\t\t\t// all good\n+\t\t\t\treturn true;\n+\t\t\t} else {\n+\t\t\t\tthrow new Exception(\"Importing settings failed\");\n \t\t\t}\n-\t\t\t// save to DB\n-\t\t\tSettings::Flush();\n-\t\t\t// all good\n-\t\t\treturn true;\n \t\t}\n \t\tthrow new Exception(\"Invalid JSON data: \" . json_last_error_msg());\n \t}"
        },
        {
          "filename": "lib/Froxlor/Settings.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -329,6 +329,12 @@ public static function loadSettingsInto(&$settings_data)\n \t\t}\n \t}\n \n+\tpublic static function getAll() : array\n+\t{\n+\t\tself::init();\n+\t\treturn self::$data;\n+\t}\n+\n \t/**\n \t * get value from config by identifier\n \t */"
        },
        {
          "filename": "lib/Froxlor/UI/Form.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -203,7 +203,7 @@ public static function prefetchFormFieldData($fieldname, $fielddata)\n \t\treturn $returnvalue;\n \t}\n \n-\tpublic static function processForm(&$form, &$input, $url_params = [], $part = null, $settings_all = [], $settings_part = null, $only_enabledisable = false)\n+\tpublic static function processForm(&$form, &$input, $url_params = [], $part = null, bool $settings_all = false, $settings_part = null, bool $only_enabledisable = false)\n \t{\n \t\tif (\\Froxlor\\Validate\\Form::validateFormDefinition($form)) {\n \t\t\t$submitted_fields = [];"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ec42003367df64c5645a9d5ee5bcd95c75a82b6c",
            "date": "2025-01-12T15:53:05Z",
            "author_login": "d00p"
          },
          {
            "sha": "fde43f80600f1035e1e3d2297411b666d805549a",
            "date": "2025-01-12T09:27:44Z",
            "author_login": "d00p"
          },
          {
            "sha": "a43d53d54034805e3e404702a01312fa0c40b623",
            "date": "2025-01-12T09:27:02Z",
            "author_login": "d00p"
          },
          {
            "sha": "3638dc08ea4fe55ce0d2458cdcb436cfb5697ed3",
            "date": "2024-12-24T08:34:59Z",
            "author_login": "d00p"
          },
          {
            "sha": "c2d166c86666f4c50c1402c1b3a2986ddabeee90",
            "date": "2024-12-19T07:59:00Z",
            "author_login": "d00p"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "Code Injection in GitHub repository froxlor/froxlor prior to 2.0.11.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-17T01:15:10.663",
    "last_modified": "2024-11-21T07:38:01.290",
    "fix_date": "2023-02-07T12:02:11Z"
  },
  "references": [
    {
      "url": "https://github.com/froxlor/froxlor/commit/aa48ffca2bcaf7ae57be3b8147bb3138abdab984",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b29cf038-06f1-4fb0-9437-08f2991f92a8",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/froxlor/froxlor/commit/aa48ffca2bcaf7ae57be3b8147bb3138abdab984",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b29cf038-06f1-4fb0-9437-08f2991f92a8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.069478",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Froxlor",
    "owner": "froxlor",
    "created_at": "2012-03-06T15:14:46Z",
    "updated_at": "2025-01-12T15:57:15Z",
    "pushed_at": "2025-01-12T15:57:10Z",
    "size": 28867,
    "stars": 1651,
    "forks": 457,
    "open_issues": 35,
    "watchers": 1651,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "extras",
      "main"
    ],
    "languages": {
      "PHP": 3752037,
      "Twig": 153143,
      "HTML": 28494,
      "SCSS": 8015,
      "JavaScript": 942
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T14:34:15.893221"
  }
}