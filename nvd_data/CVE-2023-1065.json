{
  "cve_id": "CVE-2023-1065",
  "github_data": {
    "repository": "snyk/kubernetes-monitor",
    "fix_commit": "5b9a7821680bbfb6c4a900ab05d898ce2b2cc157",
    "related_commits": [
      "5b9a7821680bbfb6c4a900ab05d898ce2b2cc157",
      "5b9a7821680bbfb6c4a900ab05d898ce2b2cc157"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "5b9a7821680bbfb6c4a900ab05d898ce2b2cc157",
      "commit_date": "2023-01-26T11:50:39Z",
      "author": {
        "login": "minsiyang",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: call authenticated snyk API endpoints with token",
        "length": 151,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 144,
        "additions": 111,
        "deletions": 33
      },
      "files": [
        {
          "filename": ".circleci/config.yml",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -519,7 +519,8 @@ jobs:\n \n                     set -e\n                     INTEGRATION_ID=$(uuidgen)\n-                    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=dockercfg.json={}\n+                    SERVICE_ACCOUNT_API_TOKEN=$(uuidgen)\n+                    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SERVICE_ACCOUNT_API_TOKEN} --from-literal=dockercfg.json={}\n                 name: Configure snyk-monitor namespace\n             - run:\n                 command: |"
        },
        {
          "filename": ".circleci/config/jobs/operator_upgrade_tests.yml",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -120,7 +120,8 @@ steps:\n \n         set -e\n         INTEGRATION_ID=$(uuidgen)\n-        kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=dockercfg.json={}\n+        SERVICE_ACCOUNT_API_TOKEN=$(uuidgen)\n+        kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=integrationId=${INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SERVICE_ACCOUNT_API_TOKEN} --from-literal=dockercfg.json={}\n \n   - run:\n       name: Install Operator"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@ A containerized application that is deployed with Helm. Monitors the security of\n ## Prerequisites ##\n \n * 50 GiB of storage in the form of [emptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) or a [PersistentVolumeClaim](https://kubernetes.io/docs/concepts/storage/persistent-volumes/).\n-* External internet access from the Kubernetes cluster to `kubernetes-upstream.snyk.io`.\n+* External internet access from the Kubernetes cluster to `api.snyk.io`.\n * 1 CPU, 2 GiB RAM\n * 1 Kubernetes worker node of type `linux/amd64` - supported and tested only on the AMD64 CPU architecture\n "
        },
        {
          "filename": "config.default.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -19,7 +19,8 @@\n   \"REQUEST_QUEUE_LENGTH\": 2,\n   \"QUEUE_LENGTH_LOG_FREQUENCY_MINUTES\": 1,\n   \"INTEGRATION_ID\": \"\",\n-  \"DEFAULT_KUBERNETES_UPSTREAM_URL\": \"https://kubernetes-upstream.snyk.io\",\n+  \"SERVICE_ACCOUNT_API_TOKEN\": \"\",\n+  \"DEFAULT_KUBERNETES_UPSTREAM_URL\": \"https://api.snyk.io/v2/kubernetes-upstream\",\n   \"MAX_RETRY_BACKOFF_DURATION_SECONDS\": 300,\n   \"USE_KEEPALIVE\": true\n }"
        },
        {
          "filename": "scripts/circleci-jobs/deploy_to_dev.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -20,7 +20,7 @@ cp -r snyk-monitor/* $KUBERNETES_MONITOR_DEPLOYER_REPO/helm\n # Create helm values for different envs\n cat >$KUBERNETES_MONITOR_DEPLOYER_REPO/helm/values/multi-tenant-gcp-pre-production.yaml <<EOF\n clusterName: \"Development cluster\"\n-integrationApi: https://kubernetes-upstream.dev.snyk.io\n+integrationApi: \"https://api.dev.snyk.io/v2/kubernetes-upstream\"\n log_level: \"DEBUG\"\n skip_k8s_jobs: true\n "
        },
        {
          "filename": "scripts/local-testing.sh",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -15,10 +15,15 @@ if [ \"$INTEGRATION_ID\" == \"\" ]; then\n     read INTEGRATION_ID\n fi\n \n+if [ \"$SERVICE_ACCOUNT_API_TOKEN\" == \"\" ]; then\n+    echo \"Enter your service account API token: \"\n+    read SERVICE_ACCOUNT_API_TOKEN\n+fi\n+\n kind delete cluster\n kind create cluster\n kubectl create namespace snyk-monitor\n-kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${INTEGRATION_ID}\n+kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SERVICE_ACCOUNT_API_TOKEN}\n helm upgrade --install snyk-monitor ./snyk-monitor --namespace snyk-monitor --set clusterName=\"kind localhost\" --set image.tag=${LATEST_TAG} --set integrationApi=http://${IP}:9000\n \n printf \"\\r\\n\\r\\nYou can now check if the pod is running using:\\r\\n\\tkubectl get pod -n snyk-monitor\\r\\n\""
        },
        {
          "filename": "snyk-monitor-deployment.yaml",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -43,6 +43,11 @@ spec:\n               secretKeyRef:\n                 name: snyk-monitor\n                 key: integrationId\n+          - name: SNYK_SERVICE_ACCOUNT_API_TOKEN\n+            valueFrom:\n+              secretKeyRef:\n+                name: snyk-monitor\n+                key: serviceAccountApiToken\n           - name: SNYK_WATCH_NAMESPACE\n             valueFrom:\n               configMapKeyRef:"
        },
        {
          "filename": "snyk-operator-certified/README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -41,7 +41,7 @@ metadata:\n   name: snyk-monitor\n   namespace: snyk-monitor\n spec:\n-  integrationApi: https://kubernetes-upstream.dev.snyk.io\n+  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n   temporaryStorageSize: 20Gi\n   pvc:\n     enabled: true"
        },
        {
          "filename": "snyk-operator-certified/bundle/manifests/snyk-monitor.clusterserviceversion.yaml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -147,11 +147,11 @@ spec:\n \n     ## Prerequisites\n \n-    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId and Docker config file:\n+    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId, serviceAccountApiToken and Docker config file:\n \n     ```\n     kubectl create namespace snyk-monitor\n-    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID}\n+    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SNYK_SERVICE_ACCOUNT_API_TOKEN}\n     ```\n \n     Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details."
        },
        {
          "filename": "snyk-operator-certified/config/manifests/bases/snyk-monitor.clusterserviceversion.yaml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -129,11 +129,11 @@ spec:\n \n     ## Prerequisites\n \n-    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId and Docker config file:\n+    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId, serviceAccountApiToken and Docker config file:\n \n     ```\n     kubectl create namespace snyk-monitor\n-    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID}\n+    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SNYK_SERVICE_ACCOUNT_API_TOKEN}\n     ```\n \n     Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details."
        },
        {
          "filename": "snyk-operator-certified/helm-charts/snyk-monitor/templates/deployment.yaml",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -95,6 +95,11 @@ spec:\n               secretKeyRef:\n                 name: {{ .Values.monitorSecrets }}\n                 key: integrationId\n+          - name: SNYK_SERVICE_ACCOUNT_API_TOKEN\n+            valueFrom:\n+              secretKeyRef:\n+                name: snyk-monitor\n+                key: serviceAccountApiToken\n           - name: SNYK_WATCH_NAMESPACE\n             value: {{ include \"snyk-monitor.scope\" . }}\n           - name: SNYK_DEPLOYMENT_NAMESPACE"
        },
        {
          "filename": "snyk-operator/certified-operator/README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -40,7 +40,7 @@ metadata:\n   name: snyk-monitor\n   namespace: snyk-monitor\n spec:\n-  integrationApi: https://kubernetes-upstream.dev.snyk.io\n+  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n   temporaryStorageSize: 20Gi\n   pvc:\n     enabled: true"
        },
        {
          "filename": "snyk-operator/deploy/olm-catalog/snyk-operator/0.0.0/snyk-operator.v0.0.0.clusterserviceversion.yaml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -187,11 +187,11 @@ spec:\n \n     ## Prerequisites\n \n-    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId and Docker config file:\n+    To start using the Operator and the Snyk controller that it manages, you will need to create a secret containing your Snyk integrationId, serviceAccountApiToken and Docker config file:\n \n     ```\n     kubectl create namespace snyk-monitor\n-    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID}\n+    kubectl create secret generic snyk-monitor -n snyk-monitor --from-literal=dockercfg.json={} --from-literal=integrationId=${SNYK_INTEGRATION_ID} --from-literal=serviceAccountApiToken=${SNYK_SERVICE_ACCOUNT_API_TOKEN}\n     ```\n \n     Refer to the [Snyk documentation](https://support.snyk.io/hc/en-us/articles/360003916138-Kubernetes-integration-overview) for more details."
        },
        {
          "filename": "src/common/config.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -39,6 +39,7 @@ function getClusterName(): string {\n config.AGENT_ID = randomUUID();\n \n config.INTEGRATION_ID = config.INTEGRATION_ID.trim();\n+config.SERVICE_ACCOUNT_API_TOKEN = config.SERVICE_ACCOUNT_API_TOKEN.trim();\n config.CLUSTER_NAME = getClusterName();\n config.IMAGE_STORAGE_ROOT = '/var/tmp';\n config.POLICIES_STORAGE_ROOT = '/tmp/policies';"
        },
        {
          "filename": "src/common/types.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@ export interface Config {\n   REQUEST_QUEUE_LENGTH: number;\n   QUEUE_LENGTH_LOG_FREQUENCY_MINUTES: number;\n   INTEGRATION_ID: string;\n+  SERVICE_ACCOUNT_API_TOKEN: string;\n   DEFAULT_KUBERNETES_UPSTREAM_URL: string;\n   MAX_RETRY_BACKOFF_DURATION_SECONDS: number;\n "
        },
        {
          "filename": "src/transmitter/index.ts",
          "status": "modified",
          "additions": 46,
          "deletions": 9,
          "patch": "@@ -21,6 +21,7 @@ import {\n import { getProxyAgent } from './proxy';\n \n import type { queueAsPromised } from 'fastq';\n+import path from 'path';\n \n interface KubernetesUpstreamRequest {\n   method: NeedleHttpVerbs;\n@@ -32,11 +33,14 @@ interface KubernetesUpstreamRequest {\n     | IDeleteWorkloadPayload\n     | IClusterMetadataPayload\n     | IRuntimeDataPayload;\n+  options: NeedleOptions;\n }\n \n const upstreamUrl =\n   config.INTEGRATION_API || config.DEFAULT_KUBERNETES_UPSTREAM_URL;\n \n+const upstreamRequestVersion = '2023-02-10';\n+\n let httpAgent = new HttpAgent({\n   keepAlive: config.USE_KEEPALIVE,\n });\n@@ -55,10 +59,29 @@ function getAgent(u: string): HttpAgent {\n const reqQueue: queueAsPromised<unknown> = fastq.promise(async function (\n   req: KubernetesUpstreamRequest,\n ) {\n-  return await retryRequest(req.method, req.url, req.payload);\n+  return await retryRequest(req.method, req.url, req.payload, req.options);\n },\n config.REQUEST_QUEUE_LENGTH);\n \n+const upstreamRequestOptions = {\n+  headers: {\n+    Authorization: `token ${config.SERVICE_ACCOUNT_API_TOKEN}`,\n+  },\n+};\n+\n+function constructUpstreamRequestUrl(\n+  requestPath: string,\n+  queryParams?: Record<string, string>,\n+): string {\n+  const requestUrl = new URL(upstreamUrl);\n+  requestUrl.pathname = path.join(requestUrl.pathname, requestPath);\n+  requestUrl.searchParams.set('version', upstreamRequestVersion);\n+  for (const key in queryParams) {\n+    requestUrl.searchParams.set(key, queryParams[key]);\n+  }\n+  return requestUrl.toString();\n+}\n+\n export async function sendDepGraph(\n   ...payloads: IDependencyGraphPayload[]\n ): Promise<void> {\n@@ -69,8 +92,9 @@ export async function sendDepGraph(\n     try {\n       const request: KubernetesUpstreamRequest = {\n         method: 'post',\n-        url: `${upstreamUrl}/api/v1/dependency-graph`,\n+        url: constructUpstreamRequestUrl('/api/v1/dependency-graph'),\n         payload,\n+        options: upstreamRequestOptions,\n       };\n \n       const { response, attempt } = await reqQueue.push(request);\n@@ -100,8 +124,9 @@ export async function sendScanResults(\n     try {\n       const request: KubernetesUpstreamRequest = {\n         method: 'post',\n-        url: `${upstreamUrl}/api/v1/scan-results`,\n+        url: constructUpstreamRequestUrl('/api/v1/scan-results'),\n         payload,\n+        options: upstreamRequestOptions,\n       };\n \n       const { response, attempt } = await reqQueue.push(request);\n@@ -136,8 +161,9 @@ export async function sendWorkloadMetadata(\n \n     const request: KubernetesUpstreamRequest = {\n       method: 'post',\n-      url: `${upstreamUrl}/api/v1/workload`,\n+      url: constructUpstreamRequestUrl('/api/v1/workload'),\n       payload,\n+      options: upstreamRequestOptions,\n     };\n \n     const { response, attempt } = await reqQueue.push(request);\n@@ -172,8 +198,9 @@ export async function sendWorkloadEventsPolicy(\n \n     const { response, attempt } = await retryRequest(\n       'post',\n-      `${upstreamUrl}/api/v1/policy`,\n+      constructUpstreamRequestUrl('/api/v1/policy'),\n       payload,\n+      upstreamRequestOptions,\n     );\n     if (!isSuccessStatusCode(response.statusCode)) {\n       throw new Error(`${response.statusCode} ${response.statusMessage}`);\n@@ -207,11 +234,19 @@ export async function deleteWorkload(\n   try {\n     const { workloadLocator, agentId } = payload;\n     const { userLocator, cluster, namespace, type, name } = workloadLocator;\n-    const query = `userLocator=${userLocator}&cluster=${cluster}&namespace=${namespace}&type=${type}&name=${name}&agentId=${agentId}`;\n+    const queryParams: Record<string, string> = {\n+      userLocator,\n+      cluster,\n+      namespace,\n+      type,\n+      name,\n+      agentId,\n+    };\n     const request: KubernetesUpstreamRequest = {\n       method: 'delete',\n-      url: `${upstreamUrl}/api/v1/workload?${query}`,\n+      url: constructUpstreamRequestUrl('api/v1/workload', queryParams),\n       payload,\n+      options: upstreamRequestOptions,\n     };\n \n     const { response, attempt } = await reqQueue.push(request);\n@@ -348,8 +383,9 @@ export async function sendClusterMetadata(): Promise<void> {\n \n     const request: KubernetesUpstreamRequest = {\n       method: 'post',\n-      url: `${upstreamUrl}/api/v1/cluster`,\n+      url: constructUpstreamRequestUrl('/api/v1/cluster'),\n       payload,\n+      options: upstreamRequestOptions,\n     };\n \n     const { response, attempt } = await reqQueue.push(request);\n@@ -394,8 +430,9 @@ export async function sendRuntimeData(\n \n     const request: KubernetesUpstreamRequest = {\n       method: 'post',\n-      url: `${upstreamUrl}/api/v1/runtime-results`,\n+      url: constructUpstreamRequestUrl('/api/v1/runtime-results'),\n       payload,\n+      options: upstreamRequestOptions,\n     };\n \n     const { response, attempt } = await reqQueue.push(request);"
        },
        {
          "filename": "test/common/config.spec.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -1,8 +1,10 @@\n describe('extractNamespaceName()', () => {\n+  const apiToken = '46766a0a-ed0b-4e91-84c8-ea1c827f2a73';\n   beforeEach(() => {\n     jest.resetModules();\n     process.env.SNYK_SYSDIG_ENDPOINT = 'https://api/v1/images/';\n     process.env.SNYK_SYSDIG_TOKEN = '1432gtrhtrw32raf';\n+    process.env.SNYK_SERVICE_ACCOUNT_API_TOKEN = apiToken;\n   });\n \n   afterEach(() => {\n@@ -68,6 +70,7 @@ describe('extractNamespaceName()', () => {\n     const { config } = require('../../src/common/config');\n     expect(config.AGENT_ID).toEqual(expect.any(String));\n     expect(config.INTEGRATION_ID).toEqual(expect.any(String));\n+    expect(config.SERVICE_ACCOUNT_API_TOKEN).toEqual(apiToken);\n     expect(config.CLUSTER_NAME).toEqual('Default cluster');\n     expect(config.IMAGE_STORAGE_ROOT).toEqual('/var/tmp');\n     expect(config.EXCLUDED_NAMESPACES).toBeNull();\n@@ -76,7 +79,7 @@ describe('extractNamespaceName()', () => {\n     expect(config.NO_PROXY).toBeUndefined();\n     expect(config.USE_KEEPALIVE).toEqual(true);\n     expect(config.SKIP_K8S_JOBS).toEqual(false);\n-    expect(config.WORKERS_COUNT).toEqual(10);\n+    expect(config.WORKERS_COUNT).toEqual(5);\n     expect(config.SKOPEO_COMPRESSION_LEVEL).toEqual(6);\n     expect(config.SYSDIG_ENDPOINT).toEqual('https://api/v1/images/');\n     expect(config.SYSDIG_TOKEN).toEqual('1432gtrhtrw32raf');"
        },
        {
          "filename": "test/fixtures/operator/custom-resource-k8s.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@ metadata:\n   name: snyk-monitor\n   namespace: marketplace\n spec:\n-  integrationApi: https://kubernetes-upstream.dev.snyk.io\n+  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n   temporaryStorageSize: 20Gi\n   clusterName: \"\"\n   pvc:"
        },
        {
          "filename": "test/fixtures/operator/custom-resource.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@ metadata:\n   name: snyk-monitor\n   namespace: snyk-monitor\n spec:\n-  integrationApi: https://kubernetes-upstream.dev.snyk.io\n+  integrationApi: https://api.dev.snyk.io/v2/kubernetes-upstream\n   temporaryStorageSize: 20Gi\n   clusterName: \"\"\n   pvc:"
        },
        {
          "filename": "test/setup/deployers/helm-with-proxy.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -37,7 +37,7 @@ async function deployKubernetesMonitor(\n       `--set image.repository=${imageName} ` +\n       `--set image.tag=${imageTag} ` +\n       `--set image.pullPolicy=${imagePullPolicy} ` +\n-      '--set integrationApi=https://kubernetes-upstream.dev.snyk.io ' +\n+      '--set integrationApi=https://api.dev.snyk.io/v2/kubernetes-upstream ' +\n       `--set clusterName=${deployOptions.clusterName} ` +\n       '--set https_proxy=http://forwarding-proxy:8080',\n   );"
        },
        {
          "filename": "test/setup/deployers/helm.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -30,7 +30,7 @@ async function deployKubernetesMonitor(\n       `--set image.repository=${imageName} ` +\n       `--set image.tag=${imageTag} ` +\n       `--set image.pullPolicy=${imagePullPolicy} ` +\n-      '--set integrationApi=https://kubernetes-upstream.dev.snyk.io ' +\n+      '--set integrationApi=https://api.dev.snyk.io/v2/kubernetes-upstream ' +\n       `--set clusterName=${deployOptions.clusterName} ` +\n       '--set nodeSelector.\"kubernetes\\\\.io/os\"=linux ' +\n       '--set pvc.enabled=true ' +"
        },
        {
          "filename": "test/setup/deployers/yaml.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -47,7 +47,7 @@ function createTestYamlDeployment(\n   const envVar = container.env.find(\n     (env) => env.name === 'SNYK_INTEGRATION_API',\n   );\n-  envVar.value = 'https://kubernetes-upstream.dev.snyk.io';\n+  envVar.value = 'https://api.dev.snyk.io/v2/kubernetes-upstream';\n   delete envVar.valueFrom;\n \n   if (clusterName) {"
        },
        {
          "filename": "test/setup/index.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -24,6 +24,14 @@ function getClusterName(): string {\n   return clusterName;\n }\n \n+function getServiceAccountApiToken(): string {\n+  const serviceAccountApiToken = randomUUID();\n+  console.log(\n+    `Generated new service account API token ${serviceAccountApiToken}`,\n+  );\n+  return serviceAccountApiToken;\n+}\n+\n function getEnvVariableOrDefault(\n   envVarName: string,\n   defaultValue: string,\n@@ -84,6 +92,7 @@ async function createEnvironment(): Promise<void> {\n \n async function predeploy(\n   integrationId: string,\n+  serviceAccountApiToken: string,\n   namespace: string,\n ): Promise<void> {\n   try {\n@@ -99,6 +108,7 @@ async function predeploy(\n     await kubectl.createSecret(secretName, namespace, {\n       'dockercfg.json': gcrDockercfg,\n       integrationId,\n+      serviceAccountApiToken,\n     });\n     await createRegistriesConfigMap(namespace);\n     console.log(`Namespace ${namespace} and secret ${secretName} created`);\n@@ -193,7 +203,8 @@ export async function deployMonitor(): Promise<{\n     await createSecretForDockerHubAccess();\n \n     const integrationId = getIntegrationId();\n-    await predeploy(integrationId, namespace);\n+    const serviceAccountApiToken = getServiceAccountApiToken();\n+    await predeploy(integrationId, serviceAccountApiToken, namespace);\n \n     // TODO: hack, rewrite this\n     const imagePullPolicy ="
        },
        {
          "filename": "test/unit/data-scraper/scrape-data.spec.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -59,8 +59,8 @@ describe('dataScraper()', () => {\n       .times(1)\n       .reply(200, bodyNoToken);\n \n-    nock('https://kubernetes-upstream.snyk.io')\n-      .post('/api/v1/runtime-results')\n+    nock('https://api.snyk.io')\n+      .post('/v2/kubernetes-upstream/api/v1/runtime-results?version=2023-02-10')\n       .times(1)\n       .reply(200, (uri, requestBody: transmitterTypes.IRuntimeDataPayload) => {\n         expect(requestBody).toEqual<transmitterTypes.IRuntimeDataPayload>({\n@@ -80,7 +80,7 @@ describe('dataScraper()', () => {\n           ],\n         });\n       })\n-      .post('/api/v1/runtime-results')\n+      .post('/v2/kubernetes-upstream/api/v1/runtime-results?version=2023-02-10')\n       .times(1)\n       .reply(200, (uri, requestBody: transmitterTypes.IRuntimeDataPayload) => {\n         expect(requestBody).toEqual<transmitterTypes.IRuntimeDataPayload>({\n@@ -102,5 +102,12 @@ describe('dataScraper()', () => {\n       });\n \n     await scrapeData();\n+\n+    try {\n+      expect(nock.isDone()).toBeTruthy();\n+    } catch (err) {\n+      console.error(`nock pending mocks: ${nock.pendingMocks()}`);\n+      throw err;\n+    }\n   });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 6,
        "dependency_files": 0,
        "test_files": 10,
        "unique_directories": 18,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1f0d7400480797cd9b64edf5d534fd8fdc9c850d",
            "date": "2025-01-15T12:29:41Z",
            "author_login": "ahmed-agabani-snyk"
          },
          {
            "sha": "d867a62e9ce70edde4bb2981ed5ea67f1d5de88d",
            "date": "2025-01-15T09:28:29Z",
            "author_login": "jonnyowenpowell"
          },
          {
            "sha": "f17a9c1258df982ac9ad88e76b813891f1fff4b4",
            "date": "2025-01-15T08:50:48Z",
            "author_login": "jonnyowenpowell"
          },
          {
            "sha": "e496542809574b85c09286f40607f4372d875936",
            "date": "2024-11-29T17:05:50Z",
            "author_login": "kat1906"
          },
          {
            "sha": "a05134ce36f60d8c9c663a1b91a073068da48f37",
            "date": "2024-11-29T15:13:07Z",
            "author_login": "kat1906"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L",
    "cwe_id": "CWE-287",
    "description": "This vulnerability in the Snyk Kubernetes Monitor can result in irrelevant data being posted to a Snyk Organization, which could in turn obfuscate other, relevant, security issues. It does not expose the user of the integration to any direct security risk and no user data can be leaked. To exploit the vulnerability the attacker does not need to be authenticated to Snyk but does need to know the target's Integration ID (which may or may not be the same as the Organization ID, although this is an unpredictable UUID in either case).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-28T19:15:16.727",
    "last_modified": "2024-11-21T07:38:23.587",
    "fix_date": "2023-01-26T11:50:39Z"
  },
  "references": [
    {
      "url": "https://github.com/snyk/kubernetes-monitor",
      "source": "report@snyk.io",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/snyk/kubernetes-monitor/commit/5b9a7821680bbfb6c4a900ab05d898ce2b2cc157",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snyk/kubernetes-monitor/pull/1275",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://snyk.io/blog/api-auth-vuln-snyk-kubernetes-cve-2023-1065/",
      "source": "report@snyk.io",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/snyk/kubernetes-monitor",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/snyk/kubernetes-monitor/commit/5b9a7821680bbfb6c4a900ab05d898ce2b2cc157",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snyk/kubernetes-monitor/pull/1275",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://snyk.io/blog/api-auth-vuln-snyk-kubernetes-cve-2023-1065/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.785488",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "kubernetes-monitor",
    "owner": "snyk",
    "created_at": "2019-05-05T08:22:38Z",
    "updated_at": "2025-01-15T12:29:44Z",
    "pushed_at": "2025-01-23T05:07:07Z",
    "size": 22177,
    "stars": 88,
    "forks": 74,
    "open_issues": 22,
    "watchers": 88,
    "has_security_policy": false,
    "default_branch": "staging",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "TypeScript": 356261,
      "Shell": 11929,
      "Python": 5136,
      "Dockerfile": 3230,
      "Mustache": 811,
      "JavaScript": 637,
      "Starlark": 619
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:30:38.161405"
  }
}