{
  "cve_id": "CVE-2023-1264",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "7ac5023a5f1a37baafbe1043645f97ba3443d9f6",
    "related_commits": [
      "7ac5023a5f1a37baafbe1043645f97ba3443d9f6",
      "7ac5023a5f1a37baafbe1043645f97ba3443d9f6"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7ac5023a5f1a37baafbe1043645f97ba3443d9f6",
      "commit_date": "2023-03-07T21:05:04Z",
      "author": {
        "login": "brammool",
        "type": "User",
        "stats": {
          "total_commits": 16567,
          "average_weekly_commits": 15.382544103992572,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 874
        }
      },
      "commit_message": {
        "title": "patch 9.0.1392: using NULL pointer with nested :open command",
        "length": 170,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 46,
        "additions": 39,
        "deletions": 7
      },
      "files": [
        {
          "filename": "src/getchar.c",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -3107,7 +3107,7 @@ check_end_reg_executing(int advance)\n     static int\n vgetorpeek(int advance)\n {\n-    int\t\tc, c1;\n+    int\t\tc;\n     int\t\ttimedout = FALSE;\t// waited for more than 'timeoutlen'\n \t\t\t\t\t// for mapping to complete or\n \t\t\t\t\t// 'ttimeoutlen' for complete key code\n@@ -3474,7 +3474,7 @@ vgetorpeek(int advance)\n \t\t * to the user with showcmd.\n \t\t */\n \t\tshowcmd_idx = 0;\n-\t\tc1 = 0;\n+\t\tint showing_partial = FALSE;\n \t\tif (typebuf.tb_len > 0 && advance && !exmode_active)\n \t\t{\n \t\t    if (((State & (MODE_NORMAL | MODE_INSERT))\n@@ -3489,7 +3489,7 @@ vgetorpeek(int advance)\n \t\t\t    edit_putchar(typebuf.tb_buf[typebuf.tb_off\n \t\t\t\t\t\t+ typebuf.tb_len - 1], FALSE);\n \t\t\t    setcursor(); // put cursor back where it belongs\n-\t\t\t    c1 = 1;\n+\t\t\t    showing_partial = TRUE;\n \t\t\t}\n \t\t\t// need to use the col and row from above here\n \t\t\told_wcol = curwin->w_wcol;\n@@ -3506,8 +3506,10 @@ vgetorpeek(int advance)\n \t\t\tcurwin->w_wrow = old_wrow;\n \t\t    }\n \n-\t\t    // this looks nice when typing a dead character map\n+\t\t    // This looks nice when typing a dead character map.\n+\t\t    // There is no actual command line for get_number().\n \t\t    if ((State & MODE_CMDLINE)\n+\t\t\t    && get_cmdline_info()->cmdbuff != NULL\n #if defined(FEAT_CRYPT) || defined(FEAT_EVAL)\n \t\t\t    && cmdline_star == 0\n #endif\n@@ -3516,7 +3518,7 @@ vgetorpeek(int advance)\n \t\t    {\n \t\t\tputcmdline(typebuf.tb_buf[typebuf.tb_off\n \t\t\t\t\t\t+ typebuf.tb_len - 1], FALSE);\n-\t\t\tc1 = 1;\n+\t\t\tshowing_partial = TRUE;\n \t\t    }\n \t\t}\n \n@@ -3550,11 +3552,12 @@ vgetorpeek(int advance)\n \n \t\tif (showcmd_idx != 0)\n \t\t    pop_showcmd();\n-\t\tif (c1 == 1)\n+\t\tif (showing_partial)\n \t\t{\n \t\t    if (State & MODE_INSERT)\n \t\t\tedit_unputchar();\n-\t\t    if (State & MODE_CMDLINE)\n+\t\t    if ((State & MODE_CMDLINE)\n+\t\t\t\t\t&& get_cmdline_info()->cmdbuff != NULL)\n \t\t\tunputcmdline();\n \t\t    else\n \t\t\tsetcursor();\t// put cursor back where it belongs"
        },
        {
          "filename": "src/testdir/term_util.vim",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -55,6 +55,7 @@ endfunc\n \" \"cols\" - width of the terminal window (max. 78)\n \" \"statusoff\" - number of lines the status is offset from default\n \" \"wait_for_ruler\" - if zero then don't wait for ruler to show\n+\" \"no_clean\" - if non-zero then remove \"--clean\" from the command\n func RunVimInTerminal(arguments, options)\n   \" If Vim doesn't exit a swap file remains, causing other tests to fail.\n   \" Remove it here.\n@@ -91,6 +92,10 @@ func RunVimInTerminal(arguments, options)\n \n   let cmd = GetVimCommandCleanTerm() .. reset_u7 .. a:arguments\n \n+  if get(a:options, 'no_clean', 0)\n+    let cmd = substitute(cmd, '--clean', '', '')\n+  endif\n+\n   let options = #{curwin: 1}\n   if &termwinsize == ''\n     let options.term_rows = rows"
        },
        {
          "filename": "src/testdir/test_ex_mode.vim",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -134,6 +134,28 @@ func Test_open_command_flush_line()\n   bwipe!\n endfunc\n \n+\" FIXME: this doesn't fail without the fix but hangs\n+func Skip_Test_open_command_state()\n+  \" Tricky script that failed because State was not set properly\n+  let lines =<< trim END\n+      !ls \u0083\n+      0sc\u00eci\n+      so! Xsourced\n+      set t_\u00fb0=0\n+      v/-/o\n+  END\n+  call writefile(lines, 'XopenScript', '')\n+\n+  let sourced = [\"!f\\u0083\\x02\\<Esc>z=0\"]\n+  call writefile(sourced, 'Xsourced', 'b')\n+\n+  CheckRunVimInTerminal\n+  let buf = RunVimInTerminal('-u NONE -i NONE -n -m -X -Z -e -s -S XopenScript -c qa!', #{rows: 6, wait_for_ruler: 0, no_clean: 1})\n+  sleep 3\n+\n+  call StopVimInTerminal(buf)\n+endfunc\n+\n \" Test for :g/pat/visual to run vi commands in Ex mode\n \" This used to hang Vim before 8.2.0274.\n func Test_Ex_global()"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -695,6 +695,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    1392,\n /**/\n     1391,\n /**/"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb49e3cde79de4ce558c86d21a56eb9d60aeabd5",
            "date": "2025-01-25T15:18:51Z",
            "author_login": "chrisbra"
          },
          {
            "sha": "c729d6d154e097b439ff264b9736604824f4a5f4",
            "date": "2025-01-25T15:07:12Z",
            "author_login": "saccarosium"
          },
          {
            "sha": "d65aa1bbdb808ef8fecde6df240c48cc39a52a8e",
            "date": "2025-01-25T14:29:03Z",
            "author_login": "zeertzjq"
          },
          {
            "sha": "509a8d58f9a8ce00744114c1f21f0d951a559ecd",
            "date": "2025-01-25T14:26:09Z",
            "author_login": "pbnj"
          },
          {
            "sha": "99181205c5f8284a30f839107a12932924168f17",
            "date": "2025-01-25T13:54:28Z",
            "author_login": "chrisbra"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "NULL Pointer Dereference in GitHub repository vim/vim prior to 9.0.1392.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-07T22:15:10.723",
    "last_modified": "2024-11-21T07:38:47.600",
    "fix_date": "2023-03-07T21:05:04Z"
  },
  "references": [
    {
      "url": "https://github.com/vim/vim/commit/7ac5023a5f1a37baafbe1043645f97ba3443d9f6",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b2989095-88f3-413a-9a39-c1c58a6e6815",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DIAKPMKJ4OZ6NYRZJO7YWMNQL2BICLYV/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/IE44W6WMMREYCW3GJHPSYP7NK2VT5NY6/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/X4KDAU76Z7QNSPKZX2JAJ6O7KIEOXWTL/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/vim/vim/commit/7ac5023a5f1a37baafbe1043645f97ba3443d9f6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b2989095-88f3-413a-9a39-c1c58a6e6815",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DIAKPMKJ4OZ6NYRZJO7YWMNQL2BICLYV/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/IE44W6WMMREYCW3GJHPSYP7NK2VT5NY6/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/X4KDAU76Z7QNSPKZX2JAJ6O7KIEOXWTL/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.818710",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-26T05:55:44Z",
    "pushed_at": "2025-01-25T15:21:53Z",
    "size": 155300,
    "stars": 37307,
    "forks": 5538,
    "open_issues": 1502,
    "watchers": 37307,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 19563490,
      "C": 14392521,
      "Roff": 576344,
      "Makefile": 496830,
      "C++": 246793,
      "NSIS": 179173,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 19124,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388,
      "TeX": 225
    },
    "commit_activity": {
      "total_commits_last_year": 1869,
      "avg_commits_per_week": 35.94230769230769,
      "days_active_last_year": 322
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-26T07:35:34.408543"
  }
}