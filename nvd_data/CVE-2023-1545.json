{
  "cve_id": "CVE-2023-1545",
  "github_data": {
    "repository": "nilsteampassnet/teampass",
    "fix_commit": "4780252fdb600ef2ec2758f17a37d738570cbe66",
    "related_commits": [
      "4780252fdb600ef2ec2758f17a37d738570cbe66",
      "4780252fdb600ef2ec2758f17a37d738570cbe66"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "4780252fdb600ef2ec2758f17a37d738570cbe66",
      "commit_date": "2023-02-09T17:46:52Z",
      "author": {
        "login": "nilsteampassnet",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "3.0.0.22",
        "length": 56,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 69,
        "additions": 49,
        "deletions": 20
      },
      "files": [
        {
          "filename": "api/Model/AuthModel.php",
          "status": "modified",
          "additions": 49,
          "deletions": 20,
          "patch": "@@ -41,42 +41,71 @@ class AuthModel extends Database\n      */\n     public function getUserAuth(string $login, string $password, string $apikey): array\n     {\n-        // Check if user exists\n-        $userInfoRes = $this->select(\"SELECT id, pw, public_key, private_key, personal_folder, fonction_id, groupes_visibles, groupes_interdits, user_api_key FROM \" . prefixTable('users') . \" WHERE login='\".$login.\"'\");\n-        $userInfoRes[0]['special'] = '';\n-        $userInfo = $userInfoRes[0];\n+        // Sanitize\n+        include_once API_ROOT_PATH . '/../sources/main.functions.php';\n+        $inputData = dataSanitizer(\n+            [\n+                'login' => isset($login) === true ? $login : '',\n+                'password' => isset($password) === true ? $password : '',\n+                'apikey' => isset($apikey) === true ? $apikey : '',\n+            ],\n+            [\n+                'login' => 'trim|escape',\n+                'password' => 'trim|escape',\n+                'apikey' => 'trim|escape',\n+            ],\n+            API_ROOT_PATH . '/..'\n+        );\n+        if (empty($inputData['login']) === true || empty($inputData['apikey']) === true) {\n+            return [\"error\" => \"Login failed.\"];\n+        }\n         \n-        // Check password\n-        include_once API_ROOT_PATH . '/../sources/SplClassLoader.php';\n-        $pwdlib = new SplClassLoader('PasswordLib', API_ROOT_PATH . '/../includes/libraries');\n-        $pwdlib->register();\n-        $pwdlib = new PasswordLib\\PasswordLib();\n-        if ($pwdlib->verifyPasswordHash($password, $userInfo['pw']) === true) {\n-            // Correct credentials\n-            // Now check apikey\n-            // We check if it is the correct user api or if it is a generic api key\n-            $apiInfo = $this->select(\"SELECT count(*) FROM \" . prefixTable('api') . \" WHERE value='\".$apikey.\"'\");\n-            if ($apikey === $userInfo['user_api_key'] || (int) $apiInfo[0]['count(*)'] === 1) {\n+        // Check apikey\n+        if (empty($inputData['password']) === true) {\n+            // case where it is a generic key\n+            $apiInfo = $this->select(\"SELECT count(*) FROM \" . prefixTable('api') . \" WHERE value='\".$inputData['apikey'].\"' AND label='\".$inputData['login'].\"'\");\n+            if ((int) $apiInfo[0]['count(*)'] === 0) {\n+                return [\"error\" => \"Login failed.\", \"apikey\" => \"Not valid\"];\n+            }\n+\n+            return [\"error\" => \"Not managed.\"];\n+        } else {\n+            // case where it is a user api key\n+            $apiInfo = $this->select(\"SELECT count(*) FROM \" . prefixTable('users') . \" WHERE user_api_key='\".$inputData['apikey'].\"' AND login='\".$inputData['login'].\"'\");\n+            if ((int) $apiInfo[0]['count(*)'] === 0) {\n+                return [\"error\" => \"Login failed.\", \"apikey\" => \"Not valid\"];\n+            }\n+\n+            // Check if user exists\n+            $userInfoRes = $this->select(\"SELECT id, pw, public_key, private_key, personal_folder, fonction_id, groupes_visibles, groupes_interdits, user_api_key FROM \" . prefixTable('users') . \" WHERE login='\".$inputData['login'].\"'\");\n+            $userInfoRes[0]['special'] = '';\n+            $userInfo = $userInfoRes[0];\n+            \n+            // Check password\n+            include_once API_ROOT_PATH . '/../sources/SplClassLoader.php';\n+            $pwdlib = new SplClassLoader('PasswordLib', API_ROOT_PATH . '/../includes/libraries');\n+            $pwdlib->register();\n+            $pwdlib = new PasswordLib\\PasswordLib();\n+            if ($pwdlib->verifyPasswordHash($inputData['password'], $userInfo['pw']) === true) {\n+                // Correct credentials\n                 // get user keys\n-                $privateKeyClear = decryptPrivateKey($password, (string) $userInfo['private_key']); //prepareUserEncryptionKeys($userInfo, $password);\n+                $privateKeyClear = decryptPrivateKey($inputData['password'], (string) $userInfo['private_key']);\n \n                 // get user folders list\n                 $folders = $this->buildUserFoldersList($userInfo);\n \n                 // create JWT\n                 return $this->createUserJWT(\n                     $userInfo['id'],\n-                    $login,\n+                    $inputData['login'],\n                     $userInfo['personal_folder'],\n                     $userInfo['public_key'],\n                     $privateKeyClear,\n                     implode(\",\", $folders)\n                 );\n             } else {\n-                return [\"error\" => \"Login failed.\", \"apikey\" => \"Not valid\"];\n+                return [\"error\" => \"Login failed.\", \"password\" => \"Not valid\"];\n             }\n-        } else {\n-            return [\"error\" => \"Login failed.\", \"password\" => $password];\n         }\n     }\n     //end getUserAuth"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aacdf6a3f2daf9b52a826d4b3d8a39873e2e2062",
            "date": "2025-01-13T17:24:23Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "eb95bc3e37f6e1f19fce98aa4c44c251f2084cd7",
            "date": "2025-01-13T17:20:31Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "9969d0ef636e28c1afcdb047aac2d2a5387b62b5",
            "date": "2025-01-12T17:29:37Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "4963736272bc4b281586f8ad4dcee70015d595b1",
            "date": "2025-01-12T17:22:24Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "b5a997952a43e4760c9eaceedfd9a7ba4a5683d2",
            "date": "2025-01-10T16:06:22Z",
            "author_login": "nilsteampassnet"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-89",
    "description": "SQL Injection in GitHub repository nilsteampassnet/teampass prior to 3.0.0.23.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-21T11:15:10.453",
    "last_modified": "2024-11-21T07:39:24.863",
    "fix_date": "2023-02-09T17:46:52Z"
  },
  "references": [
    {
      "url": "https://github.com/nilsteampassnet/teampass/commit/4780252fdb600ef2ec2758f17a37d738570cbe66",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/942c015f-7486-49b1-94ae-b1538d812bc2",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nilsteampassnet/teampass/commit/4780252fdb600ef2ec2758f17a37d738570cbe66",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/942c015f-7486-49b1-94ae-b1538d812bc2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:08.987913",
    "processing_status": "enhanced"
  }
}