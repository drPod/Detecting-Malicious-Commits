{
  "cve_id": "CVE-2023-1759",
  "github_data": {
    "repository": "thorsten/phpmyfaq",
    "fix_commit": "ecbd8107fe954b6be95dab315862d1caa0b94efa",
    "related_commits": [
      "ecbd8107fe954b6be95dab315862d1caa0b94efa",
      "ecbd8107fe954b6be95dab315862d1caa0b94efa"
    ],
    "patch_url": "https://github.com/thorsten/phpmyfaq/commit/ecbd8107fe954b6be95dab315862d1caa0b94efa.patch",
    "fix_commit_details": {
      "sha": "ecbd8107fe954b6be95dab315862d1caa0b94efa",
      "commit_date": "2023-03-12T13:50:23Z",
      "author": {
        "login": "thorsten",
        "type": "User",
        "stats": {
          "total_commits": 7352,
          "average_weekly_commits": 9.19,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 647
        }
      },
      "commit_message": {
        "title": "fix: corrected sanitazing the string",
        "length": 36,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 92,
        "additions": 46,
        "deletions": 46
      },
      "files": [
        {
          "filename": "phpmyfaq/admin/record.add.php",
          "status": "modified",
          "additions": 16,
          "deletions": 16,
          "patch": "@@ -43,9 +43,9 @@\n \n if ($user->perm->hasPermission($user->getUserId(), 'add_faq')) {\n     // FAQ data\n-    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n-    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n-    $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n+    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $question = Filter::filterInput(INPUT_POST, 'question', FILTER_SANITIZE_SPECIAL_CHARS);\n     $categories = Filter::filterInputArray(\n         INPUT_POST,\n         [\n@@ -55,25 +55,25 @@\n             ],\n         ]\n     );\n-    $recordLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n-    $tags = Filter::filterInput(INPUT_POST, 'tags', FILTER_UNSAFE_RAW);\n-    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n-    $sticky = Filter::filterInput(INPUT_POST, 'sticky', FILTER_UNSAFE_RAW);\n+    $recordLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $tags = Filter::filterInput(INPUT_POST, 'tags', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $sticky = Filter::filterInput(INPUT_POST, 'sticky', FILTER_SANITIZE_SPECIAL_CHARS);\n     $content = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n-    $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n-    $author = Filter::filterInput(INPUT_POST, 'author', FILTER_UNSAFE_RAW);\n+    $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $author = Filter::filterInput(INPUT_POST, 'author', FILTER_SANITIZE_SPECIAL_CHARS);\n     $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n-    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n+    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_SANITIZE_SPECIAL_CHARS);\n     $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n     $solutionId = Filter::filterInput(INPUT_POST, 'solution_id', FILTER_VALIDATE_INT);\n     $revisionId = Filter::filterInput(INPUT_POST, 'revision_id', FILTER_VALIDATE_INT);\n-    $changed = Filter::filterInput(INPUT_POST, 'changed', FILTER_UNSAFE_RAW);\n-    $date = Filter::filterInput(INPUT_POST, 'date', FILTER_UNSAFE_RAW);\n-    $notes = Filter::filterInput(INPUT_POST, 'notes', FILTER_UNSAFE_RAW);\n+    $changed = Filter::filterInput(INPUT_POST, 'changed', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $date = Filter::filterInput(INPUT_POST, 'date', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $notes = Filter::filterInput(INPUT_POST, 'notes', FILTER_SANITIZE_SPECIAL_CHARS);\n \n     // Permissions\n     $permissions = [];\n-    if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n+    if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_SANITIZE_SPECIAL_CHARS)) {\n         $permissions += [\n             'restricted_user' => [\n                 -1,\n@@ -87,7 +87,7 @@\n         ];\n     }\n \n-    if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n+    if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_SANITIZE_SPECIAL_CHARS)) {\n         $permissions += [\n             'restricted_groups' => [\n                 -1,\n@@ -203,7 +203,7 @@\n                 // notify the user who added the question\n                 try {\n                     $notifyEmail = Filter::filterInput(INPUT_POST, 'notifyEmail', FILTER_SANITIZE_EMAIL);\n-                    $notifyUser = Filter::filterInput(INPUT_POST, 'notifyUser', FILTER_UNSAFE_RAW);\n+                    $notifyUser = Filter::filterInput(INPUT_POST, 'notifyUser', FILTER_SANITIZE_SPECIAL_CHARS);\n                     $notification->sendOpenQuestionAnswered($notifyEmail, $notifyUser, $oLink->toString());\n                 } catch (Exception $e) {\n                     printf('<p class=\"alert alert-warning\">%s</p>', $e->getMessage());"
        },
        {
          "filename": "phpmyfaq/admin/record.edit.php",
          "status": "modified",
          "additions": 13,
          "deletions": 13,
          "patch": "@@ -110,7 +110,7 @@\n             $queryString = 'insertentry';\n         }\n \n-        $faqData['lang'] = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n+        $faqData['lang'] = Filter::filterInput(INPUT_POST, 'lang', FILTER_SANITIZE_SPECIAL_CHARS);\n         $selectedCategory = Filter::filterInputArray(\n             INPUT_POST,\n             [\n@@ -125,25 +125,25 @@\n                 $categories[] = ['category_id' => $cats, 'category_lang' => $faqData['lang']];\n             }\n         }\n-        $faqData['active'] = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n-        $faqData['keywords'] = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n-        $faqData['title'] = Filter::filterInput(INPUT_POST, 'thema', FILTER_UNSAFE_RAW);\n+        $faqData['active'] = Filter::filterInput(INPUT_POST, 'active', FILTER_SANITIZE_SPECIAL_CHARS);\n+        $faqData['keywords'] = Filter::filterInput(INPUT_POST, 'keywords', FILTER_SANITIZE_SPECIAL_CHARS);\n+        $faqData['title'] = Filter::filterInput(INPUT_POST, 'thema', FILTER_SANITIZE_SPECIAL_CHARS);\n         $faqData['content'] = Filter::filterInput(INPUT_POST, 'content', FILTER_SANITIZE_SPECIAL_CHARS);\n-        $faqData['author'] = Filter::filterInput(INPUT_POST, 'author', FILTER_UNSAFE_RAW);\n+        $faqData['author'] = Filter::filterInput(INPUT_POST, 'author', FILTER_SANITIZE_SPECIAL_CHARS);\n         $faqData['email'] = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n-        $faqData['comment'] = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n+        $faqData['comment'] = Filter::filterInput(INPUT_POST, 'comment', FILTER_SANITIZE_SPECIAL_CHARS);\n         $faqData['solution_id'] = Filter::filterInput(INPUT_POST, 'solution_id', FILTER_VALIDATE_INT);\n         $faqData['revision_id'] = Filter::filterInput(INPUT_POST, 'revision_id', FILTER_VALIDATE_INT, 0);\n         $faqData['sticky'] = Filter::filterInput(INPUT_POST, 'sticky', FILTER_VALIDATE_INT);\n-        $faqData['tags'] = Filter::filterInput(INPUT_POST, 'tags', FILTER_UNSAFE_RAW);\n-        $faqData['changed'] = Filter::filterInput(INPUT_POST, 'changed', FILTER_UNSAFE_RAW);\n-        $faqData['dateStart'] = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n-        $faqData['dateEnd'] = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n+        $faqData['tags'] = Filter::filterInput(INPUT_POST, 'tags', FILTER_SANITIZE_SPECIAL_CHARS);\n+        $faqData['changed'] = Filter::filterInput(INPUT_POST, 'changed', FILTER_SANITIZE_SPECIAL_CHARS);\n+        $faqData['dateStart'] = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_SANITIZE_SPECIAL_CHARS);\n+        $faqData['dateEnd'] = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_SANITIZE_SPECIAL_CHARS);\n         $faqData['content'] = html_entity_decode($faqData['content']);\n     } elseif ('editentry' === $action) {\n         $id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n-        $lang = Filter::filterInput(INPUT_GET, 'lang', FILTER_UNSAFE_RAW);\n-        $translateTo = Filter::filterInput(INPUT_GET, 'translateTo', FILTER_UNSAFE_RAW);\n+        $lang = Filter::filterInput(INPUT_GET, 'lang', FILTER_SANITIZE_SPECIAL_CHARS);\n+        $translateTo = Filter::filterInput(INPUT_GET, 'translateTo', FILTER_SANITIZE_SPECIAL_CHARS);\n         $categoryId = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT);\n \n         if (!is_null($translateTo)) {\n@@ -168,7 +168,7 @@\n         }\n     } elseif ('copyentry' === $action) {\n         $faqData['id'] = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n-        $faqData['lang'] = Filter::filterInput(INPUT_GET, 'lang', FILTER_UNSAFE_RAW);\n+        $faqData['lang'] = Filter::filterInput(INPUT_GET, 'lang', FILTER_SANITIZE_SPECIAL_CHARS);\n         $categories = $categoryRelation->getCategories($faqData['id'], $faqData['lang']);\n \n         $faq->getRecord($faqData['id'], null, true);"
        },
        {
          "filename": "phpmyfaq/admin/record.save.php",
          "status": "modified",
          "additions": 17,
          "deletions": 17,
          "patch": "@@ -50,9 +50,9 @@\n     );\n \n     // FAQ data\n-    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n-    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n-    $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n+    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $question = Filter::filterInput(INPUT_POST, 'question', FILTER_SANITIZE_SPECIAL_CHARS);\n     $categories = Filter::filterInputArray(\n         INPUT_POST,\n         [\n@@ -62,31 +62,31 @@\n             ],\n         ]\n     );\n-    $recordLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n-    $tags = Filter::filterInput(INPUT_POST, 'tags', FILTER_UNSAFE_RAW);\n+    $recordLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $tags = Filter::filterInput(INPUT_POST, 'tags', FILTER_SANITIZE_SPECIAL_CHARS);\n     $active = 'yes' == Filter::filterInput(\n         INPUT_POST,\n         'active',\n-        FILTER_UNSAFE_RAW\n+        FILTER_SANITIZE_SPECIAL_CHARS\n     ) && $user->perm->hasPermission($user->getUserId(), 'approverec') ? 'yes' : 'no';\n-    $sticky = Filter::filterInput(INPUT_POST, 'sticky', FILTER_UNSAFE_RAW);\n+    $sticky = Filter::filterInput(INPUT_POST, 'sticky', FILTER_SANITIZE_SPECIAL_CHARS);\n     $content = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n-    $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n-    $author = Filter::filterInput(INPUT_POST, 'author', FILTER_UNSAFE_RAW);\n+    $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $author = Filter::filterInput(INPUT_POST, 'author', FILTER_SANITIZE_SPECIAL_CHARS);\n     $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n-    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n+    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_SANITIZE_SPECIAL_CHARS);\n     $recordId = Filter::filterInput(INPUT_POST, 'record_id', FILTER_VALIDATE_INT);\n     $solutionId = Filter::filterInput(INPUT_POST, 'solution_id', FILTER_VALIDATE_INT);\n-    $revision = Filter::filterInput(INPUT_POST, 'revision', FILTER_UNSAFE_RAW);\n+    $revision = Filter::filterInput(INPUT_POST, 'revision', FILTER_SANITIZE_SPECIAL_CHARS);\n     $revisionId = Filter::filterInput(INPUT_POST, 'revision_id', FILTER_VALIDATE_INT);\n-    $changed = Filter::filterInput(INPUT_POST, 'changed', FILTER_UNSAFE_RAW);\n-    $date = Filter::filterInput(INPUT_POST, 'date', FILTER_UNSAFE_RAW);\n-    $notes = Filter::filterInput(INPUT_POST, 'notes', FILTER_UNSAFE_RAW);\n+    $changed = Filter::filterInput(INPUT_POST, 'changed', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $date = Filter::filterInput(INPUT_POST, 'date', FILTER_SANITIZE_SPECIAL_CHARS);\n+    $notes = Filter::filterInput(INPUT_POST, 'notes', FILTER_SANITIZE_SPECIAL_CHARS);\n \n     // Permissions\n     $faqPermission = new FaqPermission($faqConfig);\n     $permissions = [];\n-    if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n+    if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_SANITIZE_SPECIAL_CHARS)) {\n         $permissions += [\n             'restricted_user' => [\n                 -1,\n@@ -100,7 +100,7 @@\n         ];\n     }\n \n-    if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n+    if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_SANITIZE_SPECIAL_CHARS)) {\n         $permissions += [\n             'restricted_groups' => [\n                 -1,\n@@ -231,7 +231,7 @@\n         }\n \n         // All the other translations\n-        $languages = Filter::filterInput(INPUT_POST, 'used_translated_languages', FILTER_UNSAFE_RAW);\n+        $languages = Filter::filterInput(INPUT_POST, 'used_translated_languages', FILTER_SANITIZE_SPECIAL_CHARS);\n         ?>\n       <script>\n         (() => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0bde62632e8a6501702a5e0dc76b821b0e193cd1",
            "date": "2025-01-14T14:57:50Z",
            "author_login": "modelrailroader"
          },
          {
            "sha": "69ccf3a0310a91e580ba3fbae763cf6fc4e70e8c",
            "date": "2025-01-14T04:44:45Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0aff5a567446adbf5d024e0d8b2b132666f91464",
            "date": "2025-01-13T20:29:34Z",
            "author_login": "modelrailroader"
          },
          {
            "sha": "0ee934f2713e59ed829afa56b95697670cdcfad7",
            "date": "2025-01-13T19:58:07Z",
            "author_login": "modelrailroader"
          },
          {
            "sha": "471ebc8577558da4bcdbf45f7b18ab75e33f9a37",
            "date": "2025-01-13T19:57:09Z",
            "author_login": "modelrailroader"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.12.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-31T02:15:06.570",
    "last_modified": "2024-11-21T07:39:50.590",
    "fix_date": "2023-03-12T13:50:23Z"
  },
  "references": [
    {
      "url": "https://github.com/thorsten/phpmyfaq/commit/ecbd8107fe954b6be95dab315862d1caa0b94efa",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/e8109aed-d364-4c0c-9545-4de0347b10e1",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/thorsten/phpmyfaq/commit/ecbd8107fe954b6be95dab315862d1caa0b94efa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/e8109aed-d364-4c0c-9545-4de0347b10e1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.029531",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "phpMyFAQ",
    "owner": "thorsten",
    "created_at": "2009-08-04T19:26:15Z",
    "updated_at": "2025-01-14T04:55:59Z",
    "pushed_at": "2025-01-14T04:56:02Z",
    "size": 56435,
    "stars": 589,
    "forks": 255,
    "open_issues": 19,
    "watchers": 589,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 9489706,
      "Twig": 348463,
      "JavaScript": 322766,
      "SCSS": 19741,
      "Shell": 9475,
      "Dockerfile": 2594,
      "CSS": 1125,
      "HTML": 205
    },
    "commit_activity": {
      "total_commits_last_year": 1338,
      "avg_commits_per_week": 25.73076923076923,
      "days_active_last_year": 282
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mpl-2.0"
    },
    "collected_at": "2025-01-14T13:07:11.405854"
  }
}