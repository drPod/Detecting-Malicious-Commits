{
  "cve_id": "CVE-2023-1786",
  "github_data": {
    "repository": "canonical/cloud-init",
    "fix_commit": "a378b7e4f47375458651c0972e7cd813f6fe0a6b",
    "related_commits": [
      "a378b7e4f47375458651c0972e7cd813f6fe0a6b",
      "a378b7e4f47375458651c0972e7cd813f6fe0a6b"
    ],
    "patch_url": "https://github.com/canonical/cloud-init/commit/a378b7e4f47375458651c0972e7cd813f6fe0a6b.patch",
    "fix_commit_details": {
      "sha": "a378b7e4f47375458651c0972e7cd813f6fe0a6b",
      "commit_date": "2023-04-26T20:11:55Z",
      "author": {
        "login": "TheRealFalcon",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Make user/vendor data sensitive and remove log permissions (#2144)",
        "length": 542,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 100,
        "additions": 77,
        "deletions": 23
      },
      "files": [
        {
          "filename": "cloudinit/sources/DataSourceLXD.py",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -14,7 +14,7 @@\n import time\n from enum import Flag, auto\n from json.decoder import JSONDecodeError\n-from typing import Any, Dict, List, Optional, Union, cast\n+from typing import Any, Dict, List, Optional, Tuple, Union, cast\n \n import requests\n from requests.adapters import HTTPAdapter\n@@ -168,11 +168,14 @@ class DataSourceLXD(sources.DataSource):\n     _network_config: Union[Dict, str] = sources.UNSET\n     _crawled_metadata: Union[Dict, str] = sources.UNSET\n \n-    sensitive_metadata_keys = (\n-        \"merged_cfg\",\n+    sensitive_metadata_keys: Tuple[\n+        str, ...\n+    ] = sources.DataSource.sensitive_metadata_keys + (\n         \"user.meta-data\",\n         \"user.vendor-data\",\n         \"user.user-data\",\n+        \"cloud-init.user-data\",\n+        \"cloud-init.vendor-data\",\n     )\n \n     skip_hotplug_detect = True"
        },
        {
          "filename": "cloudinit/sources/DataSourceVultr.py",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -5,6 +5,8 @@\n # Vultr Metadata API:\n # https://www.vultr.com/metadata/\n \n+from typing import Tuple\n+\n import cloudinit.sources.helpers.vultr as vultr\n from cloudinit import log as log\n from cloudinit import sources, stages, util, version\n@@ -28,6 +30,10 @@ class DataSourceVultr(sources.DataSource):\n \n     dsname = \"Vultr\"\n \n+    sensitive_metadata_keys: Tuple[\n+        str, ...\n+    ] = sources.DataSource.sensitive_metadata_keys + (\"startup-script\",)\n+\n     def __init__(self, sys_cfg, distro, paths):\n         super(DataSourceVultr, self).__init__(sys_cfg, distro, paths)\n         self.ds_cfg = util.mergemanydict(\n@@ -54,13 +60,8 @@ def _get_data(self):\n         self.get_datasource_data(self.metadata)\n \n         # Dump some data so diagnosing failures is manageable\n-        LOG.debug(\"Vultr Vendor Config:\")\n-        LOG.debug(util.json_dumps(self.metadata[\"vendor-data\"]))\n         LOG.debug(\"SUBID: %s\", self.metadata[\"instance-id\"])\n         LOG.debug(\"Hostname: %s\", self.metadata[\"local-hostname\"])\n-        if self.userdata_raw is not None:\n-            LOG.debug(\"User-Data:\")\n-            LOG.debug(self.userdata_raw)\n \n         return True\n \n@@ -155,6 +156,3 @@ def get_datasource_list(depends):\n     )\n     config = md[\"vendor-data\"]\n     sysinfo = vultr.get_sysinfo()\n-\n-    print(util.json_dumps(sysinfo))\n-    print(util.json_dumps(config))"
        },
        {
          "filename": "cloudinit/sources/__init__.py",
          "status": "modified",
          "additions": 25,
          "deletions": 3,
          "patch": "@@ -111,7 +111,10 @@ def process_instance_metadata(metadata, key_path=\"\", sensitive_keys=()):\n             sub_key_path = key_path + \"/\" + key\n         else:\n             sub_key_path = key\n-        if key in sensitive_keys or sub_key_path in sensitive_keys:\n+        if (\n+            key.lower() in sensitive_keys\n+            or sub_key_path.lower() in sensitive_keys\n+        ):\n             sens_keys.append(sub_key_path)\n         if isinstance(val, str) and val.startswith(\"ci-b64:\"):\n             base64_encoded_keys.append(sub_key_path)\n@@ -133,16 +136,27 @@ def redact_sensitive_keys(metadata, redact_value=REDACT_SENSITIVE_VALUE):\n \n     Replace any keys values listed in 'sensitive_keys' with redact_value.\n     \"\"\"\n+    # While 'sensitive_keys' should already sanitized to only include what\n+    # is in metadata, it is possible keys will overlap. For example, if\n+    # \"merged_cfg\" and \"merged_cfg/ds/userdata\" both match, it's possible that\n+    # \"merged_cfg\" will get replaced first, meaning \"merged_cfg/ds/userdata\"\n+    # no longer represents a valid key.\n+    # Thus, we still need to do membership checks in this function.\n     if not metadata.get(\"sensitive_keys\", []):\n         return metadata\n     md_copy = copy.deepcopy(metadata)\n     for key_path in metadata.get(\"sensitive_keys\"):\n         path_parts = key_path.split(\"/\")\n         obj = md_copy\n         for path in path_parts:\n-            if isinstance(obj[path], dict) and path != path_parts[-1]:\n+            if (\n+                path in obj\n+                and isinstance(obj[path], dict)\n+                and path != path_parts[-1]\n+            ):\n                 obj = obj[path]\n-        obj[path] = redact_value\n+        if path in obj:\n+            obj[path] = redact_value\n     return md_copy\n \n \n@@ -250,6 +264,14 @@ class DataSource(CloudInitPickleMixin, metaclass=abc.ABCMeta):\n     sensitive_metadata_keys: Tuple[str, ...] = (\n         \"merged_cfg\",\n         \"security-credentials\",\n+        \"userdata\",\n+        \"user-data\",\n+        \"user_data\",\n+        \"vendordata\",\n+        \"vendor-data\",\n+        # Provide ds/vendor_data to avoid redacting top-level\n+        #  \"vendor_data\": {enabled: True}\n+        \"ds/vendor_data\",\n     )\n \n     # True on datasources that may not see hotplugged devices reflected"
        },
        {
          "filename": "cloudinit/stages.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -203,7 +203,9 @@ def _initialize_filesystem(self):\n         util.ensure_dirs(self._initial_subdirs())\n         log_file = util.get_cfg_option_str(self.cfg, \"def_log_file\")\n         if log_file:\n-            util.ensure_file(log_file, mode=0o640, preserve_mode=True)\n+            # At this point the log file should have already been created\n+            # in the setupLogging function of log.py\n+            util.ensure_file(log_file, mode=0o640, preserve_mode=False)\n             perms = self.cfg.get(\"syslog_fix_perms\")\n             if not perms:\n                 perms = {}"
        },
        {
          "filename": "tests/unittests/sources/test_init.py",
          "status": "modified",
          "additions": 26,
          "deletions": 1,
          "patch": "@@ -458,12 +458,24 @@ def test_get_data_writes_redacted_public_json_instance_data(self):\n                         \"cred2\": \"othersekret\",\n                     }\n                 },\n+                \"someother\": {\n+                    \"nested\": {\n+                        \"userData\": \"HIDE ME\",\n+                    }\n+                },\n+                \"VENDOR-DAta\": \"HIDE ME TOO\",\n             },\n         )\n         self.assertCountEqual(\n             (\n                 \"merged_cfg\",\n                 \"security-credentials\",\n+                \"userdata\",\n+                \"user-data\",\n+                \"user_data\",\n+                \"vendordata\",\n+                \"vendor-data\",\n+                \"ds/vendor_data\",\n             ),\n             datasource.sensitive_metadata_keys,\n         )\n@@ -490,7 +502,9 @@ def test_get_data_writes_redacted_public_json_instance_data(self):\n             \"base64_encoded_keys\": [],\n             \"merged_cfg\": REDACT_SENSITIVE_VALUE,\n             \"sensitive_keys\": [\n+                \"ds/meta_data/VENDOR-DAta\",\n                 \"ds/meta_data/some/security-credentials\",\n+                \"ds/meta_data/someother/nested/userData\",\n                 \"merged_cfg\",\n             ],\n             \"sys_info\": sys_info,\n@@ -500,6 +514,7 @@ def test_get_data_writes_redacted_public_json_instance_data(self):\n                 \"availability_zone\": \"myaz\",\n                 \"cloud-name\": \"subclasscloudname\",\n                 \"cloud_name\": \"subclasscloudname\",\n+                \"cloud_id\": \"subclasscloudname\",\n                 \"distro\": \"ubuntu\",\n                 \"distro_release\": \"focal\",\n                 \"distro_version\": \"20.04\",\n@@ -522,14 +537,18 @@ def test_get_data_writes_redacted_public_json_instance_data(self):\n             \"ds\": {\n                 \"_doc\": EXPERIMENTAL_TEXT,\n                 \"meta_data\": {\n+                    \"VENDOR-DAta\": REDACT_SENSITIVE_VALUE,\n                     \"availability_zone\": \"myaz\",\n                     \"local-hostname\": \"test-subclass-hostname\",\n                     \"region\": \"myregion\",\n                     \"some\": {\"security-credentials\": REDACT_SENSITIVE_VALUE},\n+                    \"someother\": {\n+                        \"nested\": {\"userData\": REDACT_SENSITIVE_VALUE}\n+                    },\n                 },\n             },\n         }\n-        self.assertCountEqual(expected, redacted)\n+        self.assertEqual(expected, redacted)\n         file_stat = os.stat(json_file)\n         self.assertEqual(0o644, stat.S_IMODE(file_stat.st_mode))\n \n@@ -574,6 +593,12 @@ def test_get_data_writes_json_instance_data_sensitive(self):\n             (\n                 \"merged_cfg\",\n                 \"security-credentials\",\n+                \"userdata\",\n+                \"user-data\",\n+                \"user_data\",\n+                \"vendordata\",\n+                \"vendor-data\",\n+                \"ds/vendor_data\",\n             ),\n             datasource.sensitive_metadata_keys,\n         )"
        },
        {
          "filename": "tests/unittests/test_stages.py",
          "status": "modified",
          "additions": 11,
          "deletions": 7,
          "patch": "@@ -606,19 +606,23 @@ def test_log_files_existence_is_ensured_if_configured(self, init, tmpdir):\n         # Assert we create it 0o640  by default if it doesn't already exist\n         assert 0o640 == stat.S_IMODE(log_file.stat().mode)\n \n-    def test_existing_file_permissions_are_not_modified(self, init, tmpdir):\n-        \"\"\"If the log file already exists, we should not modify its permissions\n+    def test_existing_file_permissions(self, init, tmpdir):\n+        \"\"\"Test file permissions are set as expected.\n+\n+        CIS Hardening requires 640 permissions. These permissions are\n+        currently hardcoded on every boot, but if there's ever a reason\n+        to change this, we need to then ensure that they\n+        are *not* set every boot.\n \n         See https://bugs.launchpad.net/cloud-init/+bug/1900837.\n         \"\"\"\n-        # Use a mode that will never be made the default so this test will\n-        # always be valid\n-        mode = 0o606\n         log_file = tmpdir.join(\"cloud-init.log\")\n         log_file.ensure()\n-        log_file.chmod(mode)\n+        # Use a mode that will never be made the default so this test will\n+        # always be valid\n+        log_file.chmod(0o606)\n         init._cfg = {\"def_log_file\": str(log_file)}\n \n         init._initialize_filesystem()\n \n-        assert mode == stat.S_IMODE(log_file.stat().mode)\n+        assert 0o640 == stat.S_IMODE(log_file.stat().mode)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4ee65391499af538960c63d02a979fe38d21135f",
            "date": "2025-01-14T19:34:31Z",
            "author_login": "TheRealFalcon"
          },
          {
            "sha": "0547349214fcfb827e58c1de5e4ad7d23d08cc7f",
            "date": "2025-01-14T18:11:10Z",
            "author_login": "TheRealFalcon"
          },
          {
            "sha": "6cdf51ad5aa498e77126c330dc71b6578d710629",
            "date": "2025-01-13T19:39:48Z",
            "author_login": "holmanb"
          },
          {
            "sha": "38acce473626dc749dfb8bf3602e294df554c781",
            "date": "2025-01-10T18:02:52Z",
            "author_login": "ani-sinha"
          },
          {
            "sha": "1e719e3c190d2b94a4e2d7451ab13319b5944068",
            "date": "2025-01-08T22:43:33Z",
            "author_login": "holmanb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-532",
    "description": "Sensitive data could be exposed in logs of cloud-init before version 23.1.2. An attacker could use this information to find hashed passwords and possibly escalate their privilege.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-26T23:15:08.690",
    "last_modified": "2024-11-21T07:39:54.170",
    "fix_date": "2023-04-26T20:11:55Z"
  },
  "references": [
    {
      "url": "https://bugs.launchpad.net/cloud-init/+bug/2013967",
      "source": "security@ubuntu.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/canonical/cloud-init/commit/a378b7e4f47375458651c0972e7cd813f6fe0a6b",
      "source": "security@ubuntu.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ATBJSXPL2IOAD2LDQRKWPLIC7QXS44GZ/",
      "source": "security@ubuntu.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ubuntu.com/security/notices/USN-6042-1",
      "source": "security@ubuntu.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.launchpad.net/cloud-init/+bug/2013967",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/canonical/cloud-init/commit/a378b7e4f47375458651c0972e7cd813f6fe0a6b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ATBJSXPL2IOAD2LDQRKWPLIC7QXS44GZ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ubuntu.com/security/notices/USN-6042-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.844053",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cloud-init",
    "owner": "canonical",
    "created_at": "2014-10-08T15:54:41Z",
    "updated_at": "2025-01-14T05:07:02Z",
    "pushed_at": "2025-01-13T22:09:48Z",
    "size": 39098,
    "stars": 3065,
    "forks": 897,
    "open_issues": 555,
    "watchers": 3065,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 6253678,
      "Shell": 146302,
      "Makefile": 4390
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:04:56.926675"
  }
}