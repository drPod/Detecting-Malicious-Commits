{
  "cve_id": "CVE-2023-1801",
  "github_data": {
    "repository": "the-tcpdump-group/tcpdump",
    "fix_commit": "03c037bbd75588beba3ee09f26d17783d21e30bc",
    "related_commits": [
      "03c037bbd75588beba3ee09f26d17783d21e30bc",
      "7578e1c04ee280dda50c4c2813e7d55f539c6501",
      "03c037bbd75588beba3ee09f26d17783d21e30bc",
      "7578e1c04ee280dda50c4c2813e7d55f539c6501"
    ],
    "patch_url": "https://github.com/the-tcpdump-group/tcpdump/commit/03c037bbd75588beba3ee09f26d17783d21e30bc.patch",
    "fix_commit_details": {
      "sha": "03c037bbd75588beba3ee09f26d17783d21e30bc",
      "commit_date": "2023-01-31T07:03:16Z",
      "author": {
        "login": "guyharris",
        "type": "User",
        "stats": {
          "total_commits": 1754,
          "average_weekly_commits": 1.3287878787878789,
          "total_additions": 334479,
          "total_deletions": 321814,
          "weeks_active": 331
        }
      },
      "commit_message": {
        "title": "Have a common routine for converting dates and times to strings.",
        "length": 931,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 138,
        "additions": 77,
        "deletions": 61
      },
      "files": [
        {
          "filename": "netdissect.h",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -423,6 +423,9 @@ extern void ts_print(netdissect_options *, const struct timeval *);\n extern void signed_relts_print(netdissect_options *, int32_t);\n extern void unsigned_relts_print(netdissect_options *, uint32_t);\n \n+extern const char *nd_format_time(char *buf, size_t bufsize,\n+    const char *format, const struct tm *timeptr);\n+\n extern void fn_print_char(netdissect_options *, u_char);\n extern void fn_print_str(netdissect_options *, const u_char *);\n extern u_int nd_printztn(netdissect_options *, const u_char *, u_int, const u_char *);"
        },
        {
          "filename": "ntp.c",
          "status": "modified",
          "additions": 6,
          "deletions": 15,
          "patch": "@@ -54,30 +54,21 @@ p_ntp_time(netdissect_options *ndo,\n \tif (i) {\n \t    int64_t seconds_64bit = (int64_t)i - JAN_1970;\n \t    time_t seconds;\n-\t    struct tm *tm;\n \t    char time_buf[128];\n+\t    const char *time_string;\n \n \t    seconds = (time_t)seconds_64bit;\n \t    if (seconds != seconds_64bit) {\n \t\t/*\n \t\t * It doesn't fit into a time_t, so we can't hand it\n \t\t * to gmtime.\n \t\t */\n-\t\tND_PRINT(\" (unrepresentable)\");\n+\t\ttime_string = \"[Time is too large to fit into a time_t]\";\n \t    } else {\n-\t\ttm = gmtime(&seconds);\n-\t\tif (tm == NULL) {\n-\t\t    /*\n-\t\t     * gmtime() can't handle it.\n-\t\t     * (Yes, that might happen with some version of\n-\t\t     * Microsoft's C library.)\n-\t\t     */\n-\t\t    ND_PRINT(\" (unrepresentable)\");\n-\t\t} else {\n-\t\t    /* use ISO 8601 (RFC3339) format */\n-\t\t    strftime(time_buf, sizeof (time_buf), \"%Y-%m-%dT%H:%M:%SZ\", tm);\n-\t\t    ND_PRINT(\" (%s)\", time_buf);\n-\t\t}\n+\t\t/* use ISO 8601 (RFC3339) format */\n+\t\ttime_string = nd_format_time(time_buf, sizeof (time_buf),\n+\t\t  \"%Y-%m-%dT%H:%M:%SZ\", gmtime(&seconds));\n \t    }\n+\t    ND_PRINT(\" (%s)\", time_string);\n \t}\n }"
        },
        {
          "filename": "print-ahcp.c",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -102,18 +102,14 @@ ahcp_time_print(netdissect_options *ndo,\n                 const u_char *cp, uint8_t len)\n {\n \ttime_t t;\n-\tstruct tm *tm;\n-\tchar buf[BUFSIZE];\n+\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss UTC\")];\n \n \tif (len != 4)\n \t\tgoto invalid;\n \tt = GET_BE_U_4(cp);\n-\tif (NULL == (tm = gmtime(&t)))\n-\t\tND_PRINT(\": gmtime() error\");\n-\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n-\t\tND_PRINT(\": strftime() error\");\n-\telse\n-\t\tND_PRINT(\": %s UTC\", buf);\n+\tND_PRINT(\": %s\",\n+\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S UTC\",\n+\t      gmtime(&t)));\n \treturn;\n \n invalid:"
        },
        {
          "filename": "print-arista.c",
          "status": "modified",
          "additions": 4,
          "deletions": 9,
          "patch": "@@ -10,7 +10,6 @@\n \n #include \"netdissect.h\"\n #include \"extract.h\"\n-#include \"addrtoname.h\"\n \n /*\n \n@@ -93,17 +92,13 @@ arista_print_date_hms_time(netdissect_options *ndo, uint32_t seconds,\n \t\tuint32_t nanoseconds)\n {\n \ttime_t ts;\n-\tstruct tm *tm;\n-\tchar buf[BUFSIZE];\n+\tchar buf[sizeof(\"-yyyyyyyyyy-mm-dd hh:mm:ss\")];\n \n \tts = seconds + (nanoseconds / 1000000000);\n \tnanoseconds %= 1000000000;\n-\tif (NULL == (tm = gmtime(&ts)))\n-\t\tND_PRINT(\"gmtime() error\");\n-\telse if (0 == strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm))\n-\t\tND_PRINT(\"strftime() error\");\n-\telse\n-\t\tND_PRINT(\"%s.%09u\", buf, nanoseconds);\n+\tND_PRINT(\"%s.%09u\",\n+\t    nd_format_time(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\",\n+\t       gmtime(&ts)), nanoseconds);\n }\n \n int"
        },
        {
          "filename": "print-rx.c",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -794,12 +794,12 @@ rx_cache_find(netdissect_options *ndo, const struct rx_header *rxh,\n \t\t\tND_PRINT(\" %\" PRIu64, _i); \\\n \t\t}\n \n-#define DATEOUT() { time_t _t; struct tm *tm; char str[256]; \\\n+#define DATEOUT() { time_t _t; char str[256]; \\\n \t\t\t_t = (time_t) GET_BE_S_4(bp); \\\n \t\t\tbp += sizeof(int32_t); \\\n-\t\t\ttm = localtime(&_t); \\\n-\t\t\tstrftime(str, 256, \"%Y/%m/%d %H:%M:%S\", tm); \\\n-\t\t\tND_PRINT(\" %s\", str); \\\n+\t\t\tND_PRINT(\" %s\", \\\n+\t\t\t    nd_format_time(str, sizeof(str), \\\n+\t\t\t      \"%Y/%m/%d %H:%M:%S\", localtime(&_t))); \\\n \t\t}\n \n #define STOREATTROUT() { uint32_t mask, _i; \\"
        },
        {
          "filename": "print-zep.c",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -82,12 +82,11 @@ static void zep_print_ts(netdissect_options *ndo, const u_char *p)\n \t */\n \tif (i) {\n \t\ttime_t seconds = i - JAN_1970;\n-\t\tstruct tm *tm;\n \t\tchar time_buf[128];\n \n-\t\ttm = localtime(&seconds);\n-\t\tstrftime(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\", tm);\n-\t\tND_PRINT(\" (%s)\", time_buf);\n+\t\tND_PRINT(\" (%s)\",\n+\t\t    nd_format_time(time_buf, sizeof (time_buf), \"%Y/%m/%d %H:%M:%S\",\n+\t\t      localtime(&seconds)));\n \t}\n }\n "
        },
        {
          "filename": "smbutil.c",
          "status": "modified",
          "additions": 5,
          "deletions": 11,
          "patch": "@@ -768,9 +768,8 @@ smb_fdata1(netdissect_options *ndo,\n \tcase 'T':\n \t  {\n \t    time_t t;\n-\t    struct tm *lt;\n \t    const char *tstring;\n-\t    char buffer[sizeof(\"Www Mmm dd hh:mm:ss yyyyy\\n\")];\n+\t    char buffer[sizeof(\"Www Mmm dd hh:mm:ss yyyyy\")];\n \t    uint32_t x;\n \n \t    switch (atoi(fmt + 1)) {\n@@ -800,16 +799,11 @@ smb_fdata1(netdissect_options *ndo,\n \t\tbreak;\n \t    }\n \t    if (t != 0) {\n-\t\tlt = localtime(&t);\n-\t\tif (lt != NULL) {\n-\t\t    strftime(buffer, sizeof(buffer), \"%a %b %e %T %Y%n\", lt);\n-\t\t    tstring = buffer;\n-\t\t}\n-\t\telse\n-\t\t    tstring = \"(Can't convert time)\\n\";\n+\t\t    tstring = nd_format_time(buffer, sizeof(buffer), \"%a %b %e %T %Y\",\n+\t\t    localtime(&t));\n \t    } else\n-\t\ttstring = \"NULL\\n\";\n-\t    ND_PRINT(\"%s\", tstring);\n+\t\ttstring = \"NULL\";\n+\t    ND_PRINT(\"%s\\n\", tstring);\n \t    fmt++;\n \t    while (ND_ASCII_ISDIGIT(*fmt))\n \t\tfmt++;"
        },
        {
          "filename": "tcpdump.c",
          "status": "modified",
          "additions": 20,
          "deletions": 2,
          "patch": "@@ -843,6 +843,8 @@ MakeFilename(char *buffer, char *orig_name, int cnt, int max_chars)\n         char *filename = malloc(PATH_MAX + 1);\n         if (filename == NULL)\n             error(\"%s: malloc\", __func__);\n+        if (strlen(orig_name) == 0)\n+            error(\"an empty string is not a valid file name\");\n \n         /* Process with strftime if Gflag is set. */\n         if (Gflag != 0) {\n@@ -854,9 +856,25 @@ MakeFilename(char *buffer, char *orig_name, int cnt, int max_chars)\n           }\n \n           /* There's no good way to detect an error in strftime since a return\n-           * value of 0 isn't necessarily failure.\n+           * value of 0 isn't necessarily failure; if orig_name is an empty\n+           * string, the formatted string will be empty.\n+           *\n+           * However, the C90 standard says that, if there *is* a\n+           * buffer overflow, the content of the buffer is undefined,\n+           * so we must check for a buffer overflow.\n+           *\n+           * So we check above for an empty orig_name, and only call\n+           * strftime() if it's non-empty, in which case the return\n+           * value will only be 0 if the formatted date doesn't fit\n+           * in the buffer.\n+           *\n+           * (We check above because, even if we don't use -G, we\n+           * want a better error message than \"tcpdump: : No such\n+           * file or directory\" for this case.)\n            */\n-          strftime(filename, PATH_MAX, orig_name, local_tm);\n+          if (strftime(filename, PATH_MAX, orig_name, local_tm) == 0) {\n+            error(\"%s: strftime\", __func__);\n+          }\n         } else {\n           strncpy(filename, orig_name, PATH_MAX);\n         }"
        },
        {
          "filename": "util-print.c",
          "status": "modified",
          "additions": 28,
          "deletions": 8,
          "patch": "@@ -230,7 +230,8 @@ ts_date_hmsfrac_print(netdissect_options *ndo, long sec, long usec,\n {\n \ttime_t Time = sec;\n \tstruct tm *tm;\n-\tchar timestr[32];\n+\tchar timebuf[32];\n+\tconst char *timestr;\n \n \tif ((unsigned)sec & 0x80000000) {\n \t\tND_PRINT(\"[Error converting time]\");\n@@ -242,14 +243,13 @@ ts_date_hmsfrac_print(netdissect_options *ndo, long sec, long usec,\n \telse\n \t\ttm = gmtime(&Time);\n \n-\tif (!tm) {\n-\t\tND_PRINT(\"[Error converting time]\");\n-\t\treturn;\n+\tif (date_flag == WITH_DATE) {\n+\t\ttimestr = nd_format_time(timebuf, sizeof(timebuf),\n+\t\t    \"%Y-%m-%d %H:%M:%S\", tm);\n+\t} else {\n+\t\ttimestr = nd_format_time(timebuf, sizeof(timebuf),\n+\t\t    \"%H:%M:%S\", tm);\n \t}\n-\tif (date_flag == WITH_DATE)\n-\t\tstrftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm);\n-\telse\n-\t\tstrftime(timestr, sizeof(timestr), \"%H:%M:%S\", tm);\n \tND_PRINT(\"%s\", timestr);\n \n \tts_frac_print(ndo, usec);\n@@ -405,6 +405,26 @@ signed_relts_print(netdissect_options *ndo,\n \tunsigned_relts_print(ndo, secs);\n }\n \n+/*\n+ * Format a struct tm with strftime().\n+ * If the pointer to the struct tm is null, that means that the\n+ * routine to convert a time_t to a struct tm failed; the localtime()\n+ * and gmtime() in the Microsoft Visual Studio C library will fail,\n+ * returning null, if the value is before the UNIX Epoch.\n+ */\n+const char *\n+nd_format_time(char *buf, size_t bufsize, const char *format,\n+         const struct tm *timeptr)\n+{\n+\tif (timeptr != NULL) {\n+\t\tif (strftime(buf, bufsize, format, timeptr) != 0)\n+\t\t\treturn (buf);\n+\t\telse\n+\t\t\treturn (\"[nd_format_time() buffer is too small]\");\n+\t} else\n+\t\treturn (\"[localtime() or gmtime() couldn't convert the date and time]\");\n+}\n+\n /* Print the truncated string */\n void nd_print_trunc(netdissect_options *ndo)\n {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "05a263a5418a9e5b971509c486246eb0913c8aea",
            "date": "2025-01-12T21:05:02Z",
            "author_login": "fxlb"
          },
          {
            "sha": "9aee9964aaee40750acde45f838f48eb8f95fbe3",
            "date": "2025-01-09T15:35:53Z",
            "author_login": "fxlb"
          },
          {
            "sha": "6cd500c8dafe5a9bbf3e56312493709e8b118726",
            "date": "2025-01-08T20:12:09Z",
            "author_login": "fxlb"
          },
          {
            "sha": "c5b54bfbd68b03f7997feaa277db30d399975a4d",
            "date": "2022-10-11T20:10:46Z",
            "author_login": "fenner"
          },
          {
            "sha": "431bdb5c365360d61968e7fa02322825b1da4208",
            "date": "2025-01-07T19:21:12Z",
            "author_login": "fxlb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-787",
    "description": "The SMB protocol decoder in tcpdump version 4.99.3 can perform an out-of-bounds write when decoding a crafted network packet.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-07T21:15:06.873",
    "last_modified": "2024-11-21T07:39:55.960",
    "fix_date": "2023-01-31T07:03:16Z"
  },
  "references": [
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/03c037bbd75588beba3ee09f26d17783d21e30bc",
      "source": "security@tcpdump.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/7578e1c04ee280dda50c4c2813e7d55f539c6501",
      "source": "security@tcpdump.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KOA2BJFERAC3VRQIRHJOWN4HZY4ZA7CH/",
      "source": "security@tcpdump.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WYL5DEVHRJYF2CM5LTCZKEYFYDZAIZSN/",
      "source": "security@tcpdump.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZLLZCG23MU6O4QOG2CX3DLEL3YXP6LAI/",
      "source": "security@tcpdump.org",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213844",
      "source": "security@tcpdump.org",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213845",
      "source": "security@tcpdump.org",
      "tags": []
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/03c037bbd75588beba3ee09f26d17783d21e30bc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/7578e1c04ee280dda50c4c2813e7d55f539c6501",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KOA2BJFERAC3VRQIRHJOWN4HZY4ZA7CH/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WYL5DEVHRJYF2CM5LTCZKEYFYDZAIZSN/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZLLZCG23MU6O4QOG2CX3DLEL3YXP6LAI/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213844",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213845",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.716675",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tcpdump",
    "owner": "the-tcpdump-group",
    "created_at": "2013-04-14T21:46:15Z",
    "updated_at": "2025-01-14T07:48:01Z",
    "pushed_at": "2025-01-13T06:19:33Z",
    "size": 27691,
    "stars": 2789,
    "forks": 860,
    "open_issues": 115,
    "watchers": 2789,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "tcpdump-3.5",
      "tcpdump-3.6",
      "tcpdump-3.7",
      "tcpdump-3.8",
      "tcpdump-3.9",
      "tcpdump-4.0",
      "tcpdump-4.1",
      "tcpdump-4.2",
      "tcpdump-4.3",
      "tcpdump-4.4",
      "tcpdump-4.5",
      "tcpdump-4.6",
      "tcpdump-4.7",
      "tcpdump-4.8",
      "tcpdump-4.9",
      "tcpdump-4.99"
    ],
    "languages": {
      "C": 3548298,
      "CMake": 76892,
      "Roff": 66849,
      "Shell": 50525,
      "M4": 31504,
      "Perl": 29240,
      "Makefile": 14259,
      "Awk": 4120,
      "GDB": 660
    },
    "commit_activity": {
      "total_commits_last_year": 314,
      "avg_commits_per_week": 6.038461538461538,
      "days_active_last_year": 158
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:48.453717"
  }
}