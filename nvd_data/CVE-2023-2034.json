{
  "cve_id": "CVE-2023-2034",
  "github_data": {
    "repository": "froxlor/froxlor",
    "fix_commit": "f36bc61fc74c85a21c8d31448198b11f96eb3bc6",
    "related_commits": [
      "f36bc61fc74c85a21c8d31448198b11f96eb3bc6",
      "f36bc61fc74c85a21c8d31448198b11f96eb3bc6"
    ],
    "patch_url": "https://github.com/froxlor/froxlor/commit/f36bc61fc74c85a21c8d31448198b11f96eb3bc6.patch",
    "fix_commit_details": {
      "sha": "f36bc61fc74c85a21c8d31448198b11f96eb3bc6",
      "commit_date": "2023-03-08T08:33:30Z",
      "author": {
        "login": "d00p",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "better validation for uploaded/imported image files",
        "length": 103,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 152,
        "additions": 84,
        "deletions": 68
      },
      "files": [
        {
          "filename": "lib/Froxlor/SImExporter.php",
          "status": "modified",
          "additions": 24,
          "deletions": 35,
          "patch": "@@ -28,6 +28,7 @@\n use Exception;\n use Froxlor\\Database\\Database;\n use Froxlor\\UI\\Form;\n+use Froxlor\\Validate\\Validate;\n use PDO;\n \n /**\n@@ -159,6 +160,9 @@ public static function import($json_str = null)\n \t\t\t// re-format the array-key for Form::processForm\n \t\t\tforeach ($_data as $key => $value) {\n \t\t\t\t$index_split = explode('.', $key, 3);\n+\t\t\t\tif (!isset($current_settings[$index_split[0]][$index_split[1]])) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n \t\t\t\tif (isset($index_split[2]) && $index_split[2] === 'image_data' && !empty($_data[$index_split[0] . '.' . $index_split[1]])) {\n \t\t\t\t\t$image_data[$key] = $value;\n \t\t\t\t} else {\n@@ -190,42 +194,27 @@ public static function import($json_str = null)\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \n-\t\t\t\t\t\t$img_data = base64_decode($value);\n-\t\t\t\t\t\t$img_filename = Froxlor::getInstallDir() . '/' . str_replace('../', '',\n-\t\t\t\t\t\t\t\texplode('?', $_data[$index_split[0] . '.' . $index_split[1]], 2)[0]);\n-\n-\t\t\t\t\t\tfile_put_contents($img_filename, $img_data);\n-\n-\t\t\t\t\t\tif (function_exists('finfo_open')) {\n-\t\t\t\t\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);\n-\t\t\t\t\t\t\t$mimetype = finfo_file($finfo, $img_filename);\n-\t\t\t\t\t\t\tfinfo_close($finfo);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t$mimetype = mime_content_type($img_filename);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tif (empty($mimetype)) {\n-\t\t\t\t\t\t\t$mimetype = 'application/octet-stream';\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tif (!in_array($mimetype, ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'])) {\n-\t\t\t\t\t\t\t@unlink($img_filename);\n-\t\t\t\t\t\t\tthrow new Exception(\"Uploaded file is not a valid image\");\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t$spl = explode('.', $img_filename);\n-\t\t\t\t\t\t$file_extension = strtolower(array_pop($spl));\n-\t\t\t\t\t\tunset($spl);\n-\n-\t\t\t\t\t\tif (!in_array($file_extension, [\n-\t\t\t\t\t\t\t'jpeg',\n-\t\t\t\t\t\t\t'jpg',\n-\t\t\t\t\t\t\t'png',\n-\t\t\t\t\t\t\t'gif'\n-\t\t\t\t\t\t])) {\n-\t\t\t\t\t\t\t@unlink($img_filename);\n-\t\t\t\t\t\t\tthrow new Exception(\"Invalid file-extension, use one of: jpeg, jpg, png, gif\");\n+\t\t\t\t\t\tif (Validate::validateBase64Image($value)) {\n+\t\t\t\t\t\t\t$img_data = base64_decode($value);\n+\t\t\t\t\t\t\t$img_filename = explode('?', $_data[$index_split[0] . '.' . $index_split[1]], 2)[0];\n+\n+\t\t\t\t\t\t\t$spl = explode('.', $img_filename);\n+\t\t\t\t\t\t\t$file_extension = strtolower(array_pop($spl));\n+\t\t\t\t\t\t\tunset($spl);\n+\n+\t\t\t\t\t\t\tif (!in_array($file_extension, [\n+\t\t\t\t\t\t\t\t'jpeg',\n+\t\t\t\t\t\t\t\t'jpg',\n+\t\t\t\t\t\t\t\t'png',\n+\t\t\t\t\t\t\t\t'gif'\n+\t\t\t\t\t\t\t])) {\n+\t\t\t\t\t\t\t\tthrow new Exception(\"Invalid file-extension, use one of: jpeg, jpg, png, gif\");\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t$img_filename = 'img/' . bin2hex(random_bytes(16)) . '.' . $file_extension;\n+\t\t\t\t\t\t\tfile_put_contents(Froxlor::getInstallDir() . '/' . $img_filename, $img_data);\n+\t\t\t\t\t\t\t$img_index = $index_split[0].'.'.$index_split[1];\n+\t\t\t\t\t\t\tSettings::Set($img_index, $img_filename . '?v=' . time());\n \t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tSettings::Set($index, $value);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t// all good"
        },
        {
          "filename": "lib/Froxlor/Settings/Store.php",
          "status": "modified",
          "additions": 24,
          "deletions": 33,
          "patch": "@@ -36,6 +36,7 @@\n use Froxlor\\Settings;\n use Froxlor\\System\\Cronjob;\n use Froxlor\\System\\IPTools;\n+use Froxlor\\Validate\\Validate;\n use PDO;\n \n class Store\n@@ -415,40 +416,30 @@ public static function storeSettingImage($fieldname, $fielddata)\n \t\t\t\t}\n \n \t\t\t\t// Make sure mime-type matches an image\n-\t\t\t\tif (function_exists('finfo_open')) {\n-\t\t\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);\n-\t\t\t\t\t$mimetype = finfo_file($finfo, $_FILES[$fieldname]['tmp_name']);\n-\t\t\t\t\tfinfo_close($finfo);\n-\t\t\t\t} else {\n-\t\t\t\t\t$mimetype = mime_content_type($_FILES[$fieldname]['tmp_name']);\n-\t\t\t\t}\n-\t\t\t\tif (empty($mimetype)) {\n-\t\t\t\t\t$mimetype = 'application/octet-stream';\n-\t\t\t\t}\n-\t\t\t\tif (!in_array($mimetype, ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'])) {\n-\t\t\t\t\tthrow new \\Exception(\"Uploaded file is not a valid image\");\n-\t\t\t\t}\n-\n-\t\t\t\t// Determine file extension\n-\t\t\t\t$spl = explode('.', $_FILES[$fieldname]['name']);\n-\t\t\t\t$file_extension = strtolower(array_pop($spl));\n-\t\t\t\tunset($spl);\n-\n-\t\t\t\tif (!in_array($file_extension, [\n-\t\t\t\t\t'jpeg',\n-\t\t\t\t\t'jpg',\n-\t\t\t\t\t'png',\n-\t\t\t\t\t'gif'\n-\t\t\t\t])) {\n-\t\t\t\t\tthrow new Exception(\"Invalid file-extension, use one of: jpeg, jpg, png, gif\");\n-\t\t\t\t}\n-\n-\t\t\t\t// Move file\n-\t\t\t\tif (!move_uploaded_file($_FILES[$fieldname]['tmp_name'], $path . $fielddata['image_name'] . '.' . $file_extension)) {\n-\t\t\t\t\tthrow new Exception(\"Unable to save image to img folder\");\n+\t\t\t\t$image_content = file_get_contents($_FILES[$fieldname]['tmp_name']);\n+\t\t\t\t$value = base64_encode($image_content);\n+\t\t\t\tif (Validate::validateBase64Image($value)) {\n+\t\t\t\t\t$img_filename = $_FILES[$fieldname]['name'];\n+\n+\t\t\t\t\t$spl = explode('.', $img_filename);\n+\t\t\t\t\t$file_extension = strtolower(array_pop($spl));\n+\t\t\t\t\tunset($spl);\n+\n+\t\t\t\t\tif (!in_array($file_extension, [\n+\t\t\t\t\t\t'jpeg',\n+\t\t\t\t\t\t'jpg',\n+\t\t\t\t\t\t'png',\n+\t\t\t\t\t\t'gif'\n+\t\t\t\t\t])) {\n+\t\t\t\t\t\tthrow new Exception(\"Invalid file-extension, use one of: jpeg, jpg, png, gif\");\n+\t\t\t\t\t}\n+\t\t\t\t\t$filename = bin2hex(random_bytes(16)) . '.' . $file_extension;\n+\t\t\t\t\t// Move file\n+\t\t\t\t\tif (!move_uploaded_file($_FILES[$fieldname]['tmp_name'], $path . $filename)) {\n+\t\t\t\t\t\tthrow new Exception(\"Unable to save image to img folder\");\n+\t\t\t\t\t}\n+\t\t\t\t\t$save_to = 'img/' . $filename . '?v=' . time();\n \t\t\t\t}\n-\n-\t\t\t\t$save_to = 'img/' . $fielddata['image_name'] . '.' . $file_extension . '?v=' . time();\n \t\t\t}\n \n \t\t\t// Delete file?"
        },
        {
          "filename": "lib/Froxlor/Validate/Validate.php",
          "status": "modified",
          "additions": 36,
          "deletions": 0,
          "patch": "@@ -334,4 +334,40 @@ public static function validateSqlInterval(string $interval = ''): bool\n \t\t}\n \t\treturn false;\n \t}\n+\n+\t/**\n+\t * validates whether a given base64 string decodes to an image\n+\t *\n+\t * @param string $base64string\n+\t * @return bool\n+\t * @throws Exception\n+\t */\n+\tpublic static function validateBase64Image(string $base64string) {\n+\n+\t\tif (!extension_loaded('gd')) {\n+\t\t\tResponse::standardError('phpgdextensionnotavailable', null, true);\n+\t\t}\n+\n+\t\t// Decode the base64 string\n+\t\t$data = base64_decode($base64string);\n+\n+\t\t// Create an image from the decoded data\n+\t\t$image = @imagecreatefromstring($data);\n+\n+\t\t// Check if the image was created successfully\n+\t\tif (!$image) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// Get the MIME type of the image\n+\t\t$mime = image_type_to_mime_type(getimagesizefromstring($data)[2]);\n+\n+\t\t// Check if the MIME type is a valid image MIME type\n+\t\tif (strpos($mime, 'image/') !== 0) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// If everything is okay, return true\n+\t\treturn true;\n+\t}\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ec42003367df64c5645a9d5ee5bcd95c75a82b6c",
            "date": "2025-01-12T15:53:05Z",
            "author_login": "d00p"
          },
          {
            "sha": "fde43f80600f1035e1e3d2297411b666d805549a",
            "date": "2025-01-12T09:27:44Z",
            "author_login": "d00p"
          },
          {
            "sha": "a43d53d54034805e3e404702a01312fa0c40b623",
            "date": "2025-01-12T09:27:02Z",
            "author_login": "d00p"
          },
          {
            "sha": "3638dc08ea4fe55ce0d2458cdcb436cfb5697ed3",
            "date": "2024-12-24T08:34:59Z",
            "author_login": "d00p"
          },
          {
            "sha": "c2d166c86666f4c50c1402c1b3a2986ddabeee90",
            "date": "2024-12-19T07:59:00Z",
            "author_login": "d00p"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "Unrestricted Upload of File with Dangerous Type in GitHub repository froxlor/froxlor prior to 2.0.14.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-14T01:15:08.847",
    "last_modified": "2024-11-21T07:57:48.120",
    "fix_date": "2023-03-08T08:33:30Z"
  },
  "references": [
    {
      "url": "https://github.com/froxlor/froxlor/commit/f36bc61fc74c85a21c8d31448198b11f96eb3bc6",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/aba6beaa-570e-4523-8128-da4d8e374ef6",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/froxlor/froxlor/commit/f36bc61fc74c85a21c8d31448198b11f96eb3bc6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/aba6beaa-570e-4523-8128-da4d8e374ef6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.737567",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Froxlor",
    "owner": "froxlor",
    "created_at": "2012-03-06T15:14:46Z",
    "updated_at": "2025-01-12T15:57:15Z",
    "pushed_at": "2025-01-12T15:57:10Z",
    "size": 28867,
    "stars": 1651,
    "forks": 457,
    "open_issues": 35,
    "watchers": 1651,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "extras",
      "main"
    ],
    "languages": {
      "PHP": 3752037,
      "Twig": 153143,
      "HTML": 28494,
      "SCSS": 8015,
      "JavaScript": 942
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T14:34:15.893221"
  }
}