{
  "cve_id": "CVE-2023-22462",
  "github_data": {
    "repository": "grafana/grafana",
    "fix_commit": "db83d5f398caffe35c5846cfa7727d1a2a414165",
    "related_commits": [
      "db83d5f398caffe35c5846cfa7727d1a2a414165",
      "db83d5f398caffe35c5846cfa7727d1a2a414165"
    ],
    "patch_url": "https://github.com/grafana/grafana/commit/db83d5f398caffe35c5846cfa7727d1a2a414165.patch",
    "fix_commit_details": {
      "sha": "db83d5f398caffe35c5846cfa7727d1a2a414165",
      "commit_date": "2023-01-03T14:11:50Z",
      "author": {
        "login": "grafanabot",
        "type": "User",
        "stats": {
          "total_commits": 298,
          "average_weekly_commits": 0.5129087779690189,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 135
        }
      },
      "commit_message": {
        "title": "[v9.3.x] Plugins: Fix plugin query help markdown  (#60907)",
        "length": 479,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 89,
        "additions": 19,
        "deletions": 70
      },
      "files": [
        {
          "filename": "pkg/api/plugins.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -270,7 +270,7 @@ func (hs *HTTPServer) GetPluginMarkdown(c *models.ReqContext) response.Response\n \n \t// fallback try readme\n \tif len(content) == 0 {\n-\t\tcontent, err = hs.pluginMarkdown(c.Req.Context(), pluginID, \"help\")\n+\t\tcontent, err = hs.pluginMarkdown(c.Req.Context(), pluginID, \"readme\")\n \t\tif err != nil {\n \t\t\treturn response.Error(501, \"Could not get markdown file\", err)\n \t\t}"
        },
        {
          "filename": "public/app/core/components/PluginHelp/PluginHelp.tsx",
          "status": "modified",
          "additions": 17,
          "deletions": 68,
          "patch": "@@ -1,83 +1,32 @@\n-import React, { PureComponent } from 'react';\n+import React from 'react';\n+import { useAsync } from 'react-use';\n \n import { renderMarkdown } from '@grafana/data';\n import { getBackendSrv } from '@grafana/runtime';\n+import { LoadingPlaceholder } from '@grafana/ui';\n \n interface Props {\n-  plugin: {\n-    name: string;\n-    id: string;\n-  };\n-  type: string;\n+  pluginId: string;\n }\n \n-interface State {\n-  isError: boolean;\n-  isLoading: boolean;\n-  help: string;\n-}\n+export function PluginHelp({ pluginId }: Props) {\n+  const { value, loading, error } = useAsync(async () => {\n+    return getBackendSrv().get(`/api/plugins/${pluginId}/markdown/query_help`);\n+  }, []);\n \n-export class PluginHelp extends PureComponent<Props, State> {\n-  state = {\n-    isError: false,\n-    isLoading: false,\n-    help: '',\n-  };\n+  const renderedMarkdown = renderMarkdown(value);\n \n-  componentDidMount(): void {\n-    this.loadHelp();\n+  if (loading) {\n+    return <LoadingPlaceholder text=\"Loading help...\" />;\n   }\n \n-  constructPlaceholderInfo() {\n-    return 'No plugin help or readme markdown file was found';\n+  if (error) {\n+    return <h3>An error occurred when loading help.</h3>;\n   }\n \n-  loadHelp = () => {\n-    const { plugin, type } = this.props;\n-    this.setState({ isLoading: true });\n-\n-    getBackendSrv()\n-      .get(`/api/plugins/${plugin.id}/markdown/${type}`)\n-      .then((response: string) => {\n-        const helpHtml = renderMarkdown(response);\n-\n-        if (response === '' && type === 'help') {\n-          this.setState({\n-            isError: false,\n-            isLoading: false,\n-            help: this.constructPlaceholderInfo(),\n-          });\n-        } else {\n-          this.setState({\n-            isError: false,\n-            isLoading: false,\n-            help: helpHtml,\n-          });\n-        }\n-      })\n-      .catch(() => {\n-        this.setState({\n-          isError: true,\n-          isLoading: false,\n-        });\n-      });\n-  };\n-\n-  render() {\n-    const { type } = this.props;\n-    const { isError, isLoading, help } = this.state;\n-\n-    if (isLoading) {\n-      return <h2>Loading help...</h2>;\n-    }\n-\n-    if (isError) {\n-      return <h3>&apos;Error occurred when loading help&apos;</h3>;\n-    }\n-\n-    if (type === 'panel_help' && help === '') {\n-    }\n-\n-    return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: help }} />;\n+  if (value === '') {\n+    return <h3>No query help could be found.</h3>;\n   }\n+\n+  return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: renderedMarkdown }} />;\n }"
        },
        {
          "filename": "public/app/features/query/components/QueryGroup.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -364,7 +364,7 @@ export class QueryGroup extends PureComponent<Props, State> {\n               {this.renderAddQueryRow(dsSettings, styles)}\n               {isHelpOpen && (\n                 <Modal title=\"Data source help\" isOpen={true} onDismiss={this.onCloseHelp}>\n-                  <PluginHelp plugin={dsSettings.meta} type=\"query_help\" />\n+                  <PluginHelp pluginId={dsSettings.meta.id} />\n                 </Modal>\n               )}\n             </>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f7e0710f532ea3ae18083afc28c2516e9deb6135",
            "date": "2025-01-14T16:01:34Z",
            "author_login": "ifrost"
          },
          {
            "sha": "e38bab43dbfe07495fcbfaf01dad403ec0547659",
            "date": "2025-01-14T15:09:32Z",
            "author_login": "edvard-falkskar"
          },
          {
            "sha": "1ff4053f0391ed8b42cb1048a35a726da6ded97a",
            "date": "2025-01-14T15:06:41Z",
            "author_login": "gabor"
          },
          {
            "sha": "ce0d9866738334e78a832849b81ebf9969e0c6a9",
            "date": "2025-01-14T15:00:59Z",
            "author_login": "kalleep"
          },
          {
            "sha": "7151ea6abc4336f72b837adec679891483ab963b",
            "date": "2025-01-14T14:58:38Z",
            "author_login": "spinillos"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "Grafana is an open-source platform for monitoring and observability. On 2023-01-01 during an internal audit of Grafana, a member of the security team found a stored XSS vulnerability affecting the core plugin \"Text\". The stored XSS vulnerability requires several user interactions in order to be fully exploited. The vulnerability was possible due to React's render cycle that will pass though the unsanitized HTML code, but in the next cycle the HTML is cleaned up and saved in Grafana's database. An attacker needs to have the Editor role in order to change a Text panel to include JavaScript. Another user needs to edit the same Text panel, and click on \"Markdown\" or \"HTML\" for the code to be executed. This means that vertical privilege escalation is possible, where a user with Editor role can change to a known password for a user having Admin role if the user with Admin role executes malicious JavaScript viewing a dashboard. This issue has been patched in versions 9.2.10 and 9.3.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-03-02T01:15:11.727",
    "last_modified": "2024-11-21T07:44:51.170",
    "fix_date": "2023-01-03T14:11:50Z"
  },
  "references": [
    {
      "url": "https://github.com/grafana/grafana/commit/db83d5f398caffe35c5846cfa7727d1a2a414165",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/grafana/grafana/security/advisories/GHSA-7rqg-hjwc-6mjf",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://grafana.com/blog/2023/02/28/grafana-security-release-new-versions-with-security-fixes-for-cve-2023-0594-cve-2023-0507-and-cve-2023-22462/",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230413-0004/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/grafana/grafana/commit/db83d5f398caffe35c5846cfa7727d1a2a414165",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/grafana/grafana/security/advisories/GHSA-7rqg-hjwc-6mjf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://grafana.com/blog/2023/02/28/grafana-security-release-new-versions-with-security-fixes-for-cve-2023-0594-cve-2023-0507-and-cve-2023-22462/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230413-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.792958",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "grafana",
    "owner": "grafana",
    "created_at": "2013-12-11T15:59:56Z",
    "updated_at": "2025-01-14T13:04:53Z",
    "pushed_at": "2025-01-14T13:12:26Z",
    "size": 1292625,
    "stars": 65883,
    "forks": 12291,
    "open_issues": 4193,
    "watchers": 65883,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 29758164,
      "Go": 20683989,
      "Rich Text Format": 352348,
      "HTML": 334782,
      "CUE": 186863,
      "JavaScript": 170294,
      "Shell": 148477,
      "MDX": 147186,
      "Starlark": 132379,
      "SCSS": 112108,
      "Jsonnet": 39563,
      "Makefile": 24993,
      "Python": 23487,
      "Dockerfile": 21670,
      "Jinja": 11630,
      "HCL": 4097,
      "CSS": 3116,
      "Mustache": 2239,
      "Smarty": 2116,
      "PowerShell": 367,
      "Assembly": 168
    },
    "commit_activity": {
      "total_commits_last_year": 9810,
      "avg_commits_per_week": 188.65384615384616,
      "days_active_last_year": 302
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:16:15.724443"
  }
}