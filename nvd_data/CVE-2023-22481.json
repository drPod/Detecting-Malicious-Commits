{
  "cve_id": "CVE-2023-22481",
  "github_data": {
    "repository": "FreshRSS/FreshRSS",
    "fix_commit": "075cf4c800063e3cc65c3d41a9c23222e8ebb554",
    "related_commits": [
      "075cf4c800063e3cc65c3d41a9c23222e8ebb554",
      "075cf4c800063e3cc65c3d41a9c23222e8ebb554"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "075cf4c800063e3cc65c3d41a9c23222e8ebb554",
      "commit_date": "2023-01-11T22:27:14Z",
      "author": {
        "login": "Alkarex",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "API avoid logging passwords (#5001)",
        "length": 324,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 73,
        "additions": 56,
        "deletions": 17
      },
      "files": [
        {
          "filename": "Docker/FreshRSS.Apache.conf",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@ DocumentRoot /var/www/FreshRSS/p/\n RemoteIPHeader X-Forwarded-For\n RemoteIPTrustedProxy 10.0.0.1/8 172.16.0.1/12 192.168.0.1/16\n LogFormat \"%a %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined_proxy\n-CustomLog /dev/stdout combined_proxy\n+CustomLog \"|/var/www/FreshRSS/cli/sensitive-log.sh\" combined_proxy\n ErrorLog /dev/stderr\n AllowEncodedSlashes On\n ServerTokens OS"
        },
        {
          "filename": "cli/sensitive-log.sh",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+#!/bin/sh\n+# Strips sensitive passwords from (Apache) logs\n+\n+# For e.g. GNU systems such as Debian\n+# N.B.: `sed -u` is not available in BusyBox and without it there are buffering delays (even with stdbuf)\n+sed -Eu 's/([?&])(Passwd|token)=[^& \\t]+/\\1\\2=redacted/ig' 2>/dev/null ||\n+\n+\t# For systems with gawk (not available by default in Docker of Debian or Alpine) or with BuzyBox such as Alpine\n+\t$(which gawk || which awk) -v IGNORECASE=1 '{ print gensub(/([?&])(Passwd|token)=[^& \\t]+/, \"\\\\1\\\\2=redacted\", \"g\") }'"
        },
        {
          "filename": "lib/lib_rss.php",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -223,6 +223,31 @@ function html_only_entity_decode($text): string {\n \treturn $text == '' ? '' : strtr($text, $htmlEntitiesOnly);\n }\n \n+/**\n+ * Remove passwords in FreshRSS logs.\n+ * See also ../cli/sensitive-log.sh for Web server logs.\n+ * @param array<string,mixed>|string $log\n+ * @return array<string,mixed>|string\n+ */\n+function sensitive_log($log) {\n+\tif (is_array($log)) {\n+\t\tforeach ($log as $k => $v) {\n+\t\t\tif (in_array($k, ['api_key', 'Passwd', 'T'])) {\n+\t\t\t\t$log[$k] = '\u2588\u2588';\n+\t\t\t} else {\n+\t\t\t\t$log[$k] = sensitive_log($v);\n+\t\t\t}\n+\t\t}\n+\t} elseif (is_string($log)) {\n+\t\t$log = preg_replace([\n+\t\t\t\t'/\\b(auth=.*?\\/)[^&]+/i',\n+\t\t\t\t'/\\b(Passwd=)[^&]+/i',\n+\t\t\t\t'/\\b(Authorization)[^&]+/i',\n+\t\t\t], '$1\u2588', $log);\n+\t}\n+\treturn $log;\n+}\n+\n /**\n  * @param array<string,mixed> $attributes\n  */"
        },
        {
          "filename": "p/api/fever.php",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -18,7 +18,8 @@\n \n // check if API is enabled globally\n if (!FreshRSS_Context::$system_conf->api_enabled) {\n-\tMinz_Log::warning('Fever API: serviceUnavailable() ' . debugInfo(), API_LOG);\n+\tMinz_Log::warning('Fever API: service unavailable!');\n+\tMinz_Log::debug('Fever API: serviceUnavailable() ' . debugInfo(), API_LOG);\n \theader('HTTP/1.1 503 Service Unavailable');\n \theader('Content-Type: text/plain; charset=UTF-8');\n \tdie('Service Unavailable!');\n@@ -45,16 +46,16 @@ function debugInfo() {\n \t\t}\n \t}\n \tglobal $ORIGINAL_INPUT;\n-\treturn print_r(\n-\t\tarray(\n+\t$log = sensitive_log([\n \t\t\t'date' => date('c'),\n \t\t\t'headers' => $ALL_HEADERS,\n \t\t\t'_SERVER' => $_SERVER,\n \t\t\t'_GET' => $_GET,\n \t\t\t'_POST' => $_POST,\n \t\t\t'_COOKIE' => $_COOKIE,\n-\t\t\t'INPUT' => $ORIGINAL_INPUT\n-\t\t), true);\n+\t\t\t'INPUT' => $ORIGINAL_INPUT,\n+\t\t]);\n+\treturn print_r($log, true);\n }\n \n //Minz_Log::debug('----------------------------------------------------------------', API_LOG);"
        },
        {
          "filename": "p/api/greader.php",
          "status": "modified",
          "additions": 15,
          "deletions": 11,
          "patch": "@@ -97,49 +97,54 @@ function debugInfo() {\n \t\t}\n \t}\n \tglobal $ORIGINAL_INPUT;\n-\treturn print_r(\n-\t\tarray(\n+\t$log = sensitive_log([\n \t\t\t'date' => date('c'),\n \t\t\t'headers' => $ALL_HEADERS,\n \t\t\t'_SERVER' => $_SERVER,\n \t\t\t'_GET' => $_GET,\n \t\t\t'_POST' => $_POST,\n \t\t\t'_COOKIE' => $_COOKIE,\n-\t\t\t'INPUT' => $ORIGINAL_INPUT\n-\t\t), true);\n+\t\t\t'INPUT' => $ORIGINAL_INPUT,\n+\t\t]);\n+\treturn print_r($log, true);\n }\n \n function badRequest() {\n-\tMinz_Log::warning('badRequest() ' . debugInfo(), API_LOG);\n+\tMinz_Log::warning('GReader API: ' . __METHOD__, API_LOG);\n+\tMinz_Log::debug('badRequest() ' . debugInfo(), API_LOG);\n \theader('HTTP/1.1 400 Bad Request');\n \theader('Content-Type: text/plain; charset=UTF-8');\n \tdie('Bad Request!');\n }\n \n function unauthorized() {\n-\tMinz_Log::warning('unauthorized() ' . debugInfo(), API_LOG);\n+\tMinz_Log::warning('GReader API: ' . __METHOD__, API_LOG);\n+\tMinz_Log::debug('unauthorized() ' . debugInfo(), API_LOG);\n \theader('HTTP/1.1 401 Unauthorized');\n \theader('Content-Type: text/plain; charset=UTF-8');\n \theader('Google-Bad-Token: true');\n \tdie('Unauthorized!');\n }\n \n function notImplemented() {\n-\tMinz_Log::warning('notImplemented() ' . debugInfo(), API_LOG);\n+\tMinz_Log::warning('GReader API: ' . __METHOD__, API_LOG);\n+\tMinz_Log::debug('notImplemented() ' . debugInfo(), API_LOG);\n \theader('HTTP/1.1 501 Not Implemented');\n \theader('Content-Type: text/plain; charset=UTF-8');\n \tdie('Not Implemented!');\n }\n \n function serviceUnavailable() {\n-\tMinz_Log::warning('serviceUnavailable() ' . debugInfo(), API_LOG);\n+\tMinz_Log::warning('GReader API: ' . __METHOD__, API_LOG);\n+\tMinz_Log::debug('serviceUnavailable() ' . debugInfo(), API_LOG);\n \theader('HTTP/1.1 503 Service Unavailable');\n \theader('Content-Type: text/plain; charset=UTF-8');\n \tdie('Service Unavailable!');\n }\n \n function checkCompatibility() {\n-\tMinz_Log::warning('checkCompatibility() ' . debugInfo(), API_LOG);\n+\tMinz_Log::warning('GReader API: ' . __METHOD__, API_LOG);\n+\tMinz_Log::debug('checkCompatibility() ' . debugInfo(), API_LOG);\n \theader('Content-Type: text/plain; charset=UTF-8');\n \tif (PHP_INT_SIZE < 8 && !function_exists('gmp_init')) {\n \t\tdie('FAIL 64-bit or GMP extension! Wrong PHP configuration.');\n@@ -172,8 +177,7 @@ function authorizationToUser() {\n \t\t\t\tif ($headerAuthX[1] === sha1(FreshRSS_Context::$system_conf->salt . $user . FreshRSS_Context::$user_conf->apiPasswordHash)) {\n \t\t\t\t\treturn $user;\n \t\t\t\t} else {\n-\t\t\t\t\tMinz_Log::warning('Invalid API authorisation for user ' . $user . ': ' . $headerAuthX[1], API_LOG);\n-\t\t\t\t\tMinz_Log::warning('Invalid API authorisation for user ' . $user . ': ' . $headerAuthX[1]);\n+\t\t\t\t\tMinz_Log::warning('Invalid API authorisation for user ' . $user);\n \t\t\t\t\tunauthorized();\n \t\t\t\t}\n \t\t\t} else {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d6c2daee51fa90f000c106492141baf3824931d2",
            "date": "2025-01-25T08:16:13Z",
            "author_login": "Alkarex"
          },
          {
            "sha": "22b74b0a5790360d81088a83addab1f98b7f7947",
            "date": "2025-01-25T08:14:08Z",
            "author_login": "Alkarex"
          },
          {
            "sha": "68497030f988cac483a67b27b96d2ac90a54856e",
            "date": "2025-01-25T08:13:44Z",
            "author_login": "Alkarex"
          },
          {
            "sha": "539d58b8fc7cb4c5e8fbf531ad2a711c383ffac0",
            "date": "2025-01-25T08:13:03Z",
            "author_login": "brtmax"
          },
          {
            "sha": "afb6f788fa9c90817c9bd21e91993f4ddb462621",
            "date": "2025-01-21T22:45:22Z",
            "author_login": "math-GH"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.0,
    "cvss_vector": "CVSS:3.1/AV:A/AC:H/PR:H/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-532",
    "description": "FreshRSS is a self-hosted RSS feed aggregator. When using the greader API, the provided password is logged in clear in `users/_/log_api.txt` in the case where the authentication fails. The issues occurs in `authorizationToUser()` in `greader.php`. If there is an issue with the request or the credentials, `unauthorized()` or `badRequest()` is called. Both these functions are printing the return of `debugInfo()` in the logs.  `debugInfo()` will return the content of the request. By default, this will be saved in `users/_/log_api.txt` and if the const `COPY_LOG_TO_SYSLOG` is true, in syslogs as well. Exploiting this issue requires having access to logs produced by FreshRSS. Using the information from the logs, a malicious individual could get users' API keys (would be displayed if the users fills in a bad username) or passwords.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-03-06T18:15:10.357",
    "last_modified": "2024-11-21T07:44:53.610",
    "fix_date": "2023-01-11T22:27:14Z"
  },
  "references": [
    {
      "url": "https://github.com/FreshRSS/FreshRSS/commit/075cf4c800063e3cc65c3d41a9c23222e8ebb554",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/FreshRSS/FreshRSS/security/advisories/GHSA-8vvv-jxg6-8578",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/FreshRSS/FreshRSS/commit/075cf4c800063e3cc65c3d41a9c23222e8ebb554",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/FreshRSS/FreshRSS/security/advisories/GHSA-8vvv-jxg6-8578",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.810832",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "FreshRSS",
    "owner": "FreshRSS",
    "created_at": "2012-10-21T16:48:50Z",
    "updated_at": "2025-01-26T01:48:16Z",
    "pushed_at": "2025-01-25T08:16:13Z",
    "size": 27258,
    "stars": 10570,
    "forks": 889,
    "open_issues": 616,
    "watchers": 10570,
    "has_security_policy": false,
    "default_branch": "edge",
    "protected_branches": [
      "edge",
      "latest"
    ],
    "languages": {
      "PHP": 3857375,
      "CSS": 535975,
      "HTML": 350307,
      "JavaScript": 102575,
      "SCSS": 82216,
      "Shell": 6774,
      "Makefile": 6254,
      "Dockerfile": 3821
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-26T07:34:30.536482"
  }
}