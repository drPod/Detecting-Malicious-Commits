{
  "cve_id": "CVE-2023-22492",
  "github_data": {
    "repository": "zitadel/zitadel",
    "fix_commit": "301e22c4956ead6014a8179463c37263f7301a83",
    "related_commits": [
      "301e22c4956ead6014a8179463c37263f7301a83",
      "fc892c52a10cd4ffdac395747494f3a93a7494c2",
      "301e22c4956ead6014a8179463c37263f7301a83",
      "fc892c52a10cd4ffdac395747494f3a93a7494c2"
    ],
    "patch_url": "https://github.com/zitadel/zitadel/commit/301e22c4956ead6014a8179463c37263f7301a83.patch",
    "fix_commit_details": {
      "sha": "301e22c4956ead6014a8179463c37263f7301a83",
      "commit_date": "2023-01-10T14:58:10Z",
      "author": {
        "login": "livio-a",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: deactivate refresh tokens of deactivated or locked users",
        "length": 61,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 112,
        "additions": 106,
        "deletions": 6
      },
      "files": [
        {
          "filename": "internal/command/user.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -261,7 +261,7 @@ func (c *Commands) addUserToken(ctx context.Context, userWriteModel *UserWriteMo\n \tif err != nil {\n \t\treturn nil, nil, err\n \t}\n-\tif !isUserStateExists(userWriteModel.UserState) {\n+\tif userWriteModel.UserState != domain.UserStateActive {\n \t\treturn nil, nil, errors.ThrowNotFound(nil, \"COMMAND-1d6Gg\", \"Errors.User.NotFound\")\n \t}\n "
        },
        {
          "filename": "internal/command/user_human_refresh_token_model.go",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -18,6 +18,7 @@ type HumanRefreshTokenWriteModel struct {\n \tUserState      domain.UserState\n \tIdleExpiration time.Time\n \tExpiration     time.Time\n+\tUserAgentID    string\n }\n \n func NewHumanRefreshTokenWriteModel(userID, resourceOwner, tokenID string) *HumanRefreshTokenWriteModel {\n@@ -48,6 +49,8 @@ func (wm *HumanRefreshTokenWriteModel) AppendEvents(events ...eventstore.Event)\n \t\t\t\tcontinue\n \t\t\t}\n \t\t\twm.WriteModel.AppendEvents(e)\n+\t\tdefault:\n+\t\t\twm.WriteModel.AppendEvents(e)\n \t\t}\n \t}\n }\n@@ -61,14 +64,18 @@ func (wm *HumanRefreshTokenWriteModel) Reduce() error {\n \t\t\twm.IdleExpiration = e.CreationDate().Add(e.IdleExpiration)\n \t\t\twm.Expiration = e.CreationDate().Add(e.Expiration)\n \t\t\twm.UserState = domain.UserStateActive\n+\t\t\twm.UserAgentID = e.UserAgentID\n \t\tcase *user.HumanRefreshTokenRenewedEvent:\n \t\t\tif wm.UserState == domain.UserStateActive {\n \t\t\t\twm.RefreshToken = e.RefreshToken\n \t\t\t}\n \t\t\twm.RefreshToken = e.RefreshToken\n \t\t\twm.IdleExpiration = e.CreationDate().Add(e.IdleExpiration)\n+\t\tcase *user.HumanSignedOutEvent:\n+\t\t\tif wm.UserAgentID == e.UserAgentID {\n+\t\t\t\twm.UserState = domain.UserStateDeleted\n+\t\t\t}\n \t\tcase *user.HumanRefreshTokenRemovedEvent,\n-\t\t\t*user.HumanSignedOutEvent,\n \t\t\t*user.UserLockedEvent,\n \t\t\t*user.UserDeactivatedEvent,\n \t\t\t*user.UserRemovedEvent:"
        },
        {
          "filename": "internal/command/user_human_refresh_token_test.go",
          "status": "modified",
          "additions": 89,
          "deletions": 2,
          "patch": "@@ -64,10 +64,16 @@ func TestCommands_AddAccessAndRefreshToken(t *testing.T) {\n \t\t\t},\n \t\t},\n \t\t{\n-\t\t\tname: \"add refresh token, user inactive, error\",\n+\t\t\tname: \"add refresh token, user deactivated, error\",\n \t\t\tfields: fields{\n \t\t\t\teventstore: eventstoreExpect(t,\n-\t\t\t\t\texpectFilter(),\n+\t\t\t\t\texpectFilter(\n+\t\t\t\t\t\teventFromEventPusher(\n+\t\t\t\t\t\t\tuser.NewUserDeactivatedEvent(context.Background(),\n+\t\t\t\t\t\t\t\t&user.NewAggregate(\"userID\", \"orgID\").Aggregate,\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t),\n+\t\t\t\t\t),\n \t\t\t\t),\n \t\t\t\tidGenerator: id_mock.NewIDGeneratorExpectIDs(t, \"refreshTokenID1\"),\n \t\t\t},\n@@ -912,6 +918,87 @@ func TestCommands_renewRefreshToken(t *testing.T) {\n \t\t\t\terr: caos_errs.IsErrorInvalidArgument,\n \t\t\t},\n \t\t},\n+\t\t{\n+\t\t\tname: \"user deactivated, error\",\n+\t\t\tfields: fields{\n+\t\t\t\teventstore: eventstoreExpect(t,\n+\t\t\t\t\texpectFilter(\n+\t\t\t\t\t\teventFromEventPusherWithCreationDateNow(user.NewHumanRefreshTokenAddedEvent(\n+\t\t\t\t\t\t\tcontext.Background(),\n+\t\t\t\t\t\t\t&user.NewAggregate(\"userID\", \"orgID\").Aggregate,\n+\t\t\t\t\t\t\t\"tokenID\",\n+\t\t\t\t\t\t\t\"applicationID\",\n+\t\t\t\t\t\t\t\"userAgentID\",\n+\t\t\t\t\t\t\t\"de\",\n+\t\t\t\t\t\t\t[]string{\"clientID1\"},\n+\t\t\t\t\t\t\t[]string{oidc.ScopeOpenID, oidc.ScopeProfile, oidc.ScopeEmail, oidc.ScopeOfflineAccess},\n+\t\t\t\t\t\t\t[]string{\"password\"},\n+\t\t\t\t\t\t\ttime.Now(),\n+\t\t\t\t\t\t\t1*time.Hour,\n+\t\t\t\t\t\t\t24*time.Hour,\n+\t\t\t\t\t\t)),\n+\t\t\t\t\t\teventFromEventPusher(\n+\t\t\t\t\t\t\tuser.NewUserDeactivatedEvent(\n+\t\t\t\t\t\t\t\tcontext.Background(),\n+\t\t\t\t\t\t\t\t&user.NewAggregate(\"userID\", \"orgID\").Aggregate,\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t),\n+\t\t\t\t\t),\n+\t\t\t\t),\n+\t\t\t\tkeyAlgorithm: refreshTokenEncryptionAlgorithm(gomock.NewController(t)),\n+\t\t\t},\n+\t\t\targs: args{\n+\t\t\t\tctx:            context.Background(),\n+\t\t\t\tuserID:         \"userID\",\n+\t\t\t\torgID:          \"orgID\",\n+\t\t\t\trefreshToken:   base64.RawURLEncoding.EncodeToString([]byte(\"userID:tokenID:tokenID\")),\n+\t\t\t\tidleExpiration: 1 * time.Hour,\n+\t\t\t},\n+\t\t\tres: res{\n+\t\t\t\terr: caos_errs.IsErrorInvalidArgument,\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"user signedout, error\",\n+\t\t\tfields: fields{\n+\t\t\t\teventstore: eventstoreExpect(t,\n+\t\t\t\t\texpectFilter(\n+\t\t\t\t\t\teventFromEventPusherWithCreationDateNow(user.NewHumanRefreshTokenAddedEvent(\n+\t\t\t\t\t\t\tcontext.Background(),\n+\t\t\t\t\t\t\t&user.NewAggregate(\"userID\", \"orgID\").Aggregate,\n+\t\t\t\t\t\t\t\"tokenID\",\n+\t\t\t\t\t\t\t\"applicationID\",\n+\t\t\t\t\t\t\t\"userAgentID\",\n+\t\t\t\t\t\t\t\"de\",\n+\t\t\t\t\t\t\t[]string{\"clientID1\"},\n+\t\t\t\t\t\t\t[]string{oidc.ScopeOpenID, oidc.ScopeProfile, oidc.ScopeEmail, oidc.ScopeOfflineAccess},\n+\t\t\t\t\t\t\t[]string{\"password\"},\n+\t\t\t\t\t\t\ttime.Now(),\n+\t\t\t\t\t\t\t1*time.Hour,\n+\t\t\t\t\t\t\t24*time.Hour,\n+\t\t\t\t\t\t)),\n+\t\t\t\t\t\teventFromEventPusher(\n+\t\t\t\t\t\t\tuser.NewHumanSignedOutEvent(\n+\t\t\t\t\t\t\t\tcontext.Background(),\n+\t\t\t\t\t\t\t\t&user.NewAggregate(\"userID\", \"orgID\").Aggregate,\n+\t\t\t\t\t\t\t\t\"userAgentID\",\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t),\n+\t\t\t\t\t),\n+\t\t\t\t),\n+\t\t\t\tkeyAlgorithm: refreshTokenEncryptionAlgorithm(gomock.NewController(t)),\n+\t\t\t},\n+\t\t\targs: args{\n+\t\t\t\tctx:            context.Background(),\n+\t\t\t\tuserID:         \"userID\",\n+\t\t\t\torgID:          \"orgID\",\n+\t\t\t\trefreshToken:   base64.RawURLEncoding.EncodeToString([]byte(\"userID:tokenID:tokenID\")),\n+\t\t\t\tidleExpiration: 1 * time.Hour,\n+\t\t\t},\n+\t\t\tres: res{\n+\t\t\t\terr: caos_errs.IsErrorInvalidArgument,\n+\t\t\t},\n+\t\t},\n \t\t{\n \t\t\tname: \"token renewed, ok\",\n \t\t\tfields: fields{"
        },
        {
          "filename": "internal/repository/user/human.go",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -396,7 +396,13 @@ func NewHumanSignedOutEvent(\n }\n \n func HumanSignedOutEventMapper(event *repository.Event) (eventstore.Event, error) {\n-\treturn &HumanSignedOutEvent{\n+\tsignedOut := &HumanSignedOutEvent{\n \t\tBaseEvent: *eventstore.BaseEventFromRepo(event),\n-\t}, nil\n+\t}\n+\terr := json.Unmarshal(event.Data, signedOut)\n+\tif err != nil {\n+\t\treturn nil, errors.ThrowInternal(err, \"USER-WFS3g\", \"unable to unmarshal human signed out\")\n+\t}\n+\n+\treturn signedOut, nil\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d01d003a0326de8ea3102c4b28733322ac9d70cd",
            "date": "2025-01-14T14:44:41Z",
            "author_login": "latonz"
          },
          {
            "sha": "84997ffe1aaaebe8ed97edd689242f7d3fca6fd3",
            "date": "2025-01-14T13:15:59Z",
            "author_login": "stebenz"
          },
          {
            "sha": "e2a2e13d44e9c86ebbc65153e0a40cbbae873df8",
            "date": "2025-01-14T06:49:26Z",
            "author_login": "stebenz"
          },
          {
            "sha": "9c7f2a7d50e689104929e8fcda86ea8afc3ba26d",
            "date": "2025-01-10T11:15:06Z",
            "author_login": "latonz"
          },
          {
            "sha": "b0bcb051fcee9903ccce31c7d5afae7ee44f3ce3",
            "date": "2025-01-10T10:30:26Z",
            "author_login": "dennypenta"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:N",
    "cwe_id": "CWE-613",
    "description": "ZITADEL is a combination of Auth0 and Keycloak. RefreshTokens is an OAuth 2.0 feature that allows applications to retrieve new access tokens and refresh the user's session without the need for interacting with a UI. RefreshTokens were not invalidated when a user was locked or deactivated. The deactivated or locked user was able to obtain a valid access token only through a refresh token grant. When the locked or deactivated user\u2019s session was already terminated (\u201clogged out\u201d) then it was not possible to create a new session. Renewal of access token through a refresh token grant is limited to the configured amount of time (RefreshTokenExpiration). As a workaround, ensure the RefreshTokenExpiration in the OIDC settings of your instance is set according to your security requirements. This issue has been patched in versions 2.17.3 and 2.16.4. ",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-01-11T20:15:08.970",
    "last_modified": "2024-11-21T07:44:55.083",
    "fix_date": "2023-01-10T14:58:10Z"
  },
  "references": [
    {
      "url": "https://github.com/zitadel/zitadel/commit/301e22c4956ead6014a8179463c37263f7301a83",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zitadel/zitadel/commit/fc892c52a10cd4ffdac395747494f3a93a7494c2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zitadel/zitadel/security/advisories/GHSA-6rrr-78xp-5jp8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zitadel/zitadel/commit/301e22c4956ead6014a8179463c37263f7301a83",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zitadel/zitadel/commit/fc892c52a10cd4ffdac395747494f3a93a7494c2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zitadel/zitadel/security/advisories/GHSA-6rrr-78xp-5jp8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.542891",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "zitadel",
    "owner": "zitadel",
    "created_at": "2020-03-16T13:51:31Z",
    "updated_at": "2025-01-14T13:16:05Z",
    "pushed_at": "2025-01-14T13:16:01Z",
    "size": 473588,
    "stars": 9434,
    "forks": 615,
    "open_issues": 654,
    "watchers": 9434,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.87.x",
      "alpha"
    ],
    "languages": {
      "Go": 14957664,
      "TypeScript": 1840621,
      "HTML": 757763,
      "SCSS": 351027,
      "CSS": 112445,
      "JavaScript": 28231,
      "PLpgSQL": 13669,
      "Makefile": 9966,
      "Dockerfile": 9249,
      "Shell": 238
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:18:03.409729"
  }
}