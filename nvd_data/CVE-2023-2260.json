{
  "cve_id": "CVE-2023-2260",
  "github_data": {
    "repository": "alfio-event/alf.io",
    "fix_commit": "c9a16ab93d42b2beb06d529b57890121f85be6ef",
    "related_commits": [
      "c9a16ab93d42b2beb06d529b57890121f85be6ef",
      "c9a16ab93d42b2beb06d529b57890121f85be6ef"
    ],
    "patch_url": "https://github.com/alfio-event/alf.io/commit/c9a16ab93d42b2beb06d529b57890121f85be6ef.patch",
    "fix_commit_details": {
      "sha": "c9a16ab93d42b2beb06d529b57890121f85be6ef",
      "commit_date": "2023-03-30T17:43:21Z",
      "author": {
        "login": "syjer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix user admin check (#1206) - cherry-picked from 1852400f3472afa23b73feb121b0e6f84ddee528",
        "length": 90,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 179,
        "additions": 136,
        "deletions": 43
      },
      "files": [
        {
          "filename": "src/main/java/alfio/config/authentication/support/UserCreatorBeforeLoginFilter.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -53,8 +53,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n             String username = req.getParameter(\"username\");\n             if (!userManager.usernameExists(username)) {\n                 var organizationModification = new OrganizationModification(null, UUID.randomUUID().toString(), username, username, null, null);\n-                int orgId = userManager.createOrganization(organizationModification);\n-                userManager.insertUser(orgId, username, \"\", \"\", username, Role.OWNER, User.Type.DEMO, req.getParameter(\"password\"), null, null);\n+                int orgId = userManager.createOrganization(organizationModification, null);\n+                userManager.insertUser(orgId, username, \"\", \"\", username, Role.OWNER, User.Type.DEMO, req.getParameter(\"password\"), null, null, null);\n             }\n         }\n "
        },
        {
          "filename": "src/main/java/alfio/controller/api/admin/UsersApiController.java",
          "status": "modified",
          "additions": 10,
          "deletions": 11,
          "patch": "@@ -137,15 +137,15 @@ public ResponseEntity<String> bulkCreate(@RequestBody BulkApiKeyCreation request\n         Optional<User> userOptional = userManager.findOptionalEnabledUserByUsername(principal.getName())\n             .filter(u -> userManager.isOwnerOfOrganization(u, request.organizationId));\n         if(userOptional.isPresent()) {\n-            userManager.bulkInsertApiKeys(request.organizationId, request.role, request.descriptions);\n+            userManager.bulkInsertApiKeys(request.organizationId, request.role, request.descriptions, principal);\n             return ResponseEntity.ok(\"OK\");\n         }\n         return ResponseEntity.badRequest().build();\n     }\n \n     @PostMapping(\"/organizations/new\")\n-    public String insertOrganization(@RequestBody OrganizationModification om) {\n-        userManager.createOrganization(om);\n+    public String insertOrganization(@RequestBody OrganizationModification om, Principal principal) {\n+        userManager.createOrganization(om, principal);\n         return OK;\n     }\n \n@@ -180,7 +180,7 @@ public String editUser(@RequestBody UserModification userModification, Principal\n         userManager.editUser(userModification.getId(), userModification.getOrganizationId(),\n             userModification.getUsername(), userModification.getFirstName(), userModification.getLastName(),\n             userModification.getEmailAddress(), userModification.getDescription(),\n-            Role.valueOf(userModification.getRole()), principal.getName());\n+            Role.valueOf(userModification.getRole()), principal);\n         return OK;\n     }\n \n@@ -193,7 +193,7 @@ public UserWithPasswordAndQRCode insertUser(@RequestBody UserModification userMo\n             userModification.getFirstName(), userModification.getLastName(),\n             userModification.getEmailAddress(), requested,\n             type == null ? User.Type.INTERNAL : type,\n-            userModification.getValidToAsDateTime(), userModification.getDescription());\n+            userModification.getValidToAsDateTime(), userModification.getDescription(), principal);\n         String qrCode = type != User.Type.API_KEY ? Base64.getEncoder().encodeToString(generateQRCode(userWithPassword, baseUrl)) : null;\n         return new UserWithPasswordAndQRCode(userWithPassword, qrCode);\n     }\n@@ -236,13 +236,13 @@ private static byte[] generateQRCode(UserWithPassword userWithPassword, String b\n \n     @DeleteMapping(\"/users/{id}\")\n     public String deleteUser(@PathVariable(\"id\") int userId, Principal principal) {\n-        userManager.deleteUser(userId, principal.getName());\n+        userManager.deleteUser(userId, principal);\n         return OK;\n     }\n \n     @PostMapping(\"/users/{id}/enable/{enable}\")\n     public String enableUser(@PathVariable(\"id\") int userId, @PathVariable(\"enable\")boolean enable, Principal principal) {\n-        userManager.enable(userId, principal.getName(), enable);\n+        userManager.enable(userId, enable, principal);\n         return OK;\n     }\n \n@@ -267,19 +267,18 @@ public UserModification loadCurrentUser(Principal principal) {\n     @PostMapping(\"/users/current/update-password\")\n     public ValidationResult updateCurrentUserPassword(@RequestBody PasswordModification passwordModification, Principal principal) {\n         return userManager.validateNewPassword(principal.getName(), passwordModification.oldPassword, passwordModification.newPassword, passwordModification.newPasswordConfirm)\n-            .ifSuccess(() -> userManager.updateCurrentUserPassword(principal.getName(), passwordModification.newPassword));\n+            .ifSuccess(() -> userManager.updateCurrentUserPassword(passwordModification.newPassword, principal));\n     }\n \n     @PostMapping(\"/users/current/edit\")\n     public void updateCurrentUser(@RequestBody UserModification userModification, Principal principal) {\n-        User user = userManager.findUserByUsername(principal.getName());\n-        userManager.updateUserContactInfo(user.getId(), userModification.getFirstName(), userModification.getLastName(), userModification.getEmailAddress());\n+        userManager.updateCurrentUserContactInfo(userModification.getFirstName(), userModification.getLastName(), userModification.getEmailAddress(), principal);\n \n     }\n \n     @PutMapping(\"/users/{id}/reset-password\")\n     public UserWithPasswordAndQRCode resetPassword(@PathVariable(\"id\") int userId, @RequestParam(\"baseUrl\") String baseUrl, Principal principal) {\n-        UserWithPassword userWithPassword = userManager.resetPassword(userId, principal.getName());\n+        UserWithPassword userWithPassword = userManager.resetPassword(userId, principal);\n         return new UserWithPasswordAndQRCode(userWithPassword, Base64.getEncoder().encodeToString(generateQRCode(userWithPassword, baseUrl)));\n     }\n "
        },
        {
          "filename": "src/main/java/alfio/controller/api/v1/admin/OrganizationsApiV1Controller.java",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -43,11 +43,11 @@ public OrganizationsApiV1Controller(UserManager userManager,\n     }\n \n     @PostMapping(\"/create\")\n-    public ResponseEntity<Organization> createOrganization(@RequestBody OrganizationModification om) {\n+    public ResponseEntity<Organization> createOrganization(@RequestBody OrganizationModification om, Principal principal) {\n         if (om == null || !om.isValid(true)) {\n             return ResponseEntity.badRequest().build();\n         }\n-        int orgId = userManager.createOrganization(om);\n+        int orgId = userManager.createOrganization(om, principal);\n         return ResponseEntity.ok(userManager.findOrganizationById(orgId, UserManager.ADMIN_USERNAME));\n     }\n \n@@ -62,8 +62,8 @@ public ResponseEntity<Organization> getSingleOrganization(@PathVariable(\"id\") in\n     }\n \n     @PutMapping(\"/{id}/api-key\")\n-    public OrganizationApiKey createApiKeyForOrganization(@PathVariable(\"id\") int organizationId) {\n-        var user = userManager.insertUser(organizationId, null, null, null, null, Role.fromRoleName(\"ROLE_API_CLIENT\"), User.Type.API_KEY, null, \"Auto-generated API Key\");\n+    public OrganizationApiKey createApiKeyForOrganization(@PathVariable(\"id\") int organizationId, Principal principal) {\n+        var user = userManager.insertUser(organizationId, null, null, null, null, Role.fromRoleName(\"ROLE_API_CLIENT\"), User.Type.API_KEY, null, \"Auto-generated API Key\", principal);\n         return new OrganizationApiKey(organizationId, user.getUsername());\n     }\n "
        },
        {
          "filename": "src/main/java/alfio/manager/user/UserManager.java",
          "status": "modified",
          "additions": 110,
          "deletions": 16,
          "patch": "@@ -87,6 +87,7 @@ private List<Authority> getUserAuthorities(User user) {\n         return authorityRepository.findGrantedAuthorities(user.getUsername());\n     }\n \n+    @Transactional(readOnly = true)\n     public List<UserWithOrganizations> findAllUsers(String username) {\n         List<Organization> organizations = findUserOrganizations(username);\n         Predicate<Collection<?>> isNotEmpty = ks -> !ks.isEmpty();\n@@ -109,6 +110,7 @@ public List<UserWithOrganizations> findAllUsers(String username) {\n             }).orElseGet(Collections::emptyList);\n     }\n \n+    @Transactional(readOnly = true)\n     public List<User> findAllEnabledUsers(String username) {\n         return findUserOrganizations(username)\n                 .stream()\n@@ -118,26 +120,32 @@ public List<User> findAllEnabledUsers(String username) {\n                 .collect(toList());\n     }\n \n+    @Transactional(readOnly = true)\n     public List<User> findAllApiKeysFor(int organizationId) {\n         return userRepository.findAllApiKeysForOrganization(organizationId);\n     }\n \n+    @Transactional(readOnly = true)\n     public User findUserByUsername(String username) {\n         return userRepository.findEnabledByUsername(username).orElseThrow(IllegalArgumentException::new);\n     }\n \n+    @Transactional(readOnly = true)\n     public Optional<User> findOptionalEnabledUserByUsername(String username) {\n         return userRepository.findEnabledByUsername(username);\n     }\n \n+    @Transactional(readOnly = true)\n     public boolean usernameExists(String username) {\n         return userRepository.findIdByUserName(username).isPresent();\n     }\n \n+    @Transactional(readOnly = true)\n     public User findUser(int id) {\n         return userRepository.findById(id);\n     }\n \n+    @Transactional(readOnly = true)\n     public Collection<Role> getAvailableRoles(String username) {\n         User user = findUserByUsername(username);\n         return isAdmin(user) || isOwner(user) ? EnumSet.of(Role.OWNER, Role.OPERATOR, Role.SUPERVISOR, Role.SPONSOR, Role.API_CONSUMER) : Collections.emptySet();\n@@ -148,37 +156,45 @@ public Collection<Role> getAvailableRoles(String username) {\n      * @param user\n      * @return user role\n      */\n+    @Transactional(readOnly = true)\n     public Role getUserRole(User user) {\n         return getUserAuthorities(user).stream().map(Authority::getRole).sorted().findFirst().orElse(Role.OPERATOR);\n     }\n \n+    @Transactional(readOnly = true)\n     public List<Organization> findUserOrganizations(String username) {\n         return organizationRepository.findAllForUser(username);\n     }\n \n+    @Transactional(readOnly = true)\n     public Organization findOrganizationById(int id, String username) {\n         return findOptionalOrganizationById(id, username).orElseThrow(IllegalArgumentException::new);\n     }\n \n+    @Transactional(readOnly = true)\n     public Optional<Organization> findOptionalOrganizationById(int id, String username) {\n         return findUserOrganizations(username)\n             .stream()\n             .filter(o -> o.getId() == id)\n             .findFirst();\n     }\n \n+    @Transactional(readOnly = true)\n     public boolean isAdmin(User user) {\n         return checkRole(user, Collections.singleton(Role.ADMIN));\n     }\n \n+    @Transactional(readOnly = true)\n     public boolean isOwner(User user) {\n         return checkRole(user, EnumSet.of(Role.ADMIN, Role.OWNER, Role.API_CONSUMER));\n     }\n \n+    @Transactional(readOnly = true)\n     public boolean isOwnerOfOrganization(User user, int organizationId) {\n         return isAdmin(user) || (isOwner(user) && userOrganizationRepository.findByUserId(user.getId()).stream().anyMatch(uo -> uo.organizationId() == organizationId));\n     }\n \n+    @Transactional(readOnly = true)\n     public boolean isOwnerOfOrganization(String username, int organizationId) {\n         return userRepository.findByUsername(username)\n             .filter(user -> isOwnerOfOrganization(user, organizationId))\n@@ -190,16 +206,23 @@ private boolean checkRole(User user, Set<Role> expectedRoles) {\n         return authorityRepository.checkRole(user.getUsername(), roleNames);\n     }\n \n-    public int createOrganization(OrganizationModification om) {\n+    public int createOrganization(OrganizationModification om, Principal principal) {\n+        //\n+        checkIsAdmin(principal);\n+        //\n         var affectedRowNumAndKey = organizationRepository.create(om.getName(), om.getDescription(), om.getEmail(), om.getExternalId(), om.getSlug());\n         int orgId = affectedRowNumAndKey.getKey();\n         Validate.isTrue(invoiceSequencesRepository.initFor(orgId) == 2);\n         return orgId;\n     }\n \n     public void updateOrganization(OrganizationModification om, Principal principal) {\n+        //\n+        var orgId = requireNonNull(om.getId());\n+        checkAccessToOrganizationId(principal, orgId);\n+        //\n         boolean isAdmin = RequestUtils.isAdmin(principal) || RequestUtils.isSystemApiKey(principal);\n-        var currentOrg = organizationRepository.getById(requireNonNull(om.getId()));\n+        var currentOrg = organizationRepository.getById(orgId);\n         organizationRepository.update(om.getId(),\n             om.getName(),\n             om.getDescription(),\n@@ -208,6 +231,7 @@ public void updateOrganization(OrganizationModification om, Principal principal)\n             isAdmin ? om.getSlug() : currentOrg.getSlug());\n     }\n \n+    @Transactional(readOnly = true)\n     public ValidationResult validateOrganizationSlug(OrganizationModification om, Principal principal) {\n         if(!RequestUtils.isAdmin(principal)) {\n             return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"slug\", \"Cannot update Organizer URL.\"));\n@@ -222,6 +246,7 @@ public ValidationResult validateOrganizationSlug(OrganizationModification om, Pr\n         return ValidationResult.success();\n     }\n \n+    @Transactional(readOnly = true)\n     public ValidationResult validateOrganization(OrganizationModification om, Principal principal) {\n         if(om.getId() == null && organizationRepository.findByName(om.getName()).isPresent()) {\n             return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"name\", \"There is already another organization with the same name.\"));\n@@ -238,7 +263,11 @@ public ValidationResult validateOrganization(OrganizationModification om, Princi\n         return ValidationResult.success();\n     }\n \n-    public void editUser(int id, int organizationId, String username, String firstName, String lastName, String emailAddress, String description, Role role, String currentUsername) {\n+    public void editUser(int id, int organizationId, String username, String firstName, String lastName, String emailAddress, String description, Role role, Principal principal) {\n+        //\n+        checkAccessToUserIdAndNewOrganization(principal, id, organizationId);\n+        //\n+        String currentUsername = principal.getName();\n         boolean admin = ADMIN_USERNAME.equals(username) && Role.ADMIN == role;\n         if(!admin) {\n             int userOrganizationResult = userOrganizationRepository.updateUserOrganization(id, organizationId);\n@@ -253,16 +282,17 @@ public void editUser(int id, int organizationId, String username, String firstNa\n         }\n     }\n \n-    public void updateUserContactInfo(int id, String firstName, String lastName, String emailAddress) {\n+    public void updateCurrentUserContactInfo(String firstName, String lastName, String emailAddress, Principal principal) {\n+        var id = userRepository.findIdByUserName(principal.getName()).orElseThrow();\n         userRepository.updateContactInfo(id, firstName, lastName, emailAddress);\n     }\n \n-    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType) {\n-        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, null, null);\n+    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, Principal principal) {\n+        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, null, null, principal);\n     }\n \n \n-    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, ZonedDateTime validTo, String description) {\n+    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, ZonedDateTime validTo, String description, Principal principal) {\n         if (userType == User.Type.API_KEY) {\n             username = UUID.randomUUID().toString();\n             firstName = \"apikey\";\n@@ -271,17 +301,20 @@ public UserWithPassword insertUser(int organizationId, String username, String f\n         }\n \n         String userPassword = PasswordGenerator.generateRandomPassword();\n-        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, userPassword, validTo, description);\n+        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, userPassword, validTo, description, principal);\n     }\n \n-    public void bulkInsertApiKeys(int organizationId, Role role, List<String> descriptions) {\n+    public void bulkInsertApiKeys(int organizationId, Role role, List<String> descriptions, Principal principal) {\n         for (String description : descriptions) {\n-            insertUser(organizationId, null, null, null, null, role, User.Type.API_KEY, null, description);\n+            insertUser(organizationId, null, null, null, null, role, User.Type.API_KEY, null, description, principal);\n         }\n     }\n \n \n-    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, String userPassword, ZonedDateTime validTo, String description) {\n+    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, String userPassword, ZonedDateTime validTo, String description, Principal principal) {\n+        //\n+        checkAccessToOrganizationId(principal, organizationId);\n+        //\n         Organization organization = organizationRepository.getById(organizationId);\n         AffectedRowCountAndKey<Integer> result = userRepository.create(username, passwordEncoder.encode(userPassword), firstName, lastName, emailAddress, true, userType, validTo, description);\n         userOrganizationRepository.create(result.getKey(), organization.getId());\n@@ -290,27 +323,35 @@ public UserWithPassword insertUser(int organizationId, String username, String f\n     }\n \n \n-    public UserWithPassword resetPassword(int userId, String currentUser) {\n+    public UserWithPassword resetPassword(int userId, Principal principal) {\n+        //\n+        checkAccessToUserId(principal, userId);\n+        //\n         User user = findUser(userId);\n         String password = PasswordGenerator.generateRandomPassword();\n         Validate.isTrue(userRepository.resetPassword(userId, passwordEncoder.encode(password)) == 1, \"error during password reset\");\n \n-        if (!currentUser.equals(user.getUsername())) {\n+        if (!Objects.requireNonNull(principal).getName().equals(user.getUsername())) {\n             invalidateSessionsForUser(user.getUsername());\n         }\n \n         return new UserWithPassword(user, password, UUID.randomUUID().toString());\n     }\n \n \n-    public void updateCurrentUserPassword(String username, String newPassword) {\n+    public void updateCurrentUserPassword(String newPassword, Principal principal) {\n+        var username = principal.getName();\n         User user = userRepository.findByUsername(username).orElseThrow(IllegalStateException::new);\n         Validate.isTrue(PasswordGenerator.isValid(newPassword), \"invalid password\");\n         Validate.isTrue(userRepository.resetPassword(user.getId(), passwordEncoder.encode(newPassword)) == 1, \"error during password update\");\n     }\n \n \n-    public void deleteUser(int userId, String currentUsername) {\n+    public void deleteUser(int userId, Principal principal) {\n+        //\n+        checkAccessToUserId(principal, userId);\n+        //\n+        var currentUsername = principal.getName();\n         User currentUser = userRepository.findEnabledByUsername(currentUsername).orElseThrow(IllegalArgumentException::new);\n         Assert.isTrue(userId != currentUser.getId(), \"sorry but you cannot delete your own account.\");\n         var userToDelete = userRepository.findById(userId);\n@@ -323,7 +364,11 @@ private void invalidateSessionsForUser(String username) {\n         sessionsToInvalidate.forEach(sessionsByPrincipalFinder::deleteById);\n     }\n \n-    public void enable(int userId, String currentUsername, boolean status) {\n+    public void enable(int userId, boolean status, Principal principal) {\n+        //\n+        checkAccessToUserId(principal, userId);\n+        //\n+        var currentUsername = principal.getName();\n         User currentUser = userRepository.findEnabledByUsername(currentUsername).orElseThrow(IllegalArgumentException::new);\n         Assert.isTrue(userId != currentUser.getId(), \"sorry but you cannot commit suicide\");\n         userRepository.toggleEnabled(userId, status);\n@@ -333,6 +378,7 @@ public void enable(int userId, String currentUsername, boolean status) {\n         }\n     }\n \n+    @Transactional(readOnly = true)\n     public ValidationResult validateUser(Integer id, String username, String firstName, String lastName, String emailAddress) {\n \n         Optional<User> existing = Optional.ofNullable(id).flatMap(userRepository::findOptionalById);\n@@ -346,6 +392,7 @@ public ValidationResult validateUser(Integer id, String username, String firstNa\n             .collect(toList()));\n     }\n \n+    @Transactional(readOnly = true)\n     public ValidationResult validateNewPassword(String username, String oldPassword, String newPassword, String newPasswordConfirm) {\n         return userRepository.findByUsername(username)\n             .map(u -> {\n@@ -380,4 +427,51 @@ public Integer createPublicUserIfNotExists(String username, String email, String\n         return userRepository.findIdByUserName(username).orElse(null);\n     }\n \n+\n+    private void checkIsAdmin(Principal principal) {\n+        if (principal == null) {\n+            return;\n+        }\n+        if (isAdmin(findUserByUsername(principal.getName()))) {\n+            return;\n+        }\n+        log.warn(\"User {} is not an admin\", principal.getName());\n+        throw new IllegalArgumentException(\"User \" + principal.getName() + \" is not an admin\");\n+    }\n+\n+    private void checkAccessToUserId(Principal principal, int userId) {\n+        if (principal == null) {\n+            return;\n+        }\n+        var currentUser = findUserByUsername(principal.getName());\n+        if (isAdmin(currentUser)) {\n+            return;\n+        }\n+        var targetUser = findUser(userId);\n+        var targetUserOrgs = findUserOrganizations(targetUser.getUsername());\n+        Assert.isTrue(targetUserOrgs.size() == 1, \"Targeted user can only be in one organization\");\n+        for (var org : targetUserOrgs) {\n+            if (isOwnerOfOrganization(currentUser, org.getId())) {\n+                return;\n+            }\n+        }\n+        log.warn(\"User {} does not have access to userId {}\", principal.getName(), userId);\n+        throw new IllegalStateException(\"User \" + principal.getName() + \" does not have access to userId \" + userId);\n+    }\n+\n+    private void checkAccessToUserIdAndNewOrganization(Principal principal, int userId, int newOrganization) {\n+        checkAccessToUserId(principal, userId);\n+        checkAccessToOrganizationId(principal, newOrganization);\n+    }\n+\n+    private void checkAccessToOrganizationId(Principal principal, int organizationId) {\n+        if (principal == null) {\n+            return;\n+        }\n+        if (isOwnerOfOrganization(principal.getName(), organizationId)) {\n+            return;\n+        }\n+        log.warn(\"User {} don't have access to organizationId {}\", principal.getName(), organizationId);\n+        throw new IllegalArgumentException(\"User \" + principal.getName() + \" don't have access to organizationId \" + organizationId);\n+    }\n }"
        },
        {
          "filename": "src/test/java/alfio/controller/api/v1/EventApiV1IntegrationTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -105,9 +105,9 @@ public void ensureConfiguration() {\n         this.username = UUID.randomUUID().toString();\n \n         var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n-        userManager.createOrganization(organizationModification);\n+        userManager.createOrganization(organizationModification, null);\n         this.organization = organizationRepository.findByName(organizationName).orElseThrow();\n-        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL);\n+        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL, null);\n \n         this.mockPrincipal = Mockito.mock(Principal.class);\n         Mockito.when(mockPrincipal.getName()).thenReturn(username);"
        },
        {
          "filename": "src/test/java/alfio/controller/api/v1/ReservationApiV1ControllerTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -115,7 +115,7 @@ void setUp() {\n         Pair<Event, String> eventAndUser = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n         event = eventAndUser.getLeft();\n         username = UUID.randomUUID().toString();\n-        userManager.insertUser(event.getOrganizationId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL);\n+        userManager.insertUser(event.getOrganizationId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL, null);\n     }\n \n     @Test"
        },
        {
          "filename": "src/test/java/alfio/controller/api/v1/SubscriptionApiV1IntegrationTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -103,9 +103,9 @@ public void ensureConfiguration() {\n         this.username = UUID.randomUUID().toString();\n \n         var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n-        userManager.createOrganization(organizationModification);\n+        userManager.createOrganization(organizationModification, null);\n         var organization = organizationRepository.findByName(organizationName).orElseThrow();\n-        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL);\n+        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL, null);\n \n         this.principal = Mockito.mock(Principal.class);\n         Mockito.when(principal.getName()).thenReturn(username);"
        },
        {
          "filename": "src/test/java/alfio/manager/ConfigurationManagerIntegrationTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -100,7 +100,7 @@ void prepareEnv() {\n         organizationRepository.create(\"org\", \"org\", \"email@example.com\", null, null);\n         Organization organization = organizationRepository.findByName(\"org\").orElseThrow();\n \n-        userManager.insertUser(organization.getId(), USERNAME, \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL);\n+        userManager.insertUser(organization.getId(), USERNAME, \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL, null);\n \n         Map<String, String> desc = new HashMap<>();\n         desc.put(\"en\", \"muh description\");"
        },
        {
          "filename": "src/test/java/alfio/manager/system/DataMigratorIntegrationTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -100,7 +100,7 @@ private Pair<Event,String> initEvent(List<TicketCategoryModification> categories\n \n         organizationRepository.create(organizationName, \"org\", \"email@example.com\", null, null);\n         Organization organization = organizationRepository.findByName(organizationName).get();\n-        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL);\n+        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL, null);\n \n         Map<String, String> desc = new HashMap<>();\n         desc.put(\"en\", \"muh description\");"
        },
        {
          "filename": "src/test/java/alfio/test/util/IntegrationTestUtil.java",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -118,10 +118,10 @@ public static Pair<Event, String> initEvent(List<TicketCategoryModification> cat\n         String eventName = UUID.randomUUID().toString();\n \n         var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n-        userManager.createOrganization(organizationModification);\n+        userManager.createOrganization(organizationModification, null);\n         Organization organization = organizationRepository.findByName(organizationName).orElseThrow();\n-        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL);\n-        userManager.insertUser(organization.getId(), username+\"_owner\", \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL);\n+        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL, null);\n+        userManager.insertUser(organization.getId(), username+\"_owner\", \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL, null);\n \n         LocalDateTime expiration = LocalDateTime.now(ClockProvider.clock()).plusDays(5).plusHours(1);\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 6,
        "unique_directories": 8,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b4a52f45765a6054bf6a2dd89a528660e9959532",
            "date": "2025-01-08T14:28:08Z",
            "author_login": "cbellone"
          },
          {
            "sha": "4e6977dd094e59361e52dd57c5d4322e100f4cdf",
            "date": "2024-12-31T19:17:59Z",
            "author_login": "cbellone"
          },
          {
            "sha": "48e77f87ad5bc73b6a6a87834bdc9cf59ad75610",
            "date": "2024-12-31T18:59:47Z",
            "author_login": "cbellone"
          },
          {
            "sha": "8acd38834864b854b371bf16a539023c6802d4c4",
            "date": "2024-12-31T18:56:17Z",
            "author_login": "cbellone"
          },
          {
            "sha": "c08abfe37f97885e191ec22750a1732b64ebed35",
            "date": "2024-12-31T13:55:07Z",
            "author_login": "syjer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-639",
    "description": "Authorization Bypass Through User-Controlled Key in GitHub repository alfio-event/alf.io prior to 2.0-M4-2304.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-24T21:15:09.613",
    "last_modified": "2024-11-21T07:58:15.537",
    "fix_date": "2023-03-30T17:43:21Z"
  },
  "references": [
    {
      "url": "https://github.com/alfio-event/alf.io/commit/c9a16ab93d42b2beb06d529b57890121f85be6ef",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/649badc8-c935-4a84-8aa8-d3269ac54377",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/alfio-event/alf.io/commit/c9a16ab93d42b2beb06d529b57890121f85be6ef",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/649badc8-c935-4a84-8aa8-d3269ac54377",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.831082",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "alf.io",
    "owner": "alfio-event",
    "created_at": "2014-07-26T10:12:57Z",
    "updated_at": "2025-01-10T18:01:09Z",
    "pushed_at": "2025-01-08T14:28:22Z",
    "size": 47674,
    "stars": 1448,
    "forks": 354,
    "open_issues": 180,
    "watchers": 1448,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 5083128,
      "HTML": 700691,
      "JavaScript": 601739,
      "TypeScript": 366686,
      "PLpgSQL": 78190,
      "MAXScript": 77119,
      "CSS": 41234,
      "SCSS": 16853,
      "Shell": 1723,
      "Procfile": 62
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:09:08.045599"
  }
}