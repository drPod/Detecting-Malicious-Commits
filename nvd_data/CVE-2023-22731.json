{
  "cve_id": "CVE-2023-22731",
  "github_data": {
    "repository": "shopware/platform",
    "fix_commit": "89d1ea154689cb6202e0d3a0ceeae0febb0c09e1",
    "related_commits": [
      "89d1ea154689cb6202e0d3a0ceeae0febb0c09e1",
      "89d1ea154689cb6202e0d3a0ceeae0febb0c09e1"
    ],
    "patch_url": "https://github.com/shopware/platform/commit/89d1ea154689cb6202e0d3a0ceeae0febb0c09e1.patch",
    "fix_commit_details": {
      "sha": "89d1ea154689cb6202e0d3a0ceeae0febb0c09e1",
      "commit_date": "2022-12-21T15:03:45Z",
      "author": {
        "login": "shyim",
        "type": "User",
        "stats": {
          "total_commits": 2463,
          "average_weekly_commits": 6.331619537275064,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 240
        }
      },
      "commit_message": {
        "title": "NEXT-24667 - Add twig improvements",
        "length": 34,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 359,
        "additions": 337,
        "deletions": 22
      },
      "files": [
        {
          "filename": "changelog/_unreleased/2022-12-21-add-twig-filter-improvments.md",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+---\n+title: Add twig filter improvements\n+issue: NEXT-24667\n+---\n+\n+# Core\n+\n+* Added a `SecurityExtension` to allow only a whitelist of functions inside filters `map`, `filter`, `reduce` and `sort`.\n+\n+___\n+\n+# Upgrade Information\n+\n+## Twig filter whitelist for `map`, `filter`, `reduce` and `sort` \n+\n+The whitelist can be extended using a yaml configuration:\n+\n+```yaml\n+shopware:\n+    twig:\n+        allowed_php_functions: [ \"is_bool\" ]\n+```"
        },
        {
          "filename": "config-schema.json",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -86,6 +86,9 @@\n                 },\n                 \"profiler\": {\n                   \"$ref\": \"#/definitions/profiler\"\n+                },\n+                \"twig\": {\n+                    \"$ref\": \"#/definitions/twig\"\n                 }\n             },\n             \"title\": \"Shopware\"\n@@ -112,6 +115,19 @@\n             },\n             \"title\": \"Enabled profiler, available since 6.4.11.0\"\n         },\n+        \"twig\": {\n+            \"type\": \"object\",\n+            \"additionalProperties\": false,\n+            \"properties\": {\n+                \"allowed_php_functions\": {\n+                    \"type\": \"array\",\n+                    \"uniqueItems\": true,\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            }\n+        },\n         \"mail\": {\n             \"type\": \"object\",\n             \"additionalProperties\": false,"
        },
        {
          "filename": "phpstan-baseline.neon",
          "status": "modified",
          "additions": 1,
          "deletions": 22,
          "patch": "@@ -6875,10 +6875,7 @@ parameters:\n \t\t\tcount: 1\n \t\t\tpath: src/Core/Content/Seo/SeoUrlTemplate/TemplateGroup.php\n \n-\t\t-\n-\t\t\tmessage: \"#^Method Shopware\\\\\\\\Core\\\\\\\\Content\\\\\\\\Seo\\\\\\\\SeoUrlTwigFactory\\\\:\\\\:createTwigEnvironment\\\\(\\\\) has parameter \\\\$twigExtensions with no value type specified in iterable type iterable\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: src/Core/Content/Seo/SeoUrlTwigFactory.php\n+\n \n \t\t-\n \t\t\tmessage: \"#^Method Shopware\\\\\\\\Core\\\\\\\\Content\\\\\\\\Seo\\\\\\\\SeoUrlUpdater\\\\:\\\\:fetchLanguageChains\\\\(\\\\) has parameter \\\\$languages with no value type specified in iterable type array\\\\.$#\"\n@@ -16925,25 +16922,7 @@ parameters:\n \t\t\tcount: 1\n \t\t\tpath: src/Core/Framework/Rule/RuleConstraints.php\n \n-\t\t-\n-\t\t\tmessage: \"#^Method Shopware\\\\\\\\Core\\\\\\\\Framework\\\\\\\\Rule\\\\\\\\ScriptRule\\\\:\\\\:render\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: src/Core/Framework/Rule/ScriptRule.php\n \n-\t\t-\n-\t\t\tmessage: \"#^Method Shopware\\\\\\\\Core\\\\\\\\Framework\\\\\\\\Rule\\\\\\\\ScriptRule\\\\:\\\\:setConstraints\\\\(\\\\) has parameter \\\\$constraints with no value type specified in iterable type array\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: src/Core/Framework/Rule/ScriptRule.php\n-\n-\t\t-\n-\t\t\tmessage: \"#^Property Shopware\\\\\\\\Core\\\\\\\\Framework\\\\\\\\Rule\\\\\\\\ScriptRule\\\\:\\\\:\\\\$constraints type has no value type specified in iterable type array\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: src/Core/Framework/Rule/ScriptRule.php\n-\n-\t\t-\n-\t\t\tmessage: \"#^Property Shopware\\\\\\\\Core\\\\\\\\Framework\\\\\\\\Rule\\\\\\\\ScriptRule\\\\:\\\\:\\\\$values type has no value type specified in iterable type array\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: src/Core/Framework/Rule/ScriptRule.php\n \n \t\t-\n \t\t\tmessage: \"#^Method Shopware\\\\\\\\Core\\\\\\\\Framework\\\\\\\\Script\\\\\\\\Api\\\\\\\\ApiHook\\\\:\\\\:__construct\\\\(\\\\) has parameter \\\\$request with no value type specified in iterable type array\\\\.$#\""
        },
        {
          "filename": "src/Core/Content/Seo/SeoUrlTwigFactory.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -5,20 +5,26 @@\n use Cocur\\Slugify\\Bridge\\Twig\\SlugifyExtension;\n use Cocur\\Slugify\\SlugifyInterface;\n use Shopware\\Core\\Framework\\Adapter\\Twig\\Extension\\PhpSyntaxExtension;\n+use Shopware\\Core\\Framework\\Adapter\\Twig\\SecurityExtension;\n use Shopware\\Core\\Framework\\Adapter\\Twig\\TwigEnvironment;\n use Twig\\Environment;\n use Twig\\Extension\\EscaperExtension;\n+use Twig\\Extension\\ExtensionInterface;\n use Twig\\Loader\\ArrayLoader;\n \n class SeoUrlTwigFactory\n {\n+    /**\n+     * @param ExtensionInterface[] $twigExtensions\n+     */\n     public function createTwigEnvironment(SlugifyInterface $slugify, iterable $twigExtensions = []): Environment\n     {\n         $twig = new TwigEnvironment(new ArrayLoader());\n         $twig->setCache(false);\n         $twig->enableStrictVariables();\n         $twig->addExtension(new SlugifyExtension($slugify));\n         $twig->addExtension(new PhpSyntaxExtension());\n+        $twig->addExtension(new SecurityExtension([]));\n \n         /** @var EscaperExtension $coreExtension */\n         $coreExtension = $twig->getExtension(EscaperExtension::class);"
        },
        {
          "filename": "src/Core/Framework/Adapter/Twig/SecurityExtension.php",
          "status": "added",
          "additions": 127,
          "deletions": 0,
          "patch": "@@ -0,0 +1,127 @@\n+<?php declare(strict_types=1);\n+\n+namespace Shopware\\Core\\Framework\\Adapter\\Twig;\n+\n+use Twig\\Extension\\AbstractExtension;\n+use Twig\\TwigFilter;\n+\n+/**\n+ * @internal\n+ */\n+class SecurityExtension extends AbstractExtension\n+{\n+    /**\n+     * @var array<string>\n+     */\n+    private array $allowedPHPFunctions;\n+\n+    /**\n+     * @param array<string> $allowedPHPFunctions\n+     */\n+    public function __construct(array $allowedPHPFunctions)\n+    {\n+        $this->allowedPHPFunctions = $allowedPHPFunctions;\n+    }\n+\n+    /**\n+     * @return TwigFilter[]\n+     */\n+    public function getFilters(): array\n+    {\n+        return [\n+            new TwigFilter('map', [$this, 'map']),\n+            new TwigFilter('reduce', [$this, 'reduce']),\n+            new TwigFilter('filter', [$this, 'filter']),\n+            new TwigFilter('sort', [$this, 'sort']),\n+        ];\n+    }\n+\n+    /**\n+     * @param iterable<mixed> $array\n+     * @param string|callable|\\Closure $function\n+     *\n+     * @return array<mixed>\n+     */\n+    public function map(iterable $array, $function): array\n+    {\n+        if (\\is_string($function) && !\\in_array($function, $this->allowedPHPFunctions, true)) {\n+            throw new \\RuntimeException(sprintf('Function \"%s\" is not allowed', $function));\n+        }\n+\n+        $result = [];\n+        foreach ($array as $key => $value) {\n+            // @phpstan-ignore-next-line\n+            $result[$key] = $function($value);\n+        }\n+\n+        return $result;\n+    }\n+\n+    /**\n+     * @param iterable<mixed> $array\n+     * @param string|callable|\\Closure $function\n+     * @param mixed $initial\n+     *\n+     * @return mixed\n+     */\n+    public function reduce(iterable $array, $function, $initial = null)\n+    {\n+        if (\\is_string($function) && !\\in_array($function, $this->allowedPHPFunctions, true)) {\n+            throw new \\RuntimeException(sprintf('Function \"%s\" is not allowed', $function));\n+        }\n+\n+        if (!\\is_array($array)) {\n+            $array = iterator_to_array($array);\n+        }\n+\n+        // @phpstan-ignore-next-line\n+        return array_reduce($array, $function, $initial);\n+    }\n+\n+    /**\n+     * @param iterable<mixed> $array\n+     * @param string|callable|\\Closure $arrow\n+     *\n+     * @return iterable<mixed>\n+     */\n+    public function filter(iterable $array, $arrow): iterable\n+    {\n+        if (\\is_string($arrow) && !\\in_array($arrow, $this->allowedPHPFunctions, true)) {\n+            throw new \\RuntimeException(sprintf('Function \"%s\" is not allowed', $arrow));\n+        }\n+\n+        if (\\is_array($array)) {\n+            // @phpstan-ignore-next-line\n+            return array_filter($array, $arrow, \\ARRAY_FILTER_USE_BOTH);\n+        }\n+\n+        // @phpstan-ignore-next-line\n+        return new \\CallbackFilterIterator(new \\IteratorIterator($array), $arrow);\n+    }\n+\n+    /**\n+     * @param iterable<mixed> $array\n+     * @param string|callable|\\Closure|null $arrow\n+     *\n+     * @return array<mixed>\n+     */\n+    public function sort(iterable $array, $arrow = null): array\n+    {\n+        if (\\is_string($arrow) && !\\in_array($arrow, $this->allowedPHPFunctions, true)) {\n+            throw new \\RuntimeException(sprintf('Function \"%s\" is not allowed', $arrow));\n+        }\n+\n+        if ($array instanceof \\Traversable) {\n+            $array = iterator_to_array($array);\n+        }\n+\n+        if ($arrow !== null) {\n+            // @phpstan-ignore-next-line\n+            uasort($array, $arrow);\n+        } else {\n+            asort($array);\n+        }\n+\n+        return $array;\n+    }\n+}"
        },
        {
          "filename": "src/Core/Framework/DependencyInjection/Configuration.php",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -39,6 +39,7 @@ public function getConfigTreeBuilder(): TreeBuilder\n                 ->append($this->createCacheSection())\n                 ->append($this->createHtmlSanitizerSection())\n                 ->append($this->createIncrementSection())\n+                ->append($this->createTwigSection())\n             ->end();\n \n         return $treeBuilder;\n@@ -597,4 +598,20 @@ private function createProfilerSection(): ArrayNodeDefinition\n \n         return $rootNode;\n     }\n+\n+    private function createTwigSection(): ArrayNodeDefinition\n+    {\n+        $treeBuilder = new TreeBuilder('twig');\n+\n+        $rootNode = $treeBuilder->getRootNode();\n+        $rootNode\n+            ->children()\n+                ->arrayNode('allowed_php_functions')\n+                    ->performNoDeepMerging()\n+                    ->scalarPrototype()\n+                ->end()\n+            ->end();\n+\n+        return $rootNode;\n+    }\n }"
        },
        {
          "filename": "src/Core/Framework/DependencyInjection/services.xml",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -380,6 +380,11 @@ base-uri 'self';\n             <tag name=\"twig.extension\"/>\n         </service>\n \n+        <service id=\"Shopware\\Core\\Framework\\Adapter\\Twig\\SecurityExtension\">\n+            <argument>%shopware.twig.allowed_php_functions%</argument>\n+            <tag name=\"twig.extension\"/>\n+        </service>\n+\n         <service id=\"Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer\">\n             <argument type=\"service\" id=\"twig\"/>\n             <argument>%kernel.cache_dir%%</argument>"
        },
        {
          "filename": "src/Core/Framework/Resources/config/packages/shopware.yaml",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -250,3 +250,6 @@ shopware:\n             country_state_route: []\n             salutation_route: []\n             sitemap_route: []\n+\n+    twig:\n+        allowed_php_functions: []"
        },
        {
          "filename": "src/Core/Framework/Rule/ScriptRule.php",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n \n use Shopware\\Core\\Framework\\Adapter\\Twig\\Extension\\ComparisonExtension;\n use Shopware\\Core\\Framework\\Adapter\\Twig\\Extension\\PhpSyntaxExtension;\n+use Shopware\\Core\\Framework\\Adapter\\Twig\\SecurityExtension;\n use Shopware\\Core\\Framework\\Adapter\\Twig\\TwigEnvironment;\n use Shopware\\Core\\Framework\\App\\Event\\Hooks\\AppScriptConditionHook;\n use Shopware\\Core\\Framework\\Script\\Debugging\\Debug;\n@@ -24,8 +25,14 @@ class ScriptRule extends Rule\n {\n     protected string $script = '';\n \n+    /**\n+     * @var array<mixed>\n+     */\n     protected array $constraints = [];\n \n+    /**\n+     * @var array<mixed>\n+     */\n     protected array $values = [];\n \n     protected ?\\DateTimeInterface $lastModified = null;\n@@ -79,6 +86,8 @@ public function match(RuleScope $scope): bool\n             $twig->addExtension(new DebugExtension());\n         }\n \n+        $twig->addExtension(new SecurityExtension([]));\n+\n         $hook = new AppScriptConditionHook($scope->getContext());\n \n         try {\n@@ -88,11 +97,17 @@ public function match(RuleScope $scope): bool\n         }\n     }\n \n+    /**\n+     * @return array<mixed>\n+     */\n     public function getConstraints(): array\n     {\n         return $this->constraints;\n     }\n \n+    /**\n+     * @param array<mixed> $constraints\n+     */\n     public function setConstraints(array $constraints): void\n     {\n         $this->constraints = $constraints;\n@@ -103,6 +118,9 @@ public function getName(): string\n         return 'scriptRule';\n     }\n \n+    /**\n+     * @param array<mixed> $context\n+     */\n     private function render(TwigEnvironment $twig, Script $script, Hook $hook, string $name, array $context): bool\n     {\n         if (!$this->traces) {"
        },
        {
          "filename": "src/Core/Framework/Script/Execution/ScriptExecutor.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -5,6 +5,7 @@\n use Psr\\Log\\LoggerInterface;\n use Shopware\\Core\\DevOps\\Environment\\EnvironmentHelper;\n use Shopware\\Core\\Framework\\Adapter\\Twig\\Extension\\PhpSyntaxExtension;\n+use Shopware\\Core\\Framework\\Adapter\\Twig\\SecurityExtension;\n use Shopware\\Core\\Framework\\Adapter\\Twig\\TwigEnvironment;\n use Shopware\\Core\\Framework\\App\\Event\\Hooks\\AppLifecycleHook;\n use Shopware\\Core\\Framework\\Script\\Debugging\\Debug;\n@@ -161,6 +162,7 @@ private function initEnv(Script $script): Environment\n \n         $twig->addExtension(new PhpSyntaxExtension());\n         $twig->addExtension($this->translationExtension);\n+        $twig->addExtension(new SecurityExtension([]));\n \n         if ($script->getTwigOptions()['debug'] ?? false) {\n             $twig->addExtension(new DebugExtension());"
        },
        {
          "filename": "tests/unit/php/Core/Framework/Adapter/Twig/SecurityExtensionTest.php",
          "status": "added",
          "additions": 120,
          "deletions": 0,
          "patch": "@@ -0,0 +1,120 @@\n+<?php declare(strict_types=1);\n+\n+namespace Shopware\\Tests\\Unit\\Core\\Framework\\Adapter\\Twig;\n+\n+use PHPUnit\\Framework\\TestCase;\n+use Shopware\\Core\\Framework\\Adapter\\Twig\\SecurityExtension;\n+use Twig\\Environment;\n+use Twig\\Error\\RuntimeError;\n+use Twig\\Loader\\ArrayLoader;\n+\n+/**\n+ * @internal\n+ * @covers \\Shopware\\Core\\Framework\\Adapter\\Twig\\SecurityExtension\n+ */\n+class SecurityExtensionTest extends TestCase\n+{\n+    public function testMapNotAllowedFunction(): void\n+    {\n+        $this->expectException(RuntimeError::class);\n+        $this->runTwig('{{ [\"a\", \"b\", \"c\"]|map(\"str_rot13\")|join }}');\n+    }\n+\n+    public function testMapWithAllowedFunction(): void\n+    {\n+        static::assertSame('nop', $this->runTwig('{{ [\"a\", \"b\", \"c\"]|map(\"str_rot13\")|join }}', ['str_rot13']));\n+    }\n+\n+    public function testMapWithClosure(): void\n+    {\n+        static::assertSame('a-testb-testc-test', $this->runTwig('{{ [\"a\", \"b\", \"c\"]|map(v => (v ~ \"-test\"))|join }}'));\n+    }\n+\n+    public function testReduceNotAllowedFunction(): void\n+    {\n+        $this->expectException(RuntimeError::class);\n+        $this->runTwig('{{ [\"a\", \"b\", \"c\"]|reduce(\"empty\")|join }}');\n+    }\n+\n+    public function testReduceAllowedFunction(): void\n+    {\n+        static::assertSame('6', $this->runTwig('{{ [1 , 5]|reduce((a, b) => a + b)|json_encode|raw }}'));\n+    }\n+\n+    public function testReduceOnIterator(): void\n+    {\n+        static::assertSame('3', $this->runTwig('{{ test|reduce((a, b) => a + b)|json_encode|raw }}', [], ['test' => new \\ArrayIterator([1, 2])]));\n+    }\n+\n+    public function testFilterNotAllowedFunctionWithAllowedFunction(): void\n+    {\n+        $this->expectException(RuntimeError::class);\n+        $this->runTwig('{{ [\"a\", \"b\", \"c\"]|filter(\"str_rot13\")|join }}');\n+    }\n+\n+    public function testFilterClosure(): void\n+    {\n+        static::assertSame('a', $this->runTwig('{{ [\"a\", \"b\", \"c\"]|filter(v => v == \"a\")|join }}'));\n+    }\n+\n+    public function testFilterIteratorClosure(): void\n+    {\n+        static::assertSame(\n+            'a',\n+            $this->runTwig('{{ test|filter(v => v == \"a\")|join }}', [], ['test' => new \\ArrayIterator(['a', 'b', 'c'])])\n+        );\n+    }\n+\n+    public function testSortNotAllowedFunction(): void\n+    {\n+        $this->expectException(RuntimeError::class);\n+        $this->runTwig('{{ [\"a\", \"b\", \"c\"]|sort(\"str_rot13\")|join }}');\n+    }\n+\n+    public function testSortAllowedFunction(): void\n+    {\n+        set_error_handler(static function () {\n+            return true;\n+        });\n+\n+        static::assertSame('abc', $this->runTwig('{{ [\"a\", \"b\", \"c\"]|sort(\"str_starts_with\")|join }}', ['str_starts_with']));\n+\n+        restore_error_handler();\n+    }\n+\n+    public function testSortClosure(): void\n+    {\n+        static::assertSame('cba', $this->runTwig('{{ [\"a\", \"b\", \"c\"]|sort((a, b) => b <=> a)|join }}'));\n+    }\n+\n+    public function testSortIteratorClosure(): void\n+    {\n+        static::assertSame(\n+            'cba',\n+            $this->runTwig('{{ test|sort((a, b) => b <=> a)|join }}', [], ['test' => new \\ArrayIterator(['a', 'b', 'c'])])\n+        );\n+    }\n+\n+    public function testSortDefault(): void\n+    {\n+        static::assertSame(\n+            '123',\n+            $this->runTwig('{{ test|sort|join }}', [], ['test' => ['2', '3', '1']])\n+        );\n+    }\n+\n+    /**\n+     * @param array<string> $allowedFunctions\n+     * @param array<mixed> $variables\n+     */\n+    private function runTwig(string $template, array $allowedFunctions = [], array $variables = []): string\n+    {\n+        $twig = new Environment(new ArrayLoader([\n+            'test' => $template,\n+        ]));\n+\n+        $twig->addExtension(new SecurityExtension($allowedFunctions));\n+\n+        return $twig->render('test', $variables);\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 9,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a87d38f4e4ab920afb728d396a4fdff6dd1ed893",
            "date": "2025-01-14T12:59:02Z",
            "author_login": "Bird87ZA"
          },
          {
            "sha": "e957d7150a872944c008a7169bf5f8d97889b355",
            "date": "2025-01-14T11:55:14Z",
            "author_login": "shyim"
          },
          {
            "sha": "02af717865eb1d240850314ad103fc276dbb56f8",
            "date": "2025-01-14T10:50:49Z",
            "author_login": "akf-bw"
          },
          {
            "sha": "17723a093f9cf2c4617a471091ef4607da1d8769",
            "date": "2025-01-14T10:29:25Z",
            "author_login": "jleifeld"
          },
          {
            "sha": "9b977d57e54a9275be40804a7dd7cca05c0f748c",
            "date": "2025-01-14T10:24:01Z",
            "author_login": "frobel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "Shopware is an open source commerce platform based on Symfony Framework and Vue js. In a Twig environment **without the Sandbox extension**, it is possible to refer to PHP functions in twig filters like `map`, `filter`, `sort`. This allows a template to call any global PHP function and thus execute arbitrary code. The attacker must have access to a Twig environment in order to exploit this vulnerability. This problem has been fixed with 6.4.18.1 with an override of the specified filters until the integration of the Sandbox extension has been finished. Users are advised to upgrade. Users of major versions 6.1, 6.2, and 6.3 may also receive this fix via a plugin.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-17T22:15:10.977",
    "last_modified": "2024-11-21T07:45:18.807",
    "fix_date": "2022-12-21T15:03:45Z"
  },
  "references": [
    {
      "url": "https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-01-2023?category=security-updates",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/89d1ea154689cb6202e0d3a0ceeae0febb0c09e1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-93cw-f5jj-x85w",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-01-2023?category=security-updates",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/89d1ea154689cb6202e0d3a0ceeae0febb0c09e1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-93cw-f5jj-x85w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.568795",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shopware",
    "owner": "shopware",
    "created_at": "2018-05-03T13:00:31Z",
    "updated_at": "2025-01-14T12:59:07Z",
    "pushed_at": "2025-01-14T13:28:13Z",
    "size": 289410,
    "stars": 2894,
    "forks": 1042,
    "open_issues": 911,
    "watchers": 2894,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [
      "6.4",
      "6.5.x"
    ],
    "languages": {
      "PHP": 33467815,
      "JavaScript": 12727064,
      "Twig": 5566016,
      "TypeScript": 1850093,
      "SCSS": 1033491,
      "CSS": 135217,
      "Vue": 32178,
      "Shell": 30871,
      "HTML": 26015,
      "Nix": 4972,
      "Groovy": 3900,
      "Dockerfile": 2862,
      "Smarty": 1216
    },
    "commit_activity": {
      "total_commits_last_year": 4219,
      "avg_commits_per_week": 81.13461538461539,
      "days_active_last_year": 285
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:37:45.571181"
  }
}