{
  "cve_id": "CVE-2023-22735",
  "github_data": {
    "repository": "zulip/zulip",
    "fix_commit": "04cf68b45ebb5c03247a0d6453e35ffc175d55da",
    "related_commits": [
      "04cf68b45ebb5c03247a0d6453e35ffc175d55da",
      "2f6c5a883e106aa82a570d3d1f243993284b70f3",
      "04cf68b45ebb5c03247a0d6453e35ffc175d55da",
      "2f6c5a883e106aa82a570d3d1f243993284b70f3"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "04cf68b45ebb5c03247a0d6453e35ffc175d55da",
      "commit_date": "2022-11-22T19:41:35Z",
      "author": {
        "login": "alexmv",
        "type": "User",
        "stats": {
          "total_commits": 2387,
          "average_weekly_commits": 3.6779661016949152,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 208
        }
      },
      "commit_message": {
        "title": "uploads: Serve S3 uploads directly from nginx.",
        "length": 3739,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 270,
        "additions": 211,
        "deletions": 59
      },
      "files": [
        {
          "filename": "docs/production/deployment.md",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -684,6 +684,29 @@ all at once. This decreases the number of 502's served to clients, at\n the cost of slightly increased memory usage, and the possibility that\n different requests will be served by different versions of the code.\n \n+#### `s3_memory_cache_size`\n+\n+Used only when the [S3 storage backend][s3-backend] is in use.\n+Controls the in-memory size of the cache _index_; the default is 1MB,\n+which is enough to store about 8 thousand entries.\n+\n+#### `s3_disk_cache_size`\n+\n+Used only when the [S3 storage backend][s3-backend] is in use.\n+Controls the on-disk size of the cache _contents_; the default is\n+200MB.\n+\n+#### `s3_cache_inactive_time`\n+\n+Used only when the [S3 storage backend][s3-backend] is in use.\n+Controls the longest amount of time an entry will be cached since last\n+use; the default is 30 days. Since the contents of the cache are\n+immutable, this serves only as a potential additional limit on the\n+size of the contents on disk; `s3_disk_cache_size` is expected to be\n+the primary control for cache sizing.\n+\n+[s3-backend]: upload-backends.md\n+\n #### `uwsgi_listen_backlog_limit`\n \n Override the default uwsgi backlog of 128 connections."
        },
        {
          "filename": "docs/production/upload-backends.md",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -55,6 +55,36 @@ uploading files, this process does not upload them to Amazon S3; see\n [migration instructions](#migrating-from-local-uploads-to-amazon-s3-backend)\n below for those steps.\n \n+## S3 local caching\n+\n+For performance reasons, Zulip stores a cache of recently served user\n+uploads on disk locally, even though the durable storage is kept in\n+S3. There are a number of parameters which control the size and usage\n+of this cache, which is maintained by nginx:\n+\n+- `s3_memory_cache_size` controls the in-memory size of the cache\n+  _index_; the default is 1MB, which is enough to store about 8 thousand\n+  entries.\n+- `s3_disk_cache_size` controls the on-disk size of the cache\n+  _contents_; the default is 200MB.\n+- `s3_cache_inactive_time` controls the longest amount of time an\n+  entry will be cached since last use; the default is 30 days. Since\n+  the contents of the cache are immutable, this serves only as a\n+  potential additional limit on the size of the contents on disk;\n+  `s3_disk_cache_size` is expected to be the primary control for cache\n+  sizing.\n+\n+These defaults are likely sufficient for small-to-medium deployments.\n+Large deployments, or deployments with image-heavy use cases, will\n+want to increase `s3_disk_cache_size`, potentially to be several\n+gigabytes. `s3_memory_cache_size` should potentially be increased,\n+based on estimating the number of files that the larger disk cache\n+will hold.\n+\n+You may also wish to increase the cache sizes if the S3 storage (or\n+S3-compatible equivalent) is not closely located to your Zulip server,\n+as cache misses will be more expensive.\n+\n ## S3 bucket policy\n \n The best way to do the S3 integration with Amazon is to create a new IAM user"
        },
        {
          "filename": "puppet/zulip/files/nginx/zulip-include-frontend/uploads-internal.conf",
          "status": "modified",
          "additions": 42,
          "deletions": 2,
          "patch": "@@ -1,12 +1,52 @@\n-location /internal/uploads {\n+# Handle redirects to S3\n+location ~ ^/internal/s3/([^/]+)/(.*) {\n+    internal;\n+    include /etc/nginx/zulip-include/headers;\n+\n+    set $download_url https://$1/$2;\n+    proxy_set_header Host $1;\n+\n+    # Ensure that we only get _one_ of these headers: the one that\n+    # Django added, not the one from S3.\n+    proxy_hide_header Content-Disposition;\n+    proxy_hide_header Cache-Control;\n+    proxy_hide_header Expires;\n+    proxy_hide_header Set-Cookie;\n+    # We are _leaving_ S3 to provide Content-Type and Accept-Ranges\n+    # headers, which are the two remaining headers which nginx would\n+    # also pass through from the first response.  Django explicitly\n+    # unsets the former, and does not set the latter.\n+\n+    # nginx does its own DNS resolution, which is necessary here to\n+    # resolve the IP of the S3 server.  Point it at the local caching\n+    # systemd resolved service.  The validity duration is set to match\n+    # S3's DNS validity.\n+    resolver 127.0.0.53 valid=300s;\n+    resolver_timeout 10s;\n+\n+    proxy_pass $download_url$is_args$args;\n+    proxy_cache uploads;\n+    # If the S3 response doesn't contain Cache-Control headers (which\n+    # we don't expect it to) then we assume they are valid for a very\n+    # long time.  The size of the cache is controlled by\n+    # `s3_disk_cache_size` and read frequency, set via\n+    # `s3_cache_inactive_time`.\n+    proxy_cache_valid 200 1y;\n+    # Don't include query parameters in the cache key, since those\n+    # include a time-based auth token\n+    proxy_cache_key $download_url;\n+}\n+\n+# Internal file-serving\n+location /internal/local/uploads {\n     internal;\n     include /etc/nginx/zulip-include/api_headers;\n     add_header Content-Security-Policy \"default-src 'none'; style-src 'self' 'unsafe-inline'; img-src 'self'; object-src 'self'; plugin-types application/pdf;\";\n     include /etc/nginx/zulip-include/uploads.types;\n     alias /home/zulip/uploads/files;\n }\n \n-location /internal/user_avatars {\n+location /internal/local/user_avatars {\n     internal;\n     include /etc/nginx/zulip-include/headers;\n     add_header Content-Security-Policy \"default-src 'none' img-src 'self'\";"
        },
        {
          "filename": "puppet/zulip/manifests/app_frontend_base.pp",
          "status": "modified",
          "additions": 18,
          "deletions": 1,
          "patch": "@@ -69,6 +69,18 @@\n     notify  => Service['nginx'],\n   }\n \n+  $s3_memory_cache_size = zulipconf('application_server', 's3_memory_cache_size', '1M')\n+  $s3_disk_cache_size = zulipconf('application_server', 's3_disk_cache_size', '200M')\n+  $s3_cache_inactive_time = zulipconf('application_server', 's3_cache_inactive_time', '30d')\n+  file { '/etc/nginx/zulip-include/s3-cache':\n+    require => [Package[$zulip::common::nginx], File['/srv/zulip-uploaded-files-cache']],\n+    owner   => 'root',\n+    group   => 'root',\n+    mode    => '0644',\n+    content => template('zulip/nginx/s3-cache.template.erb'),\n+    notify  => Service['nginx'],\n+  }\n+\n   file { '/etc/nginx/zulip-include/app.d/uploads-internal.conf':\n     ensure  => file,\n     require => Package[$zulip::common::nginx],\n@@ -200,7 +212,12 @@\n     group  => 'zulip',\n     mode   => '0755',\n   }\n-\n+  file { '/srv/zulip-uploaded-files-cache':\n+    ensure => directory,\n+    owner  => 'zulip',\n+    group  => 'zulip',\n+    mode   => '0755',\n+  }\n   file { '/var/log/zulip/queue_error':\n     ensure => directory,\n     owner  => 'zulip',"
        },
        {
          "filename": "puppet/zulip/templates/nginx/s3-cache.template.erb",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+# This cache is only used if S3 file storage is configured.\n+proxy_cache_path /srv/zulip-uploaded-files-cache\n+    levels=1:2\n+    keys_zone=uploads:<%= @s3_memory_cache_size %>\n+    inactive=<%= @s3_cache_inactive_time %>\n+    max_size=<%= @s3_disk_cache_size %>;"
        },
        {
          "filename": "puppet/zulip/templates/nginx/zulip-enterprise.template.erb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -12,9 +12,11 @@ server {\n }\n <% end -%>\n \n+include /etc/nginx/zulip-include/s3-cache;\n include /etc/nginx/zulip-include/upstreams;\n include /etc/zulip/nginx_sharding_map.conf;\n \n+\n server {\n <% if @nginx_http_only -%>\n     listen <%= @nginx_listen_port %>;"
        },
        {
          "filename": "puppet/zulip_ops/files/nginx/sites-available/zulip",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,3 +1,4 @@\n+include /etc/nginx/zulip-include/s3-cache;\n include /etc/nginx/zulip-include/upstreams;\n include /etc/zulip/nginx_sharding_map.conf;\n "
        },
        {
          "filename": "puppet/zulip_ops/files/nginx/sites-available/zulip-staging",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -5,6 +5,7 @@ server {\n     return 301 https://$server_name$request_uri;\n }\n \n+include /etc/nginx/zulip-include/s3-cache;\n include /etc/nginx/zulip-include/upstreams;\n include /etc/zulip/nginx_sharding_map.conf;\n "
        },
        {
          "filename": "zerver/lib/upload/s3.py",
          "status": "modified",
          "additions": 5,
          "deletions": 8,
          "patch": "@@ -91,24 +91,21 @@ def upload_image_to_s3(\n     )\n \n \n-def get_signed_upload_url(path: str, download: bool = False) -> str:\n+def get_signed_upload_url(path: str) -> str:\n     client = boto3.client(\n         \"s3\",\n         aws_access_key_id=settings.S3_KEY,\n         aws_secret_access_key=settings.S3_SECRET_KEY,\n         region_name=settings.S3_REGION,\n         endpoint_url=settings.S3_ENDPOINT_URL,\n     )\n-    params = {\n-        \"Bucket\": settings.S3_AUTH_UPLOADS_BUCKET,\n-        \"Key\": path,\n-    }\n-    if download:\n-        params[\"ResponseContentDisposition\"] = \"attachment\"\n \n     return client.generate_presigned_url(\n         ClientMethod=\"get_object\",\n-        Params=params,\n+        Params={\n+            \"Bucket\": settings.S3_AUTH_UPLOADS_BUCKET,\n+            \"Key\": path,\n+        },\n         ExpiresIn=SIGNED_UPLOAD_URL_DURATION,\n         HttpMethod=\"GET\",\n     )"
        },
        {
          "filename": "zerver/tests/test_upload.py",
          "status": "modified",
          "additions": 35,
          "deletions": 13,
          "patch": "@@ -949,7 +949,7 @@ def check_xsend_links(\n             test_run, worker = os.path.split(os.path.dirname(settings.LOCAL_UPLOADS_DIR))\n             self.assertEqual(\n                 response[\"X-Accel-Redirect\"],\n-                \"/internal/uploads/\" + fp_path + \"/\" + name_str_for_test,\n+                \"/internal/local/uploads/\" + fp_path + \"/\" + name_str_for_test,\n             )\n             if content_disposition != \"\":\n                 self.assertIn(\"attachment;\", response[\"Content-disposition\"])\n@@ -1882,7 +1882,7 @@ def test_avatar_url_local(self) -> None:\n             result = self.client_get(url)\n             self.assertEqual(result.status_code, 200)\n             internal_redirect_path = urlparse(url).path.replace(\n-                \"/user_avatars/\", \"/internal/user_avatars/\"\n+                \"/user_avatars/\", \"/internal/local/user_avatars/\"\n             )\n             self.assertEqual(result[\"X-Accel-Redirect\"], internal_redirect_path)\n             self.assertEqual(b\"\", result.content)\n@@ -2098,35 +2098,57 @@ def test_file_upload_authed(self) -> None:\n         uri = response_dict[\"uri\"]\n         self.assertEqual(base, uri[: len(base)])\n \n+        # In development, this is just a redirect\n         response = self.client_get(uri)\n         redirect_url = response[\"Location\"]\n         path = urllib.parse.urlparse(redirect_url).path\n         assert path.startswith(\"/\")\n-        key = path[1:]\n+        key = path[len(\"/\") :]\n+        self.assertEqual(b\"zulip!\", bucket.Object(key).get()[\"Body\"].read())\n+\n+        prefix = f\"/internal/s3/{settings.S3_AUTH_UPLOADS_BUCKET}.s3.amazonaws.com/\"\n+        with self.settings(DEVELOPMENT=False):\n+            response = self.client_get(uri)\n+        redirect_url = response[\"X-Accel-Redirect\"]\n+        path = urllib.parse.urlparse(redirect_url).path\n+        assert path.startswith(prefix)\n+        key = path[len(prefix) :]\n         self.assertEqual(b\"zulip!\", bucket.Object(key).get()[\"Body\"].read())\n \n         # Check the download endpoint\n         download_uri = uri.replace(\"/user_uploads/\", \"/user_uploads/download/\")\n-        response = self.client_get(download_uri)\n-        redirect_url = response[\"Location\"]\n+        with self.settings(DEVELOPMENT=False):\n+            response = self.client_get(download_uri)\n+        redirect_url = response[\"X-Accel-Redirect\"]\n         path = urllib.parse.urlparse(redirect_url).path\n-        assert path.startswith(\"/\")\n-        key = path[1:]\n+        assert path.startswith(prefix)\n+        key = path[len(prefix) :]\n         self.assertEqual(b\"zulip!\", bucket.Object(key).get()[\"Body\"].read())\n \n         # Now try the endpoint that's supposed to return a temporary URL for access\n         # to the file.\n         result = self.client_get(\"/json\" + uri)\n         data = self.assert_json_success(result)\n         url_only_url = data[\"url\"]\n-        path = urllib.parse.urlparse(url_only_url).path\n-        assert path.startswith(\"/\")\n-        key = path[1:]\n+\n+        self.assertNotEqual(url_only_url, uri)\n+        self.assertIn(\"user_uploads/temporary/\", url_only_url)\n+        self.assertTrue(url_only_url.endswith(\"zulip.txt\"))\n+        # The generated URL has a token authorizing the requestor to access the file\n+        # without being logged in.\n+        self.logout()\n+        with self.settings(DEVELOPMENT=False):\n+            self.client_get(url_only_url)\n+        redirect_url = response[\"X-Accel-Redirect\"]\n+        path = urllib.parse.urlparse(redirect_url).path\n+        assert path.startswith(prefix)\n+        key = path[len(prefix) :]\n         self.assertEqual(b\"zulip!\", bucket.Object(key).get()[\"Body\"].read())\n \n-        # Note: Depending on whether the calls happened in the same\n-        # second (resulting in the same timestamp+signature),\n-        # url_only_url may or may not equal redirect_url.\n+        # The original uri shouldn't work when logged out:\n+        with self.settings(DEVELOPMENT=False):\n+            result = self.client_get(uri)\n+        self.assertEqual(result.status_code, 403)\n \n         hamlet = self.example_user(\"hamlet\")\n         self.subscribe(hamlet, \"Denmark\")"
        },
        {
          "filename": "zerver/views/upload.py",
          "status": "modified",
          "additions": 45,
          "deletions": 32,
          "patch": "@@ -88,42 +88,40 @@ def internal_nginx_redirect(internal_path: str) -> HttpResponse:\n     return response\n \n \n-def serve_s3(\n-    request: HttpRequest, url_path: str, url_only: bool, download: bool = False\n-) -> HttpResponse:\n-    url = get_signed_upload_url(url_path, download=download)\n-    if url_only:\n-        return json_success(request, data=dict(url=url))\n+def serve_s3(request: HttpRequest, path_id: str, download: bool = False) -> HttpResponse:\n+    url = get_signed_upload_url(path_id)\n+    assert url.startswith(\"https://\")\n+\n+    if settings.DEVELOPMENT:\n+        # In development, we do not have the nginx server to offload\n+        # the response to; serve a redirect to the short-lived S3 URL.\n+        # This means the content cannot be cached by the browser, but\n+        # this is acceptable in development.\n+        return redirect(url)\n \n-    return redirect(url)\n+    response = internal_nginx_redirect(\"/internal/s3/\" + url[len(\"https://\") :])\n+    patch_disposition_header(response, path_id, download)\n+    patch_cache_control(response, private=True, immutable=True)\n+    return response\n \n \n-def serve_local(\n-    request: HttpRequest, path_id: str, url_only: bool, download: bool = False\n-) -> HttpResponseBase:\n+def serve_local(request: HttpRequest, path_id: str, download: bool = False) -> HttpResponseBase:\n     assert settings.LOCAL_FILES_DIR is not None\n     local_path = os.path.join(settings.LOCAL_FILES_DIR, path_id)\n     assert_is_local_storage_path(\"files\", local_path)\n     if not os.path.isfile(local_path):\n         return HttpResponseNotFound(\"<p>File not found</p>\")\n \n-    if url_only:\n-        url = generate_unauthed_file_access_url(path_id)\n-        return json_success(request, data=dict(url=url))\n-\n-    mimetype, encoding = guess_type(local_path)\n-    attachment = download or mimetype not in INLINE_MIME_TYPES\n-\n     if settings.DEVELOPMENT:\n         # In development, we do not have the nginx server to offload\n         # the response to; serve it directly ourselves.\n         # FileResponse handles setting Content-Disposition, etc.\n-        response: HttpResponseBase = FileResponse(open(local_path, \"rb\"), as_attachment=attachment)\n+        response: HttpResponseBase = FileResponse(open(local_path, \"rb\"), as_attachment=download)\n         patch_cache_control(response, private=True, immutable=True)\n         return response\n \n-    response = internal_nginx_redirect(quote(f\"/internal/uploads/{path_id}\"))\n-    patch_disposition_header(response, local_path, attachment)\n+    response = internal_nginx_redirect(quote(f\"/internal/local/uploads/{path_id}\"))\n+    patch_disposition_header(response, local_path, download)\n     patch_cache_control(response, private=True, immutable=True)\n     return response\n \n@@ -170,25 +168,32 @@ def serve_file(\n         return HttpResponseNotFound(_(\"<p>File not found.</p>\"))\n     if not is_authorized:\n         return HttpResponseForbidden(_(\"<p>You are not authorized to view this file.</p>\"))\n-    if settings.LOCAL_UPLOADS_DIR is not None:\n-        return serve_local(request, path_id, url_only, download=download)\n+    if url_only:\n+        url = generate_unauthed_file_access_url(path_id)\n+        return json_success(request, data=dict(url=url))\n+\n+    mimetype, encoding = guess_type(path_id)\n+    download = download or mimetype not in INLINE_MIME_TYPES\n \n-    return serve_s3(request, path_id, url_only, download=download)\n+    if settings.LOCAL_UPLOADS_DIR is not None:\n+        return serve_local(request, path_id, download=download)\n+    else:\n+        return serve_s3(request, path_id, download=download)\n \n \n-LOCAL_FILE_ACCESS_TOKEN_SALT = \"local_file_\"\n+USER_UPLOADS_ACCESS_TOKEN_SALT = \"user_uploads_\"\n \n \n def generate_unauthed_file_access_url(path_id: str) -> str:\n-    signed_data = TimestampSigner(salt=LOCAL_FILE_ACCESS_TOKEN_SALT).sign(path_id)\n+    signed_data = TimestampSigner(salt=USER_UPLOADS_ACCESS_TOKEN_SALT).sign(path_id)\n     token = base64.b16encode(signed_data.encode()).decode()\n \n     filename = path_id.split(\"/\")[-1]\n-    return reverse(\"local_file_unauthed\", args=[token, filename])\n+    return reverse(\"file_unauthed_from_token\", args=[token, filename])\n \n \n-def get_local_file_path_id_from_token(token: str) -> Optional[str]:\n-    signer = TimestampSigner(salt=LOCAL_FILE_ACCESS_TOKEN_SALT)\n+def get_file_path_id_from_token(token: str) -> Optional[str]:\n+    signer = TimestampSigner(salt=USER_UPLOADS_ACCESS_TOKEN_SALT)\n     try:\n         signed_data = base64.b16decode(token).decode()\n         path_id = signer.unsign(signed_data, max_age=timedelta(seconds=60))\n@@ -198,14 +203,22 @@ def get_local_file_path_id_from_token(token: str) -> Optional[str]:\n     return path_id\n \n \n-def serve_local_file_unauthed(request: HttpRequest, token: str, filename: str) -> HttpResponseBase:\n-    path_id = get_local_file_path_id_from_token(token)\n+def serve_file_unauthed_from_token(\n+    request: HttpRequest, token: str, filename: str\n+) -> HttpResponseBase:\n+    path_id = get_file_path_id_from_token(token)\n     if path_id is None:\n         raise JsonableError(_(\"Invalid token\"))\n     if path_id.split(\"/\")[-1] != filename:\n         raise JsonableError(_(\"Invalid filename\"))\n \n-    return serve_local(request, path_id, url_only=False)\n+    mimetype, encoding = guess_type(path_id)\n+    download = mimetype not in INLINE_MIME_TYPES\n+\n+    if settings.LOCAL_UPLOADS_DIR is not None:\n+        return serve_local(request, path_id, download=download)\n+    else:\n+        return serve_s3(request, path_id, download=download)\n \n \n def serve_local_avatar_unauthed(request: HttpRequest, path: str) -> HttpResponseBase:\n@@ -232,7 +245,7 @@ def serve_local_avatar_unauthed(request: HttpRequest, path: str) -> HttpResponse\n     if settings.DEVELOPMENT:\n         response: HttpResponseBase = FileResponse(open(local_path, \"rb\"))\n     else:\n-        response = internal_nginx_redirect(quote(f\"/internal/user_avatars/{path}\"))\n+        response = internal_nginx_redirect(quote(f\"/internal/local/user_avatars/{path}\"))\n \n     # We do _not_ mark the contents as immutable for caching purposes,\n     # since the path for avatar images is hashed only by their user-id"
        },
        {
          "filename": "zproject/urls.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -165,9 +165,9 @@\n from zerver.views.upload import (\n     serve_file_backend,\n     serve_file_download_backend,\n+    serve_file_unauthed_from_token,\n     serve_file_url_backend,\n     serve_local_avatar_unauthed,\n-    serve_local_file_unauthed,\n     upload_file_backend,\n )\n from zerver.views.user_groups import (\n@@ -639,8 +639,8 @@\n urls += [\n     path(\n         \"user_uploads/temporary/<token>/<filename>\",\n-        serve_local_file_unauthed,\n-        name=\"local_file_unauthed\",\n+        serve_file_unauthed_from_token,\n+        name=\"file_unauthed_from_token\",\n     ),\n     rest_path(\n         \"user_uploads/download/<realm_id_str>/<path:filename>\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 9,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "32f9ee7a62cdeb9cca5b694dc0fdb805dbcbff87",
            "date": "2025-01-25T11:51:02Z",
            "author_login": "kuv2707"
          },
          {
            "sha": "f52ec0559c4b10f841dcb9d4c9089363b5f7fffb",
            "date": "2025-01-23T21:10:14Z",
            "author_login": "andersk"
          },
          {
            "sha": "73783f551986f138495ad22721a5d8de06153c77",
            "date": "2025-01-23T21:08:44Z",
            "author_login": "andersk"
          },
          {
            "sha": "235ead6247b9d632c94c0e95d1e1b50bf468b1d5",
            "date": "2025-01-23T21:04:15Z",
            "author_login": "andersk"
          },
          {
            "sha": "0ba41328fdbfdf52a0ab7534a448c3b7b81c74a9",
            "date": "2025-01-23T20:47:15Z",
            "author_login": "andersk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-436",
    "description": "Zulip is an open-source team collaboration tool. In versions of zulip prior to commit `2f6c5a8` but after commit `04cf68b` users could upload files with arbitrary `Content-Type` which would be served from the Zulip hostname with `Content-Disposition: inline` and no `Content-Security-Policy` header, allowing them to trick other users into executing arbitrary Javascript in the context of the Zulip application.  Among other things, this enables session theft. Only deployments which use the S3 storage (not the local-disk storage) are affected, and only deployments which deployed commit 04cf68b45ebb5c03247a0d6453e35ffc175d55da, which has only been in `main`, not any numbered release. Users affected should upgrade from main again to deploy this fix. Switching from S3 storage to the local-disk storage would nominally mitigate this, but is likely more involved than upgrading to the latest `main` which addresses the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-02-07T19:15:09.303",
    "last_modified": "2024-11-21T07:45:19.343",
    "fix_date": "2022-11-22T19:41:35Z"
  },
  "references": [
    {
      "url": "https://github.com/zulip/zulip/commit/04cf68b45ebb5c03247a0d6453e35ffc175d55da",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/commit/2f6c5a883e106aa82a570d3d1f243993284b70f3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/security/advisories/GHSA-wm83-3764-5wqh",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://zulip.readthedocs.io/en/latest/production/upgrade-or-modify.html#upgrading-from-a-git-repository",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/commit/04cf68b45ebb5c03247a0d6453e35ffc175d55da",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/commit/2f6c5a883e106aa82a570d3d1f243993284b70f3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/security/advisories/GHSA-wm83-3764-5wqh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://zulip.readthedocs.io/en/latest/production/upgrade-or-modify.html#upgrading-from-a-git-repository",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:03.999067",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "zulip",
    "owner": "zulip",
    "created_at": "2015-09-25T16:37:25Z",
    "updated_at": "2025-01-26T01:40:47Z",
    "pushed_at": "2025-01-25T19:41:25Z",
    "size": 497093,
    "stars": 22067,
    "forks": 8164,
    "open_issues": 2505,
    "watchers": 22067,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.4.x",
      "1.5.x",
      "1.8.x",
      "1.9.x",
      "2.0.x",
      "2.1.x",
      "3.x",
      "3.1-with-bmemcached",
      "4.x",
      "4.0-rc1-branch",
      "5.x",
      "5.x-user-sharding",
      "5.0-rc1-branch",
      "5.0-rc2-branch",
      "6.x",
      "6.0-beta1-branch",
      "6.0-rc1-branch",
      "7.x",
      "7.0-beta1-branch",
      "7.0-beta2-branch",
      "8.x",
      "9.x",
      "buddy-list-prep",
      "chat.zulip.org",
      "dockertest",
      "main",
      "s3-compatible-uploads",
      "zulip-cloud-current"
    ],
    "languages": {
      "Python": 14257600,
      "TypeScript": 4079970,
      "JavaScript": 2288841,
      "HTML": 956986,
      "CSS": 945407,
      "Handlebars": 602813,
      "Shell": 161466,
      "Puppet": 137651,
      "Perl": 10353,
      "Dockerfile": 4219,
      "Ruby": 3794,
      "Emacs Lisp": 157
    },
    "commit_activity": {
      "total_commits_last_year": 6333,
      "avg_commits_per_week": 121.78846153846153,
      "days_active_last_year": 354
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:42:35.024113"
  }
}