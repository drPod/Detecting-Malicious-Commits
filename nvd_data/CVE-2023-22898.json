{
  "cve_id": "CVE-2023-22898",
  "github_data": {
    "repository": "pandora-analysis/pandora",
    "fix_commit": "1dc06327fdc07c56eae653e497dd137ec70d8265",
    "related_commits": [
      "1dc06327fdc07c56eae653e497dd137ec70d8265",
      "1dc06327fdc07c56eae653e497dd137ec70d8265"
    ],
    "patch_url": "https://github.com/pandora-analysis/pandora/commit/1dc06327fdc07c56eae653e497dd137ec70d8265.patch",
    "fix_commit_details": {
      "sha": "1dc06327fdc07c56eae653e497dd137ec70d8265",
      "commit_date": "2023-01-04T12:51:03Z",
      "author": {
        "login": "Rafiot",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Stop extractor on zip bomb (check total amount of extracted files and recursivity)",
        "length": 87,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 46,
        "additions": 37,
        "deletions": 9
      },
      "files": [
        {
          "filename": "pandora/workers/extractor.py",
          "status": "modified",
          "additions": 35,
          "deletions": 9,
          "patch": "@@ -501,6 +501,29 @@ def analyse(self, task: Task, report: Report, manual_trigger: bool=False):\n             report.status = Status.NOTAPPLICABLE\n             return\n \n+        # Check if we reach the max recursivity (archive in archive in archive...)\n+        _curtask = task\n+        _cur_recurse = self.max_recurse\n+        _cur_max_files_in_recurse = self.max_files_in_recursive_archive\n+        while _cur_recurse > 0 and _cur_max_files_in_recurse > 0:\n+            if not _curtask.parent:\n+                break\n+            _curtask = _curtask.parent\n+            _cur_recurse -= 1\n+            _cur_max_files_in_recurse -= len(_curtask.extracted)\n+\n+        if _cur_recurse <= 0:\n+            self.logger.warning(f'File {task.file.path.name} is too deep in the recursion chain (>{self.max_recurse}).')\n+            report.status = Status.ERROR if self.max_is_error else Status.ALERT\n+            report.add_details('Warning', f'File {task.file.path.name} is too deep in the recursion chain (>{self.max_recurse}). If you want to scan it anyway, click on Actions > Rescan file.')\n+            return\n+\n+        if _cur_max_files_in_recurse <= 0:\n+            self.logger.warning(f'File {task.file.path.name} cannot be extracted, too many files (>{self.max_files_in_recursive_archive}) in the recursive archive.')\n+            report.status = Status.ERROR if self.max_is_error else Status.ALERT\n+            report.add_details('Warning', f'File {task.file.path.name} cannot be extracted, too many files (>{self.max_files_in_recursive_archive}) in the recursive archive. If you want to scan it anyway, click on Actions > Rescan file.')\n+            return\n+\n         if not task.user:\n             raise PandoraException('The task user is missing. Should not happen, but investigate if it does.')\n \n@@ -599,15 +622,18 @@ def analyse(self, task: Task, report: Report, manual_trigger: bool=False):\n             tasks.append(new_task)\n \n         shutil.rmtree(extracted_dir)\n-        # wait for all the tasks to finish\n-        while not all(t.workers_done for t in tasks):\n-            time.sleep(1)\n-\n-        if tasks:\n-            report.status = max(t.status for t in tasks)\n-            if report.status > Status.CLEAN:\n-                report.add_details('Warning', 'There are suspicious files in this archive, click on the \"Extracted\" tab for more.')\n-        elif not report.status == Status.NOTAPPLICABLE:\n+\n+        if not tasks and not report.status == Status.NOTAPPLICABLE:\n             # Nothing was extracted\n             report.status = Status.WARN\n             report.add_details('Warning', 'Looks like the archive is empty (?). This is suspicious.')\n+        elif report.status not in [Status.ERROR, Status.WARN, Status.ALERT, Status.OVERWRITE]:\n+            # wait for all the workers to finish, or have one of them raising an ALERT\n+            while not all(t.workers_done for t in tasks):\n+                for t in tasks:\n+                    # If any of the task is marked as ALERT or OVERWRITE, we can quit.\n+                    if t.workers_done and t.status >= Status.ALERT:\n+                        report.add_details('Warning', 'There are suspicious files in this archive, click on the \"Extracted\" tab for more.')\n+                        break\n+                time.sleep(1)\n+            report.status = max(t.status for t in tasks if t.workers_done)"
        },
        {
          "filename": "pandora/workers/extractor.yml.sample",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -5,6 +5,8 @@ meta:\n \n settings:\n   max_files_in_archive: 15\n+  max_files_in_recursive_archive: 25\n+  max_recurse: 2\n   max_extracted_filesize_in_mb: 100\n   max_is_error: no\n   zip_passwords:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1d38331ff8b015dba06585c4f564ba9d51233c34",
            "date": "2025-01-09T21:42:13Z",
            "author_login": "Rafiot"
          },
          {
            "sha": "5782b1e5bed455ae3ba7abcacee8d65d68db90e2",
            "date": "2025-01-09T20:53:29Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "7f6792679f8da62d08011098e89c96f5dca016a7",
            "date": "2025-01-09T19:37:57Z",
            "author_login": "Rafiot"
          },
          {
            "sha": "793acee3ba3d0029a140fc8e7d53e36c4633c0a8",
            "date": "2025-01-08T10:19:57Z",
            "author_login": "Rafiot"
          },
          {
            "sha": "ca318b1d0445f16b94397386778774e5a080790f",
            "date": "2025-01-07T10:57:02Z",
            "author_login": "Rafiot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-20",
    "description": "workers/extractor.py in Pandora (aka pandora-analysis/pandora) 1.3.0 allows a denial of service when an attacker submits a deeply nested ZIP archive (aka ZIP bomb).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-10T02:15:09.900",
    "last_modified": "2024-11-21T07:45:36.570",
    "fix_date": "2023-01-04T12:51:03Z"
  },
  "references": [
    {
      "url": "https://github.com/pandora-analysis/pandora/commit/1dc06327fdc07c56eae653e497dd137ec70d8265",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pandora-analysis/pandora/commit/1dc06327fdc07c56eae653e497dd137ec70d8265",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.535681",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pandora",
    "owner": "pandora-analysis",
    "created_at": "2021-09-21T08:56:43Z",
    "updated_at": "2025-01-09T21:42:17Z",
    "pushed_at": "2025-01-13T20:11:55Z",
    "size": 5922,
    "stars": 254,
    "forks": 40,
    "open_issues": 54,
    "watchers": 254,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 340561,
      "HTML": 77414,
      "JavaScript": 26221,
      "CSS": 3143,
      "Dockerfile": 1308,
      "Shell": 574
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T14:05:20.766845"
  }
}