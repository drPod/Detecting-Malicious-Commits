{
  "cve_id": "CVE-2023-2339",
  "github_data": {
    "repository": "pimcore/pimcore",
    "fix_commit": "6946f8a5a0a93b516c49f17a5b45044eebd73480",
    "related_commits": [
      "6946f8a5a0a93b516c49f17a5b45044eebd73480",
      "6946f8a5a0a93b516c49f17a5b45044eebd73480"
    ],
    "patch_url": "https://github.com/pimcore/pimcore/commit/6946f8a5a0a93b516c49f17a5b45044eebd73480.patch",
    "fix_commit_details": {
      "sha": "6946f8a5a0a93b516c49f17a5b45044eebd73480",
      "commit_date": "2023-04-21T08:46:57Z",
      "author": {
        "login": "robertSt7",
        "type": "User",
        "stats": {
          "total_commits": 256,
          "average_weekly_commits": 0.5089463220675944,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 82
        }
      },
      "commit_message": {
        "title": "[Security] Stored cross site scripting vulnerability in operator any getter in pimcore grid configuration (#14984)",
        "length": 183,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 52,
        "additions": 38,
        "deletions": 14
      },
      "files": [
        {
          "filename": "bundles/AdminBundle/Controller/Admin/Asset/AssetHelperController.php",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -33,6 +33,7 @@\n use Pimcore\\Model\\GridConfigShare;\n use Pimcore\\Model\\Metadata;\n use Pimcore\\Model\\User;\n+use Pimcore\\Security\\SecurityHelper;\n use Pimcore\\Tool;\n use Pimcore\\Tool\\Storage;\n use Pimcore\\Version;\n@@ -963,9 +964,10 @@ public function getMetadataForColumnConfigAction(Request $request)\n             if (!in_array($uniqueKey, $tmp) && !in_array($item->getName(), $defaultMetadataNames)) {\n                 $tmp[] = $uniqueKey;\n                 $item->expand();\n+                $name = SecurityHelper::convertHtmlSpecialChars($item->getName());\n                 $metadataItems[] = [\n-                    'title' => $item->getName(),\n-                    'name' => $item->getName(),\n+                    'title' => $name,\n+                    'name' => $name,\n                     'subtype' => $item->getTargetSubtype(),\n                     'datatype' => 'data',\n                     'fieldtype' => $item->getType(),"
        },
        {
          "filename": "bundles/AdminBundle/Controller/Admin/DataObject/DataObjectHelperController.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -32,6 +32,7 @@\n use Pimcore\\Model\\GridConfigFavourite;\n use Pimcore\\Model\\GridConfigShare;\n use Pimcore\\Model\\User;\n+use Pimcore\\Security\\SecurityHelper;\n use Pimcore\\Tool;\n use Pimcore\\Tool\\Storage;\n use Pimcore\\Version;\n@@ -355,6 +356,13 @@ public function doGetGridColumnConfig(Request $request, Config $config, $isDelet\n                 $gridConfigDescription = $savedGridConfig->getDescription();\n                 $sharedGlobally = $savedGridConfig->isShareGlobally();\n                 $setAsFavourite = $savedGridConfig->isSetAsFavourite();\n+\n+                foreach($gridConfig['columns'] as &$column) {\n+                    if (array_key_exists('isOperator', $column) && $column['isOperator']) {\n+                        $colAttributes = &$column['fieldConfig']['attributes'];\n+                        SecurityHelper::convertHtmlSpecialCharsArrayKeys($colAttributes, ['label', 'attribute', 'param1']);\n+                    }\n+                }\n             }\n         }\n "
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/object/gridcolumn/operator/AnyGetter.js",
          "status": "modified",
          "additions": 8,
          "deletions": 5,
          "patch": "@@ -83,22 +83,25 @@ pimcore.object.gridcolumn.operator.anygetter = Class.create(pimcore.object.gridc\n                 fieldLabel: t('label'),\n                 length: 255,\n                 width: 200,\n-                value: this.node.data.configAttributes.label\n+                value: this.node.data.configAttributes.label,\n+                listeners: {'change': pimcore.helpers.htmlEncodeTextField }\n             });\n \n             this.attributeField = new Ext.form.TextField({\n                 fieldLabel: t('attribute'),\n                 length: 255,\n                 width: 200,\n-                value: this.node.data.configAttributes.attribute\n+                value: this.node.data.configAttributes.attribute,\n+                listeners: {'change': pimcore.helpers.htmlEncodeTextField }\n             });\n \n             this.param1Field = new Ext.form.TextField({\n                 fieldLabel: t('parameter'),\n                 length: 255,\n                 width: 200,\n-                value: this.node.data.configAttributes.param1\n-            });\n+                value: this.node.data.configAttributes.param1,\n+                listeners: {'change': pimcore.helpers.htmlEncodeTextField }\n+        });\n \n             this.returnLastResultField = new Ext.form.Checkbox({\n                 fieldLabel: t('return_last_result'),\n@@ -183,7 +186,7 @@ pimcore.object.gridcolumn.operator.anygetter = Class.create(pimcore.object.gridc\n                 if (configAttributes.param1) {\n                     attr += \" \" + configAttributes.param1;\n                 }\n-                nodeLabel += '<span class=\"pimcore_gridnode_hint\"> (' + attr + ')</span>';\n+                nodeLabel += '<span class=\"pimcore_gridnode_hint\"> (' + Ext.util.Format.htmlEncode(attr) + ')</span>';\n             }\n \n             return nodeLabel;"
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/settings/metadata/predefined.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -138,7 +138,7 @@ pimcore.settings.metadata.predefined = Class.create({\n                 sortable: true\n             },\n             {text: t(\"name\"), width: 200, sortable: true, dataIndex: 'name',\n-                getEditor: function() { return new Ext.form.TextField({}); }\n+                getEditor: function() { return new Ext.form.TextField({ listeners: {'change': pimcore.helpers.htmlEncodeTextField } }); }\n             },\n             {text: t(\"group\"), width: 200, sortable: true, dataIndex: 'group',\n                 getEditor: function() { return new Ext.form.TextField({}); }"
        },
        {
          "filename": "lib/DataObject/GridColumnConfig/Operator/AbstractOperator.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -16,6 +16,7 @@\n namespace Pimcore\\DataObject\\GridColumnConfig\\Operator;\n \n use Pimcore\\DataObject\\GridColumnConfig\\ConfigElementInterface;\n+use Pimcore\\Security\\SecurityHelper;\n use Pimcore\\Tool;\n \n abstract class AbstractOperator implements OperatorInterface\n@@ -41,7 +42,7 @@ abstract class AbstractOperator implements OperatorInterface\n      */\n     public function __construct(\\stdClass $config, array $context = [])\n     {\n-        $this->label = $config->label;\n+        $this->label = SecurityHelper::convertHtmlSpecialChars($config->label);\n         $this->childs = $config->childs;\n         $this->context = $context;\n     }\n@@ -91,7 +92,7 @@ public function getLabel()\n      */\n     public function setLabel($label)\n     {\n-        $this->label = $label;\n+        $this->label = SecurityHelper::convertHtmlSpecialChars($label);\n     }\n \n     /**"
        },
        {
          "filename": "lib/DataObject/GridColumnConfig/Operator/AnyGetter.php",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -16,6 +16,7 @@\n namespace Pimcore\\DataObject\\GridColumnConfig\\Operator;\n \n use Pimcore\\Model\\AbstractModel;\n+use Pimcore\\Security\\SecurityHelper;\n use Pimcore\\Tool\\Admin;\n \n /**\n@@ -64,8 +65,8 @@ public function __construct(\\stdClass $config, $context = null)\n \n         parent::__construct($config, $context);\n \n-        $this->attribute = $config->attribute ?? '';\n-        $this->param1 = $config->param1 ?? '';\n+        $this->attribute = SecurityHelper::convertHtmlSpecialChars($config->attribute ?? '');\n+        $this->param1 = SecurityHelper::convertHtmlSpecialChars($config->param1 ?? '');\n         $this->isArrayType = $config->isArrayType ?? false;\n \n         $this->forwardAttribute = $config->forwardAttribute ?? '';\n@@ -182,7 +183,7 @@ public function getAttribute()\n      */\n     public function setAttribute($attribute)\n     {\n-        $this->attribute = $attribute;\n+        $this->attribute = SecurityHelper::convertHtmlSpecialChars($attribute);\n     }\n \n     /**\n@@ -198,7 +199,7 @@ public function getParam1()\n      */\n     public function setParam1($param1)\n     {\n-        $this->param1 = $param1;\n+        $this->param1 = SecurityHelper::convertHtmlSpecialChars($param1);\n     }\n \n     /**"
        },
        {
          "filename": "lib/Security/SecurityHelper.php",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -25,4 +25,13 @@ public static function convertHtmlSpecialChars(?string $text): ?string\n \n         return null;\n     }\n+\n+    public static function convertHtmlSpecialCharsArrayKeys(array &$array, array $keys): void\n+    {\n+        foreach ($keys as $key) {\n+            if (array_key_exists($key, $array)) {\n+                $array[$key] = self::convertHtmlSpecialChars($array[$key]);\n+            }\n+        }\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a3c7544d81bc772dc53f7ea0e99c6eac37c59114",
            "date": "2025-01-14T13:54:55Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "081e73f14983613ed43e6ea9e40450063392b289",
            "date": "2025-01-14T13:53:00Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "bf1081a2c9a7de74ca965aa802ea07ac4e022b28",
            "date": "2025-01-14T13:52:39Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "7a232e673e963325610264dc760d8d0dbdd7a0d1",
            "date": "2025-01-14T13:52:17Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "cf380cd040bdbb134e62dd1fa9cb3954def8a595",
            "date": "2025-01-14T13:50:40Z",
            "author_login": "herbertroth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.21.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-27T12:15:09.300",
    "last_modified": "2024-11-21T07:58:24.943",
    "fix_date": "2023-04-21T08:46:57Z"
  },
  "references": [
    {
      "url": "https://github.com/pimcore/pimcore/commit/6946f8a5a0a93b516c49f17a5b45044eebd73480",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/bb1537a5-fe7b-4c77-a582-10a82435fbc2",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pimcore/pimcore/commit/6946f8a5a0a93b516c49f17a5b45044eebd73480",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/bb1537a5-fe7b-4c77-a582-10a82435fbc2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.845787",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pimcore",
    "owner": "pimcore",
    "created_at": "2011-11-01T09:16:14Z",
    "updated_at": "2025-01-14T09:15:55Z",
    "pushed_at": "2025-01-13T14:41:25Z",
    "size": 524212,
    "stars": 3455,
    "forks": 1448,
    "open_issues": 480,
    "watchers": 3455,
    "has_security_policy": false,
    "default_branch": "11.x",
    "protected_branches": [
      "11.x",
      "11.5"
    ],
    "languages": {
      "PHP": 6722485,
      "JavaScript": 330727,
      "Twig": 9213,
      "CSS": 2342,
      "HTML": 687,
      "Shell": 538
    },
    "commit_activity": {
      "total_commits_last_year": 619,
      "avg_commits_per_week": 11.903846153846153,
      "days_active_last_year": 182
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:01:17.566039"
  }
}