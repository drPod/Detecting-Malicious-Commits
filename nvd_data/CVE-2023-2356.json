{
  "cve_id": "CVE-2023-2356",
  "github_data": {
    "repository": "mlflow/mlflow",
    "fix_commit": "f73147496e05c09a8b83d95fb4f1bf86696c6342",
    "related_commits": [
      "f73147496e05c09a8b83d95fb4f1bf86696c6342",
      "f73147496e05c09a8b83d95fb4f1bf86696c6342"
    ],
    "patch_url": "https://github.com/mlflow/mlflow/commit/f73147496e05c09a8b83d95fb4f1bf86696c6342.patch",
    "fix_commit_details": {
      "sha": "f73147496e05c09a8b83d95fb4f1bf86696c6342",
      "commit_date": "2023-04-20T13:51:51Z",
      "author": {
        "login": "BenWilson2",
        "type": "User",
        "stats": {
          "total_commits": 403,
          "average_weekly_commits": 1.1647398843930636,
          "total_additions": 196698,
          "total_deletions": 65622,
          "weeks_active": 121
        }
      },
      "commit_message": {
        "title": "Disable ability to provide relative paths in sources (#8281)",
        "length": 346,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 130,
        "additions": 129,
        "deletions": 1
      },
      "files": [
        {
          "filename": "mlflow/server/handlers.py",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -1323,6 +1323,36 @@ def _delete_registered_model_tag():\n     return _wrap_response(DeleteRegisteredModelTag.Response())\n \n \n+def _validate_non_local_source_contains_relative_paths(source: str):\n+    \"\"\"\n+    Validation check to ensure that sources that are provided that conform to the schemes:\n+    http, https, or mlflow-artifacts do not contain relative path designations that are intended\n+    to access local file system paths on the tracking server.\n+\n+    Example paths that this validation function is intended to find and raise an Exception if\n+    passed:\n+    \"mlflow-artifacts://host:port/../../../../\"\n+    \"http://host:port/api/2.0/mlflow-artifacts/artifacts/../../../../\"\n+    \"https://host:port/api/2.0/mlflow-artifacts/artifacts/../../../../\"\n+    \"/models/artifacts/../../../\"\n+    \"s3:/my_bucket/models/path/../../other/path\"\n+    \"file://path/to/../../../../some/where/you/should/not/be\"\n+    \"\"\"\n+    source_path = urllib.parse.urlparse(source).path\n+    resolved_source = pathlib.Path(source_path).resolve().as_posix()\n+    # NB: drive split is specifically for Windows since WindowsPath.resolve() will append the\n+    # drive path of the pwd to a given path. We don't care about the drive here, though.\n+    _, resolved_path = os.path.splitdrive(resolved_source)\n+\n+    if resolved_path != source_path:\n+        raise MlflowException(\n+            f\"Invalid model version source: '{source}'. If supplying a source as an http, https, \"\n+            \"local file path, ftp, objectstore, or mlflow-artifacts uri, an absolute path must be \"\n+            \"provided without relative path references present. Please provide an absolute path.\",\n+            INVALID_PARAMETER_VALUE,\n+        )\n+\n+\n def _validate_source(source: str, run_id: str) -> None:\n     if is_local_uri(source):\n         if run_id:\n@@ -1352,6 +1382,10 @@ def _validate_source(source: str, run_id: str) -> None:\n             INVALID_PARAMETER_VALUE,\n         )\n \n+    # Checks if relative paths are present in the source (a security threat). If any are present,\n+    # raises an Exception.\n+    _validate_non_local_source_contains_relative_paths(source)\n+\n \n @catch_mlflow_exception\n @_disable_if_artifacts_only"
        },
        {
          "filename": "tests/tracking/test_rest_tracking.py",
          "status": "modified",
          "additions": 95,
          "deletions": 1,
          "patch": "@@ -1045,7 +1045,7 @@ def get(self, key, default=None):\n \n \n def test_create_model_version_with_path_source(mlflow_client):\n-    name = \"mode\"\n+    name = \"model\"\n     mlflow_client.create_registered_model(name)\n     exp_id = mlflow_client.create_experiment(\"test\")\n     run = mlflow_client.create_run(experiment_id=exp_id)\n@@ -1084,6 +1084,100 @@ def test_create_model_version_with_path_source(mlflow_client):\n     assert \"To use a local path as a model version\" in response.json()[\"message\"]\n \n \n+def test_create_model_version_with_non_local_source(mlflow_client, monkeypatch):\n+    name = \"model\"\n+    mlflow_client.create_registered_model(name)\n+    exp_id = mlflow_client.create_experiment(\"test\")\n+    run = mlflow_client.create_run(experiment_id=exp_id)\n+\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": run.info.artifact_uri[len(\"file://\") :],\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+    # Test that remote uri's supplied as a source with absolute paths work fine\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": \"mlflow-artifacts:/models\",\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": \"mlflow-artifacts://host:9000/models\",\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 200\n+\n+    # Test that invalid remote uri's cannot be created\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": \"mlflow-artifacts://host:9000/models/../../../\",\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 400\n+    assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]\n+\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": \"http://host:9000/models/../../../\",\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 400\n+    assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]\n+\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": \"https://host/api/2.0/mlflow-artifacts/artifacts/../../../\",\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 400\n+    assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]\n+\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": \"s3a://my_bucket/api/2.0/mlflow-artifacts/artifacts/../../../\",\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 400\n+    assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]\n+\n+    response = requests.post(\n+        f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",\n+        json={\n+            \"name\": name,\n+            \"source\": \"ftp://host:8888/api/2.0/mlflow-artifacts/artifacts/../../../\",\n+            \"run_id\": run.info.run_id,\n+        },\n+    )\n+    assert response.status_code == 400\n+    assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]\n+\n+\n def test_create_model_version_with_file_uri(mlflow_client):\n     name = \"test\"\n     mlflow_client.create_registered_model(name)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ecbdd766af367b2f6a03a15eba937d13ea4f7c43",
            "date": "2025-01-14T11:54:46Z",
            "author_login": "dsuhinin"
          },
          {
            "sha": "49d28d67d9d25211d0b684ec9ad9c54670b3fee1",
            "date": "2025-01-14T10:10:09Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8778eedb11fbae7339c495634d65592a473118f8",
            "date": "2025-01-14T10:09:27Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8436d0b9db52152536930dee84bb5d1654964731",
            "date": "2025-01-14T09:29:15Z",
            "author_login": "B-Step62"
          },
          {
            "sha": "1ff5a0d5ba5e1f112513fb2edb0372387e5c407e",
            "date": "2025-01-14T08:32:07Z",
            "author_login": "TomeHirata"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-23",
    "description": "Relative Path Traversal in GitHub repository mlflow/mlflow prior to 2.3.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-28T00:15:08.890",
    "last_modified": "2024-11-21T07:58:27.000",
    "fix_date": "2023-04-20T13:51:51Z"
  },
  "references": [
    {
      "url": "https://github.com/mlflow/mlflow/commit/f73147496e05c09a8b83d95fb4f1bf86696c6342",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/7b5d130d-38eb-4133-8c7d-0dfc9a9d9896",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mlflow/mlflow/commit/f73147496e05c09a8b83d95fb4f1bf86696c6342",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/7b5d130d-38eb-4133-8c7d-0dfc9a9d9896",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.848855",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mlflow",
    "owner": "mlflow",
    "created_at": "2018-06-05T16:05:58Z",
    "updated_at": "2025-01-14T14:06:06Z",
    "pushed_at": "2025-01-14T15:26:16Z",
    "size": 703840,
    "stars": 19235,
    "forks": 4317,
    "open_issues": 1689,
    "watchers": 19235,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "branch-0.5",
      "branch-0.7",
      "branch-0.8",
      "branch-0.9",
      "branch-0.9.1"
    ],
    "languages": {
      "Python": 12840682,
      "JavaScript": 9998107,
      "TypeScript": 3983905,
      "Java": 290984,
      "R": 211552,
      "Scala": 42315,
      "Shell": 28740,
      "HTML": 23632,
      "CSS": 18115,
      "Dockerfile": 1312,
      "Mako": 1004,
      "TSQL": 211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:33:00.445625"
  }
}