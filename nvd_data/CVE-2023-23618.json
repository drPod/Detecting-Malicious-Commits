{
  "cve_id": "CVE-2023-23618",
  "github_data": {
    "repository": "git-for-windows/git",
    "fix_commit": "49a8ec9dac3cec6602f05fed1b3f80a549c8c05c",
    "related_commits": [
      "49a8ec9dac3cec6602f05fed1b3f80a549c8c05c",
      "49a8ec9dac3cec6602f05fed1b3f80a549c8c05c"
    ],
    "patch_url": "https://github.com/git-for-windows/git/commit/49a8ec9dac3cec6602f05fed1b3f80a549c8c05c.patch",
    "fix_commit_details": {
      "sha": "49a8ec9dac3cec6602f05fed1b3f80a549c8c05c",
      "commit_date": "2023-02-14T18:19:10Z",
      "author": {
        "login": "derrickstolee",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wxwv-49qw-35pm",
        "length": 80,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 135,
        "additions": 135,
        "deletions": 0
      },
      "files": [
        {
          "filename": "gitk-git/gitk",
          "status": "modified",
          "additions": 135,
          "deletions": 0,
          "patch": "@@ -9,6 +9,141 @@ exec wish \"$0\" -- \"$@\"\n \n package require Tk\n \n+######################################################################\n+##\n+## Enabling platform-specific code paths\n+\n+proc is_MacOSX {} {\n+\tif {[tk windowingsystem] eq {aqua}} {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+proc is_Windows {} {\n+\tif {$::tcl_platform(platform) eq {windows}} {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+set _iscygwin {}\n+proc is_Cygwin {} {\n+\tglobal _iscygwin\n+\tif {$_iscygwin eq {}} {\n+\t\tif {[string match \"CYGWIN_*\" $::tcl_platform(os)]} {\n+\t\t\tset _iscygwin 1\n+\t\t} else {\n+\t\t\tset _iscygwin 0\n+\t\t}\n+\t}\n+\treturn $_iscygwin\n+}\n+\n+######################################################################\n+##\n+## PATH lookup\n+\n+set _search_path {}\n+proc _which {what args} {\n+\tglobal env _search_exe _search_path\n+\n+\tif {$_search_path eq {}} {\n+\t\tif {[is_Cygwin] && [regexp {^(/|\\.:)} $env(PATH)]} {\n+\t\t\tset _search_path [split [exec cygpath \\\n+\t\t\t\t--windows \\\n+\t\t\t\t--path \\\n+\t\t\t\t--absolute \\\n+\t\t\t\t$env(PATH)] {;}]\n+\t\t\tset _search_exe .exe\n+\t\t} elseif {[is_Windows]} {\n+\t\t\tset gitguidir [file dirname [info script]]\n+\t\t\tregsub -all \";\" $gitguidir \"\\\\;\" gitguidir\n+\t\t\tset env(PATH) \"$gitguidir;$env(PATH)\"\n+\t\t\tset _search_path [split $env(PATH) {;}]\n+\t\t\t# Skip empty `PATH` elements\n+\t\t\tset _search_path [lsearch -all -inline -not -exact \\\n+\t\t\t\t$_search_path \"\"]\n+\t\t\tset _search_exe .exe\n+\t\t} else {\n+\t\t\tset _search_path [split $env(PATH) :]\n+\t\t\tset _search_exe {}\n+\t\t}\n+\t}\n+\n+\tif {[is_Windows] && [lsearch -exact $args -script] >= 0} {\n+\t\tset suffix {}\n+\t} else {\n+\t\tset suffix $_search_exe\n+\t}\n+\n+\tforeach p $_search_path {\n+\t\tset p [file join $p $what$suffix]\n+\t\tif {[file exists $p]} {\n+\t\t\treturn [file normalize $p]\n+\t\t}\n+\t}\n+\treturn {}\n+}\n+\n+proc sanitize_command_line {command_line from_index} {\n+\tset i $from_index\n+\twhile {$i < [llength $command_line]} {\n+\t\tset cmd [lindex $command_line $i]\n+\t\tif {[file pathtype $cmd] ne \"absolute\"} {\n+\t\t\tset fullpath [_which $cmd]\n+\t\t\tif {$fullpath eq \"\"} {\n+\t\t\t\tthrow {NOT-FOUND} \"$cmd not found in PATH\"\n+\t\t\t}\n+\t\t\tlset command_line $i $fullpath\n+\t\t}\n+\n+\t\t# handle piped commands, e.g. `exec A | B`\n+\t\tfor {incr i} {$i < [llength $command_line]} {incr i} {\n+\t\t\tif {[lindex $command_line $i] eq \"|\"} {\n+\t\t\t\tincr i\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn $command_line\n+}\n+\n+# Override `exec` to avoid unsafe PATH lookup\n+\n+rename exec real_exec\n+\n+proc exec {args} {\n+\t# skip options\n+\tfor {set i 0} {$i < [llength $args]} {incr i} {\n+\t\tset arg [lindex $args $i]\n+\t\tif {$arg eq \"--\"} {\n+\t\t\tincr i\n+\t\t\tbreak\n+\t\t}\n+\t\tif {[string range $arg 0 0] ne \"-\"} {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tset args [sanitize_command_line $args $i]\n+\tuplevel 1 real_exec $args\n+}\n+\n+# Override `open` to avoid unsafe PATH lookup\n+\n+rename open real_open\n+\n+proc open {args} {\n+\tset arg0 [lindex $args 0]\n+\tif {[string range $arg0 0 0] eq \"|\"} {\n+\t\tset command_line [string trim [string range $arg0 1 end]]\n+\t\tlset args 0 \"| [sanitize_command_line $command_line 0]\"\n+\t}\n+\tuplevel 1 real_open $args\n+}\n+\n+# End of safe PATH lookup stuff\n+\n proc hasworktree {} {\n     return [expr {[exec git rev-parse --is-bare-repository] == \"false\" &&\n                   [exec git rev-parse --is-inside-git-dir] == \"false\"}]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "049f0cf1a5d000f1e24f0e80b79b0d043a8b83b2",
            "date": "2025-01-09T11:10:39Z",
            "author_login": "dscho"
          },
          {
            "sha": "9b81fae3f9084efa6028b6b45f11b4e1570422ec",
            "date": "2025-01-09T06:21:30Z",
            "author_login": "pks-t"
          },
          {
            "sha": "783fac4a953e6af08710a2ca08597bf224e064cc",
            "date": "2025-01-01T21:00:05Z",
            "author_login": "dscho"
          },
          {
            "sha": "19a0d610505c683dd44798430d66296b78913ae5",
            "date": "2018-06-07T06:45:01Z",
            "author_login": "dscho"
          },
          {
            "sha": "ef52c17b50f48a20b9765be66033953d55153269",
            "date": "2024-12-22T16:24:24Z",
            "author_login": "rimrul"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-426",
    "description": "Git for Windows is the Windows port of the revision control system Git. Prior to Git for Windows version 2.39.2, when `gitk` is run on Windows, it potentially runs executables from the current directory inadvertently, which can be exploited with some social engineering to trick users into running untrusted code. A patch is available in version 2.39.2. As a workaround, avoid using `gitk` (or Git GUI's \"Visualize History\" functionality) in clones of untrusted repositories.\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-14T21:15:13.170",
    "last_modified": "2024-11-21T07:46:32.707",
    "fix_date": "2023-02-14T18:19:10Z"
  },
  "references": [
    {
      "url": "https://github.com/git-for-windows/git/commit/49a8ec9dac3cec6602f05fed1b3f80a549c8c05c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/git-for-windows/git/releases/tag/v2.39.2.windows.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/git-for-windows/git/security/advisories/GHSA-wxwv-49qw-35pm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://wiki.tcl-lang.org/page/exec",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/git-for-windows/git/commit/49a8ec9dac3cec6602f05fed1b3f80a549c8c05c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/git-for-windows/git/releases/tag/v2.39.2.windows.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/git-for-windows/git/security/advisories/GHSA-wxwv-49qw-35pm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://wiki.tcl-lang.org/page/exec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.058638",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "git",
    "owner": "git-for-windows",
    "created_at": "2014-08-22T07:07:36Z",
    "updated_at": "2025-01-14T13:19:02Z",
    "pushed_at": "2025-01-09T17:42:38Z",
    "size": 325513,
    "stars": 8482,
    "forks": 2588,
    "open_issues": 206,
    "watchers": 8482,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C": 11981006,
      "Shell": 8634745,
      "Perl": 1170538,
      "Tcl": 857873,
      "Python": 183463,
      "Makefile": 170990,
      "C++": 116083,
      "Meson": 106489,
      "JavaScript": 49713,
      "CMake": 47919,
      "M4": 38265,
      "Roff": 26859,
      "SmPL": 15676,
      "Go": 15064,
      "Batchfile": 11440,
      "CSS": 10664,
      "Emacs Lisp": 660,
      "PowerShell": 478,
      "ReScript": 92
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:50:24.765409"
  }
}