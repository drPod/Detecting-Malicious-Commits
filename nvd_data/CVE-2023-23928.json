{
  "cve_id": "CVE-2023-23928",
  "github_data": {
    "repository": "ulrikstrid/reason-jose",
    "fix_commit": "36cd724db3cbec121757624da49072386bd869e5",
    "related_commits": [
      "36cd724db3cbec121757624da49072386bd869e5",
      "36cd724db3cbec121757624da49072386bd869e5"
    ],
    "patch_url": "https://github.com/ulrikstrid/reason-jose/commit/36cd724db3cbec121757624da49072386bd869e5.patch",
    "fix_commit_details": {
      "sha": "36cd724db3cbec121757624da49072386bd869e5",
      "commit_date": "2023-01-31T15:46:55Z",
      "author": {
        "login": "ulrikstrid",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-7jj9-6qwv-wpm7",
        "length": 201,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 40,
        "additions": 27,
        "deletions": 13
      },
      "files": [
        {
          "filename": "jose/Jws.ml",
          "status": "modified",
          "additions": 16,
          "deletions": 13,
          "patch": "@@ -35,8 +35,18 @@ let verify_jwk (type a) ~(jwk : a Jwk.t) ~input_str str =\n       | None -> Error `Invalid_signature\n       | Some message -> Ok message)\n   | Jwk.Oct jwk ->\n-      Mirage_crypto.Hash.SHA256.hmac ~key:(Cstruct.of_string jwk.key) str\n-      |> U_Result.return\n+      Jwk.oct_to_sign_key jwk\n+      |> U_Result.flat_map (fun key ->\n+             let computed_signature =\n+               Mirage_crypto.Hash.SHA256.hmac ~key (Cstruct.of_string input_str)\n+             in\n+             (* From RFC7518\u00a73.2:\n+              *   The comparison of the computed HMAC value to the JWS Signature\n+              *   value MUST be done in a constant-time manner to thwart timing\n+              *   attacks. *)\n+             if Eqaf_cstruct.equal str computed_signature then\n+               Ok computed_signature\n+             else Error `Invalid_signature)\n   | Jwk.Es256_pub pub_jwk ->\n       let r, s = Cstruct.split str 32 in\n       let message =\n@@ -78,15 +88,6 @@ let verify_internal (type a) ~(jwk : a Jwk.t) t =\n   U_Base64.url_decode t.signature\n   |> U_Result.map Cstruct.of_string\n   |> U_Result.flat_map (verify_jwk ~jwk ~input_str)\n-  |> U_Result.map (fun message ->\n-         let token_hash =\n-           input_str |> Cstruct.of_string |> Mirage_crypto.Hash.SHA256.digest\n-         in\n-         (* From RFC7518\u00a73.2:\n-          *   The comparison of the computed HMAC value to the JWS Signature\n-          *   value MUST be done in a constant-time manner to thwart timing\n-          *   attacks. *)\n-         Eqaf_cstruct.equal message token_hash)\n \n let validate (type a) ~(jwk : a Jwk.t) t =\n   let header = t.header in\n@@ -97,8 +98,10 @@ let validate (type a) ~(jwk : a Jwk.t) t =\n   | `ES512 -> Ok header.alg\n   | `Unsupported _ | `RSA_OAEP | `RSA1_5 | `None ->\n       Error (`Msg \"alg not supported for signing\"))\n-  |> U_Result.flat_map (fun _ -> verify_internal ~jwk t)\n-  |> U_Result.map (fun _ -> t)\n+  |> U_Result.flat_map (fun _alg ->\n+         match verify_internal ~jwk t with\n+         | Ok _sig -> Ok t\n+         | Error e -> Error e)\n \n (* Assumes a well formed header. *)\n let sign ?header ~payload (jwk : Jwk.priv Jwk.t) ="
        },
        {
          "filename": "test/RFC7520.ml",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -223,6 +223,17 @@ let jws_oct_tests =\n           in\n           check_result_string \"correct jws string\" (Ok oct_jws)\n             (CCResult.map Jose.Jws.to_string jws));\n+      Alcotest.test_case \"Cannot verify invalid signature\" `Quick (fun () ->\n+          let jwk =\n+            Jose.Jwk.of_pub_json_string oct_sig_json |> CCResult.get_exn\n+          in\n+          let jws =\n+            Jose.Jws.of_string\n+              {|eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9.SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4.NO_GOOD_SIGNATURE|}\n+          in\n+          let validated_jws = CCResult.flat_map (Jose.Jws.validate ~jwk) jws in\n+          check_result_string \"validation fails\" (Error `Invalid_signature)\n+            (CCResult.map (fun jws -> Jose.Jws.(jws.signature)) validated_jws));\n     ] )\n \n let rsa_priv_enc_json_5_1 ="
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4dbd4fe40d7eddd98dba55b0219a03e0a4377183",
            "date": "2024-12-19T07:57:18Z",
            "author_login": "ulrikstrid"
          },
          {
            "sha": "202920144dd6f649fc80281981c2bb5cc7cf183a",
            "date": "2024-12-17T08:04:24Z",
            "author_login": "ulrikstrid"
          },
          {
            "sha": "ddb012df207396388bf0514a659d751a5fea9e62",
            "date": "2024-12-16T14:05:46Z",
            "author_login": "ulrikstrid"
          },
          {
            "sha": "b116246d59d8e354e0f0e5ece31355f7aae4a83f",
            "date": "2024-12-16T13:58:39Z",
            "author_login": "ulrikstrid"
          },
          {
            "sha": "6a1b9ad8fe82d8965b5c39e44136db40ee445614",
            "date": "2024-12-16T13:58:03Z",
            "author_login": "ulrikstrid"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:H/A:N",
    "cwe_id": "CWE-347",
    "description": "reason-jose is a JOSE implementation in ReasonML and OCaml.`Jose.Jws.validate` does not check HS256 signatures. This allows tampering of JWS header and payload data if the service does not perform additional checks. Such tampering could expose applications using reason-jose to authorization bypass. Applications relying on JWS claims assertion to enforce security boundaries may be vulnerable to privilege escalation. This issue has been patched in version 0.8.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-02-01T01:15:09.023",
    "last_modified": "2024-11-21T07:47:07.163",
    "fix_date": "2023-01-31T15:46:55Z"
  },
  "references": [
    {
      "url": "https://github.com/ulrikstrid/reason-jose/commit/36cd724db3cbec121757624da49072386bd869e5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ulrikstrid/reason-jose/releases/tag/v0.8.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ulrikstrid/reason-jose/security/advisories/GHSA-7jj9-6qwv-wpm7",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ulrikstrid/reason-jose/commit/36cd724db3cbec121757624da49072386bd869e5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ulrikstrid/reason-jose/releases/tag/v0.8.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ulrikstrid/reason-jose/security/advisories/GHSA-7jj9-6qwv-wpm7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:03.960880",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ocaml-jose",
    "owner": "ulrikstrid",
    "created_at": "2020-01-01T20:59:32Z",
    "updated_at": "2024-12-19T07:57:26Z",
    "pushed_at": "2024-12-19T07:58:39Z",
    "size": 10995,
    "stars": 53,
    "forks": 4,
    "open_issues": 7,
    "watchers": 53,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "OCaml": 168651,
      "Standard ML": 10380,
      "Nix": 3096,
      "Dune": 920,
      "Shell": 653
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:53:23.645909"
  }
}