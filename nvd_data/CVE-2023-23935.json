{
  "cve_id": "CVE-2023-23935",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "f31f0b70f82c43d93220ce6fc0d4f57440452f37",
    "related_commits": [
      "f31f0b70f82c43d93220ce6fc0d4f57440452f37",
      "f31f0b70f82c43d93220ce6fc0d4f57440452f37"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/f31f0b70f82c43d93220ce6fc0d4f57440452f37.patch",
    "fix_commit_details": {
      "sha": "f31f0b70f82c43d93220ce6fc0d4f57440452f37",
      "commit_date": "2023-01-31T04:08:23Z",
      "author": {
        "login": "tgxworld",
        "type": "User",
        "stats": {
          "total_commits": 4679,
          "average_weekly_commits": 6.7518037518037515,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 404
        }
      },
      "commit_message": {
        "title": "SECURITY: Hide PM count for tags by default (#20061)",
        "length": 560,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 154,
        "additions": 127,
        "deletions": 27
      },
      "files": [
        {
          "filename": "app/assets/javascripts/discourse/app/models/tag.js",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -1,15 +1,13 @@\n import RestModel from \"discourse/models/rest\";\n import discourseComputed from \"discourse-common/utils/decorators\";\n+import { readOnly } from \"@ember/object/computed\";\n \n export default RestModel.extend({\n-  @discourseComputed(\"count\", \"pm_count\")\n-  totalCount(count, pmCount) {\n-    return count + pmCount;\n-  },\n+  pmOnly: readOnly(\"pm_only\"),\n \n   @discourseComputed(\"count\", \"pm_count\")\n-  pmOnly(count, pmCount) {\n-    return count === 0 && pmCount > 0;\n+  totalCount(count, pmCount) {\n+    return pmCount ? count + pmCount : count;\n   },\n \n   @discourseComputed(\"id\")"
        },
        {
          "filename": "app/assets/javascripts/discourse/tests/helpers/create-pretender.js",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -100,33 +100,33 @@ export function applyDefaultHandlers(pretender) {\n     return response({\n       tags: [\n         { id: \"eviltrout\", count: 1 },\n-        { id: \"planned\", text: \"planned\", count: 7, pm_count: 0 },\n-        { id: \"private\", text: \"private\", count: 0, pm_count: 7 },\n+        { id: \"planned\", text: \"planned\", count: 7, pm_only: false },\n+        { id: \"private\", text: \"private\", count: 0, pm_only: true },\n       ],\n       extras: {\n         tag_groups: [\n           {\n             id: 2,\n             name: \"Ford Cars\",\n             tags: [\n-              { id: \"Escort\", text: \"Escort\", count: 1, pm_count: 0 },\n-              { id: \"focus\", text: \"focus\", count: 3, pm_count: 0 },\n+              { id: \"Escort\", text: \"Escort\", count: 1, pm_only: false },\n+              { id: \"focus\", text: \"focus\", count: 3, pm_only: false },\n             ],\n           },\n           {\n             id: 1,\n             name: \"Honda Cars\",\n             tags: [\n-              { id: \"civic\", text: \"civic\", count: 4, pm_count: 0 },\n-              { id: \"accord\", text: \"accord\", count: 2, pm_count: 0 },\n+              { id: \"civic\", text: \"civic\", count: 4, pm_only: false },\n+              { id: \"accord\", text: \"accord\", count: 2, pm_only: false },\n             ],\n           },\n           {\n             id: 1,\n             name: \"Makes\",\n             tags: [\n-              { id: \"ford\", text: \"ford\", count: 5, pm_count: 0 },\n-              { id: \"honda\", text: \"honda\", count: 6, pm_count: 0 },\n+              { id: \"ford\", text: \"ford\", count: 5, pm_only: false },\n+              { id: \"honda\", text: \"honda\", count: 6, pm_only: false },\n             ],\n           },\n         ],"
        },
        {
          "filename": "app/assets/javascripts/discourse/tests/integration/components/select-kit/tag-drop-test.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -28,7 +28,7 @@ module(\"Integration | Component | select-kit/tag-drop\", function (hooks) {\n     pretender.get(\"/tags/filter/search\", (params) => {\n       if (params.queryParams.q === \"dav\") {\n         return response({\n-          results: [{ id: \"David\", name: \"David\", count: 2, pm_count: 0 }],\n+          results: [{ id: \"David\", name: \"David\", count: 2, pm_only: false }],\n         });\n       }\n     });"
        },
        {
          "filename": "app/assets/javascripts/discourse/tests/unit/models/tag-test.js",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+import { module, test } from \"qunit\";\n+import { getOwner } from \"discourse-common/lib/get-owner\";\n+import { setupTest } from \"ember-qunit\";\n+\n+module(\"Unit | Model | tag\", function (hooks) {\n+  setupTest(hooks);\n+\n+  hooks.beforeEach(function () {\n+    this.store = getOwner(this).lookup(\"service:store\");\n+  });\n+\n+  test(\"totalCount when pm_count is not present\", function (assert) {\n+    const tag = this.store.createRecord(\"tag\", { count: 5 });\n+    assert.strictEqual(tag.totalCount, 5);\n+  });\n+\n+  test(\"totalCount when pm_count is present\", function (assert) {\n+    const tag = this.store.createRecord(\"tag\", { count: 5, pm_count: 8 });\n+    assert.strictEqual(tag.totalCount, 13);\n+  });\n+\n+  test(\"pmOnly\", function (assert) {\n+    const tag = this.store.createRecord(\"tag\", { pm_only: false });\n+\n+    assert.notOk(tag.pmOnly);\n+\n+    tag.set(\"pm_only\", true);\n+\n+    assert.ok(tag.pmOnly);\n+  });\n+});"
        },
        {
          "filename": "app/controllers/tags_controller.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -401,16 +401,22 @@ def self.tag_counts_json(tags, guardian)\n \n         next if topic_count == 0 && t.pm_topic_count > 0 && !show_pm_tags\n \n-        {\n+        attrs = {\n           id: t.name,\n           text: t.name,\n           name: t.name,\n           description: t.description,\n           count: topic_count,\n-          pm_count: show_pm_tags ? t.pm_topic_count : 0,\n+          pm_only: topic_count == 0 && t.pm_topic_count > 0,\n           target_tag:\n             t.target_tag_id ? target_tags.find { |x| x.id == t.target_tag_id }&.name : nil,\n         }\n+\n+        if show_pm_tags && SiteSetting.display_personal_messages_tag_counts\n+          attrs[:pm_count] = t.pm_topic_count\n+        end\n+\n+        attrs\n       end\n       .compact\n   end"
        },
        {
          "filename": "config/locales/server.en.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1652,6 +1652,7 @@ en:\n     content_security_policy_script_src: \"Additional allowlisted script sources. The current host and CDN are included by default. See <a href='https://meta.discourse.org/t/mitigate-xss-attacks-with-content-security-policy/104243' target='_blank'>Mitigate XSS Attacks with Content Security Policy.</a>\"\n     invalidate_inactive_admin_email_after_days: \"Admin accounts that have not visited the site in this number of days will need to re-validate their email address before logging in. Set to 0 to disable.\"\n     include_secure_categories_in_tag_counts: \"When enabled, count of topics for a tag will include topics that are in read restricted categories for all users. When disabled, normal users are only shown a count of topics for a tag where all the topics are in public categories.\"\n+    display_personal_messages_tag_counts: \"When enabled, count of personal messages tagged with a given tag will be displayed.\"\n     top_menu: \"Determine which items appear in the homepage navigation, and in what order. Example latest|new|unread|categories|top|read|posted|bookmarks\"\n     post_menu: \"Determine which items appear on the post menu, and in what order. Example like|edit|flag|delete|share|bookmark|reply\"\n     post_menu_hidden_items: \"The menu items to hide by default in the post menu unless an expansion ellipsis is clicked on.\""
        },
        {
          "filename": "config/site_settings.yml",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1806,6 +1806,8 @@ security:\n     hidden: true\n   include_secure_categories_in_tag_counts:\n     default: false\n+  display_personal_messages_tag_counts:\n+    default: false\n \n onebox:\n   post_onebox_maxlength:"
        },
        {
          "filename": "spec/requests/tags_controller_spec.rb",
          "status": "modified",
          "additions": 72,
          "deletions": 10,
          "patch": "@@ -12,9 +12,21 @@\n \n   describe \"#index\" do\n     fab!(:test_tag) { Fabricate(:tag, name: \"test\", description: \"some description\") }\n+\n     fab!(:topic_tag) do\n-      Fabricate(:tag, name: \"topic-test\", public_topic_count: 1, staff_topic_count: 1)\n+      Fabricate(\n+        :tag,\n+        name: \"topic-test\",\n+        public_topic_count: 1,\n+        staff_topic_count: 1,\n+        pm_topic_count: 5,\n+      )\n+    end\n+\n+    fab!(:pm_only_tag) do\n+      Fabricate(:tag, public_topic_count: 0, staff_topic_count: 0, pm_topic_count: 1)\n     end\n+\n     fab!(:synonym) { Fabricate(:tag, name: \"synonym\", target_tag: topic_tag) }\n \n     shared_examples \"retrieves the right tags\" do\n@@ -27,13 +39,63 @@\n \n         tags = response.parsed_body[\"tags\"]\n \n+        serialized_tag = tags.find { |t| t[\"id\"] == test_tag.name }\n+\n+        expect(serialized_tag[\"count\"]).to eq(0)\n+        expect(serialized_tag[\"pm_count\"]).to eq(nil)\n+        expect(serialized_tag[\"pm_only\"]).to eq(false)\n+\n+        serialized_tag = tags.find { |t| t[\"id\"] == topic_tag.name }\n+\n+        expect(serialized_tag[\"count\"]).to eq(1)\n+        expect(serialized_tag[\"pm_count\"]).to eq(nil)\n+        expect(serialized_tag[\"pm_only\"]).to eq(false)\n+      end\n+\n+      it \"does not include pm_count attribute when user cannot tag PM topics even if display_personal_messages_tag_counts site setting has been enabled\" do\n+        SiteSetting.display_personal_messages_tag_counts = true\n+\n+        sign_in(admin)\n+\n+        get \"/tags.json\"\n+\n+        expect(response.status).to eq(200)\n+\n+        tags = response.parsed_body[\"tags\"]\n+\n         expect(tags[0][\"name\"]).to eq(test_tag.name)\n-        expect(tags[0][\"count\"]).to eq(0)\n-        expect(tags[0][\"pm_count\"]).to eq(0)\n+        expect(tags[0][\"pm_count\"]).to eq(nil)\n \n         expect(tags[1][\"name\"]).to eq(topic_tag.name)\n-        expect(tags[1][\"count\"]).to eq(1)\n-        expect(tags[1][\"pm_count\"]).to eq(0)\n+        expect(tags[1][\"pm_count\"]).to eq(nil)\n+      end\n+\n+      it \"includes pm_count attribute when user can tag PM topics and display_personal_messages_tag_counts site setting has been enabled\" do\n+        SiteSetting.display_personal_messages_tag_counts = true\n+        SiteSetting.pm_tags_allowed_for_groups = Group::AUTO_GROUPS[:admins]\n+\n+        sign_in(admin)\n+\n+        get \"/tags.json\"\n+\n+        expect(response.status).to eq(200)\n+\n+        tags = response.parsed_body[\"tags\"]\n+\n+        serialized_tag = tags.find { |t| t[\"id\"] == test_tag.name }\n+\n+        expect(serialized_tag[\"pm_count\"]).to eq(0)\n+        expect(serialized_tag[\"pm_only\"]).to eq(false)\n+\n+        serialized_tag = tags.find { |t| t[\"id\"] == topic_tag.name }\n+\n+        expect(serialized_tag[\"pm_count\"]).to eq(5)\n+        expect(serialized_tag[\"pm_only\"]).to eq(false)\n+\n+        serialized_tag = tags.find { |t| t[\"id\"] == pm_only_tag.name }\n+\n+        expect(serialized_tag[\"pm_count\"]).to eq(1)\n+        expect(serialized_tag[\"pm_only\"]).to eq(true)\n       end\n \n       it \"only retrieve tags that have been used in public topics for non-staff user\" do\n@@ -48,7 +110,7 @@\n \n         expect(tags[0][\"name\"]).to eq(topic_tag.name)\n         expect(tags[0][\"count\"]).to eq(1)\n-        expect(tags[0][\"pm_count\"]).to eq(0)\n+        expect(tags[0][\"pm_count\"]).to eq(nil)\n       end\n     end\n \n@@ -66,17 +128,17 @@\n       context \"when enabled\" do\n         before do\n           SiteSetting.pm_tags_allowed_for_groups = \"1|2|3\"\n+          SiteSetting.display_personal_messages_tag_counts = true\n           sign_in(admin)\n         end\n \n         it \"shows topic tags and pm tags\" do\n           get \"/tags.json\"\n           tags = response.parsed_body[\"tags\"]\n-          expect(tags.length).to eq(2)\n \n           serialized_tag = tags.find { |t| t[\"id\"] == topic_tag.name }\n           expect(serialized_tag[\"count\"]).to eq(2)\n-          expect(serialized_tag[\"pm_count\"]).to eq(0)\n+          expect(serialized_tag[\"pm_count\"]).to eq(5)\n \n           serialized_tag = tags.find { |t| t[\"id\"] == test_tag.name }\n           expect(serialized_tag[\"count\"]).to eq(0)\n@@ -180,7 +242,7 @@\n         expect(tags[0][\"text\"]).to eq(test_tag.name)\n         expect(tags[0][\"description\"]).to eq(test_tag.description)\n         expect(tags[0][\"count\"]).to eq(0)\n-        expect(tags[0][\"pm_count\"]).to eq(0)\n+        expect(tags[0][\"pm_count\"]).to eq(nil)\n         expect(tags[0][\"target_tag\"]).to eq(nil)\n \n         expect(tags[1][\"name\"]).to eq(topic_tag.name)\n@@ -193,7 +255,7 @@\n         expect(categories[0][\"tags\"][0][\"text\"]).to eq(test_tag.name)\n         expect(categories[0][\"tags\"][0][\"description\"]).to eq(test_tag.description)\n         expect(categories[0][\"tags\"][0][\"count\"]).to eq(0)\n-        expect(categories[0][\"tags\"][0][\"pm_count\"]).to eq(0)\n+        expect(categories[0][\"tags\"][0][\"pm_count\"]).to eq(nil)\n         expect(categories[0][\"tags\"][0][\"target_tag\"]).to eq(nil)\n       end\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 8,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "f8c493f3c4ee5e38dff460288996c780a6458e29",
            "date": "2025-01-14T12:47:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6cb8b576d0c7902b99cbb39bc7aaa473d454118a",
            "date": "2025-01-14T12:46:14Z",
            "author_login": "CvX"
          },
          {
            "sha": "12c412acc699ac47bd98c999a483ced96888f799",
            "date": "2025-01-14T12:35:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Discourse is an open-source messaging platform. In versions 3.0.1 and prior on the `stable` branch and versions 3.1.0.beta2 and prior on the `beta` and `tests-passed` branches, the count of personal messages displayed for a tag is a count of all personal messages regardless of whether the personal message is visible to a given user. As a result, any users can technically poll a sensitive tag to determine if a new personal message is created even if the user does not have access to the personal message.\n\nIn the patched versions, the count of personal messages tagged with a given tag is hidden by default. To revert to the old behaviour of displaying the count of personal messages for a given tag, an admin may enable the `display_personal_messages_tag_counts` site setting.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-16T21:15:13.183",
    "last_modified": "2024-11-21T07:47:08.080",
    "fix_date": "2023-01-31T04:08:23Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/f31f0b70f82c43d93220ce6fc0d4f57440452f37",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-rf8j-mf8c-82v7",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/f31f0b70f82c43d93220ce6fc0d4f57440452f37",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-rf8j-mf8c-82v7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.854252",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}