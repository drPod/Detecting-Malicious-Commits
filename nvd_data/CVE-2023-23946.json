{
  "cve_id": "CVE-2023-23946",
  "github_data": {
    "repository": "git/git",
    "fix_commit": "c867e4fa180bec4750e9b54eb10f459030dbebfd",
    "related_commits": [
      "c867e4fa180bec4750e9b54eb10f459030dbebfd",
      "c867e4fa180bec4750e9b54eb10f459030dbebfd"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "c867e4fa180bec4750e9b54eb10f459030dbebfd",
      "commit_date": "2023-02-14T01:03:24Z",
      "author": {
        "login": "gitster",
        "type": "User",
        "stats": {
          "total_commits": 22481,
          "average_weekly_commits": 21.762826718296225,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 885
        }
      },
      "commit_message": {
        "title": "Sync with Git 2.39.2",
        "length": 20,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 359,
        "additions": 350,
        "deletions": 9
      },
      "files": [
        {
          "filename": "Documentation/RelNotes/2.30.8.txt",
          "status": "added",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -0,0 +1,51 @@\n+Git v2.30.8 Release Notes\n+=========================\n+\n+This release addresses the security issues CVE-2023-22490 and\n+CVE-2023-23946.\n+\n+\n+Fixes since v2.30.7\n+-------------------\n+\n+ * CVE-2023-22490:\n+\n+   Using a specially-crafted repository, Git can be tricked into using\n+   its local clone optimization even when using a non-local transport.\n+   Though Git will abort local clones whose source $GIT_DIR/objects\n+   directory contains symbolic links (c.f., CVE-2022-39253), the objects\n+   directory itself may still be a symbolic link.\n+\n+   These two may be combined to include arbitrary files based on known\n+   paths on the victim's filesystem within the malicious repository's\n+   working copy, allowing for data exfiltration in a similar manner as\n+   CVE-2022-39253.\n+\n+ * CVE-2023-23946:\n+\n+   By feeding a crafted input to \"git apply\", a path outside the\n+   working tree can be overwritten as the user who is running \"git\n+   apply\".\n+\n+ * A mismatched type in `attr.c::read_attr_from_index()` which could\n+   cause Git to errantly reject attributes on Windows and 32-bit Linux\n+   has been corrected.\n+\n+Credit for finding CVE-2023-22490 goes to yvvdwf, and the fix was\n+developed by Taylor Blau, with additional help from others on the\n+Git security mailing list.\n+\n+Credit for finding CVE-2023-23946 goes to Joern Schneeweisz, and the\n+fix was developed by Patrick Steinhardt.\n+\n+\n+Johannes Schindelin (1):\n+      attr: adjust a mismatched data type\n+\n+Patrick Steinhardt (1):\n+      apply: fix writing behind newly created symbolic links\n+\n+Taylor Blau (3):\n+      t5619: demonstrate clone_local() with ambiguous transport\n+      clone: delay picking a transport until after get_repo_path()\n+      dir-iterator: prevent top-level symlinks without FOLLOW_SYMLINKS"
        },
        {
          "filename": "Documentation/RelNotes/2.31.7.txt",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+Git v2.31.7 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8 to\n+address the security issues CVE-2023-22490 and CVE-2023-23946;\n+see the release notes for that version for details."
        },
        {
          "filename": "Documentation/RelNotes/2.32.6.txt",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+Git v2.32.6 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8 and v2.31.7\n+to address the security issues CVE-2023-22490 and CVE-2023-23946;\n+see the release notes for these versions for details."
        },
        {
          "filename": "Documentation/RelNotes/2.33.7.txt",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Git v2.33.7 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8, v2.31.7\n+and v2.32.6 to address the security issues CVE-2023-22490 and\n+CVE-2023-23946; see the release notes for these versions for\n+details."
        },
        {
          "filename": "Documentation/RelNotes/2.34.7.txt",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Git v2.34.7 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8, v2.31.7,\n+v2.32.6 and v2.33.7 to address the security issues CVE-2023-22490\n+and CVE-2023-23946; see the release notes for these versions\n+for details."
        },
        {
          "filename": "Documentation/RelNotes/2.35.7.txt",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Git v2.35.7 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8, v2.31.7,\n+v2.32.6, v2.33.7 and v2.34.7 to address the security issues\n+CVE-2023-22490 and CVE-2023-23946; see the release notes for\n+these versions for details."
        },
        {
          "filename": "Documentation/RelNotes/2.36.5.txt",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Git v2.36.5 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8, v2.31.7,\n+v2.32.6, v2.33.7, v2.34.7 and v2.35.7 to address the security\n+issues CVE-2023-22490 and CVE-2023-23946; see the release notes\n+for these versions for details."
        },
        {
          "filename": "Documentation/RelNotes/2.37.6.txt",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Git v2.37.6 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8, v2.31.7,\n+v2.32.6, v2.33.7, v2.34.7, v2.35.7 and v2.36.5 to address the\n+security issues CVE-2023-22490 and CVE-2023-23946; see the release\n+notes for these versions for details."
        },
        {
          "filename": "Documentation/RelNotes/2.38.4.txt",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Git v2.38.4 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8, v2.31.7,\n+v2.32.6, v2.33.7, v2.34.7, v2.35.7, v2.36.5 and v2.37.6 to\n+address the security issues CVE-2023-22490 and CVE-2023-23946;\n+see the release notes for these versions for details."
        },
        {
          "filename": "Documentation/RelNotes/2.39.2.txt",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+Git v2.39.2 Release Notes\n+=========================\n+\n+This release merges up the fixes that appear in v2.30.8, v2.31.7,\n+v2.32.6, v2.33.7, v2.34.7, v2.35.7, v2.36.5, v2.37.6 and v2.38.4\n+to address the security issues CVE-2023-22490 and CVE-2023-23946;\n+see the release notes for these versions for details."
        },
        {
          "filename": "apply.c",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -4418,6 +4418,33 @@ static int create_one_file(struct apply_state *state,\n \tif (state->cached)\n \t\treturn 0;\n \n+\t/*\n+\t * We already try to detect whether files are beyond a symlink in our\n+\t * up-front checks. But in the case where symlinks are created by any\n+\t * of the intermediate hunks it can happen that our up-front checks\n+\t * didn't yet see the symlink, but at the point of arriving here there\n+\t * in fact is one. We thus repeat the check for symlinks here.\n+\t *\n+\t * Note that this does not make the up-front check obsolete as the\n+\t * failure mode is different:\n+\t *\n+\t * - The up-front checks cause us to abort before we have written\n+\t *   anything into the working directory. So when we exit this way the\n+\t *   working directory remains clean.\n+\t *\n+\t * - The checks here happen in the middle of the action where we have\n+\t *   already started to apply the patch. The end result will be a dirty\n+\t *   working directory.\n+\t *\n+\t * Ideally, we should update the up-front checks to catch what would\n+\t * happen when we apply the patch before we damage the working tree.\n+\t * We have all the information necessary to do so.  But for now, as a\n+\t * part of embargoed security work, having this check would serve as a\n+\t * reasonable first step.\n+\t */\n+\tif (path_is_beyond_symlink(state, path))\n+\t\treturn error(_(\"affected file '%s' is beyond a symbolic link\"), path);\n+\n \tres = try_create_file(state, path, mode, buf, size);\n \tif (res < 0)\n \t\treturn -1;"
        },
        {
          "filename": "builtin/clone.c",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1170,10 +1170,6 @@ int cmd_clone(int argc, const char **argv, const char *prefix)\n \trefspec_appendf(&remote->fetch, \"+%s*:%s*\", src_ref_prefix,\n \t\t\tbranch_top.buf);\n \n-\ttransport = transport_get(remote, remote->url[0]);\n-\ttransport_set_verbosity(transport, option_verbosity, option_progress);\n-\ttransport->family = family;\n-\n \tpath = get_repo_path(remote->url[0], &is_bundle);\n \tis_local = option_local != 0 && path && !is_bundle;\n \tif (is_local) {\n@@ -1195,6 +1191,10 @@ int cmd_clone(int argc, const char **argv, const char *prefix)\n \t}\n \tif (option_local > 0 && !is_local)\n \t\twarning(_(\"--local is ignored\"));\n+\n+\ttransport = transport_get(remote, path ? path : remote->url[0]);\n+\ttransport_set_verbosity(transport, option_verbosity, option_progress);\n+\ttransport->family = family;\n \ttransport->cloning = 1;\n \n \tif (is_bundle) {"
        },
        {
          "filename": "dir-iterator.c",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -203,7 +203,7 @@ struct dir_iterator *dir_iterator_begin(const char *path, unsigned int flags)\n {\n \tstruct dir_iterator_int *iter = xcalloc(1, sizeof(*iter));\n \tstruct dir_iterator *dir_iterator = &iter->base;\n-\tint saved_errno;\n+\tint saved_errno, err;\n \n \tstrbuf_init(&iter->base.path, PATH_MAX);\n \tstrbuf_addstr(&iter->base.path, path);\n@@ -213,10 +213,15 @@ struct dir_iterator *dir_iterator_begin(const char *path, unsigned int flags)\n \titer->flags = flags;\n \n \t/*\n-\t * Note: stat already checks for NULL or empty strings and\n-\t * inexistent paths.\n+\t * Note: stat/lstat already checks for NULL or empty strings and\n+\t * nonexistent paths.\n \t */\n-\tif (stat(iter->base.path.buf, &iter->base.st) < 0) {\n+\tif (iter->flags & DIR_ITERATOR_FOLLOW_SYMLINKS)\n+\t\terr = stat(iter->base.path.buf, &iter->base.st);\n+\telse\n+\t\terr = lstat(iter->base.path.buf, &iter->base.st);\n+\n+\tif (err < 0) {\n \t\tsaved_errno = errno;\n \t\tgoto error_out;\n \t}"
        },
        {
          "filename": "dir-iterator.h",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -61,6 +61,11 @@\n  *   not the symlinks themselves, which is the default behavior. Broken\n  *   symlinks are ignored.\n  *\n+ *   Note: setting DIR_ITERATOR_FOLLOW_SYMLINKS affects resolving the\n+ *   starting path as well (e.g., attempting to iterate starting at a\n+ *   symbolic link pointing to a directory without FOLLOW_SYMLINKS will\n+ *   result in an error).\n+ *\n  * Warning: circular symlinks are also followed when\n  * DIR_ITERATOR_FOLLOW_SYMLINKS is set. The iteration may end up with\n  * an ELOOP if they happen and DIR_ITERATOR_PEDANTIC is set."
        },
        {
          "filename": "t/t0066-dir-iterator.sh",
          "status": "modified",
          "additions": 26,
          "deletions": 1,
          "patch": "@@ -110,7 +110,9 @@ test_expect_success SYMLINKS 'setup dirs with symlinks' '\n \tmkdir -p dir5/a/c &&\n \tln -s ../c dir5/a/b/d &&\n \tln -s ../ dir5/a/b/e &&\n-\tln -s ../../ dir5/a/b/f\n+\tln -s ../../ dir5/a/b/f &&\n+\n+\tln -s dir4 dir6\n '\n \n test_expect_success SYMLINKS 'dir-iterator should not follow symlinks by default' '\n@@ -146,4 +148,27 @@ test_expect_success SYMLINKS 'dir-iterator should follow symlinks w/ follow flag\n \ttest_cmp expected-follow-sorted-output actual-follow-sorted-output\n '\n \n+test_expect_success SYMLINKS 'dir-iterator does not resolve top-level symlinks' '\n+\ttest_must_fail test-tool dir-iterator ./dir6 >out &&\n+\n+\tgrep \"ENOTDIR\" out\n+'\n+\n+test_expect_success SYMLINKS 'dir-iterator resolves top-level symlinks w/ follow flag' '\n+\tcat >expected-follow-sorted-output <<-EOF &&\n+\t[d] (a) [a] ./dir6/a\n+\t[d] (a/f) [f] ./dir6/a/f\n+\t[d] (a/f/c) [c] ./dir6/a/f/c\n+\t[d] (b) [b] ./dir6/b\n+\t[d] (b/c) [c] ./dir6/b/c\n+\t[f] (a/d) [d] ./dir6/a/d\n+\t[f] (a/e) [e] ./dir6/a/e\n+\tEOF\n+\n+\ttest-tool dir-iterator --follow-symlinks ./dir6 >out &&\n+\tsort out >actual-follow-sorted-output &&\n+\n+\ttest_cmp expected-follow-sorted-output actual-follow-sorted-output\n+'\n+\n test_done"
        },
        {
          "filename": "t/t4115-apply-symlink.sh",
          "status": "modified",
          "additions": 81,
          "deletions": 0,
          "patch": "@@ -45,4 +45,85 @@ test_expect_success 'apply --index symlink patch' '\n \n '\n \n+test_expect_success 'symlink setup' '\n+\tln -s .git symlink &&\n+\tgit add symlink &&\n+\tgit commit -m \"add symlink\"\n+'\n+\n+test_expect_success SYMLINKS 'symlink escape when creating new files' '\n+\ttest_when_finished \"git reset --hard && git clean -dfx\" &&\n+\n+\tcat >patch <<-EOF &&\n+\tdiff --git a/symlink b/renamed-symlink\n+\tsimilarity index 100%\n+\trename from symlink\n+\trename to renamed-symlink\n+\t--\n+\tdiff --git /dev/null b/renamed-symlink/create-me\n+\tnew file mode 100644\n+\tindex 0000000..039727e\n+\t--- /dev/null\n+\t+++ b/renamed-symlink/create-me\n+\t@@ -0,0 +1,1 @@\n+\t+busted\n+\tEOF\n+\n+\ttest_must_fail git apply patch 2>stderr &&\n+\tcat >expected_stderr <<-EOF &&\n+\terror: affected file ${SQ}renamed-symlink/create-me${SQ} is beyond a symbolic link\n+\tEOF\n+\ttest_cmp expected_stderr stderr &&\n+\t! test_path_exists .git/create-me\n+'\n+\n+test_expect_success SYMLINKS 'symlink escape when modifying file' '\n+\ttest_when_finished \"git reset --hard && git clean -dfx\" &&\n+\ttouch .git/modify-me &&\n+\n+\tcat >patch <<-EOF &&\n+\tdiff --git a/symlink b/renamed-symlink\n+\tsimilarity index 100%\n+\trename from symlink\n+\trename to renamed-symlink\n+\t--\n+\tdiff --git a/renamed-symlink/modify-me b/renamed-symlink/modify-me\n+\tindex 1111111..2222222 100644\n+\t--- a/renamed-symlink/modify-me\n+\t+++ b/renamed-symlink/modify-me\n+\t@@ -0,0 +1,1 @@\n+\t+busted\n+\tEOF\n+\n+\ttest_must_fail git apply patch 2>stderr &&\n+\tcat >expected_stderr <<-EOF &&\n+\terror: renamed-symlink/modify-me: No such file or directory\n+\tEOF\n+\ttest_cmp expected_stderr stderr &&\n+\ttest_must_be_empty .git/modify-me\n+'\n+\n+test_expect_success SYMLINKS 'symlink escape when deleting file' '\n+\ttest_when_finished \"git reset --hard && git clean -dfx && rm .git/delete-me\" &&\n+\ttouch .git/delete-me &&\n+\n+\tcat >patch <<-EOF &&\n+\tdiff --git a/symlink b/renamed-symlink\n+\tsimilarity index 100%\n+\trename from symlink\n+\trename to renamed-symlink\n+\t--\n+\tdiff --git a/renamed-symlink/delete-me b/renamed-symlink/delete-me\n+\tdeleted file mode 100644\n+\tindex 1111111..0000000 100644\n+\tEOF\n+\n+\ttest_must_fail git apply patch 2>stderr &&\n+\tcat >expected_stderr <<-EOF &&\n+\terror: renamed-symlink/delete-me: No such file or directory\n+\tEOF\n+\ttest_cmp expected_stderr stderr &&\n+\ttest_path_is_file .git/delete-me\n+'\n+\n test_done"
        },
        {
          "filename": "t/t5604-clone-reference.sh",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -344,4 +344,20 @@ test_expect_success SYMLINKS 'clone repo with symlinked or unknown files at obje\n \ttest_must_be_empty T--shared.objects-symlinks.raw\n '\n \n+test_expect_success SYMLINKS 'clone repo with symlinked objects directory' '\n+\ttest_when_finished \"rm -fr sensitive malicious\" &&\n+\n+\tmkdir -p sensitive &&\n+\techo \"secret\" >sensitive/file &&\n+\n+\tgit init malicious &&\n+\trm -fr malicious/.git/objects &&\n+\tln -s \"$(pwd)/sensitive\" ./malicious/.git/objects &&\n+\n+\ttest_must_fail git clone --local malicious clone 2>err &&\n+\n+\ttest_path_is_missing clone &&\n+\tgrep \"failed to start iterator over\" err\n+'\n+\n test_done"
        },
        {
          "filename": "t/t5619-clone-local-ambiguous-transport.sh",
          "status": "added",
          "additions": 70,
          "deletions": 0,
          "patch": "@@ -0,0 +1,70 @@\n+#!/bin/sh\n+\n+test_description='test local clone with ambiguous transport'\n+\n+. ./test-lib.sh\n+. \"$TEST_DIRECTORY/lib-httpd.sh\"\n+\n+if ! test_have_prereq SYMLINKS\n+then\n+\tskip_all='skipping test, symlink support unavailable'\n+\ttest_done\n+fi\n+\n+start_httpd\n+\n+REPO=\"$HTTPD_DOCUMENT_ROOT_PATH/sub.git\"\n+URI=\"$HTTPD_URL/dumb/sub.git\"\n+\n+test_expect_success 'setup' '\n+\tmkdir -p sensitive &&\n+\techo \"secret\" >sensitive/secret &&\n+\n+\tgit init --bare \"$REPO\" &&\n+\ttest_commit_bulk -C \"$REPO\" --ref=main 1 &&\n+\n+\tgit -C \"$REPO\" update-ref HEAD main &&\n+\tgit -C \"$REPO\" update-server-info &&\n+\n+\tgit init malicious &&\n+\t(\n+\t\tcd malicious &&\n+\n+\t\tgit submodule add \"$URI\" &&\n+\n+\t\tmkdir -p repo/refs &&\n+\t\ttouch repo/refs/.gitkeep &&\n+\t\tprintf \"ref: refs/heads/a\" >repo/HEAD &&\n+\t\tln -s \"$(cd .. && pwd)/sensitive\" repo/objects &&\n+\n+\t\tmkdir -p \"$HTTPD_URL/dumb\" &&\n+\t\tln -s \"../../../.git/modules/sub/../../../repo/\" \"$URI\" &&\n+\n+\t\tgit add . &&\n+\t\tgit commit -m \"initial commit\"\n+\t) &&\n+\n+\t# Delete all of the references in our malicious submodule to\n+\t# avoid the client attempting to checkout any objects (which\n+\t# will be missing, and thus will cause the clone to fail before\n+\t# we can trigger the exploit).\n+\tgit -C \"$REPO\" for-each-ref --format=\"delete %(refname)\" >in &&\n+\tgit -C \"$REPO\" update-ref --stdin <in &&\n+\tgit -C \"$REPO\" update-server-info\n+'\n+\n+test_expect_success 'ambiguous transport does not lead to arbitrary file-inclusion' '\n+\tgit clone malicious clone &&\n+\ttest_must_fail git -C clone submodule update --init 2>err &&\n+\n+\ttest_path_is_missing clone/.git/modules/sub/objects/secret &&\n+\t# We would actually expect \"transport .file. not allowed\" here,\n+\t# but due to quirks of the URL detection in Git, we mis-parse\n+\t# the absolute path as a bogus URL and die before that step.\n+\t#\n+\t# This works for now, and if we ever fix the URL detection, it\n+\t# is OK to change this to detect the transport error.\n+\tgrep \"protocol .* is not supported\" err\n+'\n+\n+test_done"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5f8f7081f7761acdf83d0a4c6819fe3d724f01d7",
            "date": "2025-01-23T22:24:50Z",
            "author_login": "gitster"
          },
          {
            "sha": "39ba2e8e5627a8a3062d257928824139ca71c5f3",
            "date": "2025-01-23T23:07:02Z",
            "author_login": "gitster"
          },
          {
            "sha": "6ecb4fc149c725e16392dc88f1f419dd56aaddcc",
            "date": "2025-01-23T23:07:02Z",
            "author_login": "gitster"
          },
          {
            "sha": "294673a17e818d8a29c8d23b0922855734e1925d",
            "date": "2025-01-23T23:07:02Z",
            "author_login": "gitster"
          },
          {
            "sha": "aa31820d9da83cecfb028c76327d74694e3fc11f",
            "date": "2025-01-23T23:07:01Z",
            "author_login": "gitster"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-22",
    "description": "Git, a revision control system, is vulnerable to path traversal prior to versions 2.39.2, 2.38.4, 2.37.6, 2.36.5, 2.35.7, 2.34.7, 2.33.7, 2.32.6, 2.31.7, and 2.30.8. By feeding a crafted input to `git apply`, a path outside the working tree can be overwritten as the user who is running `git apply`. A fix has been prepared and will appear in v2.39.2, v2.38.4, v2.37.6, v2.36.5, v2.35.7, v2.34.7, v2.33.7, v2.32.6, v2.31.7, and v2.30.8. As a workaround, use `git apply --stat` to inspect a patch before applying; avoid applying one that creates a symbolic link and then creates a file beyond the symbolic link.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-14T20:15:17.457",
    "last_modified": "2024-11-21T07:47:09.383",
    "fix_date": "2023-02-14T01:03:24Z"
  },
  "references": [
    {
      "url": "https://github.com/git/git/commit/c867e4fa180bec4750e9b54eb10f459030dbebfd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-r87m-v37r-cwfh",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202312-15",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/commit/c867e4fa180bec4750e9b54eb10f459030dbebfd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-r87m-v37r-cwfh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202312-15",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.057986",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "git",
    "owner": "git",
    "created_at": "2008-07-23T14:21:26Z",
    "updated_at": "2025-01-26T05:23:02Z",
    "pushed_at": "2025-01-26T06:02:54Z",
    "size": 268239,
    "stars": 53304,
    "forks": 25843,
    "open_issues": 202,
    "watchers": 53304,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 11390380,
      "Shell": 8593314,
      "Perl": 1166701,
      "Tcl": 852369,
      "Python": 183463,
      "Makefile": 168744,
      "Meson": 107371,
      "JavaScript": 49713,
      "CMake": 46584,
      "M4": 38265,
      "Roff": 26859,
      "C++": 26403,
      "SmPL": 15676,
      "Go": 15064,
      "CSS": 10664,
      "Batchfile": 9822,
      "Emacs Lisp": 660,
      "PowerShell": 478,
      "ReScript": 92
    },
    "commit_activity": {
      "total_commits_last_year": 3696,
      "avg_commits_per_week": 71.07692307692308,
      "days_active_last_year": 309
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:50:10.099066"
  }
}