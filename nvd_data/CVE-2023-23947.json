{
  "cve_id": "CVE-2023-23947",
  "github_data": {
    "repository": "argoproj/argo-cd",
    "fix_commit": "fbb0b99b1ac3361b253052bd30259fa43a520945",
    "related_commits": [
      "fbb0b99b1ac3361b253052bd30259fa43a520945",
      "fbb0b99b1ac3361b253052bd30259fa43a520945"
    ],
    "patch_url": "https://github.com/argoproj/argo-cd/commit/fbb0b99b1ac3361b253052bd30259fa43a520945.patch",
    "fix_commit_details": {
      "sha": "fbb0b99b1ac3361b253052bd30259fa43a520945",
      "commit_date": "2023-02-16T14:07:57Z",
      "author": {
        "login": "crenshaw-dev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-3jfq-742w-xg8j",
        "length": 138,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 130,
        "additions": 123,
        "deletions": 7
      },
      "files": [
        {
          "filename": "common/common.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -8,6 +8,8 @@ import (\n \t\"time\"\n \n \t\"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/grpc/codes\"\n+\t\"google.golang.org/grpc/status\"\n )\n \n // Default service addresses and URLS of Argo CD internal services\n@@ -316,3 +318,5 @@ const (\n const TokenVerificationError = \"failed to verify the token\"\n \n var TokenVerificationErr = errors.New(TokenVerificationError)\n+\n+var PermissionDeniedAPIError = status.Error(codes.PermissionDenied, \"permission denied\")"
        },
        {
          "filename": "server/cluster/cluster.go",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -1,11 +1,10 @@\n package cluster\n \n import (\n+\t\"context\"\n \t\"net/url\"\n \t\"time\"\n \n-\t\"context\"\n-\n \t\"github.com/argoproj/gitops-engine/pkg/utils/kube\"\n \tlog \"github.com/sirupsen/logrus\"\n \t\"google.golang.org/grpc/codes\"\n@@ -14,6 +13,7 @@ import (\n \t\"k8s.io/apimachinery/pkg/util/sets\"\n \t\"k8s.io/client-go/kubernetes\"\n \n+\t\"github.com/argoproj/argo-cd/v2/common\"\n \t\"github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster\"\n \tappv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n \tservercache \"github.com/argoproj/argo-cd/v2/server/cache\"\n@@ -135,7 +135,7 @@ func (s *Server) Get(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Clust\n func (s *Server) getClusterWith403IfNotExist(ctx context.Context, q *cluster.ClusterQuery) (*appv1.Cluster, error) {\n \trepo, err := s.getCluster(ctx, q)\n \tif err != nil || repo == nil {\n-\t\treturn nil, status.Error(codes.PermissionDenied, \"permission denied\")\n+\t\treturn nil, common.PermissionDeniedAPIError\n \t}\n \treturn repo, nil\n }\n@@ -221,14 +221,14 @@ func (s *Server) Update(ctx context.Context, q *cluster.ClusterUpdateRequest) (*\n \t}\n \n \t// verify that user can do update inside project where cluster is located\n-\tif err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, q.Cluster.Server)); err != nil {\n-\t\treturn nil, err\n+\tif !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(c.Project, c.Server)) {\n+\t\treturn nil, common.PermissionDeniedAPIError\n \t}\n \n \tif len(q.UpdatedFields) == 0 || sets.NewString(q.UpdatedFields...).Has(\"project\") {\n \t\t// verify that user can do update inside project where cluster will be located\n-\t\tif err := s.enf.EnforceErr(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, q.Cluster.Server)); err != nil {\n-\t\t\treturn nil, err\n+\t\tif !s.enf.Enforce(ctx.Value(\"claims\"), rbacpolicy.ResourceClusters, rbacpolicy.ActionUpdate, createRBACObject(q.Cluster.Project, c.Server)) {\n+\t\t\treturn nil, common.PermissionDeniedAPIError\n \t\t}\n \t}\n "
        },
        {
          "filename": "server/cluster/cluster_test.go",
          "status": "modified",
          "additions": 112,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ package cluster\n import (\n \t\"context\"\n \t\"encoding/json\"\n+\t\"fmt\"\n \t\"testing\"\n \t\"time\"\n \n@@ -49,6 +50,117 @@ func newNoopEnforcer() *rbac.Enforcer {\n \treturn enf\n }\n \n+func TestUpdateCluster_RejectInvalidParams(t *testing.T) {\n+\ttestCases := []struct {\n+\t\tname    string\n+\t\trequest clusterapi.ClusterUpdateRequest\n+\t}{\n+\t\t{\n+\t\t\tname:    \"allowed cluster URL in body, disallowed cluster URL in query\",\n+\t\t\trequest: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},\n+\t\t},\n+\t\t{\n+\t\t\tname:    \"allowed cluster URL in body, disallowed cluster name in query\",\n+\t\t\trequest: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},\n+\t\t},\n+\t\t{\n+\t\t\tname:    \"allowed cluster URL in body, disallowed cluster name in query, changing unscoped to scoped\",\n+\t\t\trequest: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"\", Value: \"https://127.0.0.2\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},\n+\t\t},\n+\t\t{\n+\t\t\tname:    \"allowed cluster URL in body, disallowed cluster URL in query, changing unscoped to scoped\",\n+\t\t\trequest: clusterapi.ClusterUpdateRequest{Cluster: &v1alpha1.Cluster{Name: \"\", Server: \"https://127.0.0.1\", Project: \"allowed-project\", ClusterResources: true}, Id: &clusterapi.ClusterID{Type: \"name\", Value: \"disallowed-unscoped\"}, UpdatedFields: []string{\"clusterResources\", \"project\"}},\n+\t\t},\n+\t}\n+\n+\tdb := &dbmocks.ArgoDB{}\n+\n+\tclusters := []v1alpha1.Cluster{\n+\t\t{\n+\t\t\tName:   \"allowed-unscoped\",\n+\t\t\tServer: \"https://127.0.0.1\",\n+\t\t},\n+\t\t{\n+\t\t\tName:   \"disallowed-unscoped\",\n+\t\t\tServer: \"https://127.0.0.2\",\n+\t\t},\n+\t\t{\n+\t\t\tName:    \"allowed-scoped\",\n+\t\t\tServer:  \"https://127.0.0.3\",\n+\t\t\tProject: \"allowed-project\",\n+\t\t},\n+\t\t{\n+\t\t\tName:    \"disallowed-scoped\",\n+\t\t\tServer:  \"https://127.0.0.4\",\n+\t\t\tProject: \"disallowed-project\",\n+\t\t},\n+\t}\n+\n+\tdb.On(\"ListClusters\", mock.Anything).Return(\n+\t\tfunc(ctx context.Context) *v1alpha1.ClusterList {\n+\t\t\treturn &v1alpha1.ClusterList{\n+\t\t\t\tListMeta: v1.ListMeta{},\n+\t\t\t\tItems:    clusters,\n+\t\t\t}\n+\t\t},\n+\t\tfunc(ctx context.Context) error {\n+\t\t\treturn nil\n+\t\t},\n+\t)\n+\tdb.On(\"UpdateCluster\", mock.Anything, mock.Anything).Return(\n+\t\tfunc(ctx context.Context, c *v1alpha1.Cluster) *v1alpha1.Cluster {\n+\t\t\tfor _, cluster := range clusters {\n+\t\t\t\tif c.Server == cluster.Server {\n+\t\t\t\t\treturn c\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t},\n+\t\tfunc(ctx context.Context, c *v1alpha1.Cluster) error {\n+\t\t\tfor _, cluster := range clusters {\n+\t\t\t\tif c.Server == cluster.Server {\n+\t\t\t\t\treturn nil\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn fmt.Errorf(\"cluster '%s' not found\", c.Server)\n+\t\t},\n+\t)\n+\tdb.On(\"GetCluster\", mock.Anything, mock.Anything).Return(\n+\t\tfunc(ctx context.Context, server string) *v1alpha1.Cluster {\n+\t\t\tfor _, cluster := range clusters {\n+\t\t\t\tif server == cluster.Server {\n+\t\t\t\t\treturn &cluster\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t},\n+\t\tfunc(ctx context.Context, server string) error {\n+\t\t\tfor _, cluster := range clusters {\n+\t\t\t\tif server == cluster.Server {\n+\t\t\t\t\treturn nil\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn fmt.Errorf(\"cluster '%s' not found\", server)\n+\t\t},\n+\t)\n+\n+\tenf := rbac.NewEnforcer(fake.NewSimpleClientset(test.NewFakeConfigMap()), test.FakeArgoCDNamespace, common.ArgoCDConfigMapName, nil)\n+\t_ = enf.SetBuiltinPolicy(`p, role:test, clusters, *, https://127.0.0.1, allow\n+p, role:test, clusters, *, allowed-project/*, allow`)\n+\tenf.SetDefaultRole(\"role:test\")\n+\tserver := NewServer(db, enf, newServerInMemoryCache(), &kubetest.MockKubectlCmd{})\n+\n+\tfor _, c := range testCases {\n+\t\tcc := c\n+\t\tt.Run(cc.name, func(t *testing.T) {\n+\t\t\tt.Parallel()\n+\t\t\tout, err := server.Update(context.Background(), &cc.request)\n+\t\t\trequire.Nil(t, out)\n+\t\t\tassert.ErrorIs(t, err, common.PermissionDeniedAPIError)\n+\t\t})\n+\t}\n+}\n+\n func TestGetCluster_UrlEncodedName(t *testing.T) {\n \tdb := &dbmocks.ArgoDB{}\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d23e6ac79bb95a911b988551ba33bfc9939c5f18",
            "date": "2025-01-14T16:10:14Z",
            "author_login": "crenshaw-dev"
          },
          {
            "sha": "9a51757049dc028596d4950d7a6c7cd5a446301a",
            "date": "2025-01-14T15:41:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c3600d240a42a4708ec65091ffb23689b4513f85",
            "date": "2025-01-14T12:37:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b77d9d9f5f9cf3862ef75e14a5877a3fcf60fa40",
            "date": "2025-01-14T12:16:41Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2f579404f68ded0b0156fc25d6e554640c4ad009",
            "date": "2025-01-14T12:12:38Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-863",
    "description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All Argo CD versions starting with 2.3.0-rc1 and prior to 2.3.17, 2.4.23  2.5.11, and 2.6.2 are vulnerable to an improper authorization bug which allows users who have the ability to update at least one cluster secret to update any cluster secret. The attacker could use this access to escalate privileges (potentially controlling Kubernetes resources) or to break Argo CD functionality (by preventing connections to external clusters). A patch for this vulnerability has been released in Argo CD versions 2.6.2, 2.5.11, 2.4.23, and 2.3.17. Two workarounds are available. Either modify the RBAC configuration to completely revoke all `clusters, update` access, or use the `destinations` and `clusterResourceWhitelist` fields to apply similar restrictions as the `namespaces` and `clusterResources` fields.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-16T18:15:11.310",
    "last_modified": "2024-11-21T07:47:09.503",
    "fix_date": "2023-02-16T14:07:57Z"
  },
  "references": [
    {
      "url": "https://github.com/argoproj/argo-cd/commit/fbb0b99b1ac3361b253052bd30259fa43a520945",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-3jfq-742w-xg8j",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/fbb0b99b1ac3361b253052bd30259fa43a520945",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-3jfq-742w-xg8j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.066695",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "argo-cd",
    "owner": "argoproj",
    "created_at": "2018-02-09T11:12:01Z",
    "updated_at": "2025-01-14T12:37:12Z",
    "pushed_at": "2025-01-14T12:37:08Z",
    "size": 125601,
    "stars": 18420,
    "forks": 5620,
    "open_issues": 3601,
    "watchers": 18420,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 6686751,
      "TypeScript": 1298168,
      "Lua": 199797,
      "SCSS": 92938,
      "Shell": 58329,
      "Makefile": 24983,
      "Dockerfile": 15204,
      "Procfile": 10040,
      "JavaScript": 5975,
      "CSS": 2209,
      "Mustache": 1066,
      "HTML": 895
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:15:10.212233"
  }
}