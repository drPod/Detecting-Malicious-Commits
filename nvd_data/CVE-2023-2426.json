{
  "cve_id": "CVE-2023-2426",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "caf642c25de526229264cab9425e7c9979f3509b",
    "related_commits": [
      "caf642c25de526229264cab9425e7c9979f3509b",
      "caf642c25de526229264cab9425e7c9979f3509b"
    ],
    "patch_url": "https://github.com/vim/vim/commit/caf642c25de526229264cab9425e7c9979f3509b.patch",
    "fix_commit_details": {
      "sha": "caf642c25de526229264cab9425e7c9979f3509b",
      "commit_date": "2023-04-29T20:38:04Z",
      "author": {
        "login": "brammool",
        "type": "User",
        "stats": {
          "total_commits": 16567,
          "average_weekly_commits": 15.411162790697674,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 874
        }
      },
      "commit_message": {
        "title": "patch 9.0.1499: using uninitialized memory with fuzzy matching",
        "length": 188,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 51,
        "additions": 40,
        "deletions": 11
      },
      "files": [
        {
          "filename": "src/quickfix.c",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -6058,6 +6058,8 @@ vgr_match_buflines(\n     long\tlnum;\n     colnr_T\tcol;\n     int\t\tpat_len = (int)STRLEN(spat);\n+    if (pat_len > MAX_FUZZY_MATCHES)\n+\tpat_len = MAX_FUZZY_MATCHES;\n \n     for (lnum = 1; lnum <= buf->b_ml.ml_line_count && *tomatch > 0; ++lnum)\n     {\n@@ -6066,7 +6068,7 @@ vgr_match_buflines(\n \t{\n \t    // Regular expression match\n \t    while (vim_regexec_multi(regmatch, curwin, buf, lnum,\n-\t\t\tcol, NULL) > 0)\n+\t\t\t\t\t\t\t\tcol, NULL) > 0)\n \t    {\n \t\t// Pass the buffer number so that it gets used even for a\n \t\t// dummy buffer, unless duplicate_name is set, then the\n@@ -6112,6 +6114,7 @@ vgr_match_buflines(\n \t    int_u   sz = ARRAY_LENGTH(matches);\n \n \t    // Fuzzy string match\n+\t    CLEAR_FIELD(matches);\n \t    while (fuzzy_match(str + col, spat, FALSE, &score, matches, sz) > 0)\n \t    {\n \t\t// Pass the buffer number so that it gets used even for a"
        },
        {
          "filename": "src/search.c",
          "status": "modified",
          "additions": 7,
          "deletions": 10,
          "patch": "@@ -4422,14 +4422,14 @@ fuzzy_match_recursive(\n \t// Found match\n \tif (vim_tolower(c1) == vim_tolower(c2))\n \t{\n-\t    int_u\trecursiveMatches[MAX_FUZZY_MATCHES];\n-\t    int\t\trecursiveScore = 0;\n-\t    char_u\t*next_char;\n-\n \t    // Supplied matches buffer was too short\n \t    if (nextMatch >= maxMatches)\n \t\treturn 0;\n \n+\t    int\t\trecursiveScore = 0;\n+\t    int_u\trecursiveMatches[MAX_FUZZY_MATCHES];\n+\t    CLEAR_FIELD(recursiveMatches);\n+\n \t    // \"Copy-on-Write\" srcMatches into matches\n \t    if (first_match && srcMatches)\n \t    {\n@@ -4438,10 +4438,7 @@ fuzzy_match_recursive(\n \t    }\n \n \t    // Recursive call that \"skips\" this match\n-\t    if (has_mbyte)\n-\t\tnext_char = str + (*mb_ptr2len)(str);\n-\t    else\n-\t\tnext_char = str + 1;\n+\t    char_u *next_char = str + (has_mbyte ? (*mb_ptr2len)(str) : 1);\n \t    if (fuzzy_match_recursive(fuzpat, next_char, strIdx + 1,\n \t\t\t&recursiveScore, strBegin, strLen, matches,\n \t\t\trecursiveMatches,\n@@ -4506,8 +4503,8 @@ fuzzy_match_recursive(\n  * Uses char_u for match indices. Therefore patterns are limited to\n  * MAX_FUZZY_MATCHES characters.\n  *\n- * Returns TRUE if 'pat_arg' matches 'str'. Also returns the match score in\n- * 'outScore' and the matching character positions in 'matches'.\n+ * Returns TRUE if \"pat_arg\" matches \"str\". Also returns the match score in\n+ * \"outScore\" and the matching character positions in \"matches\".\n  */\n     int\n fuzzy_match("
        },
        {
          "filename": "src/testdir/test_matchfuzzy.vim",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n \n source shared.vim\n source check.vim\n+source term_util.vim\n \n \" Test for matchfuzzy()\n func Test_matchfuzzy()\n@@ -253,4 +254,30 @@ func Test_matchfuzzy_limit()\n   call assert_equal([{'id': 5, 'val': 'crayon'}], l->matchfuzzy('c', #{key: 'val', limit: 1}))\n endfunc\n \n+\" This was using uninitialized memory\n+func Test_matchfuzzy_initialized()\n+  CheckRunVimInTerminal\n+\n+  \" This can take a very long time (esp. when using valgrind).  Run in a\n+  \" separate Vim instance and kill it after two seconds.  We only check for\n+  \" memory errors.\n+  let lines =<< trim END\n+      lvimgrep [ss [fg*\n+  END\n+  call writefile(lines, 'XTest_matchfuzzy', 'D')\n+\n+  let buf = RunVimInTerminal('-u NONE -X -Z', {})\n+  call term_sendkeys(buf, \":source XTest_matchfuzzy\\n\")\n+  call TermWait(buf, 2000)\n+\n+  let job = term_getjob(buf)\n+  if job_status(job) == \"run\"\n+    call job_stop(job, \"int\")\n+    call TermWait(buf, 50)\n+  endif\n+\n+  \" clean up\n+  call StopVimInTerminal(buf)\n+endfunc\n+\n \" vim: shiftwidth=2 sts=2 expandtab"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -695,6 +695,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    1499,\n /**/\n     1498,\n /**/"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1aefe1de0b20fe4966863e07efa14b6aa87323ee",
            "date": "2025-01-14T16:29:42Z",
            "author_login": "yegappan"
          },
          {
            "sha": "1ac53b84ada3a992f320566737e66fa00d48611f",
            "date": "2025-01-14T16:25:02Z",
            "author_login": "chrisbra"
          },
          {
            "sha": "57f0119358ed7f060d5020309b9043463121435f",
            "date": "2025-01-14T16:21:42Z",
            "author_login": "h-east"
          },
          {
            "sha": "045564d0a73218594691953c0c8bf2035e1e176e",
            "date": "2025-01-14T16:15:59Z",
            "author_login": "habamax"
          },
          {
            "sha": "6289f9159102e0855bedc566636b5e7ca6ced72c",
            "date": "2025-01-14T16:13:36Z",
            "author_login": "yegappan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-823",
    "description": "Use of Out-of-range Pointer Offset in GitHub repository vim/vim prior to 9.0.1499.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-29T22:15:09.243",
    "last_modified": "2024-11-21T07:58:35.860",
    "fix_date": "2023-04-29T20:38:04Z"
  },
  "references": [
    {
      "url": "https://github.com/vim/vim/commit/caf642c25de526229264cab9425e7c9979f3509b",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/3451be4c-91c8-4d08-926b-cbff7396f425",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LOJP6M7ZTKZQYOGVOOAY6TIE6ACBJL55/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PCLJN4QINITA3ZASKLEJ64C5TFNKELMO/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213844",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213845",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/vim/vim/commit/caf642c25de526229264cab9425e7c9979f3509b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/3451be4c-91c8-4d08-926b-cbff7396f425",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LOJP6M7ZTKZQYOGVOOAY6TIE6ACBJL55/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PCLJN4QINITA3ZASKLEJ64C5TFNKELMO/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213844",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213845",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.859250",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}