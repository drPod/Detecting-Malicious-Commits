{
  "cve_id": "CVE-2023-24814",
  "github_data": {
    "repository": "TYPO3/typo3",
    "fix_commit": "0005a6fd86ab97eff8bf2e3a5828bf0e7cb6263a",
    "related_commits": [
      "0005a6fd86ab97eff8bf2e3a5828bf0e7cb6263a",
      "0005a6fd86ab97eff8bf2e3a5828bf0e7cb6263a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0005a6fd86ab97eff8bf2e3a5828bf0e7cb6263a",
      "commit_date": "2023-02-07T09:25:07Z",
      "author": {
        "login": "bnf",
        "type": "User",
        "stats": {
          "total_commits": 534,
          "average_weekly_commits": 0.4793536804308797,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 171
        }
      },
      "commit_message": {
        "title": "[SECURITY] Prevent XSS due to wrong PATH_INFO evaluation",
        "length": 2310,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 174,
        "additions": 55,
        "deletions": 119
      },
      "files": [
        {
          "filename": "typo3/sysext/core/Classes/Core/SystemEnvironmentBuilder.php",
          "status": "modified",
          "additions": 5,
          "deletions": 11,
          "patch": "@@ -255,23 +255,17 @@ protected static function getPathThisScript(bool $isCli)\n     }\n \n     /**\n-     * Calculate path to entry script if not in cli mode.\n-     *\n-     * Depending on the environment, the script path is found in different $_SERVER variables.\n+     * Return path to entry script if not in cli mode.\n      *\n      * @return string Absolute path to entry script\n      */\n     protected static function getPathThisScriptNonCli()\n     {\n-        $isCgi = Environment::isRunningOnCgiServer();\n-        if ($isCgi && Environment::usesCgiFixPathInfo()) {\n-            return $_SERVER['SCRIPT_FILENAME'];\n-        }\n-        $cgiPath = $_SERVER['ORIG_PATH_TRANSLATED'] ?? $_SERVER['PATH_TRANSLATED'] ?? '';\n-        if ($cgiPath && $isCgi) {\n-            return $cgiPath;\n+        if (Environment::isRunningOnCgiServer() && !Environment::usesCgiFixPathInfo()) {\n+            throw new \\Exception('TYPO3 does only support being used with cgi.fix_pathinfo=1 on CGI server APIs.', 1675108421);\n         }\n-        return $_SERVER['ORIG_SCRIPT_FILENAME'] ?? $_SERVER['SCRIPT_FILENAME'];\n+\n+        return $_SERVER['SCRIPT_FILENAME'];\n     }\n \n     /**"
        },
        {
          "filename": "typo3/sysext/core/Classes/Http/NormalizedParams.php",
          "status": "modified",
          "additions": 12,
          "deletions": 16,
          "patch": "@@ -311,12 +311,13 @@ public function __construct(array $serverParams, array $configuration, string $p\n         $requestHost = $this->requestHost = ($isHttps ? 'https://' : 'http://') . $httpHost;\n         $requestHostOnly = $this->requestHostOnly = self::determineRequestHostOnly($httpHost);\n         $this->requestPort = self::determineRequestPort($httpHost, $requestHostOnly);\n-        $scriptName = $this->scriptName = self::determineScriptName(\n+        $scriptNameOnFileSystem = self::determineScriptName(\n             $serverParams,\n             $configuration,\n             $isHttps,\n             $isBehindReverseProxy\n         );\n+        $scriptName = $this->scriptName = self::encodeFileSystemPathComponentForUrlPath($scriptNameOnFileSystem);\n         $requestUri = $this->requestUri = self::determineRequestUri(\n             $serverParams,\n             $configuration,\n@@ -329,7 +330,7 @@ public function __construct(array $serverParams, array $configuration, string $p\n         $requestDir = $this->requestDir = $requestHost . GeneralUtility::dirname($scriptName) . '/';\n         $this->remoteAddress = self::determineRemoteAddress($serverParams, $configuration, $isBehindReverseProxy);\n         $scriptFilename = $this->scriptFilename = $pathThisScript;\n-        $this->documentRoot = self::determineDocumentRoot($scriptName, $scriptFilename);\n+        $this->documentRoot = self::determineDocumentRoot($scriptNameOnFileSystem, $scriptFilename);\n         $siteUrl = $this->siteUrl = self::determineSiteUrl($requestDir, $pathThisScript, $pathSite . '/');\n         $this->sitePath = self::determineSitePath($requestHost, $siteUrl);\n         $this->siteScript = self::determineSiteScript($requestUrl, $siteUrl);\n@@ -344,6 +345,11 @@ public function __construct(array $serverParams, array $configuration, string $p\n         $this->queryString = $serverParams['QUERY_STRING'] ?? '';\n     }\n \n+    private static function encodeFileSystemPathComponentForUrlPath(string $path): string\n+    {\n+        return implode('/', array_map('rawurlencode', explode('/', $path)));\n+    }\n+\n     /**\n      * @return string Sanitized HTTP_HOST value host[:port]\n      */\n@@ -632,17 +638,7 @@ protected static function determineScriptName(\n         bool $isHttps,\n         bool $isBehindReverseProxy\n     ): string {\n-        // see https://forge.typo3.org/issues/89312\n-        // When using a CGI wrapper to dispatch the PHP process `ORIG_SCRIPT_NAME`\n-        // contains the name of the wrapper script (which is most probably outside\n-        // the TYPO3's project root) and leads to invalid prefixes, e.g. resolving\n-        // the `siteUrl` incorrectly as `http://ip10.local/fcgi/` instead of\n-        // actual `http://ip10.local/`\n-        $possiblePathInfo = ($serverParams['ORIG_PATH_INFO'] ?? '') ?: ($serverParams['PATH_INFO'] ?? '');\n-        $possibleScriptName = ($serverParams['ORIG_SCRIPT_NAME'] ?? '') ?: ($serverParams['SCRIPT_NAME'] ?? '');\n-        $scriptName = Environment::isRunningOnCgiServer() && $possiblePathInfo\n-            ? $possiblePathInfo\n-            : $possibleScriptName;\n+        $scriptName = $serverParams['SCRIPT_NAME'] ?? '';\n         if ($isBehindReverseProxy) {\n             // Add a prefix if TYPO3 is behind a proxy: ext-domain.com => int-server.com/prefix\n             if ($isHttps && !empty($configuration['reverseProxyPrefixSSL'])) {\n@@ -778,19 +774,19 @@ protected static function determineRequestPort(string $httpHost, string $httpHos\n     /**\n      * Calculate absolute path to web document root\n      *\n-     * @param string $scriptName Entry script path of URI, without domain and without query parameters, with leading /\n+     * @param string $scriptNameOnFileSystem Entry script path of URI on file system, without domain and without query parameters, with leading /\n      * @param string $scriptFilename Absolute path to entry script on server filesystem\n      * @return string Path to document root with trailing slash\n      */\n-    protected static function determineDocumentRoot(string $scriptName, string $scriptFilename): string\n+    protected static function determineDocumentRoot(string $scriptNameOnFileSystem, string $scriptFilename): string\n     {\n         // Get the web root (it is not the root of the TYPO3 installation)\n         // Some CGI-versions (LA13CGI) and mod-rewrite rules on MODULE versions will deliver a 'wrong'\n         // DOCUMENT_ROOT (according to our description). Further various aliases/mod_rewrite rules can\n         // disturb this as well. Therefore the DOCUMENT_ROOT is always calculated as the SCRIPT_FILENAME\n         // minus the end part shared with SCRIPT_NAME.\n         $webDocRoot = '';\n-        $scriptNameArray = explode('/', strrev($scriptName));\n+        $scriptNameArray = explode('/', strrev($scriptNameOnFileSystem));\n         $scriptFilenameArray = explode('/', strrev($scriptFilename));\n         $path = [];\n         foreach ($scriptNameArray as $segmentNumber => $segment) {"
        },
        {
          "filename": "typo3/sysext/core/Classes/Utility/GeneralUtility.php",
          "status": "modified",
          "additions": 12,
          "deletions": 16,
          "patch": "@@ -2310,10 +2310,7 @@ public static function getIndpEnv($getEnvName)\n         $retVal = '';\n         switch ((string)$getEnvName) {\n             case 'SCRIPT_NAME':\n-                $retVal = Environment::isRunningOnCgiServer()\n-                    && (($_SERVER['ORIG_PATH_INFO'] ?? false) ?: ($_SERVER['PATH_INFO'] ?? false))\n-                        ? (($_SERVER['ORIG_PATH_INFO'] ?? '') ?: ($_SERVER['PATH_INFO'] ?? ''))\n-                        : (($_SERVER['ORIG_SCRIPT_NAME'] ?? '') ?: ($_SERVER['SCRIPT_NAME'] ?? ''));\n+                $retVal = $_SERVER['SCRIPT_NAME'] ?? '';\n                 // Add a prefix if TYPO3 is behind a proxy: ext-domain.com => int-server.com/prefix\n                 if (self::cmpIP($_SERVER['REMOTE_ADDR'] ?? '', $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxyIP'] ?? '')) {\n                     if (self::getIndpEnv('TYPO3_SSL') && $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxyPrefixSSL']) {\n@@ -2322,6 +2319,7 @@ public static function getIndpEnv($getEnvName)\n                         $retVal = $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxyPrefix'] . $retVal;\n                     }\n                 }\n+                $retVal = self::encodeFileSystemPathComponentForUrlPath($retVal);\n                 break;\n             case 'SCRIPT_FILENAME':\n                 $retVal = Environment::getCurrentScript();\n@@ -2350,17 +2348,7 @@ public static function getIndpEnv($getEnvName)\n                 }\n                 break;\n             case 'PATH_INFO':\n-                // $_SERVER['PATH_INFO'] != $_SERVER['SCRIPT_NAME'] is necessary because some servers (Windows/CGI)\n-                // are seen to set PATH_INFO equal to script_name\n-                // Further, there must be at least one '/' in the path - else the PATH_INFO value does not make sense.\n-                // IF 'PATH_INFO' never works for our purpose in TYPO3 with CGI-servers,\n-                // then 'PHP_SAPI=='cgi'' might be a better check.\n-                // Right now strcmp($_SERVER['PATH_INFO'], GeneralUtility::getIndpEnv('SCRIPT_NAME')) will always\n-                // return FALSE for CGI-versions, but that is only as long as SCRIPT_NAME is set equal to PATH_INFO\n-                // because of PHP_SAPI=='cgi' (see above)\n-                if (!Environment::isRunningOnCgiServer()) {\n-                    $retVal = $_SERVER['PATH_INFO'] ?? '';\n-                }\n+                $retVal = $_SERVER['PATH_INFO'] ?? '';\n                 break;\n             case 'TYPO3_REV_PROXY':\n                 $retVal = self::cmpIP($_SERVER['REMOTE_ADDR'] ?? '', $GLOBALS['TYPO3_CONF_VARS']['SYS']['reverseProxyIP']);\n@@ -2433,7 +2421,10 @@ public static function getIndpEnv($getEnvName)\n                 // Some CGI-versions (LA13CGI) and mod-rewrite rules on MODULE versions will deliver a 'wrong' DOCUMENT_ROOT (according to our description). Further various aliases/mod_rewrite rules can disturb this as well.\n                 // Therefore the DOCUMENT_ROOT is now always calculated as the SCRIPT_FILENAME minus the end part shared with SCRIPT_NAME.\n                 $SFN = self::getIndpEnv('SCRIPT_FILENAME');\n-                $SN_A = explode('/', strrev(self::getIndpEnv('SCRIPT_NAME')));\n+                // Use rawurldecode to reverse the result of self::encodeFileSystemPathComponentForUrlPath()\n+                // which has been applied to getIndpEnv(SCRIPT_NAME) for web URI usage.\n+                // We compare with a file system path (SCRIPT_FILENAME) in here and therefore need to undo the encoding.\n+                $SN_A = array_map('rawurldecode', explode('/', strrev(self::getIndpEnv('SCRIPT_NAME'))));\n                 $SFN_A = explode('/', strrev($SFN));\n                 $acc = [];\n                 foreach ($SN_A as $kk => $vv) {\n@@ -2558,6 +2549,11 @@ protected static function webserverUsesHttps()\n         return !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off';\n     }\n \n+    protected static function encodeFileSystemPathComponentForUrlPath(string $path): string\n+    {\n+        return implode('/', array_map('rawurlencode', explode('/', $path)));\n+    }\n+\n     /*************************\n      *\n      * TYPO3 SPECIFIC FUNCTIONS"
        },
        {
          "filename": "typo3/sysext/core/Tests/Acceptance/Support/Extension/ApplicationEnvironment.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -145,7 +145,6 @@ private function createServerRequest(string $url, string $method = 'GET'): Serve\n             'SCRIPT_NAME' => '/typo3/index.php',\n             'PHP_SELF' => '/typo3/index.php',\n             'SCRIPT_FILENAME' => $docRoot . '/index.php',\n-            'PATH_TRANSLATED' => $docRoot . '/index.php',\n             'QUERY_STRING' => $requestUrlParts['query'] ?? '',\n             'REQUEST_URI' => $requestUrlParts['path'] . (isset($requestUrlParts['query']) ? '?' . $requestUrlParts['query'] : ''),\n             'REQUEST_METHOD' => $method,"
        },
        {
          "filename": "typo3/sysext/core/Tests/Unit/Http/NormalizedParamsTest.php",
          "status": "modified",
          "additions": 18,
          "deletions": 67,
          "patch": "@@ -360,77 +360,19 @@ public function getScriptNameReturnsExpectedValueDataProvider(): array\n                 [],\n                 '',\n             ],\n-            'use ORIG_SCRIPT_NAME if ORIG_PATH_INFO is set but empty' => [\n-                [\n-                    'ORIG_PATH_INFO' => '',\n-                    'PATH_INFO' => '',\n-                    'ORIG_SCRIPT_NAME' => '/orig/script/name.php',\n-                    'SCRIPT_NAME' => '/script/name.php',\n-                ],\n-                [],\n-                '/orig/script/name.php',\n-            ],\n-            'use ORIG_SCRIPT_NAME if PATH_INFO is set but empty' => [\n-                [\n-                    'PATH_INFO' => '',\n-                    'ORIG_SCRIPT_NAME' => '/orig/script/name.php',\n-                    'SCRIPT_NAME' => '/script/name.php',\n-                ],\n-                [],\n-                '/orig/script/name.php',\n-            ],\n-            'use SCRIPT_NAME if ORIG_PATH_INFO is set but empty' => [\n-                [\n-                    'ORIG_PATH_INFO' => '',\n-                    'PATH_INFO' => '',\n-                    'ORIG_SCRIPT_NAME' => '',\n-                    'SCRIPT_NAME' => '/script/name.php',\n-                ],\n-                [],\n-                '/script/name.php',\n-            ],\n-            'use SCRIPT_NAME if PATH_INFO is set but empty' => [\n-                [\n-                    'PATH_INFO' => '',\n-                    'ORIG_SCRIPT_NAME' => '',\n-                    'SCRIPT_NAME' => '/script/name.php',\n-                ],\n-                [],\n-                '/script/name.php',\n-            ],\n-            'use SCRIPT_NAME if ORIG_PATH_INFO is set' => [\n-                [\n-                    'ORIG_PATH_INFO' => '/foo/bar',\n-                    'PATH_INFO' => '',\n-                    'ORIG_SCRIPT_NAME' => '',\n-                    'SCRIPT_NAME' => '/script/name.php',\n-                ],\n-                [],\n-                '/script/name.php',\n-            ],\n-            'use SCRIPT_NAME if PATH_INFO is set' => [\n+            'use SCRIPT_NAME' => [\n                 [\n-                    'PATH_INFO' => '/foo/bar',\n-                    'ORIG_SCRIPT_NAME' => '',\n                     'SCRIPT_NAME' => '/script/name.php',\n                 ],\n                 [],\n                 '/script/name.php',\n             ],\n-            'use ORIG_SCRIPT_NAME' => [\n-                [\n-                    'ORIG_SCRIPT_NAME' => '/orig/script/name.php',\n-                    'SCRIPT_NAME' => '/script/name.php',\n-                ],\n-                [],\n-                '/orig/script/name.php',\n-            ],\n-            'use SCRIPT_NAME' => [\n+            'apply URL encoding to SCRIPT_NAME' => [\n                 [\n-                    'SCRIPT_NAME' => '/script/name.php',\n+                    'SCRIPT_NAME' => '/test:site/script/name.php',\n                 ],\n                 [],\n-                '/script/name.php',\n+                '/test%3Asite/script/name.php',\n             ],\n             'add proxy ssl prefix' => [\n                 [\n@@ -497,6 +439,14 @@ public function getRequestUriReturnsExpectedValueDataProvider(): array\n                 [],\n                 '/typo3/index.php?parameter=foo/bar&id=42',\n             ],\n+            'use query string and script name in special subdirectory if REQUEST_URI is not set' => [\n+                [\n+                    'QUERY_STRING' => 'parameter=foo/bar&id=42',\n+                    'SCRIPT_NAME' => '/sub:dir/typo3/index.php',\n+                ],\n+                [],\n+                '/sub%3Adir/typo3/index.php?parameter=foo/bar&id=42',\n+            ],\n             'prefix with proxy prefix with ssl if using REQUEST_URI' => [\n                 [\n                     'HTTP_HOST' => 'www.domain.com',\n@@ -905,7 +855,6 @@ public function getSiteUrlReturnsExpectedUrl(): void\n         $serverParams = [\n             'SCRIPT_NAME' => '/typo3/index.php',\n             'HTTP_HOST' => 'www.domain.com',\n-            'PATH_INFO' => '/typo3/index.php',\n         ];\n         $pathThisScript = '/var/www/myInstance/Web/typo3/index.php';\n         $pathSite = '/var/www/myInstance/Web';\n@@ -978,7 +927,8 @@ public function getSiteScriptReturnsExpectedPathDataProvider(): array\n         return [\n             'not in a sub directory' => [\n                 [\n-                    'SCRIPT_NAME' => '/typo3/index.php?id=42&foo=bar',\n+                    'SCRIPT_NAME' => '/typo3/index.php',\n+                    'REQUEST_URI' => '/typo3/index.php?id=42&foo=bar',\n                     'HTTP_HOST' => 'www.domain.com',\n                 ],\n                 '/var/www/myInstance/Web/typo3/index.php',\n@@ -987,7 +937,8 @@ public function getSiteScriptReturnsExpectedPathDataProvider(): array\n             ],\n             'in a sub directory' => [\n                 [\n-                    'SCRIPT_NAME' => '/some/sub/dir/typo3/index.php?id=42&foo=bar',\n+                    'SCRIPT_NAME' => '/some/sub/dir/typo3/index.php',\n+                    'REQUEST_URI' => '/some/sub/dir/typo3/index.php?id=42&foo=bar',\n                     'HTTP_HOST' => 'www.domain.com',\n                 ],\n                 '/var/www/myInstance/Web/typo3/index.php',\n@@ -1023,9 +974,9 @@ public function getSiteScriptReturnsExpectedPath(array $serverParams, string $pa\n     public function getPathInfoReturnsExpectedValue(): void\n     {\n         $serverParams = [\n-            'PATH_INFO' => '/typo3/index.php',\n+            'PATH_INFO' => '/foo/bar',\n         ];\n-        $expected = '/typo3/index.php';\n+        $expected = '/foo/bar';\n         $serverRequestParameters = new NormalizedParams($serverParams, [], '', '');\n         self::assertSame($expected, $serverRequestParameters->getPathInfo());\n     }"
        },
        {
          "filename": "typo3/sysext/core/Tests/Unit/Log/Processor/WebProcessorTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -30,9 +30,8 @@ class WebProcessorTest extends UnitTestCase\n      */\n     public function webProcessorAddsWebDataToLogRecord(): void\n     {\n-        $_SERVER['PATH_INFO'] = '';\n         $_SERVER['REQUEST_URI'] = '';\n-        $_SERVER['ORIG_SCRIPT_NAME'] = '';\n+        $_SERVER['SCRIPT_NAME'] = '';\n         $_SERVER['REMOTE_ADDR'] = '';\n         $_SERVER['QUERY_STRING'] = '';\n         $_SERVER['SSL_SESSION_ID'] = '';"
        },
        {
          "filename": "typo3/sysext/felogin/Tests/Unit/Validation/RedirectUrlValidatorTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -64,7 +64,7 @@ protected function setUp(): void\n      */\n     protected function setUpFakeSitePathAndHost(): void\n     {\n-        $_SERVER['ORIG_PATH_INFO'] = $_SERVER['PATH_INFO'] = $_SERVER['ORIG_SCRIPT_NAME'] = $_SERVER['SCRIPT_NAME'] = $this->testSitePath . 'index.php';\n+        $_SERVER['SCRIPT_NAME'] = $this->testSitePath . 'index.php';\n         $_SERVER['HTTP_HOST'] = $this->testHostName;\n \n         $request = ServerRequestFactory::fromGlobals();"
        },
        {
          "filename": "typo3/sysext/frontend/Classes/Controller/TypoScriptFrontendController.php",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -2423,23 +2423,24 @@ protected function setAbsRefPrefix()\n         if (!$this->absRefPrefix) {\n             return;\n         }\n+        $encodedAbsRefPrefix = htmlspecialchars($this->absRefPrefix, ENT_QUOTES | ENT_HTML5);\n         $search = [\n             '\"_assets/',\n             '\"typo3temp/',\n             '\"' . PathUtility::stripPathSitePrefix(Environment::getExtensionsPath()) . '/',\n             '\"' . PathUtility::stripPathSitePrefix(Environment::getFrameworkBasePath()) . '/',\n         ];\n         $replace = [\n-            '\"' . $this->absRefPrefix . '_assets/',\n-            '\"' . $this->absRefPrefix . 'typo3temp/',\n-            '\"' . $this->absRefPrefix . PathUtility::stripPathSitePrefix(Environment::getExtensionsPath()) . '/',\n-            '\"' . $this->absRefPrefix . PathUtility::stripPathSitePrefix(Environment::getFrameworkBasePath()) . '/',\n+            '\"' . $encodedAbsRefPrefix . '_assets/',\n+            '\"' . $encodedAbsRefPrefix . 'typo3temp/',\n+            '\"' . $encodedAbsRefPrefix . PathUtility::stripPathSitePrefix(Environment::getExtensionsPath()) . '/',\n+            '\"' . $encodedAbsRefPrefix . PathUtility::stripPathSitePrefix(Environment::getFrameworkBasePath()) . '/',\n         ];\n         // Process additional directories\n         $directories = GeneralUtility::trimExplode(',', $GLOBALS['TYPO3_CONF_VARS']['FE']['additionalAbsRefPrefixDirectories'], true);\n         foreach ($directories as $directory) {\n             $search[] = '\"' . $directory;\n-            $replace[] = '\"' . $this->absRefPrefix . $directory;\n+            $replace[] = '\"' . $encodedAbsRefPrefix . $directory;\n         }\n         $this->content = str_replace(\n             $search,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 8,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ff77e4fc77e6f94cce92301c4a48276dad924121",
            "date": "2025-01-20T13:29:31Z",
            "author_login": "alexanderschnitzler"
          },
          {
            "sha": "5bc80824b8df44b41358321cdcda49c521894396",
            "date": "2025-01-23T11:51:37Z",
            "author_login": "andreaskienast"
          },
          {
            "sha": "cae183517c0278f33119076a80fcae606c824df5",
            "date": "2025-01-24T13:06:15Z",
            "author_login": "fe-hicking"
          },
          {
            "sha": "1e6844171f4c51b33cb85634bd30c3ba4787e2a1",
            "date": "2025-01-22T15:15:24Z",
            "author_login": "andreaskienast"
          },
          {
            "sha": "baa3371c43944a233ae3e286cc5556f2ce72cb4b",
            "date": "2024-06-11T11:20:54Z",
            "author_login": "cweiske"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:H/A:L",
    "cwe_id": "CWE-79",
    "description": "TYPO3 is a free and open source Content Management Framework released under the GNU General Public License. In affected versions the TYPO3 core component `GeneralUtility::getIndpEnv()` uses the unfiltered server environment variable `PATH_INFO`, which allows attackers to inject malicious content. In combination with the TypoScript setting `config.absRefPrefix=auto`, attackers can inject malicious HTML code to pages that have not been rendered and cached, yet. As a result, injected values would be cached and delivered to other website visitors (persisted cross-site scripting). Individual code which relies on the resolved value of `GeneralUtility::getIndpEnv('SCRIPT_NAME')` and corresponding usages (as shown below) are vulnerable as well. Additional investigations confirmed that at least Apache web server deployments using CGI (FPM, FCGI/FastCGI, and similar) are affected. However, there still might be the risk that other scenarios like nginx, IIS, or Apache/mod_php are vulnerable. The usage of server environment variable `PATH_INFO` has been removed from corresponding processings in `GeneralUtility::getIndpEnv()`. Besides that, the public property `TypoScriptFrontendController::$absRefPrefix` is encoded for both being used as a URI component and for being used as a prefix in an HTML context. This mitigates the cross-site scripting vulnerability. Users are advised to update to TYPO3 versions 8.7.51 ELTS, 9.5.40 ELTS, 10.4.35 LTS, 11.5.23 LTS and 12.2.0 which fix this problem. For users who are unable to patch in a timely manner the TypoScript setting `config.absRefPrefix` should at least be set to a static path value, instead of using auto - e.g. `config.absRefPrefix=/`. This workaround **does not fix all aspects of the vulnerability**, and is just considered to be an intermediate mitigation to the most prominent manifestation.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-07T19:15:09.473",
    "last_modified": "2024-11-21T07:48:26.880",
    "fix_date": "2023-02-07T09:25:07Z"
  },
  "references": [
    {
      "url": "https://docs.typo3.org/m/typo3/reference-typoscript/main/en-us/Setup/Config/Index.html#absrefprefix",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/blob/v11.5.22/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2481-L2484",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/blob/v11.5.22/typo3/sysext/frontend/Classes/Controller/TypoScriptFrontendController.php#L2547-L2549",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/commit/0005a6fd86ab97eff8bf2e3a5828bf0e7cb6263a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-r4f8-f93x-5qh3",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-001",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-psa-2023-001",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.typo3.org/m/typo3/reference-typoscript/main/en-us/Setup/Config/Index.html#absrefprefix",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/blob/v11.5.22/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2481-L2484",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/blob/v11.5.22/typo3/sysext/frontend/Classes/Controller/TypoScriptFrontendController.php#L2547-L2549",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/commit/0005a6fd86ab97eff8bf2e3a5828bf0e7cb6263a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-r4f8-f93x-5qh3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-001",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-psa-2023-001",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:03.999419",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "typo3",
    "owner": "TYPO3",
    "created_at": "2011-03-02T10:02:23Z",
    "updated_at": "2025-01-26T02:06:22Z",
    "pushed_at": "2025-01-25T18:54:20Z",
    "size": 598562,
    "stars": 1073,
    "forks": 674,
    "open_issues": 5,
    "watchers": 1073,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 34406950,
      "TypeScript": 2498657,
      "HTML": 1956716,
      "CSS": 574596,
      "SCSS": 465521,
      "JavaScript": 415265,
      "Shell": 94213,
      "XSLT": 6781,
      "Batchfile": 412
    },
    "commit_activity": {
      "total_commits_last_year": 2004,
      "avg_commits_per_week": 38.53846153846154,
      "days_active_last_year": 329
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T08:19:34.176956"
  }
}