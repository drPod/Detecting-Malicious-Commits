{
  "cve_id": "CVE-2023-24817",
  "github_data": {
    "repository": "RIOT-OS/RIOT",
    "fix_commit": "34dc1757f5621be48e226cfebb2f4c63505b5360",
    "related_commits": [
      "34dc1757f5621be48e226cfebb2f4c63505b5360",
      "34dc1757f5621be48e226cfebb2f4c63505b5360"
    ],
    "patch_url": "https://github.com/RIOT-OS/RIOT/commit/34dc1757f5621be48e226cfebb2f4c63505b5360.patch",
    "fix_commit_details": {
      "sha": "34dc1757f5621be48e226cfebb2f4c63505b5360",
      "commit_date": "2023-04-21T09:52:40Z",
      "author": {
        "login": "kaspar030",
        "type": "User",
        "stats": {
          "total_commits": 2695,
          "average_weekly_commits": 3.6029411764705883,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 393
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-xjgw-7638-29g5",
        "length": 110,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 35,
        "additions": 32,
        "deletions": 3
      },
      "files": [
        {
          "filename": "sys/net/gnrc/routing/rpl/srh/gnrc_rpl_srh.c",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -74,6 +74,13 @@ int gnrc_rpl_srh_process(ipv6_hdr_t *ipv6, gnrc_rpl_srh_t *rh, void **err_ptr)\n     uint8_t current_pos, pref_elided, addr_len, compri_addr_len;\n     const uint8_t new_seg_left = rh->seg_left - 1;\n \n+    if ((rh->len * 8) < (GNRC_RPL_SRH_PADDING(rh->pad_resv) +\n+                         (16 - GNRC_RPL_SRH_COMPRE(rh->compr)))) {\n+        DEBUG(\"RPL SRH: inconsistent header received\\n\");\n+        *err_ptr = &rh->len;\n+        return GNRC_IPV6_EXT_RH_ERROR;\n+    }\n+\n     assert(rh->seg_left > 0);\n     num_addr = (((rh->len * 8) - GNRC_RPL_SRH_PADDING(rh->pad_resv) -\n                  (16 - GNRC_RPL_SRH_COMPRE(rh->compr))) /"
        },
        {
          "filename": "tests/gnrc_rpl_srh/main.c",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -120,6 +120,27 @@ static void test_rpl_srh_route_multicast(void)\n     TEST_ASSERT_NULL(err_ptr);\n }\n \n+static void test_rpl_srh_inconsistent_hdr(void)\n+{\n+    static const ipv6_addr_t dst = IPV6_DST;\n+    gnrc_rpl_srh_t srh;\n+    void *err_ptr;\n+    int res;\n+\n+    memset(&srh, 0, sizeof(srh));\n+    memcpy(&hdr.dst, &dst, sizeof(hdr.dst));\n+    srh.nh = 128U;\n+    srh.len = 0U;\n+    srh.type = 3U;\n+    srh.seg_left = 220U;\n+    srh.compr = 0xc0;\n+    srh.pad_resv = 0xf0;\n+\n+    res = gnrc_rpl_srh_process(&hdr, &srh, &err_ptr);\n+    TEST_ASSERT_EQUAL_INT(res, GNRC_IPV6_EXT_RH_ERROR);\n+    TEST_ASSERT((&srh.len) == err_ptr);\n+}\n+\n static void test_rpl_srh_too_many_seg_left(void)\n {\n     static const ipv6_addr_t a1 = IPV6_ADDR1;\n@@ -239,6 +260,7 @@ static void run_unittests(void)\n     EMB_UNIT_TESTFIXTURES(fixtures) {\n         new_TestFixture(test_rpl_srh_dst_multicast),\n         new_TestFixture(test_rpl_srh_route_multicast),\n+        new_TestFixture(test_rpl_srh_inconsistent_hdr),\n         new_TestFixture(test_rpl_srh_too_many_seg_left),\n         new_TestFixture(test_rpl_srh_nexthop_no_prefix_elided),\n         new_TestFixture(test_rpl_srh_nexthop_prefix_elided),"
        },
        {
          "filename": "tests/gnrc_rpl_srh/tests-as-root/01-run.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -167,7 +167,7 @@ def test_wrong_type(child, iface, hw_dst, ll_dst, ll_src):\n     pktbuf_empty(child)\n \n \n-def test_seg_left_gt_len_addresses(child, iface, hw_dst, ll_dst, ll_src):\n+def test_inconsistent_header(child, iface, hw_dst, ll_dst, ll_src):\n     # send routing header with no (0) addresses but segleft set to a value\n     # larger than 0\n     p = srp1(Ether(dst=hw_dst) / IPv6(dst=ll_dst, src=ll_src) /\n@@ -176,7 +176,7 @@ def test_seg_left_gt_len_addresses(child, iface, hw_dst, ll_dst, ll_src):\n     assert(p is not None)\n     assert(ICMPv6ParamProblem in p)\n     assert(p[ICMPv6ParamProblem].code == 0)     # erroneous header field encountered\n-    assert(p[ICMPv6ParamProblem].ptr == 43)     # segleft field\n+    assert(p[ICMPv6ParamProblem].ptr == 41)     # len field\n     pktbuf_empty(child)\n \n \n@@ -348,7 +348,7 @@ def run(func):\n                 raise e\n \n     run(test_wrong_type)\n-    run(test_seg_left_gt_len_addresses)\n+    run(test_inconsistent_header)\n     run(test_multicast_dst)\n     run(test_multicast_addr)\n     run(test_multiple_addrs_of_mine_uncomp)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e09a800978680c13327dd46de6de774314a0c588",
            "date": "2025-01-14T11:39:47Z",
            "author_login": "Teufelchen1"
          },
          {
            "sha": "6547f144d909aee31c297e5bda7cd84c668f5bec",
            "date": "2025-01-13T18:43:16Z",
            "author_login": "benpicco"
          },
          {
            "sha": "5d7bff869bb6890625da5f8706bb3a8bb5b3eb6e",
            "date": "2025-01-13T17:49:18Z",
            "author_login": "chrysn"
          },
          {
            "sha": "ee5e7943413c4fd66caa8ce30fad101bbd304d7f",
            "date": "2025-01-13T12:33:33Z",
            "author_login": "chrysn"
          },
          {
            "sha": "f1c34a275b427b022d542687cd84e3eb7b55d68e",
            "date": "2025-01-13T12:19:13Z",
            "author_login": "chrysn"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-119",
    "description": "RIOT-OS, an operating system for Internet of Things (IoT) devices, contains a network stack with the ability to process 6LoWPAN frames. Prior to version 2023.04, an attacker can send a crafted frame to the device resulting in an integer underflow and out of bounds access in the packet buffer. Triggering the access at the right time will corrupt other packets or the allocator metadata. Corrupting a pointer will lead to denial of service. This issue is fixed in version 2023.04. As a workaround, disable SRH in the network stack.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-30T16:15:09.607",
    "last_modified": "2024-11-21T07:48:27.277",
    "fix_date": "2023-04-21T09:52:40Z"
  },
  "references": [
    {
      "url": "https://github.com/RIOT-OS/RIOT/commit/34dc1757f5621be48e226cfebb2f4c63505b5360",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/RIOT-OS/RIOT/security/advisories/GHSA-xjgw-7638-29g5",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/RIOT-OS/RIOT/commit/34dc1757f5621be48e226cfebb2f4c63505b5360",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/RIOT-OS/RIOT/security/advisories/GHSA-xjgw-7638-29g5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.271492",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "RIOT",
    "owner": "RIOT-OS",
    "created_at": "2012-12-29T20:38:40Z",
    "updated_at": "2025-01-14T06:52:05Z",
    "pushed_at": "2025-01-14T11:40:02Z",
    "size": 160206,
    "stars": 5384,
    "forks": 2031,
    "open_issues": 770,
    "watchers": 5384,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2015.09-branch",
      "2015.12-branch",
      "2016.04-branch",
      "2016.07-branch",
      "2016.10-branch",
      "2017.01-branch",
      "2017.04-branch",
      "2017.07-branch",
      "2017.10-branch",
      "2018.01-branch",
      "2018.04-branch",
      "2018.07-branch",
      "2018.10-branch",
      "2019.01-branch",
      "2019.04-branch",
      "2019.07-branch",
      "2019.10-branch",
      "2020.01-branch",
      "2020.04-branch",
      "2020.07-branch",
      "2020.10-branch",
      "2021.01-branch",
      "2021.04-branch",
      "2021.07-branch",
      "2021.10-branch",
      "2022.01-branch",
      "2022.04-branch",
      "2022.07-branch",
      "2022.10-branch",
      "2023.01-branch"
    ],
    "languages": {
      "C": 28947421,
      "C++": 953684,
      "Makefile": 807718,
      "Python": 714031,
      "Shell": 28573,
      "Assembly": 22018,
      "Rust": 7113,
      "CMake": 2817,
      "SmPL": 2591,
      "Cadence": 887,
      "Lua": 617,
      "Vim Snippet": 212,
      "RenderScript": 33
    },
    "commit_activity": {
      "total_commits_last_year": 1846,
      "avg_commits_per_week": 35.5,
      "days_active_last_year": 291
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T13:11:26.687231"
  }
}