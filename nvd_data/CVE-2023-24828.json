{
  "cve_id": "CVE-2023-24828",
  "github_data": {
    "repository": "theonedev/onedev",
    "fix_commit": "d67dd9686897fe5e4ab881d749464aa7c06a68e5",
    "related_commits": [
      "d67dd9686897fe5e4ab881d749464aa7c06a68e5",
      "d67dd9686897fe5e4ab881d749464aa7c06a68e5"
    ],
    "patch_url": "https://github.com/theonedev/onedev/commit/d67dd9686897fe5e4ab881d749464aa7c06a68e5.patch",
    "fix_commit_details": {
      "sha": "d67dd9686897fe5e4ab881d749464aa7c06a68e5",
      "commit_date": "2023-02-07T06:12:45Z",
      "author": {
        "login": "robinshine",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix issue #1179 - OneDev should use crypto strong random string for access token and password reset",
        "length": 99,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 251,
        "additions": 118,
        "deletions": 133
      },
      "files": [
        {
          "filename": "server-core/src/main/java/io/onedev/server/git/hook/HookUtils.java",
          "status": "modified",
          "additions": 10,
          "deletions": 12,
          "patch": "@@ -1,26 +1,24 @@\n package io.onedev.server.git.hook;\n \n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.Charset;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.RandomStringUtils;\n-\n import com.google.common.base.Preconditions;\n-\n import io.onedev.commons.utils.FileUtils;\n import io.onedev.commons.utils.StringUtils;\n import io.onedev.server.OneDev;\n import io.onedev.server.ServerConfig;\n import io.onedev.server.entitymanager.SettingManager;\n+import io.onedev.server.util.CryptoUtils;\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class HookUtils {\n \n-\tpublic static final String HOOK_TOKEN = RandomStringUtils.randomAlphanumeric(20); \n+\tpublic static final String HOOK_TOKEN = CryptoUtils.generateSecret(); \n \t\n \tprivate static final String gitReceiveHook;\n \t"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/migration/DataMigrator.java",
          "status": "modified",
          "additions": 16,
          "deletions": 3,
          "patch": "@@ -10,9 +10,9 @@\n import io.onedev.server.markdown.MarkdownManager;\n import io.onedev.server.markdown.MentionParser;\n import io.onedev.server.model.*;\n+import io.onedev.server.util.CryptoUtils;\n import io.onedev.server.util.Pair;\n import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.tuple.Triple;\n import org.dom4j.Element;\n import org.dom4j.Node;\n@@ -2146,7 +2146,7 @@ private void migrate42(File dataDir, Stack<Integer> versions) {\n \t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n \t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n \t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n-\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(40));\n+\t\t\t\t\telement.addElement(\"accessToken\").setText(CryptoUtils.generateSecret());\n \t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\n \t\t\t\t}\n \t\t\t\tdom.writeToFile(file, false);\n@@ -2692,7 +2692,7 @@ private void migrate61(File dataDir, Stack<Integer> versions) {\n \t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\n \t\t\t\t\telement.addElement(\"email\").setText(\"unknown email\");\n \t\t\t\t\telement.addElement(\"alternateEmails\");\n-\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(User.ACCESS_TOKEN_LEN));\n+\t\t\t\t\telement.addElement(\"accessToken\").setText(CryptoUtils.generateSecret());\n \t\t\t\t\telement.addElement(\"userProjectQueries\");\n \t\t\t\t\telement.addElement(\"userIssueQueries\");\n \t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\n@@ -4831,5 +4831,18 @@ private void migrate109(File dataDir, Stack<Integer> versions) {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void migrate110(File dataDir, Stack<Integer> versions) {\n+\t\tvar updateIds = new HashSet<>();\n+\t\tfor (File file: dataDir.listFiles()) {\n+\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n+\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n+\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n+\t\t\t\t\telement.element(\"accessToken\").setText(CryptoUtils.generateSecret());\n+\t\t\t\t}\n+\t\t\t\tdom.writeToFile(file, false);\n+\t\t\t}\n+\t\t}\n+\t}\n \t\n }"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/model/EmailAddress.java",
          "status": "modified",
          "additions": 7,
          "deletions": 15,
          "patch": "@@ -1,24 +1,16 @@\n package io.onedev.server.model;\n \n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n-import javax.persistence.Index;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.onedev.server.util.CryptoUtils;\n+import io.onedev.server.util.facade.EmailAddressFacade;\n+import io.onedev.server.web.editable.annotation.Editable;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.persistence.*;\n import javax.validation.constraints.Email;\n import javax.validation.constraints.NotEmpty;\n \n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-\n-import io.onedev.server.util.facade.EmailAddressFacade;\n-import io.onedev.server.web.editable.annotation.Editable;\n-\n @Editable\n @Entity\n @Table(indexes={@Index(columnList=\"o_owner_id\"), @Index(columnList=\"value\")})\n@@ -35,7 +27,7 @@ public class EmailAddress extends AbstractEntity {\n     private String value;\n     \n     @JsonIgnore\n-    private String verificationCode = RandomStringUtils.randomAlphanumeric(16);\n+    private String verificationCode = CryptoUtils.generateSecret();\n     \n     private boolean primary;\n     "
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/model/User.java",
          "status": "modified",
          "additions": 17,
          "deletions": 37,
          "patch": "@@ -1,41 +1,7 @@\n package io.onedev.server.model;\n \n-import static io.onedev.server.model.User.PROP_ACCESS_TOKEN;\n-import static io.onedev.server.model.User.PROP_FULL_NAME;\n-import static io.onedev.server.model.User.PROP_NAME;\n-import static io.onedev.server.model.User.PROP_SSO_CONNECTOR;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Stack;\n-import java.util.stream.Collectors;\n-\n-import javax.annotation.Nullable;\n-import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.Index;\n-import javax.persistence.Lob;\n-import javax.persistence.OneToMany;\n-import javax.persistence.Table;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.apache.shiro.authc.AuthenticationInfo;\n-import org.apache.shiro.subject.PrincipalCollection;\n-import org.apache.shiro.subject.SimplePrincipalCollection;\n-import org.apache.shiro.subject.Subject;\n-import org.eclipse.jgit.lib.PersonIdent;\n-import org.hibernate.annotations.Cache;\n-import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import javax.validation.constraints.NotEmpty;\n-\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.google.common.base.MoreObjects;\n-\n import edu.emory.mathcs.backport.java.util.Collections;\n import io.onedev.commons.utils.ExplicitException;\n import io.onedev.server.OneDev;\n@@ -51,12 +17,28 @@\n import io.onedev.server.model.support.issue.NamedIssueQuery;\n import io.onedev.server.model.support.pullrequest.NamedPullRequestQuery;\n import io.onedev.server.security.SecurityUtils;\n+import io.onedev.server.util.CryptoUtils;\n import io.onedev.server.util.facade.UserFacade;\n import io.onedev.server.util.validation.annotation.UserName;\n import io.onedev.server.util.watch.QuerySubscriptionSupport;\n import io.onedev.server.util.watch.QueryWatchSupport;\n import io.onedev.server.web.editable.annotation.Editable;\n import io.onedev.server.web.editable.annotation.Password;\n+import org.apache.shiro.authc.AuthenticationInfo;\n+import org.apache.shiro.subject.PrincipalCollection;\n+import org.apache.shiro.subject.SimplePrincipalCollection;\n+import org.apache.shiro.subject.Subject;\n+import org.eclipse.jgit.lib.PersonIdent;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+\n+import javax.annotation.Nullable;\n+import javax.persistence.*;\n+import javax.validation.constraints.NotEmpty;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static io.onedev.server.model.User.*;\n \n @Entity\n @Table(\n@@ -68,8 +50,6 @@ public class User extends AbstractEntity implements AuthenticationInfo {\n \n \tprivate static final long serialVersionUID = 1L;\n \t\n-\tpublic static final int ACCESS_TOKEN_LEN = 40;\n-\t\n \tpublic static final Long UNKNOWN_ID = -2L;\n \t\n \tpublic static final Long SYSTEM_ID = -1L;\n@@ -117,7 +97,7 @@ protected Stack<User> initialValue() {\n \t\n \t@Column(unique=true, nullable=false)\n \t@JsonIgnore\n-\tprivate String accessToken = RandomStringUtils.randomAlphanumeric(ACCESS_TOKEN_LEN);\n+\tprivate String accessToken = CryptoUtils.generateSecret();\n \t\n \t@JsonIgnore\n \t@Lob"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/model/support/WebHook.java",
          "status": "modified",
          "additions": 8,
          "deletions": 10,
          "patch": "@@ -1,21 +1,19 @@\n package io.onedev.server.model.support;\n \n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.validation.constraints.NotEmpty;\n-import javax.validation.constraints.Size;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n-\n import io.onedev.server.event.project.RefUpdated;\n import io.onedev.server.event.project.build.BuildEvent;\n import io.onedev.server.event.project.codecomment.CodeCommentEvent;\n import io.onedev.server.event.project.issue.IssueEvent;\n import io.onedev.server.event.project.pullrequest.PullRequestEvent;\n+import io.onedev.server.util.CryptoUtils;\n import io.onedev.server.web.editable.annotation.Editable;\n \n+import javax.validation.constraints.NotEmpty;\n+import javax.validation.constraints.Size;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n @Editable\n public class WebHook implements Serializable {\n \n@@ -70,7 +68,7 @@ public boolean includes(Object event) {\n \t\n \tprivate List<EventType> eventTypes = new ArrayList<>();\n \t\n-\tprivate String secret = RandomStringUtils.randomAlphanumeric(20);\n+\tprivate String secret = CryptoUtils.generateSecret();\n \n \t@Editable(order=100, description=\"The URL of the server endpoint that will receive the webhook POST requests\")\n \t@NotEmpty"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/util/CryptoUtils.java",
          "status": "modified",
          "additions": 21,
          "deletions": 10,
          "patch": "@@ -1,22 +1,24 @@\n package io.onedev.server.util;\n \n-import java.security.NoSuchAlgorithmException;\n-import java.security.spec.InvalidKeySpecException;\n-import java.security.spec.KeySpec;\n-\n-import javax.crypto.SecretKeyFactory;\n-import javax.crypto.spec.PBEKeySpec;\n-\n+import io.onedev.server.OneDev;\n+import io.onedev.server.entitymanager.SettingManager;\n import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.shiro.crypto.AesCipherService;\n import org.apache.sshd.common.digest.BaseDigest;\n import org.apache.sshd.common.digest.Digest;\n \n-import io.onedev.server.OneDev;\n-import io.onedev.server.entitymanager.SettingManager;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.PBEKeySpec;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n \n public class CryptoUtils {\n-\n+\t\n+\tprivate static final int DEFAULT_SECRET_LEN = 40;\n+\t\n     public static final Digest DIGEST_FORMAT = new BaseDigest(\"MD5\", 512);\n \t\n \tprivate static volatile KeyPair keyPair;\n@@ -40,7 +42,16 @@ public static byte[] getCipherKey() {\n \t\t} \n \t\treturn keyPair.getCipherKey();\n \t}\n+\t\n+\tpublic static String generateSecret(int count) {\n+\t\treturn RandomStringUtils.random(count, 0, 0, true, true, null, \n+\t\t\t\tnew SecureRandom());\t\t\n+\t}\n \n+\tpublic static String generateSecret() {\n+\t\treturn generateSecret(DEFAULT_SECRET_LEN);\n+\t}\n+\t\n \tpublic static byte[] encrypt(byte[] data) {\n \t\treturn cipherService.encrypt(data, getCipherKey()).getBytes();\n \t}"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/component/user/accesstoken/AccessTokenPanel.java",
          "status": "modified",
          "additions": 7,
          "deletions": 8,
          "patch": "@@ -1,19 +1,18 @@\n package io.onedev.server.web.component.user.accesstoken;\n \n-import org.apache.commons.lang3.RandomStringUtils;\n+import io.onedev.server.OneDev;\n+import io.onedev.server.entitymanager.UserManager;\n+import io.onedev.server.model.User;\n+import io.onedev.server.util.CryptoUtils;\n+import io.onedev.server.web.component.link.copytoclipboard.CopyToClipboardLink;\n+import io.onedev.server.web.util.ConfirmClickModifier;\n import org.apache.wicket.Session;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.markup.html.link.Link;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n import org.apache.wicket.model.IModel;\n \n-import io.onedev.server.OneDev;\n-import io.onedev.server.entitymanager.UserManager;\n-import io.onedev.server.model.User;\n-import io.onedev.server.web.component.link.copytoclipboard.CopyToClipboardLink;\n-import io.onedev.server.web.util.ConfirmClickModifier;\n-\n @SuppressWarnings(\"serial\")\n public abstract class AccessTokenPanel extends Panel {\n \n@@ -50,7 +49,7 @@ protected String[] getInputTypes() {\n \n \t\t\t@Override\n \t\t\tpublic void onClick() {\n-\t\t\t\tgetUser().setAccessToken(RandomStringUtils.randomAlphanumeric(User.ACCESS_TOKEN_LEN));\n+\t\t\t\tgetUser().setAccessToken(CryptoUtils.generateSecret());\n \t\t\t\tOneDev.getInstance(UserManager.class).save(getUser());\n \t\t\t\tSession.get().success(\"Access token regenerated\");\n \t\t\t\tsetResponsePage(getPage());"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/component/user/twofactorauthentication/TwoFactorAuthenticationSetupPanel.html",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -46,10 +46,7 @@ <h5 id=\"modal-title\" class=\"modal-title\">Set Up Two-factor Authentication</h5>\n \t\t\tcan not access the authentication application. They will <b>NOT</b> be displayed again \n \t\t\t</div>\n \t\t\t<div>\n-\t\t\t\t<div wicket:id=\"recoveryCodes\" class=\"d-flex justify-content-between text-monospace font-size-lg font-weight-bold\">\n-\t\t\t\t\t<div wicket:id=\"left\"></div>\n-\t\t\t\t\t<div wicket:id=\"right\"></div>\n-\t\t\t\t</div>\t\t\n+\t\t\t\t<div wicket:id=\"recoveryCodes\" class=\"d-flex justify-content-center text-monospace font-size-sm font-weight-bold\"></div>\t\t\n \t\t\t</div>\n \t\t</div>\n \t\t<div class=\"modal-footer d-flex justify-content-center\">"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/component/user/twofactorauthentication/TwoFactorAuthenticationSetupPanel.java",
          "status": "modified",
          "additions": 14,
          "deletions": 19,
          "patch": "@@ -1,12 +1,13 @@\n package io.onedev.server.web.component.user.twofactorauthentication;\n \n-import java.io.IOException;\n-import java.security.SecureRandom;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import io.onedev.commons.utils.StringUtils;\n+import io.onedev.server.OneDev;\n+import io.onedev.server.entitymanager.UserManager;\n+import io.onedev.server.model.User;\n+import io.onedev.server.model.support.TwoFactorAuthentication;\n+import io.onedev.server.util.CryptoUtils;\n+import io.onedev.server.web.page.simple.security.LoginPage;\n import org.apache.commons.codec.binary.Base32;\n-import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.tika.mime.MediaType;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -26,12 +27,10 @@\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.ContentDisposition;\n \n-import io.onedev.commons.utils.StringUtils;\n-import io.onedev.server.OneDev;\n-import io.onedev.server.entitymanager.UserManager;\n-import io.onedev.server.model.User;\n-import io.onedev.server.model.support.TwoFactorAuthentication;\n-import io.onedev.server.web.page.simple.security.LoginPage;\n+import java.io.IOException;\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.List;\n \n @SuppressWarnings(\"serial\")\n public abstract class TwoFactorAuthenticationSetupPanel extends GenericPanel<User> {\n@@ -50,7 +49,7 @@ protected void onInitialize() {\n \t\t\n \t\tList<String> scratchCodes = new ArrayList<>();\n \t\tfor (int i=0; i<16; i++) \n-\t\t\tscratchCodes.add(RandomStringUtils.randomAlphanumeric(12));\n+\t\t\tscratchCodes.add(CryptoUtils.generateSecret());\n \t\t\n \t\tTwoFactorAuthentication authentication = new TwoFactorAuthentication(secretKey, scratchCodes);\n \n@@ -119,12 +118,8 @@ protected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n \t\t\t\t\t\n \t\t\t\t\tFragment fragment = new Fragment(\"content\", \"verifiedFrag\", TwoFactorAuthenticationSetupPanel.this);\n \t\t\t\t\tRepeatingView recoveryCodesView = new RepeatingView(\"recoveryCodes\");\n-\t\t\t\t\tfor (int i=0; i<authentication.getScratchCodes().size()/2; i++) {\n-\t\t\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(recoveryCodesView.newChildId());\n-\t\t\t\t\t\tcontainer.add(new Label(\"left\", authentication.getScratchCodes().get(i*2)));\n-\t\t\t\t\t\tcontainer.add(new Label(\"right\", authentication.getScratchCodes().get(i*2+1)));\n-\t\t\t\t\t\trecoveryCodesView.add(container);\n-\t\t\t\t\t}\n+\t\t\t\t\tfor (String scratchCode: authentication.getScratchCodes())\n+\t\t\t\t\t\trecoveryCodesView.add(new Label(recoveryCodesView.newChildId(), scratchCode));\n \t\t\t\t\tfragment.add(recoveryCodesView);\n \t\t\t\t\tfragment.add(new ResourceLink<Void>(\"download\", new AbstractResource() {\n "
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/page/simple/security/PasswordResetPage.java",
          "status": "modified",
          "additions": 13,
          "deletions": 15,
          "patch": "@@ -1,20 +1,6 @@\n package io.onedev.server.web.page.simple.security;\n \n-import java.util.Arrays;\n-\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.apache.shiro.authc.credential.PasswordService;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.feedback.FencedFeedbackPanel;\n-import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.markup.html.form.TextField;\n-import org.apache.wicket.markup.html.link.Link;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n-\n import com.google.common.collect.Lists;\n-\n import io.onedev.commons.loader.AppLoader;\n import io.onedev.commons.utils.ExplicitException;\n import io.onedev.commons.utils.TaskLogger;\n@@ -25,8 +11,20 @@\n import io.onedev.server.model.EmailAddress;\n import io.onedev.server.model.User;\n import io.onedev.server.persistence.SessionManager;\n+import io.onedev.server.util.CryptoUtils;\n import io.onedev.server.web.component.taskbutton.TaskButton;\n import io.onedev.server.web.page.simple.SimplePage;\n+import org.apache.shiro.authc.credential.PasswordService;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.feedback.FencedFeedbackPanel;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.markup.html.link.Link;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+import java.util.Arrays;\n \n @SuppressWarnings(\"serial\")\n public class PasswordResetPage extends SimplePage {\n@@ -83,7 +81,7 @@ protected String runTask(TaskLogger logger) {\n \t\t\t\t\t} else {\n \t\t\t\t\t\tSettingManager settingManager = OneDev.getInstance(SettingManager.class);\n \t\t\t\t\t\tif (settingManager.getMailSetting() != null) {\n-\t\t\t\t\t\t\tString password = RandomStringUtils.random(10, true, true);\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tString password = CryptoUtils.generateSecret();\t\t\t\t\t\t\t\t\n \t\t\t\t\t\t\tuser.setPassword(AppLoader.getInstance(PasswordService.class).encryptPassword(password));\n \t\t\t\t\t\t\tuserManager.save(user);\n \t\t\t\t\t\t\t"
        },
        {
          "filename": "server-product/system/incompatibilities/incompatibilities.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,3 +1,7 @@\n+# 7.9.12\n+\n+All access tokens of users are re-generated with cryto strong random string. As a result of this, all places using previous access token should be replaced with the new access token. This may include restful api authentication, CI/CD checkout step using access token etc.  \n+\n # 7.8.0\n \n To use consistent project url for web and git access, OneDev now uses project path instead of project id to access projects via web UI, for instance `https://code.onedev.io/projects/160` has been changed to `https://code.onedev.io/onedev/server`. To avoid conflicting with this url scheme, "
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "10e2c31d03935064a014dfb1464fa7bc146be9e0",
            "date": "2025-01-11T23:54:45Z",
            "author_login": "robinshine"
          },
          {
            "sha": "715386eb735489c08616f9e1c3dc56f58a5457c3",
            "date": "2025-01-11T01:12:03Z",
            "author_login": "robinshine"
          },
          {
            "sha": "be37d8fc32b9c3c4d7b11d3af8051be8911ee390",
            "date": "2025-01-09T14:35:55Z",
            "author_login": "robinshine"
          },
          {
            "sha": "f61d99124dd571668a8836354672903717ced5ca",
            "date": "2025-01-06T03:25:54Z",
            "author_login": "sususweet"
          },
          {
            "sha": "4c37f0dd4e0336e64f22fa04929d67188ee70bd4",
            "date": "2025-01-06T02:48:57Z",
            "author_login": "sususweet"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-338",
    "description": "Onedev is a self-hosted Git Server with CI/CD and Kanban. In versions prior to 7.9.12 the algorithm used to generate access token and password reset keys was not cryptographically secure. Existing normal users (or everyone if it allows self-registration) may exploit this to elevate privilege to obtain administrator permission. This issue is has been addressed in version 7.9.12. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-08T00:15:08.990",
    "last_modified": "2024-11-21T07:48:28.647",
    "fix_date": "2023-02-07T06:12:45Z"
  },
  "references": [
    {
      "url": "https://github.com/theonedev/onedev/commit/d67dd9686897fe5e4ab881d749464aa7c06a68e5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/theonedev/onedev/security/advisories/GHSA-jf5c-9r77-3j5j",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/theonedev/onedev/commit/d67dd9686897fe5e4ab881d749464aa7c06a68e5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/theonedev/onedev/security/advisories/GHSA-jf5c-9r77-3j5j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.002679",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "onedev",
    "owner": "theonedev",
    "created_at": "2018-11-06T02:57:01Z",
    "updated_at": "2025-01-14T10:30:38Z",
    "pushed_at": "2025-01-11T23:54:59Z",
    "size": 226316,
    "stars": 13579,
    "forks": 872,
    "open_issues": 0,
    "watchers": 13579,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 11067283,
      "JavaScript": 730260,
      "HTML": 381307,
      "CSS": 180682,
      "Shell": 116784,
      "ANTLR": 46591,
      "Smarty": 17174,
      "Python": 5761,
      "Mustache": 3983,
      "Dockerfile": 125
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:48:17.966345"
  }
}