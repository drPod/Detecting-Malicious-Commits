{
  "cve_id": "CVE-2023-25165",
  "github_data": {
    "repository": "helm/helm",
    "fix_commit": "5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
    "related_commits": [
      "5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
      "5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2"
    ],
    "patch_url": "https://github.com/helm/helm/commit/5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2.patch",
    "fix_commit_details": {
      "sha": "5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
      "commit_date": "2023-02-08T16:34:57Z",
      "author": {
        "login": "mattfarina",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-pwcw-6f5g-gxf8",
        "length": 68,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 88,
        "additions": 78,
        "deletions": 10
      },
      "files": [
        {
          "filename": "cmd/helm/install.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -170,6 +170,7 @@ func addInstallFlags(cmd *cobra.Command, f *pflag.FlagSet, client *action.Instal\n \tf.BoolVar(&client.Atomic, \"atomic\", false, \"if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used\")\n \tf.BoolVar(&client.SkipCRDs, \"skip-crds\", false, \"if set, no CRDs will be installed. By default, CRDs are installed if not already present\")\n \tf.BoolVar(&client.SubNotes, \"render-subchart-notes\", false, \"if set, render subchart notes along with the parent\")\n+\tf.BoolVar(&client.EnableDNS, \"enable-dns\", false, \"enable DNS lookups when rendering templates\")\n \taddValueOptionsFlags(f, valueOpts)\n \taddChartPathOptionsFlags(f, &client.ChartPathOptions)\n "
        },
        {
          "filename": "cmd/helm/upgrade.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -119,6 +119,7 @@ func newUpgradeCmd(cfg *action.Configuration, out io.Writer) *cobra.Command {\n \t\t\t\t\tinstClient.SubNotes = client.SubNotes\n \t\t\t\t\tinstClient.Description = client.Description\n \t\t\t\t\tinstClient.DependencyUpdate = client.DependencyUpdate\n+\t\t\t\t\tinstClient.EnableDNS = client.EnableDNS\n \n \t\t\t\t\trel, err := runInstall(args, instClient, valueOpts, out)\n \t\t\t\t\tif err != nil {\n@@ -232,6 +233,7 @@ func newUpgradeCmd(cfg *action.Configuration, out io.Writer) *cobra.Command {\n \tf.BoolVar(&client.SubNotes, \"render-subchart-notes\", false, \"if set, render subchart notes along with the parent\")\n \tf.StringVar(&client.Description, \"description\", \"\", \"add a custom description\")\n \tf.BoolVar(&client.DependencyUpdate, \"dependency-update\", false, \"update dependencies if they are missing before installing the chart\")\n+\tf.BoolVar(&client.EnableDNS, \"enable-dns\", false, \"enable DNS lookups when rendering templates\")\n \taddChartPathOptionsFlags(f, &client.ChartPathOptions)\n \taddValueOptionsFlags(f, valueOpts)\n \tbindOutputFlag(cmd, &outfmt)"
        },
        {
          "filename": "pkg/action/action.go",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -101,8 +101,9 @@ type Configuration struct {\n //\n // TODO: This function is badly in need of a refactor.\n // TODO: As part of the refactor the duplicate code in cmd/helm/template.go should be removed\n-//       This code has to do with writing files to disk.\n-func (cfg *Configuration) renderResources(ch *chart.Chart, values chartutil.Values, releaseName, outputDir string, subNotes, useReleaseName, includeCrds bool, pr postrender.PostRenderer, dryRun bool) ([]*release.Hook, *bytes.Buffer, string, error) {\n+//\n+//\tThis code has to do with writing files to disk.\n+func (cfg *Configuration) renderResources(ch *chart.Chart, values chartutil.Values, releaseName, outputDir string, subNotes, useReleaseName, includeCrds bool, pr postrender.PostRenderer, dryRun, enableDNS bool) ([]*release.Hook, *bytes.Buffer, string, error) {\n \ths := []*release.Hook{}\n \tb := bytes.NewBuffer(nil)\n \n@@ -130,9 +131,13 @@ func (cfg *Configuration) renderResources(ch *chart.Chart, values chartutil.Valu\n \t\tif err != nil {\n \t\t\treturn hs, b, \"\", err\n \t\t}\n-\t\tfiles, err2 = engine.RenderWithClient(ch, values, restConfig)\n+\t\te := engine.New(restConfig)\n+\t\te.EnableDNS = enableDNS\n+\t\tfiles, err2 = e.Render(ch, values)\n \t} else {\n-\t\tfiles, err2 = engine.Render(ch, values)\n+\t\tvar e engine.Engine\n+\t\te.EnableDNS = enableDNS\n+\t\tfiles, err2 = e.Render(ch, values)\n \t}\n \n \tif err2 != nil {"
        },
        {
          "filename": "pkg/action/install.go",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -97,6 +97,8 @@ type Install struct {\n \tAPIVersions chartutil.VersionSet\n \t// Used by helm template to render charts with .Release.IsUpgrade. Ignored if Dry-Run is false\n \tIsUpgrade bool\n+\t// Enable DNS lookups when rendering templates\n+\tEnableDNS bool\n \t// Used by helm template to add the release as part of OutputDir path\n \t// OutputDir/<ReleaseName>\n \tUseReleaseName bool\n@@ -257,7 +259,7 @@ func (i *Install) RunWithContext(ctx context.Context, chrt *chart.Chart, vals ma\n \trel := i.createRelease(chrt, vals)\n \n \tvar manifestDoc *bytes.Buffer\n-\trel.Hooks, manifestDoc, rel.Info.Notes, err = i.cfg.renderResources(chrt, valuesToRender, i.ReleaseName, i.OutputDir, i.SubNotes, i.UseReleaseName, i.IncludeCRDs, i.PostRenderer, i.DryRun)\n+\trel.Hooks, manifestDoc, rel.Info.Notes, err = i.cfg.renderResources(chrt, valuesToRender, i.ReleaseName, i.OutputDir, i.SubNotes, i.UseReleaseName, i.IncludeCRDs, i.PostRenderer, i.DryRun, i.EnableDNS)\n \t// Even for errors, attach this if available\n \tif manifestDoc != nil {\n \t\trel.Manifest = manifestDoc.String()\n@@ -457,10 +459,10 @@ func (i *Install) failRelease(rel *release.Release, err error) (*release.Release\n //\n // Roughly, this will return an error if name is\n //\n-//\t- empty\n-//\t- too long\n-//\t- already in use, and not deleted\n-//\t- used by a deleted release, and i.Replace is false\n+//   - empty\n+//   - too long\n+//   - already in use, and not deleted\n+//   - used by a deleted release, and i.Replace is false\n func (i *Install) availableName() error {\n \tstart := i.ReleaseName\n "
        },
        {
          "filename": "pkg/action/upgrade.go",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -103,6 +103,8 @@ type Upgrade struct {\n \tDependencyUpdate bool\n \t// Lock to control raceconditions when the process receives a SIGTERM\n \tLock sync.Mutex\n+\t// Enable DNS lookups when rendering templates\n+\tEnableDNS bool\n }\n \n type resultMessage struct {\n@@ -231,7 +233,7 @@ func (u *Upgrade) prepareUpgrade(name string, chart *chart.Chart, vals map[strin\n \t\treturn nil, nil, err\n \t}\n \n-\thooks, manifestDoc, notesTxt, err := u.cfg.renderResources(chart, valuesToRender, \"\", \"\", u.SubNotes, false, false, u.PostRenderer, u.DryRun)\n+\thooks, manifestDoc, notesTxt, err := u.cfg.renderResources(chart, valuesToRender, \"\", \"\", u.SubNotes, false, false, u.PostRenderer, u.DryRun, u.EnableDNS)\n \tif err != nil {\n \t\treturn nil, nil, err\n \t}"
        },
        {
          "filename": "pkg/engine/engine.go",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -42,6 +42,15 @@ type Engine struct {\n \tLintMode bool\n \t// the rest config to connect to the kubernetes api\n \tconfig *rest.Config\n+\t// EnableDNS tells the engine to allow DNS lookups when rendering templates\n+\tEnableDNS bool\n+}\n+\n+// New creates a new instance of Engine using the passed in rest config.\n+func New(config *rest.Config) Engine {\n+\treturn Engine{\n+\t\tconfig: config,\n+\t}\n }\n \n // Render takes a chart, optional values, and value overrides, and attempts to render the Go templates.\n@@ -189,6 +198,14 @@ func (e Engine) initFunMap(t *template.Template, referenceTpls map[string]render\n \t\tfuncMap[\"lookup\"] = NewLookupFunction(e.config)\n \t}\n \n+\t// When DNS lookups are not enabled override the sprig function and return\n+\t// an empty string.\n+\tif !e.EnableDNS {\n+\t\tfuncMap[\"getHostByName\"] = func(name string) string {\n+\t\t\treturn \"\"\n+\t\t}\n+\t}\n+\n \tt.Funcs(funcMap)\n }\n "
        },
        {
          "filename": "pkg/engine/engine_test.go",
          "status": "modified",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -18,6 +18,7 @@ package engine\n \n import (\n \t\"fmt\"\n+\t\"path\"\n \t\"strings\"\n \t\"sync\"\n \t\"testing\"\n@@ -89,6 +90,7 @@ func TestRender(t *testing.T) {\n \t\t\t{Name: \"templates/test2\", Data: []byte(\"{{.Values.global.callme | lower }}\")},\n \t\t\t{Name: \"templates/test3\", Data: []byte(\"{{.noValue}}\")},\n \t\t\t{Name: \"templates/test4\", Data: []byte(\"{{toJson .Values}}\")},\n+\t\t\t{Name: \"templates/test5\", Data: []byte(\"{{getHostByName \\\"helm.sh\\\"}}\")},\n \t\t},\n \t\tValues: map[string]interface{}{\"outer\": \"DEFAULT\", \"inner\": \"DEFAULT\"},\n \t}\n@@ -117,6 +119,7 @@ func TestRender(t *testing.T) {\n \t\t\"moby/templates/test2\": \"ishmael\",\n \t\t\"moby/templates/test3\": \"\",\n \t\t\"moby/templates/test4\": `{\"global\":{\"callme\":\"Ishmael\"},\"inner\":\"inn\",\"outer\":\"spouter\"}`,\n+\t\t\"moby/templates/test5\": \"\",\n \t}\n \n \tfor name, data := range expect {\n@@ -200,6 +203,42 @@ func TestRenderInternals(t *testing.T) {\n \t}\n }\n \n+func TestRenderWIthDNS(t *testing.T) {\n+\tc := &chart.Chart{\n+\t\tMetadata: &chart.Metadata{\n+\t\t\tName:    \"moby\",\n+\t\t\tVersion: \"1.2.3\",\n+\t\t},\n+\t\tTemplates: []*chart.File{\n+\t\t\t{Name: \"templates/test1\", Data: []byte(\"{{getHostByName \\\"helm.sh\\\"}}\")},\n+\t\t},\n+\t\tValues: map[string]interface{}{},\n+\t}\n+\n+\tvals := map[string]interface{}{\n+\t\t\"Values\": map[string]interface{}{},\n+\t}\n+\n+\tv, err := chartutil.CoalesceValues(c, vals)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Failed to coalesce values: %s\", err)\n+\t}\n+\n+\tvar e Engine\n+\te.EnableDNS = true\n+\tout, err := e.Render(c, v)\n+\tif err != nil {\n+\t\tt.Errorf(\"Failed to render templates: %s\", err)\n+\t}\n+\n+\tfor _, val := range c.Templates {\n+\t\tfp := path.Join(\"moby\", val.Name)\n+\t\tif out[fp] == \"\" {\n+\t\t\tt.Errorf(\"Expected IP address, got %q\", out[fp])\n+\t\t}\n+\t}\n+}\n+\n func TestParallelRenderInternals(t *testing.T) {\n \t// Make sure that we can use one Engine to run parallel template renders.\n \te := new(Engine)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb54996b001697513cdb1ffa5915c0ba90149fff",
            "date": "2025-01-14T02:16:44Z",
            "author_login": "sabre1041"
          },
          {
            "sha": "7dac0157a78e5ba6ad607cf1b1fc598b98ef5dfd",
            "date": "2025-01-13T18:01:22Z",
            "author_login": "robertsirc"
          },
          {
            "sha": "6d42a2973d108a28bff46e38f2afe6a9e98918af",
            "date": "2025-01-11T18:41:47Z",
            "author_login": "shahbazaamir"
          },
          {
            "sha": "bd897c96fbaf7546d6a5c57be009f16f9d38d6de",
            "date": "2025-01-09T00:46:19Z",
            "author_login": "gjenkins8"
          },
          {
            "sha": "ad9768402951f48f61e1ecbea0c1894456d63a2a",
            "date": "2025-01-07T17:09:02Z",
            "author_login": "mattfarina"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Helm is a tool that streamlines installing and managing Kubernetes applications.`getHostByName` is a Helm template function introduced in Helm v3. The function is able to accept a hostname and return an IP address for that hostname. To get the IP address the function performs a DNS lookup. The DNS lookup happens when used with `helm install|upgrade|template` or when the Helm SDK is used to render a chart. Information passed into the chart can be disclosed to the DNS servers used to lookup the IP address. For example, a malicious chart could inject `getHostByName` into a chart in order to disclose values to a malicious DNS server. The issue has been fixed in Helm 3.11.1. Prior to using a chart with Helm verify the `getHostByName` function is not being used in a template to disclose any information you do not want passed to DNS servers.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-08T20:15:24.937",
    "last_modified": "2024-11-21T07:49:14.133",
    "fix_date": "2023-02-08T16:34:57Z"
  },
  "references": [
    {
      "url": "https://github.com/helm/helm/commit/5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/helm/helm/security/advisories/GHSA-pwcw-6f5g-gxf8",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/helm/helm/commit/5abcf74227bfe8e5a3dbf105fe62e7b12deb58d2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/helm/helm/security/advisories/GHSA-pwcw-6f5g-gxf8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.005691",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "helm",
    "owner": "helm",
    "created_at": "2015-10-06T01:07:32Z",
    "updated_at": "2025-01-14T12:24:26Z",
    "pushed_at": "2025-01-14T02:16:52Z",
    "size": 22466,
    "stars": 27310,
    "forks": 7159,
    "open_issues": 777,
    "watchers": 27310,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "feat-v3/event-emitter-lua",
      "kube-update-test",
      "main",
      "release-2.0",
      "release-2.1",
      "release-2.2",
      "release-2.3",
      "release-2.4",
      "release-2.5",
      "release-2.6",
      "release-2.7",
      "release-2.8",
      "release-2.9"
    ],
    "languages": {
      "Go": 1934648,
      "Shell": 31103,
      "Makefile": 8742
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:57:31.645568"
  }
}