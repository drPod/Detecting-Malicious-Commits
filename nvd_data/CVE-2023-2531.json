{
  "cve_id": "CVE-2023-2531",
  "github_data": {
    "repository": "azuracast/azuracast",
    "fix_commit": "bdb23594ad3e0c47c8568ce028a7c244a406cf9d",
    "related_commits": [
      "bdb23594ad3e0c47c8568ce028a7c244a406cf9d",
      "bdb23594ad3e0c47c8568ce028a7c244a406cf9d"
    ],
    "patch_url": "https://github.com/azuracast/azuracast/commit/bdb23594ad3e0c47c8568ce028a7c244a406cf9d.patch",
    "fix_commit_details": {
      "sha": "bdb23594ad3e0c47c8568ce028a7c244a406cf9d",
      "commit_date": "2023-04-28T06:47:44Z",
      "author": {
        "login": "BusterNeece",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Tighten allowed IPs to avoid brute-force workarounds.",
        "length": 53,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 215,
        "additions": 181,
        "deletions": 34
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -7,6 +7,10 @@ release channel, you can take advantage of these new features and fixes.\n \n ## Code Quality/Technical Changes\n \n+- In sections of our application that depend on IP addresses, we've tightened our allowed IP addresses significantly to\n+  improve security and prevent brute-force flooding. If you're using a reverse proxy or CloudFlare, you should update\n+  your \"IP Address Source\" under the \"System Settings\" page.\n+\n ## Bug Fixes\n \n ---"
        },
        {
          "filename": "frontend/vue/components/Admin/Settings.vue",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -133,6 +133,7 @@ const {form, v$, ifValid} = useVuelidateOnForm(\n \n         always_use_ssl: {},\n         api_access_control: {},\n+        ip_source: {},\n \n         check_for_updates: {},\n         acme_email: {},\n@@ -150,13 +151,14 @@ const {form, v$, ifValid} = useVuelidateOnForm(\n         use_external_album_art_in_apis: {},\n         use_external_album_art_when_processing_media: {},\n         last_fm_api_key: {},\n+\n         $validationGroups: {\n             generalTab: [\n                 'base_url', 'instance_name', 'prefer_browser_url', 'use_radio_proxy',\n                 'history_keep_days', 'enable_static_nowplaying', 'enable_advanced_features'\n             ],\n             securityPrivacyTab: [\n-                'analytics', 'always_use_ssl', 'api_access_control'\n+                'analytics', 'always_use_ssl', 'ip_source', 'api_access_control'\n             ],\n             servicesTab: [\n                 'check_for_updates',\n@@ -179,6 +181,7 @@ const {form, v$, ifValid} = useVuelidateOnForm(\n         enable_advanced_features: true,\n         analytics: null,\n         always_use_ssl: false,\n+        ip_source: 'local',\n         api_access_control: '*',\n         check_for_updates: 1,\n         acme_email: '',"
        },
        {
          "filename": "frontend/vue/components/Admin/Settings/SecurityPrivacyTab.vue",
          "status": "modified",
          "additions": 45,
          "deletions": 1,
          "patch": "@@ -69,9 +69,32 @@\n                 </template>\n             </b-wrapped-form-checkbox>\n \n+            <b-wrapped-form-group\n+                id=\"edit_form_ip_source\"\n+                class=\"col-md-6\"\n+                :field=\"form.ip_source\"\n+            >\n+                <template #label>\n+                    {{ $gettext('IP Address Source') }}\n+                </template>\n+                <template #description>\n+                    {{\n+                        $gettext('Customize this setting to ensure you get the correct IP address for remote users. Only change this setting if you use a reverse proxy, either within Docker or a third-party service like CloudFlare.')\n+                    }}\n+                </template>\n+                <template #default=\"slotProps\">\n+                    <b-form-radio-group\n+                        :id=\"slotProps.id\"\n+                        v-model=\"slotProps.field.$model\"\n+                        stacked\n+                        :options=\"ipSourceOptions\"\n+                    />\n+                </template>\n+            </b-wrapped-form-group>\n+\n             <b-wrapped-form-group\n                 id=\"edit_form_api_access_control\"\n-                class=\"col-md-12\"\n+                class=\"col-md-6\"\n                 :field=\"form.api_access_control\"\n             >\n                 <template #label>\n@@ -98,11 +121,32 @@\n import BWrappedFormGroup from \"~/components/Form/BWrappedFormGroup.vue\";\n import BFormFieldset from \"~/components/Form/BFormFieldset.vue\";\n import BWrappedFormCheckbox from \"~/components/Form/BWrappedFormCheckbox.vue\";\n+import {useTranslate} from \"~/vendor/gettext\";\n+import {computed} from \"vue\";\n \n const props = defineProps({\n     form: {\n         type: Object,\n         required: true\n     }\n });\n+\n+const {$gettext} = useTranslate();\n+\n+const ipSourceOptions = computed(() => {\n+    return [\n+        {\n+            value: 'local',\n+            text: $gettext('Local IP (Default)')\n+        },\n+        {\n+            value: 'cloudflare',\n+            text: $gettext('CloudFlare (CF-Connecting-IP)')\n+        },\n+        {\n+            value: 'xff',\n+            text: $gettext('Reverse Proxy (X-Forwarded-For)')\n+        }\n+    ]\n+});\n </script>"
        },
        {
          "filename": "src/Controller/Api/Admin/RelaysController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -38,7 +38,8 @@ final class RelaysController\n {\n     public function __construct(\n         private readonly EntityManagerInterface $em,\n-        private readonly Adapters $adapters\n+        private readonly Adapters $adapters,\n+        private readonly Entity\\Repository\\SettingsRepository $settingsRepo\n     ) {\n     }\n \n@@ -126,7 +127,7 @@ public function updateAction(\n             $base_url = $body['base_url'];\n         } else {\n             /** @noinspection HttpUrlsUsage */\n-            $base_url = 'http://' . $request->getIp();\n+            $base_url = 'http://' . $this->settingsRepo->readSettings()->getIp($request);\n         }\n \n         $relay = $relay_repo->findOneBy(['base_url' => $base_url]);"
        },
        {
          "filename": "src/Controller/Api/Stations/Requests/SubmitAction.php",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -6,6 +6,7 @@\n \n use App\\Entity\\Api\\Error;\n use App\\Entity\\Api\\Status;\n+use App\\Entity\\Repository\\SettingsRepository;\n use App\\Entity\\Repository\\StationRequestRepository;\n use App\\Entity\\User;\n use App\\Exception\\InvalidRequestAttribute;\n@@ -43,7 +44,8 @@\n final class SubmitAction\n {\n     public function __construct(\n-        private readonly StationRequestRepository $requestRepo\n+        private readonly StationRequestRepository $requestRepo,\n+        private readonly SettingsRepository $settingsRepo\n     ) {\n     }\n \n@@ -64,11 +66,13 @@ public function __invoke(\n         $isAuthenticated = ($user instanceof User);\n \n         try {\n+            $ip = $this->settingsRepo->readSettings()->getIp($request);\n+\n             $this->requestRepo->submit(\n                 $station,\n                 $media_id,\n                 $isAuthenticated,\n-                $request->getIp(),\n+                $ip,\n                 $request->getHeaderLine('User-Agent')\n             );\n "
        },
        {
          "filename": "src/Entity/Enums/IpSources.php",
          "status": "added",
          "additions": 56,
          "deletions": 0,
          "patch": "@@ -0,0 +1,56 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace App\\Entity\\Enums;\n+\n+use Psr\\Http\\Message\\ServerRequestInterface;\n+\n+enum IpSources: string\n+{\n+    case Local = 'local';\n+    case XForwardedFor = 'xff';\n+    case Cloudflare = 'cloudflare';\n+\n+    public static function default(): self\n+    {\n+        return self::Local;\n+    }\n+\n+    public function getIp(ServerRequestInterface $request): string\n+    {\n+        if (self::Cloudflare === $this) {\n+            $ip = $request->getHeaderLine('CF-Connecting-IP');\n+            if (!empty($ip)) {\n+                return $this->parseIp($ip);\n+            }\n+        }\n+\n+        if (self::XForwardedFor === $this) {\n+            $ip = $request->getHeaderLine('X-Forwarded-For');\n+            if (!empty($ip)) {\n+                return $this->parseIp($ip);\n+            }\n+        }\n+\n+        $serverParams = $request->getServerParams();\n+        $ip = $serverParams['REMOTE_ADDR'] ?? null;\n+\n+        if (empty($ip)) {\n+            throw new \\RuntimeException('No IP address attached to this request.');\n+        }\n+\n+        return $this->parseIp($ip);\n+    }\n+\n+    private function parseIp(string $ip): string\n+    {\n+        // Handle the IP being separated by commas.\n+        if (str_contains($ip, ',')) {\n+            $ipParts = explode(',', $ip);\n+            $ip = array_shift($ipParts);\n+        }\n+\n+        return trim($ip);\n+    }\n+}"
        },
        {
          "filename": "src/Entity/Migration/Version20230428062001.php",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+namespace App\\Entity\\Migration;\n+\n+use Doctrine\\DBAL\\Schema\\Schema;\n+use Doctrine\\Migrations\\AbstractMigration;\n+\n+final class Version20230428062001 extends AbstractMigration\n+{\n+    public function getDescription(): string\n+    {\n+        return 'Add \"IP Source\" setting.';\n+    }\n+\n+    public function up(Schema $schema): void\n+    {\n+        $this->addSql('ALTER TABLE settings ADD ip_source VARCHAR(50) DEFAULT NULL');\n+    }\n+\n+    public function down(Schema $schema): void\n+    {\n+        $this->addSql('ALTER TABLE settings DROP ip_source');\n+    }\n+}"
        },
        {
          "filename": "src/Entity/Settings.php",
          "status": "modified",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -14,6 +14,7 @@\n use Doctrine\\ORM\\Mapping as ORM;\n use InvalidArgumentException;\n use OpenApi\\Attributes as OA;\n+use Psr\\Http\\Message\\ServerRequestInterface;\n use Psr\\Http\\Message\\UriInterface;\n use RuntimeException;\n use Stringable;\n@@ -1059,6 +1060,37 @@ static function ($str) {\n         $this->acme_domains = $acme_domains;\n     }\n \n+    #[\n+        OA\\Property(description: \"IP Address Source\"),\n+        ORM\\Column(length: 50, nullable: true),\n+        Groups(self::GROUP_GENERAL)\n+    ]\n+    protected ?string $ip_source = null;\n+\n+    public function getIpSource(): string\n+    {\n+        return $this->ip_source ?? Entity\\Enums\\IpSources::default()->value;\n+    }\n+\n+    public function getIpSourceEnum(): Entity\\Enums\\IpSources\n+    {\n+        return Entity\\Enums\\IpSources::tryFrom($this->ip_source ?? '') ?? Entity\\Enums\\IpSources::default();\n+    }\n+\n+    public function getIp(ServerRequestInterface $request): string\n+    {\n+        return $this->getIpSourceEnum()->getIp($request);\n+    }\n+\n+    public function setIpSource(?string $ipSource): void\n+    {\n+        if (null !== $ipSource && null === Entity\\Enums\\IpSources::tryFrom($ipSource)) {\n+            throw new InvalidArgumentException('Invalid IP source.');\n+        }\n+\n+        $this->ip_source = $ipSource;\n+    }\n+\n     public function __toString(): string\n     {\n         return 'Settings';"
        },
        {
          "filename": "src/Http/ServerRequest.php",
          "status": "modified",
          "additions": 0,
          "deletions": 27,
          "patch": "@@ -14,7 +14,6 @@\n use App\\Session;\n use App\\View;\n use Mezzio\\Session\\SessionInterface;\n-use RuntimeException;\n \n final class ServerRequest extends \\Slim\\Http\\ServerRequest\n {\n@@ -122,30 +121,4 @@ private function getAttributeOfClass(string $attr, string $class_name): mixed\n \n         return $object;\n     }\n-\n-    /**\n-     * Get the remote user's IP address as indicated by HTTP headers.\n-     */\n-    public function getIp(): string\n-    {\n-        $params = $this->serverRequest->getServerParams();\n-\n-        $ip = $params['HTTP_CLIENT_IP']\n-            ?? $params['HTTP_X_FORWARDED_FOR']\n-            ?? $params['HTTP_X_FORWARDED']\n-            ?? $params['HTTP_FORWARDED_FOR']\n-            ?? $params['HTTP_FORWARDED']\n-            ?? $params['REMOTE_ADDR']\n-            ?? null;\n-\n-        if (null === $ip) {\n-            throw new RuntimeException('No IP address attached to this request.');\n-        }\n-\n-        // Handle the IP being separated by commas.\n-        $ipParts = explode(',', $ip);\n-        $ip = array_shift($ipParts);\n-\n-        return trim($ip);\n-    }\n }"
        },
        {
          "filename": "src/RateLimit.php",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@\n \n namespace App;\n \n+use App\\Entity\\Repository\\SettingsRepository;\n use App\\Http\\ServerRequest;\n use App\\Lock\\LockFactory;\n use Psr\\Cache\\CacheItemPoolInterface;\n@@ -18,6 +19,7 @@ final class RateLimit\n     public function __construct(\n         private readonly LockFactory $lockFactory,\n         private readonly Environment $environment,\n+        private readonly SettingsRepository $settingsRepo,\n         CacheItemPoolInterface $cacheItemPool\n     ) {\n         $this->psr6Cache = new ProxyAdapter($cacheItemPool, 'ratelimit.');\n@@ -41,7 +43,9 @@ public function checkRequestRateLimit(\n             return;\n         }\n \n-        $ipKey = str_replace([':', '.'], '_', $request->getIp());\n+        $ip = $this->settingsRepo->readSettings()->getIp($request);\n+\n+        $ipKey = str_replace([':', '.'], '_', $ip);\n         $this->checkRateLimit($groupName, $ipKey, $interval, $limit);\n     }\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "38d47405fa640c9446d967a6410bc766185e9205",
            "date": "2025-01-14T20:40:29Z",
            "author_login": "BusterNeece"
          },
          {
            "sha": "316766100e2434bc8c2098557df8fceea68fd5cc",
            "date": "2025-01-14T03:34:30Z",
            "author_login": "BusterNeece"
          },
          {
            "sha": "58a5e69325b5d83a0aca12336c5664c1ea51632d",
            "date": "2025-01-14T03:34:28Z",
            "author_login": "BusterNeece"
          },
          {
            "sha": "4caebf90824abdab01feddb87f8673a09c358918",
            "date": "2025-01-13T19:01:43Z",
            "author_login": "gAlleb"
          },
          {
            "sha": "92be4f4debe6cbe21768ad55c66543f5395b6e00",
            "date": "2025-01-13T03:11:00Z",
            "author_login": "BusterNeece"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-307",
    "description": "Improper Restriction of Excessive Authentication Attempts in GitHub repository azuracast/azuracast prior to 0.18.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-05T01:15:08.683",
    "last_modified": "2024-11-21T07:58:47.277",
    "fix_date": "2023-04-28T06:47:44Z"
  },
  "references": [
    {
      "url": "https://github.com/azuracast/azuracast/commit/bdb23594ad3e0c47c8568ce028a7c244a406cf9d",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/20463eb2-0f9d-4ea3-a2c8-93f80e7aca02",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/azuracast/azuracast/commit/bdb23594ad3e0c47c8568ce028a7c244a406cf9d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/20463eb2-0f9d-4ea3-a2c8-93f80e7aca02",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.927515",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "AzuraCast",
    "owner": "azuracast",
    "created_at": "2016-04-30T21:41:23Z",
    "updated_at": "2025-01-14T20:40:36Z",
    "pushed_at": "2025-01-14T20:40:33Z",
    "size": 261208,
    "stars": 3156,
    "forks": 580,
    "open_issues": 77,
    "watchers": 3156,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "stable"
    ],
    "languages": {
      "PHP": 5477053,
      "Vue": 1092437,
      "TypeScript": 190341,
      "Shell": 62339,
      "SCSS": 23335,
      "HTML": 17144,
      "JavaScript": 13530,
      "Dockerfile": 5708,
      "Makefile": 1596
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T22:55:47.565077"
  }
}