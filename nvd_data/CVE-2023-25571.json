{
  "cve_id": "CVE-2023-25571",
  "github_data": {
    "repository": "backstage/backstage",
    "fix_commit": "3d1371954512f7fa8bd0e2d357e00eada2c3e8a8",
    "related_commits": [
      "3d1371954512f7fa8bd0e2d357e00eada2c3e8a8",
      "3d1371954512f7fa8bd0e2d357e00eada2c3e8a8"
    ],
    "patch_url": "https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8.patch",
    "fix_commit_details": {
      "sha": "3d1371954512f7fa8bd0e2d357e00eada2c3e8a8",
      "commit_date": "2023-02-14T13:21:23Z",
      "author": {
        "login": "Rugvip",
        "type": "User",
        "stats": {
          "total_commits": 12937,
          "average_weekly_commits": 49.75769230769231,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 248
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-7hv8-3fr9-j2hv",
        "length": 62,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 240,
        "additions": 214,
        "deletions": 26
      },
      "files": [
        {
          "filename": ".changeset/big-bags-glow.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'@backstage/plugin-catalog-backend': patch\n+---\n+\n+Add additional validation as security precations for output entities."
        },
        {
          "filename": ".changeset/gorgeous-ligers-burn.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'@backstage/core-components': patch\n+---\n+\n+Added a global override for `window.open` that helps prevent security vulnerabilities."
        },
        {
          "filename": ".changeset/purple-panthers-know.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'@backstage/catalog-model': patch\n+---\n+\n+Add additional validation for location references."
        },
        {
          "filename": ".changeset/red-pugs-tap.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'@backstage/core-components': patch\n+---\n+\n+Updated Link URL validation to be more strict."
        },
        {
          "filename": "packages/catalog-model/src/location/helpers.test.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -50,6 +50,9 @@ describe('parseLocationRef', () => {\n     expect(() => parseLocationRef('https://bleh')).toThrow(\n       \"Invalid location ref 'https://bleh', please prefix it with 'url:', e.g. 'url:https://bleh'\",\n     );\n+    expect(() => parseLocationRef('url:javascript:alert()')).toThrow(\n+      \"Invalid location ref 'url:javascript:alert()', target is a javascript: URL\",\n+    );\n   });\n });\n \n@@ -70,6 +73,12 @@ describe('stringifyLocationRef', () => {\n     expect(() => stringifyLocationRef({ type: 'hello', target: '' })).toThrow(\n       'Unable to stringify location ref, empty target',\n     );\n+    expect(() =>\n+      // eslint-disable-next-line no-script-url\n+      stringifyLocationRef({ type: 'url', target: 'javascript:alert()' }),\n+    ).toThrow(\n+      \"Invalid location ref 'url:javascript:alert()', target is a javascript: URL\",\n+    );\n   });\n });\n "
        },
        {
          "filename": "packages/catalog-model/src/location/helpers.ts",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -17,6 +17,11 @@\n import { Entity, stringifyEntityRef } from '../entity';\n import { ANNOTATION_LOCATION, ANNOTATION_SOURCE_LOCATION } from './annotation';\n \n+// See https://github.com/facebook/react/blob/f0cf832e1d0c8544c36aa8b310960885a11a847c/packages/react-dom-bindings/src/shared/sanitizeURL.js\n+const scriptProtocolPattern =\n+  // eslint-disable-next-line no-control-regex\n+  /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n+\n /**\n  * Parses a string form location reference.\n  *\n@@ -56,6 +61,12 @@ export function parseLocationRef(ref: string): {\n     );\n   }\n \n+  if (scriptProtocolPattern.test(target)) {\n+    throw new TypeError(\n+      `Invalid location ref '${ref}', target is a javascript: URL`,\n+    );\n+  }\n+\n   return { type, target };\n }\n \n@@ -78,6 +89,12 @@ export function stringifyLocationRef(ref: {\n     throw new TypeError(`Unable to stringify location ref, empty target`);\n   }\n \n+  if (scriptProtocolPattern.test(target)) {\n+    throw new TypeError(\n+      `Invalid location ref '${type}:${target}', target is a javascript: URL`,\n+    );\n+  }\n+\n   return `${type}:${target}`;\n }\n "
        },
        {
          "filename": "packages/core-components/src/components/Link/Link.test.tsx",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -173,4 +173,24 @@ describe('<Link />', () => {\n       });\n     });\n   });\n+\n+  it('throws an error when attempting to link to script code', () => {\n+    expect(() =>\n+      // eslint-disable-next-line no-script-url\n+      render(wrapInTestApp(<Link to=\"javascript:alert('hello')\">Script</Link>)),\n+    ).toThrowErrorMatchingInlineSnapshot(\n+      `\"Link component rejected javascript: URL as a security precaution\"`,\n+    );\n+  });\n+});\n+\n+describe('window.open', () => {\n+  it('throws an error when attempting to open script code', () => {\n+    expect(() =>\n+      // eslint-disable-next-line no-script-url\n+      window.open(\"javascript:alert('hello')\"),\n+    ).toThrowErrorMatchingInlineSnapshot(\n+      `\"Rejected window.open() with a javascript: URL as a security precaution\"`,\n+    );\n+  });\n });"
        },
        {
          "filename": "packages/core-components/src/components/Link/Link.tsx",
          "status": "modified",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -55,6 +55,32 @@ const useStyles = makeStyles(\n \n export const isExternalUri = (uri: string) => /^([a-z+.-]+):/.test(uri);\n \n+// See https://github.com/facebook/react/blob/f0cf832e1d0c8544c36aa8b310960885a11a847c/packages/react-dom-bindings/src/shared/sanitizeURL.js\n+const scriptProtocolPattern =\n+  // eslint-disable-next-line no-control-regex\n+  /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n+\n+// We install this globally in order to prevent javascript: URL XSS attacks via window.open\n+const originalWindowOpen = window.open as typeof window.open & {\n+  __backstage?: true;\n+};\n+if (originalWindowOpen && !originalWindowOpen.__backstage) {\n+  const newOpen = function open(\n+    this: Window,\n+    ...args: Parameters<typeof window.open>\n+  ) {\n+    const url = String(args[0]);\n+    if (scriptProtocolPattern.test(url)) {\n+      throw new Error(\n+        'Rejected window.open() with a javascript: URL as a security precaution',\n+      );\n+    }\n+    return originalWindowOpen.apply(this, args);\n+  };\n+  newOpen.__backstage = true;\n+  window.open = newOpen;\n+}\n+\n export type LinkProps = Omit<MaterialLinkProps, 'to'> &\n   Omit<RouterLinkProps, 'to'> & {\n     to: string;\n@@ -144,6 +170,12 @@ export const Link = React.forwardRef<any, LinkProps>(\n     const external = isExternalUri(to);\n     const newWindow = external && !!/^https?:/.exec(to);\n \n+    if (scriptProtocolPattern.test(to)) {\n+      throw new Error(\n+        'Link component rejected javascript: URL as a security precaution',\n+      );\n+    }\n+\n     const handleClick = (event: React.MouseEvent<any, MouseEvent>) => {\n       onClick?.(event);\n       if (!noTrack) {"
        },
        {
          "filename": "plugins/catalog-backend/src/integration.test.ts",
          "status": "modified",
          "additions": 101,
          "deletions": 26,
          "patch": "@@ -52,9 +52,14 @@ import {\n } from '@backstage/plugin-catalog-node';\n import { RefreshStateItem } from './database/types';\n import { DefaultProviderDatabase } from './database/DefaultProviderDatabase';\n+import { InputError } from '@backstage/errors';\n \n const voidLogger = getVoidLogger();\n \n+type ProgressTrackerWithErrorReports = ProgressTracker & {\n+  reportError(unprocessedEntity: Entity, errors: Error[]): void;\n+};\n+\n class TestProvider implements EntityProvider {\n   #connection?: EntityProviderConnection;\n \n@@ -74,23 +79,27 @@ class TestProvider implements EntityProvider {\n   }\n }\n \n-class ProxyProgressTracker implements ProgressTracker {\n-  #inner: ProgressTracker;\n+class ProxyProgressTracker implements ProgressTrackerWithErrorReports {\n+  #inner: ProgressTrackerWithErrorReports;\n \n-  constructor(inner: ProgressTracker) {\n+  constructor(inner: ProgressTrackerWithErrorReports) {\n     this.#inner = inner;\n   }\n \n   processStart(item: RefreshStateItem) {\n     return this.#inner.processStart(item, voidLogger);\n   }\n \n-  setTracker(tracker: ProgressTracker) {\n+  setTracker(tracker: ProgressTrackerWithErrorReports) {\n     this.#inner = tracker;\n   }\n+\n+  reportError(unprocessedEntity: Entity, errors: Error[]): void {\n+    this.#inner.reportError(unprocessedEntity, errors);\n+  }\n }\n \n-class NoopProgressTracker implements ProgressTracker {\n+class NoopProgressTracker implements ProgressTrackerWithErrorReports {\n   static emptyTracking = {\n     markFailed() {},\n     markProcessorsCompleted() {},\n@@ -102,18 +111,20 @@ class NoopProgressTracker implements ProgressTracker {\n   processStart() {\n     return NoopProgressTracker.emptyTracking;\n   }\n+\n+  reportError() {}\n }\n \n-class WaitingProgressTracker implements ProgressTracker {\n-  #resolve: (errors: Record<string, Error>) => void;\n-  #promise: Promise<Record<string, Error>>;\n+class WaitingProgressTracker implements ProgressTrackerWithErrorReports {\n+  #resolve: (errors: Record<string, Error[]>) => void;\n+  #promise: Promise<Record<string, Error[]>>;\n   #counts = new Map<string, number>();\n-  #errors = new Map<string, Error>();\n+  #errors = new Map<string, Error[]>();\n   #inFlight = new Array<Promise<void>>();\n \n   constructor(private readonly entityRefs?: Set<string>) {\n-    let resolve: (errors: Record<string, Error>) => void;\n-    this.#promise = new Promise<Record<string, Error>>(_resolve => {\n+    let resolve: (errors: Record<string, Error[]>) => void;\n+    this.#promise = new Promise<Record<string, Error[]>>(_resolve => {\n       resolve = _resolve;\n     });\n     this.#resolve = resolve!;\n@@ -143,7 +154,7 @@ class WaitingProgressTracker implements ProgressTracker {\n     };\n     return {\n       markFailed: (error: Error) => {\n-        this.#errors.set(item.entityRef, error);\n+        this.#errors.set(item.entityRef, [error]);\n         onDone();\n         resolve();\n       },\n@@ -154,7 +165,6 @@ class WaitingProgressTracker implements ProgressTracker {\n         resolve();\n       },\n       markSuccessfulWithErrors: () => {\n-        this.#errors.delete(item.entityRef);\n         onDone();\n         resolve();\n       },\n@@ -165,7 +175,11 @@ class WaitingProgressTracker implements ProgressTracker {\n     };\n   }\n \n-  async wait(): Promise<Record<string, Error>> {\n+  reportError(unprocessedEntity: Entity, errors: Error[]): void {\n+    this.#errors.set(stringifyEntityRef(unprocessedEntity), errors);\n+  }\n+\n+  async wait(): Promise<Record<string, Error[]>> {\n     return this.#promise;\n   }\n \n@@ -191,10 +205,6 @@ class TestHarness {\n       location: LocationSpec,\n       emit: CatalogProcessorEmit,\n     ): Promise<Entity>;\n-    onProcessingError?(event: {\n-      unprocessedEntity: Entity;\n-      errors: Error[];\n-    }): void;\n   }) {\n     const config = new ConfigReader(\n       options?.config ?? {\n@@ -271,13 +281,7 @@ class TestHarness {\n       () => createHash('sha1'),\n       50,\n       event => {\n-        if (options?.onProcessingError) {\n-          options.onProcessingError(event);\n-        } else {\n-          throw new Error(\n-            `Catalog processing error, ${event.errors.join(', ')}`,\n-          );\n-        }\n+        proxyProgressTracker.reportError(event.unprocessedEntity, event.errors);\n       },\n       proxyProgressTracker,\n     );\n@@ -388,7 +392,13 @@ describe('Catalog Backend Integration', () => {\n \n     triggerError = true;\n \n-    await expect(harness.process()).resolves.toEqual({});\n+    await expect(harness.process()).resolves.toEqual({\n+      'component:default/test': [\n+        new InputError(\n+          'Processor Object threw an error while preprocessing; caused by Error: NOPE',\n+        ),\n+      ],\n+    });\n \n     await expect(harness.getOutputEntities()).resolves.toEqual({\n       'component:default/test': {\n@@ -685,4 +695,69 @@ describe('Catalog Backend Integration', () => {\n         .annotations!['backstage.io/orphan'],\n     ).toBeUndefined();\n   });\n+\n+  it('should reject insecure URLs', async () => {\n+    const harness = await TestHarness.create();\n+\n+    await harness.setInputEntities([\n+      {\n+        apiVersion: 'backstage.io/v1alpha1',\n+        kind: 'Component',\n+        metadata: {\n+          name: 'test',\n+          annotations: {\n+            'backstage.io/managed-by-location': 'url:.',\n+            'backstage.io/managed-by-origin-location': 'url:.',\n+            'backstage.io/view-url': '       javascript:bad()',\n+            'backstage.io/edit-url': '       javascript:alert()',\n+          },\n+        },\n+      },\n+    ]);\n+\n+    await expect(harness.process()).resolves.toEqual({});\n+\n+    await expect(harness.getOutputEntities()).resolves.toEqual({\n+      'component:default/test': {\n+        apiVersion: 'backstage.io/v1alpha1',\n+        kind: 'Component',\n+        metadata: expect.objectContaining({\n+          name: 'test',\n+          annotations: expect.objectContaining({\n+            'backstage.io/view-url':\n+              'https://backstage.io/annotation-rejected-for-security-reasons',\n+            'backstage.io/edit-url':\n+              'https://backstage.io/annotation-rejected-for-security-reasons',\n+          }),\n+        }),\n+        relations: [],\n+      },\n+    });\n+  });\n+\n+  it('should reject insecure location URLs', async () => {\n+    const harness = await TestHarness.create();\n+\n+    await harness.setInputEntities([\n+      {\n+        apiVersion: 'backstage.io/v1alpha1',\n+        kind: 'Component',\n+        metadata: {\n+          name: 'test',\n+          annotations: {\n+            'backstage.io/managed-by-location': 'url:javascript:bad()',\n+            'backstage.io/managed-by-origin-location': 'url:javascript:alert()',\n+          },\n+        },\n+      },\n+    ]);\n+\n+    await expect(harness.process()).resolves.toEqual({\n+      'component:default/test': [\n+        new TypeError(\n+          \"Invalid location ref 'url:javascript:bad()', target is a javascript: URL\",\n+        ),\n+      ],\n+    });\n+  });\n });"
        },
        {
          "filename": "plugins/catalog-backend/src/stitching/Stitcher.ts",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -17,6 +17,8 @@\n import { ENTITY_STATUS_CATALOG_PROCESSING_TYPE } from '@backstage/catalog-client';\n import {\n   AlphaEntity,\n+  ANNOTATION_EDIT_URL,\n+  ANNOTATION_VIEW_URL,\n   EntityRelation,\n   EntityStatusItem,\n } from '@backstage/catalog-model';\n@@ -32,6 +34,11 @@ import {\n import { buildEntitySearch } from './buildEntitySearch';\n import { BATCH_SIZE, generateStableHash } from './util';\n \n+// See https://github.com/facebook/react/blob/f0cf832e1d0c8544c36aa8b310960885a11a847c/packages/react-dom-bindings/src/shared/sanitizeURL.js\n+const scriptProtocolPattern =\n+  // eslint-disable-next-line no-control-regex\n+  /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n+\n /**\n  * Performs the act of stitching - to take all of the various outputs from the\n  * ingestion process, and stitching them together into the final entity JSON\n@@ -166,6 +173,14 @@ export class Stitcher {\n         }));\n       }\n     }\n+    // We opt to do this check here as we otherwise can't guarantee that it will be run after all processors\n+    for (const annotation of [ANNOTATION_VIEW_URL, ANNOTATION_EDIT_URL]) {\n+      const value = entity.metadata.annotations?.[annotation];\n+      if (typeof value === 'string' && scriptProtocolPattern.test(value)) {\n+        entity.metadata.annotations![annotation] =\n+          'https://backstage.io/annotation-rejected-for-security-reasons';\n+      }\n+    }\n \n     // TODO: entityRef is lower case and should be uppercase in the final\n     // result"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8de3d2d53d82dd2ec23359be944050c7e98fe565",
            "date": "2025-01-14T18:15:16Z",
            "author_login": "laimis9133"
          },
          {
            "sha": "f06fdd875cb5b130ca33ff84c216ce5ce3e70ff7",
            "date": "2025-01-14T17:10:47Z",
            "author_login": "Rugvip"
          },
          {
            "sha": "f25ea9153f0c693258e0d4b37598d6306dd1d7cc",
            "date": "2025-01-14T16:28:26Z",
            "author_login": "Rugvip"
          },
          {
            "sha": "3b80fcff4c3f1ce7e57b3ff28728c95876713377",
            "date": "2025-01-14T14:59:33Z",
            "author_login": "alexlorenzi"
          },
          {
            "sha": "10d45f446f2b6feec06f94c45aca4ec3a9cc1ddf",
            "date": "2025-01-14T14:38:04Z",
            "author_login": "Rugvip"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-79",
    "description": "Backstage is an open platform for building developer portals. `@backstage/catalog-model` prior to version 1.2.0, `@backstage/core-components` prior to 0.12.4, and `@backstage/plugin-catalog-backend` prior to 1.7.2 are affected by a cross-site scripting vulnerability. This vulnerability allows a malicious actor with access to add or modify content in an instance of the Backstage software catalog to inject script URLs in the entities stored in the catalog. If users of the catalog then click on said URLs, that can lead to an XSS attack.\n\nThis vulnerability has been patched in both the frontend and backend implementations. The default `Link` component from `@backstage/core-components` version 1.2.0 and greater will now reject `javascript:` URLs, and there is a global override of `window.open` to do the same. In addition, the catalog model v0.12.4 and greater as well as the catalog backend v1.7.2 and greater now has additional validation built in that prevents `javascript:` URLs in known annotations. As a workaround, the general practice of limiting access to modifying catalog content and requiring code reviews greatly help mitigate this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-14T18:15:13.577",
    "last_modified": "2024-11-21T07:49:45.157",
    "fix_date": "2023-02-14T13:21:23Z"
  },
  "references": [
    {
      "url": "https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.057175",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "backstage",
    "owner": "backstage",
    "created_at": "2020-01-24T22:39:49Z",
    "updated_at": "2025-01-14T13:31:26Z",
    "pushed_at": "2025-01-14T13:31:36Z",
    "size": 10047272,
    "stars": 29010,
    "forks": 6175,
    "open_issues": 474,
    "watchers": 29010,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 19535758,
      "MDX": 476489,
      "JavaScript": 394933,
      "CSS": 289673,
      "Handlebars": 44288,
      "Mustache": 22733,
      "SCSS": 11090,
      "Dockerfile": 10872,
      "HTML": 10780,
      "Shell": 5657,
      "Makefile": 5185,
      "HCL": 1581,
      "PowerShell": 698
    },
    "commit_activity": {
      "total_commits_last_year": 13511,
      "avg_commits_per_week": 259.8269230769231,
      "days_active_last_year": 353
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:37:54.205572"
  }
}