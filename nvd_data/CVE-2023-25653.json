{
  "cve_id": "CVE-2023-25653",
  "github_data": {
    "repository": "cisco/node-jose",
    "fix_commit": "901d91508a70e3b9bdfc45688ea07bb4e1b8210d",
    "related_commits": [
      "901d91508a70e3b9bdfc45688ea07bb4e1b8210d",
      "901d91508a70e3b9bdfc45688ea07bb4e1b8210d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "901d91508a70e3b9bdfc45688ea07bb4e1b8210d",
      "commit_date": "2023-02-08T13:28:24Z",
      "author": {
        "login": "bifurcation",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-5h4j-qrvg-9xhw",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 39,
        "deletions": 0
      },
      "files": [
        {
          "filename": "lib/deps/ecc/math.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -46,6 +46,7 @@ function barrettRevert(x) { return x; }\n \n // x = x mod m (HAC 14.42)\n function barrettReduce(x) {\n+  if (x.s < 0) { throw Error(\"Barrett reduction on negative input\"); }\n   x.drShiftTo(this.m.t-1,this.r2);\n   if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n   this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);"
        },
        {
          "filename": "lib/deps/forge.js",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -88,4 +88,13 @@ modeRaw.prototype.decrypt = function(input, output, finish) {\n   forge.cipher.registerAlgorithm(name, factory);\n })();\n \n+// Ensure that the jsbn modInverse function always returns a positive result\n+const originalModInverse = forge.jsbn.BigInteger.prototype.modInverse;\n+const positiveModInverse = function(m) {\n+  const inv = originalModInverse.apply(this, [m]);\n+  return inv.mod(m);\n+}\n+\n+forge.jsbn.BigInteger.prototype.modInverse = positiveModInverse;\n+\n module.exports = forge;"
        },
        {
          "filename": "test/algorithms/ecc-test.js",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+/*!\n+ *\n+ * Copyright (c) 2015 Cisco Systems, Inc. See LICENSE file.\n+ */\n+\"use strict\";\n+\n+var assert = require(\"chai\").assert;\n+\n+const CURVES = require('../../lib/deps/ecc/curves.js');\n+const BigInteger = require('../../lib/deps/forge').jsbn.BigInteger;\n+\n+describe(\"ecc/positive\", function() {\n+  const negativeModInverseCases = [\n+    '101067240514044546216936289506154965497874315269115226505131909313278720169941',\n+    '47260992668897782856940293132731814279826643476197468731642996160637470667669',\n+  ]\n+  \n+  const p = CURVES[\"P-256\"].curve.p;\n+\n+  const runner = () => {\n+    for (const kStr of negativeModInverseCases) {\n+      const k = new BigInteger(kStr);\n+      const kinv = k.modInverse(p);\n+      assert.isAtLeast(kinv.s, 0, \"Negative mod inverse\");\n+    }\n+  };\n+\n+  it('normalizes negative modular inverses', runner);\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "37db9e5371dc9a0557767a6a0190e2b0ab5cf3b6",
            "date": "2023-02-16T15:29:10Z",
            "author_login": "justaugustus"
          },
          {
            "sha": "992c1cb306abf72b763cc91780036d2a906d018a",
            "date": "2023-02-15T20:15:18Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "901d91508a70e3b9bdfc45688ea07bb4e1b8210d",
            "date": "2023-02-08T13:28:24Z",
            "author_login": "bifurcation"
          },
          {
            "sha": "e95481a67b69d0c0a0d5ea33c1a42fa3b81a202a",
            "date": "2023-01-20T01:26:36Z",
            "author_login": "bifurcation"
          },
          {
            "sha": "a27dd90cce16eb89db63afd37ef572173f944ad1",
            "date": "2022-11-10T23:20:30Z",
            "author_login": "justaugustus"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "node-jose is a JavaScript implementation of the JSON Object Signing and Encryption (JOSE) for web browsers and node.js-based servers. Prior to version 2.2.0, when using the non-default \"fallback\" crypto back-end, ECC operations in `node-jose` can trigger a Denial-of-Service (DoS) condition, due to a possible infinite loop in an internal calculation.  For some ECC operations, this condition is triggered randomly; for others, it can be triggered by malicious input. The issue has been patched in version 2.2.0. Since this issue is only present in the \"fallback\" crypto implementation, it can be avoided by ensuring that either WebCrypto or the Node `crypto` module is available in the JS environment where `node-jose` is being run.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-16T19:15:14.650",
    "last_modified": "2024-11-21T07:49:52.583",
    "fix_date": "2023-02-08T13:28:24Z"
  },
  "references": [
    {
      "url": "https://github.com/cisco/node-jose/commit/901d91508a70e3b9bdfc45688ea07bb4e1b8210d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cisco/node-jose/security/advisories/GHSA-5h4j-qrvg-9xhw",
      "source": "security-advisories@github.com",
      "tags": [
        "Technical Description",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/cisco/node-jose/commit/901d91508a70e3b9bdfc45688ea07bb4e1b8210d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cisco/node-jose/security/advisories/GHSA-5h4j-qrvg-9xhw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Technical Description",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.067165",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "node-jose",
    "owner": "cisco",
    "created_at": "2015-09-10T21:49:24Z",
    "updated_at": "2025-01-21T20:35:23Z",
    "pushed_at": "2024-08-12T08:22:34Z",
    "size": 1536,
    "stars": 707,
    "forks": 125,
    "open_issues": 65,
    "watchers": 707,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 660107,
      "Shell": 2004
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:02:54.607250"
  }
}