{
  "cve_id": "CVE-2023-25667",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
    "related_commits": [
      "8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
      "8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
      "commit_date": "2022-10-15T19:26:47Z",
      "author": {
        "login": "API92",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix integer overflow for multiframe gifs.",
        "length": 41,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 13,
        "deletions": 11
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/image/decode_image_op.cc",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -452,12 +452,12 @@ class DecodeImageV2Op : public OpKernel {\n     // allocation til after dtype conversion is done. `gif`::Decode` supports\n     // uint8 only.\n     Tensor* output = nullptr;\n-    int buffer_size = 0;\n+    ptrdiff_t buffer_size = 0;\n     string error_string;\n     uint8* buffer = gif::Decode(\n         input.data(), input.size(),\n         [&](int num_frames, int width, int height, int channels) -> uint8* {\n-          buffer_size = num_frames * height * width * channels;\n+          buffer_size = ptrdiff_t(num_frames) * height * width * channels;\n \n           Status status;\n           // By the existing API, we support decoding GIF with `decode_jpeg` or"
        },
        {
          "filename": "tensorflow/core/lib/gif/gif_io.cc",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -105,7 +105,7 @@ uint8* Decode(const void* srcdata, int datasize,\n   uint8* const dstdata =\n       allocate_output(target_num_frames, width, height, channel);\n   if (!dstdata) return nullptr;\n-  for (int k = 0; k < target_num_frames; k++) {\n+  for (ptrdiff_t k = 0; k < target_num_frames; k++) {\n     uint8* this_dst = dstdata + k * width * channel * height;\n \n     SavedImage* this_image = &gif_file->SavedImages[k];\n@@ -125,10 +125,10 @@ uint8* Decode(const void* srcdata, int datasize,\n \n     if (k > 0) {\n       uint8* last_dst = dstdata + (k - 1) * width * channel * height;\n-      for (int i = 0; i < height; ++i) {\n+      for (ptrdiff_t i = 0; i < height; ++i) {\n         uint8* p_dst = this_dst + i * width * channel;\n         uint8* l_dst = last_dst + i * width * channel;\n-        for (int j = 0; j < width; ++j) {\n+        for (ptrdiff_t j = 0; j < width; ++j) {\n           p_dst[j * channel + 0] = l_dst[j * channel + 0];\n           p_dst[j * channel + 1] = l_dst[j * channel + 1];\n           p_dst[j * channel + 2] = l_dst[j * channel + 2];\n@@ -141,9 +141,9 @@ uint8* Decode(const void* srcdata, int datasize,\n       // If the first frame does not fill the entire canvas then fill the\n       // unoccupied canvas with zeros (black).\n       if (k == 0) {\n-        for (int i = 0; i < height; ++i) {\n+        for (ptrdiff_t i = 0; i < height; ++i) {\n           uint8* p_dst = this_dst + i * width * channel;\n-          for (int j = 0; j < width; ++j) {\n+          for (ptrdiff_t j = 0; j < width; ++j) {\n             p_dst[j * channel + 0] = 0;\n             p_dst[j * channel + 1] = 0;\n             p_dst[j * channel + 2] = 0;\n@@ -165,9 +165,9 @@ uint8* Decode(const void* srcdata, int datasize,\n       return nullptr;\n     }\n \n-    for (int i = imgTop; i < imgBottom; ++i) {\n+    for (ptrdiff_t i = imgTop; i < imgBottom; ++i) {\n       uint8* p_dst = this_dst + i * width * channel;\n-      for (int j = imgLeft; j < imgRight; ++j) {\n+      for (ptrdiff_t j = imgLeft; j < imgRight; ++j) {\n         GifByteType color_index =\n             this_image->RasterBits[(i - img_desc->Top) * (img_desc->Width) +\n                                    (j - img_desc->Left)];"
        },
        {
          "filename": "tensorflow/core/lib/gif/gif_io_test.cc",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -52,7 +52,7 @@ void TestDecodeGif(Env* env, DecodeGifTestCase testcase) {\n         w = width;\n         h = height;\n         c = channels;\n-        return new uint8[frame_cnt * height * width * channels];\n+        return new uint8[ptrdiff_t(frame_cnt) * height * width * channels];\n       },\n       &error_string));\n   ASSERT_NE(imgdata, nullptr);\n@@ -72,7 +72,8 @@ TEST(GifTest, Gif) {\n        {testdata_path + \"optimized.gif\", 12, 20, 40, 3},\n        {testdata_path + \"red_black.gif\", 1, 16, 16, 3},\n        {testdata_path + \"scan.gif\", 12, 20, 40, 3},\n-       {testdata_path + \"squares.gif\", 2, 16, 16, 3}});\n+       {testdata_path + \"squares.gif\", 2, 16, 16, 3},\n+       {testdata_path + \"3g_multiframe.gif\", 519, 1920, 1080, 3}});\n \n   for (const auto& tc : testcases) {\n     TestDecodeGif(env, tc);"
        },
        {
          "filename": "tensorflow/core/lib/gif/testdata/3g_multiframe.gif",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "tensorflow/core/lib/gif/testdata/BUILD",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@ filegroup(\n         \"scan.gif\",\n         \"red_black.gif\",\n         \"squares.gif\",\n+        \"3g_multiframe.gif\",\n         \"pendulum_sm.gif\",\n         # Add groundtruth frames for `pendulum_sm.gif`.\n         # PNG format because it's lossless."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5c27f5f4dc39afdefbd93c2ef266a8c7ab534a98",
            "date": "2025-01-25T18:55:10Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "05df81c283627135b7651c9c7a8fa0035bff2206",
            "date": "2025-01-25T17:06:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4075a7dd74ea543557d1824e16721598e1a6af8d",
            "date": "2025-01-25T17:06:30Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4d08d96d6a0aea39c5bd90d9728dbcf59008993c",
            "date": "2025-01-25T17:04:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "1b58ec4dcd6e5752598dc57d4788119f8ea12e23",
            "date": "2025-01-25T11:39:06Z",
            "author_login": "tensorflower-gardener"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-190",
    "description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.12.0 and 2.11.1, integer overflow occurs when `2^31 <= num_frames * height * width * channels < 2^32`, for example Full HD screencast of at least 346 frames. A fix is included in TensorFlow version 2.12.0 and version 2.11.1.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-25T00:15:07.537",
    "last_modified": "2024-11-21T07:49:54.343",
    "fix_date": "2022-10-15T19:26:47Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/8dc723fcdd1a6127d6c970bd2ecb18b019a1a58d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fqm2-gh8w-gr68",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.006301",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-26T06:52:14Z",
    "pushed_at": "2025-01-26T07:27:00Z",
    "size": 1126495,
    "stars": 187418,
    "forks": 74442,
    "open_issues": 6822,
    "watchers": 187418,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101327392,
      "Python": 45791326,
      "MLIR": 10764225,
      "HTML": 7662661,
      "Starlark": 7439181,
      "Go": 2171369,
      "C": 1294440,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 702245,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 38067,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15545,
      "avg_commits_per_week": 298.9423076923077,
      "days_active_last_year": 354
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:37:26.588757"
  }
}