{
  "cve_id": "CVE-2023-25668",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb",
    "related_commits": [
      "7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb",
      "7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb.patch",
    "fix_commit_details": {
      "sha": "7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb",
      "commit_date": "2022-11-09T23:40:12Z",
      "author": {
        "login": "sagunb",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix asan issue with QuantizeAndDequantizeV2/V3/V4/V4Grad shape inference functions.",
        "length": 113,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 82,
        "additions": 82,
        "deletions": 0
      },
      "files": [
        {
          "filename": "tensorflow/core/ops/array_ops.cc",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -2879,6 +2879,10 @@ REGISTER_OP(\"QuantizeAndDequantizeV2\")\n                                        axis);\n       } else if (axis != -1) {\n         ShapeHandle input;\n+        if (axis >= kint32max) {\n+          return errors::InvalidArgument(\n+              \"Axis cannot be >= kint32max value, got \", axis);\n+        }\n         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));\n         DimensionHandle depth;\n         TF_RETURN_IF_ERROR(\n@@ -2914,6 +2918,10 @@ REGISTER_OP(\"QuantizeAndDequantizeV4\")\n                                        axis);\n       } else if (axis != -1) {\n         ShapeHandle input;\n+        if (axis >= kint32max) {\n+          return errors::InvalidArgument(\n+              \"Axis cannot be >= kint32max value, got \", axis);\n+        }\n         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));\n         DimensionHandle depth;\n         TF_RETURN_IF_ERROR(\n@@ -2945,6 +2953,10 @@ REGISTER_OP(\"QuantizeAndDequantizeV4Grad\")\n                                        axis);\n       } else if (axis != -1) {\n         ShapeHandle input;\n+        if (axis >= kint32max) {\n+          return errors::InvalidArgument(\n+              \"Axis cannot be >= kint32max value, got \", axis);\n+        }\n         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));\n         DimensionHandle depth;\n         TF_RETURN_IF_ERROR(\n@@ -2981,6 +2993,10 @@ REGISTER_OP(\"QuantizeAndDequantizeV3\")\n                                        axis);\n       } else if (axis != -1) {\n         ShapeHandle input;\n+        if (axis >= kint32max) {\n+          return errors::InvalidArgument(\n+              \"Axis cannot be >= kint32max value, got \", axis);\n+        }\n         TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));\n         DimensionHandle depth;\n         TF_RETURN_IF_ERROR("
        },
        {
          "filename": "tensorflow/python/kernel_tests/array_ops/array_ops_test.py",
          "status": "modified",
          "additions": 66,
          "deletions": 0,
          "patch": "@@ -1856,6 +1856,72 @@ def testOutOfBoundAxis(self):\n               max_range=input_max,\n               axis=2**31 - 1))\n \n+  @test_util.run_v2_only\n+  def testInvalidAxis(self):\n+\n+    @def_function.function\n+    def test_quantize_and_dequantize_v2():\n+      gen_array_ops.quantize_and_dequantize_v2(\n+          input=[2.5],\n+          input_min=[1.0],\n+          input_max=[10.0],\n+          signed_input=True,\n+          num_bits=1,\n+          range_given=True,\n+          round_mode=\"HALF_TO_EVEN\",\n+          narrow_range=True,\n+          axis=0x7fffffff)\n+\n+    @def_function.function\n+    def test_quantize_and_dequantize_v3():\n+      gen_array_ops.quantize_and_dequantize_v3(\n+          input=[2.5],\n+          input_min=[1.0],\n+          input_max=[10.0],\n+          num_bits=1,\n+          signed_input=True,\n+          range_given=True,\n+          narrow_range=True,\n+          axis=0x7fffffff)\n+\n+    @def_function.function\n+    def test_quantize_and_dequantize_v4():\n+      gen_array_ops.quantize_and_dequantize_v4(\n+          input=[2.5],\n+          input_min=[1.0],\n+          input_max=[10.0],\n+          signed_input=True,\n+          num_bits=1,\n+          range_given=True,\n+          round_mode=\"HALF_TO_EVEN\",\n+          narrow_range=True,\n+          axis=0x7fffffff)\n+\n+    @def_function.function\n+    def test_quantize_and_dequantize_v4_grad():\n+      gen_array_ops.quantize_and_dequantize_v4_grad(\n+          gradients=[2.5],\n+          input=[2.5],\n+          input_min=[1.0],\n+          input_max=[10.0],\n+          axis=0x7fffffff)\n+\n+    with self.assertRaisesRegex(\n+        ValueError, \"Axis cannot be >= kint32max value, got 2147483647\"):\n+      test_quantize_and_dequantize_v2()\n+\n+    with self.assertRaisesRegex(\n+        ValueError, \"Axis cannot be >= kint32max value, got 2147483647\"):\n+      test_quantize_and_dequantize_v3()\n+\n+    with self.assertRaisesRegex(\n+        ValueError, \"Axis cannot be >= kint32max value, got 2147483647\"):\n+      test_quantize_and_dequantize_v4()\n+\n+    with self.assertRaisesRegex(\n+        ValueError, \"Axis cannot be >= kint32max value, got 2147483647\"):\n+      test_quantize_and_dequantize_v4_grad()\n+\n \n @test_util.run_all_in_graph_and_eager_modes\n class SortedSearchTest(test_util.TensorFlowTestCase):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f04ac71a7ba0972752968c52b299e9e53795c9bf",
            "date": "2025-01-14T18:36:27Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "af7f5e877165ab909d171a6ec560a8ce80f410b5",
            "date": "2025-01-14T18:29:16Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "29a59f3245aadc7db8c6cc3a3a0d214f2dd10d6b",
            "date": "2025-01-14T18:26:14Z",
            "author_login": "sergey-kozub"
          },
          {
            "sha": "56e196bc47a70e2f41926613f4cd370ddd734f3a",
            "date": "2025-01-14T18:00:32Z",
            "author_login": "loislo"
          },
          {
            "sha": "b13ee8b852a232dc6dd339e0de4e22f735136b7a",
            "date": "2025-01-14T16:59:22Z",
            "author_login": "Moerafaat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-122",
    "description": "TensorFlow is an open source platform for machine learning. Attackers using Tensorflow prior to 2.12.0 or 2.11.1 can access heap memory which is not in the control of user, leading to a crash or remote code execution. The fix will be included in TensorFlow version 2.12.0 and will also cherrypick this commit on TensorFlow version 2.11.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-25T00:15:07.593",
    "last_modified": "2024-11-21T07:49:54.470",
    "fix_date": "2022-11-09T23:40:12Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/7b174a0f2e40ff3f3aa957aecddfd5aaae35eccb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gw97-ff7c-9v96",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.006427",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}