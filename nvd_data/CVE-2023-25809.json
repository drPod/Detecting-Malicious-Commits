{
  "cve_id": "CVE-2023-25809",
  "github_data": {
    "repository": "opencontainers/runc",
    "fix_commit": "0d62b950e60f6980b54fe3bafd9a9c608dc1df17",
    "related_commits": [
      "0d62b950e60f6980b54fe3bafd9a9c608dc1df17",
      "0d62b950e60f6980b54fe3bafd9a9c608dc1df17"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0d62b950e60f6980b54fe3bafd9a9c608dc1df17",
      "commit_date": "2023-03-29T06:18:15Z",
      "author": {
        "login": "hqhq",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-m8cg-xc2p-r3fc",
        "length": 80,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 51,
        "deletions": 19
      },
      "files": [
        {
          "filename": "libcontainer/rootfs_linux.go",
          "status": "modified",
          "additions": 34,
          "deletions": 19,
          "patch": "@@ -306,26 +306,41 @@ func mountCgroupV2(m *configs.Mount, c *mountConfig) error {\n \tif err := os.MkdirAll(dest, 0o755); err != nil {\n \t\treturn err\n \t}\n-\treturn utils.WithProcfd(c.root, m.Destination, func(procfd string) error {\n-\t\tif err := mount(m.Source, m.Destination, procfd, \"cgroup2\", uintptr(m.Flags), m.Data); err != nil {\n-\t\t\t// when we are in UserNS but CgroupNS is not unshared, we cannot mount cgroup2 (#2158)\n-\t\t\tif errors.Is(err, unix.EPERM) || errors.Is(err, unix.EBUSY) {\n-\t\t\t\tsrc := fs2.UnifiedMountpoint\n-\t\t\t\tif c.cgroupns && c.cgroup2Path != \"\" {\n-\t\t\t\t\t// Emulate cgroupns by bind-mounting\n-\t\t\t\t\t// the container cgroup path rather than\n-\t\t\t\t\t// the whole /sys/fs/cgroup.\n-\t\t\t\t\tsrc = c.cgroup2Path\n-\t\t\t\t}\n-\t\t\t\terr = mount(src, m.Destination, procfd, \"\", uintptr(m.Flags)|unix.MS_BIND, \"\")\n-\t\t\t\tif c.rootlessCgroups && errors.Is(err, unix.ENOENT) {\n-\t\t\t\t\terr = nil\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn err\n-\t\t}\n-\t\treturn nil\n+\terr = utils.WithProcfd(c.root, m.Destination, func(procfd string) error {\n+\t\treturn mount(m.Source, m.Destination, procfd, \"cgroup2\", uintptr(m.Flags), m.Data)\n \t})\n+\tif err == nil || !(errors.Is(err, unix.EPERM) || errors.Is(err, unix.EBUSY)) {\n+\t\treturn err\n+\t}\n+\n+\t// When we are in UserNS but CgroupNS is not unshared, we cannot mount\n+\t// cgroup2 (#2158), so fall back to bind mount.\n+\tbindM := &configs.Mount{\n+\t\tDevice:           \"bind\",\n+\t\tSource:           fs2.UnifiedMountpoint,\n+\t\tDestination:      m.Destination,\n+\t\tFlags:            unix.MS_BIND | m.Flags,\n+\t\tPropagationFlags: m.PropagationFlags,\n+\t}\n+\tif c.cgroupns && c.cgroup2Path != \"\" {\n+\t\t// Emulate cgroupns by bind-mounting the container cgroup path\n+\t\t// rather than the whole /sys/fs/cgroup.\n+\t\tbindM.Source = c.cgroup2Path\n+\t}\n+\t// mountToRootfs() handles remounting for MS_RDONLY.\n+\t// No need to set c.fd here, because mountToRootfs() calls utils.WithProcfd() by itself in mountPropagate().\n+\terr = mountToRootfs(bindM, c)\n+\tif c.rootlessCgroups && errors.Is(err, unix.ENOENT) {\n+\t\t// ENOENT (for `src = c.cgroup2Path`) happens when rootless runc is being executed\n+\t\t// outside the userns+mountns.\n+\t\t//\n+\t\t// Mask `/sys/fs/cgroup` to ensure it is read-only, even when `/sys` is mounted\n+\t\t// with `rbind,ro` (`runc spec --rootless` produces `rbind,ro` for `/sys`).\n+\t\terr = utils.WithProcfd(c.root, m.Destination, func(procfd string) error {\n+\t\t\treturn maskPath(procfd, c.label)\n+\t\t})\n+\t}\n+\treturn err\n }\n \n func doTmpfsCopyUp(m *configs.Mount, rootfs, mountLabel string) (Err error) {"
        },
        {
          "filename": "tests/integration/mounts.bats",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -63,3 +63,20 @@ function teardown() {\n \trunc run test_busybox\n \t[ \"$status\" -eq 0 ]\n }\n+\n+# https://github.com/opencontainers/runc/security/advisories/GHSA-m8cg-xc2p-r3fc\n+@test \"runc run [ro /sys/fs/cgroup mount]\" {\n+\t# With cgroup namespace\n+\tupdate_config '.process.args |= [\"sh\", \"-euc\", \"for f in `grep /sys/fs/cgroup /proc/mounts | awk \\\"{print \\\\\\\\$2}\\\"| uniq`; do grep -w $f /proc/mounts | tail -n1; done\"]'\n+\trunc run test_busybox\n+\t[ \"$status\" -eq 0 ]\n+\t[ \"${#lines[@]}\" -ne 0 ]\n+\tfor line in \"${lines[@]}\"; do [[ \"${line}\" == *'ro,'* ]]; done\n+\n+\t# Without cgroup namespace\n+\tupdate_config '.linux.namespaces -= [{\"type\": \"cgroup\"}]'\n+\trunc run test_busybox\n+\t[ \"$status\" -eq 0 ]\n+\t[ \"${#lines[@]}\" -ne 0 ]\n+\tfor line in \"${lines[@]}\"; do [[ \"${line}\" == *'ro,'* ]]; done\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8702864454c4001d04aa3eaf49c2f8a8310438f5",
            "date": "2025-01-22T01:18:42Z",
            "author_login": "AkihiroSuda"
          },
          {
            "sha": "7b26da9ee3abf274ac90b7bedcbf11c3df43127a",
            "date": "2025-01-21T17:58:31Z",
            "author_login": "evanphx"
          },
          {
            "sha": "a7d76457f4b630449d04a8caa81c0a7f2052afd3",
            "date": "2025-01-16T12:34:13Z",
            "author_login": "lifubang"
          },
          {
            "sha": "9af7952249a894213c88b8cc5392cc18cc05e759",
            "date": "2025-01-16T04:05:13Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "610aa88ab201f289c05c2e262912d0630f46eb35",
            "date": "2025-01-10T20:23:22Z",
            "author_login": "kolyshkin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-281",
    "description": "runc is a CLI tool for spawning and running containers according to the OCI specification. In affected versions it was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons: 1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl) or 2. when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare). A container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host . Other users's cgroup hierarchies are not affected. Users are advised to upgrade to version 1.1.5. Users unable to upgrade may unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts. or add `/sys/fs/cgroup` to `maskedPaths`.\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-03-29T19:15:22.170",
    "last_modified": "2024-11-21T07:50:14.570",
    "fix_date": "2023-03-29T06:18:15Z"
  },
  "references": [
    {
      "url": "https://github.com/opencontainers/runc/commit/0d62b950e60f6980b54fe3bafd9a9c608dc1df17",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/opencontainers/runc/security/advisories/GHSA-m8cg-xc2p-r3fc",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/opencontainers/runc/commit/0d62b950e60f6980b54fe3bafd9a9c608dc1df17",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/opencontainers/runc/security/advisories/GHSA-m8cg-xc2p-r3fc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.025386",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "runc",
    "owner": "opencontainers",
    "created_at": "2015-06-05T23:30:45Z",
    "updated_at": "2025-01-25T14:21:04Z",
    "pushed_at": "2025-01-22T01:18:42Z",
    "size": 21577,
    "stars": 12075,
    "forks": 2135,
    "open_issues": 371,
    "watchers": 12075,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-1.0",
      "release-1.1",
      "release-1.2"
    ],
    "languages": {
      "Go": 1253071,
      "Shell": 305324,
      "C": 45119,
      "Makefile": 7226,
      "Dockerfile": 2644,
      "Ruby": 2035
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:03:22.591300"
  }
}