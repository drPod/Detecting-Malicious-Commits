{
  "cve_id": "CVE-2023-25819",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "a9f2c6db64e7d78b8e0f55e7bd77c5fe3459b831",
    "related_commits": [
      "a9f2c6db64e7d78b8e0f55e7bd77c5fe3459b831",
      "a9f2c6db64e7d78b8e0f55e7bd77c5fe3459b831"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a9f2c6db64e7d78b8e0f55e7bd77c5fe3459b831",
      "commit_date": "2023-02-22T15:01:32Z",
      "author": {
        "login": "Flink",
        "type": "User",
        "stats": {
          "total_commits": 188,
          "average_weekly_commits": 0.27050359712230215,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 80
        }
      },
      "commit_message": {
        "title": "SECURITY: Show only visible tags in metadata",
        "length": 154,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 75,
        "additions": 53,
        "deletions": 22
      },
      "files": [
        {
          "filename": "app/controllers/topics_controller.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1231,7 +1231,7 @@ def perform_show_response\n \n     respond_to do |format|\n       format.html do\n-        @tags = SiteSetting.tagging_enabled ? @topic_view.topic.tags : []\n+        @tags = SiteSetting.tagging_enabled ? @topic_view.topic.tags.visible(guardian) : []\n         @breadcrumbs = helpers.categories_breadcrumb(@topic_view.topic) || []\n         @description_meta =\n           @topic_view.topic.excerpt.present? ? @topic_view.topic.excerpt : @topic_view.summary"
        },
        {
          "filename": "app/models/tag.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -38,6 +38,7 @@ class Tag < ActiveRecord::Base\n         ->(guardian) { where(\"tags.#{Tag.topic_count_column(guardian)} > 0\") }\n \n   scope :base_tags, -> { where(target_tag_id: nil) }\n+  scope :visible, ->(guardian = nil) { merge(DiscourseTagging.visible_tags(guardian)) }\n \n   has_many :tag_users, dependent: :destroy # notification settings\n "
        },
        {
          "filename": "app/views/topics/show.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -129,7 +129,7 @@\n \n   <% content_for :head do %>\n     <%= auto_discovery_link_tag(@topic_view, {action: :feed, slug: @topic_view.topic.slug, topic_id: @topic_view.topic.id}, rel: 'alternate nofollow', title: t('rss_posts_in_topic', topic: @topic_view.title), type: 'application/rss+xml') %>\n-    <%= raw crawlable_meta_data(title: @topic_view.title, description: @topic_view.summary(strip_images: true), image: @topic_view.image_url, read_time: @topic_view.read_time, like_count: @topic_view.like_count, ignore_canonical: true, published_time: @topic_view.published_time, breadcrumbs: @breadcrumbs, tags: @topic_view.tags) %>\n+    <%= raw crawlable_meta_data(title: @topic_view.title, description: @topic_view.summary(strip_images: true), image: @topic_view.image_url, read_time: @topic_view.read_time, like_count: @topic_view.like_count, ignore_canonical: true, published_time: @topic_view.published_time, breadcrumbs: @breadcrumbs, tags: @tags.map(&:name)) %>\n \n     <% if @topic_view.prev_page || @topic_view.next_page %>\n       <% if @topic_view.prev_page %>"
        },
        {
          "filename": "lib/topic_view.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -244,9 +244,9 @@ def page_title\n       if @topic.category_id != SiteSetting.uncategorized_category_id && @topic.category_id &&\n            @topic.category\n         title += \" - #{@topic.category.name}\"\n-      elsif SiteSetting.tagging_enabled && @topic.tags.exists?\n+      elsif SiteSetting.tagging_enabled && visible_tags.exists?\n         title +=\n-          \" - #{@topic.tags.order(\"tags.#{Tag.topic_count_column(@guardian)} DESC\").first.name}\"\n+          \" - #{visible_tags.order(\"tags.#{Tag.topic_count_column(@guardian)} DESC\").first.name}\"\n       end\n     end\n     title\n@@ -713,10 +713,6 @@ def mentioned_users\n       end\n   end\n \n-  def tags\n-    @topic.tags.map(&:name)\n-  end\n-\n   protected\n \n   def read_posts_set\n@@ -820,7 +816,7 @@ def filter_posts_by_ids(post_ids)\n   def find_topic(topic_or_topic_id)\n     return topic_or_topic_id if topic_or_topic_id.is_a?(Topic)\n     # with_deleted covered in #check_and_raise_exceptions\n-    Topic.with_deleted.includes(:category, :tags).find_by(id: topic_or_topic_id)\n+    Topic.with_deleted.includes(:category).find_by(id: topic_or_topic_id)\n   end\n \n   def unfiltered_posts\n@@ -990,4 +986,8 @@ def check_and_raise_exceptions(skip_staff_action)\n       end\n     end\n   end\n+\n+  def visible_tags\n+    @visible_tags ||= topic.tags.visible(guardian)\n+  end\n end"
        },
        {
          "filename": "spec/lib/topic_view_spec.rb",
          "status": "modified",
          "additions": 19,
          "deletions": 13,
          "patch": "@@ -825,6 +825,25 @@ def topic_view_near(post, show_deleted = false)\n             it { is_expected.not_to include(tag1.name) }\n             it { is_expected.not_to include(tag2.name) }\n           end\n+\n+          context \"with restricted tags\" do\n+            let(:tag_group) { Fabricate.build(:tag_group) }\n+            let(:tag_group_permission) do\n+              Fabricate.build(:tag_group_permission, tag_group: tag_group)\n+            end\n+\n+            before do\n+              SiteSetting.tagging_enabled = true\n+              # avoid triggering a `before_create` callback in `TagGroup` which\n+              # messes with permissions\n+              tag_group.tag_group_permissions << tag_group_permission\n+              tag_group.save!\n+              tag_group_permission.tag_group.tags << tag2\n+            end\n+\n+            it { is_expected.not_to include(tag2.name) }\n+            it { is_expected.to include(tag1.name) }\n+          end\n         end\n       end\n     end\n@@ -1072,17 +1091,4 @@ def topic_view_for_post(post_number)\n       end\n     end\n   end\n-\n-  describe \"#tags\" do\n-    subject(:topic_view_tags) { topic_view.tags }\n-\n-    let(:topic_view) { described_class.new(topic, user) }\n-    let(:topic) { Fabricate.build(:topic, tags: tags) }\n-    let(:tags) { Fabricate.build_times(2, :tag) }\n-    let(:user) { Fabricate(:user) }\n-\n-    it \"returns the tags names\" do\n-      expect(topic_view_tags).to match tags.map(&:name)\n-    end\n-  end\n end"
        },
        {
          "filename": "spec/requests/topics_controller_spec.rb",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -2507,6 +2507,28 @@ def fabricate_topic(user, category = nil)\n         expect(body).to have_tag(:script, src: \"/assets/discourse.js\")\n         expect(body).to have_tag(:meta, with: { name: \"fragment\" })\n       end\n+\n+      context \"with restricted tags\" do\n+        let(:tag_group) { Fabricate.build(:tag_group) }\n+        let(:tag_group_permission) { Fabricate.build(:tag_group_permission, tag_group: tag_group) }\n+        let(:restricted_tag) { Fabricate(:tag) }\n+        let(:public_tag) { Fabricate(:tag) }\n+\n+        before do\n+          # avoid triggering a `before_create` callback in `TagGroup` which\n+          # messes with permissions\n+          tag_group.tag_group_permissions << tag_group_permission\n+          tag_group.save!\n+          tag_group_permission.tag_group.tags << restricted_tag\n+          topic.tags << [public_tag, restricted_tag]\n+        end\n+\n+        it \"doesn\u2019t expose restricted tags\" do\n+          get \"/t/#{topic.slug}/#{topic.id}/print\", headers: { HTTP_USER_AGENT: \"Rails Testing\" }\n+          expect(response.body).to match(public_tag.name)\n+          expect(response.body).not_to match(restricted_tag.name)\n+        end\n+      end\n     end\n \n     it \"records redirects\" do"
        },
        {
          "filename": "spec/views/topics/show.html.erb_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -12,6 +12,8 @@\n     view.stubs(:crawler_layout?).returns(false)\n     view.stubs(:url_for).returns(\"https://www.example.com/test.rss\")\n     view.instance_variable_set(\"@topic_view\", topic_view)\n+    assign(:tags, [])\n+\n     render template: \"topics/show\", formats: [:html]\n \n     expect(view.content_for(:head)).to match("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d2efdf5282a868d80e916caaeb51d40d1ea256a2",
            "date": "2025-01-24T21:33:06Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "4c1c4ba8d42db4d1c732af69c39740d2aee91410",
            "date": "2025-01-24T19:50:52Z",
            "author_login": "featheredtoast"
          },
          {
            "sha": "59a67758489683457e7dca5fd712710034c08631",
            "date": "2025-01-24T19:42:22Z",
            "author_login": "xfalcox"
          },
          {
            "sha": "9cc99ef6db77d82b4af95911ee503e227cceae62",
            "date": "2025-01-24T18:36:35Z",
            "author_login": "SamSaffron"
          },
          {
            "sha": "5a94ceda542e5a0d0d8b90219bb835a51780b502",
            "date": "2025-01-24T18:05:47Z",
            "author_login": "xfalcox"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-359",
    "description": "Discourse is an open source platform for community discussion. Tags that are normally private are showing in metadata. This affects any site running the `tests-passed` or `beta` branches >= 3.1.0.beta2. The issue is patched in the latest `beta` and `tests-passed` version of Discourse.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-04T01:15:10.227",
    "last_modified": "2024-11-21T07:50:15.840",
    "fix_date": "2023-02-22T15:01:32Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/a9f2c6db64e7d78b8e0f55e7bd77c5fe3459b831",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-xx2h-mwm7-hq6q",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/a9f2c6db64e7d78b8e0f55e7bd77c5fe3459b831",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-xx2h-mwm7-hq6q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.803309",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-26T07:21:20Z",
    "pushed_at": "2025-01-25T09:40:42Z",
    "size": 701178,
    "stars": 42998,
    "forks": 8411,
    "open_issues": 82,
    "watchers": 42998,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20337451,
      "JavaScript": 9453662,
      "HTML": 1461712,
      "Handlebars": 1061673,
      "SCSS": 987048,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5042,
      "avg_commits_per_week": 96.96153846153847,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:34:08.623080"
  }
}