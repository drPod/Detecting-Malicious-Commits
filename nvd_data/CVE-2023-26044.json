{
  "cve_id": "CVE-2023-26044",
  "github_data": {
    "repository": "reactphp/http",
    "fix_commit": "9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd",
    "related_commits": [
      "9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd",
      "9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd",
      "commit_date": "2023-02-27T14:05:56Z",
      "author": {
        "login": "clue",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-95x4-j7vc-h8mf",
        "length": 150,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 42,
        "additions": 41,
        "deletions": 1
      },
      "files": [
        {
          "filename": "src/Io/MultipartParser.php",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -26,6 +26,13 @@ final class MultipartParser\n      */\n     private $maxFileSize;\n \n+    /**\n+     * Based on $maxInputVars and $maxFileUploads\n+     *\n+     * @var int\n+     */\n+    private $maxMultipartBodyParts;\n+\n     /**\n      * ini setting \"max_input_vars\"\n      *\n@@ -62,6 +69,7 @@ final class MultipartParser\n      */\n     private $maxFileUploads;\n \n+    private $multipartBodyPartCount = 0;\n     private $postCount = 0;\n     private $filesCount = 0;\n     private $emptyCount = 0;\n@@ -87,6 +95,8 @@ public function __construct($uploadMaxFilesize = null, $maxFileUploads = null)\n \n         $this->uploadMaxFilesize = IniUtil::iniSizeToBytes($uploadMaxFilesize);\n         $this->maxFileUploads = $maxFileUploads === null ? (\\ini_get('file_uploads') === '' ? 0 : (int)\\ini_get('max_file_uploads')) : (int)$maxFileUploads;\n+\n+        $this->maxMultipartBodyParts = $this->maxInputVars + $this->maxFileUploads;\n     }\n \n     public function parse(ServerRequestInterface $request)\n@@ -101,6 +111,7 @@ public function parse(ServerRequestInterface $request)\n \n         $request = $this->request;\n         $this->request = null;\n+        $this->multipartBodyPartCount = 0;\n         $this->postCount = 0;\n         $this->filesCount = 0;\n         $this->emptyCount = 0;\n@@ -128,6 +139,10 @@ private function parseBody($boundary, $buffer)\n             // parse one part and continue searching for next\n             $this->parsePart(\\substr($buffer, $start, $end - $start));\n             $start = $end;\n+\n+            if (++$this->multipartBodyPartCount > $this->maxMultipartBodyParts) {\n+                break;\n+            }\n         }\n     }\n "
        },
        {
          "filename": "tests/Io/MultipartParserTest.php",
          "status": "modified",
          "additions": 26,
          "deletions": 1,
          "patch": "@@ -1026,4 +1026,29 @@ public function testPostMaxFileSizeIgnoredByFilesComingBeforeIt()\n         $this->assertTrue(isset($files['file4']));\n         $this->assertSame(UPLOAD_ERR_OK, $files['file4']->getError());\n     }\n-}\n\\ No newline at end of file\n+\n+    public function testWeOnlyParseTheAmountOfMultiPartChunksWeConfigured()\n+    {\n+        $boundary = \"---------------------------12758086162038677464950549563\";\n+\n+        $chunk = \"--$boundary\\r\\n\";\n+        $chunk .= \"Content-Disposition: form-data; name=\\\"f\\\"\\r\\n\";\n+        $chunk .= \"\\r\\n\";\n+        $chunk .= \"u\\r\\n\";\n+        $data = '';\n+        for ($i = 0; $i < 5000000; $i++) {\n+            $data .= $chunk;\n+        }\n+        $data .= \"--$boundary--\\r\\n\";\n+\n+        $request = new ServerRequest('POST', 'http://example.com/', array(\n+            'Content-Type' => 'multipart/form-data; boundary=' . $boundary,\n+        ), $data, 1.1);\n+\n+        $parser = new MultipartParser();\n+        $startTime = microtime(true);\n+        $parser->parse($request);\n+        $runTime = microtime(true) - $startTime;\n+        $this->assertLessThan(1, $runTime);\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fc5f0a6739ba4a10de3847bab4688c602e5fe948",
            "date": "2024-11-25T18:14:29Z",
            "author_login": "WyriHaximus"
          },
          {
            "sha": "559c30d44811a1f048c91c7ea297c0bfa0433368",
            "date": "2024-04-22T11:22:45Z",
            "author_login": "lulhum"
          },
          {
            "sha": "fc09a645340437c5484ed6a154f96186d60fe692",
            "date": "2024-08-27T06:12:57Z",
            "author_login": "WyriHaximus"
          },
          {
            "sha": "cd24a5bf09d4bd85f1da47f2d518020a6094e5d2",
            "date": "2024-08-18T21:03:19Z",
            "author_login": "WyriHaximus"
          },
          {
            "sha": "f1a0406b76e7dce5bc7ecb71e940a0352139fb02",
            "date": "2024-07-05T19:49:14Z",
            "author_login": "clue"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-400",
    "description": "react/http is an event-driven, streaming HTTP client and server implementation for ReactPHP.  Previous versions of ReactPHP's HTTP server component contain a potential DoS vulnerability that can cause high CPU load when processing large HTTP request bodies. This vulnerability has little to no impact on the default configuration, but can be exploited when explicitly using the RequestBodyBufferMiddleware with very large settings. This might lead to consuming large amounts of CPU time for processing requests and significantly delay or slow down the processing of legitimate user requests. This issue has been addressed in release 1.9.0. Users are advised to upgrade. Users unable to upgrade may keep the request body limited using RequestBodyBufferMiddleware with a sensible value which should mitigate the issue. An infrastructure or DevOps workaround could be to place a reverse proxy in front of the ReactPHP HTTP server to filter out any excessive HTTP request bodies.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-17T18:15:09.247",
    "last_modified": "2024-11-21T07:50:38.973",
    "fix_date": "2023-02-27T14:05:56Z"
  },
  "references": [
    {
      "url": "https://github.com/reactphp/http/commit/9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/reactphp/http/security/advisories/GHSA-95x4-j7vc-h8mf",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/reactphp/http/commit/9681f764b80c45ebfb5fe2ea7da5bd3babfcdcfd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/reactphp/http/security/advisories/GHSA-95x4-j7vc-h8mf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.978627",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "http",
    "owner": "reactphp",
    "created_at": "2012-05-10T17:31:28Z",
    "updated_at": "2025-01-23T06:06:40Z",
    "pushed_at": "2024-11-25T18:14:29Z",
    "size": 1619,
    "stars": 755,
    "forks": 145,
    "open_issues": 20,
    "watchers": 755,
    "has_security_policy": false,
    "default_branch": "3.x",
    "protected_branches": [],
    "languages": {
      "PHP": 815844
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:24:34.358016"
  }
}