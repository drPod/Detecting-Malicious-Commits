{
  "cve_id": "CVE-2023-26051",
  "github_data": {
    "repository": "saleor/saleor",
    "fix_commit": "31bce881ccccf0d79a9b14ecb6ca3138d1edeec1",
    "related_commits": [
      "31bce881ccccf0d79a9b14ecb6ca3138d1edeec1",
      "31bce881ccccf0d79a9b14ecb6ca3138d1edeec1"
    ],
    "patch_url": "https://github.com/saleor/saleor/commit/31bce881ccccf0d79a9b14ecb6ca3138d1edeec1.patch",
    "fix_commit_details": {
      "sha": "31bce881ccccf0d79a9b14ecb6ca3138d1edeec1",
      "commit_date": "2023-03-02T12:00:09Z",
      "author": {
        "login": "maarcingebala",
        "type": "User",
        "stats": {
          "total_commits": 3907,
          "average_weekly_commits": 6.271268057784912,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 365
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-r8qr-wwg3-2r85",
        "length": 154,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 83,
        "additions": 74,
        "deletions": 9
      },
      "files": [
        {
          "filename": "saleor/graphql/account/tests/test_account.py",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -5278,6 +5278,7 @@ def test_address_validation_rules_fields_in_camel_case(user_api_client):\n             errors {\n                 field\n                 message\n+                code\n             }\n         }\n     }\n@@ -5516,12 +5517,10 @@ def test_account_reset_password_user_is_inactive(\n         \"channel\": channel_USD.slug,\n     }\n     response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n-    results = response.json()\n-    assert \"errors\" in results\n-    assert (\n-        results[\"errors\"][0][\"message\"]\n-        == \"Invalid token. User does not exist or is inactive.\"\n-    )\n+    content = get_graphql_content(response)\n+    data = content[\"data\"][\"requestPasswordReset\"]\n+    assert len(data[\"errors\"]) == 1\n+    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.JWT_INVALID_TOKEN.name\n     assert not mocked_notify.called\n \n "
        },
        {
          "filename": "saleor/graphql/core/mutations.py",
          "status": "modified",
          "additions": 18,
          "deletions": 2,
          "patch": "@@ -19,6 +19,7 @@\n from uuid import UUID\n \n import graphene\n+import jwt\n from django.core.exceptions import (\n     NON_FIELD_ERRORS,\n     ImproperlyConfigured,\n@@ -32,6 +33,7 @@\n from graphene.types.mutation import MutationOptions\n from graphql.error import GraphQLError\n \n+from ...account.error_codes import AccountErrorCode\n from ...core.error_codes import MetadataErrorCode\n from ...core.exceptions import PermissionDenied\n from ...core.utils.events import call_event\n@@ -502,7 +504,14 @@ def check_permissions(cls, context, permissions=None, **data):\n     @classmethod\n     def mutate(cls, root, info: ResolveInfo, **data):\n         disallow_replica_in_context(info.context)\n-        setup_context_user(info.context)\n+        try:\n+            setup_context_user(info.context)\n+        except jwt.InvalidTokenError:\n+            return cls.handle_errors(\n+                ValidationError(\n+                    \"Invalid token\", code=AccountErrorCode.JWT_INVALID_TOKEN.value\n+                )\n+            )\n \n         if not cls.check_permissions(info.context, data=data):\n             raise PermissionDenied(permissions=cls._meta.permissions)\n@@ -938,7 +947,14 @@ def perform_mutation(  # type: ignore[override]\n     @classmethod\n     def mutate(cls, root, info: ResolveInfo, **data):\n         disallow_replica_in_context(info.context)\n-        setup_context_user(info.context)\n+        try:\n+            setup_context_user(info.context)\n+        except jwt.InvalidTokenError:\n+            return cls.handle_errors(\n+                ValidationError(\n+                    \"Invalid token\", code=AccountErrorCode.JWT_INVALID_TOKEN.value\n+                )\n+            )\n \n         if not cls.check_permissions(info.context):\n             raise PermissionDenied(permissions=cls._meta.permissions)"
        },
        {
          "filename": "saleor/graphql/core/tests/test_view.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -7,6 +7,7 @@\n \n from .... import __version__ as saleor_version\n from ....demo.views import EXAMPLE_QUERY\n+from ....graphql.utils import INTERNAL_ERROR_MESSAGE\n from ...tests.fixtures import API_PATH\n from ...tests.utils import get_graphql_content, get_graphql_content_from_response\n from ...views import generate_cache_key\n@@ -145,7 +146,7 @@ def mocked_execute(*args, **kwargs):\n     response = api_client.post_graphql(\"{ shop { name }}\")\n     assert response.status_code == 400\n     content = get_graphql_content_from_response(response)\n-    assert content[\"errors\"][0][\"message\"] == \"Spanish inquisition\"\n+    assert content[\"errors\"][0][\"message\"] == INTERNAL_ERROR_MESSAGE\n \n \n def test_invalid_query_graphql_errors_are_logged_in_another_logger("
        },
        {
          "filename": "saleor/graphql/tests/test_utils.py",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -1,7 +1,9 @@\n import re\n \n+from django.test import override_settings\n from graphql.utils import schema_printer\n \n+from ..utils import ALLOWED_ERRORS, INTERNAL_ERROR_MESSAGE, format_error\n from .utils import get_graphql_content\n \n \n@@ -25,3 +27,25 @@ def test_multiple_interface_separator_in_schema(api_client):\n \n def test_graphql_core_contains_patched_function():\n     assert hasattr(schema_printer, \"_print_object\")\n+\n+\n+@override_settings(DEBUG=False)\n+def test_format_error_hides_internal_error_msg_in_production_mode():\n+    error = ValueError(\"Example error\")\n+    result = format_error(error, ())\n+    assert result[\"message\"] == INTERNAL_ERROR_MESSAGE\n+\n+\n+@override_settings(DEBUG=False)\n+def test_format_error_prints_allowed_errors():\n+    error_cls = ALLOWED_ERRORS[0]\n+    error = error_cls(\"Example error\")\n+    result = format_error(error, ())\n+    assert result[\"message\"] == str(error)\n+\n+\n+@override_settings(DEBUG=True)\n+def test_format_error_prints_internal_error_msg_in_debug_mode():\n+    error = ValueError(\"Example error\")\n+    result = format_error(error, ())\n+    assert result[\"message\"] == str(error)"
        },
        {
          "filename": "saleor/graphql/utils/__init__.py",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -6,6 +6,7 @@\n \n import graphene\n from django.conf import settings\n+from django.core.exceptions import ValidationError\n from django.db.models import Q, Value\n from django.db.models.functions import Concat\n from graphql import GraphQLDocument\n@@ -14,9 +15,15 @@\n \n from ...account.models import User\n from ...app.models import App\n+from ...core.exceptions import (\n+    CircularSubscriptionSyncEvent,\n+    PermissionDenied,\n+    ReadOnlyException,\n+)\n from ..core.enums import PermissionEnum\n from ..core.types import TYPES_WITH_DOUBLE_ID_AVAILABLE, Permission\n from ..core.utils import from_global_id_or_error\n+from ..core.validators.query_cost import QueryCostError\n \n if TYPE_CHECKING:\n     from ..core import SaleorContext\n@@ -33,6 +40,18 @@\n     \"\": \"-\",\n }\n \n+# List of error types of which messages can be returned in the GraphQL API.\n+ALLOWED_ERRORS = [\n+    CircularSubscriptionSyncEvent,\n+    GraphQLError,\n+    PermissionDenied,\n+    ReadOnlyException,\n+    ValidationError,\n+    QueryCostError,\n+]\n+\n+INTERNAL_ERROR_MESSAGE = \"Internal Server Error\"\n+\n \n def resolve_global_ids_to_primary_keys(\n     ids: Iterable[str], graphene_type=None, raise_error: bool = False\n@@ -268,6 +287,12 @@ def format_error(error, handled_exceptions):\n     else:\n         unhandled_errors_logger.error(\"A query failed unexpectedly\", exc_info=exc)\n \n+    # If DEBUG mode is disabled we allow only certain error messages to be returned in\n+    # the API. This prevents from leaking internals that might be included in Python\n+    # exceptions' error messages.\n+    if type(exc) not in ALLOWED_ERRORS and not settings.DEBUG:\n+        result[\"message\"] = INTERNAL_ERROR_MESSAGE\n+\n     result[\"extensions\"][\"exception\"] = {\"code\": type(exc).__name__}\n     if settings.DEBUG:\n         lines = []"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "486877e53e05c27b4691647d1e0e7cc0f47e91bf",
            "date": "2025-01-14T09:18:31Z",
            "author_login": "patrys"
          },
          {
            "sha": "23b8d28989445f33ed35363156a8b675eb610472",
            "date": "2025-01-13T12:06:01Z",
            "author_login": "patrys"
          },
          {
            "sha": "789e33510a4225f20a0ccc9634ff7b49bb9ca912",
            "date": "2025-01-13T14:36:25Z",
            "author_login": "korycins"
          },
          {
            "sha": "83efad25c0813b7b3fe2741781a263e22ff84e1a",
            "date": "2025-01-13T08:42:38Z",
            "author_login": "szczecha"
          },
          {
            "sha": "5f8b1cc4db2d54295193eb92d7b862164ce197ce",
            "date": "2025-01-10T13:13:49Z",
            "author_login": "korycins"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-209",
    "description": "Saleor is a headless, GraphQL commerce platform delivering personalized shopping experiences. Some internal Python exceptions are not handled properly and thus are returned in API as error messages. Some messages might contain sensitive information like user email address in staff-authenticated requests.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-02T19:15:10.667",
    "last_modified": "2024-11-21T07:50:39.790",
    "fix_date": "2023-03-02T12:00:09Z"
  },
  "references": [
    {
      "url": "https://github.com/saleor/saleor/commit/31bce881ccccf0d79a9b14ecb6ca3138d1edeec1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.1.48",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.10.14",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.11.12",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.7.59",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.8.30",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.9.27",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/security/advisories/GHSA-r8qr-wwg3-2r85",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/commit/31bce881ccccf0d79a9b14ecb6ca3138d1edeec1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.1.48",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.10.14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.11.12",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.7.59",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.8.30",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/releases/tag/3.9.27",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/security/advisories/GHSA-r8qr-wwg3-2r85",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.795921",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saleor",
    "owner": "saleor",
    "created_at": "2013-02-12T16:46:39Z",
    "updated_at": "2025-01-14T09:18:44Z",
    "pushed_at": "2025-01-14T13:41:59Z",
    "size": 264902,
    "stars": 20990,
    "forks": 5549,
    "open_issues": 341,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.20"
    ],
    "languages": {
      "Python": 22045293,
      "HTML": 249642,
      "Dockerfile": 2521,
      "Shell": 439,
      "Makefile": 121
    },
    "commit_activity": {
      "total_commits_last_year": 715,
      "avg_commits_per_week": 13.75,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:42:28.369369"
  }
}