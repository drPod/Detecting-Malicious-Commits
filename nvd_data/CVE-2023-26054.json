{
  "cve_id": "CVE-2023-26054",
  "github_data": {
    "repository": "moby/buildkit",
    "fix_commit": "75123c696506bdbca1ed69906479e200f1b62604",
    "related_commits": [
      "75123c696506bdbca1ed69906479e200f1b62604",
      "75123c696506bdbca1ed69906479e200f1b62604"
    ],
    "patch_url": "https://github.com/moby/buildkit/commit/75123c696506bdbca1ed69906479e200f1b62604.patch",
    "fix_commit_details": {
      "sha": "75123c696506bdbca1ed69906479e200f1b62604",
      "commit_date": "2023-03-06T14:39:19Z",
      "author": {
        "login": "tonistiigi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-gc89-7gcr-jxqc",
        "length": 96,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 59,
        "additions": 45,
        "deletions": 14
      },
      "files": [
        {
          "filename": "frontend/dockerfile/dockerfile_buildinfo_test.go",
          "status": "modified",
          "additions": 12,
          "deletions": 5,
          "patch": "@@ -52,7 +52,7 @@ func testBuildInfoSources(t *testing.T, sb integration.Sandbox) {\n \tdockerfile := `\n FROM alpine:latest@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300 AS alpine\n FROM busybox:latest\n-ADD https://raw.githubusercontent.com/moby/moby/v20.10.21/README.md /\n+ADD https://user2:pw2@raw.githubusercontent.com/moby/moby/v20.10.21/README.md /\n COPY --from=alpine /bin/busybox /alpine-busybox\n `\n \n@@ -93,10 +93,15 @@ COPY --from=alpine /bin/busybox /alpine-busybox\n \t\t}}\n \t}\n \n+\texpectedURL := strings.Replace(server.URL, \"http://\", \"http://xxxxx:xxxxx@\", 1)\n+\trequire.NotEqual(t, expectedURL, server.URL)\n+\tserver.URL = strings.Replace(server.URL, \"http://\", \"http://user:pass@\", 1)\n+\n \tres, err := f.Solve(sb.Context(), c, client.SolveOpt{\n \t\tExports: exports,\n \t\tFrontendAttrs: map[string]string{\n-\t\t\tdockerui.DefaultLocalNameContext: server.URL + \"/.git#buildinfo\",\n+\t\t\tdockerui.DefaultLocalNameContext:          server.URL + \"/.git#buildinfo\",\n+\t\t\tdockerui.DefaultLocalNameContext + \":foo\": \"https://foo:bar@example.invalid/foo.html\",\n \t\t},\n \t}, nil)\n \trequire.NoError(t, err)\n@@ -110,7 +115,9 @@ COPY --from=alpine /bin/busybox /alpine-busybox\n \trequire.NoError(t, err)\n \n \trequire.Contains(t, bi.Attrs, \"context\")\n-\trequire.Equal(t, server.URL+\"/.git#buildinfo\", *bi.Attrs[\"context\"])\n+\trequire.Equal(t, expectedURL+\"/.git#buildinfo\", *bi.Attrs[\"context\"])\n+\n+\trequire.Equal(t, \"https://xxxxx:xxxxx@example.invalid/foo.html\", *bi.Attrs[\"context:foo\"])\n \n \t_, isGateway := f.(*gatewayFrontend)\n \n@@ -131,11 +138,11 @@ COPY --from=alpine /bin/busybox /alpine-busybox\n \tassert.NotEmpty(t, sources[1].Pin)\n \n \tassert.Equal(t, binfotypes.SourceTypeGit, sources[2].Type)\n-\tassert.Equal(t, server.URL+\"/.git#buildinfo\", sources[2].Ref)\n+\tassert.Equal(t, expectedURL+\"/.git#buildinfo\", sources[2].Ref)\n \tassert.NotEmpty(t, sources[2].Pin)\n \n \tassert.Equal(t, binfotypes.SourceTypeHTTP, sources[3].Type)\n-\tassert.Equal(t, \"https://raw.githubusercontent.com/moby/moby/v20.10.21/README.md\", sources[3].Ref)\n+\tassert.Equal(t, \"https://xxxxx:xxxxx@raw.githubusercontent.com/moby/moby/v20.10.21/README.md\", sources[3].Ref)\n \tassert.Equal(t, \"sha256:419455202b0ef97e480d7f8199b26a721a417818bc0e2d106975f74323f25e6c\", sources[3].Pin)\n }\n "
        },
        {
          "filename": "frontend/dockerfile/dockerfile_provenance_test.go",
          "status": "modified",
          "additions": 17,
          "deletions": 9,
          "patch": "@@ -77,9 +77,10 @@ RUN echo \"ok\" > /foo\n \t\t\t\t\t\"attest:provenance\": provReq,\n \t\t\t\t\t\"build-arg:FOO\":     \"bar\",\n \t\t\t\t\t\"label:lbl\":         \"abc\",\n-\t\t\t\t\t\"vcs:source\":        \"https://example.invalid/repo.git\",\n+\t\t\t\t\t\"vcs:source\":        \"https://user:pass@example.invalid/repo.git\",\n \t\t\t\t\t\"vcs:revision\":      \"123456\",\n \t\t\t\t\t\"filename\":          \"Dockerfile\",\n+\t\t\t\t\tdockerui.DefaultLocalNameContext + \":foo\": \"https://foo:bar@example.invalid/foo.html\",\n \t\t\t\t},\n \t\t\t\tExports: []client.ExportEntry{\n \t\t\t\t\t{\n@@ -137,30 +138,32 @@ RUN echo \"ok\" > /foo\n \t\t\t\trequire.Equal(t, \"gateway.v0\", pred.Invocation.Parameters.Frontend)\n \n \t\t\t\tif mode == \"max\" || mode == \"\" {\n-\t\t\t\t\trequire.Equal(t, 3, len(args), \"%v\", args)\n+\t\t\t\t\trequire.Equal(t, 4, len(args), \"%v\", args)\n \t\t\t\t\trequire.True(t, pred.Metadata.Completeness.Parameters)\n \n \t\t\t\t\trequire.Equal(t, \"bar\", args[\"build-arg:FOO\"])\n \t\t\t\t\trequire.Equal(t, \"abc\", args[\"label:lbl\"])\n \t\t\t\t\trequire.Contains(t, args[\"source\"], \"buildkit_test/\")\n \t\t\t\t} else {\n \t\t\t\t\trequire.False(t, pred.Metadata.Completeness.Parameters)\n-\t\t\t\t\trequire.Equal(t, 1, len(args), \"%v\", args)\n+\t\t\t\t\trequire.Equal(t, 2, len(args), \"%v\", args)\n \t\t\t\t\trequire.Contains(t, args[\"source\"], \"buildkit_test/\")\n \t\t\t\t}\n+\t\t\t\trequire.Equal(t, \"https://xxxxx:xxxxx@example.invalid/foo.html\", args[\"context:foo\"])\n \t\t\t} else {\n \t\t\t\trequire.Equal(t, \"dockerfile.v0\", pred.Invocation.Parameters.Frontend)\n \n \t\t\t\tif mode == \"max\" || mode == \"\" {\n-\t\t\t\t\trequire.Equal(t, 2, len(args))\n+\t\t\t\t\trequire.Equal(t, 3, len(args))\n \t\t\t\t\trequire.True(t, pred.Metadata.Completeness.Parameters)\n \n \t\t\t\t\trequire.Equal(t, \"bar\", args[\"build-arg:FOO\"])\n \t\t\t\t\trequire.Equal(t, \"abc\", args[\"label:lbl\"])\n \t\t\t\t} else {\n \t\t\t\t\trequire.False(t, pred.Metadata.Completeness.Parameters)\n-\t\t\t\t\trequire.Equal(t, 0, len(args), \"%v\", args)\n+\t\t\t\t\trequire.Equal(t, 1, len(args), \"%v\", args)\n \t\t\t\t}\n+\t\t\t\trequire.Equal(t, \"https://xxxxx:xxxxx@example.invalid/foo.html\", args[\"context:foo\"])\n \t\t\t}\n \n \t\t\texpectedBase := \"pkg:docker/busybox@latest?platform=\" + url.PathEscape(platforms.Format(platforms.Normalize(platforms.DefaultSpec())))\n@@ -177,7 +180,7 @@ RUN echo \"ok\" > /foo\n \n \t\t\tif !isClient {\n \t\t\t\trequire.Equal(t, \"Dockerfile\", pred.Invocation.ConfigSource.EntryPoint)\n-\t\t\t\trequire.Equal(t, \"https://example.invalid/repo.git\", pred.Metadata.BuildKitMetadata.VCS[\"source\"])\n+\t\t\t\trequire.Equal(t, \"https://xxxxx:xxxxx@example.invalid/repo.git\", pred.Metadata.BuildKitMetadata.VCS[\"source\"])\n \t\t\t\trequire.Equal(t, \"123456\", pred.Metadata.BuildKitMetadata.VCS[\"revision\"])\n \t\t\t}\n \n@@ -265,6 +268,11 @@ COPY myapp.Dockerfile /\n \n \ttarget := registry + \"/buildkit/testwithprovenance:git\"\n \n+\t// inject dummy credentials to test that they are masked\n+\texpectedURL := strings.Replace(server.URL, \"http://\", \"http://xxxxx:xxxxx@\", 1)\n+\trequire.NotEqual(t, expectedURL, server.URL)\n+\tserver.URL = strings.Replace(server.URL, \"http://\", \"http://user:pass@\", 1)\n+\n \t_, err = f.Solve(sb.Context(), c, client.SolveOpt{\n \t\tFrontendAttrs: map[string]string{\n \t\t\t\"context\":           server.URL + \"/.git#v1\",\n@@ -318,7 +326,7 @@ COPY myapp.Dockerfile /\n \t\trequire.Equal(t, \"\", pred.Invocation.ConfigSource.EntryPoint)\n \t} else {\n \t\trequire.NotEmpty(t, pred.Invocation.Parameters.Frontend)\n-\t\trequire.Equal(t, server.URL+\"/.git#v1\", pred.Invocation.ConfigSource.URI)\n+\t\trequire.Equal(t, expectedURL+\"/.git#v1\", pred.Invocation.ConfigSource.URI)\n \t\trequire.Equal(t, \"myapp.Dockerfile\", pred.Invocation.ConfigSource.EntryPoint)\n \t}\n \n@@ -332,15 +340,15 @@ COPY myapp.Dockerfile /\n \t\trequire.Equal(t, expBase, pred.Materials[1].URI)\n \t\trequire.NotEmpty(t, pred.Materials[1].Digest[\"sha256\"])\n \n-\t\trequire.Equal(t, server.URL+\"/.git#v1\", pred.Materials[2].URI)\n+\t\trequire.Equal(t, expectedURL+\"/.git#v1\", pred.Materials[2].URI)\n \t\trequire.Equal(t, strings.TrimSpace(string(expectedGitSHA)), pred.Materials[2].Digest[\"sha1\"])\n \t} else {\n \t\trequire.Equal(t, 2, len(pred.Materials), \"%+v\", pred.Materials)\n \n \t\trequire.Equal(t, expBase, pred.Materials[0].URI)\n \t\trequire.NotEmpty(t, pred.Materials[0].Digest[\"sha256\"])\n \n-\t\trequire.Equal(t, server.URL+\"/.git#v1\", pred.Materials[1].URI)\n+\t\trequire.Equal(t, expectedURL+\"/.git#v1\", pred.Materials[1].URI)\n \t\trequire.Equal(t, strings.TrimSpace(string(expectedGitSHA)), pred.Materials[1].Digest[\"sha1\"])\n \t}\n "
        },
        {
          "filename": "solver/llbsolver/provenance/capture.go",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -5,6 +5,7 @@ import (\n \n \tdistreference \"github.com/docker/distribution/reference\"\n \t\"github.com/moby/buildkit/solver/result\"\n+\t\"github.com/moby/buildkit/util/urlutil\"\n \tdigest \"github.com/opencontainers/go-digest\"\n \tocispecs \"github.com/opencontainers/image-spec/specs-go/v1\"\n )\n@@ -190,6 +191,7 @@ func (c *Capture) AddLocal(l LocalSource) {\n }\n \n func (c *Capture) AddGit(g GitSource) {\n+\tg.URL = urlutil.RedactCredentials(g.URL)\n \tfor _, v := range c.Sources.Git {\n \t\tif v.URL == g.URL {\n \t\t\treturn\n@@ -199,6 +201,7 @@ func (c *Capture) AddGit(g GitSource) {\n }\n \n func (c *Capture) AddHTTP(h HTTPSource) {\n+\th.URL = urlutil.RedactCredentials(h.URL)\n \tfor _, v := range c.Sources.HTTP {\n \t\tif v.URL == h.URL {\n \t\t\treturn"
        },
        {
          "filename": "solver/llbsolver/provenance/predicate.go",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@ import (\n \tslsa \"github.com/in-toto/in-toto-golang/in_toto/slsa_provenance/common\"\n \tslsa02 \"github.com/in-toto/in-toto-golang/in_toto/slsa_provenance/v0.2\"\n \t\"github.com/moby/buildkit/util/purl\"\n+\t\"github.com/moby/buildkit/util/urlutil\"\n \tocispecs \"github.com/opencontainers/image-spec/specs-go/v1\"\n \t\"github.com/package-url/packageurl-go\"\n )\n@@ -151,6 +152,7 @@ func NewPredicate(c *Capture) (*ProvenancePredicate, error) {\n \t\t} else {\n \t\t\tinv.ConfigSource.URI = v\n \t\t}\n+\t\tinv.ConfigSource.URI = urlutil.RedactCredentials(inv.ConfigSource.URI)\n \t\tdelete(c.Args, contextKey)\n \t}\n \n@@ -162,6 +164,9 @@ func NewPredicate(c *Capture) (*ProvenancePredicate, error) {\n \tvcs := make(map[string]string)\n \tfor k, v := range c.Args {\n \t\tif strings.HasPrefix(k, \"vcs:\") {\n+\t\t\tif k == \"vcs:source\" {\n+\t\t\t\tv = urlutil.RedactCredentials(v)\n+\t\t\t}\n \t\t\tdelete(c.Args, k)\n \t\t\tif v != \"\" {\n \t\t\t\tvcs[strings.TrimPrefix(k, \"vcs:\")] = v\n@@ -231,6 +236,11 @@ func FilterArgs(m map[string]string) map[string]string {\n \t\t\"platform\":           {},\n \t\t\"cache-imports\":      {},\n \t}\n+\tconst defaultContextKey = \"context\"\n+\tcontextKey := defaultContextKey\n+\tif v, ok := m[\"contextkey\"]; ok && v != \"\" {\n+\t\tcontextKey = v\n+\t}\n \tout := make(map[string]string)\n \tfor k, v := range m {\n \t\tif _, ok := hostSpecificArgs[k]; ok {\n@@ -239,6 +249,9 @@ func FilterArgs(m map[string]string) map[string]string {\n \t\tif strings.HasPrefix(k, \"attest:\") {\n \t\t\tcontinue\n \t\t}\n+\t\tif k == contextKey || strings.HasPrefix(k, defaultContextKey+\":\") {\n+\t\t\tv = urlutil.RedactCredentials(v)\n+\t\t}\n \t\tout[k] = v\n \t}\n \treturn out"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "58361f57b044c156c2d94eb580e94bab157ae91b",
            "date": "2025-01-14T12:34:15Z",
            "author_login": "crazy-max"
          },
          {
            "sha": "1b26c86525c5368d83ecf00e03b03519407bc94d",
            "date": "2025-01-14T11:37:45Z",
            "author_login": "thaJeztah"
          },
          {
            "sha": "06f1d471554f683084b7d1f7a7597f7541168e5e",
            "date": "2025-01-14T11:44:36Z",
            "author_login": "thaJeztah"
          },
          {
            "sha": "82e0ae9fea79c1a95933d51f8cd832f96cc8d9b5",
            "date": "2025-01-14T11:43:51Z",
            "author_login": "thaJeztah"
          },
          {
            "sha": "c10bbb69323377caa4ac45c8c563c349baa6c3fb",
            "date": "2025-01-14T10:53:11Z",
            "author_login": "crazy-max"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner. In affected versions when the user sends a build request that contains a Git URL that contains credentials and the build creates a provenance attestation describing that build, these credentials could be visible from the provenance attestation. Git URL can be passed in two ways: 1) Invoking build directly from a URL with credentials. 2) If the client sends additional version control system (VCS) info hint parameters on builds from a local source. Usually, that would mean reading the origin URL from `.git/config` file. When a build is performed under specific conditions where credentials were passed to BuildKit they may be visible to everyone who has access to provenance attestation. Provenance attestations and VCS info hints were added in version v0.11.0. Previous versions are not vulnerable. In v0.10, when building directly from Git URL, the same URL could be visible in `BuildInfo` structure that is a predecessor of Provenance attestations. Previous versions are not vulnerable. This bug has been fixed in v0.11.4. Users are advised to upgrade. Users unable to upgrade may disable VCS info hints by setting `BUILDX_GIT_INFO=0`. `buildctl` does not set VCS hints based on `.git` directory, and values would need to be passed manually with `--opt`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-06T19:15:10.390",
    "last_modified": "2024-11-21T07:50:40.180",
    "fix_date": "2023-03-06T14:39:19Z"
  },
  "references": [
    {
      "url": "https://github.com/moby/buildkit/commit/75123c696506bdbca1ed69906479e200f1b62604",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/moby/buildkit/security/advisories/GHSA-gc89-7gcr-jxqc",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/moby/buildkit/commit/75123c696506bdbca1ed69906479e200f1b62604",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/moby/buildkit/security/advisories/GHSA-gc89-7gcr-jxqc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.811235",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "buildkit",
    "owner": "moby",
    "created_at": "2017-05-31T17:04:10Z",
    "updated_at": "2025-01-14T12:34:20Z",
    "pushed_at": "2025-01-14T12:34:15Z",
    "size": 49244,
    "stars": 8384,
    "forks": 1192,
    "open_issues": 887,
    "watchers": 8384,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "docker-18.09",
      "docker-19.03",
      "master"
    ],
    "languages": {
      "Go": 3520112,
      "Dockerfile": 54524,
      "Shell": 17955,
      "HCL": 7847,
      "Makefile": 2427,
      "Ruby": 2131,
      "Assembly": 1691
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:13:41.972742"
  }
}