{
  "cve_id": "CVE-2023-26123",
  "github_data": {
    "repository": "raysan5/raylib",
    "fix_commit": "b436c8d7e5346a241b00511a11585936895d959d",
    "related_commits": [
      "b436c8d7e5346a241b00511a11585936895d959d",
      "b436c8d7e5346a241b00511a11585936895d959d"
    ],
    "patch_url": "https://github.com/raysan5/raylib/commit/b436c8d7e5346a241b00511a11585936895d959d.patch",
    "fix_commit_details": {
      "sha": "b436c8d7e5346a241b00511a11585936895d959d",
      "commit_date": "2023-03-12T12:48:11Z",
      "author": {
        "login": "raysan5",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "ADDED: Security check for `emscripten_run_script()` #2954",
        "length": 57,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 18,
        "additions": 10,
        "deletions": 8
      },
      "files": [
        {
          "filename": "src/rcore.c",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -1994,7 +1994,9 @@ void SetClipboardText(const char *text)\n     glfwSetClipboardString(CORE.Window.handle, text);\n #endif\n #if defined(PLATFORM_WEB)\n-    emscripten_run_script(TextFormat(\"navigator.clipboard.writeText('%s')\", text));\n+    // Security check to (partially) avoid malicious code\n+    if (strchr(text, '\\'') != NULL) TRACELOG(LOG_WARNING, \"SYSTEM: Provided Clipboard could be potentially malicious, avoid [\\'] character\");\n+    else emscripten_run_script(TextFormat(\"navigator.clipboard.writeText('%s')\", text));\n #endif\n }\n \n@@ -2006,6 +2008,7 @@ const char *GetClipboardText(void)\n     return glfwGetClipboardString(CORE.Window.handle);\n #endif\n #if defined(PLATFORM_WEB)\n+/*\n     // Accessing clipboard data from browser is tricky due to security reasons\n     // The method to use is navigator.clipboard.readText() but this is an asynchronous method\n     // that will return at some moment after the function is called with the required data\n@@ -2019,7 +2022,7 @@ const char *GetClipboardText(void)\n \n     // Another approach could be just copy the data in a HTML text field and try to retrieve it\n     // later on if available... and clean it for future accesses\n-\n+*/\n     return NULL;\n #endif\n     return NULL;\n@@ -2910,6 +2913,9 @@ void SetConfigFlags(unsigned int flags)\n void TakeScreenshot(const char *fileName)\n {\n #if defined(SUPPORT_MODULE_RTEXTURES)\n+    // Security check to (partially) avoid malicious code on PLATFORM_WEB\n+    if (strchr(fileName, '\\'') != NULL) { TRACELOG(LOG_WARNING, \"SYSTEM: Provided fileName could be potentially malicious, avoid [\\'] character\");  return; }\n+\n     Vector2 scale = GetWindowScaleDPI();\n     unsigned char *imgData = rlReadScreenPixels((int)((float)CORE.Window.render.width*scale.x), (int)((float)CORE.Window.render.height*scale.y));\n     Image image = { imgData, (int)((float)CORE.Window.render.width*scale.x), (int)((float)CORE.Window.render.height*scale.y), 1, PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 };\n@@ -3536,12 +3542,8 @@ unsigned char *DecodeDataBase64(const unsigned char *data, int *outputSize)\n // Ref: https://github.com/raysan5/raylib/issues/686\n void OpenURL(const char *url)\n {\n-    // Small security check trying to avoid (partially) malicious code...\n-    // sorry for the inconvenience when you hit this point...\n-    if (strchr(url, '\\'') != NULL)\n-    {\n-        TRACELOG(LOG_WARNING, \"SYSTEM: Provided URL is not valid\");\n-    }\n+    // Security check to (aprtially) avoid malicious code on PLATFORM_WEB\n+    if (strchr(url, '\\'') != NULL) TRACELOG(LOG_WARNING, \"SYSTEM: Provided URL could be potentially malicious, avoid [\\'] character\");\n     else\n     {\n #if defined(PLATFORM_DESKTOP)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cfbba79bd388931f1cc6e17f9b302fc86b8bd6c7",
            "date": "2025-01-12T19:59:12Z",
            "author_login": "raysan5"
          },
          {
            "sha": "fddfb58f85f0c14af4666dba4eed38b2184a4c6e",
            "date": "2025-01-12T19:39:07Z",
            "author_login": "raysan5"
          },
          {
            "sha": "af163ba22a6f7d5f783727ea4f5f650355dc3d93",
            "date": "2025-01-12T19:29:46Z",
            "author_login": "raysan5"
          },
          {
            "sha": "1cdf3bb791902e0adcca9e5607191d2fc97f37a0",
            "date": "2025-01-12T17:46:49Z",
            "author_login": "teatwig"
          },
          {
            "sha": "da5a868e2a5b14db29b2e51831e824c22fd9fd8c",
            "date": "2025-01-12T17:21:59Z",
            "author_login": "raysan5"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Versions of the package raysan5/raylib before 4.5.0 are vulnerable to Cross-site Scripting (XSS) such that the SetClipboardText API does not properly escape the ' character, allowing attacker-controlled input to break out of the string and execute arbitrary JavaScript via emscripten_run_script function.\r\r**Note:** This vulnerability is present only when compiling raylib for PLATFORM_WEB. All the other Desktop/Mobile/Embedded platforms are not affected.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-14T05:15:13.867",
    "last_modified": "2024-11-21T07:50:49.430",
    "fix_date": "2023-03-12T12:48:11Z"
  },
  "references": [
    {
      "url": "https://github.com/raysan5/raylib/commit/b436c8d7e5346a241b00511a11585936895d959d",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/raysan5/raylib/issues/2954",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/raysan5/raylib/releases/tag/4.5.0",
      "source": "report@snyk.io",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-UNMANAGED-RAYSAN5RAYLIB-5421188",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/raysan5/raylib/commit/b436c8d7e5346a241b00511a11585936895d959d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/raysan5/raylib/issues/2954",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/raysan5/raylib/releases/tag/4.5.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-UNMANAGED-RAYSAN5RAYLIB-5421188",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.739109",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "raylib",
    "owner": "raysan5",
    "created_at": "2013-10-24T15:46:04Z",
    "updated_at": "2025-01-14T17:41:18Z",
    "pushed_at": "2025-01-12T19:59:14Z",
    "size": 399533,
    "stars": 24338,
    "forks": 2380,
    "open_issues": 33,
    "watchers": 24338,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 2214352,
      "Lua": 229562,
      "Makefile": 71908,
      "CMake": 29081,
      "Zig": 18799,
      "HTML": 18058,
      "Shell": 17639,
      "Batchfile": 10043,
      "Meson": 1336,
      "Roff": 1256
    },
    "commit_activity": {
      "total_commits_last_year": 781,
      "avg_commits_per_week": 15.01923076923077,
      "days_active_last_year": 225
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "zlib"
    },
    "collected_at": "2025-01-14T18:22:41.806651"
  }
}