{
  "cve_id": "CVE-2023-26145",
  "github_data": {
    "repository": "dgilland/pydash",
    "fix_commit": "6ff0831ad285fff937cafd2a853f20cc9ae92021",
    "related_commits": [
      "6ff0831ad285fff937cafd2a853f20cc9ae92021",
      "6ff0831ad285fff937cafd2a853f20cc9ae92021"
    ],
    "patch_url": "https://github.com/dgilland/pydash/commit/6ff0831ad285fff937cafd2a853f20cc9ae92021.patch",
    "fix_commit_details": {
      "sha": "6ff0831ad285fff937cafd2a853f20cc9ae92021",
      "commit_date": "2023-01-29T01:30:52Z",
      "author": {
        "login": "dgilland",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: don't allow object paths that reference dunder-method attributes for functions like get()",
        "length": 94,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 33,
        "additions": 33,
        "deletions": 0
      },
      "files": [
        {
          "filename": "src/pydash/helpers.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -178,6 +178,7 @@ def _base_get_item(obj, key, default=UNSET):\n def _base_get_object(obj, key, default=UNSET):\n     value = _base_get_item(obj, key, default=UNSET)\n     if value is UNSET:\n+        _raise_if_restricted_key(key)\n         value = default\n         try:\n             value = getattr(obj, key)\n@@ -186,6 +187,13 @@ def _base_get_object(obj, key, default=UNSET):\n     return value\n \n \n+def _raise_if_restricted_key(key):\n+    # Prevent access to dunder-methods since this could expose access to globals through leaky\n+    # attributes such as obj.__init__.__globals__.\n+    if len(key) > 4 and key.isascii() and key.startswith(\"__\") and key.endswith(\"__\"):\n+        raise KeyError(f\"access to restricted key {key!r} is not allowed\")\n+\n+\n def base_set(obj, key, value, allow_override=True):\n     \"\"\"\n     Set an object's `key` to `value`. If `obj` is a ``list`` and the `key` is the next available\n@@ -213,6 +221,7 @@ def base_set(obj, key, value, allow_override=True):\n                 obj[:] = (obj + [None] * key)[:key]\n             obj.append(value)\n     elif (allow_override or not hasattr(obj, key)) and obj is not None:\n+        _raise_if_restricted_key(key)\n         setattr(obj, key, value)\n \n     return obj"
        },
        {
          "filename": "tests/test_objects.py",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -380,6 +380,30 @@ def test_get__should_not_populate_defaultdict():\n     assert data == {}\n \n \n+@parametrize(\n+    \"obj,path\",\n+    [\n+        (helpers.Object(), \"__init__\"),\n+        (helpers.Object(subobj=helpers.Object()), \"subobj.__init__\"),\n+        (namedtuple(\"a\", [\"a\"])(a=1), \"__len__\"),\n+    ],\n+)\n+def test_get__raises_for_objects_when_path_restricted(obj, path):\n+    with pytest.raises(KeyError, match=\"access to restricted key\"):\n+        _.get(obj, path)\n+\n+\n+@parametrize(\n+    \"obj,path\",\n+    [\n+        ({}, \"__init__\"),\n+        ([], \"__contains__\"),\n+    ],\n+)\n+def test_get__does_not_raise_for_dict_or_list_when_path_restricted(obj, path):\n+    assert _.get(obj, path) is None\n+\n+\n @parametrize(\n     \"case,expected\",\n     ["
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f4112f61ddb02e5181e781709d775838c9978b97",
            "date": "2024-11-04T14:08:02Z",
            "author_login": "dgilland"
          },
          {
            "sha": "f67e7adb597ca2b7dd331a69b63ff14fee10729b",
            "date": "2024-11-04T14:07:13Z",
            "author_login": "dgilland"
          },
          {
            "sha": "cdd84b4fe4c5d750c2786503666b7d77d789f2e2",
            "date": "2024-11-04T14:03:53Z",
            "author_login": "dgilland"
          },
          {
            "sha": "1c63bda9248e2d5194889012f715c5c22dae6687",
            "date": "2024-07-22T12:28:29Z",
            "author_login": "dgilland"
          },
          {
            "sha": "7c74918fc02b823e5cdb3a7a85b1450422684fe5",
            "date": "2024-07-22T12:28:11Z",
            "author_login": "dgilland"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-78",
    "description": "This affects versions of the package pydash before 6.0.0. A number of pydash methods such as pydash.objects.invoke() and pydash.collections.invoke_map() accept dotted paths (Deep Path Strings) to target a nested Python object, relative to the original source object. These paths can be used to target internal class attributes and dict items, to retrieve, modify or invoke nested Python objects.\r\r**Note:**\r\rThe pydash.objects.invoke() method is vulnerable to Command Injection when the following prerequisites are satisfied:\r\r1) The source object (argument 1) is not a built-in object such as list/dict (otherwise, the __init__.__globals__ path is not accessible)\r\r2) The attacker has control over argument 2 (the path string) and argument 3 (the argument to pass to the invoked method)\r\r\rThe pydash.collections.invoke_map() method is also vulnerable, but is harder to exploit as the attacker does not have direct control over the argument to be passed to the invoked function.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-09-28T05:15:45.843",
    "last_modified": "2024-11-21T07:50:52.307",
    "fix_date": "2023-01-29T01:30:52Z"
  },
  "references": [
    {
      "url": "https://gist.github.com/CalumHutton/45d33e9ea55bf4953b3b31c84703dfca",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dgilland/pydash/commit/6ff0831ad285fff937cafd2a853f20cc9ae92021",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-PYTHON-PYDASH-5916518",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://gist.github.com/CalumHutton/45d33e9ea55bf4953b3b31c84703dfca",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dgilland/pydash/commit/6ff0831ad285fff937cafd2a853f20cc9ae92021",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-PYTHON-PYDASH-5916518",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.541138",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pydash",
    "owner": "dgilland",
    "created_at": "2013-05-14T04:24:02Z",
    "updated_at": "2025-01-13T10:09:33Z",
    "pushed_at": "2024-11-04T14:08:43Z",
    "size": 1927,
    "stars": 1345,
    "forks": 93,
    "open_issues": 7,
    "watchers": 1345,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "Python": 832789
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:44:00.686638"
  }
}