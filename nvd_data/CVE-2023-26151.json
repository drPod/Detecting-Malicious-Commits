{
  "cve_id": "CVE-2023-26151",
  "github_data": {
    "repository": "FreeOpcUa/opcua-asyncio",
    "fix_commit": "f6603daa34a93a658f0e176cb0b9ee5a6643b262",
    "related_commits": [
      "f6603daa34a93a658f0e176cb0b9ee5a6643b262",
      "f6603daa34a93a658f0e176cb0b9ee5a6643b262"
    ],
    "patch_url": "https://github.com/FreeOpcUa/opcua-asyncio/commit/f6603daa34a93a658f0e176cb0b9ee5a6643b262.patch",
    "fix_commit_details": {
      "sha": "f6603daa34a93a658f0e176cb0b9ee5a6643b262",
      "commit_date": "2022-08-31T16:00:09Z",
      "author": {
        "login": "schroeder-",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "server handle malformed packets",
        "length": 144,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 43,
        "additions": 33,
        "deletions": 10
      },
      "files": [
        {
          "filename": "asyncua/server/binary_server_asyncio.py",
          "status": "modified",
          "additions": 15,
          "deletions": 8,
          "patch": "@@ -65,15 +65,22 @@ def data_received(self, data):\n                 try:\n                     header = header_from_binary(buf)\n                 except NotEnoughData:\n-                    logger.debug('Not enough data while parsing header from client, waiting for more')\n+                    # a packet should at least contain a header otherwise it is malformed (8 or 12 bytes)\n+                    logger.debug('Not enough data while parsing header from client, empty the buffer')\n+                    self.transport.close()\n                     return\n-                if len(buf) < header.body_size:\n-                    logger.debug('We did not receive enough data from client. Need %s got %s', header.body_size,\n-                                 len(buf))\n-                    return\n-                # we have a complete message\n-                self.messages.put_nowait((header, buf))\n-                self._buffer = self._buffer[(header.header_size + header.body_size):]\n+                if header.header_size + header.body_size <= header.header_size:\n+                    # malformed header prevent invalid access of your buffer\n+                    logger.error(f'Got malformed header {header}')\n+                    self.transport.close()\n+                else:\n+                    if len(buf) < header.body_size:\n+                        logger.debug('We did not receive enough data from client. Need %s got %s', header.body_size,\n+                                    len(buf))\n+                        return\n+                    # we have a complete message\n+                    self.messages.put_nowait((header, buf))\n+                    self._buffer = self._buffer[(header.header_size + header.body_size):]\n             except Exception:\n                 logger.exception('Exception raised while parsing message from client')\n                 return"
        },
        {
          "filename": "tests/test_connections.py",
          "status": "modified",
          "additions": 18,
          "deletions": 2,
          "patch": "@@ -1,10 +1,11 @@\n # coding: utf-8\n import asyncio\n import pytest\n+import asyncio\n+import struct\n \n-from asyncua import Client, Server\n+from asyncua import Client, Server, ua\n from asyncua.ua.uaerrors import BadMaxConnectionsReached\n-\n from .conftest import port_num, find_free_port\n \n pytestmark = pytest.mark.asyncio\n@@ -26,6 +27,21 @@ async def test_max_connections_1(opc):\n     opc.server.iserver.isession.__class__.max_connections = 1000\n \n \n+async def test_dos_server(opc):\n+    # See issue 1013 a crafted packet triggered dos\n+    port = opc.server.endpoint.port\n+    async with Client(f'opc.tcp://127.0.0.1:{port}') as c:\n+        # craft invalid packet that trigger dos\n+        message_type, chunk_type, packet_size = [ua.MessageType.SecureOpen, b'E', 0]\n+        c.uaclient.protocol.transport.write(struct.pack(\"<3scI\", message_type, chunk_type, packet_size))\n+        # sleep to give the server time to handle the message because we bypass the asyncio\n+        await asyncio.sleep(1.0)\n+        with pytest.raises(ConnectionError):\n+            # now try to read a value to see if server is still alive\n+            server_time_node = c.get_node(ua.NodeId(ua.ObjectIds.Server_ServerStatus_CurrentTime))\n+            await server_time_node.read_value()\n+\n+\n async def test_safe_disconnect():\n     c = Client(url=\"opc.tcp://example:4840\")\n     await c.disconnect()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b1cfae34668044062880930e5caa49cd31ed3a4f",
            "date": "2025-01-08T15:18:13Z",
            "author_login": "mver-al"
          },
          {
            "sha": "78a86a92542f143775b365ce8412b44957909102",
            "date": "2025-01-08T15:03:50Z",
            "author_login": "mver-al"
          },
          {
            "sha": "af95fff1fd5c888a296af64e82334755459a2e90",
            "date": "2025-01-08T14:30:51Z",
            "author_login": "mver-al"
          },
          {
            "sha": "3c6317be7b1f1e8942ecf9feaab7495b946b70c5",
            "date": "2024-10-18T14:29:51Z",
            "author_login": "cziebuhr"
          },
          {
            "sha": "9f7322946ff335e55ca59140f758041a69699747",
            "date": "2024-10-11T18:47:40Z",
            "author_login": "cziebuhr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-400",
    "description": "Versions of the package asyncua before 0.9.96 are vulnerable to Denial of Service (DoS) such that an attacker can send a malformed packet and as a result, the server will enter into an infinite loop and consume excessive memory.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-03T05:15:50.507",
    "last_modified": "2024-11-21T07:50:53.170",
    "fix_date": "2022-08-31T16:00:09Z"
  },
  "references": [
    {
      "url": "https://gist.github.com/artfire52/1540b234350795e0ecb4d672608dbec8",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/commit/f6603daa34a93a658f0e176cb0b9ee5a6643b262",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/issues/1013",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/pull/1039",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/releases/tag/v0.9.96",
      "source": "report@snyk.io",
      "tags": [
        "Product",
        "Release Notes"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-PYTHON-ASYNCUA-5673709",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://gist.github.com/artfire52/1540b234350795e0ecb4d672608dbec8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/commit/f6603daa34a93a658f0e176cb0b9ee5a6643b262",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/issues/1013",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/pull/1039",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/FreeOpcUa/opcua-asyncio/releases/tag/v0.9.96",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Release Notes"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-PYTHON-ASYNCUA-5673709",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.567914",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "opcua-asyncio",
    "owner": "FreeOpcUa",
    "created_at": "2018-08-02T07:45:42Z",
    "updated_at": "2025-01-14T15:14:22Z",
    "pushed_at": "2025-01-13T02:49:37Z",
    "size": 16352,
    "stars": 1170,
    "forks": 365,
    "open_issues": 180,
    "watchers": 1170,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 12247843,
      "Shell": 343,
      "Dockerfile": 55
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T19:16:58.527750"
  }
}