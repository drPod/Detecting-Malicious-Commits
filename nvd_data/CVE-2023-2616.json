{
  "cve_id": "CVE-2023-2616",
  "github_data": {
    "repository": "pimcore/pimcore",
    "fix_commit": "07a2c95be524c7e20105cef58c5767d4ebb06091",
    "related_commits": [
      "07a2c95be524c7e20105cef58c5767d4ebb06091",
      "07a2c95be524c7e20105cef58c5767d4ebb06091"
    ],
    "patch_url": "https://github.com/pimcore/pimcore/commit/07a2c95be524c7e20105cef58c5767d4ebb06091.patch",
    "fix_commit_details": {
      "sha": "07a2c95be524c7e20105cef58c5767d4ebb06091",
      "commit_date": "2023-04-19T09:35:21Z",
      "author": {
        "login": "Corepex",
        "type": "User",
        "stats": {
          "total_commits": 123,
          "average_weekly_commits": 0.24453280318091453,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 30
        }
      },
      "commit_message": {
        "title": "[Security] Fix xss in static routes panel (#14947)",
        "length": 485,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 71,
        "additions": 49,
        "deletions": 22
      },
      "files": [
        {
          "filename": "bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -128,7 +128,7 @@ public function deleteGroupAction(Request $request): JsonResponse\n      */\n     public function createGroupAction(Request $request): JsonResponse\n     {\n-        $name = SecurityHelper::getStringWithoutControlChars($request->get('name'));\n+        $name = SecurityHelper::convertHtmlSpecialChars($request->get('name'));\n         $storeId = $request->get('storeId');\n         $config = Classificationstore\\GroupConfig::getByName($name, $storeId);\n \n@@ -155,7 +155,7 @@ public function createGroupAction(Request $request): JsonResponse\n      */\n     public function createStoreAction(Request $request): JsonResponse\n     {\n-        $name = SecurityHelper::getStringWithoutControlChars($request->get('name'));\n+        $name = SecurityHelper::convertHtmlSpecialChars($request->get('name'));\n \n         $config = Classificationstore\\StoreConfig::getByName($name);\n \n@@ -181,7 +181,7 @@ public function createStoreAction(Request $request): JsonResponse\n      */\n     public function createCollectionAction(Request $request): JsonResponse\n     {\n-        $name = SecurityHelper::getStringWithoutControlChars($request->get('name'));\n+        $name = SecurityHelper::convertHtmlSpecialChars($request->get('name'));\n         $storeId = $request->get('storeId');\n         $config = Classificationstore\\CollectionConfig::getByName($name, $storeId);\n "
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/helpers.js",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -22,6 +22,17 @@ pimcore.helpers.sanitizeUrlSlug = function (slug) {\n     return slug.replace(/[^a-z0-9-_+/]/gi, '');\n };\n \n+pimcore.helpers.htmlEncodeTextField = function (textField) {\n+    if(textField.getValue()) {\n+        textField.suspendEvent('change');\n+        const decodedValue = Ext.util.Format.htmlDecode(textField.getValue());\n+        textField.setValue(\n+            Ext.util.Format.htmlEncode(decodedValue)\n+        );\n+        textField.resumeEvent('change');\n+    }\n+};\n+\n pimcore.helpers.registerKeyBindings = function (bindEl, ExtJS) {\n \n     if (!ExtJS) {"
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/settings/staticroutes.js",
          "status": "modified",
          "additions": 19,
          "deletions": 10,
          "patch": "@@ -96,11 +96,11 @@ pimcore.settings.staticroutes = Class.create({\n \n         var typesColumns = [\n             {text:t(\"name\"), flex:50, sortable:true, dataIndex:'name',\n-                editor:new Ext.form.TextField({})},\n+                editor:new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n             {text:t(\"pattern\"), flex:100, sortable:true, dataIndex:'pattern',\n-                editor:new Ext.form.TextField({})},\n+                editor:new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n             {text:t(\"reverse\"), flex:100, sortable:true, dataIndex:'reverse',\n-                editor:new Ext.form.TextField({})},\n+                editor:new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n             {text:t(\"controller\"), flex:200, sortable:false, dataIndex:'controller',\n                 editor:new Ext.form.ComboBox({\n                     store:new Ext.data.JsonStore({\n@@ -127,14 +127,17 @@ pimcore.settings.staticroutes = Class.create({\n                     valueField:'name',\n                     listConfig: {\n                         maxWidth: 400\n+                    },\n+                    listeners: {\n+                        'change': pimcore.helpers.htmlEncodeTextField\n                     }\n                 })},\n             {text:t(\"variables\"), flex:50, sortable:false, dataIndex:'variables',\n-                editor:new Ext.form.TextField({})},\n+                editor:new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n             {text:t(\"defaults\"), flex:50, sortable:false, dataIndex:'defaults',\n-                editor:new Ext.form.TextField({})},\n+                editor:new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}})},\n             {text:t(\"site_ids\"), flex:100, sortable:true, dataIndex:\"siteId\",\n-                editor:new Ext.form.TextField({}),\n+                editor:new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}}),\n                 tooltip: t(\"site_ids_tooltip\")\n             },\n             {text:t(\"priority\"), flex:50, sortable:true, dataIndex:'priority', editor:new Ext.form.ComboBox({\n@@ -143,7 +146,7 @@ pimcore.settings.staticroutes = Class.create({\n                 triggerAction:\"all\"\n             })},\n             {text:t(\"methods\"), flex:50, sortable:false, dataIndex:'methods',\n-                editor:new Ext.form.TextField({}),\n+                editor:new Ext.form.TextField({listeners: {'change': pimcore.helpers.htmlEncodeTextField}}),\n             },\n             {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                 hidden: true,\n@@ -186,9 +189,15 @@ pimcore.settings.staticroutes = Class.create({\n                             return;\n                         }\n \n-                        pimcore.helpers.deleteConfirm(t('staticroute'), data.data.name, function () {\n-                            grid.getStore().removeAt(rowIndex);\n-                        }.bind(this));\n+                        const decodedName = Ext.util.Format.htmlDecode(data.data.name);\n+\n+                        pimcore.helpers.deleteConfirm(\n+                            t('staticroute'),\n+                            Ext.util.Format.htmlEncode(decodedName),\n+                            function () {\n+                                grid.getStore().removeAt(rowIndex);\n+                            }.bind(this)\n+                        );\n                     }.bind(this)\n                 }]\n             }"
        },
        {
          "filename": "lib/Security/SecurityHelper.php",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -17,8 +17,12 @@\n \n class SecurityHelper\n {\n-    public static function getStringWithoutControlChars(string $text): string\n+    public static function convertHtmlSpecialChars(?string $text): ?string\n     {\n-        return preg_replace('[\\\\\\\\<>\"\\'`!?/%$(){};,:|=]', '', $text);\n+        if(is_string($text)){\n+            return htmlspecialchars($text, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8', false);\n+        }\n+\n+        return null;\n     }\n }"
        },
        {
          "filename": "models/Staticroute.php",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -17,6 +17,7 @@\n \n use Pimcore\\Event\\FrontendEvents;\n use Pimcore\\Model\\Exception\\NotFoundException;\n+use Pimcore\\Security\\SecurityHelper;\n use Symfony\\Component\\EventDispatcher\\GenericEvent;\n \n /**\n@@ -292,7 +293,7 @@ public function setId($id)\n      */\n     public function setPattern($pattern)\n     {\n-        $this->pattern = $pattern;\n+        $this->pattern = SecurityHelper::convertHtmlSpecialChars($pattern);\n \n         return $this;\n     }\n@@ -304,7 +305,7 @@ public function setPattern($pattern)\n      */\n     public function setController($controller)\n     {\n-        $this->controller = $controller;\n+        $this->controller = SecurityHelper::convertHtmlSpecialChars($controller);\n \n         return $this;\n     }\n@@ -316,7 +317,7 @@ public function setController($controller)\n      */\n     public function setVariables($variables)\n     {\n-        $this->variables = $variables;\n+        $this->variables = SecurityHelper::convertHtmlSpecialChars($variables);\n \n         return $this;\n     }\n@@ -328,7 +329,7 @@ public function setVariables($variables)\n      */\n     public function setDefaults($defaults)\n     {\n-        $this->defaults = $defaults;\n+        $this->defaults = SecurityHelper::convertHtmlSpecialChars($defaults);\n \n         return $this;\n     }\n@@ -360,7 +361,7 @@ public function getPriority()\n      */\n     public function setName($name)\n     {\n-        $this->name = $name;\n+        $this->name = SecurityHelper::convertHtmlSpecialChars($name);\n \n         return $this;\n     }\n@@ -380,7 +381,7 @@ public function getName()\n      */\n     public function setReverse($reverse)\n     {\n-        $this->reverse = $reverse;\n+        $this->reverse = SecurityHelper::convertHtmlSpecialChars($reverse);\n \n         return $this;\n     }\n@@ -611,7 +612,9 @@ public function setMethods($methods)\n     {\n         if (is_string($methods)) {\n             $methods = strlen($methods) ? explode(',', $methods) : [];\n-            $methods = array_map('trim', $methods);\n+            foreach($methods as $key => $method) {\n+                $methods[$key] = SecurityHelper::convertHtmlSpecialChars(trim($method));\n+            }\n         }\n \n         $this->methods = $methods;"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a3c7544d81bc772dc53f7ea0e99c6eac37c59114",
            "date": "2025-01-14T13:54:55Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "081e73f14983613ed43e6ea9e40450063392b289",
            "date": "2025-01-14T13:53:00Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "bf1081a2c9a7de74ca965aa802ea07ac4e022b28",
            "date": "2025-01-14T13:52:39Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "7a232e673e963325610264dc760d8d0dbdd7a0d1",
            "date": "2025-01-14T13:52:17Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "cf380cd040bdbb134e62dd1fa9cb3954def8a595",
            "date": "2025-01-14T13:50:40Z",
            "author_login": "herbertroth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Generic in GitHub repository pimcore/pimcore prior to 10.5.21.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-10T05:15:11.877",
    "last_modified": "2024-11-21T07:58:56.310",
    "fix_date": "2023-04-19T09:35:21Z"
  },
  "references": [
    {
      "url": "https://github.com/pimcore/pimcore/commit/07a2c95be524c7e20105cef58c5767d4ebb06091",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/564cb512-2bcc-4458-8c20-88110ab45801",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pimcore/pimcore/commit/07a2c95be524c7e20105cef58c5767d4ebb06091",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/564cb512-2bcc-4458-8c20-88110ab45801",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.947803",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pimcore",
    "owner": "pimcore",
    "created_at": "2011-11-01T09:16:14Z",
    "updated_at": "2025-01-14T09:15:55Z",
    "pushed_at": "2025-01-13T14:41:25Z",
    "size": 524212,
    "stars": 3455,
    "forks": 1448,
    "open_issues": 480,
    "watchers": 3455,
    "has_security_policy": false,
    "default_branch": "11.x",
    "protected_branches": [
      "11.x",
      "11.5"
    ],
    "languages": {
      "PHP": 6722485,
      "JavaScript": 330727,
      "Twig": 9213,
      "CSS": 2342,
      "HTML": 687,
      "Shell": 538
    },
    "commit_activity": {
      "total_commits_last_year": 619,
      "avg_commits_per_week": 11.903846153846153,
      "days_active_last_year": 182
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:01:17.566039"
  }
}