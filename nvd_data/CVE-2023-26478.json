{
  "cve_id": "CVE-2023-26478",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "3c73c59e39b6436b1074d8834cf276916010014d",
    "related_commits": [
      "3c73c59e39b6436b1074d8834cf276916010014d",
      "3c73c59e39b6436b1074d8834cf276916010014d"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/3c73c59e39b6436b1074d8834cf276916010014d.patch",
    "fix_commit_details": {
      "sha": "3c73c59e39b6436b1074d8834cf276916010014d",
      "commit_date": "2022-10-06T14:34:24Z",
      "author": {
        "login": "manuelleduc",
        "type": "User",
        "stats": {
          "total_commits": 953,
          "average_weekly_commits": 0.9989517819706499,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 179
        }
      },
      "commit_message": {
        "title": "XWIKI-20180: TemporaryAttachmentsScriptService#uploadTemporaryAttachment return an XWikiAttachment instance",
        "length": 107,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 236,
        "additions": 215,
        "deletions": 21
      },
      "files": [
        {
          "filename": "xwiki-platform-core/pom.xml",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -126,6 +126,18 @@\n                  Single justification example:\n             -->\n             \n+            <revapi.differences>\n+              <differences>\n+                <item>\n+                  <ignore>true</ignore>\n+                  <code>java.method.returnTypeChanged</code>\n+                  <old>method com.xpn.xwiki.doc.XWikiAttachment org.xwiki.store.script.TemporaryAttachmentsScriptService::uploadTemporaryAttachment(org.xwiki.model.reference.DocumentReference, java.lang.String)</old>\n+                  <new>method com.xpn.xwiki.api.Attachment org.xwiki.store.script.TemporaryAttachmentsScriptService::uploadTemporaryAttachment(org.xwiki.model.reference.DocumentReference, java.lang.String)</new>\n+                  <justification>Unstable API change: Script services are not supposed to expose classes from com.xpn.xwiki.doc.*</justification>\n+                  <criticality>documented</criticality>\n+                </item>\n+              </differences>\n+            </revapi.differences>\n           </analysisConfiguration>\n         </configuration>\n       </plugin>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-oldcore/pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -31,7 +31,7 @@\n   <name>XWiki Platform - Store - Filesystem - Old Core</name>\n   <description>Implement various oldcore store APIs based on filesystem.</description>\n   <properties>\n-    <xwiki.jacoco.instructionRatio>0.37</xwiki.jacoco.instructionRatio>\n+    <xwiki.jacoco.instructionRatio>0.38</xwiki.jacoco.instructionRatio>\n     <!-- Old names of this module used for retro compatibility when resolving dependencies of old extensions -->\n     <xwiki.extension.features>org.xwiki.platform:xwiki-platform-store-filesystem-attachments</xwiki.extension.features>\n   </properties>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-oldcore/src/main/java/org/xwiki/store/filesystem/internal/DefaultTemporaryAttachmentSessionsManager.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -38,6 +38,7 @@\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiAttachment;\n+import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;\n \n /**\n@@ -99,6 +100,10 @@ public XWikiAttachment uploadAttachment(DocumentReference documentReference, Par\n             xWikiAttachment.setFilename(part.getSubmittedFileName());\n             xWikiAttachment.setContent(part.getInputStream());\n             xWikiAttachment.setAuthorReference(context.getUserReference());\n+            // Initialize an empty document with the right document reference and locale. We don't set the actual \n+            // document since it's a temporary attachment, but it is still useful to have a minimal knowledge of the\n+            // document it is stored for.\n+            xWikiAttachment.setDoc(new XWikiDocument(documentReference, documentReference.getLocale()), false);\n             temporaryAttachmentSession.addAttachment(documentReference, xWikiAttachment);\n         } catch (IOException e) {\n             throw new TemporaryAttachmentException(\"Error while reading the content of a request part\", e);"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-oldcore/src/main/java/org/xwiki/store/script/TemporaryAttachmentsScriptService.java",
          "status": "modified",
          "additions": 21,
          "deletions": 12,
          "patch": "@@ -20,6 +20,7 @@\n package org.xwiki.store.script;\n \n import java.io.IOException;\n+import java.util.Optional;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n@@ -28,7 +29,6 @@\n import javax.servlet.ServletException;\n import javax.servlet.http.Part;\n \n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.slf4j.Logger;\n import org.xwiki.component.annotation.Component;\n import org.xwiki.model.reference.DocumentReference;\n@@ -38,13 +38,17 @@\n import org.xwiki.store.TemporaryAttachmentSessionsManager;\n \n import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.api.Attachment;\n+import com.xpn.xwiki.api.Document;\n import com.xpn.xwiki.doc.XWikiAttachment;\n \n+import static org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseMessage;\n+\n /**\n  * Script service dedicated to the handling of temporary attachments.\n  *\n- * @see TemporaryAttachmentSessionsManager\n  * @version $Id$\n+ * @see TemporaryAttachmentSessionsManager\n  * @since 14.3RC1\n  */\n @Component\n@@ -66,25 +70,30 @@ public class TemporaryAttachmentsScriptService implements ScriptService\n      * Temporary upload the attachment identified by the given field name: the request should be of type\n      * {@code multipart/form-data}.\n      *\n-     * @param documentReference the target document reference the attachment should be later attached to.\n-     * @param fieldName the name of the field of the uploaded data.\n-     * @return a temporary {@link XWikiAttachment} not yet persisted.\n-     *          attachment.\n+     * @param documentReference the target document reference the attachment should be later attached to\n+     * @param fieldName the name of the field of the uploaded data\n+     * @return a temporary {@link Attachment} not yet persisted attachment, or {@code null} in case of error\n      */\n-    public XWikiAttachment uploadTemporaryAttachment(DocumentReference documentReference, String fieldName)\n+    public Attachment uploadTemporaryAttachment(DocumentReference documentReference, String fieldName)\n     {\n         XWikiContext context = this.contextProvider.get();\n-        XWikiAttachment result = null;\n+        Optional<XWikiAttachment> result = Optional.empty();\n         try {\n             Part part = context.getRequest().getPart(fieldName);\n             if (part != null) {\n-                result = this.temporaryAttachmentSessionsManager.uploadAttachment(documentReference, part);\n+                result = Optional.of(this.temporaryAttachmentSessionsManager.uploadAttachment(documentReference, part));\n             }\n         } catch (IOException | ServletException e) {\n-            logger.warn(\"Error while reading the request content part: [{}]\", ExceptionUtils.getRootCauseMessage(e));\n+            this.logger.warn(\"Error while reading the request content part: [{}]\", getRootCauseMessage(e));\n         } catch (TemporaryAttachmentException e) {\n-            logger.warn(\"Error while uploading the attachment: [{}]\", ExceptionUtils.getRootCauseMessage(e));\n+            this.logger.warn(\"Error while uploading the attachment: [{}]\", getRootCauseMessage(e));\n         }\n-        return result;\n+\n+        return result.map(attachment -> {\n+            Document document = Optional.ofNullable(attachment.getDoc())\n+                .map(doc -> doc.newDocument(context))\n+                .orElse(null);\n+            return new Attachment(document, attachment, context);\n+        }).orElse(null);\n     }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-oldcore/src/test/java/org/xwiki/store/filesystem/internal/DefaultTemporaryAttachmentSessionsManagerTest.java",
          "status": "modified",
          "additions": 7,
          "deletions": 8,
          "patch": "@@ -45,10 +45,10 @@\n import com.xpn.xwiki.XWiki;\n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiAttachment;\n-import com.xpn.xwiki.plugin.fileupload.FileUploadPlugin;\n import com.xpn.xwiki.web.Utils;\n import com.xpn.xwiki.web.XWikiRequest;\n \n+import static com.xpn.xwiki.plugin.fileupload.FileUploadPlugin.UPLOAD_MAXSIZE_PARAMETER;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -104,9 +104,7 @@ void uploadAttachment() throws Exception\n         String sessionId = \"mySession\";\n         when(this.httpSession.getId()).thenReturn(sessionId);\n \n-        DocumentReference documentReference = mock(DocumentReference.class);\n-        SpaceReference spaceReference = mock(SpaceReference.class);\n-        when(documentReference.getLastSpaceReference()).thenReturn(spaceReference);\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"Space\", \"Document\");\n         Part part = mock(Part.class);\n \n         String filename = \"fileFoo.xml\";\n@@ -118,22 +116,23 @@ void uploadAttachment() throws Exception\n         when(this.context.getWiki()).thenReturn(xwiki);\n         DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"User\");\n         when(this.context.getUserReference()).thenReturn(userReference);\n-        when(xwiki.getSpacePreference(FileUploadPlugin.UPLOAD_MAXSIZE_PARAMETER, spaceReference, this.context))\n-            .thenReturn(\"42\");\n+        SpaceReference lastSpaceReference = documentReference.getLastSpaceReference();\n+        when(xwiki.getSpacePreference(UPLOAD_MAXSIZE_PARAMETER, lastSpaceReference, this.context)).thenReturn(\"42\");\n         when(part.getSize()).thenReturn(41L);\n \n         doAnswer(invocationOnMock -> {\n             TemporaryAttachmentSession temporaryAttachmentSession = invocationOnMock.getArgument(1);\n             assertEquals(sessionId, temporaryAttachmentSession.getSessionId());\n             return null;\n-        }).when(httpSession).setAttribute(eq(ATTRIBUTE_KEY), any(TemporaryAttachmentSession.class));\n+        }).when(this.httpSession).setAttribute(eq(ATTRIBUTE_KEY), any(TemporaryAttachmentSession.class));\n \n         XWikiAttachment attachment = this.attachmentManager.uploadAttachment(documentReference, part);\n         assertNotNull(attachment);\n         assertEquals(filename, attachment.getFilename());\n         assertEquals(userReference, attachment.getAuthorReference());\n+        assertEquals(documentReference, attachment.getDoc().getDocumentReference());\n \n-        verify(httpSession).setAttribute(eq(ATTRIBUTE_KEY), any(TemporaryAttachmentSession.class));\n+        verify(this.httpSession).setAttribute(eq(ATTRIBUTE_KEY), any(TemporaryAttachmentSession.class));\n     }\n \n     @Test"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-store/xwiki-platform-store-filesystem-oldcore/src/test/java/org/xwiki/store/script/TemporaryAttachmentsScriptServiceTest.java",
          "status": "added",
          "additions": 169,
          "deletions": 0,
          "patch": "@@ -0,0 +1,169 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.store.script;\n+\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+\n+import javax.inject.Provider;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.Part;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.store.TemporaryAttachmentException;\n+import org.xwiki.store.TemporaryAttachmentSessionsManager;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+\n+import com.xpn.xwiki.XWiki;\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.api.Attachment;\n+import com.xpn.xwiki.doc.XWikiAttachment;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.user.api.XWikiRightService;\n+import com.xpn.xwiki.web.XWikiRequest;\n+\n+import ch.qos.logback.classic.Level;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test of {@link TemporaryAttachmentsScriptService}.\n+ *\n+ * @version $Id$\n+ * @since 14.9RC1\n+ */\n+@ComponentTest\n+class TemporaryAttachmentsScriptServiceTest\n+{\n+    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"Doc\");\n+\n+    @InjectMockComponents\n+    private TemporaryAttachmentsScriptService temporaryAttachmentsScriptService;\n+\n+    @MockComponent\n+    private Provider<XWikiContext> contextProvider;\n+\n+    @MockComponent\n+    private TemporaryAttachmentSessionsManager temporaryAttachmentSessionsManager;\n+\n+    @Mock\n+    private XWikiContext context;\n+\n+    @Mock\n+    private XWikiRequest request;\n+\n+    @Mock\n+    private Part part;\n+\n+    @Mock\n+    private XWiki wiki;\n+\n+    @Mock\n+    private XWikiDocument xWikiDocument;\n+\n+    @RegisterExtension\n+    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n+    {\n+        when(this.contextProvider.get()).thenReturn(this.context);\n+        when(this.context.getRequest()).thenReturn(this.request);\n+        when(this.context.getWiki()).thenReturn(this.wiki);\n+        when(this.wiki.getDocument(DOCUMENT_REFERENCE, this.context)).thenReturn(this.xWikiDocument);\n+        XWikiRightService xWikiRightService = mock(XWikiRightService.class);\n+        when(this.wiki.getRightService()).thenReturn(xWikiRightService);\n+        when(xWikiRightService.hasProgrammingRights(this.context)).thenReturn(true);\n+    }\n+\n+    @Test\n+    void uploadTemporaryAttachment() throws Exception\n+    {\n+        XWikiAttachment xWikiAttachment = mock(XWikiAttachment.class);\n+\n+        when(this.request.getPart(\"upload\")).thenReturn(this.part);\n+        when(this.temporaryAttachmentSessionsManager.uploadAttachment(DOCUMENT_REFERENCE, this.part))\n+            .thenReturn(xWikiAttachment);\n+\n+        Attachment temporaryAttachment =\n+            this.temporaryAttachmentsScriptService.uploadTemporaryAttachment(DOCUMENT_REFERENCE, \"upload\");\n+\n+        assertSame(xWikiAttachment, temporaryAttachment.getAttachment());\n+\n+        verify(this.temporaryAttachmentSessionsManager).uploadAttachment(DOCUMENT_REFERENCE, this.part);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideUploadTemporaryAttachmentWithException\")\n+    void uploadTemporaryAttachmentPartWithException(Class<? extends Throwable> exceptionType, String expectedMessage)\n+        throws Exception\n+    {\n+        when(this.request.getPart(\"upload\")).thenThrow(exceptionType);\n+\n+        assertNull(this.temporaryAttachmentsScriptService.uploadTemporaryAttachment(DOCUMENT_REFERENCE,\n+            \"upload\"));\n+\n+        verify(this.temporaryAttachmentSessionsManager, never()).uploadAttachment(DOCUMENT_REFERENCE, this.part);\n+        assertEquals(expectedMessage, this.logCapture.getMessage(0));\n+        assertEquals(Level.WARN, this.logCapture.getLogEvent(0).getLevel());\n+    }\n+\n+    public static Stream<Arguments> provideUploadTemporaryAttachmentWithException()\n+    {\n+        return Stream.of(\n+            Arguments.of(IOException.class, \"Error while reading the request content part: [IOException: ]\"),\n+            Arguments.of(ServletException.class, \"Error while reading the request content part: [ServletException: ]\")\n+        );\n+    }\n+\n+    @Test\n+    void uploadTemporaryAttachmentWithException()\n+        throws Exception\n+    {\n+        when(this.request.getPart(\"upload\")).thenReturn(this.part);\n+        when(this.temporaryAttachmentSessionsManager.uploadAttachment(DOCUMENT_REFERENCE, this.part))\n+            .thenThrow(TemporaryAttachmentException.class);\n+\n+        assertNull(this.temporaryAttachmentsScriptService.uploadTemporaryAttachment(DOCUMENT_REFERENCE,\n+            \"upload\"));\n+\n+        assertEquals(\"Error while uploading the attachment: [TemporaryAttachmentException: ]\",\n+            this.logCapture.getMessage(0));\n+        assertEquals(Level.WARN, this.logCapture.getLogEvent(0).getLevel());\n+    }\n+}\n+"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-749",
    "description": "XWiki Platform is a generic wiki platform. Starting in version 14.3-rc-1, `org.xwiki.store.script.TemporaryAttachmentsScriptService#uploadTemporaryAttachment` returns an instance of `com.xpn.xwiki.doc.XWikiAttachment`. This class is not supported to be exposed to users without the `programing` right.\n`com.xpn.xwiki.api.Attachment` should be used instead and takes case of checking the user's rights before performing dangerous operations. This has been patched in versions 14.9-rc-1 and 14.4.6. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-02T18:15:10.697",
    "last_modified": "2024-11-21T07:51:35.797",
    "fix_date": "2022-10-06T14:34:24Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/3c73c59e39b6436b1074d8834cf276916010014d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-8692-g6g9-gm5p",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20180",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/3c73c59e39b6436b1074d8834cf276916010014d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-8692-g6g9-gm5p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20180",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.795135",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}