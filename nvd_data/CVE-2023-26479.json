{
  "cve_id": "CVE-2023-26479",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "e5b82cd98072464196a468b8f7fe6396dce142a7",
    "related_commits": [
      "e5b82cd98072464196a468b8f7fe6396dce142a7",
      "e5b82cd98072464196a468b8f7fe6396dce142a7"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/e5b82cd98072464196a468b8f7fe6396dce142a7.patch",
    "fix_commit_details": {
      "sha": "e5b82cd98072464196a468b8f7fe6396dce142a7",
      "commit_date": "2022-10-11T12:53:22Z",
      "author": {
        "login": "manuelleduc",
        "type": "User",
        "stats": {
          "total_commits": 953,
          "average_weekly_commits": 0.9989517819706499,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 179
        }
      },
      "commit_message": {
        "title": "XWIKI-19838: Improve handling of unexpected parser errors",
        "length": 57,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 125,
        "additions": 81,
        "deletions": 44
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-parser/src/main/java/org/xwiki/rendering/internal/parser/DefaultContentParser.java",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -59,7 +59,15 @@ public class DefaultContentParser implements ContentParser\n     @Override\n     public XDOM parse(String content, Syntax syntax) throws ParseException, MissingParserException\n     {\n-        return getParser(syntax).parse(new StringReader(content == null ? \"\" : content));\n+        Parser parser = getParser(syntax);\n+        try {\n+            return parser.parse(new StringReader(content == null ? \"\" : content));\n+        } catch (StackOverflowError | Exception e) {\n+            // All exceptions as well as stack overflow errors are captured and wrapped in parse exceptions to make sure\n+            // that they are handled correctly by the callers. Without this, some parsing issues can be badly handled,\n+            // leading to instability issues.\n+            throw new ParseException(String.format(\"Failed to parse with syntax [%s].\", syntax.toIdString()), e);\n+        }\n     }\n \n     @Override"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rendering/xwiki-platform-rendering-parser/src/test/java/org/xwiki/rendering/internal/parser/DefaultContentParserTest.java",
          "status": "modified",
          "additions": 72,
          "deletions": 43,
          "patch": "@@ -19,93 +19,122 @@\n  */\n package org.xwiki.rendering.internal.parser;\n \n-import static org.hamcrest.CoreMatchers.any;\n-import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.hamcrest.CoreMatchers.nullValue;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n-import static org.mockito.hamcrest.MockitoHamcrest.argThat;\n-import static org.mockito.Mockito.when;\n-\n import java.io.Reader;\n-import java.util.Collections;\n \n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n+import org.hamcrest.CoreMatchers;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import org.xwiki.component.internal.ContextComponentManagerProvider;\n import org.xwiki.component.manager.ComponentLookupException;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n-import org.xwiki.rendering.block.Block;\n import org.xwiki.rendering.block.XDOM;\n import org.xwiki.rendering.listener.MetaData;\n-import org.xwiki.rendering.parser.ContentParser;\n import org.xwiki.rendering.parser.MissingParserException;\n+import org.xwiki.rendering.parser.ParseException;\n import org.xwiki.rendering.parser.Parser;\n import org.xwiki.rendering.syntax.Syntax;\n import org.xwiki.test.annotation.ComponentList;\n-import org.xwiki.test.mockito.MockitoComponentMockingRule;\n+import org.xwiki.test.junit5.mockito.ComponentTest;\n+import org.xwiki.test.junit5.mockito.InjectMockComponents;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.test.mockito.MockitoComponentManager;\n+\n+import static java.util.Collections.emptyList;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.hamcrest.MockitoHamcrest.argThat;\n+import static org.xwiki.rendering.syntax.Syntax.PLAIN_1_0;\n+import static org.xwiki.rendering.syntax.Syntax.XWIKI_2_1;\n \n /**\n- * Unit tests for {@link org.xwiki.rendering.internal.parser.DefaultContentParser}.\n+ * Unit tests for {@link DefaultContentParser}.\n  *\n  * @version $Id$\n  * @since 6.0M2\n  */\n+@ComponentTest\n @ComponentList(ContextComponentManagerProvider.class)\n-public class DefaultContentParserTest\n+class DefaultContentParserTest\n {\n-    @Rule\n-    public final MockitoComponentMockingRule<ContentParser> mocker =\n-        new MockitoComponentMockingRule<>(DefaultContentParser.class);\n-\n-    @Rule\n-    public ExpectedException thrown = ExpectedException.none();\n-\n     private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"wiki\", \"space\", \"page\");\n+\n     private static final String SOURCE = \"wiki:space.page\";\n \n-    @Before\n-    public void configure() throws Exception\n-    {\n-        Parser parser = mocker.registerMockComponent(Parser.class, Syntax.PLAIN_1_0.toIdString());\n-        when(parser.parse(argThat(any(Reader.class)))).thenReturn(new XDOM(Collections.<Block>emptyList()));\n+    @InjectMockComponents\n+    private DefaultContentParser defaultContentParser;\n+\n+    @MockComponent\n+    private EntityReferenceSerializer<String> serializer;\n \n-        EntityReferenceSerializer<String> serializer = mocker.getInstance(EntityReferenceSerializer.TYPE_STRING);\n-        when(serializer.serialize(DOCUMENT_REFERENCE)).thenReturn(SOURCE);\n+    private Parser plain10parser;\n+\n+    @BeforeEach\n+    void setUp(MockitoComponentManager componentManager) throws Exception\n+    {\n+        this.plain10parser = componentManager.registerMockComponent(Parser.class, PLAIN_1_0.toIdString());\n+        when(this.plain10parser.parse(argThat(CoreMatchers.any(Reader.class)))).thenReturn(new XDOM(emptyList()));\n+        when(this.serializer.serialize(DOCUMENT_REFERENCE)).thenReturn(SOURCE);\n     }\n \n     @Test\n-    public void parseHasNoMetadataSource() throws Exception\n+    void parseHasNoMetadataSource() throws Exception\n     {\n-        XDOM xdom = mocker.getComponentUnderTest().parse(\"\", Syntax.PLAIN_1_0);\n+        XDOM xdom = this.defaultContentParser.parse(\"\", PLAIN_1_0);\n \n         assertThat(xdom.getMetaData().getMetaData(MetaData.SOURCE), nullValue());\n     }\n \n     @Test\n-    public void parseIsAddingMetadataSource() throws Exception\n+    void parseIsAddingMetadataSource() throws Exception\n     {\n-        XDOM xdom = mocker.getComponentUnderTest().parse(\"\", Syntax.PLAIN_1_0, DOCUMENT_REFERENCE);\n+        XDOM xdom = this.defaultContentParser.parse(\"\", PLAIN_1_0, DOCUMENT_REFERENCE);\n \n         assertThat(xdom.getMetaData().getMetaData(MetaData.SOURCE), equalTo(SOURCE));\n     }\n \n     @Test\n-    public void parseWhenNoParser() throws Exception\n+    void parseWhenNoParser()\n+    {\n+        MissingParserException missingParserException = assertThrows(MissingParserException.class,\n+            () -> this.defaultContentParser.parse(\"\", XWIKI_2_1, DOCUMENT_REFERENCE));\n+        assertEquals(ComponentLookupException.class, missingParserException.getCause().getClass());\n+        assertEquals(\"Failed to find a parser for syntax [XWiki 2.1]\", missingParserException.getMessage());\n+    }\n+\n+    @Test\n+    void parseWhenNoParserFail() throws Exception\n+    {\n+        when(this.plain10parser.parse(any())).thenThrow(StackOverflowError.class);\n+\n+        ParseException parseErrorException =\n+            assertThrows(ParseException.class, () -> this.defaultContentParser.parse(\"content\", PLAIN_1_0));\n+\n+        assertEquals(StackOverflowError.class, parseErrorException.getCause().getClass());\n+        assertEquals(\"Failed to parse with syntax [plain/1.0].\", parseErrorException.getMessage());\n+    }\n+\n+    @Test\n+    void parseWhenNoParserFailWithSource() throws Exception\n     {\n-        thrown.expect(MissingParserException.class);\n-        thrown.expectMessage(\"Failed to find a parser for syntax [XWiki 2.1]\");\n-        thrown.expectCause(any(ComponentLookupException.class));\n-        mocker.getComponentUnderTest().parse(\"\", Syntax.XWIKI_2_1, DOCUMENT_REFERENCE);\n+        when(this.plain10parser.parse(any())).thenThrow(StackOverflowError.class);\n+\n+        ParseException parseErrorException =\n+            assertThrows(ParseException.class, () -> this.defaultContentParser.parse(\"content\", PLAIN_1_0, null));\n+\n+        assertEquals(StackOverflowError.class, parseErrorException.getCause().getClass());\n+        assertEquals(\"Failed to parse with syntax [plain/1.0].\", parseErrorException.getMessage());\n     }\n \n     @Test\n-    public void parseWhenNullSource() throws Exception\n+    void parseWhenNullSource() throws Exception\n     {\n-        XDOM xdom = mocker.getComponentUnderTest().parse(null, Syntax.PLAIN_1_0);\n+        XDOM xdom = this.defaultContentParser.parse(null, Syntax.PLAIN_1_0);\n         assertEquals(0, xdom.getChildren().size());\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-755",
    "description": "XWiki Platform is a generic wiki platform. Starting in version 6.0, users with write rights can insert well-formed content that is not handled well by the parser. As a consequence, some pages becomes unusable, including the user index (if the page containing the faulty content is a user page) and the page index.\n\nNote that on the page, the normal UI is completely missing and it is not possible to open the editor directly to revert the change as the stack overflow is already triggered while getting the title of the document. This means that it is quite difficult to remove this content once inserted.\n\nThis has been patched in XWiki 13.10.10, 14.4.6, and 14.9-rc-1. A temporary workaround to avoid Stack Overflow errors is to increase the memory allocated to the stack by using the `-Xss` JVM parameter (e.g., `-Xss32m`). This should allow the parser to pass and to fix the faulty content. The consequences for other aspects of the system (e.g., performance) are unknown, and this workaround should be only be used as a temporary solution. The workaround does not prevent the issue occurring again with other content. Consequently, it is strongly advised to upgrade to a version where the issue has been patched.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-02T18:15:11.057",
    "last_modified": "2024-11-21T07:51:35.970",
    "fix_date": "2022-10-11T12:53:22Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/e5b82cd98072464196a468b8f7fe6396dce142a7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-52vf-hvv3-98h7",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19838",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/e5b82cd98072464196a468b8f7fe6396dce142a7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-52vf-hvv3-98h7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19838",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.795280",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}