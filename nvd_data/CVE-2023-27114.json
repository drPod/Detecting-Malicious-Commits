{
  "cve_id": "CVE-2023-27114",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "a15067a8eaa836bcc24b0882712c14d1baa66509",
    "related_commits": [
      "a15067a8eaa836bcc24b0882712c14d1baa66509",
      "a15067a8eaa836bcc24b0882712c14d1baa66509"
    ],
    "patch_url": "https://github.com/radareorg/radare2/commit/a15067a8eaa836bcc24b0882712c14d1baa66509.patch",
    "fix_commit_details": {
      "sha": "a15067a8eaa836bcc24b0882712c14d1baa66509",
      "commit_date": "2023-02-20T12:29:43Z",
      "author": {
        "login": "radare",
        "type": "User",
        "stats": {
          "total_commits": 16352,
          "average_weekly_commits": 19.630252100840337,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 785
        }
      },
      "commit_message": {
        "title": "Fix #21363 - null deref in the wasm disassembler ##crash",
        "length": 56,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 69,
        "additions": 47,
        "deletions": 22
      },
      "files": [
        {
          "filename": "libr/arch/p/wasm/wasm.c",
          "status": "modified",
          "additions": 22,
          "deletions": 22,
          "patch": "@@ -1,11 +1,8 @@\n-/* radare - LGPL - Copyright 2017-2022 - pancake, cgvwzq */\n+/* radare - LGPL - Copyright 2017-2023 - pancake, cgvwzq */\n \n // http://webassembly.org/docs/binary-encoding/#module-structure\n \n-#include <r_asm.h>\n-#include <r_lib.h>\n-#include <string.h>\n-\n+#include <r_arch.h>\n #include \"wasm.h\"\n #include \"../../../bin/format/wasm/wasm.h\"\n \n@@ -611,7 +608,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\tcase WASM_OP_F32REINTERPRETI32:\n \t\tcase WASM_OP_F64REINTERPRETI64:\n \t\tcase WASM_OP_END:\n-\t\t\tif (txt) {\n+\t\t\tif (txt && opdef->txt) {\n \t\t\t\top->txt = strdup (opdef->txt);\n \t\t\t}\n \t\t\tbreak;\n@@ -624,7 +621,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (!(n > 0 && n < buf_len)) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\tswitch (val) {\n \t\t\t\t\tcase R_BIN_WASM_VALUETYPE_VOID:\n \t\t\t\t\t\top->txt = strdup (opdef->txt);\n@@ -660,7 +657,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (n <= 0 || n >= buf_len) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %d\", opdef->txt, op->val);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -693,7 +690,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\t\tgoto beach;\n \t\t\t\t}\n \t\t\t\top->len += n;\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\tRStrBuf *sb = r_strbuf_new (\"\");\n \t\t\t\t\tif (sb) {\n \t\t\t\t\t\tr_strbuf_setf (sb, \"%s %d \", opdef->txt, count);\n@@ -724,7 +721,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n \t\t\t\treserved &= 0x1;\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %d %d\", opdef->txt, val, reserved);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -741,7 +738,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (!(n > 0 && n < buf_len)) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %d\", opdef->txt, val);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -781,7 +778,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (!(n > 0 && op->len + n <= buf_len)) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %d %d\", opdef->txt, flag, offset);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -796,7 +793,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n \t\t\t\treserved &= 0x1;\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %d\", opdef->txt, reserved);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -809,7 +806,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (!(n > 0 && n < buf_len)) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %\" PFMT32d, opdef->txt, val);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -822,7 +819,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (!(n > 0 && n < buf_len)) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %\" PFMT64d, opdef->txt, val);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -835,7 +832,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\t\tfloat f;\n \t\t\t\t} u;\n \t\t\t\tu.v = r_read_at_le32 (buf, 1);\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %f\", opdef->txt, u.f);\n \t\t\t\t}\n \t\t\t\top->len += 4;\n@@ -850,7 +847,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\t\tdouble f;\n \t\t\t\t} u;\n \t\t\t\tu.v = r_read_at_le64 (buf, 1);\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %f\", opdef->txt, u.f);\n \t\t\t\t}\n \t\t\t\top->len += 8;\n@@ -936,7 +933,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (!(n > 0 && op->len + n <= buf_len)) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %d %d\", opdef->txt, flag, offset);\n \t\t\t\t}\n \t\t\t\top->len += n;\n@@ -1108,7 +1105,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\tcase WASM_OP_I8X16ABS:\n \t\tcase WASM_OP_I16X8ABS:\n \t\tcase WASM_OP_I32X4ABS:\n-\t\t\tif (txt) {\n+\t\t\tif (txt && opdef->txt) {\n \t\t\t\top->txt = strdup (opdef->txt);\n \t\t\t}\n \t\t\tbreak;\n@@ -1136,7 +1133,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (!(n > 0 && n < buf_len)) {\n \t\t\t\t\tgoto err;\n \t\t\t\t}\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s o:%d a:2^%d\", opdef->txt, offset, align);\n \t\t\t\t}\n \t\t\t}\n@@ -1156,7 +1153,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\tif (txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %02x %02x %02x %02x %02x %02x %02x \" \\\n \t\t\t\t\t\t\"%02x %02x %02x %02x %02x %02x %02x %02x %02x\",\n-\t\t\t\t\t\topdef->txt, bytes[0], bytes[1], bytes[2], bytes[3],\n+\t\t\t\t\t\tr_str_get (opdef->txt), bytes[0], bytes[1], bytes[2], bytes[3],\n \t\t\t\t\t\tbytes[4], bytes[5], bytes[6], bytes[7], bytes[8],\n \t\t\t\t\t\tbytes[9], bytes[10], bytes[11], bytes[12], bytes[13],\n \t\t\t\t\t\tbytes[14], bytes[15]);\n@@ -1183,7 +1180,7 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t\t\t\t}\n \t\t\t\tunsigned char lane = buf[1 + simdop_size];\n \t\t\t\t++op->len;\n-\t\t\t\tif (txt) {\n+\t\t\t\tif (txt && opdef->txt) {\n \t\t\t\t\top->txt = r_str_newf (\"%s %d\", opdef->txt, lane);\n \t\t\t\t}\n \t\t\t}\n@@ -1192,6 +1189,9 @@ R_IPI int wasm_dis(WasmOp *op, const ut8 *buf, int buf_len, bool txt) {\n \t} else {\n \t\tgoto err;\n \t}\n+\tif (txt && !op->txt) {\n+\t\top->txt = strdup (\"incorrect\");\n+\t}\n \treturn op->len;\n \n   err:"
        },
        {
          "filename": "test/db/anal/wasm",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+NAME=wasm crash test\n+FILE=bins/wasm/nullderef.wasm\n+CMDS=<<EOF\n+pd 10\n+EOF\n+EXPECT=<<EOF\n+            ;-- entry0:\n+            ;-- fcn.0:\n+            0x000000be      4185feff77     i32.const 251657989\n+            0x000000c3      fd0f           i8x16.splat\n+            0x000000c5      fda001         incorrect\n+            0x000000c8      fd64           incorrect\n+            0x000000ca      0b             end\n+            0x000000cb      00             trap\n+            0x000000cc      00             trap\n+            0x000000cd      00             trap\n+            0x000000ce      00             trap\n+            0x000000cf      00             trap\n+EOF\n+EXPECT_ERR=<<EOF\n+ERROR: unknown section id: 13\n+ERROR: unknown section id: 109\n+EOF\n+RUN\n+"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f85675c7a5d542a89318b62d4a4bc997e595e03",
            "date": "2025-01-14T11:01:39Z",
            "author_login": "radare"
          },
          {
            "sha": "92d45a6034fe60123adc23bf49b398809fe36d25",
            "date": "2025-01-14T11:11:00Z",
            "author_login": "radare"
          },
          {
            "sha": "07be136859c56f96a692c8d5d1a3531345f16a0c",
            "date": "2025-01-14T10:46:07Z",
            "author_login": "radare"
          },
          {
            "sha": "05ebe2e92fc1905702201106228b285c80bd958b",
            "date": "2025-01-14T10:28:47Z",
            "author_login": "radare"
          },
          {
            "sha": "e672c13d0f3620daf80a718e47d759f933bd8961",
            "date": "2025-01-14T10:18:30Z",
            "author_login": "trufae"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "radare2 v5.8.3 was discovered to contain a segmentation fault via the component wasm_dis at p/wasm/wasm.c.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-10T02:15:58.403",
    "last_modified": "2024-11-21T07:52:21.330",
    "fix_date": "2023-02-20T12:29:43Z"
  },
  "references": [
    {
      "url": "https://github.com/radareorg/radare2/commit/a15067a8eaa836bcc24b0882712c14d1baa66509",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/radareorg/radare2/issues/21363",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/a15067a8eaa836bcc24b0882712c14d1baa66509",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/radareorg/radare2/issues/21363",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.828301",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-14T11:39:09Z",
    "pushed_at": "2025-01-14T11:39:05Z",
    "size": 182812,
    "stars": 20990,
    "forks": 3027,
    "open_issues": 874,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29143253,
      "Makefile": 262919,
      "Shell": 145034,
      "Meson": 123192,
      "C++": 82794,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1594,
      "avg_commits_per_week": 30.653846153846153,
      "days_active_last_year": 294
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:16.054007"
  }
}