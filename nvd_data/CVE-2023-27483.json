{
  "cve_id": "CVE-2023-27483",
  "github_data": {
    "repository": "crossplane/crossplane-runtime",
    "fix_commit": "53508a9f4374604db140dd8ab2fa52276441e738",
    "related_commits": [
      "53508a9f4374604db140dd8ab2fa52276441e738",
      "53508a9f4374604db140dd8ab2fa52276441e738"
    ],
    "patch_url": "https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738.patch",
    "fix_commit_details": {
      "sha": "53508a9f4374604db140dd8ab2fa52276441e738",
      "commit_date": "2023-03-08T13:44:59Z",
      "author": {
        "login": "turkenh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-vfvj-3m3g-m532",
        "length": 83,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 73,
        "additions": 67,
        "deletions": 6
      },
      "files": [
        {
          "filename": "pkg/fieldpath/paved.go",
          "status": "modified",
          "additions": 32,
          "deletions": 5,
          "patch": "@@ -25,6 +25,9 @@ import (\n \t\"github.com/crossplane/crossplane-runtime/pkg/errors\"\n )\n \n+// DefaultMaxFieldPathIndex is the max allowed index in a field path.\n+const DefaultMaxFieldPathIndex = 1024\n+\n type errNotFound struct {\n \terror\n }\n@@ -46,19 +49,39 @@ func IsNotFound(err error) bool {\n \n // A Paved JSON object supports getting and setting values by their field path.\n type Paved struct {\n-\tobject map[string]any\n+\tobject            map[string]any\n+\tmaxFieldPathIndex uint\n }\n \n+type PavedOption func(paved *Paved)\n+\n // PaveObject paves a runtime.Object, making it possible to get and set values\n // by field path. o must be a non-nil pointer to an object.\n-func PaveObject(o runtime.Object) (*Paved, error) {\n+func PaveObject(o runtime.Object, opts ...PavedOption) (*Paved, error) {\n \tu, err := runtime.DefaultUnstructuredConverter.ToUnstructured(o)\n-\treturn Pave(u), errors.Wrap(err, \"cannot convert object to unstructured data\")\n+\treturn Pave(u, opts...), errors.Wrap(err, \"cannot convert object to unstructured data\")\n }\n \n // Pave a JSON object, making it possible to get and set values by field path.\n-func Pave(object map[string]any) *Paved {\n-\treturn &Paved{object: object}\n+func Pave(object map[string]any, opts ...PavedOption) *Paved {\n+\tp := &Paved{object: object, maxFieldPathIndex: DefaultMaxFieldPathIndex}\n+\n+\tfor _, opt := range opts {\n+\t\topt(p)\n+\t}\n+\n+\treturn p\n+}\n+\n+// WithMaxFieldPathIndex returns a PavedOption that sets the max allowed index for field paths, 0 means no limit.\n+func WithMaxFieldPathIndex(max uint) PavedOption {\n+\treturn func(paved *Paved) {\n+\t\tpaved.maxFieldPathIndex = max\n+\t}\n+}\n+\n+func (p *Paved) maxFieldPathIndexEnabled() bool {\n+\treturn p.maxFieldPathIndex > 0\n }\n \n // MarshalJSON to the underlying object.\n@@ -358,6 +381,10 @@ func (p *Paved) setValue(s Segments, value any) error {\n \t\t\t\treturn errors.Errorf(\"%s is not an array\", s[:i])\n \t\t\t}\n \n+\t\t\tif p.maxFieldPathIndexEnabled() && current.Index > p.maxFieldPathIndex {\n+\t\t\t\treturn errors.Errorf(\"index %d is greater than max allowed index %d\", current.Index, p.maxFieldPathIndex)\n+\t\t\t}\n+\n \t\t\tif final {\n \t\t\t\tarray[current.Index] = v\n \t\t\t\treturn nil"
        },
        {
          "filename": "pkg/fieldpath/paved_test.go",
          "status": "modified",
          "additions": 35,
          "deletions": 1,
          "patch": "@@ -17,6 +17,7 @@ limitations under the License.\n package fieldpath\n \n import (\n+\t\"fmt\"\n \t\"testing\"\n \n \t\"github.com/google/go-cmp/cmp\"\n@@ -593,6 +594,7 @@ func TestSetValue(t *testing.T) {\n \ttype args struct {\n \t\tpath  string\n \t\tvalue any\n+\t\topts  []PavedOption\n \t}\n \ttype want struct {\n \t\tobject map[string]any\n@@ -737,6 +739,38 @@ func TestSetValue(t *testing.T) {\n \t\t\t\t},\n \t\t\t},\n \t\t},\n+\t\t\"RejectsHighIndexes\": {\n+\t\t\treason: \"Paths having indexes above the maximum default value are rejected\",\n+\t\t\tdata:   []byte(`{\"data\":[\"a\"]}`),\n+\t\t\targs: args{\n+\t\t\t\tpath:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),\n+\t\t\t\tvalue: \"c\",\n+\t\t\t},\n+\t\t\twant: want{\n+\t\t\t\tobject: map[string]any{\n+\t\t\t\t\t\"data\": []any{\"a\"}},\n+\t\t\t\terr: errors.Wrap(errors.Errorf(\"found index above max (%[1]v > %[2]v): data[%[1]v]\",\n+\t\t\t\t\tMaxFieldPathIndex+1, MaxFieldPathIndex), \"invalid segments\"),\n+\t\t\t},\n+\t\t},\n+\t\t\"NotRejectsHighIndexesIfNoDefaultOptions\": {\n+\t\t\treason: \"Paths having indexes above the maximum default value are not rejected if default disabled\",\n+\t\t\tdata:   []byte(`{\"data\":[\"a\"]}`),\n+\t\t\targs: args{\n+\t\t\t\tpath:  fmt.Sprintf(\"data[%v]\", MaxFieldPathIndex+1),\n+\t\t\t\tvalue: \"c\",\n+\t\t\t\topts:  []PavedOption{},\n+\t\t\t},\n+\t\t\twant: want{\n+\t\t\t\tobject: map[string]any{\n+\t\t\t\t\t\"data\": func() []any {\n+\t\t\t\t\t\tres := make([]any, MaxFieldPathIndex+2)\n+\t\t\t\t\t\tres[0] = \"a\"\n+\t\t\t\t\t\tres[MaxFieldPathIndex+1] = \"c\"\n+\t\t\t\t\t\treturn res\n+\t\t\t\t\t}()},\n+\t\t\t},\n+\t\t},\n \t\t\"MapStringString\": {\n \t\t\treason: \"A map of string to string should be converted to a map of string to any\",\n \t\t\tdata:   []byte(`{\"metadata\":{}}`),\n@@ -817,7 +851,7 @@ func TestSetValue(t *testing.T) {\n \t\tt.Run(name, func(t *testing.T) {\n \t\t\tin := make(map[string]any)\n \t\t\t_ = json.Unmarshal(tc.data, &in)\n-\t\t\tp := Pave(in)\n+\t\t\tp := Pave(in, tc.args.opts...)\n \n \t\t\terr := p.SetValue(tc.args.path, tc.args.value)\n \t\t\tif diff := cmp.Diff(tc.want.err, err, test.EquateErrors()); diff != \"\" {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0eae57e9c06bb807864bda7c1eece43671698ab7",
            "date": "2024-12-22T14:16:04Z",
            "author_login": "jbw976"
          },
          {
            "sha": "8273d6461c618ec1f711ac5f597f62993df04ff1",
            "date": "2024-12-20T03:15:34Z",
            "author_login": "jbw976"
          },
          {
            "sha": "197fb2a4a5c938c3947eb535d34a94a7d6b39ebc",
            "date": "2024-12-20T01:34:03Z",
            "author_login": "jbw976"
          },
          {
            "sha": "2c30d2977a424150b8f564234b8a8bd91035b699",
            "date": "2024-12-19T22:36:46Z",
            "author_login": "jbw976"
          },
          {
            "sha": "652977a767016005b76d1d8ce14f673dad46d7e3",
            "date": "2024-12-19T17:24:52Z",
            "author_login": "jbw976"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-20",
    "description": "crossplane-runtime is a set of go libraries used to build Kubernetes controllers in Crossplane and its related stacks. An out of memory panic vulnerability has been discovered in affected versions. Applications that use the `Paved` type's `SetValue` method with user provided input without proper validation might use excessive amounts of memory and cause an out of memory panic. In the fieldpath package, the Paved.SetValue method sets a value on the Paved object according to the provided path, without any validation. This allows setting values in slices at any provided index, which grows the target array up to the requested index, the index is currently capped at max uint32 (4294967295) given how indexes are parsed,  but that is still an unnecessarily large value. If callers are not validating paths' indexes on their own, which most probably are not going to do, given that the input is parsed directly in the SetValue method, this could allow users to consume arbitrary amounts of memory. Applications that do not use the `Paved` type's `SetValue` method are not affected. This issue has been addressed in versions 0.16.1 and 0.19.2. Users are advised to upgrade. Users unable to upgrade can parse and validate the path before passing it to the `SetValue` method of the `Paved` type, constraining the index size as deemed appropriate.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-03-09T21:15:11.720",
    "last_modified": "2024-11-21T07:52:59.760",
    "fix_date": "2023-03-08T13:44:59Z"
  },
  "references": [
    {
      "url": "https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.826212",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "crossplane-runtime",
    "owner": "crossplane",
    "created_at": "2019-08-21T14:35:34Z",
    "updated_at": "2025-01-13T20:12:09Z",
    "pushed_at": "2025-01-11T08:04:14Z",
    "size": 3783,
    "stars": 162,
    "forks": 109,
    "open_issues": 58,
    "watchers": 162,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-0.13",
      "release-0.14",
      "release-0.15",
      "release-0.16",
      "release-0.17",
      "release-0.18",
      "release-0.19",
      "release-0.20",
      "release-1.11",
      "release-1.12",
      "release-1.13",
      "release-1.14",
      "release-1.15",
      "release-1.16",
      "release-1.17",
      "release-1.18"
    ],
    "languages": {
      "Go": 858563,
      "Earthly": 5446,
      "Shell": 2067
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:23:59.570150"
  }
}