{
  "cve_id": "CVE-2023-27772",
  "github_data": {
    "repository": "mz-automation/libiec61850",
    "fix_commit": "79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b",
    "related_commits": [
      "79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b",
      "79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b"
    ],
    "patch_url": "https://github.com/mz-automation/libiec61850/commit/79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b.patch",
    "fix_commit_details": {
      "sha": "79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b",
      "commit_date": "2023-02-24T11:07:09Z",
      "author": {
        "login": "mzillgith",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "- added missing checks in iec61850_client_example_control (#442)",
        "length": 64,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 183,
        "additions": 106,
        "deletions": 77
      },
      "files": [
        {
          "filename": "examples/iec61850_client_example_control/client_example_control.c",
          "status": "modified",
          "additions": 106,
          "deletions": 77,
          "patch": "@@ -45,8 +45,10 @@ int main(int argc, char** argv) {\n \n     IedConnection_connect(con, &error, hostname, tcpPort);\n \n-    if (error == IED_ERROR_OK) {\n-\n+    if (error == IED_ERROR_OK)\n+    {\n+        MmsValue* ctlVal = NULL;\n+        MmsValue* stVal = NULL;\n \n         /************************\n          * Direct control\n@@ -55,99 +57,116 @@ int main(int argc, char** argv) {\n         ControlObjectClient control\n             = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO1\", con);\n \n-        MmsValue* ctlVal = MmsValue_newBoolean(true);\n+        if (control)\n+        {\n+            ctlVal = MmsValue_newBoolean(true);\n \n-        ControlObjectClient_setOrigin(control, NULL, 3);\n+            ControlObjectClient_setOrigin(control, NULL, 3);\n \n-        if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n-            printf(\"simpleIOGenericIO/GGIO1.SPCSO1 operated successfully\\n\");\n-        }\n-        else {\n-            printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO1\\n\");\n-        }\n+            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n+                printf(\"simpleIOGenericIO/GGIO1.SPCSO1 operated successfully\\n\");\n+            }\n+            else {\n+                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO1\\n\");\n+            }\n+\n+            MmsValue_delete(ctlVal);\n \n-        MmsValue_delete(ctlVal);\n+            ControlObjectClient_destroy(control);\n \n-        ControlObjectClient_destroy(control);\n+            /* Check if status value has changed */\n \n-        /* Check if status value has changed */\n+            stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO1.stVal\", IEC61850_FC_ST);\n \n-        MmsValue* stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO1.stVal\", IEC61850_FC_ST);\n+            if (error == IED_ERROR_OK) {\n+                bool state = MmsValue_getBoolean(stVal);\n+                MmsValue_delete(stVal);\n \n-        if (error == IED_ERROR_OK) {\n-            bool state = MmsValue_getBoolean(stVal);\n-            MmsValue_delete(stVal);\n+                printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO1.stVal: %i\\n\", state);\n+            }\n+            else {\n+                printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO1 failed!\\n\");\n+            }\n \n-            printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO1.stVal: %i\\n\", state);\n         }\n         else {\n-            printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO1 failed!\\n\");\n+            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO1 not found in server\\n\");\n         }\n \n-\n         /************************\n          * Select before operate\n          ***********************/\n \n         control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO2\", con);\n \n-        if (ControlObjectClient_select(control)) {\n+        if (control)\n+        {\n+            if (ControlObjectClient_select(control)) {\n \n-            ctlVal = MmsValue_newBoolean(true);\n+                ctlVal = MmsValue_newBoolean(true);\n \n-            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n-                printf(\"simpleIOGenericIO/GGIO1.SPCSO2 operated successfully\\n\");\n+                if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n+                    printf(\"simpleIOGenericIO/GGIO1.SPCSO2 operated successfully\\n\");\n+                }\n+                else {\n+                    printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n+                }\n+\n+                MmsValue_delete(ctlVal);\n             }\n             else {\n-                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n+                printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n             }\n \n-            MmsValue_delete(ctlVal);\n+            ControlObjectClient_destroy(control);\n         }\n         else {\n-            printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO2!\\n\");\n+            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO2 not found in server\\n\");\n         }\n \n-        ControlObjectClient_destroy(control);\n-\n-\n         /****************************************\n          * Direct control with enhanced security\n          ****************************************/\n \n         control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO3\", con);\n \n-        ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n+        if (control)\n+        {\n+            ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n \n-        ctlVal = MmsValue_newBoolean(true);\n+            ctlVal = MmsValue_newBoolean(true);\n \n-        if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n-            printf(\"simpleIOGenericIO/GGIO1.SPCSO3 operated successfully\\n\");\n-        }\n-        else {\n-            printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO3\\n\");\n-        }\n+            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n+                printf(\"simpleIOGenericIO/GGIO1.SPCSO3 operated successfully\\n\");\n+            }\n+            else {\n+                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO3\\n\");\n+            }\n \n-        MmsValue_delete(ctlVal);\n+            MmsValue_delete(ctlVal);\n \n-        /* Wait for command termination message */\n-        Thread_sleep(1000);\n+            /* Wait for command termination message */\n+            Thread_sleep(1000);\n \n-        ControlObjectClient_destroy(control);\n+            ControlObjectClient_destroy(control);\n \n-        /* Check if status value has changed */\n+            /* Check if status value has changed */\n \n-       stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO3.stVal\", IEC61850_FC_ST);\n+            stVal = IedConnection_readObject(con, &error, \"simpleIOGenericIO/GGIO1.SPCSO3.stVal\", IEC61850_FC_ST);\n \n-        if (error == IED_ERROR_OK) {\n-            bool state = MmsValue_getBoolean(stVal);\n+            if (error == IED_ERROR_OK) {\n+                bool state = MmsValue_getBoolean(stVal);\n \n-            printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO3.stVal: %i\\n\", state);\n+                printf(\"New status of simpleIOGenericIO/GGIO1.SPCSO3.stVal: %i\\n\", state);\n \n-            MmsValue_delete(stVal);\n+                MmsValue_delete(stVal);\n+            }\n+            else {\n+                printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO3 failed!\\n\");\n+            }\n         }\n         else {\n-            printf(\"Reading status for simpleIOGenericIO/GGIO1.SPCSO3 failed!\\n\");\n+            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO3 not found in server\\n\");\n         }\n \n         /***********************************************\n@@ -156,56 +175,66 @@ int main(int argc, char** argv) {\n \n         control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO4\", con);\n \n-        ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n+        if (control)\n+        {\n+            ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n \n-        ctlVal = MmsValue_newBoolean(true);\n+            ctlVal = MmsValue_newBoolean(true);\n \n-        if (ControlObjectClient_selectWithValue(control, ctlVal)) {\n+            if (ControlObjectClient_selectWithValue(control, ctlVal)) {\n+\n+                if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n+                    printf(\"simpleIOGenericIO/GGIO1.SPCSO4 operated successfully\\n\");\n+                }\n+                else {\n+                    printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n+                }\n \n-            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n-                printf(\"simpleIOGenericIO/GGIO1.SPCSO4 operated successfully\\n\");\n             }\n             else {\n-                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n+                printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n             }\n \n+            MmsValue_delete(ctlVal);\n+\n+            /* Wait for command termination message */\n+            Thread_sleep(1000);\n+\n+            ControlObjectClient_destroy(control);\n         }\n         else {\n-            printf(\"failed to select simpleIOGenericIO/GGIO1.SPCSO4!\\n\");\n+            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO4 not found in server\\n\");\n         }\n \n-        MmsValue_delete(ctlVal);\n-\n-        /* Wait for command termination message */\n-        Thread_sleep(1000);\n-\n-        ControlObjectClient_destroy(control);\n-\n-\n         /*********************************************************************\n          * Direct control with enhanced security (expect CommandTermination-)\n          *********************************************************************/\n \n         control = ControlObjectClient_create(\"simpleIOGenericIO/GGIO1.SPCSO9\", con);\n \n-        ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n-\n-        ctlVal = MmsValue_newBoolean(true);\n+        if (control)\n+        {\n+            ControlObjectClient_setCommandTerminationHandler(control, commandTerminationHandler, NULL);\n \n-        if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n-            printf(\"simpleIOGenericIO/GGIO1.SPCSO9 operated successfully\\n\");\n-        }\n-        else {\n-            printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO9\\n\");\n-        }\n+            ctlVal = MmsValue_newBoolean(true);\n \n-        MmsValue_delete(ctlVal);\n+            if (ControlObjectClient_operate(control, ctlVal, 0 /* operate now */)) {\n+                printf(\"simpleIOGenericIO/GGIO1.SPCSO9 operated successfully\\n\");\n+            }\n+            else {\n+                printf(\"failed to operate simpleIOGenericIO/GGIO1.SPCSO9\\n\");\n+            }\n \n-        /* Wait for command termination message */\n-        Thread_sleep(1000);\n+            MmsValue_delete(ctlVal);\n \n-        ControlObjectClient_destroy(control);\n+            /* Wait for command termination message */\n+            Thread_sleep(1000);\n \n+            ControlObjectClient_destroy(control);\n+        }\n+        else {\n+            printf(\"Control object simpleIOGenericIO/GGIO1.SPCSO9 not found in server\\n\");\n+        }\n \n         IedConnection_close(con);\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3a1480e5948ca53b4dcc5fa15b05598fa3322bb9",
            "date": "2024-11-18T15:00:54Z",
            "author_login": "mzillgith"
          },
          {
            "sha": "37596ec559993a5485670da50b86acb0c385e0d3",
            "date": "2024-11-18T10:58:11Z",
            "author_login": "mzillgith"
          },
          {
            "sha": "7b12c07711853adda856d403acfaae8042cdacdc",
            "date": "2024-11-18T10:37:24Z",
            "author_login": "mzillgith"
          },
          {
            "sha": "519b0208cc79d1af09d5ca40fb9ad1fd93822e93",
            "date": "2024-08-13T11:58:56Z",
            "author_login": "mzillgith"
          },
          {
            "sha": "d3090183408dbc2d34887a7d985cf95c140fe6aa",
            "date": "2024-08-13T10:20:03Z",
            "author_login": "mzillgith"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-754",
    "description": "libiec61850 v1.5.1 was discovered to contain a segmentation violation via the function ControlObjectClient_setOrigin() at /client/client_control.c.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-13T18:15:13.573",
    "last_modified": "2024-11-21T07:53:27.960",
    "fix_date": "2023-02-24T11:07:09Z"
  },
  "references": [
    {
      "url": "https://github.com/mz-automation/libiec61850/commit/79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/mz-automation/libiec61850/issues/442",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/mz-automation/libiec61850/commit/79a8eaf26070e02044afc4b2ffbfe777dfdf3e0b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/mz-automation/libiec61850/issues/442",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.735966",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libiec61850",
    "owner": "mz-automation",
    "created_at": "2017-02-10T19:10:20Z",
    "updated_at": "2025-01-14T06:52:56Z",
    "pushed_at": "2024-11-22T18:26:49Z",
    "size": 7528,
    "stars": 913,
    "forks": 478,
    "open_issues": 194,
    "watchers": 913,
    "has_security_policy": false,
    "default_branch": "v1.6",
    "protected_branches": [
      "v1.5",
      "v1.6_develop",
      "v1.6"
    ],
    "languages": {
      "C": 3700964,
      "C#": 616664,
      "Java": 253359,
      "CSS": 50382,
      "CMake": 41669,
      "C++": 30506,
      "Python": 15062,
      "Makefile": 10906,
      "SWIG": 5423,
      "HTML": 2788,
      "Shell": 819
    },
    "commit_activity": {
      "total_commits_last_year": 98,
      "avg_commits_per_week": 1.8846153846153846,
      "days_active_last_year": 38
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:33:28.690742"
  }
}