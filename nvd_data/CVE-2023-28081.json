{
  "cve_id": "CVE-2023-28081",
  "github_data": {
    "repository": "facebook/hermes",
    "fix_commit": "e6ed9c1a4b02dc219de1648f44cd808a56171b81",
    "related_commits": [
      "e6ed9c1a4b02dc219de1648f44cd808a56171b81",
      "e6ed9c1a4b02dc219de1648f44cd808a56171b81"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e6ed9c1a4b02dc219de1648f44cd808a56171b81",
      "commit_date": "2023-04-05T13:59:33Z",
      "author": {
        "login": "facebook-github-bot",
        "type": "User",
        "stats": {
          "total_commits": 11,
          "average_weekly_commits": 0.037800687285223365,
          "total_additions": 608,
          "total_deletions": 17685,
          "weeks_active": 11
        }
      },
      "commit_message": {
        "title": "Re-sync with internal repository (#960)",
        "length": 134,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 193,
        "additions": 178,
        "deletions": 15
      },
      "files": [
        {
          "filename": "include/hermes/VM/HermesValue.h",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -353,6 +353,26 @@ class HermesValue {\n     return encodeDoubleValue((double)num);\n   }\n \n+  /// Encode a numeric value into the best possible representation based on the\n+  /// static type of the parameter. Right now we only have one representation\n+  /// (double), but that could change in the future. It cannot be guaranteed\n+  /// that the NaN bits are all zeroes.\n+  inline static HermesValue encodeUntrustedNumberValue(double num) {\n+    return encodeUntrustedDoubleValue(num);\n+  }\n+\n+  /// Encode a numeric value into the best possible representation based on the\n+  /// static type of the parameter. Right now we only have one representation\n+  /// (double), but that could change in the future. It cannot be guaranteed\n+  /// that the NaN bits are all zeroes.\n+  template <typename T>\n+  inline static\n+      typename std::enable_if<std::is_integral<T>::value, HermesValue>::type\n+      encodeUntrustedNumberValue(T num) {\n+    assert((double)num == num && \"value not representable as double\");\n+    return encodeUntrustedDoubleValue((double)num);\n+  }\n+\n   static HermesValue encodeNaNValue() {\n     return HermesValue(\n         llvh::DoubleToBits(std::numeric_limits<double>::quiet_NaN()));"
        },
        {
          "filename": "lib/Optimizer/Scalar/TypeInference.cpp",
          "status": "modified",
          "additions": 17,
          "deletions": 10,
          "patch": "@@ -60,6 +60,12 @@ class TypeInferenceImpl {\n   bool runOnModule(Module *M);\n };\n \n+/// \\return if the given \\p type is a BigInt|Object, which used to determine if\n+/// unary/binary operations may have a BigInt result.\n+static bool isBigIntOrObject(Type type) {\n+  return type.canBeBigInt() || type.canBeObject();\n+}\n+\n static bool inferUnaryArith(UnaryOperatorInst *UOI, Type numberResultType) {\n   Value *op = UOI->getSingleOperand();\n \n@@ -73,10 +79,11 @@ static bool inferUnaryArith(UnaryOperatorInst *UOI, Type numberResultType) {\n     return true;\n   }\n \n-  Type mayBeBigInt =\n-      op->getType().canBeBigInt() ? Type::createBigInt() : Type::createNoType();\n+  Type mayBeBigInt = isBigIntOrObject(op->getType()) ? Type::createBigInt()\n+                                                     : Type::createNoType();\n \n-  // - ?? => Number|?BigInt. BigInt is only possible if op.Type canBeBigInt.\n+  // - ?? => Number|?BigInt. BigInt is only possible if op.Type is\n+  // BigInt|Object.\n   UOI->setType(Type::unionTy(numberResultType, mayBeBigInt));\n   return true;\n }\n@@ -298,12 +305,12 @@ static bool inferBinaryArith(\n     return true;\n   }\n \n-  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()\n+  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))\n       ? Type::createBigInt()\n       : Type::createNoType();\n \n-  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands can be\n-  // BigInt due to the no automatic BigInt conversion.\n+  // ?? - ?? => Number|?BigInt. BigInt is only possible if both operands are\n+  // BigInt|Object due to the no automatic BigInt conversion.\n   BOI->setType(Type::unionTy(numberType, mayBeBigInt));\n   return true;\n }\n@@ -312,12 +319,12 @@ static bool inferBinaryBitwise(BinaryOperatorInst *BOI) {\n   Type LeftTy = BOI->getLeftHandSide()->getType();\n   Type RightTy = BOI->getRightHandSide()->getType();\n \n-  Type mayBeBigInt = LeftTy.canBeBigInt() && RightTy.canBeBigInt()\n+  Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))\n       ? Type::createBigInt()\n       : Type::createNoType();\n \n-  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands can be\n-  // BigInt due to the no automatic BigInt conversion.\n+  // ?? - ?? => Int32|?BigInt. BigInt is only possible if both operands are\n+  // BigInt|Object due to the no automatic BigInt conversion.\n   BOI->setType(Type::unionTy(Type::createInt32(), mayBeBigInt));\n   return true;\n }\n@@ -391,7 +398,7 @@ static bool inferBinaryInst(BinaryOperatorInst *BOI) {\n       // ?BigInt + ?BigInt => ?BigInt. Both operands need to \"may be a BigInt\"\n       // for a possible BigInt result from this operator. This is true because\n       // there's no automative BigInt type conversion.\n-      Type mayBeBigInt = (LeftTy.canBeBigInt() && RightTy.canBeBigInt())\n+      Type mayBeBigInt = (isBigIntOrObject(LeftTy) && isBigIntOrObject(RightTy))\n           ? Type::createBigInt()\n           : Type::createNoType();\n "
        },
        {
          "filename": "lib/VM/JSLib/TypedArray.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -817,7 +817,7 @@ typedArrayPrototypeAt(void *, Runtime &runtime, NativeArgs args) {\n     if (!arr->attached(runtime)) {                                         \\\n       return runtime.raiseTypeError(\"Underlying ArrayBuffer detached\");    \\\n     }                                                                      \\\n-    return HermesValue::encodeNumberValue(arr->at(runtime, k));            \\\n+    return HermesValue::encodeUntrustedNumberValue(arr->at(runtime, k));   \\\n   }\n   switch (O->getKind()) {\n #include \"hermes/VM/TypedArrays.def\""
        },
        {
          "filename": "test/BCGen/HBC/arguments.js",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -43,7 +43,7 @@ function check_phi_handling(x) {\n // CHECK-NEXT:  $Reg2 @5 [empty]\t%5 = StorePropertyInst %4 : closure, %2 : object, \"select\" : string\n // CHECK-NEXT:  $Reg2 @6 [7...8) \t%6 = HBCCreateFunctionInst %build#0#1()#4 : object, %0\n // CHECK-NEXT:  $Reg2 @7 [empty]\t%7 = StorePropertyInst %6 : closure, %2 : object, \"build\" : string\n-// CHECK-NEXT:  $Reg2 @8 [9...10) \t%8 = HBCCreateFunctionInst %buffalobuffalo#0#1()#5 : string|number, %0\n+// CHECK-NEXT:  $Reg2 @8 [9...10) \t%8 = HBCCreateFunctionInst %buffalobuffalo#0#1()#5 : string|number|bigint, %0\n // CHECK-NEXT:  $Reg2 @9 [empty]\t%9 = StorePropertyInst %8 : closure, %2 : object, \"buffalobuffalo\" : string\n // CHECK-NEXT:  $Reg0 @10 [11...12) \t%10 = HBCCreateFunctionInst %check_phi_handling#0#1()#6 : object, %0\n // CHECK-NEXT:  $Reg0 @11 [empty]\t%11 = StorePropertyInst %10 : closure, %2 : object, \"check_phi_handling\" : string\n@@ -85,7 +85,7 @@ function check_phi_handling(x) {\n // CHECK-NEXT:  $Reg0 @5 [empty]\t%5 = ReturnInst %4\n // CHECK-NEXT:function_end\n \n-// CHECK:function buffalobuffalo#0#1()#2 : string|number\n+// CHECK:function buffalobuffalo#0#1()#2 : string|number|bigint\n // CHECK-NEXT:frame = []\n // CHECK-NEXT:%BB0:\n // CHECK-NEXT:  $Reg0 @0 [1...5) \t%0 = AllocStackInst $arguments\n@@ -94,7 +94,7 @@ function check_phi_handling(x) {\n // CHECK-NEXT:  $Reg1 @3 [empty]\t%3 = HBCReifyArgumentsInst %0\n // CHECK-NEXT:  $Reg0 @4 [5...6) \t%4 = LoadStackInst %0\n // CHECK-NEXT:  $Reg0 @5 [6...7) \t%5 = BinaryOperatorInst '+', %4, %4\n-// CHECK-NEXT:  $Reg0 @6 [empty]\t%6 = ReturnInst %5 : string|number\n+// CHECK-NEXT:  $Reg0 @6 [empty]\t%6 = ReturnInst %5 : string|number|bigint\n // CHECK-NEXT:function_end\n \n // CHECK:function check_phi_handling#0#1(x)#2 : object"
        },
        {
          "filename": "test/Optimizer/type_infer.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -92,7 +92,7 @@ function test_unary(x) {\n // CHECK-NEXT:  %18 = AllocObjectInst 0 : number, empty\n // CHECK-NEXT:  %19 = AllocObjectInst 0 : number, empty\n // CHECK-NEXT:  %20 = BinaryOperatorInst '+', %18 : object, %19 : object\n-// CHECK-NEXT:  %21 = CallInst %x, undefined : undefined, %20 : string|number\n+// CHECK-NEXT:  %21 = CallInst %x, undefined : undefined, %20 : string|number|bigint\n // CHECK-NEXT:  %22 = CallInst %x, undefined : undefined, NaN : number\n // CHECK-NEXT:  %23 = ReturnInst undefined : undefined\n // CHECK-NEXT:function_end"
        },
        {
          "filename": "test/hermes/regress-bigint-type-inference.js",
          "status": "added",
          "additions": 113,
          "deletions": 0,
          "patch": "@@ -0,0 +1,113 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+// RUN: %hermes -non-strict --dump-bytecode -O %s -fno-inline | %FileCheck %s --check-prefix=BC\n+// RUN: %hermes -non-strict -O %s -fno-inline | %FileCheck %s --check-prefix=EXE\n+\n+function test() {\n+    var o = { valueOf() { return 1n; } }\n+    var bigint = 1n;\n+    var result;\n+\n+    (() => result = o + bigint)();\n+    print(result);\n+    // BC: Add\n+    // BC: StoreToEnvironment\n+    // EXE: 2\n+\n+    (() => result = o - bigint)();\n+    print(result);\n+    // BC: Sub\n+    // BC: StoreToEnvironment\n+    // EXE: 0\n+\n+    (() => result = o * bigint)();\n+    print(result);\n+    // BC: Mul\n+    // BC: StoreToEnvironment\n+    // EXE: 1\n+\n+    (() => result = o / bigint)();\n+    print(result);\n+    // BC: Div\n+    // BC: StoreToEnvironment\n+    // EXE: 1\n+\n+    (() => result = o % bigint)();\n+    print(result);\n+    // BC: Mod\n+    // BC: StoreToEnvironment\n+    // EXE: 0\n+\n+    (() => result = o << bigint)();\n+    print(result);\n+    // BC: LShift\n+    // BC: StoreToEnvironment\n+    // EXE: 2\n+\n+    (() => result = o >> bigint)();\n+    print(result);\n+    // BC: RShift\n+    // BC: StoreToEnvironment\n+    // EXE: 0\n+\n+    (() => result = o | bigint)();\n+    print(result);\n+    // BC: BitOr\n+    // BC: StoreToEnvironment\n+    // EXE: 1\n+\n+    (() => result = o ^ bigint)();\n+    print(result);\n+    // BC: BitXor\n+    // BC: StoreToEnvironment\n+    // EXE: 0\n+\n+    (() => result = o & bigint)();\n+    print(result);\n+    // BC: BitAnd\n+    // BC: StoreToEnvironment\n+    // EXE: 1\n+\n+    (() => result = - bigint)();\n+    print(result);\n+    // BC: Negate\n+    // BC: StoreToEnvironment\n+    // EXE: -1\n+\n+    (() => result = ~ bigint)();\n+    print(result);\n+    // BC: BitNot\n+    // BC: StoreToEnvironment\n+    // EXE: -2\n+\n+    (() => result = o++)();\n+    print(result);\n+    // BC: Inc\n+    // BC: StoreToEnvironment\n+    // EXE: 1\n+\n+    (() => result = o--)();\n+    print(result);\n+    // BC: Dec\n+    // BC: StoreToEnvironment\n+    // EXE: 2\n+\n+    (() => result = ++o)();\n+    print(result);\n+    // BC: Inc\n+    // BC: StoreToEnvironment\n+    // EXE: 2\n+\n+    (() => result = --o)();\n+    print(result);\n+    // BC: Dec\n+    // BC: StoreToEnvironment\n+    // EXE: 1\n+}\n+\n+test();"
        },
        {
          "filename": "test/hermes/regress-typed-array-at-nan.js",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) Meta Platforms, Inc. and affiliates.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+// RUN: %hermes -O -target=HBC %s | %FileCheck --match-full-lines %s\n+// RUN: %hermes -O -target=HBC -emit-binary -out %t.hbc %s && %hermes %t.hbc | %FileCheck --match-full-lines %s\n+// Test typed array will check for NaN when reading from an index.\n+\n+print(\"typed-array-at-nan\");\n+//CHECK-LABEL: typed-array-at-nan\n+let ab = new ArrayBuffer(8);\n+let i32a = new Int32Array(ab);\n+\n+i32a[0] = 0xcafebabe;\n+i32a[1] = 0xffff0000;\n+\n+let f32a = new Float64Array(ab);\n+var shouldBeNan = f32a.at(0)\n+print(shouldBeNan);\n+// CHECK: NaN"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7af61dbdde40ff8beefdebd778c116b10b43977b",
            "date": "2025-01-25T02:21:37Z",
            "author_login": "panagosg7"
          },
          {
            "sha": "ee1ac30851fb6f17250bdf756f917c2c7817ec15",
            "date": "2025-01-24T23:46:27Z",
            "author_login": "neildhar"
          },
          {
            "sha": "608c5ba92c43bcac98c268075be8c15fc891dcd5",
            "date": "2025-01-24T22:56:03Z",
            "author_login": "lavenzg"
          },
          {
            "sha": "576fbeac375e30747f539e595e81ac62f0001cca",
            "date": "2025-01-24T22:03:46Z",
            "author_login": "tsaichien"
          },
          {
            "sha": "a08b71bb6f93966e9f58ea91105b648c5573e191",
            "date": "2025-01-24T22:03:46Z",
            "author_login": "tsaichien"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-416",
    "description": "A bytecode optimization bug in Hermes prior to commit e6ed9c1a4b02dc219de1648f44cd808a56171b81 could be used to cause an use-after-free and obtain arbitrary code execution via a carefully crafted payload. Note that this is only exploitable in cases where Hermes is used to execute untrusted JavaScript. Hence, most React Native applications are not affected.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-18T22:15:09.807",
    "last_modified": "2024-11-21T07:54:21.880",
    "fix_date": "2023-04-05T13:59:33Z"
  },
  "references": [
    {
      "url": "https://github.com/facebook/hermes/commit/e6ed9c1a4b02dc219de1648f44cd808a56171b81",
      "source": "cve-assign@fb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.facebook.com/security/advisories/cve-2023-28081",
      "source": "cve-assign@fb.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/facebook/hermes/commit/e6ed9c1a4b02dc219de1648f44cd808a56171b81",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.facebook.com/security/advisories/cve-2023-28081",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.984739",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "hermes",
    "owner": "facebook",
    "created_at": "2018-10-22T19:13:00Z",
    "updated_at": "2025-01-25T02:24:07Z",
    "pushed_at": "2025-01-25T02:24:02Z",
    "size": 97415,
    "stars": 10060,
    "forks": 651,
    "open_issues": 165,
    "watchers": 10060,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "gh-pages",
      "main"
    ],
    "languages": {
      "C++": 10951483,
      "JavaScript": 7957683,
      "Rust": 1201532,
      "Python": 337456,
      "Java": 319660,
      "TypeScript": 184977,
      "Objective-C++": 113458,
      "CMake": 113065,
      "C": 41344,
      "Shell": 38189,
      "Swift": 22129,
      "NASL": 4993,
      "Ruby": 3189,
      "DTrace": 574,
      "Objective-C": 303,
      "D": 225
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:38:59.629104"
  }
}