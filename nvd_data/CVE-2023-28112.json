{
  "cve_id": "CVE-2023-28112",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "39c2f63b35d90ebaf67b9604cf1d424e5984203c",
    "related_commits": [
      "39c2f63b35d90ebaf67b9604cf1d424e5984203c",
      "39c2f63b35d90ebaf67b9604cf1d424e5984203c"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/39c2f63b35d90ebaf67b9604cf1d424e5984203c.patch",
    "fix_commit_details": {
      "sha": "39c2f63b35d90ebaf67b9604cf1d424e5984203c",
      "commit_date": "2023-02-16T04:02:03Z",
      "author": {
        "login": "Drenmi",
        "type": "User",
        "stats": {
          "total_commits": 231,
          "average_weekly_commits": 0.3333333333333333,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 84
        }
      },
      "commit_message": {
        "title": "SECURITY: Add FinalDestination::FastImage that's SSRF safe",
        "length": 58,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 97,
        "additions": 95,
        "deletions": 2
      },
      "files": [
        {
          "filename": "lib/cooked_processor_mixin.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -193,7 +193,7 @@ def get_size(url)\n     if upload && upload.width && upload.width > 0\n       @size_cache[url] = [upload.width, upload.height]\n     else\n-      @size_cache[url] = FastImage.size(absolute_url)\n+      @size_cache[url] = FinalDestination::FastImage.size(absolute_url)\n     end\n   rescue Zlib::BufError, URI::Error, OpenSSL::SSL::SSLError\n     # FastImage.size raises BufError for some gifs, leave it."
        },
        {
          "filename": "lib/final_destination/fast_image.rb",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+# frozen_string_literal: true\n+\n+class FinalDestination::FastImage < ::FastImage\n+  def initialize(url, options = {})\n+    uri = URI(normalized_url(url))\n+    options.merge!(http_header: { \"Host\" => uri.hostname })\n+    uri.hostname = resolved_ip(uri)\n+\n+    super(uri.to_s, options)\n+  rescue FinalDestination::SSRFDetector::DisallowedIpError, SocketError, Timeout::Error\n+    super(\"\")\n+  end\n+\n+  private\n+\n+  def resolved_ip(uri)\n+    FinalDestination::SSRFDetector.lookup_and_filter_ips(uri.hostname).first\n+  end\n+\n+  def normalized_url(uri)\n+    UrlHelper.normalized_encode(uri)\n+  end\n+end"
        },
        {
          "filename": "spec/lib/final_destination/fast_image_spec.rb",
          "status": "added",
          "additions": 70,
          "deletions": 0,
          "patch": "@@ -0,0 +1,70 @@\n+# frozen_string_literal: true\n+\n+describe FinalDestination::FastImage do\n+  before do\n+    # We need to test low-level stuff, switch off WebMock for FastImage\n+    WebMock.enable!(except: [:net_http])\n+    Socket.stubs(:tcp).never\n+    TCPSocket.stubs(:open).never\n+    Addrinfo.stubs(:getaddrinfo).never\n+  end\n+\n+  after { WebMock.enable! }\n+\n+  def expect_tcp_and_abort(stub_addr, &blk)\n+    success = Class.new(StandardError)\n+    TCPSocket.stubs(:open).with { |addr| stub_addr == addr }.once.raises(success)\n+    begin\n+      yield\n+    rescue success\n+    end\n+  end\n+\n+  def stub_ip_lookup(stub_addr, ips)\n+    FinalDestination::SSRFDetector.stubs(:lookup_ips).with { |addr| stub_addr == addr }.returns(ips)\n+  end\n+\n+  def stub_tcp_to_raise(stub_addr, exception)\n+    TCPSocket.stubs(:open).with { |addr| addr == stub_addr }.once.raises(exception)\n+  end\n+\n+  it \"uses the first resolved IP\" do\n+    stub_ip_lookup(\"example.com\", %w[1.1.1.1 2.2.2.2 3.3.3.3])\n+    expect_tcp_and_abort(\"1.1.1.1\") do\n+      FinalDestination::FastImage.size(URI(\"https://example.com/img.jpg\"))\n+    end\n+  end\n+\n+  it \"ignores private IPs\" do\n+    stub_ip_lookup(\"example.com\", %w[0.0.0.0 2.2.2.2])\n+    expect_tcp_and_abort(\"2.2.2.2\") do\n+      FinalDestination::FastImage.size(URI(\"https://example.com/img.jpg\"))\n+    end\n+  end\n+\n+  it \"returns a null object when all IPs are private\" do\n+    stub_ip_lookup(\"example.com\", %w[0.0.0.0 127.0.0.1])\n+    expect(FinalDestination::FastImage.size(URI(\"https://example.com/img.jpg\"))).to eq(nil)\n+  end\n+\n+  it \"returns a null object if all IPs are blocked\" do\n+    SiteSetting.blocked_ip_blocks = \"98.0.0.0/8|78.13.47.0/24|9001:82f3::/32\"\n+    stub_ip_lookup(\"ip6.example.com\", %w[9001:82f3:8873::3])\n+    stub_ip_lookup(\"ip4.example.com\", %w[98.23.19.111])\n+    expect(FinalDestination::FastImage.size(URI(\"https://ip4.example.com/img.jpg\"))).to eq(nil)\n+    expect(FinalDestination::FastImage.size(URI(\"https://ip6.example.com/img.jpg\"))).to eq(nil)\n+  end\n+\n+  it \"allows specified hosts to bypass IP checks\" do\n+    SiteSetting.blocked_ip_blocks = \"98.0.0.0/8|78.13.47.0/24|9001:82f3::/32\"\n+    SiteSetting.allowed_internal_hosts = \"internal.example.com|blocked-ip.example.com\"\n+    stub_ip_lookup(\"internal.example.com\", %w[0.0.0.0 127.0.0.1])\n+    stub_ip_lookup(\"blocked-ip.example.com\", %w[98.23.19.111])\n+    expect_tcp_and_abort(\"0.0.0.0\") do\n+      FinalDestination::FastImage.size(URI(\"https://internal.example.com/img.jpg\"))\n+    end\n+    expect_tcp_and_abort(\"98.23.19.111\") do\n+      FinalDestination::FastImage.size(URI(\"https://blocked-ip.example.com/img.jpg\"))\n+    end\n+  end\n+end"
        },
        {
          "filename": "spec/services/search_indexer_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -220,7 +220,7 @@\n       Jobs.run_immediately!\n       SiteSetting.max_image_width = 1\n \n-      stub_request(:get, \"https://meta.discourse.org/some.png\").to_return(\n+      stub_request(:get, \"https://1.2.3.4/some.png\").to_return(\n         status: 200,\n         body: file_from_fixtures(\"logo.png\").read,\n       )"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "73b28815e301e26c7f4a0a449e205487c4e9d6bc",
            "date": "2025-01-14T22:56:20Z",
            "author_login": "pmusaraj"
          },
          {
            "sha": "e600ef02a0ff844ea10a0aad8fba35c32241bbcd",
            "date": "2025-01-14T22:38:09Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a94009a57d03ba7adea9c0b289ccbc94cd7d35e0",
            "date": "2025-01-14T21:33:09Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "bad869dd81a390b87d1f2297ca6a032dabda5faa",
            "date": "2025-01-14T20:18:51Z",
            "author_login": "markvanlan"
          },
          {
            "sha": "0fcb832244234f985d0b2628ddc63a382d1700c9",
            "date": "2025-01-14T20:17:13Z",
            "author_login": "davidtaylorhq"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-918",
    "description": "Discourse is an open-source discussion platform. Prior to version 3.1.0.beta3 of the `beta` and `tests-passed` branches, some user provided URLs were being passed to FastImage without SSRF protection. Insufficient protections could enable attackers to trigger outbound network connections from the Discourse server to private IP addresses. This affects any site running the `tests-passed` or `beta` branches versions 3.1.0.beta2 and prior. This issue is patched in version 3.1.0.beta3 of the `beta` and `tests-passed` branches. There are no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-03-17T19:15:11.507",
    "last_modified": "2024-11-21T07:54:25.787",
    "fix_date": "2023-02-16T04:02:03Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/39c2f63b35d90ebaf67b9604cf1d424e5984203c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/pull/20710",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-9897-x229-55gh",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/39c2f63b35d90ebaf67b9604cf1d424e5984203c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/pull/20710",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-9897-x229-55gh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.858366",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}