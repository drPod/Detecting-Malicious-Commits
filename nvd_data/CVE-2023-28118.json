{
  "cve_id": "CVE-2023-28118",
  "github_data": {
    "repository": "charleskorn/kaml",
    "fix_commit": "5f82a2d7e00bfc307afca05d1dc4d7c50593531a",
    "related_commits": [
      "5f82a2d7e00bfc307afca05d1dc4d7c50593531a",
      "5f82a2d7e00bfc307afca05d1dc4d7c50593531a"
    ],
    "patch_url": "https://github.com/charleskorn/kaml/commit/5f82a2d7e00bfc307afca05d1dc4d7c50593531a.patch",
    "fix_commit_details": {
      "sha": "5f82a2d7e00bfc307afca05d1dc4d7c50593531a",
      "commit_date": "2023-03-18T01:21:21Z",
      "author": {
        "login": "charleskorn",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Default to not parsing anchors and aliases to prevent \"billion laughs\"-style attacks.",
        "length": 85,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 71,
        "additions": 57,
        "deletions": 14
      },
      "files": [
        {
          "filename": "src/commonMain/kotlin/com/charleskorn/kaml/YamlConfiguration.kt",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@ package com.charleskorn.kaml\n  * * [sequenceStyle]: how sequences (aka lists and arrays) should be formatted. See [SequenceStyle] for an example of each\n  * * [ambiguousQuoteStyle]: how strings should be escaped when [singleLineStringStyle] is [SingleLineStringStyle.PlainExceptAmbiguous] and the value is ambiguous\n  * * [sequenceBlockIndent]: number of spaces to use as indentation for sequences, if [sequenceStyle] set to [SequenceStyle.Block]\n+ * * [allowAnchorsAndAliases]: set to true to allow anchors and aliases when decoding YAML (defaults to `false`)\n  */\n public data class YamlConfiguration constructor(\n     internal val encodeDefaults: Boolean = true,\n@@ -47,6 +48,7 @@ public data class YamlConfiguration constructor(\n     internal val multiLineStringStyle: MultiLineStringStyle = singleLineStringStyle.multiLineStringStyle,\n     internal val ambiguousQuoteStyle: AmbiguousQuoteStyle = AmbiguousQuoteStyle.DoubleQuoted,\n     internal val sequenceBlockIndent: Int = 0,\n+    internal val allowAnchorsAndAliases: Boolean = false,\n )\n \n public enum class PolymorphismStyle {"
        },
        {
          "filename": "src/commonMain/kotlin/com/charleskorn/kaml/YamlException.kt",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -98,3 +98,5 @@ public class NoAnchorForExtensionException(\n     path: YamlPath,\n ) :\n     YamlException(\"The key '$key' starts with the extension definition prefix '$extensionDefinitionPrefix' but does not define an anchor.\", path)\n+\n+public class ForbiddenAnchorOrAliasException(message: String, path: YamlPath) : YamlException(message, path)"
        },
        {
          "filename": "src/commonTest/kotlin/com/charleskorn/kaml/YamlReadingTest.kt",
          "status": "modified",
          "additions": 17,
          "deletions": 2,
          "patch": "@@ -1170,8 +1170,23 @@ class YamlReadingTest : DescribeSpec({\n                     name: *name\n                 \"\"\".trimIndent()\n \n-                context(\"parsing that input\") {\n-                    val configuration = YamlConfiguration(extensionDefinitionPrefix = \".\")\n+                context(\"parsing anchors and aliases is disabled\") {\n+                    val configuration = YamlConfiguration(extensionDefinitionPrefix = \".\", allowAnchorsAndAliases = false)\n+                    val yaml = Yaml(configuration = configuration)\n+\n+                    it(\"throws an appropriate exception\") {\n+                        val exception = shouldThrow<ForbiddenAnchorOrAliasException> { yaml.decodeFromString(SimpleStructure.serializer(), input) }\n+\n+                        exception.asClue {\n+                            it.message shouldBe \"Parsing anchors and aliases is disabled.\"\n+                            it.line shouldBe 1\n+                            it.column shouldBe 18\n+                        }\n+                    }\n+                }\n+\n+                context(\"parsing anchors and aliases is enabled\") {\n+                    val configuration = YamlConfiguration(extensionDefinitionPrefix = \".\", allowAnchorsAndAliases = true)\n                     val yaml = Yaml(configuration = configuration)\n                     val result = yaml.decodeFromString(SimpleStructure.serializer(), input)\n "
        },
        {
          "filename": "src/jvmMain/kotlin/com/charleskorn/kaml/Yaml.kt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -60,7 +60,7 @@ public actual class Yaml(\n \n     private fun parseToYamlNodeFromReader(source: Reader): YamlNode {\n         val parser = YamlParser(source)\n-        val reader = YamlNodeReader(parser, configuration.extensionDefinitionPrefix)\n+        val reader = YamlNodeReader(parser, configuration.extensionDefinitionPrefix, configuration.allowAnchorsAndAliases)\n         val node = reader.read()\n         parser.ensureEndOfStreamReached()\n         return node"
        },
        {
          "filename": "src/jvmMain/kotlin/com/charleskorn/kaml/YamlNodeReader.kt",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -30,6 +30,7 @@ import java.util.Optional\n internal actual class YamlNodeReader(\n     private val parser: YamlParser,\n     private val extensionDefinitionPrefix: String? = null,\n+    private val allowAnchorsAndAliases: Boolean = false,\n ) {\n     private val aliases = mutableMapOf<Anchor, YamlNode>()\n \n@@ -43,6 +44,10 @@ internal actual class YamlNodeReader(\n \n         if (event is NodeEvent) {\n             event.anchor.ifPresent {\n+                if (!allowAnchorsAndAliases) {\n+                    throw ForbiddenAnchorOrAliasException(\"Parsing anchors and aliases is disabled.\", path)\n+                }\n+\n                 aliases.put(it, node.withPath(YamlPath.forAliasDefinition(it.value, event.location)))\n             }\n \n@@ -186,6 +191,10 @@ internal actual class YamlNodeReader(\n     }\n \n     private fun readAlias(event: AliasEvent, path: YamlPath): YamlNode {\n+        if (!allowAnchorsAndAliases) {\n+            throw ForbiddenAnchorOrAliasException(\"Parsing anchors and aliases is disabled.\", path)\n+        }\n+\n         val anchor = event.anchor.get()\n \n         val resolvedNode = aliases.getOrElse(anchor) {"
        },
        {
          "filename": "src/jvmTest/kotlin/com/charleskorn/kaml/YamlNodeReaderTest.kt",
          "status": "modified",
          "additions": 26,
          "deletions": 11,
          "patch": "@@ -312,7 +312,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser).read()\n+                val result = YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n \n                 it(\"returns the expected list\") {\n                     result shouldBe\n@@ -339,7 +339,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser).read()\n+                val result = YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n \n                 it(\"returns the expected list, using the most-recently defined value each time the alias is referenced\") {\n                     result shouldBe\n@@ -363,11 +363,11 @@ class YamlNodeReaderTest : DescribeSpec({\n                 - *thing\n             \"\"\".trimIndent()\n \n-            describe(\"parsing that input\") {\n+            describe(\"parsing that input with anchor and alias parsing enabled\") {\n                 it(\"throws an appropriate exception\") {\n                     val exception = shouldThrow<UnknownAnchorException> {\n                         val parser = YamlParser(input)\n-                        YamlNodeReader(parser).read()\n+                        YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n                     }\n \n                     exception.asClue {\n@@ -378,6 +378,21 @@ class YamlNodeReaderTest : DescribeSpec({\n                     }\n                 }\n             }\n+\n+            describe(\"parsing that input with anchor and alias parsing disabled\") {\n+                it(\"throws an appropriate exception\") {\n+                    val exception = shouldThrow<ForbiddenAnchorOrAliasException> {\n+                        val parser = YamlParser(input)\n+                        YamlNodeReader(parser, allowAnchorsAndAliases = false).read()\n+                    }\n+\n+                    exception.asClue {\n+                        it.message shouldBe \"Parsing anchors and aliases is disabled.\"\n+                        it.line shouldBe 2\n+                        it.column shouldBe 3\n+                    }\n+                }\n+            }\n         }\n \n         context(\"given some input representing a list of strings in flow style\") {\n@@ -652,7 +667,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser).read()\n+                val result = YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n                 val key1Path = YamlPath.root.withMapElementKey(\"key1\", Location(1, 1))\n                 val value1Path = key1Path.withMapElementValue(Location(1, 7))\n                 val key2Path = YamlPath.root.withMapElementKey(\"key2\", Location(2, 1))\n@@ -1156,7 +1171,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser).read()\n+                val result = YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n \n                 val firstItemPath = YamlPath.root.withListEntry(0, Location(1, 3))\n                 val firstXPath = firstItemPath.withMapElementKey(\"x\", Location(1, 13))\n@@ -1206,7 +1221,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser).read()\n+                val result = YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n \n                 val firstItemPath = YamlPath.root.withListEntry(0, Location(1, 3))\n                 val firstXPath = firstItemPath.withMapElementKey(\"x\", Location(1, 13))\n@@ -1302,7 +1317,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser).read()\n+                val result = YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n \n                 val firstItemPath = YamlPath.root.withListEntry(0, Location(1, 3))\n                 val firstXPath = firstItemPath.withMapElementKey(\"x\", Location(1, 13))\n@@ -1365,7 +1380,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser).read()\n+                val result = YamlNodeReader(parser, allowAnchorsAndAliases = true).read()\n \n                 val firstItemPath = YamlPath.root.withListEntry(0, Location(1, 3))\n                 val firstXPath = firstItemPath.withMapElementKey(\"x\", Location(1, 11))\n@@ -1531,7 +1546,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input with an extension definition prefix defined\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser, extensionDefinitionPrefix = \".\").read()\n+                val result = YamlNodeReader(parser, extensionDefinitionPrefix = \".\", allowAnchorsAndAliases = true).read()\n \n                 val fooKeyPath = YamlPath.root.withMapElementKey(\"foo\", Location(3, 1))\n                 val fooValuePath = fooKeyPath.withMapElementValue(Location(4, 5))\n@@ -1598,7 +1613,7 @@ class YamlNodeReaderTest : DescribeSpec({\n \n             describe(\"parsing that input with an extension definition prefix defined\") {\n                 val parser = YamlParser(input)\n-                val result = YamlNodeReader(parser, extensionDefinitionPrefix = \".\").read()\n+                val result = YamlNodeReader(parser, extensionDefinitionPrefix = \".\", allowAnchorsAndAliases = true).read()\n \n                 val keyPath = YamlPath.root\n                     .withMerge(Location(4, 6))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "89d606583c2e632db557fb21b6644ef40d6bf3c2",
            "date": "2025-01-08T22:40:25Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "7e7e15e9370e02fd1bca7f1d87547c241624d301",
            "date": "2025-01-08T19:05:25Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "f7d8ed6aba555590eee2817d528a58f9f8a0d04f",
            "date": "2025-01-07T04:13:50Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "08e154fdcb93a76d106222f297dcaac730c46a4d",
            "date": "2025-01-03T09:32:35Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "1b7766ec4195156027e01656bd151fd86048052d",
            "date": "2024-12-20T22:34:20Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-776",
    "description": "kaml provides YAML support for kotlinx.serialization. Prior to version 0.53.0, applications that use kaml to parse untrusted input containing anchors and aliases may consume excessive memory and crash. Version 0.53.0 and later default to refusing to parse YAML documents containing anchors and aliases. There are no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-20T13:15:11.877",
    "last_modified": "2024-11-21T07:54:26.560",
    "fix_date": "2023-03-18T01:21:21Z"
  },
  "references": [
    {
      "url": "https://github.com/charleskorn/kaml/commit/5f82a2d7e00bfc307afca05d1dc4d7c50593531a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/charleskorn/kaml/releases/tag/0.53.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/charleskorn/kaml/security/advisories/GHSA-c24f-2j3g-rg48",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/charleskorn/kaml/commit/5f82a2d7e00bfc307afca05d1dc4d7c50593531a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/charleskorn/kaml/releases/tag/0.53.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/charleskorn/kaml/security/advisories/GHSA-c24f-2j3g-rg48",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:08.984620",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "kaml",
    "owner": "charleskorn",
    "created_at": "2018-12-15T17:31:13Z",
    "updated_at": "2025-01-09T02:57:53Z",
    "pushed_at": "2025-01-08T22:40:45Z",
    "size": 2258,
    "stars": 528,
    "forks": 51,
    "open_issues": 11,
    "watchers": 528,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Kotlin": 510184
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T21:33:14.368995"
  }
}