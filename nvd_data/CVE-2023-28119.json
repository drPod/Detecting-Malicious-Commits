{
  "cve_id": "CVE-2023-28119",
  "github_data": {
    "repository": "crewjam/saml",
    "fix_commit": "8e9236867d176ad6338c870a84e2039aef8a5021",
    "related_commits": [
      "8e9236867d176ad6338c870a84e2039aef8a5021",
      "8e9236867d176ad6338c870a84e2039aef8a5021"
    ],
    "patch_url": "https://github.com/crewjam/saml/commit/8e9236867d176ad6338c870a84e2039aef8a5021.patch",
    "fix_commit_details": {
      "sha": "8e9236867d176ad6338c870a84e2039aef8a5021",
      "commit_date": "2023-03-22T19:22:00Z",
      "author": {
        "login": "crewjam",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-5mqj-xc49-246p",
        "length": 116,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 64,
        "additions": 61,
        "deletions": 3
      },
      "files": [
        {
          "filename": "flate.go",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+package saml\n+\n+import (\n+\t\"compress/flate\"\n+\t\"fmt\"\n+\t\"io\"\n+)\n+\n+const flateUncompressLimit = 10 * 1024 * 1024 // 10MB\n+\n+func newSaferFlateReader(r io.Reader) io.ReadCloser {\n+\treturn &saferFlateReader{r: flate.NewReader(r)}\n+}\n+\n+type saferFlateReader struct {\n+\tr     io.ReadCloser\n+\tcount int\n+}\n+\n+func (r *saferFlateReader) Read(p []byte) (n int, err error) {\n+\tif r.count+len(p) > flateUncompressLimit {\n+\t\treturn 0, fmt.Errorf(\"flate: uncompress limit exceeded (%d bytes)\", flateUncompressLimit)\n+\t}\n+\tn, err = r.r.Read(p)\n+\tr.count += n\n+\treturn n, err\n+}\n+\n+func (r *saferFlateReader) Close() error {\n+\treturn r.r.Close()\n+}"
        },
        {
          "filename": "identity_provider.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,7 +2,6 @@ package saml\n \n import (\n \t\"bytes\"\n-\t\"compress/flate\"\n \t\"crypto\"\n \t\"crypto/tls\"\n \t\"crypto/x509\"\n@@ -363,7 +362,7 @@ func NewIdpAuthnRequest(idp *IdentityProvider, r *http.Request) (*IdpAuthnReques\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"cannot decode request: %s\", err)\n \t\t}\n-\t\treq.RequestBuffer, err = ioutil.ReadAll(flate.NewReader(bytes.NewReader(compressedRequest)))\n+\t\treq.RequestBuffer, err = ioutil.ReadAll(newSaferFlateReader(bytes.NewReader(compressedRequest)))\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"cannot decompress request: %s\", err)\n \t\t}"
        },
        {
          "filename": "identity_provider_test.go",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -1,6 +1,8 @@\n package saml\n \n import (\n+\t\"bytes\"\n+\t\"compress/flate\"\n \t\"crypto\"\n \t\"crypto/rsa\"\n \t\"crypto/x509\"\n@@ -1013,3 +1015,29 @@ func TestIDPNoDestination(t *testing.T) {\n \terr = req.MakeResponse()\n \tassert.Check(t, err)\n }\n+\n+func TestIDPRejectDecompressionBomb(t *testing.T) {\n+\ttest := NewIdentifyProviderTest(t)\n+\ttest.IDP.SessionProvider = &mockSessionProvider{\n+\t\tGetSessionFunc: func(w http.ResponseWriter, r *http.Request, req *IdpAuthnRequest) *Session {\n+\t\t\tfmt.Fprintf(w, \"RelayState: %s\\nSAMLRequest: %s\",\n+\t\t\t\treq.RelayState, req.RequestBuffer)\n+\t\t\treturn nil\n+\t\t},\n+\t}\n+\n+\t//w := httptest.NewRecorder()\n+\n+\tdata := bytes.Repeat([]byte(\"a\"), 768*1024*1024)\n+\tvar compressed bytes.Buffer\n+\tw, _ := flate.NewWriter(&compressed, flate.BestCompression)\n+\tw.Write(data)\n+\tw.Close()\n+\tencoded := base64.StdEncoding.EncodeToString(compressed.Bytes())\n+\n+\tr, _ := http.NewRequest(\"GET\", \"/dontcare?\"+url.Values{\n+\t\t\"SAMLRequest\": {encoded},\n+\t}.Encode(), nil)\n+\t_, err := NewIdpAuthnRequest(&test.IDP, r)\n+\tassert.Error(t, err, \"cannot decompress request: flate: uncompress limit exceeded (10485760 bytes)\")\n+}"
        },
        {
          "filename": "service_provider.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1524,7 +1524,7 @@ func (sp *ServiceProvider) ValidateLogoutResponseRedirect(queryParameterData str\n \t}\n \tretErr.Response = string(rawResponseBuf)\n \n-\tgr, err := ioutil.ReadAll(flate.NewReader(bytes.NewBuffer(rawResponseBuf)))\n+\tgr, err := ioutil.ReadAll(newSaferFlateReader(bytes.NewBuffer(rawResponseBuf)))\n \tif err != nil {\n \t\tretErr.PrivateErr = err\n \t\treturn retErr"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bbccb7933d5f60512ebc6caec7120c604581983d",
            "date": "2024-07-20T11:07:57Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a32b643a25a46182499b1278293e265150056d89",
            "date": "2023-10-16T11:18:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b2c7702ef01c1ff83ac08159afcd3c5a678c6d52",
            "date": "2023-10-14T14:42:23Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "adb3ff5ed70dc743bcef17ac52b993eef1dc7992",
            "date": "2023-10-14T14:26:29Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5e8dc1f05e26c4cd518fd80643cdd7fdde04bb19",
            "date": "2023-10-14T14:25:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "The crewjam/saml go library contains a partial implementation of the SAML standard in golang. Prior to version 0.4.13, the package's use of `flate.NewReader` does not limit the size of the input. The user can pass more than 1 MB of data in the HTTP request to the processing functions, which will be decompressed server-side using the Deflate algorithm. Therefore, after repeating the same request multiple times, it is possible to achieve a reliable crash since the operating system kills the process. This issue is patched in version 0.4.13.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-22T20:15:12.877",
    "last_modified": "2024-11-21T07:54:26.683",
    "fix_date": "2023-03-22T19:22:00Z"
  },
  "references": [
    {
      "url": "https://github.com/crewjam/saml/commit/8e9236867d176ad6338c870a84e2039aef8a5021",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crewjam/saml/security/advisories/GHSA-5mqj-xc49-246p",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/crewjam/saml/commit/8e9236867d176ad6338c870a84e2039aef8a5021",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crewjam/saml/security/advisories/GHSA-5mqj-xc49-246p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:08.993558",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saml",
    "owner": "crewjam",
    "created_at": "2015-11-30T04:42:00Z",
    "updated_at": "2025-01-04T20:55:42Z",
    "pushed_at": "2024-08-16T15:28:18Z",
    "size": 1062,
    "stars": 981,
    "forks": 443,
    "open_issues": 96,
    "watchers": 981,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 448628
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-14T13:19:54.125858"
  }
}