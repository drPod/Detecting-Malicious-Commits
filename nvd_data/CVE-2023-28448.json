{
  "cve_id": "CVE-2023-28448",
  "github_data": {
    "repository": "firecracker-microvm/versionize",
    "fix_commit": "a57a051ba006cfa3b41a0532f484df759e008d47",
    "related_commits": [
      "a57a051ba006cfa3b41a0532f484df759e008d47",
      "a57a051ba006cfa3b41a0532f484df759e008d47"
    ],
    "patch_url": "https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47.patch",
    "fix_commit_details": {
      "sha": "a57a051ba006cfa3b41a0532f484df759e008d47",
      "commit_date": "2023-03-13T11:01:19Z",
      "author": {
        "login": "roypat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add missing bounds check to FamStructWrapper::deserialize",
        "length": 2005,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 38,
        "additions": 38,
        "deletions": 0
      },
      "files": [
        {
          "filename": "src/primitives.rs",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -369,6 +369,18 @@ where\n         let entries: Vec<<T as FamStruct>::Entry> =\n             Vec::deserialize(reader, version_map, app_version)\n                 .map_err(|ref err| VersionizeError::Deserialize(format!(\"{:?}\", err)))?;\n+\n+        if header.len() != entries.len() {\n+            let msg = format!(\n+                \"Mismatch between length of FAM specified in FamStruct header ({}) \\\n+                and actual size of FAM ({})\",\n+                header.len(),\n+                entries.len()\n+            );\n+\n+            return Err(VersionizeError::Deserialize(msg));\n+        }\n+\n         // Construct the object from the array items.\n         // Header(T) fields will be initialized by Default trait impl.\n         let mut object = FamStructWrapper::from_entries(&entries)"
        },
        {
          "filename": "tests/test.rs",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -1323,6 +1323,32 @@ impl<T> Versionize for __IncompleteArrayField<T> {\n type MessageFamStructWrapper = FamStructWrapper<Message>;\n type Message2FamStructWrapper = FamStructWrapper<Message2>;\n \n+#[test]\n+fn test_deserialize_famstructwrapper_invalid_len() {\n+    let mut vm = VersionMap::new();\n+    vm.new_version()\n+        .set_type_version(Message::type_id(), 2)\n+        .new_version()\n+        .set_type_version(Message::type_id(), 3)\n+        .new_version()\n+        .set_type_version(Message::type_id(), 4);\n+\n+    // Create FamStructWrapper with len 2\n+    let state = MessageFamStructWrapper::new(0).unwrap();\n+    let mut buffer = [0; 256];\n+\n+    state.serialize(&mut buffer.as_mut_slice(), &vm, 2).unwrap();\n+\n+    // the `len` field of the header is the first serialized field.\n+    // Let's corrupt it by making it bigger than the actual number of serialized elements\n+    buffer[0] = 255;\n+\n+    assert_eq!(\n+        MessageFamStructWrapper::deserialize(&mut buffer.as_slice(), &vm, 2).unwrap_err(),\n+        VersionizeError::Deserialize(\"Mismatch between length of FAM specified in FamStruct header (255) and actual size of FAM (0)\".to_string())\n+    );\n+}\n+\n #[test]\n fn test_versionize_famstructwrapper() {\n     let mut vm = VersionMap::new();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "517afae3e6a579e5b36427f68a5faa66fa2360f3",
            "date": "2024-01-02T12:04:28Z",
            "author_login": "roypat"
          },
          {
            "sha": "134145bd9a33be3194e40decc8641fc40b3a7ed0",
            "date": "2024-01-02T12:02:56Z",
            "author_login": "roypat"
          },
          {
            "sha": "c26a84f70731c591a9db80075a9b4fa553b29d2f",
            "date": "2022-12-23T10:33:07Z",
            "author_login": "roypat"
          },
          {
            "sha": "3ac0877153172fbda44a90007f1c9fc861165695",
            "date": "2022-12-08T15:40:31Z",
            "author_login": "roypat"
          },
          {
            "sha": "a9c5067214b7eaab6ef9087640d0d09f54f26382",
            "date": "2023-08-23T18:10:39Z",
            "author_login": "JBYoshi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.7,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:N/I:L/A:L",
    "cwe_id": "CWE-125",
    "description": "Versionize is a framework for version tolerant serializion/deserialization of Rust data structures, designed for usecases that need fast deserialization times and minimal size overhead. An issue was discovered in the \u2018Versionize::deserialize\u2019 implementation provided by the \u2018versionize\u2019 crate for \u2018vmm_sys_utils::fam::FamStructWrapper', which can lead to out of bounds memory accesses. The impact started with version 0.1.1. The issue was corrected in version 0.1.10 by inserting a check that verifies, for any deserialized header, the lengths of compared flexible arrays are equal and aborting deserialization otherwise.\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-24T20:15:15.613",
    "last_modified": "2024-11-21T07:55:06.097",
    "fix_date": "2023-03-13T11:01:19Z"
  },
  "references": [
    {
      "url": "https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firecracker-microvm/versionize/pull/53",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firecracker-microvm/versionize/pull/53",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.004319",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "versionize",
    "owner": "firecracker-microvm",
    "created_at": "2020-04-27T07:25:08Z",
    "updated_at": "2024-11-04T23:51:09Z",
    "pushed_at": "2024-01-02T15:14:27Z",
    "size": 96,
    "stars": 56,
    "forks": 31,
    "open_issues": 11,
    "watchers": 56,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Rust": 100540
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:03:02.684961"
  }
}