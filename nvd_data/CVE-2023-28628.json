{
  "cve_id": "CVE-2023-28628",
  "github_data": {
    "repository": "lambdaisland/uri",
    "fix_commit": "f46db3e84846f79e14bfee0101d9c7a872321820",
    "related_commits": [
      "f46db3e84846f79e14bfee0101d9c7a872321820",
      "f46db3e84846f79e14bfee0101d9c7a872321820"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f46db3e84846f79e14bfee0101d9c7a872321820",
      "commit_date": "2023-03-27T19:41:20Z",
      "author": {
        "login": "plexus",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-cp4w-6x4w-v2h5",
        "length": 107,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 41,
        "additions": 30,
        "deletions": 11
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -1,10 +1,9 @@\n # Unreleased\n \n-## Added\n-\n ## Fixed\n \n-## Changed\n+- Treat a backslash in the authority section as a delimiter which starts the\n+  path section (CVE-2023-28628, with thanks to @luigigubello for the report)\n \n # 1.13.95 (2022-01-28 / a9cbeff)\n \n@@ -108,4 +107,4 @@ not take into account utf-16 encoding.\n \n ## Added\n \n-- Initial release, public vars: `uri`, `join`, `coerce`, `parse`, `edn-readers`\n\\ No newline at end of file\n+- Initial release, public vars: `uri`, `join`, `coerce`, `parse`, `edn-readers`"
        },
        {
          "filename": "src/lambdaisland/uri.cljc",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -4,8 +4,8 @@\n             [lambdaisland.uri.normalize :as normalize])\n   #?(:clj (:import clojure.lang.IFn)))\n \n-(def uri-regex #?(:clj #\"\\A(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?\\z\"\n-                  :cljs #\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?$\"))\n+(def uri-regex #?(:clj #\"\\A(([^:/?#]+):)?(//([^/?#\\\\]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?\\z\"\n+                  :cljs #\"^(([^:/?#]+):)?(//([^/?#\\\\]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?$\"))\n (def authority-regex #?(:clj #\"\\A(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?\\z\"\n                         :cljs #\"^(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?$\"))\n "
        },
        {
          "filename": "test/lambdaisland/uri_test.cljc",
          "status": "modified",
          "additions": 25,
          "deletions": 5,
          "patch": "@@ -181,8 +181,28 @@\n \n (tc/defspec query-string-round-trips 100\n   (prop/for-all [q query-map-gen]\n-    (let [res (-> q\n-                  uri/map->query-string\n-                  uri/query-string->map)]\n-      (or (and (empty? q) (empty? res)) ;; (= nil {})\n-          (= q res)))))\n+                (let [res (-> q\n+                              uri/map->query-string\n+                              uri/query-string->map)]\n+                  (or (and (empty? q) (empty? res)) ;; (= nil {})\n+                      (= q res)))))\n+\n+(deftest backslash-in-authority-test\n+  ;; A backslash is not technically a valid character in a URI (see RFC 3986\n+  ;; section 2), and so should always be percent encoded. The problem is that\n+  ;; user-facing software (e.g. browsers) rarely if ever rejects invalid\n+  ;; URIs/URLs, leading to ad-hoc rules about how to map the set of invalid URIs\n+  ;; to valid URIs. All modern browsers now interpret a backslash as a forward\n+  ;; slash, which changes the interpretation of the URI. For this test (and\n+  ;; accompanying patch) we only care about the specific case of a backslash\n+  ;; appearing inside the authority section, since this authority or _origin_ is\n+  ;; regularly used to inform security policies, e.g. to check if code served\n+  ;; from a certain origin has access to resources with the same origin. In this\n+  ;; case we partially mimic what browsers do, by treating the backslash as a\n+  ;; delimiter which starts the path section, even though we don't replace it\n+  ;; with a forward slash, but leave it as-is in the parsed result.\n+  (let [{:keys [host path user]}\n+        (uri/uri \"https://example.com\\\\@gaiwan.co\")]\n+    (is (= \"example.com\" host))\n+    (is (= nil user))\n+    (is (= \"\\\\@gaiwan.co\" path))))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4ad41063da205fbce2ed428f55f90595942f8613",
            "date": "2024-01-24T06:41:48Z",
            "author_login": "plexus"
          },
          {
            "sha": "1b0a2d0d6845af5dd45d3f8685d1db9a20ca56ef",
            "date": "2024-01-24T06:41:37Z",
            "author_login": "plexus"
          },
          {
            "sha": "a0d4895fe4f39c0d5527965f78cddbd088042845",
            "date": "2024-01-24T06:37:46Z",
            "author_login": "plexus"
          },
          {
            "sha": "abfc6f7c5fbdd1d0f6dea672bfc2c7a9ed2e9d4e",
            "date": "2024-01-24T06:34:28Z",
            "author_login": "plexus"
          },
          {
            "sha": "491454a9b648b88e24b4a91d30cd2383c61d8057",
            "date": "2024-01-24T06:34:12Z",
            "author_login": "plexus"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-706",
    "description": "lambdaisland/uri is a pure Clojure/ClojureScript URI library. In versions prior to 1.14.120 `authority-regex` allows an attacker to send malicious URLs to be parsed by the `lambdaisland/uri` and return the wrong authority. This issue is similar to but distinct from CVE-2020-8910. The regex in question doesn't handle the backslash (`\\`) character in the username correctly, leading to a wrong output. ex. a payload of `https://example.com\\\\@google.com` would return that the host is `google.com`, but the correct host should be `example.com`. Given that the library returns the wrong authority this may be abused to bypass host restrictions depending on how the library is used in an application. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-27T21:15:12.367",
    "last_modified": "2024-11-21T07:55:41.793",
    "fix_date": "2023-03-27T19:41:20Z"
  },
  "references": [
    {
      "url": "https://github.com/lambdaisland/uri/commit/f46db3e84846f79e14bfee0101d9c7a872321820",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/lambdaisland/uri/security/advisories/GHSA-cp4w-6x4w-v2h5",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/lambdaisland/uri/commit/f46db3e84846f79e14bfee0101d9c7a872321820",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/lambdaisland/uri/security/advisories/GHSA-cp4w-6x4w-v2h5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.016639",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "uri",
    "owner": "lambdaisland",
    "created_at": "2017-02-23T10:53:49Z",
    "updated_at": "2024-12-12T00:16:53Z",
    "pushed_at": "2024-01-24T06:41:51Z",
    "size": 145,
    "stars": 245,
    "forks": 21,
    "open_issues": 3,
    "watchers": 245,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Clojure": 41492,
      "Shell": 260,
      "Emacs Lisp": 63
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mpl-2.0"
    },
    "collected_at": "2025-01-26T08:32:48.988377"
  }
}