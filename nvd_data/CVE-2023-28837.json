{
  "cve_id": "CVE-2023-28837",
  "github_data": {
    "repository": "wagtail/wagtail",
    "fix_commit": "3c0c64642b9e5b8d28b111263c7f4bddad6c3880",
    "related_commits": [
      "3c0c64642b9e5b8d28b111263c7f4bddad6c3880",
      "c9d2fcd650a88d76ae122646142245e5927a9165",
      "cfa11bbe00dbe7ce8cd4c0bbfe2a898a690df2bf",
      "d4022310cbe497993459c3136311467c7ac6329a",
      "3c0c64642b9e5b8d28b111263c7f4bddad6c3880",
      "c9d2fcd650a88d76ae122646142245e5927a9165",
      "cfa11bbe00dbe7ce8cd4c0bbfe2a898a690df2bf",
      "d4022310cbe497993459c3136311467c7ac6329a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3c0c64642b9e5b8d28b111263c7f4bddad6c3880",
      "commit_date": "2023-03-10T11:16:56Z",
      "author": {
        "login": "RealOrangeOne",
        "type": "User",
        "stats": {
          "total_commits": 115,
          "average_weekly_commits": 0.1996527777777778,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 55
        }
      },
      "commit_message": {
        "title": "Don't load images / documents into memory when calculating their hash",
        "length": 149,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 137,
        "additions": 124,
        "deletions": 13
      },
      "files": [
        {
          "filename": "wagtail/documents/models.py",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -1,4 +1,3 @@\n-import hashlib\n import os.path\n import urllib\n from contextlib import contextmanager\n@@ -15,6 +14,7 @@\n from wagtail.models import CollectionMember, ReferenceIndex\n from wagtail.search import index\n from wagtail.search.queryset import SearchableQuerySetMixin\n+from wagtail.utils.file import hash_filelike\n \n \n class DocumentQuerySet(SearchableQuerySetMixin, models.QuerySet):\n@@ -122,14 +122,13 @@ def get_file_size(self):\n \n         return self.file_size\n \n-    def _set_file_hash(self, file_contents):\n-        self.file_hash = hashlib.sha1(file_contents).hexdigest()\n+    def _set_file_hash(self):\n+        with self.open_file() as f:\n+            self.file_hash = hash_filelike(f)\n \n     def get_file_hash(self):\n         if self.file_hash == \"\":\n-            with self.open_file() as f:\n-                self._set_file_hash(f.read())\n-\n+            self._set_file_hash()\n             self.save(update_fields=[\"file_hash\"])\n \n         return self.file_hash\n@@ -141,7 +140,7 @@ def _set_document_file_metadata(self):\n         self.file_size = self.file.size\n \n         # Set new document file hash\n-        self._set_file_hash(self.file.read())\n+        self._set_file_hash()\n         self.file.seek(0)\n \n     def __str__(self):"
        },
        {
          "filename": "wagtail/documents/tests/test_models.py",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -126,6 +126,19 @@ def test_content_type(self):\n             \"application/octet-stream\", self.extensionless_document.content_type\n         )\n \n+    def test_file_hash(self):\n+        self.assertEqual(\n+            self.document.get_file_hash(), \"7d8c4778b182e4f3bd442408c64a6e22a4b0ed85\"\n+        )\n+        self.assertEqual(\n+            self.pdf_document.get_file_hash(),\n+            \"7d8c4778b182e4f3bd442408c64a6e22a4b0ed85\",\n+        )\n+        self.assertEqual(\n+            self.extensionless_document.get_file_hash(),\n+            \"7d8c4778b182e4f3bd442408c64a6e22a4b0ed85\",\n+        )\n+\n     def test_content_disposition(self):\n         self.assertEqual(\n             \"\"\"attachment; filename=example.doc; filename*=UTF-8''example.doc\"\"\","
        },
        {
          "filename": "wagtail/images/models.py",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -38,6 +38,7 @@\n from wagtail.models import CollectionMember, ReferenceIndex\n from wagtail.search import index\n from wagtail.search.queryset import SearchableQuerySetMixin\n+from wagtail.utils.file import hash_filelike\n \n logger = logging.getLogger(\"wagtail.images\")\n \n@@ -267,14 +268,13 @@ class AbstractImage(ImageFileMixin, CollectionMember, index.Indexed, models.Mode\n \n     objects = ImageQuerySet.as_manager()\n \n-    def _set_file_hash(self, file_contents):\n-        self.file_hash = hashlib.sha1(file_contents).hexdigest()\n+    def _set_file_hash(self):\n+        with self.open_file() as f:\n+            self.file_hash = hash_filelike(f)\n \n     def get_file_hash(self):\n         if self.file_hash == \"\":\n-            with self.open_file() as f:\n-                self._set_file_hash(f.read())\n-\n+            self._set_file_hash()\n             self.save(update_fields=[\"file_hash\"])\n \n         return self.file_hash\n@@ -286,7 +286,7 @@ def _set_image_file_metadata(self):\n         self.file_size = self.file.size\n \n         # Set new image file hash\n-        self._set_file_hash(self.file.read())\n+        self._set_file_hash()\n         self.file.seek(0)\n \n     def get_upload_to(self, filename):"
        },
        {
          "filename": "wagtail/images/tests/test_models.py",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -112,6 +112,11 @@ def test_get_file_size_on_missing_file_raises_sourceimageioerror(self):\n         with self.assertRaises(SourceImageIOError):\n             self.image.get_file_size()\n \n+    def test_file_hash(self):\n+        self.assertEqual(\n+            self.image.get_file_hash(), \"4dd0211870e130b7e1690d2ec53c499a54a48fef\"\n+        )\n+\n \n class TestImageQuerySet(TestCase):\n     def test_search_method(self):"
        },
        {
          "filename": "wagtail/tests/test_utils.py",
          "status": "modified",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -1,8 +1,11 @@\n # -*- coding: utf-8 -*\n import pickle\n+from io import BytesIO, StringIO\n+from pathlib import Path\n \n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation\n+from django.core.files.uploadedfile import SimpleUploadedFile\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils.text import slugify\n from django.utils.translation import _trans\n@@ -23,6 +26,7 @@\n     string_to_ascii,\n )\n from wagtail.models import Page, Site\n+from wagtail.utils.file import hash_filelike\n from wagtail.utils.utils import deep_update\n \n \n@@ -508,3 +512,58 @@ def test_deep_update(self):\n                 \"starship\": \"enterprise\",\n             },\n         )\n+\n+\n+class HashFileLikeTestCase(SimpleTestCase):\n+    test_file = Path.cwd() / \"LICENSE\"\n+\n+    def test_hashes_io(self):\n+        self.assertEqual(\n+            hash_filelike(BytesIO(b\"test\")), \"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\"\n+        )\n+        self.assertEqual(\n+            hash_filelike(StringIO(\"test\")), \"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\"\n+        )\n+\n+    def test_hashes_file(self):\n+        with self.test_file.open(mode=\"r\") as f:\n+            self.assertEqual(\n+                hash_filelike(f), \"9e58400061ca660ef7b5c94338a5205627c77eda\"\n+            )\n+\n+    def test_hashes_file_bytes(self):\n+        with self.test_file.open(mode=\"rb\") as f:\n+            self.assertEqual(\n+                hash_filelike(f), \"9e58400061ca660ef7b5c94338a5205627c77eda\"\n+            )\n+\n+    def test_hashes_django_uploaded_file(self):\n+        \"\"\"\n+        Check Django's file shims can be hashed as-is.\n+        `SimpleUploadedFile` inherits the base `UploadedFile`, but is easiest to test against\n+        \"\"\"\n+        self.assertEqual(\n+            hash_filelike(SimpleUploadedFile(\"example.txt\", b\"test\")),\n+            \"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\",\n+        )\n+\n+    def test_hashes_large_file(self):\n+        class FakeLargeFile:\n+            \"\"\"\n+            A class that pretends to be a huge file (~1.3GB)\n+            \"\"\"\n+\n+            def __init__(self):\n+                self.iterations = 20000\n+\n+            def read(self, bytes):\n+                self.iterations -= 1\n+                if not self.iterations:\n+                    return b\"\"\n+\n+                return b\"A\" * bytes\n+\n+        self.assertEqual(\n+            hash_filelike(FakeLargeFile()),\n+            \"187cc1db32624dccace20d042f6d631f1a483020\",\n+        )"
        },
        {
          "filename": "wagtail/utils/file.py",
          "status": "added",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -0,0 +1,35 @@\n+from hashlib import sha1\n+from io import UnsupportedOperation\n+\n+from django.utils.encoding import force_bytes\n+\n+HASH_READ_SIZE = 65536  # 64k\n+\n+\n+def hash_filelike(filelike):\n+    \"\"\"\n+    Compute the hash of a file-like object, without loading it all into memory.\n+    \"\"\"\n+    file_pos = 0\n+    if hasattr(filelike, \"tell\"):\n+        file_pos = filelike.tell()\n+\n+    try:\n+        # Reset file handler to the start of the file so we hash it all\n+        filelike.seek(0)\n+    except (AttributeError, UnsupportedOperation):\n+        pass\n+\n+    hasher = sha1()\n+    while True:\n+        data = filelike.read(HASH_READ_SIZE)\n+        if not data:\n+            break\n+        # Use `force_bytes` to account for files opened as text\n+        hasher.update(force_bytes(data))\n+\n+    if hasattr(filelike, \"seek\"):\n+        # Reset the file handler to where it was before\n+        filelike.seek(file_pos)\n+\n+    return hasher.hexdigest()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "77a55e3f60db7c27d1139d5455b7ff7ce6f037f1",
            "date": "2025-01-24T22:53:03Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9d496be14c805d08101288a795198e270c822680",
            "date": "2025-01-23T17:07:48Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "29e41ea6fc3e0928d3ba91369ac05ba5689377b8",
            "date": "2025-01-23T16:54:05Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "484c71c539813f35d65d8fd30ac721d8a26da888",
            "date": "2025-01-23T16:40:19Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "4b99a1755423f2db3216f7eca0d292f3f5f87d72",
            "date": "2025-01-23T12:54:44Z",
            "author_login": "gasman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Wagtail is an open source content management system built on Django. Prior to versions 4.1.4 and 4.2.2, a memory exhaustion bug exists in Wagtail's handling of uploaded images and documents. For both images and documents, files are loaded into memory during upload for additional processing. A user with access to upload images or documents through the Wagtail admin interface could upload a file so large that it results in a crash of denial of service.\n\nThe vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin. It can only be exploited by admin users with permission to upload images or documents.\n\nImage uploads are restricted to 10MB by default, however this validation only happens on the frontend and on the backend after the vulnerable code. \n\nPatched versions have been released as Wagtail 4.1.4 and Wagtail 4.2.2). Site owners who are unable to upgrade to the new versions are encouraged to add extra protections outside of Wagtail to limit the size of uploaded files.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-03T17:15:07.030",
    "last_modified": "2024-11-21T07:56:07.607",
    "fix_date": "2023-03-10T11:16:56Z"
  },
  "references": [
    {
      "url": "https://docs.wagtail.org/en/stable/reference/settings.html#wagtailimages-max-upload-size",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/3c0c64642b9e5b8d28b111263c7f4bddad6c3880",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/c9d2fcd650a88d76ae122646142245e5927a9165",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/cfa11bbe00dbe7ce8cd4c0bbfe2a898a690df2bf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/d4022310cbe497993459c3136311467c7ac6329a",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/releases/tag/v4.1.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/releases/tag/v4.2.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-33pv-vcgh-jfg9",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.wagtail.org/en/stable/reference/settings.html#wagtailimages-max-upload-size",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/3c0c64642b9e5b8d28b111263c7f4bddad6c3880",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/c9d2fcd650a88d76ae122646142245e5927a9165",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/cfa11bbe00dbe7ce8cd4c0bbfe2a898a690df2bf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/d4022310cbe497993459c3136311467c7ac6329a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/releases/tag/v4.1.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/releases/tag/v4.2.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-33pv-vcgh-jfg9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.036597",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "wagtail",
    "owner": "wagtail",
    "created_at": "2014-02-03T12:41:59Z",
    "updated_at": "2025-01-26T03:30:16Z",
    "pushed_at": "2025-01-25T11:43:50Z",
    "size": 227639,
    "stars": 18657,
    "forks": 3967,
    "open_issues": 975,
    "watchers": 18657,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 8307657,
      "JavaScript": 1144779,
      "TypeScript": 559700,
      "HTML": 526327,
      "SCSS": 231062,
      "Shell": 6841,
      "CSS": 2719,
      "Dockerfile": 2038,
      "Makefile": 1389,
      "MDX": 271
    },
    "commit_activity": {
      "total_commits_last_year": 1475,
      "avg_commits_per_week": 28.365384615384617,
      "days_active_last_year": 269
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T07:34:58.418633"
  }
}