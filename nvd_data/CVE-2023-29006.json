{
  "cve_id": "CVE-2023-29006",
  "github_data": {
    "repository": "pluginsGLPI/order",
    "fix_commit": "c78e64b95e54d5e47d9835984c93049f245b579e",
    "related_commits": [
      "c78e64b95e54d5e47d9835984c93049f245b579e",
      "c78e64b95e54d5e47d9835984c93049f245b579e"
    ],
    "patch_url": "https://github.com/pluginsGLPI/order/commit/c78e64b95e54d5e47d9835984c93049f245b579e.patch",
    "fix_commit_details": {
      "sha": "c78e64b95e54d5e47d9835984c93049f245b579e",
      "commit_date": "2023-02-02T11:04:37Z",
      "author": {
        "login": "cedric-anne",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Clean-up code",
        "length": 13,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 940,
        "additions": 25,
        "deletions": 915
      },
      "files": [
        {
          "filename": "ajax/detail.php",
          "status": "removed",
          "additions": 0,
          "deletions": 69,
          "patch": "@@ -1,69 +0,0 @@\n-<?php\n-\n-/**\n- * -------------------------------------------------------------------------\n- * Order plugin for GLPI\n- * -------------------------------------------------------------------------\n- *\n- * LICENSE\n- *\n- * This file is part of Order.\n- *\n- * Order is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation; either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Order is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Order. If not, see <http://www.gnu.org/licenses/>.\n- * -------------------------------------------------------------------------\n- * @copyright Copyright (C) 2009-2022 by Order plugin team.\n- * @license   GPLv3 https://www.gnu.org/licenses/gpl-3.0.html\n- * @link      https://github.com/pluginsGLPI/order\n- * -------------------------------------------------------------------------\n- */\n-\n-include (\"../../../inc/includes.php\");\n-\n-header(\"Content-Type: text/html; charset=UTF-8\");\n-\n-Html::header_nocache();\n-\n-if (!defined('GLPI_ROOT')) {\n-   die(\"Can not acces directly to this file\");\n-}\n-\n-Session::checkCentralAccess();\n-\n-$rand         = $_POST[\"rand\"];\n-$paramsaction = [\n-   'plugin_order_references_id' => '__VALUE__',\n-   'entity_restrict'            => $_POST[\"entity_restrict\"],\n-   'suppliers_id'               => $_POST[\"suppliers_id\"],\n-   'itemtype'                   => $_POST['itemtype'],\n-];\n-$fields = [\n-   \"quantity\",\n-   \"priceht\",\n-   \"pricediscounted\",\n-   \"taxe\",\n-   \"validate\",\n-];\n-\n-$order_url = Plugin::getWebDir('order');\n-\n-foreach ($fields as $field) {\n-   $paramsaction['update'] = $field;\n-   Ajax::updateItem(\"show_$field\",\n-                    \"$order_url/ajax/referencedetail.php\",\n-                    $paramsaction, \"dropdown_reference$rand\");\n-   Ajax::updateItemOnSelectEvent(\"dropdown_reference$rand\",\n-                                 \"show_$field\",\n-                                 \"$order_url/ajax/referencedetail.php\",\n-                                 $paramsaction);\n-}"
        },
        {
          "filename": "ajax/dropdownContact.php",
          "status": "removed",
          "additions": 0,
          "deletions": 101,
          "patch": "@@ -1,101 +0,0 @@\n-<?php\n-\n-/**\n- * -------------------------------------------------------------------------\n- * Order plugin for GLPI\n- * -------------------------------------------------------------------------\n- *\n- * LICENSE\n- *\n- * This file is part of Order.\n- *\n- * Order is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation; either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Order is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Order. If not, see <http://www.gnu.org/licenses/>.\n- * -------------------------------------------------------------------------\n- * @copyright Copyright (C) 2009-2022 by Order plugin team.\n- * @license   GPLv3 https://www.gnu.org/licenses/gpl-3.0.html\n- * @link      https://github.com/pluginsGLPI/order\n- * -------------------------------------------------------------------------\n- */\n-\n-if (strpos($_SERVER['PHP_SELF'], \"dropdownContact.php\")) {\n-   include (\"../../../inc/includes.php\");\n-   header(\"Content-Type: text/html; charset=UTF-8\");\n-   Html::header_nocache();\n-}\n-\n-if (!defined('GLPI_ROOT')) {\n-   die(\"Can not acces directly to this file\");\n-}\n-\n-Session::checkCentralAccess();\n-\n-// Make a select box with all glpi users\n-$where = \" WHERE `glpi_contacts_suppliers`.`contacts_id` = `glpi_contacts`.`id`\n-           AND (`glpi_contacts_suppliers`.`suppliers_id` = '\".$_POST['suppliers_id'].\"'\n-           AND `glpi_contacts`.`is_deleted` = '0' ) \";\n-\n-\n-if (isset($_POST[\"entity_restrict\"])) {\n-   if (!is_numeric($_POST[\"entity_restrict\"]) && !is_array($_POST[\"entity_restrict\"])) {\n-      $_POST[\"entity_restrict\"] = unserialize(Toolbox::stripslashes_deep($_POST[\"entity_restrict\"]));\n-   }\n-   $where .= getEntitiesRestrictRequest(\"AND\", \"glpi_contacts\", '', $_POST[\"entity_restrict\"], true);\n-} else {\n-   $where .= getEntitiesRestrictRequest(\"AND\", \"glpi_contacts\", '', '', true);\n-}\n-\n-if ($_POST['searchText'] != $CFG_GLPI[\"ajax_wildcard\"]) {\n-   $where .= \" AND `glpi_contacts`.`name` \".makeTextSearch($_POST['searchText']);\n-}\n-\n-$LIMIT = \"LIMIT 0, \".$CFG_GLPI[\"dropdown_max\"];\n-if ($_POST['searchText'] == $CFG_GLPI[\"ajax_wildcard\"]) {\n-   $LIMIT = \"\";\n-}\n-\n-\n-$query = \"SELECT `glpi_contacts`.*\n-          FROM `glpi_contacts`,`glpi_contacts_suppliers`\n-          $where\n-          ORDER BY `entities_id`, `name` $LIMIT\";\n-//error_log($query);\n-$result = $DB->query($query);\n-\n-echo \"<select name='contacts_id'>\";\n-\n-echo \"<option value='0'>\".Dropdown::EMPTY_VALUE.\"</option>\";\n-\n-if ($DB->numrows($result)) {\n-   $prev = -1;\n-   while ($data = $DB->fetchArray($result)) {\n-      if ($data[\"entities_id\"] != $prev) {\n-         if ($prev > 0) {\n-            echo \"</optgroup>\";\n-         }\n-         $prev = $data[\"entities_id\"];\n-         echo \"<optgroup label=\\\"\".Dropdown::getDropdownName(\"glpi_entities\", $prev).\"\\\">\";\n-      }\n-      $output = formatUserName($data[\"id\"], \"\", $data[\"name\"], $data[\"firstname\"]);\n-      if ($_SESSION[\"glpiis_ids_visible\"] || empty($output)) {\n-         $output .= \" (\".$data[\"id\"].\")\";\n-      }\n-      echo \"<option value=\\\"\".$data[\"id\"].\"\\\" title=\\\"$output\\\">\"\n-        .substr($output, 0, $CFG_GLPI[\"dropdown_chars_limit\"]).\"</option>\";\n-   }\n-   if ($prev >= 0) {\n-      echo \"</optgroup>\";\n-   }\n-}\n-\n-echo \"</select>\";"
        },
        {
          "filename": "ajax/referencedetail.php",
          "status": "removed",
          "additions": 0,
          "deletions": 77,
          "patch": "@@ -1,77 +0,0 @@\n-<?php\n-\n-/**\n- * -------------------------------------------------------------------------\n- * Order plugin for GLPI\n- * -------------------------------------------------------------------------\n- *\n- * LICENSE\n- *\n- * This file is part of Order.\n- *\n- * Order is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation; either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Order is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Order. If not, see <http://www.gnu.org/licenses/>.\n- * -------------------------------------------------------------------------\n- * @copyright Copyright (C) 2009-2022 by Order plugin team.\n- * @license   GPLv3 https://www.gnu.org/licenses/gpl-3.0.html\n- * @link      https://github.com/pluginsGLPI/order\n- * -------------------------------------------------------------------------\n- */\n-\n-include (\"../../../inc/includes.php\");\n-\n-header(\"Content-Type: text/html; charset=UTF-8\");\n-\n-Html::header_nocache();\n-\n-if (!defined('GLPI_ROOT')) {\n-   die(\"Can not acces directly to this file\");\n-}\n-\n-Session::checkCentralAccess();\n-\n-if ($_POST[\"plugin_order_references_id\"] > 0) {\n-   $reference_supplier = new PluginOrderReference_Supplier();\n-   $price = $reference_supplier->getPriceByReferenceAndSupplier($_POST[\"plugin_order_references_id\"],\n-                                                                $_POST[\"suppliers_id\"]);\n-   switch ($_POST[\"update\"]) {\n-      case 'quantity':\n-         echo \"<input type='number' class='form-control' min='0' name='quantity' class='quantity'>\";\n-         break;\n-      case 'priceht':\n-         echo \"<input type='number' class='form-control' min='0' step='\".PLUGIN_ORDER_NUMBER_STEP.\"'\n-                      name='price' value='\".Html::formatNumber($price, true).\"' class='decimal'>\";\n-         break;\n-      case 'pricediscounted':\n-         echo \"<input type='number' class='form-control' min='0' step='\".PLUGIN_ORDER_NUMBER_STEP.\"'\n-                      name='discount' class='smalldecimal' value='0'>\";\n-         break;\n-      case 'taxe':\n-         $config = PluginOrderConfig::getConfig();\n-         PluginOrderOrderTax::Dropdown([\n-            'name'                => \"plugin_order_ordertaxes_id\",\n-            'value'               => $config->getDefaultTaxes(),\n-            'display_emptychoice' => true,\n-            'emptylabel'          => __(\"No VAT\", \"order\"),\n-         ]);\n-         break;\n-      case 'validate':\n-         echo Html::hidden('itemtype', ['value' => $_POST[\"itemtype\"]]);\n-         echo Html::hidden('plugin_order_references_id',\n-                           ['value' => $_POST[\"plugin_order_references_id\"]]);\n-         echo \"<input type='submit' name='add_item' value=\\\"\". __(\"Add\").\"\\\" class='submit' >\";\n-         break;\n-   }\n-} else {\n-   return \"\";\n-}"
        },
        {
          "filename": "ajax/referencespecifications.php",
          "status": "modified",
          "additions": 0,
          "deletions": 5,
          "patch": "@@ -45,11 +45,6 @@\n if ($_POST[\"itemtype\"]) {\n    switch ($_POST[\"field\"]) {\n       case \"types_id\":\n-         if ($_POST[\"itemtype\"] == 'PluginOrderOther') {\n-            $file = 'other';\n-         } else {\n-            $file = $_POST[\"itemtype\"];\n-         }\n          if (class_exists($_POST[\"itemtype\"].'Type')) {\n             Dropdown::show($_POST[\"itemtype\"].\"Type\", ['name' => \"types_id\"]);\n          }"
        },
        {
          "filename": "ajax/referencetree.php",
          "status": "removed",
          "additions": 0,
          "deletions": 47,
          "patch": "@@ -1,47 +0,0 @@\n-<?php\n-\n-/**\n- * -------------------------------------------------------------------------\n- * Order plugin for GLPI\n- * -------------------------------------------------------------------------\n- *\n- * LICENSE\n- *\n- * This file is part of Order.\n- *\n- * Order is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation; either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Order is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Order. If not, see <http://www.gnu.org/licenses/>.\n- * -------------------------------------------------------------------------\n- * @copyright Copyright (C) 2009-2022 by Order plugin team.\n- * @license   GPLv3 https://www.gnu.org/licenses/gpl-3.0.html\n- * @link      https://github.com/pluginsGLPI/order\n- * -------------------------------------------------------------------------\n- */\n-\n-$AJAX_INCLUDE = 1;\n-\n-include (\"../../../inc/includes.php\");\n-\n-header(\"Content-Type: text/html; charset=UTF-8\");\n-\n-Html::header_nocache();\n-\n-Session::checkLoginUser();\n-\n-if (!isset($_GET['target'])) {\n-   $_GET['target'] = Plugin::getWebDir('order').\"/front/reference.php\";\n-}\n-\n-PluginOrderReference::showSelector($_GET['target']);\n-\n-Html::ajaxFooter();"
        },
        {
          "filename": "ajax/referencetreetypes.php",
          "status": "removed",
          "additions": 0,
          "deletions": 91,
          "patch": "@@ -1,91 +0,0 @@\n-<?php\n-\n-/**\n- * -------------------------------------------------------------------------\n- * Order plugin for GLPI\n- * -------------------------------------------------------------------------\n- *\n- * LICENSE\n- *\n- * This file is part of Order.\n- *\n- * Order is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation; either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * Order is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with Order. If not, see <http://www.gnu.org/licenses/>.\n- * -------------------------------------------------------------------------\n- * @copyright Copyright (C) 2009-2022 by Order plugin team.\n- * @license   GPLv3 https://www.gnu.org/licenses/gpl-3.0.html\n- * @link      https://github.com/pluginsGLPI/order\n- * -------------------------------------------------------------------------\n- */\n-\n-$AJAX_INCLUDE = 1;\n-\n-include (\"../../../inc/includes.php\");\n-\n-header(\"Content-Type: text/html; charset=UTF-8\");\n-\n-Html::header_nocache();\n-\n-Session::checkLoginUser();\n-\n-if (isset($_REQUEST['node'])) {\n-   $target = \"reference.php\";\n-   $nodes  = [];\n-\n-   // Root node\n-   if ($_REQUEST['node'] == -1) {\n-      $pos      = 0;\n-      $entity   = $_SESSION['glpiactive_entity'];\n-      $entities = getEntitiesRestrictRequest(\"AND\", \"glpi_plugin_order_references\");\n-\n-      $query = \"SELECT DISTINCT `itemtype`\n-                FROM `glpi_plugin_order_references`\n-                WHERE `glpi_plugin_order_references`.`is_deleted` = '0'\n-                $entities\n-                GROUP BY `itemtype`\n-                ORDER BY `itemtype`\";\n-\n-      if ($result = $DB->query($query)) {\n-         if ($DB->numrows($result)) {\n-            $pos = 0;\n-\n-            while ($row = $DB->fetchArray($result)) {\n-               $class             = $row['itemtype'];\n-               $item              = new $class();\n-               $path['text']      = $item->getTypeName();\n-               $path['position']  = $pos;\n-               $pos++;\n-               $path['draggable'] = false;\n-\n-               if ($entity == 0) {\n-                  $link = \"&link[1]=AND&searchtype[1]=contains&contains[1]=NULL&field[1]=80\";\n-               } else {\n-                  $link = \"&link[1]=AND&searchtype[1]=contains&contains[1]=\".\n-                          Dropdown::getDropdownName(\"glpi_entities\", $entity).\"&field[1]=80\";\n-               }\n-\n-               $path['href'] = Plugin::getWebDir('order').\n-                  \"/front/$target?is_deleted=0&field[0]=3&searchtype[0]=equals&contains[0]=\".\n-                  rawurlencode($class).\"&$link&itemtype=PluginOrderReference&start=0\";\n-\n-               // Check if node is a leaf or a folder.\n-               $path['leaf'] = true;\n-               $path['cls']  = 'file';\n-               $nodes[]      = $path;\n-            }\n-         }\n-      }\n-   }\n-\n-   print json_encode($nodes);\n-}"
        },
        {
          "filename": "front/bill.form.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -83,7 +83,6 @@\n    PluginOrderOrder::updateBillState($order_item->fields['plugin_order_orders_id']);\n    Html::back();\n }\n-$dropdown = new PluginOrderBill();\n \n Session::checkRight(\"plugin_order_bill\", READ);\n "
        },
        {
          "filename": "front/menu.php",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -37,10 +37,6 @@\n    \"PluginOrderMenu\"\n );\n \n-$PluginOrderOrder     = new PluginOrderOrder();\n-$PluginOrderReference = new PluginOrderReference();\n-$PluginOrderBill      = new PluginOrderBill();\n-\n //If there's only one possibility, do not display menu!\n if (PluginOrderOrder::canView() && !PluginOrderReference::canView() && !PluginOrderBill::canView()) {\n    Html::redirect(Toolbox::getItemTypeSearchURL('PluginOrderOrder'));"
        },
        {
          "filename": "front/order.form.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -40,7 +40,6 @@\n $pluginOrderOrder          = new PluginOrderOrder();\n $config                    = new PluginOrderConfig();\n $pluginOrderOrder_Item     = new PluginOrderOrder_Item();\n-$pluginOrderOrder_Supplier = new PluginOrderOrder_Supplier();\n \n /* add order */\n if (isset ($_POST[\"add\"])) {"
        },
        {
          "filename": "front/order.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -38,8 +38,6 @@\n    \"order\"\n );\n \n-$order = new PluginOrderOrder();\n-\n if (PluginOrderOrder::canView() || Session::haveRight(\"config\", UPDATE)) {\n    Search::show(\"PluginOrderOrder\");\n } else {"
        },
        {
          "filename": "front/reference.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -38,8 +38,6 @@\n    \"references\"\n );\n \n-$reference = new PluginOrderReference();\n-\n if (PluginOrderReference::canView()) {\n    Search::show(\"PluginOrderReference\");\n } else {"
        },
        {
          "filename": "front/reference_supplier.form.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -45,7 +45,7 @@\n if (isset($_POST[\"add\"])) {\n    if (PluginOrderReference_Supplier::canCreate()) {\n       if (isset($_POST[\"suppliers_id\"]) && $_POST[\"suppliers_id\"] > 0) {\n-         $newID = $PluginOrderReference_Supplier->add($_POST);\n+         $PluginOrderReference_Supplier->add($_POST);\n       }\n    }\n    Html::redirect($_SERVER['HTTP_REFERER']);"
        },
        {
          "filename": "front/surveysupplier.form.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -45,7 +45,7 @@\n if (isset($_POST[\"add\"])) {\n    if (PluginOrderSurveySupplier::canCreate()) {\n       if (isset($_POST[\"plugin_order_orders_id\"]) && $_POST[\"plugin_order_orders_id\"] > 0) {\n-         $newID = $PluginOrderSurveySupplier->add($_POST);\n+         $PluginOrderSurveySupplier->add($_POST);\n       }\n    }\n    Html::redirect($_SERVER['HTTP_REFERER']);"
        },
        {
          "filename": "hook.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -326,8 +326,6 @@ function plugin_order_giveItem($type, $ID, $data, $num) {\n \n \n function plugin_order_displayConfigItem($type, $ID, $data, $num) {\n-   global $CFG_GLPI;\n-\n    $searchopt = &Search::getOptions($type);\n    $table = $searchopt[$ID][\"table\"];\n    $field = $searchopt[$ID][\"field\"];"
        },
        {
          "filename": "inc/bill.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 14,
          "patch": "@@ -276,27 +276,14 @@ public static function showItems(PluginOrderBill $bill) {\n          echo \"<th>\".__(\"Status\").\"</th>\";\n          echo \"</tr>\";\n \n-         $old_itemtype = '';\n-         $num          = 0;\n-\n          while ($data = $DB->fetchArray($result)) {\n             if (!class_exists($data['itemtype'])) {\n                continue;\n             }\n             $item = new $data['itemtype']();\n-            if ($data['itemtype']::canView()) {\n+            if ($data['itemtype']::canView() && $item->getFromDB($data[\"id\"])) {\n                echo \"<tr class='tab_bg_1'>\";\n \n-               $ID = \"\";\n-               if ($_SESSION[\"glpiis_ids_visible\"]\n-                   || empty($data[\"name\"])) {\n-                    $ID = \" (\".$data[\"id\"].\")\";\n-               }\n-               $name = NOT_AVAILABLE;\n-               if ($item->getFromDB($data[\"id\"])) {\n-                  $name = $item->getLink();\n-               }\n-\n                echo \"<td class='center top'>\".$item->getTypeName().\"</td>\";\n                echo \"<td class='center top'>\";\n                echo Dropdown::getDropdownName('glpi_entities', $item->getEntityID()).\"</td>\";"
        },
        {
          "filename": "inc/config.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -79,8 +79,6 @@ public static function getTypeName($nb = 0) {\n \n \n    public static function getMenuContent() {\n-      global $CFG_GLPI;\n-\n       $menu  = parent::getMenuContent();\n       $menu['page']   = PluginOrderMenu::getSearchURL(false);\n       $menu['links']['add']    = null;\n@@ -768,7 +766,7 @@ public static function install(Migration $migration) {\n          //version 2.0.1\n          $migration->addField($table, \"use_free_reference\", \"bool\");\n \n-   \n+\n       }\n \n       $migration->displayMessage(\"Add default order state workflow\");"
        },
        {
          "filename": "inc/link.class.php",
          "status": "modified",
          "additions": 10,
          "deletions": 127,
          "patch": "@@ -116,15 +116,13 @@ public function showItemGenerationForm($params) {\n                $item->getFromDB($templateID);\n \n                $name         = $item->fields[\"name\"] ?? \"\";\n-               $serial       = $item->fields[\"serial\"] ?? \"\";\n                $otherserial  = $item->fields[\"otherserial\"] ?? \"\";\n                $states_id    = $item->fields[\"states_id\"] ?? \"\";\n                $locations_id = $item->fields[\"locations_id\"] ?? \"\";\n                $groups_id    = $item->fields[\"groups_id\"] ?? \"\";\n                $immo_number  = $item->fields[\"immo_number\"] ?? \"\";\n             } else {\n                $name         = false;\n-               $serial       = false;\n                $otherserial  = false;\n                $states_id    = false;\n                $locations_id = false;\n@@ -147,7 +145,7 @@ public function showItemGenerationForm($params) {\n             } else {\n                echo \"<td><input type='text' size='20' name='id[$i][otherserial]'></td>\";\n             }\n-\t\t\t\n+\n             if ($config->canAddImmobilizationNumber()) {\n                 if ($immo_number) {\n                    echo \"<td align='center'>\".Dropdown::EMPTY_VALUE.\"</td>\";\n@@ -519,7 +517,6 @@ function getForbiddenStandardMassiveAction() {\n \n \n    function getSpecificMassiveActions($checkitem = null) {\n-      $isadmin = static::canUpdate();\n       $actions = parent::getSpecificMassiveActions($checkitem);\n       $sep     = __CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR;\n \n@@ -637,91 +634,6 @@ static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBT\n    }\n \n \n-   public function getLinkedItemDetails($itemtype, $items_id) {\n-      $comments = \"\";\n-\n-      switch ($itemtype) {\n-         case 'ConsumableItem' :\n-            $ci = new Consumable();\n-            if ($ci->getFromDB($items_id)) {\n-               $ct = new ConsumableItem();\n-               $ct->getFromDB($ci->fields['consumableitems_id']);\n-\n-               $comments .= \"<strong>\".__(\"Entity\").\":</strong> \";\n-               $comments .= Dropdown::getDropdownName(\"glpi_entities\", $ct->fields[\"entities_id\"]);\n-               $comments .= '<br><strong>'.__(\"Consumable\").' : </strong> #'.$items_id;\n-               $comments .= '<br><strong>'.__(\"Consumable type\").' : </strong>';\n-               $comments .= $ct->fields['name'];\n-               $comments .= '<br><strong>'.__(\"Manufacturer\").' : </strong>';\n-               $comments .= Dropdown::getDropdownName('glpi_manufacturers', $ct->fields['manufacturers_id']);\n-               $comments .= '<br><strong>'.__(\"State\").' : </strong>';\n-               $comments .= (!$ci->fields['users_id'] ? __(\"In stock\") : __(\"Used\"));\n-               if ($ci->fields['users_id']) {\n-                  $comments .= '<br><strong>'.__(\"User\").' : </strong>';\n-                  $comments .= Dropdown::getDropdownName('glpi_users', $ci->fields['users_id']);\n-               }\n-            }\n-            break;\n-         case 'CartridgeItem' :\n-            $ci = new Cartridge();\n-            if ($ci->getFromDB($items_id)) {\n-               $ct = new CartridgeItem();\n-               $ct->getFromDB($ci->fields['cartridgeitems_id']);\n-\n-               $comments .= \"<strong>\".__(\"Entity\").\":</strong> \";\n-               $comments .= Dropdown::getDropdownName(\"glpi_entities\", $ct->fields[\"entities_id\"]);\n-               $comments .= '<br><strong>'.__(\"Cartridge\").' : </strong> #'.$items_id;\n-               $comments .= '<br><strong>'._n(\"New\", \"New\", 2).' : </strong>';\n-               $comments .= $ct->fields['name'];\n-               $comments .= '<br><strong>'.__(\"Manufacturer\").' : </strong>';\n-               $comments .= Dropdown::getDropdownName('glpi_manufacturers', $ct->fields['manufacturers_id']);\n-            }\n-            break;\n-         // case 'Computer' :\n-         // case 'Monitor' :\n-         // case 'NetworkEquipment' :\n-         // case 'Peripheral' :\n-         // case 'Phone' :\n-         // case 'Printer' :\n-         default :\n-            $item = new $itemtype();\n-            $item->getFromDB($items_id);\n-\n-            if ($item->getField(\"name\")) {\n-               $comments .= \"<strong>\".__(\"Name\").\":</strong> \";\n-               $comments .= $item->getField(\"name\");\n-            }\n-\n-            if ($item->getField(\"entities_id\")) {\n-               $comments .= \"<strong>\".__(\"Entity\").\":</strong> \";\n-               $comments .= Dropdown::getDropdownName(\"glpi_entities\", $item->getField(\"entities_id\"));\n-            }\n-\n-            if ($item->getField(\"serial\") != '') {\n-               $comments .= \"<br><strong>\".__(\"Serial number\").\":</strong> \";\n-               $comments .= $item->getField(\"serial\");\n-            }\n-\n-            if ($item->getField(\"otherserial\") != '') {\n-               $comments .= \"<br><strong>\".__(\"Inventory number\").\":</strong> \";\n-               $comments .= $item->getField(\"otherserial\");\n-            }\n-            if ($item->getField(\"locations_id\")) {\n-               $comments .= \"<br><strong>\".__(\"Location\").\":</strong> \";\n-               $comments .= Dropdown::getDropdownName('glpi_locations', $item->getField(\"locations_id\"));\n-            }\n-\n-            if ($item->getField(\"users_id\")) {\n-               $comments .= \"<br><strong>\".__(\"User\").\":</strong> \";\n-               $comments .= Dropdown::getDropdownName('glpi_users', $item->getField(\"users_id\"));\n-            }\n-            break;\n-      }\n-\n-      return ($comments);\n-   }\n-\n-\n    public function getReceptionItemName($items_id, $itemtype) {\n       if ($items_id == 0) {\n          return (__(\"No associated item\", \"order\"));\n@@ -747,35 +659,6 @@ public function getReceptionItemName($items_id, $itemtype) {\n       }\n    }\n \n-\n-   /*public function dropdownLinkActions($itemtype, $plugin_order_references_id,\n-                                       $plugin_order_orders_id, $entities_id) {\n-      global $CFG_GLPI;\n-\n-      $rand       = mt_rand();\n-      $reception  = new PluginOrderReception();\n-      $actions[0] = Dropdown::EMPTY_VALUE;\n-      if ($reception->checkItemStatus($plugin_order_orders_id, $plugin_order_references_id,\n-                                      PluginOrderOrder::ORDER_DEVICE_DELIVRED)) {\n-         if (!in_array($itemtype, self::getTypesThanCannotBeGenerared())) {\n-            $actions['generation'] = __(\"Generate item\", \"order\");\n-         }\n-         if ($itemtype::canView()) {\n-            $actions['createLink'] = __(\"Link to an existing item\", \"order\");\n-            $actions['deleteLink'] = __(\"Delete item link\", \"order\");\n-         }\n-      }\n-      $rand   = Dropdown::showFromArray('generationActions', $actions);\n-      Ajax::updateItemOnSelectEvent(\"dropdown_generationActions$rand\", \"show_generationActions$rand\",\n-                                  Plugin::getWebDir('order').\"/ajax/linkactions.php\",\n-                                  ['action'                     => '__VALUE__',\n-                                   'itemtype'                   => $itemtype,\n-                                   'plugin_order_references_id' => $plugin_order_references_id,\n-                                   'plugin_order_orders_id'     => $plugin_order_orders_id,\n-                                   'entities_id'                => $entities_id]);\n-      echo \"<span id='show_generationActions$rand'>&nbsp;</span>\";\n-   }*/\n-\n    public function itemAlreadyLinkedToAnOrder($itemtype, $items_id, $plugin_order_orders_id,\n                                               $detailID = 0) {\n       global $DB;\n@@ -1067,7 +950,7 @@ public function deleteLinkWithItem($detailID, $itemtype, $plugin_order_orders_id\n          $license = $detail->fields[\"items_id\"];\n \n          $this->removeInfoComRelatedToOrder($itemtype, $license);\n-         $result = $PluginOrderOrder_Item->queryRef($detail->fields[\"plugin_order_orders_id\"],\n+         $result = $detail->queryRef($detail->fields[\"plugin_order_orders_id\"],\n                                                     $detail->fields[\"plugin_order_references_id\"],\n                                                     $detail->fields[\"price_taxfree\"],\n                                                     $detail->fields[\"discount\"],\n@@ -1160,10 +1043,10 @@ public function generateNewItem($params) {\n          if ($add_item['itemtype']) {\n             $order = new PluginOrderOrder();\n          }\n-   \n+\n          $order->getFromDB($params[\"plugin_order_orders_id\"]);\n          $reference->getFromDB($add_item[\"plugin_order_references_id\"]);\n-   \n+\n \t\t //Update immo_number in details to fill Infocom later\n          if ($config->canAddImmobilizationNumber()) {\n     \t\t $detail = new PluginOrderOrder_Item();\n@@ -1287,12 +1170,12 @@ public function generateNewItem($params) {\n                $input['itemtype']            = $add_item[\"itemtype\"];\n \n                $ticket = new Ticket();\n-               $ticketID = $ticket->add($input);\n+               $ticket->add($input);\n             }\n          }\n \n          //-------------- End template management ---------------------------------//\n-         $result = $this->createLinkWithItem($values[\"id\"], $newID, $add_item[\"itemtype\"],\n+         $this->createLinkWithItem($values[\"id\"], $newID, $add_item[\"itemtype\"],\n                                              $params[\"plugin_order_orders_id\"], $entity, $templateID,\n                                              false, false);\n \n@@ -1348,10 +1231,10 @@ public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $\n    /**\n     * Copy order documents into the newly generated item\n     * @since 1.5.3\n-    * @param unknown_type $itemtype\n-    * @param unknown_type $items_id\n-    * @param unknown_type $orders_id\n-    * @param unknown_type $entity\n+    * @param $itemtype\n+    * @param $items_id\n+    * @param $orders_id\n+    * @param $entity\n     */\n    public static function copyDocuments($itemtype, $items_id, $orders_id, $entity) {\n       global $CFG_GLPI;"
        },
        {
          "filename": "inc/order.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 125,
          "patch": "@@ -1363,103 +1363,6 @@ public function showForm ($ID, $options = []) {\n    }\n \n \n-   public function dropdownSuppliers($myname, $value = 0, $entity_restrict = '') {\n-      global $DB, $CFG_GLPI;\n-\n-      $rand     = mt_rand();\n-      $entities = getEntitiesRestrictRequest(\"AND\", \"glpi_suppliers\", '', $entity_restrict, true);\n-\n-      $query = \"SELECT `glpi_suppliers`.*\n-                FROM `glpi_suppliers`\n-                LEFT JOIN `glpi_contacts_suppliers`\n-                   ON (`glpi_contacts_suppliers`.`suppliers_id` = `glpi_suppliers`.`id`)\n-                WHERE `glpi_suppliers`.`is_deleted` = '0'\n-                $entities\n-                GROUP BY `glpi_suppliers`.`id`\n-                ORDER BY `entities_id`, `name`\";\n-      $result = $DB->query($query);\n-\n-      echo \"<select name='suppliers_id' id='suppliers_id'>\\n\";\n-      echo \"<option value='0'>\".Dropdown::EMPTY_VALUE.\"</option>\\n\";\n-\n-      $prev = -1;\n-      while ($data = $DB->fetchArray($result)) {\n-         if ($data[\"entities_id\"] != $prev) {\n-            if ($prev >= 0) {\n-               echo \"</optgroup>\";\n-            }\n-            $prev = $data[\"entities_id\"];\n-            echo \"<optgroup label=\\\"\".Dropdown::getDropdownName(\"glpi_entities\", $prev).\"\\\">\";\n-         }\n-         $output = $data[\"name\"];\n-         if ($_SESSION[\"glpiis_ids_visible\"] || empty($output)) {\n-            $output .= \" (\".$data[\"id\"].\")\";\n-         }\n-         echo \"<option value='\".$data[\"id\"].\"' \".($value == $data[\"id\"] ? \" selected \" : \"\").\n-               \" title=\\\"\".Html::cleanInputText($output).\"\\\">\".\n-               substr($output, 0, $CFG_GLPI[\"dropdown_chars_limit\"]).\"</option>\";\n-      }\n-      if ($prev >= 0) {\n-         echo \"</optgroup>\";\n-      }\n-      echo \"</select>\";\n-      Ajax::updateItemOnSelectEvent(\"suppliers_id\", \"show_contacts_id\",\n-                                    Plugin::getWebDir('order').\"/ajax/dropdownSupplier.php\",\n-                                    [\n-                                       'suppliers_id'    => '__VALUE__',\n-                                       'entity_restrict' => $entity_restrict,\n-                                       'rand'            => $rand,\n-                                       'myname'          => $myname,\n-                                    ]);\n-\n-      return $rand;\n-   }\n-\n-\n-   public function dropdownContacts($suppliers_id, $value = 0, $entity_restrict = '') {\n-      global $DB, $CFG_GLPI;\n-\n-      $rand     = mt_rand();\n-      $entities = getEntitiesRestrictRequest(\"AND\", \"glpi_contacts\", '', $entity_restrict, true);\n-\n-      $query = \"SELECT `glpi_contacts`.*\n-                FROM `glpi_contacts`,`glpi_contacts_suppliers`\n-                WHERE `glpi_contacts_suppliers`.`contacts_id` = `glpi_contacts`.`id`\n-                AND `glpi_contacts_suppliers`.`suppliers_id` = '$suppliers_id'\n-                AND `glpi_contacts`.`is_deleted` = '0'\n-                $entities\n-                ORDER BY `entities_id`, `name`\";\n-      $result = $DB->query($query);\n-\n-      echo \"<select name='contacts_id'>\";\n-      echo \"<option value='0'>\".Dropdown::EMPTY_VALUE.\"</option>\";\n-\n-      if ($DB->numrows($result)) {\n-         $prev = -1;\n-         while ($data = $DB->fetchArray($result)) {\n-            if ($data[\"entities_id\"] != $prev) {\n-               if ($prev >= 0) {\n-                  echo \"</optgroup>\";\n-               }\n-               $prev = $data[\"entities_id\"];\n-               echo \"<optgroup label=\\\"\".Dropdown::getDropdownName(\"glpi_entities\", $prev).\"\\\">\";\n-            }\n-            $output = formatUserName($data[\"id\"], \"\", $data[\"name\"], $data[\"firstname\"]);\n-            if ($_SESSION[\"glpiis_ids_visible\"] || empty($output)) {\n-               $output .= \" (\".$data[\"id\"].\")\";\n-            }\n-            echo \"<option value='\".$data[\"id\"].\"' \".($value == $data[\"id\"] ? \" selected \" : \"\")\n-              .\" title=\\\"\".Html::cleanInputText($output).\"\\\">\"\n-              .substr($output, 0, $CFG_GLPI[\"dropdown_chars_limit\"]).\"</option>\";\n-         }\n-         if ($prev >= 0) {\n-            echo \"</optgroup>\";\n-         }\n-      }\n-      echo \"</select>\";\n-   }\n-\n-\n    public function addStatusLog($orders_id, $status, $comments = '') {\n       $changes = Dropdown::getDropdownName(\"glpi_plugin_order_orderstates\", $status);\n \n@@ -1530,15 +1433,6 @@ public function addHistory($type, $old_value, $new_value, $ID) {\n    }\n \n \n-   public function needValidation($ID) {\n-      if ($ID > 0 && $this->getFromDB($ID)) {\n-         return $this->isDraft() || $this->isWaitingForApproval();\n-      } else {\n-         return false;\n-      }\n-   }\n-\n-\n    public function deleteAllLinkWithItem($orders_id) {\n       $detail  = new PluginOrderOrder_Item();\n       $detail->deleteByCriteria([\n@@ -1549,7 +1443,6 @@ public function deleteAllLinkWithItem($orders_id) {\n \n    public function checkIfDetailExists($orders_id, $only_delivered = false) {\n       if ($orders_id) {\n-         $detail = new PluginOrderOrder_Item();\n          $where  = ['plugin_order_orders_id' => $orders_id];\n          if ($only_delivered) {\n             $where['states_id'] = ['>', 0];\n@@ -1793,7 +1686,6 @@ public function generateOrder($params) {\n             $listeArticles = [];\n \n             $result = $PluginOrderOrder_Item->queryDetail($ID, 'glpi_plugin_order_references');\n-            $num    = $DB->numrows($result);\n \n             while ($data = $DB->fetchArray($result)) {\n                $quantity = $PluginOrderOrder_Item->getTotalQuantityByRefAndDiscount($ID, $data[\"id\"],\n@@ -1818,7 +1710,6 @@ public function generateOrder($params) {\n             }\n \n             $result = $PluginOrderOrder_Item->queryDetail($ID, 'glpi_plugin_order_referencefrees');\n-            $num    = $DB->numrows($result);\n \n             while ($data = $DB->fetchArray($result)) {\n                $quantity = $PluginOrderOrder_Item->getTotalQuantityByRefAndDiscount($ID, $data[\"id\"],\n@@ -1971,7 +1862,7 @@ public function transfer($ID, $entity) {\n       $result = $DB->query($query);\n       if ($DB->numrows($result)) {\n          while ($detail = $DB->fetchArray($result)) {\n-            $ref = $reference->transfer($detail[\"plugin_order_references_id\"], $entity);\n+            $reference->transfer($detail[\"plugin_order_references_id\"], $entity);\n          }\n       }\n    }\n@@ -2219,7 +2110,6 @@ public static function cronComputeLateOrders($task) {\n       }\n       $task->addVolume($nblate);\n \n-      $cron_status = 1;\n       if ($CFG_GLPI[\"use_notifications\"]) {\n          $message = __(\"Order is late\", \"order\");\n          $alert   = new Alert();\n@@ -2336,13 +2226,6 @@ public static function addDocumentCategory(Document $document) {\n    }\n \n \n-   /**\n-    * Get the standard massive actions which are forbidden\n-    *\n-    * @since version 0.84\n-    *\n-    * @return an array of massive actions\n-    **/\n    public function getForbiddenStandardMassiveAction() {\n \n       $forbidden = parent::getForbiddenStandardMassiveAction();\n@@ -2357,8 +2240,6 @@ public function getForbiddenStandardMassiveAction() {\n     * @see CommonDBTM::showMassiveActionsSubForm()\n     **/\n    static function showMassiveActionsSubForm(MassiveAction $ma) {\n-      global $UNINSTALL_TYPES;\n-\n       switch ($ma->getAction()) {\n          case 'transfert':\n             Entity::dropdown();\n@@ -2392,8 +2273,6 @@ function getSpecificMassiveActions($checkitem = null) {\n     * @see CommonDBTM::processMassiveActionsForOneItemtype()\n     **/\n    static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item, array $ids) {\n-      global $CFG_GLPI;\n-\n       switch ($ma->getAction()) {\n          case \"transfert\":\n             $input = $ma->getInput();\n@@ -2607,7 +2486,6 @@ public static function install(Migration $migration) {\n             ];\n             foreach (getAllDataFromTable(\"glpi_plugin_order_budgets\") as $data) {\n                $tmp    = [];\n-               $id     = false;\n                foreach ($matchings as $old => $new) {\n                   if (!is_null($data[$old])) {\n                      $tmp[$new] = $data[$old];\n@@ -2619,11 +2497,10 @@ public static function install(Migration $migration) {\n                //Budget already exists in the core: update it\n                if ($budget->getFromDB($data['budgets_id'])) {\n                   $budget->update($tmp);\n-                  $id = $tmp['id'];\n                } else {\n                   //Budget doesn't exists in the core: create it\n                   unset($tmp['id']);\n-                  $id = $budget->add($tmp);\n+                  $budget->add($tmp);\n                }\n             }\n "
        },
        {
          "filename": "inc/order_item.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 29,
          "patch": "@@ -294,17 +294,6 @@ public function getPricesATI($priceHT, $taxes) {\n    }\n \n \n-   public function checkIFReferenceExistsInOrder($orders_id, $ref_id) {\n-      return (countElementsInTable(\n-         $this->getTable(),\n-         [\n-            'plugin_order_orders_id' => $orders_id,\n-            'plugin_order_references_id' => $ref_id,\n-         ]\n-      ));\n-   }\n-\n-\n    public function addDetails($ref_id, $itemtype, $orders_id, $quantity, $price, $discounted_price, $taxes_id, $analytic_nature_id) {\n \n       $order = new PluginOrderOrder();\n@@ -1052,7 +1041,6 @@ public function getItems($rand, $data_ref, $plugin_order_orders_id, $numref, $ca\n          $query .= \" ORDER BY `$table_ref`.`name` \";\n \n          $result = $DB->query($query);\n-         $num    = $DB->numrows($result);\n \n          // Initialize for detail_hideForm javascript function\n          $hideForm = \"\";\n@@ -1231,18 +1219,6 @@ public function getTotalQuantityByRefAndDiscount($orders_id, $references_id, $pr\n    }\n \n \n-   public function getTotalQuantityByRef($orders_id, $references_id) {\n-      global $DB;\n-\n-      $query = \"SELECT COUNT(*) AS quantity\n-                FROM `\".self::getTable().\"`\n-                WHERE `plugin_order_orders_id` = '$orders_id'\n-                   AND `plugin_order_references_id` = '$references_id' \";\n-      $result = $DB->query($query);\n-      return ($DB->result($result, 0, 'quantity'));\n-   }\n-\n-\n    public function getDeliveredQuantity($orders_id, $references_id, $price_taxfree, $discount) {\n       return countElementsInTable(\n          self::getTable(),\n@@ -1718,8 +1694,6 @@ public function updateQuantity($post) {\n    }\n \n    public function updateAnalyticNature($post) {\n-      global $DB;\n-\n       $this->getFromDB($post['item_id']);\n \n       $input = $this->fields;\n@@ -1728,8 +1702,6 @@ public function updateAnalyticNature($post) {\n    }\n \n    public function updatePrice_taxfree($post) {\n-      global $DB;\n-\n       $this->getFromDB($post['item_id']);\n \n       $input = $this->fields;\n@@ -1862,7 +1834,7 @@ public static function install(Migration $migration) {\n             $query  = \"UPDATE `glpi_plugin_order_orders_items`\n                        SET `plugin_order_ordertaxes_id` = '\".$data[\"plugin_order_ordertaxes_id\"].\"'\n                        WHERE `plugin_order_orders_id` = '\".$data[\"id\"].\"'\";\n-            $result = $DB->query($query) or die($DB->error());\n+            $DB->query($query) or die($DB->error());\n          }\n           //1.5.0\n          $migration->addField($table, \"entities_id\", \"INT {$default_key_sign} NOT NULL DEFAULT '0'\");"
        },
        {
          "filename": "inc/order_supplier.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 14,
          "patch": "@@ -278,20 +278,6 @@ public static function showOrderSupplierInfos($ID) {\n    }\n \n \n-   public function checkIfSupplierInfosExists($plugin_order_orders_id) {\n-\n-      if ($plugin_order_orders_id) {\n-         $devices = getAllDataFromTable(self::getTable(),\n-                                         ['plugin_order_orders_id' => $plugin_order_orders_id]);\n-         if (!empty($devices)) {\n-            return true;\n-         } else {\n-            return false;\n-         }\n-      }\n-   }\n-\n-\n    public static function showDeliveries($suppliers_id) {\n       global $DB;\n "
        },
        {
          "filename": "inc/orderinjection.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 9,
          "patch": "@@ -61,15 +61,6 @@ public function connectedTo() {\n       return [];\n    }\n \n-\n-   /**\n-    * Standard method to add an object into glpi\n-    *\n-    * @param values fields to add into glpi\n-    * @param options options used during creation\n-    * @return an array of IDs of newly created objects : for example array(Computer=>1, Networkport=>10)\n-    *\n-   **/\n    public function addOrUpdateObject($values = [], $options = []) {\n       $lib = new PluginDatainjectionCommonInjectionLib($this, $values, $options);\n       $lib->processAddOrUpdate();"
        },
        {
          "filename": "inc/preference.class.php",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -85,7 +85,7 @@ public static function checkPreferenceTemplateValue($users_id) {\n     *\n     * Display a dropdown of all ODT template files available\n     * @since 1.5.3\n-    * @param $value default value\n+    * @param $value\n     */\n    public static function dropdownFileTemplates($value = '') {\n       return self::dropdownListFiles('template', PLUGIN_ORDER_TEMPLATE_EXTENSION,\n@@ -97,7 +97,7 @@ public static function dropdownFileTemplates($value = '') {\n     *\n     * Display a dropdown of all PNG signatures files available\n     * @since 1.5.3\n-    * @param $value default value\n+    * @param $value\n     */\n    public static function dropdownFileSignatures($value = '', $empy_value = true) {\n       return self::dropdownListFiles('sign', PLUGIN_ORDER_SIGNATURE_EXTENSION,\n@@ -110,9 +110,9 @@ public static function dropdownFileSignatures($value = '', $empy_value = true) {\n     * Display a dropdown which contains all files of a certain type in a directory\n     * @since 1.5.3\n     * @param $name dropdown name\n-    * @param $extension list files of this extension only\n+    * @param array $extension list files of this extension only\n     * @param $directory directory in which to look for files\n-    * @param $value default value\n+    * @param $value\n     */\n    public static function dropdownListFiles($name, $extension, $directory, $value = '') {\n       $files  = self::getFiles($directory, $extension);\n@@ -187,7 +187,6 @@ public function showForm($ID, array $options = []) {\n \n \n    public static function getFiles($directory, $ext) {\n-      $array_dir  = [];\n       $array_file = [];\n \n       if (is_dir($directory)) {\n@@ -210,9 +209,6 @@ public static function getFiles($directory, $ext) {\n                      } else {\n                         $array_file[] = [$filename, $filedate, $extension];\n                      }\n-\n-                  } else if ($filetype == \"dir\") {\n-                     $array_dir[] = $filename;\n                   }\n                }\n             }"
        },
        {
          "filename": "inc/reception.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 26,
          "patch": "@@ -126,7 +126,7 @@ public function deleteDelivery($detailID) {\n \n       if ($detail->fields[\"itemtype\"] == 'SoftwareLicense') {\n \n-         $result = $PluginOrderOrder_Item->queryRef($_POST[\"plugin_order_orders_id\"],\n+         $result = $detail->queryRef($_POST[\"plugin_order_orders_id\"],\n                                                     $detail->fields[\"plugin_order_references_id\"],\n                                                     $detail->fields[\"price_taxfree\"],\n                                                     $detail->fields[\"discount\"],\n@@ -544,7 +544,6 @@ function getForbiddenStandardMassiveAction() {\n \n \n    function getSpecificMassiveActions($checkitem = null) {\n-      $isadmin = static::canUpdate();\n       $actions = parent::getSpecificMassiveActions($checkitem);\n \n       //remove native transfer action\n@@ -665,29 +664,6 @@ public function showReceptionForm($params = []) {\n       }\n    }\n \n-\n-   public function dropdownReceptionActions($itemtype, $plugin_order_references_id, $plugin_order_orders_id) {\n-      global $CFG_GLPI;\n-\n-      $rand = mt_rand();\n-\n-      echo \"<select name='receptionActions$rand' id='receptionActions$rand'>\";\n-      echo \"<option value='0' selected>\".Dropdown::EMPTY_VALUE.\"</option>\";\n-      echo \"<option value='reception'>\".__(\"Take item delivery\", \"order\").\"</option>\";\n-      echo \"</select>\";\n-      $params = [\n-         'action'                     => '__VALUE__',\n-         'itemtype'                   => $itemtype,\n-         'plugin_order_references_id' => $plugin_order_references_id,\n-         'plugin_order_orders_id'     => $plugin_order_orders_id,\n-      ];\n-      Ajax::updateItemOnSelectEvent(\"receptionActions$rand\", \"show_receptionActions$rand\",\n-                                    Plugin::getWebDir('order').\"/ajax/receptionactions.php\",\n-                                    $params);\n-      echo \"<span id='show_receptionActions$rand'>&nbsp;</span>\";\n-   }\n-\n-\n    public function getReceptionStatus($ID) {\n       $detail = new PluginOrderOrder_Item();\n       $detail->getFromDB($ID);\n@@ -964,7 +940,7 @@ public function post_purgeItem() {\n    *\n    * @param $options\n    *\n-   * return nothing\n+   * @return void\n    */\n    public static function generateAsset($options = []) {\n       // No asset should be generated for PluginOrderOther and PluginOrderReferenceFree items."
        },
        {
          "filename": "inc/reference.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 107,
          "patch": "@@ -279,7 +279,7 @@ static function getSpecificValueToSelect($field, $name = '', $values = '', array\n          case 'itemtype':\n             $types    = PluginOrderOrder_Item::getClasses();\n             $itemtype = [];\n-            foreach ($types as $key => $type) {\n+            foreach ($types as $type) {\n                $item            = new $type();\n                $itemtype[$type] = $item->getTypeName();\n             }\n@@ -850,101 +850,6 @@ public function copy($ID) {\n       return true;\n    }\n \n-\n-   /**\n-    * Display entities of the loaded profile\n-    *\n-   * @param $myname select name\n-    * @param $target target for entity change action\n-    */\n-   public static function showSelector($target) {\n-      $rand = mt_rand();\n-      Plugin::loadLang('order');\n-      echo \"<div class='center' ><span class='b'>\".__(\"Select the wanted item type\", \"order\")\n-        .\"</span><br>\";\n-      echo \"<a style='font-size:14px;' href='\".$target.\"?reset=reset' title=\\\"\"\n-        .__(\"Show all\").\"\\\">\".str_replace(\" \", \"&nbsp;\", __(\"Show all\")).\"</a></div>\";\n-\n-      echo \"<div class='left' style='width:100%'>\";\n-\n-      echo \"<script type='javascript'>\";\n-      echo \"var Tree_Category_Loader$rand = new Ext.tree.TreeLoader({\n-         dataUrl:'\".Plugin::getWebDir('order').\"/ajax/referencetreetypes.php'\n-      });\";\n-\n-      echo \"var Tree_Category$rand = new Ext.tree.TreePanel({\n-         collapsible      : false,\n-         animCollapse     : false,\n-         border           : false,\n-         id               : 'tree_projectcategory$rand',\n-         el               : 'tree_projectcategory$rand',\n-         autoScroll       : true,\n-         animate          : false,\n-         enableDD         : true,\n-         containerScroll  : true,\n-         height           : 320,\n-         width            : 770,\n-         loader           : Tree_Category_Loader$rand,\n-         rootVisible     : false\n-      });\";\n-\n-      // SET the root node.\n-      echo \"var Tree_Category_Root$rand = new Ext.tree.AsyncTreeNode({\n-         text     : '',\n-         draggable   : false,\n-         id    : '-1'                  // this IS the id of the startnode\n-      });\n-      Tree_Category$rand.setRootNode(Tree_Category_Root$rand);\";\n-\n-      // Render the tree.\n-      echo \"Tree_Category$rand.render();\n-            Tree_Category_Root$rand.expand();\";\n-\n-      echo \"</script>\";\n-\n-      echo \"<div id='tree_projectcategory$rand' ></div>\";\n-      echo \"</div>\";\n-   }\n-\n-\n-   public function title() {\n-      echo \"<div align='center'>\";\n-      echo self::getPerTypeJavascriptCode();\n-      echo \"<a onclick='order_window.show();' href='#modal_reference_content' title='\"\n-           .__(\"View by item type\", \"order\").\"'>\"\n-           .__(\"View by item type\", \"order\").\"</a>\";\n-      echo \"</div>\";\n-\n-   }\n-\n-\n-   public static function getPerTypeJavascriptCode() {\n-      global $CFG_GLPI;\n-\n-      $out  = \"<script type='text/javascript'>\";\n-      $out .= \"cleanhide('modal_reference_content');\";\n-      $out .= \"var order_window=new Ext.Window({\n-         layout:'fit',\n-         width:800,\n-         height:400,\n-         closeAction:'hide',\n-         modal: true,\n-         autoScroll: true,\n-         title: \\\"\".__(\"View by item type\", \"order\").\"\\\",\n-         autoLoad: '\".Plugin::getWebDir('order').\"/ajax/referencetree.php'\n-      });\";\n-      $out .= \"</script>\";\n-      return $out;\n-   }\n-\n-\n-   /**\n-    * Get the standard massive actions which are forbidden\n-    *\n-    * @since version 0.84\n-    *\n-    * @return an array of massive actions\n-    **/\n    public function getForbiddenStandardMassiveAction() {\n \n       $forbidden = parent::getForbiddenStandardMassiveAction();\n@@ -1028,17 +933,6 @@ static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBT\n       return;\n    }\n \n-\n-   /*   function getValueToSelect($field_id_or_search_options, $name = '', $values = '', $options = []) {\n-      if (isset($field_id_or_search_options['displaytype'])\n-         && $field_id_or_search_options['displaytype'] == 'reference_type') {\n-            Toolbox::logDebug($field_id_or_search_options['displaytype'],\n-                              $field_id_or_search_options, $name, $values, $options);\n-\n-      }\n-      return false;\n-   }*/\n-\n    public static function install(Migration $migration) {\n       global $DB;\n "
        },
        {
          "filename": "inc/reference_supplier.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 19,
          "patch": "@@ -247,7 +247,7 @@ public function showForm ($ID, $options = []) {\n \n \n    public function showReferenceManufacturers($ID) {\n-      global $DB, $CFG_GLPI;\n+      global $DB;\n \n       $ref = new PluginOrderReference();\n       $ref->getFromDB($ID);\n@@ -331,24 +331,6 @@ public function showReferenceManufacturers($ID) {\n    }\n \n \n-   public function getPriceByReferenceAndSupplier($plugin_order_references_id, $suppliers_id) {\n-      global $DB;\n-\n-      $table = self::getTable();\n-      $query = \"SELECT `price_taxfree`\n-                FROM `$table`\n-                WHERE `plugin_order_references_id` = '$plugin_order_references_id'\n-                AND `suppliers_id` = '$suppliers_id' \";\n-      $result = $DB->query($query);\n-\n-      if ($DB->numrows($result) > 0) {\n-         return $DB->result($result, 0, \"price_taxfree\");\n-      } else {\n-         return 0;\n-      }\n-   }\n-\n-\n    public function getReferenceCodeByReferenceAndSupplier($plugin_order_references_id, $suppliers_id) {\n       global $DB;\n "
        },
        {
          "filename": "inc/referencefree.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 21,
          "patch": "@@ -40,27 +40,6 @@ public static function getTypeName($nb = 0) {\n       return __(\"Reference free\", \"order\");\n    }\n \n-   public function addDetails($ref_id, $itemtype, $orders_id, $quantity, $price, $discounted_price, $taxes_id) {\n-      $order = new PluginOrderOrder();\n-      if ($quantity > 0 && $order->getFromDB($orders_id)) {\n-         for ($i = 0; $i < $quantity; $i++) {\n-            $input[\"plugin_order_orders_id\"]     = $orders_id;\n-            $input[\"plugin_order_ordertaxes_id\"] = $taxes_id;\n-            $input[\"itemtype\"]                   = $itemtype;\n-            $input[\"entities_id\"]                = $order->getEntityID();\n-            $input[\"is_recursive\"]               = $order->isRecursive();\n-            $input[\"price_taxfree\"]              = $price;\n-            $input[\"price_discounted\"]           = $price - ($price * ($discounted_price / 100));\n-            $input[\"states_id\"]                  = PluginOrderOrder::ORDER_DEVICE_NOT_DELIVRED;\n-\n-            $input[\"price_ati\"] = $this->getPricesATI($input[\"price_discounted\"], Dropdown::getDropdownName(\"glpi_plugin_order_ordertaxes\", $taxes_id));\n-            $input[\"discount\"]  = $discounted_price;\n-\n-            $this->add($input);\n-         }\n-      }\n-   }\n-\n    public static function install(Migration $migration) {\n       global $DB;\n "
        },
        {
          "filename": "inc/referenceinjection.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 8,
          "patch": "@@ -63,14 +63,6 @@ public function connectedTo() {\n    }\n \n \n-   /**\n-    * Standard method to add an object into glpi\n-    *\n-    * @param values fields to add into glpi\n-    * @param options options used during creation\n-    * @return an array of IDs of newly created objects : for example [Computer => 1, Networkport => 10]\n-    *\n-   **/\n    public function addOrUpdateObject($values = [], $options = []) {\n       $lib = new PluginDatainjectionCommonInjectionLib($this, $values, $options);\n       $lib->processAddOrUpdate();"
        },
        {
          "filename": "setup.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -194,7 +194,6 @@ function plugin_version_order() {\n          'glpi' => [\n             'min' => PLUGIN_ORDER_MIN_GLPI,\n             'max' => PLUGIN_ORDER_MAX_GLPI,\n-            'dev' => true, //Required to allow 9.2-dev\n          ]\n       ]\n    ];"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ba8d110851ad647350dfca405422f05ce363a3d4",
            "date": "2025-01-13T08:57:51Z",
            "author_login": "Rom1-B"
          },
          {
            "sha": "1e8d44c1920daebc5db760883e9950060a1e4f36",
            "date": "2025-01-06T07:12:08Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0a1f07fabe0fc7a892db0390da9cec36b422c22f",
            "date": "2025-01-06T07:11:01Z",
            "author_login": "cedric-anne"
          },
          {
            "sha": "44afb596638dcb4b8ed6938559f83ccde7797419",
            "date": "2024-12-01T15:48:35Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0cb43dffd47efc1e46d7a00b3ea159d6c34b2ce6",
            "date": "2024-11-07T08:15:05Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-502",
    "description": "The Order GLPI plugin allows users to manage order management within GLPI. Starting with version 1.8.0 and prior to versions 2.7.7 and 2.10.1, an authenticated user that has access to standard interface can craft an URL that can be used to execute a system command. Versions 2.7.7 and 2.10.1 contain a patch for this issue. As a workaround, delete the `ajax/dropdownContact.php` file from the plugin.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-05T18:15:08.657",
    "last_modified": "2024-11-21T07:56:22.780",
    "fix_date": "2023-02-02T11:04:37Z"
  },
  "references": [
    {
      "url": "https://github.com/pluginsGLPI/order/commit/c78e64b95e54d5e47d9835984c93049f245b579e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pluginsGLPI/order/security/advisories/GHSA-xfx2-qx2r-3wwm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/pluginsGLPI/order/commit/c78e64b95e54d5e47d9835984c93049f245b579e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pluginsGLPI/order/security/advisories/GHSA-xfx2-qx2r-3wwm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:09.055488",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "order",
    "owner": "pluginsGLPI",
    "created_at": "2015-08-07T16:29:54Z",
    "updated_at": "2025-01-13T08:57:56Z",
    "pushed_at": "2025-01-13T08:57:52Z",
    "size": 4275,
    "stars": 39,
    "forks": 46,
    "open_issues": 88,
    "watchers": 39,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 701153,
      "Twig": 2199,
      "CSS": 2196,
      "JavaScript": 1020
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T16:55:03.648074"
  }
}