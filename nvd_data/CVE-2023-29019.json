{
  "cve_id": "CVE-2023-29019",
  "github_data": {
    "repository": "fastify/fastify-passport",
    "fix_commit": "43c82c321db58ea3e375dd475de60befbfcf2a11",
    "related_commits": [
      "43c82c321db58ea3e375dd475de60befbfcf2a11",
      "43c82c321db58ea3e375dd475de60befbfcf2a11"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "43c82c321db58ea3e375dd475de60befbfcf2a11",
      "commit_date": "2023-04-20T07:41:03Z",
      "author": {
        "login": "RafaelGSS",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4m3m-ppvx-xgw9",
        "length": 95,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 86,
        "additions": 57,
        "deletions": 29
      },
      "files": [
        {
          "filename": "src/session-managers/SecureSessionManager.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -24,11 +24,19 @@ export class SecureSessionManager {\n \n   async logIn(request: FastifyRequest, user: any) {\n     const object = await this.serializeUser(user, request)\n+    // Handle sessions using @fastify/session\n+    if (request.session.regenerate) {\n+      // regenerate session to guard against session fixation\n+      await request.session.regenerate()\n+    }\n     request.session.set(this.key, object)\n   }\n \n   async logOut(request: FastifyRequest) {\n     request.session.set(this.key, undefined)\n+    if (request.session.regenerate) {\n+      await request.session.regenerate()\n+    }\n   }\n \n   getUserFromSession(request: FastifyRequest) {"
        },
        {
          "filename": "test/session-isolation.test.ts",
          "status": "modified",
          "additions": 49,
          "deletions": 29,
          "patch": "@@ -1,38 +1,44 @@\n /* eslint-disable @typescript-eslint/no-empty-function */\n import { generateTestUser, getConfiguredTestServer, TestBrowserSession } from './helpers'\n \n-const { server, fastifyPassport } = getConfiguredTestServer()\n-\n-server.get(\n-  '/protected',\n-  { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) },\n-  async () => 'hello!'\n-)\n-server.get('/my-id', { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) }, async (request) =>\n-  String((request.user as any).id)\n-)\n-server.post(\n-  '/login',\n-  { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) },\n-  async () => 'success'\n-)\n-\n-server.post('/force-login', async (request, reply) => {\n-  await request.logIn(generateTestUser())\n-  void reply.send('logged in')\n-})\n-\n-server.post(\n-  '/logout',\n-  { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) },\n-  async (request, reply) => {\n-    await request.logout()\n-    void reply.send('logged out')\n-  }\n-)\n+function createServer() {\n+  const { server, fastifyPassport } = getConfiguredTestServer()\n+\n+  server.get(\n+    '/protected',\n+    { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) },\n+    async () => 'hello!'\n+  )\n+  server.get('/my-id', { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) }, async (request) =>\n+    String((request.user as any).id)\n+  )\n+  server.post(\n+    '/login',\n+    { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) },\n+    async () => 'success'\n+  )\n+\n+  server.post('/force-login', async (request, reply) => {\n+    await request.logIn(generateTestUser())\n+    void reply.send('logged in')\n+  })\n+\n+  server.post(\n+    '/logout',\n+    { preValidation: fastifyPassport.authenticate('test', { authInfo: false }) },\n+    async (request, reply) => {\n+      await request.logout()\n+      void reply.send('logged out')\n+    }\n+  )\n+  return server\n+}\n \n const suite = (sessionPluginName) => {\n+  process.env.SESSION_PLUGIN = sessionPluginName\n+  const server = createServer()\n   describe(`${sessionPluginName} tests`, () => {\n+    const sessionOnlyTest = sessionPluginName === '@fastify/session' ? test : test.skip\n     describe('session isolation', () => {\n       let userA, userB, userC\n \n@@ -175,8 +181,22 @@ const suite = (sessionPluginName) => {\n         // expect each returned ID to be unique\n         expect(Array.from(new Set(ids)).sort()).toEqual(ids.sort())\n       })\n+\n+      sessionOnlyTest('should regenerate session on login', async () => {\n+        expect(userA.cookies['sessionId']).toBeUndefined()\n+        await userA.inject({ method: 'GET', url: '/protected' })\n+        expect(userA.cookies['sessionId']).not.toBeUndefined()\n+        const prevSessionId = userA.cookies.sessionId\n+        await userA.inject({\n+          method: 'POST',\n+          url: '/login',\n+          payload: { login: 'test', password: 'test' },\n+        })\n+        expect(userA.cookies.sessionId).not.toBe(prevSessionId)\n+      })\n     })\n   })\n+  delete process.env.SESSION_PLUGIN\n }\n \n suite('@fastify/session')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c384313c0488a88a55e08bc83b4b29e06f01000a",
            "date": "2025-01-22T00:30:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2acc2c8dbce61b7f710af1cf2a5c41fb84906ab8",
            "date": "2025-01-15T16:24:55Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "79d3723ebcb2f2b161d4d590bd3c4048b6908d96",
            "date": "2025-01-15T15:31:40Z",
            "author_login": "Fdawgs"
          },
          {
            "sha": "c9ba9518b17f8cc989c5ff4f3b0ef7b565f66c40",
            "date": "2025-01-13T05:55:31Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e0c948bc17f4ecd27bc37414037cf04fa5891d8b",
            "date": "2025-01-13T05:55:20Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-384",
    "description": "@fastify/passport is a port of passport authentication library for the Fastify ecosystem. Applications using `@fastify/passport` in affected versions for user authentication, in combination with `@fastify/session` as the underlying session management mechanism, are vulnerable to session fixation attacks from network and same-site attackers. fastify applications rely on the `@fastify/passport` library for user authentication. The login and user validation are performed by the `authenticate` function. When executing this function, the `sessionId` is preserved between the pre-login and the authenticated session. Network and same-site attackers can hijack the victim's session by tossing a valid `sessionId` cookie in the victim's browser and waiting for the victim to log in on the website. As a solution, newer versions of `@fastify/passport` regenerate `sessionId` upon login, preventing the attacker-controlled pre-session cookie from being upgraded to an authenticated session. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-21T23:15:20.197",
    "last_modified": "2024-11-21T07:56:24.387",
    "fix_date": "2023-04-20T07:41:03Z"
  },
  "references": [
    {
      "url": "https://github.com/fastify/fastify-passport/commit/43c82c321db58ea3e375dd475de60befbfcf2a11",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify-passport/security/advisories/GHSA-4m3m-ppvx-xgw9",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://owasp.org/www-community/attacks/Session_fixation",
      "source": "security-advisories@github.com",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify-passport/commit/43c82c321db58ea3e375dd475de60befbfcf2a11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify-passport/security/advisories/GHSA-4m3m-ppvx-xgw9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://owasp.org/www-community/attacks/Session_fixation",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Technical Description"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.823425",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "fastify-passport",
    "owner": "fastify",
    "created_at": "2019-02-27T13:47:47Z",
    "updated_at": "2025-01-22T00:30:38Z",
    "pushed_at": "2025-01-22T06:06:39Z",
    "size": 3608,
    "stars": 268,
    "forks": 47,
    "open_issues": 10,
    "watchers": 268,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 128835,
      "JavaScript": 344
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:41:24.787711"
  }
}