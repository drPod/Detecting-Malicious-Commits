{
  "cve_id": "CVE-2023-29206",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "fe65bc35d5672dd2505b7ac4ec42aec57d500fbb",
    "related_commits": [
      "fe65bc35d5672dd2505b7ac4ec42aec57d500fbb",
      "fe65bc35d5672dd2505b7ac4ec42aec57d500fbb"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/fe65bc35d5672dd2505b7ac4ec42aec57d500fbb.patch",
    "fix_commit_details": {
      "sha": "fe65bc35d5672dd2505b7ac4ec42aec57d500fbb",
      "commit_date": "2022-10-10T15:03:09Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": {
          "total_commits": 1932,
          "average_weekly_commits": 2.0251572327044025,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 283
        }
      },
      "commit_message": {
        "title": "XWIKI-9119: Refactoring of SkinExtensionPlugin",
        "length": 70,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 590,
        "additions": 553,
        "deletions": 37
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -31,7 +31,7 @@\n   <name>XWiki Platform - Skin - Skin Extensions</name>\n   <description>XWiki Platform - Skin - Skin Extensions</description>\n   <properties>\n-    <xwiki.jacoco.instructionRatio>0.18</xwiki.jacoco.instructionRatio>\n+    <xwiki.jacoco.instructionRatio>0.25</xwiki.jacoco.instructionRatio>\n   </properties>\n   <dependencies>\n     <!-- Build tools -->"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/main/java/com/xpn/xwiki/plugin/skinx/AbstractDocumentSkinExtensionPlugin.java",
          "status": "modified",
          "additions": 82,
          "deletions": 23,
          "patch": "@@ -29,6 +29,7 @@\n import java.util.Set;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.xwiki.bridge.event.DocumentCreatedEvent;\n@@ -37,6 +38,7 @@\n import org.xwiki.bridge.event.WikiDeletedEvent;\n import org.xwiki.model.EntityType;\n import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.model.reference.DocumentReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n import org.xwiki.observation.EventListener;\n@@ -85,6 +87,10 @@ public abstract class AbstractDocumentSkinExtensionPlugin extends AbstractSkinEx\n      */\n     private final List<Event> events = new ArrayList<>(3);\n \n+    private AuthorizationManager authorizationManager;\n+    private DocumentReferenceResolver<String> stringDocumentReferenceResolver;\n+    private EntityReferenceResolver<String> currentEntityReferenceResolver;\n+\n     /**\n      * XWiki plugin constructor.\n      * \n@@ -174,7 +180,7 @@ public void virtualInit(XWikiContext context)\n     @Override\n     public Set<String> getAlwaysUsedExtensions(XWikiContext context)\n     {\n-        EntityReferenceSerializer<String> serializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n+        EntityReferenceSerializer<String> serializer = getDefaultEntityReferenceSerializer();\n         Set<DocumentReference> references = getAlwaysUsedExtensions();\n         Set<String> names = new HashSet<>(references.size());\n         for (DocumentReference reference : references) {\n@@ -214,7 +220,7 @@ public Set<DocumentReference> getAlwaysUsedExtensions()\n                         XWikiDocument doc = context.getWiki().getDocument(extension, context);\n                         // Only add the extension as being \"always used\" if the page holding it has been saved with\n                         // programming rights.\n-                        if (Utils.getComponent(AuthorizationManager.class).hasAccess(Right.PROGRAM,\n+                        if (getAuthorizationManager().hasAccess(Right.PROGRAM,\n                             doc.getAuthorReference(), doc.getDocumentReference())) {\n                             extensions.add(extension);\n                         }\n@@ -236,36 +242,83 @@ public Set<DocumentReference> getAlwaysUsedExtensions()\n     public boolean hasPageExtensions(XWikiContext context)\n     {\n         XWikiDocument doc = context.getDoc();\n-        if (doc != null) {\n-            List<BaseObject> objects = doc.getObjects(getExtensionClassName());\n-            if (objects != null) {\n-                for (BaseObject obj : objects) {\n-                    if (obj == null) {\n-                        continue;\n-                    }\n-                    if (obj.getStringValue(USE_FIELDNAME).equals(\"currentPage\")) {\n-                        return true;\n-                    }\n+        boolean result = false;\n+        if (doc != null && this.hasCurrentPageExtensionObjects(doc)) {\n+            if (getAuthorizationManager().hasAccess(Right.SCRIPT, doc.getAuthorReference(),\n+                doc.getDocumentReference())) {\n+                result = true;\n+            } else {\n+                displayScriptRightLog(doc.getDocumentReference());\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private void displayScriptRightLog(Object documentReference)\n+    {\n+        LOGGER.warn(\"Extensions present in [{}] ignored because of lack of script right from the author.\",\n+            documentReference);\n+    }\n+\n+    private boolean hasCurrentPageExtensionObjects(XWikiDocument doc)\n+    {\n+        List<BaseObject> objects = doc.getObjects(getExtensionClassName());\n+        if (objects != null) {\n+            for (BaseObject obj : objects) {\n+                if (obj == null) {\n+                    continue;\n+                }\n+                if (StringUtils.equals(obj.getStringValue(USE_FIELDNAME), \"currentPage\")) {\n+                    return true;\n                 }\n             }\n         }\n         return false;\n     }\n \n     @Override\n-    public void use(String resource, XWikiContext context)\n+    public void use(String resource, Map<String, Object> parameters, XWikiContext context)\n     {\n         String canonicalResource = getCanonicalDocumentName(resource);\n \n-        super.use(canonicalResource, context);\n+        if (this.canResourceBeUsed(canonicalResource, context)) {\n+            super.use(canonicalResource, parameters, context);\n+        } else {\n+            displayScriptRightLog(canonicalResource);\n+        }\n     }\n \n-    @Override\n-    public void use(String resource, Map<String, Object> parameters, XWikiContext context)\n+    private DocumentReferenceResolver<String> getDocumentReferenceResolver()\n     {\n-        String canonicalResource = getCanonicalDocumentName(resource);\n+        if (this.stringDocumentReferenceResolver == null) {\n+            this.stringDocumentReferenceResolver = Utils.getComponent(DocumentReferenceResolver.TYPE_STRING);\n+        }\n+        return this.stringDocumentReferenceResolver;\n+    }\n \n-        super.use(canonicalResource, parameters, context);\n+    private AuthorizationManager getAuthorizationManager()\n+    {\n+        if (this.authorizationManager == null) {\n+            this.authorizationManager = Utils.getComponent(AuthorizationManager.class);\n+        }\n+        return this.authorizationManager;\n+    }\n+\n+    private boolean canResourceBeUsed(String resource, XWikiContext context)\n+    {\n+        DocumentReferenceResolver<String> documentReferenceResolver = getDocumentReferenceResolver();\n+        DocumentReference documentReference = documentReferenceResolver.resolve(resource);\n+\n+        try {\n+            XWikiDocument document = context.getWiki().getDocument(documentReference, context);\n+            DocumentReference authorReference = document.getAuthorReference();\n+            return getAuthorizationManager().hasAccess(Right.SCRIPT, authorReference, documentReference);\n+        } catch (XWikiException e) {\n+            LOGGER.error(\"Error while loading [{}] for checking script right: [{}]\", documentReference,\n+                ExceptionUtils.getRootCauseMessage(e));\n+            LOGGER.debug(\"Original error stack trace: \", e);\n+            return false;\n+        }\n     }\n \n     /**\n@@ -332,7 +385,7 @@ private void onDocumentEvent(XWikiDocument document)\n         if (document.getObject(getExtensionClassName()) != null) {\n             // new or already existing object\n             if (document.getObject(getExtensionClassName(), USE_FIELDNAME, \"always\", false) != null) {\n-                if (Utils.getComponent(AuthorizationManager.class).hasAccess(Right.PROGRAM,\n+                if (getAuthorizationManager().hasAccess(Right.PROGRAM,\n                     document.getAuthorReference(), document.getDocumentReference())) {\n                     getAlwaysUsedExtensions().add(document.getDocumentReference());\n \n@@ -355,6 +408,14 @@ private void onDocumentEvent(XWikiDocument document)\n         }\n     }\n \n+    private EntityReferenceResolver<String> getCurrentEntityReferenceResolver()\n+    {\n+        if (this.currentEntityReferenceResolver == null) {\n+            this.currentEntityReferenceResolver = Utils.getComponent(EntityReferenceResolver.TYPE_STRING, \"current\");\n+        }\n+        return this.currentEntityReferenceResolver;\n+    }\n+\n     /**\n      * Get the canonical serialization of a document name, in the {@code wiki:Space.Document} format.\n      *\n@@ -363,10 +424,8 @@ private void onDocumentEvent(XWikiDocument document)\n      */\n     private String getCanonicalDocumentName(String documentName)\n     {\n-        @SuppressWarnings(\"unchecked\")\n-        EntityReferenceResolver<String> resolver = Utils.getComponent(EntityReferenceResolver.TYPE_STRING, \"current\");\n-        @SuppressWarnings(\"unchecked\")\n-        EntityReferenceSerializer<String> serializer = Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n+        EntityReferenceResolver<String> resolver = getCurrentEntityReferenceResolver();\n+        EntityReferenceSerializer<String> serializer = getDefaultEntityReferenceSerializer();\n         return serializer.serialize(resolver.resolve(documentName, EntityType.DOCUMENT));\n     }\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/main/java/com/xpn/xwiki/plugin/skinx/AbstractSkinExtensionPlugin.java",
          "status": "modified",
          "additions": 9,
          "deletions": 10,
          "patch": "@@ -229,14 +229,7 @@ private void useResource(String resource, XWikiContext context)\n      */\n     public void use(String resource, XWikiContext context)\n     {\n-        useResource(resource, context);\n-\n-        // In case a previous call added some parameters, remove them, since the last call for a resource always\n-        // discards previous ones.\n-        getParametersMap(context).remove(resource);\n-\n-        // Register the use of the resource in case the current execution is an asynchronous renderer\n-        getSkinExtensionAsync().use(getName(), resource, null);\n+        use(resource, null, context);\n     }\n \n     /**\n@@ -256,8 +249,14 @@ public void use(String resource, Map<String, Object> parameters, XWikiContext co\n     {\n         useResource(resource, context);\n \n-        // Associate parameters to the resource\n-        getParametersMap(context).put(resource, parameters);\n+        // In case a previous call added some parameters, remove them, since the last call for a resource always\n+        // discards previous ones.\n+        if (parameters == null) {\n+            getParametersMap(context).remove(resource);\n+        } else {\n+            // Associate parameters to the resource\n+            getParametersMap(context).put(resource, parameters);\n+        }\n \n         getSkinExtensionAsync().use(getName(), resource, parameters);\n     }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/test/java/com/xpn/xwiki/plugin/skinx/CssSkinExtensionPluginTest.java",
          "status": "modified",
          "additions": 181,
          "deletions": 3,
          "patch": "@@ -22,28 +22,41 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Vector;\n \n import javax.inject.Named;\n import javax.inject.Provider;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.xwiki.model.EntityType;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n+import org.xwiki.model.reference.EntityReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n import org.xwiki.model.reference.SpaceReference;\n import org.xwiki.model.reference.WikiReference;\n import org.xwiki.observation.ObservationManager;\n import org.xwiki.security.authorization.AuthorizationManager;\n import org.xwiki.security.authorization.ContextualAuthorizationManager;\n import org.xwiki.security.authorization.Right;\n+import org.xwiki.skinx.internal.async.SkinExtensionAsync;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n import org.xwiki.test.junit5.mockito.MockComponent;\n \n import com.xpn.xwiki.XWiki;\n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n import com.xpn.xwiki.objects.classes.BaseClass;\n import com.xpn.xwiki.store.XWikiStoreInterface;\n import com.xpn.xwiki.test.MockitoOldcore;\n@@ -53,7 +66,13 @@\n import com.xpn.xwiki.web.XWikiURLFactory;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n \n /**\n@@ -63,7 +82,7 @@\n  * @since 13.10RC1\n  */\n @OldcoreTest\n-public class CssSkinExtensionPluginTest\n+class CssSkinExtensionPluginTest\n {\n     @InjectMockitoOldcore\n     private MockitoOldcore mockitoOldcore;\n@@ -83,18 +102,31 @@ public class CssSkinExtensionPluginTest\n \n     @MockComponent\n     @Named(\"currentmixed\")\n-    private DocumentReferenceResolver<String> documentReferenceResolver;\n+    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n \n     @MockComponent\n     @Named(\"current\")\n     private DocumentReferenceResolver<String> currentDocumentReferenceResolver;\n \n+    @MockComponent\n+    private DocumentReferenceResolver<String> documentReferenceResolver;\n+\n+    @MockComponent\n+    @Named(\"current\")\n+    private EntityReferenceResolver<String> currentEntityReferenceResolver;\n+\n     @MockComponent\n     private AuthorizationManager authorizationManager;\n \n     @MockComponent\n     private ContextualAuthorizationManager contextualAuthorizationManager;\n \n+    @MockComponent\n+    private SkinExtensionAsync skinExtensionAsync;\n+\n+    @RegisterExtension\n+    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n+\n     private XWikiContext context;\n     private BaseClass pluginClass;\n     private CssSkinExtensionPlugin skinExtensionPlugin;\n@@ -112,7 +144,7 @@ void setup() throws XWikiException\n         XWikiRequest xWikiRequest = mock(XWikiRequest.class);\n         context.setRequest(xWikiRequest);\n         XWiki wiki = mockitoOldcore.getSpyXWiki();\n-        when(this.documentReferenceResolver.resolve(CssSkinExtensionPlugin.SSX_CLASS_NAME)).thenReturn(\n+        when(this.currentMixedDocumentReferenceResolver.resolve(CssSkinExtensionPlugin.SSX_CLASS_NAME)).thenReturn(\n             new DocumentReference(CssSkinExtensionPlugin.SSX_CLASS_REFERENCE, new WikiReference(\"xwiki\")));\n         when(wiki.getDocument(CssSkinExtensionPlugin.SSX_CLASS_NAME, context)).thenReturn(classDoc);\n         when(classDoc.getXClass()).thenReturn(this.pluginClass);\n@@ -206,4 +238,150 @@ void endParsingAlwaysUsedExtensions() throws XWikiException, MalformedURLExcepti\n         String obtainedContent = this.skinExtensionPlugin.endParsing(content, this.context);\n         assertEquals(expectedContent, obtainedContent);\n     }\n+\n+    @Test\n+    void use() throws XWikiException\n+    {\n+        String resource = \"MySpace.MySSXPage\";\n+        Map<String, Object> parameters = Collections.singletonMap(\"fooParam\", \"barValue\");\n+\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MySpace\", \"MySSXPage\");\n+        when(this.currentEntityReferenceResolver.resolve(resource, EntityType.DOCUMENT)).thenReturn(documentReference);\n+        when(this.entityReferenceSerializer.serialize(documentReference)).thenReturn(resource);\n+\n+        when(this.documentReferenceResolver.resolve(resource)).thenReturn(documentReference);\n+        XWikiDocument document = mock(XWikiDocument.class);\n+        when(this.mockitoOldcore.getSpyXWiki().getDocument(documentReference, context)).thenReturn(document);\n+\n+        DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n+        when(document.getAuthorReference()).thenReturn(userReference);\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference, documentReference)).thenReturn(true);\n+\n+        this.skinExtensionPlugin.use(resource, parameters, context);\n+        String className = CssSkinExtensionPlugin.class.getCanonicalName();\n+        Set<String> resources = (Set<String>) context.get(className);\n+\n+        assertEquals(Collections.singleton(resource), resources);\n+\n+        Map<String, Map<String, Object>> parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        Map<String, Map<String, Object>> expectedParameters = new HashMap<>();\n+        expectedParameters.put(resource, parameters);\n+\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, userReference, documentReference);\n+        verify(this.skinExtensionAsync).use(\"ssx\", resource, parameters);\n+\n+        String resource2 = \"MySpace.MyOtherSSXPage\";\n+        Map<String, Object> parameters2 = null;\n+        DocumentReference documentReference2 = new DocumentReference(\"xwiki\", \"MySpace\", \"MyOtherSSXPage\");\n+\n+        when(this.currentEntityReferenceResolver.resolve(resource2, EntityType.DOCUMENT))\n+            .thenReturn(documentReference2);\n+        when(this.entityReferenceSerializer.serialize(documentReference2)).thenReturn(resource2);\n+\n+        when(this.documentReferenceResolver.resolve(resource2)).thenReturn(documentReference2);\n+        XWikiDocument document2 = mock(XWikiDocument.class);\n+        when(this.mockitoOldcore.getSpyXWiki().getDocument(documentReference2, context)).thenReturn(document2);\n+\n+        DocumentReference userReference2 = new DocumentReference(\"xwiki\", \"XWiki\", \"Bar\");\n+        when(document2.getAuthorReference()).thenReturn(userReference2);\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference2, documentReference2)).thenReturn(false);\n+\n+        this.skinExtensionPlugin.use(resource2, parameters2, context);\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(Collections.singleton(resource), resources);\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, userReference2, documentReference2);\n+        verify(this.skinExtensionAsync, never()).use(\"ssx\", resource2, parameters2);\n+\n+        assertEquals(1, this.logCapture.size());\n+        assertEquals(\"Extensions present in [MySpace.MyOtherSSXPage] ignored because of lack of script right \"\n+            + \"from the author.\", this.logCapture.getMessage(0));\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference2, documentReference2)).thenReturn(true);\n+        this.skinExtensionPlugin.use(resource2, parameters2, context);\n+\n+        Set<String> expectedSet = new HashSet<>();\n+        expectedSet.add(resource);\n+        expectedSet.add(resource2);\n+\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(expectedSet, resources);\n+\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.authorizationManager, times(2)).hasAccess(Right.SCRIPT, userReference2, documentReference2);\n+        verify(this.skinExtensionAsync).use(\"ssx\", resource2, null);\n+\n+        parameters2 = Collections.singletonMap(\"buzValue\", 42);\n+        this.skinExtensionPlugin.use(resource2, parameters2, context);\n+\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(expectedSet, resources);\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        expectedParameters.put(resource2, parameters2);\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.skinExtensionAsync).use(\"ssx\", resource2, parameters2);\n+\n+        this.skinExtensionPlugin.use(resource, null, context);\n+        expectedParameters.remove(resource);\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(expectedSet, resources);\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        expectedParameters.put(resource2, parameters2);\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.skinExtensionAsync).use(\"ssx\", resource, null);\n+    }\n+\n+    @Test\n+    void hasPageExtensions()\n+    {\n+        this.context.setDoc(null);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+\n+        XWikiDocument currentDoc = mock(XWikiDocument.class, \"currentDoc\");\n+        this.context.setDoc(currentDoc);\n+\n+        String className = CssSkinExtensionPlugin.SSX_CLASS_NAME;\n+        when(currentDoc.getObjects(className)).thenReturn(null);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+        verify(currentDoc).getObjects(className);\n+\n+        BaseObject baseObject = mock(BaseObject.class, \"specificObj\");\n+        when(baseObject.getStringValue(\"use\")).thenReturn(\"wiki\");\n+        Vector<BaseObject> objectList = new Vector<>();\n+        objectList.add(mock(BaseObject.class));\n+        objectList.add(null);\n+        objectList.add(mock(BaseObject.class));\n+        objectList.add(baseObject);\n+        objectList.add(null);\n+        objectList.add(mock(BaseObject.class));\n+\n+        when(currentDoc.getObjects(className)).thenReturn(objectList);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+        verifyNoInteractions(this.authorizationManager);\n+\n+        when(baseObject.getStringValue(\"use\")).thenReturn(\"currentPage\");\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MySpace\", \"SomePage\");\n+        DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n+        when(currentDoc.getDocumentReference()).thenReturn(documentReference);\n+        when(currentDoc.getAuthorReference()).thenReturn(userReference);\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference, documentReference)).thenReturn(false);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, userReference, documentReference);\n+\n+        assertEquals(1, this.logCapture.size());\n+        assertEquals(\"Extensions present in [xwiki:MySpace.SomePage] ignored because of lack of script right \"\n+            + \"from the author.\", this.logCapture.getMessage(0));\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference, documentReference)).thenReturn(true);\n+        assertTrue(this.skinExtensionPlugin.hasPageExtensions(context));\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-skin/xwiki-platform-skin-skinx/src/test/java/com/xpn/xwiki/plugin/skinx/JsSkinExtensionPluginTest.java",
          "status": "added",
          "additions": 280,
          "deletions": 0,
          "patch": "@@ -0,0 +1,280 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package com.xpn.xwiki.plugin.skinx;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Vector;\n+\n+import javax.inject.Named;\n+import javax.inject.Provider;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.xwiki.model.EntityType;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.model.reference.DocumentReferenceResolver;\n+import org.xwiki.model.reference.EntityReferenceResolver;\n+import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.model.reference.WikiReference;\n+import org.xwiki.observation.ObservationManager;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.skinx.internal.async.SkinExtensionAsync;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+\n+import com.xpn.xwiki.XWiki;\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.XWikiException;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.objects.classes.BaseClass;\n+import com.xpn.xwiki.test.MockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+import com.xpn.xwiki.web.XWikiRequest;\n+import com.xpn.xwiki.web.XWikiURLFactory;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests for {@link JsSkinExtensionPlugin}.\n+ *\n+ * @version $Id$\n+ * @since 14.9RC1\n+ */\n+@OldcoreTest\n+class JsSkinExtensionPluginTest\n+{\n+    @InjectMockitoOldcore\n+    private MockitoOldcore mockitoOldcore;\n+\n+    @MockComponent\n+    private Provider<DocumentReference> documentReferenceProvider;\n+\n+    @MockComponent\n+    private ObservationManager observationManager;\n+\n+    @MockComponent\n+    private EntityReferenceSerializer<String> entityReferenceSerializer;\n+\n+    @MockComponent\n+    @Named(\"currentmixed\")\n+    private DocumentReferenceResolver<String> currentMixedDocumentReferenceResolver;\n+\n+    @MockComponent\n+    private DocumentReferenceResolver<String> documentReferenceResolver;\n+\n+    @MockComponent\n+    @Named(\"current\")\n+    private EntityReferenceResolver<String> currentEntityReferenceResolver;\n+\n+    @MockComponent\n+    private AuthorizationManager authorizationManager;\n+\n+    @MockComponent\n+    private SkinExtensionAsync skinExtensionAsync;\n+\n+    @RegisterExtension\n+    LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n+\n+    private XWikiContext context;\n+    private BaseClass pluginClass;\n+    private JsSkinExtensionPlugin skinExtensionPlugin;\n+    private XWikiURLFactory urlFactory;\n+\n+    @BeforeEach\n+    void setup() throws XWikiException\n+    {\n+        XWikiDocument classDoc = mock(XWikiDocument.class);\n+        this.pluginClass = mock(BaseClass.class);\n+\n+        this.context = mockitoOldcore.getXWikiContext();\n+        this.urlFactory = mock(XWikiURLFactory.class);\n+        context.setURLFactory(urlFactory);\n+        XWikiRequest xWikiRequest = mock(XWikiRequest.class);\n+        context.setRequest(xWikiRequest);\n+        XWiki wiki = mockitoOldcore.getSpyXWiki();\n+        when(this.currentMixedDocumentReferenceResolver.resolve(JsSkinExtensionPlugin.JSX_CLASS_NAME)).thenReturn(\n+            new DocumentReference(JsSkinExtensionPlugin.JSX_CLASS_REFERENCE, new WikiReference(\"xwiki\")));\n+        when(wiki.getDocument(JsSkinExtensionPlugin.JSX_CLASS_NAME, context)).thenReturn(classDoc);\n+        when(classDoc.getXClass()).thenReturn(this.pluginClass);\n+        this.skinExtensionPlugin = new JsSkinExtensionPlugin(\"plugin1\", \"unused\", context);\n+        skinExtensionPlugin.init(context);\n+    }\n+\n+    @Test\n+    void use() throws XWikiException\n+    {\n+        String resource = \"MySpace.MyJSXPage\";\n+        Map<String, Object> parameters = Collections.singletonMap(\"fooParam\", \"barValue\");\n+\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MySpace\", \"MyJSXPage\");\n+        when(this.currentEntityReferenceResolver.resolve(resource, EntityType.DOCUMENT)).thenReturn(documentReference);\n+        when(this.entityReferenceSerializer.serialize(documentReference)).thenReturn(resource);\n+\n+        when(this.documentReferenceResolver.resolve(resource)).thenReturn(documentReference);\n+        XWikiDocument document = mock(XWikiDocument.class);\n+        when(this.mockitoOldcore.getSpyXWiki().getDocument(documentReference, context)).thenReturn(document);\n+\n+        DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n+        when(document.getAuthorReference()).thenReturn(userReference);\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference, documentReference)).thenReturn(true);\n+\n+        this.skinExtensionPlugin.use(resource, parameters, context);\n+        String className = JsSkinExtensionPlugin.class.getCanonicalName();\n+        Set<String> resources = (Set<String>) context.get(className);\n+\n+        assertEquals(Collections.singleton(resource), resources);\n+\n+        Map<String, Map<String, Object>> parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        Map<String, Map<String, Object>> expectedParameters = new HashMap<>();\n+        expectedParameters.put(resource, parameters);\n+\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, userReference, documentReference);\n+        verify(this.skinExtensionAsync).use(\"jsx\", resource, parameters);\n+\n+        String resource2 = \"MySpace.MyOtherJSXPage\";\n+        Map<String, Object> parameters2 = null;\n+        DocumentReference documentReference2 = new DocumentReference(\"xwiki\", \"MySpace\", \"MyOtherJSXPage\");\n+\n+        when(this.currentEntityReferenceResolver.resolve(resource2, EntityType.DOCUMENT))\n+            .thenReturn(documentReference2);\n+        when(this.entityReferenceSerializer.serialize(documentReference2)).thenReturn(resource2);\n+\n+        when(this.documentReferenceResolver.resolve(resource2)).thenReturn(documentReference2);\n+        XWikiDocument document2 = mock(XWikiDocument.class);\n+        when(this.mockitoOldcore.getSpyXWiki().getDocument(documentReference2, context)).thenReturn(document2);\n+\n+        DocumentReference userReference2 = new DocumentReference(\"xwiki\", \"XWiki\", \"Bar\");\n+        when(document2.getAuthorReference()).thenReturn(userReference2);\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference2, documentReference2)).thenReturn(false);\n+\n+        this.skinExtensionPlugin.use(resource2, parameters2, context);\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(Collections.singleton(resource), resources);\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, userReference2, documentReference2);\n+        verify(this.skinExtensionAsync, never()).use(\"jsx\", resource2, parameters2);\n+\n+        assertEquals(1, this.logCapture.size());\n+        assertEquals(\"Extensions present in [MySpace.MyOtherJSXPage] ignored because of lack of script right \"\n+            + \"from the author.\", this.logCapture.getMessage(0));\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference2, documentReference2)).thenReturn(true);\n+        this.skinExtensionPlugin.use(resource2, parameters2, context);\n+\n+        Set<String> expectedSet = new HashSet<>();\n+        expectedSet.add(resource);\n+        expectedSet.add(resource2);\n+\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(expectedSet, resources);\n+\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.authorizationManager, times(2)).hasAccess(Right.SCRIPT, userReference2, documentReference2);\n+        verify(this.skinExtensionAsync).use(\"jsx\", resource2, null);\n+\n+        parameters2 = Collections.singletonMap(\"buzValue\", 42);\n+        this.skinExtensionPlugin.use(resource2, parameters2, context);\n+\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(expectedSet, resources);\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        expectedParameters.put(resource2, parameters2);\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.skinExtensionAsync).use(\"jsx\", resource2, parameters2);\n+\n+        this.skinExtensionPlugin.use(resource, null, context);\n+        expectedParameters.remove(resource);\n+        resources = (Set<String>) context.get(className);\n+        assertEquals(expectedSet, resources);\n+        parametersMap =\n+            (Map<String, Map<String, Object>>) context.get(className + \"_parameters\");\n+        expectedParameters.put(resource2, parameters2);\n+        assertEquals(expectedParameters, parametersMap);\n+        verify(this.skinExtensionAsync).use(\"jsx\", resource, null);\n+    }\n+\n+    @Test\n+    void hasPageExtensions()\n+    {\n+        this.context.setDoc(null);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+\n+        XWikiDocument currentDoc = mock(XWikiDocument.class, \"currentDoc\");\n+        this.context.setDoc(currentDoc);\n+\n+        String className = JsSkinExtensionPlugin.JSX_CLASS_NAME;\n+        when(currentDoc.getObjects(className)).thenReturn(null);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+        verify(currentDoc).getObjects(className);\n+\n+        BaseObject baseObject = mock(BaseObject.class, \"specificObj\");\n+        when(baseObject.getStringValue(\"use\")).thenReturn(\"wiki\");\n+        Vector<BaseObject> objectList = new Vector<>();\n+        objectList.add(mock(BaseObject.class));\n+        objectList.add(null);\n+        objectList.add(mock(BaseObject.class));\n+        objectList.add(baseObject);\n+        objectList.add(null);\n+        objectList.add(mock(BaseObject.class));\n+\n+        when(currentDoc.getObjects(className)).thenReturn(objectList);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+        verifyNoInteractions(this.authorizationManager);\n+\n+        when(baseObject.getStringValue(\"use\")).thenReturn(\"currentPage\");\n+        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"MySpace\", \"SomePage\");\n+        DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n+        when(currentDoc.getDocumentReference()).thenReturn(documentReference);\n+        when(currentDoc.getAuthorReference()).thenReturn(userReference);\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference, documentReference)).thenReturn(false);\n+        assertFalse(this.skinExtensionPlugin.hasPageExtensions(context));\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, userReference, documentReference);\n+\n+        assertEquals(1, this.logCapture.size());\n+        assertEquals(\"Extensions present in [xwiki:MySpace.SomePage] ignored because of lack of script right \"\n+            + \"from the author.\", this.logCapture.getMessage(0));\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, userReference, documentReference)).thenReturn(true);\n+        assertTrue(this.skinExtensionPlugin.hasPageExtensions(context));\n+    }\n+}\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "XWiki Commons are technical libraries common to several other top level XWiki projects. There was no check in the author of a JavaScript xobject or StyleSheet xobject added in a XWiki document, so until now it was possible for a user having only Edit Right to create such object and to craft a script allowing to perform some operations when executing by a user with appropriate rights. This has been patched in XWiki 14.9-rc-1 by only executing the script if the author of it has Script rights.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-15T16:15:07.270",
    "last_modified": "2024-11-21T07:56:42.847",
    "fix_date": "2022-10-10T15:03:09Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/fe65bc35d5672dd2505b7ac4ec42aec57d500fbb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-cmvg-w72j-7phx",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19514",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19583",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-9119",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Permissions Required"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/fe65bc35d5672dd2505b7ac4ec42aec57d500fbb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-cmvg-w72j-7phx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19514",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-19583",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-9119",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Permissions Required"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.791589",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}