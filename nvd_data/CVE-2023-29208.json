{
  "cve_id": "CVE-2023-29208",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "d9e947559077e947315bf700c5703dfc7dd8a8d7",
    "related_commits": [
      "d9e947559077e947315bf700c5703dfc7dd8a8d7",
      "d9e947559077e947315bf700c5703dfc7dd8a8d7"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d9e947559077e947315bf700c5703dfc7dd8a8d7",
      "commit_date": "2022-10-24T07:31:27Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": {
          "total_commits": 1946,
          "average_weekly_commits": 2.0355648535564854,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 284
        }
      },
      "commit_message": {
        "title": "XWIKI-16285: Error when accessing deleted document",
        "length": 50,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 281,
        "additions": 254,
        "deletions": 27
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/DeletedDocument.java",
          "status": "modified",
          "additions": 41,
          "deletions": 10,
          "patch": "@@ -22,18 +22,23 @@\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Locale;\n-import java.util.Objects;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.xwiki.component.util.DefaultParameterizedType;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.security.authorization.Right;\n+import org.xwiki.stability.Unstable;\n+import org.xwiki.user.UserReference;\n+import org.xwiki.user.UserReferenceResolver;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n import com.xpn.xwiki.doc.XWikiDeletedDocument;\n import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.store.XWikiRecycleBinStoreInterface;\n import com.xpn.xwiki.util.Programming;\n+import com.xpn.xwiki.web.Utils;\n \n /**\n  * Information about a deleted document in the recycle bin.\n@@ -52,6 +57,8 @@ public class DeletedDocument extends Api\n      */\n     private final XWikiDeletedDocument deletedDoc;\n \n+    private UserReferenceResolver<DocumentReference> userReferenceResolver;\n+\n     /**\n      * Simple constructor, initializes a new API object with the current {@link com.xpn.xwiki.XWikiContext context} and\n      * the specified protected {@link com.xpn.xwiki.doc.XWikiDeletedDocument deleted document} object.\n@@ -134,22 +141,46 @@ public String getBatchId()\n         return this.deletedDoc.getBatchId();\n     }\n \n+    private UserReferenceResolver<DocumentReference> getUserReferenceResolver()\n+    {\n+        if (this.userReferenceResolver == null) {\n+            this.userReferenceResolver = Utils.getComponent(\n+                new DefaultParameterizedType(null, UserReferenceResolver.class, DocumentReference.class), \"document\");\n+        }\n+        return this.userReferenceResolver;\n+    }\n+\n+    private boolean hasAccess(Right right)\n+    {\n+        UserReference userReference = getUserReferenceResolver().resolve(this.context.getUserReference());\n+        XWikiRecycleBinStoreInterface recycleBinStore = this.context.getWiki().getRecycleBinStore();\n+        return recycleBinStore.hasAccess(right, userReference, this.deletedDoc);\n+    }\n+\n     /**\n      * Check if the current user has the right to restore the document.\n      *\n      * @return {@code true} if the current user can restore this document, {@code false} otherwise\n      */\n     public boolean canUndelete()\n     {\n-        try {\n-            return hasAccessLevel(ADMIN_RIGHT, getFullName()) || hasAccessLevel(\"undelete\", getFullName())\n-                || (Objects.equals(this.context.getUserReference(), getDeleterReference())\n-                    && hasAccess(Right.EDIT, getDocumentReference()));\n-        } catch (XWikiException ex) {\n-            // Public APIs should not throw exceptions\n-            LOGGER.warn(\"Exception while checking if entry [{}] can be restored from the recycle bin\", getId(), ex);\n-            return false;\n-        }\n+        return hasAccess(Right.EDIT);\n+    }\n+\n+    /**\n+     * Check if the current user has the right to view the deleted document.\n+     * This is allowed either if the user has admin right on the original reference of the doc, or if they were the\n+     * original user who deleted it.\n+     *\n+     * @return {code true} if the current user is allowed to view the deleted document.\n+     * @since 14.10RC1\n+     * @since 14.4.7\n+     * @since 13.10.11\n+     */\n+    @Unstable\n+    public boolean canView()\n+    {\n+        return hasAccess(Right.VIEW);\n     }\n \n     /**"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/doc/DocumentRevisionProvider.java",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -21,6 +21,11 @@\n \n import org.xwiki.component.annotation.Role;\n import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.security.authorization.AccessDeniedException;\n+import org.xwiki.security.authorization.AuthorizationException;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.stability.Unstable;\n+import org.xwiki.user.UserReference;\n \n import com.xpn.xwiki.XWikiException;\n \n@@ -56,4 +61,25 @@ public interface DocumentRevisionProvider\n      * @throws XWikiException when failing to load the document revision\n      */\n     XWikiDocument getRevision(XWikiDocument document, String revision) throws XWikiException;\n+\n+    /**\n+     * Check if access is granted on the given document revision, for the given user and right: if the access is not\n+     * granted this method will throw an {@link AccessDeniedException}.\n+     * This method allows each revision provider to have their own check depending on the type of revision.\n+     *\n+     * @param right the right for which to check if access is granted\n+     * @param userReference the user for whom to check access\n+     * @param documentReference the reference of the document\n+     * @param revision the revision of the document\n+     * @throws AuthorizationException if the access is denied\n+     * @throws XWikiException in case of problem when loading the revision\n+     * @since 14.10RC1\n+     * @since 14.4.7\n+     * @since 13.10.11\n+     */\n+    @Unstable\n+    default void checkAccess(Right right, UserReference userReference, DocumentReference documentReference,\n+        String revision) throws AuthorizationException, XWikiException\n+    {\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/doc/XWikiDeletedDocument.java",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -24,6 +24,7 @@\n import java.util.Locale;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.xwiki.localization.LocaleUtils;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n@@ -394,4 +395,14 @@ public String getBatchId()\n     {\n         return batchId;\n     }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return new ToStringBuilder(this)\n+            .append(\"id\", id)\n+            .append(\"fullName\", fullName)\n+            .append(\"locale\", locale)\n+            .toString();\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/internal/doc/DefaultDocumentRevisionProvider.java",
          "status": "modified",
          "additions": 29,
          "deletions": 5,
          "patch": "@@ -24,10 +24,14 @@\n import javax.inject.Provider;\n import javax.inject.Singleton;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.xwiki.component.annotation.Component;\n import org.xwiki.component.manager.ComponentLookupException;\n import org.xwiki.component.manager.ComponentManager;\n import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.security.authorization.AuthorizationException;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.user.UserReference;\n \n import com.xpn.xwiki.XWikiException;\n import com.xpn.xwiki.doc.DocumentRevisionProvider;\n@@ -54,10 +58,8 @@ public class DefaultDocumentRevisionProvider extends AbstractDocumentRevisionPro\n     @Named(\"database\")\n     private DocumentRevisionProvider databaseDocumentRevisionProvider;\n \n-    @Override\n-    public XWikiDocument getRevision(DocumentReference reference, String revision) throws XWikiException\n+    private Pair<String, String> parseRevision(String revision)\n     {\n-        // Parse the version\n         String revisionPrefix = null;\n         if (revision != null) {\n             int revisionPrefixIndex = revision.indexOf(':');\n@@ -71,7 +73,11 @@ public XWikiDocument getRevision(DocumentReference reference, String revision) t\n         } else {\n             shortRevision = revision;\n         }\n+        return Pair.of(revisionPrefix, shortRevision);\n+    }\n \n+    private DocumentRevisionProvider getProvider(String revisionPrefix) throws XWikiException\n+    {\n         // Find the provider\n         DocumentRevisionProvider provider = this.databaseDocumentRevisionProvider;\n         if (revisionPrefix != null) {\n@@ -80,12 +86,30 @@ public XWikiDocument getRevision(DocumentReference reference, String revision) t\n                 try {\n                     provider = componentManager.getInstance(DocumentRevisionProvider.class, revisionPrefix);\n                 } catch (ComponentLookupException e) {\n-                    throw new XWikiException(\"Failed to get revision provider for revision [\" + revision + \"]\", e);\n+                    throw new XWikiException(\"Failed to get revision provider for revision [\" + revisionPrefix + \"]\",\n+                        e);\n                 }\n             }\n         }\n+        return provider;\n+    }\n+\n+    @Override\n+    public XWikiDocument getRevision(DocumentReference reference, String revision) throws XWikiException\n+    {\n+        Pair<String, String> parsedRevision = parseRevision(revision);\n \n         // Load the document revision\n-        return provider.getRevision(reference, shortRevision);\n+        return getProvider(parsedRevision.getLeft()).getRevision(reference, parsedRevision.getRight());\n+    }\n+\n+    @Override\n+    public void checkAccess(Right right, UserReference userReference, DocumentReference documentReference,\n+        String revision) throws AuthorizationException, XWikiException\n+    {\n+        Pair<String, String> parsedRevision = parseRevision(revision);\n+\n+        getProvider(parsedRevision.getLeft())\n+            .checkAccess(right, userReference, documentReference, parsedRevision.getRight());\n     }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/internal/doc/DeletedDocumentRevisionProvider.java",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -26,6 +26,9 @@\n \n import org.xwiki.component.annotation.Component;\n import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.security.authorization.AuthorizationException;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.user.UserReference;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n@@ -61,12 +64,23 @@ public XWikiDocument getRevision(DocumentReference reference, String revision) t\n         }\n \n         return null;\n-\n     }\n \n     @Override\n     public XWikiDocument getRevision(XWikiDocument document, String revision) throws XWikiException\n     {\n         return getRevision(document != null ? document.getDocumentReferenceWithLocale() : null, revision);\n     }\n+\n+    @Override\n+    public void checkAccess(Right right, UserReference userReference, DocumentReference documentReference,\n+        String revision) throws AuthorizationException, XWikiException\n+    {\n+        XWikiContext xcontext = this.xcontextProvider.get();\n+\n+        XWikiDeletedDocument deletedDocument = xcontext.getWiki().getDeletedDocument(Long.valueOf(revision), xcontext);\n+        if (deletedDocument != null) {\n+            xcontext.getWiki().getRecycleBinStore().checkAccess(right, userReference, deletedDocument);\n+        }\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/XWikiHibernateRecycleBinStore.java",
          "status": "modified",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -22,6 +22,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Objects;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n@@ -39,6 +40,12 @@\n import org.xwiki.component.annotation.Component;\n import org.xwiki.component.manager.ComponentLookupException;\n import org.xwiki.component.manager.ComponentManager;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.security.authorization.AuthorizationException;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.user.UserReference;\n+import org.xwiki.user.UserReferenceSerializer;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n@@ -58,6 +65,13 @@\n @Singleton\n public class XWikiHibernateRecycleBinStore extends XWikiHibernateBaseStore implements XWikiRecycleBinStoreInterface\n {\n+    @Inject\n+    private AuthorizationManager authorizationManager;\n+\n+    @Inject\n+    @Named(\"document\")\n+    private UserReferenceSerializer<DocumentReference> userReferenceSerializer;\n+\n     /**\n      * {@link HibernateCallback} used to retrieve from the recycle bin store the deleted versions of a document.\n      */\n@@ -430,4 +444,31 @@ public void deleteFromRecycleBin(final long index, XWikiContext context, boolean\n             return null;\n         });\n     }\n+\n+    @Override\n+    public void checkAccess(Right right, UserReference userReference, XWikiDeletedDocument deletedDocument)\n+        throws AuthorizationException\n+    {\n+        if (!this.hasAccess(right, userReference, deletedDocument)) {\n+            throw new AuthorizationException(\n+                String.format(\"[%s] cannot access deleted document [%s] for right [%s]: \"\n+                    + \"only admin or deleter of the document are authorized\",\n+                    userReference, deletedDocument, right));\n+        }\n+    }\n+\n+    @Override\n+    public boolean hasAccess(Right right, UserReference userReference, XWikiDeletedDocument deletedDocument)\n+    {\n+        DocumentReference documentReference = deletedDocument.getDocumentReference();\n+        DocumentReference userDocReference = this.userReferenceSerializer.serialize(userReference);\n+\n+        boolean result = false;\n+        if (this.authorizationManager.hasAccess(Right.ADMIN, userDocReference, documentReference)\n+            || (Objects.equals(deletedDocument.getDeleterReference(), userDocReference)\n+            && this.authorizationManager.hasAccess(right, userDocReference, documentReference))) {\n+            result = true;\n+        }\n+        return result;\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/store/XWikiRecycleBinStoreInterface.java",
          "status": "modified",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -22,6 +22,10 @@\n import java.util.Date;\n \n import org.xwiki.component.annotation.Role;\n+import org.xwiki.security.authorization.AuthorizationException;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.stability.Unstable;\n+import org.xwiki.user.UserReference;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n@@ -232,4 +236,39 @@ default void deleteFromRecycleBin(long index, XWikiContext context, boolean bTra\n         // unpredictable.\n         deleteFromRecycleBin(new XWikiDocument(), index, context, bTransaction);\n     }\n+\n+    /**\n+     * Check if the given deleted document can be accessed for the given right by the given user.\n+     * This method only throw the {@link AuthorizationException} if the right is not granted.\n+     *\n+     * @param right the right to check access for\n+     * @param userReference the user for whom to check access\n+     * @param deletedDocument the document to be accessed\n+     * @throws AuthorizationException if the user doesn't have appropriate right\n+     * @since 14.10RC1\n+     * @since 14.4.7\n+     * @since 13.10.11\n+     */\n+    @Unstable\n+    default void checkAccess(Right right, UserReference userReference, XWikiDeletedDocument deletedDocument) throws\n+        AuthorizationException\n+    {\n+    }\n+\n+    /**\n+     * Check if the given deleted document can be accessed for the given right by the given user.\n+     *\n+     * @param right the right to check access for\n+     * @param userReference the user for whom to check access\n+     * @param deletedDocument the document to be accessed\n+     * @return {@code true} if the user have appropriate right\n+     * @since 14.10RC1\n+     * @since 14.4.7\n+     * @since 13.10.11\n+     */\n+    @Unstable\n+    default boolean hasAccess(Right right, UserReference userReference, XWikiDeletedDocument deletedDocument)\n+    {\n+        return false;\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/XWikiAction.java",
          "status": "modified",
          "additions": 35,
          "deletions": 4,
          "patch": "@@ -82,16 +82,20 @@\n import org.xwiki.resource.entity.EntityResourceReference;\n import org.xwiki.resource.internal.DefaultResourceReferenceHandlerChain;\n import org.xwiki.script.ScriptContextManager;\n+import org.xwiki.security.authorization.AuthorizationException;\n import org.xwiki.security.authorization.ContextualAuthorizationManager;\n import org.xwiki.security.authorization.Right;\n import org.xwiki.stability.Unstable;\n import org.xwiki.template.TemplateManager;\n+import org.xwiki.user.UserReference;\n+import org.xwiki.user.UserReferenceResolver;\n import org.xwiki.velocity.VelocityManager;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.xpn.xwiki.XWiki;\n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n+import com.xpn.xwiki.doc.DocumentRevisionProvider;\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.internal.web.LegacyAction;\n import com.xpn.xwiki.monitor.api.MonitorPlugin;\n@@ -185,6 +189,13 @@ public abstract class XWikiAction implements LegacyAction\n \n     private EntityReferenceSerializer<String> localSerializer;\n \n+    @Inject\n+    private DocumentRevisionProvider documentRevisionProvider;\n+\n+    @Inject\n+    @Named(\"document\")\n+    private UserReferenceResolver<DocumentReference> userReferenceResolver;\n+\n     /**\n      * @return the class of the XWikiForm in charge of parsing the request\n      * @since 13.0\n@@ -892,6 +903,11 @@ protected boolean supportRedirections()\n         return false;\n     }\n \n+    private UserReference getCurrentUserReference(XWikiContext context)\n+    {\n+        return this.userReferenceResolver.resolve(context.getUserReference());\n+    }\n+\n     protected void handleRevision(XWikiContext context) throws XWikiException\n     {\n         String rev = context.getRequest().getParameter(\"rev\");\n@@ -906,11 +922,26 @@ protected void handleRevision(XWikiContext context) throws XWikiException\n                 Locale locale = LocaleUtils.toLocale(context.getRequest().getParameter(\"language\"), Locale.ROOT);\n                 tdoc = new XWikiDocument(tdoc.getDocumentReference(), locale);\n             }\n-            XWikiDocument rdoc =\n-                (!doc.getLocale().equals(tdoc.getLocale())) ? doc : context.getWiki().getDocument(doc, rev, context);\n \n-            XWikiDocument rtdoc =\n-                (doc.getLocale().equals(tdoc.getLocale())) ? rdoc : context.getWiki().getDocument(tdoc, rev, context);\n+            DocumentReference documentReference = doc.getDocumentReference();\n+            try {\n+                documentRevisionProvider\n+                    .checkAccess(Right.VIEW, getCurrentUserReference(context), documentReference, rev);\n+            } catch (AuthorizationException e) {\n+                Object[] args = { documentReference, rev, context.getUserReference() };\n+                throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n+                    \"Access to document {0} with revision {1} has been denied to user {2}\", e, args);\n+            }\n+\n+            XWikiDocument rdoc;\n+            XWikiDocument rtdoc;\n+            if (doc.getLocale().equals(tdoc.getLocale())) {\n+                rdoc = this.documentRevisionProvider.getRevision(doc.getDocumentReferenceWithLocale(), rev);\n+                rtdoc = rdoc;\n+            } else {\n+                rdoc = doc;\n+                rtdoc = this.documentRevisionProvider.getRevision(tdoc.getDocumentReferenceWithLocale(), rev);\n+            }\n \n             context.put(\"tdoc\", rtdoc);\n             context.put(\"cdoc\", rdoc);"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/UndeleteActionTest.java",
          "status": "modified",
          "additions": 12,
          "deletions": 7,
          "patch": "@@ -43,6 +43,7 @@\n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiDeletedDocument;\n import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.store.XWikiHibernateRecycleBinStore;\n import com.xpn.xwiki.test.MockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n@@ -104,6 +105,9 @@ class UndeleteActionTest\n     @Mock\n     private XWikiDeletedDocument deletedDocument;\n \n+    @Mock\n+    private XWikiHibernateRecycleBinStore recycleBinStore;\n+\n     /**\n      * The object being tested.\n      */\n@@ -113,7 +117,7 @@ class UndeleteActionTest\n     void beforeEach() throws Exception\n     {\n         this.oldcore.getXWikiContext().setRequest(this.request);\n-\n+        this.oldcore.getSpyXWiki().setRecycleBinStore(this.recycleBinStore);\n         XWikiDocument contextDocument = mock(XWikiDocument.class);\n         when(contextDocument.getDocumentReference()).thenReturn(DELETED_REFERENCE);\n         this.oldcore.getXWikiContext().setDoc(contextDocument);\n@@ -143,8 +147,8 @@ void restoreSingleDocument() throws Exception\n     {\n         when(this.csrfToken.isTokenValid(null)).thenReturn(true);\n \n-        when(this.oldcore.getMockRightService().hasAccessLevel(any(), any(), any(), any())).thenReturn(true);\n-\n+        when(this.recycleBinStore.hasAccess(any(), any(), any()))\n+            .thenReturn(true);\n         assertFalse(this.undeleteAction.action(this.oldcore.getXWikiContext()));\n \n         verify(this.requestFactory).createRestoreRequest(Arrays.asList(ID));\n@@ -157,7 +161,7 @@ void restoreSingleDocumentWhenDeleter() throws Exception\n     {\n         when(this.csrfToken.isTokenValid(null)).thenReturn(true);\n \n-        when(this.oldcore.getMockAuthorizationManager().hasAccess(Right.EDIT, null, DELETED_REFERENCE))\n+        when(this.recycleBinStore.hasAccess(any(), any(), any()))\n             .thenReturn(true);\n \n         assertFalse(this.undeleteAction.action(this.oldcore.getXWikiContext()));\n@@ -205,8 +209,8 @@ void showBatch() throws Exception\n     {\n         when(this.request.getParameter(\"showBatch\")).thenReturn(\"true\");\n \n-        when(this.oldcore.getMockRightService().hasAccessLevel(any(), any(), any(), any())).thenReturn(true);\n-\n+        when(this.recycleBinStore.hasAccess(any(), any(), any()))\n+            .thenReturn(true);\n         assertTrue(this.undeleteAction.action(this.oldcore.getXWikiContext()));\n         // Render the \"restore\" template.\n         assertEquals(\"restore\", undeleteAction.render(this.oldcore.getXWikiContext()));\n@@ -236,7 +240,8 @@ void restoreBatch() throws Exception\n         // Confirmation button pressed.\n         when(this.request.getParameter(\"confirm\")).thenReturn(\"true\");\n \n-        when(this.oldcore.getMockRightService().hasAccessLevel(any(), any(), any(), any())).thenReturn(true);\n+        when(this.recycleBinStore.hasAccess(any(), any(), any()))\n+            .thenReturn(true);\n \n         assertFalse(this.undeleteAction.action(this.oldcore.getXWikiContext()));\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/recyclebinlist.vm",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -43,6 +43,7 @@\n   #if($list && $list.size() > 0)\n     #set ($canDelete = $list[0].canDelete())\n     #set ($canRestore = $list[0].canUndelete())\n+    #set ($canView = $list[0].canView())\n     <hr />\n     <div class=\"centered $!className\">\n       <p class=\"recyclebin-message\">$escapetool.xml($services.localization.render($message))</p>\n@@ -62,9 +63,13 @@\n         <tr>\n          <td>$xwiki.getUserName($dd.getDeleter())</td>\n          <td>\n+         #if ($canView)\n            <a class=\"link-view\" href=\"$doc.getURL('view', $escapetool.url({'rev' : \"deleted:${dd.getId()}\"}))\">\n              $xwiki.formatDate($dd.getDate())\n            </a>\n+         #else\n+           $xwiki.formatDate($dd.getDate())\n+         #end\n          </td>\n          #if ($canRestore)\n            <td><a href=\"$xwiki.getURL($dd.fullName, 'undelete', \"id=${dd.id}&amp;showBatch=true\")\">$!{dd.batchId}</a></td>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "20d352276c008c8ea2a1cf1ea9ceb84193098477",
            "date": "2025-01-25T19:15:09Z",
            "author_login": "mflorea"
          },
          {
            "sha": "e29b630b2d5a42b6f12ed3f0e4f59bd078f8a0f7",
            "date": "2025-01-24T07:34:53Z",
            "author_login": "mflorea"
          },
          {
            "sha": "023144daf732d04b085c2423ebd4552edd09ac5c",
            "date": "2025-01-24T15:44:30Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "a46579427dc202957d623b8e69a6a894243c6690",
            "date": "2025-01-21T16:53:45Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "3d661180a9075925c3d2d75816356925f32ae89d",
            "date": "2025-01-21T16:13:46Z",
            "author_login": "Sereza7"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-668",
    "description": "XWiki Commons are technical libraries common to several other top level XWiki projects. Rights added to a document are not taken into account for viewing it once it's deleted. Note that this vulnerability only impact deleted documents that where containing view rights: the view rights provided on a space of a deleted document are properly checked. The problem has been patched in XWiki 14.10 by checking the rights of current user: only admin and deleter of the document are allowed to view it.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-15T16:15:07.380",
    "last_modified": "2024-11-21T07:56:43.067",
    "fix_date": "2022-10-24T07:31:27Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/d9e947559077e947315bf700c5703dfc7dd8a8d7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-4f8g-fq6x-jqrr",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-16285",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/d9e947559077e947315bf700c5703dfc7dd8a8d7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-4f8g-fq6x-jqrr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-16285",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.791940",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-25T19:23:49Z",
    "pushed_at": "2025-01-25T19:23:45Z",
    "size": 563394,
    "stars": 1035,
    "forks": 555,
    "open_issues": 143,
    "watchers": 1035,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34352251,
      "JavaScript": 2404688,
      "HTML": 388086,
      "Less": 318876,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115582,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 261
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:34:26.816515"
  }
}