{
  "cve_id": "CVE-2023-2950",
  "github_data": {
    "repository": "openemr/openemr",
    "fix_commit": "abee8d2606c706176818de25eb88a2d08b8f7fa4",
    "related_commits": [
      "abee8d2606c706176818de25eb88a2d08b8f7fa4",
      "abee8d2606c706176818de25eb88a2d08b8f7fa4"
    ],
    "patch_url": "https://github.com/openemr/openemr/commit/abee8d2606c706176818de25eb88a2d08b8f7fa4.patch",
    "fix_commit_details": {
      "sha": "abee8d2606c706176818de25eb88a2d08b8f7fa4",
      "commit_date": "2023-04-13T02:02:09Z",
      "author": {
        "login": "stephenwaite",
        "type": "User",
        "stats": {
          "total_commits": 638,
          "average_weekly_commits": 0.843915343915344,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 290
        }
      },
      "commit_message": {
        "title": "fix: bug fix (#6354)",
        "length": 58,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 78,
        "additions": 68,
        "deletions": 10
      },
      "files": [
        {
          "filename": "portal/patient/libs/Controller/OnsiteDocumentController.php",
          "status": "modified",
          "additions": 62,
          "deletions": 6,
          "patch": "@@ -251,11 +251,12 @@ public function Create()\n                 $onsitedocument->Pid = $this->SafeGetVal($json, 'pid');\n             }\n \n-            if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n+            // removing for testing\n+            /* if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n                 $decode = $this->SafeGetVal($json, 'fullDocument');\n                 $k = (int)$this->SafeGetVal($json, 'csrf_token_form')[0];\n                 $json->fullDocument = $this->decode($decode, $k);\n-            }\n+            } */\n \n             $onsitedocument->Facility = $this->SafeGetVal($json, 'facility');\n             $onsitedocument->Provider = $this->SafeGetVal($json, 'provider');\n@@ -281,6 +282,12 @@ public function Create()\n             if (count($errors) > 0) {\n                 $this->RenderErrorJSON('Please check the form for errors', $errors);\n             } else {\n+                $new_data = $onsitedocument->FullDocument;\n+                // use a custom diff function to look for changing tags only with html\n+                if ($new_data != strip_tags($new_data)) {\n+                    $old_data = $json->fullDocument;\n+                    $onsitedocument->FullDocument = $this->htmlDiff($old_data, $new_data);\n+                }\n                 $onsitedocument->Save();\n                 $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n             }\n@@ -302,6 +309,7 @@ public function Update()\n             }\n             $pk = $this->GetRouter()->GetUrlParam('id');\n             $onsitedocument = $this->Phreezer->Get('OnsiteDocument', $pk);\n+            $old_data = $onsitedocument->FullDocument;\n \n             // only allow patient to update themselves (part 1)\n             if (!empty($GLOBALS['bootstrap_pid'])) {\n@@ -318,11 +326,12 @@ public function Update()\n                 $onsitedocument->Pid = $this->SafeGetVal($json, 'pid', $onsitedocument->Pid);\n             }\n \n-            if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n+            // removing for testing\n+            /* if (!empty($_SESSION[\"patient_portal_onsite_two\"] ?? null)) {\n                 $decode = $this->SafeGetVal($json, 'fullDocument');\n                 $k = (int)$this->SafeGetVal($json, 'csrf_token_form')[0];\n                 $json->fullDocument = $this->decode($decode, $k);\n-            }\n+            } */\n \n             $onsitedocument->Facility = $this->SafeGetVal($json, 'facility', $onsitedocument->Facility);\n             $onsitedocument->Provider = $this->SafeGetVal($json, 'provider', $onsitedocument->Provider);\n@@ -348,6 +357,11 @@ public function Update()\n             if (count($errors) > 0) {\n                 $this->RenderErrorJSON('Please check the form for errors', $errors);\n             } else {\n+                // use a custom diff function to look for changing tags only with html\n+                $new_data = $onsitedocument->FullDocument;\n+                if ($new_data != strip_tags($new_data)) {\n+                    $onsitedocument->FullDocument = $this->htmlDiff($old_data, $new_data);\n+                }\n                 $onsitedocument->Save();\n                 $this->RenderJSON($onsitedocument, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n             }\n@@ -385,11 +399,12 @@ public function Delete()\n         }\n     }\n \n-    /**\n+    // removing for testing\n+    /*\n      * @param $encoded\n      * @param $v\n      * @return bool|string\n-     */\n+\n     private function decode($encoded, $v): bool|string\n     {\n         $encoded = base64_decode($encoded);\n@@ -401,4 +416,45 @@ private function decode($encoded, $v): bool|string\n         }\n         return base64_decode(base64_decode($decoded));\n     }\n+    */\n+\n+    private function diff($old, $new): array\n+    {\n+        $matrix = array();\n+        $maxlen = 0;\n+        foreach ($old as $oindex => $ovalue) {\n+            $nkeys = array_keys($new, $ovalue);\n+            foreach ($nkeys as $nindex) {\n+                $matrix[$oindex][$nindex] = isset($matrix[$oindex - 1][$nindex - 1]) ?\n+                    $matrix[$oindex - 1][$nindex - 1] + 1 : 1;\n+                if ($matrix[$oindex][$nindex] > $maxlen) {\n+                    $maxlen = $matrix[$oindex][$nindex];\n+                    $omax = $oindex + 1 - $maxlen;\n+                    $nmax = $nindex + 1 - $maxlen;\n+                }\n+            }\n+        }\n+        if ($maxlen == 0) {\n+            return array(array('d' => $old, 'i' => $new));\n+        }\n+        return array_merge(\n+            $this->diff(array_slice($old, 0, $omax), array_slice($new, 0, $nmax)),\n+            array_slice($new, $nmax, $maxlen),\n+            $this->diff(array_slice($old, $omax + $maxlen), array_slice($new, $nmax + $maxlen))\n+        );\n+    }\n+\n+    private function htmlDiff($old, $new): string\n+    {\n+        $ret = '';\n+        $diff = $this->diff(preg_split(\"/[\\s]+/\", $old), preg_split(\"/[\\s]+/\", $new));\n+        foreach ($diff as $k) {\n+            if (is_array($k)) {\n+                $ret .= (!empty($k['i']) ? attr(implode(' ', $k['i'])) : '');\n+            } else {\n+                $ret .= $k . ' ';\n+            }\n+        }\n+        return $ret;\n+    }\n }"
        },
        {
          "filename": "portal/patient/scripts/app/onsitedocuments.js",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -848,9 +848,10 @@ var page = {\n             // no frame content is maintained in onsite document activity but template directives are.\n             templateContent = templateContent.replace(\"id=0\", \"id=\" + page.encounterFormId);\n         }\n-        if (isPortal) {\n+        // removing for testing\n+        /* if (isPortal) {\n             templateContent = page.encode(templateContent, parseInt(csrfTokenDoclib[0]));\n-        }\n+        } */\n         page.onsiteDocument.save({\n             'pid': cpid,\n             'facility': page.formOrigin, /* 0 portal, 1 dashboard, 2 patient documents */\n@@ -956,7 +957,8 @@ var page = {\n             }\n         });\n     },\n-    encode: function (content, k) {\n+    // removing for testing\n+    /* encode: function (content, k) {\n         let encoded = \"\";\n         content = btoa(content);\n         content = btoa(content);\n@@ -966,5 +968,5 @@ var page = {\n             encoded = encoded + String.fromCharCode(b);\n         }\n         return btoa(encoded);\n-    }\n+    } */\n };"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5a6ce59033e28da4977509da60f4fc0cbf084b43",
            "date": "2025-01-12T07:59:34Z",
            "author_login": "bradymiller"
          },
          {
            "sha": "48858bcad419eb537a0879d8261845df39d793f2",
            "date": "2025-01-10T22:28:46Z",
            "author_login": "stephenwaite"
          },
          {
            "sha": "ee3beb58f73619e04004e526c56423a14d6689fd",
            "date": "2025-01-09T07:11:34Z",
            "author_login": "bradymiller"
          },
          {
            "sha": "1480ee627b317622a122abb293b74be50ad86795",
            "date": "2025-01-08T17:44:10Z",
            "author_login": "sjpadgett"
          },
          {
            "sha": "6a444b1c9ac5773008ab7a6c8fb81a4e9a365e6b",
            "date": "2025-01-06T12:49:47Z",
            "author_login": "NileshHake"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-285",
    "description": "Improper Authorization in GitHub repository openemr/openemr prior to 7.0.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-28T04:15:14.513",
    "last_modified": "2024-11-21T07:59:37.900",
    "fix_date": "2023-04-13T02:02:09Z"
  },
  "references": [
    {
      "url": "https://github.com/openemr/openemr/commit/abee8d2606c706176818de25eb88a2d08b8f7fa4",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/612d13cf-2ef9-44ea-b8fb-e797948a9a86",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openemr/openemr/commit/abee8d2606c706176818de25eb88a2d08b8f7fa4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/612d13cf-2ef9-44ea-b8fb-e797948a9a86",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.264463",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openemr",
    "owner": "openemr",
    "created_at": "2010-05-21T19:54:08Z",
    "updated_at": "2025-01-12T07:59:39Z",
    "pushed_at": "2025-01-12T07:59:34Z",
    "size": 613406,
    "stars": 3249,
    "forks": 2204,
    "open_issues": 360,
    "watchers": 3249,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "rel-320",
      "rel-400",
      "rel-410",
      "rel-411",
      "rel-412",
      "rel-413",
      "rel-420",
      "rel-421"
    ],
    "languages": {
      "PHP": 38302611,
      "JavaScript": 2254920,
      "XSLT": 1868397,
      "HTML": 1450911,
      "Twig": 590132,
      "CSS": 530442,
      "SCSS": 189517,
      "Mustache": 127165,
      "Perl": 114453,
      "Shell": 79764,
      "Smarty": 70819,
      "Dockerfile": 57349,
      "Makefile": 1915,
      "Roff": 911
    },
    "commit_activity": {
      "total_commits_last_year": 325,
      "avg_commits_per_week": 6.25,
      "days_active_last_year": 161
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:15:48.369791"
  }
}