{
  "cve_id": "CVE-2023-29507",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "905cdd7c421dbf8c565557cdc773ab1aa9028f83",
    "related_commits": [
      "905cdd7c421dbf8c565557cdc773ab1aa9028f83",
      "905cdd7c421dbf8c565557cdc773ab1aa9028f83"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "905cdd7c421dbf8c565557cdc773ab1aa9028f83",
      "commit_date": "2022-11-17T11:11:38Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": {
          "total_commits": 1946,
          "average_weekly_commits": 2.0355648535564854,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 284
        }
      },
      "commit_message": {
        "title": "XWIKI-20380: Add missing check on document authors",
        "length": 50,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 183,
        "additions": 180,
        "deletions": 3
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/Document.java",
          "status": "modified",
          "additions": 26,
          "deletions": 3,
          "patch": "@@ -43,6 +43,7 @@\n import org.xwiki.context.ExecutionContext;\n import org.xwiki.display.internal.DocumentDisplayerParameters;\n import org.xwiki.model.document.DocumentAuthors;\n+import org.xwiki.model.internal.document.SafeDocumentAuthors;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n@@ -2161,6 +2162,9 @@ public boolean hasAccessLevel(String level, String user)\n     /**\n      * Verifies if the user identified by {@code userReference} has the access identified by {@code right} on this\n      * document.\n+     * Note that this method does not override {@link Api#hasAccess(Right, DocumentReference)}: they share same\n+     * signature but on the {@code Api} one the {@link DocumentReference} parameter is about the entity where to check\n+     * the right, while here it's about the user to check right for.\n      * \n      * @param right the right to check\n      * @param userReference the user to check the right for\n@@ -2172,6 +2176,19 @@ public boolean hasAccess(Right right, DocumentReference userReference)\n         return getAuthorizationManager().hasAccess(right, userReference, getDocumentReference());\n     }\n \n+    /**\n+     * Verifies if the context user has the access identified by {@code right} on the current context document.\n+     * @param right the right to check\n+     * @return {@code true} if the user has the specified right on this document, {@code false} otherwise\n+     * @since 14.10RC1\n+     * @since 14.4.7\n+     */\n+    @Unstable\n+    public boolean hasAccess(Right right)\n+    {\n+        return hasAccess(right, getXWikiContext().getUserReference());\n+    }\n+\n     public boolean getLocked()\n     {\n         try {\n@@ -2595,7 +2612,7 @@ public void save(String comment, boolean minorEdit) throws XWikiException\n     {\n         if (hasAccessLevel(\"edit\")) {\n \n-            DocumentAuthors authors = this.getAuthors();\n+            DocumentAuthors authors = getDoc().getAuthors();\n             authors.setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));\n             // If the current author does not have PR don't let it set current user as author of the saved document\n             // since it can lead to right escalation\n@@ -2692,7 +2709,7 @@ public void saveAsAuthor(String comment, boolean minorEdit) throws XWikiExceptio\n     {\n         XWikiContext xcontext = getXWikiContext();\n \n-        getAuthors()\n+        getDoc().getAuthors()\n             .setOriginalMetadataAuthor(getCurrentUserReferenceResolver().resolve(CurrentUserReference.INSTANCE));\n         DocumentReference author = getEffectiveAuthorReference();\n         if (hasAccess(Right.EDIT, author)) {\n@@ -3310,6 +3327,12 @@ public int getLocalReferenceMaxLength()\n     @Unstable\n     public DocumentAuthors getAuthors()\n     {\n-        return doc.getAuthors();\n+        if (this.hasAccess(Right.PROGRAM)) {\n+            // We're using getDoc here to ensure to have a cloned doc\n+            return getDoc().getAuthors();\n+        } else {\n+            // in this case we don't care if the doc is cloned or not since it's readonly\n+            return new SafeDocumentAuthors(this.doc.getAuthors());\n+        }\n     }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/org/xwiki/model/internal/document/SafeDocumentAuthors.java",
          "status": "added",
          "additions": 117,
          "deletions": 0,
          "patch": "@@ -0,0 +1,117 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.model.internal.document;\n+\n+import java.util.Objects;\n+\n+import org.xwiki.model.document.DocumentAuthors;\n+import org.xwiki.script.internal.safe.AbstractSafeObject;\n+import org.xwiki.script.wrap.AbstractWrappingObject;\n+import org.xwiki.user.UserReference;\n+\n+/**\n+ * Safe implementation of {@link DocumentAuthors} that doesn't allow to use any setters. This implementation aims at\n+ * being used in script services. All setters throw an {@link UnsupportedOperationException}.\n+ *\n+ * @version $Id$\n+ * @since 14.10RC1\n+ * @since 14.4.7\n+ */\n+public class SafeDocumentAuthors extends AbstractWrappingObject<DocumentAuthors> implements DocumentAuthors\n+{\n+    /**\n+     * Default constructor.\n+     *\n+     * @param documentAuthors the wrapped authors to use for getters.\n+     */\n+    public SafeDocumentAuthors(DocumentAuthors documentAuthors)\n+    {\n+        super(documentAuthors);\n+    }\n+\n+    @Override\n+    public UserReference getContentAuthor()\n+    {\n+        return getWrapped().getContentAuthor();\n+    }\n+\n+    @Override\n+    public void setContentAuthor(UserReference contentAuthor)\n+    {\n+        throw new UnsupportedOperationException(AbstractSafeObject.FORBIDDEN);\n+    }\n+\n+    @Override\n+    public UserReference getEffectiveMetadataAuthor()\n+    {\n+        return getWrapped().getEffectiveMetadataAuthor();\n+    }\n+\n+    @Override\n+    public void setEffectiveMetadataAuthor(UserReference metadataAuthor)\n+    {\n+        throw new UnsupportedOperationException(AbstractSafeObject.FORBIDDEN);\n+    }\n+\n+    @Override\n+    public UserReference getOriginalMetadataAuthor()\n+    {\n+        return getWrapped().getOriginalMetadataAuthor();\n+    }\n+\n+    @Override\n+    public void setOriginalMetadataAuthor(UserReference originalMetadataAuthor)\n+    {\n+        throw new UnsupportedOperationException(AbstractSafeObject.FORBIDDEN);\n+    }\n+\n+    @Override\n+    public UserReference getCreator()\n+    {\n+        return getWrapped().getCreator();\n+    }\n+\n+    @Override\n+    public void setCreator(UserReference creator)\n+    {\n+        throw new UnsupportedOperationException(AbstractSafeObject.FORBIDDEN);\n+    }\n+\n+    @Override\n+    public void copyAuthors(DocumentAuthors documentAuthors)\n+    {\n+        throw new UnsupportedOperationException(AbstractSafeObject.FORBIDDEN);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj)\n+    {\n+        if (obj instanceof SafeDocumentAuthors) {\n+            return Objects.equals(this.getWrapped(), ((SafeDocumentAuthors) obj).getWrapped());\n+        }\n+        return super.equals(obj);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return super.hashCode();\n+    }\n+}"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/api/DocumentTest.java",
          "status": "modified",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -24,9 +24,12 @@\n import org.junit.jupiter.api.Test;\n import org.xwiki.component.manager.ComponentLookupException;\n import org.xwiki.component.util.DefaultParameterizedType;\n+import org.xwiki.model.document.DocumentAuthors;\n+import org.xwiki.model.internal.document.SafeDocumentAuthors;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.ObjectReference;\n import org.xwiki.observation.ObservationManager;\n+import org.xwiki.security.authorization.AuthorizationManager;\n import org.xwiki.security.authorization.Right;\n import org.xwiki.test.junit5.mockito.MockComponent;\n import org.xwiki.test.mockito.MockitoComponentManager;\n@@ -47,11 +50,15 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.ArgumentMatchers.isNull;\n import static org.mockito.ArgumentMatchers.same;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n @OldcoreTest\n@@ -353,4 +360,34 @@ void saveAsAuthorWhenNoPR(MockitoComponentManager componentManager) throws XWiki\n \n         assertEquals(userContextReference, document.getAuthors().getEffectiveMetadataAuthor());\n     }\n+\n+    @Test\n+    void getAuthors()\n+    {\n+        DocumentAuthors documentAuthors = mock(DocumentAuthors.class);\n+        AuthorizationManager mockAuthorizationManager = this.oldcore.getMockAuthorizationManager();\n+        XWikiContext context = this.oldcore.getXWikiContext();\n+        DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n+        context.setUserReference(userReference);\n+        DocumentReference currentDocReference = mock(DocumentReference.class, \"currentDocRef\");\n+        XWikiDocument currentDoc = mock(XWikiDocument.class);\n+        when(currentDoc.getAuthors()).thenReturn(documentAuthors);\n+        Document document = new Document(currentDoc, context);\n+\n+        when(currentDoc.getDocumentReference()).thenReturn(currentDocReference);\n+\n+        when(mockAuthorizationManager.hasAccess(Right.PROGRAM, userReference, currentDocReference)).thenReturn(false);\n+        DocumentAuthors obtainedAuthors = document.getAuthors();\n+        assertTrue(obtainedAuthors instanceof SafeDocumentAuthors);\n+        assertEquals(new SafeDocumentAuthors(documentAuthors), obtainedAuthors);\n+\n+        verify(mockAuthorizationManager).hasAccess(Right.PROGRAM, userReference, currentDocReference);\n+\n+        when(mockAuthorizationManager.hasAccess(Right.PROGRAM, userReference, currentDocReference)).thenReturn(true);\n+        when(currentDoc.clone()).thenReturn(currentDoc);\n+        obtainedAuthors = document.getAuthors();\n+        assertSame(documentAuthors, obtainedAuthors);\n+        verify(mockAuthorizationManager, times(2)).hasAccess(Right.PROGRAM, userReference, currentDocReference);\n+        verify(currentDoc).clone();\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "20d352276c008c8ea2a1cf1ea9ceb84193098477",
            "date": "2025-01-25T19:15:09Z",
            "author_login": "mflorea"
          },
          {
            "sha": "e29b630b2d5a42b6f12ed3f0e4f59bd078f8a0f7",
            "date": "2025-01-24T07:34:53Z",
            "author_login": "mflorea"
          },
          {
            "sha": "023144daf732d04b085c2423ebd4552edd09ac5c",
            "date": "2025-01-24T15:44:30Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "a46579427dc202957d623b8e69a6a894243c6690",
            "date": "2025-01-21T16:53:45Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "3d661180a9075925c3d2d75816356925f32ae89d",
            "date": "2025-01-21T16:13:46Z",
            "author_login": "Sereza7"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-648",
    "description": "XWiki Commons are technical libraries common to several other top level XWiki projects. The Document script API returns directly a DocumentAuthors allowing to set any authors to the document, which in consequence can allow subsequent executions of scripts since this author is used for checking rights. The problem has been patched in XWiki 14.10 and 14.4.7 by returning a safe script API.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-16T07:15:53.187",
    "last_modified": "2024-11-21T07:57:11.830",
    "fix_date": "2022-11-17T11:11:38Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/905cdd7c421dbf8c565557cdc773ab1aa9028f83",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-pwfv-3cvg-9m4c",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20380",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/905cdd7c421dbf8c565557cdc773ab1aa9028f83",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-pwfv-3cvg-9m4c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20380",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.798753",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-25T19:23:49Z",
    "pushed_at": "2025-01-25T19:23:45Z",
    "size": 563394,
    "stars": 1035,
    "forks": 555,
    "open_issues": 143,
    "watchers": 1035,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34352251,
      "JavaScript": 2404688,
      "HTML": 388086,
      "Less": 318876,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115582,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 261
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:34:26.816515"
  }
}