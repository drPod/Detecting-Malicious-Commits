{
  "cve_id": "CVE-2023-30616",
  "github_data": {
    "repository": "epiphyt/form-block",
    "fix_commit": "cf0012fa0710d906c594346ba775c5dc433a9426",
    "related_commits": [
      "cf0012fa0710d906c594346ba775c5dc433a9426",
      "cf0012fa0710d906c594346ba775c5dc433a9426"
    ],
    "patch_url": "https://github.com/epiphyt/form-block/commit/cf0012fa0710d906c594346ba775c5dc433a9426.patch",
    "fix_commit_details": {
      "sha": "cf0012fa0710d906c594346ba775c5dc433a9426",
      "commit_date": "2023-04-20T09:33:39Z",
      "author": {
        "login": "MatzeKitt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "\ud83d\udd12\ufe0f Use nonce to prevent CSRF",
        "length": 38,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 162,
        "additions": 153,
        "deletions": 9
      },
      "files": [
        {
          "filename": "assets/js/form.js",
          "status": "modified",
          "additions": 71,
          "deletions": 0,
          "patch": "@@ -6,9 +6,77 @@ document.addEventListener( 'DOMContentLoaded', () => {\n \tconst forms = document.querySelectorAll( '.wp-block-form-block-form' );\n \t\n \tfor ( const form of forms ) {\n+\t\tgetNonce( form );\n \t\tform.addEventListener( 'submit', submitForm );\n \t}\n \t\n+\t/**\n+\t * Get a nonce via Ajax.\n+\t * \n+\t * @since\t1.0.2\n+\t * @param {HTMLElement} form \n+\t */\n+\tfunction getNonce( form ) {\n+\t\tconst formData = new FormData();\n+\t\tconst xhr = new XMLHttpRequest();\n+\t\t\n+\t\tformData.set( 'action', 'form-block-create-nonce' );\n+\t\tformData.set( 'form_id', form.querySelector( '[name=\"_form_id\"]' ).value );\n+\t\t\n+\t\txhr.open( 'POST', formBlockData.ajaxUrl, true );\n+\t\txhr.send( formData );\n+\t\txhr.onreadystatechange = () => {\n+\t\t\tif ( xhr.readyState !== 4 ) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tif ( xhr.status === 200 || xhr.status === 201 ) {\n+\t\t\t\ttry {\n+\t\t\t\t\tconst response = JSON.parse( xhr.responseText );\n+\t\t\t\t\t\n+\t\t\t\t\tif ( response.success ) {\n+\t\t\t\t\t\tlet nonceField = form.querySelector( '[name=\"_wpnonce\"]' );\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif ( ! nonceField ) {\n+\t\t\t\t\t\t\tnonceField = document.createElement( 'input' );\n+\t\t\t\t\t\t\tnonceField.name = '_wpnonce';\n+\t\t\t\t\t\t\tnonceField.type = 'hidden';\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tform.appendChild( nonceField );\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tnonceField.value = response?.data?.nonce;\n+\t\t\t\t\t}\n+\t\t\t\t\telse if ( response?.data?.message ) {\n+\t\t\t\t\t\t// server-side error message\n+\t\t\t\t\t\tsetSubmitMessage( form, 'error', response?.data?.message );\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t// disable submit button if nonce creation was not successful\n+\t\t\t\t\t\tconst submitButton = form.querySelector( '[type=\"submit\"]' );\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif ( submitButton ) {\n+\t\t\t\t\t\t\tsubmitButton.disabled = true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t// generic error message\n+\t\t\t\t\t\tsetSubmitMessage( form, 'error', formBlockData.i18n.backendError );\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch ( error ) {\n+\t\t\t\t\t// invalid data from server\n+\t\t\t\t\tsetSubmitMessage( form, 'error', formBlockData.i18n.backendError );\n+\t\t\t\t\tconsole.error( error );\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t// request completely failed\n+\t\t\t\tsetSubmitMessage( form, 'error', formBlockData.i18n.requestError );\n+\t\t\t\tconsole.error( xhr.responseText );\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * Submit the form.\n \t * \n@@ -73,6 +141,9 @@ document.addEventListener( 'DOMContentLoaded', () => {\n \t\t\t\t\t\tsetSubmitMessage( form, 'error', formBlockData.i18n.backendError );\n \t\t\t\t\t\tconsole.error( error );\n \t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t// get a new nonce for another request\n+\t\t\t\t\tgetNonce( form );\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\t// request completely failed"
        },
        {
          "filename": "inc/form-data/class-data.php",
          "status": "modified",
          "additions": 67,
          "deletions": 3,
          "patch": "@@ -24,10 +24,40 @@ final class Data {\n \t * Initialize the class.\n \t */\n \tpublic function init(): void {\n+\t\tadd_action( 'wp_ajax_form-block-create-nonce', [ $this, 'create_nonce' ] );\n \t\tadd_action( 'wp_ajax_form-block-submit', [ $this, 'get_request' ] );\n+\t\tadd_action( 'wp_ajax_nopriv_form-block-create-nonce', [ $this, 'create_nonce' ] );\n \t\tadd_action( 'wp_ajax_nopriv_form-block-submit', [ $this, 'get_request' ] );\n \t}\n \t\n+\t/**\n+\t * Create a nonce via Ajax.\n+\t * \n+\t * @since\t1.0.2\n+\t */\n+\tpublic function create_nonce(): void {\n+\t\tif ( empty( $_POST['form_id'] ) ) { // phpcs:ignore WordPress.Security.NonceVerification.Missing\n+\t\t\twp_send_json_error(\n+\t\t\t\t[\n+\t\t\t\t\t'message' => __( 'The form could not be prepared to submit requests. Please reload the page.', 'form-block' ),\n+\t\t\t\t]\n+\t\t\t);\n+\t\t}\n+\t\t\n+\t\t$id = sanitize_text_field( wp_unslash( $_POST['form_id'] ) ); // phpcs:ignore WordPress.Security.NonceVerification.Missing\n+\t\t\n+\t\tif ( ! $this->is_valid_form_id( $id ) ) {\n+\t\t\twp_send_json_error();\n+\t\t}\n+\t\t\n+\t\twp_send_json_success(\n+\t\t\t[\n+\t\t\t\t'nonce' => wp_create_nonce( 'form_block_submit_' . $id ),\n+\t\t\t],\n+\t\t\t201\n+\t\t);\n+\t}\n+\t\n \t/**\n \t * Get form data.\n \t * \n@@ -93,7 +123,17 @@ public static function get_instance(): Data {\n \t * Get the request data.\n \t */\n \tpublic function get_request(): void {\n-\t\tif ( ! isset( $_POST['_form_id'] ) || ! isset( $_POST['_town'] ) ) { // phpcs:ignore WordPress.Security.NonceVerification.Missing\n+\t\tif ( empty( $_POST['_wpnonce'] ) ) {\n+\t\t\t/**\n+\t\t\t * Fires after verifying that the nonce is empty or absent.\n+\t\t\t */\n+\t\t\tdo_action( 'form_block_empty_nonce' );\n+\t\t\t\n+\t\t\t// explicitly return success so that bad actors cannot learn\n+\t\t\twp_send_json_success();\n+\t\t}\n+\t\t\n+\t\tif ( ! isset( $_POST['_form_id'] ) || ! isset( $_POST['_town'] ) ) {\n \t\t\t/**\n \t\t\t * Fires after a request is considered invalid.\n \t\t\t */\n@@ -103,6 +143,18 @@ public function get_request(): void {\n \t\t\twp_send_json_success();\n \t\t}\n \t\t\n+\t\t$this->form_id = sanitize_text_field( wp_unslash( $_POST['_form_id'] ) );\n+\t\t\n+\t\tif ( ! wp_verify_nonce( sanitize_text_field( wp_unslash( $_POST['_wpnonce'] ) ), 'form_block_submit_' . $this->form_id ) ) {\n+\t\t\t/**\n+\t\t\t * Fires after a request has an invalid nonce.\n+\t\t\t */\n+\t\t\tdo_action( 'form_block_invalid_nonce' );\n+\t\t\t\n+\t\t\t// explicitly return success so that bad actors cannot learn\n+\t\t\twp_send_json_success();\n+\t\t}\n+\t\t\n \t\tif ( $this->is_honeypot_filled() ) {\n \t\t\t/**\n \t\t\t * Fires after a request is considered invalid due to a filled honeypot.\n@@ -113,8 +165,6 @@ public function get_request(): void {\n \t\t\twp_send_json_success();\n \t\t}\n \t\t\n-\t\t$this->form_id = sanitize_text_field( wp_unslash( $_POST['_form_id'] ) ); // phpcs:ignore WordPress.Security.NonceVerification.Missing\n-\t\t\n \t\t/**\n \t\t * Fires before data has been validated.\n \t\t * \n@@ -196,6 +246,20 @@ private function is_honeypot_filled(): bool {\n \t\treturn $is_filled;\n \t}\n \t\n+\t/**\n+\t * Check wheter a form ID is valid. That means, there are form fields stored.\n+\t * \n+\t * @since\t1.0.2\n+\t * \n+\t * @param\tstring\t$form_id The form ID to check\n+\t * @return\tbool Weter a form ID is valid\n+\t */\n+\tpublic function is_valid_form_id( string $form_id ): bool {\n+\t\t$maybe_data = (array) get_option( 'form_block_data_' . $form_id, [] );\n+\t\t\n+\t\treturn ! empty( $maybe_data['fields'] );\n+\t}\n+\t\n \t/**\n \t * Send form submission to the recipients.\n \t * "
        },
        {
          "filename": "inc/form-data/class-validation.php",
          "status": "modified",
          "additions": 15,
          "deletions": 6,
          "patch": "@@ -16,6 +16,17 @@ final class Validation {\n \t */\n \tpublic static $instance;\n \t\n+\t/**\n+\t * @since\t1.0.2\n+\t * @var\t\tarray List of field names used by the system\n+\t */\n+\tprivate $system_field_names = [\n+\t\t'_form_id',\n+\t\t'_town',\n+\t\t'_wpnonce',\n+\t\t'action',\n+\t];\n+\t\n \t/**\n \t * Validate form fields by allowed names.\n \t *\n@@ -128,11 +139,7 @@ private function by_attributes( $value, array $attributes ): array {\n \tprivate function get_allowed_names( array $form_data ): array {\n \t\tForm_Block::get_instance()->reset_block_name_attributes();\n \t\t\n-\t\t$allowed_names = [\n-\t\t\t'_form_id',\n-\t\t\t'_town',\n-\t\t\t'action',\n-\t\t];\n+\t\t$allowed_names = $this->system_field_names;\n \t\t\n \t\tforeach ( $form_data['fields'] as $field ) {\n \t\t\t$field_name = Form_Block::get_instance()->get_block_name_attribute( $field );\n@@ -195,7 +202,9 @@ public function fields(): array {\n \t\t}\n \t\t// phpcs:enable\n \t\t\n-\t\tunset( $validated['_form_id'], $validated['action'], $validated['_town'] );\n+\t\tforeach ( $this->system_field_names as $name ) {\n+\t\t\tunset( $validated[ $name ] );\n+\t\t}\n \t\t\n \t\t// remove empty fields\n \t\tforeach ( $validated as $key => $value ) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "47534bd1c1c79159dac0892e7f7a390f9e25553b",
            "date": "2024-12-29T10:11:37Z",
            "author_login": "MatzeKitt"
          },
          {
            "sha": "1bb9744eb6a793af7135a78b5d8c50eabb148f50",
            "date": "2024-12-21T18:15:30Z",
            "author_login": "MatzeKitt"
          },
          {
            "sha": "68e1cfad659a3444a773ee2e92b3a9095e84ce74",
            "date": "2024-12-16T10:08:45Z",
            "author_login": "MatzeKitt"
          },
          {
            "sha": "d09da6d1e976b0d29a90c9b928ff5d502e7fbf72",
            "date": "2024-12-16T10:06:56Z",
            "author_login": "MatzeKitt"
          },
          {
            "sha": "b8ade780c62427c2132f63588bb1bd041c200b07",
            "date": "2024-12-16T10:01:59Z",
            "author_login": "MatzeKitt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-352",
    "description": "Form block is a wordpress plugin designed to make form creation easier. Versions prior to 1.0.2 are subject to a Cross-Site Request Forgery due to a missing nonce check. There is potential for a Cross Site Request Forgery for all form blocks, since it allows to send requests to the forms from any website without a user noticing. Users are advised to upgrade to version 1.0.2. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-20T18:15:07.367",
    "last_modified": "2024-11-21T08:00:30.957",
    "fix_date": "2023-04-20T09:33:39Z"
  },
  "references": [
    {
      "url": "https://github.com/epiphyt/form-block/commit/cf0012fa0710d906c594346ba775c5dc433a9426",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/epiphyt/form-block/security/advisories/GHSA-j4c2-7p87-q824",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/epiphyt/form-block/commit/cf0012fa0710d906c594346ba775c5dc433a9426",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/epiphyt/form-block/security/advisories/GHSA-j4c2-7p87-q824",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.817856",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "form-block",
    "owner": "epiphyt",
    "created_at": "2023-03-19T14:04:06Z",
    "updated_at": "2024-12-29T10:11:47Z",
    "pushed_at": "2024-12-29T10:11:44Z",
    "size": 3149,
    "stars": 5,
    "forks": 0,
    "open_issues": 9,
    "watchers": 5,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 123781,
      "JavaScript": 101708,
      "SCSS": 10051
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T21:22:26.606753"
  }
}