{
  "cve_id": "CVE-2023-30629",
  "github_data": {
    "repository": "vyperlang/vyper",
    "fix_commit": "851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae",
    "related_commits": [
      "851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae",
      "851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae"
    ],
    "patch_url": "https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae.patch",
    "fix_commit_details": {
      "sha": "851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae",
      "commit_date": "2023-04-24T17:41:02Z",
      "author": {
        "login": "charles-cooper",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-w9g2-3w7p-72g9",
        "length": 119,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 40,
        "additions": 33,
        "deletions": 7
      },
      "files": [
        {
          "filename": "tests/parser/functions/test_raw_call.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -296,8 +296,10 @@ def test_checkable_raw_call(get_contract, assert_tx_failed):\n def fail1(should_raise: bool):\n     if should_raise:\n         raise \"fail\"\n+\n # test both paths for raw_call -\n # they are different depending if callee has or doesn't have returntype\n+# (fail2 fails because of staticcall)\n @external\n def fail2(should_raise: bool) -> int128:\n     if should_raise:\n@@ -320,6 +322,7 @@ def foo(_addr: address, should_raise: bool) -> uint256:\n     )\n     assert success == (not should_raise)\n     return 1\n+\n @external\n @view\n def bar(_addr: address, should_raise: bool) -> uint256:\n@@ -334,6 +337,19 @@ def bar(_addr: address, should_raise: bool) -> uint256:\n     )\n     assert success == (not should_raise)\n     return 2\n+\n+# test max_outsize not set case\n+@external\n+@nonpayable\n+def baz(_addr: address, should_raise: bool) -> uint256:\n+    success: bool = True\n+    success = raw_call(\n+        _addr,\n+        _abi_encode(should_raise, method_id=method_id(\"fail1(bool)\")),\n+        revert_on_failure=False,\n+    )\n+    assert success == (not should_raise)\n+    return 3\n     \"\"\"\n \n     target = get_contract(target_source)\n@@ -343,6 +359,8 @@ def bar(_addr: address, should_raise: bool) -> uint256:\n     assert caller.foo(target.address, False) == 1\n     assert caller.bar(target.address, True) == 2\n     assert caller.bar(target.address, False) == 2\n+    assert caller.baz(target.address, True) == 3\n+    assert caller.baz(target.address, False) == 3\n \n \n uncompilable_code = ["
        },
        {
          "filename": "vyper/builtins/functions.py",
          "status": "modified",
          "additions": 15,
          "deletions": 7,
          "patch": "@@ -1188,7 +1188,9 @@ def build_IR(self, expr, args, kwargs, context):\n \n             if revert_on_failure:\n                 typ = bytes_ty\n+                # check the call success flag, and store returndata in memory\n                 ret_ir = [\"seq\", check_external_call(call_ir), store_output_size]\n+                return IRnode.from_list(ret_ir, typ=typ, location=MEMORY)\n             else:\n                 typ = TupleT([bool_ty, bytes_ty])\n                 ret_ir = [\n@@ -1198,16 +1200,22 @@ def build_IR(self, expr, args, kwargs, context):\n                     IRnode.from_list(call_ir, typ=bool_ty),\n                     IRnode.from_list(store_output_size, typ=bytes_ty, location=MEMORY),\n                 ]\n+                # return an IR tuple of call success flag and returndata pointer\n+                return IRnode.from_list(ret_ir, typ=typ)\n+\n+        # max_outsize is 0.\n+\n+        if not revert_on_failure:\n+            # return call flag as stack item\n+            typ = bool_ty\n+            return IRnode.from_list(call_ir, typ=typ)\n \n         else:\n-            if revert_on_failure:\n-                typ = None\n-                ret_ir = check_external_call(call_ir)\n-            else:\n-                typ = bool_ty\n-                ret_ir = call_ir\n+            # check the call success flag and don't return anything\n+            ret_ir = check_external_call(call_ir)\n+            return IRnode.from_list(ret_ir, typ=None)\n \n-        return IRnode.from_list(ret_ir, typ=typ, location=MEMORY)\n+        raise CompilerPanic(\"unreachable!\")\n \n \n class Send(BuiltinFunction):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c208b954564e8fffdd4c86cc3c497e0c3df1aeec",
            "date": "2025-01-14T17:09:31Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "db8dcc713168b16977b5b07267653c9024f6acea",
            "date": "2025-01-12T17:01:49Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "10e91d5a2ba6eaab2f7194fd86cefb7a0ff19964",
            "date": "2025-01-12T16:34:14Z",
            "author_login": "tserg"
          },
          {
            "sha": "43259f8953672ef7a19167c6c048d020d82e05da",
            "date": "2025-01-12T16:32:46Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "9b5523e6131335c81714e7e8af63cc49404f5ce7",
            "date": "2025-01-12T16:19:30Z",
            "author_login": "charles-cooper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-670",
    "description": "Vyper is a Pythonic Smart Contract Language for the ethereum virtual machine. In versions 0.3.1 through 0.3.7, the Vyper compiler generates the wrong bytecode. Any contract that uses the `raw_call` with `revert_on_failure=False` and `max_outsize=0` receives the wrong response from `raw_call`. Depending on the memory garbage, the result can be either `True` or `False`. A patch is available and, as of time of publication, anticipated to be part of Vyper 0.3.8. As a workaround, one may always put  `max_outsize>0`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-24T22:15:10.030",
    "last_modified": "2024-11-21T08:00:32.820",
    "fix_date": "2023-04-24T17:41:02Z"
  },
  "references": [
    {
      "url": "https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/lidofinance/gate-seals/pull/5/files",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-w9g2-3w7p-72g9",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.vyperlang.org/en/v0.3.7/built-in-functions.html#raw_call",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/lidofinance/gate-seals/blob/051593e74df01a4131c485b4fda52e691cd4b7d8/contracts/GateSeal.vy#L164",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/lidofinance/gate-seals/pull/5/files",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/851f7a1b3aa2a36fd041e3d0ed38f9355a58c8ae",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-w9g2-3w7p-72g9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.832336",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vyper",
    "owner": "vyperlang",
    "created_at": "2016-11-11T08:56:41Z",
    "updated_at": "2025-01-13T17:32:27Z",
    "pushed_at": "2025-01-12T17:01:50Z",
    "size": 11939,
    "stars": 4948,
    "forks": 817,
    "open_issues": 489,
    "watchers": 4948,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 2662211,
      "Makefile": 2222,
      "Batchfile": 1614,
      "Dockerfile": 1145,
      "Shell": 472
    },
    "commit_activity": {
      "total_commits_last_year": 317,
      "avg_commits_per_week": 6.096153846153846,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:48:09.728520"
  }
}