{
  "cve_id": "CVE-2023-30846",
  "github_data": {
    "repository": "microsoft/typed-rest-client",
    "fix_commit": "f9ff755631b982ee1303dfc3e3c823d0d31233e8",
    "related_commits": [
      "f9ff755631b982ee1303dfc3e3c823d0d31233e8",
      "f9ff755631b982ee1303dfc3e3c823d0d31233e8"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f9ff755631b982ee1303dfc3e3c823d0d31233e8",
      "commit_date": "2020-04-01T13:08:10Z",
      "author": {
        "login": "yahavi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Disable authentications on redirections (#207)",
        "length": 137,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 176,
        "additions": 170,
        "deletions": 6
      },
      "files": [
        {
          "filename": "lib/handlers/basiccreds.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -6,16 +6,25 @@ import ifm = require('../Interfaces');\n export class BasicCredentialHandler implements ifm.IRequestHandler {\n     username: string;\n     password: string;\n+    allowCrossOriginAuthentication: boolean;\n+    origin: string;\n \n-    constructor(username: string, password: string) {\n+    constructor(username: string, password: string, allowCrossOriginAuthentication?: boolean) {\n         this.username = username;\n         this.password = password;\n+        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;\n     }\n \n     // currently implements pre-authorization\n     // TODO: support preAuth = false where it hooks on 401\n     prepareRequest(options:any): void {\n-        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n+        if (!this.origin) {\n+            this.origin = options.host;\n+        }\n+        // If this is a redirection, don't set the Authorization header\n+        if (this.origin === options.host || this.allowCrossOriginAuthentication) {\n+            options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n+        }\n         options.headers['X-TFS-FedAuthRedirect'] = 'Suppress';\n     }\n "
        },
        {
          "filename": "lib/handlers/bearertoken.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -5,15 +5,24 @@ import ifm = require('../Interfaces');\n \n export class BearerCredentialHandler implements ifm.IRequestHandler {\n     token: string;\n+    allowCrossOriginAuthentication: boolean;\n+    origin: string;\n \n-    constructor(token: string) {\n+    constructor(token: string, allowCrossOriginAuthentication?: boolean) {\n         this.token = token;\n+        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;\n     }\n \n     // currently implements pre-authorization\n     // TODO: support preAuth = false where it hooks on 401\n     prepareRequest(options:any): void {\n-        options.headers['Authorization'] = `Bearer ${this.token}`;\n+        if (!this.origin) {\n+            this.origin = options.host;\n+        }\n+        // If this is a redirection, don't set the Authorization header\n+        if (this.origin === options.host || this.allowCrossOriginAuthentication) {\n+            options.headers['Authorization'] = `Bearer ${this.token}`;\n+        }\n         options.headers['X-TFS-FedAuthRedirect'] = 'Suppress';\n     }\n "
        },
        {
          "filename": "lib/handlers/personalaccesstoken.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -5,15 +5,24 @@ import ifm = require('../Interfaces');\n \n export class PersonalAccessTokenCredentialHandler implements ifm.IRequestHandler {\n     token: string;\n+    allowCrossOriginAuthentication: boolean;\n+    origin: string;\n \n-    constructor(token: string) {\n+    constructor(token: string, allowCrossOriginAuthentication?: boolean) {\n         this.token = token;\n+        this.allowCrossOriginAuthentication = allowCrossOriginAuthentication;\n     }\n \n     // currently implements pre-authorization\n     // TODO: support preAuth = false where it hooks on 401\n     prepareRequest(options:any): void {\n-        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n+        if (!this.origin) {\n+            this.origin = options.host;\n+        }\n+        // If this is a redirection, don't set the Authorization header\n+        if (this.origin === options.host || this.allowCrossOriginAuthentication) {\n+            options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n+        }\n         options.headers['X-TFS-FedAuthRedirect'] = 'Suppress';\n     }\n "
        },
        {
          "filename": "test/units/handlers.ts",
          "status": "modified",
          "additions": 137,
          "deletions": 0,
          "patch": "@@ -80,6 +80,50 @@ describe('Authentication Handlers Tests', function () {\n         assert(! asJson.success, \"success = false; Authentication should fail\");\n     });\n \n+    it('[Basic Auth] - does redirection request with basic auth', async() => {\n+        const url: string = 'http://microsoft.com';\n+        const redirectionUrl: string = 'http://jfrog.com';\n+        const user: string = _authHandlersOptions.basicAuth.username;\n+        const pass: string = _authHandlersOptions.basicAuth.password;\n+\n+        //Set nock for redirection with credentials\n+        const redirectAuthScope = nock(url)\n+            .get('/')\n+            .basicAuth({ user, pass })\n+            .reply(httpm.HttpCodes.MovedPermanently, undefined, {\n+                location: redirectionUrl\n+            });\n+\n+        //Set nock for request without expecting/matching Authorization header(s)\n+        nock(redirectionUrl)\n+            .matchHeader('authorization', (val: string | undefined) => !val )\n+            .get('/')\n+            .reply(httpm.HttpCodes.OK, {\n+                success: true,\n+                source: \"nock\"\n+            });\n+\n+        //Set nock for request with expecting/matching Authorization header(s)\n+        nock(redirectionUrl)\n+            .matchHeader('authorization', (val: string | undefined) => val )\n+            .get('/')\n+            .reply(httpm.HttpCodes.BadRequest, {\n+                success: false,\n+                source: \"nock\"\n+            });\n+\n+        const basicAuthHandler: hm.BasicCredentialHandler = new hm.BasicCredentialHandler(user, pass);\n+        let httpClient: httpm.HttpClient = new httpm.HttpClient('typed-rest-client-tests', [basicAuthHandler]);\n+        let httpResponse: httpm.HttpClientResponse = await httpClient.get(url);\n+        let body: string = await httpResponse.readBody();\n+        let asJson: any = JSON.parse(body);\n+\n+        assert(redirectAuthScope.isDone());\n+        assert(httpResponse.message.statusCode == httpm.HttpCodes.OK, \"status code should be 200 - OK\");\n+        assert(asJson.source === \"nock\", \"http get request should be intercepted by nock\");\n+        assert(asJson.success, \"Authentication should not occur in redirection to other hosts\");\n+    });\n+\n     it('[Basic Auth - Presigned] doesnt use auth when presigned', async() => {\n         const url: string = 'http://microsoft.com';\n         const user: string = _authHandlersOptions.basicAuth.username;\n@@ -165,6 +209,53 @@ describe('Authentication Handlers Tests', function () {\n         assert(! asJson.success, \"success = false; Authentication should fail\");\n     });\n \n+    it('[Personal Access Token] - does redirection request with PAT token auth', async() => {\n+        const url: string = 'http://microsoft.com';\n+        const redirectionUrl: string = 'http://jfrog.com';\n+        const secret: string = _authHandlersOptions.personalAccessToken.secret;\n+        const personalAccessToken: string = Buffer.from(`PAT:${secret}`).toString('base64');\n+        const expectedAuthHeader: string = `Basic ${personalAccessToken}`;\n+        const patAuthHandler: hm.PersonalAccessTokenCredentialHandler =\n+        new hm.PersonalAccessTokenCredentialHandler(secret);\n+\n+        //Nock request for redirection with expecting/matching Authorization header(s)\n+        const redirectAuthScope = nock(url)\n+            .matchHeader('Authorization', expectedAuthHeader)\n+            .matchHeader('X-TFS-FedAuthRedirect', 'Suppress')\n+            .get('/')\n+            .reply(httpm.HttpCodes.MovedPermanently, undefined, {\n+                location: redirectionUrl\n+            });\n+\n+        //Set nock for request without expecting/matching Authorization header(s)\n+        nock(redirectionUrl)\n+            .matchHeader('authorization', (val: string | undefined) => !val )\n+            .get('/')\n+            .reply(httpm.HttpCodes.OK, {\n+                success: true,\n+                source: \"nock\"\n+            });\n+\n+        //Set nock for request with expecting/matching Authorization header(s)\n+        nock(redirectionUrl)\n+            .matchHeader('authorization', (val: string | undefined) => val )\n+            .get('/')\n+            .reply(httpm.HttpCodes.BadRequest, {\n+                success: false,\n+                source: \"nock\"\n+            });\n+\n+        let httpClient: httpm.HttpClient = new httpm.HttpClient('typed-rest-client-tests', [patAuthHandler]);\n+        let httpResponse: httpm.HttpClientResponse = await httpClient.get(url);\n+        let body: string = await httpResponse.readBody();\n+        let asJson: any = JSON.parse(body);\n+\n+        assert(redirectAuthScope.isDone());\n+        assert(httpResponse.message.statusCode == httpm.HttpCodes.OK, \"status code should be 200 - OK\");\n+        assert(asJson.source === \"nock\", \"http get request should be intercepted by nock\");\n+        assert(asJson.success, \"Authentication should not occur in redirection to other hosts\");\n+    });\n+\n     it('[Bearer Token] - does basic http get request with bearer token authentication', async() => {\n         const url: string = 'http://microsoft.com';\n         const bearerToken: string = _authHandlersOptions.bearer.token;\n@@ -216,6 +307,52 @@ describe('Authentication Handlers Tests', function () {\n         assert(httpResponse.message.statusCode === httpm.HttpCodes.Unauthorized, \"statusCode returned should be 401 - Unauthorized\"); //statusCode is 401 - Unauthorized\n     });\n \n+    it('[Bearer Token] - does redirection request with bearer token authentication', async() => {\n+        const url: string = 'http://microsoft.com';\n+        const redirectionUrl: string = 'http://jfrog.com';\n+        const bearerToken: string = _authHandlersOptions.bearer.token;\n+\n+        const expectedAuthHeader: string = `Bearer ${bearerToken}`;\n+        const bearerTokenAuthHandler: hm.BearerCredentialHandler = new hm.BearerCredentialHandler(bearerToken);\n+\n+        //Nock request for redirection with expecting/matching Authorization header(s)\n+        const redirectAuthScope = nock(url)\n+            .matchHeader('Authorization', expectedAuthHeader)\n+            .matchHeader('X-TFS-FedAuthRedirect', 'Suppress')\n+            .get('/')\n+            .reply(httpm.HttpCodes.MovedPermanently, undefined, {\n+                location: redirectionUrl\n+            });\n+\n+        //Set nock for request without expecting/matching Authorization header(s)\n+        nock(redirectionUrl)\n+            .matchHeader('authorization', (val: string | undefined) => !val )\n+            .get('/')\n+            .reply(httpm.HttpCodes.OK, {\n+                success: true,\n+                source: \"nock\"\n+            });\n+\n+        //Set nock for request with expecting/matching Authorization header(s)\n+        nock(redirectionUrl)\n+            .matchHeader('authorization', (val: string | undefined) => val )\n+            .get('/')\n+            .reply(httpm.HttpCodes.BadRequest, {\n+                success: false,\n+                source: \"nock\"\n+            });\n+\n+        let httpClient: httpm.HttpClient = new httpm.HttpClient('typed-rest-client-tests', [bearerTokenAuthHandler]);\n+        let httpResponse: httpm.HttpClientResponse = await httpClient.get(url);\n+        let body: string = await httpResponse.readBody();\n+        let asJson: any = JSON.parse(body);\n+\n+        assert(redirectAuthScope.isDone());\n+        assert(httpResponse.message.statusCode == httpm.HttpCodes.OK, \"status code should be 200 - OK\");\n+        assert(asJson.source === \"nock\", \"http get request should be intercepted by nock\");\n+        assert(asJson.success, \"Authentication should not occur in redirection to other hosts\");\n+    });\n+\n     it('[NTLM] - does basic http get request with NTLM Authentication', async() => {\n         /**\n          * Following NTLM Authentication Example on:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f717982eade23dc660e48c65f88e854da5d63088",
            "date": "2025-01-17T06:17:10Z",
            "author_login": "tarunramsinghani"
          },
          {
            "sha": "92f407b74bb80dba0de725628d65aa22d0dae57b",
            "date": "2024-09-19T15:06:44Z",
            "author_login": "aleksandrlevochkin"
          },
          {
            "sha": "76548788a6609979abb8d76fc37c30764829040a",
            "date": "2024-09-09T09:56:35Z",
            "author_login": "ivanduplenskikh"
          },
          {
            "sha": "7ad2a7a001e5fd78c08e466908ed63225a892db9",
            "date": "2024-07-08T07:51:55Z",
            "author_login": "DenisRumyantsev"
          },
          {
            "sha": "1815244e8f44dad98a63e4a6d637659a8a59cddd",
            "date": "2024-06-26T09:57:09Z",
            "author_login": "DenisNikulin5"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-522",
    "description": "typed-rest-client is a library for Node Rest and Http Clients with typings for use with TypeScript. Users of the typed-rest-client library version 1.7.3 or lower are vulnerable to leak authentication data to 3rd parties. The flow of the vulnerability is as follows: First, send any request with `BasicCredentialHandler`, `BearerCredentialHandler` or `PersonalAccessTokenCredentialHandler`. Second, the target host may return a redirection (3xx), with a link to a second host. Third, the next request will use the credentials to authenticate with the second host, by setting the `Authorization` header. The expected behavior is that the next request will *NOT* set the `Authorization` header. The problem was fixed in version 1.8.0. There are no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-26T21:15:09.380",
    "last_modified": "2024-11-21T08:00:57.680",
    "fix_date": "2020-04-01T13:08:10Z"
  },
  "references": [
    {
      "url": "https://github.com/microsoft/typed-rest-client/commit/f9ff755631b982ee1303dfc3e3c823d0d31233e8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/microsoft/typed-rest-client/security/advisories/GHSA-558p-m34m-vpmq",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230601-0008/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/microsoft/typed-rest-client/commit/f9ff755631b982ee1303dfc3e3c823d0d31233e8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/microsoft/typed-rest-client/security/advisories/GHSA-558p-m34m-vpmq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230601-0008/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.843783",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "typed-rest-client",
    "owner": "microsoft",
    "created_at": "2017-01-09T16:35:28Z",
    "updated_at": "2025-01-17T06:17:12Z",
    "pushed_at": "2025-01-17T06:17:14Z",
    "size": 1289,
    "stars": 676,
    "forks": 117,
    "open_issues": 20,
    "watchers": 676,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "TypeScript": 148109,
      "JavaScript": 25273
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:14:49.995037"
  }
}