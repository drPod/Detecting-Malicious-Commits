{
  "cve_id": "CVE-2023-30857",
  "github_data": {
    "repository": "aedart/ion",
    "fix_commit": "c3e2ee08710d4164d796ecb66ed291335dae9291",
    "related_commits": [
      "c3e2ee08710d4164d796ecb66ed291335dae9291",
      "c3e2ee08710d4164d796ecb66ed291335dae9291"
    ],
    "patch_url": "https://github.com/aedart/ion/commit/c3e2ee08710d4164d796ecb66ed291335dae9291.patch",
    "fix_commit_details": {
      "sha": "c3e2ee08710d4164d796ecb66ed291335dae9291",
      "commit_date": "2023-04-28T16:25:43Z",
      "author": {
        "login": "aedart",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix possible prototype pollution",
        "length": 205,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 2,
        "additions": 1,
        "deletions": 1
      },
      "files": [
        {
          "filename": "packages/support/src/meta/meta.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -217,7 +217,7 @@ function resolveMetadataRecord(owner: object, context: Context, useMetaFromConte\n     }\n \n     // Obtain record from registry, or create new empty object.\n-    let metadata: MetadataRecord = registry.get(owner) ?? {};\n+    let metadata: MetadataRecord = registry.get(owner) ?? Object.create(null);\n \n     // In case that the owner has Symbol.metadata defined (e.g. from base class),\n     // then merge it current metadata. This ensures that inheritance works as"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d0c3bf677b4aa40f9255817114a83d426d443f5",
            "date": "2025-01-01T12:52:31Z",
            "author_login": "aedart"
          },
          {
            "sha": "892127a89cf2b9add69f28422e4215c5858fb182",
            "date": "2025-01-01T12:50:07Z",
            "author_login": "aedart"
          },
          {
            "sha": "a5b4a08c8787134f0502006824757d29f74cf049",
            "date": "2025-01-01T12:48:51Z",
            "author_login": "aedart"
          },
          {
            "sha": "3bb33a1d390a3ea80142b360ba468e7ce3316d8c",
            "date": "2025-01-01T12:48:26Z",
            "author_login": "aedart"
          },
          {
            "sha": "7a135ac81d1f0c38b4ed16371a7ccde78449c7ae",
            "date": "2025-01-01T12:44:23Z",
            "author_login": "aedart"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-1321",
    "description": "@aedart/support is the support package for Ion, a monorepo for JavaScript/TypeScript packages. Prior to version `0.6.1`, there is a possible prototype pollution issue for the `MetadataRecord`, when merged with a base class' metadata object, in `meta` decorator from the `@aedart/support` package. The likelihood of exploitation is questionable, given that a class's metadata can only be set or altered when the class is decorated via `meta()`. Furthermore, object(s) of sensitive nature would have to be stored as metadata, before this can lead to a security impact. The issue has been patched in version `0.6.1`.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-04-28T21:15:09.127",
    "last_modified": "2024-11-21T08:00:59.107",
    "fix_date": "2023-04-28T16:25:43Z"
  },
  "references": [
    {
      "url": "https://github.com/aedart/ion/commit/c3e2ee08710d4164d796ecb66ed291335dae9291",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/aedart/ion/security/advisories/GHSA-wwxh-74fx-33c6",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/aedart/ion/commit/c3e2ee08710d4164d796ecb66ed291335dae9291",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/aedart/ion/security/advisories/GHSA-wwxh-74fx-33c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.855859",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ion",
    "owner": "aedart",
    "created_at": "2023-03-04T11:59:13Z",
    "updated_at": "2025-01-01T12:52:38Z",
    "pushed_at": "2025-01-01T12:52:33Z",
    "size": 4078,
    "stars": 1,
    "forks": 0,
    "open_issues": 0,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "JavaScript": 410841,
      "TypeScript": 401893,
      "Vue": 3217,
      "Shell": 1270
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T22:22:01.092664"
  }
}