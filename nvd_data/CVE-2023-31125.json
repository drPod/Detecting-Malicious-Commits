{
  "cve_id": "CVE-2023-31125",
  "github_data": {
    "repository": "socketio/engine.io",
    "fix_commit": "fc480b4f305e16fe5972cf337d055e598372dc44",
    "related_commits": [
      "fc480b4f305e16fe5972cf337d055e598372dc44",
      "fc480b4f305e16fe5972cf337d055e598372dc44"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "fc480b4f305e16fe5972cf337d055e598372dc44",
      "commit_date": "2023-05-01T23:02:42Z",
      "author": {
        "login": "darrachequesne",
        "type": "User",
        "stats": {
          "total_commits": 208,
          "average_weekly_commits": 0.30144927536231886,
          "total_additions": 27464,
          "total_deletions": 34644,
          "weeks_active": 82
        }
      },
      "commit_message": {
        "title": "fix: prevent crash when provided with an invalid query param",
        "length": 507,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 50,
        "additions": 48,
        "deletions": 2
      },
      "files": [
        {
          "filename": "lib/server.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -682,7 +682,7 @@ export class Server extends BaseServer {\n \n     const res = new WebSocketResponse(req, socket);\n     const callback = (errorCode, errorContext) => {\n-      if (errorCode) {\n+      if (errorCode !== undefined) {\n         this.emit(\"connection_error\", {\n           req,\n           code: errorCode,"
        },
        {
          "filename": "lib/userver.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -165,7 +165,7 @@ export class uServer extends BaseServer {\n     req.res = res;\n \n     const callback = async (errorCode, errorContext) => {\n-      if (errorCode) {\n+      if (errorCode !== undefined) {\n         this.emit(\"connection_error\", {\n           req,\n           code: errorCode,"
        },
        {
          "filename": "test/server.js",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@ const { ClientSocket, listen, createPartialDone } = require(\"./common\");\n const expect = require(\"expect.js\");\n const request = require(\"superagent\");\n const cookieMod = require(\"cookie\");\n+const { WebSocket } = require(\"ws\");\n \n /**\n  * Tests.\n@@ -197,6 +198,51 @@ describe(\"server\", () => {\n           });\n       });\n     });\n+\n+    it(\"should disallow `__proto__` as transport (polling)\", (done) => {\n+      const partialDone = createPartialDone(done, 2);\n+\n+      engine = listen((port) => {\n+        engine.on(\"connection_error\", (err) => {\n+          expect(err.req).to.be.ok();\n+          expect(err.code).to.be(0);\n+          expect(err.message).to.be(\"Transport unknown\");\n+          expect(err.context.transport).to.be(\"__proto__\");\n+          partialDone();\n+        });\n+\n+        request\n+          .get(`http://localhost:${port}/engine.io/`)\n+          .query({ transport: \"__proto__\", EIO: 4 })\n+          .end((err, res) => {\n+            expect(err).to.be.an(Error);\n+            expect(res.status).to.be(400);\n+            expect(res.body.code).to.be(0);\n+            expect(res.body.message).to.be(\"Transport unknown\");\n+            partialDone();\n+          });\n+      });\n+    });\n+\n+    it(\"should disallow `__proto__` as transport (websocket)\", (done) => {\n+      const partialDone = createPartialDone(done, 2);\n+\n+      engine = listen((port) => {\n+        engine.on(\"connection_error\", (err) => {\n+          expect(err.req).to.be.ok();\n+          expect(err.code).to.be(0);\n+          expect(err.message).to.be(\"Transport unknown\");\n+          expect(err.context.transport).to.be(\"__proto__\");\n+          partialDone();\n+        });\n+\n+        const socket = new WebSocket(\n+          `ws://localhost:${port}/engine.io/?EIO=4&transport=__proto__`\n+        );\n+\n+        socket.onerror = partialDone;\n+      });\n+    });\n   });\n \n   describe(\"handshake\", () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3105a907b734d2e1b0b8dcfa431c5649c8317476",
            "date": "2024-07-09T09:47:02Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "791aa58f4c0a003335a945fdd704cb910bd35970",
            "date": "2024-06-21T12:32:55Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "6d8a0bea49a0bbc96875393fa2857aa6a0d63319",
            "date": "2024-06-21T11:43:01Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "c310b7b6b66236f312f017583a67f81389fa5d72",
            "date": "2024-06-21T11:13:36Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "362bc78191c607e6b7c7f2b2e7e7ddb2fe53101c",
            "date": "2024-06-21T09:47:41Z",
            "author_login": "darrachequesne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-248",
    "description": "Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. An uncaught exception vulnerability was introduced in version 5.1.0 and included in version 4.1.0 of the `socket.io` parent package. Older versions are not impacted. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the `engine.io` package, including those who use depending packages like `socket.io`. This issue was fixed in version 6.4.2 of Engine.IO. There is no known workaround except upgrading to a safe version.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-08T21:15:11.347",
    "last_modified": "2024-11-21T08:01:26.583",
    "fix_date": "2023-05-01T23:02:42Z"
  },
  "references": [
    {
      "url": "https://github.com/socketio/engine.io/commit/fc480b4f305e16fe5972cf337d055e598372dc44",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/socketio/engine.io/releases/tag/6.4.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/socketio/engine.io/security/advisories/GHSA-q9mw-68c2-j6m5",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230622-0002/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/socketio/engine.io/commit/fc480b4f305e16fe5972cf337d055e598372dc44",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/socketio/engine.io/releases/tag/6.4.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/socketio/engine.io/security/advisories/GHSA-q9mw-68c2-j6m5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230622-0002/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.939407",
    "processing_status": "enhanced"
  }
}