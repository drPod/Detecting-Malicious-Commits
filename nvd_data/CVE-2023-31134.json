{
  "cve_id": "CVE-2023-31134",
  "github_data": {
    "repository": "tauri-apps/tauri",
    "fix_commit": "58ea0b45268dbd46cbac0ebb0887353d057ca767",
    "related_commits": [
      "58ea0b45268dbd46cbac0ebb0887353d057ca767",
      "fa90214b052b1a5d38d54fbf1ca422b4c37cfd1f",
      "58ea0b45268dbd46cbac0ebb0887353d057ca767",
      "fa90214b052b1a5d38d54fbf1ca422b4c37cfd1f"
    ],
    "patch_url": "https://github.com/tauri-apps/tauri/commit/58ea0b45268dbd46cbac0ebb0887353d057ca767.patch",
    "fix_commit_details": {
      "sha": "58ea0b45268dbd46cbac0ebb0887353d057ca767",
      "commit_date": "2023-04-12T14:45:22Z",
      "author": {
        "login": "lucasfernog",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat(core): block remote URLs from accessing the IPC",
        "length": 197,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 196,
        "additions": 139,
        "deletions": 57
      },
      "files": [
        {
          "filename": ".changes/remote-urls.md",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+---\n+\"tauri\": patch\n+\"tauri-runtime\": patch\n+\"tauri-runtime-wry\": patch\n+---\n+\n+Block remote URLs from accessing the IPC."
        },
        {
          "filename": "core/tauri-build/src/static_vcruntime.rs",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -54,5 +54,5 @@ fn override_msvcrt_lib() {\n     f.write_all(bytes).unwrap();\n   }\n   // Add the output directory to the native library path.\n-  println!(\"cargo:rustc-link-search=native={}\", out_dir);\n+  println!(\"cargo:rustc-link-search=native={out_dir}\");\n }"
        },
        {
          "filename": "core/tauri-runtime-wry/Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@ tauri-utils = { version = \"1.1.1\", path = \"../tauri-utils\" }\n uuid = { version = \"1\", features = [ \"v4\" ] }\n rand = \"0.8\"\n raw-window-handle = \"0.5\"\n+url = \"2\"\n \n [target.\"cfg(windows)\".dependencies]\n webview2-com = \"0.19.1\""
        },
        {
          "filename": "core/tauri-runtime-wry/src/lib.rs",
          "status": "modified",
          "additions": 15,
          "deletions": 2,
          "patch": "@@ -36,6 +36,7 @@ use wry::application::platform::unix::{WindowBuilderExtUnix, WindowExtUnix};\n use wry::application::platform::windows::{WindowBuilderExtWindows, WindowExtWindows};\n \n use tauri_utils::{config::WindowConfig, debug_eprintln, Theme};\n+use url::Url;\n use uuid::Uuid;\n use wry::{\n   application::{\n@@ -210,6 +211,7 @@ impl<T: UserEvent> Context<T> {\n impl<T: UserEvent> Context<T> {\n   fn create_webview(&self, pending: PendingWindow<T, Wry<T>>) -> Result<DetachedWindow<T, Wry<T>>> {\n     let label = pending.label.clone();\n+    let current_url = pending.current_url.clone();\n     let menu_ids = pending.menu_ids.clone();\n     let js_event_listeners = pending.js_event_listeners.clone();\n     let context = self.clone();\n@@ -231,6 +233,7 @@ impl<T: UserEvent> Context<T> {\n     };\n     Ok(DetachedWindow {\n       label,\n+      current_url,\n       dispatcher,\n       menu_ids,\n       js_event_listeners,\n@@ -1864,6 +1867,7 @@ impl<T: UserEvent> Runtime<T> for Wry<T> {\n \n   fn create_window(&self, pending: PendingWindow<T, Self>) -> Result<DetachedWindow<T, Self>> {\n     let label = pending.label.clone();\n+    let current_url = pending.current_url.clone();\n     let menu_ids = pending.menu_ids.clone();\n     let js_event_listeners = pending.js_event_listeners.clone();\n     let window_id = rand::random();\n@@ -1890,6 +1894,7 @@ impl<T: UserEvent> Runtime<T> for Wry<T> {\n \n     Ok(DetachedWindow {\n       label,\n+      current_url,\n       dispatcher,\n       menu_ids,\n       js_event_listeners,\n@@ -2848,7 +2853,7 @@ fn create_webview<T: UserEvent>(\n     mut window_builder,\n     ipc_handler,\n     label,\n-    url,\n+    current_url,\n     menu_ids,\n     js_event_listeners,\n     ..\n@@ -2888,17 +2893,23 @@ fn create_webview<T: UserEvent>(\n   }\n   let mut webview_builder = WebViewBuilder::new(window)\n     .map_err(|e| Error::CreateWebview(Box::new(e)))?\n-    .with_url(&url)\n+    .with_url(current_url.lock().unwrap().as_str())\n     .unwrap() // safe to unwrap because we validate the URL beforehand\n     .with_transparent(is_window_transparent);\n   if webview_attributes.file_drop_handler_enabled {\n     webview_builder = webview_builder\n       .with_file_drop_handler(create_file_drop_handler(window_event_listeners.clone()));\n   }\n+  if let Some(navigation_handler) = pending.navigation_handler {\n+    webview_builder = webview_builder.with_navigation_handler(move |url| {\n+      Url::parse(&url).map(&navigation_handler).unwrap_or(true)\n+    });\n+  }\n   if let Some(handler) = ipc_handler {\n     webview_builder = webview_builder.with_ipc_handler(create_ipc_handler(\n       context,\n       label.clone(),\n+      current_url,\n       menu_ids,\n       js_event_listeners,\n       handler,\n@@ -3002,6 +3013,7 @@ fn create_webview<T: UserEvent>(\n fn create_ipc_handler<T: UserEvent>(\n   context: Context<T>,\n   label: String,\n+  current_url: Arc<Mutex<Url>>,\n   menu_ids: Arc<Mutex<HashMap<MenuHash, MenuId>>>,\n   js_event_listeners: Arc<Mutex<HashMap<JsEventListenerKey, HashSet<u64>>>>,\n   handler: WebviewIpcHandler<T, Wry<T>>,\n@@ -3010,6 +3022,7 @@ fn create_ipc_handler<T: UserEvent>(\n     let window_id = context.webview_id_map.get(&window.id()).unwrap();\n     handler(\n       DetachedWindow {\n+        current_url: current_url.clone(),\n         dispatcher: WryDispatcher {\n           window_id,\n           context: context.clone(),"
        },
        {
          "filename": "core/tauri-runtime/Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@ http-range = \"0.1.4\"\n infer = \"0.7\"\n raw-window-handle = \"0.5\"\n rand = \"0.8\"\n+url = \"2\"\n \n [target.\"cfg(windows)\".dependencies]\n webview2-com = \"0.19.1\""
        },
        {
          "filename": "core/tauri-runtime/src/window.rs",
          "status": "modified",
          "additions": 15,
          "deletions": 5,
          "patch": "@@ -12,6 +12,7 @@ use crate::{\n };\n use serde::{Deserialize, Deserializer, Serialize};\n use tauri_utils::{config::WindowConfig, Theme};\n+use url::Url;\n \n use std::{\n   collections::{HashMap, HashSet},\n@@ -224,14 +225,17 @@ pub struct PendingWindow<T: UserEvent, R: Runtime<T>> {\n   /// How to handle IPC calls on the webview window.\n   pub ipc_handler: Option<WebviewIpcHandler<T, R>>,\n \n-  /// The resolved URL to load on the webview.\n-  pub url: String,\n-\n   /// Maps runtime id to a string menu id.\n   pub menu_ids: Arc<Mutex<HashMap<MenuHash, MenuId>>>,\n \n   /// A HashMap mapping JS event names with associated listener ids.\n   pub js_event_listeners: Arc<Mutex<HashMap<JsEventListenerKey, HashSet<u64>>>>,\n+\n+  /// A handler to decide if incoming url is allowed to navigate.\n+  pub navigation_handler: Option<Box<dyn Fn(Url) -> bool + Send>>,\n+\n+  /// The current webview URL.\n+  pub current_url: Arc<Mutex<Url>>,\n }\n \n pub fn is_label_valid(label: &str) -> bool {\n@@ -268,9 +272,10 @@ impl<T: UserEvent, R: Runtime<T>> PendingWindow<T, R> {\n         uri_scheme_protocols: Default::default(),\n         label,\n         ipc_handler: None,\n-        url: \"tauri://localhost\".to_string(),\n         menu_ids: Arc::new(Mutex::new(menu_ids)),\n         js_event_listeners: Default::default(),\n+        navigation_handler: Default::default(),\n+        current_url: Arc::new(Mutex::new(\"tauri://localhost\".parse().unwrap())),\n       })\n     }\n   }\n@@ -297,9 +302,10 @@ impl<T: UserEvent, R: Runtime<T>> PendingWindow<T, R> {\n         uri_scheme_protocols: Default::default(),\n         label,\n         ipc_handler: None,\n-        url: \"tauri://localhost\".to_string(),\n         menu_ids: Arc::new(Mutex::new(menu_ids)),\n         js_event_listeners: Default::default(),\n+        navigation_handler: Default::default(),\n+        current_url: Arc::new(Mutex::new(\"tauri://localhost\".parse().unwrap())),\n       })\n     }\n   }\n@@ -340,6 +346,9 @@ pub struct JsEventListenerKey {\n /// A webview window that is not yet managed by Tauri.\n #[derive(Debug)]\n pub struct DetachedWindow<T: UserEvent, R: Runtime<T>> {\n+  /// The current webview URL.\n+  pub current_url: Arc<Mutex<Url>>,\n+\n   /// Name of the window\n   pub label: String,\n \n@@ -356,6 +365,7 @@ pub struct DetachedWindow<T: UserEvent, R: Runtime<T>> {\n impl<T: UserEvent, R: Runtime<T>> Clone for DetachedWindow<T, R> {\n   fn clone(&self) -> Self {\n     Self {\n+      current_url: self.current_url.clone(),\n       label: self.label.clone(),\n       dispatcher: self.dispatcher.clone(),\n       menu_ids: self.menu_ids.clone(),"
        },
        {
          "filename": "core/tauri/src/app.rs",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -948,7 +948,7 @@ impl<R: Runtime> Builder<R> {\n       #[cfg(any(windows, target_os = \"linux\"))]\n       runtime_any_thread: false,\n       setup: Box::new(|_| Ok(())),\n-      invoke_handler: Box::new(|_| ()),\n+      invoke_handler: Box::new(|invoke| invoke.resolver.reject(\"not implemented\")),\n       invoke_responder: Arc::new(window_invoke_responder),\n       invoke_initialization_script:\n         \"Object.defineProperty(window, '__TAURI_POST_MESSAGE__', { value: (message) => window.ipc.postMessage(JSON.stringify(message)) })\".into(),"
        },
        {
          "filename": "core/tauri/src/manager.rs",
          "status": "modified",
          "additions": 52,
          "deletions": 37,
          "patch": "@@ -25,10 +25,9 @@ use tauri_utils::{\n   html::{SCRIPT_NONCE_TOKEN, STYLE_NONCE_TOKEN},\n };\n \n-use crate::hooks::IpcJavascript;\n #[cfg(feature = \"isolation\")]\n use crate::hooks::IsolationJavascript;\n-use crate::pattern::{format_real_schema, PatternJavascript};\n+use crate::pattern::PatternJavascript;\n use crate::{\n   app::{AppHandle, GlobalWindowEvent, GlobalWindowEventListener},\n   event::{assert_event_name_is_valid, Event, EventHandler, Listeners},\n@@ -54,6 +53,7 @@ use crate::{\n   app::{GlobalMenuEventListener, WindowMenuEvent},\n   window::WebResourceRequestHandler,\n };\n+use crate::{hooks::IpcJavascript, pattern::format_real_schema};\n \n #[cfg(any(target_os = \"linux\", target_os = \"windows\"))]\n use crate::api::path::{resolve_path, BaseDirectory};\n@@ -139,7 +139,7 @@ fn set_csp<R: Runtime>(\n     let default_src = csp\n       .entry(\"default-src\".into())\n       .or_insert_with(Default::default);\n-    default_src.push(format_real_schema(schema));\n+    default_src.push(crate::pattern::format_real_schema(schema));\n   }\n \n   Csp::DirectiveMap(csp).to_string()\n@@ -231,7 +231,7 @@ pub struct InnerWindowManager<R: Runtime> {\n   /// The script that initializes the invoke system.\n   invoke_initialization_script: String,\n   /// Application pattern.\n-  pattern: Pattern,\n+  pub(crate) pattern: Pattern,\n }\n \n impl<R: Runtime> fmt::Debug for InnerWindowManager<R> {\n@@ -367,9 +367,12 @@ impl<R: Runtime> WindowManager<R> {\n   /// Get the base URL to use for webview requests.\n   ///\n   /// In dev mode, this will be based on the `devPath` configuration value.\n-  fn get_url(&self) -> Cow<'_, Url> {\n+  pub(crate) fn get_url(&self) -> Cow<'_, Url> {\n     match self.base_path() {\n       AppUrl::Url(WindowUrl::External(url)) => Cow::Borrowed(url),\n+      #[cfg(windows)]\n+      _ => Cow::Owned(Url::parse(\"https://tauri.localhost\").unwrap()),\n+      #[cfg(not(windows))]\n       _ => Cow::Owned(Url::parse(\"tauri://localhost\").unwrap()),\n     }\n   }\n@@ -477,7 +480,7 @@ impl<R: Runtime> WindowManager<R> {\n       });\n     }\n \n-    let window_url = Url::parse(&pending.url).unwrap();\n+    let window_url = pending.current_url.lock().unwrap().clone();\n     let window_origin =\n       if cfg!(windows) && window_url.scheme() != \"http\" && window_url.scheme() != \"https\" {\n         format!(\"https://{}.localhost\", window_url.scheme())\n@@ -1011,7 +1014,16 @@ mod test {\n     );\n \n     #[cfg(custom_protocol)]\n-    assert_eq!(manager.get_url().to_string(), \"tauri://localhost\");\n+    {\n+      assert_eq!(\n+        manager.get_url().to_string(),\n+        if cfg!(windows) {\n+          \"https://tauri.localhost/\"\n+        } else {\n+          \"tauri://localhost\"\n+        }\n+      );\n+    }\n \n     #[cfg(dev)]\n     assert_eq!(manager.get_url().to_string(), \"http://localhost:4000/\");\n@@ -1062,27 +1074,21 @@ impl<R: Runtime> WindowManager<R> {\n       return Err(crate::Error::WindowLabelAlreadyExists(pending.label));\n     }\n     #[allow(unused_mut)] // mut url only for the data-url parsing\n-    let (is_local, mut url) = match &pending.webview_attributes.url {\n+    let mut url = match &pending.webview_attributes.url {\n       WindowUrl::App(path) => {\n         let url = self.get_url();\n-        (\n-          true,\n-          // ignore \"index.html\" just to simplify the url\n-          if path.to_str() != Some(\"index.html\") {\n-            url\n-              .join(&*path.to_string_lossy())\n-              .map_err(crate::Error::InvalidUrl)\n-              // this will never fail\n-              .unwrap()\n-          } else {\n-            url.into_owned()\n-          },\n-        )\n-      }\n-      WindowUrl::External(url) => {\n-        let config_url = self.get_url();\n-        (config_url.make_relative(url).is_some(), url.clone())\n+        // ignore \"index.html\" just to simplify the url\n+        if path.to_str() != Some(\"index.html\") {\n+          url\n+            .join(&*path.to_string_lossy())\n+            .map_err(crate::Error::InvalidUrl)\n+            // this will never fail\n+            .unwrap()\n+        } else {\n+          url.into_owned()\n+        }\n       }\n+      WindowUrl::External(url) => url.clone(),\n       _ => unimplemented!(),\n     };\n \n@@ -1109,7 +1115,7 @@ impl<R: Runtime> WindowManager<R> {\n       }\n     }\n \n-    pending.url = url.to_string();\n+    *pending.current_url.lock().unwrap() = url;\n \n     if !pending.window_builder.has_icon() {\n       if let Some(default_window_icon) = self.inner.default_window_icon.clone() {\n@@ -1125,17 +1131,15 @@ impl<R: Runtime> WindowManager<R> {\n       }\n     }\n \n-    if is_local {\n-      let label = pending.label.clone();\n-      pending = self.prepare_pending_window(\n-        pending,\n-        &label,\n-        window_labels,\n-        app_handle.clone(),\n-        web_resource_request_handler,\n-      )?;\n-      pending.ipc_handler = Some(self.prepare_ipc_handler(app_handle));\n-    }\n+    let label = pending.label.clone();\n+    pending = self.prepare_pending_window(\n+      pending,\n+      &label,\n+      window_labels,\n+      app_handle.clone(),\n+      web_resource_request_handler,\n+    )?;\n+    pending.ipc_handler = Some(self.prepare_ipc_handler(app_handle));\n \n     // in `Windows`, we need to force a data_directory\n     // but we do respect user-specification\n@@ -1160,6 +1164,17 @@ impl<R: Runtime> WindowManager<R> {\n       }\n     }\n \n+    let current_url_ = pending.current_url.clone();\n+    let navigation_handler = pending.navigation_handler.take();\n+    pending.navigation_handler = Some(Box::new(move |url| {\n+      *current_url_.lock().unwrap() = url.clone();\n+      if let Some(handler) = &navigation_handler {\n+        handler(url)\n+      } else {\n+        true\n+      }\n+    }));\n+\n     Ok(pending)\n   }\n "
        },
        {
          "filename": "core/tauri/src/pattern.rs",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -11,6 +11,9 @@ use serialize_to_javascript::{default_template, Template};\n \n use tauri_utils::assets::{Assets, EmbeddedAssets};\n \n+/// The domain of the isolation iframe source.\n+pub const ISOLATION_IFRAME_SRC_DOMAIN: &str = \"localhost\";\n+\n /// An application pattern.\n #[derive(Debug, Clone)]\n pub enum Pattern<A: Assets = EmbeddedAssets> {\n@@ -87,8 +90,8 @@ pub(crate) struct PatternJavascript {\n #[allow(dead_code)]\n pub(crate) fn format_real_schema(schema: &str) -> String {\n   if cfg!(windows) {\n-    format!(\"https://{}.localhost\", schema)\n+    format!(\"https://{schema}.{ISOLATION_IFRAME_SRC_DOMAIN}\")\n   } else {\n-    format!(\"{}://localhost\", schema)\n+    format!(\"{schema}://{ISOLATION_IFRAME_SRC_DOMAIN}\")\n   }\n }"
        },
        {
          "filename": "core/tauri/src/test/mock_runtime.rs",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -67,6 +67,7 @@ impl<T: UserEvent> RuntimeHandle<T> for MockRuntimeHandle {\n   ) -> Result<DetachedWindow<T, Self::Runtime>> {\n     Ok(DetachedWindow {\n       label: pending.label,\n+      current_url: Arc::new(Mutex::new(\"tauri://localhost\".parse().unwrap())),\n       dispatcher: MockDispatcher {\n         context: self.context.clone(),\n       },\n@@ -627,6 +628,7 @@ impl<T: UserEvent> Runtime<T> for MockRuntime {\n   fn create_window(&self, pending: PendingWindow<T, Self>) -> Result<DetachedWindow<T, Self>> {\n     Ok(DetachedWindow {\n       label: pending.label,\n+      current_url: Arc::new(Mutex::new(\"tauri://localhost\".parse().unwrap())),\n       dispatcher: MockDispatcher {\n         context: self.context.clone(),\n       },"
        },
        {
          "filename": "core/tauri/src/window.rs",
          "status": "modified",
          "additions": 30,
          "deletions": 2,
          "patch": "@@ -33,6 +33,7 @@ use crate::{\n };\n \n use serde::Serialize;\n+use url::Url;\n #[cfg(windows)]\n use windows::Win32::Foundation::HWND;\n \n@@ -510,7 +511,7 @@ impl<'a, R: Runtime> WindowBuilder<'a, R> {\n #[derive(Debug)]\n pub struct Window<R: Runtime> {\n   /// The webview window created by the runtime.\n-  window: DetachedWindow<EventLoopMessage, R>,\n+  pub(crate) window: DetachedWindow<EventLoopMessage, R>,\n   /// The manager to associate this webview window with.\n   manager: WindowManager<R>,\n   pub(crate) app_handle: AppHandle<R>,\n@@ -1184,9 +1185,27 @@ impl<R: Runtime> Window<R> {\n \n /// Webview APIs.\n impl<R: Runtime> Window<R> {\n+  /// Returns the current url of the webview.\n+  pub fn url(&self) -> Url {\n+    self.window.current_url.lock().unwrap().clone()\n+  }\n+\n   /// Handles this window receiving an [`InvokeMessage`].\n   pub fn on_message(self, payload: InvokePayload) -> crate::Result<()> {\n     let manager = self.manager.clone();\n+    let current_url = self.url();\n+    let config_url = manager.get_url();\n+    #[allow(unused_mut)]\n+    let mut is_local = config_url.make_relative(&current_url).is_some();\n+    #[cfg(feature = \"isolation\")]\n+    if let crate::Pattern::Isolation { schema, .. } = &self.manager.inner.pattern {\n+      if current_url.scheme() == schema\n+        && current_url.domain() == Some(crate::pattern::ISOLATION_IFRAME_SRC_DOMAIN)\n+      {\n+        is_local = true;\n+      }\n+    }\n+\n     match payload.cmd.as_str() {\n       \"__initialized\" => {\n         let payload: PageLoadPayload = serde_json::from_value(payload.inner)?;\n@@ -1200,8 +1219,17 @@ impl<R: Runtime> Window<R> {\n           payload.inner,\n         );\n         let resolver = InvokeResolver::new(self, payload.callback, payload.error);\n-\n         let invoke = Invoke { message, resolver };\n+\n+        println!(\"{} {}\", config_url, current_url);\n+\n+        if !is_local {\n+          invoke\n+            .resolver\n+            .reject(\"Remote URLs are not allowed to access the IPC\");\n+          return Ok(());\n+        }\n+\n         if let Some(module) = &payload.tauri_module {\n           crate::endpoints::handle(\n             module.to_string(),"
        },
        {
          "filename": "examples/api/src-tauri/Cargo.lock",
          "status": "modified",
          "additions": 9,
          "deletions": 7,
          "patch": "@@ -3105,7 +3105,7 @@ dependencies = [\n \n [[package]]\n name = \"tauri\"\n-version = \"1.0.5\"\n+version = \"1.1.3\"\n dependencies = [\n  \"anyhow\",\n  \"attohttpc\",\n@@ -3167,7 +3167,7 @@ dependencies = [\n \n [[package]]\n name = \"tauri-build\"\n-version = \"1.0.4\"\n+version = \"1.1.1\"\n dependencies = [\n  \"anyhow\",\n  \"cargo_toml\",\n@@ -3183,7 +3183,7 @@ dependencies = [\n \n [[package]]\n name = \"tauri-codegen\"\n-version = \"1.0.4\"\n+version = \"1.1.1\"\n dependencies = [\n  \"base64\",\n  \"brotli\",\n@@ -3207,7 +3207,7 @@ dependencies = [\n \n [[package]]\n name = \"tauri-macros\"\n-version = \"1.0.4\"\n+version = \"1.1.1\"\n dependencies = [\n  \"heck 0.4.0\",\n  \"proc-macro2\",\n@@ -3219,7 +3219,7 @@ dependencies = [\n \n [[package]]\n name = \"tauri-runtime\"\n-version = \"0.10.2\"\n+version = \"0.11.1\"\n dependencies = [\n  \"gtk\",\n  \"http\",\n@@ -3231,14 +3231,15 @@ dependencies = [\n  \"serde_json\",\n  \"tauri-utils\",\n  \"thiserror\",\n+ \"url\",\n  \"uuid 1.1.2\",\n  \"webview2-com\",\n  \"windows 0.39.0\",\n ]\n \n [[package]]\n name = \"tauri-runtime-wry\"\n-version = \"0.10.2\"\n+version = \"0.11.1\"\n dependencies = [\n  \"cocoa\",\n  \"gtk\",\n@@ -3247,6 +3248,7 @@ dependencies = [\n  \"raw-window-handle\",\n  \"tauri-runtime\",\n  \"tauri-utils\",\n+ \"url\",\n  \"uuid 1.1.2\",\n  \"webkit2gtk\",\n  \"webview2-com\",\n@@ -3256,7 +3258,7 @@ dependencies = [\n \n [[package]]\n name = \"tauri-utils\"\n-version = \"1.0.3\"\n+version = \"1.1.1\"\n dependencies = [\n  \"aes-gcm\",\n  \"brotli\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 2,
        "test_files": 1,
        "unique_directories": 9,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4c3f04773534c0b33ea81bcff6dd7719ef265662",
            "date": "2025-01-13T12:08:29Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "61e69db9e48f6a652ed3ecb05567c648c6e788d0",
            "date": "2025-01-13T11:23:17Z",
            "author_login": "FabianLars"
          },
          {
            "sha": "75d56e8364fb203387bb5a5235f316dd7dfa6acd",
            "date": "2025-01-13T02:03:36Z",
            "author_login": "oscartbeaumont"
          },
          {
            "sha": "a8aca701515a1059b1cdf3abf37e487b21b9bd11",
            "date": "2025-01-11T17:13:55Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "cad5504455ffa53e297cebff473c113b1afa5d29",
            "date": "2025-01-11T16:28:54Z",
            "author_login": "FabianLars"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-601",
    "description": "Tauri is software for building applications for multi-platform deployment. The Tauri IPC is usually strictly isolated from external websites, but in versions 1.0.0 until 1.0.9, 1.1.0 until 1.1.4, and 1.2.0 until 1.2.5, the isolation can be bypassed by redirecting an existing Tauri window to an external website. This is either possible by an application implementing a feature for users to visit\narbitrary websites or due to a bug allowing the open redirect. This allows the external website access to the IPC layer and therefore to all configured and exposed Tauri API endpoints and application specific implemented Tauri commands. This issue has been patched in versions 1.0.9, 1.1.4, and 1.2.5. As a workaround, prevent arbitrary input in redirect features and/or only allow trusted websites access to the IPC.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-09T14:15:13.427",
    "last_modified": "2024-11-21T08:01:27.743",
    "fix_date": "2023-04-12T14:45:22Z"
  },
  "references": [
    {
      "url": "https://github.com/tauri-apps/tauri/releases/tag/tauri-v1.0.9",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/releases/tag/tauri-v1.1.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/releases/tag/tauri-v1.2.5",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/security/advisories/GHSA-4wm2-cwcf-wwvp",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.github.com/tauri-apps/tauri/commit/58ea0b45268dbd46cbac0ebb0887353d057ca767",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.github.com/tauri-apps/tauri/commit/fa90214b052b1a5d38d54fbf1ca422b4c37cfd1f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/releases/tag/tauri-v1.0.9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/releases/tag/tauri-v1.1.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/releases/tag/tauri-v1.2.5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tauri-apps/tauri/security/advisories/GHSA-4wm2-cwcf-wwvp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.github.com/tauri-apps/tauri/commit/58ea0b45268dbd46cbac0ebb0887353d057ca767",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.github.com/tauri-apps/tauri/commit/fa90214b052b1a5d38d54fbf1ca422b4c37cfd1f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.942178",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tauri",
    "owner": "tauri-apps",
    "created_at": "2019-07-13T09:09:37Z",
    "updated_at": "2025-01-14T15:28:32Z",
    "pushed_at": "2025-01-14T16:01:17Z",
    "size": 93444,
    "stars": 88352,
    "forks": 2688,
    "open_issues": 943,
    "watchers": 88352,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "1.x",
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.6",
      "dev",
      "next"
    ],
    "languages": {
      "Rust": 2431452,
      "TypeScript": 209615,
      "NSIS": 104592,
      "Kotlin": 63116,
      "JavaScript": 49640,
      "Shell": 43350,
      "Swift": 22030,
      "Dockerfile": 2143,
      "HTML": 2143,
      "PowerShell": 1951,
      "AppleScript": 1828,
      "Svelte": 1727,
      "CSS": 1654,
      "Standard ML": 1348,
      "Ruby": 839,
      "Objective-C": 414,
      "Objective-C++": 100,
      "C++": 82
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:04:01.084221"
  }
}