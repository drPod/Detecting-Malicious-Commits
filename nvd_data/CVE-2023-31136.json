{
  "cve_id": "CVE-2023-31136",
  "github_data": {
    "repository": "vapor/postgres-nio",
    "fix_commit": "2df54bc94607f44584ae6ffa74e3cd754fffafc7",
    "related_commits": [
      "2df54bc94607f44584ae6ffa74e3cd754fffafc7",
      "2df54bc94607f44584ae6ffa74e3cd754fffafc7"
    ],
    "patch_url": "https://github.com/vapor/postgres-nio/commit/2df54bc94607f44584ae6ffa74e3cd754fffafc7.patch",
    "fix_commit_details": {
      "sha": "2df54bc94607f44584ae6ffa74e3cd754fffafc7",
      "commit_date": "2023-05-04T17:19:06Z",
      "author": {
        "login": "fabianfett",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9cfh-vx93-84vv",
        "length": 138,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 102,
        "additions": 74,
        "deletions": 28
      },
      "files": [
        {
          "filename": "Package.swift",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -14,7 +14,7 @@ let package = Package(\n     ],\n     dependencies: [\n         .package(url: \"https://github.com/apple/swift-atomics.git\", from: \"1.1.0\"),\n-        .package(url: \"https://github.com/apple/swift-nio.git\", from: \"2.51.1\"),\n+        .package(url: \"https://github.com/apple/swift-nio.git\", from: \"2.52.0\"),\n         .package(url: \"https://github.com/apple/swift-nio-transport-services.git\", from: \"1.16.0\"),\n         .package(url: \"https://github.com/apple/swift-nio-ssl.git\", from: \"2.23.1\"),\n         .package(url: \"https://github.com/apple/swift-crypto.git\", \"1.0.0\" ..< \"3.0.0\"),"
        },
        {
          "filename": "Sources/PostgresNIO/New/Connection State Machine/ConnectionStateMachine.swift",
          "status": "modified",
          "additions": 16,
          "deletions": 22,
          "patch": "@@ -228,9 +228,12 @@ struct ConnectionStateMachine {\n         }\n     }\n     \n-    mutating func sslSupportedReceived() -> ConnectionAction {\n+    mutating func sslSupportedReceived(unprocessedBytes: Int) -> ConnectionAction {\n         switch self.state {\n         case .sslRequestSent:\n+            if unprocessedBytes > 0 {\n+                return self.closeConnectionAndCleanup(.receivedUnencryptedDataAfterSSLRequest)\n+            }\n             self.state = .sslNegotiated\n             return .establishSSLConnection\n             \n@@ -1079,9 +1082,18 @@ extension ConnectionStateMachine {\n extension ConnectionStateMachine {\n     func shouldCloseConnection(reason error: PSQLError) -> Bool {\n         switch error.code.base {\n-        case .sslUnsupported:\n-            return true\n-        case .failedToAddSSLHandler:\n+        case .failedToAddSSLHandler,\n+             .receivedUnencryptedDataAfterSSLRequest,\n+             .sslUnsupported,\n+             .messageDecodingFailure,\n+             .unexpectedBackendMessage,\n+             .unsupportedAuthMechanism,\n+             .authMechanismRequiresPassword,\n+             .saslError,\n+             .tooManyParameters,\n+             .invalidCommandTag,\n+             .connectionError,\n+             .uncleanShutdown:\n             return true\n         case .queryCancelled:\n             return false\n@@ -1097,28 +1109,10 @@ extension ConnectionStateMachine {\n             }\n             \n             return false\n-        case .messageDecodingFailure:\n-            return true\n-        case .unexpectedBackendMessage:\n-            return true\n-        case .unsupportedAuthMechanism:\n-            return true\n-        case .authMechanismRequiresPassword:\n-            return true\n-        case .saslError:\n-            return true\n-        case .tooManyParameters:\n-            return true\n-        case .invalidCommandTag:\n-            return true\n         case .connectionQuiescing:\n             preconditionFailure(\"Pure client error, that is thrown directly in PostgresConnection\")\n         case .connectionClosed:\n             preconditionFailure(\"Pure client error, that is thrown directly and should never \")\n-        case .connectionError:\n-            return true\n-        case .uncleanShutdown:\n-            return true\n         }\n     }\n "
        },
        {
          "filename": "Sources/PostgresNIO/New/PSQLError.swift",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@ public struct PSQLError: Error {\n         enum Base: Sendable, Hashable {\n             case sslUnsupported\n             case failedToAddSSLHandler\n+            case receivedUnencryptedDataAfterSSLRequest\n             case server\n             case messageDecodingFailure\n             case unexpectedBackendMessage\n@@ -31,6 +32,7 @@ public struct PSQLError: Error {\n \n         public static let sslUnsupported = Self.init(.sslUnsupported)\n         public static let failedToAddSSLHandler = Self(.failedToAddSSLHandler)\n+        public static let receivedUnencryptedDataAfterSSLRequest = Self(.receivedUnencryptedDataAfterSSLRequest)\n         public static let server = Self(.server)\n         public static let messageDecodingFailure = Self(.messageDecodingFailure)\n         public static let unexpectedBackendMessage = Self(.unexpectedBackendMessage)\n@@ -51,6 +53,8 @@ public struct PSQLError: Error {\n                 return \"sslUnsupported\"\n             case .failedToAddSSLHandler:\n                 return \"failedToAddSSLHandler\"\n+            case .receivedUnencryptedDataAfterSSLRequest:\n+                return \"receivedUnencryptedDataAfterSSLRequest\"\n             case .server:\n                 return \"server\"\n             case .messageDecodingFailure:\n@@ -343,6 +347,8 @@ public struct PSQLError: Error {\n \n     static var uncleanShutdown: PSQLError { PSQLError(code: .uncleanShutdown) }\n \n+    static var receivedUnencryptedDataAfterSSLRequest: PSQLError { PSQLError(code: .receivedUnencryptedDataAfterSSLRequest) }\n+\n     static func server(_ response: PostgresBackendMessage.ErrorResponse) -> PSQLError {\n         var error = PSQLError(code: .server)\n         error.serverInfo = .init(response)"
        },
        {
          "filename": "Sources/PostgresNIO/New/PostgresChannelHandler.swift",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -139,7 +139,7 @@ final class PostgresChannelHandler: ChannelDuplexHandler {\n                 case .rowDescription(let rowDescription):\n                     action = self.state.rowDescriptionReceived(rowDescription)\n                 case .sslSupported:\n-                    action = self.state.sslSupportedReceived()\n+                    action = self.state.sslSupportedReceived(unprocessedBytes: self.decoder.unprocessedBytes)\n                 case .sslUnsupported:\n                     action = self.state.sslUnsupportedReceived()\n                 }"
        },
        {
          "filename": "Sources/PostgresNIO/Postgres+PSQLCompat.swift",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -31,6 +31,8 @@ extension PSQLError {\n             return PostgresError.protocol(\"Unsupported auth scheme: \\(message)\")\n         case .authMechanismRequiresPassword:\n             return PostgresError.protocol(\"Unable to authenticate without password\")\n+        case .receivedUnencryptedDataAfterSSLRequest:\n+            return PostgresError.protocol(\"Received unencrypted data after SSL request\")\n         case .saslError:\n             return self.underlying ?? self\n         case .tooManyParameters, .invalidCommandTag:"
        },
        {
          "filename": "Tests/PostgresNIOTests/New/Connection State Machine/ConnectionStateMachineTests.swift",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -19,20 +19,27 @@ class ConnectionStateMachineTests: XCTestCase {\n         let authContext = AuthContext(username: \"test\", password: \"abc123\", database: \"test\")\n         var state = ConnectionStateMachine(requireBackendKeyData: true)\n         XCTAssertEqual(state.connected(tls: .require), .sendSSLRequest)\n-        XCTAssertEqual(state.sslSupportedReceived(), .establishSSLConnection)\n+        XCTAssertEqual(state.sslSupportedReceived(unprocessedBytes: 0), .establishSSLConnection)\n         XCTAssertEqual(state.sslHandlerAdded(), .wait)\n         XCTAssertEqual(state.sslEstablished(), .provideAuthenticationContext)\n         XCTAssertEqual(state.provideAuthenticationContext(authContext), .sendStartupMessage(authContext))\n         let salt: (UInt8, UInt8, UInt8, UInt8) = (0,1,2,3)\n         XCTAssertEqual(state.authenticationMessageReceived(.md5(salt: salt)), .sendPasswordMessage(.md5(salt: salt), authContext))\n     }\n-    \n+\n+    func testSSLStartupFailureTooManyBytesRemaining() {\n+        var state = ConnectionStateMachine(requireBackendKeyData: true)\n+        XCTAssertEqual(state.connected(tls: .require), .sendSSLRequest)\n+        let failError = PSQLError.receivedUnencryptedDataAfterSSLRequest\n+        XCTAssertEqual(state.sslSupportedReceived(unprocessedBytes: 1), .closeConnectionAndCleanup(.init(action: .close, tasks: [], error: failError, closePromise: nil)))\n+    }\n+\n     func testSSLStartupFailHandler() {\n         struct SSLHandlerAddError: Error, Equatable {}\n         \n         var state = ConnectionStateMachine(requireBackendKeyData: true)\n         XCTAssertEqual(state.connected(tls: .require), .sendSSLRequest)\n-        XCTAssertEqual(state.sslSupportedReceived(), .establishSSLConnection)\n+        XCTAssertEqual(state.sslSupportedReceived(unprocessedBytes: 0), .establishSSLConnection)\n         let failError = PSQLError.failedToAddSSLHandler(underlying: SSLHandlerAddError())\n         XCTAssertEqual(state.errorHappened(failError), .closeConnectionAndCleanup(.init(action: .close, tasks: [], error: failError, closePromise: nil)))\n     }"
        },
        {
          "filename": "Tests/PostgresNIOTests/New/PostgresChannelHandlerTests.swift",
          "status": "modified",
          "additions": 38,
          "deletions": 1,
          "patch": "@@ -77,7 +77,44 @@ class PostgresChannelHandlerTests: XCTestCase {\n         XCTAssertEqual(startupMessage.parameters.database, config.database)\n         XCTAssertEqual(startupMessage.parameters.replication, .false)\n     }\n-    \n+\n+    func testEstablishSSLCallbackIsNotCalledIfSSLIsSupportedButAnotherMEssageIsSentAsWell() {\n+        var config = self.testConnectionConfiguration()\n+        XCTAssertNoThrow(config.tls = .require(try NIOSSLContext(configuration: .makeClientConfiguration())))\n+        var addSSLCallbackIsHit = false\n+        let handler = PostgresChannelHandler(configuration: config) { channel in\n+            addSSLCallbackIsHit = true\n+        }\n+        let eventHandler = TestEventHandler()\n+        let embedded = EmbeddedChannel(handlers: [\n+            ReverseByteToMessageHandler(PSQLFrontendMessageDecoder()),\n+            handler,\n+            eventHandler\n+        ])\n+\n+        var maybeMessage: PostgresFrontendMessage?\n+        XCTAssertNoThrow(embedded.connect(to: try .init(ipAddress: \"0.0.0.0\", port: 5432), promise: nil))\n+        XCTAssertNoThrow(maybeMessage = try embedded.readOutbound(as: PostgresFrontendMessage.self))\n+        guard case .sslRequest(let request) = maybeMessage else {\n+            return XCTFail(\"Unexpected message\")\n+        }\n+\n+        XCTAssertEqual(request.code, 80877103)\n+\n+        var responseBuffer = ByteBuffer()\n+        responseBuffer.writeInteger(UInt8(ascii: \"S\"))\n+        responseBuffer.writeInteger(UInt8(ascii: \"1\"))\n+        XCTAssertNoThrow(try embedded.writeInbound(responseBuffer))\n+\n+        XCTAssertFalse(addSSLCallbackIsHit)\n+\n+        // the event handler should have seen an error\n+        XCTAssertEqual(eventHandler.errors.count, 1)\n+\n+        // the connections should be closed\n+        XCTAssertFalse(embedded.isActive)\n+    }\n+\n     func testSSLUnsupportedClosesConnection() throws {\n         let config = self.testConnectionConfiguration(tls: .require(try NIOSSLContext(configuration: .makeClientConfiguration())))\n         "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7c29718fe5631462417ed3350ccc1e131678bf13",
            "date": "2024-12-21T11:06:54Z",
            "author_login": "gwynne"
          },
          {
            "sha": "045cc49fbe224093cc1d77e79065e9e00081d119",
            "date": "2024-12-21T10:57:06Z",
            "author_login": "gwynne"
          },
          {
            "sha": "fd0e415a705c490499f983639b04f491a2ed9d99",
            "date": "2024-12-10T09:11:53Z",
            "author_login": "tkrajacic"
          },
          {
            "sha": "96ed89ff0dc457a2533bed80d4cf2a87976bc296",
            "date": "2024-12-08T22:04:18Z",
            "author_login": "tkrajacic"
          },
          {
            "sha": "f2a6394a2e7157d547727b975fc0328b92f89fb1",
            "date": "2024-10-21T08:57:36Z",
            "author_login": "fabianfett"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-522",
    "description": "PostgresNIO is a Swift client for PostgreSQL. Any user of PostgresNIO prior to version 1.14.2 connecting to servers with TLS enabled is vulnerable to a man-in-the-middle attacker injecting false responses to the client's first few queries, despite the use of TLS certificate verification and encryption. The vulnerability is addressed in PostgresNIO versions starting from 1.14.2. There are no known workarounds for unpatched users.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-05-09T14:15:13.520",
    "last_modified": "2024-11-21T08:01:28.043",
    "fix_date": "2023-05-04T17:19:06Z"
  },
  "references": [
    {
      "url": "https://github.com/advisories/GHSA-467w-rrqc-395f",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/advisories/GHSA-735f-7qx4-jqq5",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/apple/swift-nio/pull/2419",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vapor/postgres-nio/commit/2df54bc94607f44584ae6ffa74e3cd754fffafc7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vapor/postgres-nio/releases/tag/1.14.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/vapor/postgres-nio/security/advisories/GHSA-9cfh-vx93-84vv",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.postgresql.org/support/security/CVE-2021-23214/",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://www.postgresql.org/support/security/CVE-2021-23222/",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/advisories/GHSA-467w-rrqc-395f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/advisories/GHSA-735f-7qx4-jqq5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/apple/swift-nio/pull/2419",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vapor/postgres-nio/commit/2df54bc94607f44584ae6ffa74e3cd754fffafc7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vapor/postgres-nio/releases/tag/1.14.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/vapor/postgres-nio/security/advisories/GHSA-9cfh-vx93-84vv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.postgresql.org/support/security/CVE-2021-23214/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://www.postgresql.org/support/security/CVE-2021-23222/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.942435",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "postgres-nio",
    "owner": "vapor",
    "created_at": "2018-09-27T17:18:01Z",
    "updated_at": "2025-01-08T01:16:28Z",
    "pushed_at": "2024-12-21T11:06:54Z",
    "size": 1177,
    "stars": 339,
    "forks": 77,
    "open_issues": 65,
    "watchers": 339,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Swift": 1299879,
      "Shell": 7554
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:20:30.767530"
  }
}