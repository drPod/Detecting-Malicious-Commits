{
  "cve_id": "CVE-2023-3142",
  "github_data": {
    "repository": "microweber/microweber",
    "fix_commit": "42efa981a2239d042d910069952d6276497bdcf1",
    "related_commits": [
      "42efa981a2239d042d910069952d6276497bdcf1",
      "42efa981a2239d042d910069952d6276497bdcf1"
    ],
    "patch_url": "https://github.com/microweber/microweber/commit/42efa981a2239d042d910069952d6276497bdcf1.patch",
    "fix_commit_details": {
      "sha": "42efa981a2239d042d910069952d6276497bdcf1",
      "commit_date": "2023-06-07T11:18:07Z",
      "author": {
        "login": "peter-mw",
        "type": "User",
        "stats": {
          "total_commits": 7965,
          "average_weekly_commits": 15.0,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 408
        }
      },
      "commit_message": {
        "title": "update",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 113,
        "additions": 70,
        "deletions": 43
      },
      "files": [
        {
          "filename": "src/MicroweberPackages/Content/ContentManagerHelpers.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -659,6 +659,7 @@ public function save_from_live_edit($post_data)\n         $ref_page_url = false;\n         if (isset($_SERVER['HTTP_REFERER'])) {\n             $ref_page_url = $_SERVER['HTTP_REFERER'];\n+            $ref_page_url = xss_clean($ref_page_url);\n         }\n \n         if (isset($post_data['id']) and intval($post_data['id']) > 0) {"
        },
        {
          "filename": "src/MicroweberPackages/Content/tests/ContentApiControllerLiveEditSaveTest.php",
          "status": "modified",
          "additions": 40,
          "deletions": 32,
          "patch": "@@ -2,9 +2,7 @@\n \n namespace MicroweberPackages\\Content\\tests;\n \n-use Illuminate\\Database\\Eloquent\\Model;\n use Illuminate\\Support\\Facades\\Auth;\n-use MicroweberPackages\\Category\\Models\\Category;\n use MicroweberPackages\\Core\\tests\\TestCase;\n use MicroweberPackages\\Helper\\XSSClean;\n use MicroweberPackages\\Multilanguage\\MultilanguageHelpers;\n@@ -64,14 +62,11 @@ public function testSaveContentOnPageLiveEditSingle()\n HTML;\n \n \n-\n-\n         $pq = \\phpQuery::newDocument($contentFieldHtml);\n \n         $contentFieldHtml = $pq->htmlOuter();\n \n \n-\n         $fieldsData = [\n             'field_data_0' => [\n                 'attributes' => [\n@@ -130,7 +125,6 @@ public function testSaveContentOnPageLiveEditFromBootstrapExamples()\n         ]);\n \n \n-\n         $findPage = Page::whereId($newCleanMlPage)->first();\n \n         $pageId = $findPage->id;\n@@ -172,12 +166,12 @@ public function testSaveContentOnPageLiveEditFromBootstrapExamples()\n \n \n             //remove empty tags\n-           $html =  preg_replace('/<[^\\/>]*>([\\s]?)*<\\/[^>]*>/', '', $html);\n+            $html = preg_replace('/<[^\\/>]*>([\\s]?)*<\\/[^>]*>/', '', $html);\n \n             // remove script tags\n             $html = preg_replace('/<script\\b[^>]*>(.*?)<\\/script>/is', \"\", $html);\n \n-             // remove code tags\n+            // remove code tags\n             $html = preg_replace('/<code\\b[^>]*>(.*?)<\\/code>/is', \"\", $html);\n \n \n@@ -201,8 +195,6 @@ public function testSaveContentOnPageLiveEditFromBootstrapExamples()\n             ];\n \n \n-\n-\n             $encoded = base64_encode(json_encode($fieldsData));\n \n             $response = $this->call(\n@@ -225,7 +217,6 @@ public function testSaveContentOnPageLiveEditFromBootstrapExamples()\n             $this->assertEquals($fieldSaved[0]['field'], 'content');\n \n \n-\n             $pq2 = \\phpQuery::newDocument($contentFieldHtml);\n             $this->assertEquals($contentFieldHtml, $pq2->htmlOuter());\n \n@@ -273,7 +264,6 @@ public function testSaveContentOnPageLiveEditXssList()\n         $_SERVER['HTTP_REFERER'] = content_link($pageId);\n \n \n-\n         $zip = new \\ZipArchive();\n         $zip->open(__DIR__ . '/../../Helper/tests/misc/xss-test-files.zip');\n         $xssList = $zip->getFromName('xss-payload-list.txt');\n@@ -289,14 +279,13 @@ public function testSaveContentOnPageLiveEditXssList()\n         foreach ($xssListChunks as $stringChunk) {\n \n             $string = implode(PHP_EOL, $stringChunk);\n-             if (empty(trim($string))) {\n+            if (empty(trim($string))) {\n                 continue;\n             }\n \n             $contentFieldHtml = $string;\n \n \n-\n             $fieldsData = [\n                 'field_data_0' => [\n                     'attributes' => [\n@@ -333,7 +322,7 @@ public function testSaveContentOnPageLiveEditXssList()\n             $contentFieldHtml1 = trim($contentFieldHtml);\n             $contentFieldHtml2 = trim($findPage->content);\n \n-           $this->assertNotEquals($contentFieldHtml1, $contentFieldHtml2);\n+            $this->assertNotEquals($contentFieldHtml1, $contentFieldHtml2);\n \n \n             foreach ($stringChunk as $stringItem) {\n@@ -344,12 +333,10 @@ public function testSaveContentOnPageLiveEditXssList()\n             }\n \n \n-\n         }\n     }\n \n \n-\n     public function testSaveContentOnPageLiveEditFromOtherExamples()\n     {\n         $this->cleanupAndPrepare();\n@@ -390,7 +377,7 @@ public function testSaveContentOnPageLiveEditFromOtherExamples()\n                 $ext = get_file_extension($fn);\n                 if ($ext == 'html') {\n                     $string = $zip->getFromName($fn);\n-                    if(trim($string) == ''){\n+                    if (trim($string) == '') {\n                         continue;\n                     }\n                     $htmls[$fn] = $string;\n@@ -421,14 +408,13 @@ public function testSaveContentOnPageLiveEditFromOtherExamples()\n         $htmlsChunks = array_chunk($htmls, 100);\n \n \n+        foreach ($htmlsChunks as $k => $htmlChunk) {\n \n-      foreach ($htmlsChunks as $k => $htmlChunk) {\n-\n-          $html = implode('--------chunk-------', $htmlChunk);\n-         $contentFieldHtml = $html;\n+            $html = implode('--------chunk-------', $htmlChunk);\n+            $contentFieldHtml = $html;\n \n \n-           // $contentFieldHtml = str_replace('{SITE_URL}', site_url(), $contentFieldHtml);\n+            // $contentFieldHtml = str_replace('{SITE_URL}', site_url(), $contentFieldHtml);\n             $fieldsData = [\n                 'field_data_0' => [\n                     'attributes' => [\n@@ -462,7 +448,6 @@ public function testSaveContentOnPageLiveEditFromOtherExamples()\n             $fieldSaved = $response->decodeResponseJson();\n \n \n-\n             $findPage = Page::whereId($fieldSaved[0]['id'])->first();\n             $contentFieldHtml1 = trim($contentFieldHtml);\n             $contentFieldHtml2 = trim($findPage->content);\n@@ -471,13 +456,37 @@ public function testSaveContentOnPageLiveEditFromOtherExamples()\n             $this->assertEquals($contentFieldHtml, $findPage->content);\n \n \n-       }\n+        }\n+\n+\n+    }\n+\n+\n+    public function testSaveContentXssSpaceInUrlAttribute()\n+    {\n+\n+        $this->cleanupAndPrepare();\n+        $unique = uniqid('testSaveContentXssInUrlAttribute');\n+        $newCleanPage = save_content([\n+            'subtype' => 'static',\n+            'content_type' => 'page',\n+            'layout_file' => 'clean.php',\n+            'title' => 'testSaveContentXssInUrlAttribute-save' . $unique,\n+            'preview_layout_file' => 'clean.php',\n+            'url' => 'url with space ' . $unique . '  <script>alert(1)</script>',\n+            'is_active' => 1,\n+        ]);\n+\n+        $findPage = Page::whereId($newCleanPage)->first();\n \n+        $this->assertEquals($findPage->url, 'url-with-space-' . strtolower($unique));\n \n     }\n \n \n-    private function cleanupAndPrepare(){\n+\n+    private function cleanupAndPrepare()\n+    {\n         $user = User::where('is_admin', '=', '1')->first();\n         Auth::login($user);\n         \\Config::set('microweber.disable_model_cache', 1);\n@@ -489,18 +498,17 @@ private function cleanupAndPrepare(){\n \n     public static function fixLinksPrecentAttributes($text)\n     {\n-        $text = str_ireplace('{SITE_URL}','___mw-site-url-temp-replace-on-clean___', $text);\n+        $text = str_ireplace('{SITE_URL}', '___mw-site-url-temp-replace-on-clean___', $text);\n         $pq = \\phpQuery::newDocument($text);\n \n-        foreach($pq->find('a') as $stuffs)\n-        {\n+        foreach ($pq->find('a') as $stuffs) {\n             $href = pq($stuffs)->attr('href');\n-            if($href){\n-            pq($stuffs)->attr('href', str_replace(' ', '%20', $href));\n+            if ($href) {\n+                pq($stuffs)->attr('href', str_replace(' ', '%20', $href));\n             }\n         }\n         $text = $pq->htmlOuter();\n-        $text = str_ireplace('___mw-site-url-temp-replace-on-clean___','{SITE_URL}',     $text);\n+        $text = str_ireplace('___mw-site-url-temp-replace-on-clean___', '{SITE_URL}', $text);\n         return $text;\n \n     }"
        },
        {
          "filename": "src/MicroweberPackages/Database/DatabaseManager.php",
          "status": "modified",
          "additions": 20,
          "deletions": 4,
          "patch": "@@ -668,16 +668,32 @@ public function save($table, $data = false, $data_to_save_options = false)\n                     $criteria['id'] = $next_id;\n                 }\n             }\n-            $id_to_return = $this->table($table_assoc_name)->insert($criteria);\n+\n+            if(method_exists($this->table($table),'create')){\n+                $id_to_return = $this->table($table)->create($criteria);\n+            } else {\n+                $id_to_return = $this->table($table)->insert($criteria);\n+            }\n+             //$id_to_return = $this->table($table_assoc_name)->insert($criteria);\n+         //   $id_to_return = $this->table($table_assoc_name)->create($criteria);\n             $id_to_return = $this->last_id($table);\n \n         } else {\n+\n             $insert_or_update = $highestId = $this->table($table)->where('id', $criteria['id'])->count();\n             if ($insert_or_update != 0) {\n                 $insert_or_update = 'update';\n             } else {\n-                $insert_or_update = 'insert';\n+              $insert_or_update = 'insert';\n+              if(method_exists($this->table($table),'create')){\n+                    $insert_or_update = 'create';\n+              }\n+          //  $insert_or_update = 'create';\n             }\n+\n+\n+\n+\n             $id_to_return = $this->table($table_assoc_name)->where('id', $criteria['id'])->$insert_or_update($criteria);\n             $id_to_return = $criteria['id'];\n         }\n@@ -965,8 +981,8 @@ public function table($table, $params = [])\n             $this->use_model_cache[$table]= true;\n \n             if ($table == 'content') {\n-              //  $model = new Content($params);\n-                 $model = app()->make(Content::class);\n+                 $model = new Content($params);\n+              //   $model = app()->make(Content::class);\n \n                 //    $model::boot();\n             } else if ($table == 'categories') {"
        },
        {
          "filename": "src/MicroweberPackages/Module/Models/Module.php",
          "status": "modified",
          "additions": 9,
          "deletions": 7,
          "patch": "@@ -46,13 +46,15 @@ public function icon()\n \n     public function getIconInline()\n     {\n-        $icon = str_replace( '{SITE_URL}', '', $this->icon);\n-        if (get_file_extension($icon) == 'svg') {\n-            $content =  file_get_contents($icon);\n-            $content = str_replace('<?xml version=\"1.0\" encoding=\"utf-8\"?>', '', $content);\n-            return $content;\n-        } else {\n-            return '<img src=\"' . $icon . '\" />';\n+        $icon = str_replace('{SITE_URL}', '', $this->icon);\n+        if (file_exists($icon)) {\n+            if (get_file_extension($icon) == 'svg') {\n+                $content = file_get_contents($icon);\n+                $content = str_replace('<?xml version=\"1.0\" encoding=\"utf-8\"?>', '', $content);\n+                return $content;\n+            } else {\n+                return '<img src=\"' . $icon . '\" />';\n+            }\n         }\n     }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d4e8c4a13967ac9856c3e1179d4185e59b8d9311",
            "date": "2024-11-26T15:08:46Z",
            "author_login": "peter-mw"
          },
          {
            "sha": "9a701a997a4041f040b00d989b19e446c34419e5",
            "date": "2024-06-26T12:33:18Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "5851e060318fb8065a478df6b63b335b1d3a52c2",
            "date": "2024-06-26T11:34:21Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "7c37d77e617d35cdefdcaf96c7a18a33a9758289",
            "date": "2024-06-26T11:14:53Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "eff6fadcadd749e8f4295bec99bf173d2401f3ac",
            "date": "2024-06-26T11:11:53Z",
            "author_login": "Radanovn"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 2.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-07T15:15:09.533",
    "last_modified": "2024-11-21T08:16:33.000",
    "fix_date": "2023-06-07T11:18:07Z"
  },
  "references": [
    {
      "url": "https://github.com/microweber/microweber/commit/42efa981a2239d042d910069952d6276497bdcf1",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d00686b0-f89a-4e14-98d7-b8dd3f92a6e5",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/microweber/microweber/commit/42efa981a2239d042d910069952d6276497bdcf1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d00686b0-f89a-4e14-98d7-b8dd3f92a6e5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.339134",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "microweber",
    "owner": "microweber",
    "created_at": "2010-10-07T09:04:43Z",
    "updated_at": "2025-01-13T15:04:29Z",
    "pushed_at": "2025-01-14T13:26:48Z",
    "size": 1026007,
    "stars": 3170,
    "forks": 887,
    "open_issues": 360,
    "watchers": 3170,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "HTML": 12566636,
      "PHP": 11976208,
      "JavaScript": 8696748,
      "CSS": 3597687,
      "SCSS": 2178754,
      "Blade": 1663671,
      "Less": 518400,
      "Hack": 476030,
      "MDX": 387317,
      "Vue": 344860,
      "Ruby": 12504,
      "OCaml": 4815,
      "Dockerfile": 1548,
      "CoffeeScript": 950,
      "Batchfile": 61,
      "Shell": 59,
      "Sass": 1
    },
    "commit_activity": {
      "total_commits_last_year": 1332,
      "avg_commits_per_week": 25.615384615384617,
      "days_active_last_year": 106
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:59:40.368111"
  }
}