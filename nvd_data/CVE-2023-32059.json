{
  "cve_id": "CVE-2023-32059",
  "github_data": {
    "repository": "vyperlang/vyper",
    "fix_commit": "c3e68c302aa6e1429946473769dd1232145822ac",
    "related_commits": [
      "c3e68c302aa6e1429946473769dd1232145822ac",
      "c3e68c302aa6e1429946473769dd1232145822ac"
    ],
    "patch_url": "https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac.patch",
    "fix_commit_details": {
      "sha": "c3e68c302aa6e1429946473769dd1232145822ac",
      "commit_date": "2023-05-11T20:47:41Z",
      "author": {
        "login": "charles-cooper",
        "type": "User",
        "stats": {
          "total_commits": 1087,
          "average_weekly_commits": 2.539719626168224,
          "total_additions": 171904,
          "total_deletions": 132151,
          "weeks_active": 180
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-ph9x-4vc9-m39g",
        "length": 405,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 66,
        "additions": 63,
        "deletions": 3
      },
      "files": [
        {
          "filename": "tests/parser/features/test_internal_call.py",
          "status": "modified",
          "additions": 62,
          "deletions": 0,
          "patch": "@@ -1,6 +1,9 @@\n+import string\n from decimal import Decimal\n \n+import hypothesis.strategies as st\n import pytest\n+from hypothesis import given, settings\n \n from vyper.compiler import compile_code\n from vyper.exceptions import ArgumentException, CallViolation\n@@ -642,3 +645,62 @@ def bar() -> String[6]:\n     c = get_contract_with_gas_estimation(contract)\n \n     assert c.bar() == \"hello\"\n+\n+\n+# TODO probably want to refactor these into general test utils\n+st_uint256 = st.integers(min_value=0, max_value=2**256 - 1)\n+st_string65 = st.text(max_size=65, alphabet=string.printable)\n+st_bytes65 = st.binary(max_size=65)\n+st_sarray3 = st.lists(st_uint256, min_size=3, max_size=3)\n+st_darray3 = st.lists(st_uint256, max_size=3)\n+\n+internal_call_kwargs_cases = [\n+    (\"uint256\", st_uint256),\n+    (\"String[65]\", st_string65),\n+    (\"Bytes[65]\", st_bytes65),\n+    (\"uint256[3]\", st_sarray3),\n+    (\"DynArray[uint256, 3]\", st_darray3),\n+]\n+\n+\n+@pytest.mark.parametrize(\"typ1,strategy1\", internal_call_kwargs_cases)\n+@pytest.mark.parametrize(\"typ2,strategy2\", internal_call_kwargs_cases)\n+def test_internal_call_kwargs(get_contract, typ1, strategy1, typ2, strategy2):\n+    # GHSA-ph9x-4vc9-m39g\n+\n+    @given(kwarg1=strategy1, default1=strategy1, kwarg2=strategy2, default2=strategy2)\n+    @settings(deadline=None, max_examples=5)  # len(cases) * len(cases) * 5 * 5\n+    def fuzz(kwarg1, kwarg2, default1, default2):\n+        code = f\"\"\"\n+@internal\n+def foo(a: {typ1} = {repr(default1)}, b: {typ2} = {repr(default2)}) -> ({typ1}, {typ2}):\n+    return a, b\n+\n+@external\n+def test0() -> ({typ1}, {typ2}):\n+    return self.foo()\n+\n+@external\n+def test1() -> ({typ1}, {typ2}):\n+    return self.foo({repr(kwarg1)})\n+\n+@external\n+def test2() -> ({typ1}, {typ2}):\n+    return self.foo({repr(kwarg1)}, {repr(kwarg2)})\n+\n+@external\n+def test3(x1: {typ1}) -> ({typ1}, {typ2}):\n+    return self.foo(x1)\n+\n+@external\n+def test4(x1: {typ1}, x2: {typ2}) -> ({typ1}, {typ2}):\n+    return self.foo(x1, x2)\n+        \"\"\"\n+        c = get_contract(code)\n+        assert c.test0() == [default1, default2]\n+        assert c.test1() == [kwarg1, default2]\n+        assert c.test2() == [kwarg1, kwarg2]\n+        assert c.test3(kwarg1) == [kwarg1, default2]\n+        assert c.test4(kwarg1, kwarg2) == [kwarg1, kwarg2]\n+\n+    fuzz()"
        },
        {
          "filename": "vyper/codegen/context.py",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -267,10 +267,8 @@ def _check(cond, s=\"Unreachable\"):\n         # _check(all(l.typ == r.typ for (l, r) in zip(args_ir, sig.args))\n \n         num_provided_kwargs = len(args_ir) - len(sig.base_args)\n-        num_kwargs = len(sig.default_args)\n-        kwargs_needed = num_kwargs - num_provided_kwargs\n \n-        kw_vals = list(sig.default_values.values())[:kwargs_needed]\n+        kw_vals = list(sig.default_values.values())[num_provided_kwargs:]\n \n         return sig, kw_vals\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c208b954564e8fffdd4c86cc3c497e0c3df1aeec",
            "date": "2025-01-14T17:09:31Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "db8dcc713168b16977b5b07267653c9024f6acea",
            "date": "2025-01-12T17:01:49Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "10e91d5a2ba6eaab2f7194fd86cefb7a0ff19964",
            "date": "2025-01-12T16:34:14Z",
            "author_login": "tserg"
          },
          {
            "sha": "43259f8953672ef7a19167c6c048d020d82e05da",
            "date": "2025-01-12T16:32:46Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "9b5523e6131335c81714e7e8af63cc49404f5ce7",
            "date": "2025-01-12T16:19:30Z",
            "author_login": "charles-cooper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-683",
    "description": "Vyper is a Pythonic smart contract language for the Ethereum virtual machine. Prior to version 0.3.8, internal calls with default arguments are compiled incorrectly. Depending on the number of arguments provided in the call, the defaults are added not right-to-left, but left-to-right. If the types are incompatible, typechecking is bypassed. The ability to pass kwargs to internal functions is an undocumented feature that is not well known about. The issue is patched in version 0.3.8.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-11T22:15:11.803",
    "last_modified": "2024-11-21T08:02:37.893",
    "fix_date": "2023-05-11T20:47:41Z"
  },
  "references": [
    {
      "url": "https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-ph9x-4vc9-m39g",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-ph9x-4vc9-m39g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.958815",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vyper",
    "owner": "vyperlang",
    "created_at": "2016-11-11T08:56:41Z",
    "updated_at": "2025-01-13T17:32:27Z",
    "pushed_at": "2025-01-12T17:01:50Z",
    "size": 11939,
    "stars": 4948,
    "forks": 817,
    "open_issues": 489,
    "watchers": 4948,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 2662211,
      "Makefile": 2222,
      "Batchfile": 1614,
      "Dockerfile": 1145,
      "Shell": 472
    },
    "commit_activity": {
      "total_commits_last_year": 317,
      "avg_commits_per_week": 6.096153846153846,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:48:09.728520"
  }
}