{
  "cve_id": "CVE-2023-32076",
  "github_data": {
    "repository": "in-toto/in-toto",
    "fix_commit": "3a21d84f40811b7d191fa7bd17265c1f99599afd",
    "related_commits": [
      "3a21d84f40811b7d191fa7bd17265c1f99599afd",
      "3a21d84f40811b7d191fa7bd17265c1f99599afd"
    ],
    "patch_url": "https://github.com/in-toto/in-toto/commit/3a21d84f40811b7d191fa7bd17265c1f99599afd.patch",
    "fix_commit_details": {
      "sha": "3a21d84f40811b7d191fa7bd17265c1f99599afd",
      "commit_date": "2023-05-10T17:34:44Z",
      "author": {
        "login": "adityasaky",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wc64-c5rv-32pf",
        "length": 70,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 424,
        "additions": 6,
        "deletions": 418
      },
      "files": [
        {
          "filename": "doc/source/settings.rst",
          "status": "modified",
          "additions": 5,
          "deletions": 48,
          "patch": "@@ -1,53 +1,10 @@\n Settings\n ========\n \n-For historical reasons some command line options may also be configured via\n-rcfiles in one of the following locations *.in_totorc*, *~/.in_totorc*,\n-*~/.in_toto/config*, *~/.config/in_toto*, *~/.config/in_toto/config*,\n-*/etc/in_totorc*, */etc/in_toto/config* or via environment variables in above\n-presented order of precedence.\n-\n-Default values for these settings are defined in the `in_toto.settings\n-<https://github.com/in-toto/in-toto/blob/develop/in_toto/settings.py>`_ module.\n-Settings names are case sensitive and settings values that contain colons are\n-parsed as list.\n+Default values for some in-toto CLI/API arguments are defined in global variables of the\n+``in_toto.settings`` module. Historically, configuration required modifying these\n+globals directly in source code or at runtime. This method is discouraged. Instead,\n+CLI/API arguments should be used.\n \n .. note::\n-  Settings configured via rcfiles and environment variables are **only**\n-  considered if in-toto is invoked form the **command line**, and ignored when\n-  using the API.\n-  The default ``in_toto.settings``, on the other hand, are considered in both\n-  cases, unless overridden via API function arguments or, in the case of CLI\n-  usage, environment variables, rcfiles, or CLI arguments.\n-\n-\n-Setting Types\n--------------\n-\n-- ``ARTIFACT_EXCLUDE_PATTERNS`` -- gitignore-style paths patterns exclude\n-  artifacts from being recorded.\n-- ``ARTIFACT_BASE_PATH`` -- material and product paths passed to\n-  ``in-toto-run`` are searched relative to the base path. The base path itself\n-  is not included in the link metadata. Default is the current working\n-  directory.\n-- ``LINK_CMD_EXEC_TIMEOUT`` -- maximum timeout setting for the in-toto-run\n-  command.\n-\n-\n-Example Usage\n--------------\n-\n-.. code-block:: sh\n-\n-  # Configure settings via bash-style environment variable export\n-  export IN_TOTO_ARTIFACT_BASE_PATH='/home/user/project'\n-  export IN_TOTO_ARTIFACT_EXCLUDE_PATTERNS='*.link:.gitignore'\n-  export IN_TOTO_LINK_CMD_EXEC_TIMEOUT='10'\n-\n-.. code-block:: sh\n-\n-  # Configure settings via ~/.in_totorc\n-  [in-toto settings]\n-  ARTIFACT_BASE_PATH=/home/user/project\n-  ARTIFACT_EXCLUDE_PATTERNS=*.link:.gitignore\n-  LINK_CMD_EXEC_TIMEOUT=10\n+  The globals ``DEBUG`` and ``LINK_CMD_EXEC_TIMEOUT`` can only be configured directly."
        },
        {
          "filename": "in_toto/in_toto_record.py",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -33,7 +33,6 @@\n from securesystemslib import interface\n \n import in_toto.runlib\n-import in_toto.user_settings\n from in_toto import __version__\n from in_toto.common_args import (\n     BASE_PATH_ARGS,\n@@ -233,9 +232,6 @@ def main():\n \n     LOG.setLevelVerboseOrQuiet(args.verbose, args.quiet)\n \n-    # Override defaults in settings.py with environment variables and RCfiles\n-    in_toto.user_settings.set_settings()\n-\n     # Regular signing and GPG signing are mutually exclusive\n     if (args.key is None) == (args.gpg is None):\n         parser.print_usage()"
        },
        {
          "filename": "in_toto/in_toto_run.py",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -32,7 +32,6 @@\n \n from securesystemslib import interface\n \n-import in_toto.user_settings\n from in_toto import __version__, runlib\n from in_toto.common_args import (\n     BASE_PATH_ARGS,\n@@ -254,9 +253,6 @@ def main():\n \n     LOG.setLevelVerboseOrQuiet(args.verbose, args.quiet)\n \n-    # Override defaults in settings.py with environment variables and RCfiles\n-    in_toto.user_settings.set_settings()\n-\n     # Regular signing and GPG signing are mutually exclusive\n     if (args.key is None) == (args.gpg is None):\n         parser.print_usage()"
        },
        {
          "filename": "in_toto/runlib.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -111,8 +111,7 @@ def record_artifacts_as_dict(\n       exclude_patterns: (optional)\n               Artifacts matched by the pattern are excluded from the result.\n               Exclude patterns can be passed as argument or specified via\n-              ARTIFACT_EXCLUDE_PATTERNS setting (see `in_toto.settings`) or\n-              via envvars or rcfiles (see `in_toto.user_settings`).\n+              ARTIFACT_EXCLUDE_PATTERNS setting (see `in_toto.settings`).\n               If passed, patterns specified via settings are overriden.\n \n       base_path: (optional)"
        },
        {
          "filename": "in_toto/settings.py",
          "status": "modified",
          "additions": 0,
          "deletions": 6,
          "patch": "@@ -25,14 +25,8 @@\n      import in_toto.settings\n      in_toto.settings.ARTIFACT_BASE_PATH = \"/home/user/project\"\n      ```\n-  - or, when using in-toto via command line tooling, with environment variables\n-    or RCfiles, see the `in_toto.user_settings` module\n-\n \"\"\"\n # The debug setting is used to set to the in-toto base logger to logging.DEBUG\n-# TODO: This setting is currently not available via environment variables or\n-# rcfiles, partially because at the moment it is read before we parse\n-# envvars/rcfiles. Do we want to make it available to those as well?\n DEBUG = False\n \n # See docstring of `in-toto.record_artifacts_as_dict` for how this is used"
        },
        {
          "filename": "in_toto/user_settings.py",
          "status": "removed",
          "additions": 0,
          "deletions": 227,
          "patch": "@@ -1,227 +0,0 @@\n-# Copyright New York University and the in-toto contributors\n-# SPDX-License-Identifier: Apache-2.0\n-\n-\"\"\"\n-<Program Name>\n-  user_settings.py\n-\n-<Author>\n-  Lukas Puehringer <lukas.puehringer@nyu.edu>\n-\n-<Started>\n-  Oct 25, 2017\n-\n-<Copyright>\n-  See LICENSE for licensing information.\n-\n-<Purpose>\n-  Provides methods to parse environment variables (`get_env`) and RCfiles\n-  (`get_rc`) and to override default settings (`set_settings`) defined in the\n-  `in_toto.settings` module.\n-\n-  Check out the respective docstrings to learn about the requirements for\n-  environment variables and RCfiles (includes examples).\n-\n-\"\"\"\n-import logging\n-import os\n-\n-import in_toto.settings\n-\n-try:\n-    import configparser\n-except ImportError:  # pragma: no cover\n-    import ConfigParser as configparser\n-\n-# Inherits from in_toto base logger (c.f. in_toto.log)\n-LOG = logging.getLogger(__name__)\n-\n-\n-USER_PATH = os.path.expanduser(\"~\")\n-\n-# Prefix required by environment variables to be considered as in_toto settings\n-ENV_PREFIX = \"IN_TOTO_\"\n-\n-# List of considered rcfile paths in the order they get parsed and overridden,\n-# i.e. the same setting in `/etc/in_toto/config` and `.in_totorc` (cwd) uses\n-# the latter\n-RC_PATHS = [\n-    os.path.join(\"/etc\", \"in_toto\", \"config\"),\n-    os.path.join(\"/etc\", \"in_totorc\"),\n-    os.path.join(USER_PATH, \".config\", \"in_toto\", \"config\"),\n-    os.path.join(USER_PATH, \".config\", \"in_toto\"),\n-    os.path.join(USER_PATH, \".in_toto\", \"config\"),\n-    os.path.join(USER_PATH, \".in_totorc\"),\n-    \".in_totorc\",\n-]\n-\n-# List of settings, for which defaults exist in `settings.py`\n-# TODO: Should we use `dir` on the module instead? If we list them here, we\n-# have to manually update if `settings.py` changes.\n-IN_TOTO_SETTINGS = [\n-    \"ARTIFACT_EXCLUDE_PATTERNS\",\n-    \"ARTIFACT_BASE_PATH\",\n-    \"LINK_CMD_EXEC_TIMEOUT\",\n-]\n-\n-\n-def _colon_split(value):\n-    \"\"\"If `value` contains colons, return a list split at colons,\n-    return value otherwise.\"\"\"\n-    value_list = value.split(\":\")\n-    if len(value_list) > 1:\n-        return value_list\n-\n-    return value\n-\n-\n-def get_env():\n-    \"\"\"\n-    <Purpose>\n-      Parse environment for variables with prefix `ENV_PREFIX` and return\n-      a dict of key-value pairs.\n-\n-      The prefix `ENV_PREFIX` is stripped from the keys in the returned dict.\n-\n-      Values that contain colons (:) are split at the postion of the colons and\n-      converted into a list.\n-\n-\n-      Example:\n-\n-      ```\n-      # Exporting variables in e.g. bash\n-      export IN_TOTO_ARTIFACT_BASE_PATH='/home/user/project'\n-      export IN_TOTO_ARTIFACT_EXCLUDE_PATTERNS='*.link:.gitignore'\n-      export IN_TOTO_LINK_CMD_EXEC_TIMEOUT='10'\n-      ```\n-\n-      produces\n-\n-      ```\n-      {\n-        \"ARTIFACT_BASE_PATH\": \"/home/user/project\"\n-        \"ARTIFACT_EXCLUDE_PATTERNS\": [\"*.link\", \".gitignore\"]\n-        \"LINK_CMD_EXEC_TIMEOUT\": \"10\"\n-      }\n-      ```\n-\n-    <Exceptions>\n-      None.\n-\n-    <Side Effects>\n-      Calls function to read files from disk.\n-\n-    <Returns>\n-      A dictionary containing the parsed key-value pairs.\n-\n-    \"\"\"\n-    env_dict = {}\n-\n-    for name, value in os.environ.items():\n-        if name.startswith(ENV_PREFIX) and len(name) > len(ENV_PREFIX):\n-            stripped_name = name[len(ENV_PREFIX) :]\n-\n-            env_dict[stripped_name] = _colon_split(value)\n-\n-    return env_dict\n-\n-\n-def get_rc():\n-    \"\"\"\n-    <Purpose>\n-      Reads RCfiles from the paths defined in `RC_PATHS` and returns\n-      a dictionary with all parsed key-value pairs.\n-\n-      The RCfile format is as expected by Python's builtin `ConfigParser` with\n-      the addition that values that contain colons (:) are split at the position\n-      of the colons and converted into a list.\n-\n-      Section titles in RCfiles are ignored when parsing the key-value pairs.\n-      However, there has to be at least one section defined.\n-\n-      The paths in `RC_PATHS` are ordered in reverse precedence, i.e. each file's\n-      settings override a previous file's settings, e.g. a setting defined\n-      in `.in_totorc` (in the current working dir) overrides the same\n-      setting defined in `~/.in_totorc` (in the user's home dir) and so on ...\n-\n-      Example:\n-\n-      ```\n-      # E.g. file `.in_totorc` in current working directory\n-      [in-toto setting]\n-      ARTIFACT_BASE_PATH = /home/user/project\n-      ARTIFACT_EXCLUDE_PATTERNS = *.link:.gitignore\n-      LINK_CMD_EXEC_TIMEOUT = 10\n-      ```\n-\n-      produces\n-\n-      ```\n-      {\n-        \"ARTIFACT_BASE_PATH\": \"/home/user/project\"\n-        \"ARTIFACT_EXCLUDE_PATTERNS\": [\"*.link\", \".gitignore\"]\n-        \"LINK_CMD_EXEC_TIMEOUT\": \"10\"\n-      }\n-      ```\n-\n-    <Exceptions>\n-      None.\n-\n-    <Side Effects>\n-      Calls function to read files from disk.\n-\n-    <Returns>\n-      A dictionary containing the parsed key-value pairs.\n-\n-    \"\"\"\n-    rc_dict = {}\n-\n-    config = configparser.ConfigParser()\n-    # Reset `optionxform`'s default case conversion to enable case-sensitivity\n-    config.optionxform = str\n-    config.read(RC_PATHS)\n-\n-    for section in config.sections():\n-        for name, value in config.items(section):\n-            rc_dict[name] = _colon_split(value)\n-\n-    return rc_dict\n-\n-\n-def set_settings():\n-    \"\"\"\n-    <Purpose>\n-      Calls functions that read in-toto related environment variables and RCfiles\n-      and overrides variables in `settings.py` with the retrieved values, if they\n-      are whitelisted in `IN_TOTO_SETTINGS`.\n-\n-      Settings defined in RCfiles take precedence over settings defined in\n-      environment variables.\n-\n-    <Exceptions>\n-      None.\n-\n-    <Side Effects>\n-      Calls functions that read environment variables and files from disk.\n-\n-    <Returns>\n-      None.\n-\n-    \"\"\"\n-    user_settings = get_env()\n-    user_settings.update(get_rc())\n-\n-    # If the user has specified one of the settings whitelisted in\n-    # IN_TOTO_SETTINGS per envvar or rcfile, override the item in `settings.py`\n-    for setting in IN_TOTO_SETTINGS:\n-        user_setting = user_settings.get(setting)\n-        if user_setting:\n-            LOG.info(\"Setting (user): {0}={1}\".format(setting, user_setting))\n-            setattr(in_toto.settings, setting, user_setting)\n-\n-        else:\n-            default_setting = getattr(in_toto.settings, setting)\n-            LOG.info(\n-                \"Setting (default): {0}={1}\".format(setting, default_setting)\n-            )"
        },
        {
          "filename": "tests/test_user_settings.py",
          "status": "removed",
          "additions": 0,
          "deletions": 127,
          "patch": "@@ -1,127 +0,0 @@\n-# Copyright New York University and the in-toto contributors\n-# SPDX-License-Identifier: Apache-2.0\n-\n-\"\"\"\n-<Program Name>\n-  test_user_settings.py\n-\n-<Author>\n-  Lukas Puehringer <lukas.puehringer@nyu.edu>\n-\n-<Started>\n-  Oct 26, 2017\n-\n-<Copyright>\n-  See LICENSE for licensing information.\n-\n-<Purpose>\n-  Test in_toto/user_settings.py\n-\n-\"\"\"\n-import os\n-import unittest\n-\n-import in_toto.settings\n-import in_toto.user_settings\n-\n-\n-class TestUserSettings(unittest.TestCase):\n-    @classmethod\n-    def setUpClass(self):\n-        self.working_dir = os.getcwd()\n-\n-        # Backup settings to restore them in `tearDownClass`\n-        self.settings_backup = {}\n-        for key in dir(in_toto.settings):\n-            self.settings_backup[key] = getattr(in_toto.settings, key)\n-\n-        # We use `rc_test` as test dir because it has an `.in_totorc`, which\n-        # is loaded (from CWD) in `user_settings.set_settings` related tests\n-        self.test_dir = os.path.join(os.path.dirname(__file__), \"rc_test\")\n-        os.chdir(self.test_dir)\n-\n-        os.environ[\"IN_TOTO_ARTIFACT_EXCLUDE_PATTERNS\"] = \"e:n:v\"\n-        os.environ[\"IN_TOTO_ARTIFACT_BASE_PATH\"] = \"e/n/v\"\n-        os.environ[\"IN_TOTO_LINK_CMD_EXEC_TIMEOUT\"] = \"0.1\"\n-        os.environ[\"IN_TOTO_NOT_WHITELISTED\"] = \"parsed\"\n-        os.environ[\"NOT_PARSED\"] = \"ignored\"\n-\n-    @classmethod\n-    def tearDownClass(self):\n-        os.chdir(self.working_dir)\n-\n-        # Other unittests might depend on defaults:\n-        # Restore monkey patched settings ...\n-        for key, val in self.settings_backup.items():\n-            setattr(in_toto.settings, key, val)\n-\n-        # ... and delete test environment variables\n-        del os.environ[\"IN_TOTO_ARTIFACT_EXCLUDE_PATTERNS\"]\n-        del os.environ[\"IN_TOTO_ARTIFACT_BASE_PATH\"]\n-        del os.environ[\"IN_TOTO_LINK_CMD_EXEC_TIMEOUT\"]\n-        del os.environ[\"IN_TOTO_NOT_WHITELISTED\"]\n-        del os.environ[\"NOT_PARSED\"]\n-\n-    def test_get_rc(self):\n-        \"\"\"Test rcfile parsing in CWD.\"\"\"\n-        rc_dict = in_toto.user_settings.get_rc()\n-\n-        # Parsed (and split) and used by `set_settings` to monkeypatch settings\n-        self.assertListEqual(\n-            rc_dict[\"ARTIFACT_EXCLUDE_PATTERNS\"], [\"r\", \"c\", \"file\"]\n-        )\n-        self.assertEqual(rc_dict[\"LINK_CMD_EXEC_TIMEOUT\"], \"20\")\n-\n-        # Parsed but ignored in `set_settings` (not in case sensitive whitelist)\n-        self.assertEqual(rc_dict[\"artifact_base_path\"], \"r/c/file\")\n-        self.assertEqual(rc_dict[\"new_rc_setting\"], \"new rc setting\")\n-\n-    def test_get_env(self):\n-        \"\"\"Test environment variables parsing, prefix and colon splitting.\"\"\"\n-        env_dict = in_toto.user_settings.get_env()\n-\n-        # Parsed and used by `set_settings` to monkeypatch settings\n-        self.assertEqual(env_dict[\"ARTIFACT_BASE_PATH\"], \"e/n/v\")\n-\n-        # Parsed (and split) but overriden by rcfile setting in `set_settings`\n-        self.assertListEqual(\n-            env_dict[\"ARTIFACT_EXCLUDE_PATTERNS\"], [\"e\", \"n\", \"v\"]\n-        )\n-\n-        # Parsed and used by `set_settings`\n-        self.assertEqual(env_dict[\"LINK_CMD_EXEC_TIMEOUT\"], \"0.1\")\n-\n-        # Parsed but ignored in `set_settings` (not in case sensitive whitelist)\n-        self.assertEqual(env_dict[\"NOT_WHITELISTED\"], \"parsed\")\n-\n-        # Not parsed because of missing prefix\n-        self.assertFalse(\"NOT_PARSED\" in env_dict)\n-\n-    def test_set_settings(self):\n-        \"\"\"Test precedence of rc over env and whitelisting.\"\"\"\n-        in_toto.user_settings.set_settings()\n-\n-        # From envvar IN_TOTO_ARTIFACT_BASE_PATH\n-        self.assertEqual(in_toto.settings.ARTIFACT_BASE_PATH, \"e/n/v\")\n-\n-        # From RCfile setting (has precedence over envvar setting)\n-        self.assertListEqual(\n-            in_toto.settings.ARTIFACT_EXCLUDE_PATTERNS, [\"r\", \"c\", \"file\"]\n-        )\n-        self.assertEqual(in_toto.settings.LINK_CMD_EXEC_TIMEOUT, \"20\")\n-\n-        # Not whitelisted rcfile settings are ignored by `set_settings`\n-        self.assertTrue(\"new_rc_setting\" in in_toto.user_settings.get_rc())\n-        self.assertRaises(\n-            AttributeError, getattr, in_toto.settings, \"NEW_RC_SETTING\"\n-        )\n-\n-        # Not whitelisted envvars are ignored by `set_settings`\n-        self.assertTrue(\"NOT_WHITELISTED\" in in_toto.user_settings.get_env())\n-        self.assertRaises(\n-            AttributeError, getattr, in_toto.settings, \"NOT_WHITELISTED\"\n-        )\n-\n-\n-if __name__ == \"__main__\":\n-    unittest.main()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "234ddbe89cc99e705f54261635e57c926611c68a",
            "date": "2025-01-09T14:50:09Z",
            "author_login": "JustinCappos"
          },
          {
            "sha": "c09fbb88185664854f422d74412bc9e5cabad6b4",
            "date": "2025-01-09T14:27:37Z",
            "author_login": "JustinCappos"
          },
          {
            "sha": "341b70ebc8aec2f2502695a88cdf5abe003c7e9e",
            "date": "2025-01-01T21:31:05Z",
            "author_login": "adityasaky"
          },
          {
            "sha": "654a440c4b95d804f41950a1b70258a4a74078ea",
            "date": "2025-01-01T21:29:31Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "90c2affb86c07ee62dbfff281bc026e67f300aad",
            "date": "2025-01-01T21:27:13Z",
            "author_login": "adityasaky"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-15",
    "description": "in-toto is a framework to protect supply chain integrity. The in-toto configuration is read from various directories and allows users to configure the behavior of the framework. The files are from directories following the XDG base directory specification. In versions 1.4.0 and prior, among the files read is `.in_totorc` which is a hidden file in the directory in which in-toto is run. If an attacker controls the inputs to a supply chain step, they can mask their activities by also passing in an `.in_totorc` file that includes the necessary exclude patterns and settings. RC files are widely used in other systems and security issues have been discovered in their implementations as well. Maintainers found in their conversations with in-toto adopters that `in_totorc` is not their preferred way to configure in-toto. As none of the options supported in `in_totorc` is unique, and can be set elsewhere using API parameters or CLI arguments, the maintainers decided to drop support for `in_totorc`. in-toto's `user_settings` module has been dropped altogether in commit 3a21d84f40811b7d191fa7bd17265c1f99599afd. Users may also sandbox functionary code as a security measure.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-10T18:15:10.410",
    "last_modified": "2024-11-21T08:02:39.857",
    "fix_date": "2023-05-10T17:34:44Z"
  },
  "references": [
    {
      "url": "https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/in-toto/in-toto/commit/3a21d84f40811b7d191fa7bd17265c1f99599afd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/in-toto/in-toto/security/advisories/GHSA-wc64-c5rv-32pf",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/in-toto/in-toto/commit/3a21d84f40811b7d191fa7bd17265c1f99599afd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/in-toto/in-toto/security/advisories/GHSA-wc64-c5rv-32pf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.952659",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "in-toto",
    "owner": "in-toto",
    "created_at": "2016-05-24T01:46:38Z",
    "updated_at": "2025-01-13T12:55:57Z",
    "pushed_at": "2025-01-13T21:22:04Z",
    "size": 2950,
    "stars": 896,
    "forks": 141,
    "open_issues": 47,
    "watchers": 896,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop"
    ],
    "languages": {
      "Python": 499211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T19:13:55.887339"
  }
}