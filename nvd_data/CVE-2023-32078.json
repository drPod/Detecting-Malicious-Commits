{
  "cve_id": "CVE-2023-32078",
  "github_data": {
    "repository": "gravitl/netmaker",
    "fix_commit": "b3be57c65bf0bbfab43b66853c8e3637a43e2839",
    "related_commits": [
      "b3be57c65bf0bbfab43b66853c8e3637a43e2839",
      "b3be57c65bf0bbfab43b66853c8e3637a43e2839"
    ],
    "patch_url": "https://github.com/gravitl/netmaker/commit/b3be57c65bf0bbfab43b66853c8e3637a43e2839.patch",
    "fix_commit_details": {
      "sha": "b3be57c65bf0bbfab43b66853c8e3637a43e2839",
      "commit_date": "2023-04-04T20:08:34Z",
      "author": {
        "login": "0xdcarns",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #2158 from gravitl/GRA-1479-user-updates",
        "length": 97,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 29,
        "additions": 29,
        "deletions": 0
      },
      "files": [
        {
          "filename": "controllers/user.go",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -331,7 +331,18 @@ func updateUser(w http.ResponseWriter, r *http.Request) {\n \tw.Header().Set(\"Content-Type\", \"application/json\")\n \tvar params = mux.Vars(r)\n \t// start here\n+\tjwtUser, _, isadmin, err := logic.VerifyJWT(r.Header.Get(\"Authorization\"))\n+\tif err != nil {\n+\t\tlogger.Log(0, \"verifyJWT error\", err.Error())\n+\t\tlogic.ReturnErrorResponse(w, r, logic.FormatError(err, \"internal\"))\n+\t\treturn\n+\t}\n \tusername := params[\"username\"]\n+\tif username != jwtUser && !isadmin {\n+\t\tlogger.Log(0, \"non-admin user\", jwtUser, \"attempted to update user\", username)\n+\t\tlogic.ReturnErrorResponse(w, r, logic.FormatError(errors.New(\"not authorizied\"), \"unauthorized\"))\n+\t\treturn\n+\t}\n \tuser, err := logic.GetUser(username)\n \tif err != nil {\n \t\tlogger.Log(0, username,\n@@ -354,6 +365,11 @@ func updateUser(w http.ResponseWriter, r *http.Request) {\n \t\tlogic.ReturnErrorResponse(w, r, logic.FormatError(err, \"badrequest\"))\n \t\treturn\n \t}\n+\tif userchange.IsAdmin && !isadmin {\n+\t\tlogger.Log(0, \"non-admin user\", jwtUser, \"attempted get admin privilages\")\n+\t\tlogic.ReturnErrorResponse(w, r, logic.FormatError(errors.New(\"not authorizied\"), \"unauthorized\"))\n+\t\treturn\n+\t}\n \tuserchange.Networks = nil\n \tuser, err = logic.UpdateUser(&userchange, user)\n \tif err != nil {"
        },
        {
          "filename": "logic/jwts.go",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ package logic\n import (\n \t\"errors\"\n \t\"fmt\"\n+\t\"strings\"\n \t\"time\"\n \n \t\"github.com/golang-jwt/jwt/v4\"\n@@ -101,6 +102,18 @@ func CreateUserJWT(username string, networks []string, isadmin bool) (response s\n \treturn \"\", err\n }\n \n+// VerifyJWT verifies Auth Header\n+func VerifyJWT(bearerToken string) (username string, networks []string, isadmin bool, err error) {\n+\ttoken := \"\"\n+\ttokenSplit := strings.Split(bearerToken, \" \")\n+\tif len(tokenSplit) > 1 {\n+\t\ttoken = tokenSplit[1]\n+\t} else {\n+\t\treturn \"\", nil, false, errors.New(\"invalid auth header\")\n+\t}\n+\treturn VerifyUserToken(token)\n+}\n+\n // VerifyUserToken func will used to Verify the JWT Token while using APIS\n func VerifyUserToken(tokenString string) (username string, networks []string, isadmin bool, err error) {\n \tclaims := &models.UserClaims{}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bfaac66a5df82c483eb7d55e16a3988a7d574d6b",
            "date": "2025-01-14T05:09:20Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "81f8f3ee7be89c3a2bd2be6f5a8b8c04bd57e0d4",
            "date": "2025-01-10T11:26:00Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "5ae74739069debc9e8b500239a4269c960c38ec5",
            "date": "2025-01-10T07:51:47Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "26300dc9ed2ae5790253141ec884b104ef7c637b",
            "date": "2025-01-10T07:51:14Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "d47be71f3388c2792ae708531177cb2362ea326f",
            "date": "2025-01-10T07:50:37Z",
            "author_login": "abhishek9686"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-639",
    "description": "Netmaker makes networks with WireGuard. An Insecure Direct Object Reference (IDOR) vulnerability was found in versions prior to 0.17.1 and 0.18.6 in the user update function. By specifying another user's username, it was possible to update the other user's password. The issue is patched in 0.17.1 and fixed in 0.18.6. If Users are using 0.17.1, they should run `docker pull gravitl/netmaker:v0.17.1` and `docker-compose up -d`. This will switch them to the patched users. If users are using v0.18.0-0.18.5, they should upgrade to v0.18.6 or later. As a workaround, someone using version 0.17.1 can pull the latest docker image of the backend and restart the server.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-24T22:15:10.267",
    "last_modified": "2024-11-21T08:02:40.113",
    "fix_date": "2023-04-04T20:08:34Z"
  },
  "references": [
    {
      "url": "https://github.com/gravitl/netmaker/commit/b3be57c65bf0bbfab43b66853c8e3637a43e2839",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/pull/2158",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/security/advisories/GHSA-256m-j5qw-38f4",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/commit/b3be57c65bf0bbfab43b66853c8e3637a43e2839",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/pull/2158",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/security/advisories/GHSA-256m-j5qw-38f4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.469322",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "netmaker",
    "owner": "gravitl",
    "created_at": "2021-03-25T15:33:08Z",
    "updated_at": "2025-01-14T07:58:58Z",
    "pushed_at": "2025-01-14T10:13:45Z",
    "size": 276029,
    "stars": 9655,
    "forks": 555,
    "open_issues": 177,
    "watchers": 9655,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 1060295,
      "Shell": 83822,
      "Dockerfile": 441
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:50:17.648713"
  }
}