{
  "cve_id": "CVE-2023-32309",
  "github_data": {
    "repository": "facelessuser/pymdown-extensions",
    "fix_commit": "b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d",
    "related_commits": [
      "b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d",
      "b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d"
    ],
    "patch_url": "https://github.com/facelessuser/pymdown-extensions/commit/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d.patch",
    "fix_commit_details": {
      "sha": "b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d",
      "commit_date": "2023-05-14T17:55:18Z",
      "author": {
        "login": "facelessuser",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-jh85-wwv9-24hv",
        "length": 210,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 97,
        "additions": 88,
        "deletions": 9
      },
      "files": [
        {
          "filename": "docs/src/markdown/about/changelog.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1,5 +1,11 @@\n # Changelog\n \n+## 10.0\n+\n+- **Break**: Snippets: snippets will restrict snippets to ensure they are under the `base_path` preventing snippets\n+  relative to the `base_path` but not explicitly under it. `restrict_base_path` can be set to `False` for legacy\n+  behavior.\n+\n ## 9.11\n \n - **NEW**: Emoji: Update to new CDN and use Twemoji 14.1.2."
        },
        {
          "filename": "docs/src/markdown/extensions/snippets.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -4,6 +4,11 @@\n \n ## Overview\n \n+/// warning | Not Meant for User Facing Sites\n+Snippets is meant to make including snippets in documentation easier, but it should not be used for user facing sites\n+that take and parse user content dynamically.\n+///\n+\n Snippets is an extension to insert markdown or HTML snippets into another markdown file.  Snippets is great for\n situations where you have content you need to insert into multiple documents.  For instance, this document keeps all its\n hyperlinks in a separate file and then includes those hyperlinks at the bottom of a document via Snippets. If a link\n@@ -260,3 +265,4 @@ Option                 | Type            | Default          | Description\n `url_timeout`          | float           | `#!py3 10.0`     | Passes an arbitrary timeout in seconds to URL requestor. By default this is set to 10 seconds.\n `url_request_headers`  | {string:string} | `#!py3 {}`       | Passes arbitrary headers to URL requestor. By default this is set to empty map.\n `dedent_subsections`   | bool            | `#!py3 False`    | Remove any common leading whitespace from every line in text of a subsection that is inserted via \"sections\" or by \"lines\".\n+`restrict_base_path`   | bool            | `#!py True`      | Ensure that the specified snippets are children of the specified base path(s). This prevents a path relative to the base path, but not explicitly a child of the base path."
        },
        {
          "filename": "pymdownx/__meta__.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -185,5 +185,5 @@ def parse_version(ver, pre=False):\n     return Version(major, minor, micro, release, pre, post, dev)\n \n \n-__version_info__ = Version(9, 11, 0, \"final\")\n+__version_info__ = Version(10, 0, 0, \"final\")\n __version__ = __version_info__._get_canonical()"
        },
        {
          "filename": "pymdownx/snippets.py",
          "status": "modified",
          "additions": 17,
          "deletions": 8,
          "patch": "@@ -82,7 +82,8 @@ def __init__(self, config, md):\n         base = config.get('base_path')\r\n         if isinstance(base, str):\r\n             base = [base]\r\n-        self.base_path = base\r\n+        self.base_path = [os.path.abspath(b) for b in base]\r\n+        self.restrict_base_path = config['restrict_base_path']\r\n         self.encoding = config.get('encoding')\r\n         self.check_paths = config.get('check_paths')\r\n         self.auto_append = config.get('auto_append')\r\n@@ -159,18 +160,22 @@ def get_snippet_path(self, path):\n         for base in self.base_path:\r\n             if os.path.exists(base):\r\n                 if os.path.isdir(base):\r\n-                    filename = os.path.join(base, path)\r\n+                    if self.restrict_base_path:\r\n+                        filename = os.path.abspath(os.path.join(base, path))\r\n+                        # If the absolute path is no longer under the specified base path, reject the file\r\n+                        if not os.path.samefile(base, os.path.dirname(filename)):\r\n+                            continue\r\n+                    else:\r\n+                        filename = os.path.join(base, path)\r\n                     if os.path.exists(filename):\r\n                         snippet = filename\r\n                         break\r\n                 else:\r\n-                    basename = os.path.basename(base)\r\n                     dirname = os.path.dirname(base)\r\n-                    if basename.lower() == path.lower():\r\n-                        filename = os.path.join(dirname, path)\r\n-                        if os.path.exists(filename):\r\n-                            snippet = filename\r\n-                            break\r\n+                    filename = os.path.join(dirname, path)\r\n+                    if os.path.exists(filename) and os.path.samefile(filename, base):\r\n+                        snippet = filename\r\n+                        break\r\n         return snippet\r\n \r\n     @functools.lru_cache()\r\n@@ -367,6 +372,10 @@ def __init__(self, *args, **kwargs):\n \r\n         self.config = {\r\n             'base_path': [[\".\"], \"Base path for snippet paths - Default: [\\\".\\\"]\"],\r\n+            'restrict_base_path': [\r\n+                True,\r\n+                \"Restrict snippet paths such that they are under the base paths - Default: True\"\r\n+            ],\r\n             'encoding': [\"utf-8\", \"Encoding of snippets - Default: \\\"utf-8\\\"\"],\r\n             'check_paths': [False, \"Make the build fail if a snippet can't be found - Default: \\\"False\\\"\"],\r\n             \"auto_append\": [\r"
        },
        {
          "filename": "tests/test_extensions/_snippets/nested/nested.txt",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Snippet"
        },
        {
          "filename": "tests/test_extensions/test_snippets.py",
          "status": "modified",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -481,6 +481,63 @@ def test_user(self):\n         )\n \n \n+class TestSnippetsNested(util.MdCase):\n+    \"\"\"Test nested restriction.\"\"\"\n+\n+    extension = [\n+        'pymdownx.snippets',\n+    ]\n+\n+    extension_configs = {\n+        'pymdownx.snippets': {\n+            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n+            'check_paths': True\n+        }\n+    }\n+\n+    def test_restricted(self):\n+        \"\"\"Test file restriction.\"\"\"\n+\n+        with self.assertRaises(SnippetMissingError):\n+            self.check_markdown(\n+                R'''\n+                --8<-- \"../b.txt\"\n+                ''',\n+                '''\n+                <p>Snippet</p>\n+                ''',\n+                True\n+            )\n+\n+\n+class TestSnippetsNestedUnrestricted(util.MdCase):\n+    \"\"\"Test nested no bounds.\"\"\"\n+\n+    extension = [\n+        'pymdownx.snippets',\n+    ]\n+\n+    extension_configs = {\n+        'pymdownx.snippets': {\n+            'base_path': os.path.join(BASE, '_snippets', 'nested'),\n+            'restrict_base_path': False\n+        }\n+    }\n+\n+    def test_restricted(self):\n+        \"\"\"Test file restriction.\"\"\"\n+\n+        self.check_markdown(\n+            R'''\n+            --8<-- \"../b.txt\"\n+            ''',\n+            '''\n+            <p>Snippet</p>\n+            ''',\n+            True\n+        )\n+\n+\n class TestSnippetsAutoAppend(util.MdCase):\n     \"\"\"Test snippet file case.\"\"\"\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c9ef97e65936f2ec932b04d688bc5fba6d7787ab",
            "date": "2025-01-10T18:40:34Z",
            "author_login": "facelessuser"
          },
          {
            "sha": "94c6bc4d704455e03a0242b1d1ccefaf3179ee5a",
            "date": "2025-01-10T17:26:26Z",
            "author_login": "facelessuser"
          },
          {
            "sha": "ba219e67a1764ad8bf0a692faca00fb1086059d2",
            "date": "2025-01-10T17:22:59Z",
            "author_login": "facelessuser"
          },
          {
            "sha": "8363af6250f6bcc0fa1373b42ba7d6a05613af93",
            "date": "2025-01-10T17:22:15Z",
            "author_login": "facelessuser"
          },
          {
            "sha": "760e56b38d1e884ae776bcaef7af4a11324e61c0",
            "date": "2025-01-10T17:16:44Z",
            "author_login": "facelessuser"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "PyMdown Extensions is a set of extensions for the `Python-Markdown` markdown project. In affected versions an arbitrary file read is possible when using include file syntax. By using the syntax `--8<--\"/etc/passwd\"` or `--8<--\"/proc/self/environ\"` the content of these files will be rendered in the generated documentation. Additionally, a path relative to a specified, allowed base path can also be used to render the content of a file outside the specified base paths: `--8<-- \"../../../../etc/passwd\"`. Within the Snippets extension, there exists a `base_path` option but the implementation is vulnerable to Directory Traversal. The vulnerable section exists in `get_snippet_path(self, path)` lines 155 to 174 in snippets.py. Any readable file on the host where the plugin is executing may have its content exposed. This can impact any use of Snippets that exposes the use of Snippets to external users. It is never recommended to use Snippets to process user-facing, dynamic content. It is designed to process known content on the backend under the control of the host, but if someone were to accidentally enable it for user-facing content, undesired information could be exposed. This issue has been addressed in version 10.0. Users are advised to upgrade. Users unable to upgrade may restrict relative paths by filtering input.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-15T21:15:09.607",
    "last_modified": "2024-11-21T08:03:04.980",
    "fix_date": "2023-05-14T17:55:18Z"
  },
  "references": [
    {
      "url": "https://github.com/facelessuser/pymdown-extensions/commit/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/facelessuser/pymdown-extensions/security/advisories/GHSA-jh85-wwv9-24hv",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/facelessuser/pymdown-extensions/commit/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/facelessuser/pymdown-extensions/security/advisories/GHSA-jh85-wwv9-24hv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:32.972677",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pymdown-extensions",
    "owner": "facelessuser",
    "created_at": "2014-11-21T06:08:04Z",
    "updated_at": "2025-01-13T19:19:33Z",
    "pushed_at": "2025-01-14T10:27:35Z",
    "size": 47927,
    "stars": 984,
    "forks": 259,
    "open_issues": 16,
    "watchers": 984,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 2068460,
      "JavaScript": 9617
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T20:42:53.005295"
  }
}