{
  "cve_id": "CVE-2023-32325",
  "github_data": {
    "repository": "PostHog/posthog-js",
    "fix_commit": "67e07eb8bb271a3a6f4aa251382e4d25abb385a0",
    "related_commits": [
      "67e07eb8bb271a3a6f4aa251382e4d25abb385a0",
      "67e07eb8bb271a3a6f4aa251382e4d25abb385a0"
    ],
    "patch_url": "https://github.com/PostHog/posthog-js/commit/67e07eb8bb271a3a6f4aa251382e4d25abb385a0.patch",
    "fix_commit_details": {
      "sha": "67e07eb8bb271a3a6f4aa251382e4d25abb385a0",
      "commit_date": "2023-05-17T12:34:34Z",
      "author": {
        "login": "mariusandra",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Remove API and JS urls (#630)",
        "length": 157,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 39,
        "additions": 19,
        "deletions": 20
      },
      "files": [
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n     \"name\": \"posthog-js\",\n-    \"version\": \"1.57.1\",\n+    \"version\": \"1.57.2-alpha.0\",\n     \"description\": \"Posthog-js allows you to automatically capture usage and send events to PostHog.\",\n     \"repository\": \"https://github.com/PostHog/posthog-js\",\n     \"author\": \"hey@posthog.com\","
        },
        {
          "filename": "src/__tests__/extensions/toolbar.js",
          "status": "modified",
          "additions": 16,
          "deletions": 8,
          "patch": "@@ -78,7 +78,6 @@ describe('Toolbar', () => {\n                 flag_2: 1,\n             },\n             userId: 12345,\n-            apiURL: given.config.api_host,\n             ...given.toolbarParamsOverrides,\n         }))\n \n@@ -92,14 +91,20 @@ describe('Toolbar', () => {\n             }))\n \n             given.subject()\n-            expect(given.toolbar.loadToolbar).toHaveBeenCalledWith({ ...given.toolbarParams, source: 'url' })\n+            expect(given.toolbar.loadToolbar).toHaveBeenCalledWith({\n+                ...given.toolbarParams,\n+                source: 'url',\n+            })\n         })\n \n         it('should initialize the toolbar when there are editor params in the session', () => {\n             given('storedEditorParams', () => JSON.stringify(toolbarParams))\n \n             given.subject()\n-            expect(given.toolbar.loadToolbar).toHaveBeenCalledWith({ ...given.toolbarParams, source: 'url' })\n+            expect(given.toolbar.loadToolbar).toHaveBeenCalledWith({\n+                ...given.toolbarParams,\n+                source: 'url',\n+            })\n         })\n \n         it('should NOT initialize the toolbar when the activation query param does not exist', () => {\n@@ -152,18 +157,22 @@ describe('Toolbar', () => {\n             token: 'public_token',\n             expiresAt: 'expiresAt',\n             apiKey: 'apiKey',\n-            apiURL: 'http://localhost:8000',\n-            jsURL: 'http://localhost:8000',\n         }))\n \n         it('should persist for next time', () => {\n             expect(given.subject()).toBe(true)\n-            expect(JSON.parse(window.localStorage.getItem('_postHogToolbarParams'))).toEqual(given.toolbarParams)\n+            expect(JSON.parse(window.localStorage.getItem('_postHogToolbarParams'))).toEqual({\n+                ...given.toolbarParams,\n+                apiURL: 'http://api.example.com',\n+            })\n         })\n \n         it('should load if not previously loaded', () => {\n             expect(given.subject()).toBe(true)\n-            expect(window.ph_load_toolbar).toHaveBeenCalledWith(given.toolbarParams, given.lib)\n+            expect(window.ph_load_toolbar).toHaveBeenCalledWith(\n+                { ...given.toolbarParams, apiURL: 'http://api.example.com' },\n+                given.lib\n+            )\n         })\n \n         it('should NOT load if previously loaded', () => {\n@@ -184,7 +193,6 @@ describe('Toolbar', () => {\n             expect(window.ph_load_toolbar).toHaveBeenCalledWith(\n                 {\n                     ...given.toolbarParams,\n-                    jsURL: 'http://api.example.com',\n                     apiURL: 'http://api.example.com',\n                     token: 'test_token',\n                 },"
        },
        {
          "filename": "src/extensions/toolbar.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 9,
          "patch": "@@ -21,7 +21,6 @@ export class Toolbar {\n         ) {\n             this.loadToolbar({\n                 ...toolbarParams,\n-                apiURL: this.instance.get_config('api_host'),\n             })\n         }\n     }\n@@ -80,10 +79,6 @@ export class Toolbar {\n                 delete toolbarParams.userIntent\n             }\n \n-            if (!toolbarParams.apiURL) {\n-                toolbarParams.apiURL = this.instance.get_config('api_host')\n-            }\n-\n             if (toolbarParams['token'] && this.instance.get_config('token') === toolbarParams['token']) {\n                 this.loadToolbar(toolbarParams)\n                 return true\n@@ -102,10 +97,9 @@ export class Toolbar {\n         // only load the toolbar once, even if there are multiple instances of PostHogLib\n         ;(window as any)['_postHogToolbarLoaded'] = true\n \n-        // the toolbar does not use the `jsURL` as that route is cached for 24 hours.\n         // By design array.js, recorder.js, and toolbar.js are served from Django with no or limited caching, not from our CDN\n         // Django respects the query params for caching, returning a 304 if appropriate\n-        const host = params?.['apiURL'] || this.instance.get_config('api_host')\n+        const host = this.instance.get_config('api_host')\n         const timestampToNearestThirtySeconds = Math.floor(Date.now() / 30000) * 30000\n         const toolbarUrl = `${host}${\n             host.endsWith('/') ? '' : '/'\n@@ -115,10 +109,9 @@ export class Toolbar {\n             this.instance.get_config('advanced_disable_toolbar_metrics')\n \n         const toolbarParams = {\n-            apiURL: host, // defaults to api_host from the instance config if nothing else set\n-            jsURL: host, // defaults to api_host from the instance config if nothing else set\n             token: this.instance.get_config('token'),\n             ...params,\n+            apiURL: host, // defaults to api_host from the instance config if nothing else set\n             ...(disableToolbarMetrics ? { instrument: false } : {}),\n         }\n "
        },
        {
          "filename": "src/types.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -269,8 +269,6 @@ export type ToolbarVersion = 'toolbar'\n \n /* sync with posthog */\n export interface ToolbarParams {\n-    apiURL?: string\n-    jsURL?: string\n     token?: string /** public posthog-js token */\n     temporaryToken?: string /** private temporary user token */\n     actionId?: number"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "763b30620440ea27fb0c82d92256e1a78a1e8194",
            "date": "2025-01-14T17:42:06Z",
            "author_login": "havenbarnes"
          },
          {
            "sha": "bc2449ad5f73b74ebb51eed0ec561985b97b046c",
            "date": "2025-01-14T17:41:39Z",
            "author_login": "havenbarnes"
          },
          {
            "sha": "b53a47c0499e02ca905cb2322ee747441097358a",
            "date": "2025-01-13T20:11:51Z",
            "author_login": "robbie-c"
          },
          {
            "sha": "f2e28348ca9cbeef2cbbac1bf2e48aa764a88721",
            "date": "2025-01-13T13:01:10Z",
            "author_login": "lucasheriques"
          },
          {
            "sha": "bf552f3bd249da9ccb53149e9160e9663e37502b",
            "date": "2025-01-13T13:00:38Z",
            "author_login": "lucasheriques"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "PostHog-js is a library to interface with the PostHog analytics tool. Versions prior to 1.57.2 have the potential for cross-site scripting. Problem has been patched in 1.57.2. Users are advised to upgrade. Users unable to upgrade should ensure that their Content Security Policy is in place.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-27T00:15:09.600",
    "last_modified": "2024-11-21T08:03:07.090",
    "fix_date": "2023-05-17T12:34:34Z"
  },
  "references": [
    {
      "url": "https://github.com/PostHog/posthog-js/commit/67e07eb8bb271a3a6f4aa251382e4d25abb385a0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/PostHog/posthog-js/security/advisories/GHSA-8775-5hwv-wr6v",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/PostHog/posthog-js/commit/67e07eb8bb271a3a6f4aa251382e4d25abb385a0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/PostHog/posthog-js/security/advisories/GHSA-8775-5hwv-wr6v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.259414",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "posthog-js",
    "owner": "PostHog",
    "created_at": "2020-02-07T22:28:18Z",
    "updated_at": "2025-01-14T17:42:11Z",
    "pushed_at": "2025-01-14T18:18:01Z",
    "size": 44131,
    "stars": 342,
    "forks": 137,
    "open_issues": 93,
    "watchers": 342,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 8713440,
      "HTML": 140826,
      "JavaScript": 68396,
      "CSS": 699,
      "Vue": 688,
      "Shell": 69
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T18:26:16.528095"
  }
}