{
  "cve_id": "CVE-2023-32695",
  "github_data": {
    "repository": "socketio/socket.io-parser",
    "fix_commit": "2dc3c92622dad113b8676be06f23b1ed46b02ced",
    "related_commits": [
      "2dc3c92622dad113b8676be06f23b1ed46b02ced",
      "3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
      "2dc3c92622dad113b8676be06f23b1ed46b02ced",
      "3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "2dc3c92622dad113b8676be06f23b1ed46b02ced",
      "commit_date": "2023-05-22T07:56:28Z",
      "author": {
        "login": "darrachequesne",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: check the format of the event name",
        "length": 638,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 49,
        "additions": 38,
        "deletions": 11
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 22,
          "deletions": 3,
          "patch": "@@ -329,11 +329,10 @@ function decodeString(str) {\n   // look up json data\n   if (str.charAt(++i)) {\n     var payload = tryParse(str.substr(i));\n-    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));\n-    if (isPayloadValid) {\n+    if (isPayloadValid(p.type, payload)) {\n       p.data = payload;\n     } else {\n-      return error('invalid payload');\n+      throw new Error(\"invalid payload\");\n     }\n   }\n \n@@ -349,6 +348,26 @@ function tryParse(str) {\n   }\n }\n \n+function isPayloadValid(type, payload) {\n+  switch (type) {\n+    case 0: // CONNECT\n+      return typeof payload === \"object\";\n+    case 1: // DISCONNECT\n+      return payload === undefined;\n+    case 4: // ERROR\n+      return typeof payload === \"string\" || typeof payload === \"object\";\n+    case 2: // EVENT\n+    case 5: // BINARY_EVENT\n+      return (\n+        isArray(payload) &&\n+        (typeof payload[0] === \"string\" || typeof payload[0] === \"number\")\n+      );\n+    case 3: // ACK\n+    case 6: // BINARY_ACK\n+      return isArray(payload);\n+  }\n+}\n+\n /**\n  * Deallocates a parser's resources\n  *"
        },
        {
          "filename": "test/arraybuffer.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -50,7 +50,7 @@ describe('parser', function() {\n   it('cleans itself up on close', function() {\n     var packet = {\n       type: parser.BINARY_EVENT,\n-      data: [new ArrayBuffer(2), new ArrayBuffer(3)],\n+      data: [\"foo\", new ArrayBuffer(2), new ArrayBuffer(3)],\n       id: 0,\n       nsp: '/'\n     };"
        },
        {
          "filename": "test/parser.js",
          "status": "modified",
          "additions": 15,
          "deletions": 7,
          "patch": "@@ -86,12 +86,20 @@ describe('parser', function(){\n     }\n   });\n \n-  it('returns an error packet on parsing error', function(done){\n-    var decoder = new parser.Decoder();\n-    decoder.on('decoded', function(packet) {\n-      expect(packet).to.eql({ type: 4, data: 'parser error: invalid payload' });\n-      done();\n-    });\n-    decoder.add('442[\"some\",\"data\"');\n+  it('returns an error packet on parsing error', function(){\n+    function isInvalidPayload (str) {\n+      expect(function () {\n+        new parser.Decoder().add(str)\n+      }).to.throwException(/^invalid payload$/);\n+    }\n+\n+    isInvalidPayload('442[\"some\",\"data\"');\n+    isInvalidPayload('0/admin,\"invalid\"');\n+    isInvalidPayload(\"1/admin,{}\");\n+    isInvalidPayload('2/admin,\"invalid');\n+    isInvalidPayload(\"2/admin,{}\");\n+    isInvalidPayload('2[{\"toString\":\"foo\"}]');\n+    isInvalidPayload('2[true,\"foo\"]');\n+    isInvalidPayload('2[null,\"bar\"]');\n   });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5662ab0be47029d76eaf49b05277b691cd5f4675",
            "date": "2024-07-09T10:05:17Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "9f76ea22b41feeade0c8819dbf3c16fd07becc2a",
            "date": "2023-10-23T20:18:28Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "9228596240834e340c8c52968566c447f9616150",
            "date": "2023-10-23T20:17:11Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "87236baf87cdbe32ae01e7dc53320474520ce82f",
            "date": "2023-06-22T07:12:30Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "021618886a0ef244eb27a82a68e211f8262dc749",
            "date": "2023-06-22T07:12:16Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-20",
    "description": "socket.io parser is a socket.io encoder and decoder written in JavaScript complying with version 5 of socket.io-protocol. A specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process. A patch has been released in version 4.2.3.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-27T16:15:09.433",
    "last_modified": "2024-11-21T08:03:52.187",
    "fix_date": "2023-05-22T07:56:28Z"
  },
  "references": [
    {
      "url": "https://github.com/socketio/socket.io-parser/commit/2dc3c92622dad113b8676be06f23b1ed46b02ced",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-parser/releases/tag/4.2.3",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-parser/security/advisories/GHSA-cqmj-92xf-r6r9",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-parser/commit/2dc3c92622dad113b8676be06f23b1ed46b02ced",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-parser/commit/3b78117bf6ba7e99d7a5cfc1ba54d0477554a7f3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-parser/releases/tag/4.2.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io-parser/security/advisories/GHSA-cqmj-92xf-r6r9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.262614",
    "processing_status": "enhanced"
  }
}