{
  "cve_id": "CVE-2023-32696",
  "github_data": {
    "repository": "ckan/ckan-docker-base",
    "fix_commit": "5483c46ce9b518a4e1b626ef7032cce2c1d75c7d",
    "related_commits": [
      "5483c46ce9b518a4e1b626ef7032cce2c1d75c7d",
      "5483c46ce9b518a4e1b626ef7032cce2c1d75c7d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "5483c46ce9b518a4e1b626ef7032cce2c1d75c7d",
      "commit_date": "2023-05-24T11:49:32Z",
      "author": {
        "login": "amercader",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-c74x-xfvr-x5wg",
        "length": 65,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 130,
        "additions": 59,
        "deletions": 71
      },
      "files": [
        {
          "filename": "ckan-2.10/base/Dockerfile",
          "status": "modified",
          "additions": 6,
          "deletions": 11,
          "patch": "@@ -1,4 +1,5 @@\n-FROM alpine:3.16\n+FROM alpine:3.17\n+ARG CKAN_VERSION=ckan-2.10.0\n \n # Internals, you probably don't need to change these\n ENV APP_DIR=/srv/app\n@@ -8,8 +9,7 @@ ENV PIP_SRC=${SRC_DIR}\n ENV CKAN_STORAGE_PATH=/var/lib/ckan\n ENV GIT_URL=https://github.com/ckan/ckan.git\n # CKAN version to build\n-#ENV GIT_BRANCH=dev-v2.10\n-ENV GIT_BRANCH=ckan-2.10.0\n+ENV GIT_BRANCH=${CKAN_VERSION}\n # Customize these on the .env file if needed\n ENV CKAN_SITE_URL=http://localhost:5000\n ENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars\n@@ -37,7 +37,7 @@ RUN apk add --no-cache tzdata \\\n         libmagic \\\n         curl \\\n         patch \\\n-        sudo && \\\n+        bash && \\\n     # Packages to build CKAN requirements and plugins\n     apk add --no-cache --virtual .build-deps \\\n         postgresql-dev \\\n@@ -61,7 +61,6 @@ RUN apk add --no-cache tzdata \\\n     python3 ${SRC_DIR}/get-pip.py && \\\n     pip3 install supervisor && \\\n     mkdir /etc/supervisord.d && \\\n-    #pip wheel --wheel-dir=/wheels uwsgi gevent && \\\n     rm -rf ${SRC_DIR}/get-pip.py\n \n COPY setup/supervisord.conf /etc\n@@ -80,7 +79,7 @@ RUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \\\n \n # Create a local user and group to run the app\n RUN addgroup -g 92 -S ckan && \\\n-    adduser -u 92 -h /srv/app -s /bin/bash -D -G ckan ckan\n+    adduser -u 92 -h /home/ckan -s /bin/bash -D -G ckan ckan\n \n # Create local storage folder\n RUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n@@ -89,15 +88,11 @@ RUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n COPY setup/prerun.py ${APP_DIR}\n COPY setup/start_ckan.sh ${APP_DIR}\n ADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}\n+RUN chmod 644 ${APP_DIR}/wsgi.py\n \n # Create entrypoint directory for children image scripts\n ONBUILD RUN mkdir /docker-entrypoint.d\n \n-RUN chown ckan -R /srv/app\n-\n-RUN addgroup sudo && \\\n-    adduser ckan sudo\n-\n EXPOSE 5000\n \n HEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit CMD [\"/srv/app/start_ckan.sh\"]"
        },
        {
          "filename": "ckan-2.10/base/Makefile",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -1,18 +1,14 @@\n .PHONY: all help build build-all push\n SHELL := /bin/bash\n-CKAN_VERSION=ckan-2.10.0\n+CKAN_VERSION=2.10.0\n TAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n \n all: help\n help:\n \t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n \n-build:\t## Build a CKAN 2.10.0 image , `make build`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0))\n-\tdocker build -t $(TAG_NAME) .\n-endif\n+build:\t## Build a CKAN 2.x.x image , `make build`\n+\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n \n-push: ## Push a CKAN 2.10.0 image to the DockerHub registry, `make push`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0))\n+push: ## Push a CKAN 2.x.x image to the DockerHub registry, `make push`\n \tdocker push $(TAG_NAME)\n-endif"
        },
        {
          "filename": "ckan-2.10/base/setup/prerun.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -194,6 +194,13 @@ def create_sysadmin():\n         subprocess.call(command)\n         print(\"[prerun] Made user {0} a sysadmin\".format(name))\n \n+        # cleanup permissions\n+        # We're running as root before pivoting to uwsgi and dropping privs\n+        data_dir = \"%s/storage\" % os.environ['CKAN_STORAGE_PATH']\n+\n+        command = [\"chown\", \"-R\", \"ckan:ckan\", data_dir]\n+        subprocess.call(command)\n+        print(\"[prerun] Ensured storage directory is owned by ckan\")\n \n if __name__ == \"__main__\":\n "
        },
        {
          "filename": "ckan-2.10/base/setup/start_ckan.sh",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -16,7 +16,7 @@ then\n fi\n \n # Run the prerun script to init CKAN and create the default admin user\n-sudo -u ckan -EH python3 prerun.py\n+python3 prerun.py\n \n echo \"Set up ckan.datapusher.api_token in the CKAN config file\"\n ckan config-tool $CKAN_INI \"ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\\t')\"\n@@ -51,7 +51,7 @@ then\n     # Start supervisord\n     supervisord --configuration /etc/supervisord.conf &\n     # Start uwsgi\n-    sudo -u ckan -EH uwsgi $UWSGI_OPTS\n+    uwsgi $UWSGI_OPTS\n else\n   echo \"[prerun] failed...not starting CKAN.\"\n fi"
        },
        {
          "filename": "ckan-2.10/dev/Dockerfile",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,4 +1,4 @@\n-FROM ckan/ckan-base:ckan-2.10.0\n+FROM ckan/ckan-base:2.10.0\n \n \n ENV APP_DIR=/srv/app\n@@ -11,10 +11,8 @@ RUN apk add --no-cache libffi-dev\n RUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt\n \n # Create folder for local extensions sources\n-RUN mkdir ${SRC_EXTENSIONS_DIR}\n+RUN mkdir -p ${SRC_EXTENSIONS_DIR}\n \n COPY setup/start_ckan_development.sh ${APP_DIR}\n \n-RUN chown ckan -R /srv/app\n-\n CMD [\"/srv/app/start_ckan_development.sh\"]\n\\ No newline at end of file"
        },
        {
          "filename": "ckan-2.10/dev/Makefile",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -1,18 +1,14 @@\n .PHONY: all help build build-all push\n SHELL := /bin/bash\n-CKAN_VERSION=ckan-2.10.0-dev\n+CKAN_VERSION=2.10.0-dev\n TAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n \n all: help\n help:\n \t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n \n-build:\t## Build a CKAN ckan-2.10.0-dev image , `make build`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0-dev))\n-\tdocker build -t $(TAG_NAME) .\n-endif\n+build:\t## Build a CKAN 2.x-dev image , `make build`\n+\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n \n-push: ## Push a CKAN ckan-2.10.0-dev image to the DockerHub registry, `make push`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0-dev))\n+push: ## Push a CKAN 2.x-dev image to the DockerHub registry, `make push`\n \tdocker push $(TAG_NAME)\n-endif\n\\ No newline at end of file"
        },
        {
          "filename": "ckan-2.10/dev/setup/start_ckan_development.sh",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -74,7 +74,7 @@ ckan config-tool $SRC_DIR/ckan/test-core.ini \\\n     \"ckan.redis.url = $TEST_CKAN_REDIS_URL\"\n \n # Run the prerun script to init CKAN and create the default admin user\n-sudo -u ckan -EH python3 prerun.py\n+python3 prerun.py\n \n echo \"Set up ckan.datapusher.api_token in the CKAN config file\"\n ckan config-tool $CKAN_INI \"ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\\t')\"\n@@ -95,5 +95,5 @@ fi\n # Start supervisord\n supervisord --configuration /etc/supervisord.conf &\n \n-# Start the development server with automatic reload\n-sudo -u ckan -EH ckan -c $CKAN_INI run -H 0.0.0.0\n\\ No newline at end of file\n+# Start the development server as the ckan user with automatic reload\n+su ckan -c \"/usr/bin/ckan -c $CKAN_INI run -H 0.0.0.0\"\n\\ No newline at end of file"
        },
        {
          "filename": "ckan-2.9/base/Dockerfile",
          "status": "modified",
          "additions": 6,
          "deletions": 10,
          "patch": "@@ -1,4 +1,5 @@\n-FROM alpine:3.13\n+FROM alpine:3.15\n+ARG CKAN_VERSION=2.9.8\n \n # Internals, you probably don't need to change these\n ENV APP_DIR=/srv/app\n@@ -8,7 +9,7 @@ ENV PIP_SRC=${SRC_DIR}\n ENV CKAN_STORAGE_PATH=/var/lib/ckan\n ENV GIT_URL=https://github.com/ckan/ckan.git\n # CKAN version to build\n-ENV GIT_BRANCH=ckan-2.9.8\n+ENV GIT_BRANCH=${CKAN_VERSION}\n # Customize these on the .env file if needed\n ENV CKAN_SITE_URL=http://localhost:5000\n ENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars\n@@ -35,8 +36,7 @@ RUN apk add --no-cache tzdata \\\n         uwsgi-gevent \\\n         libmagic \\\n         curl \\\n-        patch \\\n-        sudo && \\\n+        patch && \\\n     # Packages to build CKAN requirements and plugins\n     apk add --no-cache --virtual .build-deps \\\n         postgresql-dev \\\n@@ -80,7 +80,7 @@ RUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \\\n \n # Create a local user and group to run the app\n RUN addgroup -g 92 -S ckan && \\\n-    adduser -u 92 -h /srv/app -s /bin/bash -D -G ckan ckan\n+    adduser -u 92 -h /home/ckan -s /bin/bash -D -G ckan ckan\n \n # Create local storage folder\n RUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n@@ -89,15 +89,11 @@ RUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n COPY setup/prerun.py ${APP_DIR}\n COPY setup/start_ckan.sh ${APP_DIR}\n ADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}\n+RUN chmod 644 ${APP_DIR}/wsgi.py\n \n # Create entrypoint directory for children image scripts\n ONBUILD RUN mkdir /docker-entrypoint.d\n \n-RUN chown ckan -R /srv/app\n-\n-RUN addgroup sudo && \\\n-    adduser ckan sudo\n-\n EXPOSE 5000\n \n HEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1"
        },
        {
          "filename": "ckan-2.9/base/Makefile",
          "status": "modified",
          "additions": 8,
          "deletions": 9,
          "patch": "@@ -1,18 +1,17 @@\n .PHONY: all help build build-all push\n SHELL := /bin/bash\n-CKAN_VERSION=ckan-2.9.8\n+\n+CKAN_VERSION=2.9.8\n+\n TAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n \n all: help\n help:\n \t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n \n-build:\t## Build a CKAN 2.9.8 image , `make build`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8))\n-\tdocker build -t $(TAG_NAME) .\n-endif\n \n-push: ## Push a CKAN 2.9.8 image to the DockerHub registry, `make push`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8))\n-\tdocker push $(TAG_NAME)\n-endif\n\\ No newline at end of file\n+build:\t## Build a CKAN 2.x.x image , `make build`\n+\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n+\n+push: ## Push a CKAN 2.x.x image to the DockerHub registry, `make push`\n+\tdocker push $(TAG_NAME)\n\\ No newline at end of file"
        },
        {
          "filename": "ckan-2.9/base/setup/prerun.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -194,6 +194,13 @@ def create_sysadmin():\n         subprocess.call(command)\n         print(\"[prerun] Made user {0} a sysadmin\".format(name))\n \n+        # cleanup permissions\n+        # We're running as root before pivoting to uwsgi and dropping privs\n+        data_dir = \"%s/storage\" % os.environ['CKAN_STORAGE_PATH']\n+\n+        command = [\"chown\", \"-R\", \"ckan:ckan\", data_dir]\n+        subprocess.call(command)\n+        print(\"[prerun] Ensured storage directory is owned by ckan\")\n \n if __name__ == \"__main__\":\n "
        },
        {
          "filename": "ckan-2.9/base/setup/start_ckan.sh",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -12,7 +12,7 @@ then\n fi\n \n # Run the prerun script to init CKAN and create the default admin user\n-sudo -u ckan -EH python3 prerun.py\n+python3 prerun.py\n \n # Run any startup scripts provided by images extending this one\n if [[ -d \"/docker-entrypoint.d\" ]]\n@@ -44,7 +44,7 @@ then\n     # Start supervisord\n     supervisord --configuration /etc/supervisord.conf &\n     # Start uwsgi\n-    sudo -u ckan -EH uwsgi $UWSGI_OPTS\n+    uwsgi $UWSGI_OPTS\n else\n   echo \"[prerun] failed...not starting CKAN.\"\n fi"
        },
        {
          "filename": "ckan-2.9/dev/Dockerfile",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -11,10 +11,8 @@ RUN apk add --no-cache libffi-dev\n RUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt\n \n # Create folder for local extensions sources\n-RUN mkdir ${SRC_EXTENSIONS_DIR}\n+RUN mkdir -p ${SRC_EXTENSIONS_DIR}\n \n COPY setup/start_ckan_development.sh ${APP_DIR}\n \n-RUN chown ckan -R /srv/app\n-\n CMD [\"/srv/app/start_ckan_development.sh\"]\n\\ No newline at end of file"
        },
        {
          "filename": "ckan-2.9/dev/Makefile",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -1,18 +1,14 @@\n .PHONY: all help build build-all push\n SHELL := /bin/bash\n-CKAN_VERSION=ckan-2.9.8-dev\n+CKAN_VERSION=2.9.8-dev\n TAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n \n all: help\n help:\n \t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n \n-build:\t## Build a CKAN 2.9.8-dev image , `make build`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8-dev))\n-\tdocker build -t $(TAG_NAME) .\n-endif\n+build:\t## Build a CKAN 2.x-dev image , `make build`\n+\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n \n-push: ## Push a CKAN 2.9.8-dev image to the DockerHub registry, `make push`\n-ifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8-dev))\n+push: ## Push a CKAN 2.x-dev image to the DockerHub registry, `make push`\n \tdocker push $(TAG_NAME)\n-endif\n\\ No newline at end of file"
        },
        {
          "filename": "ckan-2.9/dev/setup/start_ckan_development.sh",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -70,7 +70,7 @@ ckan config-tool $SRC_DIR/ckan/test-core.ini \\\n     \"ckan.redis.url = $TEST_CKAN_REDIS_URL\"\n \n # Run the prerun script to init CKAN and create the default admin user\n-sudo -u ckan -EH python3 prerun.py\n+python3 prerun.py\n \n # Run any startup scripts provided by images extending this one\n if [[ -d \"/docker-entrypoint.d\" ]]\n@@ -88,5 +88,5 @@ fi\n # Start supervisord\n supervisord --configuration /etc/supervisord.conf &\n \n-# Start the development server with automatic reload\n-sudo -u ckan -EH ckan -c $CKAN_INI run -H 0.0.0.0\n\\ No newline at end of file\n+# Start the development server as the ckan user with automatic reload\n+su ckan -c \"/usr/bin/ckan -c $CKAN_INI run -H 0.0.0.0\"\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2b3d88592e1eb5a86979a24d394b369b36bb3ab7",
            "date": "2024-12-11T11:53:14Z",
            "author_login": "amercader"
          },
          {
            "sha": "aa75e51c5a994aae70398c4b4b04308746ff0532",
            "date": "2024-12-11T11:33:20Z",
            "author_login": "amercader"
          },
          {
            "sha": "808f0800abb19d11777db7b45a95c086599734ca",
            "date": "2024-12-11T11:32:30Z",
            "author_login": "amercader"
          },
          {
            "sha": "9c1b72119d95859d0f32cf15a1473998ed32fc7d",
            "date": "2024-12-06T13:59:15Z",
            "author_login": "kowh-ai"
          },
          {
            "sha": "51e051f7d07445e0cc1748748c931d032600a9ac",
            "date": "2024-12-04T22:39:46Z",
            "author_login": "wardi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-269",
    "description": "CKAN is an open-source data management system for powering data hubs and data portals. Prior to versions 2.9.9 and 2.10.1, the `ckan` user (equivalent to www-data) owned code and configuration files in the docker container and the `ckan` user had the permissions to use sudo. These issues allowed for code execution or privilege escalation if an arbitrary file write bug was available. Versions 2.9.9, 2.9.9-dev, 2.10.1, and 2.10.1-dev contain a patch.\n\n\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-30T19:15:10.023",
    "last_modified": "2024-11-21T08:03:52.317",
    "fix_date": "2023-05-24T11:49:32Z"
  },
  "references": [
    {
      "url": "https://github.com/ckan/ckan-docker-base/commit/5483c46ce9b518a4e1b626ef7032cce2c1d75c7d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ckan/ckan-docker-base/security/advisories/GHSA-c74x-xfvr-x5wg",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ckan/ckan-docker-base/commit/5483c46ce9b518a4e1b626ef7032cce2c1d75c7d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ckan/ckan-docker-base/security/advisories/GHSA-c74x-xfvr-x5wg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.273986",
    "processing_status": "enhanced"
  }
}