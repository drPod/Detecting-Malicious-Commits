{
  "cve_id": "CVE-2023-33189",
  "github_data": {
    "repository": "pomerium/pomerium",
    "fix_commit": "d315e683357a9b587ba9ef399a8813bcc52fdebb",
    "related_commits": [
      "d315e683357a9b587ba9ef399a8813bcc52fdebb",
      "d315e683357a9b587ba9ef399a8813bcc52fdebb"
    ],
    "patch_url": "https://github.com/pomerium/pomerium/commit/d315e683357a9b587ba9ef399a8813bcc52fdebb.patch",
    "fix_commit_details": {
      "sha": "d315e683357a9b587ba9ef399a8813bcc52fdebb",
      "commit_date": "2023-05-26T20:34:21Z",
      "author": {
        "login": "calebdoxsey",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-pvrc-wvj2-f59p",
        "length": 294,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 788,
        "additions": 501,
        "deletions": 287
      },
      "files": [
        {
          "filename": "authorize/evaluator/evaluator.go",
          "status": "modified",
          "additions": 70,
          "deletions": 39,
          "patch": "@@ -22,17 +22,12 @@ import (\n \t\"github.com/pomerium/pomerium/pkg/policy/criteria\"\n )\n \n-// notFoundOutput is what's returned if a route isn't found for a policy.\n-var notFoundOutput = &Result{\n-\tDeny:    NewRuleResult(true, criteria.ReasonRouteNotFound),\n-\tHeaders: make(http.Header),\n-}\n-\n // Request contains the inputs needed for evaluation.\n type Request struct {\n-\tPolicy  *config.Policy\n-\tHTTP    RequestHTTP\n-\tSession RequestSession\n+\tIsInternal bool\n+\tPolicy     *config.Policy\n+\tHTTP       RequestHTTP\n+\tSession    RequestSession\n }\n \n // RequestHTTP is the HTTP field in the request.\n@@ -125,8 +120,60 @@ func (e *Evaluator) Evaluate(ctx context.Context, req *Request) (*Result, error)\n \tctx, span := trace.StartSpan(ctx, \"authorize.Evaluator.Evaluate\")\n \tdefer span.End()\n \n+\teg, ctx := errgroup.WithContext(ctx)\n+\n+\tvar policyOutput *PolicyResponse\n+\teg.Go(func() error {\n+\t\tvar err error\n+\t\tif req.IsInternal {\n+\t\t\tpolicyOutput, err = e.evaluateInternal(ctx, req)\n+\t\t} else {\n+\t\t\tpolicyOutput, err = e.evaluatePolicy(ctx, req)\n+\t\t}\n+\t\treturn err\n+\t})\n+\n+\tvar headersOutput *HeadersResponse\n+\teg.Go(func() error {\n+\t\tvar err error\n+\t\theadersOutput, err = e.evaluateHeaders(ctx, req)\n+\t\treturn err\n+\t})\n+\n+\terr := eg.Wait()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tres := &Result{\n+\t\tAllow:   policyOutput.Allow,\n+\t\tDeny:    policyOutput.Deny,\n+\t\tHeaders: headersOutput.Headers,\n+\t\tTraces:  policyOutput.Traces,\n+\t}\n+\treturn res, nil\n+}\n+\n+func (e *Evaluator) evaluateInternal(_ context.Context, req *Request) (*PolicyResponse, error) {\n+\t// these endpoints require a logged-in user\n+\tif req.HTTP.Path == \"/.pomerium/webauthn\" || req.HTTP.Path == \"/.pomerium/jwt\" {\n+\t\tif req.Session.ID == \"\" {\n+\t\t\treturn &PolicyResponse{\n+\t\t\t\tAllow: NewRuleResult(false, criteria.ReasonUserUnauthenticated),\n+\t\t\t}, nil\n+\t\t}\n+\t}\n+\n+\treturn &PolicyResponse{\n+\t\tAllow: NewRuleResult(true, criteria.ReasonPomeriumRoute),\n+\t}, nil\n+}\n+\n+func (e *Evaluator) evaluatePolicy(ctx context.Context, req *Request) (*PolicyResponse, error) {\n \tif req.Policy == nil {\n-\t\treturn notFoundOutput, nil\n+\t\treturn &PolicyResponse{\n+\t\t\tDeny: NewRuleResult(true, criteria.ReasonRouteNotFound),\n+\t\t}, nil\n \t}\n \n \tid, err := req.Policy.RouteID()\n@@ -136,7 +183,9 @@ func (e *Evaluator) Evaluate(ctx context.Context, req *Request) (*Result, error)\n \n \tpolicyEvaluator, ok := e.policyEvaluators[id]\n \tif !ok {\n-\t\treturn notFoundOutput, nil\n+\t\treturn &PolicyResponse{\n+\t\t\tDeny: NewRuleResult(true, criteria.ReasonRouteNotFound),\n+\t\t}, nil\n \t}\n \n \tclientCA, err := e.getClientCA(req.Policy)\n@@ -149,41 +198,23 @@ func (e *Evaluator) Evaluate(ctx context.Context, req *Request) (*Result, error)\n \t\treturn nil, fmt.Errorf(\"authorize: error validating client certificate: %w\", err)\n \t}\n \n-\teg, ectx := errgroup.WithContext(ctx)\n-\n-\tvar policyOutput *PolicyResponse\n-\teg.Go(func() error {\n-\t\tvar err error\n-\t\tpolicyOutput, err = policyEvaluator.Evaluate(ectx, &PolicyRequest{\n-\t\t\tHTTP:                     req.HTTP,\n-\t\t\tSession:                  req.Session,\n-\t\t\tIsValidClientCertificate: isValidClientCertificate,\n-\t\t})\n-\t\treturn err\n-\t})\n-\n-\tvar headersOutput *HeadersResponse\n-\teg.Go(func() error {\n-\t\theadersReq := NewHeadersRequestFromPolicy(req.Policy, req.HTTP.Hostname)\n-\t\theadersReq.Session = req.Session\n-\t\tvar err error\n-\t\theadersOutput, err = e.headersEvaluators.Evaluate(ectx, headersReq)\n-\t\treturn err\n+\treturn policyEvaluator.Evaluate(ctx, &PolicyRequest{\n+\t\tHTTP:                     req.HTTP,\n+\t\tSession:                  req.Session,\n+\t\tIsValidClientCertificate: isValidClientCertificate,\n \t})\n+}\n \n-\terr = eg.Wait()\n+func (e *Evaluator) evaluateHeaders(ctx context.Context, req *Request) (*HeadersResponse, error) {\n+\theadersReq := NewHeadersRequestFromPolicy(req.Policy, req.HTTP.Hostname)\n+\theadersReq.Session = req.Session\n+\tres, err := e.headersEvaluators.Evaluate(ctx, headersReq)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \n-\tcarryOverJWTAssertion(headersOutput.Headers, req.HTTP.Headers)\n+\tcarryOverJWTAssertion(res.Headers, req.HTTP.Headers)\n \n-\tres := &Result{\n-\t\tAllow:   policyOutput.Allow,\n-\t\tDeny:    policyOutput.Deny,\n-\t\tHeaders: headersOutput.Headers,\n-\t\tTraces:  policyOutput.Traces,\n-\t}\n \treturn res, nil\n }\n "
        },
        {
          "filename": "authorize/evaluator/headers_evaluator.go",
          "status": "modified",
          "additions": 11,
          "deletions": 9,
          "patch": "@@ -30,16 +30,18 @@ type HeadersRequest struct {\n // NewHeadersRequestFromPolicy creates a new HeadersRequest from a policy.\n func NewHeadersRequestFromPolicy(policy *config.Policy, hostname string) *HeadersRequest {\n \tinput := new(HeadersRequest)\n-\tinput.EnableGoogleCloudServerlessAuthentication = policy.EnableGoogleCloudServerlessAuthentication\n-\tinput.EnableRoutingKey = policy.EnvoyOpts.GetLbPolicy() == envoy_config_cluster_v3.Cluster_RING_HASH ||\n-\t\tpolicy.EnvoyOpts.GetLbPolicy() == envoy_config_cluster_v3.Cluster_MAGLEV\n-\tinput.Issuer = hostname\n-\tinput.KubernetesServiceAccountToken = policy.KubernetesServiceAccountToken\n-\tfor _, wu := range policy.To {\n-\t\tinput.ToAudience = \"https://\" + wu.URL.Hostname()\n+\tif policy != nil {\n+\t\tinput.EnableGoogleCloudServerlessAuthentication = policy.EnableGoogleCloudServerlessAuthentication\n+\t\tinput.EnableRoutingKey = policy.EnvoyOpts.GetLbPolicy() == envoy_config_cluster_v3.Cluster_RING_HASH ||\n+\t\t\tpolicy.EnvoyOpts.GetLbPolicy() == envoy_config_cluster_v3.Cluster_MAGLEV\n+\t\tinput.Issuer = hostname\n+\t\tinput.KubernetesServiceAccountToken = policy.KubernetesServiceAccountToken\n+\t\tfor _, wu := range policy.To {\n+\t\t\tinput.ToAudience = \"https://\" + wu.URL.Hostname()\n+\t\t}\n+\t\tinput.PassAccessToken = policy.GetSetAuthorizationHeader() == configpb.Route_ACCESS_TOKEN\n+\t\tinput.PassIDToken = policy.GetSetAuthorizationHeader() == configpb.Route_ID_TOKEN\n \t}\n-\tinput.PassAccessToken = policy.GetSetAuthorizationHeader() == configpb.Route_ACCESS_TOKEN\n-\tinput.PassIDToken = policy.GetSetAuthorizationHeader() == configpb.Route_ID_TOKEN\n \treturn input\n }\n "
        },
        {
          "filename": "authorize/evaluator/policy_evaluator_test.go",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -111,7 +111,7 @@ func TestPolicyEvaluator(t *testing.T) {\n \t\t\t})\n \t\trequire.NoError(t, err)\n \t\tassert.Equal(t, &PolicyResponse{\n-\t\t\tAllow:  NewRuleResult(false, criteria.ReasonEmailUnauthorized, criteria.ReasonNonPomeriumRoute, criteria.ReasonUserUnauthorized),\n+\t\t\tAllow:  NewRuleResult(false, criteria.ReasonEmailUnauthorized, criteria.ReasonUserUnauthorized),\n \t\t\tDeny:   NewRuleResult(false, criteria.ReasonValidClientCertificateOrNoneRequired),\n \t\t\tTraces: []contextutil.PolicyEvaluationTrace{{}},\n \t\t}, output)\n@@ -172,7 +172,7 @@ func TestPolicyEvaluator(t *testing.T) {\n \t\t\t\t})\n \t\t\trequire.NoError(t, err)\n \t\t\tassert.Equal(t, &PolicyResponse{\n-\t\t\t\tAllow:  NewRuleResult(false, criteria.ReasonNonPomeriumRoute),\n+\t\t\t\tAllow:  NewRuleResult(false),\n \t\t\t\tDeny:   NewRuleResult(true, criteria.ReasonAccept),\n \t\t\t\tTraces: []contextutil.PolicyEvaluationTrace{{}, {ID: \"p1\", Deny: true}},\n \t\t\t}, output)\n@@ -203,7 +203,7 @@ func TestPolicyEvaluator(t *testing.T) {\n \t\t\t\t})\n \t\t\trequire.NoError(t, err)\n \t\t\tassert.Equal(t, &PolicyResponse{\n-\t\t\t\tAllow:  NewRuleResult(false, criteria.ReasonNonPomeriumRoute),\n+\t\t\t\tAllow:  NewRuleResult(false),\n \t\t\t\tDeny:   NewRuleResult(true, criteria.ReasonAccept, criteria.ReasonInvalidClientCertificate),\n \t\t\t\tTraces: []contextutil.PolicyEvaluationTrace{{Deny: true}, {ID: \"p1\", Deny: true}},\n \t\t\t}, output)\n@@ -289,7 +289,7 @@ func TestPolicyEvaluator(t *testing.T) {\n \t\t\t})\n \t\trequire.NoError(t, err)\n \t\tassert.Equal(t, &PolicyResponse{\n-\t\t\tAllow:  NewRuleResult(false, criteria.ReasonNonPomeriumRoute, criteria.ReasonUserUnauthenticated),\n+\t\t\tAllow:  NewRuleResult(false, criteria.ReasonUserUnauthenticated),\n \t\t\tDeny:   NewRuleResult(false, criteria.ReasonValidClientCertificateOrNoneRequired),\n \t\t\tTraces: []contextutil.PolicyEvaluationTrace{{Allow: false}},\n \t\t}, output)"
        },
        {
          "filename": "authorize/grpc.go",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -11,6 +11,7 @@ import (\n \n \t\"github.com/pomerium/pomerium/authorize/evaluator\"\n \t\"github.com/pomerium/pomerium/config\"\n+\t\"github.com/pomerium/pomerium/config/envoyconfig\"\n \t\"github.com/pomerium/pomerium/internal/log\"\n \t\"github.com/pomerium/pomerium/internal/sessions\"\n \t\"github.com/pomerium/pomerium/internal/telemetry/requestid\"\n@@ -93,6 +94,7 @@ func (a *Authorize) getEvaluatorRequestFromCheckRequest(\n ) (*evaluator.Request, error) {\n \trequestURL := getCheckRequestURL(in)\n \treq := &evaluator.Request{\n+\t\tIsInternal: envoyconfig.ExtAuthzContextExtensionsIsInternal(in.GetAttributes().GetContextExtensions()),\n \t\tHTTP: evaluator.NewRequestHTTP(\n \t\t\tin.GetAttributes().GetRequest().GetHttp().GetMethod(),\n \t\t\trequestURL,\n@@ -106,15 +108,16 @@ func (a *Authorize) getEvaluatorRequestFromCheckRequest(\n \t\t\tID: sessionState.ID,\n \t\t}\n \t}\n-\treq.Policy = a.getMatchingPolicy(requestURL)\n+\treq.Policy = a.getMatchingPolicy(envoyconfig.ExtAuthzContextExtensionsRouteID(in.Attributes.GetContextExtensions()))\n \treturn req, nil\n }\n \n-func (a *Authorize) getMatchingPolicy(requestURL url.URL) *config.Policy {\n+func (a *Authorize) getMatchingPolicy(routeID uint64) *config.Policy {\n \toptions := a.currentOptions.Load()\n \n \tfor _, p := range options.GetAllPolicies() {\n-\t\tif p.Matches(requestURL) {\n+\t\tid, _ := p.RouteID()\n+\t\tif id == routeID {\n \t\t\treturn &p\n \t\t}\n \t}\n@@ -159,6 +162,7 @@ func getCheckRequestURL(req *envoy_service_auth_v3.CheckRequest) url.URL {\n \tpath := h.GetPath()\n \tif idx := strings.Index(path, \"?\"); idx != -1 {\n \t\tu.RawPath, u.RawQuery = path[:idx], path[idx+1:]\n+\t\tu.RawQuery = u.Query().Encode()\n \t} else {\n \t\tu.RawPath = path\n \t}"
        },
        {
          "filename": "config/envoyconfig/listeners.go",
          "status": "modified",
          "additions": 11,
          "deletions": 23,
          "patch": "@@ -13,11 +13,9 @@ import (\n \tenvoy_config_core_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/core/v3\"\n \tenvoy_config_listener_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"\n \tenvoy_config_route_v3 \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"\n-\tenvoy_extensions_filters_http_ext_authz_v3 \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/ext_authz/v3\"\n \tenvoy_http_connection_manager \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/http_connection_manager/v3\"\n \tenvoy_extensions_transport_sockets_tls_v3 \"github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3\"\n \tenvoy_type_v3 \"github.com/envoyproxy/go-control-plane/envoy/type/v3\"\n-\t\"github.com/golang/protobuf/ptypes/any\"\n \t\"github.com/golang/protobuf/ptypes/wrappers\"\n \t\"google.golang.org/protobuf/types/known/durationpb\"\n \t\"google.golang.org/protobuf/types/known/wrapperspb\"\n@@ -32,27 +30,16 @@ import (\n \n const listenerBufferLimit uint32 = 32 * 1024\n \n-var (\n-\tdisableExtAuthz *any.Any\n-\ttlsParams       = &envoy_extensions_transport_sockets_tls_v3.TlsParameters{\n-\t\tCipherSuites: []string{\n-\t\t\t\"ECDHE-ECDSA-AES256-GCM-SHA384\",\n-\t\t\t\"ECDHE-RSA-AES256-GCM-SHA384\",\n-\t\t\t\"ECDHE-ECDSA-AES128-GCM-SHA256\",\n-\t\t\t\"ECDHE-RSA-AES128-GCM-SHA256\",\n-\t\t\t\"ECDHE-ECDSA-CHACHA20-POLY1305\",\n-\t\t\t\"ECDHE-RSA-CHACHA20-POLY1305\",\n-\t\t},\n-\t\tTlsMinimumProtocolVersion: envoy_extensions_transport_sockets_tls_v3.TlsParameters_TLSv1_2,\n-\t}\n-)\n-\n-func init() {\n-\tdisableExtAuthz = marshalAny(&envoy_extensions_filters_http_ext_authz_v3.ExtAuthzPerRoute{\n-\t\tOverride: &envoy_extensions_filters_http_ext_authz_v3.ExtAuthzPerRoute_Disabled{\n-\t\t\tDisabled: true,\n-\t\t},\n-\t})\n+var tlsParams = &envoy_extensions_transport_sockets_tls_v3.TlsParameters{\n+\tCipherSuites: []string{\n+\t\t\"ECDHE-ECDSA-AES256-GCM-SHA384\",\n+\t\t\"ECDHE-RSA-AES256-GCM-SHA384\",\n+\t\t\"ECDHE-ECDSA-AES128-GCM-SHA256\",\n+\t\t\"ECDHE-RSA-AES128-GCM-SHA256\",\n+\t\t\"ECDHE-ECDSA-CHACHA20-POLY1305\",\n+\t\t\"ECDHE-RSA-CHACHA20-POLY1305\",\n+\t},\n+\tTlsMinimumProtocolVersion: envoy_extensions_transport_sockets_tls_v3.TlsParameters_TLSv1_2,\n }\n \n // BuildListeners builds envoy listeners from the given config.\n@@ -312,6 +299,7 @@ func (b *Builder) buildMainHTTPConnectionManagerFilter(\n \t\tSkipXffAppend:     cfg.Options.SkipXffAppend,\n \t\tXffNumTrustedHops: cfg.Options.XffNumTrustedHops,\n \t\tLocalReplyConfig:  b.buildLocalReplyConfig(cfg.Options, false),\n+\t\tNormalizePath:     wrapperspb.Bool(true),\n \t}\n \n \tif fullyStatic {"
        },
        {
          "filename": "config/envoyconfig/per_filter_config.go",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+package envoyconfig\n+\n+import (\n+\t\"strconv\"\n+\n+\tenvoy_extensions_filters_http_ext_authz_v3 \"github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/ext_authz/v3\"\n+\t\"github.com/golang/protobuf/ptypes/any\"\n+)\n+\n+// PerFilterConfigExtAuthzName is the name of the ext authz filter to apply config to\n+const PerFilterConfigExtAuthzName = \"envoy.filters.http.ext_authz\"\n+\n+// PerFilterConfigExtAuthzContextExtensions returns a per-filter config for ext authz that disables ext-authz.\n+func PerFilterConfigExtAuthzContextExtensions(authzContextExtensions map[string]string) *any.Any {\n+\treturn marshalAny(&envoy_extensions_filters_http_ext_authz_v3.ExtAuthzPerRoute{\n+\t\tOverride: &envoy_extensions_filters_http_ext_authz_v3.ExtAuthzPerRoute_CheckSettings{\n+\t\t\tCheckSettings: &envoy_extensions_filters_http_ext_authz_v3.CheckSettings{\n+\t\t\t\tContextExtensions: authzContextExtensions,\n+\t\t\t},\n+\t\t},\n+\t})\n+}\n+\n+// PerFilterConfigExtAuthzDisabled returns a per-filter config for ext authz that disables ext-authz.\n+func PerFilterConfigExtAuthzDisabled() *any.Any {\n+\treturn marshalAny(&envoy_extensions_filters_http_ext_authz_v3.ExtAuthzPerRoute{\n+\t\tOverride: &envoy_extensions_filters_http_ext_authz_v3.ExtAuthzPerRoute_Disabled{\n+\t\t\tDisabled: true,\n+\t\t},\n+\t})\n+}\n+\n+// MakeExtAuthzContextExtensions makes the ext authz context extensions.\n+func MakeExtAuthzContextExtensions(internal bool, routeID uint64) map[string]string {\n+\treturn map[string]string{\n+\t\t\"internal\": strconv.FormatBool(internal),\n+\t\t\"route_id\": strconv.FormatUint(routeID, 10),\n+\t}\n+}\n+\n+// ExtAuthzContextExtensionsIsInternal returns true if the context extensions indicates the route is internal.\n+func ExtAuthzContextExtensionsIsInternal(extAuthzContextExtensions map[string]string) bool {\n+\treturn extAuthzContextExtensions != nil && extAuthzContextExtensions[\"internal\"] == \"true\"\n+}\n+\n+// ExtAuthzContextExtensionsRouteID returns the route id for the context extensions.\n+func ExtAuthzContextExtensionsRouteID(extAuthzContextExtensions map[string]string) uint64 {\n+\tif extAuthzContextExtensions == nil {\n+\t\treturn 0\n+\t}\n+\trouteID, _ := strconv.ParseUint(extAuthzContextExtensions[\"route_id\"], 10, 64)\n+\treturn routeID\n+}"
        },
        {
          "filename": "config/envoyconfig/route_configurations_test.go",
          "status": "modified",
          "additions": 32,
          "deletions": 11,
          "patch": "@@ -26,6 +26,7 @@ func TestBuilder_buildMainRouteConfiguration(t *testing.T) {\n \t\tPolicies: []config.Policy{\n \t\t\t{\n \t\t\t\tFrom: \"https://*.example.com\",\n+\t\t\t\tTo:   mustParseWeightedURLs(t, \"https://www.example.com\"),\n \t\t\t},\n \t\t},\n \t}}\n@@ -40,15 +41,13 @@ func TestBuilder_buildMainRouteConfiguration(t *testing.T) {\n \t\t\t\t\"name\": \"catch-all\",\n \t\t\t\t\"domains\": [\"*\"],\n \t\t\t\t\"routes\": [\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/.pomerium/jwt\", true, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/.pomerium/webauthn\", true, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/ping\", false, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/healthz\", false, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/.pomerium\", false, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePrefixRoute(cfg.Options, \"/.pomerium/\", false, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/.well-known/pomerium\", false, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePrefixRoute(cfg.Options, \"/.well-known/pomerium/\", false, false))+`,\n-\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/robots.txt\", false, false))+`,\n+\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/ping\", false))+`,\n+\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/healthz\", false))+`,\n+\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/.pomerium\", false))+`,\n+\t\t\t\t\t`+protojson.Format(b.buildControlPlanePrefixRoute(cfg.Options, \"/.pomerium/\", false))+`,\n+\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/.well-known/pomerium\", false))+`,\n+\t\t\t\t\t`+protojson.Format(b.buildControlPlanePrefixRoute(cfg.Options, \"/.well-known/pomerium/\", false))+`,\n+\t\t\t\t\t`+protojson.Format(b.buildControlPlanePathRoute(cfg.Options, \"/robots.txt\", false))+`,\n \t\t\t\t\t{\n \t\t\t\t\t\t\"name\": \"policy-0\",\n \t\t\t\t\t\t\"match\": {\n@@ -79,7 +78,7 @@ func TestBuilder_buildMainRouteConfiguration(t *testing.T) {\n \t\t\t\t\t\t],\n \t\t\t\t\t\t\"route\": {\n \t\t\t\t\t\t\t\"autoHostRewrite\": true,\n-\t\t\t\t\t\t\t\"cluster\": \"route-0\",\n+\t\t\t\t\t\t\t\"cluster\": \"route-5feb9fe8bd89aa97\",\n \t\t\t\t\t\t\t\"hashPolicy\": [\n \t\t\t\t\t\t\t\t{ \"header\": { \"headerName\": \"x-pomerium-routing-key\" }, \"terminal\": true },\n \t\t\t\t\t\t\t\t{ \"connectionProperties\": { \"sourceIp\": true }, \"terminal\": true }\n@@ -89,6 +88,17 @@ func TestBuilder_buildMainRouteConfiguration(t *testing.T) {\n \t\t\t\t\t\t\t\t{ \"enabled\": false, \"upgradeType\": \"websocket\" },\n \t\t\t\t\t\t\t\t{ \"enabled\": false, \"upgradeType\": \"spdy/3.1\" }\n \t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\t\t\"route_id\": \"6911793875091303063\"\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t},\n \t\t\t\t\t{\n@@ -121,7 +131,7 @@ func TestBuilder_buildMainRouteConfiguration(t *testing.T) {\n \t\t\t\t\t\t],\n \t\t\t\t\t\t\"route\": {\n \t\t\t\t\t\t\t\"autoHostRewrite\": true,\n-\t\t\t\t\t\t\t\"cluster\": \"route-0\",\n+\t\t\t\t\t\t\t\"cluster\": \"route-5feb9fe8bd89aa97\",\n \t\t\t\t\t\t\t\"hashPolicy\": [\n \t\t\t\t\t\t\t\t{ \"header\": { \"headerName\": \"x-pomerium-routing-key\" }, \"terminal\": true },\n \t\t\t\t\t\t\t\t{ \"connectionProperties\": { \"sourceIp\": true }, \"terminal\": true }\n@@ -131,6 +141,17 @@ func TestBuilder_buildMainRouteConfiguration(t *testing.T) {\n \t\t\t\t\t\t\t\t{ \"enabled\": false, \"upgradeType\": \"websocket\" },\n \t\t\t\t\t\t\t\t{ \"enabled\": false, \"upgradeType\": \"spdy/3.1\" }\n \t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\t\t\"route_id\": \"6911793875091303063\"\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t]"
        },
        {
          "filename": "config/envoyconfig/routes.go",
          "status": "modified",
          "additions": 26,
          "deletions": 29,
          "patch": "@@ -45,7 +45,7 @@ func (b *Builder) buildGRPCRoutes() ([]*envoy_config_route_v3.Route, error) {\n \t\t},\n \t\tAction: action,\n \t\tTypedPerFilterConfig: map[string]*any.Any{\n-\t\t\t\"envoy.filters.http.ext_authz\": disableExtAuthz,\n+\t\t\tPerFilterConfigExtAuthzName: PerFilterConfigExtAuthzDisabled(),\n \t\t},\n \t}}, nil\n }\n@@ -65,20 +65,16 @@ func (b *Builder) buildPomeriumHTTPRoutes(\n \t}\n \tif !isFrontingAuthenticate {\n \t\troutes = append(routes,\n-\t\t\t// enable ext_authz\n-\t\t\tb.buildControlPlanePathRoute(options, \"/.pomerium/jwt\", true, requireStrictTransportSecurity),\n-\t\t\tb.buildControlPlanePathRoute(options, urlutil.WebAuthnURLPath, true, requireStrictTransportSecurity),\n-\t\t\t// disable ext_authz and passthrough to proxy handlers\n-\t\t\tb.buildControlPlanePathRoute(options, \"/ping\", false, requireStrictTransportSecurity),\n-\t\t\tb.buildControlPlanePathRoute(options, \"/healthz\", false, requireStrictTransportSecurity),\n-\t\t\tb.buildControlPlanePathRoute(options, \"/.pomerium\", false, requireStrictTransportSecurity),\n-\t\t\tb.buildControlPlanePrefixRoute(options, \"/.pomerium/\", false, requireStrictTransportSecurity),\n-\t\t\tb.buildControlPlanePathRoute(options, \"/.well-known/pomerium\", false, requireStrictTransportSecurity),\n-\t\t\tb.buildControlPlanePrefixRoute(options, \"/.well-known/pomerium/\", false, requireStrictTransportSecurity),\n+\t\t\tb.buildControlPlanePathRoute(options, \"/ping\", requireStrictTransportSecurity),\n+\t\t\tb.buildControlPlanePathRoute(options, \"/healthz\", requireStrictTransportSecurity),\n+\t\t\tb.buildControlPlanePathRoute(options, \"/.pomerium\", requireStrictTransportSecurity),\n+\t\t\tb.buildControlPlanePrefixRoute(options, \"/.pomerium/\", requireStrictTransportSecurity),\n+\t\t\tb.buildControlPlanePathRoute(options, \"/.well-known/pomerium\", requireStrictTransportSecurity),\n+\t\t\tb.buildControlPlanePrefixRoute(options, \"/.well-known/pomerium/\", requireStrictTransportSecurity),\n \t\t)\n \t\t// per #837, only add robots.txt if there are no unauthenticated routes\n \t\tif !hasPublicPolicyMatchingURL(options, url.URL{Scheme: \"https\", Host: host, Path: \"/robots.txt\"}) {\n-\t\t\troutes = append(routes, b.buildControlPlanePathRoute(options, \"/robots.txt\", false, requireStrictTransportSecurity))\n+\t\t\troutes = append(routes, b.buildControlPlanePathRoute(options, \"/robots.txt\", requireStrictTransportSecurity))\n \t\t}\n \t}\n \n@@ -109,8 +105,8 @@ func (b *Builder) buildPomeriumAuthenticateHTTPRoutes(\n \t\t}\n \t\tif urlMatchesHost(u, host) {\n \t\t\treturn []*envoy_config_route_v3.Route{\n-\t\t\t\tb.buildControlPlanePathRoute(options, options.AuthenticateCallbackPath, false, requireStrictTransportSecurity),\n-\t\t\t\tb.buildControlPlanePathRoute(options, \"/\", false, requireStrictTransportSecurity),\n+\t\t\t\tb.buildControlPlanePathRoute(options, options.AuthenticateCallbackPath, requireStrictTransportSecurity),\n+\t\t\t\tb.buildControlPlanePathRoute(options, \"/\", requireStrictTransportSecurity),\n \t\t\t}, nil\n \t\t}\n \t}\n@@ -120,7 +116,6 @@ func (b *Builder) buildPomeriumAuthenticateHTTPRoutes(\n func (b *Builder) buildControlPlanePathRoute(\n \toptions *config.Options,\n \tpath string,\n-\tprotected bool,\n \trequireStrictTransportSecurity bool,\n ) *envoy_config_route_v3.Route {\n \tr := &envoy_config_route_v3.Route{\n@@ -136,19 +131,16 @@ func (b *Builder) buildControlPlanePathRoute(\n \t\t\t},\n \t\t},\n \t\tResponseHeadersToAdd: toEnvoyHeaders(options.GetSetResponseHeaders(requireStrictTransportSecurity)),\n-\t}\n-\tif !protected {\n-\t\tr.TypedPerFilterConfig = map[string]*any.Any{\n-\t\t\t\"envoy.filters.http.ext_authz\": disableExtAuthz,\n-\t\t}\n+\t\tTypedPerFilterConfig: map[string]*any.Any{\n+\t\t\tPerFilterConfigExtAuthzName: PerFilterConfigExtAuthzContextExtensions(MakeExtAuthzContextExtensions(true, 0)),\n+\t\t},\n \t}\n \treturn r\n }\n \n func (b *Builder) buildControlPlanePrefixRoute(\n \toptions *config.Options,\n \tprefix string,\n-\tprotected bool,\n \trequireStrictTransportSecurity bool,\n ) *envoy_config_route_v3.Route {\n \tr := &envoy_config_route_v3.Route{\n@@ -164,11 +156,9 @@ func (b *Builder) buildControlPlanePrefixRoute(\n \t\t\t},\n \t\t},\n \t\tResponseHeadersToAdd: toEnvoyHeaders(options.GetSetResponseHeaders(requireStrictTransportSecurity)),\n-\t}\n-\tif !protected {\n-\t\tr.TypedPerFilterConfig = map[string]*any.Any{\n-\t\t\t\"envoy.filters.http.ext_authz\": disableExtAuthz,\n-\t\t}\n+\t\tTypedPerFilterConfig: map[string]*any.Any{\n+\t\t\tPerFilterConfigExtAuthzName: PerFilterConfigExtAuthzContextExtensions(MakeExtAuthzContextExtensions(true, 0)),\n+\t\t},\n \t}\n \treturn r\n }\n@@ -288,6 +278,11 @@ func (b *Builder) buildRouteForPolicyAndMatch(\n \t\treturn nil, err\n \t}\n \n+\trouteID, err := policy.RouteID()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n \trequireStrictTransportSecurity := cryptutil.HasCertificateForServerName(certs, fromURL.Hostname())\n \n \troute := &envoy_config_route_v3.Route{\n@@ -323,9 +318,12 @@ func (b *Builder) buildRouteForPolicyAndMatch(\n \t}\n \tif isFrontingAuthenticate {\n \t\troute.TypedPerFilterConfig = map[string]*any.Any{\n-\t\t\t\"envoy.filters.http.ext_authz\": disableExtAuthz,\n+\t\t\tPerFilterConfigExtAuthzName: PerFilterConfigExtAuthzDisabled(),\n \t\t}\n \t} else {\n+\t\troute.TypedPerFilterConfig = map[string]*any.Any{\n+\t\t\tPerFilterConfigExtAuthzName: PerFilterConfigExtAuthzContextExtensions(MakeExtAuthzContextExtensions(false, routeID)),\n+\t\t}\n \t\tluaMetadata[\"remove_pomerium_cookie\"] = &structpb.Value{\n \t\t\tKind: &structpb.Value_StringValue{\n \t\t\t\tStringValue: cfg.Options.CookieName,\n@@ -344,8 +342,7 @@ func (b *Builder) buildRouteForPolicyAndMatch(\n \t}\n \n \tif policy.IsForKubernetes() {\n-\t\tpolicyID, _ := policy.RouteID()\n-\t\tfor _, hdr := range b.reproxy.GetPolicyIDHeaders(policyID) {\n+\t\tfor _, hdr := range b.reproxy.GetPolicyIDHeaders(routeID) {\n \t\t\troute.RequestHeadersToAdd = append(route.RequestHeadersToAdd,\n \t\t\t\t&envoy_config_core_v3.HeaderValueOption{\n \t\t\t\t\tHeader: &envoy_config_core_v3.HeaderValue{"
        },
        {
          "filename": "config/envoyconfig/routes_test.go",
          "status": "modified",
          "additions": 285,
          "deletions": 81,
          "patch": "@@ -16,7 +16,6 @@ import (\n \t\"github.com/pomerium/pomerium/config\"\n \t\"github.com/pomerium/pomerium/config/envoyconfig/filemgr\"\n \t\"github.com/pomerium/pomerium/internal/testutil\"\n-\t\"github.com/pomerium/pomerium/internal/urlutil\"\n \t\"github.com/pomerium/pomerium/pkg/cryptutil\"\n )\n \n@@ -56,43 +55,43 @@ func Test_buildGRPCRoutes(t *testing.T) {\n \n func Test_buildPomeriumHTTPRoutes(t *testing.T) {\n \tb := &Builder{filemgr: filemgr.NewManager()}\n-\trouteString := func(typ, name string, protected bool) string {\n+\trouteString := func(typ, name string) string {\n \t\tstr := `{\n-\t\t\t\t\"name\": \"pomerium-` + typ + `-` + name + `\",\n-\t\t\t\t\"match\": {\n-\t\t\t\t\t\"` + typ + `\": \"` + name + `\"\n+\t\t\t\"name\": \"pomerium-` + typ + `-` + name + `\",\n+\t\t\t\"match\": {\n+\t\t\t\t\"` + typ + `\": \"` + name + `\"\n+\t\t\t},\n+\t\t\t\"responseHeadersToAdd\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"appendAction\": \"OVERWRITE_IF_EXISTS_OR_ADD\",\n+\t\t\t\t\t\"header\": {\n+\t\t\t\t\t\t\"key\": \"X-Frame-Options\",\n+\t\t\t\t\t\t\"value\": \"SAMEORIGIN\"\n+\t\t\t\t\t}\n \t\t\t\t},\n-\t\t\t\t\"responseHeadersToAdd\": [\n-\t\t\t\t\t{\n-\t\t\t\t\t\t\"appendAction\": \"OVERWRITE_IF_EXISTS_OR_ADD\",\n-\t\t\t\t\t\t\"header\": {\n-\t\t\t\t\t\t  \"key\": \"X-Frame-Options\",\n-\t\t\t\t\t\t  \"value\": \"SAMEORIGIN\"\n-\t\t\t\t\t\t}\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\t\"appendAction\": \"OVERWRITE_IF_EXISTS_OR_ADD\",\n-\t\t\t\t\t\t\"header\": {\n-\t\t\t\t\t\t  \"key\": \"X-XSS-Protection\",\n-\t\t\t\t\t\t  \"value\": \"1; mode=block\"\n-\t\t\t\t\t\t}\n+\t\t\t\t{\n+\t\t\t\t\t\"appendAction\": \"OVERWRITE_IF_EXISTS_OR_ADD\",\n+\t\t\t\t\t\"header\": {\n+\t\t\t\t\t\t\"key\": \"X-XSS-Protection\",\n+\t\t\t\t\t\t\"value\": \"1; mode=block\"\n \t\t\t\t\t}\n-\t\t\t\t],\n-\t\t\t\t\"route\": {\n-\t\t\t\t\t\"cluster\": \"pomerium-control-plane-http\"\n \t\t\t\t}\n-\t\t\t`\n-\t\tif !protected {\n-\t\t\tstr += `,\n-\t\t\t\t\"typedPerFilterConfig\": {\n-\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n-\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n-\t\t\t\t\t\t\"disabled\": true\n+\t\t\t],\n+\t\t\t\"route\": {\n+\t\t\t\t\"cluster\": \"pomerium-control-plane-http\"\n+\t\t\t},\n+\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\"internal\": \"true\",\n+\t\t\t\t\t\t\t\"route_id\": \"0\"\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t`\n-\t\t}\n-\t\tstr += \"}\"\n+\t\t\t}\n+\t\t}`\n \t\treturn str\n \t}\n \tt.Run(\"authenticate\", func(t *testing.T) {\n@@ -105,17 +104,15 @@ func Test_buildPomeriumHTTPRoutes(t *testing.T) {\n \t\trequire.NoError(t, err)\n \n \t\ttestutil.AssertProtoJSONEqual(t, `[\n-\t\t\t`+routeString(\"path\", \"/.pomerium/jwt\", true)+`,\n-\t\t\t`+routeString(\"path\", urlutil.WebAuthnURLPath, true)+`,\n-\t\t\t`+routeString(\"path\", \"/ping\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/healthz\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/.pomerium\", false)+`,\n-\t\t\t`+routeString(\"prefix\", \"/.pomerium/\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/.well-known/pomerium\", false)+`,\n-\t\t\t`+routeString(\"prefix\", \"/.well-known/pomerium/\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/robots.txt\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/oauth2/callback\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/\", false)+`\n+\t\t\t`+routeString(\"path\", \"/ping\")+`,\n+\t\t\t`+routeString(\"path\", \"/healthz\")+`,\n+\t\t\t`+routeString(\"path\", \"/.pomerium\")+`,\n+\t\t\t`+routeString(\"prefix\", \"/.pomerium/\")+`,\n+\t\t\t`+routeString(\"path\", \"/.well-known/pomerium\")+`,\n+\t\t\t`+routeString(\"prefix\", \"/.well-known/pomerium/\")+`,\n+\t\t\t`+routeString(\"path\", \"/robots.txt\")+`,\n+\t\t\t`+routeString(\"path\", \"/oauth2/callback\")+`,\n+\t\t\t`+routeString(\"path\", \"/\")+`\n \t\t]`, routes)\n \t})\n \tt.Run(\"proxy fronting authenticate\", func(t *testing.T) {\n@@ -144,15 +141,13 @@ func Test_buildPomeriumHTTPRoutes(t *testing.T) {\n \t\trequire.NoError(t, err)\n \n \t\ttestutil.AssertProtoJSONEqual(t, `[\n-\t\t\t`+routeString(\"path\", \"/.pomerium/jwt\", true)+`,\n-\t\t\t`+routeString(\"path\", urlutil.WebAuthnURLPath, true)+`,\n-\t\t\t`+routeString(\"path\", \"/ping\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/healthz\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/.pomerium\", false)+`,\n-\t\t\t`+routeString(\"prefix\", \"/.pomerium/\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/.well-known/pomerium\", false)+`,\n-\t\t\t`+routeString(\"prefix\", \"/.well-known/pomerium/\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/robots.txt\", false)+`\n+\t\t\t`+routeString(\"path\", \"/ping\")+`,\n+\t\t\t`+routeString(\"path\", \"/healthz\")+`,\n+\t\t\t`+routeString(\"path\", \"/.pomerium\")+`,\n+\t\t\t`+routeString(\"prefix\", \"/.pomerium/\")+`,\n+\t\t\t`+routeString(\"path\", \"/.well-known/pomerium\")+`,\n+\t\t\t`+routeString(\"prefix\", \"/.well-known/pomerium/\")+`,\n+\t\t\t`+routeString(\"path\", \"/robots.txt\")+`\n \t\t]`, routes)\n \t})\n \n@@ -172,22 +167,20 @@ func Test_buildPomeriumHTTPRoutes(t *testing.T) {\n \t\trequire.NoError(t, err)\n \n \t\ttestutil.AssertProtoJSONEqual(t, `[\n-\t\t\t`+routeString(\"path\", \"/.pomerium/jwt\", true)+`,\n-\t\t\t`+routeString(\"path\", urlutil.WebAuthnURLPath, true)+`,\n-\t\t\t`+routeString(\"path\", \"/ping\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/healthz\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/.pomerium\", false)+`,\n-\t\t\t`+routeString(\"prefix\", \"/.pomerium/\", false)+`,\n-\t\t\t`+routeString(\"path\", \"/.well-known/pomerium\", false)+`,\n-\t\t\t`+routeString(\"prefix\", \"/.well-known/pomerium/\", false)+`\n+\t\t\t`+routeString(\"path\", \"/ping\")+`,\n+\t\t\t`+routeString(\"path\", \"/healthz\")+`,\n+\t\t\t`+routeString(\"path\", \"/.pomerium\")+`,\n+\t\t\t`+routeString(\"prefix\", \"/.pomerium/\")+`,\n+\t\t\t`+routeString(\"path\", \"/.well-known/pomerium\")+`,\n+\t\t\t`+routeString(\"prefix\", \"/.well-known/pomerium/\")+`\n \t\t]`, routes)\n \t})\n }\n \n func Test_buildControlPlanePathRoute(t *testing.T) {\n \toptions := config.NewDefaultOptions()\n \tb := &Builder{filemgr: filemgr.NewManager()}\n-\troute := b.buildControlPlanePathRoute(options, \"/hello/world\", false, false)\n+\troute := b.buildControlPlanePathRoute(options, \"/hello/world\", false)\n \ttestutil.AssertProtoJSONEqual(t, `\n \t\t{\n \t\t\t\"name\": \"pomerium-path-/hello/world\",\n@@ -216,7 +209,12 @@ func Test_buildControlPlanePathRoute(t *testing.T) {\n \t\t\t\"typedPerFilterConfig\": {\n \t\t\t\t\"envoy.filters.http.ext_authz\": {\n \t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n-\t\t\t\t\t\"disabled\": true\n+\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\"internal\": \"true\",\n+\t\t\t\t\t\t\t\"route_id\": \"0\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -226,7 +224,7 @@ func Test_buildControlPlanePathRoute(t *testing.T) {\n func Test_buildControlPlanePrefixRoute(t *testing.T) {\n \toptions := config.NewDefaultOptions()\n \tb := &Builder{filemgr: filemgr.NewManager()}\n-\troute := b.buildControlPlanePrefixRoute(options, \"/hello/world/\", false, false)\n+\troute := b.buildControlPlanePrefixRoute(options, \"/hello/world/\", false)\n \ttestutil.AssertProtoJSONEqual(t, `\n \t\t{\n \t\t\t\"name\": \"pomerium-prefix-/hello/world/\",\n@@ -255,7 +253,12 @@ func Test_buildControlPlanePrefixRoute(t *testing.T) {\n \t\t\t\"typedPerFilterConfig\": {\n \t\t\t\t\"envoy.filters.http.ext_authz\": {\n \t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n-\t\t\t\t\t\"disabled\": true\n+\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\"internal\": \"true\",\n+\t\t\t\t\t\t\t\"route_id\": \"0\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -301,6 +304,7 @@ func TestTimeouts(t *testing.T) {\n \t\t\tPolicies: []config.Policy{\n \t\t\t\t{\n \t\t\t\t\tFrom:            \"https://example.com\",\n+\t\t\t\t\tTo:              mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\t\tPath:            \"/test\",\n \t\t\t\t\tUpstreamTimeout: getDuration(tc.upstream),\n \t\t\t\t\tIdleTimeout:     getDuration(tc.idle),\n@@ -356,47 +360,55 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\tPolicies: []config.Policy{\n \t\t\t{\n \t\t\t\tFrom:                \"https://ignore.example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPassIdentityHeaders: true,\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                \"https://example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPassIdentityHeaders: true,\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                \"https://example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPath:                \"/some/path\",\n \t\t\t\tAllowWebsockets:     true,\n \t\t\t\tPreserveHostHeader:  true,\n \t\t\t\tPassIdentityHeaders: true,\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                \"https://example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPrefix:              \"/some/prefix/\",\n \t\t\t\tSetRequestHeaders:   map[string]string{\"HEADER-KEY\": \"HEADER-VALUE\"},\n \t\t\t\tUpstreamTimeout:     &oneMinute,\n \t\t\t\tPassIdentityHeaders: true,\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                \"https://example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tRegex:               `^/[a]+$`,\n \t\t\t\tPassIdentityHeaders: true,\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                 \"https://example.com\",\n+\t\t\t\tTo:                   mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPrefix:               \"/some/prefix/\",\n \t\t\t\tRemoveRequestHeaders: []string{\"HEADER-KEY\"},\n \t\t\t\tUpstreamTimeout:      &oneMinute,\n \t\t\t\tPassIdentityHeaders:  true,\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                \"https://example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPath:                \"/some/path\",\n \t\t\t\tAllowSPDY:           true,\n \t\t\t\tPreserveHostHeader:  true,\n \t\t\t\tPassIdentityHeaders: true,\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                \"https://example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPath:                \"/some/path\",\n \t\t\t\tAllowSPDY:           true,\n \t\t\t\tAllowWebsockets:     true,\n@@ -405,6 +417,7 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t},\n \t\t\t{\n \t\t\t\tFrom:                \"https://example.com\",\n+\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\tPath:                \"/websocket-timeout\",\n \t\t\t\tAllowWebsockets:     true,\n \t\t\t\tPreserveHostHeader:  true,\n@@ -474,7 +487,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"11444765232398592404\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-2\",\n@@ -534,7 +558,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"2990091139764155677\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-3\",\n@@ -600,7 +635,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"2544588842279234006\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-4\",\n@@ -661,7 +707,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"10244970664102670752\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-5\",\n@@ -721,7 +778,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"2544588842279234006\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-6\",\n@@ -780,7 +848,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"2990091139764155677\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-7\",\n@@ -840,7 +919,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"2990091139764155677\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-8\",\n@@ -900,7 +990,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"1052418080698022187\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t]\n \t`, routes)\n@@ -915,6 +1016,7 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\tPolicies: []config.Policy{\n \t\t\t\t{\n \t\t\t\t\tFrom:                \"https://authenticate.example.com\",\n+\t\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://authenticate.internal\"),\n \t\t\t\t\tPassIdentityHeaders: true,\n \t\t\t\t},\n \t\t\t},\n@@ -997,10 +1099,12 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\tPolicies: []config.Policy{\n \t\t\t\t{\n \t\t\t\t\tFrom:                \"tcp+https://example.com:22\",\n+\t\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\t\tPassIdentityHeaders: true,\n \t\t\t\t},\n \t\t\t\t{\n \t\t\t\t\tFrom:                \"tcp+https://example.com:22\",\n+\t\t\t\t\tTo:                  mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\t\tPassIdentityHeaders: true,\n \t\t\t\t\tUpstreamTimeout:     &ten,\n \t\t\t\t},\n@@ -1069,7 +1173,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"2226589900561460978\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-1\",\n@@ -1130,7 +1245,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"2226589900561460978\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t]\n \t`, routes)\n@@ -1149,6 +1275,7 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\tPolicies: []config.Policy{\n \t\t\t\t{\n \t\t\t\t\tFrom: \"https://from.example.com\",\n+\t\t\t\t\tTo:   mustParseWeightedURLs(t, \"https://to.example.com\"),\n \t\t\t\t},\n \t\t\t},\n \t\t}}, nil, \"from.example.com\")\n@@ -1216,7 +1343,18 @@ func Test_buildPolicyRoutes(t *testing.T) {\n \t\t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t]\n+\t\t\t\t\t],\n+\t\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\t\"route_id\": \"15508081512033148378\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t]\n \t\t`, routes)\n@@ -1335,7 +1473,18 @@ func Test_buildPolicyRoutesRewrite(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"285016060542193864\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-1\",\n@@ -1395,7 +1544,18 @@ func Test_buildPolicyRoutesRewrite(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"285016060542193864\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-2\",\n@@ -1460,7 +1620,18 @@ func Test_buildPolicyRoutesRewrite(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"285016060542193864\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-3\",\n@@ -1520,7 +1691,18 @@ func Test_buildPolicyRoutesRewrite(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"285016060542193864\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-4\",\n@@ -1580,7 +1762,18 @@ func Test_buildPolicyRoutesRewrite(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"285016060542193864\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t},\n \t\t\t{\n \t\t\t\t\"name\": \"policy-5\",\n@@ -1645,7 +1838,18 @@ func Test_buildPolicyRoutesRewrite(t *testing.T) {\n \t\t\t\t\t\t  \"value\": \"1; mode=block\"\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t]\n+\t\t\t\t],\n+\t\t\t\t\"typedPerFilterConfig\": {\n+\t\t\t\t\t\"envoy.filters.http.ext_authz\": {\n+\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\",\n+\t\t\t\t\t\t\"checkSettings\": {\n+\t\t\t\t\t\t\t\"contextExtensions\": {\n+\t\t\t\t\t\t\t\t\"internal\": \"false\",\n+\t\t\t\t\t\t\t\t\"route_id\": \"285016060542193864\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t]\n \t`, routes)"
        },
        {
          "filename": "config/envoyconfig/testdata/main_http_connection_manager_filter.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -120,6 +120,7 @@\n       ]\n     },\n     \"requestTimeout\": \"30s\",\n+    \"normalizePath\": true,\n     \"rds\": {\n       \"configSource\": {\n         \"ads\": {},"
        },
        {
          "filename": "config/policy_ppl.go",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -13,10 +13,6 @@ func (p *Policy) ToPPL() *parser.Policy {\n \tppl := &parser.Policy{}\n \n \tallowRule := parser.Rule{Action: parser.ActionAllow}\n-\tallowRule.Or = append(allowRule.Or,\n-\t\tparser.Criterion{\n-\t\t\tName: \"pomerium_routes\",\n-\t\t})\n \tif p.AllowPublicUnauthenticatedAccess {\n \t\tallowRule.Or = append(allowRule.Or,\n \t\t\tparser.Criterion{"
        },
        {
          "filename": "config/policy_ppl_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 19,
          "patch": "@@ -57,24 +57,6 @@ default allow = [false, set()]\n \n default deny = [false, set()]\n \n-pomerium_routes_0 = [true, {\"pomerium-route\"}] {\n-\tsession := get_session(input.session.id)\n-\tsession.id != \"\"\n-\tcontains(input.http.url, \"/.pomerium/\")\n-}\n-\n-else = [true, {\"pomerium-route\"}] {\n-\tcontains(input.http.url, \"/.pomerium/\")\n-\tnot contains(input.http.url, \"/.pomerium/jwt\")\n-\tnot contains(input.http.url, \"/.pomerium/webauthn\")\n-}\n-\n-else = [false, {\"user-unauthenticated\"}] {\n-\tcontains(input.http.url, \"/.pomerium/\")\n-}\n-\n-else = [false, {\"non-pomerium-route\"}]\n-\n accept_0 = [true, {\"accept\"}]\n \n cors_preflight_0 = [true, {\"cors-request\"}] {\n@@ -380,7 +362,7 @@ else = [false, {\"email-unauthorized\"}] {\n else = [false, {\"user-unauthenticated\"}]\n \n or_0 = v {\n-\tresults := [pomerium_routes_0, accept_0, cors_preflight_0, authenticated_user_0, domain_0, domain_1, domain_2, domain_3, domain_4, claim_0, claim_1, claim_2, claim_3, user_0, email_0, user_1, email_1, user_2, email_2, user_3, email_3, user_4, email_4]\n+\tresults := [accept_0, cors_preflight_0, authenticated_user_0, domain_0, domain_1, domain_2, domain_3, domain_4, claim_0, claim_1, claim_2, claim_3, user_0, email_0, user_1, email_1, user_2, email_2, user_3, email_3, user_4, email_4]\n \tnormalized := [normalize_criterion_result(x) | x := results[i]]\n \tv := merge_with_or(normalized)\n }"
        },
        {
          "filename": "pkg/policy/criteria/pomerium_routes.go",
          "status": "removed",
          "additions": 0,
          "deletions": 65,
          "patch": "@@ -1,65 +0,0 @@\n-package criteria\n-\n-import (\n-\t\"github.com/open-policy-agent/opa/ast\"\n-\n-\t\"github.com/pomerium/pomerium/internal/urlutil\"\n-\t\"github.com/pomerium/pomerium/pkg/policy/generator\"\n-\t\"github.com/pomerium/pomerium/pkg/policy/parser\"\n-\t\"github.com/pomerium/pomerium/pkg/policy/rules\"\n-)\n-\n-type pomeriumRoutesCriterion struct {\n-\tg *Generator\n-}\n-\n-func (pomeriumRoutesCriterion) DataType() generator.CriterionDataType {\n-\treturn generator.CriterionDataTypeUnused\n-}\n-\n-func (pomeriumRoutesCriterion) Name() string {\n-\treturn \"pomerium_routes\"\n-}\n-\n-func (c pomeriumRoutesCriterion) GenerateRule(_ string, _ parser.Value) (*ast.Rule, []*ast.Rule, error) {\n-\tr1 := c.g.NewRule(c.Name())\n-\tr1.Head.Value = NewCriterionTerm(true, ReasonPomeriumRoute)\n-\tr1.Body = ast.Body{\n-\t\tast.MustParseExpr(`session := get_session(input.session.id)`),\n-\t\tast.MustParseExpr(`session.id != \"\"`),\n-\t\tast.MustParseExpr(`contains(input.http.url, \"/.pomerium/\")`),\n-\t}\n-\n-\tr2 := c.g.NewRule(c.Name())\n-\tr2.Head.Value = NewCriterionTerm(true, ReasonPomeriumRoute)\n-\tr2.Body = ast.Body{\n-\t\tast.MustParseExpr(`contains(input.http.url, \"/.pomerium/\")`),\n-\t\tast.MustParseExpr(`not contains(input.http.url, \"/.pomerium/jwt\")`),\n-\t\tast.MustParseExpr(`not contains(input.http.url, \"` + urlutil.WebAuthnURLPath + `\")`),\n-\t}\n-\tr1.Else = r2\n-\n-\tr3 := c.g.NewRule(c.Name())\n-\tr3.Head.Value = NewCriterionTerm(false, ReasonUserUnauthenticated)\n-\tr3.Body = ast.Body{\n-\t\tast.MustParseExpr(`contains(input.http.url, \"/.pomerium/\")`),\n-\t}\n-\tr2.Else = r3\n-\n-\tr4 := c.g.NewRule(c.Name())\n-\tr4.Head.Value = NewCriterionTerm(false, ReasonNonPomeriumRoute)\n-\tr3.Else = r4\n-\n-\treturn r1, []*ast.Rule{\n-\t\trules.GetSession(),\n-\t}, nil\n-}\n-\n-// PomeriumRoutes returns a Criterion on that allows access to pomerium routes.\n-func PomeriumRoutes(generator *Generator) Criterion {\n-\treturn pomeriumRoutesCriterion{g: generator}\n-}\n-\n-func init() {\n-\tRegister(PomeriumRoutes)\n-}"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 8,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "21b9e7890c750873a37ead73a2cc572c2de2423f",
            "date": "2025-01-08T21:57:57Z",
            "author_login": "kenjenkins"
          },
          {
            "sha": "95d4a24271feeb8b6b35d62ec3da72f7163a64b1",
            "date": "2025-01-06T18:41:42Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "fb7b61a6771a691e97b556777cdecb389929cf4b",
            "date": "2025-01-06T16:52:29Z",
            "author_login": "calebdoxsey"
          },
          {
            "sha": "8f3687065097acc41acc63b5c02129eee29cf2bb",
            "date": "2025-01-03T22:41:54Z",
            "author_login": "kralicky"
          },
          {
            "sha": "68764407b8d6bd53604a9920af3eb28434aff10f",
            "date": "2025-01-03T16:01:16Z",
            "author_login": "kralicky"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-285",
    "description": "Pomerium is an identity and context-aware access proxy. With specially crafted requests, incorrect authorization decisions may be made by Pomerium. This issue has been patched in versions 0.17.4, 0.18.1, 0.19.2, 0.20.1, 0.21.4 and 0.22.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-30T06:16:37.937",
    "last_modified": "2024-11-21T08:05:05.060",
    "fix_date": "2023-05-26T20:34:21Z"
  },
  "references": [
    {
      "url": "https://github.com/pomerium/pomerium/commit/d315e683357a9b587ba9ef399a8813bcc52fdebb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.17.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.18.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.19.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.20.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.21.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.22.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/security/advisories/GHSA-pvrc-wvj2-f59p",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/commit/d315e683357a9b587ba9ef399a8813bcc52fdebb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.17.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.18.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.19.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.20.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.21.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/releases/tag/v0.22.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/pomerium/pomerium/security/advisories/GHSA-pvrc-wvj2-f59p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.269771",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pomerium",
    "owner": "pomerium",
    "created_at": "2019-01-01T08:04:37Z",
    "updated_at": "2025-01-14T00:14:02Z",
    "pushed_at": "2025-01-13T22:43:45Z",
    "size": 72777,
    "stars": 4107,
    "forks": 285,
    "open_issues": 124,
    "watchers": 4107,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0-0-4",
      "0-0-5",
      "0-1-0",
      "0-2-0",
      "0-3-0",
      "0-4-0",
      "0-5-0",
      "0-6-0",
      "0-7-0",
      "0-8-0",
      "0-9-0",
      "0-10-0",
      "0-11-0",
      "0-12-0",
      "0-13-0",
      "0-14-0-doc-updates",
      "0-14-0-rc",
      "0-14-0",
      "0-15-0",
      "0-16-0",
      "0-17-0",
      "0-18-0",
      "0-19-0",
      "0-20-0",
      "0-21-0",
      "0-22-0",
      "0-23-0",
      "0-24-0",
      "0-25-0",
      "0-26-0"
    ],
    "languages": {
      "Go": 2725391,
      "TypeScript": 62427,
      "Jsonnet": 32800,
      "Shell": 9294,
      "Lua": 4397,
      "Makefile": 3867,
      "Python": 3228,
      "Dockerfile": 1093
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:30:58.767488"
  }
}