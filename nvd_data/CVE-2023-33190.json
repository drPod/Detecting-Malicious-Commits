{
  "cve_id": "CVE-2023-33190",
  "github_data": {
    "repository": "labring/sealos",
    "fix_commit": "4cdf52e55666864e5f90ed502e9fc13e18985b7b",
    "related_commits": [
      "4cdf52e55666864e5f90ed502e9fc13e18985b7b",
      "4cdf52e55666864e5f90ed502e9fc13e18985b7b"
    ],
    "patch_url": "https://github.com/labring/sealos/commit/4cdf52e55666864e5f90ed502e9fc13e18985b7b.patch",
    "fix_commit_details": {
      "sha": "4cdf52e55666864e5f90ed502e9fc13e18985b7b",
      "commit_date": "2023-05-26T03:08:19Z",
      "author": {
        "login": "cuisongliu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-74j8-w7f9-pp62",
        "length": 273,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 107,
        "additions": 107,
        "deletions": 0
      },
      "files": [
        {
          "filename": "controllers/user/controllers/namespace_controller.go",
          "status": "added",
          "additions": 99,
          "deletions": 0,
          "patch": "@@ -0,0 +1,99 @@\n+/*\n+Copyright 2022 labring.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package controllers\n+\n+import (\n+\t\"context\"\n+\t\"github.com/go-logr/logr\"\n+\t\"github.com/labring/sealos/controllers/user/controllers/helper\"\n+\tv1 \"k8s.io/api/core/v1\"\n+\t\"k8s.io/apimachinery/pkg/runtime\"\n+\t\"k8s.io/client-go/tools/record\"\n+\t\"k8s.io/client-go/util/retry\"\n+\tctrl \"sigs.k8s.io/controller-runtime\"\n+\t\"sigs.k8s.io/controller-runtime/pkg/builder\"\n+\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n+\t\"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil\"\n+\t\"sigs.k8s.io/controller-runtime/pkg/predicate\"\n+\t\"strings\"\n+)\n+\n+// NamespaceReconciler reconciles a Namespace object\n+type NamespaceReconciler struct {\n+\tLogger   logr.Logger\n+\tRecorder record.EventRecorder\n+\t*runtime.Scheme\n+\tclient.Client\n+}\n+\n+// Reconcile is part of the main kubernetes reconciliation loop which aims to\n+// move the current state of the cluster closer to the desired state.\n+// TODO(user): Modify the Reconcile function to compare the state specified by\n+// the User object against the actual cluster state, and then\n+// perform operations to make the cluster state reflect the state specified by\n+// the user.\n+//\n+// For more details, check Reconcile and its Result here:\n+// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.12.2/pkg/reconcile\n+func (r *NamespaceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n+\tr.Logger.V(1).Info(\"start reconcile for ns\")\n+\tns := &v1.Namespace{}\n+\tif err := r.Get(ctx, req.NamespacedName, ns); err != nil {\n+\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n+\t}\n+\n+\tif strings.HasPrefix(ns.Name, \"ns-\") {\n+\t\terr := retry.RetryOnConflict(retry.DefaultRetry, func() error {\n+\t\t\tchange, err := controllerutil.CreateOrUpdate(ctx, r.Client, ns, func() error {\n+\t\t\t\tif ns.Labels == nil {\n+\t\t\t\t\tns.Labels = map[string]string{}\n+\t\t\t\t}\n+\t\t\t\tns.Labels = helper.SetPodSecurity(ns.Labels)\n+\t\t\t\treturn nil\n+\t\t\t})\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t\tr.Logger.V(1).Info(\"create or update ns\", \"change\", change, \"ns\", ns.Name)\n+\t\t\treturn nil\n+\t\t})\n+\t\tif err != nil {\n+\t\t\tr.Logger.Error(err, \"create or update ns error\", \"ns\", ns.Name)\n+\t\t\treturn ctrl.Result{}, err\n+\t\t}\n+\t}\n+\n+\treturn ctrl.Result{}, nil\n+}\n+\n+// SetupWithManager sets up the controller with the Manager.\n+func (r *NamespaceReconciler) SetupWithManager(mgr ctrl.Manager) error {\n+\tconst controllerName = \"namespace_controller\"\n+\tif r.Client == nil {\n+\t\tr.Client = mgr.GetClient()\n+\t}\n+\tr.Logger = ctrl.Log.WithName(controllerName)\n+\tif r.Recorder == nil {\n+\t\tr.Recorder = mgr.GetEventRecorderFor(controllerName)\n+\t}\n+\tr.Scheme = mgr.GetScheme()\n+\tr.Logger.V(1).Info(\"init reconcile controller namespace\")\n+\treturn ctrl.NewControllerManagedBy(mgr).\n+\t\tFor(&v1.Namespace{}, builder.WithPredicates(\n+\t\t\tpredicate.Or(predicate.AnnotationChangedPredicate{}, predicate.LabelChangedPredicate{}))).\n+\t\tComplete(r)\n+}"
        },
        {
          "filename": "controllers/user/main.go",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -108,6 +108,14 @@ func main() {\n \t\tos.Exit(1)\n \t}\n \n+\tif err = (&controllers.NamespaceReconciler{\n+\t\tClient: mgr.GetClient(),\n+\t\tScheme: mgr.GetScheme(),\n+\t}).SetupWithManager(mgr); err != nil {\n+\t\tsetupLog.Error(err, \"unable to create controller\", \"controller\", \"Namespace\")\n+\t\tos.Exit(1)\n+\t}\n+\n \t//if err = (&controllers.UserExpirationReconciler{\n \t//\tClient: mgr.GetClient(),\n \t//\tScheme: mgr.GetScheme(),"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "21e0b3628310daaaa3a2028d7577d450705a19d7",
            "date": "2025-01-13T07:21:34Z",
            "author_login": "mlhiter"
          },
          {
            "sha": "03c30b8a9eb52e053042bfd7ba55441b674f60c2",
            "date": "2025-01-10T13:31:42Z",
            "author_login": "xudaotutou"
          },
          {
            "sha": "af8e841fef830d8fe70347fd6e9b7f56d11b8b5e",
            "date": "2025-01-10T08:56:34Z",
            "author_login": "xudaotutou"
          },
          {
            "sha": "7f9085f36130b6e3971371f5cd44eaf960e1ed6d",
            "date": "2025-01-10T08:09:49Z",
            "author_login": "zjy365"
          },
          {
            "sha": "1389cd0d03daf0846854070d0e50ba56a15536fa",
            "date": "2025-01-10T07:21:56Z",
            "author_login": "xudaotutou"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-287",
    "description": "Sealos is an open source cloud operating system distribution based on the Kubernetes kernel. In versions of Sealos prior to 4.2.1-rc4 an improper configuration of role based access control (RBAC) permissions resulted in an attacker being able to obtain cluster control permissions, which could control the entire cluster deployed with Sealos, as well as hundreds of pods and other resources within the cluster. This issue has been addressed in version 4.2.1-rc4. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-29T19:15:08.977",
    "last_modified": "2024-11-21T08:05:05.210",
    "fix_date": "2023-05-26T03:08:19Z"
  },
  "references": [
    {
      "url": "https://github.com/labring/sealos/commit/4cdf52e55666864e5f90ed502e9fc13e18985b7b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/labring/sealos/security/advisories/GHSA-74j8-w7f9-pp62",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/labring/sealos/commit/4cdf52e55666864e5f90ed502e9fc13e18985b7b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/labring/sealos/security/advisories/GHSA-74j8-w7f9-pp62",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.878259",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sealos",
    "owner": "labring",
    "created_at": "2018-08-15T12:22:50Z",
    "updated_at": "2025-01-14T09:41:46Z",
    "pushed_at": "2025-01-13T07:21:34Z",
    "size": 382953,
    "stars": 14720,
    "forks": 2136,
    "open_issues": 35,
    "watchers": 14720,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-v3.3",
      "release-v4.0",
      "release-v4.1",
      "release-v4.2",
      "release-v4.3",
      "release-v4.4"
    ],
    "languages": {
      "TypeScript": 5144608,
      "Go": 3052787,
      "Makefile": 129571,
      "Shell": 106797,
      "Smarty": 63673,
      "Dockerfile": 46246,
      "SCSS": 45806,
      "JavaScript": 30768,
      "CSS": 20587,
      "PowerShell": 3525,
      "HCL": 2777,
      "HTML": 2353
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:01:51.086089"
  }
}