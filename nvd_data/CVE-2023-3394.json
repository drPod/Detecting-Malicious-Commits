{
  "cve_id": "CVE-2023-3394",
  "github_data": {
    "repository": "fossbilling/fossbilling",
    "fix_commit": "b9c35a174750f1463aea86168524efce6cd48ef7",
    "related_commits": [
      "b9c35a174750f1463aea86168524efce6cd48ef7",
      "b9c35a174750f1463aea86168524efce6cd48ef7"
    ],
    "patch_url": "https://github.com/fossbilling/fossbilling/commit/b9c35a174750f1463aea86168524efce6cd48ef7.patch",
    "fix_commit_details": {
      "sha": "b9c35a174750f1463aea86168524efce6cd48ef7",
      "commit_date": "2023-06-19T11:14:29Z",
      "author": {
        "login": "BelleNottelling",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Replace Box_Session and improve session handling (#1332)",
        "length": 499,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 587,
        "additions": 381,
        "deletions": 206
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -22,6 +22,8 @@\n [![CodeFactor](https://www.codefactor.io/repository/github/FOSSBilling/FOSSBilling/badge)](https://www.codefactor.io/repository/github/fossbilling/fossbilling)\n [![Financial Contributors](https://opencollective.com/FOSSBilling/tiers/badge.svg?color=brightgreen)](https://opencollective.com/fossbilling)\n [![Crowdin](https://badges.crowdin.net/e/c70c78b4ab1e71424ce53dcf6bca9b12/localized.svg)](https://fossbilling.crowdin.com/FOSSBilling)\n+[![huntr](https://cdn.huntr.dev/huntr_security_badge_mono.svg)](https://huntr.dev/repos/fossbilling/fossbilling/)\n+\n </div>\n \n > **Warning**"
        },
        {
          "filename": "SECURITY.md",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4,7 +4,8 @@\n \n | Version | Supported          |\n | ------- | ------------------ |\n-| 0.4.x   | :white_check_mark: |\n+| 0.5.x   | :white_check_mark: |\n+| 0.4.x   | :x: |\n | 0.3.x   | :x: |\n | 0.2.x   | :x: |\n | 0.1.x   | :x: |"
        },
        {
          "filename": "cspell.json",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -226,7 +226,6 @@\n         \"gugl\",\n         \"cclogin\",\n         \"CURDATE\",\n-        \"BOXCLR\",\n         \"vatnum\",\n         \"caid\",\n         \"ECB's\",\n@@ -338,7 +337,9 @@\n         \"autoloader\",\n         \"qwertyuiopasdfghjklzxccvbnm\",\n         \"QWERTYUIOPASDFGHJKLZXCVBNM\",\n-        \"subkeys\"\n+        \"subkeys\",\n+        \"httponly\",\n+        \"samesite\"\n     ],\n     \"ignorePaths\": [\n         \"tests/**\","
        },
        {
          "filename": "src/di.php",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -224,15 +224,20 @@\n  *\n  * @param void\n  *\n- * @return \\Box_Session\n+ * @return \\FOSSBilling\\Session\n  */\n $di['session'] = function () use ($di) {\n     $handler = new PdoSessionHandler($di['pdo']);\n-    $mode = (isset($di['config']['security']['mode'])) ? $di['config']['security']['mode'] : 'strict';\n-    $lifespan = (isset($di['config']['security']['cookie_lifespan'])) ? $di['config']['security']['cookie_lifespan'] : 7200;\n-    $secure = (isset($di['config']['security']['force_https'])) ? $di['config']['security']['force_https'] : true;\n \n-    return new Box_Session($handler, $mode, $lifespan, $secure);\n+    $mode = $di['config']['security']['mode'] ?? 'strict';\n+    $lifespan = $di['config']['security']['cookie_lifespan'] ?? 7200;\n+    $secure = $di['config']['security']['force_https'] ?? true;\n+\n+    $session = new \\FOSSBilling\\Session($handler, $mode, $lifespan, $secure);\n+    $session->setDi($di);\n+    $session->setupSession();\n+\n+    return $session;\n };\n \n /*"
        },
        {
          "filename": "src/install/sql/content.sql",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -316,7 +316,7 @@ LOCK TABLES `setting` WRITE;\n \n INSERT INTO `setting` (`id`, `param`, `value`, `public`, `category`, `hash`, `created_at`, `updated_at`)\n VALUES\n-\t(1,'last_patch','33',0,NULL,NULL,'2022-12-01 12:00:00','2022-12-01 12:00:00'),\n+\t(1,'last_patch','34',0,NULL,NULL,'2022-12-01 12:00:00','2022-12-01 12:00:00'),\n \t(2,'company_name','Company Name',0,NULL,NULL,'2022-12-01 12:00:00','2022-12-01 12:00:00'),\n \t(3,'company_email','company@email.com',0,NULL,NULL,'2022-12-01 12:00:00','2022-12-01 12:00:00'),\n \t(4,'company_signature','FOSSBilling.org - Client Management, Invoice and Support Software',0,NULL,NULL,'2022-12-01 12:00:00','2022-12-01 12:00:00'),"
        },
        {
          "filename": "src/install/sql/structure.sql",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1145,6 +1145,7 @@ CREATE TABLE `session` (\n   `id` varchar(32) NOT NULL DEFAULT '',\n   `modified_at` int(11) DEFAULT NULL,\n   `content` text,\n+  `fingerprint` text,\n   UNIQUE KEY `unique_id` (`id`)\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;"
        },
        {
          "filename": "src/library/Box/Session.php",
          "status": "removed",
          "additions": 0,
          "deletions": 88,
          "patch": "@@ -1,88 +0,0 @@\n-<?php\n-/**\n- * Copyright 2022-2023 FOSSBilling\n- * Copyright 2011-2021 BoxBilling, Inc.\n- * SPDX-License-Identifier: Apache-2.0\n- *\n- * @copyright FOSSBilling (https://www.fossbilling.org)\n- * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n- */\n-\n-class Box_Session\n-{\n-    public function setRandomId()\n-    {\n-        $id = random_bytes(64);\n-        session_id($id);\n-    }\n-\n-\n-    public function __construct($handler, $securityMode = 'regular', $cookieLifespan = 7200, $secure = true)\n-    {\n-        if (!headers_sent()) {\n-            session_set_save_handler(\n-                array($handler, 'open'),\n-                array($handler, 'close'),\n-                array($handler, 'read'),\n-                array($handler, 'write'),\n-                array($handler, 'destroy'),\n-                array($handler, 'gc')\n-            );\n-        }\n-        if (php_sapi_name() !== 'cli') {\n-            $currentCookieParams = session_get_cookie_params();\n-            $currentCookieParams[\"httponly\"] = true;\n-            $currentCookieParams[\"lifetime\"] = $cookieLifespan;\n-            $currentCookieParams[\"secure\"] = $secure;\n-\n-            if ($securityMode == 'strict') {\n-                session_set_cookie_params([\n-                    'lifetime' => $currentCookieParams[\"lifetime\"],\n-                    'path' => $currentCookieParams[\"path\"],\n-                    'domain' => $currentCookieParams[\"domain\"],\n-                    'secure' => $currentCookieParams[\"secure\"],\n-                    'httponly' => $currentCookieParams[\"httponly\"],\n-                    'samesite' => 'Strict'\n-                ]);\n-                // TODO: Adjust the DB to support 64 character long session IDs\n-                // Currently adjusting it causing issues within this file: https://github.com/FOSSBilling/FOSSBilling/blob/main/src/library/PdoSessionHandler.php\n-                //$this->setRandomId();\n-            } else {\n-                session_set_cookie_params(\n-                    $currentCookieParams[\"lifetime\"],\n-                    $currentCookieParams[\"path\"],\n-                    $currentCookieParams[\"domain\"],\n-                    $currentCookieParams[\"secure\"],\n-                    $currentCookieParams[\"httponly\"]\n-                );\n-            }\n-\n-            session_start();\n-        }\n-    }\n-\n-    public function getId()\n-    {\n-        return session_id();\n-    }\n-\n-    public function delete($key)\n-    {\n-        unset($_SESSION[$key]);\n-    }\n-\n-    public function get($key)\n-    {\n-        return isset($_SESSION[$key]) ? $_SESSION[$key] : null;\n-    }\n-\n-    public function set($key, $value)\n-    {\n-        $_SESSION[$key] = $value;\n-    }\n-\n-    public function destroy()\n-    {\n-        session_destroy();\n-    }\n-}"
        },
        {
          "filename": "src/library/FOSSBilling/Fingerprint.php",
          "status": "added",
          "additions": 163,
          "deletions": 0,
          "patch": "@@ -0,0 +1,163 @@\n+<?php\n+declare(strict_types=1);\n+/**\n+ * Copyright 2022-2023 FOSSBilling\n+ * Copyright 2011-2021 BoxBilling, Inc.\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ * @copyright FOSSBilling (https://www.fossbilling.org)\n+ * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n+ */\n+\n+namespace FOSSBilling;\n+\n+class Fingerprint\n+{\n+    private array $fingerprintProperties;\n+\n+    public function __construct()\n+    {\n+        $agentDetails = $this->extractAgentInfo();\n+\n+        /**\n+         * Sets up the fingerprint info for the existing request.\n+         * 'weight' is used to weigh specific parameters.\n+         *      Example: The agent string has a weight of 2, one failure from it equal as 2 failures of other properties.\n+         *      By doing this, we can prevent minor changes such as a browser update from requiring the user to re-authenticate.\n+         *      But it does mean that if the that property and one-or-two other ones fail, the user will need to re-authenticate.\n+         */\n+        $this->fingerprintProperties = [\n+            'agentString' => [\n+                'source' => $agentDetails['userAgent'],\n+                'weight' => 2,\n+            ],\n+            'browser' => [\n+                'source' => $agentDetails['browser'],\n+                'weight' => 100, // Always fail if this doesn't match.\n+            ],\n+            'browserVersion' => [\n+                'source' => $agentDetails['browserVersion'],\n+                'weight' => 1,\n+            ],\n+            'os' => [\n+                'source' => $agentDetails['os'],\n+                'weight' => 100, // Always fail if this doesn't match.\n+            ],\n+            'ip' => [\n+                'source' => $_SERVER['REMOTE_ADDR'] ?? '',\n+                'weight' => 3,\n+            ],\n+            'referrer' => [\n+                'source' => $_SERVER['HTTP_REFERER'] ?? '',\n+                'weight' => 1,\n+            ],\n+            'forwardedFor' => [\n+                'source' => $_SERVER['HTTP_X_FORWARDED_FOR'] ?? '',\n+                'weight' => 3,\n+            ],\n+            'language' => [\n+                'source' => $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? '',\n+                'weight' => 2,\n+            ],\n+            'encoding' => [\n+                'source' => $_SERVER['HTTP_ACCEPT_ENCODING'] ?? '',\n+                'weight' => 1,\n+            ],\n+            'upgradeRequests' => [\n+                'source' => $_SERVER['HTTP_UPGRADE_INSECURE_REQUESTS'] ?? '',\n+                'weight' => 1,\n+            ],\n+        ];\n+    }\n+\n+    /**\n+     * Generates a fingerprint for the device that made the request to the server\n+     */\n+    public function fingerprint(): array\n+    {\n+        $fingerprint = [];\n+\n+        foreach ($this->fingerprintProperties as $name => $properties) {\n+            if (!empty($properties['source'])) {\n+                $fingerprint[$name] = hash('md5', $properties['source']);\n+            }\n+        }\n+\n+        return $fingerprint;\n+    }\n+\n+    /**\n+     * Compares a provided fingerprint against one generated for the device that made the request to the server.\n+     * This function creates a baseline \"score\" with the total of properties in the fingerprint. The final score must be at least half of the baseline.\n+     *      - Each property can define a weight. For example, if the IP address doesn't match and the weight is set to 3, 3 will be selected from the total.\n+     *          - This means with a total of 9 properties, the IP address being wrong would effectively be weighted as 3 properties and only two more differing properties will make it fail the check.\n+     *      - If any property is found in one of the fingerprints and not the other, the baseline is incremented and the final score is decreased by it's weight.\n+     */\n+    public function checkFingerprint(array $fingerprint): bool\n+    {\n+        $itemCount = 0;\n+        $scoreSubtract = 0;\n+\n+        foreach ($this->fingerprintProperties as $name => $properties) {\n+            $exitsInFingerprint = array_key_exists($name, $fingerprint);\n+            $exitsInCurrentFingerprint = !empty($properties['source']);\n+\n+            if ((!$exitsInFingerprint && $exitsInCurrentFingerprint) || ($exitsInFingerprint && !$exitsInCurrentFingerprint)) {\n+                //The property exists in one fingerprint and not the other, so we increment the total count and deduct from the score.\n+                $itemCount++;\n+                $scoreSubtract += $properties['weight'];\n+            } elseif (!$exitsInFingerprint && !$exitsInCurrentFingerprint) {\n+                // Do nothing in this case, as the property isn't in either fingerprint.\n+            } else {\n+                $itemCount++;\n+                $hashedData = hash('md5', $properties['source']);\n+\n+                if ($fingerprint[$name] !== $hashedData) {\n+                    $scoreSubtract += $properties['weight'];\n+                }\n+            }\n+        }\n+\n+        // Remove the total score from the total number of items. The final score must be at least half the number of properties in order for the fingerprint to be considered valid.\n+        $finalScore = $itemCount - $scoreSubtract;\n+        return $finalScore >= ($itemCount / 2);\n+    }\n+\n+    private function extractAgentInfo(): array\n+    {\n+        $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? '';\n+\n+        // Extract the browser name\n+        if (preg_match('/(?:Chrome|CriOS)\\/([0-9\\.]+)/', $userAgent, $matches)) {\n+            $browser = 'Chrome';\n+            $version = $matches[1];\n+        } elseif (preg_match('/Firefox\\/([0-9\\.]+)/', $userAgent, $matches)) {\n+            $browser = 'Firefox';\n+            $version = $matches[1];\n+        } elseif (preg_match('/Safari\\/([0-9\\.]+)/', $userAgent, $matches)) {\n+            $browser = 'Safari';\n+            $version = $matches[1];\n+        } else {\n+            $browser = 'Unknown';\n+            $version = 'Unknown';\n+        }\n+\n+        // Extract the operating system\n+        if (preg_match('/Windows NT ([0-9\\.]+)/', $userAgent, $matches)) {\n+            $os = 'Windows NT ' . $matches[1];\n+        } elseif (preg_match('/Mac OS X ([0-9_]+)/', $userAgent, $matches)) {\n+            $os = 'Mac OS X';\n+        } elseif (preg_match('/Linux/', $userAgent)) {\n+            $os = 'Linux';\n+        } else {\n+            $os = 'Unknown';\n+        }\n+\n+        return [\n+            'browser' => $browser,\n+            'browserVersion' => $version,\n+            'os' => $os,\n+            'userAgent' => $userAgent,\n+        ];\n+    }\n+}"
        },
        {
          "filename": "src/library/FOSSBilling/Session.php",
          "status": "added",
          "additions": 155,
          "deletions": 0,
          "patch": "@@ -0,0 +1,155 @@\n+<?php\n+declare(strict_types=1);\n+/**\n+ * Copyright 2022-2023 FOSSBilling\n+ * Copyright 2011-2021 BoxBilling, Inc.\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ * @copyright FOSSBilling (https://www.fossbilling.org)\n+ * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n+ */\n+\n+namespace FOSSBilling;\n+\n+class Session implements \\FOSSBilling\\InjectionAwareInterface\n+{\n+    private ?\\Pimple\\Container $di;\n+    private \\PdoSessionHandler $handler;\n+    private string $securityMode;\n+    private int $cookieLifespan;\n+    private bool $secure;\n+\n+    public function setDi(\\Pimple\\Container|null $di): void\n+    {\n+        $this->di = $di;\n+    }\n+\n+    public function getDi(): ?\\Pimple\\Container\n+    {\n+        return $this->di;\n+    }\n+\n+    public function __construct(\\PdoSessionHandler $handler, string $securityMode = 'regular', int $cookieLifespan = 7200, bool $secure = true)\n+    {\n+        $this->handler = $handler;\n+        $this->securityMode = $securityMode;\n+        $this->cookieLifespan = $cookieLifespan;\n+        $this->secure = $secure;\n+    }\n+\n+    public function setupSession()\n+    {\n+        if (php_sapi_name() === 'cli') {\n+            return;\n+        }\n+\n+        $this->canUseSession();\n+\n+        if (!headers_sent()) {\n+            session_set_save_handler(\n+                [$this->handler, 'open'],\n+                [$this->handler, 'close'],\n+                [$this->handler, 'read'],\n+                [$this->handler, 'write'],\n+                [$this->handler, 'destroy'],\n+                [$this->handler, 'gc']\n+            );\n+        }\n+\n+        $currentCookieParams = session_get_cookie_params();\n+        $currentCookieParams[\"httponly\"] = true;\n+        $currentCookieParams[\"lifetime\"] = $this->cookieLifespan;\n+        $currentCookieParams[\"secure\"] = $this->secure;\n+\n+        $cookieParams = [\n+            'lifetime' => $currentCookieParams[\"lifetime\"],\n+            'path' => $currentCookieParams[\"path\"],\n+            'domain' => $currentCookieParams[\"domain\"],\n+            'secure' => $currentCookieParams[\"secure\"],\n+            'httponly' => $currentCookieParams[\"httponly\"]\n+        ];\n+\n+        if ($this->securityMode == 'strict') {\n+            $cookieParams['samesite'] = 'Strict';\n+        }\n+\n+        session_set_cookie_params($cookieParams);\n+        session_start();\n+\n+        $this->updateFingerprint();\n+    }\n+\n+    public function getId(): string\n+    {\n+        return session_id();\n+    }\n+\n+    public function delete(string $key): void\n+    {\n+        unset($_SESSION[$key]);\n+    }\n+\n+    public function get(string $key): mixed\n+    {\n+        return $_SESSION[$key] ?? null;\n+    }\n+\n+    public function set(string $key, mixed $value): void\n+    {\n+        $_SESSION[$key] = $value;\n+    }\n+\n+    public function destroy(string $type = ''): bool\n+    {\n+        switch ($type) {\n+            case 'admin':\n+                $this->delete('admin');\n+                break;\n+            case 'client':\n+                $this->delete('client');\n+                $this->delete('client_id');\n+                break;\n+        }\n+\n+        return session_destroy();\n+    }\n+\n+    /**\n+     * Checks both the fingerprint and age of the current session to see if it can be used.\n+     * If the session can't be used, it's destroyed from the database, forcing a new one to be created.\n+     */\n+    private function canUseSession():void\n+    {\n+        if (empty($_COOKIE['PHPSESSID'])) {\n+            return;\n+        }\n+\n+        $sessionID = $_COOKIE['PHPSESSID'];\n+        $maxAge = time() - $this->di['config']['security']['cookie_lifespan'];\n+\n+        $fingerprint = new \\FOSSBilling\\Fingerprint;\n+        $session = $this->di['db']->findOne('session', 'id = :id', [':id' => $sessionID]);\n+\n+        if (empty($session->fingerprint)) {\n+            return;\n+        }\n+\n+        if (!$fingerprint->checkFingerprint(json_decode($session->fingerprint, true)) || $session->modified_at <= $maxAge) {\n+            $this->di['db']->trash($session);\n+            unset($_COOKIE['PHPSESSID']);\n+        }\n+    }\n+\n+    /**\n+     * Depending on the specifics, this will either set or update the fingerprint associated with the current session.\n+     */\n+    private function updateFingerprint():void\n+    {\n+        $sessionID = $_COOKIE['PHPSESSID'] ?? session_id();\n+        $session = $this->di['db']->findOne('session', 'id = :id', [':id' => $sessionID]);\n+\n+        $fingerprint = new \\FOSSBilling\\Fingerprint;\n+        $session->fingerprint = json_encode($fingerprint->fingerprint());\n+        $this->di['db']->store($session);\n+    }\n+}"
        },
        {
          "filename": "src/library/FOSSBilling/UpdatePatcher.php",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -276,7 +276,12 @@ private function getPatches($patchLevel = 0): array\n                     __DIR__ . DIRECTORY_SEPARATOR . 'library' . DIRECTORY_SEPARATOR . 'FileCache.php' => 'unlink',\n                 ];\n                 $this->executeFileActions($fileActions);\n-            }\n+            },\n+            34 => function() {\n+                // Adds the new \"fingerprint\" to the session table, to allow us to fingerprint devices and help prevent against attacks such as session hijacking.\n+                $q = \"ALTER TABLE session ADD fingerprint TEXT;\";\n+                $this->executeSql($q);\n+            },\n         ];\n         ksort($patches, SORT_NATURAL);\n "
        },
        {
          "filename": "src/modules/Client/Api/Guest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 6,
          "patch": "@@ -136,14 +136,9 @@ public function login($data)\n             throw new \\Box_Exception('Please check your login details.', [], 401);\n         }\n \n-        if (isset($data['remember'])) {\n-            $email = $data['email'];\n-            $cookie_time = (3600 * 24 * 30); // 30 days\n-            setcookie('BOXCLR', 'e=' . base64_encode($email) . '&p=' . base64_encode($client->pass), time() + $cookie_time, '/');\n-        }\n-\n         $this->di['events_manager']->fire(['event' => 'onAfterClientLogin', 'params' => ['id' => $client->id, 'ip' => $this->ip]]);\n \n+        session_regenerate_id();\n         $result = $service->toSessionArray($client);\n         $this->di['session']->set('client_id', $client->id);\n "
        },
        {
          "filename": "src/modules/Cron/Service.php",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -70,6 +70,9 @@ public function runCrons($interval = null)\n         $ss = $this->di['mod_service']('system');\n         $ss->setParamValue('last_cron_exec', date('Y-m-d H:i:s'), $create);\n \n+        $this->clearOldSessions();\n+        $this->di['logger']->setChannel('cron')->info('Cleared outdated sessions from the database');\n+\n         $this->di['events_manager']->fire(['event' => 'onAfterAdminCronRun']);\n \n         $this->di['logger']->setChannel('cron')->info('Finished executing cron jobs');\n@@ -111,4 +114,15 @@ public function isLate()\n \n         return $t1 < $t2;\n     }\n+\n+    private function clearOldSessions()\n+    {\n+        $sessions = $this->di['db']->findAll('session');\n+        foreach ($sessions as $session){\n+            $maxAge = time() - $this->di['config']['security']['cookie_lifespan'];\n+            if($session->modified_at <= $maxAge){\n+                $this->di['db']->trash($session);\n+            }\n+        }\n+    }\n }"
        },
        {
          "filename": "src/modules/Profile/Api/Admin.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -52,7 +52,7 @@ public function get()\n     public function logout()\n     {\n         unset($_COOKIE['BOXADMR']);\n-        $this->di['session']->delete('admin');\n+        $this->di['session']->destroy('admin');\n         $this->di['logger']->info('Admin logged out');\n \n         return true;"
        },
        {
          "filename": "src/modules/Profile/Service.php",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -217,11 +217,7 @@ public function changeClientPassword(\\Model_Client $client, $new_password)\n \n     public function logoutClient()\n     {\n-        if ($_COOKIE) { // testing env fix\n-            setcookie('BOXCLR', '', time() - 3600, '/');\n-        }\n-        $this->di['session']->delete('client');\n-        $this->di['session']->delete('client_id');\n+        $this->di['session']->destroy('client');\n         $this->di['logger']->info('Logged out');\n \n         return true;"
        },
        {
          "filename": "src/modules/Staff/Service.php",
          "status": "modified",
          "additions": 1,
          "deletions": 28,
          "patch": "@@ -50,6 +50,7 @@ public function login($email, $password, $ip)\n             'role' => $model->role,\n         ];\n \n+        session_regenerate_id();\n         $this->di['session']->set('admin', $result);\n \n         $this->di['logger']->info(sprintf('Staff member %s logged in', $model->id));\n@@ -498,8 +499,6 @@ public function createAdmin(array $data)\n         $newId = $this->di['db']->store($admin);\n \n         $this->di['logger']->info('Main administrator %s account created', $admin->email);\n-        $this->_sendMail($admin, $data['password']);\n-\n         $data['remember'] = true;\n \n         return $newId;\n@@ -649,32 +648,6 @@ public function deleteLoginHistory(\\Model_ActivityAdminHistory $model)\n         return true;\n     }\n \n-    protected function _sendMail($admin, $admin_pass)\n-    {\n-        $admin_name = $admin->name;\n-        $admin_email = $admin->email;\n-\n-        $client_url = $this->di['url']->link('/');\n-        $admin_url = $this->di['url']->adminLink('/');\n-\n-        $content = \"Hello, $admin_name. \" . PHP_EOL;\n-        $content .= 'You have successfully installed FOSSBilling at ' . BB_URL . PHP_EOL;\n-        $content .= 'Access the client area at: ' . $client_url . PHP_EOL;\n-        $content .= 'Access the admin area at: ' . $admin_url . ' with login details:' . PHP_EOL;\n-        $content .= 'Email: ' . $admin_email . PHP_EOL;\n-        $content .= 'Password: ' . $admin_pass . PHP_EOL . PHP_EOL;\n-\n-        $content .= 'Read the FOSSBilling documentation to get started https://fossbilling.org/docs' . PHP_EOL;\n-        $content .= 'Thank you for using FOSSBilling.' . PHP_EOL;\n-\n-        $subject = sprintf('FOSSBilling is ready at \"%s\"', BB_URL);\n-\n-        $systemService = $this->di['mod_service']('system');\n-        $from = $systemService->getParamValue('company_email');\n-        $emailService = $this->di['mod_service']('Email');\n-        $emailService->sendMail($admin_email, $from, $subject, $content);\n-    }\n-\n     public function authorizeAdmin($email, $plainTextPassword)\n     {\n         $model = $this->di['db']->findOne('Admin', 'email = ? AND status = ?', [$email, \\Model_Admin::STATUS_ACTIVE]);"
        },
        {
          "filename": "tests/integration/bb-library/Box/DiTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@ public function testInjector()\n         $this->assertInstanceOf('Box_Url', $di['url']);\n         $this->assertInstanceOf('Box_EventManager', $di['events_manager']);\n \n-        $this->assertInstanceOf('\\Box_Session', $di['session']);\n+        $this->assertInstanceOf('\\FOSSBilling\\Session', $di['session']);\n         $this->assertInstanceOf('Box_Authorization', $di['auth']);\n         $this->assertInstanceOf('Twig\\Environment', $di['twig']);\n         $this->assertInstanceOf('\\FOSSBilling\\Tools', $di['tools']);"
        },
        {
          "filename": "tests/library/Box/Box_SessionTest.php",
          "status": "removed",
          "additions": 0,
          "deletions": 35,
          "patch": "@@ -1,35 +0,0 @@\n-<?php\n-/**\n- * @group Core\n- */\n-class Box_SessionTest extends PHPUnit\\Framework\\TestCase\n-{\n-    public function testSession()\n-    {\n-        $mock = $this->getMockBuilder(\"\\Box_Session\")\n-            ->disableOriginalConstructor()\n-            ->getMock();\n-\n-        $mock->expects($this->atLeastOnce())\n-            ->method(\"getId\")\n-            ->will($this->returnValue(\"rrcpqo7tkjh14d2vmf0car64k7\"));\n-\n-        $mock->expects($this->atLeastOnce())\n-            ->method(\"get\")\n-            ->will($this->returnValue(\"testValue\"));\n-\n-        $mock->expects($this->atLeastOnce())\n-            ->method(\"delete\")\n-            ->will($this->returnValue(true));\n-\n-        $this->assertEquals($mock->getId(), 'rrcpqo7tkjh14d2vmf0car64k7', 'Session ID is not equal');\n-\n-        $this->assertEquals($mock->get('testKey'), 'testValue', 'The value is not equal to the one which was set');\n-\n-        $this->assertEquals($mock->delete('testKey'), true);\n-\n-        $this->assertEquals($mock->set('testKey', 'testValue'), null, 'The value is not equal to the one which was set');\n-\n-        $this->assertEquals($mock->destroy(), null, 'Session destroy did not return true');\n-    }\n-}\n\\ No newline at end of file"
        },
        {
          "filename": "tests/modules/Cart/ServiceTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -51,7 +51,7 @@ public function testGetSessionCartExists()\n             ->method('findOne')\n             ->will($this->returnValue($model));\n \n-        $sessionMock = $this->getMockBuilder(\"\\Box_Session\")\n+        $sessionMock = $this->getMockBuilder(\"\\FOSSBilling\\Session\")\n             ->disableOriginalConstructor()\n             ->getMock();\n         $sessionMock->expects($this->atLeastOnce())\n@@ -111,7 +111,7 @@ public function testGetSessionCartDoesNotExist($sessionGetWillReturn, $getCurren\n             ->method('store')\n             ->will($this->returnValue(rand(1, 100)));\n \n-        $sessionMock = $this->getMockBuilder(\"\\Box_Session\")\n+        $sessionMock = $this->getMockBuilder(\"\\FOSSBilling\\Session\")\n             ->disableOriginalConstructor()\n             ->getMock();\n         $sessionMock->expects($this->atLeastOnce())"
        },
        {
          "filename": "tests/modules/Client/Api/AdminTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -109,7 +109,7 @@ public function testlogin()\n         $serviceMock->expects($this->atLeastOnce())->\n         method('toSessionArray')->will($this->returnValue($sessionArray));\n \n-        $sessionMock = $this->getMockBuilder('\\Box_Session')->disableOriginalConstructor()->getMock();\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')->disableOriginalConstructor()->getMock();\n         $sessionMock->expects($this->atLeastOnce())->\n         method('set');\n "
        },
        {
          "filename": "tests/modules/Client/Api/GuestTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -188,7 +188,7 @@ public function testlogin()\n         $eventMock->expects($this->atLeastOnce())->\n             method('fire');\n \n-        $sessionMock = $this->getMockBuilder('\\Box_Session')\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')\n             ->disableOriginalConstructor()\n             ->getMock();\n "
        },
        {
          "filename": "tests/modules/Cron/ServiceTest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -61,13 +61,19 @@ public function testrunCrons()\n         $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n         $eventsMock->expects($this->atLeastOnce())\n             ->method('fire');\n+        \n+        $dbMock = $this->getMockBuilder('Box_Database')->getMock();\n+        $dbMock->expects($this->atLeastOnce())\n+            ->method('findAll')\n+            ->will($this->returnValue([]));\n \n         $di = new \\Pimple\\Container();\n         $di['logger'] = new \\Box_Log();\n         $di['events_manager'] = $eventsMock;\n         $di['api_system'] = $apiSystem;\n         $di['mod_service'] = $di->protect(function() use($systemServiceMock) {return $systemServiceMock;});\n         $serviceMock->setDi($di);\n+        $di['db'] = $dbMock;\n \n         $result = $serviceMock->runCrons();\n         $this->assertTrue($result);"
        },
        {
          "filename": "tests/modules/Profile/Api/AdminTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -41,7 +41,7 @@ public function testGet()\n \n     public function testLogout()\n     {\n-        $sessionMock = $this->getMockBuilder('\\Box_Session')\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')\n             ->disableOriginalConstructor()\n             ->getMock();\n "
        },
        {
          "filename": "tests/modules/Profile/ServiceTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -378,12 +378,12 @@ public function testChangeClientPassword()\n \n     public function testLogoutClient()\n     {\n-        $sessionMock = $this->getMockBuilder(\"\\Box_Session\")\n+        $sessionMock = $this->getMockBuilder(\"\\FOSSBilling\\Session\")\n             ->disableOriginalConstructor()\n             ->getMock();\n \n         $sessionMock->expects($this->atLeastOnce())\n-            ->method(\"delete\");\n+            ->method(\"destroy\");\n \n         $di            = new \\Pimple\\Container();\n         $di['logger']  = new \\Box_Log();"
        },
        {
          "filename": "tests/modules/Staff/ServiceTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 21,
          "patch": "@@ -41,7 +41,7 @@ public function testLogin()\n             ->method('findOne')\n             ->will($this->returnValue($admin));\n \n-        $sessionMock = $this->getMockBuilder('\\Box_Session')\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')\n             ->disableOriginalConstructor()\n             ->getMock();\n         $sessionMock->expects($this->atLeastOnce())\n@@ -1174,21 +1174,6 @@ public function testcreateAdmin()\n         $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n \n         $systemService = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n-        $systemService->expects($this->atLeastOnce())\n-            ->method('getParamValue');\n-\n-        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n-        $emailServiceMock->expects($this->atLeastOnce())\n-            ->method('sendMail');\n-\n-        $urlMock = $this->getMockBuilder('\\Box_Url')->getMock();\n-        $urlMock->expects($this->atLeastOnce())\n-            ->method('link')\n-            ->willReturn('');\n-        $urlMock->expects($this->atLeastOnce())\n-            ->method('adminLink')\n-            ->willReturn('');\n-\n \n         $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n         $passwordMock->expects($this->atLeastOnce())\n@@ -1198,15 +1183,11 @@ public function testcreateAdmin()\n         $di                = new \\Pimple\\Container();\n         $di['logger']      = $logMock;\n         $di['db']          = $dbMock;\n-        $di['mod_service'] = $di->protect(function ($serviceName) use ($systemService, $emailServiceMock) {\n+        $di['mod_service'] = $di->protect(function ($serviceName) use ($systemService) {\n             if ('system' == $serviceName) {\n                 return $systemService;\n             }\n-            if ('Email' == $serviceName) {\n-                return $emailServiceMock;\n-            }\n         });\n-        $di['url']         = $urlMock;\n         $di['password']    = $passwordMock;\n \n         $service = new \\Box\\Mod\\Staff\\Service();"
        },
        {
          "filename": "tests/modules/System/ServiceTest.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -334,7 +334,7 @@ public function testgetPendingMessages()\n     {\n         $di = new \\Pimple\\Container();\n \n-        $sessionMock = $this->getMockBuilder('\\Box_Session')->disableOriginalConstructor()->getMock();\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')->disableOriginalConstructor()->getMock();\n         $sessionMock->expects($this->atLeastOnce())\n             ->method('get')\n             ->with('pending_messages')\n@@ -351,7 +351,7 @@ public function testgetPendingMessages_GetReturnsNotArray()\n     {\n         $di = new \\Pimple\\Container();\n \n-        $sessionMock = $this->getMockBuilder('\\Box_Session')->disableOriginalConstructor()->getMock();\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')->disableOriginalConstructor()->getMock();\n         $sessionMock->expects($this->atLeastOnce())\n             ->method('get')\n             ->with('pending_messages')\n@@ -375,7 +375,7 @@ public function testsetPendingMessage()\n \n         $di = new \\Pimple\\Container();\n \n-        $sessionMock = $this->getMockBuilder('\\Box_Session')->disableOriginalConstructor()->getMock();\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')->disableOriginalConstructor()->getMock();\n         $sessionMock->expects($this->atLeastOnce())\n             ->method('set')\n             ->with('pending_messages');\n@@ -393,7 +393,7 @@ public function testclearPendingMessages()\n     {\n         $di = new \\Pimple\\Container();\n \n-        $sessionMock = $this->getMockBuilder('\\Box_Session')->disableOriginalConstructor()->getMock();\n+        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')->disableOriginalConstructor()->getMock();\n         $sessionMock->expects($this->atLeastOnce())\n             ->method('delete')\n             ->with('pending_messages');"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 10,
        "unique_directories": 19,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d881a77d84fd1029400ff06fa45bfcb7e6785df4",
            "date": "2025-01-14T05:07:56Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "aabae0a37f30fb8d3072c8715ee3e93f54c88316",
            "date": "2025-01-14T01:18:09Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "a37f24fc10e69f0f933b370ab4c3643f5d2ba510",
            "date": "2025-01-13T00:43:31Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "3bc7b3f3f75b0aed98bc5f4bb82c2528a84d0703",
            "date": "2025-01-12T01:16:39Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "66b419662e37815937a21aeb9ddaee4ded0006db",
            "date": "2025-01-09T20:43:52Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-384",
    "description": "Session Fixation in GitHub repository fossbilling/fossbilling prior to 0.5.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-23T19:15:09.860",
    "last_modified": "2024-11-21T08:17:10.593",
    "fix_date": "2023-06-19T11:14:29Z"
  },
  "references": [
    {
      "url": "https://github.com/fossbilling/fossbilling/commit/b9c35a174750f1463aea86168524efce6cd48ef7",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/84bf3e85-cdeb-4b8d-9ea4-74156dbda83f",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fossbilling/fossbilling/commit/b9c35a174750f1463aea86168524efce6cd48ef7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/84bf3e85-cdeb-4b8d-9ea4-74156dbda83f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.860688",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "FOSSBilling",
    "owner": "fossbilling",
    "created_at": "2022-05-18T07:13:32Z",
    "updated_at": "2025-01-14T09:45:22Z",
    "pushed_at": "2025-01-14T09:47:32Z",
    "size": 115592,
    "stars": 914,
    "forks": 199,
    "open_issues": 201,
    "watchers": 914,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 3692953,
      "Twig": 1520070,
      "JavaScript": 70601,
      "HTML": 14354,
      "SCSS": 5514,
      "CSS": 1801,
      "Dockerfile": 830,
      "Shell": 400
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:51:02.524915"
  }
}