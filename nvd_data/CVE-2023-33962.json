{
  "cve_id": "CVE-2023-33962",
  "github_data": {
    "repository": "jstachio/jstachio",
    "fix_commit": "7b2f78377d1284df14c580be762a25af5f8dcd66",
    "related_commits": [
      "7b2f78377d1284df14c580be762a25af5f8dcd66",
      "7b2f78377d1284df14c580be762a25af5f8dcd66"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7b2f78377d1284df14c580be762a25af5f8dcd66",
      "commit_date": "2023-05-28T19:58:19Z",
      "author": {
        "login": "agentgt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix #157 add more aggressive html5 escaping",
        "length": 43,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 134,
        "additions": 113,
        "deletions": 21
      },
      "files": [
        {
          "filename": "api/jstachio/src/main/java/io/jstach/jstachio/escapers/Html.java",
          "status": "modified",
          "additions": 36,
          "deletions": 7,
          "patch": "@@ -10,13 +10,42 @@\n  * Provides a mustache spec based HTML escaper which is the default in normal mustache.\n  * <p>\n  * The escaper simply escapes:\n- * <ul>\n- * <li>'&quot;'</li>\n- * <li>'&gt;'</li>\n- * <li>'&lt;'</li>\n- * <li>'&amp;'</li>\n- * </ul>\n- *\n+ * <table border=\"1\">\n+ * <caption><strong>Escape table</strong></caption>\n+ * <tr>\n+ * <th>Character</th>\n+ * <th>Escaped String</th>\n+ * </tr>\n+ * <tr>\n+ * <td>'<code>&quot;</code>'</td>\n+ * <td>{@value HtmlEscaper#QUOT}</td>\n+ * </tr>\n+ * <tr>\n+ * <td>'<code>&amp;</code>'</td>\n+ * <td>{@value HtmlEscaper#AMP}</td>\n+ * </tr>\n+ * <tr>\n+ * <td>'<code>&#x27;</code>'</td>\n+ * <td>{@value HtmlEscaper#APOS}</td>\n+ * </tr>\n+ * <tr>\n+ * <td>'<code>&lt;</code>'</td>\n+ * <td>{@value HtmlEscaper#LT}</td>\n+ * </tr>\n+ * <tr>\n+ * <td>'<code>=</code>'</td>\n+ * <td>{@value HtmlEscaper#EQUAL}</td>\n+ * </tr>\n+ * <tr>\n+ * <td>'<code>&gt;</code>'</td>\n+ * <td>{@value HtmlEscaper#GT}</td>\n+ * </tr>\n+ * <tr>\n+ * <td>'<code>&#x60;</code>'</td>\n+ * <td>{@value HtmlEscaper#BACK_TICK}</td>\n+ * </tr>\n+ * </table>\n+ * <br />\n  * <em>N.B. Unlike many XML escapers this escaper does not differentiate attribute and\n  * element content. Furthermore Mustache unlike many other templating languages is content\n  * agnostic. If more flexibile attribute escaping is needed a custom lambda could be used"
        },
        {
          "filename": "api/jstachio/src/main/java/io/jstach/jstachio/escapers/HtmlEscaper.java",
          "status": "modified",
          "additions": 41,
          "deletions": 13,
          "patch": "@@ -7,13 +7,19 @@ enum HtmlEscaper implements Escaper {\n \n \tHtml;\n \n-\tprivate static final String QUOT = \"&quot;\";\n+\tstatic final String QUOT = \"&quot;\";\n \n-\tprivate static final String GT = \"&gt;\";\n+\tstatic final String AMP = \"&amp;\";\n \n-\tprivate static final String LT = \"&lt;\";\n+\tstatic final String APOS = \"&#x27;\";\n \n-\tprivate static final String AMP = \"&amp;\";\n+\tstatic final String LT = \"&lt;\";\n+\n+\tstatic final String EQUAL = \"&#x3D;\";\n+\n+\tstatic final String GT = \"&gt;\";\n+\n+\tstatic final String BACK_TICK = \"&#x60;\";\n \n \t@Override\n \tpublic <A extends Output<E>, E extends Exception> void append(A a, CharSequence s) throws E {\n@@ -27,29 +33,42 @@ public <A extends Output<E>, E extends Exception> void append(A a, CharSequence\n \t\tfor (int i = start; i < end; i++) {\n \t\t\tchar c = csq.charAt(i);\n \t\t\tswitch (c) {\n-\t\t\t\tcase '&' -> {\n+\t\t\t\tcase '\"' -> { // 34\n+\t\t\t\t\ta.append(csq, start, i);\n+\t\t\t\t\tstart = i + 1;\n+\t\t\t\t\ta.append(QUOT);\n+\t\t\t\t}\n+\t\t\t\tcase '&' -> { // 38\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n \t\t\t\t\ta.append(AMP);\n \n \t\t\t\t}\n-\t\t\t\tcase '<' -> {\n+\t\t\t\tcase '\\'' -> { // 39\n+\t\t\t\t\ta.append(csq, start, i);\n+\t\t\t\t\tstart = i + 1;\n+\t\t\t\t\ta.append(APOS);\n+\t\t\t\t}\n+\t\t\t\tcase '<' -> { // 60\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n \t\t\t\t\ta.append(LT);\n-\n \t\t\t\t}\n-\t\t\t\tcase '>' -> {\n+\t\t\t\tcase '=' -> { // 61\n+\t\t\t\t\ta.append(csq, start, i);\n+\t\t\t\t\tstart = i + 1;\n+\t\t\t\t\ta.append(EQUAL);\n+\t\t\t\t}\n+\t\t\t\tcase '>' -> { // 62\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n \t\t\t\t\ta.append(GT);\n \t\t\t\t}\n-\t\t\t\tcase '\"' -> {\n+\t\t\t\tcase '`' -> { // 96\n \t\t\t\t\ta.append(csq, start, i);\n \t\t\t\t\tstart = i + 1;\n-\t\t\t\t\ta.append(QUOT);\n+\t\t\t\t\ta.append(BACK_TICK);\n \t\t\t\t}\n-\n \t\t\t}\n \t\t}\n \t\ta.append(csq, start, end);\n@@ -59,17 +78,26 @@ public <A extends Output<E>, E extends Exception> void append(A a, CharSequence\n \t@Override\n \tpublic <A extends Output<E>, E extends Exception> void append(A a, char c) throws E {\n \t\tswitch (c) {\n+\t\t\tcase '\"' -> {\n+\t\t\t\ta.append(QUOT);\n+\t\t\t}\n \t\t\tcase '&' -> {\n \t\t\t\ta.append(AMP);\n \t\t\t}\n+\t\t\tcase '\\'' -> {\n+\t\t\t\ta.append(APOS);\n+\t\t\t}\n \t\t\tcase '<' -> {\n \t\t\t\ta.append(LT);\n \t\t\t}\n+\t\t\tcase '=' -> {\n+\t\t\t\ta.append(EQUAL);\n+\t\t\t}\n \t\t\tcase '>' -> {\n \t\t\t\ta.append(GT);\n \t\t\t}\n-\t\t\tcase '\"' -> {\n-\t\t\t\ta.append(QUOT);\n+\t\t\tcase '`' -> {\n+\t\t\t\ta.append(BACK_TICK);\n \t\t\t}\n \t\t\tdefault -> {\n \t\t\t\ta.append(c);"
        },
        {
          "filename": "test/examples/src/test/java/io/jstach/examples/htmlescaper/HtmlEscapeTest.java",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+package io.jstach.examples.htmlescaper;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+import io.jstach.jstache.JStache;\n+\n+public class HtmlEscapeTest {\n+\n+\t@JStache(template = \"\"\"\n+\t\t\t<div alt=\"{{attr}}\">\n+\t\t\t{{body}}\n+\t\t\t</div>\n+\t\t\t\"\"\")\n+\tpublic record EscapeModel(String attr, String body) {\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testName() throws Exception {\n+\t\tvar m = new EscapeModel(\"\\\"&\\'<=>`\", \"\\\"&\\'<=>`\");\n+\t\tString actual = EscapeModelRenderer.of().execute(m);\n+\t\tString expected = \"\"\"\n+\t\t\t\t<div alt=\"&quot;&amp;&#x27;&lt;&#x3D;&gt;&#x60;\">\n+\t\t\t\t&quot;&amp;&#x27;&lt;&#x3D;&gt;&#x60;\n+\t\t\t\t</div>\n+\t\t\t\t\"\"\";\n+\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+}"
        },
        {
          "filename": "test/examples/src/test/java/io/jstach/examples/htmlescaper/package-info.java",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+@org.eclipse.jdt.annotation.NonNullByDefault\n+package io.jstach.examples.htmlescaper;\n\\ No newline at end of file"
        },
        {
          "filename": "test/examples/src/test/java/io/jstach/examples/lambda/LambdaPartialTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -26,7 +26,7 @@ public void testParent() throws Exception {\n \t\tString actual = JStachio.render(m);\n \t\tString expected = \"\"\"\n \t\t\t\tbingo\n-\t\t\t\tLambdaSectionParent[stuff=ignore]\n+\t\t\t\tLambdaSectionParent[stuff&#x3D;ignore]\n \t\t\t\t\t\t\t\t\"\"\";\n \t\tassertEquals(expected, actual);\n \t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "74b98438ea0ccf279569cc19319d059281bea020",
            "date": "2024-12-19T16:32:14Z",
            "author_login": "agentgt"
          },
          {
            "sha": "bf0d3071d1e39256ec922712e49d59a3dd2c6f00",
            "date": "2024-09-12T15:07:11Z",
            "author_login": "agentgt"
          },
          {
            "sha": "f4d4f7e94969efa71ad11b3b56a9fbc8de1e8b8f",
            "date": "2024-08-19T09:44:22Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "19b99d079ed454be34c6941dc67908c8232a3a3d",
            "date": "2024-08-07T15:57:18Z",
            "author_login": "agentgt"
          },
          {
            "sha": "4ef79be4a18685ac49b10db0fa1e038e88a007d9",
            "date": "2024-08-07T15:48:22Z",
            "author_login": "agentgt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "JStachio is a  type-safe Java Mustache templating engine. Prior to version 1.0.1, JStachio fails to escape single quotes `'` in HTML, allowing an attacker to inject malicious code. This vulnerability can be exploited by an attacker to execute arbitrary JavaScript code in the context of other users visiting pages that use this template engine. This can lead to various consequences, including session hijacking, defacement of web pages, theft of sensitive information, or even the propagation of malware.\n\nVersion 1.0.1 contains a patch for this issue. To mitigate this vulnerability, the template engine should properly escape special characters, including single quotes. Common practice is to escape `'` as `&#39`. As a workaround, users can avoid this issue by using only double quotes `\"` for HTML attributes.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-05-30T22:15:10.933",
    "last_modified": "2024-11-21T08:06:18.113",
    "fix_date": "2023-05-28T19:58:19Z"
  },
  "references": [
    {
      "url": "https://github.com/jstachio/jstachio/commit/7b2f78377d1284df14c580be762a25af5f8dcd66",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/issues/157",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/pull/158",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/releases/tag/v1.0.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/security/advisories/GHSA-gwxv-jv83-6qjr",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/commit/7b2f78377d1284df14c580be762a25af5f8dcd66",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/issues/157",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/pull/158",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/releases/tag/v1.0.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/jstachio/jstachio/security/advisories/GHSA-gwxv-jv83-6qjr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.276589",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "jstachio",
    "owner": "jstachio",
    "created_at": "2022-10-13T18:18:17Z",
    "updated_at": "2025-01-07T21:04:55Z",
    "pushed_at": "2024-12-19T16:34:21Z",
    "size": 2720,
    "stars": 273,
    "forks": 10,
    "open_issues": 28,
    "watchers": 273,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 1239441,
      "Mustache": 10630,
      "Shell": 1860,
      "Ruby": 860,
      "Smarty": 117
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:07:24.745483"
  }
}