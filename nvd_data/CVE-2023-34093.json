{
  "cve_id": "CVE-2023-34093",
  "github_data": {
    "repository": "strapi/strapi",
    "fix_commit": "2fa8f30371bfd1db44c15e5747860ee5789096de",
    "related_commits": [
      "2fa8f30371bfd1db44c15e5747860ee5789096de",
      "2fa8f30371bfd1db44c15e5747860ee5789096de"
    ],
    "patch_url": "https://github.com/strapi/strapi/commit/2fa8f30371bfd1db44c15e5747860ee5789096de.patch",
    "fix_commit_details": {
      "sha": "2fa8f30371bfd1db44c15e5747860ee5789096de",
      "commit_date": "2023-05-30T17:01:28Z",
      "author": {
        "login": "nathan-pichon",
        "type": "User",
        "stats": {
          "total_commits": 248,
          "average_weekly_commits": 0.5102880658436214,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 41
        }
      },
      "commit_message": {
        "title": "fix(content-types): remove getter for private attributes",
        "length": 105,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 47,
        "additions": 16,
        "deletions": 31
      },
      "files": [
        {
          "filename": "api-tests/core/database/transactions.test.api.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -284,7 +284,7 @@ describe('transactions', () => {\n         .where({ id: 1 })\n         .execute();\n \n-      expect(end[0].key).toEqual('strapi_content_types_schema');\n+      expect(end[0].key).toEqual(original[0].key);\n     });\n \n     test('rollback successfully', async () => {\n@@ -323,7 +323,7 @@ describe('transactions', () => {\n         .where({ id: 1 })\n         .execute();\n \n-      expect(end[0].key).toEqual('strapi_content_types_schema');\n+      expect(end[0].key).toEqual(original[0].key);\n     });\n   });\n });"
        },
        {
          "filename": "packages/core/admin/server/services/__tests__/permissions-manager.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -143,7 +143,6 @@ describe('Permissions Manager', () => {\n     global.strapi = {\n       getModel() {\n         return {\n-          privateAttributes: [],\n           attributes: {\n             title: {\n               type: 'text',"
        },
        {
          "filename": "packages/core/strapi/lib/core/domain/content-type/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 7,
          "patch": "@@ -2,7 +2,7 @@\n \n const { cloneDeep } = require('lodash/fp');\n const _ = require('lodash');\n-const { hasDraftAndPublish, getPrivateAttributes } = require('@strapi/utils').contentTypes;\n+const { hasDraftAndPublish } = require('@strapi/utils').contentTypes;\n const {\n   CREATED_AT_ATTRIBUTE,\n   UPDATED_AT_ATTRIBUTE,\n@@ -58,12 +58,6 @@ const createContentType = (uid, definition) => {\n     );\n   }\n \n-  Object.defineProperty(schema, 'privateAttributes', {\n-    get() {\n-      return getPrivateAttributes(schema);\n-    },\n-  });\n-\n   // attributes\n   Object.assign(schema.attributes, {\n     [CREATED_AT_ATTRIBUTE]: {"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-service/__tests__/entity-service-events.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -13,7 +13,6 @@ describe('Entity service triggers webhooks', () => {\n       uid: 'api::test.test',\n       kind: 'singleType',\n       modelName: 'test-model',\n-      privateAttributes: [],\n       attributes: {\n         attr: { type: 'string' },\n       },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-service/__tests__/entity-service.test.js",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -62,7 +62,7 @@ describe('Entity service', () => {\n \n       const fakeStrapi = {\n         getModel: jest.fn(() => {\n-          return { kind: 'singleType', privateAttributes: [] };\n+          return { kind: 'singleType' };\n         }),\n       };\n \n@@ -133,7 +133,6 @@ describe('Entity service', () => {\n           uid: entityUID,\n           kind: 'contentType',\n           modelName: 'test-model',\n-          privateAttributes: [],\n           options: {},\n           attributes: {\n             attrStringDefaultRequired: {\n@@ -467,7 +466,6 @@ describe('Entity service', () => {\n           modelName: 'entity',\n           collectionName: 'entity',\n           uid: entityUID,\n-          privateAttributes: [],\n           options: {},\n           info: {\n             singularName: 'entity',"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/biginteger-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('BigInteger validator', () => {\n       kind: 'contentType',\n       modelName: 'test-model',\n       uid: 'test-uid',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrBigIntegerUnique: { type: 'biginteger', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/date-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('Date validator', () => {\n       kind: 'contentType',\n       modelName: 'test-model',\n       uid: 'test-uid',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrDateUnique: { type: 'date', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/datetime-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('Datetime validator', () => {\n       kind: 'contentType',\n       modelName: 'test-model',\n       uid: 'test-uid',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrDateTimeUnique: { type: 'datetime', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/float-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('Float validator', () => {\n       kind: 'contentType',\n       uid: 'test-uid',\n       modelName: 'test-model',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrFloatUnique: { type: 'float', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/integer-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('Integer validator', () => {\n       kind: 'contentType',\n       uid: 'test-uid',\n       modelName: 'test-model',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrIntegerUnique: { type: 'integer', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/string-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('String validator', () => {\n       kind: 'contentType',\n       modelName: 'test-model',\n       uid: 'test-uid',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrStringUnique: { type: 'string', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/time-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('Time validator', () => {\n       kind: 'contentType',\n       modelName: 'test-model',\n       uid: 'test-uid',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrTimeUnique: { type: 'time', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/timestamp-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -27,7 +27,6 @@ describe('Time validator', () => {\n       kind: 'contentType',\n       modelName: 'test-model',\n       uid: 'test-uid',\n-      privateAttributes: [],\n       options: {},\n       attributes: {\n         attrTimestampUnique: { type: 'timestamp', unique: true },"
        },
        {
          "filename": "packages/core/strapi/lib/services/entity-validator/__tests__/uid-validators.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -26,7 +26,6 @@ describe('UID validator', () => {\n     kind: 'contentType',\n     modelName: 'test-model',\n     uid: 'test-uid',\n-    privateAttributes: [],\n     options: {},\n     attributes: {\n       attrUidUnique: { type: 'uid' },"
        },
        {
          "filename": "packages/core/utils/lib/__tests__/content-types.test.js",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -153,7 +153,6 @@ describe('Content types utils', () => {\n     test('Attribute is private in the model attributes', () => {\n       const model = createModelWithPrivates();\n       global.strapi = { config: createConfig() };\n-      Object.assign(model, { privateAttributes: getPrivateAttributes(model) });\n \n       expect(isPrivateAttribute(model, 'foo')).toBeTruthy();\n       expect(isPrivateAttribute(model, 'bar')).toBeFalsy();\n@@ -164,7 +163,6 @@ describe('Content types utils', () => {\n     test('Attribute is set to private in the app config', () => {\n       const model = createModelWithPrivates();\n       global.strapi = { config: createConfig(['bar']) };\n-      Object.assign(model, { privateAttributes: getPrivateAttributes(model) });\n \n       expect(isPrivateAttribute(model, 'foo')).toBeTruthy();\n       expect(isPrivateAttribute(model, 'bar')).toBeTruthy();\n@@ -175,7 +173,6 @@ describe('Content types utils', () => {\n     test('Attribute is set to private in the model options', () => {\n       const model = createModelWithPrivates(['foobar']);\n       global.strapi = { config: createConfig() };\n-      Object.assign(model, { privateAttributes: getPrivateAttributes(model) });\n \n       expect(isPrivateAttribute(model, 'foo')).toBeTruthy();\n       expect(isPrivateAttribute(model, 'bar')).toBeFalsy();"
        },
        {
          "filename": "packages/core/utils/lib/content-types.js",
          "status": "modified",
          "additions": 11,
          "deletions": 4,
          "patch": "@@ -1,7 +1,7 @@\n 'use strict';\n \n const _ = require('lodash');\n-const { has } = require('lodash/fp');\n+const { getOr, has, union } = require('lodash/fp');\n \n const SINGLE_TYPE = 'singleType';\n const COLLECTION_TYPE = 'collectionType';\n@@ -92,16 +92,23 @@ const isSingleType = ({ kind = COLLECTION_TYPE }) => kind === SINGLE_TYPE;\n const isCollectionType = ({ kind = COLLECTION_TYPE }) => kind === COLLECTION_TYPE;\n const isKind = (kind) => (model) => model.kind === kind;\n \n+const getStoredPrivateAttributes = (model) => union(\n+  strapi?.config?.get('api.responses.privateAttributes', []) ?? [],\n+  getOr([], 'options.privateAttributes', model)\n+);\n+\n const getPrivateAttributes = (model = {}) => {\n   return _.union(\n-    strapi.config.get('api.responses.privateAttributes', []),\n-    _.get(model, 'options.privateAttributes', []),\n+    getStoredPrivateAttributes(model),\n     _.keys(_.pickBy(model.attributes, (attr) => !!attr.private))\n   );\n };\n \n const isPrivateAttribute = (model, attributeName) => {\n-  return model?.privateAttributes?.includes(attributeName) ?? false;\n+  if (model?.attributes?.[attributeName]?.private === true) {\n+    return true;\n+  }\n+  return getStoredPrivateAttributes(model).includes(attributeName);\n };\n \n const isScalarAttribute = (attribute) => {"
        },
        {
          "filename": "packages/core/utils/lib/sanitize/visitors/remove-private.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@ module.exports = ({ schema, key, attribute }, { remove }) => {\n     return;\n   }\n \n-  const isPrivate = isPrivateAttribute(schema, key) || attribute.private === true;\n+  const isPrivate = attribute.private === true || isPrivateAttribute(schema, key);\n \n   if (isPrivate) {\n     remove(key);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 14,
        "unique_directories": 8,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a4bb06d54b493ab973659d0200e0e42937988850",
            "date": "2025-01-14T09:07:08Z",
            "author_login": "Bassel17"
          },
          {
            "sha": "0af49f5c5ec496b0fad61ac9bfd4d0127b89d8d3",
            "date": "2025-01-13T11:14:12Z",
            "author_login": "innerdvations"
          },
          {
            "sha": "8bfe95f44c07400c519dbfda132c4c7c43bc1b63",
            "date": "2025-01-13T10:49:55Z",
            "author_login": "butcherZ"
          },
          {
            "sha": "cb666fde52df857549ddd0e7bf1f6888f5d06951",
            "date": "2025-01-10T17:40:46Z",
            "author_login": "laurenskling"
          },
          {
            "sha": "0cf2e91c6514486fe711561b05c89841c9cae37c",
            "date": "2025-01-10T13:19:06Z",
            "author_login": "lucasboilly"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-200",
    "description": "Strapi is an open-source headless content management system. Prior to version 4.10.8, anyone (Strapi developers, users, plugins) can make every attribute of a Content-Type public without knowing it. The vulnerability only affects the handling of content types by Strapi, not the actual content types themselves. Users can use plugins or modify their own content types without realizing that the `privateAttributes` getter is being removed, which can result in any attribute becoming public. This can lead to sensitive information being exposed or the entire system being taken control of by an attacker(having access to password hashes). Anyone can be impacted, depending on how people are using/extending content-types. If the users are mutating the content-type, they will not be affected. Version 4.10.8 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-25T15:15:13.377",
    "last_modified": "2024-11-21T08:06:31.707",
    "fix_date": "2023-05-30T17:01:28Z"
  },
  "references": [
    {
      "url": "https://github.com/strapi/strapi/commit/2fa8f30371bfd1db44c15e5747860ee5789096de",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/strapi/strapi/releases/tag/v4.10.8",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/strapi/strapi/security/advisories/GHSA-chmr-rg2f-9jmf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/strapi/strapi/commit/2fa8f30371bfd1db44c15e5747860ee5789096de",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/strapi/strapi/releases/tag/v4.10.8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/strapi/strapi/security/advisories/GHSA-chmr-rg2f-9jmf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.269898",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "strapi",
    "owner": "strapi",
    "created_at": "2015-09-30T15:34:48Z",
    "updated_at": "2025-01-14T12:51:30Z",
    "pushed_at": "2025-01-14T09:19:35Z",
    "size": 535646,
    "stars": 64630,
    "forks": 8259,
    "open_issues": 923,
    "watchers": 64630,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "1.6.4",
      "add-description-to-plugins-routes",
      "alpha.4.9",
      "develop"
    ],
    "languages": {
      "TypeScript": 9198115,
      "JavaScript": 1747039,
      "Handlebars": 6769,
      "Shell": 2015,
      "MDX": 1518,
      "HTML": 658
    },
    "commit_activity": {
      "total_commits_last_year": 2153,
      "avg_commits_per_week": 41.40384615384615,
      "days_active_last_year": 247
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:15:49.249274"
  }
}