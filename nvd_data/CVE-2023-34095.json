{
  "cve_id": "CVE-2023-34095",
  "github_data": {
    "repository": "OpenPrinting/cpdb-libs",
    "fix_commit": "f181bd1f14757c2ae0f17cc76dc20421a40f30b7",
    "related_commits": [
      "f181bd1f14757c2ae0f17cc76dc20421a40f30b7",
      "f181bd1f14757c2ae0f17cc76dc20421a40f30b7"
    ],
    "patch_url": "https://github.com/OpenPrinting/cpdb-libs/commit/f181bd1f14757c2ae0f17cc76dc20421a40f30b7.patch",
    "fix_commit_details": {
      "sha": "f181bd1f14757c2ae0f17cc76dc20421a40f30b7",
      "commit_date": "2023-06-14T16:45:28Z",
      "author": {
        "login": "tillkamppeter",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-25j7-9gfc-f46x",
        "length": 710,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 56,
        "additions": 28,
        "deletions": 28
      },
      "files": [
        {
          "filename": "cpdb/cpdb-frontend.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -391,7 +391,7 @@ PrintBackend *cpdbCreateBackendFromFile(GDBusConnection *connection,\n         free(path);\n         return NULL;\n     }\n-    if (fscanf(file, \"%s\", obj_path) == 0)\n+    if (fscanf(file, \"%1023s\", obj_path) == 0)\n     {\n         logerror(\"Error creating backend %s : Couldn't parse %s\\n\",\n                     backend_name, path);"
        },
        {
          "filename": "tools/cpdb-text-frontend.c",
          "status": "modified",
          "additions": 27,
          "deletions": 27,
          "patch": "@@ -159,7 +159,7 @@ gpointer parse_commands(gpointer user_data)\n     {\n         printf(\"> \");\n         fflush(stdout);\n-        scanf(\"%s\", buf);\n+        scanf(\"%1023s\", buf);\n         if (strcmp(buf, \"stop\") == 0)\n         {\n             cpdbDeleteFrontendObj(f);\n@@ -195,7 +195,7 @@ gpointer parse_commands(gpointer user_data)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             g_message(\"Getting all attributes ..\\n\");\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n \n@@ -218,7 +218,7 @@ gpointer parse_commands(gpointer user_data)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             g_message(\"Getting all attributes ..\\n\");\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n \n@@ -240,7 +240,7 @@ gpointer parse_commands(gpointer user_data)\n         else if (strcmp(buf, \"get-default\") == 0)\n         {\n             char printer_id[BUFSIZE], backend_name[BUFSIZE], option_name[BUFSIZE];\n-            scanf(\"%s%s%s\", option_name, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", option_name, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             char *ans = cpdbGetDefault(p, option_name);\n             if (!ans)\n@@ -251,7 +251,7 @@ gpointer parse_commands(gpointer user_data)\n         else if (strcmp(buf, \"get-setting\") == 0)\n         {\n             char printer_id[BUFSIZE], backend_name[BUFSIZE], setting_name[BUFSIZE];\n-            scanf(\"%s%s%s\", setting_name, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", setting_name, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             char *ans = cpdbGetSetting(p, setting_name);\n             if (!ans)\n@@ -262,7 +262,7 @@ gpointer parse_commands(gpointer user_data)\n         else if (strcmp(buf, \"get-current\") == 0)\n         {\n             char printer_id[BUFSIZE], backend_name[BUFSIZE], option_name[BUFSIZE];\n-            scanf(\"%s%s%s\", option_name, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", option_name, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             char *ans = cpdbGetCurrent(p, option_name);\n             if (!ans)\n@@ -273,31 +273,31 @@ gpointer parse_commands(gpointer user_data)\n         else if (strcmp(buf, \"add-setting\") == 0)\n         {\n             char printer_id[BUFSIZE], backend_name[BUFSIZE], option_name[BUFSIZE], option_val[BUFSIZE];\n-            scanf(\"%s %s %s %s\", option_name, option_val, printer_id, backend_name);\n+            scanf(\"%1023s %1023s %1023s %1023s\", option_name, option_val, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             printf(\"%s : %s\\n\", option_name, option_val);\n             cpdbAddSettingToPrinter(p, cpdbGetStringCopy(option_name), cpdbGetStringCopy(option_val));\n         }\n         else if (strcmp(buf, \"clear-setting\") == 0)\n         {\n             char printer_id[BUFSIZE], backend_name[BUFSIZE], option_name[BUFSIZE];\n-            scanf(\"%s%s%s\", option_name, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", option_name, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             cpdbClearSettingFromPrinter(p, option_name);\n         }\n         else if (strcmp(buf, \"get-state\") == 0)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             printf(\"%s\\n\", cpdbGetState(p));\n         }\n         else if (strcmp(buf, \"is-accepting-jobs\") == 0)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             printf(\"Accepting jobs ? : %d \\n\", cpdbIsAcceptingJobs(p));\n         }\n@@ -308,7 +308,7 @@ gpointer parse_commands(gpointer user_data)\n         else if (strcmp(buf, \"ping\") == 0)\n         {\n             char printer_id[BUFSIZE], backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             print_backend_call_ping_sync(p->backend_proxy, p->id, NULL, NULL);\n         }\n@@ -323,7 +323,7 @@ gpointer parse_commands(gpointer user_data)\n         else if (strcmp(buf, \"get-default-printer-for-backend\") == 0)\n         {\n             char backend_name[BUFSIZE];\n-            scanf(\"%s\", backend_name);\n+            scanf(\"%1023s\", backend_name);\n             /**\n              * Backend name = The last part of the backend dbus service\n              * Eg. \"CUPS\" or \"GCP\"\n@@ -335,7 +335,7 @@ gpointer parse_commands(gpointer user_data)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             if (p)\n             {\n@@ -349,7 +349,7 @@ gpointer parse_commands(gpointer user_data)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             if (p)\n             {\n@@ -362,7 +362,7 @@ gpointer parse_commands(gpointer user_data)\n         else if (strcmp(buf, \"print-file\") == 0)\n         {\n             char printer_id[BUFSIZE], backend_name[BUFSIZE], file_path[BUFSIZE];\n-            scanf(\"%s%s%s\", file_path, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", file_path, printer_id, backend_name);\n             /**\n              * Try adding some settings here .. change them and experiment\n              */\n@@ -372,7 +372,7 @@ gpointer parse_commands(gpointer user_data)\n             {\n               char final_file_path[BUFSIZE];\n               printf(\"Please give the final file path: \");\n-              scanf(\"%s\", final_file_path);\n+              scanf(\"%1023s\", final_file_path);\n               cpdbPrintFilePath(p, file_path, final_file_path);\n               continue;\n             }\n@@ -384,7 +384,7 @@ gpointer parse_commands(gpointer user_data)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             printf(\"%d jobs currently active.\\n\", cpdbGetActiveJobsCount(p));\n         }\n@@ -406,7 +406,7 @@ gpointer parse_commands(gpointer user_data)\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n             char job_id[BUFSIZE];\n-            scanf(\"%s%s%s\", job_id, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", job_id, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             if (cpdbCancelJob(p, job_id))\n                 printf(\"cpdb_job_t %s has been cancelled.\\n\", job_id);\n@@ -418,7 +418,7 @@ gpointer parse_commands(gpointer user_data)\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n             char job_id[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             cpdbPicklePrinterToFile(p, \"/tmp/.printer-pickle\", f);\n         }\n@@ -427,7 +427,7 @@ gpointer parse_commands(gpointer user_data)\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n             char option_name[BUFSIZE];\n-            scanf(\"%s%s%s\", option_name, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", option_name, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             printf(\"%s\\n\", cpdbGetOptionTranslation(p, option_name, locale));\n         }\n@@ -437,7 +437,7 @@ gpointer parse_commands(gpointer user_data)\n             char backend_name[BUFSIZE];\n             char option_name[BUFSIZE];\n             char choice_name[BUFSIZE];\n-            scanf(\"%s%s%s%s\", option_name, choice_name, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s%1023s\", option_name, choice_name, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             printf(\"%s\\n\", cpdbGetChoiceTranslation(p, option_name, choice_name, locale));\n         }\n@@ -446,15 +446,15 @@ gpointer parse_commands(gpointer user_data)\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n             char group_name[BUFSIZE];\n-            scanf(\"%s%s%s\", group_name, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", group_name, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             printf(\"%s\\n\", cpdbGetGroupTranslation(p, group_name, locale));\n         }\n         else if (strcmp(buf, \"get-all-translations\") == 0)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             cpdbGetAllTranslations(p, locale);\n             printTranslations(p);\n@@ -465,7 +465,7 @@ gpointer parse_commands(gpointer user_data)\n             char backend_name[BUFSIZE];\n             char media[BUFSIZE];\n             int width, length;\n-            scanf(\"%s%s%s\", media, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", media, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             int ok = cpdbGetMediaSize(p, media, &width, &length);\n             if (ok)\n@@ -476,7 +476,7 @@ gpointer parse_commands(gpointer user_data)\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n             char media[BUFSIZE];\n-            scanf(\"%s%s%s\", media, printer_id, backend_name);\n+            scanf(\"%1023s%1023s%1023s\", media, printer_id, backend_name);\n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n \n             cpdb_margin_t *margins;\n@@ -488,7 +488,7 @@ gpointer parse_commands(gpointer user_data)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             \n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             if(p == NULL)\n@@ -501,7 +501,7 @@ gpointer parse_commands(gpointer user_data)\n         {\n             char printer_id[BUFSIZE];\n             char backend_name[BUFSIZE];\n-            scanf(\"%s%s\", printer_id, backend_name);\n+            scanf(\"%1023s%1023s\", printer_id, backend_name);\n             \n             cpdb_printer_obj_t *p = cpdbFindPrinterObj(f, printer_id, backend_name);\n             if(p == NULL)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "835e6c57b8c36652558925d5c3b35b16e7360a2b",
            "date": "2024-11-20T08:13:22Z",
            "author_login": "michaelweghorn"
          },
          {
            "sha": "5a43d6cf7d329a899bb204d44295fdc9142b291e",
            "date": "2024-10-15T16:06:15Z",
            "author_login": "michaelweghorn"
          },
          {
            "sha": "e942daf957abf0c86cec939174a495aed1734152",
            "date": "2024-10-15T16:04:33Z",
            "author_login": "michaelweghorn"
          },
          {
            "sha": "7c57b4b5e6bdf651e3708b8821333c278c5dd757",
            "date": "2024-10-15T16:03:05Z",
            "author_login": "michaelweghorn"
          },
          {
            "sha": "74f3884743446f843c13aa7aa9461db974cc7ec6",
            "date": "2024-10-15T14:13:46Z",
            "author_login": "michaelweghorn"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-121",
    "description": "cpdb-libs provides frontend and backend libraries for the Common Printing Dialog Backends (CPDB) project. In versions 1.0 through 2.0b4, cpdb-libs is vulnerable to buffer overflows via improper use of `scanf(3)`. cpdb-libs uses the `fscanf()` and `scanf()` functions to parse command lines and configuration files, dropping the read string components into fixed-length buffers, but does not limit the length of the strings to be read by `fscanf()` and `scanf()` causing buffer overflows when a string is longer than 1023 characters. A patch for this issue is available at commit f181bd1f14757c2ae0f17cc76dc20421a40f30b7. As all buffers have a length of 1024 characters, the patch limits the maximum string length to be read to 1023 by replacing all occurrences of `%s` with `%1023s` in all calls of the `fscanf()` and `scanf()` functions.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-14T17:15:09.243",
    "last_modified": "2024-11-21T08:06:31.993",
    "fix_date": "2023-06-14T16:45:28Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2023/06/14/7",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/blob/85555fba64d34f53a2fce099b0488904cc48ed35/cpdb/cpdb-frontend.c#L372",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/blob/85555fba64d34f53a2fce099b0488904cc48ed35/tools/cpdb-text-frontend.c#L362",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/blob/85555fba64d34f53a2fce099b0488904cc48ed35/tools/cpdb-text-frontend.c#L453",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/commit/f181bd1f14757c2ae0f17cc76dc20421a40f30b7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/security/advisories/GHSA-25j7-9gfc-f46x",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2023/06/14/7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/blob/85555fba64d34f53a2fce099b0488904cc48ed35/cpdb/cpdb-frontend.c#L372",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/blob/85555fba64d34f53a2fce099b0488904cc48ed35/tools/cpdb-text-frontend.c#L362",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/blob/85555fba64d34f53a2fce099b0488904cc48ed35/tools/cpdb-text-frontend.c#L453",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/commit/f181bd1f14757c2ae0f17cc76dc20421a40f30b7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenPrinting/cpdb-libs/security/advisories/GHSA-25j7-9gfc-f46x",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.366526",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cpdb-libs",
    "owner": "OpenPrinting",
    "created_at": "2017-10-02T20:04:05Z",
    "updated_at": "2024-11-20T08:13:26Z",
    "pushed_at": "2024-11-20T08:13:22Z",
    "size": 1182,
    "stars": 5,
    "forks": 9,
    "open_issues": 0,
    "watchers": 5,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 140721,
      "M4": 4400,
      "Makefile": 2432,
      "Shell": 1008
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:38:40.289067"
  }
}