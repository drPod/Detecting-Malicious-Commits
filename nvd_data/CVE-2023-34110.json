{
  "cve_id": "CVE-2023-34110",
  "github_data": {
    "repository": "dpgaspar/Flask-AppBuilder",
    "fix_commit": "ae25ad4c87a9051ebe4a4e8f02aee73232642626",
    "related_commits": [
      "ae25ad4c87a9051ebe4a4e8f02aee73232642626",
      "ae25ad4c87a9051ebe4a4e8f02aee73232642626"
    ],
    "patch_url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/ae25ad4c87a9051ebe4a4e8f02aee73232642626.patch",
    "fix_commit_details": {
      "sha": "ae25ad4c87a9051ebe4a4e8f02aee73232642626",
      "commit_date": "2023-05-19T14:51:38Z",
      "author": {
        "login": "dpgaspar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: CRUD MVC log message (#2045)",
        "length": 181,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 208,
        "additions": 155,
        "deletions": 53
      },
      "files": [
        {
          "filename": "flask_appbuilder/babel/manager.py",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,11 +1,10 @@\n import os\n \n from flask import has_request_context, request, session\n+from flask_appbuilder.babel.views import LocaleView\n+from flask_appbuilder.basemanager import BaseManager\n from flask_babel import Babel\n \n-from .views import LocaleView\n-from ..basemanager import BaseManager\n-\n \n class BabelManager(BaseManager):\n "
        },
        {
          "filename": "flask_appbuilder/models/base.py",
          "status": "modified",
          "additions": 30,
          "deletions": 28,
          "patch": "@@ -41,6 +41,8 @@ class BaseInterface:\n     )\n     general_error_message = lazy_gettext(\"General Error\")\n \n+    database_error_message = lazy_gettext(\"Database Error\")\n+\n     \"\"\" Tuple with message and text with severity type ex: (\"Added Row\", \"info\") \"\"\"\n     message = ()\n \n@@ -103,13 +105,13 @@ def get_values_item(self, item, show_columns):\n \n     def _get_values(self, lst, list_columns):\n         \"\"\"\n-            Get Values: formats values for list template.\n-            returns [{'col_name':'col_value',....},{'col_name':'col_value',....}]\n+        Get Values: formats values for list template.\n+        returns [{'col_name':'col_value',....},{'col_name':'col_value',....}]\n \n-            :param lst:\n-                The list of item objects from query\n-            :param list_columns:\n-                The list of columns to include\n+        :param lst:\n+            The list of item objects from query\n+        :param list_columns:\n+            The list of columns to include\n         \"\"\"\n         retlst = []\n         for item in lst:\n@@ -121,13 +123,13 @@ def _get_values(self, lst, list_columns):\n \n     def get_values(self, lst, list_columns):\n         \"\"\"\n-            Get Values: formats values for list template.\n-            returns [{'col_name':'col_value',....},{'col_name':'col_value',....}]\n+        Get Values: formats values for list template.\n+        returns [{'col_name':'col_value',....},{'col_name':'col_value',....}]\n \n-            :param lst:\n-                The list of item objects from query\n-            :param list_columns:\n-                The list of columns to include\n+        :param lst:\n+            The list of item objects from query\n+        :param list_columns:\n+            The list of columns to include\n         \"\"\"\n         for item in lst:\n             retdict = {}\n@@ -137,7 +139,7 @@ def get_values(self, lst, list_columns):\n \n     def get_values_json(self, lst, list_columns):\n         \"\"\"\n-            Converts list of objects from query to JSON\n+        Converts list of objects from query to JSON\n         \"\"\"\n         result = []\n         for item in self.get_values(lst, list_columns):\n@@ -264,19 +266,19 @@ def get_min_length(self, col_name):\n \n     def add(self, item):\n         \"\"\"\n-            Adds object\n+        Adds object\n         \"\"\"\n         raise NotImplementedError\n \n     def edit(self, item):\n         \"\"\"\n-            Edit (change) object\n+        Edit (change) object\n         \"\"\"\n         raise NotImplementedError\n \n     def delete(self, item):\n         \"\"\"\n-            Deletes object\n+        Deletes object\n         \"\"\"\n         raise NotImplementedError\n \n@@ -285,7 +287,7 @@ def get_col_default(self, col_name):\n \n     def get_keys(self, lst):\n         \"\"\"\n-            return a list of pk values from object list\n+        return a list of pk values from object list\n         \"\"\"\n         pk_name = self.get_pk_name()\n         if self.is_pk_composite():\n@@ -295,7 +297,7 @@ def get_keys(self, lst):\n \n     def get_pk_name(self):\n         \"\"\"\n-            Returns the primary key name\n+        Returns the primary key name\n         \"\"\"\n         raise NotImplementedError\n \n@@ -308,8 +310,8 @@ def get_pk_value(self, item):\n \n     def get(self, pk, filter=None):\n         \"\"\"\n-            return the record from key, you can optionally pass filters\n-            if pk exits on the db but filters exclude it it will return none.\n+        return the record from key, you can optionally pass filters\n+        if pk exits on the db but filters exclude it it will return none.\n         \"\"\"\n         pass\n \n@@ -318,11 +320,11 @@ def get_related_model(self, prop):\n \n     def get_related_interface(self, col_name):\n         \"\"\"\n-            Returns a BaseInterface for the related model\n-            of column name.\n+        Returns a BaseInterface for the related model\n+        of column name.\n \n-            :param col_name: Column name with relation\n-            :return: BaseInterface\n+        :param col_name: Column name with relation\n+        :return: BaseInterface\n         \"\"\"\n         raise NotImplementedError\n \n@@ -334,25 +336,25 @@ def get_related_fk(self, model):\n \n     def get_columns_list(self):\n         \"\"\"\n-            Returns a list of all the columns names\n+        Returns a list of all the columns names\n         \"\"\"\n         return []\n \n     def get_user_columns_list(self):\n         \"\"\"\n-            Returns a list of user viewable columns names\n+        Returns a list of user viewable columns names\n         \"\"\"\n         return self.get_columns_list()\n \n     def get_search_columns_list(self):\n         \"\"\"\n-            Returns a list of searchable columns names\n+        Returns a list of searchable columns names\n         \"\"\"\n         return []\n \n     def get_order_columns_list(self, list_columns=None):\n         \"\"\"\n-            Returns a list of order columns names\n+        Returns a list of order columns names\n         \"\"\"\n         return []\n "
        },
        {
          "filename": "flask_appbuilder/models/sqla/interface.py",
          "status": "modified",
          "additions": 7,
          "deletions": 22,
          "patch": "@@ -1,14 +1,11 @@\n # -*- coding: utf-8 -*-\n from contextlib import suppress\n import logging\n-import sys\n from typing import Any, Dict, List, Optional, Tuple, Type, Union\n \n from flask_appbuilder._compat import as_unicode\n from flask_appbuilder.const import (\n-    LOGMSG_ERR_DBI_ADD_GENERIC,\n     LOGMSG_ERR_DBI_DEL_GENERIC,\n-    LOGMSG_ERR_DBI_EDIT_GENERIC,\n     LOGMSG_WAR_DBI_ADD_INTEGRITY,\n     LOGMSG_WAR_DBI_DEL_INTEGRITY,\n     LOGMSG_WAR_DBI_EDIT_INTEGRITY,\n@@ -736,11 +733,8 @@ def add(self, item: Model, raise_exception: bool = False) -> bool:\n                 raise e\n             return False\n         except Exception as e:\n-            self.message = (\n-                as_unicode(self.general_error_message + \" \" + str(sys.exc_info()[0])),\n-                \"danger\",\n-            )\n-            log.exception(LOGMSG_ERR_DBI_ADD_GENERIC.format(str(e)))\n+            self.message = (as_unicode(self.database_error_message), \"danger\")\n+            log.exception(\"Database error\")\n             self.session.rollback()\n             if raise_exception:\n                 raise e\n@@ -760,11 +754,8 @@ def edit(self, item: Model, raise_exception: bool = False) -> bool:\n                 raise e\n             return False\n         except Exception as e:\n-            self.message = (\n-                as_unicode(self.general_error_message + \" \" + str(sys.exc_info()[0])),\n-                \"danger\",\n-            )\n-            log.exception(LOGMSG_ERR_DBI_EDIT_GENERIC.format(str(e)))\n+            self.message = (as_unicode(self.database_error_message), \"danger\")\n+            log.exception(\"Database error\")\n             self.session.rollback()\n             if raise_exception:\n                 raise e\n@@ -785,11 +776,8 @@ def delete(self, item: Model, raise_exception: bool = False) -> bool:\n                 raise e\n             return False\n         except Exception as e:\n-            self.message = (\n-                as_unicode(self.general_error_message + \" \" + str(sys.exc_info()[0])),\n-                \"danger\",\n-            )\n-            log.exception(LOGMSG_ERR_DBI_DEL_GENERIC.format(str(e)))\n+            self.message = (as_unicode(self.database_error_message), \"danger\")\n+            log.exception(\"Database error\")\n             self.session.rollback()\n             if raise_exception:\n                 raise e\n@@ -809,10 +797,7 @@ def delete_all(self, items: List[Model]) -> bool:\n             self.session.rollback()\n             return False\n         except Exception as e:\n-            self.message = (\n-                as_unicode(self.general_error_message + \" \" + str(sys.exc_info()[0])),\n-                \"danger\",\n-            )\n+            self.message = (as_unicode(self.database_error_message), \"danger\")\n             log.exception(LOGMSG_ERR_DBI_DEL_GENERIC.format(str(e)))\n             self.session.rollback()\n             return False"
        },
        {
          "filename": "flask_appbuilder/tests/security/test_mvc_security.py",
          "status": "modified",
          "additions": 116,
          "deletions": 0,
          "patch": "@@ -1,3 +1,5 @@\n+from unittest.mock import patch\n+\n from flask_appbuilder import ModelView\n from flask_appbuilder.exceptions import PasswordComplexityValidationError\n from flask_appbuilder.models.sqla.filters import FilterEqual\n@@ -422,3 +424,117 @@ def test_register_user(self):\n         )\n         self.db.session.delete(user)\n         self.db.session.commit()\n+\n+    def test_edit_user(self):\n+        \"\"\"\n+        Test edit user\n+        \"\"\"\n+        client = self.app.test_client()\n+        _ = self.browser_login(client, USERNAME_ADMIN, PASSWORD_ADMIN)\n+\n+        _tmp_user = self.create_user(\n+            self.appbuilder,\n+            \"tmp_user\",\n+            \"password1\",\n+            \"\",\n+            first_name=\"tmp\",\n+            last_name=\"user\",\n+            email=\"tmp@fab.org\",\n+            role_names=[\"Admin\"],\n+        )\n+\n+        # use all required params\n+        rv = client.get(f\"/users/edit/{_tmp_user.id}\", follow_redirects=True)\n+        data = rv.data.decode(\"utf-8\")\n+        self.assertIn(\"Edit User\", data)\n+        rv = client.post(\n+            f\"/users/edit/{_tmp_user.id}\",\n+            data=dict(\n+                first_name=_tmp_user.first_name,\n+                last_name=_tmp_user.last_name,\n+                username=_tmp_user.username,\n+                email=\"changed@changed.org\",\n+                roles=_tmp_user.roles[0].id,\n+            ),\n+            follow_redirects=True,\n+        )\n+        data = rv.data.decode(\"utf-8\")\n+        self.assertIn(\"Changed Row\", data)\n+\n+        user = (\n+            self.db.session.query(User)\n+            .filter(User.username == _tmp_user.username)\n+            .one_or_none()\n+        )\n+\n+        assert user.email == \"changed@changed.org\"\n+        self.db.session.delete(user)\n+        self.db.session.commit()\n+\n+    def test_edit_user_email_validation(self):\n+        \"\"\"\n+        Test edit user with email not null validation\n+        \"\"\"\n+        client = self.app.test_client()\n+        _ = self.browser_login(client, USERNAME_ADMIN, PASSWORD_ADMIN)\n+\n+        read_ony_user: User = (\n+            self.db.session.query(User)\n+            .filter(User.username == USERNAME_READONLY)\n+            .one_or_none()\n+        )\n+\n+        # use all required params\n+        rv = client.get(f\"/users/edit/{read_ony_user.id}\", follow_redirects=True)\n+        data = rv.data.decode(\"utf-8\")\n+        self.assertIn(\"Edit User\", data)\n+        rv = client.post(\n+            f\"/users/edit/{read_ony_user.id}\",\n+            data=dict(\n+                first_name=read_ony_user.first_name,\n+                last_name=read_ony_user.last_name,\n+                username=read_ony_user.username,\n+                email=None,\n+                roles=read_ony_user.roles[0].id,\n+            ),\n+            follow_redirects=True,\n+        )\n+        data = rv.data.decode(\"utf-8\")\n+        self.assertIn(\"This field is required\", data)\n+\n+    def test_edit_user_db_fail(self):\n+        \"\"\"\n+        Test edit user with DB fail\n+        \"\"\"\n+        client = self.app.test_client()\n+        _ = self.browser_login(client, USERNAME_ADMIN, PASSWORD_ADMIN)\n+\n+        read_ony_user: User = (\n+            self.db.session.query(User)\n+            .filter(User.username == USERNAME_READONLY)\n+            .one_or_none()\n+        )\n+\n+        # use all required params\n+        rv = client.get(f\"/users/edit/{read_ony_user.id}\", follow_redirects=True)\n+        data = rv.data.decode(\"utf-8\")\n+        self.assertIn(\"Edit User\", data)\n+\n+        with patch.object(self.appbuilder.session, \"merge\") as mock_merge:\n+            with patch.object(self.appbuilder.sm, \"has_access\", return_value=True) as _:\n+                mock_merge.side_effect = Exception(\"BANG!\")\n+\n+                rv = client.post(\n+                    f\"/users/edit/{read_ony_user.id}\",\n+                    data=dict(\n+                        first_name=read_ony_user.first_name,\n+                        last_name=read_ony_user.last_name,\n+                        username=read_ony_user.username,\n+                        email=\"changed@changed.org\",\n+                        roles=read_ony_user.roles[0].id,\n+                    ),\n+                    follow_redirects=True,\n+                )\n+\n+                data = rv.data.decode(\"utf-8\")\n+                self.assertIn(\"Database Error\", data)"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "418ab8a93907669be4ccbb99d7aefa5283f3e013",
            "date": "2024-12-17T16:33:17Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "fab9013003a41c4e80da04f072201a8c7cc99187",
            "date": "2024-10-23T12:29:25Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "4ca96e9722a692e8640acd18e605fad9702521a9",
            "date": "2024-10-23T10:13:32Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "a374c14ceaa6c9c4fb4b87dd8b082a7f5e94ad00",
            "date": "2024-10-23T09:14:18Z",
            "author_login": "CodeWithEmad"
          },
          {
            "sha": "1d27eb42a4f9b6e19fb3c025327b4110b175eccb",
            "date": "2024-09-02T17:10:23Z",
            "author_login": "dpgaspar"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-209",
    "description": "Flask-AppBuilder is an application development framework, built on top of Flask. Prior to version 4.3.2, an authenticated malicious actor with Admin privileges, could by adding a special character on the add, edit User forms trigger a database error, this error is surfaced back to this actor on the UI. On certain database engines this error can include the entire user row including the pbkdf2:sha256 hashed password. This vulnerability has been fixed in version 4.3.2.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-22T23:15:09.410",
    "last_modified": "2024-11-21T08:06:34.153",
    "fix_date": "2023-05-19T14:51:38Z"
  },
  "references": [
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/ae25ad4c87a9051ebe4a4e8f02aee73232642626",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/pull/2045",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/releases/tag/v4.3.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-jhpr-j7cq-3jp3",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/ae25ad4c87a9051ebe4a4e8f02aee73232642626",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/pull/2045",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/releases/tag/v4.3.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-jhpr-j7cq-3jp3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.854256",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Flask-AppBuilder",
    "owner": "dpgaspar",
    "created_at": "2013-11-09T21:13:29Z",
    "updated_at": "2025-01-14T13:18:32Z",
    "pushed_at": "2024-12-17T16:33:17Z",
    "size": 44116,
    "stars": 4739,
    "forks": 1377,
    "open_issues": 221,
    "watchers": 4739,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1112522,
      "HTML": 91928,
      "JavaScript": 14409,
      "CSS": 11547,
      "Shell": 3075
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:14:27.090468"
  }
}