{
  "cve_id": "CVE-2023-34231",
  "github_data": {
    "repository": "snowflakedb/gosnowflake",
    "fix_commit": "e11a2a555f1b9f7adc1f01fb7b5e7f38fbbb2a1c",
    "related_commits": [
      "e11a2a555f1b9f7adc1f01fb7b5e7f38fbbb2a1c",
      "e11a2a555f1b9f7adc1f01fb7b5e7f38fbbb2a1c"
    ],
    "patch_url": "https://github.com/snowflakedb/gosnowflake/commit/e11a2a555f1b9f7adc1f01fb7b5e7f38fbbb2a1c.patch",
    "fix_commit_details": {
      "sha": "e11a2a555f1b9f7adc1f01fb7b5e7f38fbbb2a1c",
      "commit_date": "2023-03-21T00:24:48Z",
      "author": {
        "login": "sfc-gh-hchaturvedi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SNOW-761744 Added URL Validator and URL Encoder (#757)",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 70,
        "deletions": 0
      },
      "files": [
        {
          "filename": "url_util.go",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+package gosnowflake\n+\n+import (\n+\t\"net/url\"\n+\t\"regexp\"\n+)\n+\n+var (\n+\tmatcher, _ = regexp.Compile(`^http(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z@:])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\&\\(\\)\\/\\\\\\+&%\\$#_=@]*)?$`)\n+)\n+\n+func isValidURL(targetURL string) bool {\n+\tif !matcher.MatchString(targetURL) {\n+\t\tlogger.Infof(\" The provided URL is not a valid URL - \" + targetURL)\n+\t\treturn false\n+\t}\n+\treturn true\n+}\n+\n+func urlEncode(targetString string) string {\n+\t// We use QueryEscape instead of PathEscape here\n+\t// for consistency across Drivers. For example:\n+\t// QueryEscape escapes space as \"+\" whereas PE\n+\t// it as %20F. PE also does not escape @ or &\n+\t// either but QE does.\n+\t// The behavior of QE in Golang is more in sync\n+\t// with URL encoders in Python and Java hence the choice\n+\treturn url.QueryEscape(targetString)\n+}"
        },
        {
          "filename": "util_test.go",
          "status": "modified",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -230,3 +230,44 @@ func TestGetMin(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+type tcURLList struct {\n+\tin  string\n+\tout bool\n+}\n+\n+func TestValidURL(t *testing.T) {\n+\ttestcases := []tcURLList{\n+\t\t{\"https://ssoTestURL.okta.com\", true},\n+\t\t{\"https://ssoTestURL.okta.com:8080\", true},\n+\t\t{\"https://ssoTestURL.okta.com/testpathvalue\", true},\n+\t\t{\"-a calculator\", false},\n+\t\t{\"This is a random test\", false},\n+\t\t{\"file://TestForFile\", false},\n+\t}\n+\tfor _, test := range testcases {\n+\t\tresult := isValidURL(test.in)\n+\t\tif test.out != result {\n+\t\t\tt.Errorf(\"Failed to validate URL, input :%v, expected: %v, got: %v\", test.in, test.out, result)\n+\t\t}\n+\t}\n+}\n+\n+type tcEncodeList struct {\n+\tin  string\n+\tout string\n+}\n+\n+func TestEncodeURL(t *testing.T) {\n+\ttestcases := []tcEncodeList{\n+\t\t{\"Hello @World\", \"Hello+%40World\"},\n+\t\t{\"Test//String\", \"Test%2F%2FString\"},\n+\t}\n+\n+\tfor _, test := range testcases {\n+\t\tresult := urlEncode(test.in)\n+\t\tif test.out != result {\n+\t\t\tt.Errorf(\"Failed to encode string, input %v, expected: %v, got: %v\", test.in, test.out, result)\n+\t\t}\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8257f91fef2e7927cb5bf23f26a8ba09d02d8c2f",
            "date": "2024-12-20T18:18:45Z",
            "author_login": "sfc-gh-ext-simba-jy"
          },
          {
            "sha": "7d340919d350d84d27f1c838a0820086f59d2b5b",
            "date": "2024-12-18T09:53:30Z",
            "author_login": "sfc-gh-dszmolka"
          },
          {
            "sha": "45b3d453b0a8fee8130da117420424483fe43cea",
            "date": "2024-12-16T16:06:25Z",
            "author_login": "sfc-gh-pfus"
          },
          {
            "sha": "4f89e5bfd3941ab094a9a5ee780313c262a6668a",
            "date": "2024-12-16T12:08:57Z",
            "author_login": "sfc-gh-pfus"
          },
          {
            "sha": "f8baf23c2976abdd3ecd3bc5312bde787236b84e",
            "date": "2024-12-13T11:32:07Z",
            "author_login": "sfc-gh-dszmolka"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-77",
    "description": "gosnowflake is th Snowflake Golang driver. Prior to version 1.6.19, a command injection vulnerability exists in the Snowflake Golang driver via single sign-on (SSO) browser URL authentication. In order to exploit the potential for command injection, an attacker would need to be successful in (1) establishing a malicious resource and (2) redirecting users to utilize the resource. The attacker could set up a malicious, publicly accessible server which responds to the SSO URL with an attack payload. If the attacker then tricked a user into visiting the maliciously crafted connection URL, the user\u2019s local machine would render the malicious payload, leading to a remote code execution. This attack scenario can be mitigated through URL whitelisting as well as common anti-phishing resources. A patch is available in version 1.6.19.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-08T20:15:09.483",
    "last_modified": "2024-11-21T08:06:49.207",
    "fix_date": "2023-03-21T00:24:48Z"
  },
  "references": [
    {
      "url": "https://github.com/snowflakedb/gosnowflake/commit/e11a2a555f1b9f7adc1f01fb7b5e7f38fbbb2a1c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/gosnowflake/pull/757",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/gosnowflake/security/advisories/GHSA-fwv2-65wh-2w8c",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/gosnowflake/commit/e11a2a555f1b9f7adc1f01fb7b5e7f38fbbb2a1c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/gosnowflake/pull/757",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/gosnowflake/security/advisories/GHSA-fwv2-65wh-2w8c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.344471",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gosnowflake",
    "owner": "snowflakedb",
    "created_at": "2016-09-29T22:09:11Z",
    "updated_at": "2025-01-12T17:43:33Z",
    "pushed_at": "2025-01-14T12:47:40Z",
    "size": 19972,
    "stars": 308,
    "forks": 127,
    "open_issues": 31,
    "watchers": 308,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 1869210,
      "Shell": 6689,
      "Makefile": 5557,
      "Python": 3518,
      "Batchfile": 2201
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:25:49.569248"
  }
}