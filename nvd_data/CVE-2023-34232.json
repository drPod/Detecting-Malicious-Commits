{
  "cve_id": "CVE-2023-34232",
  "github_data": {
    "repository": "snowflakedb/snowflake-connector-nodejs",
    "fix_commit": "0c9622ae12cd7d627df404b73a783b4a5f60728a",
    "related_commits": [
      "0c9622ae12cd7d627df404b73a783b4a5f60728a",
      "0c9622ae12cd7d627df404b73a783b4a5f60728a"
    ],
    "patch_url": "https://github.com/snowflakedb/snowflake-connector-nodejs/commit/0c9622ae12cd7d627df404b73a783b4a5f60728a.patch",
    "fix_commit_details": {
      "sha": "0c9622ae12cd7d627df404b73a783b4a5f60728a",
      "commit_date": "2023-04-17T18:11:20Z",
      "author": {
        "login": "sfc-gh-ext-simba-lf",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Replace eval() for parsing JSON strings (#465)",
        "length": 550,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 38,
        "additions": 27,
        "deletions": 11
      },
      "files": [
        {
          "filename": "lib/connection/result/column.js",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -9,6 +9,7 @@ var SfTimestamp = require('./sf_timestamp');\n var SqlTypes = require('./data_types').SqlTypes;\n var bigInt = require('big-integer');\n var { XMLParser, XMLValidator } = require(\"fast-xml-parser\");\n+var betterEval = require(\"better-eval\");\n \n var NULL_UPPERCASE = 'NULL';\n \n@@ -551,7 +552,7 @@ function convertRawVariant(rawColumnValue, column, context)\n   {\n     try\n     {\n-      ret = eval(\"(\" + rawColumnValue + \")\");\n+      ret = betterEval(\"(\" + rawColumnValue + \")\");\n     }\n     catch (parseError)\n     {"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@\n \t\"async\": \"^3.2.3\",\n     \"aws-sdk\": \"^2.878.0\",\n     \"axios\": \"^0.27.2\",\n+    \"better-eval\": \"^1.3.0\",\n     \"big-integer\": \"^1.6.43\",\n     \"bignumber.js\": \"^2.4.0\",\n     \"binascii\": \"0.0.2\","
        },
        {
          "filename": "test/integration/testDataType.js",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -234,7 +234,10 @@ describe('Test DataType', function ()\n               connection,\n               selectVariant,\n               [{'COLA': {a: 1, b: [1, 2, 3, -Infinity, undefined], c: {a: 1}}}],\n-              callback\n+              callback,\n+              null,\n+              true,\n+              false\n             );\n           }],\n         done\n@@ -259,7 +262,10 @@ describe('Test DataType', function ()\n               connection,\n               selectArray,\n               [{'COLA': ['a', 1]}],\n-              callback\n+              callback,\n+              null,\n+              true,\n+              false\n             );\n           }],\n         done"
        },
        {
          "filename": "test/integration/testUtil.js",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -51,10 +51,11 @@ module.exports.checkError = function (err)\n   assert.ok(!err, JSON.stringify(err));\n };\n \n-module.exports.executeQueryAndVerify = function (connection, sql, expected, callback, bindArray, normalize)\n+module.exports.executeQueryAndVerify = function (connection, sql, expected, callback, bindArray, normalize, strict)\n {\n   // Sometimes we may not want to normalize the row first\n   normalize = (typeof normalize !== \"undefined\" && normalize != null) ? normalize : true;\n+  strict = (typeof strict !== \"undefined\" && strict != null) ? strict : true;\n   var executeOptions = {};\n   executeOptions.sqlText = sql;\n   executeOptions.complete = function (err, stmt)\n@@ -67,7 +68,14 @@ module.exports.executeQueryAndVerify = function (connection, sql, expected, call\n       var row;\n       while ((row = stream.read()) !== null)\n       {\n-        assert.deepStrictEqual(normalize ? normalizeRowObject(row) : row, expected[rowCount]);\n+        if (strict)\n+        {\n+          assert.deepStrictEqual(normalize ? normalizeRowObject(row) : row, expected[rowCount]);\n+        }\n+        else\n+        {\n+          assert.deepEqual(normalize ? normalizeRowObject(row) : row, expected[rowCount]);\n+        }\n         rowCount++;\n       }\n     });"
        },
        {
          "filename": "test/unit/connection/result/result_test_variant.js",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -59,18 +59,18 @@ describe('Result: test variant', function ()\n         function (row)\n         {\n           // variant\n-          assert.deepStrictEqual(row.getColumnValue('C1'), {a: 1});\n-          assert.strictEqual(\n+          assert.deepEqual(row.getColumnValue('C1'), {a: 1});\n+          assert.equal(\n             row.getColumnValueAsString('C1'), JSON.stringify({a: 1}));\n \n           // object\n-          assert.deepStrictEqual(row.getColumnValue('C2'), {a: 1});\n-          assert.strictEqual(\n+          assert.deepEqual(row.getColumnValue('C2'), {a: 1});\n+          assert.equal(\n             row.getColumnValueAsString('C2'), JSON.stringify({a: 1}));\n \n           // array\n-          assert.deepStrictEqual(row.getColumnValue('C3'), [1, 2]);\n-          assert.strictEqual(\n+          assert.deepEqual(row.getColumnValue('C3'), [1, 2]);\n+          assert.equal(\n             row.getColumnValueAsString('C3'), JSON.stringify([1, 2]));\n         },\n         function (result)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3ab8b630598766eb54c44649a7e7ec0a5c0defdb",
            "date": "2025-01-13T19:00:54Z",
            "author_login": "sfc-gh-ext-simba-jy"
          },
          {
            "sha": "ea8a0a1c1e673fb411ee3bedcfaa1cd9e4d0e0a7",
            "date": "2025-01-10T14:39:35Z",
            "author_login": "sfc-gh-dszmolka"
          },
          {
            "sha": "cd3994ae42a599e2e5b78b4ea4c39decbb8281c3",
            "date": "2025-01-08T09:19:22Z",
            "author_login": "hd-o"
          },
          {
            "sha": "817d82fea993b3ec02a12eb1f97ac17d76b63e26",
            "date": "2024-12-20T18:18:07Z",
            "author_login": "sfc-gh-ext-simba-jy"
          },
          {
            "sha": "08d802e696a7c3a594dc0e4935279e014d9ff5f1",
            "date": "2024-12-20T09:30:26Z",
            "author_login": "sfc-gh-fpawlowski"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-77",
    "description": "snowflake-connector-nodejs, a NodeJS driver for Snowflake, is vulnerable to command injection via single sign on (SSO) browser URL authentication in versions prior to 1.6.21. In order to exploit the potential for command injection, an attacker would need to be successful in (1) establishing a malicious resource and (2) redirecting users to utilize the resource. The attacker could set up a malicious, publicly accessible server which responds to the SSO URL with an attack payload. If the attacker then tricked a user into visiting the maliciously crafted connection URL, the user\u2019s local machine would render the malicious payload, leading to a remote code execution. This attack scenario can be mitigated through URL whitelisting as well as common anti-phishing resources. Version 1.6.21 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-08T21:15:17.593",
    "last_modified": "2024-11-21T08:06:49.357",
    "fix_date": "2023-04-17T18:11:20Z"
  },
  "references": [
    {
      "url": "https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/snowflake-connector-nodejs/commit/0c9622ae12cd7d627df404b73a783b4a5f60728a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/snowflake-connector-nodejs/pull/465",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-h53w-7qw7-vh5c",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/snowflake-connector-nodejs/commit/0c9622ae12cd7d627df404b73a783b4a5f60728a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/snowflake-connector-nodejs/pull/465",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-h53w-7qw7-vh5c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.345449",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "snowflake-connector-nodejs",
    "owner": "snowflakedb",
    "created_at": "2018-01-09T01:00:25Z",
    "updated_at": "2025-01-13T19:00:58Z",
    "pushed_at": "2025-01-13T19:00:56Z",
    "size": 216830,
    "stars": 127,
    "forks": 133,
    "open_issues": 49,
    "watchers": 127,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 1496074,
      "Shell": 21718,
      "Python": 5478,
      "Batchfile": 2430,
      "Dockerfile": 955
    },
    "commit_activity": {
      "total_commits_last_year": 123,
      "avg_commits_per_week": 2.3653846153846154,
      "days_active_last_year": 78
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:37:07.884213"
  }
}