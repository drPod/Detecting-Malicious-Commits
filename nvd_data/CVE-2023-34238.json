{
  "cve_id": "CVE-2023-34238",
  "github_data": {
    "repository": "gatsbyjs/gatsby",
    "fix_commit": "ae5a654eb346b2e7a9d341b809b2f82d34c0f17c",
    "related_commits": [
      "ae5a654eb346b2e7a9d341b809b2f82d34c0f17c",
      "fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7",
      "ae5a654eb346b2e7a9d341b809b2f82d34c0f17c",
      "fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7"
    ],
    "patch_url": "https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c.patch",
    "fix_commit_details": {
      "sha": "ae5a654eb346b2e7a9d341b809b2f82d34c0f17c",
      "commit_date": "2023-05-05T17:39:05Z",
      "author": {
        "login": "gatsbybot",
        "type": "User",
        "stats": {
          "total_commits": 127,
          "average_weekly_commits": 0.2514851485148515,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 78
        }
      },
      "commit_message": {
        "title": "fix(gatsby): don't serve codeframes for files outside of compilation (#38059) (#38062)",
        "length": 335,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 104,
        "additions": 101,
        "deletions": 3
      },
      "files": [
        {
          "filename": "e2e-tests/development-runtime/SHOULD_NOT_SERVE",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-this file shouldn't be allowed to be served\n+this file shouldn't be allowed to be served. CYPRESS-MARKER"
        },
        {
          "filename": "e2e-tests/development-runtime/cypress/integration/hot-reloading/error-handling/overlay-endpoints.js",
          "status": "added",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -0,0 +1,20 @@\n+const cwd = Cypress.config(`projectRoot`)\n+\n+describe(`overlay handlers don't serve unrelated files`, () => {\n+  it(`__file-code-frame`, () => {\n+    cy.request(\n+      `__file-code-frame?filePath=${cwd}/SHOULD_NOT_SERVE&lineNumber=0`\n+    ).should(response => {\n+      expect(response.body.codeFrame).not.to.match(/CYPRESS-MARKER/)\n+    })\n+  })\n+\n+  it(`__original-stack-frame`, () => {\n+    cy.request(\n+      `__original-stack-frame?moduleId=${cwd}/SHOULD_NOT_SERVE&lineNumber=0&skipSourceMap=1`\n+    ).should(response => {\n+      expect(response.body.codeFrame).not.to.match(/CYPRESS-MARKER/)\n+      expect(response.body.sourceContent).not.to.match(/CYPRESS-MARKER/)\n+    })\n+  })\n+})"
        },
        {
          "filename": "packages/gatsby/src/commands/build-html.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -26,6 +26,7 @@ import type { ISlicePropsEntry } from \"../utils/worker/child/render-html\"\n import { getPageMode } from \"../utils/page-mode\"\n import { extractUndefinedGlobal } from \"../utils/extract-undefined-global\"\n import { modifyPageDataForErrorMessage } from \"../utils/page-data\"\n+import { setFilesFromDevelopHtmlCompilation } from \"../utils/webpack/utils/is-file-inside-compilations\"\n \n type IActivity = any // TODO\n \n@@ -218,6 +219,10 @@ const doBuildRenderer = async (\n     )\n   }\n \n+  if (stage === `develop-html`) {\n+    setFilesFromDevelopHtmlCompilation(stats.compilation)\n+  }\n+\n   // render-page.js is hard coded in webpack.config\n   return {\n     rendererPath: `${directory}/${ROUTES_DIRECTORY}render-page.js`,"
        },
        {
          "filename": "packages/gatsby/src/utils/start-server.ts",
          "status": "modified",
          "additions": 33,
          "deletions": 2,
          "patch": "@@ -1,7 +1,7 @@\n import webpackHotMiddleware from \"@gatsbyjs/webpack-hot-middleware\"\n import webpackDevMiddleware from \"webpack-dev-middleware\"\n import got, { Method } from \"got\"\n-import webpack from \"webpack\"\n+import webpack, { Compilation } from \"webpack\"\n import express from \"express\"\n import compression from \"compression\"\n import { createHandler as createGraphqlEndpointHandler } from \"graphql-http/lib/use/express\"\n@@ -50,6 +50,7 @@ import { getPageMode } from \"./page-mode\"\n import { configureTrailingSlash } from \"./express-middlewares\"\n import type { Express } from \"express\"\n import { addImageRoutes } from \"gatsby-plugin-utils/polyfill-remote-file\"\n+import { isFileInsideCompilations } from \"./webpack/utils/is-file-inside-compilations\"\n \n type ActivityTracker = any // TODO: Replace this with proper type once reporter is typed\n \n@@ -413,6 +414,19 @@ export async function startServer(\n         store.getState().program.directory,\n         req.query.moduleId as string\n       )\n+\n+      const compilation: Compilation =\n+        res.locals?.webpack?.devMiddleware?.stats?.compilation\n+      if (!compilation) {\n+        res.json(emptyResponse)\n+        return\n+      }\n+\n+      if (!isFileInsideCompilations(absolutePath, compilation)) {\n+        res.json(emptyResponse)\n+        return\n+      }\n+\n       try {\n         sourceContent = fs.readFileSync(absolutePath, `utf-8`)\n       } catch (e) {\n@@ -540,7 +554,24 @@ export async function startServer(\n       return\n     }\n \n-    const sourceContent = await fs.readFile(filePath, `utf-8`)\n+    const absolutePath = path.resolve(\n+      store.getState().program.directory,\n+      filePath\n+    )\n+\n+    const compilation: Compilation =\n+      res.locals?.webpack?.devMiddleware?.stats?.compilation\n+    if (!compilation) {\n+      res.json(emptyResponse)\n+      return\n+    }\n+\n+    if (!isFileInsideCompilations(absolutePath, compilation)) {\n+      res.json(emptyResponse)\n+      return\n+    }\n+\n+    const sourceContent = await fs.readFile(absolutePath, `utf-8`)\n \n     const codeFrame = codeFrameColumns(\n       sourceContent,"
        },
        {
          "filename": "packages/gatsby/src/utils/webpack/utils/is-file-inside-compilations.ts",
          "status": "added",
          "additions": 42,
          "deletions": 0,
          "patch": "@@ -0,0 +1,42 @@\n+import { Compilation, NormalModule } from \"webpack\"\n+\n+const filesInsideDevelopHtmlCompilation = new Set<string>()\n+\n+function removeQueryParams(path: string): string {\n+  return path.split(`?`)[0]\n+}\n+\n+export function setFilesFromDevelopHtmlCompilation(\n+  developHtmlCompilation: Compilation\n+): void {\n+  filesInsideDevelopHtmlCompilation.clear()\n+\n+  for (const module of developHtmlCompilation.modules) {\n+    if (module instanceof NormalModule && module.resource) {\n+      filesInsideDevelopHtmlCompilation.add(removeQueryParams(module.resource))\n+    }\n+  }\n+}\n+\n+/**\n+ * Checks if a file is inside either `develop` or `develop-html` compilation. Used to determine if\n+ * we should generate codeframe for this file for error overlay.\n+ */\n+export function isFileInsideCompilations(\n+  absolutePath: string,\n+  developBrowserCompilation: Compilation\n+): boolean {\n+  if (filesInsideDevelopHtmlCompilation.has(absolutePath)) {\n+    return true\n+  }\n+\n+  for (const module of developBrowserCompilation.modules) {\n+    if (module instanceof NormalModule && module.resource) {\n+      if (absolutePath === removeQueryParams(module.resource)) {\n+        return true\n+      }\n+    }\n+  }\n+\n+  return false\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa403a4145286782d0989462f9bf3bb1525bc2e3",
            "date": "2025-01-09T09:11:00Z",
            "author_login": "pieh"
          },
          {
            "sha": "4753a5f6270f81c9fff2ab0f88a4796c86fe9ebe",
            "date": "2025-01-07T07:21:12Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "9b97d855056987a922e8bd9683e29cff584b9d35",
            "date": "2025-01-07T07:11:41Z",
            "author_login": "gatsbybot"
          },
          {
            "sha": "baa1b8e00780228d4f4bb7cb12624f1050bea894",
            "date": "2025-01-02T14:51:20Z",
            "author_login": "pieh"
          },
          {
            "sha": "8252e826a25535de032fc3cbc685d9476e4474ce",
            "date": "2025-01-02T12:07:44Z",
            "author_login": "serhalp"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Gatsby is a free and open source framework based on React. The Gatsby framework prior to versions 4.25.7 and 5.9.1 contain a Local File Inclusion vulnerability in the `__file-code-frame` and `__original-stack-frame` paths, exposed when running the Gatsby develop server (`gatsby develop`). Any file in scope of the development server could potentially be exposed. It should be noted that by default `gatsby develop` is only accessible via the localhost `127.0.0.1`, and one would need to intentionally expose the server to other interfaces to exploit this vulnerability by using server options such as `--host 0.0.0.0`, `-H 0.0.0.0`, or the `GATSBY_HOST=0.0.0.0` environment variable. A patch has been introduced in `gatsby@5.9.1` and `gatsby@4.25.7` which mitigates the issue. Users are advised to upgrade. Users unable to upgrade should avoid exposing their development server to the internet.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-08T00:15:09.907",
    "last_modified": "2024-11-21T08:06:50.160",
    "fix_date": "2023-05-05T17:39:05Z"
  },
  "references": [
    {
      "url": "https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.341977",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gatsby",
    "owner": "gatsbyjs",
    "created_at": "2015-05-21T22:43:05Z",
    "updated_at": "2025-01-14T17:49:06Z",
    "pushed_at": "2025-01-13T00:32:14Z",
    "size": 1143621,
    "stars": 55576,
    "forks": 10309,
    "open_issues": 398,
    "watchers": 55576,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 5322282,
      "TypeScript": 3484556,
      "CSS": 94587,
      "HTML": 62235,
      "MDX": 40139,
      "Shell": 11157,
      "Dockerfile": 2751,
      "PHP": 2010,
      "EJS": 461,
      "Python": 281,
      "Less": 218,
      "SCSS": 218,
      "Stylus": 206
    },
    "commit_activity": {
      "total_commits_last_year": 97,
      "avg_commits_per_week": 1.8653846153846154,
      "days_active_last_year": 47
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:59:12.606186"
  }
}