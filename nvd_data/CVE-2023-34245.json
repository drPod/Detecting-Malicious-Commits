{
  "cve_id": "CVE-2023-34245",
  "github_data": {
    "repository": "udecode/plate",
    "fix_commit": "93dd5712854660874900ae12e4d8e6ff28089eb7",
    "related_commits": [
      "93dd5712854660874900ae12e4d8e6ff28089eb7",
      "93dd5712854660874900ae12e4d8e6ff28089eb7"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "93dd5712854660874900ae12e4d8e6ff28089eb7",
      "commit_date": "2023-02-28T14:26:56Z",
      "author": {
        "login": "OliverWales",
        "type": "User",
        "stats": {
          "total_commits": 16,
          "average_weekly_commits": 0.05947955390334572,
          "total_additions": 543,
          "total_deletions": 70,
          "weeks_active": 9
        }
      },
      "commit_message": {
        "title": "Apply isUrl option to pasted links #2239 (#2240)",
        "length": 304,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 330,
        "additions": 297,
        "deletions": 33
      },
      "files": [
        {
          "filename": ".changeset/great-actors-work-core.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'@udecode/plate-core': minor\n+---\n+\n+- Add `sanitizeUrl` util to check if URL has an allowed scheme"
        },
        {
          "filename": ".changeset/great-actors-work.md",
          "status": "added",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -0,0 +1,12 @@\n+---\n+'@udecode/plate-link': minor\n+---\n+\n+- `upsertLink`:\n+  - Removed `isUrl`\n+  - Added `skipValidation`\n+- Check that URL scheme is valid when:\n+  - Upserting links\n+  - Deserializing links from HTL\n+  - Passing `href` to `nodeProps`\n+  - Rendering the `OpenLinkButton` in `FloatingLink`"
        },
        {
          "filename": ".changeset/quiet-wombats-hug.md",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+---\n+'@udecode/plate-link': major\n+---\n+\n+- Add `allowedSchemes` plugin option\n+  - Any URL schemes other than `http(s)`, `mailto` and `tel` must be added to `allowedSchemes`, otherwise they will not be included in links"
        },
        {
          "filename": "docs/docs/plugins/link.mdx",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -47,6 +47,12 @@ interface LinkPlugin {\n    */\n   triggerFloatingLinkHotkeys?: string | string[];\n \n+  /**\n+   * List of allowed URL schemes.\n+   * @default ['http', 'https', 'mailto', 'tel']\n+   */\n+  allowedSchemes?: string[];\n+\n   /**\n    * Callback to validate an url.\n    * @default isUrl"
        },
        {
          "filename": "packages/core/src/utils/misc/index.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -15,5 +15,6 @@ export * from './jotai';\n export * from './mergeProps';\n export * from './nanoid';\n export * from './react-hotkeys-hook';\n+export * from './sanitizeUrl';\n export * from './type-utils';\n export * from './zustood';"
        },
        {
          "filename": "packages/core/src/utils/misc/sanitizeUrl.spec.ts",
          "status": "added",
          "additions": 47,
          "deletions": 0,
          "patch": "@@ -0,0 +1,47 @@\n+import { sanitizeUrl } from './sanitizeUrl';\n+\n+describe('sanitizeUrl', () => {\n+  describe('when permitInvalid is false', () => {\n+    const options = {\n+      allowedSchemes: ['http'],\n+      permitInvalid: false,\n+    };\n+\n+    it('should return null when url is invalid', () => {\n+      expect(sanitizeUrl('invalid', options)).toBeNull();\n+    });\n+\n+    it('should return null when url has disallowed scheme', () => {\n+      // eslint-disable-next-line no-script-url\n+      expect(sanitizeUrl('javascript://example.com/', options)).toBeNull();\n+    });\n+\n+    it('should return url when url is valid', () => {\n+      expect(sanitizeUrl('http://example.com/', options)).toBe(\n+        'http://example.com/'\n+      );\n+    });\n+  });\n+\n+  describe('when permitInvalid is true', () => {\n+    const options = {\n+      allowedSchemes: ['http'],\n+      permitInvalid: true,\n+    };\n+\n+    it('should return url when url is invalid', () => {\n+      expect(sanitizeUrl('invalid', options)).toBe('invalid');\n+    });\n+\n+    it('should return null when url has disallowed scheme', () => {\n+      // eslint-disable-next-line no-script-url\n+      expect(sanitizeUrl('javascript://example.com/', options)).toBeNull();\n+    });\n+\n+    it('should return url when url is valid', () => {\n+      expect(sanitizeUrl('http://example.com/', options)).toBe(\n+        'http://example.com/'\n+      );\n+    });\n+  });\n+});"
        },
        {
          "filename": "packages/core/src/utils/misc/sanitizeUrl.ts",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+export interface SanitizeUrlOptions {\n+  allowedSchemes?: string[];\n+  permitInvalid?: boolean;\n+}\n+\n+export const sanitizeUrl = (\n+  url: string | undefined,\n+  { allowedSchemes, permitInvalid = false }: SanitizeUrlOptions\n+): string | null => {\n+  if (!url) return null;\n+\n+  let parsedUrl: URL | null = null;\n+\n+  try {\n+    parsedUrl = new URL(url);\n+  } catch (error) {\n+    return permitInvalid ? url : null;\n+  }\n+\n+  if (\n+    allowedSchemes &&\n+    !allowedSchemes.includes(parsedUrl.protocol.slice(0, -1))\n+  ) {\n+    return null;\n+  }\n+\n+  return parsedUrl.href;\n+};"
        },
        {
          "filename": "packages/nodes/link/src/components/FloatingLink/OpenLinkButton.tsx",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -11,6 +11,7 @@ import {\n } from '@udecode/plate-core';\n import { ELEMENT_LINK } from '../../createLinkPlugin';\n import { TLinkElement } from '../../types';\n+import { getLinkAttributes } from '../../utils/index';\n \n export const useOpenLinkButton = (\n   props: HTMLPropsAs<'a'>\n@@ -31,12 +32,13 @@ export const useOpenLinkButton = (\n     return {};\n   }\n \n-  const [link] = entry;\n+  const [element] = entry;\n+  const linkAttributes = getLinkAttributes(editor, element);\n \n   return {\n-    'aria-label': 'Open link in a new tab',\n+    ...linkAttributes,\n     target: '_blank',\n-    href: link.url,\n+    'aria-label': 'Open link in a new tab',\n     onMouseOver: (e) => {\n       e.stopPropagation();\n     },"
        },
        {
          "filename": "packages/nodes/link/src/components/Link.tsx",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -7,17 +7,17 @@ import {\n   Value,\n } from '@udecode/plate-core';\n import { TLinkElement } from '../types';\n+import { getLinkAttributes } from '../utils/index';\n \n export type LinkRootProps = PlateRenderElementProps<Value, TLinkElement> &\n   HTMLPropsAs<'a'>;\n \n export const useLink = (props: LinkRootProps): HTMLPropsAs<'a'> => {\n+  const { editor } = props;\n+\n   const _props = useElementProps<TLinkElement, 'a'>({\n     ...props,\n-    elementToAttributes: (element) => ({\n-      href: element.url,\n-      target: element.target,\n-    }),\n+    elementToAttributes: (element) => getLinkAttributes(editor, element),\n   });\n \n   return {"
        },
        {
          "filename": "packages/nodes/link/src/createLinkPlugin.ts",
          "status": "modified",
          "additions": 27,
          "deletions": 10,
          "patch": "@@ -1,8 +1,10 @@\n import {\n   createPluginFactory,\n-  isUrl as isUrlProtocol,\n+  isUrl,\n   RangeBeforeOptions,\n } from '@udecode/plate-core';\n+import { getLinkAttributes, validateUrl } from './utils/index';\n+import { TLinkElement } from './types';\n import { withLink } from './withLink';\n \n export const ELEMENT_LINK = 'a';\n@@ -27,6 +29,12 @@ export interface LinkPlugin {\n    */\n   triggerFloatingLinkHotkeys?: string | string[];\n \n+  /**\n+   * List of allowed URL schemes.\n+   * @default ['http', 'https', 'mailto', 'tel']\n+   */\n+  allowedSchemes?: string[];\n+\n   /**\n    * Callback to validate an url.\n    * @default isUrl\n@@ -53,12 +61,10 @@ export const createLinkPlugin = createPluginFactory<LinkPlugin>({\n   key: ELEMENT_LINK,\n   isElement: true,\n   isInline: true,\n-  props: ({ element }) => ({\n-    nodeProps: { href: element?.url, target: element?.target },\n-  }),\n   withOverrides: withLink,\n   options: {\n-    isUrl: isUrlProtocol,\n+    allowedSchemes: ['http', 'https', 'mailto', 'tel'],\n+    isUrl,\n     rangeBeforeOptions: {\n       matchString: ' ',\n       skipInvalid: true,\n@@ -67,17 +73,28 @@ export const createLinkPlugin = createPluginFactory<LinkPlugin>({\n     triggerFloatingLinkHotkeys: 'meta+k, ctrl+k',\n   },\n   then: (editor, { type }) => ({\n+    props: ({ element }) => ({\n+      nodeProps: getLinkAttributes(editor, element as TLinkElement),\n+    }),\n     deserializeHtml: {\n       rules: [\n         {\n           validNodeName: 'A',\n         },\n       ],\n-      getNode: (el) => ({\n-        type,\n-        url: el.getAttribute('href'),\n-        target: el.getAttribute('target') || '_blank',\n-      }),\n+      getNode: (el) => {\n+        const url = el.getAttribute('href');\n+\n+        if (url && validateUrl(editor, url)) {\n+          return {\n+            type,\n+            url,\n+            target: el.getAttribute('target') || '_blank',\n+          };\n+        }\n+\n+        return undefined;\n+      },\n     },\n   }),\n });"
        },
        {
          "filename": "packages/nodes/link/src/transforms/submitFloatingLink.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 7,
          "patch": "@@ -9,6 +9,7 @@ import {\n   floatingLinkSelectors,\n } from '../components/FloatingLink/floatingLinkStore';\n import { ELEMENT_LINK, LinkPlugin } from '../createLinkPlugin';\n+import { validateUrl } from '../utils/index';\n import { upsertLink } from './index';\n \n /**\n@@ -20,14 +21,10 @@ import { upsertLink } from './index';\n export const submitFloatingLink = <V extends Value>(editor: PlateEditor<V>) => {\n   if (!editor.selection) return;\n \n-  const { isUrl, forceSubmit } = getPluginOptions<LinkPlugin, V>(\n-    editor,\n-    ELEMENT_LINK\n-  );\n+  const { forceSubmit } = getPluginOptions<LinkPlugin, V>(editor, ELEMENT_LINK);\n \n   const url = floatingLinkSelectors.url();\n-  const isValid = isUrl?.(url) || forceSubmit;\n-  if (!isValid) return;\n+  if (!forceSubmit && !validateUrl(editor, url)) return;\n \n   const text = floatingLinkSelectors.text();\n   const target = floatingLinkSelectors.newTab() ? undefined : '_self';\n@@ -38,7 +35,7 @@ export const submitFloatingLink = <V extends Value>(editor: PlateEditor<V>) => {\n     url,\n     text,\n     target,\n-    isUrl: (_url) => (forceSubmit || !isUrl ? true : isUrl(_url)),\n+    skipValidation: true,\n   });\n \n   setTimeout(() => {"
        },
        {
          "filename": "packages/nodes/link/src/transforms/upsertLink.spec.tsx",
          "status": "modified",
          "additions": 33,
          "deletions": 3,
          "patch": "@@ -415,7 +415,7 @@ describe('upsertLink', () => {\n     });\n   });\n \n-  describe('when isUrl always true', () => {\n+  describe('when skipValidation is false and url is invalid', () => {\n     const input = (\n       <editor>\n         <hp>\n@@ -426,16 +426,46 @@ describe('upsertLink', () => {\n     ) as any;\n \n     const output = (\n+      <editor>\n+        <hp>insert link.</hp>\n+      </editor>\n+    ) as any;\n+\n+    it('should do nothing', () => {\n+      const editor = createEditor(input);\n+      upsertLink(editor, {\n+        url: 'invalid',\n+        skipValidation: false,\n+      });\n+\n+      expect(input.children).toEqual(output.children);\n+    });\n+  });\n+\n+  describe('when skipValidation is true and url is invalid', () => {\n+    const input = (\n       <editor>\n         <hp>\n-          insert link<ha url=\"test\">test</ha>.\n+          insert link\n+          <cursor />.\n+        </hp>\n+      </editor>\n+    ) as any;\n+\n+    const output = (\n+      <editor>\n+        <hp>\n+          insert link<ha url=\"invalid\">invalid</ha>.\n         </hp>\n       </editor>\n     ) as any;\n \n     it('should insert', () => {\n       const editor = createEditor(input);\n-      upsertLink(editor, { url: 'test', isUrl: (_url) => true });\n+      upsertLink(editor, {\n+        url: 'invalid',\n+        skipValidation: true,\n+      });\n \n       expect(input.children).toEqual(output.children);\n     });"
        },
        {
          "filename": "packages/nodes/link/src/transforms/upsertLink.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -4,7 +4,6 @@ import {\n   getEditorString,\n   getNodeLeaf,\n   getNodeProps,\n-  getPluginOptions,\n   getPluginType,\n   InsertNodesOptions,\n   isDefined,\n@@ -16,9 +15,9 @@ import {\n   Value,\n   WrapNodesOptions,\n } from '@udecode/plate-core';\n-import { ELEMENT_LINK, LinkPlugin } from '../createLinkPlugin';\n+import { ELEMENT_LINK } from '../createLinkPlugin';\n import { TLinkElement } from '../types';\n-import { CreateLinkNodeOptions } from '../utils/index';\n+import { CreateLinkNodeOptions, validateUrl } from '../utils/index';\n import { insertLink } from './insertLink';\n import { unwrapLink } from './unwrapLink';\n import { upsertLinkText } from './upsertLinkText';\n@@ -34,7 +33,7 @@ export type UpsertLinkOptions<\n   insertNodesOptions?: InsertNodesOptions<V>;\n   unwrapNodesOptions?: UnwrapNodesOptions<V>;\n   wrapNodesOptions?: WrapNodesOptions<V>;\n-  isUrl?: (url: string) => boolean;\n+  skipValidation?: boolean;\n };\n \n /**\n@@ -53,7 +52,7 @@ export const upsertLink = <V extends Value>(\n     target,\n     insertTextInLink,\n     insertNodesOptions,\n-    isUrl = getPluginOptions<LinkPlugin, V>(editor, ELEMENT_LINK).isUrl,\n+    skipValidation = false,\n   }: UpsertLinkOptions<V>\n ) => {\n   const at = editor.selection;\n@@ -72,7 +71,7 @@ export const upsertLink = <V extends Value>(\n     return true;\n   }\n \n-  if (!isUrl?.(url)) return;\n+  if (!skipValidation && !validateUrl(editor, url)) return;\n \n   if (isDefined(text) && !text.length) {\n     text = url;"
        },
        {
          "filename": "packages/nodes/link/src/utils/getLinkAttributes.spec.ts",
          "status": "added",
          "additions": 60,
          "deletions": 0,
          "patch": "@@ -0,0 +1,60 @@\n+import { createPlateEditor } from '@udecode/plate-core';\n+import { createLinkPlugin, LinkPlugin } from '../createLinkPlugin';\n+import { TLinkElement } from '../types';\n+import { getLinkAttributes } from './getLinkAttributes';\n+\n+const baseLink = {\n+  type: 'a',\n+  children: [{ text: 'Link text' }],\n+};\n+\n+describe('getLinkAttributes', () => {\n+  const editor = createPlateEditor({\n+    plugins: [createLinkPlugin()],\n+  });\n+\n+  describe('when url is valid', () => {\n+    const link: TLinkElement = {\n+      ...baseLink,\n+      url: 'https://example.com/',\n+      target: '_self',\n+    };\n+\n+    it('should return href and target', () => {\n+      expect(getLinkAttributes(editor, link)).toEqual({\n+        href: 'https://example.com/',\n+        target: '_self',\n+      });\n+    });\n+  });\n+\n+  describe('when url is invalid', () => {\n+    const link: TLinkElement = {\n+      ...baseLink,\n+      // eslint-disable-next-line no-script-url\n+      url: 'javascript://example.com/',\n+      target: '_self',\n+    };\n+\n+    it('href should be undefined', () => {\n+      expect(getLinkAttributes(editor, link)).toEqual({\n+        href: undefined,\n+        target: '_self',\n+      });\n+    });\n+  });\n+\n+  describe('when target is not set', () => {\n+    const link: TLinkElement = {\n+      ...baseLink,\n+      url: 'https://example.com/',\n+    };\n+\n+    it('target should be undefiend', () => {\n+      expect(getLinkAttributes(editor, link)).toEqual({\n+        href: 'https://example.com/',\n+        target: undefined,\n+      });\n+    });\n+  });\n+});"
        },
        {
          "filename": "packages/nodes/link/src/utils/getLinkAttributes.ts",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+import {\n+  getPluginOptions,\n+  PlateEditor,\n+  sanitizeUrl,\n+  Value,\n+} from '@udecode/plate-core';\n+import { ELEMENT_LINK, LinkPlugin } from '../createLinkPlugin';\n+import { TLinkElement } from '../types';\n+\n+export const getLinkAttributes = <V extends Value>(\n+  editor: PlateEditor<V>,\n+  link: TLinkElement\n+) => {\n+  const { allowedSchemes } = getPluginOptions<LinkPlugin, V>(\n+    editor,\n+    ELEMENT_LINK\n+  );\n+\n+  const href = sanitizeUrl(link.url, { allowedSchemes }) || undefined;\n+  const { target } = link;\n+\n+  return { href, target };\n+};"
        },
        {
          "filename": "packages/nodes/link/src/utils/index.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -3,6 +3,8 @@\n  */\n \n export * from './createLinkNode';\n+export * from './getLinkAttributes';\n export * from './triggerFloatingLink';\n export * from './triggerFloatingLinkEdit';\n export * from './triggerFloatingLinkInsert';\n+export * from './validateUrl';"
        },
        {
          "filename": "packages/nodes/link/src/utils/validateUrl.ts",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+import {\n+  getPluginOptions,\n+  PlateEditor,\n+  sanitizeUrl,\n+  Value,\n+} from '@udecode/plate-core';\n+import { ELEMENT_LINK, LinkPlugin } from '../createLinkPlugin';\n+\n+export const validateUrl = <V extends Value>(\n+  editor: PlateEditor<V>,\n+  url: string\n+): boolean => {\n+  const { allowedSchemes, isUrl } = getPluginOptions<LinkPlugin, V>(\n+    editor,\n+    ELEMENT_LINK\n+  );\n+\n+  if (isUrl && !isUrl(url)) return false;\n+\n+  if (\n+    !sanitizeUrl(url, {\n+      allowedSchemes,\n+      permitInvalid: true,\n+    })\n+  )\n+    return false;\n+\n+  return true;\n+};"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "daa31c329c01df0b7c2cecfb24768f8f92c2b124",
            "date": "2025-01-25T07:51:11Z",
            "author_login": "zbeyens"
          },
          {
            "sha": "2869084e85d1b65cb05906001d3e6aa765e67355",
            "date": "2025-01-25T05:09:41Z",
            "author_login": "yf-yang"
          },
          {
            "sha": "e71cbcc7fa6efd7e5e68522db63560529027b992",
            "date": "2025-01-24T20:55:02Z",
            "author_login": "zbeyens"
          },
          {
            "sha": "9534cceafd0d918756f2883fc10550e4e9a4c007",
            "date": "2025-01-24T20:17:21Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "7c82e3f46587498d5e56fb698faef368398798eb",
            "date": "2025-01-24T20:16:25Z",
            "author_login": "zbeyens"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "@udecode/plate-link is the link handler for the udecode/plate rich-text editor plugin system for Slate & React. Affected versions of the link plugin and link UI component do not sanitize URLs to prevent use of the `javascript:` scheme. As a result, links with JavaScript URLs can be inserted into the Plate editor through various means, including opening or pasting malicious content. `@udecode/plate-link` 20.0.0 resolves this issue by introducing an `allowedSchemes` option to the link plugin, defaulting to `['http', 'https', 'mailto', 'tel']`. URLs using a scheme that isn't in this list will not be rendered to the DOM. Users are advised to upgrade. Users unable to upgrade are advised to override the `LinkElement` and `PlateFloatingLink` components with implementations that explicitly check the URL scheme before rendering any anchor elements.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-09T18:15:09.813",
    "last_modified": "2024-11-21T08:06:51.123",
    "fix_date": "2023-02-28T14:26:56Z"
  },
  "references": [
    {
      "url": "https://github.com/udecode/plate/commit/93dd5712854660874900ae12e4d8e6ff28089eb7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/udecode/plate/security/advisories/GHSA-4882-hxpr-hrvm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/udecode/plate/commit/93dd5712854660874900ae12e4d8e6ff28089eb7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/udecode/plate/security/advisories/GHSA-4882-hxpr-hrvm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.348105",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "plate",
    "owner": "udecode",
    "created_at": "2019-12-02T01:40:10Z",
    "updated_at": "2025-01-26T06:30:44Z",
    "pushed_at": "2025-01-26T01:12:30Z",
    "size": 167507,
    "stars": 12835,
    "forks": 780,
    "open_issues": 100,
    "watchers": 12835,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 5158810,
      "MDX": 1225683,
      "HTML": 415018,
      "JavaScript": 66461,
      "CSS": 63561,
      "Shell": 3497
    },
    "commit_activity": {
      "total_commits_last_year": 2237,
      "avg_commits_per_week": 43.01923076923077,
      "days_active_last_year": 283
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:37:07.393089"
  }
}