{
  "cve_id": "CVE-2023-3431",
  "github_data": {
    "repository": "plantuml/plantuml",
    "fix_commit": "fbe7fa3b25b4c887d83927cffb1009ec6cb8ab1e",
    "related_commits": [
      "fbe7fa3b25b4c887d83927cffb1009ec6cb8ab1e",
      "fbe7fa3b25b4c887d83927cffb1009ec6cb8ab1e"
    ],
    "patch_url": "https://github.com/plantuml/plantuml/commit/fbe7fa3b25b4c887d83927cffb1009ec6cb8ab1e.patch",
    "fix_commit_details": {
      "sha": "fbe7fa3b25b4c887d83927cffb1009ec6cb8ab1e",
      "commit_date": "2023-06-13T10:41:34Z",
      "author": {
        "login": "arnaudroques",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: remove legacy ALLOW_INCLUDE use PLANTUML_SECURITY_PROFILE instead",
        "length": 126,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 157,
        "additions": 78,
        "deletions": 79
      },
      "files": [
        {
          "filename": "gradle.properties",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n # Warning, \"version\" should be the same in gradle.properties and Version.java\n # Any idea anyone how to magically synchronize those :-) ?\n-version = 1.2023.9beta4\n+version = 1.2023.9beta5\n org.gradle.workers.max = 3\n\\ No newline at end of file"
        },
        {
          "filename": "src/net/sourceforge/plantuml/OptionFlags.java",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -74,11 +74,11 @@ public final void setReplaceWhiteBackgroundByTransparent(boolean replaceWhiteBac\n \t// static public boolean GRAPHVIZCACHE = false;\n \t// static public final boolean TRACE_DOT = false;\n \n-\tstatic public boolean ALLOW_INCLUDE = true;\n-\n-\tstatic public void setAllowIncludeFalse() {\n-\t\tALLOW_INCLUDE = false;\n-\t}\n+//\tstatic public boolean ALLOW_INCLUDE = true;\n+//\n+//\tstatic public void setAllowIncludeFalse() {\n+//\t\tALLOW_INCLUDE = false;\n+//\t}\n \n \tstatic public void setMaxPixel(int max) {\n \t}"
        },
        {
          "filename": "src/net/sourceforge/plantuml/preproc/ImportedFiles.java",
          "status": "modified",
          "additions": 25,
          "deletions": 28,
          "patch": "@@ -40,7 +40,6 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import net.sourceforge.plantuml.OptionFlags;\n import net.sourceforge.plantuml.file.AFile;\n import net.sourceforge.plantuml.file.AFileRegular;\n import net.sourceforge.plantuml.file.AFileZipEntry;\n@@ -63,9 +62,9 @@ private ImportedFiles(List<SFile> imported, AParentFolder currentDir) {\n \t}\n \n \tpublic ImportedFiles withCurrentDir(AParentFolder newCurrentDir) {\n-\t\tif (newCurrentDir == null) {\n+\t\tif (newCurrentDir == null) \n \t\t\treturn this;\n-\t\t}\n+\t\t\n \t\treturn new ImportedFiles(imported, newCurrentDir);\n \t}\n \n@@ -82,27 +81,27 @@ public AFile getAFile(String nameOrPath) throws IOException {\n \t\t// Log.info(\"ImportedFiles::getAFile nameOrPath = \" + nameOrPath);\n \t\t// Log.info(\"ImportedFiles::getAFile currentDir = \" + currentDir);\n \t\tfinal AParentFolder dir = currentDir;\n-\t\tif (dir == null || isAbsolute(nameOrPath)) {\n+\t\tif (dir == null || isAbsolute(nameOrPath)) \n \t\t\treturn new AFileRegular(new SFile(nameOrPath).getCanonicalFile());\n-\t\t}\n+\t\t\n \t\t// final File filecurrent = SecurityUtils.File(dir.getAbsoluteFile(),\n \t\t// nameOrPath);\n \t\tfinal AFile filecurrent = dir.getAFile(nameOrPath);\n \t\tLog.info(\"ImportedFiles::getAFile filecurrent = \" + filecurrent);\n-\t\tif (filecurrent != null && filecurrent.isOk()) {\n+\t\tif (filecurrent != null && filecurrent.isOk()) \n \t\t\treturn filecurrent;\n-\t\t}\n+\t\t\n \t\tfor (SFile d : getPath()) {\n \t\t\tif (d.isDirectory()) {\n \t\t\t\tfinal SFile file = d.file(nameOrPath);\n-\t\t\t\tif (file.exists()) {\n+\t\t\t\tif (file.exists()) \n \t\t\t\t\treturn new AFileRegular(file.getCanonicalFile());\n-\t\t\t\t}\n+\t\t\t\t\n \t\t\t} else if (d.isFile()) {\n \t\t\t\tfinal AFileZipEntry zipEntry = new AFileZipEntry(d, nameOrPath);\n-\t\t\t\tif (zipEntry.isOk()) {\n+\t\t\t\tif (zipEntry.isOk()) \n \t\t\t\t\treturn zipEntry;\n-\t\t\t\t}\n+\t\t\t\t\n \t\t\t}\n \t\t}\n \t\treturn filecurrent;\n@@ -150,27 +149,25 @@ public FileWithSuffix getFile(String filename, String suffix) throws IOException\n \t\t\tfile = getAFile(filename.substring(0, idx));\n \t\t\tentry = filename.substring(idx + 1);\n \t\t}\n-\t\tif (isAllowed(file) == false)\n+\t\t// if (isAllowed(file) == false)\n+\t\tif (file == null || file.getUnderlyingFile().isFileOk() == false)\n \t\t\treturn FileWithSuffix.none();\n \n \t\treturn new FileWithSuffix(filename, suffix, file, entry);\n \t}\n \n-\tprivate boolean isAllowed(AFile file) throws IOException {\n-\t\t// ::comment when __CORE__\n-\t\tif (OptionFlags.ALLOW_INCLUDE)\n-\t\t\treturn true;\n-\n-\t\tif (file != null) {\n-\t\t\tfinal SFile folder = file.getSystemFolder();\n-\t\t\t// System.err.println(\"canonicalPath=\" + path + \" \" + folder + \" \" +\n-\t\t\t// INCLUDE_PATH);\n-\t\t\tif (includePath().contains(folder))\n-\t\t\t\treturn true;\n-\n-\t\t}\n-\t\t// ::done\n-\t\treturn false;\n-\t}\n+//\tprivate boolean isAllowed(AFile file) throws IOException {\n+//\t\t// ::comment when __CORE__\n+//\t\tif (file != null) {\n+//\t\t\tfinal SFile folder = file.getSystemFolder();\n+//\t\t\t// System.err.println(\"canonicalPath=\" + path + \" \" + folder + \" \" +\n+//\t\t\t// INCLUDE_PATH);\n+//\t\t\tif (includePath().contains(folder) && folder.isFileOk())\n+//\t\t\t\treturn true;\n+//\n+//\t\t}\n+//\t\t// ::done\n+//\t\treturn false;\n+//\t}\n \n }"
        },
        {
          "filename": "src/net/sourceforge/plantuml/security/SFile.java",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -117,9 +117,9 @@ private SFile(File internal) {\n \t}\n \n \tpublic static SFile fromFile(File internal) {\n-\t\tif (internal == null) {\n+\t\tif (internal == null)\n \t\t\treturn null;\n-\t\t}\n+\n \t\treturn new SFile(internal);\n \t}\n \n@@ -257,7 +257,7 @@ public boolean renameTo(SFile dest) {\n \t/**\n \t * Check SecurityProfile to see if this file can be open.\n \t */\n-\tprivate boolean isFileOk() {\n+\tpublic boolean isFileOk() {\n \t\t// ::comment when __CORE__\n \t\tif (SecurityUtils.getSecurityProfile() == SecurityProfile.SANDBOX)\n \t\t\t// In SANDBOX, we cannot read any files"
        },
        {
          "filename": "src/net/sourceforge/plantuml/security/SURL.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -216,7 +216,7 @@ public BufferedImage readRasterImageFromURL() {\n \t/**\n \t * Check SecurityProfile to see if this URL can be opened.\n \t */\n-\tprivate boolean isUrlOk() {\n+\tpublic boolean isUrlOk() {\n \t\t// ::comment when __CORE__\n \t\tif (SecurityUtils.getSecurityProfile() == SecurityProfile.SANDBOX)\n \t\t\t// In SANDBOX, we cannot read any URL"
        },
        {
          "filename": "src/net/sourceforge/plantuml/security/SecurityProfile.java",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "patch": "@@ -55,7 +55,7 @@\n  * \n  */\n public enum SecurityProfile {\n-    // ::remove folder when __HAXE__\n+\t// ::remove folder when __HAXE__\n \n \t/**\n \t * Running in SANDBOX mode is completely secure. No local file can be read\n@@ -161,4 +161,17 @@ public long getTimeout() {\n \t\tthrow new AssertionError();\n \t}\n \n+\tpublic boolean canWeReadThisEnvironmentVariable(String name) {\n+\t\tif (name == null)\n+\t\t\treturn false;\n+\n+\t\tif (this == UNSECURE)\n+\t\t\treturn true;\n+\t\t\n+\t\tif (name.toLowerCase().startsWith(\"plantuml\"))\n+\t\t\treturn true;\n+\t\t\n+\t\treturn true;\n+\t}\n+\n }"
        },
        {
          "filename": "src/net/sourceforge/plantuml/security/SecurityUtils.java",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -222,16 +222,16 @@ public static String getenv(String name) {\n \t\treturn System.getenv(alternateName);\n \t}\n \n-\t/**\n-\t * Checks the environment variable and returns true if the variable is used in\n-\t * security context. In this case, the value should not be displayed in scripts.\n-\t *\n-\t * @param name Environment variable to check\n-\t * @return true, if this is a secret variable\n-\t */\n-\tpublic static boolean isSecurityEnv(String name) {\n-\t\treturn name != null && name.toLowerCase().startsWith(\"plantuml.security.\");\n-\t}\n+//\t/**\n+//\t * Checks the environment variable and returns true if the variable is used in\n+//\t * security context. In this case, the value should not be displayed in scripts.\n+//\t *\n+//\t * @param name Environment variable to check\n+//\t * @return true, if this is a secret variable\n+//\t */\n+//\tpublic static boolean isSecurityEnv(String name) {\n+//\t\treturn name != null && name.toLowerCase().startsWith(\"plantuml.security.\");\n+//\t}\n \n \t/**\n \t * Configuration for Non-SSL authentication methods."
        },
        {
          "filename": "src/net/sourceforge/plantuml/tim/stdlib/FileExists.java",
          "status": "modified",
          "additions": 5,
          "deletions": 11,
          "patch": "@@ -38,7 +38,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import net.sourceforge.plantuml.OptionFlags;\n import net.sourceforge.plantuml.security.SFile;\n import net.sourceforge.plantuml.tim.EaterException;\n import net.sourceforge.plantuml.tim.EaterExceptionLocated;\n@@ -61,18 +60,13 @@ public boolean canCover(int nbArg, Set<String> namedArgument) {\n \tpublic TValue executeReturnFunction(TContext context, TMemory memory, LineLocation location, List<TValue> values,\n \t\t\tMap<String, TValue> named) throws EaterException, EaterExceptionLocated {\n \t\t// ::comment when __CORE__\n-\t\tif (OptionFlags.ALLOW_INCLUDE == false)\n-\t\t\t// ::done\n-\t\t\treturn TValue.fromBoolean(false);\n-\t\t// ::comment when __CORE__\n-\n \t\tfinal String path = values.get(0).toString();\n-\t\treturn TValue.fromBoolean(fileExists(path));\n+\t\treturn TValue.fromBoolean(new SFile(path).exists());\n \t\t// ::done\n-\t}\n \n-\tprivate boolean fileExists(String path) {\n-\t\tfinal SFile f = new SFile(path);\n-\t\treturn f.exists();\n+\t\t// ::uncomment when __CORE__\n+\t\t// return TValue.fromBoolean(false);\n+\t\t// ::done\n \t}\n+\n }"
        },
        {
          "filename": "src/net/sourceforge/plantuml/tim/stdlib/Getenv.java",
          "status": "modified",
          "additions": 7,
          "deletions": 9,
          "patch": "@@ -38,7 +38,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import net.sourceforge.plantuml.OptionFlags;\n import net.sourceforge.plantuml.security.SecurityUtils;\n import net.sourceforge.plantuml.tim.EaterException;\n import net.sourceforge.plantuml.tim.EaterExceptionLocated;\n@@ -61,18 +60,16 @@ public boolean canCover(int nbArg, Set<String> namedArgument) {\n \tpublic TValue executeReturnFunction(TContext context, TMemory memory, LineLocation location, List<TValue> values,\n \t\t\tMap<String, TValue> named) throws EaterException, EaterExceptionLocated {\n \t\t// ::comment when __CORE__\n-\t\tif (OptionFlags.ALLOW_INCLUDE == false)\n-\t\t\t// ::done\n-\t\t\treturn TValue.fromString(\"\");\n-\t\t// ::comment when __CORE__\n-\n-\t\tfinal String name = values.get(0).toString();\n-\t\tfinal String value = getenv(name);\n+\t\tfinal String value = getenv(values.get(0).toString());\n \t\tif (value == null)\n \t\t\treturn TValue.fromString(\"\");\n \n \t\treturn TValue.fromString(value);\n \t\t// ::done\n+\n+\t\t// ::uncomment when __CORE__\n+\t\t// return TValue.fromString(\"\");\n+\t\t// ::done\n \t}\n \n \t// ::comment when __CORE__\n@@ -81,8 +78,9 @@ private String getenv(String name) {\n \t\t// A plantuml server should have an own SecurityManager to\n \t\t// avoid access to properties and environment variables, but we should\n \t\t// also stop here in other deployments.\n-\t\tif (SecurityUtils.isSecurityEnv(name))\n+\t\tif (SecurityUtils.getSecurityProfile().canWeReadThisEnvironmentVariable(name) == false)\n \t\t\treturn null;\n+\t\t\n \t\tfinal String env = System.getProperty(name);\n \t\tif (env != null)\n \t\t\treturn env;"
        },
        {
          "filename": "src/net/sourceforge/plantuml/tim/stdlib/LoadJson.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -165,9 +165,8 @@ private String loadStringData(String path, String charset) throws EaterException\n \t\tbyte[] byteData = null;\n \t\tif (path.startsWith(\"http://\") || path.startsWith(\"https://\")) {\n \t\t\tfinal SURL url = SURL.create(path);\n-\t\t\tif (url == null)\n-\t\t\t\tthrow EaterException.located(\"load JSON: Invalid URL \" + path);\n-\t\t\tbyteData = url.getBytes();\n+\t\t\tif (url != null)\n+\t\t\t\tbyteData = url.getBytes();\n \t\t\t// ::comment when __CORE__\n \t\t} else {\n \t\t\ttry {\n@@ -179,7 +178,6 @@ private String loadStringData(String path, String charset) throws EaterException\n \t\t\t\t}\n \t\t\t} catch (IOException e) {\n \t\t\t\tLogme.error(e);\n-\t\t\t\tthrow EaterException.located(\"load JSON: Cannot read file \" + path + \". \" + e.getMessage());\n \t\t\t}\n \t\t\t// ::done\n \t\t}"
        },
        {
          "filename": "src/net/sourceforge/plantuml/version/LicenseInfo.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -108,8 +108,8 @@ public static boolean retrieveNamedOrDistributorQuickIsValid() {\n \n \tpublic static synchronized LicenseInfo retrieveNamedSlow() {\n \t\tcache = LicenseInfo.NONE;\n-\t\tif (OptionFlags.ALLOW_INCLUDE == false)\n-\t\t\treturn cache;\n+//\t\tif (OptionFlags.ALLOW_INCLUDE == false)\n+//\t\t\treturn cache;\n \n \t\tfinal String key = prefs.get(\"license\", \"\");\n \t\tif (key.length() > 0) {"
        },
        {
          "filename": "src/net/sourceforge/plantuml/version/PSystemVersion.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -175,9 +175,8 @@ public static PSystemVersion createShowVersion2(UmlSource source) {\n \t\t// :: done\n \t\t// :: comment when __CORE__\n \t\tGraphvizCrash.checkOldVersionWarning(strings);\n-\t\tif (OptionFlags.ALLOW_INCLUDE) {\n-\t\t\tif (SecurityUtils.getSecurityProfile() == SecurityProfile.UNSECURE)\n-\t\t\t\tstrings.add(\"Loaded from \" + Version.getJarPath());\n+\t\tif (SecurityUtils.getSecurityProfile() == SecurityProfile.UNSECURE) {\n+\t\t\tstrings.add(\"Loaded from \" + Version.getJarPath());\n \n \t\t\tif (OptionFlags.getInstance().isWord()) {\n \t\t\t\tstrings.add(\"Word Mode\");"
        },
        {
          "filename": "src/net/sourceforge/plantuml/version/Version.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -46,7 +46,7 @@ public class Version {\n \n \t// Warning, \"version\" should be the same in gradle.properties and Version.java\n \t// Any idea anyone how to magically synchronize those :-) ?\n-\tprivate static final String version = \"1.2023.9beta4\";\n+\tprivate static final String version = \"1.2023.9beta5\";\n \n \tpublic static String versionString() {\n \t\treturn version;"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ef3fbc0918f4fcc56a9813fccafaec31d05a4344",
            "date": "2025-01-14T11:53:18Z",
            "author_login": "arnaudroques"
          },
          {
            "sha": "9eaa2bbbf56f440492695d96379834e36a685dc0",
            "date": "2025-01-14T10:16:02Z",
            "author_login": "shunlibest"
          },
          {
            "sha": "d745338f51feb8e3e63fd7fad65810f69993a2f2",
            "date": "2025-01-13T16:06:32Z",
            "author_login": "arnaudroques"
          },
          {
            "sha": "15a63cdf59959fa0af97a072c757a97e2cc34612",
            "date": "2025-01-11T18:11:51Z",
            "author_login": "JanRoma"
          },
          {
            "sha": "523c24e72e5ba6b06c41f365083ed0c136d1ee6b",
            "date": "2025-01-11T15:55:45Z",
            "author_login": "arnaudroques"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-284",
    "description": "Improper Access Control in GitHub repository plantuml/plantuml prior to 1.2023.9.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-27T15:15:11.743",
    "last_modified": "2024-11-21T08:17:15.083",
    "fix_date": "2023-06-13T10:41:34Z"
  },
  "references": [
    {
      "url": "https://github.com/plantuml/plantuml/commit/fbe7fa3b25b4c887d83927cffb1009ec6cb8ab1e",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/fa741f95-b53c-4ed7-b157-e32c5145164c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FV7XL3CY3K3K5ER3ASMEQA546MIQQ7QM/",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/plantuml/plantuml/commit/fbe7fa3b25b4c887d83927cffb1009ec6cb8ab1e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/fa741f95-b53c-4ed7-b157-e32c5145164c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FV7XL3CY3K3K5ER3ASMEQA546MIQQ7QM/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.867630",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "plantuml",
    "owner": "plantuml",
    "created_at": "2010-11-04T15:55:50Z",
    "updated_at": "2025-01-14T11:53:23Z",
    "pushed_at": "2025-01-14T11:53:19Z",
    "size": 276546,
    "stars": 10849,
    "forks": 988,
    "open_issues": 484,
    "watchers": 10849,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 14021875,
      "JavaScript": 8186,
      "HTML": 7397,
      "Shell": 5652,
      "Dockerfile": 1752,
      "CSS": 205
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:17:59.565359"
  }
}