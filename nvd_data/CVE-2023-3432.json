{
  "cve_id": "CVE-2023-3432",
  "github_data": {
    "repository": "plantuml/plantuml",
    "fix_commit": "b32500bb61ae617bb312496d6d832e4be8190797",
    "related_commits": [
      "b32500bb61ae617bb312496d6d832e4be8190797",
      "b32500bb61ae617bb312496d6d832e4be8190797"
    ],
    "patch_url": "https://github.com/plantuml/plantuml/commit/b32500bb61ae617bb312496d6d832e4be8190797.patch",
    "fix_commit_details": {
      "sha": "b32500bb61ae617bb312496d6d832e4be8190797",
      "commit_date": "2023-06-12T20:49:47Z",
      "author": {
        "login": "arnaudroques",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: improve filelist support and nwdiag",
        "length": 40,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 359,
        "additions": 259,
        "deletions": 100
      },
      "files": [
        {
          "filename": "gradle.properties",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n # Warning, \"version\" should be the same in gradle.properties and Version.java\n # Any idea anyone how to magically synchronize those :-) ?\n-version = 1.2023.9beta3\n+version = 1.2023.9beta4\n org.gradle.workers.max = 3\n\\ No newline at end of file"
        },
        {
          "filename": "src/net/sourceforge/plantuml/file/AParentFolderRegular.java",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -57,15 +57,15 @@ public AFile getAFile(String nameOrPath) throws IOException {\n \t\tfinal SFile filecurrent;\n \t\t// Log.info(\"AParentFolderRegular::looking for \" + nameOrPath);\n \t\t// Log.info(\"AParentFolderRegular::dir = \" + dir);\n-\t\tif (dir == null) {\n+\t\tif (dir == null)\n \t\t\tfilecurrent = new SFile(nameOrPath);\n-\t\t} else {\n+\t\telse\n \t\t\tfilecurrent = dir.getAbsoluteFile().file(nameOrPath);\n-\t\t}\n+\n \t\t// Log.info(\"AParentFolderRegular::Filecurrent \" + filecurrent);\n-\t\tif (filecurrent.exists()) {\n+\t\tif (filecurrent.exists())\n \t\t\treturn new AFileRegular(filecurrent.getCanonicalFile());\n-\t\t}\n+\n \t\treturn null;\n \t}\n "
        },
        {
          "filename": "src/net/sourceforge/plantuml/filesdiagram/FilesEntry.java",
          "status": "added",
          "additions": 111,
          "deletions": 0,
          "patch": "@@ -0,0 +1,111 @@\n+/* ========================================================================\n+ * PlantUML : a free UML diagram generator\n+ * ========================================================================\n+ *\n+ * (C) Copyright 2009-2024, Arnaud Roques\n+ *\n+ * Project Info:  https://plantuml.com\n+ * \n+ * If you like this project or if you find it useful, you can support us at:\n+ * \n+ * https://plantuml.com/patreon (only 1$ per month!)\n+ * https://plantuml.com/paypal\n+ * \n+ * This file is part of PlantUML.\n+ *\n+ * PlantUML is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * PlantUML distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n+ * USA.\n+ *\n+ *\n+ * Original Author:  Arnaud Roques\n+ *\n+ */\n+package net.sourceforge.plantuml.filesdiagram;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import net.sourceforge.plantuml.klimt.UTranslate;\n+import net.sourceforge.plantuml.klimt.creole.Display;\n+import net.sourceforge.plantuml.klimt.drawing.UGraphic;\n+import net.sourceforge.plantuml.klimt.font.FontConfiguration;\n+import net.sourceforge.plantuml.klimt.geom.HorizontalAlignment;\n+import net.sourceforge.plantuml.klimt.shape.TextBlock;\n+import net.sourceforge.plantuml.style.ISkinParam;\n+\n+public class FilesEntry implements Iterable<FilesEntry> {\n+\n+\tprivate final String name;\n+\tprivate FilesType type;\n+\tprivate List<FilesEntry> children = new ArrayList<>();\n+\n+\tpublic FilesEntry(String name, FilesType type) {\n+\t\tthis.name = name;\n+\t\tthis.type = type;\n+\t}\n+\n+\tpublic FilesEntry addRawEntry(String raw) {\n+\t\tfinal int x = raw.indexOf('/');\n+\t\tif (x == -1) {\n+\t\t\tfinal FilesEntry result = new FilesEntry(raw, FilesType.DATA);\n+\t\t\tchildren.add(result);\n+\t\t\treturn result;\n+\t\t}\n+\t\tfinal FilesEntry folder = getOrCreateFolder(raw.substring(0, x));\n+\t\tfinal String remain = raw.substring(x + 1);\n+\t\tif (remain.length() == 0)\n+\t\t\treturn folder;\n+\t\treturn folder.addRawEntry(remain);\n+\t}\n+\n+\tprivate FilesEntry getOrCreateFolder(String folderName) {\n+\t\tfor (FilesEntry child : children)\n+\t\t\tif (child.type == FilesType.FOLDER && child.getName().equals(folderName))\n+\t\t\t\treturn child;\n+\n+\t\tfinal FilesEntry result = new FilesEntry(folderName, FilesType.FOLDER);\n+\t\tchildren.add(result);\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic Iterator<FilesEntry> iterator() {\n+\t\treturn Collections.unmodifiableCollection(children).iterator();\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic String getEmoticon() {\n+\t\tif (type == FilesType.FOLDER)\n+\t\t\treturn \"<:1f4c2:>\";\n+\t\t// return \"<:1f4c1:>\";\n+\t\treturn \"<:1f4c4:>\";\n+\t}\n+\n+\tpublic UGraphic drawAndMove(UGraphic ug, FontConfiguration fontConfiguration, ISkinParam skinParam, double deltax) {\n+\t\tfinal Display display = Display.getWithNewlines(getEmoticon() + getName());\n+\t\tTextBlock result = display.create(fontConfiguration, HorizontalAlignment.LEFT, skinParam);\n+\t\tresult.drawU(ug.apply(UTranslate.dx(deltax)));\n+\t\tug = ug.apply(UTranslate.dy(result.calculateDimension(ug.getStringBounder()).getHeight() + 2));\n+\t\tfor (FilesEntry child : children)\n+\t\t\tug = child.drawAndMove(ug, fontConfiguration, skinParam, deltax + 21);\n+\t\treturn ug;\n+\t}\n+\n+}"
        },
        {
          "filename": "src/net/sourceforge/plantuml/filesdiagram/FilesListing.java",
          "status": "modified",
          "additions": 4,
          "deletions": 16,
          "patch": "@@ -34,26 +34,19 @@\n  */\n package net.sourceforge.plantuml.filesdiagram;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import net.sourceforge.plantuml.klimt.UTranslate;\n-import net.sourceforge.plantuml.klimt.creole.Display;\n import net.sourceforge.plantuml.klimt.drawing.UGraphic;\n import net.sourceforge.plantuml.klimt.font.FontConfiguration;\n import net.sourceforge.plantuml.klimt.font.StringBounder;\n import net.sourceforge.plantuml.klimt.font.UFont;\n-import net.sourceforge.plantuml.klimt.geom.HorizontalAlignment;\n import net.sourceforge.plantuml.klimt.geom.XDimension2D;\n import net.sourceforge.plantuml.klimt.shape.AbstractTextBlock;\n-import net.sourceforge.plantuml.klimt.shape.TextBlock;\n import net.sourceforge.plantuml.style.ISkinParam;\n \n public class FilesListing extends AbstractTextBlock {\n \n \tprivate final ISkinParam skinParam;\n \tprivate final FontConfiguration fontConfiguration = FontConfiguration.blackBlueTrue(UFont.courier(14));\n-\tprivate final List<String> tmp = new ArrayList<>();\n+\tprivate final FilesEntry root = new FilesEntry(\"\", FilesType.FOLDER);\n \n \tpublic FilesListing(ISkinParam skinParam) {\n \t\tthis.skinParam = skinParam;\n@@ -66,18 +59,13 @@ public XDimension2D calculateDimension(StringBounder stringBounder) {\n \n \t@Override\n \tpublic void drawU(UGraphic ug) {\n-\t\tfor (String s : tmp) {\n-\t\t\tfinal Display display = Display.getWithNewlines(\"<:1f4c4:>\" + s);\n-\t\t\tTextBlock result = display.create(fontConfiguration, HorizontalAlignment.LEFT, skinParam);\n-\t\t\tresult.drawU(ug);\n-\t\t\tug = ug.apply(UTranslate.dy(result.calculateDimension(ug.getStringBounder()).getHeight()));\n-\t\t}\n-\n+\t\tfor (FilesEntry ent : root)\n+\t\t\tug = ent.drawAndMove(ug, fontConfiguration, skinParam, 0);\n \t}\n \n \tpublic void add(String line) {\n \t\tif (line.startsWith(\"/\"))\n-\t\t\ttmp.add(line.substring(1));\n+\t\t\troot.addRawEntry(line.substring(1));\n \t}\n \n }"
        },
        {
          "filename": "src/net/sourceforge/plantuml/filesdiagram/FilesType.java",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+/* ========================================================================\n+ * PlantUML : a free UML diagram generator\n+ * ========================================================================\n+ *\n+ * (C) Copyright 2009-2024, Arnaud Roques\n+ *\n+ * Project Info:  https://plantuml.com\n+ * \n+ * If you like this project or if you find it useful, you can support us at:\n+ * \n+ * https://plantuml.com/patreon (only 1$ per month!)\n+ * https://plantuml.com/paypal\n+ * \n+ * This file is part of PlantUML.\n+ *\n+ * PlantUML is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * PlantUML distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n+ * USA.\n+ *\n+ *\n+ * Original Author:  Arnaud Roques\n+ *\n+ */\n+package net.sourceforge.plantuml.filesdiagram;\n+\n+public enum FilesType {\n+\tFOLDER, DATA;\n+\n+}"
        },
        {
          "filename": "src/net/sourceforge/plantuml/klimt/sprite/SpriteColor.java",
          "status": "modified",
          "additions": 15,
          "deletions": 15,
          "patch": "@@ -66,26 +66,26 @@ public SpriteColor(int width, int height) {\n \t}\n \n \tpublic void setGray(int x, int y, int level) {\n-\t\tif (x < 0 || x >= width) {\n+\t\tif (x < 0 || x >= width)\n \t\t\treturn;\n-\t\t}\n-\t\tif (y < 0 || y >= height) {\n+\n+\t\tif (y < 0 || y >= height)\n \t\t\treturn;\n-\t\t}\n-\t\tif (level < 0 || level >= 16) {\n+\n+\t\tif (level < 0 || level >= 16)\n \t\t\tthrow new IllegalArgumentException();\n-\t\t}\n+\n \t\tgray[y][x] = level;\n \t\tcolor[y][x] = -1;\n \t}\n \n \tpublic void setColor(int x, int y, int col) {\n-\t\tif (x < 0 || x >= width) {\n+\t\tif (x < 0 || x >= width)\n \t\t\treturn;\n-\t\t}\n-\t\tif (y < 0 || y >= height) {\n+\n+\t\tif (y < 0 || y >= height)\n \t\t\treturn;\n-\t\t}\n+\n \t\tgray[y][x] = -1;\n \t\tcolor[y][x] = col;\n \t}\n@@ -99,14 +99,14 @@ public int getWidth() {\n \t}\n \n \tpublic UImage toUImage(ColorMapper colorMapper, HColor backcolor, HColor forecolor) {\n-\t\tfinal BufferedImage im = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+\t\tfinal BufferedImage im = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n \n-\t\tif (backcolor == null) {\n+\t\tif (backcolor == null)\n \t\t\tbackcolor = HColors.WHITE;\n-\t\t}\n-\t\tif (forecolor == null) {\n+\n+\t\tif (forecolor == null)\n \t\t\tforecolor = HColors.BLACK;\n-\t\t}\n+\n \t\tfinal HColorGradient gradient = HColors.gradient(backcolor, forecolor, '\\0');\n \t\tfor (int col = 0; col < width; col++) {\n \t\t\tfor (int line = 0; line < height; line++) {"
        },
        {
          "filename": "src/net/sourceforge/plantuml/nwdiag/NwDiagram.java",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -150,11 +150,27 @@ public CommandExecutionResult openNetwork(String name) {\n \t\tfor (NStackable element : stack)\n \t\t\tif (element instanceof Network)\n \t\t\t\treturn CommandExecutionResult.error(\"Cannot nest network\");\n+\n+\t\tif (networks.size() == 0 && groups.size() == 0)\n+\t\t\teventuallyConnectAllStandaloneServersToHiddenNetwork();\n+\n \t\tfinal Network network = createNetwork(name);\n \t\tstack.add(0, network);\n \t\treturn CommandExecutionResult.ok();\n \t}\n \n+\tprivate void eventuallyConnectAllStandaloneServersToHiddenNetwork() {\n+\t\tNetwork first = null;\n+\t\tfor (NServer server : servers.values())\n+\t\t\tif (server.isAlone()) {\n+\t\t\t\tif (first == null) {\n+\t\t\t\t\tfirst = createNetwork(\"\");\n+\t\t\t\t\tfirst.goInvisible();\n+\t\t\t\t}\n+\t\t\t\tserver.connectMeIfAlone(first);\n+\t\t\t}\n+\t}\n+\n \tpublic CommandExecutionResult closeSomething() {\n \t\tif (initDone == false)\n \t\t\treturn errorNoInit();"
        },
        {
          "filename": "src/net/sourceforge/plantuml/nwdiag/core/NServer.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -112,6 +112,8 @@ public void blankSomeAddress() {\n \t}\n \n \tpublic void learnThisAddress(String address) {\n+\t\tif (address == null)\n+\t\t\taddress = \"\";\n \t\tfor (Entry<Network, String> ent : connections.entrySet()) {\n \t\t\tif (ent.getValue().length() == 0) {\n \t\t\t\tconnections.put(ent.getKey(), address);"
        },
        {
          "filename": "src/net/sourceforge/plantuml/security/SURL.java",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -250,7 +250,7 @@ private boolean isUrlOk() {\n \t/**\n \t * Regex to remove the UserInfo part from a URL.\n \t */\n-\tprivate static final Pattern PATTERN_USERINFO = Pattern.compile(\"(^https?://)([-_0-9a-zA-Z]+@)([^@]*)\");\n+\tprivate static final Pattern PATTERN_USERINFO = Pattern.compile(\"(^https?://)([-_0-9a-zA-Z]+@)([^@]*)$\");\n \n \tprivate static final ExecutorService EXE = Executors.newCachedThreadPool(new ThreadFactory() {\n \t\tpublic Thread newThread(Runnable r) {\n@@ -292,6 +292,9 @@ public String toString() {\n \t}\n \n \tprivate boolean forbiddenURL(String full) {\n+\t\t// Thanks to Agasthya Kasturi\n+\t\tif (full.contains(\"@\"))\n+\t\t\treturn true;\n \t\tif (full.startsWith(\"https://\") == false && full.startsWith(\"http://\") == false)\n \t\t\treturn true;\n \t\tif (full.matches(\"^https?://[-#.0-9:\\\\[\\\\]+]+/.*\"))\n@@ -305,6 +308,9 @@ private boolean forbiddenURL(String full) {\n \n \tprivate boolean isInUrlAllowList() {\n \t\tfinal String full = cleanPath(internal.toString());\n+\t\t// Thanks to Agasthya Kasturi\n+\t\tif (full.contains(\"@\"))\n+\t\t\treturn false;\n \t\tfor (String allow : getUrlAllowList())\n \t\t\tif (full.startsWith(cleanPath(allow)))\n \t\t\t\treturn true;"
        },
        {
          "filename": "src/net/sourceforge/plantuml/tim/TFunctionImpl.java",
          "status": "modified",
          "additions": 30,
          "deletions": 33,
          "patch": "@@ -60,37 +60,36 @@ public class TFunctionImpl implements TFunction {\n \tpublic TFunctionImpl(String functionName, List<TFunctionArgument> args, boolean unquoted,\n \t\t\tTFunctionType functionType) {\n \t\tfinal Set<String> names = new HashSet<>();\n-\t\tfor (TFunctionArgument tmp : args) {\n+\t\tfor (TFunctionArgument tmp : args)\n \t\t\tnames.add(tmp.getName());\n-\t\t}\n+\n \t\tthis.signature = new TFunctionSignature(functionName, args.size(), names);\n \t\tthis.args = args;\n \t\tthis.unquoted = unquoted;\n \t\tthis.functionType = functionType;\n \t}\n \n \tpublic boolean canCover(int nbArg, Set<String> namedArguments) {\n-\t\tfor (String n : namedArguments) {\n-\t\t\tif (signature.getNamedArguments().contains(n) == false) {\n+\t\tfor (String n : namedArguments)\n+\t\t\tif (signature.getNamedArguments().contains(n) == false)\n \t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\tif (nbArg > args.size()) {\n+\n+\t\tif (nbArg > args.size())\n \t\t\treturn false;\n-\t\t}\n+\n \t\tassert nbArg <= args.size();\n \t\tint neededArgument = 0;\n \t\tfor (TFunctionArgument arg : args) {\n-\t\t\tif (namedArguments.contains(arg.getName())) {\n+\t\t\tif (namedArguments.contains(arg.getName()))\n \t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tif (arg.getOptionalDefaultValue() == null) {\n+\n+\t\t\tif (arg.getOptionalDefaultValue() == null)\n \t\t\t\tneededArgument++;\n-\t\t\t}\n+\n \t\t}\n-\t\tif (nbArg < neededArgument) {\n+\t\tif (nbArg < neededArgument)\n \t\t\treturn false;\n-\t\t}\n+\n \t\tassert nbArg >= neededArgument;\n \t\treturn true;\n \t}\n@@ -108,9 +107,9 @@ private TMemory getNewMemory(TMemory memory, List<TValue> values, Map<String, TV\n \t\t\t} else {\n \t\t\t\tvalue = arg.getOptionalDefaultValue();\n \t\t\t}\n-\t\t\tif (value == null) {\n+\t\t\tif (value == null)\n \t\t\t\tthrow new IllegalStateException();\n-\t\t\t}\n+\n \t\t\tresult.put(arg.getName(), value);\n \t\t}\n \t\treturn memory.forkFromGlobal(result);\n@@ -125,11 +124,9 @@ public void addBody(StringLocated s) throws EaterExceptionLocated {\n \t\tbody.add(s);\n \t\tif (s.getType() == TLineType.RETURN) {\n \t\t\tthis.containsReturn = true;\n-\t\t\tif (functionType == TFunctionType.PROCEDURE) {\n+\t\t\tif (functionType == TFunctionType.PROCEDURE)\n \t\t\t\tthrow EaterExceptionLocated\n \t\t\t\t\t\t.located(\"A procedure cannot have !return directive. Declare it as a function instead ?\", s);\n-\t\t\t\t// this.functionType = TFunctionType.RETURN;\n-\t\t\t}\n \t\t}\n \t}\n \n@@ -147,39 +144,39 @@ public void executeProcedure(TContext context, TMemory memory, LineLocation loca\n \n \tpublic void executeProcedureInternal(TContext context, TMemory memory, List<TValue> args, Map<String, TValue> named)\n \t\t\tthrows EaterException, EaterExceptionLocated {\n-\t\tif (functionType != TFunctionType.PROCEDURE && functionType != TFunctionType.LEGACY_DEFINELONG) {\n+\t\tif (functionType != TFunctionType.PROCEDURE && functionType != TFunctionType.LEGACY_DEFINELONG)\n \t\t\tthrow new IllegalStateException();\n-\t\t}\n+\n \t\tfinal TMemory copy = getNewMemory(memory, args, named);\n \t\tcontext.executeLines(copy, body, TFunctionType.PROCEDURE, false);\n \t}\n \n \tpublic TValue executeReturnFunction(TContext context, TMemory memory, LineLocation location, List<TValue> args,\n \t\t\tMap<String, TValue> named) throws EaterException, EaterExceptionLocated {\n-\t\tif (functionType == TFunctionType.LEGACY_DEFINE) {\n+\t\tif (functionType == TFunctionType.LEGACY_DEFINE)\n \t\t\treturn executeReturnLegacyDefine(location, context, memory, args);\n-\t\t}\n-\t\tif (functionType != TFunctionType.RETURN_FUNCTION) {\n+\n+\t\tif (functionType != TFunctionType.RETURN_FUNCTION)\n \t\t\tthrow EaterException.unlocated(\"Illegal call here. Is there a return directive in your function?\");\n-\t\t}\n+\n \t\tfinal TMemory copy = getNewMemory(memory, args, named);\n \t\tfinal TValue result = context.executeLines(copy, body, TFunctionType.RETURN_FUNCTION, true);\n-\t\tif (result == null) {\n+\t\tif (result == null)\n \t\t\tthrow EaterException.unlocated(\"No return directive found in your function\");\n-\t\t}\n+\n \t\treturn result;\n \t}\n \n \tprivate TValue executeReturnLegacyDefine(LineLocation location, TContext context, TMemory memory, List<TValue> args)\n \t\t\tthrows EaterException, EaterExceptionLocated {\n-\t\tif (legacyDefinition == null) {\n+\t\tif (legacyDefinition == null)\n \t\t\tthrow new IllegalStateException();\n-\t\t}\n+\n \t\tfinal TMemory copy = getNewMemory(memory, args, Collections.<String, TValue>emptyMap());\n \t\tfinal String tmp = context.applyFunctionsAndVariables(copy, location, legacyDefinition);\n-\t\tif (tmp == null) {\n+\t\tif (tmp == null)\n \t\t\treturn TValue.fromString(\"\");\n-\t\t}\n+\n \t\treturn TValue.fromString(tmp);\n \t\t// eaterReturn.execute(context, copy);\n \t\t// // System.err.println(\"s3=\" + eaterReturn.getValue2());\n@@ -211,9 +208,9 @@ public boolean hasBody() {\n \t}\n \n \tpublic void finalizeEnddefinelong() {\n-\t\tif (functionType != TFunctionType.LEGACY_DEFINELONG) {\n+\t\tif (functionType != TFunctionType.LEGACY_DEFINELONG)\n \t\t\tthrow new UnsupportedOperationException();\n-\t\t}\n+\n \t\tif (body.size() == 1) {\n \t\t\tthis.functionType = TFunctionType.LEGACY_DEFINE;\n \t\t\tthis.legacyDefinition = body.get(0).getString();"
        },
        {
          "filename": "src/net/sourceforge/plantuml/version/LicenseInfo.java",
          "status": "modified",
          "additions": 27,
          "deletions": 28,
          "patch": "@@ -108,27 +108,27 @@ public static boolean retrieveNamedOrDistributorQuickIsValid() {\n \n \tpublic static synchronized LicenseInfo retrieveNamedSlow() {\n \t\tcache = LicenseInfo.NONE;\n-\t\tif (OptionFlags.ALLOW_INCLUDE == false) {\n+\t\tif (OptionFlags.ALLOW_INCLUDE == false)\n \t\t\treturn cache;\n-\t\t}\n+\n \t\tfinal String key = prefs.get(\"license\", \"\");\n \t\tif (key.length() > 0) {\n \t\t\tcache = setIfValid(retrieveNamed(key), cache);\n-\t\t\tif (cache.isValid()) {\n+\t\t\tif (cache.isValid())\n \t\t\t\treturn cache;\n-\t\t\t}\n+\n \t\t}\n \t\tfor (SFile f : fileCandidates()) {\n \t\t\ttry {\n \t\t\t\tif (f.exists() && f.canRead()) {\n \t\t\t\t\tfinal LicenseInfo result = retrieve(f);\n-\t\t\t\t\tif (result == null) {\n+\t\t\t\t\tif (result == null)\n \t\t\t\t\t\treturn null;\n-\t\t\t\t\t}\n+\n \t\t\t\t\tcache = setIfValid(result, cache);\n-\t\t\t\t\tif (cache.isValid()) {\n+\t\t\t\t\tif (cache.isValid())\n \t\t\t\t\t\treturn cache;\n-\t\t\t\t\t}\n+\n \t\t\t\t}\n \t\t\t} catch (IOException e) {\n \t\t\t\tLog.info(\"Error \" + e);\n@@ -157,13 +157,13 @@ public static BufferedImage retrieveDistributorImage(LicenseInfo licenseInfo) {\n \t\t}\n \t\ttry {\n \t\t\tfinal byte[] s1 = PLSSignature.retrieveDistributorImageSignature();\n-\t\t\tif (SignatureUtils.toHexString(s1).equals(SignatureUtils.toHexString(licenseInfo.sha)) == false) {\n+\t\t\tif (SignatureUtils.toHexString(s1).equals(SignatureUtils.toHexString(licenseInfo.sha)) == false)\n \t\t\t\treturn null;\n-\t\t\t}\n+\n \t\t\tfinal InputStream dis = PSystemVersion.class.getResourceAsStream(\"/distributor.png\");\n-\t\t\tif (dis == null) {\n+\t\t\tif (dis == null)\n \t\t\t\treturn null;\n-\t\t\t}\n+\n \t\t\ttry {\n \t\t\t\tfinal BufferedImage result = SImageIO.read(dis);\n \t\t\t\treturn result;\n@@ -178,21 +178,20 @@ public static BufferedImage retrieveDistributorImage(LicenseInfo licenseInfo) {\n \n \tpublic static LicenseInfo retrieveDistributor() {\n \t\tfinal InputStream dis = PSystemVersion.class.getResourceAsStream(\"/distributor.txt\");\n-\t\tif (dis == null) {\n+\t\tif (dis == null)\n \t\t\treturn null;\n-\t\t}\n+\n \t\ttry {\n \t\t\tfinal BufferedReader br = new BufferedReader(new InputStreamReader(dis));\n \t\t\tfinal String licenseString = br.readLine();\n \t\t\tbr.close();\n \t\t\tfinal LicenseInfo result = PLSSignature.retrieveDistributor(licenseString);\n \t\t\tfinal Throwable creationPoint = new Throwable();\n \t\t\tcreationPoint.fillInStackTrace();\n-\t\t\tfor (StackTraceElement ste : creationPoint.getStackTrace()) {\n-\t\t\t\tif (ste.toString().contains(result.context)) {\n+\t\t\tfor (StackTraceElement ste : creationPoint.getStackTrace())\n+\t\t\t\tif (ste.toString().contains(result.context))\n \t\t\t\t\treturn result;\n-\t\t\t\t}\n-\t\t\t}\n+\n \t\t\treturn null;\n \t\t} catch (Exception e) {\n \t\t\tLogme.error(e);\n@@ -208,34 +207,34 @@ public static Collection<SFile> fileCandidates() {\n \t\t\tif (s == null)\n \t\t\t\tcontinue;\n \t\t\tSFile dir = new SFile(s);\n-\t\t\tif (dir.isFile()) {\n+\t\t\tif (dir.isFile())\n \t\t\t\tdir = dir.getParentFile();\n-\t\t\t}\n-\t\t\tif (dir != null && dir.isDirectory()) {\n+\n+\t\t\tif (dir != null && dir.isDirectory())\n \t\t\t\tresult.add(dir.file(\"license.txt\"));\n-\t\t\t}\n+\n \t\t}\n \t\treturn result;\n \t}\n \n \tprivate static LicenseInfo setIfValid(LicenseInfo value, LicenseInfo def) {\n-\t\tif (value.isValid() || def.isNone()) {\n+\t\tif (value.isValid() || def.isNone())\n \t\t\treturn value;\n-\t\t}\n+\n \t\treturn def;\n \t}\n \n \tprivate static LicenseInfo retrieve(SFile f) throws IOException {\n \t\tfinal BufferedReader br = f.openBufferedReader();\n-\t\tif (br == null) {\n+\t\tif (br == null)\n \t\t\treturn null;\n-\t\t}\n+\n \t\ttry {\n \t\t\tfinal String s = br.readLine();\n \t\t\tfinal LicenseInfo result = retrieveNamed(s);\n-\t\t\tif (result != null) {\n+\t\t\tif (result != null)\n \t\t\t\tLog.info(\"Reading license from \" + f.getAbsolutePath());\n-\t\t\t}\n+\n \t\t\treturn result;\n \t\t} finally {\n \t\t\tbr.close();"
        },
        {
          "filename": "src/net/sourceforge/plantuml/version/Version.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -46,7 +46,7 @@ public class Version {\n \n \t// Warning, \"version\" should be the same in gradle.properties and Version.java\n \t// Any idea anyone how to magically synchronize those :-) ?\n-\tprivate static final String version = \"1.2023.9beta3\";\n+\tprivate static final String version = \"1.2023.9beta4\";\n \n \tpublic static String versionString() {\n \t\treturn version;"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ef3fbc0918f4fcc56a9813fccafaec31d05a4344",
            "date": "2025-01-14T11:53:18Z",
            "author_login": "arnaudroques"
          },
          {
            "sha": "9eaa2bbbf56f440492695d96379834e36a685dc0",
            "date": "2025-01-14T10:16:02Z",
            "author_login": "shunlibest"
          },
          {
            "sha": "d745338f51feb8e3e63fd7fad65810f69993a2f2",
            "date": "2025-01-13T16:06:32Z",
            "author_login": "arnaudroques"
          },
          {
            "sha": "15a63cdf59959fa0af97a072c757a97e2cc34612",
            "date": "2025-01-11T18:11:51Z",
            "author_login": "JanRoma"
          },
          {
            "sha": "523c24e72e5ba6b06c41f365083ed0c136d1ee6b",
            "date": "2025-01-11T15:55:45Z",
            "author_login": "arnaudroques"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-918",
    "description": "Server-Side Request Forgery (SSRF) in GitHub repository plantuml/plantuml prior to 1.2023.9.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-27T15:15:11.980",
    "last_modified": "2024-11-21T08:17:15.230",
    "fix_date": "2023-06-12T20:49:47Z"
  },
  "references": [
    {
      "url": "https://github.com/plantuml/plantuml/commit/b32500bb61ae617bb312496d6d832e4be8190797",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8ac3316f-431c-468d-87e4-3dafff2ecf51",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FV7XL3CY3K3K5ER3ASMEQA546MIQQ7QM/",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/plantuml/plantuml/commit/b32500bb61ae617bb312496d6d832e4be8190797",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8ac3316f-431c-468d-87e4-3dafff2ecf51",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FV7XL3CY3K3K5ER3ASMEQA546MIQQ7QM/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.867760",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "plantuml",
    "owner": "plantuml",
    "created_at": "2010-11-04T15:55:50Z",
    "updated_at": "2025-01-14T11:53:23Z",
    "pushed_at": "2025-01-14T11:53:19Z",
    "size": 276546,
    "stars": 10849,
    "forks": 988,
    "open_issues": 484,
    "watchers": 10849,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 14021875,
      "JavaScript": 8186,
      "HTML": 7397,
      "Shell": 5652,
      "Dockerfile": 1752,
      "CSS": 205
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:17:59.565359"
  }
}