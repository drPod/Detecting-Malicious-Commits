{
  "cve_id": "CVE-2023-34457",
  "github_data": {
    "repository": "MechanicalSoup/MechanicalSoup",
    "fix_commit": "d57c4a269bba3b9a0c5bfa20292955b849006d9e",
    "related_commits": [
      "d57c4a269bba3b9a0c5bfa20292955b849006d9e",
      "d57c4a269bba3b9a0c5bfa20292955b849006d9e"
    ],
    "patch_url": "https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e.patch",
    "fix_commit_details": {
      "sha": "d57c4a269bba3b9a0c5bfa20292955b849006d9e",
      "commit_date": "2023-07-04T18:47:44Z",
      "author": {
        "login": "e-c-d",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-x456-3ccm-m6j4",
        "length": 1312,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 119,
        "additions": 96,
        "deletions": 23
      },
      "files": [
        {
          "filename": "mechanicalsoup/browser.py",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -1,3 +1,4 @@\n+import io\n import os\n import tempfile\n import urllib\n@@ -10,7 +11,7 @@\n \n from .__version__ import __title__, __version__\n from .form import Form\n-from .utils import LinkNotFoundError\n+from .utils import LinkNotFoundError, is_multipart_file_upload\n \n \n class Browser:\n@@ -228,18 +229,20 @@ def get_request_kwargs(cls, form, url=None, **kwargs):\n \n                 # If the enctype is not multipart, the filename is put in\n                 # the form as a text input and the file is not sent.\n-                if tag.get(\"type\", \"\").lower() == \"file\" and multipart:\n-                    filepath = value\n-                    if filepath != \"\" and isinstance(filepath, str):\n-                        content = open(filepath, \"rb\")\n+                if is_multipart_file_upload(form, tag):\n+                    if isinstance(value, io.IOBase):\n+                        content = value\n+                        filename = os.path.basename(getattr(value, \"name\", \"\"))\n                     else:\n                         content = \"\"\n-                    filename = os.path.basename(filepath)\n-                    # If value is the empty string, we still pass it\n+                        filename = os.path.basename(value)\n+                    # If content is the empty string, we still pass it\n                     # for consistency with browsers (see\n                     # https://github.com/MechanicalSoup/MechanicalSoup/issues/250).\n                     files[name] = (filename, content)\n                 else:\n+                    if isinstance(value, io.IOBase):\n+                        value = os.path.basename(getattr(value, \"name\", \"\"))\n                     data.append((name, value))\n \n             elif tag.name == \"button\":"
        },
        {
          "filename": "mechanicalsoup/form.py",
          "status": "modified",
          "additions": 20,
          "deletions": 3,
          "patch": "@@ -1,9 +1,10 @@\n import copy\n+import io\n import warnings\n \n from bs4 import BeautifulSoup\n \n-from .utils import LinkNotFoundError\n+from .utils import LinkNotFoundError, is_multipart_file_upload\n \n \n class InvalidFormMethod(LinkNotFoundError):\n@@ -68,6 +69,7 @@ def set_input(self, data):\n             i = self.form.find(\"input\", {\"name\": name})\n             if not i:\n                 raise InvalidFormMethod(\"No input field named \" + name)\n+            self._assert_valid_file_upload(i, value)\n             i[\"value\"] = value\n \n     def uncheck_all(self, name):\n@@ -261,12 +263,12 @@ def set(self, name, value, force=False):\n             form.set(\"eula-checkbox\", True)\n \n         Example: uploading a file through a ``<input type=\"file\"\n-        name=\"tagname\">`` field (provide the path to the local file,\n+        name=\"tagname\">`` field (provide an open file object,\n         and its content will be uploaded):\n \n         .. code-block:: python\n \n-            form.set(\"tagname\", path_to_local_file)\n+            form.set(\"tagname\", open(path_to_local_file, \"rb\"))\n \n         \"\"\"\n         for func in (\"checkbox\", \"radio\", \"input\", \"textarea\", \"select\"):\n@@ -300,6 +302,7 @@ def new_control(self, type, name, value, **kwargs):\n         control['value'] = value\n         for k, v in kwargs.items():\n             control[k] = v\n+        self._assert_valid_file_upload(control, value)\n         self.form.append(control)\n         return control\n \n@@ -383,3 +386,17 @@ def print_summary(self):\n                 if subtag.string:\n                     subtag.string = subtag.string.strip()\n             print(input_copy)\n+\n+    def _assert_valid_file_upload(self, tag, value):\n+        \"\"\"Raise an exception if a multipart file input is not an open file.\"\"\"\n+        if (\n+            is_multipart_file_upload(self.form, tag) and\n+            not isinstance(value, io.IOBase)\n+        ):\n+            raise ValueError(\n+                \"From v1.3.0 onwards, you must pass an open file object \"\n+                'directly, e.g. `form[\"name\"] = open(\"/path/to/file\", \"rb\")`. '\n+                \"This change is to remediate a security vulnerability where \"\n+                \"a malicious web server could read arbitrary files from the \"\n+                \"client (CVE-2023-34457).\"\n+            )"
        },
        {
          "filename": "mechanicalsoup/utils.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -14,3 +14,10 @@ class LinkNotFoundError(Exception):\n       StatefulBrowser).\n     \"\"\"\n     pass\n+\n+\n+def is_multipart_file_upload(form, tag):\n+    return (\n+        form.get(\"enctype\", \"\") == \"multipart/form-data\" and\n+        tag.get(\"type\", \"\").lower() == \"file\"\n+    )"
        },
        {
          "filename": "tests/test_browser.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -164,8 +164,9 @@ def test_enctype_and_file_submit(httpbin, enctype, submit_file, file_field):\n         else:\n             # Encoding doesn't allow sending the content, we expect\n             # the filename as a normal text field.\n-            expected_content = pic_path.encode()\n-        form.find(\"input\", {\"name\": \"pic\"})[\"value\"] = pic_path\n+            expected_content = os.path.basename(pic_path.encode())\n+        tag = form.find(\"input\", {\"name\": \"pic\"})\n+        tag[\"value\"] = open(pic_path, \"rb\")\n \n     browser = mechanicalsoup.Browser()\n     response = browser._request(form)"
        },
        {
          "filename": "tests/test_stateful_browser.py",
          "status": "modified",
          "additions": 56,
          "deletions": 11,
          "patch": "@@ -391,32 +391,77 @@ def test_form_multiple():\n \n def test_upload_file(httpbin):\n     browser = mechanicalsoup.StatefulBrowser()\n-    browser.open(httpbin + \"/forms/post\")\n+    url = httpbin + \"/post\"\n+    file_input_form = f\"\"\"\n+    <form method=\"post\" action=\"{url}\" enctype=\"multipart/form-data\">\n+        <input type=\"file\" name=\"first\" />\n+    </form>\n+    \"\"\"\n \n     # Create two temporary files to upload\n     def make_file(content):\n         path = tempfile.mkstemp()[1]\n         with open(path, \"w\") as fd:\n             fd.write(content)\n         return path\n-    path1, path2 = (make_file(content) for content in\n-                    (\"first file content\", \"second file content\"))\n+    path1 = make_file(\"first file content\")\n+    path2 = make_file(\"second file content\")\n \n-    # The form doesn't have a type=file field, but the target action\n-    # does show it => add the fields ourselves, and add enctype too.\n+    value1 = open(path1, \"rb\")\n+    value2 = open(path2, \"rb\")\n+\n+    browser.open_fake_page(file_input_form)\n     browser.select_form()\n-    browser._StatefulBrowser__state.form.form[\n-      \"enctype\"] = \"multipart/form-data\"\n-    browser.new_control(\"file\", \"first\", path1)\n-    browser.new_control(\"file\", \"second\", \"\")\n-    browser[\"second\"] = path2\n-    browser.form.print_summary()\n+\n+    # Test filling an existing input and creating a new input\n+    browser[\"first\"] = value1\n+    browser.new_control(\"file\", \"second\", value2)\n+\n     response = browser.submit_selected()\n     files = response.json()[\"files\"]\n     assert files[\"first\"] == \"first file content\"\n     assert files[\"second\"] == \"second file content\"\n \n \n+def test_upload_file_with_malicious_default(httpbin):\n+    \"\"\"Check for CVE-2023-34457 by setting the form input value directly to a\n+    file that the user does not explicitly consent to upload, as a malicious\n+    server might do.\n+    \"\"\"\n+    browser = mechanicalsoup.StatefulBrowser()\n+    sensitive_path = tempfile.mkstemp()[1]\n+    with open(sensitive_path, \"w\") as fd:\n+        fd.write(\"Some sensitive information\")\n+    url = httpbin + \"/post\"\n+    malicious_html = f\"\"\"\n+    <form method=\"post\" action=\"{url}\" enctype=\"multipart/form-data\">\n+        <input type=\"file\" name=\"malicious\" value=\"{sensitive_path}\" />\n+    </form>\n+    \"\"\"\n+    browser.open_fake_page(malicious_html)\n+    browser.select_form()\n+    response = browser.submit_selected()\n+    assert response.json()[\"files\"] == {\"malicious\": \"\"}\n+\n+\n+def test_upload_file_raise_on_string_input():\n+    \"\"\"Check for use of the file upload API that was modified to remediate\n+    CVE-2023-34457. Users must now open files manually to upload them.\n+    \"\"\"\n+    browser = mechanicalsoup.StatefulBrowser()\n+    file_input_form = \"\"\"\n+    <form enctype=\"multipart/form-data\">\n+        <input type=\"file\" name=\"upload\" />\n+    </form>\n+    \"\"\"\n+    browser.open_fake_page(file_input_form)\n+    browser.select_form()\n+    with pytest.raises(ValueError, match=\"CVE-2023-34457\"):\n+        browser[\"upload\"] = \"/path/to/file\"\n+    with pytest.raises(ValueError, match=\"CVE-2023-34457\"):\n+        browser.new_control(\"file\", \"upload2\", \"/path/to/file\")\n+\n+\n def test_with():\n     \"\"\"Test that __enter__/__exit__ properly create/close the browser.\"\"\"\n     with mechanicalsoup.StatefulBrowser() as browser:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "229be9b2fe8e72ce6f86cf021423040ad3662f07",
            "date": "2024-11-16T20:17:40Z",
            "author_login": "hemberger"
          },
          {
            "sha": "1112010f48b4d71025553e634e5b33d502b26a9d",
            "date": "2024-06-19T03:58:34Z",
            "author_login": "snyk-bot"
          },
          {
            "sha": "91d8d6d029acbeb3515c44f87f89b5bcf2fd5e3b",
            "date": "2024-06-18T17:26:25Z",
            "author_login": "snyk-bot"
          },
          {
            "sha": "1ad5ccbe928e0e06dad0921d8f05d7e9af236b72",
            "date": "2024-05-07T04:25:20Z",
            "author_login": "hemberger"
          },
          {
            "sha": "9d7201d37ededa37a397ecf76f5d4ffd9f48ed4f",
            "date": "2024-05-07T04:20:16Z",
            "author_login": "hemberger"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-20",
    "description": "MechanicalSoup is a Python library for automating interaction with websites. Starting in version 0.2.0 and prior to version 1.3.0, a malicious web server can read arbitrary files on the client using a `<input type=\"file\" ...>` inside HTML form. All users of MechanicalSoup's form submission are affected, unless they took very specific (and manual) steps to reset HTML form field values. Version 1.3.0 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-05T20:15:10.343",
    "last_modified": "2024-11-21T08:07:17.630",
    "fix_date": "2023-07-04T18:47:44Z"
  },
  "references": [
    {
      "url": "https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230803-0005/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230803-0005/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.891362",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "MechanicalSoup",
    "owner": "MechanicalSoup",
    "created_at": "2014-05-26T09:06:11Z",
    "updated_at": "2025-01-14T13:06:08Z",
    "pushed_at": "2024-11-16T20:24:27Z",
    "size": 698,
    "stars": 4693,
    "forks": 381,
    "open_issues": 42,
    "watchers": 4693,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 120215
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:46:09.806496"
  }
}