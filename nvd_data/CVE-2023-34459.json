{
  "cve_id": "CVE-2023-34459",
  "github_data": {
    "repository": "OpenZeppelin/openzeppelin-contracts",
    "fix_commit": "4d2383e17186be3e8ccf5a442e9686ecc7de1c55",
    "related_commits": [
      "4d2383e17186be3e8ccf5a442e9686ecc7de1c55",
      "4d2383e17186be3e8ccf5a442e9686ecc7de1c55"
    ],
    "patch_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55.patch",
    "fix_commit_details": {
      "sha": "4d2383e17186be3e8ccf5a442e9686ecc7de1c55",
      "commit_date": "2023-06-16T20:17:41Z",
      "author": {
        "login": "Amxx",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wprv-93r4-jj2p",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 41,
        "additions": 35,
        "deletions": 6
      },
      "files": [
        {
          "filename": ".changeset/shy-crews-teach.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'openzeppelin-solidity': patch\n+---\n+\n+`MerkleProof`: Fix a bug in `processMultiProof` and `processMultiProofCalldata` that allows proving arbitrary leaves if the tree contains a node with value 0 at depth 1."
        },
        {
          "filename": "contracts/utils/cryptography/MerkleProof.sol",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -121,10 +121,11 @@ library MerkleProof {\n         // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n         // the merkle tree.\n         uint256 leavesLen = leaves.length;\n+        uint256 proofLen = proof.length;\n         uint256 totalHashes = proofFlags.length;\n \n         // Check proof validity.\n-        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n+        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n \n         // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n         // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n@@ -146,6 +147,7 @@ library MerkleProof {\n         }\n \n         if (totalHashes > 0) {\n+            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n             unchecked {\n                 return hashes[totalHashes - 1];\n             }\n@@ -173,10 +175,11 @@ library MerkleProof {\n         // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n         // the merkle tree.\n         uint256 leavesLen = leaves.length;\n+        uint256 proofLen = proof.length;\n         uint256 totalHashes = proofFlags.length;\n \n         // Check proof validity.\n-        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n+        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n \n         // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n         // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n@@ -198,6 +201,7 @@ library MerkleProof {\n         }\n \n         if (totalHashes > 0) {\n+            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n             unchecked {\n                 return hashes[totalHashes - 1];\n             }"
        },
        {
          "filename": "test/utils/cryptography/MerkleProof.test.js",
          "status": "modified",
          "additions": 24,
          "deletions": 4,
          "patch": "@@ -1,11 +1,8 @@\n-require('@openzeppelin/test-helpers');\n-\n const { expectRevert } = require('@openzeppelin/test-helpers');\n+const { expect } = require('chai');\n const { MerkleTree } = require('merkletreejs');\n const keccak256 = require('keccak256');\n \n-const { expect } = require('chai');\n-\n const MerkleProof = artifacts.require('$MerkleProof');\n \n contract('MerkleProof', function () {\n@@ -176,5 +173,28 @@ contract('MerkleProof', function () {\n       expect(await this.merkleProof.$multiProofVerify([root], [], root, [])).to.equal(true);\n       expect(await this.merkleProof.$multiProofVerifyCalldata([root], [], root, [])).to.equal(true);\n     });\n+\n+    it('reverts processing manipulated proofs with a zero-value node at depth 1', async function () {\n+      // Create a merkle tree that contains a zero leaf at depth 1\n+      const leaves = [keccak256('real leaf'), Buffer.alloc(32, 0)];\n+      const merkleTree = new MerkleTree(leaves, keccak256, { sortPairs: true });\n+\n+      const root = merkleTree.getRoot();\n+\n+      // Now we can pass any  ** malicious ** fake leaves as valid!\n+      const maliciousLeaves = ['some', 'malicious', 'leaves'].map(keccak256).sort(Buffer.compare);\n+      const maliciousProof = [leaves[0], leaves[0]];\n+      const maliciousProofFlags = [true, true, false];\n+\n+      await expectRevert(\n+        this.merkleProof.$multiProofVerify(maliciousProof, maliciousProofFlags, root, maliciousLeaves),\n+        'MerkleProof: invalid multiproof',\n+      );\n+\n+      await expectRevert(\n+        this.merkleProof.$multiProofVerifyCalldata(maliciousProof, maliciousProofFlags, root, maliciousLeaves),\n+        'MerkleProof: invalid multiproof',\n+      );\n+    });\n   });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "96b40d02c3fe836ffa19b6ed9217c3719c996f78",
            "date": "2025-01-10T20:59:14Z",
            "author_login": "ernestognw"
          },
          {
            "sha": "13781c1f4982908d40d8936f58c36d5227e168a7",
            "date": "2025-01-10T16:43:28Z",
            "author_login": "Amxx"
          },
          {
            "sha": "2e27a0c74b228215d73be24a90260789c9cdb4ae",
            "date": "2025-01-10T16:43:11Z",
            "author_login": "arr00"
          },
          {
            "sha": "352ab136878f652658f8f4e3d70b4087563653c4",
            "date": "2025-01-10T01:48:32Z",
            "author_login": "Amxx"
          },
          {
            "sha": "7b74442c5e87ea51dde41c7f18a209fa5154f1a4",
            "date": "2025-01-09T16:16:31Z",
            "author_login": "github-actions[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-354",
    "description": "OpenZeppelin Contracts is a library for smart contract development. Starting in version 4.7.0 and prior to version 4.9.2, when the `verifyMultiProof`, `verifyMultiProofCalldata`, `procesprocessMultiProof`, or `processMultiProofCalldat` functions are in use, it is possible to construct merkle trees that allow forging a valid multiproof for an arbitrary set of leaves.\n\nA contract may be vulnerable if it uses multiproofs for verification and the merkle tree that is processed includes a node with value 0 at depth 1 (just under the root). This could happen inadvertedly for balanced trees with 3 leaves or less, if the leaves are not hashed. This could happen deliberately if a malicious tree builder includes such a node in the tree.\n\nA contract is not vulnerable if it uses single-leaf proving (`verify`, `verifyCalldata`, `processProof`, or `processProofCalldata`), or if it uses multiproofs with a known tree that has hashed leaves. Standard merkle trees produced or validated with the @openzeppelin/merkle-tree library are safe.\n\nThe problem has been patched in version 4.9.2.\n\nSome workarounds are available. For those using multiproofs: When constructing merkle trees hash the leaves and do not insert empty nodes in your trees. Using the @openzeppelin/merkle-tree package eliminates this issue. Do not accept user-provided merkle roots without reconstructing at least the first level of the tree. Verify the merkle tree structure by reconstructing it from the leaves.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-06-16T23:15:08.817",
    "last_modified": "2024-11-21T08:07:17.920",
    "fix_date": "2023-06-16T20:17:41Z"
  },
  "references": [
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.374630",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openzeppelin-contracts",
    "owner": "OpenZeppelin",
    "created_at": "2016-08-01T20:54:54Z",
    "updated_at": "2025-01-14T13:39:35Z",
    "pushed_at": "2025-01-13T16:34:19Z",
    "size": 47412,
    "stars": 25188,
    "forks": 11862,
    "open_issues": 289,
    "watchers": 25188,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "audit/M-01",
      "audit/2023-03",
      "audit/2023-06",
      "audit/2023-07-10",
      "audit/2023-07-24",
      "audit/2023-08-01",
      "audit/2023-08-07",
      "docs-org",
      "docs-v2.x",
      "docs-v3.x",
      "docs-v4.x",
      "docs-v5.x",
      "master",
      "next-v5.0",
      "release-v2.3.0",
      "release-v2.4.0",
      "release-v2.5.0",
      "release-v3.0.0",
      "release-v3.1.0",
      "release-v3.2.0-solc-0.7",
      "release-v3.2.0",
      "release-v3.3-solc-0.7"
    ],
    "languages": {
      "Solidity": 1279163,
      "JavaScript": 1230104,
      "Python": 170889,
      "Ruby": 95064,
      "Shell": 9208,
      "Makefile": 1714
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:42:13.725104"
  }
}