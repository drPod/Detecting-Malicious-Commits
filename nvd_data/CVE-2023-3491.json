{
  "cve_id": "CVE-2023-3491",
  "github_data": {
    "repository": "fossbilling/fossbilling",
    "fix_commit": "2ddb7438ee0d05f9a9d01555edcfed820960f114",
    "related_commits": [
      "2ddb7438ee0d05f9a9d01555edcfed820960f114",
      "2ddb7438ee0d05f9a9d01555edcfed820960f114"
    ],
    "patch_url": "https://github.com/fossbilling/fossbilling/commit/2ddb7438ee0d05f9a9d01555edcfed820960f114.patch",
    "fix_commit_details": {
      "sha": "2ddb7438ee0d05f9a9d01555edcfed820960f114",
      "commit_date": "2023-06-30T20:51:50Z",
      "author": {
        "login": "jaapmarcus",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Limit \"LIMIT\" to numbers only + Disable upload theme  (#1392)",
        "length": 465,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 109,
        "additions": 27,
        "deletions": 82
      },
      "files": [
        {
          "filename": "src/library/Box/Pagination.php",
          "status": "modified",
          "additions": 21,
          "deletions": 7,
          "patch": "@@ -33,17 +33,24 @@ public function getPer_page()\n         return $this->per_page;\n     }\n \n-    public function getSimpleResultSet($q, $values, $per_page = 100, $page = null)\n+    public function getSimpleResultSet($q, $values, ?int $per_page = 100, ?int $page = null)\n     {\n         if (is_null($page)){\n             $page = $_GET['page'] ?? 1;\n         }\n-        $per_page = $_GET['per_page'] ?? $per_page;\n+        $per_page = $_GET['per_page'] ?? $per_page ?? 100;\n+\n+        if (!is_numeric($page) || $page < 1 ){\n+           throw new \\Box_Exception('Invalid page number');\n+        }\n+        if (!is_numeric($per_page) || $per_page < 1 ){\n+           throw new \\Box_Exception('Invalid per page number');\n+        }\n \n         $offset = ($page - 1) * $per_page;\n \n         $sql = $q;\n-        $sql .= sprintf(' LIMIT %s,%s', $offset, $per_page);\n+        $sql .= sprintf(' LIMIT %u,%u', $offset, $per_page);\n         $result = $this->di['db']->getAll($sql, $values);\n \n         $exploded = explode('FROM', $q);\n@@ -60,14 +67,21 @@ public function getSimpleResultSet($q, $values, $per_page = 100, $page = null)\n         );\n     }\n \n-    public function getAdvancedResultSet($q, $values, $per_page = 100)\n+    public function getAdvancedResultSet($q, $values, ?int $per_page = 100)\n     {\n-        $page = $page = $_GET['page'] ?? 1;\n-        $per_page = $_GET['per_page'] ?? $per_page;\n+        $page = $_GET['page'] ?? 1;\n+        $per_page = $_GET['per_page'] ?? $per_page ?? 100;\n+\n+        if (!is_numeric($page) || $page < 1 ){\n+           throw new \\Box_Exception('Invalid page number');\n+        }\n+        if (!is_numeric($per_page) || $per_page < 1 ){\n+           throw new \\Box_Exception('Invalid per page number');\n+        }\n \n         $offset = ($page - 1) * $per_page;\n         $q = str_replace('SELECT ', 'SELECT SQL_CALC_FOUND_ROWS ', $q);\n-        $q .= sprintf(' LIMIT %s,%s', $offset, $per_page);\n+        $q .= sprintf(' LIMIT %u,%u', $offset, $per_page);\n         $result = $this->di['db']->getAll($q, $values);\n         $total = $this->di['db']->getCell('SELECT FOUND_ROWS();');\n "
        },
        {
          "filename": "src/modules/Client/Service.php",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -177,8 +177,12 @@ public function getSearchQuery($data, $selectStmt = 'SELECT c.*')\n     public function getPairs($data)\n     {\n         $limit = $data['per_page'] ?? 30;\n+        if (!is_numeric($limit) || $limit < 1 ){\n+            throw new \\Box_Exception('Invalid per page number');\n+        }\n+\n         [$sql, $params] = $this->getSearchQuery($data, \"SELECT c.id, CONCAT_WS('', c.first_name,  ' ', c.last_name) as full_name\");\n-        $sql = $sql . ' LIMIT ' . $limit;\n+        $sql .= sprintf(' LIMIT %u', $limit);\n \n         return $this->di['db']->getAssoc($sql, $params);\n     }"
        },
        {
          "filename": "src/modules/Theme/Controller/Admin.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -63,7 +63,6 @@ public function save_theme_settings(\\Box_App $app, $theme)\n                 throw new \\Box_Exception('Theme \":name\" assets folder is not writable. Files can not be uploaded and settings can not be saved. Set folder permissions to 777', [':name' => $t->getName()]);\n             }\n             $service->updateSettings($t, $preset, $_POST);\n-            $service->uploadAssets($t, $_FILES);\n             $service->regenerateThemeCssAndJsFiles($t, $preset, $api);\n         } catch (\\Exception $e) {\n             error_log($e);"
        },
        {
          "filename": "src/modules/Theme/Service.php",
          "status": "modified",
          "additions": 0,
          "deletions": 18,
          "patch": "@@ -161,24 +161,6 @@ public function getThemeSettings(Model\\Theme $theme, $preset = null)\n         }\n     }\n \n-    public function uploadAssets(Model\\Theme $theme, array $files)\n-    {\n-        $dest = $theme->getPathAssets() . DIRECTORY_SEPARATOR;\n-\n-        foreach ($files as $filename => $f) {\n-            if (UPLOAD_ERR_NO_FILE == $f['error']) {\n-                continue;\n-            }\n-\n-            $filename = str_replace('_', '.', $filename);\n-            if (UPLOAD_ERR_OK != $f['error']) {\n-                throw new \\Box_Exception('Error uploading file :file Error code: :error', [':file' => $filename, ':error' => $f['error']]);\n-            }\n-\n-            move_uploaded_file($f['tmp_name'], $dest . $filename);\n-        }\n-    }\n-\n     public function updateSettings(Model\\Theme $theme, $preset, array $params)\n     {\n         $meta = $this->di['db']->findOne("
        },
        {
          "filename": "tests/integration/bb-modules/mod_theme/ServiceTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 21,
          "patch": "@@ -34,26 +34,6 @@ public function testgetThemeSettings()\n         $this->assertIsArray($result);\n     }\n \n-    public function testuploadAssets()\n-    {\n-        $files = array(\n-            'file1' => array(\n-                    'error' => UPLOAD_ERR_NO_FILE,\n-                ),\n-            'file2' => array(\n-                'error' => UPLOAD_ERR_OK,\n-                'tmp_name' => 'tmpName',\n-            ),\n-\n-        );\n-\n-        $service = new \\Box\\Mod\\Theme\\Service();\n-        $service->setDi($this->di);\n-\n-        $themeModel = $service->getTheme('huraga');\n-        $service->uploadAssets($themeModel, $files);\n-    }\n-\n     public function testupdateSettings()\n     {\n         $service = new \\Box\\Mod\\Theme\\Service();\n@@ -111,4 +91,4 @@ public function testgetCurrentClientAreaTheme()\n         $this->assertInstanceOf('\\Box\\Mod\\Theme\\Model\\Theme', $result);\n         $this->assertEquals('huraga', $result->getName());\n     }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "tests/modules/Theme/Controller/AdminTest.php",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -107,8 +107,6 @@ public function testsave_theme_settings()\n             ->method('setCurrentThemePreset');\n         $themeServiceMock->expects($this->atLeastOnce())\n             ->method('updateSettings');\n-        $themeServiceMock->expects($this->atLeastOnce())\n-            ->method('uploadAssets');\n         $themeServiceMock->expects($this->atLeastOnce())\n             ->method('regenerateThemeCssAndJsFiles');\n         $themeServiceMock->expects($this->atLeastOnce())\n@@ -201,4 +199,3 @@ public function testsave_theme_settings_PathIsNotWritable()\n     }\n \n }\n- \n\\ No newline at end of file"
        },
        {
          "filename": "tests/modules/Theme/ServiceTest.php",
          "status": "modified",
          "additions": 0,
          "deletions": 31,
          "patch": "@@ -375,36 +375,5 @@ public function testgetCurrentClientAreaThemeCode()\n         $this->assertEquals('huraga', $result);\n     }\n \n-    public function testuploadAssets()\n-    {\n-        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n-        $themeMock->expects($this->atLeastOnce())\n-            ->method('getPathAssets');\n-        $files = array(\n-            'test2' => array(\n-                'error' => UPLOAD_ERR_NO_FILE\n-                ),\n-            'test1' => array(\n-                    'error' => UPLOAD_ERR_OK,\n-                    'tmp_name' => 'tempName',\n-                ),\n-        );\n-        $this->service->uploadAssets($themeMock, $files);\n-    }\n-\n-    public function testuploadAssets_Exception()\n-    {\n-        $themeMock = $this->getMockBuilder('\\Box\\Mod\\Theme\\Model\\Theme')->disableOriginalConstructor()->getMock();\n-        $themeMock->expects($this->atLeastOnce())\n-            ->method('getPathAssets');\n-        $files = array(\n-            'test0' => array(\n-                'error' => UPLOAD_ERR_CANT_WRITE\n-            ),\n-        );\n-        $this->expectException(\\Box_Exception::class);\n-        $this->expectExceptionMessage(sprintf(\"Error uploading file %s Error code: %d\", 'test0', UPLOAD_ERR_CANT_WRITE));\n-        $this->service->uploadAssets($themeMock, $files);\n-    }\n \n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d881a77d84fd1029400ff06fa45bfcb7e6785df4",
            "date": "2025-01-14T05:07:56Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "aabae0a37f30fb8d3072c8715ee3e93f54c88316",
            "date": "2025-01-14T01:18:09Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "a37f24fc10e69f0f933b370ab4c3643f5d2ba510",
            "date": "2025-01-13T00:43:31Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "3bc7b3f3f75b0aed98bc5f4bb82c2528a84d0703",
            "date": "2025-01-12T01:16:39Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "66b419662e37815937a21aeb9ddaee4ded0006db",
            "date": "2025-01-09T20:43:52Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "Unrestricted Upload of File with Dangerous Type in GitHub repository fossbilling/fossbilling prior to 0.5.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-30T22:15:10.393",
    "last_modified": "2024-11-21T08:17:23.067",
    "fix_date": "2023-06-30T20:51:50Z"
  },
  "references": [
    {
      "url": "https://github.com/fossbilling/fossbilling/commit/2ddb7438ee0d05f9a9d01555edcfed820960f114",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/043bd900-ac78-44d2-a340-84ddd0bc4a1d",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fossbilling/fossbilling/commit/2ddb7438ee0d05f9a9d01555edcfed820960f114",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/043bd900-ac78-44d2-a340-84ddd0bc4a1d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.883648",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "FOSSBilling",
    "owner": "fossbilling",
    "created_at": "2022-05-18T07:13:32Z",
    "updated_at": "2025-01-14T09:45:22Z",
    "pushed_at": "2025-01-14T09:47:32Z",
    "size": 115592,
    "stars": 914,
    "forks": 199,
    "open_issues": 201,
    "watchers": 914,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 3692953,
      "Twig": 1520070,
      "JavaScript": 70601,
      "HTML": 14354,
      "SCSS": 5514,
      "CSS": 1801,
      "Dockerfile": 830,
      "Shell": 400
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:51:02.524915"
  }
}