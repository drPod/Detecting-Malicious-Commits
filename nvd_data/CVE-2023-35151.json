{
  "cve_id": "CVE-2023-35151",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "824cd742ecf5439971247da11bfe7e0ad2b10ede",
    "related_commits": [
      "824cd742ecf5439971247da11bfe7e0ad2b10ede",
      "824cd742ecf5439971247da11bfe7e0ad2b10ede"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/824cd742ecf5439971247da11bfe7e0ad2b10ede.patch",
    "fix_commit_details": {
      "sha": "824cd742ecf5439971247da11bfe7e0ad2b10ede",
      "commit_date": "2023-02-21T10:31:19Z",
      "author": {
        "login": "manuelleduc",
        "type": "User",
        "stats": {
          "total_commits": 953,
          "average_weekly_commits": 0.9989517819706499,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 179
        }
      },
      "commit_message": {
        "title": "XWIKI-16138: Improved REST properties cleanup",
        "length": 45,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 179,
        "additions": 169,
        "deletions": 10
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/pom.xml",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -180,6 +180,11 @@\n       <artifactId>xwiki-platform-icon-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.xwiki.platform</groupId>\n+      <artifactId>xwiki-platform-mail-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n \n     <!-- Test dependencies -->\n     <dependency>"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/src/main/java/org/xwiki/rest/internal/ModelFactory.java",
          "status": "modified",
          "additions": 52,
          "deletions": 4,
          "patch": "@@ -28,13 +28,16 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.Vector;\n import java.util.stream.Collectors;\n \n import javax.inject.Inject;\n import javax.inject.Provider;\n import javax.inject.Singleton;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n import javax.xml.parsers.ParserConfigurationException;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -46,6 +49,8 @@\n import org.xwiki.logging.LogLevel;\n import org.xwiki.logging.event.LogEvent;\n import org.xwiki.logging.tail.LogTail;\n+import org.xwiki.mail.EmailAddressObfuscator;\n+import org.xwiki.mail.GeneralMailConfiguration;\n import org.xwiki.model.EntityType;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.EntityReference;\n@@ -129,6 +134,8 @@\n import com.xpn.xwiki.objects.classes.ComputedFieldClass;\n import com.xpn.xwiki.objects.classes.ListClass;\n \n+import static org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseMessage;\n+\n /**\n  * Various common tools for resources.\n  * \n@@ -167,6 +174,12 @@ public class ModelFactory\n     @Inject\n     private UserReferenceSerializer<String> userReferenceSerializer;\n \n+    @Inject\n+    private GeneralMailConfiguration generalMailConfiguration;\n+\n+    @Inject\n+    private EmailAddressObfuscator emailAddressObfuscator;\n+\n     public ModelFactory()\n     {\n         this.objectFactory = new ObjectFactory();\n@@ -262,7 +275,16 @@ private void fillObjectSummary(ObjectSummary objectSummary, Document doc, BaseOb\n         String[] propertyNames = xwikiObject.getPropertyNames();\n         if (propertyNames.length > 0) {\n             try {\n-                objectSummary.setHeadline(serializePropertyValue(xwikiObject.get(propertyNames[0])));\n+                String firstPropertyName = propertyNames[0];\n+                BaseClass baseClass = xwikiObject.getXClass(this.xcontextProvider.get());\n+                PropertyInterface field = baseClass.getField(firstPropertyName);\n+                // The property might not exist in the class. But if it does, it will be a PropertyClass. \n+                if (field != null) {\n+                    String classType = ((com.xpn.xwiki.objects.classes.PropertyClass) field).getClassType();\n+                    objectSummary.setHeadline(cleanupBeforeMakingPublic(classType, xwikiObject.get(firstPropertyName)));\n+                } else {\n+                    objectSummary.setHeadline(serializePropertyValue(xwikiObject.get(firstPropertyName)));\n+                }\n             } catch (XWikiException e) {\n                 // Should never happen\n             }\n@@ -567,7 +589,7 @@ private Locale getDefaultLocale(Document document)\n                 return xcontext.getWiki().getDocument(document.getDocumentReference(), xcontext).getRealLocale();\n             } catch (XWikiException e) {\n                 this.logger.warn(\"Failed to get the default locale from [{}]. Root cause is [{}].\",\n-                    document.getDocumentReference(), ExceptionUtils.getRootCauseMessage(e));\n+                    document.getDocumentReference(), getRootCauseMessage(e));\n                 // Fall-back on the default locale specified on the translation page, which may not be accurate.\n                 return document.getDefaultLocale();\n             }\n@@ -992,7 +1014,7 @@ public Hierarchy toRestHierarchy(EntityReference targetEntityReference, Boolean\n                 } catch (Exception e) {\n                     this.logger.warn(\n                         \"Failed to get the pretty name of entity [{}]. Continue using the entity name. Root cause is [{}].\",\n-                        entityReference, ExceptionUtils.getRootCauseMessage(e));\n+                        entityReference, getRootCauseMessage(e));\n                 }\n             }\n             hierarchy.withItems(hierarchyItem);\n@@ -1051,7 +1073,7 @@ private String serializePropertyValue(PropertyInterface property,\n                 context.setDoc(document);\n             }\n         } else {\n-            return serializePropertyValue(property);\n+            return cleanupBeforeMakingPublic(propertyClass.getClassType(), property);\n         }\n     }\n \n@@ -1246,4 +1268,30 @@ private boolean hasAccess(Property restProperty)\n \n         return true;\n     }\n+\n+    private String cleanupBeforeMakingPublic(String type, PropertyInterface baseProperty)\n+    {\n+        String cleanedUpStringValue;\n+        if (Objects.equals(type, PASSWORD_TYPE)) {\n+            cleanedUpStringValue = null;\n+        } else {\n+            cleanedUpStringValue = serializePropertyValue(baseProperty);\n+            // We obfuscate the email only if the obfuscation has been activated, and if the current user does not have \n+            // the right to edit the document containing the base property.\n+            // A user allowed to edit a document has to view the unescaped email to be able to edit it correctly. \n+            if (Objects.equals(type, \"Email\") && this.generalMailConfiguration.shouldObfuscate()\n+                && !this.authorizationManagerProvider.get().hasAccess(Right.EDIT, baseProperty.getReference()))\n+            {\n+                try {\n+                    cleanedUpStringValue =\n+                        this.emailAddressObfuscator.obfuscate(InternetAddress.parse(cleanedUpStringValue)[0]);\n+                } catch (AddressException e) {\n+                    this.logger.warn(\"Failed to parse [{}] to an email address. Cause: [{}]\", cleanedUpStringValue,\n+                        getRootCauseMessage(e));\n+                    cleanedUpStringValue = \"\";\n+                }\n+            }\n+        }\n+        return cleanedUpStringValue;\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/src/test/java/org/xwiki/rest/internal/ModelFactoryTest.java",
          "status": "modified",
          "additions": 112,
          "deletions": 6,
          "patch": "@@ -29,16 +29,24 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.Vector;\n+import java.util.stream.Stream;\n+\n+import javax.mail.internet.InternetAddress;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.Mock;\n-import org.xwiki.component.manager.ComponentManager;\n+import org.xwiki.mail.EmailAddressObfuscator;\n+import org.xwiki.mail.GeneralMailConfiguration;\n import org.xwiki.model.reference.AttachmentReference;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.EntityReference;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.model.reference.ObjectReference;\n import org.xwiki.model.reference.SpaceReference;\n import org.xwiki.model.reference.SpaceReferenceResolver;\n import org.xwiki.model.reference.WikiReference;\n@@ -54,7 +62,6 @@\n import org.xwiki.security.authorization.Right;\n import org.xwiki.test.LogLevel;\n import org.xwiki.test.junit5.LogCaptureExtension;\n-import org.xwiki.test.junit5.mockito.InjectComponentManager;\n import org.xwiki.test.junit5.mockito.InjectMockComponents;\n import org.xwiki.test.junit5.mockito.MockComponent;\n import org.xwiki.wiki.descriptor.WikiDescriptor;\n@@ -65,17 +72,22 @@\n import com.xpn.xwiki.XWikiException;\n import com.xpn.xwiki.api.Document;\n import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseCollection;\n import com.xpn.xwiki.objects.BaseObject;\n import com.xpn.xwiki.objects.StringProperty;\n import com.xpn.xwiki.objects.classes.BaseClass;\n+import com.xpn.xwiki.objects.classes.EmailClass;\n import com.xpn.xwiki.objects.classes.PasswordClass;\n import com.xpn.xwiki.objects.classes.StringClass;\n import com.xpn.xwiki.test.MockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n \n+import ch.qos.logback.classic.Level;\n+\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n@@ -93,9 +105,6 @@ class ModelFactoryTest\n     @RegisterExtension\n     private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n \n-    @InjectComponentManager\n-    private ComponentManager componentManager;\n-\n     @MockComponent\n     private ContextualAuthorizationManager authorizationManager;\n \n@@ -108,6 +117,12 @@ class ModelFactoryTest\n     @MockComponent\n     private EntityReferenceSerializer<String> defaultEntityReferenceSerializer;\n \n+    @MockComponent\n+    private GeneralMailConfiguration generalMailConfiguration;\n+\n+    @MockComponent\n+    private EmailAddressObfuscator emailAddressObfuscator;\n+\n     @InjectMockComponents\n     private ModelFactory modelFactory;\n \n@@ -206,10 +221,101 @@ void toRestObjectCheckWhichObjectValuesAreAvailableForAdmins() throws Exception\n \n         Map<String, String> expectedValues = new HashMap<>();\n         expectedValues.put(TEST_STRING_FIELD, TEST_STRING_VALUE);\n-        expectedValues.put(TEST_PASSWORD_FIELD, TEST_PASSWORD_VALUE);\n+        expectedValues.put(TEST_PASSWORD_FIELD, null);\n         assertExpectedPropertyValues(result.getProperties(), expectedValues);\n     }\n \n+    public static Stream<Arguments> toRestObjectWithObfuscatedMailSource()\n+    {\n+        return Stream.of(\n+            // no mail obfuscation\n+            Arguments.of(false, true, \"user@domain.tld\", \"user@domain.tld\", null),\n+            // mail obfuscation activated but the current user has edit rights\n+            Arguments.of(true, true, \"user@domain.tld\", \"user@domain.tld\", null),\n+            // mail obfuscation activated and the current user does not have edit rights \n+            Arguments.of(true, false, \"user@domain.tld\", \"u...@domain.tld\", null),\n+            // mail obfuscation activated, the current user does not have edit rights and the mail is badly formatted\n+            Arguments.of(true, false, \"wrong@\", \"\",\n+                \"Failed to parse [wrong@] to an email address. Cause: [AddressException: Missing domain]\")\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"toRestObjectWithObfuscatedMailSource\")\n+    void toRestObjectWithObfuscatedMail(boolean shouldObfuscate, boolean hasEditRight, String inputMail,\n+        String expectedEmail, String expectedWarning) throws Exception\n+    {\n+        ObjectReference objectReference = mock(ObjectReference.class);\n+        when(this.generalMailConfiguration.shouldObfuscate()).thenReturn(shouldObfuscate);\n+        when(this.authorizationManager.hasAccess(Right.EDIT, objectReference)).thenReturn(hasEditRight);\n+        when(this.emailAddressObfuscator.obfuscate(any(InternetAddress.class))).thenReturn(expectedEmail);\n+\n+        BaseObject xwikiObject = mock(BaseObject.class);\n+        BaseClass xwikiClass = mock(BaseClass.class);\n+\n+        when(xwikiObject.getPropertyNames()).thenReturn(new String[] {});\n+        when(xwikiObject.getXClass(this.xcontext)).thenReturn(xwikiClass);\n+        when(xwikiObject.getClassName()).thenReturn(\"Some.XClass\");\n+        when(xwikiObject.getNumber()).thenReturn(0);\n+\n+        EmailClass emailField = new EmailClass();\n+        emailField.setName(\"emailValue\");\n+        StringProperty emailElement = new StringProperty();\n+        emailElement.setName(\"emailValue\");\n+        emailElement.setClassType(\"Password\");\n+        emailElement.setValue(inputMail);\n+        BaseCollection baseCollection = mock(BaseCollection.class);\n+        when(baseCollection.getReference()).thenReturn(objectReference);\n+        emailElement.setObject(baseCollection);\n+        when(xwikiObject.get(\"emailValue\")).thenReturn(emailElement);\n+\n+        when(xwikiClass.getProperties()).thenReturn(new java.lang.Object[] { emailField });\n+\n+        Object result = this.modelFactory.toRestObject(this.baseURI, this.testDocument, xwikiObject, false, false);\n+\n+        assertExpectedPropertyValues(result.getProperties(), Map.of(\"emailValue\", expectedEmail));\n+\n+        if (expectedWarning != null) {\n+            assertEquals(expectedWarning, this.logCapture.getMessage(0));\n+            assertEquals(Level.WARN, this.logCapture.getLogEvent(0).getLevel());\n+        }\n+    }\n+\n+    @Test\n+    void toRestObjectWithObfuscatedMailInHeader() throws Exception\n+    {\n+        ObjectReference objectReference = mock(ObjectReference.class);\n+        when(this.generalMailConfiguration.shouldObfuscate()).thenReturn(true);\n+        when(this.authorizationManager.hasAccess(Right.EDIT, objectReference)).thenReturn(false);\n+        when(this.emailAddressObfuscator.obfuscate(any(InternetAddress.class))).thenReturn(\"u...@domain.tld\");\n+\n+        BaseObject xwikiObject = mock(BaseObject.class);\n+        BaseClass xwikiClass = mock(BaseClass.class);\n+\n+        when(xwikiObject.getPropertyNames()).thenReturn(new String[] {});\n+        when(xwikiObject.getXClass(this.xcontext)).thenReturn(xwikiClass);\n+        when(xwikiObject.getClassName()).thenReturn(\"Some.XClass\");\n+        when(xwikiObject.getNumber()).thenReturn(0);\n+\n+        EmailClass emailField = new EmailClass();\n+        emailField.setName(\"emailValue\");\n+        StringProperty emailElement = new StringProperty();\n+        emailElement.setName(\"emailValue\");\n+        emailElement.setClassType(\"Password\");\n+        emailElement.setValue(\"user@domain.tld\");\n+        BaseCollection baseCollection = mock(BaseCollection.class);\n+        when(baseCollection.getReference()).thenReturn(objectReference);\n+        emailElement.setObject(baseCollection);\n+        when(xwikiObject.get(\"emailValue\")).thenReturn(emailElement);\n+\n+        when(xwikiClass.getProperties()).thenReturn(new java.lang.Object[] { emailField });\n+        when(xwikiObject.getPropertyNames()).thenReturn(new String[] { \"emailValue\" });\n+\n+        Object result = this.modelFactory.toRestObject(this.baseURI, this.testDocument, xwikiObject, false, false);\n+\n+        assertExpectedPropertyValues(result.getProperties(), Map.of(\"emailValue\", \"u...@domain.tld\"));\n+    }\n+\n     private void assertExpectedPropertyValues(List<Property> properties, Map<String, String> expectedValues)\n     {\n         Set<String> propertiesFound = new HashSet<>();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-359",
    "description": "XWiki Platform is a generic wiki platform. Starting in version 7.3-milestone-1 and prior to versions 14.4.8, 14.10.6, and 15.1, ny user can call a REST endpoint and obtain the obfuscated passwords, even when the mail obfuscation is activated. The issue has been patched in XWiki 14.4.8, 14.10.6, and 15.1. There is no known workaround.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-23T17:15:09.457",
    "last_modified": "2024-11-21T08:08:02.453",
    "fix_date": "2023-02-21T10:31:19Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/824cd742ecf5439971247da11bfe7e0ad2b10ede",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-8g9c-c9cm-9c56",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-16138",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/824cd742ecf5439971247da11bfe7e0ad2b10ede",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-8g9c-c9cm-9c56",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-16138",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.858521",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}