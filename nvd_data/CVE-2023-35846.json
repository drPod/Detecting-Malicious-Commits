{
  "cve_id": "CVE-2023-35846",
  "github_data": {
    "repository": "virtualsquare/picotcp",
    "fix_commit": "d561990a358899178115e156871cc054a1c55ffe",
    "related_commits": [
      "d561990a358899178115e156871cc054a1c55ffe",
      "d561990a358899178115e156871cc054a1c55ffe"
    ],
    "patch_url": "https://github.com/virtualsquare/picotcp/commit/d561990a358899178115e156871cc054a1c55ffe.patch",
    "fix_commit_details": {
      "sha": "d561990a358899178115e156871cc054a1c55ffe",
      "commit_date": "2023-05-12T20:24:23Z",
      "author": {
        "login": "danielinux",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[ipfilter] Check transport layer length in frame before filtering ports",
        "length": 115,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 22,
        "additions": 11,
        "deletions": 11
      },
      "files": [
        {
          "filename": "modules/pico_ipfilter.c",
          "status": "modified",
          "additions": 11,
          "deletions": 11,
          "patch": "@@ -461,18 +461,18 @@ int ipfilter(struct pico_frame *f)\n     temp.fdev = f->dev;\n     temp.out_addr = ipv4_hdr->dst.addr;\n     temp.in_addr = ipv4_hdr->src.addr;\n-    if ((ipv4_hdr->proto == PICO_PROTO_TCP) || (ipv4_hdr->proto == PICO_PROTO_UDP)) {\n-        trans = (struct pico_trans *) f->transport_hdr;\n-        temp.out_port = short_be(trans->dport);\n-        temp.in_port = short_be(trans->sport);\n-    }\n-    else if(ipv4_hdr->proto == PICO_PROTO_ICMP4) {\n-        icmp_hdr = (struct pico_icmp4_hdr *) f->transport_hdr;\n-        if(icmp_hdr->type == PICO_ICMP_UNREACH && icmp_hdr->code == PICO_ICMP_UNREACH_FILTER_PROHIB)\n-            return 0;\n+    if ((f->transport_hdr + sizeof(struct pico_trans)) <= (f->buffer + f->buffer_len)) {\n+        if ((ipv4_hdr->proto == PICO_PROTO_TCP) || (ipv4_hdr->proto == PICO_PROTO_UDP)) {\n+                trans = (struct pico_trans *) f->transport_hdr;\n+                temp.out_port = short_be(trans->dport);\n+                temp.in_port = short_be(trans->sport);\n+        } else if(ipv4_hdr->proto == PICO_PROTO_ICMP4) {\n+            icmp_hdr = (struct pico_icmp4_hdr *) f->transport_hdr;\n+            if(icmp_hdr->type == PICO_ICMP_UNREACH && icmp_hdr->code == PICO_ICMP_UNREACH_FILTER_PROHIB)\n+                return 0;\n+        }\n+        temp.proto = ipv4_hdr->proto;\n     }\n-\n-    temp.proto = ipv4_hdr->proto;\n     temp.priority = f->priority;\n     temp.tos = ipv4_hdr->tos;\n     return ipfilter_apply_filter(f, &temp);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eec11dcaebfb3398a2b4c5709c218b593a1cf5f5",
            "date": "2024-12-19T09:25:00Z",
            "author_login": "Diebbo"
          },
          {
            "sha": "aa34a305ee66dc8eb24458bfba6cb884b5b2a972",
            "date": "2024-12-07T21:57:07Z",
            "author_login": "Diebbo"
          },
          {
            "sha": "cc923d2a1221d2066dc9270fb86c5c43635ce06e",
            "date": "2024-12-07T21:42:56Z",
            "author_login": "Diebbo"
          },
          {
            "sha": "cd6ec86ffacfd60f8aaa5d7973dd3ec88c34780c",
            "date": "2024-05-31T07:37:57Z",
            "author_login": "scribam"
          },
          {
            "sha": "123cfe3ab499f0d7805aa64c43070c1cc856cd86",
            "date": "2024-02-19T13:28:50Z",
            "author_login": "FelixSchladt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": null,
    "description": "VirtualSquare picoTCP (aka PicoTCP-NG) through 2.1 does not check the transport layer length in a frame before performing port filtering.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-19T03:15:09.227",
    "last_modified": "2024-12-12T01:24:19.260",
    "fix_date": "2023-05-12T20:24:23Z"
  },
  "references": [
    {
      "url": "https://github.com/virtualsquare/picotcp/commit/d561990a358899178115e156871cc054a1c55ffe",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/virtualsquare/picotcp/commit/d561990a358899178115e156871cc054a1c55ffe",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:59.376171",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "picotcp",
    "owner": "virtualsquare",
    "created_at": "2020-08-23T10:09:15Z",
    "updated_at": "2025-01-04T21:12:56Z",
    "pushed_at": "2024-12-19T17:04:21Z",
    "size": 10537,
    "stars": 66,
    "forks": 17,
    "open_issues": 6,
    "watchers": 66,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 2819880,
      "Python": 29783,
      "Shell": 26259,
      "Makefile": 25814
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:27:56.444341"
  }
}