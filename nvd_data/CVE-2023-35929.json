{
  "cve_id": "CVE-2023-35929",
  "github_data": {
    "repository": "Enalean/tuleap",
    "fix_commit": "0b2945fbd260d37aa0aff2ca1c867d160f76188d",
    "related_commits": [
      "0b2945fbd260d37aa0aff2ca1c867d160f76188d",
      "0b2945fbd260d37aa0aff2ca1c867d160f76188d"
    ],
    "patch_url": "https://github.com/Enalean/tuleap/commit/0b2945fbd260d37aa0aff2ca1c867d160f76188d.patch",
    "fix_commit_details": {
      "sha": "0b2945fbd260d37aa0aff2ca1c867d160f76188d",
      "commit_date": "2023-06-21T11:45:56Z",
      "author": {
        "login": "LeSuisse",
        "type": "User",
        "stats": {
          "total_commits": 13553,
          "average_weekly_commits": 13.158252427184467,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 479
        }
      },
      "commit_message": {
        "title": "Fixes request #32629: XSS in the card field of the agile dashboard apps",
        "length": 477,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 416,
        "additions": 340,
        "deletions": 76
      },
      "files": [
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/package.json",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -18,19 +18,18 @@\n   \"dependencies\": {\n     \"@tuleap/tlp-swatch-colors\": \"workspace:*\",\n     \"dompurify\": \"^3.0.0\",\n-    \"escape-string-regexp\": \"^2.0.0\"\n+    \"escape-string-regexp\": \"^2.0.0\",\n+    \"hybrids\": \"^8.2.1\"\n   },\n   \"peerDependencies\": {\n     \"angular\": \"^1.8.0\",\n-    \"angular-sanitize\": \"^1.8.0\",\n     \"moment\": \"^2.29.1\"\n   },\n   \"devDependencies\": {\n     \"@tuleap/build-system-configurator\": \"workspace:*\",\n     \"@types/dompurify\": \"^2.4.0\",\n     \"angular\": \"^1.8.2\",\n-    \"angular-mocks\": \"^1.8.2\",\n-    \"angular-sanitize\": \"^1.8.2\"\n+    \"angular-mocks\": \"^1.8.2\"\n   },\n   \"scripts\": {\n     \"build\": \"vite build\","
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/pnpm-lock.yaml",
          "status": "modified",
          "additions": 9,
          "deletions": 7,
          "patch": "@@ -10,6 +10,9 @@ dependencies:\n   escape-string-regexp:\n     specifier: ^2.0.0\n     version: 2.0.0\n+  hybrids:\n+    specifier: ^8.2.1\n+    version: 8.2.1\n \n devDependencies:\n   '@tuleap/build-system-configurator':\n@@ -24,9 +27,6 @@ devDependencies:\n   angular-mocks:\n     specifier: ^1.8.2\n     version: 1.8.2\n-  angular-sanitize:\n-    specifier: ^1.8.2\n-    version: 1.8.2\n \n packages:\n \n@@ -44,10 +44,6 @@ packages:\n     resolution: {integrity: sha512-I5L3P0l21HPdVsP4A4qWmENt4ePjjbkDFdAzOaM7QiibFySbt14DptPbt2IjeG4vFBr4vSLbhIz8Fk03DISl8Q==}\n     dev: true\n \n-  /angular-sanitize@1.8.2:\n-    resolution: {integrity: sha512-OB6Goa+QN3byf5asQ7XRl7DKZejm/F/ZOqa9z1skqYVOWA2hoBxoCmt9E7+i7T/TbxZP5zYzKxNZVVJNu860Hg==}\n-    dev: true\n-\n   /angular@1.8.2:\n     resolution: {integrity: sha512-IauMOej2xEe7/7Ennahkbb5qd/HFADiNuLSESz9Q27inmi32zB0lnAsFeLEWcox3Gd1F6YhNd1CP7/9IukJ0Gw==}\n     dev: true\n@@ -60,3 +56,9 @@ packages:\n     resolution: {integrity: sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==}\n     engines: {node: '>=8'}\n     dev: false\n+\n+  /hybrids@8.2.1:\n+    resolution: {integrity: sha512-ZIjDLZi6aBOL+Cdry1xtBLJJnMzx99HNwmOCQXEvqdawyYu949z469vxgExyAgq0CA4lSfJsjh1rsiIsGdqXdw==}\n+    engines: {node: '>=18.0.0'}\n+    hasBin: true\n+    dev: false"
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/src/card-fields-service.js",
          "status": "modified",
          "additions": 64,
          "deletions": 43,
          "patch": "@@ -1,12 +1,11 @@\n-import moment from \"moment\";\n+import { html } from \"hybrids\";\n+import { highlightFilterElements } from \"./highlight-filter-template\";\n \n export default CardFieldsService;\n \n-CardFieldsService.$inject = [\"$sce\", \"$filter\"];\n-\n-function CardFieldsService($sce, $filter) {\n-    const highlight = $filter(\"tuleapHighlight\");\n+CardFieldsService.$inject = [\"$sce\"];\n \n+function CardFieldsService($sce) {\n     return {\n         cardFieldIsSimpleValue,\n         cardFieldIsList,\n@@ -18,7 +17,6 @@ function CardFieldsService($sce, $filter) {\n         cardFieldIsPermissions,\n         cardFieldIsUser,\n         cardFieldIsComputed,\n-        getCardFieldDateValue,\n         getCardFieldListValues,\n         getCardFieldFileValue,\n         getCardFieldPermissionsValue,\n@@ -99,35 +97,35 @@ function CardFieldsService($sce, $filter) {\n             } else if (value.tlp_color) {\n                 return getValueRenderedWithTlpColor(value, filter_terms);\n             } else if (value.avatar_url) {\n-                return getCardFieldUserValue(value, filter_terms);\n+                return getCardFieldUserValueTemplate(value, filter_terms);\n             }\n \n-            return highlight(value.label, filter_terms);\n+            return highlightFilterElements(value.label, filter_terms);\n         }\n \n         function getValueRenderedWithColor(value, filter_terms) {\n             const r = parseInt(value.color.r, 10);\n             const g = parseInt(value.color.g, 10);\n             const b = parseInt(value.color.b, 10);\n-            const color = $sce.getTrustedHtml(`<span class=\"extra-card-field-color\"\n-                style=\"background: rgb(${r}, ${g}, ${b})\"></span>`);\n \n-            return color + highlight(value.label, filter_terms);\n+            const styles = {\n+                background: `rgb(${r}, ${g}, ${b})`,\n+            };\n+\n+            return html`<span class=\"extra-card-field-color\" style=\"${styles}\"></span\n+                >${highlightFilterElements(value.label, filter_terms)}`;\n         }\n \n         function getValueRenderedWithTlpColor({ label, tlp_color }, filter_terms) {\n-            const color = $sce.getTrustedHtml(\n-                `<span class=\"extra-card-field-color card-field-${tlp_color}\"></span>`\n-            );\n+            const classlist = [\"extra-card-field-color\", `card-field-${tlp_color}`];\n \n-            return color + highlight(label, filter_terms);\n+            return html`<span class=\"${classlist}\"></span>${highlightFilterElements(\n+                    label,\n+                    filter_terms\n+                )}`;\n         }\n \n-        return $sce.trustAsHtml(values.map(getValueRendered).join(\", \"));\n-    }\n-\n-    function getCardFieldDateValue(value) {\n-        return moment(value).fromNow();\n+        return getHTMLStringFromTemplate(renderListItems(values, getValueRendered));\n     }\n \n     function getCardFieldFileValue(artifact_id, field_id, file_descriptions, filter_terms) {\n@@ -141,41 +139,64 @@ function CardFieldsService($sce, $filter) {\n         }\n \n         function getFileLink(file) {\n-            var file_name = highlight(file.name, filter_terms);\n-\n-            return (\n-                '<a data-nodrag=\"true\" href=\"' +\n-                getFileUrl(file) +\n-                '\" title=\"' +\n-                file.description +\n-                '\"><i class=\"fas fa-paperclip extra-card-field-file-icon\"></i>' +\n-                file_name +\n-                \"</a>\"\n-            );\n+            const file_display = html`<i class=\"fas fa-paperclip extra-card-field-file-icon\"></i\n+                >${highlightFilterElements(file.name, filter_terms)}`;\n+            return html`<a data-nodrag=\"true\" href=\"${getFileUrl(file)}\" title=\"${file.description}\"\n+                >${file_display}</a\n+            >`;\n         }\n \n-        return file_descriptions.map(getFileLink).join(\", \");\n+        return getHTMLStringFromTemplate(renderListItems(file_descriptions, getFileLink));\n     }\n \n-    function getCardFieldPermissionsValue(values) {\n-        return values.join(\", \");\n+    function getCardFieldPermissionsValue(values, filter_terms) {\n+        return getHTMLStringFromTemplate(\n+            renderListItems(\n+                values,\n+                (value) => html`${highlightFilterElements(value, filter_terms)}`\n+            )\n+        );\n     }\n \n-    function getCardFieldUserValue(value, filter_terms) {\n-        let display_name;\n-\n+    function getCardFieldUserValueTemplate(value, filter_terms) {\n+        const display_name = highlightFilterElements(value.display_name, filter_terms);\n         if (value.user_url === null) {\n-            display_name = highlight(value.display_name, filter_terms);\n-            return `<div class=\"tlp-avatar-mini\"> </div><span>${display_name}</span>`;\n+            return html`<div class=\"tlp-avatar-mini\"></div>\n+                <span>${display_name}</span>`;\n         }\n \n-        display_name = highlight(value.display_name, filter_terms);\n-        return `<a data-nodrag=\"true\" class=\"extra-card-field-user\" href=\"${value.user_url}\">\n-                            <div class=\"tlp-avatar-mini\"><img src=\"${value.avatar_url}\" /></div><span>${display_name}</span>\n-                        </a>`;\n+        return html`<a data-nodrag=\"true\" class=\"extra-card-field-user\" href=\"${value.user_url}\">\n+            <div class=\"tlp-avatar-mini\"><img loading=\"lazy\" src=\"${value.avatar_url}\" /></div>\n+            <span>${display_name}</span>\n+        </a>`;\n+    }\n+\n+    function getCardFieldUserValue(value, filter_terms) {\n+        return getHTMLStringFromTemplate(getCardFieldUserValueTemplate(value, filter_terms));\n     }\n \n     function isListBoundToAValueDifferentFromNone(values) {\n         return values.find((value) => value.id !== null);\n     }\n+\n+    function renderListItems(items, render_item) {\n+        let templated_content = html``;\n+\n+        for (const [i, file] of items.entries()) {\n+            if (i === 0) {\n+                templated_content = render_item(file);\n+            } else {\n+                templated_content = html`${templated_content}, ${render_item(file)}`;\n+            }\n+        }\n+\n+        return templated_content;\n+    }\n+\n+    function getHTMLStringFromTemplate(template) {\n+        const element = document.createElement(\"div\");\n+        template({}, element);\n+\n+        return $sce.trustAsHtml(element.innerHTML);\n+    }\n }"
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/src/card-fields.tpl.html",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -62,7 +62,7 @@\n                 ng-if=\"card_ctrl.cardFieldIsPermissions(card_field.type) && card_field.granted_groups.length > 0\"\n         >\n             <span class=\"extra-card-field-title\">{{ card_field.label }}: </span>\n-            <span ng-bind-html=\"card_ctrl.getCardFieldPermissionsValue(card_field.granted_groups) | tuleapHighlight:card_ctrl.filter_terms\"></span>\n+            <span ng-bind-html=\"card_ctrl.getCardFieldPermissionsValue(card_field.granted_groups, card_ctrl.filter_terms)\"></span>\n         </div>\n         <div\n                 class=\"extra-card-field-content\""
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/src/highlight-filter-template.test.ts",
          "status": "added",
          "additions": 205,
          "deletions": 0,
          "patch": "@@ -0,0 +1,205 @@\n+/**\n+ * Copyright (c) Enalean, 2023-Present. All Rights Reserved.\n+ *\n+ * This file is a part of Tuleap.\n+ *\n+ * Tuleap is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Tuleap is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import { highlightFilterElements } from \"./highlight-filter-template\";\n+import type { UpdateFunctionWithMethods } from \"hybrids\";\n+\n+jest.mock(\"escape-string-regexp\", () => ({\n+    default: jest.requireActual(\"escape-string-regexp\"),\n+}));\n+\n+const TEST_PHRASE = \"Prefix Highlight Suffix\";\n+\n+describe(\"highlight-filter-template\", () => {\n+    it(\"should highlight a matching phrase\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(TEST_PHRASE, \"highlight\")))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              \n+              \n+              Prefix \n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                Highlight\n+              </span>\n+              \n+               Suffix\n+            </div>\n+        `);\n+    });\n+\n+    it(\"should highlight nothing if no match found\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(TEST_PHRASE, \"no match\")))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              \n+              \n+              Prefix Highlight Suffix\n+            </div>\n+        `);\n+    });\n+\n+    it(\"should highlight nothing for the undefined filter\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(TEST_PHRASE, undefined)))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              Prefix Highlight Suffix\n+            </div>\n+        `);\n+    });\n+\n+    it(\"should work correctly for number filters\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(\"3210123\", 0)))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              \n+              \n+              321\n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                0\n+              </span>\n+              \n+              123\n+            </div>\n+        `);\n+    });\n+\n+    it(\"should work when the text context is undefined\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(undefined, \"nothing\")))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              \n+            </div>\n+        `);\n+    });\n+\n+    it(\"should work correctly for number text\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(3210123, \"0\")))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              \n+              \n+              321\n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                0\n+              </span>\n+              \n+              123\n+            </div>\n+        `);\n+    });\n+\n+    it(\"should highlight nothing if empty filter string passed\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(TEST_PHRASE, \"\")))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              Prefix Highlight Suffix\n+            </div>\n+        `);\n+    });\n+\n+    it(\"should highlight more that one element\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(TEST_PHRASE, \"gh\")))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              \n+              \n+              Prefix Hi\n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                gh\n+              </span>\n+              \n+              li\n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                gh\n+              </span>\n+              \n+              t Suffix\n+            </div>\n+        `);\n+    });\n+\n+    it(\"highlights each matching search terms\", () => {\n+        expect(getElementFromTemplate(highlightFilterElements(TEST_PHRASE, \"suffix highlight\")))\n+            .toMatchInlineSnapshot(`\n+            <div>\n+              \n+              \n+              Prefix \n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                Highlight\n+              </span>\n+              \n+               \n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                Suffix\n+              </span>\n+            </div>\n+        `);\n+    });\n+\n+    it(\"should escape regexp search terms\", () => {\n+        expect(\n+            getElementFromTemplate(\n+                highlightFilterElements(\"Prefix (Highlight) Suffix\", \"(Highlight)\")\n+            )\n+        ).toMatchInlineSnapshot(`\n+            <div>\n+              \n+              \n+              Prefix \n+              \n+              <span\n+                class=\"highlight\"\n+              >\n+                (Highlight)\n+              </span>\n+              \n+               Suffix\n+            </div>\n+        `);\n+    });\n+});\n+\n+function getElementFromTemplate(template: UpdateFunctionWithMethods<unknown>): HTMLElement {\n+    const element = document.createElement(\"div\");\n+    template(document.body, element);\n+\n+    return element;\n+}"
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/src/highlight-filter-template.ts",
          "status": "added",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) Enalean, 2023-Present. All Rights Reserved.\n+ *\n+ * This file is a part of Tuleap.\n+ *\n+ * Tuleap is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Tuleap is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+import type { UpdateFunctionWithMethods } from \"hybrids\";\n+import { html } from \"hybrids\";\n+import { Classifier } from \"./highlight/Classifier\";\n+import { HighlightedText } from \"./highlight/HighlightedText\";\n+export function highlightFilterElements(\n+    content: string | number | undefined,\n+    search: string | number | undefined\n+): UpdateFunctionWithMethods<unknown> {\n+    const text_content = content?.toString();\n+    if (\n+        text_content === \"\" ||\n+        text_content === undefined ||\n+        search === \"\" ||\n+        search === undefined\n+    ) {\n+        return html`${text_content}`;\n+    }\n+\n+    const classifier = Classifier(search.toString());\n+    const templates = classifier.classify(text_content).map((highlighted_text) => {\n+        if (!HighlightedText.isHighlight(highlighted_text)) {\n+            return html`${highlighted_text.content}`;\n+        }\n+        return html`<span class=\"highlight\">${highlighted_text.content}</span>`;\n+    });\n+    return html`${templates}`;\n+}"
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/src/highlight-filter.js",
          "status": "modified",
          "additions": 9,
          "deletions": 16,
          "patch": "@@ -5,9 +5,7 @@\n  * @license MIT\n  */\n \n-import { isNumber } from \"angular\";\n-import { Classifier } from \"./highlight/Classifier\";\n-import { HighlightedText } from \"./highlight/HighlightedText\";\n+import { highlightFilterElements } from \"./highlight-filter-template\";\n \n export default TuleapHighlightFilter;\n \n@@ -19,22 +17,17 @@ TuleapHighlightFilter.$inject = [];\n  * @returns HTML-encoded string\n  */\n function TuleapHighlightFilter() {\n-    function isTextSearchable(text, search) {\n-        return text && (search || isNumber(search));\n+    function getHTMLStringFromTemplate(template) {\n+        const element = document.createElement(\"div\");\n+        template({}, element);\n+\n+        return element.innerHTML;\n     }\n \n     return function (text, search) {\n-        if (!isTextSearchable(text, search)) {\n-            return text ? text.toString() : text;\n+        if (text === null) {\n+            return null;\n         }\n-\n-        const classifier = Classifier(String(search));\n-        const parts = classifier.classify(String(text)).map((highlighted_text) => {\n-            if (!HighlightedText.isHighlight(highlighted_text)) {\n-                return highlighted_text.content;\n-            }\n-            return `<span class=\"highlight\">${highlighted_text.content}</span>`;\n-        });\n-        return parts.join(\"\");\n+        return getHTMLStringFromTemplate(highlightFilterElements(text, search));\n     };\n }"
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/src/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -1,5 +1,4 @@\n import angular from \"angular\";\n-import ngSanitize from \"angular-sanitize\";\n import \"../themes/main.scss\";\n \n import HighlightFilter from \"./highlight-filter.js\";\n@@ -11,7 +10,7 @@ import cardComputedFieldDirective from \"./card-computed-field/card-computed-fiel\n import cardTextFieldDirective from \"./card-text-field/card-text-field-directive.js\";\n \n export default angular\n-    .module(\"card-fields\", [ngSanitize])\n+    .module(\"card-fields\", [])\n     .service(\"CardFieldsService\", CardFieldsService)\n     .directive(\"cardFields\", CardFieldsDirective)\n     .directive(\"tuleapSimpleField\", tuleapSimpleFieldDirective)"
        },
        {
          "filename": "plugins/agiledashboard/scripts/lib/card-fields/vite.config.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -27,12 +27,11 @@ export default vite.defineLibConfig({\n             name: \"PluginAgileDashboardCardFields\",\n         },\n         rollupOptions: {\n-            external: [\"angular\", \"angular-sanitize\", \"moment\"],\n+            external: [\"angular\", \"hybrids\"],\n             output: {\n                 globals: {\n                     angular: \"angular\",\n-                    \"angular-sanitize\": \"angular-sanitize\",\n-                    moment: \"moment\",\n+                    hybrids: \"hybrids\",\n                 },\n             },\n         },"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "051276cb436588a4baff62939e527b88f3f40017",
            "date": "2025-01-14T13:00:48Z",
            "author_login": "magarnier"
          },
          {
            "sha": "aaf9917432f71eeb59a3e17eda2d0a53383216e9",
            "date": "2025-01-14T13:00:39Z",
            "author_login": "magarnier"
          },
          {
            "sha": "2238687f40ca2e7ebc48478356ef6c4abff3233b",
            "date": "2025-01-14T09:25:59Z",
            "author_login": "magarnier"
          },
          {
            "sha": "2c81587aad70e2d52b60dc0edac7b41c341e002e",
            "date": "2025-01-14T09:25:53Z",
            "author_login": "magarnier"
          },
          {
            "sha": "33818218db54e2a64bf71772ac19c612b3ba406a",
            "date": "2025-01-14T09:19:45Z",
            "author_login": "magarnier"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Tuleap is a free and open source suite to improve management of software development and collaboration. Prior to version 14.10.99.4 of Tuleap Community Edition and prior to versions 14.10-2 and 14.9-5 of Tuleap Enterprise Edition, content displayed in the \"card fields\" (visible in the kanban and PV2 apps) is not properly escaped. A malicious user with the capability to create an artifact or to edit a field used as a card field could force victim to execute uncontrolled code. Tuleap Community Edition 14.10.99.4, Tuleap Enterprise Edition 14.10-2, and Tuleap Enterprise Edition 14.9-5 contain a fix.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-25T18:15:10.897",
    "last_modified": "2024-11-21T08:08:59.820",
    "fix_date": "2023-06-21T11:45:56Z"
  },
  "references": [
    {
      "url": "https://github.com/Enalean/tuleap/commit/0b2945fbd260d37aa0aff2ca1c867d160f76188d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-xhjp-4rjf-q268",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=0b2945fbd260d37aa0aff2ca1c867d160f76188d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/tracker/?aid=32629",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/Enalean/tuleap/commit/0b2945fbd260d37aa0aff2ca1c867d160f76188d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-xhjp-4rjf-q268",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=0b2945fbd260d37aa0aff2ca1c867d160f76188d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://tuleap.net/plugins/tracker/?aid=32629",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.270194",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tuleap",
    "owner": "Enalean",
    "created_at": "2012-06-12T15:48:54Z",
    "updated_at": "2025-01-14T09:23:28Z",
    "pushed_at": "2025-01-14T09:23:22Z",
    "size": 382430,
    "stars": 1043,
    "forks": 285,
    "open_issues": 3,
    "watchers": 1043,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 64309783,
      "TypeScript": 12164261,
      "JavaScript": 4302645,
      "Vue": 3161023,
      "Mustache": 2174238,
      "SCSS": 1603030,
      "HTML": 502284,
      "CSS": 281155,
      "Shell": 126767,
      "Smarty": 121199,
      "MDX": 89474,
      "Nix": 48015,
      "Go": 44709,
      "Makefile": 41978,
      "Rust": 27741,
      "Groovy": 13947,
      "PEG.js": 12394,
      "Perl": 11384,
      "Dockerfile": 10302,
      "Python": 3977,
      "XSLT": 1077,
      "Awk": 597
    },
    "commit_activity": {
      "total_commits_last_year": 5447,
      "avg_commits_per_week": 104.75,
      "days_active_last_year": 255
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:46:56.606881"
  }
}