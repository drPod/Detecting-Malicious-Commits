{
  "cve_id": "CVE-2023-35933",
  "github_data": {
    "repository": "openfga/openfga",
    "fix_commit": "087ce392595f3c319ab3028b5089118ea4063452",
    "related_commits": [
      "087ce392595f3c319ab3028b5089118ea4063452",
      "087ce392595f3c319ab3028b5089118ea4063452"
    ],
    "patch_url": "https://github.com/openfga/openfga/commit/087ce392595f3c319ab3028b5089118ea4063452.patch",
    "fix_commit_details": {
      "sha": "087ce392595f3c319ab3028b5089118ea4063452",
      "commit_date": "2023-06-26T18:12:07Z",
      "author": {
        "login": "jon-whit",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-hr9r-8phq-5x8j",
        "length": 625,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1233,
        "additions": 881,
        "deletions": 352
      },
      "files": [
        {
          "filename": "cmd/validatemodels/validate_models.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -126,7 +126,7 @@ func ValidateAllAuthorizationModels(ctx context.Context, db storage.OpenFGADatas\n \n \t\t\t\t// validate each model\n \t\t\t\tfor _, model := range models {\n-\t\t\t\t\t_, err := typesystem.NewAndValidate(model)\n+\t\t\t\t\t_, err := typesystem.NewAndValidate(context.Background(), model)\n \n \t\t\t\t\tvalidationResult := validationResult{\n \t\t\t\t\t\tStoreID:       store.Id,"
        },
        {
          "filename": "pkg/server/commands/expand.go",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -51,7 +51,10 @@ func (q *ExpandQuery) Execute(ctx context.Context, req *openfgapb.ExpandRequest)\n \t\treturn nil, serverErrors.ValidationError(typesystem.ErrInvalidSchemaVersion)\n \t}\n \n-\ttypesys := typesystem.New(model)\n+\ttypesys, err := typesystem.NewAndValidate(ctx, model)\n+\tif err != nil {\n+\t\treturn nil, serverErrors.ValidationError(typesystem.ErrInvalidModel)\n+\t}\n \n \tif err = validation.ValidateObject(typesys, tk); err != nil {\n \t\treturn nil, serverErrors.ValidationError(err)"
        },
        {
          "filename": "pkg/server/commands/write_authzmodel.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -45,7 +45,7 @@ func (w *WriteAuthorizationModelCommand) Execute(ctx context.Context, req *openf\n \t\tTypeDefinitions: req.GetTypeDefinitions(),\n \t}\n \n-\t_, err := typesystem.NewAndValidate(model)\n+\t_, err := typesystem.NewAndValidate(ctx, model)\n \tif err != nil {\n \t\treturn nil, serverErrors.InvalidAuthorizationModelInput(err)\n \t}"
        },
        {
          "filename": "pkg/server/server.go",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -105,7 +105,10 @@ func (s *Server) ListObjects(ctx context.Context, req *openfgapb.ListObjectsRequ\n \t\treturn nil, err\n \t}\n \n-\ttypesys := typesystem.New(model)\n+\ttypesys, err := typesystem.NewAndValidate(ctx, model)\n+\tif err != nil {\n+\t\treturn nil, serverErrors.ValidationError(typesystem.ErrInvalidModel)\n+\t}\n \n \tctx = typesystem.ContextWithTypesystem(ctx, typesys)\n \n@@ -151,7 +154,10 @@ func (s *Server) StreamedListObjects(req *openfgapb.StreamedListObjectsRequest,\n \t\treturn serverErrors.HandleError(\"\", err)\n \t}\n \n-\ttypesys := typesystem.New(model)\n+\ttypesys, err := typesystem.NewAndValidate(ctx, model)\n+\tif err != nil {\n+\t\treturn serverErrors.ValidationError(typesystem.ErrInvalidModel)\n+\t}\n \n \tctx = typesystem.ContextWithTypesystem(ctx, typesys)\n \n@@ -237,7 +243,10 @@ func (s *Server) Check(ctx context.Context, req *openfgapb.CheckRequest) (*openf\n \t\treturn nil, serverErrors.ValidationError(typesystem.ErrInvalidSchemaVersion)\n \t}\n \n-\ttypesys := typesystem.New(model)\n+\ttypesys, err := typesystem.NewAndValidate(ctx, model)\n+\tif err != nil {\n+\t\treturn nil, serverErrors.ValidationError(typesystem.ErrInvalidModel)\n+\t}\n \n \tif err := validation.ValidateUserObjectRelation(typesys, tk); err != nil {\n \t\treturn nil, serverErrors.ValidationError(err)"
        },
        {
          "filename": "pkg/server/server_test.go",
          "status": "modified",
          "additions": 93,
          "deletions": 6,
          "patch": "@@ -175,7 +175,7 @@ func TestCheckDoesNotThrowBecauseDirectTupleWasFound(t *testing.T) {\n \t\tLogger:    logger.NewNoopLogger(),\n \t\tTransport: gateway.NewNoopTransport(),\n \t}, &Config{\n-\t\tResolveNodeLimit: 25,\n+\t\tResolveNodeLimit: test.DefaultResolveNodeLimit,\n \t})\n \n \tcheckResponse, err := s.Check(ctx, &openfgapb.CheckRequest{\n@@ -187,6 +187,93 @@ func TestCheckDoesNotThrowBecauseDirectTupleWasFound(t *testing.T) {\n \trequire.Equal(t, true, checkResponse.Allowed)\n }\n \n+func TestOperationsWithInvalidModel(t *testing.T) {\n+\tctx := context.Background()\n+\tstoreID := ulid.Make().String()\n+\tmodelID := ulid.Make().String()\n+\n+\t// The model is invalid\n+\ttypedefs := parser.MustParse(`\n+\ttype user\n+\n+\ttype repo\n+\t  relations\n+        define admin: [user] as self\n+\t    define r1: [user] as self and r2 and r3\n+\t    define r2: [user] as self and r1 and r3\n+\t    define r3: [user] as self and r1 and r2\n+\t`)\n+\n+\ttk := tuple.NewTupleKey(\"repo:openfga\", \"r1\", \"user:anne\")\n+\tmockController := gomock.NewController(t)\n+\tdefer mockController.Finish()\n+\n+\tmockDatastore := mockstorage.NewMockOpenFGADatastore(mockController)\n+\n+\tmockDatastore.EXPECT().\n+\t\tReadAuthorizationModel(gomock.Any(), storeID, modelID).\n+\t\tAnyTimes().\n+\t\tReturn(&openfgapb.AuthorizationModel{\n+\t\t\tSchemaVersion:   typesystem.SchemaVersion1_1,\n+\t\t\tTypeDefinitions: typedefs,\n+\t\t}, nil)\n+\n+\t// the model is error and err should return\n+\n+\ts := New(&Dependencies{\n+\t\tDatastore: mockDatastore,\n+\t\tLogger:    logger.NewNoopLogger(),\n+\t\tTransport: gateway.NewNoopTransport(),\n+\t}, &Config{\n+\t\tResolveNodeLimit: test.DefaultResolveNodeLimit,\n+\t})\n+\n+\t_, err := s.Check(ctx, &openfgapb.CheckRequest{\n+\t\tStoreId:              storeID,\n+\t\tTupleKey:             tk,\n+\t\tAuthorizationModelId: modelID,\n+\t})\n+\trequire.Error(t, err)\n+\te, ok := status.FromError(err)\n+\trequire.True(t, ok)\n+\trequire.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())\n+\n+\t_, err = s.ListObjects(ctx, &openfgapb.ListObjectsRequest{\n+\t\tStoreId:              storeID,\n+\t\tAuthorizationModelId: modelID,\n+\t\tType:                 \"repo\",\n+\t\tRelation:             \"r1\",\n+\t\tUser:                 \"user:anne\",\n+\t})\n+\trequire.Error(t, err)\n+\te, ok = status.FromError(err)\n+\trequire.True(t, ok)\n+\trequire.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())\n+\n+\terr = s.StreamedListObjects(&openfgapb.StreamedListObjectsRequest{\n+\t\tStoreId:              storeID,\n+\t\tAuthorizationModelId: modelID,\n+\t\tType:                 \"repo\",\n+\t\tRelation:             \"r1\",\n+\t\tUser:                 \"user:anne\",\n+\t}, NewMockStreamServer())\n+\trequire.Error(t, err)\n+\te, ok = status.FromError(err)\n+\trequire.True(t, ok)\n+\trequire.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())\n+\n+\t_, err = s.Expand(ctx, &openfgapb.ExpandRequest{\n+\t\tStoreId:              storeID,\n+\t\tAuthorizationModelId: modelID,\n+\t\tTupleKey:             tk,\n+\t})\n+\trequire.Error(t, err)\n+\te, ok = status.FromError(err)\n+\trequire.True(t, ok)\n+\trequire.Equal(t, codes.Code(openfgapb.ErrorCode_validation_error), e.Code())\n+\n+}\n+\n func TestShortestPathToSolutionWins(t *testing.T) {\n \tctx := context.Background()\n \n@@ -245,7 +332,7 @@ func TestShortestPathToSolutionWins(t *testing.T) {\n \t\tLogger:    logger.NewNoopLogger(),\n \t\tTransport: gateway.NewNoopTransport(),\n \t}, &Config{\n-\t\tResolveNodeLimit: 25,\n+\t\tResolveNodeLimit: test.DefaultResolveNodeLimit,\n \t})\n \n \tstart := time.Now()\n@@ -380,7 +467,7 @@ func BenchmarkListObjectsNoRaceCondition(b *testing.B) {\n \t\tTransport: transport,\n \t\tLogger:    logger,\n \t}, &Config{\n-\t\tResolveNodeLimit:      25,\n+\t\tResolveNodeLimit:      test.DefaultResolveNodeLimit,\n \t\tListObjectsDeadline:   5 * time.Second,\n \t\tListObjectsMaxResults: 1000,\n \t})\n@@ -440,7 +527,7 @@ func TestListObjects_Unoptimized_UnhappyPaths(t *testing.T) {\n \t\tTransport: transport,\n \t\tLogger:    logger,\n \t}, &Config{\n-\t\tResolveNodeLimit:      25,\n+\t\tResolveNodeLimit:      test.DefaultResolveNodeLimit,\n \t\tListObjectsDeadline:   5 * time.Second,\n \t\tListObjectsMaxResults: 1000,\n \t})\n@@ -521,7 +608,7 @@ func TestListObjects_UnhappyPaths(t *testing.T) {\n \t\tTransport: transport,\n \t\tLogger:    logger,\n \t}, &Config{\n-\t\tResolveNodeLimit:      25,\n+\t\tResolveNodeLimit:      test.DefaultResolveNodeLimit,\n \t\tListObjectsDeadline:   5 * time.Second,\n \t\tListObjectsMaxResults: 1000,\n \t})\n@@ -587,7 +674,7 @@ func TestAuthorizationModelInvalidSchemaVersion(t *testing.T) {\n \t\ttransport: transport,\n \t\tlogger:    logger,\n \t\tconfig: &Config{\n-\t\t\tResolveNodeLimit:      25,\n+\t\t\tResolveNodeLimit:      test.DefaultResolveNodeLimit,\n \t\t\tListObjectsDeadline:   5 * time.Second,\n \t\t\tListObjectsMaxResults: 1000,\n \t\t},"
        },
        {
          "filename": "pkg/server/test/connected_objects.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -908,7 +908,7 @@ func ConnectedObjectsTest(t *testing.T, ds storage.OpenFGADatastore) {\n \t\t\trequire.NoError(err)\n \n \t\t\tif test.resolveNodeLimit == 0 {\n-\t\t\t\ttest.resolveNodeLimit = defaultResolveNodeLimit\n+\t\t\t\ttest.resolveNodeLimit = DefaultResolveNodeLimit\n \t\t\t}\n \n \t\t\tconnectedObjectsCmd := commands.ConnectedObjectsCommand{"
        },
        {
          "filename": "pkg/server/test/expand.go",
          "status": "modified",
          "additions": 12,
          "deletions": 279,
          "patch": "@@ -90,6 +90,9 @@ func TestExpandQuery(t *testing.T, datastore storage.OpenFGADatastore) {\n \t\t\t\tId:            ulid.Make().String(),\n \t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n \t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"user\",\n+\t\t\t\t\t},\n \t\t\t\t\t{\n \t\t\t\t\t\tType: \"repo\",\n \t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n@@ -811,6 +814,9 @@ func TestExpandQuery(t *testing.T, datastore storage.OpenFGADatastore) {\n \t\t\t\tId:            ulid.Make().String(),\n \t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n \t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"user\",\n+\t\t\t\t\t},\n \t\t\t\t\t{\n \t\t\t\t\t\tType: \"document\",\n \t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n@@ -824,57 +830,8 @@ func TestExpandQuery(t *testing.T, datastore storage.OpenFGADatastore) {\n \t\t\t\t\t\t\t\t\t\ttypesystem.DirectRelationReference(\"document\", \"editor\"),\n \t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n-\t\t\ttuples: []*openfgapb.TupleKey{\n-\t\t\t\ttuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),\n-\t\t\t},\n-\t\t\trequest: &openfgapb.ExpandRequest{\n-\t\t\t\tTupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"\"),\n-\t\t\t},\n-\t\t\texpected: &openfgapb.ExpandResponse{\n-\t\t\t\tTree: &openfgapb.UsersetTree{\n-\t\t\t\t\tRoot: &openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\tName: \"document:1#parent\",\n-\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n-\t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_Users{\n-\t\t\t\t\t\t\t\t\tUsers: &openfgapb.UsersetTree_Users{\n-\t\t\t\t\t\t\t\t\t\tUsers: []string{\"document:2#editor\"},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n-\t\t},\n-\t\t{\n-\t\t\tname: \"1.1_TupleToUserset_involving_wildcard_is_skipped\",\n-\t\t\tmodel: &openfgapb.AuthorizationModel{\n-\t\t\t\tId:            ulid.Make().String(),\n-\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n-\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"user\",\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"document\",\n-\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n-\t\t\t\t\t\t\t\"parent\": typesystem.This(),\n-\t\t\t\t\t\t\t\"viewer\": typesystem.Union(\n-\t\t\t\t\t\t\t\ttypesystem.This(),\n-\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"viewer\"),\n-\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t},\n-\t\t\t\t\t\tMetadata: &openfgapb.Metadata{\n-\t\t\t\t\t\t\tRelations: map[string]*openfgapb.RelationMetadata{\n-\t\t\t\t\t\t\t\t\"parent\": {\n+\t\t\t\t\t\t\t\t\"editor\": {\n \t\t\t\t\t\t\t\t\tDirectlyRelatedUserTypes: []*openfgapb.RelationReference{\n-\t\t\t\t\t\t\t\t\t\ttypesystem.WildcardRelationReference(\"user\"),\n \t\t\t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\t\t\tType: \"user\",\n \t\t\t\t\t\t\t\t\t\t},\n@@ -885,245 +842,21 @@ func TestExpandQuery(t *testing.T, datastore storage.OpenFGADatastore) {\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},\n-\t\t\ttuples: []*openfgapb.TupleKey{\n-\t\t\t\ttuple.NewTupleKey(\"document:1\", \"parent\", \"user:*\"),\n-\t\t\t\ttuple.NewTupleKey(\"document:X\", \"viewer\", \"user:jon\"),\n-\t\t\t},\n-\t\t\trequest: &openfgapb.ExpandRequest{\n-\t\t\t\tTupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),\n-\t\t\t},\n-\t\t\texpected: &openfgapb.ExpandResponse{\n-\t\t\t\tTree: &openfgapb.UsersetTree{\n-\t\t\t\t\tRoot: &openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Union{\n-\t\t\t\t\t\t\tUnion: &openfgapb.UsersetTree_Nodes{\n-\t\t\t\t\t\t\t\tNodes: []*openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_Users{},\n-\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_TupleToUserset{\n-\t\t\t\t\t\t\t\t\t\t\t\t\tTupleToUserset: &openfgapb.UsersetTree_TupleToUserset{\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tTupleset: \"document:1#parent\",\n-\t\t\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n-\t\t},\n-\t\t{\n-\t\t\tname: \"1.1_Tuple_involving_userset_skipped_if_it_is_referenced_in_a_TTU_rewrite\",\n-\t\t\tmodel: &openfgapb.AuthorizationModel{\n-\t\t\t\tId:            ulid.Make().String(),\n-\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n-\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"folder\",\n-\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n-\t\t\t\t\t\t\t\"viewer\": typesystem.This(),\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"document\",\n-\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n-\t\t\t\t\t\t\t\"parent\": typesystem.This(),\n-\t\t\t\t\t\t\t\"editor\": typesystem.This(),\n-\t\t\t\t\t\t\t\"viewer\": typesystem.TupleToUserset(\"parent\", \"viewer\"),\n-\t\t\t\t\t\t},\n-\t\t\t\t\t\tMetadata: &openfgapb.Metadata{\n-\t\t\t\t\t\t\tRelations: map[string]*openfgapb.RelationMetadata{\n-\t\t\t\t\t\t\t\t\"parent\": {\n-\t\t\t\t\t\t\t\t\tDirectlyRelatedUserTypes: []*openfgapb.RelationReference{\n-\t\t\t\t\t\t\t\t\t\ttypesystem.DirectRelationReference(\"document\", \"editor\"),\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n \t\t\ttuples: []*openfgapb.TupleKey{\n \t\t\t\ttuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#editor\"),\n \t\t\t},\n \t\t\trequest: &openfgapb.ExpandRequest{\n-\t\t\t\tTupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),\n+\t\t\t\tTupleKey: tuple.NewTupleKey(\"document:1\", \"parent\", \"\"),\n \t\t\t},\n \t\t\texpected: &openfgapb.ExpandResponse{\n \t\t\t\tTree: &openfgapb.UsersetTree{\n \t\t\t\t\tRoot: &openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\tName: \"document:1#viewer\",\n+\t\t\t\t\t\tName: \"document:1#parent\",\n \t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n \t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_TupleToUserset{\n-\t\t\t\t\t\t\t\t\tTupleToUserset: &openfgapb.UsersetTree_TupleToUserset{\n-\t\t\t\t\t\t\t\t\t\tTupleset: \"document:1#parent\",\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n-\t\t},\n-\t\t{\n-\t\t\tname: \"1.1_Tuple_involving_userset_skipped_if_same_ComputedUserset_involved_in_TTU_rewrite\",\n-\t\t\tmodel: &openfgapb.AuthorizationModel{\n-\t\t\t\tId:            ulid.Make().String(),\n-\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n-\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"user\",\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"document\",\n-\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n-\t\t\t\t\t\t\t\"parent\": typesystem.This(),\n-\t\t\t\t\t\t\t\"viewer\": typesystem.Union(\n-\t\t\t\t\t\t\t\ttypesystem.This(),\n-\t\t\t\t\t\t\t\ttypesystem.TupleToUserset(\"parent\", \"viewer\"),\n-\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t},\n-\t\t\t\t\t\tMetadata: &openfgapb.Metadata{\n-\t\t\t\t\t\t\tRelations: map[string]*openfgapb.RelationMetadata{\n-\t\t\t\t\t\t\t\t\"viewer\": {\n-\t\t\t\t\t\t\t\t\tDirectlyRelatedUserTypes: []*openfgapb.RelationReference{\n-\t\t\t\t\t\t\t\t\t\t{Type: \"user\"},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\"parent\": {\n-\t\t\t\t\t\t\t\t\tDirectlyRelatedUserTypes: []*openfgapb.RelationReference{\n-\t\t\t\t\t\t\t\t\t\ttypesystem.DirectRelationReference(\"document\", \"viewer\"),\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n-\t\t\ttuples: []*openfgapb.TupleKey{\n-\t\t\t\ttuple.NewTupleKey(\"document:1\", \"parent\", \"document:2#viewer\"),\n-\t\t\t\ttuple.NewTupleKey(\"document:2\", \"viewer\", \"user:jon\"),\n-\t\t\t},\n-\t\t\trequest: &openfgapb.ExpandRequest{\n-\t\t\t\tTupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),\n-\t\t\t},\n-\t\t\texpected: &openfgapb.ExpandResponse{\n-\t\t\t\tTree: &openfgapb.UsersetTree{\n-\t\t\t\t\tRoot: &openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Union{\n-\t\t\t\t\t\t\tUnion: &openfgapb.UsersetTree_Nodes{\n-\t\t\t\t\t\t\t\tNodes: []*openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_Users{},\n-\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_TupleToUserset{\n-\t\t\t\t\t\t\t\t\t\t\t\t\tTupleToUserset: &openfgapb.UsersetTree_TupleToUserset{\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tTupleset: \"document:1#parent\",\n-\t\t\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n-\t\t},\n-\t\t{\n-\t\t\tname: \"1.1_Tupleset_relation_involving_rewrite_skipped\",\n-\t\t\tmodel: &openfgapb.AuthorizationModel{\n-\t\t\t\tId:            ulid.Make().String(),\n-\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n-\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"user\",\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tType: \"document\",\n-\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n-\t\t\t\t\t\t\t\"parent\": typesystem.ComputedUserset(\"editor\"),\n-\t\t\t\t\t\t\t\"editor\": typesystem.This(),\n-\t\t\t\t\t\t\t\"viewer\": typesystem.Union(\n-\t\t\t\t\t\t\t\ttypesystem.This(), typesystem.TupleToUserset(\"parent\", \"viewer\"),\n-\t\t\t\t\t\t\t),\n-\t\t\t\t\t\t},\n-\t\t\t\t\t\tMetadata: &openfgapb.Metadata{\n-\t\t\t\t\t\t\tRelations: map[string]*openfgapb.RelationMetadata{\n-\t\t\t\t\t\t\t\t\"editor\": {\n-\t\t\t\t\t\t\t\t\tDirectlyRelatedUserTypes: []*openfgapb.RelationReference{\n-\t\t\t\t\t\t\t\t\t\t{Type: \"document\"},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\"viewer\": {\n-\t\t\t\t\t\t\t\t\tDirectlyRelatedUserTypes: []*openfgapb.RelationReference{\n-\t\t\t\t\t\t\t\t\t\t{Type: \"user\"},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t},\n-\t\t\t\t\t},\n-\t\t\t\t},\n-\t\t\t},\n-\t\t\ttuples: []*openfgapb.TupleKey{\n-\t\t\t\ttuple.NewTupleKey(\"document:1\", \"editor\", \"document:2\"),\n-\t\t\t\ttuple.NewTupleKey(\"document:2\", \"viewer\", \"user:jon\"),\n-\t\t\t},\n-\t\t\trequest: &openfgapb.ExpandRequest{\n-\t\t\t\tTupleKey: tuple.NewTupleKey(\"document:1\", \"viewer\", \"\"),\n-\t\t\t},\n-\t\t\texpected: &openfgapb.ExpandResponse{\n-\t\t\t\tTree: &openfgapb.UsersetTree{\n-\t\t\t\t\tRoot: &openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Union{\n-\t\t\t\t\t\t\tUnion: &openfgapb.UsersetTree_Nodes{\n-\t\t\t\t\t\t\t\tNodes: []*openfgapb.UsersetTree_Node{\n-\t\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_Users{},\n-\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t\tName: \"document:1#viewer\",\n-\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Node_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\tLeaf: &openfgapb.UsersetTree_Leaf{\n-\t\t\t\t\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_TupleToUserset{\n-\t\t\t\t\t\t\t\t\t\t\t\t\tTupleToUserset: &openfgapb.UsersetTree_TupleToUserset{\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\tTupleset: \"document:1#parent\",\n-\t\t\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\tValue: &openfgapb.UsersetTree_Leaf_Users{\n+\t\t\t\t\t\t\t\t\tUsers: &openfgapb.UsersetTree_Users{\n+\t\t\t\t\t\t\t\t\t\tUsers: []string{\"document:2#editor\"},\n \t\t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t\t},\n \t\t\t\t\t\t\t},"
        },
        {
          "filename": "pkg/server/test/list_objects.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -203,7 +203,7 @@ func TestListObjectsRespectsMaxResults(t *testing.T, ds storage.OpenFGADatastore\n \t\t\t\tLogger:                logger.NewNoopLogger(),\n \t\t\t\tListObjectsDeadline:   listObjectsDeadline,\n \t\t\t\tListObjectsMaxResults: test.maxResults,\n-\t\t\t\tResolveNodeLimit:      defaultResolveNodeLimit,\n+\t\t\t\tResolveNodeLimit:      DefaultResolveNodeLimit,\n \t\t\t}\n \t\t\ttypesys := typesystem.New(model)\n \t\t\tctx = typesystem.ContextWithTypesystem(ctx, typesys)\n@@ -313,7 +313,7 @@ func BenchmarkListObjectsWithReverseExpand(b *testing.B, ds storage.OpenFGADatas\n \tlistObjectsQuery := commands.ListObjectsQuery{\n \t\tDatastore:        ds,\n \t\tLogger:           logger.NewNoopLogger(),\n-\t\tResolveNodeLimit: defaultResolveNodeLimit,\n+\t\tResolveNodeLimit: DefaultResolveNodeLimit,\n \t}\n \n \tvar r *openfgapb.ListObjectsResponse\n@@ -379,7 +379,7 @@ func BenchmarkListObjectsWithConcurrentChecks(b *testing.B, ds storage.OpenFGADa\n \tlistObjectsQuery := commands.ListObjectsQuery{\n \t\tDatastore:        ds,\n \t\tLogger:           logger.NewNoopLogger(),\n-\t\tResolveNodeLimit: defaultResolveNodeLimit,\n+\t\tResolveNodeLimit: DefaultResolveNodeLimit,\n \t}\n \n \tvar r *openfgapb.ListObjectsResponse"
        },
        {
          "filename": "pkg/server/test/server.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -7,7 +7,7 @@ import (\n )\n \n const (\n-\tdefaultResolveNodeLimit = 25\n+\tDefaultResolveNodeLimit = 25\n )\n \n func RunAllTests(t *testing.T, ds storage.OpenFGADatastore) {\n@@ -19,7 +19,6 @@ func RunQueryTests(t *testing.T, ds storage.OpenFGADatastore) {\n \tt.Run(\"TestReadAuthorizationModelQueryErrors\", func(t *testing.T) { TestReadAuthorizationModelQueryErrors(t, ds) })\n \tt.Run(\"TestSuccessfulReadAuthorizationModelQuery\", func(t *testing.T) { TestSuccessfulReadAuthorizationModelQuery(t, ds) })\n \tt.Run(\"TestReadAuthorizationModel\", func(t *testing.T) { ReadAuthorizationModelTest(t, ds) })\n-\n \tt.Run(\"TestExpandQuery\", func(t *testing.T) { TestExpandQuery(t, ds) })\n \tt.Run(\"TestExpandQueryErrors\", func(t *testing.T) { TestExpandQueryErrors(t, ds) })\n "
        },
        {
          "filename": "pkg/server/test/write_authzmodel.go",
          "status": "modified",
          "additions": 293,
          "deletions": 0,
          "patch": "@@ -6,6 +6,7 @@ import (\n \t\"fmt\"\n \t\"testing\"\n \n+\tparser \"github.com/craigpastro/openfga-dsl-parser/v2\"\n \t\"github.com/oklog/ulid/v2\"\n \t\"github.com/openfga/openfga/pkg/logger\"\n \t\"github.com/openfga/openfga/pkg/server/commands\"\n@@ -135,6 +136,298 @@ func WriteAuthorizationModelTest(t *testing.T, datastore storage.OpenFGADatastor\n \t\t\t\t},\n \t\t\t},\n \t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_with_entrypoint\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t    define viewer: [document#viewer] as self or editor\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_without_entrypoint_1\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define viewer: [document#viewer] as self\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"viewer\",\n+\t\t\t\tCause:      typesystem.ErrCycle,\n+\t\t\t}),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_without_entrypoint_2\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t    define viewer: [document#viewer] as self and editor\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"viewer\",\n+\t\t\t\tCause:      typesystem.ErrNoEntrypoints,\n+\t\t\t}),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_without_entrypoint_3\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define restricted: [user] as self\n+\t\t\t\t    define viewer: [document#viewer] as self but not restricted\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"viewer\",\n+\t\t\t\tCause:      typesystem.ErrCycle,\n+\t\t\t}),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"rewritten_relation_in_intersection_unresolvable\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define admin: [user] as self\n+\t\t\t\t    define action1 as admin and action2 and action3\n+\t\t\t\t    define action2 as admin and action1 and action3\n+\t\t\t\t    define action3 as admin and action1 and action2\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: typesystem.SchemaVersion1_1,\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"action1\",\n+\t\t\t\tCause:      typesystem.ErrNoEntrypoints,\n+\t\t\t}),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"direct_relationship_with_entrypoint\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define viewer: [user] as self\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"computed_relationship_with_entrypoint\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t    define viewer as editor\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t},\n+\n+\t\t{\n+\t\t\tname: \"rewritten_relation_in_exclusion_unresolvable\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define admin: [user] as self\n+\t\t\t\t    define action1 as admin but not action2\n+\t\t\t\t    define action2 as admin but not action3\n+\t\t\t\t    define action3 as admin but not action1\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"action1\",\n+\t\t\t\tCause:      typesystem.ErrNoEntrypoints,\n+\t\t\t}),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no_entrypoint_3a\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define viewer: [document#viewer] as self and editor\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"viewer\",\n+\t\t\t\tCause:      typesystem.ErrNoEntrypoints,\n+\t\t\t}),\n+\t\t},\n+\n+\t\t{\n+\t\t\tname: \"no_entrypoint_3b\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define viewer: [document#viewer] as self but not editor\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"viewer\",\n+\t\t\t\tCause:      typesystem.ErrNoEntrypoints,\n+\t\t\t}),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no_entrypoint_4\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype folder\n+\t\t\t\t  relations\n+\t\t\t\t    define parent: [document] as self\n+\t\t\t\t    define viewer as editor from parent\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define parent: [folder] as self\n+\t\t\t\t    define editor as viewer\n+\t\t\t\t    define viewer as editor from parent\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(&typesystem.InvalidRelationError{\n+\t\t\t\tObjectType: \"document\",\n+\t\t\t\tRelation:   \"editor\",\n+\t\t\t\tCause:      typesystem.ErrNoEntrypoints,\n+\t\t\t}),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_with_entrypoint_1\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define restricted: [user] as self\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t    define viewer: [document#viewer] as self or editor\n+\t\t\t\t    define can_view as viewer but not restricted\n+\t\t\t\t    define can_view_actual as can_view\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_with_entrypoint_2\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t    define viewer: [document#viewer] as self or editor\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"relation_with_union_of_ttu_rewrites\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\t\t\t\ttype org\n+\t\t\t\t  relations\n+\t\t\t\t    define admin: [user] as self\n+\t\t\t\t    define member: [user] as self\n+\t\t\t\ttype group\n+\t\t\t\t  relations\n+\t\t\t\t    define member: [user] as self\n+\t\t\t\ttype feature\n+\t\t\t\t  relations\n+\t\t\t\t    define accessible as admin from subscriber_org or member from subscriber_group\n+\t\t\t\t    define subscriber_group: [group] as self\n+\t\t\t\t    define subscriber_org: [org] as self\n+\t\t\t\t`),\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"type_name_is_empty_string\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"\",\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(\n+\t\t\t\tfmt.Errorf(\"the type name of a type definition cannot be an empty string\"),\n+\t\t\t),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"relation_name_is_empty_string\",\n+\t\t\trequest: &openfgapb.WriteAuthorizationModelRequest{\n+\t\t\t\tStoreId: storeID,\n+\t\t\t\tTypeDefinitions: []*openfgapb.TypeDefinition{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"user\",\n+\t\t\t\t\t\tRelations: map[string]*openfgapb.Userset{\n+\t\t\t\t\t\t\t\"\": typesystem.This(),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tType: \"other\",\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\terr: serverErrors.InvalidAuthorizationModelInput(\n+\t\t\t\tfmt.Errorf(\"type 'user' defines a relation with an empty string for a name\"),\n+\t\t\t),\n+\t\t},\n \t}\n \n \tctx := context.Background()"
        },
        {
          "filename": "pkg/typesystem/typesystem.go",
          "status": "modified",
          "additions": 278,
          "deletions": 50,
          "patch": "@@ -5,11 +5,16 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \t\"reflect\"\n+\t\"sort\"\n \n \t\"github.com/openfga/openfga/pkg/tuple\"\n \topenfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"\n+\t\"go.opentelemetry.io/otel\"\n+\t\"golang.org/x/exp/maps\"\n )\n \n+var tracer = otel.Tracer(\"openfga/pkg/typesystem\")\n+\n type ctxKey string\n \n const (\n@@ -28,6 +33,7 @@ var (\n \tErrInvalidUsersetRewrite = errors.New(\"invalid userset rewrite definition\")\n \tErrReservedKeywords      = errors.New(\"self and this are reserved keywords\")\n \tErrCycle                 = errors.New(\"an authorization model cannot contain a cycle\")\n+\tErrNoEntrypoints         = errors.New(\"no entrypoints defined\")\n )\n \n func IsSchemaVersionSupported(version string) bool {\n@@ -150,7 +156,9 @@ func New(model *openfgapb.AuthorizationModel) *TypeSystem {\n \trelations := make(map[string]map[string]*openfgapb.Relation, len(model.GetTypeDefinitions()))\n \n \tfor _, td := range model.GetTypeDefinitions() {\n-\t\ttds[td.GetType()] = td\n+\t\ttypeName := td.GetType()\n+\n+\t\ttds[typeName] = td\n \t\ttdRelations := make(map[string]*openfgapb.Relation, len(td.GetRelations()))\n \n \t\tfor relation, rewrite := range td.GetRelations() {\n@@ -166,7 +174,7 @@ func New(model *openfgapb.AuthorizationModel) *TypeSystem {\n \n \t\t\ttdRelations[relation] = r\n \t\t}\n-\t\trelations[td.GetType()] = tdRelations\n+\t\trelations[typeName] = tdRelations\n \t}\n \n \treturn &TypeSystem{\n@@ -596,6 +604,170 @@ func (t *TypeSystem) relationInvolvesExclusion(objectType, relation string, visi\n \treturn false, nil\n }\n \n+// hasEntrypoints recursively walks the rewrite definition for the given relation to determine if there is at least\n+// one path in the rewrite rule that could relate to at least one concrete object type. If there is no such path that\n+// could lead to at least one relationship with some object type, then false is returned along with an error indicating\n+// no entrypoints were found. If at least one relationship with a specific object type is found while walking the rewrite,\n+// then true is returned along with a nil error.\n+func hasEntrypoints(\n+\ttypedefs map[string]map[string]*openfgapb.Relation,\n+\ttypeName, relationName string,\n+\trewrite *openfgapb.Userset,\n+\tvisitedRelations map[string]map[string]struct{},\n+) (bool, error) {\n+\n+\tv := maps.Clone(visitedRelations)\n+\n+\tif val, ok := v[typeName]; ok {\n+\t\tval[relationName] = struct{}{}\n+\t} else {\n+\t\tv[typeName] = map[string]struct{}{\n+\t\t\trelationName: {},\n+\t\t}\n+\t}\n+\n+\trelation, ok := typedefs[typeName][relationName]\n+\tif !ok {\n+\t\treturn false, fmt.Errorf(\"undefined type definition for '%s#%s'\", typeName, relationName)\n+\t}\n+\n+\tswitch rw := rewrite.Userset.(type) {\n+\tcase *openfgapb.Userset_This:\n+\t\tfor _, assignableType := range relation.GetTypeInfo().GetDirectlyRelatedUserTypes() {\n+\t\t\tif assignableType.GetRelationOrWildcard() == nil || assignableType.GetWildcard() != nil {\n+\t\t\t\treturn true, nil\n+\t\t\t}\n+\n+\t\t\tassignableTypeName := assignableType.GetType()\n+\t\t\tassignableRelationName := assignableType.GetRelation()\n+\n+\t\t\tassignableRelation, ok := typedefs[assignableTypeName][assignableRelationName]\n+\t\t\tif !ok {\n+\t\t\t\treturn false, fmt.Errorf(\"undefined type definition for '%s#%s'\", assignableTypeName, assignableRelationName)\n+\t\t\t}\n+\n+\t\t\tif _, ok := v[assignableTypeName][assignableRelationName]; ok {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\n+\t\t\thasEntrypoint, err := hasEntrypoints(typedefs, assignableTypeName, assignableRelationName, assignableRelation.GetRewrite(), v)\n+\t\t\tif err != nil {\n+\t\t\t\treturn false, err\n+\t\t\t}\n+\n+\t\t\tif hasEntrypoint {\n+\t\t\t\treturn true, nil\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn false, nil\n+\tcase *openfgapb.Userset_ComputedUserset:\n+\n+\t\tcomputedRelationName := rw.ComputedUserset.GetRelation()\n+\t\tcomputedRelation, ok := typedefs[typeName][computedRelationName]\n+\t\tif !ok {\n+\t\t\treturn false, fmt.Errorf(\"undefined type definition for '%s#%s'\", typeName, computedRelationName)\n+\t\t}\n+\n+\t\tif _, ok := v[typeName][computedRelationName]; ok {\n+\t\t\treturn false, nil\n+\t\t}\n+\n+\t\thasEntrypoint, err := hasEntrypoints(typedefs, typeName, computedRelationName, computedRelation.GetRewrite(), v)\n+\t\tif err != nil {\n+\t\t\treturn false, err\n+\t\t}\n+\n+\t\treturn hasEntrypoint, nil\n+\tcase *openfgapb.Userset_TupleToUserset:\n+\t\ttuplesetRelationName := rw.TupleToUserset.GetTupleset().GetRelation()\n+\t\tcomputedRelationName := rw.TupleToUserset.ComputedUserset.GetRelation()\n+\n+\t\ttuplesetRelation, ok := typedefs[typeName][tuplesetRelationName]\n+\t\tif !ok {\n+\t\t\treturn false, fmt.Errorf(\"undefined type definition for '%s#%s'\", typeName, tuplesetRelationName)\n+\t\t}\n+\n+\t\tfor _, assignableType := range tuplesetRelation.GetTypeInfo().GetDirectlyRelatedUserTypes() {\n+\t\t\tassignableTypeName := assignableType.GetType()\n+\n+\t\t\tif assignableRelation, ok := typedefs[assignableTypeName][computedRelationName]; ok {\n+\t\t\t\tif _, ok := v[assignableTypeName][computedRelationName]; ok {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\n+\t\t\t\thasEntrypoint, err := hasEntrypoints(typedefs, assignableTypeName, computedRelationName, assignableRelation.GetRewrite(), v)\n+\t\t\t\tif err != nil {\n+\t\t\t\t\treturn false, err\n+\t\t\t\t}\n+\n+\t\t\t\tif hasEntrypoint {\n+\t\t\t\t\treturn true, nil\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn false, nil\n+\n+\tcase *openfgapb.Userset_Union:\n+\n+\t\tfor _, child := range rw.Union.Child {\n+\n+\t\t\thasEntrypoints, err := hasEntrypoints(typedefs, typeName, relationName, child, maps.Clone(visitedRelations))\n+\t\t\tif err != nil {\n+\t\t\t\treturn false, err\n+\t\t\t}\n+\n+\t\t\tif hasEntrypoints {\n+\t\t\t\treturn true, nil\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn false, nil\n+\tcase *openfgapb.Userset_Intersection:\n+\n+\t\tfor _, child := range rw.Intersection.Child {\n+\n+\t\t\t// all of the children must have an entrypoint\n+\t\t\thasEntrypoints, err := hasEntrypoints(typedefs, typeName, relationName, child, maps.Clone(visitedRelations))\n+\t\t\tif err != nil {\n+\t\t\t\treturn false, err\n+\t\t\t}\n+\n+\t\t\tif !hasEntrypoints {\n+\t\t\t\treturn false, nil\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn true, nil\n+\tcase *openfgapb.Userset_Difference:\n+\n+\t\tv := maps.Clone(visitedRelations)\n+\n+\t\thasEntrypoint, err := hasEntrypoints(typedefs, typeName, relationName, rw.Difference.GetBase(), v)\n+\t\tif err != nil {\n+\t\t\treturn false, err\n+\t\t}\n+\n+\t\tif !hasEntrypoint {\n+\t\t\treturn false, nil\n+\t\t}\n+\n+\t\thasEntrypoint, err = hasEntrypoints(typedefs, typeName, relationName, rw.Difference.GetSubtract(), v)\n+\t\tif err != nil {\n+\t\t\treturn false, err\n+\t\t}\n+\n+\t\tif !hasEntrypoint {\n+\t\t\treturn false, nil\n+\t\t}\n+\n+\t\treturn true, nil\n+\t}\n+\n+\treturn false, nil\n+}\n+\n // NewAndValidate is like New but also validates the model according to the following rules:\n //  1. Checks that the *TypeSystem have a valid schema version.\n //  2. For every rewrite the relations in the rewrite must:\n@@ -610,7 +782,10 @@ func (t *TypeSystem) relationInvolvesExclusion(objectType, relation string, visi\n //     a. For a type (e.g. user) this means checking that this type is in the *TypeSystem\n //     b. For a type#relation this means checking that this type with this relation is in the *TypeSystem\n //  4. Check that a relation is assignable if and only if it has a non-zero list of types\n-func NewAndValidate(model *openfgapb.AuthorizationModel) (*TypeSystem, error) {\n+func NewAndValidate(ctx context.Context, model *openfgapb.AuthorizationModel) (*TypeSystem, error) {\n+\t_, span := tracer.Start(ctx, \"typesystem.NewAndValidate\")\n+\tdefer span.End()\n+\n \tt := New(model)\n \tschemaVersion := t.GetSchemaVersion()\n \n@@ -626,10 +801,31 @@ func NewAndValidate(model *openfgapb.AuthorizationModel) (*TypeSystem, error) {\n \t\treturn nil, err\n \t}\n \n-\t// Validate the userset rewrites\n-\tfor _, td := range t.typeDefinitions {\n-\t\tfor relation, rewrite := range td.GetRelations() {\n-\t\t\terr := t.isUsersetRewriteValid(td.GetType(), relation, rewrite)\n+\ttypedefsMap := t.typeDefinitions\n+\n+\ttypeNames := make([]string, 0, len(typedefsMap))\n+\tfor typeName := range typedefsMap {\n+\t\ttypeNames = append(typeNames, typeName)\n+\t}\n+\n+\t// range over the type definitions in sorted order to produce a deterministic outcome\n+\tsort.Strings(typeNames)\n+\n+\tfor _, typeName := range typeNames {\n+\t\ttypedef := typedefsMap[typeName]\n+\n+\t\trelationMap := typedef.GetRelations()\n+\t\trelationNames := make([]string, 0, len(relationMap))\n+\t\tfor relationName := range relationMap {\n+\t\t\trelationNames = append(relationNames, relationName)\n+\t\t}\n+\n+\t\t// range over the relations in sorted order to produce a deterministic outcome\n+\t\tsort.Strings(relationNames)\n+\n+\t\tfor _, relationName := range relationNames {\n+\n+\t\t\terr := t.validateRelation(typeName, relationName, relationMap)\n \t\t\tif err != nil {\n \t\t\t\treturn nil, err\n \t\t\t}\n@@ -644,13 +840,42 @@ func NewAndValidate(model *openfgapb.AuthorizationModel) (*TypeSystem, error) {\n \t\treturn nil, err\n \t}\n \n-\tif schemaVersion == SchemaVersion1_1 {\n-\t\tif err := t.validateRelationTypeRestrictions(); err != nil {\n-\t\t\treturn nil, err\n+\treturn t, nil\n+}\n+\n+// validateRelation applies all of the validation rules to a relation definition in a model. A relation\n+// must meet all of the rewrite validation, type restriction valdiation, and entrypoint validation criteria\n+// for it to be valid. Otherrwise an error is returned.\n+func (t *TypeSystem) validateRelation(typeName, relationName string, relationMap map[string]*openfgapb.Userset) error {\n+\n+\trewrite := relationMap[relationName]\n+\n+\terr := t.isUsersetRewriteValid(typeName, relationName, rewrite)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\terr = t.validateTypeRestrictions(typeName, relationName)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tvisitedRelations := map[string]map[string]struct{}{}\n+\n+\thasEntrypoints, err := hasEntrypoints(t.relations, typeName, relationName, rewrite, visitedRelations)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tif !hasEntrypoints {\n+\t\treturn &InvalidRelationError{\n+\t\t\tObjectType: typeName,\n+\t\t\tRelation:   relationName,\n+\t\t\tCause:      fmt.Errorf(\"no entrypoints found for relation '%s#%s': %w\", typeName, relationName, ErrNoEntrypoints),\n \t\t}\n \t}\n \n-\treturn t, nil\n+\treturn nil\n }\n \n func containsDuplicateType(model *openfgapb.AuthorizationModel) bool {\n@@ -670,11 +895,20 @@ func containsDuplicateType(model *openfgapb.AuthorizationModel) bool {\n func (t *TypeSystem) validateNames() error {\n \tfor _, td := range t.typeDefinitions {\n \t\tobjectType := td.GetType()\n+\n+\t\tif objectType == \"\" {\n+\t\t\treturn fmt.Errorf(\"the type name of a type definition cannot be an empty string\")\n+\t\t}\n+\n \t\tif objectType == \"self\" || objectType == \"this\" {\n \t\t\treturn &InvalidTypeError{ObjectType: objectType, Cause: ErrReservedKeywords}\n \t\t}\n \n \t\tfor relation := range td.GetRelations() {\n+\t\t\tif relation == \"\" {\n+\t\t\t\treturn fmt.Errorf(\"type '%s' defines a relation with an empty string for a name\", objectType)\n+\t\t\t}\n+\n \t\t\tif relation == \"self\" || relation == \"this\" {\n \t\t\t\treturn &InvalidRelationError{ObjectType: objectType, Relation: relation, Cause: ErrReservedKeywords}\n \t\t\t}\n@@ -762,54 +996,48 @@ func (t *TypeSystem) isUsersetRewriteValid(objectType, relation string, rewrite\n \treturn nil\n }\n \n-func (t *TypeSystem) validateRelationTypeRestrictions() error {\n-\tfor objectType := range t.typeDefinitions {\n-\t\trelations, err := t.GetRelations(objectType)\n-\t\tif err != nil {\n-\t\t\treturn err\n-\t\t}\n+// validateTypeRestrictions validates the type restrictions of a given relation using the following rules:\n+//  1. An assignable relation must have one or more type restrictions.\n+//  2. A non-assignable relation must not have any type restrictions.\n+//  3. For each type restriction referenced for an assignable relation, each of the referenced types and relations\n+//     must be defined in the model.\n+//  4. If the provided relation is a tupleset relation, then the type restriction must be on a direct object.\n+func (t *TypeSystem) validateTypeRestrictions(objectType string, relationName string) error {\n \n-\t\tfor name, relation := range relations {\n-\t\t\trelatedTypes := relation.GetTypeInfo().GetDirectlyRelatedUserTypes()\n-\t\t\tassignable := t.IsDirectlyAssignable(relation)\n+\trelation, err := t.GetRelation(objectType, relationName)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n \n-\t\t\tif assignable && len(relatedTypes) == 0 {\n-\t\t\t\treturn AssignableRelationError(objectType, name)\n-\t\t\t}\n+\trelatedTypes := relation.GetTypeInfo().GetDirectlyRelatedUserTypes()\n+\tassignable := t.IsDirectlyAssignable(relation)\n \n-\t\t\tif assignable && len(relatedTypes) == 1 {\n-\t\t\t\trelatedObjectType := relatedTypes[0].GetType()\n-\t\t\t\trelatedRelation := relatedTypes[0].GetRelation()\n-\t\t\t\tif objectType == relatedObjectType && name == relatedRelation {\n-\t\t\t\t\treturn &InvalidRelationError{ObjectType: objectType, Relation: name, Cause: ErrCycle}\n-\t\t\t\t}\n-\t\t\t}\n+\tif assignable && len(relatedTypes) == 0 {\n+\t\treturn AssignableRelationError(objectType, relationName)\n+\t}\n \n-\t\t\tif !assignable && len(relatedTypes) != 0 {\n-\t\t\t\treturn NonAssignableRelationError(objectType, name)\n-\t\t\t}\n+\tif !assignable && len(relatedTypes) != 0 {\n+\t\treturn NonAssignableRelationError(objectType, relationName)\n+\t}\n \n-\t\t\tfor _, related := range relatedTypes {\n-\t\t\t\trelatedObjectType := related.GetType()\n-\t\t\t\trelatedRelation := related.GetRelation()\n+\tfor _, related := range relatedTypes {\n+\t\trelatedObjectType := related.GetType()\n+\t\trelatedRelation := related.GetRelation()\n \n-\t\t\t\tif _, err := t.GetRelations(relatedObjectType); err != nil {\n-\t\t\t\t\treturn InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)\n-\t\t\t\t}\n+\t\tif _, err := t.GetRelations(relatedObjectType); err != nil {\n+\t\t\treturn InvalidRelationTypeError(objectType, relationName, relatedObjectType, relatedRelation)\n+\t\t}\n \n-\t\t\t\tif related.GetRelationOrWildcard() != nil {\n-\t\t\t\t\t// The type of the relation cannot contain a userset or wildcard if the relation is a tupleset relation.\n-\t\t\t\t\tif ok, _ := t.IsTuplesetRelation(objectType, name); ok {\n-\t\t\t\t\t\treturn InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)\n-\t\t\t\t\t}\n+\t\tif related.GetRelationOrWildcard() != nil {\n+\t\t\t// The type of the relation cannot contain a userset or wildcard if the relation is a tupleset relation.\n+\t\t\tif ok, _ := t.IsTuplesetRelation(objectType, relationName); ok {\n+\t\t\t\treturn InvalidRelationTypeError(objectType, relationName, relatedObjectType, relatedRelation)\n+\t\t\t}\n \n-\t\t\t\t\tif relatedRelation != \"\" {\n-\t\t\t\t\t\tif _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {\n-\t\t\t\t\t\t\treturn InvalidRelationTypeError(objectType, name, relatedObjectType, relatedRelation)\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+\t\t\tif relatedRelation != \"\" {\n+\t\t\t\tif _, err := t.GetRelation(relatedObjectType, relatedRelation); err != nil {\n+\t\t\t\t\treturn InvalidRelationTypeError(objectType, relationName, relatedObjectType, relatedRelation)\n \t\t\t\t}\n-\n \t\t\t}\n \t\t}\n \t}"
        },
        {
          "filename": "pkg/typesystem/typesystem_test.go",
          "status": "modified",
          "additions": 182,
          "deletions": 5,
          "patch": "@@ -1,13 +1,150 @@\n package typesystem\n \n import (\n+\t\"context\"\n \t\"testing\"\n \n \tparser \"github.com/craigpastro/openfga-dsl-parser/v2\"\n \t\"github.com/stretchr/testify/require\"\n \topenfgapb \"go.buf.build/openfga/go/openfga/api/openfga/v1\"\n )\n \n+func TestNewAndValidate(t *testing.T) {\n+\n+\ttests := []struct {\n+\t\tname          string\n+\t\tmodel         string\n+\t\texpectedError error\n+\t}{\n+\t\t{\n+\t\t\tname: \"direct_relationship_with_entrypoint\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define viewer: [user] as self\n+\t\t\t`,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"computed_relationship_with_entrypoint\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define editor: [user] as self\n+\t\t\t    define viewer as editor\n+\t\t\t`,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no_entrypoint_1\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define admin: [user] as self\n+\t\t\t    define action1 as admin and action2 and action3\n+\t\t\t    define action2 as admin and action1 and action3\n+\t\t\t    define action3 as admin and action1 and action2\n+\t\t\t`,\n+\t\t\texpectedError: ErrNoEntrypoints,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no_entrypoint_2\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t\tdefine admin: [user] as self\n+\t\t\t\tdefine action1 as admin but not action2\n+\t\t\t\tdefine action2 as admin but not action3\n+\t\t\t\tdefine action3 as admin but not action1\n+\t\t\t`,\n+\t\t\texpectedError: ErrNoEntrypoints,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no_entrypoint_3a\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define viewer: [document#viewer] as self and editor\n+\t\t\t    define editor: [user] as self\n+\t\t\t`,\n+\t\t\texpectedError: ErrNoEntrypoints,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no_entrypoint_3b\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define viewer: [document#viewer] as self but not editor\n+\t\t\t    define editor: [user] as self\n+\t\t\t`,\n+\t\t\texpectedError: ErrNoEntrypoints,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no_entrypoint_4\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype folder\n+\t\t\t  relations\n+\t\t\t    define parent: [document] as self\n+\t\t\t    define viewer as editor from parent\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define parent: [folder] as self\n+\t\t\t\tdefine editor as viewer\n+\t\t\t    define viewer as editor from parent\n+\t\t\t`,\n+\t\t\texpectedError: ErrNoEntrypoints,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_with_entrypoint_1\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define restricted: [user] as self\n+\t\t\t    define editor: [user] as self\n+\t\t\t    define viewer: [document#viewer] as self or editor\n+\t\t\t    define can_view as viewer but not restricted\n+\t\t\t    define can_view_actual as can_view\n+\t\t\t`,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_with_entrypoint_2\",\n+\t\t\tmodel: `\n+\t\t\ttype user\n+\n+\t\t\ttype document\n+\t\t\t  relations\n+\t\t\t    define editor: [user] as self\n+\t\t\t    define viewer: [document#viewer] as self or editor\n+\t\t\t`,\n+\t\t},\n+\t}\n+\n+\tfor _, test := range tests {\n+\t\tt.Run(test.name, func(t *testing.T) {\n+\t\t\t_, err := NewAndValidate(context.Background(), &openfgapb.AuthorizationModel{\n+\t\t\t\tSchemaVersion:   SchemaVersion1_1,\n+\t\t\t\tTypeDefinitions: parser.MustParse(test.model),\n+\t\t\t})\n+\t\t\trequire.ErrorIs(t, err, test.expectedError)\n+\t\t})\n+\t}\n+}\n+\n func TestSuccessfulRewriteValidations(t *testing.T) {\n \tvar tests = []struct {\n \t\tname  string\n@@ -36,11 +173,51 @@ func TestSuccessfulRewriteValidations(t *testing.T) {\n \t\t\t\t},\n \t\t\t},\n \t\t},\n+\t\t{\n+\t\t\tname: \"self_referencing_type_restriction_with_entrypoint\",\n+\t\t\tmodel: &openfgapb.AuthorizationModel{\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t    define editor: [user] as self\n+\t\t\t\t    define viewer: [document#viewer] as self or editor\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: SchemaVersion1_1,\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"intersection_may_contain_repeated_relations\",\n+\t\t\tmodel: &openfgapb.AuthorizationModel{\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t\tdefine editor: [user] as self\n+\t\t\t\t\tdefine viewer as editor and editor\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: SchemaVersion1_1,\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"exclusion_may_contain_repeated_relations\",\n+\t\t\tmodel: &openfgapb.AuthorizationModel{\n+\t\t\t\tTypeDefinitions: parser.MustParse(`\n+\t\t\t\ttype user\n+\t\t\t\ttype document\n+\t\t\t\t  relations\n+\t\t\t\t\tdefine editor: [user] as self\n+\t\t\t\t\tdefine viewer as editor but not editor\n+\t\t\t\t`),\n+\t\t\t\tSchemaVersion: SchemaVersion1_1,\n+\t\t\t},\n+\t\t},\n \t}\n \n \tfor _, test := range tests {\n \t\tt.Run(test.name, func(t *testing.T) {\n-\t\t\t_, err := NewAndValidate(test.model)\n+\t\t\t_, err := NewAndValidate(context.Background(), test.model)\n \t\t\trequire.NoError(t, err)\n \t\t})\n \t}\n@@ -471,13 +648,13 @@ func TestInvalidRewriteValidations(t *testing.T) {\n \t\t\t\t\tdefine viewer as viewer from parent\n \t\t\t\t`),\n \t\t\t},\n-\t\t\terr: ErrCycle,\n+\t\t\terr: ErrNoEntrypoints,\n \t\t},\n \t}\n \n \tfor _, test := range tests {\n \t\tt.Run(test.name, func(t *testing.T) {\n-\t\t\t_, err := NewAndValidate(test.model)\n+\t\t\t_, err := NewAndValidate(context.Background(), test.model)\n \t\t\trequire.ErrorIs(t, err, test.err)\n \t\t})\n \t}\n@@ -578,7 +755,7 @@ func TestSuccessfulRelationTypeRestrictionsValidations(t *testing.T) {\n \n \tfor _, test := range tests {\n \t\tt.Run(test.name, func(t *testing.T) {\n-\t\t\t_, err := NewAndValidate(test.model)\n+\t\t\t_, err := NewAndValidate(context.Background(), test.model)\n \t\t\trequire.NoError(t, err)\n \t\t})\n \t}\n@@ -1052,7 +1229,7 @@ func TestInvalidRelationTypeRestrictionsValidations(t *testing.T) {\n \n \tfor _, test := range tests {\n \t\tt.Run(test.name, func(t *testing.T) {\n-\t\t\t_, err := NewAndValidate(test.model)\n+\t\t\t_, err := NewAndValidate(context.Background(), test.model)\n \t\t\trequire.EqualError(t, err, test.err.Error())\n \t\t})\n \t}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "40cf00389f9498edd7edacfd2b0602888f55d1a5",
            "date": "2025-01-14T00:17:26Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0199bd6f08ddb3825587938e55b640366a39e9ed",
            "date": "2025-01-13T21:25:16Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "cfd75567075ef916f6e871e8c8cf787e9170bbc7",
            "date": "2025-01-13T21:10:20Z",
            "author_login": "adriantam"
          },
          {
            "sha": "dc1a4803b1ae2f539a67cfa78a929923642c631b",
            "date": "2025-01-13T20:38:41Z",
            "author_login": "justincoh"
          },
          {
            "sha": "a4491e49f446d5aa121b384675ced9010a35f761",
            "date": "2025-01-13T15:22:20Z",
            "author_login": "adriantam"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "OPenFGA is an open source authorization/permission engine built for developers. OpenFGA versions v1.1.0 and prior are vulnerable to a DoS attack when Check and ListObjects calls are executed against authorization models that contain circular relationship definitions. Users are affected by this vulnerability if they are using OpenFGA v1.1.0 or earlier, and if you are executing `Check` or `ListObjects` calls against a vulnerable authorization model. Users are advised to upgrade to version 1.1.1. There are no known workarounds for this vulnerability. Users that do not have circular relationships in their models are not affected.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-06-26T20:15:10.580",
    "last_modified": "2024-11-21T08:09:00.350",
    "fix_date": "2023-06-26T18:12:07Z"
  },
  "references": [
    {
      "url": "https://github.com/openfga/openfga/commit/087ce392595f3c319ab3028b5089118ea4063452",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/security/advisories/GHSA-hr9r-8phq-5x8j",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://openfga.dev/api/service#/Relationship%20Queries/Check",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://openfga.dev/api/service#/Relationship%20Queries/ListObjects",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/commit/087ce392595f3c319ab3028b5089118ea4063452",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/openfga/openfga/security/advisories/GHSA-hr9r-8phq-5x8j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://openfga.dev/api/service#/Relationship%20Queries/Check",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://openfga.dev/api/service#/Relationship%20Queries/ListObjects",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.866024",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openfga",
    "owner": "openfga",
    "created_at": "2022-06-08T18:47:15Z",
    "updated_at": "2025-01-14T13:09:15Z",
    "pushed_at": "2025-01-14T01:10:04Z",
    "size": 31758,
    "stars": 3129,
    "forks": 220,
    "open_issues": 127,
    "watchers": 3129,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 2873841,
      "Makefile": 7516,
      "Dockerfile": 1275,
      "HTML": 379
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:56:19.885603"
  }
}