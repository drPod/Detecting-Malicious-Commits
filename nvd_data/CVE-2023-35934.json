{
  "cve_id": "CVE-2023-35934",
  "github_data": {
    "repository": "yt-dlp/yt-dlp",
    "fix_commit": "1ceb657bdd254ad961489e5060f2ccc7d556b729",
    "related_commits": [
      "1ceb657bdd254ad961489e5060f2ccc7d556b729",
      "3121512228487c9c690d3d39bfd2579addf96e07",
      "f8b4bcc0a791274223723488bfbfc23ea3276641",
      "1ceb657bdd254ad961489e5060f2ccc7d556b729",
      "3121512228487c9c690d3d39bfd2579addf96e07",
      "f8b4bcc0a791274223723488bfbfc23ea3276641"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1ceb657bdd254ad961489e5060f2ccc7d556b729",
      "commit_date": "2023-07-05T20:16:28Z",
      "author": {
        "login": "bashonly",
        "type": "User",
        "stats": {
          "total_commits": 526,
          "average_weekly_commits": 0.6095017381228274,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 111
        }
      },
      "commit_message": {
        "title": "[fd/external] Scope cookies",
        "length": 565,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 181,
        "additions": 179,
        "deletions": 2
      },
      "files": [
        {
          "filename": "test/test_downloader_external.py",
          "status": "added",
          "additions": 133,
          "deletions": 0,
          "patch": "@@ -0,0 +1,133 @@\n+#!/usr/bin/env python3\n+\n+# Allow direct execution\n+import os\n+import sys\n+import unittest\n+\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+\n+import http.cookiejar\n+\n+from test.helper import FakeYDL\n+from yt_dlp.downloader.external import (\n+    Aria2cFD,\n+    AxelFD,\n+    CurlFD,\n+    FFmpegFD,\n+    HttpieFD,\n+    WgetFD,\n+)\n+\n+TEST_COOKIE = {\n+    'version': 0,\n+    'name': 'test',\n+    'value': 'ytdlp',\n+    'port': None,\n+    'port_specified': False,\n+    'domain': '.example.com',\n+    'domain_specified': True,\n+    'domain_initial_dot': False,\n+    'path': '/',\n+    'path_specified': True,\n+    'secure': False,\n+    'expires': None,\n+    'discard': False,\n+    'comment': None,\n+    'comment_url': None,\n+    'rest': {},\n+}\n+\n+TEST_INFO = {'url': 'http://www.example.com/'}\n+\n+\n+class TestHttpieFD(unittest.TestCase):\n+    def test_make_cmd(self):\n+        with FakeYDL() as ydl:\n+            downloader = HttpieFD(ydl, {})\n+            self.assertEqual(\n+                downloader._make_cmd('test', TEST_INFO),\n+                ['http', '--download', '--output', 'test', 'http://www.example.com/'])\n+\n+            # Test cookie header is added\n+            ydl.cookiejar.set_cookie(http.cookiejar.Cookie(**TEST_COOKIE))\n+            self.assertEqual(\n+                downloader._make_cmd('test', TEST_INFO),\n+                ['http', '--download', '--output', 'test', 'http://www.example.com/', 'Cookie:test=ytdlp'])\n+\n+\n+class TestAxelFD(unittest.TestCase):\n+    def test_make_cmd(self):\n+        with FakeYDL() as ydl:\n+            downloader = AxelFD(ydl, {})\n+            self.assertEqual(\n+                downloader._make_cmd('test', TEST_INFO),\n+                ['axel', '-o', 'test', '--', 'http://www.example.com/'])\n+\n+            # Test cookie header is added\n+            ydl.cookiejar.set_cookie(http.cookiejar.Cookie(**TEST_COOKIE))\n+            self.assertEqual(\n+                downloader._make_cmd('test', TEST_INFO),\n+                ['axel', '-o', 'test', 'Cookie: test=ytdlp', '--max-redirect=0', '--', 'http://www.example.com/'])\n+\n+\n+class TestWgetFD(unittest.TestCase):\n+    def test_make_cmd(self):\n+        with FakeYDL() as ydl:\n+            downloader = WgetFD(ydl, {})\n+            self.assertNotIn('--load-cookies', downloader._make_cmd('test', TEST_INFO))\n+            # Test cookiejar tempfile arg is added\n+            ydl.cookiejar.set_cookie(http.cookiejar.Cookie(**TEST_COOKIE))\n+            self.assertIn('--load-cookies', downloader._make_cmd('test', TEST_INFO))\n+\n+\n+class TestCurlFD(unittest.TestCase):\n+    def test_make_cmd(self):\n+        with FakeYDL() as ydl:\n+            downloader = CurlFD(ydl, {})\n+            self.assertNotIn('--cookie-jar', downloader._make_cmd('test', TEST_INFO))\n+            # Test cookiejar tempfile arg is added\n+            ydl.cookiejar.set_cookie(http.cookiejar.Cookie(**TEST_COOKIE))\n+            self.assertIn('--cookie-jar', downloader._make_cmd('test', TEST_INFO))\n+\n+\n+class TestAria2cFD(unittest.TestCase):\n+    def test_make_cmd(self):\n+        with FakeYDL() as ydl:\n+            downloader = Aria2cFD(ydl, {})\n+            downloader._make_cmd('test', TEST_INFO)\n+            self.assertFalse(hasattr(downloader, '_cookies_tempfile'))\n+\n+            # Test cookiejar tempfile arg is added\n+            ydl.cookiejar.set_cookie(http.cookiejar.Cookie(**TEST_COOKIE))\n+            cmd = downloader._make_cmd('test', TEST_INFO)\n+            self.assertIn(f'--load-cookies={downloader._cookies_tempfile}', cmd)\n+\n+\n+@unittest.skipUnless(FFmpegFD.available(), 'ffmpeg not found')\n+class TestFFmpegFD(unittest.TestCase):\n+    _args = []\n+\n+    def _test_cmd(self, args):\n+        self._args = args\n+\n+    def test_make_cmd(self):\n+        with FakeYDL() as ydl:\n+            downloader = FFmpegFD(ydl, {})\n+            downloader._debug_cmd = self._test_cmd\n+\n+            downloader._call_downloader('test', {**TEST_INFO, 'ext': 'mp4'})\n+            self.assertEqual(self._args, [\n+                'ffmpeg', '-y', '-hide_banner', '-i', 'http://www.example.com/',\n+                '-c', 'copy', '-f', 'mp4', 'file:test'])\n+\n+            # Test cookies arg is added\n+            ydl.cookiejar.set_cookie(http.cookiejar.Cookie(**TEST_COOKIE))\n+            downloader._call_downloader('test', {**TEST_INFO, 'ext': 'mp4'})\n+            self.assertEqual(self._args, [\n+                'ffmpeg', '-y', '-hide_banner', '-cookies', 'test=ytdlp; path=/; domain=.example.com;\\r\\n',\n+                '-i', 'http://www.example.com/', '-c', 'copy', '-f', 'mp4', 'file:test'])\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()"
        },
        {
          "filename": "yt_dlp/cookies.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -1327,6 +1327,13 @@ def get_cookie_header(self, url):\n         self.add_cookie_header(cookie_req)\n         return cookie_req.get_header('Cookie')\n \n+    def get_cookies_for_url(self, url):\n+        \"\"\"Generate a list of Cookie objects for a given url\"\"\"\n+        # Policy `_now` attribute must be set before calling `_cookies_for_request`\n+        # Ref: https://github.com/python/cpython/blob/3.7/Lib/http/cookiejar.py#L1360\n+        self._policy._now = self._now = int(time.time())\n+        return self._cookies_for_request(urllib.request.Request(escape_url(sanitize_url(url))))\n+\n     def clear(self, *args, **kwargs):\n         with contextlib.suppress(KeyError):\n             return super().clear(*args, **kwargs)"
        },
        {
          "filename": "yt_dlp/downloader/external.py",
          "status": "modified",
          "additions": 39,
          "deletions": 2,
          "patch": "@@ -1,9 +1,10 @@\n import enum\n import json\n-import os.path\n+import os\n import re\n import subprocess\n import sys\n+import tempfile\n import time\n import uuid\n \n@@ -42,6 +43,7 @@ class ExternalFD(FragmentFD):\n     def real_download(self, filename, info_dict):\n         self.report_destination(filename)\n         tmpfilename = self.temp_name(filename)\n+        self._cookies_tempfile = None\n \n         try:\n             started = time.time()\n@@ -54,6 +56,9 @@ def real_download(self, filename, info_dict):\n             # should take place\n             retval = 0\n             self.to_screen('[%s] Interrupted by user' % self.get_basename())\n+        finally:\n+            if self._cookies_tempfile:\n+                self.try_remove(self._cookies_tempfile)\n \n         if retval == 0:\n             status = {\n@@ -125,6 +130,16 @@ def _configuration_args(self, keys=None, *args, **kwargs):\n             self.get_basename(), self.params.get('external_downloader_args'), self.EXE_NAME,\n             keys, *args, **kwargs)\n \n+    def _write_cookies(self):\n+        if not self.ydl.cookiejar.filename:\n+            tmp_cookies = tempfile.NamedTemporaryFile(suffix='.cookies', delete=False)\n+            tmp_cookies.close()\n+            self._cookies_tempfile = tmp_cookies.name\n+            self.to_screen(f'[download] Writing temporary cookies file to \"{self._cookies_tempfile}\"')\n+        # real_download resets _cookies_tempfile; if it's None then save() will write to cookiejar.filename\n+        self.ydl.cookiejar.save(self._cookies_tempfile)\n+        return self.ydl.cookiejar.filename or self._cookies_tempfile\n+\n     def _call_downloader(self, tmpfilename, info_dict):\n         \"\"\" Either overwrite this or implement _make_cmd \"\"\"\n         cmd = [encodeArgument(a) for a in self._make_cmd(tmpfilename, info_dict)]\n@@ -184,6 +199,8 @@ class CurlFD(ExternalFD):\n \n     def _make_cmd(self, tmpfilename, info_dict):\n         cmd = [self.exe, '--location', '-o', tmpfilename, '--compressed']\n+        if self.ydl.cookiejar.get_cookie_header(info_dict['url']):\n+            cmd += ['--cookie-jar', self._write_cookies()]\n         if info_dict.get('http_headers') is not None:\n             for key, val in info_dict['http_headers'].items():\n                 cmd += ['--header', f'{key}: {val}']\n@@ -214,6 +231,9 @@ def _make_cmd(self, tmpfilename, info_dict):\n         if info_dict.get('http_headers') is not None:\n             for key, val in info_dict['http_headers'].items():\n                 cmd += ['-H', f'{key}: {val}']\n+        cookie_header = self.ydl.cookiejar.get_cookie_header(info_dict['url'])\n+        if cookie_header:\n+            cmd += [f'Cookie: {cookie_header}', '--max-redirect=0']\n         cmd += self._configuration_args()\n         cmd += ['--', info_dict['url']]\n         return cmd\n@@ -223,7 +243,9 @@ class WgetFD(ExternalFD):\n     AVAILABLE_OPT = '--version'\n \n     def _make_cmd(self, tmpfilename, info_dict):\n-        cmd = [self.exe, '-O', tmpfilename, '-nv', '--no-cookies', '--compression=auto']\n+        cmd = [self.exe, '-O', tmpfilename, '-nv', '--compression=auto']\n+        if self.ydl.cookiejar.get_cookie_header(info_dict['url']):\n+            cmd += ['--load-cookies', self._write_cookies()]\n         if info_dict.get('http_headers') is not None:\n             for key, val in info_dict['http_headers'].items():\n                 cmd += ['--header', f'{key}: {val}']\n@@ -279,6 +301,8 @@ def _make_cmd(self, tmpfilename, info_dict):\n         else:\n             cmd += ['--min-split-size', '1M']\n \n+        if self.ydl.cookiejar.get_cookie_header(info_dict['url']):\n+            cmd += [f'--load-cookies={self._write_cookies()}']\n         if info_dict.get('http_headers') is not None:\n             for key, val in info_dict['http_headers'].items():\n                 cmd += ['--header', f'{key}: {val}']\n@@ -417,6 +441,14 @@ def _make_cmd(self, tmpfilename, info_dict):\n         if info_dict.get('http_headers') is not None:\n             for key, val in info_dict['http_headers'].items():\n                 cmd += [f'{key}:{val}']\n+\n+        # httpie 3.1.0+ removes the Cookie header on redirect, so this should be safe for now. [1]\n+        # If we ever need cookie handling for redirects, we can export the cookiejar into a session. [2]\n+        # 1: https://github.com/httpie/httpie/security/advisories/GHSA-9w4w-cpc8-h2fq\n+        # 2: https://httpie.io/docs/cli/sessions\n+        cookie_header = self.ydl.cookiejar.get_cookie_header(info_dict['url'])\n+        if cookie_header:\n+            cmd += [f'Cookie:{cookie_header}']\n         return cmd\n \n \n@@ -527,6 +559,11 @@ def _call_downloader(self, tmpfilename, info_dict):\n \n         selected_formats = info_dict.get('requested_formats') or [info_dict]\n         for i, fmt in enumerate(selected_formats):\n+            cookies = self.ydl.cookiejar.get_cookies_for_url(fmt['url'])\n+            if cookies:\n+                args.extend(['-cookies', ''.join(\n+                    f'{cookie.name}={cookie.value}; path={cookie.path}; domain={cookie.domain};\\r\\n'\n+                    for cookie in cookies)])\n             if fmt.get('http_headers') and re.match(r'^https?://', fmt['url']):\n                 # Trailing \\r\\n after each HTTP header is important to prevent warning from ffmpeg/avconv:\n                 # [http @ 00000000003d2fa0] No trailing CRLF found in HTTP header."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5ff7a43623e3a92270f66a7e37b5fc53d7a57fdf",
            "date": "2025-01-26T03:54:22Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "3b4531934465580be22937fecbb6e1a3a9e2334f",
            "date": "2025-01-26T03:32:10Z",
            "author_login": "seproDev"
          },
          {
            "sha": "421bc72103d1faed473a451299cd17d6abb433bb",
            "date": "2025-01-26T03:27:12Z",
            "author_login": "nosoop"
          },
          {
            "sha": "d4f5be1735c8feaeb3308666e0b878e9782f529d",
            "date": "2025-01-26T03:20:42Z",
            "author_login": "FestplattenSchnitzel"
          },
          {
            "sha": "797d2472a299692e01ad1500e8c3b7bc1daa7fe4",
            "date": "2025-01-26T03:12:32Z",
            "author_login": "bashonly"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "yt-dlp is a command-line program to download videos from video sites. During file downloads, yt-dlp or the external downloaders that yt-dlp employs may leak cookies on HTTP redirects to a different host, or leak them when the host for download fragments differs from their parent manifest's host. This vulnerable behavior is present in yt-dlp prior to 2023.07.06 and nightly 2023.07.06.185519. All native and external downloaders are affected, except for `curl` and `httpie` (version 3.1.0 or later).\n\nAt the file download stage, all cookies are passed by yt-dlp to the file downloader as a `Cookie` header, thereby losing their scope. This also occurs in yt-dlp's info JSON output, which may be used by external tools. As a result, the downloader or external tool may indiscriminately send cookies with requests to domains or paths for which the cookies are not scoped.\n\nyt-dlp version 2023.07.06 and nightly 2023.07.06.185519 fix this issue by removing the `Cookie` header upon HTTP redirects; having native downloaders calculate the `Cookie` header from the cookiejar, utilizing external downloaders' built-in support for cookies instead of passing them as header arguments, disabling HTTP redirectiong if the external downloader does not have proper cookie support, processing cookies passed as HTTP headers to limit their scope, and having a separate field for cookies in the info dict storing more information about scoping\n\nSome workarounds are available for those who are unable to upgrade. Avoid using cookies and user authentication methods. While extractors may set custom cookies, these usually do not contain sensitive information. Alternatively, avoid using `--load-info-json`. Or, if authentication is a must: verify the integrity of download links from unknown sources in browser (including redirects) before passing them to yt-dlp; use `curl` as external downloader, since it is not impacted; and/or avoid fragmented formats such as HLS/m3u8, DASH/mpd and ISM.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-06T20:15:09.333",
    "last_modified": "2024-11-21T08:09:00.467",
    "fix_date": "2023-07-05T20:16:28Z"
  },
  "references": [
    {
      "url": "https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5X6YT6AQE5FHM5VTQLKKJXSYBLLJF26W/",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HEOKCGVONGHR2SYUIXU33A4MKXZBDP6L/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IM44RJL2MR2WG3ZY354C5IUEEZUJGEVA/",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M7E7CQ5S5KMZHAMCNU7V7KYNBVCPLBHG/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5X6YT6AQE5FHM5VTQLKKJXSYBLLJF26W/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HEOKCGVONGHR2SYUIXU33A4MKXZBDP6L/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IM44RJL2MR2WG3ZY354C5IUEEZUJGEVA/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M7E7CQ5S5KMZHAMCNU7V7KYNBVCPLBHG/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.899667",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "yt-dlp",
    "owner": "yt-dlp",
    "created_at": "2020-10-26T04:22:55Z",
    "updated_at": "2025-01-26T07:46:13Z",
    "pushed_at": "2025-01-26T04:00:31Z",
    "size": 52169,
    "stars": 97884,
    "forks": 7672,
    "open_issues": 1765,
    "watchers": 97884,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "gh-pages",
      "master",
      "release"
    ],
    "languages": {
      "Python": 9809730,
      "Makefile": 7825,
      "Shell": 551,
      "Dockerfile": 461,
      "Batchfile": 47
    },
    "commit_activity": {
      "total_commits_last_year": 851,
      "avg_commits_per_week": 16.365384615384617,
      "days_active_last_year": 214
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "unlicense"
    },
    "collected_at": "2025-01-26T07:48:38.898416"
  }
}