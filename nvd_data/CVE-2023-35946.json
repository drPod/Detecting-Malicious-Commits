{
  "cve_id": "CVE-2023-35946",
  "github_data": {
    "repository": "gradle/gradle",
    "fix_commit": "859eae2b2acf751ae7db3c9ffefe275aa5da0d5d",
    "related_commits": [
      "859eae2b2acf751ae7db3c9ffefe275aa5da0d5d",
      "b07e528feb3a5ffa66bdcc358549edd73e4c8a12",
      "859eae2b2acf751ae7db3c9ffefe275aa5da0d5d",
      "b07e528feb3a5ffa66bdcc358549edd73e4c8a12"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "859eae2b2acf751ae7db3c9ffefe275aa5da0d5d",
      "commit_date": "2023-06-15T15:10:18Z",
      "author": {
        "login": "ljacomet",
        "type": "User",
        "stats": {
          "total_commits": 1743,
          "average_weekly_commits": 1.9761904761904763,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 284
        }
      },
      "commit_message": {
        "title": "Fix dependency cache path traversal vulnerability",
        "length": 233,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 180,
        "additions": 174,
        "deletions": 6
      },
      "files": [
        {
          "filename": "subprojects/core/src/main/java/org/gradle/internal/resource/local/DefaultPathKeyFileStore.java",
          "status": "modified",
          "additions": 21,
          "deletions": 5,
          "patch": "@@ -27,11 +27,15 @@\n import org.gradle.internal.hash.ChecksumService;\n import org.gradle.util.internal.GFileUtils;\n import org.gradle.util.internal.RelativePathUtil;\n+import org.gradle.util.internal.ZipSlip;\n \n import java.io.File;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n \n import static org.gradle.internal.FileUtils.hasExtension;\n \n@@ -72,13 +76,19 @@ protected File getBaseDir() {\n     }\n \n     private File getFile(String... path) {\n-        File result = baseDir;\n-        for (String p : path) {\n-            result = new File(result, p);\n+        String composedPath;\n+        if (path.length == 1) {\n+            composedPath = path[0];\n+        } else {\n+            // We need to ignore empty Strings as this is what \"new File(parent, path)\" was doing for \"path\" empty.\n+            composedPath = Arrays.stream(path)\n+                .filter(((Predicate<String>) String::isEmpty).negate())\n+                .collect(Collectors.joining(File.separator));\n         }\n-        return result;\n+        return new File(baseDir, ZipSlip.safeZipEntryName(trimLeadingSlash(composedPath)));\n     }\n \n+\n     private File getFileWhileCleaningInProgress(String... path) {\n         File file = getFile(path);\n         File markerFile = getInProgressMarkerFile(file);\n@@ -212,4 +222,10 @@ public LocallyAvailableResource get(String... path) {\n     private static void deleteFileQuietly(File file) {\n         file.delete();\n     }\n-}\n+\n+    private static String trimLeadingSlash(String composedPath) {\n+        if (!composedPath.isEmpty() && composedPath.charAt(0) == '/') {\n+            return composedPath.substring(1);\n+        }\n+        return composedPath;\n+    }}"
        },
        {
          "filename": "subprojects/core/src/test/groovy/org/gradle/internal/resource/local/DefaultPathKeyFileStoreTest.groovy",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -42,7 +42,8 @@ class DefaultPathKeyFileStoreTest extends Specification {\n         def b = createFile(\"def\")\n \n         when:\n-        store.move(\"a\", a)\n+        // leading slash does not mean absolute path\n+        store.move(\"/a\", a)\n         store.move(\"b\", b)\n \n         then:"
        },
        {
          "filename": "subprojects/dependency-management/src/integTest/groovy/org/gradle/integtests/resolve/CacheResolveIntegrationTest.groovy",
          "status": "modified",
          "additions": 151,
          "deletions": 0,
          "patch": "@@ -20,6 +20,8 @@ import org.gradle.cache.internal.scopes.DefaultCacheScopeMapping\n import org.gradle.integtests.fixtures.AbstractHttpDependencyResolutionTest\n import org.gradle.integtests.fixtures.ToBeFixedForConfigurationCache\n import org.gradle.integtests.fixtures.cache.CachingIntegrationFixture\n+import org.gradle.internal.hash.Hashing\n+import org.gradle.test.fixtures.file.TestFile\n \n import java.nio.file.Files\n \n@@ -153,6 +155,155 @@ task listJars {\n         succeeds('listJars')\n     }\n \n+    def 'cannot write cache entries outside of GAV'() {\n+        given:\n+        def fakeDep = temporaryFolder.testDirectory.file('fake-repo/pwned.txt')\n+        fakeDep << \"\"\"\n+Hello world!\n+\"\"\"\n+        def hash = Hashing.sha1().hashFile(fakeDep).toString()\n+        def hashOfBootJar = '1234' // for demo purpose\n+        def invalidPath = \"org.spring/core/1.0/$hash/artifact-1.0./../../../../boot/2.0/$hashOfBootJar/pwned.txt\"\n+        def invalidLocation = executer.gradleUserHomeDir.file(cachePath + invalidPath).canonicalFile\n+\n+        server.allowGetOrHead(\"/repo/org/boot/2.0/$hashOfBootJar/pwned.txt\", fakeDep)\n+\n+        and:\n+        withValidJavaSource()\n+        buildWithJavaLibraryAndMavenRepoArtifactOnly()\n+\n+        and:\n+        buildFile << \"\"\"\n+dependencies { implementation 'org.spring:core:1.0@/../../../../boot/2.0/$hashOfBootJar/pwned.txt' }\n+\"\"\"\n+\n+        when:\n+        fails('compileJava')\n+\n+        then:\n+        failureCauseContains('is not a safe zip entry name')\n+        // If the build did not fail, Gradle would effectively write a file inside org.spring/boot/2.0 instead of inside org.spring/core/1.0\n+        // If we have the real hash of a JAR in those other coordinates, Gradle could overwrite and replace the real JAR with a malicious one\n+        !invalidLocation.exists()\n+    }\n+\n+    def 'cannot write cache entries outside of dependency cache'() {\n+        given:\n+        def fakeDep = temporaryFolder.testDirectory.file('fake-repo/pwned.txt')\n+        fakeDep << \"\"\"\n+Hello world!\n+\"\"\"\n+        // Code block used to verify what happens if the build succeeds\n+        def hash = Hashing.sha1().hashFile(fakeDep).toString()\n+        def invalidPath = \"org.spring/../../../../../core/1.0/$hash/artifact-1.0./../../../../.ssh/pwned.txt\"\n+        def invalidLocation = executer.gradleUserHomeDir.file(cachePath + invalidPath).canonicalFile\n+\n+        server.allowGetOrHead('/repo/org/.ssh/pwned.txt', fakeDep)\n+\n+        and:\n+        withValidJavaSource()\n+        buildWithJavaLibraryAndMavenRepoArtifactOnly()\n+\n+        and:\n+        buildFile << \"\"\"\n+dependencies { implementation 'org.spring/../../../../../:core:1.0@/../../../../.ssh/pwned.txt' }\n+\"\"\"\n+\n+        when:\n+        fails('compileJava')\n+\n+        then:\n+        failureCauseContains('is not a safe zip entry name')\n+        // If the build did not fail, Gradle would effectively write a file inside a folder that is a sibling to the Gradle User Home\n+        // If this was ~/.gradle, Gradle would have written in ~/.ssh\n+        !invalidLocation.exists()\n+    }\n+\n+    def 'cannot write cache entries anywhere on disk using metadata'() {\n+        given:\n+        // Our crafty coordinates\n+        def pwnedDep = mavenRepo.module('org.spring/../../../../../', 'core')\n+        // Our abused coordinates that will see a POM request\n+        def abusedCoordinates = mavenHttpRepo.module('org.spring', 'core', '1.0').publish()\n+        // Defeat the Gradle validation that will verify metadata content match requested coordinates\n+        abusedCoordinates.pom.file.replace('<groupId>org.spring</groupId>', '<groupId>org.spring/../../../../../</groupId>')\n+        // Our test dependency that now has a crafty dependency itself\n+        def testDep = mavenHttpRepo.module('org.test', 'test').dependsOn(pwnedDep, type: '/../../../../.ssh/pwned.txt').publish()\n+\n+        def fakeDep = temporaryFolder.testDirectory.file('fake-repo/pwned.txt')\n+        fakeDep << \"\"\"\n+Hello world!\n+\"\"\"\n+        def hash = Hashing.sha1().hashFile(fakeDep).toString()\n+        def invalidPath = \"org.spring/../../../../../core/1.0/$hash/artifact-1.0./../../../../.ssh/pwned.txt\"\n+        def invalidLocation = executer.gradleUserHomeDir.file(cachePath + invalidPath).canonicalFile\n+\n+        testDep.allowAll()\n+        abusedCoordinates.allowAll()\n+        server.allowGetOrHead('/repo/org/.ssh/pwned.txt', fakeDep)\n+\n+        and:\n+        withValidJavaSource()\n+        buildWithJavaLibraryAndMavenRepo()\n+\n+        and:\n+        buildFile << \"\"\"\n+dependencies { implementation 'org.test:test:1.0' }\n+\"\"\"\n+\n+        when:\n+        fails('compileJava')\n+\n+        then:\n+        failureCauseContains('is not a safe zip entry name')\n+        // If the build did not fail, Gradle would effectively write a file inside a folder that is a sibling to the Gradle User Home\n+        // If this was ~/.gradle, Gradle would have written in ~/.ssh\n+        !invalidLocation.exists()\n+    }\n+\n+    private String getCachePath() {\n+        \"caches/${CacheLayout.ROOT.key}/${CacheLayout.FILE_STORE.key}/\"\n+    }\n+\n+    private void buildWithJavaLibraryAndMavenRepoArtifactOnly() {\n+        buildFile << \"\"\"\n+plugins {\n+    id('java-library')\n+}\n+\n+repositories {\n+    maven {\n+        url \"${mavenHttpRepo.uri}\"\n+        metadataSources {\n+            artifact()\n+        }\n+    }\n+}\n+\"\"\"\n+    }\n+\n+    private void buildWithJavaLibraryAndMavenRepo() {\n+        buildFile << \"\"\"\n+plugins {\n+    id('java-library')\n+}\n+\n+repositories {\n+    maven {\n+        url \"${mavenHttpRepo.uri}\"\n+    }\n+}\n+\"\"\"\n+    }\n+\n+    private TestFile withValidJavaSource() {\n+        temporaryFolder.testDirectory.file('src/main/java/org/test/Base.java') << \"\"\"\n+package org.test;\n+\n+public class Base {}\n+\"\"\"\n+    }\n+\n     def relocateCachesAndChangeGradleHome() {\n         def otherHome = executer.gradleUserHomeDir.parentFile.createDir('other-home')\n         def otherCacheDir = otherHome.toPath().resolve(DefaultCacheScopeMapping.GLOBAL_CACHE_DIR_NAME)"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "236bdeb129e4d16c100667b677d4315448bc9ede",
            "date": "2025-01-24T21:34:11Z",
            "author_login": "wolfs"
          },
          {
            "sha": "4c853ee6c95dce566576d39cd5503c24a0204e1a",
            "date": "2025-01-24T21:17:13Z",
            "author_login": "wolfs"
          },
          {
            "sha": "f42a029e1210996194512c1fafb0c177e2722edc",
            "date": "2025-01-24T21:12:54Z",
            "author_login": "wolfs"
          },
          {
            "sha": "a4263fbb3d03742a871cde39ec41a2f00398e757",
            "date": "2025-01-24T17:35:29Z",
            "author_login": "wolfs"
          },
          {
            "sha": "536345f352953d7a3c8fa3e7178dc6dee8d32bf6",
            "date": "2025-01-24T17:33:09Z",
            "author_login": "wolfs"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.9,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:L",
    "cwe_id": "CWE-22",
    "description": "Gradle is a build tool with a focus on build automation and support for multi-language development. When Gradle writes a dependency into its dependency cache, it uses the dependency's coordinates to compute a file location. With specially crafted dependency coordinates, Gradle can be made to write files into an unintended location. The file may be written outside the dependency cache or over another file in the dependency cache. This vulnerability could be used to poison the dependency cache or overwrite important files elsewhere on the filesystem where the Gradle process has write permissions. Exploiting this vulnerability requires an attacker to have control over a dependency repository used by the Gradle build or have the ability to modify the build's configuration. It is unlikely that this would go unnoticed. A fix has been released in Gradle 7.6.2 and 8.2 to protect against this vulnerability. Gradle will refuse to cache dependencies that have path traversal elements in their dependency coordinates. It is recommended that users upgrade to a patched version. If you are unable to upgrade to Gradle 7.6.2 or 8.2, `dependency verification` will make this vulnerability more difficult to exploit.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-06-30T21:15:09.070",
    "last_modified": "2024-11-21T08:09:02.030",
    "fix_date": "2023-06-15T15:10:18Z"
  },
  "references": [
    {
      "url": "https://docs.gradle.org/current/userguide/dependency_verification.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/commit/859eae2b2acf751ae7db3c9ffefe275aa5da0d5d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/commit/b07e528feb3a5ffa66bdcc358549edd73e4c8a12",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/security/advisories/GHSA-2h6c-rv6q-494v",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230731-0003/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.gradle.org/current/userguide/dependency_verification.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/commit/859eae2b2acf751ae7db3c9ffefe275aa5da0d5d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/commit/b07e528feb3a5ffa66bdcc358549edd73e4c8a12",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gradle/gradle/security/advisories/GHSA-2h6c-rv6q-494v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20230731-0003/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.882958",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "gradle",
    "owner": "gradle",
    "created_at": "2009-09-09T18:27:19Z",
    "updated_at": "2025-01-25T18:27:51Z",
    "pushed_at": "2025-01-26T04:06:55Z",
    "size": 587292,
    "stars": 17210,
    "forks": 4821,
    "open_issues": 3062,
    "watchers": 17210,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Groovy": 35435231,
      "Java": 32968385,
      "Kotlin": 5109913,
      "C++": 888505,
      "JavaScript": 77171,
      "HTML": 15779,
      "CSS": 14880,
      "Shell": 12301,
      "XSLT": 7121,
      "C": 5785,
      "Scala": 2817,
      "Gherkin": 192,
      "Python": 58,
      "Brainfuck": 54
    },
    "commit_activity": {
      "total_commits_last_year": 9129,
      "avg_commits_per_week": 175.55769230769232,
      "days_active_last_year": 336
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:50:13.946708"
  }
}