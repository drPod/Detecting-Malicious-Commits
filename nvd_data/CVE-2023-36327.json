{
  "cve_id": "CVE-2023-36327",
  "github_data": {
    "repository": "relic-toolkit/relic",
    "fix_commit": "421f2e91cf2ba42473d4d54daf24e295679e290e",
    "related_commits": [
      "421f2e91cf2ba42473d4d54daf24e295679e290e",
      "421f2e91cf2ba42473d4d54daf24e295679e290e"
    ],
    "patch_url": "https://github.com/relic-toolkit/relic/commit/421f2e91cf2ba42473d4d54daf24e295679e290e.patch",
    "fix_commit_details": {
      "sha": "421f2e91cf2ba42473d4d54daf24e295679e290e",
      "commit_date": "2022-11-14T14:04:06Z",
      "author": {
        "login": "dfaranha",
        "type": "User",
        "stats": {
          "total_commits": 3609,
          "average_weekly_commits": 4.4610630407911005,
          "total_additions": 455987,
          "total_deletions": 227604,
          "weeks_active": 384
        }
      },
      "commit_message": {
        "title": "Remove dangerous API for returning small primes from an internal table.",
        "length": 71,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 87,
        "additions": 35,
        "deletions": 52
      },
      "files": [
        {
          "filename": "include/relic_bn.h",
          "status": "modified",
          "additions": 0,
          "deletions": 9,
          "patch": "@@ -1270,15 +1270,6 @@ int bn_smb_leg(const bn_t a, const bn_t b);\n  */\n int bn_smb_jac(const bn_t a, const bn_t b);\n \n-/**\n- * Returns a small precomputed prime from a given position in the list of prime\n- * numbers.\n- *\n- * @param[in] pos\t\t\t- the position in the prime sequence.\n- * @return a prime if the position is lower than 512, 0 otherwise.\n- */\n-dig_t bn_get_prime(int pos);\n-\n /**\n  * Tests if a number is a probable prime.\n  *"
        },
        {
          "filename": "include/relic_label.h",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -264,7 +264,6 @@\n #undef bn_lcm\n #undef bn_smb_leg\n #undef bn_smb_jac\n-#undef bn_get_prime\n #undef bn_is_prime\n #undef bn_is_prime_basic\n #undef bn_is_prime_rabin\n@@ -373,7 +372,6 @@\n #define bn_lcm \tRLC_PREFIX(bn_lcm)\n #define bn_smb_leg \tRLC_PREFIX(bn_smb_leg)\n #define bn_smb_jac \tRLC_PREFIX(bn_smb_jac)\n-#define bn_get_prime \tRLC_PREFIX(bn_get_prime)\n #define bn_is_prime \tRLC_PREFIX(bn_is_prime)\n #define bn_is_prime_basic \tRLC_PREFIX(bn_is_prime_basic)\n #define bn_is_prime_rabin \tRLC_PREFIX(bn_is_prime_rabin)"
        },
        {
          "filename": "src/bn/relic_bn_prime.c",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -170,13 +170,6 @@ static void bn_exp(bn_t c, const bn_t a, const bn_t b, const bn_t m) {\n /* Public definitions                                                         */\n /*============================================================================*/\n \n-dig_t bn_get_prime(int pos) {\n-\tif (pos >= BASIC_TESTS) {\n-\t\treturn 0;\n-\t}\n-\treturn primes[pos];\n-}\n-\n int bn_is_prime(const bn_t a) {\n \tint result;\n "
        },
        {
          "filename": "test/test_cp.c",
          "status": "modified",
          "additions": 35,
          "deletions": 34,
          "patch": "@@ -132,6 +132,7 @@ static int benaloh(void) {\n \tuint8_t buf[RLC_BN_BITS / 8 + 1];\n \tsize_t len;\n \tint result;\n+\tdig_t prime = 0xFB;\n \n \tbn_null(a);\n \tbn_null(b);\n@@ -144,13 +145,13 @@ static int benaloh(void) {\n \t\tbdpe_new(pub);\n \t\tbdpe_new(prv);\n \n-\t\tresult = cp_bdpe_gen(pub, prv, bn_get_prime(47), RLC_BN_BITS);\n+\t\tresult = cp_bdpe_gen(pub, prv, prime, RLC_BN_BITS);\n \n \t\tTEST_CASE(\"benaloh encryption/decryption is correct\") {\n \t\t\tTEST_ASSERT(result == RLC_OK, end);\n \t\t\tlen = RLC_BN_BITS / 8 + 1;\n \t\t\trand_bytes(buf, 1);\n-\t\t\tin = buf[0] % bn_get_prime(47);\n+\t\t\tin = buf[0] % prime;\n \t\t\tTEST_ASSERT(cp_bdpe_enc(buf, &len, in, pub) == RLC_OK, end);\n \t\t\tTEST_ASSERT(cp_bdpe_dec(&out, buf, len, prv) == RLC_OK, end);\n \t\t\tTEST_ASSERT(in == out, end);\n@@ -160,12 +161,12 @@ static int benaloh(void) {\n \t\t\tTEST_ASSERT(result == RLC_OK, end);\n \t\t\tlen = RLC_BN_BITS / 8 + 1;\n \t\t\trand_bytes(buf, 1);\n-\t\t\tin = buf[0] % bn_get_prime(47);\n+\t\t\tin = buf[0] % prime;\n \t\t\tTEST_ASSERT(cp_bdpe_enc(buf, &len, in, pub) == RLC_OK, end);\n \t\t\tbn_read_bin(a, buf, len);\n \t\t\trand_bytes(buf, 1);\n-\t\t\tout = (buf[0] % bn_get_prime(47));\n-\t\t\tin = (in + out) % bn_get_prime(47);\n+\t\t\tout = (buf[0] % prime);\n+\t\t\tin = (in + out) % prime;\n \t\t\tTEST_ASSERT(cp_bdpe_enc(buf, &len, out, pub) == RLC_OK, end);\n \t\t\tbn_read_bin(b, buf, len);\n \t\t\tbn_mul(a, a, b);\n@@ -2237,26 +2238,28 @@ static int psi(void) {\n \t\t\t}\n \t\t} TEST_END;\n \n-\t\tTEST_CASE(\"pairing-based laconic private set intersection is correct\") {\n-\t\t\tpc_get_ord(q);\n-\t\t\tfor (int j = 0; j < M; j++) {\n-\t\t\t\tbn_rand_mod(x[j], q);\n-\t\t\t}\n-\t\t\tfor (int j = 0; j < N; j++) {\n-\t\t\t\tbn_rand_mod(y[j], q);\n-\t\t\t}\n-\t\t\tTEST_ASSERT(cp_pbpsi_gen(q, ss, s, M) == RLC_OK, end);\n-\t\t\tTEST_ASSERT(cp_pbpsi_ask(d, r, x, s, M) == RLC_OK, end);\n-\t\t\tfor (int k = 0; k <= N; k++) {\n-\t\t\t\tfor (int j = 0; j < k; j++) {\n-\t\t\t\t\tbn_copy(y[j], x[j]);\n+\t\tif (pc_param_set_any() == RLC_OK) {\n+\t\t\tTEST_CASE(\"pairing-based laconic private set intersection is correct\") {\n+\t\t\t\tpc_get_ord(q);\n+\t\t\t\tfor (int j = 0; j < M; j++) {\n+\t\t\t\t\tbn_rand_mod(x[j], q);\n \t\t\t\t}\n-\t\t\t\tTEST_ASSERT(cp_pbpsi_ans(t, u, ss, d[0], y, N) == RLC_OK, end);\n-\t\t\t\tTEST_ASSERT(cp_pbpsi_int(z, &l, d, x, M, t, u, N) == RLC_OK,\n-\t\t\t\t\tend);\n-\t\t\t\tTEST_ASSERT(l == k, end);\n-\t\t\t}\n-\t\t} TEST_END;\n+\t\t\t\tfor (int j = 0; j < N; j++) {\n+\t\t\t\t\tbn_rand_mod(y[j], q);\n+\t\t\t\t}\n+\t\t\t\tTEST_ASSERT(cp_pbpsi_gen(q, ss, s, M) == RLC_OK, end);\n+\t\t\t\tTEST_ASSERT(cp_pbpsi_ask(d, r, x, s, M) == RLC_OK, end);\n+\t\t\t\tfor (int k = 0; k <= N; k++) {\n+\t\t\t\t\tfor (int j = 0; j < k; j++) {\n+\t\t\t\t\t\tbn_copy(y[j], x[j]);\n+\t\t\t\t\t}\n+\t\t\t\t\tTEST_ASSERT(cp_pbpsi_ans(t, u, ss, d[0], y, N) == RLC_OK, end);\n+\t\t\t\t\tTEST_ASSERT(cp_pbpsi_int(z, &l, d, x, M, t, u, N) == RLC_OK,\n+\t\t\t\t\t\tend);\n+\t\t\t\t\tTEST_ASSERT(l == k, end);\n+\t\t\t\t}\n+\t\t\t} TEST_END;\n+\t\t}\n \t}\n \tRLC_CATCH_ANY {\n \t\tRLC_ERROR(end);\n@@ -2298,16 +2301,6 @@ int main(void) {\n \n \tutil_banner(\"Tests for the CP module\", 0);\n \n-\t#if defined(WITH_BN) && defined(WITH_PC)\n-\t\tutil_banner(\"Protocols based on accumulators:\\n\", 0);\n-\t\tif (pc_param_set_any() == RLC_OK) {\n-\t\t\tif (psi() != RLC_OK) {\n-\t\t\t\tcore_clean();\n-\t\t\t\treturn 1;\n-\t\t\t}\n-\t\t}\n-\t#endif\n-\n #if defined(WITH_BN)\n \tutil_banner(\"Protocols based on integer factorization:\\n\", 0);\n \tif (rsa() != RLC_OK) {\n@@ -2466,6 +2459,14 @@ int main(void) {\n \t}\n #endif\n \n+#if defined(WITH_BN) && defined(WITH_PC)\n+\tutil_banner(\"Protocols based on accumulators:\\n\", 0);\n+\tif (psi() != RLC_OK) {\n+\t\tcore_clean();\n+\t\treturn 1;\n+\t}\n+#endif\n+\n \tutil_banner(\"All tests have passed.\\n\", 0);\n \n \tcore_clean();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eef556aada450b16b84b85d08642d1cfc45c6e0c",
            "date": "2025-01-11T16:51:59Z",
            "author_login": "dfaranha"
          },
          {
            "sha": "0612d807ebbc554d97b19fc6791a8dcd4264ed91",
            "date": "2025-01-10T13:50:48Z",
            "author_login": "dfaranha"
          },
          {
            "sha": "216ca40e62af772f9333ed4df7894e41e47f42ca",
            "date": "2024-12-30T01:37:58Z",
            "author_login": "dfaranha"
          },
          {
            "sha": "782be63ce7a40f83441a9715395018e39c860d21",
            "date": "2024-12-30T01:11:31Z",
            "author_login": "dfaranha"
          },
          {
            "sha": "c48ba4ffc9a36489fe7b21aef889ed8be45516d0",
            "date": "2024-12-30T00:22:49Z",
            "author_login": "dfaranha"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-190",
    "description": "Integer Overflow vulnerability in RELIC before commit 421f2e91cf2ba42473d4d54daf24e295679e290e, allows attackers to execute arbitrary code and cause a denial of service in pos argument in bn_get_prime function.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-01T16:15:08.127",
    "last_modified": "2024-11-21T08:09:33.340",
    "fix_date": "2022-11-14T14:04:06Z"
  },
  "references": [
    {
      "url": "https://github.com/relic-toolkit/relic/commit/421f2e91cf2ba42473d4d54daf24e295679e290e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://groups.google.com/g/relic-discuss/c/A_J2-ArVIAo/m/qgFiXsUJBQAJ?utm_medium=email&utm_source=footer",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://github.com/relic-toolkit/relic/commit/421f2e91cf2ba42473d4d54daf24e295679e290e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://groups.google.com/g/relic-discuss/c/A_J2-ArVIAo/m/qgFiXsUJBQAJ?utm_medium=email&utm_source=footer",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.502018",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "relic",
    "owner": "relic-toolkit",
    "created_at": "2014-08-18T21:34:41Z",
    "updated_at": "2025-01-14T13:21:01Z",
    "pushed_at": "2025-01-11T16:52:03Z",
    "size": 16538,
    "stars": 467,
    "forks": 180,
    "open_issues": 11,
    "watchers": 467,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C": 5269206,
      "Assembly": 960652,
      "CMake": 81455,
      "Shell": 33388,
      "C++": 29345
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:06:57.084712"
  }
}