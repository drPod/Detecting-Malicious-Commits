{
  "cve_id": "CVE-2023-3674",
  "github_data": {
    "repository": "keylime/keylime",
    "fix_commit": "95ce3d86bd2c53009108ffda2dcf553312d733db",
    "related_commits": [
      "95ce3d86bd2c53009108ffda2dcf553312d733db",
      "95ce3d86bd2c53009108ffda2dcf553312d733db"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "95ce3d86bd2c53009108ffda2dcf553312d733db",
      "commit_date": "2023-07-11T22:03:28Z",
      "author": {
        "login": "stefanberger",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "tpm_util: Replace a logger.error with an Exception in case of invalid signature",
        "length": 187,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 22,
        "deletions": 5
      },
      "files": [
        {
          "filename": "keylime/tpm/tpm_util.py",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -3,7 +3,6 @@\n import struct\n from typing import Any, Dict, List, Optional, Tuple, Union\n \n-from cryptography.exceptions import InvalidSignature\n from cryptography.hazmat import backends\n from cryptography.hazmat.primitives import hashes, hmac, serialization\n from cryptography.hazmat.primitives.asymmetric import ec, padding\n@@ -155,10 +154,7 @@ def checkquote(\n     digest.update(quoteblob)\n     quote_digest = digest.finalize()\n \n-    try:\n-        verify(pubkey, signature, quote_digest, hashfunc)\n-    except InvalidSignature:\n-        logger.error(\"Invalid quote signature!\")\n+    verify(pubkey, signature, quote_digest, hashfunc)\n \n     # Check that reported nonce is expected one\n     retDict = tpm2_objects.unmarshal_tpms_attest(quoteblob)"
        },
        {
          "filename": "keylime/tpm/tpm_util_test.py",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n import unittest\n from unittest import mock\n \n+from cryptography.exceptions import InvalidSignature\n from cryptography.hazmat.primitives.asymmetric.ec import (\n     SECP256R1,\n     EllipticCurve,\n@@ -60,6 +61,26 @@ def test_checkquote(self) -> None:\n         except Exception as e:\n             self.fail(f\"checkquote failed with {e}\")\n \n+        # test bad input\n+        bad_quoteblob = bytearray(quoteblob)\n+        bad_quoteblob[5] ^= 0x1\n+        with self.assertRaises(InvalidSignature):\n+            checkquote(aikblob, nonce, sigblob, bad_quoteblob, pcrblob, \"sha256\")\n+\n+        l = list(nonce)\n+        l[0] = \"a\"\n+        bad_nonce = \"\".join(l)\n+        with self.assertRaises(Exception):\n+            checkquote(aikblob, bad_nonce, sigblob, quoteblob, pcrblob, \"sha256\")\n+\n+        bad_pcrblob = bytearray(pcrblob)\n+        bad_pcrblob[5] ^= 0x1\n+        with self.assertRaises(Exception):\n+            checkquote(aikblob, nonce, sigblob, quoteblob, bad_pcrblob, \"sha256\")\n+\n+        with self.assertRaises(ValueError):\n+            checkquote(aikblob, nonce, sigblob, quoteblob, pcrblob, \"sha1\")\n+\n     @staticmethod\n     def not_random(numbytes: int) -> bytes:\n         return b\"\\x12\" * numbytes"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ff927f21120ee59bb66a6f2aefee54b951756732",
            "date": "2025-01-21T09:11:20Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "52144069aab56757799ab379cac31bc77cff59e9",
            "date": "2025-01-08T16:06:13Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "e02e66d88c98f47397fce209d01daff20911afbf",
            "date": "2025-01-08T09:14:27Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "d7089c933b56286650a0f71cd94da5e3c29e6e73",
            "date": "2025-01-17T15:55:19Z",
            "author_login": "ansasaki"
          },
          {
            "sha": "a77290d2d7aa08189edac763d87c19cb35f6eb56",
            "date": "2025-01-13T18:57:41Z",
            "author_login": "ansasaki"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-1283",
    "description": "A flaw was found in the keylime attestation verifier, which fails to flag a device's submitted TPM quote as faulty when the quote's signature does not validate for some reason. Instead, it will only emit an error in the log without flagging the device as untrusted.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-19T19:15:12.213",
    "last_modified": "2024-11-21T08:17:48.590",
    "fix_date": "2023-07-11T22:03:28Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2024:1139",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/security/cve/CVE-2023-3674",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2222903",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/commit/95ce3d86bd2c53009108ffda2dcf553312d733db",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2024:1139",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/security/cve/CVE-2023-3674",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2222903",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keylime/keylime/commit/95ce3d86bd2c53009108ffda2dcf553312d733db",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.256332",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "keylime",
    "owner": "keylime",
    "created_at": "2016-10-19T13:25:46Z",
    "updated_at": "2025-01-21T14:21:32Z",
    "pushed_at": "2025-01-21T10:27:21Z",
    "size": 15824,
    "stars": 441,
    "forks": 153,
    "open_issues": 42,
    "watchers": 441,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 1407733,
      "Jinja": 185366,
      "Shell": 68927,
      "Dockerfile": 1771,
      "Standard ML": 1202,
      "Mako": 919,
      "Makefile": 138
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:42:23.828474"
  }
}