{
  "cve_id": "CVE-2023-36812",
  "github_data": {
    "repository": "OpenTSDB/opentsdb",
    "fix_commit": "07c4641471c6f5c2ab5aab615969e97211eb50d9",
    "related_commits": [
      "07c4641471c6f5c2ab5aab615969e97211eb50d9",
      "fa88d3e4b5369f9fb73da384fab0b23e246309ba",
      "07c4641471c6f5c2ab5aab615969e97211eb50d9",
      "fa88d3e4b5369f9fb73da384fab0b23e246309ba"
    ],
    "patch_url": "https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9.patch",
    "fix_commit_details": {
      "sha": "07c4641471c6f5c2ab5aab615969e97211eb50d9",
      "commit_date": "2023-04-11T05:20:30Z",
      "author": {
        "login": "manolama",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Improved fix for #2261.",
        "length": 247,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 88,
        "additions": 78,
        "deletions": 10
      },
      "files": [
        {
          "filename": "src/tsd/GraphHandler.java",
          "status": "modified",
          "additions": 41,
          "deletions": 3,
          "patch": "@@ -40,15 +40,17 @@\n import com.google.common.base.Strings;\n import com.google.common.collect.Sets;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n+import net.opentsdb.core.*;\n import net.opentsdb.core.Const;\n import net.opentsdb.core.DataPoint;\n import net.opentsdb.core.DataPoints;\n import net.opentsdb.core.Query;\n import net.opentsdb.core.TSDB;\n import net.opentsdb.core.TSQuery;\n+import net.opentsdb.core.Tags;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import net.opentsdb.graph.Plot;\n import net.opentsdb.meta.Annotation;\n import net.opentsdb.stats.Histogram;\n@@ -667,6 +669,7 @@ static void setPlotDimensions(final HttpQuery query, final Plot plot) {\n     String wxh = query.getQueryStringParam(\"wxh\");\n     if (wxh != null && !wxh.isEmpty()) {\n       wxh = URLDecoder.decode(wxh.trim());\n+      validateString(\"wxh\", wxh);\n       if (!WXH_VALIDATOR.matcher(wxh).find()) {\n         throw new IllegalArgumentException(\"'wxh' was invalid. \"\n             + \"Must satisfy the pattern \" + WXH_VALIDATOR.toString());\n@@ -744,48 +747,55 @@ static void setPlotParams(final HttpQuery query, final Plot plot) {\n     final Map<String, List<String>> querystring = query.getQueryString();\n     String value;\n     if ((value = popParam(querystring, \"yrange\")) != null) {\n+      validateString(\"yrange\", value, \"[:]\");\n       if (!RANGE_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'yrange' was invalid. \"\n             + \"Must be in the format [min:max].\");\n       }\n       params.put(\"yrange\", value);\n     }\n     if ((value = popParam(querystring, \"y2range\")) != null) {\n+      validateString(\"y2range\", value, \"[:]\");\n       if (!RANGE_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'y2range' was invalid. \"\n             + \"Must be in the format [min:max].\");\n       }\n       params.put(\"y2range\", value);\n     }\n     if ((value = popParam(querystring, \"ylabel\")) != null) {\n+      validateString(\"ylabel\", value, \" \");\n       if (!LABEL_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'ylabel' was invalid. Must \"\n             + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n       }\n       params.put(\"ylabel\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"y2label\")) != null) {\n+      validateString(\"y2label\", value, \" \");\n       if (!LABEL_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'y2label' was invalid. Must \"\n             + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n       }\n       params.put(\"y2label\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"yformat\")) != null) {\n+      validateString(\"yformat\", value, \"% \");\n       if (!FORMAT_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'yformat' was invalid. Must \"\n             + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n       }\n       params.put(\"format y\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"y2format\")) != null) {\n+      validateString(\"y2format\", value, \"% \");\n       if (!FORMAT_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'y2format' was invalid. Must \"\n             + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n       }\n       params.put(\"format y2\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"xformat\")) != null) {\n+      validateString(\"xformat\", value, \"% \");\n       if (!FORMAT_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'xformat' was invalid. Must \"\n             + \"satisfy the pattern \" + FORMAT_VALIDATOR.toString());\n@@ -799,41 +809,47 @@ static void setPlotParams(final HttpQuery query, final Plot plot) {\n       params.put(\"logscale y2\", \"\");\n     }\n     if ((value = popParam(querystring, \"key\")) != null) {\n+      validateString(\"key\", value);\n       if (!KEY_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'key' was invalid. Must \"\n             + \"satisfy the pattern \" + KEY_VALIDATOR.toString());\n       }\n       params.put(\"key\", value);\n     }\n     if ((value = popParam(querystring, \"title\")) != null) {\n+      validateString(\"title\", value, \" \");\n       if (!LABEL_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'title' was invalid. Must \"\n             + \"satisfy the pattern \" + LABEL_VALIDATOR.toString());\n       }\n       params.put(\"title\", stringify(value));\n     }\n     if ((value = popParam(querystring, \"bgcolor\")) != null) {\n+      validateString(\"bgcolor\", value);\n       if (!COLOR_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'bgcolor' was invalid. Must \"\n             + \"be a hex value e.g. 'xFFFFFF'\");\n       }\n       params.put(\"bgcolor\", value);\n     }\n     if ((value = popParam(querystring, \"fgcolor\")) != null) {\n+      validateString(\"fgcolor\", value);\n       if (!COLOR_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'fgcolor' was invalid. Must \"\n             + \"be a hex value e.g. 'xFFFFFF'\");\n       }\n       params.put(\"fgcolor\", value);\n     }\n     if ((value = popParam(querystring, \"smooth\")) != null) {\n+      validateString(\"smooth\", value);\n       if (!SMOOTH_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'smooth' was invalid. Must \"\n             + \"satisfy the pattern \" + SMOOTH_VALIDATOR.toString());\n       }\n       params.put(\"smooth\", value);\n     }\n     if ((value = popParam(querystring, \"style\")) != null) {\n+      validateString(\"style\", value);\n       if (!STYLE_VALIDATOR.matcher(value).find()) {\n         throw new BadRequestException(\"'style' was invalid. Must \"\n             + \"satisfy the pattern \" + STYLE_VALIDATOR.toString());\n@@ -1071,4 +1087,26 @@ static void logError(final HttpQuery query, final String msg,\n     LOG.error(query.channel().toString() + ' ' + msg, e);\n   }\n \n+  static void validateString(final String what, final String s) {\n+    validateString(what, s, \"\");\n+  }\n+\n+  public static void validateString(final String what, final String s, String specials) {\n+    if (s == null) {\n+      throw new BadRequestException(\"Invalid \" + what + \": null\");\n+    } else if (\"\".equals(s)) {\n+      throw new BadRequestException(\"Invalid \" + what + \": empty string\");\n+    }\n+    final int n = s.length();\n+    for (int i = 0; i < n; i++) {\n+      final char c = s.charAt(i);\n+      if (!(('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')\n+          || ('0' <= c && c <= '9') || c == '-' || c == '_' || c == '.'\n+          || c == '/' || Character.isLetter(c) || specials.indexOf(c) != -1)) {\n+        throw new BadRequestException(\"Invalid \" + what\n+            + \" (\\\"\" + s + \"\\\"): illegal character: \" + c);\n+      }\n+    }\n+  }\n+\n }"
        },
        {
          "filename": "test/tsd/TestGraphHandler.java",
          "status": "modified",
          "additions": 37,
          "deletions": 7,
          "patch": "@@ -97,6 +97,7 @@ public void setYRangeParams() throws Exception {\n     assertPlotParam(\"yrange\", \"[-10.1e-5:]\");\n     assertPlotParam(\"yrange\", \"[-10.1e-5:-10.1e-6]\");\n     assertInvalidPlotParam(\"yrange\", \"[33:system('touch /tmp/poc.txt')]\");\n+    assertInvalidPlotParam(\"y2range\", \"[42:%0a[33:system('touch /tmp/poc.txt')]\");\n   }\n \n   @Test\n@@ -109,7 +110,8 @@ public void setKeyParams() throws Exception {\n     assertPlotParam(\"key\", \"horiz\");\n     assertPlotParam(\"key\", \"box\");\n     assertPlotParam(\"key\", \"bottom\");\n-    assertInvalidPlotParam(\"yrange\", \"out%20right%20top%0aset%20yrange%20[33:system(%20\");\n+    assertInvalidPlotParam(\"key\", \"out%20right%20top%0aset%20yrange%20[33:system(%20\");\n+    assertInvalidPlotParam(\"key\", \"%3Bsystem%20%22cat%20/home/ubuntuvm/secret.txt%20%3E/tmp/secret.txt%22%20%22\");\n   }\n \n   @Test\n@@ -118,16 +120,23 @@ public void setStyleParams() throws Exception {\n     assertPlotParam(\"style\", \"points\");\n     assertPlotParam(\"style\", \"circles\");\n     assertPlotParam(\"style\", \"dots\");\n-    assertInvalidPlotParam(\"style\", \"dots%20[33:system(%20\");\n+    assertInvalidPlotParam(\"style\", \"dots%20%0a[33:system(%20\");\n+    assertInvalidPlotParam(\"style\", \"%3Bsystem%20%22cat%20/home/ubuntuvm/secret.txt%20%3E/tmp/secret.txt%22%20%22\\\"\");\n   }\n \n   @Test\n   public void setLabelParams() throws Exception {\n     assertPlotParam(\"ylabel\", \"This is good\");\n     assertPlotParam(\"ylabel\", \" and so Is this - _ yay\");\n-    assertInvalidPlotParam(\"ylabel\", \"[33:system(%20\");\n-    assertInvalidPlotParam(\"title\", \"[33:system(%20\");\n-    assertInvalidPlotParam(\"y2label\", \"[33:system(%20\");\n+    assertInvalidPlotParam(\"ylabel\", \"system(%20no%0anewlines\");\n+    assertInvalidPlotParam(\"title\", \"system(%20no%0anewlines\");\n+    assertInvalidPlotParam(\"y2label\", \"system(%20no%0anewlines\");\n+  }\n+\n+  @Test\n+  public void setWXH() throws Exception {\n+    assertPlotDimension(\"wxh\",  \"720x640\");\n+    assertInvalidPlotDimension(\"wxh\", \"720%0ax640\");\n   }\n \n   @Test\n@@ -137,12 +146,14 @@ public void setColorParams() throws Exception {\n     assertPlotParam(\"bgcolor\", \"%58DEADBE\");\n     assertInvalidPlotParam(\"bgcolor\", \"XDEADBEF\");\n     assertInvalidPlotParam(\"bgcolor\", \"%5BDEADBE\");\n+    assertInvalidPlotParam(\"bgcolor\", \"xBDE%0AAD\");\n \n     assertPlotParam(\"fgcolor\", \"x000000\");\n     assertPlotParam(\"fgcolor\", \"XDEADBE\");\n     assertPlotParam(\"fgcolor\", \"%58DEADBE\");\n     assertInvalidPlotParam(\"fgcolor\", \"XDEADBEF\");\n     assertInvalidPlotParam(\"fgcolor\", \"%5BDEADBE\");\n+    assertInvalidPlotParam(\"fgcolor\", \"xBDE%0AAD\");\n   }\n \n   @Test\n@@ -160,7 +171,8 @@ public void setSmoothParams() throws Exception {\n     assertPlotParam(\"smooth\", \"sbezier\");\n     assertPlotParam(\"smooth\", \"unwrap\");\n     assertPlotParam(\"smooth\", \"zsort\");\n-    assertInvalidPlotParam(\"smooth\", \"[33:system(%20\");\n+    assertInvalidPlotParam(\"smooth\", \"bezier%20system(%20\");\n+    assertInvalidPlotParam(\"smooth\", \"fnormal%0asystem(%20\");\n   }\n \n   @Test\n@@ -172,7 +184,8 @@ public void setFormatParams() throws Exception {\n     assertPlotParam(\"yformat\", \"%253.0em%25%25\");\n     assertPlotParam(\"yformat\", \"%25.2f seconds\");\n     assertPlotParam(\"yformat\", \"%25.0f ms\");\n-    assertInvalidPlotParam(\"yformat\", \"%252.[33:system\");\n+    assertInvalidPlotParam(\"yformat\", \"%252.system(%20\");\n+    assertInvalidPlotParam(\"yformat\", \"%252.%0asystem(%20\");\n   }\n \n   @Test  // If the file doesn't exist, we don't use it, obviously.\n@@ -344,6 +357,13 @@ private static void assertPlotParam(String param, String value) {\n     GraphHandler.setPlotParams(query, plot);\n   }\n \n+  private static void assertPlotDimension(String param, String value) {\n+    Plot plot = mock(Plot.class);\n+    HttpQuery query = mock(HttpQuery.class);\n+    when(query.getQueryStringParam(param)).thenReturn(value);\n+    GraphHandler.setPlotParams(query, plot);\n+  }\n+\n   private static void assertInvalidPlotParam(String param, String value) {\n     Plot plot = mock(Plot.class);\n     HttpQuery query = mock(HttpQuery.class);\n@@ -357,4 +377,14 @@ private static void assertInvalidPlotParam(String param, String value) {\n     } catch (BadRequestException e) { }\n   }\n \n+  private static void assertInvalidPlotDimension(String param, String value) {\n+    Plot plot = mock(Plot.class);\n+    HttpQuery query = mock(HttpQuery.class);\n+    when(query.getQueryStringParam(param)).thenReturn(value);\n+    try {\n+      GraphHandler.setPlotDimensions(query, plot);\n+      fail(\"Expected BadRequestException\");\n+    } catch (BadRequestException e) { }\n+  }\n+\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f681b7545d9999506900da5f1c4dbe433dbfb43",
            "date": "2024-12-12T20:01:04Z",
            "author_login": "johann8384"
          },
          {
            "sha": "38cb8af247da9ae5edf68974478c730fd15d57f0",
            "date": "2024-12-12T18:20:44Z",
            "author_login": "johann8384"
          },
          {
            "sha": "a81e38696bbf3ad533bb8864c9c0a17b04e63624",
            "date": "2024-12-12T15:58:21Z",
            "author_login": "johann8384"
          },
          {
            "sha": "f6ea437e6d5a50238f7bcff0560831bb866b4795",
            "date": "2018-12-18T15:54:32Z",
            "author_login": "Eduardo95"
          },
          {
            "sha": "94cd3a1019dc323e0118122da03ef0b89f7e5a3d",
            "date": "2019-01-10T05:32:34Z",
            "author_login": "manolama"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-74",
    "description": "OpenTSDB is a open source, distributed, scalable Time Series Database (TSDB). OpenTSDB is vulnerable to Remote Code Execution vulnerability by writing user-controlled input to Gnuplot configuration file and running Gnuplot with the generated configuration. This issue has been patched in  commit `07c4641471c` and further refined in commit `fa88d3e4b`. These patches are available in the `2.4.2` release. Users are advised to upgrade. User unable to upgrade may disable Gunuplot via the config option`tsd.core.enable_ui = true` and remove the shell files `mygnuplot.bat` and `mygnuplot.sh`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-30T23:15:10.287",
    "last_modified": "2024-11-21T08:10:38.957",
    "fix_date": "2023-04-11T05:20:30Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/174570/OpenTSDB-2.4.1-Unauthenticated-Command-Injection.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenTSDB/opentsdb/commit/fa88d3e4b5369f9fb73da384fab0b23e246309ba",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenTSDB/opentsdb/security/advisories/GHSA-76f7-9v52-v2fw",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/174570/OpenTSDB-2.4.1-Unauthenticated-Command-Injection.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenTSDB/opentsdb/commit/fa88d3e4b5369f9fb73da384fab0b23e246309ba",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenTSDB/opentsdb/security/advisories/GHSA-76f7-9v52-v2fw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.884099",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "opentsdb",
    "owner": "OpenTSDB",
    "created_at": "2010-08-27T02:05:20Z",
    "updated_at": "2025-01-11T14:16:11Z",
    "pushed_at": "2024-12-12T20:03:34Z",
    "size": 41493,
    "stars": 5015,
    "forks": 1248,
    "open_issues": 532,
    "watchers": 5015,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 5967783,
      "Python": 45358,
      "Makefile": 38031,
      "Shell": 31007,
      "M4": 3285,
      "Dockerfile": 1424,
      "Emacs Lisp": 170,
      "Batchfile": 55
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T13:24:57.967393"
  }
}