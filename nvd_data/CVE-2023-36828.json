{
  "cve_id": "CVE-2023-36828",
  "github_data": {
    "repository": "statamic/cms",
    "fix_commit": "c714893ad92de6e5ede17b501003441af505b30d",
    "related_commits": [
      "c714893ad92de6e5ede17b501003441af505b30d",
      "c714893ad92de6e5ede17b501003441af505b30d"
    ],
    "patch_url": "https://github.com/statamic/cms/commit/c714893ad92de6e5ede17b501003441af505b30d.patch",
    "fix_commit_details": {
      "sha": "c714893ad92de6e5ede17b501003441af505b30d",
      "commit_date": "2023-07-05T16:26:57Z",
      "author": {
        "login": "jasonvarga",
        "type": "User",
        "stats": {
          "total_commits": 6646,
          "average_weekly_commits": 17.77005347593583,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 330
        }
      },
      "commit_message": {
        "title": "[4.x] SVG tag sanitization (#8408)",
        "length": 34,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 134,
        "additions": 132,
        "deletions": 2
      },
      "files": [
        {
          "filename": "composer.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -12,6 +12,7 @@\n         \"ext-json\": \"*\",\n         \"ajthinking/archetype\": \"^1.0.3\",\n         \"composer/composer\": \"^1.10.22 || ^2.2.12\",\n+        \"enshrined/svg-sanitize\": \"^0.16.0\",\n         \"facade/ignition-contracts\": \"^1.0\",\n         \"guzzlehttp/guzzle\": \"^6.3 || ^7.0\",\n         \"james-heinrich/getid3\": \"^1.9.21\","
        },
        {
          "filename": "src/Tags/Svg.php",
          "status": "modified",
          "additions": 60,
          "deletions": 1,
          "patch": "@@ -2,6 +2,9 @@\n \n namespace Statamic\\Tags;\n \n+use enshrined\\svgSanitize\\data\\AllowedAttributes;\n+use enshrined\\svgSanitize\\data\\AllowedTags;\n+use enshrined\\svgSanitize\\Sanitizer;\n use Statamic\\Facades\\File;\n use Statamic\\Facades\\URL;\n use Statamic\\Support\\Str;\n@@ -47,11 +50,13 @@ public function index()\n             $svg = $this->setTitleAndDesc($svg);\n         }\n \n-        return str_replace(\n+        $svg = str_replace(\n             '<svg',\n             collect(['<svg', $attributes])->filter()->implode(' '),\n             $svg\n         );\n+\n+        return $this->sanitize($svg);\n     }\n \n     private function setTitleAndDesc($svg)\n@@ -79,4 +84,58 @@ private function setTitleAndDesc($svg)\n \n         return $doc->saveHTML();\n     }\n+\n+    private function sanitize($svg)\n+    {\n+        if ($this->params->bool('sanitize') === false) {\n+            return $svg;\n+        }\n+\n+        $sanitizer = new Sanitizer;\n+        $sanitizer->removeXMLTag(! Str::startsWith($svg, '<?xml'));\n+        $sanitizer->setAllowedAttrs($this->getAllowedAttrs());\n+        $sanitizer->setAllowedTags($this->getAllowedTags());\n+\n+        return $sanitizer->sanitize($svg);\n+    }\n+\n+    private function getAllowedAttrs()\n+    {\n+        $attrs = $this->params->explode('allow_attrs', []);\n+\n+        return new class($attrs) extends AllowedAttributes\n+        {\n+            private static $attrs = [];\n+\n+            public function __construct($attrs)\n+            {\n+                self::$attrs = $attrs;\n+            }\n+\n+            public static function getAttributes()\n+            {\n+                return array_merge(parent::getAttributes(), self::$attrs);\n+            }\n+        };\n+    }\n+\n+    private function getAllowedTags()\n+    {\n+        $tags = $this->params->explode('allow_tags', []);\n+\n+        return new class($tags) extends AllowedTags\n+        {\n+            private static $tags = [];\n+\n+            public function __construct($tags)\n+            {\n+                self::$tags = $tags;\n+            }\n+\n+            public static function getTags()\n+            {\n+                return array_merge(parent::getTags(), self::$tags);\n+            }\n+        };\n+    }\n }"
        },
        {
          "filename": "tests/Tags/SvgTagTest.php",
          "status": "modified",
          "additions": 71,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@\n \n use Illuminate\\Support\\Facades\\File;\n use Statamic\\Facades\\Parse;\n+use Statamic\\View\\Antlers\\Language\\Utilities\\StringUtilities;\n use Tests\\TestCase;\n \n class SvgTagTest extends TestCase\n@@ -17,7 +18,10 @@ public function setUp(): void\n \n     private function tag($tag)\n     {\n-        return Parse::template($tag, []);\n+        $output = Parse::template($tag, []);\n+\n+        // Normalize whitespace and line breaks for testing ease.\n+        return trim(StringUtilities::normalizeLineEndings($output));\n     }\n \n     /** @test */\n@@ -32,4 +36,70 @@ public function it_renders_svg_with_additional_params()\n     {\n         $this->assertStringStartsWith('<svg class=\"mb-2\" xmlns=\"', $this->tag('{{ svg src=\"users\" class=\"mb-2\" }}'));\n     }\n+\n+    /** @test */\n+    public function it_sanitizes()\n+    {\n+        File::put(resource_path('xss.svg'), <<<'SVG'\n+<svg>\n+    <path onload=\"loadxss\" onclick=\"clickxss\"></path>\n+    <script>alert(\"xss\")</script>\n+    <foreignObject></foreignObject>\n+    <mesh></mesh>\n+</svg>\n+SVG);\n+\n+        $this->assertEquals(<<<'SVG'\n+<svg>\n+  <path></path>\n+</svg>\n+SVG,\n+            $this->tag('{{ svg src=\"xss\" sanitize=\"true\" }}')\n+        );\n+\n+        $this->assertEquals(<<<'SVG'\n+<svg>\n+  <path onclick=\"clickxss\"></path>\n+  <foreignObject></foreignObject>\n+  <mesh></mesh>\n+</svg>\n+SVG,\n+            $this->tag('{{ svg src=\"xss\" sanitize=\"true\" allow_tags=\"mesh|foreignObject\" allow_attrs=\"onclick\" }}')\n+        );\n+    }\n+\n+    /** @test */\n+    public function sanitizing_doesnt_add_xml_tag()\n+    {\n+        // Thes sanitizer package adds an xml tag by default.\n+        // We want to make sure if there wasn't one to begin with, it doesn't add one.\n+\n+        $svg = <<<'SVG'\n+<svg>\n+  <path></path>\n+</svg>\n+SVG;\n+\n+        File::put(resource_path('xmltag.svg'), $svg);\n+\n+        $this->assertEquals($svg, $this->tag('{{ svg src=\"xmltag\" sanitize=\"true\" }}'));\n+    }\n+\n+    /** @test */\n+    public function sanitizing_doesnt_remove_an_xml_tag()\n+    {\n+        // Thes sanitizer package adds an xml tag by default.\n+        // We want to make sure that we haven't configured it to remove it if we wanted it there to begin with.\n+\n+        $svg = <<<'SVG'\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<svg>\n+  <path></path>\n+</svg>\n+SVG;\n+\n+        File::put(resource_path('xmltag.svg'), $svg);\n+\n+        $this->assertEquals($svg, $this->tag('{{ svg src=\"xmltag\" sanitize=\"true\" }}'));\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5fa2e186dd75a39e7c889125d0c5bf0e43ac4c29",
            "date": "2025-01-14T15:23:36Z",
            "author_login": "jacksleight"
          },
          {
            "sha": "bcd529b711112f63a32881d3efc05cb3a36a7916",
            "date": "2025-01-08T16:05:07Z",
            "author_login": "edalzell"
          },
          {
            "sha": "8a2ad86a7b7ad8a76c37db3ee3ff71ecbad45627",
            "date": "2025-01-07T20:17:24Z",
            "author_login": "jasonvarga"
          },
          {
            "sha": "f72180818fb199d47794812ac05754ae5cb9ad7c",
            "date": "2025-01-07T20:16:08Z",
            "author_login": "jasonvarga"
          },
          {
            "sha": "b63e958b0fc969608f2762dd4c05a32f9134f5fc",
            "date": "2025-01-07T19:39:50Z",
            "author_login": "edalzell"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "Statamic is a flat-first, Laravel and Git powered content management system. Prior to version 4.10.0, the SVG tag does not sanitize malicious SVG. Therefore, an attacker can exploit this vulnerability to perform cross-site scripting attacks using SVG, even when using the `sanitize` function. Version 4.10.0 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-05T22:15:10.113",
    "last_modified": "2024-11-21T08:10:41.293",
    "fix_date": "2023-07-05T16:26:57Z"
  },
  "references": [
    {
      "url": "https://github.com/statamic/cms/blob/f806b6b007ddcf066082eef175653c5beaa96d60/src/Http/Controllers/CP/Fieldtypes/FilesFieldtypeController.php#L15",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/blob/f806b6b007ddcf066082eef175653c5beaa96d60/src/Tags/Svg.php#L36-L40",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/commit/c714893ad92de6e5ede17b501003441af505b30d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/pull/8408",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/releases/tag/v4.10.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/security/advisories/GHSA-6r5g-cq4q-327g",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/blob/f806b6b007ddcf066082eef175653c5beaa96d60/src/Http/Controllers/CP/Fieldtypes/FilesFieldtypeController.php#L15",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/blob/f806b6b007ddcf066082eef175653c5beaa96d60/src/Tags/Svg.php#L36-L40",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/commit/c714893ad92de6e5ede17b501003441af505b30d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/pull/8408",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/releases/tag/v4.10.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/statamic/cms/security/advisories/GHSA-6r5g-cq4q-327g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.893738",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cms",
    "owner": "statamic",
    "created_at": "2017-11-21T14:56:36Z",
    "updated_at": "2025-01-14T12:24:05Z",
    "pushed_at": "2025-01-13T22:40:58Z",
    "size": 57524,
    "stars": 4201,
    "forks": 547,
    "open_issues": 270,
    "watchers": 4201,
    "has_security_policy": false,
    "default_branch": "5.x",
    "protected_branches": [
      "3.0",
      "3.1",
      "3.2",
      "3.3",
      "3.4",
      "4.x",
      "5.x",
      "8041-fix-bard-buttons-setting-reorder",
      "add-various-methods-to-base-query-builder",
      "allow-hashes-in-urls",
      "allow-using-variables-in-static-caching-invalidation-rules",
      "ascii-art",
      "bard-allow-source",
      "carbon-3",
      "confirmation-modal-action",
      "customizable-columns-in-asset-browser",
      "deferred-all-augmentation",
      "disable-autocomplete-on-edit-inputs",
      "drop-get-for-field-meta",
      "edalzell-patch-1",
      "ensuring-fields-for-fieldsets",
      "error-indexes",
      "error-solutions-namespace"
    ],
    "languages": {
      "PHP": 11607268,
      "Vue": 1156490,
      "JavaScript": 274768,
      "Blade": 181146,
      "CSS": 142928,
      "Antlers": 43276,
      "HTML": 789,
      "Batchfile": 116
    },
    "commit_activity": {
      "total_commits_last_year": 1452,
      "avg_commits_per_week": 27.923076923076923,
      "days_active_last_year": 225
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:48:38.129222"
  }
}