{
  "cve_id": "CVE-2023-3692",
  "github_data": {
    "repository": "admidio/admidio",
    "fix_commit": "d66585d14b1160712a8a9bfaf9769dd3da0e9a83",
    "related_commits": [
      "d66585d14b1160712a8a9bfaf9769dd3da0e9a83",
      "d66585d14b1160712a8a9bfaf9769dd3da0e9a83"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d66585d14b1160712a8a9bfaf9769dd3da0e9a83",
      "commit_date": "2023-07-09T07:08:46Z",
      "author": {
        "login": "Fasse",
        "type": "User",
        "stats": {
          "total_commits": 6698,
          "average_weekly_commits": 6.638255698711595,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 829
        }
      },
      "commit_message": {
        "title": " Possible to upload non image files within ckeditor #1455",
        "length": 57,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 50,
        "additions": 33,
        "deletions": 17
      },
      "files": [
        {
          "filename": "adm_program/system/ckeditor_upload_handler.php",
          "status": "modified",
          "additions": 26,
          "deletions": 12,
          "patch": "@@ -34,6 +34,10 @@\n     $message = $gL10n->get('SYS_SERVER_NO_UPLOAD');\n }\n \n+if (!FileSystemUtils::allowedFileExtension($_FILES['upload']['name'])) {\n+    $message = $gL10n->get('SYS_FILE_EXTENSION_INVALID');\n+}\n+\n // if necessary create the module folders in adm_my_files\n switch ($getCKEditor) {\n     case 'ann_description':\n@@ -59,29 +63,39 @@\n         break;\n }\n \n-try {\n-    $imagesPath = ADMIDIO_PATH . FOLDER_DATA . '/' . $folderName . '/images';\n+if ($message === '') {\n+    try {\n+        $imagesPath = ADMIDIO_PATH . FOLDER_DATA . '/' . $folderName . '/images';\n+\n+        FileSystemUtils::createDirectoryIfNotExists($imagesPath);\n+\n+        // create a filename with a timestamp and 16 chars secure-random string,\n+        // so we have a scheme for the filenames and the risk of duplicates is negligible.\n+        // Format: 20180131-123456_0123456789abcdef.jpg\n+        $fileName = FileSystemUtils::getGeneratedFilename($_FILES['upload']['name']);\n+        $fileNamePath = $imagesPath . '/' . $fileName;\n \n-    FileSystemUtils::createDirectoryIfNotExists($imagesPath);\n+        $htmlUrl = SecurityUtils::encodeUrl(ADMIDIO_URL . '/adm_program/system/show_image.php', array('module' => $folderName, 'file' => $fileName));\n \n-    // create a filename with a timestamp and a 16 chars secure-random string,\n-    // so we have a scheme for the filenames and the risk of duplicates is negligible.\n-    // Format: 20180131-123456_0123456789abcdef.jpg\n-    $filename = FileSystemUtils::getGeneratedFilename($_FILES['upload']['name']);\n+        move_uploaded_file($_FILES['upload']['tmp_name'], $fileNamePath);\n \n-    $htmlUrl = SecurityUtils::encodeUrl(ADMIDIO_URL . '/adm_program/system/show_image.php', array('module' => $folderName, 'file' => $filename));\n+        // check if the file contains a valid image\n+        if (!getimagesize($fileNamePath)) {\n+            $message = $gL10n->get('PHO_PHOTO_FORMAT_INVALID');\n+            FileSystemUtils::deleteFileIfExists($fileNamePath);\n+        }\n \n-    move_uploaded_file($_FILES['upload']['tmp_name'], $imagesPath . '/' . $filename);\n-} catch (\\RuntimeException $exception) {\n-    $message = $exception->getMessage();\n+    } catch (RuntimeException|AdmException $exception) {\n+        $message = $exception->getMessage();\n+    }\n }\n \n // now call CKEditor function and send photo data\n echo '<!DOCTYPE html>\n <html>\n     <body>\n         <script type=\"text/javascript\">\n-            window.parent.CKEDITOR.tools.callFunction('.$getCKEditorFuncNum.', \"'.$htmlUrl.'\", \"'.$message.'\");\n+            window.parent.CKEDITOR.tools.callFunction('.$getCKEditorFuncNum.', \"'.$htmlUrl.'\", \"'.$message.'\")\n         </script>\n     </body>\n </html>';"
        },
        {
          "filename": "adm_program/system/classes/FileSystemUtils.php",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -86,11 +86,13 @@ final class FileSystemUtils\n     /**\n      * Check if the file extension of the current file format is allowed for upload and the\n      * documents and files module.\n-     * @param string $fileExtension The file extension that should be checked.\n+     * @param string $filename The name of the file that should be checked.\n      * @return bool Return true if the file extension is allowed to be used within Admidio.\n      */\n-    public static function allowedFileExtension($fileExtension)\n+    public static function allowedFileExtension(string $filename): bool\n     {\n+        $fileExtension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n+\n         if (array_key_exists($fileExtension, self::$iconFileExtension)) {\n             return true;\n         }"
        },
        {
          "filename": "adm_program/system/classes/TableFile.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -42,9 +42,9 @@ public function __construct(Database $database, $filId = 0)\n      * documents and files module.\n      * @return bool Return true if the file extension is allowed to be used within Admidio.\n      */\n-    public function allowedFileExtension()\n+    public function allowedFileExtension(): bool\n     {\n-        return FileSystemUtils::allowedFileExtension($this->getFileExtension());\n+        return FileSystemUtils::allowedFileExtension($this->getValue('fil_name', 'database'));\n     }\n \n     /**"
        },
        {
          "filename": "adm_program/system/classes/UploadHandlerPhoto.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -70,7 +70,7 @@ protected function handle_file_upload($uploadedFile, $name, $size, $type, $error\n \n                 $newPhotoFileNumber = $photoAlbum->getValue('pho_quantity') + 1;\n \n-                // read image size\n+                // check if the file contains a valid image and read image properties\n                 $imageProperties = getimagesize($fileLocation);\n                 if ($imageProperties === false) {\n                     throw new AdmException('PHO_PHOTO_FORMAT_INVALID');"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "00eed34b64f4edfc34441c80fde054751de0e546",
            "date": "2025-01-23T19:53:46Z",
            "author_login": "Fasse"
          },
          {
            "sha": "8af815bf5111ad7c35737b3830b10e565a778928",
            "date": "2025-01-21T15:57:22Z",
            "author_login": "kainhofer"
          },
          {
            "sha": "a720ec9e6204387e926c648640d694430178d105",
            "date": "2025-01-23T05:41:31Z",
            "author_login": "Fasse"
          },
          {
            "sha": "59ff38abc905a8c88cd88e161a71b4fe2ed8a756",
            "date": "2025-01-23T05:35:20Z",
            "author_login": "Fasse"
          },
          {
            "sha": "31390c4fdf8d5d00d6ab4f798b8f014acff285d2",
            "date": "2025-01-22T21:02:26Z",
            "author_login": "kainhofer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "Unrestricted Upload of File with Dangerous Type in GitHub repository admidio/admidio prior to 4.2.10.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-16T01:15:09.893",
    "last_modified": "2024-11-21T08:17:51.240",
    "fix_date": "2023-07-09T07:08:46Z"
  },
  "references": [
    {
      "url": "https://github.com/admidio/admidio/commit/d66585d14b1160712a8a9bfaf9769dd3da0e9a83",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/be6616eb-384d-40d6-b1fd-0ec9e4973f12",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/admidio/admidio/commit/d66585d14b1160712a8a9bfaf9769dd3da0e9a83",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/be6616eb-384d-40d6-b1fd-0ec9e4973f12",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.246617",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "admidio",
    "owner": "admidio",
    "created_at": "2015-01-05T11:03:46Z",
    "updated_at": "2025-01-14T08:00:57Z",
    "pushed_at": "2025-01-14T06:12:48Z",
    "size": 122123,
    "stars": 349,
    "forks": 134,
    "open_issues": 157,
    "watchers": 349,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 3162563,
      "JavaScript": 806324,
      "Smarty": 240740,
      "CSS": 89897,
      "HTML": 37144,
      "Shell": 12111,
      "Dockerfile": 3439
    },
    "commit_activity": {
      "total_commits_last_year": 581,
      "avg_commits_per_week": 11.173076923076923,
      "days_active_last_year": 183
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T14:42:13.964136"
  }
}