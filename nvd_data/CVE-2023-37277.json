{
  "cve_id": "CVE-2023-37277",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "4c175405faa0e62437df397811c7526dfc0fbae7",
    "related_commits": [
      "4c175405faa0e62437df397811c7526dfc0fbae7",
      "4c175405faa0e62437df397811c7526dfc0fbae7"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/4c175405faa0e62437df397811c7526dfc0fbae7.patch",
    "fix_commit_details": {
      "sha": "4c175405faa0e62437df397811c7526dfc0fbae7",
      "commit_date": "2023-03-15T17:03:37Z",
      "author": {
        "login": "michitux",
        "type": "User",
        "stats": {
          "total_commits": 378,
          "average_weekly_commits": 0.39622641509433965,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 108
        }
      },
      "commit_message": {
        "title": "XWIKI-20135: Require a CSRF token for some request types in the REST API",
        "length": 508,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 357,
        "additions": 352,
        "deletions": 5
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-test/xwiki-platform-flamingo-skin-test-docker/src/test/it/org/xwiki/flamingo/test/docker/AllITs.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -188,4 +188,10 @@ class NestedSheetIT extends SheetIT\n     class NestedScriptAuthorIT extends ScriptAuthorIT\n     {\n     }\n+\n+    @Nested\n+    @DisplayName(\"Form Token injection Tests\")\n+    class NestedFormTokenInjectionIT extends FormTokenInjectionIT\n+    {\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-test/xwiki-platform-flamingo-skin-test-docker/src/test/it/org/xwiki/flamingo/test/docker/FormTokenInjectionIT.java",
          "status": "added",
          "additions": 78,
          "deletions": 0,
          "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.flamingo.test.docker;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.xwiki.test.docker.junit5.TestReference;\n+import org.xwiki.test.docker.junit5.UITest;\n+import org.xwiki.test.ui.TestUtils;\n+import org.xwiki.test.ui.po.ViewPage;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.jupiter.api.Assertions.assertAll;\n+\n+/**\n+ * Integration test to verify that the form token is correctly injected in JavaScript requests.\n+ *\n+ * @version $Id$\n+ */\n+@UITest\n+class FormTokenInjectionIT\n+{\n+    @Test\n+    @Order(1)\n+    void simpleRESTPost(TestUtils setup, TestReference reference) throws Exception\n+    {\n+        setup.loginAsSuperAdmin();\n+        setup.deletePage(reference);\n+\n+        String content = \"{{html clean=\\\"false\\\"}}\"\n+            + \"<div id='results'></div>\"\n+            + \"<script>\"\n+            + IOUtils.toString(\n+            Objects.requireNonNull(getClass().getResourceAsStream(\"/FormTokenInjectionIT/testCode.js\")),\n+            StandardCharsets.UTF_8)\n+            + \"</script>\"\n+            + \"{{/html}}\";\n+        setup.createPage(reference, content);\n+\n+        ViewPage viewPage = setup.gotoPage(reference);\n+        String pageContent = viewPage.getContent();\n+\n+        assertAll(\n+            Stream.of(\n+                \"Simple POST: 201\",\n+                \"Only Request: 201\",\n+                \"Request with init: 201\",\n+                \"Simple with array headers: 201\",\n+                \"Request with init body\",\n+                \"Request Body\",\n+                \"Simple with array headers body\"\n+            ).map(expected -> (() -> assertThat(pageContent, containsString(expected))))\n+        );\n+    }\n+}"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-flamingo/xwiki-platform-flamingo-skin/xwiki-platform-flamingo-skin-test/xwiki-platform-flamingo-skin-test-docker/src/test/resources/FormTokenInjectionIT/testCode.js",
          "status": "added",
          "additions": 61,
          "deletions": 0,
          "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+require(['xwiki-meta'], function (xm) {\n+  const postURL = xm.restURL + '/comments';\n+  const resultDiv = document.getElementById('results');\n+\n+  async function addComments() {\n+    // Wait after each request as the REST API is not thread-safe (object ids aren't properly incremented and integrity\n+    // constraints are violated, see also https://jira.xwiki.org/browse/XWIKI-13473).\n+    await fetch(postURL, {\n+      method: \"POST\",\n+      body: \"Simple POST\"\n+    }).then(response => resultDiv.textContent += 'Simple POST: ' + response.status);\n+\n+    await fetch(new Request(postURL, {\n+      method: \"POST\",\n+      body: \"Request Body\",\n+      headers: {\"Accept\": \"application/json\"}\n+    })).then(async response => {\n+      resultDiv.textContent += 'Only Request: ' + response.status;\n+      return response.json();\n+    }).then(comment => resultDiv.textContent += comment.text);\n+\n+    await fetch(new Request(postURL), {\n+      method: \"POST\",\n+      body: \"Request with init body\",\n+      headers: {\"Accept\": \"application/json\"}\n+    }).then(response => {\n+      resultDiv.textContent += 'Request with init: ' + response.status;\n+      return response.json();\n+    }).then(comment => resultDiv.textContent += comment.text);\n+\n+    await fetch(postURL, {\n+      method: \"POST\",\n+      body: \"Simple with array headers body\",\n+      headers: [[\"Accept\", \"application/json\"]]\n+    }).then(response => {\n+      resultDiv.textContent += 'Simple with array headers: ' + response.status;\n+      return response.json();\n+    }).then(comment => resultDiv.textContent += comment.text);\n+  }\n+\n+  addComments();\n+});\n\\ No newline at end of file"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-server/src/main/java/org/xwiki/rest/internal/XWikiFilter.java",
          "status": "modified",
          "additions": 59,
          "deletions": 1,
          "patch": "@@ -19,16 +19,25 @@\n  */\n package org.xwiki.rest.internal;\n \n+import java.util.List;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.restlet.Context;\n import org.restlet.Request;\n import org.restlet.Response;\n import org.restlet.data.Header;\n+import org.restlet.data.MediaType;\n+import org.restlet.data.Status;\n import org.restlet.engine.header.HeaderConstants;\n+import org.restlet.ext.servlet.ServletUtils;\n import org.restlet.routing.Filter;\n import org.restlet.util.Series;\n import org.xwiki.component.manager.ComponentLookupException;\n import org.xwiki.component.manager.ComponentManager;\n+import org.xwiki.csrf.CSRFToken;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n \n import com.xpn.xwiki.XWikiContext;\n@@ -42,6 +51,17 @@\n  */\n public class XWikiFilter extends Filter\n {\n+    /**\n+     * Content-types that are allowed in a\n+     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\">simple request</a> that don't\n+     * trigger a CORS preflight request in browsers.\n+     */\n+    private static final List<String> SIMPLE_CONTENT_TYPES = List.of(\n+        \"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"\n+    );\n+\n+    private static final String FORM_TOKEN_HEADER = \"XWiki-Form-Token\";\n+\n     /**\n      * Constructor.\n      * \n@@ -58,6 +78,13 @@ protected int beforeHandle(Request request, Response response)\n         ComponentManager componentManager =\n             (ComponentManager) getContext().getAttributes().get(Constants.XWIKI_COMPONENT_MANAGER);\n         XWikiContext xwikiContext = Utils.getXWikiContext(componentManager);\n+        CSRFToken csrfToken = null;\n+\n+        try {\n+            csrfToken = componentManager.getInstance(CSRFToken.class);\n+        } catch (ComponentLookupException e) {\n+            getLogger().warning(\"Failed to lookup CSRF token validator: \" + ExceptionUtils.getRootCauseMessage(e));\n+        }\n \n         try {\n             EntityReferenceSerializer<String> serializer =\n@@ -75,11 +102,42 @@ protected int beforeHandle(Request request, Response response)\n             }\n             responseHeaders.add(\"XWiki-User\", serializer.serialize(xwikiContext.getUserReference()));\n             responseHeaders.add(\"XWiki-Version\", xwikiContext.getWiki().getVersion());\n+\n+            if (csrfToken != null) {\n+                responseHeaders.add(FORM_TOKEN_HEADER, csrfToken.getToken());\n+            }\n         } catch (ComponentLookupException e) {\n             getLogger()\n                 .warning(\"Failed to lookup the entity reference serializer: \" + ExceptionUtils.getRootCauseMessage(e));\n         }\n \n-        return CONTINUE;\n+        int result = CONTINUE;\n+\n+        HttpServletRequest servletRequest = ServletUtils.getRequest(Request.getCurrent());\n+\n+        // Require a CSRF token for requests that browsers allow through HTML forms and across origins.\n+        // See https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS for more information.\n+        // Compare to the method from the servlet request to avoid the automatic conversion from POST to PUT request.\n+        // Check for a prefix match to make sure it matches regardless of the supplied parameters (like charset).\n+        if (\"POST\".equals(servletRequest.getMethod()) && SIMPLE_CONTENT_TYPES.stream().anyMatch(expectedType ->\n+            StringUtils.startsWith(StringUtils.lowerCase(servletRequest.getContentType()), expectedType)))\n+        {\n+            Series<Header> requestHeaders = request.getHeaders();\n+            String formToken = requestHeaders.getFirstValue(FORM_TOKEN_HEADER);\n+\n+            // Skip the main request handler but allow cleanup if either the CSRF validator failed or the token is\n+            // invalid.\n+            if (csrfToken == null) {\n+                response.setStatus(Status.SERVER_ERROR_INTERNAL);\n+                response.setEntity(\"Failed to lookup the CSRF token validator.\", MediaType.TEXT_PLAIN);\n+                result = SKIP;\n+            } else if (!csrfToken.isTokenValid(formToken)) {\n+                response.setStatus(Status.CLIENT_ERROR_FORBIDDEN);\n+                response.setEntity(\"Invalid or missing form token.\", MediaType.TEXT_PLAIN);\n+                result = SKIP;\n+            }\n+        }\n+\n+        return result;\n     }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-test/xwiki-platform-rest-test-tests/src/test/it/org/xwiki/rest/test/AttachmentsResourceIT.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -319,6 +319,8 @@ public void testPOSTAttachment() throws Exception\n         PostMethod postMethod = new PostMethod(attachmentsUri);\n         MultipartRequestEntity mpre = new MultipartRequestEntity(parts, postMethod.getParams());\n         postMethod.setRequestEntity(mpre);\n+        postMethod.setRequestHeader(\"XWiki-Form-Token\", getFormToken(TestUtils.SUPER_ADMIN_CREDENTIALS.getUserName(),\n+            TestUtils.SUPER_ADMIN_CREDENTIALS.getPassword()));\n         httpClient.executeMethod(postMethod);\n         Assert.assertEquals(getHttpMethodInfo(postMethod), HttpStatus.SC_CREATED, postMethod.getStatusCode());\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-test/xwiki-platform-rest-test-tests/src/test/it/org/xwiki/rest/test/CommentsResourceIT.java",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -128,6 +128,31 @@ public void testPOSTCommentWithTextPlain() throws Exception\n         Assert.assertEquals(numberOfComments + 1, comments.getComments().size());\n     }\n \n+    @Test\n+    public void testPOSTCommentWithTextPlainNoCSRF() throws Exception\n+    {\n+        String commentsUri = buildURI(CommentsResource.class, getWiki(), this.spaces, this.pageName).toString();\n+\n+        GetMethod getMethod = executeGet(commentsUri);\n+        Assert.assertEquals(getHttpMethodInfo(getMethod), HttpStatus.SC_OK, getMethod.getStatusCode());\n+\n+        Comments comments = (Comments) unmarshaller.unmarshal(getMethod.getResponseBodyAsStream());\n+\n+        int numberOfComments = comments.getComments().size();\n+\n+        PostMethod postMethod = executePost(commentsUri, \"Comment\", MediaType.TEXT_PLAIN,\n+            TestUtils.SUPER_ADMIN_CREDENTIALS.getUserName(), TestUtils.SUPER_ADMIN_CREDENTIALS.getPassword(), null);\n+        Assert.assertEquals(getHttpMethodInfo(postMethod), HttpStatus.SC_FORBIDDEN, postMethod.getStatusCode());\n+        Assert.assertEquals(\"Invalid or missing form token.\", postMethod.getResponseBodyAsString());\n+\n+        getMethod = executeGet(commentsUri);\n+        Assert.assertEquals(getHttpMethodInfo(getMethod), HttpStatus.SC_OK, getMethod.getStatusCode());\n+\n+        comments = (Comments) unmarshaller.unmarshal(getMethod.getResponseBodyAsStream());\n+\n+        Assert.assertEquals(numberOfComments, comments.getComments().size());\n+    }\n+\n     @Test\n     public void testGETComment() throws Exception\n     {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-test/xwiki-platform-rest-test-tests/src/test/it/org/xwiki/rest/test/ObjectsResourceIT.java",
          "status": "modified",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -520,6 +520,37 @@ public void testPOSTObjectFormUrlEncoded() throws Exception\n         Assert.assertEquals(TAG_VALUE, getProperty(object, \"tags\").getValue());\n     }\n \n+    @Test\n+    public void testPOSTObjectFormUrlEncodedNoCSRF() throws Exception\n+    {\n+        final String tagValue = \"TAG\";\n+        NameValuePair[] nameValuePairs = new NameValuePair[2];\n+        String className = \"XWiki.TagClass\";\n+        nameValuePairs[0] = new NameValuePair(\"className\", className);\n+        nameValuePairs[1] = new NameValuePair(\"property#tags\", tagValue);\n+\n+        String objectGetURI = buildURI(ObjectsResource.class, getWiki(), this.spaces, this.pageName, className);\n+\n+        // Count objects before to ensure nothing is added on the failed request.\n+        GetMethod getMethod = executeGet(objectGetURI);\n+        Assert.assertEquals(getHttpMethodInfo(getMethod), HttpStatus.SC_OK, getMethod.getStatusCode());\n+        Objects objects = (Objects) unmarshaller.unmarshal(getMethod.getResponseBodyAsStream());\n+        int numObjects = objects.getObjectSummaries().size();\n+\n+        PostMethod postMethod = executePostForm(\n+            buildURI(ObjectsResource.class, getWiki(), this.spaces, this.pageName), nameValuePairs,\n+            TestUtils.SUPER_ADMIN_CREDENTIALS.getUserName(), TestUtils.SUPER_ADMIN_CREDENTIALS.getPassword(), null);\n+        Assert.assertEquals(getHttpMethodInfo(postMethod), HttpStatus.SC_FORBIDDEN, postMethod.getStatusCode());\n+        Assert.assertEquals(\"Invalid or missing form token.\", postMethod.getResponseBodyAsString());\n+\n+        getMethod = executeGet(objectGetURI);\n+        Assert.assertEquals(getHttpMethodInfo(getMethod), HttpStatus.SC_OK, getMethod.getStatusCode());\n+\n+        objects = (Objects) unmarshaller.unmarshal(getMethod.getResponseBodyAsStream());\n+        Assert.assertEquals(numObjects, objects.getObjectSummaries().size());\n+    }\n+\n+\n     @Test\n     public void testPUTPropertyFormUrlEncoded() throws Exception\n     {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-test/xwiki-platform-rest-test-tests/src/test/it/org/xwiki/rest/test/PageResourceIT.java",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -576,6 +576,36 @@ public void testPOSTPageFormUrlEncoded() throws Exception\n         Assert.assertEquals(TITLE, modifiedPage.getTitle());\n     }\n \n+    @Test\n+    public void testPOSTPageFormUrlEncodedNoCSRF() throws Exception\n+    {\n+        final String CONTENT = String.format(\"This is a content (%d)\", System.currentTimeMillis());\n+        final String TITLE = String.format(\"Title (%s)\", UUID.randomUUID().toString());\n+\n+        Page originalPage = getFirstPage();\n+\n+        Link link = getFirstLinkByRelation(originalPage, Relations.SELF);\n+        Assert.assertNotNull(link);\n+\n+        NameValuePair[] nameValuePairs = new NameValuePair[2];\n+        nameValuePairs[0] = new NameValuePair(\"title\", TITLE);\n+        nameValuePairs[1] = new NameValuePair(\"content\", CONTENT);\n+\n+        PostMethod postMethod = executePostForm(String.format(\"%s?method=PUT\", link.getHref()), nameValuePairs,\n+            TestUtils.SUPER_ADMIN_CREDENTIALS.getUserName(), TestUtils.SUPER_ADMIN_CREDENTIALS.getPassword(), null);\n+        Assert.assertEquals(getHttpMethodInfo(postMethod), HttpStatus.SC_FORBIDDEN, postMethod.getStatusCode());\n+        Assert.assertEquals(\"Invalid or missing form token.\", postMethod.getResponseBodyAsString());\n+\n+        // Assert that the page hasn't been modified.\n+        GetMethod getMethod = executeGet(link.getHref());\n+        Assert.assertEquals(getHttpMethodInfo(getMethod), HttpStatus.SC_OK, getMethod.getStatusCode());\n+\n+        Page modifiedPage = (Page) this.unmarshaller.unmarshal(getMethod.getResponseBodyAsStream());\n+\n+        Assert.assertEquals(originalPage.getContent(), modifiedPage.getContent());\n+        Assert.assertEquals(originalPage.getTitle(), modifiedPage.getTitle());\n+    }\n+\n     @Test\n     public void testPUTPageSyntax() throws Exception\n     {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-rest/xwiki-platform-rest-test/xwiki-platform-rest-test-tests/src/test/it/org/xwiki/rest/test/framework/AbstractHttpIT.java",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -281,15 +281,31 @@ protected PostMethod executePost(String uri, InputStream is, String userName, St\n         return postMethod;\n     }\n \n+    protected String getFormToken(String userName, String password) throws Exception\n+    {\n+        GetMethod getMethod = executeGet(getFullUri(WikisResource.class), userName, password);\n+        Assert.assertEquals(getHttpMethodInfo(getMethod), HttpStatus.SC_OK, getMethod.getStatusCode());\n+        return getMethod.getResponseHeader(\"XWiki-Form-Token\").getValue();\n+    }\n+\n     protected PostMethod executePost(String uri, String string, String mediaType, String userName, String password)\n         throws Exception\n+    {\n+        return executePost(uri, string, mediaType, userName, password, getFormToken(userName, password));\n+    }\n+\n+    protected PostMethod executePost(String uri, String string, String mediaType, String userName, String password,\n+        String formToken) throws Exception\n     {\n         HttpClient httpClient = new HttpClient();\n         httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(userName, password));\n         httpClient.getParams().setAuthenticationPreemptive(true);\n \n         PostMethod postMethod = new PostMethod(uri);\n         postMethod.addRequestHeader(\"Accept\", MediaType.APPLICATION_XML.toString());\n+        if (formToken != null) {\n+            postMethod.addRequestHeader(\"XWiki-Form-Token\", formToken);\n+        }\n \n         RequestEntity entity = new StringRequestEntity(string, mediaType, \"UTF-8\");\n         postMethod.setRequestEntity(entity);\n@@ -301,6 +317,12 @@ protected PostMethod executePost(String uri, String string, String mediaType, St\n \n     protected PostMethod executePostForm(String uri, NameValuePair[] nameValuePairs, String userName, String password)\n         throws Exception\n+    {\n+        return executePostForm(uri, nameValuePairs, userName, password, getFormToken(userName, password));\n+    }\n+\n+    protected PostMethod executePostForm(String uri, NameValuePair[] nameValuePairs, String userName, String password,\n+        String formToken) throws Exception\n     {\n         HttpClient httpClient = new HttpClient();\n         httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(userName, password));\n@@ -309,6 +331,9 @@ protected PostMethod executePostForm(String uri, NameValuePair[] nameValuePairs,\n         PostMethod postMethod = new PostMethod(uri);\n         postMethod.addRequestHeader(\"Accept\", MediaType.APPLICATION_XML.toString());\n         postMethod.addRequestHeader(\"Content-type\", MediaType.APPLICATION_WWW_FORM.toString());\n+        if (formToken != null) {\n+            postMethod.addRequestHeader(\"XWiki-Form-Token\", formToken);\n+        }\n \n         postMethod.setRequestBody(nameValuePairs);\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-war/src/main/webapp/resources/js/xwiki/xwiki.js",
          "status": "modified",
          "additions": 35,
          "deletions": 4,
          "patch": "@@ -1882,26 +1882,57 @@ document.observe(\"xwiki:dom:loaded\", function() {\n   };\n \n   /**\n-   * Overwrite the XMLHttpRequest#open() method in order to add our load listener on all requests made from this page.\n+   * Overwrite the XMLHttpRequest#open() method in order to inject the form token and to add our load listener on all\n+   * requests made from this page.\n    */\n   var interceptXMLHttpRequest = function() {\n     var originalOpen = window.XMLHttpRequest.prototype.open;\n     window.XMLHttpRequest.prototype.open = function() {\n       this.addEventListener('load', function() {\n         handleResponseHeaders(this.getResponseHeader.bind(this));\n       });\n-      return originalOpen.apply(this, arguments);\n+      const result = originalOpen.apply(this, arguments);\n+      // Send the form token on same-origin requests only to prevent leaking the token to third-parties.\n+      if (arguments.length >= 2 && window.location.origin === (new URL(arguments[1], window.location.href)).origin) {\n+        // Make sure this is really safe in case this should be called in some unexpected situation.\n+        const formToken = document?.documentElement?.dataset?.xwikiFormToken;\n+        if (formToken) {\n+          this.setRequestHeader(\"XWiki-Form-Token\", formToken);\n+        }\n+      }\n+      return result;\n     };\n   };\n \n   /**\n-   * Overwrite the fetch function in order to add our own response callback on all fetch requests made from this page.\n+   * Overwrite the fetch function in order to inject the form token and add our own response callback on all fetch\n+   * requests made from this page.\n    */\n   var interceptFetch = function() {\n     var originalFetch = window.fetch;\n     if (originalFetch) {\n       window.fetch = function() {\n-        return originalFetch.apply(this, arguments).then(function(response) {\n+        // Inject the form token.\n+        let modifiedArguments = arguments;\n+        // Make sure this is really safe in case this should be called in some unexpected situation.\n+        const formToken = document?.documentElement?.dataset?.xwikiFormToken;\n+        if (formToken) {\n+          let request = null;\n+          // Convert the arguments to a request, as Request expects the same arguments as fetch() but provides\n+          // convenient ways to modify the headers (and fetch accepts a request as parameter).\n+          if (arguments.length === 1 && arguments[0] instanceof Request) {\n+            request = arguments[0];\n+          } else if (arguments.length) {\n+            request = new Request(...arguments);\n+          }\n+          // Only handle expected cases and same-origin requests to prevent leaking the token to third-parties,\n+          // leave the arguments alone otherwise.\n+          if (request !== null && window.location.origin === (new URL(request.url, window.location.href).origin)) {\n+            request.headers.append(\"XWiki-Form-Token\", formToken);\n+            modifiedArguments = [request];\n+          }\n+        }\n+        return originalFetch.apply(this, modifiedArguments).then(function(response) {\n           handleResponseHeaders(response.headers.get.bind(response.headers));\n           return response;\n         });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 8,
        "unique_directories": 6,
        "max_directory_depth": 13
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-352",
    "description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. The REST API allows executing all actions via POST requests and accepts `text/plain`, `multipart/form-data` or `application/www-form-urlencoded` as content types which can be sent via regular HTML forms, thus allowing cross-site request forgery. With the interaction of a user with programming rights, this allows remote code execution through script macros and thus impacts the integrity, availability and confidentiality of the whole XWiki installation. For regular cookie-based authentication, the vulnerability is mitigated by SameSite cookie restrictions but as of March 2023, these are not enabled by default in Firefox and Safari. The vulnerability has been patched in XWiki 14.10.8 and 15.2 by requiring a CSRF token header for certain request types that are susceptible to CSRF attacks.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-10T17:15:09.313",
    "last_modified": "2024-11-21T08:11:22.723",
    "fix_date": "2023-03-15T17:03:37Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/4c175405faa0e62437df397811c7526dfc0fbae7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-6xxr-648m-gch6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20135",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/4c175405faa0e62437df397811c7526dfc0fbae7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-6xxr-648m-gch6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20135",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.907730",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}