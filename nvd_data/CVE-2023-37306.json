{
  "cve_id": "CVE-2023-37306",
  "github_data": {
    "repository": "MISP/MISP",
    "fix_commit": "f125630c1c2d0f5d11079d3653ab7bb2ab5cd908",
    "related_commits": [
      "f125630c1c2d0f5d11079d3653ab7bb2ab5cd908",
      "f125630c1c2d0f5d11079d3653ab7bb2ab5cd908"
    ],
    "patch_url": "https://github.com/MISP/MISP/commit/f125630c1c2d0f5d11079d3653ab7bb2ab5cd908.patch",
    "fix_commit_details": {
      "sha": "f125630c1c2d0f5d11079d3653ab7bb2ab5cd908",
      "commit_date": "2023-06-28T07:26:15Z",
      "author": {
        "login": "righel",
        "type": "User",
        "stats": {
          "total_commits": 448,
          "average_weekly_commits": 0.6521106259097526,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 94
        }
      },
      "commit_message": {
        "title": "fix: properly handle different cert file extensions in server sync. #9084",
        "length": 73,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 43,
        "additions": 34,
        "deletions": 9
      },
      "files": [
        {
          "filename": "app/Controller/ServersController.php",
          "status": "modified",
          "additions": 29,
          "deletions": 7,
          "patch": "@@ -915,30 +915,52 @@ private function __saveCert($server, $id, $client = false, $delete = false)\n             App::uses('File', 'Utility');\n             App::uses('Folder', 'Utility');\n             App::uses('FileAccessTool', 'Tools');\n+            App::uses('SyncTool', 'Tools');\n             if (isset($server['Server'][$subm]['name'])) {\n                 if ($this->request->data['Server'][$subm]['size'] != 0) {\n                     if (!$this->Server->checkFilename($server['Server'][$subm]['name'])) {\n                         throw new Exception(__('Filename not allowed'));\n                     }\n-                    $file = new File($server['Server'][$subm]['name']);\n-                    $ext = $file->ext();\n+\n+                    if (!is_uploaded_file($server['Server'][$subm]['tmp_name'])) {\n+                        throw new Exception(__('File not uploaded correctly'));\n+                    }\n+\n+                    $ext = pathinfo($server['Server'][$subm]['name'], PATHINFO_EXTENSION);\n+                    if (!in_array($ext, SyncTool::ALLOWED_CERT_FILE_EXTENSIONS)) {\n+                        $this->Flash->error(__('Invalid extension.'));\n+                        $this->redirect(array('action' => 'index'));\n+                    }\n+\n                     if (!$server['Server'][$subm]['size'] > 0) {\n                         $this->Flash->error(__('Incorrect extension or empty file.'));\n                         $this->redirect(array('action' => 'index'));\n                     }\n \n-                    // read pem file data\n-                    $pemData = FileAccessTool::readFromFile($server['Server'][$subm]['tmp_name'], $server['Server'][$subm]['size']);\n+                    // read certificate file data\n+                    $certData = FileAccessTool::readFromFile($server['Server'][$subm]['tmp_name'], $server['Server'][$subm]['size']);\n                 } else {\n                     return true;\n                 }\n             } else {\n-                $pemData = base64_decode($server['Server'][$subm]);\n+                $ext = 'pem';\n+                $certData = base64_decode($server['Server'][$subm]);\n             }\n+\n+            // check if the file is a valid x509 certificate\n+            try {\n+                $cert = openssl_x509_parse($certData);\n+                if (!$cert) {\n+                    throw new Exception(__('Invalid certificate.'));\n+                }\n+            } catch (Exception $e) {\n+                $this->Flash->error(__('Invalid certificate.'));\n+                $this->redirect(array('action' => 'index'));\n+            }\n+\n             $destpath = APP . \"files\" . DS . \"certs\" . DS;\n-            $dir = new Folder(APP . \"files\" . DS . \"certs\", true);\n             $pemfile = new File($destpath . $id . $ins . '.' . $ext);\n-            $result = $pemfile->write($pemData);\n+            $result = $pemfile->write($certData);\n             $s = $this->Server->read(null, $id);\n             $s['Server'][$attr] = $s['Server']['id'] . $ins . '.' . $ext;\n             if ($result) {"
        },
        {
          "filename": "app/Lib/Tools/SyncTool.php",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -2,6 +2,9 @@\n \n class SyncTool\n {\n+\n+    const ALLOWED_CERT_FILE_EXTENSIONS = ['pem', 'crt'];\n+\n     /**\n      * Take a server as parameter and return a HttpSocket object using the ssl options defined in the server settings\n      * @param array|null $server\n@@ -15,10 +18,10 @@ public function setupHttpSocket($server = null, $timeout = false, $model = 'Serv\n         $params = ['compress' => true];\n         if (!empty($server)) {\n             if (!empty($server[$model]['cert_file'])) {\n-                $params['ssl_cafile'] = APP . \"files\" . DS . \"certs\" . DS . $server[$model]['id'] . '.pem';\n+                $params['ssl_cafile'] = APP . \"files\" . DS . \"certs\" . DS . $server[$model]['cert_file'];\n             }\n             if (!empty($server[$model]['client_cert_file'])) {\n-                $params['ssl_local_cert'] = APP . \"files\" . DS . \"certs\" . DS . $server[$model]['id'] . '_client.pem';\n+                $params['ssl_local_cert'] = APP . \"files\" . DS . \"certs\" . DS . $server[$model]['client_cert_file'];\n             }\n             if (!empty($server[$model]['self_signed'])) {\n                 $params['ssl_allow_self_signed'] = true;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1da14f0253b2d853603bfb10e0c2b92aa27ecb6a",
            "date": "2025-01-13T07:57:22Z",
            "author_login": "iglocska"
          },
          {
            "sha": "439433b405ca829f33bf886e788be84c0870b6dc",
            "date": "2025-01-10T16:37:30Z",
            "author_login": "rubentroncon"
          },
          {
            "sha": "cd6d87caa2db4b6bbe65d7cdc2bd8d84bc7f0705",
            "date": "2025-01-10T13:37:21Z",
            "author_login": "chrisr3d"
          },
          {
            "sha": "9fd8c3f8d8ba83c31614b8f0614e50be4284147f",
            "date": "2025-01-10T09:35:18Z",
            "author_login": "chrisr3d"
          },
          {
            "sha": "7c23b9d94726723a38cfd48e5f6b2555f75c05fb",
            "date": "2025-01-10T09:43:37Z",
            "author_login": "chrisr3d"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-209",
    "description": "MISP 2.4.172 mishandles different certificate file extensions in server sync. An attacker can obtain sensitive information because of the nature of the error messages.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-06-30T17:15:09.757",
    "last_modified": "2024-11-21T08:11:27.000",
    "fix_date": "2023-06-28T07:26:15Z"
  },
  "references": [
    {
      "url": "https://github.com/MISP/MISP/commit/f125630c1c2d0f5d11079d3653ab7bb2ab5cd908",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.synacktiv.com/publications/php-filter-chains-file-read-from-error-based-oracle",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/MISP/MISP/commit/f125630c1c2d0f5d11079d3653ab7bb2ab5cd908",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.synacktiv.com/publications/php-filter-chains-file-read-from-error-based-oracle",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:01.881696",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "MISP",
    "owner": "MISP",
    "created_at": "2013-02-07T17:10:34Z",
    "updated_at": "2025-01-14T10:15:41Z",
    "pushed_at": "2025-01-13T08:23:44Z",
    "size": 158555,
    "stars": 5471,
    "forks": 1421,
    "open_issues": 2637,
    "watchers": 5471,
    "has_security_policy": false,
    "default_branch": "2.5",
    "protected_branches": [
      "2.4",
      "3.x"
    ],
    "languages": {
      "PHP": 9033432,
      "JavaScript": 1901843,
      "Python": 401628,
      "CSS": 156405,
      "Shell": 105142,
      "Perl": 6169,
      "Makefile": 759
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 231
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:59:29.252533"
  }
}