{
  "cve_id": "CVE-2023-37460",
  "github_data": {
    "repository": "codehaus-plexus/plexus-archiver",
    "fix_commit": "54759839fbdf85caf8442076f001d5fd64e0dcb2",
    "related_commits": [
      "54759839fbdf85caf8442076f001d5fd64e0dcb2",
      "54759839fbdf85caf8442076f001d5fd64e0dcb2"
    ],
    "patch_url": "https://github.com/codehaus-plexus/plexus-archiver/commit/54759839fbdf85caf8442076f001d5fd64e0dcb2.patch",
    "fix_commit_details": {
      "sha": "54759839fbdf85caf8442076f001d5fd64e0dcb2",
      "commit_date": "2023-07-10T07:59:52Z",
      "author": {
        "login": "uriyay-jfrog",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Avoid override target symlink by standard file in AbstractUnArchiver",
        "length": 68,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 34,
        "deletions": 5
      },
      "files": [
        {
          "filename": "src/main/java/org/codehaus/plexus/archiver/AbstractUnArchiver.java",
          "status": "modified",
          "additions": 8,
          "deletions": 5,
          "patch": "@@ -20,7 +20,6 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.ArrayList;\n@@ -35,11 +34,12 @@\n import org.codehaus.plexus.components.io.fileselectors.FileSelector;\n import org.codehaus.plexus.components.io.resources.PlexusIoResource;\n import org.codehaus.plexus.util.FileUtils;\n-import org.codehaus.plexus.util.IOUtil;\n import org.codehaus.plexus.util.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+\n // TODO there should really be constructors which take the source file.\n \n /**\n@@ -301,6 +301,11 @@ protected void extractFile(\n             throw new ArchiverException(\"Entry is outside of the target directory (\" + entryName + \")\");\n         }\n \n+        // don't allow override target symlink by standard file\n+        if (StringUtils.isEmpty(symlinkDestination) && Files.isSymbolicLink(canonicalDestPath)) {\n+            throw new ArchiverException(\"Entry is outside of the target directory (\" + entryName + \")\");\n+        }\n+\n         try {\n             if (!shouldExtractEntry(dir, targetFileName, entryName, entryDate)) {\n                 return;\n@@ -317,9 +322,7 @@ protected void extractFile(\n             } else if (isDirectory) {\n                 targetFileName.mkdirs();\n             } else {\n-                try (OutputStream out = Files.newOutputStream(targetFileName.toPath())) {\n-                    IOUtil.copy(compressedInputStream, out);\n-                }\n+                Files.copy(compressedInputStream, targetFileName.toPath(), REPLACE_EXISTING);\n             }\n \n             targetFileName.setLastModified(entryDate.getTime());"
        },
        {
          "filename": "src/test/java/org/codehaus/plexus/archiver/SymlinkTest.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -62,6 +62,8 @@ void testSymlinkTar() throws Exception {\n         unarchiver.setSourceFile(archiveFile);\n         unarchiver.setDestFile(output);\n         unarchiver.extract();\n+        // second unpacking should also work\n+        unarchiver.extract();\n     }\n \n     @Test\n@@ -81,6 +83,8 @@ void testSymlinkZip() throws Exception {\n         unarchiver.setSourceFile(archiveFile);\n         unarchiver.setDestFile(output);\n         unarchiver.extract();\n+        // second unpacking should also work\n+        unarchiver.extract();\n     }\n \n     @Test"
        },
        {
          "filename": "src/test/java/org/codehaus/plexus/archiver/zip/ZipArchiverTest.java",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -85,6 +85,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n@@ -809,6 +810,17 @@ void testFixedEntryModificationTime() throws IOException {\n         }\n     }\n \n+    @Test\n+    @DisabledOnOs(OS.WINDOWS)\n+    void testNonExistingSymlink() throws Exception {\n+        File zipFile = new File(\"src/test/resources/symlinks/non_existing_symlink.zip\");\n+        ZipUnArchiver unArchiver = getZipUnArchiver(zipFile);\n+        String tmpdir = Files.createTempDirectory(\"tmpe_extract\").toFile().getAbsolutePath();\n+        unArchiver.setDestDirectory(new File(tmpdir));\n+        ArchiverException exception = assertThrows(ArchiverException.class, unArchiver::extract);\n+        assertEquals(\"Entry is outside of the target directory (entry1)\", exception.getMessage());\n+    }\n+\n     /**\n      * Takes a timestamp, turns it into a textual representation based on GMT, then translated it into a timestamp in\n      * local timezone. This makes the test independent of the current TimeZone. The reason this is necessary is:"
        },
        {
          "filename": "src/test/resources/symlinks/non_existing_symlink.zip",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "src/test/resources/symlinks/regen.sh",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -4,3 +4,13 @@ cd src\n zip --symlinks ../symlinks.zip file* targetDir sym*\n tar -cvf ../symlinks.tar file* targetDir sym*\n \n+cd ..\n+rm non_existing_symlink.zip\n+mkdir non_existing_symlink\n+cd non_existing_symlink\n+ln -s /tmp/target entry1\n+echo -ne 'content' > entry2\n+zip  --symlinks ../non_existing_symlink.zip entry1 entry2\n+cd ..\n+rm -rf non_existing_symlink\n+LC_ALL=C sed  -i '' 's/entry2/entry1/' non_existing_symlink.zip\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 4,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "accef5b9c22ea09068f16767bf7c281ba5cd5cc9",
            "date": "2025-01-06T23:30:13Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c0ee2bf4d26e77d0b871b9848c1d2c948877de01",
            "date": "2025-01-02T20:41:37Z",
            "author_login": "gnodet"
          },
          {
            "sha": "cecc6e7f5426b7c48f2ddbc8f90934bedf932bb8",
            "date": "2025-01-01T23:05:10Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6a1785d39810dfbbf6d419974c87440919e8010c",
            "date": "2025-01-01T23:05:03Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "96100cd672de043f25653757bf5a745d92136ab5",
            "date": "2024-12-19T23:21:55Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-22",
    "description": "Plexis Archiver is a collection of Plexus components to create archives or extract archives to a directory with a unified `Archiver`/`UnArchiver` API. Prior to version 4.8.0, using AbstractUnArchiver for extracting an archive might lead to an arbitrary file creation and possibly remote code execution. When extracting an archive with an entry that already exists in the destination directory as a symbolic link whose target does not exist - the `resolveFile()` function will return the symlink's source instead of its target, which will pass the verification that ensures the file will not be extracted outside of the destination directory. Later `Files.newOutputStream()`, that follows symlinks by default,  will actually write the entry's content to the symlink's target. Whoever uses plexus archiver to extract an untrusted archive is vulnerable to an arbitrary file creation and possibly remote code execution. Version 4.8.0 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-25T20:15:13.703",
    "last_modified": "2024-11-21T08:11:45.130",
    "fix_date": "2023-07-10T07:59:52Z"
  },
  "references": [
    {
      "url": "https://github.com/codehaus-plexus/plexus-archiver/commit/54759839fbdf85caf8442076f001d5fd64e0dcb2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/codehaus-plexus/plexus-archiver/releases/tag/plexus-archiver-4.8.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/codehaus-plexus/plexus-archiver/security/advisories/GHSA-wh3p-fphp-9h2m",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/codehaus-plexus/plexus-archiver/commit/54759839fbdf85caf8442076f001d5fd64e0dcb2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/codehaus-plexus/plexus-archiver/releases/tag/plexus-archiver-4.8.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/codehaus-plexus/plexus-archiver/security/advisories/GHSA-wh3p-fphp-9h2m",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.271665",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "plexus-archiver",
    "owner": "codehaus-plexus",
    "created_at": "2015-01-27T16:28:31Z",
    "updated_at": "2025-01-07T17:48:38Z",
    "pushed_at": "2025-01-07T17:48:36Z",
    "size": 18115,
    "stars": 45,
    "forks": 48,
    "open_issues": 14,
    "watchers": 45,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 732814,
      "Shell": 431,
      "HTML": 20
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:22:33.005123"
  }
}