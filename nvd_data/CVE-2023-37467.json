{
  "cve_id": "CVE-2023-37467",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "0976c8fad6970b6182e7837bf87de07709407f25",
    "related_commits": [
      "0976c8fad6970b6182e7837bf87de07709407f25",
      "0976c8fad6970b6182e7837bf87de07709407f25"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/0976c8fad6970b6182e7837bf87de07709407f25.patch",
    "fix_commit_details": {
      "sha": "0976c8fad6970b6182e7837bf87de07709407f25",
      "commit_date": "2023-07-28T11:53:44Z",
      "author": {
        "login": "OsamaSayegh",
        "type": "User",
        "stats": {
          "total_commits": 536,
          "average_weekly_commits": 0.7734487734487735,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 209
        }
      },
      "commit_message": {
        "title": "SECURITY: Don't reuse CSP nonce between anonymous requests",
        "length": 58,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 127,
        "additions": 105,
        "deletions": 22
      },
      "files": [
        {
          "filename": "app/helpers/application_helper.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -64,8 +64,10 @@ def google_tag_manager_json\n     google_universal_analytics_json\n   end\n \n-  def self.google_tag_manager_nonce(env)\n-    env[:discourse_content_security_policy_nonce] ||= SecureRandom.hex\n+  def google_tag_manager_nonce_placeholder\n+    placeholder = \"[[csp_nonce_placeholder_#{SecureRandom.hex}]]\"\n+    response.headers[\"Discourse-GTM-Nonce-Placeholder\"] = placeholder\n+    placeholder\n   end\n \n   def shared_session_key"
        },
        {
          "filename": "app/views/common/_google_tag_manager_head.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n <meta id=\"data-google-tag-manager\"\n   data-data-layer=\"<%= google_tag_manager_json %>\"\n-  data-nonce=\"<%= ApplicationHelper.google_tag_manager_nonce(request.env) %>\"\n+  data-nonce=\"<%= google_tag_manager_nonce_placeholder %>\"\n   data-container-id=\"<%= SiteSetting.gtm_container_id %>\" />\n \n <%= preload_script 'google-tag-manager' %>"
        },
        {
          "filename": "config/application.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -167,6 +167,9 @@ def config.database_configuration\n     config.middleware.swap ActionDispatch::ContentSecurityPolicy::Middleware,\n                            ContentSecurityPolicy::Middleware\n \n+    require \"middleware/gtm_script_nonce_injector\"\n+    config.middleware.insert_after(ActionDispatch::Flash, Middleware::GtmScriptNonceInjector)\n+\n     require \"middleware/discourse_public_exceptions\"\n     config.exceptions_app = Middleware::DiscoursePublicExceptions.new(Rails.public_path)\n "
        },
        {
          "filename": "config/initializers/099-anon-cache.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -6,10 +6,11 @@\n   if Rails.configuration.respond_to?(:enable_anon_caching)\n     Rails.configuration.enable_anon_caching\n   else\n-    Rails.env.production?\n+    Rails.env.production? || Rails.env.test?\n   end\n \n if !ENV[\"DISCOURSE_DISABLE_ANON_CACHE\"] && enabled\n   # in an ideal world this is position 0, but mobile detection uses ... session and request and params\n-  Rails.configuration.middleware.insert_after ActionDispatch::Flash, Middleware::AnonymousCache\n+  Rails.configuration.middleware.insert_after Middleware::GtmScriptNonceInjector,\n+                                              Middleware::AnonymousCache\n end"
        },
        {
          "filename": "lib/content_security_policy.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -4,13 +4,13 @@\n \n class ContentSecurityPolicy\n   class << self\n-    def policy(theme_id = nil, env: {}, base_url: Discourse.base_url, path_info: \"/\")\n-      new.build(theme_id, env: env, base_url: base_url, path_info: path_info)\n+    def policy(theme_id = nil, base_url: Discourse.base_url, path_info: \"/\")\n+      new.build(theme_id, base_url: base_url, path_info: path_info)\n     end\n   end\n \n-  def build(theme_id, env: {}, base_url:, path_info: \"/\")\n-    builder = Builder.new(base_url: base_url, env: env)\n+  def build(theme_id, base_url:, path_info: \"/\")\n+    builder = Builder.new(base_url: base_url)\n \n     Extension.theme_extensions(theme_id).each { |extension| builder << extension }\n     Extension.plugin_extensions.each { |extension| builder << extension }"
        },
        {
          "filename": "lib/content_security_policy/builder.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -25,8 +25,8 @@ class Builder\n       style_src\n     ].freeze\n \n-    def initialize(base_url:, env: {})\n-      @directives = Default.new(base_url: base_url, env: env).directives\n+    def initialize(base_url:)\n+      @directives = Default.new(base_url: base_url).directives\n       @base_url = base_url\n     end\n "
        },
        {
          "filename": "lib/content_security_policy/default.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -5,9 +5,8 @@ class ContentSecurityPolicy\n   class Default\n     attr_reader :directives\n \n-    def initialize(base_url:, env: {})\n+    def initialize(base_url:)\n       @base_url = base_url\n-      @env = env\n       @directives =\n         {}.tap do |directives|\n           directives[:upgrade_insecure_requests] = [] if SiteSetting.force_https\n@@ -86,7 +85,6 @@ def script_src\n         end\n         if SiteSetting.gtm_container_id.present?\n           sources << \"https://www.googletagmanager.com/gtm.js\"\n-          sources << \"'nonce-#{ApplicationHelper.google_tag_manager_nonce(@env)}'\"\n         end\n \n         sources << \"'#{SplashScreenHelper.fingerprint}'\" if SiteSetting.splash_screen"
        },
        {
          "filename": "lib/content_security_policy/middleware.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -21,13 +21,11 @@ def call(env)\n \n       headers[\"Content-Security-Policy\"] = policy(\n         theme_id,\n-        env: env,\n         base_url: base_url,\n         path_info: env[\"PATH_INFO\"],\n       ) if SiteSetting.content_security_policy\n       headers[\"Content-Security-Policy-Report-Only\"] = policy(\n         theme_id,\n-        env: env,\n         base_url: base_url,\n         path_info: env[\"PATH_INFO\"],\n       ) if SiteSetting.content_security_policy_report_only"
        },
        {
          "filename": "lib/middleware/anonymous_cache.rb",
          "status": "modified",
          "additions": 21,
          "deletions": 1,
          "patch": "@@ -43,6 +43,21 @@ def self.anon_cache(env, duration)\n       env[\"ANON_CACHE_DURATION\"] = duration\n     end\n \n+    def self.clear_all_cache!\n+      if Rails.env.production?\n+        raise \"for perf reasons, clear_all_cache! cannot be used in production.\"\n+      end\n+      Discourse.redis.keys(\"ANON_CACHE_*\").each { |k| Discourse.redis.del(k) }\n+    end\n+\n+    def self.disable_anon_cache\n+      @@disabled = true\n+    end\n+\n+    def self.enable_anon_cache\n+      @@disabled = false\n+    end\n+\n     # This gives us an API to insert anonymous cache segments\n     class Helper\n       RACK_SESSION = \"rack.session\"\n@@ -232,7 +247,10 @@ def should_force_anonymous?\n       end\n \n       def cacheable?\n-        !!(!has_auth_cookie? && get? && no_cache_bypass)\n+        !!(\n+          GlobalSetting.anon_cache_store_threshold > 0 && !has_auth_cookie? && get? &&\n+            no_cache_bypass\n+        )\n       end\n \n       def compress(val)\n@@ -326,6 +344,8 @@ def initialize(app, settings = {})\n     PAYLOAD_INVALID_REQUEST_METHODS = %w[GET HEAD]\n \n     def call(env)\n+      return @app.call(env) if defined?(@@disabled) && @@disabled\n+\n       if PAYLOAD_INVALID_REQUEST_METHODS.include?(env[Rack::REQUEST_METHOD]) &&\n            env[Rack::RACK_INPUT].size > 0\n         return 413, { \"Cache-Control\" => \"private, max-age=0, must-revalidate\" }, []"
        },
        {
          "filename": "lib/middleware/gtm_script_nonce_injector.rb",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+# frozen_string_literal: true\n+\n+module Middleware\n+  class GtmScriptNonceInjector\n+    def initialize(app, settings = {})\n+      @app = app\n+    end\n+\n+    def call(env)\n+      status, headers, response = @app.call(env)\n+\n+      if nonce_placeholder = headers.delete(\"Discourse-GTM-Nonce-Placeholder\")\n+        nonce = SecureRandom.hex\n+        parts = []\n+        response.each { |part| parts << part.to_s.sub(nonce_placeholder, nonce) }\n+        %w[Content-Security-Policy Content-Security-Policy-Report-Only].each do |name|\n+          next if headers[name].blank?\n+          headers[name] = headers[name].sub(\"script-src \", \"script-src 'nonce-#{nonce}' \")\n+        end\n+        [status, headers, parts]\n+      else\n+        [status, headers, response]\n+      end\n+    end\n+  end\n+end"
        },
        {
          "filename": "spec/lib/content_security_policy_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -106,7 +106,9 @@\n \n       script_srcs = parse(policy)[\"script-src\"]\n       expect(script_srcs).to include(\"https://www.googletagmanager.com/gtm.js\")\n-      expect(script_srcs.to_s).to include(\"nonce-\")\n+      # nonce is added by the GtmScriptNonceInjector middleware to prevent the\n+      # nonce from getting cached by AnonymousCache\n+      expect(script_srcs.to_s).not_to include(\"nonce-\")\n     end\n \n     it \"allowlists CDN assets when integrated\" do"
        },
        {
          "filename": "spec/lib/middleware/anonymous_cache_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -3,6 +3,8 @@\n RSpec.describe Middleware::AnonymousCache do\n   let(:middleware) { Middleware::AnonymousCache.new(lambda { |_| [200, {}, []] }) }\n \n+  before { Middleware::AnonymousCache.enable_anon_cache }\n+\n   def env(opts = {})\n     create_request_env(path: opts.delete(:path) || \"http://test.com/path?bla=1\").merge(opts)\n   end"
        },
        {
          "filename": "spec/lib/middleware/request_tracker_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -677,6 +677,8 @@ def app(result, sql_calls: 0, redis_calls: 0)\n     after { Middleware::RequestTracker.unregister_detailed_request_logger(logger) }\n \n     it \"can report data from anon cache\" do\n+      Middleware::AnonymousCache.enable_anon_cache\n+\n       cache = Middleware::AnonymousCache.new(app([200, {}, [\"i am a thing\"]]))\n       tracker = Middleware::RequestTracker.new(cache)\n "
        },
        {
          "filename": "spec/rails_helper.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -149,6 +149,8 @@ def self.test_setup(x = nil)\n     BadgeGranter.disable_queue\n \n     OmniAuth.config.test_mode = false\n+\n+    Middleware::AnonymousCache.disable_anon_cache\n   end\n end\n "
        },
        {
          "filename": "spec/requests/application_controller_spec.rb",
          "status": "modified",
          "additions": 31,
          "deletions": 4,
          "patch": "@@ -637,36 +637,63 @@\n \n     it \"when GTM is enabled it adds the same nonce to the policy and the GTM tag\" do\n       SiteSetting.content_security_policy = true\n+      SiteSetting.content_security_policy_report_only = true\n       SiteSetting.gtm_container_id = \"GTM-ABCDEF\"\n \n       get \"/latest\"\n \n-      expect(response.headers).to include(\"Content-Security-Policy\")\n       script_src = parse(response.headers[\"Content-Security-Policy\"])[\"script-src\"]\n+      report_only_script_src =\n+        parse(response.headers[\"Content-Security-Policy-Report-Only\"])[\"script-src\"]\n+\n       nonce = extract_nonce_from_script_src(script_src)\n+      report_only_nonce = extract_nonce_from_script_src(report_only_script_src)\n+\n+      expect(nonce).to eq(report_only_nonce)\n \n       gtm_meta_tag = Nokogiri::HTML5.fragment(response.body).css(\"#data-google-tag-manager\").first\n       expect(gtm_meta_tag[\"data-nonce\"]).to eq(nonce)\n     end\n \n-    it \"doesn't reuse CSP nonces between requests\" do\n+    it \"doesn't reuse nonces between requests\" do\n+      global_setting :anon_cache_store_threshold, 1\n+      Middleware::AnonymousCache.enable_anon_cache\n+      Middleware::AnonymousCache.clear_all_cache!\n+\n       SiteSetting.content_security_policy = true\n+      SiteSetting.content_security_policy_report_only = true\n       SiteSetting.gtm_container_id = \"GTM-ABCDEF\"\n \n       get \"/latest\"\n \n-      expect(response.headers).to include(\"Content-Security-Policy\")\n+      expect(response.headers[\"X-Discourse-Cached\"]).to eq(\"store\")\n+      expect(response.headers).not_to include(\"Discourse-GTM-Nonce-Placeholder\")\n+\n       script_src = parse(response.headers[\"Content-Security-Policy\"])[\"script-src\"]\n+      report_only_script_src =\n+        parse(response.headers[\"Content-Security-Policy-Report-Only\"])[\"script-src\"]\n+\n       first_nonce = extract_nonce_from_script_src(script_src)\n+      first_report_only_nonce = extract_nonce_from_script_src(report_only_script_src)\n+\n+      expect(first_nonce).to eq(first_report_only_nonce)\n \n       gtm_meta_tag = Nokogiri::HTML5.fragment(response.body).css(\"#data-google-tag-manager\").first\n       expect(gtm_meta_tag[\"data-nonce\"]).to eq(first_nonce)\n \n       get \"/latest\"\n \n-      expect(response.headers).to include(\"Content-Security-Policy\")\n+      expect(response.headers[\"X-Discourse-Cached\"]).to eq(\"true\")\n+      expect(response.headers).not_to include(\"Discourse-GTM-Nonce-Placeholder\")\n+\n       script_src = parse(response.headers[\"Content-Security-Policy\"])[\"script-src\"]\n+      report_only_script_src =\n+        parse(response.headers[\"Content-Security-Policy-Report-Only\"])[\"script-src\"]\n+\n       second_nonce = extract_nonce_from_script_src(script_src)\n+      second_report_only_nonce = extract_nonce_from_script_src(report_only_script_src)\n+\n+      expect(second_nonce).to eq(second_report_only_nonce)\n \n       expect(first_nonce).not_to eq(second_nonce)\n       gtm_meta_tag = Nokogiri::HTML5.fragment(response.body).css(\"#data-google-tag-manager\").first"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 11,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "496a739788d58a7f1c6bd59643d062ae37e982a0",
            "date": "2025-01-14T15:19:49Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "a89086f7996f95024827df61fb0d86a516b269f6",
            "date": "2025-01-14T15:19:19Z",
            "author_login": "markvanlan"
          },
          {
            "sha": "473e37e7b3dcb254548a04695fb5e5f56a6de33b",
            "date": "2025-01-14T14:32:50Z",
            "author_login": "CvX"
          },
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-323",
    "description": "Discourse is an open source discussion platform. Prior to version 3.1.0.beta7 of the `beta` and `tests-passed` branches, a CSP (Content Security Policy) nonce reuse vulnerability was discovered could allow cross-site scripting (XSS) attacks to bypass CSP protection for anonymous (i.e. unauthenticated) users. There are no known XSS vectors at the moment, but should one be discovered, this vulnerability would allow the XSS attack to bypass CSP and execute successfully. This vulnerability isn't applicable to logged-in users. Version 3.1.0.beta7 contains a patch. The stable branch doesn't have this vulnerability. A workaround to prevent the vulnerability is to disable Google Tag Manager, i.e., unset the `gtm container id` setting.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-28T15:15:10.960",
    "last_modified": "2024-11-21T08:11:46.107",
    "fix_date": "2023-07-28T11:53:44Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/0976c8fad6970b6182e7837bf87de07709407f25",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-gr5h-hm62-jr3j",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/0976c8fad6970b6182e7837bf87de07709407f25",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-gr5h-hm62-jr3j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.280783",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}