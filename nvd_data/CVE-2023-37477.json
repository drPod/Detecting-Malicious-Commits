{
  "cve_id": "CVE-2023-37477",
  "github_data": {
    "repository": "1Panel-dev/1Panel",
    "fix_commit": "e17b80cff4975ee343568ff526b62319f499005d",
    "related_commits": [
      "e17b80cff4975ee343568ff526b62319f499005d",
      "e17b80cff4975ee343568ff526b62319f499005d"
    ],
    "patch_url": "https://github.com/1Panel-dev/1Panel/commit/e17b80cff4975ee343568ff526b62319f499005d.patch",
    "fix_commit_details": {
      "sha": "e17b80cff4975ee343568ff526b62319f499005d",
      "commit_date": "2023-07-17T08:34:29Z",
      "author": {
        "login": "ssongliu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: \u89e3\u51b3\u90e8\u5206\u63a5\u53e3\u547d\u4ee4\u6ce8\u5165\u95ee\u9898 (#1690)",
        "length": 25,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 65,
        "additions": 58,
        "deletions": 7
      },
      "files": [
        {
          "filename": "backend/app/service/container.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -18,6 +18,7 @@ import (\n \t\"github.com/1Panel-dev/1Panel/backend/buserr\"\n \t\"github.com/1Panel-dev/1Panel/backend/constant\"\n \t\"github.com/1Panel-dev/1Panel/backend/global\"\n+\t\"github.com/1Panel-dev/1Panel/backend/utils/cmd\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/common\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/docker\"\n \t\"github.com/docker/docker/api/types\"\n@@ -552,6 +553,9 @@ func (u *ContainerService) ContainerLogClean(req dto.OperationWithName) error {\n }\n \n func (u *ContainerService) ContainerLogs(wsConn *websocket.Conn, container, since, tail string, follow bool) error {\n+\tif cmd.CheckIllegal(container, since, tail) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n \tcommand := fmt.Sprintf(\"docker logs %s\", container)\n \tif tail != \"0\" {\n \t\tcommand += \" -n \" + tail"
        },
        {
          "filename": "backend/app/service/container_compose.go",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -14,8 +14,10 @@ import (\n \n \t\"github.com/1Panel-dev/1Panel/backend/app/dto\"\n \t\"github.com/1Panel-dev/1Panel/backend/app/model\"\n+\t\"github.com/1Panel-dev/1Panel/backend/buserr\"\n \t\"github.com/1Panel-dev/1Panel/backend/constant\"\n \t\"github.com/1Panel-dev/1Panel/backend/global\"\n+\t\"github.com/1Panel-dev/1Panel/backend/utils/cmd\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/compose\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/docker\"\n \t\"github.com/docker/docker/api/types\"\n@@ -127,6 +129,9 @@ func (u *ContainerService) PageCompose(req dto.SearchWithPage) (int64, interface\n }\n \n func (u *ContainerService) TestCompose(req dto.ComposeCreate) (bool, error) {\n+\tif cmd.CheckIllegal(req.Path) {\n+\t\treturn false, buserr.New(constant.ErrCmdIllegal)\n+\t}\n \tcomposeItem, _ := composeRepo.GetRecord(commonRepo.WithByName(req.Name))\n \tif composeItem.ID != 0 {\n \t\treturn false, constant.ErrRecordExist\n@@ -143,6 +148,9 @@ func (u *ContainerService) TestCompose(req dto.ComposeCreate) (bool, error) {\n }\n \n func (u *ContainerService) CreateCompose(req dto.ComposeCreate) (string, error) {\n+\tif cmd.CheckIllegal(req.Name, req.Path) {\n+\t\treturn \"\", buserr.New(constant.ErrCmdIllegal)\n+\t}\n \tif err := u.loadPath(&req); err != nil {\n \t\treturn \"\", err\n \t}\n@@ -177,6 +185,9 @@ func (u *ContainerService) CreateCompose(req dto.ComposeCreate) (string, error)\n }\n \n func (u *ContainerService) ComposeOperation(req dto.ComposeOperation) error {\n+\tif cmd.CheckIllegal(req.Path, req.Operation) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n \tif _, err := os.Stat(req.Path); err != nil {\n \t\treturn fmt.Errorf(\"load file with path %s failed, %v\", req.Path, err)\n \t}\n@@ -195,6 +206,9 @@ func (u *ContainerService) ComposeOperation(req dto.ComposeOperation) error {\n }\n \n func (u *ContainerService) ComposeUpdate(req dto.ComposeUpdate) error {\n+\tif cmd.CheckIllegal(req.Name, req.Path) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n \tif _, err := os.Stat(req.Path); err != nil {\n \t\treturn fmt.Errorf(\"load file with path %s failed, %v\", req.Path, err)\n \t}"
        },
        {
          "filename": "backend/app/service/database_mysql.go",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@ import (\n \t\"github.com/1Panel-dev/1Panel/backend/buserr\"\n \t\"github.com/1Panel-dev/1Panel/backend/constant\"\n \t\"github.com/1Panel-dev/1Panel/backend/global\"\n+\t\"github.com/1Panel-dev/1Panel/backend/utils/cmd\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/common\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/compose\"\n \t_ \"github.com/go-sql-driver/mysql\"\n@@ -77,6 +78,10 @@ var formatMap = map[string]string{\n }\n \n func (u *MysqlService) Create(ctx context.Context, req dto.MysqlDBCreate) (*model.DatabaseMysql, error) {\n+\tif cmd.CheckIllegal(req.Name, req.Username, req.Password, req.Format, req.Permission) {\n+\t\treturn nil, buserr.New(constant.ErrCmdIllegal)\n+\t}\n+\n \tif req.Username == \"root\" {\n \t\treturn nil, errors.New(\"Cannot set root as user name\")\n \t}\n@@ -184,6 +189,10 @@ func (u *MysqlService) Delete(ctx context.Context, req dto.MysqlDBDelete) error\n }\n \n func (u *MysqlService) ChangePassword(info dto.ChangeDBInfo) error {\n+\tif cmd.CheckIllegal(info.Value) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n+\n \tvar (\n \t\tmysql model.DatabaseMysql\n \t\terr   error\n@@ -253,6 +262,9 @@ func (u *MysqlService) ChangePassword(info dto.ChangeDBInfo) error {\n }\n \n func (u *MysqlService) ChangeAccess(info dto.ChangeDBInfo) error {\n+\tif cmd.CheckIllegal(info.Value) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n \tvar (\n \t\tmysql model.DatabaseMysql\n \t\terr   error"
        },
        {
          "filename": "backend/app/service/firewall.go",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -304,7 +304,6 @@ func OperateFirewallPort(oldPorts, newPorts []int) error {\n \t\treturn err\n \t}\n \tfor _, port := range newPorts {\n-\n \t\tif err := client.Port(fireClient.FireInfo{Port: strconv.Itoa(port), Protocol: \"tcp\", Strategy: \"accept\"}, \"add\"); err != nil {\n \t\t\treturn err\n \t\t}"
        },
        {
          "filename": "backend/app/service/image_repo.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -79,7 +79,7 @@ func (u *ImageRepoService) List() ([]dto.ImageRepoOption, error) {\n \n func (u *ImageRepoService) Create(req dto.ImageRepoCreate) error {\n \tif cmd.CheckIllegal(req.Username, req.Password, req.DownloadUrl) {\n-\t\treturn buserr.New(constant.ErrRepoConn)\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n \t}\n \timageRepo, _ := imageRepoRepo.Get(commonRepo.WithByName(req.Name))\n \tif imageRepo.ID != 0 {\n@@ -148,7 +148,7 @@ func (u *ImageRepoService) Update(req dto.ImageRepoUpdate) error {\n \t\treturn errors.New(\"The default value cannot be deleted !\")\n \t}\n \tif cmd.CheckIllegal(req.Username, req.Password, req.DownloadUrl) {\n-\t\treturn buserr.New(constant.ErrRepoConn)\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n \t}\n \trepo, err := imageRepoRepo.Get(commonRepo.WithByID(req.ID))\n \tif err != nil {"
        },
        {
          "filename": "backend/app/service/ssh.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@ import (\n \t\"time\"\n \n \t\"github.com/1Panel-dev/1Panel/backend/app/dto\"\n+\t\"github.com/1Panel-dev/1Panel/backend/buserr\"\n \t\"github.com/1Panel-dev/1Panel/backend/constant\"\n \t\"github.com/1Panel-dev/1Panel/backend/global\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/cmd\"\n@@ -146,6 +147,9 @@ func (u *SSHService) UpdateByFile(value string) error {\n }\n \n func (u *SSHService) GenerateSSH(req dto.GenerateSSH) error {\n+\tif cmd.CheckIllegal(req.EncryptionMode, req.Password) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n \tcurrentUser, err := user.Current()\n \tif err != nil {\n \t\treturn fmt.Errorf(\"load current user failed, err: %v\", err)"
        },
        {
          "filename": "backend/constant/errs.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -42,6 +42,7 @@ var (\n \tErrTypePasswordExpired = \"ErrPasswordExpired\"\n \tErrNameIsExist         = \"ErrNameIsExist\"\n \tErrDemoEnvironment     = \"ErrDemoEnvironment\"\n+\tErrCmdIllegal          = \"ErrCmdIllegal\"\n )\n \n // app\n@@ -107,7 +108,6 @@ var (\n \tErrInUsed       = \"ErrInUsed\"\n \tErrObjectInUsed = \"ErrObjectInUsed\"\n \tErrPortRules    = \"ErrPortRules\"\n-\tErrRepoConn     = \"ErrRepoConn\"\n )\n \n // runtime"
        },
        {
          "filename": "backend/i18n/lang/en.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -13,6 +13,7 @@ ErrNotSupportType: \"The system does not support the current type: {{ .detail }}\"\n ErrNameIsExist: \"Name is already exist\"\n ErrDemoEnvironment: \"Demo server, prohibit this operation!\"\n ErrCmdTimeout: \"Command execution timed out\uff01\"\n+ErrCmdIllegal: \"The command contains illegal characters. Please modify and try again!\"\n \n #app\n ErrPortInUsed: \"{{ .detail }} port already in use\"\n@@ -83,7 +84,6 @@ ErrTypeOfRedis: \"The recovery file type does not match the current persistence m\n #container \n ErrInUsed: \"{{ .detail }} is in use and cannot be deleted\"\n ErrObjectInUsed: \"This object is in use and cannot be deleted\"\n-ErrRepoConn: \"The repository information contains illegal characters\"\n ErrPortRules: \"The number of ports does not match, please re-enter!\"\n \n #runtime"
        },
        {
          "filename": "backend/i18n/lang/zh-Hant.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -13,6 +13,7 @@ ErrNotSupportType: \"\u7cfb\u7d71\u66ab\u4e0d\u652f\u6301\u7576\u524d\u985e\u578b: {{ .detail }}\"\n ErrNameIsExist: \"\u540d\u7a31\u5df2\u5b58\u5728\"\n ErrDemoEnvironment: \"\u6f14\u793a\u4f3a\u670d\u5668\uff0c\u7981\u6b62\u6b64\u64cd\u4f5c!\"\n ErrCmdTimeout: \"\u6307\u4ee4\u57f7\u884c\u8d85\u6642\uff01\"\n+ErrCmdIllegal: \"\u57f7\u884c\u547d\u4ee4\u4e2d\u5b58\u5728\u4e0d\u5408\u6cd5\u5b57\u7b26\uff0c\u8acb\u4fee\u6539\u5f8c\u91cd\u8a66\uff01\"\n \n #app\n ErrPortInUsed: \"{{ .detail }} \u7aef\u53e3\u5df2\u88ab\u4f54\u7528\uff01\"\n@@ -83,7 +84,6 @@ ErrTypeOfRedis: \"\u6062\u5fa9\u6587\u4ef6\u985e\u578b\u8207\u7576\u524d\u6301\u4e45\u5316\u65b9\u5f0f\u4e0d\u7b26\uff0c\u8acb\u4fee\u6539\u5f8c\n #container\n ErrInUsed: \"{{ .detail }} \u6b63\u88ab\u4f7f\u7528\uff0c\u7121\u6cd5\u522a\u9664\"\n ErrObjectInUsed: \"\u8a72\u5c0d\u8c61\u6b63\u88ab\u4f7f\u7528\uff0c\u7121\u6cd5\u522a\u9664\"\n-ErrRepoConn: \"\u5009\u5eab\u8cc7\u8a0a\u4e2d\u5b58\u5728\u4e0d\u5408\u6cd5\u7684\u5b57\u7b26\"\n ErrPortRules: \"\u7aef\u53e3\u6578\u76ee\u4e0d\u5339\u914d\uff0c\u8acb\u91cd\u65b0\u8f38\u5165\uff01\"\n \n #runtime"
        },
        {
          "filename": "backend/i18n/lang/zh.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -13,6 +13,7 @@ ErrNotSupportType: \"\u7cfb\u7edf\u6682\u4e0d\u652f\u6301\u5f53\u524d\u7c7b\u578b: {{ .detail }}\"\n ErrNameIsExist: \"\u540d\u79f0\u5df2\u5b58\u5728\"\n ErrDemoEnvironment: \"\u6f14\u793a\u670d\u52a1\u5668\uff0c\u7981\u6b62\u6b64\u64cd\u4f5c!\"\n ErrCmdTimeout: \"\u547d\u4ee4\u6267\u884c\u8d85\u65f6\uff01\"\n+ErrCmdIllegal: \"\u6267\u884c\u547d\u4ee4\u4e2d\u5b58\u5728\u4e0d\u5408\u6cd5\u5b57\u7b26\uff0c\u8bf7\u4fee\u6539\u540e\u91cd\u8bd5\uff01\"\n \n #app\n ErrPortInUsed: \"{{ .detail }} \u7aef\u53e3\u5df2\u88ab\u5360\u7528\uff01\"\n@@ -83,7 +84,6 @@ ErrTypeOfRedis: \"\u6062\u590d\u6587\u4ef6\u7c7b\u578b\u4e0e\u5f53\u524d\u6301\u4e45\u5316\u65b9\u5f0f\u4e0d\u7b26\uff0c\u8bf7\u4fee\u6539\u540e\n #container \n ErrInUsed: \"{{ .detail }} \u6b63\u88ab\u4f7f\u7528\uff0c\u65e0\u6cd5\u5220\u9664\"\n ErrObjectInUsed: \"\u8be5\u5bf9\u8c61\u6b63\u88ab\u4f7f\u7528\uff0c\u65e0\u6cd5\u5220\u9664\"\n-ErrRepoConn: \"\u4ed3\u5e93\u4fe1\u606f\u4e2d\u5b58\u5728\u4e0d\u5408\u6cd5\u7684\u5b57\u7b26\"\n ErrPortRules: \"\u7aef\u53e3\u6570\u76ee\u4e0d\u5339\u914d\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\uff01\"\n \n #runtime"
        },
        {
          "filename": "backend/utils/firewall/client/firewalld.go",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -4,6 +4,8 @@ import (\n \t\"fmt\"\n \t\"strings\"\n \n+\t\"github.com/1Panel-dev/1Panel/backend/buserr\"\n+\t\"github.com/1Panel-dev/1Panel/backend/constant\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/cmd\"\n )\n \n@@ -114,6 +116,10 @@ func (f *Firewall) ListAddress() ([]FireInfo, error) {\n }\n \n func (f *Firewall) Port(port FireInfo, operation string) error {\n+\tif cmd.CheckIllegal(operation, port.Protocol, port.Port) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n+\n \tstdout, err := cmd.Execf(\"firewall-cmd --zone=public --%s-port=%s/%s --permanent\", operation, port.Port, port.Protocol)\n \tif err != nil {\n \t\treturn fmt.Errorf(\"%s port failed, err: %s\", operation, stdout)\n@@ -122,6 +128,9 @@ func (f *Firewall) Port(port FireInfo, operation string) error {\n }\n \n func (f *Firewall) RichRules(rule FireInfo, operation string) error {\n+\tif cmd.CheckIllegal(operation, rule.Address, rule.Protocol, rule.Port, rule.Strategy) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n \truleStr := \"\"\n \tif strings.Contains(rule.Address, \"-\") {\n \t\tstd, err := cmd.Execf(\"firewall-cmd --permanent --new-ipset=%s --type=hash:ip\", rule.Address)"
        },
        {
          "filename": "backend/utils/firewall/client/ufw.go",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -4,6 +4,8 @@ import (\n \t\"fmt\"\n \t\"strings\"\n \n+\t\"github.com/1Panel-dev/1Panel/backend/buserr\"\n+\t\"github.com/1Panel-dev/1Panel/backend/constant\"\n \t\"github.com/1Panel-dev/1Panel/backend/utils/cmd\"\n )\n \n@@ -131,6 +133,9 @@ func (f *Ufw) Port(port FireInfo, operation string) error {\n \tdefault:\n \t\treturn fmt.Errorf(\"unsupport strategy %s\", port.Strategy)\n \t}\n+\tif cmd.CheckIllegal(port.Protocol, port.Port) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n \n \tcommand := fmt.Sprintf(\"%s %s %s\", f.CmdStr, port.Strategy, port.Port)\n \tif operation == \"remove\" {\n@@ -156,6 +161,10 @@ func (f *Ufw) RichRules(rule FireInfo, operation string) error {\n \t\treturn fmt.Errorf(\"unsupport strategy %s\", rule.Strategy)\n \t}\n \n+\tif cmd.CheckIllegal(operation, rule.Protocol, rule.Address, rule.Port) {\n+\t\treturn buserr.New(constant.ErrCmdIllegal)\n+\t}\n+\n \truleStr := fmt.Sprintf(\"%s %s \", f.CmdStr, rule.Strategy)\n \tif operation == \"remove\" {\n \t\truleStr = fmt.Sprintf(\"%s delete %s \", f.CmdStr, rule.Strategy)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ca0dc71338493e94b098f8a919e6f5cc6e7ec0a0",
            "date": "2025-01-14T11:03:22Z",
            "author_login": "zhengkunwang223"
          },
          {
            "sha": "04a1ec9a9a7a0c66c7d0b94498b3efaa830a3296",
            "date": "2025-01-14T08:00:09Z",
            "author_login": "zhengkunwang223"
          },
          {
            "sha": "999e5a779a42fbe8170bae40cdd8592df05d7805",
            "date": "2025-01-13T15:10:04Z",
            "author_login": "lan-yonghui"
          },
          {
            "sha": "99f62b72307f442205b861c1172c6fc7a7408ae8",
            "date": "2025-01-13T15:08:04Z",
            "author_login": "zhengkunwang223"
          },
          {
            "sha": "4dee4e1cc22b5861a5e8ce4dec1a50b9b0844f28",
            "date": "2025-01-13T07:56:03Z",
            "author_login": "zhengkunwang223"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "1Panel is an open source Linux server operation and maintenance management panel. An OS command injection vulnerability exists in 1Panel firewall functionality. A specially-crafted HTTP request can lead to arbitrary command execution. An attacker can make an authenticated HTTP request to trigger this vulnerability. 1Panel firewall functionality `/hosts/firewall/ip` endpoint read user input without validation, the attacker extends the default functionality of the application, which execute system commands. An attacker can execute arbitrary code on the target system, which can lead to a complete compromise of the system. This issue has been addressed in commit `e17b80cff49` which is included in release version `1.4.3`. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-18T19:15:09.757",
    "last_modified": "2024-11-21T08:11:47.650",
    "fix_date": "2023-07-17T08:34:29Z"
  },
  "references": [
    {
      "url": "https://github.com/1Panel-dev/1Panel/commit/e17b80cff4975ee343568ff526b62319f499005d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-p9xf-74xh-mhw5",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/1Panel-dev/1Panel/commit/e17b80cff4975ee343568ff526b62319f499005d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-p9xf-74xh-mhw5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.253657",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "1Panel",
    "owner": "1Panel-dev",
    "created_at": "2022-07-19T15:44:52Z",
    "updated_at": "2025-01-14T13:42:29Z",
    "pushed_at": "2025-01-14T11:03:25Z",
    "size": 79198,
    "stars": 24934,
    "forks": 2234,
    "open_issues": 614,
    "watchers": 24934,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "dev"
    ],
    "languages": {
      "Go": 3974896,
      "Vue": 2523255,
      "Makefile": 923,
      "Shell": 672,
      "PHP": 482
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:03:48.526986"
  }
}