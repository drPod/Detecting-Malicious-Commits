{
  "cve_id": "CVE-2023-37908",
  "github_data": {
    "repository": "xwiki/xwiki-rendering",
    "fix_commit": "f4d5acac451dccaf276e69f0b49b72221eef5d2f",
    "related_commits": [
      "f4d5acac451dccaf276e69f0b49b72221eef5d2f",
      "f4d5acac451dccaf276e69f0b49b72221eef5d2f"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-rendering/commit/f4d5acac451dccaf276e69f0b49b72221eef5d2f.patch",
    "fix_commit_details": {
      "sha": "f4d5acac451dccaf276e69f0b49b72221eef5d2f",
      "commit_date": "2023-01-13T16:28:19Z",
      "author": {
        "login": "michitux",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "XRENDERING-697: XHTMLWikiPrinter doesn't validate generated data attributes",
        "length": 161,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 136,
        "additions": 132,
        "deletions": 4
      },
      "files": [
        {
          "filename": "xwiki-rendering-xml/src/main/java/org/xwiki/rendering/renderer/printer/XHTMLWikiPrinter.java",
          "status": "modified",
          "additions": 51,
          "deletions": 4,
          "patch": "@@ -23,6 +23,8 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n \n import org.apache.commons.lang3.StringUtils;\n import org.xml.sax.Attributes;\n@@ -48,6 +50,17 @@ public class XHTMLWikiPrinter extends XMLWikiPrinter\n     @Unstable\n     public static final String TRANSLATED_ATTRIBUTE_PREFIX = \"data-xwiki-translated-attribute-\";\n \n+    /**\n+     * Pattern for matching characters not allowed in data attributes.\n+     * <p>\n+     * This is the inverse of the definition of a name being\n+     * <a href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible>XML-compatible</a>,\n+     * i.e., matching the <a href=\"https://www.w3.org/TR/xml/#NT-Name\">Name production</a> without \":\".\n+     */\n+    private static final Pattern DATA_REPLACEMENT_PATTERN = Pattern.compile(\"[^A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\"\n+        + \"\\\\u00F8-\\\\u02ff\\\\u0370-\\\\u037d\\\\u037f-\\\\u1fff\\\\u200c\\\\u200d\\\\u2070-\\\\u218f\\\\u2c00-\\\\u2fef\\\\u3001-\\\\ud7ff\"\n+        + \"\\\\uf900-\\\\ufdcf\\\\ufdf0-\\\\ufffd\\\\x{10000}-\\\\x{EFFFF}\\\\-.0-9\\\\u00b7\\\\u0300-\\\\u036f\\\\u203f-\\\\u2040]\");\n+\n     /**\n      * The sanitizer used to restrict allowed elements and attributes, can be null (no restrictions).\n      *\n@@ -260,7 +273,13 @@ private Map<String, String> cleanAttributes(String elementName, Map<String, Stri\n                 if (this.htmlElementSanitizer.isAttributeAllowed(elementName, e.getKey(), e.getValue())) {\n                     cleanAttributes.put(e.getKey(), e.getValue());\n                 } else {\n-                    cleanAttributes.put(TRANSLATED_ATTRIBUTE_PREFIX + e.getKey(), e.getValue());\n+                    // Keep but clean invalid attributes with a prefix (removed during parsing) to avoid loosing them\n+                    // through WYSIWYG editing.\n+                    String translatedName =\n+                        TRANSLATED_ATTRIBUTE_PREFIX + removeInvalidDataAttributeCharacters(e.getKey());\n+                    if (this.htmlElementSanitizer.isAttributeAllowed(elementName, translatedName, e.getValue())) {\n+                        cleanAttributes.put(translatedName, e.getValue());\n+                    }\n                 }\n             }\n         }\n@@ -279,9 +298,18 @@ private String[][] cleanAttributes(String elementName, String[][] attributes)\n                     if (this.htmlElementSanitizer.isAttributeAllowed(elementName, entry[0], entry[1])) {\n                         return entry;\n                     } else {\n-                        return new String[] { TRANSLATED_ATTRIBUTE_PREFIX + entry[0], entry[1] };\n+                        // Keep but clean invalid attributes with a prefix (removed during parsing) to avoid loosing\n+                        // them through WYSIWYG editing.\n+                        String translatedName =\n+                            TRANSLATED_ATTRIBUTE_PREFIX + removeInvalidDataAttributeCharacters(entry[0]);\n+                        if (this.htmlElementSanitizer.isAttributeAllowed(elementName, translatedName, entry[1])) {\n+                            return new String[] { translatedName, entry[1] };\n+                        } else {\n+                            return null;\n+                        }\n                     }\n                 })\n+                .filter(Objects::nonNull)\n                 .toArray(String[][]::new);\n         }\n \n@@ -304,15 +332,34 @@ private Attributes cleanAttributes(String elementName, Attributes attributes)\n                     ((AttributesImpl) allowedAttribute).addAttribute(null, null, attributes.getQName(i),\n                         null, attributes.getValue(i));\n                 } else {\n-                    ((AttributesImpl) allowedAttribute).addAttribute(null, null,\n-                        TRANSLATED_ATTRIBUTE_PREFIX + attributes.getQName(i), null, attributes.getValue(i));\n+                    // Keep but clean invalid attributes with a prefix (removed during parsing) to avoid loosing them\n+                    // through WYSIWYG editing.\n+                    String translatedName =\n+                        TRANSLATED_ATTRIBUTE_PREFIX + removeInvalidDataAttributeCharacters(attributes.getQName(i));\n+                    if (this.htmlElementSanitizer.isAttributeAllowed(elementName, translatedName,\n+                        attributes.getValue(i)))\n+                    {\n+                        ((AttributesImpl) allowedAttribute).addAttribute(null, null,\n+                            translatedName, null, attributes.getValue(i));\n+                    }\n                 }\n             }\n         }\n \n         return allowedAttribute;\n     }\n \n+    /**\n+     * Strips out invalid characters from names used for data attributes.\n+     *\n+     * @param name the data attribute name to clean\n+     * @return valid name, to be prefixed with data-\n+     */\n+    public static String removeInvalidDataAttributeCharacters(String name)\n+    {\n+        return DATA_REPLACEMENT_PATTERN.matcher(name).replaceAll(\"\");\n+    }\n+\n     private void handleSpaceWhenStartElement()\n     {\n         // Use case: <tag1>something <tag2>..."
        },
        {
          "filename": "xwiki-rendering-xml/src/test/java/org/xwiki/rendering/renderer/printer/XHTMLWikiPrinterTest.java",
          "status": "modified",
          "additions": 81,
          "deletions": 0,
          "patch": "@@ -19,11 +19,21 @@\n  */\n package org.xwiki.rendering.renderer.printer;\n \n+import java.util.Map;\n+\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.CsvSource;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+import org.xml.sax.helpers.AttributesImpl;\n+import org.xwiki.xml.html.HTMLElementSanitizer;\n \n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.atLeast;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n \n /**\n  * Unit tests for {@link XHTMLWikiPrinter}.\n@@ -46,4 +56,75 @@ void testRawEscaping(String input, String expected)\n         xhtmlWikiPrinter.printRaw(input);\n         verify(mockPrinter).print(expected);\n     }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+        \"invalid, value, data-xwiki-translated-attribute-invalid, value\",\n+        \"valid, test&, valid, test&amp;\",\n+        \"in/valid, value, data-xwiki-translated-attribute-invalid, value\"\n+    })\n+    void testParameterCleaning(String parameterName, String parameterValue, String expectedName, String expectedValue)\n+    {\n+        HTMLElementSanitizer mockSanitizer = mock(HTMLElementSanitizer.class);\n+        when(mockSanitizer.isElementAllowed(anyString())).thenReturn(true);\n+        when(mockSanitizer.isAttributeAllowed(anyString(), anyString(), anyString())).then(invocation ->\n+        {\n+            String attributeName = invocation.getArgument(1, String.class);\n+            return \"valid\".equals(attributeName) || attributeName.startsWith(\"data-\");\n+        });\n+\n+        // Test all possibilities of invoking the printer (with different kinds of arguments).\n+        WikiPrinter mockPrinter = mock(WikiPrinter.class);\n+        XHTMLWikiPrinter xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n+        Map<String, String> mapParameters = Map.of(parameterName, parameterValue);\n+        xhtmlWikiPrinter.printXMLStartElement(\"div\", mapParameters);\n+        verify(mockSanitizer, atLeast(1)).isElementAllowed(\"div\");\n+        verify(mockSanitizer, atLeast(1)).isAttributeAllowed(\"div\", parameterName, parameterValue);\n+        verify(mockSanitizer, atLeast(1)).isAttributeAllowed(\"div\", expectedName, parameterValue);\n+        verifyPrinting(mockPrinter, expectedName, expectedValue, true);\n+\n+        mockPrinter = mock(WikiPrinter.class);\n+        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n+        xhtmlWikiPrinter.printXMLElement(\"div\", mapParameters);\n+        verifyPrinting(mockPrinter, expectedName, expectedValue, false);\n+\n+        mockPrinter = mock(WikiPrinter.class);\n+        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n+        String[][] arrayParameters = { { parameterName, parameterValue } };\n+        xhtmlWikiPrinter.printXMLStartElement(\"div\", arrayParameters);\n+        verifyPrinting(mockPrinter, expectedName, expectedValue, true);\n+\n+        mockPrinter = mock(WikiPrinter.class);\n+        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n+        xhtmlWikiPrinter.printXMLElement(\"div\", arrayParameters);\n+        verifyPrinting(mockPrinter, expectedName, expectedValue, false);\n+\n+        mockPrinter = mock(WikiPrinter.class);\n+        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n+        AttributesImpl attributes = new AttributesImpl();\n+        attributes.addAttribute(null, null, parameterName, null, parameterValue);\n+        xhtmlWikiPrinter.printXMLStartElement(\"div\", attributes);\n+        verifyPrinting(mockPrinter, expectedName, expectedValue, true);\n+    }\n+\n+    private void verifyPrinting(WikiPrinter mockPrinter, String attributeName,\n+        String attributeValue, boolean isStart)\n+    {\n+        InOrder inOrder = Mockito.inOrder(mockPrinter);\n+        inOrder.verify(mockPrinter).print(\"<\");\n+        inOrder.verify(mockPrinter).print(\"div\");\n+        inOrder.verify(mockPrinter).print(\" \");\n+        inOrder.verify(mockPrinter).print(attributeName);\n+        inOrder.verify(mockPrinter).print(\"=\");\n+        inOrder.verify(mockPrinter).print(\"\\\"\");\n+        inOrder.verify(mockPrinter).print(attributeValue);\n+        inOrder.verify(mockPrinter).print(\"\\\"\");\n+        if (isStart) {\n+            inOrder.verify(mockPrinter).print(\">\");\n+        } else {\n+            inOrder.verify(mockPrinter).print(\"/>\");\n+        }\n+        verifyNoMoreInteractions(mockPrinter);\n+\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "92d286fe9c6aefd715d03921c2988433504118cd",
            "date": "2025-01-10T12:59:46Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "891a0a0c7b3af8eb17ef5331ab3431f7c7ca7a5e",
            "date": "2025-01-09T14:50:47Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "40c52310238ed3385e15abdffde6a8fe7789e338",
            "date": "2024-12-13T09:53:28Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "1becaee2355b2947804fbf7c36e977a0c99f5b64",
            "date": "2024-12-13T08:10:46Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "7acc35338dc3f6739080ffe56a25c1a282f081e9",
            "date": "2024-12-12T17:34:45Z",
            "author_login": "renovate-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-83",
    "description": "XWiki Rendering is a generic Rendering system that converts textual input in a given syntax into another syntax. The cleaning of attributes during XHTML rendering, introduced in version 14.6-rc-1, allowed the injection of arbitrary HTML code and thus cross-site scripting via invalid attribute names. This can be exploited, e.g., via the link syntax in any content that supports XWiki syntax like comments in XWiki. When a user moves the mouse over a malicious link, the malicious JavaScript code is executed in the context of the user session. When this user is a privileged user who has programming rights, this allows server-side code execution with programming rights, impacting the confidentiality, integrity and availability of the XWiki instance. While this attribute was correctly recognized as not allowed, the attribute was still printed with a prefix `data-xwiki-translated-attribute-` without further cleaning or validation. This problem has been patched in XWiki 14.10.4 and 15.0 RC1 by removing characters not allowed in data attributes and then validating the cleaned attribute again. There are no known workarounds apart from upgrading to a version including the fix.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-25T18:17:28.333",
    "last_modified": "2024-11-21T08:12:26.743",
    "fix_date": "2023-01-13T16:28:19Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-rendering/commit/f4d5acac451dccaf276e69f0b49b72221eef5d2f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-rendering/security/advisories/GHSA-663w-2xp3-5739",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-rendering/security/advisories/GHSA-6gf5-c898-7rxp",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XRENDERING-697",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-rendering/commit/f4d5acac451dccaf276e69f0b49b72221eef5d2f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-rendering/security/advisories/GHSA-663w-2xp3-5739",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-rendering/security/advisories/GHSA-6gf5-c898-7rxp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XRENDERING-697",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.926884",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-rendering",
    "owner": "xwiki",
    "created_at": "2011-02-24T10:25:20Z",
    "updated_at": "2025-01-10T12:59:50Z",
    "pushed_at": "2025-01-10T13:00:48Z",
    "size": 15023,
    "stars": 72,
    "forks": 80,
    "open_issues": 7,
    "watchers": 72,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable-14.10.x",
      "stable-15.10.x",
      "stable-16.4.x",
      "stable-16.10.x"
    ],
    "languages": {
      "Java": 3229064,
      "AspectJ": 12229,
      "Groovy": 1367
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T17:53:36.375300"
  }
}