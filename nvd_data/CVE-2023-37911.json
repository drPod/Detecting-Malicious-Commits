{
  "cve_id": "CVE-2023-37911",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "f471f2a392aeeb9e51d59fdfe1d76fccf532523f",
    "related_commits": [
      "f471f2a392aeeb9e51d59fdfe1d76fccf532523f",
      "f471f2a392aeeb9e51d59fdfe1d76fccf532523f"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/f471f2a392aeeb9e51d59fdfe1d76fccf532523f.patch",
    "fix_commit_details": {
      "sha": "f471f2a392aeeb9e51d59fdfe1d76fccf532523f",
      "commit_date": "2023-04-04T15:54:34Z",
      "author": {
        "login": "michitux",
        "type": "User",
        "stats": {
          "total_commits": 378,
          "average_weekly_commits": 0.39622641509433965,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 108
        }
      },
      "commit_message": {
        "title": "XWIKI-20685: Check access on the revision provider in the script API",
        "length": 68,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 108,
        "additions": 101,
        "deletions": 7
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/Document.java",
          "status": "modified",
          "additions": 12,
          "deletions": 4,
          "patch": "@@ -31,6 +31,7 @@\n import java.util.Vector;\n \n import org.apache.commons.fileupload.FileItem;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -52,6 +53,7 @@\n import org.xwiki.rendering.block.XDOM;\n import org.xwiki.rendering.parser.ParseException;\n import org.xwiki.rendering.syntax.Syntax;\n+import org.xwiki.security.authorization.AuthorizationException;\n import org.xwiki.security.authorization.Right;\n import org.xwiki.stability.Unstable;\n import org.xwiki.user.CurrentUserReference;\n@@ -3165,20 +3167,26 @@ public void rename(DocumentReference newReference, List<DocumentReference> backl\n      * Allow to easily access any revision of a document\n      *\n      * @param revision the version to access\n-     * @return the document corresponding to the requested revision or {@code null} if the revision does not exist.\n+     * @return the document corresponding to the requested revision or {@code null} if the revision does not exist or\n+     * access is denied.\n      */\n     public Document getDocumentRevision(String revision)\n     {\n         try {\n-            XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(this.doc, revision);\n+            DocumentRevisionProvider revisionProvider = getDocumentRevisionProvider();\n+            revisionProvider.checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, getDocumentReference(), revision);\n+            XWikiDocument documentRevision = revisionProvider.getRevision(this.doc, revision);\n \n             return documentRevision != null ? new Document(documentRevision, this.context) : null;\n+        } catch (AuthorizationException e) {\n+            LOGGER.info(\"Access denied for loading revision [{}] of document [{}]: [{}]\", revision,\n+                getDocumentReferenceWithLocale(), ExceptionUtils.getRootCauseMessage(e));\n         } catch (Exception e) {\n             LOGGER.error(\"Failed to load revision [{}] of document [{}]\", revision, getDocumentReferenceWithLocale(),\n                 e);\n-\n-            return null;\n         }\n+\n+        return null;\n     }\n \n     /**"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/XWiki.java",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -46,8 +46,10 @@\n import org.xwiki.model.reference.WikiReference;\n import org.xwiki.rendering.renderer.PrintRendererFactory;\n import org.xwiki.rendering.syntax.Syntax;\n+import org.xwiki.security.authorization.AuthorizationException;\n import org.xwiki.security.authorization.ContextualAuthorizationManager;\n import org.xwiki.security.authorization.Right;\n+import org.xwiki.user.CurrentUserReference;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n@@ -658,12 +660,17 @@ public Document getDocument(DocumentReference reference, String revision) throws\n     {\n         try {\n             if (reference != null && getContextualAuthorizationManager().hasAccess(Right.VIEW, reference)) {\n-                XWikiDocument documentRevision = getDocumentRevisionProvider().getRevision(reference, revision);\n+                DocumentRevisionProvider revisionProvider = getDocumentRevisionProvider();\n+                revisionProvider.checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, reference, revision);\n+                XWikiDocument documentRevision = revisionProvider.getRevision(reference, revision);\n \n                 if (documentRevision != null) {\n                     return new Document(documentRevision, this.context);\n                 }\n             }\n+        } catch (AuthorizationException e) {\n+            LOGGER.info(\"Access denied for loading revision [{}] of document [{}]: [{}]\", revision, reference,\n+                ExceptionUtils.getRootCauseMessage(e));\n         } catch (Exception e) {\n             LOGGER.error(\"Failed to access revision [{}] of document {}\", revision, reference, e);\n         }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/api/DocumentTest.java",
          "status": "modified",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -22,15 +22,21 @@\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n import org.xwiki.component.manager.ComponentLookupException;\n import org.xwiki.component.util.DefaultParameterizedType;\n import org.xwiki.model.document.DocumentAuthors;\n import org.xwiki.model.internal.document.SafeDocumentAuthors;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.ObjectReference;\n import org.xwiki.observation.ObservationManager;\n+import org.xwiki.security.authorization.AuthorizationException;\n import org.xwiki.security.authorization.AuthorizationManager;\n import org.xwiki.security.authorization.Right;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n import org.xwiki.test.junit5.mockito.MockComponent;\n import org.xwiki.test.mockito.MockitoComponentManager;\n import org.xwiki.user.CurrentUserReference;\n@@ -39,6 +45,7 @@\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n+import com.xpn.xwiki.doc.DocumentRevisionProvider;\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.objects.BaseObject;\n import com.xpn.xwiki.objects.BaseProperty;\n@@ -56,6 +63,7 @@\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.ArgumentMatchers.isNull;\n import static org.mockito.ArgumentMatchers.same;\n+import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n@@ -74,6 +82,9 @@ class DocumentTest\n     @MockComponent\n     private ObservationManager observationManager;\n \n+    @RegisterExtension\n+    private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.INFO);\n+\n     @Test\n     void toStringReturnsFullName()\n     {\n@@ -390,4 +401,32 @@ void getAuthors()\n         verify(mockAuthorizationManager, times(2)).hasAccess(Right.PROGRAM, userReference, currentDocReference);\n         verify(currentDoc).clone();\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { false, true })\n+    void getDocumentRevision(boolean allowAccess, MockitoComponentManager componentManager) throws Exception\n+    {\n+        DocumentReference documentReference = new DocumentReference(\"Wiki\", \"Space\", \"Page\");\n+        XWikiDocument xWikiDocument = new XWikiDocument(documentReference);\n+        Document document = new Document(xWikiDocument, this.oldcore.getXWikiContext());\n+        DocumentRevisionProvider revisionProvider =\n+            componentManager.registerMockComponent(DocumentRevisionProvider.class);\n+        String revision = \"42.1\";\n+        XWikiDocument revisionDocument = mock(XWikiDocument.class);\n+        when(revisionProvider.getRevision(xWikiDocument, revision)).thenReturn(revisionDocument);\n+        String deniedMessage = \"Denied\";\n+        if (!allowAccess) {\n+            doThrow(new AuthorizationException(deniedMessage)).when(revisionProvider)\n+                .checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, documentReference, revision);\n+            assertNull(document.getDocumentRevision(revision));\n+            assertEquals(1, this.logCapture.size());\n+            assertEquals(String.format(\"Access denied for loading revision [%s] of document [%s()]: \"\n+                    + \"[AuthorizationException: %s]\", revision,\n+                documentReference, deniedMessage), this.logCapture.getMessage(0));\n+        } else {\n+            assertEquals(new Document(revisionDocument, this.oldcore.getXWikiContext()),\n+                document.getDocumentRevision(revision));\n+        }\n+        verify(revisionProvider).checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, documentReference, revision);\n+    }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/api/XWikiTest.java",
          "status": "modified",
          "additions": 42,
          "deletions": 2,
          "patch": "@@ -23,17 +23,23 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.observation.ObservationManager;\n import org.xwiki.rendering.renderer.PrintRendererFactory;\n import org.xwiki.rendering.syntax.Syntax;\n+import org.xwiki.security.authorization.AuthorizationException;\n+import org.xwiki.security.authorization.ContextualAuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.test.junit5.mockito.MockComponent;\n import org.xwiki.test.mockito.MockitoComponentManager;\n import org.xwiki.user.CurrentUserReference;\n import org.xwiki.user.UserReferenceResolver;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n+import com.xpn.xwiki.doc.DocumentRevisionProvider;\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.doc.XWikiDocumentArchive;\n import com.xpn.xwiki.test.MockitoOldcore;\n@@ -45,6 +51,9 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n /**\n@@ -56,6 +65,8 @@\n @ReferenceComponentList\n public class XWikiTest\n {\n+    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"xwiki\", \"MilkyWay\", \"Fidis\");\n+\n     @MockComponent\n     private UserReferenceResolver<CurrentUserReference> currentUserReferenceUserReferenceResolver;\n \n@@ -78,8 +89,7 @@ public void setup(MockitoOldcore mockitoOldcore) throws XWikiException\n             .thenReturn(new XWikiDocumentArchive());\n \n         xWikiContext.setUser(\"Redtail\");\n-        this.apiDocument =\n-            new Document(new XWikiDocument(new DocumentReference(\"xwiki\", \"MilkyWay\", \"Fidis\")), xWikiContext);\n+        this.apiDocument = new Document(new XWikiDocument(DOCUMENT_REFERENCE), xWikiContext);\n         this.apiDocument.getDocument().setCreator(\"c\" + xWikiContext.getUser());\n         this.apiDocument.getDocument().setAuthor(\"a\" + xWikiContext.getUser());\n         this.apiDocument.save();\n@@ -134,4 +144,34 @@ public void getAvailableRendererSyntax(MockitoComponentManager componentManager)\n         assertNull(this.apiXWiki.getAvailableRendererSyntax(\"plai\", \"1.0\"));\n         assertNull(this.apiXWiki.getAvailableRendererSyntax(\"plai\", null));\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { false, true })\n+    void getDocumentRevision(boolean allowAccess, MockitoOldcore mockitoOldcore) throws Exception\n+    {\n+        DocumentRevisionProvider revisionProvider =\n+            mockitoOldcore.getMocker().registerMockComponent(DocumentRevisionProvider.class);\n+        ContextualAuthorizationManager contextualAuthorizationManager =\n+            mockitoOldcore.getMockContextualAuthorizationManager();\n+\n+        XWikiDocument deletedDocument = new XWikiDocument(DOCUMENT_REFERENCE);\n+        deletedDocument.setContent(\"Deleted\");\n+        String revision = \"deleted:1\";\n+        when(revisionProvider.getRevision(DOCUMENT_REFERENCE, revision)).thenReturn(deletedDocument);\n+\n+        when(contextualAuthorizationManager.hasAccess(Right.VIEW, DOCUMENT_REFERENCE)).thenReturn(true);\n+\n+        if (!allowAccess) {\n+            doThrow(new AuthorizationException(\"Denied\")).when(revisionProvider)\n+                .checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, DOCUMENT_REFERENCE, revision);\n+            assertNull(this.apiXWiki.getDocument(DOCUMENT_REFERENCE, revision));\n+        } else {\n+            assertEquals(new Document(deletedDocument, mockitoOldcore.getXWikiContext()),\n+                this.apiXWiki.getDocument(DOCUMENT_REFERENCE, revision));\n+        }\n+\n+        verify(revisionProvider, times(allowAccess ? 1 : 0)).getRevision(DOCUMENT_REFERENCE, revision);\n+        verify(revisionProvider).checkAccess(Right.VIEW, CurrentUserReference.INSTANCE, DOCUMENT_REFERENCE, revision);\n+        verify(contextualAuthorizationManager).hasAccess(Right.VIEW, DOCUMENT_REFERENCE);\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-668",
    "description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Starting in version 9.4-rc-1 and prior to versions 14.10.8 and 15.3-rc-1, when a document has been deleted and re-created, it is possible for users with view right on the re-created document but not on the deleted document to view the contents of the deleted document. Such a situation might arise when rights were added to the deleted document. This can be exploited through the diff feature and, partially, through the REST API by using versions such as `deleted:1` (where the number counts the deletions in the wiki and is thus guessable). Given sufficient rights, the attacker can also re-create the deleted document, thus extending the scope to any deleted document as long as the attacker has edit right in the location of the deleted document. This vulnerability has been patched in XWiki 14.10.8 and 15.3 RC1 by properly checking rights when deleted revisions of a document are accessed. The only workaround is to regularly clean deleted documents to minimize the potential exposure. Extra care should be taken when deleting sensitive documents that are protected individually (and not, e.g., by being placed in a protected space) or deleting a protected space as a whole.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-25T18:17:28.543",
    "last_modified": "2024-11-21T08:12:27.183",
    "fix_date": "2023-04-04T15:54:34Z"
  },
  "references": [
    {
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/Index%20Application#HPermanentlydeleteallpages",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/f471f2a392aeeb9e51d59fdfe1d76fccf532523f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-gh64-qxh5-4m33",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20684",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20685",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20817",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://extensions.xwiki.org/xwiki/bin/view/Extension/Index%20Application#HPermanentlydeleteallpages",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/f471f2a392aeeb9e51d59fdfe1d76fccf532523f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-gh64-qxh5-4m33",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20684",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20685",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20817",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.927364",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}