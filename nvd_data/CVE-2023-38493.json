{
  "cve_id": "CVE-2023-38493",
  "github_data": {
    "repository": "line/armeria",
    "fix_commit": "039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07",
    "related_commits": [
      "039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07",
      "039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07",
      "commit_date": "2023-07-25T06:37:02Z",
      "author": {
        "login": "minwoox",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wvp2-9ppw-337j",
        "length": 1484,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 1363,
        "additions": 1291,
        "deletions": 72
      },
      "files": [
        {
          "filename": "core/src/main/java/com/linecorp/armeria/common/AbstractRequestContextBuilder.java",
          "status": "modified",
          "additions": 11,
          "deletions": 4,
          "patch": "@@ -142,13 +142,20 @@ protected AbstractRequestContextBuilder(boolean server, RpcRequest rpcReq, URI u\n         sessionProtocol = getSessionProtocol(uri);\n \n         if (server) {\n-            reqTarget = DefaultRequestTarget.createWithoutValidation(\n-                    RequestTargetForm.ORIGIN, null, null,\n-                    uri.getRawPath(), uri.getRawQuery(), null);\n+            String path = uri.getRawPath();\n+            final String query = uri.getRawQuery();\n+            if (query != null) {\n+                path += '?' + query;\n+            }\n+            final RequestTarget reqTarget = RequestTarget.forServer(path);\n+            if (reqTarget == null) {\n+                throw new IllegalArgumentException(\"invalid uri: \" + uri);\n+            }\n+            this.reqTarget = reqTarget;\n         } else {\n             reqTarget = DefaultRequestTarget.createWithoutValidation(\n                     RequestTargetForm.ORIGIN, null, null,\n-                    uri.getRawPath(), uri.getRawQuery(), uri.getRawFragment());\n+                    uri.getRawPath(), uri.getRawPath(), uri.getRawQuery(), uri.getRawFragment());\n         }\n     }\n "
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/common/DefaultFlagsProvider.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -413,6 +413,11 @@ public Boolean allowDoubleDotsInQueryString() {\n         return false;\n     }\n \n+    @Override\n+    public Boolean allowSemicolonInPathComponent() {\n+        return false;\n+    }\n+\n     @Override\n     public Path defaultMultipartUploadsLocation() {\n         return Paths.get(System.getProperty(\"java.io.tmpdir\") +"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/common/Flags.java",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -375,6 +375,9 @@ private static boolean validateTransportType(TransportType transportType, String\n     private static final boolean ALLOW_DOUBLE_DOTS_IN_QUERY_STRING =\n             getValue(FlagsProvider::allowDoubleDotsInQueryString, \"allowDoubleDotsInQueryString\");\n \n+    private static final boolean ALLOW_SEMICOLON_IN_PATH_COMPONENT =\n+            getValue(FlagsProvider::allowSemicolonInPathComponent, \"allowSemicolonInPathComponent\");\n+\n     private static final Path DEFAULT_MULTIPART_UPLOADS_LOCATION =\n             getValue(FlagsProvider::defaultMultipartUploadsLocation, \"defaultMultipartUploadsLocation\");\n \n@@ -1340,6 +1343,27 @@ public static boolean allowDoubleDotsInQueryString() {\n         return ALLOW_DOUBLE_DOTS_IN_QUERY_STRING;\n     }\n \n+    /**\n+     * Returns whether to allow a semicolon ({@code ;}) in a request path component on the server-side.\n+     * If disabled, the substring from the semicolon to before the next slash, commonly referred to as\n+     * matrix variables, is removed. For example, {@code /foo;a=b/bar} will be converted to {@code /foo/bar}.\n+     * Also, an exception is raised if a semicolon is used for binding a service. For example, the following\n+     * code raises an exception:\n+     * <pre>{@code\n+     * Server server =\n+     *    Server.builder()\n+     *      .service(\"/foo;bar\", ...)\n+     *      .build();\n+     * }</pre>\n+     * Note that this flag has no effect on the client-side.\n+     *\n+     * <p>This flag is disabled by default. Specify the\n+     * {@code -Dcom.linecorp.armeria.allowSemicolonInPathComponent=true} JVM option to enable it.\n+     */\n+    public static boolean allowSemicolonInPathComponent() {\n+        return ALLOW_SEMICOLON_IN_PATH_COMPONENT;\n+    }\n+\n     /**\n      * Returns the {@link Sampler} that determines whether to trace the stack trace of request contexts leaks\n      * and how frequently to keeps stack trace. A sampled exception will have the stack trace while the others"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/common/FlagsProvider.java",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -984,6 +984,28 @@ default Boolean allowDoubleDotsInQueryString() {\n         return null;\n     }\n \n+    /**\n+     * Returns whether to allow a semicolon ({@code ;}) in a request path component on the server-side.\n+     * If disabled, the substring from the semicolon to before the next slash, commonly referred to as\n+     * matrix variables, is removed. For example, {@code /foo;a=b/bar} will be converted to {@code /foo/bar}.\n+     * Also, an exception is raised if a semicolon is used for binding a service. For example, the following\n+     * code raises an exception:\n+     * <pre>{@code\n+     * Server server =\n+     *    Server.builder()\n+     *      .service(\"/foo;bar\", ...)\n+     *      .build();\n+     * }</pre>\n+     * Note that this flag has no effect on the client-side.\n+     *\n+     * <p>This flag is disabled by default. Specify the\n+     * {@code -Dcom.linecorp.armeria.allowSemicolonInPathComponent=true} JVM option to enable it.\n+     */\n+    @Nullable\n+    default Boolean allowSemicolonInPathComponent() {\n+        return null;\n+    }\n+\n     /**\n      * Returns the {@link Path} that is used to store the files uploaded from {@code multipart/form-data}\n      * requests."
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/common/RequestTarget.java",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -44,7 +44,8 @@ public interface RequestTarget {\n     @Nullable\n     static RequestTarget forServer(String reqTarget) {\n         requireNonNull(reqTarget, \"reqTarget\");\n-        return DefaultRequestTarget.forServer(reqTarget, Flags.allowDoubleDotsInQueryString());\n+        return DefaultRequestTarget.forServer(reqTarget, Flags.allowSemicolonInPathComponent(),\n+                                              Flags.allowDoubleDotsInQueryString());\n     }\n \n     /**\n@@ -102,6 +103,16 @@ static RequestTarget forClient(String reqTarget, @Nullable String prefix) {\n      */\n     String path();\n \n+    /**\n+     * Returns the path of this {@link RequestTarget}, which always starts with {@code '/'}.\n+     * Unlike {@link #path()}, the returned string contains matrix variables it the original request path\n+     * contains them.\n+     *\n+     * @see <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html\">\n+     *      Matrix Variables</a>\n+     */\n+    String maybePathWithMatrixVariables();\n+\n     /**\n      * Returns the query of this {@link RequestTarget}.\n      */"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/common/SystemPropertyFlagsProvider.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -435,6 +435,11 @@ public Boolean allowDoubleDotsInQueryString() {\n         return getBoolean(\"allowDoubleDotsInQueryString\");\n     }\n \n+    @Override\n+    public Boolean allowSemicolonInPathComponent() {\n+        return getBoolean(\"allowSemicolonInPathComponent\");\n+    }\n+\n     @Override\n     public Path defaultMultipartUploadsLocation() {\n         return getAndParse(\"defaultMultipartUploadsLocation\", Paths::get);"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/internal/common/DefaultRequestTarget.java",
          "status": "modified",
          "additions": 80,
          "deletions": 34,
          "patch": "@@ -123,20 +123,22 @@ boolean mustPreserveEncoding(int cp) {\n             null,\n             null,\n             \"*\",\n+            \"*\",\n             null,\n             null);\n \n     /**\n      * The main implementation of {@link RequestTarget#forServer(String)}.\n      */\n     @Nullable\n-    public static RequestTarget forServer(String reqTarget, boolean allowDoubleDotsInQueryString) {\n+    public static RequestTarget forServer(String reqTarget, boolean allowSemicolonInPathComponent,\n+                                          boolean allowDoubleDotsInQueryString) {\n         final RequestTarget cached = RequestTargetCache.getForServer(reqTarget);\n         if (cached != null) {\n             return cached;\n         }\n \n-        return slowForServer(reqTarget, allowDoubleDotsInQueryString);\n+        return slowForServer(reqTarget, allowSemicolonInPathComponent, allowDoubleDotsInQueryString);\n     }\n \n     /**\n@@ -183,8 +185,9 @@ public static RequestTarget forClient(String reqTarget, @Nullable String prefix)\n      */\n     public static RequestTarget createWithoutValidation(\n             RequestTargetForm form, @Nullable String scheme, @Nullable String authority,\n-            String path, @Nullable String query, @Nullable String fragment) {\n-        return new DefaultRequestTarget(form, scheme, authority, path, query, fragment);\n+            String path, String pathWithMatrixVariables, @Nullable String query, @Nullable String fragment) {\n+        return new DefaultRequestTarget(\n+                form, scheme, authority, path, pathWithMatrixVariables, query, fragment);\n     }\n \n     private final RequestTargetForm form;\n@@ -193,14 +196,16 @@ public static RequestTarget createWithoutValidation(\n     @Nullable\n     private final String authority;\n     private final String path;\n+    private final String maybePathWithMatrixVariables;\n     @Nullable\n     private final String query;\n     @Nullable\n     private final String fragment;\n     private boolean cached;\n \n     private DefaultRequestTarget(RequestTargetForm form, @Nullable String scheme, @Nullable String authority,\n-                                 String path, @Nullable String query, @Nullable String fragment) {\n+                                 String path, String maybePathWithMatrixVariables,\n+                                 @Nullable String query, @Nullable String fragment) {\n \n         assert (scheme != null && authority != null) ||\n                (scheme == null && authority == null) : \"scheme: \" + scheme + \", authority: \" + authority;\n@@ -209,6 +214,7 @@ private DefaultRequestTarget(RequestTargetForm form, @Nullable String scheme, @N\n         this.scheme = scheme;\n         this.authority = authority;\n         this.path = path;\n+        this.maybePathWithMatrixVariables = maybePathWithMatrixVariables;\n         this.query = query;\n         this.fragment = fragment;\n     }\n@@ -233,6 +239,11 @@ public String path() {\n         return path;\n     }\n \n+    @Override\n+    public String maybePathWithMatrixVariables() {\n+        return maybePathWithMatrixVariables;\n+    }\n+\n     @Override\n     public String query() {\n         return query;\n@@ -258,18 +269,6 @@ public void setCached() {\n         cached = true;\n     }\n \n-    /**\n-     * Returns a copy of this {@link RequestTarget} with its {@link #path()} overridden with\n-     * the specified {@code path}.\n-     */\n-    public RequestTarget withPath(String path) {\n-        if (this.path == path) {\n-            return this;\n-        }\n-\n-        return new DefaultRequestTarget(form, scheme, authority, path, query, fragment);\n-    }\n-\n     @Override\n     public boolean equals(@Nullable Object o) {\n         if (this == o) {\n@@ -312,7 +311,8 @@ public String toString() {\n     }\n \n     @Nullable\n-    private static RequestTarget slowForServer(String reqTarget, boolean allowDoubleDotsInQueryString) {\n+    private static RequestTarget slowForServer(String reqTarget, boolean allowSemicolonInPathComponent,\n+                                               boolean allowDoubleDotsInQueryString) {\n         final Bytes path;\n         final Bytes query;\n \n@@ -321,18 +321,18 @@ private static RequestTarget slowForServer(String reqTarget, boolean allowDouble\n         if (queryPos >= 0) {\n             if ((path = decodePercentsAndEncodeToUtf8(\n                     reqTarget, 0, queryPos,\n-                    ComponentType.SERVER_PATH, null)) == null) {\n+                    ComponentType.SERVER_PATH, null, allowSemicolonInPathComponent)) == null) {\n                 return null;\n             }\n             if ((query = decodePercentsAndEncodeToUtf8(\n                     reqTarget, queryPos + 1, reqTarget.length(),\n-                    ComponentType.QUERY, EMPTY_BYTES)) == null) {\n+                    ComponentType.QUERY, EMPTY_BYTES, true)) == null) {\n                 return null;\n             }\n         } else {\n             if ((path = decodePercentsAndEncodeToUtf8(\n                     reqTarget, 0, reqTarget.length(),\n-                    ComponentType.SERVER_PATH, null)) == null) {\n+                    ComponentType.SERVER_PATH, null, allowSemicolonInPathComponent)) == null) {\n                 return null;\n             }\n             query = null;\n@@ -356,14 +356,58 @@ private static RequestTarget slowForServer(String reqTarget, boolean allowDouble\n             return null;\n         }\n \n+        final String encodedPath = encodePathToPercents(path);\n+        final String matrixVariablesRemovedPath;\n+        if (allowSemicolonInPathComponent) {\n+            matrixVariablesRemovedPath = encodedPath;\n+        } else {\n+            matrixVariablesRemovedPath = removeMatrixVariables(encodedPath);\n+            if (matrixVariablesRemovedPath == null) {\n+                return null;\n+            }\n+        }\n         return new DefaultRequestTarget(RequestTargetForm.ORIGIN,\n                                         null,\n                                         null,\n-                                        encodePathToPercents(path),\n+                                        matrixVariablesRemovedPath,\n+                                        encodedPath,\n                                         encodeQueryToPercents(query),\n                                         null);\n     }\n \n+    @Nullable\n+    public static String removeMatrixVariables(String path) {\n+        int semicolonIndex = path.indexOf(';');\n+        if (semicolonIndex < 0) {\n+            return path;\n+        }\n+        if (semicolonIndex == 0 || path.charAt(semicolonIndex - 1) == '/') {\n+            // Invalid matrix variable e.g. /;a=b/foo\n+            return null;\n+        }\n+        int subStringStartIndex = 0;\n+        try (TemporaryThreadLocals threadLocals = TemporaryThreadLocals.acquire()) {\n+            final StringBuilder sb = threadLocals.stringBuilder();\n+            for (;;) {\n+                sb.append(path, subStringStartIndex, semicolonIndex);\n+                final int slashIndex = path.indexOf('/', semicolonIndex + 1);\n+                if (slashIndex < 0) {\n+                    return sb.toString();\n+                }\n+                subStringStartIndex = slashIndex;\n+                semicolonIndex = path.indexOf(';', subStringStartIndex + 1);\n+                if (semicolonIndex < 0) {\n+                    sb.append(path, subStringStartIndex, path.length());\n+                    return sb.toString();\n+                }\n+                if (path.charAt(semicolonIndex - 1) == '/') {\n+                    // Invalid matrix variable e.g. /prefix/;a=b/foo\n+                    return null;\n+                }\n+            }\n+        }\n+    }\n+\n     @Nullable\n     private static RequestTarget slowAbsoluteFormForClient(String reqTarget, int authorityPos) {\n         // Extract scheme and authority while looking for path.\n@@ -396,7 +440,7 @@ private static RequestTarget slowAbsoluteFormForClient(String reqTarget, int aut\n                                             schemeAndAuthority.getScheme(),\n                                             schemeAndAuthority.getRawAuthority(),\n                                             \"/\",\n-                                            null,\n+                                            \"/\", null,\n                                             null);\n         }\n \n@@ -457,27 +501,27 @@ private static RequestTarget slowForClient(String reqTarget,\n         if (queryPos >= 0) {\n             if ((path = decodePercentsAndEncodeToUtf8(\n                     reqTarget, pathPos, queryPos,\n-                    ComponentType.CLIENT_PATH, SLASH_BYTES)) == null) {\n+                    ComponentType.CLIENT_PATH, SLASH_BYTES, true)) == null) {\n                 return null;\n             }\n \n             if (fragmentPos >= 0) {\n                 // path?query#fragment\n                 if ((query = decodePercentsAndEncodeToUtf8(\n                         reqTarget, queryPos + 1, fragmentPos,\n-                        ComponentType.QUERY, EMPTY_BYTES)) == null) {\n+                        ComponentType.QUERY, EMPTY_BYTES, true)) == null) {\n                     return null;\n                 }\n                 if ((fragment = decodePercentsAndEncodeToUtf8(\n                         reqTarget, fragmentPos + 1, reqTarget.length(),\n-                        ComponentType.FRAGMENT, EMPTY_BYTES)) == null) {\n+                        ComponentType.FRAGMENT, EMPTY_BYTES, true)) == null) {\n                     return null;\n                 }\n             } else {\n                 // path?query\n                 if ((query = decodePercentsAndEncodeToUtf8(\n                         reqTarget, queryPos + 1, reqTarget.length(),\n-                        ComponentType.QUERY, EMPTY_BYTES)) == null) {\n+                        ComponentType.QUERY, EMPTY_BYTES, true)) == null) {\n                     return null;\n                 }\n                 fragment = null;\n@@ -487,20 +531,20 @@ private static RequestTarget slowForClient(String reqTarget,\n                 // path#fragment\n                 if ((path = decodePercentsAndEncodeToUtf8(\n                         reqTarget, pathPos, fragmentPos,\n-                        ComponentType.CLIENT_PATH, EMPTY_BYTES)) == null) {\n+                        ComponentType.CLIENT_PATH, EMPTY_BYTES, true)) == null) {\n                     return null;\n                 }\n                 query = null;\n                 if ((fragment = decodePercentsAndEncodeToUtf8(\n                         reqTarget, fragmentPos + 1, reqTarget.length(),\n-                        ComponentType.FRAGMENT, EMPTY_BYTES)) == null) {\n+                        ComponentType.FRAGMENT, EMPTY_BYTES, true)) == null) {\n                     return null;\n                 }\n             } else {\n                 // path\n                 if ((path = decodePercentsAndEncodeToUtf8(\n                         reqTarget, pathPos, reqTarget.length(),\n-                        ComponentType.CLIENT_PATH, EMPTY_BYTES)) == null) {\n+                        ComponentType.CLIENT_PATH, EMPTY_BYTES, true)) == null) {\n                     return null;\n                 }\n                 query = null;\n@@ -529,14 +573,14 @@ private static RequestTarget slowForClient(String reqTarget,\n                                             schemeAndAuthority.getScheme(),\n                                             schemeAndAuthority.getRawAuthority(),\n                                             encodedPath,\n-                                            encodedQuery,\n+                                            encodedPath, encodedQuery,\n                                             encodedFragment);\n         } else {\n             return new DefaultRequestTarget(RequestTargetForm.ORIGIN,\n                                             null,\n                                             null,\n                                             encodedPath,\n-                                            encodedQuery,\n+                                            encodedPath, encodedQuery,\n                                             encodedFragment);\n         }\n     }\n@@ -577,7 +621,8 @@ private static boolean isRelativePath(Bytes path) {\n \n     @Nullable\n     private static Bytes decodePercentsAndEncodeToUtf8(String value, int start, int end,\n-                                                       ComponentType type, @Nullable Bytes whenEmpty) {\n+                                                       ComponentType type, @Nullable Bytes whenEmpty,\n+                                                       boolean allowSemicolonInPathComponent) {\n         final int length = end - start;\n         if (length == 0) {\n             return whenEmpty;\n@@ -605,7 +650,8 @@ private static Bytes decodePercentsAndEncodeToUtf8(String value, int start, int\n                 }\n \n                 final int decoded = (digit1 << 4) | digit2;\n-                if (type.mustPreserveEncoding(decoded)) {\n+                if (type.mustPreserveEncoding(decoded) ||\n+                    (!allowSemicolonInPathComponent && decoded == ';')) {\n                     buf.ensure(1);\n                     buf.addEncoded((byte) decoded);\n                     wasSlash = false;"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/internal/common/util/MappedPathUtil.java",
          "status": "added",
          "additions": 54,
          "deletions": 0,
          "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2023 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.util;\n+\n+import com.linecorp.armeria.common.RequestTarget;\n+import com.linecorp.armeria.common.annotation.Nullable;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+public final class MappedPathUtil {\n+\n+    /**\n+     * Returns the path with its prefix removed. Unlike {@link ServiceRequestContext#mappedPath()}, this method\n+     * returns the path with matrix variables if the mapped path contains matrix variables.\n+     * This returns {@code null} if the path has matrix variables in the prefix.\n+     */\n+    @Nullable\n+    public static String mappedPath(ServiceRequestContext ctx) {\n+        final RequestTarget requestTarget = ctx.routingContext().requestTarget();\n+        final String pathWithMatrixVariables = requestTarget.maybePathWithMatrixVariables();\n+        if (pathWithMatrixVariables.equals(ctx.path())) {\n+            return ctx.mappedPath();\n+        }\n+        // The request path contains matrix variables. e.g. \"/foo/bar/users;name=alice\"\n+\n+        final String prefix = ctx.path().substring(0, ctx.path().length() - ctx.mappedPath().length());\n+        // The prefix is now `/foo/bar`\n+        if (!pathWithMatrixVariables.startsWith(prefix)) {\n+            // The request path has matrix variables in the wrong place. e.g. \"/foo;name=alice/bar/users\"\n+            return null;\n+        }\n+        final String mappedPath = pathWithMatrixVariables.substring(prefix.length());\n+        if (mappedPath.charAt(0) != '/') {\n+            // Again, the request path has matrix variables in the wrong place. e.g. \"/foo/bar;/users\"\n+            return null;\n+        }\n+        return mappedPath;\n+    }\n+\n+    private MappedPathUtil() {}\n+}"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/server/ExactPathMapping.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.server;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.concatPaths;\n import static com.linecorp.armeria.internal.server.RouteUtil.ensureAbsolutePath;\n \n@@ -25,6 +26,7 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n \n+import com.linecorp.armeria.common.Flags;\n import com.linecorp.armeria.common.annotation.Nullable;\n \n final class ExactPathMapping extends AbstractPathMapping {\n@@ -38,6 +40,10 @@ final class ExactPathMapping extends AbstractPathMapping {\n     }\n \n     private ExactPathMapping(String prefix, String exactPath) {\n+        if (!Flags.allowSemicolonInPathComponent()) {\n+            checkArgument(prefix.indexOf(';') < 0, \"prefix: %s (expected not to have a ';')\", prefix);\n+            checkArgument(exactPath.indexOf(';') < 0, \"exactPath: %s (expected not to have a ';')\", exactPath);\n+        }\n         this.prefix = prefix;\n         this.exactPath = ensureAbsolutePath(exactPath, \"exactPath\");\n         paths = ImmutableList.of(exactPath, exactPath);"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/server/ParameterizedPathMapping.java",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.server;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.concatPaths;\n import static java.util.Objects.requireNonNull;\n \n@@ -32,6 +33,7 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n \n+import com.linecorp.armeria.common.Flags;\n import com.linecorp.armeria.common.annotation.Nullable;\n \n /**\n@@ -105,6 +107,11 @@ final class ParameterizedPathMapping extends AbstractPathMapping {\n     }\n \n     private ParameterizedPathMapping(String prefix, String pathPattern) {\n+        if (!Flags.allowSemicolonInPathComponent()) {\n+            checkArgument(prefix.indexOf(';') < 0, \"prefix: %s (expected not to have a ';')\", prefix);\n+            checkArgument(pathPattern.indexOf(';') < 0,\n+                          \"pathPattern: %s (expected not to have a ';')\", pathPattern);\n+        }\n         this.prefix = prefix;\n         requireNonNull(pathPattern, \"pathPattern\");\n "
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/server/PrefixPathMapping.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.server;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.concatPaths;\n import static com.linecorp.armeria.internal.server.RouteUtil.PREFIX;\n import static com.linecorp.armeria.internal.server.RouteUtil.ensureAbsolutePath;\n@@ -26,6 +27,7 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n \n+import com.linecorp.armeria.common.Flags;\n import com.linecorp.armeria.common.annotation.Nullable;\n \n final class PrefixPathMapping extends AbstractPathMapping {\n@@ -37,6 +39,8 @@ final class PrefixPathMapping extends AbstractPathMapping {\n     private final String strVal;\n \n     PrefixPathMapping(String prefix, boolean stripPrefix) {\n+        checkArgument(Flags.allowSemicolonInPathComponent() || prefix.indexOf(';') < 0,\n+                      \"prefix: %s (expected not to have a ';')\", prefix);\n         prefix = ensureAbsolutePath(prefix, \"prefix\");\n         if (!prefix.endsWith(\"/\")) {\n             prefix += '/';"
        },
        {
          "filename": "core/src/main/java/com/linecorp/armeria/server/RoutingContext.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.server;\n \n+import static com.linecorp.armeria.internal.common.DefaultRequestTarget.removeMatrixVariables;\n import static java.util.Objects.requireNonNull;\n \n import java.util.List;\n@@ -146,6 +147,7 @@ default RoutingContext withPath(String path) {\n                         oldReqTarget.form(),\n                         oldReqTarget.scheme(),\n                         oldReqTarget.authority(),\n+                        removeMatrixVariables(path),\n                         path,\n                         oldReqTarget.query(),\n                         oldReqTarget.fragment());"
        },
        {
          "filename": "core/src/test/java/com/linecorp/armeria/internal/common/DefaultRequestTargetTest.java",
          "status": "modified",
          "additions": 62,
          "deletions": 16,
          "patch": "@@ -16,9 +16,11 @@\n package com.linecorp.armeria.internal.common;\n \n import static com.google.common.base.Strings.emptyToNull;\n+import static com.linecorp.armeria.internal.common.DefaultRequestTarget.removeMatrixVariables;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n+import java.net.URISyntaxException;\n import java.util.Set;\n import java.util.stream.Stream;\n \n@@ -342,12 +344,14 @@ void shouldNormalizeAmpersand(Mode mode) {\n         assertAccepted(parse(mode, \"/%26?a=1%26a=2&b=3\"), \"/&\", \"a=1%26a=2&b=3\");\n     }\n \n-    @ParameterizedTest\n-    @EnumSource(Mode.class)\n-    void shouldNormalizeSemicolon(Mode mode) {\n-        assertAccepted(parse(mode, \"/;?a=b;c=d\"), \"/;\", \"a=b;c=d\");\n-        // '%3B' in a query string should never be decoded into ';'.\n-        assertAccepted(parse(mode, \"/%3b?a=b%3Bc=d\"), \"/;\", \"a=b%3Bc=d\");\n+    @Test\n+    void serverShouldRemoveMatrixVariablesWhenNotAllowed() {\n+        // Not allowed\n+        assertAccepted(forServer(\"/;a=b?c=d;e=f\"), \"/\", \"c=d;e=f\");\n+        // Allowed.\n+        assertAccepted(forServer(\"/;a=b?c=d;e=f\", true), \"/;a=b\", \"c=d;e=f\");\n+        // '%3B' should never be decoded into ';'.\n+        assertAccepted(forServer(\"/%3B?a=b%3Bc=d\"), \"/%3B\", \"a=b%3Bc=d\");\n     }\n \n     @ParameterizedTest\n@@ -359,12 +363,25 @@ void shouldNormalizeEqualSign(Mode mode) {\n     }\n \n     @Test\n-    void shouldReserveQuestionMark() {\n+    void shouldReserveQuestionMark() throws URISyntaxException {\n         // '%3F' must not be decoded into '?'.\n         assertAccepted(forServer(\"/abc%3F.json?a=%3F\"), \"/abc%3F.json\", \"a=%3F\");\n         assertAccepted(forClient(\"/abc%3F.json?a=%3F\"), \"/abc%3F.json\", \"a=%3F\");\n     }\n \n+    @Test\n+    void reserveSemicolonWhenAllowed() {\n+        // '%3B' is decoded into ';' when allowSemicolonInPathComponent is true.\n+        assertAccepted(forServer(\"/abc%3B?a=%3B\", true), \"/abc;\", \"a=%3B\");\n+        assertAccepted(forServer(\"/abc%3B?a=%3B\"), \"/abc%3B\", \"a=%3B\");\n+\n+        assertAccepted(forServer(\"/abc%3B\", true), \"/abc;\");\n+        assertAccepted(forServer(\"/abc%3B\"), \"/abc%3B\");\n+\n+        // Client always decodes '%3B' into ';'.\n+        assertAccepted(forClient(\"/abc%3B?a=%3B\"), \"/abc;\", \"a=%3B\");\n+    }\n+\n     @Test\n     void serverShouldNormalizePoundSign() {\n         // '#' must be encoded into '%23'.\n@@ -386,12 +403,12 @@ void clientShouldTreatPoundSignAsFragment() {\n \n     @Test\n     void serverShouldHandleReservedCharacters() {\n-        assertAccepted(forServer(\"/#/:@!$&'()*+,;=?a=/#/:[]@!$&'()*+,;=\"),\n-                       \"/%23/:@!$&'()*+,;=\",\n-                       \"a=/%23/:[]@!$&'()*+,;=\");\n+        assertAccepted(forServer(\"/#/:@!$&'()*+,=?a=/#/:[]@!$&'()*+,=\"),\n+                       \"/%23/:@!$&'()*+,=\",\n+                       \"a=/%23/:[]@!$&'()*+,=\");\n         assertAccepted(forServer(\"/%23%2F%3A%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%3F\" +\n                                  \"?a=%23%2F%3A%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%3F\"),\n-                       \"/%23%2F:@!$&'()*+,;=%3F\",\n+                       \"/%23%2F:@!$&'()*+,%3B=%3F\",\n                        \"a=%23%2F%3A%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%3F\");\n     }\n \n@@ -418,9 +435,9 @@ void shouldHandleDoubleQuote(Mode mode) {\n     @ParameterizedTest\n     @EnumSource(Mode.class)\n     void shouldHandleSquareBracketsInPath(Mode mode) {\n-        assertAccepted(parse(mode, \"/@/:[]!$&'()*+,;=\"), \"/@/:%5B%5D!$&'()*+,;=\");\n-        assertAccepted(parse(mode, \"/%40%2F%3A%5B%5D%21%24%26%27%28%29%2A%2B%2C%3B%3D%3F\"),\n-                       \"/@%2F:%5B%5D!$&'()*+,;=%3F\");\n+        assertAccepted(parse(mode, \"/@/:[]!$&'()*+,=\"), \"/@/:%5B%5D!$&'()*+,=\");\n+        assertAccepted(parse(mode, \"/%40%2F%3A%5B%5D%21%24%26%27%28%29%2A%2B%2C%3D%3F\"),\n+                       \"/@%2F:%5B%5D!$&'()*+,=%3F\");\n     }\n \n     @ParameterizedTest\n@@ -496,6 +513,35 @@ void testToString(Mode mode) {\n         }\n     }\n \n+    @Test\n+    void testRemoveMatrixVariables() {\n+        assertThat(removeMatrixVariables(\"/foo\")).isEqualTo(\"/foo\");\n+        assertThat(removeMatrixVariables(\"/foo;\")).isEqualTo(\"/foo\");\n+        assertThat(removeMatrixVariables(\"/foo/\")).isEqualTo(\"/foo/\");\n+        assertThat(removeMatrixVariables(\"/foo/bar\")).isEqualTo(\"/foo/bar\");\n+        assertThat(removeMatrixVariables(\"/foo/bar;\")).isEqualTo(\"/foo/bar\");\n+        assertThat(removeMatrixVariables(\"/foo/bar/\")).isEqualTo(\"/foo/bar/\");\n+        assertThat(removeMatrixVariables(\"/foo;/bar\")).isEqualTo(\"/foo/bar\");\n+        assertThat(removeMatrixVariables(\"/foo;/bar;\")).isEqualTo(\"/foo/bar\");\n+        assertThat(removeMatrixVariables(\"/foo;/bar/\")).isEqualTo(\"/foo/bar/\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar\")).isEqualTo(\"/foo/bar\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar;\")).isEqualTo(\"/foo/bar\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar/\")).isEqualTo(\"/foo/bar/\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar/baz\")).isEqualTo(\"/foo/bar/baz\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar/baz;\")).isEqualTo(\"/foo/bar/baz\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar/baz/\")).isEqualTo(\"/foo/bar/baz/\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar;/baz\")).isEqualTo(\"/foo/bar/baz\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar;/baz;\")).isEqualTo(\"/foo/bar/baz\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar;/baz/\")).isEqualTo(\"/foo/bar/baz/\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar;c=d/baz\")).isEqualTo(\"/foo/bar/baz\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar;c=d/baz;\")).isEqualTo(\"/foo/bar/baz\");\n+        assertThat(removeMatrixVariables(\"/foo;a=b/bar;c=d/baz/\")).isEqualTo(\"/foo/bar/baz/\");\n+\n+        // Invalid\n+        assertThat(removeMatrixVariables(\"/;a=b\")).isNull();\n+        assertThat(removeMatrixVariables(\"/prefix/;a=b\")).isNull();\n+    }\n+\n     private static void assertAccepted(@Nullable RequestTarget res, String expectedPath) {\n         assertAccepted(res, expectedPath, null, null);\n     }\n@@ -538,8 +584,8 @@ private static RequestTarget forServer(String rawPath) {\n     }\n \n     @Nullable\n-    private static RequestTarget forServer(String rawPath, boolean allowDoubleDotsInQueryString) {\n-        final RequestTarget res = DefaultRequestTarget.forServer(rawPath, allowDoubleDotsInQueryString);\n+    private static RequestTarget forServer(String rawPath, boolean allowSemicolonInPathComponent) {\n+        final RequestTarget res = DefaultRequestTarget.forServer(rawPath, allowSemicolonInPathComponent, false);\n         if (res != null) {\n             logger.info(\"forServer({}) => path: {}, query: {}\", rawPath, res.path(), res.query());\n         } else {"
        },
        {
          "filename": "core/src/test/java/com/linecorp/armeria/server/MatrixVariablesTest.java",
          "status": "added",
          "additions": 49,
          "deletions": 0,
          "patch": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2023 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.testing.junit5.server.ServerExtension;\n+import com.linecorp.armeria.testing.server.ServiceRequestContextCaptor;\n+\n+class MatrixVariablesTest {\n+    @RegisterExtension\n+    static final ServerExtension server = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.service(\"/foo\", (ctx, req) -> HttpResponse.of(200));\n+        }\n+    };\n+\n+    @Test\n+    void stripMatrixVariables() throws InterruptedException {\n+        final AggregatedHttpResponse response = server.blockingWebClient().get(\"/foo;a=b\");\n+        assertThat(response.headers().status()).isSameAs(HttpStatus.OK);\n+        final ServiceRequestContextCaptor captor = server.requestContextCaptor();\n+        final ServiceRequestContext sctx = captor.poll();\n+        assertThat(sctx.path()).isEqualTo(\"/foo\");\n+        assertThat(sctx.routingContext().requestTarget().maybePathWithMatrixVariables())\n+                .isEqualTo(\"/foo;a=b\");\n+    }\n+}"
        },
        {
          "filename": "core/src/test/java/com/linecorp/armeria/server/RouteTest.java",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -176,6 +176,20 @@ void invalidRoutePath() {\n         assertThatThrownBy(() -> Route.builder().path(\"foo:/bar\")).isInstanceOf(IllegalArgumentException.class);\n     }\n \n+    @Test\n+    void notAllowSemicolon() {\n+        assertThatThrownBy(() -> Route.builder().path(\"/foo;\")).isInstanceOf(\n+                IllegalArgumentException.class);\n+        assertThatThrownBy(() -> Route.builder().path(\"/foo/{bar};\")).isInstanceOf(\n+                IllegalArgumentException.class);\n+        assertThatThrownBy(() -> Route.builder().path(\"/bar/:baz;\")).isInstanceOf(\n+                IllegalArgumentException.class);\n+        assertThatThrownBy(() -> Route.builder().path(\"exact:/:foo/bar;\")).isInstanceOf(\n+                IllegalArgumentException.class);\n+        assertThatThrownBy(() -> Route.builder().path(\"prefix:/bar/baz;\")).isInstanceOf(\n+                IllegalArgumentException.class);\n+    }\n+\n     @Test\n     void testHeader() {\n         final Route route = Route.builder()"
        },
        {
          "filename": "it/spring/boot3-jetty11/build.gradle",
          "status": "added",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -0,0 +1,12 @@\n+dependencies {\n+    implementation project(':spring:boot3-starter')\n+    implementation project(':spring:boot3-actuator-starter')\n+    implementation project(':jetty11')\n+    implementation libs.slf4j2.api\n+    implementation libs.spring.boot3.starter.jetty\n+    implementation(libs.spring.boot3.starter.web) {\n+        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'\n+    }\n+    implementation libs.spring6.web\n+    testImplementation libs.spring.boot3.starter.test\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/ErrorHandlingController.java",
          "status": "added",
          "additions": 72,
          "deletions": 0,
          "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+import java.util.Map;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+@RestController\n+@RequestMapping(\"/error-handling\")\n+public class ErrorHandlingController {\n+\n+    @GetMapping(\"/runtime-exception\")\n+    public void runtimeException() {\n+        throw new RuntimeException(\"runtime exception\");\n+    }\n+\n+    @GetMapping(\"/custom-exception\")\n+    public void customException() {\n+        throw new CustomException();\n+    }\n+\n+    @GetMapping(\"/exception-handler\")\n+    public void exceptionHandler() {\n+        throw new BaseException(\"exception handler\");\n+    }\n+\n+    @GetMapping(\"/global-exception-handler\")\n+    public void globalExceptionHandler() {\n+        throw new GlobalBaseException(\"global exception handler\");\n+    }\n+\n+    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = \"custom not found\")\n+    private static class CustomException extends RuntimeException {}\n+\n+    private static class BaseException extends RuntimeException {\n+        BaseException(String message) {\n+            super(message);\n+        }\n+    }\n+\n+    @ExceptionHandler(BaseException.class)\n+    public ResponseEntity<Map<String, Object>> onBaseException(Throwable t) {\n+        final Map<String, Object> body = ImmutableMap.<String, Object>builder()\n+                                                     .put(\"status\", HttpStatus.INTERNAL_SERVER_ERROR.value())\n+                                                     .put(\"message\", t.getMessage())\n+                                                     .build();\n+        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(body);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/GlobalBaseException.java",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+public class GlobalBaseException extends RuntimeException {\n+    GlobalBaseException(String message) {\n+        super(message);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/GlobalExceptionHandler.java",
          "status": "added",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+import java.util.Map;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.RestControllerAdvice;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+@RestControllerAdvice\n+class GlobalExceptionHandler {\n+\n+    @ExceptionHandler(GlobalBaseException.class)\n+    public ResponseEntity<Map<String, Object>> onGlobalBaseException(Throwable t) {\n+        final String message = t.getMessage();\n+        final Map<String, Object> body = ImmutableMap.of(\"status\", HttpStatus.INTERNAL_SERVER_ERROR.value(),\n+                                                         \"message\", message);\n+        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(body);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/Greeting.java",
          "status": "added",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+public class Greeting {\n+\n+    private final String content;\n+\n+    /**\n+     * Greeting model.\n+     * @param content the content.\n+     */\n+    public Greeting(String content) {\n+        this.content = content;\n+    }\n+\n+    public String getContent() {\n+        return content;\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/GreetingController.java",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/greeting\")\n+public class GreetingController {\n+    private static final String template = \"Hello, %s!\";\n+\n+    /**\n+     * Greeting endpoint.\n+     * @param name name to greet.\n+     * @return response the ResponseEntity.\n+     */\n+    @GetMapping\n+    public ResponseEntity<Greeting> greetingSync(\n+            @RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n+        return ResponseEntity.ok(new Greeting(String.format(template, name)));\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/MatrixVariablesController.java",
          "status": "added",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2023 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+import java.util.List;\n+\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.MatrixVariable;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+@RestController\n+public final class MatrixVariablesController {\n+\n+    // GET /owners/42;q=11/pets/21;q=22\n+    // q1 = 11, q2 = 22\n+\n+    @GetMapping(\"/owners/{ownerId}/pets/{petId}\")\n+    List<Integer> findPet(\n+            @MatrixVariable(name = \"q\", pathVar = \"ownerId\") int q1,\n+            @MatrixVariable(name = \"q\", pathVar = \"petId\") int q2) {\n+        return ImmutableList.of(q1, q2);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/SpringJettyApplication.java",
          "status": "added",
          "additions": 85,
          "deletions": 0,
          "patch": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.WebAppContext;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.web.context.WebServerApplicationContext;\n+import org.springframework.boot.web.embedded.jetty.JettyServerCustomizer;\n+import org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory;\n+import org.springframework.boot.web.embedded.jetty.JettyWebServer;\n+import org.springframework.boot.web.server.WebServer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import com.linecorp.armeria.server.jetty.JettyService;\n+import com.linecorp.armeria.spring.ArmeriaServerConfigurator;\n+\n+import jakarta.servlet.Servlet;\n+\n+@SpringBootApplication\n+public class SpringJettyApplication {\n+\n+    /**\n+     * Bean to configure Armeria Jetty service.\n+     */\n+    @Bean\n+    public ArmeriaServerConfigurator armeriaTomcat(WebServerApplicationContext applicationContext) {\n+        final WebServer webServer = applicationContext.getWebServer();\n+        if (webServer instanceof JettyWebServer) {\n+            final Server jettyServer = ((JettyWebServer) webServer).getServer();\n+\n+            return serverBuilder -> serverBuilder.service(\"prefix:/jetty/api/rest/v1\",\n+                                                          JettyService.of(jettyServer));\n+        }\n+        return serverBuilder -> {};\n+    }\n+\n+    @Configuration(proxyBeanMethods = false)\n+    @ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n+    static class EmbeddedJetty {\n+\n+        @Bean\n+        JettyServletWebServerFactory jettyServletWebServerFactory(\n+                ObjectProvider<JettyServerCustomizer> serverCustomizers) {\n+            final JettyServletWebServerFactory factory = new ArmeriaJettyServletWebServerFactory();\n+            factory.getServerCustomizers().addAll(serverCustomizers.orderedStream().toList());\n+            return factory;\n+        }\n+    }\n+\n+    static final class ArmeriaJettyServletWebServerFactory extends JettyServletWebServerFactory {\n+\n+        @Override\n+        protected JettyWebServer getJettyWebServer(Server server) {\n+            return new JettyWebServer(server, true);\n+        }\n+    }\n+\n+    /**\n+     * Main method.\n+     * @param args program args.\n+     */\n+    public static void main(String[] args) {\n+        SpringApplication.run(SpringJettyApplication.class, args);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/java/com/linecorp/armeria/spring/jetty/package-info.java",
          "status": "added",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+@NonNullByDefault\n+package com.linecorp.armeria.spring.jetty;\n+\n+import com.linecorp.armeria.common.annotation.NonNullByDefault;"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/resources/application.properties",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "it/spring/boot3-jetty11/src/main/resources/config/application.yml",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+armeria:\n+  ports:\n+    - port: 0\n+      protocols: HTTP\n+server:\n+  error:\n+    include-message: always"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/test/java/com/linecorp/armeria/spring/jetty/ActuatorAutoConfigurationHealthGroupTest.java",
          "status": "added",
          "additions": 98,
          "deletions": 0,
          "patch": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2022 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring.jetty;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.server.LocalManagementPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.spring.LocalArmeriaPort;\n+\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles({ \"local\", \"healthGroupTest\" })\n+@DirtiesContext\n+@AutoConfigureMetrics\n+@EnableAutoConfiguration\n+class ActuatorAutoConfigurationHealthGroupTest {\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+    private static final TypeReference<Map<String, Object>> JSON_MAP = new TypeReference<>() {};\n+\n+    @LocalManagementPort\n+    private int managementPort;\n+    @LocalArmeriaPort\n+    private int armeriaPort;\n+\n+    private WebClient managementClient;\n+    private WebClient armeriaClient;\n+\n+    @BeforeEach\n+    void setUp() {\n+        managementClient = WebClient.builder(\"http://127.0.0.1:\" + managementPort).build();\n+        armeriaClient = WebClient.builder(\"http://127.0.0.1:\" + armeriaPort).build();\n+    }\n+\n+    @Test\n+    void testHealth() throws Exception {\n+        final AggregatedHttpResponse res = managementClient.get(\"/internal/actuator/health\").aggregate().join();\n+        assertUpStatus(res);\n+    }\n+\n+    @Test\n+    void additionalPath() throws Exception {\n+        String path = \"/internal/actuator/health/foo\";\n+        assertUpStatus(managementClient.get(path).aggregate().join());\n+        assertThat(armeriaClient.get(path).aggregate().join().status()).isSameAs(HttpStatus.NOT_FOUND);\n+\n+        path = \"/internal/actuator/health/bar\";\n+        assertUpStatus(managementClient.get(path).aggregate().join());\n+        assertThat(armeriaClient.get(path).aggregate().join().status()).isSameAs(HttpStatus.NOT_FOUND);\n+\n+        path = \"/foohealth\";\n+        assertUpStatus(managementClient.get(path).aggregate().join());\n+        assertThat(armeriaClient.get(path).aggregate().join().status()).isSameAs(HttpStatus.NOT_FOUND);\n+\n+        // barhealth is bound to Armeria port.\n+        path = \"/barhealth\";\n+        assertThat(managementClient.get(path).aggregate().join().status()).isSameAs(HttpStatus.NOT_FOUND);\n+        assertUpStatus(armeriaClient.get(path).aggregate().join());\n+    }\n+\n+    private static void assertUpStatus(AggregatedHttpResponse res) throws IOException {\n+        assertThat(res.status()).isEqualTo(HttpStatus.OK);\n+        assertThat(res.contentType().toString()).isEqualTo(\"application/vnd.spring-boot.actuator.v3+json\");\n+\n+        final Map<String, Object> values = OBJECT_MAPPER.readValue(res.content().array(), JSON_MAP);\n+        assertThat(values).containsEntry(\"status\", \"UP\");\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/test/java/com/linecorp/armeria/spring/jetty/ErrorHandlingTest.java",
          "status": "added",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2021 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+import static com.linecorp.armeria.spring.jetty.MatrixVariablesTest.JETTY_BASE_PATH;\n+import static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+\n+import com.linecorp.armeria.spring.LocalArmeriaPort;\n+\n+import jakarta.inject.Inject;\n+\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+class ErrorHandlingTest {\n+\n+    @LocalArmeriaPort\n+    private int port;\n+\n+    @Inject\n+    private TestRestTemplate restTemplate;\n+\n+    private static String jettyBaseUrlPath(int port) {\n+        return \"http://localhost:\" + port + JETTY_BASE_PATH;\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"/error-handling/runtime-exception, 500, jakarta.servlet.ServletException: \" +\n+            \"Request processing failed: java.lang.RuntimeException: runtime exception\",\n+            \"/error-handling/custom-exception, 404, custom not found\",\n+            \"/error-handling/exception-handler, 500, exception handler\",\n+            \"/error-handling/global-exception-handler, 500, global exception handler\"\n+    })\n+    void shouldReturnFormattedMessage(String path, int status, String message) throws Exception {\n+        final ResponseEntity<String> response =\n+                restTemplate.getForEntity(jettyBaseUrlPath(port) + path, String.class);\n+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.valueOf(status));\n+        assertThatJson(response.getBody()).node(\"status\").isEqualTo(status);\n+        assertThatJson(response.getBody()).node(\"message\").isEqualTo(message);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/test/java/com/linecorp/armeria/spring/jetty/MatrixVariablesTest.java",
          "status": "added",
          "additions": 60,
          "deletions": 0,
          "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2023 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring.jetty;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.spring.LocalArmeriaPort;\n+\n+/**\n+ * Integration test for <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html\">Matrix Variables</a>.\n+ */\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"testbed\")\n+class MatrixVariablesTest {\n+\n+    static final String JETTY_BASE_PATH = \"/jetty/api/rest/v1\";\n+\n+    @LocalArmeriaPort\n+    int port;\n+\n+    @Test\n+    void matrixVariablesPreserved() throws Exception {\n+        final WebClient client = WebClient.of(\"http://127.0.0.1:\" + port);\n+        final AggregatedHttpResponse response = client.blocking().get(\n+                JETTY_BASE_PATH + \"/owners/42;q=11/pets/21;q=22\");\n+        assertThat(response.contentUtf8()).isEqualTo(\"[11,22]\");\n+    }\n+\n+    @Test\n+    void wrongMatrixVariables() throws Exception {\n+        final WebClient client = WebClient.of(\"http://127.0.0.1:\" + port);\n+        AggregatedHttpResponse response = client.blocking().get(\n+                JETTY_BASE_PATH + \";/owners/42;q=11/pets/21;q=22\");\n+        assertThat(response.status()).isSameAs(HttpStatus.BAD_REQUEST);\n+\n+        response = client.blocking().get(\"/jetty;wrong=place/api/rest/v1/owners/42;q=11/pets/21;q=22\");\n+        assertThat(response.status()).isSameAs(HttpStatus.BAD_REQUEST);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/test/java/com/linecorp/armeria/spring/jetty/SpringJettyApplicationItTest.java",
          "status": "added",
          "additions": 86,
          "deletions": 0,
          "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2018 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.jetty;\n+\n+import static com.linecorp.armeria.spring.jetty.MatrixVariablesTest.JETTY_BASE_PATH;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import com.linecorp.armeria.server.Server;\n+import com.linecorp.armeria.server.ServerPort;\n+\n+import jakarta.inject.Inject;\n+\n+@ActiveProfiles(\"testbed\")\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+class SpringJettyApplicationItTest {\n+    @Inject\n+    private ApplicationContext applicationContext;\n+    @Inject\n+    private Server server;\n+    private int httpPort;\n+    @Inject\n+    private TestRestTemplate restTemplate;\n+    @Inject\n+    private GreetingController greetingController;\n+\n+    @BeforeEach\n+    public void init() throws Exception {\n+        httpPort = server.activePorts()\n+                         .values()\n+                         .stream()\n+                         .filter(ServerPort::hasHttp)\n+                         .findAny()\n+                         .get()\n+                         .localAddress()\n+                         .getPort();\n+    }\n+\n+    @Test\n+    void contextLoads() {\n+        assertThat(greetingController).isNotNull();\n+    }\n+\n+    @Test\n+    void greetingShouldReturnDefaultMessage() throws Exception {\n+        assertThat(restTemplate.getForObject(\"http://localhost:\" + httpPort + JETTY_BASE_PATH + \"/greeting\",\n+                                             String.class))\n+                .contains(\"Hello, World!\");\n+    }\n+\n+    @Test\n+    void greetingShouldReturnUsersMessage() throws Exception {\n+        assertThat(restTemplate.getForObject(\"http://localhost:\" + httpPort +\n+                                             JETTY_BASE_PATH + \"/greeting?name=Armeria\",\n+                                             String.class))\n+                .contains(\"Hello, Armeria!\");\n+    }\n+\n+    @Test\n+    void greetingShouldReturn404() throws Exception {\n+        assertThat(restTemplate.getForEntity(\"http://localhost:\" + httpPort + JETTY_BASE_PATH + \"/greet\",\n+                                             Void.class)\n+                               .getStatusCode().value()).isEqualByComparingTo(404);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/test/resources/application-healthGroupTest.yml",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+armeria:\n+  ports:\n+    - port: 0\n+      protocols: HTTP\n+\n+management:\n+  server:\n+    port: 0\n+  endpoints:\n+    web:\n+      exposure:\n+        include: health, prometheus\n+      base-path: /internal/actuator\n+  endpoint:\n+    health:\n+      group:\n+        foo:\n+          include: ping\n+          additional-path: \"management:/foohealth\"\n+        bar:\n+          include: ping\n+          additional-path: \"server:/barhealth\"\n+"
        },
        {
          "filename": "it/spring/boot3-jetty11/src/test/resources/application-testbed.yml",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+# This currently doesn't work. See https://github.com/line/armeria/issues/5039\n+server.port: -1\n+---\n+armeria:\n+  ports:\n+    - port: 0\n+      protocols: HTTP"
        },
        {
          "filename": "it/spring/boot3-tomcat10/src/main/java/com/linecorp/armeria/spring/tomcat/MatrixVariablesController.java",
          "status": "added",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2023 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.spring.tomcat;\n+\n+import java.util.List;\n+\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.MatrixVariable;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+@RestController\n+public final class MatrixVariablesController {\n+\n+    // GET /owners/42;q=11/pets/21;q=22\n+    // q1 = 11, q2 = 22\n+\n+    @GetMapping(\"/owners/{ownerId}/pets/{petId}\")\n+    List<Integer> findPet(\n+            @MatrixVariable(name = \"q\", pathVar = \"ownerId\") int q1,\n+            @MatrixVariable(name = \"q\", pathVar = \"petId\") int q2) {\n+        return ImmutableList.of(q1, q2);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-tomcat10/src/test/java/com/linecorp/armeria/spring/tomcat/ActuatorAutoConfigurationHealthGroupTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -46,8 +46,7 @@\n class ActuatorAutoConfigurationHealthGroupTest {\n \n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n-    private static final TypeReference<Map<String, Object>> JSON_MAP =\n-            new TypeReference<Map<String, Object>>() {};\n+    private static final TypeReference<Map<String, Object>> JSON_MAP = new TypeReference<>() {};\n \n     @LocalManagementPort\n     private int managementPort;"
        },
        {
          "filename": "it/spring/boot3-tomcat10/src/test/java/com/linecorp/armeria/spring/tomcat/ErrorHandlingTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.spring.tomcat;\n \n+import static com.linecorp.armeria.spring.tomcat.MatrixVariablesTest.TOMCAT_BASE_PATH;\n import static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson;\n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -34,8 +35,6 @@\n @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n class ErrorHandlingTest {\n \n-    private static final String TOMCAT_BASE_PATH = \"/tomcat/api/rest/v1\";\n-\n     @LocalArmeriaPort\n     private int port;\n "
        },
        {
          "filename": "it/spring/boot3-tomcat10/src/test/java/com/linecorp/armeria/spring/tomcat/MatrixVariablesTest.java",
          "status": "added",
          "additions": 60,
          "deletions": 0,
          "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2023 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring.tomcat;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.spring.LocalArmeriaPort;\n+\n+/**\n+ * Integration test for <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html\">Matrix Variables</a>.\n+ */\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"testbed\")\n+class MatrixVariablesTest {\n+\n+    static final String TOMCAT_BASE_PATH = \"/tomcat/api/rest/v1\";\n+\n+    @LocalArmeriaPort\n+    int port;\n+\n+    @Test\n+    void matrixVariablesPreserved() throws Exception {\n+        final WebClient client = WebClient.of(\"http://127.0.0.1:\" + port);\n+        final AggregatedHttpResponse response = client.blocking().get(\n+                TOMCAT_BASE_PATH + \"/owners/42;q=11/pets/21;q=22\");\n+        assertThat(response.contentUtf8()).isEqualTo(\"[11,22]\");\n+    }\n+\n+    @Test\n+    void wrongMatrixVariables() throws Exception {\n+        final WebClient client = WebClient.of(\"http://127.0.0.1:\" + port);\n+        AggregatedHttpResponse response = client.blocking().get(\n+                TOMCAT_BASE_PATH + \";/owners/42;q=11/pets/21;q=22\");\n+        assertThat(response.status()).isSameAs(HttpStatus.BAD_REQUEST);\n+\n+        response = client.blocking().get(\"/tomcat;wrong=place/api/rest/v1/owners/42;q=11/pets/21;q=22\");\n+        assertThat(response.status()).isSameAs(HttpStatus.BAD_REQUEST);\n+    }\n+}"
        },
        {
          "filename": "it/spring/boot3-tomcat10/src/test/resources/application-testbed.yml",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+# Prevent the embedded Tomcat from opening a TCP/IP port.\n+server.port: -1\n+---\n+armeria:\n+  ports:\n+    - port: 0\n+      protocols: HTTP"
        },
        {
          "filename": "jetty/jetty11/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java",
          "status": "modified",
          "additions": 22,
          "deletions": 6,
          "patch": "@@ -16,6 +16,7 @@\n \n package com.linecorp.armeria.server.jetty;\n \n+import static com.linecorp.armeria.internal.common.util.MappedPathUtil.mappedPath;\n import static java.util.Objects.requireNonNull;\n \n import java.nio.ByteBuffer;\n@@ -58,7 +59,9 @@\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.HttpResponseWriter;\n import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestTarget;\n import com.linecorp.armeria.common.ResponseHeaders;\n import com.linecorp.armeria.common.ResponseHeadersBuilder;\n import com.linecorp.armeria.common.annotation.Nullable;\n@@ -211,6 +214,13 @@ void stop() {\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final String mappedPath = mappedPath(ctx);\n+        if (mappedPath == null) {\n+            return HttpResponse.of(HttpStatus.BAD_REQUEST, MediaType.PLAIN_TEXT_UTF_8,\n+                                   \"Invalid matrix variable: \" +\n+                                   ctx.routingContext().requestTarget().maybePathWithMatrixVariables());\n+        }\n+\n         final ArmeriaConnector connector = this.connector;\n         assert connector != null;\n \n@@ -242,7 +252,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n                 });\n \n                 final Request jReq = httpChannel.getRequest();\n-                fillRequest(ctx, aReq, jReq);\n+                fillRequest(ctx, aReq, jReq, mappedPath);\n                 final SSLSession sslSession = ctx.sslSession();\n                 final boolean needsReverseDnsLookup;\n                 if (sslSession != null) {\n@@ -284,11 +294,11 @@ public ExchangeType exchangeType(RoutingContext routingContext) {\n     }\n \n     private static void fillRequest(\n-            ServiceRequestContext ctx, AggregatedHttpRequest aReq, Request jReq) {\n+            ServiceRequestContext ctx, AggregatedHttpRequest aReq, Request jReq, String mappedPath) {\n         DispatcherTypeUtil.setRequestType(jReq);\n         jReq.setAsyncSupported(true, null);\n         jReq.setSecure(ctx.sessionProtocol().isTls());\n-        jReq.setMetaData(toRequestMetadata(ctx, aReq));\n+        jReq.setMetaData(toRequestMetadata(ctx, aReq, mappedPath));\n         final HttpHeaders trailers = aReq.trailers();\n         if (!trailers.isEmpty()) {\n             final HttpField[] httpFields = trailers.stream()\n@@ -298,17 +308,23 @@ private static void fillRequest(\n         }\n     }\n \n-    private static MetaData.Request toRequestMetadata(ServiceRequestContext ctx, AggregatedHttpRequest aReq) {\n+    private static MetaData.Request toRequestMetadata(ServiceRequestContext ctx, AggregatedHttpRequest aReq,\n+                                                      String mappedPath) {\n         // Construct the HttpURI\n         final StringBuilder uriBuf = new StringBuilder();\n         final RequestHeaders aHeaders = aReq.headers();\n \n         uriBuf.append(ctx.sessionProtocol().isTls() ? \"https\" : \"http\");\n         uriBuf.append(\"://\");\n         uriBuf.append(aHeaders.authority());\n-        uriBuf.append(aHeaders.path());\n \n-        final HttpURI uri = HttpURI.build(HttpURI.build(uriBuf.toString()).path(ctx.mappedPath()))\n+        final RequestTarget requestTarget = ctx.routingContext().requestTarget();\n+        if (requestTarget.query() != null) {\n+            mappedPath = mappedPath + '?' + requestTarget.query();\n+        }\n+        uriBuf.append(mappedPath);\n+\n+        final HttpURI uri = HttpURI.build(HttpURI.build(uriBuf.toString()))\n                                    .asImmutable();\n         final HttpField[] fields = aHeaders.stream().map(header -> {\n             final AsciiString k = header.getKey();"
        },
        {
          "filename": "jetty/jetty9/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@\n package com.linecorp.armeria.server.jetty;\n \n import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.toHttp1Headers;\n+import static com.linecorp.armeria.internal.common.util.MappedPathUtil.mappedPath;\n import static java.util.Objects.requireNonNull;\n \n import java.lang.invoke.MethodHandle;\n@@ -54,6 +55,7 @@\n import com.linecorp.armeria.common.HttpResponse;\n import com.linecorp.armeria.common.HttpResponseWriter;\n import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.MediaType;\n import com.linecorp.armeria.common.RequestHeaders;\n import com.linecorp.armeria.common.ResponseHeaders;\n import com.linecorp.armeria.common.ResponseHeadersBuilder;\n@@ -256,6 +258,12 @@ void stop() {\n \n     @Override\n     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\n+        final String mappedPath = mappedPath(ctx);\n+        if (mappedPath == null) {\n+            return HttpResponse.of(HttpStatus.BAD_REQUEST, MediaType.PLAIN_TEXT_UTF_8,\n+                                   \"Invalid matrix variable: \" +\n+                                   ctx.routingContext().requestTarget().maybePathWithMatrixVariables());\n+        }\n         final ArmeriaConnector connector = this.connector;\n         assert connector != null;\n "
        },
        {
          "filename": "settings.gradle",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -153,6 +153,7 @@ includeWithFlags ':it:nio',                                    'java', 'relocate\n includeWithFlags ':it:okhttp',                                 'java', 'relocate'\n includeWithFlags ':it:resilience4j',                           'java17', 'relocate'\n includeWithFlags ':it:server',                                 'java', 'relocate'\n+includeWithFlags ':it:spring:boot3-jetty11',                   'java17', 'relocate'\n includeWithFlags ':it:spring:boot3-kotlin',                    'java17', 'relocate', 'kotlin'\n includeWithFlags ':it:spring:boot3-mixed',                     'java17', 'relocate'\n includeWithFlags ':it:spring:boot3-mixed-tomcat10',            'java17', 'relocate'"
        },
        {
          "filename": "spring/boot3-webflux-autoconfigure/build.gradle",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@ dependencies {\n     testImplementation project(':spring:boot3-actuator-autoconfigure')\n     testImplementation project(':thrift0.18')\n     testImplementation libs.spring.boot3.starter.test\n+    testImplementation libs.spring6.web\n     // Added for sharing test suites with boot2\n     testImplementation libs.javax.inject\n }"
        },
        {
          "filename": "spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpRequest.java",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -41,6 +41,7 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.RequestTarget;\n import com.linecorp.armeria.common.annotation.Nullable;\n import com.linecorp.armeria.server.ServiceRequestContext;\n \n@@ -60,7 +61,7 @@ final class ArmeriaServerHttpRequest extends AbstractServerHttpRequest {\n     ArmeriaServerHttpRequest(ServiceRequestContext ctx,\n                              HttpRequest req,\n                              DataBufferFactoryWrapper<?> factoryWrapper) {\n-        super(uri(req), null, springHeaders(req.headers()));\n+        super(uri(ctx, req), null, springHeaders(req.headers()));\n         this.ctx = requireNonNull(ctx, \"ctx\");\n         this.req = req;\n \n@@ -76,13 +77,18 @@ private static HttpHeaders springHeaders(RequestHeaders headers) {\n         return springHeaders;\n     }\n \n-    private static URI uri(HttpRequest req) {\n+    private static URI uri(ServiceRequestContext ctx, HttpRequest req) {\n         final String scheme = req.scheme();\n         final String authority = req.authority();\n         // Server side Armeria HTTP request always has the scheme and authority.\n         assert scheme != null;\n         assert authority != null;\n-        return URI.create(scheme + \"://\" + authority + req.path());\n+        final RequestTarget requestTarget = ctx.routingContext().requestTarget();\n+        String path = requestTarget.maybePathWithMatrixVariables();\n+        if (requestTarget.query() != null) {\n+            path = path + '?' + requestTarget.query();\n+        }\n+        return URI.create(scheme + \"://\" + authority + path);\n     }\n \n     @Override"
        },
        {
          "filename": "spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/MatrixVariablesTest.java",
          "status": "added",
          "additions": 68,
          "deletions": 0,
          "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2023 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.spring.web.reactive;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.boot.test.web.server.LocalServerPort;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.MatrixVariable;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+\n+import reactor.core.publisher.Flux;\n+\n+/**\n+ * Integration test for <a href=\"https://docs.spring.io/spring-framework/reference/web/webflux/controller/ann-methods/matrix-variables.html\">Matrix Variables</a>.\n+ */\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+class MatrixVariablesTest {\n+\n+    @SpringBootApplication\n+    @Configuration\n+    static class TestConfiguration {\n+        @RestController\n+        static class TestController {\n+\n+            // GET /owners/42;q=11/pets/21;q=22\n+            // q1 = 11, q2 = 22\n+\n+            @GetMapping(\"/owners/{ownerId}/pets/{petId}\")\n+            Flux<Integer> findPet(\n+                    @MatrixVariable(name = \"q\", pathVar = \"ownerId\") int q1,\n+                    @MatrixVariable(name = \"q\", pathVar = \"petId\") int q2) {\n+                return Flux.just(q1, q2);\n+            }\n+        }\n+    }\n+\n+    @LocalServerPort\n+    int port;\n+\n+    @Test\n+    void foo() throws Exception {\n+        final WebClient client = WebClient.of(\"http://127.0.0.1:\" + port);\n+        final AggregatedHttpResponse response = client.blocking().get(\"/owners/42;q=11/pets/21;q=22\");\n+        assertThat(response.contentUtf8()).isEqualTo(\"[11,22]\");\n+    }\n+}"
        },
        {
          "filename": "tomcat10/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -17,6 +17,7 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.toHttp1Headers;\n+import static com.linecorp.armeria.internal.common.util.MappedPathUtil.mappedPath;\n import static java.util.Objects.requireNonNull;\n \n import java.io.File;\n@@ -378,6 +379,13 @@ public final HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) thro\n             return HttpResponse.of(HttpStatus.SERVICE_UNAVAILABLE);\n         }\n \n+        final String mappedPath = mappedPath(ctx);\n+        if (mappedPath == null) {\n+            return HttpResponse.of(HttpStatus.BAD_REQUEST, MediaType.PLAIN_TEXT_UTF_8,\n+                                   \"Invalid matrix variable: \" +\n+                                   ctx.routingContext().requestTarget().maybePathWithMatrixVariables());\n+        }\n+\n         final HttpResponseWriter res = HttpResponse.streaming();\n         req.aggregate().handle((aReq, cause) -> {\n             try {\n@@ -396,7 +404,7 @@ public final HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) thro\n                 }\n \n                 final ArmeriaProcessor processor = createProcessor(coyoteAdapter);\n-                final Request coyoteReq = convertRequest(ctx, aReq, processor.getRequest());\n+                final Request coyoteReq = convertRequest(ctx, mappedPath, aReq, processor.getRequest());\n                 if (coyoteReq == null) {\n                     if (res.tryWrite(INVALID_AUTHORITY_HEADERS)) {\n                         if (res.tryWrite(INVALID_AUTHORITY_DATA)) {\n@@ -471,10 +479,8 @@ private static ArmeriaProcessor createProcessor(Adapter coyoteAdapter) throws Th\n     }\n \n     @Nullable\n-    private Request convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest req,\n+    private Request convertRequest(ServiceRequestContext ctx, String mappedPath, AggregatedHttpRequest req,\n                                    Request coyoteReq) throws Throwable {\n-        final String mappedPath = ctx.mappedPath();\n-\n         coyoteReq.scheme().setString(req.scheme());\n \n         // Set the start time which is used by Tomcat access logging"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 10,
        "dependency_files": 0,
        "test_files": 14,
        "unique_directories": 22,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a2fd1d3304f7198268d1c25ac335238813ca0a8a",
            "date": "2025-01-22T10:06:04Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "df2c0e9f5fdea5357f2520bd7f8f70435535a5d8",
            "date": "2025-01-17T10:06:51Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "d72c4ce2eec13aacf1358c6a5299095605c6589f",
            "date": "2025-01-15T07:18:10Z",
            "author_login": "jrhee17"
          },
          {
            "sha": "65629276366b5eb7c1094bb492759789094f437a",
            "date": "2025-01-14T02:52:48Z",
            "author_login": "ikhoon"
          },
          {
            "sha": "8ae035e0b7f42e314c35a2148e75df9558465735",
            "date": "2025-01-14T02:51:54Z",
            "author_login": "minwoox"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-863",
    "description": "Armeria is a microservice framework Spring supports Matrix variables. When Spring integration is used, Armeria calls Spring controllers via `TomcatService` or `JettyService` with the path that may contain matrix variables. Prior to version 1.24.3, the Armeria decorators might not invoked because of the matrix variables. If an attacker sends a specially crafted request, the request may bypass the authorizer. Version 1.24.3 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-25T21:15:10.913",
    "last_modified": "2024-11-21T08:13:41.243",
    "fix_date": "2023-07-25T06:37:02Z"
  },
  "references": [
    {
      "url": "https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/line/armeria/commit/039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/line/armeria/security/advisories/GHSA-wvp2-9ppw-337j",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/line/armeria/commit/039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/line/armeria/security/advisories/GHSA-wvp2-9ppw-337j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.272645",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "armeria",
    "owner": "line",
    "created_at": "2015-11-16T04:04:01Z",
    "updated_at": "2025-01-25T14:18:47Z",
    "pushed_at": "2025-01-24T01:20:48Z",
    "size": 246199,
    "stars": 4855,
    "forks": 926,
    "open_issues": 685,
    "watchers": 4855,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 21624336,
      "MDX": 1120492,
      "TypeScript": 278598,
      "Thrift": 257694,
      "Scala": 238820,
      "Kotlin": 156259,
      "Less": 35351,
      "JavaScript": 26455,
      "Shell": 2062,
      "HTML": 1222,
      "CSS": 820
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:40:02.645236"
  }
}