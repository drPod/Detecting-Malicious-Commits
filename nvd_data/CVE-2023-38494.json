{
  "cve_id": "CVE-2023-38494",
  "github_data": {
    "repository": "metersphere/metersphere",
    "fix_commit": "a23f75d93b666901fd148d834df9384f6f24cf28",
    "related_commits": [
      "a23f75d93b666901fd148d834df9384f6f24cf28",
      "a23f75d93b666901fd148d834df9384f6f24cf28"
    ],
    "patch_url": "https://github.com/metersphere/metersphere/commit/a23f75d93b666901fd148d834df9384f6f24cf28.patch",
    "fix_commit_details": {
      "sha": "a23f75d93b666901fd148d834df9384f6f24cf28",
      "commit_date": "2023-07-20T06:38:44Z",
      "author": {
        "login": "liuruibin",
        "type": "User",
        "stats": {
          "total_commits": 3453,
          "average_weekly_commits": 13.332046332046332,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 238
        }
      },
      "commit_message": {
        "title": "fix: \u589e\u52a0\u7528\u6237\u7ec4\u63a5\u53e3\u7684\u6743\u9650\u6821\u9a8c",
        "length": 17,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 51,
        "additions": 39,
        "deletions": 12
      },
      "files": [
        {
          "filename": "framework/sdk-parent/sdk/src/main/java/io/metersphere/controller/BaseUserController.java",
          "status": "modified",
          "additions": 26,
          "deletions": 4,
          "patch": "@@ -1,8 +1,11 @@\n package io.metersphere.controller;\n \n import io.metersphere.base.domain.User;\n+import io.metersphere.base.domain.UserGroup;\n import io.metersphere.commons.constants.OperLogConstants;\n import io.metersphere.commons.constants.OperLogModule;\n+import io.metersphere.commons.constants.UserGroupConstants;\n+import io.metersphere.commons.user.SessionUser;\n import io.metersphere.commons.utils.SessionUtils;\n import io.metersphere.dto.UserDTO;\n import io.metersphere.log.annotation.MsAuditLog;\n@@ -11,12 +14,10 @@\n import io.metersphere.request.member.EditSeleniumServerRequest;\n import io.metersphere.request.member.QueryMemberRequest;\n import io.metersphere.service.BaseUserService;\n+import jakarta.annotation.Resource;\n import org.springframework.web.bind.annotation.*;\n \n-import jakarta.annotation.Resource;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n+import java.util.*;\n \n @RestController\n @RequestMapping(\"/user\")\n@@ -26,6 +27,13 @@ public class BaseUserController {\n \n     @GetMapping(\"/ws/current/member/list\")\n     public List<User> getCurrentWorkspaceMember() {\n+        SessionUser user = SessionUtils.getUser();\n+        Optional<UserGroup> any = user.getUserGroups().stream()\n+                .filter(ug -> (ug.getSourceId().equals(SessionUtils.getCurrentWorkspaceId()) || ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n+                .findAny();\n+        if (any.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n         QueryMemberRequest request = new QueryMemberRequest();\n         request.setWorkspaceId(SessionUtils.getCurrentWorkspaceId());\n         return baseUserService.getMemberList(request);\n@@ -56,6 +64,13 @@ public int updateCurrentUserPassword(@RequestBody EditPassWordRequest request) {\n \n     @GetMapping(\"/project/member/list\")\n     public List<User> getProjectMemberListAll() {\n+        SessionUser user = SessionUtils.getUser();\n+        Optional<UserGroup> any = user.getUserGroups().stream()\n+                .filter(ug -> (ug.getSourceId().equals(SessionUtils.getCurrentProjectId()) || ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n+                .findAny();\n+        if (any.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n         QueryMemberRequest request = new QueryMemberRequest();\n         request.setProjectId(SessionUtils.getCurrentProjectId());\n         return baseUserService.getProjectMemberList(request);\n@@ -68,6 +83,13 @@ public List<User> getProjectMemberOption() {\n \n     @GetMapping(\"/project/member/{projectId}\")\n     public List<User> getProjectMembers(@PathVariable String projectId) {\n+        SessionUser user = SessionUtils.getUser();\n+        Optional<UserGroup> any = user.getUserGroups().stream()\n+                .filter(ug -> (ug.getSourceId().equals(projectId) || ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n+                .findAny();\n+        if (any.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n         QueryMemberRequest request = new QueryMemberRequest();\n         request.setProjectId(projectId);\n         return baseUserService.getProjectMemberList(request);"
        },
        {
          "filename": "project-management/backend/src/main/java/io/metersphere/controller/GroupController.java",
          "status": "modified",
          "additions": 0,
          "deletions": 5,
          "patch": "@@ -91,11 +91,6 @@ public void editGroupPermission(@RequestBody EditGroupRequest editGroupRequest)\n         groupService.editGroupPermission(editGroupRequest);\n     }\n \n-    @GetMapping(\"/all/{userId}\")\n-    public List<Map<String, Object>> getAllUserGroup(@PathVariable(\"userId\") String userId) {\n-        return groupService.getAllUserGroup(userId);\n-    }\n-\n     @PostMapping(\"/list\")\n     public List<Group> getGroupsByType(@RequestBody GroupRequest request) {\n         return groupService.getGroupsByType(request);"
        },
        {
          "filename": "system-setting/backend/src/main/java/io/metersphere/controller/GroupController.java",
          "status": "modified",
          "additions": 13,
          "deletions": 3,
          "patch": "@@ -4,10 +4,13 @@\n import com.github.pagehelper.PageHelper;\n import io.metersphere.base.domain.Group;\n import io.metersphere.base.domain.User;\n+import io.metersphere.base.domain.UserGroup;\n import io.metersphere.base.domain.Workspace;\n import io.metersphere.commons.constants.OperLogConstants;\n import io.metersphere.commons.constants.OperLogModule;\n import io.metersphere.commons.constants.PermissionConstants;\n+import io.metersphere.commons.constants.UserGroupConstants;\n+import io.metersphere.commons.user.SessionUser;\n import io.metersphere.commons.utils.PageUtils;\n import io.metersphere.commons.utils.Pager;\n import io.metersphere.commons.utils.SessionUtils;\n@@ -25,9 +28,8 @@\n import org.springframework.web.bind.annotation.*;\n \n import jakarta.annotation.Resource;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.UUID;\n+\n+import java.util.*;\n \n \n @RequestMapping(\"/user/group\")\n@@ -47,6 +49,13 @@ public Pager<List<GroupDTO>> getGroupList(@PathVariable int goPage, @PathVariabl\n \n     @GetMapping(\"/get/all\")\n     public List<GroupDTO> getAllGroup() {\n+        SessionUser user = SessionUtils.getUser();\n+        Optional<UserGroup> any = user.getUserGroups().stream()\n+                .filter(ug -> (ug.getGroupId().equals(UserGroupConstants.SUPER_GROUP)))\n+                .findAny();\n+        if (any.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n         return groupService.getAllGroup();\n     }\n \n@@ -91,6 +100,7 @@ public void editGroupPermission(@RequestBody EditGroupRequest editGroupRequest)\n     }\n \n     @GetMapping(\"/all/{userId}\")\n+    @RequiresPermissions(PermissionConstants.SYSTEM_USER_READ_EDIT)\n     public List<Map<String, Object>> getAllUserGroup(@PathVariable(\"userId\") String userId) {\n         return groupService.getAllUserGroup(userId);\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "653f522d0e219c624af3ef3ecaa9ae6565b9e599",
            "date": "2025-01-14T09:32:51Z",
            "author_login": "1myuan"
          },
          {
            "sha": "fc5888fa67df817aaf48d742c5e3b55f4f134243",
            "date": "2025-01-14T09:09:07Z",
            "author_login": "fit2cloudwxx"
          },
          {
            "sha": "a3743df4fc81b8386543872c2d9b8f48bff811f0",
            "date": "2025-01-14T08:22:03Z",
            "author_login": "1myuan"
          },
          {
            "sha": "ab8123aad19bb7b8afb29ad399c02d03385c81d9",
            "date": "2025-01-14T07:33:50Z",
            "author_login": "ba1q1"
          },
          {
            "sha": "30baab90bf337463b6b2beb9c6f21aacf8fac878",
            "date": "2025-01-14T07:15:37Z",
            "author_login": "AgAngle"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:H",
    "cwe_id": "CWE-200",
    "description": "MeterSphere is an open-source continuous testing platform. Prior to version 2.10.4 LTS, some interfaces of the Cloud version of MeterSphere do not have configuration permissions, and are sensitively leaked by attackers. Version 2.10.4 LTS contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-08-04T16:15:10.177",
    "last_modified": "2024-11-21T08:13:41.380",
    "fix_date": "2023-07-20T06:38:44Z"
  },
  "references": [
    {
      "url": "https://github.com/metersphere/metersphere/commit/a23f75d93b666901fd148d834df9384f6f24cf28",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/metersphere/metersphere/security/advisories/GHSA-fjp5-95pv-5253",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/metersphere/metersphere/commit/a23f75d93b666901fd148d834df9384f6f24cf28",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/metersphere/metersphere/security/advisories/GHSA-fjp5-95pv-5253",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.295296",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "metersphere",
    "owner": "metersphere",
    "created_at": "2020-02-03T02:06:12Z",
    "updated_at": "2025-01-14T10:03:08Z",
    "pushed_at": "2025-01-14T10:23:16Z",
    "size": 420461,
    "stars": 11802,
    "forks": 2623,
    "open_issues": 28,
    "watchers": 11802,
    "has_security_policy": false,
    "default_branch": "v3.x",
    "protected_branches": [
      "v1.0",
      "v1.1",
      "v1.2",
      "v1.3",
      "v1.4",
      "v1.5",
      "v1.6",
      "v1.7",
      "v1.8",
      "v1.9",
      "v1.10",
      "v1.11",
      "v1.12",
      "v1.13",
      "v1.14",
      "v1.15",
      "v1.16",
      "v1.17",
      "v1.18",
      "v1.19",
      "v1.20",
      "v2.0",
      "v2.1",
      "v2.2",
      "v2.3",
      "v2.4",
      "v2.5",
      "v2.6",
      "v2.7"
    ],
    "languages": {
      "Java": 14777352,
      "Vue": 5726299,
      "TypeScript": 1960656,
      "MAXScript": 77425,
      "Less": 39452,
      "JavaScript": 34573,
      "CSS": 23345,
      "Dockerfile": 993,
      "HTML": 538,
      "Shell": 181
    },
    "commit_activity": {
      "total_commits_last_year": 4873,
      "avg_commits_per_week": 93.71153846153847,
      "days_active_last_year": 273
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:44:08.370799"
  }
}