{
  "cve_id": "CVE-2023-38499",
  "github_data": {
    "repository": "TYPO3/typo3",
    "fix_commit": "702e2debd4b28f9cdb540544565fe6a8627ccb6a",
    "related_commits": [
      "702e2debd4b28f9cdb540544565fe6a8627ccb6a",
      "702e2debd4b28f9cdb540544565fe6a8627ccb6a"
    ],
    "patch_url": "https://github.com/TYPO3/typo3/commit/702e2debd4b28f9cdb540544565fe6a8627ccb6a.patch",
    "fix_commit_details": {
      "sha": "702e2debd4b28f9cdb540544565fe6a8627ccb6a",
      "commit_date": "2023-07-25T08:03:49Z",
      "author": {
        "login": "ohader",
        "type": "User",
        "stats": {
          "total_commits": 1840,
          "average_weekly_commits": 1.6546762589928057,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 513
        }
      },
      "commit_message": {
        "title": "[SECURITY] Avoid out-of-scope page access for non-matching site",
        "length": 1045,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 482,
        "additions": 416,
        "deletions": 66
      },
      "files": [
        {
          "filename": "typo3/sysext/core/Classes/Routing/SiteMatcher.php",
          "status": "modified",
          "additions": 119,
          "deletions": 59,
          "patch": "@@ -18,9 +18,11 @@\n namespace TYPO3\\CMS\\Core\\Routing;\n \n use Psr\\Http\\Message\\ServerRequestInterface;\n+use Psr\\Http\\Message\\UriInterface;\n use Symfony\\Component\\Routing\\Exception\\NoConfigurationException;\n use Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;\n use TYPO3\\CMS\\Core\\Cache\\CacheManager;\n+use TYPO3\\CMS\\Core\\Configuration\\Features;\n use TYPO3\\CMS\\Core\\Exception\\SiteNotFoundException;\n use TYPO3\\CMS\\Core\\Http\\NormalizedParams;\n use TYPO3\\CMS\\Core\\SingletonInterface;\n@@ -48,6 +50,7 @@\n class SiteMatcher implements SingletonInterface\n {\n     public function __construct(\n+        protected readonly Features $features,\n         protected readonly SiteFinder $finder,\n         protected readonly RequestContextFactory $requestContextFactory\n     ) {\n@@ -79,75 +82,42 @@ public function refresh()\n      */\n     public function matchRequest(ServerRequestInterface $request): RouteResultInterface\n     {\n-        $site = new NullSite();\n-        $language = null;\n-        $defaultLanguage = null;\n+        // Remove script file name (index.php) from request uri\n+        $uri = $this->canonicalizeUri($request->getUri(), $request);\n+        $pageId = $this->resolvePageIdQueryParam($request);\n+        $languageId = $this->resolveLanguageIdQueryParam($request);\n \n-        $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? 0;\n+        $routeResult = $this->matchSiteByUri($uri, $request);\n \n-        // First, check if we have a _GET/_POST parameter for \"id\", then a site information can be resolved based.\n-        if ($pageId > 0) {\n-            // Loop over the whole rootline without permissions to get the actual site information\n-            try {\n-                $site = $this->finder->getSiteByPageId((int)$pageId);\n-                // If a \"L\" parameter is given, we take that one into account.\n-                $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;\n-                if ($languageId !== null) {\n-                    $language = $site->getLanguageById((int)$languageId);\n-                } else {\n-                    // Use this later below\n-                    $defaultLanguage = $site->getDefaultLanguage();\n-                }\n-            } catch (SiteNotFoundException $e) {\n-                // No site found by the given page\n-            } catch (\\InvalidArgumentException $e) {\n-                // The language fetched by getLanguageById() was not available, now the PSR-15 middleware\n-                // redirects to the default page.\n-            }\n+        // Allow insecure pageId based site resolution if explicitly enabled and only if both, ?id= and ?L= are defined\n+        // (pageId based site resolution without L parameter has always been prohibited, so we do not support that)\n+        if (\n+            $this->features->isFeatureEnabled('security.frontend.allowInsecureSiteResolutionByQueryParameters') &&\n+            $pageId !== null && $languageId !== null\n+        ) {\n+            return $this->matchSiteByQueryParams($pageId, $languageId, $routeResult, $uri);\n         }\n \n-        $uri = $request->getUri();\n-        if (!empty($uri->getPath())) {\n-            $normalizedParams = $request->getAttribute('normalizedParams');\n-            if ($normalizedParams instanceof NormalizedParams) {\n-                $urlPath = ltrim($uri->getPath(), '/');\n-                $scriptName = ltrim($normalizedParams->getScriptName(), '/');\n-                $scriptPath = ltrim($normalizedParams->getSitePath(), '/');\n-                if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {\n-                    $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));\n-                    $uri = $uri->withPath($urlPath);\n-                }\n-            }\n+        // Allow the default language to be resolved in case all languages use a prefix\n+        // and therefore did not match based on path if an explicit pageId is given,\n+        // (example \"https://www.example.com/?id=..\" was entered, but all languages have \"https://www.example.com/lang-key/\")\n+        // @todo remove this fallback, in order for SiteBaseRedirectResolver to produce a redirect instead (requires functionals to be adapted)\n+        if ($pageId !== null && $routeResult->getLanguage() === null) {\n+            $routeResult = $routeResult->withLanguage($routeResult->getSite()->getDefaultLanguage());\n         }\n \n-        // No language found at this point means that the URL was not used with a valid \"?id=1&L=2\" parameter\n-        // which resulted in a site / language combination that was found. Now, the matching is done\n-        // on the incoming URL.\n-        if (!($language instanceof SiteLanguage)) {\n-            $collection = $this->getRouteCollectionForAllSites();\n-            $requestContext = $this->requestContextFactory->fromUri($uri, $request->getMethod());\n-            $matcher = new BestUrlMatcher($collection, $requestContext);\n+        // adjust the language aspect if it was given by query param `&L` (and ?id is given)\n+        // @todo remove, this is added for backwards (and functional tests) compatibility reasons\n+        if ($languageId !== null && $pageId !== null) {\n             try {\n-                $result = $matcher->match($uri->getPath());\n-                return new SiteRouteResult(\n-                    $uri,\n-                    $result['site'],\n-                    // if no language is found, this usually results due to \"/\" called instead of \"/fr/\"\n-                    // but it could also be the reason that \"/index.php?id=23\" was called, so the default\n-                    // language is used as a fallback here then.\n-                    $result['language'] ?? $defaultLanguage,\n-                    $result['tail']\n-                );\n-            } catch (NoConfigurationException | ResourceNotFoundException $e) {\n-                // At this point we discard a possible found site via ?id=123\n-                // Because ?id=123 _can_ only work if the actual domain/site base works\n-                // so www.domain-without-site-configuration/index.php?id=123 (where 123 is a page referring\n-                // to a page within a site configuration will never be resolved here) properly\n-                $site = new NullSite();\n+                // override/set language by `&L=` query param\n+                $routeResult = $routeResult->withLanguage($routeResult->getSite()->getLanguageById($languageId));\n+            } catch (\\InvalidArgumentException) {\n+                // ignore; language id not available\n             }\n         }\n \n-        return new SiteRouteResult($uri, $site, $language);\n+        return $routeResult;\n     }\n \n     /**\n@@ -206,4 +176,94 @@ protected function getRouteCollectionForAllSites(): RouteCollection\n         }\n         return $collection;\n     }\n+\n+    /**\n+     * @return ?positive-int\n+     */\n+    protected function resolvePageIdQueryParam(ServerRequestInterface $request): ?int\n+    {\n+        $pageId = $request->getQueryParams()['id'] ?? $request->getParsedBody()['id'] ?? null;\n+        if ($pageId === null) {\n+            return null;\n+        }\n+        return (int)$pageId <= 0 ? null : (int)$pageId;\n+    }\n+\n+    /**\n+     * @return ?positive-int\n+     */\n+    protected function resolveLanguageIdQueryParam(ServerRequestInterface $request): ?int\n+    {\n+        $languageId = $request->getQueryParams()['L'] ?? $request->getParsedBody()['L'] ?? null;\n+        if ($languageId === null) {\n+            return null;\n+        }\n+        return (int)$languageId < 0 ? null : (int)$languageId;\n+    }\n+\n+    /**\n+     * Remove script file name (index.php) from request uri\n+     */\n+    protected function canonicalizeUri(UriInterface $uri, ServerRequestInterface $request): UriInterface\n+    {\n+        if ($uri->getPath() === '') {\n+            return $uri;\n+        }\n+\n+        $normalizedParams = $request->getAttribute('normalizedParams');\n+        if (!$normalizedParams instanceof NormalizedParams) {\n+            return $uri;\n+        }\n+\n+        $urlPath = ltrim($uri->getPath(), '/');\n+        $scriptName = ltrim($normalizedParams->getScriptName(), '/');\n+        $scriptPath = ltrim($normalizedParams->getSitePath(), '/');\n+        if ($scriptName !== '' && str_starts_with($urlPath, $scriptName)) {\n+            $urlPath = '/' . $scriptPath . substr($urlPath, mb_strlen($scriptName));\n+            $uri = $uri->withPath($urlPath);\n+        }\n+\n+        return $uri;\n+    }\n+\n+    protected function matchSiteByUri(UriInterface $uri, ServerRequestInterface $request): SiteRouteResult\n+    {\n+        $collection = $this->getRouteCollectionForAllSites();\n+        $requestContext = $this->requestContextFactory->fromUri($uri, $request->getMethod());\n+        $matcher = new BestUrlMatcher($collection, $requestContext);\n+        try {\n+            /** @var array{site: SiteInterface, language: ?SiteLanguage, tail: string} $match */\n+            $match = $matcher->match($uri->getPath());\n+            return new SiteRouteResult(\n+                $uri,\n+                $match['site'],\n+                $match['language'],\n+                $match['tail']\n+            );\n+        } catch (NoConfigurationException | ResourceNotFoundException) {\n+            return new SiteRouteResult($uri, new NullSite(), null, '');\n+        }\n+    }\n+\n+    protected function matchSiteByQueryParams(\n+        int $pageId,\n+        int $languageId,\n+        SiteRouteResult $fallback,\n+        UriInterface $uri,\n+    ): SiteRouteResult {\n+        try {\n+            $site = $this->finder->getSiteByPageId($pageId);\n+        } catch (SiteNotFoundException) {\n+            return $fallback;\n+        }\n+\n+        try {\n+            // override/set language by `&L=` query param\n+            $language = $site->getLanguageById($languageId);\n+        } catch (\\InvalidArgumentException) {\n+            return $fallback;\n+        }\n+\n+        return new SiteRouteResult($uri, $site, $language);\n+    }\n }"
        },
        {
          "filename": "typo3/sysext/core/Classes/Routing/SiteRouteResult.php",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -95,6 +95,17 @@ public function offsetExists($offset): bool\n         return in_array($offset, $this->validProperties, true) || isset($this->data[$offset]);\n     }\n \n+    /**\n+     * @internal\n+     */\n+    public function withLanguage(SiteLanguage $language): self\n+    {\n+        $clone = clone $this;\n+        $clone->language = $language;\n+\n+        return $clone;\n+    }\n+\n     /**\n      * @param mixed $offset\n      * @return mixed|UriInterface|string|SiteInterface|SiteLanguage"
        },
        {
          "filename": "typo3/sysext/core/Configuration/DefaultConfiguration.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -76,6 +76,7 @@\n             'security.backend.enforceReferrer' => true,\n             'security.backend.enforceContentSecurityPolicy' => false,\n             'security.frontend.enforceContentSecurityPolicy' => false,\n+            'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,\n             'security.usePasswordPolicyForFrontendUsers' => false,\n         ],\n         'createGroup' => '',"
        },
        {
          "filename": "typo3/sysext/core/Configuration/DefaultConfigurationDescription.yaml",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -210,6 +210,9 @@ SYS:\n               security.frontend.enforceContentSecurityPolicy:\n                 type: bool\n                 description: 'If on, HTTP Content-Security-Policy header will be applied for each HTTP frontend request.'\n+              security.frontend.allowInsecureSiteResolutionByQueryParameters:\n+                type: bool\n+                description: 'If on, site resolution can be overwritten by `&id=...&L=...` parameters, URI path & host are just used as default.'\n               security.usePasswordPolicyForFrontendUsers:\n                 type: bool\n                 description: 'If on, the configured password policy in `$GLOBALS[TYPO3_CONF_VARS][FE][passwordPolicy]`"
        },
        {
          "filename": "typo3/sysext/core/Tests/Unit/Routing/SiteMatcherTest.php",
          "status": "modified",
          "additions": 20,
          "deletions": 3,
          "patch": "@@ -17,6 +17,8 @@\n \n namespace TYPO3\\CMS\\Core\\Tests\\Unit\\Routing;\n \n+use PHPUnit\\Framework\\MockObject\\MockObject;\n+use TYPO3\\CMS\\Core\\Configuration\\Features;\n use TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration;\n use TYPO3\\CMS\\Core\\Http\\ServerRequest;\n use TYPO3\\CMS\\Core\\Routing\\BackendEntryPointResolver;\n@@ -74,9 +76,10 @@ public function fullUrlMatchesSpecificLanguageWithSubdomainsAndDomainSuffixes():\n                 ],\n             ],\n         ]);\n+        $featuresMock = $this->createFeaturesMock();\n         $finderMock = $this->createSiteFinder($site, $secondSite);\n         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());\n-        $subject = new SiteMatcher($finderMock, $requestContextFactory);\n+        $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);\n \n         $request = new ServerRequest('http://9-5.typo3.test/da/my-page/');\n         /** @var SiteRouteResult $result */\n@@ -171,9 +174,10 @@ public function fullUrlMatchesSpecificLanguageWithSubdomainsAndPathSuffixes(): v\n                 ],\n             ],\n         ]);\n+        $featuresMock = $this->createFeaturesMock();\n         $finderMock = $this->createSiteFinder($site, $secondSite);\n         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());\n-        $subject = new SiteMatcher($finderMock, $requestContextFactory);\n+        $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);\n \n         $request = new ServerRequest('https://www.example.com/de');\n         /** @var SiteRouteResult $result */\n@@ -253,9 +257,10 @@ public function bestMatchingUrlIsUsed(string $requestUri, string $expectedSite,\n             ],\n         ]);\n \n+        $featuresMock = $this->createFeaturesMock();\n         $finderMock = $this->createSiteFinder($mainSite, $dkSite, $frSite);\n         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());\n-        $subject = new SiteMatcher($finderMock, $requestContextFactory);\n+        $subject = new SiteMatcher($featuresMock, $finderMock, $requestContextFactory);\n \n         $request = new ServerRequest($requestUri);\n         /** @var SiteRouteResult $result */\n@@ -265,6 +270,18 @@ public function bestMatchingUrlIsUsed(string $requestUri, string $expectedSite,\n         self::assertSame($expectedLocale, (string)$result->getLanguage()->getLocale());\n     }\n \n+    private function createFeaturesMock(): MockObject&Features\n+    {\n+        $mock = $this->getMockBuilder(Features::class)\n+            ->onlyMethods(['isFeatureEnabled'])\n+            ->getMock();\n+        $mock->expects(self::any())\n+            ->method('isFeatureEnabled')\n+            ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')\n+            ->willReturn(false);\n+        return $mock;\n+    }\n+\n     private function createSiteFinder(Site ...$sites): SiteFinder\n     {\n         $siteConfiguration = new class ($sites) extends SiteConfiguration {"
        },
        {
          "filename": "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest.php",
          "status": "added",
          "additions": 116,
          "deletions": 0,
          "patch": "@@ -0,0 +1,116 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of the TYPO3 CMS project.\n+ *\n+ * It is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU General Public License, either version 2\n+ * of the License, or any later version.\n+ *\n+ * For the full copyright and license information, please read the\n+ * LICENSE.txt file that was distributed with this source code.\n+ *\n+ * The TYPO3 project - inspiring people to share!\n+ */\n+\n+namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;\n+\n+use TYPO3\\CMS\\Core\\Core\\Bootstrap;\n+use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;\n+use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;\n+use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;\n+\n+final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest extends AbstractTestCase\n+{\n+    protected array $configurationToUseInTestInstance = [\n+        'SYS' => [\n+            'devIPmask' => '123.123.123.123',\n+            'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',\n+            'features' => [\n+                'security.frontend.allowInsecureSiteResolutionByQueryParameters' => false,\n+            ],\n+        ],\n+        'FE' => [\n+            'cacheHash' => [\n+                'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],\n+                'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],\n+                'enforceValidation' => true,\n+            ],\n+            'debug' => false,\n+        ],\n+    ];\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+        $this->withDatabaseSnapshot(function () {\n+            $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');\n+            $backendUser = $this->setUpBackendUser(1);\n+            Bootstrap::initializeLanguageObject();\n+            $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';\n+            $factory = DataHandlerFactory::fromYamlFile($scenarioFile);\n+            $writer = DataHandlerWriter::withBackendUser($backendUser);\n+            $writer->invokeFactory($factory);\n+            static::failIfArrayIsNotEmpty($writer->getErrors());\n+            $this->setUpFrontendRootPage(\n+                1000,\n+                [\n+                    'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',\n+                    'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',\n+                ],\n+                [\n+                    'title' => 'ACME Root',\n+                ]\n+            );\n+            $this->setUpFrontendRootPage(\n+                3000,\n+                [\n+                    'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',\n+                    'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',\n+                ],\n+                [\n+                    'title' => 'ACME Archive',\n+                ]\n+            );\n+        });\n+    }\n+\n+    public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator\n+    {\n+        yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];\n+        yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];\n+        yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];\n+        yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];\n+        yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];\n+        yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 404];\n+    }\n+\n+    /**\n+     * @test\n+     * @dataProvider siteWithPageIdRequestsAreCorrectlyHandledDataProvider\n+     */\n+    public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void\n+    {\n+        $this->writeSiteConfiguration(\n+            'website-local',\n+            $this->buildSiteConfiguration(1000, 'https://website.local/'),\n+            [\n+                $this->buildDefaultLanguageConfiguration('EN', '/'),\n+            ],\n+            $this->buildErrorHandlingConfiguration('Fluid', [404])\n+        );\n+        $this->writeSiteConfiguration(\n+            'archive-acme-com',\n+            $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),\n+            [\n+                $this->buildDefaultLanguageConfiguration('EN', '/'),\n+            ],\n+            $this->buildErrorHandlingConfiguration('Fluid', [404])\n+        );\n+\n+        $response = $this->executeFrontendSubRequest(new InternalRequest($uri));\n+        self::assertSame($expectation, $response->getStatusCode());\n+    }\n+}"
        },
        {
          "filename": "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest.php",
          "status": "added",
          "additions": 118,
          "deletions": 0,
          "patch": "@@ -0,0 +1,118 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of the TYPO3 CMS project.\n+ *\n+ * It is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU General Public License, either version 2\n+ * of the License, or any later version.\n+ *\n+ * For the full copyright and license information, please read the\n+ * LICENSE.txt file that was distributed with this source code.\n+ *\n+ * The TYPO3 project - inspiring people to share!\n+ */\n+\n+namespace TYPO3\\CMS\\Frontend\\Tests\\Functional\\SiteHandling;\n+\n+use TYPO3\\CMS\\Core\\Core\\Bootstrap;\n+use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerFactory;\n+use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\DataHandling\\Scenario\\DataHandlerWriter;\n+use TYPO3\\TestingFramework\\Core\\Functional\\Framework\\Frontend\\InternalRequest;\n+\n+final class SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest extends AbstractTestCase\n+{\n+    protected array $configurationToUseInTestInstance = [\n+        'SYS' => [\n+            'devIPmask' => '123.123.123.123',\n+            'encryptionKey' => '4408d27a916d51e624b69af3554f516dbab61037a9f7b9fd6f81b4d3bedeccb6',\n+            'features' => [\n+                'security.frontend.allowInsecureSiteResolutionByQueryParameters' => true,\n+            ],\n+        ],\n+        'FE' => [\n+            'cacheHash' => [\n+                'requireCacheHashPresenceParameters' => ['value', 'testing[value]', 'tx_testing_link[value]'],\n+                'excludedParameters' => ['L', 'tx_testing_link[excludedValue]'],\n+                'enforceValidation' => true,\n+            ],\n+            'debug' => false,\n+        ],\n+    ];\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+        $this->withDatabaseSnapshot(function () {\n+            $this->importCSVDataSet(__DIR__ . '/../Fixtures/be_users.csv');\n+            $backendUser = $this->setUpBackendUser(1);\n+            Bootstrap::initializeLanguageObject();\n+            $scenarioFile = __DIR__ . '/Fixtures/SlugScenario.yaml';\n+            $factory = DataHandlerFactory::fromYamlFile($scenarioFile);\n+            $writer = DataHandlerWriter::withBackendUser($backendUser);\n+            $writer->invokeFactory($factory);\n+            static::failIfArrayIsNotEmpty($writer->getErrors());\n+            $this->setUpFrontendRootPage(\n+                1000,\n+                [\n+                    'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',\n+                    'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',\n+                ],\n+                [\n+                    'title' => 'ACME Root',\n+                ]\n+            );\n+            $this->setUpFrontendRootPage(\n+                3000,\n+                [\n+                    'typo3/sysext/core/Tests/Functional/Fixtures/Frontend/JsonRenderer.typoscript',\n+                    'typo3/sysext/frontend/Tests/Functional/SiteHandling/Fixtures/JsonRenderer.typoscript',\n+                ],\n+                [\n+                    'title' => 'ACME Archive',\n+                ]\n+            );\n+        });\n+    }\n+\n+    public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider(): \\Generator\n+    {\n+        yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];\n+        yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];\n+        // This case is allowed due to security.frontend.allowInsecureSiteResolutionByQueryParameters, should otherwise be 404\n+        yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 200];\n+        yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];\n+        yield 'invalid cross-site request without L parameter is denied' => ['https://website.local/?id=3000', 404];\n+        // This case is allowed due to security.frontend.allowInsecureSiteResolutionByQueryParameters, should otherwise be 404\n+        yield 'invalid cross-site request *not* denied' => ['https://website.local/?id=3000&L=0', 200];\n+    }\n+\n+    /**\n+     * @test\n+     * @dataProvider siteWithPageIdRequestsAreCorrectlyHandledDataProvider\n+     */\n+    public function siteWithPageIdRequestsAreCorrectlyHandled(string $uri, int $expectation): void\n+    {\n+        $this->writeSiteConfiguration(\n+            'website-local',\n+            $this->buildSiteConfiguration(1000, 'https://website.local/'),\n+            [\n+                $this->buildDefaultLanguageConfiguration('EN', '/'),\n+            ],\n+            $this->buildErrorHandlingConfiguration('Fluid', [404])\n+        );\n+        $this->writeSiteConfiguration(\n+            'archive-acme-com',\n+            $this->buildSiteConfiguration(3000, 'https://archive.acme.com/'),\n+            [\n+                $this->buildDefaultLanguageConfiguration('EN', '/'),\n+            ],\n+            $this->buildErrorHandlingConfiguration('Fluid', [404])\n+        );\n+\n+        $response = $this->executeFrontendSubRequest(new InternalRequest($uri));\n+        self::assertSame($expectation, $response->getStatusCode());\n+    }\n+}"
        },
        {
          "filename": "typo3/sysext/frontend/Tests/Functional/SiteHandling/SlugSiteRequestTest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -273,9 +273,15 @@ public static function siteWithPageIdRequestsAreCorrectlyHandledDataProvider():\n     {\n         yield 'valid same-site request is redirected' => ['https://website.local/?id=1000&L=0', 307];\n         yield 'valid same-site request is processed' => ['https://website.local/?id=1100&L=0', 200];\n+        yield 'invalid off-site request with unknown domain is denied' => ['https://otherdomain.website.local/?id=3000&L=0', 404];\n+        yield 'invalid off-site request with unknown domain and without L parameter is denied' => ['https://otherdomain.website.local/?id=3000', 404];\n     }\n \n     /**\n+     * For variants, please see `SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersEnabledTest`\n+     * and `SlugSiteRequestAllowInsecureSiteResolutionByQueryParametersDisabledTest` which had to be placed\n+     * in separate test class files, due to hard limitations of the TYPO3 Testing Framework.\n+     *\n      * @test\n      * @dataProvider siteWithPageIdRequestsAreCorrectlyHandledDataProvider\n      */"
        },
        {
          "filename": "typo3/sysext/frontend/Tests/Unit/Middleware/SiteResolverTest.php",
          "status": "modified",
          "additions": 22,
          "deletions": 4,
          "patch": "@@ -17,10 +17,12 @@\n \n namespace TYPO3\\CMS\\Frontend\\Tests\\Unit\\Middleware;\n \n+use PHPUnit\\Framework\\MockObject\\MockObject;\n use Psr\\Http\\Message\\ResponseInterface;\n use Psr\\Http\\Message\\ServerRequestInterface;\n use Psr\\Http\\Server\\RequestHandlerInterface;\n use TYPO3\\CMS\\Core\\Cache\\CacheManager;\n+use TYPO3\\CMS\\Core\\Configuration\\Features;\n use TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration;\n use TYPO3\\CMS\\Core\\Http\\JsonResponse;\n use TYPO3\\CMS\\Core\\Http\\NullResponse;\n@@ -107,8 +109,9 @@ public function detectASingleSiteWhenProperRequestIsGiven(): void\n                 ],\n             ],\n         ]));\n+        $featuresMock = $this->createFeaturesMock();\n         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());\n-        $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));\n+        $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));\n \n         $request = new ServerRequest($incomingUrl, 'GET');\n         $response = $subject->process($request, $this->siteFoundRequestHandler);\n@@ -161,8 +164,9 @@ public function detectSubsiteInsideNestedUrlStructure(): void\n             ]),\n         );\n \n+        $featuresMock = $this->createFeaturesMock();\n         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());\n-        $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));\n+        $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));\n \n         $request = new ServerRequest($incomingUrl, 'GET');\n         $response = $subject->process($request, $this->siteFoundRequestHandler);\n@@ -252,8 +256,9 @@ public function detectSubSubsiteInsideNestedUrlStructure($incomingUrl, $expected\n             ]),\n         );\n \n+        $featuresMock = $this->createFeaturesMock();\n         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());\n-        $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));\n+        $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));\n \n         $request = new ServerRequest($incomingUrl, 'GET');\n         $response = $subject->process($request, $this->siteFoundRequestHandler);\n@@ -363,8 +368,9 @@ public function detectProperLanguageByIncomingUrl($incomingUrl, $expectedSiteIde\n             ]),\n         );\n \n+        $featuresMock = $this->createFeaturesMock();\n         $requestContextFactory = new RequestContextFactory(new BackendEntryPointResolver());\n-        $subject = new SiteResolver(new SiteMatcher($siteFinder, $requestContextFactory));\n+        $subject = new SiteResolver(new SiteMatcher($featuresMock, $siteFinder, $requestContextFactory));\n \n         $request = new ServerRequest($incomingUrl, 'GET');\n         $response = $subject->process($request, $this->siteFoundRequestHandler);\n@@ -381,6 +387,18 @@ public function detectProperLanguageByIncomingUrl($incomingUrl, $expectedSiteIde\n         }\n     }\n \n+    private function createFeaturesMock(): MockObject&Features\n+    {\n+        $mock = $this->getMockBuilder(Features::class)\n+            ->onlyMethods(['isFeatureEnabled'])\n+            ->getMock();\n+        $mock->expects(self::any())\n+            ->method('isFeatureEnabled')\n+            ->with('security.frontend.allowInsecureSiteResolutionByQueryParameters')\n+            ->willReturn(false);\n+        return $mock;\n+    }\n+\n     private function createSiteFinder(Site ...$sites): SiteFinder\n     {\n         $siteConfiguration = new class ($sites) extends SiteConfiguration {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e0e4278e933010f7216c1b4e4e4308b9a3bc586e",
            "date": "2023-07-29T09:52:22Z",
            "author_login": "alexanderschnitzler"
          },
          {
            "sha": "b060907dde19ddc54234906d5a5e6708fdb26e8a",
            "date": "2025-01-14T11:09:26Z",
            "author_login": "PyGuy2"
          },
          {
            "sha": "03027a9cb4c558284289da7007c225aa42a72619",
            "date": "2024-07-04T09:57:38Z",
            "author_login": "mbrodala"
          },
          {
            "sha": "705b5bf51516821047b47ff0d4a1d643f35ed594",
            "date": "2025-01-13T11:53:46Z",
            "author_login": "lolli42"
          },
          {
            "sha": "c2460f9507bcb11bbe22765f50501f0177c9eb23",
            "date": "2024-08-28T09:13:49Z",
            "author_login": "wouter90"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "TYPO3 is an open source PHP based web content management system. Starting in version 9.4.0 and prior to versions 9.5.42 ELTS, 10.4.39 ELTS, 11.5.30, and 12.4.4, in multi-site scenarios, enumerating the HTTP query parameters `id` and `L` allowed out-of-scope access to rendered content in the website frontend. For instance, this allowed visitors to access content of an internal site by adding handcrafted query parameters to the URL of a site that was publicly available. TYPO3 versions 9.5.42 ELTS, 10.4.39 ELTS, 11.5.30, 12.4.4 fix the problem.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-25T21:15:10.997",
    "last_modified": "2024-11-21T08:13:42.133",
    "fix_date": "2023-07-25T08:03:49Z"
  },
  "references": [
    {
      "url": "https://github.com/TYPO3/typo3/commit/702e2debd4b28f9cdb540544565fe6a8627ccb6a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-jq6g-4v5m-wm9r",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-003",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/commit/702e2debd4b28f9cdb540544565fe6a8627ccb6a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-jq6g-4v5m-wm9r",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-003",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.272807",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "typo3",
    "owner": "TYPO3",
    "created_at": "2011-03-02T10:02:23Z",
    "updated_at": "2025-01-14T11:43:28Z",
    "pushed_at": "2025-01-14T12:27:55Z",
    "size": 598075,
    "stars": 1068,
    "forks": 674,
    "open_issues": 5,
    "watchers": 1068,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 34380148,
      "TypeScript": 2495477,
      "HTML": 1939183,
      "CSS": 573865,
      "SCSS": 460567,
      "JavaScript": 414810,
      "Shell": 94213,
      "XSLT": 6781,
      "Batchfile": 412
    },
    "commit_activity": {
      "total_commits_last_year": 2075,
      "avg_commits_per_week": 39.90384615384615,
      "days_active_last_year": 334
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:14:13.729873"
  }
}