{
  "cve_id": "CVE-2023-38500",
  "github_data": {
    "repository": "TYPO3/html-sanitizer",
    "fix_commit": "e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb",
    "related_commits": [
      "e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb",
      "e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb"
    ],
    "patch_url": "https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb.patch",
    "fix_commit_details": {
      "sha": "e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb",
      "commit_date": "2023-07-25T07:14:55Z",
      "author": {
        "login": "ohader",
        "type": "User",
        "stats": {
          "total_commits": 69,
          "average_weekly_commits": 0.372972972972973,
          "total_additions": 4804,
          "total_deletions": 543,
          "weeks_active": 25
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-59jf-3q9v-rh6g",
        "length": 1480,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 372,
        "additions": 302,
        "deletions": 70
      },
      "files": [
        {
          "filename": "src/Behavior.php",
          "status": "modified",
          "additions": 13,
          "deletions": 25,
          "patch": "@@ -15,6 +15,8 @@\n namespace TYPO3\\HtmlSanitizer;\n \n use LogicException;\n+use TYPO3\\HtmlSanitizer\\Behavior\\CdataSection;\n+use TYPO3\\HtmlSanitizer\\Behavior\\Comment;\n use TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\n use TYPO3\\HtmlSanitizer\\Behavior\\Tag;\n \n@@ -74,11 +76,16 @@ class Behavior\n      * Node names as array index, e.g. `['strong' => new Tag('strong', '#comment' => new Comment()]`\n      * @var array<string, ?NodeInterface>\n      */\n-    protected $nodes = [\n+    protected $nodes = [];\n+\n+    public function __construct()\n+    {\n         // v2.1.0: adding `#comment` and `#cdata-section` hints for backward compatibility, will be removed with v3.0.0\n-        '#comment' => null,\n-        '#cdata-section' => null,\n-    ];\n+        $this->nodes = array_merge($this->nodes, [\n+            '#comment' => new Comment(),\n+            '#cdata-section' => new CdataSection(),\n+        ]);\n+    }\n \n     public function withFlags(int $flags): self\n     {\n@@ -125,7 +132,6 @@ public function withNodes(NodeInterface ...$nodes): self\n         if (!is_array($indexedNodes)) {\n             return $this;\n         }\n-        $this->assertNodeUniqueness($indexedNodes);\n         $target = clone $this;\n         $target->nodes = array_merge($target->nodes, $indexedNodes);\n         return $target;\n@@ -136,9 +142,8 @@ public function withoutNodes(NodeInterface ...$nodes): self\n         $names = array_map([$this, 'getNodeName'], $nodes);\n         $filteredNodes = array_filter(\n             $this->nodes,\n-            static function (?NodeInterface $node, string $name) use ($nodes, $names) {\n-                return $node === null && !in_array($name, $names, true)\n-                    || $node !== null && !in_array($node, $nodes, true);\n+            static function (NodeInterface $node, string $name) use ($nodes, $names) {\n+                return !in_array($name, $names, true) && !in_array($node, $nodes, true);\n             },\n             ARRAY_FILTER_USE_BOTH\n         );\n@@ -247,23 +252,6 @@ protected function assertScalarUniqueness(array $names): void\n         }\n     }\n \n-    /**\n-     * @param array<string, NodeInterface> $nodes\n-     */\n-    protected function assertNodeUniqueness(array $nodes): void\n-    {\n-        $existingNodeNames = array_intersect_key(array_filter($this->nodes), $nodes);\n-        if ($existingNodeNames !== []) {\n-            throw new LogicException(\n-                sprintf(\n-                    'Cannot redeclare node names %s. Remove duplicates first',\n-                    implode(', ', array_keys($existingNodeNames))\n-                ),\n-                1625391217\n-            );\n-        }\n-    }\n-\n     protected function getNodeName(NodeInterface $node): string\n     {\n         return strtolower($node->getName());"
        },
        {
          "filename": "src/Behavior/CdataSection.php",
          "status": "modified",
          "additions": 24,
          "deletions": 1,
          "patch": "@@ -14,13 +14,36 @@\n \n namespace TYPO3\\HtmlSanitizer\\Behavior;\n \n+use DOMNode;\n+use DOMText;\n+use TYPO3\\HtmlSanitizer\\Behavior;\n+use TYPO3\\HtmlSanitizer\\Context;\n+\n /**\n  * Model of CDATA node.\n  */\n-class CdataSection implements NodeInterface\n+class CdataSection implements NodeInterface, HandlerInterface\n {\n+    /**\n+     * @var bool\n+     */\n+    protected $secure = true;\n+\n+    public function __construct(bool $secure = true)\n+    {\n+        $this->secure = $secure;\n+    }\n+\n     public function getName(): string\n     {\n         return '#cdata-section';\n     }\n+\n+    public function handle(NodeInterface $node, ?DOMNode $domNode, Context $context, Behavior $behavior = null): ?DOMNode\n+    {\n+        if (!$this->secure || $domNode === null) {\n+            return $domNode;\n+        }\n+        return new DOMText(trim($domNode->nodeValue));\n+    }\n }"
        },
        {
          "filename": "src/Behavior/Comment.php",
          "status": "modified",
          "additions": 24,
          "deletions": 1,
          "patch": "@@ -14,13 +14,36 @@\n \n namespace TYPO3\\HtmlSanitizer\\Behavior;\n \n+use DOMComment;\n+use DOMNode;\n+use TYPO3\\HtmlSanitizer\\Behavior;\n+use TYPO3\\HtmlSanitizer\\Context;\n+\n /**\n  * Model of comment node.\n  */\n-class Comment implements NodeInterface\n+class Comment implements NodeInterface, HandlerInterface\n {\n+    /**\n+     * @var bool\n+     */\n+    protected $secure = true;\n+\n+    public function __construct(bool $secure = true)\n+    {\n+        $this->secure = $secure;\n+    }\n+\n     public function getName(): string\n     {\n         return '#comment';\n     }\n+\n+    public function handle(NodeInterface $node, ?DOMNode $domNode, Context $context, Behavior $behavior = null): ?DOMNode\n+    {\n+        if (!$this->secure || $domNode === null) {\n+            return $domNode;\n+        }\n+        return new DOMComment(htmlspecialchars($domNode->textContent, ENT_QUOTES, 'UTF-8', false));\n+    }\n }"
        },
        {
          "filename": "src/Builder/CommonBuilder.php",
          "status": "modified",
          "additions": 1,
          "deletions": 22,
          "patch": "@@ -14,11 +14,8 @@\n \n namespace TYPO3\\HtmlSanitizer\\Builder;\n \n-use DOMNode;\n-use DOMText;\n use TYPO3\\HtmlSanitizer\\Behavior;\n use TYPO3\\HtmlSanitizer\\Behavior\\Attr\\UriAttrValueBuilder;\n-use TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\n use TYPO3\\HtmlSanitizer\\Sanitizer;\n use TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n \n@@ -83,8 +80,7 @@ protected function createBehavior(): Behavior\n             ->withName('common')\n             ->withTags(...array_values($this->createBasicTags()))\n             ->withTags(...array_values($this->createMediaTags()))\n-            ->withTags(...array_values($this->createTableTags()))\n-            ->withNodes(...array_values($this->createSpecialNodes()));\n+            ->withTags(...array_values($this->createTableTags()));\n     }\n \n     protected function createBasicTags(): array\n@@ -211,23 +207,6 @@ protected function createTableTags(): array\n         return $tags;\n     }\n \n-    /**\n-     * @return array<string, Behavior\\NodeInterface>\n-     */\n-    protected function createSpecialNodes(): array\n-    {\n-        $nodes = [];\n-        $nodes['#cdata-section'] = (new Behavior\\NodeHandler(\n-            new Behavior\\CdataSection(),\n-            new Behavior\\Handler\\ClosureHandler(\n-                static function (NodeInterface $node, ?DOMNode $domNode) {\n-                    return $domNode !== null ? new DOMText(trim($domNode->nodeValue)) : null;\n-                }\n-            )\n-        ));\n-        return $nodes;\n-    }\n-\n     /**\n      * @return Behavior\\Attr[]\n      */"
        },
        {
          "filename": "src/Sanitizer.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -41,6 +41,7 @@ class Sanitizer\n     protected const mastermindsDefaultOptions = [\n         // Whether the serializer should aggressively encode all characters as entities.\n         'encode_entities' => false,\n+        'encode_attributes' => true,\n         // Prevents the parser from automatically assigning the HTML5 namespace to the DOM document.\n         // (adjusted due to https://github.com/Masterminds/html5-php/issues/181#issuecomment-643767471)\n         'disable_html_ns' => true,"
        },
        {
          "filename": "src/Serializer/Rules.php",
          "status": "modified",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -45,6 +45,11 @@ class Rules extends OutputRules implements RulesInterface\n      */\n     protected $initiator;\n \n+    /**\n+     * @var bool\n+     */\n+    protected $encodeAttributes;\n+\n     /**\n      * @param Behavior $behavior\n      * @param resource$output\n@@ -66,6 +71,7 @@ public static function create(Behavior $behavior, $output, array $options = []):\n     public function __construct($output, $options = [])\n     {\n         $this->options = (array)$options;\n+        $this->encodeAttributes = !empty($options['encode_attributes']);\n         parent::__construct($output, $this->options);\n     }\n \n@@ -158,6 +164,32 @@ public function text($domNode): void\n         $this->wr($domNode->data);\n     }\n \n+    protected function enc($text, $attribute = false): string\n+    {\n+        if ($attribute && $this->encodeAttributes && !$this->encode) {\n+            // In contrast to parent::enc() (when $this->encode is true),\n+            // we are using htmlspecialchars() instead of htmlentities() as\n+            // colons and slashes do not need to be aggressively escaped.\n+            $value = htmlspecialchars(\n+                $text,\n+                ENT_HTML5 | ENT_SUBSTITUTE | ENT_QUOTES,\n+                'UTF-8',\n+                // $double_encode: true\n+                // (name is misleading, it actually means: disable-automagic/always-encode)\n+                // Our input is always entity decoded by the parser and we do not\n+                // want to consider our input to possibly contain valid entities\n+                // we rather want to treat it as pure text, that is *always* to be encoded.\n+                true\n+            );\n+            // htmlspecialchars does escaping, but it doesn't match the requirements of\n+            // HTML5 section 8.3 to ecape non breaking spaces\n+            // https://www.w3.org/TR/2013/CR-html5-20130806/syntax.html#escapingString\n+            $value = implode('&nbsp;', mb_split(\"\\xc2\\xa0\", $value));\n+            return $value;\n+        }\n+        return parent::enc($text, $attribute);\n+    }\n+\n     /**\n      * If the element has a declared namespace in the HTML, MathML or\n      * SVG namespaces, we use the localName instead of the tagName."
        },
        {
          "filename": "src/Visitor/CommonVisitor.php",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -86,6 +86,9 @@ public function enterNode(DOMNode $domNode): ?DOMNode\n             if (!$node->shallHandleFirst()) {\n                 $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n             }\n+        } elseif ($node instanceof Behavior\\HandlerInterface) {\n+            $domNode = $node->handle($node, $domNode, $this->context, $this->behavior);\n+            $domNode = $domNode instanceof DOMElement ? $this->enterDomElement($domNode, $node) : $domNode;\n         } elseif ($domNode instanceof DOMElement) {\n             $domNode = $this->enterDomElement($domNode, $node);\n         }"
        },
        {
          "filename": "tests/BehaviorTest.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -24,7 +24,6 @@ class BehaviorTest extends TestCase\n     public function ambiguityIsDetectedDataProvider(): array\n     {\n         return [\n-            [ ['same'], ['same'], 1625391217 ],\n             [ ['same', 'same'], [], 1625591503 ],\n             [ ['same', 'same'], ['same'], 1625591503 ],\n             [ [], ['same', 'same'], 1625591503 ],"
        },
        {
          "filename": "tests/CommonBuilderTest.php",
          "status": "modified",
          "additions": 18,
          "deletions": 2,
          "patch": "@@ -256,13 +256,21 @@ public function isSanitizedDataProvider(): array\n                 '<!-- #comment -->',\n             ],\n             '#910' => [\n-                '<![CDATA[ #cdata ]]>',\n-                '#cdata',\n+                '<!-- <\"comment\"> -->',\n+                '<!-- &lt;&quot;comment&quot;&gt; -->',\n             ],\n             '#911' => [\n+                '<!-- &lt;&quot;comment&quot;&gt; -->',\n+                '<!-- &lt;&quot;comment&quot;&gt; -->',\n+            ],\n+            '#915' => [\n                 '#text',\n                 '#text',\n             ],\n+            '#920' => [\n+                '<![CDATA[ #cdata ]]>',\n+                '#cdata',\n+            ],\n             '#921' => [\n                 '<![CDATA[<any><span data-value=\"value\"></any>*/]]>',\n                 '&lt;any&gt;&lt;span data-value=\"value\"&gt;&lt;/any&gt;*/',\n@@ -287,6 +295,14 @@ public function isSanitizedDataProvider(): array\n                 '<img src=\"/typo3.org/logo.svg\"><any>value</any></img>',\n                 '<img src=\"/typo3.org/logo.svg\">&lt;any&gt;value&lt;/any&gt;',\n             ],\n+            '#935' => [\n+                '<p class=\"</p><script>alert(1)\">value</p>',\n+                '<p class=\"&lt;/p&gt;&lt;script&gt;alert(1)\">value</p>',\n+            ],\n+            '#936' => [\n+                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n+                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n+            ],\n         ];\n     }\n "
        },
        {
          "filename": "tests/ScenarioTest.php",
          "status": "modified",
          "additions": 186,
          "deletions": 18,
          "patch": "@@ -231,23 +231,41 @@ public static function commentsAreHandledDataProvider(): array\n         return [\n             'not allowed' => [\n                 false,\n+                null,\n                 Behavior::BLUNT,\n                 '<div><!-- before -->test<!-- after --></div>',\n                 '<div>test</div>'\n             ],\n-            'allowed' => [\n+            'allowed, insecure' => [\n                 true,\n+                false,\n                 Behavior::BLUNT,\n                 '<div><!-- before -->test<!-- after --></div>',\n                 '<div><!-- before -->test<!-- after --></div>'\n             ],\n-            'not allowed, encoded' => [\n+            'allowed, secure' => [\n+                true,\n+                true,\n+                Behavior::BLUNT,\n+                '<div><!-- before -->test<!-- after --></div>',\n+                '<div><!-- before -->test<!-- after --></div>'\n+            ],\n+            'not allowed, encode invalid' => [\n                 false,\n+                null,\n                 Behavior::ENCODE_INVALID_COMMENT,\n                 '<div><!-- before -->test<!-- after --></div>',\n                 '<div>&lt;!-- before --&gt;test&lt;!-- after --&gt;</div>',\n             ],\n-            'allowed, encoded' => [\n+            'allowed, insecure, encode invalid' => [\n+                true,\n+                false,\n+                Behavior::ENCODE_INVALID_COMMENT,\n+                '<div><!-- before -->test<!-- after --></div>',\n+                '<div><!-- before -->test<!-- after --></div>'\n+            ],\n+            'allowed, secure, encode invalid' => [\n+                true,\n                 true,\n                 Behavior::ENCODE_INVALID_COMMENT,\n                 '<div><!-- before -->test<!-- after --></div>',\n@@ -260,13 +278,13 @@ public static function commentsAreHandledDataProvider(): array\n      * @test\n      * @dataProvider commentsAreHandledDataProvider\n      */\n-    public function commentsAreHandled(bool $allowed, int $flags, string $payload, string $expectation): void\n+    public function commentsAreHandled(bool $allowed, ?bool $secure, int $flags, string $payload, string $expectation): void\n     {\n         $behavior = (new Behavior())\n             ->withFlags($flags)\n             ->withName('scenario-test')\n             ->withTags(new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN));\n-        $comment = new Behavior\\Comment();\n+        $comment = new Behavior\\Comment($secure ?? true);\n         $behavior = $allowed ? $behavior->withNodes($comment) : $behavior->withoutNodes($comment);\n         $sanitizer = new Sanitizer(\n             $behavior,\n@@ -280,27 +298,45 @@ public static function cdataSectionsAreHandledDataProvider(): array\n         return [\n             'not allowed' => [\n                 false,\n+                null,\n                 Behavior::BLUNT,\n-                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n-                '<div>test</div>'\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n+                '<div>.test.</div>'\n             ],\n-            'allowed' => [\n+            'allowed, insecure' => [\n                 true,\n+                false,\n                 Behavior::BLUNT,\n-                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n-                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>'\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>'\n             ],\n-            'not allowed, encoded' => [\n+            'allowed, secure' => [\n+                true,\n+                true,\n+                Behavior::BLUNT,\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n+                '<div>before.test.after</div>'\n+            ],\n+            'not allowed, encode invalid' => [\n                 false,\n+                null,\n                 Behavior::ENCODE_INVALID_CDATA_SECTION,\n-                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n-                '<div>&lt;![CDATA[ before ]]&gt;test&lt;![CDATA[ after ]]&gt;</div>',\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n+                '<div>&lt;![CDATA[ before ]]&gt;.test.&lt;![CDATA[ after ]]&gt;</div>',\n             ],\n-            'allowed, encoded' => [\n+            'allowed, insecure, encode invalid' => [\n                 true,\n+                false,\n                 Behavior::ENCODE_INVALID_CDATA_SECTION,\n-                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>',\n-                '<div><![CDATA[ before ]]>test<![CDATA[ after ]]></div>'\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>'\n+            ],\n+            'allowed, secure, encode invalid' => [\n+                true,\n+                true,\n+                Behavior::ENCODE_INVALID_CDATA_SECTION,\n+                '<div><![CDATA[ before ]]>.test.<![CDATA[ after ]]></div>',\n+                '<div>before.test.after</div>'\n             ],\n         ];\n     }\n@@ -309,13 +345,13 @@ public static function cdataSectionsAreHandledDataProvider(): array\n      * @test\n      * @dataProvider cdataSectionsAreHandledDataProvider\n      */\n-    public function cdataSectionsAreHandled(bool $allowed, int $flags, string $payload, string $expectation): void\n+    public function cdataSectionsAreHandled(bool $allowed, ?bool $secure, int $flags, string $payload, string $expectation): void\n     {\n         $behavior = (new Behavior())\n             ->withFlags($flags)\n             ->withName('scenario-test')\n             ->withTags(new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN));\n-        $cdataSection = new Behavior\\CdataSection();\n+        $cdataSection = new Behavior\\CdataSection($secure ?? true);\n         $behavior = $allowed ? $behavior->withNodes($cdataSection) : $behavior->withoutNodes($cdataSection);\n         $sanitizer = new Sanitizer(\n             $behavior,\n@@ -482,4 +518,136 @@ public function iframeSandboxIsAllowed(): void\n         );\n         self::assertSame($expectation, $sanitizer->sanitize($payload));\n     }\n+\n+    public static function attributesAreEncodedDataProvider(): \\Generator\n+    {\n+        yield 'preserve entities' => [\n+\t        '<a title=\"Insert &amp;\"></a>',\n+\t        '<a title=\"Insert &amp;\"></a>',\n+        ];\n+        yield 'encode single quotes' => [\n+\t        '<a title=\"\\'\"></a>',\n+\t        '<a title=\"&apos;\"></a>',\n+        ];\n+        yield 'encode single quotes from entity' => [\n+\t        '<a title=\"&#039;\"></a>',\n+\t        '<a title=\"&apos;\"></a>',\n+        ];\n+        yield 'encode double quotes' => [\n+\t        \"<a title='\" . '\"' . \"'></a>\",\n+\t        '<a title=\"&quot;\"></a>',\n+        ];\n+        yield 'preserve double quote encoding' => [\n+\t        '<a title=\"&quot;\"></a>',\n+\t        '<a title=\"&quot;\"></a>',\n+        ];\n+        yield 'preserve double encoded entities' => [\n+\t        '<a title=\"Insert &amp;amp; to write an &amp;\"></a>',\n+\t        '<a title=\"Insert &amp;amp; to write an &amp;\"></a>',\n+        ];\n+        yield 'preserve URLs without \"agressive\" entity encoding' => [\n+\t        '<a title=\"https://example.com/\"></a>',\n+\t        '<a title=\"https://example.com/\"></a>',\n+        ];\n+        yield 'encode tag specifiers' => [\n+            '<a id=\"</noscript><script>alert(1)</script>\"></a>',\n+            '<a id=\"&lt;/noscript&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"></a>',\n+        ];\n+        // Invalid input seems to be removed during parsing step (where?)\n+        // therefore ENT_SUBSTITUTE can not operate during serialization\n+        // @todo: check masterminds/html5-php whether that behavior is\n+        // intended\n+        //yield 'substitute invalid unicode in attributes' => [\n+        //    \"<a title='Hello \\x80, Good morning'></a>\",\n+        //    \"<a title='Hello \\xEF\\xBF\\xBD, Good morning'></a>\",\n+        //];\n+        yield 'escape non breaking space' => [\n+            \"<a title='Hello\\xc2\\xa0World'></a>\",\n+            '<a title=\"Hello&nbsp;World\"></a>',\n+        ];\n+        yield 'encodes json values' => [\n+            \"<div data-value='{\\\"Hello\\\":[{\\\"w\\\":\\\"o\\\",\\\"r\\\":\\\"ld\\\"}]}'></a>\",\n+            '<div data-value=\"{&quot;Hello&quot;:[{&quot;w&quot;:&quot;o&quot;,&quot;r&quot;:&quot;ld&quot;}]}\"></div>'\n+        ];\n+        yield 'encodes json values containing html' => [\n+            \"<div data-value='{\\\"Hello\\\":\\\"&lt;span&gt;World&lt;\\/span&gt;\\\"}'></div>\",\n+            '<div data-value=\"{&quot;Hello&quot;:&quot;&lt;span&gt;World&lt;\\/span&gt;&quot;}\"></div>'\n+        ];\n+\n+    }\n+\n+    /**\n+     * @test\n+     * @dataProvider attributesAreEncodedDataProvider\n+     */\n+    public function attributesAreEncoded(string $payload, string $expectation): void\n+    {\n+        $behavior = (new Behavior())\n+            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n+            ->withName('scenario-test')\n+            ->withTags(\n+                (new Behavior\\Tag('a', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(\n+                    new Behavior\\Attr('id'),\n+                    new Behavior\\Attr('title')\n+                ),\n+                (new Behavior\\Tag('div', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(\n+                    new Behavior\\Attr('data-value')\n+                )\n+            );\n+\n+        $sanitizer = new Sanitizer(\n+            $behavior,\n+            new CommonVisitor($behavior)\n+        );\n+        self::assertSame($expectation, $sanitizer->sanitize($payload));\n+    }\n+\n+    public static function specialTagsAreHandledDataProvider(): \\Generator\n+    {\n+        yield 'noscript attribute' => [\n+            '<noscript><p id=\"</noscript><script>alert(1)</script>\"></p>',\n+            '<noscript><p id=\"&lt;/noscript&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"></p></noscript>',\n+        ];\n+        yield 'noscript namespaced attribute' => [\n+            '<noscript><p test:id=\"</noscript><script>alert(1)</script>\"></p>',\n+            '<noscript><p test:id=\"&lt;/noscript&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"></p></noscript>',\n+        ];\n+        yield 'noscript comment' => [\n+            '<noscript><!--</noscript><script>alert(2)</script>--></noscript>',\n+            '<noscript><!--&lt;/noscript&gt;&lt;script&gt;alert(2)&lt;/script&gt;--></noscript>',\n+        ];\n+        yield 'noscript raw text' => [\n+            '<noscript><style></noscript><script>alert(3)</script>',\n+            '<noscript><style>&lt;/noscript&gt;&lt;script&gt;alert(3)&lt;/script&gt;</style></noscript>',\n+        ];\n+        yield 'noscript event attribute' => [\n+            '<noscript><p onmouseover=\"alert(4)\">value</p></noscript>',\n+            '<noscript><p>value</p></noscript>',\n+        ];\n+    }\n+\n+    /**\n+     * @test\n+     * @dataProvider specialTagsAreHandledDataProvider\n+     */\n+    public function specialTagsAreHandled(string $payload, string $expectation): void\n+    {\n+        $behavior = (new Behavior())\n+            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n+            ->withName('scenario-test')\n+            ->withTags(\n+                (new Behavior\\Tag('style', Behavior\\Tag::ALLOW_CHILDREN)),\n+                (new Behavior\\Tag('noscript', Behavior\\Tag::ALLOW_CHILDREN)),\n+                (new Behavior\\Tag('p', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(\n+                    new Behavior\\Attr('id'),\n+                    new Behavior\\Attr('test:id')\n+                )\n+            );\n+\n+        $sanitizer = new Sanitizer(\n+            $behavior,\n+            new CommonVisitor($behavior)\n+        );\n+        self::assertSame($expectation, $sanitizer->sanitize($payload));\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c672a2e02925de8eed0dcaeb3a3c90d3642049a0",
            "date": "2024-07-12T15:25:35Z",
            "author_login": "lolli42"
          },
          {
            "sha": "39cc77c04327971dbd66f841028e8a262402165a",
            "date": "2024-07-12T15:18:45Z",
            "author_login": "lolli42"
          },
          {
            "sha": "d68db1c4e68c6a50ba171740bb09aa491b9f69b1",
            "date": "2024-07-12T15:17:29Z",
            "author_login": "lolli42"
          },
          {
            "sha": "e3e1e9b5493b3f28f6caa9d3e0cebaa03f8bf33b",
            "date": "2024-07-12T15:16:33Z",
            "author_login": "lolli42"
          },
          {
            "sha": "b8f90717251d968c49dc77f8c1e5912e2fbe0dff",
            "date": "2023-09-21T15:24:21Z",
            "author_login": "ohader"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "TYPO3 HTML Sanitizer is an HTML sanitizer, written in PHP, aiming to provide cross-site-scripting-safe markup based on explicitly allowed tags, attributes and values. Starting in version 1.0.0 and prior to versions 1.5.1 and 2.1.2, due to an encoding issue in the serialization layer, malicious markup nested in a `noscript` element was not encoded correctly. `noscript` is disabled in the default configuration, but might have been enabled in custom scenarios. This allows bypassing the cross-site scripting mechanism of TYPO3 HTML Sanitizer. Versions 1.5.1 and 2.1.2 fix the problem.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-25T21:15:11.083",
    "last_modified": "2024-11-21T08:13:42.270",
    "fix_date": "2023-07-25T07:14:55Z"
  },
  "references": [
    {
      "url": "https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-59jf-3q9v-rh6g",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-002",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/html-sanitizer/commit/e3026f589fef0be8c3574ee3f0a0bfbe33d7ebdb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-59jf-3q9v-rh6g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-002",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.272962",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "html-sanitizer",
    "owner": "TYPO3",
    "created_at": "2021-07-06T10:50:14Z",
    "updated_at": "2024-11-28T02:16:17Z",
    "pushed_at": "2024-07-12T15:54:54Z",
    "size": 171,
    "stars": 27,
    "forks": 14,
    "open_issues": 9,
    "watchers": 27,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v1"
    ],
    "languages": {
      "PHP": 133157
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:36:05.247432"
  }
}