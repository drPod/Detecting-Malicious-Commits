{
  "cve_id": "CVE-2023-38501",
  "github_data": {
    "repository": "9001/copyparty",
    "fix_commit": "007d948cb982daa05bc6619cd20ee55b7e834c38",
    "related_commits": [
      "007d948cb982daa05bc6619cd20ee55b7e834c38",
      "007d948cb982daa05bc6619cd20ee55b7e834c38"
    ],
    "patch_url": "https://github.com/9001/copyparty/commit/007d948cb982daa05bc6619cd20ee55b7e834c38.patch",
    "fix_commit_details": {
      "sha": "007d948cb982daa05bc6619cd20ee55b7e834c38",
      "commit_date": "2023-07-23T10:55:08Z",
      "author": {
        "login": "9001",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix GHSA-f54q-j679-p9hh: reflected-XSS in cookie-setters;",
        "length": 443,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 35,
        "additions": 33,
        "deletions": 2
      },
      "files": [
        {
          "filename": "copyparty/httpcli.py",
          "status": "modified",
          "additions": 29,
          "deletions": 2,
          "patch": "@@ -337,6 +337,15 @@ def run(self) -> bool:\n             vpath, arglist = self.req.split(\"?\", 1)\n             self.trailing_slash = vpath.endswith(\"/\")\n             vpath = undot(vpath)\n+\n+            zs = unquotep(arglist)\n+            m = self.conn.hsrv.ptn_cc.search(zs)\n+            if m:\n+                hit = zs[m.span()[0] :]\n+                t = \"malicious user; Cc in query [{}] => [{!r}]\"\n+                self.log(t.format(self.req, hit), 1)\n+                return False\n+\n             for k in arglist.split(\"&\"):\n                 if \"=\" in k:\n                     k, zs = k.split(\"=\", 1)\n@@ -488,6 +497,9 @@ def run(self) -> bool:\n                 pex: Pebkac = ex  # type: ignore\n \n             try:\n+                if pex.code == 999:\n+                    return False\n+\n                 post = self.mode in [\"POST\", \"PUT\"] or \"content-length\" in self.headers\n                 if not self._check_nonfatal(pex, post):\n                     self.keepalive = False\n@@ -586,6 +598,14 @@ def send_headers(\n         for k, zs in list(self.out_headers.items()) + self.out_headerlist:\n             response.append(\"%s: %s\" % (k, zs))\n \n+        for zs in response:\n+            m = self.conn.hsrv.ptn_cc.search(zs)\n+            if m:\n+                hit = zs[m.span()[0] :]\n+                t = \"malicious user; Cc in out-hdr {!r} => [{!r}]\"\n+                self.log(t.format(zs, hit), 1)\n+                raise Pebkac(999)\n+\n         try:\n             # best practice to separate headers and body into different packets\n             self.s.sendall(\"\\r\\n\".join(response).encode(\"utf-8\") + b\"\\r\\n\\r\\n\")\n@@ -785,7 +805,7 @@ def handle_get(self) -> bool:\n             path_base = os.path.join(self.E.mod, \"web\")\n             static_path = absreal(os.path.join(path_base, self.vpath[5:]))\n             if not static_path.startswith(path_base):\n-                t = \"attempted path traversal [{}] => [{}]\"\n+                t = \"malicious user; attempted path traversal [{}] => [{}]\"\n                 self.log(t.format(self.vpath, static_path), 1)\n                 self.tx_404()\n                 return False\n@@ -3077,7 +3097,14 @@ def tx_mounts(self) -> bool:\n         return True\n \n     def set_k304(self) -> bool:\n-        ck = gencookie(\"k304\", self.uparam[\"k304\"], self.args.R, False, 86400 * 299)\n+        v = self.uparam[\"k304\"].lower()\n+        if v == \"y\":\n+            dur = 86400 * 299\n+        else:\n+            dur = None\n+            v = \"x\"\n+\n+        ck = gencookie(\"k304\", v, self.args.R, False, dur)\n         self.out_headerlist.append((\"Set-Cookie\", ck))\n         self.redirect(\"\", \"?h#cc\")\n         return True"
        },
        {
          "filename": "copyparty/httpsrv.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n import base64\n import math\n import os\n+import re\n import socket\n import sys\n import threading\n@@ -138,6 +139,8 @@ def __init__(self, broker: \"BrokerCli\", nid: Optional[int]) -> None:\n         zs = os.path.join(self.E.mod, \"web\", \"deps\", \"prism.js.gz\")\n         self.prism = os.path.exists(zs)\n \n+        self.ptn_cc = re.compile(r\"[\\x00-\\x1f]\")\n+\n         self.mallow = \"GET HEAD POST PUT DELETE OPTIONS\".split()\n         if not self.args.no_dav:\n             zs = \"PROPFIND PROPPATCH LOCK UNLOCK MKCOL COPY MOVE\""
        },
        {
          "filename": "copyparty/util.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -171,6 +171,7 @@ def sunpack(fmt: bytes, a: bytes) -> tuple[Any, ...]:\n     500: \"Internal Server Error\",\n     501: \"Not Implemented\",\n     503: \"Service Unavailable\",\n+    999: \"MissingNo\",\n }\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0987dcfb1cc4f92d23070e4f22a6279540bad18d",
            "date": "2025-01-13T22:30:46Z",
            "author_login": "9001"
          },
          {
            "sha": "6920c01d4a1471fd2c0fec9a58cb89d6c8e81c1f",
            "date": "2025-01-11T16:47:33Z",
            "author_login": "9001"
          },
          {
            "sha": "cc0cc8cdf07ac39303dc1c8cb8142e9eb88b6db5",
            "date": "2025-01-11T16:11:15Z",
            "author_login": "9001"
          },
          {
            "sha": "fb13969798fc5d317eab1300a5ee03fb449a80ee",
            "date": "2025-01-11T16:08:12Z",
            "author_login": "9001"
          },
          {
            "sha": "278258ee9f3265ccad9914206ebd67b79ba24146",
            "date": "2025-01-11T15:23:47Z",
            "author_login": "9001"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "copyparty is file server software. Prior to version 1.8.7, the application contains a reflected cross-site scripting via URL-parameter `?k304=...` and `?setck=...`. The worst-case outcome of this is being able to move or delete existing files on the server, or upload new files, using the account of the person who clicks the malicious link. It is recommended to change the passwords of one's copyparty accounts, unless one have inspected one's logs and found no trace of attacks. Version 1.8.7 contains a patch for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-25T22:15:10.600",
    "last_modified": "2024-11-21T08:13:42.400",
    "fix_date": "2023-07-23T10:55:08Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/173821/Copyparty-1.8.6-Cross-Site-Scripting.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/9001/copyparty/commit/007d948cb982daa05bc6619cd20ee55b7e834c38",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/9001/copyparty/security/advisories/GHSA-f54q-j679-p9hh",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/173821/Copyparty-1.8.6-Cross-Site-Scripting.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/9001/copyparty/commit/007d948cb982daa05bc6619cd20ee55b7e834c38",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/9001/copyparty/security/advisories/GHSA-f54q-j679-p9hh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.273265",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "copyparty",
    "owner": "9001",
    "created_at": "2019-05-26T15:28:33Z",
    "updated_at": "2025-01-13T22:51:43Z",
    "pushed_at": "2025-01-13T22:30:51Z",
    "size": 5743,
    "stars": 942,
    "forks": 53,
    "open_issues": 6,
    "watchers": 942,
    "has_security_policy": false,
    "default_branch": "hovudstraum",
    "protected_branches": [],
    "languages": {
      "Python": 1512023,
      "JavaScript": 627189,
      "Shell": 88624,
      "CSS": 87221,
      "HTML": 42522,
      "Nix": 11581,
      "Dockerfile": 7462,
      "Makefile": 3454,
      "PowerShell": 3102,
      "LiveScript": 3069,
      "Batchfile": 2151
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:27:29.247153"
  }
}