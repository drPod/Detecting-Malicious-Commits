{
  "cve_id": "CVE-2023-38510",
  "github_data": {
    "repository": "tolgee/tolgee-platform",
    "fix_commit": "4776cba67e7bb8c1b0259376e3e5fa3bb46e45c7",
    "related_commits": [
      "4776cba67e7bb8c1b0259376e3e5fa3bb46e45c7",
      "4776cba67e7bb8c1b0259376e3e5fa3bb46e45c7"
    ],
    "patch_url": "https://github.com/tolgee/tolgee-platform/commit/4776cba67e7bb8c1b0259376e3e5fa3bb46e45c7.patch",
    "fix_commit_details": {
      "sha": "4776cba67e7bb8c1b0259376e3e5fa3bb46e45c7",
      "commit_date": "2023-07-21T14:30:34Z",
      "author": {
        "login": "JanCizmar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Disable importing with any project permission (#1818)",
        "length": 58,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 119,
        "additions": 88,
        "deletions": 31
      },
      "files": [
        {
          "filename": "backend/api/src/main/kotlin/io/tolgee/api/v2/controllers/V2ImportController.kt",
          "status": "modified",
          "additions": 26,
          "deletions": 1,
          "patch": "@@ -25,6 +25,7 @@ import io.tolgee.model.Language\n import io.tolgee.model.dataImport.ImportFile\n import io.tolgee.model.dataImport.ImportLanguage\n import io.tolgee.model.dataImport.ImportTranslation\n+import io.tolgee.model.enums.Scope\n import io.tolgee.model.views.ImportFileIssueView\n import io.tolgee.model.views.ImportLanguageView\n import io.tolgee.model.views.ImportTranslationView\n@@ -36,6 +37,7 @@ import io.tolgee.service.LanguageService\n import io.tolgee.service.dataImport.ForceMode\n import io.tolgee.service.dataImport.ImportService\n import io.tolgee.service.key.NamespaceService\n+import io.tolgee.service.security.SecurityService\n import org.springdoc.api.annotations.ParameterObject\n import org.springframework.data.domain.PageRequest\n import org.springframework.data.domain.Pageable\n@@ -64,7 +66,10 @@ import javax.servlet.http.HttpServletRequest\n @RestController\n @CrossOrigin(origins = [\"*\"])\n @RequestMapping(value = [\"/v2/projects/{projectId:\\\\d+}/import\", \"/v2/projects/import\"])\n-@Tag(name = \"Import\")\n+@Tag(\n+  name = \"Import\",\n+  description = \"These endpoints handle multi-step data import\"\n+)\n class V2ImportController(\n   private val importService: ImportService,\n   private val authenticationFacade: AuthenticationFacade,\n@@ -81,6 +86,7 @@ class V2ImportController(\n   private val projectHolder: ProjectHolder,\n   private val languageService: LanguageService,\n   private val namespaceService: NamespaceService,\n+  private val securityService: SecurityService\n ) {\n   @PostMapping(\"\", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])\n   @AccessWithAnyProjectPermission()\n@@ -90,6 +96,7 @@ class V2ImportController(\n     @RequestPart(\"files\") files: Array<MultipartFile>,\n     @ParameterObject params: ImportAddFilesParams\n   ): ImportAddFilesResultModel {\n+    checkBaseImportPermissions()\n     val fileDtos = files.map { ImportFileDto(it.originalFilename ?: \"\", it.inputStream) }\n     val errors = importService.addFiles(\n       files = fileDtos,\n@@ -122,16 +129,22 @@ class V2ImportController(\n     forceMode: ForceMode,\n   ) {\n     val projectId = projectHolder.project.id\n+    checkBaseImportPermissions()\n     this.importService.import(projectId, authenticationFacade.userAccount.id, forceMode)\n   }\n \n+  private fun checkBaseImportPermissions() {\n+    securityService.checkProjectPermission(projectHolder.project.id, Scope.TRANSLATIONS_VIEW)\n+  }\n+\n   @GetMapping(\"/result\")\n   @AccessWithAnyProjectPermission()\n   @AccessWithApiKey()\n   @Operation(description = \"Returns the result of preparation.\", summary = \"Get result\")\n   fun getImportResult(\n     @ParameterObject pageable: Pageable\n   ): PagedModel<ImportLanguageModel> {\n+    checkBaseImportPermissions()\n     val projectId = projectHolder.project.id\n     val userId = authenticationFacade.userAccount.id\n     val languages = importService.getResult(projectId, userId, pageable)\n@@ -145,6 +158,7 @@ class V2ImportController(\n   fun getImportLanguage(\n     @PathVariable(\"languageId\") languageId: Long,\n   ): ImportLanguageModel {\n+    checkBaseImportPermissions()\n     checkImportLanguageInProject(languageId)\n     val language = importService.findLanguageView(languageId) ?: throw NotFoundException()\n     return importLanguageModelAssembler.toModel(language)\n@@ -171,6 +185,7 @@ class V2ImportController(\n     @RequestParam(\"search\") search: String? = null,\n     @ParameterObject @SortDefault(\"keyName\") pageable: Pageable\n   ): PagedModel<ImportTranslationModel> {\n+    checkBaseImportPermissions()\n     checkImportLanguageInProject(languageId)\n     val translations = importService.getTranslationsView(languageId, pageable, onlyConflicts, onlyUnresolved, search)\n     return pagedTranslationsResourcesAssembler.toModel(translations, importTranslationModelAssembler)\n@@ -181,6 +196,7 @@ class V2ImportController(\n   @AccessWithApiKey()\n   @Operation(description = \"Deletes prepared import data.\", summary = \"Delete\")\n   fun cancelImport() {\n+    checkBaseImportPermissions()\n     this.importService.deleteImport(projectHolder.project.id, authenticationFacade.userAccount.id)\n   }\n \n@@ -189,6 +205,7 @@ class V2ImportController(\n   @AccessWithApiKey()\n   @Operation(description = \"Deletes language prepared to import.\", summary = \"Delete language\")\n   fun deleteLanguage(@PathVariable(\"languageId\") languageId: Long) {\n+    checkBaseImportPermissions()\n     val language = checkImportLanguageInProject(languageId)\n     this.importService.deleteLanguage(language)\n   }\n@@ -204,6 +221,7 @@ class V2ImportController(\n     @PathVariable(\"languageId\") languageId: Long,\n     @PathVariable(\"translationId\") translationId: Long\n   ) {\n+    checkBaseImportPermissions()\n     resolveTranslation(languageId, translationId, true)\n   }\n \n@@ -218,6 +236,7 @@ class V2ImportController(\n     @PathVariable(\"languageId\") languageId: Long,\n     @PathVariable(\"translationId\") translationId: Long\n   ) {\n+    checkBaseImportPermissions()\n     resolveTranslation(languageId, translationId, false)\n   }\n \n@@ -231,6 +250,7 @@ class V2ImportController(\n   fun resolveTranslationSetOverride(\n     @PathVariable(\"languageId\") languageId: Long\n   ) {\n+    checkBaseImportPermissions()\n     resolveAllOfLanguage(languageId, true)\n   }\n \n@@ -244,6 +264,7 @@ class V2ImportController(\n   fun resolveTranslationSetKeepExisting(\n     @PathVariable(\"languageId\") languageId: Long,\n   ) {\n+    checkBaseImportPermissions()\n     resolveAllOfLanguage(languageId, false)\n   }\n \n@@ -259,6 +280,7 @@ class V2ImportController(\n     @RequestBody req: SetFileNamespaceRequest,\n     request: HttpServletRequest\n   ) {\n+    checkBaseImportPermissions()\n     val file = checkFileFromProject(fileId)\n     this.importService.selectNamespace(file, req.namespace)\n   }\n@@ -275,6 +297,7 @@ class V2ImportController(\n     @PathVariable(\"importLanguageId\") importLanguageId: Long,\n     @PathVariable(\"existingLanguageId\") existingLanguageId: Long,\n   ) {\n+    checkBaseImportPermissions()\n     val existingLanguage = checkLanguageFromProject(existingLanguageId)\n     val importLanguage = checkImportLanguageInProject(importLanguageId)\n     this.importService.selectExistingLanguage(importLanguage, existingLanguage)\n@@ -290,6 +313,7 @@ class V2ImportController(\n   fun resetExistingLanguage(\n     @PathVariable(\"importLanguageId\") importLanguageId: Long,\n   ) {\n+    checkBaseImportPermissions()\n     val importLanguage = checkImportLanguageInProject(importLanguageId)\n     this.importService.selectExistingLanguage(importLanguage, null)\n   }\n@@ -318,6 +342,7 @@ class V2ImportController(\n     summary = \"Get namespaces\"\n   )\n   fun getAllNamespaces(): CollectionModel<ImportNamespaceModel> {\n+    checkBaseImportPermissions()\n     val import = importService.get(\n       projectId = projectHolder.project.id,\n       authorId = authenticationFacade.userAccount.id"
        },
        {
          "filename": "backend/app/src/main/kotlin/io/tolgee/websocket/WebSocketConfig.kt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -52,7 +52,7 @@ class WebSocketConfig(\n           if (projectId != null) {\n             try {\n               val user = (accessor.user as? UsernamePasswordAuthenticationToken)?.principal as UserAccountDto\n-              securityService.checkProjectPermission(projectId = projectId, Scope.TRANSLATIONS_VIEW, user)\n+              securityService.checkProjectPermissionNoApiKey(projectId = projectId, Scope.TRANSLATIONS_VIEW, user)\n             } catch (e: Exception) {\n               throw MessagingException(\"Forbidden\")\n             }"
        },
        {
          "filename": "backend/app/src/test/kotlin/io/tolgee/api/v2/controllers/v2ImportController/V2ImportControllerApplicationTest.kt",
          "status": "modified",
          "additions": 21,
          "deletions": 3,
          "patch": "@@ -1,18 +1,20 @@\n package io.tolgee.api.v2.controllers.v2ImportController\n \n+import io.tolgee.ProjectAuthControllerTest\n import io.tolgee.constants.MtServiceType\n import io.tolgee.development.testDataBuilder.data.dataImport.ImportTestData\n import io.tolgee.fixtures.andAssertThatJson\n import io.tolgee.fixtures.andIsForbidden\n import io.tolgee.fixtures.andIsOk\n import io.tolgee.fixtures.isValidId\n import io.tolgee.fixtures.node\n-import io.tolgee.testing.AuthorizedControllerTest\n+import io.tolgee.model.enums.Scope\n+import io.tolgee.testing.annotations.ProjectApiKeyAuthTestMethod\n import io.tolgee.testing.assert\n import io.tolgee.testing.assertions.Assertions.assertThat\n import org.junit.jupiter.api.Test\n \n-class V2ImportControllerApplicationTest : AuthorizedControllerTest() {\n+class V2ImportControllerApplicationTest : ProjectAuthControllerTest(\"/v2/projects/\") {\n   @Test\n   fun `it applies the import`() {\n     val testData = ImportTestData()\n@@ -83,7 +85,7 @@ class V2ImportControllerApplicationTest : AuthorizedControllerTest() {\n     val path = \"/v2/projects/$projectId/import/apply?forceMode=OVERRIDE\"\n     performAuthPut(path, null).andIsForbidden.andAssertThatJson {\n       node(\"params\") {\n-        node(\"[0]\").isEqualTo(\"\"\"[\"keys.edit\"]\"\"\")\n+        node(\"[0]\").isEqualTo(\"\"\"\"keys.create\"\"\"\")\n       }\n     }\n   }\n@@ -128,6 +130,22 @@ class V2ImportControllerApplicationTest : AuthorizedControllerTest() {\n     performAuthPut(path, null).andIsForbidden\n   }\n \n+  @Test\n+  @ProjectApiKeyAuthTestMethod(scopes = [Scope.TRANSLATIONS_VIEW])\n+  fun `it checks permissions with API key (view only)`() {\n+    val testData = ImportTestData()\n+    testData.importBuilder.data.importFiles[0].data.importKeys.removeIf { it.self == testData.newLongKey }\n+    val resolveFrench = testData.addFrenchTranslations()\n+    resolveFrench()\n+\n+    testDataService.saveTestData(testData.root)\n+    projectSupplier = { testData.project }\n+    userAccount = testData.userAccount\n+\n+    val path = \"import/apply?forceMode=OVERRIDE\"\n+    performProjectAuthPut(path, null).andIsForbidden\n+  }\n+\n   @Test\n   fun `it sets outdated on update`() {\n     val testData = ImportTestData()"
        },
        {
          "filename": "backend/app/src/test/kotlin/io/tolgee/api/v2/controllers/v2KeyController/KeyControllerCreationTest.kt",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -8,6 +8,7 @@ import io.tolgee.dtos.request.key.KeyScreenshotDto\n import io.tolgee.exceptions.FileStoreException\n import io.tolgee.fixtures.andAssertThatJson\n import io.tolgee.fixtures.andIsCreated\n+import io.tolgee.fixtures.andIsForbidden\n import io.tolgee.fixtures.andPrettyPrint\n import io.tolgee.fixtures.isValidId\n import io.tolgee.fixtures.node\n@@ -63,7 +64,7 @@ class KeyControllerCreationTest : ProjectAuthControllerTest(\"/v2/projects/\") {\n       }\n   }\n \n-  @ProjectApiKeyAuthTestMethod(scopes = [Scope.KEYS_CREATE])\n+  @ProjectApiKeyAuthTestMethod(scopes = [Scope.KEYS_CREATE, Scope.TRANSLATIONS_EDIT])\n   @Test\n   fun `creates key with keys create scope`() {\n     performProjectAuthPost(\"keys\", CreateKeyDto(name = \"super_key\", translations = mapOf(\"en\" to \"\", \"de\" to \"\")))\n@@ -73,6 +74,13 @@ class KeyControllerCreationTest : ProjectAuthControllerTest(\"/v2/projects/\") {\n       }\n   }\n \n+  @ProjectApiKeyAuthTestMethod(scopes = [Scope.KEYS_CREATE])\n+  @Test\n+  fun `create key with translations require translate permissions`() {\n+    performProjectAuthPost(\"keys\", CreateKeyDto(name = \"super_key\", translations = mapOf(\"en\" to \"\", \"de\" to \"\")))\n+      .andIsForbidden\n+  }\n+\n   @ProjectJWTAuthTestMethod\n   @Test\n   fun `creates key with translations and tags and screenshots`() {"
        },
        {
          "filename": "backend/app/src/test/kotlin/io/tolgee/service/TelemetryServiceTest.kt",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -25,7 +25,7 @@ import org.springframework.web.client.RestTemplate\n @SpringBootTest(\n   properties = [\n     \"tolgee.telemetry.report-period-ms=200\",\n-    \"tolgee.telemetry.enabled=true\"\n+    \"tolgee.telemetry.enabled=false\"\n   ]\n )\n class TelemetryServiceTest : AbstractSpringTest() {\n@@ -39,7 +39,7 @@ class TelemetryServiceTest : AbstractSpringTest() {\n \n   @AfterEach\n   fun clean() {\n-    telemetryProperties.enabled = true\n+    telemetryProperties.enabled = false\n   }\n \n   @Test\n@@ -61,6 +61,7 @@ class TelemetryServiceTest : AbstractSpringTest() {\n \n   @Test\n   fun `reports when enabled`() {\n+    telemetryProperties.enabled = true\n     val testData = BaseTestData().apply {\n       this.root.addProject { name = \"bbbb\" }.build {\n         val en = addEnglish()"
        },
        {
          "filename": "backend/app/src/test/resources/application.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -66,6 +66,7 @@ tolgee:\n     enabled: false\n   telemetry:\n     enabled: false\n+    server: http://localhost:8080\n logging:\n   level:\n     io.tolgee.billing.api.v2.OrganizationInvoicesController: DEBUG"
        },
        {
          "filename": "backend/data/src/main/kotlin/io/tolgee/repository/dataImport/ImportLanguageRepository.kt",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -68,4 +68,15 @@ interface ImportLanguageRepository : JpaRepository<ImportLanguage, Long> {\n             \"\"\"\n   )\n   fun findViewById(languageId: Long): Optional<ImportLanguageView>\n+\n+  @Query(\n+    \"\"\"\n+      select distinct il.existingLanguage.id \n+        from ImportLanguage il \n+        join il.file if \n+        where if.import.id = :importId \n+          and il.existingLanguage.id is not null\n+    \"\"\"\n+  )\n+  fun findAssignedExistingLanguageIds(importId: Long): List<Long>\n }"
        },
        {
          "filename": "backend/data/src/main/kotlin/io/tolgee/service/dataImport/StoredDataImporter.kt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -124,7 +124,7 @@ class StoredDataImporter(\n   private fun checkKeyPermissions() {\n     val isCreatingKey = keysToSave.values.any { it.id == 0L }\n     if (isCreatingKey) {\n-      securityService.checkProjectPermission(import.project.id, Scope.KEYS_EDIT)\n+      securityService.checkProjectPermission(import.project.id, Scope.KEYS_CREATE)\n     }\n   }\n "
        },
        {
          "filename": "backend/data/src/main/kotlin/io/tolgee/service/security/SecurityService.kt",
          "status": "modified",
          "additions": 14,
          "deletions": 22,
          "patch": "@@ -40,21 +40,17 @@ class SecurityService @Autowired constructor(\n       throw PermissionException()\n   }\n \n-  fun checkProjectPermission(projectId: Long, requiredScopes: Scope, userAccountDto: UserAccountDto) {\n-    checkProjectPermissionOr(projectId, listOf(requiredScopes), userAccountDto)\n-  }\n-\n   fun checkProjectPermission(projectId: Long, requiredScopes: Scope, apiKey: ApiKey) {\n-    checkProjectPermissionOr(listOf(requiredScopes), apiKey)\n+    checkProjectPermission(listOf(requiredScopes), apiKey)\n   }\n \n-  private fun checkProjectPermissionOr(requiredScopes: List<Scope>, apiKey: ApiKey) {\n-    this.checkApiKeyScopesOr(requiredScopes, apiKey)\n+  private fun checkProjectPermission(requiredScopes: List<Scope>, apiKey: ApiKey) {\n+    this.checkApiKeyScopes(requiredScopes, apiKey)\n   }\n \n-  fun checkProjectPermissionOr(\n+  fun checkProjectPermissionNoApiKey(\n     projectId: Long,\n-    requiredScopes: Collection<Scope>,\n+    requiredScope: Scope,\n     userAccountDto: UserAccountDto\n   ) {\n     if (isUserAdmin(userAccountDto)) {\n@@ -64,32 +60,27 @@ class SecurityService @Autowired constructor(\n     val allowedScopes = getProjectPermissionScopes(projectId, userAccountDto.id)\n       ?: throw PermissionException(Message.USER_HAS_NO_PROJECT_ACCESS)\n \n-    checkProjectPermissionOr(projectId, requiredScopes, allowedScopes)\n+    checkPermission(requiredScope, allowedScopes)\n   }\n \n-  fun checkProjectPermissionOr(\n-    projectId: Long,\n-    requiredScopes: Collection<Scope>,\n+  private fun checkPermission(\n+    requiredScope: Scope,\n     allowedScopes: Array<Scope>\n   ) {\n-    if (!allowedScopes.any { requiredScopes.contains(it) }) {\n+    if (!allowedScopes.contains(requiredScope)) {\n       @Suppress(\"UNCHECKED_CAST\")\n       throw PermissionException(\n         Message.OPERATION_NOT_PERMITTED,\n-        listOf(requiredScopes.map { it.value }) as List<Serializable>\n+        listOf(requiredScope.value) as List<Serializable>\n       )\n     }\n   }\n \n   fun checkProjectPermission(projectId: Long, requiredPermission: Scope) {\n-    val apiKey = activeApiKey ?: return checkProjectPermission(projectId, requiredPermission, activeUser)\n+    val apiKey = activeApiKey ?: return checkProjectPermissionNoApiKey(projectId, requiredPermission, activeUser)\n     return checkProjectPermission(projectId, requiredPermission, apiKey)\n   }\n \n-  fun checkProjectPermissionOr(projectId: Long, requiredPermissions: Collection<Scope>) {\n-    checkProjectPermissionOr(projectId, requiredPermissions, activeUser)\n-  }\n-\n   fun checkLanguageViewPermissionByTag(projectId: Long, languageTags: Collection<String>) {\n     checkProjectPermission(projectId, Scope.TRANSLATIONS_VIEW)\n     checkLanguagePermissionByTag(\n@@ -226,9 +217,10 @@ class SecurityService @Autowired constructor(\n     }\n   }\n \n-  fun checkApiKeyScopesOr(scopes: Collection<Scope>, apiKey: ApiKey) {\n+  fun checkApiKeyScopes(scopes: Collection<Scope>, apiKey: ApiKey) {\n     checkApiKeyScopes(apiKey) { expandedScopes ->\n-      if (!expandedScopes.any { it in apiKey.scopesEnum }) {\n+      val hasRequiredPermission = scopes.all { expandedScopes.contains(it) }\n+      if (!hasRequiredPermission) {\n         throw PermissionException()\n       }\n     }"
        },
        {
          "filename": "ee/backend/tests/src/test/resources/application.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -66,6 +66,7 @@ tolgee:\n     enabled: false\n   telemetry:\n     enabled: false\n+    server: http://localhost:8080\n \n management:\n   endpoint:"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 10,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "693514fe1a4996c5ced4c8e9ba29ac9368e77e16",
            "date": "2025-01-14T16:27:27Z",
            "author_login": "TolgeeMachine"
          },
          {
            "sha": "38df03803b286fd0ca77e4a054ddbac17278648f",
            "date": "2025-01-14T16:02:46Z",
            "author_login": "stepan662"
          },
          {
            "sha": "88ca6955a1e2c4f68ec19c761c9762269cd62273",
            "date": "2025-01-14T12:10:33Z",
            "author_login": "TolgeeMachine"
          },
          {
            "sha": "c4505f4e613da555446d002e940ea571ddf591a0",
            "date": "2025-01-14T11:47:29Z",
            "author_login": "stepan662"
          },
          {
            "sha": "9d139d7e353441eadc6493a6b072776e0a4960a4",
            "date": "2025-01-14T10:33:42Z",
            "author_login": "TolgeeMachine"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-862",
    "description": "Tolgee is an open-source localization platform. Starting in version 3.14.0 and prior to version 3.23.1, when a request is made using an API key, the backend fails to verify the permission scopes associated with the key, effectively bypassing permission checks entirely for some endpoints. It's important to note that this vulnerability only affects projects that have inadvertently exposed their API keys on the internet. Projects that have kept their API keys secure are not impacted. This issue is fixed in version 3.23.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-07-27T19:15:10.313",
    "last_modified": "2024-11-21T08:13:43.610",
    "fix_date": "2023-07-21T14:30:34Z"
  },
  "references": [
    {
      "url": "https://github.com/tolgee/tolgee-platform/commit/4776cba67e7bb8c1b0259376e3e5fa3bb46e45c7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tolgee/tolgee-platform/pull/1818",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tolgee/tolgee-platform/releases/tag/v3.23.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tolgee/tolgee-platform/security/advisories/GHSA-4f9j-4vh4-p85v",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/tolgee/tolgee-platform/commit/4776cba67e7bb8c1b0259376e3e5fa3bb46e45c7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tolgee/tolgee-platform/pull/1818",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tolgee/tolgee-platform/releases/tag/v3.23.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tolgee/tolgee-platform/security/advisories/GHSA-4f9j-4vh4-p85v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.278102",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tolgee-platform",
    "owner": "tolgee",
    "created_at": "2020-10-13T16:36:39Z",
    "updated_at": "2025-01-14T19:28:21Z",
    "pushed_at": "2025-01-14T16:52:18Z",
    "size": 144919,
    "stars": 2310,
    "forks": 220,
    "open_issues": 138,
    "watchers": 2310,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "feature/notifications"
    ],
    "languages": {
      "TypeScript": 3188062,
      "Kotlin": 2539002,
      "JavaScript": 20192,
      "Dockerfile": 1364,
      "PLpgSQL": 663,
      "Shell": 513,
      "HTML": 483
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T21:06:18.446768"
  }
}