{
  "cve_id": "CVE-2023-3863",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "6709d4b7bc2e079241fdef15d1160581c5261c10",
    "related_commits": [
      "6709d4b7bc2e079241fdef15d1160581c5261c10",
      "6709d4b7bc2e079241fdef15d1160581c5261c10"
    ],
    "patch_url": "https://github.com/torvalds/linux/commit/6709d4b7bc2e079241fdef15d1160581c5261c10.patch",
    "fix_commit_details": {
      "sha": "6709d4b7bc2e079241fdef15d1160581c5261c10",
      "commit_date": "2023-06-25T09:10:07Z",
      "author": {
        "login": "f0rm2l1n",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "net: nfc: Fix use-after-free caused by nfc_llcp_find_local",
        "length": 9486,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 101,
        "additions": 77,
        "deletions": 24
      },
      "files": [
        {
          "filename": "net/nfc/llcp.h",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -201,7 +201,6 @@ void nfc_llcp_sock_link(struct llcp_sock_list *l, struct sock *s);\n void nfc_llcp_sock_unlink(struct llcp_sock_list *l, struct sock *s);\n void nfc_llcp_socket_remote_param_init(struct nfc_llcp_sock *sock);\n struct nfc_llcp_local *nfc_llcp_find_local(struct nfc_dev *dev);\n-struct nfc_llcp_local *nfc_llcp_local_get(struct nfc_llcp_local *local);\n int nfc_llcp_local_put(struct nfc_llcp_local *local);\n u8 nfc_llcp_get_sdp_ssap(struct nfc_llcp_local *local,\n \t\t\t struct nfc_llcp_sock *sock);"
        },
        {
          "filename": "net/nfc/llcp_commands.c",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -359,6 +359,7 @@ int nfc_llcp_send_symm(struct nfc_dev *dev)\n \tstruct sk_buff *skb;\n \tstruct nfc_llcp_local *local;\n \tu16 size = 0;\n+\tint err;\n \n \tlocal = nfc_llcp_find_local(dev);\n \tif (local == NULL)\n@@ -368,8 +369,10 @@ int nfc_llcp_send_symm(struct nfc_dev *dev)\n \tsize += dev->tx_headroom + dev->tx_tailroom + NFC_HEADER_SIZE;\n \n \tskb = alloc_skb(size, GFP_KERNEL);\n-\tif (skb == NULL)\n-\t\treturn -ENOMEM;\n+\tif (skb == NULL) {\n+\t\terr = -ENOMEM;\n+\t\tgoto out;\n+\t}\n \n \tskb_reserve(skb, dev->tx_headroom + NFC_HEADER_SIZE);\n \n@@ -379,8 +382,11 @@ int nfc_llcp_send_symm(struct nfc_dev *dev)\n \n \tnfc_llcp_send_to_raw_sock(local, skb, NFC_DIRECTION_TX);\n \n-\treturn nfc_data_exchange(dev, local->target_idx, skb,\n+\terr = nfc_data_exchange(dev, local->target_idx, skb,\n \t\t\t\t nfc_llcp_recv, local);\n+out:\n+\tnfc_llcp_local_put(local);\n+\treturn err;\n }\n \n int nfc_llcp_send_connect(struct nfc_llcp_sock *sock)"
        },
        {
          "filename": "net/nfc/llcp_core.c",
          "status": "modified",
          "additions": 42,
          "deletions": 7,
          "patch": "@@ -17,6 +17,8 @@\n static u8 llcp_magic[3] = {0x46, 0x66, 0x6d};\n \n static LIST_HEAD(llcp_devices);\n+/* Protects llcp_devices list */\n+static DEFINE_SPINLOCK(llcp_devices_lock);\n \n static void nfc_llcp_rx_skb(struct nfc_llcp_local *local, struct sk_buff *skb);\n \n@@ -141,7 +143,7 @@ static void nfc_llcp_socket_release(struct nfc_llcp_local *local, bool device,\n \twrite_unlock(&local->raw_sockets.lock);\n }\n \n-struct nfc_llcp_local *nfc_llcp_local_get(struct nfc_llcp_local *local)\n+static struct nfc_llcp_local *nfc_llcp_local_get(struct nfc_llcp_local *local)\n {\n \tkref_get(&local->ref);\n \n@@ -169,7 +171,6 @@ static void local_release(struct kref *ref)\n \n \tlocal = container_of(ref, struct nfc_llcp_local, ref);\n \n-\tlist_del(&local->list);\n \tlocal_cleanup(local);\n \tkfree(local);\n }\n@@ -282,12 +283,33 @@ static void nfc_llcp_sdreq_timer(struct timer_list *t)\n struct nfc_llcp_local *nfc_llcp_find_local(struct nfc_dev *dev)\n {\n \tstruct nfc_llcp_local *local;\n+\tstruct nfc_llcp_local *res = NULL;\n \n+\tspin_lock(&llcp_devices_lock);\n \tlist_for_each_entry(local, &llcp_devices, list)\n-\t\tif (local->dev == dev)\n+\t\tif (local->dev == dev) {\n+\t\t\tres = nfc_llcp_local_get(local);\n+\t\t\tbreak;\n+\t\t}\n+\tspin_unlock(&llcp_devices_lock);\n+\n+\treturn res;\n+}\n+\n+static struct nfc_llcp_local *nfc_llcp_remove_local(struct nfc_dev *dev)\n+{\n+\tstruct nfc_llcp_local *local, *tmp;\n+\n+\tspin_lock(&llcp_devices_lock);\n+\tlist_for_each_entry_safe(local, tmp, &llcp_devices, list)\n+\t\tif (local->dev == dev) {\n+\t\t\tlist_del(&local->list);\n+\t\t\tspin_unlock(&llcp_devices_lock);\n \t\t\treturn local;\n+\t\t}\n+\tspin_unlock(&llcp_devices_lock);\n \n-\tpr_debug(\"No device found\\n\");\n+\tpr_warn(\"Shutting down device not found\\n\");\n \n \treturn NULL;\n }\n@@ -608,12 +630,15 @@ u8 *nfc_llcp_general_bytes(struct nfc_dev *dev, size_t *general_bytes_len)\n \n \t*general_bytes_len = local->gb_len;\n \n+\tnfc_llcp_local_put(local);\n+\n \treturn local->gb;\n }\n \n int nfc_llcp_set_remote_gb(struct nfc_dev *dev, const u8 *gb, u8 gb_len)\n {\n \tstruct nfc_llcp_local *local;\n+\tint err;\n \n \tif (gb_len < 3 || gb_len > NFC_MAX_GT_LEN)\n \t\treturn -EINVAL;\n@@ -630,12 +655,16 @@ int nfc_llcp_set_remote_gb(struct nfc_dev *dev, const u8 *gb, u8 gb_len)\n \n \tif (memcmp(local->remote_gb, llcp_magic, 3)) {\n \t\tpr_err(\"MAC does not support LLCP\\n\");\n-\t\treturn -EINVAL;\n+\t\terr = -EINVAL;\n+\t\tgoto out;\n \t}\n \n-\treturn nfc_llcp_parse_gb_tlv(local,\n+\terr = nfc_llcp_parse_gb_tlv(local,\n \t\t\t\t     &local->remote_gb[3],\n \t\t\t\t     local->remote_gb_len - 3);\n+out:\n+\tnfc_llcp_local_put(local);\n+\treturn err;\n }\n \n static u8 nfc_llcp_dsap(const struct sk_buff *pdu)\n@@ -1517,6 +1546,8 @@ int nfc_llcp_data_received(struct nfc_dev *dev, struct sk_buff *skb)\n \n \t__nfc_llcp_recv(local, skb);\n \n+\tnfc_llcp_local_put(local);\n+\n \treturn 0;\n }\n \n@@ -1533,6 +1564,8 @@ void nfc_llcp_mac_is_down(struct nfc_dev *dev)\n \n \t/* Close and purge all existing sockets */\n \tnfc_llcp_socket_release(local, true, 0);\n+\n+\tnfc_llcp_local_put(local);\n }\n \n void nfc_llcp_mac_is_up(struct nfc_dev *dev, u32 target_idx,\n@@ -1558,6 +1591,8 @@ void nfc_llcp_mac_is_up(struct nfc_dev *dev, u32 target_idx,\n \t\tmod_timer(&local->link_timer,\n \t\t\t  jiffies + msecs_to_jiffies(local->remote_lto));\n \t}\n+\n+\tnfc_llcp_local_put(local);\n }\n \n int nfc_llcp_register_device(struct nfc_dev *ndev)\n@@ -1608,7 +1643,7 @@ int nfc_llcp_register_device(struct nfc_dev *ndev)\n \n void nfc_llcp_unregister_device(struct nfc_dev *dev)\n {\n-\tstruct nfc_llcp_local *local = nfc_llcp_find_local(dev);\n+\tstruct nfc_llcp_local *local = nfc_llcp_remove_local(dev);\n \n \tif (local == NULL) {\n \t\tpr_debug(\"No such device\\n\");"
        },
        {
          "filename": "net/nfc/llcp_sock.c",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -99,7 +99,7 @@ static int llcp_sock_bind(struct socket *sock, struct sockaddr *addr, int alen)\n \t}\n \n \tllcp_sock->dev = dev;\n-\tllcp_sock->local = nfc_llcp_local_get(local);\n+\tllcp_sock->local = local;\n \tllcp_sock->nfc_protocol = llcp_addr.nfc_protocol;\n \tllcp_sock->service_name_len = min_t(unsigned int,\n \t\t\t\t\t    llcp_addr.service_name_len,\n@@ -186,7 +186,7 @@ static int llcp_raw_sock_bind(struct socket *sock, struct sockaddr *addr,\n \t}\n \n \tllcp_sock->dev = dev;\n-\tllcp_sock->local = nfc_llcp_local_get(local);\n+\tllcp_sock->local = local;\n \tllcp_sock->nfc_protocol = llcp_addr.nfc_protocol;\n \n \tnfc_llcp_sock_link(&local->raw_sockets, sk);\n@@ -696,22 +696,22 @@ static int llcp_sock_connect(struct socket *sock, struct sockaddr *_addr,\n \tif (dev->dep_link_up == false) {\n \t\tret = -ENOLINK;\n \t\tdevice_unlock(&dev->dev);\n-\t\tgoto put_dev;\n+\t\tgoto sock_llcp_put_local;\n \t}\n \tdevice_unlock(&dev->dev);\n \n \tif (local->rf_mode == NFC_RF_INITIATOR &&\n \t    addr->target_idx != local->target_idx) {\n \t\tret = -ENOLINK;\n-\t\tgoto put_dev;\n+\t\tgoto sock_llcp_put_local;\n \t}\n \n \tllcp_sock->dev = dev;\n-\tllcp_sock->local = nfc_llcp_local_get(local);\n+\tllcp_sock->local = local;\n \tllcp_sock->ssap = nfc_llcp_get_local_ssap(local);\n \tif (llcp_sock->ssap == LLCP_SAP_MAX) {\n \t\tret = -ENOMEM;\n-\t\tgoto sock_llcp_put_local;\n+\t\tgoto sock_llcp_nullify;\n \t}\n \n \tllcp_sock->reserved_ssap = llcp_sock->ssap;\n@@ -757,11 +757,13 @@ static int llcp_sock_connect(struct socket *sock, struct sockaddr *_addr,\n sock_llcp_release:\n \tnfc_llcp_put_ssap(local, llcp_sock->ssap);\n \n-sock_llcp_put_local:\n-\tnfc_llcp_local_put(llcp_sock->local);\n+sock_llcp_nullify:\n \tllcp_sock->local = NULL;\n \tllcp_sock->dev = NULL;\n \n+sock_llcp_put_local:\n+\tnfc_llcp_local_put(local);\n+\n put_dev:\n \tnfc_put_device(dev);\n "
        },
        {
          "filename": "net/nfc/netlink.c",
          "status": "modified",
          "additions": 15,
          "deletions": 5,
          "patch": "@@ -1039,11 +1039,14 @@ static int nfc_genl_llc_get_params(struct sk_buff *skb, struct genl_info *info)\n \tmsg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);\n \tif (!msg) {\n \t\trc = -ENOMEM;\n-\t\tgoto exit;\n+\t\tgoto put_local;\n \t}\n \n \trc = nfc_genl_send_params(msg, local, info->snd_portid, info->snd_seq);\n \n+put_local:\n+\tnfc_llcp_local_put(local);\n+\n exit:\n \tdevice_unlock(&dev->dev);\n \n@@ -1105,7 +1108,7 @@ static int nfc_genl_llc_set_params(struct sk_buff *skb, struct genl_info *info)\n \tif (info->attrs[NFC_ATTR_LLC_PARAM_LTO]) {\n \t\tif (dev->dep_link_up) {\n \t\t\trc = -EINPROGRESS;\n-\t\t\tgoto exit;\n+\t\t\tgoto put_local;\n \t\t}\n \n \t\tlocal->lto = nla_get_u8(info->attrs[NFC_ATTR_LLC_PARAM_LTO]);\n@@ -1117,6 +1120,9 @@ static int nfc_genl_llc_set_params(struct sk_buff *skb, struct genl_info *info)\n \tif (info->attrs[NFC_ATTR_LLC_PARAM_MIUX])\n \t\tlocal->miux = cpu_to_be16(miux);\n \n+put_local:\n+\tnfc_llcp_local_put(local);\n+\n exit:\n \tdevice_unlock(&dev->dev);\n \n@@ -1172,7 +1178,7 @@ static int nfc_genl_llc_sdreq(struct sk_buff *skb, struct genl_info *info)\n \n \t\tif (rc != 0) {\n \t\t\trc = -EINVAL;\n-\t\t\tgoto exit;\n+\t\t\tgoto put_local;\n \t\t}\n \n \t\tif (!sdp_attrs[NFC_SDP_ATTR_URI])\n@@ -1191,7 +1197,7 @@ static int nfc_genl_llc_sdreq(struct sk_buff *skb, struct genl_info *info)\n \t\tsdreq = nfc_llcp_build_sdreq_tlv(tid, uri, uri_len);\n \t\tif (sdreq == NULL) {\n \t\t\trc = -ENOMEM;\n-\t\t\tgoto exit;\n+\t\t\tgoto put_local;\n \t\t}\n \n \t\ttlvs_len += sdreq->tlv_len;\n@@ -1201,10 +1207,14 @@ static int nfc_genl_llc_sdreq(struct sk_buff *skb, struct genl_info *info)\n \n \tif (hlist_empty(&sdreq_list)) {\n \t\trc = -EINVAL;\n-\t\tgoto exit;\n+\t\tgoto put_local;\n \t}\n \n \trc = nfc_llcp_send_snl_sdreq(local, &sdreq_list, tlvs_len);\n+\n+put_local:\n+\tnfc_llcp_local_put(local);\n+\n exit:\n \tdevice_unlock(&dev->dev);\n "
        },
        {
          "filename": "net/nfc/nfc.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -52,6 +52,7 @@ int nfc_llcp_set_remote_gb(struct nfc_dev *dev, const u8 *gb, u8 gb_len);\n u8 *nfc_llcp_general_bytes(struct nfc_dev *dev, size_t *general_bytes_len);\n int nfc_llcp_data_received(struct nfc_dev *dev, struct sk_buff *skb);\n struct nfc_llcp_local *nfc_llcp_find_local(struct nfc_dev *dev);\n+int nfc_llcp_local_put(struct nfc_llcp_local *local);\n int __init nfc_llcp_init(void);\n void nfc_llcp_exit(void);\n void nfc_llcp_free_sdp_tlv(struct nfc_llcp_sdp_tlv *sdp);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7f5b6a8ec18e3add4c74682f60b90c31bdf849f2",
            "date": "2025-01-14T19:32:14Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c3812b15000cc5b7b17c7238f8b12f6a22df0b1d",
            "date": "2025-01-14T18:07:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "79a1d390f879563119bf2848b621bc7eed228c7d",
            "date": "2025-01-14T17:54:57Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c45323b7560ec87c37c729b703c86ee65f136d75",
            "date": "2025-01-13T17:03:18Z",
            "author_login": "torvalds"
          },
          {
            "sha": "34c8e74cd6667ef5da90d448a1af702c4b873bd3",
            "date": "2025-01-13T08:52:08Z",
            "author_login": "YageGeng"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.4,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-416",
    "description": "A use-after-free flaw was found in nfc_llcp_find_local in net/nfc/llcp_core.c in NFC in the Linux kernel. This flaw allows a local user with special privileges to impact a kernel information leak issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-07-24T15:15:09.397",
    "last_modified": "2024-11-21T08:18:14.843",
    "fix_date": "2023-06-25T09:10:07Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/security/cve/CVE-2023-3863",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2225126",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/6709d4b7bc2e079241fdef15d1160581c5261c10",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00027.html",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240202-0002/",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://www.debian.org/security/2023/dsa-5480",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2023/dsa-5492",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/security/cve/CVE-2023-3863",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2225126",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/6709d4b7bc2e079241fdef15d1160581c5261c10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00027.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240202-0002/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.debian.org/security/2023/dsa-5480",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2023/dsa-5492",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.265280",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}