{
  "cve_id": "CVE-2023-38689",
  "github_data": {
    "repository": "RS485/LogisticsPipes",
    "fix_commit": "39a90b8f2d1a2bcc512ec68c3e139f1dac07aa56",
    "related_commits": [
      "39a90b8f2d1a2bcc512ec68c3e139f1dac07aa56",
      "527c4f4fb028e9afab29d4e639935010ad7be9e7",
      "39a90b8f2d1a2bcc512ec68c3e139f1dac07aa56",
      "527c4f4fb028e9afab29d4e639935010ad7be9e7"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "39a90b8f2d1a2bcc512ec68c3e139f1dac07aa56",
      "commit_date": "2016-05-18T11:27:11Z",
      "author": {
        "login": "bziemons",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Remove IOException escalation",
        "length": 29,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 2781,
        "additions": 1175,
        "deletions": 1606
      },
      "files": [
        {
          "filename": "common/logisticspipes/blocks/stats/TrackingTask.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.blocks.stats;\n \n-import java.io.IOException;\n-\n import net.minecraft.item.ItemStack;\n import net.minecraft.nbt.NBTTagCompound;\n \n@@ -59,13 +57,13 @@ public void writeToNBT(NBTTagCompound nbt) {\n \t\titem.makeNormalStack(1).writeToNBT(nbt);\n \t}\n \n-\tpublic void writeToLPData(LPDataOutput output) throws IOException {\n+\tpublic void writeToLPData(LPDataOutput output) {\n \t\toutput.writeLongArray(amountRecorded);\n \t\toutput.writeInt(arrayPos);\n \t\toutput.writeItemIdentifier(item);\n \t}\n \n-\tpublic void readFromLPData(LPDataInput input) throws IOException {\n+\tpublic void readFromLPData(LPDataInput input) {\n \t\tamountRecorded = input.readLongArray();\n \t\tarrayPos = input.readInt();\n \t\titem = input.readItemIdentifier();"
        },
        {
          "filename": "common/logisticspipes/config/PlayerConfig.java",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -55,10 +55,6 @@ public PlayerConfig(boolean uninitialised, PlayerIdentifier ident) {\n \t\tplayerIdent = ident;\n \t}\n \n-\tpublic void setUseNewRenderer(boolean flag) {\n-\t\tuseNewRenderer = flag;\n-\t}\n-\n \tpublic void setUseFallbackRenderer(boolean flag) {\n \t\tuseFallbackRenderer = flag;\n \t}\n@@ -75,14 +71,14 @@ public void sendUpdate() {\n \t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(PlayerConfigToServerPacket.class).setConfig(this));\n \t}\n \n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeBoolean(useNewRenderer);\n \t\toutput.writeBoolean(useFallbackRenderer);\n \t\toutput.writeInt(renderPipeDistance);\n \t\toutput.writeInt(renderPipeContentDistance);\n \t}\n \n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tuseNewRenderer = input.readBoolean();\n \t\tuseFallbackRenderer = input.readBoolean();\n \t\trenderPipeDistance = input.readInt();\n@@ -218,4 +214,8 @@ public void applyTo(PlayerConfig playerConfig) {\n \tpublic boolean isUseNewRenderer() {\n \t\treturn useNewRenderer && SimpleServiceLocator.cclProxy.isActivated();\n \t}\n+\n+\tpublic void setUseNewRenderer(boolean flag) {\n+\t\tuseNewRenderer = flag;\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/interfaces/IClientState.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,13 +1,11 @@\n package logisticspipes.interfaces;\n \n-import java.io.IOException;\n-\n import network.rs485.logisticspipes.util.LPDataInput;\n import network.rs485.logisticspipes.util.LPDataOutput;\n \n public interface IClientState {\n \n-\tvoid writeData(LPDataOutput output) throws IOException;\n+\tvoid writeData(LPDataOutput output);\n \n-\tvoid readData(LPDataInput input) throws IOException;\n+\tvoid readData(LPDataInput input);\n }"
        },
        {
          "filename": "common/logisticspipes/network/IReadListObject.java",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -1,10 +1,8 @@\n package logisticspipes.network;\n \n-import java.io.IOException;\n-\n import network.rs485.logisticspipes.util.LPDataInput;\n \n public interface IReadListObject<T> {\n \n-\tT readObject(LPDataInput input) throws IOException;\n+\tT readObject(LPDataInput input);\n }"
        },
        {
          "filename": "common/logisticspipes/network/IWriteListObject.java",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -1,10 +1,8 @@\n package logisticspipes.network;\n \n-import java.io.IOException;\n-\n import network.rs485.logisticspipes.util.LPDataOutput;\n \n public interface IWriteListObject<T> {\n \n-\tvoid writeObject(LPDataOutput output, T object) throws IOException;\n+\tvoid writeObject(LPDataOutput output, T object);\n }"
        },
        {
          "filename": "common/logisticspipes/network/NewGuiHandler.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -36,6 +36,8 @@ public class NewGuiHandler {\n \tpublic static List<GuiProvider> guilist;\n \tpublic static Map<Class<? extends GuiProvider>, GuiProvider> guimap;\n \n+\tprivate NewGuiHandler() { }\n+\n \t@SuppressWarnings(\"unchecked\")\n \t// Suppressed because this cast should never fail.\n \tpublic static <T extends GuiProvider> T getGui(Class<T> clazz) {\n@@ -64,7 +66,6 @@ public static final void initialize() {\n \t\t}\n \t}\n \n-\t@SneakyThrows(IOException.class)\n \tpublic static void openGui(GuiProvider guiProvider, EntityPlayer oPlayer) {\n \t\tif (!(oPlayer instanceof EntityPlayerMP)) {\n \t\t\tthrow new UnsupportedOperationException(\"Gui can only be opened on the server side\");\n@@ -96,7 +97,6 @@ public static void openGui(GuiProvider guiProvider, EntityPlayer oPlayer) {\n \t\tplayer.openContainer.addCraftingToCrafters(player);\n \t}\n \n-\t@SneakyThrows(IOException.class)\n \t@SideOnly(Side.CLIENT)\n \tpublic static void openGui(GUIPacket packet, EntityPlayer player) {\n \t\tint guiID = packet.getGuiID();"
        },
        {
          "filename": "common/logisticspipes/network/PacketHandler.java",
          "status": "modified",
          "additions": 49,
          "deletions": 51,
          "patch": "@@ -39,11 +39,12 @@\n @Sharable\n public class PacketHandler extends MessageToMessageCodec<FMLProxyPacket, ModernPacket> {\n \n+\tpublic static final Map<Integer, StackTraceElement[]> debugMap = new HashMap<>();\n+\t//TODO correct to work with WeakReference (See FML original)\n+\tprotected static final AttributeKey<ThreadLocal<FMLProxyPacket>> INBOUNDPACKETTRACKER = new AttributeKey<>(\"lp:inboundpacket\");\n \tpublic static List<ModernPacket> packetlist;\n \tpublic static Map<Class<? extends ModernPacket>, ModernPacket> packetmap;\n-\n \tprivate static int packetDebugID = 1;\n-\tpublic static final Map<Integer, StackTraceElement[]> debugMap = new HashMap<>();\n \n \t@SuppressWarnings(\"unchecked\")\n \t// Suppressed because this cast should never fail.\n@@ -60,18 +61,6 @@ public static <T extends ModernPacket> T getPacket(Class<T> clazz) {\n \t\treturn packet;\n \t}\n \n-\t//horrible hack to carry the proper player for the side along...\n-\tstatic class InboundModernPacketWrapper {\n-\n-\t\tfinal ModernPacket packet;\n-\t\tfinal EntityPlayer player;\n-\n-\t\tInboundModernPacketWrapper(ModernPacket p, EntityPlayer e) {\n-\t\t\tpacket = p;\n-\t\t\tplayer = e;\n-\t\t}\n-\t}\n-\n \t/*\n \t * enumerates all ModernPackets, sets their IDs and populate packetlist/packetmap\n \t */\n@@ -97,15 +86,6 @@ public static final void initialize() {\n \t\t}\n \t}\n \n-\t//TODO correct to work with WeakReference (See FML original)\n-\tprotected static final AttributeKey<ThreadLocal<FMLProxyPacket>> INBOUNDPACKETTRACKER = new AttributeKey<>(\"lp:inboundpacket\");\n-\n-\t@Override\n-\tpublic void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n-\t\tsuper.handlerAdded(ctx);\n-\t\tctx.attr(PacketHandler.INBOUNDPACKETTRACKER).set(new ThreadLocal<>());\n-\t}\n-\n \t//Used to provide the Description packet\n \tpublic static FMLProxyPacket toFMLPacket(ModernPacket msg) throws Exception {\n \t\treturn PacketHandler.toFMLPacket(msg, MainProxy.networkChannelName);\n@@ -121,6 +101,44 @@ private static FMLProxyPacket toFMLPacket(ModernPacket msg, String channel) thro\n \t\treturn new FMLProxyPacket(buffer, channel);\n \t}\n \n+\t//hacky callback to process packets coming from by the packetbufferhandler decompressors\n+\t//TODO replace with proper netty implementation\n+\tpublic static void onPacketData(final LPDataInput data, final EntityPlayer player) {\n+\t\tif (player == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal int packetID = data.readShort();\n+\t\tfinal ModernPacket packet = PacketHandler.packetlist.get(packetID).template();\n+\t\tpacket.setDebugId(data.readInt());\n+\t\tpacket.readData(data);\n+\t\tPacketHandler.onPacketData(packet, player);\n+\t}\n+\n+\tprivate static void onPacketData(ModernPacket packet, final EntityPlayer player) {\n+\t\ttry {\n+\t\t\tpacket.processPacket(player);\n+\t\t\tif (LPConstants.DEBUG) {\n+\t\t\t\tPacketHandler.debugMap.remove(packet.getDebugId());\n+\t\t\t}\n+\t\t} catch (DelayPacketException e) {\n+\t\t\tif (packet.retry() && MainProxy.isClient(player.getEntityWorld())) {\n+\t\t\t\tSimpleServiceLocator.clientBufferHandler.queueFailedPacket(packet, player);\n+\t\t\t} else if (LPConstants.DEBUG) {\n+\t\t\t\tLogisticsPipes.log.error(packet.getClass().getName());\n+\t\t\t\tLogisticsPipes.log.error(packet.toString());\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n+\t\tsuper.handlerAdded(ctx);\n+\t\tctx.attr(PacketHandler.INBOUNDPACKETTRACKER).set(new ThreadLocal<>());\n+\t}\n+\n \t@Override\n \tprotected final void encode(ChannelHandlerContext ctx, ModernPacket msg, List<Object> out) throws Exception {\n \t\tFMLProxyPacket proxy = PacketHandler.toFMLPacket(msg, ctx.channel().attr(NetworkRegistry.FML_CHANNEL).get());\n@@ -150,35 +168,15 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E\n \t\tsuper.exceptionCaught(ctx, cause);\n \t}\n \n-\t//hacky callback to process packets coming from by the packetbufferhandler decompressors\n-\t//TODO replace with proper netty implementation\n-\tpublic static void onPacketData(final LPDataInput data, final EntityPlayer player) throws IOException {\n-\t\tif (player == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfinal int packetID = data.readShort();\n-\t\tfinal ModernPacket packet = PacketHandler.packetlist.get(packetID).template();\n-\t\tpacket.setDebugId(data.readInt());\n-\t\tpacket.readData(data);\n-\t\tPacketHandler.onPacketData(packet, player);\n-\t}\n+\t//horrible hack to carry the proper player for the side along...\n+\tstatic class InboundModernPacketWrapper {\n \n-\tprivate static void onPacketData(ModernPacket packet, final EntityPlayer player) {\n-\t\ttry {\n-\t\t\tpacket.processPacket(player);\n-\t\t\tif (LPConstants.DEBUG) {\n-\t\t\t\tPacketHandler.debugMap.remove(packet.getDebugId());\n-\t\t\t}\n-\t\t} catch (DelayPacketException e) {\n-\t\t\tif (packet.retry() && MainProxy.isClient(player.getEntityWorld())) {\n-\t\t\t\tSimpleServiceLocator.clientBufferHandler.queueFailedPacket(packet, player);\n-\t\t\t} else if (LPConstants.DEBUG) {\n-\t\t\t\tLogisticsPipes.log.error(packet.getClass().getName());\n-\t\t\t\tLogisticsPipes.log.error(packet.toString());\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new RuntimeException(e);\n+\t\tfinal ModernPacket packet;\n+\t\tfinal EntityPlayer player;\n+\n+\t\tInboundModernPacketWrapper(ModernPacket p, EntityPlayer e) {\n+\t\t\tpacket = p;\n+\t\t\tplayer = e;\n \t\t}\n \t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/BooleanModuleCoordinatesGuiProvider.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -10,22 +8,22 @@\n \n public abstract class BooleanModuleCoordinatesGuiProvider extends ModuleCoordinatesGuiProvider {\n \n-\tpublic BooleanModuleCoordinatesGuiProvider(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate boolean flag;\n \n+\tpublic BooleanModuleCoordinatesGuiProvider(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(flag);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tflag = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/CoordinatesGuiProvider.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import net.minecraft.tileentity.TileEntity;\n import net.minecraft.world.World;\n \n@@ -18,10 +16,6 @@\n @ToString\n public abstract class CoordinatesGuiProvider extends GuiProvider {\n \n-\tpublic CoordinatesGuiProvider(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate int posX;\n@@ -32,16 +26,20 @@ public CoordinatesGuiProvider(int id) {\n \t@Setter\n \tprivate int posZ;\n \n+\tpublic CoordinatesGuiProvider(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \n \t\toutput.writeInt(posX);\n \t\toutput.writeInt(posY);\n \t\toutput.writeInt(posZ);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \n \t\tposX = input.readInt();\n \t\tposY = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/CoordinatesPopupGuiProvider.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import net.minecraft.tileentity.TileEntity;\n import net.minecraft.world.World;\n \n@@ -19,10 +17,6 @@\n @ToString\n public abstract class CoordinatesPopupGuiProvider extends PopupGuiProvider {\n \n-\tpublic CoordinatesPopupGuiProvider(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate int posX;\n@@ -33,16 +27,20 @@ public CoordinatesPopupGuiProvider(int id) {\n \t@Setter\n \tprivate int posZ;\n \n+\tpublic CoordinatesPopupGuiProvider(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \n \t\toutput.writeInt(posX);\n \t\toutput.writeInt(posY);\n \t\toutput.writeInt(posZ);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \n \t\tposX = input.readInt();\n \t\tposY = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/GuiProvider.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.inventory.Container;\n import net.minecraftforge.common.util.FakePlayer;\n@@ -21,9 +19,9 @@ public GuiProvider(int id) {\n \t\tthis.id = id;\n \t}\n \n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t/**\n \t * @return LogisticsBaseGuiScreen"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/ModuleCoordinatesGuiProvider.java",
          "status": "modified",
          "additions": 6,
          "deletions": 9,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import net.minecraft.world.World;\n \n import lombok.Getter;\n@@ -19,27 +17,26 @@\n \n public abstract class ModuleCoordinatesGuiProvider extends CoordinatesGuiProvider {\n \n-\tpublic ModuleCoordinatesGuiProvider(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate ModulePositionType slot;\n-\n \t@Getter\n \t@Setter\n \tprivate int positionInt;\n \n+\tpublic ModuleCoordinatesGuiProvider(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeEnum(slot);\n \t\toutput.writeInt(positionInt);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tslot = input.readEnum(ModulePositionType.class);\n \t\tpositionInt = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/ModuleInHandGuiProvider.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.item.ItemStack;\n \n@@ -18,22 +16,22 @@\n \n public abstract class ModuleInHandGuiProvider extends GuiProvider {\n \n-\tpublic ModuleInHandGuiProvider(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate int invSlot;\n \n+\tpublic ModuleInHandGuiProvider(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(invSlot);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tinvSlot = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/NBTModuleCoordinatesGuiProvider.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import net.minecraft.nbt.NBTTagCompound;\n \n import lombok.Getter;\n@@ -21,13 +19,13 @@ public NBTModuleCoordinatesGuiProvider(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeNBTTagCompound(nbt);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tnbt = input.readNBTTagCompound();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractguis/UpgradeCoordinatesGuiProvider.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractguis;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.inventory.Slot;\n \n@@ -16,22 +14,22 @@\n \n public abstract class UpgradeCoordinatesGuiProvider extends CoordinatesPopupGuiProvider {\n \n-\tpublic UpgradeCoordinatesGuiProvider(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PRIVATE)\n \tprivate int positionInt;\n \n+\tpublic UpgradeCoordinatesGuiProvider(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(positionInt);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tpositionInt = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/BitSetCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n import java.util.BitSet;\n \n import lombok.Getter;\n@@ -20,13 +19,13 @@ public BitSetCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBitSet(getFlags());\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsetFlags(input.readBitSet());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/BooleanModuleCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -19,13 +17,13 @@ public BooleanModuleCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(flag);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tflag = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/CoordinatesPacket.java",
          "status": "modified",
          "additions": 12,
          "deletions": 14,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraft.tileentity.TileEntity;\n import net.minecraft.world.World;\n \n@@ -18,16 +16,6 @@\n @ToString\n public abstract class CoordinatesPacket extends ModernPacket {\n \n-\tpublic enum LTGPCompletionCheck {\n-\t\tNONE,\n-\t\tPIPE,\n-\t\tTRANSPORT\n-\t}\n-\n-\tpublic CoordinatesPacket(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate int posX;\n@@ -38,16 +26,20 @@ public CoordinatesPacket(int id) {\n \t@Setter\n \tprivate int posZ;\n \n+\tpublic CoordinatesPacket(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \n \t\toutput.writeInt(posX);\n \t\toutput.writeInt(posY);\n \t\toutput.writeInt(posZ);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \n \t\tposX = input.readInt();\n \t\tposY = input.readInt();\n@@ -173,4 +165,10 @@ public LogisticsTileGenericPipe getPipe(World world, LTGPCompletionCheck check)\n \tprotected void targetNotFound(String message) {\n \t\tthrow new TargetNotFoundException(message, this);\n \t}\n+\n+\tpublic enum LTGPCompletionCheck {\n+\t\tNONE,\n+\t\tPIPE,\n+\t\tTRANSPORT\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/DirectionModuleCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraftforge.common.util.ForgeDirection;\n \n import lombok.Getter;\n@@ -21,13 +19,13 @@ public DirectionModuleCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeForgeDirection(direction);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tdirection = input.readForgeDirection();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/GenericPacket.java",
          "status": "removed",
          "additions": 0,
          "deletions": 57,
          "patch": "@@ -1,57 +0,0 @@\n-package logisticspipes.network.abstractpackets;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInput;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutput;\n-import java.io.ObjectOutputStream;\n-\n-import lombok.Getter;\n-\n-import network.rs485.logisticspipes.util.LPDataInput;\n-import network.rs485.logisticspipes.util.LPDataOutput;\n-\n-public abstract class GenericPacket extends ModernPacket {\n-\n-\t@Getter\n-\tprivate Object[] args;\n-\n-\tpublic GenericPacket(int id) {\n-\t\tsuper(id);\n-\t}\n-\n-\t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n-\t\tint size = input.readInt();\n-\t\targs = new Object[size];\n-\t\tfor (int i = 0; i < size; i++) {\n-\t\t\tbyte[] bytes = input.readByteArray();\n-\t\t\tByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n-\t\t\tObjectInput in = new ObjectInputStream(bis);\n-\t\t\ttry {\n-\t\t\t\tObject o = in.readObject();\n-\t\t\t\targs[i] = o;\n-\t\t\t} catch (ClassNotFoundException e) {\n-\t\t\t\tthrow new UnsupportedOperationException(e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n-\t\toutput.writeInt(args.length);\n-\t\tfor (Object arg : args) {\n-\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n-\t\t\tObjectOutput out = new ObjectOutputStream(bos);\n-\t\t\tout.writeObject(arg);\n-\t\t\toutput.writeByteArray(bos.toByteArray());\n-\t\t}\n-\t}\n-\n-\tpublic GenericPacket setArgs(Object... input) {\n-\t\targs = input;\n-\t\treturn this;\n-\t}\n-}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/Integer2CoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -19,13 +17,13 @@ public Integer2CoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsetInteger2(input.readInt());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(getInteger2());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/Integer2ModuleCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -19,13 +17,13 @@ public Integer2ModuleCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsetInteger2(input.readInt());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(getInteger2());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/IntegerCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -19,13 +17,13 @@ public IntegerCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsetInteger(input.readInt());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(getInteger());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/IntegerModuleCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -19,13 +17,13 @@ public IntegerModuleCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsetInteger(input.readInt());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(getInteger());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/IntegerPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -19,12 +17,12 @@ public IntegerPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsetInteger(input.readInt());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(getInteger());\n \t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/InventoryModuleCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n import java.util.List;\n import java.util.Set;\n \n@@ -38,7 +37,7 @@ public InventoryModuleCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \n \t\tif (inventory != null) {\n@@ -62,7 +61,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \n \t\tbyte marker = input.readByte();"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/ItemPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraft.item.Item;\n import net.minecraft.item.ItemStack;\n \n@@ -22,7 +20,7 @@ public ItemPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\tif (getStack() != null) {\n \t\t\toutput.writeInt(Item.getIdFromItem(getStack().getItem()));\n@@ -35,7 +33,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \n \t\tfinal int itemID = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/ListSyncPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n import java.util.List;\n \n import lombok.AccessLevel;\n@@ -30,13 +29,13 @@ public ListSyncPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeCollection(list, this);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tlist = input.readArrayList(this);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/ModernPacket.java",
          "status": "modified",
          "additions": 9,
          "deletions": 15,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -12,29 +10,25 @@\n \n public abstract class ModernPacket {\n \n-\t@Getter\n-\t@Setter\n-\tprivate boolean isChunkDataPacket;\n-\n-\t@Getter\n-\t@Setter\n-\tprivate boolean compressable;\n \t/*\n \t@Getter\n \tprotected String channel;\n \t */\n \t@Getter\n \tprivate final int id;\n-\n+\tprotected int leftRetries = 5;\n+\t@Getter\n+\t@Setter\n+\tprivate boolean isChunkDataPacket;\n+\t@Getter\n+\t@Setter\n+\tprivate boolean compressable;\n \t@Getter\n \tprivate byte[] data = null;\n-\n \t@Getter\n \t@Setter\n \tprivate int debugId = 0;\n \n-\tprotected int leftRetries = 5;\n-\n \tpublic ModernPacket(int id) {\n \t\t//this.channel = LogisticsPipes.LOGISTICS_PIPES_CHANNEL_NAME;\n \t\tthis.id = id;\n@@ -65,11 +59,11 @@ public void create() {\n \t\t}\n \t */\n \n-\tpublic abstract void readData(LPDataInput input) throws IOException;\n+\tpublic abstract void readData(LPDataInput input);\n \n \tpublic abstract void processPacket(EntityPlayer player);\n \n-\tpublic abstract void writeData(LPDataOutput output) throws IOException;\n+\tpublic abstract void writeData(LPDataOutput output);\n \n \tpublic abstract ModernPacket template();\n "
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/ModuleCoordinatesPacket.java",
          "status": "modified",
          "additions": 3,
          "deletions": 6,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.world.World;\n \n@@ -28,13 +26,14 @@ public abstract class ModuleCoordinatesPacket extends CoordinatesPacket {\n \t@Getter\n \t@Setter\n \tprivate int positionInt;\n+\tprivate boolean moduleBased = false;\n \n \tpublic ModuleCoordinatesPacket(int id) {\n \t\tsuper(id);\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(type != null);\n \t\tif (type != null) {\n@@ -44,7 +43,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tif (input.readBoolean()) {\n \t\t\ttype = input.readEnum(ModulePositionType.class);\n@@ -68,8 +67,6 @@ public ModuleCoordinatesPacket setPacketPos(ModuleCoordinatesPacket packet) {\n \t\treturn this;\n \t}\n \n-\tprivate boolean moduleBased = false;\n-\n \t@SuppressWarnings(\"unchecked\")\n \tpublic <T> T getLogisticsModule(EntityPlayer player, Class<T> clazz) {\n \t\tLogisticsModule module = null;"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/NBTCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraft.nbt.NBTTagCompound;\n \n import lombok.Getter;\n@@ -21,13 +19,13 @@ public NBTCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeNBTTagCompound(tag);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttag = input.readNBTTagCompound();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/NBTModuleCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraft.nbt.NBTTagCompound;\n \n import lombok.Getter;\n@@ -21,13 +19,13 @@ public NBTModuleCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeNBTTagCompound(tag);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttag = input.readNBTTagCompound();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/RequestPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -30,14 +28,14 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeItemIdentifierStack(stack);\n \t\toutput.writeInt(dimension);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tstack = input.readItemIdentifierStack();\n \t\tdimension = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/SlotPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.inventory.Slot;\n \n@@ -48,12 +46,12 @@ public SlotPacket setSlot(Slot slot) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsetInteger(input.readInt());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(getInteger());\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/StringCoordinatesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n-\n import lombok.Getter;\n import lombok.Setter;\n \n@@ -19,13 +17,13 @@ public StringCoordinatesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeUTF(getString());\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsetString(input.readUTF());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/abstractpackets/StringListPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.abstractpackets;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -21,15 +20,15 @@ public StringListPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tint size = input.readInt();\n \t\tfor (int i = 0; i < size; i++) {\n \t\t\tgetStringList().add(input.readUTF());\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(getStringList().size());\n \t\tfor (int i = 0; i < getStringList().size(); i++) {\n \t\t\toutput.writeUTF(getStringList().get(i));"
        },
        {
          "filename": "common/logisticspipes/network/guis/block/AutoCraftingGui.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.block;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.blocks.crafting.LogisticsCraftingTableTileEntity;\n@@ -68,7 +66,7 @@ public DummyContainer getContainer(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeItemIdentifier(targetType);\n \t\toutput.writeBoolean(isFuzzy);\n@@ -83,7 +81,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttargetType = input.readItemIdentifier();\n \t\tif (input.readBoolean()) {"
        },
        {
          "filename": "common/logisticspipes/network/guis/block/StatisticsGui.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.guis.block;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -58,14 +57,14 @@ public GuiProvider template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeCollection(trackingList, (output1, object) -> object.writeToLPData(output1));\n \n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttrackingList = input.readArrayList(data1 -> {\n \t\t\tTrackingTask object = new TrackingTask();"
        },
        {
          "filename": "common/logisticspipes/network/guis/item/ItemAmountSignGui.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.item;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraftforge.common.util.ForgeDirection;\n \n@@ -51,13 +49,13 @@ public DummyContainer getContainer(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeForgeDirection(dir);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tdir = input.readForgeDirection();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inhand/CraftingModuleInHand.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inhand;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -67,14 +65,14 @@ public GuiProvider template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeIntArray(amount);\n \t\toutput.writeBoolean(cleanupExclude);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tamount = input.readIntArray();\n \t\tcleanupExclude = input.readBoolean();"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/ActiveSupplierSlot.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -40,7 +38,7 @@ public ActiveSupplierSlot(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(patternUpgarde);\n \t\toutput.writeIntArray(slotArray);\n@@ -49,7 +47,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tpatternUpgarde = input.readBoolean();\n \t\tslotArray = input.readIntArray();"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/AdvancedExtractorModuleSlot.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -56,13 +54,13 @@ public GuiProvider template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(areItemsIncluded);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tareItemsIncluded = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/ApiaristAnalyzerModuleSlot.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -50,13 +48,13 @@ public GuiProvider template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(extractorMode);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\textractorMode = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/CCBasedQuickSortSlot.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -50,13 +48,13 @@ public GuiProvider template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(timeOut);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttimeOut = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/CraftingModuleSlot.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -101,7 +99,7 @@ public GuiProvider template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(isAdvancedSat);\n \t\toutput.writeInt(liquidCrafter);\n@@ -113,7 +111,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tisAdvancedSat = input.readBoolean();\n \t\tliquidCrafter = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/ExtractorModuleSlot.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraftforge.common.util.ForgeDirection;\n \n@@ -27,13 +25,13 @@ public ExtractorModuleSlot(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeForgeDirection(sneakyOrientation);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsneakyOrientation = input.readForgeDirection();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/ItemSinkSlot.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n import java.util.BitSet;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -39,7 +38,7 @@ public ItemSinkSlot(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(isDefaultRoute);\n \t\toutput.writeBoolean(hasFuzzyUpgrade);\n@@ -48,7 +47,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tisDefaultRoute = input.readBoolean();\n \t\thasFuzzyUpgrade = input.readBoolean();"
        },
        {
          "filename": "common/logisticspipes/network/guis/module/inpipe/ProviderModuleGuiProvider.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.guis.module.inpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraftforge.common.util.ForgeDirection;\n \n@@ -76,7 +74,7 @@ public GuiProvider template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(exclude);\n \t\toutput.writeInt(extractorMode);\n@@ -85,7 +83,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\texclude = input.readBoolean();\n \t\textractorMode = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/packets/ActivateNBTDebug.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.LPConstants;\n@@ -18,7 +16,7 @@ public ActivateNBTDebug(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n@@ -36,7 +34,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/BufferTransfer.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -38,12 +36,12 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tcontent = input.readByteArray();\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeByteArray(content);\n \t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/packets/CraftingPermissionPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n import java.util.EnumSet;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -25,7 +24,7 @@ public CraftingPermissionPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tenumSet = EnumSet.noneOf(CraftingDependency.class);\n \t\tfor (CraftingDependency type : CraftingDependency.values()) {\n \t\t\tif (input.readBoolean()) {\n@@ -40,7 +39,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tfor (CraftingDependency type : CraftingDependency.values()) {\n \t\t\toutput.writeBoolean(enumSet.contains(type));\n \t\t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/DummyPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.network.abstractpackets.ModernPacket;\n@@ -15,7 +13,7 @@ public DummyPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tthrow new RuntimeException(\"This packet should never be used\");\n \t}\n \n@@ -25,7 +23,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tthrow new RuntimeException(\"This packet should never be used\");\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/packets/NEISetCraftingRecipe.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.item.Item;\n import net.minecraft.item.ItemStack;\n@@ -44,7 +42,7 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \n \t\toutput.writeInt(content.length);\n@@ -64,7 +62,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \n \t\tcontent = new ItemStack[input.readInt()];"
        },
        {
          "filename": "common/logisticspipes/network/packets/PlayerConfigToClientPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -24,15 +22,15 @@ public PlayerConfigToClientPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tLogisticsPipes.getClientPlayerConfig().readData(input);\n \t}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tconfig.writeData(output);\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/packets/PlayerConfigToServerPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -25,7 +23,7 @@ public PlayerConfigToServerPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tconfig = new PlayerConfig(null);\n \t\tconfig.readData(input);\n \t}\n@@ -36,7 +34,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tconfig.writeData(output);\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/packets/PlayerListRequest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.stream.Collectors;\n@@ -35,8 +34,8 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n }"
        },
        {
          "filename": "common/logisticspipes/network/packets/RequestUpdateNamesPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n@@ -27,7 +26,7 @@ public RequestUpdateNamesPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n@@ -57,7 +56,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/UpdateName.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -43,13 +41,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tident = input.readItemIdentifierStack().getItem();\n \t\tname = input.readUTF();\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeItemIdentifierStack(ident.makeStack(0));\n \t\toutput.writeUTF(name);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/block/AddItemToTrackPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -43,13 +41,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeItemIdentifier(item);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\titem = input.readItemIdentifier();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/block/CraftingCycleRecipe.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.tileentity.TileEntity;\n \n@@ -18,14 +16,14 @@\n \n public class CraftingCycleRecipe extends CoordinatesPacket {\n \n-\tpublic CraftingCycleRecipe(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate boolean down;\n \n+\tpublic CraftingCycleRecipe(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tTileEntity table = this.getTile(player.getEntityWorld(), TileEntity.class);\n@@ -42,13 +40,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(down);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tdown = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/block/CraftingSetType.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.tileentity.TileEntity;\n \n@@ -19,14 +17,14 @@\n \n public class CraftingSetType extends CoordinatesPacket {\n \n-\tpublic CraftingSetType(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate ItemIdentifier targetType;\n \n+\tpublic CraftingSetType(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tTileEntity table = this.getTile(player.getEntityWorld(), TileEntity.class);\n@@ -45,13 +43,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeItemIdentifier(targetType);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttargetType = input.readItemIdentifier();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/block/PowerPacketLaser.java",
          "status": "modified",
          "additions": 6,
          "deletions": 13,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraftforge.common.util.ForgeDirection;\n \n@@ -16,36 +14,31 @@\n \n public class PowerPacketLaser extends CoordinatesPacket {\n \n-\tpublic PowerPacketLaser(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate ForgeDirection dir;\n-\n \t@Getter\n \t@Setter\n \tprivate int color;\n-\n \t@Getter\n \t@Setter\n \tprivate boolean reverse;\n-\n \t@Getter\n \t@Setter\n \tprivate boolean renderBall;\n-\n \t@Getter\n \t@Setter\n \tprivate float length;\n-\n \t@Getter\n \t@Setter\n \tprivate boolean remove = false;\n \n+\tpublic PowerPacketLaser(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tlength = input.readFloat();\n \t\tdir = input.readForgeDirection();\n@@ -66,7 +59,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeFloat(length);\n \t\toutput.writeForgeDirection(dir);"
        },
        {
          "filename": "common/logisticspipes/network/packets/block/PowerProviderLevel.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.blocks.powertile.LogisticsPowerProviderTileEntity;\n@@ -28,13 +26,13 @@ public PowerProviderLevel setDouble(double d) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsetDouble(input.readDouble());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeDouble(getDouble());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/block/RemoveAmoundTask.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n import java.util.Iterator;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -40,13 +39,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeItemIdentifier(item);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\titem = input.readItemIdentifier();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/block/RunningCraftingTasks.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -33,12 +32,12 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeCollection(identList, LPDataOutput::writeItemIdentifierStack);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tidentList = input.readArrayList(LPDataInput::readItemIdentifierStack);\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/packets/block/SecurityStationId.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.block;\n \n-import java.io.IOException;\n import java.util.UUID;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -38,14 +37,14 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeLong(uuid.getMostSignificantBits());\n \t\toutput.writeLong(uuid.getLeastSignificantBits());\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tuuid = new UUID(input.readLong(), input.readLong());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/chassis/ChassisGUI.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.chassis;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -26,13 +24,13 @@ public ChassisGUI(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(buttonID);\n \t\tsuper.writeData(output);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tbuttonID = input.readInt();\n \t\tsuper.readData(input);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/chassis/ChestGuiClosed.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.chassis;\n \n-import java.io.IOException;\n import java.lang.ref.WeakReference;\n import java.util.List;\n \n@@ -19,7 +18,7 @@ public ChestGuiClosed(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n@@ -38,7 +37,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/chassis/ChestGuiOpened.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.chassis;\n \n-import java.io.IOException;\n import java.lang.ref.WeakReference;\n import java.util.List;\n \n@@ -21,7 +20,7 @@ public ChestGuiOpened(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n@@ -40,7 +39,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/chassis/EnableQuickSortMarker.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.chassis;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.network.abstractpackets.ModernPacket;\n@@ -16,15 +14,15 @@ public EnableQuickSortMarker(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tQuickSortChestMarkerStorage.getInstance().enable();\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/cpipe/CPipeCleanupStatus.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.cpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.client.Minecraft;\n import net.minecraft.entity.player.EntityPlayer;\n \n@@ -45,13 +43,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(mode);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tmode = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/cpipe/CPipeSatelliteId.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.cpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -29,13 +27,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(pipeId);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tpipeId = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/debug/PipeDebugLogAskForTarget.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.debug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.util.MovingObjectPosition;\n import net.minecraft.util.MovingObjectPosition.MovingObjectType;\n@@ -20,7 +18,7 @@ public PipeDebugLogAskForTarget(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n@@ -31,7 +29,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/debug/SendNewLogLine.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.debug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -27,7 +25,7 @@ public SendNewLogLine(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\twindowID = input.readInt();\n \t\tline = input.readUTF();\n \t}\n@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(windowID);\n \t\toutput.writeUTF(line);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/debug/SendNewLogWindow.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.debug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -27,7 +25,7 @@ public SendNewLogWindow(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\twindowID = input.readInt();\n \t\ttitle = input.readUTF();\n \t}\n@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(windowID);\n \t\toutput.writeUTF(title);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/debug/UpdateStatusEntries.java",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.debug;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -31,12 +30,12 @@ public UpdateStatusEntries(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\twindowID = input.readInt();\n \t\tstatus = input.readArrayList(new IReadListObject<StatusEntry>() {\n \n \t\t\t@Override\n-\t\t\tpublic StatusEntry readObject(LPDataInput input) throws IOException {\n+\t\t\tpublic StatusEntry readObject(LPDataInput input) {\n \t\t\t\tStatusEntry status = new StatusEntry();\n \t\t\t\tstatus.name = input.readUTF();\n \t\t\t\tif (input.readBoolean()) {\n@@ -53,12 +52,12 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(windowID);\n \t\toutput.writeCollection(status, new IWriteListObject<StatusEntry>() {\n \n \t\t\t@Override\n-\t\t\tpublic void writeObject(LPDataOutput output, StatusEntry entry) throws IOException {\n+\t\t\tpublic void writeObject(LPDataOutput output, StatusEntry entry) {\n \t\t\t\toutput.writeUTF(entry.name);\n \t\t\t\toutput.writeBoolean(entry.subEntry != null);\n \t\t\t\tif (entry.subEntry != null) {"
        },
        {
          "filename": "common/logisticspipes/network/packets/debuggui/DebugAskForTarget.java",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.debuggui;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.util.MovingObjectPosition;\n import cpw.mods.fml.client.FMLClientHandler;\n@@ -19,7 +17,7 @@ public DebugAskForTarget(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n@@ -28,15 +26,15 @@ public void processPacket(EntityPlayer player) {\n \t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(DebugTargetResponse.class).setMode(DebugTargetResponse.TargetMode.None));\n \t\t} else if (box.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {\n \t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(DebugTargetResponse.class).setMode(DebugTargetResponse.TargetMode.Block)\n-\t\t\t\t\t.setAdditions(new Object[] { box.blockX, box.blockY, box.blockZ }));\n+\t\t\t\t\t.setAdditions(new int[] { box.blockX, box.blockY, box.blockZ }));\n \t\t} else if (box.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY) {\n \t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(DebugTargetResponse.class).setMode(DebugTargetResponse.TargetMode.Entity)\n-\t\t\t\t\t.setAdditions(new Object[] { box.entityHit.getEntityId() }));\n+\t\t\t\t\t.setAdditions(new int[] { box.entityHit.getEntityId() }));\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/debuggui/DebugDataPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.debuggui;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -27,7 +25,7 @@ public DebugDataPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tpayload = input.readByteArray();\n \t\tidentifier = input.readInt();\n \t}\n@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeByteArray(payload);\n \t\toutput.writeInt(identifier);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/debuggui/DebugPanelOpen.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.debuggui;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -32,13 +30,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsetName(input.readUTF());\n \t\tsetIdentification(input.readInt());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeUTF(getName());\n \t\toutput.writeInt(getIdentification());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/debuggui/DebugTargetResponse.java",
          "status": "modified",
          "additions": 19,
          "deletions": 47,
          "patch": "@@ -1,13 +1,5 @@\n package logisticspipes.network.packets.debuggui;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInput;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutput;\n-import java.io.ObjectOutputStream;\n-\n import net.minecraft.block.Block;\n import net.minecraft.entity.Entity;\n import net.minecraft.entity.player.EntityPlayer;\n@@ -29,50 +21,31 @@\n \n public class DebugTargetResponse extends ModernPacket {\n \n-\tpublic DebugTargetResponse(int id) {\n-\t\tsuper(id);\n-\t}\n-\n-\tpublic enum TargetMode {\n-\t\tBlock,\n-\t\tEntity,\n-\t\tNone\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate TargetMode mode;\n-\n \t@Getter\n \t@Setter\n-\tprivate Object[] additions = new Object[0];\n+\tprivate int[] additions = new int[0];\n+\n+\tpublic DebugTargetResponse(int id) {\n+\t\tsuper(id);\n+\t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tmode = TargetMode.values()[input.readByte()];\n-\t\tint size = input.readInt();\n-\t\tadditions = new Object[size];\n-\t\tfor (int i = 0; i < size; i++) {\n-\t\t\tbyte[] bytes = input.readByteArray();\n-\t\t\tByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n-\t\t\tObjectInput in = new ObjectInputStream(bis);\n-\t\t\ttry {\n-\t\t\t\tObject o = in.readObject();\n-\t\t\t\tadditions[i] = o;\n-\t\t\t} catch (ClassNotFoundException e) {\n-\t\t\t\tthrow new UnsupportedOperationException(e);\n-\t\t\t}\n-\t\t}\n+\t\tadditions = input.readIntArray();\n \t}\n \n \t@Override\n \tpublic void processPacket(final EntityPlayer player) {\n \t\tif (mode == TargetMode.None) {\n \t\t\tplayer.addChatComponentMessage(new ChatComponentText(ChatColor.RED + \"No Target Found\"));\n \t\t} else if (mode == TargetMode.Block) {\n-\t\t\tint x = (Integer) additions[0];\n-\t\t\tint y = (Integer) additions[1];\n-\t\t\tint z = (Integer) additions[2];\n+\t\t\tint x = additions[0];\n+\t\t\tint y = additions[1];\n+\t\t\tint z = additions[2];\n \t\t\tplayer.addChatComponentMessage(new ChatComponentText(\"Checking Block at: x:\" + x + \" y:\" + y + \" z:\" + z));\n \t\t\tBlock id = player.worldObj.getBlock(x, y, z);\n \t\t\tplayer.addChatComponentMessage(new ChatComponentText(\"Found Block with Id: \" + id.getClass()));\n@@ -94,7 +67,7 @@ public void processPacket(final EntityPlayer player) {\n \t\t\t\tMainProxy.sendPacketToPlayer(PacketHandler.getPacket(OpenChatGui.class), player);\n \t\t\t}\n \t\t} else if (mode == TargetMode.Entity) {\n-\t\t\tint entityId = (Integer) additions[0];\n+\t\t\tint entityId = additions[0];\n \t\t\tfinal Entity entity = player.worldObj.getEntityByID(entityId);\n \t\t\tif (entity == null) {\n \t\t\t\tplayer.addChatComponentMessage(new ChatComponentText(ChatColor.RED + \"No Entity found\"));\n@@ -116,16 +89,9 @@ public void processPacket(final EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeByte(mode.ordinal());\n-\t\toutput.writeInt(additions.length);\n-\t\tfor (Object addition : additions) {\n-\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n-\t\t\tObjectOutput out = null;\n-\t\t\tout = new ObjectOutputStream(bos);\n-\t\t\tout.writeObject(addition);\n-\t\t\toutput.writeByteArray(bos.toByteArray());\n-\t\t}\n+\t\toutput.writeIntArray(additions);\n \t}\n \n \t@Override\n@@ -137,4 +103,10 @@ public ModernPacket template() {\n \tpublic boolean isCompressable() {\n \t\treturn true;\n \t}\n+\n+\tpublic enum TargetMode {\n+\t\tBlock,\n+\t\tEntity,\n+\t\tNone\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/packets/gui/DummyContainerSlotClick.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.gui;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.entity.player.EntityPlayerMP;\n import net.minecraft.inventory.Slot;\n@@ -38,7 +36,7 @@ public DummyContainerSlotClick(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tslotId = input.readInt();\n \t\tstack = input.readItemIdentifierStack().makeNormalStack();\n \t\tbutton = input.readInt();\n@@ -56,7 +54,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(slotId);\n \t\toutput.writeItemIdentifierStack(ItemIdentifierStack.getFromStack(stack));\n \t\toutput.writeInt(button);"
        },
        {
          "filename": "common/logisticspipes/network/packets/gui/FuzzySlotSettingsPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.gui;\n \n-import java.io.IOException;\n import java.util.BitSet;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -28,7 +27,7 @@ public FuzzySlotSettingsPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tslotNumber = input.readInt();\n \t\tflags = input.readBitSet();\n \t}\n@@ -41,7 +40,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(slotNumber);\n \t\toutput.writeBitSet(flags);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/gui/GUIPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.gui;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -41,7 +39,7 @@ public GUIPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tguiID = input.readInt();\n \t\twindowID = input.readInt();\n \t\tguiData = input.readByteArray();\n@@ -54,7 +52,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(guiID);\n \t\toutput.writeInt(windowID);\n \t\toutput.writeByteArray(guiData);"
        },
        {
          "filename": "common/logisticspipes/network/packets/gui/GuiReopenPacket.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.gui;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -19,22 +17,22 @@ public class GuiReopenPacket extends CoordinatesPacket {\n \t@Setter\n \tprivate int guiID;\n \n+\tpublic GuiReopenPacket(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(getGuiID());\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tguiID = input.readInt();\n \t}\n \n-\tpublic GuiReopenPacket(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tplayer.openGui(LogisticsPipes.instance, getGuiID(), player.worldObj, getPosX(), getPosY(), getPosZ());"
        },
        {
          "filename": "common/logisticspipes/network/packets/gui/OpenChatGui.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.gui;\n \n-import java.io.IOException;\n-\n import net.minecraft.client.gui.GuiChat;\n import net.minecraft.entity.player.EntityPlayer;\n import cpw.mods.fml.client.FMLClientHandler;\n@@ -18,7 +16,7 @@ public OpenChatGui(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \t@ClientSideOnlyMethodContent\n@@ -27,7 +25,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/hud/HUDSettingsPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.hud;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.util.ChatComponentTranslation;\n \n@@ -99,14 +97,14 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tbuttonId = input.readInt();\n \t\tstate = input.readBoolean();\n \t\tslot = input.readInt();\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(buttonId);\n \t\toutput.writeBoolean(state);\n \t\toutput.writeInt(slot);"
        },
        {
          "filename": "common/logisticspipes/network/packets/module/ApiaristAnalyserMode.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.module;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -38,13 +36,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(mode);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tmode = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/module/BeeModuleSetBeePacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.module;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -67,7 +65,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(integer2);\n \t\toutput.writeInt(integer3);\n@@ -79,7 +77,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tinteger2 = input.readInt();\n \t\tinteger3 = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/packets/module/ItemSinkDefaultPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.module;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -24,13 +22,13 @@ public ItemSinkDefaultPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(isDefault);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tisDefault = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/module/ModuleBasedItemSinkList.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.module;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.nbt.NBTTagCompound;\n \n@@ -43,13 +41,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeNBTTagCompound(nbt);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tnbt = input.readNBTTagCompound();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/module/SupplierPipeLimitedPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.module;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import cpw.mods.fml.client.FMLClientHandler;\n \n@@ -55,13 +53,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(isLimited);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tisLimited = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/modules/CCBasedQuickSortMode.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.modules;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -38,13 +36,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(timeOut);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttimeOut = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/modules/CCBasedQuickSortSinkSize.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.modules;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -38,13 +36,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(sinkSize);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tsinkSize = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/modules/ItemSinkFuzzy.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.modules;\n \n-import java.io.IOException;\n import java.util.BitSet;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -55,7 +54,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(pos);\n \t\tif (pos != -1) {\n@@ -67,7 +66,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tpos = input.readInt();\n \t\tif (pos != -1) {"
        },
        {
          "filename": "common/logisticspipes/network/packets/modules/ProviderModuleMode.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.modules;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -38,13 +36,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(mode);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tmode = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/modules/SupplierPipeMode.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.modules;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import cpw.mods.fml.client.FMLClientHandler;\n \n@@ -49,13 +47,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\thasPatternUpgrade = input.readBoolean();\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(hasPatternUpgrade);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/multiblock/MultiBlockCoordinatesPacket.java",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.multiblock;\n \n-import java.io.IOException;\n import java.util.List;\n import java.util.Set;\n \n@@ -27,24 +26,24 @@ public class MultiBlockCoordinatesPacket extends CoordinatesPacket {\n \t@Setter\n \tprivate List<CoreMultiBlockPipe.SubBlockTypeForShare> subTypes;\n \n+\tpublic MultiBlockCoordinatesPacket(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeCollection(targetPos, LPDataOutput::writeLPPosition);\n \t\toutput.writeCollection(subTypes, LPDataOutput::writeEnum);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttargetPos = input.readSet(LPDataInput::readLPPosition);\n \t\tsubTypes = input.readArrayList(data1 -> data1.readEnum(CoreMultiBlockPipe.SubBlockTypeForShare.class));\n \t}\n \n-\tpublic MultiBlockCoordinatesPacket(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tLogisticsTileGenericSubMultiBlock block = this.getTile(player.getEntityWorld(), LogisticsTileGenericSubMultiBlock.class);"
        },
        {
          "filename": "common/logisticspipes/network/packets/orderer/ComponentList.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.orderer;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n \n@@ -60,15 +59,15 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeCollection(used, LPDataOutput::writeResource);\n \t\toutput.writeCollection(missing, LPDataOutput::writeResource);\n \t\t// ToDo: ???\n \t\toutput.writeByte(0);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tused = input.readArrayList(LPDataInput::readResource);\n \t\tmissing = input.readArrayList(LPDataInput::readResource);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/orderer/MissingItems.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.orderer;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n \n@@ -63,13 +62,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeCollection(items, LPDataOutput::writeResource);\n \t\toutput.writeBoolean(isFlag());\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\titems = input.readArrayList(LPDataInput::readResource);\n \t\tsetFlag(input.readBoolean());\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/orderer/OrdererWatchPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.orderer;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -31,14 +29,14 @@ public OrdererWatchPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeResource(stack);\n \t\toutput.writeLinkedLogisticsOrderList(orders);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tstack = input.readResource();\n \t\torders = input.readLinkedLogisticsOrderList();"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/AskForOpenTarget.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.util.MovingObjectPosition;\n import net.minecraft.util.MovingObjectPosition.MovingObjectType;\n@@ -20,7 +18,7 @@ public AskForOpenTarget(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n@@ -32,7 +30,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/CraftingPipeUpdatePacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -54,7 +52,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeIntArray(amount);\n \t\toutput.writeIntArray(liquidSatelliteIdArray);\n@@ -65,7 +63,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tamount = input.readIntArray();\n \t\tliquidSatelliteIdArray = input.readIntArray();"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/FindMostLikelyRecipeComponents.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n@@ -98,7 +97,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tcontent = input.readArrayList(input1 -> {\n \t\t\tGuiRecipeImport.Canidates can = new GuiRecipeImport.Canidates(new TreeSet<>());\n@@ -108,7 +107,7 @@ public void readData(LPDataInput input) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeCollection(content, (data, object) -> data.writeCollection(object.order,\n \t\t\t\t(IWriteListObject<ItemIdentifierStack>) LPDataOutput::writeItemIdentifierStack));"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/ItemAmountSignUpdatePacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraftforge.common.util.ForgeDirection;\n \n@@ -44,15 +42,15 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tif (input.readBoolean()) {\n \t\t\tstack = input.readItemIdentifierStack();\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\tif (stack == null) {\n \t\t\toutput.writeBoolean(false);"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/ItemBufferSyncPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.network.abstractpackets.ListSyncPacket;\n@@ -26,13 +24,12 @@ public ItemBufferSyncPacket(int id) {\n \n \t@Override\n \tpublic void writeObject(LPDataOutput output,\n-\t\t\tTriplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> object) throws IOException {\n+\t\t\tTriplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> object) {\n \t\toutput.writeItemIdentifierStack(object.getValue1());\n \t}\n \n \t@Override\n-\tpublic Triplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> readObject(LPDataInput input)\n-\t\t\tthrows IOException {\n+\tpublic Triplet<ItemIdentifierStack, Pair<Integer /* Time */, Integer /* BufferCounter */>, LPTravelingItemServer> readObject(LPDataInput input) {\n \t\treturn new Triplet<>(input.readItemIdentifierStack(), null, null);\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/MostLikelyRecipeComponentsResponse.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.client.Minecraft;\n@@ -31,7 +30,7 @@ public MostLikelyRecipeComponentsResponse(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tresponse = input.readArrayList(LPDataInput::readInt);\n \t}\n \n@@ -61,7 +60,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeCollection(response, LPDataOutput::writeInt);\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/ParticleFX.java",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n \n@@ -21,22 +20,22 @@\n \n public class ParticleFX extends CoordinatesPacket {\n \n-\tpublic ParticleFX(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \t@NonNull\n \tprivate Collection<ParticleCount> particles;\n \n+\tpublic ParticleFX(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n \tpublic ModernPacket template() {\n \t\treturn new ParticleFX(getId());\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tint nparticles = input.readInt();\n \t\tparticles = new ArrayList<>(nparticles);\n@@ -48,7 +47,7 @@ public void readData(LPDataInput input) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(particles.size());\n \t\tfor (ParticleCount pc : particles) {"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipeContentPacket.java",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.lang.ref.WeakReference;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -18,19 +17,19 @@\n \n public class PipeContentPacket extends ModernPacket {\n \n-\tpublic PipeContentPacket(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate ItemIdentifierStack item;\n \t@Getter\n \t@Setter\n \tprivate int travelId;\n \n+\tpublic PipeContentPacket(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\titem = input.readItemIdentifierStack();\n \t\ttravelId = input.readInt();\n \t}\n@@ -54,7 +53,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeItemIdentifierStack(item);\n \t\toutput.writeInt(travelId);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipeDebugAskForTarget.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.tileentity.TileEntity;\n import net.minecraft.util.ChatComponentText;\n@@ -31,7 +29,7 @@ public PipeDebugAskForTarget(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tisServer = input.readBoolean();\n \t}\n \n@@ -56,7 +54,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeBoolean(isServer);\n \t}\n "
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipeFluidUpdate.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.BitSet;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -21,18 +20,17 @@\n \n public class PipeFluidUpdate extends CoordinatesPacket {\n \n-\tpublic PipeFluidUpdate(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter(value = AccessLevel.PRIVATE)\n \t@Setter\n \tprivate FluidStack[] renderCache = new FluidStack[ForgeDirection.values().length];\n-\n \tprivate BitSet bits = new BitSet();\n \n+\tpublic PipeFluidUpdate(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tbits = input.readBitSet();\n \t\tfor (int i = 0; i < renderCache.length; i++) {\n@@ -43,7 +41,7 @@ public void readData(LPDataInput input) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\tfor (int i = 0; i < renderCache.length; i++) {\n \t\t\tbits.set(i, renderCache[i] != null);"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipeManagerContentPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.LinkedList;\n import java.util.List;\n \n@@ -49,7 +48,7 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\tfor (LogisticsOrder order : manager) {\n \t\t\toutput.writeByte(1);\n@@ -59,7 +58,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tclientOrder = new LinkedList<>();\n \t\twhile (input.readByte() == 1) {"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipeManagerWatchingPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -44,13 +42,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeBoolean(start);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tstart = input.readBoolean();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipePositionPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraftforge.common.util.ForgeDirection;\n \n@@ -49,7 +47,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(travelId);\n \t\toutput.writeFloat(speed);\n@@ -60,7 +58,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttravelId = input.readInt();\n \t\tspeed = input.readFloat();"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipeSignTypes.java",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -17,14 +16,14 @@\n \n public class PipeSignTypes extends CoordinatesPacket {\n \n-\tpublic PipeSignTypes(int id) {\n-\t\tsuper(id);\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate List<Integer> types;\n \n+\tpublic PipeSignTypes(int id) {\n+\t\tsuper(id);\n+\t}\n+\n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tLogisticsTileGenericPipe pipe = this.getPipe(player.getEntityWorld(), LTGPCompletionCheck.PIPE);\n@@ -35,13 +34,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeCollection(types, LPDataOutput::writeInt);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttypes = input.readArrayList(LPDataInput::readInt);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/PipeTileStatePacket.java",
          "status": "modified",
          "additions": 7,
          "deletions": 13,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -51,15 +49,11 @@ public void processPacket(EntityPlayer player) {\n \t\tif (pipe == null) {\n \t\t\treturn;\n \t\t}\n-\t\ttry {\n-\t\t\tLPDataIOWrapper.provideData(bytesRenderState, pipe.renderState::readData);\n-\t\t\tLPDataIOWrapper.provideData(bytesCoreState, pipe.coreState::readData);\n-\t\t\tLPDataIOWrapper.provideData(bytesBCPluggableState, pipe.bcPlugableState::readData);\n-\t\t\tpipe.afterStateUpdated();\n-\t\t\tLPDataIOWrapper.provideData(bytesPipe, pipe.pipe::readData);\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n+\t\tLPDataIOWrapper.provideData(bytesRenderState, pipe.renderState::readData);\n+\t\tLPDataIOWrapper.provideData(bytesCoreState, pipe.coreState::readData);\n+\t\tLPDataIOWrapper.provideData(bytesBCPluggableState, pipe.bcPlugableState::readData);\n+\t\tpipe.afterStateUpdated();\n+\t\tLPDataIOWrapper.provideData(bytesPipe, pipe.pipe::readData);\n \t}\n \n \t@Override\n@@ -68,7 +62,7 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \n \t\tIClientState[] clientStates = new IClientState[] { renderState, coreState, bcPluggableState, pipe };\n@@ -80,7 +74,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \n \t\tbytesRenderState = input.readByteArray();"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/RoutingLaserPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -26,7 +25,7 @@ public RoutingLaserPacket(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\twhile (input.readBoolean()) {\n \t\t\tlasers.add(new LaserData().readData(input));\n \t\t}\n@@ -38,7 +37,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tfor (LaserData laser : lasers) {\n \t\t\toutput.writeBoolean(true);\n \t\t\tlaser.writeData(output);"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/SlotFinderActivatePacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -38,7 +36,7 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(tagetPosX);\n \t\toutput.writeInt(tagetPosY);\n@@ -47,7 +45,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\ttagetPosX = input.readInt();\n \t\ttagetPosY = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/SlotFinderNumberPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -127,7 +126,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(inventorySlot);\n \t\toutput.writeInt(slot);\n@@ -137,7 +136,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tinventorySlot = input.readInt();\n \t\tslot = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/SlotFinderOpenGuiPacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.Iterator;\n \n import net.minecraft.block.Block;\n@@ -122,13 +121,13 @@ public ModernPacket template() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(slot);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tslot = input.readInt();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/pipe/StatUpdate.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.pipe;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -75,7 +74,7 @@ private void initData() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tinitData();\n \t\tsuper.writeData(output);\n \t\toutput.writeInt(stat_session_sent);\n@@ -88,7 +87,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tstat_session_sent = input.readInt();\n \t\tstat_session_recieved = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateAskForTarget.java",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.util.MovingObjectPosition;\n import net.minecraft.util.MovingObjectPosition.MovingObjectType;\n@@ -22,7 +20,7 @@ public RoutingUpdateAskForTarget(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \t@ClientSideOnlyMethodContent\n@@ -32,15 +30,15 @@ public void processPacket(EntityPlayer player) {\n \t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(RoutingUpdateTargetResponse.class).setMode(TargetMode.None));\n \t\t} else if (box.typeOfHit == MovingObjectType.BLOCK) {\n \t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(RoutingUpdateTargetResponse.class).setMode(TargetMode.Block)\n-\t\t\t\t\t.setAdditions(new Object[] { box.blockX, box.blockY, box.blockZ }));\n+\t\t\t\t\t.setAdditions(new int[] { box.blockX, box.blockY, box.blockZ }));\n \t\t} else if (box.typeOfHit == MovingObjectType.ENTITY) {\n \t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(RoutingUpdateTargetResponse.class).setMode(TargetMode.Entity)\n-\t\t\t\t\t.setAdditions(new Object[] { box.entityHit.getEntityId() }));\n+\t\t\t\t\t.setAdditions(new int[] { box.entityHit.getEntityId() }));\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateCanidatePipe.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -40,12 +38,12 @@ public boolean isCompressable() {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\texitRoute = input.readExitRoute(MainProxy.getClientMainWorld());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeExitRoute(exitRoute);\n \t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateClearClient.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.network.abstractpackets.ModernPacket;\n@@ -16,15 +14,15 @@ public RoutingUpdateClearClient(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tClientViewController.instance().clear();\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugCanidateList.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -25,7 +23,7 @@ public RoutingUpdateDebugCanidateList(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tmsg = new ExitRoute[input.readInt()];\n \t\tfor (int i = 0; i < msg.length; i++) {\n \t\t\tmsg[i] = input.readExitRoute(MainProxy.getClientMainWorld());\n@@ -38,7 +36,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(msg.length);\n \t\tfor (ExitRoute element : msg) {\n \t\t\toutput.writeExitRoute(element);"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugClosedSet.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n import java.util.EnumSet;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -30,7 +29,7 @@ public RoutingUpdateDebugClosedSet(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tset = input.readEnumSet(PipeRoutingConnectionType.class);\n \t\tpos = input.readLPPosition();\n \t}\n@@ -41,7 +40,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeEnumSet(set, PipeRoutingConnectionType.class);\n \t\toutput.writeLPPosition(pos);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateDebugFilters.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.EnumMap;\n import java.util.List;\n@@ -35,7 +34,7 @@ public RoutingUpdateDebugFilters(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tpos = input.readLPPosition();\n \t\tfilterPositions = new EnumMap<>(PipeRoutingConnectionType.class);\n \t\tshort id;\n@@ -60,7 +59,7 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeLPPosition(pos);\n \t\tfor (PipeRoutingConnectionType type : filters.keySet()) {\n \t\t\toutput.writeShort(type.ordinal());"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateDoneDebug.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.network.abstractpackets.ModernPacket;\n@@ -16,15 +14,15 @@ public RoutingUpdateDoneDebug(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tClientViewController.instance().done(this);\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateInitDebug.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import logisticspipes.network.abstractpackets.ModernPacket;\n@@ -16,15 +14,15 @@ public RoutingUpdateInitDebug(int id) {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic void processPacket(EntityPlayer player) {\n \t\tClientViewController.instance().init(this);\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n \tpublic ModernPacket template() {"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateSourcePipe.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -40,12 +38,12 @@ public boolean isCompressable() {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\texitRoute = input.readExitRoute(MainProxy.getClientMainWorld());\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeExitRoute(exitRoute);\n \t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/packets/routingdebug/RoutingUpdateTargetResponse.java",
          "status": "modified",
          "additions": 18,
          "deletions": 45,
          "patch": "@@ -1,13 +1,5 @@\n package logisticspipes.network.packets.routingdebug;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInput;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutput;\n-import java.io.ObjectOutputStream;\n-\n import net.minecraft.block.Block;\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.tileentity.TileEntity;\n@@ -31,50 +23,31 @@\n \n public class RoutingUpdateTargetResponse extends ModernPacket {\n \n-\tpublic RoutingUpdateTargetResponse(int id) {\n-\t\tsuper(id);\n-\t}\n-\n-\tpublic enum TargetMode {\n-\t\tBlock,\n-\t\tEntity,\n-\t\tNone\n-\t}\n-\n \t@Getter\n \t@Setter\n \tprivate TargetMode mode;\n-\n \t@Getter\n \t@Setter\n-\tprivate Object[] additions = new Object[0];\n+\tprivate int[] additions = new int[0];\n+\n+\tpublic RoutingUpdateTargetResponse(int id) {\n+\t\tsuper(id);\n+\t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tmode = TargetMode.values()[input.readByte()];\n-\t\tint size = input.readInt();\n-\t\tadditions = new Object[size];\n-\t\tfor (int i = 0; i < size; i++) {\n-\t\t\tbyte[] bytes = input.readByteArray();\n-\t\t\tByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n-\t\t\tObjectInput in = new ObjectInputStream(bis);\n-\t\t\ttry {\n-\t\t\t\tObject o = in.readObject();\n-\t\t\t\tadditions[i] = o;\n-\t\t\t} catch (ClassNotFoundException e) {\n-\t\t\t\tthrow new UnsupportedOperationException(e);\n-\t\t\t}\n-\t\t}\n+\t\tadditions = input.readIntArray();\n \t}\n \n \t@Override\n \tpublic void processPacket(final EntityPlayer player) {\n \t\tif (mode == TargetMode.None) {\n \t\t\tplayer.addChatMessage(new ChatComponentText(ChatColor.RED + \"No Target Found\"));\n \t\t} else if (mode == TargetMode.Block) {\n-\t\t\tint x = (Integer) additions[0];\n-\t\t\tint y = (Integer) additions[1];\n-\t\t\tint z = (Integer) additions[2];\n+\t\t\tint x = additions[0];\n+\t\t\tint y = additions[1];\n+\t\t\tint z = additions[2];\n \t\t\tplayer.addChatMessage(new ChatComponentText(\"Checking Block at: x:\" + x + \" y:\" + y + \" z:\" + z));\n \t\t\tBlock id = player.worldObj.getBlock(x, y, z);\n \t\t\tplayer.addChatMessage(new ChatComponentText(\"Found Block with Id: \" + Block.getIdFromBlock(id)));\n@@ -103,15 +76,9 @@ public void processPacket(final EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeByte(mode.ordinal());\n-\t\toutput.writeInt(additions.length);\n-\t\tfor (Object addition : additions) {\n-\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n-\t\t\tObjectOutput out = new ObjectOutputStream(bos);\n-\t\t\tout.writeObject(addition);\n-\t\t\toutput.writeByteArray(bos.toByteArray());\n-\t\t}\n+\t\toutput.writeIntArray(additions);\n \t}\n \n \t@Override\n@@ -123,4 +90,10 @@ public ModernPacket template() {\n \tpublic boolean isCompressable() {\n \t\treturn true;\n \t}\n+\n+\tpublic enum TargetMode {\n+\t\tBlock,\n+\t\tEntity,\n+\t\tNone\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/network/packets/satpipe/SatPipeSetID.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.satpipe;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n \n import lombok.Getter;\n@@ -17,6 +15,10 @@\n \n public class SatPipeSetID extends CoordinatesPacket {\n \n+\t@Getter\n+\t@Setter\n+\tprivate int satID;\n+\n \tpublic SatPipeSetID(int id) {\n \t\tsuper(id);\n \t}\n@@ -26,18 +28,14 @@ public ModernPacket template() {\n \t\treturn new SatPipeSetID(getId());\n \t}\n \n-\t@Getter\n-\t@Setter\n-\tprivate int satID;\n-\n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(satID);\n \t\tsuper.writeData(output);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsatID = input.readInt();\n \t\tsuper.readData(input);\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/upgrade/SneakyUpgradeSidePacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.upgrade;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.item.ItemStack;\n import net.minecraft.nbt.NBTTagCompound;\n@@ -39,13 +37,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeForgeDirection(side);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tside = input.readForgeDirection();\n \t}"
        },
        {
          "filename": "common/logisticspipes/network/packets/upgrade/ToogleDisconnectionUpgradeSidePacket.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.network.packets.upgrade;\n \n-import java.io.IOException;\n-\n import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.item.ItemStack;\n import net.minecraft.nbt.NBTTagCompound;\n@@ -46,13 +44,13 @@ public void processPacket(EntityPlayer player) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tsuper.writeData(output);\n \t\toutput.writeForgeDirection(side);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tsuper.readData(input);\n \t\tside = input.readForgeDirection();\n \t}"
        },
        {
          "filename": "common/logisticspipes/pipes/basic/CoreRoutedPipe.java",
          "status": "modified",
          "additions": 40,
          "deletions": 60,
          "patch": "@@ -7,7 +7,6 @@\n \n package logisticspipes.pipes.basic;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.BitSet;\n@@ -132,71 +131,49 @@\n public abstract class CoreRoutedPipe extends CoreUnroutedPipe\n \t\timplements IClientState, IRequestItems, ITrackStatistics, IWorldProvider, IWatchingHandler, IPipeServiceProvider, IQueueCCEvent, ILPPositionProvider {\n \n-\tpublic enum ItemSendMode {\n-\t\tNormal,\n-\t\tFast\n-\t}\n-\n-\tprotected boolean stillNeedReplace = true;\n-\tprivate boolean recheckConnections = false;\n-\n-\tprotected IRouter router;\n-\tprotected String routerId;\n-\tprotected Object routerIdLock = new Object();\n \tprivate static int pipecount = 0;\n-\tprotected int _delayOffset = 0;\n-\n+\tpublic final PlayerCollectionList watchers = new PlayerCollectionList();\n+\tprotected final PriorityBlockingQueue<ItemRoutingInformation> _inTransitToMe = new PriorityBlockingQueue<>(10,\n+\t\t\tnew ItemRoutingInformation.DelayComparator());\n+\tprotected final LinkedList<Triplet<IRoutedItem, ForgeDirection, ItemSendMode>> _sendQueue = new LinkedList<>();\n+\tprotected final Map<ItemIdentifier, Queue<Pair<Integer, ItemRoutingInformation>>> queuedDataForUnroutedItems = Collections.synchronizedMap(new TreeMap<>());\n \tpublic boolean _textureBufferPowered;\n-\n-\tprotected boolean _initialInit = true;\n-\n-\tprivate boolean enabled = true;\n-\tprivate boolean preventRemove = false;\n-\tprivate boolean destroyByPlayer = false;\n-\tprivate PowerSupplierHandler powerHandler = new PowerSupplierHandler(this);\n-\n \tpublic long delayTo = 0;\n \tpublic int repeatFor = 0;\n-\n-\tprotected RouteLayer _routeLayer;\n-\tprotected TransportLayer _transportLayer;\n-\tprotected final PriorityBlockingQueue<ItemRoutingInformation> _inTransitToMe = new PriorityBlockingQueue<>(10,\n-\t\t\tnew ItemRoutingInformation.DelayComparator());\n-\n-\tprotected UpgradeManager upgradeManager = new UpgradeManager(this);\n-\tprotected LogisticsItemOrderManager _orderItemManager = null;\n-\n-\t@Getter\n-\tprivate List<IOrderInfoProvider> clientSideOrderManager = new ArrayList<>();\n-\n \tpublic int stat_session_sent;\n \tpublic int stat_session_recieved;\n \tpublic int stat_session_relayed;\n-\n \tpublic long stat_lifetime_sent;\n \tpublic long stat_lifetime_recieved;\n \tpublic long stat_lifetime_relayed;\n-\n \tpublic int server_routing_table_size = 0;\n-\n-\tprotected final LinkedList<Triplet<IRoutedItem, ForgeDirection, ItemSendMode>> _sendQueue = new LinkedList<>();\n-\n-\tprotected final Map<ItemIdentifier, Queue<Pair<Integer, ItemRoutingInformation>>> queuedDataForUnroutedItems = Collections.synchronizedMap(new TreeMap<>());\n-\n-\tpublic final PlayerCollectionList watchers = new PlayerCollectionList();\n-\n+\tpublic boolean globalIgnoreConnectionDisconnection = false;\n+\tprotected boolean stillNeedReplace = true;\n+\tprotected IRouter router;\n+\tprotected String routerId;\n+\tprotected Object routerIdLock = new Object();\n+\tprotected int _delayOffset = 0;\n+\tprotected boolean _initialInit = true;\n+\tprotected RouteLayer _routeLayer;\n+\tprotected TransportLayer _transportLayer;\n+\tprotected UpgradeManager upgradeManager = new UpgradeManager(this);\n+\tprotected LogisticsItemOrderManager _orderItemManager = null;\n \tprotected List<IInventory> _cachedAdjacentInventories;\n-\n \tprotected ForgeDirection pointedDirection = ForgeDirection.UNKNOWN;\n \t//public BaseRoutingLogic logic;\n \t// from BaseRoutingLogic\n \tprotected int throttleTime = 20;\n+\tprotected IPipeSign[] signItem = new IPipeSign[6];\n+\tprivate boolean recheckConnections = false;\n+\tprivate boolean enabled = true;\n+\tprivate boolean preventRemove = false;\n+\tprivate boolean destroyByPlayer = false;\n+\tprivate PowerSupplierHandler powerHandler = new PowerSupplierHandler(this);\n+\t@Getter\n+\tprivate List<IOrderInfoProvider> clientSideOrderManager = new ArrayList<>();\n \tprivate int throttleTimeLeft = 20 + new Random().nextInt(Configs.LOGISTICS_DETECTION_FREQUENCY);\n-\n \tprivate int[] queuedParticles = new int[Particles.values().length];\n \tprivate boolean hasQueuedParticles = false;\n-\n-\tprotected IPipeSign[] signItem = new IPipeSign[6];\n \tprivate boolean isOpaqueClientSide = false;\n \n \tprivate CacheHolder cacheHolder;\n@@ -1030,8 +1007,6 @@ public final boolean canPipeConnect(TileEntity tile, ForgeDirection dir) {\n \t\treturn canPipeConnect(tile, dir, false);\n \t}\n \n-\tpublic boolean globalIgnoreConnectionDisconnection = false;\n-\n \t@Override\n \tpublic final boolean canPipeConnect(TileEntity tile, ForgeDirection dir, boolean ignoreSystemDisconnection) {\n \t\tForgeDirection side = OrientationsUtil.getOrientationOfTilewithTile(container, tile);\n@@ -1072,8 +1047,6 @@ public void insetSecurityID(UUID id) {\n \t\tgetOriginalUpgradeManager().insetSecurityID(id);\n \t}\n \n-\t/* Power System */\n-\n \tpublic List<Pair<ILogisticsPowerProvider, List<IFilter>>> getRoutedPowerProviders() {\n \t\tif (MainProxy.isClient(getWorld())) {\n \t\t\treturn null;\n@@ -1084,6 +1057,8 @@ public List<Pair<ILogisticsPowerProvider, List<IFilter>>> getRoutedPowerProvider\n \t\treturn getRouter().getPowerProvider();\n \t}\n \n+\t/* Power System */\n+\n \t@Override\n \tpublic boolean useEnergy(int amount) {\n \t\treturn useEnergy(amount, null, true);\n@@ -1378,21 +1353,21 @@ public String getRouterUUID(Double id) {\n \t\treturn router.getId().toString();\n \t}\n \n-\t@CCCommand(description = \"Sets the TurtleConnect flag for this Turtle on this LogisticsPipe\")\n+\t@CCCommand(description = \"Returns the TurtleConnect flag for this Turtle on this LogisticsPipe\")\n \t@CCDirectCall\n-\tpublic void setTurtleConnect(Boolean flag) {\n+\tpublic boolean getTurtleConnect() {\n \t\tif (container instanceof LogisticsTileGenericPipe) {\n-\t\t\tcontainer.setTurtleConnect(flag);\n+\t\t\treturn container.getTurtleConnect();\n \t\t}\n+\t\treturn false;\n \t}\n \n-\t@CCCommand(description = \"Returns the TurtleConnect flag for this Turtle on this LogisticsPipe\")\n+\t@CCCommand(description = \"Sets the TurtleConnect flag for this Turtle on this LogisticsPipe\")\n \t@CCDirectCall\n-\tpublic boolean getTurtleConnect() {\n+\tpublic void setTurtleConnect(Boolean flag) {\n \t\tif (container instanceof LogisticsTileGenericPipe) {\n-\t\t\treturn container.getTurtleConnect();\n+\t\t\tcontainer.setTurtleConnect(flag);\n \t\t}\n-\t\treturn false;\n \t}\n \n \t@CCCommand(description = \"Returns true if the computer is allowed to interact with the connected pipe.\", needPermission = false)\n@@ -1743,12 +1718,12 @@ public IPipeSign getPipeSign(ForgeDirection dir) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeBoolean(isOpaque());\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tisOpaqueClientSide = input.readBoolean();\n \t}\n \n@@ -1841,4 +1816,9 @@ public CacheHolder getCacheHolder() {\n \tpublic IHighlightPlacementRenderer getHighlightRenderer() {\n \t\treturn LogisticsRenderPipe.secondRenderer;\n \t}\n+\n+\tpublic enum ItemSendMode {\n+\t\tNormal,\n+\t\tFast\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/pipes/basic/LogisticsTileGenericPipe.java",
          "status": "modified",
          "additions": 46,
          "deletions": 61,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.pipes.basic;\n \n-import java.io.IOException;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -94,33 +93,38 @@ public class LogisticsTileGenericPipe extends TileEntity\n \t\timplements IOCTile, ILPPipeTile, IPipeInformationProvider, IItemDuct, ManagedPeripheral, Environment, SidedEnvironment, IFluidHandler, IPipeTile,\n \t\tILogicControllerTile, IPipeConnection {\n \n+\tpublic final PipeRenderState renderState;\n+\tpublic final CoreState coreState = new CoreState();\n+\tpublic final IBCTilePart tilePart;\n+\tpublic final IBCPluggableState bcPlugableState;\n+\tpublic final ITDPart tdPart;\n \tpublic Object OPENPERIPHERAL_IGNORE; //Tell OpenPeripheral to ignore this class\n-\n \tpublic Set<DoubleCoordinates> subMultiBlock = new HashSet<>();\n-\n \tpublic boolean[] turtleConnect = new boolean[7];\n-\n-\tprivate LogisticsTileRenderController renderController;\n-\n \t@ModDependentField(modId = LPConstants.computerCraftModID)\n \tpublic HashMap<IComputerAccess, ForgeDirection> connections;\n-\n \t@ModDependentField(modId = LPConstants.computerCraftModID)\n \tpublic IComputerAccess currentPC;\n-\n \t@ModDependentField(modId = LPConstants.openComputersModID)\n \tpublic Node node;\n+\tpublic LogicController logicController = new LogicController();\n+\tpublic boolean[] pipeConnectionsBuffer = new boolean[6];\n+\tpublic boolean[] pipeBCConnectionsBuffer = new boolean[6];\n+\tpublic boolean[] pipeTDConnectionsBuffer = new boolean[6];\n+\tpublic CoreUnroutedPipe pipe;\n+\tprivate LogisticsTileRenderController renderController;\n \tprivate boolean addedToNetwork = false;\n-\n \tprivate boolean sendInitPacket = true;\n-\n-\tpublic LogicController logicController = new LogicController();\n-\n-\tpublic final PipeRenderState renderState;\n-\tpublic final CoreState coreState = new CoreState();\n-\tpublic final IBCTilePart tilePart;\n-\tpublic final IBCPluggableState bcPlugableState;\n-\tpublic final ITDPart tdPart;\n+\t@Getter\n+\tprivate boolean initialized = false;\n+\tprivate boolean deletePipe = false;\n+\tprivate TileBuffer[] tileBuffer;\n+\tprivate boolean sendClientUpdate = false;\n+\tprivate boolean blockNeighborChange = false;\n+\tprivate boolean refreshRenderState = false;\n+\tprivate boolean pipeBound = false;\n+\t@SideOnly(Side.CLIENT)\n+\tprivate AxisAlignedBB renderBox;\n \n \tpublic LogisticsTileGenericPipe() {\n \t\tif (SimpleServiceLocator.ccProxy.isCC()) {\n@@ -314,6 +318,8 @@ public void scheduleNeighborChange() {\n \t\t}\n \t}\n \n+\t/* IPipeInformationProvider */\n+\n \t@Override\n \tpublic void writeToNBT(NBTTagCompound nbt) {\n \t\tsuper.writeToNBT(nbt);\n@@ -439,14 +445,14 @@ public void handleMesssage(int computerId, Object message, int sourceId) {\n \t\tSimpleServiceLocator.ccProxy.handleMesssage(computerId, message, this, sourceId);\n \t}\n \n-\tpublic void setTurtleConnect(boolean flag) {\n-\t\tSimpleServiceLocator.ccProxy.setTurtleConnect(flag, this);\n-\t}\n-\n \tpublic boolean getTurtleConnect() {\n \t\treturn SimpleServiceLocator.ccProxy.getTurtleConnect(this);\n \t}\n \n+\tpublic void setTurtleConnect(boolean flag) {\n+\t\tSimpleServiceLocator.ccProxy.setTurtleConnect(flag, this);\n+\t}\n+\n \tpublic int getLastCCID() {\n \t\treturn SimpleServiceLocator.ccProxy.getLastCCID(this);\n \t}\n@@ -478,8 +484,6 @@ public LogisticsTileRenderController getRenderController() {\n \t\treturn renderController;\n \t}\n \n-\t/* IPipeInformationProvider */\n-\n \t@Override\n \tpublic boolean isCorrect(ConnectionPipeType type) {\n \t\treturn true;\n@@ -632,6 +636,8 @@ public Node node() {\n \t@Override\n \t@ModDependentMethod(modId = LPConstants.openComputersModID)\n \tpublic void onConnect(Node node1) {}\n+\t//public int redstoneInput = 0;\n+\t//public int[] redstoneInputSide = new int[ForgeDirection.VALID_DIRECTIONS.length];\n \n \t@Override\n \t@ModDependentMethod(modId = LPConstants.openComputersModID)\n@@ -677,41 +683,6 @@ public Object getOCNode() {\n \t\treturn node();\n \t}\n \n-\t@Getter\n-\tprivate boolean initialized = false;\n-\n-\tpublic boolean[] pipeConnectionsBuffer = new boolean[6];\n-\tpublic boolean[] pipeBCConnectionsBuffer = new boolean[6];\n-\tpublic boolean[] pipeTDConnectionsBuffer = new boolean[6];\n-\n-\tpublic CoreUnroutedPipe pipe;\n-\t//public int redstoneInput = 0;\n-\t//public int[] redstoneInputSide = new int[ForgeDirection.VALID_DIRECTIONS.length];\n-\n-\tprivate boolean deletePipe = false;\n-\tprivate TileBuffer[] tileBuffer;\n-\tprivate boolean sendClientUpdate = false;\n-\tprivate boolean blockNeighborChange = false;\n-\tprivate boolean refreshRenderState = false;\n-\tprivate boolean pipeBound = false;\n-\n-\tpublic class CoreState implements IClientState {\n-\n-\t\tpublic int pipeId = -1;\n-\n-\t\t@Override\n-\t\tpublic void writeData(LPDataOutput output) throws IOException {\n-\t\t\toutput.writeInt(pipeId);\n-\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void readData(LPDataInput input) throws IOException {\n-\t\t\tpipeId = input.readInt();\n-\n-\t\t}\n-\t}\n-\n \tpublic void initialize(CoreUnroutedPipe pipe) {\n \t\tblockType = getBlockType();\n \n@@ -1091,9 +1062,6 @@ public void setWorldObj(World world) {\n \t\ttdPart.setWorldObj_LP(world);\n \t}\n \n-\t@SideOnly(Side.CLIENT)\n-\tprivate AxisAlignedBB renderBox;\n-\n \t@SideOnly(Side.CLIENT)\n \t@Override\n \tpublic AxisAlignedBB getRenderBoundingBox() {\n@@ -1155,4 +1123,21 @@ public boolean isMultiBlock() {\n \tpublic Stream<TileEntity> getPartsOfPipe() {\n \t\treturn this.subMultiBlock.stream().map(pos -> pos.getTileEntity(worldObj));\n \t}\n+\n+\tpublic class CoreState implements IClientState {\n+\n+\t\tpublic int pipeId = -1;\n+\n+\t\t@Override\n+\t\tpublic void writeData(LPDataOutput output) {\n+\t\t\toutput.writeInt(pipeId);\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void readData(LPDataInput input) {\n+\t\t\tpipeId = input.readInt();\n+\n+\t\t}\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/pipes/tubes/HSTubeCurve.java",
          "status": "modified",
          "additions": 61,
          "deletions": 62,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.pipes.tubes;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -34,65 +33,6 @@\n \n public class HSTubeCurve extends CoreMultiBlockPipe {\n \n-\t@AllArgsConstructor\n-\tpublic enum CurveOrientation implements ITubeOrientation {\n-\t\t//@formatter:off\n-\t\t// Name: Placement from  _ TurnDirection\n-\t\tNORTH_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(2, 0, 2), ForgeDirection.NORTH, ForgeDirection.EAST),\n-\t\tNORTH_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),\n-\t\tWEST_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(2, 0, -2), ForgeDirection.WEST, ForgeDirection.NORTH),\n-\t\tWEST_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST, ForgeDirection.SOUTH),\n-\t\tSOUTH_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(-2, 0, -2), ForgeDirection.SOUTH, ForgeDirection.WEST),\n-\t\tSOUTH_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH, ForgeDirection.EAST),\n-\t\tEAST_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(-2, 0, 2), ForgeDirection.EAST, ForgeDirection.SOUTH),\n-\t\tEAST_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH);\n-\t\t//@formatter:on\n-\t\t@Getter\n-\t\tTurnDirection renderOrientation;\n-\t\t@Getter\n-\t\tDoubleCoordinates offset;\n-\t\t@Getter\n-\t\tForgeDirection from;\n-\t\t@Getter\n-\t\tForgeDirection looking;\n-\n-\t\t@Override\n-\t\tpublic void rotatePositions(IPositionRotateble set) {\n-\t\t\trenderOrientation.rotatePositions(set);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n-\t\t\t((HSTubeCurve) pipe).orientation = this;\n-\t\t}\n-\t}\n-\n-\t@AllArgsConstructor\n-\tpublic enum TurnDirection implements ITubeRenderOrientation {\n-\t\t//@formatter:off\n-\t\tNORTH_EAST(ForgeDirection.NORTH, ForgeDirection.EAST),\n-\t\tEAST_SOUTH(ForgeDirection.EAST, ForgeDirection.SOUTH),\n-\t\tSOUTH_WEST(ForgeDirection.SOUTH, ForgeDirection.WEST),\n-\t\tWEST_NORTH(ForgeDirection.WEST, ForgeDirection.NORTH);\n-\t\t//@formatter:on\n-\t\t@Getter\n-\t\tForgeDirection dir1;\n-\t\tForgeDirection dir2;\n-\n-\t\tpublic void rotatePositions(IPositionRotateble set) {\n-\t\t\tif (this == WEST_NORTH) {\n-\t\t\t\treturn;\n-\t\t\t} else if (this == NORTH_EAST) {\n-\t\t\t\tset.rotateRight();\n-\t\t\t} else if (this == EAST_SOUTH) {\n-\t\t\t\tset.rotateLeft();\n-\t\t\t\tset.rotateLeft();\n-\t\t\t} else if (this == SOUTH_WEST) {\n-\t\t\t\tset.rotateLeft();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@Getter\n \tprivate CurveOrientation orientation;\n \n@@ -101,7 +41,7 @@ public HSTubeCurve(Item item) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tif (orientation == null) {\n \t\t\toutput.writeBoolean(false);\n \t\t} else {\n@@ -111,7 +51,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tif (input.readBoolean()) {\n \t\t\torientation = input.readEnum(CurveOrientation.class);\n \t\t}\n@@ -399,4 +339,63 @@ public double getBoxRenderScale(float fPos, LPTravelingItem travelItem) {\n \tpublic boolean isHSTube() {\n \t\treturn true;\n \t}\n+\n+\t@AllArgsConstructor\n+\tpublic enum CurveOrientation implements ITubeOrientation {\n+\t\t//@formatter:off\n+\t\t// Name: Placement from  _ TurnDirection\n+\t\tNORTH_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(2, 0, 2), ForgeDirection.NORTH, ForgeDirection.EAST),\n+\t\tNORTH_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),\n+\t\tWEST_WEST_NORTH(TurnDirection.WEST_NORTH, new DoubleCoordinates(2, 0, -2), ForgeDirection.WEST, ForgeDirection.NORTH),\n+\t\tWEST_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST, ForgeDirection.SOUTH),\n+\t\tSOUTH_SOUTH_WEST(TurnDirection.SOUTH_WEST, new DoubleCoordinates(-2, 0, -2), ForgeDirection.SOUTH, ForgeDirection.WEST),\n+\t\tSOUTH_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH, ForgeDirection.EAST),\n+\t\tEAST_EAST_SOUTH(TurnDirection.EAST_SOUTH, new DoubleCoordinates(-2, 0, 2), ForgeDirection.EAST, ForgeDirection.SOUTH),\n+\t\tEAST_NORTH_EAST(TurnDirection.NORTH_EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH);\n+\t\t//@formatter:on\n+\t\t@Getter\n+\t\tTurnDirection renderOrientation;\n+\t\t@Getter\n+\t\tDoubleCoordinates offset;\n+\t\t@Getter\n+\t\tForgeDirection from;\n+\t\t@Getter\n+\t\tForgeDirection looking;\n+\n+\t\t@Override\n+\t\tpublic void rotatePositions(IPositionRotateble set) {\n+\t\t\trenderOrientation.rotatePositions(set);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n+\t\t\t((HSTubeCurve) pipe).orientation = this;\n+\t\t}\n+\t}\n+\n+\t@AllArgsConstructor\n+\tpublic enum TurnDirection implements ITubeRenderOrientation {\n+\t\t//@formatter:off\n+\t\tNORTH_EAST(ForgeDirection.NORTH, ForgeDirection.EAST),\n+\t\tEAST_SOUTH(ForgeDirection.EAST, ForgeDirection.SOUTH),\n+\t\tSOUTH_WEST(ForgeDirection.SOUTH, ForgeDirection.WEST),\n+\t\tWEST_NORTH(ForgeDirection.WEST, ForgeDirection.NORTH);\n+\t\t//@formatter:on\n+\t\t@Getter\n+\t\tForgeDirection dir1;\n+\t\tForgeDirection dir2;\n+\n+\t\tpublic void rotatePositions(IPositionRotateble set) {\n+\t\t\tif (this == WEST_NORTH) {\n+\t\t\t\treturn;\n+\t\t\t} else if (this == NORTH_EAST) {\n+\t\t\t\tset.rotateRight();\n+\t\t\t} else if (this == EAST_SOUTH) {\n+\t\t\t\tset.rotateLeft();\n+\t\t\t\tset.rotateLeft();\n+\t\t\t} else if (this == SOUTH_WEST) {\n+\t\t\t\tset.rotateLeft();\n+\t\t\t}\n+\t\t}\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/pipes/tubes/HSTubeGain.java",
          "status": "modified",
          "additions": 57,
          "deletions": 59,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.pipes.tubes;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n@@ -32,72 +31,16 @@\n \n public class HSTubeGain extends CoreMultiBlockPipe {\n \n-\tpublic enum TubeGainOrientation implements ITubeOrientation {\n-\t\tNORTH(TubeGainRenderOrientation.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),\n-\t\tSOUTH(TubeGainRenderOrientation.SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),\n-\t\tEAST(TubeGainRenderOrientation.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),\n-\t\tWEST(TubeGainRenderOrientation.WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);\n-\n-\t\t@Getter\n-\t\tTubeGainRenderOrientation renderOrientation;\n-\t\t@Getter\n-\t\tDoubleCoordinates offset;\n-\t\t@Getter\n-\t\tForgeDirection dir;\n-\n-\t\tTubeGainOrientation(TubeGainRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {\n-\t\t\trenderOrientation = render;\n-\t\t\toffset = off;\n-\t\t\tthis.dir = dir;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void rotatePositions(IPositionRotateble set) {\n-\t\t\trenderOrientation.rotateOrientation(set);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n-\t\t\t((HSTubeGain) pipe).orientation = this;\n-\t\t}\n-\t}\n-\n-\tpublic enum TubeGainRenderOrientation implements ITubeRenderOrientation {\n-\t\tNORTH(ForgeDirection.NORTH),\n-\t\tSOUTH(ForgeDirection.SOUTH),\n-\t\tWEST(ForgeDirection.WEST),\n-\t\tEAST(ForgeDirection.EAST);\n-\n-\t\t@Getter\n-\t\tprivate ForgeDirection dir;\n-\n-\t\tTubeGainRenderOrientation(ForgeDirection dir) {\n-\t\t\tthis.dir = dir;\n-\t\t}\n-\n-\t\tpublic void rotateOrientation(IPositionRotateble set) {\n-\t\t\tif (this == EAST) {\n-\t\t\t\tset.rotateRight();\n-\t\t\t} else if (this == WEST) {\n-\t\t\t\tset.rotateLeft();\n-\t\t\t} else if (this == SOUTH) {\n-\t\t\t\tset.rotateLeft();\n-\t\t\t\tset.rotateLeft();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@Getter\n \tprivate TubeGainOrientation orientation;\n-\n \tprivate List<AxisAlignedBB> boxes = null;\n \n \tpublic HSTubeGain(Item item) {\n \t\tsuper(new PipeMultiBlockTransportLogistics(), item);\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tif (orientation == null) {\n \t\t\toutput.writeBoolean(false);\n \t\t} else {\n@@ -107,7 +50,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tif (input.readBoolean()) {\n \t\t\torientation = input.readEnum(TubeGainOrientation.class);\n \t\t}\n@@ -414,4 +357,59 @@ public double getBoxRenderScale(float fPos, LPTravelingItem travelItem) {\n \tpublic boolean isHSTube() {\n \t\treturn true;\n \t}\n+\n+\tpublic enum TubeGainOrientation implements ITubeOrientation {\n+\t\tNORTH(TubeGainRenderOrientation.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),\n+\t\tSOUTH(TubeGainRenderOrientation.SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),\n+\t\tEAST(TubeGainRenderOrientation.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),\n+\t\tWEST(TubeGainRenderOrientation.WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);\n+\n+\t\t@Getter\n+\t\tTubeGainRenderOrientation renderOrientation;\n+\t\t@Getter\n+\t\tDoubleCoordinates offset;\n+\t\t@Getter\n+\t\tForgeDirection dir;\n+\n+\t\tTubeGainOrientation(TubeGainRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {\n+\t\t\trenderOrientation = render;\n+\t\t\toffset = off;\n+\t\t\tthis.dir = dir;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void rotatePositions(IPositionRotateble set) {\n+\t\t\trenderOrientation.rotateOrientation(set);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n+\t\t\t((HSTubeGain) pipe).orientation = this;\n+\t\t}\n+\t}\n+\n+\tpublic enum TubeGainRenderOrientation implements ITubeRenderOrientation {\n+\t\tNORTH(ForgeDirection.NORTH),\n+\t\tSOUTH(ForgeDirection.SOUTH),\n+\t\tWEST(ForgeDirection.WEST),\n+\t\tEAST(ForgeDirection.EAST);\n+\n+\t\t@Getter\n+\t\tprivate ForgeDirection dir;\n+\n+\t\tTubeGainRenderOrientation(ForgeDirection dir) {\n+\t\t\tthis.dir = dir;\n+\t\t}\n+\n+\t\tpublic void rotateOrientation(IPositionRotateble set) {\n+\t\t\tif (this == EAST) {\n+\t\t\t\tset.rotateRight();\n+\t\t\t} else if (this == WEST) {\n+\t\t\t\tset.rotateLeft();\n+\t\t\t} else if (this == SOUTH) {\n+\t\t\t\tset.rotateLeft();\n+\t\t\t\tset.rotateLeft();\n+\t\t\t}\n+\t\t}\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/pipes/tubes/HSTubeLine.java",
          "status": "modified",
          "additions": 50,
          "deletions": 51,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.pipes.tubes;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -28,54 +27,6 @@\n \n public class HSTubeLine extends CoreMultiBlockPipe {\n \n-\tpublic enum TubeLineOrientation implements ITubeOrientation {\n-\t\tNORTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),\n-\t\tSOUTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),\n-\t\tEAST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),\n-\t\tWEST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);\n-\n-\t\t@Getter\n-\t\tTubeLineRenderOrientation renderOrientation;\n-\t\t@Getter\n-\t\tDoubleCoordinates offset;\n-\t\t@Getter\n-\t\tForgeDirection dir;\n-\n-\t\tTubeLineOrientation(TubeLineRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {\n-\t\t\trenderOrientation = render;\n-\t\t\toffset = off;\n-\t\t\tthis.dir = dir;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void rotatePositions(IPositionRotateble set) {\n-\t\t\trenderOrientation.rotateOrientation(set);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n-\t\t\t((HSTubeLine) pipe).orientation = this;\n-\t\t}\n-\t}\n-\n-\tpublic enum TubeLineRenderOrientation implements ITubeRenderOrientation {\n-\t\tNORTH_SOUTH(ForgeDirection.NORTH),\n-\t\tEAST_WEST(ForgeDirection.EAST);\n-\n-\t\t@Getter\n-\t\tprivate ForgeDirection dir;\n-\n-\t\tTubeLineRenderOrientation(ForgeDirection dir) {\n-\t\t\tthis.dir = dir;\n-\t\t}\n-\n-\t\tpublic void rotateOrientation(IPositionRotateble set) {\n-\t\t\tif (this == EAST_WEST) {\n-\t\t\t\tset.rotateLeft();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@Getter\n \tprivate TubeLineOrientation orientation;\n \n@@ -84,7 +35,7 @@ public HSTubeLine(Item item) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tif (orientation == null) {\n \t\t\toutput.writeBoolean(false);\n \t\t} else {\n@@ -94,7 +45,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tif (input.readBoolean()) {\n \t\t\torientation = input.readEnum(TubeLineOrientation.class);\n \t\t}\n@@ -217,4 +168,52 @@ public IHighlightPlacementRenderer getHighlightRenderer() {\n \tpublic boolean isHSTube() {\n \t\treturn true;\n \t}\n+\n+\tpublic enum TubeLineOrientation implements ITubeOrientation {\n+\t\tNORTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH),\n+\t\tSOUTH(TubeLineRenderOrientation.NORTH_SOUTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.SOUTH),\n+\t\tEAST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST),\n+\t\tWEST(TubeLineRenderOrientation.EAST_WEST, new DoubleCoordinates(0, 0, 0), ForgeDirection.WEST);\n+\n+\t\t@Getter\n+\t\tTubeLineRenderOrientation renderOrientation;\n+\t\t@Getter\n+\t\tDoubleCoordinates offset;\n+\t\t@Getter\n+\t\tForgeDirection dir;\n+\n+\t\tTubeLineOrientation(TubeLineRenderOrientation render, DoubleCoordinates off, ForgeDirection dir) {\n+\t\t\trenderOrientation = render;\n+\t\t\toffset = off;\n+\t\t\tthis.dir = dir;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void rotatePositions(IPositionRotateble set) {\n+\t\t\trenderOrientation.rotateOrientation(set);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n+\t\t\t((HSTubeLine) pipe).orientation = this;\n+\t\t}\n+\t}\n+\n+\tpublic enum TubeLineRenderOrientation implements ITubeRenderOrientation {\n+\t\tNORTH_SOUTH(ForgeDirection.NORTH),\n+\t\tEAST_WEST(ForgeDirection.EAST);\n+\n+\t\t@Getter\n+\t\tprivate ForgeDirection dir;\n+\n+\t\tTubeLineRenderOrientation(ForgeDirection dir) {\n+\t\t\tthis.dir = dir;\n+\t\t}\n+\n+\t\tpublic void rotateOrientation(IPositionRotateble set) {\n+\t\t\tif (this == EAST_WEST) {\n+\t\t\t\tset.rotateLeft();\n+\t\t\t}\n+\t\t}\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/pipes/tubes/HSTubeSCurve.java",
          "status": "modified",
          "additions": 60,
          "deletions": 62,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.pipes.tubes;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n@@ -35,75 +34,16 @@\n \n public class HSTubeSCurve extends CoreMultiBlockPipe {\n \n-\t@AllArgsConstructor\n-\tpublic enum CurveSOrientation implements ITubeOrientation {\n-\t\t//@formatter:off\n-\t\t// Name: Placement from  _ TurnDirection\n-\t\tNORTH_EAST(TurnSDirection.NORTH_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.EAST),\n-\t\tNORTH_WEST(TurnSDirection.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),\n-\t\tEAST_SOUTH(TurnSDirection.EAST_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.SOUTH),\n-\t\tEAST_NORTH(TurnSDirection.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH),\n-\t\tSOUTH_WEST(TurnSDirection.NORTH_INV, new DoubleCoordinates(-1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.WEST),\n-\t\tSOUTH_EAST(TurnSDirection.NORTH, new DoubleCoordinates(1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.EAST),\n-\t\tWEST_NORTH(TurnSDirection.EAST_INV, new DoubleCoordinates(-3, 0, -1), ForgeDirection.WEST, ForgeDirection.NORTH),\n-\t\tWEST_SOUTH(TurnSDirection.EAST, new DoubleCoordinates(-3, 0, 1), ForgeDirection.WEST, ForgeDirection.SOUTH);\n-\t\t//@formatter:on\n-\n-\t\t@Getter\n-\t\tTurnSDirection renderOrientation;\n-\t\t@Getter\n-\t\tDoubleCoordinates offset;\n-\t\t@Getter\n-\t\tForgeDirection dir;\n-\t\t@Getter\n-\t\tForgeDirection looking;\n-\n-\t\t@Override\n-\t\tpublic void rotatePositions(IPositionRotateble set) {\n-\t\t\trenderOrientation.rotatePositions(set);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n-\t\t\t((HSTubeSCurve) pipe).orientation = this;\n-\t\t}\n-\t}\n-\n-\t@AllArgsConstructor\n-\tpublic enum TurnSDirection implements ITubeRenderOrientation {\n-\t\t//@formatter:off\n-\t\tNORTH(ForgeDirection.NORTH),\n-\t\tEAST(ForgeDirection.EAST),\n-\t\tNORTH_INV(ForgeDirection.SOUTH),\n-\t\tEAST_INV(ForgeDirection.WEST);\n-\t\t//@formatter:on\n-\n-\t\t@Getter\n-\t\tprivate ForgeDirection dir1;\n-\n-\t\tpublic void rotatePositions(IPositionRotateble set) {\n-\t\t\tif (this == NORTH) {\n-\t\t\t\tset.mirrorX();\n-\t\t\t} else if (this == EAST) {\n-\t\t\t\tset.mirrorX();\n-\t\t\t\tset.rotateRight();\n-\t\t\t} else if (this == EAST_INV) {\n-\t\t\t\tset.rotateRight();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@Getter\n \tprivate CurveSOrientation orientation;\n-\n \tprivate List<AxisAlignedBB> boxes = null;\n \n \tpublic HSTubeSCurve(Item item) {\n \t\tsuper(new PipeMultiBlockTransportLogistics(), item);\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tif (orientation == null) {\n \t\t\toutput.writeBoolean(false);\n \t\t} else {\n@@ -113,7 +53,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tif (input.readBoolean()) {\n \t\t\torientation = input.readEnum(CurveSOrientation.class);\n \t\t}\n@@ -456,4 +396,62 @@ public double getBoxRenderScale(float fPos, LPTravelingItem travelItem) {\n \tpublic boolean isHSTube() {\n \t\treturn true;\n \t}\n+\n+\t@AllArgsConstructor\n+\tpublic enum CurveSOrientation implements ITubeOrientation {\n+\t\t//@formatter:off\n+\t\t// Name: Placement from  _ TurnDirection\n+\t\tNORTH_EAST(TurnSDirection.NORTH_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.EAST),\n+\t\tNORTH_WEST(TurnSDirection.NORTH, new DoubleCoordinates(0, 0, 0), ForgeDirection.NORTH, ForgeDirection.WEST),\n+\t\tEAST_SOUTH(TurnSDirection.EAST_INV, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.SOUTH),\n+\t\tEAST_NORTH(TurnSDirection.EAST, new DoubleCoordinates(0, 0, 0), ForgeDirection.EAST, ForgeDirection.NORTH),\n+\t\tSOUTH_WEST(TurnSDirection.NORTH_INV, new DoubleCoordinates(-1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.WEST),\n+\t\tSOUTH_EAST(TurnSDirection.NORTH, new DoubleCoordinates(1, 0, 3), ForgeDirection.SOUTH, ForgeDirection.EAST),\n+\t\tWEST_NORTH(TurnSDirection.EAST_INV, new DoubleCoordinates(-3, 0, -1), ForgeDirection.WEST, ForgeDirection.NORTH),\n+\t\tWEST_SOUTH(TurnSDirection.EAST, new DoubleCoordinates(-3, 0, 1), ForgeDirection.WEST, ForgeDirection.SOUTH);\n+\t\t//@formatter:on\n+\n+\t\t@Getter\n+\t\tTurnSDirection renderOrientation;\n+\t\t@Getter\n+\t\tDoubleCoordinates offset;\n+\t\t@Getter\n+\t\tForgeDirection dir;\n+\t\t@Getter\n+\t\tForgeDirection looking;\n+\n+\t\t@Override\n+\t\tpublic void rotatePositions(IPositionRotateble set) {\n+\t\t\trenderOrientation.rotatePositions(set);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n+\t\t\t((HSTubeSCurve) pipe).orientation = this;\n+\t\t}\n+\t}\n+\n+\t@AllArgsConstructor\n+\tpublic enum TurnSDirection implements ITubeRenderOrientation {\n+\t\t//@formatter:off\n+\t\tNORTH(ForgeDirection.NORTH),\n+\t\tEAST(ForgeDirection.EAST),\n+\t\tNORTH_INV(ForgeDirection.SOUTH),\n+\t\tEAST_INV(ForgeDirection.WEST);\n+\t\t//@formatter:on\n+\n+\t\t@Getter\n+\t\tprivate ForgeDirection dir1;\n+\n+\t\tpublic void rotatePositions(IPositionRotateble set) {\n+\t\t\tif (this == NORTH) {\n+\t\t\t\tset.mirrorX();\n+\t\t\t} else if (this == EAST) {\n+\t\t\t\tset.mirrorX();\n+\t\t\t\tset.rotateRight();\n+\t\t\t} else if (this == EAST_INV) {\n+\t\t\t\tset.rotateRight();\n+\t\t\t}\n+\t\t}\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/pipes/tubes/HSTubeSpeedup.java",
          "status": "modified",
          "additions": 41,
          "deletions": 42,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.pipes.tubes;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.entity.player.EntityPlayer;\n@@ -36,45 +35,6 @@\n \n public class HSTubeSpeedup extends CoreMultiBlockPipe {\n \n-\t@AllArgsConstructor\n-\tpublic enum SpeedupDirection implements ITubeRenderOrientation, ITubeOrientation {\n-\t\t//@formatter:off\n-\t\tNORTH(ForgeDirection.NORTH),\n-\t\tSOUTH(ForgeDirection.SOUTH),\n-\t\tEAST(ForgeDirection.EAST),\n-\t\tWEST(ForgeDirection.WEST);\n-\t\t//@formatter:on\n-\t\t@Getter\n-\t\tForgeDirection dir1;\n-\n-\t\t@Override\n-\t\tpublic void rotatePositions(IPositionRotateble set) {\n-\t\t\tif (this == SOUTH) {\n-\t\t\t\tset.rotateLeft();\n-\t\t\t\tset.rotateLeft();\n-\t\t\t} else if (this == EAST) {\n-\t\t\t\tset.rotateRight();\n-\t\t\t} else if (this == WEST) {\n-\t\t\t\tset.rotateLeft();\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic ITubeRenderOrientation getRenderOrientation() {\n-\t\t\treturn this;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic DoubleCoordinates getOffset() {\n-\t\t\treturn new DoubleCoordinates(0, 0, 0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n-\t\t\t((HSTubeSpeedup) pipe).orientation = this;\n-\t\t}\n-\t}\n-\n \t@Getter\n \tprivate SpeedupDirection orientation;\n \n@@ -115,12 +75,12 @@ protected void handleTileReachedClient(LPTravelingItemClient arrivingItem, TileE\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeEnum(orientation);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\torientation = input.readEnum(SpeedupDirection.class);\n \t}\n \n@@ -309,4 +269,43 @@ public boolean canPipeConnect(TileEntity tile, ForgeDirection side) {\n \tpublic boolean isHSTube() {\n \t\treturn true;\n \t}\n+\n+\t@AllArgsConstructor\n+\tpublic enum SpeedupDirection implements ITubeRenderOrientation, ITubeOrientation {\n+\t\t//@formatter:off\n+\t\tNORTH(ForgeDirection.NORTH),\n+\t\tSOUTH(ForgeDirection.SOUTH),\n+\t\tEAST(ForgeDirection.EAST),\n+\t\tWEST(ForgeDirection.WEST);\n+\t\t//@formatter:on\n+\t\t@Getter\n+\t\tForgeDirection dir1;\n+\n+\t\t@Override\n+\t\tpublic void rotatePositions(IPositionRotateble set) {\n+\t\t\tif (this == SOUTH) {\n+\t\t\t\tset.rotateLeft();\n+\t\t\t\tset.rotateLeft();\n+\t\t\t} else if (this == EAST) {\n+\t\t\t\tset.rotateRight();\n+\t\t\t} else if (this == WEST) {\n+\t\t\t\tset.rotateLeft();\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ITubeRenderOrientation getRenderOrientation() {\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic DoubleCoordinates getOffset() {\n+\t\t\treturn new DoubleCoordinates(0, 0, 0);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setOnPipe(CoreMultiBlockPipe pipe) {\n+\t\t\t((HSTubeSpeedup) pipe).orientation = this;\n+\t\t}\n+\t}\n }"
        },
        {
          "filename": "common/logisticspipes/pipes/unrouted/PipeItemsBasicTransport.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.pipes.unrouted;\n \n-import java.io.IOException;\n-\n import net.minecraft.item.Item;\n import net.minecraftforge.common.util.ForgeDirection;\n \n@@ -20,10 +18,10 @@ public PipeItemsBasicTransport(Item item) {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {}\n+\tpublic void writeData(LPDataOutput output) {}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {}\n+\tpublic void readData(LPDataInput input) {}\n \n \t@Override\n \tpublic int getIconIndex(ForgeDirection direction) {"
        },
        {
          "filename": "common/logisticspipes/proxy/ProxyManager.java",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.proxy;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -154,7 +153,7 @@ public static void load() {\n \t\t\t\t\t\treturn new IBCRenderState() {\n \t\t\t\t\t\t\t@Override public boolean needsRenderUpdate() {return false;}\n \t\t\t\t\t\t\t@Override public boolean isDirty() {return false;}\n-\t\t\t\t\t\t\t@Override public void writeData_LP(LPDataOutput output) throws IOException {\n+\t\t\t\t\t\t\t@Override public void writeData_LP(LPDataOutput output)  {\n \t\t\t\t\t\t\t\toutput.writeBoolean(false);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t@Override public void readData_LP(LPDataInput input) {}\n@@ -174,8 +173,8 @@ public static void load() {\n \t\t\t\t\t}\n \t\t\t\t\t@Override public IBCPluggableState getBCPlugableState() {\n \t\t\t\t\t\treturn new IBCPluggableState() {\n-\t\t\t\t\t\t\t@Override public void writeData(LPDataOutput output) throws IOException {}\n-\t\t\t\t\t\t\t@Override public void readData(LPDataInput input) throws IOException {}\n+\t\t\t\t\t\t\t@Override public void writeData(LPDataOutput output)  {}\n+\t\t\t\t\t\t\t@Override public void readData(LPDataInput input)  {}\n \t\t\t\t\t\t\t@Override public boolean isDirty(boolean clean) {return false;}\n \t\t\t\t\t\t};\n \t\t\t\t\t}"
        },
        {
          "filename": "common/logisticspipes/proxy/buildcraft/subproxies/IBCPluggableState.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,18 +1,16 @@\n package logisticspipes.proxy.buildcraft.subproxies;\n \n-import java.io.IOException;\n-\n import logisticspipes.interfaces.IClientState;\n import network.rs485.logisticspipes.util.LPDataInput;\n import network.rs485.logisticspipes.util.LPDataOutput;\n \n public interface IBCPluggableState extends IClientState {\n \n \t@Override\n-\tvoid writeData(LPDataOutput output) throws IOException;\n+\tvoid writeData(LPDataOutput output);\n \n \t@Override\n-\tvoid readData(LPDataInput input) throws IOException;\n+\tvoid readData(LPDataInput input);\n \n \tboolean isDirty(boolean clean);\n }"
        },
        {
          "filename": "common/logisticspipes/proxy/buildcraft/subproxies/IBCRenderState.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.proxy.buildcraft.subproxies;\n \n-import java.io.IOException;\n-\n import network.rs485.logisticspipes.util.LPDataInput;\n import network.rs485.logisticspipes.util.LPDataOutput;\n \n@@ -11,9 +9,9 @@ public interface IBCRenderState {\n \n \tboolean isDirty();\n \n-\tvoid writeData_LP(LPDataOutput output) throws IOException;\n+\tvoid writeData_LP(LPDataOutput output);\n \n-\tvoid readData_LP(LPDataInput input) throws IOException;\n+\tvoid readData_LP(LPDataInput input);\n \n \tvoid clean();\n "
        },
        {
          "filename": "common/logisticspipes/proxy/buildcraft/subproxies/LPBCPipeRenderState.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.proxy.buildcraft.subproxies;\n \n-import java.io.IOException;\n-\n import buildcraft.transport.PipeRenderState;\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.Unpooled;\n@@ -12,15 +10,15 @@\n public class LPBCPipeRenderState extends PipeRenderState implements IBCRenderState {\n \n \t@Override\n-\tpublic void writeData_LP(LPDataOutput output) throws IOException {\n+\tpublic void writeData_LP(LPDataOutput output) {\n \t\toutput.writeBoolean(true);\n \t\tByteBuf buf = Unpooled.buffer(128);\n \t\twriteData(buf);\n \t\toutput.writeByteBuf(buf);\n \t}\n \n \t@Override\n-\tpublic void readData_LP(LPDataInput input) throws IOException {\n+\tpublic void readData_LP(LPDataInput input) {\n \t\tif (input.readBoolean()) {\n \t\t\tByteBuf buf = input.readByteBuf();\n \t\t\treadData(buf);"
        },
        {
          "filename": "common/logisticspipes/proxy/buildcraft/subproxies/LPBCPluggableState.java",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -1,12 +1,10 @@\n package logisticspipes.proxy.buildcraft.subproxies;\n \n-import java.io.IOException;\n import java.util.Arrays;\n \n import buildcraft.transport.PipePluggableState;\n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.Unpooled;\n-import lombok.SneakyThrows;\n \n import network.rs485.logisticspipes.util.LPDataIOWrapper;\n import network.rs485.logisticspipes.util.LPDataInput;\n@@ -17,20 +15,19 @@ public class LPBCPluggableState extends PipePluggableState implements IBCPluggab\n \tprivate byte[] oldBuffer;\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tByteBuf buf = Unpooled.buffer(128);\n \t\tthis.writeData(buf);\n \t\toutput.writeByteBuf(buf);\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tByteBuf buf = input.readByteBuf();\n \t\tthis.readData(buf);\n \t}\n \n \t@Override\n-\t@SneakyThrows({ IOException.class })\n \tpublic boolean isDirty(boolean clean) {\n \t\tbyte[] newBytes = LPDataIOWrapper.collectData(this::writeData);\n \t\tboolean result = !Arrays.equals(newBytes, oldBuffer);"
        },
        {
          "filename": "common/logisticspipes/renderer/state/ConnectionMatrix.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.renderer.state;\n \n-import java.io.IOException;\n-\n import net.minecraftforge.common.util.ForgeDirection;\n \n import network.rs485.logisticspipes.util.LPDataInput;\n@@ -74,13 +72,13 @@ public void clean() {\n \t\tdirty = false;\n \t}\n \n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeByte(mask);\n \t\toutput.writeByte(isBCPipeMask);\n \t\toutput.writeByte(isTDPipeMask);\n \t}\n \n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tbyte newMask = input.readByte();\n \n \t\tif (newMask != mask) {"
        },
        {
          "filename": "common/logisticspipes/renderer/state/PipeRenderState.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.renderer.state;\n \n-import java.io.IOException;\n import java.util.List;\n \n import net.minecraft.util.IIcon;\n@@ -58,14 +57,14 @@ public boolean needsRenderUpdate() {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tpipeConnectionMatrix.writeData(output);\n \t\ttextureMatrix.writeData(output);\n \t\tbcRenderState.writeData_LP(output); //Always needs to be last. Different length depending on proxy loading state.\n \t}\n \n \t@Override\n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tpipeConnectionMatrix.readData(input);\n \t\ttextureMatrix.readData(input);\n \t\tbcRenderState.readData_LP(input); //Always needs to be last. Different length depending on proxy loading state."
        },
        {
          "filename": "common/logisticspipes/renderer/state/TextureMatrix.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.renderer.state;\n \n-import java.io.IOException;\n-\n import net.minecraftforge.common.util.ForgeDirection;\n \n import lombok.Getter;\n@@ -112,7 +110,7 @@ public void clean() {\n \t\tdirty = false;\n \t}\n \n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\tfor (int iconIndexe : iconIndexes) {\n \t\t\toutput.writeByte(iconIndexe);\n \t\t}\n@@ -126,7 +124,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t\toutput.writeForgeDirection(pointedOrientation);\n \t}\n \n-\tpublic void readData(LPDataInput input) throws IOException {\n+\tpublic void readData(LPDataInput input) {\n \t\tfor (int i = 0; i < iconIndexes.length; i++) {\n \t\t\tint icon = input.readByte();\n \t\t\tif (iconIndexes[i] != icon) {"
        },
        {
          "filename": "common/logisticspipes/request/resources/DictResource.java",
          "status": "modified",
          "additions": 8,
          "deletions": 11,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.request.resources;\n \n-import java.io.IOException;\n import java.util.BitSet;\n \n import net.minecraft.item.ItemStack;\n@@ -17,9 +16,8 @@\n \n public class DictResource implements IResource {\n \n-\tpublic ItemIdentifierStack stack;\n \tprivate final IRequestItems requester;\n-\n+\tpublic ItemIdentifierStack stack;\n \t//match all items with same oredict name\n \tpublic boolean use_od = false;\n \t//match all items with same id\n@@ -28,13 +26,14 @@ public class DictResource implements IResource {\n \tpublic boolean ignore_nbt = false;\n \t//match all items with same oredict prefix\n \tpublic boolean use_category = false;\n+\tprivate Object ccObject;\n \n \tpublic DictResource(ItemIdentifierStack stack, IRequestItems requester) {\n \t\tthis.stack = stack;\n \t\tthis.requester = requester;\n \t}\n \n-\tpublic DictResource(LPDataInput input) throws IOException {\n+\tpublic DictResource(LPDataInput input) {\n \t\tstack = input.readItemIdentifierStack();\n \t\trequester = null;\n \t\tBitSet bits = input.readBitSet();\n@@ -45,7 +44,7 @@ public DictResource(LPDataInput input) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeItemIdentifierStack(stack);\n \t\tBitSet bits = new BitSet();\n \t\tbits.set(0, use_od);\n@@ -161,16 +160,14 @@ public IResource copyForDisplayWith(int amount) {\n \t\treturn clone;\n \t}\n \n-\tprivate Object ccObject;\n-\n \t@Override\n-\tpublic void setCCType(Object type) {\n-\t\tccObject = type;\n+\tpublic Object getCCType() {\n+\t\treturn ccObject;\n \t}\n \n \t@Override\n-\tpublic Object getCCType() {\n-\t\treturn ccObject;\n+\tpublic void setCCType(Object type) {\n+\t\tccObject = type;\n \t}\n \n \t@Override"
        },
        {
          "filename": "common/logisticspipes/request/resources/FluidResource.java",
          "status": "modified",
          "additions": 8,
          "deletions": 11,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.request.resources;\n \n-import java.io.IOException;\n-\n import logisticspipes.interfaces.routing.IRequestFluid;\n import logisticspipes.routing.IRouter;\n import logisticspipes.utils.FluidIdentifier;\n@@ -14,23 +12,24 @@\n public class FluidResource implements IResource {\n \n \tprivate final FluidIdentifier liquid;\n-\tprivate int amount;\n \tprivate final IRequestFluid target;\n+\tprivate int amount;\n+\tprivate Object ccObject;\n \n \tpublic FluidResource(FluidIdentifier liquid, int amount, IRequestFluid target) {\n \t\tthis.liquid = liquid;\n \t\tthis.amount = amount;\n \t\tthis.target = target;\n \t}\n \n-\tpublic FluidResource(LPDataInput input) throws IOException {\n+\tpublic FluidResource(LPDataInput input) {\n \t\tliquid = FluidIdentifier.get(input.readItemIdentifier());\n \t\tamount = input.readInt();\n \t\ttarget = null;\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeItemIdentifier(liquid.getItemIdentifier());\n \t\toutput.writeInt(amount);\n \t}\n@@ -88,16 +87,14 @@ public IResource copyForDisplayWith(int amount) {\n \t\treturn new FluidResource(liquid, amount, null);\n \t}\n \n-\tprivate Object ccObject;\n-\n \t@Override\n-\tpublic void setCCType(Object type) {\n-\t\tccObject = type;\n+\tpublic Object getCCType() {\n+\t\treturn ccObject;\n \t}\n \n \t@Override\n-\tpublic Object getCCType() {\n-\t\treturn ccObject;\n+\tpublic void setCCType(Object type) {\n+\t\tccObject = type;\n \t}\n \n \t@Override"
        },
        {
          "filename": "common/logisticspipes/request/resources/IResource.java",
          "status": "modified",
          "additions": 9,
          "deletions": 11,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.request.resources;\n \n-import java.io.IOException;\n-\n import cpw.mods.fml.relauncher.Side;\n import cpw.mods.fml.relauncher.SideOnly;\n \n@@ -18,14 +16,6 @@ public interface IResource extends ILPCCTypeHolder {\n \n \tItemIdentifier getAsItem();\n \n-\t/**\n-\t * Settings only apply for the normal Item Implementation.\n-\t */\n-\tenum MatchSettings {\n-\t\tNORMAL,\n-\t\tWITHOUT_NBT\n-\t}\n-\n \tint getRequestedAmount();\n \n \tIRouter getRouter();\n@@ -34,7 +24,7 @@ enum MatchSettings {\n \n \tIResource clone(int multiplier);\n \n-\tvoid writeData(LPDataOutput output) throws IOException;\n+\tvoid writeData(LPDataOutput output);\n \n \tboolean mergeForDisplay(IResource resource, int withAmount); //Amount overrides existing amount inside the resource\n \n@@ -45,6 +35,14 @@ enum MatchSettings {\n \n \tItemIdentifierStack getDisplayItem();\n \n+\t/**\n+\t * Settings only apply for the normal Item Implementation.\n+\t */\n+\tenum MatchSettings {\n+\t\tNORMAL,\n+\t\tWITHOUT_NBT\n+\t}\n+\n \tenum ColorCode {\n \t\tNONE,\n \t\tMISSING,"
        },
        {
          "filename": "common/logisticspipes/request/resources/ItemResource.java",
          "status": "modified",
          "additions": 7,
          "deletions": 10,
          "patch": "@@ -1,7 +1,5 @@\n package logisticspipes.request.resources;\n \n-import java.io.IOException;\n-\n import logisticspipes.interfaces.routing.IRequestItems;\n import logisticspipes.routing.IRouter;\n import logisticspipes.utils.item.ItemIdentifier;\n@@ -14,19 +12,20 @@ public class ItemResource implements IResource {\n \n \tprivate final ItemIdentifierStack stack;\n \tprivate final IRequestItems requester;\n+\tprivate Object ccObject;\n \n \tpublic ItemResource(ItemIdentifierStack stack, IRequestItems requester) {\n \t\tthis.stack = stack;\n \t\tthis.requester = requester;\n \t}\n \n-\tpublic ItemResource(LPDataInput input) throws IOException {\n+\tpublic ItemResource(LPDataInput input) {\n \t\tstack = input.readItemIdentifierStack();\n \t\trequester = null;\n \t}\n \n \t@Override\n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeItemIdentifierStack(stack);\n \t}\n \n@@ -93,16 +92,14 @@ public IResource copyForDisplayWith(int amount) {\n \t\treturn new ItemResource(stack, requester);\n \t}\n \n-\tprivate Object ccObject;\n-\n \t@Override\n-\tpublic void setCCType(Object type) {\n-\t\tccObject = type;\n+\tpublic Object getCCType() {\n+\t\treturn ccObject;\n \t}\n \n \t@Override\n-\tpublic Object getCCType() {\n-\t\treturn ccObject;\n+\tpublic void setCCType(Object type) {\n+\t\tccObject = type;\n \t}\n \n \t@Override"
        },
        {
          "filename": "common/logisticspipes/request/resources/ResourceNetwork.java",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -1,26 +1,24 @@\n package logisticspipes.request.resources;\n \n-import java.io.IOException;\n-\n import network.rs485.logisticspipes.util.LPDataInput;\n import network.rs485.logisticspipes.util.LPDataOutput;\n \n public enum ResourceNetwork {\n \tDictResource(DictResource.class) {\n \t\t@Override\n-\t\tprotected IResource readData(LPDataInput input) throws IOException {\n+\t\tprotected IResource readData(LPDataInput input) {\n \t\t\treturn new DictResource(input);\n \t\t}\n \t},\n \tItemResource(ItemResource.class) {\n \t\t@Override\n-\t\tprotected IResource readData(LPDataInput input) throws IOException {\n+\t\tprotected IResource readData(LPDataInput input) {\n \t\t\treturn new ItemResource(input);\n \t\t}\n \t},\n \tFluidResource(FluidResource.class) {\n \t\t@Override\n-\t\tprotected IResource readData(LPDataInput input) throws IOException {\n+\t\tprotected IResource readData(LPDataInput input) {\n \t\t\treturn new FluidResource(input);\n \t\t}\n \t};\n@@ -31,7 +29,7 @@ protected IResource readData(LPDataInput input) throws IOException {\n \t\tthis.clazz = clazz;\n \t}\n \n-\tpublic static void writeResource(LPDataOutput output, IResource resource) throws IOException {\n+\tpublic static void writeResource(LPDataOutput output, IResource resource) {\n \t\tif (resource == null) {\n \t\t\toutput.writeInt(-1);\n \t\t\treturn;\n@@ -47,13 +45,13 @@ public static void writeResource(LPDataOutput output, IResource resource) throws\n \t\tthrow new UnsupportedOperationException(resource.getClass().toString());\n \t}\n \n-\tpublic static IResource readResource(LPDataInput input) throws IOException {\n+\tpublic static IResource readResource(LPDataInput input) {\n \t\tint id = input.readInt();\n \t\tif (id == -1) {\n \t\t\treturn null;\n \t\t}\n \t\treturn ResourceNetwork.values()[id].readData(input);\n \t}\n \n-\tprotected abstract IResource readData(LPDataInput input) throws IOException;\n+\tprotected abstract IResource readData(LPDataInput input);\n }"
        },
        {
          "filename": "common/logisticspipes/routing/LaserData.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,6 +1,5 @@\n package logisticspipes.routing;\n \n-import java.io.IOException;\n import java.util.EnumSet;\n \n import net.minecraftforge.common.util.ForgeDirection;\n@@ -34,7 +33,7 @@ public class LaserData {\n \tprivate boolean startPipe = false;\n \tprivate int length = 1;\n \n-\tpublic void writeData(LPDataOutput output) throws IOException {\n+\tpublic void writeData(LPDataOutput output) {\n \t\toutput.writeInt(posX);\n \t\toutput.writeInt(posY);\n \t\toutput.writeInt(posZ);\n@@ -47,7 +46,7 @@ public void writeData(LPDataOutput output) throws IOException {\n \t\t}\n \t}\n \n-\tpublic LaserData readData(LPDataInput input) throws IOException {\n+\tpublic LaserData readData(LPDataInput input) {\n \t\tposX = input.readInt();\n \t\tposY = input.readInt();\n \t\tposZ = input.readInt();"
        },
        {
          "filename": "common/logisticspipes/ticks/ClientPacketBufferHandlerThread.java",
          "status": "modified",
          "additions": 91,
          "deletions": 101,
          "patch": "@@ -23,6 +23,65 @@\n \n public class ClientPacketBufferHandlerThread {\n \n+\tprivate final ClientCompressorThread clientCompressorThread = new ClientCompressorThread();\n+\tprivate final ClientDecompressorThread clientDecompressorThread = new ClientDecompressorThread();\n+\n+\tpublic ClientPacketBufferHandlerThread() {}\n+\n+\tprivate static byte[] compress(byte[] content) {\n+\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+\t\ttry {\n+\t\t\tGZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);\n+\t\t\tgzipOutputStream.write(content);\n+\t\t\tgzipOutputStream.close();\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\treturn byteArrayOutputStream.toByteArray();\n+\t}\n+\n+\tprivate static byte[] decompress(byte[] contentBytes) {\n+\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n+\t\ttry {\n+\t\t\tGZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));\n+\t\t\tint buffer = 0;\n+\t\t\twhile ((buffer = gzip.read()) != -1) {\n+\t\t\t\tout.write(buffer);\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\treturn out.toByteArray();\n+\t}\n+\n+\tpublic void clientTick(ClientTickEvent event) {\n+\t\tif (event.phase != Phase.END) {\n+\t\t\treturn;\n+\t\t}\n+\t\tclientDecompressorThread.clientTickEnd();\n+\t}\n+\n+\tpublic void setPause(boolean flag) {\n+\t\tclientCompressorThread.setPause(flag);\n+\t}\n+\n+\tpublic void addPacketToCompressor(ModernPacket packet) {\n+\t\tclientCompressorThread.addPacketToCompressor(packet);\n+\t}\n+\n+\tpublic void handlePacket(byte[] content) {\n+\t\tclientDecompressorThread.handlePacket(content);\n+\t}\n+\n+\tpublic void clear() {\n+\t\tclientCompressorThread.clear();\n+\t\tclientDecompressorThread.clear();\n+\t}\n+\n+\tpublic void queueFailedPacket(ModernPacket packet, EntityPlayer player) {\n+\t\tclientDecompressorThread.queueFailedPacket(packet, player);\n+\t}\n+\n \tprivate class ClientCompressorThread extends Thread {\n \n \t\t//list of C->S packets to be serialized and compressed\n@@ -45,46 +104,42 @@ public ClientCompressorThread() {\n \t\t@Override\n \t\tpublic void run() {\n \t\t\twhile (true) {\n-\t\t\t\ttry {\n-\t\t\t\t\tsynchronized (clientList) {\n-\t\t\t\t\t\tif (!pause && clientList.size() > 0) {\n-\t\t\t\t\t\t\tclientBuffer = LPDataIOWrapper.collectData(output -> {\n-\t\t\t\t\t\t\t\toutput.writeBytes(clientBuffer);\n-\t\t\t\t\t\t\t\tclearLock.lock();\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\tfor (ModernPacket packet : clientList) {\n-\t\t\t\t\t\t\t\t\t\toutput.writeShort(packet.getId());\n-\t\t\t\t\t\t\t\t\t\toutput.writeInt(packet.getDebugId());\n-\t\t\t\t\t\t\t\t\t\tpacket.writeData(output);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} finally {\n-\t\t\t\t\t\t\t\t\tclientList.clear();\n-\t\t\t\t\t\t\t\t\tclearLock.unlock();\n+\t\t\t\tsynchronized (clientList) {\n+\t\t\t\t\tif (!pause && clientList.size() > 0) {\n+\t\t\t\t\t\tclientBuffer = LPDataIOWrapper.collectData(output -> {\n+\t\t\t\t\t\t\toutput.writeBytes(clientBuffer);\n+\t\t\t\t\t\t\tclearLock.lock();\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tfor (ModernPacket packet : clientList) {\n+\t\t\t\t\t\t\t\t\toutput.writeShort(packet.getId());\n+\t\t\t\t\t\t\t\t\toutput.writeInt(packet.getDebugId());\n+\t\t\t\t\t\t\t\t\tpacket.writeData(output);\n \t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\t\tclientList.clear();\n+\t\t\t\t\t\t\t\tclearLock.unlock();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n \t\t\t\t\t}\n-\t\t\t\t\t//Send Content\n-\t\t\t\t\tif (clientBuffer.length > 0) {\n-\t\t\t\t\t\twhile (clientBuffer.length > 1024 * 32) {\n-\t\t\t\t\t\t\tbyte[] sendbuffer = Arrays.copyOf(clientBuffer, 1024 * 32);\n-\t\t\t\t\t\t\tclientBuffer = Arrays.copyOfRange(clientBuffer, 1024 * 32, clientBuffer.length);\n-\t\t\t\t\t\t\tbyte[] compressed = ClientPacketBufferHandlerThread.compress(sendbuffer);\n-\t\t\t\t\t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tbyte[] sendbuffer = clientBuffer;\n-\t\t\t\t\t\tclientBuffer = new byte[] {};\n+\t\t\t\t}\n+\t\t\t\t//Send Content\n+\t\t\t\tif (clientBuffer.length > 0) {\n+\t\t\t\t\twhile (clientBuffer.length > 1024 * 32) {\n+\t\t\t\t\t\tbyte[] sendbuffer = Arrays.copyOf(clientBuffer, 1024 * 32);\n+\t\t\t\t\t\tclientBuffer = Arrays.copyOfRange(clientBuffer, 1024 * 32, clientBuffer.length);\n \t\t\t\t\t\tbyte[] compressed = ClientPacketBufferHandlerThread.compress(sendbuffer);\n \t\t\t\t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed));\n \t\t\t\t\t}\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\tbyte[] sendbuffer = clientBuffer;\n+\t\t\t\t\tclientBuffer = new byte[] {};\n+\t\t\t\t\tbyte[] compressed = ClientPacketBufferHandlerThread.compress(sendbuffer);\n+\t\t\t\t\tMainProxy.sendPacketToServer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed));\n \t\t\t\t}\n \t\t\t\tsynchronized (clientList) {\n \t\t\t\t\twhile (pause || clientList.size() == 0) {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tclientList.wait();\n-\t\t\t\t\t\t} catch (InterruptedException e) {}\n+\t\t\t\t\t\t} catch (InterruptedException ignored) { }\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (clear) {\n@@ -126,19 +181,17 @@ public void run() {\n \t\t}\n \t}\n \n-\tprivate final ClientCompressorThread clientCompressorThread = new ClientCompressorThread();\n-\n \tprivate class ClientDecompressorThread extends Thread {\n \n \t\t//Received compressed S->C data\n \t\tprivate final LinkedList<byte[]> queue = new LinkedList<>();\n-\t\t//decompressed serialized S->C data\n-\t\tprivate byte[] ByteBuffer = new byte[] {};\n \t\t//FIFO for deserialized S->C packets, decompressor adds, tickEnd removes\n \t\tprivate final LinkedList<Pair<EntityPlayer, byte[]>> PacketBuffer = new LinkedList<>();\n \t\tprivate final ReentrantLock packetBufferLock = new ReentrantLock();\n \t\t//List of packets that that should be reattempted to apply in the next tick\n \t\tprivate final LinkedList<Pair<EntityPlayer, ModernPacket>> retryPackets = new LinkedList<>();\n+\t\t//decompressed serialized S->C data\n+\t\tprivate byte[] ByteBuffer = new byte[] {};\n \t\t//Clear content on next tick\n \t\tprivate boolean clear = false;\n \n@@ -149,14 +202,9 @@ public ClientDecompressorThread() {\n \t\t}\n \n \t\tprivate void handlePacketData(final Pair<EntityPlayer, byte[]> playerDataPair) {\n-\t\t\ttry {\n-\t\t\t\tLPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {\n-\t\t\t\t\tPacketHandler.onPacketData(input, playerDataPair.getValue1());\n-\t\t\t\t});\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tSystem.err.println(\"IO Error in handlePacketData for player \" + playerDataPair.getValue1().getCommandSenderName());\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n+\t\t\tLPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {\n+\t\t\t\tPacketHandler.onPacketData(input, playerDataPair.getValue1());\n+\t\t\t});\n \t\t}\n \n \t\tpublic void clientTickEnd() {\n@@ -220,7 +268,7 @@ public void run() {\n \t\t\t\t\twhile (queue.size() == 0) {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tqueue.wait();\n-\t\t\t\t\t\t} catch (InterruptedException e) { }\n+\t\t\t\t\t\t} catch (InterruptedException ignored) { }\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (clear) {\n@@ -247,62 +295,4 @@ public void queueFailedPacket(ModernPacket packet, EntityPlayer player) {\n \t\t\tretryPackets.add(new Pair<>(player, packet));\n \t\t}\n \t}\n-\n-\tprivate final ClientDecompressorThread clientDecompressorThread = new ClientDecompressorThread();\n-\n-\tpublic ClientPacketBufferHandlerThread() {}\n-\n-\tpublic void clientTick(ClientTickEvent event) {\n-\t\tif (event.phase != Phase.END) {\n-\t\t\treturn;\n-\t\t}\n-\t\tclientDecompressorThread.clientTickEnd();\n-\t}\n-\n-\tpublic void setPause(boolean flag) {\n-\t\tclientCompressorThread.setPause(flag);\n-\t}\n-\n-\tpublic void addPacketToCompressor(ModernPacket packet) {\n-\t\tclientCompressorThread.addPacketToCompressor(packet);\n-\t}\n-\n-\tpublic void handlePacket(byte[] content) {\n-\t\tclientDecompressorThread.handlePacket(content);\n-\t}\n-\n-\tprivate static byte[] compress(byte[] content) {\n-\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n-\t\ttry {\n-\t\t\tGZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);\n-\t\t\tgzipOutputStream.write(content);\n-\t\t\tgzipOutputStream.close();\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t\treturn byteArrayOutputStream.toByteArray();\n-\t}\n-\n-\tprivate static byte[] decompress(byte[] contentBytes) {\n-\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n-\t\ttry {\n-\t\t\tGZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));\n-\t\t\tint buffer = 0;\n-\t\t\twhile ((buffer = gzip.read()) != -1) {\n-\t\t\t\tout.write(buffer);\n-\t\t\t}\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t\treturn out.toByteArray();\n-\t}\n-\n-\tpublic void clear() {\n-\t\tclientCompressorThread.clear();\n-\t\tclientDecompressorThread.clear();\n-\t}\n-\n-\tpublic void queueFailedPacket(ModernPacket packet, EntityPlayer player) {\n-\t\tclientDecompressorThread.queueFailedPacket(packet, player);\n-\t}\n }"
        },
        {
          "filename": "common/logisticspipes/ticks/ServerPacketBufferHandlerThread.java",
          "status": "modified",
          "additions": 95,
          "deletions": 105,
          "patch": "@@ -26,6 +26,67 @@\n \n public class ServerPacketBufferHandlerThread {\n \n+\tprivate final ServerCompressorThread serverCompressorThread = new ServerCompressorThread();\n+\tprivate final ServerDecompressorThread serverDecompressorThread = new ServerDecompressorThread();\n+\n+\tpublic ServerPacketBufferHandlerThread() {}\n+\n+\tprivate static byte[] compress(byte[] content) {\n+\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+\t\ttry {\n+\t\t\tGZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);\n+\t\t\tgzipOutputStream.write(content);\n+\t\t\tgzipOutputStream.close();\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\treturn byteArrayOutputStream.toByteArray();\n+\t}\n+\n+\tprivate static byte[] decompress(byte[] contentBytes) {\n+\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n+\t\ttry {\n+\t\t\tGZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));\n+\t\t\tint buffer = 0;\n+\t\t\twhile ((buffer = gzip.read()) != -1) {\n+\t\t\t\tout.write(buffer);\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\treturn out.toByteArray();\n+\t}\n+\n+\tpublic void serverTick(ServerTickEvent event) {\n+\t\tif (event.phase != Phase.END) {\n+\t\t\treturn;\n+\t\t}\n+\t\tserverDecompressorThread.serverTickEnd();\n+\t}\n+\n+\tpublic void setPause(boolean flag) {\n+\t\tserverCompressorThread.setPause(flag);\n+\t}\n+\n+\tpublic void addPacketToCompressor(ModernPacket packet, EntityPlayer player) {\n+\t\tserverCompressorThread.addPacketToCompressor(packet, player);\n+\t}\n+\n+\tpublic void handlePacket(byte[] content, EntityPlayer player) {\n+\t\tserverDecompressorThread.handlePacket(content, player);\n+\t}\n+\n+\tpublic void clear(final EntityPlayer player) {\n+\t\tnew Thread() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tserverCompressorThread.clear(player);\n+\t\t\t\tserverDecompressorThread.clear(player);\n+\t\t\t}\n+\t\t}.start();\n+\t}\n+\n \tprivate class ServerCompressorThread extends Thread {\n \n \t\t//Map of Players to lists of S->C packets to be serialized and compressed\n@@ -46,53 +107,49 @@ public ServerCompressorThread() {\n \t\t@Override\n \t\tpublic void run() {\n \t\t\twhile (true) {\n-\t\t\t\ttry {\n-\t\t\t\t\tsynchronized (serverList) {\n-\t\t\t\t\t\tif (!pause) {\n-\t\t\t\t\t\t\tfor (Entry<EntityPlayer, LinkedList<ModernPacket>> playerPacketEntry : serverList.entrySet()) {\n-\t\t\t\t\t\t\t\tEntityPlayer player = playerPacketEntry.getKey();\n-\t\t\t\t\t\t\t\tserverBuffer.put(player, LPDataIOWrapper.collectData(output -> {\n-\t\t\t\t\t\t\t\t\tif (serverBuffer.containsKey(player)) {\n-\t\t\t\t\t\t\t\t\t\toutput.writeBytes(serverBuffer.get(player));\n-\t\t\t\t\t\t\t\t\t}\n+\t\t\t\tsynchronized (serverList) {\n+\t\t\t\t\tif (!pause) {\n+\t\t\t\t\t\tfor (Entry<EntityPlayer, LinkedList<ModernPacket>> playerPacketEntry : serverList.entrySet()) {\n+\t\t\t\t\t\t\tEntityPlayer player = playerPacketEntry.getKey();\n+\t\t\t\t\t\t\tserverBuffer.put(player, LPDataIOWrapper.collectData(output -> {\n+\t\t\t\t\t\t\t\tif (serverBuffer.containsKey(player)) {\n+\t\t\t\t\t\t\t\t\toutput.writeBytes(serverBuffer.get(player));\n+\t\t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\t\t\tLinkedList<ModernPacket> packets = playerPacketEntry.getValue();\n-\t\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t\tfor (ModernPacket packet : packets) {\n-\t\t\t\t\t\t\t\t\t\t\toutput.writeShort(packet.getId());\n-\t\t\t\t\t\t\t\t\t\t\toutput.writeInt(packet.getDebugId());\n-\t\t\t\t\t\t\t\t\t\t\tpacket.writeData(output);\n-\t\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\t} finally {\n-\t\t\t\t\t\t\t\t\t\tpackets.clear();\n+\t\t\t\t\t\t\t\tLinkedList<ModernPacket> packets = playerPacketEntry.getValue();\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\tfor (ModernPacket packet : packets) {\n+\t\t\t\t\t\t\t\t\t\toutput.writeShort(packet.getId());\n+\t\t\t\t\t\t\t\t\t\toutput.writeInt(packet.getDebugId());\n+\t\t\t\t\t\t\t\t\t\tpacket.writeData(output);\n \t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tserverList.clear();\n+\t\t\t\t\t\t\t\t} finally {\n+\t\t\t\t\t\t\t\t\tpackets.clear();\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}));\n \t\t\t\t\t\t}\n+\t\t\t\t\t\tserverList.clear();\n \t\t\t\t\t}\n-\t\t\t\t\t//Send Content\n-\t\t\t\t\tfor (Entry<EntityPlayer, byte[]> player : serverBuffer.entrySet()) {\n-\t\t\t\t\t\twhile (player.getValue().length > 32 * 1024) {\n-\t\t\t\t\t\t\tbyte[] sendbuffer = Arrays.copyOf(player.getValue(), 1024 * 32);\n-\t\t\t\t\t\t\tbyte[] newbuffer = Arrays.copyOfRange(player.getValue(), 1024 * 32, player.getValue().length);\n-\t\t\t\t\t\t\tplayer.setValue(newbuffer);\n-\t\t\t\t\t\t\tbyte[] compressed = ServerPacketBufferHandlerThread.compress(sendbuffer);\n-\t\t\t\t\t\t\tMainProxy.sendPacketToPlayer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed), player.getKey());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tbyte[] sendbuffer = player.getValue();\n+\t\t\t\t}\n+\t\t\t\t//Send Content\n+\t\t\t\tfor (Entry<EntityPlayer, byte[]> player : serverBuffer.entrySet()) {\n+\t\t\t\t\twhile (player.getValue().length > 32 * 1024) {\n+\t\t\t\t\t\tbyte[] sendbuffer = Arrays.copyOf(player.getValue(), 1024 * 32);\n+\t\t\t\t\t\tbyte[] newbuffer = Arrays.copyOfRange(player.getValue(), 1024 * 32, player.getValue().length);\n+\t\t\t\t\t\tplayer.setValue(newbuffer);\n \t\t\t\t\t\tbyte[] compressed = ServerPacketBufferHandlerThread.compress(sendbuffer);\n \t\t\t\t\t\tMainProxy.sendPacketToPlayer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed), player.getKey());\n \t\t\t\t\t}\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\tbyte[] sendbuffer = player.getValue();\n+\t\t\t\t\tbyte[] compressed = ServerPacketBufferHandlerThread.compress(sendbuffer);\n+\t\t\t\t\tMainProxy.sendPacketToPlayer(PacketHandler.getPacket(BufferTransfer.class).setContent(compressed), player.getKey());\n \t\t\t\t}\n \t\t\t\tserverBuffer.clear();\n \t\t\t\tsynchronized (serverList) {\n \t\t\t\t\twhile (pause || serverList.size() == 0) {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tserverList.wait();\n-\t\t\t\t\t\t} catch (InterruptedException e) {}\n+\t\t\t\t\t\t} catch (InterruptedException ignored) { }\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tsynchronized (playersToClear) {\n@@ -140,8 +197,6 @@ public void clear(EntityPlayer player) {\n \t\t}\n \t}\n \n-\tprivate final ServerCompressorThread serverCompressorThread = new ServerCompressorThread();\n-\n \tprivate class ServerDecompressorThread extends Thread {\n \n \t\t//Map of Player to received compressed C->S data\n@@ -161,14 +216,9 @@ public ServerDecompressorThread() {\n \t\t}\n \n \t\tprivate void handlePacketData(final Pair<EntityPlayer, byte[]> playerDataPair) {\n-\t\t\ttry {\n-\t\t\t\tLPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {\n-\t\t\t\t\tPacketHandler.onPacketData(input, playerDataPair.getValue1());\n-\t\t\t\t});\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tSystem.err.println(\"IO Error in handlePacketData for player \" + playerDataPair.getValue1().getCommandSenderName());\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n+\t\t\tLPDataIOWrapper.provideData(playerDataPair.getValue2(), input -> {\n+\t\t\t\tPacketHandler.onPacketData(input, playerDataPair.getValue1());\n+\t\t\t});\n \t\t}\n \n \t\tpublic void serverTickEnd() {\n@@ -262,7 +312,7 @@ public void run() {\n \t\t\t\t\twhile (queue.size() == 0) {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tqueue.wait();\n-\t\t\t\t\t\t} catch (InterruptedException e) {}\n+\t\t\t\t\t\t} catch (InterruptedException ignored) { }\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tsynchronized (playersToClear) {\n@@ -298,64 +348,4 @@ public void clear(EntityPlayer player) {\n \t\t\t}\n \t\t}\n \t}\n-\n-\tprivate final ServerDecompressorThread serverDecompressorThread = new ServerDecompressorThread();\n-\n-\tpublic ServerPacketBufferHandlerThread() {}\n-\n-\tpublic void serverTick(ServerTickEvent event) {\n-\t\tif (event.phase != Phase.END) {\n-\t\t\treturn;\n-\t\t}\n-\t\tserverDecompressorThread.serverTickEnd();\n-\t}\n-\n-\tpublic void setPause(boolean flag) {\n-\t\tserverCompressorThread.setPause(flag);\n-\t}\n-\n-\tpublic void addPacketToCompressor(ModernPacket packet, EntityPlayer player) {\n-\t\tserverCompressorThread.addPacketToCompressor(packet, player);\n-\t}\n-\n-\tpublic void handlePacket(byte[] content, EntityPlayer player) {\n-\t\tserverDecompressorThread.handlePacket(content, player);\n-\t}\n-\n-\tprivate static byte[] compress(byte[] content) {\n-\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n-\t\ttry {\n-\t\t\tGZIPOutputStream gzipOutputStream = new GZIPOutputStream(byteArrayOutputStream);\n-\t\t\tgzipOutputStream.write(content);\n-\t\t\tgzipOutputStream.close();\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t\treturn byteArrayOutputStream.toByteArray();\n-\t}\n-\n-\tprivate static byte[] decompress(byte[] contentBytes) {\n-\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n-\t\ttry {\n-\t\t\tGZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(contentBytes));\n-\t\t\tint buffer = 0;\n-\t\t\twhile ((buffer = gzip.read()) != -1) {\n-\t\t\t\tout.write(buffer);\n-\t\t\t}\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t\treturn out.toByteArray();\n-\t}\n-\n-\tpublic void clear(final EntityPlayer player) {\n-\t\tnew Thread() {\n-\n-\t\t\t@Override\n-\t\t\tpublic void run() {\n-\t\t\t\tserverCompressorThread.clear(player);\n-\t\t\t\tserverDecompressorThread.clear(player);\n-\t\t\t}\n-\t\t}.start();\n-\t}\n }"
        },
        {
          "filename": "common/network/rs485/logisticspipes/util/LPDataIOWrapper.java",
          "status": "modified",
          "additions": 60,
          "deletions": 50,
          "patch": "@@ -89,16 +89,7 @@ private static LPDataIOWrapper getInstance(ByteBuf buffer) {\n \t\t}\n \t}\n \n-\tprivate void unsetBuffer() {\n-\t\tif (localBuffer.hasMemoryAddress()) {\n-\t\t\tif (--reference < 1) {\n-\t\t\t\tBUFFER_WRAPPER_MAP.remove(localBuffer.memoryAddress());\n-\t\t\t}\n-\t\t}\n-\t\tlocalBuffer = null;\n-\t}\n-\n-\tpublic static void provideData(byte[] data, LPDataInputConsumer dataInputConsumer) throws IOException {\n+\tpublic static void provideData(byte[] data, LPDataInputConsumer dataInputConsumer) {\n \t\tByteBuf dataBuffer = wrappedBuffer(data);\n \t\tLPDataIOWrapper lpData = getInstance(dataBuffer);\n \n@@ -108,7 +99,7 @@ public static void provideData(byte[] data, LPDataInputConsumer dataInputConsume\n \t\tdataBuffer.release();\n \t}\n \n-\tpublic static byte[] collectData(LPDataOutputConsumer dataOutputConsumer) throws IOException {\n+\tpublic static byte[] collectData(LPDataOutputConsumer dataOutputConsumer) {\n \t\tByteBuf dataBuffer = buffer();\n \t\tLPDataIOWrapper lpData = getInstance(dataBuffer);\n \n@@ -123,24 +114,33 @@ public static byte[] collectData(LPDataOutputConsumer dataOutputConsumer) throws\n \t\treturn data;\n \t}\n \n-\tpublic static void provideData(ByteBuf dataBuffer, LPDataInputConsumer dataInputConsumer) throws IOException {\n+\tpublic static void provideData(ByteBuf dataBuffer, LPDataInputConsumer dataInputConsumer) {\n \t\tLPDataIOWrapper lpData = getInstance(dataBuffer);\n \n \t\tdataInputConsumer.accept(lpData);\n \n \t\tlpData.unsetBuffer();\n \t}\n \n-\tpublic static void writeData(ByteBuf dataBuffer, LPDataOutputConsumer dataOutputConsumer) throws IOException {\n+\tpublic static void writeData(ByteBuf dataBuffer, LPDataOutputConsumer dataOutputConsumer) {\n \t\tLPDataIOWrapper lpData = getInstance(dataBuffer);\n \n \t\tdataOutputConsumer.accept(lpData);\n \n \t\tlpData.unsetBuffer();\n \t}\n \n+\tprivate void unsetBuffer() {\n+\t\tif (localBuffer.hasMemoryAddress()) {\n+\t\t\tif (--reference < 1) {\n+\t\t\t\tBUFFER_WRAPPER_MAP.remove(localBuffer.memoryAddress());\n+\t\t\t}\n+\t\t}\n+\t\tlocalBuffer = null;\n+\t}\n+\n \t@Override\n-\tpublic void writeByteArray(byte[] arr) throws IOException {\n+\tpublic void writeByteArray(byte[] arr) {\n \t\tif (arr == null) {\n \t\t\twriteInt(-1);\n \t\t} else {\n@@ -150,7 +150,7 @@ public void writeByteArray(byte[] arr) throws IOException {\n \t}\n \n \t@Override\n-\tpublic byte[] readByteArray() throws IOException {\n+\tpublic byte[] readByteArray() {\n \t\tfinal int length = readInt();\n \t\tif (length == -1) {\n \t\t\treturn null;\n@@ -205,7 +205,7 @@ public void writeBoolean(boolean b) {\n \t}\n \n \t@Override\n-\tpublic void writeUTF(String s) throws IOException {\n+\tpublic void writeUTF(String s) {\n \t\tif (s == null) {\n \t\t\twriteInt(-1);\n \t\t} else {\n@@ -223,7 +223,7 @@ public void writeForgeDirection(ForgeDirection direction) {\n \t}\n \n \t@Override\n-\tpublic void writeExitRoute(ExitRoute route) throws IOException {\n+\tpublic void writeExitRoute(ExitRoute route) {\n \t\twriteIRouter(route.destination);\n \t\twriteIRouter(route.root);\n \t\twriteForgeDirection(route.exitOrientation);\n@@ -257,7 +257,7 @@ public void writeLPPosition(DoubleCoordinates pos) {\n \t}\n \n \t@Override\n-\tpublic <T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) throws IOException {\n+\tpublic <T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) {\n \t\tT[] parts = clazz.getEnumConstants();\n \t\tfinal int length = parts.length / 8 + (parts.length % 8 == 0 ? 0 : 1);\n \t\tbyte[] set = new byte[length];\n@@ -272,25 +272,30 @@ public <T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) t\n \t}\n \n \t@Override\n-\tpublic void writeBitSet(BitSet bits) throws IOException {\n+\tpublic void writeBitSet(BitSet bits) {\n \t\tif (bits == null) {\n \t\t\tthrow new NullPointerException(\"BitSet may not be null\");\n \t\t}\n \t\twriteByteArray(bits.toByteArray());\n \t}\n \n \t@Override\n-\tpublic void writeNBTTagCompound(NBTTagCompound tag) throws IOException {\n+\tpublic void writeNBTTagCompound(NBTTagCompound tag) {\n \t\tif (tag == null) {\n \t\t\twriteByte(0);\n \t\t} else {\n \t\t\twriteByte(1);\n-\t\t\tCompressedStreamTools.write(tag, new ByteBufOutputStream(localBuffer));\n+\t\t\ttry {\n+\t\t\t\tCompressedStreamTools.write(tag, new ByteBufOutputStream(localBuffer));\n+\t\t\t} catch (IOException e) {\n+\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void writeBooleanArray(boolean[] arr) throws IOException {\n+\tpublic void writeBooleanArray(boolean[] arr) {\n \t\tif (arr == null) {\n \t\t\twriteInt(-1);\n \t\t} else if (arr.length == 0) {\n@@ -319,7 +324,7 @@ public void writeIntArray(int[] arr) {\n \t}\n \n \t@Override\n-\tpublic void writeItemStack(ItemStack itemstack) throws IOException {\n+\tpublic void writeItemStack(ItemStack itemstack) {\n \t\tif (itemstack == null) {\n \t\t\twriteInt(0);\n \t\t} else {\n@@ -331,7 +336,7 @@ public void writeItemStack(ItemStack itemstack) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void writeItemIdentifier(ItemIdentifier item) throws IOException {\n+\tpublic void writeItemIdentifier(ItemIdentifier item) {\n \t\tif (item == null) {\n \t\t\twriteInt(0);\n \t\t} else {\n@@ -342,7 +347,7 @@ public void writeItemIdentifier(ItemIdentifier item) throws IOException {\n \t}\n \n \t@Override\n-\tpublic void writeItemIdentifierStack(ItemIdentifierStack stack) throws IOException {\n+\tpublic void writeItemIdentifierStack(ItemIdentifierStack stack) {\n \t\tif (stack == null) {\n \t\t\twriteInt(-1);\n \t\t} else {\n@@ -352,7 +357,7 @@ public void writeItemIdentifierStack(ItemIdentifierStack stack) throws IOExcepti\n \t}\n \n \t@Override\n-\tpublic <T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler) throws IOException {\n+\tpublic <T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler) {\n \t\tif (collection == null) {\n \t\t\twriteInt(-1);\n \t\t} else {\n@@ -364,7 +369,7 @@ public <T> void writeCollection(Collection<T> collection, IWriteListObject<T> ha\n \t}\n \n \t@Override\n-\tpublic void writeOrderInfo(IOrderInfoProvider order) throws IOException {\n+\tpublic void writeOrderInfo(IOrderInfoProvider order) {\n \t\twriteItemIdentifierStack(order.getAsDisplayItem());\n \t\twriteInt(order.getRouterId());\n \t\twriteBoolean(order.isFinished());\n@@ -382,7 +387,7 @@ public <T extends Enum<T>> void writeEnum(T obj) {\n \t}\n \n \t@Override\n-\tpublic void writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList) throws IOException {\n+\tpublic void writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList) {\n \t\twriteCollection(orderList, LPDataOutput::writeOrderInfo);\n \t\twriteCollection(orderList.getSubOrders(), LPDataOutput::writeLinkedLogisticsOrderList);\n \t}\n@@ -410,12 +415,12 @@ public void writeLongArray(long[] arr) {\n \t}\n \n \t@Override\n-\tpublic void writeResource(IResource res) throws IOException {\n+\tpublic void writeResource(IResource res) {\n \t\tResourceNetwork.writeResource(this, res);\n \t}\n \n \t@Override\n-\tpublic void writeBytes(byte[] arr) throws IOException {\n+\tpublic void writeBytes(byte[] arr) {\n \t\tlocalBuffer.writeBytes(arr);\n \t}\n \n@@ -455,7 +460,7 @@ public boolean readBoolean() {\n \t}\n \n \t@Override\n-\tpublic String readUTF() throws IOException {\n+\tpublic String readUTF() {\n \t\tbyte[] arr = readByteArray();\n \t\tif (arr == null) {\n \t\t\treturn null;\n@@ -475,7 +480,7 @@ public ForgeDirection readForgeDirection() {\n \t}\n \n \t@Override\n-\tpublic ExitRoute readExitRoute(World world) throws IOException {\n+\tpublic ExitRoute readExitRoute(World world) {\n \t\tIRouter destination = readIRouter(world);\n \t\tIRouter root = readIRouter(world);\n \t\tForgeDirection exitOri = readForgeDirection();\n@@ -513,7 +518,7 @@ public DoubleCoordinates readLPPosition() {\n \t}\n \n \t@Override\n-\tpublic <T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) throws IOException {\n+\tpublic <T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) {\n \t\tEnumSet<T> types = EnumSet.noneOf(clazz);\n \t\tbyte[] arr = readByteArray();\n \t\tif (arr != null) {\n@@ -528,7 +533,7 @@ public <T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) throws IOExcep\n \t}\n \n \t@Override\n-\tpublic BitSet readBitSet() throws IOException {\n+\tpublic BitSet readBitSet() {\n \t\tbyte[] arr = readByteArray();\n \t\tif (arr == null) {\n \t\t\treturn new BitSet();\n@@ -538,17 +543,22 @@ public BitSet readBitSet() throws IOException {\n \t}\n \n \t@Override\n-\tpublic NBTTagCompound readNBTTagCompound() throws IOException {\n+\tpublic NBTTagCompound readNBTTagCompound() {\n \t\tboolean isEmpty = (readByte() == 0);\n \t\tif (isEmpty) {\n \t\t\treturn null;\n \t\t}\n \n-\t\treturn CompressedStreamTools.func_152456_a(new ByteBufInputStream(localBuffer), NBTSizeTracker.field_152451_a);\n+\t\ttry {\n+\t\t\treturn CompressedStreamTools.func_152456_a(new ByteBufInputStream(localBuffer), NBTSizeTracker.field_152451_a);\n+\t\t} catch (IOException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\treturn null;\n \t}\n \n \t@Override\n-\tpublic boolean[] readBooleanArray() throws IOException {\n+\tpublic boolean[] readBooleanArray() {\n \t\tfinal int bitCount = localBuffer.readInt();\n \t\tif (bitCount == -1) {\n \t\t\treturn null;\n@@ -581,14 +591,14 @@ public int[] readIntArray() {\n \t}\n \n \t@Override\n-\tpublic byte[] readBytes(int length) throws IOException {\n+\tpublic byte[] readBytes(int length) {\n \t\tbyte[] arr = new byte[length];\n \t\tlocalBuffer.readBytes(arr, 0, length);\n \t\treturn arr;\n \t}\n \n \t@Override\n-\tpublic ItemStack readItemStack() throws IOException {\n+\tpublic ItemStack readItemStack() {\n \t\tfinal int itemId = readInt();\n \t\tif (itemId == 0) {\n \t\t\treturn null;\n@@ -602,7 +612,7 @@ public ItemStack readItemStack() throws IOException {\n \t}\n \n \t@Override\n-\tpublic ItemIdentifier readItemIdentifier() throws IOException {\n+\tpublic ItemIdentifier readItemIdentifier() {\n \t\tfinal int itemId = readInt();\n \t\tif (itemId == 0) {\n \t\t\treturn null;\n@@ -614,7 +624,7 @@ public ItemIdentifier readItemIdentifier() throws IOException {\n \t}\n \n \t@Override\n-\tpublic ItemIdentifierStack readItemIdentifierStack() throws IOException {\n+\tpublic ItemIdentifierStack readItemIdentifierStack() {\n \t\tint stacksize = readInt();\n \t\tif (stacksize == -1) {\n \t\t\treturn null;\n@@ -625,7 +635,7 @@ public ItemIdentifierStack readItemIdentifierStack() throws IOException {\n \t}\n \n \t@Override\n-\tpublic <T> ArrayList<T> readArrayList(IReadListObject<T> reader) throws IOException {\n+\tpublic <T> ArrayList<T> readArrayList(IReadListObject<T> reader) {\n \t\tint size = readInt();\n \t\tif (size == -1) {\n \t\t\treturn null;\n@@ -639,7 +649,7 @@ public <T> ArrayList<T> readArrayList(IReadListObject<T> reader) throws IOExcept\n \t}\n \n \t@Override\n-\tpublic <T> LinkedList<T> readLinkedList(IReadListObject<T> reader) throws IOException {\n+\tpublic <T> LinkedList<T> readLinkedList(IReadListObject<T> reader) {\n \t\tint size = readInt();\n \t\tif (size == -1) {\n \t\t\treturn null;\n@@ -653,7 +663,7 @@ public <T> LinkedList<T> readLinkedList(IReadListObject<T> reader) throws IOExce\n \t}\n \n \t@Override\n-\tpublic <T> Set<T> readSet(IReadListObject<T> handler) throws IOException {\n+\tpublic <T> Set<T> readSet(IReadListObject<T> handler) {\n \t\tint size = readInt();\n \t\tif (size == -1) {\n \t\t\treturn null;\n@@ -667,7 +677,7 @@ public <T> Set<T> readSet(IReadListObject<T> handler) throws IOException {\n \t}\n \n \t@Override\n-\tpublic IOrderInfoProvider readOrderInfo() throws IOException {\n+\tpublic IOrderInfoProvider readOrderInfo() {\n \t\tItemIdentifierStack stack = readItemIdentifierStack();\n \t\tint routerId = localBuffer.readInt();\n \t\tboolean isFinished = localBuffer.readBoolean();\n@@ -686,26 +696,26 @@ public <T extends Enum<T>> T readEnum(Class<T> clazz) {\n \t}\n \n \t@Override\n-\tpublic LinkedLogisticsOrderList readLinkedLogisticsOrderList() throws IOException {\n+\tpublic LinkedLogisticsOrderList readLinkedLogisticsOrderList() {\n \t\tLinkedLogisticsOrderList list = new LinkedLogisticsOrderList();\n \n \t\tList<IOrderInfoProvider> orderInfoProviders = readArrayList(LPDataInput::readOrderInfo);\n \t\tif (orderInfoProviders == null) {\n-\t\t\tthrow new IOException(\"Expected order info provider list\");\n+\t\t\tthrow new NullPointerException(\"Expected order info provider list\");\n \t\t}\n \t\tlist.addAll(orderInfoProviders);\n \n \t\tList<LinkedLogisticsOrderList> orderLists = readArrayList(LPDataInput::readLinkedLogisticsOrderList);\n \t\tif (orderLists == null) {\n-\t\t\tthrow new IOException(\"Expected logistics order list\");\n+\t\t\tthrow new NullPointerException(\"Expected logistics order list\");\n \t\t}\n \t\tlist.getSubOrders().addAll(orderLists);\n \n \t\treturn list;\n \t}\n \n \t@Override\n-\tpublic ByteBuf readByteBuf() throws IOException {\n+\tpublic ByteBuf readByteBuf() {\n \t\tbyte[] arr = readByteArray();\n \t\tif (arr == null) {\n \t\t\tthrow new NullPointerException(\"Buffer may not be null, but read null\");\n@@ -727,7 +737,7 @@ public long[] readLongArray() {\n \t}\n \n \t@Override\n-\tpublic IResource readResource() throws IOException {\n+\tpublic IResource readResource() {\n \t\treturn ResourceNetwork.readResource(this);\n \t}\n }"
        },
        {
          "filename": "common/network/rs485/logisticspipes/util/LPDataInput.java",
          "status": "modified",
          "additions": 32,
          "deletions": 33,
          "patch": "@@ -20,7 +20,6 @@\n \n package network.rs485.logisticspipes.util;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.EnumSet;\n@@ -46,97 +45,97 @@\n \n public interface LPDataInput {\n \n-\tbyte[] readByteArray() throws IOException;\n+\tbyte[] readByteArray();\n \n \t/**\n \t * @see java.io.DataInput#readByte()\n \t */\n-\tbyte readByte() throws IOException;\n+\tbyte readByte();\n \n \t/**\n \t * @see java.io.DataInput#readShort()\n \t */\n-\tshort readShort() throws IOException;\n+\tshort readShort();\n \n \t/**\n \t * @see java.io.DataInput#readInt()\n \t */\n-\tint readInt() throws IOException;\n+\tint readInt();\n \n \t/**\n \t * @see java.io.DataInput#readLong()\n \t */\n-\tlong readLong() throws IOException;\n+\tlong readLong();\n \n \t/**\n \t * @see java.io.DataInput#readFloat()\n \t */\n-\tfloat readFloat() throws IOException;\n+\tfloat readFloat();\n \n \t/**\n \t * @see java.io.DataInput#readDouble()\n \t */\n-\tdouble readDouble() throws IOException;\n+\tdouble readDouble();\n \n \t/**\n \t * @see java.io.DataInput#readBoolean()\n \t */\n-\tboolean readBoolean() throws IOException;\n+\tboolean readBoolean();\n \n \t/**\n \t * @see java.io.DataInput#readUTF()\n \t */\n-\tString readUTF() throws IOException;\n+\tString readUTF();\n \n-\tForgeDirection readForgeDirection() throws IOException;\n+\tForgeDirection readForgeDirection();\n \n-\tExitRoute readExitRoute(World world) throws IOException;\n+\tExitRoute readExitRoute(World world);\n \n \t/**\n \t * @return ServerRouter or ClientRouter depending where we are\n \t */\n-\tIRouter readIRouter(World world) throws IOException;\n+\tIRouter readIRouter(World world);\n \n-\tDoubleCoordinates readLPPosition() throws IOException;\n+\tDoubleCoordinates readLPPosition();\n \n-\t<T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz) throws IOException;\n+\t<T extends Enum<T>> EnumSet<T> readEnumSet(Class<T> clazz);\n \n-\tBitSet readBitSet() throws IOException;\n+\tBitSet readBitSet();\n \n-\tNBTTagCompound readNBTTagCompound() throws IOException;\n+\tNBTTagCompound readNBTTagCompound();\n \n-\tboolean[] readBooleanArray() throws IOException;\n+\tboolean[] readBooleanArray();\n \n-\tint[] readIntArray() throws IOException;\n+\tint[] readIntArray();\n \n-\tbyte[] readBytes(int length) throws IOException;\n+\tbyte[] readBytes(int length);\n \n-\tItemIdentifier readItemIdentifier() throws IOException;\n+\tItemIdentifier readItemIdentifier();\n \n-\tItemIdentifierStack readItemIdentifierStack() throws IOException;\n+\tItemIdentifierStack readItemIdentifierStack();\n \n-\tItemStack readItemStack() throws IOException;\n+\tItemStack readItemStack();\n \n-\t<T> ArrayList<T> readArrayList(IReadListObject<T> reader) throws IOException;\n+\t<T> ArrayList<T> readArrayList(IReadListObject<T> reader);\n \n-\t<T> LinkedList<T> readLinkedList(IReadListObject<T> reader) throws IOException;\n+\t<T> LinkedList<T> readLinkedList(IReadListObject<T> reader);\n \n-\t<T> Set<T> readSet(IReadListObject<T> handler) throws IOException;\n+\t<T> Set<T> readSet(IReadListObject<T> handler);\n \n-\tIOrderInfoProvider readOrderInfo() throws IOException;\n+\tIOrderInfoProvider readOrderInfo();\n \n-\t<T extends Enum<T>> T readEnum(Class<T> clazz) throws IOException;\n+\t<T extends Enum<T>> T readEnum(Class<T> clazz);\n \n-\tLinkedLogisticsOrderList readLinkedLogisticsOrderList() throws IOException;\n+\tLinkedLogisticsOrderList readLinkedLogisticsOrderList();\n \n-\tByteBuf readByteBuf() throws IOException;\n+\tByteBuf readByteBuf();\n \n-\tlong[] readLongArray() throws IOException;\n+\tlong[] readLongArray();\n \n-\tIResource readResource() throws IOException;\n+\tIResource readResource();\n \n \tinterface LPDataInputConsumer {\n \n-\t\tvoid accept(LPDataInput dataInput) throws IOException;\n+\t\tvoid accept(LPDataInput dataInput);\n \t}\n }"
        },
        {
          "filename": "common/network/rs485/logisticspipes/util/LPDataOutput.java",
          "status": "modified",
          "additions": 32,
          "deletions": 33,
          "patch": "@@ -20,7 +20,6 @@\n \n package network.rs485.logisticspipes.util;\n \n-import java.io.IOException;\n import java.util.BitSet;\n import java.util.Collection;\n import java.util.EnumSet;\n@@ -46,93 +45,93 @@ public interface LPDataOutput {\n \t/**\n \t * @see java.io.DataOutput#writeByte(int)\n \t */\n-\tvoid writeByte(int b) throws IOException;\n+\tvoid writeByte(int b);\n \n-\tvoid writeByte(byte b) throws IOException;\n+\tvoid writeByte(byte b);\n \n \t/**\n \t * @see java.io.DataOutput#writeShort(int)\n \t */\n-\tvoid writeShort(int s) throws IOException;\n+\tvoid writeShort(int s);\n \n-\tvoid writeShort(short s) throws IOException;\n+\tvoid writeShort(short s);\n \n \t/**\n \t * @see java.io.DataOutput#writeInt(int)\n \t */\n-\tvoid writeInt(int i) throws IOException;\n+\tvoid writeInt(int i);\n \n \t/**\n \t * @see java.io.DataOutput#writeLong(long)\n \t */\n-\tvoid writeLong(long l) throws IOException;\n+\tvoid writeLong(long l);\n \n \t/**\n \t * @see java.io.DataOutput#writeFloat(float)\n \t */\n-\tvoid writeFloat(float f) throws IOException;\n+\tvoid writeFloat(float f);\n \n \t/**\n \t * @see java.io.DataOutput#writeDouble(double)\n \t */\n-\tvoid writeDouble(double d) throws IOException;\n+\tvoid writeDouble(double d);\n \n \t/**\n \t * @see java.io.DataOutput#writeBoolean(boolean)\n \t */\n-\tvoid writeBoolean(boolean b) throws IOException;\n+\tvoid writeBoolean(boolean b);\n \n \t/**\n \t * Uses UTF-8 and not UTF-16.\n \t *\n \t * @see java.io.DataOutput#writeUTF(String)\n \t */\n-\tvoid writeUTF(String s) throws IOException;\n+\tvoid writeUTF(String s);\n \n-\tvoid writeByteArray(byte[] arr) throws IOException;\n+\tvoid writeByteArray(byte[] arr);\n \n-\tvoid writeByteBuf(ByteBuf buffer) throws IOException;\n+\tvoid writeByteBuf(ByteBuf buffer);\n \n-\tvoid writeIntArray(int[] arr) throws IOException;\n+\tvoid writeIntArray(int[] arr);\n \n-\tvoid writeLongArray(long[] arr) throws IOException;\n+\tvoid writeLongArray(long[] arr);\n \n-\tvoid writeBooleanArray(boolean[] arr) throws IOException;\n+\tvoid writeBooleanArray(boolean[] arr);\n \n-\tvoid writeForgeDirection(ForgeDirection direction) throws IOException;\n+\tvoid writeForgeDirection(ForgeDirection direction);\n \n-\tvoid writeExitRoute(ExitRoute route) throws IOException;\n+\tvoid writeExitRoute(ExitRoute route);\n \n-\tvoid writeIRouter(IRouter router) throws IOException;\n+\tvoid writeIRouter(IRouter router);\n \n-\tvoid writeLPPosition(DoubleCoordinates pos) throws IOException;\n+\tvoid writeLPPosition(DoubleCoordinates pos);\n \n-\t<T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz) throws IOException;\n+\t<T extends Enum<T>> void writeEnumSet(EnumSet<T> types, Class<T> clazz);\n \n-\tvoid writeBitSet(BitSet bits) throws IOException;\n+\tvoid writeBitSet(BitSet bits);\n \n-\tvoid writeNBTTagCompound(NBTTagCompound tag) throws IOException;\n+\tvoid writeNBTTagCompound(NBTTagCompound tag);\n \n-\tvoid writeItemStack(ItemStack itemstack) throws IOException;\n+\tvoid writeItemStack(ItemStack itemstack);\n \n-\tvoid writeItemIdentifier(ItemIdentifier item) throws IOException;\n+\tvoid writeItemIdentifier(ItemIdentifier item);\n \n-\tvoid writeItemIdentifierStack(ItemIdentifierStack stack) throws IOException;\n+\tvoid writeItemIdentifierStack(ItemIdentifierStack stack);\n \n-\t<T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler) throws IOException;\n+\t<T> void writeCollection(Collection<T> collection, IWriteListObject<T> handler);\n \n-\tvoid writeOrderInfo(IOrderInfoProvider order) throws IOException;\n+\tvoid writeOrderInfo(IOrderInfoProvider order);\n \n-\t<T extends Enum<T>> void writeEnum(T obj) throws IOException;\n+\t<T extends Enum<T>> void writeEnum(T obj);\n \n-\tvoid writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList) throws IOException;\n+\tvoid writeLinkedLogisticsOrderList(LinkedLogisticsOrderList orderList);\n \n-\tvoid writeResource(IResource res) throws IOException;\n+\tvoid writeResource(IResource res);\n \n-\tvoid writeBytes(byte[] arr) throws IOException;\n+\tvoid writeBytes(byte[] arr);\n \n \tinterface LPDataOutputConsumer {\n \n-\t\tvoid accept(LPDataOutput dataOutput) throws IOException;\n+\t\tvoid accept(LPDataOutput dataOutput);\n \t}\n }"
        },
        {
          "filename": "test/network/rs485/logisticspipes/util/LPDataIOWrapperTest.java",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -618,7 +618,8 @@ public void testArrayList() throws Exception {\n \t\tarrayList.add(\"dr\u00f6lf\");\n \t\tarrayList.add(\"text\");\n \n-\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(arrayList, LPDataOutput::writeUTF));\n+\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(arrayList,\n+\t\t\t\t(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));\n \n \t\tLPDataIOWrapper.provideData(data, input -> {\n \t\t\tassertEquals(arrayList, input.readArrayList(LPDataInput::readUTF));\n@@ -629,7 +630,8 @@ public void testArrayList() throws Exception {\n \n \t@Test\n \tpublic void testNullArrayList() throws Exception {\n-\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null, LPDataOutput::writeUTF));\n+\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null,\n+\t\t\t\t(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));\n \n \t\tLPDataIOWrapper.provideData(data, input -> {\n \t\t\tassertEquals(null, input.readArrayList(LPDataInput::readUTF));\n@@ -644,7 +646,8 @@ public void testLinkedList() throws Exception {\n \t\tlinkedList.add(\"dr\u00f6lf\");\n \t\tlinkedList.add(\"text\");\n \n-\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(linkedList, LPDataOutput::writeUTF));\n+\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(linkedList,\n+\t\t\t\t(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));\n \n \t\tLPDataIOWrapper.provideData(data, input -> {\n \t\t\tassertEquals(linkedList, input.readLinkedList(LPDataInput::readUTF));\n@@ -655,7 +658,8 @@ public void testLinkedList() throws Exception {\n \n \t@Test\n \tpublic void testNullLinkedList() throws Exception {\n-\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null, LPDataOutput::writeUTF));\n+\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null,\n+\t\t\t\t(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));\n \n \t\tLPDataIOWrapper.provideData(data, input -> {\n \t\t\tassertEquals(null, input.readLinkedList(LPDataInput::readUTF));\n@@ -670,7 +674,8 @@ public void testSet() throws Exception {\n \t\tset.add(\"dr\u00f6lf\");\n \t\tset.add(\"text\");\n \n-\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(set, LPDataOutput::writeUTF));\n+\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(set,\n+\t\t\t\t(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));\n \n \t\tLPDataIOWrapper.provideData(data, input -> {\n \t\t\tassertEquals(set, input.readSet(LPDataInput::readUTF));\n@@ -681,7 +686,8 @@ public void testSet() throws Exception {\n \n \t@Test\n \tpublic void testNullSet() throws Exception {\n-\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null, LPDataOutput::writeUTF));\n+\t\tbyte[] data = LPDataIOWrapper.collectData(output -> output.writeCollection(null,\n+\t\t\t\t(logisticspipes.network.IWriteListObject<String>) LPDataOutput::writeUTF));\n \n \t\tLPDataIOWrapper.provideData(data, input -> {\n \t\t\tassertEquals(null, input.readSet(LPDataInput::readUTF));"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 5,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 37,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "122ea1c99f12d11a5ff37cd30db6ff08eeba681a",
            "date": "2023-11-08T00:23:52Z",
            "author_login": "bziemons"
          },
          {
            "sha": "ddafc3fa6de6b8ef0ce4771e52bb13f0a2ec8f3e",
            "date": "2023-11-07T23:57:54Z",
            "author_login": "bziemons"
          },
          {
            "sha": "e8788eaecc62c4ae4819493f5bcf45a7a725e9c7",
            "date": "2023-11-07T23:35:24Z",
            "author_login": "bziemons"
          },
          {
            "sha": "1d427ccea7cbc5a299fc1c082e52ffda3f13fedd",
            "date": "2023-10-28T13:25:49Z",
            "author_login": "bziemons"
          },
          {
            "sha": "6362f9e3d1981d39c0f362778b4439bddbcae458",
            "date": "2023-10-28T13:24:14Z",
            "author_login": "bziemons"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-502",
    "description": "Logistics Pipes is a modification (a.k.a. mod) for the computer game Minecraft Java Edition. The mod used Java's `ObjectInputStream#readObject` on untrusted data coming from clients or servers over the network resulting in possible remote code execution when sending specifically crafted network packets after connecting. The affected versions were released between 2013 and 2016 and the issue (back then unknown) was fixed in 2016 by a refactoring of the network IO code.  \nThe issue is present in all Logistics Pipes versions ranged from 0.7.0.91 prior to 0.10.0.71, which were downloaded from different platforms summing up to multi-million downloads. For Minecraft version 1.7.10 the issue was fixed in build 0.10.0.71. Everybody on Minecraft 1.7.10 should check their version number of Logistics Pipes in their modlist and update, if the version number is smaller than 0.10.0.71. Any newer supported Minecraft version (like 1.12.2) never had a Logistics Pipes version with vulnerable code. The best available workaround for vulnerable versions is to play in singleplayer only or update to newer Minecraft versions and modpacks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-08-04T17:15:10.563",
    "last_modified": "2024-11-21T08:14:03.660",
    "fix_date": "2016-05-18T11:27:11Z"
  },
  "references": [
    {
      "url": "https://github.com/RS485/LogisticsPipes/commit/39a90b8f2d1a2bcc512ec68c3e139f1dac07aa56",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/RS485/LogisticsPipes/commit/527c4f4fb028e9afab29d4e639935010ad7be9e7",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/RS485/LogisticsPipes/security/advisories/GHSA-mcp7-xf3v-25x3",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/RS485/LogisticsPipes/commit/39a90b8f2d1a2bcc512ec68c3e139f1dac07aa56",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/RS485/LogisticsPipes/commit/527c4f4fb028e9afab29d4e639935010ad7be9e7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/RS485/LogisticsPipes/security/advisories/GHSA-mcp7-xf3v-25x3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:04.296219",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "LogisticsPipes",
    "owner": "RS485",
    "created_at": "2013-01-23T21:19:57Z",
    "updated_at": "2025-01-25T14:24:37Z",
    "pushed_at": "2023-11-08T00:29:05Z",
    "size": 24275,
    "stars": 239,
    "forks": 129,
    "open_issues": 243,
    "watchers": 239,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "dev"
    ],
    "languages": {
      "Java": 3373837,
      "Kotlin": 849157
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:50:16.612937"
  }
}