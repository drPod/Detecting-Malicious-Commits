{
  "cve_id": "CVE-2023-39522",
  "github_data": {
    "repository": "goauthentik/authentik",
    "fix_commit": "aa874dd92a770d5f8cd8f265b7cdd31cd73a4599",
    "related_commits": [
      "aa874dd92a770d5f8cd8f265b7cdd31cd73a4599",
      "aa874dd92a770d5f8cd8f265b7cdd31cd73a4599"
    ],
    "patch_url": "https://github.com/goauthentik/authentik/commit/aa874dd92a770d5f8cd8f265b7cdd31cd73a4599.patch",
    "fix_commit_details": {
      "sha": "aa874dd92a770d5f8cd8f265b7cdd31cd73a4599",
      "commit_date": "2023-08-29T17:07:49Z",
      "author": {
        "login": "BeryJu",
        "type": "User",
        "stats": {
          "total_commits": 8915,
          "average_weekly_commits": 27.60061919504644,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 278
        }
      },
      "commit_message": {
        "title": "security: fix CVE-2023-39522 (#6665)",
        "length": 314,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 120,
        "additions": 116,
        "deletions": 4
      },
      "files": [
        {
          "filename": "authentik/stages/email/stage.py",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@\n from rest_framework.serializers import ValidationError\n \n from authentik.flows.challenge import Challenge, ChallengeResponse, ChallengeTypes\n-from authentik.flows.models import FlowToken\n+from authentik.flows.models import FlowDesignation, FlowToken\n from authentik.flows.planner import PLAN_CONTEXT_IS_RESTORED, PLAN_CONTEXT_PENDING_USER\n from authentik.flows.stage import ChallengeStageView\n from authentik.flows.views.executor import QS_KEY_TOKEN\n@@ -82,6 +82,11 @@ def send_email(self):\n         \"\"\"Helper function that sends the actual email. Implies that you've\n         already checked that there is a pending user.\"\"\"\n         pending_user = self.get_pending_user()\n+        if not pending_user.pk and self.executor.flow.designation == FlowDesignation.RECOVERY:\n+            # Pending user does not have a primary key, and we're in a recovery flow,\n+            # which means the user entered an invalid identifier, so we pretend to send the\n+            # email, to not disclose if the user exists\n+            return\n         email = self.executor.plan.context.get(PLAN_CONTEXT_EMAIL_OVERRIDE, None)\n         if not email:\n             email = pending_user.email"
        },
        {
          "filename": "authentik/stages/email/tests/test_sending.py",
          "status": "modified",
          "additions": 37,
          "deletions": 2,
          "patch": "@@ -5,18 +5,20 @@\n from django.core import mail\n from django.core.mail.backends.locmem import EmailBackend\n from django.urls import reverse\n-from rest_framework.test import APITestCase\n \n+from authentik.core.models import User\n from authentik.core.tests.utils import create_test_admin_user, create_test_flow\n from authentik.events.models import Event, EventAction\n from authentik.flows.markers import StageMarker\n from authentik.flows.models import FlowDesignation, FlowStageBinding\n from authentik.flows.planner import PLAN_CONTEXT_PENDING_USER, FlowPlan\n+from authentik.flows.tests import FlowTestCase\n from authentik.flows.views.executor import SESSION_KEY_PLAN\n+from authentik.lib.generators import generate_id\n from authentik.stages.email.models import EmailStage\n \n \n-class TestEmailStageSending(APITestCase):\n+class TestEmailStageSending(FlowTestCase):\n     \"\"\"Email tests\"\"\"\n \n     def setUp(self):\n@@ -44,6 +46,13 @@ def test_pending_user(self):\n         ):\n             response = self.client.post(url)\n             self.assertEqual(response.status_code, 200)\n+            self.assertStageResponse(\n+                response,\n+                self.flow,\n+                response_errors={\n+                    \"non_field_errors\": [{\"string\": \"email-sent\", \"code\": \"email-sent\"}]\n+                },\n+            )\n             self.assertEqual(len(mail.outbox), 1)\n             self.assertEqual(mail.outbox[0].subject, \"authentik\")\n             events = Event.objects.filter(action=EventAction.EMAIL_SENT)\n@@ -54,6 +63,32 @@ def test_pending_user(self):\n             self.assertEqual(event.context[\"to_email\"], [self.user.email])\n             self.assertEqual(event.context[\"from_email\"], \"system@authentik.local\")\n \n+    def test_pending_fake_user(self):\n+        \"\"\"Test with pending (fake) user\"\"\"\n+        self.flow.designation = FlowDesignation.RECOVERY\n+        self.flow.save()\n+        plan = FlowPlan(flow_pk=self.flow.pk.hex, bindings=[self.binding], markers=[StageMarker()])\n+        plan.context[PLAN_CONTEXT_PENDING_USER] = User(username=generate_id())\n+        session = self.client.session\n+        session[SESSION_KEY_PLAN] = plan\n+        session.save()\n+\n+        url = reverse(\"authentik_api:flow-executor\", kwargs={\"flow_slug\": self.flow.slug})\n+        with patch(\n+            \"authentik.stages.email.models.EmailStage.backend_class\",\n+            PropertyMock(return_value=EmailBackend),\n+        ):\n+            response = self.client.post(url)\n+            self.assertEqual(response.status_code, 200)\n+            self.assertStageResponse(\n+                response,\n+                self.flow,\n+                response_errors={\n+                    \"non_field_errors\": [{\"string\": \"email-sent\", \"code\": \"email-sent\"}]\n+                },\n+            )\n+            self.assertEqual(len(mail.outbox), 0)\n+\n     def test_send_error(self):\n         \"\"\"Test error during sending (sending will be retried)\"\"\"\n         plan = FlowPlan(flow_pk=self.flow.pk.hex, bindings=[self.binding], markers=[StageMarker()])"
        },
        {
          "filename": "authentik/stages/identification/stage.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -118,8 +118,12 @@ def validate(self, attrs: dict[str, Any]) -> dict[str, Any]:\n                 username=uid_field,\n                 email=uid_field,\n             )\n+            self.pre_user = self.stage.executor.plan.context[PLAN_CONTEXT_PENDING_USER]\n             if not current_stage.show_matched_user:\n                 self.stage.executor.plan.context[PLAN_CONTEXT_PENDING_USER_IDENTIFIER] = uid_field\n+            if self.stage.executor.flow.designation == FlowDesignation.RECOVERY:\n+                # When used in a recovery flow, always continue to not disclose if a user exists\n+                return attrs\n             raise ValidationError(\"Failed to authenticate.\")\n         self.pre_user = pre_user\n         if not current_stage.password_stage:"
        },
        {
          "filename": "authentik/stages/identification/tests.py",
          "status": "modified",
          "additions": 33,
          "deletions": 1,
          "patch": "@@ -188,7 +188,7 @@ def test_enrollment_flow(self):\n             ],\n         )\n \n-    def test_recovery_flow(self):\n+    def test_link_recovery_flow(self):\n         \"\"\"Test that recovery flow is linked correctly\"\"\"\n         flow = create_test_flow()\n         self.stage.recovery_flow = flow\n@@ -226,6 +226,38 @@ def test_recovery_flow(self):\n             ],\n         )\n \n+    def test_recovery_flow_invalid_user(self):\n+        \"\"\"Test that an invalid user can proceed in a recovery flow\"\"\"\n+        self.flow.designation = FlowDesignation.RECOVERY\n+        self.flow.save()\n+        response = self.client.get(\n+            reverse(\"authentik_api:flow-executor\", kwargs={\"flow_slug\": self.flow.slug}),\n+        )\n+        self.assertStageResponse(\n+            response,\n+            self.flow,\n+            component=\"ak-stage-identification\",\n+            user_fields=[\"email\"],\n+            password_fields=False,\n+            show_source_labels=False,\n+            primary_action=\"Continue\",\n+            sources=[\n+                {\n+                    \"challenge\": {\n+                        \"component\": \"xak-flow-redirect\",\n+                        \"to\": \"/source/oauth/login/test/\",\n+                        \"type\": ChallengeTypes.REDIRECT.value,\n+                    },\n+                    \"icon_url\": \"/static/authentik/sources/default.svg\",\n+                    \"name\": \"test\",\n+                }\n+            ],\n+        )\n+        form_data = {\"uid_field\": generate_id()}\n+        url = reverse(\"authentik_api:flow-executor\", kwargs={\"flow_slug\": self.flow.slug})\n+        response = self.client.post(url, form_data)\n+        self.assertEqual(response.status_code, 200)\n+\n     def test_api_validate(self):\n         \"\"\"Test API validation\"\"\"\n         self.assertTrue("
        },
        {
          "filename": "website/docs/releases/2023/v2023.5.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -152,6 +152,10 @@ image:\n \n -   \\*: fix [CVE-2023-36456](../security/CVE-2023-36456), Reported by [@thijsa](https://github.com/thijsa)\n \n+## Fixed in 2023.5.6\n+\n+-   \\*: fix [CVE-2023-39522](../security/CVE-2023-39522), Reported by [@markrassamni](https://github.com/markrassamni)\n+\n ## API Changes\n \n #### What's Changed"
        },
        {
          "filename": "website/docs/releases/2023/v2023.6.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -88,6 +88,10 @@ helm upgrade authentik authentik/authentik -f values.yaml --version ^2023.6\n -   sources/ldap: fix more errors (#6191)\n -   sources/ldap: fix page size (#6187)\n \n+## Fixed in 2023.6.2\n+\n+-   \\*: fix [CVE-2023-39522](../security/CVE-2023-39522), Reported by [@markrassamni](https://github.com/markrassamni)\n+\n ## API Changes\n \n #### What's New"
        },
        {
          "filename": "website/docs/security/CVE-2023-39522.md",
          "status": "added",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -0,0 +1,27 @@\n+# CVE-2023-39522\n+\n+_Reported by [@markrassamni](https://github.com/markrassamni)_\n+\n+## Username enumeration attack\n+\n+### Summary\n+\n+Using a recovery flow with an identification stage an attacker is able to determine if a username exists.\n+\n+### Patches\n+\n+authentik 2023.5.6 and 2023.6.2 fix this issue.\n+\n+### Impact\n+\n+Only setups configured with a recovery flow are impacted by this.\n+\n+### Details\n+\n+An attacker can easily enumerate and check users' existence using the recovery flow, as a clear message is shown when a user doesn't exist. Depending on configuration this can either be done by username, email, or both.\n+\n+### For more information\n+\n+If you have any questions or comments about this advisory:\n+\n+-   Email us at [security@goauthentik.io](mailto:security@goauthentik.io)"
        },
        {
          "filename": "website/sidebars.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -361,6 +361,7 @@ const docsSidebar = {\n             },\n             items: [\n                 \"security/policy\",\n+                \"security/CVE-2023-39522\",\n                 \"security/CVE-2023-36456\",\n                 \"security/2023-06-cure53\",\n                 \"security/CVE-2023-26481\","
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c19a8873563a5d337bde6865a7a69d4bd1a6d83f",
            "date": "2025-01-14T19:15:02Z",
            "author_login": "BeryJu"
          },
          {
            "sha": "09931bcbc20f4527acfcd9046fe1caeeda446c50",
            "date": "2025-01-14T14:56:03Z",
            "author_login": "BeryJu"
          },
          {
            "sha": "7a4293bf178ac7c6a2222593feef560053e16cbc",
            "date": "2025-01-14T12:40:25Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6e569acd845bbcc79c50f40542bd729dd2243840",
            "date": "2025-01-14T12:40:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "02c69d767f02a9d887a9892128aa8e2e30011c38",
            "date": "2025-01-14T12:39:54Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-203",
    "description": "goauthentik is an open-source Identity Provider. In affected versions using a recovery flow with an identification stage an attacker is able to determine if a username exists. Only setups configured with a recovery flow are impacted by this. Anyone with a user account on a system with the recovery flow described above is susceptible to having their username/email revealed as existing. An attacker can easily enumerate and check users' existence using the recovery flow, as a clear message is shown when a user doesn't exist. Depending on configuration this can either be done by username, email, or both. This issue has been addressed in versions 2023.5.6 and 2023.6.2. Users are advised to upgrade. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-29T18:15:08.753",
    "last_modified": "2024-11-21T08:15:35.757",
    "fix_date": "2023-08-29T17:07:49Z"
  },
  "references": [
    {
      "url": "https://github.com/goauthentik/authentik/commit/aa874dd92a770d5f8cd8f265b7cdd31cd73a4599",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/goauthentik/authentik/security/advisories/GHSA-vmf9-6pcv-xr87",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/goauthentik/authentik/commit/aa874dd92a770d5f8cd8f265b7cdd31cd73a4599",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/goauthentik/authentik/security/advisories/GHSA-vmf9-6pcv-xr87",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.483450",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "authentik",
    "owner": "goauthentik",
    "created_at": "2019-12-30T09:19:48Z",
    "updated_at": "2025-01-14T12:40:29Z",
    "pushed_at": "2025-01-14T13:17:29Z",
    "size": 348330,
    "stars": 14458,
    "forks": 984,
    "open_issues": 728,
    "watchers": 14458,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 3995415,
      "TypeScript": 2892221,
      "Go": 308962,
      "MDX": 124483,
      "JavaScript": 69953,
      "HTML": 24617,
      "Rust": 22748,
      "CSS": 19762,
      "Dockerfile": 15501,
      "Makefile": 9222,
      "Shell": 7042,
      "PHP": 1149
    },
    "commit_activity": {
      "total_commits_last_year": 3169,
      "avg_commits_per_week": 60.94230769230769,
      "days_active_last_year": 295
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:32:32.687051"
  }
}