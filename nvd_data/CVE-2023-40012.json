{
  "cve_id": "CVE-2023-40012",
  "github_data": {
    "repository": "trailofbits/uthenticode",
    "fix_commit": "caeb1eb62412605f71bd96ce9bb9420644b6db53",
    "related_commits": [
      "caeb1eb62412605f71bd96ce9bb9420644b6db53",
      "caeb1eb62412605f71bd96ce9bb9420644b6db53"
    ],
    "patch_url": "https://github.com/trailofbits/uthenticode/commit/caeb1eb62412605f71bd96ce9bb9420644b6db53.patch",
    "fix_commit_details": {
      "sha": "caeb1eb62412605f71bd96ce9bb9420644b6db53",
      "commit_date": "2023-07-28T20:44:36Z",
      "author": {
        "login": "woodruffw",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "src: bump OpenSSL, EKU check (#78)",
        "length": 379,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 54,
        "additions": 52,
        "deletions": 2
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -49,7 +49,7 @@ complete.\n ## Building\n \n *\u03bcthenticode* depends on [pe-parse](https://github.com/trailofbits/pe-parse)\n-and OpenSSL 1.1.0, which are installed via `vcpkg` by following these steps:\n+and OpenSSL 3.0 or higher, which are installed via `vcpkg` by following these steps:\n \n ```bash\n cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=<vcpkg-path>/scripts/buildsystems/vcpkg.cmake"
        },
        {
          "filename": "src/CMakeLists.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@ project(uthenticode)\n \n find_package(pe-parse REQUIRED)\n find_package(\n-  OpenSSL 1.1\n+  OpenSSL 3.0\n   COMPONENTS Crypto\n   REQUIRED\n )"
        },
        {
          "filename": "src/uthenticode.cpp",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@\n #include <openssl/crypto.h>\n #include <openssl/err.h>\n #include <openssl/x509.h>\n+#include <openssl/x509v3.h>\n \n #include <algorithm>\n #include <array>\n@@ -209,6 +210,32 @@ bool SignedData::verify_signature() const {\n     return false;\n   }\n \n+  auto *signers_stack_ptr = PKCS7_get0_signers(p7_, nullptr, 0);\n+  if (signers_stack_ptr == nullptr) {\n+    return false;\n+  }\n+  auto signers_stack = impl::STACK_OF_X509_ptr(signers_stack_ptr, impl::SK_X509_free);\n+\n+  /* NOTE(ww): Authenticode specification, page 13: the signer must have the\n+   * codeSigning EKU, **or** no member of the signer's chain may have it.\n+   *\n+   * The check below is more strict than that: **every** signer must have\n+   * the codeSigning EKU, and we don't check the embedded chain (since\n+   * we can't do full chain verification anyways).\n+   */\n+  for (auto i = 0; i < sk_X509_num(signers_stack.get()); ++i) {\n+    auto *signer = sk_X509_value(signers_stack.get(), i);\n+\n+    /* NOTE(ww): Ths should really be X509_check_purpose with\n+     * X509_PURPOSE_CODE_SIGN, but this is inexplicably not present\n+     * in even the latest releases of OpenSSL as of 2023-05.\n+     */\n+    auto xku_flags = X509_get_extended_key_usage(signer);\n+    if (!(xku_flags & XKU_CODE_SIGN)) {\n+      return false;\n+    }\n+  }\n+\n   /* NOTE(ww): What happens below is a bit dumb: we convert our SpcIndirectDataContent back\n    * into DER form so that we can unwrap its ASN.1 sequence and pass the underlying data\n    * to PKCS7_verify for verification. This displays our intent a little more clearly than"
        },
        {
          "filename": "test/assets/A_SSLippery_Slope.exe",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "test/helpers.h",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -95,3 +95,19 @@ class AuthNest32PlusTest : public ::testing::Test {\n \n   peparse::parsed_pe *pe{nullptr};\n };\n+\n+class MissingEKUTest : public ::testing::Test {\n+ protected:\n+  void SetUp() override {\n+    auto *file = UTHENTICODE_TEST_ASSETS \"/A_SSLippery_Slope.exe\";\n+\n+    pe = peparse::ParsePEFromFile(file);\n+    ASSERT_TRUE(pe != nullptr);\n+  }\n+\n+  void TearDown() override {\n+    peparse::DestructParsedPE(pe);\n+  }\n+\n+  peparse::parsed_pe *pe{nullptr};\n+};"
        },
        {
          "filename": "test/signeddata-test.cpp",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -116,3 +116,10 @@ TEST_F(AuthNest32PlusTest, SignedData_properties_nested) {\n   ASSERT_STRCASEEQ(checksumstr.c_str(),\n                    \"ddc5b39c4292120745eb86a67eaa331032cc05a0dafaf6e28ec9aa0f189c408d\");\n }\n+\n+TEST_F(MissingEKUTest, SignedData_missing_codesigning_EKU) {\n+  auto certs = uthenticode::read_certs(pe);\n+  auto signed_data = certs[0].as_signed_data();\n+\n+  ASSERT_FALSE(signed_data->verify_signature());\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "19005f0af5c0d1669e4f21599e6da1b5ce72c37f",
            "date": "2024-10-28T15:01:50Z",
            "author_login": "hugmyndakassi"
          },
          {
            "sha": "f81d3a8ce1fd3a370f04b4af36b14a896c75de73",
            "date": "2024-09-30T15:04:56Z",
            "author_login": "hugmyndakassi"
          },
          {
            "sha": "cad1bfc713dd31a00de1c3fcdb887dfb812f70ad",
            "date": "2024-03-18T19:09:34Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "21cff4d2edfc0c5a7c5b24da92618c34f4406ecb",
            "date": "2024-03-11T19:29:02Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "46bb57d516a40b3f7788082570738f1e107a532c",
            "date": "2024-02-12T19:26:24Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-325",
    "description": "uthenticode is a small cross-platform library for partially verifying Authenticode digital signatures. Versions of uthenticode prior to the 2.x series did not check Extended Key Usages in certificates, in violation of the Authenticode X.509 certificate profile. As a result, a malicious user could produce a \"signed\" PE file that uthenticode would verify and consider valid using an X.509 certificate that isn't entitled to produce code signatures (e.g., a SSL certificate). By design, uthenticode does not perform full-chain validation. However, the absence of EKU validation was an unintended oversight. The 2.0.0 release series includes EKU checks. There are no workarounds to this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-08-09T16:15:10.060",
    "last_modified": "2024-11-21T08:18:30.833",
    "fix_date": "2023-07-28T20:44:36Z"
  },
  "references": [
    {
      "url": "https://github.com/trailofbits/uthenticode/commit/caeb1eb62412605f71bd96ce9bb9420644b6db53",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/trailofbits/uthenticode/pull/78",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/trailofbits/uthenticode/security/advisories/GHSA-gm2f-j4rj-6xqj",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/trailofbits/uthenticode/commit/caeb1eb62412605f71bd96ce9bb9420644b6db53",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/trailofbits/uthenticode/pull/78",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/trailofbits/uthenticode/security/advisories/GHSA-gm2f-j4rj-6xqj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.412963",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "uthenticode",
    "owner": "trailofbits",
    "created_at": "2020-04-11T02:36:25Z",
    "updated_at": "2025-01-04T04:08:17Z",
    "pushed_at": "2024-10-28T15:01:50Z",
    "size": 595,
    "stars": 141,
    "forks": 33,
    "open_issues": 10,
    "watchers": 141,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C++": 57835,
      "CMake": 5911,
      "Makefile": 929,
      "Shell": 892,
      "Dockerfile": 805
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:54:20.446118"
  }
}