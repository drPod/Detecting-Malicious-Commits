{
  "cve_id": "CVE-2023-40014",
  "github_data": {
    "repository": "OpenZeppelin/openzeppelin-contracts",
    "fix_commit": "9445f96223041abf2bf08daa56f8da50b674cbcd",
    "related_commits": [
      "9445f96223041abf2bf08daa56f8da50b674cbcd",
      "e4435eed757d4309436b1e06608e97b6d6e2fdb5",
      "9445f96223041abf2bf08daa56f8da50b674cbcd",
      "e4435eed757d4309436b1e06608e97b6d6e2fdb5"
    ],
    "patch_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd.patch",
    "fix_commit_details": {
      "sha": "9445f96223041abf2bf08daa56f8da50b674cbcd",
      "commit_date": "2023-07-27T20:30:41Z",
      "author": {
        "login": "frangio",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Adjust ERC2771Context._msgData for msg.data.length < 20 (#4484)",
        "length": 63,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 31,
        "additions": 26,
        "deletions": 5
      },
      "files": [
        {
          "filename": ".changeset/warm-guests-rule.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+'openzeppelin-solidity': patch\n+---\n+\n+`ERC2771Context`: Prevent revert in `_msgData()` when a call originating from a trusted forwarder is not long enough to contain the request signer address (i.e. `msg.data.length` is less than 20 bytes). Return the full calldata in that case."
        },
        {
          "filename": "contracts/metatx/ERC2771Context.sol",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -34,7 +34,7 @@ abstract contract ERC2771Context is Context {\n     }\n \n     function _msgData() internal view virtual override returns (bytes calldata) {\n-        if (isTrustedForwarder(msg.sender)) {\n+        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n             return msg.data[:msg.data.length - 20];\n         } else {\n             return super._msgData();"
        },
        {
          "filename": "contracts/mocks/ContextMock.sol",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -16,6 +16,12 @@ contract ContextMock is Context {\n     function msgData(uint256 integerValue, string memory stringValue) public {\n         emit Data(_msgData(), integerValue, stringValue);\n     }\n+\n+    event DataShort(bytes data);\n+\n+    function msgDataShort() public {\n+        emit DataShort(_msgData());\n+    }\n }\n \n contract ContextMockCaller {"
        },
        {
          "filename": "test/metatx/ERC2771Context.test.js",
          "status": "modified",
          "additions": 14,
          "deletions": 4,
          "patch": "@@ -12,7 +12,7 @@ const ContextMockCaller = artifacts.require('ContextMockCaller');\n const { shouldBehaveLikeRegularContext } = require('../utils/Context.behavior');\n \n contract('ERC2771Context', function (accounts) {\n-  const [, anotherAccount] = accounts;\n+  const [, trustedForwarder] = accounts;\n \n   const MAX_UINT48 = web3.utils.toBN(1).shln(48).subn(1).toString();\n \n@@ -84,11 +84,11 @@ contract('ERC2771Context', function (accounts) {\n \n       it('returns the original sender when calldata length is less than 20 bytes (address length)', async function () {\n         // The forwarder doesn't produce calls with calldata length less than 20 bytes\n-        const recipient = await ERC2771ContextMock.new(anotherAccount);\n+        const recipient = await ERC2771ContextMock.new(trustedForwarder);\n \n-        const { receipt } = await recipient.msgSender({ from: anotherAccount });\n+        const { receipt } = await recipient.msgSender({ from: trustedForwarder });\n \n-        await expectEvent(receipt, 'Sender', { sender: anotherAccount });\n+        await expectEvent(receipt, 'Sender', { sender: trustedForwarder });\n       });\n     });\n \n@@ -117,5 +117,15 @@ contract('ERC2771Context', function (accounts) {\n         await expectEvent.inTransaction(tx, ERC2771ContextMock, 'Data', { data, integerValue, stringValue });\n       });\n     });\n+\n+    it('returns the full original data when calldata length is less than 20 bytes (address length)', async function () {\n+      // The forwarder doesn't produce calls with calldata length less than 20 bytes\n+      const recipient = await ERC2771ContextMock.new(trustedForwarder);\n+\n+      const { receipt } = await recipient.msgDataShort({ from: trustedForwarder });\n+\n+      const data = recipient.contract.methods.msgDataShort().encodeABI();\n+      await expectEvent(receipt, 'DataShort', { data });\n+    });\n   });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "96b40d02c3fe836ffa19b6ed9217c3719c996f78",
            "date": "2025-01-10T20:59:14Z",
            "author_login": "ernestognw"
          },
          {
            "sha": "13781c1f4982908d40d8936f58c36d5227e168a7",
            "date": "2025-01-10T16:43:28Z",
            "author_login": "Amxx"
          },
          {
            "sha": "2e27a0c74b228215d73be24a90260789c9cdb4ae",
            "date": "2025-01-10T16:43:11Z",
            "author_login": "arr00"
          },
          {
            "sha": "352ab136878f652658f8f4e3d70b4087563653c4",
            "date": "2025-01-10T01:48:32Z",
            "author_login": "Amxx"
          },
          {
            "sha": "7b74442c5e87ea51dde41c7f18a209fa5154f1a4",
            "date": "2025-01-09T16:16:31Z",
            "author_login": "github-actions[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-116",
    "description": "OpenZeppelin Contracts is a library for secure smart contract development. Starting in version 4.0.0 and prior to version 4.9.3, contracts using `ERC2771Context` along with a custom trusted forwarder may see `_msgSender` return `address(0)` in calls that originate from the forwarder with calldata shorter than 20 bytes. This combination of circumstances does not appear to be common, in particular it is not the case for `MinimalForwarder` from OpenZeppelin Contracts, or any deployed forwarder the team is aware of, given that the signer address is appended to all calls that originate from these forwarders. The problem has been patched in v4.9.3.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-10T20:15:10.867",
    "last_modified": "2024-11-21T08:18:31.067",
    "fix_date": "2023-07-27T20:30:41Z"
  },
  "references": [
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.419008",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openzeppelin-contracts",
    "owner": "OpenZeppelin",
    "created_at": "2016-08-01T20:54:54Z",
    "updated_at": "2025-01-14T13:39:35Z",
    "pushed_at": "2025-01-13T16:34:19Z",
    "size": 47412,
    "stars": 25188,
    "forks": 11862,
    "open_issues": 289,
    "watchers": 25188,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "audit/M-01",
      "audit/2023-03",
      "audit/2023-06",
      "audit/2023-07-10",
      "audit/2023-07-24",
      "audit/2023-08-01",
      "audit/2023-08-07",
      "docs-org",
      "docs-v2.x",
      "docs-v3.x",
      "docs-v4.x",
      "docs-v5.x",
      "master",
      "next-v5.0",
      "release-v2.3.0",
      "release-v2.4.0",
      "release-v2.5.0",
      "release-v3.0.0",
      "release-v3.1.0",
      "release-v3.2.0-solc-0.7",
      "release-v3.2.0",
      "release-v3.3-solc-0.7"
    ],
    "languages": {
      "Solidity": 1279163,
      "JavaScript": 1230104,
      "Python": 170889,
      "Ruby": 95064,
      "Shell": 9208,
      "Makefile": 1714
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:42:13.725104"
  }
}