{
  "cve_id": "CVE-2023-40017",
  "github_data": {
    "repository": "GeoNode/geonode",
    "fix_commit": "a9eebae80cb362009660a1fd49e105e7cdb499b9",
    "related_commits": [
      "a9eebae80cb362009660a1fd49e105e7cdb499b9",
      "a9eebae80cb362009660a1fd49e105e7cdb499b9"
    ],
    "patch_url": "https://github.com/GeoNode/geonode/commit/a9eebae80cb362009660a1fd49e105e7cdb499b9.patch",
    "fix_commit_details": {
      "sha": "a9eebae80cb362009660a1fd49e105e7cdb499b9",
      "commit_date": "2023-08-23T15:32:13Z",
      "author": {
        "login": "afabiani",
        "type": "User",
        "stats": {
          "total_commits": 776,
          "average_weekly_commits": 1.0130548302872062,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 123
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-rmxg-6qqf-x8mr",
        "length": 235,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 80,
        "additions": 78,
        "deletions": 2
      },
      "files": [
        {
          "filename": "geonode/proxy/tests.py",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -178,6 +178,52 @@ class Response:\n             },\n         )\n \n+    def test_proxy_url_forgery(self):\n+        \"\"\"The GeoNode Proxy should preserve the original request headers.\"\"\"\n+        import geonode.proxy.views\n+        from urllib.parse import urlsplit\n+\n+        class Response:\n+            status_code = 200\n+            content = \"Hello World\"\n+            headers = {\n+                \"Content-Type\": \"text/plain\",\n+                \"Vary\": \"Authorization, Accept-Language, Cookie, origin\",\n+                \"X-Content-Type-Options\": \"nosniff\",\n+                \"X-XSS-Protection\": \"1; mode=block\",\n+                \"Referrer-Policy\": \"same-origin\",\n+                \"X-Frame-Options\": \"SAMEORIGIN\",\n+                \"Content-Language\": \"en-us\",\n+                \"Content-Length\": \"119\",\n+                \"Content-Disposition\": 'attachment; filename=\"filename.tif\"',\n+            }\n+\n+        request_mock = MagicMock()\n+        request_mock.return_value = (Response(), None)\n+\n+        # Non-Legit requests attempting SSRF\n+        geonode.proxy.views.http_client.request = request_mock\n+        url = f\"http://example.org\\@%23{urlsplit(settings.SITEURL).hostname}\"\n+\n+        response = self.client.get(f\"{self.proxy_url}?url={url}\")\n+        self.assertEqual(response.status_code, 403)\n+\n+        url = f\"http://125.126.127.128\\@%23{urlsplit(settings.SITEURL).hostname}\"\n+\n+        response = self.client.get(f\"{self.proxy_url}?url={url}\")\n+        self.assertEqual(response.status_code, 403)\n+\n+        # Legit requests using the local host (SITEURL)\n+        url = f\"/\\@%23{urlsplit(settings.SITEURL).hostname}\"\n+\n+        response = self.client.get(f\"{self.proxy_url}?url={url}\")\n+        self.assertEqual(response.status_code, 200)\n+\n+        url = f\"{settings.SITEURL}\\@%23{urlsplit(settings.SITEURL).hostname}\"\n+\n+        response = self.client.get(f\"{self.proxy_url}?url={url}\")\n+        self.assertEqual(response.status_code, 200)\n+\n \n class DownloadResourceTestCase(GeoNodeBaseTestSupport):\n     def setUp(self):"
        },
        {
          "filename": "geonode/proxy/views.py",
          "status": "modified",
          "additions": 9,
          "deletions": 2,
          "patch": "@@ -40,7 +40,14 @@\n from geonode.upload.models import Upload\n from geonode.base.models import ResourceBase\n from geonode.storage.manager import storage_manager\n-from geonode.utils import resolve_object, check_ogc_backend, get_headers, http_client, json_response\n+from geonode.utils import (\n+    resolve_object,\n+    check_ogc_backend,\n+    get_headers,\n+    http_client,\n+    json_response,\n+    extract_ip_or_domain,\n+)\n from geonode.base.enumerations import LINK_TYPES as _LT\n \n from geonode import geoserver  # noqa\n@@ -130,7 +137,7 @@ def proxy(\n             _remote_host = urlsplit(_s.base_url).hostname\n             PROXY_ALLOWED_HOSTS += (_remote_host,)\n \n-        if not validate_host(url.hostname, PROXY_ALLOWED_HOSTS):\n+        if not validate_host(extract_ip_or_domain(raw_url), PROXY_ALLOWED_HOSTS):\n             return HttpResponse(\n                 \"DEBUG is set to False but the host of the path provided to the proxy service\"\n                 \" is not in the PROXY_ALLOWED_HOSTS setting.\","
        },
        {
          "filename": "geonode/utils.py",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -34,6 +34,7 @@\n import requests\n import tempfile\n import importlib\n+import ipaddress\n import itertools\n import traceback\n import subprocess\n@@ -1930,6 +1931,26 @@ def build_absolute_uri(url):\n     return url\n \n \n+def extract_ip_or_domain(url):\n+    ip_regex = re.compile(\"^(?:http\\:\\/\\/|https\\:\\/\\/)(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\")\n+    domain_regex = re.compile(\"^(?:http\\:\\/\\/|https\\:\\/\\/)([a-zA-Z0-9.-]+)\")\n+\n+    match = ip_regex.findall(url)\n+    if len(match):\n+        ip_address = match[0]\n+        try:\n+            ipaddress.ip_address(ip_address)  # Validate the IP address\n+            return ip_address\n+        except ValueError:\n+            pass\n+\n+    match = domain_regex.findall(url)\n+    if len(match):\n+        return match[0]\n+\n+    return None\n+\n+\n def get_xpath_value(\n     element: etree.Element, xpath_expression: str, nsmap: typing.Optional[dict] = None\n ) -> typing.Optional[str]:"
        },
        {
          "filename": "requirements.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -27,6 +27,7 @@ rdflib==6.3.2\n smart_open==6.3.0\n PyMuPDF==1.22.5\n pathvalidate==3.1.0\n+ipaddress==1.0.23\n \n # Django Apps\n django-allauth==0.54.0"
        },
        {
          "filename": "setup.cfg",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -53,6 +53,7 @@ install_requires =\n     smart_open==6.3.0\n     PyMuPDF==1.22.5\n     pathvalidate==3.1.0\n+    ipaddress==1.0.23\n \n     # Django Apps\n     django-allauth==0.54.0"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "91f32c64e8d8e6f159368243d8dfac96fe5a8aca",
            "date": "2024-12-06T10:50:40Z",
            "author_login": "mattiagiupponi"
          },
          {
            "sha": "eb352184f5948103f680a0f33600cdf1a7fbad5c",
            "date": "2024-12-02T13:20:03Z",
            "author_login": "mattiagiupponi"
          },
          {
            "sha": "051efddcc61037600c6cc722819572f22a5b1c80",
            "date": "2024-11-29T13:39:23Z",
            "author_login": "mattiagiupponi"
          },
          {
            "sha": "993364a44c8afa1085dccd2366794789b36a2b39",
            "date": "2024-11-26T14:56:26Z",
            "author_login": "mattiagiupponi"
          },
          {
            "sha": "0b792cf7d575684050469c382c57636bb7d41b22",
            "date": "2024-11-22T17:05:49Z",
            "author_login": "mattiagiupponi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "GeoNode is an open source platform that facilitates the creation, sharing, and collaborative use of geospatial data. In versions 3.2.0 through 4.1.2, the endpoint `/proxy/?url=` does not properly protect against server-side request forgery. This allows an attacker to port scan internal hosts and request information from internal hosts. A patch is available at commit a9eebae80cb362009660a1fd49e105e7cdb499b9.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-24T23:15:09.097",
    "last_modified": "2024-11-21T08:18:31.310",
    "fix_date": "2023-08-23T15:32:13Z"
  },
  "references": [
    {
      "url": "https://github.com/GeoNode/geonode/commit/a9eebae80cb362009660a1fd49e105e7cdb499b9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/GeoNode/geonode/security/advisories/GHSA-rmxg-6qqf-x8mr",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/GeoNode/geonode/commit/a9eebae80cb362009660a1fd49e105e7cdb499b9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/GeoNode/geonode/security/advisories/GHSA-rmxg-6qqf-x8mr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.470287",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "geonode",
    "owner": "GeoNode",
    "created_at": "2010-06-03T18:14:47Z",
    "updated_at": "2025-01-13T06:44:38Z",
    "pushed_at": "2025-01-14T15:06:36Z",
    "size": 462743,
    "stars": 1483,
    "forks": 1129,
    "open_issues": 356,
    "watchers": 1483,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.6.x",
      "2.8.x",
      "2.10.x",
      "3.2.x",
      "3.3.x",
      "4.0.x",
      "4.1.x",
      "4.2.x",
      "4.3.x"
    ],
    "languages": {
      "JavaScript": 8573163,
      "Python": 5466464,
      "HTML": 569637,
      "CSS": 547762,
      "XSLT": 67411,
      "Less": 62479,
      "Shell": 54446,
      "Makefile": 4529,
      "SCSS": 3477,
      "Scheme": 3155,
      "Dockerfile": 2891,
      "Gherkin": 529
    },
    "commit_activity": {
      "total_commits_last_year": 436,
      "avg_commits_per_week": 8.384615384615385,
      "days_active_last_year": 108
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:42:19.248585"
  }
}