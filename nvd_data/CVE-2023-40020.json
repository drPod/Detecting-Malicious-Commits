{
  "cve_id": "CVE-2023-40020",
  "github_data": {
    "repository": "PrivateUploader/PrivateUploader",
    "fix_commit": "869657d61e3c7a518177106fe63ea483082b0d3e",
    "related_commits": [
      "869657d61e3c7a518177106fe63ea483082b0d3e",
      "869657d61e3c7a518177106fe63ea483082b0d3e"
    ],
    "patch_url": "https://github.com/PrivateUploader/PrivateUploader/commit/869657d61e3c7a518177106fe63ea483082b0d3e.patch",
    "fix_commit_details": {
      "sha": "869657d61e3c7a518177106fe63ea483082b0d3e",
      "commit_date": "2023-08-12T06:36:33Z",
      "author": {
        "login": "Troplo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "3.2.49",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 43,
        "additions": 32,
        "deletions": 11
      },
      "files": [
        {
          "filename": "app/controllers/v3/admin.controller.ts",
          "status": "modified",
          "additions": 17,
          "deletions": 5,
          "patch": "@@ -35,15 +35,24 @@ import { OauthApp } from \"@app/models/oauthApp.model\"\n \n @Service()\n @Middleware({ type: \"before\" })\n-@UseBefore(Auth(\"*\"))\n class HighLevel implements ExpressMiddlewareInterface {\n   async use(\n     request: RequestAuth,\n     response: Response,\n     next: (err?: any) => any\n   ) {\n-    await authSystem(\"admin\", false, request, response, next)\n-    if (!request.user || !request.user.administrator) throw Errors.ADMIN_ONLY\n+    const session = await authSystem(\n+      \"admin\",\n+      false,\n+      request,\n+      response,\n+      () => {}\n+    )\n+    if (!session || !session.user?.administrator) {\n+      throw Errors.ADMIN_ONLY\n+    } else {\n+      next()\n+    }\n   }\n }\n \n@@ -55,12 +64,15 @@ class LowLevel implements ExpressMiddlewareInterface {\n     response: Response,\n     next: (err?: any) => any\n   ) {\n-    await authSystem(\"admin\", false, request, response, next)\n+    await authSystem(\"admin\", false, request, response, () => {})\n     if (\n       !request.user ||\n       (!request.user?.administrator && !request.user?.moderator)\n-    )\n+    ) {\n       throw Errors.ADMIN_ONLY\n+    } else {\n+      next()\n+    }\n   }\n }\n "
        },
        {
          "filename": "app/controllers/v3/workspace.controller.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -195,9 +195,13 @@ export class WorkspaceControllerV3 {\n     const zip: JSZip = new JSZip()\n     for (const { dataValues } of folder.children) {\n       try {\n-        console.log(type)\n         const data = await this.noteService.downloadNote(dataValues, type)\n-        zip.file(`${dataValues.name.replaceAll(\"/\", \"-\")}.${type}`, data)\n+        zip.file(\n+          `${dataValues.name\n+            .replaceAll(\"/\", \"-\")\n+            .replaceAll(\"\\\\\", \"-\")}.${type}`,\n+          data\n+        )\n       } catch (e) {\n         console.error(e)\n       }"
        },
        {
          "filename": "app/services/admin.service.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -427,7 +427,7 @@ export class AdminService {\n   async updatePlanId(userId: number, planId: number) {\n     const user = await User.findByPk(userId)\n     if (!user) throw Errors.USER_NOT_FOUND\n-    if (userId === 6 && planId === 6) {\n+    if (userId === 6 && planId === 6 && config.officialInstance) {\n       throw Errors.HANDLED_BY_PAYMENT_PROVIDER\n     }\n     await User.update("
        },
        {
          "filename": "app/services/note.service.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -486,10 +486,11 @@ export class NoteService {\n       ]\n     })\n     if (!folder) throw Errors.NOT_FOUND\n+    console.log(folder.name)\n     const workspace = await this.getWorkspace(\n       folder.workspaceId,\n       userId,\n-      \"folder\"\n+      \"workspace\"\n     )\n     if (!workspace) throw Errors.NOT_FOUND\n     return folder"
        },
        {
          "filename": "app/validators/setup.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -12,7 +12,11 @@ export const HostnameValidator = z.string().refine((value) => {\n export const TpuConfigValidator = z.object({\n   hostnameWithProtocol: z.string().url(),\n   hostname: HostnameValidator,\n-  maintenance: z.boolean(),\n+  maintenance: z.object({\n+    enabled: z.boolean(),\n+    message: z.string().nullable().optional(),\n+    statusPage: z.string().nullable().optional()\n+  }),\n   siteName: z.string(),\n   release: z.string(),\n   storage: z.string(),"
        },
        {
          "filename": "frontend/package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"tpu-frontend\",\n-  \"version\": \"3.2.48\",\n+  \"version\": \"3.2.49\",\n   \"private\": true,\n   \"author\": \"Troplo <troplo@troplo.com>\",\n   \"type\": \"module\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "01212835e1bbb7e9e82721d10db6fcb69837e197",
            "date": "2025-01-06T13:19:54Z",
            "author_login": "Troplo"
          },
          {
            "sha": "7a3963cf7514b23e14a34c81d0dd59da03cbcbb1",
            "date": "2025-01-06T12:41:45Z",
            "author_login": "Troplo"
          },
          {
            "sha": "9fe5f03c30361d054a4452b0fa815425926e7c87",
            "date": "2025-01-06T11:27:18Z",
            "author_login": "Troplo"
          },
          {
            "sha": "54230f721065bf301e05c9c3a736bae207b4551f",
            "date": "2025-01-06T11:22:59Z",
            "author_login": "Troplo"
          },
          {
            "sha": "2447d204bb21645872fd401f1d006219ddb280e7",
            "date": "2025-01-06T11:21:56Z",
            "author_login": "Troplo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:H/A:H",
    "cwe_id": "CWE-287",
    "description": "PrivateUploader is an open source image hosting server written in Vue and TypeScript. In affected versions `app/routes/v3/admin.controller.ts` did not correctly verify whether the user was an administrator (High Level) or moderator (Low Level) causing the request to continue processing. The response would be a 403 with ADMIN_ONLY, however, next() would call leading to any updates/changes in the route to process. This issue has been addressed in version 3.2.49. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-14T21:15:13.797",
    "last_modified": "2024-11-21T08:18:31.637",
    "fix_date": "2023-08-12T06:36:33Z"
  },
  "references": [
    {
      "url": "https://github.com/PrivateUploader/PrivateUploader/commit/869657d61e3c7a518177106fe63ea483082b0d3e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/PrivateUploader/PrivateUploader/security/advisories/GHSA-vhrw-2472-rrjx",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/PrivateUploader/PrivateUploader/commit/869657d61e3c7a518177106fe63ea483082b0d3e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/PrivateUploader/PrivateUploader/security/advisories/GHSA-vhrw-2472-rrjx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.430519",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Flowinity",
    "owner": "PrivateUploader",
    "created_at": "2023-01-11T15:28:32Z",
    "updated_at": "2025-01-06T13:20:07Z",
    "pushed_at": "2025-01-06T13:20:13Z",
    "size": 65840,
    "stars": 27,
    "forks": 9,
    "open_issues": 2,
    "watchers": 27,
    "has_security_policy": false,
    "default_branch": "api-v4",
    "protected_branches": [
      "api-v3",
      "bytedefined",
      "electrics01",
      "troplo"
    ],
    "languages": {
      "TypeScript": 2028592,
      "Vue": 1634803,
      "CSS": 66881,
      "JavaScript": 38215,
      "HTML": 26628,
      "SCSS": 14396,
      "EJS": 1248,
      "Dockerfile": 288,
      "Shell": 221
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T22:41:26.129189"
  }
}