{
  "cve_id": "CVE-2023-40030",
  "github_data": {
    "repository": "rust-lang/cargo",
    "fix_commit": "9835622853f08be9a4b58ebe29dcec8f43b64b33",
    "related_commits": [
      "9835622853f08be9a4b58ebe29dcec8f43b64b33",
      "f975722a0eac934c0722f111f107c4ea2f5c4365",
      "9835622853f08be9a4b58ebe29dcec8f43b64b33",
      "f975722a0eac934c0722f111f107c4ea2f5c4365"
    ],
    "patch_url": "https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33.patch",
    "fix_commit_details": {
      "sha": "9835622853f08be9a4b58ebe29dcec8f43b64b33",
      "commit_date": "2023-06-11T19:52:25Z",
      "author": {
        "login": "ehuss",
        "type": "User",
        "stats": {
          "total_commits": 1562,
          "average_weekly_commits": 2.75,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 306
        }
      },
      "commit_message": {
        "title": "Convert valid feature name warning to an error.",
        "length": 47,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 207,
        "additions": 102,
        "deletions": 105
      },
      "files": [
        {
          "filename": "crates/resolver-tests/src/lib.rs",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -179,7 +179,6 @@ pub fn resolve_with_config_raw(\n         used: HashSet::new(),\n     };\n     let summary = Summary::new(\n-        config,\n         pkg_id(\"root\"),\n         deps,\n         &BTreeMap::new(),\n@@ -581,7 +580,6 @@ pub fn pkg_dep<T: ToPkgId>(name: T, dep: Vec<Dependency>) -> Summary {\n         None\n     };\n     Summary::new(\n-        &Config::default().unwrap(),\n         name.to_pkgid(),\n         dep,\n         &BTreeMap::new(),\n@@ -610,7 +608,6 @@ pub fn pkg_loc(name: &str, loc: &str) -> Summary {\n         None\n     };\n     Summary::new(\n-        &Config::default().unwrap(),\n         pkg_id_loc(name, loc),\n         Vec::new(),\n         &BTreeMap::new(),\n@@ -625,7 +622,6 @@ pub fn remove_dep(sum: &Summary, ind: usize) -> Summary {\n     deps.remove(ind);\n     // note: more things will need to be copied over in the future, but it works for now.\n     Summary::new(\n-        &Config::default().unwrap(),\n         sum.package_id(),\n         deps,\n         &BTreeMap::new(),"
        },
        {
          "filename": "src/cargo/core/resolver/version_prefs.rs",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -81,7 +81,6 @@ impl VersionPreferences {\n mod test {\n     use super::*;\n     use crate::core::SourceId;\n-    use crate::util::Config;\n     use std::collections::BTreeMap;\n \n     fn pkgid(name: &str, version: &str) -> PackageId {\n@@ -98,10 +97,8 @@ mod test {\n \n     fn summ(name: &str, version: &str) -> Summary {\n         let pkg_id = pkgid(name, version);\n-        let config = Config::default().unwrap();\n         let features = BTreeMap::new();\n         Summary::new(\n-            &config,\n             pkg_id,\n             Vec::new(),\n             &features,"
        },
        {
          "filename": "src/cargo/core/summary.rs",
          "status": "modified",
          "additions": 48,
          "deletions": 20,
          "patch": "@@ -1,6 +1,6 @@\n use crate::core::{Dependency, PackageId, SourceId};\n use crate::util::interning::InternedString;\n-use crate::util::{CargoResult, Config};\n+use crate::util::CargoResult;\n use anyhow::bail;\n use semver::Version;\n use std::collections::{BTreeMap, HashMap, HashSet};\n@@ -30,7 +30,6 @@ struct Inner {\n \n impl Summary {\n     pub fn new(\n-        config: &Config,\n         pkg_id: PackageId,\n         dependencies: Vec<Dependency>,\n         features: &BTreeMap<InternedString, Vec<InternedString>>,\n@@ -49,7 +48,7 @@ impl Summary {\n                 )\n             }\n         }\n-        let feature_map = build_feature_map(config, pkg_id, features, &dependencies)?;\n+        let feature_map = build_feature_map(pkg_id, features, &dependencies)?;\n         Ok(Summary {\n             inner: Rc::new(Inner {\n                 package_id: pkg_id,\n@@ -140,7 +139,6 @@ impl Hash for Summary {\n /// Checks features for errors, bailing out a CargoResult:Err if invalid,\n /// and creates FeatureValues for each feature.\n fn build_feature_map(\n-    config: &Config,\n     pkg_id: PackageId,\n     features: &BTreeMap<InternedString, Vec<InternedString>>,\n     dependencies: &[Dependency],\n@@ -204,7 +202,7 @@ fn build_feature_map(\n                 feature\n             );\n         }\n-        validate_feature_name(config, pkg_id, feature)?;\n+        validate_feature_name(pkg_id, feature)?;\n         for fv in fvs {\n             // Find data for the referenced dependency...\n             let dep_data = {\n@@ -431,33 +429,63 @@ impl fmt::Display for FeatureValue {\n \n pub type FeatureMap = BTreeMap<InternedString, Vec<FeatureValue>>;\n \n-fn validate_feature_name(config: &Config, pkg_id: PackageId, name: &str) -> CargoResult<()> {\n+fn validate_feature_name(pkg_id: PackageId, name: &str) -> CargoResult<()> {\n     let mut chars = name.chars();\n-    const FUTURE: &str = \"This was previously accepted but is being phased out; \\\n-        it will become a hard error in a future release.\\n\\\n-        For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, \\\n-        and please leave a comment if this will be a problem for your project.\";\n     if let Some(ch) = chars.next() {\n         if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n-            config.shell().warn(&format!(\n+            bail!(\n                 \"invalid character `{}` in feature `{}` in package {}, \\\n                 the first character must be a Unicode XID start character or digit \\\n-                (most letters or `_` or `0` to `9`)\\n\\\n-                {}\",\n-                ch, name, pkg_id, FUTURE\n-            ))?;\n+                (most letters or `_` or `0` to `9`)\",\n+                ch,\n+                name,\n+                pkg_id\n+            );\n         }\n     }\n     for ch in chars {\n         if !(unicode_xid::UnicodeXID::is_xid_continue(ch) || ch == '-' || ch == '+' || ch == '.') {\n-            config.shell().warn(&format!(\n+            bail!(\n                 \"invalid character `{}` in feature `{}` in package {}, \\\n                 characters must be Unicode XID characters, `+`, or `.` \\\n-                (numbers, `+`, `-`, `_`, `.`, or most letters)\\n\\\n-                {}\",\n-                ch, name, pkg_id, FUTURE\n-            ))?;\n+                (numbers, `+`, `-`, `_`, `.`, or most letters)\",\n+                ch,\n+                name,\n+                pkg_id\n+            );\n         }\n     }\n     Ok(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::sources::CRATES_IO_INDEX;\n+    use crate::util::into_url::IntoUrl;\n+\n+    use crate::core::SourceId;\n+\n+    #[test]\n+    fn valid_feature_names() {\n+        let loc = CRATES_IO_INDEX.into_url().unwrap();\n+        let source_id = SourceId::for_registry(&loc).unwrap();\n+        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n+\n+        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n+        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n+        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n+        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n+        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n+        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n+\n+        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n+        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n+        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n+        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n+        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n+        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n+        assert!(validate_feature_name(pkg_id, \"\u24b6\u24b7\u24b8\").is_err());\n+        assert!(validate_feature_name(pkg_id, \"a\u00bc\").is_err());\n+    }\n+}"
        },
        {
          "filename": "src/cargo/sources/registry/index.rs",
          "status": "modified",
          "additions": 12,
          "deletions": 20,
          "patch": "@@ -408,7 +408,6 @@ impl<'cfg> RegistryIndex<'cfg> {\n         'a: 'b,\n     {\n         let source_id = self.source_id;\n-        let config = self.config;\n \n         // First up parse what summaries we have available.\n         let name = InternedString::new(name);\n@@ -425,15 +424,13 @@ impl<'cfg> RegistryIndex<'cfg> {\n             .versions\n             .iter_mut()\n             .filter_map(move |(k, v)| if req.matches(k) { Some(v) } else { None })\n-            .filter_map(\n-                move |maybe| match maybe.parse(config, raw_data, source_id) {\n-                    Ok(summary) => Some(summary),\n-                    Err(e) => {\n-                        info!(\"failed to parse `{}` registry package: {}\", name, e);\n-                        None\n-                    }\n-                },\n-            )\n+            .filter_map(move |maybe| match maybe.parse(raw_data, source_id) {\n+                Ok(summary) => Some(summary),\n+                Err(e) => {\n+                    info!(\"failed to parse `{}` registry package: {}\", name, e);\n+                    None\n+                }\n+            })\n             .filter(move |is| {\n                 if is.v > INDEX_V_MAX {\n                     debug!(\n@@ -714,7 +711,7 @@ impl Summaries {\n                     // allow future cargo implementations to break the\n                     // interpretation of each line here and older cargo will simply\n                     // ignore the new lines.\n-                    let summary = match IndexSummary::parse(config, line, source_id) {\n+                    let summary = match IndexSummary::parse(line, source_id) {\n                         Ok(summary) => summary,\n                         Err(e) => {\n                             // This should only happen when there is an index\n@@ -863,17 +860,12 @@ impl MaybeIndexSummary {\n     /// Does nothing if this is already `Parsed`, and otherwise the `raw_data`\n     /// passed in is sliced with the bounds in `Unparsed` and then actually\n     /// parsed.\n-    fn parse(\n-        &mut self,\n-        config: &Config,\n-        raw_data: &[u8],\n-        source_id: SourceId,\n-    ) -> CargoResult<&IndexSummary> {\n+    fn parse(&mut self, raw_data: &[u8], source_id: SourceId) -> CargoResult<&IndexSummary> {\n         let (start, end) = match self {\n             MaybeIndexSummary::Unparsed { start, end } => (*start, *end),\n             MaybeIndexSummary::Parsed(summary) => return Ok(summary),\n         };\n-        let summary = IndexSummary::parse(config, &raw_data[start..end], source_id)?;\n+        let summary = IndexSummary::parse(&raw_data[start..end], source_id)?;\n         *self = MaybeIndexSummary::Parsed(summary);\n         match self {\n             MaybeIndexSummary::Unparsed { .. } => unreachable!(),\n@@ -894,7 +886,7 @@ impl IndexSummary {\n     ///\n     /// The `line` provided is expected to be valid JSON. It is supposed to be\n     /// a [`IndexPackage`].\n-    fn parse(config: &Config, line: &[u8], source_id: SourceId) -> CargoResult<IndexSummary> {\n+    fn parse(line: &[u8], source_id: SourceId) -> CargoResult<IndexSummary> {\n         // ****CAUTION**** Please be extremely careful with returning errors\n         // from this function. Entries that error are not included in the\n         // index cache, and can cause cargo to get confused when switching\n@@ -925,7 +917,7 @@ impl IndexSummary {\n                 features.entry(name).or_default().extend(values);\n             }\n         }\n-        let mut summary = Summary::new(config, pkgid, deps, &features, links, rust_version)?;\n+        let mut summary = Summary::new(pkgid, deps, &features, links, rust_version)?;\n         summary.set_checksum(cksum);\n         Ok(IndexSummary {\n             summary,"
        },
        {
          "filename": "src/cargo/util/toml/mod.rs",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -2432,7 +2432,6 @@ impl TomlManifest {\n         let empty_features = BTreeMap::new();\n \n         let summary = Summary::new(\n-            config,\n             pkgid,\n             deps,\n             me.features.as_ref().unwrap_or(&empty_features),"
        },
        {
          "filename": "tests/testsuite/features.rs",
          "status": "modified",
          "additions": 42,
          "deletions": 57,
          "patch": "@@ -1937,8 +1937,8 @@ fn nonexistent_required_features() {\n }\n \n #[cargo_test]\n-fn invalid_feature_names_warning() {\n-    // Warnings for more restricted feature syntax.\n+fn invalid_feature_names_error() {\n+    // Errors for more restricted feature syntax.\n     let p = project()\n         .file(\n             \"Cargo.toml\",\n@@ -1948,72 +1948,57 @@ fn invalid_feature_names_warning() {\n                 version = \"0.1.0\"\n \n                 [features]\n-                # Some valid, but unusual names, shouldn't warn.\n-                \"c++17\" = []\n-                \"128bit\" = []\n-                \"_foo\" = []\n-                \"feat-name\" = []\n-                \"feat_name\" = []\n-                \"foo.bar\" = []\n-\n-                # Invalid names.\n+                # Invalid start character.\n                 \"+foo\" = []\n-                \"-foo\" = []\n-                \".foo\" = []\n-                \"foo:bar\" = []\n-                \"foo?\" = []\n-                \"?foo\" = []\n-                \"\u24b6\u24b7\u24b8\" = []\n-                \"a\u00bc\" = []\n             \"#,\n         )\n         .file(\"src/lib.rs\", \"\")\n         .build();\n \n-    // Unfortunately the warnings are duplicated due to the Summary being\n-    // loaded twice (once in the Workspace, and once in PackageRegistry) and\n-    // Cargo does not have a de-duplication system. This should probably be\n-    // OK, since I'm not expecting this to affect anyone.\n     p.cargo(\"check\")\n-        .with_stderr(\"\\\n-[WARNING] invalid character `+` in feature `+foo` in package foo v0.1.0 ([ROOT]/foo), the first character must be a Unicode XID start character or digit (most letters or `_` or `0` to `9`)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `-` in feature `-foo` in package foo v0.1.0 ([ROOT]/foo), the first character must be a Unicode XID start character or digit (most letters or `_` or `0` to `9`)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `.` in feature `.foo` in package foo v0.1.0 ([ROOT]/foo), the first character must be a Unicode XID start character or digit (most letters or `_` or `0` to `9`)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `?` in feature `?foo` in package foo v0.1.0 ([ROOT]/foo), the first character must be a Unicode XID start character or digit (most letters or `_` or `0` to `9`)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `\u00bc` in feature `a\u00bc` in package foo v0.1.0 ([ROOT]/foo), characters must be Unicode XID characters, `+`, or `.` (numbers, `+`, `-`, `_`, `.`, or most letters)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `:` in feature `foo:bar` in package foo v0.1.0 ([ROOT]/foo), characters must be Unicode XID characters, `+`, or `.` (numbers, `+`, `-`, `_`, `.`, or most letters)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `?` in feature `foo?` in package foo v0.1.0 ([ROOT]/foo), characters must be Unicode XID characters, `+`, or `.` (numbers, `+`, `-`, `_`, `.`, or most letters)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `\u24b6` in feature `\u24b6\u24b7\u24b8` in package foo v0.1.0 ([ROOT]/foo), the first character must be a Unicode XID start character or digit (most letters or `_` or `0` to `9`)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `\u24b7` in feature `\u24b6\u24b7\u24b8` in package foo v0.1.0 ([ROOT]/foo), characters must be Unicode XID characters, `+`, or `.` (numbers, `+`, `-`, `_`, `.`, or most letters)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[WARNING] invalid character `\u24b8` in feature `\u24b6\u24b7\u24b8` in package foo v0.1.0 ([ROOT]/foo), characters must be Unicode XID characters, `+`, or `.` (numbers, `+`, `-`, `_`, `.`, or most letters)\n-This was previously accepted but is being phased out; it will become a hard error in a future release.\n-For more information, see issue #8813 <https://github.com/rust-lang/cargo/issues/8813>, and please leave a comment if this will be a problem for your project.\n-[CHECKING] foo v0.1.0 [..]\n-[FINISHED] [..]\n-\")\n+        .with_status(101)\n+        .with_stderr(\n+            \"\\\n+error: failed to parse manifest at `[ROOT]/foo/Cargo.toml`\n+\n+Caused by:\n+  invalid character `+` in feature `+foo` in package foo v0.1.0 ([ROOT]/foo), \\\n+  the first character must be a Unicode XID start character or digit \\\n+  (most letters or `_` or `0` to `9`)\n+\",\n+        )\n+        .run();\n+\n+    p.change_file(\n+        \"Cargo.toml\",\n+        r#\"\n+            [package]\n+            name = \"foo\"\n+            version = \"0.1.0\"\n+\n+            [features]\n+            # Invalid continue character.\n+            \"a&b\" = []\n+        \"#,\n+    );\n+\n+    p.cargo(\"check\")\n+        .with_status(101)\n+        .with_stderr(\n+            \"\\\n+error: failed to parse manifest at `[ROOT]/foo/Cargo.toml`\n+\n+Caused by:\n+  invalid character `&` in feature `a&b` in package foo v0.1.0 ([ROOT]/foo), \\\n+  characters must be Unicode XID characters, `+`, or `.` \\\n+  (numbers, `+`, `-`, `_`, `.`, or most letters)\n+\",\n+        )\n         .run();\n }\n \n #[cargo_test]\n-fn invalid_feature_names_error() {\n+fn invalid_feature_name_slash_error() {\n     // Errors for more restricted feature syntax.\n     let p = project()\n         .file("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "54df3c7dd914a529b4efda61b1efcc10dbde52cc",
            "date": "2025-01-13T19:43:12Z",
            "author_login": "epage"
          },
          {
            "sha": "f15df8fd4990f1b87734343c4e44f3adec3c8b00",
            "date": "2025-01-12T00:34:10Z",
            "author_login": "weihanglo"
          },
          {
            "sha": "31208bdf0b1555761bc1df26db5682674ed264dd",
            "date": "2025-01-11T23:49:16Z",
            "author_login": "AeonSolstice"
          },
          {
            "sha": "5408cc22acc536494c4cc79fad681c18e195b0bf",
            "date": "2025-01-10T21:13:44Z",
            "author_login": "epage"
          },
          {
            "sha": "38105c381dbbd2b223286adebe93749450dfd26b",
            "date": "2025-01-10T20:40:54Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cargo downloads a Rust project\u2019s dependencies and compiles the project. Starting in Rust 1.60.0 and prior to 1.72, Cargo did not escape Cargo feature names when including them in the report generated by `cargo build --timings`. A malicious package included as a dependency may inject nearly arbitrary HTML here, potentially leading to cross-site scripting if the report is subsequently uploaded somewhere. The vulnerability affects users relying on dependencies from git, local paths, or alternative registries. Users who solely depend on crates.io are unaffected.\n\nRust 1.60.0 introduced `cargo build --timings`, which produces a report of how long the different steps of the build process took. It includes lists of Cargo features for each crate. Prior to Rust 1.72, Cargo feature names were allowed to contain almost any characters (with some exceptions as used by the feature syntax), but it would produce a future incompatibility warning about them since Rust 1.49. crates.io is far more stringent about what it considers a valid feature name and has not allowed such feature names. As the feature names were included unescaped in the timings report, they could be used to inject Javascript into the page, for example with a feature name like `features = [\"<img src='' onerror=alert(0)\"]`. If this report were subsequently uploaded to a domain that uses credentials, the injected Javascript could access resources from the website visitor.\n\nThis issue was fixed in Rust 1.72 by turning the future incompatibility warning into an error. Users should still exercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities. crates.io has server-side checks preventing this attack, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as remote code execution is allowed by design there as well.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-24T23:15:09.287",
    "last_modified": "2024-11-21T08:18:33.523",
    "fix_date": "2023-06-11T19:52:25Z"
  },
  "references": [
    {
      "url": "https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-lang/cargo/commit/f975722a0eac934c0722f111f107c4ea2f5c4365",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-lang/cargo/pull/12291",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-lang/cargo/security/advisories/GHSA-wrrj-h57r-vx9p",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-lang/cargo/commit/f975722a0eac934c0722f111f107c4ea2f5c4365",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-lang/cargo/pull/12291",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-lang/cargo/security/advisories/GHSA-wrrj-h57r-vx9p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.470730",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cargo",
    "owner": "rust-lang",
    "created_at": "2014-03-04T23:20:42Z",
    "updated_at": "2025-01-14T14:44:50Z",
    "pushed_at": "2025-01-13T20:16:06Z",
    "size": 57122,
    "stars": 13041,
    "forks": 2465,
    "open_issues": 1510,
    "watchers": 13041,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "rust-1.14.0",
      "rust-1.15.0",
      "rust-1.15.1",
      "rust-1.16.0",
      "rust-1.17.0",
      "rust-1.18.0",
      "rust-1.19.0",
      "rust-1.20.0",
      "rust-1.21.0",
      "rust-1.22.0",
      "rust-1.23.0",
      "rust-1.24.0",
      "rust-1.25.0",
      "rust-1.26.0",
      "rust-1.27.0",
      "rust-1.28.0",
      "rust-1.29.0",
      "rust-1.30.0",
      "rust-1.31.0",
      "rust-1.32.0",
      "rust-1.33.0",
      "rust-1.34.0",
      "rust-1.35.0",
      "rust-1.36.0",
      "rust-1.37.0"
    ],
    "languages": {
      "Rust": 8834367,
      "Roff": 392104,
      "JavaScript": 15190,
      "Shell": 13220,
      "Python": 3902,
      "Dockerfile": 1592,
      "RenderScript": 44
    },
    "commit_activity": {
      "total_commits_last_year": 2869,
      "avg_commits_per_week": 55.17307692307692,
      "days_active_last_year": 337
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:43:32.611341"
  }
}