{
  "cve_id": "CVE-2023-40033",
  "github_data": {
    "repository": "flarum/framework",
    "fix_commit": "d1059c1cc79fe61f9538f3da55e8f42abbede570",
    "related_commits": [
      "d1059c1cc79fe61f9538f3da55e8f42abbede570",
      "d1059c1cc79fe61f9538f3da55e8f42abbede570"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d1059c1cc79fe61f9538f3da55e8f42abbede570",
      "commit_date": "2023-05-20T09:51:26Z",
      "author": {
        "login": "SychO9",
        "type": "User",
        "stats": {
          "total_commits": 579,
          "average_weekly_commits": 1.0945179584120983,
          "total_additions": 204190,
          "total_deletions": 245008,
          "weeks_active": 142
        }
      },
      "commit_message": {
        "title": "fix: improve avatar upload functionality",
        "length": 92,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 10,
        "additions": 5,
        "deletions": 5
      },
      "files": [
        {
          "filename": "framework/core/js/src/forum/components/AvatarEditor.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -204,7 +204,7 @@ export default class AvatarEditor extends Component {\n \n   /**\n    * After a successful upload/removal, push the updated user data into the\n-   * store, and force a recomputation of the user's avatar color.\n+   * store, and force a re-computation of the user's avatar color.\n    *\n    * @param {object} response\n    * @protected"
        },
        {
          "filename": "framework/core/src/Api/Controller/UploadFaviconController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -62,7 +62,7 @@ protected function makeImage(UploadedFileInterface $file): Image\n             ]);\n         }\n \n-        $encodedImage = $this->imageManager->make($file->getStream())->resize(64, 64, function ($constraint) {\n+        $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->resize(64, 64, function ($constraint) {\n             $constraint->aspectRatio();\n             $constraint->upsize();\n         })->encode('png');"
        },
        {
          "filename": "framework/core/src/Api/Controller/UploadLogoController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -38,7 +38,7 @@ public function __construct(SettingsRepositoryInterface $settings, Factory $file\n      */\n     protected function makeImage(UploadedFileInterface $file): Image\n     {\n-        $encodedImage = $this->imageManager->make($file->getStream())->heighten(60, function ($constraint) {\n+        $encodedImage = $this->imageManager->make($file->getStream()->getMetadata('uri'))->heighten(60, function ($constraint) {\n             $constraint->upsize();\n         })->encode('png');\n "
        },
        {
          "filename": "framework/core/src/User/AvatarValidator.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -87,7 +87,7 @@ protected function assertFileMimes(UploadedFileInterface $file)\n         }\n \n         try {\n-            $this->imageManager->make($file->getStream());\n+            $this->imageManager->make($file->getStream()->getMetadata('uri'));\n         } catch (NotReadableException $_e) {\n             $this->raise('image');\n         }"
        },
        {
          "filename": "framework/core/src/User/Command/UploadAvatarHandler.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -74,7 +74,7 @@ public function handle(UploadAvatar $command)\n \n         $this->validator->assertValid(['avatar' => $command->file]);\n \n-        $image = $this->imageManager->make($command->file->getStream());\n+        $image = $this->imageManager->make($command->file->getStream()->getMetadata('uri'));\n \n         $this->events->dispatch(\n             new AvatarSaving($user, $actor, $image)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "670aa2e236fab681f32082d2e9b91a4c64c30532",
            "date": "2025-01-17T08:49:10Z",
            "author_login": "flarum-bot"
          },
          {
            "sha": "ac6133a768ef94c8ea8827569a5dfaf11f437a33",
            "date": "2025-01-17T08:44:27Z",
            "author_login": "SychO9"
          },
          {
            "sha": "48ec73f86e2a2ec102330d5d3fb99685b5404516",
            "date": "2025-01-12T12:06:04Z",
            "author_login": "flarum-bot"
          },
          {
            "sha": "00426c85e38efc91554af33644b088e72b3b3c1b",
            "date": "2025-01-12T12:02:07Z",
            "author_login": "SychO9"
          },
          {
            "sha": "33121ed1cc260bf967f0b8c4d10ab5099410bac0",
            "date": "2025-01-11T09:09:46Z",
            "author_login": "SychO9"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-918",
    "description": "Flarum is an open source forum software. Flarum is affected by a vulnerability that allows an attacker to conduct a Blind Server-Side Request Forgery (SSRF) attack or disclose any file on the server, even with a basic user account on any Flarum forum. By uploading a file containing a URL and spoofing the MIME type, an attacker can manipulate the application to execute unintended actions. The vulnerability is due to the behavior of the `intervention/image` package, which attempts to interpret the supplied file contents as a URL, which then fetches its contents. This allows an attacker to exploit the vulnerability to perform SSRF attacks, disclose local file contents, or conduct a blind oracle attack. This has been patched in Flarum version 1.8.0. Users are advised to upgrade. Users unable to upgrade may disable PHP's `allow_url_fopen` which will prevent the fetching of external files via URLs as a temporary workaround for the SSRF aspect of the vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-16T21:15:09.987",
    "last_modified": "2024-11-21T08:18:33.877",
    "fix_date": "2023-05-20T09:51:26Z"
  },
  "references": [
    {
      "url": "https://github.com/flarum/framework/commit/d1059c1cc79fe61f9538f3da55e8f42abbede570",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/flarum/framework/security/advisories/GHSA-67c6-q4j4-hccg",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/flarum/framework/commit/d1059c1cc79fe61f9538f3da55e8f42abbede570",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/flarum/framework/security/advisories/GHSA-67c6-q4j4-hccg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.437100",
    "processing_status": "enhanced"
  }
}