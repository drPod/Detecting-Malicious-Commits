{
  "cve_id": "CVE-2023-40165",
  "github_data": {
    "repository": "rubygems/rubygems.org",
    "fix_commit": "7e19c19247ddf5885a915710afc60ec6663d8502",
    "related_commits": [
      "7e19c19247ddf5885a915710afc60ec6663d8502",
      "7e19c19247ddf5885a915710afc60ec6663d8502"
    ],
    "patch_url": "https://github.com/rubygems/rubygems.org/commit/7e19c19247ddf5885a915710afc60ec6663d8502.patch",
    "fix_commit_details": {
      "sha": "7e19c19247ddf5885a915710afc60ec6663d8502",
      "commit_date": "2023-08-17T01:37:38Z",
      "author": {
        "login": "segiddins",
        "type": "User",
        "stats": {
          "total_commits": 439,
          "average_weekly_commits": 0.5353658536585366,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 92
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-rxcq-2m4f-94wm",
        "length": 206,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 219,
        "additions": 210,
        "deletions": 9
      },
      "files": [
        {
          "filename": "Gemfile",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -103,4 +103,5 @@ group :test do\n   gem \"webmock\", \"~> 3.18\"\n   gem \"simplecov\", \"~> 0.22\", require: false\n   gem \"simplecov-cobertura\", \"~> 2.1\", require: false\n+  gem \"aggregate_assertions\", \"~> 0.2.0\"\n end"
        },
        {
          "filename": "Gemfile.lock",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -71,6 +71,8 @@ GEM\n       tzinfo (~> 2.0)\n     addressable (2.8.4)\n       public_suffix (>= 2.0.2, < 6.0)\n+    aggregate_assertions (0.2.0)\n+      minitest (~> 5.0)\n     amazing_print (1.5.0)\n     android_key_attestation (0.3.0)\n     argon2 (2.1.1)\n@@ -621,6 +623,7 @@ PLATFORMS\n   ruby\n \n DEPENDENCIES\n+  aggregate_assertions (~> 0.2.0)\n   amazing_print (~> 1.4)\n   autoprefixer-rails (~> 10.4)\n   avo (~> 2.28, < 2.36)"
        },
        {
          "filename": "app/models/pusher.rb",
          "status": "modified",
          "additions": 33,
          "deletions": 4,
          "patch": "@@ -36,10 +36,17 @@ def verify_mfa_requirement\n   end\n \n   def validate\n-    signature_missing = \"There was a problem saving your gem: \\nYou have added cert_chain in gemspec but signature was empty\"\n+    unless validate_signature_exists?\n+      return notify(\"There was a problem saving your gem: \\nYou have added cert_chain in gemspec but signature was empty\", 403)\n+    end\n+\n+    return notify(\"There was a problem saving your gem: #{rubygem.all_errors(version)}\", 403) unless rubygem.valid? && version.valid?\n+\n+    unless version.full_name == spec.original_name && Patterns::NAME_PATTERN.match?(spec.platform.to_s)\n+      return notify(\"There was a problem saving your gem: the uploaded spec has malformed platform attributes\", 409)\n+    end\n \n-    return notify(signature_missing, 403) unless validate_signature_exists?\n-    (rubygem.valid? && version.valid?) || notify(\"There was a problem saving your gem: #{rubygem.all_errors(version)}\", 403)\n+    true\n   end\n \n   def save\n@@ -67,6 +74,7 @@ def pull_spec\n     package = Gem::Package.new(body, gem_security_policy)\n     @spec = package.spec\n     @files = package.files\n+    validate_spec\n   rescue StandardError => e\n     notify <<~MSG, 422\n       RubyGems.org cannot process this gem.\n@@ -212,7 +220,8 @@ def version_mfa_required?\n   end\n \n   def write_gem(body, spec)\n-    original_name = spec.original_name\n+    # we validate that the version full_name == spec.original_name\n+    original_name = @version.full_name\n \n     gem_path = \"gems/#{original_name}.gem\"\n     gem_contents = body.string\n@@ -248,4 +257,24 @@ def log_pushing\n       { message: \"Pushing gem\", version:, rubygem: @version.rubygem.name, pusher: user.as_json }\n     end\n   end\n+\n+  def validate_spec\n+    @spec.send(:invalidate_memoized_attributes)\n+\n+    spec = @spec.dup\n+\n+    cert_chain = spec.cert_chain\n+\n+    spec.abbreviate\n+    spec.sanitize\n+\n+    # make sure we validate the cert chain, which gets snipped in abbreviate\n+    spec.cert_chain = cert_chain\n+\n+    # Silence warnings from the verification\n+    stream = StringIO.new\n+    policy = SpecificationPolicy.new(spec)\n+    policy.ui = Gem::StreamUI.new(stream, stream, stream, false)\n+    policy.validate(false)\n+  end\n end"
        },
        {
          "filename": "app/models/specification_policy.rb",
          "status": "added",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -0,0 +1,11 @@\n+class SpecificationPolicy < Gem::SpecificationPolicy\n+  def error(statement)\n+    return if statement.start_with?(\"#{Gem::SpecificationPolicy::LAZY} is not a\")\n+\n+    super\n+  end\n+\n+  def warning(statement)\n+    # do nothing\n+  end\n+end"
        },
        {
          "filename": "app/models/version.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -24,7 +24,7 @@ class Version < ApplicationRecord\n   validates :platform, length: { maximum: Gemcutter::MAX_FIELD_LENGTH }, format: { with: Rubygem::NAME_PATTERN }\n   validates :full_name, presence: true, uniqueness: { case_sensitive: false }\n   validates :rubygem, presence: true\n-  validates :required_rubygems_version, :licenses, length: { maximum: Gemcutter::MAX_FIELD_LENGTH }, allow_blank: true\n+  validates :required_rubygems_version, :licenses, :required_ruby_version, length: { maximum: Gemcutter::MAX_FIELD_LENGTH }, allow_blank: true\n   validates :description, :summary, :authors, :requirements, :cert_chain,\n     length: { minimum: 0, maximum: Gemcutter::MAX_TEXT_FIELD_LENGTH },\n     allow_blank: true"
        },
        {
          "filename": "lib/patterns.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -6,6 +6,6 @@ module Patterns\n   ALLOWED_CHARACTERS    = \"[A-Za-z0-9#{Regexp.escape(SPECIAL_CHARACTERS)}]+\".freeze\n   ROUTE_PATTERN         = /#{ALLOWED_CHARACTERS}/\n   LAZY_ROUTE_PATTERN    = /#{ALLOWED_CHARACTERS}?/\n-  NAME_PATTERN          = /\\A#{ALLOWED_CHARACTERS}\\Z/\n+  NAME_PATTERN          = /\\A#{ALLOWED_CHARACTERS}\\z/\n   URL_VALIDATION_REGEXP = %r{\\Ahttps?://([^\\s:@]+:[^\\s:@]*@)?[A-Za-z\\d-]+(\\.[A-Za-z\\d-]+)+\\.?(:\\d{1,5})?([/?]\\S*)?\\z}\n end"
        },
        {
          "filename": "test/helpers/gem_helpers.rb",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -17,6 +17,27 @@ def build_gem(name, version, summary = \"Gemcutter\", platform = \"ruby\", &)\n     build_gemspec(new_gemspec(name, version, summary, platform, &))\n   end\n \n+  def build_gem_raw(file_name:, spec:, contents_writer: nil)\n+    package = Gem::Package.new file_name\n+\n+    File.open(file_name, \"wb\") do |file|\n+      Gem::Package::TarWriter.new(file) do |gem|\n+        gem.add_file \"metadata.gz\", 0o444 do |io|\n+          package.gzip_to(io) do |gz_io|\n+            gz_io.write spec\n+          end\n+        end\n+        gem.add_file \"data.tar.gz\", 0o444 do |io|\n+          package.gzip_to io do |gz_io|\n+            Gem::Package::TarWriter.new gz_io do |data_tar|\n+              contents_writer[data_tar] if contents_writer\n+            end\n+          end\n+        end\n+      end\n+    end\n+  end\n+\n   def new_gemspec(name, version, summary, platform, extra_args = {})\n     ruby_version = extra_args[:ruby_version]\n     rubygems_version = extra_args[:rubygems_version]"
        },
        {
          "filename": "test/integration/push_test.rb",
          "status": "modified",
          "additions": 137,
          "deletions": 3,
          "patch": "@@ -68,6 +68,8 @@ class PushTest < ActionDispatch::IntegrationTest\n \n     push_gem \"sandworm-1.0.0.gem\"\n \n+    assert_response :success\n+\n     get rubygem_path(\"sandworm\")\n \n     assert_response :success\n@@ -82,6 +84,8 @@ class PushTest < ActionDispatch::IntegrationTest\n \n     push_gem \"sandworm-1.0.0.gem\"\n \n+    assert_response :success\n+\n     get rubygem_path(\"sandworm\")\n \n     assert_response :success\n@@ -92,6 +96,8 @@ class PushTest < ActionDispatch::IntegrationTest\n   test \"pushing a signed gem\" do\n     push_gem gem_file(\"valid_signature-0.0.0.gem\")\n \n+    assert_response :success\n+\n     get rubygem_path(\"valid_signature\")\n \n     assert_response :success\n@@ -117,11 +123,13 @@ class PushTest < ActionDispatch::IntegrationTest\n   end\n \n   test \"push errors don't save files\" do\n-    build_gem \"sandworm\", \"1.0.0\" do |spec|\n-      spec.instance_variable_set :@authors, \"string\"\n-    end\n+    build_gem \"sandworm\", \"1.0.0\"\n \n     assert_nil Rubygem.find_by(name: \"sandworm\")\n+\n+    # Error on empty authors now happens in a different place,\n+    # but test what would happen if marshal dumping failed\n+    Gem::Specification.any_instance.stubs(:_dump).raises(NoMethodError)\n     push_gem \"sandworm-1.0.0.gem\"\n \n     assert_response :internal_server_error\n@@ -272,6 +280,130 @@ class PushTest < ActionDispatch::IntegrationTest\n     assert_equal \"2023-03-01T09:51:31+00:00\".to_datetime, hook.last_failure\n   end\n \n+  context \"with specially crafted gemspecs\" do\n+    should \"not allow overwriting gem with -\\\\d in name\" do\n+      create(:version, number: \"2.0\", rubygem: create(:rubygem, name: \"book-2\"))\n+\n+      build_gem_raw(file_name: \"malicious.gem\", spec: <<~YAML)\n+        --- !ruby/hash-with-ivars:Gem::Specification\n+        ivars:\n+          '@name': book\n+          '@version': '2-2.0'\n+          '@platform': 'not_ruby'\n+          '@original_platform': 'not-ruby'\n+          '@new_platform': ruby\n+          '@summary': 'malicious'\n+          '@authors': [test@example.com]\n+      YAML\n+\n+      push_gem \"malicious.gem\"\n+\n+      aggregate_assertions \"should fail to push\" do\n+        assert_response :conflict\n+\n+        assert_nil Rubygem.find_by(name: \"book\")\n+        assert_nil RubygemFs.instance.get(\"gems/book-2-2.0.gem\")\n+        assert_nil RubygemFs.instance.get(\"quick/Marshal.4.8/book-2-2.0.gemspec.rz\")\n+      end\n+    end\n+\n+    should \"not allow overwriting platform gem\" do\n+      create(:version, number: \"2.0\", platform: \"universal-darwin-19\", rubygem: create(:rubygem, name: \"book\"))\n+\n+      build_gem_raw(file_name: \"malicious.gem\", spec: <<~YAML)\n+        --- !ruby/hash-with-ivars:Gem::Specification\n+        ivars:\n+          '@name': book-2.0-universal-darwin\n+          '@version': '19'\n+          '@platform': 'not_ruby'\n+          '@original_platform': 'not-ruby'\n+          '@new_platform': ruby\n+          '@summary': 'malicious'\n+          '@authors': [test@example.com]\n+      YAML\n+\n+      push_gem \"malicious.gem\"\n+\n+      aggregate_assertions \"should fail to push\" do\n+        assert_response :conflict\n+\n+        assert_nil Rubygem.find_by(name: \"book-2.0-universal-darwin\")\n+        assert_nil RubygemFs.instance.get(\"gems/book-2.0-universal-darwin-19.gem\")\n+        assert_nil RubygemFs.instance.get(\"quick/Marshal.4.8/book-2.0-universal-darwin-19.gemspec.rz\")\n+      end\n+    end\n+\n+    context \"does not allow pushing a gem where the file name does not match the version full_name\" do\n+      should \"fail when original platform is a ruby Gem::Platform\" do\n+        build_gem_raw(file_name: \"malicious.gem\", spec: <<~YAML)\n+          --- !ruby/object:Gem::Specification\n+          specification_version: 100\n+          name: book\n+          version: '1'\n+          platform: !ruby/object:Gem::Platform\n+            os: ruby\n+          summary: 'malicious'\n+          authors: [test@example.com]\n+        YAML\n+        push_gem \"malicious.gem\"\n+\n+        aggregate_assertions \"should fail to push\" do\n+          assert_response :conflict\n+\n+          assert_nil Rubygem.find_by(name: \"book\")\n+          assert_nil RubygemFs.instance.get(\"gems/book-1-ruby.gem\")\n+          assert_nil RubygemFs.instance.get(\"quick/Marshal.4.8/book-1-ruby.gemspec.rz\")\n+        end\n+      end\n+\n+      should \"fail when original platform is an array that resolves to a platform of ruby\" do\n+        build_gem_raw(file_name: \"malicious.gem\", spec: <<~YAML)\n+          --- !ruby/object:Gem::Specification\n+          specification_version: 100\n+          name: book\n+          version: '1'\n+          platform: [ruby]\n+          summary: 'malicious'\n+          authors: [test@example.com]\n+        YAML\n+        push_gem \"malicious.gem\"\n+\n+        assert_response :forbidden\n+      end\n+    end\n+\n+    should \"fail fast when spec.name is not a string\" do\n+      build_gem_raw(file_name: \"malicious.gem\", spec: <<~YAML)\n+        --- !ruby/object:Gem::Specification\n+        name: !ruby/object:Gem::Version\n+          version: []\n+        version: '1'\n+        summary: 'malicious'\n+        authors: [test@example.com]\n+      YAML\n+      push_gem \"malicious.gem\"\n+\n+      assert_response :unprocessable_entity\n+    end\n+\n+    should \"fail when spec.platform is invalid\" do\n+      build_gem_raw(file_name: \"malicious.gem\", spec: <<~YAML)\n+        --- !ruby/hash-with-ivars:Gem::Specification\n+        ivars:\n+          '@name': book\n+          '@version': '1'\n+          '@new_platform': !ruby/object:Gem::Platform\n+            os: \"../../../../../etc/passwd\"\n+          '@original_platform': ruby\n+          '@summary': 'malicious'\n+          '@authors': [test@example.com]\n+      YAML\n+      push_gem \"malicious.gem\"\n+\n+      assert_response :conflict\n+    end\n+  end\n+\n   def push_gem(path)\n     post api_v1_rubygems_path,\n       env: { \"RAW_POST_DATA\" => File.read(path) },\n@@ -283,4 +415,6 @@ def push_gem(path)\n     RubygemFs.mock!\n     Dir.chdir(Rails.root)\n   end\n+\n+  make_my_diffs_pretty!\n end"
        },
        {
          "filename": "test/models/pusher_test.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -137,6 +137,8 @@ class PusherTest < ActiveSupport::TestCase\n     should \"not be able to save a gem if it is not valid\" do\n       legit_gem = create(:rubygem, name: \"legit-gem\")\n       create(:version, rubygem: legit_gem, number: \"0.0.1\")\n+      # this isn't the kind of invalid that we're testing with this gem\n+      Gem::Specification.any_instance.stubs(:authors).returns([\"user@example.com\"])\n       @gem = gem_file(\"legit-gem-0.0.1.gem.fake\")\n       @cutter = Pusher.new(@user, @gem)\n       @cutter.stubs(:save).never"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 2,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cecf79be46b0dbe869c319e97ad2ae58014d923a",
            "date": "2025-01-13T20:07:24Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6b7f0bce877715f11ee257e296353b290a57a829",
            "date": "2025-01-13T09:15:41Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "11527528f5da67cc2cb2c20062c9180d54509109",
            "date": "2025-01-12T05:20:21Z",
            "author_login": "segiddins"
          },
          {
            "sha": "b093b955a2e6d2e1002a9d65585d1e03a2654512",
            "date": "2025-01-11T18:53:50Z",
            "author_login": "martinemde"
          },
          {
            "sha": "160db8eadf3519c19a385f6b6a96658619fd5480",
            "date": "2025-01-11T17:58:49Z",
            "author_login": "martinemde"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:H/A:N",
    "cwe_id": "CWE-20",
    "description": "rubygems.org is the Ruby community's primary gem (library) hosting service. Insufficient input validation allowed malicious actors to replace any uploaded gem version that had a platform, version number, or gem name matching `/-\\d/`, permanently replacing the legitimate upload in the canonical gem storage bucket, and triggering an immediate CDN purge so that the malicious gem would be served immediately. The maintainers have checked all gems matching the `/-\\d/` pattern and can confirm that no unexpected `.gem`s were found. As a result, we believe this vulnerability was _not_ exploited. The easiest way to ensure that a user's applications were not exploited by this vulnerability is to check that all of your downloaded .gems have a checksum that matches the checksum recorded in the RubyGems.org database. RubyGems contributor Maciej Mensfeld wrote a tool to automatically check that all downloaded .gem files match the checksums recorded in the RubyGems.org database. You can use it by running: `bundle add bundler-integrity` followed by `bundle exec bundler-integrity`. Neither this tool nor anything else can prove you were not exploited, but the can assist your investigation by quickly comparing RubyGems API-provided checksums with the checksums of files on your disk. The issue has been patched with improved input validation and the changes are live. No action is required on the part of the user. Users are advised to validate their local gems.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-17T18:15:17.100",
    "last_modified": "2024-11-21T08:18:54.550",
    "fix_date": "2023-08-17T01:37:38Z"
  },
  "references": [
    {
      "url": "https://github.com/rubygems/rubygems.org/commit/7e19c19247ddf5885a915710afc60ec6663d8502",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rubygems/rubygems.org/security/advisories/GHSA-rxcq-2m4f-94wm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/rubygems/rubygems.org/commit/7e19c19247ddf5885a915710afc60ec6663d8502",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rubygems/rubygems.org/security/advisories/GHSA-rxcq-2m4f-94wm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.438311",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rubygems.org",
    "owner": "rubygems",
    "created_at": "2009-01-29T22:30:46Z",
    "updated_at": "2025-01-13T20:07:30Z",
    "pushed_at": "2025-01-14T07:51:29Z",
    "size": 24489,
    "stars": 2342,
    "forks": 934,
    "open_issues": 91,
    "watchers": 2342,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Ruby": 2182589,
      "HTML": 342202,
      "CSS": 77662,
      "JavaScript": 33997,
      "Shell": 7867,
      "Dockerfile": 4095
    },
    "commit_activity": {
      "total_commits_last_year": 1068,
      "avg_commits_per_week": 20.53846153846154,
      "days_active_last_year": 269
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:25:16.767892"
  }
}