{
  "cve_id": "CVE-2023-40175",
  "github_data": {
    "repository": "puma/puma",
    "fix_commit": "690155e7d644b80eeef0a6094f9826ee41f1080a",
    "related_commits": [
      "690155e7d644b80eeef0a6094f9826ee41f1080a",
      "690155e7d644b80eeef0a6094f9826ee41f1080a"
    ],
    "patch_url": "https://github.com/puma/puma/commit/690155e7d644b80eeef0a6094f9826ee41f1080a.patch",
    "fix_commit_details": {
      "sha": "690155e7d644b80eeef0a6094f9826ee41f1080a",
      "commit_date": "2023-08-18T00:47:23Z",
      "author": {
        "login": "nateberkopec",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-68xg-gqqm-vgj8",
        "length": 370,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 103,
        "additions": 94,
        "deletions": 9
      },
      "files": [
        {
          "filename": "lib/puma/client.rb",
          "status": "modified",
          "additions": 15,
          "deletions": 8,
          "patch": "@@ -49,7 +49,8 @@ class Client # :nodoc:\n \n     # chunked body validation\n     CHUNK_SIZE_INVALID = /[^\\h]/.freeze\n-    CHUNK_VALID_ENDING = \"\\r\\n\".freeze\n+    CHUNK_VALID_ENDING = Const::LINE_END\n+    CHUNK_VALID_ENDING_SIZE = CHUNK_VALID_ENDING.bytesize\n \n     # Content-Length header value validation\n     CONTENT_LENGTH_VALUE_INVALID = /[^\\d]/.freeze\n@@ -382,8 +383,8 @@ def setup_body\n       cl = @env[CONTENT_LENGTH]\n \n       if cl\n-        # cannot contain characters that are not \\d\n-        if CONTENT_LENGTH_VALUE_INVALID.match? cl\n+        # cannot contain characters that are not \\d, or be empty\n+        if CONTENT_LENGTH_VALUE_INVALID.match?(cl) || cl.empty?\n           raise HttpParserError, \"Invalid Content-Length: #{cl.inspect}\"\n         end\n       else\n@@ -544,7 +545,7 @@ def decode_chunk(chunk)\n \n       while !io.eof?\n         line = io.gets\n-        if line.end_with?(\"\\r\\n\")\n+        if line.end_with?(CHUNK_VALID_ENDING)\n           # Puma doesn't process chunk extensions, but should parse if they're\n           # present, which is the reason for the semicolon regex\n           chunk_hex = line.strip[/\\A[^;]+/]\n@@ -556,13 +557,19 @@ def decode_chunk(chunk)\n             @in_last_chunk = true\n             @body.rewind\n             rest = io.read\n-            last_crlf_size = \"\\r\\n\".bytesize\n-            if rest.bytesize < last_crlf_size\n+            if rest.bytesize < CHUNK_VALID_ENDING_SIZE\n               @buffer = nil\n-              @partial_part_left = last_crlf_size - rest.bytesize\n+              @partial_part_left = CHUNK_VALID_ENDING_SIZE - rest.bytesize\n               return false\n             else\n-              @buffer = rest[last_crlf_size..-1]\n+              # if the next character is a CRLF, set buffer to everything after that CRLF\n+              start_of_rest = if rest.start_with?(CHUNK_VALID_ENDING)\n+                CHUNK_VALID_ENDING_SIZE\n+              else # we have started a trailer section, which we do not support. skip it!\n+                rest.index(CHUNK_VALID_ENDING*2) + CHUNK_VALID_ENDING_SIZE*2\n+              end\n+\n+              @buffer = rest[start_of_rest..-1]\n               @buffer = nil if @buffer.empty?\n               set_ready\n               return true"
        },
        {
          "filename": "test/test_puma_server.rb",
          "status": "modified",
          "additions": 79,
          "deletions": 1,
          "patch": "@@ -749,7 +749,7 @@ def test_large_chunked_request\n       [200, {}, [\"\"]]\n     }\n \n-    header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"\n+    header = \"GET / HTTP/1.1\\r\\nConnection: close\\r\\nContent-Length: 200\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n\"\n \n     chunk_header_size = 6 # 4fb8\\r\\n\n     # Current implementation reads one chunk of CHUNK_SIZE, then more chunks of size 4096.\n@@ -1710,4 +1710,82 @@ def test_lowlevel_error_handler_response\n \n     assert_match(/something wrong happened/, data)\n   end\n+\n+  def test_cl_empty_string\n+    server_run do |env|\n+      [200, {}, [\"\"]]\n+    end\n+\n+    # rubocop:disable Layout/TrailingWhitespace\n+    empty_cl_request = <<~REQ.gsub(\"\\n\", \"\\r\\n\")\n+      GET / HTTP/1.1\n+      Host: localhost\n+      Content-Length: \n+      \n+      GET / HTTP/1.1\n+      Host: localhost\n+      \n+    REQ\n+    # rubocop:enable Layout/TrailingWhitespace\n+\n+    data = send_http_and_read empty_cl_request\n+    assert_operator data, :start_with?, 'HTTP/1.1 400 Bad Request'\n+  end\n+\n+  def test_crlf_trailer_smuggle\n+    server_run do |env|\n+      [200, {}, [\"\"]]\n+    end\n+\n+    smuggled_payload = <<~REQ.gsub(\"\\n\", \"\\r\\n\")\n+      GET / HTTP/1.1\n+      Transfer-Encoding: chunked\n+      Host: whatever\n+\n+      0\n+      X:POST / HTTP/1.1\n+      Host: whatever\n+\n+      GET / HTTP/1.1\n+      Host: whatever\n+\n+    REQ\n+\n+    data = send_http_and_read smuggled_payload\n+    assert_equal 2, data.scan(\"HTTP/1.1 200 OK\").size\n+  end\n+\n+  # test to check if content-length is ignored when 'transfer-encoding: chunked'\n+  # is used.  See also test_large_chunked_request\n+  def test_cl_and_te_smuggle\n+    body = nil\n+    server_run { |env|\n+      body = env['rack.input'].read\n+      [200, {}, [\"\"]]\n+    }\n+\n+    req = <<~REQ.gsub(\"\\n\", \"\\r\\n\")\n+      POST /search HTTP/1.1\n+      Host: vulnerable-website.com\n+      Content-Type: application/x-www-form-urlencoded\n+      Content-Length: 4\n+      Transfer-Encoding: chunked\n+\n+      7b\n+      GET /404 HTTP/1.1\n+      Host: vulnerable-website.com\n+      Content-Type: application/x-www-form-urlencoded\n+      Content-Length: 144\n+\n+      x=\n+      0\n+\n+    REQ\n+\n+    data = send_http_and_read req\n+\n+    assert_includes body, \"GET /404 HTTP/1.1\\r\\n\"\n+    assert_includes body, \"Content-Length: 144\\r\\n\"\n+    assert_equal 1, data.scan(\"HTTP/1.1 200 OK\").size\n+  end\n end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "edd2a1728e39d055545fd12ffdfa42d5d4ccbc58",
            "date": "2025-01-11T03:28:01Z",
            "author_login": "MSP-Greg"
          },
          {
            "sha": "69aa270f5e61efea37d73280137deea855f14ac6",
            "date": "2025-01-11T03:18:53Z",
            "author_login": "MSP-Greg"
          },
          {
            "sha": "a478d4d095595f5cca982c45cf65ece0fb1118e9",
            "date": "2025-01-10T10:37:58Z",
            "author_login": "joshuay03"
          },
          {
            "sha": "437c9ce93ac63eba38a5c553b7b5a52699bab971",
            "date": "2025-01-07T01:26:28Z",
            "author_login": "nateberkopec"
          },
          {
            "sha": "584d4e4070528479571ed001f94f90d07f074acc",
            "date": "2025-01-04T17:33:40Z",
            "author_login": "MSP-Greg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-444",
    "description": "Puma is a Ruby/Rack web server built for parallelism. Prior to versions 6.3.1 and 5.6.7, puma exhibited incorrect behavior when parsing chunked transfer encoding bodies and zero-length Content-Length headers in a way that allowed HTTP request smuggling. Severity of this issue is highly dependent on the nature of the web site using puma is. This could be caused by either incorrect parsing of trailing fields in chunked transfer encoding bodies or by parsing of blank/zero-length Content-Length headers. Both issues have been addressed and this vulnerability has been fixed in versions 6.3.1 and 5.6.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-18T22:15:11.653",
    "last_modified": "2024-11-21T08:18:55.877",
    "fix_date": "2023-08-18T00:47:23Z"
  },
  "references": [
    {
      "url": "https://github.com/puma/puma/commit/690155e7d644b80eeef0a6094f9826ee41f1080a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/puma/puma/security/advisories/GHSA-68xg-gqqm-vgj8",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/puma/puma/commit/690155e7d644b80eeef0a6094f9826ee41f1080a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/puma/puma/security/advisories/GHSA-68xg-gqqm-vgj8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.446095",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "puma",
    "owner": "puma",
    "created_at": "2011-09-23T02:26:08Z",
    "updated_at": "2025-01-14T14:47:16Z",
    "pushed_at": "2025-01-11T03:28:01Z",
    "size": 11904,
    "stars": 7716,
    "forks": 1449,
    "open_issues": 93,
    "watchers": 7716,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Ruby": 735873,
      "C": 59303,
      "Java": 43606,
      "Ragel": 9223,
      "Shell": 9208,
      "PowerShell": 3326,
      "Dockerfile": 1455,
      "Lua": 127,
      "Batchfile": 35
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T16:25:36.527726"
  }
}