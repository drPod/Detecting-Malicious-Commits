{
  "cve_id": "CVE-2023-40185",
  "github_data": {
    "repository": "ericcornelissen/shescape",
    "fix_commit": "0b976dab645abf45ffd85e74a8c6e51ee2f42d63",
    "related_commits": [
      "0b976dab645abf45ffd85e74a8c6e51ee2f42d63",
      "0b976dab645abf45ffd85e74a8c6e51ee2f42d63"
    ],
    "patch_url": "https://github.com/ericcornelissen/shescape/commit/0b976dab645abf45ffd85e74a8c6e51ee2f42d63.patch",
    "fix_commit_details": {
      "sha": "0b976dab645abf45ffd85e74a8c6e51ee2f42d63",
      "commit_date": "2023-08-21T08:05:50Z",
      "author": {
        "login": "ericcornelissen",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Provide explicit `$PATH` value to which (#1142)",
        "length": 1532,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1476,
        "additions": 1174,
        "deletions": 302
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@ Versioning].\n \n ## [Unreleased]\n \n+- Fix potential silent executable lookup failure for Windows. ([#1142])\n - Support more valid `shell` values for Windows. ([#1137])\n \n ## [1.7.3] - 2023-08-07\n@@ -292,6 +293,7 @@ Versioning].\n [#1083]: https://github.com/ericcornelissen/shescape/pull/1083\n [#1094]: https://github.com/ericcornelissen/shescape/pull/1094\n [#1137]: https://github.com/ericcornelissen/shescape/pull/1137\n+[#1142]: https://github.com/ericcornelissen/shescape/pull/1142\n [552e8ea]: https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9\n [keep a changelog]: https://keepachangelog.com/en/1.0.0/\n [semantic versioning]: https://semver.org/spec/v2.0.0.html"
        },
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -53,7 +53,7 @@ function getPlatformHelpers() {\n export function escape(arg, options = {}) {\n   const helpers = getPlatformHelpers();\n   const { flagProtection, interpolation, shellName } = parseOptions(\n-    { options, process },\n+    { env: process.env, options },\n     helpers,\n   );\n   const argAsString = checkedToString(arg);\n@@ -129,7 +129,7 @@ export function escapeAll(args, options = {}) {\n export function quote(arg, options = {}) {\n   const helpers = getPlatformHelpers();\n   const { flagProtection, shellName } = parseOptions(\n-    { options, process },\n+    { env: process.env, options },\n     helpers,\n   );\n   const argAsString = checkedToString(arg);"
        },
        {
          "filename": "src/executables.js",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -12,16 +12,20 @@\n  * - Follows symbolic links.\n  *\n  * @param {object} args The arguments for this function.\n+ * @param {object} args.env The environment variables.\n  * @param {string} args.executable A string representation of the executable.\n  * @param {object} deps The dependencies for this function.\n  * @param {Function} deps.exists A function to check if a file exists.\n  * @param {Function} deps.readlink A function to resolve (sym)links.\n  * @param {Function} deps.which A function to perform a `which(1)`-like lookup.\n  * @returns {string} The full path to the binary of the executable.\n  */\n-export function resolveExecutable({ executable }, { exists, readlink, which }) {\n+export function resolveExecutable(\n+  { env, executable },\n+  { exists, readlink, which },\n+) {\n   try {\n-    executable = which(executable);\n+    executable = which(executable, { path: env.PATH || env.Path });\n   } catch (_) {\n     // For backwards compatibility return the executable even if its location\n     // cannot be obtained"
        },
        {
          "filename": "src/options.js",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -10,25 +10,24 @@ import { isString } from \"./reflection.js\";\n  * Parses options provided to shescape.\n  *\n  * @param {object} args The arguments for this function.\n+ * @param {object} args.env The environment variables.\n  * @param {object} args.options The options for escaping.\n  * @param {boolean} [args.options.flagProtection] Is flag protection enabled.\n  * @param {boolean} [args.options.interpolation] Is interpolation enabled.\n  * @param {boolean | string} [args.options.shell] The shell to escape for.\n- * @param {object} args.process The `process` values.\n- * @param {object} args.process.env The environment variables.\n  * @param {object} deps The dependencies for this function.\n  * @param {Function} deps.getDefaultShell Function to get the default shell.\n  * @param {Function} deps.getShellName Function to get the name of a shell.\n  * @returns {object} The parsed arguments.\n  */\n export function parseOptions(\n-  { options: { flagProtection, interpolation, shell }, process: { env } },\n+  { env, options: { flagProtection, interpolation, shell } },\n   { getDefaultShell, getShellName },\n ) {\n   flagProtection = flagProtection ? true : false;\n   interpolation = interpolation ? true : false;\n   shell = isString(shell) ? shell : getDefaultShell({ env });\n \n-  const shellName = getShellName({ shell }, { resolveExecutable });\n+  const shellName = getShellName({ env, shell }, { resolveExecutable });\n   return { flagProtection, interpolation, shellName };\n }"
        },
        {
          "filename": "src/unix.js",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -121,14 +121,15 @@ export function getFlagProtectionFunction(shellName) {\n  * Determines the name of the shell identified by a file path or file name.\n  *\n  * @param {object} args The arguments for this function.\n+ * @param {object} args.env The environment variables.\n  * @param {string} args.shell The name or path of the shell.\n  * @param {object} deps The dependencies for this function.\n  * @param {Function} deps.resolveExecutable Resolve the path to an executable.\n  * @returns {string} The shell name.\n  */\n-export function getShellName({ shell }, { resolveExecutable }) {\n+export function getShellName({ env, shell }, { resolveExecutable }) {\n   shell = resolveExecutable(\n-    { executable: shell },\n+    { env, executable: shell },\n     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync },\n   );\n "
        },
        {
          "filename": "src/win.js",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -98,14 +98,15 @@ export function getFlagProtectionFunction(shellName) {\n  * Determines the name of the shell identified by a file path or file name.\n  *\n  * @param {object} args The arguments for this function.\n+ * @param {object} args.env The environment variables.\n  * @param {string} args.shell The name or path of the shell.\n  * @param {object} deps The dependencies for this function.\n  * @param {Function} deps.resolveExecutable Resolve the path to an executable.\n  * @returns {string} The shell name.\n  */\n-export function getShellName({ shell }, { resolveExecutable }) {\n+export function getShellName({ env, shell }, { resolveExecutable }) {\n   shell = resolveExecutable(\n-    { executable: shell },\n+    { env, executable: shell },\n     { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync },\n   );\n "
        },
        {
          "filename": "test/_constants.cjs",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -60,11 +60,13 @@ module.exports.shellsUnix = [\n \n /* Windows related constants */\n module.exports.binCmd = \"cmd.exe\";\n+module.exports.binCmdNoExt = \"cmd\";\n module.exports.binPowerShell = \"powershell.exe\";\n+module.exports.binPowerShellNoExt = \"powershell\";\n \n module.exports.shellsWindows = [\n   module.exports.binCmd,\n-  \"cmd.EXE\",\n+  module.exports.binCmdNoExt,\n   module.exports.binPowerShell,\n-  \"powershell.EXE\",\n+  module.exports.binPowerShellNoExt,\n ];"
        },
        {
          "filename": "test/e2e/_.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -3,8 +3,8 @@\n  * @license MIT\n  */\n \n-import { injectionStrings } from \"../../testing.js\";\n import * as constants from \"../_constants.cjs\";\n+import * as common from \"./_common.js\";\n import * as macros from \"./_macros.js\";\n \n-export { constants, macros, injectionStrings };\n+export { common, constants, macros };"
        },
        {
          "filename": "test/e2e/_common.js",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+/**\n+ * @overview Provides common utilities for end-to-end tests.\n+ * @license MIT\n+ */\n+\n+import process from \"node:process\";\n+\n+import test from \"ava\";\n+import isCI from \"is-ci\";\n+import which from \"which\";\n+\n+import { injectionStrings } from \"../../testing.js\";\n+import * as constants from \"../_constants.cjs\";\n+\n+/**\n+ * Get a list of strings to use as arguments in end-to-end tests.\n+ *\n+ * @returns {string[]} A list of test arguments.\n+ */\n+export function getTestArgs() {\n+  return [\"harmless\", ...injectionStrings];\n+}\n+\n+/**\n+ * Get the AVA test function to use for the given shell.\n+ *\n+ * @param {string} shell The shell to run a test for.\n+ * @returns {Function} An AVA `test` function.\n+ */\n+export function getTestFn(shell) {\n+  try {\n+    if (!isCI && typeof shell === \"string\") {\n+      which.sync(shell, { path: process.env.PATH || process.env.Path });\n+    }\n+\n+    return test;\n+  } catch (_) {\n+    return test.skip;\n+  }\n+}\n+\n+/**\n+ * Get a list of `shell` option values to use in end-to-end tests.\n+ *\n+ * @returns {(boolean | string)[]} A list of `shell` option values.\n+ */\n+export function getTestShells() {\n+  const systemShells = constants.isWindows\n+    ? constants.shellsWindows\n+    : constants.shellsUnix;\n+\n+  return [false, true, ...systemShells];\n+}"
        },
        {
          "filename": "test/e2e/child_process.test.js",
          "status": "removed",
          "additions": 0,
          "deletions": 40,
          "patch": "@@ -1,40 +0,0 @@\n-/**\n- * @overview Contains end-to-end tests of using Shescape with the child_process\n- * package.\n- * @license MIT\n- */\n-\n-import test from \"ava\";\n-import isCI from \"is-ci\";\n-import which from \"which\";\n-\n-import { constants, macros, injectionStrings } from \"./_.js\";\n-\n-const systemShells = constants.isWindows\n-  ? constants.shellsWindows\n-  : constants.shellsUnix;\n-\n-const testArgs = [\"harmless\", ...injectionStrings];\n-const testShells = [false, true, ...systemShells];\n-\n-for (const arg of testArgs) {\n-  test(macros.fork, { arg });\n-\n-  for (const shell of testShells) {\n-    let runTest = test;\n-    try {\n-      if (!isCI && typeof shell === \"string\") {\n-        which.sync(shell);\n-      }\n-    } catch (_) {\n-      runTest = test.skip;\n-    }\n-\n-    runTest(macros.exec, { arg, shell });\n-    runTest(macros.execSync, { arg, shell });\n-    runTest(macros.execFile, { arg, shell });\n-    runTest(macros.execFileSync, { arg, shell });\n-    runTest(macros.spawn, { arg, shell });\n-    runTest(macros.spawnSync, { arg, shell });\n-  }\n-}"
        },
        {
          "filename": "test/e2e/exec-file.test.js",
          "status": "added",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -0,0 +1,15 @@\n+/**\n+ * @overview Contains end-to-end tests of using Shescape with the child_process\n+ * package's `execFile` (and `execFileSync`) functions.\n+ * @license MIT\n+ */\n+\n+import { common, macros } from \"./_.js\";\n+\n+for (const shell of common.getTestShells()) {\n+  const test = common.getTestFn(shell);\n+  for (const arg of common.getTestArgs()) {\n+    test(macros.execFile, { arg, shell });\n+    test(macros.execFileSync, { arg, shell });\n+  }\n+}"
        },
        {
          "filename": "test/e2e/exec.test.js",
          "status": "added",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -0,0 +1,15 @@\n+/**\n+ * @overview Contains end-to-end tests of using Shescape with the child_process\n+ * package's `exec` (and `execSync`) functions.\n+ * @license MIT\n+ */\n+\n+import { common, macros } from \"./_.js\";\n+\n+for (const shell of common.getTestShells()) {\n+  const test = common.getTestFn(shell);\n+  for (const arg of common.getTestArgs()) {\n+    test(macros.exec, { arg, shell });\n+    test(macros.execSync, { arg, shell });\n+  }\n+}"
        },
        {
          "filename": "test/e2e/fork.test.js",
          "status": "added",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -0,0 +1,12 @@\n+/**\n+ * @overview Contains end-to-end tests of using Shescape with the child_process\n+ * package's `fork` functions.\n+ * @license MIT\n+ */\n+\n+import { common, macros } from \"./_.js\";\n+\n+for (const arg of common.getTestArgs()) {\n+  const test = common.getTestFn(null);\n+  test(macros.fork, { arg });\n+}"
        },
        {
          "filename": "test/e2e/spawn.test.js",
          "status": "added",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -0,0 +1,15 @@\n+/**\n+ * @overview Contains end-to-end tests of using Shescape with the child_process\n+ * package's `spawn` (and `spawnSync`) functions.\n+ * @license MIT\n+ */\n+\n+import { common, macros } from \"./_.js\";\n+\n+for (const shell of common.getTestShells()) {\n+  const test = common.getTestFn(shell);\n+  for (const arg of common.getTestArgs()) {\n+    test(macros.spawn, { arg, shell });\n+    test(macros.spawnSync, { arg, shell });\n+  }\n+}"
        },
        {
          "filename": "test/integration/_generators.js",
          "status": "modified",
          "additions": 9,
          "deletions": 18,
          "patch": "@@ -5,28 +5,16 @@\n \n import * as fixturesUnix from \"../fixtures/unix.js\";\n import * as fixturesWindows from \"../fixtures/win.js\";\n-import common from \"../_constants.cjs\";\n \n-/**\n- * Returns the shells officially supported by Shescape for the current platform.\n- *\n- * @yields {string} Supported shells for the current platform.\n- */\n-export function* platformShells() {\n-  if (common.isWindows) {\n-    yield* common.shellsWindows;\n-  } else {\n-    yield* common.shellsUnix;\n-  }\n-}\n+import { constants } from \"./_.js\";\n \n /**\n  * Returns the test fixtures for the current platform.\n  *\n  * @returns {object} All test fixtures for the current platform.\n  */\n function getPlatformFixtures() {\n-  if (common.isWindows) {\n+  if (constants.isWindows) {\n     return fixturesWindows;\n   } else {\n     return fixturesUnix;\n@@ -40,13 +28,16 @@ function getPlatformFixtures() {\n  * @returns {object} All test fixtures for `shell`.\n  */\n function getShellFixtures(shell) {\n-  shell = shell.toLowerCase();\n+  let shellName = shell.toLowerCase();\n+  if (constants.isWindows) {\n+    shellName = shellName.endsWith(\".exe\") ? shellName : `${shellName}.exe`;\n+  }\n \n   const fixtures = getPlatformFixtures();\n   return {\n-    escape: Object.values(fixtures.escape[shell]).flat(),\n-    flag: Object.values(fixtures.flag[shell]).flat(),\n-    quote: Object.values(fixtures.quote[shell]).flat(),\n+    escape: Object.values(fixtures.escape[shellName]).flat(),\n+    flag: Object.values(fixtures.flag[shellName]).flat(),\n+    quote: Object.values(fixtures.quote[shellName]).flat(),\n   };\n }\n "
        },
        {
          "filename": "test/integration/escape-all/bash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for the\n+ * Bourne-again shell (Bash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binBash}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binBash)) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape-all/cmd-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for the Windows\n+ * Command Prompt (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmd}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binCmd)) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape-all/cmd.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for the Windows\n+ * Command Prompt (without extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmdNoExt}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binCmdNoExt)) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape-all/commonjs.test.js",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+/**\n+ * @overview Contains integration test for the CommonJS version of\n+ * `shescape.escapeAll`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+import * as fc from \"fast-check\";\n+\n+import { arbitrary } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+import { escapeAll as escapeAllCjs } from \"../../../index.cjs\";\n+\n+testProp(\n+  \"esm === cjs\",\n+  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n+  (t, args, options) => {\n+    const resultEsm = escapeAll(args, options);\n+    const resultCjs = escapeAllCjs(args, options);\n+    t.deepEqual(resultEsm, resultCjs);\n+  },\n+);"
        },
        {
          "filename": "test/integration/escape-all/csh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for the C shell\n+ * (csh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binCsh}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binCsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape-all/dash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for the Debian\n+ * Almquist shell (Dash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binDash}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binDash)) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape-all/invalid.test.js",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+/**\n+ * @overview Contains integration tests for invalid use of `shescape.escapeAll`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+import test from \"ava\";\n+\n+import { arbitrary, constants, macros } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n+  for (const { value } of constants.illegalArguments) {\n+    t.throws(() => escapeAll([value], options), { instanceOf: TypeError });\n+    t.throws(() => escapeAll(value, options), { instanceOf: TypeError });\n+  }\n+});\n+\n+test(macros.prototypePollution, (_, payload) => {\n+  escapeAll([\"a\"], payload);\n+});"
        },
        {
          "filename": "test/integration/escape-all/powershell-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for Windows\n+ * PowerShell (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShell}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binPowerShell)) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape-all/powershell.test.js",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for Windows\n+ * PowerShell (without extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShellNoExt}`, (t) => {\n+  for (const scenario of generate.escapeExamples(\n+    constants.binPowerShellNoExt,\n+  )) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape-all/valid.test.js",
          "status": "renamed",
          "additions": 2,
          "deletions": 34,
          "patch": "@@ -1,25 +1,14 @@\n /**\n- * @overview Contains integration tests for `shescape.escapeAll`.\n+ * @overview Contains integration tests for valid use of `shescape.escapeAll`.\n  * @license MIT\n  */\n \n import { testProp } from \"@fast-check/ava\";\n-import test from \"ava\";\n import * as fc from \"fast-check\";\n \n-import { arbitrary, constants, generate, macros } from \"./_.js\";\n+import { arbitrary } from \"../_.js\";\n \n import { escape, escapeAll } from \"shescape\";\n-import { escapeAll as escapeAllCjs } from \"../../index.cjs\";\n-\n-for (const shell of generate.platformShells()) {\n-  test(`inputs are escaped for ${shell}`, (t) => {\n-    for (const { expected, input, options } of generate.escapeExamples(shell)) {\n-      const result = escapeAll([input], options);\n-      t.deepEqual(result, [expected]);\n-    }\n-  });\n-}\n \n testProp(\n   \"return values\",\n@@ -71,24 +60,3 @@ testProp(\n     t.is(entry, escape(arg, options));\n   },\n );\n-\n-testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n-  for (const { value } of constants.illegalArguments) {\n-    t.throws(() => escapeAll([value], options), { instanceOf: TypeError });\n-    t.throws(() => escapeAll(value, options), { instanceOf: TypeError });\n-  }\n-});\n-\n-test(macros.prototypePollution, (_, payload) => {\n-  escapeAll([\"a\"], payload);\n-});\n-\n-testProp(\n-  \"esm === cjs\",\n-  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n-  (t, args, options) => {\n-    const resultEsm = escapeAll(args, options);\n-    const resultCjs = escapeAllCjs(args, options);\n-    t.deepEqual(resultEsm, resultCjs);\n-  },\n-);"
        },
        {
          "filename": "test/integration/escape-all/zsh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escapeAll` for the Z shell\n+ * (Zsh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escapeAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binZsh}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binZsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = escapeAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape.test.js",
          "status": "removed",
          "additions": 0,
          "deletions": 50,
          "patch": "@@ -1,50 +0,0 @@\n-/**\n- * @overview Contains integration tests for `shescape.escape`.\n- * @license MIT\n- */\n-\n-import { testProp } from \"@fast-check/ava\";\n-import test from \"ava\";\n-\n-import { arbitrary, constants, generate, macros } from \"./_.js\";\n-\n-import { escape as escape } from \"shescape\";\n-import { escape as escapeCjs } from \"../../index.cjs\";\n-\n-for (const shell of generate.platformShells()) {\n-  test(`input is escaped for ${shell}`, (t) => {\n-    for (const { expected, input, options } of generate.escapeExamples(shell)) {\n-      const result = escape(input, options);\n-      t.is(result, expected);\n-    }\n-  });\n-}\n-\n-testProp(\n-  \"return values\",\n-  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n-  (t, arg, options) => {\n-    const result = escape(arg, options);\n-    t.is(typeof result, \"string\");\n-  },\n-);\n-\n-testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n-  for (const { value } of constants.illegalArguments) {\n-    t.throws(() => escape(value, options), { instanceOf: TypeError });\n-  }\n-});\n-\n-test(macros.prototypePollution, (_, payload) => {\n-  escape(\"a\", payload);\n-});\n-\n-testProp(\n-  \"esm === cjs\",\n-  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n-  (t, arg, options) => {\n-    const resultEsm = escape(arg, options);\n-    const resultCjs = escapeCjs(arg, options);\n-    t.is(resultEsm, resultCjs);\n-  },\n-);"
        },
        {
          "filename": "test/integration/escape/bash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for the\n+ * Bourne-again shell (Bash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binBash}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binBash)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape/cmd-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for the Windows\n+ * Command Prompt (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmd}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binCmd)) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape/cmd.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for the Windows\n+ * Command Prompt (without extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmdNoExt}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binCmdNoExt)) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape/commonjs.test.js",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+/**\n+ * @overview Contains integration tests for the CommonJS version of\n+ * `shescape.escape`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+\n+import { arbitrary } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+import { escape as escapeCjs } from \"../../../index.cjs\";\n+\n+testProp(\n+  \"esm === cjs\",\n+  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n+  (t, arg, options) => {\n+    const resultEsm = escape(arg, options);\n+    const resultCjs = escapeCjs(arg, options);\n+    t.is(resultEsm, resultCjs);\n+  },\n+);"
        },
        {
          "filename": "test/integration/escape/csh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for the C shell\n+ * (csh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binCsh}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binCsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape/dash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for the Debian\n+ * Almquist shell (Dash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binDash}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binDash)) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape/invalid.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for invalid use of `shescape.escape`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+import test from \"ava\";\n+\n+import { arbitrary, constants, macros } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n+  for (const { value } of constants.illegalArguments) {\n+    t.throws(() => escape(value, options), { instanceOf: TypeError });\n+  }\n+});\n+\n+test(macros.prototypePollution, (_, payload) => {\n+  escape(\"a\", payload);\n+});"
        },
        {
          "filename": "test/integration/escape/powershell-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for Windows\n+ * PowerShell (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShell}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binPowerShell)) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape/powershell.test.js",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for Windows\n+ * PowerShell (without extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShellNoExt}`, (t) => {\n+  for (const scenario of generate.escapeExamples(\n+    constants.binPowerShellNoExt,\n+  )) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/escape/valid.test.js",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+/**\n+ * @overview Contains integration tests for valid use of `shescape.escape`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+\n+import { arbitrary } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+testProp(\n+  \"return values\",\n+  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n+  (t, arg, options) => {\n+    const result = escape(arg, options);\n+    t.is(typeof result, \"string\");\n+  },\n+);"
        },
        {
          "filename": "test/integration/escape/zsh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for the Z shell\n+ * (Zsh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binZsh}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binZsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/bash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for the\n+ * Bourne-again shell (Bash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binBash}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binBash)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/cmd-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for the Windows\n+ * Command Prompt (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmd}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binCmd)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/cmd.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for the Windows\n+ * Command Prompt (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmdNoExt}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binCmdNoExt)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/commonjs.test.js",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+/**\n+ * @overview Contains integration test for the CommonJS version of\n+ * `shescape.quoteAll`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+import * as fc from \"fast-check\";\n+\n+import { arbitrary } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+import { quoteAll as quoteAllCjs } from \"../../../index.cjs\";\n+\n+testProp(\n+  \"esm === cjs\",\n+  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n+  (t, args, options) => {\n+    const resultEsm = quoteAll(args, options);\n+    const resultCjs = quoteAllCjs(args, options);\n+    t.deepEqual(resultEsm, resultCjs);\n+  },\n+);"
        },
        {
          "filename": "test/integration/quote-all/csh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for the C shell\n+ * (csh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binCsh}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binCsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/dash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for the Debian\n+ * Almquist shell (Dash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binDash}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binDash)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/invalid.test.js",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+/**\n+ * @overview Contains integration tests for invalid use of `shescape.quote`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+import test from \"ava\";\n+\n+import { arbitrary, constants, macros } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n+  for (const { value } of constants.illegalArguments) {\n+    t.throws(() => quoteAll([value], options), { instanceOf: TypeError });\n+    t.throws(() => quoteAll(value, options), { instanceOf: TypeError });\n+  }\n+});\n+\n+test(macros.prototypePollution, (_, payload) => {\n+  quoteAll([\"a\"], payload);\n+});"
        },
        {
          "filename": "test/integration/quote-all/powershell-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for Windows\n+ * PowerShell (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShell}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binPowerShell)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/powershell.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for Windows\n+ * PowerShell (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShellNoExt}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binPowerShellNoExt)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote-all/valid.test.js",
          "status": "renamed",
          "additions": 2,
          "deletions": 34,
          "patch": "@@ -1,25 +1,14 @@\n /**\n- * @overview Contains integration tests for `shescape.quoteAll`.\n+ * @overview Contains integration tests for valid use of `shescape.quoteAll`.\n  * @license MIT\n  */\n \n import { testProp } from \"@fast-check/ava\";\n-import test from \"ava\";\n import * as fc from \"fast-check\";\n \n-import { arbitrary, constants, generate, macros } from \"./_.js\";\n+import { arbitrary } from \"../_.js\";\n \n import { quote, quoteAll as quoteAll } from \"shescape\";\n-import { quoteAll as quoteAllCjs } from \"../../index.cjs\";\n-\n-for (const shell of generate.platformShells()) {\n-  test(`inputs are quoted for ${shell}`, (t) => {\n-    for (const { expected, input, options } of generate.quoteExamples(shell)) {\n-      const result = quoteAll([input], options);\n-      t.deepEqual(result, [expected]);\n-    }\n-  });\n-}\n \n testProp(\n   \"return values\",\n@@ -71,24 +60,3 @@ testProp(\n     t.is(entry, quote(arg, options));\n   },\n );\n-\n-testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n-  for (const { value } of constants.illegalArguments) {\n-    t.throws(() => quoteAll([value], options), { instanceOf: TypeError });\n-    t.throws(() => quoteAll(value, options), { instanceOf: TypeError });\n-  }\n-});\n-\n-test(macros.prototypePollution, (_, payload) => {\n-  quoteAll([\"a\"], payload);\n-});\n-\n-testProp(\n-  \"esm === cjs\",\n-  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n-  (t, args, options) => {\n-    const resultEsm = quoteAll(args, options);\n-    const resultCjs = quoteAllCjs(args, options);\n-    t.deepEqual(resultEsm, resultCjs);\n-  },\n-);"
        },
        {
          "filename": "test/integration/quote-all/zsh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quoteAll` for the Z shell\n+ * (Zsh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quoteAll } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binZsh}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binZsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = quoteAll([input], options);\n+    t.deepEqual(result, [expected]);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote.test.js",
          "status": "removed",
          "additions": 0,
          "deletions": 50,
          "patch": "@@ -1,50 +0,0 @@\n-/**\n- * @overview Contains integration tests for `shescape.quote`.\n- * @license MIT\n- */\n-\n-import { testProp } from \"@fast-check/ava\";\n-import test from \"ava\";\n-\n-import { arbitrary, constants, generate, macros } from \"./_.js\";\n-\n-import { quote as quote } from \"shescape\";\n-import { quote as quoteCjs } from \"../../index.cjs\";\n-\n-for (const shell of generate.platformShells()) {\n-  test(`input is quoted for ${shell}`, (t) => {\n-    for (const { expected, input, options } of generate.quoteExamples(shell)) {\n-      const result = quote(input, options);\n-      t.is(result, expected);\n-    }\n-  });\n-}\n-\n-testProp(\n-  \"return value\",\n-  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n-  (t, arg, options) => {\n-    const result = quote(arg, options);\n-    t.is(typeof result, \"string\");\n-  },\n-);\n-\n-testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n-  for (const { value } of constants.illegalArguments) {\n-    t.throws(() => quote(value, options), { instanceOf: TypeError });\n-  }\n-});\n-\n-test(macros.prototypePollution, (_, payload) => {\n-  quote(\"a\", payload);\n-});\n-\n-testProp(\n-  \"esm === cjs\",\n-  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n-  (t, arg, options) => {\n-    const resultEsm = quote(arg, options);\n-    const resultCjs = quoteCjs(arg, options);\n-    t.is(resultEsm, resultCjs);\n-  },\n-);"
        },
        {
          "filename": "test/integration/quote/bash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.escape` for the\n+ * Bourne-again shell (Bash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { escape } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binBash}`, (t) => {\n+  for (const scenario of generate.escapeExamples(constants.binBash)) {\n+    const { expected, input, options } = scenario;\n+    const result = escape(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote/cmd-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for the Windows\n+ * Command Prompt (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmd}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binCmd)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote/cmd.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for the Windows\n+ * Command Prompt (without extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binCmdNoExt}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binCmdNoExt)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote/commonjs.test.js",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+/**\n+ * @overview Contains integration tests for the CommonJS version of\n+ * `shescape.quote`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+\n+import { arbitrary } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+import { quote as quoteCjs } from \"../../../index.cjs\";\n+\n+testProp(\n+  \"esm === cjs\",\n+  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n+  (t, arg, options) => {\n+    const resultEsm = quote(arg, options);\n+    const resultCjs = quoteCjs(arg, options);\n+    t.is(resultEsm, resultCjs);\n+  },\n+);"
        },
        {
          "filename": "test/integration/quote/csh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for the C shell\n+ * (csh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binCsh}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binCsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote/dash.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for the Debian\n+ * Almquist shell (Dash).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binDash}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binDash)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote/invalid.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for invalid use of `shescape.quote`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+import test from \"ava\";\n+\n+import { arbitrary, constants, macros } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+testProp(\"invalid arguments\", [arbitrary.shescapeOptions()], (t, options) => {\n+  for (const { value } of constants.illegalArguments) {\n+    t.throws(() => quote(value, options), { instanceOf: TypeError });\n+  }\n+});\n+\n+test(macros.prototypePollution, (_, payload) => {\n+  quote(\"a\", payload);\n+});"
        },
        {
          "filename": "test/integration/quote/powershell-exe.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for Windows\n+ * PowerShell (with extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShell}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binPowerShell)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote/powershell.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for Windows\n+ * PowerShell (without extension).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test : test.skip;\n+\n+runTest(`input is escaped for ${constants.binPowerShellNoExt}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binPowerShellNoExt)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/quote/valid.test.js",
          "status": "added",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -0,0 +1,19 @@\n+/**\n+ * @overview Contains integration tests for valid use of `shescape.quote`.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+\n+import { arbitrary } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+testProp(\n+  \"return value\",\n+  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n+  (t, arg, options) => {\n+    const result = quote(arg, options);\n+    t.is(typeof result, \"string\");\n+  },\n+);"
        },
        {
          "filename": "test/integration/quote/zsh.test.js",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+/**\n+ * @overview Contains integration tests for `shescape.quote` for the Z shell\n+ * (Zsh).\n+ * @license MIT\n+ */\n+\n+import test from \"ava\";\n+\n+import { constants, generate } from \"../_.js\";\n+\n+import { quote } from \"shescape\";\n+\n+const runTest = constants.isWindows ? test.skip : test;\n+\n+runTest(`input is escaped for ${constants.binZsh}`, (t) => {\n+  for (const scenario of generate.quoteExamples(constants.binZsh)) {\n+    const { expected, input, options } = scenario;\n+    const result = quote(input, options);\n+    t.is(result, expected);\n+  }\n+});"
        },
        {
          "filename": "test/integration/testing/commonjs.test.js",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+/**\n+ * @overview Contains integration tests for the CommonJS version of the testing\n+ * implementation of shescape.\n+ * @license MIT\n+ */\n+\n+import { testProp } from \"@fast-check/ava\";\n+import * as fc from \"fast-check\";\n+\n+import { arbitrary } from \"../_.js\";\n+\n+import { shescape as stubscape } from \"shescape/testing\";\n+import { shescape as stubscapeCjs } from \"../../../testing.cjs\";\n+\n+testProp(\n+  \"escape (esm === cjs)\",\n+  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n+  (t, arg, options) => {\n+    const resultEsm = stubscape.escape(arg, options);\n+    const resultCjs = stubscapeCjs.escape(arg, options);\n+    t.is(resultEsm, resultCjs);\n+  },\n+);\n+\n+testProp(\n+  \"escapeAll (esm === cjs)\",\n+  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n+  (t, args, options) => {\n+    const resultEsm = stubscape.escapeAll(args, options);\n+    const resultCjs = stubscapeCjs.escapeAll(args, options);\n+    t.deepEqual(resultEsm, resultCjs);\n+  },\n+);\n+\n+testProp(\n+  \"quote (esm === cjs)\",\n+  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n+  (t, arg, options) => {\n+    const resultEsm = stubscape.quote(arg, options);\n+    const resultCjs = stubscapeCjs.quote(arg, options);\n+    t.is(resultEsm, resultCjs);\n+  },\n+);\n+\n+testProp(\n+  \"quoteAll (esm === cjs)\",\n+  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n+  (t, args, options) => {\n+    const resultEsm = stubscape.quoteAll(args, options);\n+    const resultCjs = stubscapeCjs.quoteAll(args, options);\n+    t.deepEqual(resultEsm, resultCjs);\n+  },\n+);"
        },
        {
          "filename": "test/integration/testing/functional.test.js",
          "status": "renamed",
          "additions": 1,
          "deletions": 42,
          "patch": "@@ -7,11 +7,10 @@\n import { testProp } from \"@fast-check/ava\";\n import * as fc from \"fast-check\";\n \n-import { arbitrary } from \"./_.js\";\n+import { arbitrary } from \"../_.js\";\n \n import * as shescape from \"shescape\";\n import { shescape as stubscape } from \"shescape/testing\";\n-import { shescape as stubscapeCjs } from \"../../testing.cjs\";\n \n testProp(\n   \"escape (stubscape ~ shescape)\",\n@@ -104,43 +103,3 @@ testProp(\n     t.is(typeof result, typeof stubResult);\n   },\n );\n-\n-testProp(\n-  \"escape (esm === cjs)\",\n-  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n-  (t, arg, options) => {\n-    const resultEsm = stubscape.escape(arg, options);\n-    const resultCjs = stubscapeCjs.escape(arg, options);\n-    t.is(resultEsm, resultCjs);\n-  },\n-);\n-\n-testProp(\n-  \"escapeAll (esm === cjs)\",\n-  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n-  (t, args, options) => {\n-    const resultEsm = stubscape.escapeAll(args, options);\n-    const resultCjs = stubscapeCjs.escapeAll(args, options);\n-    t.deepEqual(resultEsm, resultCjs);\n-  },\n-);\n-\n-testProp(\n-  \"quote (esm === cjs)\",\n-  [arbitrary.shescapeArg(), arbitrary.shescapeOptions()],\n-  (t, arg, options) => {\n-    const resultEsm = stubscape.quote(arg, options);\n-    const resultCjs = stubscapeCjs.quote(arg, options);\n-    t.is(resultEsm, resultCjs);\n-  },\n-);\n-\n-testProp(\n-  \"quoteAll (esm === cjs)\",\n-  [fc.array(arbitrary.shescapeArg()), arbitrary.shescapeOptions()],\n-  (t, args, options) => {\n-    const resultEsm = stubscape.quoteAll(args, options);\n-    const resultCjs = stubscapeCjs.quoteAll(args, options);\n-    t.deepEqual(resultEsm, resultCjs);\n-  },\n-);"
        },
        {
          "filename": "test/unit/executables/_.js",
          "status": "added",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -0,0 +1,8 @@\n+/**\n+ * @overview Provides testing utilities.\n+ * @license MIT\n+ */\n+\n+import * as arbitrary from \"../../_arbitraries.js\";\n+\n+export { arbitrary };"
        },
        {
          "filename": "test/unit/executables/resolve.test.js",
          "status": "modified",
          "additions": 61,
          "deletions": 10,
          "patch": "@@ -3,9 +3,13 @@\n  * @license MIT\n  */\n \n+import { testProp } from \"@fast-check/ava\";\n import test from \"ava\";\n+import * as fc from \"fast-check\";\n import sinon from \"sinon\";\n \n+import { arbitrary } from \"./_.js\";\n+\n import { resolveExecutable } from \"../../../src/executables.js\";\n \n test.before((t) => {\n@@ -16,7 +20,11 @@ test.before((t) => {\n   t.not(executable, linkedExecutable);\n   t.not(resolvedExecutable, linkedExecutable);\n \n-  t.context = { executable, linkedExecutable, resolvedExecutable };\n+  const env = {\n+    PATH: \"/bin:/usr/bin\",\n+  };\n+\n+  t.context = { env, executable, linkedExecutable, resolvedExecutable };\n });\n \n test.beforeEach((t) => {\n@@ -27,25 +35,68 @@ test.beforeEach((t) => {\n   t.context.deps = { exists, readlink, which };\n });\n \n+testProp(\n+  \"env.PATH is defined\",\n+  [arbitrary.env({ keys: [\"PATH\", \"Path\"] }), fc.string({ minLength: 1 })],\n+  (t, env, envPath) => {\n+    t.context.deps.which.resetHistory();\n+\n+    env.PATH = envPath;\n+\n+    const { executable } = t.context;\n+    const args = { env, executable };\n+\n+    resolveExecutable(args, t.context.deps);\n+    t.is(t.context.deps.which.callCount, 1);\n+    t.true(\n+      t.context.deps.which.calledWithExactly(sinon.match.any, {\n+        path: env.PATH,\n+      }),\n+    );\n+  },\n+);\n+\n+testProp(\n+  \"env.PATH is not defined\",\n+  [arbitrary.env({ keys: [\"PATH\", \"Path\"] }), fc.string({ minLength: 1 })],\n+  (t, env, envPath) => {\n+    t.context.deps.which.resetHistory();\n+\n+    delete env.PATH;\n+    env.Path = envPath;\n+\n+    const { executable } = t.context;\n+    const args = { env, executable };\n+\n+    resolveExecutable(args, t.context.deps);\n+    t.is(t.context.deps.which.callCount, 1);\n+    t.true(\n+      t.context.deps.which.calledWithExactly(sinon.match.any, {\n+        path: env.Path,\n+      }),\n+    );\n+  },\n+);\n+\n test(\"the executable cannot be resolved\", (t) => {\n-  const { executable } = t.context;\n-  const args = { executable };\n+  const { env, executable } = t.context;\n+  const args = { env, executable };\n \n   t.context.deps.which.throws();\n \n   const result = resolveExecutable(args, t.context.deps);\n   t.is(result, executable);\n \n   t.is(t.context.deps.which.callCount, 1);\n-  t.true(t.context.deps.which.calledWithExactly(executable));\n+  t.true(t.context.deps.which.calledWithExactly(executable, sinon.match.any));\n \n   t.is(t.context.deps.exists.callCount, 0);\n   t.is(t.context.deps.readlink.callCount, 0);\n });\n \n test(\"the executable doesn't exist\", (t) => {\n-  const { executable, resolvedExecutable } = t.context;\n-  const args = { executable };\n+  const { env, executable, resolvedExecutable } = t.context;\n+  const args = { env, executable };\n \n   t.context.deps.exists.returns(false);\n   t.context.deps.which.returns(resolvedExecutable);\n@@ -61,8 +112,8 @@ test(\"the executable doesn't exist\", (t) => {\n });\n \n test(\"the executable exists and is not a (sym)link\", (t) => {\n-  const { executable, resolvedExecutable } = t.context;\n-  const args = { executable };\n+  const { env, executable, resolvedExecutable } = t.context;\n+  const args = { env, executable };\n \n   t.context.deps.exists.returns(true);\n   t.context.deps.readlink.throws();\n@@ -79,8 +130,8 @@ test(\"the executable exists and is not a (sym)link\", (t) => {\n });\n \n test(\"the executable exists and is a (sym)link\", (t) => {\n-  const { executable, linkedExecutable, resolvedExecutable } = t.context;\n-  const args = { executable };\n+  const { env, executable, linkedExecutable, resolvedExecutable } = t.context;\n+  const args = { env, executable };\n \n   t.context.deps.exists.returns(true);\n   t.context.deps.readlink.returns(linkedExecutable);"
        },
        {
          "filename": "test/unit/options/parse-options.test.js",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -18,7 +18,7 @@ const arbitraryInput = () =>\n     .tuple(arbitrary.shescapeOptions(), arbitrary.env())\n     .map(([options, env]) => {\n       options = options || {};\n-      return { options, process: { env } };\n+      return { env, options };\n     });\n \n test.beforeEach((t) => {\n@@ -84,7 +84,7 @@ testProp(\n     t.context.deps.getShellName.resetHistory();\n     t.context.deps.getShellName.returns(shellName);\n \n-    const env = args.process.env;\n+    const env = args.env;\n     args.options.shell = providedShell;\n \n     const result = parseOptions(args, t.context.deps);\n@@ -93,7 +93,7 @@ testProp(\n     t.is(t.context.deps.getShellName.callCount, 1);\n     t.true(\n       t.context.deps.getShellName.calledWithExactly(\n-        { shell: defaultShell },\n+        { env, shell: defaultShell },\n         { resolveExecutable },\n       ),\n     );\n@@ -108,14 +108,15 @@ testProp(\n     t.context.deps.getShellName.resetHistory();\n     t.context.deps.getShellName.returns(shellName);\n \n+    const env = args.env;\n     args.options.shell = providedShell;\n \n     const result = parseOptions(args, t.context.deps);\n     t.is(t.context.deps.getDefaultShell.callCount, 0);\n     t.is(t.context.deps.getShellName.callCount, 1);\n     t.true(\n       t.context.deps.getShellName.calledWithExactly(\n-        { shell: providedShell },\n+        { env, shell: providedShell },\n         { resolveExecutable },\n       ),\n     );"
        },
        {
          "filename": "test/unit/unix/index.test.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -106,7 +106,7 @@ testProp(\n     unix.getShellName({ env, shell }, { resolveExecutable });\n     t.true(\n       resolveExecutable.calledWithExactly(\n-        { executable: shell },\n+        { env, executable: shell },\n         {\n           exists: sinon.match.func,\n           readlink: sinon.match.func,"
        },
        {
          "filename": "test/unit/win/index.test.js",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -99,11 +99,15 @@ testProp(\n   \"get shell name for supported shell\",\n   [arbitrary.env(), arbitrary.windowsPath(), arbitrary.windowsShell()],\n   (t, env, basePath, shell) => {\n+    const executable = shell.toLowerCase().endsWith(\".exe\")\n+      ? shell\n+      : `${shell}.exe`;\n+\n     const resolveExecutable = sinon.stub();\n-    resolveExecutable.returns(path.join(basePath, shell));\n+    resolveExecutable.returns(path.join(basePath, executable));\n \n     const result = win.getShellName({ env, shell }, { resolveExecutable });\n-    t.is(result, shell);\n+    t.is(result, executable);\n   },\n );\n \n@@ -133,7 +137,7 @@ testProp(\n     win.getShellName({ env, shell }, { resolveExecutable });\n     t.true(\n       resolveExecutable.calledWithExactly(\n-        { executable: shell },\n+        { env, executable: shell },\n         {\n           exists: sinon.match.func,\n           readlink: sinon.match.func,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 62,
        "unique_directories": 14,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3ed540748a96ea60de3fd87aa87df0fe6c318da3",
            "date": "2025-01-14T05:51:19Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9059dfb495a1e9e85a21e409d2304ed79786ac2d",
            "date": "2025-01-14T05:49:34Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "30dd47f8259ca8c4ad19aef3906ad064afa2302e",
            "date": "2025-01-13T06:14:30Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "236a0c104b0c8060a1c3708c9ade8118150c6ac5",
            "date": "2025-01-09T10:50:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "cc39c562f5320fd11e72ae100b6bdd7aec0e68b8",
            "date": "2025-01-06T09:25:44Z",
            "author_login": "ec-automation-bot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-150",
    "description": "shescape is simple shell escape library for JavaScript. This may impact users that use Shescape on Windows in a threaded context. The vulnerability can result in Shescape escaping (or quoting) for the wrong shell, thus allowing attackers to bypass protections depending on the combination of expected and used shell. This bug has been patched in version 1.7.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-08-23T21:15:09.063",
    "last_modified": "2024-11-21T08:18:57.420",
    "fix_date": "2023-08-21T08:05:50Z"
  },
  "references": [
    {
      "url": "https://github.com/ericcornelissen/shescape/commit/0b976dab645abf45ffd85e74a8c6e51ee2f42d63",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ericcornelissen/shescape/pull/1142",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ericcornelissen/shescape/releases/tag/v1.7.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/ericcornelissen/shescape/security/advisories/GHSA-j55r-787p-m549",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ericcornelissen/shescape/commit/0b976dab645abf45ffd85e74a8c6e51ee2f42d63",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ericcornelissen/shescape/pull/1142",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ericcornelissen/shescape/releases/tag/v1.7.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/ericcornelissen/shescape/security/advisories/GHSA-j55r-787p-m549",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.465972",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shescape",
    "owner": "ericcornelissen",
    "created_at": "2020-11-02T20:23:47Z",
    "updated_at": "2025-01-14T05:51:23Z",
    "pushed_at": "2025-01-14T05:51:21Z",
    "size": 4929,
    "stars": 2,
    "forks": 8,
    "open_issues": 13,
    "watchers": 2,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v0",
      "v1",
      "v2"
    ],
    "languages": {
      "JavaScript": 246667,
      "Shell": 1187
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mpl-2.0"
    },
    "collected_at": "2025-01-14T12:56:31.089601"
  }
}