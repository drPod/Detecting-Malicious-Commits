{
  "cve_id": "CVE-2023-40225",
  "github_data": {
    "repository": "haproxy/haproxy",
    "fix_commit": "6492f1f29d738457ea9f382aca54537f35f9d856",
    "related_commits": [
      "6492f1f29d738457ea9f382aca54537f35f9d856",
      "6492f1f29d738457ea9f382aca54537f35f9d856"
    ],
    "patch_url": "https://github.com/haproxy/haproxy/commit/6492f1f29d738457ea9f382aca54537f35f9d856.patch",
    "fix_commit_details": {
      "sha": "6492f1f29d738457ea9f382aca54537f35f9d856",
      "commit_date": "2023-08-09T06:32:48Z",
      "author": {
        "login": "wtarreau",
        "type": "User",
        "stats": {
          "total_commits": 10312,
          "average_weekly_commits": 9.19892952720785,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 843
        }
      },
      "commit_message": {
        "title": "BUG/MAJOR: http: reject any empty content-length header value",
        "length": 2222,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 126,
        "additions": 120,
        "deletions": 6
      },
      "files": [
        {
          "filename": "reg-tests/http-messaging/h1_to_h1.vtc",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -273,3 +273,29 @@ client c3h1 -connect ${h1_feh1_sock} {\n \t# arrive here.\n \texpect_close\n } -run\n+\n+client c4h1 -connect ${h1_feh1_sock} {\n+\t# this request is invalid and advertises an invalid C-L ending with an\n+        # empty value, which results in a stream error.\n+\ttxreq \\\n+\t  -req \"GET\" \\\n+\t  -url \"/test31.html\" \\\n+          -hdr \"content-length: 0,\" \\\n+          -hdr \"connection: close\"\n+\trxresp\n+\texpect resp.status == 400\n+\texpect_close\n+} -run\n+\n+client c5h1 -connect ${h1_feh1_sock} {\n+\t# this request is invalid and advertises an empty C-L, which results\n+\t# in a stream error.\n+\ttxreq \\\n+\t  -req \"GET\" \\\n+\t  -url \"/test41.html\" \\\n+          -hdr \"content-length:\" \\\n+          -hdr \"connection: close\"\n+\trxresp\n+\texpect resp.status == 400\n+\texpect_close\n+} -run"
        },
        {
          "filename": "reg-tests/http-messaging/h2_to_h1.vtc",
          "status": "modified",
          "additions": 60,
          "deletions": 0,
          "patch": "@@ -9,6 +9,8 @@ barrier b1 cond 2 -cyclic\n barrier b2 cond 2 -cyclic\n barrier b3 cond 2 -cyclic\n barrier b4 cond 2 -cyclic\n+barrier b5 cond 2 -cyclic\n+barrier b6 cond 2 -cyclic\n \n server s1 {\n \trxreq\n@@ -30,6 +32,12 @@ server s1 {\n \n \tbarrier b4 sync\n \t# the next request is never received\n+\n+\tbarrier b5 sync\n+\t# the next request is never received\n+\n+\tbarrier b6 sync\n+\t# the next request is never received\n } -repeat 2 -start\n \n haproxy h1 -conf {\n@@ -119,6 +127,32 @@ client c1h2 -connect ${h1_feh2_sock} {\n \t\ttxdata -data \"this is sent and ignored\"\n \t\trxrst\n \t} -run\n+\n+\t# fifth request is invalid and advertises an invalid C-L ending with an\n+        # empty value, which results in a stream error.\n+\tstream 9 {\n+\t\tbarrier b5 sync\n+\t\ttxreq \\\n+\t\t  -req \"GET\" \\\n+\t\t  -scheme \"https\" \\\n+\t\t  -url \"/test5.html\" \\\n+\t\t  -hdr \"content-length\" \"0,\" \\\n+\t\t  -nostrend\n+\t\trxrst\n+\t} -run\n+\n+\t# sixth request is invalid and advertises an empty C-L, which results\n+\t# in a stream error.\n+\tstream 11 {\n+\t\tbarrier b6 sync\n+\t\ttxreq \\\n+\t\t  -req \"GET\" \\\n+\t\t  -scheme \"https\" \\\n+\t\t  -url \"/test6.html\" \\\n+\t\t  -hdr \"content-length\" \"\" \\\n+\t\t  -nostrend\n+\t\trxrst\n+\t} -run\n } -run\n \n # HEAD requests : don't work well yet\n@@ -261,4 +295,30 @@ client c3h2 -connect ${h1_feh2_sock} {\n \t\ttxdata -data \"this is sent and ignored\"\n \t\trxrst\n \t} -run\n+\n+\t# fifth request is invalid and advertises invalid C-L ending with an\n+        # empty value, which results in a stream error.\n+\tstream 9 {\n+\t\tbarrier b5 sync\n+\t\ttxreq \\\n+\t\t  -req \"POST\" \\\n+\t\t  -scheme \"https\" \\\n+\t\t  -url \"/test25.html\" \\\n+\t\t  -hdr \"content-length\" \"0,\" \\\n+\t\t  -nostrend\n+\t\trxrst\n+\t} -run\n+\n+\t# sixth request is invalid and advertises an empty C-L, which results\n+\t# in a stream error.\n+\tstream 11 {\n+\t\tbarrier b6 sync\n+\t\ttxreq \\\n+\t\t  -req \"POST\" \\\n+\t\t  -scheme \"https\" \\\n+\t\t  -url \"/test26.html\" \\\n+\t\t  -hdr \"content-length\" \"\" \\\n+\t\t  -nostrend\n+\t\trxrst\n+\t} -run\n } -run"
        },
        {
          "filename": "src/h1.c",
          "status": "modified",
          "additions": 17,
          "deletions": 3,
          "patch": "@@ -34,13 +34,20 @@ int h1_parse_cont_len_header(struct h1m *h1m, struct ist *value)\n \tint not_first = !!(h1m->flags & H1_MF_CLEN);\n \tstruct ist word;\n \n-\tword.ptr = value->ptr - 1; // -1 for next loop's pre-increment\n+\tword.ptr = value->ptr;\n \te = value->ptr + value->len;\n \n-\twhile (++word.ptr < e) {\n+\twhile (1) {\n+\t\tif (word.ptr >= e) {\n+\t\t\t/* empty header or empty value */\n+\t\t\tgoto fail;\n+\t\t}\n+\n \t\t/* skip leading delimiter and blanks */\n-\t\tif (unlikely(HTTP_IS_LWS(*word.ptr)))\n+\t\tif (unlikely(HTTP_IS_LWS(*word.ptr))) {\n+\t\t\tword.ptr++;\n \t\t\tcontinue;\n+\t\t}\n \n \t\t/* digits only now */\n \t\tfor (cl = 0, n = word.ptr; n < e; n++) {\n@@ -79,6 +86,13 @@ int h1_parse_cont_len_header(struct h1m *h1m, struct ist *value)\n \t\th1m->flags |= H1_MF_CLEN;\n \t\th1m->curr_len = h1m->body_len = cl;\n \t\t*value = word;\n+\n+\t\t/* Now either n==e and we're done, or n points to the comma,\n+\t\t * and we skip it and continue.\n+\t\t */\n+\t\tif (n++ == e)\n+\t\t\tbreak;\n+\n \t\tword.ptr = n;\n \t}\n \t/* here we've reached the end with a single value or a series of"
        },
        {
          "filename": "src/http.c",
          "status": "modified",
          "additions": 17,
          "deletions": 3,
          "patch": "@@ -707,13 +707,20 @@ int http_parse_cont_len_header(struct ist *value, unsigned long long *body_len,\n \tstruct ist word;\n \tint check_prev = not_first;\n \n-\tword.ptr = value->ptr - 1; // -1 for next loop's pre-increment\n+\tword.ptr = value->ptr;\n \te = value->ptr + value->len;\n \n-\twhile (++word.ptr < e) {\n+\twhile (1) {\n+\t\tif (word.ptr >= e) {\n+\t\t\t/* empty header or empty value */\n+\t\t\tgoto fail;\n+\t\t}\n+\n \t\t/* skip leading delimiter and blanks */\n-\t\tif (unlikely(HTTP_IS_LWS(*word.ptr)))\n+\t\tif (unlikely(HTTP_IS_LWS(*word.ptr))) {\n+\t\t\tword.ptr++;\n \t\t\tcontinue;\n+\t\t}\n \n \t\t/* digits only now */\n \t\tfor (cl = 0, n = word.ptr; n < e; n++) {\n@@ -751,6 +758,13 @@ int http_parse_cont_len_header(struct ist *value, unsigned long long *body_len,\n \t\t/* OK, store this result as the one to be indexed */\n \t\t*body_len = cl;\n \t\t*value = word;\n+\n+\t\t/* Now either n==e and we're done, or n points to the comma,\n+\t\t * and we skip it and continue.\n+\t\t */\n+\t\tif (n++ == e)\n+\t\t\tbreak;\n+\n \t\tword.ptr = n;\n \t\tcheck_prev = 1;\n \t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8919a80da9391e348aa325b44fdae40a35f48dcf",
            "date": "2025-01-14T10:18:24Z",
            "author_login": "Darlelet"
          },
          {
            "sha": "f399dbf70c658107ab0a94a403c26547f6ecea15",
            "date": "2025-01-10T22:56:34Z",
            "author_login": "Darlelet"
          },
          {
            "sha": "4a5d82a97d9269eb17f9b92af6c8a9cd904705cd",
            "date": "2025-01-07T17:22:00Z",
            "author_login": "a-denoyelle"
          },
          {
            "sha": "a2c0c459a4b5e870b64ad6c6393fcd04c5529997",
            "date": "2025-01-07T17:29:23Z",
            "author_login": "a-denoyelle"
          },
          {
            "sha": "a50dd07c16fcca41e7491203aa2c9b20ed8f65b5",
            "date": "2025-01-07T16:57:54Z",
            "author_login": "a-denoyelle"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-444",
    "description": "HAProxy through 2.0.32, 2.1.x and 2.2.x through 2.2.30, 2.3.x and 2.4.x through 2.4.23, 2.5.x and 2.6.x before 2.6.15, 2.7.x before 2.7.10, and 2.8.x before 2.8.2 forwards empty Content-Length headers, violating RFC 9110 section 8.6. In uncommon cases, an HTTP/1 server behind HAProxy may interpret the payload as an extra request.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-10T21:15:10.743",
    "last_modified": "2024-11-21T08:19:02.407",
    "fix_date": "2023-08-09T06:32:48Z"
  },
  "references": [
    {
      "url": "https://cwe.mitre.org/data/definitions/436.html",
      "source": "cve@mitre.org",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://github.com/haproxy/haproxy/commit/6492f1f29d738457ea9f382aca54537f35f9d856",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/haproxy/haproxy/issues/2237",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.haproxy.org/download/2.6/src/CHANGELOG",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://www.haproxy.org/download/2.7/src/CHANGELOG",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://www.haproxy.org/download/2.8/src/CHANGELOG",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://cwe.mitre.org/data/definitions/436.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://github.com/haproxy/haproxy/commit/6492f1f29d738457ea9f382aca54537f35f9d856",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/haproxy/haproxy/issues/2237",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.haproxy.org/download/2.6/src/CHANGELOG",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://www.haproxy.org/download/2.7/src/CHANGELOG",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://www.haproxy.org/download/2.8/src/CHANGELOG",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.419327",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "haproxy",
    "owner": "haproxy",
    "created_at": "2018-04-09T15:17:42Z",
    "updated_at": "2025-01-14T10:41:36Z",
    "pushed_at": "2025-01-14T10:41:32Z",
    "size": 99581,
    "stars": 5154,
    "forks": 811,
    "open_issues": 287,
    "watchers": 5154,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 12058913,
      "C++": 253639,
      "Shell": 108063,
      "Makefile": 68421,
      "Python": 20645,
      "Lua": 16599,
      "Vim Script": 7696,
      "GDB": 7397,
      "SmPL": 6462,
      "Perl": 5554,
      "HTML": 44
    },
    "commit_activity": {
      "total_commits_last_year": 2213,
      "avg_commits_per_week": 42.55769230769231,
      "days_active_last_year": 283
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:33:33.007336"
  }
}