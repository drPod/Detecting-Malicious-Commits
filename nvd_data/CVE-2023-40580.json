{
  "cve_id": "CVE-2023-40580",
  "github_data": {
    "repository": "stellar/freighter",
    "fix_commit": "81f78ba008c41ce631a3d0f9e4449f4bbd90baee",
    "related_commits": [
      "81f78ba008c41ce631a3d0f9e4449f4bbd90baee",
      "81f78ba008c41ce631a3d0f9e4449f4bbd90baee"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "81f78ba008c41ce631a3d0f9e4449f4bbd90baee",
      "commit_date": "2023-08-23T16:10:20Z",
      "author": {
        "login": "piyalbasu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent Javascript from accessing the mnemonic phrase through a private API (#948)",
        "length": 82,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 166,
        "additions": 80,
        "deletions": 86
      },
      "files": [
        {
          "filename": "@shared/api/internal.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -670,8 +670,8 @@ export const signOut = async (): Promise<{\n \n export const showBackupPhrase = async (\n   password: string,\n-): Promise<{ error: string }> => {\n-  let response = { error: \"\" };\n+): Promise<{ mnemonicPhrase: string; error: string }> => {\n+  let response = { mnemonicPhrase: \"\", error: \"\" };\n   try {\n     response = await sendMessageToBackground({\n       password,"
        },
        {
          "filename": "extension/package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"extension\",\n-  \"version\": \"5.3.0\",\n+  \"version\": \"5.3.1\",\n   \"license\": \"Apache-2.0\",\n   \"prettier\": \"@stellar/prettier-config\",\n   \"scripts\": {"
        },
        {
          "filename": "extension/public/static/manifest/v2.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,7 +1,7 @@\n {\n   \"name\": \"Freighter\",\n-  \"version\": \"5.3.0\",\n-  \"version_name\": \"5.3.0\",\n+  \"version\": \"5.3.1\",\n+  \"version_name\": \"5.3.1\",\n   \"description\": \"Freighter is a non-custodial wallet extension that enables you to sign Stellar transactions via your browser.\",\n   \"browser_specific_settings\": {\n     \"gecko\": {"
        },
        {
          "filename": "extension/public/static/manifest/v3.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,7 +1,7 @@\n {\n   \"name\": \"Freighter\",\n-  \"version\": \"5.3.0\",\n-  \"version_name\": \"5.3.0\",\n+  \"version\": \"5.3.1\",\n+  \"version_name\": \"5.3.1\",\n   \"description\": \"Freighter is a non-custodial wallet extension that enables you to sign Stellar transactions via your browser.\",\n   \"background\": {\n     \"service_worker\": \"background.min.js\""
        },
        {
          "filename": "extension/src/background/messageListener/popupMessageListener.ts",
          "status": "modified",
          "additions": 21,
          "deletions": 4,
          "patch": "@@ -583,9 +583,23 @@ export const popupMessageListener = (request: Request, sessionStore: Store) => {\n     };\n   };\n \n-  const getMnemonicPhrase = () => ({\n-    mnemonicPhrase: mnemonicPhraseSelector(sessionStore.getState()),\n-  });\n+  const getMnemonicPhrase = async () => {\n+    const { password } = request;\n+\n+    const keyID = (await getIsHardwareWalletActive())\n+      ? await _getNonHwKeyID()\n+      : (await localStore.getItem(KEY_ID)) || \"\";\n+\n+    try {\n+      await _unlockKeystore({ keyID, password });\n+    } catch (e) {\n+      console.error(e);\n+      return { error: \"Incorrect password\" };\n+    }\n+    return {\n+      mnemonicPhrase: mnemonicPhraseSelector(sessionStore.getState()),\n+    };\n+  };\n \n   const confirmMnemonicPhrase = async () => {\n     const isCorrectPhrase =\n@@ -698,10 +712,13 @@ export const popupMessageListener = (request: Request, sessionStore: Store) => {\n         keyID: (await localStore.getItem(KEY_ID)) || \"\",\n         password,\n       });\n-      return {};\n     } catch (e) {\n       return { error: \"Incorrect Password\" };\n     }\n+\n+    return {\n+      mnemonicPhrase: mnemonicPhraseSelector(sessionStore.getState()),\n+    };\n   };\n \n   const _getLocalStorageAccounts = async (password: string) => {"
        },
        {
          "filename": "extension/src/popup/Router.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -283,7 +283,7 @@ export const Router = () => {\n           <GrantAccess />\n         </PublicKeyRoute>\n         <PublicKeyRoute path={ROUTES.mnemonicPhrase}>\n-          <MnemonicPhrase />\n+          <MnemonicPhrase mnemonicPhrase=\"\" />\n         </PublicKeyRoute>\n         <PublicKeyRoute path={ROUTES.settings} exact>\n           <Settings />"
        },
        {
          "filename": "extension/src/popup/components/Onboarding/index.tsx",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -6,9 +6,11 @@ import { BackButton } from \"popup/basics/buttons/BackButton\";\n import \"./styles.scss\";\n \n export const Onboarding = ({\n+  customBackAction,\n   hasGoBackBtn,\n   children,\n }: {\n+  customBackAction?: () => void;\n   hasGoBackBtn?: boolean;\n   children: React.ReactNode;\n }) => {\n@@ -19,7 +21,7 @@ export const Onboarding = ({\n     <div className=\"Onboarding\">\n       {hasGoBackBtn && !isNewTabSession ? (\n         <div className=\"Onboarding--back\">\n-          <BackButton hasBackCopy />\n+          <BackButton customBackAction={customBackAction} hasBackCopy />\n         </div>\n       ) : null}\n       {children}"
        },
        {
          "filename": "extension/src/popup/components/mnemonicPhrase/DisplayMnemonicPhrase/index.tsx",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,8 +3,6 @@ import { useTranslation } from \"react-i18next\";\n \n import { InfoBlock } from \"popup/basics/InfoBlock\";\n import { Button } from \"popup/basics/buttons/Button\";\n-import { ROUTES } from \"popup/constants/routes\";\n-import { navigateTo } from \"popup/helpers/navigate\";\n \n import {\n   OnboardingScreen,\n@@ -18,8 +16,10 @@ import \"./styles.scss\";\n \n export const DisplayMnemonicPhrase = ({\n   mnemonicPhrase,\n+  setIsConfirmed,\n }: {\n   mnemonicPhrase: string;\n+  setIsConfirmed: (confirmed: boolean) => void;\n }) => {\n   const { t } = useTranslation();\n \n@@ -60,7 +60,7 @@ export const DisplayMnemonicPhrase = ({\n             data-testid=\"display-mnemonic-phrase-next-btn\"\n             fullWidth\n             onClick={() => {\n-              navigateTo(ROUTES.mnemonicPhraseConfirm);\n+              setIsConfirmed(true);\n             }}\n           >\n             {t(\"Next\")}"
        },
        {
          "filename": "extension/src/popup/components/mnemonicPhrase/MnemonicDisplay/index.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -11,7 +11,7 @@ interface generateMnemonicPhraseDisplayProps {\n }\n \n export const generateMnemonicPhraseDisplay = ({\n-  mnemonicPhrase,\n+  mnemonicPhrase = \"\",\n }: generateMnemonicPhraseDisplayProps) =>\n   mnemonicPhrase.split(\" \").map((word: string) => {\n     /* "
        },
        {
          "filename": "extension/src/popup/helpers/useMnemonicPhrase.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 29,
          "patch": "@@ -1,29 +0,0 @@\n-import { useEffect, useState } from \"react\";\n-import { getMnemonicPhrase } from \"@shared/api/internal\";\n-\n-export const useMnemonicPhrase = () => {\n-  const [mnemonicPhrase, setMnemonicPhrase] = useState(\"\");\n-\n-  useEffect(() => {\n-    let res = { mnemonicPhrase: \"\" };\n-\n-    const fetchMnemonicPhrase = async () => {\n-      try {\n-        res = await getMnemonicPhrase();\n-      } catch (e) {\n-        console.error(e);\n-      }\n-\n-      const { mnemonicPhrase: fetchedMnemonicPhrase } = res;\n-      setMnemonicPhrase(fetchedMnemonicPhrase);\n-    };\n-\n-    fetchMnemonicPhrase();\n-\n-    return () => {\n-      setMnemonicPhrase(\"\");\n-    };\n-  }, []);\n-\n-  return mnemonicPhrase;\n-};"
        },
        {
          "filename": "extension/src/popup/views/AccountCreator/index.tsx",
          "status": "modified",
          "additions": 11,
          "deletions": 10,
          "patch": "@@ -1,13 +1,12 @@\n-import React, { useEffect } from \"react\";\n+import React, { useState } from \"react\";\n import { useDispatch, useSelector } from \"react-redux\";\n import { Input, Checkbox, TextLink } from \"@stellar/design-system\";\n import { Field, FieldProps, Formik, Form } from \"formik\";\n import { object as YupObject } from \"yup\";\n import { useTranslation } from \"react-i18next\";\n \n+import { showBackupPhrase } from \"@shared/api/internal\";\n import { Button } from \"popup/basics/buttons/Button\";\n-import { ROUTES } from \"popup/constants/routes\";\n-import { navigateTo } from \"popup/helpers/navigate\";\n import {\n   password as passwordValidator,\n   confirmPassword as confirmPasswordValidator,\n@@ -30,13 +29,16 @@ import {\n import { Header } from \"popup/components/Header\";\n import { PasswordRequirements } from \"popup/components/PasswordRequirements\";\n \n+import { MnemonicPhrase } from \"popup/views/MnemonicPhrase\";\n+\n import \"./styles.scss\";\n \n export const AccountCreator = () => {\n   const publicKey = useSelector(publicKeySelector);\n   const dispatch = useDispatch();\n   const authError = useSelector(authErrorSelector);\n   const { t } = useTranslation();\n+  const [mnemonicPhrase, setMnemonicPhrase] = useState(\"\");\n \n   interface FormValues {\n     password: string;\n@@ -52,6 +54,9 @@ export const AccountCreator = () => {\n \n   const handleSubmit = async (values: FormValues) => {\n     await dispatch(createAccount(values.password));\n+    const res = await showBackupPhrase(values.password);\n+\n+    setMnemonicPhrase(res.mnemonicPhrase);\n   };\n \n   const AccountCreatorSchema = YupObject().shape({\n@@ -60,13 +65,9 @@ export const AccountCreator = () => {\n     termsOfUse: termsofUseValidator,\n   });\n \n-  useEffect(() => {\n-    if (publicKey) {\n-      navigateTo(ROUTES.mnemonicPhrase);\n-    }\n-  }, [publicKey]);\n-\n-  return (\n+  return mnemonicPhrase && publicKey ? (\n+    <MnemonicPhrase mnemonicPhrase={mnemonicPhrase} />\n+  ) : (\n     <>\n       <FullscreenStyle />\n       <Header />"
        },
        {
          "filename": "extension/src/popup/views/DisplayBackupPhrase/index.tsx",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -9,7 +9,6 @@ import { ROUTES } from \"popup/constants/routes\";\n import { Button } from \"popup/basics/buttons/Button\";\n import { navigateTo } from \"popup/helpers/navigate\";\n import { emitMetric } from \"helpers/metrics\";\n-import { useMnemonicPhrase } from \"popup/helpers/useMnemonicPhrase\";\n \n import { METRIC_NAMES } from \"popup/constants/metricsNames\";\n \n@@ -24,7 +23,7 @@ export const DisplayBackupPhrase = () => {\n   const { t } = useTranslation();\n   const [errorMessage, setErrorMessage] = useState(\"\");\n   const [isPhraseUnlocked, setIsPhraseUnlocked] = useState(false);\n-  const mnemonicPhrase = useMnemonicPhrase();\n+  const [mnemonicPhrase, setMnemonicPhrase] = useState(\"\");\n \n   useEffect(() => {\n     emitMetric(\n@@ -51,6 +50,7 @@ export const DisplayBackupPhrase = () => {\n         error_type: res.error,\n       });\n     } else {\n+      setMnemonicPhrase(res.mnemonicPhrase);\n       setIsPhraseUnlocked(true);\n       setErrorMessage(\"\");\n       emitMetric(METRIC_NAMES.backupPhraseSuccess);"
        },
        {
          "filename": "extension/src/popup/views/MnemonicPhrase.tsx",
          "status": "modified",
          "additions": 29,
          "deletions": 23,
          "patch": "@@ -1,46 +1,52 @@\n-import React from \"react\";\n+import React, { useState } from \"react\";\n import { useSelector } from \"react-redux\";\n import shuffle from \"lodash/shuffle\";\n-import { Switch, Redirect } from \"react-router-dom\";\n+import { Redirect } from \"react-router-dom\";\n \n import { APPLICATION_STATE } from \"@shared/constants/applicationState\";\n \n-import { PublicKeyRoute } from \"popup/Router\";\n import { ROUTES } from \"popup/constants/routes\";\n import { FullscreenStyle } from \"popup/components/FullscreenStyle\";\n-import { useMnemonicPhrase } from \"popup/helpers/useMnemonicPhrase\";\n import { Header } from \"popup/components/Header\";\n import { Onboarding } from \"popup/components/Onboarding\";\n import { ConfirmMnemonicPhrase } from \"popup/components/mnemonicPhrase/ConfirmMnemonicPhrase\";\n import { DisplayMnemonicPhrase } from \"popup/components/mnemonicPhrase/DisplayMnemonicPhrase\";\n import { applicationStateSelector } from \"popup/ducks/accountServices\";\n \n-export const MnemonicPhrase = () => {\n-  const mnemonicPhrase = useMnemonicPhrase();\n+interface MnemonicPhraseProps {\n+  mnemonicPhrase: string;\n+}\n+\n+export const MnemonicPhrase = ({\n+  mnemonicPhrase = \"\",\n+}: MnemonicPhraseProps) => {\n   const applicationState = useSelector(applicationStateSelector);\n+  const [isConfirmed, setIsConfirmed] = useState(false);\n \n   if (applicationState === APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED) {\n     return <Redirect to={ROUTES.pinExtension} />;\n   }\n \n   if (mnemonicPhrase) {\n-    return (\n-      <Switch>\n-        <PublicKeyRoute exact path={ROUTES.mnemonicPhrase}>\n-          <Header />\n-          <FullscreenStyle />\n-          <Onboarding>\n-            <DisplayMnemonicPhrase mnemonicPhrase={mnemonicPhrase} />\n-          </Onboarding>\n-        </PublicKeyRoute>\n-        <PublicKeyRoute exact path={ROUTES.mnemonicPhraseConfirm}>\n-          <Header />\n-          <FullscreenStyle />\n-          <Onboarding hasGoBackBtn>\n-            <ConfirmMnemonicPhrase words={shuffle(mnemonicPhrase.split(\" \"))} />\n-          </Onboarding>\n-        </PublicKeyRoute>\n-      </Switch>\n+    return isConfirmed ? (\n+      <>\n+        <Header />\n+        <FullscreenStyle />\n+        <Onboarding customBackAction={() => setIsConfirmed(false)} hasGoBackBtn>\n+          <ConfirmMnemonicPhrase words={shuffle(mnemonicPhrase.split(\" \"))} />\n+        </Onboarding>\n+      </>\n+    ) : (\n+      <>\n+        <Header />\n+        <FullscreenStyle />\n+        <Onboarding>\n+          <DisplayMnemonicPhrase\n+            mnemonicPhrase={mnemonicPhrase}\n+            setIsConfirmed={setIsConfirmed}\n+          />\n+        </Onboarding>\n+      </>\n     );\n   }\n "
        },
        {
          "filename": "extension/src/popup/views/__tests__/MnemonicPhrase.test.tsx",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -27,9 +27,6 @@ jest.mock(\"popup/constants/history\", () => ({\n   },\n }));\n \n-jest.mock(\"popup/helpers/useMnemonicPhrase\", () => ({\n-  useMnemonicPhrase: () => \"dummy mnemonic\",\n-}));\n jest.mock(\"react-router-dom\", () => {\n   const ReactRouter = jest.requireActual(\"react-router-dom\");\n   return {\n@@ -68,7 +65,7 @@ describe.skip(\"MnemonicPhrase\", () => {\n           },\n         }}\n       >\n-        <MnemonicPhrase />\n+        <MnemonicPhrase mnemonicPhrase={MNEMONIC} />\n       </Wrapper>,\n     );\n     await waitFor(() => screen.getByTestId(\"display-mnemonic-phrase\"));\n@@ -96,7 +93,7 @@ describe.skip(\"MnemonicPhrase\", () => {\n             },\n           }}\n         >\n-          <MnemonicPhrase />\n+          <MnemonicPhrase mnemonicPhrase={MNEMONIC} />\n         </Wrapper>,\n       );\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 13,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "84c060657b06c3378cc3da72118dbf2e1b58a3b1",
            "date": "2025-01-17T18:58:15Z",
            "author_login": "aristidesstaffieri"
          },
          {
            "sha": "e1785f379982059da2270e877714c38cf4310557",
            "date": "2025-01-17T17:18:46Z",
            "author_login": "aristidesstaffieri"
          },
          {
            "sha": "fc5e15f98129aaf62289c9cf99d14f1f603db6f8",
            "date": "2025-01-14T19:39:54Z",
            "author_login": "aristidesstaffieri"
          },
          {
            "sha": "0dd4b4aea58a7f118b6481468de8ff409ba3cfc5",
            "date": "2025-01-14T16:47:08Z",
            "author_login": "aristidesstaffieri"
          },
          {
            "sha": "d481df55793db2673b5d6692cd67efce15f8a8da",
            "date": "2025-01-13T23:32:16Z",
            "author_login": "piyalbasu"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-200",
    "description": "Freighter is a Stellar chrome extension. It may be possible for a malicious website to access the recovery mnemonic phrase when the Freighter wallet is unlocked. This vulnerability impacts access control to the mnemonic recovery phrase. This issue was patched in version 5.3.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-25T20:15:08.913",
    "last_modified": "2024-11-21T08:19:45.347",
    "fix_date": "2023-08-23T16:10:20Z"
  },
  "references": [
    {
      "url": "https://github.com/stellar/freighter/commit/81f78ba008c41ce631a3d0f9e4449f4bbd90baee",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/stellar/freighter/pull/948",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/stellar/freighter/security/advisories/GHSA-vqr6-hwg2-775w",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/stellar/freighter/commit/81f78ba008c41ce631a3d0f9e4449f4bbd90baee",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/stellar/freighter/pull/948",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/stellar/freighter/security/advisories/GHSA-vqr6-hwg2-775w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.474376",
    "processing_status": "enhanced"
  }
}