{
  "cve_id": "CVE-2023-40583",
  "github_data": {
    "repository": "libp2p/go-libp2p",
    "fix_commit": "45d3c6fff662ddd6938982e7e9309ad5fa2ad8dd",
    "related_commits": [
      "45d3c6fff662ddd6938982e7e9309ad5fa2ad8dd",
      "45d3c6fff662ddd6938982e7e9309ad5fa2ad8dd"
    ],
    "patch_url": "https://github.com/libp2p/go-libp2p/commit/45d3c6fff662ddd6938982e7e9309ad5fa2ad8dd.patch",
    "fix_commit_details": {
      "sha": "45d3c6fff662ddd6938982e7e9309ad5fa2ad8dd",
      "commit_date": "2023-05-30T18:28:57Z",
      "author": {
        "login": "marten-seemann",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "identify: reject signed peer records on peer ID mismatch",
        "length": 161,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 112,
        "additions": 101,
        "deletions": 11
      },
      "files": [
        {
          "filename": "core/record/envelope.go",
          "status": "modified",
          "additions": 2,
          "deletions": 7,
          "patch": "@@ -106,11 +106,6 @@ func Seal(rec Record, privateKey crypto.PrivKey) (*Envelope, error) {\n //\t  doSomethingWithPeerRecord(peerRec)\n //\t}\n //\n-// Important: you MUST check the error value before using the returned Envelope. In some error\n-// cases, including when the envelope signature is invalid, both the Envelope and an error will\n-// be returned. This allows you to inspect the unmarshalled but invalid Envelope. As a result,\n-// you must not assume that any non-nil Envelope returned from this function is valid.\n-//\n // If the Envelope signature is valid, but no Record type is registered for the Envelope's\n // PayloadType, ErrPayloadTypeNotRegistered will be returned, along with the Envelope and\n // a nil Record.\n@@ -122,12 +117,12 @@ func ConsumeEnvelope(data []byte, domain string) (envelope *Envelope, rec Record\n \n \terr = e.validate(domain)\n \tif err != nil {\n-\t\treturn e, nil, fmt.Errorf(\"failed to validate envelope: %w\", err)\n+\t\treturn nil, nil, fmt.Errorf(\"failed to validate envelope: %w\", err)\n \t}\n \n \trec, err = e.Record()\n \tif err != nil {\n-\t\treturn e, nil, fmt.Errorf(\"failed to unmarshal envelope payload: %w\", err)\n+\t\treturn nil, nil, fmt.Errorf(\"failed to unmarshal envelope payload: %w\", err)\n \t}\n \treturn e, rec, nil\n }"
        },
        {
          "filename": "p2p/protocol/identify/id.go",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -766,10 +766,14 @@ func (ids *idService) consumeMessage(mes *pb.Identify, c network.Conn, isPush bo\n \n \t// add signed addrs if we have them and the peerstore supports them\n \tcab, ok := peerstore.GetCertifiedAddrBook(ids.Host.Peerstore())\n-\tif ok && signedPeerRecord != nil {\n-\t\t_, addErr := cab.ConsumePeerRecord(signedPeerRecord, ttl)\n-\t\tif addErr != nil {\n-\t\t\tlog.Debugf(\"error adding signed addrs to peerstore: %v\", addErr)\n+\tif ok && signedPeerRecord != nil && signedPeerRecord.PublicKey != nil {\n+\t\tid, err := peer.IDFromPublicKey(signedPeerRecord.PublicKey)\n+\t\tif err != nil {\n+\t\t\tlog.Debugf(\"failed to derive peer ID from peer record: %s\", err)\n+\t\t} else if id != c.RemotePeer() {\n+\t\t\tlog.Debugf(\"received signed peer record for unexpected peer ID. expected %s, got %s\", c.RemotePeer(), id)\n+\t\t} else if _, err := cab.ConsumePeerRecord(signedPeerRecord, ttl); err != nil {\n+\t\t\tlog.Debugf(\"error adding signed addrs to peerstore: %v\", err)\n \t\t}\n \t} else {\n \t\tids.Host.Peerstore().AddAddrs(p, lmaddrs, ttl)"
        },
        {
          "filename": "p2p/protocol/identify/id_glass_test.go",
          "status": "modified",
          "additions": 91,
          "deletions": 0,
          "patch": "@@ -2,13 +2,17 @@ package identify\n \n import (\n \t\"context\"\n+\t\"fmt\"\n \t\"testing\"\n \t\"time\"\n \n \t\"github.com/libp2p/go-libp2p/core/network\"\n \t\"github.com/libp2p/go-libp2p/core/peer\"\n+\t\"github.com/libp2p/go-libp2p/core/peerstore\"\n+\trecordPb \"github.com/libp2p/go-libp2p/core/record/pb\"\n \tblhost \"github.com/libp2p/go-libp2p/p2p/host/blank\"\n \tswarmt \"github.com/libp2p/go-libp2p/p2p/net/swarm/testing\"\n+\t\"google.golang.org/protobuf/proto\"\n \n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n@@ -82,3 +86,90 @@ func TestFastDisconnect(t *testing.T) {\n \t// double-check to make sure we didn't actually timeout somewhere.\n \trequire.NoError(t, ctx.Err())\n }\n+\n+func TestWrongSignedPeerRecord(t *testing.T) {\n+\th1 := blhost.NewBlankHost(swarmt.GenSwarm(t))\n+\tdefer h1.Close()\n+\tids, err := NewIDService(h1)\n+\trequire.NoError(t, err)\n+\tids.Start()\n+\tdefer ids.Close()\n+\n+\th2 := blhost.NewBlankHost(swarmt.GenSwarm(t))\n+\tdefer h2.Close()\n+\tids2, err := NewIDService(h2)\n+\trequire.NoError(t, err)\n+\tids2.Start()\n+\tdefer ids2.Close()\n+\n+\th3 := blhost.NewBlankHost(swarmt.GenSwarm(t))\n+\tdefer h2.Close()\n+\tids3, err := NewIDService(h3)\n+\trequire.NoError(t, err)\n+\tids3.Start()\n+\tdefer ids3.Close()\n+\n+\th2.Connect(context.Background(), peer.AddrInfo{ID: h1.ID(), Addrs: h1.Addrs()})\n+\ts, err := h2.NewStream(context.Background(), h1.ID(), IDPush)\n+\trequire.NoError(t, err)\n+\n+\terr = ids3.sendIdentifyResp(s, true)\n+\t// This should fail because the peer record is signed by h3, not h2\n+\trequire.NoError(t, err)\n+\ttime.Sleep(time.Second)\n+\n+\trequire.Empty(t, h1.Peerstore().Addrs(h3.ID()), \"h1 should not know about h3 since it was relayed over h2\")\n+}\n+\n+func TestInvalidSignedPeerRecord(t *testing.T) {\n+\th1 := blhost.NewBlankHost(swarmt.GenSwarm(t))\n+\tdefer h1.Close()\n+\tids, err := NewIDService(h1)\n+\trequire.NoError(t, err)\n+\tids.Start()\n+\tdefer ids.Close()\n+\n+\th2 := blhost.NewBlankHost(swarmt.GenSwarm(t))\n+\tdefer h2.Close()\n+\tids2, err := NewIDService(h2)\n+\trequire.NoError(t, err)\n+\t// We don't want to start the identify service, we'll manage the messages h2\n+\t// sends manually so we can tweak it\n+\t// ids2.Start()\n+\n+\th2.Connect(context.Background(), peer.AddrInfo{ID: h1.ID(), Addrs: h1.Addrs()})\n+\trequire.Empty(t, h1.Peerstore().Addrs(h2.ID()))\n+\n+\ts, err := h2.NewStream(context.Background(), h1.ID(), IDPush)\n+\trequire.NoError(t, err)\n+\n+\tids2.updateSnapshot()\n+\tids2.currentSnapshot.Lock()\n+\tsnapshot := ids2.currentSnapshot.snapshot\n+\tids2.currentSnapshot.Unlock()\n+\tmes := ids2.createBaseIdentifyResponse(s.Conn(), &snapshot)\n+\tfmt.Println(\"Signed record is\", snapshot.record)\n+\tmarshalled, err := snapshot.record.Marshal()\n+\trequire.NoError(t, err)\n+\n+\tvar envPb recordPb.Envelope\n+\terr = proto.Unmarshal(marshalled, &envPb)\n+\trequire.NoError(t, err)\n+\n+\tenvPb.Signature = []byte(\"invalid\")\n+\n+\tmes.SignedPeerRecord, err = proto.Marshal(&envPb)\n+\trequire.NoError(t, err)\n+\n+\terr = ids2.writeChunkedIdentifyMsg(s, mes)\n+\trequire.NoError(t, err)\n+\tfmt.Println(\"Done sending msg\")\n+\ts.Close()\n+\n+\t// Wait a bit for h1 to process the message\n+\ttime.Sleep(1 * time.Second)\n+\n+\tcab, ok := h1.Peerstore().(peerstore.CertifiedAddrBook)\n+\trequire.True(t, ok)\n+\trequire.Nil(t, cab.GetPeerRecord(h2.ID()))\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4651a0d2247ab8964384919083ae42b995fed42a",
            "date": "2025-01-10T18:25:48Z",
            "author_login": "marten-seemann"
          },
          {
            "sha": "a2993c18f7e9a005e23feff49d7f3296188be631",
            "date": "2025-01-10T18:25:24Z",
            "author_login": "sukunrt"
          },
          {
            "sha": "ca611f1c4e1e026d15f37f420ecb00c212112d37",
            "date": "2025-01-10T18:14:35Z",
            "author_login": "sukunrt"
          },
          {
            "sha": "3143db22c6e6b39bedd021ed04e0cdd74b382572",
            "date": "2025-01-10T15:36:52Z",
            "author_login": "MarcoPolo"
          },
          {
            "sha": "2209ae05976df6a1cc2631c961f57549d109008c",
            "date": "2024-12-26T15:37:37Z",
            "author_login": "sukunrt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "libp2p is a networking stack and library modularized out of The IPFS Project, and bundled separately for other tools to use. In go-libp2p, by using signed peer records a malicious actor can store an arbitrary amount of data in a remote node\u2019s memory. This memory does not get garbage collected and so the victim can run out of memory and crash. If users of go-libp2p in production are not monitoring memory consumption over time, it could be a silent attack i.e. the attacker could bring down nodes over a period of time (how long depends on the node resources i.e. a go-libp2p node on a virtual server with 4 gb of memory takes about 90 sec to bring down; on a larger server, it might take a bit longer.) This issue was patched in version 0.27.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-25T21:15:09.000",
    "last_modified": "2024-11-21T08:19:45.753",
    "fix_date": "2023-05-30T18:28:57Z"
  },
  "references": [
    {
      "url": "https://github.com/libp2p/go-libp2p/commit/45d3c6fff662ddd6938982e7e9309ad5fa2ad8dd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/libp2p/go-libp2p/releases/tag/v0.27.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/libp2p/go-libp2p/releases/tag/v0.27.7",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/libp2p/go-libp2p/security/advisories/GHSA-gcq9-qqwx-rgj3",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/libp2p/go-libp2p/commit/45d3c6fff662ddd6938982e7e9309ad5fa2ad8dd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/libp2p/go-libp2p/releases/tag/v0.27.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/libp2p/go-libp2p/releases/tag/v0.27.7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/libp2p/go-libp2p/security/advisories/GHSA-gcq9-qqwx-rgj3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.475416",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "go-libp2p",
    "owner": "libp2p",
    "created_at": "2015-09-30T23:24:32Z",
    "updated_at": "2025-01-13T20:11:32Z",
    "pushed_at": "2025-01-14T08:40:03Z",
    "size": 58847,
    "stars": 6172,
    "forks": 1096,
    "open_issues": 266,
    "watchers": 6172,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 2678094,
      "Shell": 13226,
      "Standard ML": 70
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:02:28.131398"
  }
}