{
  "cve_id": "CVE-2023-40828",
  "github_data": {
    "repository": "pf4j/pf4j",
    "fix_commit": "8e0aa198c4e652cfc1eb9e05ca9b64397f67cc72",
    "related_commits": [
      "8e0aa198c4e652cfc1eb9e05ca9b64397f67cc72",
      "8e0aa198c4e652cfc1eb9e05ca9b64397f67cc72"
    ],
    "patch_url": "https://github.com/pf4j/pf4j/commit/8e0aa198c4e652cfc1eb9e05ca9b64397f67cc72.patch",
    "fix_commit_details": {
      "sha": "8e0aa198c4e652cfc1eb9e05ca9b64397f67cc72",
      "commit_date": "2023-08-16T18:00:59Z",
      "author": {
        "login": "decebals",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add security checks to prevent directory traversal when decompressing (#538)",
        "length": 76,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 74,
        "additions": 70,
        "deletions": 4
      },
      "files": [
        {
          "filename": "pf4j/src/main/java/org/pf4j/util/Unzip.java",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -15,17 +15,17 @@\n  */\n package org.pf4j.util;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n import java.util.zip.ZipInputStream;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  * This class extracts the content of the plugin zip into a directory.\n  * It's a class for only the internal use.\n@@ -75,11 +75,17 @@ public void extract() throws IOException {\n             FileUtils.delete(destination.toPath());\n         }\n \n+        String destinationCanonicalPath = destination.getCanonicalPath();\n         try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source))) {\n             ZipEntry zipEntry;\n             while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n                 File file = new File(destination, zipEntry.getName());\n \n+                String fileCanonicalPath = file.getCanonicalPath();\n+                if (!fileCanonicalPath.startsWith(destinationCanonicalPath)) {\n+                    throw new ZipException(\"The file \"+ zipEntry.getName() + \" is trying to leave the target output directory of \"+ destination);\n+                }\n+\n                 // create intermediary directories - sometimes zip don't add them\n                 File dir = new File(file.getParent());\n "
        },
        {
          "filename": "pf4j/src/test/java/org/pf4j/util/UnzipTest.java",
          "status": "added",
          "additions": 60,
          "deletions": 0,
          "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (C) 2012-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.pf4j.util;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class UnzipTest {\n+\n+    @Test\n+    public void zipSlip() throws IOException {\n+        File zipFile = createMaliciousZipFile();\n+        Path destination = Files.createTempDirectory(\"zipSlip\");\n+\n+        Unzip unzip = new Unzip();\n+        unzip.setSource(zipFile);\n+        unzip.setDestination(destination.toFile());\n+\n+        Exception exception = assertThrows(ZipException.class, unzip::extract);\n+        assertTrue(exception.getMessage().contains(\"is trying to leave the target output directory\"));\n+    }\n+\n+    private File createMaliciousZipFile() throws IOException {\n+        File zipFile = File.createTempFile(\"malicious\", \".zip\");\n+        String maliciousFileName = \"../malicious.sh\";\n+        try (ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile))) {\n+            ZipEntry entry = new ZipEntry(maliciousFileName);\n+            zipOutputStream.putNextEntry(entry);\n+            zipOutputStream.write(\"Malicious content\".getBytes());\n+            zipOutputStream.closeEntry();\n+        }\n+\n+        return zipFile;\n+    }\n+\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "83ac693a3773e77ad10d7a087fc25152b7384184",
            "date": "2024-12-27T20:28:39Z",
            "author_login": "decebals"
          },
          {
            "sha": "d763024aac175c2a5c3bedadc2986dd2111db65b",
            "date": "2024-12-23T20:51:48Z",
            "author_login": "decebals"
          },
          {
            "sha": "1599e856c3a53790503a7c72b7c74001f9eb42d7",
            "date": "2024-12-23T20:39:37Z",
            "author_login": "decebals"
          },
          {
            "sha": "1e3010c111e99676b6c78588d922ff2f83b5223b",
            "date": "2024-12-23T20:22:05Z",
            "author_login": "decebals"
          },
          {
            "sha": "f7af060067ff6f9478478b2ae3a2b7410a5e550d",
            "date": "2024-12-23T20:21:29Z",
            "author_login": "decebals"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "An issue in pf4j pf4j v.3.9.0 and before allows a remote attacker to obtain sensitive information and execute arbitrary code via the expandIfZip method in the extract function.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-28T22:15:09.713",
    "last_modified": "2024-11-21T08:20:11.070",
    "fix_date": "2023-08-16T18:00:59Z"
  },
  "references": [
    {
      "url": "https://github.com/pf4j/pf4j/commit/8e0aa198c4e652cfc1eb9e05ca9b64397f67cc72",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pf4j/pf4j/pull/537",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/pf4j/pf4j/pull/538",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/pf4j/pf4j/commit/8e0aa198c4e652cfc1eb9e05ca9b64397f67cc72",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pf4j/pf4j/pull/537",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/pf4j/pf4j/pull/538",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.480899",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pf4j",
    "owner": "pf4j",
    "created_at": "2012-10-10T13:10:32Z",
    "updated_at": "2025-01-13T15:01:25Z",
    "pushed_at": "2024-12-27T20:29:57Z",
    "size": 1784,
    "stars": 2437,
    "forks": 563,
    "open_issues": 21,
    "watchers": 2437,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 534715,
      "Shell": 1113,
      "Batchfile": 789
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:37:29.324892"
  }
}