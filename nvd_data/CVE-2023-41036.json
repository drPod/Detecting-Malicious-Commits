{
  "cve_id": "CVE-2023-41036",
  "github_data": {
    "repository": "macvim-dev/macvim",
    "fix_commit": "399b43e9e1dbf656a1780e87344f4d3c875e4cda",
    "related_commits": [
      "399b43e9e1dbf656a1780e87344f4d3c875e4cda",
      "399b43e9e1dbf656a1780e87344f4d3c875e4cda"
    ],
    "patch_url": "https://github.com/macvim-dev/macvim/commit/399b43e9e1dbf656a1780e87344f4d3c875e4cda.patch",
    "fix_commit_details": {
      "sha": "399b43e9e1dbf656a1780e87344f4d3c875e4cda",
      "commit_date": "2023-09-12T04:58:18Z",
      "author": {
        "login": "ychin",
        "type": "User",
        "stats": {
          "total_commits": 827,
          "average_weekly_commits": 0.7693023255813953,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 141
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9jgj-jfwg-99fv",
        "length": 109,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 81,
        "additions": 53,
        "deletions": 28
      },
      "files": [
        {
          "filename": "src/MacVim/MMAppController.m",
          "status": "modified",
          "additions": 26,
          "deletions": 10,
          "patch": "@@ -304,7 +304,9 @@ - (id)init\n     // unlikely to fix it, we graciously give them the default connection.)\n     connection = [[NSConnection alloc] initWithReceivePort:[NSPort port]\n                                                   sendPort:nil];\n-    [connection setRootObject:self];\n+    NSProtocolChecker *rootObject = [NSProtocolChecker protocolCheckerWithTarget:self\n+                                                                        protocol:@protocol(MMAppProtocol)];\n+    [connection setRootObject:rootObject];\n     [connection setRequestTimeout:MMRequestTimeout];\n     [connection setReplyTimeout:MMReplyTimeout];\n \n@@ -315,6 +317,20 @@ - (id)init\n     if (![connection registerName:name]) {\n         ASLogCrit(@\"Failed to register connection with name '%@'\", name);\n         [connection release];  connection = nil;\n+\n+        NSAlert *alert = [[NSAlert alloc] init];\n+        [alert addButtonWithTitle:NSLocalizedString(@\"OK\",\n+            @\"Dialog button\")];\n+        [alert setMessageText:NSLocalizedString(@\"MacVim cannot be opened\",\n+            @\"MacVim cannot be opened, title\")];\n+        [alert setInformativeText:[NSString stringWithFormat:NSLocalizedString(\n+            @\"MacVim could not set up its connection. It's likely you already have MacVim opened elsewhere.\",\n+            @\"MacVim already opened, text\")]];\n+        [alert setAlertStyle:NSAlertStyleCritical];\n+        [alert runModal];\n+        [alert release];\n+\n+        [[NSApplication sharedApplication] terminate:nil];\n     }\n \n     // Register help search handler to support search Vim docs via the Help menu\n@@ -859,7 +875,7 @@ - (NSMenuItem *)appMenuItemTemplate\n \n - (void)removeVimController:(id)controller\n {\n-    ASLogDebug(@\"Remove Vim controller pid=%d id=%d (processingFlag=%d)\",\n+    ASLogDebug(@\"Remove Vim controller pid=%d id=%lu (processingFlag=%d)\",\n                [controller pid], [controller vimControllerId], processingFlag);\n \n     NSUInteger idx = [vimControllers indexOfObject:controller];\n@@ -1540,7 +1556,7 @@ - (MMVimController *)keyVimController\n     return nil;\n }\n \n-- (unsigned)connectBackend:(byref in id <MMBackendProtocol>)proxy pid:(int)pid\n+- (unsigned long)connectBackend:(byref in id <MMBackendProtocol>)proxy pid:(int)pid\n {\n     ASLogDebug(@\"pid=%d\", pid);\n \n@@ -1570,21 +1586,21 @@ - (unsigned)connectBackend:(byref in id <MMBackendProtocol>)proxy pid:(int)pid\n }\n \n - (oneway void)processInput:(in bycopy NSArray *)queue\n-              forIdentifier:(unsigned)identifier\n+              forIdentifier:(unsigned long)identifier\n {\n     // NOTE: Input is not handled immediately since this is a distributed\n     // object call and as such can arrive at unpredictable times.  Instead,\n     // queue the input and process it when the run loop is updated.\n \n     if (!(queue && identifier)) {\n-        ASLogWarn(@\"Bad input for identifier=%d\", identifier);\n+        ASLogWarn(@\"Bad input for identifier=%lu\", identifier);\n         return;\n     }\n \n-    ASLogDebug(@\"QUEUE for identifier=%d: <<< %@>>>\", identifier,\n+    ASLogDebug(@\"QUEUE for identifier=%lu: <<< %@>>>\", identifier,\n                debugStringForMessageQueue(queue));\n \n-    NSNumber *key = [NSNumber numberWithUnsignedInt:identifier];\n+    NSNumber *key = [NSNumber numberWithUnsignedLong:identifier];\n     NSArray *q = [inputQueues objectForKey:key];\n     if (q) {\n         q = [q arrayByAddingObjectsFromArray:queue];\n@@ -2715,7 +2731,7 @@ - (void)processInputQueues:(id)sender\n     NSEnumerator *e = [queues keyEnumerator];\n     NSNumber *key;\n     while ((key = [e nextObject])) {\n-        unsigned ukey = [key unsignedIntValue];\n+        unsigned long ukey = [key unsignedLongValue];\n         int i = 0, count = [vimControllers count];\n         for (i = 0; i < count; ++i) {\n             MMVimController *vc = [vimControllers objectAtIndex:i];\n@@ -2737,7 +2753,7 @@ - (void)processInputQueues:(id)sender\n         }\n \n         if (i == count) {\n-            ASLogWarn(@\"No Vim controller for identifier=%d\", ukey);\n+            ASLogWarn(@\"No Vim controller for identifier=%lu\", ukey);\n         }\n     }\n \n@@ -2758,7 +2774,7 @@ - (void)processInputQueues:(id)sender\n \n - (void)addVimController:(MMVimController *)vc\n {\n-    ASLogDebug(@\"Add Vim controller pid=%d id=%d\",\n+    ASLogDebug(@\"Add Vim controller pid=%d id=%lu\",\n             [vc pid], [vc vimControllerId]);\n \n     int pid = [vc pid];"
        },
        {
          "filename": "src/MacVim/MMBackend.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@\n     NSConnection        *connection;\n     NSConnection        *vimServerConnection;\n     id                  appProxy;\n-    unsigned            identifier;\n+    unsigned long       identifier;\n     NSDictionary        *colorDict;\n     NSDictionary        *sysColorDict;\n     NSDictionary        *actionDict;"
        },
        {
          "filename": "src/MacVim/MMVimController.h",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -34,7 +34,7 @@\n #endif\n     >\n {\n-    unsigned            identifier;\n+    unsigned long       identifier;\n     BOOL                isInitialized;\n     MMWindowController  *windowController;\n     id                  backendProxy;\n@@ -58,7 +58,7 @@\n \n - (id)initWithBackend:(id)backend pid:(int)processIdentifier;\n - (void)uninitialize;\n-- (unsigned)vimControllerId;\n+- (unsigned long)vimControllerId;\n - (id)backendProxy;\n - (int)pid;\n - (void)setServerName:(NSString *)name;"
        },
        {
          "filename": "src/MacVim/MMVimController.m",
          "status": "modified",
          "additions": 18,
          "deletions": 13,
          "patch": "@@ -56,8 +56,6 @@\n // Timeout used for setDialogReturn:.\n static NSTimeInterval MMSetDialogReturnTimeout = 1.0;\n \n-static unsigned identifierCounter = 1;\n-\n static BOOL isUnsafeMessage(int msgid);\n \n \n@@ -168,8 +166,15 @@ - (id)initWithBackend:(id)backend pid:(int)processIdentifier\n     if (!(self = [super init]))\n         return nil;\n \n-    // TODO: Come up with a better way of creating an identifier.\n-    identifier = identifierCounter++;\n+    // Use a random identifier. Currently, MMBackend connects using a public\n+    // NSConnection, which has security implications. Using random identifiers\n+    // make it much harder for third-party attacker to spoof.\n+    int secSuccess = SecRandomCopyBytes(kSecRandomDefault, sizeof(identifier), &identifier);\n+    if (secSuccess != errSecSuccess) {\n+        // Don't know what concrete reasons secure random would fail, but just\n+        // as a failsafe, use a less secure option.\n+        identifier = ((unsigned long)arc4random()) << 32 | (unsigned long)arc4random();\n+    }\n \n     windowController =\n         [[MMWindowController alloc] initWithVimController:self];\n@@ -257,7 +262,7 @@ - (void)uninitialize\n     isInitialized = NO;\n }\n \n-- (unsigned)vimControllerId\n+- (unsigned long)vimControllerId\n {\n     return identifier;\n }\n@@ -436,7 +441,7 @@ - (void)sendMessage:(int)msgid data:(NSData *)data\n         [backendProxy processInput:msgid data:data];\n     }\n     @catch (NSException *ex) {\n-        ASLogDebug(@\"processInput:data: failed: pid=%d id=%d msg=%s reason=%@\",\n+        ASLogDebug(@\"processInput:data: failed: pid=%d id=%lu msg=%s reason=%@\",\n                 pid, identifier, MMVimMsgIDStrings[msgid], ex);\n     }\n }\n@@ -468,7 +473,7 @@ - (BOOL)sendMessageNow:(int)msgid data:(NSData *)data\n     }\n     @catch (NSException *ex) {\n         sendOk = NO;\n-        ASLogDebug(@\"processInput:data: failed: pid=%d id=%d msg=%s reason=%@\",\n+        ASLogDebug(@\"processInput:data: failed: pid=%d id=%lu msg=%s reason=%@\",\n                 pid, identifier, MMVimMsgIDStrings[msgid], ex);\n     }\n     @finally {\n@@ -500,7 +505,7 @@ - (NSString *)evaluateVimExpression:(NSString *)expr\n         ASLogDebug(@\"eval(%@)=%@\", expr, eval);\n     }\n     @catch (NSException *ex) {\n-        ASLogDebug(@\"evaluateExpression: failed: pid=%d id=%d reason=%@\",\n+        ASLogDebug(@\"evaluateExpression: failed: pid=%d id=%lu reason=%@\",\n                 pid, identifier, ex);\n     }\n \n@@ -517,7 +522,7 @@ - (id)evaluateVimExpressionCocoa:(NSString *)expr\n                                          errorString:errstr];\n         ASLogDebug(@\"eval(%@)=%@\", expr, eval);\n     } @catch (NSException *ex) {\n-        ASLogDebug(@\"evaluateExpressionCocoa: failed: pid=%d id=%d reason=%@\",\n+        ASLogDebug(@\"evaluateExpressionCocoa: failed: pid=%d id=%lu reason=%@\",\n                 pid, identifier, ex);\n         *errstr = [ex reason];\n     }\n@@ -556,7 +561,7 @@ - (void)processInputQueue:(NSArray *)queue\n         [windowController processInputQueueDidFinish];\n     }\n     @catch (NSException *ex) {\n-        ASLogDebug(@\"Exception: pid=%d id=%d reason=%@\", pid, identifier, ex);\n+        ASLogDebug(@\"Exception: pid=%d id=%lu reason=%@\", pid, identifier, ex);\n     }\n }\n \n@@ -1275,7 +1280,7 @@ - (void)savePanelDidEnd:(NSSavePanel *)panel code:(int)code\n                                                 noteNewRecentFilePath:path];\n     }\n     @catch (NSException *ex) {\n-        ASLogDebug(@\"Exception: pid=%d id=%d reason=%@\", pid, identifier, ex);\n+        ASLogDebug(@\"Exception: pid=%d id=%lu reason=%@\", pid, identifier, ex);\n     }\n     @finally {\n         [conn setRequestTimeout:oldTimeout];\n@@ -1308,7 +1313,7 @@ - (void)alertDidEnd:(MMAlert *)alert code:(int)code context:(void *)context\n         [backendProxy setDialogReturn:ret];\n     }\n     @catch (NSException *ex) {\n-        ASLogDebug(@\"setDialogReturn: failed: pid=%d id=%d reason=%@\",\n+        ASLogDebug(@\"setDialogReturn: failed: pid=%d id=%lu reason=%@\",\n                 pid, identifier, ex);\n     }\n }\n@@ -2089,7 +2094,7 @@ - (void)connectionDidDie:(NSNotification *)notification\n \n - (void)scheduleClose\n {\n-    ASLogDebug(@\"pid=%d id=%d\", pid, identifier);\n+    ASLogDebug(@\"pid=%d id=%lu\", pid, identifier);\n \n     // NOTE!  This message can arrive at pretty much anytime, e.g. while\n     // the run loop is the 'event tracking' mode.  This means that Cocoa may"
        },
        {
          "filename": "src/MacVim/MacVim.h",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -197,9 +197,9 @@ typedef NSString* NSAttributedStringKey;\n // connectBackend:pid: and processInput:forIdentifier:).\n //\n @protocol MMAppProtocol\n-- (unsigned)connectBackend:(byref in id <MMBackendProtocol>)proxy pid:(int)pid;\n+- (unsigned long)connectBackend:(byref in id <MMBackendProtocol>)proxy pid:(int)pid;\n - (oneway void)processInput:(in bycopy NSArray *)queue\n-              forIdentifier:(unsigned)identifier;\n+              forIdentifier:(unsigned long)identifier;\n - (NSArray *)serverList;\n @end\n "
        },
        {
          "filename": "src/MacVim/MacVim.xcodeproj/project.pbxproj",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -74,6 +74,7 @@\n \t\t909894382A56EB1E007B84A3 /* WhatsNew.xib in Resources */ = {isa = PBXBuildFile; fileRef = 909894362A56EB1E007B84A3 /* WhatsNew.xib */; };\n \t\t9098943C2A56ECF6007B84A3 /* MMWhatsNewController.m in Sources */ = {isa = PBXBuildFile; fileRef = 9098943B2A56ECF6007B84A3 /* MMWhatsNewController.m */; };\n \t\t90A33BEA28D563DF003A2E2F /* MMSparkle2Delegate.m in Sources */ = {isa = PBXBuildFile; fileRef = 90A33BE928D563DF003A2E2F /* MMSparkle2Delegate.m */; };\n+\t\t90AF83AB2A8C37F70046DA2E /* Security.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 90AF83A92A8C37F70046DA2E /* Security.framework */; };\n \t\t90B9877D2A579F9500FC95D6 /* WebKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 90B9877B2A579F9500FC95D6 /* WebKit.framework */; settings = {ATTRIBUTES = (Weak, ); }; };\n /* End PBXBuildFile section */\n \n@@ -423,6 +424,7 @@\n \t\t90AF83B62AA15C660046DA2E /* nv_cmds.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; name = nv_cmds.h; path = ../nv_cmds.h; sourceTree = \"<group>\"; };\n \t\t90AF83B72AA15C660046DA2E /* vim9cmds.c */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.c; name = vim9cmds.c; path = ../vim9cmds.c; sourceTree = \"<group>\"; };\n \t\t90AF83B82AA15C660046DA2E /* termdefs.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; name = termdefs.h; path = ../termdefs.h; sourceTree = \"<group>\"; };\n+\t\t90AF83A92A8C37F70046DA2E /* Security.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Security.framework; path = System/Library/Frameworks/Security.framework; sourceTree = SDKROOT; };\n \t\t90B9877B2A579F9500FC95D6 /* WebKit.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = WebKit.framework; path = System/Library/Frameworks/WebKit.framework; sourceTree = SDKROOT; };\n \t\t90F84F1E2521F2270000268B /* ko */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = ko; path = ko.lproj/MainMenu.strings; sourceTree = \"<group>\"; };\n \t\t90F84F232521F6480000268B /* ca */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = ca; path = ca.lproj/MainMenu.strings; sourceTree = \"<group>\"; };\n@@ -462,6 +464,7 @@\n \t\t\tisa = PBXFrameworksBuildPhase;\n \t\t\tbuildActionMask = 2147483647;\n \t\t\tfiles = (\n+\t\t\t\t90AF83AB2A8C37F70046DA2E /* Security.framework in Frameworks */,\n \t\t\t\t90B9877D2A579F9500FC95D6 /* WebKit.framework in Frameworks */,\n \t\t\t\t1DFE25A50C527BC4003000F7 /* PSMTabBarControl.framework in Frameworks */,\n \t\t\t\t8D11072F0486CEB800E47090 /* Cocoa.framework in Frameworks */,\n@@ -650,6 +653,7 @@\n \t\t29B97323FDCFA39411CA2CEA /* Frameworks */ = {\n \t\t\tisa = PBXGroup;\n \t\t\tchildren = (\n+\t\t\t\t90AF83A92A8C37F70046DA2E /* Security.framework */,\n \t\t\t\t90B9877B2A579F9500FC95D6 /* WebKit.framework */,\n \t\t\t\t52A364721C4A5789005757EC /* Sparkle.framework */,\n \t\t\t\t1D8B5A52104AF9FF002E59D5 /* Carbon.framework */,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "954e990db2560fb0fd63c26bd35b066c4125286a",
            "date": "2025-01-09T21:47:48Z",
            "author_login": "ychin"
          },
          {
            "sha": "ebea31e454b9a1731cde845226f2c28ca5c097b1",
            "date": "2025-01-09T21:23:29Z",
            "author_login": "ychin"
          },
          {
            "sha": "2051af1642843426714efc2572c3e270fe0948be",
            "date": "2025-01-09T21:14:34Z",
            "author_login": "ychin"
          },
          {
            "sha": "df4a7d761740d59a4f911c9e13ac620a459cdea6",
            "date": "2025-01-09T21:09:16Z",
            "author_login": "Freed-Wu"
          },
          {
            "sha": "dabc77372ca64b81bca248305a827e20a1a49a0b",
            "date": "2025-01-09T19:27:10Z",
            "author_login": "ychin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-269",
    "description": "Macvim is a text editor for MacOS. Prior to version 178, Macvim makes use of an insecure interprocess communication (IPC) mechanism which could lead to a privilege escalation. Distributed objects are a concept introduced by Apple which allow one program to vend an interface to another program. What is not made clear in the documentation is that this service can vend this interface to any other program on the machine. The impact of exploitation is a privilege escalation to root - this is likely to affect anyone who is not careful about the software they download and use MacVim to edit files that would require root privileges. Version 178 contains a fix for this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-07T04:20:50.427",
    "last_modified": "2024-11-21T08:20:25.713",
    "fix_date": "2023-09-12T04:58:18Z"
  },
  "references": [
    {
      "url": "https://github.com/macvim-dev/macvim/blob/d9de087dddadbfd82fcb5dc9734380a2f829bd0a/src/MacVim/MMAppController.h#L28",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/macvim-dev/macvim/blob/d9de087dddadbfd82fcb5dc9734380a2f829bd0a/src/MacVim/MMBackend.h",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/macvim-dev/macvim/commit/399b43e9e1dbf656a1780e87344f4d3c875e4cda",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/macvim-dev/macvim/security/advisories/GHSA-9jgj-jfwg-99fv",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/macvim-dev/macvim/blob/d9de087dddadbfd82fcb5dc9734380a2f829bd0a/src/MacVim/MMAppController.h#L28",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/macvim-dev/macvim/blob/d9de087dddadbfd82fcb5dc9734380a2f829bd0a/src/MacVim/MMBackend.h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/macvim-dev/macvim/commit/399b43e9e1dbf656a1780e87344f4d3c875e4cda",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/macvim-dev/macvim/security/advisories/GHSA-9jgj-jfwg-99fv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.992598",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "macvim",
    "owner": "macvim-dev",
    "created_at": "2012-09-01T17:14:57Z",
    "updated_at": "2025-01-14T06:21:57Z",
    "pushed_at": "2025-01-09T22:38:34Z",
    "size": 224411,
    "stars": 7574,
    "forks": 682,
    "open_issues": 178,
    "watchers": 7574,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Vim Script": 20065529,
      "C": 14423334,
      "Objective-C": 1374226,
      "Roff": 576385,
      "Makefile": 491486,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 172015,
      "Shell": 101439,
      "Java": 85446,
      "PostScript": 64070,
      "Module Management System": 56127,
      "Python": 51802,
      "XS": 51261,
      "Ruby": 40825,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Rich Text Format": 24384,
      "Swift": 22385,
      "Awk": 19481,
      "Batchfile": 18475,
      "DIGITAL Command Language": 10835,
      "Prolog": 10274,
      "HTML": 6885,
      "KRL": 4206,
      "MATLAB": 1970,
      "AppleScript": 1828,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 1127,
      "Tcl": 745,
      "Lua": 738,
      "CSS": 434,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1911,
      "avg_commits_per_week": 36.75,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T15:49:51.895797"
  }
}