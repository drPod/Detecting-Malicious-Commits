{
  "cve_id": "CVE-2023-41037",
  "github_data": {
    "repository": "openpgpjs/openpgpjs",
    "fix_commit": "6b43e02a254853f5ff508ebd1b07541f78b7c566",
    "related_commits": [
      "6b43e02a254853f5ff508ebd1b07541f78b7c566",
      "6b43e02a254853f5ff508ebd1b07541f78b7c566"
    ],
    "patch_url": "https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566.patch",
    "fix_commit_details": {
      "sha": "6b43e02a254853f5ff508ebd1b07541f78b7c566",
      "commit_date": "2023-08-29T14:49:28Z",
      "author": {
        "login": "larabr",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-ch3c-v47x-4pgp",
        "length": 114,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 28,
        "additions": 27,
        "deletions": 1
      },
      "files": [
        {
          "filename": "src/cleartext.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -174,7 +174,7 @@ function verifyHeaders(headers, packetlist) {\n   let oneHeader = null;\n   let hashAlgos = [];\n   headers.forEach(function(header) {\n-    oneHeader = header.match(/Hash: (.+)/); // get header value\n+    oneHeader = header.match(/^Hash: (.+)$/); // get header value\n     if (oneHeader) {\n       oneHeader = oneHeader[1].replace(/\\s/g, ''); // remove whitespace\n       oneHeader = oneHeader.split(',');"
        },
        {
          "filename": "test/general/signature.js",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -999,6 +999,32 @@ eSvSZutLuKKbidSYMLhWROPlwKc2GU2ws6PrLZAyCAel/lU=\n     expect(await sigInfo.verified).to.be.true;\n   });\n \n+  it('Reject cleartext message with arbitrary text added around hash headers (spoofed cleartext message)', async function() {\n+    await expect(openpgp.readCleartextMessage({ cleartextMessage: `-----BEGIN PGP SIGNED MESSAGE-----\n+This is not signed but you might think it is Hash: SHA512\n+\n+This is signed\n+-----BEGIN PGP SIGNATURE-----\n+\n+wnUEARYKACcFgmTsqxgJkEhlqJkkhIfRFiEEUA/OS4xZ3EwNC5l8SGWomSSE\n+h9EAALyPAQDDR0IYwq/5XMVSYPWojBamM4NhcP5arA656ALIq9cJYAEAlw0H\n+Fk7EflUZzngwY4lBzYAfnNBjEjc30xD/ddo+rwE=\n+=O7mt\n+-----END PGP SIGNATURE-----` })).to.be.rejectedWith(/Only \"Hash\" header allowed/);\n+\n+    await expect(openpgp.readCleartextMessage({ cleartextMessage: `-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA512\\vThis is not signed but you might think it is \n+\n+This is signed\n+-----BEGIN PGP SIGNATURE-----\n+\n+wnUEARYKACcFgmTsqxgJkEhlqJkkhIfRFiEEUA/OS4xZ3EwNC5l8SGWomSSE\n+h9EAALyPAQDDR0IYwq/5XMVSYPWojBamM4NhcP5arA656ALIq9cJYAEAlw0H\n+Fk7EflUZzngwY4lBzYAfnNBjEjc30xD/ddo+rwE=\n+=O7mt\n+-----END PGP SIGNATURE-----` })).to.be.rejectedWith(/Unknown hash algorithm in armor header/);\n+  });\n+\n   it('Supports non-human-readable notations', async function() {\n     const { packets: [signature] } = await openpgp.readSignature({ armoredSignature: signature_with_non_human_readable_notations });\n     // There are no human-readable notations so `notations` property does not"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b2bd8a0fdd12902484d65baa4ae4eb7f146fcd32",
            "date": "2024-11-25T10:13:15Z",
            "author_login": "larabr"
          },
          {
            "sha": "6db98f1e47b3dd737443f4af24d8c57aa70d5eb8",
            "date": "2024-11-22T12:49:17Z",
            "author_login": "larabr"
          },
          {
            "sha": "8e5da7897183dd52633148996a052f9ecd9d3ae3",
            "date": "2024-11-22T12:41:47Z",
            "author_login": "larabr"
          },
          {
            "sha": "a5d894f514bf0fa8c7c15322d5652fddc29379a8",
            "date": "2024-11-22T11:57:19Z",
            "author_login": "larabr"
          },
          {
            "sha": "a16160fc660b8f46b8bb2e9ca4ff4981b9a1f183",
            "date": "2024-11-22T11:10:30Z",
            "author_login": "larabr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-347",
    "description": "OpenPGP.js is a JavaScript implementation of the OpenPGP protocol. In affected versions OpenPGP Cleartext Signed Messages are cryptographically signed messages where the signed text is readable without special tools. These messages typically contain a \"Hash: ...\" header declaring the hash algorithm used to compute the signature digest. OpenPGP.js up to v5.9.0 ignored any data preceding the \"Hash: ...\" texts when verifying the signature. As a result, malicious parties could add arbitrary text to a third-party Cleartext Signed Message, to lead the victim to believe that the arbitrary text was signed. A user or application is vulnerable to said attack vector if it verifies the CleartextMessage by only checking the returned `verified` property, discarding the associated `data` information, and instead _visually trusting_ the contents of the original message. Since `verificationResult.data` would always contain the actual signed data, users and apps that check this information are not vulnerable. Similarly, given a CleartextMessage object, retrieving the data using `getText()` or the `text` field returns only the contents that are considered when verifying the signature. Finally, re-armoring a CleartextMessage object (using `armor()` will also result in a \"sanitised\" version, with the extraneous text being removed. This issue has been addressed in version 5.10.1 (current stable version) which will reject messages when calling `openpgp.readCleartextMessage()` and in version 4.10.11 (legacy version) which will will reject messages when calling `openpgp.cleartext.readArmored()`. Users are advised to upgrade. Users unable to upgrade should check the contents of `verificationResult.data` to see what data was actually signed, rather than visually trusting the contents of the armored message.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-29T17:15:13.003",
    "last_modified": "2024-11-21T08:20:25.840",
    "fix_date": "2023-08-29T14:49:28Z"
  },
  "references": [
    {
      "url": "https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-ch3c-v47x-4pgp",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-ch3c-v47x-4pgp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.483297",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openpgpjs",
    "owner": "openpgpjs",
    "created_at": "2011-11-13T10:36:43Z",
    "updated_at": "2025-01-14T10:17:00Z",
    "pushed_at": "2024-11-25T10:13:15Z",
    "size": 43755,
    "stars": 5726,
    "forks": 800,
    "open_issues": 23,
    "watchers": 5726,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 1790297,
      "TypeScript": 35717,
      "HTML": 1056,
      "Shell": 320
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T13:31:49.648837"
  }
}