{
  "cve_id": "CVE-2023-41041",
  "github_data": {
    "repository": "Graylog2/graylog2-server",
    "fix_commit": "bb88f3d0b2b0351669ab32c60b595ab7242a3fe3",
    "related_commits": [
      "bb88f3d0b2b0351669ab32c60b595ab7242a3fe3",
      "bb88f3d0b2b0351669ab32c60b595ab7242a3fe3"
    ],
    "patch_url": "https://github.com/Graylog2/graylog2-server/commit/bb88f3d0b2b0351669ab32c60b595ab7242a3fe3.patch",
    "fix_commit_details": {
      "sha": "bb88f3d0b2b0351669ab32c60b595ab7242a3fe3",
      "commit_date": "2023-07-05T10:26:03Z",
      "author": {
        "login": "bernd",
        "type": "User",
        "stats": {
          "total_commits": 1752,
          "average_weekly_commits": 2.302233902759527,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 366
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-3fqm-frhg-7c85",
        "length": 169,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 142,
        "additions": 111,
        "deletions": 31
      },
      "files": [
        {
          "filename": "changelog/unreleased/ghsa-3fqm-frhg-7c85.toml",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+type = \"security\"\n+message = \"Fix stale session cache after logout. [GHSA-3fqm-frhg-7c85](https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-3fqm-frhg-7c85)\""
        },
        {
          "filename": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java",
          "status": "modified",
          "additions": 26,
          "deletions": 17,
          "patch": "@@ -28,14 +28,12 @@\n import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import org.apache.commons.lang.StringUtils;\n-import org.apache.shiro.SecurityUtils;\n import org.apache.shiro.authz.annotation.RequiresAuthentication;\n import org.apache.shiro.authz.annotation.RequiresPermissions;\n import org.apache.shiro.authz.permission.WildcardPermission;\n import org.apache.shiro.mgt.DefaultSecurityManager;\n import org.apache.shiro.session.Session;\n-import org.apache.shiro.session.mgt.DefaultSessionManager;\n-import org.apache.shiro.session.mgt.eis.SessionDAO;\n+import org.apache.shiro.subject.Subject;\n import org.graylog.security.UserContext;\n import org.graylog.security.permissions.GRNPermission;\n import org.graylog2.audit.AuditEventTypes;\n@@ -61,6 +59,7 @@\n import org.graylog2.security.AccessTokenService;\n import org.graylog2.security.MongoDBSessionService;\n import org.graylog2.security.MongoDbSession;\n+import org.graylog2.security.UserSessionTerminationService;\n import org.graylog2.shared.rest.resources.RestResource;\n import org.graylog2.shared.security.RestPermissions;\n import org.graylog2.shared.users.ChangeUserRequest;\n@@ -137,6 +136,8 @@ public class UsersResource extends RestResource {\n     private final RoleService roleService;\n     private final MongoDBSessionService sessionService;\n     private final SearchQueryParser searchQueryParser;\n+    private final UserSessionTerminationService sessionTerminationService;\n+    private final DefaultSecurityManager securityManager;\n \n     protected static final ImmutableMap<String, SearchQueryField> SEARCH_FIELD_MAPPING = ImmutableMap.<String, SearchQueryField>builder()\n             .put(UserOverviewDTO.FIELD_ID, SearchQueryField.create(\"_id\", SearchQueryField.Type.OBJECT_ID))\n@@ -150,12 +151,15 @@ public UsersResource(UserManagementService userManagementService,\n                          PaginatedUserService paginatedUserService,\n                          AccessTokenService accessTokenService,\n                          RoleService roleService,\n-                         MongoDBSessionService sessionService) {\n+                         MongoDBSessionService sessionService,\n+                         UserSessionTerminationService sessionTerminationService, DefaultSecurityManager securityManager) {\n         this.userManagementService = userManagementService;\n         this.accessTokenService = accessTokenService;\n         this.roleService = roleService;\n         this.sessionService = sessionService;\n         this.paginatedUserService = paginatedUserService;\n+        this.sessionTerminationService = sessionTerminationService;\n+        this.securityManager = securityManager;\n         this.searchQueryParser = new SearchQueryParser(UserOverviewDTO.FIELD_FULL_NAME, SEARCH_FIELD_MAPPING);\n     }\n \n@@ -439,8 +443,8 @@ public void changeUser(@ApiParam(name = \"userId\", value = \"The ID of the user to\n         if (isPermitted(\"*\")) {\n             final Long sessionTimeoutMs = cr.sessionTimeoutMs();\n             if (Objects.nonNull(sessionTimeoutMs) && sessionTimeoutMs != 0 && (user.getSessionTimeoutMs() != sessionTimeoutMs)) {\n-                    updateExistingSession(user, sessionTimeoutMs);\n-                    user.setSessionTimeoutMs(sessionTimeoutMs);\n+                user.setSessionTimeoutMs(sessionTimeoutMs);\n+                terminateSessions(user);\n             }\n         }\n \n@@ -451,17 +455,22 @@ public void changeUser(@ApiParam(name = \"userId\", value = \"The ID of the user to\n         userManagementService.update(user, cr);\n     }\n \n-    private void updateExistingSession(User user, long newSessionTimeOut) {\n-        AllUserSessions allUserSessions = AllUserSessions.create(sessionService);\n-        allUserSessions.forUser(user).ifPresent(userSession -> {\n-            userSession.setTimeout(newSessionTimeOut);\n-            Session session = sessionService.daoToSimpleSession(userSession);\n-\n-            DefaultSecurityManager securityManager = (DefaultSecurityManager) SecurityUtils.getSecurityManager();\n-            DefaultSessionManager sessionManager = (DefaultSessionManager) securityManager.getSessionManager();\n-            SessionDAO sessionDAO = sessionManager.getSessionDAO();\n-            sessionDAO.update(session);\n-        });\n+    private void terminateSessions(User user) {\n+        final List<Session> allSessions = sessionTerminationService.getActiveSessionsForUser(user);\n+\n+        final Subject subject = getSubject();\n+        final Session currentSession = subject.getSession(false);\n+        final User currentUser = getCurrentUser();\n+\n+        if (currentSession != null && currentUser != null && user.getId().equals(currentUser.getId())) {\n+            // Stop all sessions but handle the current session differently by issuing a proper logout\n+            allSessions.stream()\n+                    .filter(session -> !session.getId().equals(currentSession.getId()))\n+                    .forEach(Session::stop);\n+            securityManager.logout(subject);\n+        } else {\n+            allSessions.forEach(Session::stop);\n+        }\n     }\n \n     private boolean rolesContainAdmin(List<String> roles) {"
        },
        {
          "filename": "graylog2-server/src/main/java/org/graylog2/security/MongoDBSessionServiceImpl.java",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "patch": "@@ -27,6 +27,8 @@\n import org.bson.types.ObjectId;\n import org.graylog2.database.MongoConnection;\n import org.graylog2.database.PersistedServiceImpl;\n+import org.graylog2.events.ClusterEventBus;\n+import org.graylog2.plugin.database.Persisted;\n \n import javax.annotation.Nullable;\n import javax.inject.Inject;\n@@ -36,9 +38,12 @@\n \n @Singleton\n public class MongoDBSessionServiceImpl extends PersistedServiceImpl implements MongoDBSessionService {\n+    private final ClusterEventBus eventBus;\n+\n     @Inject\n-    public MongoDBSessionServiceImpl(MongoConnection mongoConnection) {\n+    public MongoDBSessionServiceImpl(MongoConnection mongoConnection, ClusterEventBus clusterEventBus) {\n         super(mongoConnection);\n+        this.eventBus = clusterEventBus;\n \n         final MongoDatabase database = mongoConnection.getMongoDatabase();\n         final MongoCollection<Document> sessions = database.getCollection(MongoDbSession.COLLECTION_NAME);\n@@ -84,4 +89,12 @@ public SimpleSession daoToSimpleSession(MongoDbSession sessionDAO) {\n         return session;\n     }\n \n+    @Override\n+    public <T extends Persisted> int destroy(T model) {\n+        int affectedDocs = super.destroy(model);\n+        if (affectedDocs != 0 && model instanceof MongoDbSession session) {\n+            eventBus.post(new SessionDeletedEvent(session.getSessionId()));\n+        }\n+        return affectedDocs;\n+    }\n }"
        },
        {
          "filename": "graylog2-server/src/main/java/org/graylog2/security/MongoDbSessionDAO.java",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "patch": "@@ -23,6 +23,8 @@\n import com.github.rholder.retry.WaitStrategies;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n import com.mongodb.DuplicateKeyException;\n import org.apache.shiro.session.Session;\n import org.apache.shiro.session.mgt.SimpleSession;\n@@ -44,8 +46,19 @@ public class MongoDbSessionDAO extends CachingSessionDAO {\n     private final MongoDBSessionService mongoDBSessionService;\n \n     @Inject\n-    public MongoDbSessionDAO(MongoDBSessionService mongoDBSessionService) {\n+    public MongoDbSessionDAO(MongoDBSessionService mongoDBSessionService, EventBus eventBus) {\n         this.mongoDBSessionService = mongoDBSessionService;\n+        eventBus.register(this);\n+    }\n+\n+    @SuppressWarnings(\"unused\")\n+    @Subscribe\n+    public void sessionDeleted(SessionDeletedEvent event) {\n+        final Session cachedSession = getCachedSession(event.sessionId());\n+        if (cachedSession != null) {\n+            LOG.debug(\"Removing deleted session from cache.\");\n+            uncache(cachedSession);\n+        }\n     }\n \n     @Override"
        },
        {
          "filename": "graylog2-server/src/main/java/org/graylog2/security/SessionDeletedEvent.java",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+package org.graylog2.security;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public record SessionDeletedEvent(@JsonProperty(\"session_id\") String sessionId) {\n+}"
        },
        {
          "filename": "graylog2-server/src/main/java/org/graylog2/security/UserSessionTerminationService.java",
          "status": "modified",
          "additions": 8,
          "deletions": 7,
          "patch": "@@ -39,6 +39,7 @@\n import javax.inject.Singleton;\n import java.io.Serializable;\n import java.util.EnumSet;\n+import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -140,15 +141,15 @@ public void runGlobalSessionTermination() {\n         clusterConfigService.write(GlobalTerminationRevisionConfig.withCurrentRevision());\n     }\n \n+    public List<Session> getActiveSessionsForUser(User user) {\n+        return getSessionIDsForUser(user).stream().map(this::getActiveSessionForID).flatMap(Optional::stream).toList();\n+    }\n+\n     private void terminateSessionsForUser(User user) {\n         try {\n-            final Set<String> sessionIds = getSessionIDsForUser(user);\n-\n-            for (final String sessionId : sessionIds) {\n-                getActiveSessionForID(sessionId).ifPresent(session -> {\n-                    LOG.info(\"Terminating session for user <{}/{}>\", user.getName(), user.getId());\n-                    session.stop();\n-                });\n+            for (final Session session : getActiveSessionsForUser(user)) {\n+                LOG.info(\"Terminating session for user <{}/{}>\", user.getName(), user.getId());\n+                session.stop();\n             }\n         } catch (Exception e) {\n             LOG.error(\"Couldn't terminate session for user <{}/{}>\", user.getName(), user.getId(), e);"
        },
        {
          "filename": "graylog2-server/src/test/java/org/graylog2/rest/resources/users/UsersResourceTest.java",
          "status": "modified",
          "additions": 13,
          "deletions": 4,
          "patch": "@@ -17,6 +17,7 @@\n package org.graylog2.rest.resources.users;\n \n import com.google.common.collect.ImmutableSet;\n+import org.apache.shiro.mgt.DefaultSecurityManager;\n import org.apache.shiro.subject.Subject;\n import org.bson.types.ObjectId;\n import org.graylog.testing.mongodb.MongoDBInstance;\n@@ -29,6 +30,7 @@\n import org.graylog2.security.AccessTokenService;\n import org.graylog2.security.MongoDBSessionService;\n import org.graylog2.security.PasswordAlgorithmFactory;\n+import org.graylog2.security.UserSessionTerminationService;\n import org.graylog2.security.hashing.SHA1HashPasswordAlgorithm;\n import org.graylog2.shared.security.Permissions;\n import org.graylog2.shared.security.RestPermissions;\n@@ -88,15 +90,20 @@ public class UsersResourceTest {\n     private Subject subject;\n     @Mock\n     private UserManagementService userManagementService;\n+    @Mock\n+    private UserSessionTerminationService sessionTerminationService;\n+    @Mock\n+    private DefaultSecurityManager securityManager;\n \n     UserImplFactory userImplFactory;\n \n     @Before\n     public void setUp() throws Exception {\n         userImplFactory = new UserImplFactory(new Configuration(),\n-                                              new Permissions(ImmutableSet.of(new RestPermissions())));\n+                new Permissions(ImmutableSet.of(new RestPermissions())));\n         usersResource = new TestUsersResource(userManagementService, paginatedUserService, accessTokenService,\n-                                              roleService, sessionService, new HttpConfiguration(), subject);\n+                roleService, sessionService, new HttpConfiguration(), subject,\n+                sessionTerminationService, securityManager);\n     }\n \n     /**\n@@ -137,8 +144,10 @@ public static class TestUsersResource extends UsersResource {\n         public TestUsersResource(UserManagementService userManagementService, PaginatedUserService paginatedUserService,\n                                  AccessTokenService accessTokenService, RoleService roleService,\n                                  MongoDBSessionService sessionService, HttpConfiguration configuration,\n-                                 Subject subject) {\n-            super(userManagementService, paginatedUserService, accessTokenService, roleService, sessionService);\n+                                 Subject subject, UserSessionTerminationService sessionTerminationService,\n+                                 DefaultSecurityManager securityManager) {\n+            super(userManagementService, paginatedUserService, accessTokenService, roleService, sessionService,\n+                    sessionTerminationService, securityManager);\n             this.subject = subject;\n             super.configuration = configuration;\n         }"
        },
        {
          "filename": "graylog2-web-interface/src/components/users/TimeoutInput.tsx",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -18,8 +18,9 @@ import * as React from 'react';\n import { useState, useEffect } from 'react';\n import PropTypes from 'prop-types';\n \n-import { Row, Col, HelpBlock, Input } from 'components/bootstrap';\n+import { Row, Col, HelpBlock, Input, Alert } from 'components/bootstrap';\n import TimeoutUnitSelect from 'components/users/TimeoutUnitSelect';\n+import { Icon } from 'components/common';\n \n import { MS_DAY, MS_HOUR, MS_MINUTE, MS_SECOND } from './timeoutConstants';\n \n@@ -84,6 +85,16 @@ const TimeoutInput = ({ value: propsValue, onChange }: Props) => {\n            labelClassName=\"col-sm-3\"\n            wrapperClassName=\"col-sm-9\"\n            label=\"Sessions Timeout\">\n+      <Row className=\"no-bm\">\n+        <Col xs={12}>\n+          <Alert bsStyle=\"info\">\n+            <Icon name=\"info-circle\" />{' '}<b>Changing the session timeout</b><br />\n+            Changing the timeout setting for sessions will log the user out of Graylog and will invalidate all their\n+            current sessions. If you are changing the setting for your own user, you will be logged out at the moment\n+            of saving the setting. In that case, make sure to save any pending changes before changing the timeout.\n+          </Alert>\n+        </Col>\n+      </Row>\n       <>\n         <Input type=\"checkbox\"\n                id=\"session-timeout-never\""
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2b4b6ca466aa9e89de7278d0859f0cfb472ce18d",
            "date": "2025-01-13T09:49:09Z",
            "author_login": "maxiadlovskii"
          },
          {
            "sha": "88cf8be3de9e0cec6ac785a59eb273c7e27cd980",
            "date": "2025-01-10T16:54:08Z",
            "author_login": "gally47"
          },
          {
            "sha": "94563cb9d7b7c40e9883e8e957d7cb5d64e108a6",
            "date": "2025-01-10T16:26:07Z",
            "author_login": "thll"
          },
          {
            "sha": "6aa0a9412ed7fb3f2a74d9c248fb64db2bf73719",
            "date": "2025-01-10T16:09:40Z",
            "author_login": "danotorrey"
          },
          {
            "sha": "549c8b57400422f78df1b6c07a654f61dbac94f9",
            "date": "2025-01-10T14:57:40Z",
            "author_login": "linuspahl"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-613",
    "description": "Graylog is a free and open log management platform. In a multi-node Graylog cluster, after a user has explicitly logged out, a user session may still be used for API requests until it has reached its original expiry time. Each node maintains an in-memory cache of user sessions. Upon a cache-miss, the session is loaded from the database. After that, the node operates solely on the cached session. Modifications to sessions will update the cached version as well as the session persisted in the database. However, each node maintains their isolated version of the session. When the user logs out, the session is removed from the node-local cache and deleted from the database. The other nodes will however still use the cached session. These nodes will only fail to accept the session id if they intent to update the session in the database. They will then notice that the session is gone. This is true for most API requests originating from user interaction with the Graylog UI because these will lead to an update of the session's \"last access\" timestamp. If the session update is however prevented by setting the `X-Graylog-No-Session-Extension:true` header in the request, the node will consider the (cached) session valid until the session is expired according to its timeout setting. No session identifiers are leaked. After a user has logged out, the UI shows the login screen again, which gives the user the impression that their session is not valid anymore. However, if the session becomes compromised later, it can still be used to perform API requests against the Graylog cluster. The time frame for this is limited to the configured session lifetime, starting from the time when the user logged out. This issue has been addressed in versions 5.0.9 and 5.1.3. Users are advised to upgrade.\n\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-08-30T22:15:10.043",
    "last_modified": "2024-11-21T08:20:26.350",
    "fix_date": "2023-07-05T10:26:03Z"
  },
  "references": [
    {
      "url": "https://github.com/Graylog2/graylog2-server/commit/bb88f3d0b2b0351669ab32c60b595ab7242a3fe3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-3fqm-frhg-7c85",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/Graylog2/graylog2-server/commit/bb88f3d0b2b0351669ab32c60b595ab7242a3fe3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-3fqm-frhg-7c85",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.491084",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "graylog2-server",
    "owner": "Graylog2",
    "created_at": "2010-05-17T21:27:02Z",
    "updated_at": "2025-01-14T06:48:55Z",
    "pushed_at": "2025-01-14T13:34:14Z",
    "size": 185308,
    "stars": 7506,
    "forks": 1070,
    "open_issues": 1824,
    "watchers": 7506,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "0.20",
      "0.90",
      "0.91",
      "0.92",
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "2.5",
      "3.0",
      "3.1",
      "3.2",
      "3.3",
      "4.0",
      "4.1",
      "4.2",
      "4.3",
      "5.0",
      "5.1",
      "5.2",
      "6.0",
      "6.1"
    ],
    "languages": {
      "Java": 21292066,
      "TypeScript": 9326951,
      "JavaScript": 656465,
      "CSS": 61522,
      "FreeMarker": 30120,
      "Shell": 12442,
      "ANTLR": 8936,
      "Python": 5277,
      "Lua": 3659,
      "Dockerfile": 3425,
      "Less": 92
    },
    "commit_activity": {
      "total_commits_last_year": 2337,
      "avg_commits_per_week": 44.94230769230769,
      "days_active_last_year": 243
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:46:08.608084"
  }
}