{
  "cve_id": "CVE-2023-41046",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "edc52579eeaab1b4514785c134044671a1ecd839",
    "related_commits": [
      "edc52579eeaab1b4514785c134044671a1ecd839",
      "edc52579eeaab1b4514785c134044671a1ecd839"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/edc52579eeaab1b4514785c134044671a1ecd839.patch",
    "fix_commit_details": {
      "sha": "edc52579eeaab1b4514785c134044671a1ecd839",
      "commit_date": "2023-05-02T14:24:47Z",
      "author": {
        "login": "michitux",
        "type": "User",
        "stats": {
          "total_commits": 378,
          "average_weekly_commits": 0.39622641509433965,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 108
        }
      },
      "commit_message": {
        "title": "XWIKI-20847/XWIKI-20848: Improve Velocity execution in TextAreaClass",
        "length": 209,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 372,
        "additions": 345,
        "deletions": 27
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/objects/classes/TextAreaClass.java",
          "status": "modified",
          "additions": 102,
          "deletions": 27,
          "patch": "@@ -34,7 +34,11 @@\n import org.xwiki.edit.EditorManager;\n import org.xwiki.rendering.syntax.Syntax;\n import org.xwiki.rendering.syntax.SyntaxContent;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.ContextualAuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.stability.Unstable;\n+import org.xwiki.xml.XMLUtils;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiDocument;\n@@ -47,6 +51,9 @@\n \n public class TextAreaClass extends StringClass\n {\n+    private static final String FAILED_VELOCITY_EXECUTION_WARNING =\n+        \"Failed to execute velocity code in text area property [{}]: [{}]\";\n+\n     /**\n      * Possible values for the editor meta property.\n      * <p>\n@@ -437,47 +444,115 @@ public void displayView(StringBuffer buffer, String name, String prefix, BaseCol\n         if (contentType == ContentType.PURE_TEXT) {\n             super.displayView(buffer, name, prefix, object, context);\n         } else if (contentType == ContentType.VELOCITY_CODE) {\n-            StringBuffer result = new StringBuffer();\n-            super.displayView(result, name, prefix, object, context);\n-            if (getObjectDocumentSyntax(object, context).equals(Syntax.XWIKI_1_0)) {\n-                buffer.append(context.getWiki().parseContent(result.toString(), context));\n-            } else {\n-                // Don't do anything since this mode is deprecated and not supported in the new rendering.\n-                buffer.append(result);\n-            }\n+            displayVelocityCode(buffer, name, prefix, object, context);\n         } else {\n-            BaseProperty property = (BaseProperty) object.safeget(name);\n+            BaseProperty<?> property = (BaseProperty<?>) object.safeget(name);\n             if (property != null) {\n                 String content = property.toText();\n                 XWikiDocument sdoc = getObjectDocument(object, context);\n \n+                if (contentType == ContentType.VELOCITYWIKI) {\n+                    content = maybeEvaluateContent(name, isolated, content, sdoc);\n+                }\n+\n                 if (sdoc != null) {\n-                    if (contentType == ContentType.VELOCITYWIKI) {\n-                        // Start with a pass of Velocity\n-                        // TODO: maybe make velocity+wiki a syntax so that getRenderedContent can directly take care\n-                        // of that\n-                        VelocityEvaluator velocityEvaluator = Utils.getComponent(VelocityEvaluator.class);\n-                        content = velocityEvaluator.evaluateVelocityNoException(content,\n+                    sdoc = ensureContentAuthorIsMetadataAuthor(sdoc);\n+\n+                    buffer.append(\n+                        context.getDoc().getRenderedContent(content, sdoc.getSyntax(), isRestricted(), sdoc,\n+                            isolated, context));\n+                } else {\n+                    buffer.append(XMLUtils.escapeElementText(content));\n+                }\n+            }\n+        }\n+    }\n+\n+    private static XWikiDocument ensureContentAuthorIsMetadataAuthor(XWikiDocument sdoc)\n+    {\n+        XWikiDocument result;\n+\n+        // Make sure the right author is used to execute the textarea\n+        // Clone the document to avoid changing the cached document instance\n+        if (!Objects.equals(sdoc.getAuthors().getEffectiveMetadataAuthor(), sdoc.getAuthors().getContentAuthor())) {\n+            result = sdoc.clone();\n+            result.getAuthors().setContentAuthor(sdoc.getAuthors().getEffectiveMetadataAuthor());\n+        } else {\n+            result = sdoc;\n+        }\n+\n+        return result;\n+    }\n+\n+    private String maybeEvaluateContent(String name, boolean isolated, String content, XWikiDocument sdoc)\n+    {\n+        if (sdoc != null) {\n+            // Start with a pass of Velocity\n+            // TODO: maybe make velocity+wiki a syntax so that getRenderedContent can directly take care\n+            // of that\n+            AuthorExecutor authorExecutor = Utils.getComponent(AuthorExecutor.class);\n+            VelocityEvaluator velocityEvaluator = Utils.getComponent(VelocityEvaluator.class);\n+            try {\n+                return authorExecutor.call(() -> {\n+                    String result;\n+                    // Check script right inside the author executor as otherwise the context author might not be\n+                    // correct.\n+                    if (isDocumentAuthorAllowedToEvaluateScript(sdoc)) {\n+                        result = velocityEvaluator.evaluateVelocityNoException(content,\n                             isolated ? sdoc.getDocumentReference() : null);\n+                    } else {\n+                        result = content;\n                     }\n+                    return result;\n+                }, sdoc.getAuthorReference(), sdoc.getDocumentReference());\n+            } catch (Exception e) {\n+                LOGGER.warn(FAILED_VELOCITY_EXECUTION_WARNING, name, ExceptionUtils.getRootCauseMessage(e));\n+            }\n+        }\n \n-                    // Make sure the right author is used to execute the textarea\n-                    // Clone the document to void messaging with the cache\n-                    if (!Objects.equals(sdoc.getAuthors().getEffectiveMetadataAuthor(),\n-                        sdoc.getAuthors().getContentAuthor())) {\n-                        sdoc = sdoc.clone();\n-                        sdoc.getAuthors().setContentAuthor(sdoc.getAuthors().getEffectiveMetadataAuthor());\n-                    }\n+        return content;\n+    }\n \n-                    buffer.append(context.getDoc().getRenderedContent(content, sdoc.getSyntax(), isRestricted(), sdoc,\n-                        isolated, context));\n-                } else {\n-                    buffer.append(content);\n-                }\n+    private void displayVelocityCode(StringBuffer buffer, String name, String prefix, BaseCollection object,\n+        XWikiContext context)\n+    {\n+        StringBuffer result = new StringBuffer();\n+        super.displayView(result, name, prefix, object, context);\n+        XWikiDocument sdoc = getObjectDocument(object, context);\n+        if (getObjectDocumentSyntax(object, context).equals(Syntax.XWIKI_1_0) && sdoc != null) {\n+            try {\n+                Utils.getComponent(AuthorExecutor.class).call(() -> {\n+                    // Check script right inside the author executor as otherwise the context author might not be\n+                    // correct.\n+                    if (isDocumentAuthorAllowedToEvaluateScript(sdoc)) {\n+                        buffer.append(context.getWiki().parseContent(result.toString(), context));\n+                    } else {\n+                        buffer.append(result);\n+                    }\n+                    return null;\n+                }, sdoc.getAuthorReference(), sdoc.getDocumentReference());\n+            } catch (Exception e) {\n+                LOGGER.warn(FAILED_VELOCITY_EXECUTION_WARNING, name, ExceptionUtils.getRootCauseMessage(e));\n+                buffer.append(result);\n             }\n+        } else {\n+            // Don't do anything since this mode is deprecated and not supported in the new rendering.\n+            buffer.append(result);\n         }\n     }\n \n+    private boolean isDocumentAuthorAllowedToEvaluateScript(XWikiDocument document)\n+    {\n+        boolean isAllowed = !isRestricted() && !document.isRestricted();\n+\n+        if (isAllowed) {\n+            ContextualAuthorizationManager authorization = Utils.getComponent(ContextualAuthorizationManager.class);\n+            isAllowed = authorization.hasAccess(Right.SCRIPT);\n+        }\n+\n+        return isAllowed;\n+    }\n+\n     private XWikiDocument getObjectDocument(BaseCollection object, XWikiContext context)\n     {\n         try {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/objects/classes/TextAreaClassTest.java",
          "status": "added",
          "additions": 243,
          "deletions": 0,
          "patch": "@@ -0,0 +1,243 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package com.xpn.xwiki.objects.classes;\n+\n+import javax.inject.Provider;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.xwiki.model.document.DocumentAuthors;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.rendering.syntax.Syntax;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.user.GuestUserReference;\n+import org.xwiki.user.SuperAdminUserReference;\n+\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.internal.render.OldRendering;\n+import com.xpn.xwiki.internal.security.authorization.DefaultAuthorExecutor;\n+import com.xpn.xwiki.internal.velocity.VelocityEvaluator;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.test.MockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.same;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit tests for the {@link TextAreaClass} class.\n+ *\n+ * @version $Id$\n+ */\n+@OldcoreTest\n+@ComponentList({ DefaultAuthorExecutor.class })\n+class TextAreaClassTest\n+{\n+    private static final String PROPERTY_NAME = \"test\";\n+\n+    @InjectMockitoOldcore\n+    private MockitoOldcore oldcore;\n+\n+    @MockComponent\n+    private Provider<OldRendering> oldRenderingProvider;\n+\n+    @MockComponent\n+    private VelocityEvaluator velocityEvaluator;\n+\n+    @RegisterExtension\n+    private final LogCaptureExtension logCaptureExtension = new LogCaptureExtension();\n+\n+    @Test\n+    void viewWikiText()\n+    {\n+        // Use a spy, so we don't need to mess around with clone-support in a mock.\n+        XWikiDocument spyDocument = getSpyDocument();\n+\n+        TextAreaClass textAreaClass = new TextAreaClass();\n+        textAreaClass.setContentType(TextAreaClass.ContentType.WIKI_TEXT);\n+        BaseObject object = new BaseObject();\n+        object.setOwnerDocument(spyDocument);\n+        object.setLargeStringValue(PROPERTY_NAME, \"**Test bold**\");\n+        StringBuffer buffer = new StringBuffer();\n+        String renderingResult = \"<p><strong>Test bold</strong></p>\";\n+        doAnswer(invocationOnMock -> {\n+            XWikiDocument sDoc = invocationOnMock.getArgument(3);\n+            // Verify that the content author is set to the metadata author.\n+            assertEquals(GuestUserReference.INSTANCE, sDoc.getAuthors().getContentAuthor());\n+            return renderingResult;\n+        }).when(spyDocument).getRenderedContent(anyString(), any(Syntax.class), anyBoolean(), any(XWikiDocument.class),\n+            anyBoolean(), any(XWikiContext.class));\n+        textAreaClass.displayView(buffer, PROPERTY_NAME, \"\", object, true, this.oldcore.getXWikiContext());\n+\n+        verify(spyDocument).getRenderedContent(anyString(), any(Syntax.class), anyBoolean(),\n+            any(XWikiDocument.class), anyBoolean(), any(XWikiContext.class));\n+\n+        assertEquals(renderingResult, buffer.toString());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void viewVelocityCode(boolean allowExecution)\n+    {\n+        XWikiDocument spyDocument = getSpyDocument();\n+        // Velocity code is only supported in XWiki 1.0.\n+        spyDocument.setSyntax(Syntax.XWIKI_1_0);\n+\n+        TextAreaClass textAreaClass = new TextAreaClass();\n+        textAreaClass.setContentType(TextAreaClass.ContentType.VELOCITY_CODE);\n+\n+        BaseObject object = new BaseObject();\n+        object.setOwnerDocument(spyDocument);\n+        String velocityCode = \"#set($x = 1) $1 & 1\";\n+        object.setLargeStringValue(PROPERTY_NAME, velocityCode);\n+        StringBuffer buffer = new StringBuffer();\n+\n+        when(this.oldcore.getMockContextualAuthorizationManager().hasAccess(Right.SCRIPT)).then(invocationOnMock -> {\n+            // Verify that the content author is set to the metadata author.\n+            XWikiDocument sDoc = (XWikiDocument) this.oldcore.getXWikiContext().get(XWikiDocument.CKEY_SDOC);\n+            assertEquals(GuestUserReference.INSTANCE, sDoc.getAuthors().getContentAuthor());\n+            return allowExecution;\n+        });\n+\n+        String renderingResult = \"1 &#38; 1\";\n+        OldRendering oldRendering = mock();\n+        String renderingInput = velocityCode.replace(\"&\", \"&#38;\");\n+        when(oldRendering.parseContent(renderingInput, this.oldcore.getXWikiContext()))\n+            .thenReturn(renderingResult);\n+        when(this.oldRenderingProvider.get()).thenReturn(oldRendering);\n+\n+        textAreaClass.displayView(buffer, PROPERTY_NAME, \"\", object, true, this.oldcore.getXWikiContext());\n+\n+        if (allowExecution) {\n+            assertEquals(renderingResult, buffer.toString());\n+        } else {\n+            assertEquals(renderingInput, buffer.toString());\n+            verify(oldRendering, never()).parseContent(anyString(), any());\n+        }\n+\n+        verify(this.oldcore.getMockContextualAuthorizationManager()).hasAccess(Right.SCRIPT);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(booleans = { true, false })\n+    void viewVelocityWiki(boolean allowExecution)\n+    {\n+        XWikiDocument spyDocument = getSpyDocument();\n+\n+        TextAreaClass textAreaClass = new TextAreaClass();\n+        textAreaClass.setContentType(TextAreaClass.ContentType.VELOCITYWIKI);\n+\n+        BaseObject object = new BaseObject();\n+        object.setOwnerDocument(spyDocument);\n+        String velocityCode = \"#set($x = \\\"bold\\\") **$1**\";\n+        object.setLargeStringValue(PROPERTY_NAME, velocityCode);\n+        StringBuffer buffer = new StringBuffer();\n+\n+        when(this.oldcore.getMockContextualAuthorizationManager().hasAccess(Right.SCRIPT)).then(invocationOnMock -> {\n+            // Verify that the content author is set to the metadata author.\n+            XWikiDocument sDoc = (XWikiDocument) this.oldcore.getXWikiContext().get(XWikiDocument.CKEY_SDOC);\n+            assertEquals(GuestUserReference.INSTANCE, sDoc.getAuthors().getContentAuthor());\n+            return allowExecution;\n+        });\n+\n+        String velocityResult = \"**bold**\";\n+        when(this.velocityEvaluator.evaluateVelocityNoException(velocityCode, spyDocument.getDocumentReference()))\n+            .thenReturn(velocityResult);\n+\n+        String renderingResult = \"<p><strong>bold</strong></p>\";\n+\n+        // Mock the rendering of the result of the Velocity code. Check that the content author is set to the\n+        // metadata author.\n+        doAnswer(invocationOnMock -> {\n+            // Verify that the input is as expected.\n+            if (allowExecution) {\n+                assertEquals(velocityResult, invocationOnMock.getArgument(0));\n+            } else {\n+                assertEquals(velocityCode, invocationOnMock.getArgument(0));\n+            }\n+\n+            XWikiDocument sDoc = invocationOnMock.getArgument(3);\n+            assertEquals(GuestUserReference.INSTANCE, sDoc.getAuthors().getContentAuthor());\n+\n+            return renderingResult;\n+        }).when(spyDocument).getRenderedContent(anyString(), same(Syntax.XWIKI_2_1), anyBoolean(),\n+            any(XWikiDocument.class), anyBoolean(), any(XWikiContext.class));\n+\n+        textAreaClass.displayView(buffer, PROPERTY_NAME, \"\", object, true, this.oldcore.getXWikiContext());\n+\n+        assertEquals(renderingResult, buffer.toString());\n+\n+        // Verify that script right was actually checked.\n+        verify(this.oldcore.getMockContextualAuthorizationManager()).hasAccess(Right.SCRIPT);\n+    }\n+\n+    @Test\n+    void viewVelocityWikiWithoutOwnerDocument()\n+    {\n+        TextAreaClass textAreaClass = new TextAreaClass();\n+        textAreaClass.setContentType(TextAreaClass.ContentType.VELOCITYWIKI);\n+\n+        BaseObject object = new BaseObject();\n+        String velocityCode = \"1 & 2\";\n+        object.setLargeStringValue(PROPERTY_NAME, velocityCode);\n+        StringBuffer buffer = new StringBuffer();\n+\n+        textAreaClass.displayView(buffer, PROPERTY_NAME, \"\", object, true, this.oldcore.getXWikiContext());\n+\n+        assertEquals(\"1 &#38; 2\", buffer.toString());\n+\n+        verify(this.oldcore.getMockContextualAuthorizationManager(), never()).hasAccess(Right.SCRIPT);\n+\n+        assertEquals(1, this.logCaptureExtension.size());\n+        assertEquals(\"Error while getting the syntax corresponding to object [null].\"\n+                + \" Defaulting to using XWiki 1.0 syntax. Internal error [NullPointerException: ]\",\n+            this.logCaptureExtension.getMessage(0));\n+    }\n+\n+    private XWikiDocument getSpyDocument()\n+    {\n+        // Use a spy, so we don't need to mess around with clone-support in a mock.\n+        XWikiDocument spyDocument = spy(new XWikiDocument(new DocumentReference(\"wiki\", \"space\", \"page\")));\n+        spyDocument.setSyntax(Syntax.XWIKI_2_1);\n+        this.oldcore.getXWikiContext().setDoc(spyDocument);\n+        // Add some authors to the document to verify that TextAreaClass is correctly setting the content author to\n+        // the metadata author.\n+        DocumentAuthors authors = spyDocument.getAuthors();\n+        authors.setEffectiveMetadataAuthor(GuestUserReference.INSTANCE);\n+        authors.setContentAuthor(SuperAdminUserReference.INSTANCE);\n+        return spyDocument;\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-862",
    "description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. It is possible in XWiki to execute Velocity code without having script right by creating an XClass with a property of type \"TextArea\" and content type \"VelocityCode\" or \"VelocityWiki\". For the former, the syntax of the document needs to be set the `xwiki/1.0` (this syntax doesn't need to be installed). In both cases, when adding the property to an object, the Velocity code is executed regardless of the rights of the author of the property (edit right is still required, though). In both cases, the code is executed with the correct context author so no privileged APIs can be accessed. However, Velocity still grants access to otherwise inaccessible data and APIs that could allow further privilege escalation. At least for \"VelocityCode\", this behavior is most likely very old but only since XWiki 7.2, script right is a separate right, before that version all users were allowed to execute Velocity and thus this was expected and not a security issue. This has been patched in XWiki 14.10.10 and 15.4 RC1. Users are advised to upgrade. There are no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-01T20:15:07.540",
    "last_modified": "2024-11-21T08:20:27.040",
    "fix_date": "2023-05-02T14:24:47Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/edc52579eeaab1b4514785c134044671a1ecd839",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-m5m2-h6h9-p2c8",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20847",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20848",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/edc52579eeaab1b4514785c134044671a1ecd839",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-m5m2-h6h9-p2c8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20847",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-20848",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.504106",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}