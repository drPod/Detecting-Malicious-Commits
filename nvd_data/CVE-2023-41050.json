{
  "cve_id": "CVE-2023-41050",
  "github_data": {
    "repository": "zopefoundation/AccessControl",
    "fix_commit": "6bc32692e0d4b8d5cf64eae3d19de987c7375bc9",
    "related_commits": [
      "6bc32692e0d4b8d5cf64eae3d19de987c7375bc9",
      "6bc32692e0d4b8d5cf64eae3d19de987c7375bc9"
    ],
    "patch_url": "https://github.com/zopefoundation/AccessControl/commit/6bc32692e0d4b8d5cf64eae3d19de987c7375bc9.patch",
    "fix_commit_details": {
      "sha": "6bc32692e0d4b8d5cf64eae3d19de987c7375bc9",
      "commit_date": "2023-09-04T05:28:15Z",
      "author": {
        "login": "d-maurer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-8xv7-89vj-q48c",
        "length": 294,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 35,
        "additions": 35,
        "deletions": 0
      },
      "files": [
        {
          "filename": "CHANGES.rst",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -6,6 +6,9 @@ For changes before version 3.0, see ``HISTORY.rst``.\n 6.2 (unreleased)\n ----------------\n \n+- Fix information disclosure through ``str.format_map``.\n+  (CVE-2023-41050)\n+\n \n 6.1 (2023-05-22)\n ----------------"
        },
        {
          "filename": "src/AccessControl/__init__.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -14,6 +14,7 @@\n # This has to happen early so things get initialized properly\n from AccessControl.Implementation import setImplementation\n from AccessControl.safe_formatter import safe_format\n+from AccessControl.safe_formatter import safe_format_map\n from AccessControl.SecurityInfo import ACCESS_NONE\n from AccessControl.SecurityInfo import ACCESS_PRIVATE\n from AccessControl.SecurityInfo import ACCESS_PUBLIC\n@@ -44,6 +45,7 @@\n # That one needs special handling to avoid access to attributes.\n rules = {m: True for m in dir(str) if not m.startswith('_')}\n rules['format'] = safe_format\n+rules['format_map'] = safe_format_map\n allow_type(str, rules)\n \n zodbupdate_decode_dict = {"
        },
        {
          "filename": "src/AccessControl/safe_formatter.py",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -72,7 +72,15 @@ def safe_format(self, *args, **kwargs):\n         kwargs = _MagicFormatMapping(args, kwargs)\n         return self.vformat(self.value, args, kwargs)\n \n+    def safe_format_map(self, kw):\n+        kwargs = _MagicFormatMapping((), kw)\n+        return self.vformat(self.value, (), kwargs)\n+\n \n def safe_format(inst, method):\n     \"\"\"Use our SafeFormatter that uses guarded_getattr for attribute access.\"\"\"\n     return SafeFormatter(inst).safe_format\n+\n+\n+def safe_format_map(inst, method):\n+    return SafeFormatter(inst).safe_format_map"
        },
        {
          "filename": "src/AccessControl/tests/test_safe_formatter.py",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -202,3 +202,25 @@ def test_prevents_bad_unicode_formatting_key(self):\n         self.assertRaises(Unauthorized,\n                           SafeFormatter('{0[1]}').safe_format,\n                           folder)\n+\n+    def test_format_map(self):\n+        from AccessControl.safe_formatter import SafeFormatter\n+\n+        # Accessing basic Python types in a basic Python list is fine.\n+        foo = list(['bar'])\n+        self.assertEqual(SafeFormatter('{foo[0]}')\n+                         .safe_format_map(dict(foo=foo)),\n+                         'bar')\n+        # But for non-basic items or non-basic lists, we want run checks.\n+        folder = self._create_folder_with_mixed_contents()\n+        # We can get the public items just fine:\n+        self.assertEqual(SafeFormatter('{foo[0]}')\n+                         .safe_format_map(dict(foo=folder)),\n+                         '<Item public1>')\n+        self.assertEqual(SafeFormatter('{foo[2]}')\n+                         .safe_format_map(dict(foo=folder)),\n+                         '<Item public2>')\n+        # But not the private item:\n+        self.assertRaises(Unauthorized,\n+                          SafeFormatter('{foo[1]}').safe_format_map,\n+                          dict(foo=folder))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2302fbe3eb637ab225ff630ea71df63cada94b8f",
            "date": "2024-11-03T11:55:18Z",
            "author_login": "dataflake"
          },
          {
            "sha": "81dcf3d284964e468f8eba32224863ed47033170",
            "date": "2024-11-03T11:47:58Z",
            "author_login": "dataflake"
          },
          {
            "sha": "98f6125542a3de1836a2c0c202fa5226cb679a02",
            "date": "2024-11-03T11:46:05Z",
            "author_login": "d-maurer"
          },
          {
            "sha": "5e846cb6f84579c7f470d47312fefa78d9d6054c",
            "date": "2024-10-10T06:44:31Z",
            "author_login": "dataflake"
          },
          {
            "sha": "c3480ca1407cc2d9091c7a0feffdf5f9059bd2d3",
            "date": "2024-10-10T06:35:15Z",
            "author_login": "dataflake"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "AccessControl provides a general security framework for use in Zope. Python's \"format\" functionality allows someone controlling the format string to \"read\" objects accessible (recursively) via attribute access and subscription from accessible objects. Those attribute accesses and subscriptions use Python's full blown `getattr` and `getitem`, not the policy restricted `AccessControl` variants `_getattr_` and `_getitem_`. This can lead to critical information disclosure. `AccessControl` already provides a safe variant for `str.format` and denies access to `string.Formatter`. However, `str.format_map` is still unsafe. Affected are all users who allow untrusted users to create `AccessControl` controlled Python code and execute it. A fix has been introduced in versions 4.4, 5.8 and 6.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-06T18:15:08.847",
    "last_modified": "2024-11-21T08:20:27.607",
    "fix_date": "2023-09-04T05:28:15Z"
  },
  "references": [
    {
      "url": "https://github.com/zopefoundation/AccessControl/commit/6bc32692e0d4b8d5cf64eae3d19de987c7375bc9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/AccessControl/security/advisories/GHSA-8xv7-89vj-q48c",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/AccessControl/commit/6bc32692e0d4b8d5cf64eae3d19de987c7375bc9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/AccessControl/security/advisories/GHSA-8xv7-89vj-q48c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:08.389040",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "AccessControl",
    "owner": "zopefoundation",
    "created_at": "2013-02-25T14:38:38Z",
    "updated_at": "2024-11-03T11:55:32Z",
    "pushed_at": "2024-11-03T11:55:29Z",
    "size": 851,
    "stars": 12,
    "forks": 17,
    "open_issues": 5,
    "watchers": 12,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.13",
      "3.0.x",
      "4.x",
      "5.x",
      "config-with-c-code-template-bda0daae",
      "davisagli-permission-directive",
      "do3cc_1007523",
      "master",
      "plonezope4",
      "rotonen-purepython",
      "sylvain-memory-leak"
    ],
    "languages": {
      "Python": 387719,
      "C": 68836,
      "C++": 9572,
      "Shell": 2512
    },
    "commit_activity": {
      "total_commits_last_year": 20,
      "avg_commits_per_week": 0.38461538461538464,
      "days_active_last_year": 13
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:15:14.448966"
  }
}