{
  "cve_id": "CVE-2023-41051",
  "github_data": {
    "repository": "rust-vmm/vm-memory",
    "fix_commit": "aff1dd4a5259f7deba56692840f7a2d9ca34c9c8",
    "related_commits": [
      "aff1dd4a5259f7deba56692840f7a2d9ca34c9c8",
      "aff1dd4a5259f7deba56692840f7a2d9ca34c9c8"
    ],
    "patch_url": "https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8.patch",
    "fix_commit_details": {
      "sha": "aff1dd4a5259f7deba56692840f7a2d9ca34c9c8",
      "commit_date": "2023-08-29T08:25:54Z",
      "author": {
        "login": "roypat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Validate return value of get_slice in VolatileMemory",
        "length": 782,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 99,
        "additions": 78,
        "deletions": 21
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 7,
          "deletions": 12,
          "patch": "@@ -1,28 +1,23 @@\n # Changelog\n-## [Unreleased]\n \n-### Added\n-\n-### Changed\n+## [v0.12.2]\n \n ### Fixed\n+- [[#251]](https://github.com/rust-vmm/vm-memory/pull/251): Inserted checks\n+  that verify that the value returned by `VolatileMemory::get_slice` is of\n+  the correct length.\n \n ### Deprecated\n+- [[#244]](https://github.com/rust-vmm/vm-memory/pull/241) Deprecate volatile\n+  memory's `as_ptr()` interfaces. The new interfaces to be used instead are:\n+  `ptr_guard()` and `ptr_guard_mut()`.\n \n ## [v0.12.1]\n \n ### Fixed\n - [[#241]](https://github.com/rust-vmm/vm-memory/pull/245) mmap_xen: Don't drop\n   the FileOffset while in use #245\n \n-## [Unreleased]\n-\n-### Deprecated\n-\n-- [[#244]](https://github.com/rust-vmm/vm-memory/pull/241) Deprecate volatile\n-  memory's `as_ptr()` interfaces. The new interfaces to be used instead are:\n-  `ptr_guard()` and `ptr_guard_mut()`.\n-\n ## [v0.12.0]\n \n ### Added"
        },
        {
          "filename": "Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"vm-memory\"\n-version = \"0.12.1\"\n+version = \"0.12.2\"\n description = \"Safe abstractions for accessing the VM physical memory\"\n keywords = [\"memory\"]\n categories = [\"memory-management\"]"
        },
        {
          "filename": "src/volatile_memory.rs",
          "status": "modified",
          "additions": 70,
          "deletions": 8,
          "patch": "@@ -109,6 +109,10 @@ pub trait VolatileMemory {\n \n     /// Returns a [`VolatileSlice`](struct.VolatileSlice.html) of `count` bytes starting at\n     /// `offset`.\n+    ///\n+    /// Note that the property `get_slice(offset, count).len() == count` MUST NOT be\n+    /// relied on for the correctness of unsafe code. This is a safe function inside of a\n+    /// safe trait, and implementors are under no obligation to follow its documentation.\n     fn get_slice(&self, offset: usize, count: usize) -> Result<VolatileSlice<BS<Self::B>>>;\n \n     /// Gets a slice of memory for the entire region that supports volatile access.\n@@ -119,8 +123,18 @@ pub trait VolatileMemory {\n     /// Gets a `VolatileRef` at `offset`.\n     fn get_ref<T: ByteValued>(&self, offset: usize) -> Result<VolatileRef<T, BS<Self::B>>> {\n         let slice = self.get_slice(offset, size_of::<T>())?;\n-        // SAFETY: This is safe because the pointer is range-checked by get_slice, and\n-        // the lifetime is the same as self.\n+\n+        assert_eq!(\n+            slice.len(),\n+            size_of::<T>(),\n+            \"VolatileMemory::get_slice(offset, count) returned slice of length != count.\"\n+        );\n+\n+        // SAFETY: This is safe because the invariants of the constructors of VolatileSlice ensure that\n+        // slice.addr is valid memory of size slice.len(). The assert above ensures that\n+        // the length of the slice is exactly enough to hold one `T`. Lastly, the lifetime of the\n+        // returned VolatileRef match that of the VolatileSlice returned by get_slice and thus the\n+        // lifetime one `self`.\n         unsafe {\n             Ok(VolatileRef::with_bitmap(\n                 slice.addr,\n@@ -146,8 +160,18 @@ pub trait VolatileMemory {\n                 size: size_of::<T>(),\n             })?;\n         let slice = self.get_slice(offset, nbytes as usize)?;\n-        // SAFETY: This is safe because the pointer is range-checked by get_slice, and\n-        // the lifetime is the same as self.\n+\n+        assert_eq!(\n+            slice.len(),\n+            nbytes as usize,\n+            \"VolatileMemory::get_slice(offset, count) returned slice of length != count.\"\n+        );\n+\n+        // SAFETY: This is safe because the invariants of the constructors of VolatileSlice ensure that\n+        // slice.addr is valid memory of size slice.len(). The assert above ensures that\n+        // the length of the slice is exactly enough to hold `n` instances of `T`. Lastly, the lifetime of the\n+        // returned VolatileArrayRef match that of the VolatileSlice returned by get_slice and thus the\n+        // lifetime one `self`.\n         unsafe {\n             Ok(VolatileArrayRef::with_bitmap(\n                 slice.addr,\n@@ -171,7 +195,21 @@ pub trait VolatileMemory {\n     unsafe fn aligned_as_ref<T: ByteValued>(&self, offset: usize) -> Result<&T> {\n         let slice = self.get_slice(offset, size_of::<T>())?;\n         slice.check_alignment(align_of::<T>())?;\n-        Ok(&*(slice.addr as *const T))\n+\n+        assert_eq!(\n+            slice.len(),\n+            size_of::<T>(),\n+            \"VolatileMemory::get_slice(offset, count) returned slice of length != count.\"\n+        );\n+\n+        // SAFETY: This is safe because the invariants of the constructors of VolatileSlice ensure that\n+        // slice.addr is valid memory of size slice.len(). The assert above ensures that\n+        // the length of the slice is exactly enough to hold one `T`.\n+        // Dereferencing the pointer is safe because we check the alignment above, and the invariants\n+        // of this function ensure that no aliasing pointers exist. Lastly, the lifetime of the\n+        // returned VolatileArrayRef match that of the VolatileSlice returned by get_slice and thus the\n+        // lifetime one `self`.\n+        unsafe { Ok(&*(slice.addr as *const T)) }\n     }\n \n     /// Returns a mutable reference to an instance of `T` at `offset`. Mutable accesses performed\n@@ -191,7 +229,21 @@ pub trait VolatileMemory {\n         let slice = self.get_slice(offset, size_of::<T>())?;\n         slice.check_alignment(align_of::<T>())?;\n \n-        Ok(&mut *(slice.addr as *mut T))\n+        assert_eq!(\n+            slice.len(),\n+            size_of::<T>(),\n+            \"VolatileMemory::get_slice(offset, count) returned slice of length != count.\"\n+        );\n+\n+        // SAFETY: This is safe because the invariants of the constructors of VolatileSlice ensure that\n+        // slice.addr is valid memory of size slice.len(). The assert above ensures that\n+        // the length of the slice is exactly enough to hold one `T`.\n+        // Dereferencing the pointer is safe because we check the alignment above, and the invariants\n+        // of this function ensure that no aliasing pointers exist. Lastly, the lifetime of the\n+        // returned VolatileArrayRef match that of the VolatileSlice returned by get_slice and thus the\n+        // lifetime one `self`.\n+\n+        unsafe { Ok(&mut *(slice.addr as *mut T)) }\n     }\n \n     /// Returns a reference to an instance of `T` at `offset`. Mutable accesses performed\n@@ -206,8 +258,18 @@ pub trait VolatileMemory {\n         let slice = self.get_slice(offset, size_of::<T>())?;\n         slice.check_alignment(align_of::<T>())?;\n \n-        // SAFETY: This is safe because the pointer is range-checked by get_slice, and\n-        // the lifetime is the same as self.\n+        assert_eq!(\n+            slice.len(),\n+            size_of::<T>(),\n+            \"VolatileMemory::get_slice(offset, count) returned slice of length != count.\"\n+        );\n+\n+        // SAFETY: This is safe because the invariants of the constructors of VolatileSlice ensure that\n+        // slice.addr is valid memory of size slice.len(). The assert above ensures that\n+        // the length of the slice is exactly enough to hold one `T`.\n+        // Dereferencing the pointer is safe because we check the alignment above. Lastly, the lifetime of the\n+        // returned VolatileArrayRef match that of the VolatileSlice returned by get_slice and thus the\n+        // lifetime one `self`.\n         unsafe { Ok(&*(slice.addr as *const T)) }\n     }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "05a85b3d891a255312364ae981f56a3857734dc0",
            "date": "2025-01-06T15:47:55Z",
            "author_login": "roypat"
          },
          {
            "sha": "e3db410551566b4cc781a7af984e54504cba814e",
            "date": "2025-01-06T15:42:28Z",
            "author_login": "roypat"
          },
          {
            "sha": "83dbd8db035b67099d30c4cdca57925016a5c875",
            "date": "2025-01-01T00:25:27Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "31a7f06a666303ce58d83e94e53fd401c412154f",
            "date": "2024-11-04T07:45:22Z",
            "author_login": "roypat"
          },
          {
            "sha": "25003f70014ae960bf8e698b79b6a57bcce50054",
            "date": "2024-11-01T00:35:36Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-125",
    "description": "In a typical Virtual Machine Monitor (VMM) there are several components, such as boot loader, virtual device drivers, virtio backend drivers and vhost drivers, that need to access the VM physical memory. The vm-memory rust crate provides a set of traits to decouple VM memory consumers from VM memory providers. An issue was discovered in the default implementations of the `VolatileMemory::{get_atomic_ref, aligned_as_ref, aligned_as_mut, get_ref, get_array_ref}` trait functions, which allows out-of-bounds memory access if the `VolatileMemory::get_slice` function returns a `VolatileSlice` whose length is less than the function\u2019s `count` argument. No implementations of `get_slice` provided in `vm_memory` are affected. Users of custom `VolatileMemory` implementations may be impacted if the custom implementation does not adhere to `get_slice`'s documentation. The issue started in version 0.1.0 but was fixed in version 0.12.2 by inserting a check that verifies that the `VolatileSlice` returned by `get_slice` is of the correct length. Users are advised to upgrade. There are no known workarounds for this issue.\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-09-01T19:15:42.883",
    "last_modified": "2024-11-21T08:20:27.737",
    "fix_date": "2023-08-29T08:25:54Z"
  },
  "references": [
    {
      "url": "https://crates.io/crates/vm-memory/0.12.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-vmm/vm-memory/security/advisories/GHSA-49hh-fprx-m68g",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IPXRXD5VXBZHBGMUM77B52CJJMG7EJGI/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SYM6CYW2DWRHRAVL2HYTQPXC3J2V77J4/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XZGJL6BQLU4XCPQLLTW4GSSBTNQXB3TI/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://crates.io/crates/vm-memory/0.12.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-vmm/vm-memory/security/advisories/GHSA-49hh-fprx-m68g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IPXRXD5VXBZHBGMUM77B52CJJMG7EJGI/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SYM6CYW2DWRHRAVL2HYTQPXC3J2V77J4/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XZGJL6BQLU4XCPQLLTW4GSSBTNQXB3TI/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.503765",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vm-memory",
    "owner": "rust-vmm",
    "created_at": "2019-02-28T13:45:05Z",
    "updated_at": "2025-01-07T10:36:34Z",
    "pushed_at": "2025-01-07T10:36:37Z",
    "size": 493,
    "stars": 315,
    "forks": 102,
    "open_issues": 31,
    "watchers": 315,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v0.1.1_release",
      "v0.1.2_release",
      "v0.2.1_release",
      "v0.2.2_release",
      "v0.14.1_release"
    ],
    "languages": {
      "Rust": 377653
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:07:47.337338"
  }
}