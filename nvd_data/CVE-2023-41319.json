{
  "cve_id": "CVE-2023-41319",
  "github_data": {
    "repository": "ethyca/fides",
    "fix_commit": "5989b5fa744c8d8c340963b895a054883549358a",
    "related_commits": [
      "5989b5fa744c8d8c340963b895a054883549358a",
      "5989b5fa744c8d8c340963b895a054883549358a"
    ],
    "patch_url": "https://github.com/ethyca/fides/commit/5989b5fa744c8d8c340963b895a054883549358a.patch",
    "fix_commit_details": {
      "sha": "5989b5fa744c8d8c340963b895a054883549358a",
      "commit_date": "2023-09-05T19:51:11Z",
      "author": {
        "login": "galvana",
        "type": "User",
        "stats": {
          "total_commits": 301,
          "average_weekly_commits": 1.5925925925925926,
          "total_additions": 336757,
          "total_deletions": 104404,
          "weeks_active": 99
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-p6p2-qq95-vq5h",
        "length": 172,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 457,
        "additions": 43,
        "deletions": 414
      },
      "files": [
        {
          "filename": "clients/admin-ui/src/features/connector-templates/ConnectorTemplateUploadModal.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -122,8 +122,7 @@ const ConnectorTemplateUploadModal: React.FC<RequestModalProps> = ({\n           </Box>\n           <Text fontSize=\"sm\" mt={4}>\n             An integration template zip file must include a SaaS config and\n-            dataset, but may also contain an icon (.svg) and custom functions\n-            (.py) as optional files.\n+            dataset, but may also contain an icon (.svg) as an optional file.\n           </Text>\n         </ModalBody>\n         <ModalFooter>"
        },
        {
          "filename": "docker-compose.yml",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -28,7 +28,6 @@ services:\n       FIDES__DEV_MODE: \"True\"\n       FIDES__LOGGING__COLORIZE: \"True\"\n       FIDES__USER__ANALYTICS_OPT_OUT: \"True\"\n-      FIDES__SECURITY__ALLOW_CUSTOM_CONNECTOR_FUNCTIONS: \"True\"\n       FIDES__SECURITY__BASTION_SERVER_HOST: ${FIDES__SECURITY__BASTION_SERVER_HOST-}\n       FIDES__SECURITY__BASTION_SERVER_SSH_USERNAME: ${FIDES__SECURITY__BASTION_SERVER_SSH_USERNAME-}\n       FIDES__SECURITY__BASTION_SERVER_SSH_PRIVATE_KEY: ${FIDES__SECURITY__BASTION_SERVER_SSH_PRIVATE_KEY-}"
        },
        {
          "filename": "requirements.txt",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -1,4 +1,3 @@\n-AccessControl==6.0\n alembic==1.8.1\n APScheduler==3.9.1.post1\n asyncpg==0.27.0\n@@ -42,7 +41,6 @@ pymssql==2.2.8\n python-jose[cryptography]==3.3.0\n pyyaml==6.0.1\n redis==3.5.3\n-RestrictedPython==6.0.0\n rich-click==1.6.1\n sendgrid==6.9.7\n slowapi==0.1.8"
        },
        {
          "filename": "src/fides/api/schemas/saas/connector_template.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -13,13 +13,12 @@\n class ConnectorTemplate(BaseModel):\n     \"\"\"\n     A collection of artifacts that make up a complete\n-    SaaS connector (SaaS config, dataset, icon, functions, etc.)\n+    SaaS connector (SaaS config, dataset, icon, etc.)\n     \"\"\"\n \n     config: str\n     dataset: str\n     icon: Optional[str]\n-    functions: Optional[str]\n     human_readable: str\n \n     @validator(\"config\")"
        },
        {
          "filename": "src/fides/api/service/connectors/saas/connector_registry_service.py",
          "status": "modified",
          "additions": 4,
          "deletions": 104,
          "patch": "@@ -1,22 +1,17 @@\n # pylint: disable=protected-access\n import os\n from abc import ABC, abstractmethod\n-from ast import AST, AnnAssign\n-from operator import getitem\n-from typing import Any, Dict, Iterable, List, Optional, Tuple, Type\n+from typing import Dict, Iterable, List, Optional, Type\n from zipfile import ZipFile\n \n-from AccessControl.ZopeGuards import safe_builtins\n from fideslang.models import Dataset\n from loguru import logger\n from packaging.version import Version\n from packaging.version import parse as parse_version\n-from RestrictedPython import compile_restricted\n-from RestrictedPython.transformer import RestrictingNodeTransformer\n from sqlalchemy.orm import Session\n \n from fides.api.api.deps import get_api_session\n-from fides.api.common_exceptions import FidesopsException, ValidationError\n+from fides.api.common_exceptions import ValidationError\n from fides.api.cryptography.cryptographic_util import str_to_b64_str\n from fides.api.models.connectionconfig import (\n     AccessLevel,\n@@ -41,7 +36,6 @@\n     replace_version,\n )\n from fides.api.util.unsafe_file_util import verify_svg, verify_zip\n-from fides.config import CONFIG\n \n \n class ConnectorTemplateLoader(ABC):\n@@ -96,7 +90,6 @@ def _load_connector_templates(self) -> None:\n                             f\"data/saas/dataset/{connector_type}_dataset.yml\"\n                         ),\n                         icon=icon,\n-                        functions=None,\n                         human_readable=human_readable,\n                     )\n                 except Exception:\n@@ -151,24 +144,16 @@ def _register_template(\n         template: CustomConnectorTemplate,\n     ) -> None:\n         \"\"\"\n-        Registers a custom connector template by converting it to a ConnectorTemplate,\n-        registering any custom functions, and adding it to the loader's template dictionary.\n+        Registers a custom connector template by converting it to a ConnectorTemplate\n+        and adding it to the loader's template dictionary.\n         \"\"\"\n         connector_template = ConnectorTemplate(\n             config=template.config,\n             dataset=template.dataset,\n             icon=template.icon,\n-            functions=template.functions,\n             human_readable=template.name,\n         )\n \n-        # register custom functions if available\n-        if template.functions:\n-            register_custom_functions(template.functions)\n-            logger.info(\n-                f\"Loaded functions from the custom connector template '{template.key}'\"\n-            )\n-\n         # register the template in the loader's template dictionary\n         CustomConnectorTemplateLoader.get_connector_templates()[\n             template.key\n@@ -220,13 +205,6 @@ def save_template(cls, db: Session, zip_file: ZipFile) -> None:\n                     raise ValidationError(\n                         \"Multiple svg files found, only one is allowed.\"\n                     )\n-            elif info.filename.endswith(\".py\"):\n-                if not function_contents:\n-                    function_contents = file_contents\n-                else:\n-                    raise ValidationError(\n-                        \"Multiple Python (.py) files found, only one is allowed.\"\n-                    )\n \n         if not config_contents:\n             raise ValidationError(\"Zip file does not contain a config.yml file.\")\n@@ -266,7 +244,6 @@ def save_template(cls, db: Session, zip_file: ZipFile) -> None:\n             config=config_contents,\n             dataset=dataset_contents,\n             icon=icon_contents,\n-            functions=function_contents,\n             replaceable=replaceable,\n         )\n \n@@ -447,80 +424,3 @@ def update_saas_instance(\n     connection_config.update_saas_config(db, SaaSConfig(**config_from_template))\n \n     upsert_dataset_config_from_template(db, connection_config, template, template_vals)\n-\n-\n-def register_custom_functions(script: str) -> None:\n-    \"\"\"\n-    Registers custom functions by executing the given script in a restricted environment.\n-\n-    The script is compiled and executed with RestrictedPython, which is designed to reduce\n-    the risk of executing untrusted code. It provides a set of safe builtins to prevent\n-    malicious or unintended behavior.\n-\n-    Args:\n-        script (str): The Python script containing the custom functions to be registered.\n-\n-    Raises:\n-        FidesopsException: If allow_custom_connector_functions is disabled.\n-        SyntaxError: If the script contains a syntax error or uses restricted language features.\n-        Exception: If an exception occurs during the execution of the script.\n-    \"\"\"\n-\n-    if CONFIG.security.allow_custom_connector_functions:\n-        restricted_code = compile_restricted(\n-            script, \"<string>\", \"exec\", policy=CustomRestrictingNodeTransformer\n-        )\n-        safe_builtins[\"__import__\"] = custom_guarded_import\n-        safe_builtins[\"_getitem_\"] = getitem\n-        safe_builtins[\"staticmethod\"] = staticmethod\n-\n-        # pylint: disable=exec-used\n-        exec(\n-            restricted_code,\n-            {\n-                \"__metaclass__\": type,\n-                \"__name__\": \"restricted_module\",\n-                \"__builtins__\": safe_builtins,\n-            },\n-        )\n-    else:\n-        raise FidesopsException(\n-            message=\"The import of connector templates with custom functions is disabled by the 'security.allow_custom_connector_functions' setting.\"\n-        )\n-\n-\n-class CustomRestrictingNodeTransformer(RestrictingNodeTransformer):\n-    \"\"\"\n-    Custom node transformer class that extends RestrictedPython's RestrictingNodeTransformer\n-    to allow the use of type annotations (AnnAssign) in restricted code.\n-    \"\"\"\n-\n-    def visit_AnnAssign(self, node: AnnAssign) -> AST:\n-        return self.node_contents_visit(node)\n-\n-\n-def custom_guarded_import(\n-    name: str,\n-    _globals: Optional[dict] = None,\n-    _locals: Optional[dict] = None,\n-    fromlist: Optional[Tuple[str, ...]] = None,\n-    level: int = 0,\n-) -> Any:\n-    \"\"\"\n-    A custom import function that prevents the import of certain potentially unsafe modules.\n-    \"\"\"\n-    if name in [\n-        \"os\",\n-        \"sys\",\n-        \"subprocess\",\n-        \"shutil\",\n-        \"socket\",\n-        \"importlib\",\n-        \"tempfile\",\n-        \"glob\",\n-    ]:\n-        # raising SyntaxError to be consistent with exceptions thrown from other guarded functions\n-        raise SyntaxError(f\"Import of '{name}' module is not allowed.\")\n-    if fromlist is None:\n-        fromlist = ()\n-    return __import__(name, _globals, _locals, fromlist, level)"
        },
        {
          "filename": "src/fides/config/security_settings.py",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -118,10 +118,6 @@ class SecuritySettings(FidesSettings):\n         default=432000,\n         description=\"The number of seconds that a pre-signed download URL when using S3 storage will be valid. The default is equal to 5 days.\",\n     )\n-    allow_custom_connector_functions: Optional[bool] = Field(\n-        default=False,\n-        description=\"Enables or disables the ability to import connector templates with custom functions. When enabled, custom functions which will be loaded in a restricted environment to minimize security risks.\",\n-    )\n     enable_audit_log_resource_middleware: Optional[bool] = Field(\n         default=False,\n         description=\"Either enables the collection of audit log resource data or bypasses the middleware\","
        },
        {
          "filename": "tests/ops/api/v1/endpoints/test_saas_config_endpoints.py",
          "status": "modified",
          "additions": 1,
          "deletions": 115,
          "patch": "@@ -468,14 +468,12 @@ def complete_connector_template(\n         self,\n         planet_express_config,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_config,\n                 \"dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -484,13 +482,11 @@ def complete_connector_template(\n     def connector_template_missing_config(\n         self,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -499,14 +495,12 @@ def connector_template_missing_config(\n     def connector_template_wrong_contents_config(\n         self,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": \"planet_express_config\",\n                 \"dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -516,14 +510,12 @@ def connector_template_invalid_config(\n         self,\n         planet_express_invalid_config,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_invalid_config,\n                 \"dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -532,13 +524,11 @@ def connector_template_invalid_config(\n     def connector_template_missing_dataset(\n         self,\n         planet_express_config,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_config,\n-                \"functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -547,14 +537,12 @@ def connector_template_missing_dataset(\n     def connector_template_wrong_contents_dataset(\n         self,\n         planet_express_config,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_config,\n                 \"dataset.yml\": \"planet_express_dataset\",\n-                \"functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -564,29 +552,12 @@ def connector_template_invalid_dataset(\n         self,\n         planet_express_config,\n         planet_express_invalid_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_config,\n                 \"dataset.yml\": planet_express_invalid_dataset,\n-                \"functions.py\": planet_express_functions,\n-                \"icon.svg\": planet_express_icon,\n-            }\n-        )\n-\n-    @pytest.fixture\n-    def connector_template_no_functions(\n-        self,\n-        planet_express_config,\n-        planet_express_dataset,\n-        planet_express_icon,\n-    ):\n-        return create_zip_file(\n-            {\n-                \"config.yml\": planet_express_config,\n-                \"dataset.yml\": planet_express_dataset,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -596,13 +567,11 @@ def connector_template_no_icon(\n         self,\n         planet_express_config,\n         planet_express_dataset,\n-        planet_express_functions,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_config,\n                 \"dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n             }\n         )\n \n@@ -611,15 +580,13 @@ def connector_template_duplicate_configs(\n         self,\n         planet_express_config,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"1_config.yml\": planet_express_config,\n                 \"2_config.yml\": planet_express_config,\n                 \"dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -629,33 +596,13 @@ def connector_template_duplicate_datasets(\n         self,\n         planet_express_config,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_config,\n                 \"1_dataset.yml\": planet_express_dataset,\n                 \"2_dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n-                \"icon.svg\": planet_express_icon,\n-            }\n-        )\n-\n-    @pytest.fixture\n-    def connector_template_duplicate_functions(\n-        self,\n-        planet_express_config,\n-        planet_express_dataset,\n-        planet_express_functions,\n-        planet_express_icon,\n-    ):\n-        return create_zip_file(\n-            {\n-                \"config.yml\": planet_express_config,\n-                \"dataset.yml\": planet_express_dataset,\n-                \"1_functions.py\": planet_express_functions,\n-                \"2_functions.py\": planet_express_functions,\n                 \"icon.svg\": planet_express_icon,\n             }\n         )\n@@ -665,14 +612,12 @@ def connector_template_duplicate_icons(\n         self,\n         planet_express_config,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ):\n         return create_zip_file(\n             {\n                 \"config.yml\": planet_express_config,\n                 \"dataset.yml\": planet_express_dataset,\n-                \"functions.py\": planet_express_functions,\n                 \"1_icon.svg\": planet_express_icon,\n                 \"2_icon.svg\": planet_express_icon,\n             }\n@@ -685,7 +630,6 @@ def test_register_connector_template_wrong_scope(\n         generate_auth_header,\n         complete_connector_template,\n     ):\n-        CONFIG.security.allow_custom_connector_functions = True\n         auth_header = generate_auth_header(scopes=[CLIENT_READ])\n         response = api_client.post(\n             register_connector_template_url,\n@@ -746,11 +690,6 @@ def test_register_connector_template_wrong_scope(\n                     \"detail\": \"1 validation error for Dataset\\ncollections -> 0 -> name\\n  field required (type=value_error.missing)\"\n                 },\n             ),\n-            (\n-                \"connector_template_no_functions\",\n-                200,\n-                {\"message\": \"Connector template successfully registered.\"},\n-            ),\n             (\n                 \"connector_template_no_icon\",\n                 200,\n@@ -770,66 +709,14 @@ def test_register_connector_template_wrong_scope(\n                     \"detail\": \"Multiple files ending with dataset.yml found, only one is allowed.\"\n                 },\n             ),\n-            (\n-                \"connector_template_duplicate_functions\",\n-                400,\n-                {\"detail\": \"Multiple Python (.py) files found, only one is allowed.\"},\n-            ),\n             (\n                 \"connector_template_duplicate_icons\",\n                 400,\n                 {\"detail\": \"Multiple svg files found, only one is allowed.\"},\n             ),\n         ],\n     )\n-    @mock.patch(\n-        \"fides.api.service.connectors.saas.connector_registry_service.register_custom_functions\"\n-    )  # prevent functions from being registered to avoid test conflicts\n-    def test_register_connector_template_allow_custom_connector_functions(\n-        self,\n-        mock_register_custom_functions: MagicMock,\n-        api_client: TestClient,\n-        register_connector_template_url,\n-        generate_auth_header,\n-        zip_file,\n-        status_code,\n-        details,\n-        request,\n-    ):\n-        CONFIG.security.allow_custom_connector_functions = True\n-        auth_header = generate_auth_header(scopes=[CONNECTOR_TEMPLATE_REGISTER])\n-        response = api_client.post(\n-            register_connector_template_url,\n-            headers=auth_header,\n-            files={\n-                \"file\": (\n-                    \"template.zip\",\n-                    request.getfixturevalue(zip_file).read(),\n-                    \"application/zip\",\n-                )\n-            },\n-        )\n-        assert response.status_code == status_code\n-        assert response.json() == details\n-\n-    @pytest.mark.parametrize(\n-        \"zip_file, status_code, details\",\n-        [\n-            (\n-                \"complete_connector_template\",\n-                400,\n-                {\n-                    \"detail\": \"The import of connector templates with custom functions is disabled by the 'security.allow_custom_connector_functions' setting.\"\n-                },\n-            ),\n-            (\n-                \"connector_template_no_functions\",\n-                200,\n-                {\"message\": \"Connector template successfully registered.\"},\n-            ),\n-        ],\n-    )\n-    def test_register_connector_template_disallow_custom_connector_functions(\n+    def test_register_connector_template(\n         self,\n         api_client: TestClient,\n         register_connector_template_url,\n@@ -839,7 +726,6 @@ def test_register_connector_template_disallow_custom_connector_functions(\n         details,\n         request,\n     ):\n-        CONFIG.security.allow_custom_connector_functions = False\n         auth_header = generate_auth_header(scopes=[CONNECTOR_TEMPLATE_REGISTER])\n         response = api_client.post(\n             register_connector_template_url,"
        },
        {
          "filename": "tests/ops/models/test_custom_connector_template.py",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -12,15 +12,13 @@ def test_create_custom_connector_template(\n         planet_express_config,\n         planet_express_dataset,\n         planet_express_icon,\n-        planet_express_functions,\n     ) -> None:\n         template = CustomConnectorTemplate(\n             key=\"planet_express\",\n             name=\"Planet Express\",\n             config=planet_express_config,\n             dataset=planet_express_dataset,\n             icon=planet_express_icon,\n-            functions=planet_express_functions,\n         )\n         template.save(db=db)\n \n@@ -36,4 +34,3 @@ def test_create_custom_connector_template(\n         assert custom_connector.config == planet_express_config\n         assert custom_connector.dataset == planet_express_dataset\n         assert custom_connector.icon == planet_express_icon\n-        assert custom_connector.functions == planet_express_functions"
        },
        {
          "filename": "tests/ops/service/connectors/test_connector_template_loaders.py",
          "status": "modified",
          "additions": 36,
          "deletions": 181,
          "patch": "@@ -16,7 +16,6 @@\n     ConnectorRegistry,\n     CustomConnectorTemplateLoader,\n     FileConnectorTemplateLoader,\n-    register_custom_functions,\n )\n from fides.api.service.saas_request.saas_request_override_factory import (\n     SaaSRequestOverrideFactory,\n@@ -113,15 +112,13 @@ def replaceable_planet_express_zip(\n         self,\n         replaceable_planet_express_config,\n         planet_express_dataset,\n-        planet_express_functions,\n         planet_express_icon,\n     ) -> BytesIO:\n         return create_zip_file(\n             {\n                 \"config.yml\": replaceable_planet_express_config,\n                 \"dataset.yml\": planet_express_dataset,\n                 \"icon.svg\": planet_express_icon,\n-                \"functions.py\": planet_express_functions,\n             }\n         )\n \n@@ -135,8 +132,6 @@ def non_replaceable_zendesk_zip(self, zendesk_config, zendesk_dataset) -> BytesI\n         )\n \n     def test_custom_connector_template_loader_no_templates(self):\n-        CONFIG.security.allow_custom_connector_functions = True\n-\n         connector_templates = CustomConnectorTemplateLoader.get_connector_templates()\n         assert connector_templates == {}\n \n@@ -148,143 +143,20 @@ def test_custom_connector_template_loader_invalid_template(\n         mock_all: MagicMock,\n         planet_express_dataset,\n         planet_express_icon,\n-        planet_express_functions,\n     ):\n-        CONFIG.security.allow_custom_connector_functions = True\n-\n         mock_all.return_value = [\n             CustomConnectorTemplate(\n                 key=\"planet_express\",\n                 name=\"Planet Express\",\n                 config=\"planet_express_config\",\n                 dataset=planet_express_dataset,\n                 icon=planet_express_icon,\n-                functions=planet_express_functions,\n-            )\n-        ]\n-\n-        # verify the custom functions aren't loaded if the template is invalid\n-        connector_templates = CustomConnectorTemplateLoader.get_connector_templates()\n-        assert connector_templates == {}\n-\n-        with pytest.raises(NoSuchSaaSRequestOverrideException):\n-            SaaSRequestOverrideFactory.get_override(\n-                \"planet_express_user_access\", SaaSRequestType.READ\n-            )\n-\n-        # assert the strategy was not registered\n-        authentication_strategies = AuthenticationStrategy.get_strategies()\n-        assert \"planet_express\" not in [\n-            strategy.name for strategy in authentication_strategies\n-        ]\n-\n-    @mock.patch(\n-        \"fides.api.models.custom_connector_template.CustomConnectorTemplate.all\"\n-    )\n-    def test_custom_connector_template_loader_invalid_functions(\n-        self,\n-        mock_all: MagicMock,\n-        planet_express_config,\n-        planet_express_dataset,\n-        planet_express_icon,\n-    ):\n-        CONFIG.security.allow_custom_connector_functions = True\n-\n-        # save custom connector template to the database\n-        mock_all.return_value = [\n-            CustomConnectorTemplate(\n-                key=\"planet_express\",\n-                name=\"Planet Express\",\n-                config=planet_express_config,\n-                dataset=planet_express_dataset,\n-                icon=planet_express_icon,\n-                functions=\"planet_express_functions\",\n-            )\n-        ]\n-\n-        # verify nothing is loaded if the custom functions fail to load\n-        connector_templates = CustomConnectorTemplateLoader.get_connector_templates()\n-        assert connector_templates == {}\n-\n-    @mock.patch(\n-        \"fides.api.models.custom_connector_template.CustomConnectorTemplate.all\"\n-    )\n-    def test_custom_connector_template_loader_custom_connector_functions_disabled(\n-        self,\n-        mock_all: MagicMock,\n-        planet_express_config,\n-        planet_express_dataset,\n-        planet_express_icon,\n-        planet_express_functions,\n-    ):\n-        CONFIG.security.allow_custom_connector_functions = False\n-\n-        mock_all.return_value = [\n-            CustomConnectorTemplate(\n-                key=\"planet_express\",\n-                name=\"Planet Express\",\n-                config=planet_express_config,\n-                dataset=planet_express_dataset,\n-                icon=planet_express_icon,\n-                functions=planet_express_functions,\n             )\n         ]\n \n-        # load custom connector templates from the database\n         connector_templates = CustomConnectorTemplateLoader.get_connector_templates()\n         assert connector_templates == {}\n \n-        with pytest.raises(NoSuchSaaSRequestOverrideException):\n-            SaaSRequestOverrideFactory.get_override(\n-                \"planet_express_user_access\", SaaSRequestType.READ\n-            )\n-\n-        # assert the strategy was not registered\n-        authentication_strategies = AuthenticationStrategy.get_strategies()\n-        assert \"planet_express\" not in [\n-            strategy.name for strategy in authentication_strategies\n-        ]\n-\n-    @mock.patch(\n-        \"fides.api.models.custom_connector_template.CustomConnectorTemplate.all\"\n-    )\n-    def test_custom_connector_template_loader_custom_connector_functions_disabled_custom_functions(\n-        self,\n-        mock_all: MagicMock,\n-        planet_express_config,\n-        planet_express_dataset,\n-        planet_express_icon,\n-    ):\n-        \"\"\"\n-        A connector template with no custom functions should still be loaded\n-        even if allow_custom_connector_functions is set to false\n-        \"\"\"\n-\n-        CONFIG.security.allow_custom_connector_functions = False\n-\n-        # save custom connector template to the database\n-        mock_all.return_value = [\n-            CustomConnectorTemplate(\n-                key=\"planet_express\",\n-                name=\"Planet Express\",\n-                config=planet_express_config,\n-                dataset=planet_express_dataset,\n-                icon=planet_express_icon,\n-                functions=None,\n-            )\n-        ]\n-\n-        # load custom connector templates from the database\n-        connector_templates = CustomConnectorTemplateLoader.get_connector_templates()\n-        assert connector_templates == {\n-            \"planet_express\": ConnectorTemplate(\n-                config=planet_express_config,\n-                dataset=planet_express_dataset,\n-                icon=planet_express_icon,\n-                human_readable=\"Planet Express\",\n-            )\n-        }\n-\n     @mock.patch(\n         \"fides.api.models.custom_connector_template.CustomConnectorTemplate.all\"\n     )\n@@ -294,18 +166,14 @@ def test_custom_connector_template_loader(\n         planet_express_config,\n         planet_express_dataset,\n         planet_express_icon,\n-        planet_express_functions,\n     ):\n-        CONFIG.security.allow_custom_connector_functions = True\n-\n         mock_all.return_value = [\n             CustomConnectorTemplate(\n                 key=\"planet_express\",\n                 name=\"Planet Express\",\n                 config=planet_express_config,\n                 dataset=planet_express_dataset,\n                 icon=planet_express_icon,\n-                functions=planet_express_functions,\n             )\n         ]\n \n@@ -318,22 +186,10 @@ def test_custom_connector_template_loader(\n                 config=planet_express_config,\n                 dataset=planet_express_dataset,\n                 icon=planet_express_icon,\n-                functions=planet_express_functions,\n                 human_readable=\"Planet Express\",\n             )\n         }\n \n-        # assert the request override was registered\n-        SaaSRequestOverrideFactory.get_override(\n-            \"planet_express_user_access\", SaaSRequestType.READ\n-        )\n-\n-        # assert the strategy was registered\n-        authentication_strategies = AuthenticationStrategy.get_strategies()\n-        assert \"planet_express\" in [\n-            strategy.name for strategy in authentication_strategies\n-        ]\n-\n     @mock.patch(\n         \"fides.api.models.custom_connector_template.CustomConnectorTemplate.all\"\n     )\n@@ -343,18 +199,14 @@ def test_loaders_have_separate_instances(\n         planet_express_config,\n         planet_express_dataset,\n         planet_express_icon,\n-        planet_express_functions,\n     ):\n-        CONFIG.security.allow_custom_connector_functions = True\n-\n         mock_all.return_value = [\n             CustomConnectorTemplate(\n                 key=\"planet_express\",\n                 name=\"Planet Express\",\n                 config=planet_express_config,\n                 dataset=planet_express_dataset,\n                 icon=planet_express_icon,\n-                functions=planet_express_functions,\n             )\n         ]\n \n@@ -375,7 +227,6 @@ def test_custom_connector_save_template(\n         planet_express_config,\n         planet_express_dataset,\n         planet_express_icon,\n-        planet_express_functions,\n     ):\n         db = MagicMock()\n \n@@ -386,7 +237,6 @@ def test_custom_connector_save_template(\n                     {\n                         \"config.yml\": planet_express_config,\n                         \"dataset.yml\": planet_express_dataset,\n-                        \"functions.py\": planet_express_functions,\n                         \"icon.svg\": planet_express_icon,\n                     }\n                 )\n@@ -401,37 +251,55 @@ def test_custom_connector_save_template(\n                     {\n                         \"config.yml\": planet_express_config,\n                         \"dataset.yml\": planet_express_dataset,\n-                        \"functions.py\": planet_express_functions,\n                         \"icon.svg\": planet_express_icon,\n                     }\n                 )\n             ),\n         )\n         assert mock_create_or_update.call_count == 2\n \n-    def test_custom_connector_template_loader_disallowed_modules(\n+    @mock.patch(\n+        \"fides.api.models.custom_connector_template.CustomConnectorTemplate.create_or_update\"\n+    )\n+    def test_custom_connector_save_template_with_functions(\n         self,\n+        mock_create_or_update: MagicMock,\n         planet_express_config,\n         planet_express_dataset,\n+        planet_express_functions,\n         planet_express_icon,\n     ):\n-        CONFIG.security.allow_custom_connector_functions = True\n-\n-        with pytest.raises(SyntaxError) as exc:\n-            CustomConnectorTemplateLoader.save_template(\n-                MagicMock(),\n-                ZipFile(\n-                    create_zip_file(\n-                        {\n-                            \"config.yml\": planet_express_config,\n-                            \"dataset.yml\": planet_express_dataset,\n-                            \"functions.py\": \"import os\",\n-                            \"icon.svg\": planet_express_icon,\n-                        }\n-                    )\n-                ),\n+        db = MagicMock()\n+\n+        CustomConnectorTemplateLoader.save_template(\n+            db,\n+            ZipFile(\n+                create_zip_file(\n+                    {\n+                        \"config.yml\": planet_express_config,\n+                        \"dataset.yml\": planet_express_dataset,\n+                        \"functions.py\": planet_express_functions,\n+                        \"icon.svg\": planet_express_icon,\n+                    }\n+                )\n+            ),\n+        )\n+\n+        # assert the request override was ignored\n+        with pytest.raises(NoSuchSaaSRequestOverrideException) as exc:\n+            SaaSRequestOverrideFactory.get_override(\n+                \"planet_express_user_access\", SaaSRequestType.UPDATE\n             )\n-        assert \"Import of 'os' module is not allowed.\" == str(exc.value)\n+        assert (\n+            f\"Custom SaaS override 'planet_express_user_access' does not exist.\"\n+            in str(exc.value)\n+        )\n+\n+        # assert the strategy was ignored\n+        authentication_strategies = AuthenticationStrategy.get_strategies()\n+        assert \"planet_express\" not in [\n+            strategy.name for strategy in authentication_strategies\n+        ]\n \n     @mock.patch(\n         \"fides.api.models.custom_connector_template.CustomConnectorTemplate.delete\"\n@@ -614,16 +482,3 @@ def test_non_replaceable_template(\n         config_contents = mock_create_or_update.call_args.kwargs[\"data\"][\"config\"]\n         custom_config = load_config_from_string(config_contents)\n         assert custom_config[\"version\"] == \"0.0.0\"\n-\n-\n-class TestRegisterCustomFunctions:\n-    def test_function_loader(self):\n-        \"\"\"Verify that all override implementations can be loaded by RestrictedPython\"\"\"\n-\n-        overrides_path = \"src/fides/api/service/saas_request/override_implementations\"\n-\n-        for filename in os.listdir(overrides_path):\n-            if filename.endswith(\".py\") and filename != \"__init__.py\":\n-                file_path = os.path.join(overrides_path, filename)\n-                with open(file_path, \"r\") as file:\n-                    register_custom_functions(file.read())"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 3,
        "dependency_files": 1,
        "test_files": 3,
        "unique_directories": 8,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "de209feb31ce2619c9db608d41fa5d58877589cd",
            "date": "2025-01-13T18:02:13Z",
            "author_login": "galvana"
          },
          {
            "sha": "83cb612e4bc7f1fe424cab8a0a54c024331dfe53",
            "date": "2025-01-13T17:08:18Z",
            "author_login": "daveqnet"
          },
          {
            "sha": "7ea4ad58d49dfcd525344fdf1de86078797febf5",
            "date": "2025-01-13T16:05:18Z",
            "author_login": "jpople"
          },
          {
            "sha": "73188c53f9479cd6dbd4f3637a4fc03faec9d3cf",
            "date": "2025-01-13T15:06:42Z",
            "author_login": "lucanovera"
          },
          {
            "sha": "5557f79305b7be60ad6294b8960a011dc97e9e12",
            "date": "2025-01-13T14:27:10Z",
            "author_login": "lucanovera"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "Fides is an open-source privacy engineering platform for managing the fulfillment of data privacy requests in a runtime environment, and the enforcement of privacy regulations in code. The Fides webserver API allows custom integrations to be uploaded as a ZIP file. This ZIP file must contain YAML files, but Fides can be configured to also accept the inclusion of custom Python code in it. The custom code is executed in a restricted, sandboxed environment, but the sandbox can be bypassed to execute any arbitrary code. The vulnerability allows the execution of arbitrary code on the target system within the context of the webserver python process owner on the webserver container, which by default is `root`, and leverage that access to attack underlying infrastructure and integrated systems. This vulnerability affects Fides versions `2.11.0` through `2.19.0`. Exploitation is limited to API clients with the `CONNECTOR_TEMPLATE_REGISTER` authorization scope. In the Fides Admin UI this scope is restricted to highly privileged users, specifically root users and users with the owner role.  Exploitation is only possible if the security configuration parameter `allow_custom_connector_functions` is enabled by the user deploying the Fides webserver container, either in `fides.toml` or by setting the env var `FIDES__SECURITY__ALLOW_CUSTOM_CONNECTOR_FUNCTIONS=True`. By default this configuration parameter is disabled. The vulnerability has been patched in Fides version `2.19.0`. Users are advised to upgrade to this version or later to secure their systems against this threat. Users unable to upgrade should ensure that `allow_custom_connector_functions` in `fides.toml` and the `FIDES__SECURITY__ALLOW_CUSTOM_CONNECTOR_FUNCTIONS` are both either unset or explicit set to `False`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-06T18:15:08.937",
    "last_modified": "2024-11-21T08:21:03.807",
    "fix_date": "2023-09-05T19:51:11Z"
  },
  "references": [
    {
      "url": "https://github.com/ethyca/fides/commit/5989b5fa744c8d8c340963b895a054883549358a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ethyca/fides/security/advisories/GHSA-p6p2-qq95-vq5h",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ethyca/fides/commit/5989b5fa744c8d8c340963b895a054883549358a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ethyca/fides/security/advisories/GHSA-p6p2-qq95-vq5h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:08.389171",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fides",
    "owner": "ethyca",
    "created_at": "2021-02-04T22:42:33Z",
    "updated_at": "2025-01-13T18:02:18Z",
    "pushed_at": "2025-01-14T12:04:15Z",
    "size": 110359,
    "stars": 382,
    "forks": 73,
    "open_issues": 272,
    "watchers": 382,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 7114450,
      "TypeScript": 4436776,
      "CSS": 38216,
      "JavaScript": 32908,
      "HTML": 32388,
      "SCSS": 14657,
      "Dockerfile": 4511,
      "Jinja": 3618,
      "Mako": 494
    },
    "commit_activity": {
      "total_commits_last_year": 771,
      "avg_commits_per_week": 14.826923076923077,
      "days_active_last_year": 222
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:29:56.287100"
  }
}