{
  "cve_id": "CVE-2023-41338",
  "github_data": {
    "repository": "gofiber/fiber",
    "fix_commit": "b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc",
    "related_commits": [
      "b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc",
      "b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc"
    ],
    "patch_url": "https://github.com/gofiber/fiber/commit/b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc.patch",
    "fix_commit_details": {
      "sha": "b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc",
      "commit_date": "2023-09-06T11:20:33Z",
      "author": {
        "login": "ReneWerner87",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "IsFromLocal corrected",
        "length": 21,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 122,
        "additions": 94,
        "deletions": 28
      },
      "files": [
        {
          "filename": "ctx.go",
          "status": "modified",
          "additions": 3,
          "deletions": 7,
          "patch": "@@ -1887,12 +1887,12 @@ func (c *Ctx) IsProxyTrusted() bool {\n \treturn false\n }\n \n-var localHosts = [...]string{\"127.0.0.1\", \"0.0.0.0\", \"::1\"}\n+var localHosts = [...]string{\"127.0.0.1\", \"::1\"}\n \n // IsLocalHost will return true if address is a localhost address.\n func (*Ctx) isLocalHost(address string) bool {\n \tfor _, h := range localHosts {\n-\t\tif strings.Contains(address, h) {\n+\t\tif address == h {\n \t\t\treturn true\n \t\t}\n \t}\n@@ -1901,9 +1901,5 @@ func (*Ctx) isLocalHost(address string) bool {\n \n // IsFromLocal will return true if request came from local.\n func (c *Ctx) IsFromLocal() bool {\n-\tips := c.IPs()\n-\tif len(ips) == 0 {\n-\t\tips = append(ips, c.IP())\n-\t}\n-\treturn c.isLocalHost(ips[0])\n+\treturn c.isLocalHost(c.fasthttp.RemoteIP().String())\n }"
        },
        {
          "filename": "ctx_test.go",
          "status": "modified",
          "additions": 91,
          "deletions": 21,
          "patch": "@@ -17,6 +17,7 @@ import (\n \t\"fmt\"\n \t\"io\"\n \t\"mime/multipart\"\n+\t\"net\"\n \t\"net/http/httptest\"\n \t\"net/url\"\n \t\"os\"\n@@ -4918,57 +4919,126 @@ func Test_Ctx_GetReqHeaders(t *testing.T) {\n \t})\n }\n \n-// go test -run Test_Ctx_IsFromLocal\n-func Test_Ctx_IsFromLocal(t *testing.T) {\n+// go test -run Test_Ctx_IsFromLocal_X_Forwarded\n+func Test_Ctx_IsFromLocal_X_Forwarded(t *testing.T) {\n \tt.Parallel()\n-\t// Test \"0.0.0.0\", \"127.0.0.1\" and \"::1\".\n+\t// Test unset X-Forwarded-For header.\n \t{\n \t\tapp := New()\n \t\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n \t\tdefer app.ReleaseCtx(c)\n-\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t\t// fasthttp returns \"0.0.0.0\" as IP as there is no remote address.\n+\t\tutils.AssertEqual(t, \"0.0.0.0\", c.IP())\n+\t\tutils.AssertEqual(t, false, c.IsFromLocal())\n \t}\n-\t// This is a test for \"0.0.0.0\"\n+\t// Test when setting X-Forwarded-For header to localhost \"127.0.0.1\"\n \t{\n \t\tapp := New()\n \t\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n-\t\tc.Request().Header.Set(HeaderXForwardedFor, \"0.0.0.0\")\n+\t\tc.Request().Header.Set(HeaderXForwardedFor, \"127.0.0.1\")\n \t\tdefer app.ReleaseCtx(c)\n-\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t\tutils.AssertEqual(t, false, c.IsFromLocal())\n \t}\n-\n-\t// This is a test for \"127.0.0.1\"\n+\t// Test when setting X-Forwarded-For header to localhost \"::1\"\n \t{\n \t\tapp := New()\n \t\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n-\t\tc.Request().Header.Set(HeaderXForwardedFor, \"127.0.0.1\")\n+\t\tc.Request().Header.Set(HeaderXForwardedFor, \"::1\")\n \t\tdefer app.ReleaseCtx(c)\n-\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t\tutils.AssertEqual(t, false, c.IsFromLocal())\n \t}\n-\n-\t// This is a test for \"localhost\"\n+\t// Test when setting X-Forwarded-For to full localhost IPv6 address \"0:0:0:0:0:0:0:1\"\n \t{\n \t\tapp := New()\n \t\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n+\t\tc.Request().Header.Set(HeaderXForwardedFor, \"0:0:0:0:0:0:0:1\")\n \t\tdefer app.ReleaseCtx(c)\n-\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t\tutils.AssertEqual(t, false, c.IsFromLocal())\n \t}\n-\n-\t// This is testing \"::1\", it is the compressed format IPV6 loopback address 0:0:0:0:0:0:0:1.\n-\t// It is the equivalent of the IPV4 address 127.0.0.1.\n+\t// Test for a random IP address.\n \t{\n \t\tapp := New()\n \t\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n-\t\tc.Request().Header.Set(HeaderXForwardedFor, \"::1\")\n+\t\tc.Request().Header.Set(HeaderXForwardedFor, \"93.46.8.90\")\n \t\tdefer app.ReleaseCtx(c)\n-\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t\tutils.AssertEqual(t, false, c.IsFromLocal())\n \t}\n+}\n \n+// go test -run Test_Ctx_IsFromLocal_RemoteAddr\n+func Test_Ctx_IsFromLocal_RemoteAddr(t *testing.T) {\n+\tt.Parallel()\n+\n+\tlocalIPv4 := net.Addr(&net.TCPAddr{IP: net.ParseIP(\"127.0.0.1\")})\n+\tlocalIPv6 := net.Addr(&net.TCPAddr{IP: net.ParseIP(\"::1\")})\n+\tlocalIPv6long := net.Addr(&net.TCPAddr{IP: net.ParseIP(\"0:0:0:0:0:0:0:1\")})\n+\n+\tzeroIPv4 := net.Addr(&net.TCPAddr{IP: net.IPv4zero})\n+\n+\tsomeIPv4 := net.Addr(&net.TCPAddr{IP: net.ParseIP(\"93.46.8.90\")})\n+\tsomeIPv6 := net.Addr(&net.TCPAddr{IP: net.ParseIP(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\")})\n+\n+\t// Test for the case fasthttp remoteAddr is set to \"127.0.0.1\".\n \t{\n \t\tapp := New()\n-\t\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n-\t\tc.Request().Header.Set(HeaderXForwardedFor, \"93.46.8.90\")\n+\t\tfastCtx := &fasthttp.RequestCtx{}\n+\t\tfastCtx.SetRemoteAddr(localIPv4)\n+\t\tc := app.AcquireCtx(fastCtx)\n+\t\tdefer app.ReleaseCtx(c)\n+\n+\t\tutils.AssertEqual(t, \"127.0.0.1\", c.IP())\n+\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t}\n+\t// Test for the case fasthttp remoteAddr is set to \"::1\".\n+\t{\n+\t\tapp := New()\n+\t\tfastCtx := &fasthttp.RequestCtx{}\n+\t\tfastCtx.SetRemoteAddr(localIPv6)\n+\t\tc := app.AcquireCtx(fastCtx)\n+\t\tdefer app.ReleaseCtx(c)\n+\t\tutils.AssertEqual(t, \"::1\", c.IP())\n+\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t}\n+\t// Test for the case fasthttp remoteAddr is set to \"0:0:0:0:0:0:0:1\".\n+\t{\n+\t\tapp := New()\n+\t\tfastCtx := &fasthttp.RequestCtx{}\n+\t\tfastCtx.SetRemoteAddr(localIPv6long)\n+\t\tc := app.AcquireCtx(fastCtx)\n+\t\tdefer app.ReleaseCtx(c)\n+\t\t// fasthttp should return \"::1\" for \"0:0:0:0:0:0:0:1\".\n+\t\t// otherwise IsFromLocal() will break.\n+\t\tutils.AssertEqual(t, \"::1\", c.IP())\n+\t\tutils.AssertEqual(t, true, c.IsFromLocal())\n+\t}\n+\t// Test for the case fasthttp remoteAddr is set to \"0.0.0.0\".\n+\t{\n+\t\tapp := New()\n+\t\tfastCtx := &fasthttp.RequestCtx{}\n+\t\tfastCtx.SetRemoteAddr(zeroIPv4)\n+\t\tc := app.AcquireCtx(fastCtx)\n+\t\tdefer app.ReleaseCtx(c)\n+\t\tutils.AssertEqual(t, \"0.0.0.0\", c.IP())\n+\t\tutils.AssertEqual(t, false, c.IsFromLocal())\n+\t}\n+\t// Test for the case fasthttp remoteAddr is set to \"93.46.8.90\".\n+\t{\n+\t\tapp := New()\n+\t\tfastCtx := &fasthttp.RequestCtx{}\n+\t\tfastCtx.SetRemoteAddr(someIPv4)\n+\t\tc := app.AcquireCtx(fastCtx)\n+\t\tdefer app.ReleaseCtx(c)\n+\t\tutils.AssertEqual(t, \"93.46.8.90\", c.IP())\n+\t\tutils.AssertEqual(t, false, c.IsFromLocal())\n+\t}\n+\t// Test for the case fasthttp remoteAddr is set to \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\".\n+\t{\n+\t\tapp := New()\n+\t\tfastCtx := &fasthttp.RequestCtx{}\n+\t\tfastCtx.SetRemoteAddr(someIPv6)\n+\t\tc := app.AcquireCtx(fastCtx)\n \t\tdefer app.ReleaseCtx(c)\n+\t\tutils.AssertEqual(t, \"2001:db8:85a3::8a2e:370:7334\", c.IP())\n \t\tutils.AssertEqual(t, false, c.IsFromLocal())\n \t}\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "44b971ace579437b8792025ec14e972630386b90",
            "date": "2025-01-14T02:37:29Z",
            "author_login": "gaby"
          },
          {
            "sha": "4e5fea1d7a830a52cbe736d2da88660a2e959549",
            "date": "2025-01-13T13:18:03Z",
            "author_login": "grivera64"
          },
          {
            "sha": "6c7473b842148a0a59bc2c0d511f330373fa3fde",
            "date": "2025-01-10T12:46:21Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bc37f209bfef66d8ff84dc7d13dc066107eb3d9c",
            "date": "2025-01-08T07:19:20Z",
            "author_login": "ReneWerner87"
          },
          {
            "sha": "86d72bbba8b5998bb4583f3bff110ede1391d795",
            "date": "2025-01-07T18:20:53Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-670",
    "description": "Fiber is an Express inspired web framework built in the go language. Versions of gofiber prior to 2.49.2 did not properly restrict access to localhost. This issue impacts users of our project who rely on the `ctx.IsFromLocal` method to restrict access to localhost requests. If exploited, it could allow unauthorized access to resources intended only for localhost. Setting `X-Forwarded-For: 127.0.0.1` in a request from a foreign host, will result in true for `ctx.IsFromLocal`. Access is limited to the scope of the affected process. This issue has been patched in version `2.49.2` with commit `b8c9ede6`. Users are advised to upgrade. There are no known workarounds to remediate this vulnerability without upgrading to the patched version. ",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-08T19:15:43.977",
    "last_modified": "2024-11-21T08:21:06.483",
    "fix_date": "2023-09-06T11:20:33Z"
  },
  "references": [
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For",
      "source": "security-advisories@github.com",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://docs.gofiber.io/api/ctx#isfromlocal",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/gofiber/fiber/commit/b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gofiber/fiber/security/advisories/GHSA-3q5p-3558-364f",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://docs.gofiber.io/api/ctx#isfromlocal",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/gofiber/fiber/commit/b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gofiber/fiber/security/advisories/GHSA-3q5p-3558-364f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:08.393372",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fiber",
    "owner": "gofiber",
    "created_at": "2020-01-16T03:59:20Z",
    "updated_at": "2025-01-14T12:32:36Z",
    "pushed_at": "2025-01-14T02:37:36Z",
    "size": 229934,
    "stars": 34637,
    "forks": 1696,
    "open_issues": 100,
    "watchers": 34637,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v2"
    ],
    "languages": {
      "Go": 1562365,
      "Makefile": 1868
    },
    "commit_activity": {
      "total_commits_last_year": 253,
      "avg_commits_per_week": 4.865384615384615,
      "days_active_last_year": 141
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:42:58.049694"
  }
}