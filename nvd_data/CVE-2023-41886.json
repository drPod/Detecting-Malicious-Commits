{
  "cve_id": "CVE-2023-41886",
  "github_data": {
    "repository": "OpenRefine/OpenRefine",
    "fix_commit": "2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d",
    "related_commits": [
      "2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d",
      "2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d"
    ],
    "patch_url": "https://github.com/OpenRefine/OpenRefine/commit/2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d.patch",
    "fix_commit_details": {
      "sha": "2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d",
      "commit_date": "2023-09-12T06:34:13Z",
      "author": {
        "login": "wetneb",
        "type": "User",
        "stats": {
          "total_commits": 1479,
          "average_weekly_commits": 1.891304347826087,
          "total_additions": 347804,
          "total_deletions": 349731,
          "weeks_active": 288
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-qqh2-wvmv-h72m",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 74,
        "additions": 48,
        "deletions": 26
      },
      "files": [
        {
          "filename": "extensions/database/src/com/google/refine/extension/database/DatabaseConfiguration.java",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -29,6 +29,9 @@\n \n package com.google.refine.extension.database;\n \n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n public class DatabaseConfiguration {\n \n     private String connectionName;\n@@ -123,4 +126,17 @@ public String toString() {\n                 + databaseSchema + \", useSSL=\" + useSSL + \"]\";\n     }\n \n+    public URI toURI() {\n+        try {\n+            return new URI(\n+                    \"jdbc:\" + databaseType.toLowerCase(),\n+                    databaseHost + ((databasePort == 0) ? \"\" : (\":\" + databasePort)),\n+                    \"/\" + databaseName,\n+                    useSSL ? \"useSSL=true\" : null,\n+                    null\n+            );\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n }"
        },
        {
          "filename": "extensions/database/src/com/google/refine/extension/database/mariadb/MariaDBConnectionManager.java",
          "status": "modified",
          "additions": 1,
          "deletions": 9,
          "patch": "@@ -134,7 +134,7 @@ public Connection getConnection(DatabaseConfiguration databaseConfiguration, boo\n \n             Class.forName(type.getClassPath());\n             DriverManager.setLoginTimeout(10);\n-            String dbURL = getDatabaseUrl(databaseConfiguration);\n+            String dbURL = databaseConfiguration.toURI().toString();\n             connection = DriverManager.getConnection(dbURL, databaseConfiguration.getDatabaseUser(),\n                     databaseConfiguration.getDatabasePassword());\n \n@@ -162,14 +162,6 @@ public void shutdown() {\n                 logger.warn(\"Non-Managed connection could not be closed. Whoops!\", e);\n             }\n         }\n-\n     }\n \n-    private static String getDatabaseUrl(DatabaseConfiguration dbConfig) {\n-\n-        int port = dbConfig.getDatabasePort();\n-        return \"jdbc:\" + dbConfig.getDatabaseType().toLowerCase() + \"://\" + dbConfig.getDatabaseHost()\n-                + ((port == 0) ? \"\" : (\":\" + port)) + \"/\" + dbConfig.getDatabaseName();\n-\n-    }\n }"
        },
        {
          "filename": "extensions/database/src/com/google/refine/extension/database/mysql/MySQLConnectionManager.java",
          "status": "modified",
          "additions": 1,
          "deletions": 8,
          "patch": "@@ -129,7 +129,7 @@ public Connection getConnection(DatabaseConfiguration databaseConfiguration, boo\n                     return connection;\n                 }\n             }\n-            String dbURL = getDatabaseUrl(databaseConfiguration);\n+            String dbURL = databaseConfiguration.toURI().toString();\n             Class.forName(type.getClassPath());\n \n             // logger.info(\"*** type.getClassPath() ::{}, {}**** \", type.getClassPath());\n@@ -166,11 +166,4 @@ public void shutdown() {\n \n     }\n \n-    private String getDatabaseUrl(DatabaseConfiguration dbConfig) {\n-\n-        int port = dbConfig.getDatabasePort();\n-        return \"jdbc:\" + dbConfig.getDatabaseType() + \"://\" + dbConfig.getDatabaseHost()\n-                + ((port == 0) ? \"\" : (\":\" + port)) + \"/\" + dbConfig.getDatabaseName() + \"?useSSL=\" + dbConfig.isUseSSL();\n-\n-    }\n }"
        },
        {
          "filename": "extensions/database/src/com/google/refine/extension/database/pgsql/PgSQLConnectionManager.java",
          "status": "modified",
          "additions": 1,
          "deletions": 8,
          "patch": "@@ -136,7 +136,7 @@ public Connection getConnection(DatabaseConfiguration databaseConfiguration, boo\n \n             Class.forName(type.getClassPath());\n             DriverManager.setLoginTimeout(10);\n-            String dbURL = getDatabaseUrl(databaseConfiguration);\n+            String dbURL = databaseConfiguration.toURI().toString();\n             connection = DriverManager.getConnection(dbURL, databaseConfiguration.getDatabaseUser(),\n                     databaseConfiguration.getDatabasePassword());\n \n@@ -165,11 +165,4 @@ public void shutdown() {\n \n     }\n \n-    private static String getDatabaseUrl(DatabaseConfiguration dbConfig) {\n-\n-        int port = dbConfig.getDatabasePort();\n-        return \"jdbc:\" + dbConfig.getDatabaseType().toLowerCase() + \"://\" + dbConfig.getDatabaseHost()\n-                + ((port == 0) ? \"\" : (\":\" + port)) + \"/\" + dbConfig.getDatabaseName();\n-\n-    }\n }"
        },
        {
          "filename": "extensions/database/src/com/google/refine/extension/database/sqlite/SQLiteConnectionManager.java",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -35,6 +35,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.SQLException;\n@@ -66,7 +68,12 @@ public static SQLiteConnectionManager getInstance() {\n     }\n \n     public static String getDatabaseUrl(DatabaseConfiguration dbConfig) {\n-        return \"jdbc:\" + dbConfig.getDatabaseType().toLowerCase() + \":\" + dbConfig.getDatabaseName();\n+        try {\n+            URI uri = new URI(\"jdbc:\" + dbConfig.getDatabaseType().toLowerCase(), dbConfig.getDatabaseName(), null);\n+            return uri.toASCIIString();\n+        } catch (URISyntaxException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n     }\n \n     /**"
        },
        {
          "filename": "extensions/database/tests/src/com/google/refine/extension/database/DatabaseConfigurationTest.java",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+package com.google.refine.extension.database;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class DatabaseConfigurationTest {\n+\n+    @Test\n+    public void testToURI() {\n+        DatabaseConfiguration config = new DatabaseConfiguration();\n+        config.setDatabaseType(\"mysql\");\n+        config.setDatabaseHost(\"my.host\");\n+        // maliciously crafted database name which attempts to enable local file reads for an exploit\n+        config.setDatabaseName(\"test?allowLoadLocalInfile=true#\");\n+\n+        String url = config.toURI().toString();\n+        // the database name is escaped, preventing the exploit\n+        assertEquals(url, \"jdbc:mysql://my.host/test%3FallowLoadLocalInfile=true%23\");\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9353d6df6b9c0554d3581a53fda972cae54370fc",
            "date": "2025-01-14T12:38:27Z",
            "author_login": "weblate"
          },
          {
            "sha": "1d48fb60530f9d7ac6c2d633a7774d70f0c18298",
            "date": "2025-01-14T07:09:22Z",
            "author_login": "thadguidry"
          },
          {
            "sha": "f353f9865a1356681bb2321f4e0bcf1e65585d43",
            "date": "2025-01-13T20:34:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e40d26a824272da40c0804cff25dde34e517b74f",
            "date": "2025-01-13T20:34:09Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a86836eed3f4d9e5e8e163aa40b25469ee170e43",
            "date": "2025-01-13T20:33:00Z",
            "author_login": "weblate"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-89",
    "description": "OpenRefine is a powerful free, open source tool for working with messy data. Prior to version 3.7.5, an arbitrary file read vulnerability allows any unauthenticated user to read a file on a server. Version 3.7.5 fixes this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-15T21:15:11.297",
    "last_modified": "2024-11-21T08:21:51.230",
    "fix_date": "2023-09-12T06:34:13Z"
  },
  "references": [
    {
      "url": "https://github.com/OpenRefine/OpenRefine/commit/2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qqh2-wvmv-h72m",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenRefine/OpenRefine/commit/2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qqh2-wvmv-h72m",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:08.416551",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OpenRefine",
    "owner": "OpenRefine",
    "created_at": "2012-10-15T02:22:48Z",
    "updated_at": "2025-01-14T12:38:35Z",
    "pushed_at": "2025-01-14T12:38:30Z",
    "size": 404937,
    "stars": 11031,
    "forks": 1998,
    "open_issues": 659,
    "watchers": 11031,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 5624322,
      "JavaScript": 1796106,
      "HTML": 680637,
      "CSS": 155170,
      "Shell": 24785,
      "Batchfile": 9507,
      "Python": 4899,
      "Inno Setup": 4432,
      "mIRC Script": 762,
      "Less": 139
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:30:34.126653"
  }
}