{
  "cve_id": "CVE-2023-41891",
  "github_data": {
    "repository": "flyteorg/flyteadmin",
    "fix_commit": "b3177ef70f068e908140b8a4a9913dfa74f289fd",
    "related_commits": [
      "b3177ef70f068e908140b8a4a9913dfa74f289fd",
      "b3177ef70f068e908140b8a4a9913dfa74f289fd"
    ],
    "patch_url": "https://github.com/flyteorg/flyteadmin/commit/b3177ef70f068e908140b8a4a9913dfa74f289fd.patch",
    "fix_commit_details": {
      "sha": "b3177ef70f068e908140b8a4a9913dfa74f289fd",
      "commit_date": "2023-08-31T21:21:05Z",
      "author": {
        "login": "iaroslav-ciupin",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-r847-6w6h-r8g4",
        "length": 153,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 879,
        "additions": 500,
        "deletions": 379
      },
      "files": [
        {
          "filename": "pkg/clusterresource/impl/admin_service_data_provider.go",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -4,9 +4,12 @@ import (\n \t\"context\"\n \t\"fmt\"\n \n-\t\"github.com/flyteorg/flyteadmin/pkg/clusterresource/interfaces\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service\"\n+\n+\t\"github.com/flyteorg/flyteadmin/pkg/clusterresource/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n )\n \n // Implementation of an interfaces.FlyteAdminDataProvider which fetches data using a flyteadmin service client\n@@ -32,6 +35,13 @@ func (p serviceAdminProvider) GetClusterResourceAttributes(ctx context.Context,\n \n var activeProjectsFilter = fmt.Sprintf(\"ne(state,%d)\", admin.Project_ARCHIVED)\n \n+var descCreatedAtSortParam = admin.Sort{\n+\tDirection: admin.Sort_DESCENDING,\n+\tKey:       \"created_at\",\n+}\n+\n+var descCreatedAtSortDBParam, _ = common.NewSortParameter(&descCreatedAtSortParam, models.ProjectColumns)\n+\n func (p serviceAdminProvider) GetProjects(ctx context.Context) (*admin.Projects, error) {\n \tprojects := make([]*admin.Project, 0)\n \tlistReq := &admin.ProjectListRequest{"
        },
        {
          "filename": "pkg/clusterresource/impl/shared.go",
          "status": "modified",
          "additions": 0,
          "deletions": 9,
          "patch": "@@ -1,19 +1,10 @@\n package impl\n \n import (\n-\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"google.golang.org/grpc/codes\"\n )\n \n func NewMissingEntityError(entity string) error {\n \treturn errors.NewFlyteAdminErrorf(codes.NotFound, \"Failed to find [%s]\", entity)\n }\n-\n-var descCreatedAtSortParam = admin.Sort{\n-\tDirection: admin.Sort_DESCENDING,\n-\tKey:       \"created_at\",\n-}\n-\n-var descCreatedAtSortDBParam, _ = common.NewSortParameter(descCreatedAtSortParam)"
        },
        {
          "filename": "pkg/common/sorting.go",
          "status": "modified",
          "additions": 13,
          "deletions": 3,
          "patch": "@@ -2,6 +2,7 @@ package common\n \n import (\n \t\"fmt\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n@@ -23,13 +24,22 @@ func (s *sortParamImpl) GetGormOrderExpr() string {\n \treturn s.gormOrderExpression\n }\n \n-func NewSortParameter(sort admin.Sort) (SortParameter, error) {\n+func NewSortParameter(sort *admin.Sort, allowed sets.String) (SortParameter, error) {\n+\tif sort == nil {\n+\t\treturn nil, nil\n+\t}\n+\n+\tkey := sort.Key\n+\tif !allowed.Has(key) {\n+\t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument, \"invalid sort key '%s'\", key)\n+\t}\n+\n \tvar gormOrderExpression string\n \tswitch sort.Direction {\n \tcase admin.Sort_DESCENDING:\n-\t\tgormOrderExpression = fmt.Sprintf(gormDescending, sort.Key)\n+\t\tgormOrderExpression = fmt.Sprintf(gormDescending, key)\n \tcase admin.Sort_ASCENDING:\n-\t\tgormOrderExpression = fmt.Sprintf(gormAscending, sort.Key)\n+\t\tgormOrderExpression = fmt.Sprintf(gormAscending, key)\n \tdefault:\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument, \"invalid sort order specified: %v\", sort)\n \t}"
        },
        {
          "filename": "pkg/common/sorting_test.go",
          "status": "modified",
          "additions": 35,
          "deletions": 6,
          "patch": "@@ -3,24 +3,53 @@ package common\n import (\n \t\"testing\"\n \n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/stretchr/testify/assert\"\n )\n \n+func TestSortParameter_Nil(t *testing.T) {\n+\tsortParameter, err := NewSortParameter(nil, nil)\n+\n+\tassert.NoError(t, err)\n+\tassert.Nil(t, sortParameter)\n+}\n+\n+func TestSortParameter_InvalidSortKey(t *testing.T) {\n+\t_, err := NewSortParameter(&admin.Sort{\n+\t\tDirection: admin.Sort_ASCENDING,\n+\t\tKey:       \"wrong\",\n+\t}, sets.NewString(\"name\"))\n+\n+\tassert.EqualError(t, err, \"invalid sort key 'wrong'\")\n+}\n+\n+func TestSortParameter_InvalidSortDirection(t *testing.T) {\n+\t_, err := NewSortParameter(&admin.Sort{\n+\t\tDirection: 2,\n+\t\tKey:       \"name\",\n+\t}, sets.NewString(\"name\"))\n+\n+\tassert.EqualError(t, err, `invalid sort order specified: key:\"name\" direction:2 `)\n+}\n+\n func TestSortParameter_Ascending(t *testing.T) {\n-\tsortParameter, err := NewSortParameter(admin.Sort{\n+\tsortParameter, err := NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_ASCENDING,\n \t\tKey:       \"name\",\n-\t})\n-\tassert.Nil(t, err)\n+\t}, sets.NewString(\"name\"))\n+\n+\tassert.NoError(t, err)\n \tassert.Equal(t, \"name asc\", sortParameter.GetGormOrderExpr())\n }\n \n func TestSortParameter_Descending(t *testing.T) {\n-\tsortParameter, err := NewSortParameter(admin.Sort{\n+\tsortParameter, err := NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_DESCENDING,\n \t\tKey:       \"project\",\n-\t})\n-\tassert.Nil(t, err)\n+\t}, sets.NewString(\"project\"))\n+\n+\tassert.NoError(t, err)\n \tassert.Equal(t, \"project desc\", sortParameter.GetGormOrderExpr())\n }"
        },
        {
          "filename": "pkg/manager/impl/description_entity_manager.go",
          "status": "modified",
          "additions": 11,
          "deletions": 12,
          "patch": "@@ -4,22 +4,22 @@ import (\n \t\"context\"\n \t\"strconv\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n+\t\"github.com/flyteorg/flytestdlib/contextutils\"\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"google.golang.org/grpc/codes\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n-\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/util\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n \trepoInterfaces \"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flytestdlib/contextutils\"\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"google.golang.org/grpc/codes\"\n )\n \n type DescriptionEntityMetrics struct {\n@@ -65,13 +65,12 @@ func (d *DescriptionEntityManager) ListDescriptionEntity(ctx context.Context, re\n \t\tlogger.Error(ctx, \"failed to get database filter\")\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.DescriptionEntityColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,"
        },
        {
          "filename": "pkg/manager/impl/execution_manager.go",
          "status": "modified",
          "additions": 18,
          "deletions": 28,
          "patch": "@@ -6,34 +6,32 @@ import (\n \t\"strconv\"\n \t\"time\"\n \n-\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n-\n-\t\"github.com/flyteorg/flyteadmin/plugins\"\n-\n+\t\"github.com/benbjohnson/clock\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/flytek8s\"\n-\n-\t\"github.com/flyteorg/flyteadmin/auth\"\n-\n-\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/resources\"\n-\n-\tdataInterfaces \"github.com/flyteorg/flyteadmin/pkg/data/interfaces\"\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n+\t\"github.com/flyteorg/flytestdlib/storage\"\n+\t\"github.com/golang/protobuf/proto\"\n \t\"github.com/golang/protobuf/ptypes\"\n \t\"github.com/golang/protobuf/ptypes/timestamp\"\n \t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"google.golang.org/grpc/codes\"\n \n-\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n-\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\t\"github.com/flyteorg/flytestdlib/storage\"\n-\n+\t\"github.com/flyteorg/flyteadmin/auth\"\n \tcloudeventInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/cloudevent/interfaces\"\n \teventWriter \"github.com/flyteorg/flyteadmin/pkg/async/events/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/async/notifications\"\n \tnotificationInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/notifications/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n+\tdataInterfaces \"github.com/flyteorg/flyteadmin/pkg/data/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/executions\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/resources\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/util\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n@@ -42,13 +40,7 @@ import (\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n \tworkflowengineInterfaces \"github.com/flyteorg/flyteadmin/pkg/workflowengine/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\t\"google.golang.org/grpc/codes\"\n-\n-\t\"github.com/benbjohnson/clock\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n-\t\"github.com/golang/protobuf/proto\"\n+\t\"github.com/flyteorg/flyteadmin/plugins\"\n )\n \n const childContainerQueueKey = \"child_queue\"\n@@ -1434,12 +1426,10 @@ func (m *ExecutionManager) ListExecutions(\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.ExecutionColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n \n \toffset, err := validation.ValidateToken(request.Token)"
        },
        {
          "filename": "pkg/manager/impl/execution_manager_test.go",
          "status": "modified",
          "additions": 26,
          "deletions": 36,
          "patch": "@@ -3,64 +3,54 @@ package impl\n import (\n \t\"context\"\n \t\"errors\"\n+\t\"fmt\"\n \t\"strings\"\n \t\"testing\"\n-\n-\t\"github.com/flyteorg/flyteadmin/plugins\"\n-\n-\t\"google.golang.org/grpc/status\"\n-\n-\t\"google.golang.org/protobuf/types/known/timestamppb\"\n+\t\"time\"\n \n \t\"github.com/benbjohnson/clock\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n-\tcommonTestUtils \"github.com/flyteorg/flyteadmin/pkg/common/testutils\"\n-\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/executions\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n-\tmanagerInterfaces \"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n-\tmanagerMocks \"github.com/flyteorg/flyteadmin/pkg/manager/mocks\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/runtime\"\n \t\"github.com/flyteorg/flyteidl/clients/go/coreutils\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/event\"\n+\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/flyteorg/flytestdlib/storage\"\n \t\"github.com/gogo/protobuf/jsonpb\"\n+\t\"github.com/golang/protobuf/proto\"\n \t\"github.com/golang/protobuf/ptypes\"\n+\t\"github.com/golang/protobuf/ptypes/wrappers\"\n+\t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/mock\"\n \t\"google.golang.org/grpc/codes\"\n-\n+\t\"google.golang.org/grpc/status\"\n+\t\"google.golang.org/protobuf/types/known/timestamppb\"\n \t\"k8s.io/apimachinery/pkg/api/resource\"\n-\n-\teventWriterMocks \"github.com/flyteorg/flyteadmin/pkg/async/events/mocks\"\n \t\"k8s.io/apimachinery/pkg/util/sets\"\n \n \t\"github.com/flyteorg/flyteadmin/auth\"\n-\n-\tcommonMocks \"github.com/flyteorg/flyteadmin/pkg/common/mocks\"\n-\n-\t\"github.com/flyteorg/flytestdlib/storage\"\n-\n-\t\"time\"\n-\n-\t\"fmt\"\n-\n+\teventWriterMocks \"github.com/flyteorg/flyteadmin/pkg/async/events/mocks\"\n \tnotificationMocks \"github.com/flyteorg/flyteadmin/pkg/async/notifications/mocks\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n+\tcommonMocks \"github.com/flyteorg/flyteadmin/pkg/common/mocks\"\n+\tcommonTestUtils \"github.com/flyteorg/flyteadmin/pkg/common/testutils\"\n \tdataMocks \"github.com/flyteorg/flyteadmin/pkg/data/mocks\"\n+\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/executions\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/testutils\"\n+\tmanagerInterfaces \"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n+\tmanagerMocks \"github.com/flyteorg/flyteadmin/pkg/manager/mocks\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \trepositoryMocks \"github.com/flyteorg/flyteadmin/pkg/repositories/mocks\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/runtime\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n \truntimeIFaceMocks \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces/mocks\"\n \truntimeMocks \"github.com/flyteorg/flyteadmin/pkg/runtime/mocks\"\n \tworkflowengineInterfaces \"github.com/flyteorg/flyteadmin/pkg/workflowengine/interfaces\"\n \tworkflowengineMocks \"github.com/flyteorg/flyteadmin/pkg/workflowengine/mocks\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"github.com/golang/protobuf/proto\"\n-\t\"github.com/golang/protobuf/ptypes/wrappers\"\n-\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/flyteorg/flyteadmin/plugins\"\n )\n \n var spec = testutils.GetExecutionRequest().Spec\n@@ -2979,7 +2969,7 @@ func TestListExecutions(t *testing.T) {\n \t\tassert.True(t, domainFilter, \"Missing domain equality filter\")\n \t\tassert.False(t, nameFilter, \"Included name equality filter\")\n \t\tassert.Equal(t, limit, input.Limit)\n-\t\tassert.Equal(t, \"domain asc\", input.SortParameter.GetGormOrderExpr())\n+\t\tassert.Equal(t, \"execution_domain asc\", input.SortParameter.GetGormOrderExpr())\n \t\tassert.Equal(t, 2, input.Offset)\n \t\tassert.EqualValues(t, map[common.Entity]bool{\n \t\t\tcommon.Execution: true,\n@@ -3027,7 +3017,7 @@ func TestListExecutions(t *testing.T) {\n \t\tLimit: limit,\n \t\tSortBy: &admin.Sort{\n \t\t\tDirection: admin.Sort_ASCENDING,\n-\t\t\tKey:       \"domain\",\n+\t\t\tKey:       \"execution_domain\",\n \t\t},\n \t\tToken: \"2\",\n \t})\n@@ -3965,7 +3955,7 @@ func TestListExecutions_LegacyModel(t *testing.T) {\n \t\tassert.True(t, domainFilter, \"Missing domain equality filter\")\n \t\tassert.False(t, nameFilter, \"Included name equality filter\")\n \t\tassert.Equal(t, limit, input.Limit)\n-\t\tassert.Equal(t, \"domain asc\", input.SortParameter.GetGormOrderExpr())\n+\t\tassert.Equal(t, \"execution_domain asc\", input.SortParameter.GetGormOrderExpr())\n \t\tassert.Equal(t, 2, input.Offset)\n \t\treturn interfaces.ExecutionCollectionOutput{\n \t\t\tExecutions: []models.Execution{\n@@ -4010,7 +4000,7 @@ func TestListExecutions_LegacyModel(t *testing.T) {\n \t\tLimit: limit,\n \t\tSortBy: &admin.Sort{\n \t\t\tDirection: admin.Sort_ASCENDING,\n-\t\t\tKey:       \"domain\",\n+\t\t\tKey:       \"execution_domain\",\n \t\t},\n \t\tToken: \"2\",\n \t})"
        },
        {
          "filename": "pkg/manager/impl/launch_plan_manager.go",
          "status": "modified",
          "additions": 18,
          "deletions": 26,
          "patch": "@@ -5,15 +5,16 @@ import (\n \t\"context\"\n \t\"strconv\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n-\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/golang/protobuf/proto\"\n \t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"google.golang.org/grpc/codes\"\n \n \tscheduleInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/schedule/interfaces\"\n-\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/util\"\n@@ -23,10 +24,6 @@ import (\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\t\"github.com/golang/protobuf/proto\"\n-\t\"google.golang.org/grpc/codes\"\n )\n \n type launchPlanMetrics struct {\n@@ -408,13 +405,11 @@ func (m *LaunchPlanManager) ListLaunchPlans(ctx context.Context, request admin.R\n \t\treturn nil, err\n \t}\n \n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.LaunchPlanColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,\n@@ -463,13 +458,11 @@ func (m *LaunchPlanManager) ListActiveLaunchPlans(ctx context.Context, request a\n \t\treturn nil, err\n \t}\n \n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.LaunchPlanColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,\n@@ -514,13 +507,12 @@ func (m *LaunchPlanManager) ListLaunchPlanIds(ctx context.Context, request admin\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.LaunchPlanColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument, \"invalid pagination token %s\", request.Token)"
        },
        {
          "filename": "pkg/manager/impl/named_entity_manager.go",
          "status": "modified",
          "additions": 10,
          "deletions": 12,
          "patch": "@@ -5,23 +5,22 @@ import (\n \t\"strconv\"\n \t\"strings\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"google.golang.org/grpc/codes\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n-\t\"google.golang.org/grpc/codes\"\n-\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/util\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n \trepoInterfaces \"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n )\n \n const state = \"state\"\n@@ -119,13 +118,12 @@ func (m *NamedEntityManager) ListNamedEntities(ctx context.Context, request admi\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.NamedEntityColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,"
        },
        {
          "filename": "pkg/manager/impl/node_execution_manager.go",
          "status": "modified",
          "additions": 18,
          "deletions": 28,
          "patch": "@@ -2,43 +2,34 @@ package impl\n \n import (\n \t\"context\"\n+\t\"fmt\"\n \t\"strconv\"\n \n-\tcloudeventInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/cloudevent/interfaces\"\n-\n-\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n-\n-\teventWriter \"github.com/flyteorg/flyteadmin/pkg/async/events/interfaces\"\n-\n-\tnotificationInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/notifications/interfaces\"\n-\t\"github.com/golang/protobuf/proto\"\n-\n-\t\"github.com/flyteorg/flytestdlib/storage\"\n-\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n-\n-\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n+\t\"github.com/flyteorg/flytestdlib/storage\"\n+\t\"github.com/golang/protobuf/proto\"\n \t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"google.golang.org/grpc/codes\"\n \n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\n+\tcloudeventInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/cloudevent/interfaces\"\n+\teventWriter \"github.com/flyteorg/flyteadmin/pkg/async/events/interfaces\"\n+\tnotificationInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/notifications/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n-\n-\t\"fmt\"\n-\n \tdataInterfaces \"github.com/flyteorg/flyteadmin/pkg/data/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/util\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n \trepoInterfaces \"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\t\"google.golang.org/grpc/codes\"\n )\n \n type nodeExecutionMetrics struct {\n@@ -378,13 +369,12 @@ func (m *NodeExecutionManager) listNodeExecutions(\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif sortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*sortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(sortBy, models.NodeExecutionColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(requestToken)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,"
        },
        {
          "filename": "pkg/manager/impl/node_execution_manager_test.go",
          "status": "modified",
          "additions": 21,
          "deletions": 17,
          "patch": "@@ -15,16 +15,10 @@ import (\n \n \teventWriterMocks \"github.com/flyteorg/flyteadmin/pkg/async/events/mocks\"\n \n-\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/testutils\"\n \t\"github.com/flyteorg/flytestdlib/storage\"\n \n-\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n-\tcommonMocks \"github.com/flyteorg/flyteadmin/pkg/common/mocks\"\n-\tdataMocks \"github.com/flyteorg/flyteadmin/pkg/data/mocks\"\n-\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n-\trepositoryMocks \"github.com/flyteorg/flyteadmin/pkg/repositories/mocks\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/testutils\"\n+\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/event\"\n@@ -33,6 +27,14 @@ import (\n \t\"github.com/golang/protobuf/ptypes\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"google.golang.org/grpc/codes\"\n+\n+\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n+\tcommonMocks \"github.com/flyteorg/flyteadmin/pkg/common/mocks\"\n+\tdataMocks \"github.com/flyteorg/flyteadmin/pkg/data/mocks\"\n+\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n+\trepositoryMocks \"github.com/flyteorg/flyteadmin/pkg/repositories/mocks\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n )\n \n var occurredAt = time.Now().UTC()\n@@ -807,7 +809,7 @@ func TestListNodeExecutionsLevelZero(t *testing.T) {\n \t\t\t\t\"parent_task_execution_id\": nil,\n \t\t\t}, filter)\n \n-\t\t\tassert.Equal(t, \"domain asc\", input.SortParameter.GetGormOrderExpr())\n+\t\t\tassert.Equal(t, \"execution_domain asc\", input.SortParameter.GetGormOrderExpr())\n \t\t\treturn interfaces.NodeExecutionCollectionOutput{\n \t\t\t\tNodeExecutions: []models.NodeExecution{\n \t\t\t\t\t{\n@@ -858,10 +860,10 @@ func TestListNodeExecutionsLevelZero(t *testing.T) {\n \t\tToken: \"2\",\n \t\tSortBy: &admin.Sort{\n \t\t\tDirection: admin.Sort_ASCENDING,\n-\t\t\tKey:       \"domain\",\n+\t\t\tKey:       \"execution_domain\",\n \t\t},\n \t})\n-\tassert.Nil(t, err)\n+\tassert.NoError(t, err)\n \tassert.Len(t, nodeExecutions.NodeExecutions, 1)\n \tassert.True(t, proto.Equal(&admin.NodeExecution{\n \t\tId: &core.NodeExecutionIdentifier{\n@@ -925,7 +927,7 @@ func TestListNodeExecutionsWithParent(t *testing.T) {\n \t\t\tassert.Equal(t, parentID, queryExpr.Args)\n \t\t\tassert.Equal(t, \"parent_id = ?\", queryExpr.Query)\n \n-\t\t\tassert.Equal(t, \"domain asc\", input.SortParameter.GetGormOrderExpr())\n+\t\t\tassert.Equal(t, \"execution_domain asc\", input.SortParameter.GetGormOrderExpr())\n \t\t\treturn interfaces.NodeExecutionCollectionOutput{\n \t\t\t\tNodeExecutions: []models.NodeExecution{\n \t\t\t\t\t{\n@@ -958,7 +960,7 @@ func TestListNodeExecutionsWithParent(t *testing.T) {\n \t\tToken: \"2\",\n \t\tSortBy: &admin.Sort{\n \t\t\tDirection: admin.Sort_ASCENDING,\n-\t\t\tKey:       \"domain\",\n+\t\t\tKey:       \"execution_domain\",\n \t\t},\n \t\tUniqueParentId: \"parent_1\",\n \t})\n@@ -1075,6 +1077,7 @@ func TestListNodeExecutions_NothingToReturn(t *testing.T) {\n \t\t\treturn interfaces.ExecutionCollectionOutput{}, nil\n \t\t})\n \tnodeExecManager := NewNodeExecutionManager(repository, getMockExecutionsConfigProvider(), make([]string, 0), getMockStorageForExecTest(context.Background()), mockScope.NewTestScope(), mockNodeExecutionRemoteURL, nil, nil, &eventWriterMocks.NodeExecutionEventWriter{})\n+\n \t_, err := nodeExecManager.ListNodeExecutions(context.Background(), admin.NodeExecutionListRequest{\n \t\tWorkflowExecutionId: &core.WorkflowExecutionIdentifier{\n \t\t\tProject: \"project\",\n@@ -1085,10 +1088,11 @@ func TestListNodeExecutions_NothingToReturn(t *testing.T) {\n \t\tToken: \"2\",\n \t\tSortBy: &admin.Sort{\n \t\t\tDirection: admin.Sort_ASCENDING,\n-\t\t\tKey:       \"domain\",\n+\t\t\tKey:       \"execution_domain\",\n \t\t},\n \t})\n-\tassert.Nil(t, err)\n+\n+\tassert.NoError(t, err)\n \tassert.False(t, listExecutionsCalled)\n }\n \n@@ -1139,7 +1143,7 @@ func TestListNodeExecutionsForTask(t *testing.T) {\n \t\t\tassert.Equal(t, uint(8), queryExpr.Args)\n \t\t\tassert.Equal(t, \"parent_task_execution_id = ?\", queryExpr.Query)\n \n-\t\t\tassert.Equal(t, \"domain asc\", input.SortParameter.GetGormOrderExpr())\n+\t\t\tassert.Equal(t, \"execution_domain asc\", input.SortParameter.GetGormOrderExpr())\n \t\t\treturn interfaces.NodeExecutionCollectionOutput{\n \t\t\t\tNodeExecutions: []models.NodeExecution{\n \t\t\t\t\t{\n@@ -1184,7 +1188,7 @@ func TestListNodeExecutionsForTask(t *testing.T) {\n \t\tToken: \"2\",\n \t\tSortBy: &admin.Sort{\n \t\t\tDirection: admin.Sort_ASCENDING,\n-\t\t\tKey:       \"domain\",\n+\t\t\tKey:       \"execution_domain\",\n \t\t},\n \t})\n \tassert.Nil(t, err)"
        },
        {
          "filename": "pkg/manager/impl/project_manager.go",
          "status": "modified",
          "additions": 11,
          "deletions": 11,
          "patch": "@@ -4,27 +4,29 @@ import (\n \t\"context\"\n \t\"strconv\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"google.golang.org/grpc/codes\"\n+\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/util\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n \trepoInterfaces \"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"google.golang.org/grpc/codes\"\n )\n \n type ProjectManager struct {\n \tdb     repoInterfaces.Repository\n \tconfig runtimeInterfaces.Configuration\n }\n \n-var alphabeticalSortParam, _ = common.NewSortParameter(admin.Sort{\n+var alphabeticalSortParam, _ = common.NewSortParameter(&admin.Sort{\n \tDirection: admin.Sort_ASCENDING,\n \tKey:       \"identifier\",\n-})\n+}, models.ProjectColumns)\n \n func (m *ProjectManager) CreateProject(ctx context.Context, request admin.ProjectRegisterRequest) (\n \t*admin.ProjectRegisterResponse, error) {\n@@ -61,13 +63,11 @@ func (m *ProjectManager) ListProjects(ctx context.Context, request admin.Project\n \t\treturn nil, err\n \t}\n \n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n-\t} else {\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.ProjectColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif sortParameter == nil {\n \t\tsortParameter = alphabeticalSortParam\n \t}\n "
        },
        {
          "filename": "pkg/manager/impl/signal_manager.go",
          "status": "modified",
          "additions": 11,
          "deletions": 15,
          "patch": "@@ -4,24 +4,22 @@ import (\n \t\"context\"\n \t\"strconv\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n+\t\"google.golang.org/grpc/codes\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/util\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n \trepoInterfaces \"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n-\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n-\n-\t\"google.golang.org/grpc/codes\"\n )\n \n type signalMetrics struct {\n@@ -83,12 +81,10 @@ func (s *SignalManager) ListSignals(ctx context.Context, request admin.SignalLis\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.SignalColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n \n \toffset, err := validation.ValidateToken(request.Token)"
        },
        {
          "filename": "pkg/manager/impl/task_execution_manager.go",
          "status": "modified",
          "additions": 13,
          "deletions": 20,
          "patch": "@@ -5,20 +5,19 @@ import (\n \t\"fmt\"\n \t\"strconv\"\n \n-\tcloudeventInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/cloudevent/interfaces\"\n-\n-\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n-\n-\tnotificationInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/notifications/interfaces\"\n-\t\"github.com/golang/protobuf/proto\"\n-\n-\t\"github.com/flyteorg/flytestdlib/storage\"\n-\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n-\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n+\t\"github.com/flyteorg/flytestdlib/storage\"\n+\t\"github.com/golang/protobuf/proto\"\n \t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"google.golang.org/grpc/codes\"\n \n+\tcloudeventInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/cloudevent/interfaces\"\n+\tnotificationInterfaces \"github.com/flyteorg/flyteadmin/pkg/async/notifications/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \tdataInterfaces \"github.com/flyteorg/flyteadmin/pkg/data/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n@@ -29,10 +28,6 @@ import (\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\t\"google.golang.org/grpc/codes\"\n )\n \n type taskExecutionMetrics struct {\n@@ -258,12 +253,10 @@ func (m *TaskExecutionManager) ListTaskExecutions(\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.TaskExecutionColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n \n \toffset, err := validation.ValidateToken(request.Token)"
        },
        {
          "filename": "pkg/manager/impl/task_manager.go",
          "status": "modified",
          "additions": 15,
          "deletions": 20,
          "patch": "@@ -6,17 +6,15 @@ import (\n \t\"strconv\"\n \t\"time\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n-\n-\t\"github.com/prometheus/client_golang/prometheus\"\n-\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n \t\"github.com/flyteorg/flytestdlib/promutils/labeled\"\n-\n \t\"github.com/golang/protobuf/ptypes\"\n-\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"google.golang.org/grpc/codes\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n@@ -25,11 +23,10 @@ import (\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/validation\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/interfaces\"\n \trepoInterfaces \"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/transformers\"\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n \tworkflowengine \"github.com/flyteorg/flyteadmin/pkg/workflowengine/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"google.golang.org/grpc/codes\"\n )\n \n type taskMetrics struct {\n@@ -169,13 +166,12 @@ func (t *TaskManager) ListTasks(ctx context.Context, request admin.ResourceListR\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.TaskColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,\n@@ -226,13 +222,12 @@ func (t *TaskManager) ListUniqueTaskIdentifiers(ctx context.Context, request adm\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.TaskColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,"
        },
        {
          "filename": "pkg/manager/impl/util/filters.go",
          "status": "modified",
          "additions": 47,
          "deletions": 4,
          "patch": "@@ -3,21 +3,21 @@ package util\n \n import (\n \t\"context\"\n+\t\"fmt\"\n \t\"regexp\"\n \t\"strconv\"\n \t\"strings\"\n \t\"time\"\n \n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/logger\"\n-\n-\t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"google.golang.org/grpc/codes\"\n-\n-\t\"fmt\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n )\n \n const (\n@@ -120,6 +120,36 @@ func prepareValues(field string, values []string) (interface{}, error) {\n \treturn preparedValues, nil\n }\n \n+var allowedJoinEntities = map[common.Entity]sets.String{\n+\tcommon.Execution:           sets.NewString(common.Execution, common.LaunchPlan, common.Workflow, common.Task, common.AdminTag),\n+\tcommon.LaunchPlan:          sets.NewString(common.LaunchPlan, common.Workflow),\n+\tcommon.NodeExecution:       sets.NewString(common.NodeExecution, common.Execution),\n+\tcommon.NodeExecutionEvent:  sets.NewString(common.NodeExecutionEvent),\n+\tcommon.Task:                sets.NewString(common.Task),\n+\tcommon.TaskExecution:       sets.NewString(common.TaskExecution, common.Task, common.Execution, common.NodeExecution),\n+\tcommon.Workflow:            sets.NewString(common.Workflow),\n+\tcommon.NamedEntity:         sets.NewString(common.NamedEntity),\n+\tcommon.NamedEntityMetadata: sets.NewString(common.NamedEntityMetadata),\n+\tcommon.Project:             sets.NewString(common.Project),\n+\tcommon.Signal:              sets.NewString(common.Signal),\n+\tcommon.AdminTag:            sets.NewString(common.AdminTag),\n+}\n+\n+var entityColumns = map[common.Entity]sets.String{\n+\tcommon.Execution:           models.ExecutionColumns,\n+\tcommon.LaunchPlan:          models.LaunchPlanColumns,\n+\tcommon.NodeExecution:       models.NodeExecutionColumns,\n+\tcommon.NodeExecutionEvent:  models.NodeExecutionEventColumns,\n+\tcommon.Task:                models.TaskColumns,\n+\tcommon.TaskExecution:       models.TaskExecutionColumns,\n+\tcommon.Workflow:            models.WorkflowColumns,\n+\tcommon.NamedEntity:         models.NamedEntityColumns,\n+\tcommon.NamedEntityMetadata: models.NamedEntityMetadataColumns,\n+\tcommon.Project:             models.ProjectColumns,\n+\tcommon.Signal:              models.SignalColumns,\n+\tcommon.AdminTag:            models.AdminTagColumns,\n+}\n+\n func ParseFilters(filterParams string, primaryEntity common.Entity) ([]common.InlineFilter, error) {\n \t// Multiple filters can be appended as URI-escaped strings joined by filterExpressionSeperator\n \tfilterExpressions := strings.Split(filterParams, filterExpressionSeperator)\n@@ -133,6 +163,19 @@ func ParseFilters(filterParams string, primaryEntity common.Entity) ([]common.In\n \t\t}\n \t\treferencedEntity, field := parseField(matches[fieldMatchIndex], primaryEntity)\n \n+\t\tjoinEntities, ok := allowedJoinEntities[primaryEntity]\n+\t\tif !ok {\n+\t\t\treturn nil, fmt.Errorf(\"unsupported entity '%s'\", primaryEntity)\n+\t\t}\n+\n+\t\tif !joinEntities.Has(referencedEntity) {\n+\t\t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument, \"'%s' entity is not allowed in filters\", referencedEntity)\n+\t\t}\n+\n+\t\tif !entityColumns[referencedEntity].Has(field) {\n+\t\t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument, \"'%s.%s' is invalid filter\", referencedEntity, field)\n+\t\t}\n+\n \t\t// Parse and transform values\n \t\tparsedValues := parseRepeatedValues(matches[valueMatchIndex])\n \t\tpreparedValues, err := prepareValues(field, parsedValues)"
        },
        {
          "filename": "pkg/manager/impl/util/filters_test.go",
          "status": "modified",
          "additions": 51,
          "deletions": 19,
          "patch": "@@ -6,11 +6,12 @@ import (\n \t\"time\"\n \n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/shared\"\n \t\"github.com/flyteorg/flyteadmin/pkg/manager/impl/testutils\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n func TestParseRepeatedValues(t *testing.T) {\n@@ -64,30 +65,59 @@ func TestPrepareValues_RepeatedValues(t *testing.T) {\n \tassert.Equal(t, []interface{}{\"value a\", \"value b\"}, values)\n }\n \n-func TestParseFilters(t *testing.T) {\n-\tfilterExpression := \"eq(foo, 123)+ne(version, TheWorst)+value_in(bar, 4;5;6)\"\n+func Test_ParseFilters_Success(t *testing.T) {\n+\tfilterExpression := \"eq(project, flytesnacks)+ne(domain, development)+value_in(type, 4;5;6)\"\n+\n \ttaskFilters, err := ParseFilters(filterExpression, common.Task)\n+\n \tassert.NoError(t, err)\n+\trequire.Len(t, taskFilters, 3)\n \n-\tassert.Len(t, taskFilters, 3)\n \tactualFilterExpression, _ := taskFilters[0].GetGormQueryExpr()\n-\tassert.Equal(t, \"foo = ?\", actualFilterExpression.Query)\n-\tassert.Equal(t, \"123\", actualFilterExpression.Args)\n+\tassert.Equal(t, \"project = ?\", actualFilterExpression.Query)\n+\tassert.Equal(t, \"flytesnacks\", actualFilterExpression.Args)\n \n \tactualFilterExpression, _ = taskFilters[1].GetGormQueryExpr()\n-\tassert.Equal(t, \"version <> ?\", actualFilterExpression.Query)\n-\tassert.Equal(t, \"TheWorst\", actualFilterExpression.Args)\n+\tassert.Equal(t, \"domain <> ?\", actualFilterExpression.Query)\n+\tassert.Equal(t, \"development\", actualFilterExpression.Args)\n \n \tactualFilterExpression, _ = taskFilters[2].GetGormQueryExpr()\n-\tassert.Equal(t, \"bar in (?)\", actualFilterExpression.Query)\n+\tassert.Equal(t, \"type in (?)\", actualFilterExpression.Query)\n \tassert.Equal(t, []interface{}{\"4\", \"5\", \"6\"}, actualFilterExpression.Args)\n+}\n+\n+func Test_ParseFilters_InvalidFunction(t *testing.T) {\n+\tfilterExpression := \"invalid_function(type,bar)\"\n+\n+\t_, err := ParseFilters(filterExpression, common.Task)\n \n-\tfilterExpression = \"invalid_function(foo,bar)\"\n-\t_, err = ParseFilters(filterExpression, common.Task)\n-\tassert.Error(t, err)\n \tassert.EqualError(t, err, \"unrecognized filter function: invalid_function\")\n }\n \n+func Test_ParseFilters_UnsupportedEntity(t *testing.T) {\n+\tfilterExpression := \"eq(foo, 123)\"\n+\n+\t_, err := ParseFilters(filterExpression, \"wrong\")\n+\n+\tassert.EqualError(t, err, \"unsupported entity 'wrong'\")\n+}\n+\n+func Test_ParseFilters_InvalidJoinEntity(t *testing.T) {\n+\tfilterExpression := \"eq(project.name, 123)\"\n+\n+\t_, err := ParseFilters(filterExpression, common.Workflow)\n+\n+\tassert.EqualError(t, err, \"'p' entity is not allowed in filters\")\n+}\n+\n+func Test_ParseFilters_InvalidFilter(t *testing.T) {\n+\tfilterExpression := \"eq(foo, 123)\"\n+\n+\t_, err := ParseFilters(filterExpression, common.Task)\n+\n+\tassert.EqualError(t, err, \"'t.foo' is invalid filter\")\n+}\n+\n func TestGetEqualityFilter(t *testing.T) {\n \tfilter, err := GetSingleValueEqualityFilter(common.Task, \"field\", \"value\")\n \tassert.NoError(t, err)\n@@ -97,18 +127,20 @@ func TestGetEqualityFilter(t *testing.T) {\n \tassert.Equal(t, \"value\", actualFilterExpression.Args)\n }\n \n-func TestAddRequestFilters(t *testing.T) {\n+func Test_AddRequestFilters(t *testing.T) {\n \tfilters, err := AddRequestFilters(\n-\t\t\"ne(version, TheWorst)+eq(workflow.name, workflow)\", common.Execution, make([]common.InlineFilter, 0))\n-\tassert.Nil(t, err)\n-\tassert.Len(t, filters, 2)\n+\t\t\"ne(cluster, TheWorst)+eq(workflow.name, workflow)\", common.Execution, make([]common.InlineFilter, 0))\n+\n+\tassert.NoError(t, err)\n+\trequire.Len(t, filters, 2)\n+\n \texpression, err := filters[0].GetGormQueryExpr()\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"version <> ?\", expression.Query)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, \"cluster <> ?\", expression.Query)\n \tassert.Equal(t, \"TheWorst\", expression.Args)\n \n \texpression, err = filters[1].GetGormQueryExpr()\n-\tassert.Nil(t, err)\n+\tassert.NoError(t, err)\n \tassert.Equal(t, testutils.NameQueryPattern, expression.Query)\n \tassert.Equal(t, \"workflow\", expression.Args)\n }"
        },
        {
          "filename": "pkg/manager/impl/workflow_manager.go",
          "status": "modified",
          "additions": 19,
          "deletions": 21,
          "patch": "@@ -6,7 +6,16 @@ import (\n \t\"strconv\"\n \t\"time\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n+\tcompiler \"github.com/flyteorg/flytepropeller/pkg/compiler/common\"\n \t\"github.com/flyteorg/flytestdlib/contextutils\"\n+\t\"github.com/flyteorg/flytestdlib/logger\"\n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/flyteorg/flytestdlib/storage\"\n+\t\"github.com/golang/protobuf/ptypes\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"google.golang.org/grpc/codes\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/errors\"\n@@ -19,15 +28,6 @@ import (\n \truntimeInterfaces \"github.com/flyteorg/flyteadmin/pkg/runtime/interfaces\"\n \tworkflowengine \"github.com/flyteorg/flyteadmin/pkg/workflowengine/impl\"\n \tworkflowengineInterfaces \"github.com/flyteorg/flyteadmin/pkg/workflowengine/interfaces\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\tcompiler \"github.com/flyteorg/flytepropeller/pkg/compiler/common\"\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"github.com/flyteorg/flytestdlib/storage\"\n-\t\"github.com/golang/protobuf/ptypes\"\n-\t\"github.com/prometheus/client_golang/prometheus\"\n-\t\"google.golang.org/grpc/codes\"\n )\n \n var defaultStorageOptions = storage.Options{}\n@@ -252,13 +252,12 @@ func (w *WorkflowManager) ListWorkflows(\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.WorkflowColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,\n@@ -306,13 +305,12 @@ func (w *WorkflowManager) ListWorkflowIdentifiers(ctx context.Context, request a\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tvar sortParameter common.SortParameter\n-\tif request.SortBy != nil {\n-\t\tsortParameter, err = common.NewSortParameter(*request.SortBy)\n-\t\tif err != nil {\n-\t\t\treturn nil, err\n-\t\t}\n+\n+\tsortParameter, err := common.NewSortParameter(request.SortBy, models.WorkflowColumns)\n+\tif err != nil {\n+\t\treturn nil, err\n \t}\n+\n \toffset, err := validation.ValidateToken(request.Token)\n \tif err != nil {\n \t\treturn nil, errors.NewFlyteAdminErrorf(codes.InvalidArgument,"
        },
        {
          "filename": "pkg/repositories/gormimpl/common.go",
          "status": "modified",
          "additions": 14,
          "deletions": 3,
          "patch": "@@ -2,14 +2,17 @@ package gormimpl\n \n import (\n \t\"fmt\"\n+\t\"sync\"\n+\n+\t\"google.golang.org/grpc/codes\"\n+\t\"gorm.io/gorm\"\n+\t\"gorm.io/gorm/schema\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \tadminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n-\n-\t\"google.golang.org/grpc/codes\"\n-\t\"gorm.io/gorm\"\n )\n \n const Project = \"project\"\n@@ -115,3 +118,11 @@ func applyScopedFilters(tx *gorm.DB, inlineFilters []common.InlineFilter, mapFil\n \t}\n \treturn tx, nil\n }\n+\n+func modelColumns(v any) sets.String {\n+\ts, err := schema.Parse(v, &sync.Map{}, schema.NamingStrategy{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn sets.NewString(s.DBNames...)\n+}"
        },
        {
          "filename": "pkg/repositories/gormimpl/description_entity_repo.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -3,14 +3,14 @@ package gormimpl\n import (\n \t\"context\"\n \n-\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"gorm.io/gorm\"\n \n+\t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \tflyteAdminDbErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"gorm.io/gorm\"\n )\n \n // DescriptionEntityRepo Implementation of DescriptionEntityRepoInterface."
        },
        {
          "filename": "pkg/repositories/gormimpl/execution_repo.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -5,12 +5,13 @@ import (\n \t\"errors\"\n \t\"fmt\"\n \n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n+\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \tadminErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n \n \t\"gorm.io/gorm\"\n )"
        },
        {
          "filename": "pkg/repositories/gormimpl/execution_repo_test.go",
          "status": "modified",
          "additions": 19,
          "deletions": 14,
          "patch": "@@ -6,18 +6,17 @@ import (\n \t\"testing\"\n \t\"time\"\n \n+\tmocket \"github.com/Selvatico/go-mocket\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\n \tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n \n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\n-\tmocket \"github.com/Selvatico/go-mocket\"\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n var createdAt = time.Date(2018, time.February, 17, 00, 00, 00, 00, time.UTC).UTC()\n@@ -250,14 +249,16 @@ func TestListExecutions_Order(t *testing.T) {\n \texecutions := make([]map[string]interface{}, 0)\n \tGlobalMock := mocket.Catcher.Reset()\n \t// Only match on queries that include ordering by name\n-\tmockQuery := GlobalMock.NewMock().WithQuery(`name asc`)\n+\tmockQuery := GlobalMock.NewMock().WithQuery(`execution_name asc`)\n \tmockQuery.WithReply(executions)\n \n-\tsortParameter, _ := common.NewSortParameter(admin.Sort{\n+\tsortParameter, err := common.NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_ASCENDING,\n-\t\tKey:       \"name\",\n-\t})\n-\t_, err := executionRepo.List(context.Background(), interfaces.ListResourceInput{\n+\t\tKey:       \"execution_name\",\n+\t}, models.ExecutionColumns)\n+\trequire.NoError(t, err)\n+\n+\t_, err = executionRepo.List(context.Background(), interfaces.ListResourceInput{\n \t\tSortParameter: sortParameter,\n \t\tInlineFilters: []common.InlineFilter{\n \t\t\tgetEqualityFilter(common.Task, \"project\", project),\n@@ -266,6 +267,7 @@ func TestListExecutions_Order(t *testing.T) {\n \t\t},\n \t\tLimit: 20,\n \t})\n+\n \tassert.NoError(t, err)\n \tassert.True(t, mockQuery.Triggered)\n }\n@@ -276,16 +278,19 @@ func TestListExecutions_WithTags(t *testing.T) {\n \texecutions := make([]map[string]interface{}, 0)\n \tGlobalMock := mocket.Catcher.Reset()\n \t// Only match on queries that include ordering by name\n-\tmockQuery := GlobalMock.NewMock().WithQuery(`name asc`)\n+\tmockQuery := GlobalMock.NewMock().WithQuery(`execution_name asc`)\n \tmockQuery.WithReply(executions)\n \n-\tsortParameter, _ := common.NewSortParameter(admin.Sort{\n+\tsortParameter, err := common.NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_ASCENDING,\n-\t\tKey:       \"name\",\n-\t})\n+\t\tKey:       \"execution_name\",\n+\t}, models.ExecutionColumns)\n+\trequire.NoError(t, err)\n+\n \tvals := []string{\"tag1\", \"tag2\"}\n \ttagFilter, err := common.NewRepeatedValueFilter(common.ExecutionAdminTag, common.ValueIn, \"admin_tag_name\", vals)\n \tassert.NoError(t, err)\n+\n \t_, err = executionRepo.List(context.Background(), interfaces.ListResourceInput{\n \t\tSortParameter: sortParameter,\n \t\tInlineFilters: []common.InlineFilter{"
        },
        {
          "filename": "pkg/repositories/gormimpl/launch_plan_repo.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -8,11 +8,12 @@ import (\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n \n+\t\"github.com/flyteorg/flytestdlib/logger\"\n+\t\"gorm.io/gorm\"\n+\n \tadminErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flytestdlib/logger\"\n-\t\"gorm.io/gorm\"\n )\n \n const launchPlanTableName = \"launch_plans\""
        },
        {
          "filename": "pkg/repositories/gormimpl/launch_plan_repo_test.go",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -5,15 +5,15 @@ import (\n \t\"database/sql/driver\"\n \t\"testing\"\n \n+\tmocket \"github.com/Selvatico/go-mocket\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n \n-\tmocket \"github.com/Selvatico/go-mocket\"\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n const workflowID = uint(1)\n@@ -345,10 +345,10 @@ func TestListLaunchPlans_Order(t *testing.T) {\n \tmockQuery.WithQuery(`project desc`)\n \tmockQuery.WithReply(launchPlans)\n \n-\tsortParameter, _ := common.NewSortParameter(admin.Sort{\n+\tsortParameter, _ := common.NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_DESCENDING,\n \t\tKey:       \"project\",\n-\t})\n+\t}, models.LaunchPlanColumns)\n \t_, err := launchPlanRepo.List(context.Background(), interfaces.ListResourceInput{\n \t\tSortParameter: sortParameter,\n \t\tInlineFilters: []common.InlineFilter{"
        },
        {
          "filename": "pkg/repositories/gormimpl/named_entity_repo.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -5,15 +5,15 @@ import (\n \t\"fmt\"\n \n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n \t\"google.golang.org/grpc/codes\"\n+\t\"gorm.io/gorm\"\n \n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \tadminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"gorm.io/gorm\"\n )\n \n const innerJoinTableAlias = \"entities\""
        },
        {
          "filename": "pkg/repositories/gormimpl/named_entity_repo_test.go",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -9,11 +9,12 @@ import (\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \n \tmocket \"github.com/Selvatico/go-mocket\"\n+\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n+\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n func getMockNamedEntityResponseFromDb(expected models.NamedEntity) map[string]interface{} {\n@@ -157,10 +158,10 @@ func TestListNamedEntity(t *testing.T) {\n \tmockQuery.WithQuery(\n \t\t`SELECT entities.project,entities.domain,entities.name,'2' AS resource_type,named_entity_metadata.description,named_entity_metadata.state FROM \"named_entity_metadata\" RIGHT JOIN (SELECT project,domain,name FROM \"workflows\" WHERE \"domain\" = $1 AND \"project\" = $2 GROUP BY project, domain, name ORDER BY name desc LIMIT 20) AS entities ON named_entity_metadata.resource_type = 2 AND named_entity_metadata.project = entities.project AND named_entity_metadata.domain = entities.domain AND named_entity_metadata.name = entities.name GROUP BY entities.project, entities.domain, entities.name, named_entity_metadata.description, named_entity_metadata.state ORDER BY name desc`).WithReply(results)\n \n-\tsortParameter, _ := common.NewSortParameter(admin.Sort{\n+\tsortParameter, _ := common.NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_DESCENDING,\n \t\tKey:       \"name\",\n-\t})\n+\t}, models.NamedEntityColumns)\n \toutput, err := metadataRepo.List(context.Background(), interfaces.ListNamedEntityInput{\n \t\tResourceType: resourceType,\n \t\tProject:      \"admintests\","
        },
        {
          "filename": "pkg/repositories/gormimpl/node_execution_event_repo.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -3,11 +3,12 @@ package gormimpl\n import (\n \t\"context\"\n \n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"gorm.io/gorm\"\n+\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"gorm.io/gorm\"\n )\n \n type NodeExecutionEventRepo struct {"
        },
        {
          "filename": "pkg/repositories/gormimpl/node_execution_repo.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -6,13 +6,12 @@ import (\n \t\"fmt\"\n \n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"gorm.io/gorm\"\n \n \tadminErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"gorm.io/gorm\"\n )\n \n // Implementation of NodeExecutionInterface."
        },
        {
          "filename": "pkg/repositories/gormimpl/node_execution_repo_test.go",
          "status": "modified",
          "additions": 15,
          "deletions": 13,
          "patch": "@@ -5,21 +5,20 @@ import (\n \t\"testing\"\n \t\"time\"\n \n-\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n-\t\"google.golang.org/grpc/codes\"\n-\t\"gorm.io/gorm\"\n-\n-\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n-\n+\tmocket \"github.com/Selvatico/go-mocket\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n+\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/grpc/codes\"\n+\t\"gorm.io/gorm\"\n \n-\tmocket \"github.com/Selvatico/go-mocket\"\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n+\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n var nodePhase = core.NodeExecution_RUNNING.String()\n@@ -248,20 +247,23 @@ func TestListNodeExecutions_Order(t *testing.T) {\n \tGlobalMock := mocket.Catcher.Reset()\n \t// Only match on queries that include ordering by project\n \tmockQuery := GlobalMock.NewMock()\n-\tmockQuery.WithQuery(`project desc`)\n+\tmockQuery.WithQuery(`execution_project desc`)\n \tmockQuery.WithReply(nodeExecutions)\n \n-\tsortParameter, _ := common.NewSortParameter(admin.Sort{\n+\tsortParameter, err := common.NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_DESCENDING,\n-\t\tKey:       \"project\",\n-\t})\n-\t_, err := nodeExecutionRepo.List(context.Background(), interfaces.ListResourceInput{\n+\t\tKey:       \"execution_project\",\n+\t}, models.NodeExecutionColumns)\n+\trequire.NoError(t, err)\n+\n+\t_, err = nodeExecutionRepo.List(context.Background(), interfaces.ListResourceInput{\n \t\tSortParameter: sortParameter,\n \t\tInlineFilters: []common.InlineFilter{\n \t\t\tgetEqualityFilter(common.NodeExecution, \"phase\", nodePhase),\n \t\t},\n \t\tLimit: 20,\n \t})\n+\n \tassert.NoError(t, err)\n \tassert.True(t, mockQuery.Triggered)\n }"
        },
        {
          "filename": "pkg/repositories/gormimpl/project_repo.go",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -4,14 +4,12 @@ import (\n \t\"context\"\n \t\"errors\"\n \n-\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n-\t\"google.golang.org/grpc/codes\"\n-\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n-\n+\t\"google.golang.org/grpc/codes\"\n \t\"gorm.io/gorm\"\n \n+\tflyteAdminErrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n \tflyteAdminDbErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\""
        },
        {
          "filename": "pkg/repositories/gormimpl/project_repo_test.go",
          "status": "modified",
          "additions": 8,
          "deletions": 6,
          "patch": "@@ -5,19 +5,20 @@ import (\n \t\"testing\"\n \n \tmocket \"github.com/Selvatico/go-mocket\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n+\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n-var alphabeticalSortParam, _ = common.NewSortParameter(admin.Sort{\n+var alphabeticalSortParam, _ = common.NewSortParameter(&admin.Sort{\n \tDirection: admin.Sort_ASCENDING,\n \tKey:       \"identifier\",\n-})\n+}, models.ProjectColumns)\n \n func TestCreateProject(t *testing.T) {\n \tprojectRepo := NewProjectRepo(GetDbForTest(t), errors.NewTestErrorTransformer(), mockScope.NewTestScope())\n@@ -94,7 +95,8 @@ func testListProjects(input interfaces.ListResourceInput, sql string, t *testing\n \n func TestListProjects(t *testing.T) {\n \tfilter, err := common.NewSingleValueFilter(common.Project, common.Equal, \"name\", \"foo\")\n-\tassert.Nil(t, err)\n+\n+\tassert.NoError(t, err)\n \ttestListProjects(interfaces.ListResourceInput{\n \t\tOffset:        0,\n \t\tLimit:         1,"
        },
        {
          "filename": "pkg/repositories/gormimpl/resource_repo_test.go",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -4,15 +4,14 @@ import (\n \t\"context\"\n \t\"testing\"\n \n+\tmocket \"github.com/Selvatico/go-mocket\"\n+\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n \t\"gorm.io/gorm\"\n \n-\t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n-\n-\tmocket \"github.com/Selvatico/go-mocket\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n const resourceTestWorkflowName = \"workflow\""
        },
        {
          "filename": "pkg/repositories/gormimpl/signal_repo.go",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -4,16 +4,14 @@ import (\n \t\"context\"\n \t\"errors\"\n \n+\t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"google.golang.org/grpc/codes\"\n+\t\"gorm.io/gorm\"\n+\n \tadminerrors \"github.com/flyteorg/flyteadmin/pkg/errors\"\n \tflyteAdminDbErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\n-\t\"github.com/flyteorg/flytestdlib/promutils\"\n-\n-\t\"google.golang.org/grpc/codes\"\n-\n-\t\"gorm.io/gorm\"\n )\n \n // SignalRepo is an implementation of SignalRepoInterface."
        },
        {
          "filename": "pkg/repositories/gormimpl/task_execution_repo.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -5,13 +5,12 @@ import (\n \t\"errors\"\n \n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"gorm.io/gorm\"\n \n \tflyteAdminDbErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"gorm.io/gorm\"\n )\n \n // Implementation of TaskExecutionInterface."
        },
        {
          "filename": "pkg/repositories/gormimpl/task_execution_repo_test.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -5,15 +5,15 @@ import (\n \t\"testing\"\n \t\"time\"\n \n+\tmocket \"github.com/Selvatico/go-mocket\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n \n-\tmocket \"github.com/Selvatico/go-mocket\"\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n var taskPhase = core.TaskExecution_ABORTED.String()"
        },
        {
          "filename": "pkg/repositories/gormimpl/task_repo.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -5,13 +5,12 @@ import (\n \t\"errors\"\n \n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n-\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"gorm.io/gorm\"\n \n \tflyteAdminDbErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"gorm.io/gorm\"\n )\n \n // Implementation of TaskRepoInterface."
        },
        {
          "filename": "pkg/repositories/gormimpl/task_repo_test.go",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -9,11 +9,12 @@ import (\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n \n \tmocket \"github.com/Selvatico/go-mocket\"\n+\t\"github.com/stretchr/testify/assert\"\n+\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n const pythonTestTaskType = \"python-task\"\n@@ -197,10 +198,10 @@ func TestListTasks_Order(t *testing.T) {\n \tmockQuery.WithQuery(`project desc`)\n \tmockQuery.WithReply(tasks)\n \n-\tsortParameter, _ := common.NewSortParameter(admin.Sort{\n+\tsortParameter, _ := common.NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_DESCENDING,\n \t\tKey:       \"project\",\n-\t})\n+\t}, models.TaskColumns)\n \t_, err := taskRepo.List(context.Background(), interfaces.ListResourceInput{\n \t\tSortParameter: sortParameter,\n \t\tInlineFilters: []common.InlineFilter{"
        },
        {
          "filename": "pkg/repositories/gormimpl/workflow_repo.go",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -4,12 +4,13 @@ import (\n \t\"context\"\n \t\"errors\"\n \n-\tflyteAdminDbErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n-\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n \t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core\"\n \t\"github.com/flyteorg/flytestdlib/promutils\"\n \t\"gorm.io/gorm\"\n+\n+\tflyteAdminDbErrors \"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n+\t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n )\n \n // Implementation of WorkflowRepoInterface."
        },
        {
          "filename": "pkg/repositories/gormimpl/workflow_repo_test.go",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -5,13 +5,14 @@ import (\n \t\"testing\"\n \n \tmocket \"github.com/Selvatico/go-mocket\"\n+\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n+\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n+\t\"github.com/stretchr/testify/assert\"\n+\n \t\"github.com/flyteorg/flyteadmin/pkg/common\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/errors\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/interfaces\"\n \t\"github.com/flyteorg/flyteadmin/pkg/repositories/models\"\n-\t\"github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin\"\n-\tmockScope \"github.com/flyteorg/flytestdlib/promutils\"\n-\t\"github.com/stretchr/testify/assert\"\n )\n \n var typedInterface = []byte{1, 2, 3}\n@@ -182,10 +183,10 @@ func TestListWorkflows_Order(t *testing.T) {\n \tmockQuery.WithQuery(`project desc`)\n \tmockQuery.WithReply(workflows)\n \n-\tsortParameter, _ := common.NewSortParameter(admin.Sort{\n+\tsortParameter, _ := common.NewSortParameter(&admin.Sort{\n \t\tDirection: admin.Sort_DESCENDING,\n \t\tKey:       \"project\",\n-\t})\n+\t}, models.WorkflowColumns)\n \t_, err := workflowRepo.List(context.Background(), interfaces.ListResourceInput{\n \t\tSortParameter: sortParameter,\n \t\tInlineFilters: []common.InlineFilter{"
        },
        {
          "filename": "pkg/repositories/models/base_model.go",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -1,6 +1,12 @@\n package models\n \n-import \"time\"\n+import (\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"gorm.io/gorm/schema\"\n+\t\"k8s.io/apimachinery/pkg/util/sets\"\n+)\n \n // This is the base model definition every flyteadmin model embeds.\n // This is nearly identical to http://doc.gorm.io/models.html#conventions except that flyteadmin models define their\n@@ -11,3 +17,11 @@ type BaseModel struct {\n \tUpdatedAt time.Time\n \tDeletedAt *time.Time `gorm:\"index\"`\n }\n+\n+func modelColumns(v any) sets.String {\n+\ts, err := schema.Parse(v, &sync.Map{}, schema.NamingStrategy{})\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn sets.NewString(s.DBNames...)\n+}"
        },
        {
          "filename": "pkg/repositories/models/description_entity.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -28,3 +28,5 @@ type DescriptionEntity struct {\n \n \tSourceCode\n }\n+\n+var DescriptionEntityColumns = modelColumns(DescriptionEntity{})"
        },
        {
          "filename": "pkg/repositories/models/execution.go",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -80,3 +80,8 @@ func (b *AdminTag) BeforeCreate(tx *gorm.DB) (err error) {\n \t})\n \treturn nil\n }\n+\n+var (\n+\tExecutionColumns = modelColumns(Execution{})\n+\tAdminTagColumns  = modelColumns(AdminTag{})\n+)"
        },
        {
          "filename": "pkg/repositories/models/launch_plan.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -32,3 +32,5 @@ type LaunchPlan struct {\n \tDigest       []byte\n \tScheduleType LaunchPlanScheduleType\n }\n+\n+var LaunchPlanColumns = modelColumns(LaunchPlan{})"
        },
        {
          "filename": "pkg/repositories/models/named_entity.go",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -40,3 +40,8 @@ type NamedEntity struct {\n \tNamedEntityKey\n \tNamedEntityMetadataFields\n }\n+\n+var (\n+\tNamedEntityColumns         = modelColumns(NamedEntity{})\n+\tNamedEntityMetadataColumns = modelColumns(NamedEntityMetadata{})\n+)"
        },
        {
          "filename": "pkg/repositories/models/node_execution.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -51,3 +51,5 @@ type NodeExecution struct {\n \t// Metadata that is only relevant to the flyteadmin service that is used to parse the model and track additional attributes.\n \tInternalData []byte\n }\n+\n+var NodeExecutionColumns = modelColumns(NodeExecution{})"
        },
        {
          "filename": "pkg/repositories/models/node_execution_event.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -11,3 +11,5 @@ type NodeExecutionEvent struct {\n \tOccurredAt time.Time\n \tPhase      string `gorm:\"primary_key\"`\n }\n+\n+var NodeExecutionEventColumns = modelColumns(NodeExecutionEvent{})"
        },
        {
          "filename": "pkg/repositories/models/project.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -9,3 +9,5 @@ type Project struct {\n \t// GORM doesn't save the zero value for ints, so we use a pointer for the State field\n \tState *int32 `gorm:\"default:0;index\"`\n }\n+\n+var ProjectColumns = modelColumns(Project{})"
        },
        {
          "filename": "pkg/repositories/models/signal.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -13,3 +13,5 @@ type Signal struct {\n \tType  []byte `gorm:\"not null\"`\n \tValue []byte\n }\n+\n+var SignalColumns = modelColumns(Signal{})"
        },
        {
          "filename": "pkg/repositories/models/task.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -23,3 +23,5 @@ type Task struct {\n \t// ShortDescription for the task.\n \tShortDescription string\n }\n+\n+var TaskColumns = modelColumns(Task{})"
        },
        {
          "filename": "pkg/repositories/models/task_execution.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -37,3 +37,5 @@ type TaskExecution struct {\n \t// The child node executions (if any) launched by this task execution.\n \tChildNodeExecution []NodeExecution `gorm:\"foreignkey:ParentTaskExecutionID;references:ID\"`\n }\n+\n+var TaskExecutionColumns = modelColumns(TaskExecution{})"
        },
        {
          "filename": "pkg/repositories/models/workflow.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -19,3 +19,5 @@ type Workflow struct {\n \t// ShortDescription for the workflow.\n \tShortDescription string\n }\n+\n+var WorkflowColumns = modelColumns(Workflow{})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 13,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f80e2911512fcc67e7afd2384561c9f7be9d85d0",
            "date": "2023-10-09T18:29:37Z",
            "author_login": "eapolinario"
          },
          {
            "sha": "fbdb162794683e900b7785ca11a4470bfbecf458",
            "date": "2023-09-27T23:10:04Z",
            "author_login": "andrewwdye"
          },
          {
            "sha": "af81751b0718a5eb55a7fa9a13c6ff7e8efbd4e7",
            "date": "2023-09-26T00:24:26Z",
            "author_login": "squiishyy"
          },
          {
            "sha": "dc8cc9d32b30e82c7d147a1ac88377a41165b195",
            "date": "2023-09-18T18:27:19Z",
            "author_login": "flyte-bot"
          },
          {
            "sha": "7df815dfd606c349ac623efd0800b246ced8af5b",
            "date": "2023-09-13T16:47:35Z",
            "author_login": "wild-endeavor"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-89",
    "description": "FlyteAdmin is the control plane for Flyte responsible for managing entities and administering workflow executions. Prior to version 1.1.124, list endpoints on FlyteAdmin have a SQL vulnerability where a malicious user can send a REST request with custom SQL statements as list filters. The attacker needs to have access to the FlyteAdmin installation, typically either behind a VPN or authentication. Version 1.1.124 contains a patch for this issue.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-30T19:15:07.883",
    "last_modified": "2024-11-21T08:21:51.893",
    "fix_date": "2023-08-31T21:21:05Z"
  },
  "references": [
    {
      "url": "https://github.com/flyteorg/flyteadmin/commit/b3177ef70f068e908140b8a4a9913dfa74f289fd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-r847-6w6h-r8g4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://owasp.org/www-community/attacks/SQL_Injection#",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteadmin/commit/b3177ef70f068e908140b8a4a9913dfa74f289fd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-r847-6w6h-r8g4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://owasp.org/www-community/attacks/SQL_Injection#",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.965007",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "flyteadmin",
    "owner": "flyteorg",
    "created_at": "2019-09-24T18:14:22Z",
    "updated_at": "2024-07-16T07:35:11Z",
    "pushed_at": "2023-10-09T18:29:38Z",
    "size": 21170,
    "stars": 39,
    "forks": 63,
    "open_issues": 23,
    "watchers": 39,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "artifacts"
    ],
    "languages": {
      "Go": 2714814,
      "Shell": 14186,
      "Python": 11290,
      "Makefile": 5588,
      "Dockerfile": 3331
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T19:35:52.769653"
  }
}