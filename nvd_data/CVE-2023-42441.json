{
  "cve_id": "CVE-2023-42441",
  "github_data": {
    "repository": "vyperlang/vyper",
    "fix_commit": "0b740280c1e3c5528a20d47b29831948ddcc6d83",
    "related_commits": [
      "0b740280c1e3c5528a20d47b29831948ddcc6d83",
      "0b740280c1e3c5528a20d47b29831948ddcc6d83"
    ],
    "patch_url": "https://github.com/vyperlang/vyper/commit/0b740280c1e3c5528a20d47b29831948ddcc6d83.patch",
    "fix_commit_details": {
      "sha": "0b740280c1e3c5528a20d47b29831948ddcc6d83",
      "commit_date": "2023-09-15T22:01:03Z",
      "author": {
        "login": "charles-cooper",
        "type": "User",
        "stats": {
          "total_commits": 1087,
          "average_weekly_commits": 2.539719626168224,
          "total_additions": 171904,
          "total_deletions": 132151,
          "weeks_active": 180
        }
      },
      "commit_message": {
        "title": "fix: only allow valid identifiers to be nonreentrant keys (#3605)",
        "length": 363,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 273,
        "additions": 147,
        "deletions": 126
      },
      "files": [
        {
          "filename": "tests/parser/exceptions/test_structure_exception.py",
          "status": "modified",
          "additions": 20,
          "deletions": 3,
          "patch": "@@ -56,9 +56,26 @@ def double_nonreentrant():\n     \"\"\",\n     \"\"\"\n @external\n-@nonreentrant(\"B\")\n-@nonreentrant(\"C\")\n-def double_nonreentrant():\n+@nonreentrant(\" \")\n+def invalid_nonreentrant_key():\n+    pass\n+    \"\"\",\n+    \"\"\"\n+@external\n+@nonreentrant(\"\")\n+def invalid_nonreentrant_key():\n+    pass\n+    \"\"\",\n+    \"\"\"\n+@external\n+@nonreentrant(\"123\")\n+def invalid_nonreentrant_key():\n+    pass\n+    \"\"\",\n+    \"\"\"\n+@external\n+@nonreentrant(\"!123abcd\")\n+def invalid_nonreentrant_key():\n     pass\n     \"\"\",\n     \"\"\""
        },
        {
          "filename": "tests/parser/features/decorators/test_nonreentrant.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -142,7 +142,7 @@ def set_callback(c: address):\n \n @external\n @payable\n-@nonreentrant('default')\n+@nonreentrant(\"lock\")\n def protected_function(val: String[100], do_callback: bool) -> uint256:\n     self.special_value = val\n     _amount: uint256 = msg.value\n@@ -166,7 +166,7 @@ def unprotected_function(val: String[100], do_callback: bool):\n \n @external\n @payable\n-@nonreentrant('default')\n+@nonreentrant(\"lock\")\n def __default__():\n     pass\n     \"\"\""
        },
        {
          "filename": "tests/parser/test_call_graph_stability.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -6,8 +6,8 @@\n from hypothesis import given, settings\n \n import vyper.ast as vy_ast\n+from vyper.ast.identifiers import RESERVED_KEYWORDS\n from vyper.compiler.phases import CompilerData\n-from vyper.semantics.namespace import RESERVED_KEYWORDS\n \n \n def _valid_identifier(attr):"
        },
        {
          "filename": "tests/parser/types/test_identifier_naming.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,10 +1,10 @@\n import pytest\n \n from vyper.ast.folding import BUILTIN_CONSTANTS\n+from vyper.ast.identifiers import RESERVED_KEYWORDS\n from vyper.builtins.functions import BUILTIN_FUNCTIONS\n from vyper.codegen.expr import ENVIRONMENT_VARIABLES\n from vyper.exceptions import NamespaceCollision, StructureException, SyntaxException\n-from vyper.semantics.namespace import RESERVED_KEYWORDS\n from vyper.semantics.types.primitives import AddressT\n \n BUILTIN_CONSTANTS = set(BUILTIN_CONSTANTS.keys())"
        },
        {
          "filename": "vyper/ast/identifiers.py",
          "status": "added",
          "additions": 111,
          "deletions": 0,
          "patch": "@@ -0,0 +1,111 @@\n+import re\n+\n+from vyper.exceptions import StructureException\n+\n+\n+def validate_identifier(attr, ast_node=None):\n+    if not re.match(\"^[_a-zA-Z][a-zA-Z0-9_]*$\", attr):\n+        raise StructureException(f\"'{attr}' contains invalid character(s)\", ast_node)\n+    if attr.lower() in RESERVED_KEYWORDS:\n+        raise StructureException(f\"'{attr}' is a reserved keyword\", ast_node)\n+\n+\n+# https://docs.python.org/3/reference/lexical_analysis.html#keywords\n+# note we don't technically need to block all python reserved keywords,\n+# but do it for hygiene\n+_PYTHON_RESERVED_KEYWORDS = {\n+    \"False\",\n+    \"None\",\n+    \"True\",\n+    \"and\",\n+    \"as\",\n+    \"assert\",\n+    \"async\",\n+    \"await\",\n+    \"break\",\n+    \"class\",\n+    \"continue\",\n+    \"def\",\n+    \"del\",\n+    \"elif\",\n+    \"else\",\n+    \"except\",\n+    \"finally\",\n+    \"for\",\n+    \"from\",\n+    \"global\",\n+    \"if\",\n+    \"import\",\n+    \"in\",\n+    \"is\",\n+    \"lambda\",\n+    \"nonlocal\",\n+    \"not\",\n+    \"or\",\n+    \"pass\",\n+    \"raise\",\n+    \"return\",\n+    \"try\",\n+    \"while\",\n+    \"with\",\n+    \"yield\",\n+}\n+_PYTHON_RESERVED_KEYWORDS = {s.lower() for s in _PYTHON_RESERVED_KEYWORDS}\n+\n+# Cannot be used for variable or member naming\n+RESERVED_KEYWORDS = _PYTHON_RESERVED_KEYWORDS | {\n+    # decorators\n+    \"public\",\n+    \"external\",\n+    \"nonpayable\",\n+    \"constant\",\n+    \"immutable\",\n+    \"transient\",\n+    \"internal\",\n+    \"payable\",\n+    \"nonreentrant\",\n+    # \"class\" keywords\n+    \"interface\",\n+    \"struct\",\n+    \"event\",\n+    \"enum\",\n+    # EVM operations\n+    \"unreachable\",\n+    # special functions (no name mangling)\n+    \"init\",\n+    \"_init_\",\n+    \"___init___\",\n+    \"____init____\",\n+    \"default\",\n+    \"_default_\",\n+    \"___default___\",\n+    \"____default____\",\n+    # more control flow and special operations\n+    \"range\",\n+    # more special operations\n+    \"indexed\",\n+    # denominations\n+    \"ether\",\n+    \"wei\",\n+    \"finney\",\n+    \"szabo\",\n+    \"shannon\",\n+    \"lovelace\",\n+    \"ada\",\n+    \"babbage\",\n+    \"gwei\",\n+    \"kwei\",\n+    \"mwei\",\n+    \"twei\",\n+    \"pwei\",\n+    # sentinal constant values\n+    # TODO remove when these are removed from the language\n+    \"zero_address\",\n+    \"empty_bytes32\",\n+    \"max_int128\",\n+    \"min_int128\",\n+    \"max_decimal\",\n+    \"min_decimal\",\n+    \"max_uint256\",\n+    \"zero_wei\",\n+}"
        },
        {
          "filename": "vyper/exceptions.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -54,7 +54,9 @@ def __init__(self, message=\"Error Message not found.\", *items):\n             # support older exceptions that don't annotate - remove this in the future!\n             self.lineno, self.col_offset = items[0][:2]\n         else:\n-            self.annotations = items\n+            # strip out None sources so that None can be passed as a valid\n+            # annotation (in case it is only available optionally)\n+            self.annotations = [k for k in items if k is not None]\n \n     def with_annotation(self, *annotations):\n         \"\"\""
        },
        {
          "filename": "vyper/semantics/namespace.py",
          "status": "modified",
          "additions": 3,
          "deletions": 116,
          "patch": "@@ -1,12 +1,7 @@\n import contextlib\n-import re\n-\n-from vyper.exceptions import (\n-    CompilerPanic,\n-    NamespaceCollision,\n-    StructureException,\n-    UndeclaredDefinition,\n-)\n+\n+from vyper.ast.identifiers import validate_identifier\n+from vyper.exceptions import CompilerPanic, NamespaceCollision, UndeclaredDefinition\n from vyper.semantics.analysis.levenshtein_utils import get_levenshtein_error_suggestions\n \n \n@@ -121,111 +116,3 @@ def override_global_namespace(ns):\n     finally:\n         # unclobber\n         _namespace = tmp\n-\n-\n-def validate_identifier(attr):\n-    if not re.match(\"^[_a-zA-Z][a-zA-Z0-9_]*$\", attr):\n-        raise StructureException(f\"'{attr}' contains invalid character(s)\")\n-    if attr.lower() in RESERVED_KEYWORDS:\n-        raise StructureException(f\"'{attr}' is a reserved keyword\")\n-\n-\n-# https://docs.python.org/3/reference/lexical_analysis.html#keywords\n-# note we don't technically need to block all python reserved keywords,\n-# but do it for hygiene\n-_PYTHON_RESERVED_KEYWORDS = {\n-    \"False\",\n-    \"None\",\n-    \"True\",\n-    \"and\",\n-    \"as\",\n-    \"assert\",\n-    \"async\",\n-    \"await\",\n-    \"break\",\n-    \"class\",\n-    \"continue\",\n-    \"def\",\n-    \"del\",\n-    \"elif\",\n-    \"else\",\n-    \"except\",\n-    \"finally\",\n-    \"for\",\n-    \"from\",\n-    \"global\",\n-    \"if\",\n-    \"import\",\n-    \"in\",\n-    \"is\",\n-    \"lambda\",\n-    \"nonlocal\",\n-    \"not\",\n-    \"or\",\n-    \"pass\",\n-    \"raise\",\n-    \"return\",\n-    \"try\",\n-    \"while\",\n-    \"with\",\n-    \"yield\",\n-}\n-_PYTHON_RESERVED_KEYWORDS = {s.lower() for s in _PYTHON_RESERVED_KEYWORDS}\n-\n-# Cannot be used for variable or member naming\n-RESERVED_KEYWORDS = _PYTHON_RESERVED_KEYWORDS | {\n-    # decorators\n-    \"public\",\n-    \"external\",\n-    \"nonpayable\",\n-    \"constant\",\n-    \"immutable\",\n-    \"transient\",\n-    \"internal\",\n-    \"payable\",\n-    \"nonreentrant\",\n-    # \"class\" keywords\n-    \"interface\",\n-    \"struct\",\n-    \"event\",\n-    \"enum\",\n-    # EVM operations\n-    \"unreachable\",\n-    # special functions (no name mangling)\n-    \"init\",\n-    \"_init_\",\n-    \"___init___\",\n-    \"____init____\",\n-    \"default\",\n-    \"_default_\",\n-    \"___default___\",\n-    \"____default____\",\n-    # more control flow and special operations\n-    \"range\",\n-    # more special operations\n-    \"indexed\",\n-    # denominations\n-    \"ether\",\n-    \"wei\",\n-    \"finney\",\n-    \"szabo\",\n-    \"shannon\",\n-    \"lovelace\",\n-    \"ada\",\n-    \"babbage\",\n-    \"gwei\",\n-    \"kwei\",\n-    \"mwei\",\n-    \"twei\",\n-    \"pwei\",\n-    # sentinal constant values\n-    # TODO remove when these are removed from the language\n-    \"zero_address\",\n-    \"empty_bytes32\",\n-    \"max_int128\",\n-    \"min_int128\",\n-    \"max_decimal\",\n-    \"min_decimal\",\n-    \"max_uint256\",\n-    \"zero_wei\",\n-}"
        },
        {
          "filename": "vyper/semantics/types/base.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -3,6 +3,7 @@\n \n from vyper import ast as vy_ast\n from vyper.abi_types import ABIType\n+from vyper.ast.identifiers import validate_identifier\n from vyper.exceptions import (\n     CompilerPanic,\n     InvalidLiteral,\n@@ -12,7 +13,6 @@\n     UnknownAttribute,\n )\n from vyper.semantics.analysis.levenshtein_utils import get_levenshtein_error_suggestions\n-from vyper.semantics.namespace import validate_identifier\n \n \n # Some fake type with an overridden `compare_type` which accepts any RHS"
        },
        {
          "filename": "vyper/semantics/types/function.py",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -5,6 +5,7 @@\n from typing import Any, Dict, List, Optional, Tuple\n \n from vyper import ast as vy_ast\n+from vyper.ast.identifiers import validate_identifier\n from vyper.ast.validation import validate_call_args\n from vyper.exceptions import (\n     ArgumentException,\n@@ -220,7 +221,10 @@ def from_FunctionDef(\n                         msg = \"Nonreentrant decorator disallowed on `__init__`\"\n                         raise FunctionDeclarationException(msg, decorator)\n \n-                    kwargs[\"nonreentrant\"] = decorator.args[0].value\n+                    nonreentrant_key = decorator.args[0].value\n+                    validate_identifier(nonreentrant_key, decorator.args[0])\n+\n+                    kwargs[\"nonreentrant\"] = nonreentrant_key\n \n                 elif isinstance(decorator, vy_ast.Name):\n                     if FunctionVisibility.is_valid_value(decorator.id):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 8,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c208b954564e8fffdd4c86cc3c497e0c3df1aeec",
            "date": "2025-01-14T17:09:31Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "db8dcc713168b16977b5b07267653c9024f6acea",
            "date": "2025-01-12T17:01:49Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "10e91d5a2ba6eaab2f7194fd86cefb7a0ff19964",
            "date": "2025-01-12T16:34:14Z",
            "author_login": "tserg"
          },
          {
            "sha": "43259f8953672ef7a19167c6c048d020d82e05da",
            "date": "2025-01-12T16:32:46Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "9b5523e6131335c81714e7e8af63cc49404f5ce7",
            "date": "2025-01-12T16:19:30Z",
            "author_login": "charles-cooper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-833",
    "description": "Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine (EVM). Starting in version 0.2.9 and prior to version 0.3.10, locks of the type `@nonreentrant(\"\")` or `@nonreentrant('')` do not produce reentrancy checks at runtime. This issue is fixed in version 0.3.10. As a workaround, ensure the lock name is a non-empty string.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-18T21:16:09.750",
    "last_modified": "2024-11-21T08:22:32.097",
    "fix_date": "2023-09-15T22:01:03Z"
  },
  "references": [
    {
      "url": "https://github.com/vyperlang/vyper/commit/0b740280c1e3c5528a20d47b29831948ddcc6d83",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/pull/3605",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-3hg2-r75x-g69m",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/0b740280c1e3c5528a20d47b29831948ddcc6d83",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/pull/3605",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-3hg2-r75x-g69m",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:08.423150",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vyper",
    "owner": "vyperlang",
    "created_at": "2016-11-11T08:56:41Z",
    "updated_at": "2025-01-13T17:32:27Z",
    "pushed_at": "2025-01-12T17:01:50Z",
    "size": 11939,
    "stars": 4948,
    "forks": 817,
    "open_issues": 489,
    "watchers": 4948,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 2662211,
      "Makefile": 2222,
      "Batchfile": 1614,
      "Dockerfile": 1145,
      "Shell": 472
    },
    "commit_activity": {
      "total_commits_last_year": 317,
      "avg_commits_per_week": 6.096153846153846,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:48:09.728520"
  }
}