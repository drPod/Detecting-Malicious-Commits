{
  "cve_id": "CVE-2023-42458",
  "github_data": {
    "repository": "zopefoundation/Zope",
    "fix_commit": "26a55dbc301db417f47cafda6fe0f983b5690088",
    "related_commits": [
      "26a55dbc301db417f47cafda6fe0f983b5690088",
      "603b0a12881c90a072a7a65e32d47ed898ce37cb",
      "26a55dbc301db417f47cafda6fe0f983b5690088",
      "603b0a12881c90a072a7a65e32d47ed898ce37cb"
    ],
    "patch_url": "https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088.patch",
    "fix_commit_details": {
      "sha": "26a55dbc301db417f47cafda6fe0f983b5690088",
      "commit_date": "2023-09-21T08:01:18Z",
      "author": {
        "login": "mauritsvanrees",
        "type": "User",
        "stats": {
          "total_commits": 51,
          "average_weekly_commits": 0.03571428571428571,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 34
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wm8q-9975-xh5v",
        "length": 879,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 165,
        "additions": 165,
        "deletions": 0
      },
      "files": [
        {
          "filename": "CHANGES.rst",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -10,6 +10,16 @@ https://zope.readthedocs.io/en/2.13/CHANGES.html\n 4.8.10 (unreleased)\n -------------------\n \n+- Allow only some image types to be displayed inline. Force download for\n+  others, especially SVG images.  By default we use a list of allowed types.\n+  You can switch a to a list of denied types by setting OS environment variable\n+  ``OFS_IMAGE_USE_DENYLIST=1``.  You can override the allowed list with\n+  environment variable ``ALLOWED_INLINE_MIMETYPES`` and the disallowed list\n+  with ``DISALLOWED_INLINE_MIMETYPES``.  Separate multiple entries by either\n+  comma or space.  This change only affects direct URL access.\n+  ``<img src=\"image.svg\" />`` works the same as before. (CVE-2023-42458)\n+  See `security advisory <https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v>`_.\n+\n - Tighten down the ZMI frame source logic to only allow site-local sources.\n   Problem reported by Miguel Segovia Gil.\n "
        },
        {
          "filename": "src/OFS/Image.py",
          "status": "modified",
          "additions": 99,
          "deletions": 0,
          "patch": "@@ -13,16 +13,19 @@\n \"\"\"Image object\n \"\"\"\n \n+import os\n import struct\n from email.generator import _make_boundary\n from io import BytesIO\n from io import TextIOBase\n+from mimetypes import guess_extension\n from tempfile import TemporaryFile\n from warnings import warn\n \n from six import PY2\n from six import binary_type\n from six import text_type\n+from six.moves.urllib.parse import quote\n \n import ZPublisher.HTTPRequest\n from AccessControl.class_init import InitializeClass\n@@ -61,6 +64,64 @@\n     from cgi import escape\n \n \n+def _get_list_from_env(name, default=None):\n+    \"\"\"Get list from environment variable.\n+\n+    Supports splitting on comma or white space.\n+    Use the default as fallback only when the variable is not set.\n+    So if the env variable is set to an empty string, this will ignore the\n+    default and return an empty list.\n+    \"\"\"\n+    value = os.environ.get(name)\n+    if value is None:\n+        return default or []\n+    value = value.strip()\n+    if \",\" in value:\n+        return value.split(\",\")\n+    return value.split()\n+\n+\n+# We have one list for allowed, and one for disallowed inline mimetypes.\n+# This is for security purposes.\n+# By default we use the allowlist.  We give integrators the option to choose\n+# the denylist via an environment variable.\n+ALLOWED_INLINE_MIMETYPES = _get_list_from_env(\n+    \"ALLOWED_INLINE_MIMETYPES\",\n+    default=[\n+        \"image/gif\",\n+        # The mimetypes registry lists several for jpeg 2000:\n+        \"image/jp2\",\n+        \"image/jpeg\",\n+        \"image/jpeg2000-image\",\n+        \"image/jpeg2000\",\n+        \"image/jpx\",\n+        \"image/png\",\n+        \"image/webp\",\n+        \"image/x-icon\",\n+        \"image/x-jpeg2000-image\",\n+        \"text/plain\",\n+        # By popular request we allow PDF:\n+        \"application/pdf\",\n+    ]\n+)\n+DISALLOWED_INLINE_MIMETYPES = _get_list_from_env(\n+    \"DISALLOWED_INLINE_MIMETYPES\",\n+    default=[\n+        \"application/javascript\",\n+        \"application/x-javascript\",\n+        \"text/javascript\",\n+        \"text/html\",\n+        \"image/svg+xml\",\n+        \"image/svg+xml-compressed\",\n+    ]\n+)\n+try:\n+    USE_DENYLIST = os.environ.get(\"OFS_IMAGE_USE_DENYLIST\")\n+    USE_DENYLIST = bool(int(USE_DENYLIST))\n+except (ValueError, TypeError, AttributeError):\n+    USE_DENYLIST = False\n+\n+\n manage_addFileForm = DTMLFile(\n     'dtml/imageAdd',\n     globals(),\n@@ -120,6 +181,13 @@ class File(\n     Cacheable\n ):\n     \"\"\"A File object is a content object for arbitrary files.\"\"\"\n+    # You can control which mimetypes may be shown inline\n+    # and which must always be downloaded, for security reasons.\n+    # Make the configuration available on the class.\n+    # Then subclasses can override this.\n+    allowed_inline_mimetypes = ALLOWED_INLINE_MIMETYPES\n+    disallowed_inline_mimetypes = DISALLOWED_INLINE_MIMETYPES\n+    use_denylist = USE_DENYLIST\n \n     meta_type = 'File'\n     zmi_icon = 'far fa-file-archive'\n@@ -418,6 +486,19 @@ def _range_request_handler(self, REQUEST, RESPONSE):\n                         b'\\r\\n--' + boundary.encode('ascii') + b'--\\r\\n')\n                     return True\n \n+    def _should_force_download(self):\n+        # If this returns True, the caller should set a\n+        # Content-Disposition header with filename.\n+        mimetype = self.content_type\n+        if not mimetype:\n+            return False\n+        if self.use_denylist:\n+            # We explicitly deny a few mimetypes, and allow the rest.\n+            return mimetype in self.disallowed_inline_mimetypes\n+        # Use the allowlist.\n+        # We only explicitly allow a few mimetypes, and deny the rest.\n+        return mimetype not in self.allowed_inline_mimetypes\n+\n     @security.protected(View)\n     def index_html(self, REQUEST, RESPONSE):\n         \"\"\"\n@@ -456,6 +537,24 @@ def index_html(self, REQUEST, RESPONSE):\n         RESPONSE.setHeader('Content-Length', self.size)\n         RESPONSE.setHeader('Accept-Ranges', 'bytes')\n \n+        if self._should_force_download():\n+            # We need a filename, even a dummy one if needed.\n+            filename = self.getId()\n+            if \".\" not in filename:\n+                # This either returns None or \".some_extension\"\n+                ext = guess_extension(self.content_type, strict=False)\n+                if not ext:\n+                    # image/svg+xml -> svg\n+                    ext = \".\" + self.content_type.split(\"/\")[-1].split(\"+\")[0]\n+                filename += ext\n+            if not isinstance(filename, bytes):\n+                filename = filename.encode(\"utf8\")\n+            filename = quote(filename)\n+            RESPONSE.setHeader(\n+                \"Content-Disposition\",\n+                \"attachment; filename*=UTF-8''{}\".format(filename),\n+            )\n+\n         if self.ZCacheable_isCachingEnabled():\n             result = self.ZCacheable_get(default=None)\n             if result is not None:"
        },
        {
          "filename": "src/OFS/tests/testFileAndImage.py",
          "status": "modified",
          "additions": 56,
          "deletions": 0,
          "patch": "@@ -368,6 +368,7 @@ def testViewImageOrFile(self):\n         response = request.RESPONSE\n         result = self.file.index_html(request, response)\n         self.assertEqual(result, self.data)\n+        self.assertIsNone(response.getHeader(\"Content-Disposition\"))\n \n     def test_interfaces(self):\n         from OFS.Image import Image\n@@ -382,6 +383,61 @@ def test_text_representation_is_tag(self):\n                          ' alt=\"\" title=\"\" height=\"16\" width=\"16\" />')\n \n \n+class SVGTests(ImageTests):\n+    content_type = 'image/svg+xml'\n+\n+    def testViewImageOrFile(self):\n+        request = self.app.REQUEST\n+        response = request.RESPONSE\n+        result = self.file.index_html(request, response)\n+        self.assertEqual(result, self.data)\n+        self.assertEqual(\n+            response.getHeader(\"Content-Disposition\"),\n+            \"attachment; filename*=UTF-8''file.svg\",\n+        )\n+\n+    def testViewImageOrFileNonAscii(self):\n+        try:\n+            factory = getattr(self.app, self.factory)\n+            factory('h\u00e4llo',\n+                    file=self.data, content_type=self.content_type)\n+            transaction.commit()\n+        except Exception:\n+            transaction.abort()\n+            self.connection.close()\n+            raise\n+        transaction.begin()\n+        image = getattr(self.app, 'h\u00e4llo')\n+        request = self.app.REQUEST\n+        response = request.RESPONSE\n+        result = image.index_html(request, response)\n+        self.assertEqual(result, self.data)\n+        self.assertEqual(\n+            response.getHeader(\"Content-Disposition\"),\n+            \"attachment; filename*=UTF-8''h%C3%A4llo.svg\",\n+        )\n+\n+    def testViewImageOrFile_with_denylist(self):\n+        request = self.app.REQUEST\n+        response = request.RESPONSE\n+        self.file.use_denylist = True\n+        result = self.file.index_html(request, response)\n+        self.assertEqual(result, self.data)\n+        self.assertEqual(\n+            response.getHeader(\"Content-Disposition\"),\n+            \"attachment; filename*=UTF-8''file.svg\",\n+        )\n+\n+    def testViewImageOrFile_with_empty_denylist(self):\n+        request = self.app.REQUEST\n+        response = request.RESPONSE\n+        self.file.use_denylist = True\n+        self.file.disallowed_inline_mimetypes = []\n+        result = self.file.index_html(request, response)\n+        self.assertEqual(result, self.data)\n+        self.assertIsNone(response.getHeader(\"Content-Disposition\"))\n+\n+\n class FileEditTests(Testing.ZopeTestCase.FunctionalTestCase):\n     \"\"\"Browser testing ..Image.File\"\"\"\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1595981bb0adc7b4e9e7fd3a63cb886f0dcb0a25",
            "date": "2025-01-14T09:50:29Z",
            "author_login": "djay"
          },
          {
            "sha": "8c140a3e4c0354b1f7b45e2fcbbe8bef98628271",
            "date": "2025-01-07T07:26:33Z",
            "author_login": "perrinjerome"
          },
          {
            "sha": "78025426ecb021e6296881f20afbf7e1db32a809",
            "date": "2024-12-03T07:57:04Z",
            "author_login": "icemac"
          },
          {
            "sha": "c647a3a2bf70506596f78389b96a002a26f98724",
            "date": "2024-11-27T12:28:24Z",
            "author_login": "d-maurer"
          },
          {
            "sha": "04b75cf7956425fe3e4e1f4184bac4d377502c59",
            "date": "2024-11-03T14:12:11Z",
            "author_login": "perrinjerome"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Zope is an open-source web application server. Prior to versions 4.8.10 and 5.8.5, there is a stored cross site scripting vulnerability for SVG images. Note that an image tag with an SVG image as source is never vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link. Patches are available in Zope 4.8.10 and 5.8.5. As a workaround, make sure the \"Add Documents, Images, and Files\" permission is only assigned to trusted roles. By default, only the Manager has this permission.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-09-21T17:15:22.483",
    "last_modified": "2024-11-21T08:22:34.657",
    "fix_date": "2023-09-21T08:01:18Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2023/09/22/2",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/Zope/commit/603b0a12881c90a072a7a65e32d47ed898ce37cb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2023/09/22/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/Zope/commit/603b0a12881c90a072a7a65e32d47ed898ce37cb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:08.437027",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Zope",
    "owner": "zopefoundation",
    "created_at": "2013-02-26T16:13:23Z",
    "updated_at": "2025-01-14T12:28:42Z",
    "pushed_at": "2025-01-14T09:50:31Z",
    "size": 163786,
    "stars": 358,
    "forks": 101,
    "open_issues": 29,
    "watchers": 358,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.9",
      "2.10",
      "2.11",
      "2.12",
      "2.13",
      "2.13.30-prep",
      "4.x",
      "gh-pages",
      "master"
    ],
    "languages": {
      "Python": 2097262,
      "CSS": 148167,
      "HTML": 29796,
      "JavaScript": 11022
    },
    "commit_activity": {
      "total_commits_last_year": 58,
      "avg_commits_per_week": 1.1153846153846154,
      "days_active_last_year": 30
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:25:22.530227"
  }
}