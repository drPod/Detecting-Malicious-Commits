{
  "cve_id": "CVE-2023-42815",
  "github_data": {
    "repository": "kyverno/kyverno",
    "fix_commit": "80d139bb5d1d9d7e907abe851b97dc73821a5be2",
    "related_commits": [
      "80d139bb5d1d9d7e907abe851b97dc73821a5be2",
      "fec2992e3f9fcd6b9c62267522c09b182e7df73b",
      "80d139bb5d1d9d7e907abe851b97dc73821a5be2",
      "fec2992e3f9fcd6b9c62267522c09b182e7df73b"
    ],
    "patch_url": "https://github.com/kyverno/kyverno/commit/80d139bb5d1d9d7e907abe851b97dc73821a5be2.patch",
    "fix_commit_details": {
      "sha": "80d139bb5d1d9d7e907abe851b97dc73821a5be2",
      "commit_date": "2023-06-01T08:05:28Z",
      "author": {
        "login": "vishal-chdhry",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Added `fetchAttestations` method to notaryV2 implimentation (#6800)",
        "length": 46848,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1664,
        "additions": 1235,
        "deletions": 429
      },
      "files": [
        {
          "filename": "api/kyverno/v1/image_verification_types.go",
          "status": "modified",
          "additions": 23,
          "deletions": 5,
          "patch": "@@ -9,21 +9,21 @@ import (\n )\n \n // ImageVerificationType selects the type of verification algorithm\n-// +kubebuilder:validation:Enum=Cosign;NotaryV2\n+// +kubebuilder:validation:Enum=Cosign;Notary\n // +kubebuilder:default=Cosign\n type ImageVerificationType string\n \n const (\n-\tCosign   ImageVerificationType = \"Cosign\"\n-\tNotaryV2 ImageVerificationType = \"NotaryV2\"\n+\tCosign ImageVerificationType = \"Cosign\"\n+\tNotary ImageVerificationType = \"Notary\"\n )\n \n // ImageVerification validates that images that match the specified pattern\n // are signed with the supplied public key. Once the image is verified it is\n // mutated to include the SHA digest retrieved during the registration.\n type ImageVerification struct {\n \t// Type specifies the method of signature validation. The allowed options\n-\t// are Cosign and NotaryV2. By default Cosign is used if a type is not specified.\n+\t// are Cosign and Notary. By default Cosign is used if a type is not specified.\n \t// +kubebuilder:validation:Optional\n \tType ImageVerificationType `json:\"type,omitempty\" yaml:\"type,omitempty\"`\n \n@@ -236,9 +236,14 @@ type CTLog struct {\n // OCI registry and decodes them into a list of Statements.\n type Attestation struct {\n \t// PredicateType defines the type of Predicate contained within the Statement.\n-\t// +kubebuilder:validation:Required\n+\t// Deprecated in favour of 'Type', to be removed soon\n+\t// +kubebuilder:validation:Optional\n \tPredicateType string `json:\"predicateType\" yaml:\"predicateType\"`\n \n+\t// Type defines the type of attestation contained within the Statement.\n+\t// +kubebuilder:validation:Optional\n+\tType string `json:\"type\" yaml:\"type\"`\n+\n \t// Attestors specify the required attestors (i.e. authorities)\n \t// +kubebuilder:validation:Optional\n \tAttestors []AttestorSet `json:\"attestors\" yaml:\"attestors\"`\n@@ -281,6 +286,19 @@ func (iv *ImageVerification) Validate(isAuditFailureAction bool, path *field.Pat\n \t\terrs = append(errs, attestorErrors...)\n \t}\n \n+\tif iv.Type == Notary {\n+\t\tfor _, attestorSet := range iv.Attestors {\n+\t\t\tfor _, attestor := range attestorSet.Entries {\n+\t\t\t\tif attestor.Keyless != nil {\n+\t\t\t\t\terrs = append(errs, field.Invalid(attestorsPath, iv, \"Keyless field is not allowed for type notary\"))\n+\t\t\t\t}\n+\t\t\t\tif attestor.Keys != nil {\n+\t\t\t\t\terrs = append(errs, field.Invalid(attestorsPath, iv, \"Keys field is not allowed for type notary\"))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \treturn errs\n }\n "
        },
        {
          "filename": "api/kyverno/v2beta1/image_verification_types.go",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -6,21 +6,21 @@ import (\n )\n \n // ImageVerificationType selects the type of verification algorithm\n-// +kubebuilder:validation:Enum=Cosign;NotaryV2\n+// +kubebuilder:validation:Enum=Cosign;Notary\n // +kubebuilder:default=Cosign\n type ImageVerificationType string\n \n const (\n-\tCosign   ImageVerificationType = \"Cosign\"\n-\tNotaryV2 ImageVerificationType = \"NotaryV2\"\n+\tCosign ImageVerificationType = \"Cosign\"\n+\tNotary ImageVerificationType = \"Notary\"\n )\n \n // ImageVerification validates that images that match the specified pattern\n // are signed with the supplied public key. Once the image is verified it is\n // mutated to include the SHA digest retrieved during the registration.\n type ImageVerification struct {\n \t// Type specifies the method of signature validation. The allowed options\n-\t// are Cosign and NotaryV2. By default Cosign is used if a type is not specified.\n+\t// are Cosign and Notary. By default Cosign is used if a type is not specified.\n \t// +kubebuilder:validation:Optional\n \tType ImageVerificationType `json:\"type,omitempty\" yaml:\"type,omitempty\"`\n \n@@ -86,5 +86,18 @@ func (iv *ImageVerification) Validate(isAuditFailureAction bool, path *field.Pat\n \t\terrs = append(errs, attestorErrors...)\n \t}\n \n+\tif iv.Type == Notary {\n+\t\tfor _, attestorSet := range iv.Attestors {\n+\t\t\tfor _, attestor := range attestorSet.Entries {\n+\t\t\t\tif attestor.Keyless != nil {\n+\t\t\t\t\terrs = append(errs, field.Invalid(attestorsPath, iv, \"Keyless field is not allowed for type notary\"))\n+\t\t\t\t}\n+\t\t\t\tif attestor.Keys != nil {\n+\t\t\t\t\terrs = append(errs, field.Invalid(attestorsPath, iv, \"Keys field is not allowed for type notary\"))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \treturn errs\n }"
        },
        {
          "filename": "charts/kyverno/templates/crds/crds.yaml",
          "status": "modified",
          "additions": 60,
          "deletions": 32,
          "patch": "@@ -7248,10 +7248,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -7499,11 +7502,11 @@ spec:\n                             type: string\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -11153,9 +11156,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -11412,11 +11419,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -14748,10 +14755,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -14974,11 +14984,11 @@ spec:\n                             type: boolean\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -18628,9 +18638,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -18887,11 +18901,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -22509,10 +22523,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -22760,11 +22777,11 @@ spec:\n                             type: string\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -26415,9 +26432,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -26674,11 +26695,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -30011,10 +30032,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -30237,11 +30261,11 @@ spec:\n                             type: boolean\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -33891,9 +33915,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -34150,11 +34178,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true"
        },
        {
          "filename": "config/crds/kyverno.io_clusterpolicies.yaml",
          "status": "modified",
          "additions": 30,
          "deletions": 16,
          "patch": "@@ -3494,10 +3494,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -3745,11 +3748,11 @@ spec:\n                             type: string\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -7399,9 +7402,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -7658,11 +7665,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -10994,10 +11001,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -11220,11 +11230,11 @@ spec:\n                             type: boolean\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -14874,9 +14884,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -15133,11 +15147,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true"
        },
        {
          "filename": "config/crds/kyverno.io_policies.yaml",
          "status": "modified",
          "additions": 30,
          "deletions": 16,
          "patch": "@@ -3495,10 +3495,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -3746,11 +3749,11 @@ spec:\n                             type: string\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -7401,9 +7404,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -7660,11 +7667,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -10997,10 +11004,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -11223,11 +11233,11 @@ spec:\n                             type: boolean\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -14877,9 +14887,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -15136,11 +15150,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true"
        },
        {
          "filename": "config/install-latest-testing.yaml",
          "status": "modified",
          "additions": 60,
          "deletions": 32,
          "patch": "@@ -7451,10 +7451,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -7702,11 +7705,11 @@ spec:\n                             type: string\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -11356,9 +11359,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -11615,11 +11622,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -14951,10 +14958,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -15177,11 +15187,11 @@ spec:\n                             type: boolean\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -18831,9 +18841,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -19090,11 +19104,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -22712,10 +22726,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -22963,11 +22980,11 @@ spec:\n                             type: string\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -26618,9 +26635,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -26877,11 +26898,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true\n@@ -30214,10 +30235,13 @@ spec:\n                                   type: array\n                                 predicateType:\n                                   description: PredicateType defines the type of Predicate\n+                                    contained within the Statement. Deprecated in\n+                                    favour of 'Type', to be removed soon\n+                                  type: string\n+                                type:\n+                                  description: Type defines the type of attestation\n                                     contained within the Statement.\n                                   type: string\n-                              required:\n-                              - predicateType\n                               type: object\n                             type: array\n                           attestors:\n@@ -30440,11 +30464,11 @@ spec:\n                             type: boolean\n                           type:\n                             description: Type specifies the method of signature validation.\n-                              The allowed options are Cosign and NotaryV2. By default\n+                              The allowed options are Cosign and Notary. By default\n                               Cosign is used if a type is not specified.\n                             enum:\n                             - Cosign\n-                            - NotaryV2\n+                            - Notary\n                             type: string\n                           verifyDigest:\n                             default: true\n@@ -34094,9 +34118,13 @@ spec:\n                                     predicateType:\n                                       description: PredicateType defines the type\n                                         of Predicate contained within the Statement.\n+                                        Deprecated in favour of 'Type', to be removed\n+                                        soon\n+                                      type: string\n+                                    type:\n+                                      description: Type defines the type of attestation\n+                                        contained within the Statement.\n                                       type: string\n-                                  required:\n-                                  - predicateType\n                                   type: object\n                                 type: array\n                               attestors:\n@@ -34353,11 +34381,11 @@ spec:\n                                 type: string\n                               type:\n                                 description: Type specifies the method of signature\n-                                  validation. The allowed options are Cosign and NotaryV2.\n+                                  validation. The allowed options are Cosign and Notary.\n                                   By default Cosign is used if a type is not specified.\n                                 enum:\n                                 - Cosign\n-                                - NotaryV2\n+                                - Notary\n                                 type: string\n                               verifyDigest:\n                                 default: true"
        },
        {
          "filename": "docs/user/crd/index.html",
          "status": "modified",
          "additions": 15,
          "deletions": 3,
          "patch": "@@ -715,7 +715,19 @@ <h3 id=\"kyverno.io/v1.Attestation\">Attestation\n </em>\n </td>\n <td>\n-<p>PredicateType defines the type of Predicate contained within the Statement.</p>\n+<p>PredicateType defines the type of Predicate contained within the Statement.\n+Deprecated in favour of &lsquo;Type&rsquo;, to be removed soon</p>\n+</td>\n+</tr>\n+<tr>\n+<td>\n+<code>type</code><br/>\n+<em>\n+string\n+</em>\n+</td>\n+<td>\n+<p>Type defines the type of attestation contained within the Statement.</p>\n </td>\n </tr>\n <tr>\n@@ -1972,7 +1984,7 @@ <h3 id=\"kyverno.io/v1.ImageVerification\">ImageVerification\n </td>\n <td>\n <p>Type specifies the method of signature validation. The allowed options\n-are Cosign and NotaryV2. By default Cosign is used if a type is not specified.</p>\n+are Cosign and Notary. By default Cosign is used if a type is not specified.</p>\n </td>\n </tr>\n <tr>\n@@ -6372,7 +6384,7 @@ <h3 id=\"kyverno.io/v2beta1.ImageVerification\">ImageVerification\n </td>\n <td>\n <p>Type specifies the method of signature validation. The allowed options\n-are Cosign and NotaryV2. By default Cosign is used if a type is not specified.</p>\n+are Cosign and Notary. By default Cosign is used if a type is not specified.</p>\n </td>\n </tr>\n <tr>"
        },
        {
          "filename": "go.mod",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -20,7 +20,7 @@ require (\n \tgithub.com/go-logr/logr v1.2.4\n \tgithub.com/go-logr/zapr v1.2.4\n \tgithub.com/google/gnostic v0.6.9\n-\tgithub.com/google/go-containerregistry v0.14.0\n+\tgithub.com/google/go-containerregistry v0.14.1-0.20230425172351-b7c6e9dc3944\n \tgithub.com/google/go-containerregistry/pkg/authn/kubernetes v0.0.0-20230403180904-b8d1c0a1df12\n \tgithub.com/in-toto/in-toto-golang v0.6.0\n \tgithub.com/jmespath/go-jmespath v0.4.0\n@@ -33,6 +33,7 @@ require (\n \tgithub.com/notaryproject/notation-go v1.0.0-rc.3\n \tgithub.com/onsi/ginkgo v1.16.5\n \tgithub.com/onsi/gomega v1.27.7\n+\tgithub.com/opencontainers/go-digest v1.0.0\n \tgithub.com/opencontainers/image-spec v1.1.0-rc2\n \tgithub.com/orcaman/concurrent-map/v2 v2.0.1\n \tgithub.com/pkg/errors v0.9.1\n@@ -76,21 +77,20 @@ require (\n \tk8s.io/kube-openapi v0.0.0-20230501164219-8b0f38b5fd1f\n \tk8s.io/pod-security-admission v0.27.2\n \tk8s.io/utils v0.0.0-20230406110748-d93618cff8a2\n-\toras.land/oras-go/v2 v2.2.0\n \tsigs.k8s.io/controller-runtime v0.15.0\n \tsigs.k8s.io/kustomize/api v0.13.4\n \tsigs.k8s.io/kustomize/kyaml v0.14.2\n \tsigs.k8s.io/yaml v1.3.0\n )\n \n require (\n+\tcloud.google.com/go/compute v1.19.1 // indirect\n \tgithub.com/antlr/antlr4/runtime/Go/antlr v1.4.10 // indirect\n \tgithub.com/google/cel-go v0.12.6 // indirect\n \tgithub.com/stoewer/go-strcase v1.2.0 // indirect\n )\n \n require (\n-\tcloud.google.com/go/compute v1.19.0 // indirect\n \tcloud.google.com/go/compute/metadata v0.2.3 // indirect\n \tcloud.google.com/go/iam v1.0.0 // indirect\n \tcloud.google.com/go/kms v1.10.1 // indirect\n@@ -108,7 +108,7 @@ require (\n \tgithub.com/Azure/go-autorest/logger v0.2.1 // indirect\n \tgithub.com/Azure/go-autorest/tracing v0.6.0 // indirect\n \tgithub.com/Azure/go-ntlmssp v0.0.0-20221128193559-754e69321358 // indirect\n-\tgithub.com/Microsoft/go-winio v0.6.0 // indirect\n+\tgithub.com/Microsoft/go-winio v0.6.1 // indirect\n \tgithub.com/OneOfOne/xxhash v1.2.8 // indirect\n \tgithub.com/ProtonMail/go-crypto v0.0.0-20230518184743-7afd39499903 // indirect\n \tgithub.com/ThalesIgnite/crypto11 v1.2.5 // indirect\n@@ -156,9 +156,9 @@ require (\n \tgithub.com/davecgh/go-spew v1.1.1 // indirect\n \tgithub.com/dimchansky/utfbom v1.1.1 // indirect\n \tgithub.com/djherbis/times v1.5.0 // indirect\n-\tgithub.com/docker/cli v23.0.2+incompatible // indirect\n+\tgithub.com/docker/cli v23.0.4+incompatible // indirect\n \tgithub.com/docker/distribution v2.8.2+incompatible // indirect\n-\tgithub.com/docker/docker v23.0.3+incompatible // indirect\n+\tgithub.com/docker/docker v23.0.4+incompatible // indirect\n \tgithub.com/docker/docker-credential-helpers v0.7.0 // indirect\n \tgithub.com/dustin/go-humanize v1.0.1 // indirect\n \tgithub.com/emicklei/go-restful/v3 v3.10.2 // indirect\n@@ -229,7 +229,7 @@ require (\n \tgithub.com/josharian/intern v1.0.0 // indirect\n \tgithub.com/json-iterator/go v1.1.12 // indirect\n \tgithub.com/kevinburke/ssh_config v1.2.0 // indirect\n-\tgithub.com/klauspost/compress v1.16.3 // indirect\n+\tgithub.com/klauspost/compress v1.16.5 // indirect\n \tgithub.com/leodido/go-urn v1.2.2 // indirect\n \tgithub.com/letsencrypt/boulder v0.0.0-20230331213904-8c67769be400 // indirect\n \tgithub.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de // indirect\n@@ -254,7 +254,6 @@ require (\n \tgithub.com/oliveagle/jsonpath v0.0.0-20180606110733-2e52cf6e6852 // indirect\n \tgithub.com/open-policy-agent/gatekeeper v0.0.0-20210824170141-dd97b8a7e966 // indirect\n \tgithub.com/open-policy-agent/opa v0.51.0 // indirect\n-\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n \tgithub.com/opentracing/opentracing-go v1.2.0 // indirect\n \tgithub.com/pelletier/go-toml/v2 v2.0.7 // indirect\n \tgithub.com/peterbourgon/diskv v2.0.1+incompatible // indirect\n@@ -313,7 +312,7 @@ require (\n \tgo.uber.org/atomic v1.10.0 // indirect\n \tgolang.org/x/mod v0.10.0 // indirect\n \tgolang.org/x/net v0.10.0 // indirect\n-\tgolang.org/x/oauth2 v0.6.0 // indirect\n+\tgolang.org/x/oauth2 v0.7.0 // indirect\n \tgolang.org/x/sync v0.2.0 // indirect\n \tgolang.org/x/sys v0.8.0 // indirect\n \tgolang.org/x/term v0.8.0 // indirect\n@@ -330,6 +329,7 @@ require (\n \tgopkg.in/warnings.v0 v0.1.2 // indirect\n \tk8s.io/component-base v0.27.2 // indirect\n \tk8s.io/kubectl v0.26.3 // indirect\n+\toras.land/oras-go/v2 v2.1.0 // indirect\n \tsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd // indirect\n \tsigs.k8s.io/release-utils v0.7.3 // indirect\n \tsigs.k8s.io/structured-merge-diff/v4 v4.2.3 // indirect"
        },
        {
          "filename": "go.sum",
          "status": "modified",
          "additions": 16,
          "deletions": 16,
          "patch": "@@ -27,8 +27,8 @@ cloud.google.com/go/bigquery v1.4.0/go.mod h1:S8dzgnTigyfTmLBfrtrhyYhwRxG72rYxvf\n cloud.google.com/go/bigquery v1.5.0/go.mod h1:snEHRnqQbz117VIFhE8bmtwIDY80NLUZUMb4Nv6dBIg=\n cloud.google.com/go/bigquery v1.7.0/go.mod h1://okPTzCYNXSlb24MZs83e2Do+h+VXtc4gLoIoXIAPc=\n cloud.google.com/go/bigquery v1.8.0/go.mod h1:J5hqkt3O0uAFnINi6JXValWIb1v0goeZM77hZzJN/fQ=\n-cloud.google.com/go/compute v1.19.0 h1:+9zda3WGgW1ZSTlVppLCYFIr48Pa35q1uG2N1itbCEQ=\n-cloud.google.com/go/compute v1.19.0/go.mod h1:rikpw2y+UMidAe9tISo04EHNOIf42RLYF/q8Bs93scU=\n+cloud.google.com/go/compute v1.19.1 h1:am86mquDUgjGNWxiGn+5PGLbmgiWXlE/yNWpIpNvuXY=\n+cloud.google.com/go/compute v1.19.1/go.mod h1:6ylj3a05WF8leseCdIf77NK0g1ey+nj5IKd5/kvShxE=\n cloud.google.com/go/compute/metadata v0.2.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=\n cloud.google.com/go/compute/metadata v0.2.3 h1:mg4jlk7mCAj6xXp9UJ4fjI9VUI5rubuGBW5aJ7UnBMY=\n cloud.google.com/go/compute/metadata v0.2.3/go.mod h1:VAV5nSsACxMJvgaAuX6Pk2AawlZn8kiOGuCv6gTkwuA=\n@@ -109,8 +109,8 @@ github.com/Masterminds/semver v1.5.0/go.mod h1:MB6lktGJrhw8PrUyiEoblNEGEQ+RzHPF0\n github.com/Masterminds/sprig v2.15.0+incompatible/go.mod h1:y6hNFY5UBTIWBxnzTeuNhlNS5hqE0NB0E6fgfo2Br3o=\n github.com/Masterminds/sprig v2.22.0+incompatible/go.mod h1:y6hNFY5UBTIWBxnzTeuNhlNS5hqE0NB0E6fgfo2Br3o=\n github.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=\n-github.com/Microsoft/go-winio v0.6.0 h1:slsWYD/zyx7lCXoZVlvQrj0hPTM1HI4+v1sIda2yDvg=\n-github.com/Microsoft/go-winio v0.6.0/go.mod h1:cTAf44im0RAYeL23bpB+fzCyDH2MJiz2BO69KH/soAE=\n+github.com/Microsoft/go-winio v0.6.1 h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=\n+github.com/Microsoft/go-winio v0.6.1/go.mod h1:LRdKpFKfdobln8UmuiYcKPot9D2v6svN5+sAH+4kjUM=\n github.com/NYTimes/gziphandler v0.0.0-20170623195520-56545f4a5d46/go.mod h1:3wb06e3pkSAbeQ52E9H9iFoQsEEwGN64994WTCIhntQ=\n github.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\n github.com/OneOfOne/xxhash v1.2.7/go.mod h1:eZbhyaAYD41SGSSsnmcpxVoRiQ/MPUTjUdIIOT9Um7Q=\n@@ -355,12 +355,12 @@ github.com/distribution/distribution v2.8.2+incompatible h1:k9+4DKdOG+quPFZXT/mU\n github.com/distribution/distribution v2.8.2+incompatible/go.mod h1:EgLm2NgWtdKgzF9NpMzUKgzmR7AMmb0VQi2B+ZzDRjc=\n github.com/djherbis/times v1.5.0 h1:79myA211VwPhFTqUk8xehWrsEO+zcIZj0zT8mXPVARU=\n github.com/djherbis/times v1.5.0/go.mod h1:5q7FDLvbNg1L/KaBmPcWlVR9NmoKo3+ucqUA3ijQhA0=\n-github.com/docker/cli v23.0.2+incompatible h1:Yj4wkrNtyCNLCMobKDYzEUIsbtMbfAulkHMH75/ecik=\n-github.com/docker/cli v23.0.2+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\n+github.com/docker/cli v23.0.4+incompatible h1:xClB7PsiATttDHj8ce5qvJcikiApNy7teRR1XkoBZGs=\n+github.com/docker/cli v23.0.4+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\n github.com/docker/distribution v2.8.2+incompatible h1:T3de5rq0dB1j30rp0sA2rER+m322EBzniBPB6ZIzuh8=\n github.com/docker/distribution v2.8.2+incompatible/go.mod h1:J2gT2udsDAN96Uj4KfcMRqY0/ypR+oyYUYmja8H+y+w=\n-github.com/docker/docker v23.0.3+incompatible h1:9GhVsShNWz1hO//9BNg/dpMnZW25KydO4wtVxWAIbho=\n-github.com/docker/docker v23.0.3+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\n+github.com/docker/docker v23.0.4+incompatible h1:Kd3Bh9V/rO+XpTP/BLqM+gx8z7+Yb0AA2Ibj+nNo4ek=\n+github.com/docker/docker v23.0.4+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\n github.com/docker/docker-credential-helpers v0.7.0 h1:xtCHsjxogADNZcdv1pKUHXryefjlVRqWqIhk/uXJp0A=\n github.com/docker/docker-credential-helpers v0.7.0/go.mod h1:rETQfLdHNT3foU5kuNkFR1R1V12OJRRO5lzt2D1b5X0=\n github.com/docker/spdystream v0.0.0-20160310174837-449fdfce4d96/go.mod h1:Qh8CwZgvJUkLughtfhJv5dyTYa91l1fOUCrgjqmcifM=\n@@ -669,8 +669,8 @@ github.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/\n github.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\n github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\n github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\n-github.com/google/go-containerregistry v0.14.0 h1:z58vMqHxuwvAsVwvKEkmVBz2TlgBgH5k6koEXBtlYkw=\n-github.com/google/go-containerregistry v0.14.0/go.mod h1:aiJ2fp/SXvkWgmYHioXnbMdlgB8eXiiYOY55gfN91Wk=\n+github.com/google/go-containerregistry v0.14.1-0.20230425172351-b7c6e9dc3944 h1:7c5khUnWebZDFMUQ7rf2vynmmnKI1VvBACrTZKKpoD4=\n+github.com/google/go-containerregistry v0.14.1-0.20230425172351-b7c6e9dc3944/go.mod h1:0JopT7wiZeP5/ATNgx85oApuNAiNnfn4mr8+WOssYNQ=\n github.com/google/go-containerregistry/pkg/authn/kubernetes v0.0.0-20230403180904-b8d1c0a1df12 h1:LLLVB/7zCZVKI27rqA7bbZHZJxH1lL2jbLxdomX1Eew=\n github.com/google/go-containerregistry/pkg/authn/kubernetes v0.0.0-20230403180904-b8d1c0a1df12/go.mod h1:CSeefFZsOfyNrYGXDafpWNkf3tUz17nKReR5INPRaMI=\n github.com/google/go-github/v45 v45.2.0 h1:5oRLszbrkvxDDqBCNj2hjDZMKmvexaZ1xw/FCD+K3FI=\n@@ -880,8 +880,8 @@ github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+o\n github.com/klauspost/compress v1.10.7/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\n github.com/klauspost/compress v1.11.0/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\n github.com/klauspost/compress v1.13.6/go.mod h1:/3/Vjq9QcHkK5uEr5lBEmyoZ1iFhe47etQ6QUkpK6sk=\n-github.com/klauspost/compress v1.16.3 h1:XuJt9zzcnaz6a16/OU53ZjWp/v7/42WcR5t2a0PcNQY=\n-github.com/klauspost/compress v1.16.3/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=\n+github.com/klauspost/compress v1.16.5 h1:IFV2oUNUzZaz+XyusxpLzpzS8Pt5rh0Z16For/djlyI=\n+github.com/klauspost/compress v1.16.5/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=\n github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\n github.com/konsorten/go-windows-terminal-sequences v1.0.2/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\n github.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\n@@ -1672,8 +1672,8 @@ golang.org/x/oauth2 v0.0.0-20210218202405-ba52d332ba99/go.mod h1:KelEdhl1UZF7XfJ\n golang.org/x/oauth2 v0.0.0-20210514164344-f6687ab2804c/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\n golang.org/x/oauth2 v0.0.0-20211104180415-d3ed0bb246c8/go.mod h1:KelEdhl1UZF7XfJ4dDtk6s++YSgaE7mD/BuKKDLBl4A=\n golang.org/x/oauth2 v0.3.0/go.mod h1:rQrIauxkUhJ6CuwEXwymO2/eh4xz2ZWF1nBkcxS+tGk=\n-golang.org/x/oauth2 v0.6.0 h1:Lh8GPgSKBfWSwFvtuWOfeI3aAAnbXTSutYxJiOJFgIw=\n-golang.org/x/oauth2 v0.6.0/go.mod h1:ycmewcwgD4Rpr3eZJLSB4Kyyljb3qDh40vJ8STE5HKw=\n+golang.org/x/oauth2 v0.7.0 h1:qe6s0zUXlPX80/dITx3440hWZ7GwMwgDDyrSGTPJG/g=\n+golang.org/x/oauth2 v0.7.0/go.mod h1:hPLQkd9LyjfXTiRohC/41GhcFqxisoUQ99sCUOHO9x4=\n golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n@@ -2176,8 +2176,8 @@ mvdan.cc/gofumpt v0.1.1/go.mod h1:yXG1r1WqZVKWbVRtBWKWX9+CxGYfA51nSomhM0woR48=\n mvdan.cc/interfacer v0.0.0-20180901003855-c20040233aed/go.mod h1:Xkxe497xwlCKkIaQYRfC7CSLworTXY9RMqwhhCm+8Nc=\n mvdan.cc/lint v0.0.0-20170908181259-adc824a0674b/go.mod h1:2odslEg/xrtNQqCYg2/jCoyKnw3vv5biOc3JnIcYfL4=\n mvdan.cc/unparam v0.0.0-20210104141923-aac4ce9116a7/go.mod h1:hBpJkZE8H/sb+VRFvw2+rBpHNsTBcvSpk61hr8mzXZE=\n-oras.land/oras-go/v2 v2.2.0 h1:E1fqITD56Eg5neZbxBtAdZVgDHD6wBabJo6xESTcQyo=\n-oras.land/oras-go/v2 v2.2.0/go.mod h1:pXjn0+KfarspMHHNR3A56j3tgvr+mxArHuI8qVn59v8=\n+oras.land/oras-go/v2 v2.1.0 h1:1nS8BIeEP6CBVQifwxrsth2bkuD+cYfjp7Hf7smUcS8=\n+oras.land/oras-go/v2 v2.1.0/go.mod h1:v5ZSAPIMEJYnZjZ6rTGPAyaonH+rCFmbE95IAzCTeGU=\n rsc.io/binaryregexp v0.2.0/go.mod h1:qTv7/COck+e2FymRvadv62gMdZztPaShugOCi3I+8D8=\n rsc.io/quote/v3 v3.1.0/go.mod h1:yEA65RcK8LyAZtP9Kv3t0HmxON59tX3rD+tICJqUlj0=\n rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA="
        },
        {
          "filename": "pkg/cosign/cosign.go",
          "status": "modified",
          "additions": 11,
          "deletions": 10,
          "patch": "@@ -79,7 +79,7 @@ func (v *cosignVerifier) VerifySignature(ctx context.Context, opts images.Option\n \t}\n \n \tvar digest string\n-\tif opts.PredicateType == \"\" {\n+\tif opts.Type == \"\" {\n \t\tdigest, err = extractDigest(opts.ImageRef, payload)\n \t\tif err != nil {\n \t\t\treturn nil, err\n@@ -265,13 +265,13 @@ func (v *cosignVerifier) FetchAttestations(ctx context.Context, opts images.Opti\n \t}\n \n \tfor _, signature := range signatures {\n-\t\tmatch, predicateType, err := matchPredicateType(signature, opts.PredicateType)\n+\t\tmatch, predicateType, err := matchType(signature, opts.Type)\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n \n \t\tif !match {\n-\t\t\tlogger.V(4).Info(\"predicateType doesn't match, continue\", \"expected\", opts.PredicateType, \"received\", predicateType)\n+\t\t\tlogger.V(4).Info(\"type doesn't match, continue\", \"expected\", opts.Type, \"received\", predicateType)\n \t\t\tcontinue\n \t\t}\n \n@@ -294,15 +294,15 @@ func (v *cosignVerifier) FetchAttestations(ctx context.Context, opts images.Opti\n \treturn &images.Response{Digest: digest, Statements: inTotoStatements}, nil\n }\n \n-func matchPredicateType(sig oci.Signature, expectedPredicateType string) (bool, string, error) {\n-\tif expectedPredicateType != \"\" {\n+func matchType(sig oci.Signature, expectedType string) (bool, string, error) {\n+\tif expectedType != \"\" {\n \t\tstatement, _, err := decodeStatement(sig)\n \t\tif err != nil {\n-\t\t\treturn false, \"\", fmt.Errorf(\"failed to decode predicateType: %w\", err)\n+\t\t\treturn false, \"\", fmt.Errorf(\"failed to decode type: %w\", err)\n \t\t}\n \n-\t\tif pType, ok := statement[\"predicateType\"]; ok {\n-\t\t\tif pType.(string) == expectedPredicateType {\n+\t\tif pType, ok := statement[\"type\"]; ok {\n+\t\t\tif pType.(string) == expectedType {\n \t\t\t\treturn true, pType.(string), nil\n \t\t\t}\n \t\t}\n@@ -360,6 +360,7 @@ func decodeStatement(sig oci.Signature) (map[string]interface{}, string, error)\n \t\tif err != nil {\n \t\t\treturn nil, \"\", fmt.Errorf(\"failed to decode statement %s: %w\", string(pld), err)\n \t\t}\n+\t\tdecodedStatement[\"type\"] = decodedStatement[\"predicateType\"]\n \n \t\treturn decodedStatement, digest, nil\n \t}\n@@ -376,7 +377,7 @@ func decodePayload(payloadBase64 string) (map[string]interface{}, error) {\n \t\treturn nil, err\n \t}\n \n-\tif statement.PredicateType != attestation.CosignCustomProvenanceV01 {\n+\tif statement.Type != attestation.CosignCustomProvenanceV01 {\n \t\t// This assumes that the following statements are JSON objects:\n \t\t// - in_toto.PredicateSLSAProvenanceV01\n \t\t// - in_toto.PredicateLinkV1\n@@ -389,7 +390,7 @@ func decodePayload(payloadBase64 string) (map[string]interface{}, error) {\n }\n \n func decodeCosignCustomProvenanceV01(statement in_toto.Statement) (map[string]interface{}, error) {\n-\tif statement.PredicateType != attestation.CosignCustomProvenanceV01 {\n+\tif statement.Type != attestation.CosignCustomProvenanceV01 {\n \t\treturn nil, fmt.Errorf(\"invalid statement type %s\", attestation.CosignCustomProvenanceV01)\n \t}\n "
        },
        {
          "filename": "pkg/engine/api/context.go",
          "status": "modified",
          "additions": 12,
          "deletions": 4,
          "patch": "@@ -6,6 +6,7 @@ import (\n \t\"fmt\"\n \n \t\"github.com/go-logr/logr\"\n+\t\"github.com/google/go-containerregistry/pkg/name\"\n \tkyvernov1 \"github.com/kyverno/kyverno/api/kyverno/v1\"\n \t\"github.com/kyverno/kyverno/pkg/clients/dclient\"\n \t\"github.com/kyverno/kyverno/pkg/engine/apicall\"\n@@ -141,6 +142,13 @@ func fetchImageData(ctx context.Context, jp jmespath.Interface, rclient registry\n // FetchImageDataMap fetches image information from the remote registry.\n func fetchImageDataMap(ctx context.Context, rclient registryclient.Client, ref string) (interface{}, error) {\n \tdesc, err := rclient.FetchImageDescriptor(ctx, ref)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to fetch image descriptor: %s, error: %v\", ref, err)\n+\t}\n+\tparsedRef, err := name.ParseReference(ref)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"failed to parse image reference: %s, error: %v\", ref, err)\n+\t}\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -169,10 +177,10 @@ func fetchImageDataMap(ctx context.Context, rclient registryclient.Client, ref s\n \n \tdata := map[string]interface{}{\n \t\t\"image\":         ref,\n-\t\t\"resolvedImage\": fmt.Sprintf(\"%s@%s\", desc.Ref.Context().Name(), desc.Digest.String()),\n-\t\t\"registry\":      desc.Ref.Context().RegistryStr(),\n-\t\t\"repository\":    desc.Ref.Context().RepositoryStr(),\n-\t\t\"identifier\":    desc.Ref.Identifier(),\n+\t\t\"resolvedImage\": fmt.Sprintf(\"%s@%s\", parsedRef.Context().Name(), desc.Digest.String()),\n+\t\t\"registry\":      parsedRef.Context().RegistryStr(),\n+\t\t\"repository\":    parsedRef.Context().RepositoryStr(),\n+\t\t\"identifier\":    parsedRef.Identifier(),\n \t\t\"manifest\":      manifest,\n \t\t\"configData\":    configData,\n \t}"
        },
        {
          "filename": "pkg/engine/handlers/mutation/mutate_image.go",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -112,16 +112,20 @@ func substituteVariables(rule kyvernov1.Rule, ctx enginecontext.EvalInterface, l\n \t// remove attestations as variables are not substituted in them\n \truleCopy := *rule.DeepCopy()\n \tfor i := range ruleCopy.VerifyImages {\n-\t\truleCopy.VerifyImages[i].Attestations = nil\n+\t\tfor j := range ruleCopy.VerifyImages[i].Attestations {\n+\t\t\truleCopy.VerifyImages[i].Attestations[j].Conditions = nil\n+\t\t}\n \t}\n \tvar err error\n \truleCopy, err = variables.SubstituteAllInRule(logger, ctx, ruleCopy)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \t// replace attestations\n-\tfor i := range rule.VerifyImages {\n-\t\truleCopy.VerifyImages[i].Attestations = rule.VerifyImages[i].Attestations\n+\tfor i := range ruleCopy.VerifyImages {\n+\t\tfor j := range ruleCopy.VerifyImages[i].Attestations {\n+\t\t\truleCopy.VerifyImages[i].Attestations[j].Conditions = rule.VerifyImages[i].Attestations[j].Conditions\n+\t\t}\n \t}\n \treturn &ruleCopy, nil\n }"
        },
        {
          "filename": "pkg/engine/internal/imageverifier.go",
          "status": "modified",
          "additions": 49,
          "deletions": 15,
          "patch": "@@ -15,7 +15,7 @@ import (\n \tenginecontext \"github.com/kyverno/kyverno/pkg/engine/context\"\n \t\"github.com/kyverno/kyverno/pkg/engine/variables\"\n \t\"github.com/kyverno/kyverno/pkg/images\"\n-\t\"github.com/kyverno/kyverno/pkg/notaryv2\"\n+\t\"github.com/kyverno/kyverno/pkg/notary\"\n \t\"github.com/kyverno/kyverno/pkg/registryclient\"\n \tapiutils \"github.com/kyverno/kyverno/pkg/utils/api\"\n \t\"github.com/kyverno/kyverno/pkg/utils/jsonpointer\"\n@@ -138,7 +138,7 @@ func buildStatementMap(statements []map[string]interface{}) (map[string][]map[st\n \tresults := map[string][]map[string]interface{}{}\n \tvar predicateTypes []string\n \tfor _, s := range statements {\n-\t\tpredicateType := s[\"predicateType\"].(string)\n+\t\tpredicateType := s[\"type\"].(string)\n \t\tif results[predicateType] != nil {\n \t\t\tresults[predicateType] = append(results[predicateType], s)\n \t\t} else {\n@@ -249,6 +249,11 @@ func (iv *ImageVerifier) verifyImage(\n \t\treturn nil, \"\"\n \t}\n \timage := imageInfo.String()\n+\tfor _, att := range imageVerify.Attestations {\n+\t\tif att.Type == \"\" && att.PredicateType != \"\" {\n+\t\t\tatt.Type = att.PredicateType\n+\t\t}\n+\t}\n \tiv.logger.V(2).Info(\"verifying image signatures\", \"image\", image, \"attestors\", len(imageVerify.Attestors), \"attestations\", len(imageVerify.Attestations))\n \tif err := iv.policyContext.JSONContext().AddImageInfo(imageInfo, cfg); err != nil {\n \t\tiv.logger.Error(err, \"failed to add image to context\")\n@@ -319,8 +324,13 @@ func (iv *ImageVerifier) verifyAttestations(\n \t\tvar attestationError error\n \t\tpath := fmt.Sprintf(\".attestations[%d]\", i)\n \n-\t\tif attestation.PredicateType == \"\" {\n-\t\t\treturn engineapi.RuleFail(iv.rule.Name, engineapi.ImageVerify, path+\": missing predicateType\"), \"\"\n+\t\tiv.logger.V(2).Info(fmt.Sprintf(\"attestation %+v\", attestation))\n+\t\tif attestation.Type == \"\" && attestation.PredicateType == \"\" {\n+\t\t\treturn engineapi.RuleFail(iv.rule.Name, engineapi.ImageVerify, path+\": missing type\"), \"\"\n+\t\t}\n+\n+\t\tif attestation.Type == \"\" && attestation.PredicateType != \"\" {\n+\t\t\tattestation.Type = attestation.PredicateType\n \t\t}\n \n \t\tif len(attestation.Attestors) == 0 {\n@@ -366,7 +376,7 @@ func (iv *ImageVerifier) verifyAttestations(\n \t\t\t}\n \t\t}\n \n-\t\tiv.logger.V(4).Info(\"attestation checks passed\", \"path\", path, \"image\", imageInfo.String(), \"predicateType\", attestation.PredicateType)\n+\t\tiv.logger.V(4).Info(\"attestation checks passed\", \"path\", path, \"image\", imageInfo.String(), \"type\", attestation.Type)\n \t}\n \n \tmsg := fmt.Sprintf(\"verified image attestations for %s\", image)\n@@ -432,8 +442,8 @@ func (iv *ImageVerifier) buildVerifier(\n \tattestation *kyvernov1.Attestation,\n ) (images.ImageVerifier, *images.Options, string) {\n \tswitch imageVerify.Type {\n-\tcase kyvernov1.NotaryV2:\n-\t\treturn iv.buildNotaryV2Verifier(attestor, imageVerify, image)\n+\tcase kyvernov1.Notary:\n+\t\treturn iv.buildNotaryVerifier(attestor, imageVerify, image, attestation)\n \tdefault:\n \t\treturn iv.buildCosignVerifier(attestor, imageVerify, image, attestation)\n \t}\n@@ -463,6 +473,11 @@ func (iv *ImageVerifier) buildCosignVerifier(\n \n \tif attestation != nil {\n \t\topts.PredicateType = attestation.PredicateType\n+\t\topts.Type = attestation.Type\n+\t\tif attestation.PredicateType != \"\" && attestation.Type == \"\" {\n+\t\t\tiv.logger.Info(\"predicate type has been deprecated, please use type instead\")\n+\t\t\topts.Type = attestation.PredicateType\n+\t\t}\n \t\topts.FetchAttestations = true\n \t}\n \n@@ -509,10 +524,11 @@ func (iv *ImageVerifier) buildCosignVerifier(\n \treturn cosign.NewVerifier(), opts, path\n }\n \n-func (iv *ImageVerifier) buildNotaryV2Verifier(\n+func (iv *ImageVerifier) buildNotaryVerifier(\n \tattestor kyvernov1.Attestor,\n \timageVerify kyvernov1.ImageVerification,\n \timage string,\n+\tattestation *kyvernov1.Attestation,\n ) (images.ImageVerifier, *images.Options, string) {\n \tpath := \"\"\n \topts := &images.Options{\n@@ -522,20 +538,38 @@ func (iv *ImageVerifier) buildNotaryV2Verifier(\n \t\tRegistryClient: iv.rclient,\n \t}\n \n-\treturn notaryv2.NewVerifier(), opts, path\n+\tif attestation != nil {\n+\t\topts.Type = attestation.Type\n+\t\topts.PredicateType = attestation.PredicateType\n+\t\tif attestation.PredicateType != \"\" && attestation.Type == \"\" {\n+\t\t\tiv.logger.Info(\"predicate type has been deprecated, please use type instead\")\n+\t\t\topts.Type = attestation.PredicateType\n+\t\t}\n+\t\topts.FetchAttestations = true\n+\t}\n+\n+\tif attestor.Repository != \"\" {\n+\t\topts.Repository = attestor.Repository\n+\t}\n+\n+\tif attestor.Annotations != nil {\n+\t\topts.Annotations = attestor.Annotations\n+\t}\n+\n+\treturn notary.NewVerifier(), opts, path\n }\n \n func (iv *ImageVerifier) verifyAttestation(statements []map[string]interface{}, attestation kyvernov1.Attestation, imageInfo apiutils.ImageInfo) error {\n-\tif attestation.PredicateType == \"\" {\n-\t\treturn fmt.Errorf(\"a predicateType is required\")\n+\tif attestation.Type == \"\" && attestation.PredicateType == \"\" {\n+\t\treturn fmt.Errorf(\"a type is required\")\n \t}\n \timage := imageInfo.String()\n \tstatementsByPredicate, types := buildStatementMap(statements)\n \tiv.logger.V(4).Info(\"checking attestations\", \"predicates\", types, \"image\", image)\n-\tstatements = statementsByPredicate[attestation.PredicateType]\n+\tstatements = statementsByPredicate[attestation.Type]\n \tif statements == nil {\n-\t\tiv.logger.Info(\"no attestations found for predicate\", \"type\", attestation.PredicateType, \"predicates\", types, \"image\", imageInfo.String())\n-\t\treturn fmt.Errorf(\"attestions not found for predicate type %s\", attestation.PredicateType)\n+\t\tiv.logger.Info(\"no attestations found for predicate\", \"type\", attestation.Type, \"predicates\", types, \"image\", imageInfo.String())\n+\t\treturn fmt.Errorf(\"attestions not found for predicate type %s\", attestation.Type)\n \t}\n \tfor _, s := range statements {\n \t\tiv.logger.Info(\"checking attestation\", \"predicates\", types, \"image\", imageInfo.String())\n@@ -544,7 +578,7 @@ func (iv *ImageVerifier) verifyAttestation(statements []map[string]interface{},\n \t\t\treturn fmt.Errorf(\"failed to check attestations: %w\", err)\n \t\t}\n \t\tif !val {\n-\t\t\treturn fmt.Errorf(\"attestation checks failed for %s and predicate %s: %s\", imageInfo.String(), attestation.PredicateType, msg)\n+\t\t\treturn fmt.Errorf(\"attestation checks failed for %s and predicate %s: %s\", imageInfo.String(), attestation.Type, msg)\n \t\t}\n \t}\n \treturn nil"
        },
        {
          "filename": "pkg/images/verifier.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -30,6 +30,7 @@ type Options struct {\n \tRekorURL             string\n \tSignatureAlgorithm   string\n \tPredicateType        string\n+\tType                 string\n \tIdentities           string\n }\n "
        },
        {
          "filename": "pkg/notary/notary.go",
          "status": "added",
          "additions": 348,
          "deletions": 0,
          "patch": "@@ -0,0 +1,348 @@\n+package notary\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\t\"github.com/go-logr/logr\"\n+\t\"github.com/google/go-containerregistry/pkg/crane\"\n+\t\"github.com/google/go-containerregistry/pkg/name\"\n+\tv1 \"github.com/google/go-containerregistry/pkg/v1\"\n+\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n+\t\"github.com/kyverno/kyverno/pkg/images\"\n+\t\"github.com/kyverno/kyverno/pkg/logging\"\n+\t_ \"github.com/notaryproject/notation-core-go/signature/cose\"\n+\t_ \"github.com/notaryproject/notation-core-go/signature/jws\"\n+\t\"github.com/notaryproject/notation-go\"\n+\t\"github.com/notaryproject/notation-go/verifier\"\n+\t\"github.com/notaryproject/notation-go/verifier/trustpolicy\"\n+\t\"github.com/opencontainers/go-digest\"\n+\tocispec \"github.com/opencontainers/image-spec/specs-go/v1\"\n+\t\"github.com/pkg/errors\"\n+\t\"github.com/sigstore/sigstore/pkg/cryptoutils\"\n+\t\"go.uber.org/multierr\"\n+)\n+\n+func NewVerifier() images.ImageVerifier {\n+\treturn &notaryVerifier{\n+\t\tlog: logging.WithName(\"Notary\"),\n+\t}\n+}\n+\n+type notaryVerifier struct {\n+\tlog logr.Logger\n+}\n+\n+func (v *notaryVerifier) VerifySignature(ctx context.Context, opts images.Options) (*images.Response, error) {\n+\tv.log.V(2).Info(\"verifying image\", \"reference\", opts.ImageRef)\n+\n+\tcertsPEM := combineCerts(opts)\n+\tcerts, err := cryptoutils.LoadCertificatesFromPEM(bytes.NewReader([]byte(certsPEM)))\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to parse certificates\")\n+\t}\n+\n+\ttrustStore := NewTrustStore(\"kyverno\", certs)\n+\tpolicyDoc := v.buildPolicy()\n+\tnotationVerifier, err := verifier.New(policyDoc, trustStore, nil)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to created verifier\")\n+\t}\n+\n+\tv.log.V(4).Info(\"creating notation repo\", \"reference\", opts.ImageRef)\n+\tparsedRef, err := parseReferenceCrane(ctx, opts.ImageRef, opts.RegistryClient)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to parse image reference: %s\", opts.ImageRef)\n+\t}\n+\tv.log.V(4).Info(\"created parsedRef\", \"reference\", opts.ImageRef)\n+\n+\tref := parsedRef.Ref.Name()\n+\tremoteVerifyOptions := notation.RemoteVerifyOptions{\n+\t\tArtifactReference:    ref,\n+\t\tMaxSignatureAttempts: 10,\n+\t}\n+\n+\ttargetDesc, outcomes, err := notation.Verify(context.TODO(), notationVerifier, parsedRef.Repo, remoteVerifyOptions)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to verify %s\", ref)\n+\t}\n+\n+\tif err := v.verifyOutcomes(outcomes); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tv.log.V(2).Info(\"verified image\", \"type\", targetDesc.MediaType, \"digest\", targetDesc.Digest, \"size\", targetDesc.Size)\n+\n+\tresp := &images.Response{\n+\t\tDigest:     targetDesc.Digest.String(),\n+\t\tStatements: nil,\n+\t}\n+\n+\treturn resp, nil\n+}\n+\n+func combineCerts(opts images.Options) string {\n+\tcerts := opts.Cert\n+\tif opts.CertChain != \"\" {\n+\t\tif certs != \"\" {\n+\t\t\tcerts = certs + \"\\n\"\n+\t\t}\n+\n+\t\tcerts = certs + opts.CertChain\n+\t}\n+\n+\treturn certs\n+}\n+\n+func (v *notaryVerifier) buildPolicy() *trustpolicy.Document {\n+\treturn &trustpolicy.Document{\n+\t\tVersion: \"1.0\",\n+\t\tTrustPolicies: []trustpolicy.TrustPolicy{\n+\t\t\t{\n+\t\t\t\tName:                  \"kyverno\",\n+\t\t\t\tRegistryScopes:        []string{\"*\"},\n+\t\t\t\tSignatureVerification: trustpolicy.SignatureVerification{VerificationLevel: trustpolicy.LevelStrict.Name},\n+\t\t\t\tTrustStores:           []string{\"ca:kyverno\"},\n+\t\t\t\tTrustedIdentities:     []string{\"*\"},\n+\t\t\t},\n+\t\t},\n+\t}\n+}\n+\n+func (v *notaryVerifier) verifyOutcomes(outcomes []*notation.VerificationOutcome) error {\n+\tvar errs []error\n+\tfor _, outcome := range outcomes {\n+\t\tif outcome.Error != nil {\n+\t\t\terrs = append(errs, outcome.Error)\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tcontent := outcome.EnvelopeContent.Payload.Content\n+\t\tcontentType := outcome.EnvelopeContent.Payload.ContentType\n+\n+\t\tv.log.V(2).Info(\"content\", \"type\", contentType, \"data\", content)\n+\t}\n+\n+\treturn multierr.Combine(errs...)\n+}\n+\n+func (v *notaryVerifier) FetchAttestations(ctx context.Context, opts images.Options) (*images.Response, error) {\n+\tv.log.V(2).Info(\"fetching attestations\", \"reference\", opts.ImageRef, \"opts\", opts)\n+\n+\tref, err := name.ParseReference(opts.ImageRef)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to parse image reference: %s\", opts.ImageRef)\n+\t}\n+\tauthenticator, err := getAuthenticator(ctx, opts.ImageRef, opts.RegistryClient)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to parse authenticator: %s\", opts.ImageRef)\n+\t}\n+\tcraneOpts := crane.WithAuth(*authenticator)\n+\n+\tremoteOpts, err := getRemoteOpts(*authenticator)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tv.log.V(4).Info(\"client setup done\", \"repo\", ref)\n+\n+\trepoDesc, err := crane.Head(opts.ImageRef, craneOpts)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tv.log.V(4).Info(\"fetched repository\", \"repoDesc\", repoDesc)\n+\n+\treferrers, err := remote.Referrers(ref.Context().Digest(repoDesc.Digest.String()), remoteOpts...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treferrersDescs, err := referrers.IndexManifest()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tv.log.V(4).Info(\"fetched referrers\", \"referrers\", referrersDescs)\n+\n+\tvar statements []map[string]interface{}\n+\n+\tfor _, referrer := range referrersDescs.Manifests {\n+\t\tmatch, _, err := matchArtifactType(referrer, opts.Type)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\n+\t\tif !match {\n+\t\t\tv.log.V(6).Info(\"type doesn't match, continue\", \"expected\", opts.Type, \"received\", referrer.ArtifactType)\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\ttargetDesc, err := verifyAttestators(ctx, v, ref, opts, referrer)\n+\t\tif err != nil {\n+\t\t\tmsg := err.Error()\n+\t\t\tv.log.V(4).Info(msg, \"failed to verify referrer %s\", targetDesc.Digest.String())\n+\t\t\treturn nil, err\n+\t\t}\n+\n+\t\tv.log.V(4).Info(\"extracting statements\", \"desc\", referrer, \"repo\", ref)\n+\t\tstatements, err = extractStatements(ctx, ref, referrer, craneOpts)\n+\t\tif err != nil {\n+\t\t\tmsg := err.Error()\n+\t\t\tv.log.V(4).Info(\"failed to extract statements %s\", \"err\", msg)\n+\t\t\treturn nil, err\n+\t\t}\n+\n+\t\tv.log.V(4).Info(\"verified attestators\", \"digest\", targetDesc.Digest.String())\n+\n+\t\tif len(statements) == 0 {\n+\t\t\treturn nil, fmt.Errorf(\"failed to fetch attestations\")\n+\t\t}\n+\t\tv.log.V(6).Info(\"sending response\")\n+\t\treturn &images.Response{Digest: repoDesc.Digest.String(), Statements: statements}, nil\n+\t}\n+\n+\treturn nil, fmt.Errorf(\"failed to fetch attestations %s\", err)\n+}\n+\n+func verifyAttestators(ctx context.Context, v *notaryVerifier, ref name.Reference, opts images.Options, desc v1.Descriptor) (ocispec.Descriptor, error) {\n+\tv.log.V(2).Info(\"verifying attestations\", \"reference\", opts.ImageRef, \"opts\", opts)\n+\tif opts.Cert == \"\" && opts.CertChain == \"\" {\n+\t\t// skips the checks when no attestor is provided\n+\t\tv1Desc := ocispec.Descriptor{\n+\t\t\tMediaType:   string(desc.MediaType),\n+\t\t\tSize:        desc.Size,\n+\t\t\tDigest:      digest.Digest(desc.Digest.String()),\n+\t\t\tURLs:        desc.URLs,\n+\t\t\tAnnotations: desc.Annotations,\n+\t\t\tData:        desc.Data,\n+\t\t}\n+\t\treturn v1Desc, nil\n+\t}\n+\tcertsPEM := combineCerts(opts)\n+\tcerts, err := cryptoutils.LoadCertificatesFromPEM(bytes.NewReader([]byte(certsPEM)))\n+\tif err != nil {\n+\t\tv.log.V(4).Info(\"failed to parse certificates\", \"err\", err)\n+\t\treturn ocispec.Descriptor{}, errors.Wrapf(err, \"failed to parse certificates\")\n+\t}\n+\n+\tv.log.V(4).Info(\"parsed certificates\")\n+\ttrustStore := NewTrustStore(\"kyverno\", certs)\n+\tpolicyDoc := v.buildPolicy()\n+\tnotationVerifier, err := verifier.New(policyDoc, trustStore, nil)\n+\tif err != nil {\n+\t\tv.log.V(4).Info(\"failed to created verifier\", \"err\", err)\n+\t\treturn ocispec.Descriptor{}, errors.Wrapf(err, \"failed to created verifier\")\n+\t}\n+\n+\tv.log.V(4).Info(\"created verifier\")\n+\treference := ref.Context().RegistryStr() + \"/\" + ref.Context().RepositoryStr() + \"@\" + desc.Digest.String()\n+\tparsedRef, err := parseReferenceCrane(ctx, reference, opts.RegistryClient)\n+\tif err != nil {\n+\t\treturn ocispec.Descriptor{}, errors.Wrapf(err, \"failed to parse image reference: %s\", opts.ImageRef)\n+\t}\n+\tv.log.V(4).Info(\"created notation repo\", \"reference\", opts.ImageRef)\n+\n+\tremoteVerifyOptions := notation.RemoteVerifyOptions{\n+\t\tArtifactReference:    reference,\n+\t\tMaxSignatureAttempts: 10,\n+\t}\n+\n+\tv.log.V(4).Info(\"verification started\")\n+\ttargetDesc, outcomes, err := notation.Verify(context.TODO(), notationVerifier, parsedRef.Repo, remoteVerifyOptions)\n+\tif err != nil {\n+\t\tv.log.V(4).Info(\"failed to vefify attestator\", \"remoteVerifyOptions\", remoteVerifyOptions, \"repo\", parsedRef.Repo)\n+\t\treturn targetDesc, err\n+\t}\n+\tif err := v.verifyOutcomes(outcomes); err != nil {\n+\t\treturn targetDesc, err\n+\t}\n+\n+\tif targetDesc.Digest.String() != desc.Digest.String() {\n+\t\tv.log.V(4).Info(\"digest mismatch\", \"expected\", desc.Digest.String(), \"found\", targetDesc.Digest.String())\n+\t\treturn targetDesc, errors.Errorf(\"digest mismatch\")\n+\t}\n+\tv.log.V(2).Info(\"attestator verified\", \"desc\", targetDesc.Digest.String())\n+\n+\treturn targetDesc, nil\n+}\n+\n+func extractStatements(ctx context.Context, repoRef name.Reference, desc v1.Descriptor, craneOpts ...crane.Option) ([]map[string]interface{}, error) {\n+\tstatements := make([]map[string]interface{}, 0)\n+\tdata, err := extractStatement(ctx, repoRef, desc, craneOpts...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tstatements = append(statements, data)\n+\n+\tif len(statements) == 0 {\n+\t\treturn nil, fmt.Errorf(\"no statements found\")\n+\t}\n+\treturn statements, nil\n+}\n+\n+func extractStatement(ctx context.Context, repoRef name.Reference, desc v1.Descriptor, craneOpts ...crane.Option) (map[string]interface{}, error) {\n+\trefStr := repoRef.Context().RegistryStr() + \"/\" + repoRef.Context().RepositoryStr() + \"@\" + desc.Digest.String()\n+\tref, err := name.ParseReference(refStr)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to parse image reference: %s\", refStr)\n+\t}\n+\n+\tmanifestBytes, err := crane.Manifest(refStr, craneOpts...)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"error in fetching statement: %w\", err)\n+\t}\n+\tvar manifest ocispec.Manifest\n+\tif err := json.Unmarshal(manifestBytes, &manifest); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tif len(manifest.Layers) == 0 {\n+\t\treturn nil, fmt.Errorf(\"no predicate found: %+v\", manifest)\n+\t}\n+\tif len(manifest.Layers) > 1 {\n+\t\treturn nil, fmt.Errorf(\"multiple layers in predicate not supported: %+v\", manifest)\n+\t}\n+\tpredicateDesc := manifest.Layers[0]\n+\tpredicateRef := ref.Context().RegistryStr() + \"/\" + ref.Context().RepositoryStr() + \"@\" + predicateDesc.Digest.String()\n+\n+\tlayer, err := crane.PullLayer(predicateRef, craneOpts...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tioPredicate, err := layer.Uncompressed()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tpredicateBytes := new(bytes.Buffer)\n+\t_, err = predicateBytes.ReadFrom(ioPredicate)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tpredicate := make(map[string]interface{})\n+\tif err := json.Unmarshal(predicateBytes.Bytes(), &predicate); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tdata := make(map[string]interface{})\n+\tif err := json.Unmarshal(manifestBytes, &data); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tif data[\"type\"] == nil {\n+\t\tdata[\"type\"] = desc.ArtifactType\n+\t}\n+\tif data[\"predicate\"] == nil {\n+\t\tdata[\"predicate\"] = predicate\n+\t}\n+\treturn data, nil\n+}\n+\n+func matchArtifactType(ref v1.Descriptor, expectedArtifactType string) (bool, string, error) {\n+\tif expectedArtifactType != \"\" {\n+\t\tif ref.ArtifactType == expectedArtifactType {\n+\t\t\treturn true, ref.ArtifactType, nil\n+\t\t}\n+\t}\n+\treturn false, \"\", nil\n+}"
        },
        {
          "filename": "pkg/notary/notary_test.go",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+package notary\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\n+\t\"github.com/google/go-containerregistry/pkg/crane\"\n+\t\"github.com/google/go-containerregistry/pkg/name\"\n+\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n+\t\"gotest.tools/assert\"\n+)\n+\n+func TestExtractStatements(t *testing.T) {\n+\timageRef := \"jimnotarytest.azurecr.io/jim/net-monitor:v1\"\n+\tref, err := name.ParseReference(imageRef)\n+\tassert.NilError(t, err)\n+\trepoDesc, err := crane.Head(imageRef)\n+\tassert.NilError(t, err)\n+\treferrers, err := remote.Referrers(ref.Context().Digest(repoDesc.Digest.String()))\n+\tassert.NilError(t, err)\n+\treferrersDescs, err := referrers.IndexManifest()\n+\tassert.NilError(t, err)\n+\n+\tfor _, referrer := range referrersDescs.Manifests {\n+\t\tif referrer.ArtifactType == \"application/vnd.cncf.notary.signature\" {\n+\t\t\tstatements, err := extractStatements(context.Background(), ref, referrer)\n+\t\t\tassert.NilError(t, err)\n+\t\t\tassert.Assert(t, len(statements) == 1)\n+\t\t\tassert.Assert(t, statements[0][\"type\"] == referrer.ArtifactType)\n+\t\t\tassert.Assert(t, statements[0][\"mediaType\"] == string(referrer.MediaType))\n+\t\t}\n+\t}\n+}"
        },
        {
          "filename": "pkg/notary/registry.go",
          "status": "added",
          "additions": 133,
          "deletions": 0,
          "patch": "@@ -0,0 +1,133 @@\n+package notary\n+\n+import (\n+\t\"context\"\n+\t\"strings\"\n+\n+\t\"github.com/google/go-containerregistry/pkg/authn\"\n+\t\"github.com/google/go-containerregistry/pkg/crane\"\n+\t\"github.com/google/go-containerregistry/pkg/name\"\n+\tgcrremote \"github.com/google/go-containerregistry/pkg/v1/remote\"\n+\t\"github.com/kyverno/kyverno/pkg/registryclient\"\n+\tnotationregistry \"github.com/notaryproject/notation-go/registry\"\n+\tocispec \"github.com/opencontainers/image-spec/specs-go/v1\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+type parsedReference struct {\n+\tRepo       notationregistry.Repository\n+\tCraneOpts  crane.Option\n+\tRemoteOpts []gcrremote.Option\n+\tRef        name.Reference\n+\tDesc       ocispec.Descriptor\n+}\n+\n+func parseReferenceCrane(ctx context.Context, ref string, registryClient registryclient.Client) (*parsedReference, error) {\n+\tnameRef, err := name.ParseReference(ref)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tauthenticator, err := getAuthenticator(ctx, ref, registryClient)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tcraneOpts := crane.WithAuth(*authenticator)\n+\tremoteOpts, err := getRemoteOpts(*authenticator)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tdesc, err := crane.Head(ref, craneOpts)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tif !isDigestReference(ref) {\n+\t\tnameRef, err = name.ParseReference(GetReferenceFromDescriptor(v1ToOciSpecDescriptor(*desc), nameRef))\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t}\n+\n+\trepository := NewRepository(craneOpts, remoteOpts, nameRef)\n+\terr = resolveDigestCrane(repository, craneOpts, remoteOpts, nameRef)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to resolve digest\")\n+\t}\n+\n+\treturn &parsedReference{\n+\t\tRepo:       repository,\n+\t\tCraneOpts:  craneOpts,\n+\t\tRemoteOpts: remoteOpts,\n+\t\tRef:        nameRef,\n+\t\tDesc:       v1ToOciSpecDescriptor(*desc),\n+\t}, nil\n+}\n+\n+type imageResource struct {\n+\tref name.Reference\n+}\n+\n+func (ir *imageResource) String() string {\n+\treturn ir.ref.Name()\n+}\n+\n+func (ir *imageResource) RegistryStr() string {\n+\treturn ir.ref.Context().RegistryStr()\n+}\n+\n+func getAuthenticator(ctx context.Context, ref string, registryClient registryclient.Client) (*authn.Authenticator, error) {\n+\tparsedRef, err := name.ParseReference(ref)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to parse registry reference %s\", ref)\n+\t}\n+\n+\tif err := registryClient.RefreshKeychainPullSecrets(ctx); err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to refresh image pull secrets\")\n+\t}\n+\n+\tauthn, err := registryClient.Keychain().Resolve(&imageResource{parsedRef})\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to resolve auth for %s\", parsedRef.String())\n+\t}\n+\treturn &authn, nil\n+}\n+\n+func isDigestReference(reference string) bool {\n+\tparts := strings.SplitN(reference, \"/\", 2)\n+\tif len(parts) == 1 {\n+\t\treturn false\n+\t}\n+\n+\tindex := strings.Index(parts[1], \"@\")\n+\treturn index != -1\n+}\n+\n+func getRemoteOpts(authenticator authn.Authenticator) ([]gcrremote.Option, error) {\n+\tremoteOpts := []gcrremote.Option{}\n+\tremoteOpts = append(remoteOpts, gcrremote.WithAuth(authenticator))\n+\n+\tpusher, err := gcrremote.NewPusher(remoteOpts...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tremoteOpts = append(remoteOpts, gcrremote.Reuse(pusher))\n+\n+\tpuller, err := gcrremote.NewPuller(remoteOpts...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\tremoteOpts = append(remoteOpts, gcrremote.Reuse(puller))\n+\n+\treturn remoteOpts, nil\n+}\n+\n+func resolveDigestCrane(repo notationregistry.Repository, craneOpts crane.Option, remoteOpts []gcrremote.Option, ref name.Reference) error {\n+\t_, err := repo.Resolve(context.Background(), ref.Name())\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}"
        },
        {
          "filename": "pkg/notary/repository.go",
          "status": "added",
          "additions": 127,
          "deletions": 0,
          "patch": "@@ -0,0 +1,127 @@\n+package notary\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\n+\t\"github.com/google/go-containerregistry/pkg/crane\"\n+\t\"github.com/google/go-containerregistry/pkg/name\"\n+\tv1 \"github.com/google/go-containerregistry/pkg/v1\"\n+\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n+\tnotationregistry \"github.com/notaryproject/notation-go/registry\"\n+\t\"github.com/opencontainers/go-digest\"\n+\tocispec \"github.com/opencontainers/image-spec/specs-go/v1\"\n+)\n+\n+type repositoryClient struct {\n+\tref        name.Reference\n+\tcraneOpts  crane.Option\n+\tremoteOpts []remote.Option\n+}\n+\n+func NewRepository(craneOpts crane.Option, remoteOpts []remote.Option, ref name.Reference) notationregistry.Repository {\n+\treturn &repositoryClient{\n+\t\tcraneOpts:  craneOpts,\n+\t\tremoteOpts: remoteOpts,\n+\t\tref:        ref,\n+\t}\n+}\n+\n+func (c *repositoryClient) Resolve(ctx context.Context, reference string) (ocispec.Descriptor, error) {\n+\thead, err := crane.Head(reference)\n+\tif err != nil {\n+\t\treturn ocispec.Descriptor{}, nil\n+\t}\n+\tdescriptor := v1ToOciSpecDescriptor(*head)\n+\treturn descriptor, nil\n+}\n+\n+func (c *repositoryClient) ListSignatures(ctx context.Context, desc ocispec.Descriptor, fn func(signatureManifests []ocispec.Descriptor) error) error {\n+\treferrers, err := remote.Referrers(c.ref.Context().Digest(desc.Digest.String()), c.remoteOpts...)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\treferrersDescs, err := referrers.IndexManifest()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tdescList := []ocispec.Descriptor{}\n+\tfor _, d := range referrersDescs.Manifests {\n+\t\tif d.ArtifactType == notationregistry.ArtifactTypeNotation {\n+\t\t\tdescList = append(descList, v1ToOciSpecDescriptor(d))\n+\t\t}\n+\t}\n+\n+\treturn fn(descList)\n+}\n+\n+func (c *repositoryClient) FetchSignatureBlob(ctx context.Context, desc ocispec.Descriptor) ([]byte, ocispec.Descriptor, error) {\n+\tmanifestRef := c.getReferenceFromDescriptor(desc)\n+\n+\tmanifestBytes, err := crane.Manifest(manifestRef)\n+\tif err != nil {\n+\t\treturn nil, ocispec.Descriptor{}, err\n+\t}\n+\n+\tvar manifest ocispec.Manifest\n+\tif err := json.Unmarshal(manifestBytes, &manifest); err != nil {\n+\t\treturn nil, ocispec.Descriptor{}, err\n+\t}\n+\tmanifestDesc := manifest.Layers[0]\n+\n+\tsignatureBlobRef := c.getReferenceFromDescriptor(manifestDesc)\n+\n+\tsignatureBlobLayer, err := crane.PullLayer(signatureBlobRef)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\n+\tio, err := signatureBlobLayer.Uncompressed()\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tSigBlobBuf := new(bytes.Buffer)\n+\n+\t_, err = SigBlobBuf.ReadFrom(io)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\treturn SigBlobBuf.Bytes(), manifestDesc, nil\n+}\n+\n+func (c *repositoryClient) PushSignature(ctx context.Context, mediaType string, blob []byte, subject ocispec.Descriptor, annotations map[string]string) (blobDesc, manifestDesc ocispec.Descriptor, err error) {\n+\treturn ocispec.Descriptor{}, ocispec.Descriptor{}, fmt.Errorf(\"push signature is not implemented\")\n+}\n+\n+func v1ToOciSpecDescriptor(v1desc v1.Descriptor) ocispec.Descriptor {\n+\tociDesc := ocispec.Descriptor{\n+\t\tMediaType:   string(v1desc.MediaType),\n+\t\tDigest:      digest.Digest(v1desc.Digest.String()),\n+\t\tSize:        v1desc.Size,\n+\t\tURLs:        v1desc.URLs,\n+\t\tAnnotations: v1desc.Annotations,\n+\t\tData:        v1desc.Data,\n+\n+\t\tArtifactType: v1desc.ArtifactType,\n+\t}\n+\tif v1desc.Platform != nil {\n+\t\tociDesc.Platform = &ocispec.Platform{\n+\t\t\tArchitecture: v1desc.Platform.Architecture,\n+\t\t\tOS:           v1desc.Platform.OS,\n+\t\t\tOSVersion:    v1desc.Platform.OSVersion,\n+\t\t}\n+\t}\n+\treturn ociDesc\n+}\n+\n+func (c *repositoryClient) getReferenceFromDescriptor(desc ocispec.Descriptor) string {\n+\treturn GetReferenceFromDescriptor(desc, c.ref)\n+}\n+\n+func GetReferenceFromDescriptor(desc ocispec.Descriptor, ref name.Reference) string {\n+\treturn ref.Context().RegistryStr() + \"/\" + ref.Context().RepositoryStr() + \"@\" + desc.Digest.String()\n+}"
        },
        {
          "filename": "pkg/notary/truststore.go",
          "status": "renamed",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-package notaryv2\n+package notary\n \n import (\n \t\"context\""
        },
        {
          "filename": "pkg/notaryv2/notaryv2.go",
          "status": "removed",
          "additions": 0,
          "deletions": 132,
          "patch": "@@ -1,132 +0,0 @@\n-package notaryv2\n-\n-import (\n-\t\"bytes\"\n-\t\"context\"\n-\n-\t\"github.com/go-logr/logr\"\n-\t\"github.com/kyverno/kyverno/pkg/images\"\n-\t\"github.com/kyverno/kyverno/pkg/logging\"\n-\t_ \"github.com/notaryproject/notation-core-go/signature/cose\"\n-\t_ \"github.com/notaryproject/notation-core-go/signature/jws\"\n-\t\"github.com/notaryproject/notation-go\"\n-\t\"github.com/notaryproject/notation-go/verifier\"\n-\t\"github.com/notaryproject/notation-go/verifier/trustpolicy\"\n-\t\"github.com/pkg/errors\"\n-\t\"github.com/sigstore/sigstore/pkg/cryptoutils\"\n-\t\"go.uber.org/multierr\"\n-)\n-\n-func NewVerifier() images.ImageVerifier {\n-\treturn &notaryV2Verifier{\n-\t\tlog: logging.WithName(\"NotaryV2\"),\n-\t}\n-}\n-\n-type notaryV2Verifier struct {\n-\tlog logr.Logger\n-}\n-\n-func (v *notaryV2Verifier) VerifySignature(ctx context.Context, opts images.Options) (*images.Response, error) {\n-\tv.log.V(2).Info(\"verifying image\", \"reference\", opts.ImageRef)\n-\n-\tcertsPEM := combineCerts(opts)\n-\tcerts, err := cryptoutils.LoadCertificatesFromPEM(bytes.NewReader([]byte(certsPEM)))\n-\tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"failed to parse certificates\")\n-\t}\n-\n-\ttrustStore := NewTrustStore(\"kyverno\", certs)\n-\tpolicyDoc := v.buildPolicy()\n-\tnotationVerifier, err := verifier.New(policyDoc, trustStore, nil)\n-\tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"failed to created verifier\")\n-\t}\n-\n-\trepo, parsedRef, err := parseReference(ctx, opts.ImageRef, opts.RegistryClient)\n-\tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"failed to parse image reference: %s\", opts.ImageRef)\n-\t}\n-\n-\tdigest, err := parsedRef.Digest()\n-\tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"failed to fetch digest\")\n-\t}\n-\n-\tref := parsedRef.String()\n-\tremoteVerifyOptions := notation.RemoteVerifyOptions{\n-\t\tArtifactReference:    ref,\n-\t\tMaxSignatureAttempts: 10,\n-\t}\n-\n-\ttargetDesc, outcomes, err := notation.Verify(context.TODO(), notationVerifier, repo, remoteVerifyOptions)\n-\tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"failed to verify %s\", ref)\n-\t}\n-\n-\tif err := v.verifyOutcomes(outcomes); err != nil {\n-\t\treturn nil, err\n-\t}\n-\n-\tif targetDesc.Digest != digest {\n-\t\treturn nil, errors.Errorf(\"digest mismatch\")\n-\t}\n-\n-\tv.log.V(2).Info(\"verified image\", \"type\", targetDesc.MediaType, \"digest\", targetDesc.Digest, \"size\", targetDesc.Size)\n-\n-\tresp := &images.Response{\n-\t\tDigest:     targetDesc.Digest.String(),\n-\t\tStatements: nil,\n-\t}\n-\n-\treturn resp, nil\n-}\n-\n-func combineCerts(opts images.Options) string {\n-\tcerts := opts.Cert\n-\tif opts.CertChain != \"\" {\n-\t\tif certs != \"\" {\n-\t\t\tcerts = certs + \"\\n\"\n-\t\t}\n-\n-\t\tcerts = certs + opts.CertChain\n-\t}\n-\n-\treturn certs\n-}\n-\n-func (v *notaryV2Verifier) buildPolicy() *trustpolicy.Document {\n-\treturn &trustpolicy.Document{\n-\t\tVersion: \"1.0\",\n-\t\tTrustPolicies: []trustpolicy.TrustPolicy{\n-\t\t\t{\n-\t\t\t\tName:                  \"kyverno\",\n-\t\t\t\tRegistryScopes:        []string{\"*\"},\n-\t\t\t\tSignatureVerification: trustpolicy.SignatureVerification{VerificationLevel: trustpolicy.LevelStrict.Name},\n-\t\t\t\tTrustStores:           []string{\"ca:kyverno\"},\n-\t\t\t\tTrustedIdentities:     []string{\"*\"},\n-\t\t\t},\n-\t\t},\n-\t}\n-}\n-\n-func (v *notaryV2Verifier) verifyOutcomes(outcomes []*notation.VerificationOutcome) error {\n-\tvar errs []error\n-\tfor _, outcome := range outcomes {\n-\t\tif outcome.Error != nil {\n-\t\t\terrs = append(errs, outcome.Error)\n-\t\t\tcontinue\n-\t\t}\n-\n-\t\tcontent := outcome.EnvelopeContent.Payload.Content\n-\t\tcontentType := outcome.EnvelopeContent.Payload.ContentType\n-\n-\t\tv.log.Info(\"content\", \"type\", contentType, \"data\", content)\n-\t}\n-\n-\treturn multierr.Combine(errs...)\n-}\n-\n-func (v *notaryV2Verifier) FetchAttestations(ctx context.Context, opts images.Options) (*images.Response, error) {\n-\treturn nil, errors.Errorf(\"not implemented\")\n-}"
        },
        {
          "filename": "pkg/notaryv2/registry.go",
          "status": "removed",
          "additions": 0,
          "deletions": 125,
          "patch": "@@ -1,125 +0,0 @@\n-package notaryv2\n-\n-import (\n-\t\"context\"\n-\t\"strings\"\n-\n-\t\"github.com/kyverno/kyverno/pkg/registryclient\"\n-\tnotationregistry \"github.com/notaryproject/notation-go/registry\"\n-\tocispec \"github.com/opencontainers/image-spec/specs-go/v1\"\n-\t\"github.com/pkg/errors\"\n-\t\"oras.land/oras-go/v2/registry\"\n-\t\"oras.land/oras-go/v2/registry/remote\"\n-\t\"oras.land/oras-go/v2/registry/remote/auth\"\n-)\n-\n-func parseReference(ctx context.Context, ref string, registryClient registryclient.Client) (notationregistry.Repository, registry.Reference, error) {\n-\tparsedRef, err := registry.ParseReference(ref)\n-\tif err != nil {\n-\t\treturn nil, registry.Reference{}, errors.Wrapf(err, \"failed to parse registry reference %s\", ref)\n-\t}\n-\n-\tauthClient, plainHTTP, err := getAuthClient(ctx, parsedRef, registryClient)\n-\tif err != nil {\n-\t\treturn nil, registry.Reference{}, err\n-\t}\n-\n-\trepo, err := remote.NewRepository(ref)\n-\tif err != nil {\n-\t\treturn nil, registry.Reference{}, errors.Wrapf(err, \"failed to initialize repository\")\n-\t}\n-\n-\trepo.PlainHTTP = plainHTTP\n-\trepo.Client = authClient\n-\trepository := notationregistry.NewRepository(repo)\n-\n-\tparsedRef, err = resolveDigest(repository, parsedRef)\n-\tif err != nil {\n-\t\treturn nil, registry.Reference{}, errors.Wrapf(err, \"failed to resolve digest\")\n-\t}\n-\n-\treturn repository, parsedRef, nil\n-}\n-\n-type imageResource struct {\n-\tref registry.Reference\n-}\n-\n-func (ir *imageResource) String() string {\n-\treturn ir.ref.String()\n-}\n-\n-func (ir *imageResource) RegistryStr() string {\n-\treturn ir.ref.Registry\n-}\n-\n-func getAuthClient(ctx context.Context, ref registry.Reference, rc registryclient.Client) (*auth.Client, bool, error) {\n-\tif err := rc.RefreshKeychainPullSecrets(ctx); err != nil {\n-\t\treturn nil, false, errors.Wrapf(err, \"failed to refresh image pull secrets\")\n-\t}\n-\n-\tauthn, err := rc.Keychain().Resolve(&imageResource{ref})\n-\tif err != nil {\n-\t\treturn nil, false, errors.Wrapf(err, \"failed to resolve auth for %s\", ref.String())\n-\t}\n-\n-\tauthConfig, err := authn.Authorization()\n-\tif err != nil {\n-\t\treturn nil, false, errors.Wrapf(err, \"failed to get auth config for %s\", ref.String())\n-\t}\n-\n-\tcredentials := auth.Credential{\n-\t\tUsername:     authConfig.Username,\n-\t\tPassword:     authConfig.Password,\n-\t\tAccessToken:  authConfig.IdentityToken,\n-\t\tRefreshToken: authConfig.RegistryToken,\n-\t}\n-\n-\tauthClient := &auth.Client{\n-\t\tCredential: func(ctx context.Context, registry string) (auth.Credential, error) {\n-\t\t\tswitch registry {\n-\t\t\tdefault:\n-\t\t\t\treturn credentials, nil\n-\t\t\t}\n-\t\t},\n-\t\tCache:    auth.NewCache(),\n-\t\tClientID: \"notation\",\n-\t}\n-\n-\tauthClient.SetUserAgent(\"kyverno.io\")\n-\treturn authClient, false, nil\n-}\n-\n-func resolveDigest(repo notationregistry.Repository, ref registry.Reference) (registry.Reference, error) {\n-\tif isDigestReference(ref.String()) {\n-\t\treturn ref, nil\n-\t}\n-\n-\t// Resolve tag reference to digest reference.\n-\tmanifestDesc, err := getManifestDescriptorFromReference(repo, ref.String())\n-\tif err != nil {\n-\t\treturn registry.Reference{}, err\n-\t}\n-\n-\tref.Reference = manifestDesc.Digest.String()\n-\treturn ref, nil\n-}\n-\n-func isDigestReference(reference string) bool {\n-\tparts := strings.SplitN(reference, \"/\", 2)\n-\tif len(parts) == 1 {\n-\t\treturn false\n-\t}\n-\n-\tindex := strings.Index(parts[1], \"@\")\n-\treturn index != -1\n-}\n-\n-func getManifestDescriptorFromReference(repo notationregistry.Repository, reference string) (ocispec.Descriptor, error) {\n-\tref, err := registry.ParseReference(reference)\n-\tif err != nil {\n-\t\treturn ocispec.Descriptor{}, err\n-\t}\n-\n-\treturn repo.Resolve(context.Background(), ref.ReferenceOrDefault())\n-}"
        },
        {
          "filename": "pkg/validation/policy/validate.go",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -364,6 +364,10 @@ func Validate(policy, oldPolicy kyvernov1.PolicyInterface, client dclient.Interf\n \t\t\tcheckForScaleSubresource(mutationJson, allKinds, &warnings)\n \t\t\tcheckForStatusSubresource(mutationJson, allKinds, &warnings)\n \t\t}\n+\n+\t\tif rule.HasVerifyImages() {\n+\t\t\tcheckForDeprecatedFieldsInVerifyImages(rule, &warnings)\n+\t\t}\n \t}\n \tif !mock && (spec.SchemaValidation == nil || *spec.SchemaValidation) {\n \t\tif err := openApiManager.ValidatePolicyMutation(policy); err != nil {\n@@ -1301,3 +1305,14 @@ func checkForStatusSubresource(ruleTypeJson []byte, allKinds []string, warnings\n \t\t*warnings = append(*warnings, msg)\n \t}\n }\n+\n+func checkForDeprecatedFieldsInVerifyImages(rule kyvernov1.Rule, warnings *[]string) {\n+\tfor _, imageVerify := range rule.VerifyImages {\n+\t\tfor _, attestation := range imageVerify.Attestations {\n+\t\t\tif attestation.PredicateType != \"\" {\n+\t\t\t\tmsg := fmt.Sprintf(\"predicateType has been deprecated use 'type: %s' instead of 'prediacteType: %s'\", attestation.PredicateType, attestation.PredicateType)\n+\t\t\t\t*warnings = append(*warnings, msg)\n+\t\t\t}\n+\t\t}\n+\t}\n+}"
        },
        {
          "filename": "test/conformance/kuttl/flags/standard/emit-events/admission-controller-assert.yaml",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -1,9 +1,8 @@\n-apiVersion: kyverno.io/v1\n-kind: Policy\n+apiVersion: apps/v1\n+kind: Deployment\n metadata:\n   name: kyverno-admission-controller\n+  namespace: kyverno\n status:\n-  conditions:\n-    - reason: Succeeded\n-      status: \"True\"\n-      type: Ready\n+  readyReplicas: 1\n+  updatedReplicas: 1\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-attestation-verification/01-policy.yaml",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+apiVersion: kuttl.dev/v1beta1\n+kind: TestStep\n+apply:\n+- policy.yaml\n+assert:\n+- policy-ready.yaml\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-attestation-verification/02-resource.yaml",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+apiVersion: kuttl.dev/v1beta1\n+kind: TestStep\n+apply:\n+- pod.yaml\n+assert:\n+- pod-assert.yaml\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-attestation-verification/README.md",
          "status": "added",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -0,0 +1,12 @@\n+## Description\n+\n+This test verifies image attestations using notary signatures\n+\n+## Expected Behavior\n+\n+This test creates a cluster policy.\n+When a pod is created with the image reference and the signature on attestations matches, the pod creation is successful\n+\n+## Reference Issue(s)\n+\n+6142"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-attestation-verification/pod-assert.yaml",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+apiVersion: v1\n+kind: Pod\n+metadata:\n+  name: test\n+  namespace: notary-verify-attestation\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-attestation-verification/pod.yaml",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+apiVersion: v1\n+kind: Pod\n+metadata:\n+  creationTimestamp: null\n+  labels:\n+    run: test\n+  name: test\n+  namespace: notary-verify-attestation\n+spec:\n+  containers:\n+  - image: ghcr.io/kyverno/test-verify-image:signed\n+    name: test\n+    resources: {}\n+  dnsPolicy: ClusterFirst\n+  restartPolicy: Always\n+status: {}\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-attestation-verification/policy-ready.yaml",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+apiVersion: kyverno.io/v2beta1\n+kind: ClusterPolicy\n+metadata:\n+  name: check-image-attestation\n+status:\n+  conditions:\n+  - reason: Succeeded\n+    status: \"True\"\n+    type: Ready\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-attestation-verification/policy.yaml",
          "status": "added",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -0,0 +1,63 @@\n+apiVersion: v1\n+kind: Namespace\n+metadata:\n+  name: notary-verify-attestation\n+---\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: keys\n+  namespace: notary-verify-attestation\n+data:\n+  certificate: |-\n+    -----BEGIN CERTIFICATE-----\n+    MIIDTTCCAjWgAwIBAgIJAPI+zAzn4s0xMA0GCSqGSIb3DQEBCwUAMEwxCzAJBgNV\n+    BAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwG\n+    Tm90YXJ5MQ0wCwYDVQQDDAR0ZXN0MB4XDTIzMDUyMjIxMTUxOFoXDTMzMDUxOTIx\n+    MTUxOFowTDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldBMRAwDgYDVQQHDAdTZWF0\n+    dGxlMQ8wDQYDVQQKDAZOb3RhcnkxDTALBgNVBAMMBHRlc3QwggEiMA0GCSqGSIb3\n+    DQEBAQUAA4IBDwAwggEKAoIBAQDNhTwv+QMk7jEHufFfIFlBjn2NiJaYPgL4eBS+\n+    b+o37ve5Zn9nzRppV6kGsa161r9s2KkLXmJrojNy6vo9a6g6RtZ3F6xKiWLUmbAL\n+    hVTCfYw/2n7xNlVMjyyUpE+7e193PF8HfQrfDFxe2JnX5LHtGe+X9vdvo2l41R6m\n+    Iia04DvpMdG4+da2tKPzXIuLUz/FDb6IODO3+qsqQLwEKmmUee+KX+3yw8I6G1y0\n+    Vp0mnHfsfutlHeG8gazCDlzEsuD4QJ9BKeRf2Vrb0ywqNLkGCbcCWF2H5Q80Iq/f\n+    ETVO9z88R7WheVdEjUB8UrY7ZMLdADM14IPhY2Y+tLaSzEVZAgMBAAGjMjAwMAkG\n+    A1UdEwQCMAAwDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMA0G\n+    CSqGSIb3DQEBCwUAA4IBAQBX7x4Ucre8AIUmXZ5PUK/zUBVOrZZzR1YE8w86J4X9\n+    kYeTtlijf9i2LTZMfGuG0dEVFN4ae3CCpBst+ilhIndnoxTyzP+sNy4RCRQ2Y/k8\n+    Zq235KIh7uucq96PL0qsF9s2RpTKXxyOGdtp9+HO0Ty5txJE2txtLDUIVPK5WNDF\n+    ByCEQNhtHgN6V20b8KU2oLBZ9vyB8V010dQz0NRTDLhkcvJig00535/LUylECYAJ\n+    5/jn6XKt6UYCQJbVNzBg/YPGc1RF4xdsGVDBben/JXpeGEmkdmXPILTKd9tZ5TC0\n+    uOKpF5rWAruB5PCIrquamOejpXV9aQA/K2JQDuc0mcKz\n+    -----END CERTIFICATE-----\n+---\n+apiVersion: kyverno.io/v1\n+kind: ClusterPolicy\n+metadata:\n+  name: check-image-attestation\n+spec:\n+  validationFailureAction: Enforce\n+  webhookTimeoutSeconds: 30\n+  failurePolicy: Fail  \n+  rules:\n+    - name: verify-attestation-notary\n+      match:\n+        any:\n+        - resources:\n+            kinds:\n+              - Pod\n+      context:\n+      - name: keys\n+        configMap:\n+          name: keys\n+          namespace: notary-verify-attestation\n+      verifyImages:\n+      - type: Notary\n+        imageReferences:\n+          - \"ghcr.io/kyverno/test-verify-image*\"\n+        attestations:\n+          - type: sbom/cyclone-dx\n+            attestors:\n+            - entries:\n+              - certificates: \n+                  cert: \"{{ keys.data.certificate }}\"\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-image-verification/01-policy.yaml",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+apiVersion: kuttl.dev/v1beta1\n+kind: TestStep\n+apply:\n+- policy.yaml\n+assert:\n+- policy-ready.yaml\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-image-verification/02-resource.yaml",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+apiVersion: kuttl.dev/v1beta1\n+kind: TestStep\n+apply:\n+- pod.yaml\n+assert:\n+- pod-assert.yaml\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-image-verification/README.md",
          "status": "added",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -0,0 +1,12 @@\n+## Description\n+\n+This test verifies images using notary signatures\n+\n+## Expected Behavior\n+\n+This test creates a cluster policy.\n+When a pod is created with the image reference and the signature matches, the pod creation is successful\n+\n+## Reference Issue(s)\n+\n+6142"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-image-verification/pod-assert.yaml",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+apiVersion: v1\n+kind: Pod\n+metadata:\n+  name: test\n+  namespace: notary-verify-images\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-image-verification/pod.yaml",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+apiVersion: v1\n+kind: Pod\n+metadata:\n+  creationTimestamp: null\n+  labels:\n+    run: test\n+  name: test\n+  namespace: notary-verify-images\n+spec:\n+  containers:\n+  - image: ghcr.io/kyverno/test-verify-image:signed\n+    name: test\n+    resources: {}\n+  dnsPolicy: ClusterFirst\n+  restartPolicy: Always\n+status: {}\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-image-verification/policy-ready.yaml",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+apiVersion: kyverno.io/v2beta1\n+kind: ClusterPolicy\n+metadata:\n+  name: check-image-notary\n+status:\n+  conditions:\n+  - reason: Succeeded\n+    status: \"True\"\n+    type: Ready\n\\ No newline at end of file"
        },
        {
          "filename": "test/conformance/kuttl/verifyImages/clusterpolicy/standard/notary-image-verification/policy.yaml",
          "status": "added",
          "additions": 62,
          "deletions": 0,
          "patch": "@@ -0,0 +1,62 @@\n+apiVersion: v1\n+kind: Namespace\n+metadata:\n+  name: notary-verify-images\n+---\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: keys\n+  namespace: notary-verify-images\n+data:\n+  certificate: |-\n+    -----BEGIN CERTIFICATE-----\n+    MIIDTTCCAjWgAwIBAgIJAPI+zAzn4s0xMA0GCSqGSIb3DQEBCwUAMEwxCzAJBgNV\n+    BAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwG\n+    Tm90YXJ5MQ0wCwYDVQQDDAR0ZXN0MB4XDTIzMDUyMjIxMTUxOFoXDTMzMDUxOTIx\n+    MTUxOFowTDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldBMRAwDgYDVQQHDAdTZWF0\n+    dGxlMQ8wDQYDVQQKDAZOb3RhcnkxDTALBgNVBAMMBHRlc3QwggEiMA0GCSqGSIb3\n+    DQEBAQUAA4IBDwAwggEKAoIBAQDNhTwv+QMk7jEHufFfIFlBjn2NiJaYPgL4eBS+\n+    b+o37ve5Zn9nzRppV6kGsa161r9s2KkLXmJrojNy6vo9a6g6RtZ3F6xKiWLUmbAL\n+    hVTCfYw/2n7xNlVMjyyUpE+7e193PF8HfQrfDFxe2JnX5LHtGe+X9vdvo2l41R6m\n+    Iia04DvpMdG4+da2tKPzXIuLUz/FDb6IODO3+qsqQLwEKmmUee+KX+3yw8I6G1y0\n+    Vp0mnHfsfutlHeG8gazCDlzEsuD4QJ9BKeRf2Vrb0ywqNLkGCbcCWF2H5Q80Iq/f\n+    ETVO9z88R7WheVdEjUB8UrY7ZMLdADM14IPhY2Y+tLaSzEVZAgMBAAGjMjAwMAkG\n+    A1UdEwQCMAAwDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMDMA0G\n+    CSqGSIb3DQEBCwUAA4IBAQBX7x4Ucre8AIUmXZ5PUK/zUBVOrZZzR1YE8w86J4X9\n+    kYeTtlijf9i2LTZMfGuG0dEVFN4ae3CCpBst+ilhIndnoxTyzP+sNy4RCRQ2Y/k8\n+    Zq235KIh7uucq96PL0qsF9s2RpTKXxyOGdtp9+HO0Ty5txJE2txtLDUIVPK5WNDF\n+    ByCEQNhtHgN6V20b8KU2oLBZ9vyB8V010dQz0NRTDLhkcvJig00535/LUylECYAJ\n+    5/jn6XKt6UYCQJbVNzBg/YPGc1RF4xdsGVDBben/JXpeGEmkdmXPILTKd9tZ5TC0\n+    uOKpF5rWAruB5PCIrquamOejpXV9aQA/K2JQDuc0mcKz\n+    -----END CERTIFICATE-----\n+---\n+apiVersion: kyverno.io/v2beta1\n+kind: ClusterPolicy\n+metadata:\n+  name: check-image-notary\n+spec:\n+  validationFailureAction: Enforce\n+  webhookTimeoutSeconds: 30\n+  failurePolicy: Fail  \n+  rules:\n+    - name: verify-signature-notary\n+      context:\n+      - name: keys\n+        configMap:\n+          name: keys\n+          namespace: notary-verify-images\n+      match:\n+        any:\n+        - resources:\n+            kinds:\n+              - Pod\n+      verifyImages:\n+      - type: Notary\n+        imageReferences:\n+        - \"ghcr.io/kyverno/test-verify-image*\"\n+        attestors:\n+        - count: 1\n+          entries:\n+          - certificates:\n+              cert: \"{{ keys.data.certificate }}\"\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 17,
        "unique_directories": 18,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c0d7df709abf3932a0dcfc5b6a97d14593455651",
            "date": "2025-01-14T15:36:09Z",
            "author_login": "fjogeleit"
          },
          {
            "sha": "6af7ab89058a79f6a6ed56da3c9dcd74f209d5b6",
            "date": "2025-01-14T14:57:55Z",
            "author_login": "eddycharly"
          },
          {
            "sha": "4678078c3dae5cea2745cf9e8ad9855279c32a32",
            "date": "2025-01-14T13:16:29Z",
            "author_login": "MariamFahmy98"
          },
          {
            "sha": "9177c57b21e4da462dfcb297bb6ce032924de120",
            "date": "2025-01-14T09:41:18Z",
            "author_login": "eddycharly"
          },
          {
            "sha": "34bc3994a3d97d8a42f4b6a455f11fdee802a0b3",
            "date": "2025-01-14T08:04:48Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-835",
    "description": "Kyverno is a policy engine designed for Kubernetes. A security vulnerability was found in Kyverno where an attacker could cause denial of service of Kyverno. The vulnerability was in Kyvernos Notary verifier. An attacker would need control over the registry from which Kyverno would fetch signatures. With such a position, the attacker could return a malicious response to Kyverno, when Kyverno would send a request to the registry. The malicious response would cause denial of service of Kyverno, such that other users' admission requests would be blocked from being processed. This is a vulnerability in a new component released in v1.11.0. The only users affected by this are those that have been building Kyverno from source at the main branch which is not encouraged. Users consuming official Kyverno releases are not affected. There are no known cases of this vulnerability being exploited in the wild.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-11-13T21:15:07.940",
    "last_modified": "2024-11-21T08:23:16.233",
    "fix_date": "2023-06-01T08:05:28Z"
  },
  "references": [
    {
      "url": "https://github.com/kyverno/kyverno/commit/80d139bb5d1d9d7e907abe851b97dc73821a5be2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/kyverno/kyverno/commit/fec2992e3f9fcd6b9c62267522c09b182e7df73b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/kyverno/kyverno/pull/8428",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/kyverno/kyverno/security/advisories/GHSA-hjpv-68f4-2262",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/kyverno/kyverno/commit/80d139bb5d1d9d7e907abe851b97dc73821a5be2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/kyverno/kyverno/commit/fec2992e3f9fcd6b9c62267522c09b182e7df73b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/kyverno/kyverno/pull/8428",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/kyverno/kyverno/security/advisories/GHSA-hjpv-68f4-2262",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.252095",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "kyverno",
    "owner": "kyverno",
    "created_at": "2019-02-04T16:25:48Z",
    "updated_at": "2025-01-14T13:24:51Z",
    "pushed_at": "2025-01-14T13:16:30Z",
    "size": 131887,
    "stars": 5948,
    "forks": 918,
    "open_issues": 332,
    "watchers": 5948,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-1.5",
      "release-1.6",
      "release-1.7",
      "release-1.8",
      "release-1.9",
      "release-1.10",
      "release-1.11",
      "release-1.12",
      "release-1.13"
    ],
    "languages": {
      "Go": 7072454,
      "Makefile": 51548,
      "Shell": 27877,
      "Mustache": 24900,
      "Dockerfile": 1720
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:53:11.326551"
  }
}