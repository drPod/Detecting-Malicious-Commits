{
  "cve_id": "CVE-2023-42819",
  "github_data": {
    "repository": "jumpserver/jumpserver",
    "fix_commit": "d0321a74f1713d031560341c8fd0a1859e6510d8",
    "related_commits": [
      "d0321a74f1713d031560341c8fd0a1859e6510d8",
      "d0321a74f1713d031560341c8fd0a1859e6510d8"
    ],
    "patch_url": "https://github.com/jumpserver/jumpserver/commit/d0321a74f1713d031560341c8fd0a1859e6510d8.patch",
    "fix_commit_details": {
      "sha": "d0321a74f1713d031560341c8fd0a1859e6510d8",
      "commit_date": "2023-09-19T10:04:24Z",
      "author": {
        "login": "Aaron3S",
        "type": "User",
        "stats": {
          "total_commits": 215,
          "average_weekly_commits": 0.39019963702359345,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 51
        }
      },
      "commit_message": {
        "title": "perf: \u4f18\u5316 Playbook \u6587\u4ef6\u521b\u5efa\u903b\u8f91",
        "length": 24,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 90,
        "additions": 52,
        "deletions": 38
      },
      "files": [
        {
          "filename": "apps/ops/api/playbook.py",
          "status": "modified",
          "additions": 52,
          "deletions": 38,
          "patch": "@@ -3,6 +3,7 @@\n import zipfile\n \n from django.conf import settings\n+from django.core.exceptions import SuspiciousFileOperation\n from django.shortcuts import get_object_or_404\n from django.utils.translation import gettext_lazy as _\n from rest_framework import status\n@@ -18,6 +19,7 @@\n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n+from django.utils._os import safe_join\n \n \n def unzip_playbook(src, dist):\n@@ -37,7 +39,7 @@ def perform_destroy(self, instance):\n             raise JMSException(code='playbook_has_job', detail={\"msg\": _(\"Currently playbook is being used in a job\")})\n         instance_id = instance.id\n         super().perform_destroy(instance)\n-        dest_path = os.path.join(settings.DATA_DIR, \"ops\", \"playbook\", instance_id.__str__())\n+        dest_path = safe_join(settings.DATA_DIR, \"ops\", \"playbook\", instance_id.__str__())\n         shutil.rmtree(dest_path)\n \n     def get_queryset(self):\n@@ -48,8 +50,8 @@ def get_queryset(self):\n     def perform_create(self, serializer):\n         instance = serializer.save()\n         if 'multipart/form-data' in self.request.headers['Content-Type']:\n-            src_path = os.path.join(settings.MEDIA_ROOT, instance.path.name)\n-            dest_path = os.path.join(settings.DATA_DIR, \"ops\", \"playbook\", instance.id.__str__())\n+            src_path = safe_join(settings.MEDIA_ROOT, instance.path.name)\n+            dest_path = safe_join(settings.DATA_DIR, \"ops\", \"playbook\", instance.id.__str__())\n             try:\n                 unzip_playbook(src_path, dest_path)\n             except RuntimeError as e:\n@@ -60,9 +62,9 @@ def perform_create(self, serializer):\n \n         else:\n             if instance.create_method == 'blank':\n-                dest_path = os.path.join(settings.DATA_DIR, \"ops\", \"playbook\", instance.id.__str__())\n+                dest_path = safe_join(settings.DATA_DIR, \"ops\", \"playbook\", instance.id.__str__())\n                 os.makedirs(dest_path)\n-                with open(os.path.join(dest_path, 'main.yml'), 'w') as f:\n+                with open(safe_join(dest_path, 'main.yml'), 'w') as f:\n                     f.write('## write your playbook here')\n \n \n@@ -83,13 +85,15 @@ def get(self, request, **kwargs):\n         work_path = playbook.work_dir\n         file_key = request.query_params.get('key', '')\n         if file_key:\n-            file_path = os.path.join(work_path, file_key)\n-            with open(file_path, 'r') as f:\n-                try:\n+            try:\n+                file_path = safe_join(work_path, file_key)\n+                with open(file_path, 'r') as f:\n                     content = f.read()\n-                except UnicodeDecodeError:\n-                    content = _('Unsupported file content')\n-                return Response({'content': content})\n+            except UnicodeDecodeError:\n+                content = _('Unsupported file content')\n+            except SuspiciousFileOperation:\n+                raise JMSException(code='invalid_file_path', detail={\"msg\": _(\"Invalid file path\")})\n+            return Response({'content': content})\n         else:\n             expand_key = request.query_params.get('expand', '')\n             nodes = self.generate_tree(playbook, work_path, expand_key)\n@@ -105,7 +109,8 @@ def post(self, request, **kwargs):\n             parent_key = ''\n         if os.path.dirname(parent_key) == 'root':\n             parent_key = os.path.basename(parent_key)\n-        full_path = os.path.join(work_path, parent_key)\n+\n+        full_path = safe_join(work_path, parent_key)\n \n         is_directory = request.data.get('is_directory', False)\n         content = request.data.get('content', '')\n@@ -117,27 +122,30 @@ def find_new_name(p, is_file=False):\n                     p = 'new_file.yml'\n                 else:\n                     p = 'new_dir'\n-            np = os.path.join(full_path, p)\n+            np = safe_join(full_path, p)\n             n = 0\n             while os.path.exists(np):\n                 n += 1\n-                np = os.path.join(full_path, '{}({})'.format(p, n))\n+                np = safe_join(full_path, '{}({})'.format(p, n))\n             return np\n \n-        if is_directory:\n-            new_file_path = find_new_name(name)\n-            os.makedirs(new_file_path)\n-        else:\n-            new_file_path = find_new_name(name, True)\n-            with open(new_file_path, 'w') as f:\n-                f.write(content)\n+        try:\n+            if is_directory:\n+                new_file_path = find_new_name(name)\n+                os.makedirs(new_file_path)\n+            else:\n+                new_file_path = find_new_name(name, True)\n+                with open(new_file_path, 'w') as f:\n+                    f.write(content)\n+        except SuspiciousFileOperation:\n+            raise JMSException(code='invalid_file_path', detail={\"msg\": _(\"Invalid file path\")})\n \n         relative_path = os.path.relpath(os.path.dirname(new_file_path), work_path)\n         new_node = {\n             \"name\": os.path.basename(new_file_path),\n             \"title\": os.path.basename(new_file_path),\n-            \"id\": os.path.join(relative_path, os.path.basename(new_file_path))\n-            if not os.path.join(relative_path, os.path.basename(new_file_path)).startswith('.')\n+            \"id\": safe_join(relative_path, os.path.basename(new_file_path))\n+            if not safe_join(relative_path, os.path.basename(new_file_path)).startswith('.')\n             else os.path.basename(new_file_path),\n             \"isParent\": is_directory,\n             \"pId\": relative_path if not relative_path.startswith('.') else 'root',\n@@ -156,7 +164,7 @@ def patch(self, request, **kwargs):\n         new_name = request.data.get('new_name', '')\n \n         if file_key in self.protected_files and new_name:\n-            return Response({'msg': '{} can not be rename'.format(file_key)}, status=status.HTTP_400_BAD_REQUEST)\n+            raise JMSException(code='this_file_can_not_be_rename', detail={\"msg\": _(\"This file can not be rename\")})\n \n         if os.path.dirname(file_key) == 'root':\n             file_key = os.path.basename(file_key)\n@@ -166,16 +174,20 @@ def patch(self, request, **kwargs):\n \n         if not file_key or file_key == 'root':\n             return Response(status=status.HTTP_400_BAD_REQUEST)\n-        file_path = os.path.join(work_path, file_key)\n+        file_path = safe_join(work_path, file_key)\n \n         # rename\n         if new_name:\n-            new_file_path = os.path.join(os.path.dirname(file_path), new_name)\n-            if new_file_path == file_path:\n-                return Response(status=status.HTTP_200_OK)\n-            if os.path.exists(new_file_path):\n-                return Response({'msg': '{} already exists'.format(new_name)}, status=status.HTTP_400_BAD_REQUEST)\n-            os.rename(file_path, new_file_path)\n+            try:\n+                new_file_path = safe_join(os.path.dirname(file_path), new_name)\n+                if new_file_path == file_path:\n+                    return Response(status=status.HTTP_200_OK)\n+                if os.path.exists(new_file_path):\n+                    raise JMSException(code='file_already exists', detail={\"msg\": _(\"File already exists\")})\n+                os.rename(file_path, new_file_path)\n+            except SuspiciousFileOperation:\n+                raise JMSException(code='invalid_file_path', detail={\"msg\": _(\"Invalid file path\")})\n+\n         # edit content\n         else:\n             if not is_directory:\n@@ -189,10 +201,11 @@ def delete(self, request, **kwargs):\n         work_path = playbook.work_dir\n         file_key = request.query_params.get('key', '')\n         if not file_key:\n-            return Response({'msg': 'key is required'}, status=status.HTTP_400_BAD_REQUEST)\n+            raise JMSException(code='file_key_is_required', detail={\"msg\": _(\"File key is required\")})\n+\n         if file_key in self.protected_files:\n-            return Response({'msg': ' {} can not be delete'.format(file_key)}, status=status.HTTP_400_BAD_REQUEST)\n-        file_path = os.path.join(work_path, file_key)\n+            raise JMSException(code='This file can not be delete', detail={\"msg\": _(\"This file can not be delete\")})\n+        file_path = safe_join(work_path, file_key)\n         if os.path.isdir(file_path):\n             shutil.rmtree(file_path)\n         else:\n@@ -216,11 +229,12 @@ def generate_tree(playbook, root_path, expand_key=None):\n \n             relative_path = os.path.relpath(path, root_path)\n             for d in dirs:\n+                dir_id = os.path.relpath(safe_join(path, d), root_path)\n+\n                 node = {\n                     \"name\": d,\n                     \"title\": d,\n-                    \"id\": os.path.join(relative_path, d) if not os.path.join(relative_path, d).startswith(\n-                        '.') else d,\n+                    \"id\": dir_id,\n                     \"isParent\": True,\n                     \"open\": True,\n                     \"pId\": relative_path if not relative_path.startswith('.') else 'root',\n@@ -230,12 +244,12 @@ def generate_tree(playbook, root_path, expand_key=None):\n                     node['open'] = True\n                 nodes.append(node)\n             for f in files:\n+                file_id = os.path.relpath(safe_join(path, f), root_path)\n                 node = {\n                     \"name\": f,\n                     \"title\": f,\n                     \"iconSkin\": 'file',\n-                    \"id\": os.path.join(relative_path, f) if not os.path.join(relative_path, f).startswith(\n-                        '.') else f,\n+                    \"id\": file_id,\n                     \"isParent\": False,\n                     \"open\": False,\n                     \"pId\": relative_path if not relative_path.startswith('.') else 'root',"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "543dde57ab80968403a51c0c365a67649f1f86eb",
            "date": "2024-11-19T06:21:49Z",
            "author_login": "w940853815"
          },
          {
            "sha": "c088437fe587ff7a95bd75311d5f131a107a8b5c",
            "date": "2025-01-14T10:11:48Z",
            "author_login": "w940853815"
          },
          {
            "sha": "e721ec147c34c923b9854c6b223be3db974d9015",
            "date": "2025-01-14T09:27:23Z",
            "author_login": "feng626"
          },
          {
            "sha": "5d18d6dee082c8d89b4dac90a8409c129f3ef3bf",
            "date": "2025-01-14T08:38:17Z",
            "author_login": "w940853815"
          },
          {
            "sha": "ecfd338428994024487cb79316d353d5099c908b",
            "date": "2025-01-14T06:58:46Z",
            "author_login": "feng626"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:L",
    "cwe_id": "CWE-22",
    "description": "JumpServer is an open source bastion host. Logged-in users can access and modify the contents of any file on the system. A user can use the 'Job-Template' menu and create a playbook named 'test'. Get the playbook id from the detail page, like 'e0adabef-c38f-492d-bd92-832bacc3df5f'. An attacker can exploit the directory traversal flaw using the provided URL to access and retrieve the contents of the file. `https://jumpserver-ip/api/v1/ops/playbook/e0adabef-c38f-492d-bd92-832bacc3df5f/file/?key=../../../../../../../etc/passwd` a similar method to modify the file content is also present. This issue has been addressed in version 3.6.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-27T15:19:33.143",
    "last_modified": "2024-11-21T08:23:16.943",
    "fix_date": "2023-09-19T10:04:24Z"
  },
  "references": [
    {
      "url": "https://github.com/jumpserver/jumpserver/commit/d0321a74f1713d031560341c8fd0a1859e6510d8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jumpserver/jumpserver/security/advisories/GHSA-ghg2-2whp-6m33",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/jumpserver/jumpserver/commit/d0321a74f1713d031560341c8fd0a1859e6510d8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jumpserver/jumpserver/security/advisories/GHSA-ghg2-2whp-6m33",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.490714",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jumpserver",
    "owner": "jumpserver",
    "created_at": "2014-07-04T03:54:59Z",
    "updated_at": "2025-01-14T13:42:12Z",
    "pushed_at": "2025-01-14T10:28:34Z",
    "size": 90188,
    "stars": 25919,
    "forks": 5385,
    "open_issues": 58,
    "watchers": 25919,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "dev",
      "dev-fce",
      "master",
      "v1.5",
      "v2.0",
      "v2.1",
      "v2.2",
      "v2.3",
      "v2.4",
      "v2.5",
      "v2.6",
      "v2.7",
      "v2.8",
      "v2.9",
      "v2.10",
      "v2.11",
      "v2.12",
      "v2.13",
      "v2.14",
      "v2.15",
      "v2.16",
      "v2.17",
      "v2.18",
      "v2.19"
    ],
    "languages": {
      "Python": 3934412,
      "CSS": 405078,
      "Less": 20864,
      "Shell": 8544,
      "Dockerfile": 2123
    },
    "commit_activity": {
      "total_commits_last_year": 1389,
      "avg_commits_per_week": 26.71153846153846,
      "days_active_last_year": 229
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:10:35.165836"
  }
}