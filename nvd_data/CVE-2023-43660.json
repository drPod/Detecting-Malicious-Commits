{
  "cve_id": "CVE-2023-43660",
  "github_data": {
    "repository": "warp-tech/warpgate",
    "fix_commit": "a4df7f7a21395cfaee7a9789d1e3846290caeb63",
    "related_commits": [
      "a4df7f7a21395cfaee7a9789d1e3846290caeb63",
      "a4df7f7a21395cfaee7a9789d1e3846290caeb63"
    ],
    "patch_url": "https://github.com/warp-tech/warpgate/commit/a4df7f7a21395cfaee7a9789d1e3846290caeb63.patch",
    "fix_commit_details": {
      "sha": "a4df7f7a21395cfaee7a9789d1e3846290caeb63",
      "commit_date": "2023-09-27T19:14:41Z",
      "author": {
        "login": "Eugeny",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fixed GHSA-3cjp-w4cp-m9c8 - interpreting SSH public key offers as a successful authentication",
        "length": 93,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 158,
        "additions": 122,
        "deletions": 36
      },
      "files": [
        {
          "filename": "Cargo.lock",
          "status": "modified",
          "additions": 23,
          "deletions": 22,
          "patch": "@@ -1473,9 +1473,9 @@ checksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n \n [[package]]\n name = \"form_urlencoded\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a9c384f161156f5260c24a097c56119f9be8c798586aecc13afbcbe7b7e26bf8\"\n+checksum = \"a62bc1cf6f830c2ec14a513a9fb124d0a213a629668a4186f329db21fe045652\"\n dependencies = [\n  \"percent-encoding\",\n ]\n@@ -2057,9 +2057,9 @@ checksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n \n [[package]]\n name = \"idna\"\n-version = \"0.3.0\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e14ddfc70884202db2244c223200c204c2bda1bc6e0998d11b5e024d657209e6\"\n+checksum = \"7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c\"\n dependencies = [\n  \"unicode-bidi\",\n  \"unicode-normalization\",\n@@ -2978,9 +2978,9 @@ dependencies = [\n \n [[package]]\n name = \"percent-encoding\"\n-version = \"2.2.0\"\n+version = \"2.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"478c572c3d73181ff3c2539045f6eb99e5491218eae919370993b890cdbdd98e\"\n+checksum = \"9b2a4787296e9989611394c33f193f676704af1686e70b8f8033ab5ba9a35a94\"\n \n [[package]]\n name = \"phf\"\n@@ -3625,9 +3625,9 @@ dependencies = [\n \n [[package]]\n name = \"russh\"\n-version = \"0.38.0\"\n+version = \"0.39.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ae0efcc0f4cd6c062c07e572ce4b806e3967fa029fcbfcc0aa98fb5910a37925\"\n+checksum = \"7878311587d0353a854d5be954fbe68bdf6e77873933b484d1e45db12bb2f8cf\"\n dependencies = [\n  \"aes\",\n  \"aes-gcm\",\n@@ -5162,9 +5162,9 @@ checksum = \"a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a\"\n \n [[package]]\n name = \"url\"\n-version = \"2.3.1\"\n+version = \"2.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0d68c799ae75762b8c3fe375feb6600ef5602c883c5d21eb51c09f22b83c4643\"\n+checksum = \"143b538f18257fac9cad154828a57c6bf5157e1aa604d4816b5995bf6de87ae5\"\n dependencies = [\n  \"form_urlencoded\",\n  \"idna\",\n@@ -5256,7 +5256,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"ansi_term\",\n  \"anyhow\",\n@@ -5292,7 +5292,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-admin\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"anyhow\",\n  \"async-trait\",\n@@ -5321,7 +5321,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-common\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"anyhow\",\n  \"argon2\",\n@@ -5357,7 +5357,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-core\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"anyhow\",\n  \"argon2\",\n@@ -5397,7 +5397,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-database-protocols\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"bitflags 1.3.2\",\n  \"bytes\",\n@@ -5410,7 +5410,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-db-entities\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"chrono\",\n  \"poem-openapi\",\n@@ -5423,7 +5423,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-db-migrations\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"async-std\",\n  \"chrono\",\n@@ -5435,7 +5435,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-protocol-http\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"anyhow\",\n  \"async-trait\",\n@@ -5456,6 +5456,7 @@ dependencies = [\n  \"tokio\",\n  \"tokio-tungstenite 0.17.2\",\n  \"tracing\",\n+ \"url\",\n  \"uuid\",\n  \"warpgate-admin\",\n  \"warpgate-common\",\n@@ -5467,7 +5468,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-protocol-mysql\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"anyhow\",\n  \"async-trait\",\n@@ -5494,7 +5495,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-protocol-ssh\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"ansi_term\",\n  \"anyhow\",\n@@ -5519,7 +5520,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-sso\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"bytes\",\n  \"data-encoding\",\n@@ -5535,7 +5536,7 @@ dependencies = [\n \n [[package]]\n name = \"warpgate-web\"\n-version = \"0.7.4\"\n+version = \"0.8.0\"\n dependencies = [\n  \"rust-embed\",\n  \"serde\","
        },
        {
          "filename": "warpgate-protocol-ssh/Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@ bimap = \"0.6\"\n bytes = \"1.3\"\n dialoguer = \"0.10\"\n futures = \"0.3\"\n-russh = { version = \"0.38.0\", features = [\"vendored-openssl\"] }\n+russh = { version = \"0.39.0\", features = [\"vendored-openssl\"] }\n # russh = { version = \"0.35.0-beta.6\", features = [\"vendored-openssl\"], path = \"../../russh/russh\"}\n russh-keys = { version = \"0.38.0\", features = [\"vendored-openssl\"] }\n # russh-keys = { version = \"0.23.0-beta.1\", features = [\"vendored-openssl\"], path = \"../../russh/russh-keys\" }"
        },
        {
          "filename": "warpgate-protocol-ssh/src/server/russh_handler.rs",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@ pub enum ServerHandlerEvent {\n     PtyRequest(ServerChannelId, PtyRequest, oneshot::Sender<()>),\n     ShellRequest(ServerChannelId, oneshot::Sender<bool>),\n     AuthPublicKey(Secret<String>, PublicKey, oneshot::Sender<Auth>),\n+    AuthPublicKeyOffer(Secret<String>, PublicKey, oneshot::Sender<bool>),\n     AuthPassword(Secret<String>, Secret<String>, oneshot::Sender<Auth>),\n     AuthKeyboardInteractive(\n         Secret<String>,\n@@ -178,6 +179,33 @@ impl russh::server::Handler for ServerHandler {\n         Ok((self, session))\n     }\n \n+    async fn auth_publickey_offered(\n+        self,\n+        user: &str,\n+        key: &russh_keys::key::PublicKey,\n+    ) -> Result<(Self, Auth), Self::Error> {\n+        let user = Secret::new(user.to_string());\n+        let (tx, rx) = oneshot::channel();\n+\n+        self.send_event(ServerHandlerEvent::AuthPublicKeyOffer(\n+            user,\n+            key.clone(),\n+            tx,\n+        ))?;\n+\n+        let result = rx.await.unwrap_or(false);\n+        Ok((\n+            self,\n+            if result {\n+                Auth::Accept\n+            } else {\n+                Auth::Reject {\n+                    proceed_with_methods: None,\n+                }\n+            },\n+        ))\n+    }\n+\n     async fn auth_publickey(\n         self,\n         user: &str,"
        },
        {
          "filename": "warpgate-protocol-ssh/src/server/session.rs",
          "status": "modified",
          "additions": 70,
          "deletions": 13,
          "patch": "@@ -466,6 +466,10 @@ impl ServerSession {\n                 let _ = reply.send(self._auth_publickey(username, key).await);\n             }\n \n+            ServerHandlerEvent::AuthPublicKeyOffer(username, key, reply) => {\n+                let _ = reply.send(self._auth_publickey_offer(username, key).await);\n+            }\n+\n             ServerHandlerEvent::AuthPassword(username, password, reply) => {\n                 let _ = reply.send(self._auth_password(username, password).await);\n             }\n@@ -1149,19 +1153,7 @@ impl ServerSession {\n             .map_err(anyhow::Error::from)\n     }\n \n-    async fn _auth_publickey(\n-        &mut self,\n-        ssh_username: Secret<String>,\n-        key: PublicKey,\n-    ) -> russh::server::Auth {\n-        let selector: AuthSelector = ssh_username.expose_secret().into();\n-\n-        info!(\n-            \"Public key auth as {:?} with key {}\",\n-            selector,\n-            key.public_key_base64()\n-        );\n-\n+    fn _get_public_keys_from_of(&self, key: PublicKey) -> Vec<PublicKey> {\n         let mut keys = vec![key.clone()];\n         // Try all supported hash algorithms\n         if let PublicKey::RSA { key, hash } = &key {\n@@ -1178,6 +1170,48 @@ impl ServerSession {\n                 }\n             }\n         }\n+        keys\n+    }\n+\n+    async fn _auth_publickey_offer(\n+        &mut self,\n+        ssh_username: Secret<String>,\n+        key: PublicKey,\n+    ) -> bool {\n+        let keys = self._get_public_keys_from_of(key);\n+        let selector: AuthSelector = ssh_username.expose_secret().into();\n+\n+        for key in keys {\n+            if let Ok(true) = self\n+                .try_validate_public_key_offer(\n+                    &selector,\n+                    Some(AuthCredential::PublicKey {\n+                        kind: key.name().to_string(),\n+                        public_key_bytes: Bytes::from(key.public_key_bytes()),\n+                    }),\n+                )\n+                .await\n+            {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n+    async fn _auth_publickey(\n+        &mut self,\n+        ssh_username: Secret<String>,\n+        key: PublicKey,\n+    ) -> russh::server::Auth {\n+        let selector: AuthSelector = ssh_username.expose_secret().into();\n+\n+        info!(\n+            \"Public key auth as {:?} with key {}\",\n+            selector,\n+            key.public_key_base64()\n+        );\n+\n+        let keys = self._get_public_keys_from_of(key);\n \n         let mut result = Ok(AuthResult::Rejected);\n         for key in keys {\n@@ -1361,6 +1395,29 @@ impl ServerSession {\n         m\n     }\n \n+    async fn try_validate_public_key_offer(\n+        &mut self,\n+        selector: &AuthSelector,\n+        credential: Option<AuthCredential>,\n+    ) -> Result<bool> {\n+        match selector {\n+            AuthSelector::User { username, .. } => {\n+                let cp = self.services.config_provider.clone();\n+\n+                if let Some(credential) = credential {\n+                    return Ok(cp\n+                        .lock()\n+                        .await\n+                        .validate_credential(username, &credential)\n+                        .await?);\n+                }\n+\n+                Ok(false)\n+            }\n+            _ => Ok(false),\n+        }\n+    }\n+\n     async fn try_auth(\n         &mut self,\n         selector: &AuthSelector,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8e97eb35868ccf4f42cb1b87928bdad57f0b0c28",
            "date": "2025-01-09T20:46:42Z",
            "author_login": "Eugeny"
          },
          {
            "sha": "3523f790787e63e3157fdb09168f008c746cce32",
            "date": "2025-01-09T20:37:03Z",
            "author_login": "Eugeny"
          },
          {
            "sha": "6ade841378f1f920d7009fb0da8fe49c4575749f",
            "date": "2024-12-27T09:16:36Z",
            "author_login": "Eugeny"
          },
          {
            "sha": "4e56ace5b88aa37ca0502acf30de9d34b53af7e0",
            "date": "2024-12-26T18:38:21Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1cc3bcd73a0f5e2e4e1d9eac358b70430458994e",
            "date": "2024-12-26T18:38:06Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-287",
    "description": "Warpgate is a smart SSH, HTTPS and MySQL bastion host for Linux that doesn't need special client apps. The SSH key verification for a user can be bypassed by sending an SSH key offer without a signature. This allows bypassing authentication under following conditions: 1. The attacker knows the username and a valid target name 2. The attacked knows the user's public key and 3. Only SSH public key authentication is required for the user account. This issue has been addressed in version 0.8.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-09-27T22:15:10.730",
    "last_modified": "2024-11-21T08:24:34.007",
    "fix_date": "2023-09-27T19:14:41Z"
  },
  "references": [
    {
      "url": "https://github.com/warp-tech/warpgate/commit/a4df7f7a21395cfaee7a9789d1e3846290caeb63",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/warp-tech/warpgate/security/advisories/GHSA-3cjp-w4cp-m9c8",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/warp-tech/warpgate/commit/a4df7f7a21395cfaee7a9789d1e3846290caeb63",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/warp-tech/warpgate/security/advisories/GHSA-3cjp-w4cp-m9c8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.500278",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "warpgate",
    "owner": "warp-tech",
    "created_at": "2022-02-05T13:30:51Z",
    "updated_at": "2025-01-14T13:27:45Z",
    "pushed_at": "2025-01-13T20:49:20Z",
    "size": 3296,
    "stars": 4111,
    "forks": 127,
    "open_issues": 90,
    "watchers": 4111,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Rust": 722241,
      "Svelte": 169886,
      "Python": 78234,
      "SCSS": 14809,
      "TypeScript": 10533,
      "JavaScript": 6261,
      "Just": 1297,
      "Dockerfile": 1296,
      "HTML": 837,
      "Ruby": 436,
      "Makefile": 342,
      "CSS": 335,
      "Shell": 282
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:28:04.368983"
  }
}