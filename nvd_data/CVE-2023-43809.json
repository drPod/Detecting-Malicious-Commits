{
  "cve_id": "CVE-2023-43809",
  "github_data": {
    "repository": "charmbracelet/soft-serve",
    "fix_commit": "407c4ec72d1006cee1ff8c1775e5bcc091c2bc89",
    "related_commits": [
      "407c4ec72d1006cee1ff8c1775e5bcc091c2bc89",
      "407c4ec72d1006cee1ff8c1775e5bcc091c2bc89"
    ],
    "patch_url": "https://github.com/charmbracelet/soft-serve/commit/407c4ec72d1006cee1ff8c1775e5bcc091c2bc89.patch",
    "fix_commit_details": {
      "sha": "407c4ec72d1006cee1ff8c1775e5bcc091c2bc89",
      "commit_date": "2023-09-26T20:32:03Z",
      "author": {
        "login": "aymanbagabas",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(ssh): add authentication middleware",
        "length": 175,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 82,
        "additions": 82,
        "deletions": 0
      },
      "files": [
        {
          "filename": "server/ssh/middleware.go",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -13,11 +13,45 @@ import (\n \t\"github.com/charmbracelet/soft-serve/server/sshutils\"\n \t\"github.com/charmbracelet/soft-serve/server/store\"\n \t\"github.com/charmbracelet/ssh\"\n+\t\"github.com/charmbracelet/wish\"\n \t\"github.com/prometheus/client_golang/prometheus\"\n \t\"github.com/prometheus/client_golang/prometheus/promauto\"\n \t\"github.com/spf13/cobra\"\n+\tgossh \"golang.org/x/crypto/ssh\"\n )\n \n+// ErrPermissionDenied is returned when a user is not allowed connect.\n+var ErrPermissionDenied = fmt.Errorf(\"permission denied\")\n+\n+// AuthenticationMiddleware handles authentication.\n+func AuthenticationMiddleware(sh ssh.Handler) ssh.Handler {\n+\treturn func(s ssh.Session) {\n+\t\t// XXX: The authentication key is set in the context but gossh doesn't\n+\t\t// validate the authentication. We need to verify that the _last_ key\n+\t\t// that was approved is the one that's being used.\n+\n+\t\tpk := s.PublicKey()\n+\t\tif pk != nil {\n+\t\t\t// There is no public key stored in the context, public-key auth\n+\t\t\t// was never requested, skip\n+\t\t\tperms := s.Permissions().Permissions\n+\t\t\tif perms == nil {\n+\t\t\t\twish.Fatalln(s, ErrPermissionDenied)\n+\t\t\t\treturn\n+\t\t\t}\n+\n+\t\t\t// Check if the key is the same as the one we have in context\n+\t\t\tfp := perms.Extensions[\"pubkey-fp\"]\n+\t\t\tif fp != gossh.FingerprintSHA256(pk) {\n+\t\t\t\twish.Fatalln(s, ErrPermissionDenied)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\n+\t\tsh(s)\n+\t}\n+}\n+\n // ContextMiddleware adds the config, backend, and logger to the session context.\n func ContextMiddleware(cfg *config.Config, dbx *db.DB, datastore store.Store, be *backend.Backend, logger *log.Logger) func(ssh.Handler) ssh.Handler {\n \treturn func(sh ssh.Handler) ssh.Handler {"
        },
        {
          "filename": "server/ssh/ssh.go",
          "status": "modified",
          "additions": 48,
          "deletions": 0,
          "patch": "@@ -77,6 +77,11 @@ func NewSSHServer(ctx context.Context) (*SSHServer, error) {\n \t\t\tLoggingMiddleware,\n \t\t\t// Context middleware.\n \t\t\tContextMiddleware(cfg, dbx, datastore, be, logger),\n+\t\t\t// Authentication middleware.\n+\t\t\t// gossh.PublicKeyHandler doesn't guarantee that the public key\n+\t\t\t// is in fact the one used for authentication, so we need to\n+\t\t\t// check it again here.\n+\t\t\tAuthenticationMiddleware,\n \t\t),\n \t}\n \n@@ -91,6 +96,16 @@ func NewSSHServer(ctx context.Context) (*SSHServer, error) {\n \t\treturn nil, err\n \t}\n \n+\tif config.IsDebug() {\n+\t\ts.srv.ServerConfigCallback = func(ctx ssh.Context) *gossh.ServerConfig {\n+\t\t\treturn &gossh.ServerConfig{\n+\t\t\t\tAuthLogCallback: func(conn gossh.ConnMetadata, method string, err error) {\n+\t\t\t\t\tlogger.Debug(\"authentication\", \"user\", conn.User(), \"method\", method, \"err\", err)\n+\t\t\t\t},\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tif cfg.SSH.MaxTimeout > 0 {\n \t\ts.srv.MaxTimeout = time.Duration(cfg.SSH.MaxTimeout) * time.Second\n \t}\n@@ -130,6 +145,19 @@ func (s *SSHServer) Shutdown(ctx context.Context) error {\n \treturn s.srv.Shutdown(ctx)\n }\n \n+func initializePermissions(ctx ssh.Context) {\n+\tperms := ctx.Permissions()\n+\tif perms == nil || perms.Permissions == nil {\n+\t\tperms = &ssh.Permissions{Permissions: &gossh.Permissions{}}\n+\t}\n+\tif perms.Extensions == nil {\n+\t\tperms.Extensions = make(map[string]string)\n+\t}\n+\tif perms.Permissions.Extensions == nil {\n+\t\tperms.Permissions.Extensions = make(map[string]string)\n+\t}\n+}\n+\n // PublicKeyAuthHandler handles public key authentication.\n func (s *SSHServer) PublicKeyHandler(ctx ssh.Context, pk ssh.PublicKey) (allowed bool) {\n \tif pk == nil {\n@@ -144,6 +172,15 @@ func (s *SSHServer) PublicKeyHandler(ctx ssh.Context, pk ssh.PublicKey) (allowed\n \tif user != nil {\n \t\tctx.SetValue(proto.ContextKeyUser, user)\n \t\tallowed = true\n+\n+\t\t// XXX: store the first \"approved\" public-key fingerprint in the\n+\t\t// permissions block to use for authentication later.\n+\t\tinitializePermissions(ctx)\n+\t\tperms := ctx.Permissions()\n+\n+\t\t// Set the public key fingerprint to be used for authentication.\n+\t\tperms.Extensions[\"pubkey-fp\"] = gossh.FingerprintSHA256(pk)\n+\t\tctx.SetValue(ssh.ContextKeyPermissions, perms)\n \t}\n \n \treturn\n@@ -154,5 +191,16 @@ func (s *SSHServer) PublicKeyHandler(ctx ssh.Context, pk ssh.PublicKey) (allowed\n func (s *SSHServer) KeyboardInteractiveHandler(ctx ssh.Context, _ gossh.KeyboardInteractiveChallenge) bool {\n \tac := s.be.AllowKeyless(ctx)\n \tkeyboardInteractiveCounter.WithLabelValues(strconv.FormatBool(ac)).Inc()\n+\n+\t// If we're allowing keyless access, reset the public key fingerprint\n+\tif ac {\n+\t\tinitializePermissions(ctx)\n+\t\tperms := ctx.Permissions()\n+\n+\t\t// XXX: reset the public-key fingerprint. This is used to validate the\n+\t\t// public key being used to authenticate.\n+\t\tperms.Extensions[\"pubkey-fp\"] = \"\"\n+\t\tctx.SetValue(ssh.ContextKeyPermissions, perms)\n+\t}\n \treturn ac\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "22d00e9db31e1f4d0c32beae1e8733883f4d80d8",
            "date": "2025-01-07T11:32:03Z",
            "author_login": "aymanbagabas"
          },
          {
            "sha": "a8d1bf3f9349c138383b65079b7b8ad97fff78f4",
            "date": "2025-01-07T11:30:47Z",
            "author_login": "aymanbagabas"
          },
          {
            "sha": "0fb868cb4ee866428bf5c47e3019134531461cc9",
            "date": "2025-01-07T08:29:40Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9cd64aa779d343a58ce31220efe9c978b019d872",
            "date": "2025-01-06T20:24:57Z",
            "author_login": "caarlos0"
          },
          {
            "sha": "14bbcc342c3fd691f841e81ea8dadbe0b6a13821",
            "date": "2025-01-06T14:37:10Z",
            "author_login": "caarlos0"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-287",
    "description": "Soft Serve is a self-hostable Git server for the command line. Prior to version 0.6.2, a security vulnerability in Soft Serve could allow an unauthenticated, remote attacker to bypass public key authentication when keyboard-interactive SSH authentication is active, through the `allow-keyless` setting, and the public key requires additional client-side verification for example using FIDO2 or GPG. This is due to insufficient validation procedures of the public key step during SSH request handshake, granting unauthorized access if the keyboard-interaction mode is utilized. An attacker could exploit this vulnerability by presenting manipulated SSH requests using keyboard-interactive authentication mode. This could potentially result in unauthorized access to the Soft Serve. Users should upgrade to the latest Soft Serve version `v0.6.2` to receive the patch for this issue. To workaround this vulnerability without upgrading, users can temporarily disable Keyboard-Interactive SSH Authentication using the `allow-keyless` setting.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-04T21:15:10.280",
    "last_modified": "2024-11-21T08:24:49.470",
    "fix_date": "2023-09-26T20:32:03Z"
  },
  "references": [
    {
      "url": "https://github.com/charmbracelet/soft-serve/commit/407c4ec72d1006cee1ff8c1775e5bcc091c2bc89",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/charmbracelet/soft-serve/issues/389",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/charmbracelet/soft-serve/releases/tag/v0.6.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/charmbracelet/soft-serve/security/advisories/GHSA-mc97-99j4-vm2v",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/charmbracelet/soft-serve/commit/407c4ec72d1006cee1ff8c1775e5bcc091c2bc89",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/charmbracelet/soft-serve/issues/389",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/charmbracelet/soft-serve/releases/tag/v0.6.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/charmbracelet/soft-serve/security/advisories/GHSA-mc97-99j4-vm2v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.575060",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "soft-serve",
    "owner": "charmbracelet",
    "created_at": "2021-07-30T23:32:44Z",
    "updated_at": "2025-01-14T20:47:22Z",
    "pushed_at": "2025-01-07T11:33:21Z",
    "size": 2292,
    "stars": 5531,
    "forks": 144,
    "open_issues": 51,
    "watchers": 5531,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 627614,
      "Dockerfile": 574,
      "Shell": 510
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:03:34.685942"
  }
}