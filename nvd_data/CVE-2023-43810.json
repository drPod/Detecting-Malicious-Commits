{
  "cve_id": "CVE-2023-43810",
  "github_data": {
    "repository": "open-telemetry/opentelemetry-python-contrib",
    "fix_commit": "6007e0c013071e7f8b9612d3bc68aeb9d600d74e",
    "related_commits": [
      "6007e0c013071e7f8b9612d3bc68aeb9d600d74e",
      "6007e0c013071e7f8b9612d3bc68aeb9d600d74e"
    ],
    "patch_url": "https://github.com/open-telemetry/opentelemetry-python-contrib/commit/6007e0c013071e7f8b9612d3bc68aeb9d600d74e.patch",
    "fix_commit_details": {
      "sha": "6007e0c013071e7f8b9612d3bc68aeb9d600d74e",
      "commit_date": "2023-08-15T20:17:14Z",
      "author": {
        "login": "programmer04",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-5rv5-6h4r-h22v",
        "length": 369,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 181,
        "additions": 162,
        "deletions": 19
      },
      "files": [
        {
          "filename": "instrumentation/opentelemetry-instrumentation-flask/tests/test_programmatic.py",
          "status": "modified",
          "additions": 77,
          "deletions": 17,
          "patch": "@@ -40,6 +40,8 @@\n     OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SANITIZE_FIELDS,\n     OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_REQUEST,\n     OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_RESPONSE,\n+    OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_RESPONSE,\n+    OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS,\n     get_excluded_urls,\n )\n \n@@ -326,6 +328,25 @@ def test_flask_metric_values(self):\n                         if isinstance(point, NumberDataPoint):\n                             self.assertEqual(point.value, 0)\n \n+    def _assert_basic_metric(self, expected_duration_attributes, expected_requests_count_attributes):\n+        metrics_list = self.memory_metrics_reader.get_metrics_data()\n+        for resource_metric in metrics_list.resource_metrics:\n+            for scope_metrics in resource_metric.scope_metrics:\n+                for metric in scope_metrics.metrics:\n+                    for point in list(metric.data.data_points):\n+                        if isinstance(point, HistogramDataPoint):\n+                            self.assertDictEqual(\n+                                expected_duration_attributes,\n+                                dict(point.attributes),\n+                            )\n+                            self.assertEqual(point.count, 1)\n+                        elif isinstance(point, NumberDataPoint):\n+                            self.assertDictEqual(\n+                                expected_requests_count_attributes,\n+                                dict(point.attributes),\n+                            )\n+                            self.assertEqual(point.value, 0)\n+\n     def test_basic_metric_success(self):\n         self.client.get(\"/hello/756\")\n         expected_duration_attributes = {\n@@ -344,23 +365,62 @@ def test_basic_metric_success(self):\n             \"http.flavor\": \"1.1\",\n             \"http.server_name\": \"localhost\",\n         }\n-        metrics_list = self.memory_metrics_reader.get_metrics_data()\n-        for resource_metric in metrics_list.resource_metrics:\n-            for scope_metrics in resource_metric.scope_metrics:\n-                for metric in scope_metrics.metrics:\n-                    for point in list(metric.data.data_points):\n-                        if isinstance(point, HistogramDataPoint):\n-                            self.assertDictEqual(\n-                                expected_duration_attributes,\n-                                dict(point.attributes),\n-                            )\n-                            self.assertEqual(point.count, 1)\n-                        elif isinstance(point, NumberDataPoint):\n-                            self.assertDictEqual(\n-                                expected_requests_count_attributes,\n-                                dict(point.attributes),\n-                            )\n-                            self.assertEqual(point.value, 0)\n+        self._assert_basic_metric(\n+            expected_duration_attributes,\n+            expected_requests_count_attributes,\n+        )\n+\n+    def test_basic_metric_nonstandard_http_method_success(self):\n+        self.client.open(\"/hello/756\", method=\"NONSTANDARD\")\n+        expected_duration_attributes = {\n+            \"http.method\": \"UNKNOWN\",\n+            \"http.host\": \"localhost\",\n+            \"http.scheme\": \"http\",\n+            \"http.flavor\": \"1.1\",\n+            \"http.server_name\": \"localhost\",\n+            \"net.host.port\": 80,\n+            \"http.status_code\": 405,\n+        }\n+        expected_requests_count_attributes = {\n+            \"http.method\": \"UNKNOWN\",\n+            \"http.host\": \"localhost\",\n+            \"http.scheme\": \"http\",\n+            \"http.flavor\": \"1.1\",\n+            \"http.server_name\": \"localhost\",\n+        }\n+        self._assert_basic_metric(\n+            expected_duration_attributes,\n+            expected_requests_count_attributes,\n+        )\n+\n+    @patch.dict(\n+    \"os.environ\",\n+        {\n+            OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS: \"1\",\n+        },\n+    )\n+    def test_basic_metric_nonstandard_http_method_allowed_success(self):\n+        self.client.open(\"/hello/756\", method=\"NONSTANDARD\")\n+        expected_duration_attributes = {\n+            \"http.method\": \"NONSTANDARD\",\n+            \"http.host\": \"localhost\",\n+            \"http.scheme\": \"http\",\n+            \"http.flavor\": \"1.1\",\n+            \"http.server_name\": \"localhost\",\n+            \"net.host.port\": 80,\n+            \"http.status_code\": 405,\n+        }\n+        expected_requests_count_attributes = {\n+            \"http.method\": \"NONSTANDARD\",\n+            \"http.host\": \"localhost\",\n+            \"http.scheme\": \"http\",\n+            \"http.flavor\": \"1.1\",\n+            \"http.server_name\": \"localhost\",\n+        }\n+        self._assert_basic_metric(\n+            expected_duration_attributes,\n+            expected_requests_count_attributes,\n+        )\n \n     def test_metric_uninstrument(self):\n         self.client.delete(\"/hello/756\")"
        },
        {
          "filename": "instrumentation/opentelemetry-instrumentation-wsgi/src/opentelemetry/instrumentation/wsgi/__init__.py",
          "status": "modified",
          "additions": 9,
          "deletions": 2,
          "patch": "@@ -197,6 +197,12 @@ def response_hook(span: Span, environ: WSGIEnvironment, status: str, response_he\n Note:\n     The environment variable names used to capture HTTP headers are still experimental, and thus are subject to change.\n \n+Sanitizing methods\n+******************\n+In order to prevent unbound cardinality for HTTP methods by default nonstandard ones are labeled as ``NONSTANDARD``.\n+To record all of the names set the environment variable  ``OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS``\n+to a value that evaluates to true, e.g. ``1``.\n+\n API\n ---\n \"\"\"\n@@ -226,6 +232,7 @@ def response_hook(span: Span, environ: WSGIEnvironment, status: str, response_he\n     normalise_request_header_name,\n     normalise_response_header_name,\n     remove_url_credentials,\n+    sanitize_method,\n )\n \n _HTTP_VERSION_PREFIX = \"HTTP/\"\n@@ -295,7 +302,7 @@ def collect_request_attributes(environ):\n     \"\"\"\n \n     result = {\n-        SpanAttributes.HTTP_METHOD: environ.get(\"REQUEST_METHOD\"),\n+        SpanAttributes.HTTP_METHOD: sanitize_method(environ.get(\"REQUEST_METHOD\")),\n         SpanAttributes.HTTP_SERVER_NAME: environ.get(\"SERVER_NAME\"),\n         SpanAttributes.HTTP_SCHEME: environ.get(\"wsgi.url_scheme\"),\n     }\n@@ -450,7 +457,7 @@ def get_default_span_name(environ):\n     Returns:\n         The span name.\n     \"\"\"\n-    method = environ.get(\"REQUEST_METHOD\", \"\").strip()\n+    method = sanitize_method(environ.get(\"REQUEST_METHOD\", \"\").strip())\n     path = environ.get(\"PATH_INFO\", \"\").strip()\n     if method and path:\n         return f\"{method} {path}\""
        },
        {
          "filename": "instrumentation/opentelemetry-instrumentation-wsgi/tests/test_wsgi_middleware.py",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@\n     OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SANITIZE_FIELDS,\n     OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_REQUEST,\n     OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_RESPONSE,\n+    OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS,\n )\n \n \n@@ -284,6 +285,24 @@ def test_wsgi_metrics(self):\n                             )\n         self.assertTrue(number_data_point_seen and histogram_data_point_seen)\n \n+    def test_nonstandard_http_method(self):\n+        self.environ[\"REQUEST_METHOD\"]= \"NONSTANDARD\"\n+        app = otel_wsgi.OpenTelemetryMiddleware(simple_wsgi)\n+        response = app(self.environ, self.start_response)\n+        self.validate_response(response, span_name=\"HTTP UNKNOWN\", http_method=\"UNKNOWN\")\n+\n+    @mock.patch.dict(\n+    \"os.environ\",\n+        {\n+            OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS: \"1\",\n+        },\n+    )\n+    def test_nonstandard_http_method_allowed(self):\n+        self.environ[\"REQUEST_METHOD\"]= \"NONSTANDARD\"\n+        app = otel_wsgi.OpenTelemetryMiddleware(simple_wsgi)\n+        response = app(self.environ, self.start_response)\n+        self.validate_response(response, span_name=\"HTTP NONSTANDARD\", http_method=\"NONSTANDARD\")\n+\n     def test_default_span_name_missing_path_info(self):\n         \"\"\"Test that default span_names with missing path info.\"\"\"\n         self.environ.pop(\"PATH_INFO\")"
        },
        {
          "filename": "util/opentelemetry-util-http/src/opentelemetry/util/http/__init__.py",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -31,6 +31,10 @@\n     \"OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_RESPONSE\"\n )\n \n+OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS = (\n+    \"OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS\"\n+)\n+\n # List of recommended metrics attributes\n _duration_attrs = {\n     SpanAttributes.HTTP_METHOD,\n@@ -186,6 +190,15 @@ def normalise_response_header_name(header: str) -> str:\n     key = header.lower().replace(\"-\", \"_\")\n     return f\"http.response.header.{key}\"\n \n+def sanitize_method(method: str | None) -> str | None:\n+    if method is None:\n+        return None\n+    method = method.upper()\n+    if (environ.get(OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS) or\n+        # Based on https://www.rfc-editor.org/rfc/rfc7231#section-4.1 and https://www.rfc-editor.org/rfc/rfc5789#section-2.\n+        method in [\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"CONNECT\", \"OPTIONS\", \"TRACE\", \"PATCH\"]):\n+        return method\n+    return \"NONSTANDARD\"\n \n def get_custom_headers(env_var: str) -> List[str]:\n     custom_headers = environ.get(env_var, [])"
        },
        {
          "filename": "util/opentelemetry-util-http/tests/test_sanitize_method.py",
          "status": "added",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -0,0 +1,44 @@\n+# Copyright The OpenTelemetry Authors\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import unittest\n+from unittest.mock import patch\n+\n+from opentelemetry.util.http import (\n+    OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS,\n+    sanitize_method,\n+)\n+\n+class TestSanitizeMethod(unittest.TestCase):\n+    def test_standard_method_uppercase(self):\n+        method = sanitize_method(\"GET\")\n+        self.assertEqual(method, \"GET\")\n+\n+    def test_standard_method_lowercase(self):\n+        method = sanitize_method(\"get\")\n+        self.assertEqual(method, \"GET\")\n+\n+    def test_nonstandard_method(self):\n+        method = sanitize_method(\"UNKNOWN\")\n+        self.assertEqual(method, \"NONSTANDARD\")\n+\n+    @patch.dict(\n+    \"os.environ\",\n+        {\n+            OTEL_PYTHON_INSTRUMENTATION_HTTP_CAPTURE_ALL_METHODS: \"1\",\n+        },\n+    )\n+    def test_nonstandard_method_allowed(self):\n+        method = sanitize_method(\"UNKNOWN\")\n+        self.assertEqual(method, \"NONSTANDARD\")"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c59b514cdadfe062c69f8e055d7c1aa4b56dc92e",
            "date": "2025-01-13T23:42:32Z",
            "author_login": "jsoref"
          },
          {
            "sha": "5219242eafa5dff08fb2ff855860d6772a43364b",
            "date": "2025-01-13T21:32:16Z",
            "author_login": "Kludex"
          },
          {
            "sha": "b7e7d0cbe58e5e525c330b4d3a38e831da588f8e",
            "date": "2025-01-13T19:49:22Z",
            "author_login": "FilipNikolovski"
          },
          {
            "sha": "406707b2bd322b6fe5819a6123b0deee1c6f21d1",
            "date": "2025-01-13T17:20:33Z",
            "author_login": "Kludex"
          },
          {
            "sha": "8406e2e7894bd3832b33fd78124e4bc0b871f790",
            "date": "2025-01-13T09:40:43Z",
            "author_login": "tammy-baylis-swi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "OpenTelemetry, also known as OTel for short, is a vendor-neutral open-source Observability framework for instrumenting, generating, collecting, and exporting telemetry data such as traces, metrics, logs. Autoinstrumentation out of the box adds the label `http_method` that has unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. HTTP method for requests can be easily set by an attacker to be random and long. In order to be affected program has to be instrumented for HTTP handlers and does not filter any unknown HTTP methods on the level of CDN, LB, previous middleware, etc. This issue has been patched in version 0.41b0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-06T14:15:12.267",
    "last_modified": "2024-11-21T08:24:49.610",
    "fix_date": "2023-08-15T20:17:14Z"
  },
  "references": [
    {
      "url": "https://github.com/open-telemetry/opentelemetry-python-contrib/commit/6007e0c013071e7f8b9612d3bc68aeb9d600d74e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-python-contrib/releases/tag/v0.41b0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-python-contrib/security/advisories/GHSA-5rv5-6h4r-h22v",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-python-contrib/commit/6007e0c013071e7f8b9612d3bc68aeb9d600d74e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-python-contrib/releases/tag/v0.41b0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-python-contrib/security/advisories/GHSA-5rv5-6h4r-h22v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.580669",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "opentelemetry-python-contrib",
    "owner": "open-telemetry",
    "created_at": "2019-11-08T18:23:43Z",
    "updated_at": "2025-01-13T23:42:37Z",
    "pushed_at": "2025-01-13T23:42:33Z",
    "size": 8173,
    "stars": 761,
    "forks": 638,
    "open_issues": 597,
    "watchers": 761,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1807-enable-requests-tests-for-pypy",
      "bump-dev",
      "check_ci",
      "dependabot/pip/black-24.3.0",
      "dependabot/pip/jinja2-3.1.4",
      "dependabot/pip/requests-2.31.0",
      "dependabot/pip/requests-2.32.0",
      "emdneto-patch-1",
      "issue_1603",
      "issue_1891",
      "issue_2754",
      "lzchen-patch-1",
      "lzchen-patch-2",
      "lzchen-patch-3",
      "lzchen-patch-4",
      "lzchen-patch-5",
      "lzchen-patch-6",
      "lzchen-patch-7",
      "lzchen-patch-8",
      "lzchen-patch-9",
      "lzchen-patch-10",
      "lzchen-patch-11",
      "lzchen-patch-12",
      "lzchen-patch-13",
      "lzchen-patch-14",
      "lzchen-patch-15",
      "lzchen-patch-16",
      "lzchen-patch-17",
      "lzchen-patch-18",
      "lzchen-patch-19"
    ],
    "languages": {
      "Python": 3035847,
      "Shell": 11059,
      "Dockerfile": 209,
      "HTML": 118
    },
    "commit_activity": {
      "total_commits_last_year": 471,
      "avg_commits_per_week": 9.057692307692308,
      "days_active_last_year": 180
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:04:11.084502"
  }
}