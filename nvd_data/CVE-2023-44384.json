{
  "cve_id": "CVE-2023-44384",
  "github_data": {
    "repository": "discourse/discourse-jira",
    "fix_commit": "8a2d3ad228883199fd5f081cc93d173c88e2e48f",
    "related_commits": [
      "8a2d3ad228883199fd5f081cc93d173c88e2e48f",
      "8a2d3ad228883199fd5f081cc93d173c88e2e48f"
    ],
    "patch_url": "https://github.com/discourse/discourse-jira/commit/8a2d3ad228883199fd5f081cc93d173c88e2e48f.patch",
    "fix_commit_details": {
      "sha": "8a2d3ad228883199fd5f081cc93d173c88e2e48f",
      "commit_date": "2023-10-04T08:49:59Z",
      "author": {
        "login": "vinothkannans",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SECURITY: use `FinalDestination` to prevent SSRF attacks on API calls. (#50)",
        "length": 1039,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 58,
        "additions": 51,
        "deletions": 7
      },
      "files": [
        {
          "filename": "app/controllers/discourse_jira/issues_controller.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -130,11 +130,15 @@ def create\n     def attach\n       raise Discourse::InvalidAccess if !SiteSetting.discourse_jira_enabled\n \n+      params.require(:issue_key)\n+      issue_key = params[:issue_key]\n+      raise Discourse::InvalidParameters.new(:issue_key) if issue_key.include?(\"/\")\n+\n       hijack(\n         info:\n           \"attaching Jira issue for topic #{params[:topic_id]} and post_number #{params[:post_number]}\",\n       ) do\n-        response = Api.get(\"issue/#{params[:issue_key]}\")\n+        response = Api.get(\"issue/#{issue_key}\")\n \n         if response.code != \"200\"\n           log(\"Bad Jira response: #{response.body}\")\n@@ -150,12 +154,12 @@ def attach\n         result =\n           success_json.merge(\n             {\n-              issue_key: json[:key],\n-              issue_url: URI.join(SiteSetting.discourse_jira_url, \"browse/#{json[:key]}\").to_s,\n+              issue_key: issue_key,\n+              issue_url: URI.join(SiteSetting.discourse_jira_url, \"browse/#{issue_key}\").to_s,\n             },\n           )\n \n-        post.jira_issue_key = result[:issue_key]\n+        post.jira_issue_key = issue_key\n \n         if topic = Topic.find_by(id: params[:topic_id])\n           if current_user.guardian.can_create_post_on_topic?(topic)"
        },
        {
          "filename": "lib/discourse_jira/api.rb",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -3,6 +3,8 @@\n module DiscourseJira\n   class InvalidApiResponse < ::StandardError\n   end\n+  class InvalidURI < StandardError\n+  end\n \n   class Api\n     INVALID_RESPONSE = \"Invalid response from Jira API server\"\n@@ -29,7 +31,7 @@ def self.make_request(endpoint)\n         uri = URI.join(SiteSetting.discourse_jira_url, endpoint)\n       end\n \n-      Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == \"https\") do |http|\n+      FinalDestination::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == \"https\") do |http|\n         headers = {\n           \"Content-Type\" => \"application/json\",\n           \"Accept\" => \"application/json\",\n@@ -43,10 +45,15 @@ def self.make_request(endpoint)\n         request = yield(uri, headers)\n         http.request(request)\n       end\n+    rescue FinalDestination::SSRFDetector::DisallowedIpError => e\n+      Discourse.warn_exception(e, message: \"SSRF detected\", env: { url: uri.to_s })\n+      raise InvalidURI\n+    rescue SocketError, Timeout::Error\n+      raise InvalidURI\n     end\n \n     def self.get(endpoint)\n-      make_request(endpoint) { |uri, headers| Net::HTTP::Get.new(uri, headers) }\n+      make_request(endpoint) { |uri, headers| FinalDestination::HTTP::Get.new(uri, headers) }\n     end\n \n     def self.getJSON(endpoint)\n@@ -64,7 +71,7 @@ def self.getJSON(endpoint)\n \n     def self.post(endpoint, body)\n       make_request(endpoint) do |uri, headers|\n-        request = Net::HTTP::Post.new(uri, headers)\n+        request = FinalDestination::HTTP::Post.new(uri, headers)\n         request.body = body.to_json\n \n         request"
        },
        {
          "filename": "spec/lib/api_spec.rb",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -11,7 +11,23 @@\n   end\n \n   describe \".get_version!\" do\n+    it \"raises error for internal hosts\" do\n+      WebMock.enable!(except: [:final_destination])\n+      FinalDestination::SSRFDetector.stubs(:lookup_ips).returns([\"192.168.1.1\"])\n+      Discourse.expects(:warn_exception).with(\n+        instance_of(FinalDestination::SSRFDetector::DisallowedIpError),\n+        message: \"SSRF detected\",\n+        env: {\n+          url: \"https://jira.example.com/rest/api/2/serverInfo\",\n+        },\n+      )\n+      expect { described_class.get_version! }.to raise_error(DiscourseJira::InvalidURI)\n+    ensure\n+      WebMock.enable!\n+    end\n+\n     it \"returns the API version\" do\n+      FinalDestination::SSRFDetector.stubs(:lookup_ips).returns([\"1.2.3.4\"])\n       stub_request(:get, \"https://jira.example.com/rest/api/2/serverInfo\").to_return(\n         status: 200,\n         body: {"
        },
        {
          "filename": "spec/requests/issues_controller_spec.rb",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -223,6 +223,23 @@\n       expect(response.status).to eq(404)\n     end\n \n+    it \"requires issue key in correct format\" do\n+      sign_in(admin)\n+      post = Fabricate(:post)\n+\n+      post \"/jira/issues/attach.json\",\n+           params: {\n+             issue_key: \"../DIS/42\",\n+             topic_id: post.topic_id,\n+             post_number: post.post_number,\n+           }\n+\n+      expect(response.status).to eq(400)\n+      expect(response.parsed_body[\"errors\"][0]).to eq(\n+        I18n.t(\"invalid_params\", message: \"issue_key\"),\n+      )\n+    end\n+\n     it \"attach an existing Jira issue to post\" do\n       sign_in(admin)\n       post = Fabricate(:post)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9b62c6e0b5cf39f9915493ea8195a3e9301f05ec",
            "date": "2024-12-10T19:17:03Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "6a342f98de7111231496337be735afdb305a250d",
            "date": "2024-12-04T10:59:58Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "f1aa06adae72979ace0b38b13276f6b00a64e915",
            "date": "2024-11-28T16:10:49Z",
            "author_login": "davidtaylorhq"
          },
          {
            "sha": "f7a164dd2078c204cdf4ba8cbc32726e255f8fd5",
            "date": "2024-11-20T17:55:04Z",
            "author_login": "davidtaylorhq"
          },
          {
            "sha": "5ebb4673d878d25d98a8e2986d61a321321c293e",
            "date": "2024-11-20T14:47:53Z",
            "author_login": "davidtaylorhq"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-691",
    "description": "Discourse-jira is a Discourse plugin allows Jira projects, issue types, fields and field options will be synced automatically. An administrator user can make an SSRF attack by setting the Jira URL to an arbitrary location and enabling the `discourse_jira_verbose_log` site setting. A moderator user could manipulate the request path to the Jira API, allowing them to perform arbitrary GET requests using the Jira API credentials, potentially with elevated permissions, used by the application. ",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-06T18:15:12.247",
    "last_modified": "2024-11-21T08:25:47.337",
    "fix_date": "2023-10-04T08:49:59Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse-jira/commit/8a2d3ad228883199fd5f081cc93d173c88e2e48f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-jira/pull/50",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-jira/security/advisories/GHSA-pmv5-h2x6-35fh",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-jira/commit/8a2d3ad228883199fd5f081cc93d173c88e2e48f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-jira/pull/50",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-jira/security/advisories/GHSA-pmv5-h2x6-35fh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.581016",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse-jira",
    "owner": "discourse",
    "created_at": "2022-04-01T11:06:42Z",
    "updated_at": "2024-12-10T19:17:09Z",
    "pushed_at": "2024-12-10T19:17:05Z",
    "size": 528,
    "stars": 1,
    "forks": 0,
    "open_issues": 1,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 59320,
      "JavaScript": 39335,
      "Handlebars": 2152,
      "SCSS": 426,
      "Mustache": 147
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:03:57.411643"
  }
}