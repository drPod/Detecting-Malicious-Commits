{
  "cve_id": "CVE-2023-44390",
  "github_data": {
    "repository": "mganss/HtmlSanitizer",
    "fix_commit": "ab29319866c020f0cc11e6b92228cd8039196c6e",
    "related_commits": [
      "ab29319866c020f0cc11e6b92228cd8039196c6e",
      "ab29319866c020f0cc11e6b92228cd8039196c6e"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "ab29319866c020f0cc11e6b92228cd8039196c6e",
      "commit_date": "2023-10-04T14:26:07Z",
      "author": {
        "login": "mganss",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge branch 'advisory-fix-1'",
        "length": 29,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 71,
        "additions": 70,
        "deletions": 1
      },
      "files": [
        {
          "filename": "src/HtmlSanitizer/HtmlSanitizer.cs",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -453,6 +453,10 @@ private void RemoveComments(INode context)\n         {\n             foreach (var comment in GetAllNodes(context).OfType<IComment>().ToList())\n             {\n+                var escapedText = comment.TextContent.Replace(\"<\", \"&lt;\").Replace(\">\", \"&gt;\");\n+                if (escapedText != comment.TextContent)\n+                    comment.TextContent = escapedText;\n+\n                 var e = new RemovingCommentEventArgs(comment);\n                 OnRemovingComment(e);\n \n@@ -463,6 +467,16 @@ private void RemoveComments(INode context)\n \n         private void DoSanitize(IHtmlDocument dom, IParentNode context, string baseUrl = \"\")\n         {\n+            // always encode text in raw data content\n+            foreach (var tag in context.QuerySelectorAll(\"*\").Where(t => t.Flags.HasFlag(NodeFlags.LiteralText) && !string.IsNullOrWhiteSpace(t.InnerHtml)))\n+            {\n+                var escapedHtml = tag.InnerHtml.Replace(\"<\", \"&lt;\").Replace(\">\", \"&gt;\");\n+                if (escapedHtml != tag.InnerHtml)\n+                    tag.InnerHtml = escapedHtml;\n+                if (tag.InnerHtml != escapedHtml) // setting InnerHtml does not work for noscript\n+                    tag.SetInnerText(escapedHtml);\n+            }\n+\n             // remove disallowed tags\n             foreach (var tag in context.QuerySelectorAll(\"*\").Where(t => !IsAllowedTag(t)).ToList())\n             {"
        },
        {
          "filename": "test/HtmlSanitizer.Tests/Tests.cs",
          "status": "modified",
          "additions": 56,
          "deletions": 1,
          "patch": "@@ -3248,7 +3248,7 @@ public void StyleByPassTest()\n         var sanitized = sanitizer.Sanitize(html, \"http://www.example.com\");\n \n         // Assert\n-        Assert.Equal(\"aaabc<style>x[x=\\\"\\\\3c/style>\\\\3cimg src onerror=alert(1)>\\\"] { }</style>\", sanitized);\n+        Assert.Equal(\"aaabc<style>x[x=\\\"\\\\3c/style&gt;\\\\3cimg src onerror=alert(1)&gt;\\\"] { }</style>\", sanitized);\n     }\n \n     [Fact]\n@@ -3497,4 +3497,59 @@ public void Number469Test()\n         var sanitized = sanitizer.Sanitize(html);\n         Assert.Equal(@\"<div style=\"\"height: 0; background-image: url(&quot;https://example.com/1.jpg&quot;), url(&quot;https://example.com/2.jpg&quot;), url(&quot;https://example.com/3.jpg&quot;); display: none\"\"></div>\", sanitized);\n     }\n+\n+    [Fact]\n+    public void BypassTest()\n+    {\n+        var sanitizer = new HtmlSanitizer();\n+        sanitizer.AllowedTags.Add(\"svg\");\n+        sanitizer.AllowedTags.Add(\"title\");\n+        sanitizer.AllowedTags.Add(\"xmp\");\n+        var bypass = @\"<svg></p><title><xmp></title><img src=x onerror=alert(1)></xmp></title>\";\n+        var sanitized = sanitizer.Sanitize(bypass, \"https://www.example.com\");\n+        var expected = @\"<svg><p></p><title><xmp>&lt;/title&gt;&lt;img src=x onerror=alert(1)&gt;</xmp></title></svg>\";\n+        Assert.Equal(expected, sanitized);\n+    }\n+\n+    [Fact]\n+    public void Bypass2Test()\n+    {\n+        var sanitizer = new HtmlSanitizer();\n+        sanitizer.AllowedTags.Add(\"form\");\n+        sanitizer.AllowedTags.Add(\"math\");\n+        sanitizer.AllowedTags.Add(\"mtext\");\n+        sanitizer.AllowedTags.Add(\"mglyph\");\n+        sanitizer.AllowedTags.Add(\"xmp\");\n+        var bypass = @\"<form><math><mtext></form><form><mglyph><xmp></math><img src onerror=alert(1)>\";\n+        var sanitized = sanitizer.Sanitize(bypass, \"https://www.example.com\");\n+        var expected = @\"<form><math><mtext><form><mglyph><xmp>&lt;/math&gt;&lt;img src onerror=alert(1)&gt;</xmp></mglyph></form></mtext></math></form>\";\n+        Assert.Equal(expected, sanitized);\n+    }\n+\n+    [Fact]\n+    public void Bypass3Test()\n+    {\n+        var sanitizer = new HtmlSanitizer();\n+        sanitizer.AllowedTags.Add(\"svg\");\n+        sanitizer.AllowedTags.Add(\"title\");\n+        sanitizer.AllowedTags.Add(\"noscript\");\n+        var bypass = @\"<svg></p><title><noscript></title><img src=x onerror=alert(1)></noscript></title>\";\n+        var sanitized = sanitizer.Sanitize(bypass, \"https://www.example.com\");\n+        var expected = \"<svg><p></p><title><noscript>&lt;/title&gt;&lt;img src=x onerror=alert(1)&gt;</noscript></title></svg>\";\n+        Assert.Equal(expected, sanitized);\n+    }\n+\n+    [Fact]\n+    public void Bypass4Test()\n+    {\n+        var sanitizer = new HtmlSanitizer();\n+        sanitizer.AllowedTags.Add(\"svg\");\n+        sanitizer.AllowedTags.Add(\"p\");\n+        sanitizer.AllowedTags.Add(\"style\");\n+        sanitizer.RemovingComment += (s, e) => e.Cancel = true;\n+        var bypass = @\"<svg></p><style><!--</style><img src=x onerror=alert(1)>-->\";\n+        var sanitized = sanitizer.Sanitize(bypass, \"https://www.example.com\");\n+        var expected = \"<svg><p></p><style><!--&lt;/style&gt;&lt;img src=x onerror=alert(1)&gt;--></style></svg>\";\n+        Assert.Equal(expected, sanitized);\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1c05d6ccf98cd69ef08f2b4942f03fd680f78a80",
            "date": "2024-07-26T15:05:45Z",
            "author_login": "mganss"
          },
          {
            "sha": "27e42977e1ff569fc6f82adb4eff8e72e92960da",
            "date": "2024-07-26T15:04:20Z",
            "author_login": "mganss"
          },
          {
            "sha": "28c725cbdb69272d8a9d32893672685337c42879",
            "date": "2024-07-26T14:51:49Z",
            "author_login": "leniency"
          },
          {
            "sha": "83d115ca3fb2700f748a5375beade75a787c9c4a",
            "date": "2024-07-25T20:58:39Z",
            "author_login": "leniency"
          },
          {
            "sha": "f71dbb5997f441c3d07978bba0c867acee4535fd",
            "date": "2024-04-16T16:26:17Z",
            "author_login": "mganss"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "HtmlSanitizer is a .NET library for cleaning HTML fragments and documents from constructs that can lead to XSS attacks. The vulnerability occurs in configurations where foreign content is allowed, i.e. either `svg` or `math` are in the list of allowed elements. In the case an application sanitizes user input with a vulnerable configuration, an attacker could bypass the sanitization and inject arbitrary HTML, including JavaScript code. Note that in the default configuration the vulnerability is not present. The vulnerability has been fixed in versions 8.0.723 and 8.1.722-beta (preview version).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-05T14:15:09.737",
    "last_modified": "2024-11-21T08:25:48.207",
    "fix_date": "2023-10-04T14:26:07Z"
  },
  "references": [
    {
      "url": "https://github.com/mganss/HtmlSanitizer/commit/ab29319866c020f0cc11e6b92228cd8039196c6e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mganss/HtmlSanitizer/security/advisories/GHSA-43cp-6p3q-2pc4",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/mganss/HtmlSanitizer/commit/ab29319866c020f0cc11e6b92228cd8039196c6e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mganss/HtmlSanitizer/security/advisories/GHSA-43cp-6p3q-2pc4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.575824",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "HtmlSanitizer",
    "owner": "mganss",
    "created_at": "2013-06-25T15:20:43Z",
    "updated_at": "2025-01-25T14:58:11Z",
    "pushed_at": "2024-07-26T15:35:49Z",
    "size": 2668,
    "stars": 1579,
    "forks": 205,
    "open_issues": 18,
    "watchers": 1579,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C#": 266667
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:16:49.056138"
  }
}