{
  "cve_id": "CVE-2023-44464",
  "github_data": {
    "repository": "pretix/pretix",
    "fix_commit": "8583bfb7d97263e9e923ad5d7f123ca1cadc8f2e",
    "related_commits": [
      "8583bfb7d97263e9e923ad5d7f123ca1cadc8f2e",
      "8583bfb7d97263e9e923ad5d7f123ca1cadc8f2e"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "8583bfb7d97263e9e923ad5d7f123ca1cadc8f2e",
      "commit_date": "2023-09-11T16:57:08Z",
      "author": {
        "login": "raphaelm",
        "type": "User",
        "stats": {
          "total_commits": 8712,
          "average_weekly_commits": 16.044198895027623,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 497
        }
      },
      "commit_message": {
        "title": "[SECURITY] Do not allow Pillow to parse EPS files",
        "length": 49,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 87,
        "additions": 60,
        "deletions": 27
      },
      "files": [
        {
          "filename": "src/pretix/api/views/order.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -26,6 +26,7 @@\n from zoneinfo import ZoneInfo\n \n import django_filters\n+from django.conf import settings\n from django.db import transaction\n from django.db.models import (\n     Exists, F, OuterRef, Prefetch, Q, Subquery, prefetch_related_objects,\n@@ -1191,7 +1192,7 @@ def pdf_image(self, request, key, **kwargs):\n             ftype, ignored = mimetypes.guess_type(image_file.name)\n             extension = os.path.basename(image_file.name).split('.')[-1]\n         else:\n-            img = Image.open(image_file)\n+            img = Image.open(image_file, formats=settings.PILLOW_FORMATS_QUESTIONS_IMAGE)\n             ftype = Image.MIME[img.format]\n             extensions = {\n                 'GIF': 'gif', 'TIFF': 'tif', 'BMP': 'bmp', 'JPEG': 'jpg', 'PNG': 'png'"
        },
        {
          "filename": "src/pretix/base/forms/questions.py",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -500,14 +500,14 @@ def to_python(self, data):\n                 file = BytesIO(data['content'])\n \n         try:\n-            image = Image.open(file)\n+            image = Image.open(file, formats=settings.PILLOW_FORMATS_QUESTIONS_IMAGE)\n             # verify() must be called immediately after the constructor.\n             image.verify()\n \n             # We want to do more than just verify(), so we need to re-open the file\n             if hasattr(file, 'seek'):\n                 file.seek(0)\n-            image = Image.open(file)\n+            image = Image.open(file, formats=settings.PILLOW_FORMATS_QUESTIONS_IMAGE)\n \n             # load() is a potential DoS vector (see Django bug #18520), so we verify the size first\n             if image.width > 10_000 or image.height > 10_000:\n@@ -566,7 +566,7 @@ def to_python(self, data):\n         return f\n \n     def __init__(self, *args, **kwargs):\n-        kwargs.setdefault('ext_whitelist', (\".png\", \".jpg\", \".jpeg\", \".jfif\", \".tif\", \".tiff\", \".bmp\"))\n+        kwargs.setdefault('ext_whitelist', settings.FILE_UPLOAD_EXTENSIONS_QUESTION_IMAGE)\n         kwargs.setdefault('max_size', settings.FILE_UPLOAD_MAX_SIZE_IMAGE)\n         super().__init__(*args, **kwargs)\n \n@@ -826,11 +826,7 @@ def __init__(self, *args, **kwargs):\n                         help_text=help_text,\n                         initial=initial.file if initial else None,\n                         widget=UploadedFileWidget(position=pos, event=event, answer=initial),\n-                        ext_whitelist=(\n-                            \".png\", \".jpg\", \".gif\", \".jpeg\", \".pdf\", \".txt\", \".docx\", \".gif\", \".svg\",\n-                            \".pptx\", \".ppt\", \".doc\", \".xlsx\", \".xls\", \".jfif\", \".heic\", \".heif\", \".pages\",\n-                            \".bmp\", \".tif\", \".tiff\"\n-                        ),\n+                        ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_OTHER,\n                         max_size=settings.FILE_UPLOAD_MAX_SIZE_OTHER,\n                     )\n             elif q.type == Question.TYPE_DATE:"
        },
        {
          "filename": "src/pretix/base/models/orders.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1246,7 +1246,7 @@ def frontend_file_url(self):\n \n     @property\n     def is_image(self):\n-        return any(self.file.name.lower().endswith(e) for e in ('.jpg', '.png', '.gif', '.tiff', '.bmp', '.jpeg'))\n+        return any(self.file.name.lower().endswith(e) for e in settings.FILE_UPLOAD_EXTENSIONS_QUESTION_IMAGE)\n \n     @property\n     def file_name(self):"
        },
        {
          "filename": "src/pretix/base/pdf.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -521,7 +521,7 @@ def get_answer(op, order, event, question_id, etag):\n         else:\n             a = op.answers.filter(question_id=question_id).first() or a\n \n-        if not a or not a.file or not any(a.file.name.lower().endswith(e) for e in (\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".tif\", \".tiff\")):\n+        if not a or not a.file or not any(a.file.name.lower().endswith(e) for e in settings.FILE_UPLOAD_EXTENSIONS_QUESTION_IMAGE):\n             return None\n         else:\n             if etag:"
        },
        {
          "filename": "src/pretix/base/settings.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -2793,7 +2793,7 @@ def unserialize(cls, s):\n         'form_class': ExtFileField,\n         'form_kwargs': dict(\n             label=_('Header image'),\n-            ext_whitelist=(\".png\", \".jpg\", \".gif\", \".jpeg\"),\n+            ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_IMAGE,\n             max_size=settings.FILE_UPLOAD_MAX_SIZE_IMAGE,\n             help_text=_('If you provide a logo image, we will by default not show your event name and date '\n                         'in the page header. By default, we show your logo with a size of up to 1140x120 pixels. You '\n@@ -2836,7 +2836,7 @@ def unserialize(cls, s):\n         'form_class': ExtFileField,\n         'form_kwargs': dict(\n             label=_('Header image'),\n-            ext_whitelist=(\".png\", \".jpg\", \".gif\", \".jpeg\"),\n+            ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_IMAGE,\n             max_size=settings.FILE_UPLOAD_MAX_SIZE_IMAGE,\n             help_text=_('If you provide a logo image, we will by default not show your organization name '\n                         'in the page header. By default, we show your logo with a size of up to 1140x120 pixels. You '\n@@ -2876,7 +2876,7 @@ def unserialize(cls, s):\n         'form_class': ExtFileField,\n         'form_kwargs': dict(\n             label=_('Social media image'),\n-            ext_whitelist=(\".png\", \".jpg\", \".gif\", \".jpeg\"),\n+            ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_IMAGE,\n             max_size=settings.FILE_UPLOAD_MAX_SIZE_IMAGE,\n             help_text=_('This picture will be used as a preview if you post links to your ticket shop on social media. '\n                         'Facebook advises to use a picture size of 1200 x 630 pixels, however some platforms like '\n@@ -2897,7 +2897,7 @@ def unserialize(cls, s):\n         'form_class': ExtFileField,\n         'form_kwargs': dict(\n             label=_('Logo image'),\n-            ext_whitelist=(\".png\", \".jpg\", \".gif\", \".jpeg\"),\n+            ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_IMAGE,\n             required=False,\n             max_size=settings.FILE_UPLOAD_MAX_SIZE_IMAGE,\n             help_text=_('We will show your logo with a maximal height and width of 2.5 cm.')"
        },
        {
          "filename": "src/pretix/control/forms/__init__.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -127,7 +127,7 @@ def name(self):\n \n         @property\n         def is_img(self):\n-            return any(self.file.name.lower().endswith(e) for e in ('.jpg', '.jpeg', '.png', '.gif'))\n+            return any(self.file.name.lower().endswith(e) for e in settings.FILE_UPLOAD_EXTENSIONS_IMAGE)\n \n         def __str__(self):\n             if hasattr(self.file, 'display_name'):"
        },
        {
          "filename": "src/pretix/control/forms/organizer.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -420,7 +420,7 @@ class OrganizerSettingsForm(SettingsForm):\n \n     organizer_logo_image = ExtFileField(\n         label=_('Header image'),\n-        ext_whitelist=(\".png\", \".jpg\", \".gif\", \".jpeg\"),\n+        ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_IMAGE,\n         max_size=settings.FILE_UPLOAD_MAX_SIZE_IMAGE,\n         required=False,\n         help_text=_('If you provide a logo image, we will by default not show your organization name '\n@@ -430,7 +430,7 @@ class OrganizerSettingsForm(SettingsForm):\n     )\n     favicon = ExtFileField(\n         label=_('Favicon'),\n-        ext_whitelist=(\".ico\", \".png\", \".jpg\", \".gif\", \".jpeg\"),\n+        ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_FAVICON,\n         required=False,\n         max_size=settings.FILE_UPLOAD_MAX_SIZE_FAVICON,\n         help_text=_('If you provide a favicon, we will show it instead of the default pretix icon. '"
        },
        {
          "filename": "src/pretix/helpers/images.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -22,6 +22,7 @@\n import logging\n from io import BytesIO\n \n+from django.conf import settings\n from django.core.exceptions import ValidationError\n from django.utils.translation import gettext_lazy as _\n from PIL.Image import MAX_IMAGE_PIXELS, DecompressionBombError\n@@ -51,7 +52,7 @@ def validate_uploaded_file_for_valid_image(f):\n \n     try:\n         try:\n-            image = Image.open(file)\n+            image = Image.open(file, formats=settings.PILLOW_FORMATS_QUESTIONS_IMAGE)\n             # verify() must be called immediately after the constructor.\n             image.verify()\n         except DecompressionBombError:"
        },
        {
          "filename": "src/pretix/helpers/monkeypatching.py",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -21,6 +21,8 @@\n #\n from datetime import datetime\n \n+from PIL import Image\n+\n \n def monkeypatch_vobject_performance():\n     \"\"\"\n@@ -52,5 +54,19 @@ def new_tzinfo_eq(tzinfo1, tzinfo2, *args, **kwargs):\n     icalendar.tzinfo_eq = new_tzinfo_eq\n \n \n+def monkeypatch_pillow_safer():\n+    \"\"\"\n+    Pillow supports many file formats, among them EPS. For EPS, Pillow loads GhostScript whenever GhostScript\n+    is installed (cannot officially be disabled). However, GhostScript is known for regular security vulnerabilities.\n+    We have no use of reading EPS files and usually prevent this by using `Image.open(\u2026, formats=[\u2026])` to disable EPS\n+    support explicitly. However, we are worried about our dependencies like reportlab using `Image.open` without the\n+    `formats=` parameter. Therefore, as a defense in depth approach, we monkeypatch EPS support away by modifying the\n+    internal image format registry of Pillow.\n+    \"\"\"\n+    if \"EPS\" in Image.ID:\n+        Image.ID.remove(\"EPS\")\n+\n+\n def monkeypatch_all_at_ready():\n     monkeypatch_vobject_performance()\n+    monkeypatch_pillow_safer()"
        },
        {
          "filename": "src/pretix/helpers/reportlab.py",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -20,8 +20,9 @@\n # <https://www.gnu.org/licenses/>.\n #\n from arabic_reshaper import ArabicReshaper\n+from django.conf import settings\n from django.utils.functional import SimpleLazyObject\n-from PIL.Image import Resampling\n+from PIL import Image\n from reportlab.lib.utils import ImageReader\n \n \n@@ -33,7 +34,7 @@ def resize(self, width, height, dpi):\n             height = width * self._image.size[1] / self._image.size[0]\n         self._image.thumbnail(\n             size=(int(width * dpi / 72), int(height * dpi / 72)),\n-            resample=Resampling.BICUBIC\n+            resample=Image.Resampling.BICUBIC\n         )\n         self._data = None\n         return width, height\n@@ -44,6 +45,9 @@ def _jpeg_fh(self):\n         # (smaller) size of the modified image.\n         return None\n \n+    def _read_image(self, fp):\n+        return Image.open(fp, formats=settings.PILLOW_FORMATS_IMAGE)\n+\n \n reshaper = SimpleLazyObject(lambda: ArabicReshaper(configuration={\n     'delete_harakat': True,"
        },
        {
          "filename": "src/pretix/helpers/thumb.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -23,6 +23,7 @@\n import math\n from io import BytesIO\n \n+from django.conf import settings\n from django.core.files.base import ContentFile\n from django.core.files.storage import default_storage\n from PIL import Image, ImageOps, ImageSequence\n@@ -165,7 +166,7 @@ def resize_image(image, size):\n \n def create_thumbnail(sourcename, size):\n     source = default_storage.open(sourcename)\n-    image = Image.open(BytesIO(source.read()))\n+    image = Image.open(BytesIO(source.read()), formats=settings.PILLOW_FORMATS_QUESTIONS_IMAGE)\n     try:\n         image.load()\n     except:"
        },
        {
          "filename": "src/pretix/plugins/sendmail/forms.py",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -76,11 +76,7 @@ class BaseMailForm(FormPlaceholderMixin, forms.Form):\n     attachment = CachedFileField(\n         label=_(\"Attachment\"),\n         required=False,\n-        ext_whitelist=(\n-            \".png\", \".jpg\", \".gif\", \".jpeg\", \".pdf\", \".txt\", \".docx\", \".gif\", \".svg\",\n-            \".pptx\", \".ppt\", \".doc\", \".xlsx\", \".xls\", \".jfif\", \".heic\", \".heif\", \".pages\",\n-            \".bmp\", \".tif\", \".tiff\"\n-        ),\n+        ext_whitelist=settings.FILE_UPLOAD_EXTENSIONS_EMAIL_ATTACHMENT,\n         help_text=_('Sending an attachment increases the chance of your email not arriving or being sorted into spam folders. We recommend only using PDFs '\n                     'of no more than 2 MB in size.'),\n         max_size=settings.FILE_UPLOAD_MAX_SIZE_EMAIL_ATTACHMENT"
        },
        {
          "filename": "src/pretix/settings.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -733,4 +733,22 @@ def traces_sampler(sampling_context):\n FILE_UPLOAD_MAX_SIZE_EMAIL_AUTO_ATTACHMENT = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_email_auto_attachment\", fallback=1)\n FILE_UPLOAD_MAX_SIZE_OTHER = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_other\", fallback=10)\n \n+# Allowed file extensions for various places plus matching Pillow formats.\n+# Never allow EPS, it is full of dangerous bugs.\n+FILE_UPLOAD_EXTENSIONS_IMAGE = (\".png\", \".jpg\", \".gif\", \".jpeg\")\n+PILLOW_FORMATS_IMAGE = ('PNG', 'GIF', 'JPEG')\n+\n+FILE_UPLOAD_EXTENSIONS_FAVICON = (\".ico\", \".png\", \"jpg\", \".gif\", \".jpeg\")\n+\n+FILE_UPLOAD_EXTENSIONS_QUESTION_IMAGE = (\".png\", \"jpg\", \".gif\", \".jpeg\", \".bmp\", \".tif\", \".tiff\", \".jfif\")\n+PILLOW_FORMATS_QUESTIONS_IMAGE = ('PNG', 'GIF', 'JPEG', 'BMP', 'TIFF')\n+\n+FILE_UPLOAD_EXTENSIONS_EMAIL_ATTACHMENT = (\n+    \".png\", \".jpg\", \".gif\", \".jpeg\", \".pdf\", \".txt\", \".docx\", \".gif\", \".svg\",\n+    \".pptx\", \".ppt\", \".doc\", \".xlsx\", \".xls\", \".jfif\", \".heic\", \".heif\", \".pages\",\n+    \".bmp\", \".tif\", \".tiff\"\n+)\n+FILE_UPLOAD_EXTENSIONS_OTHER = FILE_UPLOAD_EXTENSIONS_EMAIL_ATTACHMENT\n+\n+\n DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'  # sadly. we would prefer BigInt, and should use it for all new models but the migration will be hard"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ca8d253114cdb3d0d7eaaebf029996cb834904cb",
            "date": "2025-01-24T15:19:55Z",
            "author_login": "luelista"
          },
          {
            "sha": "f014a9bbd342d21a08bfb880b20bfccedb56909c",
            "date": "2025-01-24T13:48:28Z",
            "author_login": "luelista"
          },
          {
            "sha": "3e5bfb44d2e56e551e28cb1b3fb51882832bdf8f",
            "date": "2025-01-24T13:48:28Z",
            "author_login": "luelista"
          },
          {
            "sha": "1736efbdc31040fde8ba166afb2bbe4534b6783f",
            "date": "2025-01-24T12:56:08Z",
            "author_login": "luelista"
          },
          {
            "sha": "5cd7959e863324160af1dfdb3aa0fd0b7605a9ce",
            "date": "2025-01-24T13:07:55Z",
            "author_login": "luelista"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "pretix before 2023.7.2 allows Pillow to parse EPS files.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-29T05:15:46.757",
    "last_modified": "2024-11-21T08:25:56.100",
    "fix_date": "2023-09-11T16:57:08Z"
  },
  "references": [
    {
      "url": "https://github.com/pretix/pretix/commit/8583bfb7d97263e9e923ad5d7f123ca1cadc8f2e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pretix/pretix/compare/v2023.7.1...v2023.7.2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pretix/pretix/tags",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://pretix.eu/about/de/blog/20230912-release-2023-7-2/",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://pretix.eu/about/en/ticketing",
      "source": "cve@mitre.org",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/pretix/pretix/commit/8583bfb7d97263e9e923ad5d7f123ca1cadc8f2e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pretix/pretix/compare/v2023.7.1...v2023.7.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pretix/pretix/tags",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://pretix.eu/about/de/blog/20230912-release-2023-7-2/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://pretix.eu/about/en/ticketing",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.552082",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "pretix",
    "owner": "pretix",
    "created_at": "2014-09-08T13:10:38Z",
    "updated_at": "2025-01-24T18:35:38Z",
    "pushed_at": "2025-01-24T19:13:00Z",
    "size": 603404,
    "stars": 1963,
    "forks": 486,
    "open_issues": 168,
    "watchers": 1963,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 10463517,
      "HTML": 1757788,
      "JavaScript": 708416,
      "SCSS": 481138,
      "Vue": 76379,
      "CSS": 5876,
      "Dockerfile": 2279,
      "Shell": 1785,
      "Makefile": 1000
    },
    "commit_activity": {
      "total_commits_last_year": 1251,
      "avg_commits_per_week": 24.057692307692307,
      "days_active_last_year": 249
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:21:57.218596"
  }
}