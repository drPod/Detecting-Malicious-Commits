{
  "cve_id": "CVE-2023-45669",
  "github_data": {
    "repository": "webauthn4j/webauthn4j-spring-security",
    "fix_commit": "129700d74d83f9b9a82bf88ebc63707e3cb0a725",
    "related_commits": [
      "129700d74d83f9b9a82bf88ebc63707e3cb0a725",
      "129700d74d83f9b9a82bf88ebc63707e3cb0a725"
    ],
    "patch_url": "https://github.com/webauthn4j/webauthn4j-spring-security/commit/129700d74d83f9b9a82bf88ebc63707e3cb0a725.patch",
    "fix_commit_details": {
      "sha": "129700d74d83f9b9a82bf88ebc63707e3cb0a725",
      "commit_date": "2023-10-16T14:32:50Z",
      "author": {
        "login": "ynojima",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-v9hx-v6vf-g36j",
        "length": 58,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 29,
        "additions": 18,
        "deletions": 11
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -24,7 +24,7 @@ If you are using Maven, just add the webauthn4j-spring-security as a dependency:\n <properties>\n   ...\n   <!-- Use the latest version whenever possible. -->\n-  <webauthn4j-spring-security.version>0.9.0.RELEASE</webauthn4j-spring-security.version>\n+  <webauthn4j-spring-security.version>0.9.1.RELEASE</webauthn4j-spring-security.version>\n   ...\n </properties>\n "
        },
        {
          "filename": "gradle.properties",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -13,5 +13,5 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n #\n-webAuthn4JSpringSecurityVersion=0.9.1-SNAPSHOT\n-latestReleasedWebAuthn4JSpringSecurityVersion=0.9.0.RELEASE\n+webAuthn4JSpringSecurityVersion=0.9.1.RELEASE\n+latestReleasedWebAuthn4JSpringSecurityVersion=0.9.1.RELEASE"
        },
        {
          "filename": "samples/spa/src/test/java/e2e/RegistrationAndAuthenticationE2ETest.java",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "patch": "@@ -16,6 +16,7 @@\n \n package e2e;\n \n+import com.webauthn4j.springframework.security.authenticator.WebAuthnAuthenticatorService;\n import com.webauthn4j.springframework.security.webauthn.sample.SampleSPA;\n import e2e.page.AuthenticatorLoginComponent;\n import e2e.page.PasswordLoginComponent;\n@@ -34,18 +35,24 @@\n import org.openqa.selenium.support.ui.WebDriverWait;\n import org.openqa.selenium.virtualauthenticator.HasVirtualAuthenticator;\n import org.openqa.selenium.virtualauthenticator.VirtualAuthenticatorOptions;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import java.time.Duration;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n @RunWith(SpringRunner.class)\n @SpringBootTest(classes = SampleSPA.class, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)\n public class RegistrationAndAuthenticationE2ETest {\n \n     private WebDriver driver;\n     private WebDriverWait wait;\n \n+    @Autowired\n+    private WebAuthnAuthenticatorService webAuthnAuthenticatorService;\n+\n     @BeforeClass\n     public static void setupClassTest() {\n         WebDriverManager.chromedriver().setup();\n@@ -86,8 +93,10 @@ public void test() {\n         signupComponent.waitRegisterClickable();\n         signupComponent.clickRegister();\n \n-        // Password authentication\n         wait.until(ExpectedConditions.urlToBe(\"http://localhost:8080/angular/login\"));\n+        long counterValueAtRegistrationPhase = webAuthnAuthenticatorService.loadAuthenticatorsByUserPrincipal(\"john.doe@example.com\").get(0).getCounter();\n+\n+        // Password authentication\n         PasswordLoginComponent passwordLoginComponent = new PasswordLoginComponent(driver);\n         passwordLoginComponent.setUsername(\"john.doe@example.com\");\n         passwordLoginComponent.setPassword(\"password\");\n@@ -98,6 +107,10 @@ public void test() {\n         // nop\n \n         wait.until(ExpectedConditions.urlToBe(\"http://localhost:8080/angular/profile\"));\n+        long counterValueAtAuthenticationPhase = webAuthnAuthenticatorService.loadAuthenticatorsByUserPrincipal(\"john.doe@example.com\").get(0).getCounter();\n+\n+        assertThat(counterValueAtAuthenticationPhase).isGreaterThan(counterValueAtRegistrationPhase);\n+\n         ProfileComponent profileComponent = new ProfileComponent(driver);\n \n     }"
        },
        {
          "filename": "webauthn4j-spring-security-core/src/main/java/com/webauthn4j/springframework/security/WebAuthnAuthenticationProvider.java",
          "status": "modified",
          "additions": 1,
          "deletions": 7,
          "patch": "@@ -136,13 +136,7 @@ void doAuthenticate(WebAuthnAssertionAuthenticationToken authenticationToken, We\n         );\n         AuthenticationParameters authenticationParameters = new AuthenticationParameters(\n                 parameters.getServerProperty(),\n-                new AuthenticatorImpl(\n-                        webAuthnAuthenticator.getAttestedCredentialData(),\n-                        webAuthnAuthenticator.getAttestationStatement(),\n-                        webAuthnAuthenticator.getCounter(),\n-                        webAuthnAuthenticator.getTransports(),\n-                        webAuthnAuthenticator.getClientExtensions(),\n-                        webAuthnAuthenticator.getAuthenticatorExtensions()),\n+                webAuthnAuthenticator,\n                 null,\n                 parameters.isUserVerificationRequired(),\n                 parameters.isUserPresenceRequired()"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ca5ed516e01cccd84b281c92e87eda21dd6aac3a",
            "date": "2025-01-13T13:25:45Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "73dcbb37f7f4a21a191dcf59f780fc92d06507ab",
            "date": "2025-01-13T13:15:50Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "eabbe0f45a78f81ec61ac6b99d3d732c1c6c46ba",
            "date": "2025-01-13T13:14:54Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "9037234bdaff0ca5f11ae5a785601fbe0eb62e87",
            "date": "2025-01-13T13:11:23Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b42f6b60ef3fed1bf68c639f7b1dbe6f0c839968",
            "date": "2025-01-13T13:10:45Z",
            "author_login": "ynojima"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-287",
    "description": "WebAuthn4J Spring Security provides Web Authentication specification support for Spring applications. Affected versions are subject to improper signature counter value handling. A flaw was found in webauthn4j-spring-security-core. When an authneticator returns an incremented signature counter value during authentication, webauthn4j-spring-security-core does not properly persist the value, which means cloned authenticator detection does not work. An attacker who cloned valid authenticator in some way can use the cloned authenticator without being detected. This issue has been addressed in version `0.9.1.RELEASE`. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-10-16T19:15:11.167",
    "last_modified": "2024-11-21T08:27:10.693",
    "fix_date": "2023-10-16T14:32:50Z"
  },
  "references": [
    {
      "url": "https://github.com/webauthn4j/webauthn4j-spring-security/commit/129700d74d83f9b9a82bf88ebc63707e3cb0a725",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/webauthn4j/webauthn4j-spring-security/security/advisories/GHSA-v9hx-v6vf-g36j",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.w3.org/TR/2021/REC-webauthn-2-20210408/#sctn-sign-counter",
      "source": "security-advisories@github.com",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://github.com/webauthn4j/webauthn4j-spring-security/commit/129700d74d83f9b9a82bf88ebc63707e3cb0a725",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/webauthn4j/webauthn4j-spring-security/security/advisories/GHSA-v9hx-v6vf-g36j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.w3.org/TR/2021/REC-webauthn-2-20210408/#sctn-sign-counter",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Technical Description"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.606578",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "webauthn4j-spring-security",
    "owner": "webauthn4j",
    "created_at": "2018-03-17T16:01:11Z",
    "updated_at": "2025-01-13T13:25:50Z",
    "pushed_at": "2025-01-13T13:25:53Z",
    "size": 25055,
    "stars": 199,
    "forks": 48,
    "open_issues": 0,
    "watchers": 199,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 457059
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:58:28.927043"
  }
}