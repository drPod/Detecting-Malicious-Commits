{
  "cve_id": "CVE-2023-45683",
  "github_data": {
    "repository": "crewjam/saml",
    "fix_commit": "b07b16cf83c4171d16da4d85608cb827f183cd79",
    "related_commits": [
      "b07b16cf83c4171d16da4d85608cb827f183cd79",
      "b07b16cf83c4171d16da4d85608cb827f183cd79"
    ],
    "patch_url": "https://github.com/crewjam/saml/commit/b07b16cf83c4171d16da4d85608cb827f183cd79.patch",
    "fix_commit_details": {
      "sha": "b07b16cf83c4171d16da4d85608cb827f183cd79",
      "commit_date": "2023-10-14T14:18:46Z",
      "author": {
        "login": "crewjam",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-267v-3v32-g6q5",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 116,
        "additions": 116,
        "deletions": 0
      },
      "files": [
        {
          "filename": "metadata.go",
          "status": "modified",
          "additions": 107,
          "deletions": 0,
          "patch": "@@ -2,6 +2,8 @@ package saml\n \n import (\n \t\"encoding/xml\"\n+\t\"fmt\"\n+\t\"net/url\"\n \t\"time\"\n \n \t\"github.com/beevik/etree\"\n@@ -19,6 +21,9 @@ const HTTPArtifactBinding = \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"\n // SOAPBinding is the official URN for the SOAP binding (transport)\n const SOAPBinding = \"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"\n \n+// SOAPBindingV1 is the URN for the SOAP binding in SAML 1.0\n+const SOAPBindingV1 = \"urn:oasis:names:tc:SAML:1.0:bindings:SOAP-binding\"\n+\n // EntitiesDescriptor represents the SAML object of the same name.\n //\n // See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf \u00a72.3.1\n@@ -188,6 +193,76 @@ type Endpoint struct {\n \tResponseLocation string `xml:\"ResponseLocation,attr,omitempty\"`\n }\n \n+func checkEndpointLocation(binding string, location string) (string, error) {\n+\t// Within the SAML standard, the complex type EndpointType describes a\n+\t// SAML protocol binding endpoint at which a SAML entity can be sent\n+\t// protocol messages. In particular, the location of an endpoint type is\n+\t// defined as follows in the Metadata for the OASIS Security Assertion\n+\t// Markup Language (SAML) V2.0 - 2.2.2 Complex Type EndpointType:\n+\t//\n+\t//   Location [Required] A required URI attribute that specifies the\n+\t//   location of the endpoint. The allowable syntax of this URI depends\n+\t//   on the protocol binding.\n+\tswitch binding {\n+\tcase HTTPPostBinding,\n+\t\tHTTPRedirectBinding,\n+\t\tHTTPArtifactBinding,\n+\t\tSOAPBinding,\n+\t\tSOAPBindingV1:\n+\t\tlocationURL, err := url.Parse(location)\n+\t\tif err != nil {\n+\t\t\treturn \"\", fmt.Errorf(\"invalid url %q: %w\", location, err)\n+\t\t}\n+\t\tswitch locationURL.Scheme {\n+\t\tcase \"http\", \"https\":\n+\t\t// ok\n+\t\tdefault:\n+\t\t\treturn \"\", fmt.Errorf(\"invalid url scheme %q for binding %q\",\n+\t\t\t\tlocationURL.Scheme, binding)\n+\t\t}\n+\tdefault:\n+\t\t// We don't know what form location should take, but the protocol\n+\t\t// requires that we validate its syntax.\n+\t\t//\n+\t\t// In practice, lots of metadata contains random bindings, for example\n+\t\t// \"urn:mace:shibboleth:1.0:profiles:AuthnRequest\" from our own test suite.\n+\t\t//\n+\t\t// We can't fail, but we also can't allow a location parameter whose syntax we\n+\t\t// cannot verify. The least-bad course of action here is to set location to\n+\t\t// and empty string, and hope the caller doesn't care need it.\n+\t\tlocation = \"\"\n+\t}\n+\n+\treturn location, nil\n+}\n+\n+// UnmarshalXML implements xml.Unmarshaler\n+func (m *Endpoint) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n+\ttype Alias Endpoint\n+\taux := &struct {\n+\t\t*Alias\n+\t}{\n+\t\tAlias: (*Alias)(m),\n+\t}\n+\tif err := d.DecodeElement(aux, &start); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tvar err error\n+\tm.Location, err = checkEndpointLocation(m.Binding, m.Location)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif m.ResponseLocation != \"\" {\n+\t\tm.ResponseLocation, err = checkEndpointLocation(m.Binding, m.ResponseLocation)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\n+\n // IndexedEndpoint represents the SAML IndexedEndpointType object.\n //\n // See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf \u00a72.2.3\n@@ -199,6 +274,38 @@ type IndexedEndpoint struct {\n \tIsDefault        *bool   `xml:\"isDefault,attr\"`\n }\n \n+// UnmarshalXML implements xml.Unmarshaler\n+func (m *IndexedEndpoint) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n+\ttype Alias IndexedEndpoint\n+\taux := &struct {\n+\t\t*Alias\n+\t}{\n+\t\tAlias: (*Alias)(m),\n+\t}\n+\tif err := d.DecodeElement(aux, &start); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tvar err error\n+\tm.Location, err = checkEndpointLocation(m.Binding, m.Location)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\tif m.ResponseLocation != nil {\n+\t\tresponseLocation, err := checkEndpointLocation(m.Binding, *m.ResponseLocation)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif responseLocation != \"\" {\n+\t\t\tm.ResponseLocation = &responseLocation\n+\t\t} else {\n+\t\t\tm.ResponseLocation = nil\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\n+\n // SSODescriptor represents the SAML complex type SSODescriptor\n //\n // See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf \u00a72.4.2"
        },
        {
          "filename": "metadata_test.go",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -165,3 +165,11 @@ cvCsEFiJZ4AbF+DgmO6TarJ8O05t8zvnOwJlNCASPZRH/JmF8tX0hoHuAQ==`,\n \tassert.Check(t, err)\n \tgolden.Assert(t, string(buf), \"TestCanProduceSPMetadata_expected\")\n }\n+\n+func TestMetadataValidatesUrlSchemeForProtocolBinding(t *testing.T) {\n+\tbuf := golden.Get(t, \"TestMetadataValidatesUrlSchemeForProtocolBinding_metadata.xml\")\n+\n+\tmetadata := EntityDescriptor{}\n+\terr := xml.Unmarshal(buf, &metadata)\n+\tassert.Error(t, err, \"invalid url scheme \\\"javascript\\\" for binding \\\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\\\"\")\n+}"
        },
        {
          "filename": "testdata/TestMetadataValidatesUrlSchemeForProtocolBinding_metadata.xml",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+<?xml version='1.0' encoding='UTF-8'?><md:EntityDescriptor ID='_af805d1c-c2e3-444e-9cf5-efc664eeace6' entityID='https://dev.aa.kndr.org/users/auth/saml/metadata' validUntil='2001-02-03T04:05:06.789' cacheDuration='PT1H' xmlns:md='urn:oasis:names:tc:SAML:2.0:metadata' xmlns:saml='urn:oasis:names:tc:SAML:2.0:assertion'><md:SPSSODescriptor AuthnRequestsSigned='false' WantAssertionsSigned='false' protocolSupportEnumeration='urn:oasis:names:tc:SAML:2.0:protocol'><md:AssertionConsumerService Binding='urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST' Location='javascript:alert(true)' index='0' isDefault='true'/><md:AttributeConsumingService index='1' isDefault='true'><md:ServiceName xml:lang='en'>Required attributes</md:ServiceName><md:RequestedAttribute FriendlyName='Email address' Name='email' NameFormat='urn:oasis:names:tc:SAML:2.0:attrname-format:basic'/><md:RequestedAttribute FriendlyName='Full name' Name='name' NameFormat='urn:oasis:names:tc:SAML:2.0:attrname-format:basic'/><md:RequestedAttribute FriendlyName='Given name' Name='first_name' NameFormat='urn:oasis:names:tc:SAML:2.0:attrname-format:basic'/><md:RequestedAttribute FriendlyName='Family name' Name='last_name' NameFormat='urn:oasis:names:tc:SAML:2.0:attrname-format:basic'/></md:AttributeConsumingService></md:SPSSODescriptor></md:EntityDescriptor>\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bbccb7933d5f60512ebc6caec7120c604581983d",
            "date": "2024-07-20T11:07:57Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a32b643a25a46182499b1278293e265150056d89",
            "date": "2023-10-16T11:18:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b2c7702ef01c1ff83ac08159afcd3c5a678c6d52",
            "date": "2023-10-14T14:42:23Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "adb3ff5ed70dc743bcef17ac52b993eef1dc7992",
            "date": "2023-10-14T14:26:29Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5e8dc1f05e26c4cd518fd80643cdd7fdde04bb19",
            "date": "2023-10-14T14:25:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "github.com/crewjam/saml is a saml library for the go language. In affected versions the package does not validate the ACS Location URI according to the SAML binding being parsed. If abused, this flaw allows attackers to register malicious Service Providers at the IdP and inject Javascript in the ACS endpoint definition, achieving Cross-Site-Scripting (XSS) in the IdP context during the redirection at the end of a SAML SSO Flow. Consequently, an attacker may perform any authenticated action as the victim once the victim\u2019s browser loaded the SAML IdP initiated SSO link for the malicious service provider. Note: SP registration is commonly an unrestricted operation in IdPs, hence not requiring particular permissions or publicly accessible to ease the IdP interoperability. This issue is fixed in version 0.4.14. Users unable to upgrade may perform external validation of URLs provided in SAML metadata, or restrict the ability for end-users to upload arbitrary metadata.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-16T19:15:11.253",
    "last_modified": "2024-11-21T08:27:12.723",
    "fix_date": "2023-10-14T14:18:46Z"
  },
  "references": [
    {
      "url": "https://github.com/crewjam/saml/commit/b07b16cf83c4171d16da4d85608cb827f183cd79",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crewjam/saml/security/advisories/GHSA-267v-3v32-g6q5",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/crewjam/saml/commit/b07b16cf83c4171d16da4d85608cb827f183cd79",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crewjam/saml/security/advisories/GHSA-267v-3v32-g6q5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:10.606729",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saml",
    "owner": "crewjam",
    "created_at": "2015-11-30T04:42:00Z",
    "updated_at": "2025-01-04T20:55:42Z",
    "pushed_at": "2024-08-16T15:28:18Z",
    "size": 1062,
    "stars": 981,
    "forks": 443,
    "open_issues": 96,
    "watchers": 981,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 448628
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-14T13:19:54.125858"
  }
}