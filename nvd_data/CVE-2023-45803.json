{
  "cve_id": "CVE-2023-45803",
  "github_data": {
    "repository": "urllib3/urllib3",
    "fix_commit": "4e98d57809dacab1cbe625fddeec1a290c478ea9",
    "related_commits": [
      "4e98d57809dacab1cbe625fddeec1a290c478ea9",
      "4e98d57809dacab1cbe625fddeec1a290c478ea9"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "4e98d57809dacab1cbe625fddeec1a290c478ea9",
      "commit_date": "2023-10-17T18:07:33Z",
      "author": {
        "login": "illia-v",
        "type": "User",
        "stats": {
          "total_commits": 55,
          "average_weekly_commits": 0.0695322376738306,
          "total_additions": 4334,
          "total_deletions": 829,
          "weeks_active": 34
        }
      },
      "commit_message": {
        "title": "Bring 2.0.7 & 1.26.18 to main (#3161)",
        "length": 103,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 77,
        "additions": 73,
        "deletions": 4
      },
      "files": [
        {
          "filename": ".readthedocs.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -3,7 +3,7 @@ version: 2\n build:\n   os: ubuntu-22.04\n   tools:\n-    python: \"3\"\n+    python: \"3.11\"\n \n python:\n   install:"
        },
        {
          "filename": "CHANGES.rst",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -1,3 +1,8 @@\n+2.0.7 (2023-10-17)\n+==================\n+\n+* Made body stripped from HTTP requests changing the request method to GET after HTTP 303 \"See Other\" redirect responses.\n+\n 2.0.6 (2023-10-02)\n ==================\n \n@@ -167,6 +172,11 @@ Fixed\n * Fixed a socket leak if ``HTTPConnection.connect()`` fails (`#2571 <https://github.com/urllib3/urllib3/pull/2571>`__).\n * Fixed ``urllib3.contrib.pyopenssl.WrappedSocket`` and ``urllib3.contrib.securetransport.WrappedSocket`` close methods (`#2970 <https://github.com/urllib3/urllib3/issues/2970>`__)\n \n+1.26.18 (2023-10-17)\n+====================\n+\n+* Made body stripped from HTTP requests changing the request method to GET after HTTP 303 \"See Other\" redirect responses.\n+\n 1.26.17 (2023-10-02)\n ====================\n "
        },
        {
          "filename": "dummyserver/handlers.py",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -281,6 +281,12 @@ def encodingrequest(self, request: httputil.HTTPServerRequest) -> Response:\n     def headers(self, request: httputil.HTTPServerRequest) -> Response:\n         return Response(json.dumps(dict(request.headers)))\n \n+    def headers_and_params(self, request: httputil.HTTPServerRequest) -> Response:\n+        params = request_params(request)\n+        return Response(\n+            json.dumps({\"headers\": dict(request.headers), \"params\": params})\n+        )\n+\n     def multi_headers(self, request: httputil.HTTPServerRequest) -> Response:\n         return Response(json.dumps({\"headers\": list(request.headers.get_all())}))\n "
        },
        {
          "filename": "src/urllib3/_collections.py",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -10,6 +10,8 @@\n     # dependency, and is not available at runtime.\n     from typing import Protocol\n \n+    from typing_extensions import Self\n+\n     class HasGettableStringKeys(Protocol):\n         def keys(self) -> typing.Iterator[str]:\n             ...\n@@ -391,6 +393,24 @@ def getlist(\n             # meets our external interface requirement of `Union[List[str], _DT]`.\n             return vals[1:]\n \n+    def _prepare_for_method_change(self) -> Self:\n+        \"\"\"\n+        Remove content-specific header fields before changing the request\n+        method to GET or HEAD according to RFC 9110, Section 15.4.\n+        \"\"\"\n+        content_specific_headers = [\n+            \"Content-Encoding\",\n+            \"Content-Language\",\n+            \"Content-Location\",\n+            \"Content-Type\",\n+            \"Content-Length\",\n+            \"Digest\",\n+            \"Last-Modified\",\n+        ]\n+        for header in content_specific_headers:\n+            self.discard(header)\n+        return self\n+\n     # Backwards compatibility for httplib\n     getheaders = getlist\n     getallmatchingheaders = getlist"
        },
        {
          "filename": "src/urllib3/_version.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n # This file is protected via CODEOWNERS\n from __future__ import annotations\n \n-__version__ = \"2.0.6\"\n+__version__ = \"2.0.7\""
        },
        {
          "filename": "src/urllib3/connectionpool.py",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@\n from types import TracebackType\n \n from ._base_connection import _TYPE_BODY\n+from ._collections import HTTPHeaderDict\n from ._request_methods import RequestMethods\n from .connection import (\n     BaseSSLError,\n@@ -892,7 +893,11 @@ def urlopen(  # type: ignore[override]\n         redirect_location = redirect and response.get_redirect_location()\n         if redirect_location:\n             if response.status == 303:\n+                # Change the method according to RFC 9110, Section 15.4.4.\n                 method = \"GET\"\n+                # And lose the body not to transfer anything sensitive.\n+                body = None\n+                headers = HTTPHeaderDict(headers)._prepare_for_method_change()\n \n             try:\n                 retries = retries.increment(method, url, response=response, _pool=self)"
        },
        {
          "filename": "src/urllib3/poolmanager.py",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -7,7 +7,7 @@\n from types import TracebackType\n from urllib.parse import urljoin\n \n-from ._collections import RecentlyUsedContainer\n+from ._collections import HTTPHeaderDict, RecentlyUsedContainer\n from ._request_methods import RequestMethods\n from .connection import ProxyConfig\n from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool, port_by_scheme\n@@ -448,9 +448,12 @@ def urlopen(  # type: ignore[override]\n         # Support relative URLs for redirecting.\n         redirect_location = urljoin(url, redirect_location)\n \n-        # RFC 7231, Section 6.4.4\n         if response.status == 303:\n+            # Change the method according to RFC 9110, Section 15.4.4.\n             method = \"GET\"\n+            # And lose the body not to transfer anything sensitive.\n+            kw[\"body\"] = None\n+            kw[\"headers\"] = HTTPHeaderDict(kw[\"headers\"])._prepare_for_method_change()\n \n         retries = kw.get(\"retries\")\n         if not isinstance(retries, Retry):"
        },
        {
          "filename": "test/with_dummyserver/test_connectionpool.py",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -480,6 +480,17 @@ def test_redirect(self) -> None:\n             assert r.status == 200\n             assert r.data == b\"Dummy server!\"\n \n+    def test_303_redirect_makes_request_lose_body(self) -> None:\n+        with HTTPConnectionPool(self.host, self.port) as pool:\n+            response = pool.request(\n+                \"POST\",\n+                \"/redirect\",\n+                fields={\"target\": \"/headers_and_params\", \"status\": \"303 See Other\"},\n+            )\n+        data = response.json()\n+        assert data[\"params\"] == {}\n+        assert \"Content-Type\" not in HTTPHeaderDict(data[\"headers\"])\n+\n     def test_bad_connect(self) -> None:\n         with HTTPConnectionPool(\"badhost.invalid\", self.port) as pool:\n             with pytest.raises(MaxRetryError) as e:"
        },
        {
          "filename": "test/with_dummyserver/test_poolmanager.py",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -244,6 +244,20 @@ def test_redirect_without_preload_releases_connection(self) -> None:\n             assert r._pool.num_connections == 1\n             assert len(http.pools) == 1\n \n+    def test_303_redirect_makes_request_lose_body(self) -> None:\n+        with PoolManager() as http:\n+            response = http.request(\n+                \"POST\",\n+                f\"{self.base_url}/redirect\",\n+                fields={\n+                    \"target\": f\"{self.base_url}/headers_and_params\",\n+                    \"status\": \"303 See Other\",\n+                },\n+            )\n+        data = response.json()\n+        assert data[\"params\"] == {}\n+        assert \"Content-Type\" not in HTTPHeaderDict(data[\"headers\"])\n+\n     def test_unknown_scheme(self) -> None:\n         with PoolManager() as http:\n             unknown_scheme = \"unknown\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "37565dc3addfa92ac89b0a3ae7b0134e4f3d6c72",
            "date": "2025-01-17T16:02:57Z",
            "author_login": "illia-v"
          },
          {
            "sha": "bd8355c8c255d2e135c7ca01986a02bb76c578af",
            "date": "2025-01-17T16:02:47Z",
            "author_login": "illia-v"
          },
          {
            "sha": "d86e15d05a5c1b1d6152cecda98b894d3578cbde",
            "date": "2025-01-17T13:53:33Z",
            "author_login": "illia-v"
          },
          {
            "sha": "f5f876c985faa063c5ff40cb97f20fc021be6a98",
            "date": "2025-01-13T09:34:59Z",
            "author_login": "graingert"
          },
          {
            "sha": "c82d8e506abff905e366ea72ef62c65eed584b17",
            "date": "2025-01-10T10:32:20Z",
            "author_login": "s-t-e-v-e-n-k"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:A/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body.\n",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-10-17T20:15:10.070",
    "last_modified": "2024-11-21T08:27:23.203",
    "fix_date": "2023-10-17T18:07:33Z"
  },
  "references": [
    {
      "url": "https://github.com/urllib3/urllib3/commit/4e98d57809dacab1cbe625fddeec1a290c478ea9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/urllib3/urllib3/security/advisories/GHSA-g4mx-q9vg-27p4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4R2Y5XK3WALSR3FNAGN7JBYV2B343ZKB/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5F5CUBAN5XMEBVBZPHFITBLMJV5FIJJ5/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PPDPLM6UUMN55ESPQWJFLLIZY4ZKCNRX/",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://www.rfc-editor.org/rfc/rfc9110.html#name-get",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/urllib3/urllib3/commit/4e98d57809dacab1cbe625fddeec1a290c478ea9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/urllib3/urllib3/security/advisories/GHSA-g4mx-q9vg-27p4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4R2Y5XK3WALSR3FNAGN7JBYV2B343ZKB/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5F5CUBAN5XMEBVBZPHFITBLMJV5FIJJ5/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PPDPLM6UUMN55ESPQWJFLLIZY4ZKCNRX/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://www.rfc-editor.org/rfc/rfc9110.html#name-get",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.901074",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "urllib3",
    "owner": "urllib3",
    "created_at": "2011-09-18T18:08:28Z",
    "updated_at": "2025-01-26T01:29:25Z",
    "pushed_at": "2025-01-20T04:56:39Z",
    "size": 7533,
    "stars": 3831,
    "forks": 1170,
    "open_issues": 135,
    "watchers": 3831,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.24-series",
      "1.25-series",
      "1.26.x",
      "2.0.x",
      "main",
      "misleading-error-truncated-response",
      "release",
      "sethmlarson-patch-1",
      "v2"
    ],
    "languages": {
      "Python": 1106696,
      "HTML": 8787,
      "JavaScript": 3655,
      "Shell": 183,
      "Gherkin": 66
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:51:15.959976"
  }
}