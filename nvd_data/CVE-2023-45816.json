{
  "cve_id": "CVE-2023-45816",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "2c45b949ea0e9d6fa8e5af2dd07f6521ede08bf1",
    "related_commits": [
      "2c45b949ea0e9d6fa8e5af2dd07f6521ede08bf1",
      "3c5fb871c0f54af47679ae71ad449666b01d8216",
      "2c45b949ea0e9d6fa8e5af2dd07f6521ede08bf1",
      "3c5fb871c0f54af47679ae71ad449666b01d8216"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/2c45b949ea0e9d6fa8e5af2dd07f6521ede08bf1.patch",
    "fix_commit_details": {
      "sha": "2c45b949ea0e9d6fa8e5af2dd07f6521ede08bf1",
      "commit_date": "2023-11-09T02:47:24Z",
      "author": {
        "login": "martin-brennan",
        "type": "User",
        "stats": {
          "total_commits": 1378,
          "average_weekly_commits": 1.9884559884559885,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 245
        }
      },
      "commit_message": {
        "title": "SECURITY: Filter unread bookmark reminders the user cannot see",
        "length": 793,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 135,
        "additions": 114,
        "deletions": 21
      },
      "files": [
        {
          "filename": "app/controllers/notifications_controller.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -55,7 +55,8 @@ def index\n         end\n       end\n \n-      notifications = filter_inaccessible_notifications(notifications)\n+      notifications =\n+        Notification.filter_inaccessible_topic_notifications(current_user.guardian, notifications)\n \n       json = {\n         notifications: serialize_data(notifications, NotificationSerializer),\n@@ -82,7 +83,8 @@ def index\n \n       total_rows = notifications.dup.count\n       notifications = notifications.offset(offset).limit(60)\n-      notifications = filter_inaccessible_notifications(notifications)\n+      notifications =\n+        Notification.filter_inaccessible_topic_notifications(current_user.guardian, notifications)\n       render_json_dump(\n         notifications: serialize_data(notifications, NotificationSerializer),\n         total_rows_notifications: total_rows,\n@@ -155,10 +157,4 @@ def notification_params\n   def render_notification\n     render_json_dump(NotificationSerializer.new(@notification, scope: guardian, root: false))\n   end\n-\n-  def filter_inaccessible_notifications(notifications)\n-    topic_ids = notifications.map { |n| n.topic_id }.compact.uniq\n-    accessible_topic_ids = guardian.can_see_topic_ids(topic_ids: topic_ids)\n-    notifications.select { |n| n.topic_id.blank? || accessible_topic_ids.include?(n.topic_id) }\n-  end\n end"
        },
        {
          "filename": "app/controllers/users_controller.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -1796,11 +1796,7 @@ def user_menu_bookmarks\n     end\n \n     reminder_notifications =\n-      Notification\n-        .for_user_menu(current_user.id, limit: USER_MENU_LIST_LIMIT)\n-        .unread\n-        .where(notification_type: Notification.types[:bookmark_reminder])\n-\n+      BookmarkQuery.new(user: current_user).unread_notifications(limit: USER_MENU_LIST_LIMIT)\n     if reminder_notifications.size < USER_MENU_LIST_LIMIT\n       exclude_bookmark_ids =\n         reminder_notifications.filter_map { |notification| notification.data_hash[:bookmark_id] }"
        },
        {
          "filename": "app/models/notification.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -227,6 +227,12 @@ def self.remove_for(user_id, topic_id)\n     Notification.where(user_id: user_id, topic_id: topic_id).delete_all\n   end\n \n+  def self.filter_inaccessible_topic_notifications(guardian, notifications)\n+    topic_ids = notifications.map { |n| n.topic_id }.compact.uniq\n+    accessible_topic_ids = guardian.can_see_topic_ids(topic_ids: topic_ids)\n+    notifications.select { |n| n.topic_id.blank? || accessible_topic_ids.include?(n.topic_id) }\n+  end\n+\n   # Be wary of calling this frequently. O(n) JSON parsing can suck.\n   def data_hash\n     @data_hash ||="
        },
        {
          "filename": "app/services/post_bookmarkable.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -12,7 +12,7 @@ def self.serializer\n   end\n \n   def self.preload_associations\n-    [{ topic: [:tags] }, :user]\n+    [{ topic: %i[tags category] }, :user]\n   end\n \n   def self.list_query(user, guardian)\n@@ -54,7 +54,8 @@ def self.reminder_handler(bookmark)\n   end\n \n   def self.reminder_conditions(bookmark)\n-    bookmark.bookmarkable.present? && bookmark.bookmarkable.topic.present?\n+    bookmark.bookmarkable.present? && bookmark.bookmarkable.topic.present? &&\n+      self.can_see?(bookmark.user.guardian, bookmark)\n   end\n \n   def self.can_see?(guardian, bookmark)"
        },
        {
          "filename": "app/services/topic_bookmarkable.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -12,7 +12,7 @@ def self.serializer\n   end\n \n   def self.preload_associations\n-    [:tags, { first_post: :user }]\n+    [:category, :tags, { first_post: :user }]\n   end\n \n   def self.perform_custom_preload!(topic_bookmarks, guardian)\n@@ -58,7 +58,7 @@ def self.reminder_handler(bookmark)\n   end\n \n   def self.reminder_conditions(bookmark)\n-    bookmark.bookmarkable.present?\n+    bookmark.bookmarkable.present? && self.can_see?(bookmark.user.guardian, bookmark)\n   end\n \n   def self.can_see?(guardian, bookmark)"
        },
        {
          "filename": "lib/bookmark_query.rb",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -88,4 +88,28 @@ def list_all(&blk)\n     BookmarkQuery.preload(results, self)\n     results\n   end\n+\n+  def unread_notifications(limit: 20)\n+    reminder_notifications =\n+      Notification\n+        .for_user_menu(@user.id, limit: [limit, 100].min)\n+        .unread\n+        .where(notification_type: Notification.types[:bookmark_reminder])\n+\n+    # We preload associations like we do above for the list to avoid\n+    # N1s in the can_see? guardian calls for each bookmark.\n+    bookmarks =\n+      Bookmark.where(\n+        id: reminder_notifications.map { |n| n.data_hash[:bookmark_id] }.compact,\n+        user: @user,\n+      )\n+    BookmarkQuery.preload(bookmarks, self)\n+\n+    reminder_notifications.select do |n|\n+      bookmark = bookmarks.find { |bm| bm.id == n.data_hash[:bookmark_id] }\n+      next if bookmark.blank?\n+      bookmarkable = Bookmark.registered_bookmarkable_from_type(bookmark.bookmarkable_type)\n+      bookmarkable.can_see?(@guardian, bookmark)\n+    end\n+  end\n end"
        },
        {
          "filename": "plugins/chat/lib/chat/message_bookmarkable.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -11,7 +11,7 @@ def self.serializer\n     end\n \n     def self.preload_associations\n-      [:chat_channel]\n+      [{ chat_channel: :chatable }]\n     end\n \n     def self.list_query(user, guardian)\n@@ -58,7 +58,8 @@ def self.reminder_handler(bookmark)\n     end\n \n     def self.reminder_conditions(bookmark)\n-      bookmark.bookmarkable.present? && bookmark.bookmarkable.chat_channel.present?\n+      bookmark.bookmarkable.present? && bookmark.bookmarkable.chat_channel.present? &&\n+        self.can_see?(bookmark.user.guardian, bookmark)\n     end\n \n     def self.can_see?(guardian, bookmark)"
        },
        {
          "filename": "plugins/chat/spec/lib/chat/message_bookmarkable_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -119,6 +119,13 @@\n       bookmark1.reload\n       expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(false)\n     end\n+\n+    it \"cannot send reminder if the user cannot access the channel\" do\n+      expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(true)\n+      bookmark1.bookmarkable.update!(chat_channel: Fabricate(:private_category_channel))\n+      bookmark1.reload\n+      expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(false)\n+    end\n   end\n \n   describe \"#reminder_handler\" do"
        },
        {
          "filename": "plugins/chat/spec/requests/core_ext/users_controller_spec.rb",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -22,4 +22,33 @@\n       expect(membership.following).to eq(true)\n     end\n   end\n+\n+  describe \"#user_menu_bookmarks\" do\n+    fab!(:chatters) { Fabricate(:group) }\n+    let(:current_user) { Fabricate(:user, group_ids: [chatters.id]) }\n+    let(:bookmark_message) { Fabricate(:chat_message) }\n+    let(:bookmark_user) { current_user }\n+\n+    before do\n+      register_test_bookmarkable(Chat::MessageBookmarkable)\n+      SiteSetting.chat_allowed_groups = [chatters]\n+      sign_in(current_user)\n+    end\n+\n+    it \"does not return any unread notifications for chat bookmarks that the user no longer has access to\" do\n+      bookmark_with_reminder =\n+        Fabricate(:bookmark, user: current_user, bookmarkable: bookmark_message)\n+      BookmarkReminderNotificationHandler.new(bookmark_with_reminder).send_notification\n+\n+      bookmark_with_reminder.bookmarkable.update!(\n+        chat_channel: Fabricate(:private_category_channel),\n+      )\n+\n+      get \"/u/#{current_user.username}/user-menu-bookmarks\"\n+      expect(response.status).to eq(200)\n+\n+      notifications = response.parsed_body[\"notifications\"]\n+      expect(notifications.size).to eq(0)\n+    end\n+  end\n end"
        },
        {
          "filename": "spec/lib/bookmark_query_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -105,6 +105,8 @@ def bookmark_query(user: nil, search_term: nil, per_page: nil)\n       context \"with custom bookmarkable fitering\" do\n         before { register_test_bookmarkable }\n \n+        after { DiscoursePluginRegistry.reset! }\n+\n         let!(:bookmark5) do\n           Fabricate(:bookmark, user: user, bookmarkable: Fabricate(:user, username: \"bookmarkking\"))\n         end"
        },
        {
          "filename": "spec/requests/users_controller_spec.rb",
          "status": "modified",
          "additions": 19,
          "deletions": 2,
          "patch": "@@ -6563,8 +6563,7 @@ def revoke(user, skip_remote: false)\n         expect(response.status).to eq(200)\n \n         notifications = response.parsed_body[\"notifications\"]\n-        expect(notifications.size).to eq(1)\n-        expect(notifications.first[\"data\"][\"bookmark_id\"]).to be_nil\n+        expect(notifications.size).to eq(0)\n \n         bookmarks = response.parsed_body[\"bookmarks\"]\n         expect(bookmarks.map { |bookmark| bookmark[\"id\"] }).to contain_exactly(\n@@ -6611,6 +6610,24 @@ def revoke(user, skip_remote: false)\n         bookmarks = response.parsed_body[\"bookmarks\"]\n         expect(bookmarks.size).to eq(1)\n       end\n+\n+      it \"does not return any unread notifications for bookmarks that the user no longer has access to\" do\n+        bookmark_with_reminder2 = Fabricate(:bookmark, user: user, bookmarkable: Fabricate(:post))\n+        TopicUser.change(user.id, bookmark_with_reminder2.bookmarkable.topic, total_msecs_viewed: 1)\n+        BookmarkReminderNotificationHandler.new(bookmark_with_reminder2).send_notification\n+\n+        bookmark_with_reminder2.bookmarkable.topic.update!(\n+          archetype: Archetype.private_message,\n+          category: nil,\n+        )\n+\n+        get \"/u/#{user.username}/user-menu-bookmarks\"\n+        expect(response.status).to eq(200)\n+\n+        notifications = response.parsed_body[\"notifications\"]\n+        expect(notifications.size).to eq(1)\n+        expect(notifications.first[\"data\"][\"bookmark_id\"]).to eq(bookmark_with_reminder.id)\n+      end\n     end\n   end\n "
        },
        {
          "filename": "spec/services/post_bookmarkable_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -101,6 +101,13 @@\n       bookmark1.reload\n       expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(false)\n     end\n+\n+    it \"cannot send reminder if the user cannot access the topic\" do\n+      expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(true)\n+      bookmark1.bookmarkable.topic.update!(category: private_category)\n+      bookmark1.reload\n+      expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(false)\n+    end\n   end\n \n   describe \"#reminder_handler\" do"
        },
        {
          "filename": "spec/services/topic_bookmarkable_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -97,6 +97,13 @@\n       bookmark1.reload\n       expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(false)\n     end\n+\n+    it \"cannot send reminder if the user cannot access the topic\" do\n+      expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(true)\n+      bookmark1.bookmarkable.update!(category: private_category)\n+      bookmark1.reload\n+      expect(registered_bookmarkable.can_send_reminder?(bookmark1)).to eq(false)\n+    end\n   end\n \n   describe \"#reminder_handler\" do"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "473e37e7b3dcb254548a04695fb5e5f56a6de33b",
            "date": "2025-01-14T14:32:50Z",
            "author_login": "CvX"
          },
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "f8c493f3c4ee5e38dff460288996c780a6458e29",
            "date": "2025-01-14T12:47:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6cb8b576d0c7902b99cbb39bc7aaa473d454118a",
            "date": "2025-01-14T12:46:14Z",
            "author_login": "CvX"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Discourse is an open source platform for community discussion. Prior to version 3.1.3 of the `stable` branch and version 3.2.0.beta3 of the `beta` and `tests-passed` branches, there is an edge case where a bookmark reminder is sent and an unread notification is generated, but the underlying bookmarkable (e.g. post, topic, chat message) security has changed, making it so the user can no longer access the underlying resource. As of version 3.1.3 of the `stable` branch and version 3.2.0.beta3 of the `beta` and `tests-passed` branches, bookmark reminders are now no longer sent if the user does not have access to the underlying bookmarkable, and also the unread bookmark notifications are always filtered by access. There are no known workarounds.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-10T15:15:08.667",
    "last_modified": "2024-11-21T08:27:24.920",
    "fix_date": "2023-11-09T02:47:24Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/2c45b949ea0e9d6fa8e5af2dd07f6521ede08bf1",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/3c5fb871c0f54af47679ae71ad449666b01d8216",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-v9r6-92wp-f6cf",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/2c45b949ea0e9d6fa8e5af2dd07f6521ede08bf1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/3c5fb871c0f54af47679ae71ad449666b01d8216",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-v9r6-92wp-f6cf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.247826",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}