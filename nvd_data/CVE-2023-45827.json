{
  "cve_id": "CVE-2023-45827",
  "github_data": {
    "repository": "clickbar/dot-diver",
    "fix_commit": "98daf567390d816fd378ec998eefe2e97f293d5a",
    "related_commits": [
      "98daf567390d816fd378ec998eefe2e97f293d5a",
      "98daf567390d816fd378ec998eefe2e97f293d5a"
    ],
    "patch_url": "https://github.com/clickbar/dot-diver/commit/98daf567390d816fd378ec998eefe2e97f293d5a.patch",
    "fix_commit_details": {
      "sha": "98daf567390d816fd378ec998eefe2e97f293d5a",
      "commit_date": "2023-11-02T22:41:08Z",
      "author": {
        "login": "djfhe",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #12 from clickbar/fix/prototype-pollution",
        "length": 100,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 103,
        "additions": 90,
        "deletions": 13
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@ All notable changes to **dot-diver** will be documented here. Inspired by [keep\n - Updated dependencies\n - Formatted code with new lint rules\n - Fixed testcase for new TypeScript behavior\n+- Added guards against prototype pollution, thanks to @d3ng03 (<https://github.com/clickbar/dot-diver/security/advisories/GHSA-9w5f-mw3p-pj47>)\n \n ## [1.0.1](https://github.com/clickbar/dot-diver/tree/1.0.1) (2023-03-26)\n "
        },
        {
          "filename": "src/index.ts",
          "status": "modified",
          "additions": 34,
          "deletions": 13,
          "patch": "@@ -218,8 +218,12 @@ type PathValueEntry<T, P extends PathEntry<T, Depth>, Depth extends number = 10>\n \n type SearchableObject = Record<never, never> | unknown[]\n \n+// eslint-disable-next-line @typescript-eslint/unbound-method\n+const hasOwnProperty = Object.prototype.hasOwnProperty\n+\n /**\n- * Retrives a value from an object by dot notation\n+ * Retrieves a value from an object by dot notation. The value is received by optional chaining,\n+ * therefore this function returns undefined if an intermediate property is undefined.\n  *\n  * @param object - object to get value from\n  * @param path - path to value\n@@ -236,16 +240,27 @@ function getByPath<T extends SearchableObject, P extends PathEntry<T> & string>(\n ): PathValueEntry<T, P> {\n   const pathArray = (path as string).split('.')\n \n-  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n-  return pathArray.reduce((accumulator: any, current) => accumulator?.[current], object)\n+  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n+  return pathArray.reduce((current: any, pathPart) => {\n+    if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {\n+      return undefined\n+    }\n+\n+    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n+    return current?.[pathPart]\n+  }, object)\n }\n \n /**\n- * Sets a value in an object by dot notation\n+ * Sets a value in an object by dot notation. If an intermediate property is undefined,\n+ * this function will throw an error.\n+ *\n  * @param object - object to set value in\n  * @param path - path to value\n  * @param value - value to set\n  *\n+ * @throws {Error} - if an intermediate property is undefined\n+ *\n  * @privateRemarks\n  * The intersection between PathEntry<T, 10>  and string is necessary for TypeScript to successfully narrow down the type of P based on the user-provided path input.\n  * Without the intersection, the path would just be of type PathEntry<T, 10> and PathValueEntry would be a union of all possible return types.\n@@ -264,18 +279,24 @@ function setByPath<\n   }\n \n   // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n-  const objectToSet = pathArray.reduce(\n-    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n-    (accumulator: any, current) => accumulator?.[current],\n-    object,\n-  )\n+  const parentObject = pathArray.reduce((current: any, pathPart) => {\n+    if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {\n+      throw new Error(`Property ${pathPart} is undefined`)\n+    }\n \n-  if (objectToSet === undefined) {\n-    throw new Error('Path is invalid')\n-  }\n+    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n+    const next = current?.[pathPart]\n+\n+    if (next === undefined || next === null) {\n+      throw new Error(`Property ${pathPart} is undefined`)\n+    }\n+\n+    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n+    return next\n+  }, object)\n \n   // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n-  objectToSet[lastKey] = value\n+  parentObject[lastKey] = value\n }\n \n export type { PathEntry as Path, PathValueEntry as PathValue, SearchableObject }"
        },
        {
          "filename": "test/index.test.ts",
          "status": "modified",
          "additions": 55,
          "deletions": 0,
          "patch": "@@ -160,3 +160,58 @@ it('Test readme usage example: \u2699\ufe0f Customizing the Depth Limit', () => {\n   setByPathDepth5(object, 'f.1.g', 'new array-item-2')\n   expect(object.f[1].g).toBe('new array-item-2')\n })\n+\n+it('Test for prototype pollution', () => {\n+  const object = {}\n+\n+  expect(() => {\n+    // @ts-expect-error - this is not a valid path for the object\n+    setByPath(object, '__proto__.polluted', true)\n+  }).toThrowError('__proto__')\n+\n+  // @ts-expect-error - this is not a valid path for the object\n+  expect(getByPath(object, '__proto__')).toBe(undefined)\n+\n+  expect(() => {\n+    // @ts-expect-error - this is not a valid path for the object\n+    setByPath(object, 'constructor.polluted', true)\n+  }).toThrowError('constructor')\n+\n+  // @ts-expect-error - this is not a valid path for the object\n+  expect(getByPath(object, 'constructor')).toBe(undefined)\n+\n+  // @ts-expect-error - this is should not be defined on the object\n+  expect(object.polluted).toBe(undefined)\n+\n+  const object2 = { constructor: { prototype: { polluted: true } } }\n+\n+  expect(getByPath(object2, 'constructor.prototype.polluted')).toBe(true)\n+\n+  setByPath(object2, 'constructor.prototype.polluted', false)\n+\n+  expect(object2.constructor.prototype.polluted).toBe(false)\n+\n+  // eslint-disable-next-line @typescript-eslint/no-extraneous-class\n+  const testClass = class TestClass {\n+    // eslint-disable-next-line @typescript-eslint/no-useless-constructor, @typescript-eslint/no-empty-function\n+    constructor() {}\n+  }\n+\n+  const object3 = new testClass()\n+\n+  // @ts-expect-error - this is not a valid path for the object\n+  expect(getByPath(object3, 'constructor.prototype')).toBe(undefined)\n+\n+  // @ts-expect-error - this is not a valid path for the object\n+  expect(getByPath(object3, 'constructor')).toBe(undefined)\n+\n+  expect(() => {\n+    // @ts-expect-error - this is not a valid path for the object\n+    setByPath(object3, 'constructor.polluted', true)\n+  }).toThrowError('constructor')\n+\n+  expect(() => {\n+    // @ts-expect-error - this is not a valid path for the object\n+    setByPath(object3, '__proto__.polluted', true)\n+  }).toThrowError('__proto__')\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "00dc0a82734b9b42777be528a381f76de4366ffa",
            "date": "2024-08-18T05:21:53Z",
            "author_login": "djfhe"
          },
          {
            "sha": "ed1097b1cc8296daa31096d6813f8dc3737fed82",
            "date": "2024-08-18T05:19:42Z",
            "author_login": "djfhe"
          },
          {
            "sha": "2a01a693a6e162173c9cbadcca41661b6c9d828b",
            "date": "2024-08-18T05:17:09Z",
            "author_login": "djfhe"
          },
          {
            "sha": "b5ae2a753abfe2075e2fb834a70bc8abb127a06f",
            "date": "2024-08-18T05:15:59Z",
            "author_login": "djfhe"
          },
          {
            "sha": "5d05fe592e294a0008164121813820aeb8ec9ff9",
            "date": "2024-08-18T04:59:24Z",
            "author_login": "djfhe"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-1321",
    "description": "Dot diver is a lightweight, powerful, and dependency-free TypeScript utility library that provides types and functions to work with object paths in dot notation. In versions prior to 1.0.2 there is a Prototype Pollution vulnerability in the `setByPath` function which can leads to remote code execution (RCE). This issue has been addressed in commit `98daf567` which has been included in release 1.0.2. Users are advised to upgrade. There are no known workarounds to this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-06T18:15:08.467",
    "last_modified": "2024-11-21T08:27:26.363",
    "fix_date": "2023-11-02T22:41:08Z"
  },
  "references": [
    {
      "url": "https://github.com/clickbar/dot-diver/commit/98daf567390d816fd378ec998eefe2e97f293d5a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/clickbar/dot-diver/security/advisories/GHSA-9w5f-mw3p-pj47",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/clickbar/dot-diver/commit/98daf567390d816fd378ec998eefe2e97f293d5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/clickbar/dot-diver/security/advisories/GHSA-9w5f-mw3p-pj47",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.990511",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dot-diver",
    "owner": "clickbar",
    "created_at": "2023-03-21T18:50:04Z",
    "updated_at": "2024-12-19T01:54:38Z",
    "pushed_at": "2024-08-22T19:52:44Z",
    "size": 464,
    "stars": 23,
    "forks": 1,
    "open_issues": 0,
    "watchers": 23,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 67121,
      "JavaScript": 238
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:28:12.766942"
  }
}