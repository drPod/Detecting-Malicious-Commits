{
  "cve_id": "CVE-2023-46120",
  "github_data": {
    "repository": "rabbitmq/rabbitmq-java-client",
    "fix_commit": "714aae602dcae6cb4b53cadf009323ebac313cc8",
    "related_commits": [
      "714aae602dcae6cb4b53cadf009323ebac313cc8",
      "714aae602dcae6cb4b53cadf009323ebac313cc8"
    ],
    "patch_url": "https://github.com/rabbitmq/rabbitmq-java-client/commit/714aae602dcae6cb4b53cadf009323ebac313cc8.patch",
    "fix_commit_details": {
      "sha": "714aae602dcae6cb4b53cadf009323ebac313cc8",
      "commit_date": "2023-06-15T08:14:02Z",
      "author": {
        "login": "acogoluegnes",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add max inbound message size to ConnectionFactory",
        "length": 202,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 330,
        "additions": 282,
        "deletions": 48
      },
      "files": [
        {
          "filename": "src/main/java/com/rabbitmq/client/ConnectionFactory.java",
          "status": "modified",
          "additions": 30,
          "deletions": 3,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -205,6 +205,13 @@ public class ConnectionFactory implements Cloneable {\n \n     private CredentialsRefreshService credentialsRefreshService;\n \n+    /**\n+     * Maximum body size of inbound (received) messages in bytes.\n+     *\n+     * <p>Default value is 67,108,864 (64 MiB).\n+     */\n+    private int maxInboundMessageBodySize = 1_048_576 * 64;\n+\n     /** @return the default host to use for connections */\n     public String getHost() {\n         return host;\n@@ -970,11 +977,15 @@ protected synchronized FrameHandlerFactory createFrameHandlerFactory() throws IO\n                 if(this.nioParams.getNioExecutor() == null && this.nioParams.getThreadFactory() == null) {\n                     this.nioParams.setThreadFactory(getThreadFactory());\n                 }\n-                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(connectionTimeout, nioParams, isSSL(), sslContextFactory);\n+                this.frameHandlerFactory = new SocketChannelFrameHandlerFactory(\n+                    connectionTimeout, nioParams, isSSL(), sslContextFactory,\n+                    this.maxInboundMessageBodySize);\n             }\n             return this.frameHandlerFactory;\n         } else {\n-            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory, socketConf, isSSL(), this.shutdownExecutor, sslContextFactory);\n+            return new SocketFrameHandlerFactory(connectionTimeout, socketFactory,\n+                socketConf, isSSL(), this.shutdownExecutor, sslContextFactory,\n+                this.maxInboundMessageBodySize);\n         }\n \n     }\n@@ -1273,6 +1284,7 @@ public ConnectionParams params(ExecutorService consumerWorkServiceExecutor) {\n         result.setRecoveredQueueNameSupplier(recoveredQueueNameSupplier);\n         result.setTrafficListener(trafficListener);\n         result.setCredentialsRefreshService(credentialsRefreshService);\n+        result.setMaxInboundMessageBodySize(maxInboundMessageBodySize);\n         return result;\n     }\n \n@@ -1556,6 +1568,21 @@ public int getChannelRpcTimeout() {\n         return channelRpcTimeout;\n     }\n \n+    /**\n+     * Maximum body size of inbound (received) messages in bytes.\n+     *\n+     * <p>Default value is 67,108,864 (64 MiB).\n+     *\n+     * @param maxInboundMessageBodySize the maximum size of inbound messages\n+     */\n+    public void setMaxInboundMessageBodySize(int maxInboundMessageBodySize) {\n+        if (maxInboundMessageBodySize <= 0) {\n+            throw new IllegalArgumentException(\"Max inbound message body size must be greater than 0: \"\n+                + maxInboundMessageBodySize);\n+        }\n+        this.maxInboundMessageBodySize = maxInboundMessageBodySize;\n+    }\n+\n     /**\n      * The factory to create SSL contexts.\n      * This provides more flexibility to create {@link SSLContext}s"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/AMQChannel.java",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -62,7 +62,7 @@ public abstract class AMQChannel extends ShutdownNotifierComponent {\n     private final int _channelNumber;\n \n     /** Command being assembled */\n-    private AMQCommand _command = new AMQCommand();\n+    private AMQCommand _command;\n \n     /** The current outstanding RPC request, if any. (Could become a queue in future.) */\n     private RpcWrapper _activeRpc = null;\n@@ -76,6 +76,7 @@ public abstract class AMQChannel extends ShutdownNotifierComponent {\n     private final boolean _checkRpcResponseType;\n \n     private final TrafficListener _trafficListener;\n+    private final int maxInboundMessageBodySize;\n \n     /**\n      * Construct a channel on the given connection, with the given channel number.\n@@ -91,6 +92,8 @@ public AMQChannel(AMQConnection connection, int channelNumber) {\n         this._rpcTimeout = connection.getChannelRpcTimeout();\n         this._checkRpcResponseType = connection.willCheckRpcResponseType();\n         this._trafficListener = connection.getTrafficListener();\n+        this.maxInboundMessageBodySize = connection.getMaxInboundMessageBodySize();\n+        this._command = new AMQCommand(this.maxInboundMessageBodySize);\n     }\n \n     /**\n@@ -110,7 +113,7 @@ public int getChannelNumber() {\n     public void handleFrame(Frame frame) throws IOException {\n         AMQCommand command = _command;\n         if (command.handleFrame(frame)) { // a complete command has rolled off the assembly line\n-            _command = new AMQCommand(); // prepare for the next one\n+            _command = new AMQCommand(this.maxInboundMessageBodySize); // prepare for the next one\n             handleCompleteInboundCommand(command);\n         }\n     }"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/AMQCommand.java",
          "status": "modified",
          "additions": 20,
          "deletions": 4,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -44,17 +44,21 @@ public class AMQCommand implements Command {\n     /** The assembler for this command - synchronised on - contains all the state */\n     private final CommandAssembler assembler;\n \n+    AMQCommand(int maxBodyLength) {\n+        this(null, null, null, maxBodyLength);\n+    }\n+\n     /** Construct a command ready to fill in by reading frames */\n     public AMQCommand() {\n-        this(null, null, null);\n+        this(null, null, null, Integer.MAX_VALUE);\n     }\n \n     /**\n      * Construct a command with just a method, and without header or body.\n      * @param method the wrapped method\n      */\n     public AMQCommand(com.rabbitmq.client.Method method) {\n-        this(method, null, null);\n+        this(method, null, null, Integer.MAX_VALUE);\n     }\n \n     /**\n@@ -64,7 +68,19 @@ public AMQCommand(com.rabbitmq.client.Method method) {\n      * @param body the message body data\n      */\n     public AMQCommand(com.rabbitmq.client.Method method, AMQContentHeader contentHeader, byte[] body) {\n-        this.assembler = new CommandAssembler((Method) method, contentHeader, body);\n+        this.assembler = new CommandAssembler((Method) method, contentHeader, body, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Construct a command with a specified method, header and body.\n+     * @param method the wrapped method\n+     * @param contentHeader the wrapped content header\n+     * @param body the message body data\n+     * @param maxBodyLength the maximum size for an inbound message body\n+     */\n+    public AMQCommand(com.rabbitmq.client.Method method, AMQContentHeader contentHeader, byte[] body,\n+                      int maxBodyLength) {\n+        this.assembler = new CommandAssembler((Method) method, contentHeader, body, maxBodyLength);\n     }\n \n     /** Public API - {@inheritDoc} */"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/AMQConnection.java",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -157,6 +157,7 @@ public static Map<String, Object> defaultClientProperties() {\n     private volatile ChannelManager _channelManager;\n     /** Saved server properties field from connection.start */\n     private volatile Map<String, Object> _serverProperties;\n+    private final int maxInboundMessageBodySize;\n \n     /**\n      * Protected API - respond, in the driver thread, to a ShutdownSignal.\n@@ -244,6 +245,7 @@ public AMQConnection(ConnectionParams params, FrameHandler frameHandler, Metrics\n \n         this.credentialsRefreshService = params.getCredentialsRefreshService();\n \n+\n         this._channel0 = createChannel0();\n \n         this._channelManager = null;\n@@ -257,6 +259,7 @@ public AMQConnection(ConnectionParams params, FrameHandler frameHandler, Metrics\n         this.errorOnWriteListener = params.getErrorOnWriteListener() != null ? params.getErrorOnWriteListener() :\n             (connection, exception) -> { throw exception; }; // we just propagate the exception for non-recoverable connections\n         this.workPoolTimeout = params.getWorkPoolTimeout();\n+        this.maxInboundMessageBodySize = params.getMaxInboundMessageBodySize();\n     }\n \n     AMQChannel createChannel0() {\n@@ -1202,4 +1205,8 @@ public boolean willCheckRpcResponseType() {\n     public TrafficListener getTrafficListener() {\n         return trafficListener;\n     }\n+\n+    int getMaxInboundMessageBodySize() {\n+        return maxInboundMessageBodySize;\n+    }\n }"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/AbstractFrameHandlerFactory.java",
          "status": "modified",
          "additions": 19,
          "deletions": 1,
          "patch": "@@ -1,3 +1,18 @@\n+// Copyright (c) 2016-2023 VMware, Inc. or its affiliates.  All rights reserved.\n+//\n+// This software, the RabbitMQ Java client library, is triple-licensed under the\n+// Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n+// (\"GPL\") and the Apache License version 2 (\"ASL\"). For the MPL, please see\n+// LICENSE-MPL-RabbitMQ. For the GPL, please see LICENSE-GPL2.  For the ASL,\n+// please see LICENSE-APACHE2.\n+//\n+// This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND,\n+// either express or implied. See the LICENSE file for specific language governing\n+// rights and limitations of this software.\n+//\n+// If you have any questions regarding licensing, please contact us at\n+// info@rabbitmq.com.\n+\n package com.rabbitmq.client.impl;\n \n import com.rabbitmq.client.SocketConfigurator;\n@@ -10,10 +25,13 @@ public abstract class AbstractFrameHandlerFactory implements FrameHandlerFactory\n     protected final int connectionTimeout;\n     protected final SocketConfigurator configurator;\n     protected final boolean ssl;\n+    protected final int maxInboundMessageBodySize;\n \n-    protected AbstractFrameHandlerFactory(int connectionTimeout, SocketConfigurator configurator, boolean ssl) {\n+    protected AbstractFrameHandlerFactory(int connectionTimeout, SocketConfigurator configurator,\n+                                          boolean ssl, int maxInboundMessageBodySize) {\n         this.connectionTimeout = connectionTimeout;\n         this.configurator = configurator;\n         this.ssl = ssl;\n+        this.maxInboundMessageBodySize = maxInboundMessageBodySize;\n     }\n }"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/CommandAssembler.java",
          "status": "modified",
          "additions": 16,
          "deletions": 4,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -21,6 +21,7 @@\n \n import com.rabbitmq.client.AMQP;\n import com.rabbitmq.client.UnexpectedFrameError;\n+import static java.lang.String.format;\n \n /**\n  * Class responsible for piecing together a command from a series of {@link Frame}s.\n@@ -52,12 +53,16 @@ private enum CAState {\n     /** No bytes of content body not yet accumulated */\n     private long remainingBodyBytes;\n \n-    public CommandAssembler(Method method, AMQContentHeader contentHeader, byte[] body) {\n+    private final int maxBodyLength;\n+\n+    public CommandAssembler(Method method, AMQContentHeader contentHeader, byte[] body,\n+                            int maxBodyLength) {\n         this.method = method;\n         this.contentHeader = contentHeader;\n-        this.bodyN = new ArrayList<byte[]>(2);\n+        this.bodyN = new ArrayList<>(2);\n         this.bodyLength = 0;\n         this.remainingBodyBytes = 0;\n+        this.maxBodyLength = maxBodyLength;\n         appendBodyFragment(body);\n         if (method == null) {\n             this.state = CAState.EXPECTING_METHOD;\n@@ -99,7 +104,14 @@ private void consumeMethodFrame(Frame f) throws IOException {\n     private void consumeHeaderFrame(Frame f) throws IOException {\n         if (f.type == AMQP.FRAME_HEADER) {\n             this.contentHeader = AMQImpl.readContentHeaderFrom(f.getInputStream());\n-            this.remainingBodyBytes = this.contentHeader.getBodySize();\n+            long bodySize = this.contentHeader.getBodySize();\n+            if (bodySize >= this.maxBodyLength) {\n+                throw new IllegalStateException(format(\n+                    \"Message body is too large (%d), maximum size is %d\",\n+                    bodySize, this.maxBodyLength\n+                ));\n+            }\n+            this.remainingBodyBytes = bodySize;\n             updateContentBodyState();\n         } else {\n             throw new UnexpectedFrameError(f, AMQP.FRAME_HEADER);"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/ConnectionParams.java",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -64,6 +64,8 @@ public class ConnectionParams {\n \n     private CredentialsRefreshService credentialsRefreshService;\n \n+    private int maxInboundMessageBodySize;\n+\n     public ConnectionParams() {}\n \n     public CredentialsProvider getCredentialsProvider() {\n@@ -297,4 +299,12 @@ public void setCredentialsRefreshService(CredentialsRefreshService credentialsRe\n     public CredentialsRefreshService getCredentialsRefreshService() {\n         return credentialsRefreshService;\n     }\n+\n+    public int getMaxInboundMessageBodySize() {\n+        return maxInboundMessageBodySize;\n+    }\n+\n+    public void setMaxInboundMessageBodySize(int maxInboundMessageBodySize) {\n+        this.maxInboundMessageBodySize = maxInboundMessageBodySize;\n+    }\n }"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/Frame.java",
          "status": "modified",
          "additions": 9,
          "deletions": 2,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2022 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -25,6 +25,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+import static java.lang.String.format;\n \n /**\n  * Represents an AMQP wire-protocol frame, with frame type, channel number, and payload bytes.\n@@ -82,7 +83,7 @@ public static Frame fromBodyFragment(int channelNumber, byte[] body, int offset,\n      *\n      * @return a new Frame if we read a frame successfully, otherwise null\n      */\n-    public static Frame readFrom(DataInputStream is) throws IOException {\n+    public static Frame readFrom(DataInputStream is, int maxPayloadSize) throws IOException {\n         int type;\n         int channel;\n \n@@ -108,6 +109,12 @@ public static Frame readFrom(DataInputStream is) throws IOException {\n \n         channel = is.readUnsignedShort();\n         int payloadSize = is.readInt();\n+        if (payloadSize >= maxPayloadSize) {\n+            throw new IllegalStateException(format(\n+                \"Frame body is too large (%d), maximum size is %d\",\n+                payloadSize, maxPayloadSize\n+            ));\n+        }\n         byte[] payload = new byte[payloadSize];\n         is.readFully(payload);\n "
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/SocketFrameHandler.java",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -52,22 +52,26 @@ public class SocketFrameHandler implements FrameHandler {\n     /** Socket's outputstream - data to the broker - synchronized on */\n     private final DataOutputStream _outputStream;\n \n+    private final int maxInboundMessageBodySize;\n+\n     /** Time to linger before closing the socket forcefully. */\n     public static final int SOCKET_CLOSING_TIMEOUT = 1;\n \n     /**\n      * @param socket the socket to use\n      */\n     public SocketFrameHandler(Socket socket) throws IOException {\n-        this(socket, null);\n+        this(socket, null, Integer.MAX_VALUE);\n     }\n \n     /**\n      * @param socket the socket to use\n      */\n-    public SocketFrameHandler(Socket socket, ExecutorService shutdownExecutor) throws IOException {\n+    public SocketFrameHandler(Socket socket, ExecutorService shutdownExecutor,\n+                              int maxInboundMessageBodySize) throws IOException {\n         _socket = socket;\n         _shutdownExecutor = shutdownExecutor;\n+        this.maxInboundMessageBodySize = maxInboundMessageBodySize;\n \n         _inputStream = new DataInputStream(new BufferedInputStream(socket.getInputStream()));\n         _outputStream = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));\n@@ -181,7 +185,7 @@ public void initialize(AMQConnection connection) {\n     @Override\n     public Frame readFrame() throws IOException {\n         synchronized (_inputStream) {\n-            return Frame.readFrom(_inputStream);\n+            return Frame.readFrom(_inputStream, this.maxInboundMessageBodySize);\n         }\n     }\n "
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/SocketFrameHandlerFactory.java",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -38,12 +38,14 @@ public SocketFrameHandlerFactory(int connectionTimeout, SocketFactory socketFact\n \n     public SocketFrameHandlerFactory(int connectionTimeout, SocketFactory socketFactory, SocketConfigurator configurator,\n                                      boolean ssl, ExecutorService shutdownExecutor) {\n-        this(connectionTimeout, socketFactory, configurator, ssl, shutdownExecutor, null);\n+        this(connectionTimeout, socketFactory, configurator, ssl, shutdownExecutor, null,\n+             Integer.MAX_VALUE);\n     }\n \n     public SocketFrameHandlerFactory(int connectionTimeout, SocketFactory socketFactory, SocketConfigurator configurator,\n-                                     boolean ssl, ExecutorService shutdownExecutor, SslContextFactory sslContextFactory) {\n-        super(connectionTimeout, configurator, ssl);\n+                                     boolean ssl, ExecutorService shutdownExecutor, SslContextFactory sslContextFactory,\n+                                     int maxInboundMessageBodySize) {\n+        super(connectionTimeout, configurator, ssl, maxInboundMessageBodySize);\n         this.socketFactory = socketFactory;\n         this.shutdownExecutor = shutdownExecutor;\n         this.sslContextFactory = sslContextFactory;\n@@ -79,7 +81,7 @@ protected Socket createSocket(String connectionName) throws IOException {\n \n     public FrameHandler create(Socket sock) throws IOException\n     {\n-        return new SocketFrameHandler(sock, this.shutdownExecutor);\n+        return new SocketFrameHandler(sock, this.shutdownExecutor, this.maxInboundMessageBodySize);\n     }\n \n     private static void quietTrySocketClose(Socket socket) {"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/nio/FrameBuilder.java",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -23,6 +23,7 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.ReadableByteChannel;\n+import static java.lang.String.format;\n \n /**\n  * Class to create AMQP frames from a {@link ReadableByteChannel}.\n@@ -43,6 +44,7 @@ public class FrameBuilder {\n     protected final ReadableByteChannel channel;\n \n     protected final ByteBuffer applicationBuffer;\n+    private final int maxPayloadSize;\n     // to store the bytes of the outstanding data\n     // 3 byte-long because the longest we read is an unsigned int\n     // (not need to store the latest byte)\n@@ -52,9 +54,10 @@ public class FrameBuilder {\n     private byte[] framePayload;\n     private int bytesRead = 0;\n \n-    public FrameBuilder(ReadableByteChannel channel, ByteBuffer buffer) {\n+    public FrameBuilder(ReadableByteChannel channel, ByteBuffer buffer, int maxPayloadSize) {\n         this.channel = channel;\n         this.applicationBuffer = buffer;\n+        this.maxPayloadSize = maxPayloadSize;\n     }\n \n     /**\n@@ -65,7 +68,7 @@ public FrameBuilder(ReadableByteChannel channel, ByteBuffer buffer) {\n      *\n      * @return a complete frame or null if a frame couldn't have been fully built\n      * @throws IOException\n-     * @see Frame#readFrom(DataInputStream)\n+     * @see Frame#readFrom(DataInputStream, int)\n      */\n     public Frame readFrame() throws IOException {\n         while (somethingToRead()) {\n@@ -93,6 +96,12 @@ public Frame readFrame() throws IOException {\n             } else if (bytesRead == 6) {\n                 // payload size 4/4\n                 int framePayloadSize = (frameBuffer[0] << 24) + (frameBuffer[1] << 16) + (frameBuffer[2] << 8) + readFromBuffer();\n+                if (framePayloadSize >= maxPayloadSize) {\n+                    throw new IllegalStateException(format(\n+                        \"Frame body is too large (%d), maximum size is %d\",\n+                        framePayloadSize, maxPayloadSize\n+                    ));\n+                }\n                 framePayload = new byte[framePayloadSize];\n             } else if (bytesRead >= PAYLOAD_OFFSET && bytesRead < framePayload.length + PAYLOAD_OFFSET) {\n                 framePayload[bytesRead - PAYLOAD_OFFSET] = (byte) readFromBuffer();"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/nio/SocketChannelFrameHandlerFactory.java",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2022 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -58,8 +58,10 @@ public class SocketChannelFrameHandlerFactory extends AbstractFrameHandlerFactor\n \n     private final List<NioLoopContext> nioLoopContexts;\n \n-    public SocketChannelFrameHandlerFactory(int connectionTimeout, NioParams nioParams, boolean ssl, SslContextFactory sslContextFactory) {\n-        super(connectionTimeout, null, ssl);\n+    public SocketChannelFrameHandlerFactory(int connectionTimeout, NioParams nioParams, boolean ssl,\n+                                            SslContextFactory sslContextFactory,\n+                                            int maxInboundMessageBodySize) {\n+        super(connectionTimeout, null, ssl, maxInboundMessageBodySize);\n         this.nioParams = new NioParams(nioParams);\n         this.sslContextFactory = sslContextFactory;\n         this.nioLoopContexts = new ArrayList<>(this.nioParams.getNbIoThreads());\n@@ -134,7 +136,8 @@ public FrameHandler create(Address addr, String connectionName) throws IOExcepti\n                     channel,\n                     nioLoopContext,\n                     nioParams,\n-                    sslEngine\n+                    sslEngine,\n+                    this.maxInboundMessageBodySize\n                 );\n                 state.startReading();\n                 SocketChannelFrameHandler frameHandler = new SocketChannelFrameHandler(state);"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/nio/SocketChannelFrameHandlerState.java",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -71,7 +71,9 @@ public class SocketChannelFrameHandlerState {\n \n     final FrameBuilder frameBuilder;\n \n-    public SocketChannelFrameHandlerState(SocketChannel channel, NioLoopContext nioLoopsState, NioParams nioParams, SSLEngine sslEngine) {\n+    public SocketChannelFrameHandlerState(SocketChannel channel, NioLoopContext nioLoopsState,\n+                                          NioParams nioParams, SSLEngine sslEngine,\n+                                          int maxFramePayloadSize) {\n         this.channel = channel;\n         this.readSelectorState = nioLoopsState.readSelectorState;\n         this.writeSelectorState = nioLoopsState.writeSelectorState;\n@@ -94,7 +96,7 @@ public SocketChannelFrameHandlerState(SocketChannel channel, NioLoopContext nioL\n                 new ByteBufferOutputStream(channel, plainOut)\n             );\n \n-            this.frameBuilder = new FrameBuilder(channel, plainIn);\n+            this.frameBuilder = new FrameBuilder(channel, plainIn, maxFramePayloadSize);\n \n         } else {\n             this.ssl = true;\n@@ -106,7 +108,8 @@ public SocketChannelFrameHandlerState(SocketChannel channel, NioLoopContext nioL\n             this.outputStream = new DataOutputStream(\n                 new SslEngineByteBufferOutputStream(sslEngine, plainOut, cipherOut, channel)\n             );\n-            this.frameBuilder = new SslEngineFrameBuilder(sslEngine, plainIn, cipherIn, channel);\n+            this.frameBuilder = new SslEngineFrameBuilder(sslEngine, plainIn,\n+                cipherIn, channel, maxFramePayloadSize);\n         }\n \n     }"
        },
        {
          "filename": "src/main/java/com/rabbitmq/client/impl/nio/SslEngineFrameBuilder.java",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2007-2020 VMware, Inc. or its affiliates.  All rights reserved.\n+// Copyright (c) 2007-2023 VMware, Inc. or its affiliates.  All rights reserved.\n //\n // This software, the RabbitMQ Java client library, is triple-licensed under the\n // Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n@@ -35,8 +35,10 @@ public class SslEngineFrameBuilder extends FrameBuilder {\n \n     private boolean isUnderflowHandlingEnabled = false;\n \n-    public SslEngineFrameBuilder(SSLEngine sslEngine, ByteBuffer plainIn, ByteBuffer cipherIn, ReadableByteChannel channel) {\n-        super(channel, plainIn);\n+    public SslEngineFrameBuilder(SSLEngine sslEngine, ByteBuffer plainIn,\n+                                 ByteBuffer cipherIn, ReadableByteChannel channel,\n+                                 int maxPayloadSize) {\n+        super(channel, plainIn, maxPayloadSize);\n         this.sslEngine = sslEngine;\n         this.cipherBuffer = cipherIn;\n     }"
        },
        {
          "filename": "src/test/java/com/rabbitmq/client/test/FrameBuilderTest.java",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -59,7 +59,7 @@ void tearDown() throws Exception {\n     @Test\n     public void buildFrameInOneGo() throws IOException {\n         buffer = ByteBuffer.wrap(new byte[] { 1, 0, 0, 0, 0, 0, 3, 1, 2, 3, end() });\n-        builder = new FrameBuilder(channel, buffer);\n+        builder = new FrameBuilder(channel, buffer, Integer.MAX_VALUE);\n         Frame frame = builder.readFrame();\n         assertThat(frame).isNotNull();\n         assertThat(frame.type).isEqualTo(1);\n@@ -78,7 +78,7 @@ public void buildFramesInOneGo() throws IOException {\n             }\n         }\n         buffer = ByteBuffer.wrap(frames);\n-        builder = new FrameBuilder(channel, buffer);\n+        builder = new FrameBuilder(channel, buffer, Integer.MAX_VALUE);\n         int frameCount = 0;\n         Frame frame;\n         while ((frame = builder.readFrame()) != null) {\n@@ -94,7 +94,7 @@ public void buildFramesInOneGo() throws IOException {\n     @Test\n     public void buildFrameInSeveralCalls() throws IOException {\n         buffer = ByteBuffer.wrap(new byte[] { 1, 0, 0, 0, 0, 0, 3, 1, 2 });\n-        builder = new FrameBuilder(channel, buffer);\n+        builder = new FrameBuilder(channel, buffer, Integer.MAX_VALUE);\n         Frame frame = builder.readFrame();\n         assertThat(frame).isNull();\n \n@@ -131,7 +131,7 @@ public void protocolMismatchHeader() throws IOException {\n         };\n \n         for (int i = 0; i < buffers.length; i++) {\n-            builder = new FrameBuilder(channel, buffers[i]);\n+            builder = new FrameBuilder(channel, buffers[i], Integer.MAX_VALUE);\n             try {\n                 builder.readFrame();\n                 fail(\"protocol header not correct, exception should have been thrown\");"
        },
        {
          "filename": "src/test/java/com/rabbitmq/client/test/MaxInboundMessageSizeTest.java",
          "status": "added",
          "additions": 97,
          "deletions": 0,
          "patch": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2023 VMware, Inc. or its affiliates.  All rights reserved.\n+//\n+// This software, the RabbitMQ Java client library, is triple-licensed under the\n+// Mozilla Public License 2.0 (\"MPL\"), the GNU General Public License version 2\n+// (\"GPL\") and the Apache License version 2 (\"ASL\"). For the MPL, please see\n+// LICENSE-MPL-RabbitMQ. For the GPL, please see LICENSE-GPL2.  For the ASL,\n+// please see LICENSE-APACHE2.\n+//\n+// This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY KIND,\n+// either express or implied. See the LICENSE file for specific language governing\n+// rights and limitations of this software.\n+//\n+// If you have any questions regarding licensing, please contact us at\n+// info@rabbitmq.com.\n+\n+package com.rabbitmq.client.test;\n+\n+import static com.rabbitmq.client.test.TestUtils.LatchConditions.completed;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.rabbitmq.client.*;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+public class MaxInboundMessageSizeTest extends BrokerTestCase {\n+\n+  String q;\n+\n+  private static void safeClose(Connection c) {\n+    try {\n+      c.close();\n+    } catch (Exception e) {\n+      // OK\n+    }\n+  }\n+\n+  @Override\n+  protected void createResources() throws IOException, TimeoutException {\n+    q = generateQueueName();\n+    declareTransientQueue(q);\n+    super.createResources();\n+  }\n+\n+  @CsvSource({\n+    \"20000,5000,true\",\n+    \"20000,100000,true\",\n+    \"20000,5000,false\",\n+    \"20000,100000,false\",\n+  })\n+  @ParameterizedTest\n+  void maxInboundMessageSizeMustBeEnforced(int maxMessageSize, int frameMax, boolean basicGet)\n+      throws Exception {\n+    ConnectionFactory cf = newConnectionFactory();\n+    cf.setMaxInboundMessageBodySize(maxMessageSize);\n+    cf.setRequestedFrameMax(frameMax);\n+    Connection c = cf.newConnection();\n+    try {\n+      Channel ch = c.createChannel();\n+      ch.confirmSelect();\n+      byte[] body = new byte[maxMessageSize * 2];\n+      ch.basicPublish(\"\", q, null, body);\n+      ch.waitForConfirmsOrDie();\n+      AtomicReference<Throwable> exception = new AtomicReference<>();\n+      CountDownLatch errorLatch = new CountDownLatch(1);\n+      ch.addShutdownListener(\n+          cause -> {\n+            exception.set(cause.getCause());\n+            errorLatch.countDown();\n+          });\n+      if (basicGet) {\n+        try {\n+          ch.basicGet(q, true);\n+        } catch (Exception e) {\n+          // OK for basicGet\n+        }\n+      } else {\n+        ch.basicConsume(q, new DefaultConsumer(ch));\n+      }\n+      assertThat(errorLatch).is(completed());\n+      assertThat(exception.get())\n+          .isInstanceOf(IllegalStateException.class)\n+          .hasMessageContaining(\"Message body is too large\");\n+    } finally {\n+      safeClose(c);\n+    }\n+  }\n+\n+  @Override\n+  protected void releaseResources() throws IOException {\n+    deleteQueue(q);\n+    super.releaseResources();\n+  }\n+}"
        },
        {
          "filename": "src/test/java/com/rabbitmq/client/test/TestUtils.java",
          "status": "modified",
          "additions": 17,
          "deletions": 3,
          "patch": "@@ -26,11 +26,11 @@\n import java.lang.annotation.Target;\n import java.util.function.Function;\n import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.Condition;\n import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.junit.jupiter.api.extension.ExtensionContext;\n import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n-import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n@@ -47,8 +47,6 @@\n \n public class TestUtils {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(TestUtils.class);\n-\n     public static final boolean USE_NIO = System.getProperty(\"use.nio\") != null;\n \n     public static ConnectionFactory connectionFactory() {\n@@ -303,6 +301,22 @@ public interface CallableFunction<T, R> {\n \n     }\n \n+    public static class LatchConditions {\n+\n+        static Condition<CountDownLatch> completed() {\n+            return new Condition<>(\n+                countDownLatch-> {\n+                    try {\n+                        return countDownLatch.await(10, TimeUnit.SECONDS);\n+                    } catch (InterruptedException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                },\n+                \"Latch did not complete in 10 seconds\");\n+        }\n+\n+    }\n+\n     public static boolean basicGetBasicConsume(Connection connection, String queue, final CountDownLatch latch, int msgSize)\n         throws Exception {\n         Channel channel = connection.createChannel();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "146e16b1c2fe69ca38b2c929d24d1dfa27e0c4be",
            "date": "2025-01-13T03:28:47Z",
            "author_login": "michaelklishin"
          },
          {
            "sha": "c696ab0ce8ba2e5b8fc98918364750a42b1854e3",
            "date": "2025-01-13T00:47:46Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "730575eb1448f7da9f8d7d5726e4db5f440d54e6",
            "date": "2025-01-10T01:06:52Z",
            "author_login": "michaelklishin"
          },
          {
            "sha": "14130cf8d6cd02d94a89390b1e0708e8bb566287",
            "date": "2025-01-10T00:52:15Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ddeb76252084af15b471ff5b280804eed9e19209",
            "date": "2025-01-08T00:41:02Z",
            "author_login": "michaelklishin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "The RabbitMQ Java client library allows Java and JVM-based applications to connect to and interact with RabbitMQ nodes. `maxBodyLebgth` was not used when receiving Message objects.  Attackers could send a very large Message causing a memory overflow and triggering an OOM Error. Users of RabbitMQ may suffer from  DoS attacks from RabbitMQ Java client which will ultimately exhaust the memory of the consumer. This vulnerability was patched in version 5.18.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-25T18:17:36.257",
    "last_modified": "2024-11-21T08:27:55.207",
    "fix_date": "2023-06-15T08:14:02Z"
  },
  "references": [
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/commit/714aae602dcae6cb4b53cadf009323ebac313cc8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/issues/1062",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/releases/tag/v5.18.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/security/advisories/GHSA-mm8h-8587-p46h",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/commit/714aae602dcae6cb4b53cadf009323ebac313cc8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/issues/1062",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/releases/tag/v5.18.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/rabbitmq/rabbitmq-java-client/security/advisories/GHSA-mm8h-8587-p46h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.935526",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rabbitmq-java-client",
    "owner": "rabbitmq",
    "created_at": "2010-09-20T10:43:18Z",
    "updated_at": "2025-01-13T03:28:52Z",
    "pushed_at": "2025-01-14T04:35:58Z",
    "size": 71728,
    "stars": 1255,
    "forks": 577,
    "open_issues": 21,
    "watchers": 1255,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 2128082,
      "Python": 25776,
      "Shell": 6575,
      "Groovy": 2415,
      "Makefile": 1304,
      "Erlang": 992
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:52:15.965977"
  }
}