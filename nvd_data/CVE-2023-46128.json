{
  "cve_id": "CVE-2023-46128",
  "github_data": {
    "repository": "nautobot/nautobot",
    "fix_commit": "1ce8e5c658a075c29554d517cd453675e5d40d71",
    "related_commits": [
      "1ce8e5c658a075c29554d517cd453675e5d40d71",
      "1ce8e5c658a075c29554d517cd453675e5d40d71"
    ],
    "patch_url": "https://github.com/nautobot/nautobot/commit/1ce8e5c658a075c29554d517cd453675e5d40d71.patch",
    "fix_commit_details": {
      "sha": "1ce8e5c658a075c29554d517cd453675e5d40d71",
      "commit_date": "2023-10-23T20:56:09Z",
      "author": {
        "login": "glennmatthews",
        "type": "User",
        "stats": {
          "total_commits": 1756,
          "average_weekly_commits": 4.491048593350383,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 206
        }
      },
      "commit_message": {
        "title": "Fix `Meta` inheritance in nested serializer classes (#4692)",
        "length": 290,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 46,
        "additions": 39,
        "deletions": 7
      },
      "files": [
        {
          "filename": "changes/4692.fixed",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Fixed incorrect inheritance of `Meta` attributes into nested serializers (`depth >= 1`)."
        },
        {
          "filename": "changes/4692.housekeeping",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Added check in REST API generic test cases to detect strings like `password` and `sha256` that shouldn't generally appear in REST API responses."
        },
        {
          "filename": "changes/4692.security",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Fixed potential exposure of hashed user password data on certain REST API endpoints when using the `?depth=1` query parameter. For more details, please refer to [GHSA-r2hw-74xv-4gqp](https://github.com/nautobot/nautobot/security/advisories/GHSA-r2hw-74xv-4gqp)."
        },
        {
          "filename": "nautobot/core/api/utils.py",
          "status": "modified",
          "additions": 1,
          "deletions": 6,
          "patch": "@@ -314,14 +314,9 @@ def nested_serializer_factory(relation_info, nested_depth):\n         base_serializer_class = get_serializer_for_model(relation_info.related_model)\n \n         class NautobotNestedSerializer(base_serializer_class):\n-            class Meta:\n-                model = relation_info.related_model\n+            class Meta(base_serializer_class.Meta):\n                 is_nested = True\n                 depth = nested_depth - 1\n-                if hasattr(base_serializer_class.Meta, \"fields\"):\n-                    fields = base_serializer_class.Meta.fields\n-                if hasattr(base_serializer_class.Meta, \"exclude\"):\n-                    exclude = base_serializer_class.Meta.exclude\n \n         NautobotNestedSerializer.__name__ = nested_serializer_name\n         NESTED_SERIALIZER_CACHE[nested_serializer_name] = NautobotNestedSerializer"
        },
        {
          "filename": "nautobot/core/testing/api.py",
          "status": "modified",
          "additions": 32,
          "deletions": 1,
          "patch": "@@ -73,6 +73,31 @@ def _get_list_url(self):\n         viewname = lookup.get_route_for_model(self.model, \"list\", api=True)\n         return reverse(viewname)\n \n+    VERBOTEN_STRINGS = (\n+        \"password\",\n+        # https://docs.djangoproject.com/en/3.2/topics/auth/passwords/#included-hashers\n+        \"argon2\",\n+        \"bcrypt\",\n+        \"crypt\",\n+        \"md5\",\n+        \"pbkdf2\",\n+        \"scrypt\",\n+        \"sha1\",\n+        \"sha256\",\n+        \"sha512\",\n+    )\n+\n+    def assert_no_verboten_content(self, response):\n+        \"\"\"\n+        Check an API response for content that should not be exposed in the API.\n+\n+        If a specific API has a false failure here (maybe it has security-related strings as model flags or something?),\n+        its test case should overload self.VERBOTEN_STRINGS appropriately.\n+        \"\"\"\n+        response_raw_content = response.content.decode(response.charset)\n+        for verboten in self.VERBOTEN_STRINGS:\n+            self.assertNotIn(verboten, response_raw_content)\n+\n \n @tag(\"unit\")\n class APIViewTestCases:\n@@ -150,6 +175,8 @@ def test_get_object(self):\n             # Fields that should be absent by default (opt-in fields):\n             self.assertNotIn(\"computed_fields\", response.data)\n             self.assertNotIn(\"relationships\", response.data)\n+            # Content that should never be present:\n+            self.assert_no_verboten_content(response)\n \n             # If opt-in fields are supported on this model, make sure they can be opted into\n \n@@ -302,6 +329,7 @@ def test_list_objects_depth_0(self):\n             self.assertIsInstance(response.data, dict)\n             self.assertIn(\"results\", response.data)\n             self.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n+            self.assert_no_verboten_content(response)\n \n             for response_data in response.data[\"results\"]:\n                 for field in depth_fields:\n@@ -316,7 +344,8 @@ def test_list_objects_depth_0(self):\n                             url = response_data[field][\"url\"]\n                             pk = response_data[field][\"id\"]\n                             object_type = response_data[field][\"object_type\"]\n-                            # The response should be a brief API object, containing an ID, object_type, and URL ending in the UUID of the relevant object\n+                            # The response should be a brief API object, containing an ID, object_type, and a\n+                            # URL ending in the UUID of the relevant object:\n                             # http://nautobot.example.com/api/circuits/providers/<uuid>/\n                             #                                                    ^^^^^^\n                             self.assertTrue(is_uuid(url.split(\"/\")[-2]))\n@@ -340,6 +369,7 @@ def test_list_objects_depth_1(self):\n             self.assertIsInstance(response.data, dict)\n             self.assertIn(\"results\", response.data)\n             self.assertEqual(len(response.data[\"results\"]), self._get_queryset().count())\n+            self.assert_no_verboten_content(response)\n \n             for response_data in response.data[\"results\"]:\n                 for field in depth_fields:\n@@ -392,6 +422,7 @@ def test_list_objects(self):\n             self.assertIsInstance(response.data, dict)\n             self.assertIn(\"results\", response.data)\n             self.assertEqual(len(response.data[\"results\"]), 2)\n+            self.assert_no_verboten_content(response)\n \n         @override_settings(EXEMPT_VIEW_PERMISSIONS=[])\n         def test_list_objects_filtered(self):"
        },
        {
          "filename": "nautobot/docs/development/apps/migration/code-updates.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -123,6 +123,9 @@ App Model Serializers for any models that could have a Generic Foreign Key or a\n \n After removing existing `NestedSerializers`, you can change the `fields` attribute in your serializers' `class Meta` to `__all__` and that will automatically include all the model's fields in the serializer, including related-model fields that would previously have required a reference to a `NestedSerializer`. If you want to exclude certain fields of the model, you can specify a list of fields you want to display in the `fields` attribute instead.\n \n+!!! warning\n+    Use caution around `fields = \"__all__\"` -- if your model has any fields that should _not_ be exposed in the REST API, you should avoid using `\"__all__\"` and instead use an explicit `fields` list to ensure that such fields are not exposed. In some cases, it may be appropriate to use `\"__all__\"` in combination with flags such as `write_only=True` on specific fields, but proceed with caution and examine the REST API data carefully to ensure that its contents are as expected.\n+\n Include all model attributes:\n \n ```python"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "082404e6cc63181ee2b47eae9cda5a6bec0601b2",
            "date": "2025-01-10T17:11:08Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "f979d876c9c747a129975124f213ee606d8846e8",
            "date": "2025-01-10T15:50:52Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "3e2f8b5787971c267c87a5f1ffdfda045fdd3eb9",
            "date": "2025-01-10T15:36:42Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "e5397443c821333bcfd193374458fb88ff45175f",
            "date": "2025-01-09T22:12:11Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "64ae4d2b7f018dc4fb43beff1f3a3144ae15ef0a",
            "date": "2025-01-09T22:09:46Z",
            "author_login": "HanlinMiao"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Nautobot is a Network Automation Platform built as a web application atop the Django Python framework with a PostgreSQL or MySQL database. In Nautobot 2.0.x, certain REST API endpoints, in combination with the `?depth=<N>` query parameter, can expose hashed user passwords as stored in the database to any authenticated user with access to these endpoints. The passwords are not exposed in plaintext. This vulnerability has been patched in version 2.0.3.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-25T18:17:36.607",
    "last_modified": "2024-11-21T08:27:56.323",
    "fix_date": "2023-10-23T20:56:09Z"
  },
  "references": [
    {
      "url": "https://github.com/nautobot/nautobot/commit/1ce8e5c658a075c29554d517cd453675e5d40d71",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/4692",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-r2hw-74xv-4gqp",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/1ce8e5c658a075c29554d517cd453675e5d40d71",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/4692",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-r2hw-74xv-4gqp",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.940393",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nautobot",
    "owner": "nautobot",
    "created_at": "2021-02-19T22:00:19Z",
    "updated_at": "2025-01-13T11:52:13Z",
    "pushed_at": "2025-01-14T12:37:17Z",
    "size": 158251,
    "stars": 1107,
    "forks": 298,
    "open_issues": 881,
    "watchers": 1107,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "ltm-1.6",
      "main",
      "next"
    ],
    "languages": {
      "Python": 8160292,
      "HTML": 1071092,
      "JavaScript": 95221,
      "CSS": 45096,
      "Jinja": 28376,
      "Gherkin": 14390,
      "Dockerfile": 11222,
      "Shell": 8955
    },
    "commit_activity": {
      "total_commits_last_year": 1444,
      "avg_commits_per_week": 27.76923076923077,
      "days_active_last_year": 230
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:49:58.690841"
  }
}