{
  "cve_id": "CVE-2023-46133",
  "github_data": {
    "repository": "entronad/crypto-es",
    "fix_commit": "d506677fae3d03a454b37ad126e0c119d416b757",
    "related_commits": [
      "d506677fae3d03a454b37ad126e0c119d416b757",
      "d506677fae3d03a454b37ad126e0c119d416b757"
    ],
    "patch_url": "https://github.com/entronad/crypto-es/commit/d506677fae3d03a454b37ad126e0c119d416b757.patch",
    "fix_commit_details": {
      "sha": "d506677fae3d03a454b37ad126e0c119d416b757",
      "commit_date": "2023-10-24T14:53:30Z",
      "author": {
        "login": "entronad",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "v2.1.0",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 64,
        "additions": 39,
        "deletions": 25
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1,3 +1,9 @@\n+## 2.1.0\n+\n+**2023-10-24**\n+\n+- Change pbkdf2 default params to enhance security: https://github.com/entronad/crypto-es/security/advisories/GHSA-mpj8-q39x-wq5h\n+\n ## 2.0.4\n \n **2023-07-25**"
        },
        {
          "filename": "__tests__/debug.js",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -1,6 +1,11 @@\n import C from '../lib/index.js';\n \n-const data = {};\n-data.saltA = C.enc.Hex.parse('AA00000000000000');\n-const encryptedA = C.Blowfish.encrypt('Test', 'pass', { salt: data.saltA, hasher: C.algo.SHA256 }).toString();\n-console.log(encryptedA);\n\\ No newline at end of file\n+// const data = {};\n+// data.saltA = C.enc.Hex.parse('AA00000000000000');\n+// const encryptedA = C.Blowfish.encrypt('Test', 'pass', { salt: data.saltA, hasher: C.algo.SHA256 }).toString();\n+// console.log(encryptedA);\n+\n+const start = (new Date()).getTime();\n+console.log(C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128 / 32}).toString());\n+const end = (new Date()).getTime();\n+console.log(end - start);"
        },
        {
          "filename": "__tests__/pbkdf2.test.ts",
          "status": "modified",
          "additions": 14,
          "deletions": 14,
          "patch": "@@ -4,72 +4,72 @@ import C from '../lib/index.js';\n describe('pbkdf2', () => {\n   it('keySize 128', () => {\n     expect(C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128 / 32 }).toString())\n-      .toBe('cdedb5281bb2f801565a1122b2563515');\n+      .toBe('62929ab995a1111c75c37bc562261ea3');\n   });\n \n   it('keySize 256', () => {\n     expect(C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256 / 32 }).toString())\n-      .toBe('cdedb5281bb2f801565a1122b25635150ad1f7a04bb9f3a333ecc0e2e1f70837');\n+      .toBe('62929ab995a1111c75c37bc562261ea3fb3cdc7e725c4ca87c03cec5bb7663e1');\n   });\n \n   it('keySize 128 iterations 2', () => {\n     expect(C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128 / 32, iterations: 2 }).toString())\n-      .toBe('01dbee7f4a9e243e988b62c73cda935d');\n+      .toBe('262fb72ea65b44ab5ceba7f8c8bfa781');\n   });\n \n   it('keySize 256 iterations 2', () => {\n     expect(C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256 / 32, iterations: 2 }).toString())\n-      .toBe('01dbee7f4a9e243e988b62c73cda935da05378b93244ec8f48a99e61ad799d86');\n+      .toBe('262fb72ea65b44ab5ceba7f8c8bfa7815ff9939204eb7357a59a75877d745777');\n   });\n \n   it('keySize 128 iterations 1200', () => {\n     expect(C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128 / 32, iterations: 1200 }).toString())\n-      .toBe('5c08eb61fdf71e4e4ec3cf6ba1f5512b');\n+      .toBe('c76a982415f1acc71dc197273c5b6ada');\n   });\n \n   it('keySize 256 iterations 1200', () => {\n     expect(C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256 / 32, iterations: 1200 }).toString())\n-      .toBe('5c08eb61fdf71e4e4ec3cf6ba1f5512ba7e52ddbc5e5142f708a31e2e62b1e13');\n+      .toBe('c76a982415f1acc71dc197273c5b6ada32f62915ed461718aad32843762433fa');\n   });\n \n   it('keySize 128 iterations 5', () => {\n     expect(C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 128 / 32, iterations: 5 }).toString())\n-      .toBe('d1daa78615f287e6a1c8b120d7062a49');\n+      .toBe('74e98b2e9eeddaab3113c1efc6d82b07');\n   });\n \n   it('keySize 256 iterations 5', () => {\n     expect(C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 256 / 32, iterations: 5 }).toString())\n-      .toBe('d1daa78615f287e6a1c8b120d7062a493f98d203e6be49a6adf4fa574b6e64ee');\n+      .toBe('74e98b2e9eeddaab3113c1efc6d82b073c4860195b3e0737fa21a4778f376321');\n   });\n \n   it('keySize 128 iterations 1200 pass phrase equals block size', () => {\n     expect(C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 128 / 32, iterations: 1200 }).toString())\n-      .toBe('139c30c0966bc32ba55fdbf212530ac9');\n+      .toBe('c1dfb29a4d2f2fb67c6f78d074d66367');\n   });\n \n   it('keySize 256 iterations 1200 pass phrase equals block size', () => {\n     expect(C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 256 / 32, iterations: 1200 }).toString())\n-      .toBe('139c30c0966bc32ba55fdbf212530ac9c5ec59f1a452f5cc9ad940fea0598ed1');\n+      .toBe('c1dfb29a4d2f2fb67c6f78d074d663671e6fd4da1e598572b1fecf256cb7cf61');\n   });\n \n   it('keySize 128 iterations 1200 pass phrase exceeds block size', () => {\n     expect(C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 128 / 32, iterations: 1200 }).toString())\n-      .toBe('9ccad6d468770cd51b10e6a68721be61');\n+      .toBe('22344bc4b6e32675a8090f3ea80be01d');\n   });\n \n   it('keySize 256 iterations 1200 pass phrase exceeds block size', () => {\n     expect(C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 256 / 32, iterations: 1200 }).toString())\n-      .toBe('9ccad6d468770cd51b10e6a68721be611a8b4d282601db3b36be9246915ec82a');\n+      .toBe('22344bc4b6e32675a8090f3ea80be01d5f95126a2cddc3facc4a5e6dca04ec58');\n   });\n \n   it('keySize 128 iterations 50', () => {\n     expect(C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 128 / 32, iterations: 50 }).toString())\n-      .toBe('6b9cf26d45455a43a5b8bb276a403b39');\n+      .toBe('44b0781253db3141ac4174af29325818');\n   });\n \n   it('keySize 256 iterations 50', () => {\n     expect(C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 256 / 32, iterations: 50 }).toString())\n-      .toBe('6b9cf26d45455a43a5b8bb276a403b39e7fe37a0c41e02c281ff3069e1e94f52');\n+      .toBe('44b0781253db3141ac4174af29325818584698d507a79f9879033dec308a2b77');\n   });\n \n   it('input integrity', () => {"
        },
        {
          "filename": "lib/pbkdf2.js",
          "status": "modified",
          "additions": 8,
          "deletions": 5,
          "patch": "@@ -2,7 +2,7 @@ import {\n   Base,\n   WordArray,\n } from './core.js';\n-import { SHA1Algo } from './sha1.js';\n+import { SHA256Algo } from './sha256.js';\n import { HMAC } from './hmac.js';\n \n /**\n@@ -25,17 +25,20 @@ export class PBKDF2Algo extends Base {\n \n     /**\n      * Configuration options.\n+     * \n+     * The default `hasher` and `interations` is different from CryptoJs to enhance security:\n+     * https://github.com/entronad/crypto-es/security/advisories/GHSA-mpj8-q39x-wq5h\n      *\n      * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n-     * @property {Hasher} hasher The hasher to use. Default: SHA1\n-     * @property {number} iterations The number of iterations to perform. Default: 1\n+     * @property {Hasher} hasher The hasher to use. Default: SHA256\n+     * @property {number} iterations The number of iterations to perform. Default: 250000\n      */\n     this.cfg = Object.assign(\n       new Base(),\n       {\n         keySize: 128 / 32,\n-        hasher: SHA1Algo,\n-        iterations: 1,\n+        hasher: SHA256Algo,\n+        iterations: 250000,\n       },\n       cfg,\n     );"
        },
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,6 @@\n   \"requires\": true,\n   \"packages\": {\n     \"\": {\n-      \"name\": \"crypto-es\",\n       \"version\": \"2.0.4\",\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n@@ -2294,6 +2293,7 @@\n         \"@types/node\": \"*\",\n         \"anymatch\": \"^3.0.3\",\n         \"fb-watchman\": \"^2.0.0\",\n+        \"fsevents\": \"^2.3.2\",\n         \"graceful-fs\": \"^4.2.9\",\n         \"jest-regex-util\": \"^29.4.3\",\n         \"jest-util\": \"^29.5.0\","
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"crypto-es\",\n-  \"version\": \"2.0.4\",\n+  \"version\": \"2.1.0\",\n   \"description\": \"A cryptography algorithms library compatible with ES6 and TypeScript\",\n   \"keywords\": [\n     \"typescript\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8c35708676093a3b023bed7a1e9b7b64b1d1906b",
            "date": "2024-06-18T05:54:08Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d506677fae3d03a454b37ad126e0c119d416b757",
            "date": "2023-10-24T14:53:30Z",
            "author_login": "entronad"
          },
          {
            "sha": "aa48d48413549addc06cd737a272466d5fc1b5e6",
            "date": "2023-10-19T08:38:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "005c6b19e5cfa872d6c929a912f7c90dc3de6d2d",
            "date": "2023-07-25T01:34:29Z",
            "author_login": "entronad"
          },
          {
            "sha": "57cf5c65ad74071047e40e7c7442ae7b48fc21c5",
            "date": "2023-07-25T01:28:38Z",
            "author_login": "entronad"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-328",
    "description": "CryptoES is a cryptography algorithms library compatible with ES6 and TypeScript. Prior to version 2.1.0, CryptoES PBKDF2 is 1,000 times weaker than originally specified in 1993, and at least 1,300,000 times weaker than current industry standard. This is because it both defaults to SHA1, a cryptographic hash algorithm considered insecure since at least 2005, and defaults to one single iteration, a 'strength' or 'difficulty' value specified at 1,000 when specified in 1993. PBKDF2 relies on iteration count as a countermeasure to preimage and collision attacks. If used to protect passwords, the impact is high. If used to generate signatures, the impact is high. Version 2.1.0 contains a patch for this issue. As a workaround, configure CryptoES to use SHA256 with at least 250,000 iterations.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-25T21:15:10.093",
    "last_modified": "2024-11-21T08:27:57.017",
    "fix_date": "2023-10-24T14:53:30Z"
  },
  "references": [
    {
      "url": "https://github.com/entronad/crypto-es/commit/d506677fae3d03a454b37ad126e0c119d416b757",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/entronad/crypto-es/security/advisories/GHSA-mpj8-q39x-wq5h",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/entronad/crypto-es/commit/d506677fae3d03a454b37ad126e0c119d416b757",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/entronad/crypto-es/security/advisories/GHSA-mpj8-q39x-wq5h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.951529",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "crypto-es",
    "owner": "entronad",
    "created_at": "2018-11-28T07:34:17Z",
    "updated_at": "2025-01-11T03:49:02Z",
    "pushed_at": "2024-06-18T05:54:16Z",
    "size": 711,
    "stars": 281,
    "forks": 32,
    "open_issues": 6,
    "watchers": 281,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 336601,
      "TypeScript": 96311
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T20:06:43.490142"
  }
}