{
  "cve_id": "CVE-2023-46134",
  "github_data": {
    "repository": "man-group/dtale",
    "fix_commit": "bf8c54ab2490803f45f0652a9a0e221a94d39668",
    "related_commits": [
      "bf8c54ab2490803f45f0652a9a0e221a94d39668",
      "bf8c54ab2490803f45f0652a9a0e221a94d39668"
    ],
    "patch_url": "https://github.com/man-group/dtale/commit/bf8c54ab2490803f45f0652a9a0e221a94d39668.patch",
    "fix_commit_details": {
      "sha": "bf8c54ab2490803f45f0652a9a0e221a94d39668",
      "commit_date": "2023-10-02T17:49:59Z",
      "author": {
        "login": "aschonfeld",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Updated 'Custom Filter' feature to be disabled by default",
        "length": 57,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 238,
        "additions": 206,
        "deletions": 32
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -976,6 +976,20 @@ outliers = s[(s < iqr_lower) | (s > iqr_upper)]\n If you click on the \"Apply outlier filter\" link this will add an addtional \"outlier\" filter for this column which can be removed from the [header](#header) or the [custom filter](#custom-filter) shown in picture above to the right.\n \n #### Custom Filter\n+\n+**Starting with version 3.7.0 this feature will be turned off by default.\n+Custom filters are vulnerable to code injection attacks, please only use in trusted environments.**\n+\n+**You can turn this feature on by doing one of the following:**\n+ - **add `enable_custom_filters=True` to your `dtale.show` call**\n+ - **add `enable_custom_filters = False` to the [app] section of your dtale.ini config file ([more info](https://github.com/man-group/dtale/blob/master/docs/CONFIGURATION.md))**\n+ - **run this code before calling dtale.show:**\n+```python\n+import dtale.global_state as global_state\n+global_state.set_app_settings(dict(enable_custom_filters=True))\n+```\n+\n+\n Apply a custom pandas `query` to your data (link to pandas documentation included in popup)  \n \n |Editing|Result|"
        },
        {
          "filename": "docs/CONFIGURATION.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -25,6 +25,7 @@ lock_header_menu = False\n hide_header_menu = False\n hide_main_menu = False\n hide_column_menus = False\n+enable_custom_filters = False\n \n [charts] # this controls how many points can be contained within scatter & 3D charts\n scatter_points = 15000"
        },
        {
          "filename": "dtale/__init__.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -22,6 +22,7 @@\n     HIDE_HEADER_MENU = False\n     HIDE_MAIN_MENU = False\n     HIDE_COLUMN_MENUS = False\n+    ENABLE_CUSTOM_FILTERS = False\n \n     # flake8: NOQA\n     from dtale.app import show, get_instance, instances, offline_chart  # isort:skip"
        },
        {
          "filename": "dtale/app.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -719,6 +719,8 @@ def show(data=None, data_loader=None, name=None, context_vars=None, **options):\n     :param highlight_filter: if True, then highlight rows on the frontend which will be filtered when applying a filter\n                              rather than hiding them from the dataframe\n     :type highlight_filter: boolean, optional\n+    :param enable_custom_filters: If true, this will enable users to make custom filters from the UI\n+    :type enable_custom_filters: bool, optional\n \n     :Example:\n \n@@ -804,6 +806,7 @@ def show(data=None, data_loader=None, name=None, context_vars=None, **options):\n             hide_header_menu=final_options.get(\"hide_header_menu\"),\n             hide_main_menu=final_options.get(\"hide_main_menu\"),\n             hide_column_menus=final_options.get(\"hide_column_menus\"),\n+            enable_custom_filters=final_options.get(\"enable_custom_filters\"),\n         )\n         instance.started_with_open_browser = final_options[\"open_browser\"]\n         is_active = not running_with_flask_debug() and is_up(app_url)"
        },
        {
          "filename": "dtale/config.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -107,6 +107,13 @@ def load_app_settings(config):\n         section=\"app\",\n         getter=\"getboolean\",\n     )\n+    enable_custom_filters = get_config_val(\n+        config,\n+        curr_app_settings,\n+        \"enable_custom_filters\",\n+        section=\"app\",\n+        getter=\"getboolean\",\n+    )\n     open_custom_filter_on_startup = get_config_val(\n         config,\n         curr_app_settings,\n@@ -145,6 +152,7 @@ def load_app_settings(config):\n             hide_header_menu=hide_header_menu,\n             hide_main_menu=hide_main_menu,\n             hide_column_menus=hide_column_menus,\n+            enable_custom_filters=enable_custom_filters,\n         )\n     )\n \n@@ -214,6 +222,7 @@ def build_show_options(options=None):\n         hide_header_menu=None,\n         hide_main_menu=None,\n         hide_column_menus=None,\n+        enable_custom_filters=None,\n     )\n     config_options = {}\n     config = get_config()"
        },
        {
          "filename": "dtale/global_state.py",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n import string\n import inspect\n \n-\n+from logging import getLogger\n from six import PY3\n \n from dtale.utils import dict_merge, format_data\n@@ -11,6 +11,8 @@\n except ImportError:\n     from collections import MutableMapping\n \n+logger = getLogger(__name__)\n+\n APP_SETTINGS = {\n     \"theme\": \"light\",\n     \"pin_menu\": False,\n@@ -30,6 +32,7 @@\n     \"hide_header_menu\": False,\n     \"hide_main_menu\": False,\n     \"hide_column_menus\": False,\n+    \"enable_custom_filters\": False,\n }\n \n AUTH_SETTINGS = {\"active\": False, \"username\": None, \"password\": None}\n@@ -602,6 +605,17 @@ def set_app_settings(settings):\n         instance_updates[\"hide_main_menu\"] = settings.get(\"hide_main_menu\")\n     if settings.get(\"hide_column_menus\") is not None:\n         instance_updates[\"hide_column_menus\"] = settings.get(\"hide_column_menus\")\n+    if settings.get(\"enable_custom_filters\") is not None:\n+        instance_updates[\"enable_custom_filters\"] = settings.get(\n+            \"enable_custom_filters\"\n+        )\n+        if instance_updates[\"enable_custom_filters\"]:\n+            logger.warning(\n+                (\n+                    \"Turning on custom filtering. Custom filters are vulnerable to code injection attacks, please only \"\n+                    \"use in trusted environments.\"\n+                )\n+            )\n \n     if _default_store.size() > 0 and len(instance_updates):\n         for data_id in _default_store.keys():"
        },
        {
          "filename": "dtale/templates/dtale/base.html",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -44,6 +44,7 @@\n         <input type=\"hidden\" id=\"hide_header_menu\" value=\"{{hide_header_menu}}\" />\n         <input type=\"hidden\" id=\"hide_main_menu\" value=\"{{hide_main_menu}}\" />\n         <input type=\"hidden\" id=\"hide_column_menus\" value=\"{{hide_column_menus}}\" />\n+        <input type=\"hidden\" id=\"enable_custom_filters\" value=\"{{enable_custom_filters}}\" />\n         <input type=\"hidden\" id=\"allow_cell_edits\" value=\"{{allow_cell_edits}}\" />\n         <input type=\"hidden\" id=\"hide_drop_rows\" value=\"{{hide_drop_rows}}\" />\n         <input type=\"hidden\" id=\"is_vscode\" value=\"{{is_vscode}}\" />"
        },
        {
          "filename": "dtale/views.py",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -351,6 +351,7 @@ def update_settings(self, **updates):\n         * hide_header_menu - if true, this will hide the header menu from the screen\n         * hide_main_menu - if true, this will hide the main menu from the screen\n         * hide_column_menus - if true, this will hide the column menus from the screen\n+        * enable_custom_filters - if True, allow users to specify custom filters from the UI using pandas.query strings\n \n         After applying please refresh any open browsers!\n         \"\"\"\n@@ -906,6 +907,7 @@ def startup(\n     hide_header_menu=None,\n     hide_main_menu=None,\n     hide_column_menus=None,\n+    enable_custom_filters=None,\n     force_save=True,\n ):\n     \"\"\"\n@@ -1033,6 +1035,7 @@ def startup(\n             hide_header_menu=hide_header_menu,\n             hide_main_menu=hide_main_menu,\n             hide_column_menus=hide_column_menus,\n+            enable_custom_filters=enable_custom_filters,\n         )\n         startup_code = (\n             \"from arcticdb import Arctic\\n\"\n@@ -1104,6 +1107,7 @@ def startup(\n                 hide_header_menu=hide_header_menu,\n                 hide_main_menu=hide_main_menu,\n                 hide_column_menus=hide_column_menus,\n+                enable_custom_filters=enable_custom_filters,\n             )\n \n             global_state.set_dataset(instance._data_id, data)\n@@ -1171,6 +1175,8 @@ def startup(\n             base_settings[\"hide_main_menu\"] = hide_main_menu\n         if hide_column_menus is not None:\n             base_settings[\"hide_column_menus\"] = hide_column_menus\n+        if enable_custom_filters is not None:\n+            base_settings[\"enable_custom_filters\"] = enable_custom_filters\n         if column_edit_options is not None:\n             base_settings[\"column_edit_options\"] = column_edit_options\n         global_state.set_settings(data_id, base_settings)\n@@ -1218,6 +1224,13 @@ def startup(\n         global_state.set_context_variables(\n             data_id, build_context_variables(data_id, context_vars)\n         )\n+        if global_state.load_flag(data_id, \"enable_custom_filters\", False):\n+            logger.warning(\n+                (\n+                    \"Custom filtering enabled. Custom filters are vulnerable to code injection attacks, please only \"\n+                    \"use in trusted environments.\"\n+                )\n+            )\n         return DtaleData(data_id, url, is_proxy=is_proxy, app_root=app_root)\n     else:\n         raise NoDataLoadedException(\"No data has been loaded into this D-Tale session!\")\n@@ -1251,6 +1264,9 @@ def base_render_template(template, data_id, **kwargs):\n     hide_header_menu = global_state.load_flag(data_id, \"hide_header_menu\", False)\n     hide_main_menu = global_state.load_flag(data_id, \"hide_main_menu\", False)\n     hide_column_menus = global_state.load_flag(data_id, \"hide_column_menus\", False)\n+    enable_custom_filters = global_state.load_flag(\n+        data_id, \"enable_custom_filters\", False\n+    )\n     app_overrides = dict(\n         allow_cell_edits=json.dumps(allow_cell_edits),\n         hide_shutdown=hide_shutdown,\n@@ -1259,6 +1275,7 @@ def base_render_template(template, data_id, **kwargs):\n         hide_header_menu=hide_header_menu,\n         hide_main_menu=hide_main_menu,\n         hide_column_menus=hide_column_menus,\n+        enable_custom_filters=enable_custom_filters,\n         github_fork=github_fork,\n     )\n     is_arcticdb = 0\n@@ -1996,6 +2013,16 @@ def test_filter(data_id):\n     :return: JSON {success: True/False}\n     \"\"\"\n     query = get_str_arg(request, \"query\")\n+    if query and not global_state.load_flag(data_id, \"enable_custom_filters\", False):\n+        return jsonify(\n+            dict(\n+                success=False,\n+                error=(\n+                    \"Custom Filters not enabled! Custom filters are vulnerable to code injection attacks, please only \"\n+                    \"use in trusted environments.\"\n+                ),\n+            )\n+        )\n     run_query(\n         handle_predefined(data_id),\n         build_query(data_id, query),"
        },
        {
          "filename": "frontend/static/__tests__/dtale/DataViewer-filter-test.tsx",
          "status": "modified",
          "additions": 13,
          "deletions": 2,
          "patch": "@@ -5,6 +5,7 @@ import { Provider } from 'react-redux';\n import { Store } from 'redux';\n \n import { DataViewer } from '../../dtale/DataViewer';\n+import { DISABLED_CUSTOM_FILTERS_MSG } from '../../popups/filter/FilterPopup';\n import DimensionsHelper from '../DimensionsHelper';\n import reduxUtils from '../redux-test-utils';\n import { buildInnerHTML, clickMainMenuButton, mockChartJS } from '../test-utils';\n@@ -46,9 +47,9 @@ describe('FilterPanel', () => {\n     await clickMainMenuButton('Custom Filter');\n   };\n \n-  const buildResult = async (dataId = '1'): Promise<void> => {\n+  const buildResult = async (dataId = '1', overrides?: Record<string, string>): Promise<void> => {\n     store = reduxUtils.createDtaleStore();\n-    buildInnerHTML({ settings: '', dataId }, store);\n+    buildInnerHTML({ settings: '', dataId, enableCustomFilters: 'True', ...overrides }, store);\n     await act(() => {\n       const result = render(\n         <Provider store={store}>\n@@ -135,4 +136,14 @@ describe('FilterPanel', () => {\n     });\n     expect(screen.queryByTestId('structured-filters')).toBeNull();\n   });\n+\n+  it('DataViewer: filtering with custom filtering not enabled', async () => {\n+    await buildResult('1', { enableCustomFilters: 'False' });\n+    const textarea = screen.getByTestId('filter-panel').getElementsByTagName('textarea')[0];\n+    expect(textarea.value).toBe(DISABLED_CUSTOM_FILTERS_MSG);\n+    expect(textarea).toBeDisabled();\n+    const buttons = [...screen.getByTestId('filter-panel').querySelectorAll('button')];\n+    expect(buttons.filter((b) => b.textContent === 'Apply')).toHaveLength(0);\n+    expect(buttons.filter((b) => b.textContent === 'Clear')).toHaveLength(0);\n+  });\n });"
        },
        {
          "filename": "frontend/static/__tests__/dtale/reduxGridUtils-test.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@ describe('reduxGridUtils', () => {\n       hide_header_menu: false,\n       hide_main_menu: false,\n       hide_column_menus: false,\n+      enable_custom_filters: false,\n     };\n     reduxUtils.handleReduxState(\n       columns,"
        },
        {
          "filename": "frontend/static/__tests__/popups/filter/FilterPopup-test.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -40,7 +40,7 @@ describe('FilterPopup', () => {\n     updateQueryEngineSpy = jest.spyOn(serverState, 'updateQueryEngine');\n     updateQueryEngineSpy.mockResolvedValue(Promise.resolve({ success: true }));\n     store = reduxUtils.createDtaleStore();\n-    buildInnerHTML({ settings: '', dataId: '1', queryEngine: 'python' }, store);\n+    buildInnerHTML({ settings: '', dataId: '1', queryEngine: 'python', enableCustomFilters: 'True' }, store);\n     store.dispatch({ type: ActionType.OPEN_CHART, chartData: { visible: true } });\n     wrapper = await act(\n       async () =>"
        },
        {
          "filename": "frontend/static/__tests__/reducers/dtale-test.tsx",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ describe('reducer tests', () => {\n       hideHeaderMenu: false,\n       hideMainMenu: false,\n       hideColumnMenus: false,\n+      enableCustomFilters: false,\n       hideDropRows: false,\n       iframe: false,\n       columnMenuOpen: false,\n@@ -52,6 +53,7 @@ describe('reducer tests', () => {\n         hide_header_menu: false,\n         hide_main_menu: false,\n         hide_column_menus: false,\n+        enable_custom_filters: false,\n       },\n       pythonVersion: null,\n       isPreview: false,"
        },
        {
          "filename": "frontend/static/__tests__/test-utils.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -95,6 +95,7 @@ export const buildInnerHTML = (props: Record<string, string | undefined> = {}, s\n     buildHidden('hide_header_menu', props.hideHeaderMenu ?? HIDE_SHUTDOWN),\n     buildHidden('hide_main_menu', props.hideMainMenu ?? HIDE_SHUTDOWN),\n     buildHidden('hide_column_menus', props.hideColumnMenus ?? HIDE_SHUTDOWN),\n+    buildHidden('enable_custom_filters', props.enableCustomFilters ?? HIDE_SHUTDOWN),\n     BASE_HTML,\n   ].join('');\n   store?.dispatch(actions.init());"
        },
        {
          "filename": "frontend/static/dtale/export/main.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@ actions.loadLockHeaderMenu(store);\n actions.loadHideHeaderMenu(store);\n actions.loadHideMainMenu(store);\n actions.loadHideColumnMenus(store);\n+actions.loadEnableCustomFilters(store);\n const root = ReactDOMClient.createRoot(document.getElementById('content')!);\n root.render(\n   <Provider store={store}>"
        },
        {
          "filename": "frontend/static/main.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -48,6 +48,7 @@ let storeBuilder: () => Store = () => {\n   actions.loadHideHeaderMenu(store);\n   actions.loadHideMainMenu(store);\n   actions.loadHideColumnMenus(store);\n+  actions.loadEnableCustomFilters(store);\n   return store;\n };\n if (pathname.indexOf('/dtale/popup') === 0) {"
        },
        {
          "filename": "frontend/static/popups/filter/FilterPanel.tsx",
          "status": "modified",
          "additions": 14,
          "deletions": 15,
          "patch": "@@ -1,4 +1,3 @@\n-import { createSelector } from '@reduxjs/toolkit';\n import * as React from 'react';\n import { WithTranslation, withTranslation } from 'react-i18next';\n import { useDispatch, useSelector } from 'react-redux';\n@@ -11,24 +10,19 @@ import SidePanelButtons from '../../dtale/side/SidePanelButtons';\n import { ActionType, HideSidePanelAction, SetQueryEngineAction } from '../../redux/actions/AppActions';\n import * as dtaleActions from '../../redux/actions/dtale';\n import * as settingsActions from '../../redux/actions/settings';\n-import { selectDataId, selectQueryEngine, selectSettings } from '../../redux/selectors';\n import { InstanceSettings, QueryEngine } from '../../redux/state/AppState';\n import { RemovableError } from '../../RemovableError';\n import * as CustomFilterRepository from '../../repository/CustomFilterRepository';\n import { Checkbox } from '../create/LabeledCheckbox';\n \n import ContextVariables from './ContextVariables';\n+import { DISABLED_CUSTOM_FILTERS_MSG, selectResult } from './FilterPopup';\n import PandasQueryHelp from './PandasQueryHelp';\n import QueryExamples from './QueryExamples';\n import StructuredFilters from './StructuredFilters';\n \n-const selectResult = createSelector(\n-  [selectDataId, selectQueryEngine, selectSettings],\n-  (dataId, queryEngine, settings) => ({ dataId, queryEngine, settings }),\n-);\n-\n const FilterPanel: React.FC<WithTranslation> = ({ t }) => {\n-  const { dataId, queryEngine, settings } = useSelector(selectResult);\n+  const { dataId, enableCustomFilters, queryEngine, settings } = useSelector(selectResult);\n   const dispatch = useDispatch();\n   const hideSidePanel = (): HideSidePanelAction => dispatch({ type: ActionType.HIDE_SIDE_PANEL });\n   const updateSettings = (updatedSettings: Partial<InstanceSettings>, callback?: () => void): AnyAction =>\n@@ -109,17 +103,22 @@ const FilterPanel: React.FC<WithTranslation> = ({ t }) => {\n           <div className=\"row m-0 pb-3\">\n             <div className=\"col p-0 font-weight-bold mt-auto\">{t('Custom Filter', { ns: 'filter' })}</div>\n             <PandasQueryHelp />\n-            <button className=\"btn btn-primary col-auto pt-2 pb-2\" onClick={clear}>\n-              <span>{t('Clear', { ns: 'filter' })}</span>\n-            </button>\n-            <button className=\"btn btn-primary col-auto pt-2 pb-2\" onClick={save}>\n-              <span>{t('Apply', { ns: 'filter' })}</span>\n-            </button>\n+            {enableCustomFilters && (\n+              <>\n+                <button className=\"btn btn-primary col-auto pt-2 pb-2\" onClick={clear}>\n+                  <span>{t('Clear', { ns: 'filter' })}</span>\n+                </button>\n+                <button className=\"btn btn-primary col-auto pt-2 pb-2\" onClick={save}>\n+                  <span>{t('Apply', { ns: 'filter' })}</span>\n+                </button>\n+              </>\n+            )}\n           </div>\n           <textarea\n             style={{ width: '100%', height: 150 }}\n-            value={query || ''}\n+            value={enableCustomFilters ? query : DISABLED_CUSTOM_FILTERS_MSG}\n             onChange={(event) => setQuery(event.target.value)}\n+            disabled={!enableCustomFilters}\n           />\n         </div>\n       </div>"
        },
        {
          "filename": "frontend/static/popups/filter/FilterPopup.tsx",
          "status": "modified",
          "additions": 26,
          "deletions": 12,
          "patch": "@@ -11,7 +11,7 @@ import { CloseChartAction, SetQueryEngineAction } from '../../redux/actions/AppA\n import { closeChart } from '../../redux/actions/charts';\n import * as dtaleActions from '../../redux/actions/dtale';\n import * as settingsActions from '../../redux/actions/settings';\n-import { selectDataId, selectQueryEngine, selectSettings } from '../../redux/selectors';\n+import { selectDataId, selectEnableCustomFilters, selectQueryEngine, selectSettings } from '../../redux/selectors';\n import { InstanceSettings, QueryEngine } from '../../redux/state/AppState';\n import { RemovableError } from '../../RemovableError';\n import * as CustomFilterRepository from '../../repository/CustomFilterRepository';\n@@ -22,13 +22,22 @@ import PandasQueryHelp from './PandasQueryHelp';\n import QueryExamples from './QueryExamples';\n import StructuredFilters from './StructuredFilters';\n \n-const selectResult = createSelector(\n-  [selectDataId, selectQueryEngine, selectSettings],\n-  (dataId, queryEngine, settings) => ({ dataId, queryEngine, settings }),\n+export const DISABLED_CUSTOM_FILTERS_MSG = [\n+  'Custom Filtering is currently disabled.  This feature is only for trusted environments, in order to unlock this ',\n+  'feature you must do one of the following:\\n\\n',\n+  '- add \"enable_custom_filters=True\" to your dtale.show call\\n',\n+  '- run this code before calling dtale.show\\n',\n+  '\\timport dtale.global_state as global_state\\n\\tglobal_state.set_app_settings(dict(enable_custom_filters=True))\\n',\n+  '- add \"enable_custom_filters = False\" to the [app] section of your dtale.ini config file',\n+].join('');\n+\n+export const selectResult = createSelector(\n+  [selectDataId, selectQueryEngine, selectEnableCustomFilters, selectSettings],\n+  (dataId, queryEngine, enableCustomFilters, settings) => ({ dataId, queryEngine, enableCustomFilters, settings }),\n );\n \n const FilterPopup: React.FC<WithTranslation> = ({ t }) => {\n-  const { dataId, queryEngine, settings } = useSelector(selectResult);\n+  const { dataId, queryEngine, enableCustomFilters, settings } = useSelector(selectResult);\n   const dispatch = useDispatch();\n   const onClose = (): CloseChartAction => dispatch(closeChart());\n   const updateSettings = (updatedSettings: Partial<InstanceSettings>, callback?: () => void): AnyAction =>\n@@ -140,8 +149,9 @@ const FilterPopup: React.FC<WithTranslation> = ({ t }) => {\n                 <div className=\"font-weight-bold pt-3 pb-3\">{t('Custom Filter', { ns: 'filter' })}</div>\n                 <textarea\n                   style={{ width: '100%', height: 150 }}\n-                  value={query || ''}\n+                  value={enableCustomFilters ? query : DISABLED_CUSTOM_FILTERS_MSG}\n                   onChange={(event) => setQuery(event.target.value)}\n+                  disabled={!enableCustomFilters}\n                 />\n               </div>\n             </div>\n@@ -165,12 +175,16 @@ const FilterPopup: React.FC<WithTranslation> = ({ t }) => {\n       </div>\n       <div className=\"modal-footer\">\n         <PandasQueryHelp />\n-        <button className=\"btn btn-primary\" onClick={clear}>\n-          <span>{t('Clear', { ns: 'filter' })}</span>\n-        </button>\n-        <button className=\"btn btn-primary\" onClick={save}>\n-          <span>{t('Apply', { ns: 'filter' })}</span>\n-        </button>\n+        {enableCustomFilters && (\n+          <>\n+            <button className=\"btn btn-primary\" onClick={clear}>\n+              <span>{t('Clear', { ns: 'filter' })}</span>\n+            </button>\n+            <button className=\"btn btn-primary\" onClick={save}>\n+              <span>{t('Apply', { ns: 'filter' })}</span>\n+            </button>\n+          </>\n+        )}\n       </div>\n     </React.Fragment>\n   );"
        },
        {
          "filename": "frontend/static/redux/actions/AppActions.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -63,6 +63,7 @@ export enum ActionType {\n   UPDATE_HIDE_HEADER_MENU = 'update-hide-header-menu',\n   UPDATE_HIDE_MAIN_MENU = 'update-hide-main-menu',\n   UPDATE_HIDE_COLUMN_MENUS = 'update-hide-column-menus',\n+  UPDATE_ENABLE_CUSTOM_FILTERS = 'update-enable-custom-filters',\n }\n \n /** Action fired when a range is selected */\n@@ -257,6 +258,11 @@ export interface UpdateHideColumnMenus extends Action<typeof ActionType.UPDATE_H\n   value: boolean;\n }\n \n+/** Action fired when updating the enable_custom_filters flag */\n+export interface UpdateEnableCustomFilters extends Action<typeof ActionType.UPDATE_ENABLE_CUSTOM_FILTERS> {\n+  value: boolean;\n+}\n+\n /** Type definition encompassing all application actions */\n export type AppActionTypes =\n   | InitAction\n@@ -302,7 +308,8 @@ export type AppActionTypes =\n   | UpdateLockHeaderMenu\n   | UpdateHideHeaderMenu\n   | UpdateHideMainMenu\n-  | UpdateHideColumnMenus;\n+  | UpdateHideColumnMenus\n+  | UpdateEnableCustomFilters;\n \n /** Type definition for redux application actions */\n export type AppActions<R> = ThunkAction<R, AppState, Record<string, unknown>, AnyAction>;"
        },
        {
          "filename": "frontend/static/redux/actions/dtale.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -77,6 +77,14 @@ export const loadHideColumnMenus = (store: Store<AppState, AnyAction>): void =>\n   });\n };\n \n+export const loadEnableCustomFilters = (store: Store<AppState, AnyAction>): void => {\n+  const { settings, enableCustomFilters } = store.getState();\n+  store.dispatch({\n+    type: ActionType.UPDATE_ENABLE_CUSTOM_FILTERS,\n+    value: enableCustomFilters ?? settings.enable_custom_filters ?? enableCustomFilters,\n+  });\n+};\n+\n export const openCustomFilter = (): SidePanelAction => ({\n   type: ActionType.SHOW_SIDE_PANEL,\n   view: SidePanelType.FILTER,"
        },
        {
          "filename": "frontend/static/redux/reducers/app/settings.ts",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -80,6 +80,19 @@ export const hideColumnMenus = (state = false, action: AppActionTypes): boolean\n   }\n };\n \n+export const enableCustomFilters = (state = false, action: AppActionTypes): boolean => {\n+  switch (action.type) {\n+    case ActionType.INIT_PARAMS:\n+      return toBool(getHiddenValue('enable_custom_filters'));\n+    case ActionType.UPDATE_ENABLE_CUSTOM_FILTERS:\n+      return action.value;\n+    case ActionType.LOAD_PREVIEW:\n+      return false;\n+    default:\n+      return state;\n+  }\n+};\n+\n export const openCustomFilterOnStartup = (state = false, action: AppActionTypes): boolean => {\n   switch (action.type) {\n     case ActionType.INIT_PARAMS:"
        },
        {
          "filename": "frontend/static/redux/selectors.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -58,6 +58,7 @@ export const selectBaseLockHeaderMenu = (state: AppState): boolean => state.lock\n export const selectBaseHideHeaderMenu = (state: AppState): boolean => state.hideHeaderMenu;\n export const selectBaseHideMainMenu = (state: AppState): boolean => state.hideMainMenu;\n export const selectBaseHideColumnMenus = (state: AppState): boolean => state.hideColumnMenus;\n+export const selectBaseEnableCustomFilters = (state: AppState): boolean => state.enableCustomFilters;\n export const selectFilteredRanges = (state: AppState): FilteredRanges => state.filteredRanges;\n export const selectShowAllHeatmapColumns = (state: AppState): boolean => state.showAllHeatmapColumns;\n export const selectChartData = (state: AppState): Popups => state.chartData;\n@@ -106,6 +107,14 @@ export const selectHideColumnMenus = createSelector(\n   [selectSettingsHideColumnMenus, selectBaseHideColumnMenus],\n   (settingsHideColumnMenus, hideColumnMenus) => settingsHideColumnMenus ?? hideColumnMenus,\n );\n+const selectSettingsEnableCustomFilters = createSelector(\n+  [selectSettings],\n+  (settings) => settings?.enable_custom_filters,\n+);\n+export const selectEnableCustomFilters = createSelector(\n+  [selectSettingsEnableCustomFilters, selectBaseEnableCustomFilters],\n+  (settingsEnableCustomFilters, enableCustomFilters) => settingsEnableCustomFilters ?? enableCustomFilters,\n+);\n export const selectRibbonMenuOpen = createSelector(\n   [selectBaseRibbonMenuOpen, selectLockHeaderMenu, selectHideHeaderMenu],\n   (ribbonMenuOpen, lockHeaderMenu, hideHeaderMenu) => (ribbonMenuOpen || lockHeaderMenu) && !hideHeaderMenu,"
        },
        {
          "filename": "frontend/static/redux/state/AppState.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -382,6 +382,7 @@ export interface InstanceSettings {\n   hide_main_menu: boolean;\n   hide_column_menus: boolean;\n   isArcticDB?: number;\n+  enable_custom_filters: boolean;\n }\n \n export const BASE_INSTANCE_SETTINGS: InstanceSettings = Object.freeze({\n@@ -395,6 +396,7 @@ export const BASE_INSTANCE_SETTINGS: InstanceSettings = Object.freeze({\n   hide_header_menu: false,\n   hide_main_menu: false,\n   hide_column_menus: false,\n+  enable_custom_filters: false,\n });\n \n /** Type definition for semantic versioning of python */\n@@ -437,6 +439,7 @@ export interface AppSettings {\n   hideHeaderMenu: boolean;\n   hideMainMenu: boolean;\n   hideColumnMenus: boolean;\n+  enableCustomFilters: boolean;\n }\n \n /** Properties for specifying filtered ranges */"
        },
        {
          "filename": "tests/dtale/config/dtale.ini",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@ lock_header_menu = False\n hide_header_menu = False\n hide_main_menu = False\n hide_column_menus = False\n+enable_custom_filters = False\n \n [charts]\n scatter_points = 15000"
        },
        {
          "filename": "tests/dtale/config/dtale_missing_props.ini",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -5,3 +5,4 @@ lock_header_menu = False\n hide_header_menu = False\n hide_main_menu = False\n hide_column_menus = False\n+enable_custom_filters = False"
        },
        {
          "filename": "tests/dtale/config/test_config.py",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -27,6 +27,7 @@ def test_load_app_settings():\n         \"hide_header_menu\": True,\n         \"hide_main_menu\": True,\n         \"hide_column_menus\": True,\n+        \"enable_custom_filters\": True,\n     }\n     with ExitStack() as stack:\n         stack.enter_context(mock.patch(\"dtale.global_state.APP_SETTINGS\", settings))\n@@ -43,6 +44,7 @@ def test_load_app_settings():\n         assert settings[\"hide_header_menu\"]\n         assert settings[\"hide_main_menu\"]\n         assert settings[\"hide_column_menus\"]\n+        assert settings[\"enable_custom_filters\"]\n \n         load_app_settings(\n             load_config_state(os.path.join(os.path.dirname(__file__), \"dtale.ini\"))\n@@ -60,6 +62,7 @@ def test_load_app_settings():\n         assert not settings[\"hide_header_menu\"]\n         assert not settings[\"hide_main_menu\"]\n         assert not settings[\"hide_column_menus\"]\n+        assert not settings[\"enable_custom_filters\"]\n \n \n @pytest.mark.unit\n@@ -77,6 +80,7 @@ def test_load_app_settings_w_missing_props():\n         \"hide_header_menu\": True,\n         \"hide_main_menu\": True,\n         \"hide_column_menus\": True,\n+        \"enable_custom_filters\": True,\n     }\n     with ExitStack() as stack:\n         stack.enter_context(mock.patch(\"dtale.global_state.APP_SETTINGS\", settings))\n@@ -91,6 +95,7 @@ def test_load_app_settings_w_missing_props():\n         assert settings[\"hide_header_menu\"]\n         assert settings[\"hide_main_menu\"]\n         assert settings[\"hide_column_menus\"]\n+        assert settings[\"enable_custom_filters\"]\n \n         load_app_settings(\n             load_config_state(\n@@ -106,6 +111,7 @@ def test_load_app_settings_w_missing_props():\n         assert not settings[\"hide_header_menu\"]\n         assert not settings[\"hide_main_menu\"]\n         assert not settings[\"hide_column_menus\"]\n+        assert not settings[\"enable_custom_filters\"]\n \n \n @pytest.mark.unit"
        },
        {
          "filename": "tests/dtale/test_views.py",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -25,6 +25,14 @@\n app = build_app(url=URL)\n \n \n+def setup_function(function):\n+    global_state.cleanup()\n+\n+\n+def teardown_function(function):\n+    global_state.cleanup()\n+\n+\n @pytest.mark.unit\n def test_head_endpoint():\n     import dtale.views as views\n@@ -72,6 +80,7 @@ def test_startup(unittest):\n         hide_header_menu=True,\n         hide_main_menu=True,\n         hide_column_menus=True,\n+        enable_custom_filters=True,\n     )\n \n     pdt.assert_frame_equal(instance.data, test_data.reset_index())\n@@ -86,6 +95,7 @@ def test_startup(unittest):\n             hide_header_menu=True,\n             hide_main_menu=True,\n             hide_column_menus=True,\n+            enable_custom_filters=True,\n             locked=[\"date\", \"security_id\"],\n             indexes=[\"date\", \"security_id\"],\n             precision=2,\n@@ -110,6 +120,7 @@ def test_startup(unittest):\n             hide_header_menu=True,\n             hide_main_menu=True,\n             hide_column_menus=True,\n+            enable_custom_filters=True,\n             locked=[\"date\", \"security_id\"],\n             indexes=[\"date\", \"security_id\"],\n             precision=2,\n@@ -1329,6 +1340,7 @@ def _df():\n def test_test_filter(test_data):\n     with app.test_client() as c:\n         build_data_inst({c.port: test_data})\n+        global_state.set_app_settings(dict(enable_custom_filters=True))\n         response = c.get(\n             \"/dtale/test-filter/{}\".format(c.port),\n             query_string=dict(query=\"date == date\"),\n@@ -1375,6 +1387,20 @@ def test_test_filter(test_data):\n         )\n         response_data = response.get_json()\n         assert response_data[\"success\"]\n+\n+        global_state.set_app_settings(dict(enable_custom_filters=False))\n+        response = c.get(\n+            \"/dtale/test-filter/{}\".format(c.port),\n+            query_string=dict(query=\"foo2 == 1\", save=True),\n+        )\n+        response_data = response.get_json()\n+        assert not response_data[\"success\"]\n+        assert response_data[\"error\"] == (\n+            \"Custom Filters not enabled! Custom filters are vulnerable to code injection attacks, please only \"\n+            \"use in trusted environments.\"\n+        )\n+        global_state.set_app_settings(dict(enable_custom_filters=True))\n+\n     if PY3:\n         df = pd.DataFrame([dict(a=1)])\n         df[\"a.b\"] = 2"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 6,
        "dependency_files": 0,
        "test_files": 9,
        "unique_directories": 17,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "41fe9550d5143757dcc067e187336ed92b604ea3",
            "date": "2024-12-13T15:18:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "84de3713e39b33762c6cd4550fd210b12474c4f3",
            "date": "2024-12-13T14:55:55Z",
            "author_login": "aschonfeld"
          },
          {
            "sha": "1e26ed3ca12fe83812b90f12a2b3e5fb0b740f7a",
            "date": "2024-12-13T14:49:27Z",
            "author_login": "aschonfeld"
          },
          {
            "sha": "5310812cd7dec7c1ac91622a62743a3c1c1d034d",
            "date": "2024-12-03T21:05:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0edceb9e86fdccc467dec29af67017738dce8c8f",
            "date": "2024-12-03T19:00:49Z",
            "author_login": "aschonfeld"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "D-Tale is the combination of a Flask back-end and a React front-end to view & analyze Pandas data structures. Prior to version 3.7.0, users hosting D-Tale publicly can be vulnerable to remote code execution, allowing attackers to run malicious code on the server. This issue has been patched in version 3.7.0 by turning off \"Custom Filter\" input by default. The only workaround for versions earlier than 3.7.0 is to only host D-Tale to trusted users.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-25T21:15:10.167",
    "last_modified": "2024-11-21T08:27:57.147",
    "fix_date": "2023-10-02T17:49:59Z"
  },
  "references": [
    {
      "url": "https://github.com/man-group/dtale/commit/bf8c54ab2490803f45f0652a9a0e221a94d39668",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale/security/advisories/GHSA-jq6c-r9xf-qxjm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale/commit/bf8c54ab2490803f45f0652a9a0e221a94d39668",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale/security/advisories/GHSA-jq6c-r9xf-qxjm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.951678",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dtale",
    "owner": "man-group",
    "created_at": "2019-07-15T09:34:48Z",
    "updated_at": "2025-01-13T14:38:00Z",
    "pushed_at": "2025-01-02T15:40:47Z",
    "size": 131813,
    "stars": 4818,
    "forks": 407,
    "open_issues": 61,
    "watchers": 4818,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1851060,
      "Python": 1562348,
      "CSS": 255281,
      "JavaScript": 38980,
      "HTML": 22403,
      "Dockerfile": 7802,
      "SCSS": 7049
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T15:21:07.887030"
  }
}