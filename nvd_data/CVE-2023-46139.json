{
  "cve_id": "CVE-2023-46139",
  "github_data": {
    "repository": "tiann/KernelSU",
    "fix_commit": "d24813b2c3738f2f9bd762932141cadd948c354f",
    "related_commits": [
      "d24813b2c3738f2f9bd762932141cadd948c354f",
      "d24813b2c3738f2f9bd762932141cadd948c354f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d24813b2c3738f2f9bd762932141cadd948c354f",
      "commit_date": "2023-10-23T04:59:30Z",
      "author": {
        "login": "tiann",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-86cp-3prf-pwqq",
        "length": 256,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 102,
        "additions": 94,
        "deletions": 8
      },
      "files": [
        {
          "filename": "kernel/Makefile",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -32,6 +32,11 @@ ifndef KSU_EXPECTED_HASH\n KSU_EXPECTED_HASH := c371061b19d8c7d7d6133c6a9bafe198fa944e50c1b31c9d8daa8d7f1fc2d2d6\n endif\n \n+ifdef KSU_MANAGER_PACKAGE\n+ccflags-y += -DKSU_MANAGER_PACKAGE=\\\"$(KSU_MANAGER_PACKAGE)\\\"\n+$(info -- KernelSU Manager package name: $(KSU_MANAGER_PACKAGE))\n+endif\n+\n $(info -- KernelSU Manager signature size: $(KSU_EXPECTED_SIZE))\n $(info -- KernelSU Manager signature hash: $(KSU_EXPECTED_HASH))\n "
        },
        {
          "filename": "kernel/apk_sign.c",
          "status": "modified",
          "additions": 80,
          "deletions": 8,
          "patch": "@@ -53,7 +53,7 @@ static int calc_hash(struct crypto_shash *alg, const unsigned char *data,\n }\n \n static int ksu_sha256(const unsigned char *data, unsigned int datalen,\n-\t\tunsigned char *digest)\n+\t\t      unsigned char *digest)\n {\n \tstruct crypto_shash *alg;\n \tchar *hash_alg_name = \"sha256\";\n@@ -70,7 +70,7 @@ static int ksu_sha256(const unsigned char *data, unsigned int datalen,\n }\n \n static bool check_block(struct file *fp, u32 *size4, loff_t *pos, u32 *offset,\n-\t\t\tunsigned expected_size, const char* expected_sha256)\n+\t\t\tunsigned expected_size, const char *expected_sha256)\n {\n \tksu_kernel_read_compat(fp, size4, 0x4, pos); // signer-sequence length\n \tksu_kernel_read_compat(fp, size4, 0x4, pos); // signer length\n@@ -90,7 +90,7 @@ static bool check_block(struct file *fp, u32 *size4, loff_t *pos, u32 *offset,\n \tif (*size4 == expected_size) {\n \t\t*offset += *size4;\n \n-\t\t#define CERT_MAX_LENGTH 1024\n+#define CERT_MAX_LENGTH 1024\n \t\tchar cert[CERT_MAX_LENGTH];\n \t\tif (*size4 > CERT_MAX_LENGTH) {\n \t\t\tpr_info(\"cert length overlimit\\n\");\n@@ -107,16 +107,71 @@ static bool check_block(struct file *fp, u32 *size4, loff_t *pos, u32 *offset,\n \t\thash_str[SHA256_DIGEST_SIZE * 2] = '\\0';\n \n \t\tbin2hex(hash_str, digest, SHA256_DIGEST_SIZE);\n-\t\tpr_info(\"sha256: %s, expected: %s\\n\", hash_str, expected_sha256);\n+\t\tpr_info(\"sha256: %s, expected: %s\\n\", hash_str,\n+\t\t\texpected_sha256);\n \t\tif (strcmp(expected_sha256, hash_str) == 0) {\n \t\t\treturn true;\n \t\t}\n \t}\n \treturn false;\n }\n \n-static __always_inline bool\n-check_v2_signature(char *path, unsigned expected_size, const char *expected_sha256)\n+struct zip_entry_header {\n+\tuint32_t signature;\n+\tuint16_t version;\n+\tuint16_t flags;\n+\tuint16_t compression;\n+\tuint16_t mod_time;\n+\tuint16_t mod_date;\n+\tuint32_t crc32;\n+\tuint32_t compressed_size;\n+\tuint32_t uncompressed_size;\n+\tuint16_t file_name_length;\n+\tuint16_t extra_field_length;\n+} __attribute__((packed));\n+\n+// This is a necessary but not sufficient condition, but it is enough for us\n+static bool has_v1_signature_file(struct file *fp)\n+{\n+\tstruct zip_entry_header header;\n+\tconst char MANIFEST[] = \"META-INF/MANIFEST.MF\";\n+\n+\tloff_t pos = 0;\n+\n+\twhile (ksu_kernel_read_compat(fp, &header,\n+\t\t\t\t      sizeof(struct zip_entry_header), &pos) ==\n+\t       sizeof(struct zip_entry_header)) {\n+\t\tif (header.signature != 0x04034b50) {\n+\t\t\t// ZIP magic: 'PK'\n+\t\t\treturn false;\n+\t\t}\n+\t\t// Read the entry file name\n+\t\tif (header.file_name_length == sizeof(MANIFEST) - 1) {\n+\t\t\tchar fileName[sizeof(MANIFEST)];\n+\t\t\tksu_kernel_read_compat(fp, fileName,\n+\t\t\t\t\t       header.file_name_length, &pos);\n+\t\t\tfileName[header.file_name_length] = '\\0';\n+\n+\t\t\t// Check if the entry matches META-INF/MANIFEST.MF\n+\t\t\tif (strncmp(MANIFEST, fileName, sizeof(MANIFEST) - 1) ==\n+\t\t\t    0) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Skip the entry file name\n+\t\t\tpos += header.file_name_length;\n+\t\t}\n+\n+\t\t// Skip to the next entry\n+\t\tpos += header.extra_field_length + header.compressed_size;\n+\t}\n+\n+\treturn false;\n+}\n+\n+static __always_inline bool check_v2_signature(char *path,\n+\t\t\t\t\t       unsigned expected_size,\n+\t\t\t\t\t       const char *expected_sha256)\n {\n \tunsigned char buffer[0x11] = { 0 };\n \tu32 size4;\n@@ -125,6 +180,7 @@ check_v2_signature(char *path, unsigned expected_size, const char *expected_sha2\n \tloff_t pos;\n \n \tbool v2_signing_valid = false;\n+\tint v2_signing_blocks = 0;\n \tbool v3_signing_exist = false;\n \tbool v3_1_signing_exist = false;\n \n@@ -185,8 +241,10 @@ check_v2_signature(char *path, unsigned expected_size, const char *expected_sha2\n \t\toffset = 4;\n \t\tpr_info(\"id: 0x%08x\\n\", id);\n \t\tif (id == 0x7109871au) {\n-\t\t\tv2_signing_valid = check_block(fp, &size4, &pos, &offset,\n-\t\t\t\t\t\t  expected_size, expected_sha256);\n+\t\t\tv2_signing_blocks++;\n+\t\t\tv2_signing_valid =\n+\t\t\t\tcheck_block(fp, &size4, &pos, &offset,\n+\t\t\t\t\t    expected_size, expected_sha256);\n \t\t} else if (id == 0xf05368c0u) {\n \t\t\t// http://aospxref.com/android-14.0.0_r2/xref/frameworks/base/core/java/android/util/apk/ApkSignatureSchemeV3Verifier.java#73\n \t\t\tv3_signing_exist = true;\n@@ -197,6 +255,20 @@ check_v2_signature(char *path, unsigned expected_size, const char *expected_sha2\n \t\tpos += (size8 - offset);\n \t}\n \n+\tif (v2_signing_blocks != 1) {\n+\t\tpr_err(\"Unexpected v2 signature count: %d\\n\",\n+\t\t       v2_signing_blocks);\n+\t\tv2_signing_valid = false;\n+\t}\n+\n+\tif (v2_signing_valid) {\n+\t\tint has_v1_signing = has_v1_signature_file(fp);\n+\t\tif (has_v1_signing) {\n+\t\t\tpr_err(\"Unexpected v1 signature scheme found!\\n\");\n+\t\t\tfilp_close(fp, 0);\n+\t\t\treturn false;\n+\t\t}\n+\t}\n clean:\n \tfilp_close(fp, 0);\n "
        },
        {
          "filename": "kernel/manager.c",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -24,6 +24,15 @@ bool become_manager(char *pkg)\n \tchar *buf;\n \tbool result = false;\n \n+#ifdef KSU_MANAGER_PACKAGE\n+\t// pkg is `/<real package>`\n+\tif (strncmp(pkg + 1, KSU_MANAGER_PACKAGE,\n+\t\t    sizeof(KSU_MANAGER_PACKAGE) - 1) != 0) {\n+\t\tpr_info(\"manager package is inconsistent with kernel build: %s\\n\",\n+\t\t\tKSU_MANAGER_PACKAGE);\n+\t\treturn false;\n+\t}\n+#endif\n \t// must be zygote's direct child, otherwise any app can fork a new process and\n \t// open manager's apk\n \tif (task_uid(current->real_parent).val != 0) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1998dbcb5555867c4f0674fd474f77bb1e7839cc",
            "date": "2025-01-25T21:18:32Z",
            "author_login": "aviraxp"
          },
          {
            "sha": "1728c6dc61a8f5204ad34e6b496a3a79cc0d76df",
            "date": "2025-01-25T12:01:18Z",
            "author_login": "changhuapeng"
          },
          {
            "sha": "c3926d39826a58d0f09bb2fc555ca8e0fb400870",
            "date": "2025-01-25T12:00:45Z",
            "author_login": "diphons"
          },
          {
            "sha": "38640ee4a60ecdc012f3aec89e6ba562a8719cab",
            "date": "2025-01-25T09:29:08Z",
            "author_login": "aviraxp"
          },
          {
            "sha": "b948976d24c4220d15af60dad9f38234ab842a37",
            "date": "2025-01-24T11:33:22Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-863",
    "description": "KernelSU is a Kernel based root solution for Android. Starting in version 0.6.1 and prior to version 0.7.0, if a KernelSU installed device is infected with a malware whose app signing block specially constructed, it can take over root privileges on the device. The vulnerable verification logic actually obtains the signature of the last block with an id of `0x7109871a`, while the verification logic during Android installation is to obtain the first one. In addition to the actual signature upgrade that has been fixed (KSU thought it was V2 but was actually V3), there is also the problem of actual signature downgrading (KSU thought it was V2 but was actually V1). Find a condition in the signature verification logic that will cause the signature not to be found error, and KernelSU does not implement the same conditions, so KSU thinks there is a V2 signature, but the APK signature verification actually uses the V1 signature. This issue is fixed in version 0.7.0. As workarounds, keep the KernelSU manager installed and avoid installing unknown apps.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-10-31T00:15:10.107",
    "last_modified": "2024-11-21T08:27:57.773",
    "fix_date": "2023-10-23T04:59:30Z"
  },
  "references": [
    {
      "url": "http://aospxref.com/android-14.0.0_r2/xref/frameworks/base/core/java/android/util/apk/ApkSigningBlockUtils.java#770",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://aospxref.com/android-14.0.0_r2/xref/frameworks/base/core/java/android/util/apk/ApkSigningBlockUtils.java#783",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://drive.google.com/drive/folders/1XdYCCAhC_mkt1k1IyUiwcgFsuOFvwNRl",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/blob/344c08bb79ba12b692016750cda363f9f3500182/kernel/apk_sign.c#L179C32-L179C32",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/blob/344c08bb79ba12b692016750cda363f9f3500182/kernel/apk_sign.c#L188",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/commit/d24813b2c3738f2f9bd762932141cadd948c354f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/security/advisories/GHSA-86cp-3prf-pwqq",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://aospxref.com/android-14.0.0_r2/xref/frameworks/base/core/java/android/util/apk/ApkSigningBlockUtils.java#770",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://aospxref.com/android-14.0.0_r2/xref/frameworks/base/core/java/android/util/apk/ApkSigningBlockUtils.java#783",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://drive.google.com/drive/folders/1XdYCCAhC_mkt1k1IyUiwcgFsuOFvwNRl",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/blob/344c08bb79ba12b692016750cda363f9f3500182/kernel/apk_sign.c#L179C32-L179C32",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/blob/344c08bb79ba12b692016750cda363f9f3500182/kernel/apk_sign.c#L188",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/commit/d24813b2c3738f2f9bd762932141cadd948c354f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tiann/KernelSU/security/advisories/GHSA-86cp-3prf-pwqq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.968320",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "KernelSU",
    "owner": "tiann",
    "created_at": "2022-12-09T14:03:54Z",
    "updated_at": "2025-01-26T07:59:29Z",
    "pushed_at": "2025-01-25T21:18:45Z",
    "size": 17965,
    "stars": 11197,
    "forks": 1882,
    "open_issues": 40,
    "watchers": 11197,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Kotlin": 284017,
      "Rust": 137107,
      "C": 130086,
      "Java": 41761,
      "TypeScript": 17922,
      "Shell": 14221,
      "C++": 13327,
      "Python": 5856,
      "Makefile": 3091,
      "JavaScript": 2777,
      "Just": 610,
      "CMake": 490,
      "AIDL": 228
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T08:08:49.202739"
  }
}