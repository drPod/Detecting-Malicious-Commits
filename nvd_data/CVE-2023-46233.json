{
  "cve_id": "CVE-2023-46233",
  "github_data": {
    "repository": "brix/crypto-js",
    "fix_commit": "421dd538b2d34e7c24a5b72cc64dc2b9167db40a",
    "related_commits": [
      "421dd538b2d34e7c24a5b72cc64dc2b9167db40a",
      "421dd538b2d34e7c24a5b72cc64dc2b9167db40a"
    ],
    "patch_url": "https://github.com/brix/crypto-js/commit/421dd538b2d34e7c24a5b72cc64dc2b9167db40a.patch",
    "fix_commit_details": {
      "sha": "421dd538b2d34e7c24a5b72cc64dc2b9167db40a",
      "commit_date": "2023-10-24T21:52:46Z",
      "author": {
        "login": "evanvosberg",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Change default hash algorithm and iteration's for PBKDF2 to prevent weak security by using the default configuration.",
        "length": 117,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 40,
        "additions": 20,
        "deletions": 20
      },
      "files": [
        {
          "filename": "grunt/config/modularize.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -91,7 +91,7 @@ module.exports = {\n             },\n             \"pbkdf2\": {\n                 \"exports\": \"CryptoJS.PBKDF2\",\n-                \"components\": [\"core\", \"sha1\", \"hmac\", \"pbkdf2\"]\n+                \"components\": [\"core\", \"sha256\", \"hmac\", \"pbkdf2\"]\n             },\n             \"evpkdf\": {\n                 \"exports\": \"CryptoJS.EvpKDF\","
        },
        {
          "filename": "src/pbkdf2.js",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -5,7 +5,7 @@\n     var Base = C_lib.Base;\r\n     var WordArray = C_lib.WordArray;\r\n     var C_algo = C.algo;\r\n-    var SHA1 = C_algo.SHA1;\r\n+    var SHA256 = C_algo.SHA256;\r\n     var HMAC = C_algo.HMAC;\r\n \r\n     /**\r\n@@ -16,13 +16,13 @@\n          * Configuration options.\r\n          *\r\n          * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\r\n-         * @property {Hasher} hasher The hasher to use. Default: SHA1\r\n-         * @property {number} iterations The number of iterations to perform. Default: 1\r\n+         * @property {Hasher} hasher The hasher to use. Default: SHA256\r\n+         * @property {number} iterations The number of iterations to perform. Default: 250000\r\n          */\r\n         cfg: Base.extend({\r\n             keySize: 128/32,\r\n-            hasher: SHA1,\r\n-            iterations: 1\r\n+            hasher: SHA256,\r\n+            iterations: 250000\r\n         }),\r\n \r\n         /**\r"
        },
        {
          "filename": "test/pbkdf2-test.js",
          "status": "modified",
          "additions": 14,
          "deletions": 14,
          "patch": "@@ -5,59 +5,59 @@ YUI.add('algo-pbkdf2-test', function (Y) {\n         name: 'PBKDF2',\r\n \r\n         testKeySize128: function () {\r\n-            Y.Assert.areEqual('cdedb5281bb2f801565a1122b2563515', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32 }).toString());\r\n+            Y.Assert.areEqual('62929ab995a1111c75c37bc562261ea3', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32 }).toString());\r\n         },\r\n \r\n         testKeySize256: function () {\r\n-            Y.Assert.areEqual('cdedb5281bb2f801565a1122b25635150ad1f7a04bb9f3a333ecc0e2e1f70837', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32 }).toString());\r\n+            Y.Assert.areEqual('62929ab995a1111c75c37bc562261ea3fb3cdc7e725c4ca87c03cec5bb7663e1', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32 }).toString());\r\n         },\r\n \r\n         testKeySize128Iterations2: function () {\r\n-            Y.Assert.areEqual('01dbee7f4a9e243e988b62c73cda935d', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 2 }).toString());\r\n+            Y.Assert.areEqual('262fb72ea65b44ab5ceba7f8c8bfa781', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 2 }).toString());\r\n         },\r\n \r\n         testKeySize256Iterations2: function () {\r\n-            Y.Assert.areEqual('01dbee7f4a9e243e988b62c73cda935da05378b93244ec8f48a99e61ad799d86', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 2 }).toString());\r\n+            Y.Assert.areEqual('262fb72ea65b44ab5ceba7f8c8bfa7815ff9939204eb7357a59a75877d745777', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 2 }).toString());\r\n         },\r\n \r\n         testKeySize128Iterations1200: function () {\r\n-            Y.Assert.areEqual('5c08eb61fdf71e4e4ec3cf6ba1f5512b', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 1200 }).toString());\r\n+            Y.Assert.areEqual('c76a982415f1acc71dc197273c5b6ada', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 1200 }).toString());\r\n         },\r\n \r\n         testKeySize256Iterations1200: function () {\r\n-            Y.Assert.areEqual('5c08eb61fdf71e4e4ec3cf6ba1f5512ba7e52ddbc5e5142f708a31e2e62b1e13', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 1200 }).toString());\r\n+            Y.Assert.areEqual('c76a982415f1acc71dc197273c5b6ada32f62915ed461718aad32843762433fa', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 1200 }).toString());\r\n         },\r\n \r\n         testKeySize128Iterations5: function () {\r\n-            Y.Assert.areEqual('d1daa78615f287e6a1c8b120d7062a49', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 128/32, iterations: 5 }).toString());\r\n+            Y.Assert.areEqual('74e98b2e9eeddaab3113c1efc6d82b07', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 128/32, iterations: 5 }).toString());\r\n         },\r\n \r\n         testKeySize256Iterations5: function () {\r\n-            Y.Assert.areEqual('d1daa78615f287e6a1c8b120d7062a493f98d203e6be49a6adf4fa574b6e64ee', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 256/32, iterations: 5 }).toString());\r\n+            Y.Assert.areEqual('74e98b2e9eeddaab3113c1efc6d82b073c4860195b3e0737fa21a4778f376321', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 256/32, iterations: 5 }).toString());\r\n         },\r\n \r\n         testKeySize128Iterations1200PassPhraseEqualsBlockSize: function () {\r\n-            Y.Assert.areEqual('139c30c0966bc32ba55fdbf212530ac9', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n+            Y.Assert.areEqual('c1dfb29a4d2f2fb67c6f78d074d66367', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n         },\r\n \r\n         testKeySize256Iterations1200PassPhraseEqualsBlockSize: function () {\r\n-            Y.Assert.areEqual('139c30c0966bc32ba55fdbf212530ac9c5ec59f1a452f5cc9ad940fea0598ed1', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n+            Y.Assert.areEqual('c1dfb29a4d2f2fb67c6f78d074d663671e6fd4da1e598572b1fecf256cb7cf61', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n         },\r\n \r\n         testKeySize128Iterations1200PassPhraseExceedsBlockSize: function () {\r\n-            Y.Assert.areEqual('9ccad6d468770cd51b10e6a68721be61', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n+            Y.Assert.areEqual('22344bc4b6e32675a8090f3ea80be01d', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n         },\r\n \r\n         testKeySize256Iterations1200PassPhraseExceedsBlockSize: function () {\r\n-            Y.Assert.areEqual('9ccad6d468770cd51b10e6a68721be611a8b4d282601db3b36be9246915ec82a', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n+            Y.Assert.areEqual('22344bc4b6e32675a8090f3ea80be01d5f95126a2cddc3facc4a5e6dca04ec58', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n         },\r\n \r\n         testKeySize128Iterations50: function () {\r\n-            Y.Assert.areEqual('6b9cf26d45455a43a5b8bb276a403b39', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 128/32, iterations: 50 }).toString());\r\n+            Y.Assert.areEqual('44b0781253db3141ac4174af29325818', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 128/32, iterations: 50 }).toString());\r\n         },\r\n \r\n         testKeySize256Iterations50: function () {\r\n-            Y.Assert.areEqual('6b9cf26d45455a43a5b8bb276a403b39e7fe37a0c41e02c281ff3069e1e94f52', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 256/32, iterations: 50 }).toString());\r\n+            Y.Assert.areEqual('44b0781253db3141ac4174af29325818584698d507a79f9879033dec308a2b77', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 256/32, iterations: 50 }).toString());\r\n         },\r\n \r\n         testInputIntegrity: function () {\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ac34a5a584337b33a2e567f50d96819a96ac44bf",
            "date": "2023-10-24T22:07:24Z",
            "author_login": "evanvosberg"
          },
          {
            "sha": "d5af3ae4130f63342e5623a22f225c612a32e34a",
            "date": "2023-10-24T22:01:45Z",
            "author_login": "evanvosberg"
          },
          {
            "sha": "9496e07c9a727f54e98942e86dd931d27558ea02",
            "date": "2023-10-24T22:01:25Z",
            "author_login": "evanvosberg"
          },
          {
            "sha": "421dd538b2d34e7c24a5b72cc64dc2b9167db40a",
            "date": "2023-10-24T21:52:46Z",
            "author_login": "evanvosberg"
          },
          {
            "sha": "d1f4f4daec4f053be3eea4f6233d1d05ccec22fa",
            "date": "2023-10-24T13:13:40Z",
            "author_login": "evanvosberg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-328",
    "description": "crypto-js is a JavaScript library of crypto standards. Prior to version 4.2.0, crypto-js PBKDF2 is 1,000 times weaker than originally specified in 1993, and at least 1,300,000 times weaker than current industry standard. This is because it both defaults to SHA1, a cryptographic hash algorithm considered insecure since at least 2005, and defaults to one single iteration, a 'strength' or 'difficulty' value specified at 1,000 when specified in 1993. PBKDF2 relies on iteration count as a countermeasure to preimage and collision attacks. If used to protect passwords, the impact is high. If used to generate signatures, the impact is high. Version 4.2.0 contains a patch for this issue. As a workaround, configure crypto-js to use SHA256 with at least 250,000 iterations.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-25T21:15:10.307",
    "last_modified": "2024-11-21T08:28:07.867",
    "fix_date": "2023-10-24T21:52:46Z"
  },
  "references": [
    {
      "url": "https://github.com/brix/crypto-js/commit/421dd538b2d34e7c24a5b72cc64dc2b9167db40a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/brix/crypto-js/security/advisories/GHSA-xwcq-pm8m-c4vf",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00025.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/brix/crypto-js/commit/421dd538b2d34e7c24a5b72cc64dc2b9167db40a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/brix/crypto-js/security/advisories/GHSA-xwcq-pm8m-c4vf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00025.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.951939",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "crypto-js",
    "owner": "brix",
    "created_at": "2013-04-08T20:16:40Z",
    "updated_at": "2025-01-14T08:16:52Z",
    "pushed_at": "2024-08-09T08:16:59Z",
    "size": 11074,
    "stars": 15952,
    "forks": 2402,
    "open_issues": 275,
    "watchers": 15952,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "JavaScript": 382814,
      "HTML": 25423
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T18:22:12.446489"
  }
}