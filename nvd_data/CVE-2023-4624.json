{
  "cve_id": "CVE-2023-4624",
  "github_data": {
    "repository": "bookstackapp/bookstack",
    "fix_commit": "c324ad928dbdd54ce5b09eb0dabe60ef9de1ea38",
    "related_commits": [
      "c324ad928dbdd54ce5b09eb0dabe60ef9de1ea38",
      "c324ad928dbdd54ce5b09eb0dabe60ef9de1ea38"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "c324ad928dbdd54ce5b09eb0dabe60ef9de1ea38",
      "commit_date": "2023-08-26T14:28:29Z",
      "author": {
        "login": "ssddanbrown",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Security: Added new SSR allow list and validator",
        "length": 174,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 137,
        "additions": 137,
        "deletions": 0
      },
      "files": [
        {
          "filename": "app/Activity/DispatchWebhookJob.php",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -8,6 +8,7 @@\n use BookStack\\Facades\\Theme;\n use BookStack\\Theming\\ThemeEvents;\n use BookStack\\Users\\Models\\User;\n+use BookStack\\Util\\SsrUrlValidator;\n use Illuminate\\Bus\\Queueable;\n use Illuminate\\Contracts\\Queue\\ShouldQueue;\n use Illuminate\\Foundation\\Bus\\Dispatchable;\n@@ -53,6 +54,8 @@ public function handle()\n         $lastError = null;\n \n         try {\n+            (new SsrUrlValidator())->ensureAllowed($this->webhook->endpoint);\n+\n             $response = Http::asJson()\n                 ->withOptions(['allow_redirects' => ['strict' => true]])\n                 ->timeout($this->webhook->timeout)"
        },
        {
          "filename": "app/Config/app.php",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -66,6 +66,15 @@\n     // Current host and source for the \"DRAWIO\" setting will be auto-appended to the sources configured.\n     'iframe_sources' => env('ALLOWED_IFRAME_SOURCES', 'https://*.draw.io https://*.youtube.com https://*.youtube-nocookie.com https://*.vimeo.com'),\n \n+    // A list of the sources/hostnames that can be reached by application SSR calls.\n+    // This is used wherever users can provide URLs/hosts in-platform, like for webhooks.\n+    // Host-specific functionality (usually controlled via other options) like auth\n+    // or user avatars for example, won't use this list.\n+    // Space seperated if multiple. Can use '*' as a wildcard.\n+    // Values will be compared prefix-matched, case-insensitive, against called SSR urls.\n+    // Defaults to allow all hosts.\n+    'ssr_hosts' => env('ALLOWED_SSR_HOSTS', '*'),\n+\n     // Alter the precision of IP addresses stored by BookStack.\n     // Integer value between 0 (IP hidden) to 4 (Full IP usage)\n     'ip_address_precision' => env('IP_ADDRESS_PRECISION', 4),"
        },
        {
          "filename": "app/Util/SsrUrlValidator.php",
          "status": "added",
          "additions": 64,
          "deletions": 0,
          "patch": "@@ -0,0 +1,64 @@\n+<?php\n+\n+namespace BookStack\\Util;\n+\n+use BookStack\\Exceptions\\HttpFetchException;\n+\n+class SsrUrlValidator\n+{\n+    protected string $config;\n+\n+    public function __construct(string $config = null)\n+    {\n+        $this->config = $config ?? config('app.ssr_hosts') ?? '';\n+    }\n+\n+    /**\n+     * @throws HttpFetchException\n+     */\n+    public function ensureAllowed(string $url): void\n+    {\n+        if (!$this->allowed($url)) {\n+            throw new HttpFetchException(trans('errors.http_ssr_url_no_match'));\n+        }\n+    }\n+\n+    /**\n+     * Check if the given URL is allowed by the configured SSR host values.\n+     */\n+    public function allowed(string $url): bool\n+    {\n+        $allowed = $this->getHostPatterns();\n+\n+        foreach ($allowed as $pattern) {\n+            if ($this->urlMatchesPattern($url, $pattern)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    protected function urlMatchesPattern($url, $pattern): bool\n+    {\n+        $pattern = trim($pattern);\n+        $url = trim($url);\n+\n+        if (empty($pattern) || empty($url)) {\n+            return false;\n+        }\n+\n+        $quoted = preg_quote($pattern, '/');\n+        $regexPattern = str_replace('\\*', '.*', $quoted);\n+\n+        return preg_match('/^' . $regexPattern . '.*$/i', $url);\n+    }\n+\n+    /**\n+     * @return string[]\n+     */\n+    protected function getHostPatterns(): array\n+    {\n+        return explode(' ', strtolower($this->config));\n+    }\n+}"
        },
        {
          "filename": "lang/en/errors.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -111,4 +111,6 @@\n     // Settings & Maintenance\n     'maintenance_test_email_failure' => 'Error thrown when sending a test email:',\n \n+    // HTTP errors\n+    'http_ssr_url_no_match' => 'The URL does not match the configured allowed SSR hosts',\n ];"
        },
        {
          "filename": "tests/Unit/SsrUrlValidatorTest.php",
          "status": "added",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -0,0 +1,59 @@\n+<?php\n+\n+namespace Tests\\Unit;\n+\n+use BookStack\\Exceptions\\HttpFetchException;\n+use BookStack\\Util\\SsrUrlValidator;\n+use Tests\\TestCase;\n+\n+class SsrUrlValidatorTest extends TestCase\n+{\n+    public function test_allowed()\n+    {\n+        $testMap = [\n+            // Single values\n+            ['config' => '', 'url' => '', 'result' => false],\n+            ['config' => '', 'url' => 'https://example.com', 'result' => false],\n+            ['config' => '    ', 'url' => 'https://example.com', 'result' => false],\n+            ['config' => '*', 'url' => '', 'result' => false],\n+            ['config' => '*', 'url' => 'https://example.com', 'result' => true],\n+            ['config' => 'https://*', 'url' => 'https://example.com', 'result' => true],\n+            ['config' => 'http://*', 'url' => 'https://example.com', 'result' => false],\n+            ['config' => 'https://*example.com', 'url' => 'https://example.com', 'result' => true],\n+            ['config' => 'https://*ample.com', 'url' => 'https://example.com', 'result' => true],\n+            ['config' => 'https://*.example.com', 'url' => 'https://example.com', 'result' => false],\n+            ['config' => 'https://*.example.com', 'url' => 'https://test.example.com', 'result' => true],\n+            ['config' => '*//example.com', 'url' => 'https://example.com', 'result' => true],\n+            ['config' => '*//example.com', 'url' => 'http://example.com', 'result' => true],\n+            ['config' => 'https://example.com', 'url' => 'https://example.com/a/b/c?test=cat', 'result' => true],\n+            ['config' => 'https://example.com', 'url' => 'https://example.co.uk', 'result' => false],\n+\n+            // Escapes\n+            ['config' => 'https://(.*?).com', 'url' => 'https://example.com', 'result' => false],\n+            ['config' => 'https://example.com', 'url' => 'https://example.co.uk#https://example.com', 'result' => false],\n+\n+            // Multi values\n+            ['config' => '*//example.org *//example.com', 'url' => 'https://example.com', 'result' => true],\n+            ['config' => '*//example.org *//example.com', 'url' => 'https://example.com/a/b/c?test=cat#hello', 'result' => true],\n+            ['config' => '*.example.org *.example.com', 'url' => 'https://example.co.uk', 'result' => false],\n+            ['config' => '  *.example.org  *.example.com  ', 'url' => 'https://example.co.uk', 'result' => false],\n+            ['config' => '* *.example.com', 'url' => 'https://example.co.uk', 'result' => true],\n+            ['config' => '*//example.org *//example.com *//example.co.uk', 'url' => 'https://example.co.uk', 'result' => true],\n+            ['config' => '*//example.org *//example.com *//example.co.uk', 'url' => 'https://example.net', 'result' => false],\n+        ];\n+\n+        foreach ($testMap as $test) {\n+            $result = (new SsrUrlValidator($test['config']))->allowed($test['url']);\n+            $this->assertEquals($test['result'], $result, \"Failed asserting url '{$test['url']}' with config '{$test['config']}' results \" . ($test['result'] ? 'true' : 'false'));\n+        }\n+    }\n+\n+    public function test_enssure_allowed()\n+    {\n+        $result = (new SsrUrlValidator('https://example.com'))->ensureAllowed('https://example.com');\n+        $this->assertNull($result);\n+\n+        $this->expectException(HttpFetchException::class);\n+        (new SsrUrlValidator('https://example.com'))->ensureAllowed('https://test.example.com');\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "786a434c03faa996e630f4a0a523567d3b093f43",
            "date": "2025-01-14T14:56:43Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "25c4f4b02ba06f66f5239de48ae005f895146f8d",
            "date": "2025-01-14T14:53:10Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "481580be172a4813ee98ad1b945d12d731e71cdb",
            "date": "2025-01-13T16:51:07Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "593645acfe8521db97d7469c92546c8529703969",
            "date": "2025-01-13T14:30:53Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "b9751807e7bad4b7d477b6977f630881f730abad",
            "date": "2025-01-13T13:27:32Z",
            "author_login": "ssddanbrown"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "Server-Side Request Forgery (SSRF) in GitHub repository bookstackapp/bookstack prior to v23.08.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-08-30T13:15:15.287",
    "last_modified": "2024-11-21T08:35:33.770",
    "fix_date": "2023-08-26T14:28:29Z"
  },
  "references": [
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/c324ad928dbdd54ce5b09eb0dabe60ef9de1ea38",
      "source": "security@huntr.dev",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/9ce5cef6-e546-44e7-addf-a2726fa4e60c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/c324ad928dbdd54ce5b09eb0dabe60ef9de1ea38",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/9ce5cef6-e546-44e7-addf-a2726fa4e60c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.486479",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "BookStack",
    "owner": "bookstackapp",
    "created_at": "2015-08-29T10:26:44Z",
    "updated_at": "2025-01-26T05:18:24Z",
    "pushed_at": "2025-01-22T20:39:48Z",
    "size": 43528,
    "stars": 15869,
    "forks": 1989,
    "open_issues": 616,
    "watchers": 15869,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "release"
    ],
    "languages": {
      "PHP": 7967773,
      "TypeScript": 1856418,
      "Blade": 444101,
      "JavaScript": 287858,
      "SCSS": 139395,
      "Dockerfile": 1282,
      "Shell": 347
    },
    "commit_activity": {
      "total_commits_last_year": 414,
      "avg_commits_per_week": 7.961538461538462,
      "days_active_last_year": 198
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:35:18.402097"
  }
}