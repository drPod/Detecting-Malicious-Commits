{
  "cve_id": "CVE-2023-46247",
  "github_data": {
    "repository": "vyperlang/vyper",
    "fix_commit": "0bb7203b584e771b23536ba065a6efda457161bb",
    "related_commits": [
      "0bb7203b584e771b23536ba065a6efda457161bb",
      "0bb7203b584e771b23536ba065a6efda457161bb"
    ],
    "patch_url": "https://github.com/vyperlang/vyper/commit/0bb7203b584e771b23536ba065a6efda457161bb.patch",
    "fix_commit_details": {
      "sha": "0bb7203b584e771b23536ba065a6efda457161bb",
      "commit_date": "2023-04-29T00:40:15Z",
      "author": {
        "login": "charles-cooper",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-mgv8-gggw-mrg6",
        "length": 886,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 92,
        "additions": 75,
        "deletions": 17
      },
      "files": [
        {
          "filename": "docs/types.rst",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -520,6 +520,9 @@ A two dimensional list can be declared with ``_name: _ValueType[inner_size][oute\n     # Returning the value in row 0 column 4 (in this case 14)\n     return exampleList2D[0][4]\n \n+.. note::\n+    Defining an array in storage whose size is significantly larger than ``2**64`` can result in security vulnerabilities due to risk of overflow.\n+\n .. index:: !dynarrays\n \n Dynamic Arrays\n@@ -561,6 +564,10 @@ Dynamic arrays represent bounded arrays whose length can be modified at runtime,\n \n In the ABI, they are represented as ``_Type[]``. For instance, ``DynArray[int128, 3]`` gets represented as ``int128[]``, and ``DynArray[DynArray[int128, 3], 3]`` gets represented as ``int128[][]``.\n \n+.. note::\n+    Defining a dynamic array in storage whose size is significantly larger than ``2**64`` can result in security vulnerabilities due to risk of overflow.\n+\n+\n .. _types-struct:\n \n Structs"
        },
        {
          "filename": "tests/cli/outputs/test_storage_layout_overrides.py",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -95,6 +95,21 @@ def test_simple_collision():\n         )\n \n \n+def test_overflow():\n+    code = \"\"\"\n+x: uint256[2]\n+    \"\"\"\n+\n+    storage_layout_override = {\"x\": {\"slot\": 2**256 - 1, \"type\": \"uint256[2]\"}}\n+\n+    with pytest.raises(\n+        StorageLayoutException, match=f\"Invalid storage slot for var x, out of bounds: {2**256}\\n\"\n+    ):\n+        compile_code(\n+            code, output_formats=[\"layout\"], storage_layout_override=storage_layout_override\n+        )\n+\n+\n def test_incomplete_overrides():\n     code = \"\"\"\n name: public(String[64])"
        },
        {
          "filename": "tests/functional/test_storage_slots.py",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -1,3 +1,7 @@\n+import pytest\n+\n+from vyper.exceptions import StorageLayoutException\n+\n code = \"\"\"\n \n struct StructOne:\n@@ -97,3 +101,15 @@ def test_reentrancy_lock(get_contract):\n     assert [c.foo(0, i) for i in range(3)] == [987, 654, 321]\n     assert [c.foo(1, i) for i in range(3)] == [123, 456, 789]\n     assert c.h(0) == 123456789\n+\n+\n+def test_allocator_overflow(get_contract):\n+    code = \"\"\"\n+x: uint256\n+y: uint256[max_value(uint256)]\n+    \"\"\"\n+    with pytest.raises(\n+        StorageLayoutException,\n+        match=f\"Invalid storage slot for var y, tried to allocate slots 1 through {2**256}\\n\",\n+    ):\n+        get_contract(code)"
        },
        {
          "filename": "vyper/semantics/analysis/data_positions.py",
          "status": "modified",
          "additions": 34,
          "deletions": 17,
          "patch": "@@ -6,6 +6,7 @@\n from vyper.exceptions import StorageLayoutException\n from vyper.semantics.analysis.base import CodeOffset, StorageSlot\n from vyper.typing import StorageLayout\n+from vyper.utils import ceil32\n \n \n def set_data_positions(\n@@ -121,8 +122,7 @@ def set_storage_slots_with_overrides(\n         # Expect to find this variable within the storage layout overrides\n         if node.target.id in storage_layout_overrides:\n             var_slot = storage_layout_overrides[node.target.id][\"slot\"]\n-            # Calculate how many storage slots are required\n-            storage_length = math.ceil(varinfo.typ.size_in_bytes / 32)\n+            storage_length = varinfo.typ.storage_size_in_words\n             # Ensure that all required storage slots are reserved, and prevents other variables\n             # from using these slots\n             reserved_slots.reserve_slot_range(var_slot, storage_length, node.target.id)\n@@ -139,14 +139,29 @@ def set_storage_slots_with_overrides(\n     return ret\n \n \n+class SimpleStorageAllocator:\n+    def __init__(self, starting_slot: int = 0):\n+        self._slot = starting_slot\n+\n+    def allocate_slot(self, n, var_name):\n+        ret = self._slot\n+        if self._slot + n >= 2**256:\n+            raise StorageLayoutException(\n+                f\"Invalid storage slot for var {var_name}, tried to allocate\"\n+                f\" slots {self._slot} through {self._slot + n}\"\n+            )\n+        self._slot += n\n+        return ret\n+\n+\n def set_storage_slots(vyper_module: vy_ast.Module) -> StorageLayout:\n     \"\"\"\n     Parse module-level Vyper AST to calculate the layout of storage variables.\n     Returns the layout as a dict of variable name -> variable info\n     \"\"\"\n     # Allocate storage slots from 0\n     # note storage is word-addressable, not byte-addressable\n-    storage_slot = 0\n+    allocator = SimpleStorageAllocator()\n \n     ret: Dict[str, Dict] = {}\n \n@@ -165,36 +180,38 @@ def set_storage_slots(vyper_module: vy_ast.Module) -> StorageLayout:\n             type_.set_reentrancy_key_position(StorageSlot(_slot))\n             continue\n \n-        type_.set_reentrancy_key_position(StorageSlot(storage_slot))\n+        # TODO use one byte - or bit - per reentrancy key\n+        # requires either an extra SLOAD or caching the value of the\n+        # location in memory at entrance\n+        slot = allocator.allocate_slot(1, variable_name)\n+\n+        type_.set_reentrancy_key_position(StorageSlot(slot))\n \n         # TODO this could have better typing but leave it untyped until\n         # we nail down the format better\n-        ret[variable_name] = {\"type\": \"nonreentrant lock\", \"slot\": storage_slot}\n+        ret[variable_name] = {\"type\": \"nonreentrant lock\", \"slot\": slot}\n \n-        # TODO use one byte - or bit - per reentrancy key\n-        # requires either an extra SLOAD or caching the value of the\n-        # location in memory at entrance\n-        storage_slot += 1\n \n     for node in vyper_module.get_children(vy_ast.VariableDecl):\n         # skip non-storage variables\n         if node.is_constant or node.is_immutable:\n             continue\n \n         varinfo = node.target._metadata[\"varinfo\"]\n-        varinfo.set_position(StorageSlot(storage_slot))\n-\n         type_ = varinfo.typ\n \n-        # this could have better typing but leave it untyped until\n-        # we understand the use case better\n-        ret[node.target.id] = {\"type\": str(type_), \"slot\": storage_slot}\n-\n         # CMC 2021-07-23 note that HashMaps get assigned a slot here.\n         # I'm not sure if it's safe to avoid allocating that slot\n         # for HashMaps because downstream code might use the slot\n         # ID as a salt.\n-        storage_slot += math.ceil(type_.size_in_bytes / 32)\n+        n_slots = type_.storage_size_in_words\n+        slot = allocator.allocate_slot(n_slots, node.target.id)\n+\n+        varinfo.set_position(StorageSlot(slot))\n+\n+        # this could have better typing but leave it untyped until\n+        # we understand the use case better\n+        ret[node.target.id] = {\"type\": str(type_), \"slot\": slot}\n \n     return ret\n \n@@ -216,7 +233,7 @@ def set_code_offsets(vyper_module: vy_ast.Module) -> Dict:\n         type_ = varinfo.typ\n         varinfo.set_position(CodeOffset(offset))\n \n-        len_ = math.ceil(type_.size_in_bytes / 32) * 32\n+        len_ = ceil32(type_.size_in_bytes)\n \n         # this could have better typing but leave it untyped until\n         # we understand the use case better"
        },
        {
          "filename": "vyper/semantics/types/subscriptable.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -103,6 +103,9 @@ def __init__(self, value_type: VyperType, length: int):\n         if not 0 < length < 2**256:\n             raise InvalidType(\"Array length is invalid\")\n \n+        if length >= 2**64:\n+            warnings.warn(\"Use of large arrays can be unsafe!\")\n+\n         super().__init__(UINT256_T, value_type)\n         self.length = length\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "db8dcc713168b16977b5b07267653c9024f6acea",
            "date": "2025-01-12T17:01:49Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "10e91d5a2ba6eaab2f7194fd86cefb7a0ff19964",
            "date": "2025-01-12T16:34:14Z",
            "author_login": "tserg"
          },
          {
            "sha": "43259f8953672ef7a19167c6c048d020d82e05da",
            "date": "2025-01-12T16:32:46Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "9b5523e6131335c81714e7e8af63cc49404f5ce7",
            "date": "2025-01-12T16:19:30Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "f444c8fa3b02f34181cfa8768bcf572aedc29659",
            "date": "2025-01-11T20:14:12Z",
            "author_login": "charles-cooper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-193",
    "description": "Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine (EVM). Contracts containing large arrays might underallocate the number of slots they need by 1. Prior to v0.3.8, the calculation to determine how many slots a storage variable needed used `math.ceil(type_.size_in_bytes / 32)`. The intermediate floating point step can produce a rounding error if there are enough bits set in the IEEE-754 mantissa. Roughly speaking, if `type_.size_in_bytes` is large (> 2**46), and slightly less than a power of 2, the calculation can overestimate how many slots are needed by 1. If `type_.size_in_bytes` is slightly more than a power of 2, the calculation can underestimate how many slots are needed by 1. This issue is patched in version 0.3.8.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-13T20:15:49.360",
    "last_modified": "2024-11-21T08:28:09.720",
    "fix_date": "2023-04-29T00:40:15Z"
  },
  "references": [
    {
      "url": "https://github.com/vyperlang/vyper/blob/6020b8bbf66b062d299d87bc7e4eddc4c9d1c157/vyper/semantics/validation/data_positions.py#L197",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/0bb7203b584e771b23536ba065a6efda457161bb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-6m97-7527-mh74",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/blob/6020b8bbf66b062d299d87bc7e4eddc4c9d1c157/vyper/semantics/validation/data_positions.py#L197",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/0bb7203b584e771b23536ba065a6efda457161bb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-6m97-7527-mh74",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.566417",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vyper",
    "owner": "vyperlang",
    "created_at": "2016-11-11T08:56:41Z",
    "updated_at": "2025-01-13T17:32:27Z",
    "pushed_at": "2025-01-12T17:01:50Z",
    "size": 11939,
    "stars": 4948,
    "forks": 817,
    "open_issues": 489,
    "watchers": 4948,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 2662211,
      "Makefile": 2222,
      "Batchfile": 1614,
      "Dockerfile": 1145,
      "Shell": 472
    },
    "commit_activity": {
      "total_commits_last_year": 317,
      "avg_commits_per_week": 6.096153846153846,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:48:09.728520"
  }
}