{
  "cve_id": "CVE-2023-46250",
  "github_data": {
    "repository": "py-pdf/pypdf",
    "fix_commit": "9b23ac3c9619492570011d551d521690de9a3e2d",
    "related_commits": [
      "9b23ac3c9619492570011d551d521690de9a3e2d",
      "9b23ac3c9619492570011d551d521690de9a3e2d"
    ],
    "patch_url": "https://github.com/py-pdf/pypdf/commit/9b23ac3c9619492570011d551d521690de9a3e2d.patch",
    "fix_commit_details": {
      "sha": "9b23ac3c9619492570011d551d521690de9a3e2d",
      "commit_date": "2023-10-29T04:14:40Z",
      "author": {
        "login": "Alexhuszagh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SEC: Infinite recursion when using PdfWriter(clone_from=reader) (#2264)",
        "length": 311,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 19,
        "deletions": 5
      },
      "files": [
        {
          "filename": "pypdf/generic/_data_structures.py",
          "status": "modified",
          "additions": 19,
          "deletions": 5,
          "patch": "@@ -40,6 +40,7 @@\n     List,\n     Optional,\n     Sequence,\n+    Set,\n     Tuple,\n     Union,\n     cast,\n@@ -187,14 +188,15 @@ def clone(\n         except Exception:\n             pass\n \n+        visited: Set[Tuple[int, int]] = set()\n         d__ = cast(\n             \"DictionaryObject\",\n             self._reference_clone(self.__class__(), pdf_dest, force_duplicate),\n         )\n         if ignore_fields is None:\n             ignore_fields = []\n         if len(d__.keys()) == 0:\n-            d__._clone(self, pdf_dest, force_duplicate, ignore_fields)\n+            d__._clone(self, pdf_dest, force_duplicate, ignore_fields, visited)\n         return d__\n \n     def _clone(\n@@ -203,6 +205,7 @@ def _clone(\n         pdf_dest: PdfWriterProtocol,\n         force_duplicate: bool,\n         ignore_fields: Optional[Sequence[Union[str, int]]],\n+        visited: Set[Tuple[int, int]],\n     ) -> None:\n         \"\"\"\n         Update the object from src.\n@@ -270,6 +273,14 @@ def _clone(\n                                     cur_obj.__class__(), pdf_dest, force_duplicate\n                                 ),\n                             )\n+                            # check to see if we've previously processed our item\n+                            if clon.indirect_reference is not None:\n+                                idnum = clon.indirect_reference.idnum\n+                                generation = clon.indirect_reference.generation\n+                                if (idnum, generation) in visited:\n+                                    cur_obj = None\n+                                    break\n+                                visited.add((idnum, generation))\n                             objs.append((cur_obj, clon))\n                             assert prev_obj is not None\n                             prev_obj[NameObject(k)] = clon.indirect_reference\n@@ -282,7 +293,7 @@ def _clone(\n                             except Exception:\n                                 cur_obj = None\n                         for s, c in objs:\n-                            c._clone(s, pdf_dest, force_duplicate, ignore_fields)\n+                            c._clone(s, pdf_dest, force_duplicate, ignore_fields, visited)\n \n         for k, v in src.items():\n             if k not in ignore_fields:\n@@ -798,6 +809,7 @@ def _clone(\n         pdf_dest: PdfWriterProtocol,\n         force_duplicate: bool,\n         ignore_fields: Optional[Sequence[Union[str, int]]],\n+        visited: Set[Tuple[int, int]],\n     ) -> None:\n         \"\"\"\n         Update the object from src.\n@@ -820,7 +832,7 @@ def _clone(\n                 )\n         except Exception:\n             pass\n-        super()._clone(src, pdf_dest, force_duplicate, ignore_fields)\n+        super()._clone(src, pdf_dest, force_duplicate, ignore_fields, visited)\n \n     def get_data(self) -> Union[bytes, str]:\n         return self._data\n@@ -1048,6 +1060,7 @@ def clone(\n         except Exception:\n             pass\n \n+        visited: Set[Tuple[int, int]] = set()\n         d__ = cast(\n             \"ContentStream\",\n             self._reference_clone(\n@@ -1056,7 +1069,7 @@ def clone(\n         )\n         if ignore_fields is None:\n             ignore_fields = []\n-        d__._clone(self, pdf_dest, force_duplicate, ignore_fields)\n+        d__._clone(self, pdf_dest, force_duplicate, ignore_fields, visited)\n         return d__\n \n     def _clone(\n@@ -1065,6 +1078,7 @@ def _clone(\n         pdf_dest: PdfWriterProtocol,\n         force_duplicate: bool,\n         ignore_fields: Optional[Sequence[Union[str, int]]],\n+        visited: Set[Tuple[int, int]],\n     ) -> None:\n         \"\"\"\n         Update the object from src.\n@@ -1081,7 +1095,7 @@ def _clone(\n         self._operations = list(src_cs._operations)\n         self.forced_encoding = src_cs.forced_encoding\n         # no need to call DictionaryObjection or anything\n-        # like super(DictionaryObject,self)._clone(src, pdf_dest, force_duplicate, ignore_fields)\n+        # like super(DictionaryObject,self)._clone(src, pdf_dest, force_duplicate, ignore_fields, visited)\n \n     def _parse_content_stream(self, stream: StreamType) -> None:\n         # 7.8.2 Content Streams"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c87f75f860cffd8bf4a8b930e9ea1a548b2e4d20",
            "date": "2025-01-13T18:36:36Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "82499816c51855ffba8ea262f736ac94dc0fb3ff",
            "date": "2025-01-13T08:50:09Z",
            "author_login": "j-t-1"
          },
          {
            "sha": "9cee6b1d529b0c265cea46764b47fa4b61e824e9",
            "date": "2025-01-13T08:49:30Z",
            "author_login": "j-t-1"
          },
          {
            "sha": "e48103358676c65d2f5ee53c1e582341881e5870",
            "date": "2025-01-13T08:32:45Z",
            "author_login": "j-t-1"
          },
          {
            "sha": "58816226b80a73974fa34cb9f436d50d5a4d62d1",
            "date": "2025-01-12T12:47:30Z",
            "author_login": "j-t-1"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "pypdf is a free and open-source pure-python PDF library. An attacker who uses a vulnerability present in versions 3.7.0 through 3.16.4 can craft a PDF which leads to an infinite loop. This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case when the pypdf-user manipulates an incoming malicious PDF e.g. by merging it with another PDF or by adding annotations. The issue was fixed in version 3.17.0. As a workaround, apply the patch manually by modifying `pypdf/generic/_data_structures.py`.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-10-31T16:15:09.930",
    "last_modified": "2024-11-21T08:28:10.137",
    "fix_date": "2023-10-29T04:14:40Z"
  },
  "references": [
    {
      "url": "https://github.com/py-pdf/pypdf/commit/9b23ac3c9619492570011d551d521690de9a3e2d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/py-pdf/pypdf/pull/2264",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/py-pdf/pypdf/security/advisories/GHSA-wjcc-cq79-p63f",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/py-pdf/pypdf/commit/9b23ac3c9619492570011d551d521690de9a3e2d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/py-pdf/pypdf/pull/2264",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/py-pdf/pypdf/security/advisories/GHSA-wjcc-cq79-p63f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.972767",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pypdf",
    "owner": "py-pdf",
    "created_at": "2012-01-06T17:13:38Z",
    "updated_at": "2025-01-14T14:38:29Z",
    "pushed_at": "2025-01-13T18:39:10Z",
    "size": 19370,
    "stars": 8625,
    "forks": 1435,
    "open_issues": 97,
    "watchers": 8625,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.x",
      "2.x",
      "3.x",
      "main"
    ],
    "languages": {
      "Python": 1656826,
      "Makefile": 1041,
      "Shell": 131
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T21:50:26.606579"
  }
}