{
  "cve_id": "CVE-2023-46575",
  "github_data": {
    "repository": "meshery/meshery",
    "fix_commit": "ffe00967acfe4444a5db08ff3a4cafb9adf6013f",
    "related_commits": [
      "ffe00967acfe4444a5db08ff3a4cafb9adf6013f",
      "ffe00967acfe4444a5db08ff3a4cafb9adf6013f"
    ],
    "patch_url": "https://github.com/meshery/meshery/commit/ffe00967acfe4444a5db08ff3a4cafb9adf6013f.patch",
    "fix_commit_details": {
      "sha": "ffe00967acfe4444a5db08ff3a4cafb9adf6013f",
      "commit_date": "2023-11-16T03:39:54Z",
      "author": {
        "login": "phant0ms",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "## Add \"order by\" parameter filter",
        "length": 123,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 25,
        "additions": 13,
        "deletions": 12
      },
      "files": [
        {
          "filename": "server/handlers/database_handlers.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -73,6 +73,7 @@ func (h *Handler) GetSystemDatabase(w http.ResponseWriter, r *http.Request, _ *m\n \tif offset != 0 {\n \t\ttableFinder = tableFinder.Offset(offset)\n \t}\n+\torder = models.SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \tif order != \"\" {\n \t\tif sort == \"desc\" {\n \t\t\ttableFinder = tableFinder.Order(clause.OrderByColumn{Column: clause.Column{Name: order}, Desc: true})"
        },
        {
          "filename": "server/models/meshery_application_persister.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -24,7 +24,7 @@ type MesheryApplicationPage struct {\n \n // GetMesheryApplications returns all of the applications\n func (maap *MesheryApplicationPersister) GetMesheryApplications(search, order string, page, pageSize uint64, updatedAfter string) ([]byte, error) {\n-\torder = sanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n+\torder = SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \n \tif order == \"\" {\n \t\torder = \"updated_at desc\""
        },
        {
          "filename": "server/models/meshery_filter_persister.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -28,7 +28,7 @@ type MesheryFilterPage struct {\n // GetMesheryFilters returns all of the 'private' filters. Though private has no meaning here since there is only\n // one local user. We make this distinction to be consistent with the remote provider\n func (mfp *MesheryFilterPersister) GetMesheryFilters(search, order string, page, pageSize uint64, visibility []string) ([]byte, error) {\n-\torder = sanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n+\torder = SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \n \tif order == \"\" {\n \t\torder = \"updated_at desc\"\n@@ -65,7 +65,7 @@ func (mfp *MesheryFilterPersister) GetMesheryFilters(search, order string, page,\n // GetMesheryCatalogFilters returns all of the published filters\n func (mfp *MesheryFilterPersister) GetMesheryCatalogFilters(page, pageSize, search, order string) ([]byte, error) {\n \tvar err error\n-\torder = sanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n+\torder = SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \n \tif order == \"\" {\n \t\torder = \"updated_at desc\""
        },
        {
          "filename": "server/models/meshery_k8scontext_persister.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -25,7 +25,7 @@ type MesheryK8sContextPage struct {\n \n // GetMesheryK8sContexts returns all of the contexts\n func (mkcp *MesheryK8sContextPersister) GetMesheryK8sContexts(search, order string, page, pageSize uint64) ([]byte, error) {\n-\torder = sanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n+\torder = SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \n \tif order == \"\" {\n \t\torder = \"updated_at desc\""
        },
        {
          "filename": "server/models/meshery_pattern_persister.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -29,7 +29,7 @@ type MesheryPatternPage struct {\n // GetMesheryPatterns returns all of the 'private' patterns. Though private has no meaning here since there is only\n // one local user. We make this distinction to be consistent with the remote provider\n func (mpp *MesheryPatternPersister) GetMesheryPatterns(search, order string, page, pageSize uint64, updatedAfter string, visibility []string) ([]byte, error) {\n-\torder = sanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n+\torder = SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \n \tif order == \"\" {\n \t\torder = \"updated_at desc\"\n@@ -65,7 +65,7 @@ func (mpp *MesheryPatternPersister) GetMesheryPatterns(search, order string, pag\n // GetMesheryCatalogPatterns returns all of the published patterns\n func (mpp *MesheryPatternPersister) GetMesheryCatalogPatterns(page, pageSize, search, order string) ([]byte, error) {\n \tvar err error\n-\torder = sanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n+\torder = SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \n \tif order == \"\" {\n \t\torder = \"updated_at desc\""
        },
        {
          "filename": "server/models/pattern_resource_persister.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -57,7 +57,7 @@ func (prp *PatternResourcePersister) GetPatternResourceByAttributes(name, namesp\n }\n \n func (prp *PatternResourcePersister) GetPatternResources(search, order, name, namespace, typ, oamType string, page, pageSize uint64) (*PatternResourcePage, error) {\n-\torder = sanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n+\torder = SanitizeOrderInput(order, []string{\"created_at\", \"updated_at\", \"name\"})\n \n \tif order == \"\" {\n \t\torder = \"updated_at desc\"\n@@ -106,7 +106,7 @@ func (prp *PatternResourcePersister) Exists(name, namespace, typ, oamType string\n \n \tprp.DB.\n \t\tRaw(`\n-\tSELECT \n+\tSELECT\n \t\tEXISTS(SELECT 1 FROM pattern_resources WHERE name = ? AND namespace = ? AND type = ? AND oam_type = ? AND deleted = false) AS \"found\"`,\n \t\t\tname,\n \t\t\tnamespace,"
        },
        {
          "filename": "server/models/performance_profile_persister.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -24,7 +24,7 @@ type PerformanceProfilePage struct {\n \n // GetPerformanceProfiles returns all of the performance profiles\n func (ppp *PerformanceProfilePersister) GetPerformanceProfiles(_, search, order string, page, pageSize uint64) ([]byte, error) {\n-\torder = sanitizeOrderInput(order, []string{\"updated_at\", \"created_at\", \"name\", \"last_run\"})\n+\torder = SanitizeOrderInput(order, []string{\"updated_at\", \"created_at\", \"name\", \"last_run\"})\n \tif order == \"\" {\n \t\torder = \"updated_at desc\"\n \t}"
        },
        {
          "filename": "server/models/sql-utils.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -12,16 +12,16 @@ import (\n \t\"github.com/spf13/viper\"\n )\n \n-// sanitizeOrderInput takes in the \"order by\" query, a validColums\n+// SanitizeOrderInput takes in the \"order by\" query, a validColums\n // string slice and returns a sanitized query\n //\n // it will allow to run order by query only on the columns that are present\n // in the validColumns string slice, if any other column is requested in the\n // query then it will be IGNORED and an empty query would be returned instead\n //\n-// sanitizeOrderInput also expects the query to be no longer than two words, that is\n+// SanitizeOrderInput also expects the query to be no longer than two words, that is\n // the query may look like \"updated_at DESC\" or \"name ASC\"\n-func sanitizeOrderInput(order string, validColumns []string) string {\n+func SanitizeOrderInput(order string, validColumns []string) string {\n \tparsedOrderStr := strings.Split(order, \" \")\n \tif len(parsedOrderStr) != 2 {\n \t\treturn \"\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9dc1f0c37f8bfed93f9095bf7f08fc851cb4a993",
            "date": "2025-01-14T12:45:56Z",
            "author_login": "sudhanshutech"
          },
          {
            "sha": "245ee3f0884af49cc17e6fbbd9dd9c97ffe65b15",
            "date": "2025-01-14T12:43:47Z",
            "author_login": "sudhanshutech"
          },
          {
            "sha": "708cff620f1ad279819c9909dcfc99f126843efb",
            "date": "2025-01-14T09:19:35Z",
            "author_login": "aabidsofi19"
          },
          {
            "sha": "935e5ca5529a2d167acea9b15f9b9aca2af9a9c2",
            "date": "2025-01-14T09:19:19Z",
            "author_login": "aabidsofi19"
          },
          {
            "sha": "021fa4fdc3425424fd9a35eb878f93ceb68a28c2",
            "date": "2025-01-14T08:16:09Z",
            "author_login": "aabidsofi19"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "A SQL injection vulnerability exists in Meshery prior to version v0.6.179, enabling a remote attacker to retrieve sensitive information and execute arbitrary code through the \u201corder\u201d parameter",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-24T14:15:08.337",
    "last_modified": "2024-11-21T08:28:47.443",
    "fix_date": "2023-11-16T03:39:54Z"
  },
  "references": [
    {
      "url": "https://github.com/meshery/meshery/commit/ffe00967acfe4444a5db08ff3a4cafb9adf6013f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/meshery/meshery/compare/v0.6.178...v0.6.179",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/meshery/meshery/pull/9372",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://meshery.io",
      "source": "cve@mitre.org",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/meshery/meshery/commit/ffe00967acfe4444a5db08ff3a4cafb9adf6013f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/meshery/meshery/compare/v0.6.178...v0.6.179",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/meshery/meshery/pull/9372",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://meshery.io",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.283301",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "meshery",
    "owner": "meshery",
    "created_at": "2018-11-14T13:41:00Z",
    "updated_at": "2025-01-14T20:48:45Z",
    "pushed_at": "2025-01-14T12:45:56Z",
    "size": 892112,
    "stars": 6558,
    "forks": 1980,
    "open_issues": 595,
    "watchers": 6558,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 2634891,
      "Go": 2568491,
      "Open Policy Agent": 57557,
      "CSS": 28326,
      "Makefile": 26279,
      "Mustache": 24214,
      "Dockerfile": 16608,
      "Shell": 2874,
      "HTML": 2164,
      "Smarty": 513
    },
    "commit_activity": {
      "total_commits_last_year": 8863,
      "avg_commits_per_week": 170.44230769230768,
      "days_active_last_year": 360
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": true,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T22:57:09.083878"
  }
}