{
  "cve_id": "CVE-2023-46734",
  "github_data": {
    "repository": "symfony/symfony",
    "fix_commit": "5d095d5feb1322b16450284a04d6bb48d1198f54",
    "related_commits": [
      "5d095d5feb1322b16450284a04d6bb48d1198f54",
      "9da9a145ce57e4585031ad4bee37c497353eec7c",
      "5d095d5feb1322b16450284a04d6bb48d1198f54",
      "9da9a145ce57e4585031ad4bee37c497353eec7c"
    ],
    "patch_url": "https://github.com/symfony/symfony/commit/5d095d5feb1322b16450284a04d6bb48d1198f54.patch",
    "fix_commit_details": {
      "sha": "5d095d5feb1322b16450284a04d6bb48d1198f54",
      "commit_date": "2023-11-09T15:41:15Z",
      "author": {
        "login": "nicolas-grekas",
        "type": "User",
        "stats": {
          "total_commits": 16251,
          "average_weekly_commits": 20.70191082802548,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 533
        }
      },
      "commit_message": {
        "title": "security #cve-2023-46734 [TwigBridge] Ensure CodeExtension's filters properly escape their input (nicolas-grekas, GromNaN)",
        "length": 163,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 163,
        "additions": 133,
        "deletions": 30
      },
      "files": [
        {
          "filename": "src/Symfony/Bridge/Twig/Extension/CodeExtension.php",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "patch": "@@ -48,8 +48,8 @@ public function __construct($fileLinkFormat, string $projectDir, string $charset\n     public function getFilters()\n     {\n         return [\n-            new TwigFilter('abbr_class', [$this, 'abbrClass'], ['is_safe' => ['html']]),\n-            new TwigFilter('abbr_method', [$this, 'abbrMethod'], ['is_safe' => ['html']]),\n+            new TwigFilter('abbr_class', [$this, 'abbrClass'], ['is_safe' => ['html'], 'pre_escape' => 'html']),\n+            new TwigFilter('abbr_method', [$this, 'abbrMethod'], ['is_safe' => ['html'], 'pre_escape' => 'html']),\n             new TwigFilter('format_args', [$this, 'formatArgs'], ['is_safe' => ['html']]),\n             new TwigFilter('format_args_as_text', [$this, 'formatArgsAsText']),\n             new TwigFilter('file_excerpt', [$this, 'fileExcerpt'], ['is_safe' => ['html']]),\n@@ -95,22 +95,23 @@ public function formatArgs($args)\n         $result = [];\n         foreach ($args as $key => $item) {\n             if ('object' === $item[0]) {\n+                $item[1] = htmlspecialchars($item[1], \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n                 $parts = explode('\\\\', $item[1]);\n                 $short = array_pop($parts);\n                 $formattedValue = sprintf('<em>object</em>(<abbr title=\"%s\">%s</abbr>)', $item[1], $short);\n             } elseif ('array' === $item[0]) {\n-                $formattedValue = sprintf('<em>array</em>(%s)', \\is_array($item[1]) ? $this->formatArgs($item[1]) : $item[1]);\n+                $formattedValue = sprintf('<em>array</em>(%s)', \\is_array($item[1]) ? $this->formatArgs($item[1]) : htmlspecialchars(var_export($item[1], true), \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset));\n             } elseif ('null' === $item[0]) {\n                 $formattedValue = '<em>null</em>';\n             } elseif ('boolean' === $item[0]) {\n-                $formattedValue = '<em>'.strtolower(var_export($item[1], true)).'</em>';\n+                $formattedValue = '<em>'.strtolower(htmlspecialchars(var_export($item[1], true), \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset)).'</em>';\n             } elseif ('resource' === $item[0]) {\n                 $formattedValue = '<em>resource</em>';\n             } else {\n                 $formattedValue = str_replace(\"\\n\", '', htmlspecialchars(var_export($item[1], true), \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset));\n             }\n \n-            $result[] = \\is_int($key) ? $formattedValue : sprintf(\"'%s' => %s\", $key, $formattedValue);\n+            $result[] = \\is_int($key) ? $formattedValue : sprintf(\"'%s' => %s\", htmlspecialchars($key, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), $formattedValue);\n         }\n \n         return implode(', ', $result);\n@@ -178,13 +179,17 @@ public function fileExcerpt($file, $line, $srcContext = 3)\n     public function formatFile($file, $line, $text = null)\n     {\n         $file = trim($file);\n+        $line = (int) $line;\n \n         if (null === $text) {\n-            $text = $file;\n-            if (null !== $rel = $this->getFileRelative($text)) {\n-                $rel = explode('/', $rel, 2);\n-                $text = sprintf('<abbr title=\"%s%2$s\">%s</abbr>%s', $this->projectDir, $rel[0], '/'.($rel[1] ?? ''));\n+            if (null !== $rel = $this->getFileRelative($file)) {\n+                $rel = explode('/', htmlspecialchars($rel, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), 2);\n+                $text = sprintf('<abbr title=\"%s%2$s\">%s</abbr>%s', htmlspecialchars($this->projectDir, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset), $rel[0], '/'.($rel[1] ?? ''));\n+            } else {\n+                $text = htmlspecialchars($file, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n             }\n+        } else {\n+            $text = htmlspecialchars($text, \\ENT_COMPAT | \\ENT_SUBSTITUTE, $this->charset);\n         }\n \n         if (0 < $line) {"
        },
        {
          "filename": "src/Symfony/Bridge/Twig/Tests/Extension/CodeExtensionTest.php",
          "status": "modified",
          "additions": 119,
          "deletions": 21,
          "patch": "@@ -14,6 +14,8 @@\n use PHPUnit\\Framework\\TestCase;\n use Symfony\\Bridge\\Twig\\Extension\\CodeExtension;\n use Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter;\n+use Twig\\Environment;\n+use Twig\\Loader\\ArrayLoader;\n \n class CodeExtensionTest extends TestCase\n {\n@@ -28,38 +30,123 @@ public function testFileRelative()\n         $this->assertEquals('file.txt', $this->getExtension()->getFileRelative(\\DIRECTORY_SEPARATOR.'project'.\\DIRECTORY_SEPARATOR.'file.txt'));\n     }\n \n-    /**\n-     * @dataProvider getClassNameProvider\n-     */\n-    public function testGettingClassAbbreviation($class, $abbr)\n+    public function testClassAbbreviationIntegration()\n     {\n-        $this->assertEquals($this->getExtension()->abbrClass($class), $abbr);\n+        $data = [\n+            'fqcn' => 'F\\Q\\N\\Foo',\n+            'xss' => '<script>',\n+        ];\n+\n+        $template = <<<'TWIG'\n+{{ 'Bare'|abbr_class }}\n+{{ fqcn|abbr_class }}\n+{{ xss|abbr_class }}\n+TWIG;\n+\n+        $expected = <<<'HTML'\n+<abbr title=\"Bare\">Bare</abbr>\n+<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>\n+<abbr title=\"&lt;script&gt;\">&lt;script&gt;</abbr>\n+HTML;\n+\n+        $this->assertEquals($expected, $this->render($template, $data));\n     }\n \n-    /**\n-     * @dataProvider getMethodNameProvider\n-     */\n-    public function testGettingMethodAbbreviation($method, $abbr)\n+    public function testMethodAbbreviationIntegration()\n     {\n-        $this->assertEquals($this->getExtension()->abbrMethod($method), $abbr);\n+        $data = [\n+            'fqcn' => 'F\\Q\\N\\Foo::Method',\n+            'xss' => '<script>',\n+        ];\n+\n+        $template = <<<'TWIG'\n+{{ 'Bare::Method'|abbr_method }}\n+{{ fqcn|abbr_method }}\n+{{ 'Closure'|abbr_method }}\n+{{ 'Method'|abbr_method }}\n+{{ xss|abbr_method }}\n+TWIG;\n+\n+        $expected = <<<'HTML'\n+<abbr title=\"Bare\">Bare</abbr>::Method()\n+<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>::Method()\n+<abbr title=\"Closure\">Closure</abbr>\n+<abbr title=\"Method\">Method</abbr>()\n+<abbr title=\"&lt;script&gt;\">&lt;script&gt;</abbr>()\n+HTML;\n+\n+        $this->assertEquals($expected, $this->render($template, $data));\n     }\n \n-    public function getClassNameProvider()\n+    public function testFormatArgsIntegration()\n     {\n-        return [\n-            ['F\\Q\\N\\Foo', '<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>'],\n-            ['Bare', '<abbr title=\"Bare\">Bare</abbr>'],\n+        $data = [\n+            'args' => [\n+                ['object', 'Foo'],\n+                ['array', [['string', 'foo'], ['null']]],\n+                ['resource'],\n+                ['string', 'bar'],\n+                ['int', 123],\n+                ['bool', true],\n+            ],\n+            'xss' => [\n+                ['object', '<Foo>'],\n+                ['array', [['string', '<foo>']]],\n+                ['string', '<bar>'],\n+                ['int', 123],\n+                ['bool', true],\n+                ['<xss>', '<script>'],\n+            ],\n         ];\n+\n+        $template = <<<'TWIG'\n+{{ args|format_args }}\n+{{ xss|format_args }}\n+{{ args|format_args_as_text }}\n+{{ xss|format_args_as_text }}\n+TWIG;\n+\n+        $expected = <<<'HTML'\n+<em>object</em>(<abbr title=\"Foo\">Foo</abbr>), <em>array</em>('foo', <em>null</em>), <em>resource</em>, 'bar', 123, true\n+<em>object</em>(<abbr title=\"&lt;Foo&gt;\">&lt;Foo&gt;</abbr>), <em>array</em>('&lt;foo&gt;'), '&lt;bar&gt;', 123, true, '&lt;script&gt;'\n+object(Foo), array(&#039;foo&#039;, null), resource, &#039;bar&#039;, 123, true\n+object(&amp;lt;Foo&amp;gt;), array(&#039;&amp;lt;foo&amp;gt;&#039;), &#039;&amp;lt;bar&amp;gt;&#039;, 123, true, &#039;&amp;lt;script&amp;gt;&#039;\n+HTML;\n+\n+        $this->assertEquals($expected, $this->render($template, $data));\n+    }\n+\n+\n+    public function testFormatFileIntegration()\n+    {\n+        $template = <<<'TWIG'\n+{{ 'foo/bar/baz.php'|format_file(21) }}\n+{{ '<script>'|format_file('<script21>') }}\n+TWIG;\n+\n+        $expected = <<<'HTML'\n+<a href=\"proto://foo/bar/baz.php#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">foo/bar/baz.php at line 21</a>\n+<a href=\"proto://&lt;script&gt;#&amp;line=0\" title=\"Click to open this file\" class=\"file_link\">&lt;script&gt;</a>\n+HTML;\n+\n+        $this->assertEquals($expected, $this->render($template));\n     }\n \n-    public function getMethodNameProvider()\n+    public function testFormatFileFromTextIntegration()\n     {\n-        return [\n-            ['F\\Q\\N\\Foo::Method', '<abbr title=\"F\\Q\\N\\Foo\">Foo</abbr>::Method()'],\n-            ['Bare::Method', '<abbr title=\"Bare\">Bare</abbr>::Method()'],\n-            ['Closure', '<abbr title=\"Closure\">Closure</abbr>'],\n-            ['Method', '<abbr title=\"Method\">Method</abbr>()'],\n-        ];\n+        $template = <<<'TWIG'\n+{{ 'in \"foo/bar/baz.php\" at line 21'|format_file_from_text }}\n+{{ 'in &quot;foo/bar/baz.php&quot; on line 21'|format_file_from_text }}\n+{{ 'in \"<script>\" on line 21'|format_file_from_text }}\n+TWIG;\n+\n+        $expected = <<<'HTML'\n+in <a href=\"proto://foo/bar/baz.php#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">foo/bar/baz.php at line 21</a>\n+in <a href=\"proto://foo/bar/baz.php#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">foo/bar/baz.php at line 21</a>\n+in <a href=\"proto://&lt;script&gt;#&amp;line=21\" title=\"Click to open this file\" class=\"file_link\">&lt;script&gt; at line 21</a>\n+HTML;\n+\n+        $this->assertEquals($expected, $this->render($template));\n     }\n \n     public function testGetName()\n@@ -71,4 +158,15 @@ protected function getExtension()\n     {\n         return new CodeExtension(new FileLinkFormatter('proto://%f#&line=%l&'.substr(__FILE__, 0, 5).'>foobar'), \\DIRECTORY_SEPARATOR.'project', 'UTF-8');\n     }\n+\n+    private function render(string $template, array $context = [])\n+    {\n+        $twig = new Environment(\n+            new ArrayLoader(['index' => $template]),\n+            ['debug' => true]\n+        );\n+        $twig->addExtension($this->getExtension());\n+\n+        return $twig->render('index', $context);\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f6312d3f3313afc62c5b1e920b2cbfe62fcf3f8e",
            "date": "2025-01-13T09:20:08Z",
            "author_login": "nicolas-grekas"
          },
          {
            "sha": "7b338721ca42ba1d5544658b39359916715170f4",
            "date": "2025-01-12T22:16:37Z",
            "author_login": "derrabus"
          },
          {
            "sha": "1a76f128845de80fe6644c7de12e0dcdad8197f1",
            "date": "2025-01-12T20:19:12Z",
            "author_login": "derrabus"
          },
          {
            "sha": "0d0758e87be2e990d7744e4e66b59e6609a2b3c9",
            "date": "2025-01-12T17:25:07Z",
            "author_login": "fabpot"
          },
          {
            "sha": "946278f9f8cd1bc40c075d37b1d6c2a289c8eb4c",
            "date": "2025-01-12T12:57:08Z",
            "author_login": "alamirault"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. Starting in versions 2.0.0, 5.0.0, and 6.0.0 and prior to versions 4.4.51, 5.4.31, and 6.3.8, some Twig filters in CodeExtension use `is_safe=html` but don't actually ensure their input is safe. As of versions 4.4.51, 5.4.31, and 6.3.8, Symfony now escapes the output of the affected filters.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-10T18:15:09.360",
    "last_modified": "2024-11-21T08:29:11.347",
    "fix_date": "2023-11-09T15:41:15Z"
  },
  "references": [
    {
      "url": "https://github.com/symfony/symfony/commit/5d095d5feb1322b16450284a04d6bb48d1198f54",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/symfony/symfony/commit/9da9a145ce57e4585031ad4bee37c497353eec7c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/symfony/symfony/security/advisories/GHSA-q847-2q57-wmr3",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00019.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/symfony/symfony/commit/5d095d5feb1322b16450284a04d6bb48d1198f54",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/symfony/symfony/commit/9da9a145ce57e4585031ad4bee37c497353eec7c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/symfony/symfony/security/advisories/GHSA-q847-2q57-wmr3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00019.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.248858",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "symfony",
    "owner": "symfony",
    "created_at": "2010-01-04T14:21:21Z",
    "updated_at": "2025-01-14T09:56:31Z",
    "pushed_at": "2025-01-13T13:22:56Z",
    "size": 290479,
    "stars": 29917,
    "forks": 9510,
    "open_issues": 879,
    "watchers": 29917,
    "has_security_policy": false,
    "default_branch": "7.3",
    "protected_branches": [
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "2.5",
      "2.6",
      "2.7",
      "2.8",
      "3.0",
      "3.1",
      "3.2",
      "3.3",
      "3.4",
      "4.0",
      "4.1",
      "4.2",
      "4.3",
      "4.4",
      "5.0",
      "5.1",
      "5.2",
      "5.3",
      "5.4",
      "6.0",
      "6.1",
      "6.2",
      "6.3",
      "6.4",
      "7.0"
    ],
    "languages": {
      "PHP": 30007525,
      "Twig": 527335,
      "CSS": 56186,
      "JavaScript": 28225,
      "HTML": 16804,
      "Shell": 9654,
      "Makefile": 1612,
      "Hack": 26
    },
    "commit_activity": {
      "total_commits_last_year": 4163,
      "avg_commits_per_week": 80.0576923076923,
      "days_active_last_year": 343
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:44:47.171985"
  }
}