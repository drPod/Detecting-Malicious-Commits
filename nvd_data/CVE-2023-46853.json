{
  "cve_id": "CVE-2023-46853",
  "github_data": {
    "repository": "memcached/memcached",
    "fix_commit": "6987918e9a3094ec4fc8976f01f769f624d790fa",
    "related_commits": [
      "6987918e9a3094ec4fc8976f01f769f624d790fa",
      "6987918e9a3094ec4fc8976f01f769f624d790fa"
    ],
    "patch_url": "https://github.com/memcached/memcached/commit/6987918e9a3094ec4fc8976f01f769f624d790fa.patch",
    "fix_commit_details": {
      "sha": "6987918e9a3094ec4fc8976f01f769f624d790fa",
      "commit_date": "2023-08-02T22:45:56Z",
      "author": {
        "login": "dormando",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "proxy: fix off-by-one if \\r is missing",
        "length": 335,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 28,
        "additions": 20,
        "deletions": 8
      },
      "files": [
        {
          "filename": "proxy.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -276,6 +276,7 @@ struct mcp_parser_s {\n     uint8_t keytoken; // because GAT. sigh. also cmds without a key.\n     uint32_t parsed; // how far into the request we parsed already\n     uint32_t reqlen; // full length of request buffer.\n+    uint32_t endlen; // index to the start of \\r\\n or \\n\n     int vlen;\n     uint32_t klen; // length of key.\n     uint16_t tokens[PARSER_MAX_TOKENS]; // offsets for start of each token"
        },
        {
          "filename": "proxy_request.c",
          "status": "modified",
          "additions": 16,
          "deletions": 6,
          "patch": "@@ -9,7 +9,7 @@\n // where we later scan or directly feed data into API's.\n static int _process_tokenize(mcp_parser_t *pr, const size_t max) {\n     const char *s = pr->request;\n-    int len = pr->reqlen - 2;\n+    int len = pr->endlen;\n \n     // since multigets can be huge, we can't purely judge reqlen against this\n     // limit, but we also can't index past it since the tokens are shorts.\n@@ -93,7 +93,7 @@ static int _process_request_key(mcp_parser_t *pr) {\n // Returns the offset for the next key.\n size_t _process_request_next_key(mcp_parser_t *pr) {\n     const char *cur = pr->request + pr->parsed;\n-    int remain = pr->reqlen - pr->parsed - 2;\n+    int remain = pr->endlen - pr->parsed;\n \n     // chew off any leading whitespace.\n     while (remain) {\n@@ -126,7 +126,7 @@ static int _process_request_metaflags(mcp_parser_t *pr, int token) {\n         return 0;\n     }\n     const char *cur = pr->request + pr->tokens[token];\n-    const char *end = pr->request + pr->reqlen - 2;\n+    const char *end = pr->request + pr->endlen;\n \n     // We blindly convert flags into bits, since the range of possible\n     // flags is deliberately < 64.\n@@ -294,15 +294,25 @@ int process_request(mcp_parser_t *pr, const char *command, size_t cmdlen) {\n         return -1;\n     }\n \n-    const char *s = memchr(command, ' ', cmdlen-2);\n+    // Commands can end with bare '\\n's. Depressingly I intended to be strict\n+    // with a \\r\\n requirement but never did this and need backcompat.\n+    // In this case we _know_ \\n is at cmdlen because we can't enter this\n+    // function otherwise.\n+    if (cm[cmdlen-2] == '\\r') {\n+        pr->endlen = cmdlen - 2;\n+    } else {\n+        pr->endlen = cmdlen - 1;\n+    }\n+\n+    const char *s = memchr(command, ' ', pr->endlen);\n     if (s != NULL) {\n         cl = s - command;\n     } else {\n-        cl = cmdlen - 2;\n+        cl = pr->endlen;\n     }\n     pr->keytoken = 0;\n     pr->has_space = false;\n-    pr->parsed = cl + 1;\n+    pr->parsed = cl;\n     pr->request = command;\n     pr->reqlen = cmdlen;\n     int token_max = PARSER_MAX_TOKENS;"
        },
        {
          "filename": "t/proxy.t",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -151,13 +151,14 @@ my $p_sock = $p_srv->sock;\n # NOTE: memcached always allowed [\\r]\\n for single command lines, but payloads\n # (set/etc) require exactly \\r\\n as termination.\n # doc/protocol.txt has always specified \\r\\n for command/response.\n-# Proxy is more strict than normal server in this case.\n+# Note a bug lead me to believe that the proxy was more strict, we accept any\n+# \\n or \\r\\n terminated commands.\n {\n     my $s = $srv[0]->sock;\n     print $s \"version\\n\";\n     like(<$s>, qr/VERSION/, \"direct server version cmd with just newline\");\n     print $p_sock \"version\\n\";\n-    like(<$p_sock>, qr/CLIENT_ERROR/, \"proxy version cmd with just newline\");\n+    like(<$p_sock>, qr/VERSION/, \"proxy version cmd with just newline\");\n     print $p_sock \"version\\r\\n\";\n     like(<$p_sock>, qr/VERSION/, \"proxy version cmd with full CRLF\");\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7d6bc7b09e3c6bb8eaff8b2b3d78d01e0bf17f6f",
            "date": "2024-12-23T00:57:30Z",
            "author_login": "dormando"
          },
          {
            "sha": "dc68c54c84b8302995ef33facd6ffdfe2865ed08",
            "date": "2024-12-22T23:40:51Z",
            "author_login": "dormando"
          },
          {
            "sha": "550b0fa0bdbca40ceca8a40d7c423a207ed7875c",
            "date": "2024-12-22T23:33:32Z",
            "author_login": "dormando"
          },
          {
            "sha": "f392de251b5974fb3e6b80956b289984b99c4c63",
            "date": "2024-12-22T23:24:49Z",
            "author_login": "dormando"
          },
          {
            "sha": "c360ce8693a610f4e37a23fd8091ce0d08ba4119",
            "date": "2024-12-20T19:37:26Z",
            "author_login": "dormando"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-193",
    "description": "In Memcached before 1.6.22, an off-by-one error exists when processing proxy requests in proxy mode, if \\n is used instead of \\r\\n.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-27T20:15:09.177",
    "last_modified": "2024-11-21T08:29:25.860",
    "fix_date": "2023-08-02T22:45:56Z"
  },
  "references": [
    {
      "url": "https://github.com/memcached/memcached/commit/6987918e9a3094ec4fc8976f01f769f624d790fa",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/memcached/memcached/compare/1.6.21...1.6.22",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/memcached/memcached/commit/6987918e9a3094ec4fc8976f01f769f624d790fa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/memcached/memcached/compare/1.6.21...1.6.22",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.959922",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "memcached",
    "owner": "memcached",
    "created_at": "2009-04-24T23:34:25Z",
    "updated_at": "2025-01-14T05:51:40Z",
    "pushed_at": "2025-01-13T22:43:51Z",
    "size": 6228,
    "stars": 13649,
    "forks": 3295,
    "open_issues": 75,
    "watchers": 13649,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1727725,
      "Perl": 476083,
      "Lua": 78034,
      "C++": 34629,
      "M4": 32313,
      "Python": 22347,
      "DTrace": 10604,
      "Makefile": 6758,
      "Shell": 6233,
      "Roff": 1894,
      "Starlark": 726
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:00:59.490793"
  }
}