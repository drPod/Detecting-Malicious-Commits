{
  "cve_id": "CVE-2023-46944",
  "github_data": {
    "repository": "gitkraken/vscode-gitlens",
    "fix_commit": "ee2a0c42a92d33059a39fd15fbbd5dd3d5ab6440",
    "related_commits": [
      "ee2a0c42a92d33059a39fd15fbbd5dd3d5ab6440",
      "ee2a0c42a92d33059a39fd15fbbd5dd3d5ab6440"
    ],
    "patch_url": "https://github.com/gitkraken/vscode-gitlens/commit/ee2a0c42a92d33059a39fd15fbbd5dd3d5ab6440.patch",
    "fix_commit_details": {
      "sha": "ee2a0c42a92d33059a39fd15fbbd5dd3d5ab6440",
      "commit_date": "2023-05-17T19:58:24Z",
      "author": {
        "login": "eamodio",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Disables Git access in Restricted Mode (untrusted)",
        "length": 50,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 140,
        "additions": 105,
        "deletions": 35
      },
      "files": [
        {
          "filename": "src/env/node/git/git.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -9,7 +9,7 @@ import type { CoreConfiguration } from '../../../constants';\n import { GlyphChars } from '../../../constants';\n import type { GitCommandOptions, GitSpawnOptions } from '../../../git/commandOptions';\n import { GitErrorHandling } from '../../../git/commandOptions';\n-import { StashPushError, StashPushErrorReason } from '../../../git/errors';\n+import { StashPushError, StashPushErrorReason, WorkspaceUntrustedError } from '../../../git/errors';\n import type { GitDiffFilter } from '../../../git/models/diff';\n import { isUncommitted, isUncommittedStaged, shortenRevision } from '../../../git/models/reference';\n import type { GitUser } from '../../../git/models/user';\n@@ -123,6 +123,8 @@ export class Git {\n \tasync git(options: ExitCodeOnlyGitCommandOptions, ...args: any[]): Promise<number>;\n \tasync git<T extends string | Buffer>(options: GitCommandOptions, ...args: any[]): Promise<T>;\n \tasync git<T extends string | Buffer>(options: GitCommandOptions, ...args: any[]): Promise<T> {\n+\t\tif (!workspace.isTrusted) throw new WorkspaceUntrustedError();\n+\n \t\tconst start = hrtime();\n \n \t\tconst { configs, correlationKey, errors: errorHandling, encoding, ...opts } = options;\n@@ -224,6 +226,8 @@ export class Git {\n \t}\n \n \tasync gitSpawn(options: GitSpawnOptions, ...args: any[]): Promise<ChildProcess> {\n+\t\tif (!workspace.isTrusted) throw new WorkspaceUntrustedError();\n+\n \t\tconst start = hrtime();\n \n \t\tconst { cancellation, configs, stdin, stdinEncoding, ...opts } = options;\n@@ -1645,6 +1649,8 @@ export class Git {\n \t\t\t\t? (emptyArray as [])\n \t\t\t\t: [true, normalizePath(data.trimStart().replace(/[\\r|\\n]+$/, ''))];\n \t\t} catch (ex) {\n+\t\t\tif (ex instanceof WorkspaceUntrustedError) return emptyArray as [];\n+\n \t\t\tconst unsafeMatch =\n \t\t\t\t/^fatal: detected dubious ownership in repository at '([^']+)'[\\s\\S]*git config --global --add safe\\.directory '?([^'\\n]+)'?$/m.exec(\n \t\t\t\t\tex.stderr,"
        },
        {
          "filename": "src/env/node/git/localGitProvider.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1088,7 +1088,7 @@ export class LocalGitProvider implements GitProvider, Disposable {\n \t\t\t[safe, repoPath] = await this.git.rev_parse__show_toplevel(uri.fsPath);\n \t\t\tif (safe) {\n \t\t\t\tthis.unsafePaths.delete(uri.fsPath);\n-\t\t\t} else {\n+\t\t\t} else if (safe === false) {\n \t\t\t\tthis.unsafePaths.add(uri.fsPath);\n \t\t\t}\n \t\t\tif (!repoPath) return undefined;"
        },
        {
          "filename": "src/git/errors.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -81,6 +81,15 @@ export class StashPushError extends Error {\n \t\tError.captureStackTrace?.(this, StashApplyError);\n \t}\n }\n+\n+export class WorkspaceUntrustedError extends Error {\n+\tconstructor() {\n+\t\tsuper('Unable to perform Git operations because the current workspace is untrusted');\n+\n+\t\tError.captureStackTrace?.(this, WorkspaceUntrustedError);\n+\t}\n+}\n+\n export const enum WorktreeCreateErrorReason {\n \tAlreadyCheckedOut = 1,\n \tAlreadyExists = 2,"
        },
        {
          "filename": "src/git/gitProviderService.ts",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -82,6 +82,12 @@ import type { RichRemoteProvider } from './remotes/richRemoteProvider';\n import type { GitSearch, SearchQuery } from './search';\n \n const emptyArray = Object.freeze([]) as unknown as any[];\n+const emptyDisposable = Object.freeze({\n+\tdispose: () => {\n+\t\t/* noop */\n+\t},\n+});\n+\n const maxDefaultBranchWeight = 100;\n const weightedDefaultBranches = new Map<string, number>([\n \t['master', maxDefaultBranchWeight],\n@@ -216,6 +222,13 @@ export class GitProviderService implements Disposable {\n \t\t\t\tthis.resetCaches('providers');\n \t\t\t\tthis.updateContext();\n \t\t\t}),\n+\t\t\t!workspace.isTrusted\n+\t\t\t\t? workspace.onDidGrantWorkspaceTrust(() => {\n+\t\t\t\t\t\tif (workspace.isTrusted && workspace.workspaceFolders?.length) {\n+\t\t\t\t\t\t\tvoid this.discoverRepositories(workspace.workspaceFolders, { force: true });\n+\t\t\t\t\t\t}\n+\t\t\t\t  })\n+\t\t\t\t: emptyDisposable,\n \t\t\t...this.registerCommands(),\n \t\t);\n "
        },
        {
          "filename": "src/webviews/apps/home/home.html",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -96,6 +96,17 @@ <h1 class=\"alert__title\">Unsafe repository</h1>\n \t\t\t\t\t</p>\n \t\t\t\t</div>\n \t\t\t</div>\n+\t\t\t<div id=\"untrusted-alert\" class=\"alert alert--info mb-0\" aria-hidden=\"true\" hidden>\n+\t\t\t\t<h1 class=\"alert__title\">Untrusted workspace</h1>\n+\t\t\t\t<div class=\"alert__description\">\n+\t\t\t\t\t<p>Unable to open repositories in Restricted Mode.</p>\n+\t\t\t\t\t<p class=\"centered\">\n+\t\t\t\t\t\t<vscode-button data-action=\"command:workbench.trust.manage\"\n+\t\t\t\t\t\t\t>Manage Workspace Trust</vscode-button\n+\t\t\t\t\t\t>\n+\t\t\t\t\t</p>\n+\t\t\t\t</div>\n+\t\t\t</div>\n \t\t\t<header-card id=\"header-card\" image=\"#{webroot}/media/gitlens-logo.webp\"></header-card>\n \t\t</header>\n \t\t<main class=\"home__main scrollable\" id=\"main\" tabindex=\"-1\">"
        },
        {
          "filename": "src/webviews/apps/home/home.ts",
          "status": "modified",
          "additions": 36,
          "deletions": 28,
          "patch": "@@ -247,36 +247,26 @@ export class HomeApp extends App<State> {\n \t}\n \n \tprivate updateNoRepo() {\n-\t\tconst { repositories } = this.state;\n-\t\tconst hasRepos = repositories.openCount > 0;\n-\t\tconst value = hasRepos ? 'true' : 'false';\n-\n-\t\tlet $el = document.getElementById('no-repo');\n-\t\t$el?.setAttribute('aria-hidden', value);\n-\t\tif (hasRepos) {\n-\t\t\t$el?.setAttribute('hidden', value);\n-\t\t} else {\n-\t\t\t$el?.removeAttribute('hidden');\n-\t\t}\n+\t\tconst {\n+\t\t\trepositories: { openCount, hasUnsafe, trusted },\n+\t\t} = this.state;\n \n-\t\t$el = document.getElementById('no-repo-alert');\n-\t\tconst showUnsafe = repositories.hasUnsafe && !hasRepos;\n-\t\tconst $unsafeEl = document.getElementById('unsafe-repo-alert');\n-\t\tif (showUnsafe) {\n-\t\t\t$el?.setAttribute('aria-hidden', 'true');\n-\t\t\t$el?.setAttribute('hidden', 'true');\n-\t\t\t$unsafeEl?.setAttribute('aria-hidden', 'false');\n-\t\t\t$unsafeEl?.removeAttribute('hidden');\n-\t\t} else {\n-\t\t\t$unsafeEl?.setAttribute('aria-hidden', 'true');\n-\t\t\t$unsafeEl?.setAttribute('hidden', 'true');\n-\t\t\t$el?.setAttribute('aria-hidden', value);\n-\t\t\tif (hasRepos) {\n-\t\t\t\t$el?.setAttribute('hidden', value);\n-\t\t\t} else {\n-\t\t\t\t$el?.removeAttribute('hidden');\n-\t\t\t}\n+\t\tif (!trusted) {\n+\t\t\tsetElementVisibility('untrusted-alert', true);\n+\t\t\tsetElementVisibility('no-repo', false);\n+\t\t\tsetElementVisibility('no-repo-alert', false);\n+\t\t\tsetElementVisibility('unsafe-repo-alert', false);\n+\n+\t\t\treturn;\n \t\t}\n+\n+\t\tsetElementVisibility('untrusted-alert', false);\n+\n+\t\tconst noRepos = openCount === 0;\n+\n+\t\tsetElementVisibility('no-repo', noRepos);\n+\t\tsetElementVisibility('no-repo-alert', noRepos && !hasUnsafe);\n+\t\tsetElementVisibility('unsafe-repo-alert', hasUnsafe);\n \t}\n \n \tprivate updateLayout() {\n@@ -371,6 +361,24 @@ export class HomeApp extends App<State> {\n \t}\n }\n \n+function setElementVisibility(elementOrId: string | HTMLElement | null | undefined, visible: boolean) {\n+\tlet el;\n+\tif (typeof elementOrId === 'string') {\n+\t\tel = document.getElementById(elementOrId);\n+\t} else {\n+\t\tel = elementOrId;\n+\t}\n+\tif (el == null) return;\n+\n+\tif (visible) {\n+\t\tel.setAttribute('aria-hidden', 'false');\n+\t\tel.removeAttribute('hidden');\n+\t} else {\n+\t\tel.setAttribute('aria-hidden', 'true');\n+\t\tel?.setAttribute('hidden', 'true');\n+\t}\n+}\n+\n function toggleArrayItem(list: string[] = [], item: string, add = true) {\n \tconst hasStep = list.includes(item);\n \tif (!hasStep && add) {"
        },
        {
          "filename": "src/webviews/home/homeWebview.ts",
          "status": "modified",
          "additions": 27,
          "deletions": 5,
          "patch": "@@ -1,5 +1,5 @@\n import type { ConfigurationChangeEvent } from 'vscode';\n-import { Disposable, window } from 'vscode';\n+import { Disposable, window, workspace } from 'vscode';\n import { getAvatarUriFromGravatarEmail } from '../../avatars';\n import { ViewsLayout } from '../../commands/setViewsLayout';\n import type { Container } from '../../container';\n@@ -10,11 +10,18 @@ import { executeCoreCommand, registerCommand } from '../../system/command';\n import { configuration } from '../../system/configuration';\n import type { Deferrable } from '../../system/function';\n import { debounce } from '../../system/function';\n+import { getSettledValue } from '../../system/promise';\n import type { StorageChangeEvent } from '../../system/storage';\n import type { IpcMessage } from '../protocol';\n import { onIpc } from '../protocol';\n import type { WebviewController, WebviewProvider } from '../webviewController';\n-import type { CompleteStepParams, DismissBannerParams, DismissSectionParams, State } from './protocol';\n+import type {\n+\tCompleteStepParams,\n+\tDidChangeRepositoriesParams,\n+\tDismissBannerParams,\n+\tDismissSectionParams,\n+\tState,\n+} from './protocol';\n import {\n \tCompletedActions,\n \tCompleteStepCommandType,\n@@ -27,6 +34,12 @@ import {\n \tDismissStatusCommandType,\n } from './protocol';\n \n+const emptyDisposable = Object.freeze({\n+\tdispose: () => {\n+\t\t/* noop */\n+\t},\n+});\n+\n export class HomeWebviewProvider implements WebviewProvider<State> {\n \tprivate readonly _disposable: Disposable;\n \n@@ -36,6 +49,9 @@ export class HomeWebviewProvider implements WebviewProvider<State> {\n \t\t\tthis.container.git.onDidChangeRepositories(this.onRepositoriesChanged, this),\n \t\t\tconfiguration.onDidChange(this.onConfigurationChanged, this),\n \t\t\tthis.container.storage.onDidChange(this.onStorageChanged, this),\n+\t\t\t!workspace.isTrusted\n+\t\t\t\t? workspace.onDidGrantWorkspaceTrust(this.notifyDidChangeRepositories, this)\n+\t\t\t\t: emptyDisposable,\n \t\t);\n \t}\n \n@@ -221,7 +237,12 @@ export class HomeWebviewProvider implements WebviewProvider<State> {\n \t}\n \n \tprivate async getState(subscription?: Subscription): Promise<State> {\n-\t\tconst sub = await this.getSubscription(subscription);\n+\t\tconst [visibilityResult, subscriptionResult] = await Promise.allSettled([\n+\t\t\tthis.getRepoVisibility(),\n+\t\t\tthis.getSubscription(subscription),\n+\t\t]);\n+\n+\t\tconst sub = getSettledValue(subscriptionResult)!;\n \t\tconst steps = this.container.storage.get('home:steps:completed', []);\n \t\tconst sections = this.container.storage.get('home:sections:dismissed', []);\n \t\tconst dismissedBanners = this.container.storage.get('home:banners:dismissed', []);\n@@ -233,7 +254,7 @@ export class HomeWebviewProvider implements WebviewProvider<State> {\n \t\t\tsubscription: sub.subscription,\n \t\t\tcompletedActions: sub.completedActions,\n \t\t\tplusEnabled: this.getPlusEnabled(),\n-\t\t\tvisibility: await this.getRepoVisibility(),\n+\t\t\tvisibility: getSettledValue(visibilityResult)!,\n \t\t\tcompletedSteps: steps,\n \t\t\tdismissedSections: sections,\n \t\t\tavatar: sub.avatar,\n@@ -255,11 +276,12 @@ export class HomeWebviewProvider implements WebviewProvider<State> {\n \t\t});\n \t}\n \n-\tprivate getRepositoriesState() {\n+\tprivate getRepositoriesState(): DidChangeRepositoriesParams {\n \t\treturn {\n \t\t\tcount: this.container.git.repositoryCount,\n \t\t\topenCount: this.container.git.openRepositoryCount,\n \t\t\thasUnsafe: this.container.git.hasUnsafeRepositories(),\n+\t\t\ttrusted: workspace.isTrusted,\n \t\t};\n \t}\n "
        },
        {
          "filename": "src/webviews/home/protocol.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -57,6 +57,7 @@ export interface DidChangeRepositoriesParams {\n \tcount: number;\n \topenCount: number;\n \thasUnsafe: boolean;\n+\ttrusted: boolean;\n }\n export const DidChangeRepositoriesType = new IpcNotificationType<DidChangeRepositoriesParams>('repositories/didChange');\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7befb4b2f8e32c2be745df585e1c29802d222f4c",
            "date": "2025-01-14T00:51:56Z",
            "author_login": "d13"
          },
          {
            "sha": "7f6a5999e6643aac149d1120aad2155f46277969",
            "date": "2025-01-14T00:40:25Z",
            "author_login": "d13"
          },
          {
            "sha": "160ff6582e2234963425c1e9a1e84e98de05ed06",
            "date": "2025-01-13T18:22:56Z",
            "author_login": "d13"
          },
          {
            "sha": "2bd458c0cfa7cfcb54103e907fffa6a93d8f6c8d",
            "date": "2025-01-13T17:48:31Z",
            "author_login": "d13"
          },
          {
            "sha": "27899d2668181a77a273b1d846662e87674b4cdd",
            "date": "2025-01-13T17:44:09Z",
            "author_login": "d13"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "An issue in GitKraken GitLens before v.14.0.0 allows an attacker to execute arbitrary code via a crafted file to the Visual Studio Codes workspace trust component.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-28T22:15:06.937",
    "last_modified": "2024-11-21T08:29:31.547",
    "fix_date": "2023-05-17T19:58:24Z"
  },
  "references": [
    {
      "url": "https://github.com/gitkraken/vscode-gitlens/commit/ee2a0c42a92d33059a39fd15fbbd5dd3d5ab6440",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.sonarsource.com/blog/vscode-security-markdown-vulnerabilities-in-extensions/",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gitkraken/vscode-gitlens/commit/ee2a0c42a92d33059a39fd15fbbd5dd3d5ab6440",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.sonarsource.com/blog/vscode-security-markdown-vulnerabilities-in-extensions/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.293783",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vscode-gitlens",
    "owner": "gitkraken",
    "created_at": "2016-08-08T14:50:30Z",
    "updated_at": "2025-01-14T02:12:11Z",
    "pushed_at": "2025-01-14T11:06:52Z",
    "size": 145910,
    "stars": 9100,
    "forks": 1375,
    "open_issues": 784,
    "watchers": 9100,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 5184453,
      "HTML": 214418,
      "SCSS": 131588,
      "JavaScript": 72101,
      "Handlebars": 2072,
      "Dockerfile": 1282,
      "Shell": 920
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T18:01:51.809126"
  }
}