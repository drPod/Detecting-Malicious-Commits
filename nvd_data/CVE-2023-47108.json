{
  "cve_id": "CVE-2023-47108",
  "github_data": {
    "repository": "open-telemetry/opentelemetry-go-contrib",
    "fix_commit": "b44dfc9092b157625a5815cb437583cee663333b",
    "related_commits": [
      "b44dfc9092b157625a5815cb437583cee663333b",
      "b44dfc9092b157625a5815cb437583cee663333b"
    ],
    "patch_url": "https://github.com/open-telemetry/opentelemetry-go-contrib/commit/b44dfc9092b157625a5815cb437583cee663333b.patch",
    "fix_commit_details": {
      "sha": "b44dfc9092b157625a5815cb437583cee663333b",
      "commit_date": "2023-11-06T23:34:22Z",
      "author": {
        "login": "MadVikingGod",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "otelgrpc: Remove high cardinality metric attributes (#4322)",
        "length": 59,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 65,
        "additions": 18,
        "deletions": 47
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -46,6 +46,10 @@ This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.htm\n - Upgrade dependencies of OpenTelemetry Go to use the new [`v1.19.0`/`v0.42.0`/`v0.0.7` release](https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.19.0).\n - Use `grpc.StatsHandler` for gRPC instrumentation in `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc/example`. (#4325)\n \n+### Removed\n+\n+- The `net.sock.peer.*` and `net.peer.*` high cardinality attributes are removed from the metrics generated by `go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`. (#4322)\n+\n ## [1.19.0/0.44.0/0.13.0] - 2023-09-12\n \n ### Added"
        },
        {
          "filename": "instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go",
          "status": "modified",
          "additions": 14,
          "deletions": 13,
          "patch": "@@ -83,7 +83,7 @@ func UnaryClientInterceptor(opts ...Option) grpc.UnaryClientInterceptor {\n \t\t\treturn invoker(ctx, method, req, reply, cc, callOpts...)\n \t\t}\n \n-\t\tname, attr := spanInfo(method, cc.Target())\n+\t\tname, attr, _ := telemetryAttributes(method, cc.Target())\n \n \t\tstartOpts := append([]trace.SpanStartOption{\n \t\t\ttrace.WithSpanKind(trace.SpanKindClient),\n@@ -277,7 +277,7 @@ func StreamClientInterceptor(opts ...Option) grpc.StreamClientInterceptor {\n \t\t\treturn streamer(ctx, desc, cc, method, callOpts...)\n \t\t}\n \n-\t\tname, attr := spanInfo(method, cc.Target())\n+\t\tname, attr, _ := telemetryAttributes(method, cc.Target())\n \n \t\tstartOpts := append([]trace.SpanStartOption{\n \t\t\ttrace.WithSpanKind(trace.SpanKindClient),\n@@ -346,7 +346,7 @@ func UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {\n \t\t}\n \n \t\tctx = extract(ctx, cfg.Propagators)\n-\t\tname, attr := spanInfo(info.FullMethod, peerFromCtx(ctx))\n+\t\tname, attr, metricAttrs := telemetryAttributes(info.FullMethod, peerFromCtx(ctx))\n \n \t\tstartOpts := append([]trace.SpanStartOption{\n \t\t\ttrace.WithSpanKind(trace.SpanKindServer),\n@@ -386,8 +386,8 @@ func UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {\n \t\tspan.SetAttributes(grpcStatusCodeAttr)\n \n \t\telapsedTime := time.Since(before).Milliseconds()\n-\t\tattr = append(attr, grpcStatusCodeAttr)\n-\t\tcfg.rpcDuration.Record(ctx, float64(elapsedTime), metric.WithAttributes(attr...))\n+\t\tmetricAttrs = append(metricAttrs, grpcStatusCodeAttr)\n+\t\tcfg.rpcDuration.Record(ctx, float64(elapsedTime), metric.WithAttributes(metricAttrs...))\n \n \t\treturn resp, err\n \t}\n@@ -468,7 +468,7 @@ func StreamServerInterceptor(opts ...Option) grpc.StreamServerInterceptor {\n \t\t}\n \n \t\tctx = extract(ctx, cfg.Propagators)\n-\t\tname, attr := spanInfo(info.FullMethod, peerFromCtx(ctx))\n+\t\tname, attr, _ := telemetryAttributes(info.FullMethod, peerFromCtx(ctx))\n \n \t\tstartOpts := append([]trace.SpanStartOption{\n \t\t\ttrace.WithSpanKind(trace.SpanKindServer),\n@@ -498,17 +498,18 @@ func StreamServerInterceptor(opts ...Option) grpc.StreamServerInterceptor {\n \t}\n }\n \n-// spanInfo returns a span name and all appropriate attributes from the gRPC\n-// method and peer address.\n-func spanInfo(fullMethod, peerAddress string) (string, []attribute.KeyValue) {\n-\tname, mAttrs := internal.ParseFullMethod(fullMethod)\n+// telemetryAttributes returns a span name and span and metric attributes from\n+// the gRPC method and peer address.\n+func telemetryAttributes(fullMethod, peerAddress string) (string, []attribute.KeyValue, []attribute.KeyValue) {\n+\tname, methodAttrs := internal.ParseFullMethod(fullMethod)\n \tpeerAttrs := peerAttr(peerAddress)\n \n-\tattrs := make([]attribute.KeyValue, 0, 1+len(mAttrs)+len(peerAttrs))\n+\tattrs := make([]attribute.KeyValue, 0, 1+len(methodAttrs)+len(peerAttrs))\n \tattrs = append(attrs, RPCSystemGRPC)\n-\tattrs = append(attrs, mAttrs...)\n+\tattrs = append(attrs, methodAttrs...)\n+\tmetricAttrs := attrs[:1+len(methodAttrs)]\n \tattrs = append(attrs, peerAttrs...)\n-\treturn name, attrs\n+\treturn name, attrs, metricAttrs\n }\n \n // peerAttr returns attributes about the peer address."
        },
        {
          "filename": "instrumentation/google.golang.org/grpc/otelgrpc/test/grpc_test.go",
          "status": "modified",
          "additions": 0,
          "deletions": 34,
          "patch": "@@ -16,7 +16,6 @@ package test\n \n import (\n \t\"context\"\n-\t\"fmt\"\n \t\"net\"\n \t\"strconv\"\n \t\"testing\"\n@@ -665,12 +664,6 @@ func checkUnaryServerRecords(t *testing.T, reader metric.Reader) {\n \tassert.NoError(t, err)\n \trequire.Len(t, rm.ScopeMetrics, 1)\n \n-\t// TODO: Remove these #4322\n-\taddress, ok := findScopeMetricAttribute(rm.ScopeMetrics[0], semconv.NetSockPeerAddrKey)\n-\tassert.True(t, ok)\n-\tport, ok := findScopeMetricAttribute(rm.ScopeMetrics[0], semconv.NetSockPeerPortKey)\n-\tassert.True(t, ok)\n-\n \twant := metricdata.ScopeMetrics{\n \t\tScope: wantInstrumentationScope,\n \t\tMetrics: []metricdata.Metrics{\n@@ -687,8 +680,6 @@ func checkUnaryServerRecords(t *testing.T, reader metric.Reader) {\n \t\t\t\t\t\t\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n \t\t\t\t\t\t\t\totelgrpc.RPCSystemGRPC,\n \t\t\t\t\t\t\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n-\t\t\t\t\t\t\t\taddress,\n-\t\t\t\t\t\t\t\tport,\n \t\t\t\t\t\t\t),\n \t\t\t\t\t\t},\n \t\t\t\t\t\t{\n@@ -697,8 +688,6 @@ func checkUnaryServerRecords(t *testing.T, reader metric.Reader) {\n \t\t\t\t\t\t\t\tsemconv.RPCService(\"grpc.testing.TestService\"),\n \t\t\t\t\t\t\t\totelgrpc.RPCSystemGRPC,\n \t\t\t\t\t\t\t\totelgrpc.GRPCStatusCodeKey.Int64(int64(codes.OK)),\n-\t\t\t\t\t\t\t\taddress,\n-\t\t\t\t\t\t\t\tport,\n \t\t\t\t\t\t\t),\n \t\t\t\t\t\t},\n \t\t\t\t\t},\n@@ -718,26 +707,3 @@ func findAttribute(kvs []attribute.KeyValue, key attribute.Key) (attribute.KeyVa\n \t}\n \treturn attribute.KeyValue{}, false\n }\n-\n-func findScopeMetricAttribute(sm metricdata.ScopeMetrics, key attribute.Key) (attribute.KeyValue, bool) {\n-\tfor _, m := range sm.Metrics {\n-\t\t// This only needs to cover data types used by the instrumentation.\n-\t\tswitch d := m.Data.(type) {\n-\t\tcase metricdata.Histogram[int64]:\n-\t\t\tfor _, dp := range d.DataPoints {\n-\t\t\t\tif kv, ok := findAttribute(dp.Attributes.ToSlice(), key); ok {\n-\t\t\t\t\treturn kv, true\n-\t\t\t\t}\n-\t\t\t}\n-\t\tcase metricdata.Histogram[float64]:\n-\t\t\tfor _, dp := range d.DataPoints {\n-\t\t\t\tif kv, ok := findAttribute(dp.Attributes.ToSlice(), key); ok {\n-\t\t\t\t\treturn kv, true\n-\t\t\t\t}\n-\t\t\t}\n-\t\tdefault:\n-\t\t\tpanic(fmt.Sprintf(\"unexpected data type %T - name %s\", d, m.Name))\n-\t\t}\n-\t}\n-\treturn attribute.KeyValue{}, false\n-}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "640d7eac593344c6e2cc6351ebe6f06ff16362ca",
            "date": "2025-01-14T14:13:50Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "59b3a037b2b62cad8964b422ce8d70acc57f89cb",
            "date": "2025-01-14T14:02:46Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "d5febab7695d2d48cf5807a0d9e04d8e634b4a80",
            "date": "2025-01-14T11:53:53Z",
            "author_login": "dmathieu"
          },
          {
            "sha": "96407041d21127e91171493abffd457dcc24815d",
            "date": "2025-01-13T08:25:23Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "3cb1cc25220303b1d407cb8dc4aae42855c742dd",
            "date": "2025-01-13T08:14:55Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. Prior to version 0.46.0, the grpc Unary Server Interceptor out of the box adds labels `net.peer.sock.addr` and `net.peer.sock.port` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. An attacker can easily flood the peer address and port for requests. Version 0.46.0 contains a fix for this issue. As a workaround to stop being affected, a view removing the attributes can be used. The other possibility is to disable grpc metrics instrumentation by passing `otelgrpc.WithMeterProvider` option with `noop.NewMeterProvider`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-10T19:15:16.410",
    "last_modified": "2024-11-21T08:29:47.600",
    "fix_date": "2023-11-06T23:34:22Z"
  },
  "references": [
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/blob/instrumentation/google.golang.org/grpc/otelgrpc/v0.45.0/instrumentation/google.golang.org/grpc/otelgrpc/config.go#L138",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/commit/b44dfc9092b157625a5815cb437583cee663333b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-8pgv-569h-w5rw",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/blob/instrumentation/google.golang.org/grpc/otelgrpc/v0.45.0/instrumentation/google.golang.org/grpc/otelgrpc/config.go#L138",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/commit/b44dfc9092b157625a5815cb437583cee663333b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-8pgv-569h-w5rw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.249338",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "opentelemetry-go-contrib",
    "owner": "open-telemetry",
    "created_at": "2020-02-21T18:12:36Z",
    "updated_at": "2025-01-14T14:13:54Z",
    "pushed_at": "2025-01-14T14:15:52Z",
    "size": 20218,
    "stars": 1260,
    "forks": 583,
    "open_issues": 253,
    "watchers": 1260,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release-otelhttp-v0.35.1"
    ],
    "languages": {
      "Go": 1969520,
      "Shell": 18387,
      "Makefile": 11773,
      "Dockerfile": 2557,
      "HTML": 2546,
      "sed": 183
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:47:33.484812"
  }
}