{
  "cve_id": "CVE-2023-47117",
  "github_data": {
    "repository": "HumanSignal/label-studio",
    "fix_commit": "f931d9d129002f54a495995774ce7384174cef5c",
    "related_commits": [
      "f931d9d129002f54a495995774ce7384174cef5c",
      "f931d9d129002f54a495995774ce7384174cef5c"
    ],
    "patch_url": "https://github.com/HumanSignal/label-studio/commit/f931d9d129002f54a495995774ce7384174cef5c.patch",
    "fix_commit_details": {
      "sha": "f931d9d129002f54a495995774ce7384174cef5c",
      "commit_date": "2023-11-08T17:19:47Z",
      "author": {
        "login": "jombooth",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: LEAP-237: Patch ORM Leak vulnerability in open source (#5012)",
        "length": 238,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 361,
        "additions": 351,
        "deletions": 10
      },
      "files": [
        {
          "filename": "label_studio/core/settings/base.py",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -15,7 +15,7 @@\n import re\n from datetime import timedelta\n \n-from label_studio.core.utils.params import get_bool_env\n+from label_studio.core.utils.params import get_bool_env, get_env_list\n \n formatter = 'standard'\n JSON_LOG = get_bool_env('JSON_LOG', False)\n@@ -667,3 +667,9 @@ def collect_versions_dummy(**kwargs):\n REAL_HOSTNAME = os.getenv('HOSTNAME')  # we have to use getenv, because we don't use LABEL_STUDIO_ prefix\n GCS_CLOUD_STORAGE_FORCE_DEFAULT_CREDENTIALS = get_bool_env('GCS_CLOUD_STORAGE_FORCE_DEFAULT_CREDENTIALS', False)\n PUBLIC_API_DOCS = get_bool_env('PUBLIC_API_DOCS', False)\n+\n+# By default, we disallow filters with foreign keys in data manager for security reasons.\n+# Add to this list (either here in code, or via the env) to allow specific filters that rely on foreign keys.\n+DATA_MANAGER_FILTER_ALLOWLIST = list(\n+    set(get_env_list('DATA_MANAGER_FILTER_ALLOWLIST') + ['updated_by__active_organization'])\n+)"
        },
        {
          "filename": "label_studio/core/utils/params.py",
          "status": "modified",
          "additions": 15,
          "deletions": 3,
          "patch": "@@ -1,4 +1,5 @@\n import os\n+from typing import Callable, Optional, Sequence, TypeVar\n \n from rest_framework.exceptions import ValidationError\n \n@@ -125,16 +126,27 @@ def get_bool_env(key, default):\n     return get_env(key, default, is_bool=True)\n \n \n-def get_env_list_int(key, default=None):\n+T = TypeVar('T')\n+\n+\n+def get_env_list(\n+    key: str, default: Optional[Sequence[T]] = None, value_transform: Callable[[str], T] = str\n+) -> Sequence[T]:\n     \"\"\"\n-    \"1,2,3\" in env variable => [1, 2, 3] in python\n+    \"foo,bar,baz\" in env variable => [\"foo\", \"bar\", \"baz\"] in python.\n+    Use value_transform to convert the strings to any other type.\n     \"\"\"\n     value = get_env(key)\n     if not value:\n         if default is None:\n             return []\n         return default\n-    return [int(el) for el in value.split(',')]\n+\n+    return [value_transform(el) for el in value.split(',')]\n+\n+\n+def get_env_list_int(key, default=None) -> Sequence[int]:\n+    return get_env_list(key, default=default, value_transform=int)\n \n \n def get_all_env_with_prefix(prefix=None, is_bool=True, default_value=None):"
        },
        {
          "filename": "label_studio/data_manager/functions.py",
          "status": "modified",
          "additions": 32,
          "deletions": 5,
          "patch": "@@ -2,6 +2,7 @@\n \"\"\"\n import logging\n from collections import OrderedDict\n+from typing import Tuple\n from urllib.parse import unquote\n \n import ujson as json\n@@ -337,11 +338,37 @@ def preprocess_filter(_filter, *_):\n     return _filter\n \n \n-def preprocess_field_name(raw_field_name, only_undefined_field=False):\n-    field_name = raw_field_name.replace('filter:', '')\n-    field_name = field_name.replace('tasks:', '')\n-    ascending = False if field_name[0] == '-' else True  # detect direction\n-    field_name = field_name[1:] if field_name[0] == '-' else field_name  # remove direction\n+def preprocess_field_name(raw_field_name, only_undefined_field=False) -> Tuple[str, bool]:\n+    \"\"\"Transform a field name (as specified in the datamanager views endpoint) to\n+    a django ORM field name. Also handle dotted accesses to task.data.\n+\n+    Edit with care; it's critical that this function not be changed in ways that\n+    introduce vulnerabilities in the vein of the ORM Leak (see #5012). In particular\n+    it is not advisable to use `replace` or other calls that replace all instances\n+    of a string within this function.\n+\n+    Returns: Django ORM field name: str, Sort is ascending: bool\n+    \"\"\"\n+\n+    field_name = raw_field_name\n+    ascending = True\n+\n+    # Descending marker `-` may come at the beginning of the string\n+    if field_name.startswith('-'):\n+        ascending = False\n+        field_name = field_name[1:]\n+\n+    # For security reasons, these must only be removed when they fall at the beginning of the string (or after `-`).\n+    optional_prefixes = ['filter:', 'tasks:']\n+    for prefix in optional_prefixes:\n+        if field_name.startswith(prefix):\n+            field_name = field_name[len(prefix) :]\n+\n+    # Descending marker may also come after other prefixes. Double negative is not allowed.\n+    if ascending and field_name.startswith('-'):\n+        ascending = False\n+        field_name = field_name[1:]\n+\n     if field_name.startswith('data.'):\n         if only_undefined_field:\n             field_name = f'data__{settings.DATA_UNDEFINED_NAME}'"
        },
        {
          "filename": "label_studio/data_manager/serializers.py",
          "status": "modified",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n \n import ujson as json\n from data_manager.models import Filter, FilterGroup, View\n+from django.conf import settings\n from django.db import transaction\n from projects.models import Project\n from rest_framework import serializers\n@@ -18,6 +19,49 @@ class Meta:\n         model = Filter\n         fields = '__all__'\n \n+    def validate_column(self, column: str) -> str:\n+        \"\"\"\n+        Ensure that the passed filter expression starts with 'filter:tasks:' and contains\n+        no foreign key traversals. This means either the filter expression contains no '__'\n+        substrings, or that it's the task.data json field that's accessed.\n+\n+        Users depending on foreign key traversals in views can allowlist them via the\n+        DATA_MANAGER_FILTER_ALLOWLIST setting in the env.\n+\n+        Edit with care. The validations below are critical for security.\n+        \"\"\"\n+\n+        column_copy = column\n+\n+        # We may support 'filter:annotations:' in the future, but we don't as of yet.\n+        required_prefix = 'filter:tasks:'\n+        optional_prefix = '-'\n+\n+        if not column_copy.startswith(required_prefix):\n+            raise serializers.ValidationError(f'Filter \"{column}\" should start with \"{required_prefix}\"')\n+\n+        column_copy = column_copy[len(required_prefix) :]\n+\n+        if column_copy.startswith(optional_prefix):\n+            column_copy = column_copy[len(optional_prefix) :]\n+\n+        if column_copy.startswith('data.'):\n+            # Allow underscores if the filter is based on the `task.data` JSONField, because these don't leverage foreign keys.\n+            return column\n+\n+        # Specific filters relying on foreign keys can be allowlisted\n+        if column_copy in settings.DATA_MANAGER_FILTER_ALLOWLIST:\n+            return column\n+\n+        # But in general, we don't allow foreign keys\n+        if '__' in column_copy:\n+            raise serializers.ValidationError(\n+                f'\"__\" is not generally allowed in filters. Consider asking your administrator to add \"{column_copy}\" '\n+                'to DATA_MANAGER_FILTER_ALLOWLIST, but note that some filter expressions may pose a security risk'\n+            )\n+\n+        return column\n+\n \n class FilterGroupSerializer(serializers.ModelSerializer):\n     filters = FilterSerializer(many=True)"
        },
        {
          "filename": "label_studio/tests/data_manager/api_tasks.tavern.yml",
          "status": "modified",
          "additions": 253,
          "deletions": 1,
          "patch": "@@ -1124,7 +1124,7 @@ marks:\n   - usefixtures:\n       - django_live_url\n stages:\n-  \n+\n   - id: signup\n     type: ref\n \n@@ -1479,3 +1479,255 @@ stages:\n         \"total_predictions\": 0,\n         \"total\": 1,\n       }\n+\n+---\n+\n+# See FilterSerializer; test logic preventing exploit that traverses the ORM\n+# to leak sensitive data character-by-character\n+test_name: tasks_api_filter_security_restrictions\n+strict: false\n+marks:\n+- usefixtures:\n+  - django_live_url\n+stages:\n+\n+- id: signup\n+  type: ref\n+\n+- id: create_project\n+  name: create_project\n+  request:\n+    data:\n+      title: Test Draft 1\n+      show_collab_predictions: true\n+    method: POST\n+    url: '{django_live_url}/api/projects'\n+  response:\n+    save:\n+      json:\n+        project_pk: id\n+        created_by: created_by.id\n+    status_code: 201\n+\n+- name: create view with exploit filter should fail\n+  request:\n+    method: POST\n+    url: '{django_live_url}/api/dm/views'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"filter:tasks:updated_by__sensitive_field\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 400\n+    json:\n+      validation_errors:\n+        filter_group:\n+          filters:\n+            - column:\n+              - '\"__\" is not generally allowed in filters. Consider asking your administrator to add \"updated_by__sensitive_field\" to DATA_MANAGER_FILTER_ALLOWLIST, but note that some filter expressions may pose a security risk'\n+\n+- name: create view with allowlisted filter should succeed\n+  request:\n+    method: POST\n+    url: '{django_live_url}/api/dm/views'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"filter:tasks:updated_by__active_organization\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 201\n+    save:\n+      json:\n+        view_pk: id\n+\n+- name: change filter to typical column succeeds\n+  request:\n+    method: PUT\n+    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"filter:tasks:updated_by\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 200\n+\n+- name: change filter to unexpected prefix fails\n+  request:\n+    method: PUT\n+    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"tasks:filter:annotations_results\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 400\n+    json:\n+      validation_errors:\n+        filter_group:\n+          filters:\n+            - column:\n+              - 'Filter \"tasks:filter:annotations_results\" should start with \"filter:tasks:\"'\n+\n+- name: change filter to include direction marker succeeds\n+  request:\n+    method: PUT\n+    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"filter:tasks:-annotations_results\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 200\n+\n+- name: invalid filter with direction marker fails, but suggests correct allowlist\n+  request:\n+    method: PUT\n+    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"filter:tasks:-updated_by__sensitive_field\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 400\n+    json:\n+      validation_errors:\n+        filter_group:\n+          filters:\n+            - column:\n+              - '\"__\" is not generally allowed in filters. Consider asking your administrator to add \"updated_by__sensitive_field\" to DATA_MANAGER_FILTER_ALLOWLIST, but note that some filter expressions may pose a security risk'\n+\n+- name: change filter to dotted data field with underscores succeeds\n+  request:\n+    method: PUT\n+    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"filter:tasks:data.images__0\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 200\n+\n+- name: change filter to valid column without prefix fails\n+  request:\n+    method: PUT\n+    url: '{django_live_url}/api/dm/views/{view_pk}?interaction=filter&project={project_pk}'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            - filter: \"annotations_results\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 400\n+    json:\n+      validation_errors:\n+        filter_group:\n+          filters:\n+            - column:\n+              - 'Filter \"annotations_results\" should start with \"filter:tasks:\"'\n+\n+---\n+\n+# Regression test preventing replace-all of prefixes from being used to construct exploit filters\n+test_name: tasks_api_prevent_prefix_regression\n+strict: false\n+marks:\n+- usefixtures:\n+  - django_live_url\n+stages:\n+\n+- id: signup\n+  type: ref\n+\n+- id: create_project\n+  name: create_project\n+  request:\n+    data:\n+      title: Test Draft 1\n+      show_collab_predictions: true\n+    method: POST\n+    url: '{django_live_url}/api/projects'\n+  response:\n+    save:\n+      json:\n+        project_pk: id\n+        created_by: created_by.id\n+    status_code: 201\n+\n+# Perhaps our validation should be further improved, but for now, it's\n+# garbage in, garbage out.\n+- name: create view with prefix in middle of filter should succeed\n+  request:\n+    method: POST\n+    url: '{django_live_url}/api/dm/views'\n+    json:\n+      project: '{project_pk}'\n+      data:\n+        filters:\n+          conjunction: and\n+          items:\n+            # in an earlier version, preprocess_field_name would have\n+            # transformed this to updated_by__sensitive_field\n+            - filter: \"filter:tasks:updated_by_tasks:_sensitive_field\"\n+              operator: empty\n+              value: \"true\"\n+              type: String\n+  response:\n+    status_code: 201\n+    save:\n+      json:\n+        view_pk: id\n+\n+- name: get_tasks fails because \"updated_by_tasks:_sensitive_field\" doesn't resolve to a field\n+  request:\n+    method: GET\n+    url: '{django_live_url}/api/tasks?view={view_pk}'\n+  response:\n+    # 500 actually expected here\n+    status_code: 500"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b4a0a9e4cee45dc98d3058f89e256dc12b522a63",
            "date": "2025-01-14T14:02:13Z",
            "author_login": "nikitabelonogov"
          },
          {
            "sha": "813100e9c0058cc9cf9ad3ebb7d9afac5784c8ce",
            "date": "2025-01-14T14:00:30Z",
            "author_login": "robot-ci-heartex"
          },
          {
            "sha": "62e08b0f79eb7ff27712b4031e09e1c2a796b3b4",
            "date": "2025-01-14T13:56:44Z",
            "author_login": "yyassi-heartex"
          },
          {
            "sha": "88fd31fafcfa6f2fcd4dc68b81937feb62067383",
            "date": "2025-01-14T05:02:33Z",
            "author_login": "hakan458"
          },
          {
            "sha": "0a44bdcd19f3b892b91d531c62e9889e92e13a73",
            "date": "2025-01-14T03:16:21Z",
            "author_login": "caitlinwheeless"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Label Studio is an open source data labeling tool. In all current versions of Label Studio prior to 1.9.2post0, the application allows users to insecurely set filters for filtering tasks. An attacker can construct a filter chain to filter tasks based on sensitive fields for all user accounts on the platform by exploiting Django's Object Relational Mapper (ORM). Since the results of query can be manipulated by the ORM filter, an attacker can leak these sensitive fields character by character. In addition, Label Studio had a hard coded secret key that an attacker can use to forge a session token of any user by exploiting this ORM Leak vulnerability to leak account password hashes. This vulnerability has been addressed in commit `f931d9d129` which is included in the 1.9.2post0 release. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-13T21:15:08.317",
    "last_modified": "2024-11-21T08:29:48.757",
    "fix_date": "2023-11-08T17:19:47Z"
  },
  "references": [
    {
      "url": "https://github.com/HumanSignal/label-studio/commit/f931d9d129002f54a495995774ce7384174cef5c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/HumanSignal/label-studio/security/advisories/GHSA-6hjj-gq77-j4qw",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/HumanSignal/label-studio/commit/f931d9d129002f54a495995774ce7384174cef5c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/HumanSignal/label-studio/security/advisories/GHSA-6hjj-gq77-j4qw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.252419",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "label-studio",
    "owner": "HumanSignal",
    "created_at": "2019-06-19T02:00:44Z",
    "updated_at": "2025-01-14T14:19:04Z",
    "pushed_at": "2025-01-14T14:25:03Z",
    "size": 2431427,
    "stars": 20221,
    "forks": 2485,
    "open_issues": 922,
    "watchers": 20221,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3094087,
      "Python": 1915934,
      "TypeScript": 1337502,
      "SCSS": 350593,
      "HTML": 71425,
      "CSS": 47465,
      "Shell": 15910,
      "Dockerfile": 7094,
      "Makefile": 3603
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:37:43.325618"
  }
}