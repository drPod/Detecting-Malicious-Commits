{
  "cve_id": "CVE-2023-47120",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "95a82d608d6377faf68a0e2c5d9640b043557852",
    "related_commits": [
      "95a82d608d6377faf68a0e2c5d9640b043557852",
      "e910dd09140cb4abc3a563b95af4a137ca7fa0ce",
      "95a82d608d6377faf68a0e2c5d9640b043557852",
      "e910dd09140cb4abc3a563b95af4a137ca7fa0ce"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/95a82d608d6377faf68a0e2c5d9640b043557852.patch",
    "fix_commit_details": {
      "sha": "95a82d608d6377faf68a0e2c5d9640b043557852",
      "commit_date": "2023-10-18T02:29:36Z",
      "author": {
        "login": "Drenmi",
        "type": "User",
        "stats": {
          "total_commits": 231,
          "average_weekly_commits": 0.3333333333333333,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 84
        }
      },
      "commit_message": {
        "title": "SECURITY: Prevent Onebox cache overflow by limiting downloads and URL lengths",
        "length": 77,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 50,
        "additions": 42,
        "deletions": 8
      },
      "files": [
        {
          "filename": "lib/onebox.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -16,7 +16,7 @@ module Onebox\n   DEFAULTS = {\n     connect_timeout: 5,\n     timeout: 10,\n-    max_download_kb: (10 * 1024), # 10MB\n+    max_download_kb: 2048, # 2MB\n     load_paths: [File.join(Rails.root, \"lib/onebox/templates\")],\n     allowed_ports: [80, 443],\n     allowed_schemes: %w[http https],"
        },
        {
          "filename": "lib/onebox/engine/standard_embed.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -98,7 +98,13 @@ def get_favicon\n           ).first\n         favicon = favicon.nil? ? nil : (favicon[\"href\"].nil? ? nil : favicon[\"href\"].strip)\n \n-        Onebox::Helpers.get_absolute_image_url(favicon, url)\n+        return nil if favicon.blank?\n+\n+        absolute_url = Onebox::Helpers.get_absolute_image_url(favicon, url)\n+\n+        return nil if absolute_url.length > UrlHelper::MAX_URL_LENGTH\n+\n+        absolute_url\n       end\n \n       def get_description"
        },
        {
          "filename": "lib/url_helper.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n # frozen_string_literal: true\n \n class UrlHelper\n-  MAX_URL_LENGTH = 100_000\n+  MAX_URL_LENGTH = 2_000\n \n   # At the moment this handles invalid URLs that browser address bar accepts\n   # where second # is not encoded"
        },
        {
          "filename": "spec/lib/onebox/engine/standard_embed_spec.rb",
          "status": "modified",
          "additions": 32,
          "deletions": 4,
          "patch": "@@ -66,6 +66,34 @@ def url\n       expect(instance.raw).to eq({ title: \"do not override me\" })\n     end\n \n+    it \"sets favicon URL\" do\n+      html_doc =\n+        mocked_html_doc(\n+          twitter_data: {\n+            \"name\" => \"twitter:url\",\n+            \"content\" => \"cool.url\",\n+          },\n+          favicon_url: \"https://favicon.co/default.ico\",\n+        )\n+      Onebox::Helpers.stubs(fetch_html_doc: html_doc)\n+\n+      expect(instance.raw).to eq({ url: \"cool.url\", favicon: \"https://favicon.co/default.ico\" })\n+    end\n+\n+    it \"ignores suspiciously long favicon URLs\" do\n+      html_doc =\n+        mocked_html_doc(\n+          twitter_data: {\n+            \"name\" => \"twitter:url\",\n+            \"content\" => \"cool.url\",\n+          },\n+          favicon_url: \"https://favicon.co/#{\"a\" * 2_000}.ico\",\n+        )\n+      Onebox::Helpers.stubs(fetch_html_doc: html_doc)\n+\n+      expect(instance.raw).to eq({ url: \"cool.url\" })\n+    end\n+\n     it \"sets oembed data\" do\n       Onebox::Helpers.stubs(fetch_html_doc: nil)\n       Onebox::Oembed.any_instance.stubs(:data).returns({ description: \"description\" })\n@@ -84,11 +112,11 @@ def url\n \n   private\n \n-  def mocked_html_doc(twitter_data: nil)\n+  def mocked_html_doc(twitter_data: nil, favicon_url: nil)\n     html_doc = mock\n     html_doc.stubs(at_css: nil, at: nil)\n     stub_twitter(html_doc, twitter_data)\n-    stub_favicon(html_doc)\n+    stub_favicon(html_doc, favicon_url)\n     stub_json_ld\n     html_doc\n   end\n@@ -97,13 +125,13 @@ def stub_twitter(html_doc, twitter_data = [])\n     html_doc.expects(:css).with(\"meta\").at_least_once.returns([twitter_data])\n   end\n \n-  def stub_favicon(html_doc)\n+  def stub_favicon(html_doc, favicon_url = nil)\n     html_doc\n       .stubs(:css)\n       .with(\n         'link[rel=\"shortcut icon\"], link[rel=\"icon shortcut\"], link[rel=\"shortcut\"], link[rel=\"icon\"]',\n       )\n-      .returns([])\n+      .returns([{ \"href\" => favicon_url }.compact])\n   end\n \n   def stub_json_ld"
        },
        {
          "filename": "spec/lib/url_helper_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -166,7 +166,7 @@\n     end\n \n     it \"raises error if too long\" do\n-      expect do UrlHelper.normalized_encode(\"https://#{\"a\" * 100_000}.com\") end.to raise_error(\n+      expect do UrlHelper.normalized_encode(\"https://#{\"a\" * 2_000}.com\") end.to raise_error(\n         ArgumentError,\n       )\n     end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a94009a57d03ba7adea9c0b289ccbc94cd7d35e0",
            "date": "2025-01-14T21:33:09Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "bad869dd81a390b87d1f2297ca6a032dabda5faa",
            "date": "2025-01-14T20:18:51Z",
            "author_login": "markvanlan"
          },
          {
            "sha": "0fcb832244234f985d0b2628ddc63a382d1700c9",
            "date": "2025-01-14T20:17:13Z",
            "author_login": "davidtaylorhq"
          },
          {
            "sha": "912b002dcc5bc12698911b70e26912f3c6af990d",
            "date": "2025-01-14T20:00:12Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "c25e53db7ecc0d02d72e4e9b4a51419132b762a8",
            "date": "2025-01-14T19:23:08Z",
            "author_login": "markvanlan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "Discourse is an open source platform for community discussion. In versions 3.1.0 through 3.1.2 of the `stable` branch and versions 3.1.0,beta6 through 3.2.0.beta2 of the `beta` and `tests-passed` branches, Redis memory can be depleted by crafting a site with an abnormally long favicon URL and drafting multiple posts which Onebox it. The issue is patched in version 3.1.3 of the `stable` branch and version 3.2.0.beta3 of the `beta` and `tests-passed` branches. There are no known workarounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-10T16:15:33.473",
    "last_modified": "2024-11-21T08:29:49.150",
    "fix_date": "2023-10-18T02:29:36Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/95a82d608d6377faf68a0e2c5d9640b043557852",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/e910dd09140cb4abc3a563b95af4a137ca7fa0ce",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-77cw-xhj8-hfp3",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/95a82d608d6377faf68a0e2c5d9640b043557852",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/e910dd09140cb4abc3a563b95af4a137ca7fa0ce",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-77cw-xhj8-hfp3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.248320",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}