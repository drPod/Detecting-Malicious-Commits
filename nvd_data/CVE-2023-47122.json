{
  "cve_id": "CVE-2023-47122",
  "github_data": {
    "repository": "sigstore/gitsign",
    "fix_commit": "cd66ccb03c86a3600955f0c15f6bfeb75f697236",
    "related_commits": [
      "cd66ccb03c86a3600955f0c15f6bfeb75f697236",
      "cd66ccb03c86a3600955f0c15f6bfeb75f697236"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "cd66ccb03c86a3600955f0c15f6bfeb75f697236",
      "commit_date": "2023-11-09T22:19:56Z",
      "author": {
        "login": "wlynch",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add options for Rekor client, make public key fetcher configurable. (#399)",
        "length": 276,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 93,
        "additions": 72,
        "deletions": 21
      },
      "files": [
        {
          "filename": "internal/commands/root/sign.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -73,7 +73,7 @@ func commandSign(o *options, s *gsio.Streams, args ...string) error {\n \t\treturn fmt.Errorf(\"failed to read message from stdin: %w\", err)\n \t}\n \n-\trekor, err := rekor.NewClient(o.Config.Rekor)\n+\trekor, err := rekor.NewClientContext(ctx, o.Config.Rekor)\n \tif err != nil {\n \t\treturn fmt.Errorf(\"failed to create rekor client: %w\", err)\n \t}"
        },
        {
          "filename": "internal/gitsign/gitsign.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -74,7 +74,7 @@ func NewVerifierWithCosignOpts(ctx context.Context, cfg *config.Config, opts *co\n \t\treturn nil, fmt.Errorf(\"error creating Git verifier: %w\", err)\n \t}\n \n-\trekor, err := rekorinternal.NewClient(cfg.Rekor)\n+\trekor, err := rekorinternal.NewClientContext(ctx, cfg.Rekor)\n \tif err != nil {\n \t\treturn nil, fmt.Errorf(\"failed to create rekor client: %w\", err)\n \t}"
        },
        {
          "filename": "internal/rekor/client.go",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -15,11 +15,19 @@\n package rekor\n \n import (\n+\t\"context\"\n+\n \tgitrekor \"github.com/sigstore/gitsign/pkg/rekor\"\n \trekor \"github.com/sigstore/rekor/pkg/client\"\n )\n \n // NewClient returns a new Rekor client with common client options set.\n+// Deprecated: Use NewClientContext instead.\n func NewClient(url string) (*gitrekor.Client, error) {\n-\treturn gitrekor.New(url, rekor.WithUserAgent(\"gitsign\"))\n+\treturn NewClientContext(context.TODO(), url)\n+}\n+\n+// NewClientContext returns a new Rekor client with common client options set.\n+func NewClientContext(ctx context.Context, url string) (*gitrekor.Client, error) {\n+\treturn gitrekor.NewWithOptions(ctx, url, gitrekor.WithClientOption(rekor.WithUserAgent(\"gitsign\")))\n }"
        },
        {
          "filename": "pkg/rekor/option.go",
          "status": "added",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -0,0 +1,45 @@\n+//\n+// Copyright 2023 The Sigstore Authors.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package rekor\n+\n+import (\n+\t\"context\"\n+\n+\t\"github.com/sigstore/cosign/v2/pkg/cosign\"\n+\t\"github.com/sigstore/rekor/pkg/client\"\n+)\n+\n+type Option func(*options)\n+\n+type options struct {\n+\trekorPublicKeys CosignRekorKeyProvider\n+\tclientOpts      []client.Option\n+}\n+\n+// CosignRekorKeyProvider is a function that returns the Rekor public keys in cosign's specialized format.\n+type CosignRekorKeyProvider func(ctx context.Context) (*cosign.TrustedTransparencyLogPubKeys, error)\n+\n+func WithCosignRekorKeyProvider(f CosignRekorKeyProvider) Option {\n+\treturn func(o *options) {\n+\t\to.rekorPublicKeys = f\n+\t}\n+}\n+\n+func WithClientOption(opts ...client.Option) Option {\n+\treturn func(o *options) {\n+\t\to.clientOpts = opts\n+\t}\n+}"
        },
        {
          "filename": "pkg/rekor/rekor.go",
          "status": "modified",
          "additions": 16,
          "deletions": 18,
          "patch": "@@ -43,7 +43,6 @@ import (\n \thashedrekord_v001 \"github.com/sigstore/rekor/pkg/types/hashedrekord/v0.0.1\"\n \trekord_v001 \"github.com/sigstore/rekor/pkg/types/rekord/v0.0.1\"\n \t\"github.com/sigstore/sigstore/pkg/cryptoutils\"\n-\t\"github.com/sigstore/sigstore/pkg/tuf\"\n )\n \n // Verifier represents a mechanism to get and verify Rekor entries for the given Git data.\n@@ -64,12 +63,26 @@ type Client struct {\n \tpublicKeys *cosign.TrustedTransparencyLogPubKeys\n }\n \n+// Deprecated: Use NewWithOptions instead.\n func New(url string, opts ...rekor.Option) (*Client, error) {\n-\tc, err := rekor.GetRekorClient(url, opts...)\n+\treturn NewWithOptions(context.TODO(), url, WithClientOption(opts...))\n+}\n+\n+func NewWithOptions(ctx context.Context, url string, opts ...Option) (*Client, error) {\n+\t// Defaults\n+\to := &options{\n+\t\trekorPublicKeys: cosign.GetRekorPubs,\n+\t}\n+\tfor _, f := range opts {\n+\t\tf(o)\n+\t}\n+\n+\tc, err := rekor.GetRekorClient(url, o.clientOpts...)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tpubs, err := rekorPubsFromClient(c)\n+\n+\tpubs, err := o.rekorPublicKeys(ctx)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -158,21 +171,6 @@ func (c *Client) findTLogEntriesByPayloadAndPK(ctx context.Context, payload, pub\n \treturn searchIndex.GetPayload(), nil\n }\n \n-// rekorPubsFromClient returns a RekorPubKey keyed by the log ID from the Rekor client.\n-// NOTE: This **must not** be used in the verification path, but may be used in the\n-// sign path to validate return responses are consistent from Rekor.\n-func rekorPubsFromClient(rekorClient *client.Rekor) (*cosign.TrustedTransparencyLogPubKeys, error) {\n-\tpublicKeys := cosign.NewTrustedTransparencyLogPubKeys()\n-\tpubOK, err := rekorClient.Pubkey.GetPublicKey(nil)\n-\tif err != nil {\n-\t\treturn nil, fmt.Errorf(\"unable to fetch rekor public key from rekor: %w\", err)\n-\t}\n-\tif err := publicKeys.AddTransparencyLogPubKey([]byte(pubOK.Payload), tuf.Active); err != nil {\n-\t\treturn nil, fmt.Errorf(\"constructRekorPubKey: %w\", err)\n-\t}\n-\treturn &publicKeys, nil\n-}\n-\n // Verify verifies a commit using online verification.\n //\n // This is done by:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6e07836c8362d475cb303ab19abce65f41455986",
            "date": "2025-01-22T21:29:31Z",
            "author_login": "TomHennen"
          },
          {
            "sha": "62ea5c386a15fce1233ef2ead843cb52479fc9da",
            "date": "2025-01-20T07:56:14Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "f540890548e23dcd4d7def8b99f778547ee746aa",
            "date": "2025-01-19T17:02:02Z",
            "author_login": "TomHennen"
          },
          {
            "sha": "0c3605532ddb8016031182bea5590fea4ebc70e5",
            "date": "2025-01-06T08:08:12Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c328e71bec2f33160b9e9b161ff5f71023cfc42a",
            "date": "2025-01-06T08:07:46Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-347",
    "description": "Gitsign is software for keyless Git signing using Sigstore. In versions of gitsign starting with 0.6.0 and prior to 0.8.0, Rekor public keys were fetched via the Rekor API, instead of through the local TUF client. If the upstream Rekor server happened to be compromised, gitsign clients could potentially be tricked into trusting incorrect signatures. There is no known compromise the default public good instance (`rekor.sigstore.dev`) - anyone using this instance is unaffected. This issue was fixed in v0.8.0. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-11-10T22:15:14.250",
    "last_modified": "2024-11-21T08:29:49.413",
    "fix_date": "2023-11-09T22:19:56Z"
  },
  "references": [
    {
      "url": "https://docs.sigstore.dev/about/threat-model/#sigstore-threat-model",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/sigstore/gitsign/commit/cd66ccb03c86a3600955f0c15f6bfeb75f697236",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sigstore/gitsign/pull/399",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sigstore/gitsign/security/advisories/GHSA-xvrc-2wvh-49vc",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.sigstore.dev/about/threat-model/#sigstore-threat-model",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/sigstore/gitsign/commit/cd66ccb03c86a3600955f0c15f6bfeb75f697236",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sigstore/gitsign/pull/399",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sigstore/gitsign/security/advisories/GHSA-xvrc-2wvh-49vc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.249741",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "gitsign",
    "owner": "sigstore",
    "created_at": "2022-05-12T15:38:22Z",
    "updated_at": "2025-01-22T21:29:37Z",
    "pushed_at": "2025-01-22T21:29:32Z",
    "size": 1834,
    "stars": 969,
    "forks": 64,
    "open_issues": 27,
    "watchers": 969,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 292273,
      "Makefile": 1594,
      "Shell": 936
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:09:40.777730"
  }
}