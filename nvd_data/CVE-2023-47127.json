{
  "cve_id": "CVE-2023-47127",
  "github_data": {
    "repository": "TYPO3/typo3",
    "fix_commit": "535dfbdc54fd5362e0bc08d911db44eac7f64019",
    "related_commits": [
      "535dfbdc54fd5362e0bc08d911db44eac7f64019",
      "535dfbdc54fd5362e0bc08d911db44eac7f64019"
    ],
    "patch_url": "https://github.com/TYPO3/typo3/commit/535dfbdc54fd5362e0bc08d911db44eac7f64019.patch",
    "fix_commit_details": {
      "sha": "535dfbdc54fd5362e0bc08d911db44eac7f64019",
      "commit_date": "2023-11-14T08:58:00Z",
      "author": {
        "login": "bnf",
        "type": "User",
        "stats": {
          "total_commits": 531,
          "average_weekly_commits": 0.47751798561151076,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 170
        }
      },
      "commit_message": {
        "title": "[SECURITY] Limit user session to cookie domain",
        "length": 1114,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 273,
        "additions": 210,
        "deletions": 63
      },
      "files": [
        {
          "filename": "typo3/sysext/core/Classes/Http/CookieScope.php",
          "status": "added",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -0,0 +1,27 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of the TYPO3 CMS project.\n+ *\n+ * It is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU General Public License, either version 2\n+ * of the License, or any later version.\n+ *\n+ * For the full copyright and license information, please read the\n+ * LICENSE.txt file that was distributed with this source code.\n+ *\n+ * The TYPO3 project - inspiring people to share!\n+ */\n+\n+namespace TYPO3\\CMS\\Core\\Http;\n+\n+final class CookieScope\n+{\n+    public function __construct(\n+        public readonly string $domain,\n+        public readonly bool $hostOnly,\n+        public readonly string $path,\n+    ) {}\n+}"
        },
        {
          "filename": "typo3/sysext/core/Classes/Http/CookieScopeTrait.php",
          "status": "added",
          "additions": 72,
          "deletions": 0,
          "patch": "@@ -0,0 +1,72 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of the TYPO3 CMS project.\n+ *\n+ * It is free software; you can redistribute it and/or modify it under\n+ * the terms of the GNU General Public License, either version 2\n+ * of the License, or any later version.\n+ *\n+ * For the full copyright and license information, please read the\n+ * LICENSE.txt file that was distributed with this source code.\n+ *\n+ * The TYPO3 project - inspiring people to share!\n+ */\n+\n+namespace TYPO3\\CMS\\Core\\Http;\n+\n+trait CookieScopeTrait\n+{\n+    /**\n+     * Returns the domain and path to be used for setting cookies.\n+     * The information is taken from the value in $GLOBALS['TYPO3_CONF_VARS']['SYS']['cookieDomain'] if set,\n+     * otherwise the normalized request params are used.\n+     */\n+    private function getCookieScope(NormalizedParams $normalizedParams): CookieScope\n+    {\n+        $cookieDomain = $GLOBALS['TYPO3_CONF_VARS']['SYS']['cookieDomain'] ?? '';\n+        // If a specific cookie domain is defined for a given application type, use that domain\n+        if (!empty($GLOBALS['TYPO3_CONF_VARS'][$this->loginType]['cookieDomain'])) {\n+            $cookieDomain = $GLOBALS['TYPO3_CONF_VARS'][$this->loginType]['cookieDomain'];\n+        }\n+        if (!$cookieDomain) {\n+            return new CookieScope(\n+                domain: $normalizedParams->getRequestHostOnly(),\n+                hostOnly: true,\n+                // If no cookie domain is set, use the base path\n+                path: $normalizedParams->getSitePath(),\n+            );\n+        }\n+        if ($cookieDomain[0] === '/') {\n+            $match = [];\n+            $matchCount = @preg_match($cookieDomain, $normalizedParams->getRequestHostOnly(), $match);\n+            if ($matchCount === false) {\n+                $this->logger->critical(\n+                    'The regular expression for the cookie domain ({domain}) contains errors. The session is not shared across sub-domains.',\n+                    ['domain' => $cookieDomain]\n+                );\n+            }\n+            if ($matchCount === false || $matchCount === 0) {\n+                return new CookieScope(\n+                    domain: $normalizedParams->getRequestHostOnly(),\n+                    hostOnly: true,\n+                    // If no cookie domain could be matched, use the base path\n+                    path: $normalizedParams->getSitePath(),\n+                );\n+            }\n+            $cookieDomain = $match[0];\n+        }\n+\n+        return new CookieScope(\n+            // Normalize cookie domain by removing leading and trailing dots,\n+            // see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.2.3\n+            // > Note that a leading %x2E (\".\"), if present, is ignored even though that character is not permitted,\n+            // > but a trailing %x2E (\".\"), if present, will cause the user agent to ignore the attribute.\n+            domain: trim($cookieDomain, '.'),\n+            hostOnly: false,\n+            path: '/',\n+        );\n+    }\n+}"
        },
        {
          "filename": "typo3/sysext/core/Classes/Http/SetCookieService.php",
          "status": "modified",
          "additions": 15,
          "deletions": 45,
          "patch": "@@ -32,6 +32,7 @@\n class SetCookieService\n {\n     use CookieHeaderTrait;\n+    use CookieScopeTrait;\n \n     protected readonly LoggerInterface $logger;\n \n@@ -65,9 +66,7 @@ public function setSessionCookie(UserSession $userSession, NormalizedParams $nor\n         $isRefreshTimeBasedCookie = $this->isRefreshTimeBasedCookie($userSession);\n         if ($this->isSetSessionCookie($userSession) || $isRefreshTimeBasedCookie) {\n             // Get the domain to be used for the cookie (if any):\n-            $cookieDomain = $this->getCookieDomain($normalizedParams);\n-            // If no cookie domain is set, use the base path:\n-            $cookiePath = $cookieDomain ? '/' : $normalizedParams->getSitePath();\n+            $cookieScope = $this->getCookieScope($normalizedParams);\n             // If the cookie lifetime is set, use it:\n             $cookieExpire = $isRefreshTimeBasedCookie ? $GLOBALS['EXEC_TIME'] + $this->lifetime : 0;\n             // Valid options are \"strict\", \"lax\" or \"none\", whereas \"none\" only works in HTTPS requests (default & fallback is \"strict\")\n@@ -78,13 +77,19 @@ public function setSessionCookie(UserSession $userSession, NormalizedParams $nor\n             // SameSite \"none\" needs the secure option (only allowed on HTTPS)\n             $isSecure = $cookieSameSite === Cookie::SAMESITE_NONE || $normalizedParams->isHttps();\n             $sessionId = $userSession->getIdentifier();\n-            $cookieValue = $userSession->getJwt();\n+            $cookieValue = $userSession->getJwt($cookieScope);\n             $setCookie = new Cookie(\n                 $this->name,\n                 $cookieValue,\n                 $cookieExpire,\n-                $cookiePath,\n-                $cookieDomain,\n+                $cookieScope->path,\n+                // Host-Only cookies need to be provided without an explicit domain,\n+                // see https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.2.3\n+                // and https://datatracker.ietf.org/doc/html/rfc6265#section-5.3\n+                // | * If the value of the Domain attribute is \"example.com\", the user agent will include the cookie\n+                // |   in the Cookie header when making HTTP requests to example.com, www.example.com, and www.corp.example.com\n+                // | * If the server omits the Domain attribute, the user agent will return the cookie only to the origin server.\n+                $cookieScope->hostOnly ? null : $cookieScope->domain,\n                 $isSecure,\n                 true,\n                 false,\n@@ -93,45 +98,12 @@ public function setSessionCookie(UserSession $userSession, NormalizedParams $nor\n             $message = $isRefreshTimeBasedCookie ? 'Updated Cookie: {session}, {domain}' : 'Set Cookie: {session}, {domain}';\n             $this->logger->debug($message, [\n                 'session' => sha1($sessionId),\n-                'domain' => $cookieDomain,\n+                'domain' => $cookieScope->domain,\n             ]);\n         }\n         return $setCookie;\n     }\n \n-    /**\n-     * Gets the domain to be used on setting cookies.\n-     * The information is taken from the value in $GLOBALS['TYPO3_CONF_VARS']['SYS']['cookieDomain'].\n-     *\n-     * @return string The domain to be used on setting cookies\n-     */\n-    protected function getCookieDomain(NormalizedParams $normalizedParams): string\n-    {\n-        $result = '';\n-        $cookieDomain = $GLOBALS['TYPO3_CONF_VARS']['SYS']['cookieDomain'] ?? '';\n-        // If a specific cookie domain is defined for a given application type, use that domain\n-        if (!empty($GLOBALS['TYPO3_CONF_VARS'][$this->loginType]['cookieDomain'])) {\n-            $cookieDomain = $GLOBALS['TYPO3_CONF_VARS'][$this->loginType]['cookieDomain'];\n-        }\n-        if ($cookieDomain) {\n-            if ($cookieDomain[0] === '/') {\n-                $match = [];\n-                $matchCnt = @preg_match($cookieDomain, $normalizedParams->getRequestHostOnly(), $match);\n-                if ($matchCnt === false) {\n-                    $this->logger->critical(\n-                        'The regular expression for the cookie domain ({domain}) contains errors. The session is not shared across sub-domains.',\n-                        ['domain' => $cookieDomain]\n-                    );\n-                } elseif ($matchCnt) {\n-                    $result = $match[0];\n-                }\n-            } else {\n-                $result = $cookieDomain;\n-            }\n-        }\n-        return $result;\n-    }\n-\n     /**\n      * Determine whether a session cookie needs to be set (lifetime=0)\n      */\n@@ -180,15 +152,13 @@ public function isCookieSet(?ServerRequestInterface $request, ?UserSession $user\n      */\n     public function removeCookie(NormalizedParams $normalizedParams): Cookie\n     {\n-        $cookieDomain = $this->getCookieDomain($normalizedParams);\n-        // If no cookie domain is set, use the base path\n-        $cookiePath = $cookieDomain ? '/' : $normalizedParams->getSitePath();\n+        $scope = $this->getCookieScope($normalizedParams);\n         return new Cookie(\n             $this->name,\n             '',\n             -1,\n-            $cookiePath,\n-            $cookieDomain\n+            $scope->path,\n+            $scope->domain\n         );\n     }\n }"
        },
        {
          "filename": "typo3/sysext/core/Classes/Session/UserSession.php",
          "status": "modified",
          "additions": 30,
          "deletions": 5,
          "patch": "@@ -17,7 +17,10 @@\n \n namespace TYPO3\\CMS\\Core\\Session;\n \n+use TYPO3\\CMS\\Core\\Http\\CookieScope;\n+use TYPO3\\CMS\\Core\\Log\\LogManager;\n use TYPO3\\CMS\\Core\\Security\\JwtTrait;\n+use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n \n /**\n  * Represents all information about a user's session.\n@@ -195,17 +198,19 @@ public function needsUpdate(): bool\n \n     /**\n      * Gets session ID wrapped in JWT to be used for emitting a new cookie.\n-     * `Cookie: <JWT(HS256, [identifier => <session-id>], <signature>)>`\n+     * `Cookie: <JWT(HS256, [identifier => <session-id>], <signature(encryption-key, cookie-domain)>)>`\n      *\n+     * @param ?CookieScope $scope\n      * @return string the session ID wrapped in JWT to be used for emitting a new cookie\n      */\n-    public function getJwt(): string\n+    public function getJwt(?CookieScope $scope = null): string\n     {\n         // @todo payload could be organized in a new `SessionToken` object\n         return self::encodeHashSignedJwt(\n             [\n                 'identifier' => $this->identifier,\n                 'time' => (new \\DateTimeImmutable())->format(\\DateTimeImmutable::RFC3339),\n+                'scope' => $scope,\n             ],\n             self::createSigningKeyFromEncryptionKey(UserSession::class)\n         );\n@@ -246,20 +251,40 @@ public static function createNonFixated(string $identifier): self\n \n     /**\n      * Verifies and resolves the session ID from a submitted cookie value:\n-     * `Cookie: <JWT(HS256, [identifier => <session-id>], <signature>)>`\n+     * `Cookie: <JWT(HS256, [identifier => <session-id>], <signature(encryption-key, cookie-domain)>)>`\n      *\n      * @param string $cookieValue submitted cookie value\n+     * @param CookieScope $scope\n      * @return non-empty-string|null session ID, null in case verification failed\n      * @throws \\Exception\n      * @see getJwt()\n      */\n-    public static function resolveIdentifierFromJwt(string $cookieValue): ?string\n+    public static function resolveIdentifierFromJwt(string $cookieValue, CookieScope $scope): ?string\n     {\n         if ($cookieValue === '') {\n             return null;\n         }\n+\n         $payload = self::decodeJwt($cookieValue, self::createSigningKeyFromEncryptionKey(UserSession::class));\n-        return !empty($payload->identifier) && is_string($payload->identifier) ? $payload->identifier : null;\n+\n+        $identifier = !empty($payload->identifier) && is_string($payload->identifier) ? $payload->identifier : null;\n+        if ($identifier === null) {\n+            return null;\n+        }\n+\n+        $domainScope = (string)($payload->scope->domain ?? '');\n+        $pathScope = (string)($payload->scope->path ?? '');\n+        if ($domainScope === '' || $pathScope === '') {\n+            $logger = GeneralUtility::makeInstance(LogManager::class)->getLogger(self::class);\n+            $logger->notice('A session cookie with out a domain scope has been used', ['cookieHash' => substr(sha1($cookieValue), 0, 12)]);\n+            return $identifier;\n+        }\n+        if ($domainScope !== $scope->domain || $pathScope !== $scope->path) {\n+            // invalid scope, the cookie jwt has been used on a wrong path or domain\n+            return null;\n+        }\n+\n+        return $identifier;\n     }\n \n     /**"
        },
        {
          "filename": "typo3/sysext/core/Classes/Session/UserSessionManager.php",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -22,6 +22,7 @@\n use Psr\\Log\\LoggerAwareTrait;\n use TYPO3\\CMS\\Core\\Authentication\\IpLocker;\n use TYPO3\\CMS\\Core\\Crypto\\Random;\n+use TYPO3\\CMS\\Core\\Http\\CookieScopeTrait;\n use TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotFoundException;\n use TYPO3\\CMS\\Core\\Session\\Backend\\SessionBackendInterface;\n use TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n@@ -43,6 +44,7 @@\n class UserSessionManager implements LoggerAwareInterface\n {\n     use LoggerAwareTrait;\n+    use CookieScopeTrait;\n \n     protected const SESSION_ID_LENGTH = 32;\n     protected const GARBAGE_COLLECTION_LIFETIME = 86400;\n@@ -59,17 +61,19 @@ class UserSessionManager implements LoggerAwareInterface\n     protected int $garbageCollectionForAnonymousSessions = self::LIFETIME_OF_ANONYMOUS_SESSION_DATA;\n     protected SessionBackendInterface $sessionBackend;\n     protected IpLocker $ipLocker;\n+    protected string $loginType;\n \n     /**\n      * Constructor. Marked as internal, as it is recommended to use the factory method \"create\"\n      *\n      * @internal it is recommended to use the factory method \"create\"\n      */\n-    public function __construct(SessionBackendInterface $sessionBackend, int $sessionLifetime, IpLocker $ipLocker)\n+    public function __construct(SessionBackendInterface $sessionBackend, int $sessionLifetime, IpLocker $ipLocker, string $loginType)\n     {\n         $this->sessionBackend = $sessionBackend;\n         $this->sessionLifetime = $sessionLifetime;\n         $this->ipLocker = $ipLocker;\n+        $this->loginType = $loginType;\n     }\n \n     protected function setGarbageCollectionTimeoutForAnonymousSessions(int $garbageCollectionForAnonymousSessions = 0): void\n@@ -91,7 +95,8 @@ public function createFromRequestOrAnonymous(ServerRequestInterface $request, st\n     {\n         try {\n             $cookieValue = (string)($request->getCookieParams()[$cookieName] ?? '');\n-            $sessionId = UserSession::resolveIdentifierFromJwt($cookieValue);\n+            $scope = $this->getCookieScope($request->getAttribute('normalizedParams'));\n+            $sessionId = UserSession::resolveIdentifierFromJwt($cookieValue, $scope);\n         } catch (\\Exception $exception) {\n             $this->logger->debug('Could not resolve session identifier from JWT', ['exception' => $exception]);\n         }\n@@ -354,7 +359,8 @@ public static function create(string $loginType, int $sessionLifetime = null, Se\n             self::class,\n             $sessionManager->getSessionBackend($loginType),\n             $sessionLifetime,\n-            $ipLocker\n+            $ipLocker,\n+            $loginType\n         );\n         if ($loginType === 'FE') {\n             $object->setGarbageCollectionTimeoutForAnonymousSessions((int)($GLOBALS['TYPO3_CONF_VARS']['FE']['sessionDataLifetime'] ?? 0));"
        },
        {
          "filename": "typo3/sysext/core/Tests/Unit/Authentication/BackendUserAuthenticationTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -80,7 +80,8 @@ public function logoffCleansFormProtectionIfBackendUserIsLoggedIn(): void\n         $userSessionManager = new UserSessionManager(\n             $sessionBackendMock,\n             86400,\n-            new IpLocker(0, 0)\n+            new IpLocker(0, 0),\n+            'BE'\n         );\n \n         $GLOBALS['BE_USER'] = $this->getMockBuilder(BackendUserAuthentication::class)->getMock();"
        },
        {
          "filename": "typo3/sysext/core/Tests/Unit/Session/UserSessionManagerTest.php",
          "status": "modified",
          "additions": 33,
          "deletions": 6,
          "patch": "@@ -20,6 +20,7 @@\n use Psr\\Http\\Message\\ServerRequestInterface;\n use Psr\\Log\\NullLogger;\n use TYPO3\\CMS\\Core\\Authentication\\IpLocker;\n+use TYPO3\\CMS\\Core\\Http\\NormalizedParams;\n use TYPO3\\CMS\\Core\\Security\\JwtTrait;\n use TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotFoundException;\n use TYPO3\\CMS\\Core\\Session\\Backend\\SessionBackendInterface;\n@@ -62,7 +63,8 @@ public function willExpireWillExpire(int $sessionLifetime, int $gracePeriod, boo\n         $subject = new UserSessionManager(\n             $sessionBackendMock,\n             $sessionLifetime,\n-            new IpLocker(0, 0)\n+            new IpLocker(0, 0),\n+            'FE'\n         );\n         $session = $subject->createAnonymousSession();\n         self::assertEquals($expectedResult, $subject->willExpire($session, $gracePeriod));\n@@ -75,7 +77,8 @@ public function hasExpiredIsCalculatedCorrectly(): void\n         $subject = new UserSessionManager(\n             $sessionBackendMock,\n             60,\n-            new IpLocker(0, 0)\n+            new IpLocker(0, 0),\n+            'FE'\n         );\n         $expiredSession = UserSession::createFromRecord('random-string', ['ses_tstamp' => time() - 500]);\n         self::assertTrue($subject->hasExpired($expiredSession));\n@@ -100,17 +103,31 @@ public function createFromRequestOrAnonymousCreatesProperSessionObjectForValidSe\n         $subject = new UserSessionManager(\n             $sessionBackendMock,\n             50,\n-            new IpLocker(0, 0)\n+            new IpLocker(0, 0),\n+            'FE'\n         );\n         $subject->setLogger(new NullLogger());\n+        $cookieDomain = 'example.org';\n         $validSessionJwt = self::encodeHashSignedJwt(\n             [\n                 'identifier' => 'valid-session',\n                 'time' => (new \\DateTimeImmutable())->format(\\DateTimeImmutable::RFC3339),\n+                'scope' => [\n+                    'domain' => $cookieDomain,\n+                    'path' => '/',\n+                ],\n             ],\n             self::createSigningKeyFromEncryptionKey(UserSession::class)\n         );\n+\n+        $normalizedParams = $this->createMock(NormalizedParams::class);\n+        $normalizedParams->method('getRequestHostOnly')->willReturn($cookieDomain);\n+        $normalizedParams->method('getSitePath')->willReturn('/');\n         $request = $this->createMock(ServerRequestInterface::class);\n+        $request->method('getAttribute')->willReturnCallback(static fn(string $name): mixed => match ($name) {\n+            'normalizedParams' => $normalizedParams,\n+            default => null,\n+        });\n         $request->method('getCookieParams')->willReturn(['bar' => $validSessionJwt]);\n         $persistedSession = $subject->createFromRequestOrAnonymous($request, 'bar');\n         self::assertEquals(13, $persistedSession->getUserId());\n@@ -134,11 +151,19 @@ public function createFromRequestOrAnonymousCreatesProperSessionObjectForInvalid\n         $subject = new UserSessionManager(\n             $sessionBackendMock,\n             50,\n-            new IpLocker(0, 0)\n+            new IpLocker(0, 0),\n+            'FE'\n         );\n         $subject->setLogger(new NullLogger());\n \n+        $cookieDomain = 'example.org';\n+        $normalizedParams = $this->createMock(NormalizedParams::class);\n+        $normalizedParams->method('getRequestHostOnly')->willReturn($cookieDomain);\n         $request = $this->createMock(ServerRequestInterface::class);\n+        $request->method('getAttribute')->willReturnCallback(static fn(string $name): mixed => match ($name) {\n+            'normalizedParams' => $normalizedParams,\n+            default => null,\n+        });\n         $request->method('getCookieParams')->willReturnOnConsecutiveCalls([], ['foo' => 'invalid-session']);\n         $anonymousSession = $subject->createFromRequestOrAnonymous($request, 'foo');\n         self::assertTrue($anonymousSession->isNew());\n@@ -165,7 +190,8 @@ public function updateSessionWillSetLastUpdated(): void\n         $subject = new UserSessionManager(\n             $sessionBackendMock,\n             60,\n-            new IpLocker(0, 0)\n+            new IpLocker(0, 0),\n+            'FE'\n         );\n         $session = UserSession::createFromRecord('random-string', ['ses_tstamp' => time() - 500]);\n         $session = $subject->updateSession($session);\n@@ -188,7 +214,8 @@ public function fixateAnonymousSessionWillUpdateSessionObject(): void\n         $subject = new UserSessionManager(\n             $sessionBackendMock,\n             60,\n-            new IpLocker(0, 0)\n+            new IpLocker(0, 0),\n+            'FE'\n         );\n         $session = UserSession::createFromRecord('random-string', ['ses_tstamp' => time() - 500]);\n         $session = $subject->fixateAnonymousSession($session);"
        },
        {
          "filename": "typo3/sysext/core/Tests/Unit/Session/UserSessionTest.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -17,6 +17,7 @@\n \n namespace TYPO3\\CMS\\Core\\Tests\\Unit\\Session;\n \n+use TYPO3\\CMS\\Core\\Http\\CookieScope;\n use TYPO3\\CMS\\Core\\Security\\JwtTrait;\n use TYPO3\\CMS\\Core\\Session\\UserSession;\n use TYPO3\\TestingFramework\\Core\\Unit\\UnitTestCase;\n@@ -38,6 +39,7 @@ public function createFromRecordTest(): void\n             'ses_tstamp' => 1607041477,\n             'ses_permanent' => 1,\n         ];\n+        $scope = new CookieScope(domain: 'example.com', hostOnly: true, path: '/');\n \n         $session = UserSession::createFromRecord($record['ses_id'], $record, true);\n \n@@ -61,7 +63,7 @@ public function createFromRecordTest(): void\n \n         self::assertTrue($session->dataWasUpdated());\n         self::assertEquals(['override' => 'data'], $session->getData());\n-        self::assertSame($record['ses_id'], UserSession::resolveIdentifierFromJwt($session->getJwt()));\n+        self::assertSame($record['ses_id'], UserSession::resolveIdentifierFromJwt($session->getJwt($scope), $scope) ?? '');\n     }\n \n     /**"
        },
        {
          "filename": "typo3/sysext/frontend/Tests/Functional/Authentication/FrontendUserAuthenticationTest.php",
          "status": "modified",
          "additions": 19,
          "deletions": 2,
          "patch": "@@ -19,6 +19,9 @@\n \n use GuzzleHttp\\Cookie\\SetCookie;\n use Psr\\Log\\NullLogger;\n+use TYPO3\\CMS\\Core\\Core\\Environment;\n+use TYPO3\\CMS\\Core\\Http\\NormalizedParams;\n+use TYPO3\\CMS\\Core\\Http\\ServerRequest;\n use TYPO3\\CMS\\Core\\Security\\Nonce;\n use TYPO3\\CMS\\Core\\Security\\RequestToken;\n use TYPO3\\CMS\\Core\\Tests\\Functional\\SiteHandling\\SiteBasedTestTrait;\n@@ -64,6 +67,19 @@ public function canCreateNewAndExistingSessionWithValidRequestToken(): void\n     {\n         $this->importCSVDataSet(__DIR__ . '/Fixtures/fe_users.csv');\n \n+        $normalizedParams = new NormalizedParams(\n+            [\n+                'REQUEST_URI' => '/',\n+                'HTTP_HOST' => 'localhost',\n+                'DOCUMENT_ROOT' => Environment::getPublicPath(),\n+                'SCRIPT_FILENAME' => Environment::getPublicPath() . '/index.php',\n+                'SCRIPT_NAME' => '/index.php',\n+            ],\n+            $GLOBALS['TYPO3_CONF_VARS']['SYS'],\n+            Environment::getPublicPath() . '/index.php',\n+            Environment::getPublicPath()\n+        );\n+\n         $nonce = Nonce::create();\n         $requestToken = RequestToken::create('core/user-auth/fe')->toHashSignedJwt($nonce);\n         $request = (new InternalRequest())\n@@ -77,6 +93,7 @@ public function canCreateNewAndExistingSessionWithValidRequestToken(): void\n                     '__RequestToken' => $requestToken,\n                 ]\n             )\n+            ->withAttribute('normalizedParams', $normalizedParams)\n             ->withCookieParams([123 => 'bogus', 'typo3nonce_' . $nonce->getSigningIdentifier()->name => $nonce->toHashSignedJwt()]);\n \n         $response = $this->executeFrontendSubRequest($request);\n@@ -86,8 +103,8 @@ public function canCreateNewAndExistingSessionWithValidRequestToken(): void\n \n         // Now check whether the existing session is retrieved by providing the retrieved JWT token in the cookie params.\n         $cookie = SetCookie::fromString($response->getHeaderLine('Set-Cookie'));\n-        $request = (new InternalRequest())\n-            ->withPageId(self::ROOT_PAGE_ID)\n+        $request = (new ServerRequest('http://localhost/'))\n+            ->withAttribute('normalizedParams', $normalizedParams)\n             ->withCookieParams([$cookie->getName() => $cookie->getValue()]);\n \n         $frontendUserAuthentication = new FrontendUserAuthentication();"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c2460f9507bcb11bbe22765f50501f0177c9eb23",
            "date": "2024-08-28T09:13:49Z",
            "author_login": "wouter90"
          },
          {
            "sha": "1bd1923ef7fb3290e9e8303a2a30bc34c1dc83f6",
            "date": "2025-01-14T13:29:37Z",
            "author_login": "lolli42"
          },
          {
            "sha": "18d54b5c8fdf9c1363e80ed293076e7301f197c2",
            "date": "2025-01-14T09:47:45Z",
            "author_login": "benjaminkott"
          },
          {
            "sha": "79cfe3b6fa8e5efa614665439929f441df4c23c9",
            "date": "2024-12-04T11:32:49Z",
            "author_login": "benjaminkott"
          },
          {
            "sha": "d4b980a6f78234df24ecd47381f9a23006c6d843",
            "date": "2024-11-22T15:25:33Z",
            "author_login": "bmack"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-302",
    "description": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. In typo3 installations there are always at least two different sites. Eg. first.example.org and second.example.com. In affected versions a session cookie generated for the first site can be reused on the second site without requiring additional authentication. This vulnerability has been addressed in versions 8.7.55, 9.5.44, 10.4.41, 11.5.33, and 12.4.8. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-11-14T20:15:08.230",
    "last_modified": "2024-11-21T08:29:50.073",
    "fix_date": "2023-11-14T08:58:00Z"
  },
  "references": [
    {
      "url": "https://github.com/TYPO3/typo3/commit/535dfbdc54fd5362e0bc08d911db44eac7f64019",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-3vmm-7h4j-69rm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-006",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/commit/535dfbdc54fd5362e0bc08d911db44eac7f64019",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-3vmm-7h4j-69rm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://typo3.org/security/advisory/typo3-core-sa-2023-006",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.257242",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "typo3",
    "owner": "TYPO3",
    "created_at": "2011-03-02T10:02:23Z",
    "updated_at": "2025-01-14T11:43:28Z",
    "pushed_at": "2025-01-14T12:27:55Z",
    "size": 598075,
    "stars": 1068,
    "forks": 674,
    "open_issues": 5,
    "watchers": 1068,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 34380148,
      "TypeScript": 2495477,
      "HTML": 1939183,
      "CSS": 573865,
      "SCSS": 460567,
      "JavaScript": 414810,
      "Shell": 94213,
      "XSLT": 6781,
      "Batchfile": 412
    },
    "commit_activity": {
      "total_commits_last_year": 2075,
      "avg_commits_per_week": 39.90384615384615,
      "days_active_last_year": 334
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:14:13.729873"
  }
}