{
  "cve_id": "CVE-2023-4736",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "816fbcc262687b81fc46f82f7bbeb1453addfe0c",
    "related_commits": [
      "816fbcc262687b81fc46f82f7bbeb1453addfe0c",
      "816fbcc262687b81fc46f82f7bbeb1453addfe0c"
    ],
    "patch_url": "https://github.com/vim/vim/commit/816fbcc262687b81fc46f82f7bbeb1453addfe0c.patch",
    "fix_commit_details": {
      "sha": "816fbcc262687b81fc46f82f7bbeb1453addfe0c",
      "commit_date": "2023-08-31T21:52:30Z",
      "author": {
        "login": "chrisbra",
        "type": "User",
        "stats": {
          "total_commits": 628,
          "average_weekly_commits": 0.5841860465116279,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 114
        }
      },
      "commit_message": {
        "title": "patch 9.0.1833: [security] runtime file fixes",
        "length": 932,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 88,
        "additions": 56,
        "deletions": 32
      },
      "files": [
        {
          "filename": "runtime/autoload/gzip.vim",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -10,12 +10,17 @@\n fun s:check(cmd)\n   let name = substitute(a:cmd, '\\(\\S*\\).*', '\\1', '')\n   if !exists(\"s:have_\" . name)\n+    \" safety check, don't execute anything from the current directory\n+    let f = fnamemodify(exepath(name), \":p:h\") !=# getcwd()\n+    if !f\n+      echoerr \"Warning: NOT executing \" .. name .. \" from current directory!\"\n+    endif\n     let e = executable(name)\n     if e < 0\n       let r = system(name . \" --version\")\n       let e = (r !~ \"not found\" && r != \"\")\n     endif\n-    exe \"let s:have_\" . name . \"=\" . e\n+    exe \"let s:have_\" . name . \"=\" . (e && f)\n   endif\n   exe \"return s:have_\" . name\n endfun"
        },
        {
          "filename": "runtime/autoload/zip.vim",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -57,6 +57,10 @@ if !exists(\"g:zip_extractcmd\")\n  let g:zip_extractcmd= g:zip_unzipcmd\n endif\n \n+if fnamemodify(exepath(g:zip_unzipcmd), \":p:h\") ==# getcwd()\n+ echoerr \"Warning: NOT executing \" .. g:zip_unzipcmd .. \" from current directory!\"\n+ finish\n+endif\n \" ----------------\n \"  Functions: {{{1\n \" ----------------"
        },
        {
          "filename": "runtime/ftplugin/perl.vim",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -54,7 +54,8 @@ endif\n \n \" Set this once, globally.\n if !exists(\"perlpath\")\n-    if executable(\"perl\")\n+    \" safety check: don't execute perl from current directory\n+    if executable(\"perl\") && fnamemodify(exepath(\"perl\"), \":p:h\") != getcwd()\n       try\n \tif &shellxquote != '\"'\n \t    let perlpath = system('perl -e \"print join(q/,/,@INC)\"')"
        },
        {
          "filename": "runtime/ftplugin/ruby.vim",
          "status": "modified",
          "additions": 39,
          "deletions": 29,
          "patch": "@@ -99,41 +99,51 @@ function! s:build_path(path) abort\n   return path\n endfunction\n \n-if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))\n-  let s:version_file = findfile('.ruby-version', '.;')\n-  if !empty(s:version_file) && filereadable(s:version_file)\n-    let b:ruby_version = get(readfile(s:version_file, '', 1), '')\n-    if !has_key(g:ruby_version_paths, b:ruby_version)\n-      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))\n+let s:execute_ruby = 1\n+\" Security Check, don't execute ruby from the current directory\n+if fnamemodify(exepath(\"ruby\"), \":p:h\") ==# getcwd()\n+  let s:execute_ruby = 0\n+endif\n+\n+function SetRubyPath()\n+  if !exists('b:ruby_version') && !exists('g:ruby_path') && isdirectory(expand('%:p:h'))\n+    let s:version_file = findfile('.ruby-version', '.;')\n+    if !empty(s:version_file) && filereadable(s:version_file) && s:execute_ruby\n+      let b:ruby_version = get(readfile(s:version_file, '', 1), '')\n+      if !has_key(g:ruby_version_paths, b:ruby_version)\n+\tlet g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))\n+      endif\n     endif\n   endif\n-endif\n \n-if exists(\"g:ruby_path\")\n-  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path\n-elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', ''))\n-  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]\n-  let s:ruby_path = s:build_path(s:ruby_paths)\n-else\n-  if !exists('g:ruby_default_path')\n-    if has(\"ruby\") && has(\"win32\")\n-      ruby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )\n-    elseif executable('ruby') && !empty($HOME)\n-      let g:ruby_default_path = s:query_path($HOME)\n-    else\n-      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')\n+  if exists(\"g:ruby_path\")\n+    let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path\n+  elseif has_key(g:ruby_version_paths, get(b:, 'ruby_version', '')) && s:execute_ruby\n+    let s:ruby_paths = g:ruby_version_paths[b:ruby_version]\n+    let s:ruby_path = s:build_path(s:ruby_paths)\n+  else\n+    if !exists('g:ruby_default_path')\n+      if has(\"ruby\") && has(\"win32\")\n+\truby ::VIM::command( 'let g:ruby_default_path = split(\"%s\",\",\")' % $:.join(%q{,}) )\n+      elseif executable('ruby') && !empty($HOME) && s:execute_ruby\n+\tlet g:ruby_default_path = s:query_path($HOME)\n+      else\n+\tlet g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# \".\" ? \"\" : v:val')\n+      endif\n     endif\n+    let s:ruby_paths = g:ruby_default_path\n+    let s:ruby_path = s:build_path(s:ruby_paths)\n   endif\n-  let s:ruby_paths = g:ruby_default_path\n-  let s:ruby_path = s:build_path(s:ruby_paths)\n-endif\n \n-if stridx(&l:path, s:ruby_path) == -1\n-  let &l:path = s:ruby_path\n-endif\n-if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1\n-  let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')\n-endif\n+  if stridx(&l:path, s:ruby_path) == -1\n+    let &l:path = s:ruby_path\n+  endif\n+  if exists('s:ruby_paths') && stridx(&l:tags, join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')) == -1\n+    let &l:tags = &tags . ',' . join(map(copy(s:ruby_paths),'v:val.\"/tags\"'),',')\n+  endif\n+endfunction\n+\n+call SetRubyPath()\n \n if (has(\"gui_win32\") || has(\"gui_gtk\")) && !exists(\"b:browsefilter\")\n   let b:browsefilter = \"Ruby Source Files (*.rb)\\t*.rb\\n\" ."
        },
        {
          "filename": "runtime/ftplugin/zig.vim",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -39,7 +39,9 @@ endif\n \n let &l:define='\\v(<fn>|<const>|<var>|^\\s*\\#\\s*define)'\n \n-if !exists('g:zig_std_dir') && exists('*json_decode') && executable('zig')\n+\" Safety check: don't execute zip from current directory\n+if !exists('g:zig_std_dir') && exists('*json_decode') &&\n+    \\  executable('zig') && fnamemodify(exepath(\"zig\"), \":p:h\") != getcwd()\n     silent let s:env = system('zig env')\n     if v:shell_error == 0\n         let g:zig_std_dir = json_decode(s:env)['std_dir']"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -699,6 +699,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    1833,\n /**/\n     1832,\n /**/"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "30377e0fe084496911e108cbb33c84cf075e6e33",
            "date": "2025-01-13T07:23:24Z",
            "author_login": "denilsonsa"
          },
          {
            "sha": "221c53202da1e9a2a30d081a46eacdeb220be443",
            "date": "2025-01-13T06:54:33Z",
            "author_login": "dkearns"
          },
          {
            "sha": "8e92db4ea22f010d402df9d34071022a4aa8cef5",
            "date": "2025-01-13T06:30:11Z",
            "author_login": "yegappan"
          },
          {
            "sha": "3a0cc36c69744a7727ce34311d39d2d9d8ddc6f9",
            "date": "2025-01-13T06:27:43Z",
            "author_login": "zeertzjq"
          },
          {
            "sha": "c200f53cbb03fa11e489a27791d5b9dfc34a6564",
            "date": "2025-01-12T19:02:04Z",
            "author_login": "Konfekt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-426",
    "description": "Untrusted Search Path in GitHub repository vim/vim prior to 9.0.1833.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-09-02T19:15:44.863",
    "last_modified": "2024-11-21T08:35:51.780",
    "fix_date": "2023-08-31T21:52:30Z"
  },
  "references": [
    {
      "url": "http://seclists.org/fulldisclosure/2023/Oct/24",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/816fbcc262687b81fc46f82f7bbeb1453addfe0c",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/e1ce0995-4df4-4dec-9cd7-3136ac3e8e71",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213984",
      "source": "security@huntr.dev",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2023/Oct/24",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/816fbcc262687b81fc46f82f7bbeb1453addfe0c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/e1ce0995-4df4-4dec-9cd7-3136ac3e8e71",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213984",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:06.505326",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}