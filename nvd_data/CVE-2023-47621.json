{
  "cve_id": "CVE-2023-47621",
  "github_data": {
    "repository": "duncanmcclean/guest-entries",
    "fix_commit": "a8e17b4413bfbbc337a887761a6c858ef1ddb4da",
    "related_commits": [
      "a8e17b4413bfbbc337a887761a6c858ef1ddb4da",
      "a8e17b4413bfbbc337a887761a6c858ef1ddb4da"
    ],
    "patch_url": "https://github.com/duncanmcclean/guest-entries/commit/a8e17b4413bfbbc337a887761a6c858ef1ddb4da.patch",
    "fix_commit_details": {
      "sha": "a8e17b4413bfbbc337a887761a6c858ef1ddb4da",
      "commit_date": "2023-11-11T10:31:54Z",
      "author": {
        "login": "duncanmcclean",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent uploading .php files (#60)",
        "length": 183,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 176,
        "additions": 167,
        "deletions": 9
      },
      "files": [
        {
          "filename": "src/Http/Controllers/GuestEntryController.php",
          "status": "modified",
          "additions": 13,
          "deletions": 2,
          "patch": "@@ -13,7 +13,9 @@\n use Illuminate\\Http\\Request;\n use Illuminate\\Routing\\Controller;\n use Illuminate\\Support\\Arr;\n+use Illuminate\\Support\\Facades\\Validator;\n use Illuminate\\Support\\Str;\n+use Illuminate\\Validation\\ValidationException;\n use Statamic\\Facades\\Asset;\n use Statamic\\Facades\\AssetContainer;\n use Statamic\\Facades\\Collection;\n@@ -240,8 +242,17 @@ protected function uploadFile(string $key, Field $field, Request $request)\n             $uploadedFiles = [$uploadedFiles];\n         }\n \n-        // Filter out any null values.\n-        $uploadedFiles = collect($uploadedFiles)->filter()->toArray();\n+        $uploadedFiles = collect($uploadedFiles)\n+            ->each(function ($file) use ($key) {\n+                if (in_array(trim(strtolower($file->getClientOriginalExtension())), ['php', 'php3', 'php4', 'php5', 'phtml'])) {\n+                    $validator = Validator::make([], []);\n+                    $validator->errors()->add($key, __('Failed to upload.'));\n+\n+                    throw new ValidationException($validator);\n+                }\n+            })\n+            ->filter()\n+            ->toArray();\n \n         /* @var \\Illuminate\\Http\\Testing\\File $file */\n         foreach ($uploadedFiles as $uploadedFile) {"
        },
        {
          "filename": "src/Http/Requests/DestroyRequest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -8,8 +8,8 @@\n \n class DestroyRequest extends FormRequest\n {\n-    use Concerns\\WhitelistedCollections,\n-        Concerns\\HandleFailedValidation;\n+    use Concerns\\HandleFailedValidation,\n+        Concerns\\WhitelistedCollections;\n \n     public function authorize()\n     {"
        },
        {
          "filename": "src/Http/Requests/StoreRequest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -9,8 +9,8 @@\n class StoreRequest extends FormRequest\n {\n     use Concerns\\AcceptsFormRequests,\n-        Concerns\\WhitelistedCollections,\n-        Concerns\\HandleFailedValidation;\n+        Concerns\\HandleFailedValidation,\n+        Concerns\\WhitelistedCollections;\n \n     public function authorize()\n     {"
        },
        {
          "filename": "src/Http/Requests/UpdateRequest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -9,8 +9,8 @@\n class UpdateRequest extends FormRequest\n {\n     use Concerns\\AcceptsFormRequests,\n-        Concerns\\WhitelistedCollections,\n-        Concerns\\HandleFailedValidation;\n+        Concerns\\HandleFailedValidation,\n+        Concerns\\WhitelistedCollections;\n \n     public function authorize()\n     {"
        },
        {
          "filename": "tests/Http/Controllers/GuestEntryControllerTest.php",
          "status": "modified",
          "additions": 146,
          "deletions": 0,
          "patch": "@@ -9,6 +9,7 @@\n use Illuminate\\Support\\Facades\\Config;\n use Illuminate\\Support\\Facades\\Event;\n use Illuminate\\Support\\Facades\\File;\n+use Illuminate\\Support\\Facades\\Storage;\n use Spatie\\TestTime\\TestTime;\n use Statamic\\Events\\EntrySaved;\n use Statamic\\Facades\\Asset;\n@@ -18,6 +19,8 @@\n use Statamic\\Facades\\Entry;\n use Statamic\\Facades\\Site;\n \n+use function PHPUnit\\Framework\\assertCount;\n+\n beforeEach(function () {\n     File::deleteDirectory(app('stache')->store('entries')->directory());\n \n@@ -462,6 +465,66 @@\n     $this->assertIsString($entry->get('attachment'));\n });\n \n+it('cant store an entry when uploading a PHP file', function () {\n+    AssetContainer::make('assets')->disk('local')->save();\n+\n+    Blueprint::make('comments')\n+        ->setNamespace('collections.comments')\n+        ->setContents([\n+            'title' => 'Comments',\n+            'sections' => [\n+                'main' => [\n+                    'display' => 'main',\n+                    'fields' => [\n+                        [\n+                            'handle' => 'title',\n+                            'field' => [\n+                                'type' => 'text',\n+                            ],\n+                        ],\n+                        [\n+                            'handle' => 'slug',\n+                            'field' => [\n+                                'type' => 'slug',\n+                            ],\n+                        ],\n+                        [\n+                            'handle' => 'attachment',\n+                            'field' => [\n+                                'mode' => 'list',\n+                                'container' => 'assets',\n+                                'restrict' => false,\n+                                'allow_uploads' => true,\n+                                'show_filename' => true,\n+                                'display' => 'Attachment',\n+                                'type' => 'assets',\n+                                'icon' => 'assets',\n+                                'listable' => 'hidden',\n+                                'max_items' => 1,\n+                            ],\n+                        ],\n+                    ],\n+                ],\n+            ],\n+        ])\n+        ->save();\n+\n+    Collection::make('comments')->save();\n+\n+    $this\n+        ->post(route('statamic.guest-entries.store'), [\n+            '_collection' => encrypt('comments'),\n+            'title' => 'This is great',\n+            'slug' => 'this-is-great',\n+            'attachment' => UploadedFile::fake()->image('foobar.php'),\n+        ])\n+        ->assertSessionHasErrors('attachment');\n+\n+    assertCount(0, Entry::all());\n+\n+    Storage::disk('local')->assertMissing('assets/foobar.php');\n+});\n+\n it('can store entry and ensure multiple files can be uploaded', function () {\n     AssetContainer::make('assets')->disk('local')->save();\n \n@@ -1465,6 +1528,89 @@\n     $this->assertIsString($entry->get('attachment'));\n });\n \n+it('cant update entry when uploading a PHP file', function () {\n+    AssetContainer::make('assets')->disk('local')->save();\n+\n+    Blueprint::make('albums')\n+        ->setNamespace('collections.albums')\n+        ->setContents([\n+            'title' => 'Albums',\n+            'sections' => [\n+                'main' => [\n+                    'display' => 'main',\n+                    'fields' => [\n+                        [\n+                            'handle' => 'title',\n+                            'field' => [\n+                                'type' => 'text',\n+                            ],\n+                        ],\n+                        [\n+                            'handle' => 'artist',\n+                            'field' => [\n+                                'type' => 'text',\n+                            ],\n+                        ],\n+                        [\n+                            'handle' => 'slug',\n+                            'field' => [\n+                                'type' => 'slug',\n+                            ],\n+                        ],\n+                        [\n+                            'handle' => 'record_label',\n+                            'field' => [\n+                                'type' => 'text',\n+                            ],\n+                        ],\n+                        [\n+                            'handle' => 'attachment',\n+                            'field' => [\n+                                'mode' => 'list',\n+                                'container' => 'assets',\n+                                'restrict' => false,\n+                                'allow_uploads' => true,\n+                                'show_filename' => true,\n+                                'display' => 'Attachment',\n+                                'type' => 'assets',\n+                                'icon' => 'assets',\n+                                'listable' => 'hidden',\n+                                'max_items' => 1,\n+                            ],\n+                        ],\n+                    ],\n+                ],\n+            ],\n+        ])\n+        ->save();\n+\n+    Collection::make('albums')->save();\n+\n+    Entry::make()\n+        ->id('allo-mate-idee')\n+        ->collection('albums')\n+        ->slug('allo-mate')\n+        ->data([\n+            'title' => 'Allo Mate!',\n+            'artist' => 'Guvna B',\n+        ])\n+        ->save();\n+\n+    $this\n+        ->post(route('statamic.guest-entries.update'), [\n+            '_collection' => encrypt('albums'),\n+            '_id' => encrypt('allo-mate-idee'),\n+            'attachment' => UploadedFile::fake()->image('something.php'),\n+        ])\n+        ->assertSessionHasErrors('attachment');\n+\n+    $entry = Entry::find('allo-mate-idee');\n+\n+    $this->assertNull($entry->get('attachment'));\n+\n+    Storage::disk('local')->assertMissing('something.php');\n+});\n+\n it('can update entry and ensure multiple files can be uploaded', function () {\n     AssetContainer::make('assets')->disk('local')->save();\n "
        },
        {
          "filename": "tests/Tags/GuestEntriesTagTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -3,14 +3,15 @@\n use DuncanMcClean\\GuestEntries\\Tags\\GuestEntriesTag;\n use Illuminate\\Container\\EntryNotFoundException;\n use Illuminate\\Support\\Facades\\Config;\n-use function PHPUnit\\Framework\\assertStringContainsString;\n use Statamic\\Exceptions\\CollectionNotFoundException;\n use Statamic\\Facades\\Antlers;\n use Statamic\\Facades\\Collection;\n use Statamic\\Facades\\Entry;\n use Statamic\\Statamic;\n use Statamic\\Tags\\Tags;\n \n+use function PHPUnit\\Framework\\assertStringContainsString;\n+\n $tag = null;\n \n beforeEach(function () use (&$tag) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "03b0bfb047907c9e68157715913fe24dc4b8d38d",
            "date": "2024-12-13T16:30:24Z",
            "author_login": "duncanmcclean"
          },
          {
            "sha": "e3b27b6d63e7378a17020ac379644e4a3d4547e9",
            "date": "2024-12-13T16:28:36Z",
            "author_login": "duncanmcclean"
          },
          {
            "sha": "a37e205369b2ec8f5f41c026ca016128d07a8291",
            "date": "2024-12-04T10:53:22Z",
            "author_login": "duncanmcclean"
          },
          {
            "sha": "3691da55696917b4e3f6625a66f7cac79cf6b511",
            "date": "2024-12-04T10:50:49Z",
            "author_login": "duncanmcclean"
          },
          {
            "sha": "b0800d70442821b589a3a4735d9af66bb0b9e47f",
            "date": "2024-12-04T10:40:53Z",
            "author_login": "jasonvarga"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "Guest Entries is a php library which allows users to create, update & delete entries from the front-end of a site. In affected versions the file uploads feature did not prevent the upload of PHP files. This may lead to code execution on the server by authenticated users. This vulnerability is fixed in v3.1.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-13T20:15:28.840",
    "last_modified": "2024-11-21T08:30:32.687",
    "fix_date": "2023-11-11T10:31:54Z"
  },
  "references": [
    {
      "url": "https://github.com/duncanmcclean/guest-entries/commit/a8e17b4413bfbbc337a887761a6c858ef1ddb4da",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/duncanmcclean/guest-entries/security/advisories/GHSA-rw82-mhmx-grmj",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/duncanmcclean/guest-entries/commit/a8e17b4413bfbbc337a887761a6c858ef1ddb4da",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/duncanmcclean/guest-entries/security/advisories/GHSA-rw82-mhmx-grmj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.251592",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "guest-entries",
    "owner": "duncanmcclean",
    "created_at": "2021-08-30T13:14:04Z",
    "updated_at": "2024-12-13T16:30:33Z",
    "pushed_at": "2024-12-13T16:30:34Z",
    "size": 379,
    "stars": 4,
    "forks": 0,
    "open_issues": 0,
    "watchers": 4,
    "has_security_policy": false,
    "default_branch": "4.x",
    "protected_branches": [
      "2.x"
    ],
    "languages": {
      "PHP": 136277
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:10:57.886148"
  }
}