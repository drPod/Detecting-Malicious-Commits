{
  "cve_id": "CVE-2023-47636",
  "github_data": {
    "repository": "pimcore/admin-ui-classic-bundle",
    "fix_commit": "10d178ef771097604a256c1192b098af9ec57a87",
    "related_commits": [
      "10d178ef771097604a256c1192b098af9ec57a87",
      "10d178ef771097604a256c1192b098af9ec57a87"
    ],
    "patch_url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/10d178ef771097604a256c1192b098af9ec57a87.patch",
    "fix_commit_details": {
      "sha": "10d178ef771097604a256c1192b098af9ec57a87",
      "commit_date": "2023-11-09T13:30:03Z",
      "author": {
        "login": "dvesh3",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Grid Export - Catch unable to read file exception (#342)",
        "length": 183,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 169,
        "additions": 95,
        "deletions": 74
      },
      "files": [
        {
          "filename": "src/Controller/Admin/Asset/AssetHelperController.php",
          "status": "modified",
          "additions": 32,
          "deletions": 26,
          "patch": "@@ -26,8 +26,8 @@\n use Pimcore\\Bundle\\AdminBundle\\Model\\GridConfigShare;\n use Pimcore\\Bundle\\AdminBundle\\Tool;\n use Pimcore\\Db;\n+use Pimcore\\File;\n use Pimcore\\Loader\\ImplementationLoader\\Exception\\UnsupportedException;\n-use Pimcore\\Localization\\LocaleServiceInterface;\n use Pimcore\\Logger;\n use Pimcore\\Model\\Asset;\n use Pimcore\\Model\\Element;\n@@ -722,17 +722,13 @@ public function getExportJobsAction(Request $request, GridHelperService $gridHel\n     /**\n      * @Route(\"/do-export\", name=\"pimcore_admin_asset_assethelper_doexport\", methods={\"POST\"})\n      *\n-     * @param Request $request\n-     * @param LocaleServiceInterface $localeService\n-     *\n-     * @return JsonResponse\n+     * @throws FilesystemException\n      */\n-    public function doExportAction(Request $request, LocaleServiceInterface $localeService): JsonResponse\n+    public function doExportAction(Request $request): JsonResponse\n     {\n-        $fileHandle = \\Pimcore\\File::getValidFilename($request->get('fileHandle'));\n+        $fileHandle = File::getValidFilename($request->get('fileHandle'));\n         $ids = $request->get('ids');\n-        $settings = $request->get('settings');\n-        $settings = json_decode($settings, true);\n+        $settings = json_decode($request->get('settings'), true);\n         $delimiter = $settings['delimiter'] ?? ';';\n         $language = str_replace('default', '', $request->get('language'));\n \n@@ -752,27 +748,37 @@ public function doExportAction(Request $request, LocaleServiceInterface $localeS\n \n         $csv = $this->getCsvData($request, $language, $list, $fields, $addTitles);\n \n-        $storage = Storage::get('temp');\n-        $csvFile = $this->getCsvFile($fileHandle);\n+        try {\n+            $storage = Storage::get('temp');\n+            $csvFile = $this->getCsvFile($fileHandle);\n \n-        $fileStream = $storage->readStream($csvFile);\n+            $fileStream = $storage->readStream($csvFile);\n \n-        $temp = tmpfile();\n-        stream_copy_to_stream($fileStream, $temp, null, 0);\n+            $temp = tmpfile();\n+            stream_copy_to_stream($fileStream, $temp, null, 0);\n \n-        $firstLine = true;\n-        foreach ($csv as $line) {\n-            if ($addTitles && $firstLine) {\n-                $firstLine = false;\n-                $line = implode($delimiter, $line) . \"\\r\\n\";\n-                fwrite($temp, $line);\n-            } else {\n-                fwrite($temp, implode($delimiter, array_map([$this, 'encodeFunc'], $line)) . \"\\r\\n\");\n+            $firstLine = true;\n+            foreach ($csv as $line) {\n+                if ($addTitles && $firstLine) {\n+                    $firstLine = false;\n+                    $line = implode($delimiter, $line) . \"\\r\\n\";\n+                    fwrite($temp, $line);\n+                } else {\n+                    fwrite($temp, implode($delimiter, array_map([$this, 'encodeFunc'], $line)) . \"\\r\\n\");\n+                }\n             }\n+            $storage->writeStream($csvFile, $temp);\n+        } catch (UnableToReadFile $exception) {\n+            Logger::err($exception->getMessage());\n+\n+            return $this->adminJson(\n+                [\n+                    'success' => false,\n+                    'message' => sprintf('export file not found: %s', $fileHandle)\n+                ]\n+            );\n         }\n \n-        $storage->writeStream($csvFile, $temp);\n-\n         return $this->adminJson(['success' => true]);\n     }\n \n@@ -860,7 +866,7 @@ protected function getCsvFile(string $fileHandle): string\n     public function downloadCsvFileAction(Request $request): Response\n     {\n         $storage = Storage::get('temp');\n-        $fileHandle = \\Pimcore\\File::getValidFilename($request->get('fileHandle'));\n+        $fileHandle = File::getValidFilename($request->get('fileHandle'));\n         $csvFile = $this->getCsvFile($fileHandle);\n \n         try {\n@@ -893,7 +899,7 @@ public function downloadCsvFileAction(Request $request): Response\n     public function downloadXlsxFileAction(Request $request, GridHelperService $gridHelperService): BinaryFileResponse\n     {\n         $storage = Storage::get('temp');\n-        $fileHandle = \\Pimcore\\File::getValidFilename($request->get('fileHandle'));\n+        $fileHandle = File::getValidFilename($request->get('fileHandle'));\n         $csvFile = $this->getCsvFile($fileHandle);\n \n         try {"
        },
        {
          "filename": "src/Controller/Admin/DataObject/DataObjectHelperController.php",
          "status": "modified",
          "additions": 63,
          "deletions": 48,
          "patch": "@@ -26,9 +26,11 @@\n use Pimcore\\Bundle\\AdminBundle\\Model\\GridConfigShare;\n use Pimcore\\Config;\n use Pimcore\\Db;\n+use Pimcore\\File;\n use Pimcore\\Localization\\LocaleServiceInterface;\n use Pimcore\\Logger;\n use Pimcore\\Model\\DataObject;\n+use Pimcore\\Model\\DataObject\\Listing;\n use Pimcore\\Model\\User;\n use Pimcore\\Security\\SecurityHelper;\n use Pimcore\\Tool;\n@@ -1283,20 +1285,17 @@ public function getExportJobsAction(Request $request, GridHelperService $gridHel\n     /**\n      * @Route(\"/do-export\", name=\"doexport\", methods={\"POST\"})\n      *\n-     * @param Request $request\n-     * @param LocaleServiceInterface $localeService\n-     * @param EventDispatcherInterface $eventDispatcher\n-     *\n-     * @return JsonResponse\n-     *\n-     * @throws \\Exception\n+     * @throws \\Exception|FilesystemException\n      */\n-    public function doExportAction(Request $request, LocaleServiceInterface $localeService, EventDispatcherInterface $eventDispatcher): JsonResponse\n+    public function doExportAction(\n+        Request $request,\n+        LocaleServiceInterface $localeService,\n+        EventDispatcherInterface $eventDispatcher\n+    ): JsonResponse\n     {\n-        $fileHandle = \\Pimcore\\File::getValidFilename($request->get('fileHandle'));\n+        $fileHandle = File::getValidFilename($request->get('fileHandle'));\n         $ids = $request->get('ids');\n-        $settings = $request->get('settings');\n-        $settings = json_decode($settings, true);\n+        $settings = json_decode($request->get('settings'), true);\n         $delimiter = $settings['delimiter'] ?? ';';\n         $header = $settings['header'] ?? 'title';\n \n@@ -1308,13 +1307,13 @@ public function doExportAction(Request $request, LocaleServiceInterface $localeS\n         $class = DataObject\\ClassDefinition::getById($request->get('classId'));\n \n         if (!$class) {\n-            throw new \\Exception('No class definition found');\n+            throw new \\InvalidArgumentException('No class definition found');\n         }\n \n         $className = $class->getName();\n         $listClass = '\\\\Pimcore\\\\Model\\\\DataObject\\\\' . ucfirst($className) . '\\\\Listing';\n \n-        /** @var \\Pimcore\\Model\\DataObject\\Listing $list */\n+        /** @var Listing $list */\n         $list = new $listClass();\n \n         $quotedIds = [];\n@@ -1340,56 +1339,72 @@ public function doExportAction(Request $request, LocaleServiceInterface $localeS\n \n         $requestedLanguage = $this->extractLanguage($request);\n \n-        $contextFromRequest = $request->get('context');\n-        if ($contextFromRequest) {\n-            $contextFromRequest = json_decode($contextFromRequest, true);\n-        }\n-\n         $context = [\n             'source' => 'pimcore-export',\n         ];\n \n-        if (is_array($contextFromRequest)) {\n+        $contextFromRequest = $request->get('context');\n+        if ($contextFromRequest) {\n+            $contextFromRequest = json_decode($contextFromRequest, true);\n             $context = array_merge($context, $contextFromRequest);\n         }\n \n-        $csv = DataObject\\Service::getCsvData($requestedLanguage, $localeService, $list, $fields, $header, $addTitles, $context);\n+        $csv = DataObject\\Service::getCsvData(\n+            $requestedLanguage,\n+            $localeService,\n+            $list,\n+            $fields,\n+            $header,\n+            $addTitles,\n+            $context\n+        );\n \n-        $storage = Storage::get('temp');\n-        $csvFile = $this->getCsvFile($fileHandle);\n-\n-        $fileStream = $storage->readStream($csvFile);\n-\n-        $temp = tmpfile();\n-        stream_copy_to_stream($fileStream, $temp, null, 0);\n-\n-        $firstLine = true;\n+        try {\n+            $storage = Storage::get('temp');\n+            $csvFile = $this->getCsvFile($fileHandle);\n \n-        if ($request->get('initial') && $header === 'no_header') {\n-            array_shift($csv);\n-            $firstLine = false;\n-        }\n+            $fileStream = $storage->readStream($csvFile);\n \n-        $lineCount = count($csv);\n+            $temp = tmpfile();\n+            stream_copy_to_stream($fileStream, $temp, null, 0);\n \n-        if (!$addTitles && $lineCount > 0) {\n-            fwrite($temp, \"\\r\\n\");\n-        }\n+            $firstLine = true;\n \n-        for ($i = 0; $i < $lineCount; $i++) {\n-            $line = $csv[$i];\n-            if ($addTitles && $firstLine) {\n+            if ($request->get('initial') && $header === 'no_header') {\n+                array_shift($csv);\n                 $firstLine = false;\n-                $line = implode($delimiter, $line);\n-                fwrite($temp, $line);\n-            } else {\n-                fwrite($temp, implode($delimiter, array_map([$this, 'encodeFunc'], $line)));\n             }\n-            if ($i < $lineCount - 1) {\n+\n+            $lineCount = count($csv);\n+\n+            if (!$addTitles && $lineCount > 0) {\n                 fwrite($temp, \"\\r\\n\");\n             }\n+\n+            for ($i = 0; $i < $lineCount; $i++) {\n+                $line = $csv[$i];\n+                if ($addTitles && $firstLine) {\n+                    $firstLine = false;\n+                    $line = implode($delimiter, $line);\n+                    fwrite($temp, $line);\n+                } else {\n+                    fwrite($temp, implode($delimiter, array_map([$this, 'encodeFunc'], $line)));\n+                }\n+                if ($i < $lineCount - 1) {\n+                    fwrite($temp, \"\\r\\n\");\n+                }\n+            }\n+            $storage->writeStream($csvFile, $temp);\n+        } catch (UnableToReadFile $exception) {\n+            Logger::err($exception->getMessage());\n+\n+            return $this->adminJson(\n+                [\n+                    'success' => false,\n+                    'message' => sprintf('export file not found: %s', $fileHandle)\n+                ]\n+            );\n         }\n-        $storage->writeStream($csvFile, $temp);\n \n         return $this->adminJson(['success' => true]);\n     }\n@@ -1412,7 +1427,7 @@ public function encodeFunc(string $value): string\n     public function downloadCsvFileAction(Request $request): Response\n     {\n         $storage = Storage::get('temp');\n-        $fileHandle = \\Pimcore\\File::getValidFilename($request->get('fileHandle'));\n+        $fileHandle = File::getValidFilename($request->get('fileHandle'));\n         $csvFile = $this->getCsvFile($fileHandle);\n \n         try {\n@@ -1445,7 +1460,7 @@ public function downloadCsvFileAction(Request $request): Response\n     public function downloadXlsxFileAction(Request $request, GridHelperService $gridHelperService): BinaryFileResponse\n     {\n         $storage = Storage::get('temp');\n-        $fileHandle = \\Pimcore\\File::getValidFilename($request->get('fileHandle'));\n+        $fileHandle = File::getValidFilename($request->get('fileHandle'));\n         $csvFile = $this->getCsvFile($fileHandle);\n \n         try {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "dcc6ebfaa17470d1632c330882490258eeee8f8c",
            "date": "2025-01-07T13:20:20Z",
            "author_login": "robertSt7"
          },
          {
            "sha": "e9ecc6056f2e621c4624fed3a70868a441924f8a",
            "date": "2025-01-07T13:03:00Z",
            "author_login": "robertSt7"
          },
          {
            "sha": "bf8a2a1c7ab07048f57aac8368965aaecf9e9a50",
            "date": "2024-12-20T11:48:06Z",
            "author_login": "cancan101"
          },
          {
            "sha": "58643e5b5d6ae7aaa14a9de739fe0b2cd2ed6434",
            "date": "2024-12-20T10:02:45Z",
            "author_login": "cancan101"
          },
          {
            "sha": "5d5b24ffcf56560440abe847b77a6a7a3c846e9b",
            "date": "2024-12-19T10:37:26Z",
            "author_login": "bluvulture"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-209",
    "description": "The Pimcore Admin Classic Bundle provides a Backend UI for Pimcore. Full Path Disclosure (FPD) vulnerabilities enable the attacker to see the path to the webroot/file. e.g.: /home/omg/htdocs/file/. Certain vulnerabilities, such as using the load_file() (within a SQL Injection) query to view the page source, require the attacker to have the full path to the file they wish to view. In the case of pimcore, the fopen() function here doesn't have an error handle when the file doesn't exist on the server so the server response raises the full path \"fopen(/var/www/html/var/tmp/export-{ uniqe id}.csv)\". This issue has been patched in commit `10d178ef771` which has been included in release version 1.2.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-15T20:15:07.803",
    "last_modified": "2024-11-21T08:30:34.697",
    "fix_date": "2023-11-09T13:30:03Z"
  },
  "references": [
    {
      "url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/10d178ef771097604a256c1192b098af9ec57a87",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pimcore/admin-ui-classic-bundle/security/advisories/GHSA-c8hj-w239-5gvf",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://huntr.com/bounties/4af4db18-9fd4-43e9-8bc6-c88aaf76839c/",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/10d178ef771097604a256c1192b098af9ec57a87",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pimcore/admin-ui-classic-bundle/security/advisories/GHSA-c8hj-w239-5gvf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://huntr.com/bounties/4af4db18-9fd4-43e9-8bc6-c88aaf76839c/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.262248",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "admin-ui-classic-bundle",
    "owner": "pimcore",
    "created_at": "2023-04-12T08:51:19Z",
    "updated_at": "2025-01-07T13:20:24Z",
    "pushed_at": "2025-01-14T12:39:55Z",
    "size": 106129,
    "stars": 11,
    "forks": 104,
    "open_issues": 110,
    "watchers": 11,
    "has_security_policy": false,
    "default_branch": "1.x",
    "protected_branches": [
      "1.x",
      "1.7"
    ],
    "languages": {
      "JavaScript": 3781086,
      "PHP": 1378196,
      "CSS": 817971,
      "Twig": 119530,
      "SCSS": 10777,
      "Shell": 409
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:14:21.810257"
  }
}