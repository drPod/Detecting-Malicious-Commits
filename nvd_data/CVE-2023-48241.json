{
  "cve_id": "CVE-2023-48241",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "93b8ec702d7075f0f5794bb05dfb651382596764",
    "related_commits": [
      "93b8ec702d7075f0f5794bb05dfb651382596764",
      "93b8ec702d7075f0f5794bb05dfb651382596764"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/93b8ec702d7075f0f5794bb05dfb651382596764.patch",
    "fix_commit_details": {
      "sha": "93b8ec702d7075f0f5794bb05dfb651382596764",
      "commit_date": "2023-07-17T16:06:28Z",
      "author": {
        "login": "michitux",
        "type": "User",
        "stats": {
          "total_commits": 378,
          "average_weekly_commits": 0.39622641509433965,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 108
        }
      },
      "commit_message": {
        "title": "XWIKI-21138: Improve Solr query filtering",
        "length": 41,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 109,
        "additions": 83,
        "deletions": 26
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-query/src/main/java/org/xwiki/query/solr/internal/SolrQueryExecutor.java",
          "status": "modified",
          "additions": 19,
          "deletions": 21,
          "patch": "@@ -233,36 +233,34 @@ private String[] toStringArray(Iterable iterable)\n     protected void filterResponse(QueryResponse response, List<DocumentReference> usersToCheck)\n     {\n         SolrDocumentList results = response.getResults();\n-        long numFound = results.getNumFound();\n+        long numResults = results.size();\n \n-        // Since we are modifying the results collection, we need to iterate over its copy.\n-        for (SolrDocument result : new ArrayList<SolrDocument>(results)) {\n+        results.removeIf(result -> {\n+            boolean keep = false;\n             try {\n                 DocumentReference resultDocumentReference = this.solrDocumentReferenceResolver.resolve(result);\n \n-                if (!isAllowed(resultDocumentReference, usersToCheck)) {\n+                keep = isAllowed(resultDocumentReference, usersToCheck);\n+            } catch (Exception e) {\n+                // Don't take any risk of including a result for which we cannot determine the document reference and\n+                // thus cannot determine if the given users have access to it or not.\n+                this.logger.warn(\"Removing bad result: {}\", result, e);\n+            }\n \n-                    // Remove the current incompatible result.\n-                    results.remove(result);\n+            // FIXME: We should update maxScore as well when removing the top scored item. How do we do that?\n+            // Sorting based on score might be a not so expensive option.\n \n-                    // Decrement the number of results.\n-                    numFound--;\n+            // FIXME: What about highlighting, facets and all the other data inside the QueryResponse?\n \n-                    // FIXME: We should update maxScore as well when removing the top scored item. How do we do that?\n-                    // Sorting based on score might be a not so expensive option.\n+            return !keep;\n+        });\n \n-                    // FIXME: What about highlighting, facets and all the other data inside the QueryResponse?\n-                }\n-            } catch (Exception e) {\n-                this.logger.warn(\"Skipping bad result: {}\", result, e);\n-            }\n-        }\n+        long numFilteredResults = numResults - results.size();\n+\n+        // Update the number of results, excluding the filtered ones.\n+        // Lower bound guard for the total number of results.\n+        long numFound = Math.max(0, response.getResults().getNumFound() - numFilteredResults);\n \n-        // Update the new number of results, excluding the filtered ones.\n-        if (numFound < 0) {\n-            // Lower bound guard for the total number of results.\n-            numFound = 0;\n-        }\n         results.setNumFound(numFound);\n     }\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-search/xwiki-platform-search-solr/xwiki-platform-search-solr-query/src/test/java/org/xwiki/query/solr/SolrQueryExecutorTest.java",
          "status": "modified",
          "additions": 64,
          "deletions": 5,
          "patch": "@@ -21,6 +21,7 @@\n \n import java.lang.reflect.ParameterizedType;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Locale;\n \n import org.apache.solr.client.solrj.SolrQuery;\n@@ -72,19 +73,19 @@ public class SolrQueryExecutorTest\n {\n     private static final String ITERABLE_PARAM_NAME = \"multiParam\";\n \n-    private static final String[] ITERABLE_PARAM_EXPECTED = {\"value1\", \"value2\"};\n+    private static final String[] ITERABLE_PARAM_EXPECTED = { \"value1\", \"value2\" };\n \n     private static final Iterable<String> ITERABLE_PARAM_VALUE = Arrays.asList(ITERABLE_PARAM_EXPECTED);\n \n     private static final String INT_ARR_PARAM_NAME = \"intArrayParam\";\n \n-    private static final String[] INT_ARR_PARAM_EXPECTED = {\"-42\", \"4711\"};\n+    private static final String[] INT_ARR_PARAM_EXPECTED = { \"-42\", \"4711\" };\n \n-    private static final int[] INT_ARR_PARAM_VALUE = {-42, 4711};\n+    private static final int[] INT_ARR_PARAM_VALUE = { -42, 4711 };\n \n     private static final String STR_ARR_PARAM_NAME = \"stringArrayParam\";\n \n-    private static final String[] STR_ARR_PARAM_EXPECTED = {\"valueA\", \"valueB\"};\n+    private static final String[] STR_ARR_PARAM_EXPECTED = { \"valueA\", \"valueB\" };\n \n     private static final String[] STR_ARR_PARAM_VALUE = STR_ARR_PARAM_EXPECTED;\n \n@@ -228,4 +229,62 @@ public void filterResponse() throws Exception\n         results = ((QueryResponse) this.componentManager.getComponentUnderTest().execute(query).get(0)).getResults();\n         assertEquals(Arrays.asList(alice, bob), results);\n     }\n-}\n+\n+    @Test\n+    public void filterResponseWithException() throws Exception\n+    {\n+        ParameterizedType resolverType =\n+            new DefaultParameterizedType(null, DocumentReferenceResolver.class, SolrDocument.class);\n+        DocumentReferenceResolver<SolrDocument> resolver = this.componentManager.getInstance(resolverType);\n+\n+        AuthorizationManager authorizationManager = this.componentManager.getInstance(AuthorizationManager.class);\n+\n+        DocumentReference currentUserReference = new DocumentReference(\"xwiki\", \"XWiki\", \"currentuser\");\n+        this.oldCore.getXWikiContext().setUserReference(currentUserReference);\n+\n+        DocumentReference aliceReference = new DocumentReference(\"wiki\", \"Users\", \"Alice\");\n+        SolrDocument alice = new SolrDocument();\n+        when(resolver.resolve(alice)).thenReturn(aliceReference);\n+\n+        DocumentReference bobReference = new DocumentReference(\"wiki\", \"Users\", \"Bob\");\n+        when(authorizationManager.hasAccess(Right.VIEW, currentUserReference, bobReference)).thenReturn(true);\n+        SolrDocument bob = new SolrDocument();\n+        when(resolver.resolve(bob)).thenReturn(bobReference);\n+\n+        SolrDocumentList sourceResults = new SolrDocumentList();\n+        sourceResults.addAll(Arrays.asList(alice, bob));\n+        sourceResults.setNumFound(2);\n+\n+        QueryResponse response = mock(QueryResponse.class);\n+        when(this.solr.query(any(SolrParams.class))).thenReturn(response);\n+\n+        DefaultQuery query = new DefaultQuery(\"\", null);\n+\n+        // No right check, verify that the setup works.\n+        when(response.getResults()).thenReturn((SolrDocumentList) sourceResults.clone());\n+        SolrDocumentList results =\n+            ((QueryResponse) this.componentManager.getComponentUnderTest().execute(query).get(0)).getResults();\n+        assertEquals(Arrays.asList(alice, bob), results);\n+        assertEquals(2, results.getNumFound());\n+\n+        // Check current user right\n+        query.checkCurrentUser(true);\n+\n+        // Throw an exception when resolving Alice\n+        when(resolver.resolve(alice)).thenThrow(new RuntimeException(\"Alice\"));\n+        when(response.getResults()).thenReturn((SolrDocumentList) sourceResults.clone());\n+\n+        results = ((QueryResponse) this.componentManager.getComponentUnderTest().execute(query).get(0)).getResults();\n+        assertEquals(Collections.singletonList(bob), results);\n+        assertEquals(1, results.getNumFound());\n+\n+        // Throw also an exception when resolving Bob\n+        when(resolver.resolve(bob)).thenThrow(new RuntimeException(\"Bob\"));\n+        when(response.getResults()).thenReturn((SolrDocumentList) sourceResults.clone());\n+\n+        // Assert that the results are empty when both throw an exception\n+        results = ((QueryResponse) this.componentManager.getComponentUnderTest().execute(query).get(0)).getResults();\n+        assertEquals(Collections.emptyList(), results);\n+        assertEquals(0, results.getNumFound());\n+    }\n+}\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 12
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-285",
    "description": "XWiki Platform is a generic wiki platform. Starting in version 6.3-milestone-2 and prior to versions 14.10.15, 15.5.1, and 15.6RC1, the Solr-based search suggestion provider that also duplicates as generic JavaScript API for search results in XWiki exposes the content of all documents of all wikis to anybody who has access to it, by default it is public. This exposes all information stored in the wiki (but not some protected information like password hashes). While there is a right check normally, the right check can be circumvented by explicitly requesting fields from Solr that don't include the data for the right check. This has been fixed in XWiki 15.6RC1, 15.5.1 and 14.10.15 by not listing documents whose rights cannot be checked. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-20T18:15:07.440",
    "last_modified": "2024-11-21T08:31:17.253",
    "fix_date": "2023-07-17T16:06:28Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/93b8ec702d7075f0f5794bb05dfb651382596764",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-7fqr-97j7-jgf4",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21138",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/93b8ec702d7075f0f5794bb05dfb651382596764",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-7fqr-97j7-jgf4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21138",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.273234",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}