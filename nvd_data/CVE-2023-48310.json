{
  "cve_id": "CVE-2023-48310",
  "github_data": {
    "repository": "NC3-LU/TestingPlatform",
    "fix_commit": "7b3e7ca869a4845aa7445f874c22c5929315c3a7",
    "related_commits": [
      "7b3e7ca869a4845aa7445f874c22c5929315c3a7",
      "7b3e7ca869a4845aa7445f874c22c5929315c3a7"
    ],
    "patch_url": "https://github.com/NC3-LU/TestingPlatform/commit/7b3e7ca869a4845aa7445f874c22c5929315c3a7.patch",
    "fix_commit_details": {
      "sha": "7b3e7ca869a4845aa7445f874c22c5929315c3a7",
      "commit_date": "2023-11-20T22:05:46Z",
      "author": {
        "login": "cedricbonhomme",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "chg: [security] Added new domain name validator used in the file testing/helpers.py (GHSA-9fhc-f3mr-w6h6).",
        "length": 106,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 163,
        "additions": 95,
        "deletions": 68
      },
      "files": [
        {
          "filename": "api/serializers.py",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@\n from authentication.models import User\n from automation.models import HttpAutomatedTest, PingAutomatedTest\n from testing.models import TlsScanHistory\n+from testing.validators import domain_name\n \n #\n # Model: User\n@@ -118,12 +119,21 @@ class Meta:\n \n class DomainNameSerializer(serializers.Serializer):\n     domain_name = serializers.CharField(\n-        max_length=200, required=True, help_text=\"Domain name.\"\n+        max_length=200,\n+        required=True,\n+        help_text=\"Domain name.\",\n+        validators=[domain_name],\n     )\n \n     class Meta:\n         fields = [\"domain_name\"]\n \n+    def validate_domain_name(self, value):\n+        \"\"\"\n+        Check that value is a valid domain name.\n+        \"\"\"\n+        return domain_name(value)\n+\n \n class DomainNameAndServiceSerializer(serializers.Serializer):\n     domain_name = serializers.CharField("
        },
        {
          "filename": "api/validators.py",
          "status": "removed",
          "additions": 0,
          "deletions": 36,
          "patch": "@@ -1,36 +0,0 @@\n-import re\n-\n-from rest_framework.serializers import ValidationError\n-\n-pattern = re.compile(\n-    r\"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|\"\n-    r\"([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|\"\n-    r\"([a-zA-Z0-9][-_.a-zA-Z0-9]{0,61}[a-zA-Z0-9]))\\.\"\n-    r\"([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}.[a-zA-Z]{2,3})$\"\n-)\n-\n-\n-# class DomainName:\n-#     def __init__(self, fields):\n-#         self.fields = fields\n-\n-#     def __call__(self, value):\n-#         for field_name in self.fields:\n-#             res = pattern.match(value)\n-#         if res:\n-#             return True\n-#         else:\n-#             raise ValidationError(\"This field must be a domain name.\")\n-\n-\n-def domain_name(value):\n-    \"\"\"\n-    Return whether or not given value is a valid domain.\n-    See:\n-    https://validators.readthedocs.io/en/latest/_modules/validators/domain.html#domain\n-    \"\"\"\n-    res = pattern.match(value)\n-    if res:\n-        return True\n-    else:\n-        raise ValidationError(\"This field must be a domain name.\")"
        },
        {
          "filename": "api/views.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -387,6 +387,7 @@ def create(self, request, *args, **kwargs):\n         Checks the presence of a SOA record.\n         \"\"\"\n         domain_name = request.data.get(\"domain_name\", None)\n+        DomainNameSerializer(domain_name)\n         result = check_soa_record(domain_name)\n         return Response(result, status=status.HTTP_200_OK)\n "
        },
        {
          "filename": "pyproject.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n [tool.poetry]\n name = \"testing-platform\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n description = \"NC3 Testing Platform\"\n authors = [\n     \"Romain Kieffer <romain.kieffer@nc3.lu>\","
        },
        {
          "filename": "testing/helpers.py",
          "status": "modified",
          "additions": 30,
          "deletions": 30,
          "patch": "@@ -20,45 +20,21 @@\n from weasyprint import CSS, HTML\n \n from testing.models import TlsScanHistory\n+from testing.validators import domain_name, full_domain_validator\n \n from .cipher_scoring import load_cipher_info\n \n logger = logging.getLogger(__name__)\n \n \n-def full_domain_validator(hostname):\n-    \"\"\"\n-    Fully validates a domain name as compilant with the standard rules:\n-        - Composed of series of labels concatenated with dots, as are all domain names.\n-        - Each label must be between 1 and 63 characters long.\n-        - The entire hostname (including the delimiting dots) has a maximum of 255 characters.\n-        - Only characters 'a' through 'z' (in a case-insensitive manner), the digits '0' through '9'.\n-        - Labels can't start or end with a hyphen.\n-    \"\"\"\n-    HOSTNAME_LABEL_PATTERN = re.compile(r\"(?!-)[A-Z\\d-]+(?<!-)$\", re.IGNORECASE)\n-    if not hostname:\n-        return\n-    if len(hostname) > 255:\n-        raise Exception(\n-            \"The domain name cannot be composed of more than 255 characters.\"\n-        )\n-    if hostname[-1:] == \".\":\n-        hostname = hostname[:-1]  # strip exactly one dot from the right, if present\n-    for label in hostname.split(\".\"):\n-        if len(label) > 63:\n-            raise Exception(\n-                \"The label '%(label)s' is too long (maximum is 63 characters).\"\n-                % {\"label\": label}\n-            )\n-        if not HOSTNAME_LABEL_PATTERN.match(label):\n-            raise Exception(f\"Unallowed characters in label '{label}'.\")\n-    return hostname\n-\n-\n def get_http_report(target, rescan):\n     ################################\n     # HTTP SCAN Mozilla Observatory\n     ################################\n+    try:\n+        domain_name(target)\n+    except Exception:\n+        return {\"error\": \"You entered an invalid hostname!\"}\n     response = {}\n \n     logger.info(f\"http scan: scanning {target}, with rescan set to {rescan}\")\n@@ -220,8 +196,12 @@ def get_tls_report(target, rescan):\n     return fetch_tls\n \n \n-def check_soa_record(target: str) -> bool:\n+def check_soa_record(target: str) -> Union[bool, Dict]:\n     \"\"\"Checks the presence of a SOA record for the Email Systems Testing.\"\"\"\n+    try:\n+        domain_name(target)\n+    except Exception:\n+        return {\"status\": False, \"statusmessage\": \"The given domain is invalid!\"}\n     result = False\n     try:\n         answers = dns.resolver.query(target, \"SOA\")\n@@ -235,6 +215,10 @@ def email_check(target: str) -> Dict[str, Any]:\n     \"\"\"Parses and validates MX, SPF, and DMARC records,\n     Checks for DNSSEC deployment, Checks for STARTTLS and TLS support.\n     Checks for the validity of the DKIM public key.\"\"\"\n+    try:\n+        domain_name(target)\n+    except Exception:\n+        return {\"status\": False, \"statusmessage\": \"The given domain is invalid!\"}\n     result = {}\n     env = os.environ.copy()\n     cmd = [\n@@ -498,6 +482,10 @@ def ipv6_check(\n \n \n def web_server_check(domain: str):\n+    try:\n+        domain_name(domain)\n+    except Exception:\n+        return {\"status\": False, \"statusmessage\": \"The given domain is invalid!\"}\n     nmap = nmap3.Nmap()\n     logger.info(f\"server scan: testing {domain}\")\n     service_scans = nmap.nmap_version_detection(\n@@ -540,6 +528,10 @@ def web_server_check(domain: str):\n \n \n def web_server_check_no_raw_socket(hostname):\n+    try:\n+        domain_name(hostname)\n+    except Exception:\n+        return {\"status\": False, \"statusmessage\": \"The given domain is invalid!\"}\n     api_endpoint = \"https://vulners.com/api/v3/burp/software/\"\n     header = {\n         \"User-Agent\": \"Vulners NMAP Plugin 1.7\",\n@@ -597,6 +589,10 @@ def tls_version_check(domain: str, service):\n     \"\"\"\n     Checks the version of TLS.\n     \"\"\"\n+    try:\n+        domain_name(domain)\n+    except Exception:\n+        return {\"status\": False, \"statusmessage\": \"The given domain is invalid!\"}\n     nmap = nmap3.Nmap()\n     logger.info(f\"tls scan: Scanning host/domain {domain}\")\n     tls_scans = nmap.nmap_version_detection(domain, args=\"--script ssl-enum-ciphers\")\n@@ -660,6 +656,10 @@ def tls_version_check(domain: str, service):\n def check_dkim_public_key(domain: str, selectors: list):\n     \"\"\"Looks for a DKIM public key in a DNS field and verifies that it can be used to\n     encrypt data.\"\"\"\n+    try:\n+        domain_name(domain)\n+    except Exception:\n+        return {\"status\": False, \"statusmessage\": \"The given domain is invalid!\"}\n     if len(selectors) == 0:\n         # TODO Check to get proper selector or have a database of selectors\n         selectors = ["
        },
        {
          "filename": "testing/validators.py",
          "status": "added",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -0,0 +1,52 @@\n+import re\n+\n+from rest_framework.serializers import ValidationError\n+\n+pattern = re.compile(\n+    r\"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|\"\n+    r\"([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|\"\n+    r\"([a-zA-Z0-9][-_.a-zA-Z0-9]{0,61}[a-zA-Z0-9]))\\.\"\n+    r\"([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}.[a-zA-Z]{2,3})$\"\n+)\n+\n+\n+def domain_name(value):\n+    \"\"\"\n+    Return whether or not given value is a valid domain.\n+    See:\n+    https://validators.readthedocs.io/en/latest/_modules/validators/domain.html#domain\n+    \"\"\"\n+    res = pattern.match(value)\n+    if res:\n+        return True\n+    else:\n+        raise ValidationError(\"This field must be a domain name.\")\n+\n+\n+def full_domain_validator(hostname):\n+    \"\"\"\n+    Fully validates a domain name as compilant with the standard rules:\n+        - Composed of series of labels concatenated with dots, as are all domain names.\n+        - Each label must be between 1 and 63 characters long.\n+        - The entire hostname (including the delimiting dots) has a maximum of 255 characters.\n+        - Only characters 'a' through 'z' (in a case-insensitive manner), the digits '0' through '9'.\n+        - Labels can't start or end with a hyphen.\n+    \"\"\"\n+    HOSTNAME_LABEL_PATTERN = re.compile(r\"(?!-)[A-Z\\d-]+(?<!-)$\", re.IGNORECASE)\n+    if not hostname:\n+        return\n+    if len(hostname) > 255:\n+        raise Exception(\n+            \"The domain name cannot be composed of more than 255 characters.\"\n+        )\n+    if hostname[-1:] == \".\":\n+        hostname = hostname[:-1]  # strip exactly one dot from the right, if present\n+    for label in hostname.split(\".\"):\n+        if len(label) > 63:\n+            raise Exception(\n+                \"The label '%(label)s' is too long (maximum is 63 characters).\"\n+                % {\"label\": label}\n+            )\n+        if not HOSTNAME_LABEL_PATTERN.match(label):\n+            raise Exception(f\"Unallowed characters in label '{label}'.\")\n+    return hostname"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cfbc13d4801a13e50d260f412985938b9d0db8ec",
            "date": "2024-11-27T13:41:21Z",
            "author_login": "romainkieffer"
          },
          {
            "sha": "e5522f9c1aa1ff47aa2afb13f78bf5cbfb8c38d8",
            "date": "2024-11-26T15:17:45Z",
            "author_login": "romainkieffer"
          },
          {
            "sha": "efd845b651bb6b8bb00f9b6302951e91a4824125",
            "date": "2024-11-26T14:10:41Z",
            "author_login": "romainkieffer"
          },
          {
            "sha": "fcb4dbe7f20313ab2c811d7883e0d4c17cee3b65",
            "date": "2024-11-26T12:37:22Z",
            "author_login": "romainkieffer"
          },
          {
            "sha": "de798fa084e545d0c5e9082e080b9cf417f1b8ba",
            "date": "2024-11-25T13:07:19Z",
            "author_login": "romainkieffer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "TestingPlatform is a testing platform for Internet Security Standards. Prior to version 2.1.1, user input is not filtered correctly. Nmap options are accepted. In this particular case, the option to create log files is accepted in addition to a host name (and even without). A log file is created at the location specified. These files are created as root. If the file exists, the existing file is being rendered useless. This can result in denial of service. Additionally, input for scanning can be any CIDR blocks passed to nmap. An attacker can scan 0.0.0.0/0 or even local networks. Version 2.1.1 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-20T23:15:06.593",
    "last_modified": "2024-11-21T08:31:27.777",
    "fix_date": "2023-11-20T22:05:46Z"
  },
  "references": [
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/commit/7b3e7ca869a4845aa7445f874c22c5929315c3a7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/releases/tag/v2.1.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/security/advisories/GHSA-9fhc-f3mr-w6h6",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/security/advisories/GHSA-mmpf-rw6c-67mm",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/commit/7b3e7ca869a4845aa7445f874c22c5929315c3a7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/releases/tag/v2.1.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/security/advisories/GHSA-9fhc-f3mr-w6h6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/NC3-LU/TestingPlatform/security/advisories/GHSA-mmpf-rw6c-67mm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.275790",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "TestingPlatform",
    "owner": "NC3-LU",
    "created_at": "2022-11-22T17:46:44Z",
    "updated_at": "2024-11-27T13:41:27Z",
    "pushed_at": "2024-11-27T13:41:22Z",
    "size": 65042,
    "stars": 6,
    "forks": 0,
    "open_issues": 7,
    "watchers": 6,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "HTML": 308630,
      "Python": 264812,
      "CSS": 17030,
      "JavaScript": 3841,
      "Shell": 1086,
      "Makefile": 825,
      "Dockerfile": 445
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:51:43.244777"
  }
}