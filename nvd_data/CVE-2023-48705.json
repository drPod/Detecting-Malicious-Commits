{
  "cve_id": "CVE-2023-48705",
  "github_data": {
    "repository": "nautobot/nautobot",
    "fix_commit": "362850f5a94689a4c75e3188bf6de826c3b012b2",
    "related_commits": [
      "362850f5a94689a4c75e3188bf6de826c3b012b2",
      "54abe23331b6c3d0d82bf1b028c679b1d200920d",
      "362850f5a94689a4c75e3188bf6de826c3b012b2",
      "54abe23331b6c3d0d82bf1b028c679b1d200920d"
    ],
    "patch_url": "https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2.patch",
    "fix_commit_details": {
      "sha": "362850f5a94689a4c75e3188bf6de826c3b012b2",
      "commit_date": "2023-11-21T22:25:37Z",
      "author": {
        "login": "glennmatthews",
        "type": "User",
        "stats": {
          "total_commits": 1756,
          "average_weekly_commits": 4.491048593350383,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 206
        }
      },
      "commit_message": {
        "title": "[1.6] Fix unsafe `mark_safe` use in various features (#4833)",
        "length": 402,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 604,
        "additions": 441,
        "deletions": 163
      },
      "files": [
        {
          "filename": ".github/workflows/ci_pullrequest.yml",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -31,6 +31,17 @@ jobs:\n         uses: \"networktocode/gh-action-setup-poetry-environment@v2\"\n       - name: \"Linting: flake8\"\n         run: \"poetry run invoke flake8\"\n+  ruff:\n+    runs-on: \"ubuntu-20.04\"\n+    env:\n+      INVOKE_NAUTOBOT_LOCAL: \"True\"\n+    steps:\n+      - name: \"Check out repository code\"\n+        uses: \"actions/checkout@v2\"\n+      - name: \"Setup environment\"\n+        uses: \"networktocode/gh-action-setup-poetry-environment@v2\"\n+      - name: \"Linting: ruff\"\n+        run: \"poetry run invoke ruff --output-format github\"\n   markdownlint:\n     runs-on: \"ubuntu-20.04\"\n     env:\n@@ -83,6 +94,7 @@ jobs:\n       - \"black\"\n       - \"flake8\"\n       - \"markdownlint\"\n+      - \"ruff\"\n       - \"hadolint\"\n   check-schema:\n     runs-on: \"ubuntu-20.04\"\n@@ -113,6 +125,7 @@ jobs:\n       - \"black\"\n       - \"flake8\"\n       - \"markdownlint\"\n+      - \"ruff\"\n       - \"hadolint\"\n \n   pylint:"
        },
        {
          "filename": "changes/4833.changed",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Changed the `render_jinja2()` API to no longer automatically call `mark_safe()` on the output."
        },
        {
          "filename": "changes/4833.housekeeping",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Added `ruff` to invoke tasks and CI."
        },
        {
          "filename": "changes/4833.security",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Fixed cross-site-scripting (XSS) potential with maliciously crafted Custom Links, Computed Fields, and Job Buttons (GHSA-cf9f-wmhp-v4pr)."
        },
        {
          "filename": "nautobot/core/settings.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -619,7 +619,7 @@\n     ],\n     \"NETWORK_DRIVERS\": [\n         {},\n-        mark_safe(\n+        mark_safe(  # noqa: S308\n             \"Extend or override default Platform.network_driver translations provided by \"\n             '<a href=\"https://netutils.readthedocs.io/en/latest/user/lib_use_cases_lib_mapper/\">netutils</a>. '\n             \"Enter a dictionary in JSON format, for example:\\n\""
        },
        {
          "filename": "nautobot/core/views/generic.py",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -16,9 +16,8 @@\n from django.http import HttpResponse\n from django.shortcuts import get_object_or_404, redirect, render\n from django.urls import NoReverseMatch, reverse\n-from django.utils.html import escape\n+from django.utils.html import format_html\n from django.utils.http import is_safe_url\n-from django.utils.safestring import mark_safe\n from django.views.generic import View\n from django_tables2 import RequestConfig\n \n@@ -249,7 +248,7 @@ def get(self, request):\n             if not filterset.is_valid():\n                 messages.error(\n                     request,\n-                    mark_safe(f\"Invalid filters were specified: {filterset.errors}\"),\n+                    format_html(\"Invalid filters were specified: {}\", filterset.errors),\n                 )\n                 self.queryset = self.queryset.none()\n \n@@ -461,10 +460,10 @@ def post(self, request, *args, **kwargs):\n                 msg = f\"{verb} {self.queryset.model._meta.verbose_name}\"\n                 logger.info(f\"{msg} {obj} (PK: {obj.pk})\")\n                 if hasattr(obj, \"get_absolute_url\"):\n-                    msg = f'{msg} <a href=\"{obj.get_absolute_url()}\">{escape(obj)}</a>'\n+                    msg = format_html('{} <a href=\"{}\">{}</a>', msg, obj.get_absolute_url(), obj)\n                 else:\n-                    msg = f\"{msg} {escape(obj)}\"\n-                messages.success(request, mark_safe(msg))\n+                    msg = format_html(\"{} {}\", msg, obj)\n+                messages.success(request, msg)\n \n                 if \"_addanother\" in request.POST:\n                     # If the object has clone_fields, pre-populate a new instance of the form\n@@ -794,7 +793,7 @@ def post(self, request):\n                 logger.info(f\"Import object {obj} (PK: {obj.pk})\")\n                 messages.success(\n                     request,\n-                    mark_safe(f'Imported object: <a href=\"{obj.get_absolute_url()}\">{obj}</a>'),\n+                    format_html('Imported object: <a href=\"{}\">{}</a>', obj.get_absolute_url(), obj),\n                 )\n \n                 if \"_addanother\" in request.POST:"
        },
        {
          "filename": "nautobot/core/views/mixins.py",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -15,8 +15,7 @@\n from django.shortcuts import get_object_or_404, redirect\n from django.template.loader import select_template, TemplateDoesNotExist\n from django.utils.http import is_safe_url\n-from django.utils.html import escape\n-from django.utils.safestring import mark_safe\n+from django.utils.html import format_html\n from django.views.generic.edit import FormView\n \n from rest_framework import mixins, exceptions\n@@ -462,7 +461,7 @@ def filter_queryset(self, queryset):\n             if not self.filterset.is_valid():\n                 messages.error(\n                     self.request,\n-                    mark_safe(f\"Invalid filters were specified: {self.filterset.errors}\"),\n+                    format_html(\"Invalid filters were specified: {}\", self.filterset.errors),\n                 )\n                 queryset = queryset.none()\n         return queryset\n@@ -624,10 +623,10 @@ def _process_create_or_update_form(self, form):\n             msg = f'{\"Created\" if object_created else \"Modified\"} {queryset.model._meta.verbose_name}'\n             self.logger.info(f\"{msg} {obj} (PK: {obj.pk})\")\n             if hasattr(obj, \"get_absolute_url\"):\n-                msg = f'{msg} <a href=\"{obj.get_absolute_url()}\">{escape(obj)}</a>'\n+                msg = format_html('{} <a href=\"{}\">{}</a>', msg, obj.get_absolute_url(), obj)\n             else:\n-                msg = f\"{msg} { escape(obj)}\"\n-            messages.success(request, mark_safe(msg))\n+                msg = format_html(\"{} {}\", msg, obj)\n+            messages.success(request, msg)\n             if \"_addanother\" in request.POST:\n                 # If the object has clone_fields, pre-populate a new instance of the form\n                 if hasattr(obj, \"clone_fields\"):"
        },
        {
          "filename": "nautobot/dcim/forms.py",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -381,7 +381,7 @@ class Meta:\n         model = Site\n         fields = Site.csv_headers\n         help_texts = {\n-            \"time_zone\": mark_safe(\n+            \"time_zone\": mark_safe(  # noqa: S308\n                 'Time zone (<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">available options</a>)'\n             )\n         }\n@@ -447,7 +447,7 @@ class LocationTypeCSVForm(CustomFieldModelCSVForm):\n         feature=\"locations\",\n         required=False,\n         choices_as_strings=True,\n-        help_text=mark_safe(\n+        help_text=mark_safe(  # noqa: S308\n             \"The object types to which this status applies. Multiple values \"\n             \"must be comma-separated and wrapped in double quotes. (e.g. \"\n             '<code>\"dcim.device,dcim.rack\"</code>)'\n@@ -636,7 +636,7 @@ class Meta:\n         model = RackRole\n         fields = RackRole.csv_headers\n         help_texts = {\n-            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),\n+            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),  # noqa: S308\n         }\n \n \n@@ -1768,7 +1768,7 @@ class Meta:\n         model = DeviceRole\n         fields = DeviceRole.csv_headers\n         help_texts = {\n-            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),\n+            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),  # noqa: S308\n         }\n \n \n@@ -3855,7 +3855,7 @@ class Meta:\n             \"length_unit\",\n         ]\n         help_texts = {\n-            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),\n+            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),  # noqa: S308\n             \"status\": \"Connection status\",\n         }\n "
        },
        {
          "filename": "nautobot/dcim/models/devices.py",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -8,9 +8,9 @@\n from django.core.validators import MaxValueValidator, MinValueValidator\n from django.db import models\n from django.db.models import F, ProtectedError, Q\n-from django.utils.functional import cached_property\n from django.urls import reverse\n-from django.utils.safestring import mark_safe\n+from django.utils.functional import cached_property\n+from django.utils.html import format_html\n \n from nautobot.dcim.choices import DeviceFaceChoices, DeviceRedundancyGroupFailoverStrategyChoices, SubdeviceRoleChoices\n from nautobot.dcim.models.device_components import (\n@@ -279,9 +279,11 @@ def clean(self):\n                 url = f\"{reverse('dcim:device_list')}?manufacturer_id={self.manufacturer_id}&device_type_id={self.pk}\"\n                 raise ValidationError(\n                     {\n-                        \"u_height\": mark_safe(\n-                            f'Unable to set 0U height: Found <a href=\"{url}\">{racked_instance_count} instances</a> already '\n-                            f\"mounted within racks.\"\n+                        \"u_height\": format_html(\n+                            \"Unable to set 0U height: \"\n+                            'Found <a href=\"{}\">{} instances</a> already mounted within racks.',\n+                            url,\n+                            racked_instance_count,\n                         )\n                     }\n                 )"
        },
        {
          "filename": "nautobot/dcim/views.py",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -12,8 +12,7 @@\n     modelformset_factory,\n )\n from django.shortcuts import get_object_or_404, redirect, render\n-from django.utils.html import escape\n-from django.utils.safestring import mark_safe\n+from django.utils.html import format_html\n from django.views.generic import View\n from django_tables2 import RequestConfig\n \n@@ -2961,8 +2960,8 @@ def post(self, request, pk):\n \n             if membership_form.is_valid():\n                 membership_form.save()\n-                msg = f'Added member <a href=\"{device.get_absolute_url()}\">{escape(device)}</a>'\n-                messages.success(request, mark_safe(msg))\n+                msg = format_html('Added member <a href=\"{}\">{}</a>', device.get_absolute_url(), device)\n+                messages.success(request, msg)\n \n                 if \"_addanother\" in request.POST:\n                     return redirect(request.get_full_path())\n@@ -3011,8 +3010,8 @@ def post(self, request, pk):\n         # Protect master device from being removed\n         virtual_chassis = VirtualChassis.objects.filter(master=device).first()\n         if virtual_chassis is not None:\n-            msg = f\"Unable to remove master device {escape(device)} from the virtual chassis.\"\n-            messages.error(request, mark_safe(msg))\n+            msg = format_html(\"Unable to remove master device {} from the virtual chassis.\", device)\n+            messages.error(request, msg)\n             return redirect(device.get_absolute_url())\n \n         if form.is_valid():"
        },
        {
          "filename": "nautobot/extras/forms/forms.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -648,7 +648,7 @@ def __init__(self, *args, **kwargs):\n         self.fields[\"provided_contents\"] = CSVMultipleChoiceField(\n             choices=get_git_datasource_content_choices(),\n             required=False,\n-            help_text=mark_safe(\n+            help_text=mark_safe(  # noqa: S308\n                 \"The data types this repository provides. Multiple values must be comma-separated and wrapped in \"\n                 'double quotes (e.g. <code>\"extras.job,extras.configcontext\"</code>).'\n             ),\n@@ -1352,7 +1352,7 @@ class StatusCSVForm(CustomFieldModelCSVForm):\n     content_types = CSVMultipleContentTypeField(\n         feature=\"statuses\",\n         choices_as_strings=True,\n-        help_text=mark_safe(\n+        help_text=mark_safe(  # noqa: S308\n             \"The object types to which this status applies. Multiple values \"\n             \"must be comma-separated and wrapped in double quotes. (e.g. \"\n             '<code>\"dcim.device,dcim.rack\"</code>)'\n@@ -1364,7 +1364,7 @@ class Meta:\n         model = Status\n         fields = Status.csv_headers\n         help_texts = {\n-            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),\n+            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),  # noqa: S308\n         }\n \n \n@@ -1427,7 +1427,7 @@ class Meta:\n         model = Tag\n         fields = Tag.csv_headers\n         help_texts = {\n-            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),\n+            \"color\": mark_safe(\"RGB color in hexadecimal (e.g. <code>00ff00</code>)\"),  # noqa: S308\n         }\n \n "
        },
        {
          "filename": "nautobot/extras/models/customfields.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -12,7 +12,7 @@\n from django.db import models\n from django.forms.widgets import TextInput\n from django.urls import reverse\n-from django.utils.safestring import mark_safe\n+from django.utils.html import format_html\n \n from nautobot.extras.choices import CustomFieldFilterLogicChoices, CustomFieldTypeChoices\n from nautobot.extras.models import ChangeLoggedModel\n@@ -546,7 +546,7 @@ def to_form_field(\n                 field.validators = [\n                     RegexValidator(\n                         regex=self.validation_regex,\n-                        message=mark_safe(f\"Values must match this regex: <code>{self.validation_regex}</code>\"),\n+                        message=format_html(\"Values must match this regex: <code>{}</code>\", self.validation_regex),\n                     )\n                 ]\n "
        },
        {
          "filename": "nautobot/extras/models/models.py",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -326,12 +326,15 @@ class CustomLink(BaseModel, ChangeLoggedModel, NotesMixin):\n     name = models.CharField(max_length=100, unique=True)\n     text = models.CharField(\n         max_length=500,\n-        help_text=\"Jinja2 template code for link text. Reference the object as <code>{{ obj }}</code> such as <code>{{ obj.platform.slug }}</code>. Links which render as empty text will not be displayed.\",\n+        help_text=\"Jinja2 template code for link text. \"\n+        \"Reference the object as <code>{{ obj }}</code> such as <code>{{ obj.platform.slug }}</code>. \"\n+        \"Links which render as empty text will not be displayed.\",\n     )\n     target_url = models.CharField(\n         max_length=500,\n         verbose_name=\"URL\",\n-        help_text=\"Jinja2 template code for link URL. Reference the object as <code>{{ obj }}</code> such as <code>{{ obj.platform.slug }}</code>.\",\n+        help_text=\"Jinja2 template code for link URL. \"\n+        \"Reference the object as <code>{{ obj }}</code> such as <code>{{ obj.platform.slug }}</code>.\",\n     )\n     weight = models.PositiveSmallIntegerField(default=100)\n     group_name = models.CharField("
        },
        {
          "filename": "nautobot/extras/models/relationships.py",
          "status": "modified",
          "additions": 13,
          "deletions": 8,
          "patch": "@@ -9,7 +9,7 @@\n from django.db.models import Q\n from django.urls import reverse\n from django.urls.exceptions import NoReverseMatch\n-from django.utils.safestring import mark_safe\n+from django.utils.html import format_html\n \n from nautobot.core.fields import AutoSlugField\n from nautobot.core.models import BaseModel\n@@ -24,6 +24,7 @@\n     widgets,\n )\n from nautobot.utilities.querysets import RestrictedQuerySet\n+from nautobot.utilities.templatetags.helpers import bettertitle\n \n \n logger = logging.getLogger(__name__)\n@@ -275,9 +276,10 @@ def required_related_objects_errors(\n                 if output_for == \"ui\":\n                     try:\n                         add_url = reverse(get_route_for_model(required_model_class, \"add\"))\n-                        hint = (\n-                            f\"<a target='_blank' href='{add_url}'>Click here</a> to create \"\n-                            f\"a {required_model_meta.verbose_name}.\"\n+                        hint = format_html(\n+                            '<a target=\"_blank\" href=\"{}\">Click here</a> to create a {}.',\n+                            add_url,\n+                            required_model_meta.verbose_name,\n                         )\n                     except NoReverseMatch:\n                         pass\n@@ -289,11 +291,14 @@ def required_related_objects_errors(\n                     except NoReverseMatch:\n                         pass\n \n-                error_message = mark_safe(\n-                    f\"{name_plural[0].upper()}{name_plural[1:]} require \"\n-                    f\"{num_required_verbose} {required_model_meta.verbose_name}, but no \"\n-                    f\"{required_model_meta.verbose_name_plural} exist yet. {hint}\"\n+                error_message = format_html(\n+                    \"{} require {} {}, but no {} exist yet. \",\n+                    bettertitle(name_plural),\n+                    num_required_verbose,\n+                    required_model_meta.verbose_name,\n+                    required_model_meta.verbose_name_plural,\n                 )\n+                error_message += hint\n                 field_errors[field_key].append(error_message)\n \n             if initial_data is not None:"
        },
        {
          "filename": "nautobot/extras/tables.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -1,7 +1,6 @@\n import django_tables2 as tables\n from django.conf import settings\n from django.utils.html import format_html\n-from django.utils.safestring import mark_safe\n from django_tables2.utils import Accessor\n from jsonschema.exceptions import ValidationError as JSONSchemaValidationError\n \n@@ -255,7 +254,7 @@ class Meta(BaseTable.Meta):\n \n     def render_description(self, record):\n         if record.description:\n-            return mark_safe(render_markdown(record.description))\n+            return render_markdown(record.description)\n         return self.default\n \n "
        },
        {
          "filename": "nautobot/extras/templatetags/computed_fields.py",
          "status": "modified",
          "additions": 6,
          "deletions": 13,
          "patch": "@@ -1,7 +1,6 @@\n from django import template\n from django.contrib.contenttypes.models import ContentType\n-from django.utils.html import escape\n-from django.utils.safestring import mark_safe\n+from django.utils.html import format_html_join\n \n from nautobot.extras.models import ComputedField\n \n@@ -27,14 +26,8 @@ def computed_fields(context, obj, advanced_ui=None):\n     if not computed_fields:\n         return \"\"\n \n-    template_code = \"\"\n-\n-    for label, value in fields.items():\n-        escaped_label = escape(label)\n-        template_code += f\"\"\"\n-            <tr>\n-                <td><span title=\"{escaped_label}\">{escaped_label}</span></td>\n-                <td>{escape(value)}</td>\n-            <tr>\n-            \"\"\"\n-    return mark_safe(template_code)\n+    return format_html_join(\n+        \"\\n\",\n+        '<tr><td><span title=\"{}\">{}</span></td><td>{}</td></tr>',\n+        ((label, label, value) for label, value in fields.items()),\n+    )"
        },
        {
          "filename": "nautobot/extras/templatetags/custom_links.py",
          "status": "modified",
          "additions": 19,
          "deletions": 12,
          "patch": "@@ -2,6 +2,7 @@\n \n from django import template\n from django.contrib.contenttypes.models import ContentType\n+from django.utils.html import format_html\n from django.utils.safestring import mark_safe\n \n from nautobot.extras.models import CustomLink\n@@ -40,7 +41,7 @@ def custom_links(context, obj):\n         \"user\": context[\"user\"],  # django.contrib.auth.context_processors.auth\n         \"perms\": context[\"perms\"],  # django.contrib.auth.context_processors.auth\n     }\n-    template_code = \"\"\n+    template_code = mark_safe(\"\")  # noqa: S308\n     group_names = OrderedDict()\n \n     for cl in links:\n@@ -57,31 +58,37 @@ def custom_links(context, obj):\n                 if text_rendered:\n                     link_rendered = render_jinja2(cl.target_url, link_context)\n                     link_target = ' target=\"_blank\"' if cl.new_window else \"\"\n-                    template_code += LINK_BUTTON.format(link_rendered, link_target, cl.button_class, text_rendered)\n+                    template_code += format_html(\n+                        LINK_BUTTON, link_rendered, link_target, cl.button_class, text_rendered\n+                    )\n             except Exception as e:\n-                template_code += (\n-                    f'<a class=\"btn btn-sm btn-default\" disabled=\"disabled\" title=\"{e}\">'\n-                    f'<i class=\"mdi mdi-alert\"></i> {cl.name}</a>\\n'\n+                template_code += format_html(\n+                    '<a class=\"btn btn-sm btn-default\" disabled=\"disabled\" title=\"{}\">'\n+                    '<i class=\"mdi mdi-alert\"></i> {}</a>\\n',\n+                    e,\n+                    cl.name,\n                 )\n \n     # Add grouped links to template\n     for group, links in group_names.items():\n-        links_rendered = []\n+        links_rendered = mark_safe(\"\")  # noqa: S308\n \n         for cl in links:\n             try:\n                 text_rendered = render_jinja2(cl.text, link_context)\n                 if text_rendered:\n                     link_target = ' target=\"_blank\"' if cl.new_window else \"\"\n                     link_rendered = render_jinja2(cl.target_url, link_context)\n-                    links_rendered.append(GROUP_LINK.format(link_rendered, link_target, text_rendered))\n+                    links_rendered += format_html(GROUP_LINK, link_rendered, link_target, text_rendered)\n             except Exception as e:\n-                links_rendered.append(\n-                    f'<li><a disabled=\"disabled\" title=\"{e}\"><span class=\"text-muted\">'\n-                    f'<i class=\"mdi mdi-alert\"></i> {cl.name}</span></a></li>'\n+                links_rendered += format_html(\n+                    '<li><a disabled=\"disabled\" title=\"{}\"><span class=\"text-muted\">'\n+                    '<i class=\"mdi mdi-alert\"></i> {}</span></a></li>',\n+                    e,\n+                    cl.name,\n                 )\n \n         if links_rendered:\n-            template_code += GROUP_BUTTON.format(links[0].button_class, group, \"\".join(links_rendered))\n+            template_code += format_html(GROUP_BUTTON, links[0].button_class, group, links_rendered)\n \n-    return mark_safe(template_code)\n+    return template_code"
        },
        {
          "filename": "nautobot/extras/templatetags/job_buttons.py",
          "status": "modified",
          "additions": 34,
          "deletions": 19,
          "patch": "@@ -3,6 +3,7 @@\n from django import template\n from django.contrib.contenttypes.models import ContentType\n from django.urls import reverse\n+from django.utils.html import format_html\n from django.utils.safestring import mark_safe\n \n from nautobot.extras.models import JobButton\n@@ -87,10 +88,11 @@ def job_buttons(context, obj):\n         \"user\": context[\"user\"],  # django.contrib.auth.context_processors.auth\n         \"perms\": context[\"perms\"],  # django.contrib.auth.context_processors.auth\n     }\n-    buttons_html = forms_html = \"\"\n+    buttons_html = forms_html = mark_safe(\"\")  # noqa: S308\n     group_names = OrderedDict()\n \n-    hidden_inputs = HIDDEN_INPUTS.format(\n+    hidden_inputs = format_html(\n+        HIDDEN_INPUTS,\n         csrf_token=context[\"csrf_token\"],\n         object_pk=obj.pk,\n         object_model_name=f\"{content_type.app_label}.{content_type.model}\",\n@@ -121,22 +123,24 @@ def job_buttons(context, obj):\n                 if text_rendered:\n                     template_args[\"button_text\"] = text_rendered\n                     if jb.confirmation:\n-                        buttons_html += CONFIRM_BUTTON.format(**template_args)\n-                        forms_html += CONFIRM_MODAL.format(**template_args)\n+                        buttons_html += format_html(CONFIRM_BUTTON, **template_args)\n+                        forms_html += format_html(CONFIRM_MODAL, **template_args)\n                     else:\n-                        buttons_html += NO_CONFIRM_BUTTON.format(**template_args)\n-                        forms_html += NO_CONFIRM_FORM.format(**template_args)\n+                        buttons_html += format_html(NO_CONFIRM_BUTTON, **template_args)\n+                        forms_html += format_html(NO_CONFIRM_FORM, **template_args)\n             except Exception as e:\n-                buttons_html += (\n-                    f'<a class=\"btn btn-sm btn-default\" disabled=\"disabled\" title=\"{e}\">'\n-                    f'<i class=\"mdi mdi-alert\"></i> {jb.name}</a>\\n'\n+                buttons_html += format_html(\n+                    '<a class=\"btn btn-sm btn-default\" disabled=\"disabled\" title=\"{}\">'\n+                    '<i class=\"mdi mdi-alert\"></i> {}</a>\\n',\n+                    e,\n+                    jb.name,\n                 )\n \n     # Add grouped buttons to template\n     for group_name, buttons in group_names.items():\n         group_button_class = buttons[0].button_class\n \n-        buttons_rendered = \"\"\n+        buttons_rendered = mark_safe(\"\")  # noqa: S308\n \n         for jb in buttons:\n             template_args = {\n@@ -154,23 +158,34 @@ def job_buttons(context, obj):\n                 if text_rendered:\n                     template_args[\"button_text\"] = text_rendered\n                     if jb.confirmation:\n-                        buttons_rendered += \"<li>\" + CONFIRM_BUTTON.format(**template_args) + \"</li>\"\n-                        forms_html += CONFIRM_MODAL.format(**template_args)\n+                        buttons_rendered += (\n+                            mark_safe(\"<li>\")  # noqa: S308\n+                            + format_html(CONFIRM_BUTTON, **template_args)\n+                            + mark_safe(\"</li>\")  # noqa: S308\n+                        )\n+                        forms_html += format_html(CONFIRM_MODAL, **template_args)\n                     else:\n-                        buttons_rendered += \"<li>\" + NO_CONFIRM_BUTTON.format(**template_args) + \"</li>\"\n-                        forms_html += NO_CONFIRM_FORM.format(**template_args)\n+                        buttons_rendered += (\n+                            mark_safe(\"<li>\")  # noqa: S308\n+                            + format_html(NO_CONFIRM_BUTTON, **template_args)\n+                            + mark_safe(\"</li>\")  # noqa: S308\n+                        )\n+                        forms_html += format_html(NO_CONFIRM_FORM, **template_args)\n             except Exception as e:\n-                buttons_rendered += (\n-                    f'<li><a disabled=\"disabled\" title=\"{e}\"><span class=\"text-muted\">'\n-                    f'<i class=\"mdi mdi-alert\"></i> {jb.name}</span></a></li>'\n+                buttons_rendered += format_html(\n+                    '<li><a disabled=\"disabled\" title=\"{}\"><span class=\"text-muted\">'\n+                    '<i class=\"mdi mdi-alert\"></i> {}</span></a></li>',\n+                    e,\n+                    jb.name,\n                 )\n \n         if buttons_rendered:\n-            buttons_html += GROUP_DROPDOWN.format(\n+            buttons_html += format_html(\n+                GROUP_DROPDOWN,\n                 group_button_class=group_button_class,\n                 group_name=group_name,\n                 grouped_buttons=buttons_rendered,\n             )\n \n     # We want all of the buttons first and then any modals and forms so the buttons render properly\n-    return mark_safe(buttons_html + forms_html)\n+    return buttons_html + forms_html"
        },
        {
          "filename": "nautobot/extras/templatetags/plugins.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -52,7 +52,7 @@ def _get_registered_content(obj, method, template_context, return_html=True):\n     if not return_html:\n         return objects\n \n-    return mark_safe(html)\n+    return mark_safe(html)  # noqa: S308\n \n \n @register.simple_tag(takes_context=True)"
        },
        {
          "filename": "nautobot/extras/tests/test_customfields.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2188,7 +2188,7 @@ def test_custom_field_table_render(self):\n             \"url_field\": '<a href=\"http://example.com/2\">http://example.com/2</a>',\n             \"choice_field\": '<span class=\"label label-default\">Bar</span>',\n             \"multi_choice_field\": (\n-                '<span class=\"label label-default\">Bar</span> <span class=\"label label-default\">Baz</span> '\n+                '<span class=\"label label-default\">Bar</span> <span class=\"label label-default\">Baz</span>'\n             ),\n         }\n "
        },
        {
          "filename": "nautobot/extras/tests/test_relationships.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1138,13 +1138,13 @@ def required_relationships_test(self, interact_with=\"ui\"):\n                 ],\n                 \"expected_errors\": {\n                     \"api\": {\n-                        \"objects_nonexistent\": \"Circuit types require a platform, but no platforms exist yet. \"\n+                        \"objects_nonexistent\": \"Circuit Types require a platform, but no platforms exist yet. \"\n                         \"Create a platform by posting to /api/dcim/platforms/\",\n                         \"objects_not_specified\": 'You need to specify [\"relationships\"][\"circuittype-platform-o2o\"]'\n                         '[\"destination\"][\"objects\"].',\n                     },\n                     \"ui\": {\n-                        \"objects_nonexistent\": \"Circuit types require a platform, but no platforms exist yet.\",\n+                        \"objects_nonexistent\": \"Circuit Types require a platform, but no platforms exist yet.\",\n                         \"objects_not_specified\": \"You need to select a platform.\",\n                     },\n                 },"
        },
        {
          "filename": "nautobot/extras/tests/test_views.py",
          "status": "modified",
          "additions": 186,
          "deletions": 3,
          "patch": "@@ -8,9 +8,19 @@\n from django.test import override_settings\n from django.urls import reverse\n from django.utils import timezone\n+from django.utils.html import format_html\n from unittest import mock\n \n-from nautobot.dcim.models import ConsolePort, Device, DeviceRole, DeviceType, Interface, Manufacturer, Site\n+from nautobot.dcim.models import (\n+    ConsolePort,\n+    Device,\n+    DeviceRole,\n+    DeviceType,\n+    Interface,\n+    LocationType,\n+    Manufacturer,\n+    Site,\n+)\n from nautobot.dcim.tests import test_views\n from nautobot.extras.choices import (\n     CustomFieldTypeChoices,\n@@ -22,6 +32,7 @@\n )\n from nautobot.extras.constants import HTTP_CONTENT_TYPE_JSON\n from nautobot.extras.models import (\n+    ComputedField,\n     ConfigContext,\n     ConfigContextSchema,\n     CustomField,\n@@ -44,7 +55,6 @@\n     Status,\n     Tag,\n     Webhook,\n-    ComputedField,\n )\n from nautobot.extras.tests.constants import BIG_GRAPHQL_DEVICE_QUERY\n from nautobot.extras.tests.test_relationships import RequiredRelationshipTestMixin\n@@ -129,6 +139,63 @@ def setUpTestData(cls):\n         cls.slug_test_object = \"Computed Field Five\"\n \n \n+class ComputedFieldRenderingTestCase(TestCase):\n+    \"\"\"Tests for the inclusion of ComputedFields, distinct from tests of the ComputedField views themselves.\"\"\"\n+\n+    user_permissions = [\"dcim.view_locationtype\"]\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.computedfield = ComputedField(\n+            content_type=ContentType.objects.get_for_model(LocationType),\n+            slug=\"test\",\n+            label=\"Computed Field\",\n+            template=\"FOO {{ obj.name }} BAR\",\n+            fallback_value=\"Fallback Value\",\n+            weight=100,\n+        )\n+        self.computedfield.validated_save()\n+        self.location_type = LocationType.objects.get(name=\"Campus\")\n+\n+    def test_view_object_with_computed_field(self):\n+        \"\"\"Ensure that the computed field template is rendered.\"\"\"\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertIn(f\"FOO {self.location_type.name} BAR\", content, content)\n+\n+    def test_view_object_with_computed_field_fallback_value(self):\n+        \"\"\"Ensure that the fallback_value is rendered if the template fails to render.\"\"\"\n+        # Make the template invalid to demonstrate the fallback value\n+        self.computedfield.template = \"FOO {{ obj.\"\n+        self.computedfield.validated_save()\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertIn(\"Fallback Value\", content, content)\n+\n+    def test_view_object_with_computed_field_unsafe_template(self):\n+        \"\"\"Ensure that computed field templates can't be used as an XSS vector.\"\"\"\n+        self.computedfield.template = '<script>alert(\"Hello world!\"</script>'\n+        self.computedfield.validated_save()\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+\n+    def test_view_object_with_computed_field_unsafe_fallback_value(self):\n+        \"\"\"Ensure that computed field fallback values can't be used as an XSS vector.\"\"\"\n+        self.computedfield.template = \"FOO {{ obj.\"\n+        self.computedfield.fallback_value = '<script>alert(\"Hello world!\"</script>'\n+        self.computedfield.validated_save()\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+\n+\n # TODO: Change base class to PrimaryObjectViewTestCase\n # Blocked by absence of standard create/edit, bulk create views\n class ConfigContextTestCase(\n@@ -441,7 +508,9 @@ def test_create_object_with_constrained_permission(self):\n         super().test_create_object_with_constrained_permission()\n \n \n-class CustomLinkTest(TestCase):\n+class CustomLinkRenderingTestCase(TestCase):\n+    \"\"\"Tests for the inclusion of CustomLinks, distinct from tests of the CustomLink views themselves.\"\"\"\n+\n     user_permissions = [\"dcim.view_site\"]\n \n     def test_view_object_with_custom_link(self):\n@@ -462,6 +531,65 @@ def test_view_object_with_custom_link(self):\n         content = extract_page_body(response.content.decode(response.charset))\n         self.assertIn(f\"FOO {site.name} BAR\", content, content)\n \n+    def test_view_object_with_unsafe_custom_link_text(self):\n+        \"\"\"Ensure that custom links can't be used as a vector for injecting scripts or breaking HTML.\"\"\"\n+        customlink = CustomLink(\n+            content_type=ContentType.objects.get_for_model(Site),\n+            name=\"Test\",\n+            text='<script>alert(\"Hello world!\")</script>',\n+            target_url=\"http://example.com/?location=None\",\n+            new_window=False,\n+        )\n+        customlink.validated_save()\n+        site = Site(name=\"Test Site\", slug=\"test-site\")\n+        site.save()\n+\n+        response = self.client.get(site.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+        self.assertIn(format_html('<a href=\"{}\"', customlink.target_url), content, content)\n+\n+    def test_view_object_with_unsafe_custom_link_url(self):\n+        \"\"\"Ensure that custom links can't be used as a vector for injecting scripts or breaking HTML.\"\"\"\n+        customlink = CustomLink(\n+            content_type=ContentType.objects.get_for_model(Site),\n+            name=\"Test\",\n+            text=\"Hello\",\n+            target_url='\"><script>alert(\"Hello world!\")</script><a href=\"',\n+            new_window=False,\n+        )\n+        customlink.validated_save()\n+        site = Site(name=\"Test Site\", slug=\"test-site\")\n+        site.save()\n+\n+        response = self.client.get(site.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+        self.assertIn(format_html('<a href=\"{}\"', customlink.target_url), content, content)\n+\n+    def test_view_object_with_unsafe_custom_link_name(self):\n+        \"\"\"Ensure that custom links can't be used as a vector for injecting scripts or breaking HTML.\"\"\"\n+        customlink = CustomLink(\n+            content_type=ContentType.objects.get_for_model(Site),\n+            name='<script>alert(\"Hello World\")</script>',\n+            text=\"Hello\",\n+            target_url=\"http://example.com/?site={{ obj.name \",  # intentionally bad jinja2 to trigger error case\n+            new_window=False,\n+        )\n+        customlink.validated_save()\n+        site = Site(name=\"Test Site\", slug=\"test-site\")\n+        site.save()\n+\n+        response = self.client.get(site.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+\n \n class DynamicGroupTestCase(\n     ViewTestCases.CreateObjectViewTestCase,\n@@ -1877,6 +2005,61 @@ def setUpTestData(cls):\n         }\n \n \n+class JobButtonRenderingTestCase(TestCase):\n+    \"\"\"Tests for the rendering of JobButtons, distinct from tests of the JobButton views themselves.\"\"\"\n+\n+    user_permissions = [\"dcim.view_locationtype\"]\n+\n+    def setUp(self):\n+        super().setUp()\n+        self.job_button = JobButton(\n+            name=\"JobButton\",\n+            text=\"JobButton {{ obj.name }}\",\n+            job=Job.objects.get(job_class_name=\"TestJobButtonReceiverSimple\"),\n+            confirmation=False,\n+        )\n+        self.job_button.validated_save()\n+        self.job_button.content_types.add(ContentType.objects.get_for_model(LocationType))\n+        self.location_type = LocationType.objects.get(name=\"Campus\")\n+\n+    def test_view_object_with_job_button(self):\n+        \"\"\"Ensure that the job button is rendered.\"\"\"\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertIn(f\"JobButton {self.location_type.name}\", content, content)\n+\n+    def test_view_object_with_unsafe_text(self):\n+        \"\"\"Ensure that JobButton text can't be used as a vector for XSS.\"\"\"\n+        self.job_button.text = '<script>alert(\"Hello world!\")</script>'\n+        self.job_button.validated_save()\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+\n+        # Make sure grouped rendering is safe too\n+        self.job_button.group = '<script>alert(\"Goodbye\")</script>'\n+        self.job_button.validated_save()\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+\n+    def test_view_object_with_unsafe_name(self):\n+        \"\"\"Ensure that JobButton names can't be used as a vector for XSS.\"\"\"\n+        self.job_button.text = \"JobButton {{ obj\"\n+        self.job_button.name = '<script>alert(\"Yo\")</script>'\n+        self.job_button.validated_save()\n+        response = self.client.get(self.location_type.get_absolute_url(), follow=True)\n+        self.assertEqual(response.status_code, 200)\n+        content = extract_page_body(response.content.decode(response.charset))\n+        self.assertNotIn(\"<script>alert\", content, content)\n+        self.assertIn(\"&lt;script&gt;alert\", content, content)\n+\n+\n # TODO: Convert to StandardTestCases.Views\n class ObjectChangeTestCase(TestCase):\n     user_permissions = (\"extras.view_objectchange\",)"
        },
        {
          "filename": "nautobot/extras/views.py",
          "status": "modified",
          "additions": 12,
          "deletions": 13,
          "patch": "@@ -13,9 +13,8 @@\n from django.shortcuts import get_object_or_404, redirect, render\n from django.urls import reverse\n from django.utils import timezone\n-from django.utils.html import escape\n+from django.utils.html import format_html\n from django.utils.http import is_safe_url\n-from django.utils.safestring import mark_safe\n from django.views.generic import View\n from django.template.loader import get_template, TemplateDoesNotExist\n from django_tables2 import RequestConfig\n@@ -407,10 +406,10 @@ def post(self, request, *args, **kwargs):\n                 msg = f\"{verb} {self.queryset.model._meta.verbose_name}\"\n                 logger.info(f\"{msg} {obj} (PK: {obj.pk})\")\n                 if hasattr(obj, \"get_absolute_url\"):\n-                    msg = f'{msg} <a href=\"{obj.get_absolute_url()}\">{escape(obj)}</a>'\n+                    msg = format_html('{} <a href=\"{}\">{}</a>', msg, obj.get_absolute_url(), obj)\n                 else:\n-                    msg = f\"{msg} {escape(obj)}\"\n-                messages.success(request, mark_safe(msg))\n+                    msg = format_html(\"{} {}\", msg, obj)\n+                messages.success(request, msg)\n \n                 if \"_addanother\" in request.POST:\n                     # If the object has clone_fields, pre-populate a new instance of the form\n@@ -645,10 +644,10 @@ def post(self, request, *args, **kwargs):\n                 msg = f\"{verb} {self.queryset.model._meta.verbose_name}\"\n                 logger.info(f\"{msg} {obj} (PK: {obj.pk})\")\n                 if hasattr(obj, \"get_absolute_url\"):\n-                    msg = f'{msg} <a href=\"{obj.get_absolute_url()}\">{escape(obj)}</a>'\n+                    msg = format_html('{} <a href=\"{}\">{}</a>', msg, obj.get_absolute_url(), obj)\n                 else:\n-                    msg = f\"{msg} {escape(obj)}\"\n-                messages.success(request, mark_safe(msg))\n+                    msg = format_html(\"{} {}\", msg, obj)\n+                messages.success(request, msg)\n \n                 if \"_addanother\" in request.POST:\n                     # If the object has clone_fields, pre-populate a new instance of the form\n@@ -1616,8 +1615,8 @@ def post(self, request, pk):\n             request=copy_safe_request(request),\n             commit=True,\n         )\n-        msg = f'Job enqueued. <a href=\"{result.get_absolute_url()}\">Click here for the results.</a>'\n-        messages.info(request=request, message=mark_safe(msg))\n+        msg = format_html('Job enqueued. <a href=\"{}\">Click here for the results.</a>', result.get_absolute_url())\n+        messages.info(request=request, message=msg)\n         return redirect(post_data[\"redirect_path\"])\n \n \n@@ -1973,10 +1972,10 @@ def post(self, request, *args, **kwargs):\n                 msg = f\"{verb} {self.queryset.model._meta.verbose_name}\"\n                 logger.info(f\"{msg} {obj} (PK: {obj.pk})\")\n                 if hasattr(obj, \"get_absolute_url\"):\n-                    msg = f'{msg} <a href=\"{obj.get_absolute_url()}\">{escape(obj)}</a>'\n+                    msg = format_html('{} <a href=\"{}\">{}</a>', msg, obj.get_absolute_url(), obj)\n                 else:\n-                    msg = f\"{msg} {escape(obj)}\"\n-                messages.success(request, mark_safe(msg))\n+                    msg = format_html(\"{} {}\", msg, obj)\n+                messages.success(request, msg)\n \n                 if \"_addanother\" in request.POST:\n                     # If the object has clone_fields, pre-populate a new instance of the form"
        },
        {
          "filename": "nautobot/ipam/tables.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -29,7 +29,7 @@\n     VRF,\n )\n \n-AVAILABLE_LABEL = mark_safe('<span class=\"label label-success\">Available</span>')\n+AVAILABLE_LABEL = mark_safe('<span class=\"label label-success\">Available</span>')  # noqa: S308\n \n UTILIZATION_GRAPH = \"\"\"\n {% load helpers %}"
        },
        {
          "filename": "nautobot/utilities/error_handlers.py",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -1,5 +1,5 @@\n from django.contrib import messages\n-from django.utils.html import escape\n+from django.utils.html import escape, format_html\n from django.utils.safestring import mark_safe\n \n \n@@ -9,18 +9,19 @@ def handle_protectederror(obj_list, request, e):\n     \"\"\"\n     protected_objects = list(e.protected_objects)\n     protected_count = len(protected_objects) if len(protected_objects) <= 50 else \"More than 50\"\n-    err_message = (\n-        f\"Unable to delete <strong>{', '.join(str(obj) for obj in obj_list)}</strong>. \"\n-        f\"{protected_count} dependent objects were found: \"\n+    err_message = format_html(\n+        \"Unable to delete <strong>{}</strong>. {} dependent objects were found: \",\n+        \", \".join(str(obj) for obj in obj_list),\n+        protected_count,\n     )\n \n     # Append dependent objects to error message\n     dependent_objects = []\n     for dependent in protected_objects[:50]:\n         if hasattr(dependent, \"get_absolute_url\"):\n-            dependent_objects.append(f'<a href=\"{dependent.get_absolute_url()}\">{escape(dependent)}</a>')\n+            dependent_objects.append(format_html('<a href=\"{}\">{}</a>', dependent.get_absolute_url(), dependent))\n         else:\n-            dependent_objects.append(str(dependent))\n-    err_message += \", \".join(dependent_objects)\n+            dependent_objects.append(escape(str(dependent)))\n+    err_message += mark_safe(\", \".join(dependent_objects))  # noqa: S308\n \n-    messages.error(request, mark_safe(err_message))\n+    messages.error(request, err_message)"
        },
        {
          "filename": "nautobot/utilities/tables.py",
          "status": "modified",
          "additions": 26,
          "deletions": 31,
          "patch": "@@ -5,7 +5,7 @@\n from django.core.exceptions import FieldDoesNotExist\n from django.db.models.fields.related import RelatedField\n from django.urls import reverse\n-from django.utils.html import escape, format_html\n+from django.utils.html import escape, format_html, format_html_join\n from django.utils.safestring import mark_safe\n from django.utils.text import Truncator\n from django_tables2.data import TableQuerysetData\n@@ -171,7 +171,7 @@ def __init__(self, *args, **kwargs):\n \n     @property\n     def header(self):\n-        return mark_safe('<input type=\"checkbox\" class=\"toggle\" title=\"Toggle all\" />')\n+        return mark_safe('<input type=\"checkbox\" class=\"toggle\" title=\"Toggle all\" />')  # noqa: S308\n \n \n class BooleanColumn(tables.Column):\n@@ -268,7 +268,7 @@ def render(self, record, bound_column, value):  # pylint: disable=arguments-diff\n             name = bound_column.name\n             css_class = getattr(record, f\"get_{name}_class\")()\n             label = getattr(record, f\"get_{name}_display\")()\n-            return mark_safe(f'<span class=\"label label-{css_class}\">{label}</span>')\n+            return format_html('<span class=\"label label-{}\">{}</span>', css_class, label)\n         return self.default\n \n \n@@ -278,7 +278,7 @@ class ColorColumn(tables.Column):\n     \"\"\"\n \n     def render(self, value):\n-        return mark_safe(f'<span class=\"label color-block\" style=\"background-color: #{value}\">&nbsp;</span>')\n+        return format_html('<span class=\"label color-block\" style=\"background-color: #{}\">&nbsp;</span>', value)\n \n \n class ColoredLabelColumn(tables.TemplateColumn):\n@@ -315,7 +315,7 @@ def render(self, record, value):  # pylint: disable=arguments-differ\n             url = reverse(self.viewname, kwargs=self.view_kwargs)\n             if self.url_params:\n                 url += \"?\" + \"&\".join([f\"{k}={getattr(record, v)}\" for k, v in self.url_params.items()])\n-            return mark_safe(f'<a href=\"{url}\">{value}</a>')\n+            return format_html('<a href=\"{}\">{}</a>', url, value)\n         return value\n \n \n@@ -403,20 +403,18 @@ def __init__(self, customfield, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n \n     def render(self, record, bound_column, value):  # pylint: disable=arguments-differ\n-        template = \"\"\n         if self.customfield.type == CustomFieldTypeChoices.TYPE_BOOLEAN:\n             template = render_boolean(value)\n         elif self.customfield.type == CustomFieldTypeChoices.TYPE_MULTISELECT:\n-            for v in value:\n-                template += format_html('<span class=\"label label-default\">{}</span> ', v)\n+            template = format_html_join(\" \", '<span class=\"label label-default\">{}</span>', ((v,) for v in value))\n         elif self.customfield.type == CustomFieldTypeChoices.TYPE_SELECT:\n             template = format_html('<span class=\"label label-default\">{}</span>', value)\n         elif self.customfield.type == CustomFieldTypeChoices.TYPE_URL:\n             template = format_html('<a href=\"{}\">{}</a>', value, value)\n         else:\n             template = escape(value)\n \n-        return mark_safe(template)\n+        return template\n \n \n class RelationshipColumn(tables.Column):\n@@ -445,30 +443,27 @@ def render(self, record, value):  # pylint: disable=arguments-differ\n             else:\n                 value = [v for v in value if v.destination_id == record.id]\n \n-        template = \"\"\n         # Handle Symmetric Relationships\n         # List `value` could be empty here [] after the filtering from above\n         if len(value) < 1:\n             return \"\u2014\"\n-        else:\n-            # Handle Relationships on the many side.\n-            if self.relationship.has_many(self.peer_side):\n-                v = value[0]\n-                meta = type(v.get_peer(record))._meta\n-                name = meta.verbose_name_plural if len(value) > 1 else meta.verbose_name\n-                template += format_html(\n-                    '<a href=\"{}?relationship={}&{}_id={}\">{} {}</a>',\n-                    reverse(\"extras:relationshipassociation_list\"),\n-                    self.relationship.slug,\n-                    self.side,\n-                    record.id,\n-                    len(value),\n-                    name,\n-                )\n-            # Handle Relationships on the one side.\n-            else:\n-                v = value[0]\n-                peer = v.get_peer(record)\n-                template += format_html('<a href=\"{}\">{}</a>', peer.get_absolute_url(), peer)\n \n-        return mark_safe(template)\n+        # Handle Relationships on the many side.\n+        if self.relationship.has_many(self.peer_side):\n+            v = value[0]\n+            meta = type(v.get_peer(record))._meta\n+            name = meta.verbose_name_plural if len(value) > 1 else meta.verbose_name\n+            return format_html(\n+                '<a href=\"{}?relationship={}&{}_id={}\">{} {}</a>',\n+                reverse(\"extras:relationshipassociation_list\"),\n+                self.relationship.slug,\n+                self.side,\n+                record.id,\n+                len(value),\n+                name,\n+            )\n+        # Handle Relationships on the one side.\n+        else:\n+            v = value[0]\n+            peer = v.get_peer(record)\n+            return format_html('<a href=\"{}\">{}</a>', peer.get_absolute_url(), peer)"
        },
        {
          "filename": "nautobot/utilities/templatetags/helpers.py",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -17,9 +17,9 @@\n from nautobot.utilities.forms import TableConfigForm\n from nautobot.utilities.utils import foreground_color, get_route_for_model, UtilizationData\n \n-HTML_TRUE = '<span class=\"text-success\"><i class=\"mdi mdi-check-bold\" title=\"Yes\"></i></span>'\n-HTML_FALSE = '<span class=\"text-danger\"><i class=\"mdi mdi-close-thick\" title=\"No\"></i></span>'\n-HTML_NONE = '<span class=\"text-muted\">&mdash;</span>'\n+HTML_TRUE = mark_safe('<span class=\"text-success\"><i class=\"mdi mdi-check-bold\" title=\"Yes\"></i></span>')  # noqa: S308\n+HTML_FALSE = mark_safe('<span class=\"text-danger\"><i class=\"mdi mdi-close-thick\" title=\"No\"></i></span>')  # noqa: S308\n+HTML_NONE = mark_safe('<span class=\"text-muted\">&mdash;</span>')  # noqa: S308\n \n DEFAULT_SUPPORT_MESSAGE = (\n     \"If further assistance is required, please join the `#nautobot` channel \"\n@@ -92,7 +92,7 @@ def placeholder(value):\n     \"\"\"\n     if value:\n         return value\n-    return mark_safe(HTML_NONE)\n+    return HTML_NONE\n \n \n @library.filter()\n@@ -116,7 +116,7 @@ def add_html_id(element_str, id_str):\n     match = re.match(r\"^(.*?<\\w+) ?(.*)$\", element_str, flags=re.DOTALL)\n     if not match:\n         return element_str\n-    return mark_safe(match.group(1) + format_html(' id=\"{}\" ', id_str) + match.group(2))\n+    return mark_safe(match.group(1) + format_html(' id=\"{}\" ', id_str) + match.group(2))  # noqa: S308\n \n \n @library.filter()\n@@ -147,10 +147,10 @@ def render_boolean(value):\n         '<span class=\"text-danger\"><i class=\"mdi mdi-close-thick\" title=\"No\"></i></span>'\n     \"\"\"\n     if value is None:\n-        return mark_safe(HTML_NONE)\n+        return HTML_NONE\n     if bool(value):\n-        return mark_safe(HTML_TRUE)\n-    return mark_safe(HTML_FALSE)\n+        return HTML_TRUE\n+    return HTML_FALSE\n \n \n @library.filter()\n@@ -173,7 +173,7 @@ def render_markdown(value):\n     # Render Markdown\n     html = markdown(value, extensions=[\"fenced_code\", \"tables\"])\n \n-    return mark_safe(html)\n+    return mark_safe(html)  # noqa: S308\n \n \n @library.filter()"
        },
        {
          "filename": "nautobot/utilities/utils.py",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -370,7 +370,11 @@ def render_jinja2(template_code, context):\n     \"\"\"\n     rendering_engine = engines[\"jinja\"]\n     template = rendering_engine.from_string(template_code)\n-    return template.render(context=context)\n+    # For reasons unknown to me, django-jinja2 `template.render()` implicitly calls `mark_safe()` on the rendered text.\n+    # This is a security risk in general, especially so in our case because we're often using this function to render\n+    # a user-provided template and don't want to open ourselves up to script injection or similar issues.\n+    # There's no `mark_unsafe()` function, but concatenating a SafeString to an ordinary string (even \"\") suffices.\n+    return \"\" + template.render(context=context)\n \n \n def prepare_cloned_fields(instance):"
        },
        {
          "filename": "poetry.lock",
          "status": "modified",
          "additions": 27,
          "deletions": 1,
          "patch": "@@ -3306,6 +3306,32 @@ files = [\n [package.dependencies]\n pyasn1 = \">=0.1.3\"\n \n+[[package]]\n+name = \"ruff\"\n+version = \"0.1.6\"\n+description = \"An extremely fast Python linter and code formatter, written in Rust.\"\n+optional = false\n+python-versions = \">=3.7\"\n+files = [\n+    {file = \"ruff-0.1.6-py3-none-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:88b8cdf6abf98130991cbc9f6438f35f6e8d41a02622cc5ee130a02a0ed28703\"},\n+    {file = \"ruff-0.1.6-py3-none-macosx_10_12_x86_64.whl\", hash = \"sha256:5c549ed437680b6105a1299d2cd30e4964211606eeb48a0ff7a93ef70b902248\"},\n+    {file = \"ruff-0.1.6-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1cf5f701062e294f2167e66d11b092bba7af6a057668ed618a9253e1e90cfd76\"},\n+    {file = \"ruff-0.1.6-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:05991ee20d4ac4bb78385360c684e4b417edd971030ab12a4fbd075ff535050e\"},\n+    {file = \"ruff-0.1.6-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:87455a0c1f739b3c069e2f4c43b66479a54dea0276dd5d4d67b091265f6fd1dc\"},\n+    {file = \"ruff-0.1.6-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl\", hash = \"sha256:683aa5bdda5a48cb8266fcde8eea2a6af4e5700a392c56ea5fb5f0d4bfdc0240\"},\n+    {file = \"ruff-0.1.6-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:137852105586dcbf80c1717facb6781555c4e99f520c9c827bd414fac67ddfb6\"},\n+    {file = \"ruff-0.1.6-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:bd98138a98d48a1c36c394fd6b84cd943ac92a08278aa8ac8c0fdefcf7138f35\"},\n+    {file = \"ruff-0.1.6-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3a0cd909d25f227ac5c36d4e7e681577275fb74ba3b11d288aff7ec47e3ae745\"},\n+    {file = \"ruff-0.1.6-py3-none-musllinux_1_2_aarch64.whl\", hash = \"sha256:e8fd1c62a47aa88a02707b5dd20c5ff20d035d634aa74826b42a1da77861b5ff\"},\n+    {file = \"ruff-0.1.6-py3-none-musllinux_1_2_armv7l.whl\", hash = \"sha256:fd89b45d374935829134a082617954120d7a1470a9f0ec0e7f3ead983edc48cc\"},\n+    {file = \"ruff-0.1.6-py3-none-musllinux_1_2_i686.whl\", hash = \"sha256:491262006e92f825b145cd1e52948073c56560243b55fb3b4ecb142f6f0e9543\"},\n+    {file = \"ruff-0.1.6-py3-none-musllinux_1_2_x86_64.whl\", hash = \"sha256:ea284789861b8b5ca9d5443591a92a397ac183d4351882ab52f6296b4fdd5462\"},\n+    {file = \"ruff-0.1.6-py3-none-win32.whl\", hash = \"sha256:1610e14750826dfc207ccbcdd7331b6bd285607d4181df9c1c6ae26646d6848a\"},\n+    {file = \"ruff-0.1.6-py3-none-win_amd64.whl\", hash = \"sha256:4558b3e178145491e9bc3b2ee3c4b42f19d19384eaa5c59d10acf6e8f8b57e33\"},\n+    {file = \"ruff-0.1.6-py3-none-win_arm64.whl\", hash = \"sha256:03910e81df0d8db0e30050725a5802441c2022ea3ae4fe0609b76081731accbc\"},\n+    {file = \"ruff-0.1.6.tar.gz\", hash = \"sha256:1b09f29b16c6ead5ea6b097ef2764b42372aebe363722f1605ecbcd2b9207184\"},\n+]\n+\n [[package]]\n name = \"rx\"\n version = \"1.6.3\"\n@@ -3972,4 +3998,4 @@ sso = [\"social-auth-core\"]\n [metadata]\n lock-version = \"2.0\"\n python-versions = \">=3.8,<3.12\"\n-content-hash = \"613ed75e90d9c9a0f1a4450fc2c4763ef79d4654c03a2066176408c6064d7661\"\n+content-hash = \"fd455e4a2825d191443cba74a3143a2f7afb25ab19ecdad85b0f25feebd94982\""
        },
        {
          "filename": "pyproject.toml",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -199,6 +199,8 @@ flake8 = {version = \"~6.0.0\", python = \"^3.8.1\"}\n pylint = \"~2.17.4\"\n # Pylint extensions for Django\n pylint-django = \"~2.5.3\"\n+# Combination linter and code formatter\n+ruff = \"~0.1.6\"\n \n [tool.poetry.group.testing.dependencies]\n # Test code coverage measurement\n@@ -333,6 +335,26 @@ notes = \"\"\",\n # @patch changes the signature of a function it's applied to; don't raise \"no-value-for-parameter\" here\n signature-mutators=[\"unittest.mock.patch\"]\n \n+[tool.ruff]\n+line-length = 120\n+target-version = \"py38\"\n+\n+[tool.ruff.lint]\n+select = [\n+    \"E\",  # pycodestyle\n+    \"F\",  # pyflakes\n+    # \"I\",  # isort\n+    \"S308\",  # flake8-bandit: suspicious-mark-safe-usage\n+    \"W\",  # pycodestyle\n+]\n+ignore = [\n+    \"E501\",  # pycodestyle: line-too-long\n+]\n+\n+[tool.ruff.lint.isort]\n+lines-after-imports = 2\n+force-sort-within-sections = true\n+\n [tool.towncrier]\n package = \"nautobot\"\n directory = \"changes\""
        },
        {
          "filename": "scripts/git-hooks/pre-commit",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -42,6 +42,9 @@ else\n     invoke markdownlint || EXIT=1\n fi\n \n+echo \"Check static analysis via ruff...\"\n+invoke ruff || EXIT=1\n+\n echo \"Check static analysis via pylint...\"\n invoke pylint || EXIT=1\n "
        },
        {
          "filename": "tasks.py",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -599,6 +599,13 @@ def pylint(context, target=None, recursive=False):\n         run_command(context, command)\n \n \n+@task\n+def ruff(context, output_format=\"text\"):\n+    \"\"\"Run ruff to perform static analysis and linting.\"\"\"\n+    command = f\"ruff --output-format {output_format} development/ examples/ nautobot/ tasks.py\"\n+    run_command(context, command)\n+\n+\n @task\n def serve_docs(context):\n     \"\"\"Runs local instance of mkdocs serve (ctrl-c to stop).\"\"\"\n@@ -849,6 +856,7 @@ def tests(context, lint_only=False, keepdb=False):\n     flake8(context)\n     hadolint(context)\n     markdownlint(context)\n+    ruff(context)\n     pylint(context)\n     check_migrations(context)\n     check_schema(context)"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 16,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "082404e6cc63181ee2b47eae9cda5a6bec0601b2",
            "date": "2025-01-10T17:11:08Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "f979d876c9c747a129975124f213ee606d8846e8",
            "date": "2025-01-10T15:50:52Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "3e2f8b5787971c267c87a5f1ffdfda045fdd3eb9",
            "date": "2025-01-10T15:36:42Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "e5397443c821333bcfd193374458fb88ff45175f",
            "date": "2025-01-09T22:12:11Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "64ae4d2b7f018dc4fb43beff1f3a3144ae15ef0a",
            "date": "2025-01-09T22:09:46Z",
            "author_login": "HanlinMiao"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:H/A:L",
    "cwe_id": "CWE-79",
    "description": "Nautobot is a Network Source of Truth and Network Automation Platform built as a web application All users of Nautobot versions earlier than 1.6.6 or 2.0.5 are potentially affected by a cross-site scripting vulnerability. Due to incorrect usage of Django's `mark_safe()` API when rendering certain types of user-authored content; including custom links, job buttons, and computed fields; it is possible that users with permission to create or edit these types of content could craft a malicious payload (such as JavaScript code) that would be executed when rendering pages containing this content. The maintainers have fixed the incorrect uses of `mark_safe()` (generally by replacing them with appropriate use of `format_html()` instead) to prevent such malicious data from being executed. Users on Nautobot 1.6.x LTM should upgrade to v1.6.6 and users on Nautobot 2.0.x should upgrade to v2.0.5. Appropriate object permissions can and should be applied to restrict which users are permitted to create or edit the aforementioned types of user-authored content. Other than that, there is no direct workaround available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-11-22T16:15:09.627",
    "last_modified": "2024-11-21T08:32:17.830",
    "fix_date": "2023-11-21T22:25:37Z"
  },
  "references": [
    {
      "url": "https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html",
      "source": "security-advisories@github.com",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe",
      "source": "security-advisories@github.com",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/4832",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/4833",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Technical Description"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/4832",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/4833",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.280725",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nautobot",
    "owner": "nautobot",
    "created_at": "2021-02-19T22:00:19Z",
    "updated_at": "2025-01-13T11:52:13Z",
    "pushed_at": "2025-01-14T12:37:17Z",
    "size": 158251,
    "stars": 1107,
    "forks": 298,
    "open_issues": 881,
    "watchers": 1107,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "ltm-1.6",
      "main",
      "next"
    ],
    "languages": {
      "Python": 8160292,
      "HTML": 1071092,
      "JavaScript": 95221,
      "CSS": 45096,
      "Jinja": 28376,
      "Gherkin": 14390,
      "Dockerfile": 11222,
      "Shell": 8955
    },
    "commit_activity": {
      "total_commits_last_year": 1444,
      "avg_commits_per_week": 27.76923076923077,
      "days_active_last_year": 230
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:49:58.690841"
  }
}