{
  "cve_id": "CVE-2023-48706",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "26c11c56888d01e298cd8044caf860f3c26f57bb",
    "related_commits": [
      "26c11c56888d01e298cd8044caf860f3c26f57bb",
      "26c11c56888d01e298cd8044caf860f3c26f57bb"
    ],
    "patch_url": "https://github.com/vim/vim/commit/26c11c56888d01e298cd8044caf860f3c26f57bb.patch",
    "fix_commit_details": {
      "sha": "26c11c56888d01e298cd8044caf860f3c26f57bb",
      "commit_date": "2023-11-22T20:26:41Z",
      "author": {
        "login": "chrisbra",
        "type": "User",
        "stats": {
          "total_commits": 629,
          "average_weekly_commits": 0.5851162790697675,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 115
        }
      },
      "commit_message": {
        "title": "patch 9.0.2121: [security]: use-after-free in ex_substitute",
        "length": 1813,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 100,
        "additions": 85,
        "deletions": 15
      },
      "files": [
        {
          "filename": "src/ex_cmds.c",
          "status": "modified",
          "additions": 37,
          "deletions": 13,
          "patch": "@@ -3737,13 +3737,13 @@ ex_substitute(exarg_T *eap)\n     int\t\tsave_do_all;\t\t// remember user specified 'g' flag\n     int\t\tsave_do_ask;\t\t// remember user specified 'c' flag\n     char_u\t*pat = NULL, *sub = NULL;\t// init for GCC\n-    char_u\t*sub_copy = NULL;\n     int\t\tdelimiter;\n     int\t\tsublen;\n     int\t\tgot_quit = FALSE;\n     int\t\tgot_match = FALSE;\n     int\t\twhich_pat;\n     char_u\t*cmd;\n+    char_u\t*p;\n     int\t\tsave_State;\n     linenr_T\tfirst_line = 0;\t\t// first changed line\n     linenr_T\tlast_line= 0;\t\t// below last changed line AFTER the\n@@ -3827,8 +3827,12 @@ ex_substitute(exarg_T *eap)\n \t * Small incompatibility: vi sees '\\n' as end of the command, but in\n \t * Vim we want to use '\\n' to find/substitute a NUL.\n \t */\n-\tsub = cmd;\t    // remember the start of the substitution\n+\tp = cmd;\t    // remember the start of the substitution\n \tcmd = skip_substitute(cmd, delimiter);\n+\tsub = vim_strsave(p);\n+\tif (sub == NULL)\n+\t    // out of memory\n+\t    return;\n \n \tif (!eap->skip)\n \t{\n@@ -3839,14 +3843,22 @@ ex_substitute(exarg_T *eap)\n \t\tif (old_sub == NULL)\t// there is no previous command\n \t\t{\n \t\t    emsg(_(e_no_previous_substitute_regular_expression));\n+\t\t    vim_free(sub);\n \t\t    return;\n \t\t}\n-\t\tsub = old_sub;\n+\t\tvim_free(sub);\n+\t\tsub = vim_strsave(old_sub);\n+\t\tif (sub == NULL)\n+\t\t    // out of memory\n+\t\t    return;\n \t    }\n \t    else\n \t    {\n \t\tvim_free(old_sub);\n \t\told_sub = vim_strsave(sub);\n+\t\tif (old_sub == NULL)\n+\t\t    // out of memory\n+\t\t    return;\n \t    }\n \t}\n     }\n@@ -3858,7 +3870,7 @@ ex_substitute(exarg_T *eap)\n \t    return;\n \t}\n \tpat = NULL;\t\t// search_regcomp() will use previous pattern\n-\tsub = old_sub;\n+\tsub = vim_strsave(old_sub);\n \n \t// Vi compatibility quirk: repeating with \":s\" keeps the cursor in the\n \t// last column after using \"$\".\n@@ -3877,7 +3889,10 @@ ex_substitute(exarg_T *eap)\n \tlinenr_T    joined_lines_count;\n \n \tif (eap->skip)\n+\t{\n+\t    vim_free(sub);\n \t    return;\n+\t}\n \tcurwin->w_cursor.lnum = eap->line1;\n \tif (*cmd == 'l')\n \t    eap->flags = EXFLAG_LIST;\n@@ -3904,6 +3919,7 @@ ex_substitute(exarg_T *eap)\n \t    save_re_pat(RE_SUBST, pat, magic_isset());\n \t// put pattern in history\n \tadd_to_history(HIST_SEARCH, pat, TRUE, NUL);\n+\tvim_free(sub);\n \n \treturn;\n     }\n@@ -3991,13 +4007,15 @@ ex_substitute(exarg_T *eap)\n \tif (i <= 0 && !eap->skip && subflags.do_error)\n \t{\n \t    emsg(_(e_positive_count_required));\n+\t    vim_free(sub);\n \t    return;\n \t}\n \telse if (i >= INT_MAX)\n \t{\n \t    char\tbuf[20];\n \t    vim_snprintf(buf, sizeof(buf), \"%ld\", i);\n \t    semsg(_(e_val_too_large), buf);\n+\t    vim_free(sub);\n \t    return;\n \t}\n \teap->line1 = eap->line2;\n@@ -4016,24 +4034,30 @@ ex_substitute(exarg_T *eap)\n \tif (eap->nextcmd == NULL)\n \t{\n \t    semsg(_(e_trailing_characters_str), cmd);\n+\t    vim_free(sub);\n \t    return;\n \t}\n     }\n \n     if (eap->skip)\t    // not executing commands, only parsing\n+    {\n+\tvim_free(sub);\n \treturn;\n+    }\n \n     if (!subflags.do_count && !curbuf->b_p_ma)\n     {\n \t// Substitution is not allowed in non-'modifiable' buffer\n \temsg(_(e_cannot_make_changes_modifiable_is_off));\n+\tvim_free(sub);\n \treturn;\n     }\n \n     if (search_regcomp(pat, NULL, RE_SUBST, which_pat, SEARCH_HIS, &regmatch) == FAIL)\n     {\n \tif (subflags.do_error)\n \t    emsg(_(e_invalid_command));\n+\tvim_free(sub);\n \treturn;\n     }\n \n@@ -4054,20 +4078,20 @@ ex_substitute(exarg_T *eap)\n      */\n     if (sub[0] == '\\\\' && sub[1] == '=')\n     {\n-\tsub = vim_strsave(sub);\n-\tif (sub == NULL)\n+\tp = vim_strsave(sub);\n+\tvim_free(sub);\n+\tif (p == NULL)\n \t    return;\n-\tsub_copy = sub;\n+\tsub = p;\n     }\n     else\n     {\n-\tchar_u *newsub = regtilde(sub, magic_isset());\n+\tp = regtilde(sub, magic_isset());\n \n-\tif (newsub != sub)\n+\tif (p != sub)\n \t{\n-\t    // newsub was allocated, free it later.\n-\t    sub_copy = newsub;\n-\t    sub = newsub;\n+\t    vim_free(sub);\n+\t    sub = p;\n \t}\n     }\n \n@@ -4965,7 +4989,7 @@ ex_substitute(exarg_T *eap)\n #endif\n \n     vim_regfree(regmatch.regprog);\n-    vim_free(sub_copy);\n+    vim_free(sub);\n \n     // Restore the flag values, they can be used for \":&&\".\n     subflags.do_all = save_do_all;"
        },
        {
          "filename": "src/testdir/test_substitute.vim",
          "status": "modified",
          "additions": 46,
          "deletions": 2,
          "patch": "@@ -4,6 +4,32 @@ source shared.vim\n source check.vim\n source screendump.vim\n \n+\" NOTE: This needs to be the first test to be\n+\"       run in the file, since it depends on\n+\"       that the previous substitution atom\n+\"       was not yet set.\n+\"\n+\" recursive call of :s and sub-replace special\n+\" (did cause heap-use-after free in < v9.0.2121)\n+func Test_aaaa_substitute_expr_recursive_special()\n+  func R()\n+    \" FIXME: leaving out the 'n' flag leaks memory, why?\n+    %s/./\\='.'/gn\n+  endfunc\n+  new Xfoobar_UAF\n+  put ='abcdef'\n+  let bufnr = bufnr('%')\n+  try\n+    silent! :s/./~\\=R()/0\n+    \"call assert_fails(':s/./~\\=R()/0', 'E939:')\n+    let @/='.'\n+    ~g\n+  catch /^Vim\\%((\\a\\+)\\)\\=:E565:/\n+  endtry\n+  delfunc R\n+  exe bufnr .. \"bw!\"\n+endfunc\n+\n func Test_multiline_subst()\n   enew!\n   call append(0, [\"1 aa\",\n@@ -147,7 +173,6 @@ func Test_substitute_repeat()\n   call feedkeys(\"Qsc\\<CR>y\", 'tx')\n   bwipe!\n endfunc\n-\n \" Test %s/\\n// which is implemented as a special case to use a\n \" more efficient join rather than doing a regular substitution.\n func Test_substitute_join()\n@@ -1447,11 +1472,30 @@ func Test_substitute_expr_switch_win()\n   endfunc\n   new Xfoobar\n   let bufnr = bufnr('%')\n-  put =\"abcdef\"\n+  put ='abcdef'\n   silent! s/\\%')/\\=R()\n   call assert_fails(':%s/./\\=R()/g', 'E565:')\n   delfunc R\n   exe bufnr .. \"bw!\"\n endfunc\n \n+\" recursive call of :s using test-replace special\n+func Test_substitute_expr_recursive()\n+  func Q()\n+    %s/./\\='foobar'/gn\n+    return \"foobar\"\n+  endfunc\n+  func R()\n+    %s/./\\=Q()/g\n+  endfunc\n+  new Xfoobar_UAF\n+  let bufnr = bufnr('%')\n+  put ='abcdef'\n+  silent! s/./\\=R()/g\n+  call assert_fails(':%s/./\\=R()/g', 'E565:')\n+  delfunc R\n+  delfunc Q\n+  exe bufnr .. \"bw!\"\n+endfunc\n+\n \" vim: shiftwidth=2 sts=2 expandtab"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -704,6 +704,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    2121,\n /**/\n     2120,\n /**/"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1aefe1de0b20fe4966863e07efa14b6aa87323ee",
            "date": "2025-01-14T16:29:42Z",
            "author_login": "yegappan"
          },
          {
            "sha": "1ac53b84ada3a992f320566737e66fa00d48611f",
            "date": "2025-01-14T16:25:02Z",
            "author_login": "chrisbra"
          },
          {
            "sha": "57f0119358ed7f060d5020309b9043463121435f",
            "date": "2025-01-14T16:21:42Z",
            "author_login": "h-east"
          },
          {
            "sha": "045564d0a73218594691953c0c8bf2035e1e176e",
            "date": "2025-01-14T16:15:59Z",
            "author_login": "habamax"
          },
          {
            "sha": "6289f9159102e0855bedc566636b5e7ca6ced72c",
            "date": "2025-01-14T16:13:36Z",
            "author_login": "yegappan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.6,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:L",
    "cwe_id": "CWE-416",
    "description": "Vim is a UNIX editor that, prior to version 9.0.2121, has a heap-use-after-free vulnerability. When executing a `:s` command for the very first time and using a sub-replace-special atom inside the substitution part, it is possible that the recursive `:s` call causes free-ing of memory which may later then be accessed by the initial `:s` command. The user must intentionally execute the payload and the whole process is a bit tricky to do since it seems to work only reliably for the very first :s command. It may also cause a crash of Vim. Version 9.0.2121 contains a fix for this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-11-22T22:15:08.673",
    "last_modified": "2024-11-21T08:32:17.980",
    "fix_date": "2023-11-22T20:26:41Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2023/11/22/3",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gandalf4a/crash_report/blob/main/vim/vim_huaf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/26c11c56888d01e298cd8044caf860f3c26f57bb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vim/vim/pull/13552",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vim/vim/security/advisories/GHSA-c8qm-x72m-q53q",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNMFS3IH74KEMMESOA3EOB6MZ56TWGFF/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IVA7K73WHQH4KVFDJQ7ELIUD2WK5ZT5E/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240105-0001/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2023/11/22/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gandalf4a/crash_report/blob/main/vim/vim_huaf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/26c11c56888d01e298cd8044caf860f3c26f57bb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vim/vim/pull/13552",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vim/vim/security/advisories/GHSA-c8qm-x72m-q53q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNMFS3IH74KEMMESOA3EOB6MZ56TWGFF/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IVA7K73WHQH4KVFDJQ7ELIUD2WK5ZT5E/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240105-0001/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.281824",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}