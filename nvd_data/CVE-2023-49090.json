{
  "cve_id": "CVE-2023-49090",
  "github_data": {
    "repository": "carrierwaveuploader/carrierwave",
    "fix_commit": "39b282db5c1303899b3d3381ce8a837840f983b5",
    "related_commits": [
      "39b282db5c1303899b3d3381ce8a837840f983b5",
      "863d425c76eba12c3294227b39018f6b2dccbbf3",
      "39b282db5c1303899b3d3381ce8a837840f983b5",
      "863d425c76eba12c3294227b39018f6b2dccbbf3"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "39b282db5c1303899b3d3381ce8a837840f983b5",
      "commit_date": "2023-11-28T04:42:21Z",
      "author": {
        "login": "mshibuya",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix Content-Type allowlist bypass vulnerability",
        "length": 145,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 29,
        "additions": 28,
        "deletions": 1
      },
      "files": [
        {
          "filename": "lib/carrierwave/uploader/content_type_whitelist.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -51,7 +51,7 @@ def check_content_type_whitelist!(new_file)\n       def whitelisted_content_type?(content_type)\n         Array(content_type_allowlist).any? do |item|\n           item = Regexp.quote(item) if item.class != Regexp\n-          content_type =~ /#{item}/\n+          content_type =~ /\\A#{item}/\n         end\n       end\n "
        },
        {
          "filename": "spec/uploader/content_type_whitelist_spec.rb",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -76,6 +76,33 @@\n           expect { uploader.cache!(ruby_file) }.not_to raise_error\n         end\n       end\n+\n+      context \"with a crafted content type\" do\n+        before do\n+          allow(bork_file).to receive(:content_type).and_return('text/plain; image/png')\n+          allow(uploader).to receive(:content_type_allowlist).and_return('image/png')\n+        end\n+\n+        it \"does not allow spoofing\" do\n+          expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError)\n+        end\n+      end\n+\n+      context \"when the allowlist contains charset\" do\n+        before do\n+          allow(uploader).to receive(:content_type_allowlist).and_return(%r{text/plain;\\s*charset=utf-8})\n+        end\n+\n+        it \"accepts the content with allowed charset\" do\n+          allow(bork_file).to receive(:content_type).and_return('text/plain; charset=utf-8')\n+          expect { uploader.cache!(bork_file) }.not_to raise_error\n+        end\n+\n+        it \"rejects the content without charset\" do\n+          allow(bork_file).to receive(:content_type).and_return('text/plain')\n+          expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError)\n+        end\n+      end\n     end\n \n     context \"when there is a whitelist\" do"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "550e423fbd5cd45cac262e2c5d13bfe778be5093",
            "date": "2025-01-12T08:36:22Z",
            "author_login": "mshibuya"
          },
          {
            "sha": "23bfc39b1ee5b64f1f92fc238d08308cb9a84b37",
            "date": "2025-01-11T06:20:37Z",
            "author_login": "mshibuya"
          },
          {
            "sha": "ee241333c91c2f4898e936403dd2d987603b64f8",
            "date": "2025-01-11T05:33:51Z",
            "author_login": "mshibuya"
          },
          {
            "sha": "08a36988fc6d615b5c947e30b8d6f344e289a2e1",
            "date": "2025-01-11T05:21:46Z",
            "author_login": "mshibuya"
          },
          {
            "sha": "b4d43c328e41c2fb4f5c217ac5b3a8a4f7288f60",
            "date": "2025-01-11T05:17:05Z",
            "author_login": "mshibuya"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-79",
    "description": "CarrierWave is a solution for file uploads for Rails, Sinatra and other Ruby web frameworks. CarrierWave has a Content-Type allowlist bypass vulnerability, possibly leading to XSS. The validation in `allowlisted_content_type?` determines Content-Type permissions by performing a partial match. If the `content_type` argument of `allowlisted_content_type?` is passed a value crafted by the attacker, Content-Types not included in the `content_type_allowlist` will be allowed. This issue has been patched in versions 2.2.5 and 3.0.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-29T15:15:08.900",
    "last_modified": "2024-11-21T08:32:48.110",
    "fix_date": "2023-11-28T04:42:21Z"
  },
  "references": [
    {
      "url": "https://github.com/carrierwaveuploader/carrierwave/commit/39b282db5c1303899b3d3381ce8a837840f983b5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/carrierwaveuploader/carrierwave/commit/863d425c76eba12c3294227b39018f6b2dccbbf3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/carrierwaveuploader/carrierwave/security/advisories/GHSA-gxhx-g4fq-49hj",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/carrierwaveuploader/carrierwave/commit/39b282db5c1303899b3d3381ce8a837840f983b5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/carrierwaveuploader/carrierwave/commit/863d425c76eba12c3294227b39018f6b2dccbbf3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/carrierwaveuploader/carrierwave/security/advisories/GHSA-gxhx-g4fq-49hj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.294966",
    "processing_status": "enhanced"
  }
}