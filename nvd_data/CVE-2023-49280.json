{
  "cve_id": "CVE-2023-49280",
  "github_data": {
    "repository": "xwiki-contrib/application-changerequest",
    "fix_commit": "ff0f5368ea04f0e4aa7b33821c707dc68a8c5ca8",
    "related_commits": [
      "ff0f5368ea04f0e4aa7b33821c707dc68a8c5ca8",
      "ff0f5368ea04f0e4aa7b33821c707dc68a8c5ca8"
    ],
    "patch_url": "https://github.com/xwiki-contrib/application-changerequest/commit/ff0f5368ea04f0e4aa7b33821c707dc68a8c5ca8.patch",
    "fix_commit_details": {
      "sha": "ff0f5368ea04f0e4aa7b33821c707dc68a8c5ca8",
      "commit_date": "2023-08-29T16:36:59Z",
      "author": {
        "login": "surli",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "CRAPP-302: Edit button is not displayed for guest user",
        "length": 116,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 291,
        "additions": 284,
        "deletions": 7
      },
      "files": [
        {
          "filename": "application-changerequest-api/src/main/java/org/xwiki/contrib/changerequest/ChangeRequestRightsManager.java",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -201,4 +201,33 @@ default boolean isAuthorizedToSplit(UserReference userReference, ChangeRequest c\n     {\n         return false;\n     }\n+\n+    /**\n+     * Check if the given user is allowed to use change request to edit the given document reference.\n+     * @param userReference the user for whom to perform the check\n+     * @param documentReference the reference for which to check authorization\n+     * @return {@code true} if the given user is allowed to perform the edition with change request\n+     * @throws ChangeRequestException in case of problem when performing the check\n+     * @since 1.10\n+     */\n+    default boolean isEditWithChangeRequestAllowed(UserReference userReference, DocumentReference documentReference)\n+        throws ChangeRequestException\n+    {\n+        return false;\n+    }\n+\n+    /**\n+     * Check if the given user is allowed to use change request to create a document having the given reference for\n+     * parent.\n+     * @param userReference the user for whom to perform the check\n+     * @param parentSpaceReference the parent space where the new document would be created\n+     * @return {@code true} if the given user is allowed to create a document with change request at the given place\n+     * @throws ChangeRequestException in case of problem when performing the check\n+     * @since 1.10\n+     */\n+    default boolean isCreateWithChangeRequestAllowed(UserReference userReference,\n+        DocumentReference parentSpaceReference) throws ChangeRequestException\n+    {\n+        return false;\n+    }\n }"
        },
        {
          "filename": "application-changerequest-default/src/checkstyle/checkstyle-suppressions.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -53,4 +53,5 @@\n   <suppress checks=\"ClassFanOutComplexity\" files=\"ChangeRequestScriptService.java\"/>\n   <suppress checks=\"ClassFanOutComplexity\" files=\"ChangeRequestResourceHandler.java\"/>\n   <suppress checks=\"CyclomaticComplexity\" files=\"RightsUpdatedListener.java\"/>\n+  <suppress checks=\"CyclomaticComplexity\" files=\"AbstractChangeRequestActionHandler.java\"/>\n </suppressions>"
        },
        {
          "filename": "application-changerequest-default/src/main/java/org/xwiki/contrib/changerequest/internal/DefaultChangeRequestRightsManager.java",
          "status": "modified",
          "additions": 73,
          "deletions": 0,
          "patch": "@@ -20,14 +20,18 @@\n package org.xwiki.contrib.changerequest.internal;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n \n import javax.inject.Inject;\n+import javax.inject.Provider;\n import javax.inject.Singleton;\n \n import org.xwiki.component.annotation.Component;\n@@ -40,6 +44,7 @@\n import org.xwiki.contrib.changerequest.DelegateApproverManager;\n import org.xwiki.contrib.changerequest.FileChange;\n import org.xwiki.contrib.changerequest.rights.ChangeRequestApproveRight;\n+import org.xwiki.contrib.changerequest.rights.ChangeRequestRight;\n import org.xwiki.contrib.rights.RightsReader;\n import org.xwiki.contrib.rights.RightsWriter;\n import org.xwiki.contrib.rights.SecurityRuleAbacus;\n@@ -59,7 +64,12 @@\n import org.xwiki.user.GuestUserReference;\n import org.xwiki.user.UserReference;\n \n+import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.objects.classes.PasswordClass;\n+import com.xpn.xwiki.objects.classes.PropertyClass;\n \n /**\n  * Component in charge of performing right synchronization operations.\n@@ -98,6 +108,9 @@ public class DefaultChangeRequestRightsManager implements ChangeRequestRightsMan\n     @Inject\n     private ChangeRequestConfiguration configuration;\n \n+    @Inject\n+    private Provider<XWikiContext> contextProvider;\n+\n     @Override\n     public void copyAllButViewRights(ChangeRequest originalChangeRequest, ChangeRequest targetChangeRequest)\n         throws ChangeRequestException\n@@ -618,4 +631,64 @@ public boolean isAuthorizedToSplit(UserReference userReference, ChangeRequest ch\n         }\n         return result;\n     }\n+\n+    @Override\n+    public boolean isEditWithChangeRequestAllowed(UserReference userReference, DocumentReference documentReference)\n+        throws ChangeRequestException\n+    {\n+        DocumentReference userDocReference = this.userReferenceConverter.convert(userReference);\n+        boolean hasCREdit = this.authorizationManager.hasAccess(ChangeRequestRight.getRight(), userDocReference,\n+            documentReference);\n+        boolean result = false;\n+        // if the user doesn't have CR edit right, then it's already solved.\n+        if (hasCREdit) {\n+            XWikiContext context = this.contextProvider.get();\n+            try {\n+                XWikiDocument document = context.getWiki().getDocument(documentReference, context);\n+                // if it's a new document, we don't care\n+                if (document.isNew()) {\n+                    result = true;\n+                } else {\n+                    Map<DocumentReference, List<BaseObject>> objects = document.getXObjects();\n+                    boolean foundOneObjectWithPassword = false;\n+                    for (Map.Entry<DocumentReference, List<BaseObject>> objectsEntry : objects.entrySet()) {\n+                        Optional<BaseObject> baseObjectOpt =\n+                            objectsEntry.getValue().stream().filter(Objects::nonNull).findFirst();\n+                        if (baseObjectOpt.isPresent() && this.isObjectContainingPassword(baseObjectOpt.get())) {\n+                            foundOneObjectWithPassword = true;\n+                            break;\n+                        }\n+                    }\n+                    if (!foundOneObjectWithPassword) {\n+                        result = true;\n+                    }\n+                }\n+            } catch (XWikiException e) {\n+                throw new ChangeRequestException(String.format(\"Cannot load document [%s] to check if CR right should \"\n+                    + \"be granted for user [%s]\", documentReference, userDocReference), e);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean isCreateWithChangeRequestAllowed(UserReference userReference, DocumentReference parentSpaceReference)\n+        throws ChangeRequestException\n+    {\n+        DocumentReference userDocReference = this.userReferenceConverter.convert(userReference);\n+        return this.authorizationManager.hasAccess(ChangeRequestRight.getRight(), userDocReference,\n+            parentSpaceReference);\n+    }\n+\n+    private boolean isObjectContainingPassword(BaseObject baseObject)\n+    {\n+        XWikiContext context = contextProvider.get();\n+        Collection<PropertyClass> propertyClassCollection = baseObject.getXClass(context).getFieldList();\n+        for (PropertyClass propertyClass : propertyClassCollection) {\n+            if (propertyClass instanceof PasswordClass) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }"
        },
        {
          "filename": "application-changerequest-default/src/main/java/org/xwiki/contrib/changerequest/internal/handlers/AbstractChangeRequestActionHandler.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -202,6 +202,12 @@ protected XWikiDocument prepareDocument(HttpServletRequest request, EditForm edi\n         XWikiContext context = this.contextProvider.get();\n         String serializedDocReference = request.getParameter(\"docReference\");\n         DocumentReference documentReference = this.documentReferenceResolver.resolve(serializedDocReference);\n+        UserReference currentUserReference = this.currentUserReferenceResolver.resolve(CurrentUserReference.INSTANCE);\n+        if (!this.changeRequestRightsManager.isEditWithChangeRequestAllowed(currentUserReference, documentReference)) {\n+            throw new ChangeRequestException(\n+                String.format(\"User [%s] is not allowed to edit the document [%s] through a change request.\",\n+                    currentUserReference, documentReference));\n+        }\n \n         XWikiDocument modifiedDocument = null;\n         try {"
        },
        {
          "filename": "application-changerequest-default/src/main/java/org/xwiki/contrib/changerequest/script/ChangeRequestAuthorizationScriptService.java",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -242,4 +242,33 @@ public boolean isAuthorizedToSplit(ChangeRequest changeRequest)\n         UserReference currentUserReference = this.currentUserReferenceResolver.resolve(CurrentUserReference.INSTANCE);\n         return this.changeRequestRightsManager.isAuthorizedToSplit(currentUserReference, changeRequest);\n     }\n+\n+    /**\n+     * Check if the current user is allowed to use change request to edit the given document reference.\n+     * @param documentReference the reference for which to check authorization\n+     * @return {@code true} if current user is allowed to perform the edition with change request\n+     * @throws ChangeRequestException in case of problem when performing the checks\n+     * @since 1.10\n+     */\n+    public boolean isEditWithChangeRequestAllowed(DocumentReference documentReference) throws ChangeRequestException\n+    {\n+        UserReference currentUserReference = this.currentUserReferenceResolver.resolve(CurrentUserReference.INSTANCE);\n+        return this.changeRequestRightsManager.isEditWithChangeRequestAllowed(currentUserReference, documentReference);\n+    }\n+\n+    /**\n+     * Check if the current user is allowed to use change request to create a document having the given reference for\n+     * parent.\n+     * @param parentSpaceReference the parent space where the new document would be created\n+     * @return {@code true} if current user is allowed to create a document with change request at the given place\n+     * @throws ChangeRequestException in case of problem when performing the checks\n+     * @since 1.10\n+     */\n+    public boolean isCreateWithChangeRequestAllowed(DocumentReference parentSpaceReference)\n+        throws ChangeRequestException\n+    {\n+        UserReference currentUserReference = this.currentUserReferenceResolver.resolve(CurrentUserReference.INSTANCE);\n+        return this.changeRequestRightsManager.isCreateWithChangeRequestAllowed(currentUserReference,\n+            parentSpaceReference);\n+    }\n }"
        },
        {
          "filename": "application-changerequest-default/src/test/java/org/xwiki/contrib/changerequest/internal/DefaultChangeRequestRightsManagerTest.java",
          "status": "modified",
          "additions": 103,
          "deletions": 0,
          "patch": "@@ -23,12 +23,15 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import javax.inject.Inject;\n+import javax.inject.Provider;\n \n import org.junit.jupiter.api.Test;\n import org.xwiki.contrib.changerequest.ApproversManager;\n@@ -39,6 +42,7 @@\n import org.xwiki.contrib.changerequest.DelegateApproverManager;\n import org.xwiki.contrib.changerequest.FileChange;\n import org.xwiki.contrib.changerequest.internal.approvers.ChangeRequestApproversManager;\n+import org.xwiki.contrib.changerequest.rights.ChangeRequestRight;\n import org.xwiki.contrib.rights.RightsReader;\n import org.xwiki.contrib.rights.RightsWriter;\n import org.xwiki.contrib.rights.SecurityRuleAbacus;\n@@ -61,7 +65,14 @@\n import org.xwiki.user.GuestUserReference;\n import org.xwiki.user.UserReference;\n \n+import com.xpn.xwiki.XWiki;\n+import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.XWikiException;\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.objects.classes.BaseClass;\n+import com.xpn.xwiki.objects.classes.PasswordClass;\n+import com.xpn.xwiki.objects.classes.PropertyClass;\n \n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -70,6 +81,7 @@\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n@@ -113,6 +125,9 @@ class DefaultChangeRequestRightsManagerTest\n     @MockComponent\n     private DelegateApproverManager<ChangeRequest> changeRequestDelegateApproverManager;\n \n+    @MockComponent\n+    private Provider<XWikiContext> contextProvider;\n+\n     @Test\n     void copyAllButViewRights() throws AuthorizationException, ChangeRequestException, XWikiException\n     {\n@@ -867,4 +882,92 @@ void isAuthorizedToComment() throws ChangeRequestException\n         when(this.changeRequestApproversManager.isApprover(userReference, changeRequest, false)).thenReturn(false);\n         assertFalse(this.rightsManager.isAuthorizedToComment(userReference, changeRequest));\n     }\n+\n+    @Test\n+    void isCreateWithChangeRequestAllowed() throws ChangeRequestException\n+    {\n+        Right crRight = ChangeRequestRight.getRight();\n+        UserReference userReference = mock(UserReference.class);\n+        DocumentReference userDocReference = mock(DocumentReference.class);\n+        DocumentReference parentSpaceReference = mock(DocumentReference.class);\n+\n+        when(this.userReferenceConverter.convert(userReference)).thenReturn(userDocReference);\n+        when(this.authorizationManager.hasAccess(crRight, userDocReference, parentSpaceReference)).thenReturn(true);\n+        assertTrue(this.rightsManager.isCreateWithChangeRequestAllowed(userReference, parentSpaceReference));\n+\n+        verify(this.authorizationManager).hasAccess(crRight, userDocReference, parentSpaceReference);\n+    }\n+\n+    @Test\n+    void isEditWithChangeRequestAllowed() throws ChangeRequestException, XWikiException\n+    {\n+        Right crRight = ChangeRequestRight.getRight();\n+        UserReference userReference = mock(UserReference.class);\n+        DocumentReference userDocReference = mock(DocumentReference.class);\n+        DocumentReference documentReference = mock(DocumentReference.class);\n+        XWikiDocument document = mock(XWikiDocument.class);\n+        XWiki wiki = mock(XWiki.class);\n+        XWikiContext context = mock(XWikiContext.class);\n+\n+        when(this.userReferenceConverter.convert(userReference)).thenReturn(userDocReference);\n+        when(this.contextProvider.get()).thenReturn(context);\n+        when(context.getWiki()).thenReturn(wiki);\n+        when(wiki.getDocument(documentReference, context)).thenReturn(document);\n+        when(this.authorizationManager.hasAccess(crRight, userDocReference, documentReference)).thenReturn(false);\n+\n+        assertFalse(this.rightsManager.isEditWithChangeRequestAllowed(userReference, documentReference));\n+\n+        verify(this.authorizationManager).hasAccess(crRight, userDocReference, documentReference);\n+        verifyNoInteractions(document);\n+\n+        when(this.authorizationManager.hasAccess(crRight, userDocReference, documentReference)).thenReturn(true);\n+        when(document.isNew()).thenReturn(true);\n+        assertTrue(this.rightsManager.isEditWithChangeRequestAllowed(userReference, documentReference));\n+\n+        verify(this.authorizationManager, times(2)).hasAccess(crRight, userDocReference, documentReference);\n+\n+        when(document.isNew()).thenReturn(false);\n+\n+        DocumentReference objReference1 = mock(DocumentReference.class);\n+        DocumentReference objReference2 = mock(DocumentReference.class);\n+\n+        BaseObject baseObject1 = mock(BaseObject.class);\n+        BaseObject baseObject2 = mock(BaseObject.class);\n+        BaseObject baseObject3 = mock(BaseObject.class);\n+\n+        List<BaseObject> baseObjectList1 = Arrays.asList(null, baseObject1);\n+        List<BaseObject> baseObjectList2 = Arrays.asList(null, baseObject2, baseObject3);\n+\n+        Map<DocumentReference, List<BaseObject>> objectMap = new LinkedHashMap<>();\n+        objectMap.put(objReference1, baseObjectList1);\n+        objectMap.put(objReference2, baseObjectList2);\n+\n+        when(document.getXObjects()).thenReturn(objectMap);\n+        BaseClass class1 = mock(BaseClass.class);\n+        List<PropertyClass> propertyClasses = List.of(mock(PropertyClass.class), mock(PropertyClass.class),\n+            mock(PasswordClass.class));\n+        when(class1.getFieldList()).thenReturn(propertyClasses);\n+        when(baseObject1.getXClass(context)).thenReturn(class1);\n+\n+        assertFalse(this.rightsManager.isEditWithChangeRequestAllowed(userReference, documentReference));\n+        verify(baseObject1).getXClass(context);\n+        verifyNoInteractions(baseObject2);\n+        verifyNoInteractions(baseObject3);\n+\n+        when(class1.getFieldList()).thenReturn(List.of(mock(PropertyClass.class)));\n+        BaseClass class2 = mock(BaseClass.class);\n+        when(class2.getFieldList()).thenReturn(List.of(mock(PasswordClass.class)));\n+        when(baseObject2.getXClass(context)).thenReturn(class2);\n+\n+        assertFalse(this.rightsManager.isEditWithChangeRequestAllowed(userReference, documentReference));\n+        verify(baseObject1, times(2)).getXClass(context);\n+        verify(baseObject2).getXClass(context);\n+        verifyNoInteractions(baseObject3);\n+\n+        when(class2.getFieldList()).thenReturn(List.of());\n+        assertTrue(this.rightsManager.isEditWithChangeRequestAllowed(userReference, documentReference));\n+        verify(baseObject1, times(3)).getXClass(context);\n+        verify(baseObject2, times(2)).getXClass(context);\n+        verifyNoInteractions(baseObject3);\n+    }\n }"
        },
        {
          "filename": "application-changerequest-default/src/test/java/org/xwiki/contrib/changerequest/internal/handlers/AddChangesChangeRequestHandlerTest.java",
          "status": "modified",
          "additions": 18,
          "deletions": 3,
          "patch": "@@ -30,6 +30,7 @@\n import org.suigeneris.jrcs.rcs.Version;\n import org.xwiki.contrib.changerequest.ApproversManager;\n import org.xwiki.contrib.changerequest.ChangeRequest;\n+import org.xwiki.contrib.changerequest.ChangeRequestException;\n import org.xwiki.contrib.changerequest.ChangeRequestManager;\n import org.xwiki.contrib.changerequest.ChangeRequestMergeManager;\n import org.xwiki.contrib.changerequest.ChangeRequestReference;\n@@ -59,9 +60,12 @@\n import com.xpn.xwiki.web.XWikiRequest;\n import com.xpn.xwiki.web.XWikiResponse;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n@@ -185,6 +189,8 @@ void handleFileChangeNotExisting() throws Exception\n         String url = \"some url\";\n         when(wiki.getURL(changeRequestDocReference, \"view\", context)).thenReturn(url);\n \n+        when(this.changeRequestRightsManager.isEditWithChangeRequestAllowed(userReference, documentReference))\n+            .thenReturn(true);\n         this.handler.handle(changeRequestReference);\n         verify(this.requestParameterConverter).convert(request, response);\n         verify(document).clone();\n@@ -210,7 +216,7 @@ void handleFileChangeExistingNoConflict() throws Exception\n         when(this.requestParameterConverter.convert(request, response)).thenReturn(Optional.of(request));\n         String docReference = \"XWiki.Doc.Reference\";\n         when(request.getParameter(\"docReference\")).thenReturn(docReference);\n-        DocumentReference documentReference = mock(DocumentReference.class);\n+        DocumentReference documentReference = mock(DocumentReference.class, \"editedDoc\");\n         when(this.documentReferenceResolver.resolve(docReference)).thenReturn(documentReference);\n         XWikiDocument document = mock(XWikiDocument.class);\n         when(wiki.getDocument(documentReference, context)).thenReturn(document);\n@@ -222,7 +228,7 @@ void handleFileChangeExistingNoConflict() throws Exception\n         ChangeRequest changeRequest = mock(ChangeRequest.class);\n         when(this.storageManager.load(changeRequestId)).thenReturn(Optional.of(changeRequest));\n         when(changeRequest.getId()).thenReturn(changeRequestId);\n-        UserReference userReference = mock(UserReference.class);\n+        UserReference userReference = mock(UserReference.class, \"currentUser\");\n         when(this.userReferenceResolver.resolve(CurrentUserReference.INSTANCE)).thenReturn(userReference);\n         when(request.getParameter(AddChangesChangeRequestHandler.PREVIOUS_VERSION_PARAMETER)).thenReturn(\"2.1\");\n \n@@ -261,9 +267,18 @@ void handleFileChangeExistingNoConflict() throws Exception\n         String url = \"some url\";\n         when(wiki.getURL(changeRequestDocReference, \"view\", context)).thenReturn(url);\n \n+        when(this.changeRequestRightsManager.isEditWithChangeRequestAllowed(userReference, documentReference))\n+            .thenReturn(false);\n+        ChangeRequestException changeRequestException =\n+            assertThrows(ChangeRequestException.class, () -> this.handler.handle(changeRequestReference));\n+        assertEquals(\"User [currentUser] is not allowed to edit the document [editedDoc] through a change request.\",\n+            changeRequestException.getMessage());\n+\n+        when(this.changeRequestRightsManager.isEditWithChangeRequestAllowed(userReference, documentReference))\n+            .thenReturn(true);\n         this.handler.handle(changeRequestReference);\n \n-        verify(this.requestParameterConverter).convert(request, response);\n+        verify(this.requestParameterConverter, times(2)).convert(request, response);\n         verify(document).clone();\n         verify(document).readFromForm(any(EditForm.class), eq(context));\n         verify(changeRequest).addFileChange(expectedFileChange);"
        },
        {
          "filename": "application-changerequest-default/src/test/java/org/xwiki/contrib/changerequest/internal/handlers/CreateChangeRequestHandlerTest.java",
          "status": "modified",
          "additions": 20,
          "deletions": 2,
          "patch": "@@ -30,6 +30,8 @@\n import org.junit.jupiter.api.Test;\n import org.suigeneris.jrcs.rcs.Version;\n import org.xwiki.contrib.changerequest.ChangeRequest;\n+import org.xwiki.contrib.changerequest.ChangeRequestException;\n+import org.xwiki.contrib.changerequest.ChangeRequestRightsManager;\n import org.xwiki.contrib.changerequest.ChangeRequestStatus;\n import org.xwiki.contrib.changerequest.FileChange;\n import org.xwiki.contrib.changerequest.events.ChangeRequestCreatedEvent;\n@@ -54,6 +56,7 @@\n import com.xpn.xwiki.web.XWikiResponse;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.doAnswer;\n@@ -95,6 +98,9 @@ class CreateChangeRequestHandlerTest\n     @MockComponent\n     private UserReferenceResolver<CurrentUserReference> userReferenceResolver;\n \n+    @MockComponent\n+    private ChangeRequestRightsManager changeRequestRightsManager;\n+\n     private XWikiContext context;\n     private XWikiRequest httpServletRequest;\n     private XWikiResponse httpServletResponse;\n@@ -126,7 +132,7 @@ void handle() throws Exception\n             .thenReturn(Optional.of(this.httpServletRequest));\n         String serializedReference = \"XWiki.SomeReference\";\n         when(this.httpServletRequest.getParameter(\"docReference\")).thenReturn(serializedReference);\n-        DocumentReference documentReference = mock(DocumentReference.class);\n+        DocumentReference documentReference = mock(DocumentReference.class, \"editedDoc\");\n         when(this.documentReferenceResolver.resolve(serializedReference)).thenReturn(documentReference);\n         XWikiDocument modifiedDocument = mock(XWikiDocument.class);\n         when(this.xWiki.getDocument(documentReference, this.context)).thenReturn(modifiedDocument);\n@@ -139,7 +145,7 @@ void handle() throws Exception\n         when(this.httpServletRequest.getParameter(\"crTitle\")).thenReturn(title);\n         when(this.httpServletRequest.getParameter(\"crDescription\")).thenReturn(description);\n \n-        UserReference userReference = mock(UserReference.class);\n+        UserReference userReference = mock(UserReference.class, \"currentUser\");\n         when(this.userReferenceResolver.resolve(CurrentUserReference.INSTANCE)).thenReturn(userReference);\n         String previousVersion = \"3.2\";\n         when(this.httpServletRequest.getParameter(\"previousVersion\")).thenReturn(previousVersion);\n@@ -184,7 +190,19 @@ void handle() throws Exception\n         String expectedURL = \"/mycr\";\n         when(this.xWiki.getURL(crDocReference, \"view\", this.context)).thenReturn(expectedURL);\n \n+        when(this.changeRequestRightsManager.isEditWithChangeRequestAllowed(userReference, documentReference))\n+            .thenReturn(false);\n+        when(this.changeRequestRightsManager.isEditWithChangeRequestAllowed(userReference, documentReference))\n+            .thenReturn(false);\n+        ChangeRequestException changeRequestException =\n+            assertThrows(ChangeRequestException.class, () -> this.handler.handle(null));\n+        assertEquals(\"User [currentUser] is not allowed to edit the document [editedDoc] through a change request.\",\n+            changeRequestException.getMessage());\n+\n+        when(this.changeRequestRightsManager.isEditWithChangeRequestAllowed(userReference, documentReference))\n+            .thenReturn(true);\n         this.handler.handle(null);\n+\n         verify(this.storageManager).save(expectedChangeRequest);\n         verify(this.observationManager)\n             .notify(any(ChangeRequestCreatedEvent.class), eq(crId), eq(expectedChangeRequest));"
        },
        {
          "filename": "application-changerequest-ui/src/main/resources/ChangeRequest/Code/EditPageUIX.xml",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -293,7 +293,8 @@\n {{html clean='false'}}\n #template(\"xwikivars.vm\")\n #set ($crEditName = \"changerequest\")\n-#set ($hasCREdit = $services.security.authorization.isRightRegistered($crEditName) &amp;&amp; $services.security.authorization.hasAccess($crEditName, $tdoc))\n+#set ($hasCREdit = $services.changerequest.authorization.isEditWithChangeRequestAllowed($doc.getDocumentReference()))\n+#set ($hasCRCreate = $services.changerequest.authorization.isCreateWithChangeRequestAllowed($doc.getDocumentReference()))\n #set ($hasEdit = $services.security.authorization.hasAccess('edit', $tdoc))\n #set ($hasCreateButton = ($hasCreateSpace || $hasCreatePage))\n #set ($editURL = $doc.getURL('editcr'))\n@@ -306,6 +307,8 @@\n   &lt;/a&gt;\n &lt;/div&gt;\n #end\n+#end\n+#if (!$isReadOnly &amp;&amp; $hasCRCreate)\n #if (!$hasCreateButton)\n &lt;div class=\"btn-group\" id=\"crCreate\"&gt;\n   &lt;a href=\"$createURL\" role=\"button\" title=\"$services.localization.render('changerequest.create.button.title')\" class=\"btn btn-default\"&gt;"
        },
        {
          "filename": "application-changerequest-ui/src/main/resources/ChangeRequest/Code/SaveButtonsUIX.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -370,7 +370,7 @@\n     <property>\n       <content>{{velocity}}\n #set ($crEditName = \"changerequest\")\n-#set ($hasCREdit = $services.security.authorization.isRightRegistered($crEditName) &amp;&amp; $services.security.authorization.hasAccess($crEditName, $tdoc))\n+#set ($hasCREdit = $services.changerequest.authorization.isEditWithChangeRequestAllowed($doc.getDocumentReference()))\n ## we need to also inject this in view action, because of the inplace editing mode.\n #set ($isEditOrViewAction = ($xcontext.action == 'edit' || $xcontext.action == 'view'))\n #if ($hasCREdit &amp;&amp; $isEditOrViewAction)"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 8,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d4a8f587ba4440f3e8813da86d9cf8faeed7465c",
            "date": "2025-01-14T12:55:22Z",
            "author_login": "surli"
          },
          {
            "sha": "1157d03b0f2a1925b0a5af54e07f265001d7513a",
            "date": "2025-01-13T15:31:24Z",
            "author_login": "surli"
          },
          {
            "sha": "363a78c00fc3dfbf24159465e0c88b014797b365",
            "date": "2025-01-13T10:07:22Z",
            "author_login": "renovate-bot"
          },
          {
            "sha": "15787273efeb8ee31f6a0e58ffa971012bef4d1c",
            "date": "2025-01-13T10:06:08Z",
            "author_login": "renovate-bot"
          },
          {
            "sha": "44da018ed149a251b9472813d3b549d1e4cb801a",
            "date": "2025-01-13T09:59:37Z",
            "author_login": "renovate-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-522",
    "description": "XWiki Change Request is an XWiki application allowing to request changes on a wiki without publishing directly the changes. Change request allows to edit any page by default, and the changes are then exported in an XML file that anyone can download. So it's possible for an attacker to obtain password hash of users by performing an edit on the user profiles and then downloading the XML file that has been created. This is also true for any document that might contain password field and that a user can view.\nThis vulnerability impacts all version of Change Request, but the impact depends on the rights that has been set on the wiki since it requires for the user to have the Change request right (allowed by default) and view rights on the page to target. This issue cannot be easily exploited in an automated way. The patch consists in denying to users the right of editing pages that contains a password field with change request. It means that already existing change request for those pages won't be removed by the patch, administrators needs to take care of it. The patch is provided in Change Request 1.10, administrators should upgrade immediately. It's possible to workaround the vulnerability by denying manually the Change request right on some spaces, such as XWiki space which will include any user profile by default.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-04T23:15:26.767",
    "last_modified": "2024-11-21T08:33:10.557",
    "fix_date": "2023-08-29T16:36:59Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki-contrib/application-changerequest/commit/ff0f5368ea04f0e4aa7b33821c707dc68a8c5ca8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki-contrib/application-changerequest/security/advisories/GHSA-2fr7-cc7p-p45q",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/CRAPP-302",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki-contrib/application-changerequest/commit/ff0f5368ea04f0e4aa7b33821c707dc68a8c5ca8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki-contrib/application-changerequest/security/advisories/GHSA-2fr7-cc7p-p45q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/CRAPP-302",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.529006",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "application-changerequest",
    "owner": "xwiki-contrib",
    "created_at": "2021-05-28T09:32:58Z",
    "updated_at": "2025-01-14T14:50:04Z",
    "pushed_at": "2025-01-14T14:50:00Z",
    "size": 2849,
    "stars": 2,
    "forks": 7,
    "open_issues": 0,
    "watchers": 2,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 2534197,
      "JavaScript": 3396,
      "Shell": 186
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T22:04:02.614362"
  }
}