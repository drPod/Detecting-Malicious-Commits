{
  "cve_id": "CVE-2023-49290",
  "github_data": {
    "repository": "lestrrat-go/jwx",
    "fix_commit": "64f2a229b8e18605f47361d292b526bdc4aee01c",
    "related_commits": [
      "64f2a229b8e18605f47361d292b526bdc4aee01c",
      "64f2a229b8e18605f47361d292b526bdc4aee01c"
    ],
    "patch_url": "https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c.patch",
    "fix_commit_details": {
      "sha": "64f2a229b8e18605f47361d292b526bdc4aee01c",
      "commit_date": "2023-12-03T06:35:12Z",
      "author": {
        "login": "lestrrat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-7f9x-gw85-8grf",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 113,
        "additions": 113,
        "deletions": 0
      },
      "files": [
        {
          "filename": "Changes",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -4,6 +4,15 @@ Changes\n v2 has many incompatibilities with v1. To see the full list of differences between\n v1 and v2, please read the Changes-v2.md file (https://github.com/lestrrat-go/jwx/blob/develop/v2/Changes-v2.md)\n \n+v2.0.18 UNRELEASED\n+[Security Fixes]\n+  * [jwe] A large number in p2c parameter for PBKDF2 based encryptions could cause a DoS attack,\n+    similar to https://nvd.nist.gov/vuln/detail/CVE-2022-36083.  All users who use JWE via this\n+    package should upgrade. While the JOSE spec allows for encryption using JWE on JWTs, users of\n+    the `jwt` package are not immediately susceptible unless they explicitly try to decrypt\n+    JWTs -- by default the `jwt` package verifies signatures, but does not decrypt messages.\n+    [GHSA-7f9x-gw85-8grf]\n+\n v2.0.17 20 Nov 2023\n [Bug Fixes]\n   * [jws] Previously, `jws.UnregisterSigner` did not remove the previous signer instance when"
        },
        {
          "filename": "jwe/jwe.go",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -10,6 +10,7 @@ import (\n \t\"crypto/rsa\"\n \t\"fmt\"\n \t\"io\"\n+\t\"sync\"\n \n \t\"github.com/lestrrat-go/blackmagic\"\n \t\"github.com/lestrrat-go/jwx/v2/internal/base64\"\n@@ -24,6 +25,20 @@ import (\n \t\"github.com/lestrrat-go/jwx/v2/x25519\"\n )\n \n+var muSettings sync.RWMutex\n+var maxPBES2Count = 10000\n+\n+func Settings(options ...GlobalOption) {\n+\tmuSettings.Lock()\n+\tdefer muSettings.Unlock()\n+\tfor _, option := range options {\n+\t\tswitch option.Ident() {\n+\t\tcase identMaxPBES2Count{}:\n+\t\t\tmaxPBES2Count = option.Value().(int)\n+\t\t}\n+\t}\n+}\n+\n const (\n \tfmtInvalid = iota\n \tfmtCompact\n@@ -702,6 +717,12 @@ func (dctx *decryptCtx) decryptContent(ctx context.Context, alg jwa.KeyEncryptio\n \t\tif !ok {\n \t\t\treturn nil, fmt.Errorf(\"unexpected type for 'p2c': %T\", count)\n \t\t}\n+\t\tmuSettings.RLock()\n+\t\tmaxCount := maxPBES2Count\n+\t\tmuSettings.RUnlock()\n+\t\tif countFlt > float64(maxCount) {\n+\t\t\treturn nil, fmt.Errorf(\"invalid 'p2c' value\")\n+\t\t}\n \t\tsalt, err := base64.DecodeString(saltB64Str)\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(`failed to b64-decode 'salt': %w`, err)"
        },
        {
          "filename": "jwe/jwe_test.go",
          "status": "modified",
          "additions": 48,
          "deletions": 0,
          "patch": "@@ -911,3 +911,51 @@ func TestGH1001(t *testing.T) {\n \trequire.Equal(t, \"Lorem Ipsum\", string(decrypted), `decrypted message should match`)\n \trequire.NotNil(t, cek, `cek should not be nil`)\n }\n+\n+func TestGHSA_7f9x_gw85_8grf(t *testing.T) {\n+\ttoken := []byte(\"eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJlbmMiOiJBMjU2R0NNIiwicDJjIjoyMDAwMDAwMDAwLCJwMnMiOiJNNzczSnlmV2xlX2FsSXNrc0NOTU9BIn0=.S8B1kXdIR7BM6i_TaGsgqEOxU-1Sgdakp4mHq7UVhn-_REzOiGz2gg.gU_LfzhBXtQdwYjh.9QUIS-RWkLc.m9TudmzUoCzDhHsGGfzmCA\")\n+\tkey, err := jwk.FromRaw([]byte(`abcdefg`))\n+\trequire.NoError(t, err, `jwk.FromRaw should succeed`)\n+\n+\t{\n+\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n+\t\tdefer cancel()\n+\n+\t\tdone := make(chan struct{})\n+\t\tgo func(t *testing.T, done chan struct{}) {\n+\t\t\t_, err := jwe.Decrypt(token, jwe.WithKey(jwa.PBES2_HS256_A128KW, key))\n+\t\t\trequire.Error(t, err, `jwe.Decrypt should fail`)\n+\t\t\tclose(done)\n+\t\t}(t, done)\n+\n+\t\tselect {\n+\t\tcase <-done:\n+\t\tcase <-ctx.Done():\n+\t\t\trequire.Fail(t, \"jwe.Decrypt should not block\")\n+\t\t}\n+\t}\n+\n+\t// NOTE: HAS GLOBAL EFFECT\n+\t// Should allow for timeout to occur\n+\tjwe.Settings(jwe.WithMaxPBES2Count(100000000000000000))\n+\n+\t// put it back to normal after the test\n+\tdefer jwe.Settings(jwe.WithMaxPBES2Count(10000))\n+\t{\n+\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n+\t\tdefer cancel()\n+\n+\t\tdone := make(chan struct{})\n+\t\tgo func(t *testing.T, done chan struct{}) {\n+\t\t\t_, _ = jwe.Decrypt(token, jwe.WithKey(jwa.PBES2_HS256_A128KW, key))\n+\t\t\tclose(done)\n+\t\t}(t, done)\n+\n+\t\tselect {\n+\t\tcase <-done:\n+\t\t\trequire.Fail(t, \"jwe.Decrypt should block\")\n+\t\tcase <-ctx.Done():\n+\t\t\t// timeout occurred as it should\n+\t\t}\n+\t}\n+}"
        },
        {
          "filename": "jwe/options.yaml",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -1,6 +1,9 @@\n package_name: jwe\n output: jwe/options_gen.go\n interfaces:\n+  - name: GlobalOption\n+    comment: |\n+      GlobalOption describes options that changes global settings for this package\n   - name: CompactOption\n     comment: |\n       CompactOption describes options that can be passed to `jwe.Compact`\n@@ -129,3 +132,10 @@ options:\n       \n       This option is currently considered EXPERIMENTAL, and is subject to\n       future changes across minor/micro versions.\n+  - ident: MaxPBES2Count\n+    interface: GlobalOption\n+    argument_type: int\n+    comment: |\n+      WithMaxPBES2Count specifies the maximum number of PBES2 iterations\n+      to use when decrypting a message. If not specified, the default\n+      value of 10,000 is used.\n\\ No newline at end of file"
        },
        {
          "filename": "jwe/options_gen.go",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -62,6 +62,18 @@ type encryptOption struct {\n \n func (*encryptOption) encryptOption() {}\n \n+// GlobalOption describes options that changes global settings for this package\n+type GlobalOption interface {\n+\tOption\n+\tglobalOption()\n+}\n+\n+type globalOption struct {\n+\tOption\n+}\n+\n+func (*globalOption) globalOption() {}\n+\n // ReadFileOption is a type of `Option` that can be passed to `jwe.Parse`\n type ParseOption interface {\n \tOption\n@@ -117,6 +129,7 @@ type identFS struct{}\n type identKey struct{}\n type identKeyProvider struct{}\n type identKeyUsed struct{}\n+type identMaxPBES2Count struct{}\n type identMergeProtectedHeaders struct{}\n type identMessage struct{}\n type identPerRecipientHeaders struct{}\n@@ -153,6 +166,10 @@ func (identKeyUsed) String() string {\n \treturn \"WithKeyUsed\"\n }\n \n+func (identMaxPBES2Count) String() string {\n+\treturn \"WithMaxPBES2Count\"\n+}\n+\n func (identMergeProtectedHeaders) String() string {\n \treturn \"WithMergeProtectedHeaders\"\n }\n@@ -228,6 +245,13 @@ func WithKeyUsed(v interface{}) DecryptOption {\n \treturn &decryptOption{option.New(identKeyUsed{}, v)}\n }\n \n+// WithMaxPBES2Count specifies the maximum number of PBES2 iterations\n+// to use when decrypting a message. If not specified, the default\n+// value of 10,000 is used.\n+func WithMaxPBES2Count(v int) GlobalOption {\n+\treturn &globalOption{option.New(identMaxPBES2Count{}, v)}\n+}\n+\n // WithMergeProtectedHeaders specify that when given multiple headers\n // as options to `jwe.Encrypt`, these headers should be merged instead\n // of overwritten"
        },
        {
          "filename": "jwe/options_gen_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@ func TestOptionIdent(t *testing.T) {\n \trequire.Equal(t, \"WithKey\", identKey{}.String())\n \trequire.Equal(t, \"WithKeyProvider\", identKeyProvider{}.String())\n \trequire.Equal(t, \"WithKeyUsed\", identKeyUsed{}.String())\n+\trequire.Equal(t, \"WithMaxPBES2Count\", identMaxPBES2Count{}.String())\n \trequire.Equal(t, \"WithMergeProtectedHeaders\", identMergeProtectedHeaders{}.String())\n \trequire.Equal(t, \"WithMessage\", identMessage{}.String())\n \trequire.Equal(t, \"WithPerRecipientHeaders\", identPerRecipientHeaders{}.String())"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "19d4fae3f38edda58757b5f7da39d3875e296f26",
            "date": "2024-12-04T01:54:09Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2e57119d7ac121220efe7efae836dc893d0950b2",
            "date": "2024-11-24T23:57:50Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "7be8d77a3de9811ad9db66d144d5901ccfed7830",
            "date": "2024-11-24T06:55:12Z",
            "author_login": "lestrrat"
          },
          {
            "sha": "24d60ab4e9149dd91031f2c6385a537b368b4659",
            "date": "2024-11-11T07:57:03Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "27f2f3fb779a7cd684145c09937b4ee8976e2589",
            "date": "2024-11-11T07:50:18Z",
            "author_login": "lestrrat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-400",
    "description": "lestrrat-go/jwx is a Go module implementing various JWx (JWA/JWE/JWK/JWS/JWT, otherwise known as JOSE) technologies. A p2c parameter set too high in JWE's algorithm PBES2-* could lead to a denial of service. The JWE key management algorithms based on PBKDF2 require a JOSE Header Parameter called p2c (PBES2 Count). This parameter dictates the number of PBKDF2 iterations needed to derive a CEK wrapping key. Its primary purpose is to intentionally slow down the key derivation function, making password brute-force and dictionary attacks more resource- intensive. Therefore, if an attacker sets the p2c parameter in JWE to a very large number, it can cause a lot of computational consumption, resulting in a denial of service. This vulnerability has been addressed in commit `64f2a229b` which has been included in release version 1.2.27 and 2.0.18. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-05T00:15:09.190",
    "last_modified": "2024-11-21T08:33:11.897",
    "fix_date": "2023-12-03T06:35:12Z"
  },
  "references": [
    {
      "url": "https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.530129",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jwx",
    "owner": "lestrrat-go",
    "created_at": "2015-11-04T05:12:52Z",
    "updated_at": "2025-01-14T07:34:16Z",
    "pushed_at": "2025-01-07T07:26:48Z",
    "size": 14286,
    "stars": 1983,
    "forks": 164,
    "open_issues": 9,
    "watchers": 1983,
    "has_security_policy": false,
    "default_branch": "develop/v3",
    "protected_branches": [
      "develop/v1",
      "develop/v2",
      "develop/v2.2",
      "develop/v3",
      "v1",
      "v2",
      "v3"
    ],
    "languages": {
      "Go": 973485,
      "Starlark": 24657,
      "Shell": 7002,
      "Perl": 2801,
      "Makefile": 2366
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:02:24.530300"
  }
}