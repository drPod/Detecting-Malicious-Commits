{
  "cve_id": "CVE-2023-49796",
  "github_data": {
    "repository": "mindsdb/mindsdb",
    "fix_commit": "8d13c9c28ebcf3b36509eb679378004d4648d8fe",
    "related_commits": [
      "8d13c9c28ebcf3b36509eb679378004d4648d8fe",
      "8d13c9c28ebcf3b36509eb679378004d4648d8fe"
    ],
    "patch_url": "https://github.com/mindsdb/mindsdb/commit/8d13c9c28ebcf3b36509eb679378004d4648d8fe.patch",
    "fix_commit_details": {
      "sha": "8d13c9c28ebcf3b36509eb679378004d4648d8fe",
      "commit_date": "2023-11-29T13:02:18Z",
      "author": {
        "login": "ea-rus",
        "type": "User",
        "stats": {
          "total_commits": 1480,
          "average_weekly_commits": 4.431137724550898,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 133
        }
      },
      "commit_message": {
        "title": "fixes:",
        "length": 90,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 71,
        "additions": 65,
        "deletions": 6
      },
      "files": [
        {
          "filename": "mindsdb/api/http/namespaces/file.py",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -14,6 +14,7 @@\n from mindsdb.utilities.config import Config\n from mindsdb.utilities.context import context as ctx\n from mindsdb.utilities import log\n+from mindsdb.utilities.security import is_private_url, clear_filename\n \n logger = log.getLogger(__name__)\n \n@@ -51,7 +52,7 @@ def on_field(field):\n \n         def on_file(file):\n             nonlocal file_object\n-            data[\"file\"] = file.file_name.decode()\n+            data[\"file\"] = clear_filename(file.file_name.decode())\n             file_object = file.file_object\n \n         temp_dir_path = tempfile.mkdtemp(prefix=\"mindsdb_file_\")\n@@ -91,10 +92,15 @@ def on_file(file):\n \n         if data.get(\"source_type\") == \"url\":\n             url = data[\"source\"]\n-            data[\"file\"] = data[\"name\"]\n+            data[\"file\"] = clear_filename(data[\"name\"])\n \n             config = Config()\n             is_cloud = config.get(\"cloud\", False)\n+            if is_cloud and is_private_url(url):\n+                return http_error(\n+                    400, f'URL is private: {url}'\n+                )\n+\n             if is_cloud is True and ctx.user_class != 1:\n                 info = requests.head(url)\n                 file_size = info.headers.get(\"Content-Length\")\n@@ -123,7 +129,7 @@ def on_file(file):\n                     for chunk in r.iter_content(chunk_size=8192):\n                         f.write(chunk)\n \n-        original_file_name = data.get(\"original_file_name\")\n+        original_file_name = clear_filename(data.get(\"original_file_name\"))\n \n         file_path = os.path.join(temp_dir_path, data[\"file\"])\n         lp = file_path.lower()"
        },
        {
          "filename": "mindsdb/integrations/handlers/llama_index_handler/llama_index_handler.py",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -13,6 +13,7 @@\n \n from mindsdb.integrations.libs.base import BaseMLEngine\n from mindsdb.utilities.config import Config\n+from mindsdb.utilities.security import is_private_url\n \n \n def _validate_prompt_template(prompt_template: str):\n@@ -69,7 +70,13 @@ def create(self, target: str, df: Optional[pd.DataFrame] = None, args: Optional[\n             if 'source_url_link' not in args['using']:\n                 raise Exception(\"SimpleWebPageReader requires a `source_url_link` parameter. Refer to LlamaIndex documentation for more details.\")  # noqa\n \n-            reader = SimpleWebPageReader(html_to_text=True).load_data([args['using']['source_url_link']])\n+            url = args['using']['source_url_link']\n+            config = Config()\n+            is_cloud = config.get(\"cloud\", False)\n+            if is_cloud and is_private_url(url):\n+                raise Exception(f'URL is private: {url}')\n+\n+            reader = SimpleWebPageReader(html_to_text=True).load_data([url])\n \n         else:\n             raise Exception(f\"Invalid operation mode. Please use one of {self.supported_reader}.\")"
        },
        {
          "filename": "mindsdb/integrations/handlers/web_handler/web_handler.py",
          "status": "modified",
          "additions": 15,
          "deletions": 2,
          "patch": "@@ -10,6 +10,8 @@\n     HandlerResponse as Response,\n     RESPONSE_TYPE\n )\n+from mindsdb.utilities.security import is_private_url\n+from mindsdb.utilities.config import Config\n \n from .urlcrawl_helpers import get_df_from_query_str, get_all_websites\n \n@@ -37,7 +39,9 @@ def select(self, query: ast.Select) -> pd.DataFrame:\n                         urls = url\n                 else:\n                     raise NotImplementedError(\n-                        f'url can be url = \"someurl\", you can also crawl multiple sites, as follows: url IN (\"url1\", \"url2\", ..)')\n+                        f'url can be url = \"someurl\", you can also crawl multiple sites, as follows:'\n+                        f' url IN (\"url1\", \"url2\", ..)'\n+                    )\n \n             else:\n                 pass\n@@ -52,7 +56,16 @@ def select(self, query: ast.Select) -> pd.DataFrame:\n \n         if limit < 0:\n             limit = 0\n-            \n+\n+        config = Config()\n+        is_cloud = config.get(\"cloud\", False)\n+        if is_cloud:\n+            urls = [\n+                url\n+                for url in urls\n+                if not is_private_url(url)\n+            ]\n+\n         result = get_all_websites(urls, limit, html=False)\n         if len(result) > limit:\n             result = result[:limit]"
        },
        {
          "filename": "mindsdb/utilities/security.py",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+from urllib.parse import urlparse\n+import socket\n+import ipaddress\n+\n+\n+def is_private_url(url: str):\n+    \"\"\"\n+    Raises exception if url is private\n+\n+    :param url: url to check\n+    \"\"\"\n+\n+    hostname = urlparse(url).hostname\n+    if not hostname:\n+        # Unable find hostname in url\n+        return True\n+    ip = socket.gethostbyname(hostname)\n+    return ipaddress.ip_address(ip).is_private\n+\n+\n+def clear_filename(filename: str):\n+    \"\"\"\n+    Removes path symbols from filename which could be used for path injection\n+    :param s:\n+    :return:\n+    \"\"\"\n+\n+    if not filename:\n+        return filename\n+    badchars = '\\\\/:*?\\\"<>|'\n+    for c in badchars:\n+        filename = filename.replace(c, '')\n+    return filename"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "01b23c68d55717d6464fd07f80950e241c7b7c01",
            "date": "2025-01-14T14:16:26Z",
            "author_login": "dusvyat"
          },
          {
            "sha": "6818bb84fba666457e96bcf9d8737b952ae8ade6",
            "date": "2025-01-14T13:22:11Z",
            "author_login": "MinuraPunchihewa"
          },
          {
            "sha": "dd5bbb407468dfc882a5c826e34c4aa39d1397d1",
            "date": "2025-01-14T13:20:30Z",
            "author_login": "MinuraPunchihewa"
          },
          {
            "sha": "4ea0d3f57fff448a9ce12155dd146c2b26027a1d",
            "date": "2025-01-14T12:37:04Z",
            "author_login": "StpMax"
          },
          {
            "sha": "47293081fab601fc359e521fbaa652ea72f49918",
            "date": "2025-01-14T12:07:02Z",
            "author_login": "dusvyat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-20",
    "description": "MindsDB connects artificial intelligence models to real time data. Versions prior to 23.11.4.1 contain a limited file write vulnerability in `file.py` Users should use MindsDB's `staging` branch or v23.11.4.1, which contain a fix for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-11T21:15:07.460",
    "last_modified": "2024-11-21T08:33:51.630",
    "fix_date": "2023-11-29T13:02:18Z"
  },
  "references": [
    {
      "url": "https://github.com/mindsdb/mindsdb/commit/8d13c9c28ebcf3b36509eb679378004d4648d8fe",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mindsdb/mindsdb/security/advisories/GHSA-crhp-7c74-cg4c",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/mindsdb/mindsdb/commit/8d13c9c28ebcf3b36509eb679378004d4648d8fe",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mindsdb/mindsdb/security/advisories/GHSA-crhp-7c74-cg4c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.556226",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mindsdb",
    "owner": "mindsdb",
    "created_at": "2018-08-02T17:56:45Z",
    "updated_at": "2025-01-14T14:49:33Z",
    "pushed_at": "2025-01-14T14:16:28Z",
    "size": 254228,
    "stars": 27078,
    "forks": 4895,
    "open_issues": 148,
    "watchers": 27078,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 6085788,
      "Dockerfile": 6215,
      "HCL": 2986,
      "Makefile": 772,
      "HTML": 595,
      "Mako": 540,
      "Shell": 196
    },
    "commit_activity": {
      "total_commits_last_year": 2258,
      "avg_commits_per_week": 43.42307692307692,
      "days_active_last_year": 244
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:56:47.887863"
  }
}