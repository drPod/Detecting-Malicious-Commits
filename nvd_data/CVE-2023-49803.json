{
  "cve_id": "CVE-2023-49803",
  "github_data": {
    "repository": "koajs/cors",
    "fix_commit": "f31dac99f5355c41e7d4dd3c4a80c5f154941a11",
    "related_commits": [
      "f31dac99f5355c41e7d4dd3c4a80c5f154941a11",
      "f31dac99f5355c41e7d4dd3c4a80c5f154941a11"
    ],
    "patch_url": "https://github.com/koajs/cors/commit/f31dac99f5355c41e7d4dd3c4a80c5f154941a11.patch",
    "fix_commit_details": {
      "sha": "f31dac99f5355c41e7d4dd3c4a80c5f154941a11",
      "commit_date": "2023-12-11T01:46:27Z",
      "author": {
        "login": "fengmk2",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-qxrj-hx23-xp82",
        "length": 210,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 109,
        "additions": 83,
        "deletions": 26
      },
      "files": [
        {
          "filename": ".github/workflows/nodejs.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -12,8 +12,6 @@ on:\n     branches:\n       - main\n       - master\n-  schedule:\n-    - cron: '0 2 * * *'\n \n jobs:\n   build:\n@@ -22,7 +20,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        node-version: [14, 16, 18]\n+        node-version: [14, 16, 18, 20]\n         os: [ubuntu-latest]\n \n     steps:"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 15,
          "deletions": 3,
          "patch": "@@ -1,5 +1,4 @@\n-@koa/cors\n-=======\n+# @koa/cors\n \n [![NPM version][npm-image]][npm-url]\n [![Node.js CI](https://github.com/koajs/cors/actions/workflows/nodejs.yml/badge.svg)](https://github.com/koajs/cors/actions/workflows/nodejs.yml)\n@@ -43,7 +42,8 @@ app.use(cors());\n  * CORS middleware\n  *\n  * @param {Object} [options]\n- *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is request Origin header\n+ *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is '*'\n+ *    If `credentials` set and return `true, the `origin` default value will set to the request `Origin` header\n  *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'\n  *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`\n  *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`\n@@ -57,6 +57,18 @@ app.use(cors());\n  */\n ```\n \n+## Breaking change between 5.0 and 4.0\n+\n+The default `origin` is set to `*`, if you want to keep the 4.0 behavior, you can set the `origin` handler like this:\n+\n+```js\n+app.use(cors({\n+  origin(ctx) {\n+    return ctx.get('Origin') || '*';\n+  },\n+}));\n+```\n+\n ## License\n \n [MIT](./LICENSE)"
        },
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -1,12 +1,11 @@\n-'use strict';\n-\n const vary = require('vary');\n \n /**\n  * CORS middleware\n  *\n  * @param {Object} [options]\n- *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is request Origin header\n+ *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is '*'\n+ *    If `credentials` set and return `true, the `origin` default value will set to the request `Origin` header\n  *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'\n  *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`\n  *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`\n@@ -61,9 +60,11 @@ module.exports = function(options) {\n     let origin;\n     if (typeof options.origin === 'function') {\n       origin = await options.origin(ctx);\n-      if (!origin) return await next();\n+      if (!origin) {\n+        return await next();\n+      }\n     } else {\n-      origin = options.origin || requestOrigin;\n+      origin = options.origin || '*';\n     }\n \n     let credentials;"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -46,7 +46,7 @@\n     \"node\": \">= 14.0.0\"\n   },\n   \"ci\": {\n-    \"version\": \"14, 16, 18\",\n+    \"version\": \"14, 16, 18, 20\",\n     \"os\": \"linux\"\n   },\n   \"author\": \"fengmk2 <fengmk2@gmail.com> (http://github.com/fengmk2)\","
        },
        {
          "filename": "test/cors.test.js",
          "status": "modified",
          "additions": 60,
          "deletions": 14,
          "patch": "@@ -1,5 +1,3 @@\n-'use strict';\n-\n const assert = require('assert');\n const Koa = require('koa');\n const request = require('supertest');\n@@ -13,22 +11,19 @@ describe('cors.test.js', function() {\n       ctx.body = { foo: 'bar' };\n     });\n \n-    it('should not set `Access-Control-Allow-Origin` when request Origin header missing', function(done) {\n+    it('should set `Access-Control-Allow-Origin` to `*` when request Origin header missing', function(done) {\n       request(app.listen())\n         .get('/')\n         .expect({ foo: 'bar' })\n-        .expect(200, function(err, res) {\n-          assert(!err);\n-          assert(!res.headers['access-control-allow-origin']);\n-          done();\n-        });\n+        .expect('access-control-allow-origin', '*')\n+        .expect(200, done);\n     });\n \n-    it('should set `Access-Control-Allow-Origin` to request origin header', function(done) {\n+    it('should set `Access-Control-Allow-Origin` to `*`', function(done) {\n       request(app.listen())\n         .get('/')\n         .set('Origin', 'http://koajs.com')\n-        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n+        .expect('Access-Control-Allow-Origin', '*')\n         .expect({ foo: 'bar' })\n         .expect(200, done);\n     });\n@@ -38,7 +33,7 @@ describe('cors.test.js', function() {\n         .options('/')\n         .set('Origin', 'http://koajs.com')\n         .set('Access-Control-Request-Method', 'PUT')\n-        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n+        .expect('Access-Control-Allow-Origin', '*')\n         .expect('Access-Control-Allow-Methods', 'GET,HEAD,PUT,POST,DELETE,PATCH')\n         .expect(204, done);\n     });\n@@ -87,6 +82,44 @@ describe('cors.test.js', function() {\n     });\n   });\n \n+  describe('options.origin set the request Origin header', function() {\n+    const app = new Koa();\n+    app.use(cors({\n+      origin(ctx) {\n+        return ctx.get('Origin') || '*';\n+      },\n+    }));\n+    app.use(function(ctx) {\n+      ctx.body = { foo: 'bar' };\n+    });\n+\n+    it('should set `Access-Control-Allow-Origin` to request `Origin` header', function(done) {\n+      request(app.listen())\n+        .get('/')\n+        .set('Origin', 'http://koajs.com')\n+        .expect('Access-Control-Allow-Origin', 'http://koajs.com')\n+        .expect({ foo: 'bar' })\n+        .expect(200, done);\n+    });\n+\n+    it('should set `Access-Control-Allow-Origin` to request `origin` header', function(done) {\n+      request(app.listen())\n+        .get('/')\n+        .set('origin', 'http://origin.koajs.com')\n+        .expect('Access-Control-Allow-Origin', 'http://origin.koajs.com')\n+        .expect({ foo: 'bar' })\n+        .expect(200, done);\n+    });\n+\n+    it('should set `Access-Control-Allow-Origin` to `*`, even if no Origin is passed on request', function(done) {\n+      request(app.listen())\n+        .get('/')\n+        .expect('Access-Control-Allow-Origin', '*')\n+        .expect({ foo: 'bar' })\n+        .expect(200, done);\n+    });\n+  });\n+\n   describe('options.secureContext=true', function() {\n     const app = new Koa();\n     app.use(cors({\n@@ -651,7 +684,11 @@ describe('cors.test.js', function() {\n   describe('options.headersKeptOnError', function() {\n     it('should keep CORS headers after an error', function(done) {\n       const app = new Koa();\n-      app.use(cors());\n+      app.use(cors({\n+        origin(ctx) {\n+          return ctx.get('Origin') || '*';\n+        },\n+      }));\n       app.use(function(ctx) {\n         ctx.body = { foo: 'bar' };\n         throw new Error('Whoops!');\n@@ -668,7 +705,11 @@ describe('cors.test.js', function() {\n \n     it('should not affect OPTIONS requests', function(done) {\n       const app = new Koa();\n-      app.use(cors());\n+      app.use(cors({\n+        origin(ctx) {\n+          return ctx.get('Origin') || '*';\n+        },\n+      }));\n       app.use(function(ctx) {\n         ctx.body = { foo: 'bar' };\n         throw new Error('Whoops!');\n@@ -684,7 +725,11 @@ describe('cors.test.js', function() {\n \n     it('should not keep unrelated headers', function(done) {\n       const app = new Koa();\n-      app.use(cors());\n+      app.use(cors({\n+        origin(ctx) {\n+          return ctx.get('Origin') || '*';\n+        },\n+      }));\n       app.use(function(ctx) {\n         ctx.body = { foo: 'bar' };\n         ctx.set('X-Example', 'Value');\n@@ -752,6 +797,7 @@ describe('cors.test.js', function() {\n         .expect(200, done);\n     });\n   });\n+\n   describe('other middleware has set vary header on Error', function() {\n     it('should append `Origin to other `Vary` header', function(done) {\n       const app = new Koa();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "18a43f0e66cab2f46d50e8500cafc13930aad68e",
            "date": "2023-12-12T13:13:09Z",
            "author_login": "julienw"
          },
          {
            "sha": "c33bd6913fe93e2a2b6902985e257a0e472199c4",
            "date": "2023-12-11T01:49:24Z",
            "author_login": "fengmk2"
          },
          {
            "sha": "f31dac99f5355c41e7d4dd3c4a80c5f154941a11",
            "date": "2023-12-11T01:46:27Z",
            "author_login": "fengmk2"
          },
          {
            "sha": "0f3f948b9b8f00163a47de1b82e413bfef9b4a96",
            "date": "2022-10-08T13:43:43Z",
            "author_login": "fengmk2"
          },
          {
            "sha": "d19090fc8591059895fa9c606967d3a67fd3c5b8",
            "date": "2022-10-08T13:43:07Z",
            "author_login": "fengmk2"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N",
    "cwe_id": "CWE-346",
    "description": "@koa/cors npm provides Cross-Origin Resource Sharing (CORS) for koa, a web framework for Node.js. Prior to version 5.0.0, the middleware operates in a way that if an allowed origin is not provided, it will return an `Access-Control-Allow-Origin` header with the value of the origin from the request. This behavior completely disables one of the most crucial elements of browsers - the Same Origin Policy (SOP), this could cause a very serious security threat to the users of this middleware. If such behavior is expected, for instance, when middleware is used exclusively for prototypes and not for production applications, it should be heavily emphasized in the documentation along with an indication of the risks associated with such behavior, as many users may not be aware of it. Version 5.0.0 fixes this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-11T23:15:07.620",
    "last_modified": "2024-11-21T08:33:52.570",
    "fix_date": "2023-12-11T01:46:27Z"
  },
  "references": [
    {
      "url": "https://github.com/koajs/cors/commit/f31dac99f5355c41e7d4dd3c4a80c5f154941a11",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/koajs/cors/security/advisories/GHSA-qxrj-hx23-xp82",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/koajs/cors/commit/f31dac99f5355c41e7d4dd3c4a80c5f154941a11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/koajs/cors/security/advisories/GHSA-qxrj-hx23-xp82",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.556708",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cors",
    "owner": "koajs",
    "created_at": "2015-02-09T05:34:31Z",
    "updated_at": "2025-01-11T00:11:55Z",
    "pushed_at": "2024-03-02T23:01:34Z",
    "size": 118,
    "stars": 737,
    "forks": 80,
    "open_issues": 22,
    "watchers": 737,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "1.x",
      "master"
    ],
    "languages": {
      "JavaScript": 34340
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:58:30.610062"
  }
}