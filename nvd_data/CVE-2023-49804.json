{
  "cve_id": "CVE-2023-49804",
  "github_data": {
    "repository": "louislam/uptime-kuma",
    "fix_commit": "482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0",
    "related_commits": [
      "482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0",
      "482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0",
      "commit_date": "2023-12-10T12:40:40Z",
      "author": {
        "login": "louislam",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-88j4-pcx8-q4q3",
        "length": 498,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 224,
        "additions": 170,
        "deletions": 54
      },
      "files": [
        {
          "filename": "config/vite.config.js",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -3,7 +3,6 @@ import vue from \"@vitejs/plugin-vue\";\n import { defineConfig } from \"vite\";\n import visualizer from \"rollup-plugin-visualizer\";\n import viteCompression from \"vite-plugin-compression\";\n-import commonjs from \"vite-plugin-commonjs\";\n \n const postCssScss = require(\"postcss-scss\");\n const postcssRTLCSS = require(\"postcss-rtlcss\");\n@@ -22,7 +21,6 @@ export default defineConfig({\n         \"CODESPACE_NAME\": JSON.stringify(process.env.CODESPACE_NAME),\n     },\n     plugins: [\n-        commonjs(),\n         vue(),\n         legacy({\n             targets: [ \"since 2015\" ],"
        },
        {
          "filename": "extra/healthcheck.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -6,7 +6,7 @@\n  * \u26a0\ufe0f Deprecated: Changed to healthcheck.go, it will be deleted in the future.\n  * This script should be run after a period of time (180s), because the server may need some time to prepare.\n  */\n-const { FBSD } = require(\"../server/util-server\");\n+const FBSD = /^freebsd/.test(process.platform);\n \n process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n "
        },
        {
          "filename": "extra/reset-password.js",
          "status": "modified",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -5,6 +5,8 @@ const { R } = require(\"redbean-node\");\n const readline = require(\"readline\");\n const { initJWTSecret } = require(\"../server/util-server\");\n const User = require(\"../server/model/user\");\n+const { io } = require(\"socket.io-client\");\n+const { localWebSocketURL } = require(\"../server/config\");\n const args = require(\"args-parser\")(process.argv);\n const rl = readline.createInterface({\n     input: process.stdin,\n@@ -36,12 +38,16 @@ const main = async () => {\n                     // Reset all sessions by reset jwt secret\n                     await initJWTSecret();\n \n+                    // Disconnect all other socket clients of the user\n+                    await disconnectAllSocketClients(user.username, password);\n+\n                     break;\n                 } else {\n                     console.log(\"Passwords do not match, please try again.\");\n                 }\n             }\n             console.log(\"Password reset successfully.\");\n+\n         }\n     } catch (e) {\n         console.error(\"Error: \" + e.message);\n@@ -66,6 +72,45 @@ function question(question) {\n     });\n }\n \n+function disconnectAllSocketClients(username, password) {\n+    return new Promise((resolve) => {\n+        console.log(\"Connecting to \" + localWebSocketURL + \" to disconnect all other socket clients\");\n+\n+        // Disconnect all socket connections\n+        const socket = io(localWebSocketURL, {\n+            transports: [ \"websocket\" ],\n+            reconnection: false,\n+            timeout: 5000,\n+        });\n+        socket.on(\"connect\", () => {\n+            socket.emit(\"login\", {\n+                username,\n+                password,\n+            }, (res) => {\n+                if (res.ok) {\n+                    console.log(\"Logged in.\");\n+                    socket.emit(\"disconnectOtherSocketClients\");\n+                } else {\n+                    console.warn(\"Login failed.\");\n+                    console.warn(\"Please restart the server to disconnect all sessions.\");\n+                }\n+                socket.close();\n+            });\n+        });\n+\n+        socket.on(\"connect_error\", function () {\n+            // The localWebSocketURL is not guaranteed to be working for some complicated Uptime Kuma setup\n+            // Ask the user to restart the server manually\n+            console.warn(\"Failed to connect to \" + localWebSocketURL);\n+            console.warn(\"Please restart the server to disconnect all sessions manually.\");\n+            resolve();\n+        });\n+        socket.on(\"disconnect\", () => {\n+            resolve();\n+        });\n+    });\n+}\n+\n if (!process.env.TEST_BACKEND) {\n     main();\n }"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -192,7 +192,6 @@\n         \"typescript\": \"~4.4.4\",\n         \"v-pagination-3\": \"~0.1.7\",\n         \"vite\": \"~4.4.1\",\n-        \"vite-plugin-commonjs\": \"^0.8.0\",\n         \"vite-plugin-compression\": \"^0.5.1\",\n         \"vue\": \"~3.3.4\",\n         \"vue-chartjs\": \"~5.2.0\","
        },
        {
          "filename": "server/config.js",
          "status": "modified",
          "additions": 34,
          "deletions": 21,
          "patch": "@@ -1,29 +1,42 @@\n+const isFreeBSD = /^freebsd/.test(process.platform);\n+\n // Interop with browser\n const args = (typeof process !== \"undefined\") ? require(\"args-parser\")(process.argv) : {};\n-const demoMode = args[\"demo\"] || false;\n \n-const badgeConstants = {\n-    naColor: \"#999\",\n-    defaultUpColor: \"#66c20a\",\n-    defaultWarnColor: \"#eed202\",\n-    defaultDownColor: \"#c2290a\",\n-    defaultPendingColor: \"#f8a306\",\n-    defaultMaintenanceColor: \"#1747f5\",\n-    defaultPingColor: \"blue\",  // as defined by badge-maker / shields.io\n-    defaultStyle: \"flat\",\n-    defaultPingValueSuffix: \"ms\",\n-    defaultPingLabelSuffix: \"h\",\n-    defaultUptimeValueSuffix: \"%\",\n-    defaultUptimeLabelSuffix: \"h\",\n-    defaultCertExpValueSuffix: \" days\",\n-    defaultCertExpLabelSuffix: \"h\",\n-    // Values Come From Default Notification Times\n-    defaultCertExpireWarnDays: \"14\",\n-    defaultCertExpireDownDays: \"7\"\n-};\n+// If host is omitted, the server will accept connections on the unspecified IPv6 address (::) when IPv6 is available and the unspecified IPv4 address (0.0.0.0) otherwise.\n+// Dual-stack support for (::)\n+// Also read HOST if not FreeBSD, as HOST is a system environment variable in FreeBSD\n+let hostEnv = isFreeBSD ? null : process.env.HOST;\n+const hostname = args.host || process.env.UPTIME_KUMA_HOST || hostEnv;\n+\n+const port = [ args.port, process.env.UPTIME_KUMA_PORT, process.env.PORT, 3001 ]\n+    .map(portValue => parseInt(portValue))\n+    .find(portValue => !isNaN(portValue));\n+\n+const sslKey = args[\"ssl-key\"] || process.env.UPTIME_KUMA_SSL_KEY || process.env.SSL_KEY || undefined;\n+const sslCert = args[\"ssl-cert\"] || process.env.UPTIME_KUMA_SSL_CERT || process.env.SSL_CERT || undefined;\n+const sslKeyPassphrase = args[\"ssl-key-passphrase\"] || process.env.UPTIME_KUMA_SSL_KEY_PASSPHRASE || process.env.SSL_KEY_PASSPHRASE || undefined;\n+\n+const isSSL = sslKey && sslCert;\n+\n+function getLocalWebSocketURL() {\n+    const protocol = isSSL ? \"wss\" : \"ws\";\n+    const host = hostname || \"localhost\";\n+    return `${protocol}://${host}:${port}`;\n+}\n+\n+const localWebSocketURL = getLocalWebSocketURL();\n+\n+const demoMode = args[\"demo\"] || false;\n \n module.exports = {\n     args,\n+    hostname,\n+    port,\n+    sslKey,\n+    sslCert,\n+    sslKeyPassphrase,\n+    isSSL,\n+    localWebSocketURL,\n     demoMode,\n-    badgeConstants,\n };"
        },
        {
          "filename": "server/routers/api-router.js",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -11,12 +11,11 @@ const { R } = require(\"redbean-node\");\n const apicache = require(\"../modules/apicache\");\n const Monitor = require(\"../model/monitor\");\n const dayjs = require(\"dayjs\");\n-const { UP, MAINTENANCE, DOWN, PENDING, flipStatus, log } = require(\"../../src/util\");\n+const { UP, MAINTENANCE, DOWN, PENDING, flipStatus, log, badgeConstants } = require(\"../../src/util\");\n const StatusPage = require(\"../model/status_page\");\n const { UptimeKumaServer } = require(\"../uptime-kuma-server\");\n const { UptimeCacheList } = require(\"../uptime-cache-list\");\n const { makeBadge } = require(\"badge-maker\");\n-const { badgeConstants } = require(\"../config\");\n const { Prometheus } = require(\"../prometheus\");\n \n let router = express.Router();"
        },
        {
          "filename": "server/routers/status-page-router.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@ const StatusPage = require(\"../model/status_page\");\n const { allowDevAllOrigin, sendHttpError } = require(\"../util-server\");\n const { R } = require(\"redbean-node\");\n const Monitor = require(\"../model/monitor\");\n-const { badgeConstants } = require(\"../config\");\n+const { badgeConstants } = require(\"../../src/util\");\n const { makeBadge } = require(\"badge-maker\");\n \n let router = express.Router();"
        },
        {
          "filename": "server/server.js",
          "status": "modified",
          "additions": 6,
          "deletions": 10,
          "patch": "@@ -81,7 +81,7 @@ const notp = require(\"notp\");\n const base32 = require(\"thirty-two\");\n \n const { UptimeKumaServer } = require(\"./uptime-kuma-server\");\n-const server = UptimeKumaServer.getInstance(args);\n+const server = UptimeKumaServer.getInstance();\n const io = module.exports.io = server.io;\n const app = server.app;\n \n@@ -91,7 +91,7 @@ const Monitor = require(\"./model/monitor\");\n const User = require(\"./model/user\");\n \n log.debug(\"server\", \"Importing Settings\");\n-const { getSettings, setSettings, setting, initJWTSecret, checkLogin, startUnitTest, FBSD, doubleCheckPassword, startE2eTests, shake256, SHAKE256_LENGTH\n+const { getSettings, setSettings, setting, initJWTSecret, checkLogin, startUnitTest, doubleCheckPassword, startE2eTests, shake256, SHAKE256_LENGTH\n } = require(\"./util-server\");\n \n log.debug(\"server\", \"Importing Notification\");\n@@ -115,19 +115,13 @@ const passwordHash = require(\"./password-hash\");\n const checkVersion = require(\"./check-version\");\n log.info(\"server\", \"Version: \" + checkVersion.version);\n \n-// If host is omitted, the server will accept connections on the unspecified IPv6 address (::) when IPv6 is available and the unspecified IPv4 address (0.0.0.0) otherwise.\n-// Dual-stack support for (::)\n-// Also read HOST if not FreeBSD, as HOST is a system environment variable in FreeBSD\n-let hostEnv = FBSD ? null : process.env.HOST;\n-let hostname = args.host || process.env.UPTIME_KUMA_HOST || hostEnv;\n+const hostname = config.hostname;\n \n if (hostname) {\n     log.info(\"server\", \"Custom hostname: \" + hostname);\n }\n \n-const port = [ args.port, process.env.UPTIME_KUMA_PORT, process.env.PORT, 3001 ]\n-    .map(portValue => parseInt(portValue))\n-    .find(portValue => !isNaN(portValue));\n+const port = config.port;\n \n const disableFrameSameOrigin = !!process.env.UPTIME_KUMA_DISABLE_FRAME_SAMEORIGIN || args[\"disable-frame-sameorigin\"] || false;\n const cloudflaredToken = args[\"cloudflared-token\"] || process.env.UPTIME_KUMA_CLOUDFLARED_TOKEN || undefined;\n@@ -1157,6 +1151,8 @@ let needSetup = false;\n                 let user = await doubleCheckPassword(socket, password.currentPassword);\n                 await user.resetPassword(password.newPassword);\n \n+                server.disconnectAllSocketClient(user.id, socket.id);\n+\n                 callback({\n                     ok: true,\n                     msg: \"Password has been updated successfully.\","
        },
        {
          "filename": "server/socket-handlers/general-socket-handler.js",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -78,4 +78,14 @@ module.exports.generalSocketHandler = (socket, server) => {\n             });\n         }\n     });\n+\n+    // Disconnect all other socket clients of the user\n+    socket.on(\"disconnectOtherSocketClients\", async () => {\n+        try {\n+            checkLogin(socket);\n+            server.disconnectAllSocketClients(socket.userID, socket.id);\n+        } catch (e) {\n+            log.warn(\"disconnectAllSocketClients\", e.message);\n+        }\n+    });\n };"
        },
        {
          "filename": "server/uptime-kuma-server.js",
          "status": "modified",
          "additions": 24,
          "deletions": 9,
          "patch": "@@ -12,6 +12,7 @@ const { Settings } = require(\"./settings\");\n const dayjs = require(\"dayjs\");\n const childProcessAsync = require(\"promisify-child-process\");\n const path = require(\"path\");\n+const { isSSL, sslKey, sslCert, sslKeyPassphrase } = require(\"./config\");\n // DO NOT IMPORT HERE IF THE MODULES USED `UptimeKumaServer.getInstance()`, put at the bottom of this file instead.\n \n /**\n@@ -62,22 +63,17 @@ class UptimeKumaServer {\n      */\n     jwtSecret = null;\n \n-    static getInstance(args) {\n+    static getInstance() {\n         if (UptimeKumaServer.instance == null) {\n-            UptimeKumaServer.instance = new UptimeKumaServer(args);\n+            UptimeKumaServer.instance = new UptimeKumaServer();\n         }\n         return UptimeKumaServer.instance;\n     }\n \n-    constructor(args) {\n-        // SSL\n-        const sslKey = args[\"ssl-key\"] || process.env.UPTIME_KUMA_SSL_KEY || process.env.SSL_KEY || undefined;\n-        const sslCert = args[\"ssl-cert\"] || process.env.UPTIME_KUMA_SSL_CERT || process.env.SSL_CERT || undefined;\n-        const sslKeyPassphrase = args[\"ssl-key-passphrase\"] || process.env.UPTIME_KUMA_SSL_KEY_PASSPHRASE || process.env.SSL_KEY_PASSPHRASE || undefined;\n-\n+    constructor() {\n         log.info(\"server\", \"Creating express and socket.io instance\");\n         this.app = express();\n-        if (sslKey && sslCert) {\n+        if (isSSL) {\n             log.info(\"server\", \"Server Type: HTTPS\");\n             this.httpServer = https.createServer({\n                 key: fs.readFileSync(sslKey),\n@@ -422,6 +418,25 @@ class UptimeKumaServer {\n             }\n         }\n     }\n+\n+    /**\n+     * Force connected sockets of a user to refresh and disconnect.\n+     * Used for resetting password.\n+     * @param {string} userID\n+     * @param {string?} currentSocketID\n+     */\n+    disconnectAllSocketClients(userID, currentSocketID = undefined) {\n+        for (const socket of this.io.sockets.sockets.values()) {\n+            if (socket.userID === userID && socket.id !== currentSocketID) {\n+                try {\n+                    socket.emit(\"refresh\");\n+                    socket.disconnect();\n+                } catch (e) {\n+\n+                }\n+            }\n+        }\n+    }\n }\n \n module.exports = {"
        },
        {
          "filename": "server/util-server.js",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -1,15 +1,14 @@\n const tcpp = require(\"tcp-ping\");\n const ping = require(\"@louislam/ping\");\n const { R } = require(\"redbean-node\");\n-const { log, genSecret } = require(\"../src/util\");\n+const { log, genSecret, badgeConstants } = require(\"../src/util\");\n const passwordHash = require(\"./password-hash\");\n const { Resolver } = require(\"dns\");\n const childProcess = require(\"child_process\");\n const iconv = require(\"iconv-lite\");\n const chardet = require(\"chardet\");\n const mqtt = require(\"mqtt\");\n const chroma = require(\"chroma-js\");\n-const { badgeConstants } = require(\"./config\");\n const mssql = require(\"mssql\");\n const { Client } = require(\"pg\");\n const postgresConParse = require(\"pg-connection-string\").parse;"
        },
        {
          "filename": "src/components/BadgeGeneratorDialog.vue",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -135,7 +135,7 @@\n <script lang=\"ts\">\n import { Modal } from \"bootstrap\";\n import CopyableInput from \"./CopyableInput.vue\";\n-import { default as serverConfig } from \"../../server/config.js\";\n+import { badgeConstants } from \"../util.ts\";\n \n export default {\n     components: {\n@@ -230,7 +230,7 @@ export default {\n                     \"labelColor\",\n                 ],\n             },\n-            badgeConstants: serverConfig.badgeConstants,\n+            badgeConstants,\n         };\n     },\n "
        },
        {
          "filename": "src/mixins/socket.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -288,6 +288,10 @@ export default {\n             socket.on(\"initServerTimezone\", () => {\n                 socket.emit(\"initServerTimezone\", dayjs.tz.guess());\n             });\n+\n+            socket.on(\"refresh\", () => {\n+                location.reload();\n+            });\n         },\n \n         /**"
        },
        {
          "filename": "src/pages/EditMonitor.vue",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -848,9 +848,8 @@ import NotificationDialog from \"../components/NotificationDialog.vue\";\n import DockerHostDialog from \"../components/DockerHostDialog.vue\";\n import ProxyDialog from \"../components/ProxyDialog.vue\";\n import TagsManager from \"../components/TagsManager.vue\";\n-import { genSecret, isDev, MAX_INTERVAL_SECOND, MIN_INTERVAL_SECOND } from \"../util.ts\";\n+import { genSecret, isDev, MAX_INTERVAL_SECOND, MIN_INTERVAL_SECOND, sleep } from \"../util.ts\";\n import { hostNameRegexPattern } from \"../util-frontend\";\n-import { sleep } from \"../util\";\n import HiddenInput from \"../components/HiddenInput.vue\";\n \n const toast = useToast();"
        },
        {
          "filename": "src/util.js",
          "status": "modified",
          "additions": 20,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@\n // Backend uses the compiled file util.js\n // Frontend uses util.ts\n Object.defineProperty(exports, \"__esModule\", { value: true });\n-exports.localToUTC = exports.utcToLocal = exports.utcToISODateTime = exports.isoToUTCDateTime = exports.parseTimeFromTimeObject = exports.parseTimeObject = exports.getMaintenanceRelativeURL = exports.getMonitorRelativeURL = exports.genSecret = exports.getCryptoRandomInt = exports.getRandomInt = exports.getRandomArbitrary = exports.TimeLogger = exports.polyfill = exports.log = exports.debug = exports.ucfirst = exports.sleep = exports.flipStatus = exports.MIN_INTERVAL_SECOND = exports.MAX_INTERVAL_SECOND = exports.SQL_DATETIME_FORMAT_WITHOUT_SECOND = exports.SQL_DATETIME_FORMAT = exports.SQL_DATE_FORMAT = exports.STATUS_PAGE_MAINTENANCE = exports.STATUS_PAGE_PARTIAL_DOWN = exports.STATUS_PAGE_ALL_UP = exports.STATUS_PAGE_ALL_DOWN = exports.MAINTENANCE = exports.PENDING = exports.UP = exports.DOWN = exports.appName = exports.isDev = void 0;\n+exports.localToUTC = exports.utcToLocal = exports.utcToISODateTime = exports.isoToUTCDateTime = exports.parseTimeFromTimeObject = exports.parseTimeObject = exports.getMaintenanceRelativeURL = exports.getMonitorRelativeURL = exports.genSecret = exports.getCryptoRandomInt = exports.getRandomInt = exports.getRandomArbitrary = exports.TimeLogger = exports.polyfill = exports.log = exports.debug = exports.ucfirst = exports.sleep = exports.flipStatus = exports.badgeConstants = exports.MIN_INTERVAL_SECOND = exports.MAX_INTERVAL_SECOND = exports.SQL_DATETIME_FORMAT_WITHOUT_SECOND = exports.SQL_DATETIME_FORMAT = exports.SQL_DATE_FORMAT = exports.STATUS_PAGE_MAINTENANCE = exports.STATUS_PAGE_PARTIAL_DOWN = exports.STATUS_PAGE_ALL_UP = exports.STATUS_PAGE_ALL_DOWN = exports.MAINTENANCE = exports.PENDING = exports.UP = exports.DOWN = exports.appName = exports.isDev = void 0;\n const dayjs = require(\"dayjs\");\n exports.isDev = process.env.NODE_ENV === \"development\";\n exports.appName = \"Uptime Kuma\";\n@@ -24,6 +24,25 @@ exports.SQL_DATETIME_FORMAT = \"YYYY-MM-DD HH:mm:ss\";\n exports.SQL_DATETIME_FORMAT_WITHOUT_SECOND = \"YYYY-MM-DD HH:mm\";\n exports.MAX_INTERVAL_SECOND = 2073600; // 24 days\n exports.MIN_INTERVAL_SECOND = 20; // 20 seconds\n+exports.badgeConstants = {\n+    naColor: \"#999\",\n+    defaultUpColor: \"#66c20a\",\n+    defaultWarnColor: \"#eed202\",\n+    defaultDownColor: \"#c2290a\",\n+    defaultPendingColor: \"#f8a306\",\n+    defaultMaintenanceColor: \"#1747f5\",\n+    defaultPingColor: \"blue\",\n+    defaultStyle: \"flat\",\n+    defaultPingValueSuffix: \"ms\",\n+    defaultPingLabelSuffix: \"h\",\n+    defaultUptimeValueSuffix: \"%\",\n+    defaultUptimeLabelSuffix: \"h\",\n+    defaultCertExpValueSuffix: \" days\",\n+    defaultCertExpLabelSuffix: \"h\",\n+    // Values Come From Default Notification Times\n+    defaultCertExpireWarnDays: \"14\",\n+    defaultCertExpireDownDays: \"7\"\n+};\n /** Flip the status of s */\n function flipStatus(s) {\n     if (s === exports.UP) {"
        },
        {
          "filename": "src/util.ts",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -29,6 +29,26 @@ export const SQL_DATETIME_FORMAT_WITHOUT_SECOND = \"YYYY-MM-DD HH:mm\";\n export const MAX_INTERVAL_SECOND = 2073600; // 24 days\n export const MIN_INTERVAL_SECOND = 20; // 20 seconds\n \n+export const badgeConstants = {\n+    naColor: \"#999\",\n+    defaultUpColor: \"#66c20a\",\n+    defaultWarnColor: \"#eed202\",\n+    defaultDownColor: \"#c2290a\",\n+    defaultPendingColor: \"#f8a306\",\n+    defaultMaintenanceColor: \"#1747f5\",\n+    defaultPingColor: \"blue\",  // as defined by badge-maker / shields.io\n+    defaultStyle: \"flat\",\n+    defaultPingValueSuffix: \"ms\",\n+    defaultPingLabelSuffix: \"h\",\n+    defaultUptimeValueSuffix: \"%\",\n+    defaultUptimeLabelSuffix: \"h\",\n+    defaultCertExpValueSuffix: \" days\",\n+    defaultCertExpLabelSuffix: \"h\",\n+    // Values Come From Default Notification Times\n+    defaultCertExpireWarnDays: \"14\",\n+    defaultCertExpireDownDays: \"7\"\n+};\n+\n /** Flip the status of s */\n export function flipStatus(s: number) {\n     if (s === UP) {"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 3,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7dc6191b0af91edf58b7938876aa862c2a4ac9bb",
            "date": "2025-01-24T17:49:29Z",
            "author_login": "elliotmatson"
          },
          {
            "sha": "03beef800652be3508ef641867cde75d7f3c8ee4",
            "date": "2025-01-22T18:03:38Z",
            "author_login": "ShiyuBanzhou"
          },
          {
            "sha": "223cde831f09a49a317bc4e5926cc8a38a6fa3f2",
            "date": "2025-01-18T15:35:40Z",
            "author_login": "louislam"
          },
          {
            "sha": "be2faf64ce8973d49d6c4b29dacdedbffc57855e",
            "date": "2024-12-22T05:46:13Z",
            "author_login": "louislam"
          },
          {
            "sha": "0b76e1940105117ed59c42105f4c8211ff4823d5",
            "date": "2024-12-22T05:45:19Z",
            "author_login": "louislam"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.7,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-384",
    "description": "Uptime Kuma is an easy-to-use self-hosted monitoring tool. Prior to version 1.23.9, when a user changes their login password in Uptime Kuma, a previously logged-in user retains access without being logged out. This behavior persists consistently, even after system restarts or browser restarts. This vulnerability allows unauthorized access to user accounts, compromising the security of sensitive information. The same vulnerability was partially fixed in  CVE-2023-44400, but logging existing users out of their accounts was forgotten. To mitigate the risks associated with this vulnerability, the maintainers made the server emit a `refresh` event (clients handle this by reloading) and then disconnecting all clients except the one initiating the password change. It is recommended to update Uptime Kuma to version 1.23.9.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-11T23:15:07.840",
    "last_modified": "2024-11-21T08:33:52.700",
    "fix_date": "2023-12-10T12:40:40Z"
  },
  "references": [
    {
      "url": "https://github.com/louislam/uptime-kuma/commit/482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/louislam/uptime-kuma/commit/482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.556851",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "uptime-kuma",
    "owner": "louislam",
    "created_at": "2021-07-03T01:02:42Z",
    "updated_at": "2025-01-26T07:23:22Z",
    "pushed_at": "2025-01-24T17:49:29Z",
    "size": 27221,
    "stars": 63137,
    "forks": 5608,
    "open_issues": 788,
    "watchers": 63137,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "1.23.X",
      "1.23.X-npm-update",
      "1.23.X-to-2",
      "2.0-last-part",
      "2.0.X",
      "2.1.X",
      "ansible-unofficial",
      "api-via-socketio-client",
      "async-fs",
      "check-lang-json",
      "convert-backend-test",
      "custom-head",
      "escaped-debug",
      "extracted-grpc-monitor",
      "fix-2.0.0-docs-update",
      "fix-check-migrate",
      "fix-data-type",
      "fix-knex",
      "fix-weblate-conflict",
      "improve-heartbeat-msg",
      "master",
      "nfs-warning",
      "node22",
      "npm-publish",
      "queue",
      "release",
      "revert-4376-progress-bar-redesign",
      "revert-4704-dynamic_prometheus_labels",
      "testcontainers",
      "unofficial/grafana-dashboard"
    ],
    "languages": {
      "JavaScript": 905352,
      "Vue": 681744,
      "TypeScript": 22221,
      "SCSS": 15534,
      "Dockerfile": 4408,
      "Go": 2699,
      "Shell": 2058,
      "HTML": 1102,
      "Java": 908,
      "C#": 557,
      "PowerShell": 387,
      "PHP": 322,
      "Python": 216
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:59:13.420479"
  }
}