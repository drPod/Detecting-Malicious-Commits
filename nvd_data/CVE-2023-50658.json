{
  "cve_id": "CVE-2023-50658",
  "github_data": {
    "repository": "dvsekhvalnov/jose2go",
    "fix_commit": "a4584e9dd7128608fedbc67892eba9697f0d5317",
    "related_commits": [
      "a4584e9dd7128608fedbc67892eba9697f0d5317",
      "a4584e9dd7128608fedbc67892eba9697f0d5317"
    ],
    "patch_url": "https://github.com/dvsekhvalnov/jose2go/commit/a4584e9dd7128608fedbc67892eba9697f0d5317.patch",
    "fix_commit_details": {
      "sha": "a4584e9dd7128608fedbc67892eba9697f0d5317",
      "commit_date": "2023-11-23T17:26:26Z",
      "author": {
        "login": "dvsekhvalnov",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Adding min/max iteration count guards to pbes2-hmac-aeskw algorithm",
        "length": 67,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 85,
        "additions": 79,
        "deletions": 6
      },
      "files": [
        {
          "filename": "jose_test.go",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -1634,6 +1634,40 @@ func (s *TestSuite) TestDecrypt_PBSE2_HS512_A256KW_A256CBC_HS512(c *C) {\n \tc.Assert(test, Equals, `{\"exp\":1392553211,\"sub\":\"alice\",\"nbf\":1392552611,\"aud\":[\"https:\\/\\/app-one.com\",\"https:\\/\\/app-two.com\"],\"iss\":\"https:\\/\\/openid.net\",\"jti\":\"586dd129-a29f-49c8-9de7-454af1155e27\",\"iat\":1392552611}`)\n }\n \n+func (s *TestSuite) TestDecrypt_PBSE2_HS512_A256KW_A256CBC_HS512_MinIterationViolation(c *C) {\n+\t//given\n+\tpbes2Hs512 := DeregisterJwa(PBES2_HS512_A256KW)\n+\tRegisterJwa(NewPbse2HmacAesKWAlg(256, 300000, 10000))\n+\ttoken := \"eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwicDJjIjo4MTkyLCJwMnMiOiJCUlkxQ1M3VXNpaTZJNzhkIn0.ovjAL7yRnB_XdJbK8lAaUDRZ-CyVeio8f4pnqOt1FPj1PoQAdEX3S5x6DlzR8aqN_WR5LUwdqDSyUDYhSurnmq8VLfzd3AEe.YAjH6g_zekXJIlPN4Ooo5Q.tutaltxpeVyayXZ9pQovGXTWTf_GWWvtu25Jeg9jgoH0sUX9KCnL00A69e4GJR6EMxalmWsa45AItffbwjUBmwdyklC4ZbTgaovVRs-UwqsZFBO2fpEb7qLajjwra7o4OegzgXDD0jhrKrUusvRWGBvenvumb5euibUxmIfBUcVF1JbdfYxx7ztFeS-QKJpDkE00zyEkViq-QxfrMVl5p7LGmTz8hMrFL3LXLokypZSDgFBfsUzChJf3mlYzxiGaGUqhs7NksQJDoUYf6prPow.XwRVfVTTPogO74RnxZD_9Mse26fTSehna1pbWy4VHfY\"\n+\n+\t//when\n+\ttest, headers, err := Decode(token, \"top secret\")\n+\tfmt.Printf(\"\\np2c min iteration err= %v\\n\", err)\n+\n+\t//then\n+\tRegisterJwa(pbes2Hs512)\n+\tc.Assert(err, NotNil)\n+\tc.Assert(test, Equals, \"\")\n+\tc.Assert(headers, IsNil)\n+}\n+\n+func (s *TestSuite) TestDecrypt_PBSE2_HS512_A256KW_A256CBC_HS512_MaxIterationViolation(c *C) {\n+\t//given\n+\tpbes2Hs512 := DeregisterJwa(PBES2_HS512_A256KW)\n+\tRegisterJwa(NewPbse2HmacAesKWAlg(256, 8000, 0))\n+\ttoken := \"eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwicDJjIjo4MTkyLCJwMnMiOiJCUlkxQ1M3VXNpaTZJNzhkIn0.ovjAL7yRnB_XdJbK8lAaUDRZ-CyVeio8f4pnqOt1FPj1PoQAdEX3S5x6DlzR8aqN_WR5LUwdqDSyUDYhSurnmq8VLfzd3AEe.YAjH6g_zekXJIlPN4Ooo5Q.tutaltxpeVyayXZ9pQovGXTWTf_GWWvtu25Jeg9jgoH0sUX9KCnL00A69e4GJR6EMxalmWsa45AItffbwjUBmwdyklC4ZbTgaovVRs-UwqsZFBO2fpEb7qLajjwra7o4OegzgXDD0jhrKrUusvRWGBvenvumb5euibUxmIfBUcVF1JbdfYxx7ztFeS-QKJpDkE00zyEkViq-QxfrMVl5p7LGmTz8hMrFL3LXLokypZSDgFBfsUzChJf3mlYzxiGaGUqhs7NksQJDoUYf6prPow.XwRVfVTTPogO74RnxZD_9Mse26fTSehna1pbWy4VHfY\"\n+\n+\t//when\n+\ttest, headers, err := Decode(token, \"top secret\")\n+\tfmt.Printf(\"\\np2c max iteration err= %v\\n\", err)\n+\n+\t//then\n+\tRegisterJwa(pbes2Hs512)\n+\tc.Assert(err, NotNil)\n+\tc.Assert(test, Equals, \"\")\n+\tc.Assert(headers, IsNil)\n+}\n+\n func (s *TestSuite) TestEncrypt_PBSE2_HS256_A128KW_A128GCM(c *C) {\n \t//given\n \tpayload := `{\"hello\": \"world\"}`"
        },
        {
          "filename": "pbse2_hmac_aeskw.go",
          "status": "modified",
          "additions": 45,
          "deletions": 6,
          "patch": "@@ -4,6 +4,7 @@ import (\n \t\"crypto/sha256\"\n \t\"crypto/sha512\"\n \t\"errors\"\n+\t\"fmt\"\n \t\"hash\"\n \n \t\"github.com/dvsekhvalnov/jose2go/arrays\"\n@@ -12,15 +13,28 @@ import (\n )\n \n func init() {\n-\tRegisterJwa(&Pbse2HmacAesKW{keySizeBits: 128, aesKW: &AesKW{keySizeBits: 128}})\n-\tRegisterJwa(&Pbse2HmacAesKW{keySizeBits: 192, aesKW: &AesKW{keySizeBits: 192}})\n-\tRegisterJwa(&Pbse2HmacAesKW{keySizeBits: 256, aesKW: &AesKW{keySizeBits: 256}})\n+\tRegisterJwa(NewPbse2HmacAesKWAlg(128, 310000, 0))\n+\tRegisterJwa(NewPbse2HmacAesKWAlg(192, 250000, 0))\n+\tRegisterJwa(NewPbse2HmacAesKWAlg(256, 120000, 0))\n }\n \n // PBSE2 with HMAC key management algorithm implementation\n type Pbse2HmacAesKW struct {\n-\tkeySizeBits int\n-\taesKW       JwaAlgorithm\n+\tkeySizeBits   int\n+\taesKW         JwaAlgorithm\n+\tmaxIterations int64\n+\tminIterations int64\n+}\n+\n+func NewPbse2HmacAesKWAlg(keySize int, maxIters int64, minIters int64) JwaAlgorithm {\n+\tswitch keySize {\n+\tcase 128:\n+\t\treturn &Pbse2HmacAesKW{keySizeBits: 128, maxIterations: maxIters, minIterations: minIters, aesKW: &AesKW{keySizeBits: 128}}\n+\tcase 192:\n+\t\treturn &Pbse2HmacAesKW{keySizeBits: 192, maxIterations: maxIters, minIterations: minIters, aesKW: &AesKW{keySizeBits: 192}}\n+\tdefault:\n+\t\treturn &Pbse2HmacAesKW{keySizeBits: 256, maxIterations: maxIters, minIterations: minIters, aesKW: &AesKW{keySizeBits: 256}}\n+\t}\n }\n \n func (alg *Pbse2HmacAesKW) Name() string {\n@@ -46,6 +60,21 @@ func (alg *Pbse2HmacAesKW) WrapNewKey(cekSizeBits int, key interface{}, header m\n \t\t\treturn nil, nil, err\n \t\t}\n \n+\t\t// use user provided iteration counts if any\n+\t\tif p2c, ok := header[\"p2c\"].(int); ok {\n+\t\t\titerationCount = p2c\n+\t\t}\n+\n+\t\tif int64(iterationCount) > alg.maxIterations {\n+\t\t\treturn nil, nil, errors.New(\n+\t\t\t\tfmt.Sprintf(\"Pbse2HmacAesKW.Unwrap(): expected 'p2c' to be less than %v but got %v\", alg.maxIterations, iterationCount))\n+\t\t}\n+\n+\t\tif int64(iterationCount) < alg.minIterations {\n+\t\t\treturn nil, nil, errors.New(\n+\t\t\t\tfmt.Sprintf(\"Pbse2HmacAesKW.Unwrap(): expected 'p2c' to be higher than %v but got %v\", alg.minIterations, iterationCount))\n+\t\t}\n+\n \t\theader[\"p2c\"] = iterationCount\n \t\theader[\"p2s\"] = base64url.Encode(saltInput)\n \n@@ -69,8 +98,18 @@ func (alg *Pbse2HmacAesKW) Unwrap(encryptedCek []byte, key interface{}, cekSizeB\n \t\t\treturn nil, errors.New(\"Pbse2HmacAesKW.Unwrap(): expected 'p2c' param in JWT header, but was not found.\")\n \t\t}\n \n+\t\tif int64(p2c) > alg.maxIterations {\n+\t\t\treturn nil, errors.New(\n+\t\t\t\tfmt.Sprintf(\"Pbse2HmacAesKW.Unwrap(): expected 'p2c' to be less than %v but got %v\", alg.maxIterations, p2c))\n+\t\t}\n+\n+\t\tif int64(p2c) < alg.minIterations {\n+\t\t\treturn nil, errors.New(\n+\t\t\t\tfmt.Sprintf(\"Pbse2HmacAesKW.Unwrap(): expected 'p2c' to be higher than %v but got %v\", alg.minIterations, p2c))\n+\t\t}\n+\n \t\tif p2s, ok = header[\"p2s\"].(string); !ok {\n-\t\t\treturn nil, errors.New(\"Pbse2HmacAesKW.Unwrap(): expected 'p2s' param in JWT header, but was not found.\")\n+\t\t\treturn nil, errors.New(\"Pbse2HmacAesKW.Unwrap(): expected 'p2s' param in JWT header, but was not found\")\n \t\t}\n \n \t\tvar saltInput []byte"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "545283b045d292c73194aca034b7815228a5e574",
            "date": "2024-11-13T07:21:28Z",
            "author_login": "dvsekhvalnov"
          },
          {
            "sha": "376e5fcfef8cb47d22d1b902148184933061e138",
            "date": "2024-11-12T18:12:16Z",
            "author_login": "dvsekhvalnov"
          },
          {
            "sha": "d61e50334cdc0b0b79fbc1f1994fba12a7b723a8",
            "date": "2024-11-12T18:01:31Z",
            "author_login": "dvsekhvalnov"
          },
          {
            "sha": "9d42093dd85254b28035623e61fd8720a59e7e57",
            "date": "2024-11-12T16:05:27Z",
            "author_login": "dvsekhvalnov"
          },
          {
            "sha": "46a17540d384b88d3a9ba83c91060f6752898b34",
            "date": "2024-11-12T16:05:27Z",
            "author_login": "dvsekhvalnov"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": null,
    "description": "The jose2go component before 1.6.0 for Go allows attackers to cause a denial of service (CPU consumption) via a large p2c (aka PBES2 Count) value.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-02-29T01:42:01.123",
    "last_modified": "2024-11-21T08:37:07.667",
    "fix_date": "2023-11-23T17:26:26Z"
  },
  "references": [
    {
      "url": "https://github.com/dvsekhvalnov/jose2go/commit/a4584e9dd7128608fedbc67892eba9697f0d5317",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/dvsekhvalnov/jose2go/compare/v1.5.0...v1.6.0",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/dvsekhvalnov/jose2go/commit/a4584e9dd7128608fedbc67892eba9697f0d5317",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/dvsekhvalnov/jose2go/compare/v1.5.0...v1.6.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.174021",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jose2go",
    "owner": "dvsekhvalnov",
    "created_at": "2014-08-11T13:37:51Z",
    "updated_at": "2024-11-13T07:21:38Z",
    "pushed_at": "2024-11-13T07:21:35Z",
    "size": 397,
    "stars": 187,
    "forks": 29,
    "open_issues": 1,
    "watchers": 187,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 235584
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:33:50.208169"
  }
}