{
  "cve_id": "CVE-2023-50710",
  "github_data": {
    "repository": "honojs/hono",
    "fix_commit": "8e2b6b08518998783f66d31db4f21b1b1eecc4c8",
    "related_commits": [
      "8e2b6b08518998783f66d31db4f21b1b1eecc4c8",
      "8e2b6b08518998783f66d31db4f21b1b1eecc4c8"
    ],
    "patch_url": "https://github.com/honojs/hono/commit/8e2b6b08518998783f66d31db4f21b1b1eecc4c8.patch",
    "fix_commit_details": {
      "sha": "8e2b6b08518998783f66d31db4f21b1b1eecc4c8",
      "commit_date": "2023-12-14T01:21:02Z",
      "author": {
        "login": "yusukebe",
        "type": "User",
        "stats": {
          "total_commits": 1394,
          "average_weekly_commits": 8.604938271604938,
          "total_additions": 125135,
          "total_deletions": 101735,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-f6gv-hh8j-q8vq",
        "length": 159,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 73,
        "additions": 49,
        "deletions": 24
      },
      "files": [
        {
          "filename": "deno_dist/router/trie-router/node.ts",
          "status": "modified",
          "additions": 17,
          "deletions": 12,
          "patch": "@@ -5,12 +5,15 @@ import { splitPath, splitRoutingPath, getPattern } from '../../utils/url.ts'\n \n type HandlerSet<T> = {\n   handler: T\n-  params: Record<string, string>\n   possibleKeys: string[]\n   score: number\n   name: string // For debug\n }\n \n+type HandlerParamsSet<T> = HandlerSet<T> & {\n+  params: Record<string, string>\n+}\n+\n export class Node<T> {\n   methods: Record<string, HandlerSet<T>>[]\n \n@@ -26,7 +29,7 @@ export class Node<T> {\n     this.name = ''\n     if (method && handler) {\n       const m: Record<string, HandlerSet<T>> = {}\n-      m[method] = { handler, params: {}, possibleKeys: [], score: 0, name: this.name }\n+      m[method] = { handler, possibleKeys: [], score: 0, name: this.name }\n       this.methods = [m]\n     }\n     this.patterns = []\n@@ -74,7 +77,6 @@ export class Node<T> {\n \n     const handlerSet: HandlerSet<T> = {\n       handler,\n-      params: {},\n       possibleKeys,\n       name: this.name,\n       score: this.order,\n@@ -87,12 +89,17 @@ export class Node<T> {\n   }\n \n   // getHandlerSets\n-  private gHSets(node: Node<T>, method: string, params: Record<string, string>): HandlerSet<T>[] {\n-    const handlerSets: HandlerSet<T>[] = []\n+  private gHSets(\n+    node: Node<T>,\n+    method: string,\n+    params: Record<string, string>\n+  ): HandlerParamsSet<T>[] {\n+    const handlerSets: HandlerParamsSet<T>[] = []\n     for (let i = 0, len = node.methods.length; i < len; i++) {\n       const m = node.methods[i]\n-      const handlerSet = m[method] || m[METHOD_NAME_ALL]\n+      const handlerSet = (m[method] || m[METHOD_NAME_ALL]) as HandlerParamsSet<T>\n       if (handlerSet !== undefined) {\n+        handlerSet.params = {}\n         handlerSet.possibleKeys.map((key) => {\n           handlerSet.params[key] = params[key]\n         })\n@@ -103,7 +110,7 @@ export class Node<T> {\n   }\n \n   search(method: string, path: string): [[T, Params][]] {\n-    const handlerSets: HandlerSet<T>[] = []\n+    const handlerSets: HandlerParamsSet<T>[] = []\n \n     const params: Record<string, string> = {}\n     this.params = {}\n@@ -126,11 +133,9 @@ export class Node<T> {\n           if (isLast === true) {\n             // '/hello/*' => match '/hello'\n             if (nextNode.children['*']) {\n-              handlerSets.push(\n-                ...this.gHSets(nextNode.children['*'], method, { ...params, ...node.params })\n-              )\n+              handlerSets.push(...this.gHSets(nextNode.children['*'], method, node.params))\n             }\n-            handlerSets.push(...this.gHSets(nextNode, method, { ...params, ...node.params }))\n+            handlerSets.push(...this.gHSets(nextNode, method, node.params))\n           } else {\n             tempNodes.push(nextNode)\n           }\n@@ -144,7 +149,7 @@ export class Node<T> {\n           if (pattern === '*') {\n             const astNode = node.children['*']\n             if (astNode) {\n-              handlerSets.push(...this.gHSets(astNode, method, { ...params, ...node.params }))\n+              handlerSets.push(...this.gHSets(astNode, method, node.params))\n               tempNodes.push(astNode)\n             }\n             continue"
        },
        {
          "filename": "src/router/trie-router/node.test.ts",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -89,6 +89,21 @@ describe('Name path', () => {\n     expect(res[0][0]).toEqual('get events')\n     expect(res[0][1]['location']).toBe('yokohama')\n   })\n+\n+  it('Should not return a previous param value', () => {\n+    const node = new Node()\n+    node.insert('delete', '/resource/:id', 'resource')\n+    const [resA] = node.search('delete', '/resource/a')\n+    const [resB] = node.search('delete', '/resource/b')\n+    expect(resA).not.toBeNull()\n+    expect(resA.length).toBe(1)\n+    expect(resA[0][0]).toEqual('resource')\n+    expect(resA[0][1]).toEqual({ id: 'a' })\n+    expect(resB).not.toBeNull()\n+    expect(resB.length).toBe(1)\n+    expect(resB[0][0]).toEqual('resource')\n+    expect(resB[0][1]).toEqual({ id: 'b' })\n+  })\n })\n \n describe('Name path - Multiple route', () => {"
        },
        {
          "filename": "src/router/trie-router/node.ts",
          "status": "modified",
          "additions": 17,
          "deletions": 12,
          "patch": "@@ -5,12 +5,15 @@ import { splitPath, splitRoutingPath, getPattern } from '../../utils/url'\n \n type HandlerSet<T> = {\n   handler: T\n-  params: Record<string, string>\n   possibleKeys: string[]\n   score: number\n   name: string // For debug\n }\n \n+type HandlerParamsSet<T> = HandlerSet<T> & {\n+  params: Record<string, string>\n+}\n+\n export class Node<T> {\n   methods: Record<string, HandlerSet<T>>[]\n \n@@ -26,7 +29,7 @@ export class Node<T> {\n     this.name = ''\n     if (method && handler) {\n       const m: Record<string, HandlerSet<T>> = {}\n-      m[method] = { handler, params: {}, possibleKeys: [], score: 0, name: this.name }\n+      m[method] = { handler, possibleKeys: [], score: 0, name: this.name }\n       this.methods = [m]\n     }\n     this.patterns = []\n@@ -74,7 +77,6 @@ export class Node<T> {\n \n     const handlerSet: HandlerSet<T> = {\n       handler,\n-      params: {},\n       possibleKeys,\n       name: this.name,\n       score: this.order,\n@@ -87,12 +89,17 @@ export class Node<T> {\n   }\n \n   // getHandlerSets\n-  private gHSets(node: Node<T>, method: string, params: Record<string, string>): HandlerSet<T>[] {\n-    const handlerSets: HandlerSet<T>[] = []\n+  private gHSets(\n+    node: Node<T>,\n+    method: string,\n+    params: Record<string, string>\n+  ): HandlerParamsSet<T>[] {\n+    const handlerSets: HandlerParamsSet<T>[] = []\n     for (let i = 0, len = node.methods.length; i < len; i++) {\n       const m = node.methods[i]\n-      const handlerSet = m[method] || m[METHOD_NAME_ALL]\n+      const handlerSet = (m[method] || m[METHOD_NAME_ALL]) as HandlerParamsSet<T>\n       if (handlerSet !== undefined) {\n+        handlerSet.params = {}\n         handlerSet.possibleKeys.map((key) => {\n           handlerSet.params[key] = params[key]\n         })\n@@ -103,7 +110,7 @@ export class Node<T> {\n   }\n \n   search(method: string, path: string): [[T, Params][]] {\n-    const handlerSets: HandlerSet<T>[] = []\n+    const handlerSets: HandlerParamsSet<T>[] = []\n \n     const params: Record<string, string> = {}\n     this.params = {}\n@@ -126,11 +133,9 @@ export class Node<T> {\n           if (isLast === true) {\n             // '/hello/*' => match '/hello'\n             if (nextNode.children['*']) {\n-              handlerSets.push(\n-                ...this.gHSets(nextNode.children['*'], method, { ...params, ...node.params })\n-              )\n+              handlerSets.push(...this.gHSets(nextNode.children['*'], method, node.params))\n             }\n-            handlerSets.push(...this.gHSets(nextNode, method, { ...params, ...node.params }))\n+            handlerSets.push(...this.gHSets(nextNode, method, node.params))\n           } else {\n             tempNodes.push(nextNode)\n           }\n@@ -144,7 +149,7 @@ export class Node<T> {\n           if (pattern === '*') {\n             const astNode = node.children['*']\n             if (astNode) {\n-              handlerSets.push(...this.gHSets(astNode, method, { ...params, ...node.params }))\n+              handlerSets.push(...this.gHSets(astNode, method, node.params))\n               tempNodes.push(astNode)\n             }\n             continue"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2a68c594d24c282d0c9f9c286f114acf5019f383",
            "date": "2025-01-14T03:03:13Z",
            "author_login": "miyaji255"
          },
          {
            "sha": "2ead4d8faa58d187bf7ec74bac2160bab882eab0",
            "date": "2025-01-05T09:18:19Z",
            "author_login": "yusukebe"
          },
          {
            "sha": "100745a27fdfd9bf1860179f774548f884a67b85",
            "date": "2025-01-05T09:12:05Z",
            "author_login": "yusukebe"
          },
          {
            "sha": "5af7b4fc9126e17303f50c2f801da7be0cc2e0e5",
            "date": "2025-01-05T08:44:05Z",
            "author_login": "askorupskyy"
          },
          {
            "sha": "fa6f51bb1b110cddc7dc41cb7e531fab27fe871f",
            "date": "2025-01-01T04:34:26Z",
            "author_login": "usualoma"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:L",
    "cwe_id": "CWE-94",
    "description": "Hono is a web framework written in TypeScript. Prior to version 3.11.7, clients may override named path parameter values from previous requests if the application is using TrieRouter. So, there is a risk that a privileged user may use unintended parameters when deleting REST API resources. TrieRouter is used either explicitly or when the application matches a pattern that is not supported by the default RegExpRouter. Version 3.11.7 includes the change to fix this issue. As a workaround, avoid using TrieRouter directly.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-12-14T18:15:45.270",
    "last_modified": "2024-11-21T08:37:11.103",
    "fix_date": "2023-12-14T01:21:02Z"
  },
  "references": [
    {
      "url": "https://github.com/honojs/hono/commit/8e2b6b08518998783f66d31db4f21b1b1eecc4c8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/honojs/hono/releases/tag/v3.11.7",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/honojs/hono/security/advisories/GHSA-f6gv-hh8j-q8vq",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/honojs/hono/commit/8e2b6b08518998783f66d31db4f21b1b1eecc4c8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/honojs/hono/releases/tag/v3.11.7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/honojs/hono/security/advisories/GHSA-f6gv-hh8j-q8vq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.571629",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "hono",
    "owner": "honojs",
    "created_at": "2021-12-14T20:05:30Z",
    "updated_at": "2025-01-14T19:45:58Z",
    "pushed_at": "2025-01-14T03:03:14Z",
    "size": 7526,
    "stars": 21475,
    "forks": 636,
    "open_issues": 259,
    "watchers": 21475,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1736765,
      "JavaScript": 8965,
      "Dockerfile": 251,
      "HTML": 12
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:32:55.007210"
  }
}