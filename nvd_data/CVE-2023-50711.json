{
  "cve_id": "CVE-2023-50711",
  "github_data": {
    "repository": "rust-vmm/vmm-sys-util",
    "fix_commit": "30172fca2a8e0a38667d934ee56682247e13f167",
    "related_commits": [
      "30172fca2a8e0a38667d934ee56682247e13f167",
      "30172fca2a8e0a38667d934ee56682247e13f167"
    ],
    "patch_url": "https://github.com/rust-vmm/vmm-sys-util/commit/30172fca2a8e0a38667d934ee56682247e13f167.patch",
    "fix_commit_details": {
      "sha": "30172fca2a8e0a38667d934ee56682247e13f167",
      "commit_date": "2023-11-13T16:29:59Z",
      "author": {
        "login": "bchalios",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: deserialization issue of FamStructWrapper with serde",
        "length": 1457,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 69,
        "additions": 59,
        "deletions": 10
      },
      "files": [
        {
          "filename": "Cargo.toml",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"vmm-sys-util\"\n-version = \"0.11.2\"\n+version = \"0.12.0\"\n authors = [\"Intel Virtualization Team <vmm-maintainers@intel.com>\"]\n description = \"A system utility set\"\n repository = \"https://github.com/rust-vmm/vmm-sys-util\"\n@@ -26,3 +26,4 @@ bitflags = \"1.0\"\n \n [dev-dependencies]\n serde_json = \"1.0.9\"\n+bincode = \"1.3.3\""
        },
        {
          "filename": "src/fam.rs",
          "status": "modified",
          "additions": 57,
          "deletions": 9,
          "patch": "@@ -99,7 +99,7 @@ impl fmt::Display for Error {\n ///         self.len as usize\n ///     }\n ///\n-///     fn set_len(&mut self, len: usize) {\n+///     unsafe fn set_len(&mut self, len: usize) {\n ///         self.len = len as u32\n ///     }\n ///\n@@ -135,7 +135,12 @@ pub unsafe trait FamStruct {\n     ///\n     /// These type of structures contain a member that holds the FAM length.\n     /// This method will set the value of that member.\n-    fn set_len(&mut self, len: usize);\n+    ///\n+    /// # Safety\n+    ///\n+    /// The caller needs to ensure that `len` here reflects the correct number of entries of the\n+    /// flexible array part of the struct.\n+    unsafe fn set_len(&mut self, len: usize);\n \n     /// Get max allowed FAM length\n     ///\n@@ -220,7 +225,11 @@ impl<T: Default + FamStruct> FamStructWrapper<T> {\n             // SAFETY: Safe as long T follows the requirements of being POD.\n             mem_allocator.push(unsafe { mem::zeroed() })\n         }\n-        mem_allocator[0].set_len(num_elements);\n+        // SAFETY: The flexible array part of the struct has `num_elements` capacity. We just\n+        // initialized this in `mem_allocator`.\n+        unsafe {\n+            mem_allocator[0].set_len(num_elements);\n+        }\n \n         Ok(FamStructWrapper { mem_allocator })\n     }\n@@ -276,8 +285,8 @@ impl<T: Default + FamStruct> FamStructWrapper<T> {\n         &self.mem_allocator[0]\n     }\n \n-    /// Get a mut reference to the actual [`FamStruct`](trait.FamStruct.html) instance.\n-    pub fn as_mut_fam_struct(&mut self) -> &mut T {\n+    // Get a mut reference to the actual [`FamStruct`](trait.FamStruct.html) instance.\n+    fn as_mut_fam_struct(&mut self) -> &mut T {\n         &mut self.mem_allocator[0]\n     }\n \n@@ -395,7 +404,11 @@ impl<T: Default + FamStruct> FamStructWrapper<T> {\n             self.mem_allocator[i] = unsafe { mem::zeroed() }\n         }\n         // Update the len of the underlying `FamStruct`.\n-        self.as_mut_fam_struct().set_len(len);\n+        // SAFETY: We just adjusted the memory for the underlying `mem_allocator` to hold `len`\n+        // entries.\n+        unsafe {\n+            self.as_mut_fam_struct().set_len(len);\n+        }\n \n         // If the len needs to be decreased, deallocate unnecessary memory\n         if additional_elements < 0 {\n@@ -540,13 +553,23 @@ where\n             {\n                 use serde::de::Error;\n \n-                let header = seq\n+                let header: X = seq\n                     .next_element()?\n                     .ok_or_else(|| de::Error::invalid_length(0, &self))?;\n                 let entries: Vec<X::Entry> = seq\n                     .next_element()?\n                     .ok_or_else(|| de::Error::invalid_length(1, &self))?;\n \n+                if header.len() != entries.len() {\n+                    let msg = format!(\n+                        \"Mismatch between length of FAM specified in FamStruct header ({}) \\\n+                         and actual size of FAM ({})\",\n+                        header.len(),\n+                        entries.len()\n+                    );\n+                    return Err(V::Error::custom(msg));\n+                }\n+\n                 let mut result: Self::Value = FamStructWrapper::from_entries(entries.as_slice())\n                     .map_err(|e| V::Error::custom(format!(\"{:?}\", e)))?;\n                 result.mem_allocator[0] = header;\n@@ -570,7 +593,7 @@ macro_rules! generate_fam_struct_impl {\n                 self.$field_name as usize\n             }\n \n-            fn set_len(&mut self, len: usize) {\n+            unsafe fn set_len(&mut self, len: usize) {\n                 self.$field_name = len as $field_type;\n             }\n \n@@ -603,7 +626,7 @@ mod tests {\n     const MAX_LEN: usize = 100;\n \n     #[repr(C)]\n-    #[derive(Default, PartialEq, Eq)]\n+    #[derive(Default, Debug, PartialEq, Eq)]\n     pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);\n     impl<T> __IncompleteArrayField<T> {\n         #[inline]\n@@ -1078,4 +1101,29 @@ mod tests {\n         assert_eq!(wrapper2.as_mut_fam_struct().flags, 2);\n         assert_eq!(wrapper2.as_slice(), [0, 0, 0, 3, 14, 0, 0, 1]);\n     }\n+\n+    #[cfg(feature = \"with-serde\")]\n+    #[test]\n+    fn test_bad_deserialize() {\n+        #[repr(C)]\n+        #[derive(Default, Debug, PartialEq, Serialize, Deserialize)]\n+        struct Foo {\n+            pub len: u32,\n+            pub padding: u32,\n+            pub entries: __IncompleteArrayField<u32>,\n+        }\n+\n+        generate_fam_struct_impl!(Foo, u32, entries, u32, len, 100);\n+\n+        let state = FamStructWrapper::<Foo>::new(0).unwrap();\n+        let mut bytes = bincode::serialize(&state).unwrap();\n+\n+        // The `len` field of the header is the first to be serialized.\n+        // Writing at position 0 of the serialized data should change its value.\n+        bytes[0] = 255;\n+\n+        assert!(\n+            matches!(bincode::deserialize::<FamStructWrapper<Foo>>(&bytes).map_err(|boxed| *boxed), Err(bincode::ErrorKind::Custom(s)) if s == *\"Mismatch between length of FAM specified in FamStruct header (255) and actual size of FAM (0)\")\n+        );\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "529589f7209742aa264d5bb137ed2c62e255aff2",
            "date": "2025-01-06T15:12:04Z",
            "author_login": "roypat"
          },
          {
            "sha": "f765e5644dd82a0cd523876638a675e1811d67bb",
            "date": "2025-01-01T12:19:24Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0740cbe9f603c8f0ceb41fbec521603b5ee93174",
            "date": "2024-10-18T11:34:26Z",
            "author_login": "RuoqingHe"
          },
          {
            "sha": "a06d2a90d8ff87384677ff59d4e685fc1de6be87",
            "date": "2024-10-18T11:27:54Z",
            "author_login": "RuoqingHe"
          },
          {
            "sha": "9355723ad4fe885f7147d3e6da69a0e6a95b2eb1",
            "date": "2024-11-04T07:44:08Z",
            "author_login": "roypat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.7,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:N/I:L/A:L",
    "cwe_id": "CWE-787",
    "description": "vmm-sys-util is a collection of modules that provides helpers and utilities used by multiple rust-vmm components. Starting in version 0.5.0 and prior to version 0.12.0, an issue in the `FamStructWrapper::deserialize` implementation provided by the crate for `vmm_sys_util::fam::FamStructWrapper` can lead to out of bounds memory accesses. The deserialization does not check that the length stored in the header matches the flexible array length. Mismatch in the lengths might allow out of bounds memory access through Rust-safe methods. The issue was corrected in version 0.12.0 by inserting a check that verifies the lengths of compared flexible arrays are equal for any deserialized header and aborting deserialization otherwise. Moreover, the API was changed so that header length can only be modified through Rust-unsafe code. This ensures that users cannot trigger out-of-bounds memory access from Rust-safe code.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-02T20:15:10.250",
    "last_modified": "2024-11-21T08:37:11.233",
    "fix_date": "2023-11-13T16:29:59Z"
  },
  "references": [
    {
      "url": "https://github.com/rust-vmm/vmm-sys-util/commit/30172fca2a8e0a38667d934ee56682247e13f167",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-vmm/vmm-sys-util/security/advisories/GHSA-875g-mfp6-g7f9",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W5XMCLV2P3ANS3XN4NXZTV4PUNTLWUNJ/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YJI7D273R6G5RUC246KTI2YY3AXZKZMD/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/rust-vmm/vmm-sys-util/commit/30172fca2a8e0a38667d934ee56682247e13f167",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rust-vmm/vmm-sys-util/security/advisories/GHSA-875g-mfp6-g7f9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W5XMCLV2P3ANS3XN4NXZTV4PUNTLWUNJ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YJI7D273R6G5RUC246KTI2YY3AXZKZMD/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.124100",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vmm-sys-util",
    "owner": "rust-vmm",
    "created_at": "2019-03-19T06:07:49Z",
    "updated_at": "2025-01-06T15:24:37Z",
    "pushed_at": "2025-01-06T15:24:40Z",
    "size": 281,
    "stars": 79,
    "forks": 65,
    "open_issues": 18,
    "watchers": 79,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Rust": 249206
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T19:40:00.446061"
  }
}