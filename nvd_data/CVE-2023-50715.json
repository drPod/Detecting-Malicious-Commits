{
  "cve_id": "CVE-2023-50715",
  "github_data": {
    "repository": "home-assistant/core",
    "fix_commit": "dbfc5ea8f96bde6cd165892f5a6a6f9a65731c76",
    "related_commits": [
      "dbfc5ea8f96bde6cd165892f5a6a6f9a65731c76",
      "dbfc5ea8f96bde6cd165892f5a6a6f9a65731c76"
    ],
    "patch_url": "https://github.com/home-assistant/core/commit/dbfc5ea8f96bde6cd165892f5a6a6f9a65731c76.patch",
    "fix_commit_details": {
      "sha": "dbfc5ea8f96bde6cd165892f5a6a6f9a65731c76",
      "commit_date": "2023-12-14T19:28:08Z",
      "author": {
        "login": "frenck",
        "type": "User",
        "stats": {
          "total_commits": 5222,
          "average_weekly_commits": 8.820945945945946,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 288
        }
      },
      "commit_message": {
        "title": "Disable user profiles on login screen (#105749)",
        "length": 47,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 109,
        "additions": 7,
        "deletions": 102
      },
      "files": [
        {
          "filename": "homeassistant/components/auth/login_flow.py",
          "status": "modified",
          "additions": 0,
          "deletions": 21,
          "patch": "@@ -91,7 +91,6 @@\n from homeassistant.components.http.view import HomeAssistantView\n from homeassistant.core import HomeAssistant\n from homeassistant.helpers.network import is_cloud_connection\n-from homeassistant.util.network import is_local\n \n from . import indieauth\n \n@@ -165,8 +164,6 @@ async def get(self, request: web.Request) -> web.Response:\n \n         providers = []\n         for provider in hass.auth.auth_providers:\n-            additional_data = {}\n-\n             if provider.type == \"trusted_networks\":\n                 if cloud_connection:\n                     # Skip quickly as trusted networks are not available on cloud\n@@ -179,30 +176,12 @@ async def get(self, request: web.Request) -> web.Response:\n                 except InvalidAuthError:\n                     # Not a trusted network, so we don't expose that trusted_network authenticator is setup\n                     continue\n-            elif (\n-                provider.type == \"homeassistant\"\n-                and not cloud_connection\n-                and is_local(remote_address)\n-                and \"person\" in hass.config.components\n-            ):\n-                # We are local, return user id and username\n-                users = await provider.store.async_get_users()\n-                additional_data[\"users\"] = {\n-                    user.id: credentials.data[\"username\"]\n-                    for user in users\n-                    for credentials in user.credentials\n-                    if (\n-                        credentials.auth_provider_type == provider.type\n-                        and credentials.auth_provider_id == provider.id\n-                    )\n-                }\n \n             providers.append(\n                 {\n                     \"name\": provider.name,\n                     \"id\": provider.id,\n                     \"type\": provider.type,\n-                    **additional_data,\n                 }\n             )\n "
        },
        {
          "filename": "homeassistant/components/person/__init__.py",
          "status": "modified",
          "additions": 4,
          "deletions": 32,
          "patch": "@@ -2,7 +2,6 @@\n from __future__ import annotations\n \n from http import HTTPStatus\n-from ipaddress import ip_address\n import logging\n from typing import Any\n \n@@ -51,12 +50,10 @@\n )\n from homeassistant.helpers.entity_component import EntityComponent\n from homeassistant.helpers.event import async_track_state_change_event\n-from homeassistant.helpers.network import is_cloud_connection\n from homeassistant.helpers.restore_state import RestoreEntity\n from homeassistant.helpers.storage import Store\n from homeassistant.helpers.typing import ConfigType\n from homeassistant.loader import bind_hass\n-from homeassistant.util.network import is_local\n \n _LOGGER = logging.getLogger(__name__)\n \n@@ -588,33 +585,8 @@ class ListPersonsView(HomeAssistantView):\n \n     async def get(self, request: web.Request) -> web.Response:\n         \"\"\"Return a list of persons if request comes from a local IP.\"\"\"\n-        try:\n-            remote_address = ip_address(request.remote)  # type: ignore[arg-type]\n-        except ValueError:\n-            return self.json_message(\n-                message=\"Invalid remote IP\",\n-                status_code=HTTPStatus.BAD_REQUEST,\n-                message_code=\"invalid_remote_ip\",\n-            )\n-\n-        hass: HomeAssistant = request.app[\"hass\"]\n-        if is_cloud_connection(hass) or not is_local(remote_address):\n-            return self.json_message(\n-                message=\"Not local\",\n-                status_code=HTTPStatus.BAD_REQUEST,\n-                message_code=\"not_local\",\n-            )\n-\n-        yaml, storage, _ = hass.data[DOMAIN]\n-        persons = [*yaml.async_items(), *storage.async_items()]\n-\n-        return self.json(\n-            {\n-                person[ATTR_USER_ID]: {\n-                    ATTR_NAME: person[ATTR_NAME],\n-                    CONF_PICTURE: person.get(CONF_PICTURE),\n-                }\n-                for person in persons\n-                if person.get(ATTR_USER_ID)\n-            }\n+        return self.json_message(\n+            message=\"Not local\",\n+            status_code=HTTPStatus.BAD_REQUEST,\n+            message_code=\"not_local\",\n         )"
        },
        {
          "filename": "tests/components/auth/test_login_flow.py",
          "status": "modified",
          "additions": 1,
          "deletions": 12,
          "patch": "@@ -1,12 +1,10 @@\n \"\"\"Tests for the login flow.\"\"\"\n-from collections.abc import Callable\n from http import HTTPStatus\n from typing import Any\n from unittest.mock import patch\n \n import pytest\n \n-from homeassistant.auth.models import User\n from homeassistant.core import HomeAssistant\n from homeassistant.setup import async_setup_component\n \n@@ -67,22 +65,16 @@ async def _test_fetch_auth_providers_home_assistant(\n     hass: HomeAssistant,\n     aiohttp_client: ClientSessionGenerator,\n     ip: str,\n-    additional_expected_fn: Callable[[User], dict[str, Any]],\n ) -> None:\n     \"\"\"Test fetching auth providers for homeassistant auth provider.\"\"\"\n     client = await async_setup_auth(\n         hass, aiohttp_client, [{\"type\": \"homeassistant\"}], custom_ip=ip\n     )\n \n-    provider = hass.auth.auth_providers[0]\n-    credentials = await provider.async_get_or_create_credentials({\"username\": \"hello\"})\n-    user = await hass.auth.async_get_or_create_user(credentials)\n-\n     expected = {\n         \"name\": \"Home Assistant Local\",\n         \"type\": \"homeassistant\",\n         \"id\": None,\n-        **additional_expected_fn(user),\n     }\n \n     resp = await client.get(\"/auth/providers\")\n@@ -105,9 +97,7 @@ async def test_fetch_auth_providers_home_assistant_person_not_loaded(\n     ip: str,\n ) -> None:\n     \"\"\"Test fetching auth providers for homeassistant auth provider, where person integration is not loaded.\"\"\"\n-    await _test_fetch_auth_providers_home_assistant(\n-        hass, aiohttp_client, ip, lambda _: {}\n-    )\n+    await _test_fetch_auth_providers_home_assistant(hass, aiohttp_client, ip)\n \n \n @pytest.mark.parametrize(\n@@ -134,7 +124,6 @@ async def test_fetch_auth_providers_home_assistant_person_loaded(\n         hass,\n         aiohttp_client,\n         ip,\n-        lambda user: {\"users\": {user.id: user.name}} if is_local else {},\n     )\n \n "
        },
        {
          "filename": "tests/components/person/test_init.py",
          "status": "modified",
          "additions": 2,
          "deletions": 37,
          "patch": "@@ -1,5 +1,4 @@\n \"\"\"The tests for the person component.\"\"\"\n-from collections.abc import Callable\n from http import HTTPStatus\n from typing import Any\n from unittest.mock import patch\n@@ -31,7 +30,6 @@\n from .conftest import DEVICE_TRACKER, DEVICE_TRACKER_2\n \n from tests.common import MockUser, mock_component, mock_restore_cache\n-from tests.test_util import mock_real_ip\n from tests.typing import ClientSessionGenerator, WebSocketGenerator\n \n \n@@ -852,42 +850,10 @@ async def test_entities_in_person(hass: HomeAssistant) -> None:\n     ]\n \n \n-@pytest.mark.parametrize(\n-    (\"ip\", \"status_code\", \"expected_fn\"),\n-    [\n-        (\n-            \"192.168.0.10\",\n-            HTTPStatus.OK,\n-            lambda user: {\n-                user[\"user_id\"]: {\"name\": user[\"name\"], \"picture\": user[\"picture\"]}\n-            },\n-        ),\n-        (\n-            \"::ffff:192.168.0.10\",\n-            HTTPStatus.OK,\n-            lambda user: {\n-                user[\"user_id\"]: {\"name\": user[\"name\"], \"picture\": user[\"picture\"]}\n-            },\n-        ),\n-        (\n-            \"1.2.3.4\",\n-            HTTPStatus.BAD_REQUEST,\n-            lambda _: {\"code\": \"not_local\", \"message\": \"Not local\"},\n-        ),\n-        (\n-            \"2001:db8::1\",\n-            HTTPStatus.BAD_REQUEST,\n-            lambda _: {\"code\": \"not_local\", \"message\": \"Not local\"},\n-        ),\n-    ],\n-)\n async def test_list_persons(\n     hass: HomeAssistant,\n     hass_client_no_auth: ClientSessionGenerator,\n     hass_admin_user: MockUser,\n-    ip: str,\n-    status_code: HTTPStatus,\n-    expected_fn: Callable[[dict[str, Any]], dict[str, Any]],\n ) -> None:\n     \"\"\"Test listing persons from a not local ip address.\"\"\"\n \n@@ -902,11 +868,10 @@ async def test_list_persons(\n     assert await async_setup_component(hass, DOMAIN, config)\n \n     await async_setup_component(hass, \"api\", {})\n-    mock_real_ip(hass.http.app)(ip)\n     client = await hass_client_no_auth()\n \n     resp = await client.get(\"/api/person/list\")\n \n-    assert resp.status == status_code\n+    assert resp.status == HTTPStatus.BAD_REQUEST\n     result = await resp.json()\n-    assert result == expected_fn(admin)\n+    assert result == {\"code\": \"not_local\", \"message\": \"Not local\"}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f80f6d9e3d8278146a2d308eda4e7a1ac7491436",
            "date": "2025-01-14T20:28:10Z",
            "author_login": "dustMason"
          },
          {
            "sha": "c408bd6aadcecf9119ac2858f95c91b051c30b47",
            "date": "2025-01-14T19:39:58Z",
            "author_login": "emontnemery"
          },
          {
            "sha": "faf2c64cc4dfd8f04807a7c48f2c575a7ee0c20e",
            "date": "2025-01-14T19:14:41Z",
            "author_login": "gwww"
          },
          {
            "sha": "60bdc13c9448e60ea257e7281ed4e78ac0f96d4b",
            "date": "2025-01-14T15:23:15Z",
            "author_login": "frenck"
          },
          {
            "sha": "fa961684882aabeddeb9aaa3b799b97864588926",
            "date": "2025-01-14T14:44:18Z",
            "author_login": "epenet"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Home Assistant is open source home automation software. Prior to version 2023.12.3, the login page discloses all active user accounts to any unauthenticated browsing request originating on the Local Area Network. Version 2023.12.3 contains a patch for this issue.\n\nWhen starting the Home Assistant 2023.12 release, the login page returns all currently active user accounts to browsing requests from the Local Area Network. Tests showed that this occurs when the request is not authenticated and the request originated locally, meaning on the Home Assistant host local subnet or any other private subnet. The rationale behind this is to make the login more user-friendly and an experience better aligned with other applications that have multiple user-profiles.\n\nHowever, as a result, all accounts are displayed regardless of them having logged in or not and for any device that navigates to the server. This disclosure is mitigated by the fact that it only occurs for requests originating from a LAN address. But note that this applies to the local subnet where Home Assistant resides and to any private subnet that can reach it.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-15T03:15:45.127",
    "last_modified": "2024-11-21T08:37:11.783",
    "fix_date": "2023-12-14T19:28:08Z"
  },
  "references": [
    {
      "url": "https://github.com/home-assistant/core/commit/dbfc5ea8f96bde6cd165892f5a6a6f9a65731c76",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/home-assistant/core/security/advisories/GHSA-jqpc-rc7g-vf83",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/home-assistant/core/commit/dbfc5ea8f96bde6cd165892f5a6a6f9a65731c76",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/home-assistant/core/security/advisories/GHSA-jqpc-rc7g-vf83",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.575063",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "core",
    "owner": "home-assistant",
    "created_at": "2013-09-17T07:29:48Z",
    "updated_at": "2025-01-14T14:23:32Z",
    "pushed_at": "2025-01-14T14:23:22Z",
    "size": 678065,
    "stars": 75744,
    "forks": 31940,
    "open_issues": 3339,
    "watchers": 75744,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [],
    "languages": {
      "Python": 79086974,
      "Shell": 6502,
      "Dockerfile": 1906,
      "PLSQL": 840,
      "JavaScript": 592,
      "Jinja": 182
    },
    "commit_activity": {
      "total_commits_last_year": 18629,
      "avg_commits_per_week": 358.25,
      "days_active_last_year": 360
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:29:33.568060"
  }
}