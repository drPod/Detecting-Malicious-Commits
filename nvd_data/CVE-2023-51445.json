{
  "cve_id": "CVE-2023-51445",
  "github_data": {
    "repository": "geoserver/geoserver",
    "fix_commit": "7db985738ff2422019ccac974cf547bae5770cad",
    "related_commits": [
      "7db985738ff2422019ccac974cf547bae5770cad",
      "7db985738ff2422019ccac974cf547bae5770cad"
    ],
    "patch_url": "https://github.com/geoserver/geoserver/commit/7db985738ff2422019ccac974cf547bae5770cad.patch",
    "fix_commit_details": {
      "sha": "7db985738ff2422019ccac974cf547bae5770cad",
      "commit_date": "2023-10-09T04:26:26Z",
      "author": {
        "login": "aaime",
        "type": "User",
        "stats": {
          "total_commits": 4244,
          "average_weekly_commits": 6.232011747430249,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 589
        }
      },
      "commit_message": {
        "title": "[GEOS-11148] Update response headers for the Resources REST API (#7163)",
        "length": 125,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 71,
        "additions": 41,
        "deletions": 30
      },
      "files": [
        {
          "filename": "src/restconfig/src/main/java/org/geoserver/rest/resources/ResourceController.java",
          "status": "modified",
          "additions": 23,
          "deletions": 23,
          "patch": "@@ -9,11 +9,8 @@\n import com.thoughtworks.xstream.XStream;\n import com.thoughtworks.xstream.annotations.XStreamAlias;\n import freemarker.template.ObjectWrapper;\n-import java.io.BufferedInputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n-import java.net.URLConnection;\n import java.net.URLDecoder;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n@@ -23,6 +20,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Optional;\n import java.util.TimeZone;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -53,6 +51,7 @@\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.ContentDisposition;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n@@ -129,24 +128,18 @@ protected String getTemplateName(Object object) {\n      * @return Content type requested\n      */\n     protected static MediaType getMediaType(Resource resource, HttpServletRequest request) {\n-        if (resource.getType() == Resource.Type.DIRECTORY) {\n-            return getFormat(request);\n-        } else if (resource.getType() == Resource.Type.RESOURCE) {\n-            String mimeType = URLConnection.guessContentTypeFromName(resource.name());\n-            if (mimeType == null\n-                    || MediaType.APPLICATION_OCTET_STREAM.toString().equals(mimeType)) {\n-                // try guessing from data\n-                try (InputStream is = new BufferedInputStream(resource.in())) {\n-                    mimeType = URLConnection.guessContentTypeFromStream(is);\n-                } catch (IOException e) {\n-                    // do nothing, we'll just use application/octet-stream\n-                }\n-            }\n-            return mimeType == null\n-                    ? MediaType.APPLICATION_OCTET_STREAM\n-                    : MediaType.valueOf(mimeType);\n-        } else {\n-            return null;\n+        switch (resource.getType()) {\n+            case DIRECTORY:\n+                return getFormat(request);\n+            case RESOURCE:\n+                // set the mime if known by the servlet container, otherwise default to\n+                // application/octet-stream to mitigate potential cross-site scripting\n+                return Optional.ofNullable(request.getServletContext())\n+                        .map(sc -> sc.getMimeType(resource.name()))\n+                        .map(MediaType::valueOf)\n+                        .orElse(MediaType.APPLICATION_OCTET_STREAM);\n+            default:\n+                throw new ResourceNotFoundException(\"Undefined resource path.\");\n         }\n     }\n \n@@ -265,21 +258,27 @@ public Object resourceGet(\n         Resource resource = resource(request);\n         Operation operation = operation(operationName);\n         Object result;\n-        response.setContentType(getFormat(format).toString());\n \n         if (operation == Operation.METADATA) {\n             result =\n                     wrapObject(\n                             new ResourceMetadataInfo(resource, request),\n                             ResourceMetadataInfo.class);\n+            response.setContentType(getFormat(format).toString());\n         } else {\n             if (resource.getType() == Resource.Type.UNDEFINED) {\n                 throw new ResourceNotFoundException(\"Undefined resource path.\");\n             } else {\n                 HttpHeaders responseHeaders = new HttpHeaders();\n                 MediaType mediaType = getMediaType(resource, request);\n                 responseHeaders.setContentType(mediaType);\n-                response.setContentType(mediaType.toString());\n+                if (resource.getType() == Resource.Type.RESOURCE) {\n+                    // Use Content-Disposition: attachment to mitigate potential XSS issues\n+                    responseHeaders.setContentDisposition(\n+                            ContentDisposition.builder(\"attachment\")\n+                                    .filename(resource.name())\n+                                    .build());\n+                }\n \n                 if (request.getMethod().equals(\"HEAD\")) {\n                     result = new ResponseEntity<>(\"\", responseHeaders, HttpStatus.OK);\n@@ -288,6 +287,7 @@ public Object resourceGet(\n                             wrapObject(\n                                     new ResourceDirectoryInfo(resource, request),\n                                     ResourceDirectoryInfo.class);\n+                    response.setContentType(mediaType.toString());\n                 } else {\n                     result = new ResponseEntity<>(resource.in(), responseHeaders, HttpStatus.OK);\n                 }"
        },
        {
          "filename": "src/restconfig/src/test/java/org/geoserver/rest/resources/ResourceControllerTest.java",
          "status": "modified",
          "additions": 18,
          "deletions": 7,
          "patch": "@@ -5,13 +5,13 @@\n package org.geoserver.rest.resources;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n \n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStreamWriter;\n-import java.net.URLConnection;\n import java.nio.charset.Charset;\n import java.nio.charset.CharsetEncoder;\n import java.text.DateFormat;\n@@ -239,6 +239,11 @@ public void testResourceMetadataHTML() throws Exception {\n     public void testResourceHeaders() throws Exception {\n         MockHttpServletResponse response =\n                 getAsServletResponse(RestBaseController.ROOT_PATH + \"/resource/mydir2/fake.png\");\n+        assertEquals(\n+                \"http://localhost:8080/geoserver\"\n+                        + RestBaseController.ROOT_PATH\n+                        + \"/resource/mydir2/fake.png\",\n+                response.getHeader(\"Location\"));\n         Assert.assertEquals(\n                 FORMAT_HEADER.format(getDataDirectory().get(\"mydir2/fake.png\").lastmodified()),\n                 response.getHeader(\"Last-Modified\"));\n@@ -249,12 +254,19 @@ public void testResourceHeaders() throws Exception {\n                 response.getHeader(\"Resource-Parent\"));\n         Assert.assertEquals(\"resource\", response.getHeader(\"Resource-Type\"));\n         assertContentType(\"image/png\", response);\n+        assertEquals(\n+                \"attachment; filename=\\\"fake.png\\\"\", response.getHeader(\"Content-Disposition\"));\n     }\n \n     @Test\n     public void testResourceHead() throws Exception {\n         MockHttpServletResponse response =\n                 headAsServletResponse(RestBaseController.ROOT_PATH + \"/resource/mydir2/fake.png\");\n+        assertEquals(\n+                \"http://localhost:8080/geoserver\"\n+                        + RestBaseController.ROOT_PATH\n+                        + \"/resource/mydir2/fake.png\",\n+                response.getHeader(\"Location\"));\n         Assert.assertEquals(\n                 FORMAT_HEADER.format(getDataDirectory().get(\"mydir2/fake.png\").lastmodified()),\n                 response.getHeader(\"Last-Modified\"));\n@@ -265,6 +277,8 @@ public void testResourceHead() throws Exception {\n                 response.getHeader(\"Resource-Parent\"));\n         Assert.assertEquals(\"resource\", response.getHeader(\"Resource-Type\"));\n         assertContentType(\"image/png\", response);\n+        assertEquals(\n+                \"attachment; filename=\\\"fake.png\\\"\", response.getHeader(\"Content-Disposition\"));\n     }\n \n     @Test\n@@ -409,15 +423,15 @@ public void testDirectoryJSONMultipleChildren() throws Exception {\n                         + \"      'link':       {\\n\"\n                         + \"        'href': 'http://localhost:8080/geoserver/rest/resource/mydir2/imagewithoutextension',\\n\"\n                         + \"        'rel': 'alternate',\\n\"\n-                        + \"        'type': 'image/png'\\n\"\n+                        + \"        'type': 'application/octet-stream'\\n\"\n                         + \"      }\\n\"\n                         + \"    },\\n\"\n                         + \"        {\\n\"\n                         + \"      'name': 'myres.json',\\n\"\n                         + \"      'link':       {\\n\"\n                         + \"        'href': 'http://localhost:8080/geoserver/rest/resource/mydir2/myres.json',\\n\"\n                         + \"        'rel': 'alternate',\\n\"\n-                        + \"        'type': 'application/octet-stream'\\n\"\n+                        + \"        'type': 'application/json'\\n\"\n                         + \"      }\\n\"\n                         + \"    },\\n\"\n                         + \"        {\\n\"\n@@ -430,9 +444,6 @@ public void testDirectoryJSONMultipleChildren() throws Exception {\n                         + \"    }\\n\"\n                         + \"  ]}\\n\"\n                         + \"}}\";\n-        // starting with JDK 17 (v3?) json is correctly recognized, the test output\n-        String jsonType = URLConnection.guessContentTypeFromName(\"test.json\");\n-        if (jsonType != null) expected = expected.replace(\"application/octet-stream\", jsonType);\n         JSONAssert.assertEquals(expected, (JSONObject) json);\n     }\n \n@@ -508,7 +519,7 @@ public void testDirectoryMimeTypes() throws Exception {\n         Document doc = getAsDOM(RestBaseController.ROOT_PATH + \"/resource/mydir2?format=xml\");\n         // print(doc);\n         XMLAssert.assertXpathEvaluatesTo(\n-                \"image/png\",\n+                \"application/octet-stream\",\n                 \"/ResourceDirectory/children/child[name='imagewithoutextension']/atom:link/@type\",\n                 doc);\n         XMLAssert.assertXpathEvaluatesTo("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "159e5bf6afbfb9776f08cbe03d8ed09cb2d55507",
            "date": "2025-01-13T09:52:26Z",
            "author_login": "osgeoweblate"
          },
          {
            "sha": "87d9c20e47643bed223bf2a39d546b2a770c9b29",
            "date": "2025-01-13T09:01:15Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ae63d2cefb5114fec88c4831af61252fbef9dceb",
            "date": "2025-01-06T10:38:14Z",
            "author_login": "aaime"
          },
          {
            "sha": "31ed8d7da74d757bc199ed550ec52c2340781134",
            "date": "2025-01-08T11:01:24Z",
            "author_login": "aaime"
          },
          {
            "sha": "9eedb76aaa41300e4dcc0db538d26cd860ef8cc3",
            "date": "2025-01-08T04:32:41Z",
            "author_login": "jodygarnett"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "GeoServer is an open source software server written in Java that allows users to share and edit geospatial data. A stored cross-site scripting (XSS) vulnerability exists in versions prior to 2.23.3 and 2.24.0 that enables an authenticated administrator with workspace-level privileges to store a JavaScript payload in uploaded style/legend resources that will execute in the context of another administrator's browser when viewed in the REST Resources API.  Access to the REST Resources API is limited to full administrators by default and granting non-administrators access to this endpoint should be carefully considered as it may allow access to files containing sensitive information. Versions 2.23.3 and 2.24.0 contain a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-20T16:15:07.640",
    "last_modified": "2024-12-18T21:56:24.053",
    "fix_date": "2023-10-09T04:26:26Z"
  },
  "references": [
    {
      "url": "https://github.com/geoserver/geoserver/commit/7db985738ff2422019ccac974cf547bae5770cad",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/pull/7161",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/security/advisories/GHSA-fh7p-5f6g-vj2w",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://osgeo-org.atlassian.net/browse/GEOS-11148",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/commit/7db985738ff2422019ccac974cf547bae5770cad",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/pull/7161",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/security/advisories/GHSA-fh7p-5f6g-vj2w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://osgeo-org.atlassian.net/browse/GEOS-11148",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.870045",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "geoserver",
    "owner": "geoserver",
    "created_at": "2011-11-10T19:56:06Z",
    "updated_at": "2025-01-13T14:27:07Z",
    "pushed_at": "2025-01-13T09:52:26Z",
    "size": 319674,
    "stars": 3917,
    "forks": 2193,
    "open_issues": 12,
    "watchers": 3917,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "2.1.x",
      "2.2.x",
      "2.3.x",
      "2.4.x",
      "2.5.x",
      "2.6.x",
      "2.6.0.x",
      "2.7.x",
      "2.7.1.x",
      "2.8.x",
      "2.9.x",
      "2.10.x",
      "2.11.x",
      "2.12.x",
      "2.13.x",
      "2.14.x",
      "2.15.x",
      "2.16.x",
      "2.17.x",
      "2.18.x",
      "2.19.x",
      "2.20.x",
      "2.21.x",
      "2.22.x",
      "2.23.x",
      "2.24.x",
      "2.25.x"
    ],
    "languages": {
      "Java": 44761611,
      "JavaScript": 1182828,
      "Scheme": 1167338,
      "HTML": 712425,
      "FreeMarker": 215786,
      "XSLT": 156026,
      "CSS": 120514,
      "Shell": 50551,
      "NSIS": 44051,
      "Python": 18317,
      "Makefile": 17825,
      "Batchfile": 13345,
      "AMPL": 8670,
      "Dockerfile": 3836,
      "Fluent": 117
    },
    "commit_activity": {
      "total_commits_last_year": 617,
      "avg_commits_per_week": 11.865384615384615,
      "days_active_last_year": 235
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:58:19.409251"
  }
}