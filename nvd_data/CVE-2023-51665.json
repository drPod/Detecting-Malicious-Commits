{
  "cve_id": "CVE-2023-51665",
  "github_data": {
    "repository": "advplyr/audiobookshelf",
    "fix_commit": "728496010cbfcee5b7b54001c9f79e02ede30d82",
    "related_commits": [
      "728496010cbfcee5b7b54001c9f79e02ede30d82",
      "728496010cbfcee5b7b54001c9f79e02ede30d82"
    ],
    "patch_url": "https://github.com/advplyr/audiobookshelf/commit/728496010cbfcee5b7b54001c9f79e02ede30d82.patch",
    "fix_commit_details": {
      "sha": "728496010cbfcee5b7b54001c9f79e02ede30d82",
      "commit_date": "2023-12-17T16:41:39Z",
      "author": {
        "login": "advplyr",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Update:/auth/openid/config API endpoint to require admin user and validate issuer URL",
        "length": 85,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 33,
        "additions": 27,
        "deletions": 6
      },
      "files": [
        {
          "filename": "server/Auth.js",
          "status": "modified",
          "additions": 27,
          "deletions": 6,
          "patch": "@@ -296,7 +296,7 @@ class Auth {\n         if (req.query.redirect_uri) {\n           // Check if the redirect_uri is in the whitelist\n           if (Database.serverSettings.authOpenIDMobileRedirectURIs.includes(req.query.redirect_uri) ||\n-           (Database.serverSettings.authOpenIDMobileRedirectURIs.length === 1 && Database.serverSettings.authOpenIDMobileRedirectURIs[0] === '*')) {\n+            (Database.serverSettings.authOpenIDMobileRedirectURIs.length === 1 && Database.serverSettings.authOpenIDMobileRedirectURIs[0] === '*')) {\n             oidcStrategy._params.redirect_uri = new URL(`${protocol}://${req.get('host')}/auth/openid/mobile-redirect`).toString()\n             mobile_redirect_uri = req.query.redirect_uri\n           } else {\n@@ -381,7 +381,7 @@ class Auth {\n       try {\n         // Extract the state parameter from the request\n         const { state, code } = req.query\n-    \n+\n         // Check if the state provided is in our list\n         if (!state || !this.openIdAuthSession.has(state)) {\n           Logger.error('[Auth] /auth/openid/mobile-redirect route: State parameter mismatch')\n@@ -469,17 +469,38 @@ class Auth {\n       this.handleLoginSuccessBasedOnCookie.bind(this))\n \n     /**\n-     * Used to auto-populate the openid URLs in config/authentication\n+     * Helper route used to auto-populate the openid URLs in config/authentication\n+     * Takes an issuer URL as a query param and requests the config data at \"/.well-known/openid-configuration\"\n+     * \n+     * @example /auth/openid/config?issuer=http://192.168.1.66:9000/application/o/audiobookshelf/\n      */\n-    router.get('/auth/openid/config', async (req, res) => {\n+    router.get('/auth/openid/config', this.isAuthenticated, async (req, res) => {\n+      if (!req.user.isAdminOrUp) {\n+        Logger.error(`[Auth] Non-admin user \"${req.user.username}\" attempted to get issuer config`)\n+        return res.sendStatus(403)\n+      }\n+\n       if (!req.query.issuer) {\n         return res.status(400).send('Invalid request. Query param \\'issuer\\' is required')\n       }\n+\n+      // Strip trailing slash\n       let issuerUrl = req.query.issuer\n       if (issuerUrl.endsWith('/')) issuerUrl = issuerUrl.slice(0, -1)\n \n-      const configUrl = `${issuerUrl}/.well-known/openid-configuration`\n-      axios.get(configUrl).then(({ data }) => {\n+      // Append config pathname and validate URL\n+      let configUrl = null\n+      try {\n+        configUrl = new URL(`${issuerUrl}/.well-known/openid-configuration`)\n+        if (!configUrl.pathname.endsWith('/.well-known/openid-configuration')) {\n+          throw new Error('Invalid pathname')\n+        }\n+      } catch (error) {\n+        Logger.error(`[Auth] Failed to get openid configuration. Invalid URL \"${configUrl}\"`, error)\n+        return res.status(400).send('Invalid request. Query param \\'issuer\\' is invalid')\n+      }\n+\n+      axios.get(configUrl.toString()).then(({ data }) => {\n         res.json({\n           issuer: data.issuer,\n           authorization_endpoint: data.authorization_endpoint,"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9b5bdc1fdb00cdc9958ad4f5ce52db35f1ce1fda",
            "date": "2025-01-13T22:12:38Z",
            "author_login": "advplyr"
          },
          {
            "sha": "8c4a9280ab2585bf99dca94101287991be8ed3f6",
            "date": "2025-01-12T16:55:38Z",
            "author_login": "advplyr"
          },
          {
            "sha": "181228294600bc50e8f824d9329838d90f1171df",
            "date": "2025-01-12T16:35:49Z",
            "author_login": "mikiher"
          },
          {
            "sha": "64e9ac9d8f27353f9f588cb4c70cb5b0b6b2989c",
            "date": "2025-01-12T15:56:48Z",
            "author_login": "advplyr"
          },
          {
            "sha": "0da9a04d8ef22923e93768a455de0335c64081ab",
            "date": "2025-01-12T11:05:02Z",
            "author_login": "advplyr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "Audiobookshelf is a self-hosted audiobook and podcast server. Prior to 2.7.0, Audiobookshelf is vulnerable to unauthenticated blind server-side request (SSRF) vulnerability in Auth.js. This vulnerability has been addressed in version 2.7.0. There are no known workarounds for this vulnerability.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-27T18:15:23.267",
    "last_modified": "2024-11-21T08:38:33.743",
    "fix_date": "2023-12-17T16:41:39Z"
  },
  "references": [
    {
      "url": "https://github.com/advplyr/audiobookshelf/commit/728496010cbfcee5b7b54001c9f79e02ede30d82",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/advplyr/audiobookshelf/security/advisories/GHSA-gjgj-98v3-47pg",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/advplyr/audiobookshelf/commit/728496010cbfcee5b7b54001c9f79e02ede30d82",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/advplyr/audiobookshelf/security/advisories/GHSA-gjgj-98v3-47pg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.105023",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "audiobookshelf",
    "owner": "advplyr",
    "created_at": "2021-08-17T22:00:40Z",
    "updated_at": "2025-01-14T17:51:08Z",
    "pushed_at": "2025-01-13T22:12:38Z",
    "size": 38441,
    "stars": 7391,
    "forks": 504,
    "open_issues": 618,
    "watchers": 7391,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 2971332,
      "Vue": 1459614,
      "CSS": 34709,
      "Shell": 6399,
      "Dockerfile": 1776,
      "HTML": 315
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T18:13:57.565333"
  }
}