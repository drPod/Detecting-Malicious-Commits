{
  "cve_id": "CVE-2023-51697",
  "github_data": {
    "repository": "advplyr/audiobookshelf",
    "fix_commit": "f2f2ea161ca0701e1405e737b0df0f96296e4f64",
    "related_commits": [
      "f2f2ea161ca0701e1405e737b0df0f96296e4f64",
      "f2f2ea161ca0701e1405e737b0df0f96296e4f64"
    ],
    "patch_url": "https://github.com/advplyr/audiobookshelf/commit/f2f2ea161ca0701e1405e737b0df0f96296e4f64.patch",
    "fix_commit_details": {
      "sha": "f2f2ea161ca0701e1405e737b0df0f96296e4f64",
      "commit_date": "2023-12-17T18:00:11Z",
      "author": {
        "login": "advplyr",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Update:API endpoint /podcasts/feed validates rssFeed URL and uses SSRF req filter",
        "length": 81,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 70,
        "additions": 57,
        "deletions": 13
      },
      "files": [
        {
          "filename": "server/controllers/PodcastController.js",
          "status": "modified",
          "additions": 12,
          "deletions": 2,
          "patch": "@@ -6,6 +6,7 @@ const fs = require('../libs/fsExtra')\n \n const { getPodcastFeed, findMatchingEpisodes } = require('../utils/podcastUtils')\n const { getFileTimestampsWithIno, filePathToPOSIX } = require('../utils/fileUtils')\n+const { validateUrl } = require('../utils/index')\n \n const Scanner = require('../scanner/Scanner')\n const CoverManager = require('../managers/CoverManager')\n@@ -102,15 +103,24 @@ class PodcastController {\n     }\n   }\n \n+  /**\n+   * POST: /api/podcasts/feed\n+   * \n+   * @typedef getPodcastFeedReqBody\n+   * @property {string} rssFeed\n+   * \n+   * @param {import('express').Request<{}, {}, getPodcastFeedReqBody, {}} req \n+   * @param {import('express').Response} res \n+   */\n   async getPodcastFeed(req, res) {\n     if (!req.user.isAdminOrUp) {\n       Logger.error(`[PodcastController] Non-admin user \"${req.user.username}\" attempted to get podcast feed`)\n       return res.sendStatus(403)\n     }\n \n-    var url = req.body.rssFeed\n+    const url = validateUrl(req.body.rssFeed)\n     if (!url) {\n-      return res.status(400).send('Bad request')\n+      return res.status(400).send('Invalid request body. \"rssFeed\" must be a valid URL')\n     }\n \n     const podcast = await getPodcastFeed(url)"
        },
        {
          "filename": "server/utils/index.js",
          "status": "modified",
          "additions": 22,
          "deletions": 6,
          "patch": "@@ -11,24 +11,24 @@ const levenshteinDistance = (str1, str2, caseSensitive = false) => {\n     str2 = str2.toLowerCase()\n   }\n   const track = Array(str2.length + 1).fill(null).map(() =>\n-    Array(str1.length + 1).fill(null));\n+    Array(str1.length + 1).fill(null))\n   for (let i = 0; i <= str1.length; i += 1) {\n-    track[0][i] = i;\n+    track[0][i] = i\n   }\n   for (let j = 0; j <= str2.length; j += 1) {\n-    track[j][0] = j;\n+    track[j][0] = j\n   }\n   for (let j = 1; j <= str2.length; j += 1) {\n     for (let i = 1; i <= str1.length; i += 1) {\n-      const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n+      const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1\n       track[j][i] = Math.min(\n         track[j][i - 1] + 1, // deletion\n         track[j - 1][i] + 1, // insertion\n         track[j - 1][i - 1] + indicator, // substitution\n-      );\n+      )\n     }\n   }\n-  return track[str2.length][str1.length];\n+  return track[str2.length][str1.length]\n }\n module.exports.levenshteinDistance = levenshteinDistance\n \n@@ -204,4 +204,20 @@ module.exports.asciiOnlyToLowerCase = (str) => {\n module.exports.escapeRegExp = (str) => {\n   if (typeof str !== 'string') return ''\n   return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n+}\n+\n+/**\n+ * Validate url string with URL class\n+ * \n+ * @param {string} rawUrl \n+ * @returns {string} null if invalid\n+ */\n+module.exports.validateUrl = (rawUrl) => {\n+  if (!rawUrl || typeof rawUrl !== 'string') return null\n+  try {\n+    return new URL(rawUrl).toString()\n+  } catch (error) {\n+    Logger.error(`Invalid URL \"${rawUrl}\"`, error)\n+    return null\n+  }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "server/utils/podcastUtils.js",
          "status": "modified",
          "additions": 23,
          "deletions": 5,
          "patch": "@@ -1,5 +1,6 @@\n-const Logger = require('../Logger')\n const axios = require('axios')\n+const ssrfFilter = require('ssrf-req-filter')\n+const Logger = require('../Logger')\n const { xmlToJSON, levenshteinDistance } = require('./index')\n const htmlSanitizer = require('../utils/htmlSanitizer')\n \n@@ -216,9 +217,26 @@ module.exports.parsePodcastRssFeedXml = async (xml, excludeEpisodeMetadata = fal\n   }\n }\n \n+/**\n+ * Get podcast RSS feed as JSON\n+ * Uses SSRF filter to prevent internal URLs\n+ * \n+ * @param {string} feedUrl \n+ * @param {boolean} [excludeEpisodeMetadata=false]\n+ * @returns {Promise}\n+ */\n module.exports.getPodcastFeed = (feedUrl, excludeEpisodeMetadata = false) => {\n   Logger.debug(`[podcastUtils] getPodcastFeed for \"${feedUrl}\"`)\n-  return axios.get(feedUrl, { timeout: 12000, responseType: 'arraybuffer', headers: { Accept: 'application/rss+xml' } }).then(async (data) => {\n+\n+  return axios({\n+    url: feedUrl,\n+    method: 'GET',\n+    timeout: 12000,\n+    responseType: 'arraybuffer',\n+    headers: { Accept: 'application/rss+xml' },\n+    httpAgent: ssrfFilter(feedUrl),\n+    httpsAgent: ssrfFilter(feedUrl)\n+  }).then(async (data) => {\n \n     // Adding support for ios-8859-1 encoded RSS feeds.\n     //  See: https://github.com/advplyr/audiobookshelf/issues/1489\n@@ -231,12 +249,12 @@ module.exports.getPodcastFeed = (feedUrl, excludeEpisodeMetadata = false) => {\n \n     if (!data?.data) {\n       Logger.error(`[podcastUtils] getPodcastFeed: Invalid podcast feed request response (${feedUrl})`)\n-      return false\n+      return null\n     }\n     Logger.debug(`[podcastUtils] getPodcastFeed for \"${feedUrl}\" success - parsing xml`)\n     const payload = await this.parsePodcastRssFeedXml(data.data, excludeEpisodeMetadata)\n     if (!payload) {\n-      return false\n+      return null\n     }\n \n     // RSS feed may be a private RSS feed\n@@ -245,7 +263,7 @@ module.exports.getPodcastFeed = (feedUrl, excludeEpisodeMetadata = false) => {\n     return payload.podcast\n   }).catch((error) => {\n     Logger.error('[podcastUtils] getPodcastFeed Error', error)\n-    return false\n+    return null\n   })\n }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9b5bdc1fdb00cdc9958ad4f5ce52db35f1ce1fda",
            "date": "2025-01-13T22:12:38Z",
            "author_login": "advplyr"
          },
          {
            "sha": "8c4a9280ab2585bf99dca94101287991be8ed3f6",
            "date": "2025-01-12T16:55:38Z",
            "author_login": "advplyr"
          },
          {
            "sha": "181228294600bc50e8f824d9329838d90f1171df",
            "date": "2025-01-12T16:35:49Z",
            "author_login": "mikiher"
          },
          {
            "sha": "64e9ac9d8f27353f9f588cb4c70cb5b0b6b2989c",
            "date": "2025-01-12T15:56:48Z",
            "author_login": "advplyr"
          },
          {
            "sha": "0da9a04d8ef22923e93768a455de0335c64081ab",
            "date": "2025-01-12T11:05:02Z",
            "author_login": "advplyr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "Audiobookshelf is a self-hosted audiobook and podcast server. Prior to 2.7.0, Audiobookshelf is vulnerable to unauthenticated blind server-side request (SSRF) vulnerability in `podcastUtils.js`. This vulnerability has been addressed in version 2.7.0. There are no known workarounds for this vulnerability.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-27T18:15:23.487",
    "last_modified": "2024-11-21T08:38:37.793",
    "fix_date": "2023-12-17T18:00:11Z"
  },
  "references": [
    {
      "url": "https://github.com/advplyr/audiobookshelf/commit/f2f2ea161ca0701e1405e737b0df0f96296e4f64",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/advplyr/audiobookshelf/security/advisories/GHSA-jhjx-c3wx-q2x7",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/advplyr/audiobookshelf/commit/f2f2ea161ca0701e1405e737b0df0f96296e4f64",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/advplyr/audiobookshelf/security/advisories/GHSA-jhjx-c3wx-q2x7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.105205",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "audiobookshelf",
    "owner": "advplyr",
    "created_at": "2021-08-17T22:00:40Z",
    "updated_at": "2025-01-14T17:51:08Z",
    "pushed_at": "2025-01-13T22:12:38Z",
    "size": 38441,
    "stars": 7391,
    "forks": 504,
    "open_issues": 618,
    "watchers": 7391,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 2971332,
      "Vue": 1459614,
      "CSS": 34709,
      "Shell": 6399,
      "Dockerfile": 1776,
      "HTML": 315
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T18:13:57.565333"
  }
}