{
  "cve_id": "CVE-2023-51699",
  "github_data": {
    "repository": "fluid-cloudnative/fluid",
    "fix_commit": "e0184cff8790ad000c3e8943392c7f544fad7d66",
    "related_commits": [
      "e0184cff8790ad000c3e8943392c7f544fad7d66",
      "e0184cff8790ad000c3e8943392c7f544fad7d66"
    ],
    "patch_url": "https://github.com/fluid-cloudnative/fluid/commit/e0184cff8790ad000c3e8943392c7f544fad7d66.patch",
    "fix_commit_details": {
      "sha": "e0184cff8790ad000c3e8943392c7f544fad7d66",
      "commit_date": "2024-03-13T12:38:50Z",
      "author": {
        "login": "TrafalgarZZZ",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wx8q-4gm9-rj2g",
        "length": 1031,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 198,
        "additions": 166,
        "deletions": 32
      },
      "files": [
        {
          "filename": "charts/juicefs/Chart.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n name: juicefs\n apiVersion: v1\n description: FileSystem aimed for data analytics and machine learning in any cloud.\n-version: 0.2.14\n+version: 0.2.16\n appVersion: v1.0.0\n home: https://juicefs.com/\n maintainers:"
        },
        {
          "filename": "pkg/ddc/juicefs/operations/base.go",
          "status": "modified",
          "additions": 14,
          "deletions": 9,
          "patch": "@@ -27,6 +27,7 @@ import (\n \t\"github.com/go-logr/logr\"\n \n \t\"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"\n+\t\"github.com/fluid-cloudnative/fluid/pkg/utils/security\"\n )\n \n type JuiceFileUtils struct {\n@@ -130,12 +131,11 @@ func (j JuiceFileUtils) Count(juiceSubPath string) (total int64, err error) {\n func (j JuiceFileUtils) GetFileCount(juiceSubPath string) (fileCount int64, err error) {\n \tvar (\n \t\t//strs    = \"du -ah juiceSubPath |grep ^- |wc -l \"\n-\t\tstrs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", juiceSubPath)\n+\t\tstrs    = fmt.Sprintf(\"ls -lR %s |grep ^- |wc -l \", security.EscapeBashStr(juiceSubPath))\n \t\tcommand = []string{\"bash\", \"-c\", strs}\n \t\tstdout  string\n \t\tstderr  string\n \t)\n-\n \tstdout, stderr, err = j.exec(command)\n \tif err != nil {\n \t\terr = fmt.Errorf(\"execute command %v with expectedErr: %v stdout %s and stderr %s\", command, err, stdout, stderr)\n@@ -266,11 +266,10 @@ func (j JuiceFileUtils) GetMetric(juicefsPath string) (metrics string, err error\n }\n \n // GetUsedSpace Get used space in byte\n-// use \"df --block-size=1 |grep <juicefsPath>'\"\n+// equal to `df --block-size=1 | grep juicefsPath`\n func (j JuiceFileUtils) GetUsedSpace(juicefsPath string) (usedSpace int64, err error) {\n \tvar (\n-\t\tstrs    = fmt.Sprintf(`df --block-size=1 |grep %s`, juicefsPath)\n-\t\tcommand = []string{\"bash\", \"-c\", strs}\n+\t\tcommand = []string{\"df\", \"--block-size=1\"}\n \t\tstdout  string\n \t\tstderr  string\n \t)\n@@ -281,9 +280,15 @@ func (j JuiceFileUtils) GetUsedSpace(juicefsPath string) (usedSpace int64, err e\n \t\treturn\n \t}\n \n+\tvar str string\n+\tlines := strings.Split(stdout, \"\\n\")\n+\tfor _, line := range lines {\n+\t\tif strings.Contains(line, juicefsPath) {\n+\t\t\tstr = line\n+\t\t\tbreak\n+\t\t}\n+\t}\n \t// [<Filesystem>       <Size>  <Used> <Avail> <Use>% <Mounted on>]\n-\tstr := strings.TrimSuffix(stdout, \"\\n\")\n-\n \tdata := strings.Fields(str)\n \tif len(data) != 6 {\n \t\terr = fmt.Errorf(\"failed to parse %s in GetUsedSpace method\", data)\n@@ -365,8 +370,8 @@ func (j JuiceFileUtils) QueryMetaDataInfoIntoFile(key KeyOfMetaDataFile, filenam\n \t\tj.log.Error(errors.New(\"the key not in  metadatafile\"), \"key\", key)\n \t}\n \tvar (\n-\t\tstr     = \"sed -n '\" + line + \"' \" + filename\n-\t\tcommand = []string{\"bash\", \"-c\", str}\n+\t\tstr     = \"'\" + line + \"' \" + filename\n+\t\tcommand = []string{\"sed\", \"-n\", str}\n \t\tstdout  string\n \t\tstderr  string\n \t)"
        },
        {
          "filename": "pkg/ddc/juicefs/operations/base_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -479,7 +479,7 @@ func TestJuiceFileUtils_GetUsedSpace(t *testing.T) {\n \t\tt.Fatal(err.Error())\n \t}\n \ta := &JuiceFileUtils{log: fake.NullLogger()}\n-\t_, err = a.GetUsedSpace(\"/tmp\")\n+\t_, err = a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")\n \tif err == nil {\n \t\tt.Error(\"check failure, want err, got nil\")\n \t}\n@@ -489,7 +489,7 @@ func TestJuiceFileUtils_GetUsedSpace(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatal(err.Error())\n \t}\n-\tusedSpace, err := a.GetUsedSpace(\"/tmp\")\n+\tusedSpace, err := a.GetUsedSpace(\"/runtime-mnt/juicefs/kube-system/jfsdemo/juicefs-fuse\")\n \tif err != nil {\n \t\tt.Errorf(\"check failure, want nil, got err: %v\", err)\n \t}"
        },
        {
          "filename": "pkg/ddc/juicefs/transform_fuse.go",
          "status": "modified",
          "additions": 40,
          "deletions": 15,
          "patch": "@@ -29,6 +29,7 @@ import (\n \t\"github.com/fluid-cloudnative/fluid/pkg/common\"\n \t\"github.com/fluid-cloudnative/fluid/pkg/utils\"\n \t\"github.com/fluid-cloudnative/fluid/pkg/utils/kubeclient\"\n+\t\"github.com/fluid-cloudnative/fluid/pkg/utils/security\"\n )\n \n func (j *JuiceFSEngine) transformFuse(runtime *datav1alpha1.JuiceFSRuntime, dataset *datav1alpha1.Dataset, value *JuiceFS) (err error) {\n@@ -37,7 +38,7 @@ func (j *JuiceFSEngine) transformFuse(runtime *datav1alpha1.JuiceFSRuntime, data\n \t}\n \tmount := dataset.Spec.Mounts[0]\n \n-\tvalue.Configs.Name = mount.Name\n+\tvalue.Configs.Name = security.EscapeBashStr(mount.Name)\n \n \t// transform image\n \timage := runtime.Spec.Fuse.Image\n@@ -216,7 +217,7 @@ func (j *JuiceFSEngine) genValue(mount datav1alpha1.Mount, tiredStoreLevel *data\n \t}\n \n \tif source == \"\" {\n-\t\tsource = mount.Name\n+\t\tsource = security.EscapeBashStr(mount.Name)\n \t}\n \n \t// transform source\n@@ -326,8 +327,20 @@ func (j *JuiceFSEngine) genMount(value *JuiceFS, runtime *datav1alpha1.JuiceFSRu\n \t\t\t}\n \t\t\tworkerOptionMap[\"metrics\"] = fmt.Sprintf(\"0.0.0.0:%d\", metricsPort)\n \t\t}\n-\t\tmountArgs = []string{common.JuiceFSCeMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genOption(optionMap), \",\")}\n-\t\tmountArgsWorker = []string{common.JuiceFSCeMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genOption(workerOptionMap), \",\")}\n+\t\tmountArgs = []string{\n+\t\t\tcommon.JuiceFSCeMountPath,\n+\t\t\tvalue.Source,\n+\t\t\tsecurity.EscapeBashStr(value.Fuse.MountPath),\n+\t\t\t\"-o\",\n+\t\t\tsecurity.EscapeBashStr(strings.Join(genOption(optionMap), \",\")),\n+\t\t}\n+\t\tmountArgsWorker = []string{\n+\t\t\tcommon.JuiceFSCeMountPath,\n+\t\t\tvalue.Source,\n+\t\t\tsecurity.EscapeBashStr(value.Worker.MountPath),\n+\t\t\t\"-o\",\n+\t\t\tsecurity.EscapeBashStr(strings.Join(genOption(workerOptionMap), \",\")),\n+\t\t}\n \t} else {\n \t\tif readonly {\n \t\t\toptionMap[\"attrcacheto\"] = \"7200\"\n@@ -347,14 +360,26 @@ func (j *JuiceFSEngine) genMount(value *JuiceFS, runtime *datav1alpha1.JuiceFSRu\n \t\toptionMap[\"no-sharing\"] = \"\"\n \t\tdelete(workerOptionMap, \"no-sharing\")\n \n-\t\tmountArgs = []string{common.JuiceFSMountPath, value.Source, value.Fuse.MountPath, \"-o\", strings.Join(genOption(optionMap), \",\")}\n-\t\tmountArgsWorker = []string{common.JuiceFSMountPath, value.Source, value.Worker.MountPath, \"-o\", strings.Join(genOption(workerOptionMap), \",\")}\n+\t\tmountArgs = []string{\n+\t\t\tcommon.JuiceFSMountPath,\n+\t\t\tvalue.Source,\n+\t\t\tsecurity.EscapeBashStr(value.Fuse.MountPath),\n+\t\t\t\"-o\",\n+\t\t\tsecurity.EscapeBashStr(strings.Join(genOption(optionMap), \",\")),\n+\t\t}\n+\t\tmountArgsWorker = []string{\n+\t\t\tcommon.JuiceFSMountPath,\n+\t\t\tvalue.Source,\n+\t\t\tsecurity.EscapeBashStr(value.Worker.MountPath),\n+\t\t\t\"-o\",\n+\t\t\tsecurity.EscapeBashStr(strings.Join(genOption(workerOptionMap), \",\")),\n+\t\t}\n \t}\n \n \tvalue.Worker.Command = strings.Join(mountArgsWorker, \" \")\n \tvalue.Fuse.Command = strings.Join(mountArgs, \" \")\n-\tvalue.Fuse.StatCmd = \"stat -c %i \" + value.Fuse.MountPath\n-\tvalue.Worker.StatCmd = \"stat -c %i \" + value.Worker.MountPath\n+\tvalue.Fuse.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Fuse.MountPath)\n+\tvalue.Worker.StatCmd = \"stat -c %i \" + security.EscapeBashStr(value.Worker.MountPath)\n \treturn nil\n }\n \n@@ -379,7 +404,7 @@ func (j *JuiceFSEngine) genFormatCmd(value *JuiceFS, config *[]string) {\n \t\tfor _, option := range *config {\n \t\t\to := strings.TrimSpace(option)\n \t\t\tif o != \"\" {\n-\t\t\t\targs = append(args, fmt.Sprintf(\"--%s\", o))\n+\t\t\t\targs = append(args, fmt.Sprintf(\"--%s\", security.EscapeBashStr(o)))\n \t\t\t}\n \t\t}\n \t}\n@@ -395,12 +420,12 @@ func (j *JuiceFSEngine) genFormatCmd(value *JuiceFS, config *[]string) {\n \t\t\targs = append(args, \"--no-update\")\n \t\t}\n \t\tif value.Configs.Storage != \"\" {\n-\t\t\targs = append(args, fmt.Sprintf(\"--storage=%s\", value.Configs.Storage))\n+\t\t\targs = append(args, fmt.Sprintf(\"--storage=%s\", security.EscapeBashStr(value.Configs.Storage)))\n \t\t}\n \t\tif value.Configs.Bucket != \"\" {\n-\t\t\targs = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))\n+\t\t\targs = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))\n \t\t}\n-\t\targs = append(args, value.Source, value.Configs.Name)\n+\t\targs = append(args, value.Source, security.EscapeBashStr(value.Configs.Name))\n \t\tcmd := append([]string{common.JuiceCeCliPath, \"format\"}, args...)\n \t\tvalue.Configs.FormatCmd = strings.Join(cmd, \" \")\n \t\treturn\n@@ -418,7 +443,7 @@ func (j *JuiceFSEngine) genFormatCmd(value *JuiceFS, config *[]string) {\n \t\targs = append(args, \"--secretkey=${SECRET_KEY}\")\n \t}\n \tif value.Configs.Bucket != \"\" {\n-\t\targs = append(args, fmt.Sprintf(\"--bucket=%s\", value.Configs.Bucket))\n+\t\targs = append(args, fmt.Sprintf(\"--bucket=%s\", security.EscapeBashStr(value.Configs.Bucket)))\n \t}\n \targs = append(args, value.Source)\n \tcmd := append([]string{common.JuiceCliPath, \"auth\"}, args...)\n@@ -461,7 +486,7 @@ func (j *JuiceFSEngine) genQuotaCmd(value *JuiceFS, mount datav1alpha1.Mount) er\n \t\t\t\t\treturn fmt.Errorf(\"quota is not supported in juicefs-ce version %s\", value.Fuse.ImageTag)\n \t\t\t\t}\n \t\t\t\t// juicefs quota set ${metaurl} --path ${path} --capacity ${capacity}\n-\t\t\t\tvalue.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, value.Fuse.SubPath, qs)\n+\t\t\t\tvalue.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", common.JuiceCeCliPath, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)\n \t\t\t\treturn nil\n \t\t\t}\n \t\t\t// ee\n@@ -470,7 +495,7 @@ func (j *JuiceFSEngine) genQuotaCmd(value *JuiceFS, mount datav1alpha1.Mount) er\n \t\t\t}\n \t\t\t// juicefs quota set ${metaurl} --path ${path} --capacity ${capacity}\n \t\t\tcli := common.JuiceCliPath\n-\t\t\tvalue.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, value.Fuse.SubPath, qs)\n+\t\t\tvalue.Configs.QuotaCmd = fmt.Sprintf(\"%s quota set %s --path %s --capacity %d\", cli, value.Source, security.EscapeBashStr(value.Fuse.SubPath), qs)\n \t\t\treturn nil\n \t\t}\n \t}"
        },
        {
          "filename": "pkg/ddc/juicefs/ufs_test.go",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -38,15 +38,15 @@ func mockExecCommandInContainerForTotalFileNums() (stdout string, stderr string,\n }\n \n func mockExecCommandInContainerForUsedStorageBytes() (stdout string, stderr string, err error) {\n-\tr := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /data`\n+\tr := `JuiceFS:test 207300683100160  41460043776 207259223056384   1% /juicefs/juicefs/test/juicefs-fuse`\n \treturn r, \"\", nil\n }\n \n func TestTotalStorageBytes(t *testing.T) {\n \tstatefulSet := &appsv1.StatefulSet{\n \t\tObjectMeta: metav1.ObjectMeta{\n \t\t\tName:      \"test-worker\",\n-\t\t\tNamespace: \"fluid\",\n+\t\t\tNamespace: \"juicefs\",\n \t\t},\n \t\tSpec: appsv1.StatefulSetSpec{\n \t\t\tSelector: &metav1.LabelSelector{\n@@ -57,7 +57,7 @@ func TestTotalStorageBytes(t *testing.T) {\n \tvar pod = &corev1.Pod{\n \t\tObjectMeta: metav1.ObjectMeta{\n \t\t\tName:      \"test-work-0\",\n-\t\t\tNamespace: \"fluid\",\n+\t\t\tNamespace: \"juicefs\",\n \t\t\tLabels:    map[string]string{\"a\": \"b\"},\n \t\t},\n \t\tStatus: corev1.PodStatus{\n@@ -93,11 +93,11 @@ func TestTotalStorageBytes(t *testing.T) {\n \t\t\tname: \"test\",\n \t\t\tfields: fields{\n \t\t\t\tname:      \"test\",\n-\t\t\t\tnamespace: \"fluid\",\n+\t\t\t\tnamespace: \"juicefs\",\n \t\t\t\truntime: &datav1alpha1.JuiceFSRuntime{\n \t\t\t\t\tObjectMeta: metav1.ObjectMeta{\n \t\t\t\t\t\tName:      \"test\",\n-\t\t\t\t\t\tNamespace: \"fluid\",\n+\t\t\t\t\t\tNamespace: \"juicefs\",\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t},"
        },
        {
          "filename": "pkg/utils/security/escape.go",
          "status": "added",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -0,0 +1,63 @@\n+/*\n+Copyright 2023 The Fluid Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package security\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+)\n+\n+// According to https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html#ANSI_002dC-Quoting\n+// a -> a\n+// a b -> a b\n+// $a -> $'$a'\n+// $'a' -> $'$\\'$a'\\'\n+func EscapeBashStr(s string) string {\n+\tif !containsOne(s, []rune{'$', '`', '&', ';', '>', '|', '(', ')'}) {\n+\t\treturn s\n+\t}\n+\ts = strings.ReplaceAll(s, `\\`, `\\\\`)\n+\ts = strings.ReplaceAll(s, `'`, `\\'`)\n+\tif strings.Contains(s, `\\\\`) {\n+\t\ts = strings.ReplaceAll(s, `\\\\\\\\`, `\\\\`)\n+\t\ts = strings.ReplaceAll(s, `\\\\\\'`, `\\'`)\n+\t\ts = strings.ReplaceAll(s, `\\\\\"`, `\\\"`)\n+\t\ts = strings.ReplaceAll(s, `\\\\a`, `\\a`)\n+\t\ts = strings.ReplaceAll(s, `\\\\b`, `\\b`)\n+\t\ts = strings.ReplaceAll(s, `\\\\e`, `\\e`)\n+\t\ts = strings.ReplaceAll(s, `\\\\E`, `\\E`)\n+\t\ts = strings.ReplaceAll(s, `\\\\n`, `\\n`)\n+\t\ts = strings.ReplaceAll(s, `\\\\r`, `\\r`)\n+\t\ts = strings.ReplaceAll(s, `\\\\t`, `\\t`)\n+\t\ts = strings.ReplaceAll(s, `\\\\v`, `\\v`)\n+\t\ts = strings.ReplaceAll(s, `\\\\?`, `\\?`)\n+\t}\n+\treturn fmt.Sprintf(`$'%s'`, s)\n+}\n+\n+func containsOne(target string, chars []rune) bool {\n+\tcharMap := make(map[rune]bool, len(chars))\n+\tfor _, c := range chars {\n+\t\tcharMap[c] = true\n+\t}\n+\tfor _, s := range target {\n+\t\tif charMap[s] {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}"
        },
        {
          "filename": "pkg/utils/security/escape_test.go",
          "status": "added",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -0,0 +1,41 @@\n+/*\n+Copyright 2023 The Fluid Author.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package security\n+\n+import \"testing\"\n+\n+func TestEscapeBashStr(t *testing.T) {\n+\tcases := [][]string{\n+\t\t{\"abc\", \"abc\"},\n+\t\t{\"test-volume\", \"test-volume\"},\n+\t\t{\"http://minio.kube-system:9000/minio/dynamic-ce\", \"http://minio.kube-system:9000/minio/dynamic-ce\"},\n+\t\t{\"$(cat /proc/self/status | grep CapEff > /test.txt)\", \"$'$(cat /proc/self/status | grep CapEff > /test.txt)'\"},\n+\t\t{\"hel`cat /proc/self/status`lo\", \"$'hel`cat /proc/self/status`lo'\"},\n+\t\t{\"'h'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},\n+\t\t{\"\\\\'h\\\\'el`cat /proc/self/status`lo\", \"$'\\\\'h\\\\'el`cat /proc/self/status`lo'\"},\n+\t\t{\"$'h'el`cat /proc/self/status`lo\", \"$'$\\\\'h\\\\'el`cat /proc/self/status`lo'\"},\n+\t\t{\"hel\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},\n+\t\t{\"hel\\\\\\\\`cat /proc/self/status`lo\", \"$'hel\\\\\\\\`cat /proc/self/status`lo'\"},\n+\t\t{\"hel\\\\'`cat /proc/self/status`lo\", \"$'hel\\\\'`cat /proc/self/status`lo'\"},\n+\t}\n+\tfor _, c := range cases {\n+\t\tescaped := EscapeBashStr(c[0])\n+\t\tif escaped != c[1] {\n+\t\t\tt.Errorf(\"escapeBashVar(%s) = %s, want %s\", c[0], escaped, c[1])\n+\t\t}\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "665c872e3888c3b94c77a78c3814abf06cca3367",
            "date": "2025-01-14T08:10:25Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a537a5f9f5d5829aa353ef4773518917c8732776",
            "date": "2025-01-14T01:53:25Z",
            "author_login": "TrafalgarZZZ"
          },
          {
            "sha": "198f8668438bf72304931540627294d482f7d8a2",
            "date": "2025-01-13T06:46:24Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "50011e6cc0daf87d90c23226f905c34a2dec8430",
            "date": "2025-01-09T06:07:38Z",
            "author_login": "cheyang"
          },
          {
            "sha": "8740eb3212e02b08e80d0692ec04b830d7f0499c",
            "date": "2025-01-08T01:58:18Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.0,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-78",
    "description": "Fluid is an open source Kubernetes-native Distributed Dataset Orchestrator and Accelerator for data-intensive applications. An OS command injection vulnerability within the Fluid project's JuicefsRuntime can potentially allow an authenticated user, who has the authority to create or update the K8s CRD Dataset/JuicefsRuntime, to execute arbitrary OS commands within the juicefs related containers. This could lead to unauthorized access, modification or deletion of data. Users who're using versions < 0.9.3 with JuicefsRuntime should upgrade to v0.9.3.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-03-15T19:15:06.810",
    "last_modified": "2024-11-21T08:38:38.060",
    "fix_date": "2024-03-13T12:38:50Z"
  },
  "references": [
    {
      "url": "https://github.com/fluid-cloudnative/fluid/commit/e0184cff8790ad000c3e8943392c7f544fad7d66",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/fluid-cloudnative/fluid/security/advisories/GHSA-wx8q-4gm9-rj2g",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/fluid-cloudnative/fluid/commit/e0184cff8790ad000c3e8943392c7f544fad7d66",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/fluid-cloudnative/fluid/security/advisories/GHSA-wx8q-4gm9-rj2g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.499242",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fluid",
    "owner": "fluid-cloudnative",
    "created_at": "2020-07-11T22:57:18Z",
    "updated_at": "2025-01-14T08:10:30Z",
    "pushed_at": "2025-01-14T08:10:34Z",
    "size": 52375,
    "stars": 1702,
    "forks": 960,
    "open_issues": 266,
    "watchers": 1702,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 5861806,
      "Python": 165164,
      "Shell": 65636,
      "Mustache": 51447,
      "Makefile": 20128,
      "Smarty": 6188,
      "Dockerfile": 4369
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:29:00.526112"
  }
}