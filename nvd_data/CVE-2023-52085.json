{
  "cve_id": "CVE-2023-52085",
  "github_data": {
    "repository": "wintercms/winter",
    "fix_commit": "5bc9257fe2bc47d8b786a1b1bf96bafad23d8ddd",
    "related_commits": [
      "5bc9257fe2bc47d8b786a1b1bf96bafad23d8ddd",
      "5bc9257fe2bc47d8b786a1b1bf96bafad23d8ddd"
    ],
    "patch_url": "https://github.com/wintercms/winter/commit/5bc9257fe2bc47d8b786a1b1bf96bafad23d8ddd.patch",
    "fix_commit_details": {
      "sha": "5bc9257fe2bc47d8b786a1b1bf96bafad23d8ddd",
      "commit_date": "2023-12-14T06:18:03Z",
      "author": {
        "login": "jaxwilko",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Added validation check for colourpicker form widget (#1020)",
        "length": 109,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 168,
        "additions": 167,
        "deletions": 1
      },
      "files": [
        {
          "filename": "modules/backend/formwidgets/ColorPicker.php",
          "status": "modified",
          "additions": 38,
          "deletions": 1,
          "patch": "@@ -59,6 +59,16 @@ class ColorPicker extends FormWidgetBase\n      */\n     public $formats = 'hex';\n \n+    /**\n+     * @var array|string[] Patterns to validate colour string on save\n+     */\n+    protected array $validationPatterns = [\n+        'cmyk' => '/^cmyk\\((\\d{1,2}\\.?\\d{0,2}%,? ?){4}\\)$/',\n+        'hex' => '/^#[\\w\\d]{6}$/',\n+        'hsl' => '/^hsla\\((\\d{1,3}\\.?\\d{0,2}%?, ?){3}\\d\\.?\\d{0,2}?\\)$/',\n+        'rgb' => '/^rgba\\((\\d{1,3}\\.?\\d{0,2}, ?){3}\\d\\.?\\d{0,2}?\\)$/',\n+    ];\n+\n     //\n     // Object properties\n     //\n@@ -244,6 +254,33 @@ protected function loadAssets()\n      */\n     public function getSaveValue($value)\n     {\n-        return strlen($value) ? $value : null;\n+        if (!strlen($value)) {\n+            return null;\n+        }\n+\n+        switch (is_array($this->formats) ? 'all' : $this->formats) {\n+            case 'cmyk':\n+            case 'hex':\n+            case 'hsl':\n+            case 'rgb':\n+                if (!preg_match($this->validationPatterns[$this->formats], $value)) {\n+                    throw new ApplicationException(Lang::get('backend::lang.field.colors_invalid_input'));\n+                }\n+                break;\n+            case 'all':\n+                $valid = false;\n+                foreach ($this->validationPatterns as $pattern) {\n+                    if (preg_match($pattern, $value)) {\n+                        $valid = true;\n+                        break;\n+                    }\n+                }\n+                if (!$valid) {\n+                    throw new ApplicationException(Lang::get('backend::lang.field.colors_invalid_input'));\n+                }\n+                break;\n+        }\n+\n+        return $value;\n     }\n }"
        },
        {
          "filename": "modules/backend/lang/en/lang.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@\n         'options_method_not_exists' => \"The model class :model must define a method :method() returning options for the ':field' form field.\",\n         'options_static_method_invalid_value' => \"The static method ':method()' on :class did not return a valid options array.\",\n         'colors_method_not_exists' => \"The model class :model must define a method :method() returning html color HEX codes for the ':field' form field.\",\n+        'colors_invalid_input' => 'The color value supplied is invalid, please try again.',\n     ],\n     'widget' => [\n         'not_registered' => \"A widget class name ':name' has not been registered\","
        },
        {
          "filename": "modules/backend/tests/formwidgets/ColorPickerTest.php",
          "status": "added",
          "additions": 128,
          "deletions": 0,
          "patch": "@@ -0,0 +1,128 @@\n+<?php\n+\n+namespace Backend\\Tests\\FormWidgets;\n+\n+use Backend\\Classes\\Controller;\n+use Backend\\Classes\\FormField;\n+use Backend\\FormWidgets\\ColorPicker;\n+use System\\Tests\\Bootstrap\\PluginTestCase;\n+use Winter\\Storm\\Exception\\ApplicationException;\n+\n+class ColorPickerTest extends PluginTestCase\n+{\n+    public function testDefaultSaveValue(): void\n+    {\n+        $widget = $this->makeWidget();\n+\n+        // Default only expects hex\n+        $this->assertEquals('#3498DB', $widget->getSaveValue('#3498DB'));\n+\n+        // Getting a non-hex value should throw an exception\n+        $this->expectException(ApplicationException::class);\n+        $widget->getSaveValue('rgba(51.9, 152, 219, 1)');\n+\n+        // Test a bunch of hex values\n+        $this->assertEquals('#3498DB', $widget->getSaveValue('#3498DB'));\n+        $this->assertEquals('#2980B9', $widget->getSaveValue('#2980B9'));\n+        $this->assertEquals('#9B59B6', $widget->getSaveValue('#9B59B6'));\n+    }\n+\n+    public function testRgbSaveValue(): void\n+    {\n+        $widget = $this->makeWidget([\n+            'formats' => 'rgb'\n+        ]);\n+\n+        // Config specifies only rgb\n+        $this->assertEquals('rgba(51.9, 152, 219, 1)', $widget->getSaveValue('rgba(51.9, 152, 219, 1)'));\n+\n+        // Getting a non-rgb value should throw an exception\n+        $this->expectException(ApplicationException::class);\n+        $widget->getSaveValue('#3498DB');\n+\n+        // Test a bunch of rgb values\n+        $this->assertEquals('rgba(1, 1, 1, 1)', $widget->getSaveValue('rgba(1, 1, 1, 1)'));\n+        $this->assertEquals('rgba(155, 89, 182, 0.5)', $widget->getSaveValue('rgba(155, 89, 182, 0.5)'));\n+        $this->assertEquals('rgba(1, 89, 182, 0.55)', $widget->getSaveValue('rgba(1, 89, 182, 0.55)'));\n+    }\n+\n+    public function testCmykSaveValue(): void\n+    {\n+        $widget = $this->makeWidget([\n+            'formats' => 'cmyk'\n+        ]);\n+\n+        // Config specifies only cmyk\n+        $this->assertEquals('cmyk(76.3%, 30.6%, 0%, 14.1%)', $widget->getSaveValue('cmyk(76.3%, 30.6%, 0%, 14.1%)'));\n+\n+        // Getting a non-cmyk value should throw an exception\n+        $this->expectException(ApplicationException::class);\n+        $widget->getSaveValue('#3498DB');\n+\n+        // Test a bunch of cmyk values\n+        $this->assertEquals('cmyk(14.8%, 51.1%, 0%, 28.6%)', $widget->getSaveValue('cmyk(14.8%, 51.1%, 0%, 28.6%)'));\n+        $this->assertEquals('cmyk(17%, 60.75%, 0%, 32.22%)', $widget->getSaveValue('cmyk(17%, 60.75%, 0%, 32.22%)'));\n+        $this->assertEquals('cmyk(17.9%, 60.75%, 0%, 32.2%)', $widget->getSaveValue('cmyk(17.9%, 60.75%, 0%, 32.2%)'));\n+    }\n+\n+    public function testHslaSaveValue(): void\n+    {\n+        $widget = $this->makeWidget([\n+            'formats' => 'hsl'\n+        ]);\n+\n+        // Config specifies only hsl\n+        $this->assertEquals('hsla(204.1, 69.9%, 53.1%, 1)', $widget->getSaveValue('hsla(204.1, 69.9%, 53.1%, 1)'));\n+\n+        // Getting a non-hsl value should throw an exception\n+        $this->expectException(ApplicationException::class);\n+        $widget->getSaveValue('#3498DB');\n+\n+        // Test a bunch of hsl values\n+        $this->assertEquals('hsla(282.3, 43.6%, 47.2%, 1)', $widget->getSaveValue('hsla(282.3, 43.6%, 47.2%, 1)'));\n+        $this->assertEquals('hsla(282.3, 43.6%, 47.2%, 0.1)', $widget->getSaveValue('hsla(282.3, 43.6%, 47.2%, 0.1)'));\n+        $this->assertEquals('hsla(282, 43.6%, 47.2%, 0.1)', $widget->getSaveValue('hsla(282, 43.6%, 47.2%, 0.1)'));\n+        $this->assertEquals('hsla(282, 43.56%, 47.2%, 0.1)', $widget->getSaveValue('hsla(282, 43.56%, 47.2%, 0.1)'));\n+        $this->assertEquals('hsla(282.22, 43%, 47.2%, 0.1)', $widget->getSaveValue('hsla(282.22, 43%, 47.2%, 0.1)'));\n+    }\n+\n+    public function testAllSaveValue(): void\n+    {\n+        $widget = $this->makeWidget([\n+            'formats' => 'all'\n+        ]);\n+\n+        // Config allows for any valid format\n+        $this->assertEquals('#3498DB', $widget->getSaveValue('#3498DB'));\n+        $this->assertEquals('rgba(51.9, 152, 219, 1)', $widget->getSaveValue('rgba(51.9, 152, 219, 1)'));\n+        $this->assertEquals('cmyk(76.3%, 30.6%, 0%, 14.1%)', $widget->getSaveValue('cmyk(76.3%, 30.6%, 0%, 14.1%)'));\n+        $this->assertEquals('hsla(204.1, 69.9%, 53.1%, 1)', $widget->getSaveValue('hsla(204.1, 69.9%, 53.1%, 1)'));\n+\n+        // Getting a invalid value should throw an exception\n+        $this->expectException(ApplicationException::class);\n+        $widget->getSaveValue('#Winter Is Awesome');\n+\n+        $this->expectException(ApplicationException::class);\n+        $widget->getSaveValue('rgba(51.9, 152, 219, 1) -- test');\n+\n+        $this->expectException(ApplicationException::class);\n+        $widget->getSaveValue('Test(51.9, 152, 219, 1)');\n+    }\n+\n+    public function testAllowCustomSaveValue(): void\n+    {\n+        $widget = $this->makeWidget([\n+            'formats' => 'custom'\n+        ]);\n+\n+        // Config allows for any format\n+        $this->assertEquals('rgba(51.9, 152, 219, 1)', $widget->getSaveValue('rgba(51.9, 152, 219, 1)'));\n+        $this->assertEquals('#Winter Is Awesome', $widget->getSaveValue('#Winter Is Awesome'));\n+        $this->assertEquals('Test(51.9, 152, 219, 1)', $widget->getSaveValue('Test(51.9, 152, 219, 1)'));\n+    }\n+\n+    protected function makeWidget(array $config = []): ColorPicker\n+    {\n+        return new ColorPicker(new Controller(), new FormField('test', 'Test'), $config);\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "206e73847cf65f87e3ca12862859223cc1b8a785",
            "date": "2025-01-13T01:57:23Z",
            "author_login": "bennothommo"
          },
          {
            "sha": "c9d559a676cbd8f02bf0627dce08426b6de594fb",
            "date": "2025-01-13T01:56:35Z",
            "author_login": "bennothommo"
          },
          {
            "sha": "c084c6cb36f47b03012a5a1071e4d4334a9c431e",
            "date": "2025-01-08T21:04:53Z",
            "author_login": "LukeTowers"
          },
          {
            "sha": "3255d4a7c04ec9d15fb62565d7bd86802f8049f3",
            "date": "2025-01-02T08:15:03Z",
            "author_login": "mjauvin"
          },
          {
            "sha": "20a73ffc56b7690280273ed42bd21b91c04e3676",
            "date": "2024-12-19T11:31:08Z",
            "author_login": "mjauvin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-22",
    "description": "Winter is a free, open-source content management system. Users with access to backend forms that include a ColorPicker FormWidget can provide a value that would then be included without further processing in the compilation of custom stylesheets via LESS. This had the potential to lead to a Local File Inclusion vulnerability. This issue has been patched in v1.2.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-12-29T00:15:50.300",
    "last_modified": "2024-11-21T08:39:08.413",
    "fix_date": "2023-12-14T06:18:03Z"
  },
  "references": [
    {
      "url": "https://github.com/wintercms/winter/commit/5bc9257fe2bc47d8b786a1b1bf96bafad23d8ddd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/wintercms/winter/security/advisories/GHSA-2x7r-93ww-cxrq",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/wintercms/winter/commit/5bc9257fe2bc47d8b786a1b1bf96bafad23d8ddd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/wintercms/winter/security/advisories/GHSA-2x7r-93ww-cxrq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.112298",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "winter",
    "owner": "wintercms",
    "created_at": "2021-03-04T03:02:45Z",
    "updated_at": "2025-01-14T01:13:00Z",
    "pushed_at": "2025-01-14T03:55:54Z",
    "size": 61211,
    "stars": 1391,
    "forks": 197,
    "open_issues": 78,
    "watchers": 1391,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "PHP": 5864247,
      "JavaScript": 1597854,
      "Less": 683863,
      "CSS": 360609,
      "HTML": 15046,
      "Vue": 13895,
      "Hack": 9045,
      "Shell": 2399,
      "Blade": 787,
      "Dockerfile": 304
    },
    "commit_activity": {
      "total_commits_last_year": 209,
      "avg_commits_per_week": 4.019230769230769,
      "days_active_last_year": 102
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:32:19.726991"
  }
}