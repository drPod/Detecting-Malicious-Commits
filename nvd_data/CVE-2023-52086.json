{
  "cve_id": "CVE-2023-52086",
  "github_data": {
    "repository": "dilab/resumable.php",
    "fix_commit": "3c6dbf5170b01cbb712013c7d0a83f5aac45653b",
    "related_commits": [
      "3c6dbf5170b01cbb712013c7d0a83f5aac45653b",
      "3c6dbf5170b01cbb712013c7d0a83f5aac45653b"
    ],
    "patch_url": "https://github.com/dilab/resumable.php/commit/3c6dbf5170b01cbb712013c7d0a83f5aac45653b.patch",
    "fix_commit_details": {
      "sha": "3c6dbf5170b01cbb712013c7d0a83f5aac45653b",
      "commit_date": "2023-12-17T03:05:25Z",
      "author": {
        "login": "dilab",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #39 from code-lts/security-fix",
        "length": 119,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 75,
        "additions": 61,
        "deletions": 14
      },
      "files": [
        {
          "filename": "composer.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -10,7 +10,8 @@\n   \"require\": {\n     \"php\": \">=8.1.0\",\n     \"cakephp/filesystem\": \"^3.0\",\n-    \"monolog/monolog\": \"^2.0\"\n+    \"monolog/monolog\": \"^2.0\",\n+    \"ondrej-vrto/php-filename-sanitize\": \"^1.4\"\n   },\n   \"require-dev\": {\n     \"phpunit/phpunit\": \"~10.0\""
        },
        {
          "filename": "src/Resumable.php",
          "status": "modified",
          "additions": 10,
          "deletions": 13,
          "patch": "@@ -8,6 +8,7 @@\n use Dilab\\Network\\Response;\n use Monolog\\Logger;\n use Monolog\\Handler\\StreamHandler;\n+use OndrejVrto\\FilenameSanitize\\FilenameSanitize;\n \n class Resumable\n {\n@@ -159,18 +160,14 @@ public function getExtension()\n     }\n \n     /**\n-     * Makes sure the orginal extension never gets overriden by user defined filename.\n+     * Creates a safe name\n      *\n-     * @param string User defined filename\n-     * @param string Original filename\n-     * @return string Filename that always has an extension from the original file\n+     * @param string $name Original name\n+     * @return string A safer name\n      */\n-    private function createSafeFilename($filename, $originalFilename)\n+    private function createSafeName(string $name): string\n     {\n-        $filename = $this->removeExtension($filename);\n-        $extension = $this->findExtension($originalFilename);\n-\n-        return sprintf('%s.%s', $filename, $extension);\n+        return FilenameSanitize::of($name)->get();\n     }\n \n     public function handleTestChunk()\n@@ -227,9 +224,9 @@ private function createFileAndDeleteTmp($identifier, $filename)\n \n         // if the user has set a custom filename\n         if (null !== $this->filename) {\n-            $finalFilename = $this->createSafeFilename($this->filename, $filename);\n+            $finalFilename = $this->createSafeName($this->filename);\n         } else {\n-            $finalFilename = $filename;\n+            $finalFilename = $this->createSafeName($filename);\n         }\n \n         // replace filename reference by the final file\n@@ -288,7 +285,7 @@ public function tmpChunkDir($identifier)\n         if (!empty($this->instanceId)){\n             $tmpChunkDir .= $this->instanceId . DIRECTORY_SEPARATOR;\n         }\n-        $tmpChunkDir .= $identifier;\n+        $tmpChunkDir .= $this->createSafeName($identifier);\n         $this->ensureDirExists($tmpChunkDir);\n         return $tmpChunkDir;\n     }\n@@ -318,7 +315,7 @@ private function ensureDirExists($path)\n \n     public function tmpChunkFilename($filename, $chunkNumber)\n     {\n-        return $filename . '.' . str_pad($chunkNumber, 4, 0, STR_PAD_LEFT);\n+        return $this->createSafeName($filename) . '.' . str_pad($chunkNumber, 4, 0, STR_PAD_LEFT);\n     }\n \n     public function getExclusiveFileHandle($name)"
        },
        {
          "filename": "test/src/ResumableTest.php",
          "status": "modified",
          "additions": 49,
          "deletions": 0,
          "patch": "@@ -235,6 +235,55 @@ public function testTmpChunkFile()\n         $this->assertEquals($expected, $this->resumbable->tmpChunkFilename($filename,$chunkNumber));\n     }\n \n+    public static function fileNameProvider(): array\n+    {\n+        return [\n+            ['example-file.png', 'example-file.png'],\n+            ['../unsafe-one-level.txt', 'unsafe-one-level.txt'],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider fileNameProvider\n+     */\n+    public function testResumableSanitizeFileName(string $filename, string $filenameSanitized): void\n+    {\n+        $resumableParams = array(\n+            'resumableChunkNumber'=> 1,\n+            'resumableTotalChunks'=> 1,\n+            'resumableChunkSize'=>  200,\n+            'resumableIdentifier'=> 'identifier',\n+            'resumableFilename'=> $filename,\n+            'resumableRelativePath'=> 'upload',\n+        );\n+\n+\n+        $this->request->method('is')\n+            ->willReturn(true);\n+\n+        $this->request->method('data')\n+                ->willReturn($resumableParams);\n+\n+        $this->request->method('file')\n+                ->willReturn(array(\n+                    'name'=> 'mock.png',\n+                    'tmp_name'=>  'test/files/mock.png.0003',\n+                    'error'=> 0,\n+                    'size'=> 27000,\n+                ));\n+\n+        $this->resumbable = new Resumable($this->request, $this->response);\n+        $this->resumbable->tempFolder = 'test/tmp';\n+        $this->resumbable->uploadFolder = 'test/uploads';\n+        $this->resumbable->deleteTmpFolder = false;\n+        $this->resumbable->handleChunk();\n+\n+        $this->assertFileExists('test/uploads/' . $filenameSanitized);\n+        $this->assertFileExists('test/tmp/identifier/' . $filenameSanitized . '.0001');\n+        $this->assertTrue(unlink('test/tmp/identifier/' . $filenameSanitized . '.0001'));\n+        $this->assertTrue(unlink('test/uploads/' . $filenameSanitized));\n+    }\n+\n     public function testCreateFileFromChunks()\n     {\n         $files = array("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3c6dbf5170b01cbb712013c7d0a83f5aac45653b",
            "date": "2023-12-17T03:05:25Z",
            "author_login": "dilab"
          },
          {
            "sha": "62c3fffc92a6abd5b9289d8900d5722d08ebf8be",
            "date": "2023-12-17T03:04:56Z",
            "author_login": "dilab"
          },
          {
            "sha": "d7a4f119f08194df7c58b6410da0f33b5f0bc51b",
            "date": "2023-12-17T03:04:44Z",
            "author_login": "dilab"
          },
          {
            "sha": "d3552efd403e2d87407934477eee642836cab3b4",
            "date": "2023-12-17T00:42:23Z",
            "author_login": "williamdes"
          },
          {
            "sha": "408f54dff10e48befa44d417933787232a64304b",
            "date": "2023-12-17T00:35:13Z",
            "author_login": "williamdes"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "resumable.php (aka PHP backend for resumable.js) 0.1.4 before 3c6dbf5 allows arbitrary file upload anywhere in the filesystem via ../ in multipart/form-data content to upload.php. (File overwrite hasn't been possible with the code available in GitHub in recent years, however.)",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-12-26T18:15:09.030",
    "last_modified": "2024-11-21T08:39:08.540",
    "fix_date": "2023-12-17T03:05:25Z"
  },
  "references": [
    {
      "url": "https://github.com/dilab/resumable.php/commit/3c6dbf5170b01cbb712013c7d0a83f5aac45653b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/issues/34",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/pull/27/commits/3e3c94d0302bb399a7611b4738a5a4dd0832a926",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/pull/39/commits/408f54dff10e48befa44d417933787232a64304b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/pull/39/commits/d3552efd403e2d87407934477eee642836cab3b4",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/commit/3c6dbf5170b01cbb712013c7d0a83f5aac45653b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/issues/34",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/pull/27/commits/3e3c94d0302bb399a7611b4738a5a4dd0832a926",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/pull/39/commits/408f54dff10e48befa44d417933787232a64304b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/dilab/resumable.php/pull/39/commits/d3552efd403e2d87407934477eee642836cab3b4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.103935",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "resumable.php",
    "owner": "dilab",
    "created_at": "2015-07-11T01:11:56Z",
    "updated_at": "2024-05-17T16:43:36Z",
    "pushed_at": "2023-12-17T03:05:25Z",
    "size": 77,
    "stars": 42,
    "forks": 41,
    "open_issues": 8,
    "watchers": 42,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 27580
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:46:26.848125"
  }
}