{
  "cve_id": "CVE-2023-5833",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "d5b1f84a4c7991987eac3454d4f1b4067841d783",
    "related_commits": [
      "d5b1f84a4c7991987eac3454d4f1b4067841d783",
      "d5b1f84a4c7991987eac3454d4f1b4067841d783"
    ],
    "patch_url": "https://github.com/mintplex-labs/anything-llm/commit/d5b1f84a4c7991987eac3454d4f1b4067841d783.patch",
    "fix_commit_details": {
      "sha": "d5b1f84a4c7991987eac3454d4f1b4067841d783",
      "commit_date": "2023-09-29T17:44:40Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent updates of specific keys via API (#256)",
        "length": 134,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 53,
        "additions": 42,
        "deletions": 11
      },
      "files": [
        {
          "filename": "server/endpoints/system.js",
          "status": "modified",
          "additions": 33,
          "deletions": 6,
          "patch": "@@ -239,6 +239,16 @@ function systemEndpoints(app) {\n     async (request, response) => {\n       try {\n         const body = reqBody(request);\n+\n+        // Only admins can update the ENV settings.\n+        if (multiUserMode(response)) {\n+          const user = await userFromSession(request, response);\n+          if (!user || user?.role !== \"admin\") {\n+            response.sendStatus(401).end();\n+            return;\n+          }\n+        }\n+\n         const { newValues, error } = updateENV(body);\n         if (process.env.NODE_ENV === \"production\") await dumpENV();\n         response.status(200).json({ newValues, error });\n@@ -254,11 +264,21 @@ function systemEndpoints(app) {\n     [validatedRequest],\n     async (request, response) => {\n       try {\n+        // Cannot update password in multi - user mode.\n+        if (multiUserMode(response)) {\n+          response.sendStatus(401).end();\n+          return;\n+        }\n+\n         const { usePassword, newPassword } = reqBody(request);\n-        const { error } = updateENV({\n-          AuthToken: usePassword ? newPassword : \"\",\n-          JWTSecret: usePassword ? v4() : \"\",\n-        });\n+        const { error } = updateENV(\n+          {\n+            AuthToken: usePassword ? newPassword : \"\",\n+            JWTSecret: usePassword ? v4() : \"\",\n+          },\n+          true\n+        );\n+        if (process.env.NODE_ENV === \"production\") await dumpENV();\n         response.status(200).json({ success: !error, error });\n       } catch (e) {\n         console.log(e.message, e);\n@@ -293,8 +313,15 @@ function systemEndpoints(app) {\n           limit_user_messages: false,\n           message_limit: 25,\n         });\n-        process.env.AUTH_TOKEN = null;\n-        process.env.JWT_SECRET = process.env.JWT_SECRET ?? v4(); // Make sure JWT_SECRET is set for JWT issuance.\n+\n+        updateENV(\n+          {\n+            AuthToken: null,\n+            JWTSecret: process.env.JWT_SECRET ?? v4(),\n+          },\n+          true\n+        );\n+        if (process.env.NODE_ENV === \"production\") await dumpENV();\n         await Telemetry.sendTelemetry(\"enabled_multi_user_mode\");\n         response.status(200).json({ success: !!user, error });\n       } catch (e) {"
        },
        {
          "filename": "server/utils/helpers/updateENV.js",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -72,11 +72,11 @@ const KEY_MAPPING = {\n   // System Settings\n   AuthToken: {\n     envKey: \"AUTH_TOKEN\",\n-    checks: [],\n+    checks: [requiresForceMode],\n   },\n   JWTSecret: {\n     envKey: \"JWT_SECRET\",\n-    checks: [],\n+    checks: [requiresForceMode],\n   },\n   // Not supported yet.\n   // 'StorageDir': 'STORAGE_DIR',\n@@ -143,11 +143,15 @@ function validAzureURL(input = \"\") {\n   }\n }\n \n+function requiresForceMode(_, forceModeEnabled = false) {\n+  return forceModeEnabled === true ? null : \"Cannot set this setting.\";\n+}\n+\n // This will force update .env variables which for any which reason were not able to be parsed or\n // read from an ENV file as this seems to be a complicating step for many so allowing people to write\n // to the process will at least alleviate that issue. It does not perform comprehensive validity checks or sanity checks\n // and is simply for debugging when the .env not found issue many come across.\n-function updateENV(newENVs = {}) {\n+function updateENV(newENVs = {}, force = false) {\n   let error = \"\";\n   const validKeys = Object.keys(KEY_MAPPING);\n   const ENV_KEYS = Object.keys(newENVs).filter(\n@@ -159,7 +163,7 @@ function updateENV(newENVs = {}) {\n     const { envKey, checks } = KEY_MAPPING[key];\n     const value = newENVs[key];\n     const errors = checks\n-      .map((validityCheck) => validityCheck(value))\n+      .map((validityCheck) => validityCheck(value, force))\n       .filter((err) => typeof err === \"string\");\n \n     if (errors.length > 0) {"
        },
        {
          "filename": "server/utils/prisma/migrateFromSqlite.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -253,7 +253,7 @@ async function migrateTable(tableName, migrateRowFunc) {\n   // Check table exists\n   const { count } = await db.get(\n     `SELECT COUNT(*) as count FROM sqlite_master WHERE name='${tableName}'`\n-  )\n+  );\n   if (count === 0) {\n     console.log(\n       `${tableName} does not exist in legacy DB - nothing to migrate - skipping.`"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d5d8d4dec0e62662c8ec46537038353f45e0e66",
            "date": "2025-01-14T16:20:57Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "21af81085aeb049750942ac5f3b84775cb461693",
            "date": "2025-01-13T21:12:03Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "665e8e5bfe431ad93bed6736d0b450592617d042",
            "date": "2025-01-09T23:39:56Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "865f7eea296e544b2eb1ab8c1f322208eaf5eb05",
            "date": "2025-01-09T21:32:54Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "be886f7d61296a30d5b8a095ca8329f58a0c5a0a",
            "date": "2025-01-09T01:21:30Z",
            "author_login": "root-reindeer-flotilla"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-284",
    "description": "Improper Access Control in GitHub repository mintplex-labs/anything-llm prior to 0.1.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-30T13:15:31.917",
    "last_modified": "2024-11-21T08:42:35.430",
    "fix_date": "2023-09-29T17:44:40Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/d5b1f84a4c7991987eac3454d4f1b4067841d783",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/00ec6847-125b-43e9-9658-d3cace1751d6",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/d5b1f84a4c7991987eac3454d4f1b4067841d783",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/00ec6847-125b-43e9-9658-d3cace1751d6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.964190",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-14T13:49:57Z",
    "pushed_at": "2025-01-13T21:12:06Z",
    "size": 42916,
    "stars": 30237,
    "forks": 3030,
    "open_issues": 206,
    "watchers": 30237,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3056909,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:33.088245"
  }
}