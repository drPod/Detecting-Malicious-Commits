{
  "cve_id": "CVE-2023-5861",
  "github_data": {
    "repository": "microweber/microweber",
    "fix_commit": "6ed7ebf1631dd8f0780caa4151a5538f3b227d26",
    "related_commits": [
      "6ed7ebf1631dd8f0780caa4151a5538f3b227d26",
      "6ed7ebf1631dd8f0780caa4151a5538f3b227d26"
    ],
    "patch_url": "https://github.com/microweber/microweber/commit/6ed7ebf1631dd8f0780caa4151a5538f3b227d26.patch",
    "fix_commit_details": {
      "sha": "6ed7ebf1631dd8f0780caa4151a5538f3b227d26",
      "commit_date": "2023-06-08T13:38:28Z",
      "author": {
        "login": "peter-mw",
        "type": "User",
        "stats": {
          "total_commits": 7965,
          "average_weekly_commits": 15.0,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 408
        }
      },
      "commit_message": {
        "title": "update",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 194,
        "additions": 176,
        "deletions": 18
      },
      "files": [
        {
          "filename": "src/MicroweberPackages/Cart/CartManager.php",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -616,7 +616,7 @@ public function update_cart($data)\n             if ($cont == false) {\n                 return array('error' => 'Invalid product?');\n             } else {\n-                if (is_array($cont) and isset($cont['title'])) {\n+                if (is_array($cont) and isset($cont['title']) and $cont['title']) {\n                     $data['title'] = $cont['title'];\n                 }\n             }\n@@ -779,6 +779,10 @@ public function update_cart($data)\n             $cart['allow_html'] = 1;\n             $cart['price'] = doubleval($found_price);\n             $cart['limit'] = 1;\n+            if(!isset($data['title']) or $data['title'] == false){\n+                $data['title'] = 'Product '.$cart['rel_id'];\n+            }\n+\n             $cart['title'] = mw()->format->clean_html($data['title']);\n \n             $cart_return['custom_fields_data'] = $add;"
        },
        {
          "filename": "src/MicroweberPackages/Customer/tests/CustomerCheckoutTest.php",
          "status": "modified",
          "additions": 53,
          "deletions": 7,
          "patch": "@@ -1,18 +1,17 @@\n <?php\n+\n namespace MicroweberPackages\\Customer\\tests;\n \n-use MicroweberPackages\\Core\\tests\\TestCase;\n use MicroweberPackages\\Checkout\\CheckoutManager;\n+use MicroweberPackages\\Core\\tests\\TestCase;\n use MicroweberPackages\\Customer\\Models\\Address;\n use MicroweberPackages\\Customer\\Models\\Customer;\n-use MicroweberPackages\\Utils\\Mail\\MailSender;\n \n /**\n  * Run test\n  * @author Bobi Microweber\n  * @command php phpunit.phar --filter CheckoutTest\n  */\n-\n class CustomerCheckoutTest extends TestCase\n {\n     public static $content_id = 1;\n@@ -37,7 +36,7 @@ private function _addProductToCart($title)\n \n         $saved_id = save_content($params);\n         $prices_data = app()->shop_manager->get_product_prices($saved_id, false);\n-        $this->assertEquals($prices_data['Price'],$productPrice);\n+        $this->assertEquals($prices_data['Price'], $productPrice);\n \n \n         $get = get_content_by_id($saved_id);\n@@ -50,7 +49,7 @@ private function _addProductToCart($title)\n             'price' => $productPrice,\n         );\n         $cart_add = update_cart($add_to_cart);\n- \n+\n         $this->assertEquals(isset($cart_add['success']), true);\n         $this->assertEquals(isset($cart_add['product']), true);\n         $this->assertEquals($cart_add['product']['price'], $productPrice);\n@@ -59,7 +58,7 @@ private function _addProductToCart($title)\n     public function testCheckout()\n     {\n \n-         \\Config::set('mail.transport', 'array');\n+        \\Config::set('mail.transport', 'array');\n \n         $this->_addProductToCart('Product 1');\n         $this->_addProductToCart('Product 2');\n@@ -109,7 +108,54 @@ public function testCheckout()\n         $this->assertEquals($address->state, $checkoutDetails['state']);\n \n \n-\n     }\n \n+    public function testCheckoutCustomerWithXss()\n+    {\n+\n+        $this->_addProductToCart('Product 1');\n+        $this->_addProductToCart('Product 2');\n+        $this->_addProductToCart('Product 3');\n+        $this->_addProductToCart('Product 4');\n+        $xss = '<style>@keyframes x{}</style><xss style=\"animation-name:x\" onanimationend=\"alert(document.cookie)\"></xss>';\n+        $checkoutDetails = array();\n+        $checkoutDetails['email'] = 'client_' . uniqid() . '@microweber.com';\n+        $checkoutDetails['first_name'] = 'Client First Name<script>alert(1)</script>' . $xss;\n+        $checkoutDetails['last_name'] = 'Microweber Last Name' . $xss;\n+        $checkoutDetails['phone'] = '08812345' . rand(100, 999) . $xss;\n+        $checkoutDetails['address'] = 'Business Park, Mladost 4' . $xss;\n+        $checkoutDetails['address2'] = 'Business Park, Mladost 6' . $xss;\n+        $checkoutDetails['city'] = 'Sofia' . $xss;\n+        $checkoutDetails['state'] = 'Sofia City' . $xss;\n+        $checkoutDetails['country'] = 'Bulgaria' . $xss;\n+        $checkoutDetails['zip'] = '1000' . $xss;\n+\n+\n+        $checkout = new CheckoutManager();\n+        $checkoutStatus = $checkout->checkout($checkoutDetails);\n+\n+        $this->assertArrayHasKey('success', $checkoutStatus);\n+        $this->assertArrayHasKey('id', $checkoutStatus);\n+\n+\n+        // Find customer\n+        $customer = Customer::where('email', $checkoutDetails['email'])->first();\n+\n+        $this->assertEquals($customer->email, $checkoutDetails['email']);\n+        $this->assertNotEquals($customer->first_name, $checkoutDetails['first_name']);\n+        $this->assertNotEquals($customer->last_name, $checkoutDetails['last_name']);\n+        $this->assertNotEquals($customer->phone, $checkoutDetails['phone']);\n+\n+        // Find customer\n+        $address = Address::where('customer_id', $customer->id)->first();\n+\n+        $this->assertNotEquals($address->phone, $checkoutDetails['phone']);\n+        $this->assertNotEquals($address->address_street_1, $checkoutDetails['address']);\n+        $this->assertNotEquals($address->address_street_2, $checkoutDetails['address2']);\n+        $this->assertNotEquals($address->city, $checkoutDetails['city']);\n+        $this->assertNotEquals($address->zip, $checkoutDetails['zip']);\n+        $this->assertNotEquals($address->state, $checkoutDetails['state']);\n+\n+\n+    }\n }"
        },
        {
          "filename": "src/MicroweberPackages/Order/OrderManager.php",
          "status": "modified",
          "additions": 13,
          "deletions": 2,
          "patch": "@@ -127,13 +127,24 @@ public function delete_order($data)\n         }\n     }\n \n-    public function place_order($place_order)\n+    public function place_order($place_order = array())\n     {\n         $sid = mw()->user_manager->session_id();\n         if ($sid == false) {\n             return $sid;\n         }\n-\n+        if (empty($place_order)) {\n+            return;\n+        }\n+        array_walk_recursive(\n+            $place_order,\n+            function(&$string) {\n+                if (is_string($string)) {\n+                    $string = trim(strip_tags($string));\n+                }\n+            }\n+        );\n+        $place_order = xss_clean($place_order);\n         event($event = new OrderIsCreating($place_order));\n         $should_mark_as_paid = false;\n         $place_order = array_filter($place_order);"
        },
        {
          "filename": "src/MicroweberPackages/Shop/tests/CheckoutClientTest.php",
          "status": "added",
          "additions": 98,
          "deletions": 0,
          "patch": "@@ -0,0 +1,98 @@\n+<?php\n+namespace MicroweberPackages\\Shop\\tests;\n+\n+use MicroweberPackages\\Checkout\\CheckoutManager;\n+use MicroweberPackages\\Core\\tests\\TestCase;\n+\n+\n+class CheckoutClientTest extends TestCase\n+{\n+    public static $content_id = 1;\n+\n+    private function _addProductToCart($title)\n+    {\n+        app()->database_manager->extended_save_set_permission(true);\n+\n+        $productPrice = rand(1, 4444);\n+\n+        $params = array(\n+            'title' => $title,\n+            'content_type' => 'product',\n+            'subtype' => 'product',\n+            'custom_fields_advanced' => array(\n+                array('type' => 'dropdown', 'name' => 'Color', 'value' => array('Purple', 'Blue')),\n+                array('type' => 'price', 'name' => 'Price', 'value' => $productPrice),\n+\n+            ),\n+            'is_active' => 1,);\n+\n+\n+        $saved_id = save_content($params);\n+        $get = get_content_by_id($saved_id);\n+\n+        $this->assertEquals($saved_id, ($get['id']));\n+        self::$content_id = $saved_id;\n+\n+        $add_to_cart = array(\n+            'content_id' => self::$content_id,\n+            'price' => $productPrice,\n+        );\n+        $cart_add = update_cart($add_to_cart);\n+\n+        $this->assertEquals(isset($cart_add['success']), true);\n+        $this->assertEquals(isset($cart_add['product']), true);\n+        $this->assertEquals($cart_add['product']['price'], $productPrice);\n+    }\n+\n+    public function testCheckoutClientNames()\n+    {\n+        empty_cart();\n+\n+\n+        $this->_addProductToCart('CheckoutClientTestProduct 1');\n+        $this->_addProductToCart('CheckoutClientTestProduct 2');\n+        $this->_addProductToCart('CheckoutClientTestProduct 3');\n+        $this->_addProductToCart('CheckoutClientTestProduct 4');\n+\n+        $email = 'client+'.uniqid('testCheckoutClientNames').'test@microweber.com';\n+        $checkoutDetails = array();\n+        $checkoutDetails['email'] = $email;\n+        $checkoutDetails['first_name'] = 'Client';\n+        $checkoutDetails['last_name'] = 'Microweber';\n+        $checkoutDetails['phone'] = '08812345678';\n+        $checkoutDetails['address'] = 'Business Park, Mladost 4';\n+        $checkoutDetails['city'] = 'Sofia';\n+        $checkoutDetails['state'] = 'Sofia City';\n+        $checkoutDetails['country'] = 'Bulgaria';\n+        $checkoutDetails['zip'] = '1000';\n+\n+        $checkout = new CheckoutManager();\n+        $checkoutStatus = $checkout->checkout($checkoutDetails);\n+\n+        $this->assertArrayHasKey('success', $checkoutStatus);\n+        $this->assertArrayHasKey('id', $checkoutStatus);\n+        $this->assertArrayHasKey('order_completed', $checkoutStatus);\n+        $this->assertArrayHasKey('amount', $checkoutStatus);\n+        $this->assertArrayHasKey('currency', $checkoutStatus);\n+        $this->assertArrayHasKey('order_status', $checkoutStatus);\n+\n+        $this->assertEquals($checkoutStatus['order_completed'], 1);\n+        $this->assertEquals($checkoutStatus['first_name'],  $checkoutDetails['first_name']);\n+        $this->assertEquals($checkoutStatus['last_name'],  $checkoutDetails['last_name']);\n+        $this->assertEquals($checkoutStatus['email'],  $checkoutDetails['email']);\n+        $this->assertEquals($checkoutStatus['country'],  $checkoutDetails['country']);\n+        $this->assertEquals($checkoutStatus['city'],  $checkoutDetails['city']);\n+        $this->assertEquals($checkoutStatus['state'],  $checkoutDetails['state']);\n+        $this->assertEquals($checkoutStatus['zip'],  $checkoutDetails['zip']);\n+        $this->assertEquals($checkoutStatus['address'],  $checkoutDetails['address']);\n+\n+\n+\n+\n+    }\n+\n+\n+\n+\n+\n+}"
        },
        {
          "filename": "src/MicroweberPackages/Shop/tests/CheckoutTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 8,
          "patch": "@@ -286,10 +286,10 @@ public function testCheckoutDeletedProduct()\n         $content_data_after_order = content_data($saved_id);\n         $this->assertEquals(10, $content_data_after_order['qty']);\n \n-        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n-        $productQuery = $productQuery->whereHas('orders');\n-        $products = $productQuery->get();\n-        $this->assertTrue($products->isEmpty());\n+\n+        $order = get_order_by_id($checkoutStatus);\n+        $this->assertNotNull($order);\n+        $this->assertNull($order['amount']);\n \n         $order = get_order_by_id($checkoutStatus);\n         $this->assertNotNull($order);\n@@ -342,14 +342,13 @@ public function testCheckoutUnpublishedProduct()\n         $content_data_after_order = content_data($saved_id);\n         $this->assertEquals(11, $content_data_after_order['qty']);\n \n-        $productQuery = \\MicroweberPackages\\Product\\Models\\Product::query();\n-        $productQuery = $productQuery->whereHas('orders');\n-        $products = $productQuery->get();\n-        $this->assertTrue($products->isEmpty());\n+\n \n         $order = get_order_by_id($checkoutStatus);\n         $this->assertNotNull($order);\n         $this->assertNull($order['amount']);\n \n     }\n+\n+\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d4e8c4a13967ac9856c3e1179d4185e59b8d9311",
            "date": "2024-11-26T15:08:46Z",
            "author_login": "peter-mw"
          },
          {
            "sha": "9a701a997a4041f040b00d989b19e446c34419e5",
            "date": "2024-06-26T12:33:18Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "5851e060318fb8065a478df6b63b335b1d3a52c2",
            "date": "2024-06-26T11:34:21Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "7c37d77e617d35cdefdcaf96c7a18a33a9758289",
            "date": "2024-06-26T11:14:53Z",
            "author_login": "Radanovn"
          },
          {
            "sha": "eff6fadcadd749e8f4295bec99bf173d2401f3ac",
            "date": "2024-06-26T11:11:53Z",
            "author_login": "Radanovn"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 2.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-31T01:15:07.630",
    "last_modified": "2024-11-21T08:42:39.217",
    "fix_date": "2023-06-08T13:38:28Z"
  },
  "references": [
    {
      "url": "https://github.com/microweber/microweber/commit/6ed7ebf1631dd8f0780caa4151a5538f3b227d26",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/7baecef8-6c59-42fc-bced-886c4929e220",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/microweber/microweber/commit/6ed7ebf1631dd8f0780caa4151a5538f3b227d26",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/7baecef8-6c59-42fc-bced-886c4929e220",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.968649",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "microweber",
    "owner": "microweber",
    "created_at": "2010-10-07T09:04:43Z",
    "updated_at": "2025-01-13T15:04:29Z",
    "pushed_at": "2025-01-14T13:26:48Z",
    "size": 1026007,
    "stars": 3170,
    "forks": 887,
    "open_issues": 360,
    "watchers": 3170,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "HTML": 12566636,
      "PHP": 11976208,
      "JavaScript": 8696748,
      "CSS": 3597687,
      "SCSS": 2178754,
      "Blade": 1663671,
      "Less": 518400,
      "Hack": 476030,
      "MDX": 387317,
      "Vue": 344860,
      "Ruby": 12504,
      "OCaml": 4815,
      "Dockerfile": 1548,
      "CoffeeScript": 950,
      "Batchfile": 61,
      "Shell": 59,
      "Sass": 1
    },
    "commit_activity": {
      "total_commits_last_year": 1332,
      "avg_commits_per_week": 25.615384615384617,
      "days_active_last_year": 106
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:59:40.368111"
  }
}