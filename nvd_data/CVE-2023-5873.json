{
  "cve_id": "CVE-2023-5873",
  "github_data": {
    "repository": "pimcore/pimcore",
    "fix_commit": "757375677dc83a44c6c22f26d97452cc5cda5d7c",
    "related_commits": [
      "757375677dc83a44c6c22f26d97452cc5cda5d7c",
      "757375677dc83a44c6c22f26d97452cc5cda5d7c"
    ],
    "patch_url": "https://github.com/pimcore/pimcore/commit/757375677dc83a44c6c22f26d97452cc5cda5d7c.patch",
    "fix_commit_details": {
      "sha": "757375677dc83a44c6c22f26d97452cc5cda5d7c",
      "commit_date": "2023-10-09T08:53:37Z",
      "author": {
        "login": "robertSt7",
        "type": "User",
        "stats": {
          "total_commits": 256,
          "average_weekly_commits": 0.5089463220675944,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 82
        }
      },
      "commit_message": {
        "title": "Implement Asset Sanitizer Queue & Preview Check (#16053)",
        "length": 880,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 93,
        "additions": 93,
        "deletions": 0
      },
      "files": [
        {
          "filename": "bundles/CoreBundle/src/DependencyInjection/Configuration.php",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -553,6 +553,10 @@ private function addAssetNode(ArrayNodeDefinition $rootNode): void\n                                 ->defaultTrue()\n                                 ->info('Process text for Asset documents (e.g. used by backend search).')\n                             ->end()\n+                            ->booleanNode('scan_pdf')\n+                                ->defaultTrue()\n+                                ->info('Scan PDF documents for unsafe JavaScript.')\n+                            ->end()\n                         ->end()\n                     ->end()\n                     ->arrayNode('versions')"
        },
        {
          "filename": "doc/04_Assets/README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ pimcore:\n                 enabled: false #disable generating thumbnail for asset documents\n             process_page_count: false #disable processing page count\n             process_text: false #disable processing text extraction\n+            scan_pdf: false #disable scanning PDF documents for unsafe JavaScript.\n ```\n \n The sub chapters of this chapter provide insight into details for"
        },
        {
          "filename": "doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -20,6 +20,8 @@ pimcore:\n                 enabled: false #disable generating thumbnail for asset documents\n             process_page_count: false #disable processing page count\n             process_text: false #disable processing text extraction\n+            scan_pdf: false #disable scanning PDF documents for unsafe JavaScript.\n+\n ```\n - [Elements] Properties are now only updated in the database with dirty state (when calling `setProperties` or `setProperty`).\n - `Pimcore\\Helper\\CsvFormulaFormatter` has been deprecated. Use `League\\Csv\\EscapeFormula` instead."
        },
        {
          "filename": "lib/Messenger/Handler/AssetUpdateTasksHandler.php",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -62,6 +62,10 @@ private function saveAsset(Asset $asset): void\n \n     private function processDocument(Asset\\Document $asset): void\n     {\n+        if ($asset->getMimeType() === 'application/pdf' && $asset->checkIfPdfContainsJS()) {\n+            $asset->save(['versionNote' => 'PDF scan result']);\n+        }\n+\n         $pageCount = $asset->getCustomSetting('document_page_count');\n         if (!$pageCount || $pageCount === 'failed') {\n             if ($asset->processPageCount()) {"
        },
        {
          "filename": "models/Asset/Document.php",
          "status": "modified",
          "additions": 54,
          "deletions": 0,
          "patch": "@@ -26,6 +26,8 @@\n  */\n class Document extends Model\\Asset\n {\n+    public const CUSTOM_SETTING_PDF_SCAN_STATUS = 'document_pdf_scan_status';\n+\n     protected string $type = 'document';\n \n     protected function update(array $params = []): void\n@@ -163,6 +165,53 @@ public function getText(int $page = null): ?string\n         return null;\n     }\n \n+    public function checkIfPdfContainsJS(): bool\n+    {\n+        if (!$this->isPdfScanningEnabled()) {\n+           return false;\n+        }\n+\n+        $this->setCustomSetting(\n+            self::CUSTOM_SETTING_PDF_SCAN_STATUS,\n+            Model\\Asset\\Enum\\PdfScanStatus::IN_PROGRESS->value\n+        );\n+\n+        $chunkSize = 1024;\n+        $filePointer = $this->getStream();\n+\n+        $tagLength = strlen('/JS');\n+\n+        while ($chunk = fread($filePointer, $chunkSize)) {\n+            if (strlen($chunk) <= $tagLength) {\n+                break;\n+            }\n+\n+            if (str_contains($chunk, '/JS') || str_contains($chunk, '/JavaScript')) {\n+                $this->setCustomSetting(\n+                    self::CUSTOM_SETTING_PDF_SCAN_STATUS,\n+                    Model\\Asset\\Enum\\PdfScanStatus::UNSAFE->value\n+                );\n+                return true;\n+            }\n+        }\n+\n+        $this->setCustomSetting(\n+            self::CUSTOM_SETTING_PDF_SCAN_STATUS,\n+            Model\\Asset\\Enum\\PdfScanStatus::SAFE->value\n+        );\n+\n+        return true;\n+    }\n+\n+    public function getScanStatus(): ?Model\\Asset\\Enum\\PdfScanStatus\n+    {\n+        if ($scanStatus = $this->getCustomSetting(self::CUSTOM_SETTING_PDF_SCAN_STATUS)) {\n+            return Model\\Asset\\Enum\\PdfScanStatus::tryFrom($scanStatus);\n+        }\n+\n+        return null;\n+    }\n+\n     private function isThumbnailsEnabled(): bool\n     {\n         return Config::getSystemConfiguration('assets')['document']['thumbnails']['enabled'];\n@@ -177,4 +226,9 @@ private function isTextProcessingEnabled(): bool\n     {\n         return Config::getSystemConfiguration('assets')['document']['process_text'];\n     }\n+\n+    private function isPdfScanningEnabled(): bool\n+    {\n+        return Config::getSystemConfiguration('assets')['document']['scan_pdf'];\n+    }\n }"
        },
        {
          "filename": "models/Asset/Enum/PdfScanStatus.php",
          "status": "added",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -0,0 +1,24 @@\n+<?php\n+declare(strict_types=1);\n+\n+/**\n+ * Pimcore\n+ *\n+ * This source file is available under two different licenses:\n+ * - GNU General Public License version 3 (GPLv3)\n+ * - Pimcore Commercial License (PCL)\n+ * Full copyright and license information is available in\n+ * LICENSE.md which is distributed with this source code.\n+ *\n+ *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n+ *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n+ */\n+\n+namespace Pimcore\\Model\\Asset\\Enum;\n+\n+enum PdfScanStatus: string\n+{\n+    case SAFE = 'safe';\n+    case UNSAFE = 'unsafe';\n+    case IN_PROGRESS = 'inProgress';\n+}"
        },
        {
          "filename": "models/Element/Service.php",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -731,6 +731,10 @@ public static function renewReferences(mixed $data, bool $initial = true, string\n             return $data;\n         }\n         if (is_object($data)) {\n+            if ($data instanceof \\UnitEnum) {\n+                return $data;\n+            }\n+\n             if ($data instanceof ElementInterface && !$initial) {\n                 return self::getElementById(self::getElementType($data), $data->getId());\n             }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a3c7544d81bc772dc53f7ea0e99c6eac37c59114",
            "date": "2025-01-14T13:54:55Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "081e73f14983613ed43e6ea9e40450063392b289",
            "date": "2025-01-14T13:53:00Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "bf1081a2c9a7de74ca965aa802ea07ac4e022b28",
            "date": "2025-01-14T13:52:39Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "7a232e673e963325610264dc760d8d0dbdd7a0d1",
            "date": "2025-01-14T13:52:17Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "cf380cd040bdbb134e62dd1fa9cb3954def8a595",
            "date": "2025-01-14T13:50:40Z",
            "author_login": "herbertroth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 11.1.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-10-31T09:15:09.363",
    "last_modified": "2024-11-21T08:42:41.093",
    "fix_date": "2023-10-09T08:53:37Z"
  },
  "references": [
    {
      "url": "https://github.com/pimcore/pimcore/commit/757375677dc83a44c6c22f26d97452cc5cda5d7c",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/701cfc30-22a1-4c4b-9b2f-885c77c290ce",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pimcore/pimcore/commit/757375677dc83a44c6c22f26d97452cc5cda5d7c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/701cfc30-22a1-4c4b-9b2f-885c77c290ce",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.970278",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pimcore",
    "owner": "pimcore",
    "created_at": "2011-11-01T09:16:14Z",
    "updated_at": "2025-01-14T09:15:55Z",
    "pushed_at": "2025-01-13T14:41:25Z",
    "size": 524212,
    "stars": 3455,
    "forks": 1448,
    "open_issues": 480,
    "watchers": 3455,
    "has_security_policy": false,
    "default_branch": "11.x",
    "protected_branches": [
      "11.x",
      "11.5"
    ],
    "languages": {
      "PHP": 6722485,
      "JavaScript": 330727,
      "Twig": 9213,
      "CSS": 2342,
      "HTML": 687,
      "Shell": 538
    },
    "commit_activity": {
      "total_commits_last_year": 619,
      "avg_commits_per_week": 11.903846153846153,
      "days_active_last_year": 182
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:01:17.566039"
  }
}