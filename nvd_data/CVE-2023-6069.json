{
  "cve_id": "CVE-2023-6069",
  "github_data": {
    "repository": "froxlor/froxlor",
    "fix_commit": "9e8f32f1e86016733b603b50c31b97f472e8dabc",
    "related_commits": [
      "9e8f32f1e86016733b603b50c31b97f472e8dabc",
      "9e8f32f1e86016733b603b50c31b97f472e8dabc"
    ],
    "patch_url": "https://github.com/froxlor/froxlor/commit/9e8f32f1e86016733b603b50c31b97f472e8dabc.patch",
    "fix_commit_details": {
      "sha": "9e8f32f1e86016733b603b50c31b97f472e8dabc",
      "commit_date": "2023-10-13T08:18:53Z",
      "author": {
        "login": "d00p",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "check for symlinks when required to be within customer-homedir",
        "length": 114,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 103,
        "additions": 78,
        "deletions": 25
      },
      "files": [
        {
          "filename": "customer_ftp.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -59,7 +59,7 @@\n \n \t\t$actions_links = [];\n \t\tif (CurrentUser::canAddResource('ftps')) {\n-\t\t\t$actions_links = [\n+\t\t\t$actions_links[] = [\n \t\t\t\t'href' => $linker->getLink(['section' => 'ftp', 'page' => 'accounts', 'action' => 'add']),\n \t\t\t\t'label' => lng('ftp.account_add')\n \t\t\t];"
        },
        {
          "filename": "lib/Froxlor/Api/Commands/DirOptions.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -93,7 +93,7 @@ public function add()\n \t\t// validation\n \t\t$path = FileDir::makeCorrectDir(Validate::validate($path, 'path', Validate::REGEX_DIR, '', [], true));\n \t\t$userpath = $path;\n-\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path);\n+\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path, $customer['documentroot']);\n \n \t\tif (!empty($error404path)) {\n \t\t\t$error404path = $this->correctErrorDocument($error404path, true);"
        },
        {
          "filename": "lib/Froxlor/Api/Commands/DirProtections.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -84,7 +84,7 @@ public function add()\n \n \t\t// validation\n \t\t$path = FileDir::makeCorrectDir(Validate::validate($path, 'path', Validate::REGEX_DIR, '', [], true));\n-\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path);\n+\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path, $customer['documentroot']);\n \t\t$username = Validate::validate($username, 'username', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_]+\\$?$/', '', [], true);\n \t\t$authname = Validate::validate($authname, 'directory_authname', '/^[a-zA-Z0-9][a-zA-Z0-9\\-_ ]+\\$?$/', '', [], true);\n \t\t$password = Validate::validate($password, 'password', '', '', [], true);"
        },
        {
          "filename": "lib/Froxlor/Api/Commands/Ftps.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -174,7 +174,7 @@ public function add()\n \t\t\t} elseif ($username == $password) {\n \t\t\t\tResponse::standardError('passwordshouldnotbeusername', '', true);\n \t\t\t} else {\n-\t\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path);\n+\t\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path, $customer['documentroot']);\n \t\t\t\t$cryptPassword = Crypt::makeCryptPassword($password, false, true);\n \n \t\t\t\t$stmt = Database::prepare(\"INSERT INTO `\" . TABLE_FTP_USERS . \"`\n@@ -469,7 +469,7 @@ public function update()\n \n \t\t// path update?\n \t\tif ($path != '') {\n-\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path);\n+\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path, $customer['documentroot']);\n \n \t\t\tif ($path != $result['homedir']) {\n \t\t\t\t$stmt = Database::prepare(\"UPDATE `\" . TABLE_FTP_USERS . \"`"
        },
        {
          "filename": "lib/Froxlor/Api/Commands/SubDomains.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -564,9 +564,9 @@ private function validateDomainDocumentRoot($path = null, $url = null, $customer\n \t\t\t// If path is empty or '/' and 'Use domain name as default value for DocumentRoot path' is enabled in settings,\n \t\t\t// set default path to subdomain or domain name\n \t\t\tif ((($path == '') || ($path == '/')) && Settings::Get('system.documentroot_use_default_value') == 1) {\n-\t\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $completedomain);\n+\t\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $completedomain, $customer['documentroot']);\n \t\t\t} else {\n-\t\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path);\n+\t\t\t\t$path = FileDir::makeCorrectDir($customer['documentroot'] . '/' . $path, $customer['documentroot']);\n \t\t\t}\n \t\t} else {\n \t\t\t// no it's not, create a redirect"
        },
        {
          "filename": "lib/Froxlor/Cron/Http/Apache.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -129,7 +129,7 @@ public function createIpPort()\n \t\t\t\tif ($row_ipsandports['ssl'] == '0' && Settings::Get('system.le_froxlor_redirect') == '1') {\n \t\t\t\t\t$is_redirect = true;\n \t\t\t\t\t// check whether froxlor uses Let's Encrypt and not cert is being generated yet\n-\t\t\t\t\t// or a renew is ongoing - disable redirect\n+\t\t\t\t\t// or a renewal is ongoing - disable redirect\n \t\t\t\t\tif (Settings::Get('system.le_froxlor_enabled') && ($this->froxlorVhostHasLetsEncryptCert() == false || $this->froxlorVhostLetsEncryptNeedsRenew())) {\n \t\t\t\t\t\t$this->virtualhosts_data[$vhosts_filename] .= '# temp. disabled ssl-redirect due to Let\\'s Encrypt certificate generation.' . PHP_EOL;\n \t\t\t\t\t\t$is_redirect = false;\n@@ -1255,7 +1255,7 @@ public function createFileDirOptions()\n \t\t\t\t\t// >=apache-2.4 enabled?\n \t\t\t\t\tif (Settings::Get('system.apache24') == '1') {\n \t\t\t\t\t\t$mypath_dir = new Directory($row_diroptions['path']);\n-\t\t\t\t\t\t// only create the require all granted if there is not active directory-protection\n+\t\t\t\t\t\t// only create the' require all granted' if there is no active directory-protection\n \t\t\t\t\t\t// for this path, as this would be the first require and therefore grant all access\n \t\t\t\t\t\tif ($mypath_dir->isUserProtected() == false) {\n \t\t\t\t\t\t\t$this->diroptions_data[$diroptions_filename] .= '  Require all granted' . \"\\n\";"
        },
        {
          "filename": "lib/Froxlor/FileDir.php",
          "status": "modified",
          "additions": 40,
          "deletions": 13,
          "patch": "@@ -26,10 +26,10 @@\n namespace Froxlor;\n \n use Exception;\n-use PDO;\n-use RecursiveCallbackFilterIterator;\n use Froxlor\\Customer\\Customer;\n use Froxlor\\Database\\Database;\n+use PDO;\n+use RecursiveCallbackFilterIterator;\n \n class FileDir\n {\n@@ -51,11 +51,12 @@ class FileDir\n \tpublic static function mkDirWithCorrectOwnership(\n \t\tstring $homeDir,\n \t\tstring $dirToCreate,\n-\t\tint $uid,\n-\t\tint $gid,\n-\t\tbool $placeindex = false,\n-\t\tbool $allow_notwithinhomedir = false\n-\t): bool {\n+\t\tint    $uid,\n+\t\tint    $gid,\n+\t\tbool   $placeindex = false,\n+\t\tbool   $allow_notwithinhomedir = false\n+\t): bool\n+\t{\n \t\tif ($homeDir != '' && $dirToCreate != '') {\n \t\t\t$homeDir = self::makeCorrectDir($homeDir);\n \t\t\t$dirToCreate = self::makeCorrectDir($dirToCreate);\n@@ -107,15 +108,16 @@ public static function mkDirWithCorrectOwnership(\n \t}\n \n \t/**\n-\t * Function which returns a correct dirname, means to add slashes at the beginning and at the end if there weren't\n-\t * some\n+\t * Returns a correct/secure dirname, means to add slashes at the beginning and at the end if there weren't\n+\t * some. If $fixes_homedir is specified,\n+\t *\n \t *\n \t * @param string $dir the path to correct\n \t *\n \t * @return string the corrected path\n \t * @throws Exception\n \t */\n-\tpublic static function makeCorrectDir(string $dir): string\n+\tpublic static function makeCorrectDir(string $dir, string $fixed_homedir = \"\"): string\n \t{\n \t\tif (strlen($dir) > 0) {\n \t\t\t$dir = trim($dir);\n@@ -125,6 +127,30 @@ public static function makeCorrectDir(string $dir): string\n \t\t\tif (substr($dir, 0, 1) != '/') {\n \t\t\t\t$dir = '/' . $dir;\n \t\t\t}\n+\n+\t\t\t// if given, check that the target path is within the $fixed_homedir\n+\t\t\t// by checking each folder for being a symlink and whether it targets\n+\t\t\t// the customers homedir or points outside of it\n+\t\t\tif (!empty($fixed_homedir)) {\n+\t\t\t\t$to_check = explode(\"/\", substr($dir, strlen($fixed_homedir) + 1), -1);\n+\t\t\t\t$check_dir = substr($fixed_homedir, 0, -1);\n+\t\t\t\t// Symlink check\n+\t\t\t\tforeach ($to_check as $sub_dir) {\n+\t\t\t\t\t$check_dir .= '/' . $sub_dir;\n+\t\t\t\t\tif (is_link($check_dir)) {\n+\t\t\t\t\t\t$original_target = $check_dir;\n+\t\t\t\t\t\t$check_dir = readlink($check_dir);\n+\t\t\t\t\t\tif (substr($check_dir, 0, strlen($fixed_homedir)) != $fixed_homedir) {\n+\t\t\t\t\t\t\tthrow new Exception(\"Found symlink pointing outside of customer home directory: \" . substr($original_target, strlen($fixed_homedir)));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// check for the path to be within the given homedir\n+\t\t\t\tif (substr($dir, 0, strlen($fixed_homedir)) != $fixed_homedir) {\n+\t\t\t\t\tthrow new Exception(\"Target path not within the required customer home directory\");\n+\t\t\t\t}\n+\t\t\t}\n+\n \t\t\treturn self::makeSecurePath($dir);\n \t\t}\n \t\tthrow new Exception(\"Cannot validate directory in \" . __FUNCTION__ . \" which is very dangerous.\");\n@@ -245,9 +271,10 @@ public static function safe_exec(string $exec_string, &$return_value = false, $a\n \tpublic static function storeDefaultIndex(\n \t\tstring $loginname,\n \t\tstring $destination,\n-\t\t$logger = null,\n-\t\tbool $force = false\n-\t) {\n+\t\t\t   $logger = null,\n+\t\tbool   $force = false\n+\t)\n+\t{\n \t\tif ($force || (int)Settings::Get('system.store_index_file_subs') == 1) {\n \t\t\t$result_stmt = Database::prepare(\"\n \t\t\tSELECT `t`.`value`, `c`.`email` AS `customer_email`, `a`.`email` AS `admin_email`, `c`.`loginname` AS `customer_login`, `a`.`loginname` AS `admin_login`"
        },
        {
          "filename": "tests/Ftps/FtpsTest.php",
          "status": "modified",
          "additions": 29,
          "deletions": 3,
          "patch": "@@ -1,9 +1,10 @@\n <?php\n-use PHPUnit\\Framework\\TestCase;\n \n use Froxlor\\Api\\Commands\\Admins;\n use Froxlor\\Api\\Commands\\Customers;\n use Froxlor\\Api\\Commands\\Ftps;\n+use Froxlor\\Froxlor;\n+use PHPUnit\\Framework\\TestCase;\n \n /**\n  *\n@@ -164,6 +165,31 @@ public function testCustomerFtpsAdd()\n \t\t$this->assertEquals($customer_userdata['documentroot'], $result['homedir']);\n \t}\n \n+\tpublic function testCustomerFtpsAddSymlinkOutsideHomedir()\n+\t{\n+\t\tglobal $admin_userdata;\n+\n+\t\t// get customer\n+\t\t$json_result = Customers::getLocal($admin_userdata, array(\n+\t\t\t'loginname' => 'test1'\n+\t\t))->get();\n+\t\t$customer_userdata = json_decode($json_result, true)['data']; //\n+\n+\t\t$customer_userdata['documentroot'] = sys_get_temp_dir() . '/';\n+\t\t@unlink($customer_userdata['documentroot'] . '/frx');\n+\t\tsymlink(Froxlor::getInstallDir(), $customer_userdata['documentroot'] . '/frx');\n+\n+\t\t$data = [\n+\t\t\t'ftp_password' => 'h4xXx0r',\n+\t\t\t'path' => '/frx/sub',\n+\t\t\t'ftp_description' => 'testing',\n+\t\t\t'sendinfomail' => TRAVIS_CI == 1 ? 0 : 1\n+\t\t];\n+\n+\t\t$this->expectExceptionMessage('Found symlink pointing outside of customer home directory: /frx');\n+\t\tFtps::getLocal($customer_userdata, $data)->add();\n+\t}\n+\n \tpublic function testCustomerFtpsAddNoMoreResources()\n \t{\n \t\tglobal $admin_userdata;\n@@ -178,7 +204,7 @@ public function testCustomerFtpsAddNoMoreResources()\n \n \t\t$this->expectExceptionCode(406);\n \t\t$this->expectExceptionMessage('No more resources available');\n-\t\t$json_result = Ftps::getLocal($customer_userdata)->add();\n+\t\tFtps::getLocal($customer_userdata)->add();\n \t}\n \n \tpublic function testAdminFtpsAddCustomerRequired()\n@@ -194,7 +220,7 @@ public function testAdminFtpsAddCustomerRequired()\n \n \t\t$this->expectExceptionCode(406);\n \t\t$this->expectExceptionMessage('Requested parameter \"loginname\" is empty where it should not be for \"Customers:get\"');\n-\t\t$json_result = Ftps::getLocal($admin_userdata, $data)->add();\n+\t\tFtps::getLocal($admin_userdata, $data)->add();\n \t}\n \n \tpublic function testCustomerFtpsEdit()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ec42003367df64c5645a9d5ee5bcd95c75a82b6c",
            "date": "2025-01-12T15:53:05Z",
            "author_login": "d00p"
          },
          {
            "sha": "fde43f80600f1035e1e3d2297411b666d805549a",
            "date": "2025-01-12T09:27:44Z",
            "author_login": "d00p"
          },
          {
            "sha": "a43d53d54034805e3e404702a01312fa0c40b623",
            "date": "2025-01-12T09:27:02Z",
            "author_login": "d00p"
          },
          {
            "sha": "3638dc08ea4fe55ce0d2458cdcb436cfb5697ed3",
            "date": "2024-12-24T08:34:59Z",
            "author_login": "d00p"
          },
          {
            "sha": "c2d166c86666f4c50c1402c1b3a2986ddabeee90",
            "date": "2024-12-19T07:59:00Z",
            "author_login": "d00p"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-59",
    "description": "Improper Link Resolution Before File Access in GitHub repository froxlor/froxlor prior to 2.1.0.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-10T01:15:07.623",
    "last_modified": "2024-11-21T08:43:04.910",
    "fix_date": "2023-10-13T08:18:53Z"
  },
  "references": [
    {
      "url": "https://github.com/froxlor/froxlor/commit/9e8f32f1e86016733b603b50c31b97f472e8dabc",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/aac0627e-e59d-476e-9385-edb7ff53758c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/froxlor/froxlor/commit/9e8f32f1e86016733b603b50c31b97f472e8dabc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/aac0627e-e59d-476e-9385-edb7ff53758c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:39.247342",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Froxlor",
    "owner": "froxlor",
    "created_at": "2012-03-06T15:14:46Z",
    "updated_at": "2025-01-12T15:57:15Z",
    "pushed_at": "2025-01-12T15:57:10Z",
    "size": 28867,
    "stars": 1651,
    "forks": 457,
    "open_issues": 35,
    "watchers": 1651,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "extras",
      "main"
    ],
    "languages": {
      "PHP": 3752037,
      "Twig": 153143,
      "HTML": 28494,
      "SCSS": 8015,
      "JavaScript": 942
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T14:34:15.893221"
  }
}