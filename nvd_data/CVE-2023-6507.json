{
  "cve_id": "CVE-2023-6507",
  "github_data": {
    "repository": "python/cpython",
    "fix_commit": "10e9bb13b8dcaa414645b9bd10718d8f7179e82b",
    "related_commits": [
      "10e9bb13b8dcaa414645b9bd10718d8f7179e82b",
      "85bbfa8a4bbdbb61a3a84fbd7cb29a4096ab8a06",
      "9fe7655c6ce0b8e9adc229daf681b6d30e6b1610",
      "10e9bb13b8dcaa414645b9bd10718d8f7179e82b",
      "85bbfa8a4bbdbb61a3a84fbd7cb29a4096ab8a06",
      "9fe7655c6ce0b8e9adc229daf681b6d30e6b1610"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "10e9bb13b8dcaa414645b9bd10718d8f7179e82b",
      "commit_date": "2023-12-09T00:18:35Z",
      "author": {
        "login": "gpshead",
        "type": "User",
        "stats": {
          "total_commits": 1465,
          "average_weekly_commits": 0.8138888888888889,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 350
        }
      },
      "commit_message": {
        "title": "gh-112334: Regression test that vfork is used when expected. (#112734)",
        "length": 758,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 116,
        "additions": 101,
        "deletions": 15
      },
      "files": [
        {
          "filename": ".github/workflows/posix-deps-apt.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -21,6 +21,7 @@ apt-get -yq install \\\n     libssl-dev \\\n     lzma \\\n     lzma-dev \\\n+    strace \\\n     tk-dev \\\n     uuid-dev \\\n     xvfb \\"
        },
        {
          "filename": "Lib/test/support/script_helper.py",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -92,13 +92,28 @@ def fail(self, cmd_line):\n # Executing the interpreter in a subprocess\n @support.requires_subprocess()\n def run_python_until_end(*args, **env_vars):\n+    \"\"\"Used to implement assert_python_*.\n+\n+    *args are the command line flags to pass to the python interpreter.\n+    **env_vars keyword arguments are environment variables to set on the process.\n+\n+    If __run_using_command= is supplied, it must be a list of\n+    command line arguments to prepend to the command line used.\n+    Useful when you want to run another command that should launch the\n+    python interpreter via its own arguments. [\"/bin/echo\", \"--\"] for\n+    example could print the unquoted python command line instead of\n+    run it.\n+    \"\"\"\n     env_required = interpreter_requires_environment()\n+    run_using_command = env_vars.pop('__run_using_command', None)\n     cwd = env_vars.pop('__cwd', None)\n     if '__isolated' in env_vars:\n         isolated = env_vars.pop('__isolated')\n     else:\n         isolated = not env_vars and not env_required\n     cmd_line = [sys.executable, '-X', 'faulthandler']\n+    if run_using_command:\n+        cmd_line = run_using_command + cmd_line\n     if isolated:\n         # isolated mode: ignore Python environment variables, ignore user\n         # site-packages, and don't add the current directory to sys.path"
        },
        {
          "filename": "Lib/test/test_subprocess.py",
          "status": "modified",
          "additions": 83,
          "deletions": 15,
          "patch": "@@ -1561,21 +1561,6 @@ def test_class_getitems(self):\n         self.assertIsInstance(subprocess.Popen[bytes], types.GenericAlias)\n         self.assertIsInstance(subprocess.CompletedProcess[str], types.GenericAlias)\n \n-    @unittest.skipIf(not sysconfig.get_config_var(\"HAVE_VFORK\"),\n-                     \"vfork() not enabled by configure.\")\n-    @mock.patch(\"subprocess._fork_exec\")\n-    def test__use_vfork(self, mock_fork_exec):\n-        self.assertTrue(subprocess._USE_VFORK)  # The default value regardless.\n-        mock_fork_exec.side_effect = RuntimeError(\"just testing args\")\n-        with self.assertRaises(RuntimeError):\n-            subprocess.run([sys.executable, \"-c\", \"pass\"])\n-        mock_fork_exec.assert_called_once()\n-        self.assertTrue(mock_fork_exec.call_args.args[-1])\n-        with mock.patch.object(subprocess, '_USE_VFORK', False):\n-            with self.assertRaises(RuntimeError):\n-                subprocess.run([sys.executable, \"-c\", \"pass\"])\n-            self.assertFalse(mock_fork_exec.call_args_list[-1].args[-1])\n-\n \n class RunFuncTestCase(BaseTestCase):\n     def run_python(self, code, **kwargs):\n@@ -3360,6 +3345,89 @@ def exit_handler():\n         self.assertEqual(out, b'')\n         self.assertIn(b\"preexec_fn not supported at interpreter shutdown\", err)\n \n+    @unittest.skipIf(not sysconfig.get_config_var(\"HAVE_VFORK\"),\n+                     \"vfork() not enabled by configure.\")\n+    @mock.patch(\"subprocess._fork_exec\")\n+    def test__use_vfork(self, mock_fork_exec):\n+        self.assertTrue(subprocess._USE_VFORK)  # The default value regardless.\n+        mock_fork_exec.side_effect = RuntimeError(\"just testing args\")\n+        with self.assertRaises(RuntimeError):\n+            subprocess.run([sys.executable, \"-c\", \"pass\"])\n+        mock_fork_exec.assert_called_once()\n+        # NOTE: These assertions are *ugly* as they require the last arg\n+        # to remain the have_vfork boolean. We really need to refactor away\n+        # from the giant \"wall of args\" internal C extension API.\n+        self.assertTrue(mock_fork_exec.call_args.args[-1])\n+        with mock.patch.object(subprocess, '_USE_VFORK', False):\n+            with self.assertRaises(RuntimeError):\n+                subprocess.run([sys.executable, \"-c\", \"pass\"])\n+            self.assertFalse(mock_fork_exec.call_args_list[-1].args[-1])\n+\n+    @unittest.skipIf(not sysconfig.get_config_var(\"HAVE_VFORK\"),\n+                     \"vfork() not enabled by configure.\")\n+    @unittest.skipIf(sys.platform != \"linux\", \"Linux only, requires strace.\")\n+    def test_vfork_used_when_expected(self):\n+        # This is a performance regression test to ensure we default to using\n+        # vfork() when possible.\n+        strace_binary = \"/usr/bin/strace\"\n+        # The only system calls we are interested in.\n+        strace_filter = \"--trace=clone,clone2,clone3,fork,vfork,exit,exit_group\"\n+        true_binary = \"/bin/true\"\n+        strace_command = [strace_binary, strace_filter]\n+\n+        try:\n+            does_strace_work_process = subprocess.run(\n+                    strace_command + [true_binary],\n+                    stderr=subprocess.PIPE,\n+                    stdout=subprocess.DEVNULL,\n+            )\n+            rc = does_strace_work_process.returncode\n+            stderr = does_strace_work_process.stderr\n+        except OSError:\n+            rc = -1\n+            stderr = \"\"\n+        if rc or (b\"+++ exited with 0 +++\" not in stderr):\n+            self.skipTest(\"strace not found or not working as expected.\")\n+\n+        with self.subTest(name=\"default_is_vfork\"):\n+            vfork_result = assert_python_ok(\n+                    \"-c\",\n+                    textwrap.dedent(f\"\"\"\\\n+                    import subprocess\n+                    subprocess.check_call([{true_binary!r}])\"\"\"),\n+                    __run_using_command=strace_command,\n+            )\n+            # Match both vfork() and clone(..., flags=...|CLONE_VFORK|...)\n+            self.assertRegex(vfork_result.err, br\"(?i)vfork\")\n+            # Do NOT check that fork() or other clones did not happen.\n+            # If the OS denys the vfork it'll fallback to plain fork().\n+\n+        # Test that each individual thing that would disable the use of vfork\n+        # actually disables it.\n+        for sub_name, preamble, sp_kwarg, expect_permission_error in (\n+                (\"!use_vfork\", \"subprocess._USE_VFORK = False\", \"\", False),\n+                (\"preexec\", \"\", \"preexec_fn=lambda: None\", False),\n+                (\"setgid\", \"\", f\"group={os.getgid()}\", True),\n+                (\"setuid\", \"\", f\"user={os.getuid()}\", True),\n+                (\"setgroups\", \"\", \"extra_groups=[]\", True),\n+        ):\n+            with self.subTest(name=sub_name):\n+                non_vfork_result = assert_python_ok(\n+                    \"-c\",\n+                    textwrap.dedent(f\"\"\"\\\n+                    import subprocess\n+                    {preamble}\n+                    try:\n+                        subprocess.check_call(\n+                                [{true_binary!r}], **dict({sp_kwarg}))\n+                    except PermissionError:\n+                        if not {expect_permission_error}:\n+                            raise\"\"\"),\n+                    __run_using_command=strace_command,\n+                )\n+                # Ensure neither vfork() or clone(..., flags=...|CLONE_VFORK|...).\n+                self.assertNotRegex(non_vfork_result.err, br\"(?i)vfork\")\n+\n \n @unittest.skipUnless(mswindows, \"Windows specific tests\")\n class Win32ProcessTestCase(BaseTestCase):"
        },
        {
          "filename": "Misc/NEWS.d/next/Tests/2023-12-04-15-56-11.gh-issue-112334.FFc9Ti.rst",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+Adds a regression test to verify that ``vfork()`` is used when expected by\n+:mod:`subprocess` on vfork enabled POSIX systems (Linux)."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0ef8d470b79889de065e94cecd0ee01e45037d3a",
            "date": "2025-01-26T03:43:23Z",
            "author_login": "AA-Turner"
          },
          {
            "sha": "3f2cfd0462e13368092a3edccdb2ebb5e57459f9",
            "date": "2025-01-25T18:20:09Z",
            "author_login": "kumaraditya303"
          },
          {
            "sha": "be98fda7c6698e8468afd528c864aca1f532af59",
            "date": "2025-01-25T17:19:48Z",
            "author_login": "vstinner"
          },
          {
            "sha": "7a54a653b718a70c96755f6fc39f01f5c582558a",
            "date": "2025-01-25T16:54:20Z",
            "author_login": "pablogsal"
          },
          {
            "sha": "e119526edface001ad7d7f70249a123c8a122d71",
            "date": "2025-01-25T13:36:58Z",
            "author_login": "hugovk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-269",
    "description": "An issue was found in CPython 3.12.0 `subprocess` module on POSIX platforms. The issue was fixed in CPython 3.12.1 and does not affect other stable releases.\n\nWhen using the `extra_groups=` parameter with an empty list as a value (ie `extra_groups=[]`) the logic regressed to not call `setgroups(0, NULL)` before calling `exec()`, thus not dropping the original processes' groups before starting the new process. There is no issue when the parameter isn't used or when any value is used besides an empty list.\n\nThis issue only impacts CPython processes run with sufficient privilege to make the `setgroups` system call (typically `root`).\n\n",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-08T19:15:08.440",
    "last_modified": "2024-11-21T08:43:59.623",
    "fix_date": "2023-12-09T00:18:35Z"
  },
  "references": [
    {
      "url": "https://github.com/python/cpython/commit/10e9bb13b8dcaa414645b9bd10718d8f7179e82b",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/85bbfa8a4bbdbb61a3a84fbd7cb29a4096ab8a06",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/9fe7655c6ce0b8e9adc229daf681b6d30e6b1610",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/112334",
      "source": "cna@python.org",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/AUL7QFHBLILGISS7U63B47AYSSGJJQZD/",
      "source": "cna@python.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/python/cpython/commit/10e9bb13b8dcaa414645b9bd10718d8f7179e82b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/85bbfa8a4bbdbb61a3a84fbd7cb29a4096ab8a06",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/9fe7655c6ce0b8e9adc229daf681b6d30e6b1610",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/112334",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/AUL7QFHBLILGISS7U63B47AYSSGJJQZD/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.550565",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "cpython",
    "owner": "python",
    "created_at": "2017-02-10T19:23:51Z",
    "updated_at": "2025-01-26T07:16:41Z",
    "pushed_at": "2025-01-26T03:54:26Z",
    "size": 655018,
    "stars": 64897,
    "forks": 30950,
    "open_issues": 8992,
    "watchers": 64897,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "3.13",
      "main"
    ],
    "languages": {
      "Python": 35718688,
      "C": 20306103,
      "C++": 463750,
      "M4": 257812,
      "HTML": 206335,
      "Batchfile": 78178,
      "Shell": 71664,
      "Roff": 45666,
      "Makefile": 36321,
      "Objective-C": 33051,
      "Common Lisp": 24579,
      "PLSQL": 22886,
      "PowerShell": 20323,
      "Rich Text Format": 6905,
      "JavaScript": 4245,
      "Kotlin": 3800,
      "Assembly": 2552,
      "DTrace": 2196,
      "CSS": 1325,
      "XSLT": 1174,
      "CMake": 327,
      "VBScript": 70
    },
    "commit_activity": {
      "total_commits_last_year": 5713,
      "avg_commits_per_week": 109.86538461538461,
      "days_active_last_year": 355
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:39:56.999072"
  }
}