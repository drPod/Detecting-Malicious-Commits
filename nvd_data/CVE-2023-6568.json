{
  "cve_id": "CVE-2023-6568",
  "github_data": {
    "repository": "mlflow/mlflow",
    "fix_commit": "28ff3f94994941e038f2172c6484b65dc4db6ca1",
    "related_commits": [
      "28ff3f94994941e038f2172c6484b65dc4db6ca1",
      "28ff3f94994941e038f2172c6484b65dc4db6ca1"
    ],
    "patch_url": "https://github.com/mlflow/mlflow/commit/28ff3f94994941e038f2172c6484b65dc4db6ca1.patch",
    "fix_commit_details": {
      "sha": "28ff3f94994941e038f2172c6484b65dc4db6ca1",
      "commit_date": "2023-11-30T00:38:30Z",
      "author": {
        "login": "B-Step62",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add Content-Type header validation (#10526)",
        "length": 99,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 81,
        "additions": 79,
        "deletions": 2
      },
      "files": [
        {
          "filename": "docs/source/auth/rest-api.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -12,6 +12,8 @@ The API is hosted under the ``/api`` route on the MLflow tracking server. For ex\n experiments on a tracking server hosted at ``http://localhost:5000``, access\n ``http://localhost:5000/api/2.0/mlflow/users/create``.\n \n+.. important::\n+    The MLflow REST API requires content type ``application/json`` for all POST requests.\n \n .. contents:: Table of Contents\n     :local:"
        },
        {
          "filename": "docs/source/rest-api.rst",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -11,14 +11,16 @@ The API is hosted under the ``/api`` route on the MLflow tracking server. For ex\n experiments on a tracking server hosted at ``http://localhost:5000``, make a POST request to\n ``http://localhost:5000/api/2.0/mlflow/experiments/search``.\n \n+.. important::\n+    The MLflow REST API requires content type ``application/json`` for all POST requests.\n+\n .. contents:: Table of Contents\n     :local:\n     :depth: 1\n \n ===========================\n \n \n-\n .. _mlflowMlflowServicecreateExperiment:\n \n Create Experiment"
        },
        {
          "filename": "mlflow/server/auth/__init__.py",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -762,7 +762,11 @@ def create_user():\n         user = store.create_user(username, password)\n         return make_response({\"user\": user.to_json()})\n     else:\n-        return make_response(f\"Invalid content type: '{content_type}'\", 400)\n+        message = (\n+            \"Invalid content type. Must be one of: \"\n+            \"application/x-www-form-urlencoded, application/json\"\n+        )\n+        return make_response(message, 400)\n \n \n @catch_mlflow_exception"
        },
        {
          "filename": "mlflow/server/handlers.py",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -91,6 +91,7 @@\n     UpdateExperiment,\n     UpdateRun,\n )\n+from mlflow.server.validation import _validate_content_type\n from mlflow.store.artifact.artifact_repo import MultipartUploadMixin\n from mlflow.store.artifact.artifact_repository_registry import get_artifact_repository\n from mlflow.store.db.db_types import DATABASE_ENGINES\n@@ -403,6 +404,7 @@ def _validate_param_against_schema(schema, param, value, proto_parsing_succeeded\n \n \n def _get_request_json(flask_request=request):\n+    _validate_content_type(flask_request, [\"application/json\"])\n     return flask_request.get_json(force=True, silent=True)\n \n \n@@ -1112,6 +1114,7 @@ def _default_history_bulk_impl():\n @_disable_if_artifacts_only\n def search_datasets_handler():\n     MAX_EXPERIMENT_IDS_PER_REQUEST = 20\n+    _validate_content_type(request, [\"application/json\"])\n     experiment_ids = request.json.get(\"experiment_ids\", [])\n     if not experiment_ids:\n         raise MlflowException(\n@@ -1179,6 +1182,8 @@ def assert_arg_exists(arg_name, arg):\n                 error_code=INVALID_PARAMETER_VALUE,\n             )\n \n+    _validate_content_type(request, [\"application/json\"])\n+\n     args = request.json\n     experiment_id = args.get(\"experiment_id\")\n     assert_arg_exists(\"experiment_id\", experiment_id)"
        },
        {
          "filename": "mlflow/server/validation.py",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+from typing import List\n+\n+from mlflow.exceptions import MlflowException\n+from mlflow.protos.databricks_pb2 import INVALID_PARAMETER_VALUE\n+\n+\n+def _validate_content_type(flask_request, allowed_content_types: List[str]):\n+    \"\"\"\n+    Validates that the request content type is one of the allowed content types.\n+\n+    :param flask_request: Flask request object (flask.request)\n+    :param allowed_content_types: A list of allowed content types\n+    \"\"\"\n+    if flask_request.method not in [\"POST\", \"PUT\"]:\n+        return\n+\n+    if flask_request.content_type is None:\n+        raise MlflowException(\n+            message=\"Bad Request. Content-Type header is missing.\",\n+            error_code=INVALID_PARAMETER_VALUE,\n+        )\n+\n+    # Remove any parameters e.g. \"application/json; charset=utf-8\" -> \"application/json\"\n+    content_type = flask_request.content_type.split(\";\")[0]\n+    if content_type not in allowed_content_types:\n+        message = f\"Bad Request. Content-Type must be one of {allowed_content_types}.\"\n+\n+        raise MlflowException(\n+            message=message,\n+            error_code=INVALID_PARAMETER_VALUE,\n+        )"
        },
        {
          "filename": "tests/server/test_handlers.py",
          "status": "modified",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -156,6 +156,7 @@ def test_all_model_registry_endpoints_available():\n def test_can_parse_json():\n     request = mock.MagicMock()\n     request.method = \"POST\"\n+    request.content_type = \"application/json\"\n     request.get_json = mock.MagicMock()\n     request.get_json.return_value = {\"name\": \"hello\"}\n     msg = _get_request_message(CreateExperiment(), flask_request=request)\n@@ -165,12 +166,23 @@ def test_can_parse_json():\n def test_can_parse_post_json_with_unknown_fields():\n     request = mock.MagicMock()\n     request.method = \"POST\"\n+    request.content_type = \"application/json\"\n     request.get_json = mock.MagicMock()\n     request.get_json.return_value = {\"name\": \"hello\", \"WHAT IS THIS FIELD EVEN\": \"DOING\"}\n     msg = _get_request_message(CreateExperiment(), flask_request=request)\n     assert msg.name == \"hello\"\n \n \n+def test_can_parse_post_json_with_content_type_params():\n+    request = mock.MagicMock()\n+    request.method = \"POST\"\n+    request.content_type = \"application/json; charset=utf-8\"\n+    request.get_json = mock.MagicMock()\n+    request.get_json.return_value = {\"name\": \"hello\"}\n+    msg = _get_request_message(CreateExperiment(), flask_request=request)\n+    assert msg.name == \"hello\"\n+\n+\n def test_can_parse_get_json_with_unknown_fields():\n     request = mock.MagicMock()\n     request.method = \"GET\"\n@@ -184,12 +196,33 @@ def test_can_parse_get_json_with_unknown_fields():\n def test_can_parse_json_string():\n     request = mock.MagicMock()\n     request.method = \"POST\"\n+    request.content_type = \"application/json\"\n     request.get_json = mock.MagicMock()\n     request.get_json.return_value = '{\"name\": \"hello2\"}'\n     msg = _get_request_message(CreateExperiment(), flask_request=request)\n     assert msg.name == \"hello2\"\n \n \n+def test_can_block_post_request_with_invalid_content_type():\n+    request = mock.MagicMock()\n+    request.method = \"POST\"\n+    request.content_type = \"text/plain\"\n+    request.get_json = mock.MagicMock()\n+    request.get_json.return_value = {\"name\": \"hello\"}\n+    with pytest.raises(MlflowException, match=r\"Bad Request. Content-Type\"):\n+        _get_request_message(CreateExperiment(), flask_request=request)\n+\n+\n+def test_can_block_post_request_with_missing_content_type():\n+    request = mock.MagicMock()\n+    request.method = \"POST\"\n+    request.content_type = None\n+    request.get_json = mock.MagicMock()\n+    request.get_json.return_value = {\"name\": \"hello\"}\n+    with pytest.raises(MlflowException, match=r\"Bad Request. Content-Type\"):\n+        _get_request_message(CreateExperiment(), flask_request=request)\n+\n+\n def test_search_runs_default_view_type(mock_get_request_message, mock_tracking_store):\n     \"\"\"\n     Search Runs default view type is filled in as ViewType.ACTIVE_ONLY"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ecbdd766af367b2f6a03a15eba937d13ea4f7c43",
            "date": "2025-01-14T11:54:46Z",
            "author_login": "dsuhinin"
          },
          {
            "sha": "49d28d67d9d25211d0b684ec9ad9c54670b3fee1",
            "date": "2025-01-14T10:10:09Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8778eedb11fbae7339c495634d65592a473118f8",
            "date": "2025-01-14T10:09:27Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8436d0b9db52152536930dee84bb5d1654964731",
            "date": "2025-01-14T09:29:15Z",
            "author_login": "B-Step62"
          },
          {
            "sha": "1ff5a0d5ba5e1f112513fb2edb0372387e5c407e",
            "date": "2025-01-14T08:32:07Z",
            "author_login": "TomeHirata"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "A reflected Cross-Site Scripting (XSS) vulnerability exists in the mlflow/mlflow repository, specifically within the handling of the Content-Type header in POST requests. An attacker can inject malicious JavaScript code into the Content-Type header, which is then improperly reflected back to the user without adequate sanitization or escaping, leading to arbitrary JavaScript execution in the context of the victim's browser. The vulnerability is present in the mlflow/server/auth/__init__.py file, where the user-supplied Content-Type header is directly injected into a Python formatted string and returned to the user, facilitating the XSS attack.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-07T05:15:09.347",
    "last_modified": "2024-11-21T08:44:07.173",
    "fix_date": "2023-11-30T00:38:30Z"
  },
  "references": [
    {
      "url": "https://github.com/mlflow/mlflow/commit/28ff3f94994941e038f2172c6484b65dc4db6ca1",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/816bdaaa-8153-4732-951e-b0d92fddf709",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mlflow/mlflow/commit/28ff3f94994941e038f2172c6484b65dc4db6ca1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/816bdaaa-8153-4732-951e-b0d92fddf709",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.537649",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mlflow",
    "owner": "mlflow",
    "created_at": "2018-06-05T16:05:58Z",
    "updated_at": "2025-01-14T14:06:06Z",
    "pushed_at": "2025-01-14T15:26:16Z",
    "size": 703840,
    "stars": 19235,
    "forks": 4317,
    "open_issues": 1689,
    "watchers": 19235,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "branch-0.5",
      "branch-0.7",
      "branch-0.8",
      "branch-0.9",
      "branch-0.9.1"
    ],
    "languages": {
      "Python": 12840682,
      "JavaScript": 9998107,
      "TypeScript": 3983905,
      "Java": 290984,
      "R": 211552,
      "Scala": 42315,
      "Shell": 28740,
      "HTML": 23632,
      "CSS": 18115,
      "Dockerfile": 1312,
      "Mako": 1004,
      "TSQL": 211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:33:00.445625"
  }
}