{
  "cve_id": "CVE-2023-6753",
  "github_data": {
    "repository": "mlflow/mlflow",
    "fix_commit": "1c6309f884798fbf56017a3cc808016869ee8de4",
    "related_commits": [
      "1c6309f884798fbf56017a3cc808016869ee8de4",
      "1c6309f884798fbf56017a3cc808016869ee8de4"
    ],
    "patch_url": "https://github.com/mlflow/mlflow/commit/1c6309f884798fbf56017a3cc808016869ee8de4.patch",
    "fix_commit_details": {
      "sha": "1c6309f884798fbf56017a3cc808016869ee8de4",
      "commit_date": "2023-12-08T15:15:35Z",
      "author": {
        "login": "BenWilson2",
        "type": "User",
        "stats": {
          "total_commits": 403,
          "average_weekly_commits": 1.1647398843930636,
          "total_additions": 196698,
          "total_deletions": 65622,
          "weeks_active": 121
        }
      },
      "commit_message": {
        "title": "Fix for windows traversal attack (#10647)",
        "length": 236,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 48,
        "deletions": 16
      },
      "files": [
        {
          "filename": "mlflow/data/http_dataset_source.py",
          "status": "modified",
          "additions": 20,
          "deletions": 16,
          "patch": "@@ -1,5 +1,4 @@\n import os\n-import posixpath\n import re\n from typing import Any, Dict\n from urllib.parse import urlparse\n@@ -41,6 +40,23 @@ def url(self):\n     def _get_source_type() -> str:\n         return \"http\"\n \n+    def _extract_filename(self, response) -> str:\n+        \"\"\"\n+        Extracts a filename from the Content-Disposition header or the URL's path.\n+        \"\"\"\n+        if content_disposition := response.headers.get(\"Content-Disposition\"):\n+            for match in re.finditer(r\"filename=(.+)\", content_disposition):\n+                filename = match[1].strip(\"'\\\"\")\n+                if _is_path(filename):\n+                    raise MlflowException.invalid_parameter_value(\n+                        f\"Invalid filename in Content-Disposition header: {filename}. \"\n+                        \"It must be a file name, not a path.\"\n+                    )\n+                return filename\n+\n+        # Extract basename from URL if no valid filename in Content-Disposition\n+        return os.path.basename(urlparse(self.url).path)\n+\n     def load(self, dst_path=None) -> str:\n         \"\"\"\n         Downloads the dataset source to the local filesystem.\n@@ -58,21 +74,9 @@ def load(self, dst_path=None) -> str:\n         )\n         augmented_raise_for_status(resp)\n \n-        path = urlparse(self.url).path\n-        content_disposition = resp.headers.get(\"Content-Disposition\")\n-        if content_disposition is not None and (\n-            file_name := next(re.finditer(r\"filename=(.+)\", content_disposition), None)\n-        ):\n-            # NB: If the filename is quoted, unquote it\n-            basename = file_name[1].strip(\"'\\\"\")\n-            if _is_path(basename):\n-                raise MlflowException.invalid_parameter_value(\n-                    f\"Invalid filename in Content-Disposition header: {basename}. \"\n-                    \"It must be a file name, not a path.\"\n-                )\n-        elif path is not None and len(posixpath.basename(path)) > 0:\n-            basename = posixpath.basename(path)\n-        else:\n+        basename = self._extract_filename(resp)\n+\n+        if not basename:\n             basename = \"dataset_source\"\n \n         if dst_path is None:"
        },
        {
          "filename": "tests/data/test_http_dataset_source.py",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -8,6 +8,7 @@\n from mlflow.data.dataset_source_registry import get_dataset_source_from_json, resolve_dataset_source\n from mlflow.data.http_dataset_source import HTTPDatasetSource\n from mlflow.exceptions import MlflowException\n+from mlflow.utils.os import is_windows\n from mlflow.utils.rest_utils import cloud_storage_http_request\n \n \n@@ -155,3 +156,30 @@ def download_with_mock_content_disposition_headers(*args, **kwargs):\n \n         with pytest.raises(MlflowException, match=\"Invalid filename in Content-Disposition header\"):\n             source.load()\n+\n+\n+@pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")\n+@pytest.mark.parametrize(\n+    \"filename\",\n+    [\n+        r\"..\\..\\poc.txt\",\n+        r\"Users\\User\\poc.txt\",\n+    ],\n+)\n+def test_source_load_with_content_disposition_header_invalid_filename_windows(filename):\n+    def download_with_mock_content_disposition_headers(*args, **kwargs):\n+        response = cloud_storage_http_request(*args, **kwargs)\n+        response.headers = {\"Content-Disposition\": f\"attachment; filename={filename}\"}\n+        return response\n+\n+    with mock.patch(\n+        \"mlflow.data.http_dataset_source.cloud_storage_http_request\",\n+        side_effect=download_with_mock_content_disposition_headers,\n+    ):\n+        source = HTTPDatasetSource(\n+            \"https://raw.githubusercontent.com/mlflow/mlflow/master/tests/datasets/winequality-red.csv\"\n+        )\n+\n+        # Expect an MlflowException for invalid filenames\n+        with pytest.raises(MlflowException, match=\"Invalid filename in Content-Disposition header\"):\n+            source.load()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ecbdd766af367b2f6a03a15eba937d13ea4f7c43",
            "date": "2025-01-14T11:54:46Z",
            "author_login": "dsuhinin"
          },
          {
            "sha": "49d28d67d9d25211d0b684ec9ad9c54670b3fee1",
            "date": "2025-01-14T10:10:09Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8778eedb11fbae7339c495634d65592a473118f8",
            "date": "2025-01-14T10:09:27Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8436d0b9db52152536930dee84bb5d1654964731",
            "date": "2025-01-14T09:29:15Z",
            "author_login": "B-Step62"
          },
          {
            "sha": "1ff5a0d5ba5e1f112513fb2edb0372387e5c407e",
            "date": "2025-01-14T08:32:07Z",
            "author_login": "TomeHirata"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-22",
    "description": "Path Traversal in GitHub repository mlflow/mlflow prior to 2.9.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-13T00:15:07.330",
    "last_modified": "2024-11-21T08:44:29.233",
    "fix_date": "2023-12-08T15:15:35Z"
  },
  "references": [
    {
      "url": "https://github.com/mlflow/mlflow/commit/1c6309f884798fbf56017a3cc808016869ee8de4",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/b397b83a-527a-47e7-b912-a12a17a6cfb4",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mlflow/mlflow/commit/1c6309f884798fbf56017a3cc808016869ee8de4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/b397b83a-527a-47e7-b912-a12a17a6cfb4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.563535",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mlflow",
    "owner": "mlflow",
    "created_at": "2018-06-05T16:05:58Z",
    "updated_at": "2025-01-14T14:06:06Z",
    "pushed_at": "2025-01-14T15:26:16Z",
    "size": 703840,
    "stars": 19235,
    "forks": 4317,
    "open_issues": 1689,
    "watchers": 19235,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "branch-0.5",
      "branch-0.7",
      "branch-0.8",
      "branch-0.9",
      "branch-0.9.1"
    ],
    "languages": {
      "Python": 12840682,
      "JavaScript": 9998107,
      "TypeScript": 3983905,
      "Java": 290984,
      "R": 211552,
      "Scala": 42315,
      "Shell": 28740,
      "HTML": 23632,
      "CSS": 18115,
      "Dockerfile": 1312,
      "Mako": 1004,
      "TSQL": 211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:33:00.445625"
  }
}