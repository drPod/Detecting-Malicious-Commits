{
  "cve_id": "CVE-2023-6974",
  "github_data": {
    "repository": "mlflow/mlflow",
    "fix_commit": "8174250f83352a04c2d42079f414759060458555",
    "related_commits": [
      "8174250f83352a04c2d42079f414759060458555",
      "8174250f83352a04c2d42079f414759060458555"
    ],
    "patch_url": "https://github.com/mlflow/mlflow/commit/8174250f83352a04c2d42079f414759060458555.patch",
    "fix_commit_details": {
      "sha": "8174250f83352a04c2d42079f414759060458555",
      "commit_date": "2023-12-13T03:43:32Z",
      "author": {
        "login": "daniellok-db",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add env var to disable redirects again (#10673)",
        "length": 102,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 187,
        "additions": 182,
        "deletions": 5
      },
      "files": [
        {
          "filename": "mlflow/environment_variables.py",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -493,3 +493,9 @@ def get(self):\n MLFLOW_MULTIPART_DOWNLOAD_CHUNK_SIZE = _EnvironmentVariable(\n     \"MLFLOW_MULTIPART_DOWNLOAD_CHUNK_SIZE\", int, 100 * 1024**2\n )\n+\n+#: Specifies whether or not to allow the MLflow server to follow redirects when\n+#: making HTTP requests. If set to False, the server will throw an exception if it\n+#: encounters a redirect response.\n+#: (default: ``True``)\n+MLFLOW_ALLOW_HTTP_REDIRECTS = _BooleanEnvironmentVariable(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", True)"
        },
        {
          "filename": "mlflow/utils/request_utils.py",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -165,6 +165,7 @@ def _get_http_response_with_retries(\n     backoff_jitter,\n     retry_codes,\n     raise_on_status=True,\n+    allow_redirects=None,\n     **kwargs,\n ):\n     \"\"\"\n@@ -187,7 +188,13 @@ def _get_http_response_with_retries(\n     session = _get_request_session(\n         max_retries, backoff_factor, backoff_jitter, retry_codes, raise_on_status\n     )\n-    return session.request(method, url, **kwargs)\n+\n+    # the environment variable is hardcoded here to avoid importing mlflow.\n+    # however, documentation is available in environment_variables.py\n+    env_value = os.getenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", \"true\").lower() in [\"true\", \"1\"]\n+    allow_redirects = env_value if allow_redirects is None else allow_redirects\n+\n+    return session.request(method, url, allow_redirects=allow_redirects, **kwargs)\n \n \n def cloud_storage_http_request("
        },
        {
          "filename": "tests/projects/test_databricks.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -449,6 +449,7 @@ def confirm_request_params(*args, **kwargs):\n         headers[\"Authorization\"] = \"Basic dXNlcjpwYXNz\"\n         assert args == (\"PUT\", \"host/clusters/list\")\n         assert kwargs == {\n+            \"allow_redirects\": True,\n             \"headers\": headers,\n             \"verify\": True,\n             \"json\": {\"a\": \"b\"},"
        },
        {
          "filename": "tests/store/artifact/test_databricks_artifact_repo.py",
          "status": "modified",
          "additions": 26,
          "deletions": 4,
          "patch": "@@ -258,6 +258,7 @@ def test_log_artifact_azure_with_headers(\n         request_mock.assert_called_with(\n             \"put\",\n             f\"{MOCK_AZURE_SIGNED_URI}?comp=blocklist\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n@@ -344,33 +345,38 @@ def test_log_artifact_adls_gen2_with_headers(\n         request_mock.assert_any_call(\n             \"put\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?resource=file\",\n+            allow_redirects=True,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_any_call(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=0\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_any_call(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=5\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_any_call(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=10\",\n+            allow_redirects=True,\n             data=ANY,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n         request_mock.assert_called_with(\n             \"patch\",\n             f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=flush&position=14\",\n+            allow_redirects=True,\n             headers=filtered_azure_headers,\n             timeout=None,\n         )\n@@ -402,12 +408,14 @@ def test_log_artifact_adls_gen2_flush_error(databricks_artifact_repo, test_file)\n             mock.call(\n                 \"put\",\n                 f\"{MOCK_ADLS_GEN2_SIGNED_URI}?resource=file\",\n+                allow_redirects=True,\n                 headers={},\n                 timeout=None,\n             ),\n             mock.call(\n                 \"patch\",\n                 f\"{MOCK_ADLS_GEN2_SIGNED_URI}?action=append&position=0&flush=true\",\n+                allow_redirects=True,\n                 data=ANY,\n                 headers={},\n                 timeout=None,\n@@ -434,7 +442,7 @@ def test_log_artifact_aws(databricks_artifact_repo, test_file, artifact_path, ex\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_AWS_SIGNED_URI, data=ANY, headers={}, timeout=None\n+            \"put\", MOCK_AWS_SIGNED_URI, allow_redirects=True, data=ANY, headers={}, timeout=None\n         )\n \n \n@@ -462,7 +470,12 @@ def test_log_artifact_aws_with_headers(\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_AWS_SIGNED_URI, data=ANY, headers=expected_headers, timeout=None\n+            \"put\",\n+            MOCK_AWS_SIGNED_URI,\n+            allow_redirects=True,\n+            data=ANY,\n+            headers=expected_headers,\n+            timeout=None,\n         )\n \n \n@@ -500,7 +513,7 @@ def test_log_artifact_gcp(databricks_artifact_repo, test_file, artifact_path, ex\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_GCP_SIGNED_URL, data=ANY, headers={}, timeout=None\n+            \"put\", MOCK_GCP_SIGNED_URL, allow_redirects=True, data=ANY, headers={}, timeout=None\n         )\n \n \n@@ -528,7 +541,12 @@ def test_log_artifact_gcp_with_headers(\n             GetCredentialsForWrite, MOCK_RUN_ID, [expected_location]\n         )\n         request_mock.assert_called_with(\n-            \"put\", MOCK_GCP_SIGNED_URL, data=ANY, headers=expected_headers, timeout=None\n+            \"put\",\n+            MOCK_GCP_SIGNED_URL,\n+            allow_redirects=True,\n+            data=ANY,\n+            headers=expected_headers,\n+            timeout=None,\n         )\n \n \n@@ -1294,6 +1312,7 @@ def test_multipart_upload(databricks_artifact_repo, large_file, mock_chunk_size)\n                 mock.call(\n                     \"put\",\n                     f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\",\n+                    allow_redirects=True,\n                     data=f.read(mock_chunk_size),\n                     headers={\"header\": f\"part-{i + 1}\"},\n                     timeout=None,\n@@ -1383,6 +1402,7 @@ def test_multipart_upload_retry_part_upload(databricks_artifact_repo, large_file\n                 mock.call(\n                     \"put\",\n                     f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\",\n+                    allow_redirects=True,\n                     data=f.read(mock_chunk_size),\n                     headers={\"header\": f\"part-{i + 1}\"},\n                     timeout=None,\n@@ -1441,6 +1461,7 @@ def test_multipart_upload_abort(databricks_artifact_repo, large_file, mock_chunk\n                 mock.call(\n                     \"put\",\n                     f\"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}\",\n+                    allow_redirects=True,\n                     data=f.read(mock_chunk_size),\n                     headers={\"header\": f\"part-{i + 1}\"},\n                     timeout=None,\n@@ -1459,6 +1480,7 @@ def test_multipart_upload_abort(databricks_artifact_repo, large_file, mock_chunk\n         assert abort_call == mock.call(\n             \"delete\",\n             f\"{MOCK_AWS_SIGNED_URI}uploadId=abort\",\n+            allow_redirects=True,\n             headers={\"header\": \"abort\"},\n             timeout=None,\n         )"
        },
        {
          "filename": "tests/store/tracking/test_rest_store.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -70,6 +70,7 @@ def mock_request(*args, **kwargs):\n         assert args == (\"POST\", \"https://hello/api/2.0/mlflow/experiments/search\")\n         kwargs = {k: v for k, v in kwargs.items() if v is not None}\n         assert kwargs == {\n+            \"allow_redirects\": True,\n             \"json\": {\"view_type\": \"ACTIVE_ONLY\"},\n             \"headers\": DefaultRequestHeaderProvider().request_headers(),\n             \"verify\": True,"
        },
        {
          "filename": "tests/utils/test_request_utils.py",
          "status": "modified",
          "additions": 102,
          "deletions": 0,
          "patch": "@@ -58,3 +58,105 @@ def test_download_chunk_incomplete_read(tmp_path):\n                 download_path=download_path,\n                 http_uri=\"https://example.com\",\n             )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"0\", \"false\", \"False\", \"FALSE\"])\n+def test_redirects_disabled_if_env_var_set(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\"GET\", \"http://localhost:5000\")\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=False,\n+            timeout=None,\n+        )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"1\", \"true\", \"True\", \"TRUE\"])\n+def test_redirects_enabled_if_env_var_set(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=True,\n+            timeout=None,\n+        )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"0\", \"false\", \"False\", \"FALSE\"])\n+def test_redirect_kwarg_overrides_env_value_false(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\", \"http://localhost:5000\", allow_redirects=True\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=True,\n+            timeout=None,\n+        )\n+\n+\n+@pytest.mark.parametrize(\"env_value\", [\"1\", \"true\", \"True\", \"TRUE\"])\n+def test_redirect_kwarg_overrides_env_value_true(monkeypatch, env_value):\n+    monkeypatch.setenv(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", env_value)\n+\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\", \"http://localhost:5000\", allow_redirects=False\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=False,\n+            timeout=None,\n+        )\n+\n+\n+def test_redirects_enabled_by_default():\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = request_utils.cloud_storage_http_request(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_once_with(\n+            \"GET\",\n+            \"http://localhost:5000\",\n+            allow_redirects=True,\n+            timeout=None,\n+        )"
        },
        {
          "filename": "tests/utils/test_rest_utils.py",
          "status": "modified",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -116,6 +116,7 @@ def test_http_request_hostonly(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -133,6 +134,7 @@ def test_http_request_cleans_hostname(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -151,6 +153,7 @@ def test_http_request_with_basic_auth(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=headers,\n         timeout=120,\n@@ -183,6 +186,7 @@ def __eq__(self, other):\n     request.assert_called_once_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=mock.ANY,\n         headers=mock.ANY,\n         timeout=mock.ANY,\n@@ -207,6 +211,7 @@ def test_http_request_with_auth(fetch_auth, request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=mock.ANY,\n         headers=mock.ANY,\n         timeout=mock.ANY,\n@@ -226,6 +231,7 @@ def test_http_request_with_token(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=headers,\n         timeout=120,\n@@ -242,6 +248,7 @@ def test_http_request_with_insecure(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=False,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -258,6 +265,7 @@ def test_http_request_client_cert_path(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         cert=\"/some/path\",\n         headers=DefaultRequestHeaderProvider().request_headers(),\n@@ -275,6 +283,7 @@ def test_http_request_server_cert_path(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=\"/some/path\",\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -295,6 +304,7 @@ def test_http_request_with_content_type_header(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=True,\n         headers=headers,\n         timeout=120,\n@@ -320,6 +330,7 @@ def test_http_request_request_headers(request):\n         request.assert_called_with(\n             \"GET\",\n             \"http://my-host/my/endpoint\",\n+            allow_redirects=True,\n             verify=\"/some/path\",\n             headers={**DefaultRequestHeaderProvider().request_headers(), \"test\": \"header\"},\n             timeout=120,\n@@ -356,6 +367,7 @@ def test_http_request_request_headers_user_agent(request):\n         request.assert_called_with(\n             \"GET\",\n             \"http://my-host/my/endpoint\",\n+            allow_redirects=True,\n             verify=\"/some/path\",\n             headers=expected_headers,\n             timeout=120,\n@@ -393,6 +405,7 @@ def test_http_request_request_headers_user_agent_and_extra_header(request):\n         request.assert_called_with(\n             \"GET\",\n             \"http://my-host/my/endpoint\",\n+            allow_redirects=True,\n             verify=\"/some/path\",\n             headers=expected_headers,\n             timeout=120,\n@@ -440,6 +453,7 @@ def test_http_request_wrapper(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=False,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -450,6 +464,7 @@ def test_http_request_wrapper(request):\n     request.assert_called_with(\n         \"GET\",\n         \"http://my-host/my/endpoint\",\n+        allow_redirects=True,\n         verify=False,\n         headers=DefaultRequestHeaderProvider().request_headers(),\n         timeout=120,\n@@ -560,3 +575,26 @@ def test_augmented_raise_for_status():\n     assert e.value.response == response\n     assert e.value.request == response.request\n     assert response.text in str(e.value)\n+\n+\n+def test_provide_redirect_kwarg():\n+    with mock.patch(\"requests.Session.request\") as mock_request:\n+        mock_request.return_value.status_code = 302\n+        mock_request.return_value.text = \"mock response\"\n+\n+        response = http_request(\n+            MlflowHostCreds(\"http://my-host\"),\n+            \"/my/endpoint\",\n+            \"GET\",\n+            allow_redirects=False,\n+        )\n+\n+        assert response.text == \"mock response\"\n+        mock_request.assert_called_with(\n+            \"GET\",\n+            \"http://my-host/my/endpoint\",\n+            allow_redirects=False,\n+            headers=mock.ANY,\n+            verify=mock.ANY,\n+            timeout=120,\n+        )"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ecbdd766af367b2f6a03a15eba937d13ea4f7c43",
            "date": "2025-01-14T11:54:46Z",
            "author_login": "dsuhinin"
          },
          {
            "sha": "49d28d67d9d25211d0b684ec9ad9c54670b3fee1",
            "date": "2025-01-14T10:10:09Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8778eedb11fbae7339c495634d65592a473118f8",
            "date": "2025-01-14T10:09:27Z",
            "author_login": "mlflow-automation"
          },
          {
            "sha": "8436d0b9db52152536930dee84bb5d1654964731",
            "date": "2025-01-14T09:29:15Z",
            "author_login": "B-Step62"
          },
          {
            "sha": "1ff5a0d5ba5e1f112513fb2edb0372387e5c407e",
            "date": "2025-01-14T08:32:07Z",
            "author_login": "TomeHirata"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-918",
    "description": "A malicious user could use this issue to access internal HTTP(s) servers and in the worst case (ie: aws instance) it could be abuse to get a remote code execution on the victim machine.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-12-20T06:15:45.160",
    "last_modified": "2024-11-21T08:44:57.340",
    "fix_date": "2023-12-13T03:43:32Z"
  },
  "references": [
    {
      "url": "https://github.com/mlflow/mlflow/commit/8174250f83352a04c2d42079f414759060458555",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/438b0524-da0e-4d08-976a-6f270c688393",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mlflow/mlflow/commit/8174250f83352a04c2d42079f414759060458555",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/438b0524-da0e-4d08-976a-6f270c688393",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:41.587515",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mlflow",
    "owner": "mlflow",
    "created_at": "2018-06-05T16:05:58Z",
    "updated_at": "2025-01-14T14:06:06Z",
    "pushed_at": "2025-01-14T15:26:16Z",
    "size": 703840,
    "stars": 19235,
    "forks": 4317,
    "open_issues": 1689,
    "watchers": 19235,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "branch-0.5",
      "branch-0.7",
      "branch-0.8",
      "branch-0.9",
      "branch-0.9.1"
    ],
    "languages": {
      "Python": 12840682,
      "JavaScript": 9998107,
      "TypeScript": 3983905,
      "Java": 290984,
      "R": 211552,
      "Scala": 42315,
      "Shell": 28740,
      "HTML": 23632,
      "CSS": 18115,
      "Dockerfile": 1312,
      "Mako": 1004,
      "TSQL": 211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:33:00.445625"
  }
}