{
  "cve_id": "CVE-2023-6981",
  "github_data": {
    "repository": "wp-sms/wp-sms",
    "fix_commit": "6656de201efe67c7983102c344a546eed976a819",
    "related_commits": [
      "6656de201efe67c7983102c344a546eed976a819",
      "6656de201efe67c7983102c344a546eed976a819"
    ],
    "patch_url": "https://github.com/wp-sms/wp-sms/commit/6656de201efe67c7983102c344a546eed976a819.patch",
    "fix_commit_details": {
      "sha": "6656de201efe67c7983102c344a546eed976a819",
      "commit_date": "2023-12-23T12:23:12Z",
      "author": {
        "login": "ighorbani",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix XSS vulnerability in subscribers page",
        "length": 41,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 26,
        "additions": 17,
        "deletions": 9
      },
      "files": [
        {
          "filename": "includes/admin/subscribers/class-wpsms-subscribers-table.php",
          "status": "modified",
          "additions": 17,
          "deletions": 9,
          "patch": "@@ -168,12 +168,13 @@ public function get_bulk_actions()\n     public function process_bulk_action()\n     {\n         $current_action = $this->current_action();\n-        //Detect when a bulk action is being triggered...\n+        // Detect when a bulk action is being triggered\n+\n         // Search action\n         if (isset($_GET['s']) and $_GET['s']) {\n             $metaValue   = Helper::prepareMobileNumberQuery($this->db->esc_like($_GET['s']));\n             $metaValue   = \"'\" . implode(\"','\", $metaValue) . \"'\";\n-            $prepare     = $this->db->prepare(\"SELECT * from `{$this->tb_prefix}sms_subscribes` WHERE name LIKE %s OR mobile IN ({$metaValue})\", '%' . $this->db->esc_like($_GET['s']) . '%');\n+            $prepare     = $this->db->prepare(\"SELECT * FROM `{$this->tb_prefix}sms_subscribes` WHERE name LIKE %s OR mobile IN ({$metaValue})\", '%' . $this->db->esc_like($_GET['s']) . '%');\n             $this->data  = $this->get_data($prepare);\n             $this->count = $this->get_total($prepare);\n         }\n@@ -312,12 +313,13 @@ public function usort_reorder($a, $b)\n         return ($order === 'asc') ? $result : -$result; //Send final sort direction to usort\n     }\n \n-    //set $per_page item as int number\n+    // Set $per_page item as int number\n     public function get_data($query = '')\n     {\n         $page_number = ($this->get_pagenum() - 1) * $this->limit;\n         $orderby     = \"ORDER BY {$this->tb_prefix}sms_subscribes.date DESC\";\n         $where       = \"\";\n+        $params      = array();\n \n         if (isset($_REQUEST['orderby'])) {\n             $orderby = \"ORDER BY {$this->tb_prefix}sms_subscribes.{$_REQUEST['orderby']} {$_REQUEST['order']}\";\n@@ -326,29 +328,35 @@ public function get_data($query = '')\n         if (!$query) {\n             if (isset($_GET['group_id']) && $_GET['group_id']) {\n                 $group_id = sanitize_text_field($_GET['group_id']);\n-                $where    = \"WHERE group_ID = {$group_id}\";\n+                $where    = \"WHERE group_ID = %d\";\n+                $params[] = intval($group_id);\n             }\n \n             if (isset($_GET['country_code']) && $_GET['country_code']) {\n                 $country_code = sanitize_text_field($_GET['country_code']);\n \n                 if ($where) {\n-                    $where .= \" AND mobile LIKE '{$country_code}%'\";\n+                    $where .= \" AND mobile LIKE %s\";\n                 } else {\n-                    $where = \"WHERE mobile LIKE '{$country_code}%'\";\n+                    $where = \"WHERE mobile LIKE %s\";\n                 }\n+\n+                $params[] = $country_code . '%';\n             }\n-            $query = $this->db->prepare(\"SELECT * FROM {$this->tb_prefix}sms_subscribes {$where} {$orderby} LIMIT %d OFFSET %d\", $this->limit, $page_number);\n+\n+            $params[] = $this->limit;\n+            $params[] = $page_number;\n+\n+            $query = $this->db->prepare(\"SELECT * FROM {$this->tb_prefix}sms_subscribes {$where} {$orderby} LIMIT %d OFFSET %d\", $params);\n         } else {\n             $query .= $this->db->prepare(\" LIMIT %d OFFSET %d\", $this->limit, $page_number);\n         }\n \n         $result = $this->db->get_results($query, ARRAY_A);\n-\n         return $result;\n     }\n \n-    //get total items on different Queries\n+    // Get total items on different Queries\n     public function get_total($query = '')\n     {\n         if (!$query) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ea1eda5ee625e91e88074ddbd59b2d3237411ea7",
            "date": "2024-12-23T09:11:52Z",
            "author_login": "mostafasoufi"
          },
          {
            "sha": "28d2753ed3d51bbf0f3f90143043efdbf356f538",
            "date": "2024-12-23T09:11:18Z",
            "author_login": "mostafasoufi"
          },
          {
            "sha": "7b717947b118fdb6e3cd26bdfc0bc1bbcb75b3fe",
            "date": "2024-12-23T06:37:39Z",
            "author_login": "mostafasoufi"
          },
          {
            "sha": "b81e5cc3d7d0b6c9c8d106f5eeae110a9fcc357f",
            "date": "2024-12-22T06:28:18Z",
            "author_login": "amirfallahii"
          },
          {
            "sha": "3f126ba64cef0f52a7816b9e03bae73a67b074b6",
            "date": "2024-12-19T04:23:56Z",
            "author_login": "mostafasoufi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-89",
    "description": "The WP SMS \u2013 Messaging & SMS Notification for WordPress, WooCommerce, GravityForms, etc plugin for WordPress is vulnerable to SQL Injection via the 'group_id' parameter in all versions up to, and including, 6.5 due to insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query.  This makes it possible for authenticated attackers, with contributor-level access and above, to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database. This can leveraged to achieve Reflected Cross-site Scripting.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-03T06:15:47.663",
    "last_modified": "2024-12-17T18:23:16.780",
    "fix_date": "2023-12-23T12:23:12Z"
  },
  "references": [
    {
      "url": "https://github.com/wp-sms/wp-sms/commit/6656de201efe67c7983102c344a546eed976a819",
      "source": "security@wordfence.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3015006%40wp-sms&new=3015006%40wp-sms&sfp_email=&sfph_mail=",
      "source": "security@wordfence.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/b8f53053-5150-4fba-b8d6-3d6c9df32c69?source=cve",
      "source": "security@wordfence.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wp-sms/wp-sms/commit/6656de201efe67c7983102c344a546eed976a819",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3015006%40wp-sms&new=3015006%40wp-sms&sfp_email=&sfph_mail=",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/b8f53053-5150-4fba-b8d6-3d6c9df32c69?source=cve",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.128338",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wp-sms",
    "owner": "wp-sms",
    "created_at": "2015-09-21T16:56:47Z",
    "updated_at": "2024-12-23T09:12:06Z",
    "pushed_at": "2025-01-11T21:42:45Z",
    "size": 36356,
    "stars": 91,
    "forks": 74,
    "open_issues": 8,
    "watchers": 91,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "PHP": 2083185,
      "JavaScript": 240927,
      "SCSS": 203394,
      "CSS": 30343
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:17:15.808721"
  }
}