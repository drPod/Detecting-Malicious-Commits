{
  "cve_id": "CVE-2024-0397",
  "github_data": {
    "repository": "python/cpython",
    "fix_commit": "01c37f1d0714f5822d34063ca7180b595abf589d",
    "related_commits": [
      "01c37f1d0714f5822d34063ca7180b595abf589d",
      "29c97287d205bf2f410f4895ebce3f43b5160524",
      "37324b421b72b7bc9934e27aba85d48d4773002e",
      "542f3272f56f31ed04e74c40635a913fbc12d286",
      "b228655c227b2ca298a8ffac44d14ce3d22f6faa",
      "bce693111bff906ccf9281c22371331aaff766ab",
      "01c37f1d0714f5822d34063ca7180b595abf589d",
      "29c97287d205bf2f410f4895ebce3f43b5160524",
      "37324b421b72b7bc9934e27aba85d48d4773002e",
      "542f3272f56f31ed04e74c40635a913fbc12d286",
      "b228655c227b2ca298a8ffac44d14ce3d22f6faa",
      "bce693111bff906ccf9281c22371331aaff766ab"
    ],
    "patch_url": "https://github.com/python/cpython/commit/01c37f1d0714f5822d34063ca7180b595abf589d.patch",
    "fix_commit_details": {
      "sha": "01c37f1d0714f5822d34063ca7180b595abf589d",
      "commit_date": "2024-02-20T16:34:44Z",
      "author": {
        "login": "miss-islington",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[3.11] gh-114572: Fix locking in cert_store_stats and get_ca_certs (GH-114573) (#115549)",
        "length": 865,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 69,
        "additions": 64,
        "deletions": 5
      },
      "files": [
        {
          "filename": "Misc/NEWS.d/next/Security/2024-01-26-22-14-09.gh-issue-114572.t1QMQD.rst",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+:meth:`ssl.SSLContext.cert_store_stats` and\n+:meth:`ssl.SSLContext.get_ca_certs` now correctly lock access to the\n+certificate store, when the :class:`ssl.SSLContext` is shared across\n+multiple threads."
        },
        {
          "filename": "Modules/_ssl.c",
          "status": "modified",
          "additions": 60,
          "deletions": 5,
          "patch": "@@ -4529,6 +4529,50 @@ set_sni_callback(PySSLContext *self, PyObject *arg, void *c)\n     return 0;\n }\n \n+#if OPENSSL_VERSION_NUMBER < 0x30300000L\n+static X509_OBJECT *x509_object_dup(const X509_OBJECT *obj)\n+{\n+    int ok;\n+    X509_OBJECT *ret = X509_OBJECT_new();\n+    if (ret == NULL) {\n+        return NULL;\n+    }\n+    switch (X509_OBJECT_get_type(obj)) {\n+        case X509_LU_X509:\n+            ok = X509_OBJECT_set1_X509(ret, X509_OBJECT_get0_X509(obj));\n+            break;\n+        case X509_LU_CRL:\n+            /* X509_OBJECT_get0_X509_CRL was not const-correct prior to 3.0.*/\n+            ok = X509_OBJECT_set1_X509_CRL(\n+                ret, X509_OBJECT_get0_X509_CRL((X509_OBJECT *)obj));\n+            break;\n+        default:\n+            /* We cannot duplicate unrecognized types in a polyfill, but it is\n+             * safe to leave an empty object. The caller will ignore it. */\n+            ok = 1;\n+            break;\n+    }\n+    if (!ok) {\n+        X509_OBJECT_free(ret);\n+        return NULL;\n+    }\n+    return ret;\n+}\n+\n+static STACK_OF(X509_OBJECT) *\n+X509_STORE_get1_objects(X509_STORE *store)\n+{\n+    STACK_OF(X509_OBJECT) *ret;\n+    if (!X509_STORE_lock(store)) {\n+        return NULL;\n+    }\n+    ret = sk_X509_OBJECT_deep_copy(X509_STORE_get0_objects(store),\n+                                   x509_object_dup, X509_OBJECT_free);\n+    X509_STORE_unlock(store);\n+    return ret;\n+}\n+#endif\n+\n PyDoc_STRVAR(PySSLContext_sni_callback_doc,\n \"Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension.\\n\\\n \\n\\\n@@ -4558,7 +4602,12 @@ _ssl__SSLContext_cert_store_stats_impl(PySSLContext *self)\n     int x509 = 0, crl = 0, ca = 0, i;\n \n     store = SSL_CTX_get_cert_store(self->ctx);\n-    objs = X509_STORE_get0_objects(store);\n+    objs = X509_STORE_get1_objects(store);\n+    if (objs == NULL) {\n+        PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");\n+        return NULL;\n+    }\n+\n     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {\n         obj = sk_X509_OBJECT_value(objs, i);\n         switch (X509_OBJECT_get_type(obj)) {\n@@ -4572,12 +4621,11 @@ _ssl__SSLContext_cert_store_stats_impl(PySSLContext *self)\n                 crl++;\n                 break;\n             default:\n-                /* Ignore X509_LU_FAIL, X509_LU_RETRY, X509_LU_PKEY.\n-                 * As far as I can tell they are internal states and never\n-                 * stored in a cert store */\n+                /* Ignore unrecognized types. */\n                 break;\n         }\n     }\n+    sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);\n     return Py_BuildValue(\"{sisisi}\", \"x509\", x509, \"crl\", crl,\n         \"x509_ca\", ca);\n }\n@@ -4609,7 +4657,12 @@ _ssl__SSLContext_get_ca_certs_impl(PySSLContext *self, int binary_form)\n     }\n \n     store = SSL_CTX_get_cert_store(self->ctx);\n-    objs = X509_STORE_get0_objects(store);\n+    objs = X509_STORE_get1_objects(store);\n+    if (objs == NULL) {\n+        PyErr_SetString(PyExc_MemoryError, \"failed to query cert store\");\n+        goto error;\n+    }\n+\n     for (i = 0; i < sk_X509_OBJECT_num(objs); i++) {\n         X509_OBJECT *obj;\n         X509 *cert;\n@@ -4637,9 +4690,11 @@ _ssl__SSLContext_get_ca_certs_impl(PySSLContext *self, int binary_form)\n         }\n         Py_CLEAR(ci);\n     }\n+    sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);\n     return rlist;\n \n   error:\n+    sk_X509_OBJECT_pop_free(objs, X509_OBJECT_free);\n     Py_XDECREF(ci);\n     Py_XDECREF(rlist);\n     return NULL;"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d786ac7f584f23c3206f4c86032bdabe83c17b51",
            "date": "2025-01-14T15:31:13Z",
            "author_login": "vstinner"
          },
          {
            "sha": "43ef9587ae869fd11711a3bb126e65afe9177342",
            "date": "2025-01-14T15:29:21Z",
            "author_login": "vstinner"
          },
          {
            "sha": "1598e18a659ef3a533caa0a79a489a3ed1d80bdd",
            "date": "2025-01-14T15:17:24Z",
            "author_login": "rffontenelle"
          },
          {
            "sha": "7fc0f86098c162e0230d5ef5ea62a883e41f9411",
            "date": "2025-01-14T15:12:21Z",
            "author_login": "hugovk"
          },
          {
            "sha": "aa805887cf23e5bff1598615d4f91369835f016f",
            "date": "2025-01-14T15:10:53Z",
            "author_login": "hugovk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:H",
    "cwe_id": "CWE-362",
    "description": "A defect was discovered in the Python \u201cssl\u201d module where there is a memory\nrace condition with the ssl.SSLContext methods \u201ccert_store_stats()\u201d and\n\u201cget_ca_certs()\u201d. The race condition can be triggered if the methods are\ncalled at the same time as certificates are loaded into the SSLContext,\nsuch as during the TLS handshake with a certificate directory configured.\nThis issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-06-17T16:15:10.217",
    "last_modified": "2024-11-21T08:46:29.733",
    "fix_date": "2024-02-20T16:34:44Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/06/17/2",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/01c37f1d0714f5822d34063ca7180b595abf589d",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/29c97287d205bf2f410f4895ebce3f43b5160524",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/37324b421b72b7bc9934e27aba85d48d4773002e",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/542f3272f56f31ed04e74c40635a913fbc12d286",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/b228655c227b2ca298a8ffac44d14ce3d22f6faa",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/bce693111bff906ccf9281c22371331aaff766ab",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/114572",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/pull/114573",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/BMAK5BCGKYWNJOACVUSLUF6SFGBIM4VP/",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/06/17/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/01c37f1d0714f5822d34063ca7180b595abf589d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/29c97287d205bf2f410f4895ebce3f43b5160524",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/37324b421b72b7bc9934e27aba85d48d4773002e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/542f3272f56f31ed04e74c40635a913fbc12d286",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/b228655c227b2ca298a8ffac44d14ce3d22f6faa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/bce693111bff906ccf9281c22371331aaff766ab",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/114572",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/pull/114573",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/BMAK5BCGKYWNJOACVUSLUF6SFGBIM4VP/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.834403",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cpython",
    "owner": "python",
    "created_at": "2017-02-10T19:23:51Z",
    "updated_at": "2025-01-14T11:40:35Z",
    "pushed_at": "2025-01-14T11:26:26Z",
    "size": 657526,
    "stars": 64721,
    "forks": 30871,
    "open_issues": 8974,
    "watchers": 64721,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "3.13",
      "main"
    ],
    "languages": {
      "Python": 35947988,
      "C": 20215174,
      "C++": 463381,
      "M4": 257753,
      "HTML": 206335,
      "Batchfile": 78178,
      "Shell": 71664,
      "Roff": 45666,
      "Makefile": 36295,
      "Objective-C": 33051,
      "Common Lisp": 24579,
      "PLSQL": 22886,
      "PowerShell": 20323,
      "Rich Text Format": 6905,
      "JavaScript": 4245,
      "Kotlin": 3800,
      "Assembly": 2552,
      "DTrace": 2196,
      "CSS": 1325,
      "XSLT": 1174,
      "CMake": 327,
      "VBScript": 70
    },
    "commit_activity": {
      "total_commits_last_year": 5718,
      "avg_commits_per_week": 109.96153846153847,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:09:03.245623"
  }
}