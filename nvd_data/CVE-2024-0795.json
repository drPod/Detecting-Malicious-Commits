{
  "cve_id": "CVE-2024-0795",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "9a237db3d1f66cdbcf5079599258f5fb251c5564",
    "related_commits": [
      "9a237db3d1f66cdbcf5079599258f5fb251c5564",
      "9a237db3d1f66cdbcf5079599258f5fb251c5564"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "9a237db3d1f66cdbcf5079599258f5fb251c5564",
      "commit_date": "2024-01-22T22:14:01Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": {
          "total_commits": 928,
          "average_weekly_commits": 10.545454545454545,
          "total_additions": 195202,
          "total_deletions": 87044,
          "weeks_active": 82
        }
      },
      "commit_message": {
        "title": "Implement total permission overhaul (#629)",
        "length": 547,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 985,
        "additions": 611,
        "deletions": 374
      },
      "files": [
        {
          "filename": "frontend/src/App.jsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -81,7 +81,7 @@ export default function App() {\n               />\n               <Route\n                 path=\"/settings/api-keys\"\n-                element={<ManagerRoute Component={GeneralApiKeys} />}\n+                element={<AdminRoute Component={GeneralApiKeys} />}\n               />\n               <Route\n                 path=\"/settings/workspace-chats\""
        },
        {
          "filename": "frontend/src/components/SettingsSidebar/index.jsx",
          "status": "modified",
          "additions": 138,
          "deletions": 75,
          "patch": "@@ -62,79 +62,97 @@ export default function SettingsSidebar() {\n           <div className=\"h-[100%] flex flex-col w-full justify-between pt-4 overflow-y-hidden\">\n             <div className=\"h-auto sidebar-items\">\n               <div className=\"flex flex-col gap-y-2 h-[65vh] pb-8 overflow-y-scroll no-scroll\">\n-                {/* Admin/manager Multi-user Settings */}\n-                {!!user && user?.role !== \"default\" && (\n-                  <>\n-                    <Option\n-                      href={paths.settings.system()}\n-                      btnText=\"System Preferences\"\n-                      icon={<SquaresFour className=\"h-5 w-5 flex-shrink-0\" />}\n-                    />\n-                    <Option\n-                      href={paths.settings.invites()}\n-                      btnText=\"Invitation\"\n-                      icon={\n-                        <EnvelopeSimple className=\"h-5 w-5 flex-shrink-0\" />\n-                      }\n-                    />\n-                    <Option\n-                      href={paths.settings.users()}\n-                      btnText=\"Users\"\n-                      icon={<Users className=\"h-5 w-5 flex-shrink-0\" />}\n-                    />\n-                    <Option\n-                      href={paths.settings.workspaces()}\n-                      btnText=\"Workspaces\"\n-                      icon={<BookOpen className=\"h-5 w-5 flex-shrink-0\" />}\n-                    />\n-                  </>\n-                )}\n-\n+                <Option\n+                  href={paths.settings.system()}\n+                  btnText=\"System Preferences\"\n+                  icon={<SquaresFour className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  allowedRole={[\"admin\", \"manager\"]}\n+                />\n+                <Option\n+                  href={paths.settings.invites()}\n+                  btnText=\"Invitation\"\n+                  icon={<EnvelopeSimple className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  allowedRole={[\"admin\", \"manager\"]}\n+                />\n+                <Option\n+                  href={paths.settings.users()}\n+                  btnText=\"Users\"\n+                  icon={<Users className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  allowedRole={[\"admin\", \"manager\"]}\n+                />\n+                <Option\n+                  href={paths.settings.workspaces()}\n+                  btnText=\"Workspaces\"\n+                  icon={<BookOpen className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  allowedRole={[\"admin\", \"manager\"]}\n+                />\n                 <Option\n                   href={paths.settings.chats()}\n                   btnText=\"Workspace Chat\"\n                   icon={<ChatCenteredText className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\", \"manager\"]}\n                 />\n-\n                 <Option\n                   href={paths.settings.appearance()}\n                   btnText=\"Appearance\"\n                   icon={<Eye className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\", \"manager\"]}\n                 />\n                 <Option\n                   href={paths.settings.apiKeys()}\n                   btnText=\"API Keys\"\n                   icon={<Key className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\"]}\n+                />\n+                <Option\n+                  href={paths.settings.llmPreference()}\n+                  btnText=\"LLM Preference\"\n+                  icon={<ChatText className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\"]}\n+                />\n+                <Option\n+                  href={paths.settings.embeddingPreference()}\n+                  btnText=\"Embedding Preference\"\n+                  icon={<FileCode className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\"]}\n+                />\n+                <Option\n+                  href={paths.settings.vectorDatabase()}\n+                  btnText=\"Vector Database\"\n+                  icon={<Database className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\"]}\n+                />\n+                <Option\n+                  href={paths.settings.dataConnectors.list()}\n+                  btnText=\"Data Connectors\"\n+                  icon={<Plugs className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\", \"manager\"]}\n                 />\n-\n-                {(!user || user?.role === \"admin\") && (\n-                  <>\n-                    <Option\n-                      href={paths.settings.llmPreference()}\n-                      btnText=\"LLM Preference\"\n-                      icon={<ChatText className=\"h-5 w-5 flex-shrink-0\" />}\n-                    />\n-                    <Option\n-                      href={paths.settings.embeddingPreference()}\n-                      btnText=\"Embedding Preference\"\n-                      icon={<FileCode className=\"h-5 w-5 flex-shrink-0\" />}\n-                    />\n-                    <Option\n-                      href={paths.settings.vectorDatabase()}\n-                      btnText=\"Vector Database\"\n-                      icon={<Database className=\"h-5 w-5 flex-shrink-0\" />}\n-                    />\n-                    <Option\n-                      href={paths.settings.dataConnectors.list()}\n-                      btnText=\"Data Connectors\"\n-                      icon={<Plugs className=\"h-5 w-5 flex-shrink-0\" />}\n-                    />\n-                  </>\n-                )}\n                 <Option\n                   href={paths.settings.security()}\n                   btnText=\"Security\"\n                   icon={<Lock className=\"h-5 w-5 flex-shrink-0\" />}\n+                  user={user}\n+                  flex={true}\n+                  allowedRole={[\"admin\", \"manager\"]}\n                 />\n               </div>\n             </div>\n@@ -265,63 +283,95 @@ export function SidebarMobileHeader() {\n                     href={paths.settings.system()}\n                     btnText=\"System Preferences\"\n                     icon={<SquaresFour className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n                   <Option\n                     href={paths.settings.invites()}\n                     btnText=\"Invitation\"\n                     icon={<EnvelopeSimple className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n                   <Option\n                     href={paths.settings.users()}\n                     btnText=\"Users\"\n                     icon={<Users className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n                   <Option\n                     href={paths.settings.workspaces()}\n                     btnText=\"Workspaces\"\n                     icon={<BookOpen className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n-\n                   <Option\n                     href={paths.settings.chats()}\n                     btnText=\"Workspace Chat\"\n                     icon={\n                       <ChatCenteredText className=\"h-5 w-5 flex-shrink-0\" />\n                     }\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n                   <Option\n                     href={paths.settings.appearance()}\n                     btnText=\"Appearance\"\n                     icon={<Eye className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n                   <Option\n                     href={paths.settings.apiKeys()}\n                     btnText=\"API Keys\"\n                     icon={<Key className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\"]}\n+                  />\n+                  <Option\n+                    href={paths.settings.llmPreference()}\n+                    btnText=\"LLM Preference\"\n+                    icon={<ChatText className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\"]}\n+                  />\n+                  <Option\n+                    href={paths.settings.embeddingPreference()}\n+                    btnText=\"Embedding Preference\"\n+                    icon={<FileCode className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\"]}\n+                  />\n+                  <Option\n+                    href={paths.settings.vectorDatabase()}\n+                    btnText=\"Vector Database\"\n+                    icon={<Database className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\"]}\n+                  />\n+                  <Option\n+                    href={paths.settings.dataConnectors.list()}\n+                    btnText=\"Data Connectors\"\n+                    icon={<Plugs className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n-                  {(!user || user?.role === \"admin\") && (\n-                    <>\n-                      <Option\n-                        href={paths.settings.llmPreference()}\n-                        btnText=\"LLM Preference\"\n-                        icon={<ChatText className=\"h-5 w-5 flex-shrink-0\" />}\n-                      />\n-                      <Option\n-                        href={paths.settings.embeddingPreference()}\n-                        btnText=\"Embedding Preference\"\n-                        icon={<FileCode className=\"h-5 w-5 flex-shrink-0\" />}\n-                      />\n-                      <Option\n-                        href={paths.settings.vectorDatabase()}\n-                        btnText=\"Vector Database\"\n-                        icon={<Database className=\"h-5 w-5 flex-shrink-0\" />}\n-                      />\n-                    </>\n-                  )}\n                   <Option\n                     href={paths.settings.security()}\n                     btnText=\"Security\"\n                     icon={<Lock className=\"h-5 w-5 flex-shrink-0\" />}\n+                    user={user}\n+                    flex={true}\n+                    allowedRole={[\"admin\", \"manager\"]}\n                   />\n                 </div>\n               </div>\n@@ -364,8 +414,21 @@ export function SidebarMobileHeader() {\n   );\n }\n \n-const Option = ({ btnText, icon, href }) => {\n+const Option = ({\n+  btnText,\n+  icon,\n+  href,\n+  flex = false,\n+  user = null,\n+  allowedRole = [],\n+}) => {\n   const isActive = window.location.pathname === href;\n+\n+  // Option only for multi-user\n+  if (!flex && !allowedRole.includes(user?.role)) return null;\n+\n+  // Option is dual-mode, but user exists, we need to check permissions\n+  if (flex && !!user && !allowedRole.includes(user?.role)) return null;\n   return (\n     <div className=\"flex gap-x-2 items-center justify-between text-white\">\n       <a"
        },
        {
          "filename": "frontend/src/models/system.js",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -209,6 +209,7 @@ const System = {\n     return await fetch(`${API_BASE}/system/pfp/${id}`, {\n       method: \"GET\",\n       cache: \"no-cache\",\n+      headers: baseHeaders(),\n     })\n       .then((res) => {\n         if (res.ok && res.status !== 204) return res.blob();\n@@ -283,6 +284,7 @@ const System = {\n     return await fetch(`${API_BASE}/system/welcome-messages`, {\n       method: \"GET\",\n       cache: \"no-cache\",\n+      headers: baseHeaders(),\n     })\n       .then((res) => {\n         if (!res.ok) throw new Error(\"Could not fetch welcome messages.\");"
        },
        {
          "filename": "frontend/src/pages/Admin/Users/UserRow/index.jsx",
          "status": "modified",
          "additions": 29,
          "deletions": 6,
          "patch": "@@ -3,9 +3,17 @@ import { titleCase } from \"text-case\";\n import Admin from \"@/models/admin\";\n import EditUserModal, { EditUserModalId } from \"./EditUserModal\";\n import { DotsThreeOutline } from \"@phosphor-icons/react\";\n+import showToast from \"@/utils/toast\";\n+\n+const ModMap = {\n+  admin: [\"admin\", \"manager\", \"default\"],\n+  manager: [\"manager\", \"default\"],\n+  default: [],\n+};\n \n export default function UserRow({ currUser, user }) {\n   const rowRef = useRef(null);\n+  const canModify = ModMap[currUser?.role || \"default\"].includes(user.role);\n   const [suspended, setSuspended] = useState(user.suspended === 1);\n   const handleSuspend = async () => {\n     if (\n@@ -14,8 +22,19 @@ export default function UserRow({ currUser, user }) {\n       )\n     )\n       return false;\n-    setSuspended(!suspended);\n-    await Admin.updateUser(user.id, { suspended: suspended ? 0 : 1 });\n+\n+    const { success, error } = await Admin.updateUser(user.id, {\n+      suspended: suspended ? 0 : 1,\n+    });\n+    if (!success) showToast(error, \"error\", { clear: true });\n+    if (success) {\n+      showToast(\n+        `User ${!suspended ? \"has been suspended\" : \"is no longer suspended\"}.`,\n+        \"success\",\n+        { clear: true }\n+      );\n+      setSuspended(!suspended);\n+    }\n   };\n   const handleDelete = async () => {\n     if (\n@@ -24,8 +43,12 @@ export default function UserRow({ currUser, user }) {\n       )\n     )\n       return false;\n-    rowRef?.current?.remove();\n-    await Admin.deleteUser(user.id);\n+    const { success, error } = await Admin.deleteUser(user.id);\n+    if (!success) showToast(error, \"error\", { clear: true });\n+    if (success) {\n+      rowRef?.current?.remove();\n+      showToast(\"User deleted from system.\", \"success\", { clear: true });\n+    }\n   };\n \n   return (\n@@ -40,7 +63,7 @@ export default function UserRow({ currUser, user }) {\n         <td className=\"px-6 py-4\">{titleCase(user.role)}</td>\n         <td className=\"px-6 py-4\">{user.createdAt}</td>\n         <td className=\"px-6 py-4 flex items-center gap-x-6\">\n-          {currUser?.role !== \"default\" && (\n+          {canModify && (\n             <button\n               onClick={() =>\n                 document?.getElementById(EditUserModalId(user))?.showModal()\n@@ -50,7 +73,7 @@ export default function UserRow({ currUser, user }) {\n               <DotsThreeOutline weight=\"fill\" className=\"h-5 w-5\" />\n             </button>\n           )}\n-          {currUser?.id !== user.id && currUser?.role !== \"default\" && (\n+          {currUser?.id !== user.id && canModify && (\n             <>\n               <button\n                 onClick={handleSuspend}"
        },
        {
          "filename": "frontend/src/pages/Admin/Users/index.jsx",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -105,7 +105,8 @@ const ROLE_HINT = {\n     \"Cannot modify any settings at all.\",\n   ],\n   manager: [\n-    \"Can view all workspaces and modify all settings.\",\n+    \"Can view, create, and delete any workspaces and modify workspace-specific settings.\",\n+    \"Can create, update and invite new users to the instance.\",\n     \"Cannot modify LLM, vectorDB, embedding, or other connections.\",\n   ],\n   admin: ["
        },
        {
          "filename": "server/endpoints/admin.js",
          "status": "modified",
          "additions": 62,
          "deletions": 32,
          "patch": "@@ -7,9 +7,15 @@ const { DocumentVectors } = require(\"../models/vectors\");\n const { Workspace } = require(\"../models/workspace\");\n const { WorkspaceChats } = require(\"../models/workspaceChats\");\n const { getVectorDbClass } = require(\"../utils/helpers\");\n+const {\n+  validRoleSelection,\n+  canModifyAdmin,\n+  validCanModify,\n+} = require(\"../utils/helpers/admin\");\n const { reqBody, userFromSession } = require(\"../utils/http\");\n const {\n   strictMultiUserRoleValid,\n+  ROLES,\n } = require(\"../utils/middleware/multiUserProtected\");\n const { validatedRequest } = require(\"../utils/middleware/validatedRequest\");\n \n@@ -18,7 +24,7 @@ function adminEndpoints(app) {\n \n   app.get(\n     \"/admin/users\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (_request, response) => {\n       try {\n         const users = (await User.where()).map((user) => {\n@@ -35,10 +41,20 @@ function adminEndpoints(app) {\n \n   app.post(\n     \"/admin/users/new\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n+        const currUser = await userFromSession(request, response);\n         const newUserParams = reqBody(request);\n+        const roleValidation = validRoleSelection(currUser, newUserParams);\n+\n+        if (!roleValidation.valid) {\n+          response\n+            .status(200)\n+            .json({ user: null, error: roleValidation.error });\n+          return;\n+        }\n+\n         const { user: newUser, error } = await User.create(newUserParams);\n         response.status(200).json({ user: newUser, error });\n       } catch (e) {\n@@ -50,29 +66,34 @@ function adminEndpoints(app) {\n \n   app.post(\n     \"/admin/user/:id\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n+        const currUser = await userFromSession(request, response);\n         const { id } = request.params;\n         const updates = reqBody(request);\n         const user = await User.get({ id: Number(id) });\n \n-        // Check to make sure with this update that includes a role change to\n-        // something other than admin that we still have at least one admin left.\n-        if (\n-          updates.hasOwnProperty(\"role\") && // has admin prop to change\n-          updates.role !== \"admin\" && // and we are changing to non-admin\n-          user.role === \"admin\" // and they currently are an admin\n-        ) {\n-          const adminCount = await User.count({ role: \"admin\" });\n-          if (adminCount - 1 <= 0) {\n-            response.status(200).json({\n-              success: false,\n-              error:\n-                \"No system admins will remain if you do this. Update failed.\",\n-            });\n-            return;\n-          }\n+        const canModify = validCanModify(currUser, user);\n+        if (!canModify.valid) {\n+          response.status(200).json({ success: false, error: canModify.error });\n+          return;\n+        }\n+\n+        const roleValidation = validRoleSelection(currUser, updates);\n+        if (!roleValidation.valid) {\n+          response\n+            .status(200)\n+            .json({ success: false, error: roleValidation.error });\n+          return;\n+        }\n+\n+        const validAdminRoleModification = await canModifyAdmin(user, updates);\n+        if (!validAdminRoleModification.valid) {\n+          response\n+            .status(200)\n+            .json({ success: false, error: validAdminRoleModification.error });\n+          return;\n         }\n \n         const { success, error } = await User.update(id, updates);\n@@ -86,10 +107,19 @@ function adminEndpoints(app) {\n \n   app.delete(\n     \"/admin/user/:id\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n+        const currUser = await userFromSession(request, response);\n         const { id } = request.params;\n+        const user = await User.get({ id: Number(id) });\n+\n+        const canModify = validCanModify(currUser, user);\n+        if (!canModify.valid) {\n+          response.status(200).json({ success: false, error: canModify.error });\n+          return;\n+        }\n+\n         await User.delete({ id: Number(id) });\n         response.status(200).json({ success: true, error: null });\n       } catch (e) {\n@@ -101,7 +131,7 @@ function adminEndpoints(app) {\n \n   app.get(\n     \"/admin/invites\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (_request, response) => {\n       try {\n         const invites = await Invite.whereWithUsers();\n@@ -115,7 +145,7 @@ function adminEndpoints(app) {\n \n   app.get(\n     \"/admin/invite/new\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const user = await userFromSession(request, response);\n@@ -130,7 +160,7 @@ function adminEndpoints(app) {\n \n   app.delete(\n     \"/admin/invite/:id\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const { id } = request.params;\n@@ -145,7 +175,7 @@ function adminEndpoints(app) {\n \n   app.get(\n     \"/admin/workspaces\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (_request, response) => {\n       try {\n         const workspaces = await Workspace.whereWithUsers();\n@@ -159,7 +189,7 @@ function adminEndpoints(app) {\n \n   app.post(\n     \"/admin/workspaces/new\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const user = await userFromSession(request, response);\n@@ -178,7 +208,7 @@ function adminEndpoints(app) {\n \n   app.post(\n     \"/admin/workspaces/:workspaceId/update-users\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const { workspaceId } = request.params;\n@@ -197,7 +227,7 @@ function adminEndpoints(app) {\n \n   app.delete(\n     \"/admin/workspaces/:id\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const { id } = request.params;\n@@ -228,7 +258,7 @@ function adminEndpoints(app) {\n \n   app.get(\n     \"/admin/system-preferences\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (_request, response) => {\n       try {\n         const settings = {\n@@ -253,7 +283,7 @@ function adminEndpoints(app) {\n \n   app.post(\n     \"/admin/system-preferences\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const updates = reqBody(request);\n@@ -268,7 +298,7 @@ function adminEndpoints(app) {\n \n   app.get(\n     \"/admin/api-keys\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin])],\n     async (_request, response) => {\n       try {\n         const apiKeys = await ApiKey.whereWithUser({});\n@@ -288,7 +318,7 @@ function adminEndpoints(app) {\n \n   app.post(\n     \"/admin/generate-api-key\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin])],\n     async (request, response) => {\n       try {\n         const user = await userFromSession(request, response);\n@@ -306,7 +336,7 @@ function adminEndpoints(app) {\n \n   app.delete(\n     \"/admin/delete-api-key/:id\",\n-    [validatedRequest, strictMultiUserRoleValid],\n+    [validatedRequest, strictMultiUserRoleValid([ROLES.admin])],\n     async (request, response) => {\n       try {\n         const { id } = request.params;"
        },
        {
          "filename": "server/endpoints/api/admin/index.js",
          "status": "modified",
          "additions": 7,
          "deletions": 16,
          "patch": "@@ -3,6 +3,7 @@ const { SystemSettings } = require(\"../../../models/systemSettings\");\n const { User } = require(\"../../../models/user\");\n const { Workspace } = require(\"../../../models/workspace\");\n const { WorkspaceChats } = require(\"../../../models/workspaceChats\");\n+const { canModifyAdmin } = require(\"../../../utils/helpers/admin\");\n const { multiUserMode, reqBody } = require(\"../../../utils/http\");\n const { validApiKey } = require(\"../../../utils/middleware/validApiKey\");\n \n@@ -198,23 +199,13 @@ function apiAdminEndpoints(app) {\n       const { id } = request.params;\n       const updates = reqBody(request);\n       const user = await User.get({ id: Number(id) });\n+      const validAdminRoleModification = await canModifyAdmin(user, updates);\n \n-      // Check to make sure with this update that includes a role change to\n-      // something other than admin that we still have at least one admin left.\n-      if (\n-        updates.hasOwnProperty(\"role\") && // has admin prop to change\n-        updates.role !== \"admin\" && // and we are changing to non-admin\n-        user.role === \"admin\" // and they currently are an admin\n-      ) {\n-        const adminCount = await User.count({ role: \"admin\" });\n-        if (adminCount - 1 <= 0) {\n-          response.status(200).json({\n-            success: false,\n-            error:\n-              \"No system admins will remain if you do this. Update failed.\",\n-          });\n-          return;\n-        }\n+      if (!validAdminRoleModification.valid) {\n+        response\n+          .status(200)\n+          .json({ success: false, error: validAdminRoleModification.error });\n+        return;\n       }\n \n       const { success, error } = await User.update(id, updates);"
        },
        {
          "filename": "server/endpoints/chat.js",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -10,13 +10,17 @@ const {\n   writeResponseChunk,\n   VALID_CHAT_MODE,\n } = require(\"../utils/chats/stream\");\n+const {\n+  ROLES,\n+  flexUserRoleValid,\n+} = require(\"../utils/middleware/multiUserProtected\");\n \n function chatEndpoints(app) {\n   if (!app) return;\n \n   app.post(\n     \"/workspace/:slug/stream-chat\",\n-    [validatedRequest],\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n     async (request, response) => {\n       try {\n         const user = await userFromSession(request, response);\n@@ -52,7 +56,7 @@ function chatEndpoints(app) {\n         response.setHeader(\"Connection\", \"keep-alive\");\n         response.flushHeaders();\n \n-        if (multiUserMode(response) && user.role !== \"admin\") {\n+        if (multiUserMode(response) && user.role !== ROLES.admin) {\n           const limitMessagesSetting = await SystemSettings.get({\n             label: \"limit_user_messages\",\n           });"
        },
        {
          "filename": "server/endpoints/extensions/index.js",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -4,6 +4,7 @@ const {\n } = require(\"../../utils/files/documentProcessor\");\n const {\n   flexUserRoleValid,\n+  ROLES,\n } = require(\"../../utils/middleware/multiUserProtected\");\n const { validatedRequest } = require(\"../../utils/middleware/validatedRequest\");\n \n@@ -12,7 +13,7 @@ function extensionEndpoints(app) {\n \n   app.post(\n     \"/ext/github/branches\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const responseFromProcessor = await forwardExtensionRequest({\n@@ -30,7 +31,7 @@ function extensionEndpoints(app) {\n \n   app.post(\n     \"/ext/github/repo\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const responseFromProcessor = await forwardExtensionRequest({\n@@ -51,7 +52,7 @@ function extensionEndpoints(app) {\n \n   app.post(\n     \"/ext/youtube/transcript\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const responseFromProcessor = await forwardExtensionRequest({"
        },
        {
          "filename": "server/endpoints/system.js",
          "status": "modified",
          "additions": 76,
          "deletions": 132,
          "patch": "@@ -39,10 +39,15 @@ const { WelcomeMessages } = require(\"../models/welcomeMessages\");\n const { ApiKey } = require(\"../models/apiKeys\");\n const { getCustomModels } = require(\"../utils/helpers/customModels\");\n const { WorkspaceChats } = require(\"../models/workspaceChats\");\n-const { Workspace } = require(\"../models/workspace\");\n-const { flexUserRoleValid } = require(\"../utils/middleware/multiUserProtected\");\n+const {\n+  flexUserRoleValid,\n+  ROLES,\n+} = require(\"../utils/middleware/multiUserProtected\");\n const { fetchPfp, determinePfpFilepath } = require(\"../utils/files/pfp\");\n-const { convertToCSV, convertToJSON, convertToJSONL } = require(\"./utils\");\n+const {\n+  prepareWorkspaceChatsForExport,\n+  exportChatsAsType,\n+} = require(\"../utils/helpers/chat/convertTo\");\n \n function systemEndpoints(app) {\n   if (!app) return;\n@@ -275,15 +280,9 @@ function systemEndpoints(app) {\n \n   app.post(\n     \"/system/update-env\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin])],\n     async (request, response) => {\n       try {\n-        const user = await userFromSession(request, response);\n-        if (!!user && user.role !== \"admin\") {\n-          response.sendStatus(401).end();\n-          return;\n-        }\n-\n         const body = reqBody(request);\n         const { newValues, error } = await updateENV(body);\n         if (process.env.NODE_ENV === \"production\") await dumpENV();\n@@ -341,7 +340,7 @@ function systemEndpoints(app) {\n         const { user, error } = await User.create({\n           username,\n           password,\n-          role: \"admin\",\n+          role: ROLES.admin,\n         });\n         await SystemSettings.updateSettings({\n           multi_user_mode: true,\n@@ -374,7 +373,7 @@ function systemEndpoints(app) {\n     }\n   );\n \n-  app.get(\"/system/multi-user-mode\", async (request, response) => {\n+  app.get(\"/system/multi-user-mode\", async (_, response) => {\n     try {\n       const multiUserMode = await SystemSettings.isMultiUserMode();\n       response.status(200).json({ multiUserMode });\n@@ -384,7 +383,7 @@ function systemEndpoints(app) {\n     }\n   });\n \n-  app.get(\"/system/logo\", async function (request, response) {\n+  app.get(\"/system/logo\", async function (_, response) {\n     try {\n       const defaultFilename = getDefaultFilename();\n       const logoPath = await determineLogoFilepath(defaultFilename);\n@@ -409,56 +408,61 @@ function systemEndpoints(app) {\n     }\n   });\n \n-  app.get(\"/system/pfp/:id\", async function (request, response) {\n-    try {\n-      const { id } = request.params;\n-      const pfpPath = await determinePfpFilepath(id);\n+  app.get(\n+    \"/system/pfp/:id\",\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n+    async function (request, response) {\n+      try {\n+        const { id } = request.params;\n+        const pfpPath = await determinePfpFilepath(id);\n \n-      if (!pfpPath) {\n-        response.sendStatus(204).end();\n-        return;\n-      }\n+        if (!pfpPath) {\n+          response.sendStatus(204).end();\n+          return;\n+        }\n \n-      const { found, buffer, size, mime } = fetchPfp(pfpPath);\n-      if (!found) {\n-        response.sendStatus(204).end();\n+        const { found, buffer, size, mime } = fetchPfp(pfpPath);\n+        if (!found) {\n+          response.sendStatus(204).end();\n+          return;\n+        }\n+\n+        response.writeHead(200, {\n+          \"Content-Type\": mime || \"image/png\",\n+          \"Content-Disposition\": `attachment; filename=${path.basename(\n+            pfpPath\n+          )}`,\n+          \"Content-Length\": size,\n+        });\n+        response.end(Buffer.from(buffer, \"base64\"));\n         return;\n+      } catch (error) {\n+        console.error(\"Error processing the logo request:\", error);\n+        response.status(500).json({ message: \"Internal server error\" });\n       }\n-\n-      response.writeHead(200, {\n-        \"Content-Type\": mime || \"image/png\",\n-        \"Content-Disposition\": `attachment; filename=${path.basename(pfpPath)}`,\n-        \"Content-Length\": size,\n-      });\n-      response.end(Buffer.from(buffer, \"base64\"));\n-      return;\n-    } catch (error) {\n-      console.error(\"Error processing the logo request:\", error);\n-      response.status(500).json({ message: \"Internal server error\" });\n     }\n-  });\n+  );\n \n   app.post(\n     \"/system/upload-pfp\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n     handlePfpUploads.single(\"file\"),\n     async function (request, response) {\n       try {\n         const user = await userFromSession(request, response);\n         const uploadedFileName = request.randomFileName;\n-\n         if (!uploadedFileName) {\n           return response.status(400).json({ message: \"File upload failed.\" });\n         }\n \n         const userRecord = await User.get({ id: user.id });\n-        const oldPfpFilename = normalizePath(userRecord.pfpFilename);\n+        const oldPfpFilename = userRecord.pfpFilename;\n \n         console.log(\"oldPfpFilename\", oldPfpFilename);\n         if (oldPfpFilename) {\n           const oldPfpPath = path.join(\n             __dirname,\n-            `../storage/assets/pfp/${oldPfpFilename}`\n+            `../storage/assets/pfp/${normalizePath(userRecord.pfpFilename)}`\n           );\n \n           if (fs.existsSync(oldPfpPath)) fs.unlinkSync(oldPfpPath);\n@@ -482,17 +486,18 @@ function systemEndpoints(app) {\n \n   app.delete(\n     \"/system/remove-pfp\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n     async function (request, response) {\n       try {\n         const user = await userFromSession(request, response);\n         const userRecord = await User.get({ id: user.id });\n-        const oldPfpFilename = normalizePath(userRecord.pfpFilename);\n+        const oldPfpFilename = userRecord.pfpFilename;\n+\n         console.log(\"oldPfpFilename\", oldPfpFilename);\n         if (oldPfpFilename) {\n           const oldPfpPath = path.join(\n             __dirname,\n-            `../storage/assets/pfp/${oldPfpFilename}`\n+            `../storage/assets/pfp/${normalizePath(oldPfpFilename)}`\n           );\n \n           if (fs.existsSync(oldPfpPath)) fs.unlinkSync(oldPfpPath);\n@@ -516,7 +521,7 @@ function systemEndpoints(app) {\n \n   app.post(\n     \"/system/upload-logo\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     handleLogoUploads.single(\"logo\"),\n     async (request, response) => {\n       if (!request.file || !request.file.originalname) {\n@@ -550,7 +555,7 @@ function systemEndpoints(app) {\n     }\n   );\n \n-  app.get(\"/system/is-default-logo\", async (request, response) => {\n+  app.get(\"/system/is-default-logo\", async (_, response) => {\n     try {\n       const currentLogoFilename = await SystemSettings.currentLogoFilename();\n       const isDefaultLogo = currentLogoFilename === LOGO_FILENAME;\n@@ -563,7 +568,7 @@ function systemEndpoints(app) {\n \n   app.get(\n     \"/system/remove-logo\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (_request, response) => {\n       try {\n         const currentLogoFilename = await SystemSettings.currentLogoFilename();\n@@ -594,7 +599,7 @@ function systemEndpoints(app) {\n         }\n \n         const user = await userFromSession(request, response);\n-        if ([\"admin\", \"manager\"].includes(user?.role)) {\n+        if ([ROLES.admin, ROLES.manager].includes(user?.role)) {\n           return response.status(200).json({ canDelete: true });\n         }\n \n@@ -611,21 +616,25 @@ function systemEndpoints(app) {\n     }\n   );\n \n-  app.get(\"/system/welcome-messages\", async function (request, response) {\n-    try {\n-      const welcomeMessages = await WelcomeMessages.getMessages();\n-      response.status(200).json({ success: true, welcomeMessages });\n-    } catch (error) {\n-      console.error(\"Error fetching welcome messages:\", error);\n-      response\n-        .status(500)\n-        .json({ success: false, message: \"Internal server error\" });\n+  app.get(\n+    \"/system/welcome-messages\",\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n+    async function (_, response) {\n+      try {\n+        const welcomeMessages = await WelcomeMessages.getMessages();\n+        response.status(200).json({ success: true, welcomeMessages });\n+      } catch (error) {\n+        console.error(\"Error fetching welcome messages:\", error);\n+        response\n+          .status(500)\n+          .json({ success: false, message: \"Internal server error\" });\n+      }\n     }\n-  });\n+  );\n \n   app.post(\n     \"/system/set-welcome-messages\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const { messages = [] } = reqBody(request);\n@@ -733,7 +742,7 @@ function systemEndpoints(app) {\n \n   app.post(\n     \"/system/workspace-chats\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const { offset = 0, limit = 20 } = reqBody(request);\n@@ -756,7 +765,7 @@ function systemEndpoints(app) {\n \n   app.delete(\n     \"/system/workspace-chats/:id\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const { id } = request.params;\n@@ -771,88 +780,23 @@ function systemEndpoints(app) {\n \n   app.get(\n     \"/system/export-chats\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.manager, ROLES.admin])],\n     async (request, response) => {\n       try {\n         const { type = \"jsonl\" } = request.query;\n-        const chats = await WorkspaceChats.whereWithData({}, null, null, {\n-          id: \"asc\",\n-        });\n-        const workspaceIds = [\n-          ...new Set(chats.map((chat) => chat.workspaceId)),\n-        ];\n-\n-        const workspacesWithPrompts = await Promise.all(\n-          workspaceIds.map((id) => Workspace.get({ id: Number(id) }))\n-        );\n-\n-        const workspacePromptsMap = workspacesWithPrompts.reduce(\n-          (acc, workspace) => {\n-            acc[workspace.id] = workspace.openAiPrompt;\n-            return acc;\n-          },\n-          {}\n-        );\n-\n-        const workspaceChatsMap = chats.reduce((acc, chat) => {\n-          const { prompt, response, workspaceId } = chat;\n-          const responseJson = JSON.parse(response);\n-\n-          if (!acc[workspaceId]) {\n-            acc[workspaceId] = {\n-              messages: [\n-                {\n-                  role: \"system\",\n-                  content:\n-                    workspacePromptsMap[workspaceId] ||\n-                    \"Given the following conversation, relevant context, and a follow up question, reply with an answer to the current question the user is asking. Return only your response to the question given the above information following the users instructions as needed.\",\n-                },\n-              ],\n-            };\n-          }\n-\n-          acc[workspaceId].messages.push(\n-            {\n-              role: \"user\",\n-              content: prompt,\n-            },\n-            {\n-              role: \"assistant\",\n-              content: responseJson.text,\n-            }\n-          );\n-\n-          return acc;\n-        }, {});\n-\n-        let output;\n-        switch (type.toLowerCase()) {\n-          case \"json\": {\n-            response.setHeader(\"Content-Type\", \"application/json\");\n-            output = await convertToJSON(workspaceChatsMap);\n-            break;\n-          }\n-          case \"csv\": {\n-            response.setHeader(\"Content-Type\", \"text/csv\");\n-            output = await convertToCSV(workspaceChatsMap);\n-            break;\n-          }\n-          // JSONL default\n-          default: {\n-            response.setHeader(\"Content-Type\", \"application/jsonl\");\n-            output = await convertToJSONL(workspaceChatsMap);\n-            break;\n-          }\n-        }\n-\n-        response.status(200).send(output);\n+        const chats = await prepareWorkspaceChatsForExport();\n+        const { contentType, data } = await exportChatsAsType(chats, type);\n+        response.setHeader(\"Content-Type\", contentType);\n+        response.status(200).send(data);\n       } catch (e) {\n         console.error(e);\n         response.sendStatus(500).end();\n       }\n     }\n   );\n \n+  // Used for when a user in multi-user updates their own profile\n+  // from the UI.\n   app.post(\"/system/user\", [validatedRequest], async (request, response) => {\n     try {\n       const sessionUser = await userFromSession(request, response);"
        },
        {
          "filename": "server/endpoints/utils.js",
          "status": "modified",
          "additions": 22,
          "deletions": 53,
          "patch": "@@ -1,5 +1,27 @@\n const { SystemSettings } = require(\"../models/systemSettings\");\n \n+function utilEndpoints(app) {\n+  if (!app) return;\n+\n+  app.get(\"/utils/metrics\", async (_, response) => {\n+    try {\n+      const metrics = {\n+        online: true,\n+        version: getGitVersion(),\n+        mode: (await SystemSettings.isMultiUserMode())\n+          ? \"multi-user\"\n+          : \"single-user\",\n+        vectorDB: process.env.VECTOR_DB || \"lancedb\",\n+        storage: await getDiskStorage(),\n+      };\n+      response.status(200).json(metrics);\n+    } catch (e) {\n+      console.error(e);\n+      response.sendStatus(500).end();\n+    }\n+  });\n+}\n+\n function getGitVersion() {\n   try {\n     return require(\"child_process\")\n@@ -32,60 +54,7 @@ async function getDiskStorage() {\n   }\n }\n \n-async function convertToCSV(workspaceChatsMap) {\n-  const rows = [\"role,content\"];\n-  for (const workspaceChats of Object.values(workspaceChatsMap)) {\n-    for (const message of workspaceChats.messages) {\n-      // Escape double quotes and wrap content in double quotes\n-      const escapedContent = `\"${message.content\n-        .replace(/\"/g, '\"\"')\n-        .replace(/\\n/g, \" \")}\"`;\n-      rows.push(`${message.role},${escapedContent}`);\n-    }\n-  }\n-  return rows.join(\"\\n\");\n-}\n-\n-async function convertToJSON(workspaceChatsMap) {\n-  const allMessages = [].concat.apply(\n-    [],\n-    Object.values(workspaceChatsMap).map((workspace) => workspace.messages)\n-  );\n-  return JSON.stringify(allMessages);\n-}\n-\n-async function convertToJSONL(workspaceChatsMap) {\n-  return Object.values(workspaceChatsMap)\n-    .map((workspaceChats) => JSON.stringify(workspaceChats))\n-    .join(\"\\n\");\n-}\n-\n-function utilEndpoints(app) {\n-  if (!app) return;\n-\n-  app.get(\"/utils/metrics\", async (_, response) => {\n-    try {\n-      const metrics = {\n-        online: true,\n-        version: getGitVersion(),\n-        mode: (await SystemSettings.isMultiUserMode())\n-          ? \"multi-user\"\n-          : \"single-user\",\n-        vectorDB: process.env.VECTOR_DB || \"lancedb\",\n-        storage: await getDiskStorage(),\n-      };\n-      response.status(200).json(metrics);\n-    } catch (e) {\n-      console.error(e);\n-      response.sendStatus(500).end();\n-    }\n-  });\n-}\n-\n module.exports = {\n   utilEndpoints,\n   getGitVersion,\n-  convertToCSV,\n-  convertToJSON,\n-  convertToJSONL,\n };"
        },
        {
          "filename": "server/endpoints/workspaces.js",
          "status": "modified",
          "additions": 42,
          "deletions": 30,
          "patch": "@@ -13,15 +13,18 @@ const {\n } = require(\"../utils/files/documentProcessor\");\n const { validatedRequest } = require(\"../utils/middleware/validatedRequest\");\n const { Telemetry } = require(\"../models/telemetry\");\n-const { flexUserRoleValid } = require(\"../utils/middleware/multiUserProtected\");\n+const {\n+  flexUserRoleValid,\n+  ROLES,\n+} = require(\"../utils/middleware/multiUserProtected\");\n const { handleUploads } = setupMulter();\n \n function workspaceEndpoints(app) {\n   if (!app) return;\n \n   app.post(\n     \"/workspace/new\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const user = await userFromSession(request, response);\n@@ -50,7 +53,7 @@ function workspaceEndpoints(app) {\n \n   app.post(\n     \"/workspace/:slug/update\",\n-    [validatedRequest],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const user = await userFromSession(request, response);\n@@ -79,6 +82,7 @@ function workspaceEndpoints(app) {\n \n   app.post(\n     \"/workspace/:slug/upload\",\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     handleUploads.single(\"file\"),\n     async function (request, response) {\n       const { originalname } = request.file;\n@@ -111,7 +115,7 @@ function workspaceEndpoints(app) {\n \n   app.post(\n     \"/workspace/:slug/upload-link\",\n-    [validatedRequest],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       const { link = \"\" } = reqBody(request);\n       const processingOnline = await checkProcessorAlive();\n@@ -143,7 +147,7 @@ function workspaceEndpoints(app) {\n \n   app.post(\n     \"/workspace/:slug/update-embeddings\",\n-    [validatedRequest],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const user = await userFromSession(request, response);\n@@ -182,7 +186,7 @@ function workspaceEndpoints(app) {\n \n   app.delete(\n     \"/workspace/:slug\",\n-    [validatedRequest, flexUserRoleValid],\n+    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n     async (request, response) => {\n       try {\n         const { slug = \"\" } = request.params;\n@@ -215,38 +219,46 @@ function workspaceEndpoints(app) {\n     }\n   );\n \n-  app.get(\"/workspaces\", [validatedRequest], async (request, response) => {\n-    try {\n-      const user = await userFromSession(request, response);\n-      const workspaces = multiUserMode(response)\n-        ? await Workspace.whereWithUser(user)\n-        : await Workspace.where();\n+  app.get(\n+    \"/workspaces\",\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n+    async (request, response) => {\n+      try {\n+        const user = await userFromSession(request, response);\n+        const workspaces = multiUserMode(response)\n+          ? await Workspace.whereWithUser(user)\n+          : await Workspace.where();\n \n-      response.status(200).json({ workspaces });\n-    } catch (e) {\n-      console.log(e.message, e);\n-      response.sendStatus(500).end();\n+        response.status(200).json({ workspaces });\n+      } catch (e) {\n+        console.log(e.message, e);\n+        response.sendStatus(500).end();\n+      }\n     }\n-  });\n+  );\n \n-  app.get(\"/workspace/:slug\", [validatedRequest], async (request, response) => {\n-    try {\n-      const { slug } = request.params;\n-      const user = await userFromSession(request, response);\n-      const workspace = multiUserMode(response)\n-        ? await Workspace.getWithUser(user, { slug })\n-        : await Workspace.get({ slug });\n+  app.get(\n+    \"/workspace/:slug\",\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n+    async (request, response) => {\n+      try {\n+        const { slug } = request.params;\n+        const user = await userFromSession(request, response);\n+        const workspace = multiUserMode(response)\n+          ? await Workspace.getWithUser(user, { slug })\n+          : await Workspace.get({ slug });\n \n-      response.status(200).json({ workspace });\n-    } catch (e) {\n-      console.log(e.message, e);\n-      response.sendStatus(500).end();\n+        response.status(200).json({ workspace });\n+      } catch (e) {\n+        console.log(e.message, e);\n+        response.sendStatus(500).end();\n+      }\n     }\n-  });\n+  );\n \n   app.get(\n     \"/workspace/:slug/chats\",\n-    [validatedRequest],\n+    [validatedRequest, flexUserRoleValid([ROLES.all])],\n     async (request, response) => {\n       try {\n         const { slug } = request.params;"
        },
        {
          "filename": "server/models/workspace.js",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -2,6 +2,7 @@ const prisma = require(\"../utils/prisma\");\n const slugify = require(\"slugify\");\n const { Document } = require(\"./documents\");\n const { WorkspaceUser } = require(\"./workspaceUsers\");\n+const { ROLES } = require(\"../utils/middleware/multiUserProtected\");\n \n const Workspace = {\n   writable: [\n@@ -66,7 +67,8 @@ const Workspace = {\n   },\n \n   getWithUser: async function (user = null, clause = {}) {\n-    if ([\"admin\", \"manager\"].includes(user.role)) return this.get(clause);\n+    if ([ROLES.admin, ROLES.manager].includes(user.role))\n+      return this.get(clause);\n \n     try {\n       const workspace = await prisma.workspaces.findFirst({\n@@ -144,7 +146,7 @@ const Workspace = {\n     limit = null,\n     orderBy = null\n   ) {\n-    if ([\"admin\", \"manager\"].includes(user.role))\n+    if ([ROLES.admin, ROLES.manager].includes(user.role))\n       return await this.where(clause, limit, orderBy);\n \n     try {"
        },
        {
          "filename": "server/utils/helpers/admin/index.js",
          "status": "added",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -0,0 +1,52 @@\n+const { User } = require(\"../../../models/user\");\n+const { ROLES } = require(\"../../middleware/multiUserProtected\");\n+\n+// When a user is updating or creating a user in multi-user, we need to check if they\n+// are allowed to do this and that the new or existing user will be at or below their permission level.\n+// the user executing this function should be an admin or manager.\n+function validRoleSelection(currentUser = {}, newUserParams = {}) {\n+  if (!newUserParams.hasOwnProperty(\"role\"))\n+    return { valid: true, error: null }; // not updating role, so skip.\n+  if (currentUser.role === ROLES.admin) return { valid: true, error: null };\n+  if (currentUser.role === ROLES.manager) {\n+    const validRoles = [ROLES.manager, ROLES.default];\n+    if (!validRoles.includes(newUserParams.role))\n+      return { valid: false, error: \"Invalid role selection for user.\" };\n+    return { valid: true, error: null };\n+  }\n+  return { valid: false, error: \"Invalid condition for caller.\" };\n+}\n+\n+// Check to make sure with this update that includes a role change to an existing admin to a non-admin\n+// that we still have at least one admin left or else they will lock themselves out.\n+async function canModifyAdmin(userToModify, updates) {\n+  // if updates don't include role property or the user being modified isn't an admin currently - skip.\n+  if (!updates.hasOwnProperty(\"role\")) return { valid: true, error: null };\n+  if (userToModify.role !== ROLES.admin) return { valid: true, error: null };\n+\n+  const adminCount = await User.count({ role: ROLES.admin });\n+  if (adminCount - 1 <= 0)\n+    return {\n+      valid: false,\n+      error: \"No system admins will remain if you do this. Update failed.\",\n+    };\n+  return { valid: true, error: null };\n+}\n+\n+function validCanModify(currentUser, existingUser) {\n+  if (currentUser.role === ROLES.admin) return { valid: true, error: null };\n+  if (currentUser.role === ROLES.manager) {\n+    const validRoles = [ROLES.manager, ROLES.default];\n+    if (!validRoles.includes(existingUser.role))\n+      return { valid: false, error: \"Cannot perform that action on user.\" };\n+    return { valid: true, error: null };\n+  }\n+\n+  return { valid: false, error: \"Invalid condition for caller.\" };\n+}\n+\n+module.exports = {\n+  validCanModify,\n+  validRoleSelection,\n+  canModifyAdmin,\n+};"
        },
        {
          "filename": "server/utils/helpers/chat/convertTo.js",
          "status": "added",
          "additions": 113,
          "deletions": 0,
          "patch": "@@ -0,0 +1,113 @@\n+// Helpers that convert workspace chats to some supported format\n+// for external use by the user.\n+\n+const { Workspace } = require(\"../../../models/workspace\");\n+const { WorkspaceChats } = require(\"../../../models/workspaceChats\");\n+\n+// Todo: make this more useful for export by adding other columns about workspace, user, time, etc for post-filtering.\n+async function convertToCSV(workspaceChatsMap) {\n+  const rows = [\"role,content\"];\n+  for (const workspaceChats of Object.values(workspaceChatsMap)) {\n+    for (const message of workspaceChats.messages) {\n+      // Escape double quotes and wrap content in double quotes\n+      const escapedContent = `\"${message.content\n+        .replace(/\"/g, '\"\"')\n+        .replace(/\\n/g, \" \")}\"`;\n+      rows.push(`${message.role},${escapedContent}`);\n+    }\n+  }\n+  return rows.join(\"\\n\");\n+}\n+\n+async function convertToJSON(workspaceChatsMap) {\n+  const allMessages = [].concat.apply(\n+    [],\n+    Object.values(workspaceChatsMap).map((workspace) => workspace.messages)\n+  );\n+  return JSON.stringify(allMessages);\n+}\n+\n+async function convertToJSONL(workspaceChatsMap) {\n+  return Object.values(workspaceChatsMap)\n+    .map((workspaceChats) => JSON.stringify(workspaceChats))\n+    .join(\"\\n\");\n+}\n+\n+async function prepareWorkspaceChatsForExport() {\n+  const chats = await WorkspaceChats.whereWithData({}, null, null, {\n+    id: \"asc\",\n+  });\n+  const workspaceIds = [...new Set(chats.map((chat) => chat.workspaceId))];\n+\n+  const workspacesWithPrompts = await Promise.all(\n+    workspaceIds.map((id) => Workspace.get({ id: Number(id) }))\n+  );\n+\n+  const workspacePromptsMap = workspacesWithPrompts.reduce((acc, workspace) => {\n+    acc[workspace.id] = workspace.openAiPrompt;\n+    return acc;\n+  }, {});\n+\n+  const workspaceChatsMap = chats.reduce((acc, chat) => {\n+    const { prompt, response, workspaceId } = chat;\n+    const responseJson = JSON.parse(response);\n+\n+    if (!acc[workspaceId]) {\n+      acc[workspaceId] = {\n+        messages: [\n+          {\n+            role: \"system\",\n+            content:\n+              workspacePromptsMap[workspaceId] ||\n+              \"Given the following conversation, relevant context, and a follow up question, reply with an answer to the current question the user is asking. Return only your response to the question given the above information following the users instructions as needed.\",\n+          },\n+        ],\n+      };\n+    }\n+\n+    acc[workspaceId].messages.push(\n+      {\n+        role: \"user\",\n+        content: prompt,\n+      },\n+      {\n+        role: \"assistant\",\n+        content: responseJson.text,\n+      }\n+    );\n+\n+    return acc;\n+  }, {});\n+\n+  return workspaceChatsMap;\n+}\n+\n+const exportMap = {\n+  json: {\n+    contentType: \"application/json\",\n+    func: convertToJSON,\n+  },\n+  csv: {\n+    contentType: \"text/csv\",\n+    func: convertToCSV,\n+  },\n+  jsonl: {\n+    contentType: \"application/jsonl\",\n+    func: convertToJSONL,\n+  },\n+};\n+\n+async function exportChatsAsType(workspaceChatsMap, format = \"jsonl\") {\n+  const { contentType, func } = exportMap.hasOwnProperty(format)\n+    ? exportMap[format]\n+    : exportMap.jsonl;\n+  return {\n+    contentType,\n+    data: await func(workspaceChatsMap),\n+  };\n+}\n+\n+module.exports = {\n+  prepareWorkspaceChatsForExport,\n+  exportChatsAsType,\n+};"
        },
        {
          "filename": "server/utils/middleware/multiUserProtected.js",
          "status": "modified",
          "additions": 51,
          "deletions": 21,
          "patch": "@@ -1,41 +1,71 @@\n const { SystemSettings } = require(\"../../models/systemSettings\");\n const { userFromSession } = require(\"../http\");\n-\n-const ROLES = [\"admin\", \"manager\"];\n+const ROLES = {\n+  all: \"<all>\",\n+  admin: \"admin\",\n+  manager: \"manager\",\n+  default: \"default\",\n+};\n+const DEFAULT_ROLES = [ROLES.admin, ROLES.admin];\n \n // Explicitly check that multi user mode is enabled as well as that the\n // requesting user has the appropriate role to modify or call the URL.\n-async function strictMultiUserRoleValid(request, response, next) {\n-  const multiUserMode =\n-    response.locals?.multiUserMode ?? (await SystemSettings.isMultiUserMode());\n-  if (!multiUserMode) return response.sendStatus(401).end();\n+function strictMultiUserRoleValid(allowedRoles = DEFAULT_ROLES) {\n+  return async (request, response, next) => {\n+    // If the access-control is allowable for all - skip validations and continue;\n+    if (allowedRoles.includes(ROLES.all)) {\n+      next();\n+      return;\n+    }\n \n-  const user =\n-    response.locals?.user ?? (await userFromSession(request, response));\n-  if (!ROLES.includes(user?.role)) return response.sendStatus(401).end();\n+    const multiUserMode =\n+      response.locals?.multiUserMode ??\n+      (await SystemSettings.isMultiUserMode());\n+    if (!multiUserMode) return response.sendStatus(401).end();\n \n-  next();\n+    const user =\n+      response.locals?.user ?? (await userFromSession(request, response));\n+    if (allowedRoles.includes(user?.role)) {\n+      next();\n+      return;\n+    }\n+    return response.sendStatus(401).end();\n+  };\n }\n \n // Apply role permission checks IF the current system is in multi-user mode.\n // This is relevant for routes that are shared between MUM and single-user mode.\n // Checks if the requesting user has the appropriate role to modify or call the URL.\n-async function flexUserRoleValid(request, response, next) {\n-  const multiUserMode =\n-    response.locals?.multiUserMode ?? (await SystemSettings.isMultiUserMode());\n-  if (!multiUserMode) {\n-    next();\n-    return;\n-  }\n+function flexUserRoleValid(allowedRoles = DEFAULT_ROLES) {\n+  return async (request, response, next) => {\n+    // If the access-control is allowable for all - skip validations and continue;\n+    // It does not matter if multi-user or not.\n+    if (allowedRoles.includes(ROLES.all)) {\n+      next();\n+      return;\n+    }\n \n-  const user =\n-    response.locals?.user ?? (await userFromSession(request, response));\n-  if (!ROLES.includes(user?.role)) return response.sendStatus(401).end();\n+    // Bypass if not in multi-user mode\n+    const multiUserMode =\n+      response.locals?.multiUserMode ??\n+      (await SystemSettings.isMultiUserMode());\n+    if (!multiUserMode) {\n+      next();\n+      return;\n+    }\n \n-  next();\n+    const user =\n+      response.locals?.user ?? (await userFromSession(request, response));\n+    if (allowedRoles.includes(user?.role)) {\n+      next();\n+      return;\n+    }\n+    return response.sendStatus(401).end();\n+  };\n }\n \n module.exports = {\n+  ROLES,\n   strictMultiUserRoleValid,\n   flexUserRoleValid,\n };"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 12,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "22d5891cccfc85c0e8fe6a3bc053445d1bce4cd6",
            "date": "2025-01-24T22:17:52Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "2ca22abc9cb1736794d91989b408d95328ea2f79",
            "date": "2025-01-24T21:41:37Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "48dcb22b25612191aba79209fa3d5f08f2454f98",
            "date": "2025-01-24T19:06:59Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "273d116586693d36366022da143c1159d3cd4ffc",
            "date": "2025-01-24T00:43:18Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "57f4f46a39b737f850ab5cf5ac5c24af2344a3b4",
            "date": "2025-01-24T00:35:38Z",
            "author_login": "shatfield4"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-284",
    "description": "If an attacked was given access to an instance with the admin or manager role there is no backend authentication that would prevent the attacked from creating a new user with an `admin` role and then be able to use this new account to have elevated privileges on the instance",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-03-02T22:15:49.813",
    "last_modified": "2024-11-21T08:47:23.423",
    "fix_date": "2024-01-22T22:14:01Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/9a237db3d1f66cdbcf5079599258f5fb251c5564",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/f69e3307-7b44-4776-ac60-2990990723ec",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/9a237db3d1f66cdbcf5079599258f5fb251c5564",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/f69e3307-7b44-4776-ac60-2990990723ec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.457761",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-26T07:34:32Z",
    "pushed_at": "2025-01-25T00:53:07Z",
    "size": 43115,
    "stars": 30921,
    "forks": 3104,
    "open_issues": 214,
    "watchers": 30921,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3082811,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:35:14.537302"
  }
}