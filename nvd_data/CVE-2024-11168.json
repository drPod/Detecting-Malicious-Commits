{
  "cve_id": "CVE-2024-11168",
  "github_data": {
    "repository": "python/cpython",
    "fix_commit": "29f348e232e82938ba2165843c448c2b291504c5",
    "related_commits": [
      "29f348e232e82938ba2165843c448c2b291504c5",
      "634ded45545ce8cbd6fd5d49785613dd7fa9b89e",
      "b2171a2fd41416cf68afd67460578631d755a550",
      "ddca2953191c67a12b1f19d6bca41016c6ae7132"
    ],
    "patch_url": "https://github.com/python/cpython/commit/29f348e232e82938ba2165843c448c2b291504c5.patch",
    "fix_commit_details": {
      "sha": "29f348e232e82938ba2165843c448c2b291504c5",
      "commit_date": "2023-05-10T00:18:35Z",
      "author": {
        "login": "JohnJamesUtley",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "gh-103848: Adds checks to ensure that bracketed hosts found by urlsplit are of IPv6 or IPvFuture format (#103849)",
        "length": 276,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 43,
        "deletions": 1
      },
      "files": [
        {
          "filename": "Lib/test/test_urlparse.py",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -1042,6 +1042,32 @@ def test_issue14072(self):\n         self.assertEqual(p2.scheme, 'tel')\n         self.assertEqual(p2.path, '+31641044153')\n \n+    def test_invalid_bracketed_hosts(self):\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[192.0.2.146]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[important.com:8000]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[v123r.IP]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[v12ae]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[v.IP]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[v123.]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[v]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[0439:23af::2309::fae7:1234]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@[0439:23af:2309::fae7:1234:2342:438e:192.0.2.146]/Path?Query')\n+        self.assertRaises(ValueError, urllib.parse.urlsplit, 'Scheme://user@]v6a.ip[/Path')\n+\n+    def test_splitting_bracketed_hosts(self):\n+        p1 = urllib.parse.urlsplit('scheme://user@[v6a.ip]/path?query')\n+        self.assertEqual(p1.hostname, 'v6a.ip')\n+        self.assertEqual(p1.username, 'user')\n+        self.assertEqual(p1.path, '/path')\n+        p2 = urllib.parse.urlsplit('scheme://user@[0439:23af:2309::fae7%test]/path?query')\n+        self.assertEqual(p2.hostname, '0439:23af:2309::fae7%test')\n+        self.assertEqual(p2.username, 'user')\n+        self.assertEqual(p2.path, '/path')\n+        p3 = urllib.parse.urlsplit('scheme://user@[0439:23af:2309::fae7:1234:192.0.2.146%test]/path?query')\n+        self.assertEqual(p3.hostname, '0439:23af:2309::fae7:1234:192.0.2.146%test')\n+        self.assertEqual(p3.username, 'user')\n+        self.assertEqual(p3.path, '/path')\n+\n     def test_port_casting_failure_message(self):\n         message = \"Port could not be cast to integer value as 'oracle'\"\n         p1 = urllib.parse.urlparse('http://Server=sde; Service=sde:oracle')"
        },
        {
          "filename": "Lib/urllib/parse.py",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -33,6 +33,7 @@\n import re\n import types\n import warnings\n+import ipaddress\n \n __all__ = [\"urlparse\", \"urlunparse\", \"urljoin\", \"urldefrag\",\n            \"urlsplit\", \"urlunsplit\", \"urlencode\", \"parse_qs\",\n@@ -427,6 +428,17 @@ def _checknetloc(netloc):\n             raise ValueError(\"netloc '\" + netloc + \"' contains invalid \" +\n                              \"characters under NFKC normalization\")\n \n+# Valid bracketed hosts are defined in\n+# https://www.rfc-editor.org/rfc/rfc3986#page-49 and https://url.spec.whatwg.org/\n+def _check_bracketed_host(hostname):\n+    if hostname.startswith('v'):\n+        if not re.match(r\"\\Av[a-fA-F0-9]+\\..+\\Z\", hostname):\n+            raise ValueError(f\"IPvFuture address is invalid\")\n+    else:\n+        ip = ipaddress.ip_address(hostname) # Throws Value Error if not IPv6 or IPv4\n+        if isinstance(ip, ipaddress.IPv4Address):\n+            raise ValueError(f\"An IPv4 address cannot be in brackets\")\n+\n # typed=True avoids BytesWarnings being emitted during cache key\n # comparison since this API supports both bytes and str input.\n @functools.lru_cache(typed=True)\n@@ -466,12 +478,14 @@ def urlsplit(url, scheme='', allow_fragments=True):\n                 break\n         else:\n             scheme, url = url[:i].lower(), url[i+1:]\n-\n     if url[:2] == '//':\n         netloc, url = _splitnetloc(url, 2)\n         if (('[' in netloc and ']' not in netloc) or\n                 (']' in netloc and '[' not in netloc)):\n             raise ValueError(\"Invalid IPv6 URL\")\n+        if '[' in netloc and ']' in netloc:\n+            bracketed_host = netloc.partition('[')[2].partition(']')[0]\n+            _check_bracketed_host(bracketed_host)\n     if allow_fragments and '#' in url:\n         url, fragment = url.split('#', 1)\n     if '?' in url:"
        },
        {
          "filename": "Misc/NEWS.d/next/Library/2023-04-26-09-54-25.gh-issue-103848.aDSnpR.rst",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+Add checks to ensure that ``[`` bracketed ``]`` hosts found by\n+:func:`urllib.parse.urlsplit` are of IPv6 or IPvFuture format."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d906bde250d59c396d8dab92285b832c66cdec27",
            "date": "2025-01-14T16:07:37Z",
            "author_login": "picnixz"
          },
          {
            "sha": "d786ac7f584f23c3206f4c86032bdabe83c17b51",
            "date": "2025-01-14T15:31:13Z",
            "author_login": "vstinner"
          },
          {
            "sha": "43ef9587ae869fd11711a3bb126e65afe9177342",
            "date": "2025-01-14T15:29:21Z",
            "author_login": "vstinner"
          },
          {
            "sha": "1598e18a659ef3a533caa0a79a489a3ed1d80bdd",
            "date": "2025-01-14T15:17:24Z",
            "author_login": "rffontenelle"
          },
          {
            "sha": "7fc0f86098c162e0230d5ef5ea62a883e41f9411",
            "date": "2025-01-14T15:12:21Z",
            "author_login": "hugovk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-918",
    "description": "The urllib.parse.urlsplit() and urlparse() functions improperly validated bracketed hosts (`[]`), allowing hosts that weren't IPv6 or IPvFuture. This behavior was not conformant to RFC 3986 and potentially enabled SSRF if a URL is processed by more than one URL parser.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-11-12T22:15:14.920",
    "last_modified": "2025-01-06T18:15:17.900",
    "fix_date": "2023-05-10T00:18:35Z"
  },
  "references": [
    {
      "url": "https://github.com/python/cpython/commit/29f348e232e82938ba2165843c448c2b291504c5",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/634ded45545ce8cbd6fd5d49785613dd7fa9b89e",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/b2171a2fd41416cf68afd67460578631d755a550",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/ddca2953191c67a12b1f19d6bca41016c6ae7132",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/103848",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/pull/103849",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/XPWB6XVZ5G5KGEI63M4AWLIEUF5BPH4T/",
      "source": "cna@python.org",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.288043",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cpython",
    "owner": "python",
    "created_at": "2017-02-10T19:23:51Z",
    "updated_at": "2025-01-14T11:40:35Z",
    "pushed_at": "2025-01-14T11:26:26Z",
    "size": 657526,
    "stars": 64721,
    "forks": 30871,
    "open_issues": 8974,
    "watchers": 64721,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "3.13",
      "main"
    ],
    "languages": {
      "Python": 35947988,
      "C": 20215174,
      "C++": 463381,
      "M4": 257753,
      "HTML": 206335,
      "Batchfile": 78178,
      "Shell": 71664,
      "Roff": 45666,
      "Makefile": 36295,
      "Objective-C": 33051,
      "Common Lisp": 24579,
      "PLSQL": 22886,
      "PowerShell": 20323,
      "Rich Text Format": 6905,
      "JavaScript": 4245,
      "Kotlin": 3800,
      "Assembly": 2552,
      "DTrace": 2196,
      "CSS": 1325,
      "XSLT": 1174,
      "CMake": 327,
      "VBScript": 70
    },
    "commit_activity": {
      "total_commits_last_year": 5718,
      "avg_commits_per_week": 109.96153846153847,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:09:03.245623"
  }
}