{
  "cve_id": "CVE-2024-11406",
  "github_data": {
    "repository": "django-cms/djangocms-attributes-field",
    "fix_commit": "fe68d29ab78db5885bc31b67cf0537f1f02b33ad",
    "related_commits": [
      "fe68d29ab78db5885bc31b67cf0537f1f02b33ad"
    ],
    "patch_url": "https://github.com/django-cms/djangocms-attributes-field/commit/fe68d29ab78db5885bc31b67cf0537f1f02b33ad.patch",
    "fix_commit_details": {
      "sha": "fe68d29ab78db5885bc31b67cf0537f1f02b33ad",
      "commit_date": "2024-11-19T07:54:47Z",
      "author": {
        "login": "fsbraun",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: Add form field validation from model field (#56)",
        "length": 241,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 225,
        "additions": 127,
        "deletions": 98
      },
      "files": [
        {
          "filename": ".github/workflows/lint.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -22,4 +22,4 @@ jobs:\n           python -m pip install --upgrade pip\n           pip install ruff\n       - name: Run Ruff\n-        run: ruff djangocms_attributes_field tests\n+        run: ruff check djangocms_attributes_field tests"
        },
        {
          "filename": ".github/workflows/publish-to-live-pypi.yml",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -9,14 +9,17 @@ jobs:\n   build-n-publish:\n     name: Build and publish Python \ud83d\udc0d distributions \ud83d\udce6 to pypi\n     runs-on: ubuntu-latest\n+    environment:\n+      name: pypi\n+      url: https://pypi.org/p/djangocms-attributes_field\n     permissions:\n       id-token: write\n     steps:\n     - uses: actions/checkout@v3\n     - name: Set up Python 3.10\n-      uses: actions/setup-python@v4\n+      uses: actions/setup-python@v5\n       with:\n-        python-version: '3.10'\n+        python-version: '3.12'\n \n     - name: Install pypa/build\n       run: >-\n@@ -36,6 +39,3 @@ jobs:\n     - name: Publish distribution \ud83d\udce6 to PyPI\n       if: startsWith(github.ref, 'refs/tags')\n       uses: pypa/gh-action-pypi-publish@release/v1\n-      with:\n-        user: __token__\n-        password: ${{ secrets.PYPI_API_TOKEN }}"
        },
        {
          "filename": ".github/workflows/publish-to-test-pypi.yml",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -9,12 +9,17 @@ jobs:\n   build-n-publish:\n     name: Build and publish Python \ud83d\udc0d distributions \ud83d\udce6 to TestPyPI\n     runs-on: ubuntu-latest\n+    environment:\n+      name: pypi\n+      url: https://test.pypi.org/p/djangocms-attributes_field\n+    permissions:\n+      id-token: write\n     steps:\n     - uses: actions/checkout@v3\n     - name: Set up Python 3.10\n-      uses: actions/setup-python@v4\n+      uses: actions/setup-python@v5\n       with:\n-        python-version: '3.10'\n+        python-version: '3.12'\n \n     - name: Install pypa/build\n       run: >-\n@@ -34,7 +39,5 @@ jobs:\n     - name: Publish distribution \ud83d\udce6 to Test PyPI\n       uses: pypa/gh-action-pypi-publish@release/v1\n       with:\n-        user: __token__\n-        password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n         repository_url: https://test.pypi.org/legacy/\n         skip_existing: true"
        },
        {
          "filename": ".github/workflows/test.yml",
          "status": "modified",
          "additions": 10,
          "deletions": 6,
          "patch": "@@ -8,17 +8,21 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        python-version: [ 3.9, \"3.10\", \"3.11\"]  # latest release minus two\n+        python-version: [ \"3.9\", \"3.10\", \"3.11\", \"3.12\"]  # latest release minus two\n         requirements-file: [\n-          dj32_cms311.txt,\n-          dj40_cms311.txt,\n-          dj41_cms311.txt,\n           dj42_cms311.txt,\n-          dj42_cms41.txt\n+          dj42_cms41.txt,\n+          dj50_cms41.txt,\n+          dj51_cms41.txt\n         ]\n         os: [\n           ubuntu-20.04,\n         ]\n+        exclude:\n+            - python-version: \"3.9\"\n+              requirements-file: dj50_cms41.txt\n+            - python-version: \"3.9\"\n+              requirements-file: dj51_cms41.txt\n \n     steps:\n     - uses: actions/checkout@v1\n@@ -34,7 +38,7 @@ jobs:\n         python setup.py install\n \n     - name: Run coverage\n-      run: coverage run setup.py test\n+      run: coverage run tests/settings.py\n \n     - name: Upload Coverage to Codecov\n       uses: codecov/codecov-action@v1"
        },
        {
          "filename": "CHANGELOG.rst",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -2,6 +2,16 @@\n Changelog\n =========\n \n+4.0.0 (2024-11-19)\n+==================\n+\n+* Moved validation to from AttributeField to AttributeFormField\n+* Added djangocms_attributes_fields.fields.default_excluded_keys to include\n+  keys that can execute javascript\n+* Added tests for Django 5.0, 5.1\n+* Dropped support for Django 3.2, 4.0, 4.1\n+* Dropped support for Python 3.6, 3.7, 3.8\n+\n 3.0.0 (2023-05-24)\n ==================\n "
        },
        {
          "filename": "README.rst",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -91,6 +91,13 @@ There is an optional parameter that can be used when declaring the field: ::\n     ``excluded_keys`` : This is a list of strings that will not be accepted as\n                         valid keys\n \n+Since version 4, the following keys are always excluded (see\n+``djangocms_attributes_fields.fields.default_excluded_keys``) to avoid\n+unwanted execution of javascript: ::\n+\n+    [\"src\", \"href\", \"data\", \"action\", \"on*\"]\n+\n+``'on*'`` represents any key that starts with ``'on'``.\n \n property: [field_name]_str\n ++++++++++++++++++++++++++\n@@ -160,7 +167,7 @@ You can run tests by executing::\n     virtualenv env\n     source env/bin/activate\n     pip install -r tests/requirements.txt\n-    python setup.py test\n+    python tests/settings.py\n \n \n .. |pypi| image:: https://badge.fury.io/py/djangocms-attributes-field.svg"
        },
        {
          "filename": "djangocms_attributes_field/__init__.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-__version__ = '3.0.0'\n+__version__ = '4.0.0'"
        },
        {
          "filename": "djangocms_attributes_field/fields.py",
          "status": "modified",
          "additions": 49,
          "deletions": 43,
          "patch": "@@ -14,12 +14,16 @@\n regex_key_validator = RegexValidator(regex=r'^[a-z][-a-z0-9_:]*\\Z',\n                                      flags=re.IGNORECASE, code='invalid')\n \n+default_excluded_keys = [\n+    \"src\", \"href\", \"data\", \"action\", \"on*\",\n+]\n \n class AttributesFormField(forms.CharField):\n     empty_values = [None, '']\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault('widget', AttributesWidget)\n+        self.excluded_keys = kwargs.pop('excluded_keys', []) + default_excluded_keys\n         super().__init__(*args, **kwargs)\n \n     def to_python(self, value):\n@@ -37,6 +41,49 @@ def validate(self, value):\n         # This is required in older django versions.\n         if value in self.empty_values and self.required:\n             raise forms.ValidationError(self.error_messages['required'], code='required')\n+        if isinstance(value, dict):\n+            for key, val in value.items():\n+                self.validate_key(key)\n+                self.validate_value(key, val)\n+\n+    def validate_key(self, key):\n+        \"\"\"\n+        A key must start with a letter, but can otherwise contain letters,\n+        numbers, dashes, colons or underscores. It must not also be part of\n+        `excluded_keys` as configured in the field.\n+\n+        :param key: (str) The key to validate\n+        \"\"\"\n+        # Verify the key is not one of `excluded_keys`.\n+        for excluded_key in self.excluded_keys:\n+            if key.lower() == excluded_key or excluded_key.endswith(\"*\") and key.lower().startswith(excluded_key[:-1]):\n+                raise ValidationError(\n+                    _('\"{key}\" is excluded by configuration and cannot be used as '\n+                      'a key.').format(key=key))\n+        # Also check that it fits our permitted syntax\n+        try:\n+            regex_key_validator(key)\n+        except ValidationError:\n+            # Seems silly to catch one then raise another ValidationError, but\n+            # the RegExValidator doesn't use placeholders in its error message.\n+            raise ValidationError(\n+                _('\"{key}\" is not a valid key. Keys must start with at least '\n+                  'one letter and consist only of the letters, numbers, '\n+                  'underscores or hyphens.').format(key=key))\n+\n+    def validate_value(self, key, value):\n+        \"\"\"\n+        A value can be anything that can be JSON-ified.\n+\n+        :param key: (str) The key of the value\n+        :param value: (str) The value to validate\n+        \"\"\"\n+        try:\n+            json.dumps(value)\n+        except (TypeError, ValueError):\n+            raise ValidationError(\n+                _('The value for the key \"{key}\" is invalid. Please enter a '\n+                  'value that can be represented in JSON.').format(key=key))\n \n \n class AttributesField(models.Field):\n@@ -64,7 +111,7 @@ def __init__(self, *args, **kwargs):\n             kwargs['default'] = kwargs.get('default', dict)\n         excluded_keys = kwargs.pop('excluded_keys', [])\n         # Note we accept uppercase letters in the param, but the comparison\n-        # is not case sensitive. So, we coerce the input to lowercase here.\n+        # is not case-sensitive. So, we coerce the input to lowercase here.\n         self.excluded_keys = [key.lower() for key in excluded_keys]\n         super().__init__(*args, **kwargs)\n         self.validate(self.get_default(), None)\n@@ -75,6 +122,7 @@ def formfield(self, **kwargs):\n             'widget': AttributesWidget\n         }\n         defaults.update(**kwargs)\n+        defaults[\"excluded_keys\"] = self.excluded_keys\n         return super().formfield(**defaults)\n \n     def from_db_value(self, value,\n@@ -134,48 +182,6 @@ def validate(self, value, model_instance):\n         except ValueError:\n             raise ValidationError(self.error_messages['invalid'] % value)\n \n-        for key, val in value.items():\n-            self.validate_key(key)\n-            self.validate_value(key, val)\n-\n-    def validate_key(self, key):\n-        \"\"\"\n-        A key must start with a letter, but can otherwise contain letters,\n-        numbers, dashes, colons or underscores. It must not also be part of\n-        `excluded_keys` as configured in the field.\n-\n-        :param key: (str) The key to validate\n-        \"\"\"\n-        # Verify the key is not one of `excluded_keys`.\n-        if key.lower() in self.excluded_keys:\n-            raise ValidationError(\n-                _('\"{key}\" is excluded by configuration and cannot be used as '\n-                  'a key.').format(key=key))\n-        # Also check that it fits our permitted syntax\n-        try:\n-            regex_key_validator(key)\n-        except ValidationError:\n-            # Seems silly to catch one then raise another ValidationError, but\n-            # the RegExValidator doesn't use placeholders in its error message.\n-            raise ValidationError(\n-                _('\"{key}\" is not a valid key. Keys must start with at least '\n-                  'one letter and consist only of the letters, numbers, '\n-                  'underscores or hyphens.').format(key=key))\n-\n-    def validate_value(self, key, value):\n-        \"\"\"\n-        A value can be anything that can be JSON-ified.\n-\n-        :param key: (str) The key of the value\n-        :param value: (str) The value to validate\n-        \"\"\"\n-        try:\n-            json.dumps(value)\n-        except (TypeError, ValueError):\n-            raise ValidationError(\n-                _('The value for the key \"{key}\" is invalid. Please enter a '\n-                  'value that can be represented in JSON.').format(key=key))\n-\n     def value_to_string(self, obj):\n         return self.value_from_object(obj)\n "
        },
        {
          "filename": "tests/requirements/dj32_cms310.txt",
          "status": "removed",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -1,4 +0,0 @@\n--r base.txt\n-\n-Django>=3.2,<4.0\n-django-cms>=3.10,<3.11"
        },
        {
          "filename": "tests/requirements/dj32_cms311.txt",
          "status": "removed",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -1,4 +0,0 @@\n--r base.txt\n-\n-Django>=3.2,<4\n-django-cms>=3.11,<4"
        },
        {
          "filename": "tests/requirements/dj32_cms39.txt",
          "status": "removed",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -1,4 +0,0 @@\n--r base.txt\n-\n-Django>=3.2,<4.0\n-django-cms>=3.9,<3.10"
        },
        {
          "filename": "tests/requirements/dj40_cms311.txt",
          "status": "removed",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -1,4 +0,0 @@\n--r base.txt\n-\n-Django>=4.0,<4.1\n-django-cms>=3.11.1,<4"
        },
        {
          "filename": "tests/requirements/dj41_cms311.txt",
          "status": "removed",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -1,4 +0,0 @@\n--r base.txt\n-\n-Django>=4.1,<4.2\n-django-cms>=3.11.1,<4"
        },
        {
          "filename": "tests/requirements/dj50_cms41.txt",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+-r base.txt\n+\n+Django>=5.0,<5.1\n+django-cms>=4.1,<4.2"
        },
        {
          "filename": "tests/requirements/dj51_cms41.txt",
          "status": "added",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -0,0 +1,4 @@\n+-r base.txt\n+\n+Django>=5.1,<5.2\n+django-cms>=4.1,<4.2"
        },
        {
          "filename": "tests/test_fields.py",
          "status": "modified",
          "additions": 20,
          "deletions": 6,
          "patch": "@@ -15,7 +15,7 @@ class Noop:\n class KeyValidationTests(TestCase):\n \n     def test_validate_key(self):\n-        field = AttributesField()\n+        field = AttributesFormField()\n         # Normal, expected patterns\n         try:\n             field.validate_key('target')\n@@ -48,21 +48,35 @@ def test_validate_key(self):\n \n     def test_excluded_keys(self):\n         # First prove that the keys we're about to test would normally pass\n-        field = AttributesField()\n+        field = AttributesFormField()\n         try:\n-            field.validate_key('href')\n-            field.validate_key('src')\n+\n+            field.validate_key('title')\n+            field.validate_key('data-test')\n         except ValidationError:\n             self.fail('Keys that pass have failed.')\n \n         # Now show that they no longer pass if explicitly exclude\n-        field = AttributesField(excluded_keys=['href', 'src', ])\n+        field = AttributesFormField(excluded_keys=['title', 'data-test', ])\n \n         with self.assertRaises(ValidationError):\n-            field.validate_key('href')\n+            field.validate_key('title')\n         with self.assertRaises(ValidationError):\n             field.validate_key('src')\n \n+    def test_default_excluded_keys(self):\n+        from djangocms_attributes_field.fields import default_excluded_keys\n+\n+        field = AttributesFormField()\n+        for key in default_excluded_keys:\n+            with self.subTest(key=key):\n+                with self.assertRaises(ValidationError):\n+                    field.validate_key(key)\n+\n+        with self.subTest(key=\"onsomething\"):\n+            with self.assertRaises(ValidationError):\n+                field.validate_key(key)\n+\n \n class AttributesFieldsTestCase(TestCase):\n "
        },
        {
          "filename": "tox.ini",
          "status": "modified",
          "additions": 8,
          "deletions": 11,
          "patch": "@@ -1,10 +1,7 @@\n [tox]\n envlist =\n-    flake8\n-    isort\n-    py{35,36,37,38}-dj{22}-cms{37,38}\n-    py{36,37,38}-dj{30}-cms{37,38}\n-    py{36,37,38}-dj{31}-cms{38}\n+    py{39,310,311}-dj{42}-cms{311,41}\n+    py{310,311,312}-dj{50,51}-cms{41}\n \n skip_missing_interpreters=True\n \n@@ -40,15 +37,15 @@ known_django = django\n [testenv]\n deps =\n     -r{toxinidir}/tests/requirements/base.txt\n-    dj22: Django>=2.2,<3.0\n-    dj30: Django>=3.0,<3.1\n-    dj31: Django>=3.1,<3.2\n-    cms37: django-cms>=3.7,<3.8\n-    cms38: django-cms>=3.8,<3.9\n+    dj42: Django>=4.2,<5.0\n+    dj50: Django>=5.0,<5.1\n+    dj51: Django>=5.1,<5.2\n+    cms311: django-cms>=3.11,<4\n+    cms41: django-cms>=4.1,<4.2\n commands =\n     {envpython} --version\n     {env:COMMAND:coverage} erase\n-    {env:COMMAND:coverage} run setup.py test\n+    {env:COMMAND:coverage} run tests/settings.py\n     {env:COMMAND:coverage} report\n \n [testenv:flake8]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 5,
        "dependency_files": 0,
        "test_files": 10,
        "unique_directories": 5,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "47864a0898d84a1784127908e78cfd0f0a78a5a2",
            "date": "2024-11-22T08:56:06Z",
            "author_login": "vinitkumar"
          },
          {
            "sha": "ebae6655385d8cfb78e0a051c745158aa01e597c",
            "date": "2024-11-22T02:13:13Z",
            "author_login": "jfalfaro"
          },
          {
            "sha": "fe68d29ab78db5885bc31b67cf0537f1f02b33ad",
            "date": "2024-11-19T07:54:47Z",
            "author_login": "fsbraun"
          },
          {
            "sha": "73007ebc59a4386cc1d4057e16a42d59d90525bd",
            "date": "2023-05-27T06:46:32Z",
            "author_login": "fsbraun"
          },
          {
            "sha": "dd5c7ea66826ec32391f18b16e4eaa995b0e387d",
            "date": "2023-05-27T06:44:33Z",
            "author_login": "fsbraun"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in django CMS Association django CMS Attributes Fields allows Stored XSS.This issue affects django CMS Attributes Fields: before 4.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-20T12:15:18.890",
    "last_modified": "2024-11-21T13:57:24.187",
    "fix_date": "2024-11-19T07:54:47Z"
  },
  "references": [
    {
      "url": "https://github.com/django-cms/djangocms-attributes-field/commit/fe68d29ab78db5885bc31b67cf0537f1f02b33ad",
      "source": "iletisim@usom.gov.tr",
      "tags": []
    },
    {
      "url": "https://iltosec.com/blog/post/djangocms-attributes-field-300-stored-xss-vulnerability/",
      "source": "iletisim@usom.gov.tr",
      "tags": []
    },
    {
      "url": "https://pypi.org/project/djangocms-attributes-field/#history",
      "source": "iletisim@usom.gov.tr",
      "tags": []
    },
    {
      "url": "https://www.django-cms.org/en/blog/2024/11/19/security-updates-for-django-filer-and-django-cms-attributes-field/",
      "source": "iletisim@usom.gov.tr",
      "tags": []
    },
    {
      "url": "https://www.usom.gov.tr/bildirim/tr-24-1864",
      "source": "iletisim@usom.gov.tr",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:31.269364",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "djangocms-attributes-field",
    "owner": "django-cms",
    "created_at": "2016-06-15T14:48:07Z",
    "updated_at": "2024-11-22T08:56:11Z",
    "pushed_at": "2024-11-22T08:56:11Z",
    "size": 207,
    "stars": 26,
    "forks": 17,
    "open_issues": 0,
    "watchers": 26,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 31994,
      "HTML": 203
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T19:56:42.205591"
  }
}