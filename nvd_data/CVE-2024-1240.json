{
  "cve_id": "CVE-2024-1240",
  "github_data": {
    "repository": "pyload/pyload",
    "fix_commit": "fe94451dcc2be90b3889e2fd9d07b483c8a6dccd",
    "related_commits": [
      "fe94451dcc2be90b3889e2fd9d07b483c8a6dccd"
    ],
    "patch_url": "https://github.com/pyload/pyload/commit/fe94451dcc2be90b3889e2fd9d07b483c8a6dccd.patch",
    "fix_commit_details": {
      "sha": "fe94451dcc2be90b3889e2fd9d07b483c8a6dccd",
      "commit_date": "2024-02-05T22:19:52Z",
      "author": {
        "login": "GammaC0de",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix GHSA-g3cm-qg2v-2hj5 security advisory",
        "length": 41,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 24,
        "deletions": 20
      },
      "files": [
        {
          "filename": "src/pyload/webui/app/blueprints/app_blueprint.py",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -47,7 +47,7 @@ def robots():\n def login():\n     api = flask.current_app.config[\"PYLOAD_API\"]\n \n-    next = get_redirect_url(fallback=flask.url_for(\"app.dashboard\"))\n+    next_url = get_redirect_url(fallback=\"app.dashboard\")\n \n     if flask.request.method == \"POST\":\n         user = flask.request.form[\"username\"]\n@@ -57,14 +57,14 @@ def login():\n         sanitized_user = user.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\")\n         if not user_info:\n             log.error(f\"Login failed for user '{sanitized_user}'\")\n-            return render_template(\"login.html\", next=next, errors=True)\n+            return render_template(\"login.html\", errors=True)\n \n         set_session(user_info)\n         log.info(f\"User '{sanitized_user}' successfully logged in\")\n         flask.flash(\"Logged in successfully\")\n \n     if is_authenticated():\n-        return flask.redirect(next)\n+        return flask.redirect(next_url)\n \n     if api.get_config_value(\"webui\", \"autologin\"):\n         allusers = api.get_all_userdata()\n@@ -74,9 +74,9 @@ def login():\n             # NOTE: Double-check authentication here because if session[name] is empty,\n             #       next login_required redirects here again and all loop out.\n             if is_authenticated():\n-                return flask.redirect(next)\n+                return flask.redirect(next_url)\n \n-    return render_template(\"login.html\", next=next)\n+    return render_template(\"login.html\")\n \n \n @bp.route(\"/logout\", endpoint=\"logout\")"
        },
        {
          "filename": "src/pyload/webui/app/helpers.py",
          "status": "modified",
          "additions": 19,
          "deletions": 15,
          "patch": "@@ -2,10 +2,11 @@\n \n import json\n from functools import wraps\n-from urllib.parse import unquote, urljoin, urlparse\n+from urllib.parse import urljoin, urlparse\n \n import flask\n import flask_themes2\n+import werkzeug.routing.exceptions\n from pyload.core.api import Perms, Role, has_permission\n \n \n@@ -33,22 +34,25 @@ def loads(self, s, **kwargs):\n \n #: Checks if location belongs to same host address\n def is_safe_url(location):\n-    ref_url = urlparse(flask.request.host_url)\n-    test_url = urlparse(urljoin(flask.request.host_url, location))\n-    return test_url.scheme in ('http', 'https') and ref_url.netloc == test_url.netloc\n+    location_urlp = urlparse(location)\n+    #: if relative URL then must start with \"/\"\n+    if not location_urlp.netloc and location[0] != \"/\":\n+        return False\n+    host_urlp = urlparse(flask.request.host_url)\n+    test_urlp = urlparse(urljoin(flask.request.host_url, location))\n+    return test_urlp.scheme in ('http', 'https') and host_urlp.netloc == test_urlp.netloc\n \n \n def get_redirect_url(fallback=None):\n-    login_url = urljoin(flask.request.url_root, flask.url_for('app.login'))\n-    request_url = unquote(flask.request.url)\n-    for location in flask.request.values.get(\"next\"), flask.request.referrer:\n-        if not location:\n-            continue\n-        if location in (request_url, login_url):  # don't redirect to same location\n-            continue\n-        if is_safe_url(location):\n-            return location\n-    return fallback\n+    next_arg = flask.request.values.get(\"next\")\n+    redirect_url = flask.url_for(fallback)\n+    if next_arg and next_arg != \"login\":  # don't redirect to same location\n+        try:\n+            redirect_url = flask.url_for(f\"app.{next_arg}\")\n+        except werkzeug.routing.exceptions.BuildError:\n+            pass\n+\n+    return urljoin(flask.request.url_root, redirect_url)\n \n \n def render_base(messages):\n@@ -206,7 +210,7 @@ def wrapper(*args, **kwargs):\n                 else:\n                     location = flask.url_for(\n                         \"app.login\",\n-                        next=flask.request.url\n+                        next=flask.request.endpoint.split(\".\")[-1]\n                     )\n                     response = flask.redirect(location)\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "caf2e75fa13ae82e0b5a336d2ceeca0c943b94cb",
            "date": "2025-01-12T23:31:47Z",
            "author_login": "GammaC0de"
          },
          {
            "sha": "52b220773a9eb94c71bee7dcd91f361911ee4279",
            "date": "2025-01-12T22:39:00Z",
            "author_login": "GammaC0de"
          },
          {
            "sha": "d2764813ff8e23da428aa4b4e2d0e66f1d78675b",
            "date": "2025-01-12T19:36:02Z",
            "author_login": "izderadicka"
          },
          {
            "sha": "9fb24de85dbe66277a35c41341ae5ec58b596174",
            "date": "2025-01-07T21:58:04Z",
            "author_login": "GammaC0de"
          },
          {
            "sha": "b35f28363a11acc26496f1b4ab569dd6dc6b41f9",
            "date": "2025-01-04T19:59:59Z",
            "author_login": "GammaC0de"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-601",
    "description": "An open redirection vulnerability exists in pyload/pyload version 0.5.0. The vulnerability is due to improper handling of the 'next' parameter in the login functionality. An attacker can exploit this vulnerability to redirect users to malicious sites, which can be used for phishing or other malicious activities. The issue is fixed in pyload-ng 0.5.0b3.dev79.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-15T11:15:10.773",
    "last_modified": "2024-11-19T19:04:53.913",
    "fix_date": "2024-02-05T22:19:52Z"
  },
  "references": [
    {
      "url": "https://github.com/pyload/pyload/commit/fe94451dcc2be90b3889e2fd9d07b483c8a6dccd",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/eef9513d-ccc3-4030-b574-374c5e7b887e",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.304452",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pyload",
    "owner": "pyload",
    "created_at": "2013-02-10T13:12:02Z",
    "updated_at": "2025-01-14T05:38:50Z",
    "pushed_at": "2025-01-12T23:32:00Z",
    "size": 49400,
    "stars": 3387,
    "forks": 715,
    "open_issues": 205,
    "watchers": 3387,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "main",
      "old/master",
      "old/testing",
      "stable"
    ],
    "languages": {
      "Python": 1905441,
      "HTML": 175688,
      "JavaScript": 169537,
      "CSS": 44576,
      "Dockerfile": 3981
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:55:09.409480"
  }
}