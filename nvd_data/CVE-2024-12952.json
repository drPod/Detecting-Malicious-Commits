{
  "cve_id": "CVE-2024-12952",
  "github_data": {
    "repository": "melMass/comfy_mtb",
    "fix_commit": "d6e004cce2c32f8e48b868e66b89f82da4887dc3",
    "related_commits": [
      "d6e004cce2c32f8e48b868e66b89f82da4887dc3"
    ],
    "patch_url": "https://github.com/melMass/comfy_mtb/commit/d6e004cce2c32f8e48b868e66b89f82da4887dc3.patch",
    "fix_commit_details": {
      "sha": "d6e004cce2c32f8e48b868e66b89f82da4887dc3",
      "commit_date": "2024-12-21T23:22:24Z",
      "author": {
        "login": "melMass",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: \ud83d\udc1b limit packages allowed to be installed from API",
        "length": 100,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 115,
        "additions": 76,
        "deletions": 39
      },
      "files": [
        {
          "filename": "__init__.py",
          "status": "modified",
          "additions": 2,
          "deletions": 10,
          "patch": "@@ -34,6 +34,7 @@\n from server import PromptServer\n \n from .endpoint import endlog\n+from .install import get_node_dependencies\n from .log import blue_text, cyan_text, get_label, get_summary, log\n from .utils import comfy_dir, here\n \n@@ -240,16 +241,7 @@ def classname_to_wiki(s: str):\n         img_cache = TTLCache(maxsize=100, ttl=5)  # 1 min TTL\n         prompt_cache = TTLCache(maxsize=100, ttl=5)  # 1 min TTL\n \n-    restore_deps = [\"basicsr\"]\n-    onnx_deps = [\"onnxruntime\"]\n-    swap_deps = [\"insightface\"] + onnx_deps\n-    node_dependency_mapping = {\n-        \"QrCode\": [\"qrcode\"],\n-        \"DeepBump\": onnx_deps,\n-        \"FaceSwap\": swap_deps,\n-        \"LoadFaceSwapModel\": swap_deps,\n-        \"LoadFaceAnalysisModel\": restore_deps,\n-    }\n+    node_dependency_mapping = get_node_dependencies()\n \n     PromptServer.instance.app.router.add_static(\n         \"/mtb-assets/\", path=(here / \"html\").as_posix()"
        },
        {
          "filename": "endpoint.py",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -7,6 +7,7 @@\n import folder_paths\n from aiohttp import web\n \n+from .install import get_node_dependencies\n from .log import mklog\n from .utils import (\n     SortMode,\n@@ -25,14 +26,22 @@\n import_install(\"requirements\")\n \n \n-def ACTIONS_installDependency(dependency_names=None):\n+def ACTIONS_installDependency(dependency_names: list[str] | None = None):\n     if dependency_names is None:\n         # return web.Response(text=\"No dependency name provided\", status=400)\n         return {\"error\": \"No dependency name provided\"}\n \n     endlog.debug(f\"Received Install Dependency request for {dependency_names}\")\n     # reqs = []\n     resolved_names = [reqs_map.get(name, name) for name in dependency_names]\n+    allowed_deps = list(\n+        {d for dep in get_node_dependencies().values() for d in dep}\n+    )\n+    for dep in dependency_names:\n+        if dep not in allowed_deps:\n+            return {\n+                \"error\": f\"Unknown dependency: {dep}, you can only use this endpoint to install {allowed_deps}\"\n+            }\n     try:\n         run_command(\n             [Path(sys.executable), \"-m\", \"pip\", \"install\"] + resolved_names"
        },
        {
          "filename": "install.py",
          "status": "modified",
          "additions": 64,
          "deletions": 28,
          "patch": "@@ -43,10 +43,28 @@\n     \"tb-nightly\": \"tensorboard\",\n     \"protobuf\": \"google.protobuf\",\n     \"qrcode[pil]\": \"qrcode\",\n-    \"requirements-parser\": \"requirements\"\n+    \"requirements-parser\": \"requirements\",\n     # Add more mappings as needed\n }\n \n+\n+def get_node_dependencies():\n+    restore_deps = [\"basicsr\"]\n+    onnx_deps = [\"onnxruntime\"]\n+    swap_deps = [\"insightface\"] + onnx_deps\n+    quant_deps = [\"bitsandbytes\"]\n+    io_deps = [\"av\"]\n+    return {\n+        \"QrCode\": [\"qrcode\"],\n+        \"DeepBump\": onnx_deps,\n+        \"FaceSwap\": swap_deps,\n+        \"LoadFaceSwapModel\": swap_deps,\n+        \"LoadFaceAnalysisModel\": restore_deps,\n+        \"Quantize\": quant_deps,\n+        \"SaveGif\": io_deps,\n+    }\n+\n+\n # endregion\n \n # region ansi\n@@ -124,12 +142,12 @@ def print_formatted(text, *formats, color=None, background=None, **kwargs):\n     header = \"[mtb install] \"\n \n     # Handle console encoding for Unicode characters (utf-8)\n-    encoded_header = header.encode(sys.stdout.encoding, errors=\"replace\").decode(\n-        sys.stdout.encoding\n-    )\n-    encoded_text = formatted_text.encode(sys.stdout.encoding, errors=\"replace\").decode(\n-        sys.stdout.encoding\n-    )\n+    encoded_header = header.encode(\n+        sys.stdout.encoding, errors=\"replace\"\n+    ).decode(sys.stdout.encoding)\n+    encoded_text = formatted_text.encode(\n+        sys.stdout.encoding, errors=\"replace\"\n+    ).decode(sys.stdout.encoding)\n \n     print(\n         \" \" * len(encoded_header)\n@@ -163,7 +181,9 @@ def run_command(cmd, ignored_lines_start=None):\n     try:\n         _run_command(shell_cmd, ignored_lines_start)\n     except subprocess.CalledProcessError as e:\n-        print(f\"Command failed with return code: {e.returncode}\", file=sys.stderr)\n+        print(\n+            f\"Command failed with return code: {e.returncode}\", file=sys.stderr\n+        )\n         print(e.stderr.strip(), file=sys.stderr)\n \n     except KeyboardInterrupt:\n@@ -238,7 +258,7 @@ def suppress_std():\n def get_local_version():\n     init_file = os.path.join(os.path.dirname(__file__), \"__init__.py\")\n     if os.path.isfile(init_file):\n-        with open(init_file, \"r\") as f:\n+        with open(init_file) as f:\n             tree = ast.parse(f.read())\n             for node in ast.walk(tree):\n                 if isinstance(node, ast.Assign):\n@@ -256,13 +276,16 @@ def download_file(url, file_name):\n     with requests.get(url, stream=True) as response:\n         response.raise_for_status()\n         total_size = int(response.headers.get(\"content-length\", 0))\n-        with open(file_name, \"wb\") as file, tqdm(\n-            desc=file_name.stem,\n-            total=total_size,\n-            unit=\"B\",\n-            unit_scale=True,\n-            unit_divisor=1024,\n-        ) as progress_bar:\n+        with (\n+            open(file_name, \"wb\") as file,\n+            tqdm(\n+                desc=file_name.stem,\n+                total=total_size,\n+                unit=\"B\",\n+                unit_scale=True,\n+                unit_divisor=1024,\n+            ) as progress_bar,\n+        ):\n             for chunk in response.iter_content(chunk_size=8192):\n                 file.write(chunk)\n                 progress_bar.update(len(chunk))\n@@ -302,15 +325,19 @@ def import_or_install(requirement, dry=False):\n     pip_install_name = pip_name + pip_spec\n \n     if not installed:\n-        print_formatted(f\"Installing package {pip_name}...\", \"italic\", color=\"yellow\")\n+        print_formatted(\n+            f\"Installing package {pip_name}...\", \"italic\", color=\"yellow\"\n+        )\n         if dry:\n             print_formatted(\n                 f\"Dry-run: Package {pip_install_name} would be installed (import name: '{import_name}').\",\n                 color=\"yellow\",\n             )\n         else:\n             try:\n-                run_command([executable, \"-m\", \"pip\", \"install\", pip_install_name])\n+                run_command(\n+                    [executable, \"-m\", \"pip\", \"install\", pip_install_name]\n+                )\n                 print_formatted(\n                     f\"Package {pip_install_name} installed successfully using pip package name  (import name: '{import_name}')\",\n                     \"bold\",\n@@ -326,13 +353,9 @@ def import_or_install(requirement, dry=False):\n \n def get_github_assets(tag=None):\n     if tag:\n-        tag_url = (\n-            f\"https://api.github.com/repos/{repo_owner}/{repo_name}/releases/tags/{tag}\"\n-        )\n+        tag_url = f\"https://api.github.com/repos/{repo_owner}/{repo_name}/releases/tags/{tag}\"\n     else:\n-        tag_url = (\n-            f\"https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest\"\n-        )\n+        tag_url = f\"https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest\"\n     response = requests.get(tag_url)\n     if response.status_code == 404:\n         # print_formatted(\n@@ -361,7 +384,9 @@ def get_github_assets(tag=None):\n def main():\n     if len(sys.argv) == 1:\n         print_formatted(\n-            \"mtb doesn't need an install script anymore.\", \"italic\", color=\"yellow\"\n+            \"mtb doesn't need an install script anymore.\",\n+            \"italic\",\n+            color=\"yellow\",\n         )\n         return\n     if all(arg not in (\"-p\", \"--path\") for arg in sys.argv):\n@@ -397,8 +422,12 @@ def main():\n         else:\n             repo_dir = clone_dir / repo_name\n             if not repo_dir.exists():\n-                print_formatted(f\"Cloning to {repo_dir}...\", \"italic\", color=\"yellow\")\n-                run_command([\"git\", \"clone\", \"--recursive\", repo_url, repo_dir])\n+                print_formatted(\n+                    f\"Cloning to {repo_dir}...\", \"italic\", color=\"yellow\"\n+                )\n+                run_command(\n+                    [\"git\", \"clone\", \"--recursive\", repo_url, repo_dir]\n+                )\n             else:\n                 print_formatted(\n                     f\"Directory {repo_dir} already exists, we will update it...\"\n@@ -409,7 +438,14 @@ def main():\n \n     print_formatted(\"Checking environment...\", \"italic\", color=\"yellow\")\n     missing_deps = []\n-    install_cmd = [executable, \"-m\", \"pip\", \"install\", \"-r\", \"requirements.txt\"]\n+    install_cmd = [\n+        executable,\n+        \"-m\",\n+        \"pip\",\n+        \"install\",\n+        \"-r\",\n+        \"requirements.txt\",\n+    ]\n     run_command(install_cmd)\n \n     print_formatted("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b7ca8ed1c6e117b71afd7696f55dcc3dbd5bad08",
            "date": "2024-12-30T20:36:35Z",
            "author_login": "melMass"
          },
          {
            "sha": "4aad5c3b9d479a1603a21b561cc3563a76abe470",
            "date": "2024-12-30T17:45:10Z",
            "author_login": "melMass"
          },
          {
            "sha": "d61da304099ff5e4528e4beb1ecc2eb83cabaaa1",
            "date": "2024-12-30T17:37:43Z",
            "author_login": "melMass"
          },
          {
            "sha": "6851da6638a886f803ef18063fc611aa946a550b",
            "date": "2024-12-27T22:39:48Z",
            "author_login": "robinjhuang"
          },
          {
            "sha": "0eeb707f34f51142def8e0ef7d351ee5028cb5e0",
            "date": "2024-12-30T17:29:28Z",
            "author_login": "melMass"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-74",
    "description": "A vulnerability classified as critical was found in melMass comfy_mtb up to 0.1.4. Affected by this vulnerability is the function run_command of the file comfy_mtb/endpoint.py of the component Dependency Handler. The manipulation leads to code injection. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The patch is named d6e004cce2c32f8e48b868e66b89f82da4887dc3. It is recommended to apply a patch to fix this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-12-26T13:15:06.727",
    "last_modified": "2024-12-26T16:15:10.540",
    "fix_date": "2024-12-21T23:22:24Z"
  },
  "references": [
    {
      "url": "https://github.com/melMass/comfy_mtb/commit/d6e004cce2c32f8e48b868e66b89f82da4887dc3",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://github.com/melMass/comfy_mtb/issues/224",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://github.com/melMass/comfy_mtb/issues/224#issuecomment-2552664778",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://github.com/melMass/comfy_mtb/issues/224#issuecomment-2553432365",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://vuldb.com/?ctiid.289315",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://vuldb.com/?id.289315",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://vuldb.com/?submit.468683",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://github.com/melMass/comfy_mtb/issues/224",
      "source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
      "tags": []
    },
    {
      "url": "https://github.com/melMass/comfy_mtb/issues/224#issuecomment-2552664778",
      "source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
      "tags": []
    },
    {
      "url": "https://github.com/melMass/comfy_mtb/issues/224#issuecomment-2553432365",
      "source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:52.909919",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "comfy_mtb",
    "owner": "melMass",
    "created_at": "2023-06-03T15:52:29Z",
    "updated_at": "2025-01-13T09:26:46Z",
    "pushed_at": "2025-01-09T14:04:19Z",
    "size": 7146,
    "stars": 489,
    "forks": 57,
    "open_issues": 26,
    "watchers": 489,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 375247,
      "JavaScript": 176697,
      "Nushell": 4467,
      "CSS": 3572,
      "Lua": 345,
      "Nu": 80
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:51:47.014110"
  }
}