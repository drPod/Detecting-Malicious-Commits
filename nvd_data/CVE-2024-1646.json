{
  "cve_id": "CVE-2024-1646",
  "github_data": {
    "repository": "parisneo/lollms-webui",
    "fix_commit": "02e829b5653a1aa5dbbe9413ec84f96caa1274e8",
    "related_commits": [
      "02e829b5653a1aa5dbbe9413ec84f96caa1274e8",
      "02e829b5653a1aa5dbbe9413ec84f96caa1274e8"
    ],
    "patch_url": "https://github.com/parisneo/lollms-webui/commit/02e829b5653a1aa5dbbe9413ec84f96caa1274e8.patch",
    "fix_commit_details": {
      "sha": "02e829b5653a1aa5dbbe9413ec84f96caa1274e8",
      "commit_date": "2024-02-26T00:55:44Z",
      "author": {
        "login": "ParisNeo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Huge upgrade, discussion system is now in lollms core",
        "length": 53,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 1634,
        "additions": 136,
        "deletions": 1498
      },
      "files": [
        {
          "filename": "api/db.py",
          "status": "removed",
          "additions": 0,
          "deletions": 808,
          "patch": "@@ -1,808 +0,0 @@\n-\n-import sqlite3\n-from pathlib import Path\n-from datetime import datetime\n-from lollms.helpers import ASCIIColors\n-from lollms.paths import LollmsPaths\n-import json\n-\n-__author__ = \"parisneo\"\n-__github__ = \"https://github.com/ParisNeo/lollms-webui\"\n-__copyright__ = \"Copyright 2023, \"\n-__license__ = \"Apache 2.0\"\n-\n-\n-# =================================== Database ==================================================================\n-class DiscussionsDB:\n-    \n-    def __init__(self, lollms_paths:LollmsPaths, discussion_db_name=\"default\"):\n-        self.lollms_paths = lollms_paths\n-        \n-        self.discussion_db_name = discussion_db_name\n-        self.discussion_db_path = self.lollms_paths.personal_discussions_path/discussion_db_name\n-\n-        self.discussion_db_path.mkdir(exist_ok=True, parents= True)\n-        self.discussion_db_file_path = self.discussion_db_path/\"database.db\"\n-\n-\n-    def create_tables(self):\n-        db_version = 10\n-        with sqlite3.connect(self.discussion_db_file_path) as conn:\n-            cursor = conn.cursor()\n-\n-            cursor.execute(\"\"\"\n-                CREATE TABLE IF NOT EXISTS schema_version (\n-                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n-                    version INTEGER NOT NULL\n-                )\n-            \"\"\")\n-\n-            cursor.execute(\"\"\"\n-                CREATE TABLE IF NOT EXISTS discussion (\n-                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n-                    title TEXT,\n-                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n-                )\n-            \"\"\")\n-\n-            cursor.execute(\"\"\"\n-                CREATE TABLE IF NOT EXISTS message (\n-                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n-                    binding TEXT,\n-                    model TEXT,\n-                    personality TEXT,\n-                    sender TEXT NOT NULL,\n-                    content TEXT NOT NULL,\n-                    message_type INT NOT NULL,\n-                    sender_type INT DEFAULT 0,\n-                    rank INT NOT NULL DEFAULT 0,\n-                    parent_message_id INT,\n-                    created_at TIMESTAMP,\n-                    finished_generating_at TIMESTAMP,\n-                    discussion_id INTEGER NOT NULL,\n-                    metadata TEXT,\n-                    ui TEXT,\n-                    FOREIGN KEY (discussion_id) REFERENCES discussion(id),\n-                    FOREIGN KEY (parent_message_id) REFERENCES message(id)\n-                )\n-            \"\"\")\n-\n-            cursor.execute(\"SELECT * FROM schema_version\")\n-            row = cursor.fetchone()\n-\n-            if row is None:\n-                cursor.execute(\"INSERT INTO schema_version (version) VALUES (?)\", (db_version,))\n-            else:\n-                cursor.execute(\"UPDATE schema_version SET version = ?\", (db_version,))            \n-\n-            conn.commit()\n-\n-    def add_missing_columns(self):\n-        with sqlite3.connect(self.discussion_db_file_path) as conn:\n-            cursor = conn.cursor()\n-\n-            table_columns = {\n-                'discussion': [\n-                    'id',\n-                    'title',\n-                    'created_at'\n-                ],\n-                'message': [\n-                    'id',\n-                    'binding',\n-                    'model',\n-                    'personality',\n-                    'sender',\n-                    'content',\n-                    'message_type',\n-                    'sender_type',\n-                    'rank',\n-                    'parent_message_id',\n-                    'created_at',\n-                    'metadata',\n-                    'ui',\n-                    'finished_generating_at',\n-                    'discussion_id'\n-                ]\n-            }\n-\n-            for table, columns in table_columns.items():\n-                cursor.execute(f\"PRAGMA table_info({table})\")\n-                existing_columns = [column[1] for column in cursor.fetchall()]\n-\n-                for column in columns:\n-                    if column not in existing_columns:\n-                        if column == 'id':\n-                            cursor.execute(f\"ALTER TABLE {table} ADD COLUMN {column} INTEGER PRIMARY KEY AUTOINCREMENT\")\n-                        elif column.endswith('_at'):\n-                            cursor.execute(f\"ALTER TABLE {table} ADD COLUMN {column} TIMESTAMP\")\n-                        elif column=='metadata':\n-                            cursor.execute(f\"ALTER TABLE {table} ADD COLUMN {column} TEXT\")\n-                        elif column=='message_type':\n-                            cursor.execute(f\"ALTER TABLE {table} RENAME COLUMN type TO {column}\")\n-                        elif column=='sender_type':\n-                            cursor.execute(f\"ALTER TABLE {table} ADD COLUMN {column} INT DEFAULT 0\")\n-                        elif column=='parent_message_id':\n-                            cursor.execute(f\"ALTER TABLE {table} RENAME COLUMN parent TO {column}\")\n-                        else:\n-                            cursor.execute(f\"ALTER TABLE {table} ADD COLUMN {column} TEXT\")\n-                        ASCIIColors.yellow(f\"Added column :{column}\")\n-            conn.commit()\n-\n-\n-    def select(self, query, params=None, fetch_all=True):\n-        \"\"\"\n-        Execute the specified SQL select query on the database,\n-        with optional parameters.\n-        Returns the cursor object for further processing.\n-        \"\"\"\n-        with sqlite3.connect(self.discussion_db_file_path) as conn:\n-            if params is None:\n-                cursor = conn.execute(query)\n-            else:\n-                cursor = conn.execute(query, params)\n-            if fetch_all:\n-                return cursor.fetchall()\n-            else:\n-                return cursor.fetchone()\n-            \n-\n-    def delete(self, query, params=None):\n-        \"\"\"\n-        Execute the specified SQL delete query on the database,\n-        with optional parameters.\n-        Returns the cursor object for further processing.\n-        \"\"\"\n-        with sqlite3.connect(self.discussion_db_file_path) as conn:\n-            cursor = conn.cursor()\n-            if params is None:\n-                cursor.execute(query)\n-            else:\n-                cursor.execute(query, params)\n-            conn.commit()\n-   \n-    def insert(self, query, params=None):\n-        \"\"\"\n-        Execute the specified INSERT SQL query on the database,\n-        with optional parameters.\n-        Returns the ID of the newly inserted row.\n-        \"\"\"\n-        \n-        with sqlite3.connect(self.discussion_db_file_path) as conn:\n-            cursor = conn.execute(query, params)\n-            rowid = cursor.lastrowid\n-            conn.commit()\n-        self.conn = None\n-        return rowid\n-\n-    def update(self, query, params:tuple=None):\n-        \"\"\"\n-        Execute the specified Update SQL query on the database,\n-        with optional parameters.\n-        Returns the ID of the newly inserted row.\n-        \"\"\"\n-        \n-        with sqlite3.connect(self.discussion_db_file_path) as conn:\n-            conn.execute(query, params)\n-            conn.commit()\n-    \n-    def load_last_discussion(self):\n-        last_discussion_id = self.select(\"SELECT id FROM discussion ORDER BY id DESC LIMIT 1\", fetch_all=False)\n-        if last_discussion_id is None:\n-            last_discussion = self.create_discussion()\n-            last_discussion_id = last_discussion.discussion_id\n-        else:\n-            last_discussion_id = last_discussion_id[0]\n-        self.current_message_id = self.select(\"SELECT id FROM message WHERE discussion_id=? ORDER BY id DESC LIMIT 1\", (last_discussion_id,), fetch_all=False)\n-        return Discussion(last_discussion_id, self)\n-    \n-    def create_discussion(self, title=\"untitled\"):\n-        \"\"\"Creates a new discussion\n-\n-        Args:\n-            title (str, optional): The title of the discussion. Defaults to \"untitled\".\n-\n-        Returns:\n-            Discussion: A Discussion instance \n-        \"\"\"\n-        discussion_id = self.insert(f\"INSERT INTO discussion (title) VALUES (?)\",(title,))\n-        return Discussion(discussion_id, self)\n-\n-    def build_discussion(self, discussion_id=0):\n-        return Discussion(discussion_id, self)\n-\n-    def get_discussions(self):\n-        rows = self.select(\"SELECT * FROM discussion\")         \n-        return [{\"id\": row[0], \"title\": row[1]} for row in rows]\n-\n-    def does_last_discussion_have_messages(self):\n-        last_discussion_id = self.select(\"SELECT id FROM discussion ORDER BY id DESC LIMIT 1\", fetch_all=False)\n-        if last_discussion_id is None:\n-            last_discussion = self.create_discussion()\n-            last_discussion_id = last_discussion.discussion_id\n-        else:\n-            last_discussion_id = last_discussion_id[0]\n-        last_message = self.select(\"SELECT * FROM message WHERE discussion_id=?\", (last_discussion_id,), fetch_all=False)\n-        return last_message is not None\n-    \n-    def remove_discussions(self):\n-        self.delete(\"DELETE FROM message\")\n-        self.delete(\"DELETE FROM discussion\")\n-\n-\n-    def export_to_json(self):\n-        \"\"\"\n-        Export all discussions and their messages from the database to a JSON format.\n-\n-        Returns:\n-            list: A list of dictionaries representing discussions and their messages.\n-                Each dictionary contains the discussion ID, title, and a list of messages.\n-                Each message dictionary contains the sender, content, message type, rank,\n-                parent message ID, binding, model, personality, created at, and finished\n-                generating at fields.\n-        \"\"\"        \n-        db_discussions = self.select(\"SELECT * FROM discussion\")\n-        discussions = []\n-        for row in db_discussions:\n-            discussion_id = row[0]\n-            discussion_title = row[1]\n-            discussion = {\"id\": discussion_id, \"title\":discussion_title, \"messages\": []}\n-            rows = self.select(f\"SELECT sender, content, message_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at FROM message WHERE discussion_id=?\",(discussion_id,))\n-            for message_row in rows:\n-                sender = message_row[0]\n-                content = message_row[1]\n-                content_type = message_row[2]\n-                rank = message_row[3]\n-                parent_message_id = message_row[4]\n-                binding = message_row[5]\n-                model = message_row[6]\n-                personality = message_row[7]\n-                created_at = message_row[8]\n-                finished_generating_at = message_row[9]\n-                \n-                discussion[\"messages\"].append(\n-                    {\"sender\": sender, \"content\": content, \"message_type\": content_type, \"rank\": rank, \"parent_message_id\": parent_message_id, \"binding\": binding, \"model\":model, \"personality\":personality, \"created_at\":created_at, \"finished_generating_at\":finished_generating_at}\n-                )\n-            discussions.append(discussion)\n-        return discussions\n-\n-    def export_all_as_markdown_list_for_vectorization(self):\n-        \"\"\"\n-        Export all discussions and their messages from the database to a Markdown list format.\n-\n-        Returns:\n-            list: A list of lists representing discussions and their messages in a Markdown format.\n-                Each inner list contains the discussion title and a string representing all\n-                messages in the discussion in a Markdown format.\n-        \"\"\"        \n-        data = self.export_all_discussions_to_json()\n-        # Initialize an empty result string\n-        discussions = []\n-        # Iterate through discussions in the JSON data\n-        for discussion in data:\n-            # Extract the title\n-            title = discussion['title']\n-            messages = \"\"\n-            # Iterate through messages in the discussion\n-            for message in discussion['messages']:\n-                sender = message['sender']\n-                content = message['content']\n-                # Append the sender and content in a Markdown format\n-                messages += f'{sender}: {content}\\n'\n-            discussions.append([title, messages])\n-        return discussions\n-        \n-    def export_all_as_markdown(self):\n-        \"\"\"\n-        Export all discussions and their messages from the database to a Markdown format.\n-\n-        Returns:\n-            str: A string representing all discussions and their messages in a Markdown format.\n-                Each discussion is represented as a Markdown heading, and each message is\n-                represented with the sender and content in a Markdown format.\n-        \"\"\"        \n-        data = self.export_all_discussions_to_json()\n-\n-        # Initialize an empty result string\n-        result = ''\n-\n-        # Iterate through discussions in the JSON data\n-        for discussion in data:\n-            # Extract the title\n-            title = discussion['title']\n-            # Append the title with '#' as Markdown heading\n-            result += f'#{title}\\n'\n-\n-            # Iterate through messages in the discussion\n-            for message in discussion['messages']:\n-                sender = message['sender']\n-                content = message['content']\n-                # Append the sender and content in a Markdown format\n-                result += f'{sender}: {content}\\n'\n-\n-        return result\n-\n-    def export_all_discussions_to_json(self):\n-        # Convert the list of discussion IDs to a tuple\n-        db_discussions = self.select(\n-            f\"SELECT * FROM discussion\"\n-        )\n-        discussions = []\n-        for row in db_discussions:\n-            discussion_id = row[0]\n-            discussion_title = row[1]\n-            discussion = {\"id\": discussion_id, \"title\":discussion_title, \"messages\": []}\n-            rows = self.select(f\"SELECT sender, content, message_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at FROM message WHERE discussion_id=?\",(discussion_id,))\n-            for message_row in rows:\n-                sender = message_row[0]\n-                content = message_row[1]\n-                content_type = message_row[2]\n-                rank = message_row[3]\n-                parent_message_id = message_row[4]\n-                binding = message_row[5]\n-                model = message_row[6]\n-                personality = message_row[7]\n-                created_at = message_row[8]\n-                finished_generating_at = message_row[9]\n-                \n-                discussion[\"messages\"].append(\n-                    {\"sender\": sender, \"content\": content, \"message_type\": content_type, \"rank\": rank, \"parent_message_id\": parent_message_id, \"binding\": binding, \"model\":model, \"personality\":personality, \"created_at\":created_at, \"finished_generating_at\": finished_generating_at}\n-                )\n-            discussions.append(discussion)\n-        return discussions\n-\n-    def export_discussions_to_json(self, discussions_ids:list):\n-        # Convert the list of discussion IDs to a tuple\n-        discussions_ids_tuple = tuple(discussions_ids)\n-        txt = ','.join(['?'] * len(discussions_ids_tuple))\n-        db_discussions = self.select(\n-            f\"SELECT * FROM discussion WHERE id IN ({txt})\",\n-            discussions_ids_tuple\n-        )\n-        discussions = []\n-        for row in db_discussions:\n-            discussion_id = row[0]\n-            discussion_title = row[1]\n-            discussion = {\"id\": discussion_id, \"title\":discussion_title, \"messages\": []}\n-            rows = self.select(f\"SELECT sender, content, message_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at FROM message WHERE discussion_id=?\",(discussion_id,))\n-            for message_row in rows:\n-                sender = message_row[0]\n-                content = message_row[1]\n-                content_type = message_row[2]\n-                rank = message_row[3]\n-                parent_message_id = message_row[4]\n-                binding = message_row[5]\n-                model = message_row[6]\n-                personality = message_row[7]\n-                created_at = message_row[8]\n-                finished_generating_at = message_row[9]\n-                \n-                discussion[\"messages\"].append(\n-                    {\"sender\": sender, \"content\": content, \"message_type\": content_type, \"rank\": rank, \"parent_message_id\": parent_message_id, \"binding\": binding, \"model\":model, \"personality\":personality, \"created_at\":created_at, \"finished_generating_at\": finished_generating_at}\n-                )\n-            discussions.append(discussion)\n-        return discussions\n-    \n-    def import_from_json(self, json_data):\n-        discussions = []\n-        data = json_data\n-        for discussion_data in data:\n-            discussion_id = discussion_data.get(\"id\")\n-            discussion_title = discussion_data.get(\"title\")\n-            messages_data = discussion_data.get(\"messages\", [])\n-            discussion = {\"id\": discussion_id, \"title\": discussion_title, \"messages\": []}\n-\n-            # Insert discussion into the database\n-            discussion_id = self.insert(\"INSERT INTO discussion (title) VALUES (?)\", (discussion_title,))\n-\n-            for message_data in messages_data:\n-                sender = message_data.get(\"sender\")\n-                content = message_data.get(\"content\")\n-                content_type = message_data.get(\"message_type\",message_data.get(\"type\"))\n-                rank = message_data.get(\"rank\")\n-                parent_message_id = message_data.get(\"parent_message_id\")\n-                binding = message_data.get(\"binding\",\"\")\n-                model = message_data.get(\"model\",\"\")\n-                personality = message_data.get(\"personality\",\"\")\n-                created_at = message_data.get(\"created_at\",datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n-                finished_generating_at = message_data.get(\"finished_generating_at\",datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n-                discussion[\"messages\"].append(\n-                    {\"sender\": sender, \"content\": content, \"message_type\": content_type, \"rank\": rank, \"binding\": binding, \"model\": model, \"personality\": personality, \"created_at\": created_at, \"finished_generating_at\": finished_generating_at}\n-                )\n-\n-                # Insert message into the database\n-                self.insert(\"INSERT INTO message (sender, content, message_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at, discussion_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n-                            (sender, content, content_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at, discussion_id))\n-\n-            discussions.append(discussion)\n-\n-        return discussions\n-\n-    def export_discussions_to_markdown(self, discussions_ids:list, title = \"\"):\n-        # Convert the list of discussion IDs to a tuple\n-        discussions_ids_tuple = tuple(discussions_ids)\n-        txt = ','.join(['?'] * len(discussions_ids_tuple))\n-        db_discussions = self.select(\n-            f\"SELECT * FROM discussion WHERE id IN ({txt})\",\n-            discussions_ids_tuple\n-        )\n-        discussions = f\"# {title}\" if title!=\"\" else \"\"\n-        for row in db_discussions:\n-            discussion_id = row[0]\n-            discussion_title = row[1]\n-            discussions += f\"## {discussion_title}\\n\"\n-            rows = self.select(f\"SELECT sender, content, message_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at FROM message WHERE discussion_id=?\",(discussion_id,))\n-            for message_row in rows:\n-                sender = message_row[0]\n-                content = message_row[1]\n-                content_type = message_row[2]\n-                rank = message_row[3]\n-                parent_message_id = message_row[4]\n-                binding = message_row[5]\n-                model = message_row[6]\n-                personality = message_row[7]\n-                created_at = message_row[8]\n-                finished_generating_at = message_row[9]\n-                \n-                discussions +=f\"### {sender}:\\n{content}\\n\"\n-            discussions +=f\"\\n\"\n-        return discussions\n-\n-\n-class Message:\n-    def __init__(\n-                    self,\n-                    discussion_id,\n-                    discussions_db,\n-                    message_type,\n-                    sender_type,\n-                    sender,\n-                    content,\n-                    metadata                = None,\n-                    ui                      = None,\n-                    rank                    = 0,\n-                    parent_message_id       = 0,\n-                    binding                 = \"\",\n-                    model                   = \"\",\n-                    personality             = \"\",\n-                    created_at              = None,\n-                    finished_generating_at  = None,\n-                    id                      = None,\n-                    insert_into_db          = False\n-                    ):\n-        \n-        self.discussion_id = discussion_id\n-        self.discussions_db = discussions_db\n-        self.self = self\n-        self.sender = sender\n-        self.sender_type = sender_type\n-        self.content = content\n-        self.message_type = message_type\n-        self.rank = rank\n-        self.parent_message_id = parent_message_id\n-        self.binding = binding\n-        self.model = model\n-        self.metadata = json.dumps(metadata, indent=4) if metadata is not None and type(metadata)== dict else metadata\n-        self.ui = ui\n-        self.personality = personality\n-        self.created_at = created_at\n-        self.finished_generating_at = finished_generating_at\n-\n-        if insert_into_db:\n-            self.id = self.discussions_db.insert(\n-                \"INSERT INTO message (sender,  message_type,  sender_type,  sender,  content,  metadata, ui,  rank,  parent_message_id,  binding,  model,  personality,  created_at,  finished_generating_at,  discussion_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\", \n-                (sender, message_type, sender_type, sender, content, metadata, ui, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at, discussion_id)\n-            )\n-        else:\n-            self.id = id\n-\n-\n-    @staticmethod\n-    def get_fields():\n-        return [\n-            \"id\",\n-            \"message_type\",\n-            \"sender_type\",\n-            \"sender\",\n-            \"content\",\n-            \"metadata\",\n-            \"ui\",\n-            \"rank\",\n-            \"parent_message_id\",\n-            \"binding\",\n-            \"model\",\n-            \"personality\",\n-            \"created_at\",\n-            \"finished_generating_at\",\n-            \"discussion_id\"\n-        ]        \n-\n-    @staticmethod\n-    def from_db(discussions_db, message_id):\n-        columns = Message.get_fields()\n-        rows = discussions_db.select(\n-            f\"SELECT {','.join(columns)} FROM message WHERE id=?\", (message_id,)\n-        )\n-        data_dict={\n-            col:rows[0][i]\n-            for i,col in enumerate(columns)\n-        }\n-        data_dict[\"discussions_db\"]=discussions_db\n-        return Message(\n-            **data_dict\n-        )\n-\n-    @staticmethod\n-    def from_dict(discussions_db,data_dict):\n-        data_dict[\"discussions_db\"]=discussions_db\n-        return Message(\n-            **data_dict\n-        )\n-\n-    def insert_into_db(self):\n-        self.message_id = self.discussions_db.insert(\n-            \"INSERT INTO message (sender, content, metadata, ui, message_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at, discussion_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\", \n-            (self.sender, self.content, self.metadata, self.ui, self.message_type, self.rank, self.parent_message_id, self.binding, self.model, self.personality, self.created_at, self.finished_generating_at, self.discussion_id)\n-        )\n-\n-    def update_db(self):\n-        self.message_id = self.discussions_db.insert(\n-            \"INSERT INTO message (sender, content, metadata, ui, message_type, rank, parent_message_id, binding, model, personality, created_at, finished_generating_at, discussion_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\", \n-            (self.sender, self.content, self.metadata, self.ui, self.message_type, self.rank, self.parent_message_id, self.binding, self.model, self.personality, self.created_at, self.finished_generating_at, self.discussion_id)\n-        )\n-    def update(self, new_content, new_metadata=None, new_ui=None, commit=True):\n-        self.finished_generating_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n-        text = f\"UPDATE message SET content = ?\"\n-        params = [new_content]\n-        if new_metadata is not None:\n-            text+=\", metadata = ?\"\n-            params.append(new_metadata)\n-        if new_ui is not None:\n-            text+=\", ui = ?\"\n-            params.append(new_ui)\n-\n-        text +=\", finished_generating_at = ? WHERE id = ?\"\n-        params.append(self.finished_generating_at)\n-        params.append(self.id)\n-        self.discussions_db.update(\n-            text, tuple(params)\n-        )        \n-\n-    def to_json(self):\n-        attributes = Message.get_fields()\n-        msgJson = {}\n-        for attribute_name in attributes:\n-            attribute_value = getattr(self, attribute_name, None)\n-            if attribute_name==\"metadata\":\n-                if type(attribute_value) == str:\n-                    msgJson[attribute_name] = json.loads(attribute_value)\n-                else:\n-                    msgJson[attribute_name] = attribute_value\n-            else:\n-                msgJson[attribute_name] = attribute_value\n-        return msgJson\n-\n-class Discussion:\n-    def __init__(self, discussion_id, discussions_db:DiscussionsDB):\n-        self.discussion_id = discussion_id\n-        self.discussions_db = discussions_db\n-        self.discussion_folder = self.discussions_db.discussion_db_path/f\"{discussion_id}\"\n-        self.discussion_folder.mkdir(exist_ok=True)\n-        self.messages = self.get_messages()\n-        if len(self.messages)>0:\n-            self.current_message = self.messages[-1]\n-\n-    def load_message(self, id):\n-        \"\"\"Gets a list of messages information\n-\n-        Returns:\n-            list: List of entries in the format {\"id\":message id, \"sender\":sender name, \"content\":message content, \"message_type\":message type, \"rank\": message rank}\n-        \"\"\"\n-        self.current_message = Message.from_db(self.discussions_db, id)\n-        return self.current_message\n-    \n-    def add_message(\n-                    self, \n-                    message_type,\n-                    sender_type,\n-                    sender,\n-                    content,\n-                    metadata=None,\n-                    ui=None,\n-                    rank=0, \n-                    parent_message_id=0, \n-                    binding=\"\", \n-                    model =\"\", \n-                    personality=\"\", \n-                    created_at=None, \n-                    finished_generating_at=None\n-                ):\n-        \"\"\"Adds a new message to the discussion\n-\n-        Args:\n-            sender (str): The sender name\n-            content (str): The text sent by the sender\n-\n-        Returns:\n-            int: The added message id\n-        \"\"\"\n-        if created_at is None:\n-            created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n-            \n-        if finished_generating_at is None:\n-            finished_generating_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n-\n-        self.current_message = Message(\n-            self.discussion_id,\n-            self.discussions_db,\n-            message_type,\n-            sender_type,\n-            sender,\n-            content,\n-            metadata,\n-            ui,\n-            rank,\n-            parent_message_id,\n-            binding,\n-            model,\n-            personality,\n-            created_at,\n-            finished_generating_at,\n-            insert_into_db=True\n-        )\n-\n-        self.messages.append(self.current_message)\n-        return self.current_message\n-\n-    def rename(self, new_title):\n-        \"\"\"Renames the discussion\n-\n-        Args:\n-            new_title (str): The nex discussion name\n-        \"\"\"\n-        self.discussions_db.update(\n-            f\"UPDATE discussion SET title=? WHERE id=?\",(new_title,self.discussion_id)\n-        )\n-\n-    def title(self):\n-        \"\"\"Renames the discussion\n-\n-        Args:\n-            new_title (str): The nex discussion name\n-        \"\"\"\n-        rows = self.discussions_db.select(\n-            f\"Select title from discussion WHERE id={self.discussion_id}\"\n-        )\n-        return rows[0][0]\n-\n-    def delete_discussion(self):\n-        \"\"\"Deletes the discussion\n-        \"\"\"\n-        self.discussions_db.delete(\n-            f\"DELETE FROM message WHERE discussion_id={self.discussion_id}\"\n-        )\n-        self.discussions_db.delete(\n-            f\"DELETE FROM discussion WHERE id={self.discussion_id}\"\n-        )\n-\n-    def get_messages(self):\n-        \"\"\"Gets a list of messages information\n-\n-        Returns:\n-            list: List of entries in the format {\"id\":message id, \"sender\":sender name, \"content\":message content, \"message_type\":message type, \"rank\": message rank}\n-        \"\"\"\n-        columns = Message.get_fields()\n-\n-        rows = self.discussions_db.select(\n-            f\"SELECT {','.join(columns)} FROM message WHERE discussion_id=?\", (self.discussion_id,)\n-        )\n-        msg_dict = [{ c:row[i] for i,c in enumerate(columns)} for row in rows]\n-        self.messages=[]\n-        for msg in msg_dict:\n-            self.messages.append(Message.from_dict(self.discussions_db, msg))\n-\n-        if len(self.messages)>0:\n-            self.current_message = self.messages[-1]\n-\n-        return self.messages\n-\n-    def get_message(self, message_id):\n-        for message in self.messages:\n-            if message.id == int(message_id):\n-                self.current_message = message\n-                return message\n-        return None\n-\n-    def select_message(self, message_id):\n-        msg = self.get_message(message_id)\n-        if msg is not None:\n-            self.current_message = msg\n-            return True\n-        else:\n-            return False \n-\n-    def update_message(self, new_content, new_metadata=None, new_ui=None):\n-        \"\"\"Updates the content of a message\n-\n-        Args:\n-            message_id (int): The id of the message to be changed\n-            new_content (str): The nex message content\n-        \"\"\"\n-        self.current_message.update(new_content, new_metadata, new_ui)\n-\n-    def edit_message(self, message_id, new_content, new_metadata=None, new_ui=None):\n-        \"\"\"Edits the content of a message\n-\n-        Args:\n-            message_id (int): The id of the message to be changed\n-            new_content (str): The nex message content\n-        \"\"\"\n-        msg = self.get_message(message_id)\n-        if msg:\n-            msg.update(new_content, new_metadata, new_ui)\n-            return True\n-        else:\n-            return False\n-\n-\n-    def message_rank_up(self, message_id):\n-        \"\"\"Increments the rank of the message\n-\n-        Args:\n-            message_id (int): The id of the message to be changed\n-        \"\"\"\n-        # Retrieve current rank value for message_id\n-        current_rank = self.discussions_db.select(\"SELECT rank FROM message WHERE id=?\", (message_id,),False)[0]\n-\n-        # Increment current rank value by 1\n-        new_rank = current_rank + 1        \n-        self.discussions_db.update(\n-            f\"UPDATE message SET rank = ? WHERE id = ?\",(new_rank,message_id)\n-        )\n-        return new_rank\n-\n-    def message_rank_down(self, message_id):\n-        \"\"\"Increments the rank of the message\n-\n-        Args:\n-            message_id (int): The id of the message to be changed\n-        \"\"\"\n-        # Retrieve current rank value for message_id\n-        current_rank = self.discussions_db.select(\"SELECT rank FROM message WHERE id=?\", (message_id,),False)[0]\n-\n-        # Increment current rank value by 1\n-        new_rank = current_rank - 1        \n-        self.discussions_db.update(\n-            f\"UPDATE message SET rank = ? WHERE id = ?\",(new_rank,message_id)\n-        )\n-        return new_rank\n-    \n-    def delete_message(self, message_id):\n-        \"\"\"Delete the message\n-\n-        Args:\n-            message_id (int): The id of the message to be deleted\n-        \"\"\"\n-        # Retrieve current rank value for message_id\n-        self.discussions_db.delete(\"DELETE FROM message WHERE id=?\", (message_id,))\n-\n-    def export_for_vectorization(self):\n-        \"\"\"\n-        Export all discussions and their messages from the database to a Markdown list format.\n-\n-        Returns:\n-            list: A list of lists representing discussions and their messages in a Markdown format.\n-                Each inner list contains the discussion title and a string representing all\n-                messages in the discussion in a Markdown format.\n-        \"\"\"        \n-        # Extract the title\n-        title = self.title()\n-        messages = \"\"\n-        # Iterate through messages in the discussion\n-        for message in self.messages:\n-            sender = message.sender\n-            content = message.content\n-            # Append the sender and content in a Markdown format\n-            messages += f'{sender}: {content}\\n'\n-        return title, messages\n-# ========================================================================================================================"
        },
        {
          "filename": "app.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -82,7 +82,7 @@ def get_ip_addresses():\n             config.allowed_origins += config[\"host\"]\n         else:\n             config.allowed_origins += get_ip_addresses()\n-            \n+\n     sio = socketio.AsyncServer(async_mode=\"asgi\", cors_allowed_origins=config.allowed_origins+[f\"https://localhost:{config['port']}\" if is_https else f\"http://localhost:{config['port']}\"], ping_timeout=1200, ping_interval=30)  # Enable CORS for selected origins\n \n     LOLLMSWebUI.build_instance(config=config, lollms_paths=lollms_paths, args=args, sio=sio)\n@@ -109,7 +109,7 @@ def get_ip_addresses():\n     from lollms.server.endpoints.lollms_motion_ctrl import router as lollms_motion_ctrl\n \n     from endpoints.lollms_webui_infos import router as lollms_webui_infos_router\n-    from endpoints.lollms_discussion import router as lollms_discussion_router\n+    from lollms.server.endpoints.lollms_discussion import router as lollms_discussion_router\n     from endpoints.lollms_message import router as lollms_message_router\n     from endpoints.lollms_advanced import router as lollms_advanced_router\n     from endpoints.chat_bar import router as chat_bar_router"
        },
        {
          "filename": "endpoints/chat_bar.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -15,7 +15,7 @@\n from lollms.main_config import BaseConfig\n from lollms.utilities import detect_antiprompt, remove_text_from_string, trace_exception\n from ascii_colors import ASCIIColors\n-from api.db import DiscussionsDB\n+from lollms.databases.discussions_database import DiscussionsDB\n from pathlib import Path\n from safe_store.text_vectorizer import TextVectorizer, VectorizationMethod, VisualizationMethod\n import tqdm"
        },
        {
          "filename": "endpoints/lollms_advanced.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -16,7 +16,7 @@\n from lollms.utilities import detect_antiprompt, remove_text_from_string, trace_exception, show_yes_no_dialog\n from lollms.security import sanitize_path\n from ascii_colors import ASCIIColors\n-from api.db import DiscussionsDB\n+from lollms.databases.discussions_database import DiscussionsDB\n from pathlib import Path\n from safe_store.text_vectorizer import TextVectorizer, VectorizationMethod, VisualizationMethod\n import tqdm"
        },
        {
          "filename": "endpoints/lollms_discussion.py",
          "status": "removed",
          "additions": 0,
          "deletions": 229,
          "patch": "@@ -1,229 +0,0 @@\n-\"\"\"\n-project: lollms_webui\n-file: lollms_discussion.py \n-author: ParisNeo\n-description: \n-    This module contains a set of FastAPI routes that provide information about the Lord of Large Language and Multimodal Systems (LoLLMs) Web UI\n-    application. These routes allow users to manipulate the discussion elements.\n-\n-\"\"\"\n-from fastapi import APIRouter, Request\n-from lollms_webui import LOLLMSWebUI\n-from pydantic import BaseModel\n-from starlette.responses import StreamingResponse\n-from lollms.types import MSG_TYPE\n-from lollms.utilities import detect_antiprompt, remove_text_from_string, trace_exception\n-from lollms.security import sanitize_path\n-from ascii_colors import ASCIIColors\n-from api.db import DiscussionsDB, Discussion\n-from typing import List\n-\n-from safe_store.text_vectorizer import TextVectorizer, VectorizationMethod, VisualizationMethod\n-import tqdm\n-from pathlib import Path\n-class GenerateRequest(BaseModel):\n-    text: str\n-\n-class DatabaseSelectionParameters(BaseModel):\n-    name: str\n-\n-class EditTitleParameters(BaseModel):\n-    client_id: str\n-    title: str\n-    id: int\n-\n-class MakeTitleParameters(BaseModel):\n-    id: int\n-\n-class DeleteDiscussionParameters(BaseModel):\n-    client_id: str\n-    id: int\n-\n-# ----------------------- Defining router and main class ------------------------------\n-\n-router = APIRouter()\n-lollmsElfServer:LOLLMSWebUI = LOLLMSWebUI.get_instance()\n-\n-\n-@router.get(\"/list_discussions\")\n-def list_discussions():\n-    discussions = lollmsElfServer.db.get_discussions()\n-    return discussions\n-\n-\n-@router.get(\"/list_databases\")\n-async def list_databases():\n-   \"\"\"List all the personal databases in the LoLLMs server.\"\"\"\n-   # Retrieve the list of database names\n-   databases = [f.name for f in lollmsElfServer.lollms_paths.personal_discussions_path.iterdir() if f.is_dir() and (f/\"database.db\").exists()]\n-   # Return the list of database names\n-   return databases\n-\n-\n-@router.post(\"/select_database\")\n-def select_database(data:DatabaseSelectionParameters):\n-    sanitize_path(data.name)\n-    print(f'Selecting database {data.name}')\n-    # Create database object\n-    lollmsElfServer.db = DiscussionsDB(lollmsElfServer.lollms_paths, data.name)\n-    ASCIIColors.info(\"Checking discussions database... \",end=\"\")\n-    lollmsElfServer.db.create_tables()\n-    lollmsElfServer.db.add_missing_columns()\n-    lollmsElfServer.config.discussion_db_name = data.name\n-    ASCIIColors.success(\"ok\")\n-\n-    if lollmsElfServer.config.auto_save:\n-        lollmsElfServer.config.save_config()\n-    \n-    if lollmsElfServer.config.data_vectorization_activate and lollmsElfServer.config.activate_ltm:\n-        try:\n-            ASCIIColors.yellow(\"0- Detected discussion vectorization request\")\n-            folder = lollmsElfServer.lollms_paths.personal_discussions_path/\"vectorized_dbs\"\n-            folder.mkdir(parents=True, exist_ok=True)\n-            lollmsElfServer.long_term_memory = TextVectorizer(\n-                vectorization_method=VectorizationMethod.TFIDF_VECTORIZER,#=VectorizationMethod.BM25_VECTORIZER,\n-                database_path=folder/lollmsElfServer.config.discussion_db_name,\n-                data_visualization_method=VisualizationMethod.PCA,#VisualizationMethod.PCA,\n-                save_db=True\n-            )\n-            ASCIIColors.yellow(\"1- Exporting discussions\")\n-            lollmsElfServer.info(\"Exporting discussions\")\n-            discussions = lollmsElfServer.db.export_all_as_markdown_list_for_vectorization()\n-            ASCIIColors.yellow(\"2- Adding discussions to vectorizer\")\n-            lollmsElfServer.info(\"Adding discussions to vectorizer\")\n-            index = 0\n-            nb_discussions = len(discussions)\n-\n-            for (title,discussion) in tqdm(discussions):\n-                lollmsElfServer.sio.emit('update_progress',{'value':int(100*(index/nb_discussions))})\n-                index += 1\n-                if discussion!='':\n-                    skill = lollmsElfServer.learn_from_discussion(title, discussion)\n-                    lollmsElfServer.long_term_memory.add_document(title, skill, chunk_size=lollmsElfServer.config.data_vectorization_chunk_size, overlap_size=lollmsElfServer.config.data_vectorization_overlap_size, force_vectorize=False, add_as_a_bloc=False)\n-            ASCIIColors.yellow(\"3- Indexing database\")\n-            lollmsElfServer.info(\"Indexing database\",True, None)\n-            lollmsElfServer.long_term_memory.index()\n-            ASCIIColors.yellow(\"Ready\")\n-        except Exception as ex:\n-            lollmsElfServer.error(f\"Couldn't vectorize the database:{ex}\")\n-            return {\"status\":False}\n-\n-    return {\"status\":True}\n-\n-\n-@router.post(\"/export_discussion\")\n-def export_discussion():\n-    return {\"discussion_text\":lollmsElfServer.get_discussion_to()}\n-\n-\n-class DiscussionEditTitle(BaseModel):\n-    client_id: str\n-    title: str\n-    id: int\n-\n-@router.post(\"/edit_title\")\n-async def edit_title(discussion_edit_title: DiscussionEditTitle):\n-    try:\n-        client_id = discussion_edit_title.client_id\n-        title = discussion_edit_title.title\n-        discussion_id = discussion_edit_title.id\n-        lollmsElfServer.connections[client_id][\"current_discussion\"] = Discussion(discussion_id, lollmsElfServer.db)\n-        lollmsElfServer.connections[client_id][\"current_discussion\"].rename(title)\n-        return {'status':True}\n-    except Exception as ex:\n-        trace_exception(ex)\n-        lollmsElfServer.error(ex)\n-        return {\"status\":False,\"error\":str(ex)}\n-\n-class DiscussionTitle(BaseModel):\n-    id: int\n-    \n-@router.post(\"/make_title\")\n-async def make_title(discussion_title: DiscussionTitle):\n-    try:\n-        ASCIIColors.info(\"Making title\")\n-        discussion_id = discussion_title.id\n-        discussion = Discussion(discussion_id, lollmsElfServer.db)\n-        title = lollmsElfServer.make_discussion_title(discussion)\n-        discussion.rename(title)\n-        return {'status':True, 'title':title}\n-    except Exception as ex:\n-        trace_exception(ex)\n-        lollmsElfServer.error(ex)\n-        return {\"status\":False,\"error\":str(ex)}\n-    \n-    \n-@router.get(\"/export\")\n-def export():\n-    return lollmsElfServer.db.export_to_json()\n-\n-\n-\n-class DiscussionDelete(BaseModel):\n-    client_id: str\n-    id: int\n-\n-@router.post(\"/delete_discussion\")\n-async def delete_discussion(discussion: DiscussionDelete):\n-    \"\"\"\n-    Executes Python code and returns the output.\n-\n-    :param request: The HTTP request object.\n-    :return: A JSON response with the status of the operation.\n-    \"\"\"\n-\n-    try:\n-\n-        client_id           = discussion.client_id\n-        discussion_id       = discussion.id\n-        lollmsElfServer.connections[client_id][\"current_discussion\"] = Discussion(discussion_id, lollmsElfServer.db)\n-        lollmsElfServer.connections[client_id][\"current_discussion\"].delete_discussion()\n-        lollmsElfServer.connections[client_id][\"current_discussion\"] = None\n-        return {'status':True}\n-    except Exception as ex:\n-        trace_exception(ex)\n-        lollmsElfServer.error(ex)\n-        return {\"status\":False,\"error\":str(ex)}\n-    \n-    \n-# ----------------------------- import/export --------------------\n-class DiscussionExport(BaseModel):\n-    discussion_ids: List[int]\n-    export_format: str\n-\n-@router.post(\"/export_multiple_discussions\")\n-async def export_multiple_discussions(discussion_export: DiscussionExport):\n-    try:\n-        discussion_ids = discussion_export.discussion_ids\n-        export_format = discussion_export.export_format\n-\n-        if export_format==\"json\":\n-            discussions = lollmsElfServer.db.export_discussions_to_json(discussion_ids)\n-        elif export_format==\"markdown\":\n-            discussions = lollmsElfServer.db.export_discussions_to_markdown(discussion_ids)\n-        else:\n-            discussions = lollmsElfServer.db.export_discussions_to_markdown(discussion_ids)\n-        return discussions\n-    except Exception as ex:\n-        trace_exception(ex)\n-        lollmsElfServer.error(ex)\n-        return {\"status\":False,\"error\":str(ex)}\n-\n-\n-class DiscussionInfo(BaseModel):\n-    id: int\n-    content: str\n-\n-class DiscussionImport(BaseModel):\n-    jArray: List[DiscussionInfo]\n-\n-@router.post(\"/import_multiple_discussions\")\n-async def import_multiple_discussions(discussion_import: DiscussionImport):\n-    try:\n-        discussions = discussion_import.jArray\n-        lollmsElfServer.db.import_from_json(discussions)\n-        return discussions\n-    except Exception as ex:\n-        trace_exception(ex)\n-        lollmsElfServer.error(ex)\n-        return {\"status\":False,\"error\":str(ex)}"
        },
        {
          "filename": "endpoints/lollms_message.py",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -15,7 +15,7 @@\n from lollms.types import MSG_TYPE\n from lollms.utilities import detect_antiprompt, remove_text_from_string, trace_exception\n from ascii_colors import ASCIIColors\n-from api.db import DiscussionsDB\n+from lollms.databases.discussions_database import DiscussionsDB\n \n from safe_store.text_vectorizer import TextVectorizer, VectorizationMethod, VisualizationMethod\n import tqdm\n@@ -41,7 +41,7 @@ async def edit_message(edit_params: EditMessageParameters):\n     new_message = edit_params.message\n     metadata = json.dumps(edit_params.metadata,indent=4)\n     try:\n-        lollmsElfServer.connections[client_id][\"current_discussion\"].edit_message(message_id, new_message, new_metadata=metadata)\n+        lollmsElfServer.session.get_client(client_id).discussion.edit_message(message_id, new_message, new_metadata=metadata)\n         return {\"status\": True}\n     except Exception as ex:\n         trace_exception(ex)  # Assuming 'trace_exception' function logs the error\n@@ -59,7 +59,7 @@ async def message_rank_up(rank_params: MessageRankParameters):\n     message_id = rank_params.id\n \n     try:\n-        new_rank = lollmsElfServer.connections[client_id][\"current_discussion\"].message_rank_up(message_id)\n+        new_rank = lollmsElfServer.session.get_client(client_id).discussion.message_rank_up(message_id)\n         return {\"status\": True, \"new_rank\": new_rank}\n     except Exception as ex:\n         trace_exception(ex)  # Assuming 'trace_exception' function logs the error\n@@ -71,7 +71,7 @@ def message_rank_down(rank_params: MessageRankParameters):\n     client_id = rank_params.client_id\n     message_id = rank_params.id\n     try:\n-        new_rank = lollmsElfServer.connections[client_id][\"current_discussion\"].message_rank_down(message_id)\n+        new_rank = lollmsElfServer.session.get_client(client_id).discussion.message_rank_down(message_id)\n         return {\"status\": True, \"new_rank\": new_rank}\n     except Exception as ex:\n         return {\"status\": False, \"error\":str(ex)}\n@@ -85,11 +85,11 @@ async def delete_message(delete_params: MessageDeleteParameters):\n     client_id = delete_params.client_id\n     message_id = delete_params.id\n \n-    if lollmsElfServer.connections[client_id][\"current_discussion\"] is None:\n+    if lollmsElfServer.session.get_client(client_id).discussion is None:\n         return {\"status\": False,\"message\":\"No discussion is selected\"}\n     else:\n         try:\n-            new_rank = lollmsElfServer.connections[client_id][\"current_discussion\"].delete_message(message_id)\n+            new_rank = lollmsElfServer.session.get_client(client_id).discussion.delete_message(message_id)\n             ASCIIColors.yellow(\"Message deleted\")\n             return {\"status\":True,\"new_rank\": new_rank}\n         except Exception as ex:"
        },
        {
          "filename": "events/lollms_chatbox_events.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -28,7 +28,7 @@\n import os\n import time\n \n-from api.db import Discussion\n+from lollms.databases.discussions_database import Discussion\n from datetime import datetime\n \n router = APIRouter()\n@@ -46,7 +46,7 @@ def create_empty_message(sid, data):\n             ASCIIColors.info(f\"Building empty User message requested by : {client_id}\")\n             # send the message to the bot\n             print(f\"Creating an empty message for AI answer orientation\")\n-            if lollmsElfServer.connections[client_id][\"current_discussion\"]:\n+            if lollmsElfServer.session.get_client(client_id).discussion:\n                 if not lollmsElfServer.model:\n                     lollmsElfServer.error(\"No model selected. Please make sure you select a model before starting generation\", client_id = client_id)\n                     return          \n@@ -58,7 +58,7 @@ def create_empty_message(sid, data):\n             ASCIIColors.info(f\"Building empty AI message requested by : {client_id}\")\n             # send the message to the bot\n             print(f\"Creating an empty message for AI answer orientation\")\n-            if lollmsElfServer.connections[client_id][\"current_discussion\"]:\n+            if lollmsElfServer.session.get_client(client_id).discussion:\n                 if not lollmsElfServer.model:\n                     lollmsElfServer.error(\"No model selected. Please make sure you select a model before starting generation\", client_id=client_id)\n                     return          "
        },
        {
          "filename": "events/lollms_discussion_events.py",
          "status": "modified",
          "additions": 14,
          "deletions": 14,
          "patch": "@@ -26,7 +26,7 @@\n import threading\n import os\n \n-from api.db import Discussion\n+from lollms.databases.discussions_database import Discussion\n from datetime import datetime\n \n router = APIRouter()\n@@ -43,28 +43,28 @@ async def new_discussion(sid, data):\n             ASCIIColors.yellow(\"New descussion requested\")\n             client_id = sid\n             title = data[\"title\"]\n-            if lollmsElfServer.connections[client_id][\"current_discussion\"] is not None:\n+            if lollmsElfServer.session.get_client(client_id).discussion is not None:\n                 if lollmsElfServer.long_term_memory is not None:\n-                    title, content = lollmsElfServer.connections[client_id][\"current_discussion\"].export_for_vectorization()\n+                    title, content = lollmsElfServer.session.get_client(client_id).discussion.export_for_vectorization()\n                     skill = lollmsElfServer.learn_from_discussion(title, content)\n                     lollmsElfServer.long_term_memory.add_document(title, skill, chunk_size=lollmsElfServer.config.data_vectorization_chunk_size, overlap_size=lollmsElfServer.config.data_vectorization_overlap_size, force_vectorize=False, add_as_a_bloc=False, add_to_index=True)\n                     ASCIIColors.yellow(\"4- Saving database\")\n                     lollmsElfServer.long_term_memory.save_to_json()\n-            lollmsElfServer.connections[client_id][\"current_discussion\"] = lollmsElfServer.db.create_discussion(title)\n+            lollmsElfServer.session.get_client(client_id).discussion = lollmsElfServer.db.create_discussion(title)\n             # Get the current timestamp\n             timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n             \n             # Return a success response\n-            if lollmsElfServer.connections[client_id][\"current_discussion\"] is None:\n-                lollmsElfServer.connections[client_id][\"current_discussion\"] = lollmsElfServer.db.load_last_discussion()\n+            if lollmsElfServer.session.get_client(client_id).discussion is None:\n+                lollmsElfServer.session.get_client(client_id).discussion = lollmsElfServer.db.load_last_discussion()\n         \n             if lollmsElfServer.personality.welcome_message!=\"\":\n                 if lollmsElfServer.config.force_output_language_to_be and lollmsElfServer.config.force_output_language_to_be.lower().strip() !=\"english\":\n                     welcome_message = lollmsElfServer.personality.fast_gen(f\"!@>instruction: Translate the following text to {lollmsElfServer.config.force_output_language_to_be.lower()}:\\n{lollmsElfServer.personality.welcome_message}\\n!@>translation:\")\n                 else:\n                     welcome_message = lollmsElfServer.personality.welcome_message\n \n-                message = lollmsElfServer.connections[client_id][\"current_discussion\"].add_message(\n+                message = lollmsElfServer.session.get_client(client_id).discussion.add_message(\n                     message_type        = MSG_TYPE.MSG_TYPE_FULL.value if lollmsElfServer.personality.include_welcome_message_in_disucssion else MSG_TYPE.MSG_TYPE_FULL_INVISIBLE_TO_AI.value,\n                     sender_type         = SENDER_TYPES.SENDER_TYPES_AI.value,\n                     sender              = lollmsElfServer.personality.name,\n@@ -80,7 +80,7 @@ async def new_discussion(sid, data):\n                 )\n  \n                 await lollmsElfServer.sio.emit('discussion_created',\n-                            {'id':lollmsElfServer.connections[client_id][\"current_discussion\"].discussion_id},\n+                            {'id':lollmsElfServer.session.get_client(client_id).discussion.discussion_id},\n                             to=client_id\n                 )                        \n             else:\n@@ -95,14 +95,14 @@ async def load_discussion(sid, data):\n             ASCIIColors.yellow(f\"Loading discussion for client {client_id} ... \", end=\"\")\n             if \"id\" in data:\n                 discussion_id = data[\"id\"]\n-                lollmsElfServer.connections[client_id][\"current_discussion\"] = Discussion(discussion_id, lollmsElfServer.db)\n+                lollmsElfServer.session.get_client(client_id).discussion = Discussion(discussion_id, lollmsElfServer.db)\n             else:\n-                if lollmsElfServer.connections[client_id][\"current_discussion\"] is not None:\n-                    discussion_id = lollmsElfServer.connections[client_id][\"current_discussion\"].discussion_id\n-                    lollmsElfServer.connections[client_id][\"current_discussion\"] = Discussion(discussion_id, lollmsElfServer.db)\n+                if lollmsElfServer.session.get_client(client_id).discussion is not None:\n+                    discussion_id = lollmsElfServer.session.get_client(client_id).discussion.discussion_id\n+                    lollmsElfServer.session.get_client(client_id).discussion = Discussion(discussion_id, lollmsElfServer.db)\n                 else:\n-                    lollmsElfServer.connections[client_id][\"current_discussion\"] = lollmsElfServer.db.create_discussion()\n-            messages = lollmsElfServer.connections[client_id][\"current_discussion\"].get_messages()\n+                    lollmsElfServer.session.get_client(client_id).discussion = lollmsElfServer.db.create_discussion()\n+            messages = lollmsElfServer.session.get_client(client_id).discussion.get_messages()\n             jsons = [m.to_json() for m in messages]\n             await lollmsElfServer.sio.emit('discussion',\n                         jsons,"
        },
        {
          "filename": "events/lollms_generation_events.py",
          "status": "modified",
          "additions": 29,
          "deletions": 25,
          "patch": "@@ -36,10 +36,12 @@ def add_events(sio:socketio):\n     def handle_generate_msg(sid, data):        \n         client_id = sid\n         lollmsElfServer.cancel_gen = False\n-        lollmsElfServer.connections[client_id][\"generated_text\"]=\"\"\n-        lollmsElfServer.connections[client_id][\"cancel_generation\"]=False\n-        lollmsElfServer.connections[client_id][\"continuing\"]=False\n-        lollmsElfServer.connections[client_id][\"first_chunk\"]=True\n+        client = lollmsElfServer.session.get_client(client_id)\n+\n+        client.generated_text=\"\"\n+        client.cancel_generation=False\n+        client.continuing=False\n+        client.first_chunk=True\n         \n \n         \n@@ -49,15 +51,15 @@ def handle_generate_msg(sid, data):\n             return\n \n         if not lollmsElfServer.busy:\n-            if lollmsElfServer.connections[client_id][\"current_discussion\"] is None:\n+            if lollmsElfServer.session.get_client(client_id).discussion is None:\n                 if lollmsElfServer.db.does_last_discussion_have_messages():\n-                    lollmsElfServer.connections[client_id][\"current_discussion\"] = lollmsElfServer.db.create_discussion()\n+                    lollmsElfServer.session.get_client(client_id).discussion = lollmsElfServer.db.create_discussion()\n                 else:\n-                    lollmsElfServer.connections[client_id][\"current_discussion\"] = lollmsElfServer.db.load_last_discussion()\n+                    lollmsElfServer.session.get_client(client_id).discussion = lollmsElfServer.db.load_last_discussion()\n \n             prompt = data[\"prompt\"]\n             ump = lollmsElfServer.config.discussion_prompt_separator +lollmsElfServer.config.user_name.strip() if lollmsElfServer.config.use_user_name_in_discussions else lollmsElfServer.personality.user_message_prefix\n-            message = lollmsElfServer.connections[client_id][\"current_discussion\"].add_message(\n+            message = lollmsElfServer.session.get_client(client_id).discussion.add_message(\n                 message_type    = MSG_TYPE.MSG_TYPE_FULL.value,\n                 sender_type     = SENDER_TYPES.SENDER_TYPES_USER.value,\n                 sender          = ump.replace(lollmsElfServer.config.discussion_prompt_separator,\"\").replace(\":\",\"\"),\n@@ -67,8 +69,8 @@ def handle_generate_msg(sid, data):\n             )\n \n             ASCIIColors.green(\"Starting message generation by \"+lollmsElfServer.personality.name)\n-            lollmsElfServer.connections[client_id]['generation_thread'] = threading.Thread(target=lollmsElfServer.start_message_generation, args=(message, message.id, client_id))\n-            lollmsElfServer.connections[client_id]['generation_thread'].start()\n+            client.generation_thread = threading.Thread(target=lollmsElfServer.start_message_generation, args=(message, message.id, client_id))\n+            client.generation_thread.start()\n             \n             # lollmsElfServer.sio.sleep(0.01)\n             ASCIIColors.info(\"Started generation task\")\n@@ -81,43 +83,45 @@ def handle_generate_msg(sid, data):\n     @sio.on('generate_msg_from')\n     def handle_generate_msg_from(sid, data):\n         client_id = sid\n+        client = lollmsElfServer.session.get_client(client_id)\n         lollmsElfServer.cancel_gen = False\n-        lollmsElfServer.connections[client_id][\"continuing\"]=False\n-        lollmsElfServer.connections[client_id][\"first_chunk\"]=True\n+        client.continuing=False\n+        client.first_chunk=True\n         \n-        if lollmsElfServer.connections[client_id][\"current_discussion\"] is None:\n+        if lollmsElfServer.session.get_client(client_id).discussion is None:\n             ASCIIColors.warning(\"Please select a discussion\")\n             lollmsElfServer.error(\"Please select a discussion first\", client_id=client_id)\n             return\n         id_ = data['id']\n         generation_type = data.get('msg_type',None)\n         if id_==-1:\n-            message = lollmsElfServer.connections[client_id][\"current_discussion\"].current_message\n+            message = lollmsElfServer.session.get_client(client_id).discussion.current_message\n         else:\n-            message = lollmsElfServer.connections[client_id][\"current_discussion\"].load_message(id_)\n+            message = lollmsElfServer.session.get_client(client_id).discussion.load_message(id_)\n         if message is None:\n             return            \n-        lollmsElfServer.connections[client_id]['generation_thread'] = threading.Thread(target=lollmsElfServer.start_message_generation, args=(message, message.id, client_id, False, generation_type))\n-        lollmsElfServer.connections[client_id]['generation_thread'].start()\n+        client.generation_thread = threading.Thread(target=lollmsElfServer.start_message_generation, args=(message, message.id, client_id, False, generation_type))\n+        client.generation_thread.start()\n \n     @sio.on('continue_generate_msg_from')\n     def handle_continue_generate_msg_from(sid, data):\n         client_id = sid\n+        client = lollmsElfServer.session.get_client(client_id)\n         lollmsElfServer.cancel_gen = False\n-        lollmsElfServer.connections[client_id][\"continuing\"]=True\n-        lollmsElfServer.connections[client_id][\"first_chunk\"]=True\n+        client.continuing=True\n+        client.first_chunk=True\n         \n-        if lollmsElfServer.connections[client_id][\"current_discussion\"] is None:\n+        if lollmsElfServer.session.get_client(client_id).discussion is None:\n             ASCIIColors.yellow(\"Please select a discussion\")\n             lollmsElfServer.error(\"Please select a discussion\", client_id=client_id)\n             return\n         id_ = data['id']\n         if id_==-1:\n-            message = lollmsElfServer.connections[client_id][\"current_discussion\"].current_message\n+            message = lollmsElfServer.session.get_client(client_id).discussion.current_message\n         else:\n-            message = lollmsElfServer.connections[client_id][\"current_discussion\"].load_message(id_)\n+            message = lollmsElfServer.session.get_client(client_id).discussion.load_message(id_)\n \n-        lollmsElfServer.connections[client_id][\"generated_text\"]=message.content\n-        lollmsElfServer.connections[client_id]['generation_thread'] = threading.Thread(target=lollmsElfServer.start_message_generation, args=(message, message.id, client_id, True))\n-        lollmsElfServer.connections[client_id]['generation_thread'].start()\n+        client.generated_text=message.content\n+        client.generation_thread = threading.Thread(target=lollmsElfServer.start_message_generation, args=(message, message.id, client_id, True))\n+        client.generation_thread.start()\n "
        },
        {
          "filename": "events/lollms_interactive_events.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -28,7 +28,7 @@\n import os\n import time\n \n-from api.db import Discussion\n+from lollms.databases.discussions_database import Discussion\n from datetime import datetime\n \n router = APIRouter()"
        },
        {
          "filename": "lollms_core",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-Subproject commit 5424913d1237f6bfc0c2175170b63260875f35f8\n+Subproject commit e5bd88ade664254a29275bd950b6e194aa34ceef"
        },
        {
          "filename": "lollms_webui.py",
          "status": "modified",
          "additions": 77,
          "deletions": 406,
          "patch": "@@ -8,7 +8,7 @@\n \n from lollms.server.elf_server import LOLLMSElfServer\n from datetime import datetime\n-from api.db import DiscussionsDB, Discussion\n+from lollms.databases.discussions_database import DiscussionsDB, Discussion\n from pathlib import Path\n from lollms.config import InstallOption\n from lollms.types import MSG_TYPE, SENDER_TYPES\n@@ -20,7 +20,7 @@\n from lollms.com import NotificationType, NotificationDisplayType, LoLLMsCom\n from lollms.app import LollmsApplication\n from lollms.utilities import File64BitsManager, PromptReshaper, PackageManager, find_first_available_file_index, run_async, is_asyncio_loop_running, yes_or_no_input\n-from lollms.generation import RECPTION_MANAGER, ROLE_CHANGE_DECISION, ROLE_CHANGE_OURTPUT\n+from lollms.generation import RECEPTION_MANAGER, ROLE_CHANGE_DECISION, ROLE_CHANGE_OURTPUT\n \n import git\n import asyncio\n@@ -211,46 +211,22 @@ def __init__(\n \n         # This is used to keep track of messages \n         self.download_infos={}\n-        \n-        self.connections = {\n-            0:{\n-                \"current_discussion\":None,\n-                \"generated_text\":\"\",\n-                \"cancel_generation\": False,          \n-                \"generation_thread\": None,\n-                \"processing\":False,\n-                \"schedule_for_deletion\":False,\n-                \"continuing\": False,\n-                \"first_chunk\": True,\n-                \"reception_manager\": RECPTION_MANAGER()\n-            }\n-        }\n \n         # Define a WebSocket event handler\n         @sio.event\n         async def connect(sid, environ):\n-            #Create a new connection information\n-            self.connections[sid] = {\n-                \"current_discussion\":self.db.load_last_discussion(),\n-                \"generated_text\":\"\",\n-                \"continuing\": False,\n-                \"first_chunk\": True,\n-                \"cancel_generation\": False,          \n-                \"generation_thread\": None,\n-                \"processing\":False,\n-                \"schedule_for_deletion\":False,\n-                \"reception_manager\":RECPTION_MANAGER()\n-            }\n+            self.session.add_client(sid, sid, self.db.load_last_discussion(), self.db)\n             await self.sio.emit('connected', to=sid) \n             ASCIIColors.success(f'Client {sid} connected')\n \n         @sio.event\n         def disconnect(sid):\n             try:\n-                if self.connections[sid][\"processing\"]:\n-                    self.connections[sid][\"schedule_for_deletion\"]=True\n-                # else:\n-                #    del self.connections[sid]\n+                self.session.add_client(sid, sid, self.db.load_last_discussion(), self.db)\n+                if self.session.get_client(sid).processing:\n+                    self.session.get_client(sid).schedule_for_deletion=True\n+                else:\n+                   self.session.remove_client(sid, sid)\n             except Exception as ex:\n                 pass\n             \n@@ -264,7 +240,7 @@ def disconnect(sid):\n         self.start_servers()\n \n     def get_uploads_path(self, client_id):\n-        return self.db.discussion_db_path/f'{self.connections[client_id][\"current_discussion\"].discussion_id}'\n+        return self.session.get_client(client_id).discussion_path # self.db.discussion_db_path/f'{[\"discussion\"].discussion_id}'\n     # Other methods and properties of the LoLLMSWebUI singleton class\n     def check_module_update_(self, repo_path, branch_name=\"main\"):\n         try:\n@@ -354,26 +330,27 @@ def audio_callback(self, text):\n         if self.summoned:\n             client_id = 0\n             self.cancel_gen = False\n-            self.connections[client_id][\"generated_text\"]=\"\"\n-            self.connections[client_id][\"cancel_generation\"]=False\n-            self.connections[client_id][\"continuing\"]=False\n-            self.connections[client_id][\"first_chunk\"]=True\n+            client = self.session.get_client(client_id)\n+            client.generated_text=\"\"\n+            client.cancel_generation=False\n+            client.continuing=False\n+            client.first_chunk=True\n             \n             if not self.model:\n                 ASCIIColors.error(\"Model not selected. Please select a model\")\n                 self.error(\"Model not selected. Please select a model\", client_id=client_id)\n                 return\n  \n             if not self.busy:\n-                if self.connections[client_id][\"current_discussion\"] is None:\n+                if client.discussion is None:\n                     if self.db.does_last_discussion_have_messages():\n-                        self.connections[client_id][\"current_discussion\"] = self.db.create_discussion()\n+                        client.discussion = self.db.create_discussion()\n                     else:\n-                        self.connections[client_id][\"current_discussion\"] = self.db.load_last_discussion()\n+                        client.discussion = self.db.load_last_discussion()\n \n                 prompt = text\n                 ump = self.config.discussion_prompt_separator +self.config.user_name.strip() if self.config.use_user_name_in_discussions else self.personality.user_message_prefix\n-                message = self.connections[client_id][\"current_discussion\"].add_message(\n+                message = client.discussion.add_message(\n                     message_type    = MSG_TYPE.MSG_TYPE_FULL.value,\n                     sender_type     = SENDER_TYPES.SENDER_TYPES_USER.value,\n                     sender          = ump.replace(self.config.discussion_prompt_separator,\"\").replace(\":\",\"\"),\n@@ -383,8 +360,8 @@ def audio_callback(self, text):\n                 )\n \n                 ASCIIColors.green(\"Starting message generation by \"+self.personality.name)\n-                self.connections[client_id]['generation_thread'] = threading.Thread(target=self.start_message_generation, args=(message, message.id, client_id))\n-                self.connections[client_id]['generation_thread'].start()\n+                client.generation_thread = threading.Thread(target=self.start_message_generation, args=(message, message.id, client_id))\n+                client.generation_thread.start()\n                 \n                 self.sio.sleep(0.01)\n                 ASCIIColors.info(\"Started generation task\")\n@@ -689,328 +666,17 @@ def receive(\n    \n \n     def recover_discussion(self,client_id, message_index=-1):\n-        messages = self.connections[client_id][\"current_discussion\"].get_messages()\n+        messages = self.session.get_client(client_id).discussion.get_messages()\n         discussion=\"\"\n         for msg in messages:\n             if message_index!=-1 and msg>message_index:\n                 break\n             discussion += \"\\n\" + self.config.discussion_prompt_separator + msg.sender + \": \" + msg.content.strip()\n         return discussion\n-    def prepare_query(self, client_id: str, message_id: int = -1, is_continue: bool = False, n_tokens: int = 0, generation_type = None) -> Tuple[str, str, List[str]]:\n-        \"\"\"\n-        Prepares the query for the model.\n-\n-        Args:\n-            client_id (str): The client ID.\n-            message_id (int): The message ID. Default is -1.\n-            is_continue (bool): Whether the query is a continuation. Default is False.\n-            n_tokens (int): The number of tokens. Default is 0.\n-\n-        Returns:\n-            Tuple[str, str, List[str]]: The prepared query, original message content, and tokenized query.\n-        \"\"\"\n-        if self.personality.callback is None:\n-            self.personality.callback = partial(self.process_chunk, client_id=client_id)\n-        # Get the list of messages\n-        messages = self.connections[client_id][\"current_discussion\"].get_messages()\n-\n-        # Find the index of the message with the specified message_id\n-        message_index = -1\n-        for i, message in enumerate(messages):\n-            if message.id == message_id:\n-                message_index = i\n-                break\n-        \n-        # Define current message\n-        current_message = messages[message_index]\n-\n-        # Build the conditionning text block\n-        conditionning = self.personality.personality_conditioning\n-\n-        # Check if there are document files to add to the prompt\n-        internet_search_results = \"\"\n-        internet_search_infos = []\n-        documentation = \"\"\n-        knowledge = \"\"\n-\n-\n-        # boosting information\n-        if self.config.positive_boost:\n-            positive_boost=\"\\n!@>important information: \"+self.config.positive_boost+\"\\n\"\n-            n_positive_boost = len(self.model.tokenize(positive_boost))\n-        else:\n-            positive_boost=\"\"\n-            n_positive_boost = 0\n-\n-        if self.config.negative_boost:\n-            negative_boost=\"\\n!@>important information: \"+self.config.negative_boost+\"\\n\"\n-            n_negative_boost = len(self.model.tokenize(negative_boost))\n-        else:\n-            negative_boost=\"\"\n-            n_negative_boost = 0\n-\n-        if self.config.force_output_language_to_be:\n-            force_language=\"\\n!@>important information: Answer the user in this language :\"+self.config.force_output_language_to_be+\"\\n\"\n-            n_force_language = len(self.model.tokenize(force_language))\n-        else:\n-            force_language=\"\"\n-            n_force_language = 0\n-\n-        if self.config.fun_mode:\n-            fun_mode=\"\\n!@>important information: Fun mode activated. In this mode you must answer in a funny playful way. Do not be serious in your answers. Each answer needs to make the user laugh.\\n\"\n-            n_fun_mode = len(self.model.tokenize(positive_boost))\n-        else:\n-            fun_mode=\"\"\n-            n_fun_mode = 0\n-\n-        discussion = None\n-        if generation_type != \"simple_question\":\n-\n-            if self.config.activate_internet_search:\n-                if discussion is None:\n-                    discussion = self.recover_discussion(client_id)\n-                if self.config.internet_activate_search_decision:\n-                    self.personality.step_start(f\"Requesting if {self.personality.name} needs to search internet to answer the user\")\n-                    need = not self.personality.yes_no(f\"Do you have enough information to give a satisfactory answer to {self.config.user_name}'s request without internet search? (If you do not know or you can't answer 0 (no)\", discussion)\n-                    self.personality.step_end(f\"Requesting if {self.personality.name} needs to search internet to answer the user\")\n-                    self.personality.step(\"Yes\" if need else \"No\")\n-                else:\n-                    need=True\n-                if need:\n-                    self.personality.step_start(\"Crafting internet search query\")\n-                    query = self.personality.fast_gen(f\"!@>discussion:\\n{discussion[-2048:]}\\n!@>system: Read the discussion and craft a web search query suited to recover needed information to reply to last {self.config.user_name} message.\\nDo not answer the prompt. Do not add explanations.\\n!@>websearch query: \", max_generation_size=256, show_progress=True, callback=self.personality.sink)\n-                    self.personality.step_end(\"Crafting internet search query\")\n-                    self.personality.step(f\"web search query: {query}\")\n-\n-                    self.personality.step_start(\"Performing Internet search\")\n-\n-                    internet_search_results=f\"!@>important information: Use the internet search results data to answer {self.config.user_name}'s last message. It is strictly forbidden to give the user an answer without having actual proof from the documentation.\\n!@>Web search results:\\n\"\n-\n-                    docs, sorted_similarities, document_ids = self.personality.internet_search(query, self.config.internet_quick_search)\n-                    for doc, infos,document_id in zip(docs, sorted_similarities, document_ids):\n-                        internet_search_infos.append(document_id)\n-                        internet_search_results += f\"search result chunk:\\nchunk_infos:{document_id['url']}\\nchunk_title:{document_id['title']}\\ncontent:{doc}\"\n-                    self.personality.step_end(\"Performing Internet search\")\n-\n-            if self.personality.persona_data_vectorizer:\n-                if documentation==\"\":\n-                    documentation=\"\\n!@>important information: Use the documentation data to answer the user questions. If the data is not present in the documentation, please tell the user that the information he is asking for does not exist in the documentation section. It is strictly forbidden to give the user an answer without having actual proof from the documentation.\\n!@>Documentation:\\n\"\n-\n-                if self.config.data_vectorization_build_keys_words:\n-                    if discussion is None:\n-                        discussion = self.recover_discussion(client_id)\n-                    query = self.personality.fast_gen(f\"\\n!@>instruction: Read the discussion and rewrite the last prompt for someone who didn't read the entire discussion.\\nDo not answer the prompt. Do not add explanations.\\n!@>discussion:\\n{discussion[-2048:]}\\n!@>enhanced query: \", max_generation_size=256, show_progress=True)\n-                    ASCIIColors.cyan(f\"Query:{query}\")\n-                else:\n-                    query = current_message.content\n-                try:\n-                    docs, sorted_similarities, document_ids = self.personality.persona_data_vectorizer.recover_text(query, top_k=self.config.data_vectorization_nb_chunks)\n-                    for doc, infos, doc_id in zip(docs, sorted_similarities, document_ids):\n-                        documentation += f\"document chunk:\\nchunk_infos:{infos}\\ncontent:{doc}\"\n-                except:\n-                    self.warning(\"Couldn't add documentation to the context. Please verify the vector database\")\n-            \n-            if len(self.personality.text_files) > 0 and self.personality.vectorizer:\n-                if documentation==\"\":\n-                    documentation=\"\\n!@>important information: Use the documentation data to answer the user questions. If the data is not present in the documentation, please tell the user that the information he is asking for does not exist in the documentation section. It is strictly forbidden to give the user an answer without having actual proof from the documentation.\\n!@>Documentation:\\n\"\n-\n-                if self.config.data_vectorization_build_keys_words:\n-                    discussion = self.recover_discussion(client_id)\n-                    query = self.personality.fast_gen(f\"\\n!@>instruction: Read the discussion and rewrite the last prompt for someone who didn't read the entire discussion.\\nDo not answer the prompt. Do not add explanations.\\n!@>discussion:\\n{discussion[-2048:]}\\n!@>enhanced query: \", max_generation_size=256, show_progress=True)\n-                    ASCIIColors.cyan(f\"Query: {query}\")\n-                else:\n-                    query = current_message.content\n-\n-                try:\n-                    docs, sorted_similarities, document_ids = self.personality.vectorizer.recover_text(query, top_k=self.config.data_vectorization_nb_chunks)\n-                    for doc, infos in zip(docs, sorted_similarities):\n-                        documentation += f\"document chunk:\\nchunk path: {infos[0]}\\nchunk content:{doc}\"\n-                    documentation += \"\\n!@>important information: Use the documentation data to answer the user questions. If the data is not present in the documentation, please tell the user that the information he is asking for does not exist in the documentation section. It is strictly forbidden to give the user an answer without having actual proof from the documentation.\"\n-                except:\n-                    self.warning(\"Couldn't add documentation to the context. Please verify the vector database\")\n-            # Check if there is discussion knowledge to add to the prompt\n-            if self.config.activate_ltm and self.long_term_memory is not None:\n-                if knowledge==\"\":\n-                    knowledge=\"!@>knowledge:\\n\"\n-\n-                try:\n-                    docs, sorted_similarities, document_ids = self.long_term_memory.recover_text(current_message.content, top_k=self.config.data_vectorization_nb_chunks)\n-                    for i,(doc, infos) in enumerate(zip(docs, sorted_similarities)):\n-                        knowledge += f\"!@>knowledge {i}:\\n!@>title:\\n{infos[0]}\\ncontent:\\n{doc}\"\n-                except:\n-                    self.warning(\"Couldn't add long term memory information to the context. Please verify the vector database\")        # Add information about the user\n-        user_description=\"\"\n-        if self.config.use_user_name_in_discussions:\n-            user_description=\"!@>User description:\\n\"+self.config.user_description+\"\\n\"\n-\n-\n-        # Tokenize the conditionning text and calculate its number of tokens\n-        tokens_conditionning = self.model.tokenize(conditionning)\n-        n_cond_tk = len(tokens_conditionning)\n-\n-\n-        # Tokenize the internet search results text and calculate its number of tokens\n-        if len(internet_search_results)>0:\n-            tokens_internet_search_results = self.model.tokenize(internet_search_results)\n-            n_isearch_tk = len(tokens_internet_search_results)\n-        else:\n-            tokens_internet_search_results = []\n-            n_isearch_tk = 0\n-\n-\n-        # Tokenize the documentation text and calculate its number of tokens\n-        if len(documentation)>0:\n-            tokens_documentation = self.model.tokenize(documentation)\n-            n_doc_tk = len(tokens_documentation)\n-        else:\n-            tokens_documentation = []\n-            n_doc_tk = 0\n-\n-        # Tokenize the knowledge text and calculate its number of tokens\n-        if len(knowledge)>0:\n-            tokens_history = self.model.tokenize(knowledge)\n-            n_history_tk = len(tokens_history)\n-        else:\n-            tokens_history = []\n-            n_history_tk = 0\n-\n-\n-        # Tokenize user description\n-        if len(user_description)>0:\n-            tokens_user_description = self.model.tokenize(user_description)\n-            n_user_description_tk = len(tokens_user_description)\n-        else:\n-            tokens_user_description = []\n-            n_user_description_tk = 0\n-\n-\n-        # Calculate the total number of tokens between conditionning, documentation, and knowledge\n-        total_tokens = n_cond_tk + n_isearch_tk + n_doc_tk + n_history_tk + n_user_description_tk + n_positive_boost + n_negative_boost + n_force_language + n_fun_mode\n-\n-        # Calculate the available space for the messages\n-        available_space = self.config.ctx_size - n_tokens - total_tokens\n-\n-        # if self.config.debug:\n-        #     self.info(f\"Tokens summary:\\nConditionning:{n_cond_tk}\\nn_isearch_tk:{n_isearch_tk}\\ndoc:{n_doc_tk}\\nhistory:{n_history_tk}\\nuser description:{n_user_description_tk}\\nAvailable space:{available_space}\",10)\n-\n-        # Raise an error if the available space is 0 or less\n-        if available_space<1:\n-            self.error(f\"Not enough space in context!!\\nVerify that your vectorization settings for documents or internet search are realistic compared to your context size.\\nYou are {available_space} short of context!\")\n-            raise Exception(\"Not enough space in context!!\")\n-\n-        # Accumulate messages until the cumulative number of tokens exceeds available_space\n-        tokens_accumulated = 0\n-\n-\n-        # Initialize a list to store the full messages\n-        full_message_list = []\n-        # If this is not a continue request, we add the AI prompt\n-        if not is_continue:\n-            message_tokenized = self.model.tokenize(\n-                \"\\n\" +self.personality.ai_message_prefix.strip()\n-            )\n-            full_message_list.append(message_tokenized)\n-            # Update the cumulative number of tokens\n-            tokens_accumulated += len(message_tokenized)\n-\n-\n-        if generation_type != \"simple_question\":\n-            # Accumulate messages starting from message_index\n-            for i in range(message_index, -1, -1):\n-                message = messages[i]\n-\n-                # Check if the message content is not empty and visible to the AI\n-                if message.content != '' and (\n-                        message.message_type <= MSG_TYPE.MSG_TYPE_FULL_INVISIBLE_TO_USER.value and message.message_type != MSG_TYPE.MSG_TYPE_FULL_INVISIBLE_TO_AI.value):\n-\n-                    # Tokenize the message content\n-                    message_tokenized = self.model.tokenize(\n-                        \"\\n\" + self.config.discussion_prompt_separator + message.sender + \": \" + message.content.strip())\n-\n-                    # Check if adding the message will exceed the available space\n-                    if tokens_accumulated + len(message_tokenized) > available_space:\n-                        break\n-\n-                    # Add the tokenized message to the full_message_list\n-                    full_message_list.insert(0, message_tokenized)\n-\n-                    # Update the cumulative number of tokens\n-                    tokens_accumulated += len(message_tokenized)\n-        else:\n-            message = messages[message_index]\n-\n-            # Check if the message content is not empty and visible to the AI\n-            if message.content != '' and (\n-                    message.message_type <= MSG_TYPE.MSG_TYPE_FULL_INVISIBLE_TO_USER.value and message.message_type != MSG_TYPE.MSG_TYPE_FULL_INVISIBLE_TO_AI.value):\n-\n-                # Tokenize the message content\n-                message_tokenized = self.model.tokenize(\n-                    \"\\n\" + self.config.discussion_prompt_separator + message.sender + \": \" + message.content.strip())\n-\n-                # Add the tokenized message to the full_message_list\n-                full_message_list.insert(0, message_tokenized)\n-\n-                # Update the cumulative number of tokens\n-                tokens_accumulated += len(message_tokenized)\n-\n-        # Build the final discussion messages by detokenizing the full_message_list\n-        discussion_messages = \"\"\n-        for i in range(len(full_message_list)-1):\n-            message_tokens = full_message_list[i]\n-            discussion_messages += self.model.detokenize(message_tokens)\n-        \n-        if len(full_message_list)>0:\n-            ai_prefix = self.model.detokenize(full_message_list[-1])\n-        else:\n-            ai_prefix = \"\"\n-        # Build the final prompt by concatenating the conditionning and discussion messages\n-        prompt_data = conditionning + internet_search_results + documentation + knowledge + user_description + discussion_messages + positive_boost + negative_boost + force_language + fun_mode + ai_prefix\n-\n-        # Tokenize the prompt data\n-        tokens = self.model.tokenize(prompt_data)\n-\n-        # if this is a debug then show prompt construction details\n-        if self.config[\"debug\"]:\n-            ASCIIColors.bold(\"CONDITIONNING\")\n-            ASCIIColors.yellow(conditionning)\n-            ASCIIColors.bold(\"INTERNET SEARCH\")\n-            ASCIIColors.yellow(internet_search_results)\n-            ASCIIColors.bold(\"DOC\")\n-            ASCIIColors.yellow(documentation)\n-            ASCIIColors.bold(\"HISTORY\")\n-            ASCIIColors.yellow(knowledge)\n-            ASCIIColors.bold(\"DISCUSSION\")\n-            ASCIIColors.hilight(discussion_messages,\"!@>\",ASCIIColors.color_yellow,ASCIIColors.color_bright_red,False)\n-            ASCIIColors.bold(\"Final prompt\")\n-            ASCIIColors.hilight(prompt_data,\"!@>\",ASCIIColors.color_yellow,ASCIIColors.color_bright_red,False)\n-            ASCIIColors.info(f\"prompt size:{len(tokens)} tokens\") \n-            ASCIIColors.info(f\"available space after doc and knowledge:{available_space} tokens\") \n-\n-            # self.info(f\"Tokens summary:\\nPrompt size:{len(tokens)}\\nTo generate:{available_space}\",10)\n-\n-        # Details\n-        context_details = {\n-            \"conditionning\":conditionning,\n-            \"internet_search_infos\":internet_search_infos,\n-            \"internet_search_results\":internet_search_results,\n-            \"documentation\":documentation,\n-            \"knowledge\":knowledge,\n-            \"user_description\":user_description,\n-            \"discussion_messages\":discussion_messages,\n-            \"positive_boost\":positive_boost,\n-            \"negative_boost\":negative_boost,\n-            \"force_language\":force_language,\n-            \"fun_mode\":fun_mode,\n-            \"ai_prefix\":ai_prefix\n-\n-        }    \n-\n-        # Return the prepared query, original message content, and tokenized query\n-        return prompt_data, current_message.content, tokens, context_details, internet_search_infos\n-\n+    \n \n     def get_discussion_to(self, client_id,  message_id=-1):\n-        messages = self.connections[client_id][\"current_discussion\"].get_messages()\n+        messages = self.session.get_client(client_id).discussion.get_messages()\n         full_message_list = []\n         ump = self.config.discussion_prompt_separator +self.config.user_name.strip() if self.config.use_user_name_in_discussions else self.personality.user_message_prefix\n \n@@ -1044,7 +710,7 @@ def notify(\n             verbose = self.verbose\n \n         run_async(partial(self.sio.emit,'notification', {\n-                                'content': content,# self.connections[client_id][\"generated_text\"], \n+                                'content': content,\n                                 'notification_type': notification_type.value,\n                                 \"duration\": duration,\n                                 'display_type':display_type.value\n@@ -1073,19 +739,20 @@ def new_message(self,\n                             sender_type:SENDER_TYPES=SENDER_TYPES.SENDER_TYPES_AI,\n                             open=False\n                         ):\n+        client = self.session.get_client(client_id)\n         self.close_message(client_id)\n         mtdt = metadata if metadata is None or type(metadata) == str else json.dumps(metadata, indent=4)\n         if sender==None:\n             sender= self.personality.name\n-        msg = self.connections[client_id][\"current_discussion\"].add_message(\n+        msg = client.discussion.add_message(\n             message_type        = message_type.value,\n             sender_type         = sender_type.value,\n             sender              = sender,\n             content             = content,\n             metadata            = mtdt,\n             ui                  = ui,\n             rank                = 0,\n-            parent_message_id   = self.connections[client_id][\"current_discussion\"].current_message.id,\n+            parent_message_id   = client.discussion.current_message.id,\n             binding             = self.config[\"binding_name\"],\n             model               = self.config[\"model_name\"], \n             personality         = self.config[\"personalities\"][self.config[\"active_personality_id\"]],\n@@ -1107,8 +774,8 @@ def new_message(self,\n                             'model' :                   self.config[\"model_name\"], \n                             'personality':              self.config[\"personalities\"][self.config[\"active_personality_id\"]],\n \n-                            'created_at':               self.connections[client_id][\"current_discussion\"].current_message.created_at,\n-                            'finished_generating_at':   self.connections[client_id][\"current_discussion\"].current_message.finished_generating_at,\n+                            'created_at':               client.discussion.current_message.created_at,\n+                            'finished_generating_at':   client.discussion.current_message.finished_generating_at,\n \n                             'open':                     open\n                         }, to=client_id\n@@ -1121,18 +788,19 @@ def update_message(self, client_id, chunk,\n                             ui=None,\n                             msg_type:MSG_TYPE=None\n                         ):\n-        self.connections[client_id][\"current_discussion\"].current_message.finished_generating_at=datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n+        client = self.session.get_client(client_id)\n+        client.discussion.current_message.finished_generating_at=datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n         mtdt = json.dumps(metadata, indent=4) if metadata is not None and type(metadata)== list else metadata\n         if self.nb_received_tokens==1:\n             run_async(\n                 partial(self.sio.emit,'update_message', {\n                                                 \"sender\": self.personality.name,\n-                                                'id':self.connections[client_id][\"current_discussion\"].current_message.id, \n-                                                'content': \"\u270d warming up ...\",# self.connections[client_id][\"generated_text\"],\n+                                                'id':client.discussion.current_message.id, \n+                                                'content': \"\u270d warming up ...\",\n                                                 'ui': ui,\n-                                                'discussion_id':self.connections[client_id][\"current_discussion\"].discussion_id,\n+                                                'discussion_id':client.discussion.discussion_id,\n                                                 'message_type': MSG_TYPE.MSG_TYPE_STEP_END.value,\n-                                                'finished_generating_at': self.connections[client_id][\"current_discussion\"].current_message.finished_generating_at,\n+                                                'finished_generating_at': client.discussion.current_message.finished_generating_at,\n                                                 'parameters':parameters,\n                                                 'metadata':metadata\n                                             }, to=client_id\n@@ -1142,41 +810,42 @@ def update_message(self, client_id, chunk,\n         run_async(\n             partial(self.sio.emit,'update_message', {\n                                             \"sender\": self.personality.name,\n-                                            'id':self.connections[client_id][\"current_discussion\"].current_message.id, \n-                                            'content': chunk,# self.connections[client_id][\"generated_text\"],\n+                                            'id':client.discussion.current_message.id, \n+                                            'content': chunk,\n                                             'ui': ui,\n-                                            'discussion_id':self.connections[client_id][\"current_discussion\"].discussion_id,\n+                                            'discussion_id':client.discussion.discussion_id,\n                                             'message_type': msg_type.value if msg_type is not None else MSG_TYPE.MSG_TYPE_CHUNK.value if self.nb_received_tokens>1 else MSG_TYPE.MSG_TYPE_FULL.value,\n-                                            'finished_generating_at': self.connections[client_id][\"current_discussion\"].current_message.finished_generating_at,\n+                                            'finished_generating_at': client.discussion.current_message.finished_generating_at,\n                                             'parameters':parameters,\n                                             'metadata':metadata\n                                         }, to=client_id\n                                 )\n         )\n         if msg_type != MSG_TYPE.MSG_TYPE_INFO:\n-            self.connections[client_id][\"current_discussion\"].update_message(self.connections[client_id][\"generated_text\"], new_metadata=mtdt, new_ui=ui)\n+            client.discussion.update_message(client.generated_text, new_metadata=mtdt, new_ui=ui)\n \n \n \n     def close_message(self, client_id):\n-        if not self.connections[client_id][\"current_discussion\"]:\n+        client = self.session.get_client(client_id)\n+        if not client.discussion:\n             return\n         #fix halucination\n-        self.connections[client_id][\"generated_text\"]=self.connections[client_id][\"generated_text\"].split(\"!@>\")[0]\n+        client.generated_text=client.generated_text.split(\"!@>\")[0]\n         # Send final message\n-        self.connections[client_id][\"current_discussion\"].current_message.finished_generating_at=datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n+        client.discussion.current_message.finished_generating_at=datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n         run_async(\n             partial(self.sio.emit,'close_message', {\n                                             \"sender\": self.personality.name,\n-                                            \"id\": self.connections[client_id][\"current_discussion\"].current_message.id,\n-                                            \"content\":self.connections[client_id][\"generated_text\"],\n+                                            \"id\": client.discussion.current_message.id,\n+                                            \"content\":client.generated_text,\n \n                                             'binding': self.config[\"binding_name\"],\n                                             'model' : self.config[\"model_name\"], \n                                             'personality':self.config[\"personalities\"][self.config[\"active_personality_id\"]],\n \n-                                            'created_at': self.connections[client_id][\"current_discussion\"].current_message.created_at,\n-                                            'finished_generating_at': self.connections[client_id][\"current_discussion\"].current_message.finished_generating_at,\n+                                            'created_at': client.discussion.current_message.created_at,\n+                                            'finished_generating_at': client.discussion.current_message.finished_generating_at,\n \n                                         }, to=client_id\n                                 )\n@@ -1194,9 +863,10 @@ def process_chunk(\n         \"\"\"\n         Processes a chunk of generated text\n         \"\"\"\n+        client = self.session.get_client(client_id)\n         if chunk is None:\n             return True\n-        if not client_id in list(self.connections.keys()):\n+        if not client_id in list(self.session.clients.keys()):\n             self.error(\"Connection lost\", client_id=client_id)\n             return\n         if message_type == MSG_TYPE.MSG_TYPE_STEP:\n@@ -1257,20 +927,20 @@ def process_chunk(\n             sys.stdout.flush()\n             if chunk:\n                 \n-                self.connections[client_id][\"generated_text\"] += chunk\n-            antiprompt = self.personality.detect_antiprompt(self.connections[client_id][\"generated_text\"])\n+                client.generated_text += chunk\n+            antiprompt = self.personality.detect_antiprompt(client.generated_text)\n             if antiprompt:\n                 ASCIIColors.warning(f\"\\nDetected hallucination with antiprompt: {antiprompt}\")\n-                self.connections[client_id][\"generated_text\"] = self.remove_text_from_string(self.connections[client_id][\"generated_text\"],antiprompt)\n-                self.update_message(client_id, self.connections[client_id][\"generated_text\"], parameters, metadata, None, MSG_TYPE.MSG_TYPE_FULL)\n+                client.generated_text = self.remove_text_from_string(client.generated_text,antiprompt)\n+                self.update_message(client_id, client.generated_text, parameters, metadata, None, MSG_TYPE.MSG_TYPE_FULL)\n                 return False\n             else:\n                 self.nb_received_tokens += 1\n-                if self.connections[client_id][\"continuing\"] and self.connections[client_id][\"first_chunk\"]:\n-                    self.update_message(client_id, self.connections[client_id][\"generated_text\"], parameters, metadata)\n+                if client.continuing and client.first_chunk:\n+                    self.update_message(client_id, client.generated_text, parameters, metadata)\n                 else:\n                     self.update_message(client_id, chunk, parameters, metadata, msg_type=MSG_TYPE.MSG_TYPE_CHUNK)\n-                self.connections[client_id][\"first_chunk\"]=False\n+                client.first_chunk=False\n                 # if stop generation is detected then stop\n                 if not self.cancel_gen:\n                     return True\n@@ -1281,18 +951,18 @@ def process_chunk(\n  \n         # Stream the generated text to the main process\n         elif message_type == MSG_TYPE.MSG_TYPE_FULL:\n-            self.connections[client_id][\"generated_text\"] = chunk\n+            client.generated_text = chunk\n             self.nb_received_tokens += 1\n             dt =(datetime.now() - self.start_time).seconds\n             if dt==0:\n                 dt=1\n             spd = self.nb_received_tokens/dt\n             ASCIIColors.green(f\"Received {self.nb_received_tokens} tokens (speed: {spd:.2f}t/s)              \",end=\"\\r\",flush=True) \n-            antiprompt = self.personality.detect_antiprompt(self.connections[client_id][\"generated_text\"])\n+            antiprompt = self.personality.detect_antiprompt(client.generated_text)\n             if antiprompt:\n                 ASCIIColors.warning(f\"\\nDetected hallucination with antiprompt: {antiprompt}\")\n-                self.connections[client_id][\"generated_text\"] = self.remove_text_from_string(self.connections[client_id][\"generated_text\"],antiprompt)\n-                self.update_message(client_id, self.connections[client_id][\"generated_text\"], parameters, metadata, None, MSG_TYPE.MSG_TYPE_FULL)\n+                client.generated_text = self.remove_text_from_string(client.generated_text,antiprompt)\n+                self.update_message(client_id, client.generated_text, parameters, metadata, None, MSG_TYPE.MSG_TYPE_FULL)\n                 return False\n \n             self.update_message(client_id, chunk,  parameters, metadata, ui=None, msg_type=message_type)\n@@ -1397,21 +1067,22 @@ def _generate(self, prompt, n_predict, client_id, callback=None):\n         return output\n \n     def start_message_generation(self, message, message_id, client_id, is_continue=False, generation_type=None):\n+        client = self.session.get_client(client_id)\n         if self.personality is None:\n             self.warning(\"Select a personality\")\n             return\n         ASCIIColors.info(f\"Text generation requested by client: {client_id}\")\n         # send the message to the bot\n         print(f\"Received message : {message.content}\")\n-        if self.connections[client_id][\"current_discussion\"]:\n+        if client.discussion:\n             try:\n                 if not self.model:\n                     self.error(\"No model selected. Please make sure you select a model before starting generation\", client_id=client_id)\n                     return          \n                 # First we need to send the new message ID to the client\n                 if is_continue:\n-                    self.connections[client_id][\"current_discussion\"].load_message(message_id)\n-                    self.connections[client_id][\"generated_text\"] = message.content\n+                    client.discussion.load_message(message_id)\n+                    client.generated_text = message.content\n                 else:\n                     self.new_message(client_id, self.personality.name, \"\")\n                     self.update_message(client_id, \"\u270d warming up ...\", msg_type=MSG_TYPE.MSG_TYPE_STEP_START)\n@@ -1420,7 +1091,7 @@ def start_message_generation(self, message, message_id, client_id, is_continue=F\n                 self.discussion_messages, self.current_message, tokens, context_details, internet_search_infos = self.prepare_query(client_id, message_id, is_continue, n_tokens=self.config.min_n_predict, generation_type=generation_type)\n                 self.prepare_reception(client_id)\n                 self.generating = True\n-                self.connections[client_id][\"processing\"]=True\n+                client.processing=True\n                 try:\n                     self.generate(\n                                     self.discussion_messages, \n@@ -1441,7 +1112,7 @@ def start_message_generation(self, message, message_id, client_id, is_continue=F\n                             fn = self.personality.name.lower().replace(' ',\"_\").replace('.','')    \n                             fn = f\"{fn}_{message_id}.wav\"\n                             url = f\"audio/{fn}\"\n-                            self.tts.tts_to_file(self.connections[client_id][\"generated_text\"], Path(self.personality.audio_samples[0]).name, f\"{fn}\", language=language)\n+                            self.tts.tts_to_file(client.generated_text, Path(self.personality.audio_samples[0]).name, f\"{fn}\", language=language)\n                             fl = f\"\\n\".join([\n                             f\"<audio controls>\",\n                             f'    <source src=\"{url}\" type=\"audio/wav\">',\n@@ -1461,7 +1132,7 @@ def start_message_generation(self, message, message_id, client_id, is_continue=F\n                             if self.tts is None:\n                                 self.tts = api.TextToSpeech( kv_cache=True, half=True)\n                             reference_clips = [utils.audio.load_audio(str(p), 22050) for p in self.personality.audio_samples]\n-                            tk = self.model.tokenize(self.connections[client_id][\"generated_text\"])\n+                            tk = self.model.tokenize(client.generated_text)\n                             if len(tk)>100:\n                                 chunk_size = 100\n                                 \n@@ -1472,7 +1143,7 @@ def start_message_generation(self, message, message_id, client_id, is_continue=F\n                                     else:\n                                         pcm_audio = np.concatenate([pcm_audio, self.tts.tts_with_preset(chunk, voice_samples=reference_clips, preset='ultra_fast').numpy().flatten()])\n                             else:\n-                                pcm_audio = self.tts.tts_with_preset(self.connections[client_id][\"generated_text\"], voice_samples=reference_clips, preset='fast').numpy().flatten()\n+                                pcm_audio = self.tts.tts_with_preset(client.generated_text, voice_samples=reference_clips, preset='fast').numpy().flatten()\n                             sd.play(pcm_audio, 22050)\n                             self.personality.step_end(\"Creating audio output\")                        \n                             \"\"\"\n@@ -1513,22 +1184,22 @@ def start_message_generation(self, message, message_id, client_id, is_continue=F\n                         f'</a>',\n                         ])\n                     sources_text += '</div>'\n-                    self.connections[client_id][\"generated_text\"]=self.connections[client_id][\"generated_text\"].split(\"!@>\")[0] + \"\\n\" + sources_text\n-                    self.personality.full(self.connections[client_id][\"generated_text\"])\n-            except:\n-                pass\n+                    client.generated_text=client.generated_text.split(\"!@>\")[0] + \"\\n\" + sources_text\n+                    self.personality.full(client.generated_text)\n+            except Exception as ex:\n+                trace_exception(ex)\n             self.close_message(client_id)\n             self.update_message(client_id, \"Generating ...\", msg_type=MSG_TYPE.MSG_TYPE_STEP_END)\n \n-            self.connections[client_id][\"processing\"]=False\n-            if self.connections[client_id][\"schedule_for_deletion\"]:\n-                del self.connections[client_id]\n+            client.processing=False\n+            if client.schedule_for_deletion:\n+                self.session.remove_client(client.client_id, client.client_id)\n \n             ASCIIColors.success(f\" \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \")\n             ASCIIColors.success(f\" \u2551                        Done                      \u2551 \")\n             ASCIIColors.success(f\" \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d \")\n             if self.config.auto_title:\n-                d = self.connections[client_id][\"current_discussion\"]\n+                d = client.discussion\n                 ttl = d.title()\n                 if ttl is None or ttl==\"\" or ttl==\"untitled\":\n                     title = self.make_discussion_title(d, client_id=client_id)"
        },
        {
          "filename": "utilities/execution_engines/latex_execution_engine.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -14,7 +14,7 @@\n from lollms.main_config import BaseConfig\n from ascii_colors import get_trace_exception, trace_exception\n from ascii_colors import ASCIIColors\n-from api.db import DiscussionsDB\n+from lollms.databases.discussions_database import DiscussionsDB\n from pathlib import Path\n from safe_store.text_vectorizer import TextVectorizer, VectorizationMethod, VisualizationMethod\n import tqdm"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "78b7303da280e81d7891d022430c9e7019036409",
            "date": "2025-01-14T08:22:08Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "858e69c34a9f91c02d64f4736c2c61032a930ef5",
            "date": "2025-01-14T07:56:40Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "953879e8b018a8602bd142844c1d7f008e8ab01c",
            "date": "2025-01-13T22:54:09Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "95a265db4d7c31c581c0e001bb8b213e7607743a",
            "date": "2025-01-13T22:43:32Z",
            "author_login": "ParisNeo"
          },
          {
            "sha": "8c92c3056b20930d7b3f9d5281b2fdae5bc0e4ac",
            "date": "2025-01-13T21:59:26Z",
            "author_login": "ParisNeo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-288",
    "description": "parisneo/lollms-webui is vulnerable to authentication bypass due to insufficient protection over sensitive endpoints. The application checks if the host parameter is not '0.0.0.0' to restrict access, which is inadequate when the application is bound to a specific interface, allowing unauthorized access to endpoints such as '/restart_program', '/update_software', '/check_update', '/start_recording', and '/stop_recording'. This vulnerability can lead to denial of service, unauthorized disabling or overriding of recordings, and potentially other impacts if certain features are enabled in the configuration.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-04-16T00:15:09.967",
    "last_modified": "2024-11-21T08:50:59.783",
    "fix_date": "2024-02-26T00:55:44Z"
  },
  "references": [
    {
      "url": "https://github.com/parisneo/lollms-webui/commit/02e829b5653a1aa5dbbe9413ec84f96caa1274e8",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/2f769c46-aa85-4ab8-8b08-fe791313b7ba",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/parisneo/lollms-webui/commit/02e829b5653a1aa5dbbe9413ec84f96caa1274e8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/2f769c46-aa85-4ab8-8b08-fe791313b7ba",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.491427",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lollms-webui",
    "owner": "parisneo",
    "created_at": "2023-04-06T16:38:00Z",
    "updated_at": "2025-01-14T10:08:17Z",
    "pushed_at": "2025-01-14T08:22:08Z",
    "size": 154737,
    "stars": 4437,
    "forks": 557,
    "open_issues": 162,
    "watchers": 4437,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "CSS": 2202947,
      "Vue": 1151251,
      "Python": 353630,
      "JavaScript": 179164,
      "Shell": 41865,
      "Batchfile": 30713,
      "Inno Setup": 27460,
      "HTML": 22305,
      "Jupyter Notebook": 3623,
      "Dockerfile": 1246
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:52:33.568829"
  }
}