{
  "cve_id": "CVE-2024-1727",
  "github_data": {
    "repository": "gradio-app/gradio",
    "fix_commit": "84802ee6a4806c25287344dce581f9548a99834a",
    "related_commits": [
      "84802ee6a4806c25287344dce581f9548a99834a",
      "84802ee6a4806c25287344dce581f9548a99834a"
    ],
    "patch_url": "https://github.com/gradio-app/gradio/commit/84802ee6a4806c25287344dce581f9548a99834a.patch",
    "fix_commit_details": {
      "sha": "84802ee6a4806c25287344dce581f9548a99834a",
      "commit_date": "2024-02-22T19:54:51Z",
      "author": {
        "login": "abidlabs",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Tighten CORS rules (#7503)",
        "length": 436,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 89,
        "additions": 82,
        "deletions": 7
      },
      "files": [
        {
          "filename": ".changeset/olive-symbols-heal.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+\"gradio\": patch\n+---\n+\n+feat:Tighten CORS rules"
        },
        {
          "filename": "gradio/route_utils.py",
          "status": "modified",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -9,6 +9,7 @@\n from dataclasses import dataclass as python_dataclass\n from tempfile import NamedTemporaryFile, _TemporaryFileWrapper\n from typing import TYPE_CHECKING, AsyncGenerator, BinaryIO, List, Optional, Tuple, Union\n+from urllib.parse import urlparse\n \n import fastapi\n import httpx\n@@ -17,6 +18,7 @@\n from multipart.multipart import parse_options_header\n from starlette.datastructures import FormData, Headers, UploadFile\n from starlette.formparsers import MultiPartException, MultipartPart\n+from starlette.middleware.base import BaseHTTPMiddleware\n \n from gradio import processing_utils, utils\n from gradio.data_classes import PredictBody\n@@ -583,3 +585,58 @@ def starts_with_protocol(string: str) -> bool:\n     \"\"\"\n     pattern = r\"^[a-zA-Z][a-zA-Z0-9+\\-.]*://\"\n     return re.match(pattern, string) is not None\n+\n+\n+def get_hostname(url: str) -> str:\n+    \"\"\"\n+    Returns the hostname of a given url, or an empty string if the url cannot be parsed.\n+    Examples:\n+        get_hostname(\"https://www.gradio.app\") -> \"www.gradio.app\"\n+        get_hostname(\"localhost:7860\") -> \"localhost\"\n+        get_hostname(\"127.0.0.1\") -> \"127.0.0.1\"\n+    \"\"\"\n+    if not url:\n+        return \"\"\n+    if \"://\" not in url:\n+        url = \"http://\" + url\n+    try:\n+        return urlparse(url).hostname or \"\"\n+    except Exception:\n+        return \"\"\n+\n+\n+class CustomCORSMiddleware(BaseHTTPMiddleware):\n+    async def dispatch(self, request: fastapi.Request, call_next):\n+        host: str = request.headers.get(\"host\", \"\")\n+        origin: str = request.headers.get(\"origin\", \"\")\n+        host_name = get_hostname(host)\n+        origin_name = get_hostname(origin)\n+\n+        # Any of these hosts suggests that the Gradio app is running locally.\n+        # Note: \"null\" is a special case that happens if a Gradio app is running\n+        # as an embedded web component in a local static webpage.\n+        localhost_aliases = [\"localhost\", \"127.0.0.1\", \"0.0.0.0\", \"null\"]\n+        is_preflight = (\n+            request.method == \"OPTIONS\"\n+            and \"access-control-request-method\" in request.headers\n+        )\n+\n+        if host_name in localhost_aliases and origin_name not in localhost_aliases:\n+            allow_origin_header = None\n+        else:\n+            allow_origin_header = origin\n+\n+        if is_preflight:\n+            response = fastapi.Response()\n+        else:\n+            response = await call_next(request)\n+\n+        if allow_origin_header:\n+            response.headers[\"Access-Control-Allow-Origin\"] = allow_origin_header\n+        response.headers[\n+            \"Access-Control-Allow-Methods\"\n+        ] = \"GET, POST, PUT, DELETE, OPTIONS\"\n+        response.headers[\n+            \"Access-Control-Allow-Headers\"\n+        ] = \"Origin, Content-Type, Accept\"\n+        return response"
        },
        {
          "filename": "gradio/routes.py",
          "status": "modified",
          "additions": 2,
          "deletions": 7,
          "patch": "@@ -29,7 +29,6 @@\n import markupsafe\n import orjson\n from fastapi import BackgroundTasks, Depends, FastAPI, HTTPException, status\n-from fastapi.middleware.cors import CORSMiddleware\n from fastapi.responses import (\n     FileResponse,\n     HTMLResponse,\n@@ -55,6 +54,7 @@\n from gradio.processing_utils import add_root_url\n from gradio.queueing import Estimation\n from gradio.route_utils import (  # noqa: F401\n+    CustomCORSMiddleware,\n     FileUploadProgress,\n     FileUploadProgressNotQueuedError,\n     FileUploadProgressNotTrackedError,\n@@ -196,12 +196,7 @@ def create_app(\n         app.configure_app(blocks)\n \n         if not wasm_utils.IS_WASM:\n-            app.add_middleware(\n-                CORSMiddleware,\n-                allow_origins=[\"*\"],\n-                allow_methods=[\"*\"],\n-                allow_headers=[\"*\"],\n-            )\n+            app.add_middleware(CustomCORSMiddleware)\n \n         @app.get(\"/user\")\n         @app.get(\"/user/\")"
        },
        {
          "filename": "test/test_routes.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -462,6 +462,24 @@ def test_can_get_config_that_includes_non_pickle_able_objects(self):\n         response = client.get(\"/config/\")\n         assert response.is_success\n \n+    def test_cors_restrictions(self):\n+        io = gr.Interface(lambda s: s.name, gr.File(), gr.File())\n+        app, _, _ = io.launch(prevent_thread_lock=True)\n+        client = TestClient(app)\n+        custom_headers = {\n+            \"host\": \"localhost:7860\",\n+            \"origin\": \"https://example.com\",\n+        }\n+        file_response = client.get(\"/config\", headers=custom_headers)\n+        assert \"access-control-allow-origin\" not in file_response.headers\n+        custom_headers = {\n+            \"host\": \"localhost:7860\",\n+            \"origin\": \"127.0.0.1\",\n+        }\n+        file_response = client.get(\"/config\", headers=custom_headers)\n+        assert file_response.headers[\"access-control-allow-origin\"] == \"127.0.0.1\"\n+        io.close()\n+\n \n class TestApp:\n     def test_create_app(self):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "43e05d72f43c9ac8dc18e4b885c9da08605b09e6",
            "date": "2025-01-14T18:43:37Z",
            "author_login": "abidlabs"
          },
          {
            "sha": "62cd4ef302cd7529d1f8842b416f9d8fcf6b5750",
            "date": "2025-01-14T15:52:06Z",
            "author_login": "hannahblair"
          },
          {
            "sha": "a91cb9c42c02b70273b4cd55ab18148a7436fe57",
            "date": "2025-01-13T19:14:27Z",
            "author_login": "amanchauhan11"
          },
          {
            "sha": "7fa9b6fc97b90a4c0d07cbf066b810247fc84724",
            "date": "2025-01-10T20:39:10Z",
            "author_login": "gradio-pr-bot"
          },
          {
            "sha": "e742dcccb376692c9ddd5a6c251080e7c5936574",
            "date": "2025-01-10T19:46:57Z",
            "author_login": "aliabid94"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-352",
    "description": "A Cross-Site Request Forgery (CSRF) vulnerability in gradio-app/gradio allows attackers to upload multiple large files to a victim's system if they are running Gradio locally. By crafting a malicious HTML page that triggers an unauthorized file upload to the victim's server, an attacker can deplete the system's disk space, potentially leading to a denial of service. This issue affects the file upload functionality as implemented in gradio/routes.py.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-03-21T20:15:07.620",
    "last_modified": "2024-11-21T08:51:10.560",
    "fix_date": "2024-02-22T19:54:51Z"
  },
  "references": [
    {
      "url": "https://github.com/gradio-app/gradio/commit/84802ee6a4806c25287344dce581f9548a99834a",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/a94d55fb-0770-4cbe-9b20-97a978a2ffff",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/gradio-app/gradio/commit/84802ee6a4806c25287344dce581f9548a99834a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/a94d55fb-0770-4cbe-9b20-97a978a2ffff",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.885233",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gradio",
    "owner": "gradio-app",
    "created_at": "2018-12-19T08:24:04Z",
    "updated_at": "2025-01-14T14:42:12Z",
    "pushed_at": "2025-01-14T12:42:39Z",
    "size": 280474,
    "stars": 35207,
    "forks": 2655,
    "open_issues": 470,
    "watchers": 35207,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 3114195,
      "Svelte": 1181173,
      "TypeScript": 956766,
      "JavaScript": 60749,
      "CSS": 51082,
      "Jupyter Notebook": 32113,
      "HTML": 22988,
      "Batchfile": 6463,
      "Shell": 6049,
      "MDX": 1670
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:07:33.405924"
  }
}