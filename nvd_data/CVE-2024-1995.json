{
  "cve_id": "CVE-2024-1995",
  "github_data": {
    "repository": "inc2734/smart-custom-fields",
    "fix_commit": "67cb6d75bd8189668f721dbd2dc7a3036851be1b",
    "related_commits": [
      "67cb6d75bd8189668f721dbd2dc7a3036851be1b",
      "67cb6d75bd8189668f721dbd2dc7a3036851be1b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "67cb6d75bd8189668f721dbd2dc7a3036851be1b",
      "commit_date": "2024-03-16T14:20:17Z",
      "author": {
        "login": "inc2734",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Security fix",
        "length": 12,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 275,
        "additions": 166,
        "deletions": 109
      },
      "files": [
        {
          "filename": "classes/fields/class.field-related-posts.php",
          "status": "modified",
          "additions": 90,
          "deletions": 61,
          "patch": "@@ -77,56 +77,70 @@ public function admin_enqueue_scripts() {\n \t */\n \tpublic function relational_posts_search() {\n \t\tcheck_ajax_referer( SCF_Config::NAME . '-relation-post-types', 'nonce' );\n+\n \t\t$_posts = array();\n \n \t\t$post_types = filter_input( INPUT_POST, 'post_types' );\n \t\tif ( $post_types ) {\n-\t\t\t$post_type = explode( ',', $post_types );\n-\t\t\t$args      = array(\n-\t\t\t\t'post_type'      => $post_type,\n-\t\t\t\t'order'          => 'ASC',\n-\t\t\t\t'orderby'        => 'ID',\n-\t\t\t\t'posts_per_page' => -1,\n-\t\t\t\t'post_status'    => 'any',\n-\t\t\t);\n+\t\t\t$post_type              = explode( ',', $post_types );\n+\t\t\t$retrievable_post_types = array();\n \n-\t\t\t$click_count = filter_input( INPUT_POST, 'click_count' );\n-\t\t\tif ( $click_count ) {\n-\t\t\t\t$posts_per_page = get_option( 'posts_per_page' );\n-\t\t\t\t$offset         = $click_count * $posts_per_page;\n-\t\t\t\t$args           = array_merge(\n-\t\t\t\t\t$args,\n-\t\t\t\t\tarray(\n-\t\t\t\t\t\t'offset'         => $offset,\n-\t\t\t\t\t\t'posts_per_page' => $posts_per_page,\n-\t\t\t\t\t)\n-\t\t\t\t);\n+\t\t\tforeach ( $post_type as $_post_type ) {\n+\t\t\t\t$post_type_object = get_post_type_object( $_post_type );\n+\n+\t\t\t\tif ( current_user_can( $post_type_object->cap->edit_posts ) ) {\n+\t\t\t\t\t$retrievable_post_types[] = $_post_type;\n+\t\t\t\t}\n \t\t\t}\n \n-\t\t\t$s = filter_input( INPUT_POST, 's' );\n-\t\t\tif ( $s ) {\n-\t\t\t\t$args = array_merge(\n-\t\t\t\t\t$args,\n-\t\t\t\t\tarray(\n-\t\t\t\t\t\t's' => $s,\n-\t\t\t\t\t)\n+\t\t\tif ( $retrievable_post_types ) {\n+\t\t\t\t$args = array(\n+\t\t\t\t\t'post_type'      => $retrievable_post_types,\n+\t\t\t\t\t'order'          => 'ASC',\n+\t\t\t\t\t'orderby'        => 'ID',\n+\t\t\t\t\t'posts_per_page' => -1,\n+\t\t\t\t\t'post_status'    => 'any',\n \t\t\t\t);\n-\t\t\t}\n \n-\t\t\t$field_name = sanitize_text_field( filter_input( INPUT_POST, 'field_name' ) );\n+\t\t\t\t$click_count = filter_input( INPUT_POST, 'click_count' );\n+\t\t\t\tif ( $click_count ) {\n+\t\t\t\t\t$posts_per_page = get_option( 'posts_per_page' );\n+\t\t\t\t\t$offset         = $click_count * $posts_per_page;\n+\t\t\t\t\t$args           = array_merge(\n+\t\t\t\t\t\t$args,\n+\t\t\t\t\t\tarray(\n+\t\t\t\t\t\t\t'offset'         => $offset,\n+\t\t\t\t\t\t\t'posts_per_page' => $posts_per_page,\n+\t\t\t\t\t\t)\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\n+\t\t\t\t$s = filter_input( INPUT_POST, 's' );\n+\t\t\t\tif ( $s ) {\n+\t\t\t\t\t$args = array_merge(\n+\t\t\t\t\t\t$args,\n+\t\t\t\t\t\tarray(\n+\t\t\t\t\t\t\t's' => $s,\n+\t\t\t\t\t\t)\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\n+\t\t\t\t$field_name = sanitize_text_field( filter_input( INPUT_POST, 'field_name' ) );\n \n-\t\t\t/**\n-\t\t\t * This filter will be always applied when it queries posts in related posts field.\n-\t\t\t */\n-\t\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args', $args, $field_name, $post_type );\n+\t\t\t\t/**\n+\t\t\t\t* This filter will be always applied when it queries posts in related posts field.\n+\t\t\t\t*/\n+\t\t\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args', $args, $field_name, $post_type );\n \n-\t\t\t/**\n-\t\t\t * This filter will only be applied when getting posts via ajax call, therefore it won't be applied for the first load.\n-\t\t\t */\n-\t\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args_ajax_call', $args, $field_name, $post_type );\n+\t\t\t\t/**\n+\t\t\t\t* This filter will only be applied when getting posts via ajax call, therefore it won't be applied for the first load.\n+\t\t\t\t*/\n+\t\t\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args_ajax_call', $args, $field_name, $post_type );\n \n-\t\t\t$_posts = get_posts( $args );\n+\t\t\t\t$_posts = get_posts( $args );\n+\t\t\t}\n \t\t}\n+\n \t\theader( 'Content-Type: application/json; charset=utf-8' );\n \t\techo wp_json_encode( $_posts );\n \t\tdie();\n@@ -144,33 +158,48 @@ public function get_field( $index, $value ) {\n \t\t$disabled  = $this->get_disable_attribute( $index );\n \t\t$post_type = $this->get( 'post-type' );\n \t\t$limit     = $this->get( 'limit' );\n-\t\tif ( ! $post_type ) {\n-\t\t\t$post_type = array( 'post' );\n-\t\t}\n-\t\tif ( ! preg_match( '/^\\d+$/', $limit ) ) {\n-\t\t\t$limit = '';\n-\t\t}\n+\n+\t\t$choices_posts  = array();\n \t\t$posts_per_page = get_option( 'posts_per_page' );\n \n-\t\t$args = array(\n-\t\t\t'post_type'      => $post_type,\n-\t\t\t'order'          => 'ASC',\n-\t\t\t'orderby'        => 'ID',\n-\t\t\t'posts_per_page' => $posts_per_page,\n-\t\t\t'post_status'    => 'any',\n-\t\t);\n+\t\tif ( $post_type ) {\n+\t\t\t$retrievable_post_types = array();\n+\n+\t\t\tforeach ( $post_type as $_post_type ) {\n+\t\t\t\t$post_type_object = get_post_type_object( $_post_type );\n \n-\t\t/**\n-\t\t * This filter will be always applied when it queries posts in related posts field.\n-\t\t */\n-\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args', $args, $name, $post_type );\n-\t\t/**\n-\t\t * This filter will only be applied in the first load, therefore it won't be applied when getting posts via ajax call.\n-\t\t */\n-\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args_first_load', $args, $name, $post_type );\n-\n-\t\t// Get posts to show in the first load.\n-\t\t$choices_posts = get_posts( $args );\n+\t\t\t\tif ( current_user_can( $post_type_object->cap->edit_posts ) ) {\n+\t\t\t\t\t$retrievable_post_types[] = $_post_type;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif ( $retrievable_post_types ) {\n+\t\t\t\tif ( ! preg_match( '/^\\d+$/', $limit ) ) {\n+\t\t\t\t\t$limit = '';\n+\t\t\t\t}\n+\n+\t\t\t\t$args = array(\n+\t\t\t\t\t'post_type'      => $retrievable_post_types,\n+\t\t\t\t\t'order'          => 'ASC',\n+\t\t\t\t\t'orderby'        => 'ID',\n+\t\t\t\t\t'posts_per_page' => $posts_per_page,\n+\t\t\t\t\t'post_status'    => 'any',\n+\t\t\t\t);\n+\n+\t\t\t\t/**\n+\t\t\t\t* This filter will be always applied when it queries posts in related posts field.\n+\t\t\t\t*/\n+\t\t\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args', $args, $name, $post_type );\n+\n+\t\t\t\t/**\n+\t\t\t\t* This filter will only be applied in the first load, therefore it won't be applied when getting posts via ajax call.\n+\t\t\t\t*/\n+\t\t\t\t$args = apply_filters( SCF_Config::PREFIX . 'custom_related_posts_args_first_load', $args, $name, $post_type );\n+\n+\t\t\t\t// Get posts to show in the first load.\n+\t\t\t\t$choices_posts = get_posts( $args );\n+\t\t\t}\n+\t\t}\n \n \t\t$choices_li = array();\n \t\tforeach ( $choices_posts as $_post ) {"
        },
        {
          "filename": "classes/fields/class.field-related-terms.php",
          "status": "modified",
          "additions": 76,
          "deletions": 48,
          "patch": "@@ -77,46 +77,59 @@ public function admin_enqueue_scripts() {\n \t */\n \tpublic function relational_terms_search() {\n \t\tcheck_ajax_referer( SCF_Config::NAME . '-relation-taxonomies', 'nonce' );\n+\n \t\t$_terms = array();\n-\t\t$args   = array();\n \n \t\t$taxonomies = filter_input( INPUT_POST, 'taxonomies' );\n \t\tif ( $taxonomies ) {\n-\t\t\t$taxonomies = explode( ',', $taxonomies );\n-\t\t\t$args       = array(\n-\t\t\t\t'taxonomy'     => $taxonomies,\n-\t\t\t\t'order'        => 'ASC',\n-\t\t\t\t'orderby'      => 'ID',\n-\t\t\t\t'number'       => '',\n-\t\t\t\t'hide_empty'   => false,\n-\t\t\t\t'hierarchical' => false,\n-\t\t\t);\n+\t\t\t$taxonomies             = explode( ',', $taxonomies );\n+\t\t\t$retrievable_taxonomies = array();\n \n-\t\t\t$click_count = filter_input( INPUT_POST, 'click_count' );\n-\t\t\tif ( $click_count ) {\n-\t\t\t\t$number = get_option( 'posts_per_page' );\n-\t\t\t\t$offset = $click_count * $number;\n-\t\t\t\t$args   = array_merge(\n-\t\t\t\t\t$args,\n-\t\t\t\t\tarray(\n-\t\t\t\t\t\t'offset' => $offset,\n-\t\t\t\t\t\t'number' => $number,\n-\t\t\t\t\t)\n-\t\t\t\t);\n+\t\t\tforeach ( $taxonomies as $_taxonomy ) {\n+\t\t\t\t$tax = get_taxonomy( $_taxonomy );\n+\n+\t\t\t\tif ( current_user_can( $tax->cap->manage_terms ) ) {\n+\t\t\t\t\t$retrievable_taxonomies[] = $_taxonomy;\n+\t\t\t\t}\n \t\t\t}\n \n-\t\t\t$search = filter_input( INPUT_POST, 'search' );\n-\t\t\tif ( $search ) {\n-\t\t\t\t$args = array_merge(\n-\t\t\t\t\t$args,\n-\t\t\t\t\tarray(\n-\t\t\t\t\t\t'search' => $search,\n-\t\t\t\t\t)\n+\t\t\tif ( $retrievable_taxonomies ) {\n+\t\t\t\t$args = array(\n+\t\t\t\t\t'taxonomy'     => $retrievable_taxonomies,\n+\t\t\t\t\t'order'        => 'ASC',\n+\t\t\t\t\t'orderby'      => 'ID',\n+\t\t\t\t\t'number'       => '',\n+\t\t\t\t\t'hide_empty'   => false,\n+\t\t\t\t\t'hierarchical' => false,\n \t\t\t\t);\n-\t\t\t}\n \n-\t\t\t$_terms = get_terms( $args );\n+\t\t\t\t$click_count = filter_input( INPUT_POST, 'click_count' );\n+\t\t\t\tif ( $click_count ) {\n+\t\t\t\t\t$number = get_option( 'posts_per_page' );\n+\t\t\t\t\t$offset = $click_count * $number;\n+\t\t\t\t\t$args   = array_merge(\n+\t\t\t\t\t\t$args,\n+\t\t\t\t\t\tarray(\n+\t\t\t\t\t\t\t'offset' => $offset,\n+\t\t\t\t\t\t\t'number' => $number,\n+\t\t\t\t\t\t)\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\n+\t\t\t\t$search = filter_input( INPUT_POST, 'search' );\n+\t\t\t\tif ( $search ) {\n+\t\t\t\t\t$args = array_merge(\n+\t\t\t\t\t\t$args,\n+\t\t\t\t\t\tarray(\n+\t\t\t\t\t\t\t'search' => $search,\n+\t\t\t\t\t\t)\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\n+\t\t\t\t$_terms = get_terms( $args );\n+\t\t\t}\n \t\t}\n+\n \t\theader( 'Content-Type: application/json; charset=utf-8' );\n \t\techo wp_json_encode( $_terms );\n \t\tdie();\n@@ -134,26 +147,41 @@ public function get_field( $index, $value ) {\n \t\t$disabled   = $this->get_disable_attribute( $index );\n \t\t$taxonomies = $this->get( 'taxonomy' );\n \t\t$limit      = $this->get( 'limit' );\n-\t\tif ( ! $taxonomies ) {\n-\t\t\t$taxonomies = array( 'category' );\n-\t\t}\n-\t\tif ( ! preg_match( '/^\\d+$/', $limit ) ) {\n-\t\t\t$limit = '';\n+\n+\t\t$choices_terms = array();\n+\t\t$number        = get_option( 'posts_per_page' );\n+\n+\t\tif ( $taxonomies ) {\n+\t\t\t$retrievable_taxonomies = array();\n+\n+\t\t\tforeach ( $taxonomies as $_taxonomy ) {\n+\t\t\t\t$tax = get_taxonomy( $_taxonomy );\n+\n+\t\t\t\tif ( current_user_can( $tax->cap->manage_terms ) ) {\n+\t\t\t\t\t$retrievable_taxonomies[] = $_taxonomy;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif ( $retrievable_taxonomies ) {\n+\t\t\t\tif ( ! preg_match( '/^\\d+$/', $limit ) ) {\n+\t\t\t\t\t$limit = '';\n+\t\t\t\t}\n+\n+\t\t\t\t// choicse\n+\t\t\t\t$choices_terms = get_terms(\n+\t\t\t\t\tarray(\n+\t\t\t\t\t\t'taxonomy'     => $taxonomies,\n+\t\t\t\t\t\t'order'        => 'ASC',\n+\t\t\t\t\t\t'orderby'      => 'ID',\n+\t\t\t\t\t\t'hide_empty'   => false,\n+\t\t\t\t\t\t'hierarchical' => false,\n+\t\t\t\t\t\t'number'       => $number,\n+\t\t\t\t\t)\n+\t\t\t\t);\n+\t\t\t}\n \t\t}\n-\t\t$number = get_option( 'posts_per_page' );\n \n-\t\t// choicse\n-\t\t$choices_terms = get_terms(\n-\t\t\tarray(\n-\t\t\t\t'taxonomy'     => $taxonomies,\n-\t\t\t\t'order'        => 'ASC',\n-\t\t\t\t'orderby'      => 'ID',\n-\t\t\t\t'hide_empty'   => false,\n-\t\t\t\t'hierarchical' => false,\n-\t\t\t\t'number'       => $number,\n-\t\t\t)\n-\t\t);\n-\t\t$choices_li    = array();\n+\t\t$choices_li = array();\n \t\tforeach ( $choices_terms as $_term ) {\n \t\t\t$term_name = $_term->name;\n \t\t\tif ( empty( $term_name ) ) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ef16f1aba6812d117a74c7a047579f7460fb1595",
            "date": "2024-10-11T05:54:45Z",
            "author_login": "inc2734"
          },
          {
            "sha": "43847c0c71f7c56343f669d16424d0725540924d",
            "date": "2024-03-16T14:38:24Z",
            "author_login": "inc2734"
          },
          {
            "sha": "c6578782369f4d166de966d91ddca2b144f6f9c1",
            "date": "2024-03-16T14:29:43Z",
            "author_login": "inc2734"
          },
          {
            "sha": "a1943d852041b9616b0aa07f823df0e3ecba74f7",
            "date": "2024-03-16T14:24:03Z",
            "author_login": "inc2734"
          },
          {
            "sha": "67cb6d75bd8189668f721dbd2dc7a3036851be1b",
            "date": "2024-03-16T14:20:17Z",
            "author_login": "inc2734"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": null,
    "description": "The Smart Custom Fields plugin for WordPress is vulnerable to unauthorized access of data due to a missing capability check on the relational_posts_search() function in all versions up to, and including, 4.2.2. This makes it possible for authenticated attackers, with subscrber-level access and above, to retrieve post content that is password protected and/or private.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-20T02:15:08.500",
    "last_modified": "2024-11-21T08:51:45.460",
    "fix_date": "2024-03-16T14:20:17Z"
  },
  "references": [
    {
      "url": "https://github.com/inc2734/smart-custom-fields/commit/67cb6d75bd8189668f721dbd2dc7a3036851be1b",
      "source": "security@wordfence.com",
      "tags": []
    },
    {
      "url": "https://plugins.trac.wordpress.org/browser/smart-custom-fields/trunk/classes/fields/class.field-related-posts.php#L78",
      "source": "security@wordfence.com",
      "tags": []
    },
    {
      "url": "https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3052172%40smart-custom-fields&new=3052172%40smart-custom-fields&sfp_email=&sfph_mail=",
      "source": "security@wordfence.com",
      "tags": []
    },
    {
      "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/e966a266-4265-4a72-8a50-e872805219a7?source=cve",
      "source": "security@wordfence.com",
      "tags": []
    },
    {
      "url": "https://github.com/inc2734/smart-custom-fields/commit/67cb6d75bd8189668f721dbd2dc7a3036851be1b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://plugins.trac.wordpress.org/browser/smart-custom-fields/trunk/classes/fields/class.field-related-posts.php#L78",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3052172%40smart-custom-fields&new=3052172%40smart-custom-fields&sfp_email=&sfph_mail=",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/e966a266-4265-4a72-8a50-e872805219a7?source=cve",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.862965",
    "processing_status": "enhanced"
  }
}