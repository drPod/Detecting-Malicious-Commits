{
  "cve_id": "CVE-2024-21508",
  "github_data": {
    "repository": "sidorares/node-mysql2",
    "fix_commit": "74abf9ef94d76114d9a09415e28b496522a94805",
    "related_commits": [
      "74abf9ef94d76114d9a09415e28b496522a94805",
      "74abf9ef94d76114d9a09415e28b496522a94805"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "74abf9ef94d76114d9a09415e28b496522a94805",
      "commit_date": "2024-04-09T01:38:11Z",
      "author": {
        "login": "wellwelwel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(security): improve supportBigNumbers and bigNumberStrings sanitization (#2572)",
        "length": 177,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 184,
        "additions": 160,
        "deletions": 24
      },
      "files": [
        {
          "filename": "lib/parsers/binary_parser.js",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -12,9 +12,12 @@ for (const t in Types) {\n }\n \n function readCodeFor(field, config, options, fieldNum) {\n-  const supportBigNumbers =\n-    options.supportBigNumbers || config.supportBigNumbers;\n-  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n+  const supportBigNumbers = Boolean(\n+    options.supportBigNumbers || config.supportBigNumbers,\n+  );\n+  const bigNumberStrings = Boolean(\n+    options.bigNumberStrings || config.bigNumberStrings,\n+  );\n   const timezone = options.timezone || config.timezone;\n   const dateStrings = options.dateStrings || config.dateStrings;\n   const unsigned = field.flags & FieldFlags.UNSIGNED;"
        },
        {
          "filename": "lib/parsers/text_parser.js",
          "status": "modified",
          "additions": 26,
          "deletions": 21,
          "patch": "@@ -12,9 +12,12 @@ for (const t in Types) {\n }\n \n function readCodeFor(type, charset, encodingExpr, config, options) {\n-  const supportBigNumbers =\n-    options.supportBigNumbers || config.supportBigNumbers;\n-  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n+  const supportBigNumbers = Boolean(\n+    options.supportBigNumbers || config.supportBigNumbers,\n+  );\n+  const bigNumberStrings = Boolean(\n+    options.bigNumberStrings || config.bigNumberStrings,\n+  );\n   const timezone = options.timezone || config.timezone;\n   const dateStrings = options.dateStrings || config.dateStrings;\n \n@@ -85,22 +88,24 @@ function compile(fields, options, config) {\n       db: field.schema,\n       table: field.table,\n       name: field.name,\n-      string: function(encoding = field.encoding) {\n+      string: function (encoding = field.encoding) {\n         if (field.columnType === Types.JSON && encoding === field.encoding) {\n           // Since for JSON columns mysql always returns charset 63 (BINARY),\n           // we have to handle it according to JSON specs and use \"utf8\",\n           // see https://github.com/sidorares/node-mysql2/issues/1661\n-          console.warn(`typeCast: JSON column \"${field.name}\" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \\`field.string(\"utf8\")\\``);\n+          console.warn(\n+            `typeCast: JSON column \"${field.name}\" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \\`field.string(\"utf8\")\\``,\n+          );\n         }\n \n         return _this.packet.readLengthCodedString(encoding);\n       },\n-      buffer: function() {\n+      buffer: function () {\n         return _this.packet.readLengthCodedBuffer();\n       },\n-      geometry: function() {\n+      geometry: function () {\n         return _this.packet.parseGeometryValue();\n-      }\n+      },\n     };\n   }\n \n@@ -109,9 +114,7 @@ function compile(fields, options, config) {\n   /* eslint-disable no-trailing-spaces */\n   /* eslint-disable no-spaced-func */\n   /* eslint-disable no-unexpected-multiline */\n-  parserFn('(function () {')(\n-    'return class TextRow {'\n-  );\n+  parserFn('(function () {')('return class TextRow {');\n \n   // constructor method\n   parserFn('constructor(fields) {');\n@@ -127,22 +130,22 @@ function compile(fields, options, config) {\n \n   // next method\n   parserFn('next(packet, fields, options) {');\n-  parserFn(\"this.packet = packet;\");\n+  parserFn('this.packet = packet;');\n   if (options.rowsAsArray) {\n     parserFn(`const result = new Array(${fields.length});`);\n   } else {\n-    parserFn(\"const result = {};\");\n+    parserFn('const result = {};');\n   }\n \n   const resultTables = {};\n   let resultTablesArray = [];\n \n   if (options.nestTables === true) {\n-    for (let i=0; i < fields.length; i++) {\n+    for (let i = 0; i < fields.length; i++) {\n       resultTables[fields[i].table] = 1;\n     }\n     resultTablesArray = Object.keys(resultTables);\n-    for (let i=0; i < resultTablesArray.length; i++) {\n+    for (let i = 0; i < resultTablesArray.length; i++) {\n       parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n     }\n   }\n@@ -154,7 +157,7 @@ function compile(fields, options, config) {\n     parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);\n     if (typeof options.nestTables === 'string') {\n       lvalue = `result[${helpers.srcEscape(\n-        fields[i].table + options.nestTables + fields[i].name\n+        fields[i].table + options.nestTables + fields[i].name,\n       )}]`;\n     } else if (options.nestTables === true) {\n       lvalue = `result[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;\n@@ -172,11 +175,13 @@ function compile(fields, options, config) {\n         fields[i].characterSet,\n         encodingExpr,\n         config,\n-        options\n+        options,\n       );\n       if (typeof options.typeCast === 'function') {\n-        parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);\n-      }  else {\n+        parserFn(\n+          `${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`,\n+        );\n+      } else {\n         parserFn(`${lvalue} = ${readCode};`);\n       }\n     }\n@@ -193,11 +198,11 @@ function compile(fields, options, config) {\n   if (config.debug) {\n     helpers.printDebugWithCode(\n       'Compiled text protocol row parser',\n-      parserFn.toString()\n+      parserFn.toString(),\n     );\n   }\n   if (typeof options.typeCast === 'function') {\n-    return parserFn.toFunction({wrap});\n+    return parserFn.toFunction({ wrap });\n   }\n   return parserFn.toFunction();\n }"
        },
        {
          "filename": "test/esm/unit/parsers/big-numbers-strings-sanitization.test.mjs",
          "status": "added",
          "additions": 66,
          "deletions": 0,
          "patch": "@@ -0,0 +1,66 @@\n+import { describe, test, assert } from 'poku';\n+import { createConnection, describeOptions } from '../../../common.test.cjs';\n+\n+const connection = createConnection().promise();\n+\n+const sql = 'SELECT 9007199254740991+100 AS `total`';\n+\n+describe('bigNumberStrings Sanitization', describeOptions);\n+\n+Promise.all([\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: true,\n+      bigNumberStrings: true,\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'string',\n+      'Valid bigNumberStrings enabled',\n+    );\n+  }),\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: false,\n+      bigNumberStrings: false,\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'number',\n+      'Valid bigNumberStrings disabled',\n+    );\n+  }),\n+\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: 'text',\n+      bigNumberStrings: 'text',\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'string',\n+      'bigNumberStrings as a random string should be enabled',\n+    );\n+  }),\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: '',\n+      bigNumberStrings: '',\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'number',\n+      'bigNumberStrings as an empty string should be disabled',\n+    );\n+  }),\n+]).then(async () => {\n+  await connection.end();\n+});"
        },
        {
          "filename": "test/esm/unit/parsers/support-big-numbers-sanitization.test.mjs",
          "status": "added",
          "additions": 62,
          "deletions": 0,
          "patch": "@@ -0,0 +1,62 @@\n+import { describe, test, assert } from 'poku';\n+import { createConnection, describeOptions } from '../../../common.test.cjs';\n+\n+const connection = createConnection().promise();\n+\n+const sql = 'SELECT 9007199254740991+100 AS `total`';\n+\n+describe('supportBigNumbers Sanitization', describeOptions);\n+\n+Promise.all([\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: true,\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'string',\n+      'Valid supportBigNumbers enabled',\n+    );\n+  }),\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: false,\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'number',\n+      'Valid supportBigNumbers disabled',\n+    );\n+  }),\n+\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: 'text',\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'string',\n+      'supportBigNumbers as a random string should be enabled',\n+    );\n+  }),\n+  test(async () => {\n+    const [results] = await connection.query({\n+      sql,\n+      supportBigNumbers: '',\n+    });\n+\n+    assert.strictEqual(\n+      typeof results[0].total,\n+      'number',\n+      'supportBigNumbers as an empty string should be disabled',\n+    );\n+  }),\n+]).then(async () => {\n+  await connection.end();\n+});"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b97f476d883d993cddc83213150d16cf3907e60e",
            "date": "2025-01-25T00:52:02Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "f48a2cd3d0b2fa7b8aeea3164024ecb917e7fab3",
            "date": "2025-01-25T00:44:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "8957e3a5312de867b977aeee95c395513383e9c2",
            "date": "2025-01-24T21:01:23Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2e8e286c4783955758cf68ffa898962fc6081671",
            "date": "2025-01-23T22:38:58Z",
            "author_login": "wellwelwel"
          },
          {
            "sha": "78b16621e77c03d9c7ef1010e95f0156a75b3c5f",
            "date": "2025-01-23T21:00:13Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "Versions of the package mysql2 before 3.9.4 are vulnerable to Remote Code Execution (RCE) via the readCodeFor function due to improper validation of the supportBigNumbers and bigNumberStrings values.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-11T05:15:47.263",
    "last_modified": "2024-11-21T08:54:34.803",
    "fix_date": "2024-04-09T01:38:11Z"
  },
  "references": [
    {
      "url": "https://blog.slonser.info/posts/mysql2-attacker-configuration/",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/blob/1609b5393516d72a4ae47196837317fbe75e0c13/lib/parsers/text_parser.js%23L14C10-L14C21",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/commit/74abf9ef94d76114d9a09415e28b496522a94805",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/pull/2572",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/releases/tag/v3.9.4",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6591085",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://blog.slonser.info/posts/mysql2-attacker-configuration/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/blob/1609b5393516d72a4ae47196837317fbe75e0c13/lib/parsers/text_parser.js%23L14C10-L14C21",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/commit/74abf9ef94d76114d9a09415e28b496522a94805",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/pull/2572",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/releases/tag/v3.9.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6591085",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.474146",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "node-mysql2",
    "owner": "sidorares",
    "created_at": "2013-04-17T05:23:59Z",
    "updated_at": "2025-01-25T16:31:49Z",
    "pushed_at": "2025-01-25T00:54:19Z",
    "size": 112328,
    "stars": 4138,
    "forks": 627,
    "open_issues": 486,
    "watchers": 4138,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 772914,
      "TypeScript": 56469,
      "Shell": 123,
      "HTML": 43
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:22:35.378615"
  }
}