{
  "cve_id": "CVE-2024-21509",
  "github_data": {
    "repository": "sidorares/node-mysql2",
    "fix_commit": "4a964a3910a4b8de008696c554ab1b492e9b4691",
    "related_commits": [
      "4a964a3910a4b8de008696c554ab1b492e9b4691",
      "4a964a3910a4b8de008696c554ab1b492e9b4691"
    ],
    "patch_url": "https://github.com/sidorares/node-mysql2/commit/4a964a3910a4b8de008696c554ab1b492e9b4691.patch",
    "fix_commit_details": {
      "sha": "4a964a3910a4b8de008696c554ab1b492e9b4691",
      "commit_date": "2024-04-09T07:02:39Z",
      "author": {
        "login": "wellwelwel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(security): improve results object creation (#2574)",
        "length": 165,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 178,
        "additions": 166,
        "deletions": 12
      },
      "files": [
        {
          "filename": ".nycrc",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n   \"reporter\": [\"text\", \"lcov\", \"cobertura\"],\n   \"statements\": 88,\n   \"branches\": 84,\n-  \"functions\": 78,\n+  \"functions\": 77,\n   \"lines\": 88,\n   \"checkCoverage\": true,\n   \"clean\": true"
        },
        {
          "filename": "lib/parsers/binary_parser.js",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -122,7 +122,13 @@ function compile(fields, options, config) {\n   if (options.rowsAsArray) {\n     parserFn(`const result = new Array(${fields.length});`);\n   } else {\n-    parserFn('const result = {};');\n+    parserFn('const result = Object.create(null);');\n+    parserFn(`Object.defineProperty(result, \"constructor\", {\n+      value: Object.create(null),\n+      writable: false,\n+      configurable: false,\n+      enumerable: false\n+    });`);\n   }\n \n   // Global typeCast\n@@ -154,7 +160,9 @@ function compile(fields, options, config) {\n       )}]`;\n     } else if (options.nestTables === true) {\n       tableName = helpers.srcEscape(fields[i].table);\n-      parserFn(`if (!result[${tableName}]) result[${tableName}] = {};`);\n+      parserFn(\n+        `if (!result[${tableName}]) result[${tableName}] = Object.create(null);`,\n+      );\n       lvalue = `result[${tableName}][${fieldName}]`;\n     } else if (options.rowsAsArray) {\n       lvalue = `result[${i.toString(10)}]`;"
        },
        {
          "filename": "lib/parsers/text_parser.js",
          "status": "modified",
          "additions": 10,
          "deletions": 9,
          "patch": "@@ -111,9 +111,6 @@ function compile(fields, options, config) {\n \n   const parserFn = genFunc();\n \n-  /* eslint-disable no-trailing-spaces */\n-  /* eslint-disable no-spaced-func */\n-  /* eslint-disable no-unexpected-multiline */\n   parserFn('(function () {')('return class TextRow {');\n \n   // constructor method\n@@ -134,7 +131,13 @@ function compile(fields, options, config) {\n   if (options.rowsAsArray) {\n     parserFn(`const result = new Array(${fields.length});`);\n   } else {\n-    parserFn('const result = {};');\n+    parserFn('const result = Object.create(null);');\n+    parserFn(`Object.defineProperty(result, \"constructor\", {\n+      value: Object.create(null),\n+      writable: false,\n+      configurable: false,\n+      enumerable: false\n+    });`);\n   }\n \n   const resultTables = {};\n@@ -146,7 +149,9 @@ function compile(fields, options, config) {\n     }\n     resultTablesArray = Object.keys(resultTables);\n     for (let i = 0; i < resultTablesArray.length; i++) {\n-      parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n+      parserFn(\n+        `result[${helpers.srcEscape(resultTablesArray[i])}] = Object.create(null);`,\n+      );\n     }\n   }\n \n@@ -191,10 +196,6 @@ function compile(fields, options, config) {\n   parserFn('}');\n   parserFn('};')('})()');\n \n-  /* eslint-enable no-trailing-spaces */\n-  /* eslint-enable no-spaced-func */\n-  /* eslint-enable no-unexpected-multiline */\n-\n   if (config.debug) {\n     helpers.printDebugWithCode(\n       'Compiled text protocol row parser',"
        },
        {
          "filename": "test/common.test.cjs",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -105,6 +105,7 @@ exports.createConnection = function (args) {\n     typeCast: args && args.typeCast,\n     namedPlaceholders: args && args.namedPlaceholders,\n     connectTimeout: args && args.connectTimeout,\n+    nestTables: args && args.nestTables,\n     ssl: (args && args.ssl) ?? config.ssl,\n   };\n "
        },
        {
          "filename": "test/esm/unit/parsers/prototype-binary-results.test.mjs",
          "status": "added",
          "additions": 72,
          "deletions": 0,
          "patch": "@@ -0,0 +1,72 @@\n+import { test, describe, assert } from 'poku';\n+import { createConnection, describeOptions } from '../../../common.test.cjs';\n+\n+const connection = createConnection().promise();\n+\n+describe('Binary Parser: Prototype Sanitization', describeOptions);\n+\n+Promise.all([\n+  test(async () => {\n+    const expected = [{}];\n+    expected[0].test = 2;\n+\n+    const [results] = await connection.query('SELECT 1+1 AS `test`');\n+\n+    assert.notDeepStrictEqual(\n+      results,\n+      expected,\n+      `Ensure \"results\" doesn't contain a standard object ({})`,\n+    );\n+  }),\n+  test(async () => {\n+    const expected = [Object.create(null)];\n+    expected[0].test = 2;\n+\n+    const [results] = await connection.execute('SELECT 1+1 AS `test`');\n+\n+    assert.deepStrictEqual(results, expected, 'Ensure clean object \"results\"');\n+    assert.strictEqual(\n+      Object.getPrototypeOf(results[0]),\n+      null,\n+      'Ensure clean properties in results items',\n+    );\n+    assert.strictEqual(\n+      typeof results[0].toString,\n+      'undefined',\n+      'Re-check prototypes (manually) in results columns',\n+    );\n+    assert.strictEqual(\n+      typeof results[0].test.toString,\n+      'function',\n+      'Ensure that the end-user is able to use prototypes',\n+    );\n+    assert.strictEqual(\n+      results[0].test.toString(),\n+      '2',\n+      'Ensure that the end-user is able to use prototypes (manually): toString',\n+    );\n+    assert.strictEqual(\n+      results[0].test.toFixed(2),\n+      '2.00',\n+      'Ensure that the end-user is able to use prototypes (manually): toFixed',\n+    );\n+\n+    results[0].customProp = true;\n+    assert.strictEqual(\n+      results[0].customProp,\n+      true,\n+      'Ensure that the end-user is able to use custom props',\n+    );\n+  }),\n+  test(async () => {\n+    const [result] = await connection.execute('SET @1 = 1;');\n+\n+    assert.strictEqual(\n+      result.constructor.name,\n+      'ResultSetHeader',\n+      'Ensure constructor name in result object',\n+    );\n+  }),\n+]).then(async () => {\n+  await connection.end();\n+});"
        },
        {
          "filename": "test/esm/unit/parsers/prototype-text-results.test.mjs",
          "status": "added",
          "additions": 72,
          "deletions": 0,
          "patch": "@@ -0,0 +1,72 @@\n+import { test, describe, assert } from 'poku';\n+import { createConnection, describeOptions } from '../../../common.test.cjs';\n+\n+const connection = createConnection().promise();\n+\n+describe('Text Parser: Prototype Sanitization', describeOptions);\n+\n+Promise.all([\n+  test(async () => {\n+    const expected = [{}];\n+    expected[0].test = 2;\n+\n+    const [results] = await connection.query('SELECT 1+1 AS `test`');\n+\n+    assert.notDeepStrictEqual(\n+      results,\n+      expected,\n+      `Ensure \"results\" doesn't contain a standard object ({})`,\n+    );\n+  }),\n+  test(async () => {\n+    const expected = [Object.create(null)];\n+    expected[0].test = 2;\n+\n+    const [results] = await connection.query('SELECT 1+1 AS `test`');\n+\n+    assert.deepStrictEqual(results, expected, 'Ensure clean object \"results\"');\n+    assert.strictEqual(\n+      Object.getPrototypeOf(results[0]),\n+      null,\n+      'Ensure clean properties in results items',\n+    );\n+    assert.strictEqual(\n+      typeof results[0].toString,\n+      'undefined',\n+      'Re-check prototypes (manually) in results columns',\n+    );\n+    assert.strictEqual(\n+      typeof results[0].test.toString,\n+      'function',\n+      'Ensure that the end-user is able to use prototypes',\n+    );\n+    assert.strictEqual(\n+      results[0].test.toString(),\n+      '2',\n+      'Ensure that the end-user is able to use prototypes (manually): toString',\n+    );\n+    assert.strictEqual(\n+      results[0].test.toFixed(2),\n+      '2.00',\n+      'Ensure that the end-user is able to use prototypes (manually): toFixed',\n+    );\n+\n+    results[0].customProp = true;\n+    assert.strictEqual(\n+      results[0].customProp,\n+      true,\n+      'Ensure that the end-user is able to use custom props',\n+    );\n+  }),\n+  test(async () => {\n+    const [result] = await connection.query('SET @1 = 1;');\n+\n+    assert.strictEqual(\n+      result.constructor.name,\n+      'ResultSetHeader',\n+      'Ensure constructor name in result object',\n+    );\n+  }),\n+]).then(async () => {\n+  await connection.end();\n+});"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d48f143842408e614f4cfa549b04c1f06d2f1745",
            "date": "2025-01-11T02:34:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bb54aabc1c171ad99b5e5e9079ef276465563f58",
            "date": "2025-01-11T02:25:47Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "02eb0bbc85a9b0d851c994fdd540de0306a72b99",
            "date": "2025-01-11T02:22:04Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "aa1db5e94be9b6a14f5b206b53281b8b453e2b1e",
            "date": "2025-01-11T02:14:30Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ea326068b1fe6f9b9def06252d1d5b873281f282",
            "date": "2025-01-09T15:16:47Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L",
    "cwe_id": "CWE-1321",
    "description": "Versions of the package mysql2 before 3.9.4 are vulnerable to Prototype Poisoning due to insecure results object creation and improper user input sanitization passed through parserFn in text_parser.js and binary_parser.js.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-10T05:15:48.547",
    "last_modified": "2024-11-21T08:54:34.940",
    "fix_date": "2024-04-09T07:02:39Z"
  },
  "references": [
    {
      "url": "https://blog.slonser.info/posts/mysql2-attacker-configuration/",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/blob/fd3d117da82cc5c5fa5a3701d7b33ca77691bc61/lib/parsers/text_parser.js%23L134",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/commit/4a964a3910a4b8de008696c554ab1b492e9b4691",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/pull/2574",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/releases/tag/v3.9.4",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6591084",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://blog.slonser.info/posts/mysql2-attacker-configuration/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/blob/fd3d117da82cc5c5fa5a3701d7b33ca77691bc61/lib/parsers/text_parser.js%23L134",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/commit/4a964a3910a4b8de008696c554ab1b492e9b4691",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/pull/2574",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/sidorares/node-mysql2/releases/tag/v3.9.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6591084",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.462525",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "node-mysql2",
    "owner": "sidorares",
    "created_at": "2013-04-17T05:23:59Z",
    "updated_at": "2025-01-14T05:00:36Z",
    "pushed_at": "2025-01-14T12:22:35Z",
    "size": 107518,
    "stars": 4130,
    "forks": 626,
    "open_issues": 492,
    "watchers": 4130,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 772914,
      "TypeScript": 56469,
      "Shell": 123,
      "HTML": 43
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:22:43.885107"
  }
}