{
  "cve_id": "CVE-2024-21550",
  "github_data": {
    "repository": "steve-community/steve",
    "fix_commit": "a79983f843c37705182c8f54eba060c1dce3b6d1",
    "related_commits": [
      "a79983f843c37705182c8f54eba060c1dce3b6d1"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a79983f843c37705182c8f54eba060c1dce3b6d1",
      "commit_date": "2024-08-04T08:54:25Z",
      "author": {
        "login": "goekay",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #1527 from steve-community/1526-validate-chargeboxid-for-ws-connections",
        "length": 139,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 237,
        "additions": 230,
        "deletions": 7
      },
      "files": [
        {
          "filename": "pom.xml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -815,8 +815,8 @@\n \n         <dependency>\n             <groupId>org.owasp.encoder</groupId>\n-            <artifactId>encoder</artifactId>\n-            <version>1.2.3</version>\n+            <artifactId>encoder-jakarta-jsp</artifactId>\n+            <version>1.3.0</version>\n         </dependency>\n     </dependencies>\n </project>"
        },
        {
          "filename": "src/main/java/de/rwth/idsg/steve/SteveConfiguration.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -104,6 +104,7 @@ public enum SteveConfiguration {\n \n         ocpp = Ocpp.builder()\n                    .autoRegisterUnknownStations(p.getOptionalBoolean(\"auto.register.unknown.stations\"))\n+                   .chargeBoxIdValidationRegex(p.getOptionalString(\"charge-box-id.validation.regex\"))\n                    .wsSessionSelectStrategy(\n                            WsSessionSelectStrategyEnum.fromName(p.getString(\"ws.session.select.strategy\")))\n                    .build();\n@@ -200,6 +201,7 @@ public static class WebApi {\n     @Builder @Getter\n     public static class Ocpp {\n         private final boolean autoRegisterUnknownStations;\n+        private final String chargeBoxIdValidationRegex;\n         private final WsSessionSelectStrategy wsSessionSelectStrategy;\n     }\n "
        },
        {
          "filename": "src/main/java/de/rwth/idsg/steve/ocpp/ws/OcppWebSocketHandshakeHandler.java",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@\n \n import de.rwth.idsg.steve.config.WebSocketConfiguration;\n import de.rwth.idsg.steve.service.ChargePointHelperService;\n+import de.rwth.idsg.steve.web.validation.ChargeBoxIdValidator;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import ocpp.cs._2015._10.RegistrationStatus;\n@@ -48,6 +49,8 @@\n @RequiredArgsConstructor\n public class OcppWebSocketHandshakeHandler implements HandshakeHandler {\n \n+    private static final ChargeBoxIdValidator CHARGE_BOX_ID_VALIDATOR = new ChargeBoxIdValidator();\n+\n     private final DefaultHandshakeHandler delegate;\n     private final List<AbstractWebSocketEndpoint> endpoints;\n     private final ChargePointHelperService chargePointHelperService;\n@@ -70,6 +73,13 @@ public boolean doHandshake(ServerHttpRequest request, ServerHttpResponse respons\n         // -------------------------------------------------------------------------\n \n         String chargeBoxId = getLastBitFromUrl(request.getURI().getPath());\n+        boolean isValid = CHARGE_BOX_ID_VALIDATOR.isValid(chargeBoxId);\n+        if (!isValid) {\n+            log.error(\"ChargeBoxId '{}' violates the configured pattern.\", chargeBoxId);\n+            response.setStatusCode(HttpStatus.BAD_REQUEST);\n+            return false;\n+        }\n+\n         Optional<RegistrationStatus> status = chargePointHelperService.getRegistrationStatus(chargeBoxId);\n \n         // Allow connections, if station is in db (registration_status field from db does not matter)"
        },
        {
          "filename": "src/main/java/de/rwth/idsg/steve/web/validation/ChargeBoxId.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -36,7 +36,7 @@\n @Constraint(validatedBy = {ChargeBoxIdValidator.class, ChargeBoxIdListValidator.class})\n public @interface ChargeBoxId {\n \n-    String message() default \"ChargeBox ID cannot contain any whitespace\";\n+    String message() default \"ChargeBox ID violates the configured pattern\";\n \n     // Required by validation runtime\n     Class<?>[] groups() default {};"
        },
        {
          "filename": "src/main/java/de/rwth/idsg/steve/web/validation/ChargeBoxIdValidator.java",
          "status": "modified",
          "additions": 27,
          "deletions": 3,
          "patch": "@@ -18,8 +18,11 @@\n  */\n package de.rwth.idsg.steve.web.validation;\n \n+import com.google.common.base.Strings;\n+import de.rwth.idsg.steve.SteveConfiguration;\n import jakarta.validation.ConstraintValidator;\n import jakarta.validation.ConstraintValidatorContext;\n+\n import java.util.regex.Pattern;\n \n /**\n@@ -28,8 +31,8 @@\n  */\n public class ChargeBoxIdValidator implements ConstraintValidator<ChargeBoxId, String> {\n \n-    private static final String REGEX = \"\\\\S+\";\n-    private static final Pattern PATTERN = Pattern.compile(REGEX);\n+    private static final String REGEX = \"[^=/()<>]*\";\n+    private static final Pattern PATTERN = Pattern.compile(getRegexToUse());\n \n     @Override\n     public void initialize(ChargeBoxId idTag) {\n@@ -38,6 +41,27 @@ public void initialize(ChargeBoxId idTag) {\n \n     @Override\n     public boolean isValid(String string, ConstraintValidatorContext constraintValidatorContext) {\n-        return string == null || PATTERN.matcher(string).matches();\n+        if (string == null) {\n+            return true; // null is valid, because it is another constraint's responsibility\n+        }\n+        return isValid(string);\n+    }\n+\n+    public boolean isValid(String str) {\n+        if (Strings.isNullOrEmpty(str)) {\n+            return false;\n+        }\n+\n+        String str1 = str.strip();\n+        if (!str1.equals(str)) {\n+            return false;\n+        }\n+\n+        return PATTERN.matcher(str).matches();\n+    }\n+\n+    private static String getRegexToUse() {\n+        String regexFromConfig = SteveConfiguration.CONFIG.getOcpp().getChargeBoxIdValidationRegex();\n+        return Strings.isNullOrEmpty(regexFromConfig) ? REGEX : regexFromConfig;\n     }\n }"
        },
        {
          "filename": "src/main/resources/config/dev/main.properties",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -56,6 +56,11 @@ ws.session.select.strategy = ALWAYS_LAST\n #\n auto.register.unknown.stations = false\n \n+# if this field is set, it will take precedence over the default regex we are using in\n+# de.rwth.idsg.steve.web.validation.ChargeBoxIdValidator.REGEX to validate the format of the chargeBoxId values\n+#\n+charge-box-id.validation.regex =\n+\n ### DO NOT MODIFY ###\n steve.version = ${project.version}\n git.describe = ${git.commit.id.describe}"
        },
        {
          "filename": "src/main/resources/config/docker/main.properties",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -56,6 +56,11 @@ ws.session.select.strategy = ALWAYS_LAST\n #\n auto.register.unknown.stations = false\n \n+# if this field is set, it will take precedence over the default regex we are using in\n+# de.rwth.idsg.steve.web.validation.ChargeBoxIdValidator.REGEX to validate the format of the chargeBoxId values\n+#\n+charge-box-id.validation.regex =\n+\n ### DO NOT MODIFY ###\n steve.version = ${project.version}\n git.describe = ${git.commit.id.describe}"
        },
        {
          "filename": "src/main/resources/config/kubernetes/main.properties",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -56,6 +56,11 @@ ws.session.select.strategy = ALWAYS_LAST\n #\n auto.register.unknown.stations = false\n \n+# if this field is set, it will take precedence over the default regex we are using in\n+# de.rwth.idsg.steve.web.validation.ChargeBoxIdValidator.REGEX to validate the format of the chargeBoxId values\n+#\n+charge-box-id.validation.regex =\n+\n ### DO NOT MODIFY ###\n steve.version = ${project.version}\n git.describe = ${git.commit.id.describe}"
        },
        {
          "filename": "src/main/resources/config/prod/main.properties",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -56,6 +56,11 @@ ws.session.select.strategy = ALWAYS_LAST\n #\n auto.register.unknown.stations = false\n \n+# if this field is set, it will take precedence over the default regex we are using in\n+# de.rwth.idsg.steve.web.validation.ChargeBoxIdValidator.REGEX to validate the format of the chargeBoxId values\n+#\n+charge-box-id.validation.regex =\n+\n ### DO NOT MODIFY ###\n steve.version = ${project.version}\n git.describe = ${git.commit.id.describe}"
        },
        {
          "filename": "src/main/resources/config/test/main.properties",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -56,6 +56,11 @@ ws.session.select.strategy = ALWAYS_LAST\n #\n auto.register.unknown.stations = false\n \n+# if this field is set, it will take precedence over the default regex we are using in\n+# de.rwth.idsg.steve.web.validation.ChargeBoxIdValidator.REGEX to validate the format of the chargeBoxId values\n+#\n+charge-box-id.validation.regex =\n+\n ### DO NOT MODIFY ###\n steve.version = ${project.version}\n git.describe = ${git.commit.id.describe}"
        },
        {
          "filename": "src/main/resources/webapp/WEB-INF/views/00-header.jsp",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -22,6 +22,7 @@\n <%@ taglib uri=\"jakarta.tags.core\" prefix=\"c\" %>\n <%@ taglib uri=\"http://www.springframework.org/tags\" prefix=\"spring\" %>\n <%@ taglib uri=\"http://www.springframework.org/tags/form\" prefix=\"form\" %>\n+<%@ taglib uri=\"owasp.encoder.jakarta\" prefix=\"encode\" %>\n \n <%@ include file=\"00-context.jsp\" %>\n "
        },
        {
          "filename": "src/main/resources/webapp/WEB-INF/views/data-man/chargepoints.jsp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -48,7 +48,7 @@\n             <tbody>\n             <c:forEach items=\"${unknownList}\" var=\"item\">\n                 <tr>\n-                    <td>${item.key}</td>\n+                    <td><encode:forHtml value=\"${item.key}\" /></td>\n                     <td>${item.numberOfAttempts}</td>\n                     <td data-sort-value=\"${item.lastAttemptTimestamp.millis}\">${item.lastAttemptTimestamp}</td>\n                     <td>"
        },
        {
          "filename": "src/test/java/de/rwth/idsg/steve/web/validation/ChargeBoxIdValidatorTest.java",
          "status": "added",
          "additions": 161,
          "deletions": 0,
          "patch": "@@ -0,0 +1,161 @@\n+/*\n+ * SteVe - SteckdosenVerwaltung - https://github.com/steve-community/steve\n+ * Copyright (C) 2013-2024 SteVe Community Team\n+ * All Rights Reserved.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+ */\n+package de.rwth.idsg.steve.web.validation;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * @author Sevket Goekay <sevketgokay@gmail.com>\n+ * @since 01.08.2024\n+ */\n+public class ChargeBoxIdValidatorTest {\n+\n+    ChargeBoxIdValidator validator = new ChargeBoxIdValidator();\n+\n+    @Test\n+    public void testNull() {\n+        Assertions.assertFalse(validator.isValid(null));\n+    }\n+\n+    @Test\n+    public void testEmpty() {\n+        Assertions.assertFalse(validator.isValid(\"\"));\n+    }\n+\n+    @Test\n+    public void testSpace() {\n+        Assertions.assertFalse(validator.isValid(\"  \"));\n+    }\n+\n+    @Test\n+    public void testAllLowercaseLetters() {\n+        Assertions.assertTrue(validator.isValid(\"test\"));\n+    }\n+\n+    @Test\n+    public void testAllUppercaseLetters() {\n+        Assertions.assertTrue(validator.isValid(\"TEST\"));\n+    }\n+\n+    @Test\n+    public void testMixedCaseLetters() {\n+        Assertions.assertTrue(validator.isValid(\"TesT\"));\n+        Assertions.assertTrue(validator.isValid(\"tEst\"));\n+    }\n+\n+    @Test\n+    public void testLettersAndNumbers() {\n+        Assertions.assertTrue(validator.isValid(\"test12\"));\n+        Assertions.assertTrue(validator.isValid(\"89test\"));\n+        Assertions.assertTrue(validator.isValid(\"te9s0t\"));\n+    }\n+\n+    @Test\n+    public void testDot() {\n+        Assertions.assertTrue(validator.isValid(\".test\"));\n+        Assertions.assertTrue(validator.isValid(\"test.\"));\n+        Assertions.assertTrue(validator.isValid(\"te..st\"));\n+    }\n+\n+    @Test\n+    public void testDash() {\n+        Assertions.assertTrue(validator.isValid(\"-test\"));\n+        Assertions.assertTrue(validator.isValid(\"test-\"));\n+        Assertions.assertTrue(validator.isValid(\"te--st\"));\n+    }\n+\n+    @Test\n+    public void testUnderscore() {\n+        Assertions.assertTrue(validator.isValid(\"_test\"));\n+        Assertions.assertTrue(validator.isValid(\"test_\"));\n+        Assertions.assertTrue(validator.isValid(\"te__st\"));\n+    }\n+\n+    @Test\n+    public void testColon() {\n+        Assertions.assertTrue(validator.isValid(\":test\"));\n+        Assertions.assertTrue(validator.isValid(\"test:\"));\n+        Assertions.assertTrue(validator.isValid(\"te::st\"));\n+        Assertions.assertTrue(validator.isValid(\"VID:00XXXXXXXXXX\"));\n+    }\n+\n+    @Test\n+    public void testPoundSign() {\n+        Assertions.assertTrue(validator.isValid(\"#test\"));\n+        Assertions.assertTrue(validator.isValid(\"test#\"));\n+        Assertions.assertTrue(validator.isValid(\"te##st\"));\n+        Assertions.assertTrue(validator.isValid(\"#FreeCharging\"));\n+    }\n+\n+    @Test\n+    public void testCombined() {\n+        Assertions.assertTrue(validator.isValid(\"1t.E-S_:t20#\"));\n+    }\n+\n+    @Test\n+    public void testSpaceAtBeginning() {\n+        Assertions.assertFalse(validator.isValid(\" test\"));\n+    }\n+\n+    @Test\n+    public void testSpaceAtEnd() {\n+        Assertions.assertFalse(validator.isValid(\"test \"));\n+    }\n+\n+    @Test\n+    public void testSpaceInMiddle() {\n+        Assertions.assertTrue(validator.isValid(\"test1 test2\"));\n+    }\n+\n+    @Test\n+    public void testOpeningParenthesis() {\n+        Assertions.assertFalse(validator.isValid(\"te(st\"));\n+    }\n+\n+    @Test\n+    public void testClosingParenthesis() {\n+        Assertions.assertFalse(validator.isValid(\"te)st\"));\n+    }\n+\n+    @Test\n+    public void testBiggerSymbol() {\n+        Assertions.assertFalse(validator.isValid(\"te>st\"));\n+    }\n+\n+    @Test\n+    public void testSmallerSymbol() {\n+        Assertions.assertFalse(validator.isValid(\"te<st\"));\n+    }\n+\n+    @Test\n+    public void testSlash() {\n+        Assertions.assertFalse(validator.isValid(\"te/st\"));\n+    }\n+\n+    @Test\n+    public void testEquals() {\n+        Assertions.assertFalse(validator.isValid(\"te=st\"));\n+    }\n+\n+    @Test\n+    public void testSpecialCharAsExample() {\n+        Assertions.assertTrue(validator.isValid(\"\u00c2test\u00c2\"));\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 6,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 12,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "789369502029c9eb3006f331c71b4716391240dc",
            "date": "2025-01-19T22:52:39Z",
            "author_login": "goekay"
          },
          {
            "sha": "41133b094c4df64537c4f23d708912068c94d277",
            "date": "2025-01-08T22:50:18Z",
            "author_login": "goekay"
          },
          {
            "sha": "0c0f1036f8fe66af7592cf3c5804c94e010bbabc",
            "date": "2025-01-08T22:49:30Z",
            "author_login": "goekay"
          },
          {
            "sha": "a7697fd609b684805a772360adc3904e29759696",
            "date": "2025-01-08T22:49:03Z",
            "author_login": "goekay"
          },
          {
            "sha": "fb3caa8394339277fbf12440723b2c0ffcad4d97",
            "date": "2025-01-08T21:53:10Z",
            "author_login": "goekay"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "SteVe is an open platform that implements different version of the OCPP protocol for Electric Vehicle charge points, acting as a central server for management of registered charge points. Attackers can inject arbitrary HTML and Javascript code via WebSockets leading to persistent Cross-Site Scripting in the SteVe management interface.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-08-12T15:15:19.903",
    "last_modified": "2024-08-13T17:33:13.537",
    "fix_date": "2024-08-04T08:54:25Z"
  },
  "references": [
    {
      "url": "https://github.com/steve-community/steve/blob/steve-3.6.0/src/main/java/de/rwth/idsg/steve/config/WebSocketConfiguration.java#L69",
      "source": "report@snyk.io",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/steve-community/steve/commit/a79983f843c37705182c8f54eba060c1dce3b6d1",
      "source": "report@snyk.io",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/steve-community/steve/issues/1526",
      "source": "report@snyk.io",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/steve-community/steve/pull/1527",
      "source": "report@snyk.io",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.556507",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "steve",
    "owner": "steve-community",
    "created_at": "2013-09-05T12:31:46Z",
    "updated_at": "2025-01-24T08:49:23Z",
    "pushed_at": "2025-01-25T18:22:08Z",
    "size": 9755,
    "stars": 838,
    "forks": 404,
    "open_issues": 123,
    "watchers": 838,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 1448103,
      "CSS": 11459,
      "JavaScript": 6510,
      "Dockerfile": 1431
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:49:17.584167"
  }
}