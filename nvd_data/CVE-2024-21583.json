{
  "cve_id": "CVE-2024-21583",
  "github_data": {
    "repository": "gitpod-io/gitpod",
    "fix_commit": "da1053e1013f27a56e6d3533aa251dbd241d0155",
    "related_commits": [
      "da1053e1013f27a56e6d3533aa251dbd241d0155",
      "da1053e1013f27a56e6d3533aa251dbd241d0155"
    ],
    "patch_url": "https://github.com/gitpod-io/gitpod/commit/da1053e1013f27a56e6d3533aa251dbd241d0155.patch",
    "fix_commit_details": {
      "sha": "da1053e1013f27a56e6d3533aa251dbd241d0155",
      "commit_date": "2024-07-01T06:53:14Z",
      "author": {
        "login": "filiptronicek",
        "type": "User",
        "stats": {
          "total_commits": 391,
          "average_weekly_commits": 1.7,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 116
        }
      },
      "commit_message": {
        "title": "Make auth cookie stricter (#19973)",
        "length": 652,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 176,
        "additions": 145,
        "deletions": 31
      },
      "files": [
        {
          "filename": "components/gitpod-protocol/src/util/gitpod-host-url.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -216,4 +216,12 @@ export class GitpodHostUrl {\n         }\n         return newUrl.with((url) => ({ pathname: \"/metrics-api\" }));\n     }\n+\n+    asLoginWithOTS(userId: string, key: string, returnToUrl?: string) {\n+        const result = this.withApi({ pathname: `/login/ots/${userId}/${key}` });\n+        if (returnToUrl) {\n+            return result.with({ search: `returnTo=${encodeURIComponent(returnToUrl)}` });\n+        }\n+        return result;\n+    }\n }"
        },
        {
          "filename": "components/server/go/pkg/lib/cookie.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -9,5 +9,5 @@ import \"regexp\"\n func CookieNameFromDomain(domain string) string {\n \t// replace all non-word characters with underscores\n \tderived := regexp.MustCompile(`[\\W_]+`).ReplaceAllString(domain, \"_\")\n-\treturn \"_\" + derived + \"_jwt2_\"\n+\treturn \"__Host-_\" + derived + \"_jwt2_\"\n }"
        },
        {
          "filename": "components/server/src/auth/generic-auth-provider.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -302,6 +302,14 @@ export abstract class GenericAuthProvider implements AuthProvider {\n             return;\n         }\n \n+        if (!this.loginCompletionHandler.isBaseDomain(request)) {\n+            // For auth requests that are not targetting the base domain, we redirect to the base domain, so they come with our cookie.\n+            log.info(`(${strategyName}) Auth request on subdomain, redirecting to base domain`, { clientInfo });\n+            const target = new URL(request.url, this.config.hostUrl.url.toString()).toString();\n+            response.redirect(target);\n+            return;\n+        }\n+\n         if (isAlreadyLoggedIn) {\n             if (!authFlow) {\n                 log.warn("
        },
        {
          "filename": "components/server/src/auth/login-completion-handler.ts",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -6,6 +6,7 @@\n \n import { inject, injectable } from \"inversify\";\n import express from \"express\";\n+import * as crypto from \"crypto\";\n import { User } from \"@gitpod/gitpod-protocol\";\n import { log, LogContext } from \"@gitpod/gitpod-protocol/lib/util/logging\";\n import { Config } from \"../config\";\n@@ -16,6 +17,7 @@ import { IAnalyticsWriter } from \"@gitpod/gitpod-protocol/lib/analytics\";\n import { trackLogin } from \"../analytics\";\n import { SessionHandler } from \"../session-handler\";\n import { AuthJWT } from \"./jwt\";\n+import { OneTimeSecretServer } from \"../one-time-secret-server\";\n \n /**\n  * The login completion handler pulls the strings between the OAuth2 flow, the ToS flow, and the session management.\n@@ -28,6 +30,7 @@ export class LoginCompletionHandler {\n     @inject(AuthProviderService) protected readonly authProviderService: AuthProviderService;\n     @inject(AuthJWT) protected readonly authJWT: AuthJWT;\n     @inject(SessionHandler) protected readonly session: SessionHandler;\n+    @inject(OneTimeSecretServer) private readonly otsServer: OneTimeSecretServer;\n \n     async complete(\n         request: express.Request,\n@@ -78,6 +81,26 @@ export class LoginCompletionHandler {\n             );\n         }\n \n+        if (!this.isBaseDomain(request)) {\n+            // (GitHub edge case) If we got redirected here onto a sub-domain (e.g. api.gitpod.io), we need to redirect to the base domain in order to Set-Cookie properly.\n+            const secret = crypto\n+                .createHash(\"sha256\")\n+                .update(user.id + this.config.session.secret)\n+                .digest(\"hex\");\n+            const expirationDate = new Date(Date.now() + 1000 * 60); // 1 minutes\n+            const token = await this.otsServer.serveToken({}, secret, expirationDate);\n+\n+            reportLoginCompleted(\"succeeded_via_ots\", \"git\");\n+            log.info(\n+                logContext,\n+                `User will be logged in via OTS on the base domain. (Indirect) redirect to: ${returnTo}`,\n+            );\n+            const baseDomainRedirect = this.config.hostUrl.asLoginWithOTS(user.id, token.token, returnTo).toString();\n+            response.redirect(baseDomainRedirect);\n+            return;\n+        }\n+\n+        // (default case) If we got redirected here onto the base domain of the Gitpod installation, we can just issue the cookie right away.\n         const cookie = await this.session.createJWTSessionCookie(user.id);\n         response.cookie(cookie.name, cookie.value, cookie.opts);\n         reportJWTCookieIssued();\n@@ -87,6 +110,10 @@ export class LoginCompletionHandler {\n         response.redirect(returnTo);\n     }\n \n+    public isBaseDomain(req: express.Request): boolean {\n+        return req.hostname === this.config.hostUrl.url.hostname;\n+    }\n+\n     public async updateAuthProviderAsVerified(hostname: string, user: User) {\n         const hostCtx = this.hostContextProvider.get(hostname);\n         log.info(\"Updating auth provider as verified\", { hostname });"
        },
        {
          "filename": "components/server/src/prometheus-metrics.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -85,6 +85,8 @@ type LoginCounterStatus =\n     | \"failed\"\n     // The login attempt succeeded\n     | \"succeeded\"\n+    // The login was successful, but we need to defer cookie creation via an OTS\n+    | \"succeeded_via_ots\"\n     // The login attempt failed, because the client failed to provide complete session information, for instance.\n     | \"failed_client\";\n "
        },
        {
          "filename": "components/server/src/session-handler.spec.db.ts",
          "status": "modified",
          "additions": 32,
          "deletions": 2,
          "patch": "@@ -163,9 +163,9 @@ describe(\"SessionHandler\", () => {\n             expect(opts.httpOnly).to.equal(true);\n             expect(opts.secure).to.equal(true);\n             expect(opts.maxAge).to.equal(maxAge * 1000);\n-            expect(opts.sameSite).to.equal(\"strict\");\n+            expect(opts.sameSite).to.equal(\"lax\");\n \n-            expect(name, \"Check cookie name\").to.equal(\"_gitpod_dev_jwt_\");\n+            expect(name, \"Check cookie name\").to.equal(\"__Host-_gitpod_dev_jwt_\");\n         });\n     });\n     describe(\"jwtSessionConvertor\", () => {\n@@ -212,5 +212,35 @@ describe(\"SessionHandler\", () => {\n             expect(res.value).to.equal(\"JWT Session is invalid\");\n             expect(res.cookie).to.be.undefined;\n         });\n+\n+        it(\"old JWT cookie is present, is accepted (!), and we get a new one\", async () => {\n+            const oldExpiredCookie = await sessionHandler.createJWTSessionCookie(existingUser.id, {\n+                issuedAtMs: Date.now() - SessionHandler.JWT_REFRESH_THRESHOLD - 1,\n+            });\n+            oldExpiredCookie.name = \"_gitpod_dev_jwt_\";\n+            const newCookie = await sessionHandler.createJWTSessionCookie(existingUser.id);\n+\n+            const res = await handle(existingUser, `${oldExpiredCookie.name}=${oldExpiredCookie.value}`);\n+            expect(res.status).to.equal(200);\n+            expect(res.value).to.equal(\"Refreshed JWT cookie issued.\");\n+            expect(res.cookie).to.not.be.undefined;\n+            expect(res.cookie?.split(\"=\")[0]).to.equal(newCookie.name);\n+        });\n+\n+        it(\"old expired AND new one JWT cookies are present, new one is accepted\", async () => {\n+            const oldExpiredCookie = await sessionHandler.createJWTSessionCookie(existingUser.id, {\n+                issuedAtMs: Date.now() - SessionHandler.JWT_REFRESH_THRESHOLD - 1,\n+            });\n+            oldExpiredCookie.name = \"_gitpod_dev_jwt_\";\n+            const newCookie = await sessionHandler.createJWTSessionCookie(existingUser.id);\n+\n+            const res = await handle(\n+                existingUser,\n+                `${oldExpiredCookie.name}=${oldExpiredCookie.value}; ${newCookie.name}=${newCookie.value}`,\n+            );\n+            expect(res.status).to.equal(200);\n+            expect(res.value).to.equal(\"User session already has a valid JWT session.\");\n+            expect(res.cookie).to.be.undefined;\n+        });\n     });\n });"
        },
        {
          "filename": "components/server/src/session-handler.ts",
          "status": "modified",
          "additions": 41,
          "deletions": 11,
          "patch": "@@ -27,15 +27,15 @@ export class SessionHandler {\n \n     public jwtSessionConvertor(): express.Handler {\n         return async (req, res) => {\n-            const user = req.user;\n+            const { user } = req;\n             if (!user) {\n                 res.status(401);\n                 res.send(\"User has no valid session.\");\n                 return;\n             }\n \n             const cookies = parseCookieHeader(req.headers.cookie || \"\");\n-            const jwtTokens = cookies[getJWTCookieName(this.config)];\n+            const jwtTokens = this.filterCookieValues(cookies);\n \n             let decoded: { payload: JwtPayload; keyId: string } | undefined = undefined;\n             try {\n@@ -146,12 +146,29 @@ export class SessionHandler {\n      */\n     async verifyJWTCookie(cookie: string): Promise<JwtPayload | undefined> {\n         const cookies = parseCookieHeader(cookie);\n-        const cookieValues = cookies[getJWTCookieName(this.config)];\n+        const cookieValues = this.filterCookieValues(cookies);\n \n         const token = await this.verifyFirstValidJwt(cookieValues);\n         return token?.payload;\n     }\n \n+    /**\n+     * @param cookies\n+     * @returns Primary (the cookie name we set) AND secondary cookie (old accepted cookie name) values (in that order).\n+     */\n+    private filterCookieValues(cookies: { [key: string]: string[] }): string[] {\n+        const cookieValues = cookies[getPrimaryJWTCookieName(this.config)] ?? [];\n+\n+        const secondaryCookieName = getSecondaryJWTCookieName(this.config);\n+        if (secondaryCookieName) {\n+            const secondaryCookieValues = cookies[secondaryCookieName];\n+            if (secondaryCookieValues) {\n+                cookieValues.push(...secondaryCookieValues);\n+            }\n+        }\n+        return cookieValues;\n+    }\n+\n     /**\n      * Returns the first valid session token it finds.\n      * Edge cases:\n@@ -204,10 +221,9 @@ export class SessionHandler {\n         const token = await this.authJWT.sign(userID, payload, options?.expirySeconds);\n \n         return {\n-            name: getJWTCookieName(this.config),\n+            name: getPrimaryJWTCookieName(this.config),\n             value: token,\n             opts: {\n-                domain: getJWTCookieDomain(this.config),\n                 maxAge: this.config.auth.session.cookie.maxAge * 1000, // express does not match the HTTP spec and uses milliseconds\n                 httpOnly: this.config.auth.session.cookie.httpOnly,\n                 sameSite: this.config.auth.session.cookie.sameSite,\n@@ -216,19 +232,33 @@ export class SessionHandler {\n         };\n     }\n \n-    public clearSessionCookie(res: express.Response, config: Config): void {\n-        res.clearCookie(getJWTCookieName(this.config), {\n-            domain: getJWTCookieDomain(config),\n+    public clearSessionCookie(res: express.Response): void {\n+        const { secure, sameSite, httpOnly } = this.config.auth.session.cookie;\n+        res.clearCookie(getPrimaryJWTCookieName(this.config), {\n+            httpOnly,\n+            sameSite,\n+            secure,\n         });\n+\n+        const secondaryCookieName = getSecondaryJWTCookieName(this.config);\n+        if (secondaryCookieName) {\n+            res.clearCookie(secondaryCookieName, {\n+                domain: this.config.hostUrl.url.hostname,\n+            });\n+        }\n     }\n }\n \n-function getJWTCookieName(config: Config) {\n+function getPrimaryJWTCookieName(config: Config) {\n     return config.auth.session.cookie.name;\n }\n \n-function getJWTCookieDomain(config: Config): string {\n-    return config.hostUrl.url.hostname;\n+function getSecondaryJWTCookieName(config: Config) {\n+    const PREFIX = \"__Host-\";\n+    if (!config.auth.session.cookie.name.startsWith(PREFIX)) {\n+        return undefined;\n+    }\n+    return config.auth.session.cookie.name.slice(PREFIX.length);\n }\n \n function parseCookieHeader(c: string): { [key: string]: string[] } {"
        },
        {
          "filename": "components/server/src/test/service-testing-container-module.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -55,11 +55,11 @@ export const mockAuthConfig: AuthConfig = {\n         issuer: \"https://mp-server-d7650ec945.preview.gitpod-dev.com\",\n         lifetimeSeconds: 7 * 24 * 60 * 60,\n         cookie: {\n-            name: \"_gitpod_dev_jwt_\",\n+            name: \"__Host-_gitpod_dev_jwt_\",\n             secure: true,\n             httpOnly: true,\n             maxAge: 7 * 24 * 60 * 60,\n-            sameSite: \"strict\",\n+            sameSite: \"lax\",\n         },\n     },\n };"
        },
        {
          "filename": "components/server/src/user/user-controller.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -37,6 +37,7 @@ import { UserService } from \"./user-service\";\n import { WorkspaceService } from \"../workspace/workspace-service\";\n import { runWithSubjectId } from \"../util/request-context\";\n import { SubjectId } from \"../auth/subject-id\";\n+import { TrustedValue } from \"@gitpod/gitpod-protocol/lib/util/scrubbing\";\n \n export const ServerFactory = Symbol(\"ServerFactory\");\n export type ServerFactory = () => GitpodServerImpl;\n@@ -213,6 +214,14 @@ export class UserController {\n                 res.cookie(cookie.name, cookie.value, cookie.opts);\n                 reportJWTCookieIssued();\n \n+                // If returnTo was passed and it's safe, redirect to it\n+                const returnTo = this.getSafeReturnToParam(req);\n+                if (returnTo) {\n+                    log.info(`Redirecting after OTS login ${returnTo}`);\n+                    res.redirect(returnTo);\n+                    return;\n+                }\n+\n                 res.sendStatus(200);\n             }),\n         );\n@@ -269,7 +278,7 @@ export class UserController {\n             }\n \n             // clear cookies\n-            this.sessionHandler.clearSessionCookie(res, this.config);\n+            this.sessionHandler.clearSessionCookie(res);\n \n             // then redirect\n             log.info(logContext, \"(Logout) Redirecting...\", { redirectToUrl, ...logPayload });\n@@ -618,7 +627,7 @@ export class UserController {\n             return returnToURL;\n         }\n \n-        log.debug(\"The redirect URL does not match\", { query: req.query });\n+        log.debug(\"The redirect URL does not match\", { query: new TrustedValue(req.query).value });\n         return;\n     }\n "
        },
        {
          "filename": "components/ws-proxy/pkg/proxy/routes.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -822,8 +822,8 @@ func removeSensitiveCookies(cookies []*http.Cookie, domain string) []*http.Cooki\n \n \tn := 0\n \tfor _, c := range cookies {\n-\t\tif strings.HasPrefix(c.Name, hostnamePrefix) {\n-\t\t\t// skip session cookie\n+\t\tif strings.HasPrefix(c.Name, hostnamePrefix) || strings.HasPrefix(c.Name, \"__Host-\"+hostnamePrefix) {\n+\t\t\t// skip session cookies\n \t\t\tcontinue\n \t\t}\n \t\tlog.WithField(\"hostnamePrefix\", hostnamePrefix).WithField(\"name\", c.Name).Debug(\"keeping cookie\")"
        },
        {
          "filename": "components/ws-proxy/pkg/proxy/routes_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -983,7 +983,7 @@ func TestRemoveSensitiveCookies(t *testing.T) {\n \tvar (\n \t\tdomain                  = \"test-domain.com\"\n \t\tsessionCookie           = &http.Cookie{Domain: domain, Name: \"_test_domain_com_\", Value: \"fobar\"}\n-\t\tsessionCookieJwt2       = &http.Cookie{Domain: domain, Name: \"_test_domain_com_jwt2_\", Value: \"fobar\"}\n+\t\tsessionCookieJwt2       = &http.Cookie{Domain: domain, Name: \"__Host-_test_domain_com_jwt2_\", Value: \"fobar\"}\n \t\trealGitpodSessionCookie = &http.Cookie{Domain: domain, Name: server_lib.CookieNameFromDomain(domain), Value: \"fobar\"}\n \t\tportAuthCookie          = &http.Cookie{Domain: domain, Name: \"_test_domain_com_ws_77f6b236_3456_4b88_8284_81ca543a9d65_port_auth_\", Value: \"some-token\"}\n \t\townerCookie             = &http.Cookie{Domain: domain, Name: \"_test_domain_com_ws_77f6b236_3456_4b88_8284_81ca543a9d65_owner_\", Value: \"some-other-token\"}"
        },
        {
          "filename": "install/installer/pkg/components/auth/config_test.go",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -19,42 +19,42 @@ func TestCookieNameFromDomain(t *testing.T) {\n \t\t{\n \t\t\tname:            \"Simple Domain\",\n \t\t\tdomain:          \"example.com\",\n-\t\t\texpectedOutcome: \"_example_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_example_com_jwt2_\",\n \t\t},\n \t\t{\n \t\t\tname:            \"Domain with Underscore\",\n \t\t\tdomain:          \"example_test.com\",\n-\t\t\texpectedOutcome: \"_example_test_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_example_test_com_jwt2_\",\n \t\t},\n \t\t{\n \t\t\tname:            \"Domain with Hyphen\",\n \t\t\tdomain:          \"example-test.com\",\n-\t\t\texpectedOutcome: \"_example_test_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_example_test_com_jwt2_\",\n \t\t},\n \t\t{\n \t\t\tname:            \"Domain with Special Characters\",\n \t\t\tdomain:          \"example&test.com\",\n-\t\t\texpectedOutcome: \"_example_test_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_example_test_com_jwt2_\",\n \t\t},\n \t\t{\n \t\t\tname:            \"Subdomain\",\n \t\t\tdomain:          \"subdomain.example.com\",\n-\t\t\texpectedOutcome: \"_subdomain_example_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_subdomain_example_com_jwt2_\",\n \t\t},\n \t\t{\n \t\t\tname:            \"Subdomain with Hyphen\",\n \t\t\tdomain:          \"sub-domain.example.com\",\n-\t\t\texpectedOutcome: \"_sub_domain_example_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_sub_domain_example_com_jwt2_\",\n \t\t},\n \t\t{\n \t\t\tname:            \"Subdomain with Underscore\",\n \t\t\tdomain:          \"sub_domain.example.com\",\n-\t\t\texpectedOutcome: \"_sub_domain_example_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_sub_domain_example_com_jwt2_\",\n \t\t},\n \t\t{\n \t\t\tname:            \"Subdomain with Special Characters\",\n \t\t\tdomain:          \"sub&domain.example.com\",\n-\t\t\texpectedOutcome: \"_sub_domain_example_com_jwt2_\",\n+\t\t\texpectedOutcome: \"__Host-_sub_domain_example_com_jwt2_\",\n \t\t},\n \t}\n "
        },
        {
          "filename": "install/installer/pkg/components/public-api-server/configmap_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -63,7 +63,7 @@ func TestConfigMap(t *testing.T) {\n \t\t\t\tLifetimeSeconds: int64((24 * 7 * time.Hour).Seconds()),\n \t\t\t\tIssuer:          \"https://test.domain.everything.awesome.is\",\n \t\t\t\tCookie: config.CookieConfig{\n-\t\t\t\t\tName:     \"_test_domain_everything_awesome_is_jwt2_\",\n+\t\t\t\t\tName:     \"__Host-_test_domain_everything_awesome_is_jwt2_\",\n \t\t\t\t\tMaxAge:   int64((24 * 7 * time.Hour).Seconds()),\n \t\t\t\t\tSameSite: \"lax\",\n \t\t\t\t\tSecure:   true,"
        },
        {
          "filename": "install/installer/pkg/components/server/configmap_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -69,7 +69,7 @@ func TestConfigMap(t *testing.T) {\n \t\t\t\tLifetimeSeconds: int64((7 * 24 * time.Hour).Seconds()),\n \t\t\t\tIssuer:          \"https://awesome.domain\",\n \t\t\t\tCookie: auth.CookieConfig{\n-\t\t\t\t\tName:     \"_awesome_domain_jwt2_\",\n+\t\t\t\t\tName:     \"__Host-_awesome_domain_jwt2_\",\n \t\t\t\t\tMaxAge:   int64((7 * 24 * time.Hour).Seconds()),\n \t\t\t\t\tSameSite: \"lax\",\n \t\t\t\t\tSecure:   true,"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 10,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c48d05d9b0313b002661fb71a524d911ce2ecc1d",
            "date": "2025-01-14T18:07:29Z",
            "author_login": "roboquat"
          },
          {
            "sha": "8c8685cd99ee328aeacaec14f9f3d57f719e8672",
            "date": "2025-01-10T15:38:25Z",
            "author_login": "filiptronicek"
          },
          {
            "sha": "d54bd04999de812be44865004d82d62cb72fc320",
            "date": "2025-01-08T16:05:23Z",
            "author_login": "filiptronicek"
          },
          {
            "sha": "663fcb958750e345c38521e18e06d401255e3b97",
            "date": "2025-01-08T06:31:23Z",
            "author_login": "iQQBot"
          },
          {
            "sha": "a5847d2c6d14d35c4da1c623220f8f204b4da7f4",
            "date": "2025-01-07T16:46:23Z",
            "author_login": "iQQBot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-15",
    "description": "Versions of the package github.com/gitpod-io/gitpod/components/server/go/pkg/lib before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/components/ws-proxy/pkg/proxy before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/auth before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/public-api-server before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/server before main-gha.27122; versions of the package @gitpod/gitpod-protocol before 0.1.5-main-gha.27122 are vulnerable to Cookie Tossing due to a missing __Host- prefix on the _gitpod_io_jwt2_ session cookie. This allows an adversary who controls a subdomain to set the value of the cookie on the Gitpod control plane, which can be assigned to an attacker\u2019s own JWT so that specific actions taken by the victim (such as connecting a new Github organization) are actioned by the attackers session.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-19T05:15:10.373",
    "last_modified": "2024-11-21T08:54:39.443",
    "fix_date": "2024-07-01T06:53:14Z"
  },
  "references": [
    {
      "url": "https://app.safebase.io/portal/71ccd717-aa2d-4a1e-942e-c768d37e9e0c/preview?product=%5B%E2%80%A6%5D942e-c768d37e9e0c&tcuUid=1d505bda-9a38-4ca5-8724-052e6337f34d",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/gitpod-io/gitpod/commit/da1053e1013f27a56e6d3533aa251dbd241d0155",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/gitpod-io/gitpod/pull/19973",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSSERVERGOPKGLIB-7452074",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSWSPROXYPKGPROXY-7452075",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSAUTH-7452076",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSPUBLICAPISERVER-7452077",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSSERVER-7452078",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-GITPODGITPODPROTOCOL-7452079",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://app.safebase.io/portal/71ccd717-aa2d-4a1e-942e-c768d37e9e0c/preview?product=%5B%E2%80%A6%5D942e-c768d37e9e0c&tcuUid=1d505bda-9a38-4ca5-8724-052e6337f34d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/gitpod-io/gitpod/commit/da1053e1013f27a56e6d3533aa251dbd241d0155",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/gitpod-io/gitpod/pull/19973",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSSERVERGOPKGLIB-7452074",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSWSPROXYPKGPROXY-7452075",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSAUTH-7452076",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSPUBLICAPISERVER-7452077",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSSERVER-7452078",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-GITPODGITPODPROTOCOL-7452079",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.495725",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gitpod",
    "owner": "gitpod-io",
    "created_at": "2018-04-24T15:56:54Z",
    "updated_at": "2025-01-14T21:05:15Z",
    "pushed_at": "2025-01-14T19:07:01Z",
    "size": 102688,
    "stars": 13061,
    "forks": 1250,
    "open_issues": 477,
    "watchers": 13061,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 5204309,
      "Go": 5001337,
      "Kotlin": 262372,
      "Shell": 158140,
      "Dockerfile": 71564,
      "JavaScript": 39239,
      "Java": 35325,
      "Jsonnet": 26326,
      "HCL": 14440,
      "CSS": 11339,
      "Makefile": 9588,
      "HTML": 6929,
      "Jupyter Notebook": 6676,
      "C": 4512,
      "Mustache": 1054,
      "Smarty": 972
    },
    "commit_activity": {
      "total_commits_last_year": 931,
      "avg_commits_per_week": 17.903846153846153,
      "days_active_last_year": 244
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T21:39:57.328668"
  }
}