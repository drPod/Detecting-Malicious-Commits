{
  "cve_id": "CVE-2024-21639",
  "github_data": {
    "repository": "chromiumembedded/cef",
    "fix_commit": "1f55d2e12f62cfdfbf9da6968fde2f928982670b",
    "related_commits": [
      "1f55d2e12f62cfdfbf9da6968fde2f928982670b",
      "1f55d2e12f62cfdfbf9da6968fde2f928982670b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1f55d2e12f62cfdfbf9da6968fde2f928982670b",
      "commit_date": "2024-01-05T17:14:58Z",
      "author": {
        "login": "magreenblatt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "osr: Fix potential shared memory OOB access",
        "length": 43,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 19,
        "deletions": 5
      },
      "files": [
        {
          "filename": "libcef/browser/osr/host_display_client_osr.cc",
          "status": "modified",
          "additions": 14,
          "deletions": 5,
          "patch": "@@ -75,15 +75,24 @@ void CefLayeredWindowUpdaterOSR::OnAllocatedSharedMemory(\n     base::UnsafeSharedMemoryRegion region) {\n   // Make sure |pixel_size| is sane.\n   size_t expected_bytes;\n-  bool size_result = viz::ResourceSizes::MaybeSizeInBytes(\n-      pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes);\n-  if (!size_result) {\n+  if (!viz::ResourceSizes::MaybeSizeInBytes(\n+          pixel_size, viz::SinglePlaneFormat::kRGBA_8888, &expected_bytes)) {\n+    DLOG(ERROR) << \"OnAllocatedSharedMemory with size that overflows\";\n+    return;\n+  }\n+\n+  auto mapping = region.Map();\n+  if (!mapping.IsValid()) {\n+    DLOG(ERROR) << \"Shared memory mapping failed.\";\n+    return;\n+  }\n+  if (mapping.size() < expected_bytes) {\n+    DLOG(ERROR) << \"Shared memory size was less than expected.\";\n     return;\n   }\n \n   pixel_size_ = pixel_size;\n-  shared_memory_ = region.Map();\n-  DCHECK(shared_memory_.IsValid());\n+  shared_memory_ = std::move(mapping);\n }\n \n void CefLayeredWindowUpdaterOSR::Draw(const gfx::Rect& damage_rect,"
        },
        {
          "filename": "libcef/browser/osr/video_consumer_osr.cc",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -88,6 +88,11 @@ void CefVideoConsumerOSR::OnFrameCaptured(\n         callbacks) {\n   ScopedVideoFrameDone scoped_done(std::move(callbacks));\n \n+  if (info->pixel_format != media::PIXEL_FORMAT_ARGB) {\n+    DLOG(ERROR) << \"Unsupported pixel format \" << info->pixel_format;\n+    return;\n+  }\n+\n   CHECK(data->is_read_only_shmem_region());\n   base::ReadOnlySharedMemoryRegion& shmem_region =\n       data->get_read_only_shmem_region();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "144e01e377249cd614378cb7084a3ed9b06803ca",
            "date": "2025-01-14T21:08:56Z",
            "author_login": "magreenblatt"
          },
          {
            "sha": "2d8b6b06f2ae660c65407b44c607cb44dc76d425",
            "date": "2025-01-14T18:42:20Z",
            "author_login": "magreenblatt"
          },
          {
            "sha": "a242ee518a299cbc31c61646d68557258f2c9dd8",
            "date": "2025-01-14T16:58:40Z",
            "author_login": "magreenblatt"
          },
          {
            "sha": "6a3233f945bb2fdbb93dde2731a0ecbdb0530035",
            "date": "2025-01-13T22:42:03Z",
            "author_login": "magreenblatt"
          },
          {
            "sha": "70c6a041ebaf8ce376ed9be36ad823fb79e0a43d",
            "date": "2025-01-13T17:15:25Z",
            "author_login": "magreenblatt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-125",
    "description": "CEF (Chromium Embedded Framework ) is a simple framework for embedding Chromium-based browsers in other applications. `CefLayeredWindowUpdaterOSR::OnAllocatedSharedMemory` does not check the size of the shared memory, which leads to out-of-bounds read outside the sandbox. This vulnerability was patched in commit 1f55d2e.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-01-12T22:15:45.750",
    "last_modified": "2024-11-21T08:54:46.790",
    "fix_date": "2024-01-05T17:14:58Z"
  },
  "references": [
    {
      "url": "https://github.com/chromiumembedded/cef/commit/1f55d2e12f62cfdfbf9da6968fde2f928982670b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/chromiumembedded/cef/security/advisories/GHSA-m375-jw5x-x8mg",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/chromiumembedded/cef/commit/1f55d2e12f62cfdfbf9da6968fde2f928982670b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/chromiumembedded/cef/security/advisories/GHSA-m375-jw5x-x8mg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.170909",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "cef",
    "owner": "chromiumembedded",
    "created_at": "2017-04-02T18:19:23Z",
    "updated_at": "2025-01-25T16:39:41Z",
    "pushed_at": "2025-01-17T04:01:04Z",
    "size": 40641,
    "stars": 3533,
    "forks": 473,
    "open_issues": 212,
    "watchers": 3533,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 8303168,
      "Python": 785020,
      "C": 282792,
      "Objective-C++": 234259,
      "HTML": 189788,
      "Starlark": 51473,
      "CMake": 40814,
      "Objective-C": 12646,
      "Batchfile": 4711,
      "Shell": 2946,
      "Smarty": 2121,
      "Pawn": 1941
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:40:18.635422"
  }
}