{
  "cve_id": "CVE-2024-21642",
  "github_data": {
    "repository": "man-group/dtale",
    "fix_commit": "954f6be1a06ff8629ead2c85c6e3f8e2196b3df2",
    "related_commits": [
      "954f6be1a06ff8629ead2c85c6e3f8e2196b3df2",
      "954f6be1a06ff8629ead2c85c6e3f8e2196b3df2"
    ],
    "patch_url": "https://github.com/man-group/dtale/commit/954f6be1a06ff8629ead2c85c6e3f8e2196b3df2.patch",
    "fix_commit_details": {
      "sha": "954f6be1a06ff8629ead2c85c6e3f8e2196b3df2",
      "commit_date": "2024-01-03T15:44:17Z",
      "author": {
        "login": "aschonfeld",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Updated web data uploads to be turned off by default",
        "length": 52,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 294,
        "additions": 259,
        "deletions": 35
      },
      "files": [
        {
          "filename": ".circleci/config.yml",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -155,6 +155,7 @@ python: &python\n             . ci/bin/activate\n             # xlrd & xarray do not load correctly from \"python setup.py develop\"\n             # possibly switch this script to use \"pip install -r requirements.txt\"\n+            pip install pillow\n             pip install xlrd\n             pip install xarray\n             if [ \"${CIRCLE_JOB}\" == \"build_3_10\" ]; then\n@@ -191,6 +192,9 @@ python: &python\n           command: |\n             set -e\n             . ci/bin/activate\n+            if [ \"${CIRCLE_JOB}\" == \"build_2_7\" ]; then\n+              pip install backports.functools-lru-cache==1.6.6\n+            fi\n             if [ \"${CIRCLE_JOB}\" != \"build_2_7\" ]; then\n               pip install -e \".[arcticdb]\"\n             fi"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -1352,6 +1352,19 @@ Here's the options at you disposal:\n   * pandas.util.testing.makeTimeDataFrame\n \n \n+**Starting with version 3.8.1 web uploads will be turned off by default.\n+Web uploads are vulnerable to blind server side request forgery, please only use in trusted environments.**\n+\n+**You can turn this feature on by doing one of the following:**\n+ - **add `enable_web_uploads=True` to your `dtale.show` call**\n+ - **add `enable_web_uploads = False` to the [app] section of your dtale.ini config file ([more info](https://github.com/man-group/dtale/blob/master/docs/CONFIGURATION.md))**\n+ - **run this code before calling dtale.show:**\n+```python\n+import dtale.global_state as global_state\n+global_state.set_app_settings(dict(enable_web_uploads=True))\n+```\n+\n+\n #### Instances\n This will give you information about other D-Tale instances are running under your current Python process.\n "
        },
        {
          "filename": "docs/CONFIGURATION.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -26,6 +26,7 @@ hide_header_menu = False\n hide_main_menu = False\n hide_column_menus = False\n enable_custom_filters = False\n+enable_web_uploads = False\n \n [charts] # this controls how many points can be contained within scatter & 3D charts\n scatter_points = 15000"
        },
        {
          "filename": "dtale/__init__.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@\n     HIDE_MAIN_MENU = False\n     HIDE_COLUMN_MENUS = False\n     ENABLE_CUSTOM_FILTERS = False\n+    ENABLE_WEB_UPLOADS = False\n \n     # flake8: NOQA\n     from dtale.app import show, get_instance, instances, offline_chart  # isort:skip"
        },
        {
          "filename": "dtale/app.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -721,6 +721,8 @@ def show(data=None, data_loader=None, name=None, context_vars=None, **options):\n     :type highlight_filter: boolean, optional\n     :param enable_custom_filters: If true, this will enable users to make custom filters from the UI\n     :type enable_custom_filters: bool, optional\n+    :param enable_web_uploads: If true, this will enable users to upload files using URLs from the UI\n+    :type enable_web_uploads: bool, optional\n \n     :Example:\n \n@@ -807,6 +809,7 @@ def show(data=None, data_loader=None, name=None, context_vars=None, **options):\n             hide_main_menu=final_options.get(\"hide_main_menu\"),\n             hide_column_menus=final_options.get(\"hide_column_menus\"),\n             enable_custom_filters=final_options.get(\"enable_custom_filters\"),\n+            enable_web_uploads=final_options.get(\"enable_web_uploads\"),\n         )\n         instance.started_with_open_browser = final_options[\"open_browser\"]\n         is_active = not running_with_flask_debug() and is_up(app_url)"
        },
        {
          "filename": "dtale/config.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -114,6 +114,13 @@ def load_app_settings(config):\n         section=\"app\",\n         getter=\"getboolean\",\n     )\n+    enable_web_uploads = get_config_val(\n+        config,\n+        curr_app_settings,\n+        \"enable_web_uploads\",\n+        section=\"app\",\n+        getter=\"getboolean\",\n+    )\n     open_custom_filter_on_startup = get_config_val(\n         config,\n         curr_app_settings,\n@@ -153,6 +160,7 @@ def load_app_settings(config):\n             hide_main_menu=hide_main_menu,\n             hide_column_menus=hide_column_menus,\n             enable_custom_filters=enable_custom_filters,\n+            enable_web_uploads=enable_web_uploads,\n         )\n     )\n \n@@ -223,6 +231,7 @@ def build_show_options(options=None):\n         hide_main_menu=None,\n         hide_column_menus=None,\n         enable_custom_filters=None,\n+        enable_web_uploads=None,\n     )\n     config_options = {}\n     config = get_config()"
        },
        {
          "filename": "dtale/datasets.py",
          "status": "modified",
          "additions": 19,
          "deletions": 8,
          "patch": "@@ -1,6 +1,9 @@\n+import numpy as np\n import pandas as pd\n import requests\n+import string\n import zipfile\n+from datetime import datetime\n \n from six import BytesIO\n \n@@ -89,11 +92,19 @@ def movies():\n \n \n def time_dataframe():\n-    try:\n-        from pandas._testing import makeTimeDataFrame\n-\n-        return makeTimeDataFrame(), None\n-    except ImportError:\n-        from pandas.util.testing import makeTimeDataFrame\n-\n-        return makeTimeDataFrame(), None\n+    def series_data():\n+        if hasattr(np.random, \"default_rng\"):\n+            return np.random.default_rng(2).standard_normal(30)\n+        return np.random.randn(30)\n+\n+    cols = string.ascii_uppercase[:4]\n+    data = {\n+        c: pd.Series(\n+            series_data(),\n+            index=pd.DatetimeIndex(\n+                pd.date_range(datetime(2000, 1, 1), periods=30, freq=\"B\")\n+            ),\n+        )\n+        for c in cols\n+    }\n+    return pd.DataFrame(data), None"
        },
        {
          "filename": "dtale/global_state.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@\n     \"hide_main_menu\": False,\n     \"hide_column_menus\": False,\n     \"enable_custom_filters\": False,\n+    \"enable_web_uploads\": False,\n }\n \n AUTH_SETTINGS = {\"active\": False, \"username\": None, \"password\": None}\n@@ -616,6 +617,15 @@ def set_app_settings(settings):\n                     \"use in trusted environments.\"\n                 )\n             )\n+    if settings.get(\"enable_web_uploads\") is not None:\n+        instance_updates[\"enable_web_uploads\"] = settings.get(\"enable_web_uploads\")\n+        if instance_updates[\"enable_web_uploads\"]:\n+            logger.warning(\n+                (\n+                    \"Turning on Web uploads. Web uploads are vulnerable to blind server side request forgery, please \"\n+                    \"only use in trusted environments.\"\n+                )\n+            )\n \n     if _default_store.size() > 0 and len(instance_updates):\n         for data_id in _default_store.keys():"
        },
        {
          "filename": "dtale/templates/dtale/base.html",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -45,6 +45,7 @@\n         <input type=\"hidden\" id=\"hide_main_menu\" value=\"{{hide_main_menu}}\" />\n         <input type=\"hidden\" id=\"hide_column_menus\" value=\"{{hide_column_menus}}\" />\n         <input type=\"hidden\" id=\"enable_custom_filters\" value=\"{{enable_custom_filters}}\" />\n+        <input type=\"hidden\" id=\"enable_web_uploads\" value=\"{{enable_web_uploads}}\" />\n         <input type=\"hidden\" id=\"allow_cell_edits\" value=\"{{allow_cell_edits}}\" />\n         <input type=\"hidden\" id=\"hide_drop_rows\" value=\"{{hide_drop_rows}}\" />\n         <input type=\"hidden\" id=\"is_vscode\" value=\"{{is_vscode}}\" />"
        },
        {
          "filename": "dtale/views.py",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -352,6 +352,7 @@ def update_settings(self, **updates):\n         * hide_main_menu - if true, this will hide the main menu from the screen\n         * hide_column_menus - if true, this will hide the column menus from the screen\n         * enable_custom_filters - if True, allow users to specify custom filters from the UI using pandas.query strings\n+        * enable_web_uploads - if True, allow users to upload files using URLs from the UI\n \n         After applying please refresh any open browsers!\n         \"\"\"\n@@ -916,6 +917,7 @@ def startup(\n     hide_main_menu=None,\n     hide_column_menus=None,\n     enable_custom_filters=None,\n+    enable_web_uploads=None,\n     force_save=True,\n ):\n     \"\"\"\n@@ -1044,6 +1046,7 @@ def startup(\n             hide_main_menu=hide_main_menu,\n             hide_column_menus=hide_column_menus,\n             enable_custom_filters=enable_custom_filters,\n+            enable_web_uploads=enable_web_uploads,\n         )\n         startup_code = (\n             \"from arcticdb import Arctic\\n\"\n@@ -1116,6 +1119,7 @@ def startup(\n                 hide_main_menu=hide_main_menu,\n                 hide_column_menus=hide_column_menus,\n                 enable_custom_filters=enable_custom_filters,\n+                enable_web_uploads=enable_web_uploads,\n             )\n \n             global_state.set_dataset(instance._data_id, data)\n@@ -1185,6 +1189,8 @@ def startup(\n             base_settings[\"hide_column_menus\"] = hide_column_menus\n         if enable_custom_filters is not None:\n             base_settings[\"enable_custom_filters\"] = enable_custom_filters\n+        if enable_web_uploads is not None:\n+            base_settings[\"enable_web_uploads\"] = enable_web_uploads\n         if column_edit_options is not None:\n             base_settings[\"column_edit_options\"] = column_edit_options\n         global_state.set_settings(data_id, base_settings)\n@@ -1239,6 +1245,13 @@ def startup(\n                     \"use in trusted environments.\"\n                 )\n             )\n+        if global_state.load_flag(data_id, \"enable_web_uploads\", False):\n+            logger.warning(\n+                (\n+                    \"Web uploads enabled. Web uploads are vulnerable to blind server side request forgery, please \"\n+                    \"only use in trusted environments.\"\n+                )\n+            )\n         return DtaleData(data_id, url, is_proxy=is_proxy, app_root=app_root)\n     else:\n         raise NoDataLoadedException(\"No data has been loaded into this D-Tale session!\")\n@@ -1275,6 +1288,7 @@ def base_render_template(template, data_id, **kwargs):\n     enable_custom_filters = global_state.load_flag(\n         data_id, \"enable_custom_filters\", False\n     )\n+    enable_web_uploads = global_state.load_flag(data_id, \"enable_web_uploads\", False)\n     app_overrides = dict(\n         allow_cell_edits=json.dumps(allow_cell_edits),\n         hide_shutdown=hide_shutdown,\n@@ -1284,6 +1298,7 @@ def base_render_template(template, data_id, **kwargs):\n         hide_main_menu=hide_main_menu,\n         hide_column_menus=hide_column_menus,\n         enable_custom_filters=enable_custom_filters,\n+        enable_web_uploads=enable_web_uploads,\n         github_fork=github_fork,\n     )\n     is_arcticdb = 0\n@@ -3926,6 +3941,17 @@ def web_upload():\n     from dtale.cli.loaders.excel_loader import load_file as load_excel\n     from dtale.cli.loaders.parquet_loader import loader_func as load_parquet\n \n+    if not global_state.get_app_settings().get(\"enable_web_uploads\", False):\n+        return jsonify(\n+            dict(\n+                success=False,\n+                error=(\n+                    \"Web uploads not enabled! Web uploads are vulnerable to blind server side request forgery, please \"\n+                    \"only use in trusted environments.\"\n+                ),\n+            )\n+        )\n+\n     data_type = get_str_arg(request, \"type\")\n     url = get_str_arg(request, \"url\")\n     proxy = get_str_arg(request, \"proxy\")"
        },
        {
          "filename": "frontend/static/__tests__/dtale/upload/Upload.test.support.tsx",
          "status": "modified",
          "additions": 17,
          "deletions": 2,
          "patch": "@@ -1,11 +1,14 @@\n import { act, render } from '@testing-library/react';\n import axios from 'axios';\n import * as React from 'react';\n+import { Provider } from 'react-redux';\n+import { Store } from 'redux';\n \n import Upload from '../../../popups/upload/Upload';\n import { Dataset, DataType } from '../../../popups/upload/UploadState';\n import * as UploadRepository from '../../../repository/UploadRepository';\n import reduxUtils from '../../redux-test-utils';\n+import { buildInnerHTML } from '../../test-utils';\n \n /** Bundles alot of jest setup for CreateColumn component tests */\n export class Spies {\n@@ -17,6 +20,7 @@ export class Spies {\n   public presetUploadSpy: jest.SpyInstance<Promise<UploadRepository.UploadResponse | undefined>, [dataset: Dataset]>;\n   public readAsDataURLSpy: jest.SpyInstance;\n   public btoaSpy: jest.SpyInstance;\n+  public store: Store;\n \n   /** Initializes all spy instances */\n   constructor() {\n@@ -25,6 +29,7 @@ export class Spies {\n     this.presetUploadSpy = jest.spyOn(UploadRepository, 'presetUpload');\n     this.readAsDataURLSpy = jest.spyOn(FileReader.prototype, 'readAsDataURL');\n     this.btoaSpy = jest.spyOn(window, 'btoa');\n+    this.store = reduxUtils.createDtaleStore();\n   }\n \n   /** Sets the mockImplementation/mockReturnValue for spy instances */\n@@ -48,11 +53,21 @@ export class Spies {\n   /**\n    * Build the initial wrapper.\n    *\n+   * @param overrides redux overrides\n    * @return the wrapper for testing.\n    */\n-  public async setupWrapper(): Promise<Element> {\n+  public async setupWrapper(overrides?: Record<string, string>): Promise<Element> {\n+    this.store = reduxUtils.createDtaleStore();\n+    buildInnerHTML({ enableWebUploads: 'True', ...overrides }, this.store);\n     return await act((): Element => {\n-      const { container } = render(<Upload />);\n+      const { container } = render(\n+        <Provider store={this.store}>\n+          <Upload />\n+        </Provider>,\n+        {\n+          container: document.getElementById('content') ?? undefined,\n+        },\n+      );\n       return container;\n     });\n   }"
        },
        {
          "filename": "frontend/static/__tests__/dtale/upload/upload-url-test.tsx",
          "status": "added",
          "additions": 48,
          "deletions": 0,
          "patch": "@@ -0,0 +1,48 @@\n+import { screen } from '@testing-library/react';\n+\n+import { DISABLED_URL_UPLOADS_MSG } from '../../../popups/upload/Upload';\n+\n+import * as TestSupport from './Upload.test.support';\n+\n+describe('Upload', () => {\n+  const { close, location, open, opener } = window;\n+  const spies = new TestSupport.Spies();\n+\n+  beforeEach(async () => {\n+    delete (window as any).location;\n+    delete (window as any).close;\n+    delete (window as any).open;\n+    delete window.opener;\n+    (window as any).location = {\n+      reload: jest.fn(),\n+      pathname: '/dtale/column/1',\n+      href: '',\n+      assign: jest.fn(),\n+    };\n+    window.close = jest.fn();\n+    window.open = jest.fn();\n+    window.opener = { location: { assign: jest.fn(), pathname: '/dtale/column/1' } };\n+    spies.setupMockImplementations();\n+    await spies.setupWrapper({ enableWebUploads: 'False' });\n+  });\n+\n+  afterEach(() => spies.afterEach());\n+\n+  afterAll(() => {\n+    spies.afterAll();\n+    window.location = location;\n+    window.close = close;\n+    window.open = open;\n+    window.opener = opener;\n+  });\n+\n+  const upload = (): HTMLElement => screen.getByTestId('upload');\n+\n+  it('renders successfully', async () => {\n+    expect(upload()).toBeDefined();\n+  });\n+\n+  it('DataViewer: disabled web uploads', async () => {\n+    expect(upload().getElementsByClassName('form-group')[0].textContent).toBe(DISABLED_URL_UPLOADS_MSG);\n+  });\n+});"
        },
        {
          "filename": "frontend/static/__tests__/reducers/dtale-test.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@ describe('reducer tests', () => {\n       hideMainMenu: false,\n       hideColumnMenus: false,\n       enableCustomFilters: false,\n+      enableWebUploads: false,\n       hideDropRows: false,\n       iframe: false,\n       columnMenuOpen: false,"
        },
        {
          "filename": "frontend/static/__tests__/test-utils.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -96,6 +96,7 @@ export const buildInnerHTML = (props: Record<string, string | undefined> = {}, s\n     buildHidden('hide_main_menu', props.hideMainMenu ?? HIDE_SHUTDOWN),\n     buildHidden('hide_column_menus', props.hideColumnMenus ?? HIDE_SHUTDOWN),\n     buildHidden('enable_custom_filters', props.enableCustomFilters ?? HIDE_SHUTDOWN),\n+    buildHidden('enable_web_uploads', props.enableWebUploads ?? HIDE_SHUTDOWN),\n     BASE_HTML,\n   ].join('');\n   store?.dispatch(actions.init());"
        },
        {
          "filename": "frontend/static/popups/create/LabeledInput.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@ interface DtaleInputProps {\n   type?: React.HTMLInputTypeAttribute;\n   value?: any;\n   setter: (value: string) => void;\n-  inputOptions?: Partial<React.HTMLAttributes<HTMLInputElement>>;\n+  inputOptions?: Partial<React.AllHTMLAttributes<HTMLInputElement>>;\n }\n \n const DtaleInput: React.FC<DtaleInputProps> = ({ type = 'text', value, setter, inputOptions }) => ("
        },
        {
          "filename": "frontend/static/popups/filter/FilterPopup.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -28,7 +28,7 @@ export const DISABLED_CUSTOM_FILTERS_MSG = [\n   '- add \"enable_custom_filters=True\" to your dtale.show call\\n',\n   '- run this code before calling dtale.show\\n',\n   '\\timport dtale.global_state as global_state\\n\\tglobal_state.set_app_settings(dict(enable_custom_filters=True))\\n',\n-  '- add \"enable_custom_filters = False\" to the [app] section of your dtale.ini config file',\n+  '- add \"enable_custom_filters = True\" to the [app] section of your dtale.ini config file',\n ].join('');\n \n export const selectResult = createSelector("
        },
        {
          "filename": "frontend/static/popups/upload/Upload.tsx",
          "status": "modified",
          "additions": 63,
          "deletions": 20,
          "patch": "@@ -1,10 +1,12 @@\n import * as React from 'react';\n import Dropzone from 'react-dropzone';\n import { withTranslation, WithTranslation } from 'react-i18next';\n+import { useSelector } from 'react-redux';\n \n import { Bouncer } from '../../Bouncer';\n import { BouncerWrapper } from '../../BouncerWrapper';\n import ButtonToggle from '../../ButtonToggle';\n+import { selectEnableWebUploads } from '../../redux/selectors';\n import { RemovableError } from '../../RemovableError';\n import * as UploadRepository from '../../repository/UploadRepository';\n import { LabeledInput } from '../create/LabeledInput';\n@@ -25,12 +27,18 @@ const DATASET_LABELS: { [key in Dataset]: string } = {\n   [Dataset.TIME_DATAFRAME]: 'makeTimeDataFrame',\n };\n \n+export const DISABLED_URL_UPLOADS_MSG = [\n+  'Web uploads are currently disabled.  This feature is only for trusted environments, in order to unlock this ',\n+  'feature you must do one of the following:',\n+].join('');\n+\n /** Component properties for Upload */\n interface UploadProps {\n   mergeRefresher?: () => Promise<void>;\n }\n \n const Upload: React.FC<UploadProps & WithTranslation> = ({ mergeRefresher, t }) => {\n+  const enableWebUploads = useSelector(selectEnableWebUploads);\n   const [dataType, setDataType] = React.useState<DataType>();\n   const [url, setUrl] = React.useState<string>();\n   const [proxy, setProxy] = React.useState<string>();\n@@ -156,27 +164,62 @@ const Upload: React.FC<UploadProps & WithTranslation> = ({ mergeRefresher, t })\n           )}\n         </div>\n       </div>\n-      <div className=\"form-group row\">\n-        <label className=\"col-md-3 col-form-label text-right\">{t('Data Type')}</label>\n-        <div className=\"col-md-8 p-0\">\n-          <ButtonToggle\n-            options={Object.values(DataType).map((value) => ({ value, label: value.toUpperCase() }))}\n-            defaultValue={dataType}\n-            update={setDataType}\n-          />\n+      {!enableWebUploads && (\n+        <div className=\"form-group row\">\n+          <div className=\"col-md-2 p-0\" />\n+          <div className=\"col-md-8 col-form-label text-left\">\n+            <label>{DISABLED_URL_UPLOADS_MSG}</label>\n+            <ul>\n+              <li>\n+                {`add `}\n+                <code>enable_web_uploads=True</code>\n+                {` to your `}\n+                <code className=\"font-weight-bold\">dtale.show</code>\n+                {` call`}\n+              </li>\n+              <li>\n+                {`run this code before calling `}\n+                <code className=\"font-weight-bold\">dtale.show</code>\n+                <pre>\n+                  {`import dtale.global_state as global_state\\n`}\n+                  {`global_state.set_app_settings(dict(enable_web_uploads=True))`}\n+                </pre>\n+              </li>\n+              <li>\n+                {`add `}\n+                <code>enable_web_uploads = True</code>\n+                {` to the [app] section of your dtale.ini config file`}\n+              </li>\n+            </ul>\n+          </div>\n+          <div className=\"col-md-2 p-0\" />\n         </div>\n-      </div>\n-      <LabeledInput label=\"URL\" value={url} setter={setUrl} />\n-      <LabeledInput\n-        label={\n-          <React.Fragment>\n-            {t('Proxy')}\n-            <small className=\"pl-3\">{t('(Optional)')}</small>\n-          </React.Fragment>\n-        }\n-        value={proxy}\n-        setter={setProxy}\n-      />\n+      )}\n+      {enableWebUploads && (\n+        <>\n+          <div className=\"form-group row\">\n+            <label className=\"col-md-3 col-form-label text-right\">{t('Data Type')}</label>\n+            <div className=\"col-md-8 p-0\">\n+              <ButtonToggle\n+                options={Object.values(DataType).map((value) => ({ value, label: value.toUpperCase() }))}\n+                defaultValue={dataType}\n+                update={setDataType}\n+              />\n+            </div>\n+          </div>\n+          <LabeledInput label=\"URL\" value={url} setter={setUrl} />\n+          <LabeledInput\n+            label={\n+              <React.Fragment>\n+                {t('Proxy')}\n+                <small className=\"pl-3\">{t('(Optional)')}</small>\n+              </React.Fragment>\n+            }\n+            value={proxy}\n+            setter={setProxy}\n+          />\n+        </>\n+      )}\n       <div className=\"pb-5\">\n         <h3 className=\"d-inline\">{t('Sample Datasets')}</h3>\n         <small className=\"pl-3 d-inline\">{t('(Requires access to web)')}</small>"
        },
        {
          "filename": "frontend/static/redux/reducers/app/settings.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -93,6 +93,17 @@ export const enableCustomFilters = (state = false, action: AppActionTypes): bool\n   }\n };\n \n+export const enableWebUploads = (state = false, action: AppActionTypes): boolean => {\n+  switch (action.type) {\n+    case ActionType.INIT_PARAMS:\n+      return toBool(getHiddenValue('enable_web_uploads'));\n+    case ActionType.LOAD_PREVIEW:\n+      return false;\n+    default:\n+      return state;\n+  }\n+};\n+\n export const openCustomFilterOnStartup = (state = false, action: AppActionTypes): boolean => {\n   switch (action.type) {\n     case ActionType.INIT_PARAMS:"
        },
        {
          "filename": "frontend/static/redux/selectors.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -59,6 +59,7 @@ export const selectBaseHideHeaderMenu = (state: AppState): boolean => state.hide\n export const selectBaseHideMainMenu = (state: AppState): boolean => state.hideMainMenu;\n export const selectBaseHideColumnMenus = (state: AppState): boolean => state.hideColumnMenus;\n export const selectBaseEnableCustomFilters = (state: AppState): boolean => state.enableCustomFilters;\n+export const selectEnableWebUploads = (state: AppState): boolean => state.enableWebUploads;\n export const selectFilteredRanges = (state: AppState): FilteredRanges => state.filteredRanges;\n export const selectShowAllHeatmapColumns = (state: AppState): boolean => state.showAllHeatmapColumns;\n export const selectChartData = (state: AppState): Popups => state.chartData;"
        },
        {
          "filename": "frontend/static/redux/state/AppState.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -440,6 +440,7 @@ export interface AppSettings {\n   hideMainMenu: boolean;\n   hideColumnMenus: boolean;\n   enableCustomFilters: boolean;\n+  enableWebUploads: boolean;\n }\n \n /** Properties for specifying filtered ranges */"
        },
        {
          "filename": "requirements-test.txt",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -5,4 +5,5 @@ mock\n nbconvert\n pytest\n pytest-cov\n-pytest-server-fixtures\n+pytest-server-fixtures<=1.7.0; python_version == '2.7'\n+pytest-server-fixtures; python_version >= '3.6'"
        },
        {
          "filename": "requirements.txt",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -81,7 +81,8 @@ requests<=2.27.1; python_version <= '3.6'\n scikit-learn<=0.20.4; python_version < '3.0'\n scikit-learn<=0.24.2; python_version == '3.6'\n scikit-learn<=1.0.2; python_version == '3.7'\n-scikit-learn; python_version > '3.7'\n+scikit-learn<=1.3.2; python_version == '3.8'\n+scikit-learn; python_version > '3.8'\n scipy<=1.2.3; python_version == '2.7'\n scipy<=1.5.4; python_version == '3.0'\n scipy<=1.5.4; python_version == '3.1'\n@@ -92,7 +93,7 @@ scipy<=1.5.4; python_version == '3.5'\n scipy<=1.5.4; python_version == '3.6'\n scipy<=1.7.3; python_version == '3.7'\n scipy<=1.10.1; python_version == '3.8'\n-scipy; python_version >= '3.9'\n+scipy!=1.12.0rc1; python_version >= '3.9'\n seaborn<=0.9.1; python_version < '3.6'\n seaborn<=0.11.2; python_version == '3.6'\n seaborn<=0.12.2; python_version == '3.7'"
        },
        {
          "filename": "tests/dtale/config/dtale.ini",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -14,6 +14,7 @@ hide_header_menu = False\n hide_main_menu = False\n hide_column_menus = False\n enable_custom_filters = False\n+enable_web_uploads = False\n \n [charts]\n scatter_points = 15000"
        },
        {
          "filename": "tests/dtale/config/dtale_missing_props.ini",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -6,3 +6,4 @@ hide_header_menu = False\n hide_main_menu = False\n hide_column_menus = False\n enable_custom_filters = False\n+enable_web_uploads = False"
        },
        {
          "filename": "tests/dtale/config/test_config.py",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ def test_load_app_settings():\n         \"hide_main_menu\": True,\n         \"hide_column_menus\": True,\n         \"enable_custom_filters\": True,\n+        \"enable_web_uploads\": True,\n     }\n     with ExitStack() as stack:\n         stack.enter_context(mock.patch(\"dtale.global_state.APP_SETTINGS\", settings))\n@@ -45,6 +46,7 @@ def test_load_app_settings():\n         assert settings[\"hide_main_menu\"]\n         assert settings[\"hide_column_menus\"]\n         assert settings[\"enable_custom_filters\"]\n+        assert settings[\"enable_web_uploads\"]\n \n         load_app_settings(\n             load_config_state(os.path.join(os.path.dirname(__file__), \"dtale.ini\"))\n@@ -63,6 +65,7 @@ def test_load_app_settings():\n         assert not settings[\"hide_main_menu\"]\n         assert not settings[\"hide_column_menus\"]\n         assert not settings[\"enable_custom_filters\"]\n+        assert not settings[\"enable_web_uploads\"]\n \n \n @pytest.mark.unit\n@@ -81,6 +84,7 @@ def test_load_app_settings_w_missing_props():\n         \"hide_main_menu\": True,\n         \"hide_column_menus\": True,\n         \"enable_custom_filters\": True,\n+        \"enable_web_uploads\": True,\n     }\n     with ExitStack() as stack:\n         stack.enter_context(mock.patch(\"dtale.global_state.APP_SETTINGS\", settings))\n@@ -96,6 +100,7 @@ def test_load_app_settings_w_missing_props():\n         assert settings[\"hide_main_menu\"]\n         assert settings[\"hide_column_menus\"]\n         assert settings[\"enable_custom_filters\"]\n+        assert settings[\"enable_web_uploads\"]\n \n         load_app_settings(\n             load_config_state(\n@@ -112,6 +117,7 @@ def test_load_app_settings_w_missing_props():\n         assert not settings[\"hide_main_menu\"]\n         assert not settings[\"hide_column_menus\"]\n         assert not settings[\"enable_custom_filters\"]\n+        assert not settings[\"enable_web_uploads\"]\n \n \n @pytest.mark.unit"
        },
        {
          "filename": "tests/dtale/test_upload.py",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -128,6 +128,7 @@ def test_web_upload(unittest):\n     import dtale.global_state as global_state\n \n     global_state.clear_store()\n+    global_state.set_app_settings(dict(enable_web_uploads=True))\n     with build_app(url=URL).test_client() as c:\n         with ExitStack() as stack:\n             load_csv = stack.enter_context(\n@@ -201,6 +202,16 @@ def test_web_upload(unittest):\n                 sorted([s[\"name\"] for s in sheets]), [\"Sheet 1\", \"Sheet 2\"]\n             )\n \n+            global_state.set_app_settings(dict(enable_web_uploads=False))\n+            resp = c.get(\"/dtale/web-upload\", query_string=params)\n+            response_data = resp.get_json()\n+            assert not response_data[\"success\"]\n+            assert response_data[\"error\"] == (\n+                \"Web uploads not enabled! Web uploads are vulnerable to blind server side request forgery, please \"\n+                \"only use in trusted environments.\"\n+            )\n+            global_state.set_app_settings(dict(enable_web_uploads=True))\n+\n \n @pytest.mark.unit\n def test_covid_dataset():"
        },
        {
          "filename": "tests/dtale/test_views.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -81,6 +81,7 @@ def test_startup(unittest):\n         hide_main_menu=True,\n         hide_column_menus=True,\n         enable_custom_filters=True,\n+        enable_web_uploads=True,\n     )\n \n     pdt.assert_frame_equal(instance.data, test_data.reset_index())\n@@ -96,6 +97,7 @@ def test_startup(unittest):\n             hide_main_menu=True,\n             hide_column_menus=True,\n             enable_custom_filters=True,\n+            enable_web_uploads=True,\n             locked=[\"date\", \"security_id\"],\n             indexes=[\"date\", \"security_id\"],\n             precision=2,\n@@ -121,6 +123,7 @@ def test_startup(unittest):\n             hide_main_menu=True,\n             hide_column_menus=True,\n             enable_custom_filters=True,\n+            enable_web_uploads=True,\n             locked=[\"date\", \"security_id\"],\n             indexes=[\"date\", \"security_id\"],\n             precision=2,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 7,
        "dependency_files": 1,
        "test_files": 10,
        "unique_directories": 16,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "41fe9550d5143757dcc067e187336ed92b604ea3",
            "date": "2024-12-13T15:18:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "84de3713e39b33762c6cd4550fd210b12474c4f3",
            "date": "2024-12-13T14:55:55Z",
            "author_login": "aschonfeld"
          },
          {
            "sha": "1e26ed3ca12fe83812b90f12a2b3e5fb0b740f7a",
            "date": "2024-12-13T14:49:27Z",
            "author_login": "aschonfeld"
          },
          {
            "sha": "5310812cd7dec7c1ac91622a62743a3c1c1d034d",
            "date": "2024-12-03T21:05:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0edceb9e86fdccc467dec29af67017738dce8c8f",
            "date": "2024-12-03T19:00:49Z",
            "author_login": "aschonfeld"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "D-Tale is a visualizer for Pandas data structures. Users hosting versions D-Tale prior to 3.9.0 publicly can be vulnerable to server-side request forgery (SSRF), allowing attackers to access files on the server. Users should upgrade to version 3.9.0, where the `Load From the Web` input is turned off by default. The only workaround for versions earlier than 3.9.0 is to only host D-Tale to trusted users.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-05T22:15:43.190",
    "last_modified": "2024-11-21T08:54:47.160",
    "fix_date": "2024-01-03T15:44:17Z"
  },
  "references": [
    {
      "url": "https://github.com/man-group/dtale/commit/954f6be1a06ff8629ead2c85c6e3f8e2196b3df2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale/security/advisories/GHSA-7hfx-h3j3-rwq4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale?tab=readme-ov-file#load-data--sample-datasets",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale/commit/954f6be1a06ff8629ead2c85c6e3f8e2196b3df2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale/security/advisories/GHSA-7hfx-h3j3-rwq4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/man-group/dtale?tab=readme-ov-file#load-data--sample-datasets",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.138736",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dtale",
    "owner": "man-group",
    "created_at": "2019-07-15T09:34:48Z",
    "updated_at": "2025-01-13T14:38:00Z",
    "pushed_at": "2025-01-02T15:40:47Z",
    "size": 131813,
    "stars": 4818,
    "forks": 407,
    "open_issues": 61,
    "watchers": 4818,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1851060,
      "Python": 1562348,
      "CSS": 255281,
      "JavaScript": 38980,
      "HTML": 22403,
      "Dockerfile": 7802,
      "SCSS": 7049
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T15:21:07.887030"
  }
}