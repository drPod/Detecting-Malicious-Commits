{
  "cve_id": "CVE-2024-21649",
  "github_data": {
    "repository": "vantage6/vantage6",
    "fix_commit": "eac19db737145d3ca987adf037a454fae0790ddd",
    "related_commits": [
      "eac19db737145d3ca987adf037a454fae0790ddd",
      "eac19db737145d3ca987adf037a454fae0790ddd"
    ],
    "patch_url": "https://github.com/vantage6/vantage6/commit/eac19db737145d3ca987adf037a454fae0790ddd.patch",
    "fix_commit_details": {
      "sha": "eac19db737145d3ca987adf037a454fae0790ddd",
      "commit_date": "2024-01-18T08:35:52Z",
      "author": {
        "login": "bartvanb",
        "type": "User",
        "stats": {
          "total_commits": 2387,
          "average_weekly_commits": 5.836185819070905,
          "total_additions": 373633,
          "total_deletions": 328316,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-w9h2-px87-74vx",
        "length": 115,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 252,
        "additions": 204,
        "deletions": 48
      },
      "files": [
        {
          "filename": "docs/algorithms/code_details.rst",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -167,16 +167,18 @@ interaction between the algorithm and the node. The wrappers are responsible\n for reading the input data from the data source and supplying it to the algorithm.\n They also take care of writing the results back to the data source.\n \n-As algorithm developer, you do not have to worry about the wrappers. The only\n-thing you have to make sure is that the following line is present at the end of\n+As algorithm developer, you do not have to worry about the wrappers. The main\n+point you have to make sure is that the following line is present at the end of\n your ``Dockerfile``:\n \n .. code:: docker\n \n-    CMD python -c \"from vantage6.algorithm.tools.wrap import wrap_algorithm; wrap_algorithm('${PKG_NAME}')\"\n+    CMD python -c \"from vantage6.algorithm.tools.wrap import wrap_algorithm; wrap_algorithm()\"\n \n-where ``${PKG_NAME}`` is the name of your algorithm package. The ``wrap_algorithm``\n-function will wrap your algorithm.\n+The ``wrap_algorithm`` function will wrap your algorithm to ensure that the\n+vantage6 algorithm tools are available to it. Note that the ``wrap_algorithm``\n+function will also read the ``PKG_NAME`` environment variable from the\n+``Dockerfile`` so make sure that this variable is set correctly.\n \n For R, the command is slightly different:\n "
        },
        {
          "filename": "docs/algorithms/develop.rst",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -97,14 +97,21 @@ as follows:\n \n .. code:: python\n \n-   import os\n+   from vantage6.algorithm.tools.util import get_env_var\n \n    def my_function():\n-       input_file = os.environ[\"INPUT_FILE\"]\n-       token_file = os.environ[\"DEFAULT_DATABASE_URI\"]\n+       input_file = get_env_var(\"INPUT_FILE\")\n+       token_file = get_env_var(\"DEFAULT_DATABASE_URI\")\n \n        # do something with the input file and database URI\n \n+.. note::\n+\n+   The ``get_env_var`` function is used here rather than the standard\n+   ``os.environ`` dictionary because the environment variables are encoded\n+   for security purposes. The ``get_env_var`` function will decode the\n+   environment variable for you.\n+\n The environment variables that you specify in the node configuration file\n can be used in the exact same manner. You can view all environment variables\n that are available to your algorithm by ``print(os.environ)``."
        },
        {
          "filename": "vantage6-algorithm-tools/vantage6/algorithm/tools/decorators.py",
          "status": "modified",
          "additions": 24,
          "deletions": 24,
          "patch": "@@ -10,7 +10,7 @@\n \n from vantage6.algorithm.client import AlgorithmClient\n from vantage6.algorithm.tools.mock_client import MockAlgorithmClient\n-from vantage6.algorithm.tools.util import info, error, warn\n+from vantage6.algorithm.tools.util import info, error, warn, get_env_var\n from vantage6.algorithm.tools.wrappers import load_data\n from vantage6.algorithm.tools.preprocessing import preprocess_data\n \n@@ -89,12 +89,12 @@ def decorator(*args, mock_client: MockAlgorithmClient = None,\n             if mock_client is not None:\n                 return func(mock_client, *args, **kwargs)\n             # read server address from the environment\n-            host = os.environ[\"HOST\"]\n-            port = os.environ[\"PORT\"]\n-            api_path = os.environ[\"API_PATH\"]\n+            host = get_env_var(\"HOST\")\n+            port = get_env_var(\"PORT\")\n+            api_path = get_env_var(\"API_PATH\")\n \n             # read token from the environment\n-            token_file = os.environ[\"TOKEN_FILE\"]\n+            token_file = get_env_var(\"TOKEN_FILE\")\n             info(\"Reading token\")\n             with open(token_file) as fp:\n                 token = fp.read().strip()\n@@ -184,7 +184,7 @@ def decorator(*args, mock_data: list[pd.DataFrame] = None,\n \n                 # do any data preprocessing here\n                 info(f\"Applying preprocessing for database '{label}'\")\n-                env_prepro = os.environ.get(f\"{label.upper()}_PREPROCESSING\")\n+                env_prepro = get_env_var(f\"{label.upper()}_PREPROCESSING\")\n                 if env_prepro is not None:\n                     preprocess = json.loads(env_prepro)\n                     data_ = preprocess_data(data_, preprocess)\n@@ -291,7 +291,7 @@ def decorator(*args, **kwargs) -> callable:\n         >>> def my_algorithm(metadata: RunMetaData, <other arguments>):\n         >>>     pass\n         \"\"\"\n-        token_file = os.environ[\"TOKEN_FILE\"]\n+        token_file = get_env_var(\"TOKEN_FILE\")\n         info(\"Reading token\")\n         with open(token_file) as fp:\n             token = fp.read().strip()\n@@ -304,10 +304,10 @@ def decorator(*args, **kwargs) -> callable:\n             node_id=payload[\"node_id\"],\n             collaboration_id=payload[\"collaboration_id\"],\n             organization_id=payload[\"organization_id\"],\n-            temporary_directory=Path(os.environ[\"TEMPORARY_FOLDER\"]),\n-            output_file=Path(os.environ[\"OUTPUT_FILE\"]),\n-            input_file=Path(os.environ[\"INPUT_FILE\"]),\n-            token_file=Path(os.environ[\"TOKEN_FILE\"])\n+            temporary_directory=Path(get_env_var(\"TEMPORARY_FOLDER\")),\n+            output_file=Path(get_env_var(\"OUTPUT_FILE\")),\n+            input_file=Path(get_env_var(\"INPUT_FILE\")),\n+            token_file=Path(get_env_var(\"TOKEN_FILE\"))\n         )\n         return func(metadata, *args, **kwargs)\n     return decorator\n@@ -336,11 +336,11 @@ def get_ohdsi_metadata(label: str) -> OHDSIMetaData:\n     for var in expected_env_vars:\n         _check_environment_var_exists_or_exit(f'{label_}_DB_PARAM_{var}')\n \n-    tmp = Path(os.environ[\"TEMPORARY_FOLDER\"])\n+    tmp = Path(get_env_var(\"TEMPORARY_FOLDER\"))\n     metadata = OHDSIMetaData(\n-        database=os.environ[f\"{label_}_DB_PARAM_CDM_DATABASE\"],\n-        cdm_schema=os.environ[f\"{label_}_DB_PARAM_CDM_SCHEMA\"],\n-        results_schema=os.environ[f\"{label_}_DB_PARAM_RESULTS_SCHEMA\"],\n+        database=get_env_var(f\"{label_}_DB_PARAM_CDM_DATABASE\"),\n+        cdm_schema=get_env_var(f\"{label_}_DB_PARAM_CDM_SCHEMA\"),\n+        results_schema=get_env_var(f\"{label_}_DB_PARAM_RESULTS_SCHEMA\"),\n         incremental_folder=tmp / \"incremental\",\n         cohort_statistics_folder=tmp / \"cohort_statistics\",\n         export_folder=tmp / \"export\"\n@@ -399,10 +399,10 @@ def _create_omop_database_connection(label: str) -> callable:\n         _check_environment_var_exists_or_exit(f'{label_}_DB_PARAM_{var}')\n \n     info(\"Reading OHDSI environment variables\")\n-    dbms = os.environ[f\"{label_}_DB_PARAM_DBMS\"]\n-    uri = os.environ[f\"{label_}_DATABASE_URI\"]\n-    user = os.environ[f\"{label_}_DB_PARAM_USER\"]\n-    password = os.environ[f\"{label_}_DB_PARAM_PASSWORD\"]\n+    dbms = get_env_var(f\"{label_}_DB_PARAM_DBMS\")\n+    uri = get_env_var(f\"{label_}_DATABASE_URI\")\n+    user = get_env_var(f\"{label_}_DB_PARAM_USER\")\n+    password = get_env_var(f\"{label_}_DB_PARAM_PASSWORD\")\n     info(f' - dbms: {dbms}')\n     info(f' - uri: {uri}')\n     info(f' - user: {user}')\n@@ -441,21 +441,21 @@ def _get_data_from_label(label: str) -> pd.DataFrame:\n         Data from the database\n     \"\"\"\n     # Load the input data from the input file - this may e.g. include the\n-    database_uri = os.environ[f\"{label.upper()}_DATABASE_URI\"]\n+    database_uri = get_env_var(f\"{label.upper()}_DATABASE_URI\")\n     info(f\"Using '{database_uri}' with label '{label}' as database\")\n \n     # Get the database type from the environment variable, this variable is\n     # set by the vantage6 node based on its configuration file.\n-    database_type = os.environ.get(\n+    database_type = get_env_var(\n         f\"{label.upper()}_DATABASE_TYPE\", \"csv\").lower()\n \n     # Load the data based on the database type. Try to provide environment\n     # variables that should be available for some data types.\n     return load_data(\n         database_uri,\n         database_type,\n-        query=os.environ.get(f\"{label.upper()}_QUERY\"),\n-        sheet_name=os.environ.get(f\"{label.upper()}_SHEET_NAME\")\n+        query=get_env_var(f\"{label.upper()}_QUERY\"),\n+        sheet_name=get_env_var(f\"{label.upper()}_SHEET_NAME\")\n     )\n \n \n@@ -470,7 +470,7 @@ def _get_user_database_labels() -> list[str]:\n     \"\"\"\n     # read the labels that the user requested, which is a comma\n     # separated list of labels.\n-    labels = os.environ[\"USER_REQUESTED_DATABASE_LABELS\"]\n+    labels = get_env_var(\"USER_REQUESTED_DATABASE_LABELS\")\n     return labels.split(',')\n \n "
        },
        {
          "filename": "vantage6-algorithm-tools/vantage6/algorithm/tools/util.py",
          "status": "modified",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -1,4 +1,7 @@\n import sys\n+import os\n+import base64\n+from vantage6.common.globals import STRING_ENCODING, ENV_VAR_EQUALS_REPLACEMENT\n \n \n def info(msg: str) -> None:\n@@ -35,3 +38,31 @@ def error(msg: str) -> None:\n         Error message to be printed\n     \"\"\"\n     sys.stdout.write(f\"error > {msg}\\n\")\n+\n+\n+def get_env_var(var_name: str, default: str | None = None) -> str:\n+    \"\"\"\n+    Get the value of an environment variable. Environment variables are encoded\n+    by the node so they need to be decoded here.\n+\n+    Note that this decoding follows the reverse of the encoding in the node:\n+    first replace '=' back and then decode the base32 string.\n+\n+    Parameters\n+    ----------\n+    var_name : str\n+        Name of the environment variable\n+\n+    Returns\n+    -------\n+    var_value : str | None\n+        Value of the environment variable, or default value if not found\n+    \"\"\"\n+    try:\n+        encoded_env_var_value = \\\n+            os.environ[var_name].replace(\n+                ENV_VAR_EQUALS_REPLACEMENT, \"=\"\n+            ).encode(STRING_ENCODING)\n+        return base64.b32decode(encoded_env_var_value).decode(STRING_ENCODING)\n+    except KeyError:\n+        return default"
        },
        {
          "filename": "vantage6-algorithm-tools/vantage6/algorithm/tools/wrap.py",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -6,11 +6,11 @@\n \n from vantage6.common.client import deserialization\n from vantage6.common import serialization\n-from vantage6.algorithm.tools.util import info, error\n+from vantage6.algorithm.tools.util import info, error, get_env_var\n from vantage6.algorithm.tools.exceptions import DeserializationException\n \n \n-def wrap_algorithm(module: str, log_traceback: bool = True) -> None:\n+def wrap_algorithm(log_traceback: bool = True) -> None:\n     \"\"\"\n     Wrap an algorithm module to provide input and output handling for the\n     vantage6 infrastructure.\n@@ -41,10 +41,13 @@ def wrap_algorithm(module: str, log_traceback: bool = True) -> None:\n         default False. Algorithm developers should set this to False if\n         the error messages may contain sensitive information. By default True.\n     \"\"\"\n+    # get the module name from the environment variable. Note that this env var\n+    # is set in the Dockerfile and is therefore not encoded.\n+    module = os.environ.get(\"PKG_NAME\")\n     info(f\"wrapper for {module}\")\n \n     # read input from the mounted input file.\n-    input_file = os.environ[\"INPUT_FILE\"]\n+    input_file = get_env_var(\"INPUT_FILE\")\n     info(f\"Reading input file {input_file}\")\n     input_data = load_input(input_file)\n \n@@ -54,7 +57,7 @@ def wrap_algorithm(module: str, log_traceback: bool = True) -> None:\n \n     # write output from the method to mounted output file. Which will be\n     # transferred back to the server by the node-instance.\n-    output_file = os.environ[\"OUTPUT_FILE\"]\n+    output_file = get_env_var(\"OUTPUT_FILE\")\n     info(f\"Writing output to {output_file}\")\n \n     _write_output(output, output_file)"
        },
        {
          "filename": "vantage6-common/vantage6/common/globals.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -36,3 +36,6 @@\n \n # The basics image can be used (mainly by the UI) to collect column names\n BASIC_PROCESSING_IMAGE = 'harbor2.vantage6.ai/algorithms/basics'\n+\n+# Character to replace '=' with in encoded environment variables\n+ENV_VAR_EQUALS_REPLACEMENT = \"!\""
        },
        {
          "filename": "vantage6-common/vantage6/common/serialization.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,4 +1,5 @@\n import json\n+from vantage6.common.globals import STRING_ENCODING\n \n \n # TODO BvB 2023-02-03: I feel this function could be given a better name. And\n@@ -17,4 +18,4 @@ def serialize(data: any) -> bytes:\n     bytes\n         A JSON-serialized and then encoded bytes object representing the data\n     \"\"\"\n-    return json.dumps(data).encode()\n+    return json.dumps(data).encode(STRING_ENCODING)"
        },
        {
          "filename": "vantage6-node/vantage6/node/docker/docker_manager.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -485,8 +485,8 @@ def get_result(self) -> Result:\n                         self.active_tasks.remove(task)\n                         break\n                 except AlgorithmContainerNotFound:\n-                    self.log.exception(f'Failed to find container for '\n-                                       f'result {task.result_id}')\n+                    self.log.exception('Failed to find container for '\n+                                       'algorithm with run_id %s', task.run_id)\n                     self.failed_tasks.append(task)\n                     self.active_tasks.remove(task)\n                     break\n@@ -517,7 +517,7 @@ def get_result(self) -> Result:\n         else:\n             # at least one task failed to start\n             finished_task = self.failed_tasks.pop()\n-            logs = 'Container failed'\n+            logs = 'Container failed. Check node logs for details'\n             results = b''\n \n         return Result("
        },
        {
          "filename": "vantage6-node/vantage6/node/docker/task_manager.py",
          "status": "modified",
          "additions": 105,
          "deletions": 4,
          "patch": "@@ -4,18 +4,21 @@\n import os\n import docker.errors\n import json\n+import base64\n \n from pathlib import Path\n \n-from vantage6.common.globals import APPNAME\n+from vantage6.common.globals import (\n+    APPNAME, ENV_VAR_EQUALS_REPLACEMENT, STRING_ENCODING\n+)\n from vantage6.common.docker.addons import (\n     remove_container_if_exists, remove_container, pull_if_newer,\n     running_in_docker\n )\n from vantage6.common.docker.network_manager import NetworkManager\n from vantage6.common.task_status import TaskStatus\n from vantage6.node.util import get_parent_id\n-from vantage6.node.globals import ALPINE_IMAGE\n+from vantage6.node.globals import ALPINE_IMAGE, ENV_VARS_NOT_SETTABLE_BY_NODE\n from vantage6.node.docker.vpn_manager import VPNManager\n from vantage6.node.docker.squid import Squid\n from vantage6.node.docker.docker_base import DockerBaseManager\n@@ -124,7 +127,7 @@ def is_finished(self) -> bool:\n         \"\"\"\n         try:\n             self.container.reload()\n-        except docker.errors.NotFound:\n+        except (docker.errors.NotFound, AttributeError):\n             self.log.error(\"Container not found\")\n             self.log.debug(f\"- task id: {self.task_id}\")\n             self.log.debug(f\"- result id: {self.task_id}\")\n@@ -530,12 +533,110 @@ def _setup_environment_vars(self, algorithm_env: dict,\n             db_labels.append(label)\n         environment_variables['DB_LABELS'] = ','.join(db_labels)\n \n-        self.log.debug(f\"environment: {environment_variables}\")\n \n         # Load additional environment variables\n         if algorithm_env:\n             environment_variables = \\\n                 {**environment_variables, **algorithm_env}\n             self.log.info('Custom environment variables are loaded!')\n             self.log.debug(f\"custom environment: {algorithm_env}\")\n+\n+        # validate whether environment variables don't contain any illegal\n+        # characters\n+        self._validate_environment_variables(environment_variables)\n+\n+        # print the environment before encoding it so that the user can see\n+        # what is passed to the container\n+        self.log.debug(f\"environment: {environment_variables}\")\n+\n+        # encode environment variables to prevent special characters from being\n+        # possibly code injection\n+        environment_variables = self._encode_environment_variables(\n+            environment_variables)\n+\n         return environment_variables\n+\n+    def _validate_environment_variables(self,\n+                                        environment_variables: dict) -> None:\n+        \"\"\"\n+        Check whether environment variables don't contain any illegal\n+        characters\n+\n+        Parameters\n+        ----------\n+        environment_variables: dict\n+            Environment variables required to run algorithm\n+\n+        Raises\n+        ------\n+        PermanentAlgorithmStartFail\n+            If environment variables contain illegal characters\n+        \"\"\"\n+        msg = None\n+        for key in environment_variables:\n+            if not key.isidentifier():\n+                msg = (\n+                    f\"Environment variable '{key}' is invalid: environment \"\n+                    \" variable names should only contain number, letters and \"\n+                    \" underscores, and start with a letter.\"\n+                )\n+            elif key in ENV_VARS_NOT_SETTABLE_BY_NODE:\n+                msg = (\n+                    f\"Environment variable '{key}' cannot be set: this \"\n+                    \"variable is set in the algorithm Dockerfile and cannot \"\n+                    \"be overwritten.\"\n+                )\n+            if msg:\n+                self.status = TaskStatus.FAILED\n+                self.log.error(msg)\n+                raise PermanentAlgorithmStartFail(msg)\n+\n+    def _encode_environment_variables(self, environment_variables: dict) \\\n+            -> dict:\n+        \"\"\"\n+        Encode environment variable values to ensure that special characters\n+        are not interpretable as code while transferring them to the algorithm\n+        container.\n+\n+        Parameters\n+        ----------\n+        environment_variables: dict\n+            Environment variables required to run algorithm\n+\n+        Returns\n+        -------\n+        dict:\n+            Environment variables with encoded values\n+        \"\"\"\n+        def _encode(string: str) -> str:\n+            \"\"\" Encode env var value\n+\n+            We first encode to bytes, then to b32 and then decode to a string.\n+            Finally, '=' is replaced by less sensitve characters to prevent\n+            issues with interpreting the encoded string in the env var value.\n+\n+            Parameters\n+            ----------\n+            string: str\n+                String to be encoded\n+\n+            Returns\n+            -------\n+            str:\n+                Encoded string\n+\n+            Examples\n+            --------\n+            >>> _encode(\"abc\")\n+            'MFRGG!!!'\n+            \"\"\"\n+            return base64.b32encode(\n+                string.encode(STRING_ENCODING)\n+            ).decode(STRING_ENCODING).replace('=', ENV_VAR_EQUALS_REPLACEMENT)\n+\n+        self.log.debug(\"Encoding environment variables\")\n+\n+        encoded_environment_variables = {}\n+        for key, val in environment_variables.items():\n+            encoded_environment_variables[key] = _encode(val)\n+        return encoded_environment_variables"
        },
        {
          "filename": "vantage6-node/vantage6/node/globals.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -46,3 +46,7 @@\n #   SQUID RELATED CONSTANTS\n #\n SQUID_IMAGE = \"harbor2.vantage6.ai/infrastructure/squid\"\n+\n+# Environment variables that should be set in the Dockerfile and that may not\n+# be overwritten by the user.\n+ENV_VARS_NOT_SETTABLE_BY_NODE = [\"PKG_NAME\"]"
        },
        {
          "filename": "vantage6/vantage6/cli/node/start.py",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -10,10 +10,7 @@\n \n from colorama import Fore, Style\n \n-from vantage6.common import (\n-    warning, error, info, debug,\n-    get_database_config\n-)\n+from vantage6.common import warning, error, info, debug, get_database_config\n from vantage6.common.globals import (\n     APPNAME,\n     DEFAULT_DOCKER_REGISTRY,\n@@ -241,6 +238,13 @@ def cli_node_start(name: str, config: str, system_folders: bool, image: str,\n     db_labels = [db['label'] for db in ctx.databases]\n     for label in db_labels:\n \n+        # check that label contains only valid characters\n+        if not label.isidentifier():\n+            error(f\"Database label {Fore.RED}{label}{Style.RESET_ALL} contains\"\n+                  \" invalid characters. Only letters, numbers, and underscores\"\n+                  \" are allowed, and it cannot start with a number.\")\n+            exit(1)\n+\n         db_config = get_database_config(ctx.databases, label)\n         uri = db_config['uri']\n         db_type = db_config['type']"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7e08264dea67e84b35594893953001e8ea147d90",
            "date": "2025-01-09T16:31:08Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "c30ae94a7a4e5fda8eee9a937b26ff46c029109d",
            "date": "2024-12-13T09:10:55Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "7467646f458f773d0ee6aae6803682e1752a13f7",
            "date": "2024-12-13T08:54:45Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "4100ab5536ed2a5c675d6593cbebd8d98b4e5e14",
            "date": "2024-12-13T08:30:46Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "943a486a2e61185642fa75a0f55d24b776048838",
            "date": "2024-12-13T08:21:53Z",
            "author_login": "invalid-email-address"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "The vantage6 technology enables to manage and deploy privacy enhancing technologies like Federated Learning (FL) and Multi-Party Computation (MPC). Prior to 4.2.0, authenticated users could inject code into algorithm environment variables, resulting in remote code execution.  This vulnerability is patched in 4.2.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-30T16:15:47.653",
    "last_modified": "2024-11-21T08:54:48.030",
    "fix_date": "2024-01-18T08:35:52Z"
  },
  "references": [
    {
      "url": "https://github.com/vantage6/vantage6/commit/eac19db737145d3ca987adf037a454fae0790ddd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vantage6/vantage6/security/advisories/GHSA-w9h2-px87-74vx",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/vantage6/vantage6/commit/eac19db737145d3ca987adf037a454fae0790ddd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vantage6/vantage6/security/advisories/GHSA-w9h2-px87-74vx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.548917",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vantage6",
    "owner": "vantage6",
    "created_at": "2022-05-16T12:09:26Z",
    "updated_at": "2025-01-09T16:31:14Z",
    "pushed_at": "2025-01-14T13:14:06Z",
    "size": 44880,
    "stars": 31,
    "forks": 11,
    "open_issues": 248,
    "watchers": 31,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 1919355,
      "TypeScript": 526976,
      "HTML": 209327,
      "SCSS": 20209,
      "Makefile": 12871,
      "Dockerfile": 9054,
      "Jinja": 5974,
      "Shell": 4282,
      "JavaScript": 802
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:50:50.846103"
  }
}