{
  "cve_id": "CVE-2024-21654",
  "github_data": {
    "repository": "rubygems/rubygems.org",
    "fix_commit": "0b3272ac17b45748ee0d1867c49867c7deb26565",
    "related_commits": [
      "0b3272ac17b45748ee0d1867c49867c7deb26565",
      "0b3272ac17b45748ee0d1867c49867c7deb26565"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0b3272ac17b45748ee0d1867c49867c7deb26565",
      "commit_date": "2023-12-22T19:53:04Z",
      "author": {
        "login": "martinemde",
        "type": "User",
        "stats": {
          "total_commits": 158,
          "average_weekly_commits": 0.1922141119221411,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 53
        }
      },
      "commit_message": {
        "title": "Protect forgotten password changes from MFA bypass.",
        "length": 184,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 358,
        "additions": 269,
        "deletions": 89
      },
      "files": [
        {
          "filename": "app/controllers/adoptions_controller.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -3,7 +3,7 @@ class AdoptionsController < ApplicationController\n \n   before_action :find_rubygem\n   before_action :verify_ownership_requestable\n-  before_action :redirect_to_verify, if: -> { current_user_is_owner? && !password_session_active? }\n+  before_action :redirect_to_verify, if: -> { current_user_is_owner? && !verified_session_active? }\n \n   def index\n     @ownership_call     = @rubygem.ownership_call"
        },
        {
          "filename": "app/controllers/application_controller.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -153,10 +153,6 @@ def set_cache_headers\n     response.headers[\"Expires\"] = \"Fri, 01 Jan 1990 00:00:00 GMT\"\n   end\n \n-  def password_session_active?\n-    session[:verification] && session[:verification] > Time.current && session.fetch(:verified_user, \"\") == current_user.id\n-  end\n-\n   def set_error_context_user\n     return unless current_user\n "
        },
        {
          "filename": "app/controllers/concerns/session_verifiable.rb",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -6,7 +6,7 @@ def verify_session_before(**opts)\n       before_action :redirect_to_signin, **opts, unless: :signed_in?\n       before_action :redirect_to_new_mfa, **opts, if: :mfa_required_not_yet_enabled?\n       before_action :redirect_to_settings_strong_mfa_required, **opts, if: :mfa_required_weak_level_enabled?\n-      before_action :redirect_to_verify, **opts, unless: :password_session_active?\n+      before_action :redirect_to_verify, **opts, unless: :verified_session_active?\n     end\n   end\n \n@@ -25,5 +25,16 @@ def redirect_to_verify\n       session[:redirect_uri] = verify_session_redirect_path\n       redirect_to verify_session_path\n     end\n+\n+    def session_verified\n+      session[:verified_user] = current_user.id\n+      session[:verification] = Gemcutter::PASSWORD_VERIFICATION_EXPIRY.from_now\n+    end\n+\n+    def verified_session_active?\n+      session[:verification] &&\n+        session[:verification] > Time.current &&\n+        session.fetch(:verified_user, \"\") == current_user.id\n+    end\n   end\n end"
        },
        {
          "filename": "app/controllers/passwords_controller.rb",
          "status": "modified",
          "additions": 28,
          "deletions": 6,
          "patch": "@@ -1,10 +1,17 @@\n class PasswordsController < Clearance::PasswordsController\n   include MfaExpiryMethods\n   include WebauthnVerifiable\n+  include SessionVerifiable\n \n   before_action :validate_confirmation_token, only: %i[edit otp_edit webauthn_edit]\n   after_action :delete_mfa_expiry_session, only: %i[otp_edit webauthn_edit]\n \n+  # By default, clearance expects the token to be submitted with the password update.\n+  # We already invalidated the token when the user became verified by token(+mfa).\n+  skip_before_action :ensure_existing_user, only: %i[update]\n+  # Instead of the token, we now require the user to have been verified recently.\n+  verify_session_before only: %i[update]\n+\n   def edit\n     if @user.mfa_enabled?\n       @otp_verification_url = otp_edit_user_password_url(@user, token: @user.confirmation_token)\n@@ -14,17 +21,16 @@ def edit\n \n       render template: \"multifactor_auths/prompt\"\n     else\n+      # When user doesn't have mfa, a valid token is a full \"magic link\" sign in.\n+      verified_sign_in\n       render template: \"passwords/edit\"\n     end\n   end\n \n   def update\n-    @user = find_user_for_update\n-\n-    if @user.update_password password_from_password_reset_params\n-      @user.reset_api_key! if reset_params[:reset_api_key] == \"true\"\n-      @user.api_keys.expire_all! if reset_params[:reset_api_keys] == \"true\"\n-      sign_in @user\n+    if current_user.update_password password_from_password_reset_params\n+      current_user.reset_api_key! if reset_params[:reset_api_key] == \"true\"\n+      current_user.api_keys.expire_all! if reset_params[:reset_api_keys] == \"true\"\n       redirect_to url_after_update\n       session[:password_reset_token] = nil\n     else\n@@ -35,6 +41,8 @@ def update\n \n   def otp_edit\n     if otp_edit_conditions_met?\n+      # When the user identified by the email token submits adequate totp, they are logged in\n+      verified_sign_in\n       render template: \"passwords/edit\"\n     elsif !session_active?\n       login_failure(t(\"multifactor_auths.session_expired\"))\n@@ -51,11 +59,20 @@ def webauthn_edit\n \n     return login_failure(@webauthn_error) unless webauthn_credential_verified?\n \n+    # When the user identified by the email token submits verified webauthn, they are logged in\n+    verified_sign_in\n     render template: \"passwords/edit\"\n   end\n \n   private\n \n+  def verified_sign_in\n+    sign_in @user\n+    session_verified\n+    @user.update!(confirmation_token: nil)\n+    StatsD.increment \"login.success\"\n+  end\n+\n   def url_after_update\n     dashboard_path\n   end\n@@ -81,4 +98,9 @@ def login_failure(message)\n     flash.now.alert = message\n     render template: \"multifactor_auths/prompt\", status: :unauthorized\n   end\n+\n+  def redirect_to_verify\n+    session[:redirect_uri] = verify_session_redirect_path\n+    redirect_to verify_session_path, alert: t(\"verification_expired\")\n+  end\n end"
        },
        {
          "filename": "app/controllers/sessions_controller.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,6 +1,7 @@\n class SessionsController < Clearance::SessionsController\n   include MfaExpiryMethods\n   include WebauthnVerifiable\n+  include SessionVerifiable\n \n   before_action :redirect_to_signin, unless: :signed_in?, only: %i[verify webauthn_authenticate authenticate]\n   before_action :redirect_to_new_mfa, if: :mfa_required_not_yet_enabled?, only: %i[verify webauthn_authenticate authenticate]\n@@ -93,8 +94,7 @@ def webauthn_authenticate\n   private\n \n   def mark_verified\n-    session[:verified_user] = current_user.id\n-    session[:verification] = Gemcutter::PASSWORD_VERIFICATION_EXPIRY.from_now\n+    session_verified\n     redirect_to session.delete(:redirect_uri) || root_path\n   end\n "
        },
        {
          "filename": "app/views/passwords/edit.html.erb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,9 +1,9 @@\n <% @title = t('.title') %>\n \n <%= form_for(:password_reset,\n-             :url => user_password_path(@user, :token => @user.confirmation_token),\n+             :url => user_password_path(current_user),\n              :html => { :method => :put }) do |form| %>\n-  <%= error_messages_for @user %>\n+  <%= error_messages_for current_user %>\n   <div class=\"password_field\">\n     <%= form.label :password, \"Password\", :class => 'form__label' %>\n     <%= form.password_field :password, autocomplete: 'new-password', class: 'form__input' %>"
        },
        {
          "filename": "config/locales/de.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ de:\n   credentials_required:\n   edit: Bearbeiten\n   failure_when_forbidden:\n+  verification_expired:\n   feed_latest: RubyGems.org | Neueste Gems\n   feed_subscribed: RubyGems.org | Abonnierte Gems\n   footer_about_html:"
        },
        {
          "filename": "config/locales/en.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ en:\n   credentials_required: Credentials required\n   edit: Edit\n   failure_when_forbidden: Please double check the URL or try submitting it again.\n+  verification_expired: The verification has expired. Please verify again.\n   feed_latest: RubyGems.org | Latest Gems\n   feed_subscribed: RubyGems.org | Subscribed Gems\n   footer_about_html:"
        },
        {
          "filename": "config/locales/es.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ es:\n   credentials_required: Credenciales requeridas\n   edit: Editar\n   failure_when_forbidden: Por favor verifica la URL o int\u00e9ntalo nuevamente.\n+  verification_expired:\n   feed_latest: RubyGems.org | Gemas m\u00e1s recientes\n   feed_subscribed: RubyGems.org | Suscripciones a gemas\n   footer_about_html: RubyGems.org es el servicio de alojamiento de Gemas de la comunidad"
        },
        {
          "filename": "config/locales/fr.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ fr:\n   credentials_required:\n   edit: Modification\n   failure_when_forbidden: Veuillez v\u00e9rifier l'URL ou r\u00e9essayer.\n+  verification_expired:\n   feed_latest: RubyGems.org | Derniers Gems\n   feed_subscribed: RubyGems.org | Gems abonn\u00e9s\n   footer_about_html: RubyGems.org est le service d&rsquo;h\u00e9bergement de la communaut\u00e9"
        },
        {
          "filename": "config/locales/ja.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ ja:\n   credentials_required: \u8a8d\u8a3c\u60c5\u5831\u304c\u5fc5\u8981\u3067\u3059\n   edit: \u7de8\u96c6\n   failure_when_forbidden: URL\u3092\u898b\u8fd4\u3059\u304b\u3001\u518d\u5ea6\u9001\u4fe1\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n+  verification_expired:\n   feed_latest: RubyGems.org | \u6700\u65b0\u306egem\u306e\u4e00\u89a7\n   feed_subscribed: RubyGems.org | \u8cfc\u8aad\u3057\u305fgem\u306e\u4e00\u89a7\n   footer_about_html: RubyGems.org\u306fRuby\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306egem\u306e\u30db\u30b9\u30c6\u30a3\u30f3\u30b0\u30b5\u30fc\u30d3\u30b9\u3067\u3059\u3002\u3059\u3050\u306b<a href=\"%{publish_docs}\">gem\u3092\u516c\u958b</a>\u3057\u3066<a"
        },
        {
          "filename": "config/locales/nl.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ nl:\n   credentials_required:\n   edit: Wijzig\n   failure_when_forbidden: Controleer het webadres, en probeer het opnieuw.\n+  verification_expired:\n   feed_latest: RubyGems.org | Nieuwste Gems\n   feed_subscribed: RubyGems.org | Geabonneerde Gems\n   footer_about_html: RubyGems.org is de gem hosting service van de Ruby community."
        },
        {
          "filename": "config/locales/pt-BR.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ pt-BR:\n   credentials_required:\n   edit: Editar\n   failure_when_forbidden: Por favor, confira a URL ou tente submet\u00ea-la novamente.\n+  verification_expired:\n   feed_latest: RubyGems.org | \u00daltimas Gems\n   feed_subscribed: RubyGems.org | Gems do seu Feed\n   footer_about_html: RubyGems.org \u00e9 o servi\u00e7o de hospedagem de gems da comunidade"
        },
        {
          "filename": "config/locales/zh-CN.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ zh-CN:\n   credentials_required: \u9700\u8981\u51ed\u8bc1\n   edit: \u7f16\u8f91\n   failure_when_forbidden: \u8bf7\u518d\u6b21\u786e\u8ba4 URL \u6216\u5c1d\u8bd5\u91cd\u65b0\u63d0\u4ea4\n+  verification_expired:\n   feed_latest: RubyGems.org | \u6700\u65b0\u7684 Gem\n   feed_subscribed: RubyGems.org | \u8ba2\u9605\u7684 Gem\n   footer_about_html: RubyGems.org \u662f Ruby \u793e\u533a\u7684 Gem \u6258\u7ba1\u670d\u52a1\u3002 \u7acb\u5373 <a href=\"%{publish_docs}\">\u53d1\u5e03\u60a8\u7684"
        },
        {
          "filename": "config/locales/zh-TW.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ zh-TW:\n   credentials_required:\n   edit: \u7de8\u8f2f\n   failure_when_forbidden: \u8acb\u78ba\u8a8d URL \u6216\u518d\u6b21\u63d0\u4ea4\n+  verification_expired:\n   feed_latest: RubyGems.org | \u6700\u65b0 Gems\n   feed_subscribed: RubyGems.org | \u8a02\u95b1 Gems\n   footer_about_html: RubyGems.org \u662f Ruby \u793e\u7fa4\u7684 Gem \u5957\u4ef6\u7ba1\u7406\u670d\u52d9\uff0c\u8b93\u4f60\u80fd\u7acb\u5373\u5730\u767c\u4f48\u53ca\u5b89\u88dd\u4f60\u7684 Gem \u5957\u4ef6\uff0c\u4e26\u4e14\u5229\u7528"
        },
        {
          "filename": "test/functional/passwords_controller_test.rb",
          "status": "modified",
          "additions": 184,
          "deletions": 70,
          "patch": "@@ -35,6 +35,14 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :success\n \n+      should \"sign in the user\" do\n+        assert_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n+      should \"invalidate the confirmation_token\" do\n+        assert_nil @user.reload.confirmation_token\n+      end\n+\n       should \"display edit form\" do\n         page.assert_text(\"Reset password\")\n         page.assert_selector(\"input[type=password][autocomplete=new-password]\")\n@@ -49,6 +57,10 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should redirect_to(\"the home page\") { root_path }\n \n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n       should \"warn about invalid url\" do\n         assert_equal \"Please double check the URL or try submitting it again.\", flash[:alert]\n       end\n@@ -62,6 +74,10 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :success\n \n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n       should \"display otp form\" do\n         assert page.has_content?(\"Multi-factor authentication\")\n         assert page.has_content?(\"OTP code\")\n@@ -80,6 +96,10 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :success\n \n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n       should \"display webauthn prompt\" do\n         assert page.has_button?(\"Authenticate with security device\")\n       end\n@@ -97,6 +117,10 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :success\n \n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n       should \"display webauthn prompt\" do\n         assert page.has_button?(\"Authenticate with security device\")\n       end\n@@ -115,6 +139,10 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :success\n \n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n       should \"display webauthn prompt\" do\n         assert page.has_button?(\"Authenticate with security device\")\n       end\n@@ -142,9 +170,18 @@ class PasswordsControllerTest < ActionController::TestCase\n \n         should respond_with :success\n \n+        should \"sign in the user\" do\n+          assert_predicate @controller.request.env[:clearance], :signed_in?\n+        end\n+\n+        should \"invalidate the confirmation_token\" do\n+          assert_nil @user.reload.confirmation_token\n+        end\n+\n         should \"display edit form\" do\n           page.assert_text(\"Reset password\")\n         end\n+\n         should \"clear mfa_expires_at\" do\n           assert_nil @controller.session[:mfa_expires_at]\n         end\n@@ -158,6 +195,10 @@ class PasswordsControllerTest < ActionController::TestCase\n \n         should respond_with :unauthorized\n \n+        should \"not sign in the user\" do\n+          refute_predicate @controller.request.env[:clearance], :signed_in?\n+        end\n+\n         should \"alert about otp being incorrect\" do\n           assert_equal \"Your OTP code is incorrect.\", flash[:alert]\n         end\n@@ -222,6 +263,14 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :success\n \n+      should \"sign in the user\" do\n+        assert_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n+      should \"invalidate the confirmation_token\" do\n+        assert_nil @user.reload.confirmation_token\n+      end\n+\n       should \"display edit form\" do\n         page.assert_text(\"Reset password\")\n       end\n@@ -238,6 +287,10 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :unauthorized\n \n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n       should \"set flash notice\" do\n         assert_equal \"Credentials required\", flash[:alert]\n       end\n@@ -266,9 +319,14 @@ class PasswordsControllerTest < ActionController::TestCase\n \n       should respond_with :unauthorized\n \n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n+\n       should \"set flash notice\" do\n         assert_equal \"WebAuthn::ChallengeVerificationError\", flash[:alert]\n       end\n+\n       should \"still have the webauthn form url\" do\n         assert_not_nil page.find(\".js-webauthn-session--form\")[:action]\n       end\n@@ -322,106 +380,162 @@ class PasswordsControllerTest < ActionController::TestCase\n       @old_encrypted_password = @user.encrypted_password\n     end\n \n-    context \"with reset_api_key and invalid password\" do\n+    context \"when not signed in\" do\n       setup do\n         put :update, params: {\n           user_id: @user.id,\n           token: @user.confirmation_token,\n-          password_reset: { reset_api_key: \"true\", password: \"pass\" }\n+          password_reset: { reset_api_key: \"true\", reset_api_keys: \"true\", password: PasswordHelpers::SECURE_TEST_PASSWORD }\n         }\n       end\n \n-      should respond_with :success\n+      should redirect_to(\"the sign in page\") { sign_in_path }\n \n       should \"not change api_key\" do\n         assert_equal(@user.reload.api_key, @api_key)\n       end\n       should \"not change password\" do\n         assert_equal(@user.reload.encrypted_password, @old_encrypted_password)\n       end\n+      should \"not sign in the user\" do\n+        refute_predicate @controller.request.env[:clearance], :signed_in?\n+      end\n     end\n \n-    context \"without reset_api_key and valid password\" do\n+    context \"when signed in\" do\n       setup do\n-        put :update, params: {\n-          user_id: @user.id,\n-          token: @user.confirmation_token,\n-          password_reset: { password: PasswordHelpers::SECURE_TEST_PASSWORD }\n-        }\n+        sign_in_as @user\n+        session[:verification] = 10.minutes.from_now\n+        session[:verified_user] = @user.id\n       end\n \n-      should respond_with :found\n-\n-      should \"not change api_key\" do\n-        assert_equal(@user.reload.api_key, @api_key)\n+      teardown do\n+        session[:verification] = nil\n+        session[:verified_user] = nil\n       end\n-      should \"change password\" do\n-        refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n-      end\n-    end\n \n-    context \"with reset_api_key false and valid password\" do\n-      setup do\n-        put :update, params: {\n-          user_id: @user.id,\n-          token: @user.confirmation_token,\n-          password_reset: { reset_api_key: \"false\", password: PasswordHelpers::SECURE_TEST_PASSWORD }\n-        }\n-      end\n+      context \"with invalid password\" do\n+        setup do\n+          put :update, params: {\n+            user_id: @user.id,\n+            token: @user.confirmation_token,\n+            password_reset: { reset_api_key: \"true\", password: \"pass\" }\n+          }\n+        end\n \n-      should respond_with :found\n+        should respond_with :success\n \n-      should \"not change api_key\" do\n-        assert_equal(@user.reload.api_key, @api_key)\n-      end\n-      should \"change password\" do\n-        refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n+        should \"not change api_key\" do\n+          assert_equal(@user.reload.api_key, @api_key)\n+        end\n+        should \"not change password\" do\n+          assert_equal(@user.reload.encrypted_password, @old_encrypted_password)\n+        end\n       end\n-    end\n \n-    context \"with reset_api_key and valid password\" do\n-      setup do\n-        put :update, params: {\n-          user_id: @user.id,\n-          token: @user.confirmation_token,\n-          password_reset: { reset_api_key: \"true\", password: PasswordHelpers::SECURE_TEST_PASSWORD }\n-        }\n-      end\n+      context \"with a valid password\" do\n+        context \"when verification has expired\" do\n+          setup do\n+            travel 16.minutes do\n+              put :update, params: {\n+                user_id: @user.id,\n+                token: @user.confirmation_token,\n+                password_reset: { password: PasswordHelpers::SECURE_TEST_PASSWORD }\n+              }\n+            end\n+          end\n \n-      should respond_with :found\n+          should set_flash[:alert]\n+          should redirect_to(\"the verification page\") { verify_session_path }\n \n-      should \"change api_key\" do\n-        refute_equal(@user.reload.api_key, @api_key)\n-      end\n-      should \"change password\" do\n-        refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n-      end\n-      should \"not delete new api key\" do\n-        refute_predicate @new_api_key.reload, :destroyed?\n-        refute_empty @user.reload.api_keys\n-      end\n-    end\n+          should \"not sign the user out\" do\n+            assert_predicate @controller.request.env[:clearance], :signed_in?\n+          end\n+        end\n \n-    context \"with reset_api_key and reset_api_keys and valid password\" do\n-      setup do\n-        put :update, params: {\n-          user_id: @user.id,\n-          token: @user.confirmation_token,\n-          password_reset: { reset_api_key: \"true\", reset_api_keys: \"true\", password: PasswordHelpers::SECURE_TEST_PASSWORD }\n-        }\n-      end\n+        context \"without reset_api_key\" do\n+          setup do\n+            put :update, params: {\n+              user_id: @user.id,\n+              token: @user.confirmation_token,\n+              password_reset: { password: PasswordHelpers::SECURE_TEST_PASSWORD }\n+            }\n+          end\n \n-      should respond_with :found\n+          should respond_with :found\n \n-      should \"change api_key\" do\n-        refute_equal(@user.reload.api_key, @api_key)\n-      end\n-      should \"change password\" do\n-        refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n-      end\n-      should \"expire new api key\" do\n-        assert_empty @user.reload.api_keys.unexpired\n-        refute_empty @user.reload.api_keys.expired\n+          should \"not change api_key\" do\n+            assert_equal(@user.reload.api_key, @api_key)\n+          end\n+          should \"change password\" do\n+            refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n+          end\n+        end\n+\n+        context \"with reset_api_key false\" do\n+          setup do\n+            put :update, params: {\n+              user_id: @user.id,\n+              token: @user.confirmation_token,\n+              password_reset: { reset_api_key: \"false\", password: PasswordHelpers::SECURE_TEST_PASSWORD }\n+            }\n+          end\n+\n+          should respond_with :found\n+\n+          should \"not change api_key\" do\n+            assert_equal(@user.reload.api_key, @api_key)\n+          end\n+          should \"change password\" do\n+            refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n+          end\n+        end\n+\n+        context \"with reset_api_key\" do\n+          setup do\n+            put :update, params: {\n+              user_id: @user.id,\n+              token: @user.confirmation_token,\n+              password_reset: { reset_api_key: \"true\", password: PasswordHelpers::SECURE_TEST_PASSWORD }\n+            }\n+          end\n+\n+          should respond_with :found\n+\n+          should \"change api_key\" do\n+            refute_equal(@user.reload.api_key, @api_key)\n+          end\n+          should \"change password\" do\n+            refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n+          end\n+          should \"not delete new api key\" do\n+            refute_predicate @new_api_key.reload, :destroyed?\n+            refute_empty @user.reload.api_keys\n+          end\n+        end\n+\n+        context \"with reset_api_key and reset_api_keys\" do\n+          setup do\n+            put :update, params: {\n+              user_id: @user.id,\n+              token: @user.confirmation_token,\n+              password_reset: { reset_api_key: \"true\", reset_api_keys: \"true\", password: PasswordHelpers::SECURE_TEST_PASSWORD }\n+            }\n+          end\n+\n+          should respond_with :found\n+\n+          should \"change api_key\" do\n+            refute_equal(@user.reload.api_key, @api_key)\n+          end\n+          should \"change password\" do\n+            refute_equal(@user.reload.encrypted_password, @old_encrypted_password)\n+          end\n+          should \"expire new api key\" do\n+            assert_empty @user.reload.api_keys.unexpired\n+            refute_empty @user.reload.api_keys.expired\n+          end\n+        end\n       end\n     end\n   end"
        },
        {
          "filename": "test/integration/password_reset_test.rb",
          "status": "modified",
          "additions": 31,
          "deletions": 3,
          "patch": "@@ -55,13 +55,36 @@ def forgot_password_with(email)\n \n     visit password_reset_link\n \n+    assert page.has_content?(\"Sign out\")\n+\n     fill_in \"Password\", with: \"\"\n     click_button \"Save this password\"\n \n     assert page.has_content? \"Password can't be blank.\"\n-    assert page.has_content? \"Sign in\"\n+    assert page.has_content? \"Reset password\"\n+\n+    # try again\n+    fill_in \"Password\", with: PasswordHelpers::SECURE_TEST_PASSWORD\n+    click_button \"Save this password\"\n+\n+    assert @user.reload.authenticated? PasswordHelpers::SECURE_TEST_PASSWORD\n+  end\n+\n+  test \"resetting a password but waiting too long after token auth\" do\n+    forgot_password_with @user.email\n+\n+    visit password_reset_link\n+\n+    fill_in \"Password\", with: PasswordHelpers::SECURE_TEST_PASSWORD\n+\n+    travel 16.minutes do\n+      click_button \"Save this password\"\n+\n+      assert page.has_content? \"verification has expired. Please verify again.\"\n+    end\n   end\n \n+\n   test \"resetting a password when signed in\" do\n     visit sign_in_path\n \n@@ -78,6 +101,8 @@ def forgot_password_with(email)\n \n     visit password_reset_link\n \n+    assert page.has_content?(\"Sign out\")\n+\n     fill_in \"Password\", with: PasswordHelpers::SECURE_TEST_PASSWORD\n     click_button \"Save this password\"\n \n@@ -90,13 +115,15 @@ def forgot_password_with(email)\n \n     visit password_reset_link\n \n+    refute page.has_content?(\"Sign out\")\n+\n     fill_in \"otp\", with: ROTP::TOTP.new(@user.totp_seed).now\n     click_button \"Authenticate\"\n \n+    assert page.has_content?(\"Sign out\")\n+\n     fill_in \"Password\", with: PasswordHelpers::SECURE_TEST_PASSWORD\n     click_button \"Save this password\"\n-\n-    assert page.has_content?(\"Sign out\")\n   end\n \n   test \"resetting a password when mfa is enabled but mfa session is expired\" do\n@@ -141,6 +168,7 @@ def forgot_password_with(email)\n \n     visit password_reset_link\n \n+    refute page.has_content? \"Sign out\"\n     assert page.has_content? \"Multi-factor authentication\"\n     assert page.has_content? \"Security Device\"\n     assert page.has_content? \"Recovery code\""
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 9,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e50cfbe2d08007b1bdee00ce51105284ab4624ce",
            "date": "2025-01-24T21:25:32Z",
            "author_login": "segiddins"
          },
          {
            "sha": "20dec0ed54c053b677e5ada781745bcc4853de1a",
            "date": "2025-01-24T17:41:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "4490dbb163ca48393c3f113fcc3191153f5807b2",
            "date": "2025-01-24T17:40:33Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "06c4e9844419326fd80a19f20ec46fce9f4dea07",
            "date": "2025-01-23T19:20:59Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3b8afdb3adf02468fbca67c03a7a123a69ddeb0a",
            "date": "2025-01-23T15:04:42Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-287",
    "description": "Rubygems.org is the Ruby community's gem hosting service. Rubygems.org users with MFA enabled would normally be protected from account takeover in the case of email account takeover. However, a workaround on the forgotten password form allows an attacker to bypass the MFA requirement and takeover the account. This vulnerability has been patched in commit 0b3272a.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-01-12T21:15:11.287",
    "last_modified": "2024-11-21T08:54:48.690",
    "fix_date": "2023-12-22T19:53:04Z"
  },
  "references": [
    {
      "url": "https://github.com/rubygems/rubygems.org/commit/0b3272ac17b45748ee0d1867c49867c7deb26565",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rubygems/rubygems.org/security/advisories/GHSA-4v23-vj8h-7jp2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/rubygems/rubygems.org/commit/0b3272ac17b45748ee0d1867c49867c7deb26565",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rubygems/rubygems.org/security/advisories/GHSA-4v23-vj8h-7jp2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.170165",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "rubygems.org",
    "owner": "rubygems",
    "created_at": "2009-01-29T22:30:46Z",
    "updated_at": "2025-01-24T21:25:38Z",
    "pushed_at": "2025-01-24T21:25:33Z",
    "size": 24539,
    "stars": 2343,
    "forks": 934,
    "open_issues": 88,
    "watchers": 2343,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Ruby": 2182577,
      "HTML": 342328,
      "CSS": 77662,
      "JavaScript": 33997,
      "Shell": 7867,
      "Dockerfile": 4095
    },
    "commit_activity": {
      "total_commits_last_year": 1033,
      "avg_commits_per_week": 19.865384615384617,
      "days_active_last_year": 266
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:34:31.206941"
  }
}