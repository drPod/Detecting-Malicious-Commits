{
  "cve_id": "CVE-2024-22051",
  "github_data": {
    "repository": "gjtorikian/commonmarker",
    "fix_commit": "ab4504fd17460627a6ab255bc3c63e8e5fc6aed3",
    "related_commits": [
      "ab4504fd17460627a6ab255bc3c63e8e5fc6aed3",
      "ab4504fd17460627a6ab255bc3c63e8e5fc6aed3"
    ],
    "patch_url": "https://github.com/gjtorikian/commonmarker/commit/ab4504fd17460627a6ab255bc3c63e8e5fc6aed3.patch",
    "fix_commit_details": {
      "sha": "ab4504fd17460627a6ab255bc3c63e8e5fc6aed3",
      "commit_date": "2022-03-02T23:51:09Z",
      "author": {
        "login": "gjtorikian",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-fmx4-26r3-wxpf",
        "length": 113,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 38,
        "additions": 32,
        "deletions": 6
      },
      "files": [
        {
          "filename": "ext/commonmarker/cmark-gfm_version.h",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,7 +1,7 @@\n #ifndef CMARK_GFM_VERSION_H\n #define CMARK_GFM_VERSION_H\n \n-#define CMARK_GFM_VERSION ((0 << 24) | (29 << 16) | (0 << 8) | 2)\n-#define CMARK_GFM_VERSION_STRING \"0.29.0.gfm.2\"\n+#define CMARK_GFM_VERSION ((0 << 24) | (29 << 16) | (0 << 8) | 3)\n+#define CMARK_GFM_VERSION_STRING \"0.29.0.gfm.3\"\n \n #endif"
        },
        {
          "filename": "ext/commonmarker/cmark-upstream",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-Subproject commit 766f161ef6d61019acf3a69f5099489e7d14cd49\n+Subproject commit ff164f188bc1eb23391c85436ab418463e7a030f"
        },
        {
          "filename": "ext/commonmarker/table.c",
          "status": "modified",
          "additions": 28,
          "deletions": 2,
          "patch": "@@ -129,6 +129,7 @@ static table_row *row_from_string(cmark_syntax_extension *self,\n   bufsize_t cell_matched = 1, pipe_matched = 1, offset;\n   int expect_more_cells = 1;\n   int row_end_offset = 0;\n+  int int_overflow_abort = 0;\n \n   row = (table_row *)parser->mem->calloc(1, sizeof(table_row));\n   row->n_columns = 0;\n@@ -161,6 +162,12 @@ static table_row *row_from_string(cmark_syntax_extension *self,\n         ++cell->internal_offset;\n       }\n \n+      // make sure we never wrap row->n_columns\n+      // offset will != len and our exit will clean up as intended\n+      if (row->n_columns == UINT16_MAX) {\n+          int_overflow_abort = 1;\n+          break;\n+      }\n       row->n_columns += 1;\n       row->cells = cmark_llist_append(parser->mem, row->cells, cell);\n     }\n@@ -194,7 +201,7 @@ static table_row *row_from_string(cmark_syntax_extension *self,\n     }\n   }\n \n-  if (offset != len || row->n_columns == 0) {\n+  if (offset != len || row->n_columns == 0 || int_overflow_abort) {\n     free_table_row(parser->mem, row);\n     row = NULL;\n   }\n@@ -241,6 +248,11 @@ static cmark_node *try_opening_table_header(cmark_syntax_extension *self,\n   marker_row = row_from_string(self, parser,\n                                input + cmark_parser_get_first_nonspace(parser),\n                                len - cmark_parser_get_first_nonspace(parser));\n+  // assert may be optimized out, don't rely on it for security boundaries\n+  if (!marker_row) {\n+      return parent_container;\n+  }\n+  \n   assert(marker_row);\n \n   cmark_arena_push();\n@@ -264,6 +276,12 @@ static cmark_node *try_opening_table_header(cmark_syntax_extension *self,\n         len - cmark_parser_get_first_nonspace(parser));\n     header_row = row_from_string(self, parser, (unsigned char *)parent_string,\n                                  (int)strlen(parent_string));\n+    // row_from_string can return NULL, add additional check to ensure n_columns match\n+    if (!marker_row || !header_row || header_row->n_columns != marker_row->n_columns) {\n+        free_table_row(parser->mem, marker_row);\n+        free_table_row(parser->mem, header_row);\n+        return parent_container;\n+    }\n   }\n \n   if (!cmark_node_set_type(parent_container, CMARK_NODE_TABLE)) {\n@@ -281,8 +299,10 @@ static cmark_node *try_opening_table_header(cmark_syntax_extension *self,\n   parent_container->as.opaque = parser->mem->calloc(1, sizeof(node_table));\n   set_n_table_columns(parent_container, header_row->n_columns);\n \n+  // allocate alignments based on marker_row->n_columns\n+  // since we populate the alignments array based on marker_row->cells\n   uint8_t *alignments =\n-      (uint8_t *)parser->mem->calloc(header_row->n_columns, sizeof(uint8_t));\n+      (uint8_t *)parser->mem->calloc(marker_row->n_columns, sizeof(uint8_t));\n   cmark_llist *it = marker_row->cells;\n   for (i = 0; it; it = it->next, ++i) {\n     node_cell *node = (node_cell *)it->data;\n@@ -351,6 +371,12 @@ static cmark_node *try_opening_table_row(cmark_syntax_extension *self,\n   row = row_from_string(self, parser, input + cmark_parser_get_first_nonspace(parser),\n       len - cmark_parser_get_first_nonspace(parser));\n \n+  if (!row) {\n+      // clean up the dangling node\n+      cmark_node_free(table_row_block);\n+      return NULL;\n+  }\n+\n   {\n     cmark_llist *tmp;\n     int i, table_columns = get_n_table_columns(parent_container);"
        },
        {
          "filename": "lib/commonmarker/version.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n # frozen_string_literal: true\n \n module CommonMarker\n-  VERSION = '0.23.2'\n+  VERSION = '0.23.3'\n end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4ca4b73c77e6ac83604f9cd6dce1b24922c3e2da",
            "date": "2025-01-14T15:34:29Z",
            "author_login": "gjtorikian"
          },
          {
            "sha": "14048b0eec8f165c4ea4a94dcaa89ae2eb195a6a",
            "date": "2025-01-14T11:24:40Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "dd7317edbc240773aceb9f6e5a6e225baf95c0ce",
            "date": "2025-01-13T14:03:45Z",
            "author_login": "gjtorikian"
          },
          {
            "sha": "b558cc179d461a5a8f1428c8b6140d4af0dc2ef9",
            "date": "2025-01-13T11:23:00Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b495f00280a85d3084b2479442829681de65e655",
            "date": "2025-01-08T15:37:20Z",
            "author_login": "gjtorikian"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-190",
    "description": "CommonMarker versions prior to 0.23.4 are at risk of an integer overflow vulnerability. This vulnerability can result in possibly unauthenticated remote attackers to cause heap memory corruption, potentially leading to an information leak or remote code execution, via parsing tables with marker rows that contain more than UINT16_MAX columns.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-04T21:15:10.173",
    "last_modified": "2024-11-21T08:55:27.970",
    "fix_date": "2022-03-02T23:51:09Z"
  },
  "references": [
    {
      "url": "https://github.com/advisories/GHSA-fmx4-26r3-wxpf",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/gjtorikian/commonmarker/commit/ab4504fd17460627a6ab255bc3c63e8e5fc6aed3",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gjtorikian/commonmarker/security/advisories/GHSA-fmx4-26r3-wxpf",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://vulncheck.com/advisories/vc-advisory-GHSA-fmx4-26r3-wxpf",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/advisories/GHSA-fmx4-26r3-wxpf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/gjtorikian/commonmarker/commit/ab4504fd17460627a6ab255bc3c63e8e5fc6aed3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gjtorikian/commonmarker/security/advisories/GHSA-fmx4-26r3-wxpf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://vulncheck.com/advisories/vc-advisory-GHSA-fmx4-26r3-wxpf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.136919",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "commonmarker",
    "owner": "gjtorikian",
    "created_at": "2015-05-07T04:06:29Z",
    "updated_at": "2025-01-14T15:34:34Z",
    "pushed_at": "2025-01-14T15:34:31Z",
    "size": 4283,
    "stars": 443,
    "forks": 85,
    "open_issues": 4,
    "watchers": 443,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Rust": 63760,
      "Ruby": 56330,
      "Shell": 220
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T23:03:32.926054"
  }
}