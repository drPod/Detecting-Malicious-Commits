{
  "cve_id": "CVE-2024-2213",
  "github_data": {
    "repository": "zenml-io/zenml",
    "fix_commit": "58cb3d987372c91eb605853c35325701733337c2",
    "related_commits": [
      "58cb3d987372c91eb605853c35325701733337c2",
      "58cb3d987372c91eb605853c35325701733337c2"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "58cb3d987372c91eb605853c35325701733337c2",
      "commit_date": "2024-04-09T07:22:03Z",
      "author": {
        "login": "stefannica",
        "type": "User",
        "stats": {
          "total_commits": 542,
          "average_weekly_commits": 2.463636363636364,
          "total_additions": 416691,
          "total_deletions": 247763,
          "weeks_active": 124
        }
      },
      "commit_message": {
        "title": "Check old password during password change and add missing CLI commands (#2587)",
        "length": 407,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 307,
        "additions": 273,
        "deletions": 34
      },
      "files": [
        {
          "filename": "src/zenml/cli/server.py",
          "status": "modified",
          "additions": 19,
          "deletions": 20,
          "patch": "@@ -32,7 +32,7 @@\n from zenml.config.global_config import GlobalConfiguration\n from zenml.console import console\n from zenml.enums import ServerProviderType, StoreType\n-from zenml.exceptions import IllegalOperationError\n+from zenml.exceptions import AuthorizationException, IllegalOperationError\n from zenml.logger import get_logger\n from zenml.utils import terraform_utils, yaml_utils\n from zenml.zen_server.utils import get_active_deployment\n@@ -624,12 +624,6 @@ def status() -> None:\n     required=False,\n     type=str,\n )\n-@click.option(\n-    \"--workspace\",\n-    help=\"The workspace to use when connecting to the ZenML server.\",\n-    required=False,\n-    type=str,\n-)\n @click.option(\n     \"--no-verify-ssl\",\n     is_flag=True,\n@@ -661,7 +655,6 @@ def connect(\n     username: Optional[str] = None,\n     password: Optional[str] = None,\n     api_key: Optional[str] = None,\n-    workspace: Optional[str] = None,\n     no_verify_ssl: bool = False,\n     ssl_ca_cert: Optional[str] = None,\n     config: Optional[str] = None,\n@@ -677,8 +670,6 @@ def connect(\n             server.\n         api_key: The API key that is used to authenticate with the ZenML\n             server.\n-        workspace: The active workspace that is used to connect to the ZenML\n-            server.\n         no_verify_ssl: Whether to verify the server's TLS certificate.\n         ssl_ca_cert: A path to a CA bundle to use to verify the server's TLS\n             certificate or the CA bundle value itself.\n@@ -689,6 +680,12 @@ def connect(\n     from zenml.config.store_config import StoreConfiguration\n     from zenml.zen_stores.base_zen_store import BaseZenStore\n \n+    if password is not None:\n+        cli_utils.warning(\n+            \"Supplying password values in the command line is not safe. \"\n+            \"Please consider using the prompt option.\"\n+        )\n+\n     # Raise an error if a local server is running when trying to connect to\n     # another server\n     active_deployment = get_active_deployment(local=True)\n@@ -767,6 +764,16 @@ def connect(\n             username = click.prompt(\"Username\", type=str)\n \n     if username:\n+        cli_utils.warning(\n+            \"Connecting to a ZenML server using a username and password is \"\n+            \"not recommended because the password is locally stored on your \"\n+            \"filesystem. You should consider using the web login workflow by \"\n+            \"omitting the `--username` and `--password` flags. An alternative \"\n+            \"for non-interactive environments is to create and use a service \"\n+            \"account API key (see https://docs.zenml.io/user-guide/advanced-guide/configuring-zenml/connecting-to-zenml#using-service-accounts-to-connect-to-a-deployed-zenml-server \"\n+            \"for more information).\"\n+        )\n+\n         store_dict[\"username\"] = username\n \n         if password is None:\n@@ -790,16 +797,8 @@ def connect(\n             f\"User '{username}' does not have sufficient permissions to \"\n             f\"access the server at '{url}'.\"\n         )\n-\n-    if workspace:\n-        try:\n-            Client().set_active_workspace(workspace_name_or_id=workspace)\n-        except KeyError:\n-            cli_utils.warning(\n-                f\"The workspace {workspace} does not exist or is not accessible. \"\n-                f\"Please set another workspace by running `zenml \"\n-                f\"workspace set`.\"\n-            )\n+    except AuthorizationException as e:\n+        cli_utils.warning(f\"Authorization error: {e}\")\n \n \n @cli.command(\"disconnect\", help=\"Disconnect from a ZenML server.\")"
        },
        {
          "filename": "src/zenml/cli/user_management.py",
          "status": "modified",
          "additions": 148,
          "deletions": 13,
          "patch": "@@ -21,9 +21,14 @@\n from zenml.cli.cli import TagGroup, cli\n from zenml.cli.utils import is_sorted_or_filtered, list_options\n from zenml.client import Client\n+from zenml.config.global_config import GlobalConfiguration\n from zenml.console import console\n from zenml.enums import CliCategories, StoreType\n-from zenml.exceptions import EntityExistsError, IllegalOperationError\n+from zenml.exceptions import (\n+    AuthorizationException,\n+    EntityExistsError,\n+    IllegalOperationError,\n+)\n from zenml.models import UserFilter\n \n \n@@ -156,6 +161,11 @@ def create_user(\n                 default=\"\",\n                 hide_input=True,\n             )\n+    else:\n+        cli_utils.warning(\n+            \"Supplying password values in the command line is not safe. \"\n+            \"Please consider using the prompt option.\"\n+        )\n \n     try:\n         new_user = client.create_user(\n@@ -204,14 +214,6 @@ def create_user(\n     required=False,\n     help=\"New user email.\",\n )\n-@click.option(\n-    \"--password\",\n-    \"-p\",\n-    \"updated_password\",\n-    type=str,\n-    required=False,\n-    help=\"New user password.\",\n-)\n @click.option(\n     \"--admin\",\n     \"-a\",\n@@ -230,14 +232,22 @@ def create_user(\n     default=None,\n     help=\"Whether the user should be a regular user.\",\n )\n+@click.option(\n+    \"--active\",\n+    \"active\",\n+    type=bool,\n+    required=False,\n+    default=None,\n+    help=\"Use to activate or deactivate a user account.\",\n+)\n def update_user(\n     user_name_or_id: str,\n     updated_name: Optional[str] = None,\n     updated_full_name: Optional[str] = None,\n     updated_email: Optional[str] = None,\n-    updated_password: Optional[str] = None,\n     make_admin: Optional[bool] = None,\n     make_user: Optional[bool] = None,\n+    active: Optional[bool] = None,\n ) -> None:\n     \"\"\"Update an existing user.\n \n@@ -246,9 +256,9 @@ def update_user(\n         updated_name: The name of the user to create.\n         updated_full_name: The name of the user to create.\n         updated_email: The name of the user to create.\n-        updated_password: The name of the user to create.\n         make_admin: Whether the user should be an admin.\n         make_user: Whether the user should be a regular user.\n+        active: Use to activate or deactivate a user account.\n     \"\"\"\n     if make_admin is not None and make_user is not None:\n         cli_utils.error(\n@@ -260,7 +270,8 @@ def update_user(\n         )\n         if current_user.is_admin and make_user:\n             confirmation = cli_utils.confirmation(\n-                f\"Currently user `{current_user.name}` is an admin. Are you sure you want to make them a regular user?\"\n+                f\"Currently user `{current_user.name}` is an admin. Are you \"\n+                \"sure you want to make them a regular user?\"\n             )\n             if not confirmation:\n                 cli_utils.declare(\"User update canceled.\")\n@@ -276,13 +287,137 @@ def update_user(\n             updated_name=updated_name,\n             updated_full_name=updated_full_name,\n             updated_email=updated_email,\n-            updated_password=updated_password,\n             updated_is_admin=updated_is_admin,\n+            active=active,\n         )\n     except (KeyError, IllegalOperationError) as err:\n         cli_utils.error(str(err))\n \n \n+@user.command(\n+    \"change-password\",\n+    help=\"Change the password for the current user account.\",\n+)\n+@click.option(\n+    \"--password\",\n+    help=(\n+        \"The new user password. If omitted, a prompt will be shown to enter \"\n+        \"the password.\"\n+    ),\n+    required=False,\n+    type=str,\n+)\n+@click.option(\n+    \"--old-password\",\n+    help=(\n+        \"The old user password. If omitted, a prompt will be shown to enter \"\n+        \"the old password.\"\n+    ),\n+    required=False,\n+    type=str,\n+)\n+def change_user_password(\n+    password: Optional[str] = None, old_password: Optional[str] = None\n+) -> None:\n+    \"\"\"Change the password of the current user.\n+\n+    Args:\n+        password: The new password for the current user.\n+        old_password: The old password for the current user.\n+    \"\"\"\n+    active_user = Client().active_user\n+\n+    if old_password is not None or password is not None:\n+        cli_utils.warning(\n+            \"Supplying password values in the command line is not safe. \"\n+            \"Please consider using the prompt option.\"\n+        )\n+\n+    if old_password is None:\n+        old_password = click.prompt(\n+            f\"Current password for user {active_user.name}\",\n+            hide_input=True,\n+        )\n+    if password is None:\n+        password = click.prompt(\n+            f\"New password for user {active_user.name}\",\n+            hide_input=True,\n+        )\n+        password_again = click.prompt(\n+            f\"Please re-enter the new password for user {active_user.name}\",\n+            hide_input=True,\n+        )\n+        if password != password_again:\n+            cli_utils.error(\"Passwords do not match.\")\n+\n+    try:\n+        Client().update_user(\n+            name_id_or_prefix=active_user.id,\n+            old_password=old_password,\n+            updated_password=password,\n+        )\n+    except (KeyError, IllegalOperationError, AuthorizationException) as err:\n+        cli_utils.error(str(err))\n+\n+    cli_utils.declare(\n+        f\"Successfully updated password for active user '{active_user.name}'.\"\n+    )\n+\n+    store = GlobalConfiguration().store_configuration\n+    if store.type == StoreType.REST:\n+        from zenml.zen_stores.rest_zen_store import RestZenStoreConfiguration\n+\n+        assert isinstance(store, RestZenStoreConfiguration)\n+\n+        if store.password is not None:\n+            cli_utils.declare(\n+                \"You may need to log in again with your new password by \"\n+                \"running `zenml connect`.\"\n+            )\n+\n+\n+@user.command(\n+    \"deactivate\",\n+    help=\"Generate an activation token to reset the password for a user account\",\n+)\n+@click.argument(\"user_name_or_id\", type=str, required=True)\n+def deactivate_user(\n+    user_name_or_id: str,\n+) -> None:\n+    \"\"\"Reset the password of a user.\n+\n+    Args:\n+        user_name_or_id: The name or ID of the user to reset the password for.\n+    \"\"\"\n+    client = Client()\n+\n+    store = GlobalConfiguration().store_configuration\n+    if store.type != StoreType.REST:\n+        cli_utils.error(\n+            \"Deactivating users is only supported when connected to a ZenML \"\n+            \"server.\"\n+        )\n+\n+    try:\n+        if not client.active_user.is_admin:\n+            cli_utils.error(\n+                \"Only admins can reset the password of other users.\"\n+            )\n+\n+        user = client.deactivate_user(\n+            name_id_or_prefix=user_name_or_id,\n+        )\n+    except (KeyError, IllegalOperationError) as err:\n+        cli_utils.error(str(err))\n+\n+    cli_utils.declare(\n+        f\"Successfully deactivated user account '{user.name}'.\"\n+        f\"To reactivate the account, please visit the dashboard at the \"\n+        \"following URL:\\n\"\n+        f\"{client.zen_store.url}/signup?user={str(user.id)}&username={user.name}&token={user.activation_token}\\n\"\n+    )\n+\n+\n @user.command(\"delete\")\n @click.argument(\"user_name_or_id\", type=str, required=True)\n def delete_user(user_name_or_id: str) -> None:"
        },
        {
          "filename": "src/zenml/client.py",
          "status": "modified",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -814,7 +814,9 @@ def update_user(\n         updated_email_opt_in: Optional[bool] = None,\n         updated_hub_token: Optional[str] = None,\n         updated_password: Optional[str] = None,\n+        old_password: Optional[str] = None,\n         updated_is_admin: Optional[bool] = None,\n+        active: Optional[bool] = None,\n     ) -> UserResponse:\n         \"\"\"Update a user.\n \n@@ -826,10 +828,17 @@ def update_user(\n             updated_email_opt_in: The new email opt-in status of the user.\n             updated_hub_token: Update the hub token\n             updated_password: The new password of the user.\n+            old_password: The old password of the user. Required for password\n+                update.\n             updated_is_admin: Whether the user should be an admin.\n+            active: Use to activate or deactivate the user.\n \n         Returns:\n             The updated user.\n+\n+        Raises:\n+            ValidationError: If the old password is not provided when updating\n+                the password.\n         \"\"\"\n         user = self.get_user(\n             name_id_or_prefix=name_id_or_prefix, allow_name_prefix_match=False\n@@ -848,13 +857,36 @@ def update_user(\n             user_update.hub_token = updated_hub_token\n         if updated_password is not None:\n             user_update.password = updated_password\n+            if old_password is None:\n+                raise ValidationError(\n+                    \"Old password is required to update the password.\"\n+                )\n+            user_update.old_password = old_password\n         if updated_is_admin is not None:\n             user_update.is_admin = updated_is_admin\n+        if active is not None:\n+            user_update.active = active\n \n         return self.zen_store.update_user(\n             user_id=user.id, user_update=user_update\n         )\n \n+    @_fail_for_sql_zen_store\n+    def deactivate_user(self, name_id_or_prefix: str) -> \"UserResponse\":\n+        \"\"\"Deactivate a user and generate an activation token.\n+\n+        Args:\n+            name_id_or_prefix: The name or ID of the user to reset.\n+\n+        Returns:\n+            The deactivated user.\n+        \"\"\"\n+        from zenml.zen_stores.rest_zen_store import RestZenStore\n+\n+        user = self.get_user(name_id_or_prefix, allow_name_prefix_match=False)\n+        assert isinstance(self.zen_store, RestZenStore)\n+        return self.zen_store.deactivate_user(user_name_or_id=user.name)\n+\n     def delete_user(self, name_id_or_prefix: str) -> None:\n         \"\"\"Delete a user.\n "
        },
        {
          "filename": "src/zenml/models/v2/core/user.py",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -201,6 +201,12 @@ class UserUpdate(UserBase, BaseZenModel):\n     active: Optional[bool] = Field(\n         default=None, title=\"Whether the account is active.\"\n     )\n+    old_password: Optional[str] = Field(\n+        default=None,\n+        title=\"The previous password for the user. Only relevant for user \"\n+        \"accounts. Required when updating the password.\",\n+        max_length=STR_FIELD_MAX_LENGTH,\n+    )\n \n     @root_validator\n     def user_email_updates(cls, values: Dict[str, Any]) -> Dict[str, Any]:"
        },
        {
          "filename": "src/zenml/zen_server/routers/users_endpoints.py",
          "status": "modified",
          "additions": 47,
          "deletions": 1,
          "patch": "@@ -32,6 +32,7 @@\n from zenml.logger import get_logger\n from zenml.models import (\n     Page,\n+    UserAuthModel,\n     UserFilter,\n     UserRequest,\n     UserResponse,\n@@ -253,7 +254,10 @@ def update_user(\n \n         Raises:\n             IllegalOperationError: if the user tries change admin status,\n-                while not an admin\n+                while not an admin, if the user tries to change the password\n+                of another user, or if the user tries to change their own\n+                password without providing the old password or providing\n+                an incorrect old password.\n         \"\"\"\n         user = zen_store().get_user(user_name_or_id)\n         if user.id != auth_context.user.id:\n@@ -264,6 +268,29 @@ def update_user(\n                 user,\n                 action=Action.UPDATE,\n             )\n+\n+            if user_update.password is not None:\n+                raise IllegalOperationError(\n+                    \"Users cannot change the password of other users. Use the \"\n+                    \"account deactivation and activation flow instead.\"\n+                )\n+\n+        elif user_update.password is not None:\n+            # If the user is updating their own password, we need to verify\n+            # the old password\n+            if user_update.old_password is None:\n+                raise IllegalOperationError(\n+                    \"The current password must be supplied when changing the \"\n+                    \"password.\"\n+                )\n+            auth_user = zen_store().get_auth_user(user_name_or_id)\n+            if not UserAuthModel.verify_password(\n+                user_update.old_password, auth_user\n+            ):\n+                raise IllegalOperationError(\n+                    \"The current password is incorrect.\"\n+                )\n+\n         if (\n             user_update.is_admin is not None\n             and user.is_admin != user_update.is_admin\n@@ -512,8 +539,27 @@ def update_myself(\n \n         Returns:\n             The updated user.\n+\n+        Raises:\n+            IllegalOperationError: if the current password is not supplied when\n+                changing the password or if the current password is incorrect.\n         \"\"\"\n         current_user = zen_store().get_user(auth_context.user.id)\n+\n+        if user.password is not None:\n+            # If the user is updating their password, we need to verify\n+            # the old password\n+            if user.old_password is None:\n+                raise IllegalOperationError(\n+                    \"The current password must be supplied when changing the \"\n+                    \"password.\"\n+                )\n+            auth_user = zen_store().get_auth_user(auth_context.user.id)\n+            if not UserAuthModel.verify_password(user.old_password, auth_user):\n+                raise IllegalOperationError(\n+                    \"The current password is incorrect.\"\n+                )\n+\n         user.activation_token = current_user.activation_token\n         user.active = current_user.active\n         user.is_admin = current_user.is_admin"
        },
        {
          "filename": "src/zenml/zen_stores/rest_zen_store.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -50,6 +50,7 @@\n     CODE_REFERENCES,\n     CODE_REPOSITORIES,\n     CURRENT_USER,\n+    DEACTIVATE,\n     DEFAULT_HTTP_TIMEOUT,\n     DEVICES,\n     DISABLE_CLIENT_SERVER_MISMATCH_WARNING,\n@@ -2943,6 +2944,23 @@ def update_user(\n             response_model=UserResponse,\n         )\n \n+    def deactivate_user(\n+        self, user_name_or_id: Union[str, UUID]\n+    ) -> UserResponse:\n+        \"\"\"Deactivates a user.\n+\n+        Args:\n+            user_name_or_id: The name or ID of the user to delete.\n+\n+        Returns:\n+            The deactivated user containing the activation token.\n+        \"\"\"\n+        response_body = self.put(\n+            f\"{USERS}/{str(user_name_or_id)}{DEACTIVATE}\",\n+        )\n+\n+        return UserResponse.parse_obj(response_body)\n+\n     def delete_user(self, user_name_or_id: Union[str, UUID]) -> None:\n         \"\"\"Deletes a user.\n "
        },
        {
          "filename": "src/zenml/zen_stores/schemas/user_schemas.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -206,6 +206,9 @@ def update_user(self, user_update: UserUpdate) -> \"UserSchema\":\n             The updated `UserSchema`.\n         \"\"\"\n         for field, value in user_update.dict(exclude_unset=True).items():\n+            if field == \"old_password\":\n+                continue\n+\n             if field == \"password\":\n                 setattr(self, field, user_update.create_hashed_password())\n             elif field == \"activation_token\":"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9a66334a60f51b79706e49b336c1d2c2d5873195",
            "date": "2025-01-23T09:36:11Z",
            "author_login": "bcdurak"
          },
          {
            "sha": "eb2ee3a5ad5ebd4ff61c267a8e49573fb440e91a",
            "date": "2025-01-21T20:44:30Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "dd91059487726ca3be42ab1bc879d92bd9fba2d4",
            "date": "2025-01-21T13:51:18Z",
            "author_login": "wjayesh"
          },
          {
            "sha": "fec095633b2750575b7a043ca761ed4bb497e73b",
            "date": "2025-01-21T13:29:47Z",
            "author_login": "wjayesh"
          },
          {
            "sha": "ffa4ec32929d5e008f4bba3116f1bbc8134326e5",
            "date": "2025-01-21T13:20:33Z",
            "author_login": "stefannica"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-287",
    "description": "An issue was discovered in zenml-io/zenml versions up to and including 0.55.4. Due to improper authentication mechanisms, an attacker with access to an active user session can change the account password without needing to know the current password. This vulnerability allows for unauthorized account takeover by bypassing the standard password change verification process. The issue was fixed in version 0.56.3.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-06T19:15:53.890",
    "last_modified": "2024-11-21T09:09:16.143",
    "fix_date": "2024-04-09T07:22:03Z"
  },
  "references": [
    {
      "url": "https://github.com/zenml-io/zenml/commit/58cb3d987372c91eb605853c35325701733337c2",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/8f5534ac-fd08-4b8b-8c2e-35949aa36e48",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zenml-io/zenml/commit/58cb3d987372c91eb605853c35325701733337c2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/8f5534ac-fd08-4b8b-8c2e-35949aa36e48",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.346832",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "zenml",
    "owner": "zenml-io",
    "created_at": "2020-11-19T09:25:46Z",
    "updated_at": "2025-01-25T16:35:19Z",
    "pushed_at": "2025-01-26T06:20:26Z",
    "size": 570246,
    "stars": 4352,
    "forks": 467,
    "open_issues": 36,
    "watchers": 4352,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 9352583,
      "Shell": 44542,
      "Smarty": 21416,
      "Dockerfile": 19050,
      "Jinja": 4977,
      "HTML": 2568,
      "Mako": 695
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:36:10.634921"
  }
}