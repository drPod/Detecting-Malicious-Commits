{
  "cve_id": "CVE-2024-22189",
  "github_data": {
    "repository": "quic-go/quic-go",
    "fix_commit": "4a99b816ae3ab03ae5449d15aac45147c85ed47a",
    "related_commits": [
      "4a99b816ae3ab03ae5449d15aac45147c85ed47a",
      "4a99b816ae3ab03ae5449d15aac45147c85ed47a"
    ],
    "patch_url": "https://github.com/quic-go/quic-go/commit/4a99b816ae3ab03ae5449d15aac45147c85ed47a.patch",
    "fix_commit_details": {
      "sha": "4a99b816ae3ab03ae5449d15aac45147c85ed47a",
      "commit_date": "2024-03-18T00:29:00Z",
      "author": {
        "login": "marten-seemann",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "close connection when an abnormally large number of frames are queued (#4369)",
        "length": 307,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 48,
        "additions": 44,
        "deletions": 4
      },
      "files": [
        {
          "filename": "connection.go",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -521,6 +521,9 @@ func (s *connection) run() error {\n \n runLoop:\n \tfor {\n+\t\tif s.framer.QueuedTooManyControlFrames() {\n+\t\t\ts.closeLocal(&qerr.TransportError{ErrorCode: InternalError})\n+\t\t}\n \t\t// Close immediately if requested\n \t\tselect {\n \t\tcase closeErr = <-s.closeChan:"
        },
        {
          "filename": "framer.go",
          "status": "modified",
          "additions": 24,
          "deletions": 4,
          "patch": "@@ -21,9 +21,19 @@ type framer interface {\n \tAppendStreamFrames([]ackhandler.StreamFrame, protocol.ByteCount, protocol.Version) ([]ackhandler.StreamFrame, protocol.ByteCount)\n \n \tHandle0RTTRejection() error\n+\n+\t// QueuedTooManyControlFrames says if the control frame queue exceeded its maximum queue length.\n+\t// This is a hack.\n+\t// It is easier to implement than propagating an error return value in QueueControlFrame.\n+\t// The correct solution would be to queue frames with their respective structs.\n+\t// See https://github.com/quic-go/quic-go/issues/4271 for the queueing of stream-related control frames.\n+\tQueuedTooManyControlFrames() bool\n }\n \n-const maxPathResponses = 256\n+const (\n+\tmaxPathResponses = 256\n+\tmaxControlFrames = 16 << 10\n+)\n \n type framerI struct {\n \tmutex sync.Mutex\n@@ -33,9 +43,10 @@ type framerI struct {\n \tactiveStreams map[protocol.StreamID]struct{}\n \tstreamQueue   ringbuffer.RingBuffer[protocol.StreamID]\n \n-\tcontrolFrameMutex sync.Mutex\n-\tcontrolFrames     []wire.Frame\n-\tpathResponses     []*wire.PathResponseFrame\n+\tcontrolFrameMutex          sync.Mutex\n+\tcontrolFrames              []wire.Frame\n+\tpathResponses              []*wire.PathResponseFrame\n+\tqueuedTooManyControlFrames bool\n }\n \n var _ framer = &framerI{}\n@@ -73,6 +84,11 @@ func (f *framerI) QueueControlFrame(frame wire.Frame) {\n \t\tf.pathResponses = append(f.pathResponses, pr)\n \t\treturn\n \t}\n+\t// This is a hack.\n+\tif len(f.controlFrames) >= maxControlFrames {\n+\t\tf.queuedTooManyControlFrames = true\n+\t\treturn\n+\t}\n \tf.controlFrames = append(f.controlFrames, frame)\n }\n \n@@ -105,6 +121,10 @@ func (f *framerI) AppendControlFrames(frames []ackhandler.Frame, maxLen protocol\n \treturn frames, length\n }\n \n+func (f *framerI) QueuedTooManyControlFrames() bool {\n+\treturn f.queuedTooManyControlFrames\n+}\n+\n func (f *framerI) AddActiveStream(id protocol.StreamID) {\n \tf.mutex.Lock()\n \tif _, ok := f.activeStreams[id]; !ok {"
        },
        {
          "filename": "framer_test.go",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -109,6 +109,23 @@ var _ = Describe(\"Framer\", func() {\n \t\t\tExpect(fs).To(HaveLen(2))\n \t\t\tExpect(length).To(Equal(ping.Length(version) + ncid.Length(version)))\n \t\t})\n+\n+\t\tIt(\"detects when too many frames are queued\", func() {\n+\t\t\tfor i := 0; i < maxControlFrames-1; i++ {\n+\t\t\t\tframer.QueueControlFrame(&wire.PingFrame{})\n+\t\t\t\tframer.QueueControlFrame(&wire.PingFrame{})\n+\t\t\t\tExpect(framer.QueuedTooManyControlFrames()).To(BeFalse())\n+\t\t\t\tframes, _ := framer.AppendControlFrames([]ackhandler.Frame{}, 1, protocol.Version1)\n+\t\t\t\tExpect(frames).To(HaveLen(1))\n+\t\t\t\tExpect(framer.(*framerI).controlFrames).To(HaveLen(i + 1))\n+\t\t\t}\n+\t\t\tframer.QueueControlFrame(&wire.PingFrame{})\n+\t\t\tExpect(framer.QueuedTooManyControlFrames()).To(BeFalse())\n+\t\t\tExpect(framer.(*framerI).controlFrames).To(HaveLen(maxControlFrames))\n+\t\t\tframer.QueueControlFrame(&wire.PingFrame{})\n+\t\t\tExpect(framer.QueuedTooManyControlFrames()).To(BeTrue())\n+\t\t\tExpect(framer.(*framerI).controlFrames).To(HaveLen(maxControlFrames))\n+\t\t})\n \t})\n \n \tContext(\"handling PATH_RESPONSE frames\", func() {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "62a94758e6725ea285443090c802157df86331b9",
            "date": "2025-01-14T08:40:20Z",
            "author_login": "marten-seemann"
          },
          {
            "sha": "fbbc3c9e3017064bc003a36079bd1470c7f18a09",
            "date": "2025-01-14T08:01:57Z",
            "author_login": "marten-seemann"
          },
          {
            "sha": "96ce54e83f2c8daba07bab99f086215b0b2dc74b",
            "date": "2025-01-14T04:50:16Z",
            "author_login": "lRoccoon"
          },
          {
            "sha": "516220b0c5cc21fd4c4cfc2079cbf46e09846276",
            "date": "2025-01-13T02:27:12Z",
            "author_login": "marten-seemann"
          },
          {
            "sha": "61adb85052c1c9e350bbbfb7ad7e7767aa2ea8bb",
            "date": "2025-01-13T02:02:13Z",
            "author_login": "marten-seemann"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "quic-go is an implementation of the QUIC protocol in Go. Prior to version 0.42.0, an attacker can cause its peer to run out of memory sending a large number of `NEW_CONNECTION_ID` frames that retire old connection IDs. The receiver is supposed to respond to each retirement frame with a `RETIRE_CONNECTION_ID` frame. The attacker can prevent the receiver from sending out (the vast majority of) these `RETIRE_CONNECTION_ID` frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate. Version 0.42.0 contains a patch for the issue. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-04T15:15:37.990",
    "last_modified": "2024-11-21T08:55:45.517",
    "fix_date": "2024-03-18T00:29:00Z"
  },
  "references": [
    {
      "url": "https://github.com/quic-go/quic-go/commit/4a99b816ae3ab03ae5449d15aac45147c85ed47a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/quic-go/quic-go/security/advisories/GHSA-c33x-xqrf-c478",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://seemann.io/posts/2024-03-19-exploiting-quics-connection-id-management",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.youtube.com/watch?v=JqXtYcZAtIA&t=3683s",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/quic-go/quic-go/commit/4a99b816ae3ab03ae5449d15aac45147c85ed47a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/quic-go/quic-go/security/advisories/GHSA-c33x-xqrf-c478",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://seemann.io/posts/2024-03-19-exploiting-quics-connection-id-management",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.youtube.com/watch?v=JqXtYcZAtIA&t=3683s",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.423241",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "quic-go",
    "owner": "quic-go",
    "created_at": "2016-04-06T20:16:27Z",
    "updated_at": "2025-01-14T18:27:53Z",
    "pushed_at": "2025-01-14T09:43:06Z",
    "size": 16771,
    "stars": 10331,
    "forks": 1339,
    "open_issues": 197,
    "watchers": 10331,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 2479488,
      "Shell": 3386,
      "Dockerfile": 1884
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:11:44.846055"
  }
}