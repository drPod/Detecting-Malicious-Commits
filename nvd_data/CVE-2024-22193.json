{
  "cve_id": "CVE-2024-22193",
  "github_data": {
    "repository": "vantage6/vantage6",
    "fix_commit": "6383283733b81abfcacfec7538dc4dc882e98074",
    "related_commits": [
      "6383283733b81abfcacfec7538dc4dc882e98074",
      "6383283733b81abfcacfec7538dc4dc882e98074"
    ],
    "patch_url": "https://github.com/vantage6/vantage6/commit/6383283733b81abfcacfec7538dc4dc882e98074.patch",
    "fix_commit_details": {
      "sha": "6383283733b81abfcacfec7538dc4dc882e98074",
      "commit_date": "2024-01-18T08:35:19Z",
      "author": {
        "login": "bartvanb",
        "type": "User",
        "stats": {
          "total_commits": 2387,
          "average_weekly_commits": 5.836185819070905,
          "total_additions": 373633,
          "total_deletions": 328316,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-rjmv-52mp-gjrr",
        "length": 115,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 66,
        "additions": 63,
        "deletions": 3
      },
      "files": [
        {
          "filename": "vantage6-server/vantage6/server/resource/task.py",
          "status": "modified",
          "additions": 63,
          "deletions": 3,
          "patch": "@@ -11,6 +11,7 @@\n \n from vantage6.common.globals import STRING_ENCODING\n from vantage6.common.task_status import TaskStatus, has_task_finished\n+from vantage6.common.encryption import DummyCryptor\n from vantage6.server import db\n from vantage6.server.permission import (\n     RuleCollection,\n@@ -490,6 +491,7 @@ def post(self):\n         \"\"\"\n         return self.post_task(request.get_json(), self.socketio, self.r)\n \n+    # TODO this function should be refactored to make it more readable\n     @staticmethod\n     def post_task(data: dict, socketio: SocketIO, rules: RuleCollection):\n         \"\"\"\n@@ -562,10 +564,8 @@ def post_task(data: dict, socketio: SocketIO, rules: RuleCollection):\n                        \"you are participating in!\"\n             }, HTTPStatus.UNAUTHORIZED\n \n-        # Create the new task in the database\n-        image = data.get('image', '')\n-\n         # verify permissions\n+        image = data.get('image', '')\n         if g.user and not rules.can_for_col(P.CREATE, collaboration.id):\n             return {'msg': 'You lack the permission to do that!'}, \\\n                 HTTPStatus.UNAUTHORIZED\n@@ -577,6 +577,17 @@ def post_task(data: dict, socketio: SocketIO, rules: RuleCollection):\n                 return {\"msg\": \"Container-token is not valid\"}, \\\n                     HTTPStatus.UNAUTHORIZED\n \n+        # check that the input is valid. If the collaboration is encrypted, it\n+        # should not be possible to read the input, and we should not save it\n+        # to the database as it may be sensitive information. Vice versa, if\n+        # the collaboration is not encrypted, we should not allow the user to\n+        # send encrypted input.\n+        is_valid_input, error_msg = Tasks._check_input_encryption(\n+            organizations_json_list, collaboration\n+        )\n+        if not is_valid_input:\n+            return {\"msg\": error_msg}, HTTPStatus.BAD_REQUEST\n+\n         # permissions ok, create task record and TaskDatabase records\n         task = db.Task(collaboration=collaboration, name=data.get('name', ''),\n                        description=data.get('description', ''), image=image,\n@@ -740,6 +751,55 @@ def _node_doesnt_allow_user_task(\n                         return False\n         return has_limitations\n \n+    @staticmethod\n+    def _check_input_encryption(\n+        organizations_json_list: list[dict], collaboration: db.Collaboration\n+    ) -> tuple[bool, str]:\n+        \"\"\"\n+        Check if the input encryption status matches the expected status for\n+        the collaboration. Also, check that if the input is not encrypted, it\n+        can be read as a string.\n+\n+        Parameters\n+        ----------\n+        organizations_json_list : list[dict]\n+            List of organizations which contains the input per organization.\n+        collaboration : db.Collaboration\n+            Collaboration object.\n+\n+        Returns\n+        -------\n+        bool\n+            True if the input is encrypted.\n+        str\n+            Error message if the input is valid.\n+        \"\"\"\n+        dummy_cryptor = DummyCryptor()\n+        for org in organizations_json_list:\n+            input_ = org.get('input')\n+            decrypted_input = dummy_cryptor.decrypt_str_to_bytes(input_)\n+            is_input_readable = False\n+            try:\n+                decrypted_input.decode(STRING_ENCODING)\n+                is_input_readable = True\n+            except UnicodeDecodeError:\n+                pass\n+\n+            if collaboration.encrypted and is_input_readable:\n+                return False,  (\n+                    \"Your collaboration requires encryption, but input is not \"\n+                    \"encrypted! Please encrypt your input before sending it.\"\n+                ),\n+            elif not collaboration.encrypted and not is_input_readable:\n+                return False, (\n+                    \"Your task's input cannot be parsed. Your input should be \"\n+                    \"a base64 encoded JSON string. Note that if you are using \"\n+                    \"the user interface or Python client, this should be done \"\n+                    \"for you. Also, make sure not to encrypt your input, \"\n+                    \"as your collaboration is set to not use encryption.\"\n+                )\n+        return True, ''\n+\n \n class Task(TaskBase):\n     \"\"\"Resource for /api/task\"\"\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7e08264dea67e84b35594893953001e8ea147d90",
            "date": "2025-01-09T16:31:08Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "c30ae94a7a4e5fda8eee9a937b26ff46c029109d",
            "date": "2024-12-13T09:10:55Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "7467646f458f773d0ee6aae6803682e1752a13f7",
            "date": "2024-12-13T08:54:45Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "4100ab5536ed2a5c675d6593cbebd8d98b4e5e14",
            "date": "2024-12-13T08:30:46Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "943a486a2e61185642fa75a0f55d24b776048838",
            "date": "2024-12-13T08:21:53Z",
            "author_login": "invalid-email-address"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-922",
    "description": "The vantage6 technology enables to manage and deploy privacy enhancing technologies like Federated Learning (FL) and Multi-Party Computation (MPC). There are no checks on whether the input is encrypted if a task is created in an encrypted collaboration. Therefore, a user may accidentally create a task with sensitive input data that will then be stored unencrypted in a database.  Users should ensure they set the encryption setting correctly.  This vulnerability is patched in 4.2.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-30T16:15:48.310",
    "last_modified": "2024-11-21T08:55:46.063",
    "fix_date": "2024-01-18T08:35:19Z"
  },
  "references": [
    {
      "url": "https://github.com/vantage6/vantage6/commit/6383283733b81abfcacfec7538dc4dc882e98074",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vantage6/vantage6/security/advisories/GHSA-rjmv-52mp-gjrr",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/vantage6/vantage6/commit/6383283733b81abfcacfec7538dc4dc882e98074",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/vantage6/vantage6/security/advisories/GHSA-rjmv-52mp-gjrr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.549428",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vantage6",
    "owner": "vantage6",
    "created_at": "2022-05-16T12:09:26Z",
    "updated_at": "2025-01-09T16:31:14Z",
    "pushed_at": "2025-01-14T13:14:06Z",
    "size": 44880,
    "stars": 31,
    "forks": 11,
    "open_issues": 248,
    "watchers": 31,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 1919355,
      "TypeScript": 526976,
      "HTML": 209327,
      "SCSS": 20209,
      "Makefile": 12871,
      "Dockerfile": 9054,
      "Jinja": 5974,
      "Shell": 4282,
      "JavaScript": 802
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:50:50.846103"
  }
}