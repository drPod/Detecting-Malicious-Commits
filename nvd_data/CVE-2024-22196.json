{
  "cve_id": "CVE-2024-22196",
  "github_data": {
    "repository": "0xJacky/nginx-ui",
    "fix_commit": "ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b",
    "related_commits": [
      "ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b",
      "ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b"
    ],
    "patch_url": "https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b.patch",
    "fix_commit_details": {
      "sha": "ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b",
      "commit_date": "2023-12-19T19:52:02Z",
      "author": {
        "login": "Hintay",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: ensure the list sort query is validated to prevent SQL injection",
        "length": 111,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 34,
        "deletions": 10
      },
      "files": [
        {
          "filename": "api/cosy/sort.go",
          "status": "modified",
          "additions": 20,
          "deletions": 8,
          "patch": "@@ -2,27 +2,39 @@ package cosy\n \n import (\n \t\"fmt\"\n+\t\"github.com/0xJacky/Nginx-UI/internal/logger\"\n \t\"github.com/gin-gonic/gin\"\n \t\"gorm.io/gorm\"\n+\t\"gorm.io/gorm/schema\"\n+\t\"sync\"\n )\n \n func (c *Ctx[T]) SortOrder() func(db *gorm.DB) *gorm.DB {\n \treturn func(db *gorm.DB) *gorm.DB {\n \t\tsort := c.ctx.DefaultQuery(\"order\", \"desc\")\n-\t\torder := fmt.Sprintf(\"%s %s\", DefaultQuery(c.ctx, \"sort_by\", c.itemKey), sort)\n-\t\treturn db.Order(order)\n+\t\tif sort != \"desc\" && sort != \"asc\" {\n+\t\t\tsort = \"desc\"\n+\t\t}\n+\n+\t\t// check if the order field is valid\n+\t\t// todo: maybe we can use more generic way to check if the sort_by is valid\n+\t\torder := DefaultQuery(c.ctx, \"sort_by\", c.itemKey)\n+\t\ts, _ := schema.Parse(c.Model, &sync.Map{}, schema.NamingStrategy{})\n+\t\tif _, ok := s.FieldsByDBName[order]; ok {\n+\t\t\torder = fmt.Sprintf(\"%s %s\", order, sort)\n+\t\t\treturn db.Order(order)\n+\t\t} else {\n+\t\t\tlogger.Error(\"invalid order field:\", order)\n+\t\t}\n+\n+\t\treturn db\n \t}\n }\n \n func (c *Ctx[T]) OrderAndPaginate() func(db *gorm.DB) *gorm.DB {\n \treturn func(db *gorm.DB) *gorm.DB {\n-\t\tsort := c.ctx.DefaultQuery(\"order\", \"desc\")\n-\n-\t\torder := fmt.Sprintf(\"%s %s\", DefaultQuery(c.ctx, \"sort_by\", c.itemKey), sort)\n-\t\tdb = db.Order(order)\n-\n+\t\tdb = c.SortOrder()(db)\n \t\t_, offset, pageSize := GetPagingParams(c.ctx)\n-\n \t\treturn db.Offset(offset).Limit(pageSize)\n \t}\n }"
        },
        {
          "filename": "model/model.go",
          "status": "modified",
          "additions": 14,
          "deletions": 2,
          "patch": "@@ -10,8 +10,10 @@ import (\n \t\"gorm.io/gen\"\n \t\"gorm.io/gorm\"\n \tgormlogger \"gorm.io/gorm/logger\"\n+\t\"gorm.io/gorm/schema\"\n \t\"path\"\n \t\"strings\"\n+\t\"sync\"\n \t\"time\"\n )\n \n@@ -100,9 +102,19 @@ func SortOrder(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n func OrderAndPaginate(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n \treturn func(db *gorm.DB) *gorm.DB {\n \t\tsort := c.DefaultQuery(\"order\", \"desc\")\n+\t\tif sort != \"desc\" && sort != \"asc\" {\n+\t\t\tsort = \"desc\"\n+\t\t}\n \n-\t\torder := fmt.Sprintf(\"`%s` %s\", DefaultQuery(c, \"sort_by\", \"id\"), sort)\n-\t\tdb = db.Order(order)\n+\t\t// check if the order field is valid\n+\t\torder := c.DefaultQuery(\"sort_by\", \"id\")\n+\t\ts, _ := schema.Parse(db.Model, &sync.Map{}, schema.NamingStrategy{})\n+\t\tif _, ok := s.FieldsByName[order]; ok {\n+\t\t\torder = fmt.Sprintf(\"%s %s\", order, sort)\n+\t\t\tdb = db.Order(order)\n+\t\t} else {\n+\t\t\tlogger.Error(\"invalid order field: \", order)\n+\t\t}\n \n \t\tpage := cast.ToInt(c.Query(\"page\"))\n \t\tif page == 0 {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8cf7884f74d509295530c1916327c21a6d979b65",
            "date": "2025-01-12T01:16:21Z",
            "author_login": "0xJacky"
          },
          {
            "sha": "f1ed7e158ea29a8e284da99a91c58a4148772c50",
            "date": "2025-01-11T18:16:24Z",
            "author_login": "irexyc"
          },
          {
            "sha": "07011244e5027717664f2553ffd89c34a8dfc043",
            "date": "2025-01-11T14:36:52Z",
            "author_login": "0xJacky"
          },
          {
            "sha": "a2f95bc4781de711595209194f03eab1d044a877",
            "date": "2025-01-11T14:36:40Z",
            "author_login": "0xJacky"
          },
          {
            "sha": "91eea5358694743506ae5710ece33603c34ecd2b",
            "date": "2025-01-11T02:48:00Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "Nginx-UI is an online statistics for Server Indicators\u200b\u200b Monitor CPU usage, memory usage, load average, and disk usage in real-time. This issue may lead to information disclosure. By using `DefaultQuery`, the `\"desc\"` and `\"id\"` values are used as default values if the query parameters are not set. Thus, the `order` and `sort_by` query parameter are user-controlled and are being appended to the `order` variable without any sanitization. This issue has been patched in version 2.0.0.beta.9.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-01-11T20:15:44.923",
    "last_modified": "2024-11-21T08:55:46.520",
    "fix_date": "2023-12-19T19:52:02Z"
  },
  "references": [
    {
      "url": "https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-h374-mm57-879c",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-h374-mm57-879c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.162833",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nginx-ui",
    "owner": "0xJacky",
    "created_at": "2021-02-19T10:51:04Z",
    "updated_at": "2025-01-14T13:37:22Z",
    "pushed_at": "2025-01-12T18:26:01Z",
    "size": 88854,
    "stars": 6661,
    "forks": 482,
    "open_issues": 52,
    "watchers": 6661,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [],
    "languages": {
      "Vue": 356310,
      "Go": 310117,
      "TypeScript": 89780,
      "Shell": 15497,
      "JavaScript": 4335,
      "Dockerfile": 2157,
      "HTML": 521,
      "Roff": 510,
      "Less": 118
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T16:31:00.127735"
  }
}