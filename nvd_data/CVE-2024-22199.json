{
  "cve_id": "CVE-2024-22199",
  "github_data": {
    "repository": "gofiber/template",
    "fix_commit": "28cff3ac4d4c117ab25b5396954676d624b6cb46",
    "related_commits": [
      "28cff3ac4d4c117ab25b5396954676d624b6cb46",
      "28cff3ac4d4c117ab25b5396954676d624b6cb46"
    ],
    "patch_url": "https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46.patch",
    "fix_commit_details": {
      "sha": "28cff3ac4d4c117ab25b5396954676d624b6cb46",
      "commit_date": "2024-01-11T14:00:21Z",
      "author": {
        "login": "ReneWerner87",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #326 from gofiber/django-autoescape",
        "length": 106,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 103,
        "additions": 97,
        "deletions": 6
      },
      "files": [
        {
          "filename": "django/README.md",
          "status": "modified",
          "additions": 44,
          "deletions": 4,
          "patch": "@@ -59,9 +59,9 @@ func main() {\n \t// Create a new engine\n \tengine := django.New(\"./views\", \".django\")\n \n-  // Or from an embedded system\n-  // See github.com/gofiber/embed for examples\n-  // engine := html.NewFileSystem(http.Dir(\"./views\", \".django\"))\n+\t// Or from an embedded system\n+\t// See github.com/gofiber/embed for examples\n+\t// engine := html.NewFileSystem(http.Dir(\"./views\", \".django\"))\n \n \t// Pass the engine to the Views\n \tapp := fiber.New(fiber.Config{\n@@ -194,4 +194,44 @@ If you need to access a value in the template that doesn't adhere to the key nam\n c.Render(\"index\", fiber.Map{\n     \"Fiber\": \"Hello, World!\\n\\nGreetings from Fiber Team\",\n     \"MyKey\": c.Locals(\"my-key\"),\n-})\n\\ No newline at end of file\n+})\n+\n+### AutoEscape is enabled by default\n+\n+When you create a new instance of the `Engine`, the auto-escape is **enabled by default**. This setting automatically escapes output, providing a critical security measure against Cross-Site Scripting (XSS) attacks.\n+\n+### Disabling Auto-Escape\n+\n+Auto-escaping can be disabled if necessary, using the `SetAutoEscape` method:\n+\n+```go\n+engine := django.New(\"./views\", \".django\")\n+engine.SetAutoEscape(false)\n+```\n+\n+### Setting AutoEscape using Django built-in template tags\n+\n+- Explicitly turning off autoescaping for a section:\n+```django  \n+  {% autoescape off %}\n+  {{ \"<script>alert('Hello World');</script>\" }}\n+  {% endautoescape %}\n+```\n+\n+- Turning autoescaping back on for a section:\n+```django\n+  {% autoescape on %}\n+  {{ \"<script>alert('Hello World');</script>\" }}\n+  {% endautoescape %}\n+```\n+- It can also be done on a per variable basis using the *safe* built-in:\n+```django\n+<h1>{{ someSafeVar | safe }}</h1>\n+{{ \"<script>\" | safe }}\n+```\n+\n+### Security Implications of Disabling Auto-Escape\n+\n+Disabling auto-escape should be approached with caution. It can expose your application to XSS attacks, where malicious scripts are injected into web pages. Without auto-escaping, there is a risk of rendering harmful HTML or JavaScript from user-supplied data.\n+\n+It is advisable to keep auto-escape enabled unless there is a strong reason to disable it. If you do disable it, ensure all user-supplied content is thoroughly sanitized and validated to avoid XSS vulnerabilities."
        },
        {
          "filename": "django/django.go",
          "status": "modified",
          "additions": 22,
          "deletions": 2,
          "patch": "@@ -21,6 +21,8 @@ type Engine struct {\n \tcore.Engine\n \t// forward the base path to the template Engine\n \tforwardPath bool\n+\t// set auto escape globally\n+\tautoEscape bool\n \t// templates\n \tTemplates map[string]*pongo2.Template\n }\n@@ -36,6 +38,7 @@ func New(directory, extension string) *Engine {\n \t\t\tLayoutName: \"embed\",\n \t\t\tFuncmap:    make(map[string]interface{}),\n \t\t},\n+\t\tautoEscape: true,\n \t}\n \treturn engine\n }\n@@ -52,6 +55,7 @@ func NewFileSystem(fs http.FileSystem, extension string) *Engine {\n \t\t\tLayoutName: \"embed\",\n \t\t\tFuncmap:    make(map[string]interface{}),\n \t\t},\n+\t\tautoEscape: true,\n \t}\n \treturn engine\n }\n@@ -70,6 +74,7 @@ func NewPathForwardingFileSystem(fs http.FileSystem, directory, extension string\n \t\t\tLayoutName: \"embed\",\n \t\t\tFuncmap:    make(map[string]interface{}),\n \t\t},\n+\t\tautoEscape: true,\n \t\tforwardPath: true,\n \t}\n \treturn engine\n@@ -101,7 +106,8 @@ func (e *Engine) Load() error {\n \tpongoset := pongo2.NewSet(\"default\", pongoloader)\n \t// Set template settings\n \tpongoset.Globals.Update(e.Funcmap)\n-\tpongo2.SetAutoescape(false)\n+\t// Set autoescaping\n+\tpongo2.SetAutoescape(e.autoEscape)\n \n \t// Loop trough each Directory and register template files\n \twalkFn := func(path string, info os.FileInfo, err error) error {\n@@ -207,6 +213,11 @@ func isValidKey(key string) bool {\n \treturn true\n }\n \n+// SetAutoEscape sets the auto-escape property of the template engine\n+func (e *Engine) SetAutoEscape(autoEscape bool) {\n+\te.autoEscape = autoEscape\n+}\n+\n // Render will render the template by name\n func (e *Engine) Render(out io.Writer, name string, binding interface{}, layout ...string) error {\n \tif !e.Loaded || e.ShouldReload {\n@@ -231,7 +242,16 @@ func (e *Engine) Render(out io.Writer, name string, binding interface{}, layout\n \t\tif bind == nil {\n \t\t\tbind = make(map[string]interface{}, 1)\n \t\t}\n-\t\tbind[e.LayoutName] = parsed\n+\n+\t\t// Workaround for custom {{embed}} tag\n+\t\t// Mark the `embed` variable as safe\n+\t\t// it has already been escaped above\n+\t\t// e.LayoutName will be 'embed'\n+\t\tsafeEmbed := pongo2.AsSafeValue(parsed)\n+\n+\t\t// Add the safe value to the binding map\n+\t\tbind[e.LayoutName] = safeEmbed\n+\n \t\tlay := e.Templates[layout[0]]\n \t\tif lay == nil {\n \t\t\treturn fmt.Errorf(\"LayoutName %s does not exist\", layout[0])"
        },
        {
          "filename": "django/django_test.go",
          "status": "modified",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -311,6 +311,37 @@ func Test_Invalid_Layout(t *testing.T) {\n \trequire.Error(t, err)\n }\n \n+func Test_XSS(t *testing.T) {\n+\tengine := New(\"./views\", \".django\")\n+\trequire.NoError(t, engine.Load())\n+\n+\tvar buf bytes.Buffer\n+\terr := engine.Render(&buf, \"index\", map[string]interface{}{\n+\t\t\"Title\": \"<script>alert('XSS')</script>\",\n+\t}, \"layouts/main\")\n+\trequire.NoError(t, err)\n+\n+\texpect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</h1><h2>Footer</h2></body></html>`\n+\tresult := trim(buf.String())\n+\trequire.Equal(t, expect, result)\n+}\n+\n+func Test_XSS_WithAutoEscapeDisabled(t *testing.T) {\n+    engine := New(\"./views\", \".django\")\n+    engine.SetAutoEscape(false)\n+    require.NoError(t, engine.Load())\n+\n+    var buf bytes.Buffer\n+    err := engine.Render(&buf, \"index\", map[string]interface{}{\n+        \"Title\": \"<script>alert('XSS')</script>\",\n+    }, \"layouts/main\")\n+    require.NoError(t, err)\n+\n+    expect := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1><script>alert('XSS')</script></h1><h2>Footer</h2></body></html>`\n+    result := trim(buf.String())\n+    require.Equal(t, expect, result)\n+}\n+\n func Benchmark_Django(b *testing.B) {\n \texpectSimple := `<h1>Hello, World!</h1>`\n \texpectExtended := `<!DOCTYPE html><html><head><title>Main</title></head><body><h2>Header</h2><h1>Hello, Admin!</h1><h2>Footer</h2></body></html>`"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "11ff1e2d4b067244e4bc96f4e310d09dbe0b2859",
            "date": "2025-01-01T02:38:53Z",
            "author_login": "ReneWerner87"
          },
          {
            "sha": "bcc0897de5c0552a4afd7d014866d8523d8a807d",
            "date": "2025-01-01T02:37:03Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5e1c69b85fe5f9129e082ebe5dda256ba8006d3c",
            "date": "2025-01-01T02:35:44Z",
            "author_login": "ReneWerner87"
          },
          {
            "sha": "1c67d030e66125bcde227833d1ed0856ed008195",
            "date": "2025-01-01T02:35:33Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b1672548c9efce1220ff9eb0612fec3d23e3a302",
            "date": "2025-01-01T02:34:49Z",
            "author_login": "ReneWerner87"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:N",
    "cwe_id": "CWE-20",
    "description": "This package provides universal methods to use multiple template engines with the Fiber web framework using the Views interface. This vulnerability specifically impacts web applications that render user-supplied data through this template engine, potentially leading to the execution of malicious scripts in users' browsers when visiting affected web pages. The vulnerability has been addressed, the template engine now defaults to having autoescape set to `true`, effectively mitigating the risk of XSS attacks.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-11T18:15:45.327",
    "last_modified": "2024-11-21T08:55:46.933",
    "fix_date": "2024-01-11T14:00:21Z"
  },
  "references": [
    {
      "url": "https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gofiber/template/security/advisories/GHSA-4mq2-gc4j-cmw6",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/gofiber/template/security/advisories/GHSA-4mq2-gc4j-cmw6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:44.162072",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "template",
    "owner": "gofiber",
    "created_at": "2020-02-14T01:58:52Z",
    "updated_at": "2025-01-11T18:27:47Z",
    "pushed_at": "2025-01-10T12:50:29Z",
    "size": 1250,
    "stars": 275,
    "forks": 54,
    "open_issues": 20,
    "watchers": 275,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 122275,
      "HTML": 615,
      "Pug": 424,
      "Handlebars": 396,
      "Mustache": 259,
      "Slim": 200
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:22:20.525560"
  }
}