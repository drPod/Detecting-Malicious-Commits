{
  "cve_id": "CVE-2024-22405",
  "github_data": {
    "repository": "MacPaw/XADMaster",
    "fix_commit": "b75c05bc3bca9e183ecd3c512e270ce93006da3c",
    "related_commits": [
      "b75c05bc3bca9e183ecd3c512e270ce93006da3c",
      "b75c05bc3bca9e183ecd3c512e270ce93006da3c"
    ],
    "patch_url": "https://github.com/MacPaw/XADMaster/commit/b75c05bc3bca9e183ecd3c512e270ce93006da3c.patch",
    "fix_commit_details": {
      "sha": "b75c05bc3bca9e183ecd3c512e270ce93006da3c",
      "commit_date": "2023-10-10T19:53:05Z",
      "author": {
        "login": "PaulTaykalo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Make sure that quarantine attribute is applied to all directories, not only in the child ones (#157)",
        "length": 100,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 36,
        "additions": 31,
        "deletions": 5
      },
      "files": [
        {
          "filename": "XADArchive.m",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -1041,8 +1041,12 @@ -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldCreateDirectory:(NSString *)\n \telse return NO;\n }\n \n-\n-\n+-(void)unarchiver:(XADUnarchiver *)unarchiver didCreateDirectory:(NSString *)directory\n+{\n+    if(delegate) {\n+        [delegate archive:self didCreateDirectory:directory];\n+    }\n+}\n \n \n //\n@@ -1147,6 +1151,9 @@ -(BOOL)archiveExtractionShouldStop:(XADArchive *)arc\n -(BOOL)archive:(XADArchive *)arc shouldCreateDirectory:(NSString *)directory\n { return [delegate archive:arc shouldCreateDirectory:directory]; }\n \n+-(void)archive:(XADArchive *)arc didCreateDirectory:(NSString *)directory\n+{ [delegate archive:arc didCreateDirectory:directory]; }\n+\n -(XADAction)archive:(XADArchive *)arc entry:(int)n collidesWithFile:(NSString *)file newFilename:(NSString **)newname\n { return [delegate archive:arc entry:n collidesWithFile:file newFilename:newname]; }\n \n@@ -1207,6 +1214,7 @@ -(XADAction)archive:(XADArchive *)archive nameDecodingDidFailForEntry:(int)n dat\n \n -(BOOL)archiveExtractionShouldStop:(XADArchive *)archive { return NO; }\n -(BOOL)archive:(XADArchive *)archive shouldCreateDirectory:(NSString *)directory { return YES; }\n+-(void)archive:(XADArchive *)archive didCreateDirectory:(NSString *)directory { }\n -(XADAction)archive:(XADArchive *)archive entry:(int)n collidesWithFile:(NSString *)file newFilename:(NSString **)newname { return XADOverwriteAction; }\n -(XADAction)archive:(XADArchive *)archive entry:(int)n collidesWithDirectory:(NSString *)file newFilename:(NSString **)newname { return XADSkipAction; }\n -(XADAction)archive:(XADArchive *)archive creatingDirectoryDidFailForEntry:(int)n { return XADAbortAction; }"
        },
        {
          "filename": "XADSimpleUnarchiver.m",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -870,6 +870,12 @@ -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldCreateDirectory:(NSString *)\n \treturn YES;\n }\n \n+-(void)unarchiver:(XADUnarchiver *)unarchiver didCreateDirectory:(NSString *)directory {\n+    if(propagatemetadata && metadata) {\n+        [XADPlatform writeCloneableMetadata:metadata toPath:directory];\n+    }\n+}\n+\n -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldDeleteFileAndCreateDirectory:(NSString *)directory\n {\n \t// If a resource fork entry for a directory was accidentally extracted"
        },
        {
          "filename": "XADUnarchiver.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -120,6 +120,7 @@ outputTarget:(id)target selector:(SEL)sel argument:(id)arg;\n -(void)unarchiver:(XADUnarchiver *)unarchiver didExtractEntryWithDictionary:(NSDictionary *)dict to:(NSString *)path error:(XADError)error;\n \n -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldCreateDirectory:(NSString *)directory;\n+-(void)unarchiver:(XADUnarchiver *)unarchiver didCreateDirectory:(NSString *)directory;\n -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldDeleteFileAndCreateDirectory:(NSString *)directory;\n \n -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldExtractArchiveEntryWithDictionary:(NSDictionary *)dict to:(NSString *)path;"
        },
        {
          "filename": "XADUnarchiver.m",
          "status": "modified",
          "additions": 14,
          "deletions": 3,
          "patch": "@@ -562,11 +562,21 @@ -(XADError)_ensureDirectoryExists:(NSString *)path\n \n \t#if MAC_OS_X_VERSION_MIN_REQUIRED>=1050 || __IPHONE_OS_VERSION_MIN_REQUIRED>__IPHONE_2_0\n \tif([manager createDirectoryAtPath:path\n-\twithIntermediateDirectories:NO attributes:nil error:NULL]) return XADNoError;\n+          withIntermediateDirectories:NO attributes:nil error:NULL]) {\n+        if (delegate) {\n+            [delegate unarchiver:self didCreateDirectory:path];\n+        }\n+        return XADNoError;\n+    }\n \t#else\n-\tif([manager createDirectoryAtPath:path attributes:nil]) return XADNoError;\n+    if([manager createDirectoryAtPath:path attributes:nil]) {\n+        if (delegate) {\n+            [delegate unarchiver:self didCreateDirectory:path];\n+        }\n+        return XADNoError;\n+    }\n \t#endif\n-\telse return XADMakeDirectoryError;\n+    else return XADMakeDirectoryError;\n }\n \n \n@@ -745,6 +755,7 @@ -(void)unarchiver:(XADUnarchiver *)unarchiver willExtractEntryWithDictionary:(NS\n -(void)unarchiver:(XADUnarchiver *)unarchiver didExtractEntryWithDictionary:(NSDictionary *)dict to:(NSString *)path error:(XADError)error {}\n \n -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldCreateDirectory:(NSString *)directory { return YES; }\n+-(void)unarchiver:(XADUnarchiver *)unarchiver didCreateDirectory:(NSString *)directory { }\n -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldDeleteFileAndCreateDirectory:(NSString *)directory { return NO; }\n \n -(BOOL)unarchiver:(XADUnarchiver *)unarchiver shouldExtractArchiveEntryWithDictionary:(NSDictionary *)dict to:(NSString *)path { return NO; }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8945195d0b165da6b16ada5bbace4bcdc8ffea6d",
            "date": "2024-04-05T13:49:57Z",
            "author_login": "r-fogash"
          },
          {
            "sha": "deb03d96276f365caa4cc9d9b4326f8db234c349",
            "date": "2024-04-05T10:54:13Z",
            "author_login": "r-fogash"
          },
          {
            "sha": "35287a6d3412cf9621047c23bf44e53ed5816363",
            "date": "2024-03-13T13:02:06Z",
            "author_login": "r-fogash"
          },
          {
            "sha": "ddd7575daccf2cc28b14dba35ad4a7ad60bd36d7",
            "date": "2024-03-13T08:30:49Z",
            "author_login": "r-fogash"
          },
          {
            "sha": "688f54f49f859bf2cc2e15c8bd2b516fddaa16bc",
            "date": "2024-01-17T13:24:51Z",
            "author_login": "r-fogash"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-281",
    "description": "XADMaster is an objective-C library for archive and file unarchiving and extraction. When extracting a specially crafted zip archive XADMaster may not apply quarantine attribute correctly. Such behaviour may circumvent Gatekeeper checks on the system. Only macOS installations are affected. This issue was fixed in XADMaster 1.10.8. It is recommended to upgrade to the latest version. There are no known workarounds for this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-30T10:15:07.200",
    "last_modified": "2024-11-21T08:56:13.080",
    "fix_date": "2023-10-10T19:53:05Z"
  },
  "references": [
    {
      "url": "https://github.com/MacPaw/XADMaster/commit/b75c05bc3bca9e183ecd3c512e270ce93006da3c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/MacPaw/XADMaster/security/advisories/GHSA-xg3c-r7w5-7xw2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/MacPaw/XADMaster/commit/b75c05bc3bca9e183ecd3c512e270ce93006da3c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/MacPaw/XADMaster/security/advisories/GHSA-xg3c-r7w5-7xw2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.039750",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "XADMaster",
    "owner": "MacPaw",
    "created_at": "2018-02-28T13:56:54Z",
    "updated_at": "2024-12-27T09:07:24Z",
    "pushed_at": "2024-06-02T09:11:25Z",
    "size": 29759,
    "stars": 106,
    "forks": 45,
    "open_issues": 103,
    "watchers": 106,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "CodeQL-Analysis-update",
      "Xcode10-Support",
      "develop",
      "feature/TUN-168-Some-files-extracted-as-zero-sized-archives",
      "feature/fix_csmemoryhandle_module_visibility",
      "feature/tun-189-bin-files-cannot-be-extracted",
      "featute/make_csmemoryhandle_public",
      "fix/bzip-memory-leak",
      "fix/crash_corrupted_iso",
      "fix/iso_crash_when_corrupted_directory_record",
      "fix/missing-public-header",
      "fix/support-warc-1.1",
      "fix/tun-62",
      "fix/107",
      "linux/objc20",
      "master",
      "support/xcode9"
    ],
    "languages": {
      "C": 3297390,
      "Objective-C": 2099171,
      "Roff": 8088,
      "Makefile": 2003,
      "Perl": 385
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T18:47:27.249927"
  }
}