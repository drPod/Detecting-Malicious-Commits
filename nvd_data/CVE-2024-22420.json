{
  "cve_id": "CVE-2024-22420",
  "github_data": {
    "repository": "jupyterlab/jupyterlab",
    "fix_commit": "e1b3aabab603878e46add445a3114e838411d2df",
    "related_commits": [
      "e1b3aabab603878e46add445a3114e838411d2df",
      "e1b3aabab603878e46add445a3114e838411d2df"
    ],
    "patch_url": "https://github.com/jupyterlab/jupyterlab/commit/e1b3aabab603878e46add445a3114e838411d2df.patch",
    "fix_commit_details": {
      "sha": "e1b3aabab603878e46add445a3114e838411d2df",
      "commit_date": "2024-01-19T12:43:25Z",
      "author": {
        "login": "krassowski",
        "type": "User",
        "stats": {
          "total_commits": 606,
          "average_weekly_commits": 1.221774193548387,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 167
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4m77-cmpx-vjc4",
        "length": 209,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 111,
        "additions": 85,
        "deletions": 26
      },
      "files": [
        {
          "filename": "packages/markdownviewer-extension/src/index.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 4,
          "patch": "@@ -10,7 +10,7 @@ import {\n   JupyterFrontEnd,\n   JupyterFrontEndPlugin\n } from '@jupyterlab/application';\n-import { WidgetTracker } from '@jupyterlab/apputils';\n+import { ISanitizer, WidgetTracker } from '@jupyterlab/apputils';\n import { PathExt } from '@jupyterlab/coreutils';\n import {\n   IMarkdownViewerTracker,\n@@ -20,6 +20,7 @@ import {\n   MarkdownViewerTableOfContentsFactory\n } from '@jupyterlab/markdownviewer';\n import {\n+  IRenderMime,\n   IRenderMimeRegistry,\n   markdownRendererFactory\n } from '@jupyterlab/rendermime';\n@@ -49,7 +50,12 @@ const plugin: JupyterFrontEndPlugin<IMarkdownViewerTracker> = {\n   description: 'Adds markdown file viewer and provides its tracker.',\n   provides: IMarkdownViewerTracker,\n   requires: [IRenderMimeRegistry, ITranslator],\n-  optional: [ILayoutRestorer, ISettingRegistry, ITableOfContentsRegistry],\n+  optional: [\n+    ILayoutRestorer,\n+    ISettingRegistry,\n+    ITableOfContentsRegistry,\n+    ISanitizer\n+  ],\n   autoStart: true\n };\n \n@@ -62,7 +68,8 @@ function activate(\n   translator: ITranslator,\n   restorer: ILayoutRestorer | null,\n   settingRegistry: ISettingRegistry | null,\n-  tocRegistry: ITableOfContentsRegistry | null\n+  tocRegistry: ITableOfContentsRegistry | null,\n+  sanitizer: IRenderMime.ISanitizer | null\n ): IMarkdownViewerTracker {\n   const trans = translator.load('jupyterlab');\n   const { commands, docRegistry } = app;\n@@ -182,7 +189,8 @@ function activate(\n     tocRegistry.add(\n       new MarkdownViewerTableOfContentsFactory(\n         tracker,\n-        rendermime.markdownParser\n+        rendermime.markdownParser,\n+        sanitizer ?? rendermime.sanitizer\n       )\n     );\n   }"
        },
        {
          "filename": "packages/markdownviewer/src/toc.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -2,7 +2,7 @@\n // Distributed under the terms of the Modified BSD License.\n \n import { IWidgetTracker } from '@jupyterlab/apputils';\n-import { IMarkdownParser } from '@jupyterlab/rendermime';\n+import { IMarkdownParser, IRenderMime } from '@jupyterlab/rendermime';\n import {\n   TableOfContents,\n   TableOfContentsFactory,\n@@ -96,7 +96,8 @@ export class MarkdownViewerTableOfContentsFactory extends TableOfContentsFactory\n    */\n   constructor(\n     tracker: IWidgetTracker<MarkdownDocument>,\n-    protected parser: IMarkdownParser | null\n+    protected parser: IMarkdownParser | null,\n+    protected sanitizer: IRenderMime.ISanitizer\n   ) {\n     super(tracker);\n   }\n@@ -165,13 +166,14 @@ export class MarkdownViewerTableOfContentsFactory extends TableOfContentsFactory\n         const elementId = await TableOfContentsUtils.Markdown.getHeadingId(\n           this.parser!,\n           heading.raw,\n-          heading.level\n+          heading.level,\n+          this.sanitizer\n         );\n \n         if (!elementId) {\n           return;\n         }\n-        const selector = `h${heading.level}[id=\"${elementId}\"]`;\n+        const selector = `h${heading.level}[id=\"${CSS.escape(elementId)}\"]`;\n \n         headingToElement.set(\n           heading,"
        },
        {
          "filename": "packages/notebook/src/toc.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -649,10 +649,14 @@ export class NotebookToCFactory extends TableOfContentsFactory<NotebookPanel> {\n \n     const findHeadingElement = (cell: Cell): void => {\n       model.getCellHeadings(cell).forEach(async heading => {\n-        const elementId = await getIdForHeading(heading, this.parser!);\n+        const elementId = await getIdForHeading(\n+          heading,\n+          this.parser!,\n+          this.sanitizer\n+        );\n \n         const selector = elementId\n-          ? `h${heading.level}[id=\"${elementId}\"]`\n+          ? `h${heading.level}[id=\"${CSS.escape(elementId)}\"]`\n           : `h${heading.level}`;\n \n         if (heading.outputIndex !== undefined) {\n@@ -771,15 +775,17 @@ export class NotebookToCFactory extends TableOfContentsFactory<NotebookPanel> {\n  */\n export async function getIdForHeading(\n   heading: INotebookHeading,\n-  parser: IRenderMime.IMarkdownParser\n+  parser: IRenderMime.IMarkdownParser,\n+  sanitizer: IRenderMime.ISanitizer\n ) {\n   let elementId: string | null = null;\n   if (heading.type === Cell.HeadingType.Markdown) {\n     elementId = await TableOfContentsUtils.Markdown.getHeadingId(\n       parser,\n       // Type from TableOfContentsUtils.Markdown.IMarkdownHeading\n       (heading as any).raw,\n-      heading.level\n+      heading.level,\n+      sanitizer\n     );\n   } else if (heading.type === Cell.HeadingType.HTML) {\n     // Type from TableOfContentsUtils.IHTMLHeading"
        },
        {
          "filename": "packages/notebook/src/widget.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -2305,14 +2305,15 @@ export class Notebook extends StaticNotebook {\n               id = await TableOfContentsUtils.Markdown.getHeadingId(\n                 this.rendermime.markdownParser!,\n                 mdHeading.raw,\n-                mdHeading.level\n+                mdHeading.level,\n+                this.rendermime.sanitizer\n               );\n             }\n             break;\n         }\n         if (id === queryId) {\n           const element = this.node.querySelector(\n-            `h${heading.level}[id=\"${id}\"]`\n+            `h${heading.level}[id=\"${CSS.escape(id)}\"]`\n           ) as HTMLElement;\n \n           return {"
        },
        {
          "filename": "packages/rendermime-interfaces/src/index.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -525,10 +525,10 @@ export namespace IRenderMime {\n    */\n   export interface IMarkdownParser {\n     /**\n-     * Render a markdown source.\n+     * Render a markdown source into unsanitized HTML.\n      *\n      * @param source - The string to render.\n-     * @returns - A promise of the string.\n+     * @returns - A promise of the string containing HTML which may require sanitization.\n      */\n     render(source: string): Promise<string>;\n   }"
        },
        {
          "filename": "packages/toc/package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -46,6 +46,7 @@\n     \"@jupyterlab/docregistry\": \"^4.1.0-beta.1\",\n     \"@jupyterlab/observables\": \"^5.1.0-beta.1\",\n     \"@jupyterlab/rendermime\": \"^4.1.0-beta.1\",\n+    \"@jupyterlab/rendermime-interfaces\": \"^3.9.0-beta.1\",\n     \"@jupyterlab/translation\": \"^4.1.0-beta.1\",\n     \"@jupyterlab/ui-components\": \"^4.1.0-beta.1\",\n     \"@lumino/coreutils\": \"^2.1.2\","
        },
        {
          "filename": "packages/toc/src/utils/markdown.ts",
          "status": "modified",
          "additions": 20,
          "deletions": 10,
          "patch": "@@ -1,7 +1,9 @@\n // Copyright (c) Jupyter Development Team.\n // Distributed under the terms of the Modified BSD License.\n \n+import { Sanitizer } from '@jupyterlab/apputils';\n import { IMarkdownParser, renderMarkdown } from '@jupyterlab/rendermime';\n+import { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n import { TableOfContents } from '../tokens';\n \n /**\n@@ -24,27 +26,35 @@ export interface IMarkdownHeading extends TableOfContents.IHeading {\n  *\n  * @param raw Raw markdown heading\n  * @param level Heading level\n+ * @param sanitizer HTML sanitizer\n  */\n export async function getHeadingId(\n-  parser: IMarkdownParser,\n+  markdownParser: IMarkdownParser,\n   raw: string,\n-  level: number\n+  level: number,\n+  sanitizer?: IRenderMime.ISanitizer\n ): Promise<string | null> {\n   try {\n-    const innerHTML = await parser.render(raw);\n+    const host = document.createElement('div');\n \n-    if (!innerHTML) {\n-      return null;\n-    }\n+    await renderMarkdown({\n+      markdownParser,\n+      host,\n+      source: raw,\n+      trusted: false,\n+      sanitizer: sanitizer ?? new Sanitizer(),\n+      shouldTypeset: false,\n+      resolver: null,\n+      linkHandler: null,\n+      latexTypesetter: null\n+    });\n \n-    const container = document.createElement('div');\n-    container.innerHTML = innerHTML;\n-    const header = container.querySelector(`h${level}`);\n+    const header = host.querySelector(`h${level}`);\n     if (!header) {\n       return null;\n     }\n \n-    return renderMarkdown.createHeaderId(header);\n+    return header.id;\n   } catch (reason) {\n     console.error('Failed to parse a heading.', reason);\n   }"
        },
        {
          "filename": "packages/toc/test/markdown.spec.ts",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -2,9 +2,33 @@\n // Distributed under the terms of the Modified BSD License.\n \n import { TableOfContentsUtils } from '@jupyterlab/toc';\n+import { Sanitizer } from '@jupyterlab/apputils';\n+import { createMarkdownParser } from '@jupyterlab/markedparser-extension';\n+import { IMarkdownParser } from '@jupyterlab/rendermime';\n+import {\n+  EditorLanguageRegistry,\n+  IEditorLanguageRegistry\n+} from '@jupyterlab/codemirror';\n \n describe('TableOfContentsUtils', () => {\n   describe('Markdown', () => {\n+    describe('#getHeadingId', () => {\n+      const languages: IEditorLanguageRegistry = new EditorLanguageRegistry();\n+      const parser: IMarkdownParser = createMarkdownParser(languages);\n+      const sanitizer = new Sanitizer();\n+      it.each<[string, string]>([\n+        ['# Title', 'Title'],\n+        [`# test'\"></title><img>test {#'\"><img>}`, `test'\\\">test-{#'\\\">}`]\n+      ])('should derive ID from markdown', async (markdown, expectedId) => {\n+        const headingId = await TableOfContentsUtils.Markdown.getHeadingId(\n+          parser,\n+          markdown,\n+          1,\n+          sanitizer\n+        );\n+        expect(headingId).toEqual(expectedId);\n+      });\n+    });\n     describe('#getHeadings', () => {\n       it.each<[string, TableOfContentsUtils.Markdown.IMarkdownHeading[]]>([\n         ["
        },
        {
          "filename": "packages/toc/tsconfig.json",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -26,6 +26,9 @@\n     },\n     {\n       \"path\": \"../ui-components\"\n+    },\n+    {\n+      \"path\": \"../rendermime-interfaces\"\n     }\n   ]\n }"
        },
        {
          "filename": "packages/toc/tsconfig.test.json",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -26,6 +26,9 @@\n     {\n       \"path\": \"../ui-components\"\n     },\n+    {\n+      \"path\": \"../rendermime-interfaces\"\n+    },\n     {\n       \"path\": \".\"\n     },"
        },
        {
          "filename": "yarn.lock",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -4908,6 +4908,7 @@ __metadata:\n     \"@jupyterlab/docregistry\": ^4.1.0-beta.1\n     \"@jupyterlab/observables\": ^5.1.0-beta.1\n     \"@jupyterlab/rendermime\": ^4.1.0-beta.1\n+    \"@jupyterlab/rendermime-interfaces\": ^3.9.0-beta.1\n     \"@jupyterlab/testing\": ^4.1.0-beta.1\n     \"@jupyterlab/translation\": ^4.1.0-beta.1\n     \"@jupyterlab/ui-components\": ^4.1.0-beta.1"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 1,
        "test_files": 2,
        "unique_directories": 8,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1f6f64bbd56bc9363315114a4fe0f642252ef464",
            "date": "2025-01-09T18:02:34Z",
            "author_login": "hxrshxz"
          },
          {
            "sha": "c7426e494067765bb314c5ff3bd7c052913c5674",
            "date": "2025-01-07T11:39:23Z",
            "author_login": "pre-commit-ci[bot]"
          },
          {
            "sha": "362e9570ecc44a02ff0b3d75f371610438b3052b",
            "date": "2025-01-07T10:18:13Z",
            "author_login": "jtpio"
          },
          {
            "sha": "79f7663f4f8d39228f5bc9cbb2f21e6620760075",
            "date": "2025-01-07T08:27:22Z",
            "author_login": "jtpio"
          },
          {
            "sha": "5243a851c470688893adfbd1b833ea6b2f985c03",
            "date": "2025-01-06T16:23:23Z",
            "author_login": "krassowski"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-79",
    "description": "JupyterLab is an extensible environment for interactive and reproducible computing, based on the Jupyter Notebook and Architecture. This vulnerability depends on user interaction by opening a malicious Markdown file using JupyterLab preview feature. A malicious user can access any data that the attacked user has access to as well as perform arbitrary requests acting as the attacked user. JupyterLab version 4.0.11 has been patched. Users are advised to upgrade. Users unable to upgrade should disable the table of contents extension.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-19T21:15:09.667",
    "last_modified": "2024-11-21T08:56:15.203",
    "fix_date": "2024-01-19T12:43:25Z"
  },
  "references": [
    {
      "url": "https://github.com/jupyterlab/jupyterlab/commit/e1b3aabab603878e46add445a3114e838411d2df",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-4m77-cmpx-vjc4",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UQJKNRDRFMKGVRIYNNN6CKMNJDNYWO2H/",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterlab/jupyterlab/commit/e1b3aabab603878e46add445a3114e838411d2df",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-4m77-cmpx-vjc4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UQJKNRDRFMKGVRIYNNN6CKMNJDNYWO2H/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.510780",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jupyterlab",
    "owner": "jupyterlab",
    "created_at": "2016-06-03T20:09:17Z",
    "updated_at": "2025-01-14T08:21:53Z",
    "pushed_at": "2025-01-09T18:02:34Z",
    "size": 262738,
    "stars": 14316,
    "forks": 3454,
    "open_issues": 2554,
    "watchers": 14316,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.0.x",
      "1.1.x",
      "1.2.x",
      "2.0.x",
      "2.1.x",
      "2.2.x",
      "2.3.x",
      "3.0.x",
      "3.1.x",
      "3.2.x",
      "3.3.x",
      "3.4.x",
      "3.5.x",
      "3.6.x",
      "4.0.x",
      "4.1.x",
      "4.2.x",
      "4.3.x",
      "main"
    ],
    "languages": {
      "TypeScript": 7487669,
      "Python": 431237,
      "CSS": 395435,
      "JavaScript": 180238,
      "Jupyter Notebook": 105512,
      "Shell": 25558,
      "HTML": 17939,
      "PowerShell": 2937,
      "Dockerfile": 2255,
      "Makefile": 1628
    },
    "commit_activity": {
      "total_commits_last_year": 713,
      "avg_commits_per_week": 13.711538461538462,
      "days_active_last_year": 201
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:39:23.405253"
  }
}