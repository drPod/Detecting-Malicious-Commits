{
  "cve_id": "CVE-2024-22421",
  "github_data": {
    "repository": "jupyterlab/jupyterlab",
    "fix_commit": "19bd9b96cb2e77170a67e43121637d0b5619e8c6",
    "related_commits": [
      "19bd9b96cb2e77170a67e43121637d0b5619e8c6",
      "19bd9b96cb2e77170a67e43121637d0b5619e8c6"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "19bd9b96cb2e77170a67e43121637d0b5619e8c6",
      "commit_date": "2024-01-19T13:15:40Z",
      "author": {
        "login": "krassowski",
        "type": "User",
        "stats": {
          "total_commits": 609,
          "average_weekly_commits": 1.2228915662650603,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 169
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-44cc-43rp-5947",
        "length": 117,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 94,
        "additions": 85,
        "deletions": 9
      },
      "files": [
        {
          "filename": "packages/apputils-extension/src/workspacesplugin.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -210,7 +210,11 @@ namespace Private {\n         await this._state.save(LAST_SAVE_ID, path);\n \n         // Navigate to new workspace.\n-        const url = URLExt.join(this._application, 'workspaces', id);\n+        const workspacesBase = URLExt.join(this._application, 'workspaces');\n+        const url = URLExt.join(workspacesBase, id);\n+        if (!workspacesBase.startsWith(url)) {\n+          throw new Error('Can only be used for workspaces');\n+        }\n         if (this._router) {\n           this._router.navigate(url, { hard: true });\n         } else {"
        },
        {
          "filename": "packages/hub-extension/src/index.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -57,9 +57,16 @@ function activateHubExtension(\n   });\n \n   // If hubServerName is set, use JupyterHub 1.0 URL.\n-  const restartUrl = hubServerName\n-    ? hubHost + URLExt.join(hubPrefix, 'spawn', hubUser, hubServerName)\n-    : hubHost + URLExt.join(hubPrefix, 'spawn');\n+  const spawnBase = URLExt.join(hubPrefix, 'spawn');\n+  let restartUrl: string;\n+  if (hubServerName) {\n+    const suffix = URLExt.join(spawnBase, hubUser, hubServerName);\n+    if (!suffix.startsWith(spawnBase)) {\n+      throw new Error('Can only be used for spawn requests');\n+    }\n+    restartUrl = hubHost + suffix;\n+  }\n+  restartUrl = hubHost + spawnBase;\n \n   const { commands } = app;\n "
        },
        {
          "filename": "packages/services/src/session/restapi.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -42,7 +42,12 @@ export async function listRunning(\n  * Get a session url.\n  */\n export function getSessionUrl(baseUrl: string, id: string): string {\n-  return URLExt.join(baseUrl, SESSION_SERVICE_URL, id);\n+  const servicesBase = URLExt.join(baseUrl, SESSION_SERVICE_URL);\n+  const result = URLExt.join(servicesBase, id);\n+  if (!result.startsWith(servicesBase)) {\n+    throw new Error('Can only be used for services requests');\n+  }\n+  return result;\n }\n \n /**"
        },
        {
          "filename": "packages/services/src/setting/index.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -161,6 +161,11 @@ namespace Private {\n     const idsOnlyParam = idsOnly\n       ? URLExt.objectToQueryString({ ids_only: true })\n       : '';\n-    return `${URLExt.join(base, SERVICE_SETTINGS_URL, id)}${idsOnlyParam}`;\n+    const settingsBase = URLExt.join(base, SERVICE_SETTINGS_URL);\n+    const result = URLExt.join(settingsBase, id);\n+    if (!result.startsWith(settingsBase)) {\n+      throw new Error('Can only be used for workspaces requests');\n+    }\n+    return `${result}${idsOnlyParam}`;\n   }\n }"
        },
        {
          "filename": "packages/services/src/terminal/restapi.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -101,7 +101,11 @@ export async function shutdownTerminal(\n   settings: ServerConnection.ISettings = ServerConnection.makeSettings()\n ): Promise<void> {\n   Private.errorIfNotAvailable();\n-  const url = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL, name);\n+  const workspacesBase = URLExt.join(settings.baseUrl, TERMINAL_SERVICE_URL);\n+  const url = URLExt.join(workspacesBase, name);\n+  if (!url.startsWith(workspacesBase)) {\n+    throw new Error('Can only be used for terminal requests');\n+  }\n   const init = { method: 'DELETE' };\n   const response = await ServerConnection.makeRequest(url, init, settings);\n   if (response.status === 404) {"
        },
        {
          "filename": "packages/services/src/workspace/index.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -178,6 +178,11 @@ namespace Private {\n    * Get the url for a workspace.\n    */\n   export function url(base: string, id: string): string {\n-    return URLExt.join(base, SERVICE_WORKSPACES_URL, id);\n+    const workspacesBase = URLExt.join(base, SERVICE_WORKSPACES_URL);\n+    const result = URLExt.join(workspacesBase, id);\n+    if (!result.startsWith(workspacesBase)) {\n+      throw new Error('Can only be used for workspaces requests');\n+    }\n+    return result;\n   }\n }"
        },
        {
          "filename": "packages/services/test/session/session.spec.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -144,5 +144,9 @@ describe('session', () => {\n         SessionAPI.shutdownSession(UUID.uuid4())\n       ).resolves.not.toThrow();\n     });\n+\n+    it('should reject invalid on invalid id', async () => {\n+      await expect(SessionAPI.shutdownSession('../')).rejects.toThrow();\n+    });\n   });\n });"
        },
        {
          "filename": "packages/services/test/setting/manager.spec.ts",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -53,6 +53,15 @@ describe('setting', () => {\n \n         expect((await manager.fetch(id)).id).toBe(id);\n       });\n+\n+      it('should reject on invalid id', async () => {\n+        const id = '../';\n+\n+        const callback = async () => {\n+          await manager.fetch(id);\n+        };\n+        await expect(callback).rejects.toThrow();\n+      });\n     });\n \n     describe('#save()', () => {\n@@ -64,6 +73,17 @@ describe('setting', () => {\n         await manager.save(id, raw);\n         expect(JSON.parse((await manager.fetch(id)).raw).theme).toBe(theme);\n       });\n+\n+      it('should reject on invalid id', async () => {\n+        const id = '../';\n+        const theme = 'Foo Theme';\n+        const raw = `{\"theme\": \"${theme}\"}`;\n+\n+        const callback = async () => {\n+          await manager.save(id, raw);\n+        };\n+        await expect(callback).rejects.toThrow();\n+      });\n     });\n   });\n });"
        },
        {
          "filename": "packages/services/test/workspace/manager.spec.ts",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -55,6 +55,15 @@ describe('workspace', () => {\n         expect((await manager.fetch(id)).metadata.id).toBe(id);\n         await manager.remove(id);\n       });\n+\n+      it('should reject on invalid id', async () => {\n+        const id = '../';\n+\n+        const callback = async () => {\n+          await manager.fetch(id);\n+        };\n+        await expect(callback).rejects.toThrow();\n+      });\n     });\n \n     describe('#list()', () => {\n@@ -87,6 +96,15 @@ describe('workspace', () => {\n         expect((await manager.fetch(id)).metadata.id).toBe(id);\n         await manager.remove(id);\n       });\n+\n+      it('should reject on invalid id', async () => {\n+        const id = '../';\n+\n+        const callback = async () => {\n+          await manager.save(id, { data: {}, metadata: { id } });\n+        };\n+        await expect(callback).rejects.toThrow();\n+      });\n     });\n   });\n });"
        },
        {
          "filename": "packages/translation/src/server.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -27,7 +27,11 @@ export async function requestTranslationsAPI<T>(\n   const settings = serverSettings ?? ServerConnection.makeSettings();\n   translationsUrl =\n     translationsUrl || `${settings.appUrl}/${TRANSLATIONS_SETTINGS_URL}`;\n-  const requestUrl = URLExt.join(settings.baseUrl, translationsUrl, locale);\n+  const translationsBase = URLExt.join(settings.baseUrl, translationsUrl);\n+  const requestUrl = URLExt.join(translationsBase, locale);\n+  if (!requestUrl.startsWith(translationsBase)) {\n+    throw new Error('Can only be used for translations requests');\n+  }\n   let response: Response;\n   try {\n     response = await ServerConnection.makeRequest(requestUrl, init, settings);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 10,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c8a53da7b114f58a915a68182aa4172d6aa30262",
            "date": "2025-01-24T21:14:35Z",
            "author_login": "ajbozarth"
          },
          {
            "sha": "ae74a82a2ba90927ff6e5c7cf4cc943c96f90162",
            "date": "2025-01-24T21:00:24Z",
            "author_login": "jtpio"
          },
          {
            "sha": "74bb66913dc031b413f3543eca194fd7e628bef6",
            "date": "2025-01-23T15:02:45Z",
            "author_login": "Darshan808"
          },
          {
            "sha": "8fbbec937d30b6d87f8ced1259886c2e3a2c8641",
            "date": "2025-01-22T14:11:32Z",
            "author_login": "jtpio"
          },
          {
            "sha": "a3629937078ad30030ed28f88471fa75c0919039",
            "date": "2025-01-20T15:39:42Z",
            "author_login": "krassowski"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-23",
    "description": "JupyterLab is an extensible environment for interactive and reproducible computing, based on the Jupyter Notebook and Architecture. Users of JupyterLab who click on a malicious link may get their `Authorization` and `XSRFToken` tokens exposed to a third party when running an older `jupyter-server` version. JupyterLab versions 4.1.0b2, 4.0.11, and 3.6.7 are patched. No workaround has been identified, however users should ensure to upgrade `jupyter-server` to version 2.7.2 or newer which includes a redirect vulnerability fix.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-19T21:15:09.870",
    "last_modified": "2024-11-21T08:56:15.343",
    "fix_date": "2024-01-19T13:15:40Z"
  },
  "references": [
    {
      "url": "https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UQJKNRDRFMKGVRIYNNN6CKMNJDNYWO2H/",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UQJKNRDRFMKGVRIYNNN6CKMNJDNYWO2H/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.510977",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "jupyterlab",
    "owner": "jupyterlab",
    "created_at": "2016-06-03T20:09:17Z",
    "updated_at": "2025-01-26T07:33:53Z",
    "pushed_at": "2025-01-24T21:14:35Z",
    "size": 263707,
    "stars": 14337,
    "forks": 3470,
    "open_issues": 2568,
    "watchers": 14337,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.0.x",
      "1.1.x",
      "1.2.x",
      "2.0.x",
      "2.1.x",
      "2.2.x",
      "2.3.x",
      "3.0.x",
      "3.1.x",
      "3.2.x",
      "3.3.x",
      "3.4.x",
      "3.5.x",
      "3.6.x",
      "4.0.x",
      "4.1.x",
      "4.2.x",
      "4.3.x",
      "main"
    ],
    "languages": {
      "TypeScript": 7491785,
      "Python": 430752,
      "CSS": 396313,
      "JavaScript": 180238,
      "Jupyter Notebook": 105512,
      "Shell": 25558,
      "HTML": 17939,
      "PowerShell": 2937,
      "Dockerfile": 2255,
      "Makefile": 1628
    },
    "commit_activity": {
      "total_commits_last_year": 691,
      "avg_commits_per_week": 13.288461538461538,
      "days_active_last_year": 196
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:47:07.024619"
  }
}