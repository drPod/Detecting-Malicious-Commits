{
  "cve_id": "CVE-2024-23325",
  "github_data": {
    "repository": "envoyproxy/envoy",
    "fix_commit": "bacd3107455b8d387889467725eb72aa0d5b5237",
    "related_commits": [
      "bacd3107455b8d387889467725eb72aa0d5b5237",
      "bacd3107455b8d387889467725eb72aa0d5b5237"
    ],
    "patch_url": "https://github.com/envoyproxy/envoy/commit/bacd3107455b8d387889467725eb72aa0d5b5237.patch",
    "fix_commit_details": {
      "sha": "bacd3107455b8d387889467725eb72aa0d5b5237",
      "commit_date": "2023-10-18T21:35:22Z",
      "author": {
        "login": "ggreenway",
        "type": "User",
        "stats": {
          "total_commits": 232,
          "average_weekly_commits": 0.5260770975056689,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 138
        }
      },
      "commit_message": {
        "title": "Fix crash when proxy protocol receives an address type that isn't",
        "length": 294,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 289,
        "additions": 225,
        "deletions": 64
      },
      "files": [
        {
          "filename": "changelogs/current.yaml",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -58,6 +58,15 @@ bug_fixes:\n - area: http\n   change: |\n     Fixed crash when HTTP request idle and per try timeouts occurs within backoff interval.\n+- area: proxy_protocol\n+  change: |\n+    Fix crash due to uncaught exception when the operating system does not support an address type (such as IPv6) that is\n+    received in a proxy protocol header. Connections will instead be dropped/reset.\n+- area: tls\n+  change: |\n+    Fix crash due to uncaught exception when the operating system does not support an address type (such as IPv6) that is\n+    received in an mTLS client cert IP SAN. These SANs will be ignored. This applies only when using formatter\n+    ``%DOWNSTREAM_PEER_IP_SAN%``.\n \n removed_config_or_runtime:\n # *Normally occurs at the end of the* :ref:`deprecation period <deprecated>`"
        },
        {
          "filename": "source/common/network/BUILD",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@ envoy_cc_library(\n         \":socket_interface_lib\",\n         \"//envoy/network:address_interface\",\n         \"//source/common/common:assert_lib\",\n+        \"//source/common/common:cleanup_lib\",\n         \"//source/common/common:safe_memcpy_lib\",\n         \"//source/common/common:statusor_lib\",\n         \"//source/common/common:thread_lib\","
        },
        {
          "filename": "source/common/network/address_impl.cc",
          "status": "modified",
          "additions": 22,
          "deletions": 2,
          "patch": "@@ -212,9 +212,19 @@ std::string Ipv4Instance::sockaddrToString(const sockaddr_in& addr) {\n   return {start, end};\n }\n \n+namespace {\n+bool force_ipv4_unsupported_for_test = false;\n+}\n+\n+Cleanup Ipv4Instance::forceProtocolUnsupportedForTest(bool new_val) {\n+  bool old_val = force_ipv4_unsupported_for_test;\n+  force_ipv4_unsupported_for_test = new_val;\n+  return Cleanup([old_val]() { force_ipv4_unsupported_for_test = old_val; });\n+}\n+\n absl::Status Ipv4Instance::validateProtocolSupported() {\n   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);\n-  if (supported) {\n+  if (supported && !force_ipv4_unsupported_for_test) {\n     return absl::OkStatus();\n   }\n   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");\n@@ -324,9 +334,19 @@ Ipv6Instance::Ipv6Instance(absl::Status& status, const sockaddr_in6& address, bo\n   initHelper(address, v6only);\n }\n \n+namespace {\n+bool force_ipv6_unsupported_for_test = false;\n+}\n+\n+Cleanup Ipv6Instance::forceProtocolUnsupportedForTest(bool new_val) {\n+  bool old_val = force_ipv6_unsupported_for_test;\n+  force_ipv6_unsupported_for_test = new_val;\n+  return Cleanup([old_val]() { force_ipv6_unsupported_for_test = old_val; });\n+}\n+\n absl::Status Ipv6Instance::validateProtocolSupported() {\n   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);\n-  if (supported) {\n+  if (supported && !force_ipv6_unsupported_for_test) {\n     return absl::OkStatus();\n   }\n   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");"
        },
        {
          "filename": "source/common/network/address_impl.h",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -11,12 +11,16 @@\n #include \"envoy/network/socket.h\"\n \n #include \"source/common/common/assert.h\"\n+#include \"source/common/common/cleanup.h\"\n #include \"source/common/common/statusor.h\"\n \n namespace Envoy {\n namespace Network {\n namespace Address {\n \n+// Add an address-specific version for easier searching.\n+#define TRY_NEEDS_AUDIT_ADDRESS TRY_NEEDS_AUDIT\n+\n /**\n  * Check whether we are a) on Android or an Apple platform and b) configured via runtime to always\n  * use v6 sockets.\n@@ -144,6 +148,12 @@ class Ipv4Instance : public InstanceBase {\n   // given address if not.\n   static absl::Status validateProtocolSupported();\n \n+  /**\n+   * For use in tests only.\n+   * Force validateProtocolSupported() to return false for IPv4.\n+   */\n+  static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);\n+\n private:\n   /**\n    * Construct from an existing unix IPv4 socket address (IP v4 address and port).\n@@ -226,6 +236,12 @@ class Ipv6Instance : public InstanceBase {\n   // Validate that IPv6 is supported on this platform\n   static absl::Status validateProtocolSupported();\n \n+  /**\n+   * For use in tests only.\n+   * Force validateProtocolSupported() to return false for IPv6.\n+   */\n+  static Envoy::Cleanup forceProtocolUnsupportedForTest(bool new_val);\n+\n private:\n   /**\n    * Construct from an existing unix IPv6 socket address (IP v6 address and port)."
        },
        {
          "filename": "source/extensions/filters/listener/proxy_protocol/proxy_protocol.cc",
          "status": "modified",
          "additions": 28,
          "deletions": 10,
          "patch": "@@ -276,11 +276,21 @@ bool Filter::parseV2Header(const char* buf) {\n         la4.sin_family = AF_INET;\n         la4.sin_port = v4->dst_port;\n         la4.sin_addr.s_addr = v4->dst_addr;\n-        proxy_protocol_header_.emplace(\n-            WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,\n-                       hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,\n-                       std::make_shared<Network::Address::Ipv4Instance>(&ra4),\n-                       std::make_shared<Network::Address::Ipv4Instance>(&la4)});\n+\n+        TRY_NEEDS_AUDIT_ADDRESS {\n+          // TODO(ggreenway): make this work without requiring operating system support for an\n+          // address family.\n+          proxy_protocol_header_.emplace(WireHeader{\n+              PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,\n+              hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,\n+              std::make_shared<Network::Address::Ipv4Instance>(&ra4),\n+              std::make_shared<Network::Address::Ipv4Instance>(&la4)});\n+        }\n+        END_TRY CATCH(const EnvoyException& e, {\n+          ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());\n+          return false;\n+        });\n+\n         return true;\n       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {\n         PACKED_STRUCT(struct pp_ipv6_addr {\n@@ -302,11 +312,19 @@ bool Filter::parseV2Header(const char* buf) {\n         la6.sin6_port = v6->dst_port;\n         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));\n \n-        proxy_protocol_header_.emplace(WireHeader{\n-            PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,\n-            hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,\n-            std::make_shared<Network::Address::Ipv6Instance>(ra6),\n-            std::make_shared<Network::Address::Ipv6Instance>(la6)});\n+        TRY_NEEDS_AUDIT_ADDRESS {\n+          proxy_protocol_header_.emplace(WireHeader{\n+              PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,\n+              hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,\n+              std::make_shared<Network::Address::Ipv6Instance>(ra6),\n+              std::make_shared<Network::Address::Ipv6Instance>(la6)});\n+        }\n+        END_TRY CATCH(const EnvoyException& e, {\n+          // TODO(ggreenway): make this work without requiring operating system support for an\n+          // address family.\n+          ENVOY_LOG(debug, \"Proxy protocol failure: {}\", e.what());\n+          return false;\n+        });\n         return true;\n       }\n     }"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/connection_info_impl_base.cc",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -185,7 +185,7 @@ absl::Span<const std::string> ConnectionInfoImplBase::ipSansPeerCertificate() co\n     ASSERT(cached_ip_san_peer_certificate_.empty());\n     return cached_ip_san_peer_certificate_;\n   }\n-  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);\n+  cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD, true);\n   return cached_ip_san_peer_certificate_;\n }\n "
        },
        {
          "filename": "source/extensions/transport_sockets/tls/utility.cc",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -167,7 +167,7 @@ std::string Utility::getSerialNumberFromCertificate(X509& cert) {\n   return \"\";\n }\n \n-std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {\n+std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {\n   std::vector<std::string> subject_alt_names;\n   bssl::UniquePtr<GENERAL_NAMES> san_names(\n       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));\n@@ -176,7 +176,15 @@ std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {\n   }\n   for (const GENERAL_NAME* san : san_names.get()) {\n     if (san->type == type) {\n-      subject_alt_names.push_back(generalNameAsString(san));\n+      if (skip_unsupported) {\n+        // An IP SAN for an unsupported IP version will throw an exception.\n+        // TODO(ggreenway): remove this when IP address construction no longer throws.\n+        TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }\n+        END_TRY CATCH(const EnvoyException& e,\n+                      { ENVOY_LOG_MISC(debug, \"Error reading SAN, value skipped: {}\", e.what()); });\n+      } else {\n+        subject_alt_names.push_back(generalNameAsString(san));\n+      }\n     }\n   }\n   return subject_alt_names;"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/utility.h",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -52,9 +52,11 @@ std::string getSerialNumberFromCertificate(X509& cert);\n  * Retrieves the subject alternate names of a certificate.\n  * @param cert the certificate\n  * @param type type of subject alternate name\n+ * @param skip_unsupported If true and a name is for an unsupported (on this host) IP version,\n+ *   omit that name from the return value. If false, an exception will be thrown in this situation.\n  * @return std::vector returns the list of subject alternate names.\n  */\n-std::vector<std::string> getSubjectAltNames(X509& cert, int type);\n+std::vector<std::string> getSubjectAltNames(X509& cert, int type, bool skip_unsupported = false);\n \n /**\n  * Converts the Subject Alternate Name to string."
        },
        {
          "filename": "test/config/integration/certs/clientcert.cfg",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -39,3 +39,5 @@ URI.1 = spiffe://lyft.com/frontend-team\n URI.2 = http://frontend.lyft.com\n DNS.1 = lyft.com\n DNS.2 = www.lyft.com\n+IP.1 = 1.2.3.4\n+IP.2 = 0:1:2:3::4"
        },
        {
          "filename": "test/config/integration/certs/clientcert.pem",
          "status": "modified",
          "additions": 19,
          "deletions": 19,
          "patch": "@@ -1,27 +1,27 @@\n -----BEGIN CERTIFICATE-----\n-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\n-ahwsslCKM3xGY4ax9Q==\n+Lmx5ZnQuY29thwQBAgMEhxAAAAABAAIAAwAAAAAAAAAEMB0GA1UdDgQWBBTl8J5P\n+CF97S4cY6TytejTb3sngmTAfBgNVHSMEGDAWgBQdDTmYdOz7TqwMpoOli3Dmj78y\n+gjANBgkqhkiG9w0BAQsFAAOCAQEAsMuSPKvSx/uDRIHWNQhUWSHfa4nfonyGBmnV\n+VvC7Xatq3kZ1MCedzxHbqOOdlO4cSVq+eOHlVzWJUsJSj1J8hcVh3vZp6GFoRZgU\n+F93g2dlgkmEEqEFB4qI71PwjC6amEV+xY21v/QPEouI1VumUnMnAV81G5uJDzPtn\n+gmNyM6hnvKGufpaovZFeXsB0ZUnYPz+4QdKwHTErsV8uUdeJUhFHg1NjCmrqQAmm\n+PG0G9JOi/dY/X5/LfGomAb7E+wuJFKHFP7gE6JvWi5M1Y1IlW1tCgN3dSCdCaUZm\n+JPKWR3x+gYOFHfKNpdG/zRwOrClgISmDzZiXXFSHCn95tFocXA==\n -----END CERTIFICATE-----"
        },
        {
          "filename": "test/config/integration/certs/clientcert_hash.h",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,5 +1,5 @@\n #pragma once\n \n // NOLINT(namespace-envoy)\n-constexpr char TEST_CLIENT_CERT_HASH[] = \"4A:FD:3A:AE:4B:36:08:A6:CB:41:4F:20:8A:86:1F:3B:43:6F:2F:\"\n-                                         \"12:49:82:8D:9F:F6:FA:53:4D:23:26:FB:43\";\n+constexpr char TEST_CLIENT_CERT_HASH[] = \"F6:31:41:AA:8E:E3:D7:AC:AE:A8:AF:AD:C9:11:CD:0A:83:72:03:\"\n+                                         \"6D:4B:B3:72:4F:6F:71:E1:ED:18:5B:92:AA\";"
        },
        {
          "filename": "test/config/integration/certs/clientkey.pem",
          "status": "modified",
          "additions": 28,
          "deletions": 27,
          "patch": "@@ -1,27 +1,28 @@\n------BEGIN RSA PRIVATE KEY-----\n-MIIEpAIBAAKCAQEA7A5D3pTadhwD6VXl4WYerCRRUf9vnCf8VeAAsF9PapKfanMy\n-aqPdEd5uo3gju6JEY+aTt5UfGS1b/K0UN2T4DBsYQ4/y9aX3NHvem94pyEdVJ1I0\n-nhGRemAMtlgMMOP8lDE3MPA8Pjd4hTD1IqP4zD2dNG/SGbf2GGGGMGa859t1aNA8\n-yy5IOoQA8YTTo+mKtN3Bk1Ky4GN++jrN2cnFODN38J/Uog11rg/GSXD0z0K4pAx4\n-vBV/AwM14ja4nuSfV2mw6FIMFTssSV5JYYYCVzJwPMu7L/n+spx0430wpQr7zasn\n-5wwToj4NipLU3P7Bj23x9qtcu4YrjWfQbiqvUwIDAQABAoIBAQDKY5ixODLuXSrF\n-Xo6QaLwXn7PReA67dlUVU8+DaNRwbXIdFNO/NuuOLIXzxkfs0j2M4d744fQd5BQg\n-Wk0hCYLa7kgpdTw8faWr7CB6x0pPm0lZQ1Q1yp5OrBd6J5ecO30NmfzWCsO8HFdK\n-6yTiJHBmvNUSZmVfA6kOUl95FD0XFB7J/4MPmE0UqEg5IhoWxpH9cEV8yll/bZZL\n-FHzA1cfwjtcHp5kHm/7IYlWqpShpdsquMmZt8vHFaoGvT5pms/AtAFjjDcW5dFpZ\n-GipS5D/3oPMXWbhrzMoIe8ERVBmlKPVoUmxUNIomgRSTP6/+mgcgojRRqcLW3l0W\n-KXi4i1dhAoGBAPmgVd+2K5vox09EbYaD1KAZpwuW61PQ6RI3wU5YCf84FoNAzK+e\n-KHSI+5Vo7JkwwiP7MSIJhiODG9VRnfou06NPEY4jllcMXp73PVGhOzsnHTqsbgps\n-Yg9tXsX5jQDx60yIOHf7halAz3vpEldQ6YecLscYV0Oz5i84gl/jee5JAoGBAPIV\n-Ofuf88WjErvuAxqIJWx85afr4B8YfChKHIVEx1eI6o89xuB16FjFzKAhHe9SJdfk\n-YVOwYD/9MRZ5+ZZAsRrKTHbD3VX20c0ECX9++/Sz2LGMewgvqiscpfGzDTsTJIVA\n-Ep31IAXmAUsmBAQAbuXxtbpKgU8Wi3mSp4nFzKC7AoGAUlpgGkbqSixYnMERdSBG\n-5G6yGnO2vVcdnWIBhwwqeCWT38df/8wowpFylo8gB0X7to0nX3hO5aZaZ1zexmvu\n-bGEohIEfFybAjKc6dpS/irtTvEiooQ2yqC5H5v52U0p8eyoxnvu+0+DK0rFI2L+b\n-255eHFbeazqNhSSadnIAhukCgYEAtfKAPv/sb0nupbLxQDq9rfl9fqVJMPXtMzbo\n-kr2r+b2dVgW/eSsFc9tOvbfGUP50FPzAre7tmIqLH3KTxXtf4VvU9pqlu5uj+iwj\n-m2Dsq/GUV3XXbsKsanTAwJWrxw/PLhuHIpN++w/xPvMWp49PyqHNzXN8Ft5B/CDe\n-rS0ubEsCgYA5kvmEDFYLF4TU7xg3QJ08+6+tJ+HZdvCBzE7RGJD8l5ZfpJuE6s9E\n-aW09E+65hSMaE85MpiM/s08quiMQeR6i7UWeN4GwoQznH1f9zUAuyP1J1Iv2knj7\n-lZ+oGk0EgnjkiIxo3ppAoKGz2/9Oi09lsEbdIBHvC56DAu44uOP50A==\n------END RSA PRIVATE KEY-----\n+-----BEGIN PRIVATE KEY-----\n+MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC9K5Xk1JJlLO4P\n+zwPbJLlmaGukaCvzX8MHwlp4ioIl/skWXAcvf/+h5Tg94y3sw+rafrJodVMyLt6+\n+vf69Hg4wPj7MUCgxR+vSye+Amhbcfa42qWN1TcLhN4zXJXCsw54zVR67zQ/mACJC\n+4UW18gaoN5+09QtsLVSLOczsu/Yrve71bl++OCA7CLllFj6RSJn4HRC3gAckavCD\n+d9945Y0396Tdxn4w3/WiizOo0xkYrTVT2Npjnui6ZFJ7R7ONsHlAQmdgd/XPKJV1\n+nhKAiS9+RDbifyZcaWpj/jpSv3koaK7BRPlB/LWETHjZG/GRHRR6IWEBjvFieVQc\n+OHeO5aEbAgMBAAECggEARVEny2KDRFSq5RsPyCjUUOy5aNSNKlBwSDMU8K+cUizi\n+5XESZvrpopq6OZ850FTYBXlAiZtYQX7AOzemlQji3RWp8Db9C1XV2XcKbl7IOsJI\n+6Jm4Kp80Zk9zKdD70SqbGSc7LEjPZxGsfEJMx4donhJH0MisB1cy8BNdfm+/nDYK\n+NsezfOYAD4UkX1NcrdfwLsWimZHPifwxL+va5cV3FiWO3S861/aE0pLhh+AJFYGI\n+3lEZxr6Gh+uaARcV4YNZPogYbrc8wJWP/6uR8pDwjqS8aUTBfyo1wUDd6bTvlQDv\n++nKBiVjmWPgY6TlZ/Okp+H28fO3zqoXExE6KJamxmQKBgQDzV5jIemNDUrxodc1i\n+AQIchTbchvGiSpLyS2PY1W0vyYpyc5mugvzgaHPVEtaQTtR+QHWrYEFksOBZeIqX\n+rQGTDk6jGWBzI7qa/itqr9jydZsMYgJ7eqGpiSsiD0ka65xO+Ho6FkZAV11+qPyE\n+QmPD3Izj/58pSod4PADFQSP18wKBgQDHAp9Sd9fGCn/RHRVyf1nao2ZeKCQUDyyj\n+g+uCIswhE8lT7C5K76FPxZrV6enpTkLjEnMdRrPl4fQ5xl0SPAR/gaZXhM1U4sjo\n+w0dWITeMHwR7HqwbpumNbMccZMGA7o1Ua/k7GPIyD2UE7hiJyJRNyfeN09/cC18p\n+EjHcSs4qOQKBgCwU0jh+8zxe4IKL1IjMZfWErEuGpn8fwz7hKVU+VGkzuUDCcDSM\n+xgJg6ZrPrs61eQjl5GsHJNF4uSt8Cp8vV/mrvdMN5cr1zfgF0xegg0xowY2cs5Zq\n+wJ5Vmtqwqi2WQNqNaJbdMhy1ttobAqNy41+3tE4ZIFv6hE/jjsAs7LbBAoGAXy64\n+5uec0wKYiXqglGemoTS/tE78mn97eSWSUWa1PSjKhRIUPhEIlS/M030SPF0LDrH3\n+TsxPJKcCeVOPljYQbK+k0H0a+/uP3gvwJZiziZgYO467AGq/j720Kbdi+XifLf6K\n+cKKIzDqitU3vfI7rp5zugu4QRp1FwU4LfPJmUrkCgYAzzBz3K7jg4JPdY7Od22SQ\n+F/eToChPu60B9uQciR6gGwR1ry2sVSlK0Y1DMFMBCFEqPfJFO4OwZP0NWbRd13X1\n+9nUvpVoGxxJ51fIdMrPPm0G6f8HS79JhOGUp9tYsQ+LPCcnrrH2ZDGQYxZsSXqbe\n+5qc2rk4Sgt8Ua/oVrxghzA==\n+-----END PRIVATE KEY-----"
        },
        {
          "filename": "test/extensions/filters/listener/proxy_protocol/proxy_protocol_test.cc",
          "status": "modified",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@\n #include \"source/common/buffer/buffer_impl.h\"\n #include \"source/common/event/dispatcher_impl.h\"\n #include \"source/common/listener_manager/connection_handler_impl.h\"\n+#include \"source/common/network/address_impl.h\"\n #include \"source/common/network/connection_balancer_impl.h\"\n #include \"source/common/network/listen_socket_impl.h\"\n #include \"source/common/network/proxy_protocol_filter_state.h\"\n@@ -236,6 +237,20 @@ INSTANTIATE_TEST_SUITE_P(IpVersions, ProxyProtocolTest,\n                          testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),\n                          TestUtility::ipTestParamsToString);\n \n+TEST_P(ProxyProtocolTest, V1UnsupportedIPv4) {\n+  connect(false);\n+  Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);\n+  write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");\n+  expectProxyProtoError();\n+}\n+\n+TEST_P(ProxyProtocolTest, V1UnsupportedIPv6) {\n+  connect(false);\n+  Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);\n+  write(\"PROXY TCP6 1:2:3::4 5:6::7:8 65535 1234\\r\\nmore data\");\n+  expectProxyProtoError();\n+}\n+\n TEST_P(ProxyProtocolTest, V1Basic) {\n   connect();\n   write(\"PROXY TCP4 1.2.3.4 253.253.253.253 65535 1234\\r\\nmore data\");\n@@ -390,6 +405,34 @@ TEST_P(ProxyProtocolTest, V2BasicV6) {\n   disconnect();\n }\n \n+TEST_P(ProxyProtocolTest, V2UnsupportedIPv4) {\n+  // A well-formed ipv4/tcp message, no extensions\n+  constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,\n+                                0x54, 0x0a, 0x21, 0x11, 0x00, 0x0c, 0x01, 0x02, 0x03, 0x04,\n+                                0x00, 0x01, 0x01, 0x02, 0x03, 0x05, 0x00, 0x02, 'm',  'o',\n+                                'r',  'e',  ' ',  'd',  'a',  't',  'a'};\n+\n+  connect(false);\n+  Cleanup cleaner = Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest(true);\n+  write(buffer, sizeof(buffer));\n+  expectProxyProtoError();\n+}\n+\n+TEST_P(ProxyProtocolTest, V2UnsupportedIPv6) {\n+  // A well-formed ipv6/tcp message, no extensions\n+  constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49, 0x54,\n+                                0x0a, 0x21, 0x22, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,\n+                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,\n+                                0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,\n+                                0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 'm',  'o',  'r',\n+                                'e',  ' ',  'd',  'a',  't',  'a'};\n+\n+  connect(false);\n+  Cleanup cleaner = Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest(true);\n+  write(buffer, sizeof(buffer));\n+  expectProxyProtoError();\n+}\n+\n TEST_P(ProxyProtocolTest, V2UnsupportedAF) {\n   // A well-formed message with an unsupported address family\n   constexpr uint8_t buffer[] = {0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x0d, 0x0a, 0x51, 0x55, 0x49,"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc",
          "status": "modified",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -462,6 +462,47 @@ TEST_P(SslIntegrationTest, RouterHeaderOnlyRequestAndResponseWithSni) {\n   checkStats();\n }\n \n+TEST_P(SslIntegrationTest, LogPeerIpSanUnsupportedIpVersion) {\n+  useListenerAccessLog(\"%DOWNSTREAM_PEER_IP_SAN%\");\n+  config_helper_.addFilter(\"name: sni-to-header-filter\");\n+  ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {\n+    return makeSslClientConnection(ClientSslTransportOptions().setSni(\"host.com\"));\n+  };\n+  initialize();\n+  codec_client_ = makeHttpConnection(\n+      makeSslClientConnection(ClientSslTransportOptions().setSni(\"www.host.com\")));\n+\n+  // Disable IP version for the alternate type from the test. The client cert has both an ipv4 and\n+  // an ipv6 SAN. This must happen after the client has loaded the cert to send as the client cert.\n+  auto disabler = (version_ == Network::Address::IpVersion::v4)\n+                      ? Network::Address::Ipv6Instance::forceProtocolUnsupportedForTest\n+                      : Network::Address::Ipv4Instance::forceProtocolUnsupportedForTest;\n+  Cleanup cleaner(disabler(true));\n+\n+  Http::TestRequestHeaderMapImpl request_headers{\n+      {\":method\", \"GET\"}, {\":path\", \"/\"}, {\":scheme\", \"https\"}, {\":authority\", \"host.com\"}};\n+  auto response = codec_client_->makeHeaderOnlyRequest(request_headers);\n+  waitForNextUpstreamRequest();\n+\n+  EXPECT_EQ(\"www.host.com\", upstream_request_->headers()\n+                                .get(Http::LowerCaseString(\"x-envoy-client-sni\"))[0]\n+                                ->value()\n+                                .getStringView());\n+\n+  Http::TestResponseHeaderMapImpl response_headers{{\":status\", \"200\"}};\n+  upstream_request_->encodeHeaders(response_headers, true);\n+  RELEASE_ASSERT(response->waitForEndStream(), \"unexpected timeout\");\n+  codec_client_->close();\n+\n+  checkStats();\n+  auto result = waitForAccessLog(listener_access_log_name_);\n+  if (version_ == Network::Address::IpVersion::v4) {\n+    EXPECT_EQ(result, \"1.2.3.4\");\n+  } else {\n+    EXPECT_EQ(result, \"0:1:2:3::4\");\n+  }\n+}\n+\n TEST_P(SslIntegrationTest, AsyncCertValidationSucceeds) {\n   // Config client to use an async cert validator which defer the actual validation by 5ms.\n   auto custom_validator_config = std::make_unique<envoy::config::core::v3::TypedExtensionConfig>("
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 6,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "03cb8d59f80a2a75d9e1289c909e5979a79ace91",
            "date": "2025-01-13T06:31:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3487b225f48717dd5a2babb5f921df4353633cee",
            "date": "2025-01-13T06:10:11Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "acdcfc6ac262ee4087a652532b93922550efb061",
            "date": "2025-01-10T07:01:57Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "02633ec5db8d6a3f24fa6752dff36b4fb5f0800e",
            "date": "2025-01-10T07:02:42Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e62004f8710e90e255495ae44caab1a778f01b9e",
            "date": "2025-01-10T07:03:28Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-248",
    "description": "Envoy is a high-performance edge/middle/service proxy. Envoy crashes in Proxy protocol when using an address type that isn\u2019t supported by the OS. Envoy is susceptible to crashing on a host with IPv6 disabled and a listener config with proxy protocol enabled when it receives a request where the client presents its IPv6 address.  It is valid for a client to present its IPv6 address to a target server even though the whole chain is connected via IPv4. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-09T23:15:09.437",
    "last_modified": "2024-11-21T08:57:30.717",
    "fix_date": "2023-10-18T21:35:22Z"
  },
  "references": [
    {
      "url": "https://github.com/envoyproxy/envoy/commit/bacd3107455b8d387889467725eb72aa0d5b5237",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/commit/bacd3107455b8d387889467725eb72aa0d5b5237",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.109911",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "envoy",
    "owner": "envoyproxy",
    "created_at": "2016-08-08T15:07:24Z",
    "updated_at": "2025-01-14T12:22:22Z",
    "pushed_at": "2025-01-14T05:36:17Z",
    "size": 240648,
    "stars": 25321,
    "forks": 4848,
    "open_issues": 1639,
    "watchers": 25321,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C++": 48293036,
      "Starlark": 3105942,
      "Java": 1320095,
      "Python": 605206,
      "Assembly": 327095,
      "Kotlin": 309606,
      "Swift": 250537,
      "Shell": 229801,
      "Go": 183281,
      "Rust": 107190,
      "JavaScript": 66339,
      "C": 61597,
      "Objective-C++": 55490,
      "Objective-C": 48840,
      "Jinja": 47798,
      "Smarty": 3528,
      "CSS": 2927,
      "HTML": 1522,
      "Emacs Lisp": 966,
      "Dockerfile": 960,
      "Thrift": 748,
      "PureBasic": 472,
      "Batchfile": 439,
      "Makefile": 303
    },
    "commit_activity": {
      "total_commits_last_year": 3286,
      "avg_commits_per_week": 63.19230769230769,
      "days_active_last_year": 303
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:55:59.245540"
  }
}