{
  "cve_id": "CVE-2024-23346",
  "github_data": {
    "repository": "materialsproject/pymatgen",
    "fix_commit": "c231cbd3d5147ee920a37b6ee9dd236b376bcf5a",
    "related_commits": [
      "c231cbd3d5147ee920a37b6ee9dd236b376bcf5a",
      "c231cbd3d5147ee920a37b6ee9dd236b376bcf5a"
    ],
    "patch_url": "https://github.com/materialsproject/pymatgen/commit/c231cbd3d5147ee920a37b6ee9dd236b376bcf5a.patch",
    "fix_commit_details": {
      "sha": "c231cbd3d5147ee920a37b6ee9dd236b376bcf5a",
      "commit_date": "2024-02-12T02:03:53Z",
      "author": {
        "login": "mkhorton",
        "type": "User",
        "stats": {
          "total_commits": 1058,
          "average_weekly_commits": 1.5311143270622287,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 225
        }
      },
      "commit_message": {
        "title": "Update `JonesFaithfulTransformation` to use sympy",
        "length": 116,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 26,
        "additions": 18,
        "deletions": 8
      },
      "files": [
        {
          "filename": "pymatgen/symmetry/settings.py",
          "status": "modified",
          "additions": 18,
          "deletions": 8,
          "patch": "@@ -6,6 +6,8 @@\n from fractions import Fraction\n \n import numpy as np\n+from sympy import Matrix\n+from sympy.parsing.sympy_parser import parse_expr\n \n from pymatgen.core.lattice import Lattice\n from pymatgen.core.operations import MagSymmOp, SymmOp\n@@ -99,21 +101,29 @@ def parse_transformation_string(\n             b_change, o_shift = transformation_string.split(\";\")\n             basis_change = b_change.split(\",\")\n             origin_shift = o_shift.split(\",\")\n+\n             # add implicit multiplication symbols\n             basis_change = [\n                 re.sub(r\"(?<=\\w|\\))(?=\\() | (?<=\\))(?=\\w) | (?<=(\\d|a|b|c))(?=([abc]))\", r\"*\", string, flags=re.X)\n                 for string in basis_change\n             ]\n-            # should be fine to use eval here but be mindful for security\n-            # reasons\n-            # see http://lybniz2.sourceforge.net/safeeval.html\n-            # could replace with regex? or sympy expression?\n-            P = np.array([eval(x, {\"__builtins__\": None}, {\"a\": a, \"b\": b, \"c\": c}) for x in basis_change])\n-            P = P.transpose()  # by convention\n+\n+            # basic input sanitation\n+            allowed_chars = \"0123456789+-*/.abc()\"\n+            basis_change = [\"\".join([c for c in string if c in allowed_chars]) for string in basis_change]\n+\n+            # requires round-trip to sympy to evaluate\n+            # (alternatively, `numexpr` looks like a nice solution but requires an additional dependency)\n+            basis_change = [\n+                parse_expr(string).subs({\"a\": Matrix(a), \"b\": Matrix(b), \"c\": Matrix(c)}) for string in basis_change\n+            ]\n+            # convert back to numpy, perform transpose by convention\n+            P = np.array(basis_change, dtype=float).T[0]\n+\n             p = [float(Fraction(x)) for x in origin_shift]\n             return P, p\n-        except Exception:\n-            raise ValueError(\"Failed to parse transformation string.\")\n+        except Exception as exc:\n+            raise ValueError(f\"Failed to parse transformation string: {exc}\")\n \n     @property\n     def P(self) -> list[list[float]]:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0d14d7240e1d773e5ab9c4b9ecea690c8a637ff6",
            "date": "2025-01-09T21:14:09Z",
            "author_login": "shyuep"
          },
          {
            "sha": "a8c2b016ac5c665525d4eb184831c7da01fa07b4",
            "date": "2025-01-09T20:43:19Z",
            "author_login": "shyuep"
          },
          {
            "sha": "27230b18bbfdecbbb85bf1282ad900a7ee28fea1",
            "date": "2025-01-09T20:38:23Z",
            "author_login": "DanielYang59"
          },
          {
            "sha": "777a6b26550bcc818957fd908a8c99c7bd186330",
            "date": "2025-01-09T20:37:58Z",
            "author_login": "DanielYang59"
          },
          {
            "sha": "361106f53e0b27bd45808c5f59dffa044e2a9181",
            "date": "2025-01-09T20:35:15Z",
            "author_login": "DanielYang59"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-77",
    "description": "Pymatgen (Python Materials Genomics) is an open-source Python library for materials analysis. A critical security vulnerability exists in the `JonesFaithfulTransformation.from_transformation_str()` method within the `pymatgen` library prior to version 2024.2.20. This method insecurely utilizes `eval()` for processing input, enabling execution of arbitrary code when parsing untrusted input. Version 2024.2.20 fixes this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-21T17:15:09.377",
    "last_modified": "2024-11-21T08:57:33.443",
    "fix_date": "2024-02-12T02:03:53Z"
  },
  "references": [
    {
      "url": "https://github.com/materialsproject/pymatgen/blob/master/pymatgen/symmetry/settings.py#L97C1-L111C108",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/materialsproject/pymatgen/commit/c231cbd3d5147ee920a37b6ee9dd236b376bcf5a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/materialsproject/pymatgen/security/advisories/GHSA-vgv8-5cpj-qj2f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/materialsproject/pymatgen/blob/master/pymatgen/symmetry/settings.py#L97C1-L111C108",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/materialsproject/pymatgen/commit/c231cbd3d5147ee920a37b6ee9dd236b376bcf5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/materialsproject/pymatgen/security/advisories/GHSA-vgv8-5cpj-qj2f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.vicarius.io/vsociety/posts/critical-security-flaw-in-pymatgen-library-cve-2024-23346",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.141881",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pymatgen",
    "owner": "materialsproject",
    "created_at": "2011-10-23T04:10:39Z",
    "updated_at": "2025-01-11T19:03:29Z",
    "pushed_at": "2025-01-09T21:14:14Z",
    "size": 1081493,
    "stars": 1548,
    "forks": 874,
    "open_issues": 232,
    "watchers": 1548,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 10131457,
      "Cython": 45316
    },
    "commit_activity": {
      "total_commits_last_year": 828,
      "avg_commits_per_week": 15.923076923076923,
      "days_active_last_year": 196
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T22:22:45.244310"
  }
}