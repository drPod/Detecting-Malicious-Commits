{
  "cve_id": "CVE-2024-23634",
  "github_data": {
    "repository": "geoserver/geoserver",
    "fix_commit": "5d6af2f8ba9ad7dffae59575504a867159698772",
    "related_commits": [
      "5d6af2f8ba9ad7dffae59575504a867159698772",
      "c37f58fbacdfa0d581a6f99195585f70b1201f0a",
      "5d6af2f8ba9ad7dffae59575504a867159698772",
      "c37f58fbacdfa0d581a6f99195585f70b1201f0a"
    ],
    "patch_url": "https://github.com/geoserver/geoserver/commit/5d6af2f8ba9ad7dffae59575504a867159698772.patch",
    "fix_commit_details": {
      "sha": "5d6af2f8ba9ad7dffae59575504a867159698772",
      "commit_date": "2023-11-22T21:45:07Z",
      "author": {
        "login": "sikeoka",
        "type": "User",
        "stats": {
          "total_commits": 201,
          "average_weekly_commits": 0.29515418502202645,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 105
        }
      },
      "commit_message": {
        "title": "[GEOS-11213] Improve REST external upload method unzipping",
        "length": 58,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 273,
        "additions": 245,
        "deletions": 28
      },
      "files": [
        {
          "filename": "src/restconfig/src/main/java/org/geoserver/rest/catalog/AbstractStoreUploadController.java",
          "status": "modified",
          "additions": 29,
          "deletions": 9,
          "patch": "@@ -95,23 +95,36 @@ protected List<Resource> handleFileUpload(\n         // handle the case that the uploaded file was a zip file, if so unzip it\n         if (RESTUtils.isZipMediaType(request)) {\n             // rename to .zip if need be\n-            if (!uploadedFile.name().endsWith(\".zip\")) {\n+            if (external || !uploadedFile.name().endsWith(\".zip\")) {\n+                // for file and url upload methods, rename files in their current directory\n+                // for external upload method, copy the file into a directory where it can\n+                // be more safely unzipped\n                 Resource newUploadedFile =\n-                        uploadedFile\n-                                .parent()\n+                        (external ? directory : uploadedFile.parent())\n                                 .get(FilenameUtils.getBaseName(uploadedFile.path()) + \".zip\");\n                 String oldFileName = uploadedFile.name();\n-                if (!uploadedFile.renameTo(newUploadedFile)) {\n-                    String errorMessage =\n-                            \"Error renaming zip file from \"\n-                                    + oldFileName\n-                                    + \" -> \"\n-                                    + newUploadedFile.name();\n+                String errorMessage =\n+                        \"Error renaming zip file from \"\n+                                + oldFileName\n+                                + \" -> \"\n+                                + newUploadedFile.name();\n+                // do not rename or copy directories (only possible with external upload)\n+                // do not allow renaming/copying to overwrite an existing directory\n+                if (uploadedFile.getType() != Resource.Type.RESOURCE\n+                        || newUploadedFile.getType() == Resource.Type.DIRECTORY\n+                        || (!external && !uploadedFile.renameTo(newUploadedFile))) {\n                     throw new RestException(errorMessage, HttpStatus.INTERNAL_SERVER_ERROR);\n+                } else if (external) {\n+                    try {\n+                        Resources.copy(uploadedFile, newUploadedFile);\n+                    } catch (Exception e) {\n+                        throw new RestException(errorMessage, HttpStatus.INTERNAL_SERVER_ERROR, e);\n+                    }\n                 }\n                 uploadedFile = newUploadedFile;\n             }\n             // unzip the file\n+            boolean success = false;\n             try {\n                 // Unzipping of the file and, if it is a POST request, filling of the File List\n                 RESTUtils.unzipFile(uploadedFile, directory, workspace, store, files, external);\n@@ -121,6 +134,7 @@ protected List<Resource> handleFileUpload(\n                 Resource primaryFile = findPrimaryFile(directory, format);\n                 if (primaryFile != null) {\n                     uploadedFile = primaryFile;\n+                    success = true;\n                 } else {\n                     throw new RestException(\n                             \"Could not find appropriate \" + format + \" file in archive\",\n@@ -131,6 +145,12 @@ protected List<Resource> handleFileUpload(\n             } catch (Exception e) {\n                 throw new RestException(\n                         \"Error occured unzipping file\", HttpStatus.INTERNAL_SERVER_ERROR, e);\n+            } finally {\n+                if (!success) {\n+                    // clean up files if not successful\n+                    files.forEach(Resource::delete);\n+                    uploadedFile.delete();\n+                }\n             }\n         }\n         // If the File List is empty then the uploaded file must be added"
        },
        {
          "filename": "src/restconfig/src/main/java/org/geoserver/rest/catalog/CoverageStoreFileController.java",
          "status": "modified",
          "additions": 8,
          "deletions": 10,
          "patch": "@@ -443,16 +443,14 @@ protected List<Resource> doFileUpload(\n         boolean postRequest =\n                 request != null && HttpMethod.POST.name().equalsIgnoreCase(request.getMethod());\n \n-        // Prepare the directory only in case this is not an external upload\n-        if (method.isInline()) {\n-            // Mapping of the input directory\n-            if (method == UploadMethod.url) {\n-                // For URL upload method, workspace and StoreName are not considered\n-                directory = RESTUtils.createUploadRoot(catalog, null, null, postRequest);\n-            } else {\n-                directory =\n-                        RESTUtils.createUploadRoot(catalog, workspaceName, storeName, postRequest);\n-            }\n+        // Mapping of the input directory\n+        if (method == UploadMethod.url) {\n+            // For URL upload method, workspace and StoreName are not considered\n+            directory = RESTUtils.createUploadRoot(catalog, null, null, postRequest);\n+        } else if (method == UploadMethod.file\n+                || (method == UploadMethod.external && RESTUtils.isZipMediaType(request))) {\n+            // Prepare the directory for file upload or external upload of a zip file\n+            directory = RESTUtils.createUploadRoot(catalog, workspaceName, storeName, postRequest);\n         }\n         return handleFileUpload(\n                 storeName, workspaceName, filename, method, format, directory, request);"
        },
        {
          "filename": "src/restconfig/src/main/java/org/geoserver/rest/catalog/DataStoreFileController.java",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -40,6 +40,7 @@\n import org.geoserver.rest.RestException;\n import org.geoserver.rest.util.IOUtils;\n import org.geoserver.rest.util.RESTUploadPathMapper;\n+import org.geoserver.rest.util.RESTUtils;\n import org.geotools.api.data.DataAccess;\n import org.geotools.api.data.DataAccessFactory;\n import org.geotools.api.data.DataStore;\n@@ -567,15 +568,14 @@ protected List<Resource> doFileUpload(\n         boolean postRequest =\n                 request != null && HttpMethod.POST.name().equalsIgnoreCase(request.getMethod());\n \n-        // Prepare the directory only in case this is not an external upload\n-        if (method.isInline()) {\n-            // Mapping of the input directory\n-            if (method == UploadMethod.url) {\n-                // For URL upload method, workspace and StoreName are not considered\n-                directory = createFinalRoot(null, null, postRequest);\n-            } else {\n-                directory = createFinalRoot(workspaceName, storeName, postRequest);\n-            }\n+        // Mapping of the input directory\n+        if (method == UploadMethod.url) {\n+            // For URL upload method, workspace and StoreName are not considered\n+            directory = createFinalRoot(null, null, postRequest);\n+        } else if (method == UploadMethod.file\n+                || (method == UploadMethod.external && RESTUtils.isZipMediaType(request))) {\n+            // Prepare the directory for file upload or external upload of a zip file\n+            directory = createFinalRoot(workspaceName, storeName, postRequest);\n         }\n         return handleFileUpload(\n                 storeName, workspaceName, filename, method, format, directory, request);"
        },
        {
          "filename": "src/restconfig/src/test/java/org/geoserver/rest/catalog/CoverageStoreFileUploadTest.java",
          "status": "modified",
          "additions": 102,
          "deletions": 0,
          "patch": "@@ -5,9 +5,14 @@\n  */\n package org.geoserver.rest.catalog;\n \n+import static org.geoserver.rest.RestBaseController.ROOT_PATH;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.startsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.io.ByteArrayInputStream;\n@@ -50,15 +55,19 @@\n import org.geotools.util.URLs;\n import org.geotools.util.factory.GeoTools;\n import org.junit.Before;\n+import org.junit.ClassRule;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n import org.springframework.http.MediaType;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockHttpServletResponse;\n import org.w3c.dom.Document;\n \n public class CoverageStoreFileUploadTest extends CatalogRESTTestSupport {\n \n+    @ClassRule public static TemporaryFolder temp = new TemporaryFolder();\n+\n     @Override\n     protected void onSetUp(SystemTestData testData) throws Exception {\n         super.onSetUp(testData);\n@@ -83,6 +92,7 @@ public void cleanup() throws IOException {\n             removeStore(\n                     coverage.getStore().getWorkspace().getName(), coverage.getStore().getName());\n         }\n+        removeStore(\"sf\", \"usa\");\n     }\n \n     @Test\n@@ -754,4 +764,96 @@ static void testBBoxLayerConfiguration(\n             assertConsumer.accept(current, old);\n         }\n     }\n+\n+    @Test\n+    public void testWorldImageUploadExternalZipDirectory() throws Exception {\n+        // get the path to a directory\n+        File file = temp.getRoot();\n+        String body = file.getAbsolutePath();\n+        // the request will fail since it won't attempt to copy a directory\n+        MockHttpServletResponse response =\n+                putAsServletResponse(\n+                        ROOT_PATH + \"/workspaces/foo/coveragestores/bar/external.worldimage\",\n+                        body,\n+                        \"application/zip\");\n+        assertEquals(500, response.getStatus());\n+        assertThat(response.getContentAsString(), startsWith(\"Error renaming zip file from \"));\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file.exists());\n+    }\n+\n+    @Test\n+    public void testWorldImageUploadExternalZipExistingDirectory() throws Exception {\n+        // create a file to copy and get its path\n+        File file1 = temp.newFile(\"test1.zip\");\n+        String body = file1.getAbsolutePath();\n+        // create the file in the data directory\n+        File file2 = getResourceLoader().createDirectory(\"data/foo/bar1/test1.zip\");\n+        // the request will fail since it won't overwrite an existing zip file\n+        MockHttpServletResponse response =\n+                putAsServletResponse(\n+                        ROOT_PATH + \"/workspaces/foo/coveragestores/bar1/external.worldimage\",\n+                        body,\n+                        \"application/zip\");\n+        assertEquals(500, response.getStatus());\n+        assertThat(response.getContentAsString(), startsWith(\"Error renaming zip file from \"));\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file1.exists());\n+        // verify that the file in the data directory was not deleted\n+        assertTrue(\"The file in the data directory was unexpectedly deleted\", file2.isDirectory());\n+    }\n+\n+    @Test\n+    public void testWorldImageUploadExternalZipBadFile() throws Exception {\n+        // create a file that is not a valid zip file and get its path\n+        File file = temp.newFile(\"test2.zip\");\n+        String body = file.getAbsolutePath();\n+        // the request will fail unzipping since it is not a valid zip fail\n+        MockHttpServletResponse response =\n+                putAsServletResponse(\n+                        ROOT_PATH + \"/workspaces/foo/coveragestores/bar2/external.worldimage\",\n+                        body,\n+                        \"application/zip\");\n+        assertEquals(500, response.getStatus());\n+        assertEquals(\"Error occured unzipping file\", response.getContentAsString());\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file.exists());\n+        // verify that the zip file was deleted from the data directory\n+        assertEquals(\n+                \"The data directory file was not deleted\",\n+                Resource.Type.UNDEFINED,\n+                getResourceLoader().get(\"data/foo/bar2/test2.zip\").getType());\n+    }\n+\n+    @Test\n+    public void testWorldImageUploadExternalZipValid() throws Exception {\n+        // create a valid zip file and get its path\n+        File file = temp.newFile(\"test3.zip\");\n+        FileUtils.copyURLToFile(getClass().getResource(\"test-data/usa.zip\"), file);\n+        String body = file.getAbsolutePath();\n+        // verify that the coverage does not already exist\n+        assertNull(getCatalog().getCoverageStoreByName(\"sf\", \"usa\"));\n+        assertNull(getCatalog().getCoverageByName(\"sf\", \"usa\"));\n+        // the request should succeed\n+        MockHttpServletResponse response =\n+                putAsServletResponse(\n+                        ROOT_PATH + \"/workspaces/sf/coveragestores/usa/external.worldimage\",\n+                        body,\n+                        \"application/zip\");\n+        assertEquals(201, response.getStatus());\n+        assertEquals(MediaType.APPLICATION_XML_VALUE, response.getContentType());\n+        String content = response.getContentAsString();\n+        Document d = dom(new ByteArrayInputStream(content.getBytes()));\n+        assertEquals(\"coverageStore\", d.getDocumentElement().getNodeName());\n+        // verify that the coverage was created successfully\n+        assertNotNull(getCatalog().getCoverageStoreByName(\"sf\", \"usa\"));\n+        assertNotNull(getCatalog().getCoverageByName(\"sf\", \"usa\"));\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file.exists());\n+        // verify that the zip file was deleted from the data directory\n+        assertEquals(\n+                \"The data directory file was not deleted\",\n+                Resource.Type.UNDEFINED,\n+                getResourceLoader().get(\"data/sf/usa/test3.zip\").getType());\n+    }\n }"
        },
        {
          "filename": "src/restconfig/src/test/java/org/geoserver/rest/catalog/DataStoreFileUploadTest.java",
          "status": "modified",
          "additions": 97,
          "deletions": 0,
          "patch": "@@ -5,6 +5,8 @@\n package org.geoserver.rest.catalog;\n \n import static org.geoserver.rest.RestBaseController.ROOT_PATH;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.startsWith;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n@@ -19,6 +21,7 @@\n import java.io.OutputStreamWriter;\n import java.net.URL;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -34,18 +37,24 @@\n import org.geoserver.data.test.SystemTestData;\n import org.geoserver.filters.LoggingFilter;\n import org.geoserver.platform.GeoServerResourceLoader;\n+import org.geoserver.platform.resource.Resource;\n import org.geotools.util.URLs;\n import org.h2.tools.DeleteDbFiles;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.ClassRule;\n import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n import org.springframework.mock.web.MockHttpServletResponse;\n import org.w3c.dom.Document;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n \n public class DataStoreFileUploadTest extends CatalogRESTTestSupport {\n+\n+    @ClassRule public static TemporaryFolder temp = new TemporaryFolder();\n+\n     @Override\n     protected void onSetUp(SystemTestData testData) throws Exception {\n         super.onSetUp(testData);\n@@ -73,6 +82,7 @@ protected List<Filter> getFilters() {\n     public void removePdsDataStore() {\n         removeStore(\"gs\", \"pds\");\n         removeStore(\"gs\", \"store with spaces\");\n+        removeStore(\"gs\", \"san_andres_y_providencia\");\n     }\n \n     @After\n@@ -406,4 +416,91 @@ private byte[] appSchemaAlternativeMappingAsBytes() throws Exception {\n             return null;\n         }\n     }\n+\n+    @Test\n+    public void testShapefileUploadExternalZipDirectory() throws Exception {\n+        // get the path to a directory\n+        File file = temp.getRoot();\n+        String body = file.getAbsolutePath();\n+        // the request will fail since it won't attempt to copy a directory\n+        MockHttpServletResponse response =\n+                putAsServletResponse(\n+                        ROOT_PATH + \"/workspaces/foo/datastores/bar/external.shp\",\n+                        body,\n+                        \"application/zip\");\n+        assertEquals(500, response.getStatus());\n+        assertThat(response.getContentAsString(), startsWith(\"Error renaming zip file from \"));\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file.exists());\n+    }\n+\n+    @Test\n+    public void testShapefileUploadExternalZipExistingDirectory() throws Exception {\n+        // create a file to copy and get its path\n+        File file1 = temp.newFile(\"test1.zip\");\n+        String body = file1.getAbsolutePath();\n+        // create the file in the data directory\n+        File file2 = getResourceLoader().createDirectory(\"data/foo/bar1/test1.zip\");\n+        // the request will fail since it won't overwrite an existing zip file\n+        MockHttpServletResponse response =\n+                putAsServletResponse(\n+                        ROOT_PATH + \"/workspaces/foo/datastores/bar1/external.shp\",\n+                        body,\n+                        \"application/zip\");\n+        assertEquals(500, response.getStatus());\n+        assertThat(response.getContentAsString(), startsWith(\"Error renaming zip file from \"));\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file1.exists());\n+        // verify that the file in the data directory was not deleted\n+        assertTrue(\"The file in the data directory was unexpectedly deleted\", file2.isDirectory());\n+    }\n+\n+    @Test\n+    public void testShapefileUploadExternalZipBadFile() throws Exception {\n+        // create a file that is not a valid zip file and get its path\n+        File file = temp.newFile(\"test2.zip\");\n+        String body = file.getAbsolutePath();\n+        // the request will fail unzipping since it is not a valid zip fail\n+        MockHttpServletResponse response =\n+                putAsServletResponse(\n+                        ROOT_PATH + \"/workspaces/foo/datastores/bar2/external.shp\",\n+                        body,\n+                        \"application/zip\");\n+        assertEquals(500, response.getStatus());\n+        assertEquals(\"Error occured unzipping file\", response.getContentAsString());\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file.exists());\n+        // verify that the zip file was deleted from the data directory\n+        assertEquals(\n+                \"The data directory file was not deleted\",\n+                Resource.Type.UNDEFINED,\n+                getResourceLoader().get(\"data/foo/bar2/test2.zip\").getType());\n+    }\n+\n+    @Test\n+    public void testShapefileUploadExternalZipValid() throws Exception {\n+        // create a valid zip file and get its path\n+        File file = temp.newFile(\"test3.zip\");\n+        Files.write(file.toPath(), shpSanAndresShapefilesZipAsBytes());\n+        String body = file.getAbsolutePath();\n+        // verify that the datastore does not already exist\n+        Catalog cat = getCatalog();\n+        assertNull(cat.getDataStoreByName(\"gs\", \"san_andres_y_providencia\"));\n+        // the request should succeed\n+        put(\n+                ROOT_PATH + \"/workspaces/gs/datastores/san_andres_y_providencia/external.shp\",\n+                body,\n+                \"application/zip\");\n+        // verify that the datastore was created successfully\n+        DataStoreInfo ds = cat.getDataStoreByName(\"gs\", \"san_andres_y_providencia\");\n+        assertNotNull(ds);\n+        assertEquals(1, cat.getFeatureTypesByDataStore(ds).size());\n+        // verify that the external file was not deleted\n+        assertTrue(\"The external file was unexpectedly deleted\", file.exists());\n+        // verify that the zip file was deleted from the data directory\n+        assertEquals(\n+                \"The data directory file was not deleted\",\n+                Resource.Type.UNDEFINED,\n+                getResourceLoader().get(\"data/gs/san_andres_y_providencia/test3.zip\").getType());\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 5,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "159e5bf6afbfb9776f08cbe03d8ed09cb2d55507",
            "date": "2025-01-13T09:52:26Z",
            "author_login": "osgeoweblate"
          },
          {
            "sha": "87d9c20e47643bed223bf2a39d546b2a770c9b29",
            "date": "2025-01-13T09:01:15Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ae63d2cefb5114fec88c4831af61252fbef9dceb",
            "date": "2025-01-06T10:38:14Z",
            "author_login": "aaime"
          },
          {
            "sha": "31ed8d7da74d757bc199ed550ec52c2340781134",
            "date": "2025-01-08T11:01:24Z",
            "author_login": "aaime"
          },
          {
            "sha": "9eedb76aaa41300e4dcc0db538d26cd860ef8cc3",
            "date": "2025-01-08T04:32:41Z",
            "author_login": "jodygarnett"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:H",
    "cwe_id": "CWE-20",
    "description": "GeoServer is an open source software server written in Java that allows users to share and edit geospatial data. An arbitrary file renaming vulnerability exists in versions prior to 2.23.5 and 2.24.2 that enables an authenticated administrator with permissions to modify stores through the REST Coverage Store or Data Store API to rename arbitrary files and directories with a name that does not end in `.zip`. Store file uploads rename zip files to have a `.zip` extension if it doesn't already have one before unzipping the file.  This is fine for file and url upload methods where the files will be in a specific subdirectory of the data directory but, when using the external upload method, this allows arbitrary files and directories to be renamed. Renaming GeoServer files will most likely result in a denial of service, either completely preventing GeoServer from running or effectively deleting specific resources (such as a workspace, layer or style).  In some cases, renaming GeoServer files could revert to the default settings for that file which could be relatively harmless like removing contact information or have more serious consequences like allowing users to make OGC requests that the customized settings would have prevented them from making. The impact of renaming non-GeoServer files depends on the specific environment although some sort of denial of service is a likely outcome. Versions 2.23.5 and 2.24.2 contain a fix for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-20T16:15:07.857",
    "last_modified": "2024-12-17T20:20:50.693",
    "fix_date": "2023-11-22T21:45:07Z"
  },
  "references": [
    {
      "url": "https://github.com/geoserver/geoserver/commit/5d6af2f8ba9ad7dffae59575504a867159698772",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/commit/c37f58fbacdfa0d581a6f99195585f70b1201f0a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/pull/7289",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/security/advisories/GHSA-75m5-hh4r-q9gx",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://osgeo-org.atlassian.net/browse/GEOS-11213",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/commit/5d6af2f8ba9ad7dffae59575504a867159698772",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/commit/c37f58fbacdfa0d581a6f99195585f70b1201f0a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/pull/7289",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/geoserver/geoserver/security/advisories/GHSA-75m5-hh4r-q9gx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://osgeo-org.atlassian.net/browse/GEOS-11213",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.870206",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "geoserver",
    "owner": "geoserver",
    "created_at": "2011-11-10T19:56:06Z",
    "updated_at": "2025-01-13T14:27:07Z",
    "pushed_at": "2025-01-13T09:52:26Z",
    "size": 319674,
    "stars": 3917,
    "forks": 2193,
    "open_issues": 12,
    "watchers": 3917,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "2.1.x",
      "2.2.x",
      "2.3.x",
      "2.4.x",
      "2.5.x",
      "2.6.x",
      "2.6.0.x",
      "2.7.x",
      "2.7.1.x",
      "2.8.x",
      "2.9.x",
      "2.10.x",
      "2.11.x",
      "2.12.x",
      "2.13.x",
      "2.14.x",
      "2.15.x",
      "2.16.x",
      "2.17.x",
      "2.18.x",
      "2.19.x",
      "2.20.x",
      "2.21.x",
      "2.22.x",
      "2.23.x",
      "2.24.x",
      "2.25.x"
    ],
    "languages": {
      "Java": 44761611,
      "JavaScript": 1182828,
      "Scheme": 1167338,
      "HTML": 712425,
      "FreeMarker": 215786,
      "XSLT": 156026,
      "CSS": 120514,
      "Shell": 50551,
      "NSIS": 44051,
      "Python": 18317,
      "Makefile": 17825,
      "Batchfile": 13345,
      "AMPL": 8670,
      "Dockerfile": 3836,
      "Fluent": 117
    },
    "commit_activity": {
      "total_commits_last_year": 617,
      "avg_commits_per_week": 11.865384615384615,
      "days_active_last_year": 235
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:58:19.409251"
  }
}