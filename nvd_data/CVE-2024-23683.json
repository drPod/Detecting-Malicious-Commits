{
  "cve_id": "CVE-2024-23683",
  "github_data": {
    "repository": "ls1intum/Ares",
    "fix_commit": "af4f28a56e2fe600d8750b3b415352a0a3217392",
    "related_commits": [
      "af4f28a56e2fe600d8750b3b415352a0a3217392",
      "af4f28a56e2fe600d8750b3b415352a0a3217392"
    ],
    "patch_url": "https://github.com/ls1intum/Ares/commit/af4f28a56e2fe600d8750b3b415352a0a3217392.patch",
    "fix_commit_details": {
      "sha": "af4f28a56e2fe600d8750b3b415352a0a3217392",
      "commit_date": "2022-01-17T12:40:35Z",
      "author": {
        "login": "MaisiKoleni",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-883x-6fch-6wjx",
        "length": 641,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 53,
        "additions": 47,
        "deletions": 6
      },
      "files": [
        {
          "filename": "src/main/java/de/tum/in/test/api/security/ArtemisSecurityManager.java",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -511,19 +511,20 @@ private boolean isNotPrivileged(StackFrame stackFrame) {\n \t\treturn !AccessController.class.getName().equals(stackFrame.getClassName());\n \t}\n \n-\tprivate boolean isCallNotWhitelisted(String call) {\n+\tprivate boolean isCallNotWhitelisted(String className, String methodName) {\n+\t\tString call = className + \".\" + methodName; //$NON-NLS-1$\n \t\treturn SecurityConstants.STACK_BLACKLIST.stream().anyMatch(call::startsWith)\n \t\t\t\t|| (SecurityConstants.STACK_WHITELIST.stream().noneMatch(call::startsWith)\n-\t\t\t\t\t\t&& (configuration == null || !(configuration.whitelistedClassNames().contains(call)\n-\t\t\t\t\t\t\t\t|| configuration.trustedPackages().stream().anyMatch(pm -> pm.matches(call)))));\n+\t\t\t\t\t\t&& (configuration == null || !(configuration.whitelistedClassNames().contains(className)\n+\t\t\t\t\t\t\t\t|| configuration.trustedPackages().stream().anyMatch(pm -> pm.matches(className)))));\n \t}\n \n \tprivate boolean isStackFrameNotWhitelisted(StackFrame sf) {\n-\t\treturn isCallNotWhitelisted(sf.getClassName());\n+\t\treturn isCallNotWhitelisted(sf.getClassName(), sf.getMethodName());\n \t}\n \n \tprivate boolean isStackFrameNotWhitelisted(StackTraceElement ste) {\n-\t\treturn isCallNotWhitelisted(ste.getClassName());\n+\t\treturn isCallNotWhitelisted(ste.getClassName(), ste.getMethodName());\n \t}\n \n \tpublic static Optional<StackTraceElement> firstNonWhitelisted(StackTraceElement... elements) {"
        },
        {
          "filename": "src/main/java/de/tum/in/test/api/security/SecurityConstants.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -15,7 +15,8 @@ public final class SecurityConstants {\n \tstatic final Set<String> STACK_WHITELIST = Set.of(\"java.\", \"org.junit.\", \"jdk.\", \"org.eclipse.\", \"com.intellij\", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$\r\n \t\t\t\"org.assertj\", \"org.opentest4j.\", \"com.sun.\", \"sun.\", \"org.apache.\", \"de.tum.in.test.\", \"net.jqwik\", //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$\r\n \t\t\t\"ch.qos.logback\", \"org.jacoco\", \"javax.\", \"org.json\", SECURITY_PACKAGE_NAME); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\r\n-\tstatic final Set<String> STACK_BLACKLIST = Set.of(BlacklistedInvoker.class.getName());\r\n+\tstatic final Set<String> STACK_BLACKLIST = Set.of(BlacklistedInvoker.class.getName(),\r\n+\t\t\t\"org.junit.platform.commons.util.ReflectionUtils.getUnderlyingCause\"); //$NON-NLS-1$\r\n \r\n \tstatic final Set<String> PACKAGE_USE_BLACKLIST = Set.of(SECURITY_PACKAGE_NAME, \"de.tum.in.test.api.internal\", //$NON-NLS-1$\r\n \t\t\t\"jdk.internal\", \"sun.\"); //$NON-NLS-1$ //$NON-NLS-2$\r"
        },
        {
          "filename": "src/test/java/de/tum/in/test/api/SecurityTest.java",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -26,6 +26,7 @@ class SecurityTest {\n \tprivate final String testExecuteGit = \"testExecuteGit\";\r\n \tprivate final String testMaliciousExceptionA = \"testMaliciousExceptionA\";\r\n \tprivate final String testMaliciousExceptionB = \"testMaliciousExceptionB\";\r\n+\tprivate final String testMaliciousInvocationTargetException = \"testMaliciousInvocationTargetException\";\r\n \tprivate final String testNewClassLoader = \"testNewClassLoader\";\r\n \tprivate final String testNewSecurityManager = \"testNewSecurityManager\";\r\n \tprivate final String tryManageProcess = \"tryManageProcess\";\r\n@@ -80,6 +81,12 @@ void test_testMaliciousExceptionB() {\n \t\ttests.assertThatEvents().haveExactly(1, testFailedWith(testMaliciousExceptionB, SecurityException.class));\r\n \t}\r\n \r\n+\t@TestTest\r\n+\tvoid test_testMaliciousInvocationTargetException() {\r\n+\t\ttests.assertThatEvents().haveExactly(1,\r\n+\t\t\t\ttestFailedWith(testMaliciousInvocationTargetException, SecurityException.class));\r\n+\t}\r\n+\r\n \t@TestTest\r\n \tvoid test_testNewClassLoader() {\r\n \t\ttests.assertThatEvents().haveExactly(1, testFailedWith(testNewClassLoader, SecurityException.class));\r"
        },
        {
          "filename": "src/test/java/de/tum/in/testuser/SecurityUser.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -77,6 +77,11 @@ void testMaliciousExceptionB() {\n \t\tassertFalse(SecurityPenguin.maliciousExceptionB());\r\n \t}\r\n \r\n+\t@Test\r\n+\tvoid testMaliciousInvocationTargetException() throws Exception {\r\n+\t\tSecurityPenguin.maliciousInvocationTargetException();\r\n+\t}\r\n+\r\n \t@Test\r\n \tvoid testNewClassLoader() throws IOException {\r\n \t\tSecurityPenguin.newClassLoader();\r"
        },
        {
          "filename": "src/test/java/de/tum/in/testuser/subject/SecurityPenguin.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@\n import org.apache.xyz.Circumvention;\n import org.apache.xyz.FakeTrustedClass;\n import org.apache.xyz.MaliciousExceptionB;\n+import org.apache.xyz.MaliciousInvocationTargetException;\n \n import de.tum.in.test.api.io.IOTester;\n \n@@ -49,6 +50,10 @@ public static boolean maliciousExceptionB() {\n \t\treturn ab.get();\n \t}\n \n+\tpublic static void maliciousInvocationTargetException() throws Exception {\n+\t\tthrow new MaliciousInvocationTargetException();\n+\t}\n+\n \t@SuppressWarnings(\"resource\")\n \tpublic static void newClassLoader() throws IOException {\n \t\tnew URLClassLoader(new URL[0]).close();"
        },
        {
          "filename": "src/test/java/org/apache/xyz/MaliciousInvocationTargetException.java",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+package org.apache.xyz;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class MaliciousInvocationTargetException extends InvocationTargetException {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t@Override\n+\tpublic Throwable getTargetException() {\n+\t\ttry {\n+\t\t\tFiles.readString(Path.of(\"pom.xml\"));\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new UncheckedIOException(e);\n+\t\t}\n+\t\treturn new Error(\"succeeded\");\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 6,
        "unique_directories": 5,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "267e744b391c7f2482566461356494704fcefa01",
            "date": "2024-05-27T18:35:00Z",
            "author_login": "MaisiKoleni"
          },
          {
            "sha": "61249526ce5f62434ed449a46a50157c05e238bb",
            "date": "2024-04-08T23:05:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "693852e7d71db6aa87f6701e5855ea84e04cdc05",
            "date": "2024-04-02T18:03:46Z",
            "author_login": "MaisiKoleni"
          },
          {
            "sha": "4ddf13271398eb8cdecc958dc4647414c65c1b32",
            "date": "2024-04-02T12:55:36Z",
            "author_login": "Strohgelaender"
          },
          {
            "sha": "1458b568d20a48c6af16f0310be295f1854cdb76",
            "date": "2024-02-04T14:33:15Z",
            "author_login": "MaisiKoleni"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "Artemis Java Test Sandbox versions less than 1.7.6 are vulnerable to a sandbox escape when an attacker crafts a special subclass of InvocationTargetException. An attacker can abuse this issue to execute arbitrary Java when a victim executes the supposedly sandboxed code.\n\n\n\n\n\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-19T21:15:10.340",
    "last_modified": "2024-11-21T08:58:10.077",
    "fix_date": "2022-01-17T12:40:35Z"
  },
  "references": [
    {
      "url": "https://github.com/advisories/GHSA-883x-6fch-6wjx",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/commit/af4f28a56e2fe600d8750b3b415352a0a3217392",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/issues/15#issuecomment-996449371",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/releases/tag/1.7.6",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/security/advisories/GHSA-883x-6fch-6wjx",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://vulncheck.com/advisories/vc-advisory-GHSA-883x-6fch-6wjx",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/advisories/GHSA-883x-6fch-6wjx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/commit/af4f28a56e2fe600d8750b3b415352a0a3217392",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/issues/15#issuecomment-996449371",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/releases/tag/1.7.6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/ls1intum/Ares/security/advisories/GHSA-883x-6fch-6wjx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://vulncheck.com/advisories/vc-advisory-GHSA-883x-6fch-6wjx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.511866",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Ares",
    "owner": "ls1intum",
    "created_at": "2020-01-10T19:04:44Z",
    "updated_at": "2024-12-10T07:15:20Z",
    "pushed_at": "2025-01-10T17:53:09Z",
    "size": 1578,
    "stars": 19,
    "forks": 7,
    "open_issues": 22,
    "watchers": 19,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "gh-pages",
      "master"
    ],
    "languages": {
      "Java": 700765
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:44:12.766570"
  }
}