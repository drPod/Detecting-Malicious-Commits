{
  "cve_id": "CVE-2024-23687",
  "github_data": {
    "repository": "folio-org/mod-data-export-spring",
    "fix_commit": "93aff4566bff59e30f4121b5a2bda5b0b508a446",
    "related_commits": [
      "93aff4566bff59e30f4121b5a2bda5b0b508a446",
      "93aff4566bff59e30f4121b5a2bda5b0b508a446"
    ],
    "patch_url": "https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446.patch",
    "fix_commit_details": {
      "sha": "93aff4566bff59e30f4121b5a2bda5b0b508a446",
      "commit_date": "2023-07-20T12:08:25Z",
      "author": {
        "login": "julianladisch",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-vf78-3q9f-92g3",
        "length": 96,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 141,
        "additions": 130,
        "deletions": 11
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -20,6 +20,8 @@ API for Data Export Spring module.\n | KAFKA_HOST                    | kafka                     | Kafka broker hostname                                             |\n | KAFKA_PORT                    | 9092                      | Kafka broker port                                                 |\n | OKAPI_URL                     | http://okapi:9130         | Okapi url                                                         |\n+| SYSTEM\\_USER\\_NAME            | data-export-system-user   | Username of the system user                                       |\n+| SYSTEM\\_USER\\_PASSWORD        | -                         | Password of the system user                                       |\n | ENV                           | folio                     | Logical name of the deployment, must be set if Kafka/Elasticsearch are shared for environments, `a-z (any case)`, `0-9`, `-`, `_` symbols only allowed|\n \n \n@@ -65,7 +67,7 @@ Before running scheduled task(job) there is check, that module is registered for\n \n Tenant information need to define DB schema for storing information about Job and etc.\n \n-In the post tenant API controller specific user (`data-export-system-user`) is created for running scheduled export tasks. Permissions are defined in `src/main/resources/permissions/system-user-permissions.csv`.\n+The `data-export-system-user` system user for running scheduled export tasks is created in the post tenant API controller. The password must be set using the `SYSTEM_USER_PASSWORD` environment variable. Permissions are defined in `src/main/resources/permissions/system-user-permissions.csv`.\n \n Also Okapi headers, system user, tenant information are s-tored in memory in a FolioExecutionContext.\n "
        },
        {
          "filename": "descriptors/ModuleDescriptor-template.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -167,6 +167,7 @@\n             \"users.item.post\",\n             \"users.item.put\",\n             \"login.item.post\",\n+            \"login.item.delete\",\n             \"perms.users.item.post\",\n             \"perms.users.get\",\n             \"configuration.entries.collection.get\","
        },
        {
          "filename": "src/main/java/org/folio/des/ModDataExportSpringApplication.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1,5 +1,6 @@\n package org.folio.des;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.folio.de.entity.JobCommand;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n@@ -10,8 +11,13 @@\n @EnableFeignClients\n @EntityScan(basePackageClasses = JobCommand.class)\n public class ModDataExportSpringApplication {\n+  public static final String SYSTEM_USER_PASSWORD = \"SYSTEM_USER_PASSWORD\";\n \n   public static void main(String[] args) {\n+    if (StringUtils.isEmpty(System.getenv(SYSTEM_USER_PASSWORD))) {\n+      throw new IllegalArgumentException(\"Required environment variable is missing: \" + SYSTEM_USER_PASSWORD);\n+    }\n+\n     SpringApplication.run(ModDataExportSpringApplication.class, args);\n   }\n "
        },
        {
          "filename": "src/main/java/org/folio/des/client/AuthClient.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -4,8 +4,10 @@\n import org.springframework.cloud.openfeign.FeignClient;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestParam;\n \n @FeignClient(\"authn\")\n public interface AuthClient {\n@@ -15,4 +17,7 @@ public interface AuthClient {\n \n   @PostMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)\n   void saveCredentials(@RequestBody SystemUserParameters systemUserParameters);\n+\n+  @DeleteMapping(value = \"/credentials\", consumes = MediaType.APPLICATION_JSON_VALUE)\n+  void deleteCredentials(@RequestParam(\"userId\") String userId);\n }"
        },
        {
          "filename": "src/main/java/org/folio/des/security/AuthService.java",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -25,14 +25,16 @@ public class AuthService {\n \n   @Value(\"${folio.system.username}\")\n   private String username;\n+  @Value(\"${folio.system.password}\")\n+  private String password;\n \n   public String getTokenForSystemUser(String tenant, String url) {\n     SystemUserParameters userParameters =\n         SystemUserParameters.builder()\n             .okapiUrl(url)\n             .tenantId(tenant)\n             .username(username)\n-            .password(username)\n+            .password(password)\n             .build();\n \n     log.info(\"Attempt login with url={} tenant={} username={}.\", url, tenant, username);\n@@ -63,6 +65,12 @@ private boolean isNotEmpty(java.util.List<String> token) {\n     return CollectionUtils.isNotEmpty(token) && StringUtils.isNotBlank(token.get(0));\n   }\n \n+  public void deleteCredentials(String userId) {\n+    authClient.deleteCredentials(userId);\n+\n+    log.info(\"Removed credentials for user {}.\", userId);\n+  }\n+\n   public void saveCredentials(SystemUserParameters systemUserParameters) {\n     authClient.saveCredentials(systemUserParameters);\n "
        },
        {
          "filename": "src/main/java/org/folio/des/security/SecurityManagerService.java",
          "status": "modified",
          "additions": 15,
          "deletions": 7,
          "patch": "@@ -35,6 +35,8 @@ public class SecurityManagerService {\n \n   @Value(\"${folio.system.username}\")\n   private String username;\n+  @Value(\"${folio.system.password}\")\n+  private String password;\n \n   public void prepareSystemUser(String okapiUrl, String tenantId) {\n     Optional<User> userOptional = getUser(username);\n@@ -45,15 +47,21 @@ public void prepareSystemUser(String okapiUrl, String tenantId) {\n       updateUser(user);\n     } else {\n       user = createUser(username);\n-      authService.saveCredentials(SystemUserParameters.builder()\n-          .id(UUID.randomUUID())\n-          .username(username)\n-          .password(username)\n-          .okapiUrl(okapiUrl)\n-          .tenantId(tenantId)\n-          .build());\n     }\n \n+    try {\n+      authService.deleteCredentials(user.getId());\n+    } catch (feign.FeignException.NotFound e) {\n+      // ignore if not exist\n+    }\n+    authService.saveCredentials(SystemUserParameters.builder()\n+        .id(UUID.randomUUID())\n+        .username(username)\n+        .password(password)\n+        .okapiUrl(okapiUrl)\n+        .tenantId(tenantId)\n+        .build());\n+\n     Optional<PermissionUser> permissionUserOptional = permissionsClient.get(\"userId==\" + user.getId())\n         .getPermissionUsers()\n         .stream()"
        },
        {
          "filename": "src/main/resources/application.yml",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,6 +1,7 @@\n folio:\n   system:\n-    username: data-export-system-user\n+    username: ${SYSTEM_USER_NAME:data-export-system-user}\n+    password: ${SYSTEM_USER_PASSWORD}\n   okapi:\n     url: ${OKAPI_URL:http://okapi:9130}\n   tenant:"
        },
        {
          "filename": "src/test/java/org/folio/des/InstallUpgradeIT.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -94,7 +94,8 @@ class InstallUpgradeIT {\n     .withEnv(\"DB_PASSWORD\", \"password\")\n     .withEnv(\"DB_DATABASE\", \"postgres\")\n     .withEnv(\"KAFKA_HOST\", \"mykafka\")\n-    .withEnv(\"KAFKA_PORT\", \"9092\");\n+    .withEnv(\"KAFKA_PORT\", \"9092\")\n+    .withEnv(\"SYSTEM_USER_PASSWORD\", \"password\");\n \n   private static void mockPath(MockServerClient mockServerClient, String path, String jsonBody) {\n     mockServerClient.when(request(path))"
        },
        {
          "filename": "src/test/java/org/folio/des/ModDataExportSpringApplicationTest.java",
          "status": "added",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -0,0 +1,17 @@\n+package org.folio.des;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class ModDataExportSpringApplicationTest {\n+\n+  @Test\n+  void exceptionOnMissingSystemUserPassword() {\n+    var e = assertThrows(IllegalArgumentException.class, () -> ModDataExportSpringApplication.main(null));\n+    assertThat(e.getMessage(), containsString(ModDataExportSpringApplication.SYSTEM_USER_PASSWORD));\n+  }\n+\n+}"
        },
        {
          "filename": "src/test/java/org/folio/des/security/SecurityManagerServiceTest.java",
          "status": "modified",
          "additions": 58,
          "deletions": 0,
          "patch": "@@ -1,8 +1,11 @@\n package org.folio.des.security;\n \n import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.delete;\n+import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor;\n import static com.github.tomakehurst.wiremock.client.WireMock.get;\n import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;\n import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n \n@@ -14,6 +17,7 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n \n import java.util.Collection;\n@@ -75,6 +79,56 @@ void prepareSystemUser() {\n                     .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)\n                     .withBody(USER_PERMS_RESPONSE)));\n \n+    wireMockServer.stubFor(\n+      delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))\n+        .willReturn(\n+          aResponse()\n+            .withStatus(HttpStatus.NO_CONTENT.value())));\n+\n+    Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{\n+      put(XOkapiHeaders.TENANT, List.of(TENANT));\n+      put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));\n+      put(XOkapiHeaders.TOKEN, List.of(TOKEN));\n+    }};\n+\n+    try (var context = new FolioExecutionContextSetter(new DefaultFolioExecutionContext(folioModuleMetadata, tenantOkapiHeaders))) {\n+      securityManagerService.prepareSystemUser(wireMockServer.baseUrl(), TENANT);\n+    }\n+\n+    wireMockServer.verify(\n+        getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));\n+    wireMockServer.verify(\n+        putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));\n+    wireMockServer.verify(\n+        deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));\n+    wireMockServer.verify(\n+        postRequestedFor(urlEqualTo(\"/authn/credentials\")));\n+  }\n+\n+  @Test\n+  @DisplayName(\"Update user without previous password\")\n+  void prepareSystemUserWithoutPreviousPassword() {\n+\n+    wireMockServer.stubFor(\n+        get(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\"))\n+            .willReturn(\n+                aResponse()\n+                    .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)\n+                    .withBody(SYS_USER_EXIST_RESPONSE)));\n+\n+    wireMockServer.stubFor(\n+        get(urlEqualTo(\"/perms/users?query=userId%3D%3Da85c45b7-d427-4122-8532-5570219c5e59\"))\n+            .willReturn(\n+                aResponse()\n+                    .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)\n+                    .withBody(USER_PERMS_RESPONSE)));\n+\n+    wireMockServer.stubFor(\n+      delete(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\"))\n+        .willReturn(\n+          aResponse()\n+            .withStatus(HttpStatus.NOT_FOUND.value())));\n+\n     Map<String, Collection<String>> tenantOkapiHeaders = new HashMap<>() {{\n       put(XOkapiHeaders.TENANT, List.of(TENANT));\n       put(XOkapiHeaders.URL, List.of(wireMockServer.baseUrl()));\n@@ -89,5 +143,9 @@ void prepareSystemUser() {\n         getRequestedFor(urlEqualTo(\"/users?query=username%3D%3Ddata-export-system-user\")));\n     wireMockServer.verify(\n         putRequestedFor(urlEqualTo(\"/users/a85c45b7-d427-4122-8532-5570219c5e59\")));\n+    wireMockServer.verify(\n+        deleteRequestedFor(urlEqualTo(\"/authn/credentials?userId=a85c45b7-d427-4122-8532-5570219c5e59\")));\n+    wireMockServer.verify(\n+        postRequestedFor(urlEqualTo(\"/authn/credentials\")));\n   }\n }"
        },
        {
          "filename": "src/test/resources/config/application.yml",
          "status": "added",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -0,0 +1,3 @@\n+folio:\n+  system:\n+    password: testpassword"
        },
        {
          "filename": "src/test/resources/mappings/authn.json",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -25,6 +25,15 @@\n         }\n       }\n     },\n+    {\n+      \"request\": {\n+        \"method\": \"DELETE\",\n+        \"url\": \"/authn/credentials\"\n+      },\n+      \"response\": {\n+        \"status\": 204\n+      }\n+    },\n     {\n       \"request\": {\n         \"method\": \"POST\","
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 10,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b0aee73c5196e6faf5b2896f42b9450bbe00c24b",
            "date": "2025-01-13T13:56:44Z",
            "author_login": "BKadirkhodjaev"
          },
          {
            "sha": "9bc58126e4e018abe28abbc6b9b47472f00c7505",
            "date": "2025-01-08T10:28:11Z",
            "author_login": "BKadirkhodjaev"
          },
          {
            "sha": "355521625b13ec361d13231d954f85b7618f0b92",
            "date": "2024-12-27T07:59:01Z",
            "author_login": "BKadirkhodjaev"
          },
          {
            "sha": "66568a7a81c69ba05079fbf9b164186ada057b06",
            "date": "2024-12-17T15:26:40Z",
            "author_login": "Saba-Zedginidze-EPAM"
          },
          {
            "sha": "daf15f97f48fc93531b26e2bc34d30e9bdbe9d5f",
            "date": "2024-12-11T21:54:52Z",
            "author_login": "khandramai"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-798",
    "description": "Hard-coded credentials in FOLIO mod-data-export-spring versions before 1.5.4 and from 2.0.0 to 2.0.2 allows unauthenticated users to access critical APIs, modify user data, modify configurations including single-sign-on, and manipulate fees/fines.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-19T22:15:08.517",
    "last_modified": "2024-11-21T08:58:10.590",
    "fix_date": "2023-07-20T12:08:25Z"
  },
  "references": [
    {
      "url": "https://github.com/advisories/GHSA-vf78-3q9f-92g3",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/folio-org/mod-data-export-spring/security/advisories/GHSA-vf78-3q9f-92g3",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://vulncheck.com/advisories/vc-advisory-GHSA-vf78-3q9f-92g3",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wiki.folio.org/x/hbMMBw",
      "source": "disclosure@vulncheck.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/advisories/GHSA-vf78-3q9f-92g3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/folio-org/mod-data-export-spring/security/advisories/GHSA-vf78-3q9f-92g3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://vulncheck.com/advisories/vc-advisory-GHSA-vf78-3q9f-92g3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wiki.folio.org/x/hbMMBw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.512816",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mod-data-export-spring",
    "owner": "folio-org",
    "created_at": "2021-01-28T22:33:58Z",
    "updated_at": "2025-01-13T13:56:48Z",
    "pushed_at": "2025-01-13T13:56:44Z",
    "size": 960,
    "stars": 3,
    "forks": 5,
    "open_issues": 0,
    "watchers": 3,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 520663,
      "Dockerfile": 301
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:07:22.449067"
  }
}