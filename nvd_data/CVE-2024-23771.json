{
  "cve_id": "CVE-2024-23771",
  "github_data": {
    "repository": "emikulic/darkhttpd",
    "fix_commit": "f477619d49f3c4de9ad59bd194265a48ddc03f04",
    "related_commits": [
      "f477619d49f3c4de9ad59bd194265a48ddc03f04",
      "f477619d49f3c4de9ad59bd194265a48ddc03f04"
    ],
    "patch_url": "https://github.com/emikulic/darkhttpd/commit/f477619d49f3c4de9ad59bd194265a48ddc03f04.patch",
    "fix_commit_details": {
      "sha": "f477619d49f3c4de9ad59bd194265a48ddc03f04",
      "commit_date": "2024-01-17T05:24:23Z",
      "author": {
        "login": "emikulic",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Don't use strcmp to compare passwords.",
        "length": 197,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 73,
        "additions": 69,
        "deletions": 4
      },
      "files": [
        {
          "filename": "darkhttpd.c",
          "status": "modified",
          "additions": 29,
          "deletions": 3,
          "patch": "@@ -304,7 +304,7 @@ static char *pidfile_name = NULL;   /* NULL = no pidfile */\n static int want_chroot = 0, want_daemon = 0, want_accf = 0,\n            want_keepalive = 1, want_server_id = 1;\n static char *server_hdr = NULL;\n-static char *auth_key = NULL;\n+static char *auth_key = NULL;       /* NULL or \"Basic base64_of_password\" */\n static char *custom_hdrs = NULL;\n static uint64_t num_requests = 0, total_in = 0, total_out = 0;\n static int accepting = 1;           /* set to 0 to stop accept()ing */\n@@ -2291,6 +2291,33 @@ static void process_get(struct connection *conn) {\n     }\n }\n \n+/* Returns 1 if passwords are equal, runtime is proportional to the length of\n+ * user_input to avoid leaking the secret's length and contents through timing\n+ * information.\n+ */\n+int password_equal(const char *user_input, const char *secret) {\n+    size_t i = 0;\n+    size_t j = 0;\n+    char out = 0;\n+\n+    while (1) {\n+        /* Out stays zero if the strings are the same. */\n+        out |= user_input[i] ^ secret[j];\n+\n+        /* Stop at end of user_input. */\n+        if (user_input[i] == 0) break;\n+        i++;\n+\n+        /* Don't go past end of secret. */\n+        if (secret[j] != 0) j++;\n+    }\n+\n+    /* Check length after loop, otherwise early exit would leak length. */\n+    out |= (i != j); /* Secret was shorter. */\n+    out |= (secret[j] != 0); /* Secret was longer; j is not the end. */\n+    return out == 0;\n+}\n+\n /* Process a request: build the header and reply, advance state. */\n static void process_request(struct connection *conn) {\n     num_requests++;\n@@ -2305,8 +2332,7 @@ static void process_request(struct connection *conn) {\n     /* fail if: (auth_enabled) AND (client supplied invalid credentials) */\n     else if (auth_key != NULL &&\n             (conn->authorization == NULL ||\n-             strcmp(conn->authorization, auth_key)))\n-    {\n+             !password_equal(conn->authorization, auth_key))) {\n         default_reply(conn, 401, \"Unauthorized\",\n             \"Access denied due to invalid credentials.\");\n     }"
        },
        {
          "filename": "devel/Makefile",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -8,6 +8,7 @@ clean:\n \t\ttest.out.stdout \\\n \t\ttest.pyc \\\n \t\ttest_make_safe_uri \\\n+\t\ttest_password_equal \\\n \t\ta.out darkhttpd.gcda darkhttpd.gcno \\\n \t\tfuzz_darkhttpd.o fuzz_llvm_make_safe_uri fuzz_socket\n \trm -rf tmp.fuzz tmp.httpd.tests"
        },
        {
          "filename": "devel/run-tests",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -153,7 +153,7 @@ runtests() {\n \n # --- main ---\n \n-# Unit test.\n+# Unit tests.\n echo \"===> test_make_safe_uri\"\n $CC -g -O2 -fsanitize=address -fsanitize=undefined \\\n   test_make_safe_uri.c -o test_make_safe_uri || exit 1\n@@ -162,6 +162,14 @@ if ./test_make_safe_uri | egrep '^FAIL:'; then\n   exit 1\n fi\n \n+echo \"===> test_password_equal\"\n+$CC -g -O2 -fsanitize=address -fsanitize=undefined \\\n+  test_password_equal.c -o test_password_equal || exit 1\n+if ./test_password_equal | egrep '^FAIL:'; then\n+  echo test_password_equal failed >&2\n+  exit 1\n+fi\n+\n # Check that the code builds with various defines.\n echo \"===> building without -DDEBUG\"\n $CC -O2 -Wall ../darkhttpd.c || exit 1"
        },
        {
          "filename": "devel/test_password_equal.c",
          "status": "added",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -0,0 +1,30 @@\n+#define main _main_disabled_\n+#include \"../darkhttpd.c\"\n+#undef main\n+\n+static void\n+test(int equal, const char *user_input, const char *secret)\n+{\n+    int out = password_equal(user_input, secret);\n+    printf(\"%s: \\\"%s\\\" \\\"%s\\\"\\n\",\n+        (equal == out) ? \"PASS\" : \"FAIL\",\n+        user_input, secret);\n+}\n+\n+int\n+main(void)\n+{\n+    test(1, \"\", \"\");\n+    test(1, \"a\", \"a\");\n+    test(1, \"abc\", \"abc\");\n+\n+    test(0, \"a\", \"\");\n+    test(0, \"ab\", \"\");\n+    test(0, \"\", \"a\");\n+    test(0, \"\", \"ab\");\n+    test(0, \"abcd\", \"abc\");\n+    test(0, \"abc\", \"abcd\");\n+    return 0;\n+}\n+\n+/* vim:set tabstop=4 shiftwidth=4 expandtab tw=78: */"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e1ec48ed665cd2706cd58237dc30807610777be5",
            "date": "2024-10-04T22:55:50Z",
            "author_login": "triallax"
          },
          {
            "sha": "57d7433ce97f463cf976873b24c193ba13a2de1a",
            "date": "2024-06-01T02:17:34Z",
            "author_login": "g-rden"
          },
          {
            "sha": "f0b9f09c01e7373de5e30da6e7adeed0fcc3160d",
            "date": "2024-05-30T09:46:57Z",
            "author_login": "g-rden"
          },
          {
            "sha": "5031bf1555649df4194cccb1c99d186f8e3f4566",
            "date": "2024-03-23T00:37:47Z",
            "author_login": "g-rden"
          },
          {
            "sha": "64fe4ccbcf89e1f7f1e7b61954ff60d6404d636c",
            "date": "2024-03-19T04:01:33Z",
            "author_login": "g-rden"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-203",
    "description": "darkhttpd before 1.15 uses strcmp (which is not constant time) to verify authentication, which makes it easier for remote attackers to bypass authentication via a timing side channel.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-22T04:15:07.723",
    "last_modified": "2024-11-21T08:58:22.440",
    "fix_date": "2024-01-17T05:24:23Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/01/25/1",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/emikulic/darkhttpd/commit/f477619d49f3c4de9ad59bd194265a48ddc03f04",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/emikulic/darkhttpd/compare/v1.14...v1.15",
      "source": "cve@mitre.org",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/01/25/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/emikulic/darkhttpd/commit/f477619d49f3c4de9ad59bd194265a48ddc03f04",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/emikulic/darkhttpd/compare/v1.14...v1.15",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.516581",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "darkhttpd",
    "owner": "emikulic",
    "created_at": "2021-01-17T13:39:15Z",
    "updated_at": "2025-01-12T00:40:38Z",
    "pushed_at": "2024-11-04T11:32:25Z",
    "size": 652,
    "stars": 1067,
    "forks": 88,
    "open_issues": 11,
    "watchers": 1067,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 103855,
      "Python": 29574,
      "Shell": 8971,
      "C++": 1654,
      "Dockerfile": 1249,
      "Makefile": 593
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "isc"
    },
    "collected_at": "2025-01-14T13:50:08.686786"
  }
}