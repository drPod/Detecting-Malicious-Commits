{
  "cve_id": "CVE-2024-23823",
  "github_data": {
    "repository": "vantage6/vantage6",
    "fix_commit": "70bb4e1d889230a841eb364d6c03accd7dd01a41",
    "related_commits": [
      "70bb4e1d889230a841eb364d6c03accd7dd01a41",
      "70bb4e1d889230a841eb364d6c03accd7dd01a41"
    ],
    "patch_url": "https://github.com/vantage6/vantage6/commit/70bb4e1d889230a841eb364d6c03accd7dd01a41.patch",
    "fix_commit_details": {
      "sha": "70bb4e1d889230a841eb364d6c03accd7dd01a41",
      "commit_date": "2024-03-07T11:02:46Z",
      "author": {
        "login": "bartvanb",
        "type": "User",
        "stats": {
          "total_commits": 2387,
          "average_weekly_commits": 5.836185819070905,
          "total_additions": 373633,
          "total_deletions": 328316,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4946-85pr-fvxh",
        "length": 123,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 74,
        "additions": 59,
        "deletions": 15
      },
      "files": [
        {
          "filename": "docs/server/yaml/server_config.yaml",
          "status": "modified",
          "additions": 16,
          "deletions": 10,
          "patch": "@@ -43,29 +43,28 @@ jwt_secret_key: super-secret-key! # recommended but optional\n \n # Settings for the logger\n logging:\n-\n   # Controls the logging output level. Could be one of the following\n   # levels: CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET\n-  level:        DEBUG\n+  level: DEBUG\n \n   # Filename of the log-file, used by RotatingFileHandler\n-  file:         test.log\n+  file: test.log\n \n   # Whether the output is shown in the console or not\n-  use_console:  True\n+  use_console: True\n \n   # The number of log files that are kept, used by RotatingFileHandler\n   backup_count: 5\n \n   # Size in kB of a single log file, used by RotatingFileHandler\n-  max_size:     1024\n+  max_size: 1024\n \n   # format: input for logging.Formatter,\n-  format:       \"%(asctime)s - %(name)-14s - %(levelname)-8s - %(message)s\"\n-  datefmt:      \"%Y-%m-%d %H:%M:%S\"\n+  format: \"%(asctime)s - %(name)-14s - %(levelname)-8s - %(message)s\"\n+  datefmt: \"%Y-%m-%d %H:%M:%S\"\n \n-# (optional) set the individual log levels per logger name, for example\n-# mute some loggers that are too verbose.\n+  # (optional) set the individual log levels per logger name, for example\n+  # mute some loggers that are too verbose.\n   loggers:\n     - name: urllib3\n       level: warning\n@@ -82,7 +81,6 @@ logging:\n \n # Additional debug flags\n debug:\n-\n   # Set to `true` to enable debug mode for the socketio server\n   socketio: false\n \n@@ -171,3 +169,11 @@ password_policy:\n   # number of minutes to wait between emails that alert a user that someone is\n   # trying to log in to their account. Default is 60.\n   between_email_blocked_login_minutes: 60\n+\n+# set up with which origins the server should allow CORS requests. The default\n+# is to allow all origins. If you want to restrict this, you can specify a list\n+# of origins here. Below are examples to allow requests from the Cotopaxi UI, and\n+#  port 3456 on localhost\n+cors_allowed_origins:\n+  - https://portal.cotopaxi.vantage6.ai\n+  - http://localhost:3456"
        },
        {
          "filename": "vantage6-server/vantage6/server/__init__.py",
          "status": "modified",
          "additions": 43,
          "deletions": 5,
          "patch": "@@ -5,6 +5,7 @@\n through the API the server hosts. Finally, it also communicates with\n authenticated nodes and users via the socketIO server that is run here.\n \"\"\"\n+\n # -*- coding: utf-8 -*-\n import os\n from gevent import monkey\n@@ -35,6 +36,7 @@\n     Response,\n )\n from flask_cors import CORS\n+from flask_cors.core import probably_regex\n from flask_jwt_extended import JWTManager\n from flask_marshmallow import Marshmallow\n from flask_restful import Api\n@@ -108,8 +110,14 @@ def __init__(self, ctx: ServerContext) -> None:\n         # Setup Principal, granular API access manegement\n         self.principal = Principal(self.app, use_sessions=False)\n \n-        # Enable cross-origin resource sharing\n-        self.cors = CORS(self.app)\n+        # Enable cross-origin resource sharing. Note that Flask-CORS interprets\n+        # the origins as regular expressions.\n+        cors_allowed_origins = self.ctx.config.get(\"cors_allowed_origins\", \"*\")\n+        self._warn_if_cors_regex(cors_allowed_origins)\n+        self.cors = CORS(\n+            self.app,\n+            resources={r\"/*\": {\"origins\": cors_allowed_origins}},\n+        )\n \n         # SWAGGER documentation\n         self.swagger = Swagger(self.app, template=swagger_template)\n@@ -138,6 +146,35 @@ def __init__(self, ctx: ServerContext) -> None:\n \n         log.info(\"Initialization done\")\n \n+    @staticmethod\n+    def _warn_if_cors_regex(origins: str | list[str]) -> None:\n+        \"\"\"\n+        Give a warning if CORS origins are regular expressions. This will not work\n+        properly for socket events (Flask-SocketIO checks for string equality and does\n+        not use regex).\n+\n+        Note that we are using the `probably_regex` function from Flask-CORS to check\n+        if the origins are probably regular expressions - the Flask implementation for\n+        determining if it is a regex is a bit hacky (see\n+        https://github.com/corydolphin/flask-cors/blob/3.0.10/flask_cors/core.py#L275-L285)\n+        and Flask-CORS doesn't currently offer an opt out of regex's altogether.\n+\n+        Parameters\n+        ----------\n+        origins: str | list[str]\n+            The origins to check\n+        \"\"\"\n+        if isinstance(origins, str):\n+            origins = [origins]\n+\n+        for origin in origins:\n+            if probably_regex(origin):\n+                log.warning(\n+                    \"CORS origin '%s' is a regular expression. Socket events sent from \"\n+                    \"this origin will not be handled properly.\",\n+                    origin,\n+                )\n+\n     def setup_socket_connection(self) -> SocketIO:\n         \"\"\"\n         Setup a socket connection. If a message queue is defined, connect the\n@@ -149,21 +186,22 @@ def setup_socket_connection(self) -> SocketIO:\n         SocketIO\n             SocketIO object\n         \"\"\"\n-\n         msg_queue = self.ctx.config.get(\"rabbitmq\", {}).get(\"uri\")\n         if msg_queue:\n             log.debug(f\"Connecting to msg queue: {msg_queue}\")\n \n         debug_mode = self.debug.get(\"socketio\", False)\n         if debug_mode:\n             log.debug(\"SocketIO debug mode enabled\")\n+\n+        cors_settings = self.ctx.config.get(\"cors_allowed_origins\", \"*\")\n         try:\n             socketio = SocketIO(\n                 self.app,\n                 async_mode=\"gevent_uwsgi\",\n                 message_queue=msg_queue,\n                 ping_timeout=60,\n-                cors_allowed_origins=\"*\",\n+                cors_allowed_origins=cors_settings,\n                 logger=debug_mode,\n                 engineio_logger=debug_mode,\n             )\n@@ -179,7 +217,7 @@ def setup_socket_connection(self) -> SocketIO:\n                 self.app,\n                 message_queue=msg_queue,\n                 ping_timeout=60,\n-                cors_allowed_origins=\"*\",\n+                cors_allowed_origins=cors_settings,\n                 logger=debug_mode,\n                 engineio_logger=debug_mode,\n             )"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7e08264dea67e84b35594893953001e8ea147d90",
            "date": "2025-01-09T16:31:08Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "c30ae94a7a4e5fda8eee9a937b26ff46c029109d",
            "date": "2024-12-13T09:10:55Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "7467646f458f773d0ee6aae6803682e1752a13f7",
            "date": "2024-12-13T08:54:45Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "4100ab5536ed2a5c675d6593cbebd8d98b4e5e14",
            "date": "2024-12-13T08:30:46Z",
            "author_login": "bartvanb"
          },
          {
            "sha": "943a486a2e61185642fa75a0f55d24b776048838",
            "date": "2024-12-13T08:21:53Z",
            "author_login": "invalid-email-address"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-863",
    "description": "vantage6 is an open source framework built to enable, manage and deploy privacy enhancing technologies like Federated Learning and Multi-Party Computation. The vantage6 server has no restrictions on CORS settings. It should be possible for people to set the allowed origins of the server.  The impact is limited because v6 does not use session cookies. This issue has been addressed in commit `70bb4e1d8` and is expected to ship in subsequent releases. Users are advised to upgrade as soon as a new release is available. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-03-14T19:15:49.560",
    "last_modified": "2024-11-21T08:58:29.780",
    "fix_date": "2024-03-07T11:02:46Z"
  },
  "references": [
    {
      "url": "https://github.com/vantage6/vantage6/commit/70bb4e1d889230a841eb364d6c03accd7dd01a41",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vantage6/vantage6/security/advisories/GHSA-4946-85pr-fvxh",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vantage6/vantage6/commit/70bb4e1d889230a841eb364d6c03accd7dd01a41",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vantage6/vantage6/security/advisories/GHSA-4946-85pr-fvxh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.494755",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vantage6",
    "owner": "vantage6",
    "created_at": "2022-05-16T12:09:26Z",
    "updated_at": "2025-01-09T16:31:14Z",
    "pushed_at": "2025-01-14T13:14:06Z",
    "size": 44880,
    "stars": 31,
    "forks": 11,
    "open_issues": 248,
    "watchers": 31,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 1919355,
      "TypeScript": 526976,
      "HTML": 209327,
      "SCSS": 20209,
      "Makefile": 12871,
      "Dockerfile": 9054,
      "Jinja": 5974,
      "Shell": 4282,
      "JavaScript": 802
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:50:50.846103"
  }
}