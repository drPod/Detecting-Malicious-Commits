{
  "cve_id": "CVE-2024-23832",
  "github_data": {
    "repository": "mastodon/mastodon",
    "fix_commit": "1726085db5cd73dd30953da858f9887bcc90b958",
    "related_commits": [
      "1726085db5cd73dd30953da858f9887bcc90b958",
      "1726085db5cd73dd30953da858f9887bcc90b958"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1726085db5cd73dd30953da858f9887bcc90b958",
      "commit_date": "2024-02-01T14:56:46Z",
      "author": {
        "login": "ClearlyClaire",
        "type": "User",
        "stats": {
          "total_commits": 2275,
          "average_weekly_commits": 4.861111111111111,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 356
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-3fjr-858r-92rw",
        "length": 114,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 78,
        "additions": 37,
        "deletions": 41
      },
      "files": [
        {
          "filename": "app/controllers/concerns/signature_verification.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -266,7 +266,7 @@ def actor_from_key_id(key_id)\n       stoplight_wrap_request { ResolveAccountService.new.call(key_id.delete_prefix('acct:'), suppress_errors: false) }\n     elsif !ActivityPub::TagManager.instance.local_uri?(key_id)\n       account   = ActivityPub::TagManager.instance.uri_to_actor(key_id)\n-      account ||= stoplight_wrap_request { ActivityPub::FetchRemoteKeyService.new.call(key_id, id: false, suppress_errors: false) }\n+      account ||= stoplight_wrap_request { ActivityPub::FetchRemoteKeyService.new.call(key_id, suppress_errors: false) }\n       account\n     end\n   rescue Mastodon::PrivateNetworkAddressError => e"
        },
        {
          "filename": "app/helpers/jsonld_helper.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -155,8 +155,8 @@ def safe_for_forwarding?(original, compacted)\n     end\n   end\n \n-  def fetch_resource(uri, id, on_behalf_of = nil, request_options: {})\n-    unless id\n+  def fetch_resource(uri, id_is_known, on_behalf_of = nil, request_options: {})\n+    unless id_is_known\n       json = fetch_resource_without_id_validation(uri, on_behalf_of)\n \n       return if !json.is_a?(Hash) || unsupported_uri_scheme?(json['id'])"
        },
        {
          "filename": "app/lib/activitypub/activity.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -154,7 +154,7 @@ def fetch_remote_original_status\n     if object_uri.start_with?('http')\n       return if ActivityPub::TagManager.instance.local_uri?(object_uri)\n \n-      ActivityPub::FetchRemoteStatusService.new.call(object_uri, id: true, on_behalf_of: @account.followers.local.first, request_id: @options[:request_id])\n+      ActivityPub::FetchRemoteStatusService.new.call(object_uri, on_behalf_of: @account.followers.local.first, request_id: @options[:request_id])\n     elsif @object['url'].present?\n       ::FetchRemoteStatusService.new.call(@object['url'], request_id: @options[:request_id])\n     end"
        },
        {
          "filename": "app/lib/activitypub/linked_data_signature.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -19,7 +19,7 @@ def verify_actor!\n     return unless type == 'RsaSignature2017'\n \n     creator = ActivityPub::TagManager.instance.uri_to_actor(creator_uri)\n-    creator = ActivityPub::FetchRemoteKeyService.new.call(creator_uri, id: false) if creator&.public_key.blank?\n+    creator = ActivityPub::FetchRemoteKeyService.new.call(creator_uri) if creator&.public_key.blank?\n \n     return if creator.nil?\n "
        },
        {
          "filename": "app/services/activitypub/fetch_remote_account_service.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n \n class ActivityPub::FetchRemoteAccountService < ActivityPub::FetchRemoteActorService\n   # Does a WebFinger roundtrip on each call, unless `only_key` is true\n-  def call(uri, id: true, prefetched_body: nil, break_on_redirect: false, only_key: false, suppress_errors: true, request_id: nil)\n+  def call(uri, prefetched_body: nil, break_on_redirect: false, only_key: false, suppress_errors: true, request_id: nil)\n     actor = super\n     return actor if actor.nil? || actor.is_a?(Account)\n "
        },
        {
          "filename": "app/services/activitypub/fetch_remote_actor_service.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -10,15 +10,15 @@ class Error < StandardError; end\n   SUPPORTED_TYPES = %w(Application Group Organization Person Service).freeze\n \n   # Does a WebFinger roundtrip on each call, unless `only_key` is true\n-  def call(uri, id: true, prefetched_body: nil, break_on_redirect: false, only_key: false, suppress_errors: true, request_id: nil)\n+  def call(uri, prefetched_body: nil, break_on_redirect: false, only_key: false, suppress_errors: true, request_id: nil)\n     return if domain_not_allowed?(uri)\n     return ActivityPub::TagManager.instance.uri_to_actor(uri) if ActivityPub::TagManager.instance.local_uri?(uri)\n \n     @json = begin\n       if prefetched_body.nil?\n-        fetch_resource(uri, id)\n+        fetch_resource(uri, true)\n       else\n-        body_to_json(prefetched_body, compare_id: id ? uri : nil)\n+        body_to_json(prefetched_body, compare_id: uri)\n       end\n     rescue Oj::ParseError\n       raise Error, \"Error parsing JSON-LD document #{uri}\""
        },
        {
          "filename": "app/services/activitypub/fetch_remote_key_service.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 15,
          "patch": "@@ -6,23 +6,10 @@ class ActivityPub::FetchRemoteKeyService < BaseService\n   class Error < StandardError; end\n \n   # Returns actor that owns the key\n-  def call(uri, id: true, prefetched_body: nil, suppress_errors: true)\n+  def call(uri, suppress_errors: true)\n     raise Error, 'No key URI given' if uri.blank?\n \n-    if prefetched_body.nil?\n-      if id\n-        @json = fetch_resource_without_id_validation(uri)\n-        if actor_type?\n-          @json = fetch_resource(@json['id'], true)\n-        elsif uri != @json['id']\n-          raise Error, \"Fetched URI #{uri} has wrong id #{@json['id']}\"\n-        end\n-      else\n-        @json = fetch_resource(uri, id)\n-      end\n-    else\n-      @json = body_to_json(prefetched_body, compare_id: id ? uri : nil)\n-    end\n+    @json = fetch_resource(uri, false)\n \n     raise Error, \"Unable to fetch key JSON at #{uri}\" if @json.nil?\n     raise Error, \"Unsupported JSON-LD context for document #{uri}\" unless supported_context?(@json)"
        },
        {
          "filename": "app/services/activitypub/fetch_remote_status_service.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -8,14 +8,14 @@ class ActivityPub::FetchRemoteStatusService < BaseService\n   DISCOVERIES_PER_REQUEST = 1000\n \n   # Should be called when uri has already been checked for locality\n-  def call(uri, id: true, prefetched_body: nil, on_behalf_of: nil, expected_actor_uri: nil, request_id: nil)\n+  def call(uri, prefetched_body: nil, on_behalf_of: nil, expected_actor_uri: nil, request_id: nil)\n     return if domain_not_allowed?(uri)\n \n     @request_id = request_id || \"#{Time.now.utc.to_i}-status-#{uri}\"\n     @json = if prefetched_body.nil?\n-              fetch_resource(uri, id, on_behalf_of)\n+              fetch_resource(uri, true, on_behalf_of)\n             else\n-              body_to_json(prefetched_body, compare_id: id ? uri : nil)\n+              body_to_json(prefetched_body, compare_id: uri)\n             end\n \n     return unless supported_context?\n@@ -65,7 +65,7 @@ def trustworthy_attribution?(uri, attributed_to)\n \n   def account_from_uri(uri)\n     actor = ActivityPub::TagManager.instance.uri_to_resource(uri, Account)\n-    actor = ActivityPub::FetchRemoteAccountService.new.call(uri, id: true, request_id: @request_id) if actor.nil? || actor.possibly_stale?\n+    actor = ActivityPub::FetchRemoteAccountService.new.call(uri, request_id: @request_id) if actor.nil? || actor.possibly_stale?\n     actor\n   end\n "
        },
        {
          "filename": "app/services/activitypub/process_account_service.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -277,7 +277,7 @@ def collection_info(type)\n \n   def moved_account\n     account   = ActivityPub::TagManager.instance.uri_to_resource(@json['movedTo'], Account)\n-    account ||= ActivityPub::FetchRemoteAccountService.new.call(@json['movedTo'], id: true, break_on_redirect: true, request_id: @options[:request_id])\n+    account ||= ActivityPub::FetchRemoteAccountService.new.call(@json['movedTo'], break_on_redirect: true, request_id: @options[:request_id])\n     account\n   end\n "
        },
        {
          "filename": "app/services/fetch_resource_service.rb",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -48,7 +48,15 @@ def process_response(response, terminal = false)\n       body = response.body_with_limit\n       json = body_to_json(body)\n \n-      [json['id'], { prefetched_body: body, id: true }] if supported_context?(json) && (equals_or_includes_any?(json['type'], ActivityPub::FetchRemoteActorService::SUPPORTED_TYPES) || expected_type?(json))\n+      return unless supported_context?(json) && (equals_or_includes_any?(json['type'], ActivityPub::FetchRemoteActorService::SUPPORTED_TYPES) || expected_type?(json))\n+\n+      if json['id'] != @url\n+        return if terminal\n+\n+        return process(json['id'], terminal: true)\n+      end\n+\n+      [@url, { prefetched_body: body }]\n     elsif !terminal\n       link_header = response['Link'] && parse_link_header(response)\n "
        },
        {
          "filename": "lib/mastodon/version.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -17,7 +17,7 @@ def patch\n     end\n \n     def default_prerelease\n-      'alpha.0'\n+      'alpha.1'\n     end\n \n     def prerelease"
        },
        {
          "filename": "spec/lib/activitypub/linked_data_signature_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -56,15 +56,15 @@\n \n         allow(ActivityPub::FetchRemoteKeyService).to receive(:new).and_return(service_stub)\n \n-        allow(service_stub).to receive(:call).with('http://example.com/alice', id: false) do\n+        allow(service_stub).to receive(:call).with('http://example.com/alice') do\n           sender.update!(public_key: old_key)\n           sender\n         end\n       end\n \n       it 'fetches key and returns creator' do\n         expect(subject.verify_actor!).to eq sender\n-        expect(service_stub).to have_received(:call).with('http://example.com/alice', id: false).once\n+        expect(service_stub).to have_received(:call).with('http://example.com/alice').once\n       end\n     end\n "
        },
        {
          "filename": "spec/services/activitypub/fetch_remote_account_service_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -18,7 +18,7 @@\n   end\n \n   describe '#call' do\n-    let(:account) { subject.call('https://example.com/alice', id: true) }\n+    let(:account) { subject.call('https://example.com/alice') }\n \n     shared_examples 'sets profile data' do\n       it 'returns an account with expected details' do"
        },
        {
          "filename": "spec/services/activitypub/fetch_remote_actor_service_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -18,7 +18,7 @@\n   end\n \n   describe '#call' do\n-    let(:account) { subject.call('https://example.com/alice', id: true) }\n+    let(:account) { subject.call('https://example.com/alice') }\n \n     shared_examples 'sets profile data' do\n       it 'returns an account and sets attributes' do"
        },
        {
          "filename": "spec/services/activitypub/fetch_remote_key_service_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -55,7 +55,7 @@\n   end\n \n   describe '#call' do\n-    let(:account) { subject.call(public_key_id, id: false) }\n+    let(:account) { subject.call(public_key_id) }\n \n     context 'when the key is a sub-object from the actor' do\n       before do"
        },
        {
          "filename": "spec/services/fetch_resource_service_spec.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -57,7 +57,7 @@\n \n       let(:json) do\n         {\n-          id: 1,\n+          id: 'http://example.com/foo',\n           '@context': ActivityPub::TagManager::CONTEXT,\n           type: 'Note',\n         }.to_json\n@@ -83,27 +83,27 @@\n         let(:content_type) { 'application/activity+json; charset=utf-8' }\n         let(:body) { json }\n \n-        it { is_expected.to eq [1, { prefetched_body: body, id: true }] }\n+        it { is_expected.to eq ['http://example.com/foo', { prefetched_body: body }] }\n       end\n \n       context 'when content type is ld+json with profile' do\n         let(:content_type) { 'application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"' }\n         let(:body) { json }\n \n-        it { is_expected.to eq [1, { prefetched_body: body, id: true }] }\n+        it { is_expected.to eq ['http://example.com/foo', { prefetched_body: body }] }\n       end\n \n       context 'when link header is present' do\n         let(:headers) { { 'Link' => '<http://example.com/foo>; rel=\"alternate\"; type=\"application/activity+json\"' } }\n \n-        it { is_expected.to eq [1, { prefetched_body: json, id: true }] }\n+        it { is_expected.to eq ['http://example.com/foo', { prefetched_body: json }] }\n       end\n \n       context 'when content type is text/html' do\n         let(:content_type) { 'text/html' }\n         let(:body) { '<html><head><link rel=\"alternate\" href=\"http://example.com/foo\" type=\"application/activity+json\"/></head></html>' }\n \n-        it { is_expected.to eq [1, { prefetched_body: json, id: true }] }\n+        it { is_expected.to eq ['http://example.com/foo', { prefetched_body: json }] }\n       end\n     end\n   end"
        },
        {
          "filename": "spec/services/resolve_url_service_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -139,6 +139,7 @@\n         stub_request(:get, url).to_return(status: 302, headers: { 'Location' => status_url })\n         body = ActiveModelSerializers::SerializableResource.new(status, serializer: ActivityPub::NoteSerializer, adapter: ActivityPub::Adapter).to_json\n         stub_request(:get, status_url).to_return(body: body, headers: { 'Content-Type' => 'application/activity+json' })\n+        stub_request(:get, uri).to_return(body: body, headers: { 'Content-Type' => 'application/activity+json' })\n       end\n \n       it 'returns status by url' do"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2df86d6413d14c269d630ac39f5f9da1e7f07417",
            "date": "2025-01-24T22:20:05Z",
            "author_login": "Gargron"
          },
          {
            "sha": "79cbb6160d9e374c6274da7d44de0e663a978a37",
            "date": "2025-01-24T17:16:22Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "f73df1f2b058e782cb3ff3e4c4a08d2768db7c90",
            "date": "2025-01-24T16:57:55Z",
            "author_login": "mjankowski"
          },
          {
            "sha": "469c8f8db16cc5fe48c1831364551129d53c9d0c",
            "date": "2025-01-24T16:49:48Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "9a0166c3f30fdc0fa60d4be5e88ebc03ec69f4ed",
            "date": "2025-01-24T16:11:23Z",
            "author_login": "ClearlyClaire"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H",
    "cwe_id": "CWE-290",
    "description": "Mastodon is a free, open-source social network server based on ActivityPub Mastodon allows configuration of LDAP for authentication. Due to insufficient origin validation in all Mastodon, attackers can impersonate and take over any remote account. Every Mastodon version prior to 3.5.17 is vulnerable, as well as 4.0.x versions prior to 4.0.13, 4.1.x version prior to 4.1.13, and 4.2.x versions prior to 4.2.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-01T17:15:10.677",
    "last_modified": "2024-11-21T08:58:31.150",
    "fix_date": "2024-02-01T14:56:46Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/02/02/4",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/commit/1726085db5cd73dd30953da858f9887bcc90b958",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-3fjr-858r-92rw",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/02/02/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/commit/1726085db5cd73dd30953da858f9887bcc90b958",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-3fjr-858r-92rw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.575344",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "mastodon",
    "owner": "mastodon",
    "created_at": "2016-02-22T15:01:25Z",
    "updated_at": "2025-01-26T06:33:16Z",
    "pushed_at": "2025-01-26T04:26:40Z",
    "size": 277664,
    "stars": 47604,
    "forks": 7074,
    "open_issues": 4022,
    "watchers": 47604,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 4661421,
      "JavaScript": 1241760,
      "TypeScript": 654337,
      "SCSS": 341279,
      "Haml": 320601,
      "Dockerfile": 18732,
      "HTML": 13453,
      "Shell": 2288,
      "Procfile": 911,
      "CSS": 51
    },
    "commit_activity": {
      "total_commits_last_year": 2991,
      "avg_commits_per_week": 57.51923076923077,
      "days_active_last_year": 267
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-26T07:34:39.823447"
  }
}