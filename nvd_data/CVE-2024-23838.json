{
  "cve_id": "CVE-2024-23838",
  "github_data": {
    "repository": "TrueLayer/truelayer-dotnet",
    "fix_commit": "75e436ed5360faa73d6e7ce3a9903a3c49505e3e",
    "related_commits": [
      "75e436ed5360faa73d6e7ce3a9903a3c49505e3e",
      "75e436ed5360faa73d6e7ce3a9903a3c49505e3e"
    ],
    "patch_url": "https://github.com/TrueLayer/truelayer-dotnet/commit/75e436ed5360faa73d6e7ce3a9903a3c49505e3e.patch",
    "fix_commit_details": {
      "sha": "75e436ed5360faa73d6e7ce3a9903a3c49505e3e",
      "commit_date": "2024-01-22T16:55:08Z",
      "author": {
        "login": "tl-mauro-franchi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-67m4-qxp3-j6hh",
        "length": 96,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 418,
        "additions": 343,
        "deletions": 75
      },
      "files": [
        {
          "filename": "src/TrueLayer/ApiClient.cs",
          "status": "modified",
          "additions": 11,
          "deletions": 6,
          "patch": "@@ -9,6 +9,8 @@\n using System.Net.Mime;\n using TrueLayer.Serialization;\n using System.Text.Json;\n+using Microsoft.Extensions.Options;\n+using TrueLayer.Common;\n using TrueLayer.Signing;\n #if NET6_0 || NET6_0_OR_GREATER\n using System.Net.Http.Json;\n@@ -25,20 +27,23 @@ private static readonly String TlAgentHeader\n             = $\"truelayer-dotnet/{ReflectionUtils.GetAssemblyVersion<ITrueLayerClient>()}\";\n \n         private readonly HttpClient _httpClient;\n+        private readonly TrueLayerOptions _options;\n \n         /// <summary>\n         /// Creates a new <see cref=\"ApiClient\"/> instance with the provided configuration, HTTP client factory and serializer.\n         /// </summary>\n         /// <param name=\"httpClient\">The client used to make HTTP requests.</param>\n-        public ApiClient(HttpClient httpClient)\n+        /// <param name=\"options\"></param>\n+        public ApiClient(HttpClient httpClient, IOptions<TrueLayerOptions> options)\n         {\n             _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));\n+            _options = options.Value ?? throw new ArgumentNullException(nameof(options));\n         }\n \n         /// <inheritdoc />\n         public async Task<ApiResponse<TData>> GetAsync<TData>(Uri uri, string? accessToken = null, CancellationToken cancellationToken = default)\n         {\n-            if (uri is null) throw new ArgumentNullException(nameof(uri));\n+            uri.HasValidBaseUri(nameof(uri), _options);\n \n             using var httpResponse = await SendRequestAsync(\n                 httpMethod: HttpMethod.Get,\n@@ -56,7 +61,7 @@ public async Task<ApiResponse<TData>> GetAsync<TData>(Uri uri, string? accessTok\n         /// <inheritdoc />\n         public async Task<ApiResponse<TData>> PostAsync<TData>(Uri uri, HttpContent? httpContent = null, string? accessToken = null, CancellationToken cancellationToken = default)\n         {\n-            if (uri is null) throw new ArgumentNullException(nameof(uri));\n+            uri.HasValidBaseUri(nameof(uri), _options);\n \n             using var httpResponse = await SendRequestAsync(\n                 httpMethod: HttpMethod.Post,\n@@ -74,7 +79,7 @@ public async Task<ApiResponse<TData>> PostAsync<TData>(Uri uri, HttpContent? htt\n         /// <inheritdoc />\n         public async Task<ApiResponse<TData>> PostAsync<TData>(Uri uri, object? request = null, string? idempotencyKey = null, string? accessToken = null, SigningKey? signingKey = null, CancellationToken cancellationToken = default)\n         {\n-            if (uri is null) throw new ArgumentNullException(nameof(uri));\n+            uri.HasValidBaseUri(nameof(uri), _options);\n \n             using var httpResponse = await SendJsonRequestAsync(\n                 httpMethod: HttpMethod.Post,\n@@ -91,7 +96,7 @@ public async Task<ApiResponse<TData>> PostAsync<TData>(Uri uri, object? request\n \n         public async Task<ApiResponse> PostAsync(Uri uri, HttpContent? httpContent = null, string? accessToken = null, CancellationToken cancellationToken = default)\n         {\n-            if (uri is null) throw new ArgumentNullException(nameof(uri));\n+            uri.HasValidBaseUri(nameof(uri), _options);\n \n             using var httpResponse = await SendRequestAsync(\n                 httpMethod: HttpMethod.Post,\n@@ -108,7 +113,7 @@ public async Task<ApiResponse> PostAsync(Uri uri, HttpContent? httpContent = nul\n \n         public async Task<ApiResponse> PostAsync(Uri uri, object? request = null, string? idempotencyKey = null, string? accessToken = null, SigningKey? signingKey = null, CancellationToken cancellationToken = default)\n         {\n-            if (uri is null) throw new ArgumentNullException(nameof(uri));\n+            uri.HasValidBaseUri(nameof(uri), _options);\n \n             using var httpResponse = await SendJsonRequestAsync(\n                 httpMethod: HttpMethod.Post,"
        },
        {
          "filename": "src/TrueLayer/Auth/AuthApi.cs",
          "status": "modified",
          "additions": 8,
          "deletions": 6,
          "patch": "@@ -3,14 +3,13 @@\n using System.Net.Http;\n using System.Threading;\n using System.Threading.Tasks;\n+using TrueLayer.Common;\n+using TrueLayer.Extensions;\n \n namespace TrueLayer.Auth\n {\n     internal class AuthApi : IAuthApi\n     {\n-        internal const string ProdUrl = \"https://auth.truelayer.com/\";\n-        internal const string SandboxUrl = \"https://auth.truelayer-sandbox.com/\";\n-\n         private readonly IApiClient _apiClient;\n         private readonly TrueLayerOptions _options;\n         private readonly Uri _baseUri;\n@@ -20,8 +19,11 @@ public AuthApi(IApiClient apiClient, TrueLayerOptions options)\n             _apiClient = apiClient.NotNull(nameof(apiClient));\n             _options = options.NotNull(nameof(options));\n \n-            _baseUri = options.Auth?.Uri ??\n-                      new Uri((options.UseSandbox ?? true) ? SandboxUrl : ProdUrl);\n+            var baseUri = (options.UseSandbox ?? true)\n+                ? TrueLayerBaseUris.SandboxAuthBaseUri\n+                : TrueLayerBaseUris.ProdAuthBaseUri;\n+\n+            _baseUri = options.Auth?.Uri ?? baseUri;\n         }\n \n         /// <inheritdoc />\n@@ -42,7 +44,7 @@ public async ValueTask<ApiResponse<GetAuthTokenResponse>> GetAuthToken(GetAuthTo\n             }\n \n             return await _apiClient.PostAsync<GetAuthTokenResponse>(\n-                new Uri(_baseUri, \"connect/token\"), new FormUrlEncodedContent(values), null, cancellationToken);\n+                _baseUri.Append(\"connect/token\"), new FormUrlEncodedContent(values), null, cancellationToken);\n         }\n     }\n }"
        },
        {
          "filename": "src/TrueLayer/Common/TrueLayerBaseUris.cs",
          "status": "added",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -0,0 +1,13 @@\n+using System;\n+\n+namespace TrueLayer.Common;\n+\n+internal static class TrueLayerBaseUris\n+{\n+    internal static readonly Uri ProdApiBaseUri = new(\"https://api.truelayer.com/\");\n+    internal static readonly Uri SandboxApiBaseUri = new(\"https://api.truelayer-sandbox.com/\");\n+    internal static readonly Uri ProdAuthBaseUri = new(\"https://auth.truelayer.com/\");\n+    internal static readonly Uri SandboxAuthBaseUri = new(\"https://auth.truelayer-sandbox.com/\");\n+    internal static readonly Uri ProdHppBaseUri = new(\"https://payment.truelayer.com/\");\n+    internal static readonly Uri SandboxHppBaseUri = new(\"https://payment.truelayer-sandbox.com/\");\n+}"
        },
        {
          "filename": "src/TrueLayer/Extensions/UriExtensions.cs",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1,5 +1,6 @@\n using System;\n using System.Linq;\n+using System.Text;\n using System.Text.Json;\n using TrueLayer.Serialization;\n \n@@ -9,8 +10,8 @@ public static class UriExtensions\n     {\n         public static Uri Append(this Uri uri, params string[] segments)\n         {\n-            string newUri = string.Join(\"/\", new[] { uri.AbsoluteUri.TrimEnd('/') }\n-                .Concat(segments.Select(s => s.Trim('/'))));\n+            string newUri = string.Join(\"/\", new[] { uri.AbsoluteUri.TrimEnd('/').Replace(\"\\\\\", string.Empty) }\n+                .Concat(segments.Select(s => s.Replace(\"\\\\\", string.Empty).Trim('/'))));\n             return new Uri(newUri);\n         }\n "
        },
        {
          "filename": "src/TrueLayer/Guard.cs",
          "status": "modified",
          "additions": 88,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n using System;\n using System.Diagnostics;\n using System.Diagnostics.CodeAnalysis;\n+using TrueLayer.Common;\n \n namespace TrueLayer\n {\n@@ -87,5 +88,92 @@ public static T GreaterThan<T>([NotNull] this T value, T greaterThan, string par\n \n             return value;\n         }\n+\n+        /// <summary>\n+        /// Validates that the provided <paramref name=\"value\"/> is not an URL\n+        /// </summary>\n+        /// <param name=\"value\">The value to validate</param>\n+        /// <param name=\"name\">The name of the argument</param>\n+        /// <returns>The value of <paramref name=\"value\"/> if it is not an URL</returns>\n+        /// <exception cref=\"ArgumentException\">Thrown when the value is an URL</exception>\n+        /// <example>\n+        /// <code>\n+        /// _id = id.NotAUrl(nameof(id));\n+        /// </code>\n+        /// </example>\n+        [DebuggerStepThrough]\n+        public static string? NotAUrl(this string? value, string name)\n+            => value is not null\n+               && (value.Contains(' ')\n+                || Uri.IsWellFormedUriString(value, UriKind.Absolute)\n+                || value.StartsWith('\\\\')\n+                || value.Contains('/')\n+                || value.Contains('.'))\n+                ? throw new ArgumentException(\"Value is malformed\", name)\n+                : value;\n+\n+        /// <summary>\n+        /// Validate that the provided URI one of the configured (from the options) URIs as base address, or one of the TrueLayer ones based on the environment used.\n+        /// </summary>\n+        /// <param name=\"value\">The value to validate</param>\n+        /// <param name=\"name\">The name of the argument</param>\n+        /// <param name=\"options\">The <see cref=\"TrueLayerOptions\"/> that contain the custom configured URIs</param>\n+        /// <returns>The value of <paramref name=\"value\"/> if it is valid</returns>\n+        /// <exception cref=\"ArgumentException\">Thrown when the value is not valid</exception>\n+        /// <example>\n+        /// <code>\n+        /// _uri = uri.HasValidBaseUri(nameof(_uri), options);\n+        /// </code>\n+        /// </example>\n+        internal static Uri? HasValidBaseUri(this Uri? value, string name, TrueLayerOptions options)\n+        {\n+            value.NotNull(name);\n+            const string errorMsg = \"The URI must be a valid TrueLayer API URI one of those configured in the settings.\";\n+            bool result = value.IsLoopback // is localhost?\n+                          || ((options.Payments?.Uri is not null) && options.Payments!.Uri.IsBaseOf(value))\n+                          || ((options.Auth?.Uri is not null) && options.Auth!.Uri.IsBaseOf(value))\n+                          || ((options.Payments?.HppUri is not null) && options.Payments!.HppUri.IsBaseOf(value));\n+\n+            if (options.UseSandbox == true)\n+            {\n+                result = result\n+                         || TrueLayerBaseUris.SandboxAuthBaseUri.IsBaseOf(value)\n+                         || TrueLayerBaseUris.SandboxApiBaseUri.IsBaseOf(value)\n+                         || TrueLayerBaseUris.SandboxHppBaseUri.IsBaseOf(value);\n+            }\n+            else\n+            {\n+                result = result\n+                         || TrueLayerBaseUris.ProdAuthBaseUri.IsBaseOf(value)\n+                         || TrueLayerBaseUris.ProdApiBaseUri.IsBaseOf(value)\n+                         || TrueLayerBaseUris.ProdHppBaseUri.IsBaseOf(value);\n+            }\n+\n+            result.ThrowIfFalse(name, errorMsg);\n+            return value;\n+        }\n+\n+        /// <summary>\n+        /// Validate that the provided value is not false\n+        /// </summary>\n+        /// <param name=\"value\">The value to validate</param>\n+        /// <param name=\"name\">The name of the argument</param>\n+        /// <param name=\"message\">The message that needs to be assigned to the exception</param>\n+        /// <returns>The value of <paramref name=\"value\"/> if not false</returns>\n+        /// <exception cref=\"ArgumentException\">Thrown when the value is false</exception>\n+        /// <example>\n+        /// <code>\n+        /// _value = value.ThrowIfFalse(nameof(_value), \"The value cannot be false\");\n+        /// </code>\n+        /// </example>\n+        private static bool ThrowIfFalse(this bool value, string name, string message)\n+        {\n+            if (!value)\n+            {\n+                throw new ArgumentException(message, name);\n+            }\n+\n+            return value;\n+        }\n     }\n }"
        },
        {
          "filename": "src/TrueLayer/Mandates/IMandatesApi.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -122,13 +122,13 @@ Task<ApiResponse<GetConstraintsResponse>> GetMandateConstraints(\n         /// <summary>\n         /// Revoke mandate\n         /// </summary>\n-        /// <param name=\"id\">The id of the mandate</param>\n+        /// <param name=\"mandateId\">The id of the mandate</param>\n         /// <param name=\"idempotencyKey\">\n         /// An idempotency key to allow safe retrying without the operation being performed multiple times.\n         /// The value should be unique for each operation, e.g. a UUID, with the same key being sent on a retry of the same request.\n         /// </param>\n         /// <param name=\"cancellationToken\">The cancellation token to cancel the operation</param>\n         /// <returns>An API response that includes the payment details if successful, otherwise problem details</returns>\n-        Task<ApiResponse> RevokeMandate(string id, string idempotencyKey, MandateType mandateType, CancellationToken cancellationToken = default);\n+        Task<ApiResponse> RevokeMandate(string mandateId, string idempotencyKey, MandateType mandateType, CancellationToken cancellationToken = default);\n     }\n }"
        },
        {
          "filename": "src/TrueLayer/Mandates/MandatesApi.cs",
          "status": "modified",
          "additions": 35,
          "deletions": 26,
          "patch": "@@ -3,26 +3,25 @@\n using System.Threading.Tasks;\n using TrueLayer.Auth;\n using OneOf;\n+using TrueLayer.Common;\n+using TrueLayer.Extensions;\n+using TrueLayer.Mandates.Model;\n+using TrueLayer.Models;\n \n namespace TrueLayer.Mandates\n {\n-    using TrueLayer.Mandates.Model;\n-    using TrueLayer.Models;\n     using AuthorizationResponseUnion = OneOf<\n-        Models.AuthorisationFlowResponse.AuthorizationFlowAuthorizing,\n-        Models.AuthorisationFlowResponse.AuthorizationFlowAuthorizationFailed>;\n+        AuthorisationFlowResponse.AuthorizationFlowAuthorizing,\n+        AuthorisationFlowResponse.AuthorizationFlowAuthorizationFailed>;\n     using MandateDetailUnion = OneOf<\n-        Model.MandateDetail.AuthorizationRequiredMandateDetail,\n-        Model.MandateDetail.AuthorizingMandateDetail,\n-        Model.MandateDetail.AuthorizedMandateDetail,\n-        Model.MandateDetail.FailedMandateDetail,\n-        Model.MandateDetail.RevokedMandateDetail>;\n+        MandateDetail.AuthorizationRequiredMandateDetail,\n+        MandateDetail.AuthorizingMandateDetail,\n+        MandateDetail.AuthorizedMandateDetail,\n+        MandateDetail.FailedMandateDetail,\n+        MandateDetail.RevokedMandateDetail>;\n \n     internal class MandatesApi : IMandatesApi\n     {\n-        private const string ProdUrl = \"https://api.truelayer.com/v3/mandates/\";\n-        private const string SandboxUrl = \"https://api.truelayer-sandbox.com/v3/mandates/\";\n-\n         private readonly IApiClient _apiClient;\n         private readonly TrueLayerOptions _options;\n         private readonly Uri _baseUri;\n@@ -36,9 +35,12 @@ public MandatesApi(IApiClient apiClient, IAuthApi auth, TrueLayerOptions options\n \n             options.Payments.NotNull(nameof(options.Payments))!.Validate();\n \n-            _baseUri = options.Payments.Uri is not null\n-                ? new Uri(options.Payments.Uri, \"/v3/mandates/\")\n-                : new Uri((options.UseSandbox ?? true) ? SandboxUrl : ProdUrl);\n+            var baseUri = (options.UseSandbox ?? true)\n+                ? TrueLayerBaseUris.SandboxApiBaseUri\n+                : TrueLayerBaseUris.ProdApiBaseUri;\n+\n+            _baseUri = (options.Payments.Uri ?? baseUri)\n+                .Append(\"/v3/mandates/\");\n         }\n \n         /// <inheritdoc />\n@@ -68,6 +70,7 @@ public async Task<ApiResponse<CreateMandateResponse>> CreateMandate(CreateMandat\n         public async Task<ApiResponse<MandateDetailUnion>> GetMandate(string mandateId, MandateType mandateType, CancellationToken cancellationToken = default)\n         {\n             mandateId.NotNullOrWhiteSpace(nameof(mandateId));\n+            mandateId.NotAUrl(nameof(mandateId));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest($\"recurring_payments:{mandateType.AsString()}\"), cancellationToken);\n \n@@ -77,7 +80,7 @@ public async Task<ApiResponse<MandateDetailUnion>> GetMandate(string mandateId,\n             }\n \n             return await _apiClient.GetAsync<MandateDetailUnion>(\n-                new Uri(_baseUri, mandateId),\n+                _baseUri.Append(mandateId),\n                 authResponse.Data!.AccessToken,\n                 cancellationToken\n             );\n@@ -94,8 +97,8 @@ public async Task<ApiResponse<ResourceCollection<MandateDetailUnion>>> ListManda\n             }\n \n             var queryParameters = System.Web.HttpUtility.ParseQueryString(string.Empty);\n-            queryParameters[\"user_id\"] = query.UserId;\n-            queryParameters[\"cursor\"] = query.Cursor;\n+            queryParameters[\"user_id\"] = query.UserId.NotAUrl($\"{nameof(query)}.{nameof(query.UserId)}\");\n+            queryParameters[\"cursor\"] = query.Cursor.NotAUrl($\"{nameof(query)}.{nameof(query.UserId)}\");\n             queryParameters[\"limit\"] = query.Limit.ToString();\n             var baseUriBuilder = new UriBuilder(_baseUri) { Query = queryParameters.ToString() };\n \n@@ -110,6 +113,7 @@ public async Task<ApiResponse<ResourceCollection<MandateDetailUnion>>> ListManda\n         public async Task<ApiResponse<AuthorizationResponseUnion>> StartAuthorizationFlow(string mandateId, StartAuthorizationFlowRequest request, string idempotencyKey, MandateType mandateType, CancellationToken cancellationToken = default)\n         {\n             mandateId.NotNullOrWhiteSpace(nameof(mandateId));\n+            mandateId.NotAUrl(nameof(mandateId));\n             request.NotNull(nameof(request));\n             idempotencyKey.NotNullOrWhiteSpace(nameof(idempotencyKey));\n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest($\"recurring_payments:{mandateType.AsString()}\"), cancellationToken);\n@@ -120,7 +124,7 @@ public async Task<ApiResponse<AuthorizationResponseUnion>> StartAuthorizationFlo\n             }\n \n             return await _apiClient.PostAsync<AuthorizationResponseUnion>(\n-                new Uri(_baseUri, $\"/v3/mandates/{mandateId}/authorization-flow\"),\n+                _baseUri.Append($\"{mandateId}/authorization-flow\"),\n                 request,\n                 idempotencyKey,\n                 authResponse.Data!.AccessToken,\n@@ -133,6 +137,7 @@ public async Task<ApiResponse<AuthorizationResponseUnion>> StartAuthorizationFlo\n         public async Task<ApiResponse<AuthorizationResponseUnion>> SubmitProviderSelection(string mandateId, SubmitProviderSelectionRequest request, string idempotencyKey, MandateType mandateType, CancellationToken cancellationToken = default)\n         {\n             mandateId.NotNullOrWhiteSpace(nameof(mandateId));\n+            mandateId.NotAUrl(nameof(mandateId));\n             request.NotNull(nameof(request));\n             idempotencyKey.NotNullOrWhiteSpace(nameof(idempotencyKey));\n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest($\"recurring_payments:{mandateType.AsString()}\"), cancellationToken);\n@@ -143,7 +148,7 @@ public async Task<ApiResponse<AuthorizationResponseUnion>> SubmitProviderSelecti\n             }\n \n             return await _apiClient.PostAsync<AuthorizationResponseUnion>(\n-                new Uri(_baseUri, $\"/v3/mandates/{mandateId}/authorization-flow/actions/provider-selection\"),\n+                _baseUri.Append($\"{mandateId}/authorization-flow/actions/provider-selection\"),\n                 request,\n                 idempotencyKey,\n                 authResponse.Data!.AccessToken,\n@@ -155,6 +160,7 @@ public async Task<ApiResponse<AuthorizationResponseUnion>> SubmitProviderSelecti\n         public async Task<ApiResponse<AuthorizationResponseUnion>> SubmitConsent(string mandateId, string idempotencyKey, MandateType mandateType, CancellationToken cancellationToken = default)\n         {\n             mandateId.NotNullOrWhiteSpace(nameof(mandateId));\n+            mandateId.NotAUrl(nameof(mandateId));\n             idempotencyKey.NotNullOrWhiteSpace(nameof(idempotencyKey));\n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest($\"recurring_payments:{mandateType.AsString()}\"), cancellationToken);\n \n@@ -164,7 +170,7 @@ public async Task<ApiResponse<AuthorizationResponseUnion>> SubmitConsent(string\n             }\n \n             return await _apiClient.PostAsync<AuthorizationResponseUnion>(\n-                new Uri(_baseUri, $\"/v3/mandates/{mandateId}/authorization-flow/actions/consent\"),\n+                _baseUri.Append($\"{mandateId}/authorization-flow/actions/consent\"),\n                 null,\n                 idempotencyKey,\n                 authResponse.Data!.AccessToken,\n@@ -177,6 +183,7 @@ public async Task<ApiResponse<AuthorizationResponseUnion>> SubmitConsent(string\n         public async Task<ApiResponse<GetConfirmationOfFundsResponse>> GetConfirmationOfFunds(string mandateId, int amountInMinor, string currency, MandateType mandateType, CancellationToken cancellationToken = default)\n         {\n             mandateId.NotNullOrWhiteSpace(nameof(mandateId));\n+            mandateId.NotAUrl(nameof(mandateId));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest($\"recurring_payments:{mandateType.AsString()}\"), cancellationToken);\n \n@@ -186,7 +193,7 @@ public async Task<ApiResponse<GetConfirmationOfFundsResponse>> GetConfirmationOf\n             }\n \n             return await _apiClient.GetAsync<GetConfirmationOfFundsResponse>(\n-                new Uri(_baseUri, $\"/v3/mandates/{mandateId}/funds?amount_in_minor={amountInMinor}&currency={currency}\"),\n+                _baseUri.Append($\"{mandateId}/funds?amount_in_minor={amountInMinor}&currency={currency}\"),\n                 authResponse.Data!.AccessToken,\n                 cancellationToken\n             );\n@@ -196,6 +203,7 @@ public async Task<ApiResponse<GetConfirmationOfFundsResponse>> GetConfirmationOf\n         public async Task<ApiResponse<GetConstraintsResponse>> GetMandateConstraints(string mandateId, MandateType mandateType, CancellationToken cancellationToken = default)\n         {\n             mandateId.NotNullOrWhiteSpace(nameof(mandateId));\n+            mandateId.NotAUrl(nameof(mandateId));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest($\"recurring_payments:{mandateType.AsString()}\"), cancellationToken);\n \n@@ -205,16 +213,17 @@ public async Task<ApiResponse<GetConstraintsResponse>> GetMandateConstraints(str\n             }\n \n             return await _apiClient.GetAsync<GetConstraintsResponse>(\n-                new Uri(_baseUri, $\"/v3/mandates/{mandateId}/constraints\"),\n+                _baseUri.Append($\"{mandateId}/constraints\"),\n                 authResponse.Data!.AccessToken,\n                 cancellationToken\n             );\n         }\n \n         /// <inheritdoc />\n-        public async Task<ApiResponse> RevokeMandate(string id, string idempotencyKey, MandateType mandateType, CancellationToken cancellationToken = default)\n+        public async Task<ApiResponse> RevokeMandate(string mandateId, string idempotencyKey, MandateType mandateType, CancellationToken cancellationToken = default)\n         {\n-            id.NotNullOrWhiteSpace(nameof(id));\n+            mandateId.NotNullOrWhiteSpace(nameof(mandateId));\n+            mandateId.NotAUrl(nameof(mandateId));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest($\"recurring_payments:{mandateType.AsString()}\"), cancellationToken);\n \n@@ -224,7 +233,7 @@ public async Task<ApiResponse> RevokeMandate(string id, string idempotencyKey, M\n             }\n \n             return await _apiClient.PostAsync(\n-                new Uri(_baseUri, $\"/v3/mandates/{id}/revoke\"),\n+                _baseUri.Append($\"{mandateId}/revoke\"),\n                 null,\n                 idempotencyKey,\n                 authResponse.Data!.AccessToken,"
        },
        {
          "filename": "src/TrueLayer/MerchantAccounts/MerchantAccountsApi.cs",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -2,14 +2,14 @@\n using System.Threading;\n using System.Threading.Tasks;\n using TrueLayer.Auth;\n+using TrueLayer.Common;\n+using TrueLayer.Extensions;\n using TrueLayer.MerchantAccounts.Model;\n \n namespace TrueLayer.MerchantAccounts\n {\n     internal class MerchantAccountsApi : IMerchantAccountsApi\n     {\n-        private const string ProdUrl = \"https://api.truelayer.com/v3/merchant-accounts\";\n-        private const string SandboxUrl = \"https://api.truelayer-sandbox.com/v3/merchant-accounts\";\n         private readonly IApiClient _apiClient;\n         private readonly Uri _baseUri;\n         private readonly IAuthApi _auth;\n@@ -21,9 +21,12 @@ public MerchantAccountsApi(IApiClient apiClient, IAuthApi auth, TrueLayerOptions\n \n             options.Payments.NotNull(nameof(options.Payments))!.Validate();\n \n-            _baseUri = options.Payments.Uri is not null\n-                ? new Uri(options.Payments.Uri, \"/v3/merchant-accounts\")\n-                : new Uri(options.UseSandbox ?? true ? SandboxUrl : ProdUrl);\n+            var baseUri = (options.UseSandbox ?? true)\n+                ? TrueLayerBaseUris.SandboxApiBaseUri\n+                : TrueLayerBaseUris.ProdApiBaseUri;\n+\n+            _baseUri = (options.Payments.Uri ?? baseUri)\n+                .Append(\"/v3/merchant-accounts\");\n         }\n \n         /// <inheritdoc />\n@@ -47,6 +50,7 @@ public async Task<ApiResponse<ResourceCollection<MerchantAccount>>> ListMerchant\n         public async Task<ApiResponse<MerchantAccount>> GetMerchantAccount(string id, CancellationToken cancellationToken = default)\n         {\n             id.NotNullOrWhiteSpace(nameof(id));\n+            id.NotAUrl(nameof(id));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest(\"payments\"), cancellationToken);\n \n@@ -67,7 +71,9 @@ public async Task<ApiResponse<MerchantAccount>> GetMerchantAccount(string id, Ca\n         public async Task<ApiResponse<GetPaymentSourcesResponse>> GetPaymentSources(string merchantAccountId, string userId, CancellationToken cancellationToken = default)\n         {\n             merchantAccountId.NotNullOrWhiteSpace(nameof(merchantAccountId));\n+            merchantAccountId.NotAUrl(nameof(merchantAccountId));\n             userId.NotNullOrWhiteSpace(nameof(userId));\n+            userId.NotAUrl(nameof(userId));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest(\"payments\"), cancellationToken);\n \n@@ -77,7 +83,7 @@ public async Task<ApiResponse<GetPaymentSourcesResponse>> GetPaymentSources(stri\n             }\n \n             return await _apiClient.GetAsync<GetPaymentSourcesResponse>(\n-                new Uri(_baseUri, $\"merchant-accounts/{merchantAccountId}/payment-sources?user_id={userId}\"),\n+                _baseUri.Append($\"merchant-accounts/{merchantAccountId}/payment-sources?user_id={userId}\"),\n                 authResponse.Data!.AccessToken,\n                 cancellationToken\n             );"
        },
        {
          "filename": "src/TrueLayer/Payments/PaymentsApi.cs",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -3,6 +3,8 @@\n using System.Threading.Tasks;\n using OneOf;\n using TrueLayer.Auth;\n+using TrueLayer.Common;\n+using TrueLayer.Extensions;\n using TrueLayer.Payments.Model;\n \n namespace TrueLayer.Payments\n@@ -24,10 +26,6 @@ namespace TrueLayer.Payments\n \n     internal class PaymentsApi : IPaymentsApi\n     {\n-        private const string ProdUrl = \"https://api.truelayer.com/v3/payments/\";\n-        private const string SandboxUrl = \"https://api.truelayer-sandbox.com/v3/payments/\";\n-        internal static string[] RequiredScopes = new[] { \"payments\" };\n-\n         private readonly IApiClient _apiClient;\n         private readonly TrueLayerOptions _options;\n         private readonly Uri _baseUri;\n@@ -43,9 +41,12 @@ public PaymentsApi(IApiClient apiClient, IAuthApi auth, TrueLayerOptions options\n \n             options.Payments.NotNull(nameof(options.Payments))!.Validate();\n \n-            _baseUri = options.Payments.Uri is not null\n-                ? new Uri(options.Payments.Uri, \"/v3/payments/\")\n-                : new Uri((options.UseSandbox ?? true) ? SandboxUrl : ProdUrl);\n+            var baseUri = (options.UseSandbox ?? true)\n+                ? TrueLayerBaseUris.SandboxApiBaseUri\n+                : TrueLayerBaseUris.ProdApiBaseUri;\n+\n+            _baseUri = (options.Payments.Uri ?? baseUri)\n+                .Append(\"/v3/payments/\");\n         }\n \n         /// <inheritdoc />\n@@ -76,6 +77,7 @@ public async Task<ApiResponse<CreatePaymentUnion>> CreatePayment(CreatePaymentRe\n         public async Task<ApiResponse<GetPaymentUnion>> GetPayment(string id, CancellationToken cancellationToken = default)\n         {\n             id.NotNullOrWhiteSpace(nameof(id));\n+            id.NotAUrl(nameof(id));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest(\"payments\"), cancellationToken);\n \n@@ -85,7 +87,7 @@ public async Task<ApiResponse<GetPaymentUnion>> GetPayment(string id, Cancellati\n             }\n \n             return await _apiClient.GetAsync<GetPaymentUnion>(\n-                new Uri(_baseUri, id),\n+                _baseUri.Append(id),\n                 authResponse.Data!.AccessToken,\n                 cancellationToken\n             );"
        },
        {
          "filename": "src/TrueLayer/PaymentsProviders/PaymentsApi.cs",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -1,14 +1,13 @@\n using System;\n using System.Threading.Tasks;\n+using TrueLayer.Common;\n+using TrueLayer.Extensions;\n using TrueLayer.PaymentsProviders.Model;\n \n namespace TrueLayer.PaymentsProviders\n {\n     internal class PaymentsProvidersApi : IPaymentsProvidersApi\n     {\n-        private const string ProdUrl = \"https://api.truelayer.com/v3/payments-providers/\";\n-        private const string SandboxUrl = \"https://api.truelayer-sandbox.com/v3/payments-providers/\";\n-\n         private readonly IApiClient _apiClient;\n         private readonly TrueLayerOptions _options;\n         private readonly Uri _baseUri;\n@@ -20,16 +19,20 @@ public PaymentsProvidersApi(IApiClient apiClient, TrueLayerOptions options)\n \n             options.Payments.NotNull(nameof(options.Payments))!.Validate();\n \n-            _baseUri = options.Payments.Uri is not null\n-                ? new Uri(options.Payments.Uri, \"/v3/payments-providers/\")\n-                : new Uri((options.UseSandbox ?? true) ? SandboxUrl : ProdUrl);\n+            var baseUri = (options.UseSandbox ?? true)\n+                ? TrueLayerBaseUris.SandboxApiBaseUri\n+                : TrueLayerBaseUris.ProdApiBaseUri;\n+\n+            _baseUri = (options.Payments.Uri ?? baseUri)\n+                .Append(\"/v3/payments-providers/\");\n         }\n \n         public async Task<ApiResponse<PaymentsProvider>> GetPaymentsProvider(string id)\n         {\n             id.NotNullOrWhiteSpace(nameof(id));\n+            id.NotAUrl(nameof(id));\n \n-            UriBuilder baseUri = new(new Uri(_baseUri, id)) { Query = $\"client_id={_options.ClientId}\" };\n+            UriBuilder baseUri = new(_baseUri.Append(id)) { Query = $\"client_id={_options.ClientId}\" };\n \n             return await _apiClient.GetAsync<PaymentsProvider>(baseUri.Uri);\n         }"
        },
        {
          "filename": "src/TrueLayer/Payouts/PayoutsApi.cs",
          "status": "modified",
          "additions": 8,
          "deletions": 7,
          "patch": "@@ -3,6 +3,7 @@\n using System.Threading.Tasks;\n using OneOf;\n using TrueLayer.Auth;\n+using TrueLayer.Common;\n using TrueLayer.Extensions;\n using TrueLayer.Payouts.Model;\n using static TrueLayer.Payouts.Model.GetPayoutsResponse;\n@@ -18,9 +19,6 @@ namespace TrueLayer.Payouts\n \n     internal class PayoutsApi : IPayoutsApi\n     {\n-        private const string ProdUrl = \"https://api.truelayer.com/v3/payouts\";\n-        private const string SandboxUrl = \"https://api.truelayer-sandbox.com/v3/payouts\";\n-\n         private readonly IApiClient _apiClient;\n         private readonly TrueLayerOptions _options;\n         private readonly Uri _baseUri;\n@@ -34,10 +32,12 @@ public PayoutsApi(IApiClient apiClient, IAuthApi auth, TrueLayerOptions options)\n \n             options.Payments.NotNull(nameof(options.Payments))!.Validate();\n \n-            string payoutsApiUrl = (options.UseSandbox ?? true) ? SandboxUrl : ProdUrl;\n-            _baseUri = options.Payments.Uri is not null\n-                ? new Uri(options.Payments.Uri, \"/v3/payouts\")\n-                : new Uri(payoutsApiUrl);\n+            var baseUri = (options.UseSandbox ?? true)\n+                ? TrueLayerBaseUris.SandboxApiBaseUri\n+                : TrueLayerBaseUris.ProdApiBaseUri;\n+\n+            _baseUri = (options.Payments.Uri ?? baseUri)\n+                .Append(\"/v3/payouts/\");\n         }\n \n         /// <inheritdoc />\n@@ -66,6 +66,7 @@ public async Task<ApiResponse<CreatePayoutResponse>> CreatePayout(CreatePayoutRe\n         public async Task<ApiResponse<GetPayoutUnion>> GetPayout(string id, CancellationToken cancellationToken = default)\n         {\n             id.NotNullOrWhiteSpace(nameof(id));\n+            id.NotAUrl(nameof(id));\n \n             ApiResponse<GetAuthTokenResponse> authResponse = await _auth.GetAuthToken(new GetAuthTokenRequest(\"payments\"), cancellationToken);\n "
        },
        {
          "filename": "src/TrueLayer/TrueLayerServiceCollectionExtensions.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -39,7 +39,7 @@ public static IServiceCollection AddTrueLayer(\n             configureBuilder?.Invoke(httpClientBuilder);\n \n             services.AddTransient<ITrueLayerClient, TrueLayerClient>();\n-            \n+\n             return services;\n         }\n     }"
        },
        {
          "filename": "test/TrueLayer.Tests/ApiClientTests.cs",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -10,6 +10,7 @@\n using TrueLayer.Serialization;\n using System.Text;\n using System.Text.Json;\n+using Microsoft.Extensions.Options;\n \n namespace TrueLayer.Sdk.Tests\n {\n@@ -31,8 +32,7 @@ public ApiClientTests()\n             _httpMessageHandler = new MockHttpMessageHandler();\n \n             _apiClient = new ApiClient(\n-                _httpMessageHandler.ToHttpClient()\n-            );\n+                _httpMessageHandler.ToHttpClient(), Options.Create(new TrueLayerOptions()));\n \n             _stub = new TestResponse\n             {\n@@ -241,7 +241,7 @@ public async Task Generates_request_signature_when_signing_key_and_body_provided\n             {\n                 key = \"value\"\n             };\n-            \n+\n             var signingKey = new SigningKey { KeyId = Guid.NewGuid().ToString(), PrivateKey = _privateKey };\n \n             var requestUri = new Uri(\"http://localhost/signing\");"
        },
        {
          "filename": "test/TrueLayer.Tests/Extensions/UriExtensionsTests.cs",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -28,13 +28,20 @@ public static IEnumerable<object[]> UriTestData()\n             Uri baseUri = new(baseUrl);\n \n             yield return new object[] { baseUri, new[] {\"test\"}, new Uri($\"{baseUrl}test\") };\n+            yield return new object[] { baseUri, new[] {\"/test\"}, new Uri($\"{baseUrl}test\") };\n             yield return new object[] { baseUri, new[] {\"test\", \"/test2/\"}, new Uri($\"{baseUrl}test/test2\") };\n             yield return new object[]\n             {\n                 new Uri(\"http://test.foo.test/extra-path\"),\n                 new[] { \"test/\" },\n                 new Uri(\"http://test.foo.test/extra-path/test\"),\n             };\n+            yield return new object[]\n+            {\n+                new Uri(\"http://test.foo.test\"),\n+                new[] { \"/test\" },\n+                new Uri(\"http://test.foo.test/test\"),\n+            };\n         }\n     }\n }"
        },
        {
          "filename": "test/TrueLayer.Tests/GuardTests.cs",
          "status": "modified",
          "additions": 131,
          "deletions": 0,
          "patch": "@@ -39,5 +39,136 @@ public void Greater_than_throws_if_less_or_equal_to_value(int value)\n         [Fact]\n         public void Greater_than_does_not_throw_if_greater_than_value()\n             => _ = 10.GreaterThan(5, \"value\");\n+\n+        [Theory]\n+        [InlineData(null)]\n+        [InlineData(\"not_a_url\")]\n+        [InlineData(\"anotherNonUrl\")]\n+        [InlineData(\"7effef4a-17f2-4139-aee2-fae13544530a\")]\n+        [InlineData(\"85BF9448-A93F-4F5F-A325-8B5BA7845F83\")]\n+        [InlineData(\"{C5A41B28-109A-41C5-8CFD-695CC52A7539}\")]\n+        [InlineData(\"12345\")]\n+        public void NotAUrl_WithNullOrNonUrlValue_ReturnsSameValue(string? value)\n+        {\n+            Assert.Equal(value, value.NotAUrl(\"value\"));\n+        }\n+\n+        [Theory]\n+        [InlineData(\"http://example.com\")]\n+        [InlineData(\"https://example.com\")]\n+        [InlineData(\"/relative/url\")]\n+        [InlineData(\"http://example.com?query=string\")]\n+        [InlineData(\"http://example.com?query=string&otherquery=foo\")]\n+        [InlineData(\"http://example.com/path%20with%20spaces\")]\n+        [InlineData(\"string with spaces\")]\n+        [InlineData(\"A7+uG3zwvUiKtrwb/ZtQow==\")]\n+        [InlineData(\"\\\\/g8ph66mx5ltptbsdfwmr6kut2k8bw8kx.oastify.com\")]\n+        [InlineData(\"fake.test.com\")]\n+        [InlineData(\"fake.com\")]\n+        [InlineData(\"fake.com/\")]\n+        public void NotAUrl_WithUrlValue_ThrowsArgumentException(string value)\n+            => Assert.Throws<ArgumentException>(() => value.NotAUrl(\"value\"));\n+\n+        [Theory]\n+        // null URI\n+        [InlineData(null, null, null, null, true, typeof(ArgumentNullException))]\n+        [InlineData(null, null, null, null, false, typeof(ArgumentNullException))]\n+        [InlineData(null, \"http://foo.com\", \"http://foo.com\", \"http://foo.com\", true, typeof(ArgumentNullException))]\n+        [InlineData(null, \"http://foo.com\", \"http://foo.com\", \"http://foo.com\", false, typeof(ArgumentNullException))]\n+        // URI not based on TL URIs\n+        [InlineData(\"http://www.foo.com\", null, null, null, true, typeof(ArgumentException))]\n+        [InlineData(\"http://www.foo.com\", null, null, null, false, typeof(ArgumentException))]\n+        [InlineData(\"https://www.foo.com/path/\", null, null, null, true, typeof(ArgumentException))]\n+        [InlineData(\"https://www.foo.com/path\", null, null, null, false, typeof(ArgumentException))]\n+        // URI not based on custom configured Payments URIs\n+        [InlineData(\"http://www.foo.com\", \"http://payments.sandbox-foo.com\", null, null, false, typeof(ArgumentException))]\n+        [InlineData(\"https://payments.foo.com\", \"http://payments.sandbox-foo.com\", null, null, false, typeof(ArgumentException))]\n+        [InlineData(\"http://payments.foo.com\", \"https://payments.sandbox-foo.com\", null, null, false, typeof(ArgumentException))]\n+        [InlineData(\"http://payments.foo.com/path\", \"https://payments.sandbox-foo.com\", null, null, false, typeof(ArgumentException))]\n+        [InlineData(\"http://www.foo.com\", \"http://payments.foo.com\", null, null, true, typeof(ArgumentException))]\n+        // URI not based on custom configured Hpp URIs\n+        [InlineData(\"http://www.foo.com\", null, \"http://hpp.sandbox-foo.com\", null, false, typeof(ArgumentException))]\n+        [InlineData(\"http://www.foo.com\", null, \"http://hpp.foo.com\", null, true, typeof(ArgumentException))]\n+        // URI not based on custom configured Auth URIs\n+        [InlineData(\"http://www.foo.com\", null, null, \"http://auth.sandbox-foo.com\", false, typeof(ArgumentException))]\n+        [InlineData(\"http://www.foo.com\", null, null, \"http://auth.foo.com\", true, typeof(ArgumentException))]\n+        public void HasValidBaseUri_WithNullOrNotValidValue_ThrowsExpectedException(\n+            string? url,\n+            string? configuredPaymentApiUrl,\n+            string? configuredPaymentHppUrl,\n+            string? configuredAuthApiUrl,\n+            bool useSandbox,\n+            Type exceptionType)\n+        {\n+            var value = url != null ?  new Uri(url) : null;\n+            var options = new TrueLayerOptions()\n+            {\n+                UseSandbox = useSandbox,\n+                Payments = new()\n+                {\n+                    Uri = configuredPaymentApiUrl is not null ? new Uri(configuredPaymentApiUrl) : null,\n+                    HppUri =\n+                        configuredPaymentHppUrl is not null ? new Uri(configuredPaymentHppUrl) : null,\n+                },\n+                Auth = new()\n+                {\n+                    Uri = configuredAuthApiUrl is not null ? new Uri(configuredAuthApiUrl) : null,\n+                }\n+            };\n+\n+            Assert.Throws(exceptionType, () => value.HasValidBaseUri(nameof(value), options));\n+        }\n+\n+        [Theory]\n+        // URI based on custom configured Payments URIs\n+        [InlineData(\"http://payments.foo.com\", \"http://payments.foo.com\", null, null, false)]\n+        [InlineData(\"http://payments.foo.com/path/\", \"http://payments.foo.com\", null, null, false)]\n+        [InlineData(\"http://payments.foo.com/path\", \"http://payments.foo.com\", null, null, false)]\n+        [InlineData(\"https://payments.foo.com/path\", \"https://payments.foo.com\", null, null, false)]\n+        [InlineData(\"http://payments.sandbox-foo.com\", \"http://payments.sandbox-foo.com\", null, null, true)]\n+        // URI based on custom configured Hpp URIs\n+        [InlineData(\"http://hpp.sandbox-foo.com\", null, \"http://hpp.sandbox-foo.com\", null, true)]\n+        [InlineData(\"http://hpp.foo.com\", null, \"http://hpp.foo.com\", null, false)]\n+        // URI based on custom configured Auth URIs\n+        [InlineData(\"http://auth.sandbox-foo.com\", null, null, \"http://auth.sandbox-foo.com\", true)]\n+        [InlineData(\"http://auth.foo.com\", null, null, \"http://auth.foo.com\", false)]\n+        // URI based on Tl URIs\n+        [InlineData(\"https://auth.truelayer-sandbox.com/v3/foo\", null, null, null, true)]\n+        [InlineData(\"https://auth.truelayer.com/v3/foo/\", null, null, null, false)]\n+        [InlineData(\"https://api.truelayer-sandbox.com/v3/foo\", null, null, null, true)]\n+        [InlineData(\"https://api.truelayer.com/v3/foo/\", null, null, null, false)]\n+        [InlineData(\"https://payment.truelayer-sandbox.com/v3/foo\", null, null, null, true)]\n+        [InlineData(\"https://payment.truelayer.com/v3/foo/\", null, null, null, false)]\n+        // URI is localhost\n+        [InlineData(\"https://localhost/v3/foo/\", null, null, null, false)]\n+        [InlineData(\"http://localhost/v3/foo/\", null, null, null, false)]\n+        [InlineData(\"http://localhost/v3/foo/\", null, null, null, true)]\n+        public void HasValidBaseUri_WithValidInput_ReturnsSameValue(\n+            string url,\n+            string? configuredPaymentApiUrl,\n+            string? configuredPaymentHppUrl,\n+            string? configuredAuthApiUrl,\n+            bool useSandbox)\n+        {\n+            var value = new Uri(url);\n+            var options = new TrueLayerOptions()\n+            {\n+                UseSandbox = useSandbox,\n+                Payments = new()\n+                {\n+                    Uri = configuredPaymentApiUrl is not null ? new Uri(configuredPaymentApiUrl) : null,\n+                    HppUri =\n+                        configuredPaymentHppUrl is not null ? new Uri(configuredPaymentHppUrl) : null,\n+                },\n+                Auth = new()\n+                {\n+                    Uri = configuredAuthApiUrl is not null ? new Uri(configuredAuthApiUrl) : null,\n+                }\n+            };\n+\n+            var actual = value.HasValidBaseUri(nameof(value), options);\n+            Assert.Equal(value, actual);\n+\n+        }\n     }\n }"
        },
        {
          "filename": "test/TrueLayer.Tests/TrueLayerClientTests.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -33,7 +33,7 @@ public void Can_create_truelayer_client_from_options()\n                 }\n             };\n \n-            var client = new TrueLayerClient(new ApiClient(new HttpClient()), Options.Create(options));\n+            var client = new TrueLayerClient(new ApiClient(new HttpClient(), Options.Create(options)), Options.Create(options));\n             client.Auth.ShouldNotBeNull();\n             client.Payments.ShouldNotBeNull();\n             client.MerchantAccounts.ShouldNotBeNull();"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 11,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "442f1b42dd10d06595d1240fb45f7194a6fad8ff",
            "date": "2024-12-18T11:49:58Z",
            "author_login": "tl-Roberto-Mancinelli"
          },
          {
            "sha": "22de35097c6bf20b26c289a660f48c7ea4aaafe0",
            "date": "2024-12-18T08:44:53Z",
            "author_login": "tl-Roberto-Mancinelli"
          },
          {
            "sha": "89fa3a5285da11682e7d689e6bd0770390b8a940",
            "date": "2024-12-12T09:00:15Z",
            "author_login": "tl-Roberto-Mancinelli"
          },
          {
            "sha": "6ea53a42a21ff93f12e451287eea92a9b3d59637",
            "date": "2024-12-11T17:00:33Z",
            "author_login": "tl-Roberto-Mancinelli"
          },
          {
            "sha": "99d7cc1750ef873380b1b2f12409804be5ebd2c1",
            "date": "2024-12-02T09:44:06Z",
            "author_login": "tl-Roberto-Mancinelli"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "TrueLayer.NET is the .Net client for TrueLayer.  The vulnerability could potentially allow a malicious actor to gain control over the destination URL of the HttpClient used in the API classes. For applications using the SDK, requests to unexpected resources on local networks or to the internet could be made which could lead to information disclosure. The issue can be mitigated by having strict egress rules limiting the destinations to which requests can be made, and applying strict validation to any user input passed to the `truelayer-dotnet` library. Versions of TrueLayer.Client `v1.6.0` and later are not affected.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-01-30T17:15:11.437",
    "last_modified": "2024-11-21T08:58:32.093",
    "fix_date": "2024-01-22T16:55:08Z"
  },
  "references": [
    {
      "url": "https://github.com/TrueLayer/truelayer-dotnet/commit/75e436ed5360faa73d6e7ce3a9903a3c49505e3e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TrueLayer/truelayer-dotnet/security/advisories/GHSA-67m4-qxp3-j6hh",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/TrueLayer/truelayer-dotnet/commit/75e436ed5360faa73d6e7ce3a9903a3c49505e3e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/TrueLayer/truelayer-dotnet/security/advisories/GHSA-67m4-qxp3-j6hh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.550283",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "truelayer-dotnet",
    "owner": "TrueLayer",
    "created_at": "2021-04-23T14:20:34Z",
    "updated_at": "2024-12-18T11:50:03Z",
    "pushed_at": "2024-12-23T16:30:51Z",
    "size": 1532,
    "stars": 11,
    "forks": 12,
    "open_issues": 2,
    "watchers": 11,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C#": 434386,
      "Shell": 219
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:46:15.975562"
  }
}