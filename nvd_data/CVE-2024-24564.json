{
  "cve_id": "CVE-2024-24564",
  "github_data": {
    "repository": "vyperlang/vyper",
    "fix_commit": "3d9c537142fb99b2672f21e2057f5f202cde194f",
    "related_commits": [
      "3d9c537142fb99b2672f21e2057f5f202cde194f"
    ],
    "patch_url": "https://github.com/vyperlang/vyper/commit/3d9c537142fb99b2672f21e2057f5f202cde194f.patch",
    "fix_commit_details": {
      "sha": "3d9c537142fb99b2672f21e2057f5f202cde194f",
      "commit_date": "2024-06-18T19:49:36Z",
      "author": {
        "login": "charles-cooper",
        "type": "User",
        "stats": {
          "total_commits": 1087,
          "average_weekly_commits": 2.539719626168224,
          "total_additions": 171904,
          "total_deletions": 132151,
          "weeks_active": 180
        }
      },
      "commit_message": {
        "title": "fix[codegen]: panic on potential eval order issue for some builtins (#4157)",
        "length": 668,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 107,
        "additions": 106,
        "deletions": 1
      },
      "files": [
        {
          "filename": "tests/functional/builtins/codegen/test_extract32.py",
          "status": "modified",
          "additions": 48,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n import pytest\n \n from vyper.evm.opcodes import version_check\n+from vyper.exceptions import CompilerPanic\n \n \n @pytest.mark.parametrize(\"location\", [\"storage\", \"transient\"])\n@@ -98,3 +99,50 @@ def foq(inp: Bytes[32]) -> address:\n \n     with tx_failed():\n         c.foq(b\"crow\" * 8)\n+\n+\n+# to fix in future release\n+@pytest.mark.xfail(raises=CompilerPanic, reason=\"risky overlap\")\n+def test_extract32_order_of_eval(get_contract):\n+    extract32_code = \"\"\"\n+var:DynArray[Bytes[96], 1]\n+\n+@internal\n+def bar() -> uint256:\n+    self.var[0] = b'hellohellohellohellohellohellohello'\n+    self.var.pop()\n+    return 3\n+\n+@external\n+def foo() -> bytes32:\n+    self.var = [b'abcdefghijklmnopqrstuvwxyz123456789']\n+    return extract32(self.var[0], self.bar(), output_type=bytes32)\n+    \"\"\"\n+\n+    c = get_contract(extract32_code)\n+    assert c.foo() == b\"defghijklmnopqrstuvwxyz123456789\"\n+\n+\n+# to fix in future release\n+@pytest.mark.xfail(raises=CompilerPanic, reason=\"risky overlap\")\n+def test_extract32_order_of_eval_extcall(get_contract):\n+    slice_code = \"\"\"\n+var:DynArray[Bytes[96], 1]\n+\n+interface Bar:\n+    def bar() -> uint256: payable\n+\n+@external\n+def bar() -> uint256:\n+    self.var[0] = b'hellohellohellohellohellohellohello'\n+    self.var.pop()\n+    return 3\n+\n+@external\n+def foo() -> bytes32:\n+    self.var = [b'abcdefghijklmnopqrstuvwxyz123456789']\n+    return extract32(self.var[0], extcall Bar(self).bar(), output_type=bytes32)\n+    \"\"\"\n+\n+    c = get_contract(slice_code)\n+    assert c.foo() == b\"defghijklmnopqrstuvwxyz123456789\""
        },
        {
          "filename": "tests/functional/builtins/codegen/test_slice.py",
          "status": "modified",
          "additions": 51,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n from vyper.compiler import compile_code\n from vyper.compiler.settings import OptimizationLevel, Settings\n from vyper.evm.opcodes import version_check\n-from vyper.exceptions import ArgumentException, TypeMismatch\n+from vyper.exceptions import ArgumentException, CompilerPanic, TypeMismatch\n \n _fun_bytes32_bounds = [(0, 32), (3, 29), (27, 5), (0, 5), (5, 3), (30, 2)]\n \n@@ -562,3 +562,53 @@ def foo(cs: String[64]) -> uint256:\n     c = get_contract(code)\n     # ensure that counter was incremented only once\n     assert c.foo(arg) == 1\n+\n+\n+# to fix in future release\n+@pytest.mark.xfail(raises=CompilerPanic, reason=\"risky overlap\")\n+def test_slice_order_of_eval(get_contract):\n+    slice_code = \"\"\"\n+var:DynArray[Bytes[96], 1]\n+\n+interface Bar:\n+    def bar() -> uint256: payable\n+\n+@external\n+def bar() -> uint256:\n+    self.var[0] = b'hellohellohellohellohellohellohello'\n+    self.var.pop()\n+    return 32\n+\n+@external\n+def foo() -> Bytes[96]:\n+    self.var = [b'abcdefghijklmnopqrstuvwxyz123456789']\n+    return slice(self.var[0], 3, extcall Bar(self).bar())\n+    \"\"\"\n+\n+    c = get_contract(slice_code)\n+    assert c.foo() == b\"defghijklmnopqrstuvwxyz123456789\"\n+\n+\n+# to fix in future release\n+@pytest.mark.xfail(raises=CompilerPanic, reason=\"risky overlap\")\n+def test_slice_order_of_eval2(get_contract):\n+    slice_code = \"\"\"\n+var:DynArray[Bytes[96], 1]\n+\n+interface Bar:\n+    def bar() -> uint256: payable\n+\n+@external\n+def bar() -> uint256:\n+    self.var[0] = b'hellohellohellohellohellohellohello'\n+    self.var.pop()\n+    return 3\n+\n+@external\n+def foo() -> Bytes[96]:\n+    self.var = [b'abcdefghijklmnopqrstuvwxyz123456789']\n+    return slice(self.var[0], extcall Bar(self).bar(), 32)\n+    \"\"\"\n+\n+    c = get_contract(slice_code)\n+    assert c.foo() == b\"defghijklmnopqrstuvwxyz123456789\""
        },
        {
          "filename": "vyper/builtins/functions.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@\n     get_type_for_exact_size,\n     ir_tuple_from_args,\n     make_setter,\n+    potential_overlap,\n     promote_signed_int,\n     sar,\n     shl,\n@@ -357,6 +358,9 @@ def build_IR(self, expr, args, kwargs, context):\n             assert is_bytes32, src\n             src = ensure_in_memory(src, context)\n \n+        if potential_overlap(src, start) or potential_overlap(src, length):\n+            raise CompilerPanic(\"risky overlap\")\n+\n         with src.cache_when_complex(\"src\") as (b1, src), start.cache_when_complex(\"start\") as (\n             b2,\n             start,\n@@ -862,6 +866,9 @@ def build_IR(self, expr, args, kwargs, context):\n         bytez, index = args\n         ret_type = kwargs[\"output_type\"]\n \n+        if potential_overlap(bytez, index):\n+            raise CompilerPanic(\"risky overlap\")\n+\n         def finalize(ret):\n             annotation = \"extract32\"\n             ret = IRnode.from_list(ret, typ=ret_type, annotation=annotation)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c208b954564e8fffdd4c86cc3c497e0c3df1aeec",
            "date": "2025-01-14T17:09:31Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "db8dcc713168b16977b5b07267653c9024f6acea",
            "date": "2025-01-12T17:01:49Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "10e91d5a2ba6eaab2f7194fd86cefb7a0ff19964",
            "date": "2025-01-12T16:34:14Z",
            "author_login": "tserg"
          },
          {
            "sha": "43259f8953672ef7a19167c6c048d020d82e05da",
            "date": "2025-01-12T16:32:46Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "9b5523e6131335c81714e7e8af63cc49404f5ce7",
            "date": "2025-01-12T16:19:30Z",
            "author_login": "charles-cooper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-125",
    "description": "Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. When using the built-in `extract32(b, start)`, if the `start` index provided has for side effect to update `b`, the byte array to extract `32` bytes from, it could be that some dirty memory is read and returned by `extract32`. This vulnerability is fixed in 0.4.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-02-26T20:19:05.627",
    "last_modified": "2024-11-21T08:59:25.840",
    "fix_date": "2024-06-18T19:49:36Z"
  },
  "references": [
    {
      "url": "https://github.com/vyperlang/vyper/commit/3d9c537142fb99b2672f21e2057f5f202cde194f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-4hwq-4cpm-8vmx",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-4hwq-4cpm-8vmx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.163574",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vyper",
    "owner": "vyperlang",
    "created_at": "2016-11-11T08:56:41Z",
    "updated_at": "2025-01-13T17:32:27Z",
    "pushed_at": "2025-01-12T17:01:50Z",
    "size": 11939,
    "stars": 4948,
    "forks": 817,
    "open_issues": 489,
    "watchers": 4948,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 2662211,
      "Makefile": 2222,
      "Batchfile": 1614,
      "Dockerfile": 1145,
      "Shell": 472
    },
    "commit_activity": {
      "total_commits_last_year": 317,
      "avg_commits_per_week": 6.096153846153846,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:48:09.728520"
  }
}