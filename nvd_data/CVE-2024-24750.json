{
  "cve_id": "CVE-2024-24750",
  "github_data": {
    "repository": "nodejs/undici",
    "fix_commit": "87a48113f1f68f60aa09abb07276d7c35467c663",
    "related_commits": [
      "87a48113f1f68f60aa09abb07276d7c35467c663",
      "87a48113f1f68f60aa09abb07276d7c35467c663"
    ],
    "patch_url": "https://github.com/nodejs/undici/commit/87a48113f1f68f60aa09abb07276d7c35467c663.patch",
    "fix_commit_details": {
      "sha": "87a48113f1f68f60aa09abb07276d7c35467c663",
      "commit_date": "2024-02-05T08:35:45Z",
      "author": {
        "login": "mcollina",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9f24-jqhm-jfcw",
        "length": 266,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 62,
        "additions": 59,
        "deletions": 3
      },
      "files": [
        {
          "filename": "lib/fetch/index.js",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -1099,10 +1099,10 @@ function fetchFinale (fetchParams, response) {\n \n     const byteStream = new ReadableStream({\n       readableStream: transformStream.readable,\n-      async start (controller) {\n+      async pull (controller) {\n         const reader = this.readableStream.getReader()\n \n-        while (true) {\n+        while (controller.desiredSize >= 0) {\n           const { done, value } = await reader.read()\n \n           if (done) {\n@@ -1113,6 +1113,7 @@ function fetchFinale (fetchParams, response) {\n           controller.enqueue(value)\n         }\n       },\n+      queuingStrategy: new ByteLengthQueuingStrategy({ highWaterMark: 16384 }),\n       type: 'bytes'\n     })\n \n@@ -1927,6 +1928,7 @@ async function httpNetworkFetch (\n   //     cancelAlgorithm set to cancelAlgorithm.\n   const stream = new ReadableStream(\n     {\n+      highWaterMark: 16384,\n       async start (controller) {\n         fetchParams.controller.controller = controller\n       },\n@@ -1936,7 +1938,8 @@ async function httpNetworkFetch (\n       async cancel (reason) {\n         await cancelAlgorithm(reason)\n       },\n-      type: 'bytes'\n+      type: 'bytes',\n+      queuingStrategy: new ByteLengthQueuingStrategy({ highWaterMark: 16384 })\n     }\n   )\n "
        },
        {
          "filename": "test/fetch/pull-dont-push.js",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+'use strict'\n+\n+const { test } = require('node:test')\n+const assert = require('node:assert')\n+const { fetch } = require('../..')\n+const { createServer } = require('http')\n+const { once } = require('events')\n+const { Readable, pipeline } = require('stream')\n+const { setTimeout: sleep } = require('timers/promises')\n+\n+const { closeServerAsPromise } = require('../utils/node-http')\n+\n+test('Allow the usage of custom implementation of AbortController', async (t) => {\n+  let count = 0\n+  let socket\n+  const server = createServer((req, res) => {\n+    res.statusCode = 200\n+    socket = res.socket\n+\n+    // infinite stream\n+    const stream = new Readable({\n+      read () {\n+        this.push('a')\n+        if (count++ > 1000000) {\n+          this.push(null)\n+        }\n+      }\n+    })\n+\n+    pipeline(stream, res, () => {})\n+  })\n+\n+  t.after(closeServerAsPromise(server))\n+\n+  server.listen(0)\n+  await once(server, 'listening')\n+\n+  t.diagnostic('server listening on port %d', server.address().port)\n+  const res = await fetch(`http://localhost:${server.address().port}`)\n+  t.diagnostic('fetched')\n+\n+  // Some time is needed to fill the buffer\n+  await sleep(1000)\n+\n+  assert.strictEqual(socket.bytesWritten < 1024 * 1024, true) // 1 MB\n+  socket.destroy()\n+\n+  // consume the  stream\n+  try {\n+    /* eslint-disable-next-line no-empty, no-unused-vars */\n+    for await (const chunk of res.body) {}\n+  } catch {}\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e3928edfc3c121e170ee6068f36e4c878ee09b14",
            "date": "2025-01-14T08:03:33Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c4ee20f8d0f565f91621ad20088b44e39372fcd0",
            "date": "2025-01-14T07:55:21Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "fd01347b6e2dc2163033dc8db33a61c0d6157d80",
            "date": "2025-01-14T07:40:50Z",
            "author_login": "luddd3"
          },
          {
            "sha": "45eaed232577e9b66d2f0a596eb018c79e098541",
            "date": "2025-01-10T08:47:52Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "251da10da915b70bf576777ca0734bba8eb38f96",
            "date": "2025-01-09T15:02:48Z",
            "author_login": "github-actions[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Undici is an HTTP/1.1 client, written from scratch for Node.js. In affected versions calling `fetch(url)` and not consuming the incoming body ((or consuming it very slowing) will lead to a memory leak. This issue has been addressed in version 6.6.1. Users are advised to upgrade. Users unable to upgrade should make sure to always consume the incoming body.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-16T22:15:07.947",
    "last_modified": "2024-12-17T17:40:47.303",
    "fix_date": "2024-02-05T08:35:45Z"
  },
  "references": [
    {
      "url": "https://github.com/nodejs/undici/commit/87a48113f1f68f60aa09abb07276d7c35467c663",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nodejs/undici/security/advisories/GHSA-9f24-jqhm-jfcw",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240419-0006/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nodejs/undici/commit/87a48113f1f68f60aa09abb07276d7c35467c663",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nodejs/undici/security/advisories/GHSA-9f24-jqhm-jfcw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240419-0006/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.130218",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "undici",
    "owner": "nodejs",
    "created_at": "2018-05-11T22:07:48Z",
    "updated_at": "2025-01-14T10:47:28Z",
    "pushed_at": "2025-01-14T08:03:41Z",
    "size": 11610,
    "stars": 6484,
    "forks": 572,
    "open_issues": 235,
    "watchers": 6484,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 2463022,
      "TypeScript": 82943,
      "Shell": 170
    },
    "commit_activity": {
      "total_commits_last_year": 793,
      "avg_commits_per_week": 15.25,
      "days_active_last_year": 256
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:08:47.167142"
  }
}