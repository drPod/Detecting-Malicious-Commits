{
  "cve_id": "CVE-2024-24751",
  "github_data": {
    "repository": "derhansen/sf_event_mgt",
    "fix_commit": "a08c2cd48695c07e462d15eeb70434ddc0206e4c",
    "related_commits": [
      "a08c2cd48695c07e462d15eeb70434ddc0206e4c",
      "a08c2cd48695c07e462d15eeb70434ddc0206e4c"
    ],
    "patch_url": "https://github.com/derhansen/sf_event_mgt/commit/a08c2cd48695c07e462d15eeb70434ddc0206e4c.patch",
    "fix_commit_details": {
      "sha": "a08c2cd48695c07e462d15eeb70434ddc0206e4c",
      "commit_date": "2024-02-13T07:58:41Z",
      "author": {
        "login": "derhansen",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge branch 'task/security-fix-admin-module'",
        "length": 45,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 16,
        "deletions": 11
      },
      "files": [
        {
          "filename": "Classes/Controller/AdministrationController.php",
          "status": "modified",
          "additions": 14,
          "deletions": 8,
          "patch": "@@ -311,8 +311,7 @@ public function exportAction(int $eventUid): void\n     {\n         /** @var Event $event */\n         $event = $this->eventRepository->findByUidIncludeHidden($eventUid);\n-        if ($event !== null) {\n-            $this->checkEventAccess($event);\n+        if ($event !== null && $this->checkEventAccess($event)) {\n             $this->exportService->downloadRegistrationsCsv($eventUid, $this->settings['csvExport'] ?? []);\n         }\n         exit();\n@@ -339,7 +338,10 @@ public function handleExpiredRegistrationsAction(): ResponseInterface\n      */\n     public function indexNotifyAction(Event $event): ResponseInterface\n     {\n-        $this->checkEventAccess($event);\n+        if (!$this->checkEventAccess($event)) {\n+            return $this->redirect('list');\n+        }\n+\n         $customNotification = GeneralUtility::makeInstance(CustomNotification::class);\n         $customNotifications = $this->settingsService->getCustomNotifications($this->settings);\n         $logEntries = $this->customNotificationLogRepository->findByEvent($event);\n@@ -392,7 +394,10 @@ public function getNotificationRecipients(): array\n      */\n     public function notifyAction(Event $event, CustomNotification $customNotification): ResponseInterface\n     {\n-        $this->checkEventAccess($event);\n+        if (!$this->checkEventAccess($event)) {\n+            return $this->redirect('list');\n+        }\n+\n         $customNotifications = $this->settingsService->getCustomNotifications($this->settings);\n         $result = $this->notificationService->sendCustomNotification($event, $customNotification, $this->settings);\n         $this->notificationService->createCustomNotificationLogentry(\n@@ -410,19 +415,20 @@ public function notifyAction(Event $event, CustomNotification $customNotificatio\n \n     /**\n      * Checks if the current backend user has access to the PID of the event and if not, enqueue an\n-     * access denied flash message and redirect to list view\n+     * access denied flash message\n      */\n-    public function checkEventAccess(Event $event): void\n+    public function checkEventAccess(Event $event): bool\n     {\n         if ($this->getBackendUser()->isInWebMount($event->getPid()) === null) {\n             $this->addFlashMessage(\n                 $this->getLanguageService()->sL(self::LANG_FILE . 'administration.accessdenied.content'),\n                 $this->getLanguageService()->sL(self::LANG_FILE . 'administration.accessdenied.title'),\n                 ContextualFeedbackSeverity::ERROR\n             );\n-\n-            $this->redirect('list');\n+            return false;\n         }\n+\n+        return true;\n     }\n \n     /**"
        },
        {
          "filename": "Tests/Unit/Controller/AdministrationControllerTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -371,15 +371,14 @@ public function notifyActionSendsNotificationsLogsAndRedirects(): void\n     /**\n      * @test\n      */\n-    public function checkEventAccessRedirectsToListViewIfNoEventAccess(): void\n+    public function checkEventAccessReturnsFalseIfNoEventAccess(): void\n     {\n         $event = new Event();\n \n         $mockBackendUser = $this->getMockBuilder(BackendUserAuthentication::class)->getMock();\n         $mockBackendUser->expects(self::once())->method('isInWebMount')->willReturn(null);\n         $GLOBALS['BE_USER'] = $mockBackendUser;\n \n-        $this->subject->expects(self::once())->method('redirect');\n-        $this->subject->checkEventAccess($event);\n+        self::assertFalse($this->subject->checkEventAccess($event));\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ec64e7f69dffebdaf966eb7e75777468772771fd",
            "date": "2024-12-28T13:14:15Z",
            "author_login": "derhansen"
          },
          {
            "sha": "19eae20cb4bdf9361906262dffe187fb6bbe95c3",
            "date": "2024-12-28T13:12:38Z",
            "author_login": "derhansen"
          },
          {
            "sha": "ea83eae59aef9b8facf5c60698cc0c60b09600be",
            "date": "2024-12-28T12:22:44Z",
            "author_login": "derhansen"
          },
          {
            "sha": "34427f1fab470fd31530c555facdd1198b8642f8",
            "date": "2024-12-28T11:12:07Z",
            "author_login": "derhansen"
          },
          {
            "sha": "5ccece129f4eef814c4c61f69d4289acd5ac6d8e",
            "date": "2024-12-14T09:21:16Z",
            "author_login": "derhansen"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-284",
    "description": "sf_event_mgt is an event management and registration extension for the TYPO3 CMS based on ExtBase and Fluid. In affected versions the existing access control check for events in the backend module got broken during the update of the extension to TYPO3 12.4, because the `RedirectResponse` from the `$this->redirect()` function was never handled. This issue has been addressed in version 7.4.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-13T19:15:10.950",
    "last_modified": "2024-11-21T08:59:37.407",
    "fix_date": "2024-02-13T07:58:41Z"
  },
  "references": [
    {
      "url": "https://github.com/derhansen/sf_event_mgt/commit/a08c2cd48695c07e462d15eeb70434ddc0206e4c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/derhansen/sf_event_mgt/security/advisories/GHSA-4576-pgh2-g34j",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/derhansen/sf_event_mgt/commit/a08c2cd48695c07e462d15eeb70434ddc0206e4c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/derhansen/sf_event_mgt/security/advisories/GHSA-4576-pgh2-g34j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.119314",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sf_event_mgt",
    "owner": "derhansen",
    "created_at": "2014-05-17T11:13:55Z",
    "updated_at": "2025-01-02T23:07:00Z",
    "pushed_at": "2025-01-14T12:19:20Z",
    "size": 9341,
    "stars": 60,
    "forks": 54,
    "open_issues": 9,
    "watchers": 60,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "PHP": 1013408,
      "HTML": 108575,
      "CSS": 4132,
      "Shell": 1750,
      "JavaScript": 1230,
      "Makefile": 780
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T20:47:15.328889"
  }
}