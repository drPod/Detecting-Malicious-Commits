{
  "cve_id": "CVE-2024-24756",
  "github_data": {
    "repository": "crafatar/crafatar",
    "fix_commit": "bba004acc725b362a5d2d5dfe30cf60e7365a373",
    "related_commits": [
      "bba004acc725b362a5d2d5dfe30cf60e7365a373",
      "bba004acc725b362a5d2d5dfe30cf60e7365a373"
    ],
    "patch_url": "https://github.com/crafatar/crafatar/commit/bba004acc725b362a5d2d5dfe30cf60e7365a373.patch",
    "fix_commit_details": {
      "sha": "bba004acc725b362a5d2d5dfe30cf60e7365a373",
      "commit_date": "2024-02-01T21:24:29Z",
      "author": {
        "login": "jomo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "improve URL parsing",
        "length": 230,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 137,
        "additions": 78,
        "deletions": 59
      },
      "files": [
        {
          "filename": "lib/routes/avatars.js",
          "status": "modified",
          "additions": 7,
          "deletions": 9,
          "patch": "@@ -14,12 +14,10 @@ function handle_default(img_status, userId, size, def, req, err, callback) {\n   if (defname !== \"steve\" && defname !== \"mhf_steve\" && defname !== \"alex\" && defname !== \"mhf_alex\") {\n     if (helpers.id_valid(def)) {\n       // clean up the old URL to match new image\n-      var parsed = req.url;\n-      delete parsed.query.default;\n-      delete parsed.search;\n-      parsed.path_list[1] = def;\n-      parsed.pathname = \"/\" + parsed.path_list.join(\"/\");\n-      var newUrl = url.format(parsed);\n+      req.url.searchParams.delete('default');\n+      req.url.path_list[1] = def;\n+      req.url.pathname = req.url.path_list.join('/');\n+      var newUrl = req.url.toString();\n       callback({\n         status: img_status,\n         redirect: newUrl,\n@@ -53,9 +51,9 @@ function handle_default(img_status, userId, size, def, req, err, callback) {\n // GET avatar request\n module.exports = function(req, callback) {\n   var userId = (req.url.path_list[1] || \"\").split(\".\")[0];\n-  var size = parseInt(req.url.query.size) || config.avatars.default_size;\n-  var def = req.url.query.default;\n-  var overlay = Object.prototype.hasOwnProperty.call(req.url.query, \"overlay\") || Object.prototype.hasOwnProperty.call(req.url.query, \"helm\");\n+  var size = parseInt(req.url.searchParams.get(\"size\")) || config.avatars.default_size;\n+  var def = req.url.searchParams.get(\"default\");\n+  var overlay = req.url.searchParams.has(\"overlay\") || req.url.searchParams.has(\"helm\");\n \n   // check for extra paths\n   if (req.url.path_list.length > 2) {"
        },
        {
          "filename": "lib/routes/capes.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@ var cache = require(\"../cache\");\n // GET cape request\n module.exports = function(req, callback) {\n   var userId = (req.url.path_list[1] || \"\").split(\".\")[0];\n-  var def = req.url.query.default;\n+  var def = req.url.searchParams.get('default');\n   var rid = req.id;\n \n   // check for extra paths"
        },
        {
          "filename": "lib/routes/renders.js",
          "status": "modified",
          "additions": 7,
          "deletions": 9,
          "patch": "@@ -17,12 +17,10 @@ function handle_default(rid, scale, overlay, body, img_status, userId, size, def\n   if (defname !== \"steve\" && defname !== \"mhf_steve\" && defname !== \"alex\" && defname !== \"mhf_alex\") {\n     if (helpers.id_valid(def)) {\n       // clean up the old URL to match new image\n-      var parsed = req.url;\n-      delete parsed.query.default;\n-      delete parsed.search;\n-      parsed.path_list[2] = def;\n-      parsed.pathname = \"/\" + parsed.path_list.join(\"/\");\n-      var newUrl = url.format(parsed);\n+      req.url.searchParams.delete('default');\n+      req.url.path_list[2] = def;\n+      req.url.pathname = req.url.path_list.join('/');\n+      var newUrl = req.url.toString();\n       callback({\n         status: img_status,\n         redirect: newUrl,\n@@ -62,9 +60,9 @@ module.exports = function(req, callback) {\n   var rid = req.id;\n   var body = raw_type === \"body\";\n   var userId = (req.url.path_list[2] || \"\").split(\".\")[0];\n-  var def = req.url.query.default;\n-  var scale = parseInt(req.url.query.scale) || config.renders.default_scale;\n-  var overlay = Object.prototype.hasOwnProperty.call(req.url.query, \"overlay\") || Object.prototype.hasOwnProperty.call(req.url.query, \"helm\");\n+  var def = req.url.searchParams.get(\"default\");\n+  var scale = parseInt(req.url.searchParams.get(\"scale\")) || config.renders.default_scale;\n+  var overlay = req.url.searchParams.has(\"overlay\") || req.url.searchParams.has(\"helm\");\n \n   // check for extra paths\n   if (req.url.path_list.length > 3) {"
        },
        {
          "filename": "lib/routes/skins.js",
          "status": "modified",
          "additions": 5,
          "deletions": 7,
          "patch": "@@ -14,12 +14,10 @@ function handle_default(img_status, userId, def, req, err, callback) {\n   if (defname !== \"steve\" && defname !== \"mhf_steve\" && defname !== \"alex\" && defname !== \"mhf_alex\") {\n     if (helpers.id_valid(def)) {\n       // clean up the old URL to match new image\n-      var parsed = req.url;\n-      delete parsed.query.default;\n-      delete parsed.search;\n-      parsed.path_list[1] = def;\n-      parsed.pathname = \"/\" + parsed.path_list.join(\"/\");\n-      var newUrl = url.format(parsed);\n+      req.url.searchParams.delete('default');\n+      req.url.path_list[1] = def;\n+      req.url.pathname = req.url.path_list.join('/');\n+      var newUrl = req.url.toString();\n       callback({\n         status: img_status,\n         redirect: newUrl,\n@@ -62,7 +60,7 @@ function handle_default(img_status, userId, def, req, err, callback) {\n // GET skin request\n module.exports = function(req, callback) {\n   var userId = (req.url.path_list[1] || \"\").split(\".\")[0];\n-  var def = req.url.query.default;\n+  var def = req.url.searchParams.get(\"default\");\n   var rid = req.id;\n \n   // check for extra paths"
        },
        {
          "filename": "lib/server.js",
          "status": "modified",
          "additions": 28,
          "deletions": 27,
          "patch": "@@ -22,51 +22,52 @@ var routes = {\n \n // serves assets from lib/public\n function asset_request(req, callback) {\n-  var filename = path.join(__dirname, \"public\", req.url.path_list.join(\"/\"));\n-  fs.access(filename, function(fs_err) {\n-    if (!fs_err) {\n-      fs.readFile(filename, function(err, data) {\n+  const filename = path.join(__dirname, \"public\", ...req.url.path_list);\n+  const relative = path.relative(path.join(__dirname, \"public\"), filename);\n+  if (relative && !relative.startsWith('..') && !path.isAbsolute(relative)) {\n+    fs.access(filename, function(fs_err) {\n+      if (!fs_err) {\n+        fs.readFile(filename, function(err, data) {\n+          callback({\n+            body: data,\n+            type: mime.getType(filename),\n+            err: err,\n+          });\n+        });\n+      } else {\n         callback({\n-          body: data,\n-          type: mime.getType(filename),\n-          err: err,\n+          body: \"Not found\",\n+          status: -2,\n+          code: 404,\n         });\n-      });\n-    } else {\n-      callback({\n-        body: \"Not found\",\n-        status: -2,\n-        code: 404,\n-      });\n-    }\n-  });\n+      }\n+    });\n+  } else {\n+    callback({\n+      body: \"Forbidden\",\n+      status: -2,\n+      code: 403,\n+    });\n+  }\n }\n \n // generates a 12 character random string\n function request_id() {\n   return Math.random().toString(36).substring(2, 14);\n }\n \n-// splits a URL path into an Array\n-// the path is resolved and decoded\n+// splits decoded URL path into an Array\n function path_list(pathname) {\n-  // remove double and trailing slashes\n-  pathname = pathname.replace(/\\/\\/+/g, \"/\").replace(/(.)\\/$/, \"$1\");\n   var list = pathname.split(\"/\");\n   list.shift();\n-  for (var i = 0; i < list.length; i++) {\n-    // URL decode\n-    list[i] = querystring.unescape(list[i]);\n-  }\n   return list;\n }\n \n // handles the +req+ by routing to the request to the appropriate module\n function requestHandler(req, res) {\n-  req.url = url.parse(req.url, true);\n-  req.url.query = req.url.query || {};\n+  req.url = new URL(decodeURI(req.url), 'http://' + req.headers.host);\n+  req.url.pathname = path.resolve('/', req.url.pathname);\n   req.url.path_list = path_list(req.url.pathname);\n-\n   req.id = request_id();\n   req.start = Date.now();\n "
        },
        {
          "filename": "test/test.js",
          "status": "modified",
          "additions": 30,
          "deletions": 6,
          "patch": "@@ -315,7 +315,7 @@ describe(\"Crafatar\", function() {\n       \"avatar with non-existent uuid defaulting to uuid\": {\n         url: \"http://localhost:3000/avatars/00000000000000000000000000000000?size=16&default=853c80ef3c3749fdaa49938b674adae6\",\n         crc32: [0],\n-        redirect: \"/avatars/853c80ef3c3749fdaa49938b674adae6?size=16\",\n+        redirect: \"http://localhost:3000/avatars/853c80ef3c3749fdaa49938b674adae6?size=16\",\n       },\n       \"avatar with non-existent uuid defaulting to url\": {\n         url: \"http://localhost:3000/avatars/00000000000000000000000000000000?size=16&default=http%3A%2F%2Fexample.com%2FCaseSensitive\",\n@@ -337,7 +337,7 @@ describe(\"Crafatar\", function() {\n       \"overlay avatar with non-existent uuid defaulting to uuid\": {\n         url: \"http://localhost:3000/avatars/00000000000000000000000000000000?size=16&default=853c80ef3c3749fdaa49938b674adae6\",\n         crc32: [0],\n-        redirect: \"/avatars/853c80ef3c3749fdaa49938b674adae6?size=16\",\n+        redirect: \"http://localhost:3000/avatars/853c80ef3c3749fdaa49938b674adae6?size=16\",\n       },\n       \"overlay avatar with non-existent uuid defaulting to url\": {\n         url: \"http://localhost:3000/avatars/00000000000000000000000000000000?size=16&overlay&default=http%3A%2F%2Fexample.com%2FCaseSensitive\",\n@@ -372,7 +372,7 @@ describe(\"Crafatar\", function() {\n       \"skin with non-existent uuid defaulting to uuid\": {\n         url: \"http://localhost:3000/skins/00000000000000000000000000000000?size=16&default=853c80ef3c3749fdaa49938b674adae6\",\n         crc32: [0],\n-        redirect: \"/skins/853c80ef3c3749fdaa49938b674adae6?size=16\",\n+        redirect: \"http://localhost:3000/skins/853c80ef3c3749fdaa49938b674adae6?size=16\",\n       },\n       \"skin with non-existent uuid defaulting to url\": {\n         url: \"http://localhost:3000/skins/00000000000000000000000000000000?default=http%3A%2F%2Fexample.com%2FCaseSensitive\",\n@@ -394,7 +394,7 @@ describe(\"Crafatar\", function() {\n       \"head render with non-existent uuid defaulting to uuid\": {\n         url: \"http://localhost:3000/renders/head/00000000000000000000000000000000?scale=2&default=853c80ef3c3749fdaa49938b674adae6\",\n         crc32: [0],\n-        redirect: \"/renders/head/853c80ef3c3749fdaa49938b674adae6?scale=2\",\n+        redirect: \"http://localhost:3000/renders/head/853c80ef3c3749fdaa49938b674adae6?scale=2\",\n       },\n       \"head render with non-existent uuid defaulting to url\": {\n         url: \"http://localhost:3000/renders/head/00000000000000000000000000000000?scale=2&default=http%3A%2F%2Fexample.com%2FCaseSensitive\",\n@@ -416,7 +416,7 @@ describe(\"Crafatar\", function() {\n       \"overlay head with non-existent uuid defaulting to uuid\": {\n         url: \"http://localhost:3000/renders/head/00000000000000000000000000000000?scale=2&overlay&default=853c80ef3c3749fdaa49938b674adae6\",\n         crc32: [0],\n-        redirect: \"/renders/head/853c80ef3c3749fdaa49938b674adae6?scale=2&overlay=\",\n+        redirect: \"http://localhost:3000/renders/head/853c80ef3c3749fdaa49938b674adae6?scale=2&overlay=\",\n       },\n       \"overlay head render with non-existent uuid defaulting to url\": {\n         url: \"http://localhost:3000/renders/head/00000000000000000000000000000000?scale=2&overlay&default=http%3A%2F%2Fexample.com%2FCaseSensitive\",\n@@ -438,7 +438,7 @@ describe(\"Crafatar\", function() {\n       \"body render with non-existent uuid defaulting to uuid\": {\n         url: \"http://localhost:3000/renders/body/00000000000000000000000000000000?scale=2&default=853c80ef3c3749fdaa49938b674adae6\",\n         crc32: [0],\n-        redirect: \"/renders/body/853c80ef3c3749fdaa49938b674adae6?scale=2\",\n+        redirect: \"http://localhost:3000/renders/body/853c80ef3c3749fdaa49938b674adae6?scale=2\",\n       },\n       \"body render with non-existent uuid defaulting to url\": {\n         url: \"http://localhost:3000/renders/body/00000000000000000000000000000000?scale=2&default=http%3A%2F%2Fexample.com%2FCaseSensitive\",\n@@ -568,6 +568,30 @@ describe(\"Crafatar\", function() {\n         });\n       }(loc));\n     }\n+\n+    it(\"should return /public resources\", function(done) {\n+      request.get(\"http://localhost:3000/javascript/crafatar.js\", function(error, res, body) {\n+        assert.ifError(error);\n+        assert.strictEqual(res.statusCode, 200);\n+        done();\n+      });\n+    });\n+\n+    it(\"should not allow path traversal on /public\", function(done) {\n+      request.get(\"http://localhost:3000/../server.js\", function(error, res, body) {\n+        assert.ifError(error);\n+        assert.strictEqual(res.statusCode, 404);\n+        done();\n+      });\n+    });\n+\n+    it(\"should not allow encoded path traversal on /public\", function(done) {\n+      request.get(\"http://localhost:3000/%2E%2E/server.js\", function(error, res, body) {\n+        assert.ifError(error);\n+        assert.strictEqual(res.statusCode, 404);\n+        done();\n+      });\n+    });\n   });\n \n   // we have to make sure that we test both a 32x64 and 64x64 skin"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d6293cc73d4bfd27426ec279e9e471079d26cfe5",
            "date": "2024-02-01T21:29:09Z",
            "author_login": "jomo"
          },
          {
            "sha": "c155c8d098de433813bce4fea418874793af8197",
            "date": "2024-02-01T21:25:43Z",
            "author_login": "jomo"
          },
          {
            "sha": "bba004acc725b362a5d2d5dfe30cf60e7365a373",
            "date": "2024-02-01T21:24:29Z",
            "author_login": "jomo"
          },
          {
            "sha": "9cb32a843fbe1df9121525f3ec0b16b184b27d46",
            "date": "2024-02-01T21:19:02Z",
            "author_login": "jomo"
          },
          {
            "sha": "e44ebda56f1a20d1acc9fc52cc59ae1c3ca1da0e",
            "date": "2024-02-01T21:00:44Z",
            "author_login": "jomo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Crafatar serves Minecraft avatars based on the skin for use in external applications. Files outside of the `lib/public/` directory can be requested from the server. Instances running behind Cloudflare (including crafatar.com) are not affected. Instances using the Docker container as shown in the README are affected, but only files within the container can be read. By default, all of the files within the container can also be found in this repository and are not confidential. This vulnerability is patched in 2.1.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-01T23:15:11.210",
    "last_modified": "2024-11-21T08:59:38.130",
    "fix_date": "2024-02-01T21:24:29Z"
  },
  "references": [
    {
      "url": "https://github.com/crafatar/crafatar/blob/e0233f2899a3206a817d2dd3b80da83d51c7a726/lib/server.js#L64-L67",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/crafatar/crafatar/commit/bba004acc725b362a5d2d5dfe30cf60e7365a373",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crafatar/crafatar/security/advisories/GHSA-5cxq-25mp-q5f2",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/crafatar/crafatar/blob/e0233f2899a3206a817d2dd3b80da83d51c7a726/lib/server.js#L64-L67",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://github.com/crafatar/crafatar/commit/bba004acc725b362a5d2d5dfe30cf60e7365a373",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/crafatar/crafatar/security/advisories/GHSA-5cxq-25mp-q5f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:05.577811",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "crafatar",
    "owner": "crafatar",
    "created_at": "2014-10-18T18:56:55Z",
    "updated_at": "2025-01-11T12:45:03Z",
    "pushed_at": "2024-02-01T21:56:35Z",
    "size": 1176,
    "stars": 344,
    "forks": 68,
    "open_issues": 31,
    "watchers": 344,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 98585,
      "EJS": 16945,
      "CSS": 6566,
      "Shell": 1124,
      "Dockerfile": 916
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:53:32.847946"
  }
}