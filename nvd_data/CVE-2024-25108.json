{
  "cve_id": "CVE-2024-25108",
  "github_data": {
    "repository": "pixelfed/pixelfed",
    "fix_commit": "7e47d6dccb0393a2e95c42813c562c854882b037",
    "related_commits": [
      "7e47d6dccb0393a2e95c42813c562c854882b037",
      "7e47d6dccb0393a2e95c42813c562c854882b037"
    ],
    "patch_url": "https://github.com/pixelfed/pixelfed/commit/7e47d6dccb0393a2e95c42813c562c854882b037.patch",
    "fix_commit_details": {
      "sha": "7e47d6dccb0393a2e95c42813c562c854882b037",
      "commit_date": "2024-02-10T02:44:27Z",
      "author": {
        "login": "dansup",
        "type": "User",
        "stats": {
          "total_commits": 9971,
          "average_weekly_commits": 28.246458923512748,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 321
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-gccq-h3xj-jgvf",
        "length": 108,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 490,
        "additions": 327,
        "deletions": 163
      },
      "files": [
        {
          "filename": "app/Auth/BearerTokenResponse.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -18,8 +18,8 @@ class BearerTokenResponse extends \\League\\OAuth2\\Server\\ResponseTypes\\BearerToke\n     protected function getExtraParams(AccessTokenEntityInterface $accessToken)\n     {\n         return [\n-        \t'created_at' => time(),\n-        \t'scope' => 'read write follow push'\n+            'created_at' => time(),\n+            'scope' => implode(' ', $accessToken->getScopes())\n         ];\n     }\n }"
        },
        {
          "filename": "app/Http/Controllers/Api/AdminApiController.php",
          "status": "modified",
          "additions": 51,
          "deletions": 16,
          "patch": "@@ -40,16 +40,20 @@ class AdminApiController extends Controller\n {\n     public function supported(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n \n         return response()->json(['supported' => true]);\n     }\n \n     public function getStats(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n \n         $res = AdminStatsService::summary();\n         $res['autospam_count'] = AccountInterstitial::whereType('post.autospam')\n@@ -60,8 +64,10 @@ public function getStats(Request $request)\n \n     public function autospam(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n \n         $appeals = AccountInterstitial::whereType('post.autospam')\n             ->whereNull('appeal_handled_at')\n@@ -95,8 +101,10 @@ public function autospam(Request $request)\n \n     public function autospamHandle(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:write'), 404);\n \n         $this->validate($request, [\n             'action' => 'required|in:dismiss,approve,dismiss-all,approve-all,delete-post,delete-account',\n@@ -239,8 +247,10 @@ public function autospamHandle(Request $request)\n \n     public function modReports(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n \n         $reports = Report::whereNull('admin_seen')\n             ->orderBy('created_at','desc')\n@@ -285,8 +295,10 @@ public function modReports(Request $request)\n \n     public function modReportHandle(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:write'), 404);\n \n         $this->validate($request, [\n             'action'    => 'required|string',\n@@ -343,8 +355,11 @@ public function modReportHandle(Request $request)\n \n     public function getConfiguration(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n+\n         abort_unless(config('instance.enable_cc'), 400);\n \n         return collect([\n@@ -386,8 +401,11 @@ public function getConfiguration(Request $request)\n \n     public function updateConfiguration(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:write'), 404);\n+\n         abort_unless(config('instance.enable_cc'), 400);\n \n         $this->validate($request, [\n@@ -448,8 +466,11 @@ public function updateConfiguration(Request $request)\n \n     public function getUsers(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n+\n         $this->validate($request, [\n             'sort' => 'sometimes|in:asc,desc',\n         ]);\n@@ -466,8 +487,10 @@ public function getUsers(Request $request)\n \n     public function getUser(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n \n         $id = $request->input('user_id');\n         $key = 'pf-admin-api:getUser:byId:' . $id;\n@@ -497,8 +520,10 @@ public function getUser(Request $request)\n \n     public function userAdminAction(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:write'), 404);\n \n         $this->validate($request, [\n             'id' => 'required',\n@@ -669,8 +694,10 @@ public function userAdminAction(Request $request)\n \n     public function instances(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:write'), 404);\n \n         $this->validate($request, [\n             'q' => 'sometimes',\n@@ -707,8 +734,10 @@ public function instances(Request $request)\n \n     public function getInstance(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n \n         $id = $request->input('id');\n         $res = Instance::findOrFail($id);\n@@ -718,8 +747,10 @@ public function getInstance(Request $request)\n \n     public function moderateInstance(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:write'), 404);\n \n         $this->validate($request, [\n             'id' => 'required',\n@@ -742,8 +773,10 @@ public function moderateInstance(Request $request)\n \n     public function refreshInstanceStats(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin == 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:write'), 404);\n \n         $this->validate($request, [\n             'id' => 'required',\n@@ -760,8 +793,10 @@ public function refreshInstanceStats(Request $request)\n \n     public function getAllStats(Request $request)\n     {\n-        abort_if(!$request->user(), 404);\n+        abort_if(!$request->user() || !$request->user()->token(), 404);\n+\n         abort_unless($request->user()->is_admin === 1, 404);\n+        abort_unless($request->user()->tokenCan('admin:read'), 404);\n \n         if($request->has('refresh')) {\n             Cache::forget('admin-api:instance-all-stats-v1');"
        },
        {
          "filename": "app/Http/Controllers/Api/ApiV1Controller.php",
          "status": "modified",
          "additions": 188,
          "deletions": 107,
          "patch": "@@ -125,11 +125,15 @@ public function json($res, $code = 200, $headers = [])\n         return response()->json($res, $code, $headers, JSON_UNESCAPED_SLASHES);\n     }\n \n+    /**\n+     * GET /api/v1/apps/verify_credentials\n+     */\n     public function getApp(Request $request)\n     {\n-        if(!$request->user()) {\n-            return response('', 403);\n-        }\n+        # FIXME: /api/v1/apps/verify_credentials should be accessible with any\n+        # valid Access Token, not just a user's access token (i.e., client\n+        # credentails grant flow access tokens)\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n \n         $client = $request->user()->token()->client;\n         $res = [\n@@ -141,6 +145,9 @@ public function getApp(Request $request)\n         return $this->json($res);\n     }\n \n+    /**\n+     * POST /api/v1/apps\n+     */\n     public function apps(Request $request)\n     {\n         abort_if(!config_cache('pixelfed.oauth_enabled'), 404);\n@@ -187,9 +194,11 @@ public function apps(Request $request)\n      */\n     public function verifyCredentials(Request $request)\n     {\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $user = $request->user();\n \n-        abort_if(!$user, 403);\n         abort_if($user->status != null, 403);\n         AccountService::setLastActive($user->id);\n \n@@ -215,6 +224,9 @@ public function verifyCredentials(Request $request)\n      */\n     public function accountById(Request $request, $id)\n     {\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $res = $request->has(self::PF_API_ENTITY_KEY) ? AccountService::get($id, true) : AccountService::getMastodon($id, true);\n         if(!$res) {\n             return response()->json(['error' => 'Record not found'], 404);\n@@ -233,7 +245,8 @@ public function accountById(Request $request, $id)\n      */\n     public function accountUpdateCredentials(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         if(config('pixelfed.bouncer.cloud_ips.ban_api')) {\n             abort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -476,7 +489,8 @@ public function accountUpdateCredentials(Request $request)\n      */\n     public function accountFollowersById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $account = AccountService::get($id);\n         abort_if(!$account, 404);\n@@ -573,7 +587,8 @@ public function accountFollowersById(Request $request, $id)\n      */\n     public function accountFollowingById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $account = AccountService::get($id);\n         abort_if(!$account, 404);\n@@ -670,6 +685,9 @@ public function accountFollowingById(Request $request, $id)\n      */\n     public function accountStatusesById(Request $request, $id)\n     {\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $user = $request->user();\n \n         $this->validate($request, [\n@@ -774,7 +792,8 @@ public function accountStatusesById(Request $request, $id)\n      */\n     public function accountFollowById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('follow'), 403);\n \n         $user = $request->user();\n         abort_if($user->has_roles && !UserRoleService::can('can-follow', $user->id), 403, 'Invalid permissions for this action');\n@@ -866,7 +885,8 @@ public function accountFollowById(Request $request, $id)\n      */\n     public function accountUnfollowById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('follow'), 403);\n \n         $user = $request->user();\n \n@@ -936,7 +956,8 @@ public function accountUnfollowById(Request $request, $id)\n      */\n     public function accountRelationshipsById(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'id'    => 'required|array|min:1|max:20',\n@@ -965,7 +986,8 @@ public function accountRelationshipsById(Request $request)\n      */\n     public function accountSearch(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'q'         => 'required|string|min:1|max:255',\n@@ -1008,7 +1030,8 @@ public function accountSearch(Request $request)\n      */\n     public function accountBlocks(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit'     => 'nullable|integer|min:1|max:40',\n@@ -1045,7 +1068,8 @@ public function accountBlocks(Request $request)\n      */\n     public function accountBlockById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         $pid = $user->profile_id ?? $user->profile->id;\n@@ -1138,7 +1162,8 @@ public function accountBlockById(Request $request, $id)\n      */\n     public function accountUnblockById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         $pid = $user->profile_id ?? $user->profile->id;\n@@ -1189,7 +1214,9 @@ public function customEmojis()\n      */\n     public function accountDomainBlocks(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         return response()->json([]);\n     }\n \n@@ -1202,7 +1229,9 @@ public function accountDomainBlocks(Request $request)\n      */\n     public function accountEndorsements(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         return response()->json([]);\n     }\n \n@@ -1215,7 +1244,9 @@ public function accountEndorsements(Request $request)\n      */\n     public function accountFavourites(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $this->validate($request, [\n             'limit' => 'sometimes|integer|min:1|max:40'\n         ]);\n@@ -1271,7 +1302,8 @@ public function accountFavourites(Request $request)\n      */\n     public function statusFavouriteById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         abort_if($user->has_roles && !UserRoleService::can('can-like', $user->id), 403, 'Invalid permissions for this action');\n@@ -1338,7 +1370,8 @@ public function statusFavouriteById(Request $request, $id)\n      */\n     public function statusUnfavouriteById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         abort_if($user->has_roles && !UserRoleService::can('can-like', $user->id), 403, 'Invalid permissions for this action');\n@@ -1381,7 +1414,8 @@ public function statusUnfavouriteById(Request $request, $id)\n      */\n     public function accountFilters(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         return response()->json([]);\n     }\n@@ -1395,7 +1429,9 @@ public function accountFilters(Request $request)\n      */\n     public function accountFollowRequests(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $this->validate($request, [\n             'limit' => 'sometimes|integer|min:1|max:100'\n         ]);\n@@ -1425,7 +1461,9 @@ public function accountFollowRequests(Request $request)\n      */\n     public function accountFollowRequestAccept(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('follow'), 403);\n+\n         $pid = $request->user()->profile_id;\n         $target = AccountService::getMastodon($id);\n \n@@ -1482,7 +1520,9 @@ public function accountFollowRequestAccept(Request $request, $id)\n      */\n     public function accountFollowRequestReject(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('follow'), 403);\n+\n         $pid = $request->user()->profile_id;\n         $target = AccountService::getMastodon($id);\n \n@@ -1518,7 +1558,8 @@ public function accountFollowRequestReject(Request $request, $id)\n      */\n     public function accountSuggestions(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         // todo\n \n@@ -1619,7 +1660,8 @@ public function instance(Request $request)\n      */\n     public function accountLists(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         return response()->json([]);\n     }\n@@ -1633,7 +1675,8 @@ public function accountLists(Request $request)\n      */\n     public function accountListsById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         return response()->json([]);\n     }\n@@ -1646,7 +1689,8 @@ public function accountListsById(Request $request, $id)\n      */\n     public function mediaUpload(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $this->validate($request, [\n             'file.*' => [\n@@ -1782,7 +1826,8 @@ public function mediaUpload(Request $request)\n      */\n     public function mediaUpdate(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $this->validate($request, [\n           'description' => 'nullable|string|max:' . config_cache('pixelfed.max_altext_length')\n@@ -1835,7 +1880,8 @@ function() use($media, $request) {\n      */\n     public function mediaGet(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $user = $request->user();\n         abort_if($user->has_roles && !UserRoleService::can('can-post', $user->id), 403, 'Invalid permissions for this action');\n@@ -1858,7 +1904,8 @@ public function mediaGet(Request $request, $id)\n      */\n     public function mediaUploadV2(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $this->validate($request, [\n             'file.*' => [\n@@ -1999,7 +2046,8 @@ public function mediaUploadV2(Request $request)\n      */\n     public function accountMutes(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit' => 'nullable|integer|min:1|max:40'\n@@ -2034,7 +2082,8 @@ public function accountMutes(Request $request)\n      */\n     public function accountMuteById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         $pid = $user->profile_id;\n@@ -2092,7 +2141,8 @@ public function accountMuteById(Request $request, $id)\n      */\n     public function accountUnmuteById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         $pid = $user->profile_id;\n@@ -2128,7 +2178,8 @@ public function accountUnmuteById(Request $request, $id)\n      */\n     public function accountNotifications(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit' => 'nullable|integer|min:1|max:100',\n@@ -2204,7 +2255,10 @@ public function accountNotifications(Request $request)\n      */\n     public function timelineHome(Request $request)\n     {\n-        $this->validate($request,[\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n+        $this->validate($request, [\n             'page'        => 'sometimes|integer|max:40',\n             'min_id'      => 'sometimes|integer|min:0|max:' . PHP_INT_MAX,\n             'max_id'      => 'sometimes|integer|min:0|max:' . PHP_INT_MAX,\n@@ -2606,7 +2660,9 @@ public function timelinePublic(Request $request)\n      */\n     public function conversations(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $this->validate($request, [\n             'limit' => 'min:1|max:40',\n             'scope' => 'nullable|in:inbox,sent,requests'\n@@ -2683,7 +2739,9 @@ public function conversations(Request $request)\n      */\n     public function statusById(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         AccountService::setLastActive($request->user()->id);\n         $pid = $request->user()->profile_id;\n \n@@ -2730,7 +2788,8 @@ public function statusById(Request $request, $id)\n      */\n     public function statusContext(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $user = $request->user();\n         AccountService::setLastActive($user->id);\n@@ -2803,7 +2862,9 @@ public function statusContext(Request $request, $id)\n      */\n     public function statusCard(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $res = [];\n         return response()->json($res);\n     }\n@@ -2817,7 +2878,8 @@ public function statusCard(Request $request, $id)\n      */\n     public function statusRebloggedBy(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit' => 'sometimes|integer|min:1|max:80'\n@@ -2913,7 +2975,8 @@ public function statusRebloggedBy(Request $request, $id)\n      */\n     public function statusFavouritedBy(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit' => 'nullable|integer|min:1|max:80'\n@@ -3010,7 +3073,8 @@ public function statusFavouritedBy(Request $request, $id)\n      */\n     public function statusCreate(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $this->validate($request, [\n             'status' => 'nullable|string',\n@@ -3225,7 +3289,9 @@ public function statusCreate(Request $request)\n      */\n     public function statusDelete(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n+\n         AccountService::setLastActive($request->user()->id);\n         $status = Status::whereProfileId($request->user()->profile->id)\n         ->findOrFail($id);\n@@ -3251,7 +3317,8 @@ public function statusDelete(Request $request, $id)\n      */\n     public function statusShare(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         abort_if($user->has_roles && !UserRoleService::can('can-share', $user->id), 403, 'Invalid permissions for this action');\n@@ -3303,7 +3370,8 @@ public function statusShare(Request $request, $id)\n      */\n     public function statusUnshare(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $user = $request->user();\n         abort_if($user->has_roles && !UserRoleService::can('can-share', $user->id), 403, 'Invalid permissions for this action');\n@@ -3346,7 +3414,8 @@ public function statusUnshare(Request $request, $id)\n      */\n     public function timelineHashtag(Request $request, $hashtag)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request,[\n           'page'        => 'nullable|integer|max:40',\n@@ -3447,7 +3516,8 @@ public function timelineHashtag(Request $request, $hashtag)\n      */\n     public function bookmarks(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit' => 'nullable|integer|min:1|max:40',\n@@ -3514,7 +3584,8 @@ public function bookmarks(Request $request)\n      */\n     public function bookmarkStatus(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $status = Status::findOrFail($id);\n         $pid = $request->user()->profile_id;\n@@ -3554,7 +3625,8 @@ public function bookmarkStatus(Request $request, $id)\n      */\n     public function unbookmarkStatus(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $status = Status::findOrFail($id);\n         $pid = $request->user()->profile_id;\n@@ -3586,7 +3658,8 @@ public function unbookmarkStatus(Request $request, $id)\n      */\n     public function discoverPosts(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit' => 'integer|min:1|max:40'\n@@ -3596,29 +3669,30 @@ public function discoverPosts(Request $request)\n         $pid = $request->user()->profile_id;\n         $filters = UserFilterService::filters($pid);\n         $forYou = DiscoverService::getForYou();\n-        $posts = $forYou->take(50)->map(function($post) {\n+        $posts = $forYou->take(50)->map(function ($post) {\n             return StatusService::getMastodon($post);\n         })\n-        ->filter(function($post) use($filters) {\n-            return $post &&\n-                isset($post['account']) &&\n-                isset($post['account']['id']) &&\n-                !in_array($post['account']['id'], $filters);\n-        })\n-        ->take(12)\n-        ->values();\n+            ->filter(function ($post) use ($filters) {\n+                return $post &&\n+                    isset($post['account']) &&\n+                    isset($post['account']['id']) &&\n+                    !in_array($post['account']['id'], $filters);\n+            })\n+            ->take(12)\n+            ->values();\n         return $this->json(compact('posts'));\n     }\n \n     /**\n-    * GET /api/v2/statuses/{id}/replies\n-    *\n-    *\n-    * @return array\n-    */\n+     * GET /api/v2/statuses/{id}/replies\n+     *\n+     *\n+     * @return array\n+     */\n     public function statusReplies(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'limit' => 'int|min:1|max:10',\n@@ -3707,14 +3781,15 @@ public function statusReplies(Request $request, $id)\n     }\n \n     /**\n-    * GET /api/v2/statuses/{id}/state\n-    *\n-    *\n-    * @return array\n-    */\n+     * GET /api/v2/statuses/{id}/state\n+     *\n+     *\n+     * @return array\n+     */\n     public function statusState(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $status = Status::findOrFail($id);\n         $pid = $request->user()->profile_id;\n@@ -3724,14 +3799,15 @@ public function statusState(Request $request, $id)\n     }\n \n     /**\n-    * GET /api/v1.1/discover/accounts/popular\n-    *\n-    *\n-    * @return array\n-    */\n+     * GET /api/v1.1/discover/accounts/popular\n+     *\n+     *\n+     * @return array\n+     */\n     public function discoverAccountsPopular(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $pid = $request->user()->profile_id;\n \n@@ -3766,14 +3842,15 @@ public function discoverAccountsPopular(Request $request)\n     }\n \n     /**\n-    * GET /api/v1/preferences\n-    *\n-    *\n-    * @return array\n-    */\n+     * GET /api/v1/preferences\n+     *\n+     *\n+     * @return array\n+     */\n     public function getPreferences(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $pid = $request->user()->profile_id;\n         $account = AccountService::get($pid);\n@@ -3788,40 +3865,43 @@ public function getPreferences(Request $request)\n     }\n \n     /**\n-    * GET /api/v1/trends\n-    *\n-    *\n-    * @return array\n-    */\n+     * GET /api/v1/trends\n+     *\n+     *\n+     * @return array\n+     */\n     public function getTrends(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         return $this->json([]);\n     }\n \n     /**\n-    * GET /api/v1/announcements\n-    *\n-    *\n-    * @return array\n-    */\n+     * GET /api/v1/announcements\n+     *\n+     *\n+     * @return array\n+     */\n     public function getAnnouncements(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         return $this->json([]);\n     }\n \n     /**\n-    * GET /api/v1/markers\n-    *\n-    *\n-    * @return array\n-    */\n+     * GET /api/v1/markers\n+     *\n+     *\n+     * @return array\n+     */\n     public function getMarkers(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $type = $request->input('timeline');\n         if(is_array($type)) {\n@@ -3835,14 +3915,15 @@ public function getMarkers(Request $request)\n     }\n \n     /**\n-    * POST /api/v1/markers\n-    *\n-    *\n-    * @return array\n-    */\n+     * POST /api/v1/markers\n+     *\n+     *\n+     * @return array\n+     */\n     public function setMarkers(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $pid = $request->user()->profile_id;\n         $home = $request->input('home[last_read_id]');"
        },
        {
          "filename": "app/Http/Controllers/Api/ApiV1Dot1Controller.php",
          "status": "modified",
          "additions": 43,
          "deletions": 19,
          "patch": "@@ -68,9 +68,10 @@ public function error($msg, $code = 400, $extra = [], $headers = [])\n \n \tpublic function report(Request $request)\n \t{\n-\t\t$user = $request->user();\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('write'), 403);\n \n-\t\tabort_if(!$user, 403);\n+\t\t$user = $request->user();\n \t\tabort_if($user->status != null, 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n@@ -175,9 +176,10 @@ public function report(Request $request)\n \t */\n \tpublic function deleteAvatar(Request $request)\n \t{\n-\t\t$user = $request->user();\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('write'), 403);\n \n-\t\tabort_if(!$user, 403);\n+\t\t$user = $request->user();\n \t\tabort_if($user->status != null, 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n@@ -215,9 +217,10 @@ public function deleteAvatar(Request $request)\n \t */\n \tpublic function accountPosts(Request $request, $id)\n \t{\n-\t\t$user = $request->user();\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n \n-\t\tabort_if(!$user, 403);\n+\t\t$user = $request->user();\n \t\tabort_if($user->status != null, 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n@@ -255,8 +258,10 @@ public function accountPosts(Request $request, $id)\n \t */\n \tpublic function accountChangePassword(Request $request)\n \t{\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('write'), 403);\n+\n \t\t$user = $request->user();\n-\t\tabort_if(!$user, 403);\n \t\tabort_if($user->status != null, 403);\n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -296,8 +301,10 @@ public function accountChangePassword(Request $request)\n \t */\n \tpublic function accountLoginActivity(Request $request)\n \t{\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n+\n \t\t$user = $request->user();\n-\t\tabort_if(!$user, 403);\n \t\tabort_if($user->status != null, 403);\n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -336,8 +343,10 @@ public function accountLoginActivity(Request $request)\n \t */\n \tpublic function accountTwoFactor(Request $request)\n \t{\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n+\n \t\t$user = $request->user();\n-\t\tabort_if(!$user, 403);\n \t\tabort_if($user->status != null, 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n@@ -358,8 +367,10 @@ public function accountTwoFactor(Request $request)\n \t */\n \tpublic function accountEmailsFromPixelfed(Request $request)\n \t{\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n+\n \t\t$user = $request->user();\n-\t\tabort_if(!$user, 403);\n \t\tabort_if($user->status != null, 403);\n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -433,8 +444,10 @@ public function accountEmailsFromPixelfed(Request $request)\n \t */\n \tpublic function accountApps(Request $request)\n \t{\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n+\n \t\t$user = $request->user();\n-\t\tabort_if(!$user, 403);\n \t\tabort_if($user->status != null, 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n@@ -640,7 +653,8 @@ public function inAppRegistrationConfirm(Request $request)\n \n \tpublic function archive(Request $request, $id)\n \t{\n-\t\tabort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('write'), 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -672,7 +686,8 @@ public function archive(Request $request, $id)\n \n \tpublic function unarchive(Request $request, $id)\n \t{\n-\t\tabort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('write'), 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -703,7 +718,8 @@ public function unarchive(Request $request, $id)\n \n \tpublic function archivedPosts(Request $request)\n \t{\n-\t\tabort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -719,7 +735,8 @@ public function archivedPosts(Request $request)\n \n \tpublic function placesById(Request $request, $id, $slug)\n \t{\n-\t\tabort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -757,8 +774,9 @@ public function placesById(Request $request, $id, $slug)\n \n \tpublic function moderatePost(Request $request, $id)\n \t{\n-\t\tabort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n \t\tabort_if($request->user()->is_admin != true, 403);\n+\t\tabort_unless($request->user()->tokenCan('admin:write'), 403);\n \n \t\tif(config('pixelfed.bouncer.cloud_ips.ban_signups')) {\n \t\t\tabort_if(BouncerService::checkIp($request->ip()), 404);\n@@ -864,7 +882,9 @@ public function moderatePost(Request $request, $id)\n \n \tpublic function getWebSettings(Request $request)\n \t{\n-\t\tabort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('read'), 403);\n+\n         $uid = $request->user()->id;\n         $settings = UserSetting::firstOrCreate([\n             'user_id' => $uid\n@@ -877,7 +897,9 @@ public function getWebSettings(Request $request)\n \n     public function setWebSettings(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('write'), 403);\n+\n         $this->validate($request, [\n             'field' => 'required|in:enable_reblogs,hide_reblog_banner',\n             'value' => 'required'\n@@ -901,7 +923,9 @@ public function setWebSettings(Request $request)\n \n     public function getMutualAccounts(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+\t\tabort_if(!$request->user() || !$request->user()->token(), 403);\n+\t\tabort_unless($request->user()->tokenCan('follows'), 403);\n+\n         $account = AccountService::get($id, true);\n         if(!$account || !isset($account['id'])) { return []; }\n         $res = collect(FollowerService::mutualAccounts($request->user()->profile_id, $id))"
        },
        {
          "filename": "app/Http/Controllers/Api/ApiV2Controller.php",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -148,7 +148,8 @@ public function instance(Request $request)\n      */\n     public function search(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $this->validate($request, [\n             'q' => 'required|string|min:1|max:100',\n@@ -199,7 +200,8 @@ public function getWebsocketConfig()\n      */\n     public function mediaUploadV2(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $this->validate($request, [\n             'file.*' => ["
        },
        {
          "filename": "app/Http/Controllers/Api/BaseApiController.php",
          "status": "modified",
          "additions": 18,
          "deletions": 8,
          "patch": "@@ -56,7 +56,8 @@ public function __construct()\n \n     public function notifications(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n \t\t$pid = $request->user()->profile_id;\n \t\t$limit = $request->input('limit', 20);\n@@ -98,7 +99,9 @@ public function notifications(Request $request)\n \n     public function avatarUpdate(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n+\n         $this->validate($request, [\n             'upload'   => 'required|mimetypes:image/jpeg,image/jpg,image/png|max:'.config('pixelfed.max_avatar_size'),\n         ]);\n@@ -134,9 +137,11 @@ public function avatarUpdate(Request $request)\n \n     public function verifyCredentials(Request $request)\n     {\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $user = $request->user();\n-        abort_if(!$user, 403);\n-        if($user->status != null) {\n+        if ($user->status != null) {\n             Auth::logout();\n             abort(403);\n         }\n@@ -146,7 +151,9 @@ public function verifyCredentials(Request $request)\n \n     public function accountLikes(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $this->validate($request, [\n         \t'page' => 'sometimes|int|min:1|max:20',\n         \t'limit' => 'sometimes|int|min:1|max:10'\n@@ -173,7 +180,8 @@ public function accountLikes(Request $request)\n \n     public function archive(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $status = Status::whereNull('in_reply_to_id')\n             ->whereNull('reblog_of_id')\n@@ -201,7 +209,8 @@ public function archive(Request $request, $id)\n \n     public function unarchive(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $status = Status::whereNull('in_reply_to_id')\n             ->whereNull('reblog_of_id')\n@@ -228,7 +237,8 @@ public function unarchive(Request $request, $id)\n \n     public function archivedPosts(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $statuses = Status::whereProfileId($request->user()->profile_id)\n             ->whereScope('archived')"
        },
        {
          "filename": "app/Http/Controllers/Api/V1/DomainBlockController.php",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -23,7 +23,9 @@ public function json($res, $code = 200, $headers = [])\n \n     public function index(Request $request)\n     {\n-        abort_unless($request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $this->validate($request, [\n             'limit' => 'sometimes|integer|min:1|max:200'\n         ]);\n@@ -52,7 +54,8 @@ public function index(Request $request)\n \n     public function store(Request $request)\n     {\n-        abort_unless($request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $this->validate($request, [\n             'domain' => 'required|active_url|min:1|max:120'\n@@ -99,7 +102,8 @@ public function store(Request $request)\n \n     public function delete(Request $request)\n     {\n-        abort_unless($request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('write'), 403);\n \n         $this->validate($request, [\n             'domain' => 'required|min:1|max:120'"
        },
        {
          "filename": "app/Http/Controllers/Api/V1/TagsController.php",
          "status": "modified",
          "additions": 11,
          "deletions": 5,
          "patch": "@@ -32,7 +32,9 @@ public function json($res, $code = 200, $headers = [])\n     */\n     public function relatedTags(Request $request, $tag)\n     {\n-        abort_unless($request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n+\n         $tag = Hashtag::whereSlug($tag)->firstOrFail();\n         return HashtagRelatedService::get($tag->id);\n     }\n@@ -45,7 +47,8 @@ public function relatedTags(Request $request, $tag)\n     */\n     public function followHashtag(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('follow'), 403);\n \n         $pid = $request->user()->profile_id;\n         $account = AccountService::get($pid);\n@@ -87,7 +90,8 @@ public function followHashtag(Request $request, $id)\n     */\n     public function unfollowHashtag(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('follow'), 403);\n \n         $pid = $request->user()->profile_id;\n         $account = AccountService::get($pid);\n@@ -132,7 +136,8 @@ public function unfollowHashtag(Request $request, $id)\n     */\n     public function getHashtag(Request $request, $id)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $pid = $request->user()->profile_id;\n         $account = AccountService::get($pid);\n@@ -172,7 +177,8 @@ public function getHashtag(Request $request, $id)\n     */\n     public function getFollowedTags(Request $request)\n     {\n-        abort_if(!$request->user(), 403);\n+        abort_if(!$request->user() || !$request->user()->token(), 403);\n+        abort_unless($request->user()->tokenCan('read'), 403);\n \n         $account = AccountService::get($request->user()->profile_id);\n "
        },
        {
          "filename": "app/Providers/AuthServiceProvider.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -41,7 +41,9 @@ public function boot()\n                 'read' => 'Full read access to your account',\n                 'write' => 'Full write access to your account',\n                 'follow' => 'Ability to follow other profiles',\n-                'push'  => ''\n+                'admin:read' => 'Read all data on the server',\n+                'admin:write' => 'Modify all data on the server',\n+                'push'  => 'Receive your push notifications'\n             ]);\n         }\n "
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ac4edcd67e28e2fc9ee6051e472662a5fc1cc2a5",
            "date": "2025-01-14T01:17:19Z",
            "author_login": "dansup"
          },
          {
            "sha": "f3220fd21efc4bfc585d220f78431c63538b6ab1",
            "date": "2025-01-14T01:16:11Z",
            "author_login": "dansup"
          },
          {
            "sha": "be9533a7424b300f8741414df8cf30932578a3dd",
            "date": "2025-01-14T01:13:12Z",
            "author_login": "dansup"
          },
          {
            "sha": "64bad4ee4d6880bc54571d56bc23b4962d37d592",
            "date": "2025-01-12T21:29:13Z",
            "author_login": "intentionally-left-nil"
          },
          {
            "sha": "4d0cb32f79b52c47ff19d4f3b08b67c5edca4201",
            "date": "2025-01-12T19:29:05Z",
            "author_login": "intentionally-left-nil"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:L/A:L",
    "cwe_id": "CWE-280",
    "description": "Pixelfed is an open source photo sharing platform. When processing requests authorization was improperly and insufficiently checked, allowing attackers to access far more functionality than users intended, including to the administrative and moderator functionality of the Pixelfed server. This vulnerability affects every version of Pixelfed between v0.10.4 and v0.11.9, inclusive. A proof of concept of this vulnerability exists. This vulnerability affects every local user of a Pixelfed server, and can potentially affect the servers' ability to federate. Some user interaction is required to setup the conditions to be able to exercise the vulnerability, but the attacker could conduct this attack time-delayed manner, where user interaction is not actively required. This vulnerability has been addressed in version 0.11.11. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-12T20:15:08.590",
    "last_modified": "2024-11-21T09:00:16.267",
    "fix_date": "2024-02-10T02:44:27Z"
  },
  "references": [
    {
      "url": "https://github.com/pixelfed/pixelfed/commit/7e47d6dccb0393a2e95c42813c562c854882b037",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pixelfed/pixelfed/security/advisories/GHSA-gccq-h3xj-jgvf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pixelfed/pixelfed/commit/7e47d6dccb0393a2e95c42813c562c854882b037",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pixelfed/pixelfed/security/advisories/GHSA-gccq-h3xj-jgvf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.114299",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pixelfed",
    "owner": "pixelfed",
    "created_at": "2018-04-17T01:48:45Z",
    "updated_at": "2025-01-14T13:12:22Z",
    "pushed_at": "2025-01-14T01:17:20Z",
    "size": 65448,
    "stars": 5780,
    "forks": 687,
    "open_issues": 401,
    "watchers": 5780,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "dev",
      "staging"
    ],
    "languages": {
      "PHP": 3653141,
      "Vue": 2191126,
      "Blade": 905298,
      "Shell": 85039,
      "Dockerfile": 12225,
      "HTML": 11466,
      "Procfile": 43
    },
    "commit_activity": {
      "total_commits_last_year": 998,
      "avg_commits_per_week": 19.192307692307693,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:59:17.567220"
  }
}