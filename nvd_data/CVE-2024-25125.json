{
  "cve_id": "CVE-2024-25125",
  "github_data": {
    "repository": "treasure-data/digdag",
    "fix_commit": "eae89b0daf6c62f12309d8c7194454dfb18cc5c3",
    "related_commits": [
      "eae89b0daf6c62f12309d8c7194454dfb18cc5c3",
      "eae89b0daf6c62f12309d8c7194454dfb18cc5c3"
    ],
    "patch_url": "https://github.com/treasure-data/digdag/commit/eae89b0daf6c62f12309d8c7194454dfb18cc5c3.patch",
    "fix_commit_details": {
      "sha": "eae89b0daf6c62f12309d8c7194454dfb18cc5c3",
      "commit_date": "2024-02-13T14:25:40Z",
      "author": {
        "login": "aamine",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-5mp4-32rr-v3x5",
        "length": 99,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 43,
        "additions": 41,
        "deletions": 2
      },
      "files": [
        {
          "filename": "digdag-core/src/main/java/io/digdag/core/log/LocalFileLogServerFactory.java",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -1,5 +1,6 @@\n package io.digdag.core.log;\n \n+import java.nio.file.NoSuchFileException;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -122,11 +123,15 @@ protected void listFiles(String dateDir, String attemptDir, boolean enableDirect\n         protected byte[] getFile(String dateDir, String attemptDir, String fileName)\n             throws StorageFileNotFoundException\n         {\n-            Path path = getPrefixDir(dateDir, attemptDir).resolve(fileName);\n+            Path prefixDir = getPrefixDir(dateDir, attemptDir);\n+            Path path = prefixDir.resolve(fileName).normalize();\n+            if (!path.startsWith(prefixDir)) {\n+                throw new IllegalArgumentException(\"Invalid file name: \" + fileName);\n+            }\n             try (InputStream in = Files.newInputStream(path)) {\n                 return ByteStreams.toByteArray(in);\n             }\n-            catch (FileNotFoundException ex) {\n+            catch (FileNotFoundException | NoSuchFileException ex) {\n                 throw new StorageFileNotFoundException(ex);\n             }\n             catch (IOException ex) {"
        },
        {
          "filename": "digdag-core/src/test/java/io/digdag/core/log/LocalFileLogServerFactoryTest.java",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -6,6 +6,7 @@\n import io.digdag.core.agent.AgentId;\n import io.digdag.core.config.PropertyUtils;\n import io.digdag.spi.LogFilePrefix;\n+import io.digdag.spi.StorageFileNotFoundException;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -23,6 +24,7 @@\n import java.util.Properties;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertThrows;\n \n import io.digdag.core.log.LocalFileLogServerFactory.LocalFileLogServer.LocalFileDirectTaskLogger;\n \n@@ -142,4 +144,30 @@ private String repeatedString(String v, int num)\n         }\n         return b.toString();\n     }\n+\n+    @Test\n+    public void testGetFile() throws StorageFileNotFoundException\n+    {\n+        setUpTaskLogger(Optional.absent());\n+        String fileName = localServer.putFile(prefix, \"+task\", Instant.now(), \"agent\", \"foo\".getBytes(UTF_8));\n+        byte[] data = localServer.getFile(prefix, fileName);\n+        assertThat(new String(data, UTF_8), is(\"foo\"));\n+    }\n+\n+    @Test\n+    public void testGetFileNotFound()\n+    {\n+        setUpTaskLogger(Optional.absent());\n+        assertThrows(StorageFileNotFoundException.class, () -> localServer.getFile(prefix, \"foo\"));\n+    }\n+\n+    @Test\n+    public void testGetFileInvalidFileName()\n+    {\n+        setUpTaskLogger(Optional.absent());\n+        assertThrows(IllegalArgumentException.class, () -> localServer.getFile(prefix, \"..\"));\n+        assertThrows(IllegalArgumentException.class, () -> localServer.getFile(prefix, \"../foo\"));\n+        assertThrows(IllegalArgumentException.class, () -> localServer.getFile(prefix, \"/foo\"));\n+        assertThrows(IllegalArgumentException.class, () -> localServer.getFile(prefix, \"foo/../../bar\"));\n+    }\n }"
        },
        {
          "filename": "digdag-tests/src/test/java/acceptance/LogIT.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -10,12 +10,15 @@\n import utils.CommandStatus;\n import utils.TemporaryDigdagServer;\n \n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.regex.Pattern;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThrows;\n import static org.junit.Assert.assertTrue;\n import static utils.TestUtils.*;\n \n@@ -91,5 +94,8 @@ public void verifyLogWithAttemptIdAndSessionId()\n \n         final String regex = \"\\\\[\\\\d+:\\\\w+:\\\\d+:\\\\d+]\";\n         assertTrue(Pattern.compile(regex, Pattern.DOTALL).matcher(logs).find());\n+\n+        assertThrows(NotFoundException.class, () -> client.getLogFile(attemptId, \"foo\"));\n+        assertThrows(BadRequestException.class, () -> client.getLogFile(attemptId, \"/foo\"));\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e32347010bf87f9cb6344c35c0d86a517bb7fc99",
            "date": "2024-08-27T02:42:56Z",
            "author_login": "aamine"
          },
          {
            "sha": "44da46a964514a1cce9d794715c1b00316f6121f",
            "date": "2024-08-26T14:31:37Z",
            "author_login": "toru-takahashi"
          },
          {
            "sha": "eae89b0daf6c62f12309d8c7194454dfb18cc5c3",
            "date": "2024-02-13T14:25:40Z",
            "author_login": "aamine"
          },
          {
            "sha": "5326502e63b7e09fb8316b569d79c5c2a6bcdeb2",
            "date": "2024-01-19T09:04:14Z",
            "author_login": "kaorimatz"
          },
          {
            "sha": "323fa192e06be980d353e9f2102fb4ad027046a5",
            "date": "2023-11-13T06:09:36Z",
            "author_login": "exoego"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Digdag is an open source tool that to build, run, schedule, and monitor complex pipelines of tasks across various platforms. Treasure Data's digdag workload automation system is susceptible to a path traversal vulnerability if it's configured to store log files locally. This issue may lead to information disclosure and has been addressed in release version 0.10.5.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-14T03:15:15.153",
    "last_modified": "2024-11-21T09:00:18.497",
    "fix_date": "2024-02-13T14:25:40Z"
  },
  "references": [
    {
      "url": "https://github.com/treasure-data/digdag/commit/eae89b0daf6c62f12309d8c7194454dfb18cc5c3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/treasure-data/digdag/security/advisories/GHSA-5mp4-32rr-v3x5",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/treasure-data/digdag/commit/eae89b0daf6c62f12309d8c7194454dfb18cc5c3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/treasure-data/digdag/security/advisories/GHSA-5mp4-32rr-v3x5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.120947",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "digdag",
    "owner": "treasure-data",
    "created_at": "2015-09-18T23:18:08Z",
    "updated_at": "2025-01-12T14:58:08Z",
    "pushed_at": "2024-08-27T02:42:56Z",
    "size": 84997,
    "stars": 1314,
    "forks": 224,
    "open_issues": 120,
    "watchers": 1314,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 4121614,
      "TypeScript": 106719,
      "JavaScript": 43351,
      "Python": 16577,
      "Shell": 11157,
      "Ruby": 8631,
      "HTML": 2429,
      "CSS": 1834,
      "Less": 1044,
      "Batchfile": 1015,
      "Makefile": 980,
      "Scala": 515,
      "Dockerfile": 195
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:56:30.609834"
  }
}