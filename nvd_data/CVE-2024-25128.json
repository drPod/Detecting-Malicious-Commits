{
  "cve_id": "CVE-2024-25128",
  "github_data": {
    "repository": "dpgaspar/Flask-AppBuilder",
    "fix_commit": "6336456d83f8f111c842b2b53d1e89627f2502c8",
    "related_commits": [
      "6336456d83f8f111c842b2b53d1e89627f2502c8",
      "6336456d83f8f111c842b2b53d1e89627f2502c8"
    ],
    "patch_url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/6336456d83f8f111c842b2b53d1e89627f2502c8.patch",
    "fix_commit_details": {
      "sha": "6336456d83f8f111c842b2b53d1e89627f2502c8",
      "commit_date": "2024-02-06T20:51:56Z",
      "author": {
        "login": "dpgaspar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: openID provider validation flow (#2186)",
        "length": 109,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 108,
        "additions": 100,
        "deletions": 8
      },
      "files": [
        {
          "filename": "flask_appbuilder/security/manager.py",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -1447,6 +1447,14 @@ def _has_view_access(\n         # If it's not a builtin role check against database store roles\n         return self.exist_permission_on_roles(view_name, permission_name, db_role_ids)\n \n+    def get_oid_identity_url(self, provider_name: str) -> Optional[str]:\n+        \"\"\"\n+        Returns the OIDC identity provider URL\n+        \"\"\"\n+        for provider in self.openid_providers:\n+            if provider.get(\"name\") == provider_name:\n+                return provider.get(\"url\")\n+\n     def get_user_roles(self, user) -> List[object]:\n         \"\"\"\n         Get current user roles, if user is not authenticated returns the public role"
        },
        {
          "filename": "flask_appbuilder/security/views.py",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -565,8 +565,12 @@ def login_handler(self):\n             form = LoginForm_oid()\n             if form.validate_on_submit():\n                 session[\"remember_me\"] = form.remember_me.data\n+                identity_url = self.appbuilder.sm.get_oid_identity_url(form.openid.data)\n+                if identity_url is None:\n+                    flash(as_unicode(self.invalid_login_message), \"warning\")\n+                    return redirect(self.appbuilder.get_url_for_login)\n                 return self.appbuilder.sm.oid.try_login(\n-                    form.openid.data,\n+                    identity_url,\n                     ask_for=self.oid_ask_for,\n                     ask_for_optional=self.oid_ask_for_optional,\n                 )"
        },
        {
          "filename": "flask_appbuilder/templates/appbuilder/general/security/login_oid.html",
          "status": "modified",
          "additions": 2,
          "deletions": 6,
          "patch": "@@ -36,13 +36,9 @@\n                                 <label class=\"hidden control-label\" id=\"label-username\"\n                                        for=\"username\">{{ _(\"Enter your OpenID Username\") }}:</label>\n                                 {{ form.username(size = 80, class = \"hidden form-control\", autofocus = true) }}\n-                            </div>\n-                        </div>\n-                        <div class=\"control-group\">\n-                            <div class=\"controls\">\n                                 <label class=\"checkbox\" for=\"remember_me\">\n-                                    {{ form.remember_me }} Remember Me\n                                 </label>\n+                                {{ form.remember_me }} Remember Me\n                             </div>\n                         </div>\n                         <input\n@@ -133,7 +129,7 @@\n         {% for pr in providers %}\n             document.getElementById(\"btn-oid-provider-{{ pr.name }}\")\n                 .addEventListener(\"click\", function () {\n-                    set_openid(\"{{ pr.url | safe }}\", \"{{ pr.name }}\");\n+                    set_openid(\"{{ pr.name | safe }}\", \"{{ pr.name }}\");\n                 });\n         {% endfor %}\n         document.getElementById(\"btn-oid-before-submit\")"
        },
        {
          "filename": "tests/config_oid.py",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+import os\n+\n+from flask_appbuilder.security.manager import AUTH_OID\n+\n+basedir = os.path.abspath(os.path.dirname(__file__))\n+\n+SQLALCHEMY_DATABASE_URI = os.environ.get(\n+    \"SQLALCHEMY_DATABASE_URI\"\n+) or \"sqlite:///\" + os.path.join(basedir, \"app.db\")\n+\n+SECRET_KEY = \"thisismyscretkey\"\n+\n+AUTH_TYPE = AUTH_OID\n+\n+OPENID_PROVIDERS = [\n+    {\"name\": \"Google\", \"url\": \"https://www.google.com/accounts/o8/id\"},\n+    {\"name\": \"Yahoo\", \"url\": \"https://me.yahoo.com\"},\n+    {\"name\": \"AOL\", \"url\": \"http://openid.aol.com/<username>\"},\n+    {\"name\": \"Flickr\", \"url\": \"http://www.flickr.com/<username>\"},\n+    {\"name\": \"OpenStack\", \"url\": \"https://openstackid.org/\"},\n+]\n+\n+WTF_CSRF_ENABLED = False\n+\n+# Will allow user self registration\n+AUTH_USER_REGISTRATION = True\n+\n+# The default user self registration role for all users\n+AUTH_USER_REGISTRATION_ROLE = \"Admin\""
        },
        {
          "filename": "tests/test_mvc_oauth.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -26,7 +26,7 @@ def get(self, item):\n             return UserInfoReponseMock()\n \n \n-class APICSRFTestCase(FABTestCase):\n+class MVCOAuthTestCase(FABTestCase):\n     def setUp(self):\n         from flask import Flask\n         from flask_wtf import CSRFProtect"
        },
        {
          "filename": "tests/test_mvc_oid.py",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+from unittest.mock import MagicMock\n+\n+from flask_appbuilder import SQLA\n+from tests.base import FABTestCase\n+\n+\n+class MVCOIDTestCase(FABTestCase):\n+    def setUp(self):\n+        from flask import Flask\n+        from flask_appbuilder import AppBuilder\n+\n+        self.app = Flask(__name__)\n+        self.app.config.from_object(\"tests.config_oid\")\n+        self.db = SQLA(self.app)\n+        self.appbuilder = AppBuilder(self.app, self.db.session)\n+\n+    def test_oid_login_get(self):\n+        \"\"\"\n+        OID: Test login get\n+        \"\"\"\n+        self.appbuilder.sm.oid.try_login = MagicMock(return_value=\"Login ok\")\n+\n+        with self.app.test_client() as client:\n+            response = client.get(\"/login/\")\n+        self.assertEqual(response.status_code, 200)\n+        for provider in self.app.config[\"OPENID_PROVIDERS\"]:\n+            self.assertIn(provider[\"name\"], response.data.decode(\"utf-8\"))\n+\n+    def test_oid_login_post(self):\n+        \"\"\"\n+        OID: Test login post with a valid provider\n+        \"\"\"\n+        self.appbuilder.sm.oid.try_login = MagicMock(return_value=\"Login ok\")\n+\n+        with self.app.test_client() as client:\n+            response = client.post(\"/login/\", data=dict(openid=\"OpenStack\"))\n+            self.assertEqual(response.status_code, 200)\n+            self.assertEqual(response.data, b\"Login ok\")\n+        self.appbuilder.sm.oid.try_login.assert_called_with(\n+            \"https://openstackid.org/\", ask_for=[\"email\"], ask_for_optional=[]\n+        )\n+\n+    def test_oid_login_post_invalid_provider(self):\n+        \"\"\"\n+        OID: Test login post with an invalid provider\n+        \"\"\"\n+        self.appbuilder.sm.oid.try_login = MagicMock(return_value=\"Not Ok\")\n+\n+        with self.app.test_client() as client:\n+            response = client.post(\"/login/\", data=dict(openid=\"DoesNotExist\"))\n+            self.assertEqual(response.status_code, 302)\n+            self.assertEqual(response.location, \"/login/\")\n+        self.appbuilder.sm.oid.try_login.assert_not_called()"
        },
        {
          "filename": "tests/test_security_api.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -444,6 +444,8 @@ def setUp(self):\n             if hasattr(b, \"datamodel\") and b.datamodel.session is not None:\n                 b.datamodel.session = self.db.session\n \n+        self.create_default_users(self.appbuilder)\n+\n     def tearDown(self):\n         self.appbuilder.session.close()\n         engine = self.appbuilder.session.get_bind(mapper=None, clause=None)"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "418ab8a93907669be4ccbb99d7aefa5283f3e013",
            "date": "2024-12-17T16:33:17Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "fab9013003a41c4e80da04f072201a8c7cc99187",
            "date": "2024-10-23T12:29:25Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "4ca96e9722a692e8640acd18e605fad9702521a9",
            "date": "2024-10-23T10:13:32Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "a374c14ceaa6c9c4fb4b87dd8b082a7f5e94ad00",
            "date": "2024-10-23T09:14:18Z",
            "author_login": "CodeWithEmad"
          },
          {
            "sha": "1d27eb42a4f9b6e19fb3c025327b4110b175eccb",
            "date": "2024-09-02T17:10:23Z",
            "author_login": "dpgaspar"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-287",
    "description": "Flask-AppBuilder is an application development framework, built on top of Flask. When Flask-AppBuilder is set to AUTH_TYPE AUTH_OID, it allows an attacker to forge an HTTP request, that could deceive the backend into using any requested OpenID service. This vulnerability could grant an attacker unauthorised privilege access if a custom OpenID service is deployed by the attacker and accessible by the backend. This vulnerability is only exploitable when the application is using the OpenID 2.0 authorization protocol. Upgrade to Flask-AppBuilder 4.3.11 to fix the vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-29T01:44:14.777",
    "last_modified": "2024-11-21T09:00:18.777",
    "fix_date": "2024-02-06T20:51:56Z"
  },
  "references": [
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/6336456d83f8f111c842b2b53d1e89627f2502c8",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-j2pw-vp55-fqqj",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/6336456d83f8f111c842b2b53d1e89627f2502c8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-j2pw-vp55-fqqj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.443117",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Flask-AppBuilder",
    "owner": "dpgaspar",
    "created_at": "2013-11-09T21:13:29Z",
    "updated_at": "2025-01-14T13:18:32Z",
    "pushed_at": "2024-12-17T16:33:17Z",
    "size": 44116,
    "stars": 4739,
    "forks": 1377,
    "open_issues": 221,
    "watchers": 4739,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1112522,
      "HTML": 91928,
      "JavaScript": 14409,
      "CSS": 11547,
      "Shell": 3075
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:14:27.090468"
  }
}