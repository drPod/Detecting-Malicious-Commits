{
  "cve_id": "CVE-2024-25617",
  "github_data": {
    "repository": "squid-cache/squid",
    "fix_commit": "72a3bbd5e431597c3fdb56d752bc56b010ba3817",
    "related_commits": [
      "72a3bbd5e431597c3fdb56d752bc56b010ba3817",
      "72a3bbd5e431597c3fdb56d752bc56b010ba3817"
    ],
    "patch_url": "https://github.com/squid-cache/squid/commit/72a3bbd5e431597c3fdb56d752bc56b010ba3817.patch",
    "fix_commit_details": {
      "sha": "72a3bbd5e431597c3fdb56d752bc56b010ba3817",
      "commit_date": "2023-10-25T11:47:19Z",
      "author": {
        "login": "rousskov",
        "type": "User",
        "stats": {
          "total_commits": 1582,
          "average_weekly_commits": 1.7956867196367763,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 434
        }
      },
      "commit_message": {
        "title": "Improve handling of expanding HTTP header values (#1536)",
        "length": 1044,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 54,
        "additions": 41,
        "deletions": 13
      },
      "files": [
        {
          "filename": "src/SquidString.h",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -140,7 +140,16 @@ class String\n \n     size_type len_ = 0;  /* current length  */\n \n-    static const size_type SizeMax_ = 65535; ///< 64K limit protects some fixed-size buffers\n+    /// An earlier 64KB limit was meant to protect some fixed-size buffers, but\n+    /// (a) we do not know where those buffers are (or whether they still exist)\n+    /// (b) too many String users unknowingly exceeded that limit and asserted.\n+    /// We are now using a larger limit to reduce the number of (b) cases,\n+    /// especially cases where \"compact\" lists of items grow 50% in size when we\n+    /// convert them to canonical form. The new limit is selected to withstand\n+    /// concatenation and ~50% expansion of two HTTP headers limited by default\n+    /// request_header_max_size and reply_header_max_size settings.\n+    static const size_type SizeMax_ = 3*64*1024 - 1;\n+\n     /// returns true after increasing the first argument by extra if the sum does not exceed SizeMax_\n     static bool SafeAdd(size_type &base, size_type extra) { if (extra <= SizeMax_ && base <= SizeMax_ - extra) { base += extra; return true; } return false; }\n "
        },
        {
          "filename": "src/cache_cf.cc",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -1007,6 +1007,18 @@ configDoConfigure(void)\n                (uint32_t)Config.maxRequestBufferSize, (uint32_t)Config.maxRequestHeaderSize);\n     }\n \n+    // Warn about the dangers of exceeding String limits when manipulating HTTP\n+    // headers. Technically, we do not concatenate _requests_, so we could relax\n+    // their check, but we keep the two checks the same for simplicity sake.\n+    const auto safeRawHeaderValueSizeMax = (String::SizeMaxXXX()+1)/3;\n+    // TODO: static_assert(safeRawHeaderValueSizeMax >= 64*1024); // no WARNINGs for default settings\n+    if (Config.maxRequestHeaderSize > safeRawHeaderValueSizeMax)\n+        debugs(3, DBG_CRITICAL, \"WARNING: Increasing request_header_max_size beyond \" << safeRawHeaderValueSizeMax <<\n+               \" bytes makes Squid more vulnerable to denial-of-service attacks; configured value: \" << Config.maxRequestHeaderSize << \" bytes\");\n+    if (Config.maxReplyHeaderSize > safeRawHeaderValueSizeMax)\n+        debugs(3, DBG_CRITICAL, \"WARNING: Increasing reply_header_max_size beyond \" << safeRawHeaderValueSizeMax <<\n+               \" bytes makes Squid more vulnerable to denial-of-service attacks; configured value: \" << Config.maxReplyHeaderSize << \" bytes\");\n+\n     /*\n      * Disable client side request pipelining if client_persistent_connections OFF.\n      * Waste of resources queueing any pipelined requests when the first will close the connection."
        },
        {
          "filename": "src/cf.data.pre",
          "status": "modified",
          "additions": 16,
          "deletions": 10,
          "patch": "@@ -6753,11 +6753,14 @@ TYPE: b_size_t\n DEFAULT: 64 KB\n LOC: Config.maxRequestHeaderSize\n DOC_START\n-\tThis specifies the maximum size for HTTP headers in a request.\n-\tRequest headers are usually relatively small (about 512 bytes).\n-\tPlacing a limit on the request header size will catch certain\n-\tbugs (for example with persistent connections) and possibly\n-\tbuffer-overflow or denial-of-service attacks.\n+\tThis directives limits the header size of a received HTTP request\n+\t(including request-line). Increasing this limit beyond its 64 KB default\n+\texposes certain old Squid code to various denial-of-service attacks. This\n+\tlimit also applies to received FTP commands.\n+\n+\tThis limit has no direct affect on Squid memory consumption.\n+\n+\tSquid does not check this limit when sending requests.\n DOC_END\n \n NAME: reply_header_max_size\n@@ -6766,11 +6769,14 @@ TYPE: b_size_t\n DEFAULT: 64 KB\n LOC: Config.maxReplyHeaderSize\n DOC_START\n-\tThis specifies the maximum size for HTTP headers in a reply.\n-\tReply headers are usually relatively small (about 512 bytes).\n-\tPlacing a limit on the reply header size will catch certain\n-\tbugs (for example with persistent connections) and possibly\n-\tbuffer-overflow or denial-of-service attacks.\n+\tThis directives limits the header size of a received HTTP response\n+\t(including status-line). Increasing this limit beyond its 64 KB default\n+\texposes certain old Squid code to various denial-of-service attacks. This\n+\tlimit also applies to FTP command responses.\n+\n+\tSquid also checks this limit when loading hit responses from disk cache.\n+\n+\tSquid does not check this limit when sending responses.\n DOC_END\n \n NAME: request_body_max_size"
        },
        {
          "filename": "src/http.cc",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1900,8 +1900,9 @@ HttpStateData::httpBuildRequestHeader(HttpRequest * request,\n \n         String strFwd = hdr_in->getList(Http::HdrType::X_FORWARDED_FOR);\n \n-        // if we cannot double strFwd size, then it grew past 50% of the limit\n-        if (!strFwd.canGrowBy(strFwd.size())) {\n+        // Detect unreasonably long header values. And paranoidly check String\n+        // limits: a String ought to accommodate two reasonable-length values.\n+        if (strFwd.size() > 32*1024 || !strFwd.canGrowBy(strFwd.size())) {\n             // There is probably a forwarding loop with Via detection disabled.\n             // If we do nothing, String will assert on overflow soon.\n             // TODO: Terminate all transactions with huge XFF?"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a14169990e66a0622165ea3f16712b58621e48f3",
            "date": "2025-01-13T19:53:36Z",
            "author_login": "eduard-bagdasaryan"
          },
          {
            "sha": "5fa48bb562bb1d6c9d7e19f94063dce373d9595c",
            "date": "2025-01-09T14:58:13Z",
            "author_login": "kinkie"
          },
          {
            "sha": "fb51e4612855774e0d97f374c0f0c485eb40ef38",
            "date": "2025-01-07T23:20:48Z",
            "author_login": "kinkie"
          },
          {
            "sha": "b56774dd09224b6aa8513e24cdb7634be297a88e",
            "date": "2024-12-31T23:18:39Z",
            "author_login": "kinkie"
          },
          {
            "sha": "32218e04a5b647ebccaf36703b0087e438e62c3c",
            "date": "2024-12-31T21:59:05Z",
            "author_login": "rousskov"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-182",
    "description": "Squid is an open source caching proxy for the Web supporting HTTP, HTTPS, FTP, and more. Due to a Collapse of Data into Unsafe Value bug ,Squid may be vulnerable to a Denial of Service attack against HTTP header parsing. This problem allows a remote client or a remote server to perform Denial of Service when sending oversized headers in HTTP messages. In versions of Squid prior to 6.5 this can be achieved if the request_header_max_size or reply_header_max_size settings are unchanged from the default. In Squid version 6.5 and later, the default setting of these parameters is safe. Squid will emit a critical warning in cache.log if the administrator is setting these parameters to unsafe values. Squid will not at this time prevent these settings from being changed to unsafe values. Users are advised to upgrade to version 6.5. There are no known workarounds for this vulnerability. This issue is also tracked as SQUID-2024:2 ",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-14T21:15:08.197",
    "last_modified": "2025-01-09T13:51:19.633",
    "fix_date": "2023-10-25T11:47:19Z"
  },
  "references": [
    {
      "url": "https://github.com/squid-cache/squid/commit/72a3bbd5e431597c3fdb56d752bc56b010ba3817",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/squid-cache/squid/security/advisories/GHSA-h5x6-w8mv-xfpr",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240322-0006/",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/squid-cache/squid/commit/72a3bbd5e431597c3fdb56d752bc56b010ba3817",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/squid-cache/squid/security/advisories/GHSA-h5x6-w8mv-xfpr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240322-0006/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.126107",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "squid",
    "owner": "squid-cache",
    "created_at": "2014-09-27T00:59:40Z",
    "updated_at": "2025-01-14T10:13:37Z",
    "pushed_at": "2025-01-13T21:33:47Z",
    "size": 177668,
    "stars": 2292,
    "forks": 530,
    "open_issues": 125,
    "watchers": 2292,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "SQUID_NT_3_0",
      "cbdatahistory",
      "master",
      "mswin",
      "v3.0",
      "v3.1",
      "v3.2",
      "v3.3",
      "v3.4",
      "v3.5",
      "v4",
      "v5",
      "v6"
    ],
    "languages": {
      "C++": 7975562,
      "C": 710305,
      "M4": 224515,
      "Makefile": 142513,
      "Perl": 119339,
      "Shell": 98209,
      "Roff": 70681,
      "Awk": 7112,
      "HTML": 2381,
      "CSS": 1791,
      "sed": 311
    },
    "commit_activity": {
      "total_commits_last_year": 231,
      "avg_commits_per_week": 4.4423076923076925,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:03:21.725351"
  }
}