{
  "cve_id": "CVE-2024-25618",
  "github_data": {
    "repository": "mastodon/mastodon",
    "fix_commit": "b31af34c9716338e4a32a62cc812d1ca59e88d15",
    "related_commits": [
      "b31af34c9716338e4a32a62cc812d1ca59e88d15",
      "b31af34c9716338e4a32a62cc812d1ca59e88d15"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "b31af34c9716338e4a32a62cc812d1ca59e88d15",
      "commit_date": "2024-02-14T14:16:07Z",
      "author": {
        "login": "ClearlyClaire",
        "type": "User",
        "stats": {
          "total_commits": 2275,
          "average_weekly_commits": 4.861111111111111,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 356
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-vm39-j3vx-pch3",
        "length": 274,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 64,
        "additions": 44,
        "deletions": 20
      },
      "files": [
        {
          "filename": "app/controllers/auth/omniauth_callbacks_controller.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@ class Auth::OmniauthCallbacksController < Devise::OmniauthCallbacksController\n   def self.provides_callback_for(provider)\n     define_method provider do\n       @provider = provider\n-      @user = User.find_for_oauth(request.env['omniauth.auth'], current_user)\n+      @user = User.find_for_omniauth(request.env['omniauth.auth'], current_user)\n \n       if @user.persisted?\n         record_login_activity"
        },
        {
          "filename": "app/models/concerns/user/omniauthable.rb",
          "status": "modified",
          "additions": 38,
          "deletions": 14,
          "patch": "@@ -19,17 +19,18 @@ def email_present?\n   end\n \n   class_methods do\n-    def find_for_oauth(auth, signed_in_resource = nil)\n+    def find_for_omniauth(auth, signed_in_resource = nil)\n       # EOLE-SSO Patch\n       auth.uid = (auth.uid[0][:uid] || auth.uid[0][:user]) if auth.uid.is_a? Hashie::Array\n-      identity = Identity.find_for_oauth(auth)\n+      identity = Identity.find_for_omniauth(auth)\n \n       # If a signed_in_resource is provided it always overrides the existing user\n       # to prevent the identity being locked with accidentally created accounts.\n       # Note that this may leave zombie accounts (with no associated identity) which\n       # can be cleaned up at a later date.\n       user   = signed_in_resource || identity.user\n-      user ||= create_for_oauth(auth)\n+      user ||= reattach_for_auth(auth)\n+      user ||= create_for_auth(auth)\n \n       if identity.user.nil?\n         identity.user = user\n@@ -39,19 +40,35 @@ def find_for_oauth(auth, signed_in_resource = nil)\n       user\n     end\n \n-    def create_for_oauth(auth)\n-      # Check if the user exists with provided email. If no email was provided,\n-      # we assign a temporary email and ask the user to verify it on\n-      # the next step via Auth::SetupController.show\n+    private\n \n-      strategy          = Devise.omniauth_configs[auth.provider.to_sym].strategy\n-      assume_verified   = strategy&.security&.assume_email_is_verified\n-      email_is_verified = auth.info.verified || auth.info.verified_email || auth.info.email_verified || assume_verified\n-      email             = auth.info.verified_email || auth.info.email\n+    def reattach_for_auth(auth)\n+      # If allowed, check if a user exists with the provided email address,\n+      # and return it if they does not have an associated identity with the\n+      # current authentication provider.\n+\n+      # This can be used to provide a choice of alternative auth providers\n+      # or provide smooth gradual transition between multiple auth providers,\n+      # but this is discouraged because any insecure provider will put *all*\n+      # local users at risk, regardless of which provider they registered with.\n+\n+      return unless ENV['ALLOW_UNSAFE_AUTH_PROVIDER_REATTACH'] == 'true'\n \n-      user = User.find_by(email: email) if email_is_verified\n+      email, email_is_verified = email_from_auth(auth)\n+      return unless email_is_verified\n \n-      return user unless user.nil?\n+      user = User.find_by(email: email)\n+      return if user.nil? || Identity.exists?(provider: auth.provider, user_id: user.id)\n+\n+      user\n+    end\n+\n+    def create_for_auth(auth)\n+      # Create a user for the given auth params. If no email was provided,\n+      # we assign a temporary email and ask the user to verify it on\n+      # the next step via Auth::SetupController.show\n+\n+      email, email_is_verified = email_from_auth(auth)\n \n       user = User.new(user_params_from_auth(email, auth))\n \n@@ -66,7 +83,14 @@ def create_for_oauth(auth)\n       user\n     end\n \n-    private\n+    def email_from_auth(auth)\n+      strategy          = Devise.omniauth_configs[auth.provider.to_sym].strategy\n+      assume_verified   = strategy&.security&.assume_email_is_verified\n+      email_is_verified = auth.info.verified || auth.info.verified_email || auth.info.email_verified || assume_verified\n+      email             = auth.info.verified_email || auth.info.email\n+\n+      [email, email_is_verified]\n+    end\n \n     def user_params_from_auth(email, auth)\n       {"
        },
        {
          "filename": "app/models/identity.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -17,7 +17,7 @@ class Identity < ApplicationRecord\n   validates :uid, presence: true, uniqueness: { scope: :provider }\n   validates :provider, presence: true\n \n-  def self.find_for_oauth(auth)\n+  def self.find_for_omniauth(auth)\n     find_or_create_by(uid: auth.uid, provider: auth.provider)\n   end\n end"
        },
        {
          "filename": "spec/models/identity_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -3,19 +3,19 @@\n require 'rails_helper'\n \n RSpec.describe Identity do\n-  describe '.find_for_oauth' do\n+  describe '.find_for_omniauth' do\n     let(:auth) { Fabricate(:identity, user: Fabricate(:user)) }\n \n     it 'calls .find_or_create_by' do\n       allow(described_class).to receive(:find_or_create_by)\n \n-      described_class.find_for_oauth(auth)\n+      described_class.find_for_omniauth(auth)\n \n       expect(described_class).to have_received(:find_or_create_by).with(uid: auth.uid, provider: auth.provider)\n     end\n \n     it 'returns an instance of Identity' do\n-      expect(described_class.find_for_oauth(auth)).to be_instance_of described_class\n+      expect(described_class.find_for_omniauth(auth)).to be_instance_of described_class\n     end\n   end\n end"
        },
        {
          "filename": "spec/requests/omniauth_callbacks_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -96,7 +96,7 @@\n \n     context 'when a user cannot be built' do\n       before do\n-        allow(User).to receive(:find_for_oauth).and_return(User.new)\n+        allow(User).to receive(:find_for_omniauth).and_return(User.new)\n       end\n \n       it 'redirects to the new user signup page' do"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2df86d6413d14c269d630ac39f5f9da1e7f07417",
            "date": "2025-01-24T22:20:05Z",
            "author_login": "Gargron"
          },
          {
            "sha": "79cbb6160d9e374c6274da7d44de0e663a978a37",
            "date": "2025-01-24T17:16:22Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "f73df1f2b058e782cb3ff3e4c4a08d2768db7c90",
            "date": "2025-01-24T16:57:55Z",
            "author_login": "mjankowski"
          },
          {
            "sha": "469c8f8db16cc5fe48c1831364551129d53c9d0c",
            "date": "2025-01-24T16:49:48Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "9a0166c3f30fdc0fa60d4be5e88ebc03ec69f4ed",
            "date": "2025-01-24T16:11:23Z",
            "author_login": "ClearlyClaire"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-287",
    "description": "Mastodon is a free, open-source social network server based on ActivityPub. Mastodon allows new identities from configured authentication providers (CAS, SAML, OIDC) to attach to existing local users with the same e-mail address. This results in a possible account takeover if the authentication provider allows changing the e-mail address or multiple authentication providers are configured. When a user logs in through an external authentication provider for the first time, Mastodon checks the e-mail address passed by the provider to find an existing account. However, using the e-mail address alone means that if the authentication provider allows changing the e-mail address of an account, the Mastodon account can immediately be hijacked. All users logging in through external authentication providers are affected. The severity is medium, as it also requires the external authentication provider to misbehave. However, some well-known OIDC providers (like Microsoft Azure) make it very easy to accidentally allow unverified e-mail changes. Moreover, OpenID Connect also allows dynamic client registration. This issue has been addressed in versions 4.2.6, 4.1.14, 4.0.14, and 3.5.18. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-02-14T21:15:08.410",
    "last_modified": "2024-12-18T22:27:39.050",
    "fix_date": "2024-02-14T14:16:07Z"
  },
  "references": [
    {
      "url": "https://github.com/mastodon/mastodon/commit/b31af34c9716338e4a32a62cc812d1ca59e88d15",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-vm39-j3vx-pch3",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/commit/b31af34c9716338e4a32a62cc812d1ca59e88d15",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-vm39-j3vx-pch3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.126356",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "mastodon",
    "owner": "mastodon",
    "created_at": "2016-02-22T15:01:25Z",
    "updated_at": "2025-01-26T06:33:16Z",
    "pushed_at": "2025-01-26T04:26:40Z",
    "size": 277664,
    "stars": 47604,
    "forks": 7074,
    "open_issues": 4022,
    "watchers": 47604,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 4661421,
      "JavaScript": 1241760,
      "TypeScript": 654337,
      "SCSS": 341279,
      "Haml": 320601,
      "Dockerfile": 18732,
      "HTML": 13453,
      "Shell": 2288,
      "Procfile": 911,
      "CSS": 51
    },
    "commit_activity": {
      "total_commits_last_year": 2991,
      "avg_commits_per_week": 57.51923076923077,
      "days_active_last_year": 267
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-26T07:34:39.823447"
  }
}