{
  "cve_id": "CVE-2024-25623",
  "github_data": {
    "repository": "mastodon/mastodon",
    "fix_commit": "9fee5e852669e26f970e278021302e1a203fc022",
    "related_commits": [
      "9fee5e852669e26f970e278021302e1a203fc022",
      "9fee5e852669e26f970e278021302e1a203fc022"
    ],
    "patch_url": "https://github.com/mastodon/mastodon/commit/9fee5e852669e26f970e278021302e1a203fc022.patch",
    "fix_commit_details": {
      "sha": "9fee5e852669e26f970e278021302e1a203fc022",
      "commit_date": "2024-02-16T10:56:12Z",
      "author": {
        "login": "ClearlyClaire",
        "type": "User",
        "stats": {
          "total_commits": 2259,
          "average_weekly_commits": 4.847639484978541,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 355
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-jhrq-qvrm-qr36",
        "length": 170,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 102,
        "additions": 57,
        "deletions": 45
      },
      "files": [
        {
          "filename": "app/helpers/jsonld_helper.rb",
          "status": "modified",
          "additions": 13,
          "deletions": 1,
          "patch": "@@ -174,7 +174,19 @@ def fetch_resource_without_id_validation(uri, on_behalf_of = nil, raise_on_tempo\n     build_request(uri, on_behalf_of, options: request_options).perform do |response|\n       raise Mastodon::UnexpectedResponseError, response unless response_successful?(response) || response_error_unsalvageable?(response) || !raise_on_temporary_error\n \n-      body_to_json(response.body_with_limit) if response.code == 200\n+      body_to_json(response.body_with_limit) if response.code == 200 && valid_activitypub_content_type?(response)\n+    end\n+  end\n+\n+  def valid_activitypub_content_type?(response)\n+    return true if response.mime_type == 'application/activity+json'\n+\n+    # When the mime type is `application/ld+json`, we need to check the profile,\n+    # but `http.rb` does not parse it for us.\n+    return false unless response.mime_type == 'application/ld+json'\n+\n+    response.headers[HTTP::Headers::CONTENT_TYPE]&.split(';')&.map(&:strip)&.any? do |str|\n+      str.start_with?('profile=\"') && str[9...-1].split.include?('https://www.w3.org/ns/activitystreams')\n     end\n   end\n "
        },
        {
          "filename": "app/services/fetch_resource_service.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -44,7 +44,7 @@ def process_response(response, terminal = false)\n     @response_code = response.code\n     return nil if response.code != 200\n \n-    if ['application/activity+json', 'application/ld+json'].include?(response.mime_type)\n+    if valid_activitypub_content_type?(response)\n       body = response.body_with_limit\n       json = body_to_json(body)\n "
        },
        {
          "filename": "spec/helpers/json_ld_helper_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -56,36 +56,36 @@\n   describe '#fetch_resource' do\n     context 'when the second argument is false' do\n       it 'returns resource even if the retrieved ID and the given URI does not match' do\n-        stub_request(:get, 'https://bob.test/').to_return body: '{\"id\": \"https://alice.test/\"}'\n-        stub_request(:get, 'https://alice.test/').to_return body: '{\"id\": \"https://alice.test/\"}'\n+        stub_request(:get, 'https://bob.test/').to_return(body: '{\"id\": \"https://alice.test/\"}', headers: { 'Content-Type': 'application/activity+json' })\n+        stub_request(:get, 'https://alice.test/').to_return(body: '{\"id\": \"https://alice.test/\"}', headers: { 'Content-Type': 'application/activity+json' })\n \n         expect(fetch_resource('https://bob.test/', false)).to eq({ 'id' => 'https://alice.test/' })\n       end\n \n       it 'returns nil if the object identified by the given URI and the object identified by the retrieved ID does not match' do\n-        stub_request(:get, 'https://mallory.test/').to_return body: '{\"id\": \"https://marvin.test/\"}'\n-        stub_request(:get, 'https://marvin.test/').to_return body: '{\"id\": \"https://alice.test/\"}'\n+        stub_request(:get, 'https://mallory.test/').to_return(body: '{\"id\": \"https://marvin.test/\"}', headers: { 'Content-Type': 'application/activity+json' })\n+        stub_request(:get, 'https://marvin.test/').to_return(body: '{\"id\": \"https://alice.test/\"}', headers: { 'Content-Type': 'application/activity+json' })\n \n         expect(fetch_resource('https://mallory.test/', false)).to be_nil\n       end\n     end\n \n     context 'when the second argument is true' do\n       it 'returns nil if the retrieved ID and the given URI does not match' do\n-        stub_request(:get, 'https://mallory.test/').to_return body: '{\"id\": \"https://alice.test/\"}'\n+        stub_request(:get, 'https://mallory.test/').to_return(body: '{\"id\": \"https://alice.test/\"}', headers: { 'Content-Type': 'application/activity+json' })\n         expect(fetch_resource('https://mallory.test/', true)).to be_nil\n       end\n     end\n   end\n \n   describe '#fetch_resource_without_id_validation' do\n     it 'returns nil if the status code is not 200' do\n-      stub_request(:get, 'https://host.test/').to_return status: 400, body: '{}'\n+      stub_request(:get, 'https://host.test/').to_return(status: 400, body: '{}', headers: { 'Content-Type': 'application/activity+json' })\n       expect(fetch_resource_without_id_validation('https://host.test/')).to be_nil\n     end\n \n     it 'returns hash' do\n-      stub_request(:get, 'https://host.test/').to_return status: 200, body: '{}'\n+      stub_request(:get, 'https://host.test/').to_return(status: 200, body: '{}', headers: { 'Content-Type': 'application/activity+json' })\n       expect(fetch_resource_without_id_validation('https://host.test/')).to eq({})\n     end\n   end"
        },
        {
          "filename": "spec/lib/activitypub/activity/announce_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -35,7 +35,7 @@\n     context 'when sender is followed by a local account' do\n       before do\n         Fabricate(:account).follow!(sender)\n-        stub_request(:get, 'https://example.com/actor/hello-world').to_return(body: Oj.dump(unknown_object_json))\n+        stub_request(:get, 'https://example.com/actor/hello-world').to_return(body: Oj.dump(unknown_object_json), headers: { 'Content-Type': 'application/activity+json' })\n         subject.perform\n       end\n \n@@ -120,7 +120,7 @@\n       let(:object_json) { 'https://example.com/actor/hello-world' }\n \n       before do\n-        stub_request(:get, 'https://example.com/actor/hello-world').to_return(body: Oj.dump(unknown_object_json))\n+        stub_request(:get, 'https://example.com/actor/hello-world').to_return(body: Oj.dump(unknown_object_json), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       context 'when the relay is enabled' do"
        },
        {
          "filename": "spec/services/activitypub/fetch_featured_collection_service_spec.rb",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -72,11 +72,11 @@\n \n   shared_examples 'sets pinned posts' do\n     before do\n-      stub_request(:get, 'https://example.com/account/pinned/known').to_return(status: 200, body: Oj.dump(status_json_pinned_known))\n-      stub_request(:get, 'https://example.com/account/pinned/unknown-inlined').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_inlined))\n+      stub_request(:get, 'https://example.com/account/pinned/known').to_return(status: 200, body: Oj.dump(status_json_pinned_known), headers: { 'Content-Type': 'application/activity+json' })\n+      stub_request(:get, 'https://example.com/account/pinned/unknown-inlined').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_inlined), headers: { 'Content-Type': 'application/activity+json' })\n       stub_request(:get, 'https://example.com/account/pinned/unknown-unreachable').to_return(status: 404)\n-      stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable))\n-      stub_request(:get, 'https://example.com/account/collections/featured').to_return(status: 200, body: Oj.dump(featured_with_null))\n+      stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable), headers: { 'Content-Type': 'application/activity+json' })\n+      stub_request(:get, 'https://example.com/account/collections/featured').to_return(status: 200, body: Oj.dump(featured_with_null), headers: { 'Content-Type': 'application/activity+json' })\n \n       subject.call(actor, note: true, hashtag: false)\n     end\n@@ -94,7 +94,7 @@\n   describe '#call' do\n     context 'when the endpoint is a Collection' do\n       before do\n-        stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'sets pinned posts'\n@@ -111,7 +111,7 @@\n       end\n \n       before do\n-        stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'sets pinned posts'\n@@ -120,7 +120,7 @@\n         let(:items) { 'https://example.com/account/pinned/unknown-reachable' }\n \n         before do\n-          stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable))\n+          stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable), headers: { 'Content-Type': 'application/activity+json' })\n           subject.call(actor, note: true, hashtag: false)\n         end\n \n@@ -147,7 +147,7 @@\n       end\n \n       before do\n-        stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'sets pinned posts'\n@@ -156,7 +156,7 @@\n         let(:items) { 'https://example.com/account/pinned/unknown-reachable' }\n \n         before do\n-          stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable))\n+          stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable), headers: { 'Content-Type': 'application/activity+json' })\n           subject.call(actor, note: true, hashtag: false)\n         end\n "
        },
        {
          "filename": "spec/services/activitypub/fetch_featured_tags_collection_service_spec.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -38,15 +38,15 @@\n   describe '#call' do\n     context 'when the endpoint is a Collection' do\n       before do\n-        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'sets featured tags'\n     end\n \n     context 'when the account already has featured tags' do\n       before do\n-        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n \n         actor.featured_tags.create!(name: 'FoO')\n         actor.featured_tags.create!(name: 'baz')\n@@ -67,7 +67,7 @@\n       end\n \n       before do\n-        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'sets featured tags'\n@@ -88,7 +88,7 @@\n       end\n \n       before do\n-        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'sets featured tags'"
        },
        {
          "filename": "spec/services/activitypub/fetch_remote_account_service_spec.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -38,7 +38,7 @@\n       before do\n         actor[:inbox] = nil\n \n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n \n@@ -54,7 +54,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n \n@@ -75,7 +75,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n@@ -98,7 +98,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n \n@@ -114,7 +114,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end"
        },
        {
          "filename": "spec/services/activitypub/fetch_remote_actor_service_spec.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -38,7 +38,7 @@\n       before do\n         actor[:inbox] = nil\n \n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n \n@@ -54,7 +54,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n \n@@ -75,7 +75,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n@@ -98,7 +98,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end\n \n@@ -114,7 +114,7 @@\n       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }\n \n       before do\n-        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+        stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n       end"
        },
        {
          "filename": "spec/services/activitypub/fetch_remote_key_service_spec.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -50,7 +50,7 @@\n   end\n \n   before do\n-    stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))\n+    stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n     stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })\n   end\n \n@@ -59,7 +59,7 @@\n \n     context 'when the key is a sub-object from the actor' do\n       before do\n-        stub_request(:get, public_key_id).to_return(body: Oj.dump(actor))\n+        stub_request(:get, public_key_id).to_return(body: Oj.dump(actor), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it 'returns the expected account' do\n@@ -71,7 +71,7 @@\n       let(:public_key_id) { 'https://example.com/alice-public-key.json' }\n \n       before do\n-        stub_request(:get, public_key_id).to_return(body: Oj.dump(key_json.merge({ '@context': ['https://www.w3.org/ns/activitystreams', 'https://w3id.org/security/v1'] })))\n+        stub_request(:get, public_key_id).to_return(body: Oj.dump(key_json.merge({ '@context': ['https://www.w3.org/ns/activitystreams', 'https://w3id.org/security/v1'] })), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it 'returns the expected account' do\n@@ -84,7 +84,7 @@\n       let(:actor_public_key) { 'https://example.com/alice-public-key.json' }\n \n       before do\n-        stub_request(:get, public_key_id).to_return(body: Oj.dump(key_json.merge({ '@context': ['https://www.w3.org/ns/activitystreams', 'https://w3id.org/security/v1'] })))\n+        stub_request(:get, public_key_id).to_return(body: Oj.dump(key_json.merge({ '@context': ['https://www.w3.org/ns/activitystreams', 'https://w3id.org/security/v1'] })), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it 'returns the nil' do"
        },
        {
          "filename": "spec/services/activitypub/fetch_replies_service_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -58,7 +58,7 @@\n \n       context 'when passing the URL to the collection' do\n         before do\n-          stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))\n+          stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n         end\n \n         it 'spawns workers for up to 5 replies on the same server' do\n@@ -93,7 +93,7 @@\n \n       context 'when passing the URL to the collection' do\n         before do\n-          stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))\n+          stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n         end\n \n         it 'spawns workers for up to 5 replies on the same server' do\n@@ -132,7 +132,7 @@\n \n       context 'when passing the URL to the collection' do\n         before do\n-          stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))\n+          stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n         end\n \n         it 'spawns workers for up to 5 replies on the same server' do"
        },
        {
          "filename": "spec/services/activitypub/synchronize_followers_service_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -60,7 +60,7 @@\n   describe '#call' do\n     context 'when the endpoint is a Collection of actor URIs' do\n       before do\n-        stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'synchronizes followers'\n@@ -77,7 +77,7 @@\n       end\n \n       before do\n-        stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'synchronizes followers'\n@@ -98,7 +98,7 @@\n       end\n \n       before do\n-        stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))\n+        stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload), headers: { 'Content-Type': 'application/activity+json' })\n       end\n \n       it_behaves_like 'synchronizes followers'"
        },
        {
          "filename": "spec/workers/activitypub/fetch_replies_worker_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@\n \n   describe 'perform' do\n     it 'performs a request if the collection URI is from the same host' do\n-      stub_request(:get, 'https://example.com/statuses_replies/1').to_return(status: 200, body: json)\n+      stub_request(:get, 'https://example.com/statuses_replies/1').to_return(status: 200, body: json, headers: { 'Content-Type': 'application/activity+json' })\n       subject.perform(status.id, 'https://example.com/statuses_replies/1')\n       expect(a_request(:get, 'https://example.com/statuses_replies/1')).to have_been_made.once\n     end"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "68c9f91ccb46b14ce43424479b3ff8ab28800997",
            "date": "2025-01-14T17:40:55Z",
            "author_login": "mjankowski"
          },
          {
            "sha": "e1d7efadc04dd0826c6bcfe43325688566e13881",
            "date": "2025-01-14T16:35:58Z",
            "author_login": "vmstan"
          },
          {
            "sha": "bfe73e153d425312211eb1114ff20275aa369059",
            "date": "2025-01-14T16:34:26Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "50013b10a50a560ebf4432cbe1782426181dba6f",
            "date": "2025-01-14T14:32:57Z",
            "author_login": "mjankowski"
          },
          {
            "sha": "7c56517c7c2f3e284b912f7519682c3612d3af81",
            "date": "2025-01-14T14:32:29Z",
            "author_login": "mjankowski"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:H/A:N",
    "cwe_id": "CWE-434",
    "description": "Mastodon is a free, open-source social network server based on ActivityPub. Prior to versions 4.2.7, 4.1.15, 4.0.15, and 3.5.19, when fetching remote statuses, Mastodon doesn't check that the response from the remote server has a `Content-Type` header value of the Activity Streams media type, which allows a threat actor to upload a crafted Activity Streams document to a remote server and make a Mastodon server fetch it, if the remote server accepts arbitrary user uploads. The vulnerability allows a threat actor to impersonate an account on a remote server that satisfies all of the following properties: allows the attacker to register an account; accepts arbitrary user-uploaded documents and places them on the same domain as the ActivityPub actors; and serves user-uploaded document in response to requests with an `Accept` header value of the Activity Streams media type. Versions 4.2.7, 4.1.15, 4.0.15, and 3.5.19 contain a fix for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-19T16:15:51.847",
    "last_modified": "2024-12-18T22:39:17.437",
    "fix_date": "2024-02-16T10:56:12Z"
  },
  "references": [
    {
      "url": "https://github.com/mastodon/mastodon/commit/9fee5e852669e26f970e278021302e1a203fc022",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-jhrq-qvrm-qr36",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/commit/9fee5e852669e26f970e278021302e1a203fc022",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-jhrq-qvrm-qr36",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.133271",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mastodon",
    "owner": "mastodon",
    "created_at": "2016-02-22T15:01:25Z",
    "updated_at": "2025-01-14T12:09:56Z",
    "pushed_at": "2025-01-14T10:53:29Z",
    "size": 274975,
    "stars": 47503,
    "forks": 7054,
    "open_issues": 3992,
    "watchers": 47503,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 4639671,
      "JavaScript": 1261807,
      "TypeScript": 625967,
      "SCSS": 341977,
      "Haml": 320352,
      "Dockerfile": 18716,
      "HTML": 13453,
      "Shell": 2288,
      "Procfile": 911,
      "CSS": 51
    },
    "commit_activity": {
      "total_commits_last_year": 3020,
      "avg_commits_per_week": 58.07692307692308,
      "days_active_last_year": 268
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:56:02.769793"
  }
}