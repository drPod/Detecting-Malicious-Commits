{
  "cve_id": "CVE-2024-25636",
  "github_data": {
    "repository": "misskey-dev/misskey",
    "fix_commit": "9a70ce8f5ea9df00001894809f5ce7bc69b14c8a",
    "related_commits": [
      "9a70ce8f5ea9df00001894809f5ce7bc69b14c8a",
      "9a70ce8f5ea9df00001894809f5ce7bc69b14c8a"
    ],
    "patch_url": "https://github.com/misskey-dev/misskey/commit/9a70ce8f5ea9df00001894809f5ce7bc69b14c8a.patch",
    "fix_commit_details": {
      "sha": "9a70ce8f5ea9df00001894809f5ce7bc69b14c8a",
      "commit_date": "2024-02-17T03:41:19Z",
      "author": {
        "login": "tamaina",
        "type": "User",
        "stats": {
          "total_commits": 822,
          "average_weekly_commits": 1.9524940617577198,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 153
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-qqrm-9grj-6v32",
        "length": 359,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 186,
        "additions": 157,
        "deletions": 29
      },
      "files": [
        {
          "filename": "packages/backend/src/core/HttpRequestService.ts",
          "status": "modified",
          "additions": 44,
          "deletions": 11,
          "patch": "@@ -14,9 +14,16 @@ import { DI } from '@/di-symbols.js';\n import type { Config } from '@/config.js';\n import { StatusError } from '@/misc/status-error.js';\n import { bindThis } from '@/decorators.js';\n+import { validateContentTypeSetAsActivityPub } from '@/core/activitypub/misc/validator.js';\n+import type { IObject } from '@/core/activitypub/type.js';\n import type { Response } from 'node-fetch';\n import type { URL } from 'node:url';\n \n+export type HttpRequestSendOptions = {\n+\tthrowErrorWhenResponseNotOk: boolean;\n+\tvalidators?: ((res: Response) => void)[];\n+};\n+\n @Injectable()\n export class HttpRequestService {\n \t/**\n@@ -104,6 +111,23 @@ export class HttpRequestService {\n \t\t}\n \t}\n \n+\t@bindThis\n+\tpublic async getActivityJson(url: string): Promise<IObject> {\n+\t\tconst res = await this.send(url, {\n+\t\t\tmethod: 'GET',\n+\t\t\theaders: {\n+\t\t\t\tAccept: 'application/activity+json, application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"',\n+\t\t\t},\n+\t\t\ttimeout: 5000,\n+\t\t\tsize: 1024 * 256,\n+\t\t}, {\n+\t\t\tthrowErrorWhenResponseNotOk: true,\n+\t\t\tvalidators: [validateContentTypeSetAsActivityPub],\n+\t\t});\n+\n+\t\treturn await res.json() as IObject;\n+\t}\n+\n \t@bindThis\n \tpublic async getJson<T = unknown>(url: string, accept = 'application/json, */*', headers?: Record<string, string>): Promise<T> {\n \t\tconst res = await this.send(url, {\n@@ -132,17 +156,20 @@ export class HttpRequestService {\n \t}\n \n \t@bindThis\n-\tpublic async send(url: string, args: {\n-\t\tmethod?: string,\n-\t\tbody?: string,\n-\t\theaders?: Record<string, string>,\n-\t\ttimeout?: number,\n-\t\tsize?: number,\n-\t} = {}, extra: {\n-\t\tthrowErrorWhenResponseNotOk: boolean;\n-\t} = {\n-\t\tthrowErrorWhenResponseNotOk: true,\n-\t}): Promise<Response> {\n+\tpublic async send(\n+\t\turl: string,\n+\t\targs: {\n+\t\t\tmethod?: string,\n+\t\t\tbody?: string,\n+\t\t\theaders?: Record<string, string>,\n+\t\t\ttimeout?: number,\n+\t\t\tsize?: number,\n+\t\t} = {},\n+\t\textra: HttpRequestSendOptions = {\n+\t\t\tthrowErrorWhenResponseNotOk: true,\n+\t\t\tvalidators: [],\n+\t\t},\n+\t): Promise<Response> {\n \t\tconst timeout = args.timeout ?? 5000;\n \n \t\tconst controller = new AbortController();\n@@ -166,6 +193,12 @@ export class HttpRequestService {\n \t\t\tthrow new StatusError(`${res.status} ${res.statusText}`, res.status, res.statusText);\n \t\t}\n \n+\t\tif (res.ok) {\n+\t\t\tfor (const validator of (extra.validators ?? [])) {\n+\t\t\t\tvalidator(res);\n+\t\t\t}\n+\t\t}\n+\n \t\treturn res;\n \t}\n }"
        },
        {
          "filename": "packages/backend/src/core/activitypub/ApRequestService.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -14,6 +14,7 @@ import { HttpRequestService } from '@/core/HttpRequestService.js';\n import { LoggerService } from '@/core/LoggerService.js';\n import { bindThis } from '@/decorators.js';\n import type Logger from '@/logger.js';\n+import { validateContentTypeSetAsActivityPub } from '@/core/activitypub/misc/validator.js';\n \n type Request = {\n \turl: string;\n@@ -70,7 +71,7 @@ export class ApRequestCreator {\n \t\t\turl: u.href,\n \t\t\tmethod: 'GET',\n \t\t\theaders: this.#objectAssignWithLcKey({\n-\t\t\t\t'Accept': 'application/activity+json, application/ld+json',\n+\t\t\t\t'Accept': 'application/activity+json, application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"',\n \t\t\t\t'Date': new Date().toUTCString(),\n \t\t\t\t'Host': new URL(args.url).host,\n \t\t\t}, args.additionalHeaders),\n@@ -195,6 +196,9 @@ export class ApRequestService {\n \t\tconst res = await this.httpRequestService.send(url, {\n \t\t\tmethod: req.request.method,\n \t\t\theaders: req.request.headers,\n+\t\t}, {\n+\t\t\tthrowErrorWhenResponseNotOk: true,\n+\t\t\tvalidators: [validateContentTypeSetAsActivityPub],\n \t\t});\n \n \t\treturn await res.json();"
        },
        {
          "filename": "packages/backend/src/core/activitypub/ApResolverService.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -105,7 +105,7 @@ export class Resolver {\n \n \t\tconst object = (this.user\n \t\t\t? await this.apRequestService.signedGet(value, this.user) as IObject\n-\t\t\t: await this.httpRequestService.getJson(value, 'application/activity+json, application/ld+json')) as IObject;\n+\t\t\t: await this.httpRequestService.getActivityJson(value)) as IObject;\n \n \t\tif (\n \t\t\tArray.isArray(object['@context']) ?"
        },
        {
          "filename": "packages/backend/src/core/activitypub/LdSignatureService.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -8,6 +8,7 @@ import { Injectable } from '@nestjs/common';\n import { HttpRequestService } from '@/core/HttpRequestService.js';\n import { bindThis } from '@/decorators.js';\n import { CONTEXTS } from './misc/contexts.js';\n+import { validateContentTypeSetAsJsonLD } from './misc/validator.js';\n import type { JsonLdDocument } from 'jsonld';\n import type { JsonLd, RemoteDocument } from 'jsonld/jsonld-spec.js';\n \n@@ -133,7 +134,10 @@ class LdSignature {\n \t\t\t\t},\n \t\t\t\ttimeout: this.loderTimeout,\n \t\t\t},\n-\t\t\t{ throwErrorWhenResponseNotOk: false },\n+\t\t\t{\n+\t\t\t\tthrowErrorWhenResponseNotOk: false,\n+\t\t\t\tvalidators: [validateContentTypeSetAsJsonLD],\n+\t\t\t},\n \t\t).then(res => {\n \t\t\tif (!res.ok) {\n \t\t\t\tthrow new Error(`${res.status} ${res.statusText}`);"
        },
        {
          "filename": "packages/backend/src/core/activitypub/misc/validator.ts",
          "status": "added",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * SPDX-FileCopyrightText: syuilo and misskey-project\n+ * SPDX-License-Identifier: AGPL-3.0-only\n+ */\n+\n+import type { Response } from 'node-fetch';\n+\n+export function validateContentTypeSetAsActivityPub(response: Response): void {\n+\tconst contentType = (response.headers.get('content-type') ?? '').toLowerCase();\n+\n+\tif (contentType === '') {\n+\t\tthrow new Error('Validate content type of AP response: No content-type header');\n+\t}\n+\tif (\n+\t\tcontentType.startsWith('application/activity+json') ||\n+\t\t(contentType.startsWith('application/ld+json;') && contentType.includes('https://www.w3.org/ns/activitystreams'))\n+\t) {\n+\t\treturn;\n+\t}\n+\tthrow new Error('Validate content type of AP response: Content type is not application/activity+json or application/ld+json');\n+}\n+\n+const plusJsonSuffixRegex = /(application|text)\\/[a-zA-Z0-9\\.\\-\\+]+\\+json/;\n+\n+export function validateContentTypeSetAsJsonLD(response: Response): void {\n+\tconst contentType = (response.headers.get('content-type') ?? '').toLowerCase();\n+\n+\tif (contentType === '') {\n+\t\tthrow new Error('Validate content type of JSON LD: No content-type header');\n+\t}\n+\tif (\n+\t\tcontentType.startsWith('application/ld+json') ||\n+\t\tcontentType.startsWith('application/json') ||\n+\t\tplusJsonSuffixRegex.test(contentType)\n+\t) {\n+\t\treturn;\n+\t}\n+\tthrow new Error('Validate content type of JSON LD: Content type is not application/ld+json or application/json');\n+}"
        },
        {
          "filename": "packages/backend/test/e2e/fetch-validate-ap-deny.ts",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * SPDX-FileCopyrightText: syuilo and misskey-project\n+ * SPDX-License-Identifier: AGPL-3.0-only\n+ */\n+\n+process.env.NODE_ENV = 'test';\n+\n+import { validateContentTypeSetAsActivityPub, validateContentTypeSetAsJsonLD } from '@/core/activitypub/misc/validator.js';\n+import { signup, uploadFile, relativeFetch } from '../utils.js';\n+import type * as misskey from 'misskey-js';\n+\n+describe('validateContentTypeSetAsActivityPub/JsonLD (deny case)', () => {\n+\tlet alice: misskey.entities.SignupResponse;\n+\tlet aliceUploadedFile: any;\n+\n+\tbeforeAll(async () => {\n+\t\talice = await signup({ username: 'alice' });\n+\t\taliceUploadedFile = await uploadFile(alice);\n+\t}, 1000 * 60 * 2);\n+\n+\ttest('ActivityStreams: \u30d5\u30a1\u30a4\u30eb\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b', async () => {\n+\t\tconst res = await relativeFetch(aliceUploadedFile.webpublicUrl);\n+\n+\t\tfunction doValidate() {\n+\t\t\tvalidateContentTypeSetAsActivityPub(res);\n+\t\t}\n+\n+\t\texpect(doValidate).toThrow('Content type is not');\n+\t});\n+\n+\ttest('JSON-LD: \u30d5\u30a1\u30a4\u30eb\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b', async () => {\n+\t\tconst res = await relativeFetch(aliceUploadedFile.webpublicUrl);\n+\n+\t\tfunction doValidate() {\n+\t\t\tvalidateContentTypeSetAsJsonLD(res);\n+\t\t}\n+\n+\t\texpect(doValidate).toThrow('Content type is not');\n+\t});\n+});"
        },
        {
          "filename": "packages/backend/test/unit/activitypub.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -203,7 +203,7 @@ describe('ActivityPub', () => {\n \n \tdescribe('Renderer', () => {\n \t\ttest('Render an announce with visibility: followers', () => {\n-\t\t\trendererService.renderAnnounce(null, {\n+\t\t\trendererService.renderAnnounce('https://example.com/notes/00example', {\n \t\t\t\tid: genAidx(Date.now()),\n \t\t\t\tvisibility: 'followers',\n \t\t\t} as MiNote);"
        },
        {
          "filename": "packages/backend/test/utils.ts",
          "status": "modified",
          "additions": 22,
          "deletions": 14,
          "patch": "@@ -13,10 +13,11 @@ import fetch, { File, RequestInit } from 'node-fetch';\n import { DataSource } from 'typeorm';\n import { JSDOM } from 'jsdom';\n import { DEFAULT_POLICIES } from '@/core/RoleService.js';\n+import { Packed } from '@/misc/json-schema.js';\n+import { validateContentTypeSetAsActivityPub } from '@/core/activitypub/misc/validator.js';\n import { entities } from '../src/postgres.js';\n import { loadConfig } from '../src/config.js';\n import type * as misskey from 'misskey-js';\n-import { Packed } from '@/misc/json-schema.js';\n \n export { server as startServer, jobQueue as startJobQueue } from '@/boot/common.js';\n \n@@ -123,9 +124,9 @@ export function randomString(chars = 'abcdefghijklmnopqrstuvwxyz0123456789', len\n function timeoutPromise<T>(p: Promise<T>, timeout: number): Promise<T> {\n \treturn Promise.race([\n \t\tp,\n-\t\tnew Promise((reject) =>{\n-\t\t\tsetTimeout(() => { reject(new Error('timed out')); }, timeout)\n-\t\t}) as never\n+\t\tnew Promise((reject) => {\n+\t\t\tsetTimeout(() => { reject(new Error('timed out')); }, timeout);\n+\t\t}) as never,\n \t]);\n }\n \n@@ -327,7 +328,6 @@ export const uploadFile = async (user?: UserToken, { path, name, blob }: UploadO\n \t});\n \n \tconst body = res.status !== 204 ? await res.json() as misskey.Endpoints['drive/files/create']['res'] : null;\n-\n \treturn {\n \t\tstatus: res.status,\n \t\theaders: res.headers,\n@@ -343,7 +343,7 @@ export const uploadUrl = async (user: UserToken, url: string): Promise<Packed<'D\n \t\t'main',\n \t\t(msg) => msg.type === 'urlUploadFinished' && msg.body.marker === marker,\n \t\t(msg) => msg.body.file as Packed<'DriveFile'>,\n-\t\t60 * 1000\n+\t\t60 * 1000,\n \t);\n \n \tawait api('drive/files/upload-from-url', {\n@@ -434,20 +434,20 @@ export const waitFire = async (user: UserToken, channel: string, trgr: () => any\n  * @returns \u6642\u9593\u5185\u306b\u6b63\u5e38\u306b\u51e6\u7406\u3067\u304d\u305f\u5834\u5408\u306b\u901a\u77e5\u304b\u3089extractor\u3092\u901a\u3057\u305f\u5024\u3092\u5f97\u308b\n  */\n export function makeStreamCatcher<T>(\n-\t\tuser: UserToken,\n-\t\tchannel: string,\n-\t\tcond: (message: Record<string, any>) => boolean,\n-\t\textractor: (message: Record<string, any>) => T,\n-\t\ttimeout = 60 * 1000): Promise<T> {\n-\tlet ws: WebSocket\n+\tuser: UserToken,\n+\tchannel: string,\n+\tcond: (message: Record<string, any>) => boolean,\n+\textractor: (message: Record<string, any>) => T,\n+\ttimeout = 60 * 1000): Promise<T> {\n+\tlet ws: WebSocket;\n \tconst p = new Promise<T>(async (resolve) => {\n \t\tws = await connectStream(user, channel, (msg) => {\n \t\t\tif (cond(msg)) {\n-\t\t\t\tresolve(extractor(msg))\n+\t\t\t\tresolve(extractor(msg));\n \t\t\t}\n \t\t});\n \t}).finally(() => {\n-\t\tws?.close();\n+\t\tws.close();\n \t});\n \n \treturn timeoutPromise(p, timeout);\n@@ -476,6 +476,14 @@ export const simpleGet = async (path: string, accept = '*/*', cookie: any = unde\n \t\t'text/html; charset=utf-8',\n \t];\n \n+\tif (res.ok && (\n+\t\taccept.startsWith('application/activity+json') ||\n+\t\t(accept.startsWith('application/ld+json') && accept.includes('https://www.w3.org/ns/activitystreams'))\n+\t)) {\n+\t\t// validateContentTypeSetAsActivityPub\u306e\u30c6\u30b9\u30c8\u3092\u517c\u306d\u308b\n+\t\tvalidateContentTypeSetAsActivityPub(res);\n+\t}\n+\n \tconst body =\n \t\tjsonTypes.includes(res.headers.get('content-type') ?? '') ? await res.json() :\n \t\thtmlTypes.includes(res.headers.get('content-type') ?? '') ? new JSDOM(await res.text()) :"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9760f3d7c9113f5436732bf6d6e454b253061b1d",
            "date": "2025-01-14T13:49:59Z",
            "author_login": "tai-cha"
          },
          {
            "sha": "87cdbaea4fa0955bf217fa6d4cf5bd420ada73eb",
            "date": "2025-01-14T13:28:06Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "1b47e2d4f2e7435a2b4eddef50828f0b7cc7ca15",
            "date": "2025-01-14T13:28:00Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "d018fe58aa91eb702b098df659f23f9a981f4368",
            "date": "2025-01-14T13:06:39Z",
            "author_login": "dahlia"
          },
          {
            "sha": "f45fd01551fb283604297e4c94cca4d04ebf03aa",
            "date": "2025-01-14T12:49:35Z",
            "author_login": "samunohito"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:N",
    "cwe_id": "CWE-434",
    "description": "Misskey is an open source, decentralized social media platform with ActivityPub support. Prior to version 2024.2.0, when fetching remote Activity Streams objects, Misskey doesn't check that the response from the remote server has a `Content-Type` header value of the Activity Streams media type, which allows a threat actor to upload a crafted Activity Streams document to a remote server and make a Misskey instance fetch it, if the remote server accepts arbitrary user uploads. The vulnerability allows a threat actor to impersonate and take over an account on a remote server that satisfies all of the following properties: allows the threat actor to register an account; accepts arbitrary user-uploaded documents and places them on the same domain as legitimate Activity Streams actors; and serves user-uploaded document in response to requests with an `Accept` header value of the Activity Streams media type. Version 2024.2.0 contains a patch for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-02-19T20:15:46.077",
    "last_modified": "2024-11-21T09:01:07.693",
    "fix_date": "2024-02-17T03:41:19Z"
  },
  "references": [
    {
      "url": "https://github.com/misskey-dev/misskey/blob/2024.2.0-beta.10/packages/backend/src/core/activitypub/ApResolverService.ts#L69-L119",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/blob/2024.2.0-beta.10/packages/backend/src/core/activitypub/models/ApNoteService.ts#L112-L308",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/blob/2024.2.0-beta.10/packages/backend/src/server/api/endpoints/ap/show.ts#L125-L143",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/commit/9a70ce8f5ea9df00001894809f5ce7bc69b14c8a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/security/advisories/GHSA-qqrm-9grj-6v32",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/blob/2024.2.0-beta.10/packages/backend/src/core/activitypub/ApResolverService.ts#L69-L119",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/blob/2024.2.0-beta.10/packages/backend/src/core/activitypub/models/ApNoteService.ts#L112-L308",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/blob/2024.2.0-beta.10/packages/backend/src/server/api/endpoints/ap/show.ts#L125-L143",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/commit/9a70ce8f5ea9df00001894809f5ce7bc69b14c8a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/misskey-dev/misskey/security/advisories/GHSA-qqrm-9grj-6v32",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.134224",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "misskey",
    "owner": "misskey-dev",
    "created_at": "2016-12-25T13:16:07Z",
    "updated_at": "2025-01-14T13:28:10Z",
    "pushed_at": "2025-01-14T13:28:07Z",
    "size": 163993,
    "stars": 10240,
    "forks": 1398,
    "open_issues": 2259,
    "watchers": 10240,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "TypeScript": 5535094,
      "Vue": 2400709,
      "JavaScript": 550003,
      "SCSS": 24017,
      "Pug": 20568,
      "CSS": 5581,
      "Dockerfile": 4843,
      "HTML": 4126,
      "Shell": 1827,
      "Smarty": 1782,
      "MDX": 575,
      "Procfile": 35
    },
    "commit_activity": {
      "total_commits_last_year": 1573,
      "avg_commits_per_week": 30.25,
      "days_active_last_year": 229
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:33:01.563786"
  }
}