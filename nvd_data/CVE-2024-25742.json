{
  "cve_id": "CVE-2024-25742",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "e3ef461af35a8c74f2f4ce6616491ddb355a208f",
    "related_commits": [
      "e3ef461af35a8c74f2f4ce6616491ddb355a208f",
      "e3ef461af35a8c74f2f4ce6616491ddb355a208f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e3ef461af35a8c74f2f4ce6616491ddb355a208f",
      "commit_date": "2024-01-05T10:14:07Z",
      "author": {
        "login": "bp3tk0v",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "x86/sev: Harden #VC instruction emulation somewhat",
        "length": 362,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 111,
        "additions": 108,
        "deletions": 3
      },
      "files": [
        {
          "filename": "arch/x86/boot/compressed/sev.c",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -304,6 +304,10 @@ void do_boot_stage2_vc(struct pt_regs *regs, unsigned long exit_code)\n \tif (result != ES_OK)\n \t\tgoto finish;\n \n+\tresult = vc_check_opcode_bytes(&ctxt, exit_code);\n+\tif (result != ES_OK)\n+\t\tgoto finish;\n+\n \tswitch (exit_code) {\n \tcase SVM_EXIT_RDTSC:\n \tcase SVM_EXIT_RDTSCP:"
        },
        {
          "filename": "arch/x86/kernel/sev-shared.c",
          "status": "modified",
          "additions": 100,
          "deletions": 2,
          "patch": "@@ -10,11 +10,15 @@\n  */\n \n #ifndef __BOOT_COMPRESSED\n-#define error(v)\tpr_err(v)\n-#define has_cpuflag(f)\tboot_cpu_has(f)\n+#define error(v)\t\t\tpr_err(v)\n+#define has_cpuflag(f)\t\t\tboot_cpu_has(f)\n+#define sev_printk(fmt, ...)\t\tprintk(fmt, ##__VA_ARGS__)\n+#define sev_printk_rtl(fmt, ...)\tprintk_ratelimited(fmt, ##__VA_ARGS__)\n #else\n #undef WARN\n #define WARN(condition, format...) (!!(condition))\n+#define sev_printk(fmt, ...)\n+#define sev_printk_rtl(fmt, ...)\n #endif\n \n /* I/O parameters for CPUID-related helpers */\n@@ -574,13 +578,18 @@ void __init do_vc_no_ghcb(struct pt_regs *regs, unsigned long exit_code)\n {\n \tunsigned int subfn = lower_bits(regs->cx, 32);\n \tunsigned int fn = lower_bits(regs->ax, 32);\n+\tu16 opcode = *(unsigned short *)regs->ip;\n \tstruct cpuid_leaf leaf;\n \tint ret;\n \n \t/* Only CPUID is supported via MSR protocol */\n \tif (exit_code != SVM_EXIT_CPUID)\n \t\tgoto fail;\n \n+\t/* Is it really a CPUID insn? */\n+\tif (opcode != 0xa20f)\n+\t\tgoto fail;\n+\n \tleaf.fn = fn;\n \tleaf.subfn = subfn;\n \n@@ -1170,3 +1179,92 @@ static int vmgexit_psc(struct ghcb *ghcb, struct snp_psc_desc *desc)\n out:\n \treturn ret;\n }\n+\n+static enum es_result vc_check_opcode_bytes(struct es_em_ctxt *ctxt,\n+\t\t\t\t\t    unsigned long exit_code)\n+{\n+\tunsigned int opcode = (unsigned int)ctxt->insn.opcode.value;\n+\tu8 modrm = ctxt->insn.modrm.value;\n+\n+\tswitch (exit_code) {\n+\n+\tcase SVM_EXIT_IOIO:\n+\tcase SVM_EXIT_NPF:\n+\t\t/* handled separately */\n+\t\treturn ES_OK;\n+\n+\tcase SVM_EXIT_CPUID:\n+\t\tif (opcode == 0xa20f)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_INVD:\n+\t\tif (opcode == 0x080f)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_MONITOR:\n+\t\tif (opcode == 0x010f && modrm == 0xc8)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_MWAIT:\n+\t\tif (opcode == 0x010f && modrm == 0xc9)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_MSR:\n+\t\t/* RDMSR */\n+\t\tif (opcode == 0x320f ||\n+\t\t/* WRMSR */\n+\t\t    opcode == 0x300f)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_RDPMC:\n+\t\tif (opcode == 0x330f)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_RDTSC:\n+\t\tif (opcode == 0x310f)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_RDTSCP:\n+\t\tif (opcode == 0x010f && modrm == 0xf9)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_READ_DR7:\n+\t\tif (opcode == 0x210f &&\n+\t\t    X86_MODRM_REG(ctxt->insn.modrm.value) == 7)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_VMMCALL:\n+\t\tif (opcode == 0x010f && modrm == 0xd9)\n+\t\t\treturn ES_OK;\n+\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_WRITE_DR7:\n+\t\tif (opcode == 0x230f &&\n+\t\t    X86_MODRM_REG(ctxt->insn.modrm.value) == 7)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tcase SVM_EXIT_WBINVD:\n+\t\tif (opcode == 0x90f)\n+\t\t\treturn ES_OK;\n+\t\tbreak;\n+\n+\tdefault:\n+\t\tbreak;\n+\t}\n+\n+\tsev_printk(KERN_ERR \"Wrong/unhandled opcode bytes: 0x%x, exit_code: 0x%lx, rIP: 0x%lx\\n\",\n+\t\t   opcode, exit_code, ctxt->regs->ip);\n+\n+\treturn ES_UNSUPPORTED;\n+}"
        },
        {
          "filename": "arch/x86/kernel/sev.c",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -1752,7 +1752,10 @@ static enum es_result vc_handle_exitcode(struct es_em_ctxt *ctxt,\n \t\t\t\t\t struct ghcb *ghcb,\n \t\t\t\t\t unsigned long exit_code)\n {\n-\tenum es_result result;\n+\tenum es_result result = vc_check_opcode_bytes(ctxt, exit_code);\n+\n+\tif (result != ES_OK)\n+\t\treturn result;\n \n \tswitch (exit_code) {\n \tcase SVM_EXIT_READ_DR7:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": null,
    "description": "In the Linux kernel before 6.9, an untrusted hypervisor can inject virtual interrupt 29 (#VC) at any point in time and can trigger its handler. This affects AMD SEV-SNP and AMD SEV-ES.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-05-17T22:15:07.227",
    "last_modified": "2024-11-21T09:01:19.287",
    "fix_date": "2024-01-05T10:14:07Z"
  },
  "references": [
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.9",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e3ef461af35a8c74f2f4ce6616491ddb355a208f",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/e3ef461af35a8c74f2f4ce6616491ddb355a208f",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.amd.com/en/resources/product-security/bulletin/amd-sb-3008.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v6.x/ChangeLog-6.9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e3ef461af35a8c74f2f4ce6616491ddb355a208f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/e3ef461af35a8c74f2f4ce6616491ddb355a208f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.amd.com/en/resources/product-security/bulletin/amd-sb-3008.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.254442",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}