{
  "cve_id": "CVE-2024-26135",
  "github_data": {
    "repository": "Ylianst/MeshCentral",
    "fix_commit": "f2e43cc6da9f5447dbff0948e6c6024c8a315af3",
    "related_commits": [
      "f2e43cc6da9f5447dbff0948e6c6024c8a315af3",
      "f2e43cc6da9f5447dbff0948e6c6024c8a315af3"
    ],
    "patch_url": "https://github.com/Ylianst/MeshCentral/commit/f2e43cc6da9f5447dbff0948e6c6024c8a315af3.patch",
    "fix_commit_details": {
      "sha": "f2e43cc6da9f5447dbff0948e6c6024c8a315af3",
      "commit_date": "2024-02-17T19:22:38Z",
      "author": {
        "login": "Ylianst",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Added option to check HTTP origin.",
        "length": 34,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 30,
        "additions": 29,
        "deletions": 1
      },
      "files": [
        {
          "filename": "meshcentral-config-schema.json",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -1134,6 +1134,15 @@\n               \"type\": \"string\"\n             }\n           },\n+          \"allowedOrigin\": {\n+            \"type\": [ \"array\", \"boolean\" ],\n+            \"default\": false,\n+            \"uniqueItems\": true,\n+            \"description\": \"A list of allowed hostnames for HTTP request origin header. If false, a default list is created, if true, all hostnames are allowed.\",\n+            \"items\": {\n+              \"type\": \"string\"\n+            }\n+          },\n           \"welcomeText\": {\n             \"type\": \"string\",\n             \"description\": \"Text that will be shown on the login screen.\""
        },
        {
          "filename": "meshcentral.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1312,6 +1312,7 @@ function CreateMeshCentralServer(config, args) {\n             if (typeof obj.config.domains[i].agentallowedip == 'string') { if (obj.config.domains[i].agentallowedip == '') { delete obj.config.domains[i].agentallowedip; } else { obj.config.domains[i].agentallowedip = obj.config.domains[i].agentallowedip.split(','); } }\n             if (typeof obj.config.domains[i].agentblockedip == 'string') { if (obj.config.domains[i].agentblockedip == '') { delete obj.config.domains[i].agentblockedip; } else { obj.config.domains[i].agentblockedip = obj.config.domains[i].agentblockedip.split(','); } }\n             if (typeof obj.config.domains[i].ignoreagenthashcheck == 'string') { if (obj.config.domains[i].ignoreagenthashcheck == '') { delete obj.config.domains[i].ignoreagenthashcheck; } else { obj.config.domains[i].ignoreagenthashcheck = obj.config.domains[i].ignoreagenthashcheck.split(','); } }\n+            if (typeof obj.config.domains[i].allowedorigin == 'string') { if (obj.config.domains[i].allowedorigin == '') { delete obj.config.domains[i].allowedorigin; } else { obj.config.domains[i].allowedorigin = obj.config.domains[i].allowedorigin.split(','); } }\n             if ((obj.config.domains[i].passwordrequirements != null) && (typeof obj.config.domains[i].passwordrequirements == 'object')) {\n                 if (typeof obj.config.domains[i].passwordrequirements.skip2factor == 'string') {\n                     obj.config.domains[i].passwordrequirements.skip2factor = obj.config.domains[i].passwordrequirements.skip2factor.split(',');"
        },
        {
          "filename": "views/default.handlebars",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-<!DOCTYPE html>\n+\ufeff<!DOCTYPE html>\n <html lang=\"en\" dir=\"ltr\" xmlns=\"http://www.w3.org/1999/xhtml\">\n <head>\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n@@ -2133,6 +2133,7 @@\n                 QV('verifyEmailId2', false);\n                 QV('logoutControl', false);\n                 if (errorCode == 'noauth') { QH('p0span', \"Unable to perform authentication\"); return; }\n+                if (errorCode == 'invalidorigin') { QH('p0span', \"Invalid origin in HTTP request\"); return; }\n                 if (prevState == 2) { if (autoReconnect) { setTimeout(serverPoll, 5000); } } else { QH('p0span', \"Unable to connect web socket\"); }\n                 if (authCookieRenewTimer != null) { clearInterval(authCookieRenewTimer); authCookieRenewTimer = null; }\n             } else if (state == 2) {"
        },
        {
          "filename": "webserver.js",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -5734,6 +5734,18 @@ module.exports.CreateWebServer = function (parent, db, args, certificates, doneF\n         return obj.certificates.CommonName;\n     }\n \n+    // Return true if this is an allowed HTTP request origin hostname.\n+    obj.CheckWebServerOriginName = function (domain, req) {\n+        if (domain.allowedorigin === true) return true; // Ignore origin\n+        if (typeof req.headers.origin != 'string') return true; // No origin in the header, this is a desktop app\n+        const originUrl = require('url').parse(req.headers.origin, true);\n+        if (typeof originUrl.hostname != 'string') return false; // Origin hostname is not valid\n+        if (Array.isArray(domain.allowedorigin)) return (domain.allowedorigin.indexOf(originUrl.hostname) >= 0); // Check if this is an allowed origin from an explicit list\n+        if (obj.isTrustedCert(domain) === false) return true; // This server does not have a trusted certificate.\n+        if (domain.dns != null) return (domain.dns == originUrl.hostname); // Match the domain DNS\n+        return (obj.certificates.CommonName == originUrl.hostname); // Match the default server name\n+    }\n+\n     // Create a OSX mesh agent installer\n     obj.handleMeshOsxAgentRequest = function (req, res) {\n         const domain = getDomain(req, res);\n@@ -6434,6 +6446,11 @@ module.exports.CreateWebServer = function (parent, db, args, certificates, doneF\n             obj.app.ws(url + 'control.ashx', function (ws, req) {\n                 getWebsocketArgs(ws, req, function (ws, req) {\n                     const domain = getDomain(req);\n+                    if (obj.CheckWebServerOriginName(domain, req) == false) {\n+                        try { ws.send(JSON.stringify({ action: 'close', cause: 'invalidorigin', msg: 'invalidorigin' })); } catch (ex) { }\n+                        try { ws.close(); } catch (ex) { }\n+                        return;\n+                    }\n                     if ((domain.loginkey != null) && (domain.loginkey.indexOf(req.query.key) == -1)) { ws.close(); return; } // Check 3FA URL key\n                     PerformWSSessionAuth(ws, req, true, function (ws1, req1, domain, user, cookie, authData) {\n                         if (user == null) { // User is not authenticated, perform inner server authentication"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "763f76b68ff3ef7c9c4e756f5b77636670f84e8f",
            "date": "2025-01-10T01:08:31Z",
            "author_login": "Ylianst"
          },
          {
            "sha": "1a02539f232bc6e3611756391e9c1d9f07d16217",
            "date": "2025-01-08T11:27:50Z",
            "author_login": "nmmclwhitehead"
          },
          {
            "sha": "90b71e924fc15624b3f252f5189d4e2b643f05bd",
            "date": "2025-01-07T16:52:19Z",
            "author_login": "si458"
          },
          {
            "sha": "73c18c4dd5771fa984dddb56240ffcc2a8b8979e",
            "date": "2025-01-07T16:35:13Z",
            "author_login": "si458"
          },
          {
            "sha": "def62075c742f80c5c96db6ddf5e1300998fd6ea",
            "date": "2025-01-06T16:02:10Z",
            "author_login": "si458"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-346",
    "description": "MeshCentral is a full computer management web site. Versions prior to 1.1.21 a cross-site websocket hijacking (CSWSH) vulnerability within the control.ashx endpoint. This component is the primary mechanism used within MeshCentral to perform administrative actions on the server. The vulnerability is exploitable when an attacker is able to convince a victim end-user to click on a malicious link to a page hosting an attacker-controlled site. The attacker can then originate a cross-site websocket connection using client-side JavaScript code to connect to `control.ashx` as the victim user within MeshCentral. Version 1.1.21 contains a patch for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-02-20T20:15:08.560",
    "last_modified": "2024-11-21T09:02:00.410",
    "fix_date": "2024-02-17T19:22:38Z"
  },
  "references": [
    {
      "url": "https://github.com/Ylianst/MeshCentral/commit/f2e43cc6da9f5447dbff0948e6c6024c8a315af3",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Ylianst/MeshCentral/security/advisories/GHSA-cp68-qrhr-g9h8",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Ylianst/MeshCentral/commit/f2e43cc6da9f5447dbff0948e6c6024c8a315af3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/Ylianst/MeshCentral/security/advisories/GHSA-cp68-qrhr-g9h8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:28.138817",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "MeshCentral",
    "owner": "Ylianst",
    "created_at": "2017-08-28T16:21:11Z",
    "updated_at": "2025-01-14T11:01:45Z",
    "pushed_at": "2025-01-10T01:09:46Z",
    "size": 1595581,
    "stars": 4488,
    "forks": 596,
    "open_issues": 800,
    "watchers": 4488,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "HTML": 8650169,
      "JavaScript": 8085901,
      "Handlebars": 4061927,
      "CSS": 171891,
      "Shell": 15310,
      "Dockerfile": 3916,
      "Batchfile": 2124,
      "Makefile": 1331
    },
    "commit_activity": {
      "total_commits_last_year": 469,
      "avg_commits_per_week": 9.01923076923077,
      "days_active_last_year": 183
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:21:44.528374"
  }
}