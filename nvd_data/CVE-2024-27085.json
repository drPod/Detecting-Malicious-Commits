{
  "cve_id": "CVE-2024-27085",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "62ea382247c1f87361d186392c45ca74c83be295",
    "related_commits": [
      "62ea382247c1f87361d186392c45ca74c83be295",
      "62ea382247c1f87361d186392c45ca74c83be295"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/62ea382247c1f87361d186392c45ca74c83be295.patch",
    "fix_commit_details": {
      "sha": "62ea382247c1f87361d186392c45ca74c83be295",
      "commit_date": "2024-02-19T21:34:40Z",
      "author": {
        "login": "pmusaraj",
        "type": "User",
        "stats": {
          "total_commits": 1253,
          "average_weekly_commits": 1.8080808080808082,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 288
        }
      },
      "commit_message": {
        "title": "SECURITY: Limit invites params length",
        "length": 37,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 58,
        "additions": 56,
        "deletions": 2
      },
      "files": [
        {
          "filename": "app/models/invite.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -32,8 +32,9 @@ class ValidationFailed < StandardError\n   has_many :topics, through: :topic_invites, source: :topic\n \n   validates_presence_of :invited_by_id\n-  validates :email, email: true, allow_blank: true\n+  validates :email, email: true, allow_blank: true, length: { maximum: 500 }\n   validates :custom_message, length: { maximum: 1000 }\n+  validates :domain, length: { maximum: 500 }\n   validate :ensure_max_redemptions_allowed\n   validate :valid_redemption_count\n   validate :valid_domain, if: :will_save_change_to_domain?\n@@ -350,7 +351,7 @@ def valid_domain\n     self.domain.downcase!\n \n     if self.domain !~ Invite::DOMAIN_REGEX\n-      self.errors.add(:base, I18n.t(\"invite.domain_not_allowed\"))\n+      self.errors.add(:base, I18n.t(\"invite.domain_not_allowed_admin\"))\n     end\n   end\n "
        },
        {
          "filename": "config/locales/server.en.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -342,6 +342,7 @@ en:\n     requires_groups: \"Invite was not saved because the specified topic is inaccessible. Add one of the following groups: %{groups}.\"\n     max_invite_emails_limit_exceeded: \"Request failed because number of emails exceeded the maximum (%{max}).\"\n     domain_not_allowed: \"Your email cannot be used to redeem this invite.\"\n+    domain_not_allowed_admin: \"This domain cannot be used for invites.\"\n     max_redemptions_allowed_one: \"for email invites should be 1.\"\n     redemption_count_less_than_max: \"should be less than %{max_redemptions_allowed}.\"\n     email_xor_domain: \"Email and domain fields are not allowed at the same time\""
        },
        {
          "filename": "spec/requests/invites_controller_spec.rb",
          "status": "modified",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -433,6 +433,18 @@\n         end\n       end\n \n+      context \"when email address is too long\" do\n+        let(:email) { \"a\" * 495 + \"@example.com\" }\n+\n+        it \"fails\" do\n+          create_invite\n+          expect(response).to have_http_status :unprocessable_entity\n+          expect(response.parsed_body[\"errors\"]).to be_present\n+          error_message = response.parsed_body[\"errors\"].first\n+          expect(error_message).to eq(\"Email is too long (maximum is 500 characters)\")\n+        end\n+      end\n+\n       context \"when providing an email belonging to an existing user\" do\n         let(:email) { user.email }\n \n@@ -460,6 +472,46 @@\n       end\n     end\n \n+    context \"with domain invite\" do\n+      it \"works\" do\n+        sign_in(admin)\n+\n+        post \"/invites.json\", params: { domain: \"example.com\" }\n+        expect(response).to have_http_status :ok\n+      end\n+\n+      it \"fails when domain is invalid\" do\n+        sign_in(admin)\n+\n+        post \"/invites.json\", params: { domain: \"example\" }\n+\n+        expect(response).to have_http_status :unprocessable_entity\n+\n+        error_message = response.parsed_body[\"errors\"].first\n+        expect(error_message).to eq(I18n.t(\"invite.domain_not_allowed_admin\"))\n+      end\n+\n+      it \"fails when domain is too long\" do\n+        sign_in(admin)\n+\n+        post \"/invites.json\", params: { domain: \"a\" * 500 + \".ca\" }\n+        expect(response).to have_http_status :unprocessable_entity\n+\n+        error_message = response.parsed_body[\"errors\"].first\n+        expect(error_message).to eq(\"Domain is too long (maximum is 500 characters)\")\n+      end\n+\n+      it \"fails when custom message is too long\" do\n+        sign_in(admin)\n+\n+        post \"/invites.json\", params: { custom_message: \"b\" * 1001, domain: \"example.com\" }\n+        expect(response).to have_http_status :unprocessable_entity\n+\n+        error_message = response.parsed_body[\"errors\"].first\n+        expect(error_message).to eq(\"Custom message is too long (maximum is 1000 characters)\")\n+      end\n+    end\n+\n     context \"with link invite\" do\n       it \"works\" do\n         sign_in(admin)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "f8c493f3c4ee5e38dff460288996c780a6458e29",
            "date": "2025-01-14T12:47:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6cb8b576d0c7902b99cbb39bc7aaa473d454118a",
            "date": "2025-01-14T12:46:14Z",
            "author_login": "CvX"
          },
          {
            "sha": "12c412acc699ac47bd98c999a483ced96888f799",
            "date": "2025-01-14T12:35:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Discourse is an open source platform for community discussion. In affected versions users that are allowed to invite others can inject arbitrarily large data in parameters used in the invite route. The problem has been patched in the latest version of Discourse. Users are advised to upgrade. Users unable to upgrade should disable invites or restrict access to them using the `invite allowed groups` site setting. ",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-15T20:15:08.277",
    "last_modified": "2024-11-21T09:03:49.710",
    "fix_date": "2024-02-19T21:34:40Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/62ea382247c1f87361d186392c45ca74c83be295",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-cvp5-h7p8-mjj6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/commit/62ea382247c1f87361d186392c45ca74c83be295",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-cvp5-h7p8-mjj6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.500424",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}