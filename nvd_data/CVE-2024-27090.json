{
  "cve_id": "CVE-2024-27090",
  "github_data": {
    "repository": "decidim/decidim",
    "fix_commit": "1756fa639ef393ca8e8bb16221cab2e2e7875705",
    "related_commits": [
      "1756fa639ef393ca8e8bb16221cab2e2e7875705",
      "1756fa639ef393ca8e8bb16221cab2e2e7875705"
    ],
    "patch_url": "https://github.com/decidim/decidim/commit/1756fa639ef393ca8e8bb16221cab2e2e7875705.patch",
    "fix_commit_details": {
      "sha": "1756fa639ef393ca8e8bb16221cab2e2e7875705",
      "commit_date": "2024-03-29T22:50:02Z",
      "author": {
        "login": "andreslucena",
        "type": "User",
        "stats": {
          "total_commits": 911,
          "average_weekly_commits": 2.0704545454545453,
          "total_additions": 247043,
          "total_deletions": 374286,
          "weeks_active": 216
        }
      },
      "commit_message": {
        "title": "Fix embeds for resources and spaces that shouldn't be embedded (#12528)",
        "length": 1756,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 856,
        "additions": 799,
        "deletions": 57
      },
      "files": [
        {
          "filename": "decidim-assemblies/app/controllers/decidim/assemblies/widgets_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -5,10 +5,16 @@ module Assemblies\n     class WidgetsController < Decidim::WidgetsController\n       helper Decidim::SanitizeHelper\n \n+      def show\n+        enforce_permission_to :embed, :participatory_space, current_participatory_space: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= Assembly.find_by(slug: params[:assembly_slug])\n+        @model ||= Assembly.where(organization: current_organization).public_spaces.find_by(slug: params[:assembly_slug])\n       end\n \n       def current_participatory_space\n@@ -18,6 +24,10 @@ def current_participatory_space\n       def iframe_url\n         @iframe_url ||= assembly_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        ::Decidim.permissions_registry.chain_for(::Decidim::Assemblies::ApplicationController)\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-assemblies/app/permissions/decidim/assemblies/permissions.rb",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@ def permissions\n         if permission_action.scope == :public\n           public_list_assemblies_action?\n           public_read_assembly_action?\n+          public_embed_assembly_action?\n           public_list_members_action?\n           return permission_action\n         end\n@@ -136,6 +137,17 @@ def public_list_members_action?\n         allow!\n       end\n \n+      def public_embed_assembly_action?\n+        return unless permission_action.action == :embed &&\n+                      [:assembly, :participatory_space].include?(permission_action.subject) &&\n+                      assembly\n+\n+        return disallow! unless assembly.published?\n+        return disallow! if assembly.private_space && !assembly.is_transparent?\n+\n+        allow!\n+      end\n+\n       # All users with a relation to a assembly and organization admins can enter\n       # the space area. The sapce area is considered to be the assemblies zone,\n       # not the assembly groups one."
        },
        {
          "filename": "decidim-assemblies/spec/permissions/decidim/assemblies/permissions_spec.rb",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -127,6 +127,36 @@\n       end\n     end\n \n+    context \"when embedding an assembly\" do\n+      let(:action) do\n+        { scope: :public, action: :embed, subject: :assembly }\n+      end\n+      let(:context) { { assembly: assembly } }\n+\n+      context \"when the assembly is published\" do\n+        let(:user) { create(:user, organization: organization) }\n+\n+        it { is_expected.to be true }\n+      end\n+\n+      context \"when the assembly is not published\" do\n+        let(:user) { create(:user, organization: organization) }\n+        let(:assembly) { create(:assembly, :unpublished, organization: organization) }\n+\n+        context \"when the user doesn't have access to it\" do\n+          it { is_expected.to be false }\n+        end\n+\n+        context \"when the user has access to it\" do\n+          before do\n+            create(:assembly_user_role, user: user, assembly: assembly)\n+          end\n+\n+          it { is_expected.to be false }\n+        end\n+      end\n+    end\n+\n     context \"when listing assemblies\" do\n       let(:action) do\n         { scope: :public, action: :list, subject: :assembly }"
        },
        {
          "filename": "decidim-assemblies/spec/system/assembly_embeds_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -4,6 +4,9 @@\n \n describe \"Assembly embeds\", type: :system do\n   let(:resource) { create(:assembly) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(resource).assembly_widget_path }\n \n   it_behaves_like \"an embed resource\", skip_space_checks: true\n+  it_behaves_like \"a private embed resource\"\n+  it_behaves_like \"a transparent private embed resource\"\n end"
        },
        {
          "filename": "decidim-conferences/app/controllers/decidim/conferences/conference_widgets_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -5,10 +5,16 @@ module Conferences\n     class ConferenceWidgetsController < Decidim::WidgetsController\n       helper Decidim::SanitizeHelper\n \n+      def show\n+        enforce_permission_to :embed, :conference, conference: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= Conference.find_by(slug: params[:conference_slug])\n+        @model ||= Conference.where(organization: current_organization).published.find_by(slug: params[:conference_slug])\n       end\n \n       def current_participatory_space\n@@ -18,6 +24,10 @@ def current_participatory_space\n       def iframe_url\n         @iframe_url ||= conference_conference_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        ::Decidim.permissions_registry.chain_for(::Decidim::Conferences::ApplicationController)\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-conferences/app/permissions/decidim/conferences/permissions.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -16,6 +16,7 @@ def permissions\n         if permission_action.scope == :public\n           public_list_conferences_action?\n           public_read_conference_action?\n+          public_embed_conference_action?\n           public_list_speakers_action?\n           public_list_program_action?\n           public_list_media_links_action?\n@@ -131,6 +132,16 @@ def public_read_conference_action?\n         toggle_allow(can_manage_conference?)\n       end\n \n+      def public_embed_conference_action?\n+        return unless permission_action.action == :embed &&\n+                      [:conference, :participatory_space].include?(permission_action.subject) &&\n+                      conference\n+\n+        return disallow! unless conference.published?\n+\n+        allow!\n+      end\n+\n       def public_list_speakers_action?\n         return unless permission_action.action == :list &&\n                       permission_action.subject == :speakers"
        },
        {
          "filename": "decidim-conferences/spec/permissions/decidim/conferences/permissions_spec.rb",
          "status": "modified",
          "additions": 36,
          "deletions": 0,
          "patch": "@@ -125,6 +125,42 @@\n       end\n     end\n \n+    context \"when embedding a conference\" do\n+      let(:action) do\n+        { scope: :public, action: :embed, subject: :conference }\n+      end\n+      let(:context) { { conference: conference } }\n+\n+      context \"when the user is an admin\" do\n+        let(:user) { create :user, :admin }\n+\n+        it { is_expected.to be true }\n+      end\n+\n+      context \"when the conference is published\" do\n+        let(:user) { create :user, organization: organization }\n+\n+        it { is_expected.to be true }\n+      end\n+\n+      context \"when the conference is not published\" do\n+        let(:user) { create :user, organization: organization }\n+        let(:conference) { create :conference, :unpublished, organization: organization }\n+\n+        context \"when the user doesn't have access to it\" do\n+          it { is_expected.to be false }\n+        end\n+\n+        context \"when the user has access to it\" do\n+          before do\n+            create :conference_user_role, user: user, conference: conference\n+          end\n+\n+          it { is_expected.to be false }\n+        end\n+      end\n+    end\n+\n     context \"when listing conferences\" do\n       let(:action) do\n         { scope: :public, action: :list, subject: :conference }"
        },
        {
          "filename": "decidim-conferences/spec/system/conference_embeds_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 13,
          "patch": "@@ -3,18 +3,8 @@\n require \"spec_helper\"\n \n describe \"Conference embeds\", type: :system do\n-  let!(:conference) { create(:conference) }\n+  let!(:resource) { create(:conference) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(resource).conference_conference_widget_path }\n \n-  context \"when visiting the embed page for an conference\" do\n-    before do\n-      switch_to_host(conference.organization.host)\n-      visit resource_locator(conference).path\n-      visit \"#{current_path}/embed\"\n-    end\n-\n-    it \"renders the page correctly\" do\n-      expect(page).to have_i18n_content(conference.title)\n-      expect(page).to have_content(conference.organization.name)\n-    end\n-  end\n+  it_behaves_like \"an embed resource\", skip_space_checks: true, skip_link_checks: true\n end"
        },
        {
          "filename": "decidim-consultations/app/controllers/decidim/consultations/consultation_widgets_controller.rb",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -4,13 +4,20 @@ module Decidim\n   module Consultations\n     class ConsultationWidgetsController < Decidim::WidgetsController\n       helper Decidim::SanitizeHelper\n+      helper ConsultationsHelper\n \n       layout false\n \n+      def show\n+        enforce_permission_to :embed, :participatory_space, current_participatory_space: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= Consultation.find_by(slug: params[:consultation_slug])\n+        @model ||= Consultation.where(organization: current_organization).published.find_by(slug: params[:consultation_slug])\n       end\n \n       def current_participatory_space\n@@ -20,6 +27,10 @@ def current_participatory_space\n       def iframe_url\n         @iframe_url ||= consultation_consultation_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        ::Decidim.permissions_registry.chain_for(::Decidim::Consultations::ApplicationController)\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-consultations/app/controllers/decidim/consultations/question_widgets_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -8,10 +8,16 @@ class QuestionWidgetsController < Decidim::WidgetsController\n \n       helper Decidim::SanitizeHelper\n \n+      def show\n+        enforce_permission_to :embed, :question, question: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= current_question\n+        @model ||= current_question if current_question.published?\n       end\n \n       def current_participatory_space\n@@ -21,6 +27,10 @@ def current_participatory_space\n       def iframe_url\n         @iframe_url ||= question_question_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        ::Decidim.permissions_registry.chain_for(::Decidim::Consultations::ApplicationController)\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-consultations/app/permissions/decidim/consultations/permissions.rb",
          "status": "modified",
          "additions": 21,
          "deletions": 1,
          "patch": "@@ -5,6 +5,8 @@ module Consultations\n     class Permissions < Decidim::DefaultPermissions\n       def permissions\n         allowed_public_anonymous_action?\n+        allowed_public_embed_consultation_action?\n+        allowed_public_embed_question_action?\n \n         return permission_action unless user\n \n@@ -22,7 +24,7 @@ def question\n       end\n \n       def consultation\n-        @consultation ||= context.fetch(:consultation, nil)\n+        @consultation ||= context.fetch(:current_participatory_space, nil) || context.fetch(:consultation, nil)\n       end\n \n       def authorized?(permission_action, resource: nil)\n@@ -45,6 +47,24 @@ def allowed_public_anonymous_action?\n         end\n       end\n \n+      def allowed_public_embed_consultation_action?\n+        return unless permission_action.action == :embed &&\n+                      [:consultation, :participatory_space].include?(permission_action.subject) &&\n+                      consultation\n+\n+        return disallow! unless consultation.published?\n+\n+        allow!\n+      end\n+\n+      def allowed_public_embed_question_action?\n+        return unless permission_action.action == :embed && permission_action.subject == :question && question\n+\n+        return disallow! unless question.published?\n+\n+        allow!\n+      end\n+\n       def allowed_public_action?\n         return unless permission_action.scope == :public\n         return unless permission_action.subject == :question"
        },
        {
          "filename": "decidim-consultations/app/views/decidim/consultations/consultation_widgets/show.html.erb",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,3 +1,6 @@\n+<p><%= translated_attribute(model.title) %></p>\n+<p><%= current_organization.name %></p>\n+\n <%= render partial: \"decidim/consultations/consultations/consultation_details\", locals: { consultation: model } %>\n <%= render partial: \"decidim/consultations/consultations/highlighted_questions\", locals: { consultation: model } %>\n <%= render partial: \"decidim/consultations/consultations/regular_questions\", locals: { consultation: model } %>"
        },
        {
          "filename": "decidim-consultations/spec/permissions/decidim/consultations/permissions_spec.rb",
          "status": "modified",
          "additions": 54,
          "deletions": 0,
          "patch": "@@ -52,6 +52,33 @@\n       end\n     end\n \n+    context \"when embedding a consultation\" do\n+      let(:action_name) { :embed }\n+      let(:action_subject) { :consultation }\n+\n+      context \"when the consultation is published\" do\n+        let(:consultation) { create :consultation, :published }\n+\n+        it { is_expected.to be true }\n+      end\n+\n+      context \"when the consultation is not published\" do\n+        let(:consultation) { create :consultation, :unpublished }\n+\n+        context \"when the user is not an admin\" do\n+          let(:user) { nil }\n+\n+          it { is_expected.to be false }\n+        end\n+\n+        context \"when the user is an admin\" do\n+          let(:user) { create :user, :admin, organization: organization }\n+\n+          it { is_expected.to be false }\n+        end\n+      end\n+    end\n+\n     context \"when reading a question\" do\n       let(:action_subject) { :question }\n \n@@ -78,6 +105,33 @@\n       end\n     end\n \n+    context \"when embedding a question\" do\n+      let(:action_name) { :embed }\n+      let(:action_subject) { :question }\n+\n+      context \"when the question is published\" do\n+        let(:question) { create :question, :published, consultation: consultation }\n+\n+        it { is_expected.to be true }\n+      end\n+\n+      context \"when the question is not published\" do\n+        let(:question) { create :question, :unpublished, consultation: consultation }\n+\n+        context \"when the user is not an admin\" do\n+          let(:user) { nil }\n+\n+          it { is_expected.to be false }\n+        end\n+\n+        context \"when the user is an admin\" do\n+          let(:user) { create :user, :admin, organization: organization }\n+\n+          it { is_expected.to be false }\n+        end\n+      end\n+    end\n+\n     context \"when voting a question\" do\n       let(:action_subject) { :question }\n       let(:action_name) { :vote }"
        },
        {
          "filename": "decidim-consultations/spec/system/consultation_embeds_spec.rb",
          "status": "added",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -0,0 +1,10 @@\n+# frozen_string_literal: true\n+\n+require \"spec_helper\"\n+\n+describe \"Consultation embeds\", type: :system do\n+  let(:resource) { create(:consultation) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(resource).consultation_consultation_widget_path }\n+\n+  it_behaves_like \"an embed resource\", skip_space_checks: true, skip_link_checks: true\n+end"
        },
        {
          "filename": "decidim-consultations/spec/system/question_embeds_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 12,
          "patch": "@@ -3,17 +3,8 @@\n require \"spec_helper\"\n \n describe \"Question embeds\", type: :system do\n-  let(:question) { create(:question) }\n+  let(:resource) { create(:question) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(resource).question_question_widget_path }\n \n-  context \"when visiting the embed page for a question\" do\n-    before do\n-      switch_to_host(question.organization.host)\n-      visit \"#{decidim_consultations.question_path(question)}/embed\"\n-    end\n-\n-    it \"renders the page correctly\" do\n-      expect(page).to have_i18n_content(question.title)\n-      expect(page).to have_content(question.organization.name)\n-    end\n-  end\n+  it_behaves_like \"an embed resource\", skip_space_checks: true, skip_link_checks: true\n end"
        },
        {
          "filename": "decidim-core/app/controllers/decidim/widgets_controller.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -11,6 +11,8 @@ class WidgetsController < Decidim::ApplicationController\n     helper_method :model, :iframe_url, :current_participatory_space\n \n     def show\n+      raise ActionController::RoutingError, \"Not Found\" if model.nil?\n+\n       respond_to do |format|\n         format.js { render \"decidim/widgets/show\" }\n         format.html\n@@ -19,6 +21,10 @@ def show\n \n     private\n \n+    def current_component\n+      @current_component ||= request.env[\"decidim.current_component\"]\n+    end\n+\n     def current_participatory_space\n       @current_participatory_space ||= model.component.participatory_space\n     end"
        },
        {
          "filename": "decidim-core/lib/decidim/core/test/shared_examples/embed_resource_examples.rb",
          "status": "modified",
          "additions": 187,
          "deletions": 11,
          "patch": "@@ -1,5 +1,50 @@\n # frozen_string_literal: true\n \n+require \"decidim/admin/test/admin_participatory_space_access_examples\"\n+\n+shared_examples \"rendering the embed page correctly\" do\n+  before do\n+    visit widget_path\n+  end\n+\n+  it \"renders\" do\n+    if resource.title.is_a?(Hash)\n+      expect(page).to have_i18n_content(resource.title)\n+    else\n+      expect(page).to have_content(resource.title)\n+    end\n+\n+    expect(page).to have_content(organization.name)\n+  end\n+end\n+\n+shared_examples \"rendering the embed link in the resource page\" do\n+  before do\n+    visit resource_locator(resource).path\n+  end\n+\n+  it \"has the embed link\" do\n+    expect(page).to have_button(\"Embed\")\n+  end\n+end\n+\n+shared_examples \"showing the unauthorized message in the widget_path\" do\n+  it do\n+    visit widget_path\n+    expect(page).to have_content \"You are not authorized to perform this action\"\n+  end\n+end\n+\n+shared_examples \"not rendering the embed link in the resource page\" do\n+  before do\n+    visit resource_locator(resource).path\n+  end\n+\n+  it \"does not have the embed link\" do\n+    expect(page).to have_no_button(\"Embed\")\n+  end\n+end\n+\n shared_examples_for \"an embed resource\" do |options|\n   if options.is_a?(Hash) && options[:skip_space_checks]\n     let(:organization) { resource.organization }\n@@ -11,22 +56,29 @@\n     include_context \"with a component\"\n   end\n \n-  context \"when visiting the embed page for a resource\" do\n-    before do\n-      visit resource_locator(resource).path\n-      visit \"#{current_path}/embed\"\n-    end\n+  unless options.is_a?(Hash) && options[:skip_publication_checks]\n+    context \"when the resource is not published\" do\n+      before do\n+        resource.unpublish!\n+      end\n+\n+      it_behaves_like \"not rendering the embed link in the resource page\"\n \n-    it \"renders the page correctly\" do\n-      if resource.title.is_a?(Hash)\n-        expect(page).to have_i18n_content(resource.title)\n-      else\n-        expect(page).to have_content(resource.title)\n+      it_behaves_like \"a 404 page\" do\n+        let(:target_path) { widget_path }\n       end\n+    end\n+  end\n+\n+  it_behaves_like \"rendering the embed link in the resource page\" unless options.is_a?(Hash) && options[:skip_link_checks]\n \n-      expect(page).to have_content(organization.name)\n+  context \"when visiting the embed page for a resource\" do\n+    before do\n+      visit widget_path\n     end\n \n+    it_behaves_like \"rendering the embed page correctly\"\n+\n     unless options.is_a?(Hash) && options[:skip_space_checks]\n       context \"when the participatory_space is a process\" do\n         it \"shows the process name\" do\n@@ -47,3 +99,127 @@\n     end\n   end\n end\n+\n+shared_examples_for \"a private embed resource\" do\n+  let(:organization) { resource.organization }\n+  let!(:other_user) { create(:user, :confirmed, organization: organization) }\n+  let!(:participatory_space_private_user) { create(:participatory_space_private_user, user: other_user, privatable_to: resource) }\n+\n+  before do\n+    switch_to_host(organization.host)\n+  end\n+\n+  context \"when the resource is private\" do\n+    before do\n+      resource.update!(private_space: true)\n+      resource.update!(is_transparent: false) if resource.respond_to?(:is_transparent)\n+    end\n+\n+    context \"and user is a visitor\" do\n+      let(:user) { nil }\n+\n+      it_behaves_like \"not rendering the embed link in the resource page\"\n+\n+      it_behaves_like \"a 404 page\" do\n+        let(:target_path) { widget_path }\n+      end\n+    end\n+\n+    context \"and user is a registered user\" do\n+      let(:user) { create(:user, :confirmed, organization: organization) }\n+\n+      before do\n+        sign_in user, scope: :user\n+      end\n+\n+      it_behaves_like \"not rendering the embed link in the resource page\"\n+\n+      it_behaves_like \"a 404 page\" do\n+        let(:target_path) { widget_path }\n+      end\n+    end\n+\n+    context \"and user is a private user\" do\n+      let(:user) { other_user }\n+\n+      before do\n+        sign_in user, scope: :user\n+      end\n+\n+      it_behaves_like \"a 404 page\" do\n+        let(:target_path) { widget_path }\n+      end\n+    end\n+  end\n+end\n+\n+shared_examples_for \"a transparent private embed resource\" do\n+  let(:organization) { resource.organization }\n+  let!(:other_user) { create(:user, :confirmed, organization: organization) }\n+  let!(:participatory_space_private_user) { create(:participatory_space_private_user, user: other_user, privatable_to: resource) }\n+\n+  before do\n+    switch_to_host(organization.host)\n+  end\n+\n+  context \"when the resource is private\" do\n+    before do\n+      resource.update!(private_space: true)\n+      resource.update!(is_transparent: true) if resource.respond_to?(:is_transparent)\n+    end\n+\n+    context \"and user is a visitor\" do\n+      let(:user) { nil }\n+\n+      it_behaves_like \"rendering the embed page correctly\"\n+    end\n+\n+    context \"and user is a registered user\" do\n+      let(:user) { create(:user, :confirmed, organization: organization) }\n+\n+      before do\n+        sign_in user, scope: :user\n+      end\n+\n+      it_behaves_like \"rendering the embed page correctly\"\n+    end\n+\n+    context \"and user is a private user\" do\n+      let(:user) { other_user }\n+\n+      before do\n+        sign_in user, scope: :user\n+      end\n+\n+      it_behaves_like \"rendering the embed page correctly\"\n+    end\n+  end\n+end\n+\n+shared_examples_for \"a moderated embed resource\" do\n+  include_context \"with a component\"\n+\n+  context \"when the resource is moderated\" do\n+    let!(:moderation) { create(:moderation, reportable: resource, hidden_at: 2.days.ago) }\n+\n+    it_behaves_like \"a 404 page\" do\n+      let(:target_path) { widget_path }\n+    end\n+  end\n+end\n+\n+shared_examples_for \"a withdrawn embed resource\" do\n+  include_context \"with a component\"\n+\n+  context \"when the resource is withdrawn\" do\n+    before do\n+      resource.update!(state: \"withdrawn\")\n+    end\n+\n+    it_behaves_like \"not rendering the embed link in the resource page\"\n+\n+    it_behaves_like \"a 404 page\" do\n+      let(:target_path) { widget_path }\n+    end\n+  end\n+end"
        },
        {
          "filename": "decidim-debates/app/controllers/decidim/debates/widgets_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -5,15 +5,25 @@ module Debates\n     class WidgetsController < Decidim::WidgetsController\n       helper Debates::ApplicationHelper\n \n+      def show\n+        enforce_permission_to :embed, :debate, debate: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= Debate.where(component: params[:component_id]).find(params[:debate_id])\n+        @model ||= Debate.not_hidden.where(component: current_component).find(params[:debate_id])\n       end\n \n       def iframe_url\n         @iframe_url ||= debate_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        [Decidim::Debates::Permissions]\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-debates/app/permissions/decidim/debates/permissions.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -21,6 +21,8 @@ def permissions\n           can_endorse_debate?\n         when :close\n           can_close_debate?\n+        when :embed\n+          can_embed_debate?\n         end\n \n         permission_action\n@@ -45,6 +47,10 @@ def can_close_debate?\n         disallow!\n       end\n \n+      def can_embed_debate?\n+        allow!\n+      end\n+\n       def can_endorse_debate?\n         return disallow! if debate.closed?\n "
        },
        {
          "filename": "decidim-debates/spec/permissions/decidim/debates/permissions_spec.rb",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -106,4 +106,18 @@\n       it { is_expected.to be false }\n     end\n   end\n+\n+  context \"when embedding a debate\" do\n+    let(:action) do\n+      { scope: :public, action: :embed, subject: :debate }\n+    end\n+\n+    it { is_expected.to be true }\n+\n+    context \"when the debate is closed\" do\n+      let(:debate) { create :debate, :closed, component: debates_component }\n+\n+      it { is_expected.to be true }\n+    end\n+  end\n end"
        },
        {
          "filename": "decidim-debates/spec/system/debate_embeds_spec.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -4,8 +4,11 @@\n \n describe \"Debate embeds\", type: :system do\n   include_context \"with a component\"\n+\n   let(:manifest_name) { \"debates\" }\n   let!(:resource) { create(:debate, component: component, skip_injection: true) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(component).debate_widget_path(resource) }\n \n-  it_behaves_like \"an embed resource\"\n+  it_behaves_like \"an embed resource\", skip_publication_checks: true\n+  it_behaves_like \"a moderated embed resource\"\n end"
        },
        {
          "filename": "decidim-initiatives/app/controllers/decidim/initiatives/widgets_controller.rb",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -12,10 +12,20 @@ class WidgetsController < Decidim::WidgetsController\n \n       include NeedsInitiative\n \n+      def show\n+        enforce_permission_to :embed, :participatory_space, current_participatory_space: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= current_initiative\n+        @model ||= if current_initiative.created? || current_initiative.validating? || current_initiative.discarded?\n+                     nil\n+                   else\n+                     current_initiative\n+                   end\n       end\n \n       def current_participatory_space\n@@ -25,6 +35,10 @@ def current_participatory_space\n       def iframe_url\n         @iframe_url ||= initiative_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        ::Decidim.permissions_registry.chain_for(::Decidim::Initiatives::ApplicationController)\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-initiatives/app/permissions/decidim/initiatives/permissions.rb",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@ def permissions\n         # Non-logged users permissions\n         list_public_initiatives?\n         read_public_initiative?\n+        embed_public_initiative?\n         search_initiative_types_and_scopes?\n         request_membership?\n \n@@ -57,6 +58,15 @@ def read_public_initiative?\n         disallow!\n       end\n \n+      def embed_public_initiative?\n+        return unless [:initiative, :participatory_space].include?(permission_action.subject) &&\n+                      permission_action.action == :embed\n+\n+        return disallow! if initiative.created? || initiative.validating? || initiative.discarded?\n+\n+        allow!\n+      end\n+\n       def search_initiative_types_and_scopes?\n         return unless permission_action.action == :search\n         return unless [:initiative_type, :initiative_type_scope, :initiative_type_signature_types].include?(permission_action.subject)"
        },
        {
          "filename": "decidim-initiatives/app/views/decidim/initiatives/initiatives/show.html.erb",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -65,7 +65,9 @@ edit_link(\n       </div>\n     <% end %>\n     <%= render partial: \"decidim/shared/share_modal\" %>\n-    <%= embed_modal_for initiative_widget_url(current_initiative, format: :js) %>\n+    <% if allowed_to? :embed, :initiative, initiative: current_initiative %>\n+      <%= embed_modal_for initiative_widget_url(current_initiative, format: :js) %>\n+    <% end %>\n     <%= resource_reference(current_initiative) %>\n     <%= resource_version(current_initiative, versions_path: initiative_versions_path(current_initiative)) %>\n   </div>"
        },
        {
          "filename": "decidim-initiatives/spec/permissions/decidim/initiatives/permissions_spec.rb",
          "status": "modified",
          "additions": 70,
          "deletions": 0,
          "patch": "@@ -149,6 +149,76 @@\n     end\n   end\n \n+  context \"when emeding an initiative\" do\n+    let(:initiative) { create(:initiative, :accepted, organization: organization) }\n+    let(:action) do\n+      { scope: :public, action: :embed, subject: :initiative }\n+    end\n+    let(:context) do\n+      { initiative: initiative }\n+    end\n+\n+    context \"when initiative is created\" do\n+      let(:initiative) { create(:initiative, :created, organization: organization) }\n+\n+      it { is_expected.to be false }\n+    end\n+\n+    context \"when initiative is validating\" do\n+      let(:initiative) { create(:initiative, :validating, organization: organization) }\n+\n+      it { is_expected.to be false }\n+    end\n+\n+    context \"when initiative is discarded\" do\n+      let(:initiative) { create(:initiative, :discarded, organization: organization) }\n+\n+      it { is_expected.to be false }\n+    end\n+\n+    context \"when initiative is published\" do\n+      let(:initiative) { create(:initiative, :published, organization: organization) }\n+\n+      it { is_expected.to be true }\n+    end\n+\n+    context \"when initiative is rejected\" do\n+      let(:initiative) { create(:initiative, :rejected, organization: organization) }\n+\n+      it { is_expected.to be true }\n+    end\n+\n+    context \"when initiative is accepted\" do\n+      let(:initiative) { create(:initiative, :accepted, organization: organization) }\n+\n+      it { is_expected.to be true }\n+    end\n+\n+    context \"when user is admin\" do\n+      let(:user) { create(:user, :admin, organization: organization) }\n+\n+      it { is_expected.to be true }\n+    end\n+\n+    context \"when user is author of the initiative\" do\n+      let(:initiative) { create(:initiative, author: user, organization: organization) }\n+\n+      it { is_expected.to be true }\n+    end\n+\n+    context \"when user is committee member of the initiative\" do\n+      before do\n+        create(:initiatives_committee_member, initiative: initiative, user: user)\n+      end\n+\n+      it { is_expected.to be true }\n+    end\n+\n+    context \"when any other condition\" do\n+      it { is_expected.to be true }\n+    end\n+  end\n+\n   context \"when listing committee members of the initiative as author\" do\n     let(:initiative) { create(:initiative, organization: organization, author: user) }\n     let(:action) do"
        },
        {
          "filename": "decidim-initiatives/spec/system/initiative_embeds_spec.rb",
          "status": "modified",
          "additions": 64,
          "deletions": 2,
          "patch": "@@ -3,7 +3,69 @@\n require \"spec_helper\"\n \n describe \"Initiative embeds\", type: :system do\n-  let(:resource) { create(:initiative) }\n+  let(:state) { :published }\n+  let(:resource) { create(:initiative, state: state) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(resource).initiative_widget_path }\n \n-  it_behaves_like \"an embed resource\", skip_space_checks: true\n+  it_behaves_like \"an embed resource\", skip_space_checks: true, skip_publication_checks: true\n+\n+  context \"when the user is the initiative author\" do\n+    let(:organization) { resource.organization }\n+    let(:user) { resource.author }\n+\n+    before do\n+      switch_to_host(organization.host)\n+    end\n+\n+    context \"when the state is created\" do\n+      let(:state) { :created }\n+\n+      it_behaves_like \"not rendering the embed link in the resource page\"\n+\n+      it_behaves_like \"a 404 page\" do\n+        let(:target_path) { widget_path }\n+      end\n+    end\n+\n+    context \"when the state is validating\" do\n+      let(:state) { :validating }\n+\n+      it_behaves_like \"not rendering the embed link in the resource page\"\n+\n+      it_behaves_like \"a 404 page\" do\n+        let(:target_path) { widget_path }\n+      end\n+    end\n+\n+    context \"when the state is discarded\" do\n+      let(:state) { :discarded }\n+\n+      # A discarded initiative is not available anymore to authors\n+\n+      it_behaves_like \"a 404 page\" do\n+        let(:target_path) { widget_path }\n+      end\n+    end\n+\n+    context \"when the state is published\" do\n+      let(:state) { :published }\n+\n+      it_behaves_like \"rendering the embed link in the resource page\"\n+      it_behaves_like \"rendering the embed page correctly\"\n+    end\n+\n+    context \"when the state is rejected\" do\n+      let(:state) { :rejected }\n+\n+      it_behaves_like \"rendering the embed link in the resource page\"\n+      it_behaves_like \"rendering the embed page correctly\"\n+    end\n+\n+    context \"when the state is accepted\" do\n+      let(:state) { :accepted }\n+\n+      it_behaves_like \"rendering the embed link in the resource page\"\n+      it_behaves_like \"rendering the embed page correctly\"\n+    end\n+  end\n end"
        },
        {
          "filename": "decidim-meetings/app/controllers/decidim/meetings/widgets_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -6,15 +6,25 @@ class WidgetsController < Decidim::WidgetsController\n       helper MeetingsHelper\n       helper Decidim::SanitizeHelper\n \n+      def show\n+        enforce_permission_to :embed, :meeting, meeting: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= Meeting.where(component: params[:component_id]).find(params[:meeting_id])\n+        @model ||= Meeting.except_withdrawn.published.not_hidden.where(component: current_component).find(params[:meeting_id])\n       end\n \n       def iframe_url\n         @iframe_url ||= meeting_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        [Decidim::Meetings::Permissions]\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-meetings/app/permissions/decidim/meetings/permissions.rb",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@ module Decidim\n   module Meetings\n     class Permissions < Decidim::DefaultPermissions\n       def permissions\n+        allow_embed_meeting?\n         return permission_action unless user\n \n         # Delegate the admin permission checks to the admin permissions class\n@@ -57,6 +58,15 @@ def question\n         @question ||= context.fetch(:question, nil)\n       end\n \n+      # As this is a public action, we need to run this before other checks\n+      def allow_embed_meeting?\n+        return unless permission_action.action == :embed && permission_action.subject == :meeting && meeting\n+        return disallow! if meeting.withdrawn?\n+        return allow! if meeting.published?\n+\n+        disallow!\n+      end\n+\n       def can_join_meeting?\n         meeting.can_be_joined_by?(user) &&\n           authorized?(:join, resource: meeting)"
        },
        {
          "filename": "decidim-meetings/app/views/decidim/meetings/meetings/show.html.erb",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -105,7 +105,9 @@ edit_link(\n     <%= resource_version(meeting, versions_path: meeting_versions_path(meeting)) %>\n     <%= cell \"decidim/meetings/cancel_registration_meeting_button\", meeting %>\n     <%= render partial: \"decidim/shared/share_modal\" %>\n-    <%= embed_modal_for meeting_widget_url(meeting, format: :js) %>\n+    <% if allowed_to? :embed, :meeting, meeting: @meeting %>\n+      <%= embed_modal_for meeting_widget_url(meeting, format: :js) %>\n+    <% end %>\n     <%= render partial: \"calendar_modal\", locals: { ics_url: calendar_meeting_url(meeting), google_url: google_calendar_event_url(meeting) } %>\n   </div>\n   <div class=\"columns mediumlarge-8 mediumlarge-pull-4\">"
        },
        {
          "filename": "decidim-meetings/spec/permissions/decidim/meetings/permissions_spec.rb",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -82,6 +82,28 @@\n     end\n   end\n \n+  context \"when embedding a meeting\" do\n+    let(:action) do\n+      { scope: :public, action: :embed, subject: :meeting }\n+    end\n+\n+    context \"when meeting isn't published\" do\n+      before do\n+        allow(meeting).to receive(:published?).and_return(false)\n+      end\n+\n+      it { is_expected.to be false }\n+    end\n+\n+    context \"when meeting is published\" do\n+      before do\n+        allow(meeting).to receive(:published?).and_return(true)\n+      end\n+\n+      it { is_expected.to be true }\n+    end\n+  end\n+\n   context \"when joining a meeting\" do\n     let(:action) do\n       { scope: :public, action: :join, subject: :meeting }"
        },
        {
          "filename": "decidim-meetings/spec/system/meeting_embeds_spec.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -4,9 +4,12 @@\n \n describe \"Meeting embeds\", type: :system do\n   include_context \"with a component\"\n-  let(:manifest_name) { \"meetings\" }\n \n+  let(:manifest_name) { \"meetings\" }\n   let!(:resource) { create(:meeting, :published, component: component) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(component).meeting_widget_path(resource) }\n \n   it_behaves_like \"an embed resource\"\n+  it_behaves_like \"a moderated embed resource\"\n+  it_behaves_like \"a withdrawn embed resource\"\n end"
        },
        {
          "filename": "decidim-participatory_processes/app/controllers/decidim/participatory_processes/widgets_controller.rb",
          "status": "modified",
          "additions": 12,
          "deletions": 2,
          "patch": "@@ -5,13 +5,19 @@ module ParticipatoryProcesses\n     class WidgetsController < Decidim::WidgetsController\n       helper Decidim::SanitizeHelper\n \n+      def show\n+        enforce_permission_to :embed, :participatory_space, current_participatory_space: model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n         return unless params[:participatory_process_slug]\n \n-        @model ||= ParticipatoryProcess.where(slug: params[:participatory_process_slug]).or(\n-          ParticipatoryProcess.where(id: params[:participatory_process_slug])\n+        @model ||= ParticipatoryProcess.where(organization: current_organization).public_spaces.where(slug: params[:participatory_process_slug]).or(\n+          ParticipatoryProcess.where(organization: current_organization).public_spaces.where(id: params[:participatory_process_slug])\n         ).first!\n       end\n \n@@ -22,6 +28,10 @@ def current_participatory_space\n       def iframe_url\n         @iframe_url ||= participatory_process_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        ::Decidim.permissions_registry.chain_for(::Decidim::ParticipatoryProcesses::ApplicationController)\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-participatory_processes/app/permissions/decidim/participatory_processes/permissions.rb",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@ def permissions\n           public_list_process_groups_action?\n           public_read_process_group_action?\n           public_read_process_action?\n+          public_embed_process_action?\n           return permission_action\n         end\n \n@@ -112,6 +113,17 @@ def public_read_process_action?\n         toggle_allow(can_manage_process?)\n       end\n \n+      def public_embed_process_action?\n+        return unless permission_action.action == :embed &&\n+                      [:process, :participatory_space].include?(permission_action.subject) &&\n+                      process\n+\n+        return disallow! unless process.published?\n+        return disallow! if process.private_space\n+\n+        allow!\n+      end\n+\n       def can_view_private_space?\n         return true unless process.private_space\n         return false unless user"
        },
        {
          "filename": "decidim-participatory_processes/spec/permissions/decidim/participatory_processes/permissions_spec.rb",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -135,6 +135,36 @@\n       end\n     end\n \n+    context \"when embedding an process\" do\n+      let(:action) do\n+        { scope: :public, action: :embed, subject: :process }\n+      end\n+      let(:context) { { process: process } }\n+\n+      context \"when the process is published\" do\n+        let(:user) { create(:user, organization: organization) }\n+\n+        it { is_expected.to be true }\n+      end\n+\n+      context \"when the process is not published\" do\n+        let(:user) { create(:user, organization: organization) }\n+        let(:process) { create(:participatory_process, :unpublished, organization: organization) }\n+\n+        context \"when the user doesn't have access to it\" do\n+          it { is_expected.to be false }\n+        end\n+\n+        context \"when the user has access to it\" do\n+          before do\n+            create(:participatory_process_user_role, user: user, participatory_process: process)\n+          end\n+\n+          it { is_expected.to be false }\n+        end\n+      end\n+    end\n+\n     context \"when listing processes\" do\n       let(:action) do\n         { scope: :public, action: :list, subject: :process }"
        },
        {
          "filename": "decidim-participatory_processes/spec/system/process_embeds_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -4,6 +4,8 @@\n \n describe \"Process embeds\", type: :system do\n   let(:resource) { create(:participatory_process) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(resource).participatory_process_widget_path }\n \n   it_behaves_like \"an embed resource\", skip_space_checks: true\n+  it_behaves_like \"a private embed resource\"\n end"
        },
        {
          "filename": "decidim-proposals/app/controllers/decidim/proposals/widgets_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -5,15 +5,25 @@ module Proposals\n     class WidgetsController < Decidim::WidgetsController\n       helper Proposals::ApplicationHelper\n \n+      def show\n+        enforce_permission_to :embed, :proposal, proposal: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= Proposal.where(component: params[:component_id]).find(params[:proposal_id])\n+        @model ||= Proposal.not_hidden.except_withdrawn.where(component: current_component).find(params[:proposal_id])\n       end\n \n       def iframe_url\n         @iframe_url ||= proposal_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        [Decidim::Proposals::Permissions]\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-proposals/app/permissions/decidim/proposals/permissions.rb",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@ module Decidim\n   module Proposals\n     class Permissions < Decidim::DefaultPermissions\n       def permissions\n+        allow_embed_proposal?\n         return permission_action unless user\n \n         # Delegate the admin permission checks to the admin permissions class\n@@ -47,6 +48,14 @@ def proposal\n         @proposal ||= context.fetch(:proposal, nil) || context.fetch(:resource, nil)\n       end\n \n+      # As this is a public action, we need to run this before other checks\n+      def allow_embed_proposal?\n+        return unless permission_action.action == :embed && permission_action.subject == :proposal && proposal\n+        return disallow! if proposal.withdrawn?\n+\n+        allow!\n+      end\n+\n       def voting_enabled?\n         return unless current_settings\n "
        },
        {
          "filename": "decidim-proposals/app/views/decidim/proposals/proposals/show.html.erb",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -129,7 +129,9 @@ extra_admin_link(\n     <%= resource_version(proposal_presenter, versions_path: proposal_versions_path(@proposal)) %>\n     <%= cell(\"decidim/fingerprint\", @proposal) %>\n     <%= render partial: \"decidim/shared/share_modal\", locals: { resource: @proposal } %>\n-    <%= embed_modal_for proposal_widget_url(@proposal, format: :js) %>\n+    <% if allowed_to? :embed, :proposal, proposal: @proposal %>\n+      <%= embed_modal_for proposal_widget_url(@proposal, format: :js) %>\n+    <% end %>\n     <%= cell \"decidim/proposals/proposal_link_to_collaborative_draft\", @proposal %>\n     <%= cell \"decidim/proposals/proposal_link_to_rejected_emendation\", @proposal %>\n   </div>"
        },
        {
          "filename": "decidim-proposals/spec/permissions/decidim/proposals/permissions_spec.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -110,6 +110,14 @@\n     end\n   end\n \n+  context \"when emebeding a proposal\" do\n+    let(:action) do\n+      { scope: :public, action: :embed, subject: :proposal }\n+    end\n+\n+    it { is_expected.to be true }\n+  end\n+\n   describe \"voting\" do\n     let(:action) do\n       { scope: :public, action: :vote, subject: :proposal }"
        },
        {
          "filename": "decidim-proposals/spec/system/proposal_embeds_spec.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -4,8 +4,12 @@\n \n describe \"Proposal embeds\", type: :system do\n   include_context \"with a component\"\n+\n   let(:manifest_name) { \"proposals\" }\n   let(:resource) { create(:proposal, component: component) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(component).proposal_widget_path(resource) }\n \n-  it_behaves_like \"an embed resource\"\n+  it_behaves_like \"an embed resource\", skip_publication_checks: true\n+  it_behaves_like \"a moderated embed resource\"\n+  it_behaves_like \"a withdrawn embed resource\"\n end"
        },
        {
          "filename": "decidim-sortitions/app/controllers/decidim/sortitions/widgets_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -6,15 +6,25 @@ class WidgetsController < Decidim::WidgetsController\n       helper Decidim::SanitizeHelper\n       helper Sortitions::SortitionsHelper\n \n+      def show\n+        enforce_permission_to :embed, :sortition, sortition: model if model\n+\n+        super\n+      end\n+\n       private\n \n       def model\n-        @model ||= Sortition.where(component: params[:component_id]).find(params[:sortition_id])\n+        @model ||= Sortition.where(component: current_component).find(params[:sortition_id])\n       end\n \n       def iframe_url\n         @iframe_url ||= sortition_widget_url(model)\n       end\n+\n+      def permission_class_chain\n+        [Decidim::Sortitions::Permissions]\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-sortitions/app/permissions/decidim/sortitions/permissions.rb",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -4,12 +4,26 @@ module Decidim\n   module Sortitions\n     class Permissions < Decidim::DefaultPermissions\n       def permissions\n+        allow_embed_sortition?\n         return permission_action unless user\n \n         return Decidim::Sortitions::Admin::Permissions.new(user, permission_action, context).permissions if permission_action.scope == :admin\n \n         permission_action\n       end\n+\n+      private\n+\n+      def sortition\n+        @sortition ||= context.fetch(:sortition, nil) || context.fetch(:resource, nil)\n+      end\n+\n+      # As this is a public action, we need to run this before other checks\n+      def allow_embed_sortition?\n+        return unless permission_action.action == :embed && permission_action.subject == :sortition && sortition\n+\n+        allow!\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "decidim-sortitions/spec/permissions/decidim/sortitions/permissions_spec.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -25,6 +25,14 @@\n     it_behaves_like \"delegates permissions to\", Decidim::Sortitions::Admin::Permissions\n   end\n \n+  context \"when emebedding a sortition\" do\n+    let(:action) do\n+      { scope: :public, action: :embed, subject: :sortition }\n+    end\n+\n+    it { is_expected.to be true }\n+  end\n+\n   context \"when any other condition\" do\n     let(:action) do\n       { scope: :foo, action: :blah, subject: :sortition }"
        },
        {
          "filename": "decidim-sortitions/spec/system/decidim/sortitions/sortition_embeds_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -4,8 +4,10 @@\n \n describe \"Sortition embeds\", type: :system do\n   include_context \"with a component\"\n+\n   let(:manifest_name) { \"sortitions\" }\n   let(:resource) { create(:sortition, component: component) }\n+  let(:widget_path) { Decidim::EngineRouter.main_proxy(component).sortition_widget_path(resource) }\n \n-  it_behaves_like \"an embed resource\"\n+  it_behaves_like \"an embed resource\", skip_publication_checks: true\n end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 42,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e9e49808aeb85493fce228c057010abac45a10f2",
            "date": "2025-01-14T13:00:27Z",
            "author_login": "alecslupu"
          },
          {
            "sha": "9fd1b9ec44d5070586bc55357d58f05cbf785ec2",
            "date": "2025-01-14T11:45:18Z",
            "author_login": "BarbaraOliveira13"
          },
          {
            "sha": "740a3b792c3a4240699addbde8950d31b08d7a4d",
            "date": "2025-01-14T11:37:47Z",
            "author_login": "alecslupu"
          },
          {
            "sha": "08a53bae27886d7ff3d7b404d918dad8c2dca0a5",
            "date": "2025-01-14T10:14:01Z",
            "author_login": "alecslupu"
          },
          {
            "sha": "18869cf7834369c08d165358207466ed09406f20",
            "date": "2025-01-14T09:15:39Z",
            "author_login": "andreslucena"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Decidim is a participatory democracy framework, written in Ruby on Rails, originally developed for the Barcelona City government online and offline participation website. If an attacker can infer the slug or URL of an unpublished or private resource, and this resource can be embbeded (such as a Participatory Process, an Assembly, a Proposal, a Result, etc), then some data of this resource could be accessed. This vulnerability is fixed in 0.27.6.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-10T19:15:10.133",
    "last_modified": "2024-11-21T09:03:50.243",
    "fix_date": "2024-03-29T22:50:02Z"
  },
  "references": [
    {
      "url": "https://github.com/decidim/decidim/commit/1756fa639ef393ca8e8bb16221cab2e2e7875705",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/decidim/decidim/pull/12528",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/decidim/decidim/releases/tag/v0.27.6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/decidim/decidim/security/advisories/GHSA-qcj6-vxwx-4rqv",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/decidim/decidim/commit/1756fa639ef393ca8e8bb16221cab2e2e7875705",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/decidim/decidim/pull/12528",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/decidim/decidim/releases/tag/v0.27.6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/decidim/decidim/security/advisories/GHSA-qcj6-vxwx-4rqv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:31.475427",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "decidim",
    "owner": "decidim",
    "created_at": "2016-08-17T14:27:06Z",
    "updated_at": "2025-01-14T13:00:32Z",
    "pushed_at": "2025-01-14T13:01:17Z",
    "size": 264752,
    "stars": 1494,
    "forks": 408,
    "open_issues": 412,
    "watchers": 1494,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop"
    ],
    "languages": {
      "Ruby": 12848603,
      "HTML": 1662161,
      "JavaScript": 763759,
      "SCSS": 258282,
      "Dockerfile": 205,
      "Shell": 49
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:07:09.324253"
  }
}