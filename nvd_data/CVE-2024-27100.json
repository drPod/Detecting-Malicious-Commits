{
  "cve_id": "CVE-2024-27100",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "8cade1e825e90a66f440e820992d43c6905f4b47",
    "related_commits": [
      "8cade1e825e90a66f440e820992d43c6905f4b47",
      "8cade1e825e90a66f440e820992d43c6905f4b47"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/8cade1e825e90a66f440e820992d43c6905f4b47.patch",
    "fix_commit_details": {
      "sha": "8cade1e825e90a66f440e820992d43c6905f4b47",
      "commit_date": "2024-02-22T19:47:15Z",
      "author": {
        "login": "danielwaterworth",
        "type": "User",
        "stats": {
          "total_commits": 423,
          "average_weekly_commits": 0.6103896103896104,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 141
        }
      },
      "commit_message": {
        "title": "SECURITY: Prevent large staff actions causing DoS",
        "length": 647,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 186,
        "additions": 167,
        "deletions": 19
      },
      "files": [
        {
          "filename": "app/controllers/admin/users_controller.rb",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -107,6 +107,11 @@ def penalty_history\n \n   def suspend\n     guardian.ensure_can_suspend!(@user)\n+    reason = params[:reason]\n+\n+    if reason && (!reason.is_a?(String) || reason.size > 300)\n+      raise Discourse::InvalidParameters.new(:reason)\n+    end\n \n     if @user.suspended?\n       suspend_record = @user.suspend_record\n@@ -128,6 +133,10 @@ def suspend\n \n     all_users = [@user]\n     if Array === params[:other_user_ids]\n+      if params[:other_user_ids].size > MAX_SIMILAR_USERS\n+        raise Discourse::InvalidParameters.new(:other_user_ids)\n+      end\n+\n       all_users.concat(User.where(id: params[:other_user_ids]).to_a)\n       all_users.uniq!\n     end\n@@ -360,6 +369,11 @@ def deactivate\n \n   def silence\n     guardian.ensure_can_silence_user! @user\n+    reason = params[:reason]\n+\n+    if reason && (!reason.is_a?(String) || reason.size > 300)\n+      raise Discourse::InvalidParameters.new(:reason)\n+    end\n \n     if @user.silenced?\n       silenced_record = @user.silenced_record\n@@ -379,6 +393,10 @@ def silence\n \n     all_users = [@user]\n     if Array === params[:other_user_ids]\n+      if params[:other_user_ids].size > MAX_SIMILAR_USERS\n+        raise Discourse::InvalidParameters.new(:other_user_ids)\n+      end\n+\n       all_users.concat(User.where(id: params[:other_user_ids]).to_a)\n       all_users.uniq!\n     end"
        },
        {
          "filename": "app/controllers/export_csv_controller.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -5,18 +5,26 @@ class ExportCsvController < ApplicationController\n \n   def export_entity\n     guardian.ensure_can_export_entity!(export_params[:entity])\n+    entity = export_params[:entity]\n+    raise Discourse::InvalidParameters.new(:entity) unless entity.is_a?(String) && entity.size < 100\n \n-    if export_params[:entity] == \"user_archive\"\n+    (export_params[:args] || {}).each do |key, value|\n+      unless value.is_a?(String) && value.size < 100\n+        raise Discourse::InvalidParameters.new(\"args.#{key}\")\n+      end\n+    end\n+\n+    if entity == \"user_archive\"\n       Jobs.enqueue(:export_user_archive, user_id: current_user.id, args: export_params[:args])\n     else\n       Jobs.enqueue(\n         :export_csv_file,\n-        entity: export_params[:entity],\n+        entity: entity,\n         user_id: current_user.id,\n         args: export_params[:args],\n       )\n     end\n-    StaffActionLogger.new(current_user).log_entity_export(export_params[:entity])\n+    StaffActionLogger.new(current_user).log_entity_export(entity)\n     render json: success_json\n   rescue Discourse::InvalidAccess\n     render_json_error I18n.t(\"csv_export.rate_limit_error\")"
        },
        {
          "filename": "app/models/user_history.rb",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -11,6 +11,23 @@ class UserHistory < ActiveRecord::Base\n   belongs_to :topic\n   belongs_to :category\n \n+  # Each value in the context should be shorter than this\n+  MAX_CONTEXT_LENGTH = 50_000\n+\n+  # We often store multiple values in details, particularly during post edits\n+  # Let's allow space for 2 values + a little extra for padding\n+  MAX_DETAILS_LENGTH = 110_000\n+\n+  MAX_JSON_LENGTH = 300_000\n+\n+  validates :details, length: { maximum: MAX_DETAILS_LENGTH }\n+  validates :context, length: { maximum: MAX_CONTEXT_LENGTH }\n+  validates :subject, length: { maximum: MAX_CONTEXT_LENGTH }\n+  validates :ip_address, length: { maximum: MAX_CONTEXT_LENGTH }\n+  validates :email, length: { maximum: MAX_CONTEXT_LENGTH }\n+  validates :previous_value, length: { maximum: MAX_JSON_LENGTH }\n+  validates :new_value, length: { maximum: MAX_JSON_LENGTH }\n+\n   validates_presence_of :action\n \n   scope :only_staff_actions, -> { where(\"action IN (?)\", UserHistory.staff_action_ids) }"
        },
        {
          "filename": "app/services/staff_action_logger.rb",
          "status": "modified",
          "additions": 24,
          "deletions": 11,
          "patch": "@@ -38,7 +38,7 @@ def log_custom(custom_type, details = nil)\n     StaffActionLogger.base_attrs.each do |attr|\n       attrs[attr] = details.delete(attr) if details.has_key?(attr)\n     end\n-    attrs[:details] = details.map { |r| \"#{r[0]}: #{r[1]}\" }.join(\"\\n\")\n+    attrs[:details] = details.map { |r| \"#{r[0]}: #{truncate(r[1].to_s)}\" }.join(\"\\n\")\n     attrs[:acting_user_id] = @admin.id\n     attrs[:action] = UserHistory.actions[:custom_staff]\n     attrs[:custom_type] = custom_type\n@@ -80,7 +80,7 @@ def log_post_deletion(deleted_post, opts = {})\n       \"user: #{username} (#{name})\",\n       \"topic: #{topic_title}\",\n       \"post_number: #{deleted_post.post_number}\",\n-      \"raw: #{deleted_post.raw}\",\n+      \"raw: #{truncate(deleted_post.raw)}\",\n     ]\n \n     UserHistory.create!(\n@@ -105,7 +105,7 @@ def log_topic_delete_recover(topic, action = \"delete_topic\", opts = {})\n     ]\n \n     if first_post = topic.ordered_posts.with_deleted.first\n-      details << \"raw: #{first_post.raw}\"\n+      details << \"raw: #{truncate(first_post.raw)}\"\n     end\n \n     UserHistory.create!(\n@@ -179,7 +179,7 @@ def log_post_edit(post, opts = {})\n       params(opts).merge(\n         action: UserHistory.actions[:post_edit],\n         post_id: post.id,\n-        details: \"#{opts[:old_raw]}\\n\\n---\\n\\n#{post.raw}\",\n+        details: \"#{truncate(opts[:old_raw])}\\n\\n---\\n\\n#{truncate(post.raw)}\",\n       ),\n     )\n   end\n@@ -261,26 +261,22 @@ def log_theme_change(old_json, new_theme, opts = {})\n     raise Discourse::InvalidParameters.new(:new_theme) unless new_theme\n \n     new_json = theme_json(new_theme)\n-\n     old_json, new_json = strip_duplicates(old_json, new_json)\n \n     UserHistory.create!(\n-      params(opts).merge(\n+      params(opts).merge(json_params(old_json, new_json)).merge(\n         action: UserHistory.actions[:change_theme],\n         subject: new_theme.name,\n-        previous_value: old_json,\n-        new_value: new_json,\n       ),\n     )\n   end\n \n   def log_theme_destroy(theme, opts = {})\n     raise Discourse::InvalidParameters.new(:theme) unless theme\n     UserHistory.create!(\n-      params(opts).merge(\n+      params(opts).merge(json_params(theme_json(theme), nil)).merge(\n         action: UserHistory.actions[:delete_theme],\n         subject: theme.name,\n-        previous_value: theme_json(theme),\n       ),\n     )\n   end\n@@ -804,7 +800,7 @@ def log_post_rejected(reviewable, rejected_at, opts = {})\n       \"rejected_at: #{rejected_at}\",\n       \"user: #{username} (#{name})\",\n       \"topic: #{topic_title}\",\n-      \"raw: #{reviewable.payload[\"raw\"]}\",\n+      \"raw: #{truncate(reviewable.payload[\"raw\"])}\",\n     ]\n \n     UserHistory.create!(\n@@ -1017,6 +1013,15 @@ def log_reset_bounce_score(user, opts = {})\n \n   private\n \n+  def json_params(previous_value, new_value)\n+    if (previous_value && previous_value.length > UserHistory::MAX_JSON_LENGTH) ||\n+         (new_value && new_value.length > UserHistory::MAX_JSON_LENGTH)\n+      { context: I18n.t(\"staff_action_logs.json_too_long\") }\n+    else\n+      { previous_value: previous_value, new_value: new_value }\n+    end\n+  end\n+\n   def get_changes(changes)\n     return unless changes\n \n@@ -1046,4 +1051,12 @@ def custom_section_details(section)\n     urls = section.sidebar_urls.map { |url| \"#{url.name} - #{url.value}\" }\n     \"links: #{urls.join(\", \")}\"\n   end\n+\n+  def truncate(s)\n+    if s.size > UserHistory::MAX_CONTEXT_LENGTH\n+      \"#{s.slice(..UserHistory::MAX_CONTEXT_LENGTH)}...\"\n+    else\n+      s\n+    end\n+  end\n end"
        },
        {
          "filename": "config/locales/server.en.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -5320,6 +5320,7 @@ en:\n       custom: \"Notification from %{username} on %{site_title}\"\n \n   staff_action_logs:\n+    json_too_long: \"Values not logged because they exceed the column length limits\"\n     not_found: \"not found\"\n     unknown: \"unknown\"\n     user_merged: \"%{username} was merged into this account\""
        },
        {
          "filename": "spec/requests/admin/users_controller_spec.rb",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -334,6 +334,18 @@\n         end\n       end\n \n+      it \"fails the request if the reason is too long\" do\n+        expect(user).not_to be_suspended\n+        put \"/admin/users/#{user.id}/suspend.json\",\n+            params: {\n+              reason: \"x\" * 301,\n+              suspend_until: 5.hours.from_now,\n+            }\n+        expect(response.status).to eq(400)\n+        user.reload\n+        expect(user).not_to be_suspended\n+      end\n+\n       it \"requires suspend_until and reason\" do\n         expect(user).not_to be_suspended\n         put \"/admin/users/#{user.id}/suspend.json\", params: {}\n@@ -1596,6 +1608,18 @@\n         expect(reg_user.reload).to be_silenced\n         expect(other_user.reload).to be_silenced\n       end\n+\n+      it \"fails the request if the reason is too long\" do\n+        expect(user).not_to be_silenced\n+        put \"/admin/users/#{user.id}/silence.json\",\n+            params: {\n+              reason: \"x\" * 301,\n+              silenced_till: 5.hours.from_now,\n+            }\n+        expect(response.status).to eq(400)\n+        user.reload\n+        expect(user).not_to be_suspended\n+      end\n     end\n \n     context \"when logged in as a moderator\" do"
        },
        {
          "filename": "spec/requests/export_csv_controller_spec.rb",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -73,6 +73,16 @@\n         expect(log_entry.acting_user_id).to eq(admin.id)\n         expect(log_entry.subject).to eq(\"user_list\")\n       end\n+\n+      it \"fails requests where the entity is too long\" do\n+        post \"/export_csv/export_entity.json\", params: { entity: \"x\" * 200 }\n+        expect(response.status).to eq(400)\n+      end\n+\n+      it \"fails requests where the name arg is too long\" do\n+        post \"/export_csv/export_entity.json\", params: { entity: \"foo\", args: { name: \"x\" * 200 } }\n+        expect(response.status).to eq(400)\n+      end\n     end\n   end\n "
        },
        {
          "filename": "spec/services/staff_action_logger_spec.rb",
          "status": "modified",
          "additions": 62,
          "deletions": 5,
          "patch": "@@ -1,6 +1,7 @@\n # frozen_string_literal: true\n \n RSpec.describe StaffActionLogger do\n+  let(:long_string) { \"Na \" * 100_000 + \"Batman!\" }\n   fab!(:admin)\n   let(:logger) { described_class.new(admin) }\n \n@@ -69,6 +70,13 @@\n         log_post_deletion\n       }.to change { UserHistory.count }.by(1)\n     end\n+\n+    it \"truncates overly long values\" do\n+      deleted_post.update!(raw: long_string, skip_validation: true)\n+      expect { log_post_deletion }.to change { UserHistory.count }.by(1)\n+      log = UserHistory.last\n+      expect(log.details.size).to be_between(50_000, 110_000)\n+    end\n   end\n \n   describe \"log_topic_delete_recover\" do\n@@ -90,6 +98,13 @@\n       it \"creates a new UserHistory record\" do\n         expect { log_topic_delete_recover }.to change { UserHistory.count }.by(1)\n       end\n+\n+      it \"truncates overly long values\" do\n+        Fabricate(:post, topic: topic, skip_validation: true, raw: long_string)\n+        expect { log_topic_delete_recover }.to change { UserHistory.count }.by(1)\n+        log = UserHistory.last\n+        expect(log.details.size).to be_between(50_000, 110_000)\n+      end\n     end\n \n     context \"when recovering topic\" do\n@@ -112,6 +127,13 @@\n       it \"creates a new UserHistory record\" do\n         expect { log_topic_delete_recover }.to change { UserHistory.count }.by(1)\n       end\n+\n+      it \"truncates overly long values\" do\n+        Fabricate(:post, topic: topic, skip_validation: true, raw: long_string)\n+        expect { log_topic_delete_recover }.to change { UserHistory.count }.by(1)\n+        log = UserHistory.last\n+        expect(log.details.size).to be_between(50_000, 110_000)\n+      end\n     end\n   end\n \n@@ -187,14 +209,12 @@\n   end\n \n   describe \"log_theme_change\" do\n+    fab!(:theme)\n+\n     it \"raises an error when params are invalid\" do\n       expect { logger.log_theme_change(nil, nil) }.to raise_error(Discourse::InvalidParameters)\n     end\n \n-    let! :theme do\n-      Fabricate(:theme)\n-    end\n-\n     it \"logs new site customizations\" do\n       log_record = logger.log_theme_change(nil, theme)\n       expect(log_record.subject).to eq(theme.name)\n@@ -226,15 +246,28 @@\n         ],\n       )\n     end\n+\n+    it \"doesn't log values when the json is too large\" do\n+      old_json = ThemeSerializer.new(theme, root: false).to_json\n+\n+      theme.set_field(target: :common, name: :scss, value: long_string)\n+\n+      log_record = logger.log_theme_change(old_json, theme)\n+\n+      expect(log_record.previous_value).not_to be_present\n+      expect(log_record.new_value).not_to be_present\n+      expect(log_record.context).to be_present\n+    end\n   end\n \n   describe \"log_theme_destroy\" do\n+    fab!(:theme)\n+\n     it \"raises an error when params are invalid\" do\n       expect { logger.log_theme_destroy(nil) }.to raise_error(Discourse::InvalidParameters)\n     end\n \n     it \"creates a new UserHistory record\" do\n-      theme = Fabricate(:theme)\n       theme.set_field(target: :common, name: :scss, value: \"body{margin: 10px;}\")\n \n       log_record = logger.log_theme_destroy(theme)\n@@ -253,6 +286,15 @@\n         ],\n       )\n     end\n+\n+    it \"doesn't log values when the json is too large\" do\n+      theme.set_field(target: :common, name: :scss, value: long_string)\n+      log_record = logger.log_theme_destroy(theme)\n+\n+      expect(log_record.previous_value).not_to be_present\n+      expect(log_record.new_value).not_to be_present\n+      expect(log_record.context).to be_present\n+    end\n   end\n \n   describe \"log_theme_setting_change\" do\n@@ -398,6 +440,12 @@\n       expect(logged.custom_type).to eq(\"clicked_something\")\n       expect(logged.topic_id).to be === 1234\n     end\n+\n+    it \"truncates overly long values\" do\n+      logged = logger.log_custom(:shower_thought, lyrics: long_string)\n+      expect(logged).to be_valid\n+      expect(logged.details.size).to be_between(50_000, 110_000)\n+    end\n   end\n \n   describe \"log_category_settings_change\" do\n@@ -654,6 +702,15 @@\n       expect(user_history.action).to eq(UserHistory.actions[:post_rejected])\n       expect(user_history.details).to include(reviewable.payload[\"raw\"])\n     end\n+\n+    it \"truncates overly long values\" do\n+      reviewable.payload[\"raw\"] = long_string\n+      reviewable.save!\n+\n+      expect { log_post_rejected }.to change { UserHistory.count }.by(1)\n+      log = UserHistory.last\n+      expect(log.details.size).to be_between(50_000, 110_000)\n+    end\n   end\n \n   describe \"log_topic_closed\" do"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bad869dd81a390b87d1f2297ca6a032dabda5faa",
            "date": "2025-01-14T20:18:51Z",
            "author_login": "markvanlan"
          },
          {
            "sha": "0fcb832244234f985d0b2628ddc63a382d1700c9",
            "date": "2025-01-14T20:17:13Z",
            "author_login": "davidtaylorhq"
          },
          {
            "sha": "912b002dcc5bc12698911b70e26912f3c6af990d",
            "date": "2025-01-14T20:00:12Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "c25e53db7ecc0d02d72e4e9b4a51419132b762a8",
            "date": "2025-01-14T19:23:08Z",
            "author_login": "markvanlan"
          },
          {
            "sha": "1b19bf690a8e0a8cb1de3326078d863114516907",
            "date": "2025-01-14T19:14:55Z",
            "author_login": "markvanlan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Discourse is an open source platform for community discussion. In affected versions the endpoints for suspending users, silencing users and exporting CSV files weren't enforcing limits on the sizes of the parameters that they accept. This could lead to excessive resource consumption which could render an instance inoperable. A site could be disrupted by either a malicious moderator on the same site or a malicious staff member on another site in the same multisite cluster. This issue is patched in the latest stable, beta and tests-passed versions of Discourse. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-15T20:15:08.490",
    "last_modified": "2024-11-21T09:03:51.563",
    "fix_date": "2024-02-22T19:47:15Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/8cade1e825e90a66f440e820992d43c6905f4b47",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-xq4v-qg27-gxgc",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/commit/8cade1e825e90a66f440e820992d43c6905f4b47",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-xq4v-qg27-gxgc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.500557",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}