{
  "cve_id": "CVE-2024-27101",
  "github_data": {
    "repository": "authzed/spicedb",
    "fix_commit": "ef443c442b96909694390324a99849b0407007fe",
    "related_commits": [
      "ef443c442b96909694390324a99849b0407007fe",
      "ef443c442b96909694390324a99849b0407007fe"
    ],
    "patch_url": "https://github.com/authzed/spicedb/commit/ef443c442b96909694390324a99849b0407007fe.patch",
    "fix_commit_details": {
      "sha": "ef443c442b96909694390324a99849b0407007fe",
      "commit_date": "2024-03-01T20:50:06Z",
      "author": {
        "login": "jzelinskie",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-h3m7-rqc4-7h9p",
        "length": 74,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 166,
        "additions": 159,
        "deletions": 7
      },
      "files": [
        {
          "filename": "internal/dispatch/graph/dispatch_test.go",
          "status": "added",
          "additions": 99,
          "deletions": 0,
          "patch": "@@ -0,0 +1,99 @@\n+package graph\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"testing\"\n+\n+\t\"github.com/authzed/spicedb/internal/dispatch\"\n+\t\"github.com/authzed/spicedb/internal/graph\"\n+\tcore \"github.com/authzed/spicedb/pkg/proto/core/v1\"\n+\tv1 \"github.com/authzed/spicedb/pkg/proto/dispatch/v1\"\n+\t\"github.com/authzed/spicedb/pkg/tuple\"\n+\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+func TestDispatchChunking(t *testing.T) {\n+\tschema := `\n+\t\tdefinition user {\n+\t\t\trelation self: user\n+\t\t}\n+\n+\t\tdefinition res {\n+\t\t\trelation owner : user\n+\t\t\tpermission view = owner->self\n+\t\t}`\n+\n+\tresources := make([]*core.RelationTuple, 0, math.MaxUint16+1)\n+\tenabled := make([]*core.RelationTuple, 0, math.MaxUint16+1)\n+\tfor i := 0; i < math.MaxUint16+1; i++ {\n+\t\tresources = append(resources, tuple.Parse(fmt.Sprintf(\"res:res1#owner@user:user%d\", i)))\n+\t\tenabled = append(enabled, tuple.Parse(fmt.Sprintf(\"user:user%d#self@user:user%d\", i, i)))\n+\t}\n+\n+\tctx, dispatcher, revision := newLocalDispatcherWithSchemaAndRels(t, schema, append(enabled, resources...))\n+\n+\tt.Run(\"check\", func(t *testing.T) {\n+\t\tfor _, tpl := range resources[:1] {\n+\t\t\tcheckResult, err := dispatcher.DispatchCheck(ctx, &v1.DispatchCheckRequest{\n+\t\t\t\tResourceRelation: RR(tpl.ResourceAndRelation.Namespace, \"view\"),\n+\t\t\t\tResourceIds:      []string{tpl.ResourceAndRelation.ObjectId},\n+\t\t\t\tResultsSetting:   v1.DispatchCheckRequest_ALLOW_SINGLE_RESULT,\n+\t\t\t\tSubject:          ONR(tpl.Subject.Namespace, tpl.Subject.ObjectId, graph.Ellipsis),\n+\t\t\t\tMetadata: &v1.ResolverMeta{\n+\t\t\t\t\tAtRevision:     revision.String(),\n+\t\t\t\t\tDepthRemaining: 50,\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.NotNil(t, checkResult)\n+\t\t\trequire.NotEmpty(t, checkResult.ResultsByResourceId, \"expected membership for resource %s\", tpl.ResourceAndRelation.ObjectId)\n+\t\t\trequire.Equal(t, v1.ResourceCheckResult_MEMBER, checkResult.ResultsByResourceId[tpl.ResourceAndRelation.ObjectId].Membership)\n+\t\t}\n+\t})\n+\n+\tt.Run(\"lookup-resources\", func(t *testing.T) {\n+\t\tfor _, tpl := range resources[:1] {\n+\t\t\tstream := dispatch.NewCollectingDispatchStream[*v1.DispatchLookupResourcesResponse](ctx)\n+\t\t\terr := dispatcher.DispatchLookupResources(&v1.DispatchLookupResourcesRequest{\n+\t\t\t\tObjectRelation: RR(tpl.ResourceAndRelation.Namespace, \"view\"),\n+\t\t\t\tSubject:        ONR(tpl.Subject.Namespace, tpl.Subject.ObjectId, graph.Ellipsis),\n+\t\t\t\tMetadata: &v1.ResolverMeta{\n+\t\t\t\t\tAtRevision:     revision.String(),\n+\t\t\t\t\tDepthRemaining: 50,\n+\t\t\t\t},\n+\t\t\t\tOptionalLimit: veryLargeLimit,\n+\t\t\t}, stream)\n+\n+\t\t\trequire.NoError(t, err)\n+\n+\t\t\tfoundResources, _, _, _ := processResults(stream)\n+\t\t\trequire.Len(t, foundResources, 1)\n+\t\t}\n+\t})\n+\n+\tt.Run(\"lookup-subjects\", func(t *testing.T) {\n+\t\tfor _, tpl := range resources[:1] {\n+\t\t\tstream := dispatch.NewCollectingDispatchStream[*v1.DispatchLookupSubjectsResponse](ctx)\n+\n+\t\t\terr := dispatcher.DispatchLookupSubjects(&v1.DispatchLookupSubjectsRequest{\n+\t\t\t\tResourceRelation: RR(tpl.ResourceAndRelation.Namespace, \"view\"),\n+\t\t\t\tResourceIds:      []string{tpl.ResourceAndRelation.ObjectId},\n+\t\t\t\tSubjectRelation:  RR(tpl.Subject.Namespace, graph.Ellipsis),\n+\t\t\t\tMetadata: &v1.ResolverMeta{\n+\t\t\t\t\tAtRevision:     revision.String(),\n+\t\t\t\t\tDepthRemaining: 50,\n+\t\t\t\t},\n+\t\t\t}, stream)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\tres := stream.Results()\n+\t\t\trequire.Len(t, res, 1)\n+\t\t\trequire.Len(t, res[0].FoundSubjectsByResourceId, 1)\n+\t\t\trequire.NotNil(t, res[0].FoundSubjectsByResourceId[\"res1\"])\n+\t\t\trequire.Len(t, res[0].FoundSubjectsByResourceId[\"res1\"].FoundSubjects, math.MaxUint16+1)\n+\t\t}\n+\t})\n+}"
        },
        {
          "filename": "pkg/genutil/slicez/chunking.go",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -18,11 +18,12 @@ func ForEachChunkUntil[T any](data []T, chunkSize uint16, handler func(items []T\n \t\tchunkSize = 1\n \t}\n \n-\tdataLength := uint16(len(data))\n-\tchunkCount := (dataLength / chunkSize) + 1\n-\tfor chunkIndex := uint16(0); chunkIndex < chunkCount; chunkIndex++ {\n-\t\tchunkStart := chunkIndex * chunkSize\n-\t\tchunkEnd := (chunkIndex + 1) * chunkSize\n+\tdataLength := uint64(len(data))\n+\tchunkSize64 := uint64(chunkSize)\n+\tchunkCount := (dataLength / chunkSize64) + 1\n+\tfor chunkIndex := uint64(0); chunkIndex < chunkCount; chunkIndex++ {\n+\t\tchunkStart := chunkIndex * chunkSize64\n+\t\tchunkEnd := (chunkIndex + 1) * chunkSize64\n \t\tif chunkEnd > dataLength {\n \t\t\tchunkEnd = dataLength\n \t\t}\n@@ -38,5 +39,6 @@ func ForEachChunkUntil[T any](data []T, chunkSize uint16, handler func(items []T\n \t\t\t}\n \t\t}\n \t}\n+\n \treturn true, nil\n }"
        },
        {
          "filename": "pkg/genutil/slicez/chunking_test.go",
          "status": "modified",
          "additions": 53,
          "deletions": 2,
          "patch": "@@ -2,23 +2,28 @@ package slicez\n \n import (\n \t\"fmt\"\n+\t\"math\"\n \t\"testing\"\n \n \t\"github.com/stretchr/testify/require\"\n )\n \n func TestForEachChunk(t *testing.T) {\n+\tt.Parallel()\n+\n \tfor _, datasize := range []int{0, 1, 5, 10, 50, 100, 250} {\n \t\tdatasize := datasize\n \t\tfor _, chunksize := range []uint16{1, 2, 3, 5, 10, 50} {\n \t\t\tchunksize := chunksize\n \t\t\tt.Run(fmt.Sprintf(\"test-%d-%d\", datasize, chunksize), func(t *testing.T) {\n-\t\t\t\tdata := []int{}\n+\t\t\t\tt.Parallel()\n+\n+\t\t\t\tdata := make([]int, 0, datasize)\n \t\t\t\tfor i := 0; i < datasize; i++ {\n \t\t\t\t\tdata = append(data, i)\n \t\t\t\t}\n \n-\t\t\t\tfound := []int{}\n+\t\t\t\tfound := make([]int, 0, datasize)\n \t\t\t\tForEachChunk(data, chunksize, func(items []int) {\n \t\t\t\t\tfound = append(found, items...)\n \t\t\t\t\trequire.True(t, len(items) <= int(chunksize))\n@@ -29,3 +34,49 @@ func TestForEachChunk(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestForEachChunkOverflowPanic(t *testing.T) {\n+\tt.Parallel()\n+\n+\tdatasize := math.MaxUint16\n+\tchunksize := uint16(50)\n+\tdata := make([]int, 0, datasize)\n+\tfor i := 0; i < datasize; i++ {\n+\t\tdata = append(data, i)\n+\t}\n+\n+\tfound := make([]int, 0, datasize)\n+\tForEachChunk(data, chunksize, func(items []int) {\n+\t\tfound = append(found, items...)\n+\t\trequire.True(t, len(items) <= int(chunksize))\n+\t\trequire.True(t, len(items) > 0)\n+\t})\n+\n+\trequire.Equal(t, data, found)\n+}\n+\n+func TestForEachChunkOverflowIncorrect(t *testing.T) {\n+\tt.Parallel()\n+\n+\tchunksize := uint16(50)\n+\tfor _, datasize := range []int{math.MaxUint16 + int(chunksize), 10_000_000} {\n+\t\tdatasize := datasize\n+\t\tt.Run(fmt.Sprintf(\"test-%d-%d\", datasize, chunksize), func(t *testing.T) {\n+\t\t\tt.Parallel()\n+\n+\t\t\tdata := make([]int, 0, datasize)\n+\t\t\tfor i := 0; i < datasize; i++ {\n+\t\t\t\tdata = append(data, i)\n+\t\t\t}\n+\n+\t\t\tfound := make([]int, 0, datasize)\n+\t\t\tForEachChunk(data, chunksize, func(items []int) {\n+\t\t\t\tfound = append(found, items...)\n+\t\t\t\trequire.True(t, len(items) <= int(chunksize))\n+\t\t\t\trequire.True(t, len(items) > 0)\n+\t\t\t})\n+\n+\t\t\trequire.Equal(t, data, found)\n+\t\t})\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3bbf45766ed519c53ff802619a032e58e2af57a7",
            "date": "2025-01-13T22:44:38Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "3e257e6c4207721f8ae421ec1424f96c0c60279b",
            "date": "2025-01-11T22:06:12Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "fabeff191dec15fae327c896a9f40e095fde5e49",
            "date": "2025-01-10T22:22:57Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "9401072bf043c3392d14e124ab73637dc699f449",
            "date": "2025-01-10T22:14:58Z",
            "author_login": "josephschorr"
          },
          {
            "sha": "6b2e961ed8e1304f28ea46762168bb20417c537c",
            "date": "2025-01-10T18:34:10Z",
            "author_login": "josephschorr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:C/C:N/I:H/A:H",
    "cwe_id": "CWE-190",
    "description": "SpiceDB is an open source, Google Zanzibar-inspired database for creating and managing security-critical application permissions. Integer overflow in chunking helper causes dispatching to miss elements or panic.  Any SpiceDB cluster with any schema where a resource being checked has more than 65535 relationships for the same resource and subject type is affected by this problem.  The CheckPermission, BulkCheckPermission, and LookupSubjects API methods are affected. This vulnerability is fixed in 1.29.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-03-01T21:15:08.593",
    "last_modified": "2024-11-21T09:03:51.683",
    "fix_date": "2024-03-01T20:50:06Z"
  },
  "references": [
    {
      "url": "https://github.com/authzed/spicedb/commit/ef443c442b96909694390324a99849b0407007fe",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/authzed/spicedb/security/advisories/GHSA-h3m7-rqc4-7h9p",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/authzed/spicedb/commit/ef443c442b96909694390324a99849b0407007fe",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/authzed/spicedb/security/advisories/GHSA-h3m7-rqc4-7h9p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.455004",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "spicedb",
    "owner": "authzed",
    "created_at": "2021-08-16T15:32:09Z",
    "updated_at": "2025-01-14T00:07:27Z",
    "pushed_at": "2025-01-13T22:53:04Z",
    "size": 19045,
    "stars": 5286,
    "forks": 286,
    "open_issues": 107,
    "watchers": 5286,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 4522371,
      "JavaScript": 16612,
      "HTML": 3663,
      "Dockerfile": 1564
    },
    "commit_activity": {
      "total_commits_last_year": 625,
      "avg_commits_per_week": 12.01923076923077,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:56:47.808291"
  }
}