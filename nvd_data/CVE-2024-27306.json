{
  "cve_id": "CVE-2024-27306",
  "github_data": {
    "repository": "aio-libs/aiohttp",
    "fix_commit": "28335525d1eac015a7e7584137678cbb6ff19397",
    "related_commits": [
      "28335525d1eac015a7e7584137678cbb6ff19397",
      "28335525d1eac015a7e7584137678cbb6ff19397"
    ],
    "patch_url": "https://github.com/aio-libs/aiohttp/commit/28335525d1eac015a7e7584137678cbb6ff19397.patch",
    "fix_commit_details": {
      "sha": "28335525d1eac015a7e7584137678cbb6ff19397",
      "commit_date": "2024-04-11T14:54:45Z",
      "author": {
        "login": "Dreamsorcerer",
        "type": "User",
        "stats": {
          "total_commits": 756,
          "average_weekly_commits": 1.2813559322033898,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 119
        }
      },
      "commit_message": {
        "title": "Escape filenames and paths in HTML when generating index pages (#8317) (#8319)",
        "length": 198,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 137,
        "additions": 118,
        "deletions": 19
      },
      "files": [
        {
          "filename": "CHANGES/8317.bugfix.rst",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Escaped filenames in static view -- by :user:`bdraco`."
        },
        {
          "filename": "aiohttp/web_urldispatcher.py",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -1,7 +1,9 @@\n import abc\n import asyncio\n import base64\n+import functools\n import hashlib\n+import html\n import inspect\n import keyword\n import os\n@@ -90,6 +92,8 @@\n _ExpectHandler = Callable[[Request], Awaitable[Optional[StreamResponse]]]\n _Resolve = Tuple[Optional[\"UrlMappingMatchInfo\"], Set[str]]\n \n+html_escape = functools.partial(html.escape, quote=True)\n+\n \n class _InfoDict(TypedDict, total=False):\n     path: str\n@@ -708,15 +712,15 @@ def _directory_as_html(self, filepath: Path) -> str:\n         assert filepath.is_dir()\n \n         relative_path_to_dir = filepath.relative_to(self._directory).as_posix()\n-        index_of = f\"Index of /{relative_path_to_dir}\"\n+        index_of = f\"Index of /{html_escape(relative_path_to_dir)}\"\n         h1 = f\"<h1>{index_of}</h1>\"\n \n         index_list = []\n         dir_index = filepath.iterdir()\n         for _file in sorted(dir_index):\n             # show file url as relative to static path\n             rel_path = _file.relative_to(self._directory).as_posix()\n-            file_url = self._prefix + \"/\" + rel_path\n+            quoted_file_url = _quote_path(f\"{self._prefix}/{rel_path}\")\n \n             # if file is a directory, add '/' to the end of the name\n             if _file.is_dir():\n@@ -725,9 +729,7 @@ def _directory_as_html(self, filepath: Path) -> str:\n                 file_name = _file.name\n \n             index_list.append(\n-                '<li><a href=\"{url}\">{name}</a></li>'.format(\n-                    url=file_url, name=file_name\n-                )\n+                f'<li><a href=\"{quoted_file_url}\">{html_escape(file_name)}</a></li>'\n             )\n         ul = \"<ul>\\n{}\\n</ul>\".format(\"\\n\".join(index_list))\n         body = f\"<body>\\n{h1}\\n{ul}\\n</body>\""
        },
        {
          "filename": "tests/test_web_urldispatcher.py",
          "status": "modified",
          "additions": 110,
          "deletions": 14,
          "patch": "@@ -1,6 +1,7 @@\n import asyncio\n import functools\n import pathlib\n+import sys\n from typing import Optional\n from unittest import mock\n from unittest.mock import MagicMock\n@@ -14,31 +15,38 @@\n \n \n @pytest.mark.parametrize(\n-    \"show_index,status,prefix,data\",\n+    \"show_index,status,prefix,request_path,data\",\n     [\n-        pytest.param(False, 403, \"/\", None, id=\"index_forbidden\"),\n+        pytest.param(False, 403, \"/\", \"/\", None, id=\"index_forbidden\"),\n         pytest.param(\n             True,\n             200,\n             \"/\",\n-            b\"<html>\\n<head>\\n<title>Index of /.</title>\\n\"\n-            b\"</head>\\n<body>\\n<h1>Index of /.</h1>\\n<ul>\\n\"\n-            b'<li><a href=\"/my_dir\">my_dir/</a></li>\\n'\n-            b'<li><a href=\"/my_file\">my_file</a></li>\\n'\n-            b\"</ul>\\n</body>\\n</html>\",\n-            id=\"index_root\",\n+            \"/\",\n+            b\"<html>\\n<head>\\n<title>Index of /.</title>\\n</head>\\n<body>\\n<h1>Index of\"\n+            b' /.</h1>\\n<ul>\\n<li><a href=\"/my_dir\">my_dir/</a></li>\\n<li><a href=\"/my_file\">'\n+            b\"my_file</a></li>\\n</ul>\\n</body>\\n</html>\",\n         ),\n         pytest.param(\n             True,\n             200,\n             \"/static\",\n-            b\"<html>\\n<head>\\n<title>Index of /.</title>\\n\"\n-            b\"</head>\\n<body>\\n<h1>Index of /.</h1>\\n<ul>\\n\"\n-            b'<li><a href=\"/static/my_dir\">my_dir/</a></li>\\n'\n-            b'<li><a href=\"/static/my_file\">my_file</a></li>\\n'\n-            b\"</ul>\\n</body>\\n</html>\",\n+            \"/static\",\n+            b\"<html>\\n<head>\\n<title>Index of /.</title>\\n</head>\\n<body>\\n<h1>Index of\"\n+            b' /.</h1>\\n<ul>\\n<li><a href=\"/static/my_dir\">my_dir/</a></li>\\n<li><a href=\"'\n+            b'/static/my_file\">my_file</a></li>\\n</ul>\\n</body>\\n</html>',\n             id=\"index_static\",\n         ),\n+        pytest.param(\n+            True,\n+            200,\n+            \"/static\",\n+            \"/static/my_dir\",\n+            b\"<html>\\n<head>\\n<title>Index of /my_dir</title>\\n</head>\\n<body>\\n<h1>\"\n+            b'Index of /my_dir</h1>\\n<ul>\\n<li><a href=\"/static/my_dir/my_file_in_dir\">'\n+            b\"my_file_in_dir</a></li>\\n</ul>\\n</body>\\n</html>\",\n+            id=\"index_subdir\",\n+        ),\n     ],\n )\n async def test_access_root_of_static_handler(\n@@ -47,6 +55,7 @@ async def test_access_root_of_static_handler(\n     show_index: bool,\n     status: int,\n     prefix: str,\n+    request_path: str,\n     data: Optional[bytes],\n ) -> None:\n     # Tests the operation of static file server.\n@@ -72,7 +81,94 @@ async def test_access_root_of_static_handler(\n     client = await aiohttp_client(app)\n \n     # Request the root of the static directory.\n-    async with await client.get(prefix) as r:\n+    async with await client.get(request_path) as r:\n+        assert r.status == status\n+\n+        if data:\n+            assert r.headers[\"Content-Type\"] == \"text/html; charset=utf-8\"\n+            read_ = await r.read()\n+            assert read_ == data\n+\n+\n+@pytest.mark.internal  # Dependent on filesystem\n+@pytest.mark.skipif(\n+    not sys.platform.startswith(\"linux\"),\n+    reason=\"Invalid filenames on some filesystems (like Windows)\",\n+)\n+@pytest.mark.parametrize(\n+    \"show_index,status,prefix,request_path,data\",\n+    [\n+        pytest.param(False, 403, \"/\", \"/\", None, id=\"index_forbidden\"),\n+        pytest.param(\n+            True,\n+            200,\n+            \"/\",\n+            \"/\",\n+            b\"<html>\\n<head>\\n<title>Index of /.</title>\\n</head>\\n<body>\\n<h1>Index of\"\n+            b' /.</h1>\\n<ul>\\n<li><a href=\"/%3Cimg%20src=0%20onerror=alert(1)%3E.dir\">&l'\n+            b't;img src=0 onerror=alert(1)&gt;.dir/</a></li>\\n<li><a href=\"/%3Cimg%20sr'\n+            b'c=0%20onerror=alert(1)%3E.txt\">&lt;img src=0 onerror=alert(1)&gt;.txt</a></l'\n+            b\"i>\\n</ul>\\n</body>\\n</html>\",\n+        ),\n+        pytest.param(\n+            True,\n+            200,\n+            \"/static\",\n+            \"/static\",\n+            b\"<html>\\n<head>\\n<title>Index of /.</title>\\n</head>\\n<body>\\n<h1>Index of\"\n+            b' /.</h1>\\n<ul>\\n<li><a href=\"/static/%3Cimg%20src=0%20onerror=alert(1)%3E.'\n+            b'dir\">&lt;img src=0 onerror=alert(1)&gt;.dir/</a></li>\\n<li><a href=\"/stat'\n+            b'ic/%3Cimg%20src=0%20onerror=alert(1)%3E.txt\">&lt;img src=0 onerror=alert(1)&'\n+            b\"gt;.txt</a></li>\\n</ul>\\n</body>\\n</html>\",\n+            id=\"index_static\",\n+        ),\n+        pytest.param(\n+            True,\n+            200,\n+            \"/static\",\n+            \"/static/<img src=0 onerror=alert(1)>.dir\",\n+            b\"<html>\\n<head>\\n<title>Index of /&lt;img src=0 onerror=alert(1)&gt;.dir</t\"\n+            b\"itle>\\n</head>\\n<body>\\n<h1>Index of /&lt;img src=0 onerror=alert(1)&gt;.di\"\n+            b'r</h1>\\n<ul>\\n<li><a href=\"/static/%3Cimg%20src=0%20onerror=alert(1)%3E.di'\n+            b'r/my_file_in_dir\">my_file_in_dir</a></li>\\n</ul>\\n</body>\\n</html>',\n+            id=\"index_subdir\",\n+        ),\n+    ],\n+)\n+async def test_access_root_of_static_handler_xss(\n+    tmp_path: pathlib.Path,\n+    aiohttp_client: AiohttpClient,\n+    show_index: bool,\n+    status: int,\n+    prefix: str,\n+    request_path: str,\n+    data: Optional[bytes],\n+) -> None:\n+    # Tests the operation of static file server.\n+    # Try to access the root of static file server, and make\n+    # sure that correct HTTP statuses are returned depending if we directory\n+    # index should be shown or not.\n+    # Ensure that html in file names is escaped.\n+    # Ensure that links are url quoted.\n+    my_file = tmp_path / \"<img src=0 onerror=alert(1)>.txt\"\n+    my_dir = tmp_path / \"<img src=0 onerror=alert(1)>.dir\"\n+    my_dir.mkdir()\n+    my_file_in_dir = my_dir / \"my_file_in_dir\"\n+\n+    with my_file.open(\"w\") as fw:\n+        fw.write(\"hello\")\n+\n+    with my_file_in_dir.open(\"w\") as fw:\n+        fw.write(\"world\")\n+\n+    app = web.Application()\n+\n+    # Register global static route:\n+    app.router.add_static(prefix, str(tmp_path), show_index=show_index)\n+    client = await aiohttp_client(app)\n+\n+    # Request the root of the static directory.\n+    async with await client.get(request_path) as r:\n         assert r.status == status\n \n         if data:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9482755b40ce69814eea6f65bfbd4c12d1878174",
            "date": "2025-01-10T10:46:29Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "76f4309a6cbfc12d918c65b5bffdcf0d4bb691c6",
            "date": "2025-01-10T10:39:38Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c5c204f8b661bb1c9d183e17b37013ee222b2cbd",
            "date": "2025-01-10T10:37:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a91dc8f78e97f9be30e13c39e457e8e2a2651702",
            "date": "2025-01-08T10:27:45Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "237d46722a0e56363c4a07dcf31e73fe4c2ea392",
            "date": "2025-01-07T11:14:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. A XSS vulnerability exists on index pages for static file handling. This vulnerability is fixed in 3.9.4. We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected. Other users can disable `show_index` if unable to upgrade.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-18T15:15:29.050",
    "last_modified": "2024-11-21T09:04:17.527",
    "fix_date": "2024-04-11T14:54:45Z"
  },
  "references": [
    {
      "url": "https://github.com/aio-libs/aiohttp/commit/28335525d1eac015a7e7584137678cbb6ff19397",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/aio-libs/aiohttp/pull/8319",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/aio-libs/aiohttp/security/advisories/GHSA-7gpw-8wmc-pm8g",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2EXRGTN2WG7VZLUZ7WOXU5GQJKCPPHKP/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NWEI6NIHZ3G7DURDZVMRK7ZEFC2BTD3U/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZIVBMPEY7WWOFMC3CWXFBRQPFECV4SW3/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/aio-libs/aiohttp/commit/28335525d1eac015a7e7584137678cbb6ff19397",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/aio-libs/aiohttp/pull/8319",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/aio-libs/aiohttp/security/advisories/GHSA-7gpw-8wmc-pm8g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2EXRGTN2WG7VZLUZ7WOXU5GQJKCPPHKP/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NWEI6NIHZ3G7DURDZVMRK7ZEFC2BTD3U/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZIVBMPEY7WWOFMC3CWXFBRQPFECV4SW3/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:06.993250",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "aiohttp",
    "owner": "aio-libs",
    "created_at": "2013-10-01T23:04:01Z",
    "updated_at": "2025-01-14T07:45:00Z",
    "pushed_at": "2025-01-13T11:21:32Z",
    "size": 31707,
    "stars": 15317,
    "forks": 2050,
    "open_issues": 250,
    "watchers": 15317,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "3.8",
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "master"
    ],
    "languages": {
      "Python": 2241563,
      "Cython": 41302,
      "Makefile": 5839,
      "Gherkin": 1248,
      "Dockerfile": 298,
      "C": 170,
      "Shell": 148
    },
    "commit_activity": {
      "total_commits_last_year": 2401,
      "avg_commits_per_week": 46.17307692307692,
      "days_active_last_year": 226
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:12:57.567310"
  }
}