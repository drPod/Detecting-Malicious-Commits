{
  "cve_id": "CVE-2024-27628",
  "github_data": {
    "repository": "DCMTK/dcmtk",
    "fix_commit": "ec52e99e1e33fc39810560421c0833b02da567b3",
    "related_commits": [
      "ec52e99e1e33fc39810560421c0833b02da567b3",
      "ec52e99e1e33fc39810560421c0833b02da567b3"
    ],
    "patch_url": "https://github.com/DCMTK/dcmtk/commit/ec52e99e1e33fc39810560421c0833b02da567b3.patch",
    "fix_commit_details": {
      "sha": "ec52e99e1e33fc39810560421c0833b02da567b3",
      "commit_date": "2024-02-20T09:50:28Z",
      "author": {
        "login": "michaelonken",
        "type": "User",
        "stats": {
          "total_commits": 455,
          "average_weekly_commits": 0.7187993680884676,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 184
        }
      },
      "commit_message": {
        "title": "Fixed possible overflows when allocating memory.",
        "length": 135,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 535,
        "additions": 531,
        "deletions": 4
      },
      "files": [
        {
          "filename": "dcmect/libsrc/enhanced_ct.cc",
          "status": "modified",
          "additions": 13,
          "deletions": 1,
          "patch": "@@ -27,6 +27,7 @@\n #include \"dcmtk/dcmect/types.h\"\n #include \"dcmtk/dcmfg/concatenationcreator.h\"\n #include \"dcmtk/dcmfg/concatenationloader.h\"\n+#include \"dcmtk/dcmfg/fgtypes.h\"\n #include \"dcmtk/dcmiod/iodutil.h\"\n #include \"dcmtk/dcmiod/modimagepixel.h\"\n \n@@ -103,8 +104,19 @@ struct EctEnhancedCT::WriteVisitor\n         m_CT.getRows(rows);\n         m_CT.getColumns(cols);\n         const size_t numFrames      = m_CT.m_Frames.size();\n+        if (numFrames > 2147483647)\n+        {\n+            DCMECT_ERROR(\"More than 2147483647 frames provided\");\n+            return FG_EC_PixelDataTooLarge;\n+        }\n+        const size_t numPixelsFrame = OFstatic_cast(size_t, rows) * OFstatic_cast(size_t, cols);\n         const size_t numBytesFrame  = m_CT.m_Frames[0]->length;\n-        const size_t numPixelsFrame = rows * cols;\n+        if (numBytesFrame != numPixelsFrame * 2)\n+        {\n+            DCMECT_ERROR(\"Invalid number of bytes per frame: Expected \" << numPixelsFrame * 2 << \" but got \"\n+              << numBytesFrame << \" frame pixel data\");\n+            return ECT_InvalidPixelInfo;\n+        }\n         // Creates the correct pixel data element, based on the image pixel module used.\n         DcmPixelData* pixData = new DcmPixelData(DCM_PixelData);\n         OFCondition result;"
        },
        {
          "filename": "dcmect/tests/CMakeLists.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n DCMTK_ADD_EXECUTABLE(dcmect_tests\n   tests.cc\n   t_huge_concat.cc\n+  t_overflow.cc\n   t_roundtrip.cc\n )\n "
        },
        {
          "filename": "dcmect/tests/Makefile.dep",
          "status": "modified",
          "additions": 151,
          "deletions": 0,
          "patch": "@@ -154,6 +154,157 @@ t_huge_concat.o: t_huge_concat.cc \\\n  ../../dcmfg/include/dcmtk/dcmfg/fgplanor.h \\\n  ../../dcmfg/include/dcmtk/dcmfg/fgplanpo.h \\\n  ../../dcmfg/include/dcmtk/dcmfg/fgtemporalposition.h\n+t_overflow.o: t_overflow.cc ../../config/include/dcmtk/config/osconfig.h \\\n+ ../include/dcmtk/dcmect/enhanced_ct.h ../include/dcmtk/dcmect/def.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofexport.h \\\n+ ../include/dcmtk/dcmect/types.h ../../oflog/include/dcmtk/oflog/oflog.h \\\n+ ../../oflog/include/dcmtk/oflog/logger.h \\\n+ ../../oflog/include/dcmtk/oflog/config.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofdefine.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofcast.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofstdinc.h \\\n+ ../../oflog/include/dcmtk/oflog/config/defines.h \\\n+ ../../oflog/include/dcmtk/oflog/helpers/threadcf.h \\\n+ ../../oflog/include/dcmtk/oflog/loglevel.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofvector.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oftypes.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofstream.h \\\n+ ../../oflog/include/dcmtk/oflog/tstring.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofstring.h \\\n+ ../../oflog/include/dcmtk/oflog/tchar.h \\\n+ ../../oflog/include/dcmtk/oflog/spi/apndatch.h \\\n+ ../../oflog/include/dcmtk/oflog/appender.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofmem.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofutil.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oftraits.h \\\n+ ../../ofstd/include/dcmtk/ofstd/variadic/tuplefwd.h \\\n+ ../../oflog/include/dcmtk/oflog/layout.h \\\n+ ../../oflog/include/dcmtk/oflog/streams.h \\\n+ ../../oflog/include/dcmtk/oflog/helpers/pointer.h \\\n+ ../../oflog/include/dcmtk/oflog/thread/syncprim.h \\\n+ ../../oflog/include/dcmtk/oflog/spi/filter.h \\\n+ ../../oflog/include/dcmtk/oflog/helpers/lockfile.h \\\n+ ../../oflog/include/dcmtk/oflog/spi/logfact.h \\\n+ ../../oflog/include/dcmtk/oflog/logmacro.h \\\n+ ../../oflog/include/dcmtk/oflog/helpers/snprintf.h \\\n+ ../../oflog/include/dcmtk/oflog/tracelog.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofcond.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofdiag.h \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/push.def \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/useafree.def \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/pop.def \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fginterface.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fg.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgbase.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcitem.h \\\n+ ../../ofstd/include/dcmtk/ofstd/offile.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofstd.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oflist.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oflimits.h \\\n+ ../../config/include/dcmtk/config/arith.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oferror.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dctypes.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcdefine.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcobject.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofglobal.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofthread.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcerror.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcxfer.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvr.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dctag.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dctagkey.h \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/ignrattr.def \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcstack.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dclist.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcpcache.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgtypes.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgdefine.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofmap.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/iodimage.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/iodcommn.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/iodrules.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/iodtypes.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/ioddef.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modcommoninstanceref.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/iodmacro.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcdeftag.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrlo.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcchrstr.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcbytstr.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcelem.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvris.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrus.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrlt.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrcs.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrpn.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modbase.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/iodreferences.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modequipment.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modfor.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modgeneralseries.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modgeneralstudy.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modpatient.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modpatientstudy.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modsopcommon.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modgeneralimage.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modimagepixelvariant.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modimagepixelbase.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofvriant.h \\\n+ ../../ofstd/include/dcmtk/ofstd/variadic/variant.h \\\n+ ../../ofstd/include/dcmtk/ofstd/variadic/helpers.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofalign.h \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/cnvrsn.def \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/vsprfw.def \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/arrybnds.def \\\n+ ../../ofstd/include/dcmtk/ofstd/diag/unrefprm.def \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modacquisitioncontext.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modenhequipment.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modimagepixel.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modmultiframedimension.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modmultiframefg.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/modsynchronisation.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrdt.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofdatime.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofdate.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oftime.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrds.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrfd.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oftempf.h \\\n+ ../../ofstd/include/dcmtk/ofstd/oftest.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofconapp.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofcmdln.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofexbl.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofconsol.h \\\n+ ../../ofstd/include/dcmtk/ofstd/ofexit.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcuid.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcdict.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dchashdi.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcfilefo.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcsequen.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcdatset.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctacquisitiondetails.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctacquisitiontype.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctadditionalxraysource.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrfl.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrsh.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctexposure.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctgeometry.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctimageframetype.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctposition.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctreconstruction.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgcttabledynamics.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgctxraydetails.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgfracon.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrul.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgframeanatomy.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgirradiationeventid.h \\\n+ ../../dcmdata/include/dcmtk/dcmdata/dcvrui.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgpixeltransform.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgpixmsr.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgplanor.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgplanpo.h \\\n+ ../../dcmfg/include/dcmtk/dcmfg/fgrealworldvaluemapping.h \\\n+ ../../dcmiod/include/dcmtk/dcmiod/iodcontentitemmacro.h\n t_roundtrip.o: t_roundtrip.cc \\\n  ../../config/include/dcmtk/config/osconfig.h \\\n  ../../ofstd/include/dcmtk/ofstd/ofmem.h \\"
        },
        {
          "filename": "dcmect/tests/Makefile.in",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -24,10 +24,10 @@ LIBDIRS = -L$(top_srcdir)/libsrc -L$(ofstddir)/libsrc -L$(oflogdir)/libsrc \\\n \t-L$(oficonvdir)/libsrc\n LOCALLIBS = -ldcmect -ldcmfg -ldcmiod -ldcmdata -loflog -lofstd -loficonv \\\n \t$(ZLIBLIBS) $(CHARCONVLIBS) $(MATHLIBS)\n-LOCALINCLUDES = -I$(top_srcdir)/include -I$(ofstddir)/include -I$(oflogdir)/include \\\n+LOCALINCLUDES = -I$(top_srcdir)/include -I$(configdir)/include -I$(ofstddir)/include -I$(oflogdir)/include \\\n \t-I$(dcmdatadir)/include -I$(dcmioddir)/include -I$(dcmfgdir)/include\n \n-test_objs = tests.o t_huge_concat.o t_roundtrip.o\n+test_objs = tests.o t_huge_concat.o t_overflow.cc t_roundtrip.o\n objs = $(test_objs)\n progs = tests\n "
        },
        {
          "filename": "dcmect/tests/t_overflow.cc",
          "status": "added",
          "additions": 362,
          "deletions": 0,
          "patch": "@@ -0,0 +1,362 @@\n+/*\n+ *\n+ *  Copyright (C) 2024, OFFIS e.V.\n+ *  All rights reserved.  See COPYRIGHT file for details.\n+ *\n+ *  This software and supporting documentation were developed by\n+ *\n+ *    OFFIS e.V.\n+ *    R&D Division Health\n+ *    Escherweg 2\n+ *    D-26121 Oldenburg, Germany\n+ *\n+ *\n+ *  Module:  dcmect\n+ *\n+ *  Author:  Daniel Berredo / Michael Onken\n+ *\n+ *  Purpose: Tests that check for pixel data overflow conditions\n+ *\n+ */\n+\n+\n+#include <dcmtk/config/osconfig.h> /* make sure OS specific configuration is included first */\n+\n+#include <dcmtk/dcmect/enhanced_ct.h>\n+\n+#include <dcmtk/ofstd/oftempf.h>\n+#include <dcmtk/ofstd/oftest.h>\n+\n+#include <dcmtk/dcmdata/dcdict.h>\n+#include <dcmtk/dcmdata/dcfilefo.h>\n+\n+#include <dcmtk/dcmfg/fgctacquisitiondetails.h>\n+#include <dcmtk/dcmfg/fgctacquisitiontype.h>\n+#include <dcmtk/dcmfg/fgctadditionalxraysource.h>\n+#include <dcmtk/dcmfg/fgctexposure.h>\n+#include <dcmtk/dcmfg/fgctgeometry.h>\n+#include <dcmtk/dcmfg/fgctimageframetype.h>\n+#include <dcmtk/dcmfg/fgctposition.h>\n+#include <dcmtk/dcmfg/fgctreconstruction.h>\n+#include <dcmtk/dcmfg/fgcttabledynamics.h>\n+#include <dcmtk/dcmfg/fgctxraydetails.h>\n+#include <dcmtk/dcmfg/fgfracon.h>\n+#include <dcmtk/dcmfg/fgframeanatomy.h>\n+#include <dcmtk/dcmfg/fgirradiationeventid.h>\n+#include <dcmtk/dcmfg/fgpixeltransform.h>\n+#include <dcmtk/dcmfg/fgpixmsr.h>\n+#include <dcmtk/dcmfg/fgplanor.h>\n+#include <dcmtk/dcmfg/fgplanpo.h>\n+#include <dcmtk/dcmfg/fgrealworldvaluemapping.h>\n+\n+static const Uint16 NUM_ROWS = 1024;\n+static const Uint16 NUM_COLS = 1;\n+static const Uint16 NUM_FRAMES = 2;\n+static const size_t NUM_PIXELS_PER_FRAME = 1;\n+\n+static OFString EXPECTED_DUMP;\n+\n+static EctEnhancedCT *create();\n+static void configureIOD(EctEnhancedCT *ct);\n+static void setGenericValues(EctEnhancedCT *ct);\n+static void addSharedFGs(EctEnhancedCT *ct);\n+static void addFrames(EctEnhancedCT *ct);\n+static void addDimensions(EctEnhancedCT *ct);\n+\n+\n+OFTEST(dcmect_overflow)\n+{\n+    /* make sure data dictionary is loaded */\n+    if (!dcmDataDict.isDictionaryLoaded())\n+    {\n+        OFCHECK(dcmDataDict.isDictionaryLoaded());\n+    }\n+\n+    // Creation\n+    EctEnhancedCT *ct = create();\n+    configureIOD(ct);\n+    setGenericValues(ct);\n+    addSharedFGs(ct);\n+    addFrames(ct);\n+    addDimensions(ct);\n+\n+    // Write to dataset and compare its dump with expected result\n+    DcmFileFormat dcmff;\n+\n+    OFTempFile tf(O_RDWR, \"\", \"t_overflow\", \".dcm\");\n+    OFCondition result;\n+    result = ct->saveFile(\"output.dcm\", EXS_LittleEndianExplicit);\n+    OFCHECK_MSG(result == ECT_InvalidPixelInfo, result.text());\n+}\n+\n+static EctEnhancedCT *create()\n+{\n+    IODEnhGeneralEquipmentModule::EquipmentInfo eq(\"Open Connections\", \"OC CT\", \"4711\", \"0.1\");\n+    EctEnhancedCT *ct = NULL;\n+    OFCondition result;\n+    result = EctEnhancedCT::create(ct,\n+                                   NUM_ROWS,\n+                                   NUM_COLS,\n+                                   OFFalse,\n+                                   EctTypes::E_ImageType1_Original,\n+                                   EctTypes::DT_ImageType3_Volume,\n+                                   EctTypes::DT_ImageType4_Maximum,\n+                                   \"1\" /* instance number */,\n+                                   EctTypes::E_ContQuali_Research,\n+                                   EctTypes::E_PixelPres_Monochrome,\n+                                   EctTypes::E_VolProps_Volume,\n+                                   EctTypes::DT_VolBasedCalcTechnique_VolumeRender,\n+                                   eq,\n+                                   \"20190801120000\" /* acquisition date */,\n+                                   2.0 /* acquisition duration */);\n+\n+    OFCHECK(result.good());\n+    OFCHECK(ct != OFnullptr);\n+    return ct;\n+}\n+\n+static void configureIOD(EctEnhancedCT *ct)\n+{\n+    if (!ct)\n+        return;\n+}\n+\n+static void setGenericValues(EctEnhancedCT *ct)\n+{\n+    if (!ct)\n+        return;\n+    OFCHECK(ct->getPatient().setPatientName(\"Bond^James\").good());\n+    OFCHECK(ct->getPatient().setPatientID(\"007\").good());\n+    OFCHECK(ct->getPatient().setPatientBirthDate(\"19771007\").good());\n+    OFCHECK(ct->getStudy().setStudyDate(\"20190801\").good());\n+    OFCHECK(ct->getStudy().setStudyTime(\"120000\").good());\n+    OFCHECK(ct->getStudy().setStudyID(\"1\").good());\n+    OFCHECK(ct->getPatientStudy().setPatientAge(\"040Y\").good());\n+    OFCHECK(ct->getSeries().setSeriesDescription(\"Test Description\").good());\n+    OFCHECK(ct->getSeries().setSeriesNumber(\"1\").good());\n+    OFCHECK(ct->getSeries().setPatientPosition(\"HFS\").good());\n+\n+    // Those values are usually computed automatically. UIDS are generated and date/times are set to current values.\n+    // But in order to compare the \"old\" dump with the freshly created image attributes, we set some values manually,\n+    // so that they are not overwritten with new, automatically created values later.\n+    OFCHECK(ct->getStudy().setStudyInstanceUID(\"1.2.276.0.7230010.3.1.2.8323329.14863.1565940357.864811\").good());\n+    OFCHECK(ct->getFrameOfReference().setFrameOfReferenceUID(\"2.25.30853397773651184949181049330553108086\").good());\n+    OFCHECK(ct->getSeries().setSeriesInstanceUID(\"1.2.276.0.7230010.3.1.3.8323329.14863.1565940357.864812\").good());\n+    OFCHECK(ct->getSOPCommon().setSOPInstanceUID(\"1.2.276.0.7230010.3.1.4.8323329.14863.1565940357.864813\").good());\n+\n+    OFCHECK(ct->getIODMultiFrameFGModule().setContentTime(\"092557\").good());\n+    OFCHECK(ct->getIODMultiFrameFGModule().setContentDate(\"20190816\").good());\n+}\n+\n+static void addSharedFGs(EctEnhancedCT *ct)\n+{\n+    if (!ct)\n+        return;\n+\n+    FGPixelMeasures meas;\n+    OFCHECK(meas.setPixelSpacing(\"0.1\\\\0.1\").good());\n+    OFCHECK(meas.setSliceThickness(\"1.0\").good());\n+    OFCHECK(meas.setSpacingBetweenSlices(\"0.05\").good());\n+\n+    FGPlanePosPatient planpo;\n+    OFCHECK(planpo.setImagePositionPatient(\"0.0\", \"0.0\", \"0.0\").good());\n+\n+    FGPlaneOrientationPatient planor;\n+    OFCHECK(planor.setImageOrientationPatient(\"1.0\", \"0.0\", \"0.0\", \"0.0\", \"1.0\", \"0.0\").good());\n+\n+    FGFrameAnatomy ana;\n+    OFCHECK(ana.setLaterality(FGFrameAnatomy::LATERALITY_BOTH).good());\n+    OFCHECK(ana.getAnatomy().getAnatomicRegion().set(\"12738006\", \"SCT\", \"Brain\").good());\n+\n+    FGIrradiationEventIdentification irr;\n+    OFCHECK(irr.setIrradiationEventUID(\"2.25.30853892236613436472911970638347155062\").good());\n+\n+    FGCTImageFrameType itype;\n+    OFCHECK(itype.setFrameType(\"ORIGINAL\\\\PRIMARY\\\\VOLUME\\\\MAXIMUM\").good());\n+    OFCHECK(itype.setPixelPresentation(FGCTImageFrameType::E_PixelPres_Monochrome).good());\n+    OFCHECK(itype.setVolumetricProperties(FGCTImageFrameType::E_VolProp_Volume).good());\n+    OFCHECK(itype.setVolumeBasedCalculationTechnique(FGCTImageFrameType::DT_VolBasedCalcTechnique_VolumeRender).good());\n+\n+    FGCTAcquisitionType atype;\n+    OFCHECK(atype.setAcquisitionType(FGCTAcquisitionType::DT_AcquisitionType_ConstantAngle).good());\n+    OFCHECK(atype.setTubeAngle(0.1).good());\n+    OFCHECK(atype.setConstantVolumeFlag(FGCTAcquisitionType::E_ConstVol_Yes).good());\n+    OFCHECK(atype.setFluoroscopyFlag(FGCTAcquisitionType::E_Fluoroscopy_No).good());\n+\n+    FGCTAcquisitionDetails adetails;\n+    FGCTAcquisitionDetails::FGCTAcquisitionDetailsItem *item = new FGCTAcquisitionDetails::FGCTAcquisitionDetailsItem();\n+    OFCHECK(item->setRotationDirection(FGCTAcquisitionDetails::E_RotationDirection_CW).good());\n+    OFCHECK(item->setRevolutionTime(5).good());\n+    OFCHECK(item->setSingleCollimationWidth(1).good());\n+    OFCHECK(item->setTotalCollimationWidth(10).good());\n+    OFCHECK(item->setTableHeight(50).good());\n+    OFCHECK(item->setGantryDetectorTilt(5).good());\n+    OFCHECK(item->setDataCollectionDiameter(20).good());\n+    adetails.getCTAcquisitionDetailsItems().push_back(item);\n+\n+    FGCTTableDynamics dyn;\n+    FGCTTableDynamics::FGCTTableDynamicsItem *dyn_item = new FGCTTableDynamics::FGCTTableDynamicsItem;\n+    OFCHECK(dyn_item);\n+    if (dyn_item)\n+    {\n+        OFCHECK(dyn_item->setTableSpeed(1.0).good());\n+        OFCHECK(dyn_item->setTableFeedPerRotation(0.1).good());\n+        OFCHECK(dyn_item->setSpiralPitchFactor(0.2).good());\n+        dyn.getCTTableDynamicsItems().push_back(dyn_item);\n+    }\n+\n+    FGCTPosition pos;\n+    OFCHECK(pos.setTablePosition(100.0).good());\n+    OFCHECK(pos.setReconstructionTargetCenterPatient(OFVector<Float64>(3, 1.0)).good());\n+    OFCHECK(pos.setDataCollectionCenterPatient(OFVector<Float64>(3, 2.0)).good());\n+\n+    FGCTGeometry geo;\n+    FGCTGeometry::FGCTGeometryItem *geo_item = new FGCTGeometry::FGCTGeometryItem;\n+    if (geo_item)\n+    {\n+        OFCHECK(geo_item->setDistanceSourceToDataCollectionCenter(5.0).good());\n+        OFCHECK(geo_item->setDistanceSourceToDetector(0.5).good());\n+        geo.getCTGeometryItems().push_back(geo_item);\n+    }\n+\n+    FGCTReconstruction rec;\n+    OFCHECK(rec.setConvolutionKernel(\"DUMMY\").good());\n+    OFCHECK(rec.setConvolutionKernelGroup(\"DUMMYGROUP\").good());\n+    OFCHECK(rec.setImageFilter(\"FILTER\").good());\n+    OFCHECK(rec.setReconstructionAlgorithm(\"ALGO\").good());\n+    OFCHECK(rec.setReconstructionAngle(90.0).good());\n+    OFCHECK(rec.setReconstructionDiameter(100.0).good());\n+    // Not permitted if Reconstruction Diameter is provided instead\n+    // OFCHECK(rec.setReconstructionFieldOfView(100.0, 100.0).good());\n+    OFCHECK(rec.setReconstructionPixelSpacing(0.1, 0.1).good());\n+\n+    FGCTExposure exp;\n+    FGCTExposure::FGCTExposureItem *exp_item = new FGCTExposure::FGCTExposureItem;\n+    if (exp_item)\n+    {\n+        OFCHECK(exp_item->setCTDIVol(0.1).good());\n+        CodeSequenceMacro *phantom_item = new CodeSequenceMacro(\"113682\", \"DCM\", \"ACR Accreditation Phantom - CT\");\n+        exp_item->getCTDIPhantomTypeCodeSequence().push_back(phantom_item);\n+        OFCHECK(exp_item->setExposureInMas(0.3).good());\n+        OFCHECK(exp_item->setExposureModulationType(\"WEIRD\").good());\n+        OFCHECK(exp_item->setExposureTimeInMs(0.4).good());\n+        OFCHECK(exp_item->setImageAndFluoroscopyAreaDoseProduct(0.5).good());\n+        OFCHECK(exp_item->setWaterEquivalentDiameter(0.6).good());\n+        CodeSequenceMacro *water_code = new CodeSequenceMacro(\"113987\", \"DCM\", \"AAPM 220\");\n+        exp_item->getWaterEquivalentDiameterCalculationMethodCodeSequence().push_back(water_code);\n+        OFCHECK(exp_item->setXRayTubeCurrentInMa(0.7).good());\n+        exp.getCTExposureItems().push_back(exp_item);\n+    }\n+\n+    FGCTXRayDetails det;\n+    FGCTXRayDetails::FGCTXRayDetailsItem *det_item = new FGCTXRayDetails::FGCTXRayDetailsItem;\n+    if (det_item)\n+    {\n+        OFCHECK(det_item->setCalciumScoringMassFactorDevice(OFVector<Float32>(3, 1)).good());\n+        OFCHECK(det_item->setCalciumScoringMassFactorPatient(2).good());\n+        OFCHECK(det_item->setEnergyWeightingFactor(3).good());\n+        OFCHECK(det_item->setFilterMaterial(\"FILTER_MATERIAL\").good());\n+        OFCHECK(det_item->setFilterType(\"FILTER_TYPE\").good());\n+        OFCHECK(det_item->setFocalSpots(OFVector<Float64>(4, 4.4)).good());\n+        OFCHECK(det_item->setKVP(5.0).good());\n+        det.getCTXRayDetailsItems().push_back(det_item);\n+    }\n+\n+    FGPixelValueTransformation trans;\n+    trans.setFGType(FGPixelValueTransformation::E_PixelValTrans_CT);\n+    trans.setRescaleIntercept(\"0\");\n+    trans.setRescaleSlope(\"1\");\n+    trans.setRescaleType(\"HU\");\n+\n+    FGCTAdditionalXRaySource asrc;\n+    FGCTAdditionalXRaySource::FGCTAdditionalXRaySourceItem *asrc_item = new FGCTAdditionalXRaySource::FGCTAdditionalXRaySourceItem;\n+    if (asrc_item)\n+    {\n+        OFCHECK(asrc_item->setDataCollectionDiameter(1.0).good());\n+        OFCHECK(asrc_item->setEnergyWeightingFactor(2.0).good());\n+        OFCHECK(asrc_item->setExposureInmAs(3.0).good());\n+        OFCHECK(asrc_item->setFilterMaterial(\"FILTER_MATERIAL\").good());\n+        OFCHECK(asrc_item->setFilterType(\"FILTER_TYPE\").good());\n+        OFCHECK(asrc_item->setFocalSpots(OFVector<Float64>(4, 4.4)).good());\n+        OFCHECK(asrc_item->setKVP(5).good());\n+        OFCHECK(asrc_item->setXRayTubeCurrentInmA(6).good());\n+        asrc.getCTAdditionalXRaySourceItems().push_back(asrc_item);\n+    }\n+\n+    OFCHECK(ct->addForAllFrames(meas).good());\n+    OFCHECK(ct->addForAllFrames(planpo).good());\n+    OFCHECK(ct->addForAllFrames(planor).good());\n+    OFCHECK(ct->addForAllFrames(ana).good());\n+    OFCHECK(ct->addForAllFrames(irr).good());\n+    OFCHECK(ct->addForAllFrames(itype).good());\n+    OFCHECK(ct->addForAllFrames(atype).good());\n+    OFCHECK(ct->addForAllFrames(adetails).good());\n+    OFCHECK(ct->addForAllFrames(dyn).good());\n+    OFCHECK(ct->addForAllFrames(pos).good());\n+    OFCHECK(ct->addForAllFrames(geo).good());\n+    OFCHECK(ct->addForAllFrames(rec).good());\n+    OFCHECK(ct->addForAllFrames(exp).good());\n+    OFCHECK(ct->addForAllFrames(det).good());\n+    OFCHECK(ct->addForAllFrames(trans).good());\n+    OFCHECK(ct->addForAllFrames(asrc).good());\n+}\n+\n+static void addFrames(EctEnhancedCT *ct)\n+{\n+    if (!ct)\n+        return;\n+\n+    FGFrameContent *fg = new FGFrameContent();\n+    fg->setStackID(\"1\");\n+    OFCHECK(fg);\n+    if (fg)\n+    {\n+        EctEnhancedCT::FramesType frames = ct->getFrames();\n+        for (Uint16 frameNo = 1; frameNo <= NUM_FRAMES; frameNo++)\n+        {\n+            OFCHECK(fg->setFrameAcquisitionNumber(frameNo).good());\n+            OFCHECK(fg->setFrameReferenceDateTime(\"20190816092557\").good());\n+            OFCHECK(fg->setFrameAcquisitionDateTime(\"20190816092557\").good());\n+            OFCHECK(fg->setFrameAcquisitionDuration(0.001).good());\n+            OFCHECK(fg->setInStackPositionNumber(frameNo).good());\n+            OFCHECK(fg->setDimensionIndexValues(1, 0).good());\n+            OFCHECK(fg->setDimensionIndexValues(frameNo, 1).good());\n+            OFVector<FGBase *> groups;\n+            groups.push_back(fg);\n+\n+            Uint16 *data = new Uint16[NUM_PIXELS_PER_FRAME];\n+            for (size_t i = 0; i < NUM_PIXELS_PER_FRAME; ++i)\n+            {\n+                data[i] = 0x4141;\n+            }\n+            OFCHECK(\n+                OFget<EctEnhancedCT::Frames<Uint16>>(&frames)->addFrame(data, NUM_PIXELS_PER_FRAME, groups).good());\n+            delete[] data;\n+        }\n+    }\n+    delete fg;\n+}\n+\n+static void addDimensions(EctEnhancedCT *ct)\n+{\n+    if (!ct)\n+        return;\n+    IODMultiframeDimensionModule &dims = ct->getDimensions();\n+    OFCHECK(dims.addDimensionIndex(\n+                    DCM_StackID, \"2.25.30855560781715986879861690673941231222\", DCM_FrameContentSequence, \"STACK_DIM\")\n+                .good());\n+    OFCHECK(dims.addDimensionIndex(DCM_InStackPositionNumber,\n+                                   \"2.25.30855560781715986879861690673941231222\",\n+                                   DCM_FrameContentSequence,\n+                                   \"STACK_DIM\")\n+                .good());\n+    OFunique_ptr<IODMultiframeDimensionModule::DimensionOrganizationItem> org(\n+        new IODMultiframeDimensionModule::DimensionOrganizationItem);\n+    if (org)\n+    {\n+        org->setDimensionOrganizationUID(\"2.25.30855560781715986879861690673941231222\");\n+        dims.getDimensionOrganizationSequence().push_back(org.release());\n+    }\n+}\n+\n+"
        },
        {
          "filename": "dcmect/tests/tests.cc",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n /*\n  *\n- *  Copyright (C) 2019, OFFIS e.V.\n+ *  Copyright (C) 2019-2024, OFFIS e.V.\n  *  All rights reserved.  See COPYRIGHT file for details.\n  *\n  *  This software and supporting documentation were developed by\n@@ -23,5 +23,6 @@\n #include \"dcmtk/ofstd/oftest.h\"\n \n OFTEST_REGISTER(dcmect_huge_concat);\n+OFTEST_REGISTER(dcmect_overflow);\n OFTEST_REGISTER(dcmect_roundtrip);\n OFTEST_MAIN(\"dcmect\")"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4aec0dc8f970d582950d008415cf5479bf88c55c",
            "date": "2025-01-13T16:59:26Z",
            "author_login": "eichelberg"
          },
          {
            "sha": "cf2fc0c0c53bd32bb292bbdb18c331d99e2f750c",
            "date": "2025-01-13T16:46:40Z",
            "author_login": "eichelberg"
          },
          {
            "sha": "a8e1c669f7ceafca131cdf03a863826a3ba295c1",
            "date": "2025-01-13T11:08:32Z",
            "author_login": "jriesmeier"
          },
          {
            "sha": "89a6e399f1e17d08a8bc8cdaa05b2ac9a50cd4f6",
            "date": "2025-01-11T16:59:39Z",
            "author_login": "jriesmeier"
          },
          {
            "sha": "e9c02436fad51a35c67acb9e145e38bacd3247af",
            "date": "2025-01-11T16:52:20Z",
            "author_login": "jriesmeier"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-120",
    "description": "Buffer Overflow vulnerability in DCMTK v.3.6.8 allows an attacker to execute arbitrary code via the EctEnhancedCT method component.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-28T19:15:05.180",
    "last_modified": "2024-11-21T09:04:49.920",
    "fix_date": "2024-02-20T09:50:28Z"
  },
  "references": [
    {
      "url": "https://github.com/DCMTK/dcmtk/commit/ec52e99e1e33fc39810560421c0833b02da567b3",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://support.dcmtk.org/redmine/issues/1108",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/DCMTK/dcmtk/commit/ec52e99e1e33fc39810560421c0833b02da567b3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.dcmtk.org/redmine/issues/1108",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.872073",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dcmtk",
    "owner": "DCMTK",
    "created_at": "2017-09-09T08:35:42Z",
    "updated_at": "2025-01-14T09:33:05Z",
    "pushed_at": "2025-01-14T09:48:53Z",
    "size": 40118,
    "stars": 762,
    "forks": 320,
    "open_issues": 12,
    "watchers": 762,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 35586533,
      "C": 33201754,
      "Roff": 1573409,
      "CMake": 294143,
      "Makefile": 241685,
      "Shell": 121599,
      "Yacc": 30565,
      "M4": 21757,
      "Perl": 14706,
      "Lex": 11428,
      "Tcl": 10289,
      "CSS": 2444,
      "AMPL": 1870,
      "HTML": 177
    },
    "commit_activity": {
      "total_commits_last_year": 228,
      "avg_commits_per_week": 4.384615384615385,
      "days_active_last_year": 98
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:00:16.534188"
  }
}