{
  "cve_id": "CVE-2024-27915",
  "github_data": {
    "repository": "sulu/sulu",
    "fix_commit": "ec9c3f99e15336dc4f6877f512300f231c17c6da",
    "related_commits": [
      "ec9c3f99e15336dc4f6877f512300f231c17c6da",
      "ec9c3f99e15336dc4f6877f512300f231c17c6da"
    ],
    "patch_url": "https://github.com/sulu/sulu/commit/ec9c3f99e15336dc4f6877f512300f231c17c6da.patch",
    "fix_commit_details": {
      "sha": "ec9c3f99e15336dc4f6877f512300f231c17c6da",
      "commit_date": "2024-03-04T12:53:32Z",
      "author": {
        "login": "alexander-schranz",
        "type": "User",
        "stats": {
          "total_commits": 1822,
          "average_weekly_commits": 3.031613976705491,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 342
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-jr83-m233-gg6p",
        "length": 629,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 653,
        "additions": 429,
        "deletions": 224
      },
      "files": [
        {
          "filename": "phpstan-baseline.neon",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -29621,12 +29621,12 @@ parameters:\n \t\t\tpath: src/Sulu/Bundle/SecurityBundle/EventListener/SuluSecurityListener.php\n \n \t\t-\n-\t\t\tmessage: \"#^If condition is always true\\\\.$#\"\n+\t\t\tmessage: \"#^Method Sulu\\\\\\\\Bundle\\\\\\\\SecurityBundle\\\\\\\\EventListener\\\\\\\\SystemListener\\\\:\\\\:onKernelRequest\\\\(\\\\) has no return type specified\\\\.$#\"\n \t\t\tcount: 1\n \t\t\tpath: src/Sulu/Bundle/SecurityBundle/EventListener/SystemListener.php\n \n \t\t-\n-\t\t\tmessage: \"#^Method Sulu\\\\\\\\Bundle\\\\\\\\SecurityBundle\\\\\\\\EventListener\\\\\\\\SystemListener\\\\:\\\\:onKernelRequest\\\\(\\\\) has no return type specified\\\\.$#\"\n+\t\t\tmessage: \"#^Property Sulu\\\\\\\\Bundle\\\\\\\\SecurityBundle\\\\\\\\EventListener\\\\\\\\SystemListener\\\\:\\\\:\\\\$requestAnalyzer is never read, only written\\\\.$#\"\n \t\t\tcount: 1\n \t\t\tpath: src/Sulu/Bundle/SecurityBundle/EventListener/SystemListener.php\n \n@@ -30550,11 +30550,6 @@ parameters:\n \t\t\tcount: 1\n \t\t\tpath: src/Sulu/Bundle/SecurityBundle/Tests/Unit/EventListener/SuluSecurityListenerTest.php\n \n-\t\t-\n-\t\t\tmessage: \"#^Method Sulu\\\\\\\\Bundle\\\\\\\\SecurityBundle\\\\\\\\EventListener\\\\\\\\SystemListenerTest\\\\:\\\\:provideSetWebsiteSystem\\\\(\\\\) has no return type specified\\\\.$#\"\n-\t\t\tcount: 1\n-\t\t\tpath: src/Sulu/Bundle/SecurityBundle/Tests/Unit/EventListener/SystemListenerTest.php\n-\n \t\t-\n \t\t\tmessage: \"#^Class Sulu\\\\\\\\Bundle\\\\\\\\SecurityBundle\\\\\\\\Security\\\\\\\\AuthenticationEntryPoint does not have a constructor and must be instantiated without any parameters\\\\.$#\"\n \t\t\tcount: 1\n@@ -34920,6 +34915,11 @@ parameters:\n \t\t\tcount: 1\n \t\t\tpath: src/Sulu/Bundle/WebsiteBundle/Routing/ContentRouteProvider.php\n \n+\t\t-\n+\t\t\tmessage: \"#^Property Sulu\\\\\\\\Bundle\\\\\\\\WebsiteBundle\\\\\\\\Routing\\\\\\\\ContentRouteProvider\\\\:\\\\:\\\\$securityChecker is never read, only written\\\\.$#\"\n+\t\t\tcount: 1\n+\t\t\tpath: src/Sulu/Bundle/WebsiteBundle/Routing/ContentRouteProvider.php\n+\n \t\t-\n \t\t\tmessage: \"#^Strict comparison using \\\\=\\\\=\\\\= between null and string will always evaluate to false\\\\.$#\"\n \t\t\tcount: 1"
        },
        {
          "filename": "src/Sulu/Bundle/CoreBundle/Resources/config/request_analyzer.xml",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -51,6 +51,12 @@\n             <tag name=\"sulu.context\" context=\"website\"/>\n             <tag name=\"sulu.request_attributes\" priority=\"-64\"/>\n         </service>\n+        <service id=\"sulu_core.request_processor.system\"\n+                 class=\"Sulu\\Component\\Webspace\\Analyzer\\Attributes\\SystemRequestProcessor\">\n+            <argument type=\"service\" id=\"sulu_security.system_store\" />\n+            <argument>%sulu.context%</argument>\n+            <tag name=\"sulu.request_attributes\" priority=\"-32\"/>\n+        </service>\n         <service id=\"sulu_core.request_processor.date_time\"\n                  class=\"Sulu\\Component\\Webspace\\Analyzer\\Attributes\\DateTimeRequestProcessor\">\n             <tag name=\"sulu.context\" context=\"website\"/>"
        },
        {
          "filename": "src/Sulu/Bundle/SecurityBundle/EventListener/SystemListener.php",
          "status": "modified",
          "additions": 7,
          "deletions": 12,
          "patch": "@@ -27,7 +27,7 @@ class SystemListener implements EventSubscriberInterface\n     private $systemStore;\n \n     /**\n-     * @var RequestAnalyzerInterface\n+     * @var RequestAnalyzerInterface|null\n      */\n     private $requestAnalyzer;\n \n@@ -38,10 +38,15 @@ class SystemListener implements EventSubscriberInterface\n \n     public function __construct(\n         SystemStoreInterface $systemStore,\n-        RequestAnalyzerInterface $requestAnalyzer,\n+        ?RequestAnalyzerInterface $requestAnalyzer,\n         string $context\n     ) {\n         $this->systemStore = $systemStore;\n+\n+        if (null !== $requestAnalyzer) {\n+            @trigger_deprecation('sulu/sulu', '2.4', 'The argument \"%s\" in class \"%s\" is deprecated and not longer required set `null` instead.', RequestAnalyzerInterface::class, __CLASS__);\n+        }\n+\n         $this->requestAnalyzer = $requestAnalyzer;\n         $this->context = $context;\n     }\n@@ -58,15 +63,5 @@ public function onKernelRequest(RequestEvent $requestEvent)\n \n             return;\n         }\n-\n-        $webspace = $this->requestAnalyzer->getWebspace();\n-        if ($webspace) {\n-            $security = $webspace->getSecurity();\n-            if ($security) {\n-                $this->systemStore->setSystem($security->getSystem());\n-\n-                return;\n-            }\n-        }\n     }\n }"
        },
        {
          "filename": "src/Sulu/Bundle/SecurityBundle/Resources/config/services.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -306,7 +306,7 @@\n \n         <service id=\"sulu_security.system_listener\" class=\"Sulu\\Bundle\\SecurityBundle\\EventListener\\SystemListener\">\n             <argument type=\"service\" id=\"sulu_security.system_store\" />\n-            <argument type=\"service\" id=\"sulu_core.webspace.request_analyzer\"/>\n+            <argument>null</argument>\n             <argument>%sulu.context%</argument>\n \n             <tag name=\"kernel.event_subscriber\"/>"
        },
        {
          "filename": "src/Sulu/Bundle/SecurityBundle/Tests/Unit/EventListener/SystemListenerTest.php",
          "status": "modified",
          "additions": 0,
          "deletions": 29,
          "patch": "@@ -15,8 +15,6 @@\n use Prophecy\\Prophecy\\ObjectProphecy;\n use Sulu\\Bundle\\SecurityBundle\\System\\SystemStoreInterface;\n use Sulu\\Component\\Webspace\\Analyzer\\RequestAnalyzerInterface;\n-use Sulu\\Component\\Webspace\\Security;\n-use Sulu\\Component\\Webspace\\Webspace;\n use Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\n \n class SystemListenerTest extends TestCase\n@@ -46,33 +44,6 @@ public function testSetAdminSystem(): void\n         $this->systemStore->setSystem('Sulu')->shouldBeCalled();\n     }\n \n-    public function provideSetWebsiteSystem()\n-    {\n-        return [\n-            ['sulu-test'],\n-            ['sulu-blog'],\n-        ];\n-    }\n-\n-    /**\n-     * @dataProvider provideSetWebsiteSystem\n-     */\n-    public function testSetWebsiteSystem(string $system): void\n-    {\n-        $systemListener = $this->createSystemListener('website');\n-        $requestEvent = $this->prophesize(RequestEvent::class);\n-\n-        $webspace = new Webspace();\n-        $security = new Security();\n-        $security->setSystem($system);\n-        $webspace->setSecurity($security);\n-        $this->requestAnalyzer->getWebspace()->willReturn($webspace);\n-\n-        $systemListener->onKernelRequest($requestEvent->reveal());\n-\n-        $this->systemStore->setSystem($system)->shouldBeCalled();\n-    }\n-\n     private function createSystemListener(string $context): SystemListener\n     {\n         return new SystemListener($this->systemStore->reveal(), $this->requestAnalyzer->reveal(), $context);"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/EventListener/RouterListener.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -54,6 +54,7 @@ public function onKernelRequest(RequestEvent $event)\n         // This call is required in all cases, because the default router needs our webspace information\n         // Would be nice to also only call this if the _requestAnalyzer attribute is set, but it's set on the next line\n         $this->requestAnalyzer->analyze($request);\n+\n         $this->baseRouteListener->onKernelRequest($event);\n         if (false !== $request->attributes->getBoolean(static::REQUEST_ANALYZER, true)) {\n             $this->requestAnalyzer->validate($request);"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/EventListener/SecurityListener.php",
          "status": "added",
          "additions": 83,
          "deletions": 0,
          "patch": "@@ -0,0 +1,83 @@\n+<?php\n+\n+/*\n+ * This file is part of Sulu.\n+ *\n+ * (c) Sulu GmbH\n+ *\n+ * This source file is subject to the MIT license that is bundled\n+ * with this source code in the file LICENSE.\n+ */\n+\n+namespace Sulu\\Bundle\\WebsiteBundle\\EventListener;\n+\n+use Sulu\\Bundle\\PageBundle\\Document\\BasePageDocument;\n+use Sulu\\Component\\Content\\Compat\\Structure\\PageBridge;\n+use Sulu\\Component\\DocumentManager\\Subscriber\\EventSubscriberInterface;\n+use Sulu\\Component\\Security\\Authorization\\PermissionTypes;\n+use Sulu\\Component\\Security\\Authorization\\SecurityCheckerInterface;\n+use Sulu\\Component\\Security\\Authorization\\SecurityCondition;\n+use Sulu\\Component\\Webspace\\Analyzer\\Attributes\\RequestAttributes;\n+use Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\n+use Symfony\\Component\\HttpKernel\\KernelEvents;\n+\n+class SecurityListener implements EventSubscriberInterface\n+{\n+    /**\n+     * @var SecurityCheckerInterface|null\n+     */\n+    private $securityChecker;\n+\n+    public function __construct(\n+        ?SecurityCheckerInterface $securityChecker = null\n+    ) {\n+        $this->securityChecker = $securityChecker;\n+    }\n+\n+    public static function getSubscribedEvents(): array\n+    {\n+        return [\n+            KernelEvents::REQUEST => [\n+                ['onKernelRequest', 7], // set the security listener after the firewall and after the routing listener\n+            ],\n+        ];\n+    }\n+\n+    public function onKernelRequest(RequestEvent $event): void\n+    {\n+        $request = $event->getRequest();\n+\n+        if (null === $this->securityChecker) {\n+            return;\n+        }\n+\n+        $requestAttributes = $request->attributes->get('_sulu');\n+        if (!$requestAttributes instanceof RequestAttributes) {\n+            return;\n+        }\n+\n+        $webspace = $requestAttributes->getAttribute('webspace');\n+\n+        $structure = $request->attributes->get('structure');\n+        if (!$structure instanceof PageBridge) {\n+            return;\n+        }\n+\n+        $document = $structure->getDocument();\n+        if (!$document instanceof BasePageDocument) {\n+            return;\n+        }\n+\n+        if ($webspace->hasWebsiteSecurity()) {\n+            $this->securityChecker->checkPermission(\n+                new SecurityCondition(\n+                    'sulu.webspaces.' . $document->getWebspaceName(),\n+                    $document->getLocale(),\n+                    \\get_class($document),\n+                    $document->getUuid()\n+                ),\n+                PermissionTypes::VIEW\n+            );\n+        }\n+    }\n+}"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Resources/config/services.xml",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -299,6 +299,13 @@\n             <tag name=\"kernel.event_subscriber\"/>\n         </service>\n \n+        <service id=\"sulu_website.event_listener.security_listener\"\n+                 class=\"Sulu\\Bundle\\WebsiteBundle\\EventListener\\SecurityListener\">\n+            <argument type=\"service\" id=\"sulu_security.security_checker\" on-invalid=\"null\"/>\n+\n+            <tag name=\"kernel.event_subscriber\"/>\n+        </service>\n+\n         <!-- reference-store -->\n         <service id=\"sulu_website.reference_store_pool\"\n                  class=\"Sulu\\Bundle\\WebsiteBundle\\ReferenceStore\\ReferenceStorePool\">"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Resources/config/website.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@\n             <argument type=\"service\" id=\"sulu.content.structure_manager\"/>\n             <argument type=\"service\" id=\"sulu_core.webspace.webspace_manager\"/>\n             <argument type=\"service\" id=\"sulu_core.webspace.request_analyzer\"/>\n-            <argument type=\"service\" id=\"sulu_security.security_checker\" on-invalid=\"null\"/>\n+            <argument>null</argument><!-- not longer required -->\n             <argument type=\"collection\" />\n \n             <tag name=\"sulu.context\" context=\"website\"/>"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Routing/ContentRouteProvider.php",
          "status": "modified",
          "additions": 2,
          "deletions": 14,
          "patch": "@@ -24,16 +24,15 @@\n use Sulu\\Component\\Content\\Exception\\ResourceLocatorNotFoundException;\n use Sulu\\Component\\Content\\Types\\ResourceLocator\\Strategy\\ResourceLocatorStrategyPoolInterface;\n use Sulu\\Component\\DocumentManager\\DocumentManagerInterface;\n-use Sulu\\Component\\Security\\Authorization\\PermissionTypes;\n use Sulu\\Component\\Security\\Authorization\\SecurityCheckerInterface;\n-use Sulu\\Component\\Security\\Authorization\\SecurityCondition;\n use Sulu\\Component\\Webspace\\Analyzer\\Attributes\\RequestAttributes;\n use Sulu\\Component\\Webspace\\Analyzer\\RequestAnalyzerInterface;\n use Sulu\\Component\\Webspace\\Manager\\WebspaceManagerInterface;\n use Symfony\\Cmf\\Component\\Routing\\RouteProviderInterface;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\Routing\\Route;\n use Symfony\\Component\\Routing\\RouteCollection;\n+use Webmozart\\Assert\\Assert;\n \n /**\n  * The PortalRouteProvider should load the dynamic routes created by Sulu.\n@@ -97,6 +96,7 @@ public function __construct(\n         $this->webspaceManager = $webspaceManager;\n         $this->requestAnalyzer = $requestAnalyzer;\n         $this->securityChecker = $securityChecker;\n+        Assert::null($securityChecker, 'The security checker should be called by the SecurityListener not the ContentRouteProvider.'); // people who overwrite the ContentRouteProvider should make aware of that they also need to refactor this\n         $this->defaultOptions = $defaultOptions;\n     }\n \n@@ -166,18 +166,6 @@ public function getRouteCollectionForRequest(Request $request)\n                 return $collection;\n             }\n \n-            if ($this->securityChecker && $portal->getWebspace()->hasWebsiteSecurity()) {\n-                $this->securityChecker->checkPermission(\n-                    new SecurityCondition(\n-                        'sulu.webspaces.' . $document->getWebspaceName(),\n-                        $document->getLocale(),\n-                        \\get_class($document),\n-                        $document->getUuid()\n-                    ),\n-                    PermissionTypes::VIEW\n-                );\n-            }\n-\n             if (\\preg_match('/\\/$/', $resourceLocator) && ('/' !== $resourceLocator || $prefix)) {\n                 // redirect page to page without slash at the end\n                 $url = $prefix . \\rtrim($resourceLocator, '/');"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Tests/Application/Kernel.php",
          "status": "modified",
          "additions": 40,
          "deletions": 1,
          "patch": "@@ -12,18 +12,27 @@\n namespace Sulu\\Bundle\\WebsiteBundle\\Tests\\Application;\n \n use Sulu\\Bundle\\TestBundle\\Kernel\\SuluTestKernel;\n+use Symfony\\Bundle\\SecurityBundle\\SecurityBundle;\n use Symfony\\Component\\Config\\Loader\\LoaderInterface;\n \n class Kernel extends SuluTestKernel\n {\n+    /**\n+     * @var string\n+     */\n+    private $appContext;\n+\n     /**\n      * @param string $environment\n      * @param bool $debug\n      * @param string $suluContext\n      */\n     public function __construct($environment, $debug, $suluContext = self::CONTEXT_ADMIN)\n     {\n-        parent::__construct($environment, $debug, $suluContext);\n+        $envParts = \\explode('_', $environment, 2);\n+        $this->appContext = $envParts[1] ?? '';\n+\n+        parent::__construct($envParts[0], $debug, $suluContext);\n     }\n \n     public function registerContainerConfiguration(LoaderInterface $loader): void\n@@ -32,5 +41,35 @@ public function registerContainerConfiguration(LoaderInterface $loader): void\n \n         $context = $this->getContext();\n         $loader->load(__DIR__ . '/config/config_' . $context . '.yml');\n+        if ('' !== $this->appContext) {\n+            $loader->load(__DIR__ . '/config/config_' . $this->appContext . '.yml');\n+        }\n+    }\n+\n+    public function registerBundles(): iterable\n+    {\n+        $bundles = parent::registerBundles();\n+\n+        if ('with_security' === $this->appContext) {\n+            $bundles[] = new SecurityBundle();\n+        }\n+\n+        return $bundles;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getCacheDir()\n+    {\n+        return parent::getCacheDir() . \\ltrim('/' . $this->appContext);\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getCommonCacheDir()\n+    {\n+        return parent::getCommonCacheDir() . \\ltrim('/' . $this->appContext);\n     }\n }"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Tests/Application/config/config_with_security.yml",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+security:\n+    enable_authenticator_manager: true\n+\n+    access_decision_manager:\n+        strategy: unanimous\n+        allow_if_all_abstain: true\n+\n+    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords\n+    password_hashers:\n+        Sulu\\Bundle\\SecurityBundle\\Entity\\User: bcrypt\n+\n+    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider\n+    providers:\n+        sulu:\n+            id: sulu_security.user_provider\n+\n+    firewalls:\n+        website:\n+            pattern: ^/\n+            lazy: true\n+            provider: sulu\n+            # The login and logout routes need to be created.\n+            # For an advanced user management with registration and opt-in emails have a look at the:\n+            # https://github.com/sulu/SuluCommunityBundle\n+            # Also have a look at the user context based caching when you output user role specific data\n+            # https://docs.sulu.io/en/2.2/cookbook/user-context-caching.html\n+            form_login:\n+                login_path: login\n+                check_path: login\n+            logout:\n+                path: logout\n+                target: /\n+            remember_me:\n+                secret:   \"%kernel.secret%\"\n+                lifetime: 604800 # 1 week in seconds\n+                path:     /\n+\n+sulu_security:\n+    checker:\n+        enabled: true"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Tests/Application/config/routing_website.yml",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -15,3 +15,9 @@ sulu_media:\n _portal_loader_test:\n     resource: \"routing_portal_loader_test.yml\"\n     type: portal\n+\n+login:\n+    path: /login\n+    controller:    Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController\n+    defaults:\n+        template: login.html.twig"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Tests/Application/config/webspaces/sulu_lo.xml",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -89,4 +89,3 @@\n         </portal>\n     </portals>\n </webspace>\n-"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Tests/Functional/EventListener/SecurityListenerTest.php",
          "status": "added",
          "additions": 152,
          "deletions": 0,
          "patch": "@@ -0,0 +1,152 @@\n+<?php\n+\n+/*\n+ * This file is part of Sulu.\n+ *\n+ * (c) Sulu GmbH\n+ *\n+ * This source file is subject to the MIT license that is bundled\n+ * with this source code in the file LICENSE.\n+ */\n+\n+namespace Sulu\\Bundle\\WebsiteBundle\\Tests\\Functional;\n+\n+use Sulu\\Bundle\\PageBundle\\Document\\BasePageDocument;\n+use Sulu\\Bundle\\PageBundle\\Document\\PageDocument;\n+use Sulu\\Bundle\\SecurityBundle\\Entity\\AccessControl;\n+use Sulu\\Bundle\\SecurityBundle\\Entity\\Permission;\n+use Sulu\\Bundle\\SecurityBundle\\Entity\\Role;\n+use Sulu\\Bundle\\TestBundle\\Testing\\SuluTestCase;\n+use Sulu\\Bundle\\WebsiteBundle\\Tests\\Application\\Kernel;\n+use Sulu\\Component\\Content\\Document\\Behavior\\SecurityBehavior;\n+use Sulu\\Component\\Content\\Document\\WorkflowStage;\n+use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;\n+\n+/**\n+ * @runTestsInSeparateProcesses This is necessary because the kernel is booted with different configurations.\n+ */\n+class SecurityListenerTest extends SuluTestCase\n+{\n+    /**\n+     * @var KernelBrowser\n+     */\n+    private $client;\n+\n+    protected function setUp(): void\n+    {\n+        if (Kernel::VERSION_ID < 50000) { // @phpstan-ignore-line\n+            $this->markTestSkipped('This test is only for Symfony 5.0 and above');\n+        }\n+\n+        $this->client = $this->createWebsiteClient(['environment' => 'test_with_security']);\n+        $this->purgeDatabase();\n+        $this->initPhpcr();\n+    }\n+\n+    public function testNoPermissions(): void\n+    {\n+        $pageDocument = $this->createSecuredPage();\n+\n+        $this->client->request('GET', 'http://sulu.lo/');\n+        $response = $this->client->getResponse();\n+\n+        $this->assertSame(200, $response->getStatusCode());\n+        $this->assertNull($response->headers->get('Location'));\n+    }\n+\n+    public function testRedirectToLoginWhenNoAccess(): void\n+    {\n+        $pageDocument = $this->createSecuredPage();\n+\n+        $this->client->request('GET', 'http://sulu.lo/secure-area');\n+        $response = $this->client->getResponse();\n+\n+        $this->assertSame(302, $response->getStatusCode());\n+        $this->assertSame('http://sulu.lo/login', $response->headers->get('Location'));\n+    }\n+\n+    private function createSecuredPage(): BasePageDocument\n+    {\n+        $documentManager = $this->getContainer()->get('sulu_document_manager.document_manager');\n+        $entityManager = $this->getEntityManager();\n+\n+        $pageData = [\n+            'locale' => 'en',\n+            'title' => 'Secure Area',\n+            'url' => '/secure-area',\n+            'article' => '<p>Some sample text for this super secret area.</p>',\n+            'structureType' => 'default',\n+        ];\n+\n+        $extensionData = [\n+            'seo' => [],\n+            'excerpt' => [],\n+        ];\n+\n+        /** @var PageDocument $pageDocument */\n+        $pageDocument = $documentManager->create('page');\n+\n+        $pageDocument->setNavigationContexts([]);\n+        $pageDocument->setLocale($pageData['locale']);\n+        $pageDocument->setTitle($pageData['title']);\n+        $pageDocument->setResourceSegment($pageData['url']);\n+        $pageDocument->setStructureType($pageData['structureType']);\n+        $pageDocument->setWorkflowStage(WorkflowStage::PUBLISHED);\n+        $pageDocument->getStructure()->bind($pageData);\n+        $pageDocument->setAuthor(1);\n+        $pageDocument->setExtensionsData($extensionData);\n+        $pageDocument->setPermissions([\n+            1 => [ // do not allow anonymous users to access this page\n+                'view' => false,\n+            ],\n+        ]);\n+\n+        $documentManager->persist(\n+            $pageDocument,\n+            'en',\n+            ['parent_path' => '/cmf/sulu_io/contents']\n+        );\n+        $documentManager->flush();\n+\n+        // We need to add access control here as we do not have the document id before\n+        $role = new Role();\n+        $role->setName('Anonymous User Website');\n+        $role->setSystem('sulu_io');\n+        $role->setAnonymous(true);\n+\n+        $permission = new Permission();\n+        $permission->setRole($role);\n+        $permission->setPermissions(127);\n+        $permission->setContext('sulu.webspaces.sulu_io');\n+        $role->addPermission($permission);\n+\n+        $accessControl = new AccessControl();\n+        $accessControl->setPermissions(0);\n+        $accessControl->setEntityId($pageDocument->getUuid());\n+        $accessControl->setEntityClass(SecurityBehavior::class);\n+        $accessControl->setRole($role);\n+\n+        $entityManager->persist($permission);\n+        $entityManager->persist($role);\n+        $entityManager->persist($accessControl);\n+        $entityManager->flush();\n+\n+        $pageDocument->setPermissions([\n+            $role->getId() => [ // do not allow anonymous users to access this page\n+                'view' => false,\n+            ],\n+        ]);\n+        $documentManager->persist(\n+            $pageDocument,\n+            'en',\n+            ['parent_path' => '/cmf/sulu_io/contents']\n+        );\n+        $documentManager->flush();\n+        $documentManager->publish($pageDocument, 'en');\n+\n+        $documentManager->clear();\n+        $entityManager->clear();\n+\n+        return $pageDocument;\n+    }\n+}"
        },
        {
          "filename": "src/Sulu/Bundle/WebsiteBundle/Tests/Unit/Routing/ContentRouteProviderTest.php",
          "status": "modified",
          "additions": 0,
          "deletions": 158,
          "patch": "@@ -35,15 +35,12 @@\n use Sulu\\Component\\DocumentManager\\DocumentManagerInterface;\n use Sulu\\Component\\DocumentManager\\Metadata;\n use Sulu\\Component\\Localization\\Localization;\n-use Sulu\\Component\\Security\\Authorization\\PermissionTypes;\n use Sulu\\Component\\Security\\Authorization\\SecurityCheckerInterface;\n-use Sulu\\Component\\Security\\Authorization\\SecurityCondition;\n use Sulu\\Component\\Webspace\\Analyzer\\Attributes\\RequestAttributes;\n use Sulu\\Component\\Webspace\\Analyzer\\RequestAnalyzer;\n use Sulu\\Component\\Webspace\\Analyzer\\RequestAnalyzerInterface;\n use Sulu\\Component\\Webspace\\Manager\\WebspaceManagerInterface;\n use Sulu\\Component\\Webspace\\Portal;\n-use Sulu\\Component\\Webspace\\Security;\n use Sulu\\Component\\Webspace\\Segment;\n use Sulu\\Component\\Webspace\\Webspace;\n use Symfony\\Component\\HttpFoundation\\Request;\n@@ -184,161 +181,6 @@ public function testGetCollectionForRequest(): void\n         $this->assertEquals(false, $defaults['partial']);\n     }\n \n-    public function testSecurityChecker(): void\n-    {\n-        $attributes = $this->prophesize(RequestAttributes::class);\n-\n-        $attributes->getAttribute('localization', null)->willReturn(new Localization('de'));\n-\n-        $portal = new Portal();\n-        $portal->setKey('portal');\n-        $webspace = new Webspace();\n-        $webspace->setKey('webspace');\n-        $webspace->setTheme('theme');\n-        $security = new Security();\n-        $security->setSystem('website');\n-        $security->setPermissionCheck(true);\n-        $webspace->setSecurity($security);\n-        $portal->setWebspace($webspace);\n-        $attributes->getAttribute('portal', null)->willReturn($portal);\n-\n-        $attributes->getAttribute('matchType', null)->willReturn(RequestAnalyzer::MATCH_TYPE_FULL);\n-        $attributes->getAttribute('resourceLocator', null)->willReturn(null);\n-        $attributes->getAttribute('resourceLocatorPrefix', null)->willReturn('/de');\n-\n-        $this->resourceLocatorStrategy->loadByResourceLocator('', 'webspace', 'de')->willReturn('some-uuid');\n-\n-        $document = $this->prophesize(TitleBehavior::class)\n-            ->willImplement(ExtensionBehavior::class)\n-            ->willImplement(RedirectTypeBehavior::class)\n-            ->willImplement(StructureBehavior::class)\n-            ->willImplement(WebspaceBehavior::class)\n-            ->willImplement(UuidBehavior::class);\n-        $document->getUuid()->willReturn('some-uuid');\n-        $document->getTitle()->willReturn('some-title');\n-        $document->getWebspaceName()->willReturn('webspace');\n-        $document->getLocale()->willReturn('de');\n-        $document->getRedirectType()->willReturn(RedirectType::NONE);\n-        $document->getStructureType()->willReturn('default');\n-        $document->getUuid()->willReturn('some-uuid');\n-        $document->getExtensionsData()->willReturn(['excerpt' => ['segments' => null]]);\n-        $this->documentManager->find('some-uuid', 'de', ['load_ghost_content' => false])->willReturn($document->reveal());\n-\n-        $metadata = new Metadata();\n-        $metadata->setAlias('page');\n-        $structureMetadata = new StructureMetadata();\n-        $this->documentInspector->getMetadata($document->reveal())->willReturn($metadata);\n-        $this->documentInspector->getStructureMetadata($document->reveal())->willReturn($structureMetadata);\n-\n-        $pageBridge = $this->prophesize(PageBridge::class);\n-        $pageBridge->getController()->willReturn('::Controller');\n-        $this->structureManager->wrapStructure('page', $structureMetadata)->willReturn($pageBridge->reveal());\n-\n-        $request = new Request(\n-            [],\n-            [],\n-            ['_sulu' => $attributes->reveal()],\n-            [],\n-            [],\n-            ['REQUEST_URI' => \\rawurlencode('/de')]\n-        );\n-\n-        $pageBridge->setDocument($document->reveal())->shouldBeCalled();\n-\n-        $securityChecker = $this->prophesize(SecurityCheckerInterface::class);\n-        $securityChecker->checkPermission(Argument::that(function(SecurityCondition $securityCondition) use ($document) {\n-            $this->assertSame('some-uuid', $securityCondition->getObjectId());\n-            $this->assertSame(\\get_class($document->reveal()), $securityCondition->getObjectType());\n-            $this->assertSame('de', $securityCondition->getLocale());\n-            $this->assertSame('sulu.webspaces.webspace', $securityCondition->getSecurityContext());\n-\n-            return true;\n-        }), PermissionTypes::VIEW)->shouldBeCalled();\n-\n-        $contentRouteProvider = $this->createContentRouteProvider($securityChecker->reveal());\n-        $routes = $contentRouteProvider->getRouteCollectionForRequest($request);\n-\n-        $defaults = $routes->getIterator()->current()->getDefaults();\n-\n-        $this->assertCount(1, $routes);\n-        $this->assertEquals($pageBridge->reveal(), $defaults['structure']);\n-        $this->assertEquals(false, $defaults['partial']);\n-    }\n-\n-    public function testSecurityCheckerWithoutPermissionCheck(): void\n-    {\n-        $attributes = $this->prophesize(RequestAttributes::class);\n-\n-        $attributes->getAttribute('localization', null)->willReturn(new Localization('de'));\n-\n-        $portal = new Portal();\n-        $portal->setKey('portal');\n-        $webspace = new Webspace();\n-        $webspace->setKey('webspace');\n-        $webspace->setTheme('theme');\n-        $security = new Security();\n-        $security->setSystem('website');\n-        $security->setPermissionCheck(false);\n-        $webspace->setSecurity($security);\n-        $portal->setWebspace($webspace);\n-        $attributes->getAttribute('portal', null)->willReturn($portal);\n-\n-        $attributes->getAttribute('matchType', null)->willReturn(RequestAnalyzer::MATCH_TYPE_FULL);\n-        $attributes->getAttribute('resourceLocator', null)->willReturn(null);\n-        $attributes->getAttribute('resourceLocatorPrefix', null)->willReturn('/de');\n-\n-        $this->resourceLocatorStrategy->loadByResourceLocator('', 'webspace', 'de')->willReturn('some-uuid');\n-\n-        $document = $this->prophesize(TitleBehavior::class)\n-            ->willImplement(ExtensionBehavior::class)\n-            ->willImplement(RedirectTypeBehavior::class)\n-            ->willImplement(StructureBehavior::class)\n-            ->willImplement(WebspaceBehavior::class)\n-            ->willImplement(UuidBehavior::class);\n-        $document->getUuid()->willReturn('some-uuid');\n-        $document->getTitle()->willReturn('some-title');\n-        $document->getWebspaceName()->willReturn('webspace');\n-        $document->getLocale()->willReturn('de');\n-        $document->getRedirectType()->willReturn(RedirectType::NONE);\n-        $document->getStructureType()->willReturn('default');\n-        $document->getUuid()->willReturn('some-uuid');\n-        $document->getExtensionsData()->willReturn(['excerpt' => ['segments' => null]]);\n-        $this->documentManager->find('some-uuid', 'de', ['load_ghost_content' => false])->willReturn($document->reveal());\n-\n-        $metadata = new Metadata();\n-        $metadata->setAlias('page');\n-        $structureMetadata = new StructureMetadata();\n-        $this->documentInspector->getMetadata($document->reveal())->willReturn($metadata);\n-        $this->documentInspector->getStructureMetadata($document->reveal())->willReturn($structureMetadata);\n-\n-        $pageBridge = $this->prophesize(PageBridge::class);\n-        $pageBridge->getController()->willReturn('::Controller');\n-        $this->structureManager->wrapStructure('page', $structureMetadata)->willReturn($pageBridge->reveal());\n-\n-        $request = new Request(\n-            [],\n-            [],\n-            ['_sulu' => $attributes->reveal()],\n-            [],\n-            [],\n-            ['REQUEST_URI' => \\rawurlencode('/de')]\n-        );\n-\n-        $pageBridge->setDocument($document->reveal())->shouldBeCalled();\n-\n-        $securityChecker = $this->prophesize(SecurityCheckerInterface::class);\n-        $securityChecker->checkPermission(Argument::cetera())->shouldNotBeCalled();\n-\n-        $contentRouteProvider = $this->createContentRouteProvider($securityChecker->reveal());\n-        $routes = $contentRouteProvider->getRouteCollectionForRequest($request);\n-\n-        $defaults = $routes->getIterator()->current()->getDefaults();\n-\n-        $this->assertCount(1, $routes);\n-        $this->assertEquals($pageBridge->reveal(), $defaults['structure']);\n-        $this->assertEquals(false, $defaults['partial']);\n-    }\n-\n     public function testGetCollectionForRequestWithWrongSegment(): void\n     {\n         $attributes = $this->prophesize(RequestAttributes::class);"
        },
        {
          "filename": "src/Sulu/Component/Webspace/Analyzer/Attributes/SystemRequestProcessor.php",
          "status": "added",
          "additions": 76,
          "deletions": 0,
          "patch": "@@ -0,0 +1,76 @@\n+<?php\n+\n+/*\n+ * This file is part of Sulu.\n+ *\n+ * (c) Sulu GmbH\n+ *\n+ * This source file is subject to the MIT license that is bundled\n+ * with this source code in the file LICENSE.\n+ */\n+\n+namespace Sulu\\Component\\Webspace\\Analyzer\\Attributes;\n+\n+use Sulu\\Bundle\\AdminBundle\\Admin\\Admin;\n+use Sulu\\Bundle\\SecurityBundle\\System\\SystemStoreInterface;\n+use Sulu\\Component\\HttpKernel\\SuluKernel;\n+use Sulu\\Component\\Webspace\\PortalInformation;\n+use Symfony\\Component\\HttpFoundation\\Request;\n+\n+/**\n+ * @internal\n+ * @final\n+ *\n+ * This class is internal overriding or extending should not be required instead create an own RequestProcessor.\n+ */\n+class SystemRequestProcessor implements RequestProcessorInterface\n+{\n+    /**\n+     * @var SystemStoreInterface\n+     */\n+    private $systemStore;\n+\n+    /**\n+     * @var string\n+     */\n+    private $context;\n+\n+    public function __construct(\n+        SystemStoreInterface $systemStore,\n+        string $context\n+    ) {\n+        $this->systemStore = $systemStore;\n+        $this->context = $context;\n+    }\n+\n+    public function process(Request $request, RequestAttributes $requestAttributes)\n+    {\n+        $attributes = [];\n+        if (SuluKernel::CONTEXT_ADMIN === $this->context) {\n+            $this->systemStore->setSystem(Admin::SULU_ADMIN_SECURITY_SYSTEM);\n+            $attributes['system'] = Admin::SULU_ADMIN_SECURITY_SYSTEM;\n+\n+            return new RequestAttributes($attributes);\n+        }\n+        $portalInformation = $requestAttributes->getAttribute('portalInformation');\n+\n+        if (!$portalInformation instanceof PortalInformation) {\n+            return new RequestAttributes($attributes);\n+        }\n+\n+        $webspace = $portalInformation->getWebspace();\n+\n+        $security = $webspace->getSecurity();\n+        if ($security) {\n+            $attributes['system'] = $security->getSystem();\n+            $this->systemStore->setSystem($attributes['system']);\n+        }\n+\n+        return new RequestAttributes($attributes);\n+    }\n+\n+    public function validate(RequestAttributes $attributes)\n+    {\n+        return true;\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 6,
        "config_files": 7,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 14,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eeb3cc463463fb110008352d9e0f550e355fdf36",
            "date": "2025-01-14T13:14:47Z",
            "author_login": "alexander-schranz"
          },
          {
            "sha": "6c9f9d63a3a2a0950ef0702dad33abab73d122c4",
            "date": "2025-01-14T13:14:32Z",
            "author_login": "Prokyonn"
          },
          {
            "sha": "8d5b3255a243b6b8a9cb8b3abb1f7f337a5ff18f",
            "date": "2025-01-09T14:15:55Z",
            "author_login": "mamazu"
          },
          {
            "sha": "04d33c30f978bec25dc380acb436ed0cef826e7b",
            "date": "2025-01-09T12:49:04Z",
            "author_login": "eekes"
          },
          {
            "sha": "e5cfa4d76104dabca227db25390b7b4aedd855e8",
            "date": "2025-01-08T11:08:58Z",
            "author_login": "alexander-schranz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-863",
    "description": "Sulu is a PHP content management system. Starting in verson 2.2.0 and prior to version 2.4.17 and 2.5.13, access to pages is granted regardless of role permissions for webspaces which have a security system configured and permission check enabled. Webspaces without do not have this issue. The problem is patched in versions 2.4.17 and 2.5.13. Some workarounds are available. One may apply the patch to `vendor/symfony/security-http/HttpUtils.php` manually or avoid installing `symfony/security-http` versions greater equal than `v5.4.30` or `v6.3.6`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-03-06T20:15:47.930",
    "last_modified": "2025-01-08T18:37:37.653",
    "fix_date": "2024-03-04T12:53:32Z"
  },
  "references": [
    {
      "url": "https://github.com/sulu/sulu/commit/ec9c3f99e15336dc4f6877f512300f231c17c6da",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sulu/sulu/security/advisories/GHSA-jr83-m233-gg6p",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/sulu/sulu/commit/ec9c3f99e15336dc4f6877f512300f231c17c6da",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/sulu/sulu/security/advisories/GHSA-jr83-m233-gg6p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.468864",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sulu",
    "owner": "sulu",
    "created_at": "2013-10-18T12:57:02Z",
    "updated_at": "2025-01-14T13:14:57Z",
    "pushed_at": "2025-01-14T13:15:09Z",
    "size": 147491,
    "stars": 1189,
    "forks": 340,
    "open_issues": 545,
    "watchers": 1189,
    "has_security_policy": false,
    "default_branch": "2.6",
    "protected_branches": [
      "1.6",
      "2.5",
      "2.6",
      "3.0"
    ],
    "languages": {
      "PHP": 11214954,
      "JavaScript": 4770785,
      "SCSS": 163694,
      "Twig": 47211,
      "CSS": 9960,
      "VCL": 4428,
      "Shell": 158
    },
    "commit_activity": {
      "total_commits_last_year": 404,
      "avg_commits_per_week": 7.769230769230769,
      "days_active_last_year": 108
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:47:29.807566"
  }
}