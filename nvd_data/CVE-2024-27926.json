{
  "cve_id": "CVE-2024-27926",
  "github_data": {
    "repository": "DIYgod/RSSHub",
    "fix_commit": "4d3e5d79c1c17837e931b4cd253d2013b487aa87",
    "related_commits": [
      "4d3e5d79c1c17837e931b4cd253d2013b487aa87",
      "4d3e5d79c1c17837e931b4cd253d2013b487aa87"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "4d3e5d79c1c17837e931b4cd253d2013b487aa87",
      "commit_date": "2024-03-04T15:06:41Z",
      "author": {
        "login": "DIYgod",
        "type": "User",
        "stats": {
          "total_commits": 1985,
          "average_weekly_commits": 5.575842696629214,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 219
        }
      },
      "commit_message": {
        "title": "feat: remove MEDIA_PROXY_KEY and internal media proxy",
        "length": 53,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 78,
        "additions": 5,
        "deletions": 73
      },
      "files": [
        {
          "filename": "lib/config.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -61,7 +61,6 @@ export type Config = {\n         allow_user_hotlink_template: boolean;\n         filter_regex_engine: string;\n         allow_user_supply_unsafe_domain: boolean;\n-        mediaProxyKey?: string;\n     };\n     suffix?: string;\n     titleLengthLimit: number;\n@@ -391,7 +390,6 @@ const calculateValue = () => {\n             allow_user_hotlink_template: toBoolean(envs.ALLOW_USER_HOTLINK_TEMPLATE, false),\n             filter_regex_engine: envs.FILTER_REGEX_ENGINE || 're2',\n             allow_user_supply_unsafe_domain: toBoolean(envs.ALLOW_USER_SUPPLY_UNSAFE_DOMAIN, false),\n-            mediaProxyKey: envs.MEDIA_PROXY_KEY,\n         },\n         suffix: envs.SUFFIX,\n         titleLengthLimit: toInt(envs.TITLE_LENGTH_LIMIT, 150),"
        },
        {
          "filename": "lib/routes/rsshub/maintainer.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1,5 +1,4 @@\n export default {\n-    '/m/:key/:url': ['TonyRL'],\n     '/routes/:lang?': ['DIYgod'],\n     '/transform/html/:url/:routeParams': ['ttttmr'],\n     '/transform/json/:url/:routeParams': ['ttttmr'],"
        },
        {
          "filename": "lib/routes/rsshub/media.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 52,
          "patch": "@@ -1,52 +0,0 @@\n-// @ts-nocheck\n-import got from '@/utils/got';\n-import { config } from '@/config';\n-const { getDomain } = require('tldts');\n-const { refererMap } = require('./referer-map');\n-\n-export default async (ctx) => {\n-    if (!config.feature.mediaProxyKey) {\n-        throw new Error('Internal media proxy is disabled.');\n-    }\n-\n-    const key = ctx.req.param('key');\n-    if (key !== config.feature.mediaProxyKey) {\n-        throw new Error('Invalid media proxy key.');\n-    }\n-\n-    const url = decodeURIComponent(ctx.req.param('url'));\n-    const requestUrl = new URL(url);\n-    const { hostname, origin } = requestUrl;\n-\n-    const domain = getDomain(hostname);\n-\n-    let referer = refererMap.get(domain);\n-    referer ||= origin;\n-\n-    const { headers } = await got.head(url, {\n-        headers: {\n-            referer,\n-        },\n-    });\n-\n-    const cacheControl = headers['cache-control'];\n-    const contentType = headers['content-type'];\n-    const contentLength = headers['content-length'];\n-\n-    if (!contentType.startsWith('image/') || headers.server === 'RSSHub') {\n-        return ctx.redirect(url);\n-    }\n-\n-    ctx.set({\n-        'cache-control': cacheControl || `public, max-age=${config.cache.contentExpire}`,\n-        'content-length': contentLength,\n-        'content-type': contentType,\n-        server: 'RSSHub',\n-    });\n-\n-    ctx.body = await got.stream(url, {\n-        headers: {\n-            referer,\n-        },\n-    });\n-};"
        },
        {
          "filename": "lib/routes/rsshub/router.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1,5 +1,4 @@\n export default (router) => {\n-    router.get('/m/:key/:url', './media');\n     router.get('/routes/:lang?', './routes');\n     router.get('/transform/html/:url/:routeParams', './transform/html');\n     router.get('/transform/json/:url/:routeParams', './transform/json');"
        },
        {
          "filename": "lib/routes/telegram/channel.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -55,7 +55,7 @@ const mediaTagDict = {\n };\n \n export default async (ctx) => {\n-    const useWeb = ctx.req.param('routeParams') || !(config.telegram.session && config.feature.mediaProxyKey);\n+    const useWeb = ctx.req.param('routeParams') || !config.telegram.session;\n     if (!useWeb) {\n         return require('./tglib/channel').default(ctx);\n     }"
        },
        {
          "filename": "lib/routes/telegram/tglib/channel.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -33,10 +33,6 @@ function parseRange(range, length) {\n }\n \n async function getMedia(ctx) {\n-    if (ctx.req.param('key') !== config.feature.mediaProxyKey) {\n-        throw new Error('Invalid key');\n-    }\n-\n     const media = await decodeMedia(ctx.req.param('username'), ctx.req.param('media'));\n     if (!media) {\n         ctx.status = 500;"
        },
        {
          "filename": "lib/routes/telegram/tglib/client.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -69,7 +69,7 @@ function ExpandInlineBytes(bytes) {\n }\n \n function getMediaLink(ctx, channel, channelName, message) {\n-    const base = `${ctx.protocol}://${ctx.host}/telegram/channel/${channelName}/${config.feature.mediaProxyKey}/`;\n+    const base = `${ctx.protocol}://${ctx.host}/telegram/channel/${channelName}`;\n     const src = base + `${channel.channelId}_${message.id}`;\n \n     const x = message.media;"
        },
        {
          "filename": "lib/routes/weibo/timeline.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -145,7 +145,7 @@ export default async (ctx) => {\n                 'Content-Type': 'text/html; charset=UTF-8',\n                 'Cache-Control': 'no-cache',\n             });\n-            ctx.body = `<script>window.location = '/weibo/timeline/${uid}${routeParams ? `/${routeParams}` : ''}'</script>`;\n+            ctx.html(`<script>window.location = '/weibo/timeline/${uid}${routeParams ? `/${routeParams}` : ''}'</script>`);\n         }\n     } else {\n         const { app_key = '', redirect_url = ctx.req.origin + '/weibo/timeline/0' } = config.weibo;"
        },
        {
          "filename": "website/docs/install/config.md",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -198,8 +198,6 @@ Configs in this sections are in beta stage, and **are turn off by default**. Ple\n \n `ALLOW_USER_SUPPLY_UNSAFE_DOMAIN`: allow users to provide a domain as a parameter to routes that are not in their allow list, respectively. Public instances are suggested to leave this value default, as it may lead to [Server-Side Request Forgery (SSRF)](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n \n-`MEDIA_PROXY_KEY`: the access key for internal media proxy.\n-\n ## Other Application Configurations\n \n `DISALLOW_ROBOT`: prevent indexing by search engine, default to enable, set false or 0 to disable"
        },
        {
          "filename": "website/docs/routes/other.mdx",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -121,7 +121,7 @@ See [#app-store-mac-app-store](/routes/program-update#app-store-mac-app-store)\n \n <Route author=\"DIYgod\" example=\"/scmp/coronavirus\" path=\"/scmp/coronavirus\" />\n \n-### Macao Pagina Electr\u00f3nica Especial Contra Epidemias: What\u2019s New {#corona-virus-disease-2019-macao-pagina-electr%C3%B3nica-especial-contra-epidemias-what-s-new}\n+### Macao Pagina Electr\u00f3nica Especial Contra Epidemias: What\u2019s New {#corona-virus-disease-2019-macao-pagina-electronica-especial-contra-epidemias-what-s-new}\n \n Official Website: [https://www.ssm.gov.mo/apps1/PreventWuhanInfection/en.aspx](https://www.ssm.gov.mo/apps1/PreventWuhanInfection/en.aspx)\n \n@@ -442,10 +442,6 @@ It is recommended to use with clipping tools such as Notion Web Clipper.\n \n ## RSSHub {#rsshub}\n \n-### Internal Media Proxy {#rsshub-internal-media-proxy}\n-\n-<Route author=\"TonyRL\" example=\"/rsshub/m/key/https%3A%2F%2Fdocs.rsshub.app%2Fimg%2Flogo.png\" path=\"/rsshub/m/:key/:url\" paramsDesc={['Media Proxy Key', '`encodeURIComponent`ed URL address']} configRequired=\"1\" />\n-\n ### Transformation - HTML {#rsshub-transformation-html}\n \n Pass URL and transformation rules to convert HTML/JSON into RSS."
        },
        {
          "filename": "website/docs/routes/social-media.mdx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -784,7 +784,7 @@ If the instance address is not `mastodon.social` or `pawoo.net`, then the route\n <Route author=\"synchrone\" example=\"/telegram/channel/telegram\" path=\"/telegram/channel/:username\" paramsDesc={['Channel name, without @']} configRequired=\"1\" />\n \n :::warning\n-This route requires user-based `TELEGRAM_SESSION` which can be acquired and `MEDIA_PROXY_KEY`.\n+This route requires user-based `TELEGRAM_SESSION`.\n :::\n \n ### Sticker Pack {#telegram-sticker-pack}"
        },
        {
          "filename": "website/i18n/zh/docusaurus-plugin-content-docs/current/install/config.md",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -196,8 +196,6 @@ RSSHub \u652f\u6301\u4f7f\u7528\u8bbf\u95ee\u5bc6\u94a5 / \u7801\u8fdb\u884c\u8bbf\u95ee\u63a7\u5236\u3002\u5f00\u542f\u5c06\u4f1a\u6fc0\u6d3b\u5168\n \n `ALLOW_USER_SUPPLY_UNSAFE_DOMAIN`: \u5141\u8bb8\u7528\u6237\u4e3a\u8def\u7531\u63d0\u4f9b\u57df\u540d\u4f5c\u4e3a\u53c2\u6570\u3002\u5efa\u8bae\u516c\u5171\u5b9e\u4f8b\u4e0d\u8981\u8c03\u6574\u6b64\u9009\u9879\uff0c\u5f00\u542f\u540e\u53ef\u80fd\u4f1a\u5bfc\u81f4 [\u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020\uff08SSRF\uff09](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n \n-`MEDIA_PROXY_KEY`: \u5185\u7f6e\u591a\u5a92\u4f53\u4ee3\u7406\u7684\u8bbf\u95ee\u5bc6\u94a5\n-\n ## \u5176\u4ed6\u5e94\u7528\u914d\u7f6e\n \n `DISALLOW_ROBOT`: \u963b\u6b62\u641c\u7d22\u5f15\u64ce\u6536\u5f55\uff0c\u9ed8\u8ba4\u5f00\u542f\uff0c\u8bbe\u7f6e false \u6216 0 \u5173\u95ed"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0793b7a1b7aac7adffbf65761467c202cb2f8dfd",
            "date": "2025-01-25T17:51:05Z",
            "author_login": "nczitzk"
          },
          {
            "sha": "478bf253b28cadbe4dc79ddf579b6bb87329fa22",
            "date": "2025-01-25T17:02:24Z",
            "author_login": "nczitzk"
          },
          {
            "sha": "bffd40cb93072800004b6d5474dbd39a96e821bc",
            "date": "2025-01-25T15:00:44Z",
            "author_login": "cscnk52"
          },
          {
            "sha": "4d3b58072c3c6d8553f48eafb8b9ad79b5da4a42",
            "date": "2025-01-24T18:29:52Z",
            "author_login": "TonyRL"
          },
          {
            "sha": "fdb13814fc1d89452f07aa24fff75f86233d50c0",
            "date": "2025-01-24T18:14:02Z",
            "author_login": "quiniapiezoelectricity"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "RSSHub is an open source RSS feed generator. Starting in version 1.0.0-master.cbbd829 and prior to version 1.0.0-master.d8ca915, ahen the specially crafted image is supplied to the internal media proxy, it proxies the image without handling XSS vulnerabilities, allowing for the execution of arbitrary JavaScript code. Users who access the deliberately constructed URL are affected. This vulnerability was fixed in version 1.0.0-master.d8ca915. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-21T02:52:21.500",
    "last_modified": "2024-11-21T09:05:26.097",
    "fix_date": "2024-03-04T15:06:41Z"
  },
  "references": [
    {
      "url": "https://github.com/DIYgod/RSSHub/commit/4d3e5d79c1c17837e931b4cd253d2013b487aa87",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/DIYgod/RSSHub/security/advisories/GHSA-2wqw-hr4f-xrhh",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/DIYgod/RSSHub/commit/4d3e5d79c1c17837e931b4cd253d2013b487aa87",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/DIYgod/RSSHub/security/advisories/GHSA-2wqw-hr4f-xrhh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.880418",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "RSSHub",
    "owner": "DIYgod",
    "created_at": "2018-04-02T14:43:21Z",
    "updated_at": "2025-01-26T08:06:16Z",
    "pushed_at": "2025-01-26T01:44:19Z",
    "size": 329138,
    "stars": 34934,
    "forks": 7697,
    "open_issues": 336,
    "watchers": 34934,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 9903555,
      "JavaScript": 1133550,
      "Dockerfile": 7866,
      "Shell": 606,
      "HTML": 418
    },
    "commit_activity": {
      "total_commits_last_year": 4510,
      "avg_commits_per_week": 86.73076923076923,
      "days_active_last_year": 358
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:33:03.984885"
  }
}