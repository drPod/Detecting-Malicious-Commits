{
  "cve_id": "CVE-2024-27936",
  "github_data": {
    "repository": "denoland/deno",
    "fix_commit": "78d430103a8f6931154ddbbe19d36f3b8630286d",
    "related_commits": [
      "78d430103a8f6931154ddbbe19d36f3b8630286d",
      "7e6b94231290020b55f1d08fb03ea8132781abc5",
      "78d430103a8f6931154ddbbe19d36f3b8630286d",
      "7e6b94231290020b55f1d08fb03ea8132781abc5"
    ],
    "patch_url": "https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d.patch",
    "fix_commit_details": {
      "sha": "78d430103a8f6931154ddbbe19d36f3b8630286d",
      "commit_date": "2023-03-10T00:09:14Z",
      "author": {
        "login": "bartlomieju",
        "type": "User",
        "stats": {
          "total_commits": 2265,
          "average_weekly_commits": 6.489971346704871,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 310
        }
      },
      "commit_message": {
        "title": "fix(prompt): better output with control chars (#18108)",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 65,
        "deletions": 5
      },
      "files": [
        {
          "filename": "Cargo.lock",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -525,9 +525,9 @@ dependencies = [\n \n [[package]]\n name = \"console_static_text\"\n-version = \"0.3.4\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f166cdfb9db0607e2079b382ba64bc4164344006c733b95c1ecfa782a180a34a\"\n+checksum = \"953d2c3cf53213a4eccdbe8f2e0b49b5d0f77e87a2a9060117bbf9346f92b64e\"\n dependencies = [\n  \"unicode-width\",\n  \"vte\",\n@@ -1285,6 +1285,7 @@ name = \"deno_runtime\"\n version = \"0.99.0\"\n dependencies = [\n  \"atty\",\n+ \"console_static_text\",\n  \"deno_ast\",\n  \"deno_broadcast_channel\",\n  \"deno_cache\","
        },
        {
          "filename": "Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -84,6 +84,7 @@ base64 = \"=0.13.1\"\n bencher = \"0.1\"\n bytes = \"=1.2.1\"\n cache_control = \"=0.2.0\"\n+console_static_text = \"=0.7.1\"\n data-url = \"=0.2.0\"\n dlopen = \"0.1.8\"\n encoding_rs = \"=0.8.31\""
        },
        {
          "filename": "cli/Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -62,7 +62,7 @@ chrono = { version = \"=0.4.22\", default-features = false, features = [\"clock\"] }\n clap = \"=3.1.12\"\n clap_complete = \"=3.1.2\"\n clap_complete_fig = \"=3.1.5\"\n-console_static_text = \"=0.3.4\"\n+console_static_text.workspace = true\n data-url.workspace = true\n dissimilar = \"=1.0.4\"\n dprint-plugin-json = \"=0.17.0\""
        },
        {
          "filename": "cli/tests/integration/run_tests.rs",
          "status": "modified",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -4027,6 +4027,51 @@ fn stdio_streams_are_locked_in_permission_prompt() {\n   });\n }\n \n+#[test]\n+fn permission_prompt_strips_ansi_codes_and_control_chars() {\n+  let _guard = util::http_server();\n+  util::with_pty(&[\"repl\"], |mut console| {\n+    console.write_line(\n+      r#\"Deno.permissions.request({ name: \"env\", variable: \"\\rDo you like ice cream? y/n\" });\"#\n+    );\n+    console.write_line(\"close();\");\n+    let output = console.read_all_output();\n+\n+    assert!(output.contains(\n+      \"\u250c \u26a0\ufe0f  Deno requests env access to \\\"Do you like ice cream? y/n\\\".\"\n+    ));\n+  });\n+\n+  util::with_pty(&[\"repl\"], |mut console| {\n+    console.write_line(\n+      r#\"\n+const boldANSI = \"\\u001b[1m\" // bold\n+const unboldANSI = \"\\u001b[22m\" // unbold\n+\n+const prompt = `\u250c \u26a0\ufe0f  ${boldANSI}Deno requests run access to \"echo\"${unboldANSI}\n+\u251c Requested by \\`Deno.Command().output()`\n+\n+const moveANSIUp = \"\\u001b[1A\" // moves to the start of the line\n+const clearANSI = \"\\u001b[2K\" // clears the line\n+const moveANSIStart = \"\\u001b[1000D\" // moves to the start of the line\n+\n+Deno[Object.getOwnPropertySymbols(Deno)[0]].core.ops.op_spawn_child({\n+    cmd: \"cat\",\n+    args: [\"/etc/passwd\"],\n+    clearEnv: false,\n+    env: [],\n+    stdin: \"null\",\n+    stdout: \"inherit\",\n+    stderr: \"piped\"\n+}, moveANSIUp + clearANSI + moveANSIStart + prompt)\"#,\n+    );\n+    console.write_line(\"close();\");\n+    let output = console.read_all_output();\n+\n+    assert!(output.contains(r#\"\u250c \u26a0\ufe0f  Deno requests run access to \"cat\"\"#));\n+  });\n+}\n+\n itest!(node_builtin_modules_ts {\n   args: \"run --quiet --allow-read run/node_builtin_modules/mod.ts hello there\",\n   output: \"run/node_builtin_modules/mod.ts.out\","
        },
        {
          "filename": "runtime/Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -86,6 +86,7 @@ deno_websocket.workspace = true\n deno_webstorage.workspace = true\n \n atty.workspace = true\n+console_static_text.workspace = true\n dlopen.workspace = true\n encoding_rs.workspace = true\n filetime = \"0.2.16\""
        },
        {
          "filename": "runtime/permissions/prompter.rs",
          "status": "modified",
          "additions": 14,
          "deletions": 2,
          "patch": "@@ -5,6 +5,14 @@ use deno_core::error::AnyError;\n use deno_core::parking_lot::Mutex;\n use once_cell::sync::Lazy;\n \n+/// Helper function to strip ansi codes and ASCII control characters.\n+fn strip_ansi_codes_and_ascii_control(s: &str) -> std::borrow::Cow<str> {\n+  console_static_text::strip_ansi_codes(s)\n+    .chars()\n+    .filter(|c| !c.is_ascii_control())\n+    .collect()\n+}\n+\n pub const PERMISSION_EMOJI: &str = \"\u26a0\ufe0f\";\n \n #[derive(Debug, Eq, PartialEq)]\n@@ -203,6 +211,10 @@ impl PermissionPrompter for TtyPrompter {\n     let _stdout_guard = std::io::stdout().lock();\n     let _stderr_guard = std::io::stderr().lock();\n \n+    let message = strip_ansi_codes_and_ascii_control(message);\n+    let name = strip_ansi_codes_and_ascii_control(name);\n+    let api_name = api_name.map(strip_ansi_codes_and_ascii_control);\n+\n     // print to stderr so that if stdout is piped this is still displayed.\n     let opts: String = if is_unary {\n       format!(\"[y/n/A] (y = yes, allow; n = no, deny; A = allow all {name} permissions)\")\n@@ -211,9 +223,9 @@ impl PermissionPrompter for TtyPrompter {\n     };\n     eprint!(\"\u250c {PERMISSION_EMOJI}  \");\n     eprint!(\"{}\", colors::bold(\"Deno requests \"));\n-    eprint!(\"{}\", colors::bold(message));\n+    eprint!(\"{}\", colors::bold(message.clone()));\n     eprintln!(\"{}\", colors::bold(\".\"));\n-    if let Some(api_name) = api_name {\n+    if let Some(api_name) = api_name.clone() {\n       eprintln!(\"\u251c Requested by `{api_name}` API\");\n     }\n     let msg = format!(\"Run again with --allow-{name} to bypass this prompt.\");"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 3,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3fb8fc1ba78ae7ded63dd2c1bb3249338bf14cac",
            "date": "2025-01-14T12:31:02Z",
            "author_login": "marvinhagemeister"
          },
          {
            "sha": "1e95c2056169c9b5de165b58bfd9296d5e5ce98e",
            "date": "2025-01-14T12:00:31Z",
            "author_login": "dsherret"
          },
          {
            "sha": "a1f50a742219f6da78234412fe11a1456bfd3a0d",
            "date": "2025-01-14T09:08:22Z",
            "author_login": "siaeyy"
          },
          {
            "sha": "9cb089f6db5574f091e54e222e8082ddd9ea779f",
            "date": "2025-01-14T09:01:14Z",
            "author_login": "aaron-ang"
          },
          {
            "sha": "7616429436c8799bfc0c04287712814423485458",
            "date": "2025-01-14T03:29:21Z",
            "author_login": "dsherret"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-150",
    "description": "Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Starting in version 1.32.1 and prior to version 1.41.0 of the deno library, maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents. Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences. Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user. Version 1.41.0 of the deno library contains a patch for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-21T02:52:22.813",
    "last_modified": "2025-01-03T19:27:46.510",
    "fix_date": "2023-03-10T00:09:14Z"
  },
  "references": [
    {
      "url": "https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.881433",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "deno",
    "owner": "denoland",
    "created_at": "2018-05-15T01:34:26Z",
    "updated_at": "2025-01-14T12:32:31Z",
    "pushed_at": "2025-01-14T12:49:11Z",
    "size": 154853,
    "stars": 101129,
    "forks": 5467,
    "open_issues": 2139,
    "watchers": 101129,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Rust": 7541487,
      "JavaScript": 5094451,
      "TypeScript": 3402737,
      "CSS": 5811,
      "C": 3937,
      "C++": 1416,
      "HTML": 427,
      "Dockerfile": 267,
      "Python": 214,
      "WebAssembly": 160,
      "Svelte": 133,
      "Astro": 97,
      "Nunjucks": 45
    },
    "commit_activity": {
      "total_commits_last_year": 2665,
      "avg_commits_per_week": 51.25,
      "days_active_last_year": 328
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:18:25.813797"
  }
}