{
  "cve_id": "CVE-2024-27938",
  "github_data": {
    "repository": "postalserver/postal",
    "fix_commit": "0140dc4",
    "related_commits": [
      "0140dc4",
      "0140dc4"
    ],
    "patch_url": "https://github.com/postalserver/postal/commit/0140dc4.patch",
    "fix_commit_details": {
      "sha": "0140dc4",
      "commit_date": "2024-03-01T17:12:10Z",
      "author": {
        "login": "adamcooke",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: only accept RFC-compliant End-of-DATA sequence",
        "length": 180,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 68,
        "additions": 51,
        "deletions": 17
      },
      "files": [
        {
          "filename": "app/lib/smtp_server/client.rb",
          "status": "modified",
          "additions": 16,
          "deletions": 3,
          "patch": "@@ -22,6 +22,10 @@ class Client\n     def initialize(ip_address)\n       @logging_enabled = true\n       @ip_address = ip_address\n+\n+      @cr_present = false\n+      @previous_cr_present = nil\n+\n       if @ip_address\n         check_ip_address\n         @state = :welcome\n@@ -51,6 +55,14 @@ def id\n     end\n \n     def handle(data)\n+      if data[-1] == \"\\r\"\n+        @cr_present = true\n+        data = data.chop # remove last character (\\r)\n+      else\n+        Postal.logger.debug(\"\\e[33m   WARN: Detected line with invalid line ending (missing <CR>)\\e[0m\", id: id)\n+        @cr_present = false\n+      end\n+\n       Postal.logger.tagged(id: id) do\n         if @state == :preauth\n           return proxy(data)\n@@ -59,11 +71,12 @@ def handle(data)\n         log \"\\e[32m<= #{sanitize_input_for_log(data.strip)}\\e[0m\"\n         if @proc\n           @proc.call(data)\n-\n         else\n           handle_command(data)\n         end\n       end\n+    ensure\n+      @previous_cr_present = @cr_present\n     end\n \n     def finished?\n@@ -409,7 +422,7 @@ def data(_data)\n       @headers[\"received\"] = [received_header]\n \n       handler = proc do |idata|\n-        if idata == \".\"\n+        if idata == \".\" && @cr_present && @previous_cr_present\n           @logging_enabled = true\n           @proc = nil\n           finished\n@@ -424,7 +437,7 @@ def data(_data)\n           end\n \n           if @receiving_headers\n-            if idata.blank?\n+            if idata&.length&.zero?\n               @receiving_headers = false\n             elsif idata.to_s =~ /^\\s/\n               # This is a continuation of a header"
        },
        {
          "filename": "app/lib/smtp_server/server.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 7,
          "patch": "@@ -194,16 +194,11 @@ def run_event_loop\n                   eof = true\n                 end\n \n-                # Normalize all \\r\\n and \\n to \\r\\n, but ignore only \\r.\n-                # A \\r\\n may be split in 2 buffers (\\n in one buffer and \\r in the other)\n-                buffers[io] = buffers[io].gsub(/\\r/, \"\").encode(buffers[io].encoding, crlf_newline: true)\n-\n                 # We line buffer, so look to see if we have received a newline\n                 # and keep doing so until all buffered lines have been processed.\n-                while buffers[io].index(\"\\r\\n\")\n+                while buffers[io].index(\"\\n\")\n                   # Extract the line\n-                  line, buffers[io] = buffers[io].split(\"\\r\\n\", 2)\n-\n+                  line, buffers[io] = buffers[io].split(\"\\n\", 2)\n                   # Send the received line to the client object for processing\n                   result = client.handle(line)\n                   # If the client object returned some data, write it back to the client"
        },
        {
          "filename": "spec/lib/smtp_server/client/finished_spec.rb",
          "status": "modified",
          "additions": 33,
          "deletions": 7,
          "patch": "@@ -22,12 +22,32 @@ module SMTPServer\n     end\n \n     describe \"when finished sending data\" do\n+      context \"when the . character does not end with a <CR>\" do\n+        it \"does nothing\" do\n+          allow(Postal::Config.smtp_server).to receive(:max_message_size).and_return(1)\n+          client.handle(\"DATA\")\n+          client.handle(\"Subject: Hello\")\n+          client.handle(\"\\r\")\n+          expect(client.handle(\".\")).to be nil\n+        end\n+      end\n+\n+      context \"when the data before the . character does not end with a <CR>\" do\n+        it \"does nothing\" do\n+          allow(Postal::Config.smtp_server).to receive(:max_message_size).and_return(1)\n+          client.handle(\"DATA\")\n+          client.handle(\"Subject: Hello\")\n+          expect(client.handle(\".\\r\")).to be nil\n+        end\n+      end\n+\n       context \"when the data is larger than the maximum message size\" do\n         it \"returns an error and resets the state\" do\n           allow(Postal::Config.smtp_server).to receive(:max_message_size).and_return(1)\n           client.handle(\"DATA\")\n           client.handle(\"a\" * 1024 * 1024 * 10)\n-          expect(client.handle(\".\")).to eq \"552 Message too large (maximum size 1MB)\"\n+          client.handle(\"\\r\")\n+          expect(client.handle(\".\\r\")).to eq \"552 Message too large (maximum size 1MB)\"\n         end\n       end\n \n@@ -43,7 +63,8 @@ module SMTPServer\n           client.handle(\"To: #{rcpt_to}\")\n           client.handle(\"\")\n           client.handle(\"This is a test message\")\n-          expect(client.handle(\".\")).to eq \"550 Loop detected\"\n+          client.handle(\"\\r\")\n+          expect(client.handle(\".\\r\")).to eq \"550 Loop detected\"\n         end\n       end\n \n@@ -55,7 +76,8 @@ module SMTPServer\n           client.handle(\"To: #{rcpt_to}\")\n           client.handle(\"\")\n           client.handle(\"This is a test message\")\n-          expect(client.handle(\".\")).to eq \"530 From/Sender name is not valid\"\n+          client.handle(\"\\r\")\n+          expect(client.handle(\".\\r\")).to eq \"530 From/Sender name is not valid\"\n         end\n       end\n \n@@ -71,7 +93,8 @@ module SMTPServer\n           client.handle(\"To: #{rcpt_to}\")\n           client.handle(\"\")\n           client.handle(\"This is a test message\")\n-          expect(client.handle(\".\")).to eq \"250 OK\"\n+          client.handle(\"\\r\")\n+          expect(client.handle(\".\\r\")).to eq \"250 OK\"\n           queued_message = QueuedMessage.first\n           expect(queued_message).to have_attributes(\n             domain: \"example.com\",\n@@ -110,7 +133,8 @@ module SMTPServer\n             client.handle(\"To: #{rcpt_to}\")\n             client.handle(\"\")\n             client.handle(\"This is a test message\")\n-            expect(client.handle(\".\")).to eq \"250 OK\"\n+            client.handle(\"\\r\")\n+            expect(client.handle(\".\\r\")).to eq \"250 OK\"\n \n             queued_message = QueuedMessage.first\n             expect(queued_message).to have_attributes(\n@@ -141,7 +165,8 @@ module SMTPServer\n             client.handle(\"To: #{rcpt_to}\")\n             client.handle(\"\")\n             client.handle(\"This is a test message\")\n-            expect(client.handle(\".\")).to eq \"250 OK\"\n+            client.handle(\"\\r\")\n+            expect(client.handle(\".\\r\")).to eq \"250 OK\"\n \n             queued_message = QueuedMessage.first\n             expect(queued_message).to have_attributes(\n@@ -179,7 +204,8 @@ module SMTPServer\n           client.handle(\"To: #{rcpt_to}\")\n           client.handle(\"\")\n           client.handle(\"This is a test message\")\n-          expect(client.handle(\".\")).to eq \"250 OK\"\n+          client.handle(\"\\r\")\n+          expect(client.handle(\".\\r\")).to eq \"250 OK\"\n \n           queued_message = QueuedMessage.first\n           expect(queued_message).to have_attributes("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fd3c7ccdf6dc4ee0a76c9523cbd735159e4b8000",
            "date": "2024-10-31T17:53:20Z",
            "author_login": "Som23Git"
          },
          {
            "sha": "da90e75036c27482699921613d838f4058a100e7",
            "date": "2024-06-20T13:39:58Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "2b0919c1454eabea93db96f50ecbd8e36bb89f1f",
            "date": "2024-06-20T13:26:34Z",
            "author_login": "adamcooke"
          },
          {
            "sha": "3a33e53d843584757bb00898746aa059d7616db4",
            "date": "2024-06-20T13:20:44Z",
            "author_login": "adamcooke"
          },
          {
            "sha": "4fa88acea0dececd0eae485506a2ad8268fbea59",
            "date": "2024-06-20T13:16:28Z",
            "author_login": "adamcooke"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-116",
    "description": "Postal is an open source SMTP server. Postal versions less than 3.0.0 are vulnerable to SMTP Smuggling attacks which may allow incoming e-mails to be spoofed. This, in conjunction with a cooperative outgoing SMTP service, would allow for an incoming e-mail to be received by Postal addressed from a server that a user has 'authorised' to send mail on their behalf but were not the genuine author of the e-mail. Postal is not affected for sending outgoing e-mails as email is re-encoded with `<CR><LF>` line endings when transmitted over SMTP. This issue has been addressed and users should upgrade to Postal v3.0.0 or higher. Once upgraded, Postal will only accept End of DATA sequences which are explicitly `<CR><LF>.<CR><LF>`. If a non-compliant sequence is detected it will be logged to the SMTP server log. There are no workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-11T22:15:55.490",
    "last_modified": "2024-11-21T09:05:27.543",
    "fix_date": "2024-03-01T17:12:10Z"
  },
  "references": [
    {
      "url": "https://github.com/postalserver/postal/commit/0140dc4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/postalserver/postal/security/advisories/GHSA-j42r-6c99-hqf2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://sec-consult.com/blog/detail/smtp-smuggling-spoofing-e-mails-worldwide",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.postfix.org/smtp-smuggling.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/postalserver/postal/commit/0140dc4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/postalserver/postal/security/advisories/GHSA-j42r-6c99-hqf2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://sec-consult.com/blog/detail/smtp-smuggling-spoofing-e-mails-worldwide",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.postfix.org/smtp-smuggling.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.481137",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "postal",
    "owner": "postalserver",
    "created_at": "2017-04-19T12:04:57Z",
    "updated_at": "2025-01-14T10:35:01Z",
    "pushed_at": "2024-12-24T02:01:27Z",
    "size": 3261,
    "stars": 15080,
    "forks": 1077,
    "open_issues": 60,
    "watchers": 15080,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 716646,
      "Haml": 150676,
      "SCSS": 61452,
      "CoffeeScript": 8122,
      "HTML": 7990,
      "Shell": 3477,
      "Dockerfile": 1797,
      "JavaScript": 174
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:19:16.526523"
  }
}