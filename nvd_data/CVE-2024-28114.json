{
  "cve_id": "CVE-2024-28114",
  "github_data": {
    "repository": "peering-manager/peering-manager",
    "fix_commit": "8a865fb596c11ad7caf45aef317d8fcbce7f85ff",
    "related_commits": [
      "8a865fb596c11ad7caf45aef317d8fcbce7f85ff",
      "8a865fb596c11ad7caf45aef317d8fcbce7f85ff"
    ],
    "patch_url": "https://github.com/peering-manager/peering-manager/commit/8a865fb596c11ad7caf45aef317d8fcbce7f85ff.patch",
    "fix_commit_details": {
      "sha": "8a865fb596c11ad7caf45aef317d8fcbce7f85ff",
      "commit_date": "2024-01-25T18:04:36Z",
      "author": {
        "login": "gmazoyer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Run Jinja2 code in sandboxed environment",
        "length": 127,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 11,
        "additions": 9,
        "deletions": 2
      },
      "files": [
        {
          "filename": "docs/templating/index.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -3,6 +3,12 @@\n Peering Manager comes with a built-in templating feature. This feature can be\n used to generate configuration for routers as well as e-mails.\n \n+!!! warning\n+    Even though Peering Manager uses a sandboxed environment to run Jinja2\n+    logic, the language is powerful enough to do things that can potentially\n+    leak confidential details or even harm the machine. Be extremely careful\n+    when using code from someone else.\n+\n ## Jinja2\n \n The templating feature is based on"
        },
        {
          "filename": "peering_manager/jinja2/__init__.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -10,9 +10,10 @@ def render_jinja2(template, context, trim=False, lstrip=False):\n     import traceback\n \n     from django.conf import settings\n-    from jinja2 import Environment, TemplateSyntaxError\n+    from jinja2 import TemplateSyntaxError\n+    from jinja2.sandbox import SandboxedEnvironment\n \n-    environment = Environment(\n+    environment = SandboxedEnvironment(\n         loader=PeeringManagerLoader(), trim_blocks=trim, lstrip_blocks=lstrip\n     )\n     environment.add_extension(IncludeTemplateExtension)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0deed5a842d44b5383c9f3590402389cd9deca1c",
            "date": "2025-01-14T07:25:13Z",
            "author_login": "gmazoyer"
          },
          {
            "sha": "916a463bf88045cacdc7a17042122c5dac3de79f",
            "date": "2025-01-14T07:23:01Z",
            "author_login": "gmazoyer"
          },
          {
            "sha": "8bed7326d6d6982e71b9d07914f3d865d723308a",
            "date": "2025-01-14T07:17:18Z",
            "author_login": "gmazoyer"
          },
          {
            "sha": "95d6f3efe7ae1407c710b8f5a175fa4412c36e85",
            "date": "2025-01-14T07:17:00Z",
            "author_login": "gmazoyer"
          },
          {
            "sha": "bd6de6f109def8a4b1c01e6f59f08e87898a7fc3",
            "date": "2025-01-13T23:36:39Z",
            "author_login": "gmazoyer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-74",
    "description": "Peering Manager is a BGP session management tool. There is a Server Side Template Injection vulnerability that leads to Remote Code Execution in Peering Manager <=1.8.2. As a result arbitrary commands can be executed on the operating system that is running Peering Manager. This issue has been addressed in version 1.8.3. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-12T20:15:08.113",
    "last_modified": "2024-11-21T09:05:50.730",
    "fix_date": "2024-01-25T18:04:36Z"
  },
  "references": [
    {
      "url": "https://github.com/peering-manager/peering-manager/commit/8a865fb596c11ad7caf45aef317d8fcbce7f85ff",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/peering-manager/peering-manager/security/advisories/GHSA-q37x-qfrx-jcv6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://owasp.org/www-community/attacks/Command_Injection",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server_Side_Template_Injection",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://stackoverflow.com/questions/73939573/how-to-sanitise-string-of-python-code-with-python",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/peering-manager/peering-manager/commit/8a865fb596c11ad7caf45aef317d8fcbce7f85ff",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/peering-manager/peering-manager/security/advisories/GHSA-q37x-qfrx-jcv6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://owasp.org/www-community/attacks/Command_Injection",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server_Side_Template_Injection",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://stackoverflow.com/questions/73939573/how-to-sanitise-string-of-python-code-with-python",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.483904",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "peering-manager",
    "owner": "peering-manager",
    "created_at": "2017-08-15T20:37:42Z",
    "updated_at": "2025-01-14T08:18:17Z",
    "pushed_at": "2025-01-14T12:42:44Z",
    "size": 23996,
    "stars": 497,
    "forks": 95,
    "open_issues": 33,
    "watchers": 497,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 1632156,
      "JavaScript": 475588,
      "HTML": 273368,
      "SCSS": 250026,
      "Less": 240487,
      "CSS": 239965,
      "Shell": 4160
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:01:07.006026"
  }
}