{
  "cve_id": "CVE-2024-28180",
  "github_data": {
    "repository": "go-jose/go-jose",
    "fix_commit": "0dd4dd541c665fb292d664f77604ba694726f298",
    "related_commits": [
      "0dd4dd541c665fb292d664f77604ba694726f298",
      "add6a284ea0f844fd6628cba637be5451fe4b28a",
      "f4c051a0653d78199a053892f7619ebf96339502",
      "0dd4dd541c665fb292d664f77604ba694726f298",
      "add6a284ea0f844fd6628cba637be5451fe4b28a",
      "f4c051a0653d78199a053892f7619ebf96339502"
    ],
    "patch_url": "https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298.patch",
    "fix_commit_details": {
      "sha": "0dd4dd541c665fb292d664f77604ba694726f298",
      "commit_date": "2024-03-07T22:25:21Z",
      "author": {
        "login": "jsha",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "v2: backport decompression limit fix (#109)",
        "length": 64,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 145,
        "additions": 141,
        "deletions": 4
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "added",
          "additions": 84,
          "deletions": 0,
          "patch": "@@ -0,0 +1,84 @@\n+# v4.0.1\n+\n+## Fixed\n+\n+ - An attacker could send a JWE containing compressed data that used large\n+   amounts of memory and CPU when decompressed by `Decrypt` or `DecryptMulti`.\n+   Those functions now return an error if the decompressed data would exceed\n+   250kB or 10x the compressed size (whichever is larger). Thanks to\n+   Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj)\n+   for reporting.\n+\n+# v4.0.0\n+\n+This release makes some breaking changes in order to more thoroughly\n+address the vulnerabilities discussed in [Three New Attacks Against JSON Web\n+Tokens][1], \"Sign/encrypt confusion\", \"Billion hash attack\", and \"Polyglot\n+token\".\n+\n+## Changed\n+\n+ - Limit JWT encryption types (exclude password or public key types) (#78)\n+ - Enforce minimum length for HMAC keys (#85)\n+ - jwt: match any audience in a list, rather than requiring all audiences (#81)\n+ - jwt: accept only Compact Serialization (#75)\n+ - jws: Add expected algorithms for signatures (#74)\n+ - Require specifying expected algorithms for ParseEncrypted,\n+   ParseSigned, ParseDetached, jwt.ParseEncrypted, jwt.ParseSigned,\n+   jwt.ParseSignedAndEncrypted (#69, #74)\n+   - Usually there is a small, known set of appropriate algorithms for a program\n+     to use and it's a mistake to allow unexpected algorithms. For instance the\n+     \"billion hash attack\" relies in part on programs accepting the PBES2\n+     encryption algorithm and doing the necessary work even if they weren't\n+     specifically configured to allow PBES2.\n+ - Revert \"Strip padding off base64 strings\" (#82)\n+  - The specs require base64url encoding without padding.\n+ - Minimum supported Go version is now 1.21\n+\n+## Added\n+\n+ - ParseSignedCompact, ParseSignedJSON, ParseEncryptedCompact, ParseEncryptedJSON.\n+   - These allow parsing a specific serialization, as opposed to ParseSigned and\n+     ParseEncrypted, which try to automatically detect which serialization was\n+     provided. It's common to require a specific serialization for a specific\n+     protocol - for instance JWT requires Compact serialization.\n+\n+[1]: https://i.blackhat.com/BH-US-23/Presentations/US-23-Tervoort-Three-New-Attacks-Against-JSON-Web-Tokens.pdf\n+\n+# v3.0.3\n+\n+## Fixed\n+\n+ - Limit decompression output size to prevent a DoS. Backport from v4.0.1.\n+\n+# v3.0.2\n+\n+## Fixed\n+\n+ - DecryptMulti: handle decompression error (#19)\n+\n+## Changed\n+\n+ - jwe/CompactSerialize: improve performance (#67)\n+ - Increase the default number of PBKDF2 iterations to 600k (#48)\n+ - Return the proper algorithm for ECDSA keys (#45)\n+\n+## Added\n+\n+ - Add Thumbprint support for opaque signers (#38)\n+\n+# v3.0.1\n+\n+## Fixed\n+\n+ - Security issue: an attacker specifying a large \"p2c\" value can cause\n+   JSONWebEncryption.Decrypt and JSONWebEncryption.DecryptMulti to consume large\n+   amounts of CPU, causing a DoS. Thanks to Matt Schwager (@mschwager) for the\n+   disclosure and to Tom Tervoort for originally publishing the category of attack.\n+   https://i.blackhat.com/BH-US-23/Presentations/US-23-Tervoort-Three-New-Attacks-Against-JSON-Web-Tokens.pdf\n+\n+# v2.6.3\n+\n+## Fixed\n+\n+ - Limit decompression output size to prevent a DoS. Backport from v4.0.1."
        },
        {
          "filename": "crypter.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -406,6 +406,9 @@ func (ctx *genericEncrypter) Options() EncrypterOptions {\n // Decrypt and validate the object and return the plaintext. Note that this\n // function does not support multi-recipient, if you desire multi-recipient\n // decryption use DecryptMulti instead.\n+//\n+// Automatically decompresses plaintext, but returns an error if the decompressed\n+// data would be >250kB or >10x the size of the compressed data, whichever is larger.\n func (obj JSONWebEncryption) Decrypt(decryptionKey interface{}) ([]byte, error) {\n \theaders := obj.mergedHeaders(nil)\n \n@@ -470,6 +473,9 @@ func (obj JSONWebEncryption) Decrypt(decryptionKey interface{}) ([]byte, error)\n // with support for multiple recipients. It returns the index of the recipient\n // for which the decryption was successful, the merged headers for that recipient,\n // and the plaintext.\n+//\n+// Automatically decompresses plaintext, but returns an error if the decompressed\n+// data would be >250kB or >3x the size of the compressed data, whichever is larger.\n func (obj JSONWebEncryption) DecryptMulti(decryptionKey interface{}) (int, Header, []byte, error) {\n \tglobalHeaders := obj.mergedHeaders(nil)\n "
        },
        {
          "filename": "encoding.go",
          "status": "modified",
          "additions": 17,
          "deletions": 4,
          "patch": "@@ -21,6 +21,7 @@ import (\n \t\"compress/flate\"\n \t\"encoding/base64\"\n \t\"encoding/binary\"\n+\t\"fmt\"\n \t\"io\"\n \t\"math/big\"\n \t\"strings\"\n@@ -85,7 +86,7 @@ func decompress(algorithm CompressionAlgorithm, input []byte) ([]byte, error) {\n \t}\n }\n \n-// Compress with DEFLATE\n+// deflate compresses the input.\n func deflate(input []byte) ([]byte, error) {\n \toutput := new(bytes.Buffer)\n \n@@ -97,15 +98,27 @@ func deflate(input []byte) ([]byte, error) {\n \treturn output.Bytes(), err\n }\n \n-// Decompress with DEFLATE\n+// inflate decompresses the input.\n+//\n+// Errors if the decompressed data would be >250kB or >10x the size of the\n+// compressed data, whichever is larger.\n func inflate(input []byte) ([]byte, error) {\n \toutput := new(bytes.Buffer)\n \treader := flate.NewReader(bytes.NewBuffer(input))\n \n-\t_, err := io.Copy(output, reader)\n-\tif err != nil {\n+\tmaxCompressedSize := 10 * int64(len(input))\n+\tif maxCompressedSize < 250000 {\n+\t\tmaxCompressedSize = 250000\n+\t}\n+\n+\tlimit := maxCompressedSize + 1\n+\tn, err := io.CopyN(output, reader, limit)\n+\tif err != nil && err != io.EOF {\n \t\treturn nil, err\n \t}\n+\tif n == limit {\n+\t\treturn nil, fmt.Errorf(\"uncompressed data would be too large (>%d bytes)\", maxCompressedSize)\n+\t}\n \n \terr = reader.Close()\n \treturn output.Bytes(), err"
        },
        {
          "filename": "encoding_test.go",
          "status": "modified",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -18,6 +18,8 @@ package jose\n \n import (\n \t\"bytes\"\n+\t\"crypto/rand\"\n+\t\"io\"\n \t\"strings\"\n \t\"testing\"\n )\n@@ -57,6 +59,38 @@ func TestInvalidCompression(t *testing.T) {\n \t}\n }\n \n+// TestLargeZip tests that we can decompress a large input, so long as its\n+// compression ratio is reasonable.\n+func TestLargeZip(t *testing.T) {\n+\tinput := new(bytes.Buffer)\n+\t_, err := io.CopyN(input, rand.Reader, 251000)\n+\tif err != nil {\n+\t\tt.Fatalf(\"generating input: %s\", err)\n+\t}\n+\tcompressed, err := compress(DEFLATE, input.Bytes())\n+\tif err != nil {\n+\t\tt.Errorf(\"compressing: %s\", err)\n+\t}\n+\tt.Logf(\"compression ratio: %g\", float64(len(input.Bytes()))/float64(len(compressed)))\n+\t_, err = decompress(DEFLATE, compressed)\n+\tif err != nil {\n+\t\tt.Errorf(\"decompressing large input with low compression ratio: %s\", err)\n+\t}\n+}\n+\n+func TestZipBomb(t *testing.T) {\n+\tinput := strings.Repeat(\"a\", 251000)\n+\tcompressed, err := compress(DEFLATE, []byte(input))\n+\tif err != nil {\n+\t\tt.Errorf(\"compressing: %s\", err)\n+\t}\n+\tt.Logf(\"compression ratio: %d %g\", len(compressed), float64(len(input))/float64(len(compressed)))\n+\tout, err := decompress(DEFLATE, compressed)\n+\tif err == nil {\n+\t\tt.Errorf(\"expected error decompressing zip bomb, got none. output size %d\", len(out))\n+\t}\n+}\n+\n func TestByteBufferTrim(t *testing.T) {\n \tbuf := newBufferFromInt(1)\n \tif !bytes.Equal(buf.data, []byte{1}) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9dde8493b25c1b301ca97110f57c7774513f572c",
            "date": "2025-01-14T17:41:06Z",
            "author_login": "mcpherrinm"
          },
          {
            "sha": "89172c5b51f2a7492b6fc2ea22d03777c4673bbe",
            "date": "2025-01-13T14:54:53Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ee05e015574c7d4c55b9a802e9637327d7d2606a",
            "date": "2024-12-23T15:19:30Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c0aef3ef5eaf5ad5fdfae9de426ebea91778f3e4",
            "date": "2024-12-22T19:56:39Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "fdc2ceb0bbe2a29c582edfe07ea914c8dacd7e1b",
            "date": "2024-08-20T18:26:56Z",
            "author_login": "mcpherrinm"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-409",
    "description": "Package jose aims to provide an implementation of the Javascript Object Signing and Encryption set of standards. An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). This vulnerability has been patched in versions 4.0.1, 3.0.3 and 2.6.3.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-09T01:15:07.340",
    "last_modified": "2024-11-21T09:05:58.227",
    "fix_date": "2024-03-07T22:25:21Z"
  },
  "references": [
    {
      "url": "https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GD2GSBQTBLYADASUBHHZV2CZPTSLIPQJ/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/I6MMWFBOXJA6ZCXNVPDFJ4XMK5PVG5RG/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IJ6LAJJ2FTA2JVVOACCV5RZTOIZLXUNJ/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JNPMXL36YGS3GQEVI3Q5HKHJ7YAAQXL5/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MSOMHDKRPU3A2JEMRODT2IREDFBLVPGS/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UG5FSEYJ3GP27FZXC5YAAMMEC5XWKJHG/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UJO2U5ACZVACNQXJ5EBRFLFW6DP5BROY/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GD2GSBQTBLYADASUBHHZV2CZPTSLIPQJ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/I6MMWFBOXJA6ZCXNVPDFJ4XMK5PVG5RG/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IJ6LAJJ2FTA2JVVOACCV5RZTOIZLXUNJ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JNPMXL36YGS3GQEVI3Q5HKHJ7YAAQXL5/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MSOMHDKRPU3A2JEMRODT2IREDFBLVPGS/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UG5FSEYJ3GP27FZXC5YAAMMEC5XWKJHG/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UJO2U5ACZVACNQXJ5EBRFLFW6DP5BROY/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.476001",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "go-jose",
    "owner": "go-jose",
    "created_at": "2020-08-07T15:38:05Z",
    "updated_at": "2025-01-14T17:41:12Z",
    "pushed_at": "2025-01-14T17:41:09Z",
    "size": 1338,
    "stars": 344,
    "forks": 81,
    "open_issues": 25,
    "watchers": 344,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "v1",
      "v2",
      "v3"
    ],
    "languages": {
      "Go": 663113,
      "Raku": 4762
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:57:38.769077"
  }
}