{
  "cve_id": "CVE-2024-28195",
  "github_data": {
    "repository": "Yooooomi/your_spotify",
    "fix_commit": "c3ae87673910c9903bb53088c8b71ed2c9aa54e4",
    "related_commits": [
      "c3ae87673910c9903bb53088c8b71ed2c9aa54e4",
      "c3ae87673910c9903bb53088c8b71ed2c9aa54e4"
    ],
    "patch_url": "https://github.com/Yooooomi/your_spotify/commit/c3ae87673910c9903bb53088c8b71ed2c9aa54e4.patch",
    "fix_commit_details": {
      "sha": "c3ae87673910c9903bb53088c8b71ed2c9aa54e4",
      "commit_date": "2024-03-12T18:17:40Z",
      "author": {
        "login": "Yooooomi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-hfgf-99p3-6fjj",
        "length": 3365,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 339,
        "additions": 242,
        "deletions": 97
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -91,7 +91,7 @@ You can follow the instructions [here](https://github.com/Yooooomi/your_spotify/\n | API_ENDPOINT          | REQUIRED | The endpoint of your server |\r\n | SPOTIFY_PUBLIC        | REQUIRED | The public key of your Spotify application (cf [Creating the Spotify Application](#creating-the-spotify-application)) |\r\n | SPOTIFY_SECRET        | REQUIRED | The secret key of your Spotify application (cf [Creating the Spotify Application](#creating-the-spotify-application)) |\r\n-| CORS                  | _not defined_ | List of comma-separated origin allowed, or _nothing_ to allow any origin |\r\n+| CORS                  | _not defined_ | List of comma-separated origin allowed |\r\n | MAX_IMPORT_CACHE_SIZE | Infinite | The maximum element in the cache when importing data from an outside source, more cache means less requests to Spotify, resulting in faster imports |\r\n | MONGO_ENDPOINT        | mongodb://mongo:27017/your_spotify | The endpoint of the Mongo database, where **mongo** is the name of your service in the compose file |\r\n | PORT                  | 8080 | The port of the server, do not modify if you're using docker |\r\n@@ -102,10 +102,9 @@ You can follow the instructions [here](https://github.com/Yooooomi/your_spotify/\n \r\n ## CORS\r\n \r\n-You can edit the CORS for the server:\r\n-\r\n-- `all` will allow every source.\r\n+- Not defining it will default to authorize only the `CLIENT_ENDPOINT` origin.\r\n - `origin1,origin2` will allow `origin1` and `origin2`.\r\n+> If you really want to allow every origin no matter what, you can set the `CORS` value to `i-want-a-security-vulnerability-and-want-to-allow-all-origins`.\r\n \r\n # Creating the Spotify Application\r\n \r"
        },
        {
          "filename": "apps/client/public/index.html",
          "status": "modified",
          "additions": 45,
          "deletions": 31,
          "patch": "@@ -1,33 +1,47 @@\n <!DOCTYPE html>\n <html lang=\"en\">\n-  <head>\n-    <meta charset=\"utf-8\" />\n-    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n-    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n-    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n-    <script src=\"%PUBLIC_URL%/variables.js\"></script>\n-\n-    <title>Your Spotify</title>\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n-    <meta name=\"theme-color\" content=\"#000000\" />\n-\n-    <meta name=\"title\" content=\"Your Spotify\">\n-    <meta name=\"description\" content=\"Keep track of your Spotify listening habits with Your Spotify.\">\n-\n-    <meta property=\"og:type\" content=\"image/png\">\n-    <meta property=\"og:title\" content=\"Your Spotify\">\n-    <meta property=\"og:image:width\" content=\"1200\">\n-    <meta property=\"og:image:height\" content=\"628\">\n-    <meta property=\"og:description\" content=\"Keep track of your Spotify listening habits with Your Spotify.\">\n-    <meta property=\"og:image\" content=\"http://localhost:8080/static/your_spotify_1200.png\">\n-\n-    <meta property=\"twitter:card\" content=\"summary\">\n-    <meta property=\"twitter:title\" content=\"Your Spotify\">\n-    <meta property=\"twitter:description\" content=\"Keep track of your Spotify listening habits with Your Spotify.\">\n-    <meta property=\"twitter:image\" content=\"http://localhost:8080/static/your_spotify_1200.png\">\n-  </head>\n-  <body>\n-    <noscript>You need to enable JavaScript to run this app.</noscript>\n-    <div id=\"root\"></div>\n-  </body>\n-</html>\n+\n+<head>\n+  <meta charset=\"utf-8\" />\n+\n+  <!--\n+    While setting the CSP in HTTP headers is preferred, there does not seem to\n+    be a good way to do this in the react dev environment, so it is set here as\n+    a meta tag. Note that frame-ancestors CANNOT be set in the meta tag and\n+    MUST be set as a HTTP header in production!\n+\n+    Restricting connect-src is done at start of the client server.\n+    -->\n+  <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' https://i.scdn.co; connect-src *;\" />\n+\n+  <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n+  <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n+  <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n+  <script src=\"%PUBLIC_URL%/variables.js\"></script>\n+\n+  <title>Your Spotify</title>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n+  <meta name=\"theme-color\" content=\"#000000\" />\n+\n+  <meta name=\"title\" content=\"Your Spotify\">\n+  <meta name=\"description\" content=\"Keep track of your Spotify listening habits with Your Spotify.\">\n+\n+  <meta property=\"og:type\" content=\"image/png\">\n+  <meta property=\"og:title\" content=\"Your Spotify\">\n+  <meta property=\"og:image:width\" content=\"1200\">\n+  <meta property=\"og:image:height\" content=\"628\">\n+  <meta property=\"og:description\" content=\"Keep track of your Spotify listening habits with Your Spotify.\">\n+  <meta property=\"og:image\" content=\"http://localhost:8080/static/your_spotify_1200.png\">\n+\n+  <meta property=\"twitter:card\" content=\"summary\">\n+  <meta property=\"twitter:title\" content=\"Your Spotify\">\n+  <meta property=\"twitter:description\" content=\"Keep track of your Spotify listening habits with Your Spotify.\">\n+  <meta property=\"twitter:image\" content=\"http://localhost:8080/static/your_spotify_1200.png\">\n+</head>\n+\n+<body>\n+  <noscript>You need to enable JavaScript to run this app.</noscript>\n+  <div id=\"root\"></div>\n+</body>\n+\n+</html>\n\\ No newline at end of file"
        },
        {
          "filename": "apps/client/scripts/run/serve.json",
          "status": "added",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -0,0 +1,17 @@\n+{\n+  \"headers\": [\n+    {\n+      \"source\": \"*\",\n+      \"headers\": [\n+        {\n+          \"key\": \"Content-Security-Policy\",\n+          \"value\": \"frame-ancestors 'none';\"\n+        },\n+        {\n+          \"key\": \"X-Content-Type-Options\",\n+          \"value\": \"nosniff\"\n+        }\n+      ]\n+    }\n+  ]\n+}"
        },
        {
          "filename": "apps/client/scripts/run/serve.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,4 +4,4 @@\n # -l 0.0.0.0 means that it's hosted on all the interfaces\n # build/ is the output of the package built at build-time\n \n-serve -s -l tcp://0.0.0.0:3000 /app/apps/client/build/\n\\ No newline at end of file\n+serve -c /app/apps/client/scripts/run/serve.json -s -l tcp://0.0.0.0:3000 /app/apps/client/build/\n\\ No newline at end of file"
        },
        {
          "filename": "apps/client/scripts/run/variables.sh",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -18,6 +18,14 @@ then\n \n     # Editing meta image urls\n     sed -i \"s;image\\\" content=\\\"\\(.[^\\\"]*\\);image\\\" content=\\\"$API_ENDPOINT/static/your_spotify_1200.png;g\" \"$VAR_PATH/index.html\"\n+\n+    # Restricting connect-src to API_ENDPOINT with a trailing /\n+    API_ENDPOINT_ENDING_WITH_SLASH=$API_ENDPOINT\n+    if [[ \"$API_ENDPOINT_ENDING_WITH_SLASH\" != */ ]]\n+    then\n+        API_ENDPOINT_ENDING_WITH_SLASH=\"$API_ENDPOINT_ENDING_WITH_SLASH/\"\n+    fi\n+    sed -i \"s#connect-src \\(.*\\);#connect-src $API_ENDPOINT_ENDING_WITH_SLASH;#g\" \"$VAR_PATH/index.html\"\n else\n     echo \"API_ENDPOINT is not defined, web app won't work\"\n     exit 1"
        },
        {
          "filename": "apps/server/scripts/run/deprecated.sh",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -2,5 +2,6 @@\n \n if [ \"$CORS\" == \"all\" ]\n then\n-  echo \"Setting CORS to 'all' is not needed anymore, omitting it is the new way of authorizing every origin.\"\n+  echo \"Setting CORS to 'all' is not authorized anymore. To allow all sources, please specify CORS=i-want-a-security-vulnerability-and-want-to-allow-all-origins\"\n+  exit 1\n fi"
        },
        {
          "filename": "apps/server/src/app.ts",
          "status": "modified",
          "additions": 24,
          "deletions": 2,
          "patch": "@@ -17,9 +17,13 @@ import { get } from \"./tools/env\";\n import { LogLevelAccepts } from \"./tools/logger\";\n \n const app = express();\n+const ALLOW_ALL_CORS =\n+  \"i-want-a-security-vulnerability-and-want-to-allow-all-origins\";\n \n-let corsValue = get(\"CORS\")?.split(\",\");\n-if (corsValue?.[0] === \"all\") {\n+let corsValue: string[] | undefined = get(\"CORS\")?.split(\",\") ?? [\n+  new URL(get(\"CLIENT_ENDPOINT\")).origin,\n+];\n+if (corsValue?.[0] === ALLOW_ALL_CORS) {\n   corsValue = undefined;\n }\n \n@@ -31,6 +35,24 @@ app.use(\n   }),\n );\n \n+app.use((_, res, next) => {\n+  // Apply security headers for the whole backend here\n+\n+  // Apply a restrictive CSP for the server API just in case. As there isn't any\n+  // HTML content here, \"default-src 'none'\" is a good deny-all default in case\n+  // an attacker tries something funny.\n+  // \"frame-ancestors 'none'\" is required because frame-ancestors doesn't fall\n+  // back to default-src and nobody has legitimate business framing the backend.\n+  res.header(\n+    \"Content-Security-Policy\",\n+    \"default-src 'none'; object-src 'none'; frame-ancestors 'none';\"\n+  );\n+\n+  // Prevent MIME sniffing in browsers\n+  res.header(\"X-Content-Type-Options\", \"nosniff\");\n+  next();\n+});\n+\n if (LogLevelAccepts(\"info\")) {\n   app.use(morgan(\"dev\"));\n }"
        },
        {
          "filename": "apps/server/src/database/queries/privateData.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,8 +1,8 @@\n-import { randomUUID } from \"crypto\";\n+import { generateRandomString } from \"../../tools/crypto\";\n import { PrivateDataModel } from \"../Models\";\n \n export async function createPrivateData() {\n-  await PrivateDataModel.create({ jwtPrivateKey: randomUUID() });\n+  await PrivateDataModel.create({ jwtPrivateKey: generateRandomString(32) });\n }\n \n export async function getPrivateData() {"
        },
        {
          "filename": "apps/server/src/routes/oauth.ts",
          "status": "modified",
          "additions": 96,
          "deletions": 39,
          "patch": "@@ -1,5 +1,6 @@\n-import { Router } from \"express\";\n+import { Request, Response, Router } from \"express\";\n import { sign } from \"jsonwebtoken\";\n+import { z } from \"zod\";\n import {\n   createUser,\n   getUserCount,\n@@ -10,16 +11,39 @@ import { get, getWithDefault } from \"../tools/env\";\n import { logger } from \"../tools/logger\";\n import {\n   logged,\n+  validating,\n   withGlobalPreferences,\n   withHttpClient,\n } from \"../tools/middleware\";\n import { Spotify } from \"../tools/oauth/Provider\";\n-import { GlobalPreferencesRequest, SpotifyRequest } from \"../tools/types\";\n+import {\n+  GlobalPreferencesRequest,\n+  SpotifyRequest,\n+  TypedPayload,\n+} from \"../tools/types\";\n import { getPrivateData } from \"../database/queries/privateData\";\n \n export const router = Router();\n \n-router.get(\"/spotify\", async (_, res) => {\n+function storeTokenInCookie(\n+  request: Request,\n+  response: Response,\n+  token: string,\n+) {\n+  response.cookie(\"token\", token, {\n+    sameSite: \"strict\",\n+    httpOnly: true,\n+    secure: request.secure,\n+  });\n+}\n+\n+const OAUTH_COOKIE_NAME = \"oauth\";\n+const spotifyCallbackOAuthCookie = z.object({\n+  state: z.string(),\n+});\n+type OAuthCookie = z.infer<typeof spotifyCallbackOAuthCookie>;\n+\n+router.get(\"/spotify\", async (req, res) => {\n   const isOffline = get(\"OFFLINE_DEV_ID\");\n   if (isOffline) {\n     const privateData = await getPrivateData();\n@@ -29,52 +53,85 @@ router.get(\"/spotify\", async (_, res) => {\n     const token = sign({ userId: isOffline }, privateData.jwtPrivateKey, {\n       expiresIn: getWithDefault(\"COOKIE_VALIDITY_MS\", \"1h\"),\n     });\n-    res.cookie(\"token\", token);\n+    storeTokenInCookie(req, res, token);\n     res.status(204).end();\n     return;\n   }\n-  res.redirect(Spotify.getRedirect());\n+  const { url, state } = await Spotify.getRedirect();\n+  const oauthCookie: OAuthCookie = {\n+    state,\n+  };\n+\n+  res.cookie(OAUTH_COOKIE_NAME, oauthCookie, {\n+    sameSite: \"lax\",\n+    httpOnly: true,\n+    secure: req.secure,\n+  });\n+\n+  res.redirect(url);\n });\n \n-router.get(\"/spotify/callback\", withGlobalPreferences, async (req, res) => {\n-  const { query, globalPreferences } = req as GlobalPreferencesRequest;\n-  const { code } = query;\n+const spotifyCallback = z.object({\n+  code: z.string(),\n+  state: z.string(),\n+});\n \n-  const infos = await Spotify.exchangeCode(code as string);\n+router.get(\n+  \"/spotify/callback\",\n+  validating(spotifyCallback, \"query\"),\n+  withGlobalPreferences,\n+  async (req, res) => {\n+    const { query, globalPreferences } = req as GlobalPreferencesRequest;\n+    const { code, state } = query as TypedPayload<typeof spotifyCallback>;\n \n-  try {\n-    const client = Spotify.getHttpClient(infos.accessToken);\n-    const { data: spotifyMe } = await client.get(\"/me\");\n-    let user = await getUserFromField(\"spotifyId\", spotifyMe.id, false);\n-    if (!user) {\n-      if (!globalPreferences.allowRegistrations) {\n-        return res.redirect(`${get(\"CLIENT_ENDPOINT\")}/registrations-disabled`);\n+    try {\n+      const cookie = spotifyCallbackOAuthCookie.parse(\n+        req.cookies[OAUTH_COOKIE_NAME],\n+      );\n+\n+      if (state !== cookie.state) {\n+        throw new Error(\"State does not match\");\n       }\n-      const nbUsers = await getUserCount();\n-      user = await createUser(\n-        spotifyMe.display_name,\n-        spotifyMe.id,\n-        nbUsers === 0,\n+\n+      const infos = await Spotify.exchangeCode(code, cookie.state);\n+\n+      const client = Spotify.getHttpClient(infos.accessToken);\n+      const { data: spotifyMe } = await client.get(\"/me\");\n+      let user = await getUserFromField(\"spotifyId\", spotifyMe.id, false);\n+      if (!user) {\n+        if (!globalPreferences.allowRegistrations) {\n+          return res.redirect(\n+            `${get(\"CLIENT_ENDPOINT\")}/registrations-disabled`,\n+          );\n+        }\n+        const nbUsers = await getUserCount();\n+        user = await createUser(\n+          spotifyMe.display_name,\n+          spotifyMe.id,\n+          nbUsers === 0,\n+        );\n+      }\n+      await storeInUser(\"_id\", user._id, infos);\n+      const privateData = await getPrivateData();\n+      if (!privateData?.jwtPrivateKey) {\n+        throw new Error(\"No private data found, cannot sign JWT\");\n+      }\n+      const token = sign(\n+        { userId: user._id.toString() },\n+        privateData.jwtPrivateKey,\n+        {\n+          expiresIn: getWithDefault(\"COOKIE_VALIDITY_MS\", \"1h\"),\n+        },\n       );\n+      storeTokenInCookie(req, res, token);\n+    } catch (e) {\n+      logger.error(e);\n+    } finally {\n+      res.clearCookie(OAUTH_COOKIE_NAME);\n     }\n-    await storeInUser(\"_id\", user._id, infos);\n-    const privateData = await getPrivateData();\n-    if (!privateData?.jwtPrivateKey) {\n-      throw new Error(\"No private data found, cannot sign JWT\");\n-    }\n-    const token = sign(\n-      { userId: user._id.toString() },\n-      privateData.jwtPrivateKey,\n-      {\n-        expiresIn: getWithDefault(\"COOKIE_VALIDITY_MS\", \"1h\"),\n-      },\n-    );\n-    res.cookie(\"token\", token);\n-  } catch (e) {\n-    logger.error(e);\n-  }\n-  return res.redirect(get(\"CLIENT_ENDPOINT\"));\n-});\n+    return res.redirect(get(\"CLIENT_ENDPOINT\"));\n+  },\n+);\n \n router.get(\"/spotify/me\", logged, withHttpClient, async (req, res) => {\n   const { client } = req as SpotifyRequest;"
        },
        {
          "filename": "apps/server/src/routes/search.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -1,10 +1,10 @@\n-import { Router } from 'express';\n-import { z } from 'zod';\n-import { searchArtist, searchTrack } from '../database';\n-import { logger } from '../tools/logger';\n-import { isLoggedOrGuest, validating } from '../tools/middleware';\n-import { TypedPayload } from '../tools/types';\n-import { searchAlbum } from '../database/queries/album';\n+import { Router } from \"express\";\n+import { z } from \"zod\";\n+import { searchArtist, searchTrack } from \"../database\";\n+import { logger } from \"../tools/logger\";\n+import { isLoggedOrGuest, validating } from \"../tools/middleware\";\n+import { TypedPayload } from \"../tools/types\";\n+import { searchAlbum } from \"../database/queries/album\";\n \n export const router = Router();\n \n@@ -23,7 +23,7 @@ router.get(\n       const [artists, tracks, albums] = await Promise.all([\n         searchArtist(query),\n         searchTrack(query),\n-        searchAlbum(query)\n+        searchAlbum(query),\n       ]);\n       return res.status(200).send({ artists, tracks, albums });\n     } catch (e) {"
        },
        {
          "filename": "apps/server/src/tools/crypto.ts",
          "status": "added",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -0,0 +1,12 @@\n+import { getRandomValues, subtle } from \"crypto\";\n+\n+export function generateRandomString(entropyBytes: number) {\n+  const entropy = getRandomValues(new Uint8Array(entropyBytes));\n+  return Buffer.from(entropy).toString(\"base64url\");\n+}\n+\n+export async function sha256(plain: string) {\n+  const encoder = new TextEncoder();\n+  const data = encoder.encode(plain);\n+  return subtle.digest(\"SHA-256\", data);\n+}"
        },
        {
          "filename": "apps/server/src/tools/env.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1,5 +1,4 @@\n import { z } from \"zod\";\n-import { logger } from \"./logger\";\n import { toBoolean, toNumber } from \"./zod\";\n \n const validators = {"
        },
        {
          "filename": "apps/server/src/tools/oauth/Provider.ts",
          "status": "modified",
          "additions": 18,
          "deletions": 8,
          "patch": "@@ -1,12 +1,13 @@\n /* eslint-disable @typescript-eslint/no-unused-vars */\n import Axios from \"axios\";\n+import { generateRandomString, sha256 } from \"../crypto\";\n import { credentials } from \"./credentials\";\n \n export class Provider {\n   static getRedirect = () => {};\n \n   // @ts-ignore\n-  static exchangeCode = code => {};\n+  static exchangeCode = (code: string, state: string) => {};\n \n   // @ts-ignore\n   static refresh = refreshToken => {};\n@@ -19,18 +20,26 @@ export class Provider {\n }\n \n export class Spotify extends Provider {\n-  static getRedirect = () => {\n+  static getRedirect = async () => {\n     const { scopes } = credentials.spotify;\n     const { redirectUri } = credentials.spotify;\n \n-    return `https://accounts.spotify.com/authorize?response_type=code&client_id=${\n-      credentials.spotify.public\n-    }${\n-      scopes ? `&scope=${encodeURIComponent(scopes)}` : \"\"\n-    }&redirect_uri=${encodeURIComponent(redirectUri)}`;\n+    const authorizeUrl = new URL(\"https://accounts.spotify.com/authorize\");\n+    const state = generateRandomString(32);\n+\n+    authorizeUrl.searchParams.append(\"client_id\", credentials.spotify.public);\n+    authorizeUrl.searchParams.append(\"response_type\", \"code\");\n+    authorizeUrl.searchParams.append(\"redirect_uri\", redirectUri);\n+    authorizeUrl.searchParams.append(\"state\", state);\n+    authorizeUrl.searchParams.append(\"scope\", scopes);\n+\n+    return {\n+      url: authorizeUrl.toString(),\n+      state,\n+    };\n   };\n \n-  static exchangeCode = async (code: string) => {\n+  static exchangeCode = async (code: string, state: string) => {\n     const { data } = await Axios.post(\n       \"https://accounts.spotify.com/api/token\",\n       null,\n@@ -41,6 +50,7 @@ export class Spotify extends Provider {\n           redirect_uri: credentials.spotify.redirectUri,\n           client_id: credentials.spotify.public,\n           client_secret: credentials.spotify.secret,\n+          state,\n         },\n         headers: {\n           \"Content-Type\": \"application/x-www-form-urlencoded\","
        },
        {
          "filename": "monorepo.code-workspace",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -17,6 +17,12 @@\n     ],\n     \"[typescript]\": {\n       \"editor.defaultFormatter\": \"dbaeumer.vscode-eslint\"\n+    },\n+    \"[json]\": {\n+      \"editor.defaultFormatter\": \"vscode.json-language-features\"\n+    },\n+    \"[html]\": {\n+      \"editor.defaultFormatter\": \"vscode.html-language-features\"\n     }\n   },\n   \"extensions\": {"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7d4ba036b815dba1aecab8092a25e0f47467e5fe",
            "date": "2024-11-24T14:57:00Z",
            "author_login": "Yooooomi"
          },
          {
            "sha": "7127a69ade99cae7f1c584de3576dedf2a07880a",
            "date": "2024-11-24T14:56:44Z",
            "author_login": "Yooooomi"
          },
          {
            "sha": "37689cfe5fd4bca63b52963328c74f165ac4b4dc",
            "date": "2024-11-24T14:55:17Z",
            "author_login": "Yooooomi"
          },
          {
            "sha": "9747304dab6ea0277982ed53faa693fcc432bcc0",
            "date": "2024-11-24T14:54:58Z",
            "author_login": "Yooooomi"
          },
          {
            "sha": "7ce4064f2cece1abc373c59516ebe31599123c57",
            "date": "2024-11-24T14:50:00Z",
            "author_login": "Yooooomi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-352",
    "description": "your_spotify is an open source, self hosted Spotify tracking dashboard. YourSpotify versions < 1.9.0 do not protect the API and login flow against Cross-Site Request Forgery (CSRF). Attackers can use this to execute CSRF attacks on victims, allowing them to retrieve, modify or delete data on the affected YourSpotify instance. Using repeated CSRF attacks, it is also possible to create a new user on the victim instance and promote the new user to instance administrator if a legitimate administrator visits a website prepared by an attacker. Note: Real-world exploitability of this vulnerability depends on the browser version and browser settings in use by the victim. This issue has been addressed in version 1.9.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-13T18:15:07.360",
    "last_modified": "2024-11-21T09:06:00.303",
    "fix_date": "2024-03-12T18:17:40Z"
  },
  "references": [
    {
      "url": "https://github.com/Yooooomi/your_spotify/commit/c3ae87673910c9903bb53088c8b71ed2c9aa54e4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Yooooomi/your_spotify/security/advisories/GHSA-hfgf-99p3-6fjj",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Yooooomi/your_spotify/commit/c3ae87673910c9903bb53088c8b71ed2c9aa54e4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/Yooooomi/your_spotify/security/advisories/GHSA-hfgf-99p3-6fjj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.491132",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "your_spotify",
    "owner": "Yooooomi",
    "created_at": "2020-02-05T16:56:19Z",
    "updated_at": "2025-01-14T07:05:59Z",
    "pushed_at": "2024-12-14T18:08:43Z",
    "size": 4347,
    "stars": 3339,
    "forks": 140,
    "open_issues": 104,
    "watchers": 3339,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "TypeScript": 533186,
      "CSS": 27127,
      "Shell": 3302,
      "JavaScript": 2927,
      "HTML": 2066
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:36:36.290765"
  }
}