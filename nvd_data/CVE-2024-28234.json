{
  "cve_id": "CVE-2024-28234",
  "github_data": {
    "repository": "contao/contao",
    "fix_commit": "55b995d8d35da0d36bc6a22c53fe6423ab0c4ae2",
    "related_commits": [
      "55b995d8d35da0d36bc6a22c53fe6423ab0c4ae2",
      "6d42e667177c972ae7c219645593c262d7764ce2",
      "55b995d8d35da0d36bc6a22c53fe6423ab0c4ae2",
      "6d42e667177c972ae7c219645593c262d7764ce2"
    ],
    "patch_url": "https://github.com/contao/contao/commit/55b995d8d35da0d36bc6a22c53fe6423ab0c4ae2.patch",
    "fix_commit_details": {
      "sha": "55b995d8d35da0d36bc6a22c53fe6423ab0c4ae2",
      "commit_date": "2024-04-09T05:18:05Z",
      "author": {
        "login": "leofeyer",
        "type": "User",
        "stats": {
          "total_commits": 21763,
          "average_weekly_commits": 25.335273573923168,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 691
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-j55w-hjpj-825g",
        "length": 687,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 541,
        "additions": 483,
        "deletions": 58
      },
      "files": [
        {
          "filename": "comments-bundle/contao/classes/Comments.php",
          "status": "modified",
          "additions": 2,
          "deletions": 58,
          "patch": "@@ -10,6 +10,7 @@\n \n namespace Contao;\n \n+use Contao\\CommentsBundle\\Util\\BbCode;\n use Contao\\CoreBundle\\EventListener\\Widget\\HttpUrlListener;\n use Contao\\CoreBundle\\Exception\\PageNotFoundException;\n use Contao\\CoreBundle\\Util\\UrlUtil;\n@@ -408,70 +409,13 @@ protected function renderCommentForm(FrontendTemplate $objTemplate, \\stdClass $o\n \t/**\n \t * Replace bbcode and return the HTML string\n \t *\n-\t * Supports the following tags:\n-\t *\n-\t * * [b][/b] bold\n-\t * * [i][/i] italic\n-\t * * [u][/u] underline\n-\t * * [img][/img]\n-\t * * [code][/code]\n-\t * * [color=#ff0000][/color]\n-\t * * [quote][/quote]\n-\t * * [quote=tim][/quote]\n-\t * * [url][/url]\n-\t * * [url=http://][/url]\n-\t * * [email][/email]\n-\t * * [email=name@example.com][/email]\n-\t *\n \t * @param string $strComment\n \t *\n \t * @return string\n \t */\n \tpublic function parseBbCode($strComment)\n \t{\n-\t\t$arrSearch = array\n-\t\t(\n-\t\t\t'@\\[b\\](.*)\\[/b\\]@Uis',\n-\t\t\t'@\\[i\\](.*)\\[/i\\]@Uis',\n-\t\t\t'@\\[u\\](.*)\\[/u\\]@Uis',\n-\t\t\t'@\\s*\\[code\\](.*)\\[/code\\]\\s*@Uis',\n-\t\t\t'@\\[color=([^\\]\" ]+)\\](.*)\\[/color\\]@Uis',\n-\t\t\t'@\\s*\\[quote\\](.*)\\[/quote\\]\\s*@Uis',\n-\t\t\t'@\\s*\\[quote=([^\\]]+)\\](.*)\\[/quote\\]\\s*@Uis',\n-\t\t\t'@\\[img\\]\\s*([^\\[\" ]+\\.(jpe?g|png|gif|bmp|tiff?|ico))\\s*\\[/img\\]@i',\n-\t\t\t'@\\[url\\]\\s*([^\\[\" ]+)\\s*\\[/url\\]@i',\n-\t\t\t'@\\[url=([^\\]\" ]+)\\](.*)\\[/url\\]@Uis',\n-\t\t\t'@\\[email\\]\\s*([^\\[\" ]+)\\s*\\[/email\\]@i',\n-\t\t\t'@\\[email=([^\\]\" ]+)\\](.*)\\[/email\\]@Uis',\n-\t\t\t'@href=\"(([a-z0-9]+\\.)*[a-z0-9]+\\.([a-z]{2}|asia|biz|com|info|name|net|org|tel)(/|\"))@i'\n-\t\t);\n-\n-\t\t$arrReplace = array\n-\t\t(\n-\t\t\t'<strong>$1</strong>',\n-\t\t\t'<em>$1</em>',\n-\t\t\t'<span style=\"text-decoration:underline\">$1</span>',\n-\t\t\t\"\\n\\n\" . '<div class=\"code\"><p>' . $GLOBALS['TL_LANG']['MSC']['com_code'] . '</p><pre>$1</pre></div>' . \"\\n\\n\",\n-\t\t\t'<span style=\"color:$1\">$2</span>',\n-\t\t\t\"\\n\\n\" . '<blockquote>$1</blockquote>' . \"\\n\\n\",\n-\t\t\t\"\\n\\n\" . '<blockquote><p>' . sprintf($GLOBALS['TL_LANG']['MSC']['com_quote'], '$1') . '</p>$2</blockquote>' . \"\\n\\n\",\n-\t\t\t'<img src=\"$1\" alt=\"\" />',\n-\t\t\t'<a href=\"$1\">$1</a>',\n-\t\t\t'<a href=\"$1\">$2</a>',\n-\t\t\t'<a href=\"mailto:$1\">$1</a>',\n-\t\t\t'<a href=\"mailto:$1\">$2</a>',\n-\t\t\t'href=\"http://$1'\n-\t\t);\n-\n-\t\t$strComment = preg_replace($arrSearch, $arrReplace, $strComment);\n-\n-\t\t// Encode e-mail addresses\n-\t\tif (str_contains($strComment, 'mailto:'))\n-\t\t{\n-\t\t\t$strComment = StringUtil::encodeEmail($strComment);\n-\t\t}\n-\n-\t\treturn $strComment;\n+\t\treturn (new BbCode())->toHtml($strComment);\n \t}\n \n \t/**"
        },
        {
          "filename": "comments-bundle/src/Util/BbCode.php",
          "status": "added",
          "additions": 229,
          "deletions": 0,
          "patch": "@@ -0,0 +1,229 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of Contao.\n+ *\n+ * (c) Leo Feyer\n+ *\n+ * @license LGPL-3.0-or-later\n+ */\n+\n+namespace Contao\\CommentsBundle\\Util;\n+\n+use Contao\\Idna;\n+use Contao\\StringUtil;\n+use Contao\\Validator;\n+\n+/**\n+ * @internal\n+ */\n+final class BbCode\n+{\n+    /**\n+     * Converts text containing BBCode to HTML.\n+     *\n+     * Supports the following tags:\n+     *\n+     * * [b][/b] bold\n+     * * [i][/i] italic\n+     * * [u][/u] underline\n+     * * [code][/code]\n+     * * [quote][/quote]\n+     * * [quote=author][/quote]\n+     * * [url][/url]\n+     * * [url=https://\u2026][/url]\n+     * * [email][/email]\n+     * * [email=name@example.com][/email]\n+     */\n+    public function toHtml(string $bbCode): string\n+    {\n+        return str_replace(['{', '}'], ['&#123;', '&#125;'], $this->compile($this->parse($this->tokenize($bbCode), $bbCode)));\n+    }\n+\n+    /**\n+     * Find BBCode tokens and annotate them with their position/tag/type and\n+     * attribute. We're only matching tokens in the form '[tag]', '[/tag]' and\n+     * '[tag=attr]'.\n+     */\n+    private function tokenize(string $input): array\n+    {\n+        if (false === preg_match_all('%\\[(/?)(b|i|u|quote|code|url|email|img|color)(?:=([^\\[\\]]*))?]%', $input, $matches, PREG_OFFSET_CAPTURE)) {\n+            throw new \\InvalidArgumentException('Could not tokenize input.');\n+        }\n+\n+        $tokens = [];\n+\n+        foreach ($matches[0] as $index => [$token, $position]) {\n+            $tokens[] = [\n+                'start' => $position,\n+                'end' => $position + \\strlen($token),\n+                'closing' => '/' === $matches[1][$index][0],\n+                'tag' => $matches[2][$index][0],\n+                'attr' => $matches[3][$index][0] ?: null,\n+            ];\n+        }\n+\n+        return $tokens;\n+    }\n+\n+    /**\n+     * Parses tokens into a node tree. Input before/after tokens is treated as\n+     * text.\n+     */\n+    private function parse(array $tokens, string $input): Node\n+    {\n+        $root = new Node();\n+        $node = $root;\n+        $tags = [];\n+        $position = 0;\n+\n+        $addNode = static function (Node $parent, $type): Node {\n+            $node = new Node($parent, $type);\n+            $parent->children[] = $node;\n+\n+            return $node;\n+        };\n+\n+        $advance = static function (array $token) use (&$position): void {\n+            $position = $token['end'];\n+        };\n+\n+        $numTokens = \\count($tokens);\n+\n+        for ($i = 0; $i < $numTokens; ++$i) {\n+            $current = $tokens[$i];\n+\n+            // Text before token\n+            if (($length = $current['start'] - $position) > 0) {\n+                $addNode($node, Node::TYPE_TEXT)->setValue(substr($input, $position, $length));\n+            }\n+\n+            // Code\n+            if (('code' === $current['tag']) && !$current['closing']) {\n+                for ($j = $i + 1; $j < $numTokens; ++$j) {\n+                    if ('code' === $tokens[$j]['tag'] && $tokens[$j]['closing']) {\n+                        $addNode($root, Node::TYPE_CODE)->setValue(substr($input, $current['end'], $tokens[$j]['start'] - $current['end']));\n+                        $advance($tokens[$j]);\n+                        $i = $j;\n+                        continue 2;\n+                    }\n+                }\n+            }\n+\n+            // Blocks\n+            $onTagStack = \\in_array($current['tag'], $tags, true);\n+\n+            if (\\in_array($current['tag'], ['b', 'i', 'u', 'url', 'email'], true)) {\n+                if (!$current['closing'] && !$onTagStack) {\n+                    $node = $addNode($node, Node::TYPE_BLOCK)->setTag($current['tag'])->setValue($current['attr']);\n+                    $tags[] = $current['tag'];\n+                } elseif ($current['closing'] && $onTagStack) {\n+                    do {\n+                        $node = $node->parent;\n+                    } while ($current['tag'] !== array_pop($tags));\n+                }\n+            } elseif ('quote' === $current['tag']) {\n+                if (!$current['closing'] && !$onTagStack) {\n+                    $node = $addNode($root, Node::TYPE_BLOCK)->setTag($current['tag'])->setValue($current['attr']);\n+                    $tags = [$current['tag']];\n+                } elseif ($current['closing'] && $onTagStack) {\n+                    $node = $node->parent;\n+                    $tags = [];\n+                }\n+            }\n+\n+            $advance($current);\n+        }\n+\n+        // Text after last token\n+        if ('' !== ($text = substr($input, $position))) {\n+            $addNode($root, Node::TYPE_TEXT)->setValue($text);\n+        }\n+\n+        return $root;\n+    }\n+\n+    /**\n+     * Compiles a node (tree) back into a string.\n+     */\n+    private function compile(Node $node): string\n+    {\n+        if (Node::TYPE_ROOT === $node->type) {\n+            return $this->subCompile($node->children);\n+        }\n+\n+        if (Node::TYPE_BLOCK === $node->type) {\n+            if ('' === ($children = $this->subCompile($node->children))) {\n+                return '';\n+            }\n+\n+            switch ($node->tag) {\n+                case 'b':\n+                    return sprintf('<strong>%s</strong>', $children);\n+\n+                case 'i':\n+                    return sprintf('<em>%s</em>', $children);\n+\n+                case 'u':\n+                    return sprintf('<span style=\"text-decoration: underline\">%s</span>', $children);\n+\n+                case 'quote':\n+                    if (null !== $node->value) {\n+                        return sprintf(\n+                            '<blockquote><p>%s</p>%s</blockquote>',\n+                            sprintf($GLOBALS['TL_LANG']['MSC']['com_quote'], StringUtil::specialchars($node->value, true)),\n+                            $children,\n+                        );\n+                    }\n+\n+                    return sprintf('<blockquote>%s</blockquote>', $children);\n+\n+                case 'email':\n+                    $uri = $node->value ?: $node->getFirstChildValue() ?? '';\n+                    $title = $node->value ? $children : $uri;\n+\n+                    try {\n+                        if (Validator::isEmail($uri)) {\n+                            return sprintf('<a href=\"mailto:%s\">%s</a>', StringUtil::specialchars(Idna::encodeEmail($uri), true), StringUtil::specialchars($title, true));\n+                        }\n+                    } catch (\\InvalidArgumentException) {\n+                    }\n+\n+                    return StringUtil::specialchars($title, true);\n+\n+                case 'url':\n+                    $uri = $node->value ?: $node->getFirstChildValue() ?? '';\n+                    $title = $node->value ? $children : $uri;\n+\n+                    try {\n+                        if (Validator::isUrl($uri)) {\n+                            return sprintf('<a href=\"%s\" rel=\"noopener noreferrer nofollow\">%s</a>', StringUtil::specialchars(Idna::encodeUrl($uri), true), StringUtil::specialchars($title, true));\n+                        }\n+                    } catch (\\InvalidArgumentException) {\n+                    }\n+\n+                    return StringUtil::specialchars($title, true);\n+\n+                default:\n+                    throw new \\RuntimeException('Invalid block value.');\n+            }\n+        }\n+\n+        if (Node::TYPE_CODE === $node->type) {\n+            return sprintf('<div class=\"code\"><p>%s</p><pre>%s</pre></div>', $GLOBALS['TL_LANG']['MSC']['com_code'], StringUtil::specialchars($node->value, true));\n+        }\n+\n+        if (Node::TYPE_TEXT === $node->type) {\n+            return StringUtil::specialchars($node->value, true);\n+        }\n+\n+        throw new \\RuntimeException('Invalid node type.');\n+    }\n+\n+    private function subCompile(array $nodes): string\n+    {\n+        return implode('', array_map(fn (Node $node): string => $this->compile($node), $nodes));\n+    }\n+}"
        },
        {
          "filename": "comments-bundle/src/Util/Node.php",
          "status": "added",
          "additions": 65,
          "deletions": 0,
          "patch": "@@ -0,0 +1,65 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of Contao.\n+ *\n+ * (c) Leo Feyer\n+ *\n+ * @license LGPL-3.0-or-later\n+ */\n+\n+namespace Contao\\CommentsBundle\\Util;\n+\n+/**\n+ * @internal\n+ */\n+final class Node\n+{\n+    public const TYPE_ROOT = 0;\n+\n+    public const TYPE_TEXT = 1;\n+\n+    public const TYPE_BLOCK = 2;\n+\n+    public const TYPE_CODE = 3;\n+\n+    public string|null $tag = null;\n+\n+    public string|null $value = null;\n+\n+    /**\n+     * @var array<Node>\n+     */\n+    public array $children = [];\n+\n+    public function __construct(\n+        public self|null $parent = null,\n+        public int $type = self::TYPE_ROOT,\n+    ) {\n+    }\n+\n+    public function setTag(string $tag): self\n+    {\n+        $this->tag = $tag;\n+\n+        return $this;\n+    }\n+\n+    public function setValue(string|null $value): self\n+    {\n+        $this->value = $value;\n+\n+        return $this;\n+    }\n+\n+    public function getFirstChildValue(): string|null\n+    {\n+        if ([] === $this->children) {\n+            return null;\n+        }\n+\n+        return $this->children[0]->value;\n+    }\n+}"
        },
        {
          "filename": "comments-bundle/tests/Util/BbCodeTest.php",
          "status": "added",
          "additions": 140,
          "deletions": 0,
          "patch": "@@ -0,0 +1,140 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of Contao.\n+ *\n+ * (c) Leo Feyer\n+ *\n+ * @license LGPL-3.0-or-later\n+ */\n+\n+use Contao\\CommentsBundle\\Util\\BbCode;\n+use PHPUnit\\Framework\\TestCase;\n+\n+class BbCodeTest extends TestCase\n+{\n+    /**\n+     * @dataProvider provideBbCode\n+     */\n+    public function testConvertToHtml(string $bbCode, string $expectedHtml): void\n+    {\n+        $GLOBALS['TL_LANG']['MSC'] = [\n+            'com_quote' => '%s wrote:',\n+            'com_code' => 'Code:',\n+        ];\n+\n+        $this->assertSame($expectedHtml, (new BbCode())->toHtml($bbCode));\n+\n+        unset($GLOBALS['TL_LANG']);\n+    }\n+\n+    public function provideBbCode(): Generator\n+    {\n+        yield 'transforms b,i and u tags' => [\n+            'This should be [b]strong,[/b] [i]italic[/i] and [u]underlined[/u].',\n+            'This should be <strong>strong,</strong> <em>italic</em> and <span style=\"text-decoration: underline\">underlined</span>.',\n+        ];\n+\n+        yield 'ignores non-opened tags' => [\n+            'foo[/i] bar',\n+            'foo bar',\n+        ];\n+\n+        yield 'ignores non-closed tags' => [\n+            'foo [i]bar',\n+            'foo bar',\n+        ];\n+\n+        yield 'ignores nesting the same tag ' => [\n+            '[i]foo [i]bar[/i][/i]',\n+            '<em>foo bar</em>',\n+        ];\n+\n+        yield 'resolves interleaved tags' => [\n+            '[i][b]foo[/i]bar[/b]',\n+            '<em><strong>foo</strong></em>bar',\n+        ];\n+\n+        yield 'transforms quote tags' => [\n+            '[quote]See? A \"quote\".[/quote]',\n+            '<blockquote>See? A &quot;quote&quot;.</blockquote>',\n+        ];\n+\n+        yield 'transforms quote tags with author attribute' => [\n+            '[quote=Someone]I\\d rather have [b]markdown[/b][/quote]',\n+            '<blockquote><p>Someone wrote:</p>I\\d rather have <strong>markdown</strong></blockquote>',\n+        ];\n+\n+        yield 'ignores nested quotes' => [\n+            '[quote]A [quote]quote[/quote] of a quote[/quote]',\n+            '<blockquote>A quote</blockquote> of a quote',\n+        ];\n+\n+        yield 'only allows quotes on top level' => [\n+            'A [b]strong [quote]statement[/quote]![/b]',\n+            'A <strong>strong </strong><blockquote>statement</blockquote>!',\n+        ];\n+\n+        yield 'wraps code in pre tags' => [\n+            'some [code]things without [b]formatting[/b][/code]',\n+            'some <div class=\"code\"><p>Code:</p><pre>things without [b]formatting[/b]</pre></div>',\n+        ];\n+\n+        yield 'only allows code on top level' => [\n+            '[i][code]no italic code?[/code][/i]',\n+            '<div class=\"code\"><p>Code:</p><pre>no italic code?</pre></div>',\n+        ];\n+\n+        yield 'transforms url tags' => [\n+            '[url]https://example.com[/url] [url=https://example.com]my website[/url]',\n+            '<a href=\"https://example.com\" rel=\"noopener noreferrer nofollow\">https://example.com</a> <a href=\"https://example.com\" rel=\"noopener noreferrer nofollow\">my website</a>',\n+        ];\n+\n+        yield 'transforms email tags' => [\n+            '[email]foo@contao.org[/email] [email=foo@contao.org]my email address[/email]',\n+            '<a href=\"mailto:foo@contao.org\">foo@contao.org</a> <a href=\"mailto:foo@contao.org\">my email address</a>',\n+        ];\n+\n+        yield 'ignores invalid urls (no FQDN)' => [\n+            '[url=foobar]foobar[/url] [url]foo.org[/url]',\n+            'foobar foo.org',\n+        ];\n+\n+        yield 'ignores invalid email addresses' => [\n+            '[email=foobar]foobar[/email] [email]foobar[/email]',\n+            'foobar foobar',\n+        ];\n+\n+        yield 'ignores img and color tag' => [\n+            '[color=\"red\"]colored[/color] [img]image[/img]',\n+            'colored image',\n+        ];\n+\n+        yield 'does not treat other things in brackets as tags' => [\n+            '[x] Yes or [ ] No? [o][/o]',\n+            '[x] Yes or [ ] No? [o][/o]',\n+        ];\n+\n+        yield 'replaces special chars' => [\n+            'a&b{{no}}]<>\\'\":',\n+            'a&amp;b]&lt;&gt;&apos;&quot;:',\n+        ];\n+\n+        yield 'encodes malicious email' => [\n+            '[email]\"/onmouseenter=alert(1)>\"@contao.org[/email]',\n+            '<a href=\"mailto:&quot;/onmouseenter=alert(1)&gt;&quot;@contao.org\">&quot;/onmouseenter=alert(1)&gt;&quot;@contao.org</a>',\n+        ];\n+\n+        yield 'encodes URLs' => [\n+            '[url]https://example.com/foo&bar[/url]',\n+            '<a href=\"https://example.com/foo&amp;bar\" rel=\"noopener noreferrer nofollow\">https://example.com/foo&amp;bar</a>',\n+        ];\n+\n+        yield 'encodes insert tags' => [\n+            '{[url]{insert_bad}[url]}',\n+            '&#123;&#123;insert_bad&#125;&#125;',\n+        ];\n+    }\n+}"
        },
        {
          "filename": "comments-bundle/tests/Util/NodeTest.php",
          "status": "added",
          "additions": 47,
          "deletions": 0,
          "patch": "@@ -0,0 +1,47 @@\n+<?php\n+\n+declare(strict_types=1);\n+\n+/*\n+ * This file is part of Contao.\n+ *\n+ * (c) Leo Feyer\n+ *\n+ * @license LGPL-3.0-or-later\n+ */\n+\n+use Contao\\CommentsBundle\\Util\\Node;\n+use PHPUnit\\Framework\\TestCase;\n+\n+class NodeTest extends TestCase\n+{\n+    public function testSetsAndGetsValues(): void\n+    {\n+        $default = new Node();\n+\n+        $this->assertSame(Node::TYPE_ROOT, $default->type);\n+        $this->assertNull($default->parent);\n+        $this->assertNull($default->tag);\n+        $this->assertNull($default->value);\n+        $this->assertEmpty($default->children);\n+\n+        $node = (new Node($default, Node::TYPE_CODE))->setTag('tag')->setValue('value');\n+\n+        $this->assertSame($default, $node->parent);\n+        $this->assertSame(Node::TYPE_CODE, $node->type);\n+        $this->assertSame('tag', $node->tag);\n+        $this->assertSame('value', $node->value);\n+    }\n+\n+    public function testGetsFirstChildValue(): void\n+    {\n+        $node = new Node();\n+\n+        $this->assertNull($node->getFirstChildValue());\n+\n+        $node->children[] = (new Node())->setValue('v1');\n+        $node->children[] = (new Node())->setValue('v2');\n+\n+        $this->assertSame('v1', $node->getFirstChildValue());\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "284cdb3ccf0015b21b0c07dbead4c64468963a2e",
            "date": "2025-01-14T13:52:41Z",
            "author_login": "aschempp"
          },
          {
            "sha": "d06313107886cb350569085d99fbbccd072b10a2",
            "date": "2025-01-14T10:22:33Z",
            "author_login": "m-vo"
          },
          {
            "sha": "34a614bfe094760cdfd8ecdc2257a17e5f4212e7",
            "date": "2025-01-14T10:18:46Z",
            "author_login": "ausi"
          },
          {
            "sha": "b43e1edd5e2cbd61f27facf55bae6b65129a2c32",
            "date": "2025-01-14T09:47:21Z",
            "author_login": "zoglo"
          },
          {
            "sha": "6a5bc6206999ba993b8ee3eb4f8402a8f6aaf361",
            "date": "2025-01-14T09:00:55Z",
            "author_login": "leofeyer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-74",
    "description": "Contao is an open source content management system. Starting in version 2.0.0 and prior to versions 4.13.40 and 5.3.4, it is possible to inject CSS styles via BBCode in comments. Installations are only affected if BBCode is enabled. Contao versions 4.13.40 and 5.3.4 have a patch for this issue. As a workaround, disable BBCode for comments.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-09T14:15:08.897",
    "last_modified": "2025-01-02T17:49:55.720",
    "fix_date": "2024-04-09T05:18:05Z"
  },
  "references": [
    {
      "url": "https://contao.org/en/security-advisories/insufficient-bbcode-sanitization",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/contao/contao/commit/55b995d8d35da0d36bc6a22c53fe6423ab0c4ae2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/contao/contao/commit/6d42e667177c972ae7c219645593c262d7764ce2",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/contao/contao/security/advisories/GHSA-j55w-hjpj-825g",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://contao.org/en/security-advisories/insufficient-bbcode-sanitization",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/contao/contao/commit/55b995d8d35da0d36bc6a22c53fe6423ab0c4ae2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/contao/contao/commit/6d42e667177c972ae7c219645593c262d7764ce2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/contao/contao/security/advisories/GHSA-j55w-hjpj-825g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.454272",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "contao",
    "owner": "contao",
    "created_at": "2018-08-15T07:18:30Z",
    "updated_at": "2025-01-14T13:52:45Z",
    "pushed_at": "2025-01-14T13:52:41Z",
    "size": 116129,
    "stars": 359,
    "forks": 160,
    "open_issues": 403,
    "watchers": 359,
    "has_security_policy": false,
    "default_branch": "5.x",
    "protected_branches": [
      "4.13",
      "5.x",
      "5.3",
      "5.4"
    ],
    "languages": {
      "PHP": 8946738,
      "JavaScript": 155960,
      "Twig": 145579,
      "CSS": 108466
    },
    "commit_activity": {
      "total_commits_last_year": 980,
      "avg_commits_per_week": 18.846153846153847,
      "days_active_last_year": 166
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T14:07:29.729206"
  }
}