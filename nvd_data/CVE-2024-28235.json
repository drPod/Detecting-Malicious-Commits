{
  "cve_id": "CVE-2024-28235",
  "github_data": {
    "repository": "contao/contao",
    "fix_commit": "73a2770e2d3535ec9f1b03d54be00e56ebb8ff16",
    "related_commits": [
      "73a2770e2d3535ec9f1b03d54be00e56ebb8ff16",
      "79b7620d01ce8f46ce2b331455e0d95e5208de3d",
      "73a2770e2d3535ec9f1b03d54be00e56ebb8ff16",
      "79b7620d01ce8f46ce2b331455e0d95e5208de3d"
    ],
    "patch_url": "https://github.com/contao/contao/commit/73a2770e2d3535ec9f1b03d54be00e56ebb8ff16.patch",
    "fix_commit_details": {
      "sha": "73a2770e2d3535ec9f1b03d54be00e56ebb8ff16",
      "commit_date": "2024-04-09T05:19:52Z",
      "author": {
        "login": "Toflar",
        "type": "User",
        "stats": {
          "total_commits": 758,
          "average_weekly_commits": 0.8824214202561118,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 247
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9jh5-qf84-x6pr",
        "length": 208,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 196,
        "additions": 174,
        "deletions": 22
      },
      "files": [
        {
          "filename": "core-bundle/src/Crawl/Escargot/Factory.php",
          "status": "modified",
          "additions": 81,
          "deletions": 11,
          "patch": "@@ -17,7 +17,10 @@\n use Contao\\PageModel;\n use Doctrine\\DBAL\\Connection;\n use Nyholm\\Psr7\\Uri;\n+use Psr\\Http\\Message\\UriInterface;\n use Symfony\\Component\\HttpClient\\HttpClient;\n+use Symfony\\Component\\HttpClient\\ScopingHttpClient;\n+use Symfony\\Component\\HttpFoundation\\RequestStack;\n use Symfony\\Component\\Uid\\Uuid;\n use Symfony\\Contracts\\HttpClient\\HttpClientInterface;\n use Terminal42\\Escargot\\BaseUriCollection;\n@@ -36,6 +39,7 @@ class Factory\n \n     private Connection $connection;\n     private ContaoFramework $framework;\n+    private RequestStack $requestStack;\n     private array $defaultHttpClientOptions;\n \n     /**\n@@ -48,12 +52,19 @@ class Factory\n      */\n     private array $subscribers = [];\n \n-    public function __construct(Connection $connection, ContaoFramework $framework, array $additionalUris = [], array $defaultHttpClientOptions = [])\n+    /**\n+     * @var \\Closure(array<string, mixed>): HttpClientInterface|null\n+     */\n+    private ?\\Closure $httpClientFactory;\n+\n+    public function __construct(Connection $connection, ContaoFramework $framework, RequestStack $requestStack, array $additionalUris = [], array $defaultHttpClientOptions = [], \\Closure $httpClientFactory = null)\n     {\n         $this->connection = $connection;\n         $this->framework = $framework;\n+        $this->requestStack = $requestStack;\n         $this->additionalUris = $additionalUris;\n         $this->defaultHttpClientOptions = $defaultHttpClientOptions;\n+        $this->httpClientFactory = $httpClientFactory ?? static fn (array $defaultOptions) => HttpClient::create($defaultOptions);\n     }\n \n     public function addSubscriber(EscargotSubscriberInterface $subscriber): self\n@@ -163,18 +174,77 @@ public function createFromJobId(string $jobId, QueueInterface $queue, array $sel\n \n     private function createHttpClient(array $options = []): HttpClientInterface\n     {\n-        return HttpClient::create(\n-            array_merge_recursive(\n-                [\n-                    'headers' => [\n-                        'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n-                        'user-agent' => self::USER_AGENT,\n-                    ],\n-                    'max_duration' => 10, // Ignore requests that take longer than 10 seconds\n+        $options = array_merge_recursive(\n+            [\n+                'headers' => [\n+                    'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n+                    'user-agent' => self::USER_AGENT,\n                 ],\n-                array_merge_recursive($this->getDefaultHttpClientOptions(), $options)\n-            )\n+                'max_duration' => 10, // Ignore requests that take longer than 10 seconds\n+            ],\n+            array_merge_recursive($this->getDefaultHttpClientOptions(), $options)\n         );\n+\n+        // Make sure confidential headers force a scoped client so external domains do not leak data\n+        $cleanOptions = $this->cleanOptionsFromConfidentialData($options);\n+\n+        if ($options === $cleanOptions) {\n+            return ($this->httpClientFactory)($options);\n+        }\n+\n+        $scopedOptionsByRegex = [];\n+\n+        // All options including the confidential headers for our root page collection\n+        foreach ($this->getRootPageUriCollection()->all() as $rootPageUri) {\n+            $scopedOptionsByRegex[preg_quote($this->getOriginFromUri($rootPageUri))] = $options;\n+        }\n+\n+        // Closing the session is necessary here as otherwise we might run into our own session lock\n+        $request = $this->requestStack->getMainRequest();\n+\n+        if ($request && $request->hasSession()) {\n+            $request->getSession()->save();\n+        }\n+\n+        return new ScopingHttpClient(($this->httpClientFactory)($cleanOptions), $scopedOptionsByRegex);\n+    }\n+\n+    private function getOriginFromUri(UriInterface $uri): string\n+    {\n+        $origin = $uri->getScheme().'://'.$uri->getHost();\n+\n+        if ($uri->getPort()) {\n+            $origin .= ':'.$uri->getPort();\n+        }\n+\n+        return $origin.'/';\n+    }\n+\n+    private function cleanOptionsFromConfidentialData(array $options): array\n+    {\n+        $cleanOptions = [];\n+\n+        foreach ($options as $k => $v) {\n+            if ('headers' === $k) {\n+                foreach ($v as $header => $value) {\n+                    if (\\in_array(strtolower($header), ['authorization', 'cookie'], true)) {\n+                        continue;\n+                    }\n+\n+                    $cleanOptions['headers'][$header] = $value;\n+                }\n+\n+                continue;\n+            }\n+\n+            if ('basic_auth' === $k || 'bearer_auth' === $k) {\n+                continue;\n+            }\n+\n+            $cleanOptions[$k] = $v;\n+        }\n+\n+        return $cleanOptions;\n     }\n \n     private function registerDefaultSubscribers(Escargot $escargot): void"
        },
        {
          "filename": "core-bundle/src/DependencyInjection/ContaoCoreExtension.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -277,8 +277,8 @@ private function handleCrawlConfig(array $config, ContainerBuilder $container):\n         }\n \n         $factory = $container->getDefinition('contao.crawl.escargot.factory');\n-        $factory->setArgument(2, $config['crawl']['additional_uris']);\n-        $factory->setArgument(3, $config['crawl']['default_http_client_options']);\n+        $factory->setArgument(3, $config['crawl']['additional_uris']);\n+        $factory->setArgument(4, $config['crawl']['default_http_client_options']);\n     }\n \n     /**"
        },
        {
          "filename": "core-bundle/src/Resources/config/services.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -82,6 +82,7 @@ services:\n         arguments:\n             - '@database_connection'\n             - '@contao.framework'\n+            - '@request_stack'\n \n     contao.crawl.escargot.search_index_subscriber:\n         class: Contao\\CoreBundle\\Crawl\\Escargot\\Subscriber\\SearchIndexSubscriber"
        },
        {
          "filename": "core-bundle/src/Resources/contao/classes/Crawl.php",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -125,12 +125,9 @@ public function run()\n \t\t\t}\n \t\t\telse\n \t\t\t{\n+\t\t\t\t// TODO: we need a way to authenticate with a token instead of our own cookie\n \t\t\t\t$session = System::getContainer()->get('session');\n \t\t\t\t$clientOptions = array('headers' => array('Cookie' => sprintf('%s=%s', $session->getName(), $session->getId())));\n-\n-\t\t\t\t// Closing the session is necessary here as otherwise we run into our own session lock\n-\t\t\t\t// TODO: we need a way to authenticate with a token instead of our own cookie\n-\t\t\t\t$session->save();\n \t\t\t}\n \t\t}\n \t\telse"
        },
        {
          "filename": "core-bundle/tests/Crawl/Escargot/FactoryTest.php",
          "status": "modified",
          "additions": 87,
          "deletions": 3,
          "patch": "@@ -18,6 +18,10 @@\n use Contao\\PageModel;\n use Doctrine\\DBAL\\Connection;\n use Nyholm\\Psr7\\Uri;\n+use Symfony\\Component\\HttpClient\\MockHttpClient;\n+use Symfony\\Component\\HttpClient\\Response\\MockResponse;\n+use Symfony\\Component\\HttpClient\\ScopingHttpClient;\n+use Symfony\\Component\\HttpFoundation\\RequestStack;\n use Terminal42\\Escargot\\BaseUriCollection;\n use Terminal42\\Escargot\\Queue\\InMemoryQueue;\n \n@@ -37,7 +41,7 @@ public function testHandlesSubscribersCorrectly(): void\n             ->willReturn('subscriber-2')\n         ;\n \n-        $factory = new Factory($this->createMock(Connection::class), $this->mockContaoFramework());\n+        $factory = new Factory($this->createMock(Connection::class), $this->mockContaoFramework(), new RequestStack());\n         $factory->addSubscriber($subscriber1);\n         $factory->addSubscriber($subscriber2);\n \n@@ -65,6 +69,7 @@ public function testBuildsUriCollectionsCorrectly(): void\n         $factory = new Factory(\n             $this->createMock(Connection::class),\n             $this->mockContaoFramework([PageModel::class => $pageModelAdapter]),\n+            new RequestStack(),\n             ['https://example.com']\n         );\n \n@@ -87,7 +92,7 @@ public function testCreatesEscargotCorrectlyWithNewJobId(): void\n             ->willReturn('subscriber-1')\n         ;\n \n-        $factory = new Factory($this->createMock(Connection::class), $this->mockContaoFramework());\n+        $factory = new Factory($this->createMock(Connection::class), $this->mockContaoFramework(), new RequestStack());\n         $factory->addSubscriber($subscriber1);\n \n         $uriCollection = new BaseUriCollection([new Uri('https://contao.org')]);\n@@ -110,7 +115,7 @@ public function testCreatesEscargotCorrectlyWithExistingJobId(): void\n             ->willReturn('subscriber-1')\n         ;\n \n-        $factory = new Factory($this->createMock(Connection::class), $this->mockContaoFramework());\n+        $factory = new Factory($this->createMock(Connection::class), $this->mockContaoFramework(), new RequestStack());\n         $factory->addSubscriber($subscriber1);\n \n         $queue = new InMemoryQueue();\n@@ -126,4 +131,83 @@ public function testCreatesEscargotCorrectlyWithExistingJobId(): void\n         $escargot = $factory->createFromJobId($jobId, $queue, ['subscriber-8']);\n         $this->assertSame(Factory::USER_AGENT, $escargot->getUserAgent());\n     }\n+\n+    public function testScopesConfidentialHeadersAutomatically(): void\n+    {\n+        $expectedRequests = [\n+            function (string $method, string $url, array $options): MockResponse {\n+                $this->assertSame('GET', $method);\n+                $this->assertSame('https://contao.org/robots.txt', $url);\n+                $this->assertContains('Cookie: Confidential', $options['headers']);\n+                $this->assertContains('Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=', $options['headers']);\n+\n+                return new MockResponse();\n+            },\n+            function (string $method, string $url, array $options): MockResponse {\n+                $this->assertSame('GET', $method);\n+                $this->assertSame('https://contao.de/robots.txt', $url);\n+                $this->assertContains('Cookie: Confidential', $options['headers']);\n+                $this->assertContains('Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=', $options['headers']);\n+\n+                return new MockResponse();\n+            },\n+            function (string $method, string $url, array $options): MockResponse {\n+                $this->assertSame('GET', $method);\n+                $this->assertSame('https://www.foreign-domain.com/robots.txt', $url);\n+                $this->assertNotContains('Cookie: Confidential', $options['headers']);\n+                $this->assertNotContains('Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=', $options['headers']);\n+\n+                return new MockResponse();\n+            },\n+        ];\n+\n+        $mockClient = new MockHttpClient($expectedRequests);\n+        $clientFactory = static fn (array $defaultOptions) => $mockClient;\n+\n+        $rootPage1 = $this->createMock(PageModel::class);\n+        $rootPage1\n+            ->method('getAbsoluteUrl')\n+            ->willReturn('https://contao.org')\n+        ;\n+\n+        $rootPage2 = $this->createMock(PageModel::class);\n+        $rootPage2\n+            ->method('getAbsoluteUrl')\n+            ->willReturn('https://contao.de')\n+        ;\n+\n+        $pageModelAdapter = $this->mockAdapter(['findPublishedRootPages']);\n+        $pageModelAdapter\n+            ->method('findPublishedRootPages')\n+            ->willReturn([$rootPage1, $rootPage2])\n+        ;\n+\n+        $subscriber1 = $this->createMock(EscargotSubscriberInterface::class);\n+        $subscriber1\n+            ->method('getName')\n+            ->willReturn('subscriber-1')\n+        ;\n+\n+        $factory = new Factory(\n+            $this->createMock(Connection::class),\n+            $this->mockContaoFramework([PageModel::class => $pageModelAdapter]),\n+            new RequestStack(),\n+            ['https://www.foreign-domain.com'],\n+            [\n+                'headers' => [\n+                    'Cookie' => 'Confidential',\n+                ],\n+                'auth_basic' => 'username:password',\n+            ],\n+            $clientFactory\n+        );\n+\n+        $factory->addSubscriber($subscriber1);\n+\n+        $escargot = $factory->create($factory->getCrawlUriCollection(), new InMemoryQueue(), ['subscriber-1']);\n+        $escargot->crawl();\n+\n+        $this->assertSame(3, $mockClient->getRequestsCount());\n+        $this->assertInstanceOf(ScopingHttpClient::class, $escargot->getClient());\n+    }\n }"
        },
        {
          "filename": "core-bundle/tests/DependencyInjection/ContaoCoreExtensionTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -338,8 +338,8 @@ public function testSetsTheCrawlOptionsOnTheEscargotFactory(): void\n \n         $definition = $container->getDefinition('contao.crawl.escargot.factory');\n \n-        $this->assertSame(['https://example.com'], $definition->getArgument(2));\n-        $this->assertSame(['proxy' => 'http://localhost:7080', 'headers' => ['Foo' => 'Bar']], $definition->getArgument(3));\n+        $this->assertSame(['https://example.com'], $definition->getArgument(3));\n+        $this->assertSame(['proxy' => 'http://localhost:7080', 'headers' => ['Foo' => 'Bar']], $definition->getArgument(4));\n     }\n \n     public function testConfiguresTheBackupManagerCorrectly(): void"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "284cdb3ccf0015b21b0c07dbead4c64468963a2e",
            "date": "2025-01-14T13:52:41Z",
            "author_login": "aschempp"
          },
          {
            "sha": "d06313107886cb350569085d99fbbccd072b10a2",
            "date": "2025-01-14T10:22:33Z",
            "author_login": "m-vo"
          },
          {
            "sha": "34a614bfe094760cdfd8ecdc2257a17e5f4212e7",
            "date": "2025-01-14T10:18:46Z",
            "author_login": "ausi"
          },
          {
            "sha": "b43e1edd5e2cbd61f27facf55bae6b65129a2c32",
            "date": "2025-01-14T09:47:21Z",
            "author_login": "zoglo"
          },
          {
            "sha": "6a5bc6206999ba993b8ee3eb4f8402a8f6aaf361",
            "date": "2025-01-14T09:00:55Z",
            "author_login": "leofeyer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-200",
    "description": "Contao is an open source content management system. Starting in version 4.9.0 and prior to versions 4.13.40 and 5.3.4, when checking for broken links on protected pages, Contao sends the cookie header to external urls as well, the passed  options for the http client are used for all requests. Contao versions 4.13.40 and 5.3.4 have a patch for this issue. As a workaround, disable crawling protected pages.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-04-09T16:15:07.863",
    "last_modified": "2024-11-21T09:06:03.783",
    "fix_date": "2024-04-09T05:19:52Z"
  },
  "references": [
    {
      "url": "https://contao.org/en/security-advisories/session-cookie-disclosure-in-the-crawler",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/blob/14e9ef4bc8b82936ba2d0e04164581145a075e2a/core-bundle/src/Resources/contao/classes/Crawl.php#L129",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/commit/73a2770e2d3535ec9f1b03d54be00e56ebb8ff16",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/commit/79b7620d01ce8f46ce2b331455e0d95e5208de3d",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/security/advisories/GHSA-9jh5-qf84-x6pr",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://contao.org/en/security-advisories/session-cookie-disclosure-in-the-crawler",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/blob/14e9ef4bc8b82936ba2d0e04164581145a075e2a/core-bundle/src/Resources/contao/classes/Crawl.php#L129",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/commit/73a2770e2d3535ec9f1b03d54be00e56ebb8ff16",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/commit/79b7620d01ce8f46ce2b331455e0d95e5208de3d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/contao/contao/security/advisories/GHSA-9jh5-qf84-x6pr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.454520",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "contao",
    "owner": "contao",
    "created_at": "2018-08-15T07:18:30Z",
    "updated_at": "2025-01-14T13:52:45Z",
    "pushed_at": "2025-01-14T13:52:41Z",
    "size": 116129,
    "stars": 359,
    "forks": 160,
    "open_issues": 403,
    "watchers": 359,
    "has_security_policy": false,
    "default_branch": "5.x",
    "protected_branches": [
      "4.13",
      "5.x",
      "5.3",
      "5.4"
    ],
    "languages": {
      "PHP": 8946738,
      "JavaScript": 155960,
      "Twig": 145579,
      "CSS": 108466
    },
    "commit_activity": {
      "total_commits_last_year": 980,
      "avg_commits_per_week": 18.846153846153847,
      "days_active_last_year": 166
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T14:07:29.729206"
  }
}