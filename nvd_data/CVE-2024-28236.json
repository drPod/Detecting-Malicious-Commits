{
  "cve_id": "CVE-2024-28236",
  "github_data": {
    "repository": "go-vela/worker",
    "fix_commit": "e1572743b008e4fbce31ebb1dcd23bf6a1a30297",
    "related_commits": [
      "e1572743b008e4fbce31ebb1dcd23bf6a1a30297",
      "e1572743b008e4fbce31ebb1dcd23bf6a1a30297"
    ],
    "patch_url": "https://github.com/go-vela/worker/commit/e1572743b008e4fbce31ebb1dcd23bf6a1a30297.patch",
    "fix_commit_details": {
      "sha": "e1572743b008e4fbce31ebb1dcd23bf6a1a30297",
      "commit_date": "2024-03-12T18:53:33Z",
      "author": {
        "login": "ecrupper",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-pwx5-6wxg-px5h",
        "length": 146,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 80,
        "additions": 61,
        "deletions": 19
      },
      "files": [
        {
          "filename": "executor/linux/build.go",
          "status": "modified",
          "additions": 20,
          "deletions": 4,
          "patch": "@@ -199,8 +199,12 @@ func (c *client) PlanBuild(ctx context.Context) error {\n \n \t\t_log.AppendData(append(sRaw, \"\\n\"...))\n \n-\t\t// add secret to the map\n-\t\tc.Secrets[secret.Name] = s\n+\t\t// add secret to the appropriate map\n+\t\tif s.GetAllowSubstitution() {\n+\t\t\tc.Secrets[secret.Name] = s\n+\t\t} else {\n+\t\t\tc.NoSubSecrets[secret.Name] = s\n+\t\t}\n \t}\n \n \t// escape newlines in secrets loaded on build_start\n@@ -699,6 +703,7 @@ func loadLazySecrets(c *client, _step *pipeline.Container) error {\n \t_log := new(library.Log)\n \n \tlazySecrets := make(map[string]*library.Secret)\n+\tlazyNoSubSecrets := make(map[string]*library.Secret)\n \n \t// this requires a small preface and brief description on\n \t// how normal secrets make it into a container:\n@@ -797,8 +802,12 @@ func loadLazySecrets(c *client, _step *pipeline.Container) error {\n \t\t\t\treturn err\n \t\t\t}\n \n-\t\t\t// add secret to the temp map\n-\t\t\tlazySecrets[secret.Name] = s\n+\t\t\t// add secret to the appropriate temp map\n+\t\t\tif s.GetAllowSubstitution() {\n+\t\t\t\tlazySecrets[secret.Name] = s\n+\t\t\t} else {\n+\t\t\t\tlazyNoSubSecrets[secret.Name] = s\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -836,6 +845,13 @@ func loadLazySecrets(c *client, _step *pipeline.Container) error {\n \t\t\treturn err\n \t\t}\n \n+\t\tc.Logger.Debug(\"injecting no-sub lazy loaded secrets\")\n+\t\t// inject secrets for container\n+\t\terr = injectSecrets(tmpStep, lazyNoSubSecrets)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n \t\tc.Logger.Debug(\"merge lazy loaded secrets into container\")\n \t\t// merge lazy load secrets into original container\n \t\terr = _step.MergeEnv(tmpStep.Environment)"
        },
        {
          "filename": "executor/linux/linux.go",
          "status": "modified",
          "additions": 11,
          "deletions": 6,
          "patch": "@@ -19,12 +19,13 @@ type (\n \t// client manages communication with the pipeline resources.\n \tclient struct {\n \t\t// https://pkg.go.dev/github.com/sirupsen/logrus#Entry\n-\t\tLogger   *logrus.Entry\n-\t\tVela     *vela.Client\n-\t\tRuntime  runtime.Engine\n-\t\tSecrets  map[string]*library.Secret\n-\t\tHostname string\n-\t\tVersion  string\n+\t\tLogger       *logrus.Entry\n+\t\tVela         *vela.Client\n+\t\tRuntime      runtime.Engine\n+\t\tSecrets      map[string]*library.Secret\n+\t\tNoSubSecrets map[string]*library.Secret\n+\t\tHostname     string\n+\t\tVersion      string\n \n \t\t// clients for build actions\n \t\tsecret *secretSvc\n@@ -67,6 +68,7 @@ func Equal(a, b *client) bool {\n \t\treflect.DeepEqual(a.Vela, b.Vela) &&\n \t\treflect.DeepEqual(a.Runtime, b.Runtime) &&\n \t\treflect.DeepEqual(a.Secrets, b.Secrets) &&\n+\t\treflect.DeepEqual(a.NoSubSecrets, b.NoSubSecrets) &&\n \t\ta.Hostname == b.Hostname &&\n \t\ta.Version == b.Version &&\n \t\treflect.DeepEqual(a.init, b.init) &&\n@@ -118,6 +120,9 @@ func New(opts ...Opt) (*client, error) {\n \t// instantiate map for non-plugin secrets\n \tc.Secrets = make(map[string]*library.Secret)\n \n+\t// instantiate map for non-substituted secrets\n+\tc.NoSubSecrets = make(map[string]*library.Secret)\n+\n \t// instantiate all client services\n \tc.secret = &secretSvc{client: c}\n "
        },
        {
          "filename": "executor/linux/secret.go",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -67,6 +67,13 @@ func (s *secretSvc) create(ctx context.Context, ctn *pipeline.Container) error {\n \t\treturn fmt.Errorf(\"unable to substitute container configuration\")\n \t}\n \n+\tlogger.Debug(\"injecting non-substituted secrets\")\n+\t// inject no-substitution secrets for container\n+\terr = injectSecrets(ctn, s.client.NoSubSecrets)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \treturn nil\n }\n "
        },
        {
          "filename": "executor/linux/service.go",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -55,6 +55,13 @@ func (c *client) CreateService(ctx context.Context, ctn *pipeline.Container) err\n \t\treturn fmt.Errorf(\"unable to substitute container configuration\")\n \t}\n \n+\tlogger.Debug(\"injecting non-substituted secrets\")\n+\t// inject no-substitution secrets for container\n+\terr = injectSecrets(ctn, c.NoSubSecrets)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \treturn nil\n }\n "
        },
        {
          "filename": "executor/linux/step.go",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -65,6 +65,13 @@ func (c *client) CreateStep(ctx context.Context, ctn *pipeline.Container) error\n \t\treturn fmt.Errorf(\"unable to substitute container configuration\")\n \t}\n \n+\tlogger.Debug(\"injecting non-substituted secrets\")\n+\t// inject no-substitution secrets for container\n+\terr = injectSecrets(ctn, c.NoSubSecrets)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n \treturn nil\n }\n "
        },
        {
          "filename": "go.mod",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -8,9 +8,9 @@ require (\n \tgithub.com/docker/docker v24.0.9+incompatible\n \tgithub.com/docker/go-units v0.5.0\n \tgithub.com/gin-gonic/gin v1.9.1\n-\tgithub.com/go-vela/sdk-go v0.23.1\n-\tgithub.com/go-vela/server v0.23.1\n-\tgithub.com/go-vela/types v0.23.1\n+\tgithub.com/go-vela/sdk-go v0.23.2-0.20240312184917-e3a34719badf\n+\tgithub.com/go-vela/server v0.23.2-0.20240312184244-a645c822da1d\n+\tgithub.com/go-vela/types v0.23.2-0.20240312183632-2e046fceb8fe\n \tgithub.com/golang-jwt/jwt/v5 v5.2.0\n \tgithub.com/google/go-cmp v0.6.0\n \tgithub.com/joho/godotenv v1.5.1"
        },
        {
          "filename": "go.sum",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -94,12 +94,12 @@ github.com/go-playground/validator/v10 v10.14.0 h1:vgvQWe3XCz3gIeFDm/HnTIbj6UGmg\n github.com/go-playground/validator/v10 v10.14.0/go.mod h1:9iXMNT7sEkjXb0I+enO7QXmzG6QCsPWY4zveKFVRSyU=\n github.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 h1:tfuBGBXKqDEevZMzYi5KSi8KkcZtzBcTgAUUtapy0OI=\n github.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572/go.mod h1:9Pwr4B2jHnOSGXyyzV8ROjYa2ojvAY6HCGYYfMoC3Ls=\n-github.com/go-vela/sdk-go v0.23.1 h1:4KxfAF1vR8DvtRraBoWQDIm8f8zxXP806lJR3MmTlC8=\n-github.com/go-vela/sdk-go v0.23.1/go.mod h1:zDsZIePtBdpCZwmwAWqGWuIch/oGliX1zd51PARTHBk=\n-github.com/go-vela/server v0.23.1 h1:Y+mGfB79RjIgQ3IEkPjGB6IneB2So3ZXE4XKY+Z02xc=\n-github.com/go-vela/server v0.23.1/go.mod h1:B+A5lRPOlAVYyXBMGCAJKhPQOlfJuWl3qaRcvhsUqSA=\n-github.com/go-vela/types v0.23.1 h1:st4BeDcYVyaaFqblU1YroztNvmYLBgmfZpWq0En0Sg0=\n-github.com/go-vela/types v0.23.1/go.mod h1:AAqgxIw1aRBgPkE/5juGuiwh/JZuOtL8fcPaEkjFWwQ=\n+github.com/go-vela/sdk-go v0.23.2-0.20240312184917-e3a34719badf h1:8Oka4tMHOdy/DsInyg7c/XPY5wqWWE7Yvzx/u67WBuw=\n+github.com/go-vela/sdk-go v0.23.2-0.20240312184917-e3a34719badf/go.mod h1:XjrVfIDw2SZDFBtJ5vqVse/GFj89MF542N20P8U5a3I=\n+github.com/go-vela/server v0.23.2-0.20240312184244-a645c822da1d h1:VynpkAIMt3KTh9BaICQdpu6c76/hHU3d4/Ab44bmFew=\n+github.com/go-vela/server v0.23.2-0.20240312184244-a645c822da1d/go.mod h1:EsDVTqQHQ9snXG2DhUl9uo4+Cf/b9nMiESCkxSjmP90=\n+github.com/go-vela/types v0.23.2-0.20240312183632-2e046fceb8fe h1:Fb28yre0nrX1GNeyPN8i8rruTlW8MnPVF3Fo5xTuOkg=\n+github.com/go-vela/types v0.23.2-0.20240312183632-2e046fceb8fe/go.mod h1:AAqgxIw1aRBgPkE/5juGuiwh/JZuOtL8fcPaEkjFWwQ=\n github.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=\n github.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\n github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q="
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ea7c98476c572f048117f0d31062326b83f2382a",
            "date": "2025-01-10T19:57:18Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "53d1a304671aca5c8d548c0758cccb7aaa45e8dc",
            "date": "2025-01-10T19:53:05Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "878dde4a96701683d7946a3fb6382bc5c210ac73",
            "date": "2025-01-10T19:45:51Z",
            "author_login": "wass3rw3rk"
          },
          {
            "sha": "3f3b424037fdf38829dd0c2eacbb981bee2507f2",
            "date": "2024-11-11T14:43:31Z",
            "author_login": "ecrupper"
          },
          {
            "sha": "402d3d096cbc61969865971c3b242a48d840a7e7",
            "date": "2024-11-01T17:34:26Z",
            "author_login": "ecrupper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Vela is a Pipeline Automation (CI/CD) framework built on Linux container technology written in Golang. Vela pipelines can use variable substitution combined with insensitive fields like `parameters`, `image` and `entrypoint` to inject secrets into a plugin/image and \u2014 by using common substitution string manipulation \u2014 can bypass log masking and expose secrets without the use of the commands block. This unexpected behavior primarily impacts secrets restricted by the \"no commands\" option. This can lead to unintended use of the secret value, and increased risk of exposing the secret during image execution bypassing log masking. **To exploit this** the pipeline author must be supplying the secrets to a plugin that is designed in such a way that will print those parameters in logs. Plugin parameters are not designed for sensitive values and are often intentionally printed throughout execution for informational/debugging purposes. Parameters should therefore be treated as insensitive. While Vela provides secrets masking, secrets exposure is not entirely solved by the masking process. A docker image (plugin) can easily expose secrets if they are not handled properly, or altered in some way. There is a responsibility on the end-user to understand how values injected into a plugin are used. This is a risk that exists for many CICD systems (like GitHub Actions) that handle sensitive runtime variables. Rather, the greater risk is that users who restrict a secret to the \"no commands\" option and use image restriction can still have their secret value exposed via substitution tinkering, which turns the image and command restrictions into a false sense of security. This issue has been addressed in version 0.23.2. Users are advised to upgrade. Users unable to upgrade should not provide sensitive values to plugins that can potentially expose them, especially in `parameters` that are not intended to be used for sensitive values, ensure plugins (especially those that utilize shared secrets) follow best practices to avoid logging parameters that are expected to be sensitive, minimize secrets with `pull_request` events enabled, as this allows users to change pipeline configurations and pull in secrets to steps not typically part of the CI process, make use of the build approval setting, restricting builds from untrusted users, and limit use of shared secrets, as they are less restrictive to access by nature.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-12T21:15:59.027",
    "last_modified": "2024-11-21T09:06:03.913",
    "fix_date": "2024-03-12T18:53:33Z"
  },
  "references": [
    {
      "url": "https://github.com/go-vela/worker/commit/e1572743b008e4fbce31ebb1dcd23bf6a1a30297",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/go-vela/worker/security/advisories/GHSA-pwx5-6wxg-px5h",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/go-vela/worker/commit/e1572743b008e4fbce31ebb1dcd23bf6a1a30297",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/go-vela/worker/security/advisories/GHSA-pwx5-6wxg-px5h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.485605",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "worker",
    "owner": "go-vela",
    "created_at": "2019-11-04T14:17:13Z",
    "updated_at": "2025-01-10T19:57:22Z",
    "pushed_at": "2025-01-14T14:41:24Z",
    "size": 2271,
    "stars": 33,
    "forks": 9,
    "open_issues": 4,
    "watchers": 33,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 888772,
      "Makefile": 12050,
      "Dockerfile": 384
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:18:43.487447"
  }
}