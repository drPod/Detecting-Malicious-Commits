{
  "cve_id": "CVE-2024-28242",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "b425fbc2a28341a5627928f963519006712c3d39",
    "related_commits": [
      "b425fbc2a28341a5627928f963519006712c3d39",
      "b425fbc2a28341a5627928f963519006712c3d39"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "b425fbc2a28341a5627928f963519006712c3d39",
      "commit_date": "2024-03-11T17:25:31Z",
      "author": {
        "login": "nbianca",
        "type": "User",
        "stats": {
          "total_commits": 819,
          "average_weekly_commits": 1.1784172661870504,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 255
        }
      },
      "commit_message": {
        "title": "SECURITY: Generate more category CSS on client",
        "length": 269,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 399,
        "additions": 190,
        "deletions": 209
      },
      "files": [
        {
          "filename": "app/assets/javascripts/discourse/app/instance-initializers/category-background-css-generator.js",
          "status": "added",
          "additions": 55,
          "deletions": 0,
          "patch": "@@ -0,0 +1,55 @@\n+import { getURLWithCDN } from \"discourse-common/lib/get-url\";\n+\n+export default {\n+  after: \"register-hashtag-types\",\n+\n+  initialize(owner) {\n+    this.session = owner.lookup(\"service:session\");\n+    this.site = owner.lookup(\"service:site\");\n+\n+    if (!this.site.categories?.length) {\n+      return;\n+    }\n+\n+    const css = [];\n+    const darkCss = [];\n+\n+    this.site.categories.forEach((category) => {\n+      const lightUrl = category.uploaded_background?.url;\n+      const darkUrl =\n+        this.session.defaultColorSchemeIsDark || this.session.darkModeAvailable\n+          ? category.uploaded_background_dark?.url\n+          : null;\n+      const defaultUrl =\n+        darkUrl && this.session.defaultColorSchemeIsDark ? darkUrl : lightUrl;\n+\n+      if (defaultUrl) {\n+        const url = getURLWithCDN(defaultUrl);\n+        css.push(\n+          `body.category-${category.fullSlug} { background-image: url(${url}); }`\n+        );\n+      }\n+\n+      if (darkUrl && defaultUrl !== darkUrl) {\n+        const url = getURLWithCDN(darkUrl);\n+        darkCss.push(\n+          `body.category-${category.fullSlug} { background-image: url(${url}); }`\n+        );\n+      }\n+    });\n+\n+    if (darkCss.length > 0) {\n+      css.push(\"@media (prefers-color-scheme: dark) {\", ...darkCss, \"}\");\n+    }\n+\n+    const cssTag = document.createElement(\"style\");\n+    cssTag.type = \"text/css\";\n+    cssTag.id = \"category-background-css-generator\";\n+    cssTag.innerHTML = css.join(\"\\n\");\n+    document.head.appendChild(cssTag);\n+  },\n+\n+  teardown() {\n+    document.querySelector(\"#category-background-css-generator\")?.remove();\n+  },\n+};"
        },
        {
          "filename": "app/assets/javascripts/discourse/tests/acceptance/category-background-css-generator-test.js",
          "status": "added",
          "additions": 132,
          "deletions": 0,
          "patch": "@@ -0,0 +1,132 @@\n+import { visit } from \"@ember/test-helpers\";\n+import { test } from \"qunit\";\n+import Session from \"discourse/models/session\";\n+import { acceptance } from \"discourse/tests/helpers/qunit-helpers\";\n+\n+const SITE_DATA = {\n+  categories: [\n+    {\n+      id: 1,\n+      color: \"ff0000\",\n+      text_color: \"ffffff\",\n+      name: \"category1\",\n+      slug: \"foo\",\n+      uploaded_background: {\n+        id: 54,\n+        url: \"/uploads/default/original/1X/c5c84b16ebf745ab848d1498267c541facbf1ff0.png\",\n+        width: 1024,\n+        height: 768,\n+      },\n+    },\n+    {\n+      id: 2,\n+      color: \"333\",\n+      text_color: \"ffffff\",\n+      name: \"category2\",\n+      slug: \"bar\",\n+      uploaded_background_dark: {\n+        id: 25,\n+        url: \"/uploads/default/original/1X/f9fdb0ad108f2aed178c40f351bbb2c7cb2571e3.png\",\n+        width: 1024,\n+        height: 768,\n+      },\n+    },\n+    {\n+      id: 4,\n+      color: \"2B81AF\",\n+      text_color: \"ffffff\",\n+      parent_category_id: 1,\n+      name: \"category3\",\n+      slug: \"baz\",\n+      uploaded_background: {\n+        id: 11,\n+        url: \"/uploads/default/original/1X/684c104edc18a7e9cef1fa31f41215f3eec5d92b.png\",\n+        width: 1024,\n+        height: 768,\n+      },\n+      uploaded_background_dark: {\n+        id: 19,\n+        url: \"/uploads/default/original/1X/89b1a2641e91604c32b21db496be11dba7a253e6.png\",\n+        width: 1024,\n+        height: 768,\n+      },\n+    },\n+  ],\n+};\n+\n+acceptance(\"Category Background CSS Generator\", function (needs) {\n+  needs.user();\n+  needs.site(SITE_DATA);\n+\n+  test(\"CSS classes are generated\", async function (assert) {\n+    await visit(\"/\");\n+\n+    assert.equal(\n+      document.querySelector(\"#category-background-css-generator\").innerHTML,\n+      \"body.category-foo { background-image: url(/uploads/default/original/1X/c5c84b16ebf745ab848d1498267c541facbf1ff0.png); }\\n\" +\n+        \"body.category-foo-baz { background-image: url(/uploads/default/original/1X/684c104edc18a7e9cef1fa31f41215f3eec5d92b.png); }\"\n+    );\n+  });\n+});\n+\n+acceptance(\"Category Background CSS Generator (dark)\", function (needs) {\n+  needs.user();\n+  needs.site(SITE_DATA);\n+\n+  needs.hooks.beforeEach(function () {\n+    const session = Session.current();\n+    session.set(\"darkModeAvailable\", true);\n+    session.set(\"defaultColorSchemeIsDark\", false);\n+  });\n+\n+  needs.hooks.afterEach(function () {\n+    const session = Session.current();\n+    session.set(\"darkModeAvailable\", null);\n+    session.set(\"defaultColorSchemeIsDark\", null);\n+  });\n+\n+  test(\"CSS classes are generated\", async function (assert) {\n+    await visit(\"/\");\n+\n+    assert.equal(\n+      document.querySelector(\"#category-background-css-generator\").innerHTML,\n+      \"body.category-foo { background-image: url(/uploads/default/original/1X/c5c84b16ebf745ab848d1498267c541facbf1ff0.png); }\\n\" +\n+        \"body.category-foo-baz { background-image: url(/uploads/default/original/1X/684c104edc18a7e9cef1fa31f41215f3eec5d92b.png); }\\n\" +\n+        \"@media (prefers-color-scheme: dark) {\\n\" +\n+        \"body.category-bar { background-image: url(/uploads/default/original/1X/f9fdb0ad108f2aed178c40f351bbb2c7cb2571e3.png); }\\n\" +\n+        \"body.category-foo-baz { background-image: url(/uploads/default/original/1X/89b1a2641e91604c32b21db496be11dba7a253e6.png); }\\n\" +\n+        \"}\"\n+    );\n+  });\n+});\n+\n+acceptance(\n+  \"Category Background CSS Generator (dark is default)\",\n+  function (needs) {\n+    needs.user();\n+    needs.site(SITE_DATA);\n+\n+    needs.hooks.beforeEach(function () {\n+      const session = Session.current();\n+      session.set(\"darkModeAvailable\", true);\n+      session.set(\"defaultColorSchemeIsDark\", true);\n+    });\n+\n+    needs.hooks.afterEach(function () {\n+      const session = Session.current();\n+      session.set(\"darkModeAvailable\", null);\n+      session.set(\"defaultColorSchemeIsDark\", null);\n+    });\n+\n+    test(\"CSS classes are generated\", async function (assert) {\n+      await visit(\"/\");\n+\n+      assert.equal(\n+        document.querySelector(\"#category-background-css-generator\").innerHTML,\n+        \"body.category-foo { background-image: url(/uploads/default/original/1X/c5c84b16ebf745ab848d1498267c541facbf1ff0.png); }\\n\" +\n+          \"body.category-bar { background-image: url(/uploads/default/original/1X/f9fdb0ad108f2aed178c40f351bbb2c7cb2571e3.png); }\\n\" +\n+          \"body.category-foo-baz { background-image: url(/uploads/default/original/1X/89b1a2641e91604c32b21db496be11dba7a253e6.png); }\"\n+      );\n+    });\n+  }\n+);"
        },
        {
          "filename": "lib/stylesheet/compiler.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -34,7 +34,6 @@ def self.compile_asset(asset, options = {})\n         when Stylesheet::Manager::COLOR_SCHEME_STYLESHEET\n           file += importer.import_color_definitions\n           file += importer.import_wcag_overrides\n-          file += importer.category_backgrounds(options[:color_scheme_id])\n           file += importer.font\n         end\n       end"
        },
        {
          "filename": "lib/stylesheet/importer.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 30,
          "patch": "@@ -95,20 +95,6 @@ def wizard_fonts\n       contents\n     end\n \n-    def category_backgrounds(color_scheme_id)\n-      is_dark_color_scheme =\n-        color_scheme_id.present? && ColorScheme.find_by_id(color_scheme_id)&.is_dark?\n-\n-      contents = +\"\"\n-      Category\n-        .where(\"uploaded_background_id IS NOT NULL\")\n-        .each do |c|\n-          contents << category_css(c, is_dark_color_scheme) if c.uploaded_background&.url.present?\n-        end\n-\n-      contents\n-    end\n-\n     def import_color_definitions\n       contents = +\"\"\n       DiscoursePluginRegistry.color_definition_stylesheets.each do |name, path|\n@@ -220,22 +206,6 @@ def theme\n       @theme == :nil ? nil : @theme\n     end\n \n-    def category_css(category, is_dark_color_scheme)\n-      full_slug = category.full_slug.split(\"-\")[0..-2].join(\"-\")\n-\n-      # in case we're using a dark color scheme, we define the background using the dark image\n-      # if one is available. Otherwise, we use the light image by default.\n-      if is_dark_color_scheme && category.uploaded_background_dark&.url.present?\n-        return category_background_css(full_slug, category.uploaded_background_dark.url)\n-      end\n-\n-      category_background_css(full_slug, category.uploaded_background.url)\n-    end\n-\n-    def category_background_css(full_slug, background_url)\n-      \"body.category-#{full_slug} { background-image: url(#{upload_cdn_path(background_url)}) }\"\n-    end\n-\n     def font_css(font)\n       contents = +\"\"\n "
        },
        {
          "filename": "lib/stylesheet/manager.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@ module Stylesheet\n end\n \n class Stylesheet::Manager\n-  BASE_COMPILER_VERSION = 1\n+  BASE_COMPILER_VERSION = 2\n \n   CACHE_PATH = \"tmp/stylesheet-cache\"\n   private_constant :CACHE_PATH"
        },
        {
          "filename": "lib/stylesheet/manager/builder.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 9,
          "patch": "@@ -240,20 +240,13 @@ def default_digest\n   def color_scheme_digest\n     cs = @color_scheme || theme&.color_scheme\n \n-    categories_updated =\n-      Stylesheet::Manager\n-        .cache\n-        .defer_get_set(\"categories_updated\") do\n-          Category.where(\"uploaded_background_id IS NOT NULL\").pluck(:updated_at).map(&:to_i).sum\n-        end\n-\n     fonts = \"#{SiteSetting.base_font}-#{SiteSetting.heading_font}\"\n \n     digest_string = \"#{current_hostname}-\"\n-    if cs || categories_updated > 0\n+    if cs\n       theme_color_defs = resolve_baked_field(:common, :color_definitions)\n       digest_string +=\n-        \"#{RailsMultisite::ConnectionManagement.current_db}-#{cs&.id}-#{cs&.version}-#{theme_color_defs}-#{Stylesheet::Manager.fs_asset_cachebuster}-#{categories_updated}-#{fonts}\"\n+        \"#{RailsMultisite::ConnectionManagement.current_db}-#{cs&.id}-#{cs&.version}-#{theme_color_defs}-#{Stylesheet::Manager.fs_asset_cachebuster}-#{fonts}\"\n     else\n       digest_string += \"defaults-#{Stylesheet::Manager.fs_asset_cachebuster}-#{fonts}\"\n "
        },
        {
          "filename": "spec/lib/stylesheet/importer_spec.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 145,
          "patch": "@@ -7,151 +7,6 @@ def compile_css(name, options = {})\n     Stylesheet::Compiler.compile_asset(name, options)[0]\n   end\n \n-  describe \"#category_backgrounds\" do\n-    it \"uses the correct background image based in the color scheme\" do\n-      background = Fabricate(:upload)\n-      background_dark = Fabricate(:upload)\n-\n-      parent_category = Fabricate(:category)\n-      category =\n-        Fabricate(\n-          :category,\n-          parent_category_id: parent_category.id,\n-          uploaded_background: background,\n-          uploaded_background_dark: background_dark,\n-        )\n-\n-      # light color schemes\n-      [\"Neutral\", \"Shades of Blue\", \"WCAG\", \"Summer\", \"Solarized Light\"].each do |scheme_name|\n-        scheme = ColorScheme.create_from_base(name: \"Light Test\", base_scheme_id: scheme_name)\n-\n-        compiled_css = compile_css(\"color_definitions\", { color_scheme_id: scheme.id })\n-\n-        expect(compiled_css).to include(\n-          \"body.category-#{parent_category.slug}-#{category.slug}{background-image:url(#{background.url})}\",\n-        )\n-        expect(compiled_css).not_to include(background_dark.url)\n-      end\n-\n-      # dark color schemes\n-      [\n-        \"Dark\",\n-        \"Grey Amber\",\n-        \"Latte\",\n-        \"Dark Rose\",\n-        \"WCAG Dark\",\n-        \"Dracula\",\n-        \"Solarized Dark\",\n-      ].each do |scheme_name|\n-        scheme = ColorScheme.create_from_base(name: \"Light Test\", base_scheme_id: scheme_name)\n-\n-        compiled_css = compile_css(\"color_definitions\", { color_scheme_id: scheme.id })\n-\n-        expect(compiled_css).not_to include(background.url)\n-        expect(compiled_css).to include(\n-          \"body.category-#{parent_category.slug}-#{category.slug}{background-image:url(#{background_dark.url})}\",\n-        )\n-      end\n-    end\n-\n-    it \"applies CDN to background category images\" do\n-      expect(compile_css(\"color_definitions\")).to_not include(\"body.category-\")\n-\n-      background = Fabricate(:upload)\n-      background_dark = Fabricate(:upload)\n-\n-      parent_category = Fabricate(:category)\n-      category =\n-        Fabricate(\n-          :category,\n-          parent_category_id: parent_category.id,\n-          uploaded_background: background,\n-          uploaded_background_dark: background_dark,\n-        )\n-\n-      compiled_css = compile_css(\"color_definitions\")\n-      expect(compiled_css).to include(\n-        \"body.category-#{parent_category.slug}-#{category.slug}{background-image:url(#{background.url})}\",\n-      )\n-\n-      GlobalSetting.stubs(:cdn_url).returns(\"//awesome.cdn\")\n-      compiled_css = compile_css(\"color_definitions\")\n-      expect(compiled_css).to include(\n-        \"body.category-#{parent_category.slug}-#{category.slug}{background-image:url(//awesome.cdn#{background.url})}\",\n-      )\n-    end\n-\n-    it \"applies CDN to dark background category images\" do\n-      scheme = ColorScheme.create_from_base(name: \"Dark Test\", base_scheme_id: \"Dark\")\n-      expect(compile_css(\"color_definitions\", { color_scheme_id: scheme.id })).to_not include(\n-        \"body.category-\",\n-      )\n-\n-      background = Fabricate(:upload)\n-      background_dark = Fabricate(:upload)\n-\n-      parent_category = Fabricate(:category)\n-      category =\n-        Fabricate(\n-          :category,\n-          parent_category_id: parent_category.id,\n-          uploaded_background: background,\n-          uploaded_background_dark: background_dark,\n-        )\n-\n-      compiled_css = compile_css(\"color_definitions\", { color_scheme_id: scheme.id })\n-      expect(compiled_css).to include(\n-        \"body.category-#{parent_category.slug}-#{category.slug}{background-image:url(#{background_dark.url})}\",\n-      )\n-\n-      GlobalSetting.stubs(:cdn_url).returns(\"//awesome.cdn\")\n-      compiled_css = compile_css(\"color_definitions\", { color_scheme_id: scheme.id })\n-      expect(compiled_css).to include(\n-        \"body.category-#{parent_category.slug}-#{category.slug}{background-image:url(//awesome.cdn#{background_dark.url})}\",\n-      )\n-    end\n-\n-    it \"applies S3 CDN to background category images\" do\n-      setup_s3\n-      SiteSetting.s3_use_iam_profile = true\n-      SiteSetting.s3_upload_bucket = \"test\"\n-      SiteSetting.s3_region = \"ap-southeast-2\"\n-      SiteSetting.s3_cdn_url = \"https://s3.cdn\"\n-\n-      background = Fabricate(:upload_s3)\n-      category = Fabricate(:category, uploaded_background: background)\n-\n-      compiled_css = compile_css(\"color_definitions\")\n-      expect(compiled_css).to include(\n-        \"body.category-#{category.slug}{background-image:url(https://s3.cdn/original\",\n-      )\n-    end\n-\n-    it \"applies S3 CDN to dark background category images\" do\n-      scheme = ColorScheme.create_from_base(name: \"Dark Test\", base_scheme_id: \"WCAG Dark\")\n-\n-      setup_s3\n-      SiteSetting.s3_use_iam_profile = true\n-      SiteSetting.s3_upload_bucket = \"test\"\n-      SiteSetting.s3_region = \"ap-southeast-2\"\n-      SiteSetting.s3_cdn_url = \"https://s3.cdn\"\n-\n-      background = Fabricate(:upload_s3)\n-      background_dark = Fabricate(:upload_s3)\n-      category =\n-        Fabricate(\n-          :category,\n-          uploaded_background: background,\n-          uploaded_background_dark: background_dark,\n-        )\n-\n-      compiled_css = compile_css(\"color_definitions\", { color_scheme_id: scheme.id })\n-      expect(compiled_css).to include(\n-        \"body.category-#{category.slug}{background-image:url(https://s3.cdn/original\",\n-      )\n-    end\n-  end\n-\n   describe \"#font\" do\n     it \"includes font variable\" do\n       default_font = \":root{--font-family: Arial, sans-serif}\""
        },
        {
          "filename": "spec/lib/stylesheet/manager_spec.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 23,
          "patch": "@@ -483,29 +483,6 @@ def manager(theme_id = nil)\n   describe \"color_scheme_digest\" do\n     fab!(:theme)\n \n-    it \"changes with category background image\" do\n-      category1 = Fabricate(:category, uploaded_background_id: 123, updated_at: 1.week.ago)\n-      category2 = Fabricate(:category, uploaded_background_id: 456, updated_at: 2.days.ago)\n-\n-      manager = manager(theme.id)\n-\n-      builder =\n-        Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)\n-\n-      digest1 = builder.color_scheme_digest\n-\n-      category2.update!(uploaded_background_id: 789, updated_at: 1.day.ago)\n-\n-      digest2 = builder.color_scheme_digest\n-      expect(digest2).to_not eq(digest1)\n-\n-      category1.update!(uploaded_background_id: nil, updated_at: 5.minutes.ago)\n-\n-      digest3 = builder.color_scheme_digest\n-      expect(digest3).to_not eq(digest2)\n-      expect(digest3).to_not eq(digest1)\n-    end\n-\n     it \"updates digest when updating a color scheme\" do\n       scheme = ColorScheme.create_from_base(name: \"Neutral\", base_scheme_id: \"Neutral\")\n       manager = manager(theme.id)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d2efdf5282a868d80e916caaeb51d40d1ea256a2",
            "date": "2025-01-24T21:33:06Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "4c1c4ba8d42db4d1c732af69c39740d2aee91410",
            "date": "2025-01-24T19:50:52Z",
            "author_login": "featheredtoast"
          },
          {
            "sha": "59a67758489683457e7dca5fd712710034c08631",
            "date": "2025-01-24T19:42:22Z",
            "author_login": "xfalcox"
          },
          {
            "sha": "9cc99ef6db77d82b4af95911ee503e227cceae62",
            "date": "2025-01-24T18:36:35Z",
            "author_login": "SamSaffron"
          },
          {
            "sha": "5a94ceda542e5a0d0d8b90219bb835a51780b502",
            "date": "2025-01-24T18:05:47Z",
            "author_login": "xfalcox"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Discourse is an open source platform for community discussion. In affected versions an attacker can learn that secret categories exist when they have backgrounds set. The issue is patched in the latest stable, beta and tests-passed version of Discourse. Users are advised to upgrade. Users unable to upgrade should temporarily remove category backgrounds.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-15T20:15:09.587",
    "last_modified": "2024-11-21T09:06:04.750",
    "fix_date": "2024-03-11T17:25:31Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/b425fbc2a28341a5627928f963519006712c3d39",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-c7q7-7f6q-2c23",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/commit/b425fbc2a28341a5627928f963519006712c3d39",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-c7q7-7f6q-2c23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:38.501097",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-26T07:21:20Z",
    "pushed_at": "2025-01-25T09:40:42Z",
    "size": 701178,
    "stars": 42998,
    "forks": 8411,
    "open_issues": 82,
    "watchers": 42998,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20337451,
      "JavaScript": 9453662,
      "HTML": 1461712,
      "Handlebars": 1061673,
      "SCSS": 987048,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5042,
      "avg_commits_per_week": 96.96153846153847,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:34:08.623080"
  }
}