{
  "cve_id": "CVE-2024-28243",
  "github_data": {
    "repository": "KaTeX/KaTeX",
    "fix_commit": "e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
    "related_commits": [
      "e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
      "e88b4c357f978b1bca8edfe3297f0aa309bcbe34"
    ],
    "patch_url": "https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34.patch",
    "fix_commit_details": {
      "sha": "e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
      "commit_date": "2024-03-24T21:57:37Z",
      "author": {
        "login": "edemaine",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: \\edef bypassing maxExpand via exponential blowup",
        "length": 291,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 28,
        "additions": 22,
        "deletions": 6
      },
      "files": [
        {
          "filename": "docs/options.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -26,7 +26,7 @@ You can provide an object of options as the last argument to [`katex.render` and\n - `minRuleThickness`: `number`. Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`. The usual value for these items is `0.04`, so for `minRuleThickness` to be effective it should probably take a value slightly above `0.04`, say `0.05` or `0.06`. Negative values will be ignored.\n - `colorIsTextColor`: `boolean`. In early versions of both KaTeX (<0.8.0) and MathJax, the `\\color` function expected the content to be a function argument, as in `\\color{blue}{hello}`. In current KaTeX, `\\color` is a switch, as in `\\color{blue} hello`. This matches LaTeX behavior. If you want the old `\\color` behavior, set option `colorIsTextColor` to true.\n - `maxSize`: `number`. All user-specified sizes, e.g. in `\\rule{500em}{500em}`, will be capped to `maxSize` ems. If set to `Infinity` (the default), users can make elements and spaces arbitrarily large.\n-- `maxExpand`: `number`. Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to `Infinity`, the macro expander will try to fully expand as in LaTeX. (default: 1000)\n+- `maxExpand`: `number`. Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. `\\edef` expansion counts all expanded tokens. If set to `Infinity`, the macro expander will try to fully expand as in LaTeX. (default: 1000)\n - `strict`: `boolean` or `string` or `function` (default: `\"warn\"`). If `false` or `\"ignore`\", allow features that make writing LaTeX convenient but are not actually supported by (Xe)LaTeX (similar to MathJax). If `true` or `\"error\"` (LaTeX faithfulness mode), throw an error for any such transgressions. If `\"warn\"` (the default), warn about such behavior via `console.warn`. Provide a custom function `handler(errorCode, errorMsg, token)` to customize behavior depending on the type of transgression (summarized by the string code `errorCode` and detailed in `errorMsg`); this function can also return `\"ignore\"`, `\"error\"`, or `\"warn\"` to use a built-in behavior.  A list of such features and their `errorCode`s:\n \n   - `\"unknownSymbol\"`: Use of unknown Unicode symbol, which will likely also"
        },
        {
          "filename": "src/MacroExpander.js",
          "status": "modified",
          "additions": 16,
          "deletions": 5,
          "patch": "@@ -245,6 +245,18 @@ export default class MacroExpander implements MacroContextInterface {\n         return args;\n     }\n \n+    /**\n+     * Increment `expansionCount` by the specified amount.\n+     * Throw an error if it exceeds `maxExpand`.\n+     */\n+    countExpansion(amount: number): void {\n+        this.expansionCount += amount;\n+        if (this.expansionCount > this.settings.maxExpand) {\n+            throw new ParseError(\"Too many expansions: infinite loop or \" +\n+                \"need to increase maxExpand setting\");\n+        }\n+    }\n+\n     /**\n      * Expand the next token only once if possible.\n      *\n@@ -276,11 +288,7 @@ export default class MacroExpander implements MacroContextInterface {\n             this.pushToken(topToken);\n             return false;\n         }\n-        this.expansionCount++;\n-        if (this.expansionCount > this.settings.maxExpand) {\n-            throw new ParseError(\"Too many expansions: infinite loop or \" +\n-                \"need to increase maxExpand setting\");\n-        }\n+        this.countExpansion(1);\n         let tokens = expansion.tokens;\n         const args = this.consumeArgs(expansion.numArgs, expansion.delimiters);\n         if (expansion.numArgs) {\n@@ -375,6 +383,9 @@ export default class MacroExpander implements MacroContextInterface {\n                 output.push(token);\n             }\n         }\n+        // Count all of these tokens as additional expansions, to prevent\n+        // exponential blowup from linearly many \\edef's.\n+        this.countExpansion(output.length);\n         return output;\n     }\n "
        },
        {
          "filename": "test/katex-spec.js",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -3997,6 +3997,11 @@ describe(\"The maxExpand setting\", () => {\n         expect`\\gdef\\foo{\\foo}\\foo`.not.toParse(\n             new Settings({maxExpand: 10}));\n     });\n+\n+    it(\"should prevent exponential blowup via \\\\edef\", () => {\n+        expect`\\edef0{x}\\edef0{00}\\edef0{00}\\edef0{00}\\edef0{00}`.not.toParse(\n+            new Settings({maxExpand: 10}));\n+    });\n });\n \n describe(\"The \\\\mathchoice function\", function() {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "28a0bf51139969e9dc52085b72024e0c5447cfbe",
            "date": "2025-01-12T21:50:45Z",
            "author_login": "KaTeX-bot"
          },
          {
            "sha": "6d30fe47b06f9da9b836fe518d5cbbecf6a6a3a1",
            "date": "2025-01-12T21:48:45Z",
            "author_login": "edemaine"
          },
          {
            "sha": "8f47dba453aa78e03878288fdd5841cfdb4ffb8d",
            "date": "2025-01-09T21:26:18Z",
            "author_login": "edemaine"
          },
          {
            "sha": "88b5056bdc534016d00bbb581a36c4a14d3b0651",
            "date": "2024-12-29T14:52:12Z",
            "author_login": "KaTeX-bot"
          },
          {
            "sha": "4228b4eb529b8e35def66cc6e4fa467383b98c86",
            "date": "2024-12-29T14:50:12Z",
            "author_login": "Mister-Hope"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-674",
    "description": "KaTeX is a JavaScript library for TeX math rendering on the web. KaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\edef` that causes a near-infinite loop, despite setting `maxExpand` to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow. Upgrade to KaTeX v0.16.10 to remove this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-25T20:15:07.950",
    "last_modified": "2024-11-21T09:06:04.897",
    "fix_date": "2024-03-24T21:57:37Z"
  },
  "references": [
    {
      "url": "https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.899718",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "KaTeX",
    "owner": "KaTeX",
    "created_at": "2013-07-05T09:01:54Z",
    "updated_at": "2025-01-14T12:22:19Z",
    "pushed_at": "2025-01-14T01:48:38Z",
    "size": 87278,
    "stars": 18594,
    "forks": 1195,
    "open_issues": 417,
    "watchers": 18594,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 1148097,
      "Perl": 103244,
      "HTML": 30794,
      "SCSS": 16574,
      "Python": 16476,
      "CSS": 10879,
      "Shell": 4929,
      "Makefile": 4177,
      "Dockerfile": 1732,
      "TeX": 1153
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:55:25.565789"
  }
}