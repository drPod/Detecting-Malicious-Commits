{
  "cve_id": "CVE-2024-28246",
  "github_data": {
    "repository": "KaTeX/KaTeX",
    "fix_commit": "fc5af64183a3ceb9be9d1c23a275999a728593de",
    "related_commits": [
      "fc5af64183a3ceb9be9d1c23a275999a728593de",
      "fc5af64183a3ceb9be9d1c23a275999a728593de"
    ],
    "patch_url": "https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de.patch",
    "fix_commit_details": {
      "sha": "fc5af64183a3ceb9be9d1c23a275999a728593de",
      "commit_date": "2024-03-24T22:03:28Z",
      "author": {
        "login": "edemaine",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: force protocol to be lowercase for better protocol filtering",
        "length": 472,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 115,
        "additions": 108,
        "deletions": 7
      },
      "files": [
        {
          "filename": "docs/options.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -50,6 +50,8 @@ You can provide an object of options as the last argument to [`katex.render` and\n - `trust`: `boolean` or `function` (default: `false`). If `false` (do not trust input), prevent any commands like `\\includegraphics` that could enable adverse behavior, rendering them instead in `errorColor`. If `true` (trust input), allow all such commands. Provide a custom function `handler(context)` to customize behavior depending on the context (command, arguments e.g. a URL, etc.).  A list of possible contexts:\n \n   - `{command: \"\\\\url\", url, protocol}`\n+    where `protocol` is a lowercased string like `\"http\"` or `\"https\"`\n+    that appears before a colon, or `\"_relative\"` for relative URLs.\n   - `{command: \"\\\\href\", url, protocol}`\n   - `{command: \"\\\\includegraphics\", url, protocol}`\n   - `{command: \"\\\\htmlClass\", class}`"
        },
        {
          "filename": "src/Settings.js",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -346,7 +346,11 @@ export default class Settings {\n      */\n     isTrusted(context: AnyTrustContext): boolean {\n         if (context.url && !context.protocol) {\n-            context.protocol = utils.protocolFromUrl(context.url);\n+            const protocol = utils.protocolFromUrl(context.url);\n+            if (protocol == null) {\n+                return false;\n+            }\n+            context.protocol = protocol;\n         }\n         const trust = typeof this.trust === \"function\"\n             ? this.trust(context)"
        },
        {
          "filename": "src/utils.js",
          "status": "modified",
          "additions": 23,
          "deletions": 4,
          "patch": "@@ -93,11 +93,30 @@ export const assert = function<T>(value: ?T): T {\n \n /**\n  * Return the protocol of a URL, or \"_relative\" if the URL does not specify a\n- * protocol (and thus is relative).\n+ * protocol (and thus is relative), or `null` if URL has invalid protocol\n+ * (so should be outright rejected).\n  */\n-export const protocolFromUrl = function(url: string): string {\n-    const protocol = /^\\s*([^\\\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);\n-    return (protocol != null ? protocol[1] : \"_relative\");\n+export const protocolFromUrl = function(url: string): string | null {\n+    // Check for possible leading protocol.\n+    // https://url.spec.whatwg.org/#url-parsing strips leading whitespace\n+    // (U+20) or C0 control (U+00-U+1F) characters.\n+    // eslint-disable-next-line no-control-regex\n+    const protocol = /^[\\x00-\\x20]*([^\\\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i\n+    .exec(url);\n+    if (!protocol) {\n+        return \"_relative\";\n+    }\n+    // Reject weird colons\n+    if (protocol[2] !== \":\") {\n+        return null;\n+    }\n+    // Reject invalid characters in scheme according to\n+    // https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\n+    if (!/^[a-zA-Z][a-zA-Z0-9+\\-.]*$/.test(protocol[1])) {\n+        return null;\n+    }\n+    // Lowercase the protocol\n+    return protocol[1].toLowerCase();\n };\n \n export default {"
        },
        {
          "filename": "test/__snapshots__/katex-spec.js.snap",
          "status": "modified",
          "additions": 44,
          "deletions": 1,
          "patch": "@@ -1468,7 +1468,50 @@ exports[`href and url commands should not affect spacing around 1`] = `\n ]\n `;\n \n-exports[`href and url commands should not allow explicitly disallow protocols 1`] = `\n+exports[`href and url commands should not allow explicitly disallowed protocols 1`] = `\n+[\n+  {\n+    \"type\": \"color\",\n+    \"body\": [\n+      {\n+        \"type\": \"text\",\n+        \"body\": [\n+          {\n+            \"type\": \"textord\",\n+            \"mode\": \"text\",\n+            \"text\": \"\\\\\\\\\"\n+          },\n+          {\n+            \"type\": \"textord\",\n+            \"mode\": \"text\",\n+            \"text\": \"h\"\n+          },\n+          {\n+            \"type\": \"textord\",\n+            \"mode\": \"text\",\n+            \"text\": \"r\"\n+          },\n+          {\n+            \"type\": \"textord\",\n+            \"mode\": \"text\",\n+            \"text\": \"e\"\n+          },\n+          {\n+            \"type\": \"textord\",\n+            \"mode\": \"text\",\n+            \"text\": \"f\"\n+          }\n+        ],\n+        \"mode\": \"math\"\n+      }\n+    ],\n+    \"color\": \"#cc0000\",\n+    \"mode\": \"math\"\n+  }\n+]\n+`;\n+\n+exports[`href and url commands should not allow explicitly uppercased disallowed protocols 1`] = `\n [\n   {\n     \"type\": \"color\","
        },
        {
          "filename": "test/katex-spec.js",
          "status": "modified",
          "additions": 34,
          "deletions": 1,
          "patch": "@@ -3005,13 +3005,46 @@ describe(\"href and url commands\", function() {\n         expect(parsed).toMatchSnapshot();\n     });\n \n-    it(\"should not allow explicitly disallow protocols\", () => {\n+    it(\"should not allow explicitly disallowed protocols\", () => {\n         const parsed = getParsed(\n             \"\\\\href{javascript:alert('x')}{foo}\",\n             new Settings({trust: context => context.protocol !== \"javascript\"}),\n         );\n         expect(parsed).toMatchSnapshot();\n     });\n+\n+    it(\"should not allow explicitly uppercased disallowed protocols\", () => {\n+        const parsed = getParsed(\n+            \"\\\\href{JavaScript:alert('x')}{foo}\",\n+            new Settings({trust: context => context.protocol !== \"javascript\"}),\n+        );\n+        expect(parsed).toMatchSnapshot();\n+    });\n+\n+    function getProtocolViaTrust(url) {\n+        let protocol;\n+        getParsed(`\\\\url{${url}}`, new Settings({\n+            trust: context => protocol = context.protocol,\n+        }));\n+        return protocol;\n+    }\n+\n+    it(\"should get protocols correctly\", () => {\n+        expect(getProtocolViaTrust(\"foo\")).toBe(\"_relative\");\n+        expect(getProtocolViaTrust(\"Foo:\")).toBe(\"foo\");\n+        expect(getProtocolViaTrust(\"Foo:bar\")).toBe(\"foo\");\n+        expect(getProtocolViaTrust(\"JavaScript:\")).toBe(\"javascript\");\n+        expect(getProtocolViaTrust(\"JavaScript:code\")).toBe(\"javascript\");\n+        expect(getProtocolViaTrust(\"!:\")).toBeUndefined();\n+        expect(getProtocolViaTrust(\"foo&colon;\")).toBeUndefined();\n+        expect(getProtocolViaTrust(\"?query=string&colon=\")).toBe(\"_relative\");\n+        expect(getProtocolViaTrust(\"#query=string&colon=\")).toBe(\"_relative\");\n+        expect(getProtocolViaTrust(\"dir/file&colon\")).toBe(\"_relative\");\n+        expect(getProtocolViaTrust(\"//foo\")).toBe(\"_relative\");\n+        expect(getProtocolViaTrust(\"://foo\")).toBeUndefined();\n+        expect(getProtocolViaTrust(\"  \\t http://\")).toBe(\"http\");\n+        expect(getProtocolViaTrust(\"  \\t http://foo\")).toBe(\"http\");\n+    });\n });\n \n describe(\"A raw text parser\", function() {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "28a0bf51139969e9dc52085b72024e0c5447cfbe",
            "date": "2025-01-12T21:50:45Z",
            "author_login": "KaTeX-bot"
          },
          {
            "sha": "6d30fe47b06f9da9b836fe518d5cbbecf6a6a3a1",
            "date": "2025-01-12T21:48:45Z",
            "author_login": "edemaine"
          },
          {
            "sha": "8f47dba453aa78e03878288fdd5841cfdb4ffb8d",
            "date": "2025-01-09T21:26:18Z",
            "author_login": "edemaine"
          },
          {
            "sha": "88b5056bdc534016d00bbb581a36c4a14d3b0651",
            "date": "2024-12-29T14:52:12Z",
            "author_login": "KaTeX-bot"
          },
          {
            "sha": "4228b4eb529b8e35def66cc6e4fa467383b98c86",
            "date": "2024-12-29T14:50:12Z",
            "author_login": "Mister-Hope"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-184",
    "description": "KaTeX is a JavaScript library for TeX math rendering on the web. Code that uses KaTeX's `trust` option, specifically that provides a function to blacklist certain URL protocols, can be fooled by URLs in malicious inputs that use uppercase characters in the protocol. In particular, this can allow for malicious input to generate `javascript:` links in the output, even if the `trust` function tries to forbid this protocol via `trust: (context) => context.protocol !== 'javascript'`. Upgrade to KaTeX v0.16.10 to remove this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-25T20:15:08.580",
    "last_modified": "2024-11-21T09:06:05.307",
    "fix_date": "2024-03-24T22:03:28Z"
  },
  "references": [
    {
      "url": "https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.900146",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "KaTeX",
    "owner": "KaTeX",
    "created_at": "2013-07-05T09:01:54Z",
    "updated_at": "2025-01-14T12:22:19Z",
    "pushed_at": "2025-01-14T01:48:38Z",
    "size": 87278,
    "stars": 18594,
    "forks": 1195,
    "open_issues": 417,
    "watchers": 18594,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 1148097,
      "Perl": 103244,
      "HTML": 30794,
      "SCSS": 16574,
      "Python": 16476,
      "CSS": 10879,
      "Shell": 4929,
      "Makefile": 4177,
      "Dockerfile": 1732,
      "TeX": 1153
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:55:25.565789"
  }
}