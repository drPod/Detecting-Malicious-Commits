{
  "cve_id": "CVE-2024-28247",
  "github_data": {
    "repository": "pi-hole/pi-hole",
    "fix_commit": "f3af03174e676c20e502a92ed7842159f2fdeb7e",
    "related_commits": [
      "f3af03174e676c20e502a92ed7842159f2fdeb7e",
      "f3af03174e676c20e502a92ed7842159f2fdeb7e"
    ],
    "patch_url": "https://github.com/pi-hole/pi-hole/commit/f3af03174e676c20e502a92ed7842159f2fdeb7e.patch",
    "fix_commit_details": {
      "sha": "f3af03174e676c20e502a92ed7842159f2fdeb7e",
      "commit_date": "2024-03-27T18:02:44Z",
      "author": {
        "login": "PromoFaux",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-95g6-7q26-mp9x",
        "length": 115,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 36,
        "additions": 32,
        "deletions": 4
      },
      "files": [
        {
          "filename": "gravity.sh",
          "status": "modified",
          "additions": 32,
          "deletions": 4,
          "patch": "@@ -503,6 +503,7 @@ compareLists() {\n gravity_DownloadBlocklistFromUrl() {\n   local url=\"${1}\" adlistID=\"${2}\" saveLocation=\"${3}\" target=\"${4}\" compression=\"${5}\"\n   local heisenbergCompensator=\"\" listCurlBuffer str httpCode success=\"\" ip cmd_ext\n+  local file_path permissions ip_addr port blocked=false download=true\n \n   # Create temp file to store content on disk instead of RAM\n   # We don't use '--suffix' here because not all implementations of mktemp support it, e.g. on Alpine\n@@ -519,7 +520,6 @@ gravity_DownloadBlocklistFromUrl() {\n \n   str=\"Status:\"\n   echo -ne \"  ${INFO} ${str} Pending...\"\n-  blocked=false\n   case $BLOCKINGMODE in\n     \"IP-NODATA-AAAA\"|\"IP\")\n       # Get IP address of this domain\n@@ -560,16 +560,44 @@ gravity_DownloadBlocklistFromUrl() {\n     cmd_ext=\"--resolve $domain:$port:$ip\"\n   fi\n \n-  # shellcheck disable=SC2086\n-  httpCode=$(curl --connect-timeout ${curl_connect_timeout} -s -L ${compression} ${cmd_ext} ${heisenbergCompensator} -w \"%{http_code}\" \"${url}\" -o \"${listCurlBuffer}\" 2> /dev/null)\n+  # If we are going to \"download\" a local file, we first check if the target\n+  # file has a+r permission. We explicitly check for all+read because we want\n+  # to make sure that the file is readable by everyone and not just the user\n+  # running the script.\n+  if [[ $url == \"file://\"* ]]; then\n+    # Get the file path\n+    file_path=$(echo \"$url\" | cut -d'/' -f3-)\n+    # Check if the file exists\n+    if [[ ! -e $file_path ]]; then\n+      # Output that the file does not exist\n+      echo -e \"${OVER}  ${CROSS} ${file_path} does not exist\"\n+      download=false\n+    else\n+      # Check if the file has a+r permissions\n+      permissions=$(stat -c \"%a\" \"$file_path\")\n+      if [[ $permissions == \"??4\" || $permissions == \"??5\" || $permissions == \"??6\" || $permissions == \"??7\" ]]; then\n+        # Output that we are using the local file\n+        echo -e \"${OVER}  ${INFO} Using local file ${file_path}\"\n+      else\n+        # Output that the file does not have the correct permissions\n+        echo -e \"${OVER}  ${CROSS} Cannot read file (file needs to have a+r permission)\"\n+        download=false\n+      fi\n+    fi\n+  fi\n+\n+  if [[ \"${download}\" == true ]]; then\n+    # shellcheck disable=SC2086\n+    httpCode=$(curl --connect-timeout ${curl_connect_timeout} -s -L ${compression} ${cmd_ext} ${heisenbergCompensator} -w \"%{http_code}\" \"${url}\" -o \"${listCurlBuffer}\" 2> /dev/null)\n+  fi\n \n   case $url in\n     # Did we \"download\" a local file?\n     \"file\"*)\n       if [[ -s \"${listCurlBuffer}\" ]]; then\n         echo -e \"${OVER}  ${TICK} ${str} Retrieval successful\"; success=true\n       else\n-        echo -e \"${OVER}  ${CROSS} ${str} Not found / empty list\"\n+        echo -e \"${OVER}  ${CROSS} ${str} Retrieval failed / empty list\"\n       fi;;\n     # Did we \"download\" a remote file?\n     *)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2cf046d559f2430253fde4e3bf1a89ef4d8f1587",
            "date": "2024-12-29T13:53:35Z",
            "author_login": "PromoFaux"
          },
          {
            "sha": "a1ccee6694a9648347098d66e19572b0fc0a9cc7",
            "date": "2024-12-29T13:32:07Z",
            "author_login": "PromoFaux"
          },
          {
            "sha": "dff0c0105d8228fa6ce1c7648d76f853659f7a0d",
            "date": "2024-12-29T12:43:08Z",
            "author_login": "PromoFaux"
          },
          {
            "sha": "d972ffa53afd9d0603b33d76aa165fd8d6963678",
            "date": "2024-12-29T12:35:32Z",
            "author_login": "PromoFaux"
          },
          {
            "sha": "22b6dc7dae8742de00244d22df72c0f99c281e01",
            "date": "2024-12-29T12:22:35Z",
            "author_login": "PromoFaux"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-200",
    "description": "The Pi-hole is a DNS sinkhole that protects your devices from unwanted content without installing any client-side software. A vulnerability has been discovered in Pihole that allows an authenticated user on the platform to read internal server files arbitrarily, and because the application runs from behind, reading files is done as a privileged user.If the URL that is in the list of \"Adslists\" begins with \"file*\" it is understood that it is updating from a local file, on the other hand if it does not begin with \"file*\" depending on the state of the response it does one thing or another. The problem resides in the update through local files. When updating from a file which contains non-domain lines, 5 of the non-domain lines are printed on the screen, so if you provide it with any file on the server which contains non-domain lines it will print them on the screen. This vulnerability is fixed by 5.18.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-27T19:15:48.637",
    "last_modified": "2024-11-21T09:06:05.440",
    "fix_date": "2024-03-27T18:02:44Z"
  },
  "references": [
    {
      "url": "https://github.com/pi-hole/pi-hole/commit/f3af03174e676c20e502a92ed7842159f2fdeb7e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pi-hole/pi-hole/security/advisories/GHSA-95g6-7q26-mp9x",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pi-hole/pi-hole/commit/f3af03174e676c20e502a92ed7842159f2fdeb7e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/pi-hole/pi-hole/security/advisories/GHSA-95g6-7q26-mp9x",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.915961",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pi-hole",
    "owner": "pi-hole",
    "created_at": "2014-06-08T15:02:55Z",
    "updated_at": "2025-01-14T17:01:23Z",
    "pushed_at": "2025-01-13T23:12:14Z",
    "size": 8434,
    "stars": 49881,
    "forks": 2727,
    "open_issues": 37,
    "watchers": 49881,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "development",
      "master"
    ],
    "languages": {
      "Shell": 367985,
      "Python": 53907,
      "Roff": 11096,
      "Dockerfile": 4659
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:53:54.124030"
  }
}