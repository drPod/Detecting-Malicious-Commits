{
  "cve_id": "CVE-2024-29042",
  "github_data": {
    "repository": "franciscop/translate",
    "fix_commit": "7a2bf8b9f05f7c45c09683973ef4d8e995804aa4",
    "related_commits": [
      "7a2bf8b9f05f7c45c09683973ef4d8e995804aa4",
      "cc1ba03078102f83e0503a96f1a081489bb865d3",
      "7a2bf8b9f05f7c45c09683973ef4d8e995804aa4",
      "cc1ba03078102f83e0503a96f1a081489bb865d3"
    ],
    "patch_url": "https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4.patch",
    "fix_commit_details": {
      "sha": "7a2bf8b9f05f7c45c09683973ef4d8e995804aa4",
      "commit_date": "2024-03-21T02:45:03Z",
      "author": {
        "login": "franciscop",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Made the usage options much simpler so that there's no chance of writing runtime vulnerabilities",
        "length": 96,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 182,
        "additions": 115,
        "deletions": 67
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 38,
          "deletions": 8,
          "patch": "@@ -61,14 +61,16 @@ console.log(text);\n \n The first parameter is the **string** that you want to translate. Right now only a single string of text is accepted.\n \n-The second parameter is the options. It accepts either a `String` of the language to translate **to** or a simple `Object` with these options:\n+The second parameter is the options. It accepts either a `String` of the language to translate **to** or a simple `Object` with the keys `to` and `from`. However, in total there are more options, so here is a list of all of them:\n \n - **`to`**: the string of the language to translate to. It can be in any of the two ISO 639 (1 or 2) or the full name in English like `Spanish`. Defaults to **en**.\n - **`from`**: the string of the language to translate to. It can be in any of the two ISO 639 (1 or 2) or the full name in English like `Spanish`. Also defaults to **en**.\n-- **`cache`**: a `Number` with the milliseconds that each translation should be cached. Leave it undefined to cache it indefinitely (until a server/browser restart).\n-- **`engine`**: a `String` containing the name of the engine to use for translation. Right now it defaults to `google`. Read more [in the engine section](#engines).\n-- **`key`**: the API Key for the engine of your choice. Read more [in the engine section](#engines).\n-- **`url`**: only available for those engines that you can install on your own server (like Libretranslate), allows you to specify a custom endpoint for the translations. [See this issue](https://github.com/franciscop/translate/issues/26#issuecomment-845038821) for more info.\n+- **`cache`** [instance]: a `Number` with the milliseconds that each translation should be cached. Leave it undefined to cache it indefinitely (until a server/browser restart).\n+- **`engine`** [instance]: a `String` containing the name of the engine to use for translation. Right now it defaults to `google`. Read more [in the engine section](#engines).\n+- **`key`** [instance]: the API Key for the engine of your choice. Read more [in the engine section](#engines).\n+- **`url`** [instance]: only available for those engines that you can install on your own server (like Libretranslate), allows you to specify a custom endpoint for the translations. [See this issue](https://github.com/franciscop/translate/issues/26#issuecomment-845038821) for more info.\n+\n+> The options marked as [instance] can only be set to the root `translate.cache = 1000` or when creating a new instance `const myDeepL = translate.Translate()`\n \n Examples:\n \n@@ -78,6 +80,9 @@ const foo = await translate(\"Hello world\", \"es\");\n \n // Same as this:\n const bar = await translate(\"Hello world\", { to: \"es\" });\n+\n+// INVALID:\n+const bar = await translate(\"Hello world\", { to: \"es\", engine: \"google\" });\n ```\n \n > On both `to` and `from` defaulting to `en`: while I _am_ Spanish and was quite tempted to set this as one of those, English is the main language of the Internet and the main secondary language for those who have a different native language. This is why most of the translations will happen either to or from English.\n@@ -89,9 +94,15 @@ You can change the default options for anything by calling the root library and\n ```js\n translate.from = \"es\";\n translate.engine = \"deepl\";\n+await translate(\"Hola mundo\", \"ja\");\n ```\n \n-This can be applied to any of the options enumerated above.\n+You can also create a new instance with different default options:\n+\n+```js\n+const myLib = translate.Translate({ engine: 'deepl', from: 'es', ... });\n+await myLib(\"Hola mundo\", \"ja\" );\n+```\n \n ## Engines\n \n@@ -126,17 +137,36 @@ translate.key = process.env.TRANSLATE_KEY;\n // ... use translate()\n ```\n \n-To pass it per-translation, you can add it to your arguments:\n+You can create different instances if you want to combine different engines:\n \n ```js\n-translate(\"Hello world\", { to: \"en\", engine: \"deepl\", key: \"YOUR-KEY-HERE\" });\n+const gTranslate = translate.Translate({\n+  engine: \"google\",\n+  key: \"YOUR-KEY-HERE\",\n+});\n+const dTranslate = translate.Translate({\n+  engine: \"deepl\",\n+  key: \"YOUR-KEY-HERE\",\n+});\n+const lTranslate = translate.Translate({\n+  engine: \"libre\",\n+  key: \"YOUR-KEY-HERE\",\n+});\n ```\n \n Specifically in Libretranslate, you can also add a `url` parameter if you install it on your own server:\n \n ```js\n translate.url = \"https://example.com/\";\n translate.key = process.env.TRANSLATE_KEY;\n+\n+// or\n+\n+const lTranslate = translate.Translate({\n+  engine: \"libre\",\n+  url: \"...\",\n+  key: \"YOUR-KEY-HERE\",\n+});\n ```\n \n ## Promises"
        },
        {
          "filename": "index.min.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-var iso={aar:\"aa\",abk:\"ab\",afr:\"af\",aka:\"ak\",alb:\"sq\",amh:\"am\",ara:\"ar\",arg:\"an\",arm:\"hy\",asm:\"as\",ava:\"av\",ave:\"ae\",aym:\"ay\",aze:\"az\",bak:\"ba\",bam:\"bm\",baq:\"eu\",bel:\"be\",ben:\"bn\",bih:\"bh\",bis:\"bi\",bos:\"bs\",bre:\"br\",bul:\"bg\",bur:\"my\",cat:\"ca\",cha:\"ch\",che:\"ce\",chi:\"zh\",chu:\"cu\",chv:\"cv\",cor:\"kw\",cos:\"co\",cre:\"cr\",cze:\"cs\",dan:\"da\",div:\"dv\",dut:\"nl\",dzo:\"dz\",eng:\"en\",epo:\"eo\",est:\"et\",ewe:\"ee\",fao:\"fo\",fij:\"fj\",fin:\"fi\",fre:\"fr\",fry:\"fy\",ful:\"ff\",geo:\"ka\",ger:\"de\",gla:\"gd\",gle:\"ga\",glg:\"gl\",glv:\"gv\",gre:\"el\",grn:\"gn\",guj:\"gu\",hat:\"ht\",hau:\"ha\",heb:\"he\",her:\"hz\",hin:\"hi\",hmo:\"ho\",hrv:\"hr\",hun:\"hu\",ibo:\"ig\",ice:\"is\",ido:\"io\",iii:\"ii\",iku:\"iu\",ile:\"ie\",ina:\"ia\",ind:\"id\",ipk:\"ik\",ita:\"it\",jav:\"jv\",jpn:\"ja\",kal:\"kl\",kan:\"kn\",kas:\"ks\",kau:\"kr\",kaz:\"kk\",khm:\"km\",kik:\"ki\",kin:\"rw\",kir:\"ky\",kom:\"kv\",kon:\"kg\",kor:\"ko\",kua:\"kj\",kur:\"ku\",lao:\"lo\",lat:\"la\",lav:\"lv\",lim:\"li\",lin:\"ln\",lit:\"lt\",ltz:\"lb\",lub:\"lu\",lug:\"lg\",mac:\"mk\",mah:\"mh\",mal:\"ml\",mao:\"mi\",mar:\"mr\",may:\"ms\",mlg:\"mg\",mlt:\"mt\",mon:\"mn\",nau:\"na\",nav:\"nv\",nbl:\"nr\",nde:\"nd\",ndo:\"ng\",nep:\"ne\",nno:\"nn\",nob:\"nb\",nor:\"no\",nya:\"ny\",oci:\"oc\",oji:\"oj\",ori:\"or\",orm:\"om\",oss:\"os\",pan:\"pa\",per:\"fa\",pli:\"pi\",pol:\"pl\",por:\"pt\",pus:\"ps\",que:\"qu\",roh:\"rm\",rum:\"ro\",run:\"rn\",rus:\"ru\",sag:\"sg\",san:\"sa\",sin:\"si\",slo:\"sk\",slv:\"sl\",sme:\"se\",smo:\"sm\",sna:\"sn\",snd:\"sd\",som:\"so\",sot:\"st\",spa:\"es\",srd:\"sc\",srp:\"sr\",ssw:\"ss\",sun:\"su\",swa:\"sw\",swe:\"sv\",tah:\"ty\",tam:\"ta\",tat:\"tt\",tel:\"te\",tgk:\"tg\",tgl:\"tl\",tha:\"th\",tib:\"bo\",tir:\"ti\",ton:\"to\",tsn:\"tn\",tso:\"ts\",tuk:\"tk\",tur:\"tr\",twi:\"tw\",uig:\"ug\",ukr:\"uk\",urd:\"ur\",uzb:\"uz\",ven:\"ve\",vie:\"vi\",vol:\"vo\",wel:\"cy\",wln:\"wa\",wol:\"wo\",xho:\"xh\",yid:\"yi\",yor:\"yo\",zha:\"za\",zul:\"zu\"},names={afar:\"aa\",abkhazian:\"ab\",afrikaans:\"af\",akan:\"ak\",albanian:\"sq\",amharic:\"am\",arabic:\"ar\",aragonese:\"an\",armenian:\"hy\",assamese:\"as\",avaric:\"av\",avestan:\"ae\",aymara:\"ay\",azerbaijani:\"az\",bashkir:\"ba\",bambara:\"bm\",basque:\"eu\",belarusian:\"be\",bengali:\"bn\",\"bihari languages\":\"bh\",bislama:\"bi\",tibetan:\"bo\",bosnian:\"bs\",breton:\"br\",bulgarian:\"bg\",burmese:\"my\",catalan:\"ca\",valencian:\"ca\",czech:\"cs\",chamorro:\"ch\",chechen:\"ce\",chinese:\"zh\",\"church slavic\":\"cu\",\"old slavonic\":\"cu\",\"church slavonic\":\"cu\",\"old bulgarian\":\"cu\",\"old church slavonic\":\"cu\",chuvash:\"cv\",cornish:\"kw\",corsican:\"co\",cree:\"cr\",welsh:\"cy\",danish:\"da\",german:\"de\",divehi:\"dv\",dhivehi:\"dv\",maldivian:\"dv\",dutch:\"nl\",flemish:\"nl\",dzongkha:\"dz\",greek:\"el\",english:\"en\",esperanto:\"eo\",estonian:\"et\",ewe:\"ee\",faroese:\"fo\",persian:\"fa\",fijian:\"fj\",finnish:\"fi\",french:\"fr\",\"western frisian\":\"fy\",fulah:\"ff\",georgian:\"ka\",gaelic:\"gd\",\"scottish gaelic\":\"gd\",irish:\"ga\",galician:\"gl\",manx:\"gv\",guarani:\"gn\",gujarati:\"gu\",haitian:\"ht\",\"haitian creole\":\"ht\",hausa:\"ha\",hebrew:\"he\",herero:\"hz\",hindi:\"hi\",\"hiri motu\":\"ho\",croatian:\"hr\",hungarian:\"hu\",igbo:\"ig\",icelandic:\"is\",ido:\"io\",\"sichuan yi\":\"ii\",nuosu:\"ii\",inuktitut:\"iu\",interlingue:\"ie\",occidental:\"ie\",interlingua:\"ia\",indonesian:\"id\",inupiaq:\"ik\",italian:\"it\",javanese:\"jv\",japanese:\"ja\",kalaallisut:\"kl\",greenlandic:\"kl\",kannada:\"kn\",kashmiri:\"ks\",kanuri:\"kr\",kazakh:\"kk\",\"central khmer\":\"km\",kikuyu:\"ki\",gikuyu:\"ki\",kinyarwanda:\"rw\",kirghiz:\"ky\",kyrgyz:\"ky\",komi:\"kv\",kongo:\"kg\",korean:\"ko\",kuanyama:\"kj\",kwanyama:\"kj\",kurdish:\"ku\",lao:\"lo\",latin:\"la\",latvian:\"lv\",limburgan:\"li\",limburger:\"li\",limburgish:\"li\",lingala:\"ln\",lithuanian:\"lt\",luxembourgish:\"lb\",letzeburgesch:\"lb\",\"luba-katanga\":\"lu\",ganda:\"lg\",macedonian:\"mk\",marshallese:\"mh\",malayalam:\"ml\",maori:\"mi\",marathi:\"mr\",malay:\"ms\",malagasy:\"mg\",maltese:\"mt\",mongolian:\"mn\",nauru:\"na\",navajo:\"nv\",navaho:\"nv\",\"ndebele, south\":\"nr\",\"south ndebele\":\"nr\",\"ndebele, north\":\"nd\",\"north ndebele\":\"nd\",ndonga:\"ng\",nepali:\"ne\",\"norwegian nynorsk\":\"nn\",\"nynorsk, norwegian\":\"nn\",\"norwegian bokm\u00e5l\":\"nb\",\"bokm\u00e5l, norwegian\":\"nb\",norwegian:\"no\",chichewa:\"ny\",chewa:\"ny\",nyanja:\"ny\",occitan:\"oc\",ojibwa:\"oj\",oriya:\"or\",oromo:\"om\",ossetian:\"os\",ossetic:\"os\",panjabi:\"pa\",punjabi:\"pa\",pali:\"pi\",polish:\"pl\",portuguese:\"pt\",pushto:\"ps\",pashto:\"ps\",quechua:\"qu\",romansh:\"rm\",romanian:\"ro\",moldavian:\"ro\",moldovan:\"ro\",rundi:\"rn\",russian:\"ru\",sango:\"sg\",sanskrit:\"sa\",sinhala:\"si\",sinhalese:\"si\",slovak:\"sk\",slovenian:\"sl\",\"northern sami\":\"se\",samoan:\"sm\",shona:\"sn\",sindhi:\"sd\",somali:\"so\",\"sotho, southern\":\"st\",spanish:\"es\",castilian:\"es\",sardinian:\"sc\",serbian:\"sr\",swati:\"ss\",sundanese:\"su\",swahili:\"sw\",swedish:\"sv\",tahitian:\"ty\",tamil:\"ta\",tatar:\"tt\",telugu:\"te\",tajik:\"tg\",tagalog:\"tl\",thai:\"th\",tigrinya:\"ti\",tonga:\"to\",tswana:\"tn\",tsonga:\"ts\",turkmen:\"tk\",turkish:\"tr\",twi:\"tw\",uighur:\"ug\",uyghur:\"ug\",ukrainian:\"uk\",urdu:\"ur\",uzbek:\"uz\",venda:\"ve\",vietnamese:\"vi\",\"volap\u00fck\":\"vo\",walloon:\"wa\",wolof:\"wo\",xhosa:\"xh\",yiddish:\"yi\",yoruba:\"yo\",zhuang:\"za\",chuang:\"za\",zulu:\"zu\"};const isoKeys=Object.values(iso).sort();var languages=e=>{if(\"string\"!=typeof e)throw new Error('The \"language\" must be a string, received '+typeof e);if(e.length>100)throw new Error(`The \"language\" is too long at ${e.length} characters`);if(e=e.toLowerCase(),e=names[e]||iso[e]||e,!isoKeys.includes(e))throw new Error(`The language \"${e}\" is not part of the ISO 639-1`);return e};function Cache(){var e=Object.create(null);function a(a){delete e[a]}this.set=function(n,i,r){if(void 0!==r&&(\"number\"!=typeof r||isNaN(r)||r<=0))throw new Error(\"Cache timeout must be a positive number\");var t=e[n];t&&clearTimeout(t.timeout);var o={value:i,expire:r+Date.now()};return isNaN(o.expire)||(o.timeout=setTimeout((()=>a(n)),r)),e[n]=o,i},this.del=function(n){var i=!0,r=e[n];return r?(clearTimeout(r.timeout),!isNaN(r.expire)&&r.expire<Date.now()&&(i=!1)):i=!1,i&&a(n),i},this.clear=function(){for(var a in e)clearTimeout(e[a].timeout);e=Object.create(null)},this.get=function(a){var n=e[a];if(void 0!==n){if(isNaN(n.expire)||n.expire>=Date.now())return n.value;delete e[a]}return null}}const exp$1=new Cache;exp$1.Cache=Cache;const base=\"https://translate.googleapis.com/translate_a/single\";var google={fetch:({key:e,from:a,to:n,text:i})=>[`${base}?client=gtx&sl=${a}&tl=${n}&dt=t&q=${encodeURI(i)}`],parse:e=>e.json().then((e=>{if(!(e=e&&e[0]&&e[0][0]&&e[0].map((e=>e[0])).join(\"\")))throw new Error(\"Translation not found\");return e}))},yandex={needkey:!0,fetch:({key:e,from:a,to:n,text:i})=>[`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${e}&lang=${a}-${n}&text=${encodeURIComponent(i)}`,{method:\"POST\",body:\"\"}],parse:e=>e.json().then((e=>{if(200!==e.code)throw new Error(e.message);return e.text[0]}))};const libreUrl=\"https://libretranslate.com/translate\";var libre={needkey:!1,fetch:({url:e=libreUrl,key:a,from:n,to:i,text:r})=>[e,{method:\"POST\",body:JSON.stringify({q:r,source:n,target:i,api_key:a}),headers:{\"Content-Type\":\"application/json\"}}],parse:e=>e.json().then((e=>{if(!e)throw new Error(\"No response found\");if(e.error)throw new Error(e.error);if(!e.translatedText)throw new Error(\"No response found\");return e.translatedText}))},deepl={needkey:!0,fetch:({key:e,from:a,to:n,text:i})=>[`https://api${/:fx$/.test(e)?\"-free\":\"\"}.deepl.com/v2/translate?auth_key=${e}&source_lang=${a}&target_lang=${n}&text=${i=encodeURIComponent(i)}`,{method:\"POST\",body:\"\"}],parse:async e=>{if(!e.ok){if(403===e.status)throw new Error(\"Auth Error, please review the key for DeepL\");throw new Error(`Error ${e.status}`)}return e.json().then((e=>e.translations[0].text))}},engines={google:google,yandex:yandex,libre:libre,deepl:deepl};const Translate=function(e={}){if(!(this instanceof Translate))return new Translate(e);const a={from:\"en\",to:\"en\",cache:void 0,languages:languages,engines:engines,engine:\"google\",keys:{}},n=async(e,a={})=>{\"string\"==typeof a&&(a={to:a}),a.text=e,a.from=languages(a.from||n.from),a.to=languages(a.to||n.to),a.cache=a.cache||n.cache,a.engines=a.engines||{},a.engine=a.engine||n.engine,a.url=a.url||n.url,a.id=a.id||`${a.url}:${a.from}:${a.to}:${a.engine}:${a.text}`,a.keys=a.keys||n.keys||{};for(let e in n.keys)a.keys[e]=a.keys[e]||n.keys[e];a.key=a.key||n.key||a.keys[a.engine];const i=a.engines[a.engine]||n.engines[a.engine],r=exp$1.get(a.id);if(r)return Promise.resolve(r);if(a.to===a.from)return Promise.resolve(a.text);if(i.needkey&&!a.key)throw new Error(`The engine \"${a.engine}\" needs a key, please provide it`);const t=i.fetch(a);return fetch(...t).then(i.parse).then((e=>exp$1.set(a.id,e,a.cache)))};for(let i in a)n[i]=void 0===e[i]?a[i]:e[i];return n},exp=new Translate;exp.Translate=Translate;export{exp as default};\n\\ No newline at end of file\n+function Cache(){var e=Object.create(null);function a(a){delete e[a]}this.set=function(n,i,r){if(void 0!==r&&(\"number\"!=typeof r||isNaN(r)||r<=0))throw new Error(\"Cache timeout must be a positive number\");var t=e[n];t&&clearTimeout(t.timeout);var o={value:i,expire:r+Date.now()};return isNaN(o.expire)||(o.timeout=setTimeout((()=>a(n)),r)),e[n]=o,i},this.del=function(n){var i=!0,r=e[n];return r?(clearTimeout(r.timeout),!isNaN(r.expire)&&r.expire<Date.now()&&(i=!1)):i=!1,i&&a(n),i},this.clear=function(){for(var a in e)clearTimeout(e[a].timeout);e=Object.create(null)},this.get=function(a){var n=e[a];if(void 0!==n){if(isNaN(n.expire)||n.expire>=Date.now())return n.value;delete e[a]}return null}}const exp$1=new Cache;exp$1.Cache=Cache;const base=\"https://translate.googleapis.com/translate_a/single\";var google={fetch:({key:e,from:a,to:n,text:i})=>[`${base}?client=gtx&sl=${a}&tl=${n}&dt=t&q=${encodeURI(i)}`],parse:e=>e.json().then((e=>{if(!(e=e&&e[0]&&e[0][0]&&e[0].map((e=>e[0])).join(\"\")))throw new Error(\"Translation not found\");return e}))},yandex={needkey:!0,fetch:({key:e,from:a,to:n,text:i})=>[`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${e}&lang=${a}-${n}&text=${encodeURIComponent(i)}`,{method:\"POST\",body:\"\"}],parse:e=>e.json().then((e=>{if(200!==e.code)throw new Error(e.message);return e.text[0]}))};const libreUrl=\"https://libretranslate.com/translate\";var libre={needkey:!1,fetch:({url:e=libreUrl,key:a,from:n,to:i,text:r})=>[e,{method:\"POST\",body:JSON.stringify({q:r,source:n,target:i,api_key:a}),headers:{\"Content-Type\":\"application/json\"}}],parse:e=>e.json().then((e=>{if(!e)throw new Error(\"No response found\");if(e.error)throw new Error(e.error);if(!e.translatedText)throw new Error(\"No response found\");return e.translatedText}))},deepl={needkey:!0,fetch:({key:e,from:a,to:n,text:i})=>[`https://api${e.endsWith(\":fx\")?\"-free\":\"\"}.deepl.com/v2/translate?auth_key=${e}&source_lang=${a}&target_lang=${n}&text=${i=encodeURIComponent(i)}`,{method:\"POST\",body:\"\"}],parse:async e=>{if(!e.ok){if(403===e.status)throw new Error(\"Auth Error, please review the key for DeepL\");throw new Error(`Error ${e.status}`)}return e.json().then((e=>e.translations[0].text))}},engines={google:google,yandex:yandex,libre:libre,deepl:deepl},iso={aar:\"aa\",abk:\"ab\",afr:\"af\",aka:\"ak\",alb:\"sq\",amh:\"am\",ara:\"ar\",arg:\"an\",arm:\"hy\",asm:\"as\",ava:\"av\",ave:\"ae\",aym:\"ay\",aze:\"az\",bak:\"ba\",bam:\"bm\",baq:\"eu\",bel:\"be\",ben:\"bn\",bih:\"bh\",bis:\"bi\",bos:\"bs\",bre:\"br\",bul:\"bg\",bur:\"my\",cat:\"ca\",cha:\"ch\",che:\"ce\",chi:\"zh\",chu:\"cu\",chv:\"cv\",cor:\"kw\",cos:\"co\",cre:\"cr\",cze:\"cs\",dan:\"da\",div:\"dv\",dut:\"nl\",dzo:\"dz\",eng:\"en\",epo:\"eo\",est:\"et\",ewe:\"ee\",fao:\"fo\",fij:\"fj\",fin:\"fi\",fre:\"fr\",fry:\"fy\",ful:\"ff\",geo:\"ka\",ger:\"de\",gla:\"gd\",gle:\"ga\",glg:\"gl\",glv:\"gv\",gre:\"el\",grn:\"gn\",guj:\"gu\",hat:\"ht\",hau:\"ha\",heb:\"he\",her:\"hz\",hin:\"hi\",hmo:\"ho\",hrv:\"hr\",hun:\"hu\",ibo:\"ig\",ice:\"is\",ido:\"io\",iii:\"ii\",iku:\"iu\",ile:\"ie\",ina:\"ia\",ind:\"id\",ipk:\"ik\",ita:\"it\",jav:\"jv\",jpn:\"ja\",kal:\"kl\",kan:\"kn\",kas:\"ks\",kau:\"kr\",kaz:\"kk\",khm:\"km\",kik:\"ki\",kin:\"rw\",kir:\"ky\",kom:\"kv\",kon:\"kg\",kor:\"ko\",kua:\"kj\",kur:\"ku\",lao:\"lo\",lat:\"la\",lav:\"lv\",lim:\"li\",lin:\"ln\",lit:\"lt\",ltz:\"lb\",lub:\"lu\",lug:\"lg\",mac:\"mk\",mah:\"mh\",mal:\"ml\",mao:\"mi\",mar:\"mr\",may:\"ms\",mlg:\"mg\",mlt:\"mt\",mon:\"mn\",nau:\"na\",nav:\"nv\",nbl:\"nr\",nde:\"nd\",ndo:\"ng\",nep:\"ne\",nno:\"nn\",nob:\"nb\",nor:\"no\",nya:\"ny\",oci:\"oc\",oji:\"oj\",ori:\"or\",orm:\"om\",oss:\"os\",pan:\"pa\",per:\"fa\",pli:\"pi\",pol:\"pl\",por:\"pt\",pus:\"ps\",que:\"qu\",roh:\"rm\",rum:\"ro\",run:\"rn\",rus:\"ru\",sag:\"sg\",san:\"sa\",sin:\"si\",slo:\"sk\",slv:\"sl\",sme:\"se\",smo:\"sm\",sna:\"sn\",snd:\"sd\",som:\"so\",sot:\"st\",spa:\"es\",srd:\"sc\",srp:\"sr\",ssw:\"ss\",sun:\"su\",swa:\"sw\",swe:\"sv\",tah:\"ty\",tam:\"ta\",tat:\"tt\",tel:\"te\",tgk:\"tg\",tgl:\"tl\",tha:\"th\",tib:\"bo\",tir:\"ti\",ton:\"to\",tsn:\"tn\",tso:\"ts\",tuk:\"tk\",tur:\"tr\",twi:\"tw\",uig:\"ug\",ukr:\"uk\",urd:\"ur\",uzb:\"uz\",ven:\"ve\",vie:\"vi\",vol:\"vo\",wel:\"cy\",wln:\"wa\",wol:\"wo\",xho:\"xh\",yid:\"yi\",yor:\"yo\",zha:\"za\",zul:\"zu\"},names={afar:\"aa\",abkhazian:\"ab\",afrikaans:\"af\",akan:\"ak\",albanian:\"sq\",amharic:\"am\",arabic:\"ar\",aragonese:\"an\",armenian:\"hy\",assamese:\"as\",avaric:\"av\",avestan:\"ae\",aymara:\"ay\",azerbaijani:\"az\",bashkir:\"ba\",bambara:\"bm\",basque:\"eu\",belarusian:\"be\",bengali:\"bn\",\"bihari languages\":\"bh\",bislama:\"bi\",tibetan:\"bo\",bosnian:\"bs\",breton:\"br\",bulgarian:\"bg\",burmese:\"my\",catalan:\"ca\",valencian:\"ca\",czech:\"cs\",chamorro:\"ch\",chechen:\"ce\",chinese:\"zh\",\"church slavic\":\"cu\",\"old slavonic\":\"cu\",\"church slavonic\":\"cu\",\"old bulgarian\":\"cu\",\"old church slavonic\":\"cu\",chuvash:\"cv\",cornish:\"kw\",corsican:\"co\",cree:\"cr\",welsh:\"cy\",danish:\"da\",german:\"de\",divehi:\"dv\",dhivehi:\"dv\",maldivian:\"dv\",dutch:\"nl\",flemish:\"nl\",dzongkha:\"dz\",greek:\"el\",english:\"en\",esperanto:\"eo\",estonian:\"et\",ewe:\"ee\",faroese:\"fo\",persian:\"fa\",fijian:\"fj\",finnish:\"fi\",french:\"fr\",\"western frisian\":\"fy\",fulah:\"ff\",georgian:\"ka\",gaelic:\"gd\",\"scottish gaelic\":\"gd\",irish:\"ga\",galician:\"gl\",manx:\"gv\",guarani:\"gn\",gujarati:\"gu\",haitian:\"ht\",\"haitian creole\":\"ht\",hausa:\"ha\",hebrew:\"he\",herero:\"hz\",hindi:\"hi\",\"hiri motu\":\"ho\",croatian:\"hr\",hungarian:\"hu\",igbo:\"ig\",icelandic:\"is\",ido:\"io\",\"sichuan yi\":\"ii\",nuosu:\"ii\",inuktitut:\"iu\",interlingue:\"ie\",occidental:\"ie\",interlingua:\"ia\",indonesian:\"id\",inupiaq:\"ik\",italian:\"it\",javanese:\"jv\",japanese:\"ja\",kalaallisut:\"kl\",greenlandic:\"kl\",kannada:\"kn\",kashmiri:\"ks\",kanuri:\"kr\",kazakh:\"kk\",\"central khmer\":\"km\",kikuyu:\"ki\",gikuyu:\"ki\",kinyarwanda:\"rw\",kirghiz:\"ky\",kyrgyz:\"ky\",komi:\"kv\",kongo:\"kg\",korean:\"ko\",kuanyama:\"kj\",kwanyama:\"kj\",kurdish:\"ku\",lao:\"lo\",latin:\"la\",latvian:\"lv\",limburgan:\"li\",limburger:\"li\",limburgish:\"li\",lingala:\"ln\",lithuanian:\"lt\",luxembourgish:\"lb\",letzeburgesch:\"lb\",\"luba-katanga\":\"lu\",ganda:\"lg\",macedonian:\"mk\",marshallese:\"mh\",malayalam:\"ml\",maori:\"mi\",marathi:\"mr\",malay:\"ms\",malagasy:\"mg\",maltese:\"mt\",mongolian:\"mn\",nauru:\"na\",navajo:\"nv\",navaho:\"nv\",\"ndebele, south\":\"nr\",\"south ndebele\":\"nr\",\"ndebele, north\":\"nd\",\"north ndebele\":\"nd\",ndonga:\"ng\",nepali:\"ne\",\"norwegian nynorsk\":\"nn\",\"nynorsk, norwegian\":\"nn\",\"norwegian bokm\u00e5l\":\"nb\",\"bokm\u00e5l, norwegian\":\"nb\",norwegian:\"no\",chichewa:\"ny\",chewa:\"ny\",nyanja:\"ny\",occitan:\"oc\",ojibwa:\"oj\",oriya:\"or\",oromo:\"om\",ossetian:\"os\",ossetic:\"os\",panjabi:\"pa\",punjabi:\"pa\",pali:\"pi\",polish:\"pl\",portuguese:\"pt\",pushto:\"ps\",pashto:\"ps\",quechua:\"qu\",romansh:\"rm\",romanian:\"ro\",moldavian:\"ro\",moldovan:\"ro\",rundi:\"rn\",russian:\"ru\",sango:\"sg\",sanskrit:\"sa\",sinhala:\"si\",sinhalese:\"si\",slovak:\"sk\",slovenian:\"sl\",\"northern sami\":\"se\",samoan:\"sm\",shona:\"sn\",sindhi:\"sd\",somali:\"so\",\"sotho, southern\":\"st\",spanish:\"es\",castilian:\"es\",sardinian:\"sc\",serbian:\"sr\",swati:\"ss\",sundanese:\"su\",swahili:\"sw\",swedish:\"sv\",tahitian:\"ty\",tamil:\"ta\",tatar:\"tt\",telugu:\"te\",tajik:\"tg\",tagalog:\"tl\",thai:\"th\",tigrinya:\"ti\",tonga:\"to\",tswana:\"tn\",tsonga:\"ts\",turkmen:\"tk\",turkish:\"tr\",twi:\"tw\",uighur:\"ug\",uyghur:\"ug\",ukrainian:\"uk\",urdu:\"ur\",uzbek:\"uz\",venda:\"ve\",vietnamese:\"vi\",\"volap\u00fck\":\"vo\",walloon:\"wa\",wolof:\"wo\",xhosa:\"xh\",yiddish:\"yi\",yoruba:\"yo\",zhuang:\"za\",chuang:\"za\",zulu:\"zu\"};const isoKeys=Object.values(iso).sort();var languages=e=>{if(\"string\"!=typeof e)throw new Error('The \"language\" must be a string, received '+typeof e);if(e.length>100)throw new Error(`The \"language\" is too long at ${e.length} characters`);if(e=e.toLowerCase(),e=names[e]||iso[e]||e,!isoKeys.includes(e))throw new Error(`The language \"${e}\" is not part of the ISO 639-1`);return e};const Translate=function(e={}){if(!(this instanceof Translate))return new Translate(e);const a={from:\"en\",to:\"en\",cache:void 0,engine:\"google\",key:void 0,url:void 0,languages:languages,engines:engines,keys:{}},n=async(e,a={})=>{\"string\"==typeof a&&(a={to:a});const i=Object.keys(a).find((e=>\"from\"!==e&&\"to\"!==e));if(i)throw new Error(`Invalid option with the name '${i}'`);a.text=e,a.from=languages(a.from||n.from),a.to=languages(a.to||n.to),a.cache=n.cache,a.engine=n.engine,a.url=n.url,a.id=`${a.url}:${a.from}:${a.to}:${a.engine}:${a.text}`,a.keys=n.keys||{};for(let e in n.keys)a.keys[e]=a.keys[e]||n.keys[e];a.key=a.key||n.key||a.keys[a.engine];const r=n.engines[a.engine],t=exp$1.get(a.id);if(t)return Promise.resolve(t);if(a.to===a.from)return Promise.resolve(a.text);if(r.needkey&&!a.key)throw new Error(`The engine \"${a.engine}\" needs a key, please provide it`);const o=r.fetch(a);return fetch(...o).then(r.parse).then((e=>exp$1.set(a.id,e,a.cache)))};for(let i in a)n[i]=void 0===e[i]?a[i]:e[i];return n},exp=new Translate;exp.Translate=Translate;export{exp as default};\n\\ No newline at end of file"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -2,14 +2,14 @@\n   \"name\": \"translate\",\n   \"version\": \"2.0.2\",\n   \"description\": \"Translate text to different languages on node.js and the browser\",\n+  \"author\": \"Francisco Presencia <public@francisco.io> (https://francisco.io/)\",\n   \"homepage\": \"https://github.com/franciscop/translate#readme\",\n   \"repository\": \"https://github.com/franciscop/translate.git\",\n   \"bugs\": \"https://github.com/franciscop/translate/issues\",\n   \"funding\": \"https://www.paypal.me/franciscopresencia/19\",\n-  \"author\": \"Francisco Presencia <public@francisco.io> (https://francisco.io/)\",\n   \"license\": \"MIT\",\n   \"scripts\": {\n-    \"start\": \"npm run watch # Start ~= Start dev\",\n+    \"start\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js --watch\",\n     \"build\": \"rollup src/index.js --name translate --output.format esm | terser --compress --mangle -o index.min.js\",\n     \"size\": \"gzip -c index.min.js | wc -c && echo 'bytes' # Only for Unix\",\n     \"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js --coverage --collectCoverageFrom=src/**/*.js && npx check-dts\","
        },
        {
          "filename": "src/cache.test.js",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -35,12 +35,13 @@ describe(\"cache\", () => {\n   });\n \n   it(\"removes cache after the time is out\", async () => {\n+    const t = translate.Translate({ cache: 1000 });\n     const before = new Date();\n-    await translate(\"Is this also cached?\", { to: \"es\", cache: 1000 });\n+    await t(\"Is this also cached?\", { to: \"es\" });\n     const mid = new Date();\n     await delay(1100);\n     mock(/googleapis.*tl=es/, [[[\"Hola mundo\"]]]);\n-    await translate(\"Is this also cached?\", { to: \"es\" });\n+    await t(\"Is this also cached?\", { to: \"es\" });\n     const after = new Date();\n     expect(mid - before).toBeLessThan(10000);\n     expect(mid - before).toBeGreaterThan(100);"
        },
        {
          "filename": "src/engines/deepl.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n export default {\n   needkey: true,\n   fetch: ({ key, from, to, text }) => {\n-    const suffix = /:fx$/.test(key) ? \"-free\" : \"\";\n+    const suffix = key.endsWith(\":fx\") ? \"-free\" : \"\";\n     text = encodeURIComponent(text);\n     return [\n       `https://api${suffix}.deepl.com/v2/translate?auth_key=${key}&source_lang=${from}&target_lang=${to}&text=${text}`,"
        },
        {
          "filename": "src/engines/google.test.js",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -1,7 +1,10 @@\n import \"dotenv/config\";\n-import translate from \"../../src\";\n+\n+import t from \"../../src\";\n import mock from \"../../test/mock.js\";\n \n+const translate = t.Translate({ engine: \"google\" });\n+\n describe(\"google mocked responses\", () => {\n   afterEach(() => mock.end());\n \n@@ -39,17 +42,17 @@ describe(\"google full requests\", () => {\n   });\n \n   it(\"calls Google to translate to Japanese\", async () => {\n-    const opts = { to: \"ja\", engine: \"google\" };\n+    const opts = { to: \"ja\" };\n     expect(await translate(\"Hello world\", opts)).toBe(\"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\");\n   });\n \n   it(\"calls Google to translate to Spanish\", async () => {\n-    const opts = { to: \"es\", engine: \"google\" };\n+    const opts = { to: \"es\" };\n     expect(await translate(\"Hello world\", opts)).toMatch(/Hola mundo/i);\n   });\n \n   it(\"works with punctuation\", async () => {\n-    const opts = { to: \"pt\", engine: \"google\" };\n+    const opts = { to: \"pt\" };\n     const text = await translate(\n       \"What do you call a pig that knows karate? A pork chop!\",\n       opts"
        },
        {
          "filename": "src/engines/libre.test.js",
          "status": "modified",
          "additions": 12,
          "deletions": 10,
          "patch": "@@ -1,7 +1,9 @@\n import \"dotenv/config\";\n-import translate from \"../../src\";\n+\n+import t from \"../../src\";\n import mock from \"../../test/mock\";\n \n+const translate = t.Translate({ engine: \"libre\" });\n translate.keys.libre = process.env.LIBRE_KEY || \"xxx\";\n \n describe(\"Libre mocked requests\", () => {\n@@ -10,27 +12,27 @@ describe(\"Libre mocked requests\", () => {\n \n   it(\"works with libretranslate\", async () => {\n     mock.libre(\"Hola mundo\");\n-    const text = await translate(\"Hello world\", { to: \"es\", engine: \"libre\" });\n+    const text = await translate(\"Hello world\", { to: \"es\" });\n     expect(text).toMatch(/Hola mundo/i);\n   });\n \n   it(\"will throw with a wrong language\", async () => {\n-    const opts = { to: \"adgdfnj\", engine: \"libre\" };\n+    const opts = { to: \"adgdfnj\" };\n     await expect(translate(\"Hello world\", opts)).rejects.toMatchObject({\n       message: `The language \"adgdfnj\" is not part of the ISO 639-1`,\n     });\n   });\n \n   it(\"will throw with an empty result\", async () => {\n     mock.libre(\"\");\n-    const opts = { to: \"es\", engine: \"libre\" };\n+    const opts = { to: \"es\" };\n     await expect(translate(\"What's going on?\", opts)).rejects.toMatchObject({\n       message: \"No response found\",\n     });\n   });\n \n   it(\"requires an API key\", async () => {\n-    const opts = { to: \"es\", engine: \"libre\" };\n+    const opts = { to: \"es\" };\n     await expect(translate(\"What's going on?\", opts)).rejects.toMatchObject({\n       message: \"Visit https://portal.libretranslate.com to get an API key\",\n     });\n@@ -40,7 +42,7 @@ describe(\"Libre mocked requests\", () => {\n     mock(/example\\.*/, new Error(\"no domain\"), { throws: true });\n \n     translate.url = \"https://example.com/\";\n-    const opts = { to: \"es\", engine: \"libre\" };\n+    const opts = { to: \"es\" };\n     await expect(translate(\"Hello world\", opts)).rejects.toMatchObject({\n       message: \"no domain\",\n     });\n@@ -59,23 +61,23 @@ describe(\"libre full requests\", () => {\n   }\n \n   it(\"calls Libre to translate to Japanese\", async () => {\n-    const opts = { to: \"ja\", engine: \"libre\" };\n+    const opts = { to: \"ja\" };\n     expect(await translate(\"Hello world\", opts)).toBe(\"\u30cf\u30ed\u30fc\u30ef\u30fc\u30eb\u30c9\");\n   });\n \n   it(\"calls Libre to translate to Spanish\", async () => {\n-    const opts = { to: \"es\", engine: \"libre\" };\n+    const opts = { to: \"es\" };\n     expect(await translate(\"Hello world\", opts)).toBe(\"Hola mundo\");\n   });\n \n   it(\"requires a valid key\", async () => {\n-    const opts = { to: \"ru\", engine: \"libre\", key: \"abc\" };\n+    const opts = { to: \"ru\", key: \"abc\" };\n     await expect(translate(\"Hello world\", opts)).rejects.toThrow();\n   });\n \n   it(\"can set a custom URL\", async () => {\n     translate.url = \"https://example.com/\";\n-    const opts = { to: \"es\", engine: \"libre\" };\n+    const opts = { to: \"es\" };\n     const text = await translate(\"libre custom url\", opts);\n     delete translate.url;\n     expect(text).toBe(\"Url personalizada de libre\");"
        },
        {
          "filename": "src/engines/yandex.test.js",
          "status": "modified",
          "additions": 9,
          "deletions": 10,
          "patch": "@@ -1,7 +1,9 @@\n import \"dotenv/config\";\n-import translate from \"../../src\";\n+\n+import t from \"../../src\";\n import mock from \"../../test/mock.js\";\n \n+const translate = t.Translate({ engine: \"yandex\" });\n translate.keys.yandex = process.env.YANDEX_KEY || \"xxx\";\n \n describe(\"yandex mocked requests\", () => {\n@@ -18,20 +20,17 @@ describe(\"yandex mocked requests\", () => {\n \n   it(\"works with a simple request\", async () => {\n     mock.yandex(\"Hola de Yandex\");\n-    const spanish = await translate(\"Hello from Yandex\", {\n-      to: \"es\",\n-      engine: \"yandex\",\n-    });\n+    const spanish = await translate(\"Hello from Yandex\", { to: \"es\" });\n     expect(spanish).toMatch(/Hola de Yandex/i);\n   });\n \n   it(\"can handle errors from the API\", async () => {\n-    const prom = translate(\"error\", { to: \"es\", engine: \"yandex\" });\n+    const prom = translate(\"error\", { to: \"es\" });\n     await expect(prom).rejects.toHaveProperty(\"message\", \"it fails\");\n   });\n \n   it(\"can handle errors thrown by fetch()\", async () => {\n-    const prom = translate(\"throw\", { to: \"es\", engine: \"yandex\" });\n+    const prom = translate(\"throw\", { to: \"es\" });\n     await expect(prom).rejects.toHaveProperty(\"message\", \"also fails harder\");\n   });\n });\n@@ -46,17 +45,17 @@ describe(\"yandex full requests\", () => {\n   }\n \n   it(\"calls Yandex to translate to Japanese\", async () => {\n-    const opts = { to: \"ja\", engine: \"yandex\" };\n+    const opts = { to: \"ja\" };\n     expect(await translate(\"Hello world\", opts)).toBe(\"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\");\n   });\n \n   it(\"calls Yandex to translate to Spanish\", async () => {\n-    const opts = { to: \"es\", engine: \"yandex\" };\n+    const opts = { to: \"es\" };\n     expect(await translate(\"Hello world\", opts)).toBe(\"Hola mundo\");\n   });\n \n   it(\"requires a valid key\", async () => {\n-    const opts = { to: \"ru\", engine: \"yandex\", key: \"abc\" };\n+    const opts = { to: \"ru\", key: \"abc\" };\n     await expect(translate(\"Hello world\", opts)).rejects.toThrow();\n   });\n });"
        },
        {
          "filename": "src/index.js",
          "status": "modified",
          "additions": 17,
          "deletions": 14,
          "patch": "@@ -1,13 +1,11 @@\n // translate.js\n // Translate text into different languages;\n \n-// Load a language parser to allow for more flexibility in the language choice\n-import languages from \"./languages/index.js\";\n-\n // Cache the different translations to avoid resending requests\n import cache from \"./cache.js\";\n-\n import engines from \"./engines/index.js\";\n+// Load a language parser to allow for more flexibility in the language choice\n+import languages from \"./languages/index.js\";\n \n // Main function\n const Translate = function (options = {}) {\n@@ -19,35 +17,40 @@ const Translate = function (options = {}) {\n     from: \"en\",\n     to: \"en\",\n     cache: undefined,\n+    engine: \"google\",\n+    key: undefined,\n+    url: undefined,\n     languages: languages,\n     engines: engines,\n-    engine: \"google\",\n     keys: {},\n   };\n \n   const translate = async (text, opts = {}) => {\n     // Load all of the appropriate options (verbose but fast)\n     // Note: not all of those *should* be documented since some are internal only\n     if (typeof opts === \"string\") opts = { to: opts };\n+    const invalidKey = Object.keys(opts).find(\n+      (k) => k !== \"from\" && k !== \"to\"\n+    );\n+    if (invalidKey) {\n+      throw new Error(`Invalid option with the name '${invalidKey}'`);\n+    }\n     opts.text = text;\n     opts.from = languages(opts.from || translate.from);\n     opts.to = languages(opts.to || translate.to);\n-    opts.cache = opts.cache || translate.cache;\n-    opts.engines = opts.engines || {};\n-    opts.engine = opts.engine || translate.engine;\n-    opts.url = opts.url || translate.url;\n-    opts.id =\n-      opts.id ||\n-      `${opts.url}:${opts.from}:${opts.to}:${opts.engine}:${opts.text}`;\n-    opts.keys = opts.keys || translate.keys || {};\n+    opts.cache = translate.cache;\n+    opts.engine = translate.engine;\n+    opts.url = translate.url;\n+    opts.id = `${opts.url}:${opts.from}:${opts.to}:${opts.engine}:${opts.text}`;\n+    opts.keys = translate.keys || {};\n     for (let name in translate.keys) {\n       // The options has stronger preference than the global value\n       opts.keys[name] = opts.keys[name] || translate.keys[name];\n     }\n     opts.key = opts.key || translate.key || opts.keys[opts.engine];\n \n     // Use the desired engine\n-    const engine = opts.engines[opts.engine] || translate.engines[opts.engine];\n+    const engine = translate.engines[opts.engine];\n \n     // If it is cached return ASAP\n     const cached = cache.get(opts.id);"
        },
        {
          "filename": "src/translate.test.js",
          "status": "modified",
          "additions": 23,
          "deletions": 13,
          "patch": "@@ -1,8 +1,10 @@\n import \"dotenv/config\";\n-import translate from \"./\";\n-import mock from \"../test/mock\";\n+\n import fs from \"fs\";\n \n+import mock from \"../test/mock\";\n+import translate from \"./\";\n+\n describe(\"translate.js\", () => {\n   afterEach(() => mock.end());\n \n@@ -47,12 +49,17 @@ describe(\"translate.js\", () => {\n     expect(jp).toBe(\"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\");\n   });\n \n-  it(\"requires the key\", async () => {\n+  it(\"does not accept other keys\", async () => {\n     await expect(() =>\n-      translate(\"hello\", { engine: \"yandex\", key: false, to: \"es\" })\n-    ).rejects.toMatchObject({\n-      message: 'The engine \"yandex\" needs a key, please provide it',\n-    });\n+      translate(\"hello\", { to: \"es\", blabla: \"blu\" })\n+    ).rejects.toThrow(\"Invalid option with the name 'blabla'\");\n+  });\n+\n+  it(\"requires the key\", async () => {\n+    const yandex = translate.Translate({ engine: \"yandex\", key: false });\n+    await expect(() => yandex(\"hello\", \"es\")).rejects.toThrow(\n+      'The engine \"yandex\" needs a key, please provide it'\n+    );\n   });\n });\n \n@@ -72,11 +79,14 @@ describe(\"Independent\", () => {\n     expect(inst.from).toBe(\"en\");\n   });\n \n-  it.skip(\"fixed the bug #5\", async () => {\n-    // translate.keys = { google: 'abc' };\n-    const options = { to: \"ja\", keys: { yandex: \"def\" }, engine: \"google\" };\n-\n-    // This will wrongly ignore the key for \"google\"\n-    expect(await translate(\"Hello world\", options)).toBe(\"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\");\n+  it(\"cannot poison the cache\", async () => {\n+    const options = {\n+      id: \"undefined:en:nl:google:I love you\",\n+      from: \"en\",\n+      to: \"ja\",\n+    };\n+    await expect(() => translate(\"hello\", options)).rejects.toThrow(\n+      \"Invalid option with the name 'id'\"\n+    );\n   });\n });"
        },
        {
          "filename": "test/index.types.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-import translate from \"../\";\n+import translate from \"..\";\n \n // Don't even need to run it to test the types!\n async function tests() {"
        },
        {
          "filename": "test/mock.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,7 +23,7 @@ mock.libre = (content, opts) => {\n };\n \n mock.yandex = (content, opts) => {\n-  mock(/yandex.*&lang=[a-z]*\\-es/, { code: 200, text: [content] }, opts);\n+  mock(/yandex.*&lang=[a-z]*-es/, { code: 200, text: [content] }, opts);\n };\n \n mock.end = () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 7,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "215d7782a8f689644513c23355d60ea0c55d86a4",
            "date": "2024-09-13T16:42:29Z",
            "author_login": "franciscop"
          },
          {
            "sha": "d8018d5ceb11830219696211043e3316e64d32f8",
            "date": "2024-09-13T16:42:17Z",
            "author_login": "franciscop"
          },
          {
            "sha": "45bd246ce5879df61473cbf5716aacf96d5d7058",
            "date": "2024-09-13T16:36:05Z",
            "author_login": "MissGwen"
          },
          {
            "sha": "794b8d9c546e225f6e0d6d9f2c5531ed697439c4",
            "date": "2024-03-21T03:28:45Z",
            "author_login": "franciscop"
          },
          {
            "sha": "d50fd8ebee3067071ba75a05c04281af5a94e21e",
            "date": "2024-03-21T03:27:49Z",
            "author_login": "franciscop"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-20",
    "description": "Translate is a package that allows users to convert text to different languages on Node.js and the browser. Prior to version 3.0.0, an attacker controlling the second variable of the `translate` function is able to perform a cache poisoning attack. They can change the outcome of translation requests made by subsequent users. The `opt.id` parameter allows the overwriting of the cache key. If an attacker sets the `id` variable to the cache key that would be generated by another user, they can choose the response that user gets served. Version 3.0.0 fixes this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-22T17:15:07.990",
    "last_modified": "2024-11-21T09:07:26.187",
    "fix_date": "2024-03-21T02:45:03Z"
  },
  "references": [
    {
      "url": "https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.892248",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "translate",
    "owner": "franciscop",
    "created_at": "2018-01-11T11:56:25Z",
    "updated_at": "2025-01-07T13:18:22Z",
    "pushed_at": "2024-09-13T16:42:33Z",
    "size": 589,
    "stars": 292,
    "forks": 45,
    "open_issues": 1,
    "watchers": 292,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 29022,
      "TypeScript": 2182
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:40:40.768030"
  }
}