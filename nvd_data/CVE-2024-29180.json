{
  "cve_id": "CVE-2024-29180",
  "github_data": {
    "repository": "webpack/webpack-dev-middleware",
    "fix_commit": "189c4ac7d2344ec132a4689e74dc837ec5be0132",
    "related_commits": [
      "189c4ac7d2344ec132a4689e74dc837ec5be0132",
      "9670b3495da518fe667ff3428c5e4cb9f2f3d353",
      "e10008c762e4d5821ed6990348dabf0d4d93a10e",
      "189c4ac7d2344ec132a4689e74dc837ec5be0132",
      "9670b3495da518fe667ff3428c5e4cb9f2f3d353",
      "e10008c762e4d5821ed6990348dabf0d4d93a10e"
    ],
    "patch_url": "https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132.patch",
    "fix_commit_details": {
      "sha": "189c4ac7d2344ec132a4689e74dc837ec5be0132",
      "commit_date": "2024-03-20T15:15:45Z",
      "author": {
        "login": "alexander-akait",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(security): do not allow to read files above (#1779)",
        "length": 55,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 251,
        "additions": 225,
        "deletions": 26
      },
      "files": [
        {
          "filename": "src/middleware.js",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -11,6 +11,7 @@ const {\n   setHeaderForResponse,\n   setStatusCode,\n   send,\n+  sendError,\n } = require(\"./utils/compatibleAPI\");\n const ready = require(\"./utils/ready\");\n \n@@ -95,9 +96,12 @@ function wrapper(context) {\n     }\n \n     async function processRequest() {\n+      /** @type {import(\"./utils/getFilenameFromUrl\").Extra} */\n+      const extra = {};\n       const filename = getFilenameFromUrl(\n         context,\n-        /** @type {string} */ (req.url)\n+        /** @type {string} */ (req.url),\n+        extra\n       );\n \n       if (!filename) {\n@@ -106,6 +110,16 @@ function wrapper(context) {\n         return;\n       }\n \n+      if (extra.errorCode) {\n+        if (extra.errorCode === 403) {\n+          context.logger.error(`Malicious path \"${filename}\".`);\n+        }\n+\n+        sendError(req, res, extra.errorCode);\n+\n+        return;\n+      }\n+\n       let { headers } = context.options;\n \n       if (typeof headers === \"function\") {"
        },
        {
          "filename": "src/utils/compatibleAPI.js",
          "status": "modified",
          "additions": 116,
          "deletions": 0,
          "patch": "@@ -155,11 +155,127 @@ function send(req, res, bufferOtStream, byteLength) {\n   }\n }\n \n+/**\n+ * @template {ServerResponse} Response\n+ * @param {Response} res\n+ */\n+function clearHeadersForResponse(res) {\n+  const headers = getHeaderNames(res);\n+\n+  for (let i = 0; i < headers.length; i++) {\n+    res.removeHeader(headers[i]);\n+  }\n+}\n+\n+const matchHtmlRegExp = /[\"'&<>]/;\n+\n+/**\n+ * @param {string} string raw HTML\n+ * @returns {string} escaped HTML\n+ */\n+function escapeHtml(string) {\n+  const str = `${string}`;\n+  const match = matchHtmlRegExp.exec(str);\n+\n+  if (!match) {\n+    return str;\n+  }\n+\n+  let escape;\n+  let html = \"\";\n+  let index = 0;\n+  let lastIndex = 0;\n+\n+  for ({ index } = match; index < str.length; index++) {\n+    switch (str.charCodeAt(index)) {\n+      // \"\n+      case 34:\n+        escape = \"&quot;\";\n+        break;\n+      // &\n+      case 38:\n+        escape = \"&amp;\";\n+        break;\n+      // '\n+      case 39:\n+        escape = \"&#39;\";\n+        break;\n+      // <\n+      case 60:\n+        escape = \"&lt;\";\n+        break;\n+      // >\n+      case 62:\n+        escape = \"&gt;\";\n+        break;\n+      default:\n+        // eslint-disable-next-line no-continue\n+        continue;\n+    }\n+\n+    if (lastIndex !== index) {\n+      html += str.substring(lastIndex, index);\n+    }\n+\n+    lastIndex = index + 1;\n+    html += escape;\n+  }\n+\n+  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n+}\n+\n+/** @type {Record<number, string>} */\n+const statuses = {\n+  400: \"Bad Request\",\n+  403: \"Forbidden\",\n+  404: \"Not Found\",\n+  416: \"Range Not Satisfiable\",\n+  500: \"Internal Server Error\",\n+};\n+\n+/**\n+ * @template {IncomingMessage} Request\n+ * @template {ServerResponse} Response\n+ * @param {Request} req response\n+ * @param {Response} res response\n+ * @param {number} status status\n+ * @returns {void}\n+ */\n+function sendError(req, res, status) {\n+  const content = statuses[status] || String(status);\n+  const document = `<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+<meta charset=\"utf-8\">\n+<title>Error</title>\n+</head>\n+<body>\n+<pre>${escapeHtml(content)}</pre>\n+</body>\n+</html>`;\n+\n+  // Clear existing headers\n+  clearHeadersForResponse(res);\n+\n+  // Send basic response\n+  setStatusCode(res, status);\n+  setHeaderForResponse(res, \"Content-Type\", \"text/html; charset=utf-8\");\n+  setHeaderForResponse(res, \"Content-Security-Policy\", \"default-src 'none'\");\n+  setHeaderForResponse(res, \"X-Content-Type-Options\", \"nosniff\");\n+\n+  const byteLength = Buffer.byteLength(document);\n+\n+  setHeaderForResponse(res, \"Content-Length\", byteLength);\n+\n+  res.end(document);\n+}\n+\n module.exports = {\n   getHeaderNames,\n   getHeaderFromRequest,\n   getHeaderFromResponse,\n   setHeaderForResponse,\n   setStatusCode,\n   send,\n+  sendError,\n };"
        },
        {
          "filename": "src/utils/getFilenameFromUrl.js",
          "status": "modified",
          "additions": 74,
          "deletions": 23,
          "patch": "@@ -10,11 +10,14 @@ const getPaths = require(\"./getPaths\");\n const cacheStore = new WeakMap();\n \n /**\n+ * @template T\n  * @param {Function} fn\n- * @param {{ cache?: Map<any, any> }} [cache]\n+ * @param {{ cache?: Map<string, { data: T }> } | undefined} cache\n+ * @param {(value: T) => T} callback\n  * @returns {any}\n  */\n-const mem = (fn, { cache = new Map() } = {}) => {\n+// @ts-ignore\n+const mem = (fn, { cache = new Map() } = {}, callback) => {\n   /**\n    * @param {any} arguments_\n    * @return {any}\n@@ -27,7 +30,8 @@ const mem = (fn, { cache = new Map() } = {}) => {\n       return cacheItem.data;\n     }\n \n-    const result = fn.apply(this, arguments_);\n+    let result = fn.apply(this, arguments_);\n+    result = callback(result);\n \n     cache.set(key, {\n       data: result,\n@@ -40,20 +44,52 @@ const mem = (fn, { cache = new Map() } = {}) => {\n \n   return memoized;\n };\n-const memoizedParse = mem(parse);\n+// eslint-disable-next-line no-undefined\n+const memoizedParse = mem(parse, undefined, (value) => {\n+  if (value.pathname) {\n+    // eslint-disable-next-line no-param-reassign\n+    value.pathname = decode(value.pathname);\n+  }\n+\n+  return value;\n+});\n+\n+const UP_PATH_REGEXP = /(?:^|[\\\\/])\\.\\.(?:[\\\\/]|$)/;\n+\n+/**\n+ * @typedef {Object} Extra\n+ * @property {import(\"fs\").Stats=} stats\n+ * @property {number=} errorCode\n+ */\n+\n+/**\n+ * decodeURIComponent.\n+ *\n+ * Allows V8 to only deoptimize this fn instead of all of send().\n+ *\n+ * @param {string} input\n+ * @returns {string}\n+ */\n+\n+function decode(input) {\n+  return querystring.unescape(input);\n+}\n \n /**\n  * @template {IncomingMessage} Request\n  * @template {ServerResponse} Response\n  * @param {import(\"../index.js\").Context<Request, Response>} context\n  * @param {string} url\n+ * @param {Extra=} extra\n  * @returns {string | undefined}\n  */\n-function getFilenameFromUrl(context, url) {\n+function getFilenameFromUrl(context, url, extra = {}) {\n   const { options } = context;\n   const paths = getPaths(context);\n \n+  /** @type {string | undefined} */\n   let foundFilename;\n+  /** @type {URL} */\n   let urlObject;\n \n   try {\n@@ -64,7 +100,9 @@ function getFilenameFromUrl(context, url) {\n   }\n \n   for (const { publicPath, outputPath } of paths) {\n+    /** @type {string | undefined} */\n     let filename;\n+    /** @type {URL} */\n     let publicPathObject;\n \n     try {\n@@ -78,39 +116,51 @@ function getFilenameFromUrl(context, url) {\n       continue;\n     }\n \n-    if (\n-      urlObject.pathname &&\n-      urlObject.pathname.startsWith(publicPathObject.pathname)\n-    ) {\n-      filename = outputPath;\n+    const { pathname } = urlObject;\n+    const { pathname: publicPathPathname } = publicPathObject;\n \n-      // Strip the `pathname` property from the `publicPath` option from the start of requested url\n-      // `/complex/foo.js` => `foo.js`\n-      const pathname = urlObject.pathname.slice(\n-        publicPathObject.pathname.length\n-      );\n+    if (pathname && pathname.startsWith(publicPathPathname)) {\n+      // Null byte(s)\n+      if (pathname.includes(\"\\0\")) {\n+        // eslint-disable-next-line no-param-reassign\n+        extra.errorCode = 400;\n+\n+        return;\n+      }\n+\n+      // \"..\" is malicious\n+      if (UP_PATH_REGEXP.test(path.normalize(`./${pathname}`))) {\n+        // eslint-disable-next-line no-param-reassign\n+        extra.errorCode = 403;\n \n-      if (pathname) {\n-        filename = path.join(outputPath, querystring.unescape(pathname));\n+        return;\n       }\n \n-      let fsStats;\n+      // Strip the `pathname` property from the `publicPath` option from the start of requested url\n+      // `/complex/foo.js` => `foo.js`\n+      // and add outputPath\n+      // `foo.js` => `/home/user/my-project/dist/foo.js`\n+      filename = path.join(\n+        outputPath,\n+        pathname.slice(publicPathPathname.length)\n+      );\n \n       try {\n-        fsStats =\n+        // eslint-disable-next-line no-param-reassign\n+        extra.stats =\n           /** @type {import(\"fs\").statSync} */\n           (context.outputFileSystem.statSync)(filename);\n       } catch (_ignoreError) {\n         // eslint-disable-next-line no-continue\n         continue;\n       }\n \n-      if (fsStats.isFile()) {\n+      if (extra.stats.isFile()) {\n         foundFilename = filename;\n \n         break;\n       } else if (\n-        fsStats.isDirectory() &&\n+        extra.stats.isDirectory() &&\n         (typeof options.index === \"undefined\" || options.index)\n       ) {\n         const indexValue =\n@@ -122,15 +172,16 @@ function getFilenameFromUrl(context, url) {\n         filename = path.join(filename, indexValue);\n \n         try {\n-          fsStats =\n+          // eslint-disable-next-line no-param-reassign\n+          extra.stats =\n             /** @type {import(\"fs\").statSync} */\n             (context.outputFileSystem.statSync)(filename);\n         } catch (__ignoreError) {\n           // eslint-disable-next-line no-continue\n           continue;\n         }\n \n-        if (fsStats.isFile()) {\n+        if (extra.stats.isFile()) {\n           foundFilename = filename;\n \n           break;"
        },
        {
          "filename": "types/utils/compatibleAPI.d.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -84,3 +84,15 @@ export function send<\n   bufferOtStream: string | Buffer | import(\"fs\").ReadStream,\n   byteLength: number\n ): void;\n+/**\n+ * @template {IncomingMessage} Request\n+ * @template {ServerResponse} Response\n+ * @param {Request} req response\n+ * @param {Response} res response\n+ * @param {number} status status\n+ * @returns {void}\n+ */\n+export function sendError<\n+  Request_1 extends import(\"http\").IncomingMessage,\n+  Response_1 extends import(\"../index.js\").ServerResponse\n+>(req: Request_1, res: Response_1, status: number): void;"
        },
        {
          "filename": "types/utils/getFilenameFromUrl.d.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -5,17 +5,23 @@ export = getFilenameFromUrl;\n  * @template {ServerResponse} Response\n  * @param {import(\"../index.js\").Context<Request, Response>} context\n  * @param {string} url\n+ * @param {Extra=} extra\n  * @returns {string | undefined}\n  */\n declare function getFilenameFromUrl<\n   Request_1 extends import(\"http\").IncomingMessage,\n   Response_1 extends import(\"../index.js\").ServerResponse\n >(\n   context: import(\"../index.js\").Context<Request_1, Response_1>,\n-  url: string\n+  url: string,\n+  extra?: Extra | undefined\n ): string | undefined;\n declare namespace getFilenameFromUrl {\n-  export { IncomingMessage, ServerResponse };\n+  export { Extra, IncomingMessage, ServerResponse };\n }\n+type Extra = {\n+  stats?: import(\"fs\").Stats | undefined;\n+  errorCode?: number | undefined;\n+};\n type IncomingMessage = import(\"../index.js\").IncomingMessage;\n type ServerResponse = import(\"../index.js\").ServerResponse;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6cbadcff8199177e12ff73dfbf81f253f31ffac7",
            "date": "2024-12-13T13:05:57Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "7d2c5ce223de49a67209a1cd6a433944c0fc604f",
            "date": "2024-12-11T12:17:04Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3854e1c12a67dcb2ed34d8dfbbcbae3a639ac161",
            "date": "2024-12-05T14:04:42Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "49e6b14daaa870a260a0fdcf838dc968c0c64cea",
            "date": "2024-12-04T09:09:35Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5f28e905caa6fb56a97ea81a83ae9667dde5334e",
            "date": "2024-12-03T11:13:04Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Prior to versions 7.1.0, 6.1.2, and 5.3.4, the webpack-dev-middleware development middleware for devpack does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine. The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory `memfs` filesystem. If `writeToDisk` configuration option is set to `true`, the physical filesystem is used. The `getFilenameFromUrl` method is used to parse URL and build the local file path. The public path prefix is stripped from the URL, and the `unsecaped` path suffix is appended to the `outputPath`. As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use `%2e` and `%2f` sequences to perform path traversal attack.\n\nDevelopers using `webpack-dev-server` or `webpack-dev-middleware` are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content. If the development server is listening on a public IP address (or `0.0.0.0`), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port). If the server allows access from third-party domains, an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files. Starting with fixed versions 7.1.0, 6.1.2, and 5.3.4, the URL is unescaped and normalized before any further processing.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-21T17:15:09.690",
    "last_modified": "2024-11-21T09:07:44.450",
    "fix_date": "2024-03-20T15:15:45Z"
  },
  "references": [
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.884893",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "webpack-dev-middleware",
    "owner": "webpack",
    "created_at": "2012-08-08T20:20:33Z",
    "updated_at": "2025-01-10T20:53:56Z",
    "pushed_at": "2025-01-14T03:56:42Z",
    "size": 13112,
    "stars": 2500,
    "forks": 377,
    "open_issues": 9,
    "watchers": 2500,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "JavaScript": 323288
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:02:33.167276"
  }
}