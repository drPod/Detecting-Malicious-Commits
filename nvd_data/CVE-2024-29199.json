{
  "cve_id": "CVE-2024-29199",
  "github_data": {
    "repository": "nautobot/nautobot",
    "fix_commit": "2fd95c365f8477b26e06d60b999ddd36882d5750",
    "related_commits": [
      "2fd95c365f8477b26e06d60b999ddd36882d5750",
      "dd623e6c3307f48b6357fcc91925bcad5192abfb",
      "2fd95c365f8477b26e06d60b999ddd36882d5750",
      "dd623e6c3307f48b6357fcc91925bcad5192abfb"
    ],
    "patch_url": "https://github.com/nautobot/nautobot/commit/2fd95c365f8477b26e06d60b999ddd36882d5750.patch",
    "fix_commit_details": {
      "sha": "2fd95c365f8477b26e06d60b999ddd36882d5750",
      "commit_date": "2024-03-25T19:12:27Z",
      "author": {
        "login": "glennmatthews",
        "type": "User",
        "stats": {
          "total_commits": 1756,
          "average_weekly_commits": 4.491048593350383,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 206
        }
      },
      "commit_message": {
        "title": "[LTM] View authentication and permission fixes (#5465)",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 743,
        "additions": 517,
        "deletions": 226
      },
      "files": [
        {
          "filename": "changes/5465.added",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+Added `nautobot.apps.utils.get_url_for_url_pattern` and `nautobot.apps.utils.get_url_patterns` lookup functions.\n+Added `nautobot.apps.views.GenericView` base class."
        },
        {
          "filename": "changes/5465.changed",
          "status": "added",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -0,0 +1,3 @@\n+Added support for `view_name` and `view_description` optional parameters when instantiating a `nautobot.apps.api.OrderedDefaultRouter`. Specifying these parameters is to be preferred over defining a custom `APIRootView` subclass when defining App API URLs.\n+Added requirement for user authentication by default on the `nautobot.core.api.AuthenticatedAPIRootView` class. As a consequence, viewing the browsable REST API root endpoints (e.g. `/api/`, `/api/circuits/`, `/api/dcim/`, etc.) now requires user authentication.\n+Added requirement for user authentication to access `/api/docs/` and `/graphql/` even when `HIDE_RESTRICTED_UI` is False."
        },
        {
          "filename": "changes/5465.documentation",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Updated example views in the App developer documentation to include `ObjectPermissionRequiredMixin` or `LoginRequiredMixin` as appropriate best practices."
        },
        {
          "filename": "changes/5465.fixed",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Fixed a 500 error when accessing any of the `/dcim/<port-type>/<uuid>/connect/<termination_b_type>/` view endpoints with an invalid/nonexistent `termination_b_type` string."
        },
        {
          "filename": "changes/5465.housekeeping",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Updated custom views in the `example_plugin` to use the new `GenericView` base class as a best practice."
        },
        {
          "filename": "changes/5465.security",
          "status": "added",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -0,0 +1,8 @@\n+Added requirement for user authentication to access the endpoint `/extras/job-results/<uuid:pk>/log-table/`; furthermore it will not allow an authenticated user to view log entries for a JobResult they don't otherwise have permission to view. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))\n+Added narrower permissions enforcement on the endpoints `/extras/git-repositories/<str:slug>/sync/` and `/extras/git-repositories/<str:slug>/dry-run/`; a user who has `change` permissions for a subset of Git repositories is no longer permitted to sync or dry-run other repositories for which they lack the appropriate permissions. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))\n+Added narrower permissions enforcement on the `/api/dcim/connected-device/?peer_device=...&?peer_interface=...` REST API endpoint; a user who has `view` permissions for a subset of interfaces is no longer permitted to query other interfaces for which they lack permissions. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))\n+Added narrower permissions enforcement on all `<app>/<model>/<lookup>/notes/` UI endpoints; a user must now have the appropriate `extras.view_note` permissions to view existing notes. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))\n+Added requirement for user authentication to access the REST API endpoints `/api/redoc/`, `/api/swagger/`, `/api/swagger.json`, and `/api/swagger.yaml`. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))\n+Added requirement for user authentication to access the `/api/graphql` REST API endpoint, even when `EXEMPT_VIEW_PERMISSIONS` is configured. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))\n+Added requirement for user authentication to access the endpoints `/dcim/racks/<uuid>/dynamic-groups/`, `/dcim/devices/<uuid>/dynamic-groups/`, `/ipam/prefixes/<uuid>/dynamic-groups/`, `/ipam/ip-addresses/<uuid>/dynamic-groups/`, `/virtualization/clusters/<uuid>/dynamic-groups/`, and `/virtualization/virtual-machines/<uuid>/dynamic-groups/`, even when `EXEMPT_VIEW_PERMISSIONS` is configured. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))\n+Added requirement for user authentication to access the endpoint `/extras/secrets/provider/<str:provider_slug>/form/`. ([GHSA-m732-wvh2-7cq4](https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4))"
        },
        {
          "filename": "examples/example_plugin/example_plugin/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n from example_plugin.api.views import AnotherExampleModelViewSet, ExampleModelViewSet, ExampleModelWebhook\n \n \n-router = OrderedDefaultRouter()\n+router = OrderedDefaultRouter(view_name=\"Example App\")\n router.register(\"models\", ExampleModelViewSet)\n router.register(\"other-models\", AnotherExampleModelViewSet)\n "
        },
        {
          "filename": "examples/example_plugin/example_plugin/views.py",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -1,5 +1,4 @@\n from django.shortcuts import HttpResponse, render\n-from django.views.generic import View\n \n from nautobot.apps import views\n from nautobot.circuits.models import Circuit\n@@ -45,12 +44,12 @@ class DeviceDetailPluginTabTwoView(views.ObjectView):\n     template_name = \"example_plugin/tab_device_detail_2.html\"\n \n \n-class ExamplePluginHomeView(View):\n+class ExamplePluginHomeView(views.GenericView):\n     def get(self, request):\n         return render(request, \"example_plugin/home.html\")\n \n \n-class ExamplePluginConfigView(View):\n+class ExamplePluginConfigView(views.GenericView):\n     def get(self, request):\n         \"\"\"Render the configuration page for this plugin.\n \n@@ -103,6 +102,6 @@ class AnotherExampleModelUIViewSet(\n     table_class = tables.AnotherExampleModelTable\n \n \n-class ViewToBeOverridden(View):\n+class ViewToBeOverridden(views.GenericView):\n     def get(self, request, *args, **kwargs):\n         return HttpResponse(\"I am a view in the example plugin which will be overridden by another plugin.\")"
        },
        {
          "filename": "examples/example_plugin_with_view_override/example_plugin_with_view_override/views.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1,10 +1,11 @@\n \"\"\"Views for plugin_with_view_override.\"\"\"\n \n from django.shortcuts import HttpResponse\n-from django.views import generic\n \n+from nautobot.apps.views import GenericView\n \n-class ViewOverride(generic.View):\n+\n+class ViewOverride(GenericView):\n     def get(self, request, *args, **kwargs):\n         return HttpResponse(\"Hello world! I'm an overridden view.\")\n "
        },
        {
          "filename": "mkdocs.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -297,6 +297,7 @@ nav:\n           - nautobot.apps.testing: \"code-reference/nautobot/apps/testing.md\"\n           - nautobot.apps.ui: \"code-reference/nautobot/apps/ui.md\"\n           - nautobot.apps.urls: \"code-reference/nautobot/apps/urls.md\"\n+          - nautobot.apps.utils: \"code-reference/nautobot/apps/utils.md\"\n           - nautobot.apps.views: \"code-reference/nautobot/apps/views.md\"\n   - Core Developer Guide:\n       - Introduction: \"development/index.md\""
        },
        {
          "filename": "nautobot/apps/utils.py",
          "status": "added",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -0,0 +1,11 @@\n+\"\"\"Nautobot utility functions.\"\"\"\n+\n+from nautobot.utilities.utils import (\n+    get_url_for_url_pattern,\n+    get_url_patterns,\n+)\n+\n+__all__ = (\n+    \"get_url_for_url_pattern\",\n+    \"get_url_patterns\",\n+)"
        },
        {
          "filename": "nautobot/apps/views.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n \"\"\"Utilities for apps to implement UI views.\"\"\"\n \n-from nautobot.core.views.generic import ObjectView\n+from nautobot.core.views.generic import GenericView, ObjectView\n from nautobot.core.views.mixins import (\n     ObjectBulkCreateViewMixin,\n     ObjectBulkDestroyViewMixin,\n@@ -15,6 +15,7 @@\n from nautobot.core.views.viewsets import NautobotUIViewSet\n \n __all__ = (\n+    \"GenericView\",\n     \"NautobotUIViewSet\",\n     \"ObjectBulkCreateViewMixin\",\n     \"ObjectBulkDestroyViewMixin\","
        },
        {
          "filename": "nautobot/circuits/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,8 +2,7 @@\n from . import views\n \n \n-router = OrderedDefaultRouter()\n-router.APIRootView = views.CircuitsRootView\n+router = OrderedDefaultRouter(view_name=\"Circuits\")\n \n # Providers\n router.register(\"providers\", views.ProviderViewSet)"
        },
        {
          "filename": "nautobot/circuits/api/views.py",
          "status": "modified",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -1,22 +1,10 @@\n-from rest_framework.routers import APIRootView\n-\n from nautobot.circuits import filters\n from nautobot.circuits.models import Provider, CircuitTermination, CircuitType, Circuit, ProviderNetwork\n from nautobot.dcim.api.views import PathEndpointMixin\n from nautobot.extras.api.views import NautobotModelViewSet, StatusViewSetMixin\n from nautobot.utilities.utils import count_related\n from . import serializers\n \n-\n-class CircuitsRootView(APIRootView):\n-    \"\"\"\n-    Circuits API root view\n-    \"\"\"\n-\n-    def get_view_name(self):\n-        return \"Circuits\"\n-\n-\n #\n # Providers\n #"
        },
        {
          "filename": "nautobot/core/api/routers.py",
          "status": "modified",
          "additions": 35,
          "deletions": 2,
          "patch": "@@ -1,12 +1,34 @@\n from collections import OrderedDict\n+import logging\n \n-from rest_framework.routers import DefaultRouter\n+from rest_framework.permissions import IsAuthenticated\n+from rest_framework.routers import APIRootView, DefaultRouter\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+class AuthenticatedAPIRootView(APIRootView):\n+    \"\"\"\n+    Extends DRF's base APIRootView class to enforce user authentication.\n+    \"\"\"\n+\n+    permission_classes = [IsAuthenticated]\n+\n+    name = None\n+    description = None\n \n \n class OrderedDefaultRouter(DefaultRouter):\n-    def __init__(self, *args, **kwargs):\n+    APIRootView = AuthenticatedAPIRootView\n+\n+    def __init__(self, *args, view_name=None, view_description=None, **kwargs):\n         super().__init__(*args, **kwargs)\n \n+        self.view_name = view_name\n+        if view_name and not view_description:\n+            view_description = f\"{view_name} API root view\"\n+        self.view_description = view_description\n+\n         # Extend the list view mappings to support the DELETE operation\n         self.routes[0].mapping.update(\n             {\n@@ -22,7 +44,18 @@ def get_api_root_view(self, api_urls=None):\n         \"\"\"\n         api_root_dict = OrderedDict()\n         list_name = self.routes[0].name\n+\n         for prefix, _viewset, basename in sorted(self.registry, key=lambda x: x[0]):\n             api_root_dict[prefix] = list_name.format(basename=basename)\n \n+        if issubclass(self.APIRootView, AuthenticatedAPIRootView):\n+            return self.APIRootView.as_view(\n+                api_root_dict=api_root_dict, name=self.view_name, description=self.view_description\n+            )\n+        # Fallback for the established practice of overriding self.APIRootView with a custom class\n+        logger.warning(\n+            \"Something has changed an OrderedDefaultRouter's APIRootView attribute to a custom class. \"\n+            \"Please verify that class %s implements appropriate authentication controls.\",\n+            self.APIRootView.__name__,\n+        )\n         return self.APIRootView.as_view(api_root_dict=api_root_dict)"
        },
        {
          "filename": "nautobot/core/api/views.py",
          "status": "modified",
          "additions": 12,
          "deletions": 17,
          "patch": "@@ -17,7 +17,7 @@\n from rest_framework.views import APIView\n from rest_framework.viewsets import ModelViewSet as ModelViewSet_\n from rest_framework.viewsets import ReadOnlyModelViewSet as ReadOnlyModelViewSet_\n-from rest_framework.permissions import AllowAny, IsAuthenticated\n+from rest_framework.permissions import IsAuthenticated\n from rest_framework.exceptions import PermissionDenied, ParseError\n from drf_spectacular.plumbing import get_relative_url, set_query_parameters\n from drf_spectacular.renderers import OpenApiJsonRenderer\n@@ -35,8 +35,8 @@\n from nautobot.core.celery import app as celery_app\n from nautobot.core.api import BulkOperationSerializer\n from nautobot.core.api.exceptions import SerializerNotFound\n+from nautobot.core.api.routers import AuthenticatedAPIRootView\n from nautobot.utilities.api import get_serializer_for_model\n-from nautobot.utilities.config import get_settings_or_config\n from nautobot.utilities.utils import (\n     get_all_lookup_expr_for_field,\n     get_filterset_parameter_form_field,\n@@ -323,18 +323,17 @@ class ReadOnlyModelViewSet(NautobotAPIVersionMixin, ModelViewSetMixin, ReadOnlyM\n #\n \n \n-class APIRootView(NautobotAPIVersionMixin, APIView):\n-    \"\"\"\n-    This is the root of the REST API. API endpoints are arranged by app and model name; e.g. `/api/dcim/sites/`.\n+class APIRootView(NautobotAPIVersionMixin, AuthenticatedAPIRootView):\n     \"\"\"\n+    This is the root of the REST API.\n \n-    _ignore_model_permissions = True\n+    API endpoints are arranged by app and model name; e.g. `/api/dcim/locations/`.\n+    \"\"\"\n \n-    def get_view_name(self):\n-        return \"API Root\"\n+    name = \"API Root\"\n \n     @extend_schema(exclude=True)\n-    def get(self, request, format=None):  # pylint: disable=redefined-builtin\n+    def get(self, request, *args, format=None, **kwargs):  # pylint: disable=redefined-builtin\n         return Response(\n             OrderedDict(\n                 (\n@@ -478,11 +477,6 @@ class FakeOpenAPIRenderer(OpenApiJsonRenderer):\n     @extend_schema(exclude=True)\n     def get(self, request, *args, **kwargs):\n         \"\"\"Fix up the rendering of the Swagger UI to work with Nautobot's UI.\"\"\"\n-        if not request.user.is_authenticated and get_settings_or_config(\"HIDE_RESTRICTED_UI\"):\n-            doc_url = reverse(\"api_docs\")\n-            login_url = reverse(settings.LOGIN_URL)\n-            return redirect(f\"{login_url}?next={doc_url}\")\n-\n         # For backward compatibility wtih drf-yasg, `/api/docs/?format=openapi` is a redirect to the JSON schema.\n         if request.GET.get(\"format\") == \"openapi\":\n             return redirect(\"schema_json\", permanent=True)\n@@ -511,11 +505,12 @@ class NautobotSpectacularRedocView(APIVersioningGetSchemaURLMixin, SpectacularRe\n class GraphQLDRFAPIView(NautobotAPIVersionMixin, APIView):\n     \"\"\"\n     API View for GraphQL to integrate properly with DRF authentication mechanism.\n-    The code is a stripped down version of graphene-django default View\n-    https://github.com/graphql-python/graphene-django/blob/main/graphene_django/views.py#L57\n     \"\"\"\n \n-    permission_classes = [AllowAny]\n+    # The code is a stripped down version of graphene-django default View\n+    # https://github.com/graphql-python/graphene-django/blob/main/graphene_django/views.py#L57\n+\n+    permission_classes = [IsAuthenticated]\n     graphql_schema = None\n     executor = None\n     backend = None"
        },
        {
          "filename": "nautobot/core/settings.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -243,6 +243,7 @@\n     # trim it from all of the individual paths correspondingly.\n     # See also https://github.com/nautobot/nautobot-ansible/pull/135 for an example of why this is desirable.\n     \"SERVERS\": [{\"url\": \"/api\"}],\n+    \"SERVE_PERMISSIONS\": [\"rest_framework.permissions.IsAuthenticated\"],\n     \"SCHEMA_PATH_PREFIX\": \"/api\",\n     \"SCHEMA_PATH_PREFIX_TRIM\": True,\n     # use sidecar - locally packaged UI files, not CDN"
        },
        {
          "filename": "nautobot/core/tests/integration/test_view_authentication.py",
          "status": "added",
          "additions": 72,
          "deletions": 0,
          "patch": "@@ -0,0 +1,72 @@\n+import re\n+\n+from django.test import override_settings, tag\n+\n+from nautobot.utilities.testing import TestCase\n+from nautobot.utilities.utils import get_url_for_url_pattern, get_url_patterns\n+\n+\n+@tag(\"integration\")\n+class AuthenticationEnforcedTestCase(TestCase):\n+    r\"\"\"\n+    Test that all\\* registered views require authentication to access.\n+\n+    \\* with a very small number of known exceptions such as login and logout views.\n+    \"\"\"\n+\n+    @override_settings(HIDE_RESTRICTED_UI=True)\n+    def test_all_views_require_authentication(self):\n+        self.client.logout()\n+        url_patterns = get_url_patterns()\n+\n+        for url_pattern in url_patterns:\n+            with self.subTest(url_pattern=url_pattern):\n+                url = get_url_for_url_pattern(url_pattern)\n+                response = self.client.get(url, follow=True)\n+\n+                if response.status_code == 405:  # Method not allowed\n+                    response = self.client.post(url, follow=True)\n+\n+                # Is a view that *should* be open to unauthenticated users?\n+                if url in [\n+                    \"/admin/login/\",\n+                    \"/api/plugins/example-plugin/webhook/\",\n+                    \"/health/\",\n+                    \"/login/\",\n+                    \"/media-failure/\",\n+                    \"/metrics/\",\n+                ]:\n+                    self.assertHttpStatus(response, 200, msg=url)\n+                elif response.status_code == 200:\n+                    # UI views generally should redirect unauthenticated users to the appropriate login page\n+                    if url.startswith(\"/extras/jobs/results/\"):\n+                        redirect_url = f\"/login/?next={re.sub('jobs/results', 'job-results', url)}\"\n+                    elif url.startswith(\"/admin\"):\n+                        if \"logout\" in url:\n+                            # /admin/logout/ sets next=/admin/ because having login redirect to logout would be silly\n+                            redirect_url = \"/admin/login/?next=/admin/\"\n+                        else:\n+                            redirect_url = f\"/admin/login/?next={url}\"\n+                    else:\n+                        if \"logout\" in url:\n+                            # /logout/ sets next=/ because having login redirect back to logout would be silly\n+                            redirect_url = \"/login/?next=/\"\n+                        else:\n+                            redirect_url = f\"/login/?next={url}\"\n+                    self.assertRedirects(response, redirect_url)\n+                elif response.status_code != 403:\n+                    if any(\n+                        url.startswith(path)\n+                        for path in [\n+                            \"/complete/\",  # social auth\n+                            \"/login/\",  # social auth\n+                            \"/media/\",  # MEDIA_ROOT\n+                            \"/plugins/example-plugin/docs/\",  # STATIC_ROOT\n+                        ]\n+                    ):\n+                        self.assertEqual(response.status_code, 404)\n+                    else:\n+                        self.fail(\n+                            f\"Unexpected {response.status_code} response at {url}: \"\n+                            + response.content.decode(response.charset)\n+                        )"
        },
        {
          "filename": "nautobot/core/tests/test_graphql.py",
          "status": "modified",
          "additions": 2,
          "deletions": 14,
          "patch": "@@ -593,21 +593,9 @@ def test_graphql_api_token_no_group_exempt(self):\n         self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\", \"Rack 2-1\", \"Rack 2-2\"])\n \n     def test_graphql_api_no_token(self):\n-        \"\"\"Validate unauthenticated users are not able to query anything by default.\"\"\"\n+        \"\"\"Validate unauthenticated users are not able to query anything.\"\"\"\n         response = self.client.post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")\n-        self.assertEqual(response.status_code, status.HTTP_200_OK)\n-        self.assertIsInstance(response.data[\"data\"][\"racks\"], list)\n-        names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]\n-        self.assertEqual(names, [])\n-\n-    @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n-    def test_graphql_api_no_token_exempt(self):\n-        \"\"\"Validate unauthenticated users are able to query based on the exempt permissions.\"\"\"\n-        response = self.client.post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")\n-        self.assertEqual(response.status_code, status.HTTP_200_OK)\n-        self.assertIsInstance(response.data[\"data\"][\"racks\"], list)\n-        names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]\n-        self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\", \"Rack 2-1\", \"Rack 2-2\"])\n+        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)\n \n     def test_graphql_api_wrong_token(self):\n         \"\"\"Validate a wrong token return 403.\"\"\""
        },
        {
          "filename": "nautobot/core/tests/test_views.py",
          "status": "modified",
          "additions": 39,
          "deletions": 34,
          "patch": "@@ -294,45 +294,50 @@ def test_sso_login_button_visible(self):\n         sso_login_search_result = self.make_request()\n         self.assertIsNotNone(sso_login_search_result)\n \n-    @override_settings(HIDE_RESTRICTED_UI=True, BANNER_TOP=\"Hello, Banner Top\", BANNER_BOTTOM=\"Hello, Banner Bottom\")\n-    def test_routes_redirect_back_to_login_if_hide_restricted_ui_true(self):\n-        \"\"\"Assert that api docs and graphql redirects to login page if user is unauthenticated and HIDE_RESTRICTED_UI=True.\"\"\"\n+    @override_settings(HIDE_RESTRICTED_UI=True)\n+    def test_graphql_redirects_back_to_login_if_hide_restricted_ui_true(self):\n+        \"\"\"Assert that graphql redirects to login page if user is unauthenticated.\"\"\"\n         self.client.logout()\n         headers = {\"HTTP_ACCEPT\": \"text/html\"}\n-        urls = [reverse(\"api_docs\"), reverse(\"graphql\")]\n-        for url in urls:\n-            response = self.client.get(url, follow=True, **headers)\n-            self.assertHttpStatus(response, 200)\n-            redirect_chain = [(f\"/login/?next={url}\", 302)]\n-            self.assertEqual(response.redirect_chain, redirect_chain)\n-            response_content = response.content.decode(response.charset).replace(\"\\n\", \"\")\n-            # Assert Footer items(`self.footer_elements`), Banner and Banner Top is hidden\n-            for footer_text in self.footer_elements:\n-                self.assertNotIn(footer_text, response_content)\n-            # Only API Docs implements BANNERS\n-            if url == urls[0]:\n-                self.assertNotIn(\"Hello, Banner Top\", response_content)\n-                self.assertNotIn(\"Hello, Banner Bottom\", response_content)\n-\n-    @override_settings(HIDE_RESTRICTED_UI=False, BANNER_TOP=\"Hello, Banner Top\", BANNER_BOTTOM=\"Hello, Banner Bottom\")\n-    def test_routes_no_redirect_back_to_login_if_hide_restricted_ui_false(self):\n-        \"\"\"Assert that api docs and graphql do not redirects to login page if user is unauthenticated and HIDE_RESTRICTED_UI=False.\"\"\"\n+        url = reverse(\"graphql\")\n+        response = self.client.get(url, follow=True, **headers)\n+        self.assertHttpStatus(response, 200)\n+        self.assertRedirects(response, f\"/login/?next={url}\")\n+        response_content = response.content.decode(response.charset).replace(\"\\n\", \"\")\n+        for footer_text in self.footer_elements:\n+            self.assertNotIn(footer_text, response_content)\n+\n+    @override_settings(HIDE_RESTRICTED_UI=False)\n+    def test_routes_redirect_back_to_login_if_hide_restricted_ui_false(self):\n+        \"\"\"Assert that GraphQL redirects to login page if user is unauthenticated and HIDE_RESTRICTED_UI=False.\"\"\"\n         self.client.logout()\n         headers = {\"HTTP_ACCEPT\": \"text/html\"}\n-        urls = [reverse(\"api_docs\"), reverse(\"graphql\")]\n+        url = reverse(\"graphql\")\n+        response = self.client.get(url, follow=True, **headers)\n+        self.assertHttpStatus(response, 200)\n+        self.assertRedirects(response, f\"/login/?next={url}\")\n+        response_content = response.content.decode(response.charset).replace(\"\\n\", \"\")\n+        # Assert Footer items(`self.footer_elements`), Banner and Banner Top is not hidden\n+        for footer_text in self.footer_elements:\n+            self.assertInHTML(footer_text, response_content)\n+\n+    def test_api_docs_403_unauthenticated(self):\n+        \"\"\"Assert that api docs return a 403 Forbidden if user is unauthenticated.\"\"\"\n+        self.client.logout()\n+        urls = [\n+            reverse(\"api_docs\"),\n+            reverse(\"api_redocs\"),\n+            reverse(\"schema\"),\n+            reverse(\"schema_json\"),\n+            reverse(\"schema_yaml\"),\n+        ]\n         for url in urls:\n-            response = self.client.get(url, **headers)\n-            self.assertHttpStatus(response, 200)\n-            self.assertEqual(response.request[\"PATH_INFO\"], url)\n-            response_content = response.content.decode(response.charset).replace(\"\\n\", \"\")\n-            # Assert Footer items(`self.footer_elements`), Banner and Banner Top is not hidden\n-            for footer_text in self.footer_elements:\n-                self.assertInHTML(footer_text, response_content)\n-\n-            # Only API Docs implements BANNERS\n-            if url == urls[0]:\n-                self.assertInHTML(\"Hello, Banner Top\", response_content)\n-                self.assertInHTML(\"Hello, Banner Bottom\", response_content)\n+            with override_settings(HIDE_RESTRICTED_UI=True):\n+                response = self.client.get(url)\n+                self.assertHttpStatus(response, 403)\n+            with override_settings(HIDE_RESTRICTED_UI=False):\n+                response = self.client.get(url)\n+                self.assertHttpStatus(response, 403)\n \n \n class MetricsViewTestCase(TestCase):"
        },
        {
          "filename": "nautobot/core/views/__init__.py",
          "status": "modified",
          "additions": 4,
          "deletions": 9,
          "patch": "@@ -7,9 +7,9 @@\n import prometheus_client\n from django.conf import settings\n from django.contrib.auth.decorators import permission_required\n-from django.contrib.auth.mixins import AccessMixin\n+from django.contrib.auth.mixins import AccessMixin, LoginRequiredMixin\n from django.http import HttpResponseServerError, JsonResponse, HttpResponseForbidden, HttpResponse\n-from django.shortcuts import get_object_or_404, redirect, render\n+from django.shortcuts import get_object_or_404, render\n from django.template import loader, RequestContext, Template\n from django.template.exceptions import TemplateDoesNotExist\n from django.urls import reverse\n@@ -168,7 +168,7 @@ def get(self, request):\n         )\n \n \n-class StaticMediaFailureView(View):\n+class StaticMediaFailureView(View):  # NOT using LoginRequiredMixin here as this may happen even on the login page\n     \"\"\"\n     Display a user-friendly error message with troubleshooting tips when a static media file fails to load.\n     \"\"\"\n@@ -226,13 +226,8 @@ def csrf_failure(request, reason=\"\", template_name=\"403_csrf_failure.html\"):\n     return HttpResponseForbidden(t.render(context), content_type=\"text/html\")\n \n \n-class CustomGraphQLView(GraphQLView):\n+class CustomGraphQLView(LoginRequiredMixin, GraphQLView):\n     def render_graphiql(self, request, **data):\n-        if not request.user.is_authenticated and get_settings_or_config(\"HIDE_RESTRICTED_UI\"):\n-            graphql_url = reverse(\"graphql\")\n-            login_url = reverse(settings.LOGIN_URL)\n-            return redirect(f\"{login_url}?next={graphql_url}\")\n-\n         query_slug = request.GET.get(\"slug\")\n         if query_slug:\n             data[\"obj\"] = GraphQLQuery.objects.get(slug=query_slug)"
        },
        {
          "filename": "nautobot/core/views/generic.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n \n from django.conf import settings\n from django.contrib import messages\n+from django.contrib.auth.mixins import LoginRequiredMixin\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import (\n     FieldDoesNotExist,\n@@ -53,6 +54,14 @@\n from nautobot.utilities.views import GetReturnURLMixin, ObjectPermissionRequiredMixin\n \n \n+class GenericView(LoginRequiredMixin, View):\n+    \"\"\"\n+    Base class for non-object-related views.\n+\n+    Enforces authentication, which Django's base View does not by default.\n+    \"\"\"\n+\n+\n class ObjectView(ObjectPermissionRequiredMixin, View):\n     \"\"\"\n     Retrieve a single object for display."
        },
        {
          "filename": "nautobot/core/views/mixins.py",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -94,8 +94,6 @@ def get_permissions_for_model(self, model, actions):\n         \"\"\"\n         permissions = []\n         for action in actions:\n-            if action not in (\"view\", \"add\", \"change\", \"delete\"):\n-                raise ValueError(f\"Unsupported action: {action}\")\n             permissions.append(f\"{model._meta.app_label}.{action}_{model._meta.model_name}\")\n         return permissions\n \n@@ -105,7 +103,7 @@ def get_required_permission(self):\n         \"\"\"\n         queryset = self.get_queryset()\n         try:\n-            permissions = [PERMISSIONS_ACTION_MAP[self.action]]\n+            permissions = [self.get_action()]\n         except KeyError:\n             messages.error(\n                 self.request,\n@@ -326,7 +324,11 @@ def get_queryset(self):\n         Override the original `get_queryset()` to apply permission specific to the user and action.\n         \"\"\"\n         queryset = super().get_queryset()\n-        return queryset.restrict(self.request.user, PERMISSIONS_ACTION_MAP[self.action])\n+        return queryset.restrict(self.request.user, self.get_action())\n+\n+    def get_action(self):\n+        \"\"\"Helper method for retrieving action and if action not set defaulting to action name.\"\"\"\n+        return PERMISSIONS_ACTION_MAP.get(self.action, self.action)\n \n     def get_extra_context(self, request, instance=None):\n         \"\"\""
        },
        {
          "filename": "nautobot/dcim/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,8 +2,7 @@\n from . import views\n \n \n-router = OrderedDefaultRouter()\n-router.APIRootView = views.DCIMRootView\n+router = OrderedDefaultRouter(view_name=\"DCIM\")\n \n # Sites\n router.register(\"regions\", views.RegionViewSet)"
        },
        {
          "filename": "nautobot/dcim/api/views.py",
          "status": "modified",
          "additions": 1,
          "deletions": 12,
          "patch": "@@ -13,7 +13,6 @@\n from rest_framework.mixins import ListModelMixin\n from rest_framework.permissions import IsAuthenticated\n from rest_framework.response import Response\n-from rest_framework.routers import APIRootView\n from rest_framework.viewsets import GenericViewSet, ViewSet\n \n from nautobot.circuits.models import Circuit\n@@ -73,16 +72,6 @@\n from . import serializers\n from .exceptions import MissingFilterException\n \n-\n-class DCIMRootView(APIRootView):\n-    \"\"\"\n-    DCIM API root view\n-    \"\"\"\n-\n-    def get_view_name(self):\n-        return \"DCIM\"\n-\n-\n # Mixins\n \n \n@@ -875,7 +864,7 @@ def list(self, request):\n \n         # Determine local interface from peer interface's connection\n         peer_interface = get_object_or_404(\n-            Interface.objects.all(),\n+            Interface.objects.restrict(request.user, \"view\"),\n             device__name=peer_device_name,\n             name=peer_interface_name,\n         )"
        },
        {
          "filename": "nautobot/dcim/tests/test_api.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -2276,7 +2276,10 @@ def setUp(self):\n     def test_get_connected_device(self):\n         url = reverse(\"dcim-api:connected-device-list\")\n         response = self.client.get(url + \"?peer_device=TestDevice2&peer_interface=eth0\", **self.header)\n+        self.assertHttpStatus(response, status.HTTP_404_NOT_FOUND)\n \n+        self.add_permissions(\"dcim.view_interface\")\n+        response = self.client.get(url + \"?peer_device=TestDevice2&peer_interface=eth0\", **self.header)\n         self.assertHttpStatus(response, status.HTTP_200_OK)\n         self.assertEqual(response.data[\"name\"], self.device1.name)\n "
        },
        {
          "filename": "nautobot/dcim/views.py",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -11,7 +11,7 @@\n     MultipleHiddenInput,\n     modelformset_factory,\n )\n-from django.shortcuts import get_object_or_404, redirect, render\n+from django.shortcuts import get_object_or_404, HttpResponse, redirect, render\n from django.utils.html import format_html\n from django.views.generic import View\n from django_tables2 import RequestConfig\n@@ -2578,7 +2578,7 @@ def dispatch(self, request, *args, **kwargs):\n             \"rear-port\": forms.ConnectCableToRearPortForm,\n             \"power-feed\": forms.ConnectCableToPowerFeedForm,\n             \"circuit-termination\": forms.ConnectCableToCircuitTerminationForm,\n-        }[kwargs.get(\"termination_b_type\")]\n+        }.get(kwargs.get(\"termination_b_type\"), None)\n \n         return super().dispatch(request, *args, **kwargs)\n \n@@ -2595,6 +2595,9 @@ def alter_obj(self, obj, request, url_args, url_kwargs):\n         return obj\n \n     def get(self, request, *args, **kwargs):\n+        if self.model_form is None:\n+            return HttpResponse(status_code=400)\n+\n         obj = self.alter_obj(self.get_object(kwargs), request, args, kwargs)\n \n         # Parse initial data manually to avoid setting field values as lists"
        },
        {
          "filename": "nautobot/docs/plugins/development.md",
          "status": "modified",
          "additions": 12,
          "deletions": 3,
          "patch": "@@ -1200,12 +1200,13 @@ The use of `generic` Django views can aid in app development. As an example, let\n ```python\n # views.py\n from django.shortcuts import render\n-from django.views.generic import View\n+\n+from nautobot.apps.views import GenericView\n \n from .models import Animal\n \n \n-class RandomAnimalView(View):\n+class RandomAnimalView(GenericView):\n     \"\"\"Display a randomly-selected Animal.\"\"\"\n \n     def get(self, request):\n@@ -1215,6 +1216,9 @@ class RandomAnimalView(View):\n         })\n ```\n \n+!!! tip\n+    The `nautobot.apps.views.GenericView` class was added in Nautobot 1.6.16 and 2.1.9. If you're developing against an earlier version, you can use `django.views.generic.View` in combination with the `django.contrib.auth.mixins.LoginRequiredMixin` instead.\n+\n This view retrieves a random animal from the database and and passes it as a context variable when rendering a template named `animal.html`, which doesn't exist yet. To create this template, first create a directory named `templates/nautobot_animal_sounds/` within the app source directory. (We use the app's name as a subdirectory to guard against naming collisions with other apps.) Then, create a template named `animal.html` as described below.\n \n ### Utilizing Nautobot Generic Views\n@@ -1386,8 +1390,13 @@ A simple example to override the device detail view:\n from django.shortcuts import HttpResponse\n from django.views import generic\n \n+from nautobot.utilities.views import ObjectPermissionRequiredMixin\n+\n+\n+class DeviceViewOverride(ObjectPermissionRequiredMixin, generic.View):\n+    def get_required_permission(self):\n+        return \"dcim.view_device\"\n \n-class DeviceViewOverride(generic.View):\n     def get(self, request, *args, **kwargs):\n         return HttpResponse((\"Hello world! I'm a view which \"\n                              \"overrides the device object detail view.\"))"
        },
        {
          "filename": "nautobot/extras/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,8 +2,7 @@\n from . import views\n \n \n-router = OrderedDefaultRouter()\n-router.APIRootView = views.ExtrasRootView\n+router = OrderedDefaultRouter(view_name=\"Extras\")\n \n # Computed Fields\n router.register(\"computed-fields\", views.ComputedFieldViewSet)"
        },
        {
          "filename": "nautobot/extras/api/views.py",
          "status": "modified",
          "additions": 0,
          "deletions": 10,
          "patch": "@@ -15,7 +15,6 @@\n from rest_framework.parsers import JSONParser, MultiPartParser\n from rest_framework.permissions import IsAuthenticated\n from rest_framework.response import Response\n-from rest_framework.routers import APIRootView\n from rest_framework import mixins, viewsets\n \n from nautobot.core.api.authentication import TokenPermissions\n@@ -75,15 +74,6 @@\n from . import nested_serializers, serializers\n \n \n-class ExtrasRootView(APIRootView):\n-    \"\"\"\n-    Extras API root view\n-    \"\"\"\n-\n-    def get_view_name(self):\n-        return \"Extras\"\n-\n-\n class NotesViewSetMixin:\n     @extend_schema(methods=[\"get\"], filters=False, responses={200: serializers.NoteSerializer(many=True)})\n     @extend_schema("
        },
        {
          "filename": "nautobot/extras/plugins/views.py",
          "status": "modified",
          "additions": 7,
          "deletions": 10,
          "patch": "@@ -2,7 +2,6 @@\n \n from django.apps import apps\n from django.conf import settings\n-from django.contrib.auth.mixins import LoginRequiredMixin\n from django.http import Http404\n from django.shortcuts import render\n from django.urls.exceptions import NoReverseMatch\n@@ -15,7 +14,8 @@\n \n from django_tables2 import RequestConfig\n \n-from nautobot.core.api.views import NautobotAPIVersionMixin\n+from nautobot.core.api.views import AuthenticatedAPIRootView, NautobotAPIVersionMixin\n+from nautobot.core.views.generic import GenericView\n from nautobot.utilities.forms import TableConfigForm\n from nautobot.utilities.paginator import EnhancedPaginator, get_paginate_count\n from nautobot.extras.plugins.tables import InstalledPluginsTable\n@@ -67,7 +67,7 @@ def get(self, request):\n         )\n \n \n-class InstalledPluginDetailView(LoginRequiredMixin, View):\n+class InstalledPluginDetailView(GenericView):\n     \"\"\"\n     View for showing details of an installed plugin.\n     \"\"\"\n@@ -92,7 +92,6 @@ class InstalledPluginsAPIView(NautobotAPIVersionMixin, APIView):\n     \"\"\"\n \n     permission_classes = [permissions.IsAdminUser]\n-    _ignore_model_permissions = True\n \n     def get_view_name(self):\n         return \"Installed Plugins\"\n@@ -115,11 +114,9 @@ def get(self, request, format=None):  # pylint: disable=redefined-builtin\n         return Response([self._get_plugin_data(apps.get_app_config(plugin)) for plugin in settings.PLUGINS])\n \n \n-class PluginsAPIRootView(NautobotAPIVersionMixin, APIView):\n-    _ignore_model_permissions = True\n-\n-    def get_view_name(self):\n-        return \"Plugins\"\n+class PluginsAPIRootView(AuthenticatedAPIRootView):\n+    name = \"Plugins\"\n+    description = \"API extension point for installed Nautobot Plugins\"\n \n     @staticmethod\n     def _get_plugin_entry(plugin, app_config, request, format_):\n@@ -141,7 +138,7 @@ def _get_plugin_entry(plugin, app_config, request, format_):\n         return entry\n \n     @extend_schema(exclude=True)\n-    def get(self, request, format=None):  # pylint: disable=redefined-builtin\n+    def get(self, request, *args, format=None, **kwargs):  # pylint: disable=redefined-builtin\n         entries = []\n         for plugin in settings.PLUGINS:\n             app_config = apps.get_app_config(plugin)"
        },
        {
          "filename": "nautobot/extras/tests/test_views.py",
          "status": "modified",
          "additions": 108,
          "deletions": 0,
          "patch": "@@ -27,6 +27,7 @@\n     CustomFieldTypeChoices,\n     JobExecutionType,\n     JobSourceChoices,\n+    LogLevelChoices,\n     ObjectChangeActionChoices,\n     SecretsGroupAccessTypeChoices,\n     SecretsGroupSecretTypeChoices,\n@@ -44,6 +45,7 @@\n     GraphQLQuery,\n     Job,\n     JobButton,\n+    JobLogEntry,\n     JobResult,\n     Note,\n     ObjectChange,\n@@ -616,6 +618,13 @@ def setUpTestData(cls):\n         DynamicGroup.objects.create(name=\"DG 2\", slug=\"dg-2\", content_type=content_type)\n         DynamicGroup.objects.create(name=\"DG 3\", slug=\"dg-3\", content_type=content_type)\n \n+        manufacturer = Manufacturer.objects.create(name=\"Manufacturer 1\", slug=\"manufacturer-1\")\n+        devicetype = DeviceType.objects.create(manufacturer=manufacturer, model=\"Device Type 1\", slug=\"device-type-1\")\n+        devicerole = DeviceRole.objects.create(name=\"Device Role 1\", slug=\"device-role-1\")\n+        site = Site.objects.first()\n+        Device.objects.create(name=\"Device 1\", device_type=devicetype, device_role=devicerole, site=site)\n+        Device.objects.create(name=\"Device 2\", device_type=devicetype, device_role=devicerole, site=site)\n+\n         cls.form_data = {\n             \"name\": \"new_dynamic_group\",\n             \"slug\": \"new-dynamic-group\",\n@@ -628,6 +637,49 @@ def setUpTestData(cls):\n             \"dynamic_group_memberships-MAX_NUM_FORMS\": \"1000\",\n         }\n \n+    def test_get_object_dynamic_groups_anonymous(self):\n+        url = reverse(\"dcim:device_dynamicgroups\", kwargs={\"pk\": Device.objects.first().pk})\n+        self.client.logout()\n+        response = self.client.get(url, follow=True)\n+        self.assertHttpStatus(response, 200)\n+        self.assertRedirects(response, f\"/login/?next={url}\")\n+\n+    def test_get_object_dynamic_groups_without_permission(self):\n+        url = reverse(\"dcim:device_dynamicgroups\", kwargs={\"pk\": Device.objects.first().pk})\n+        response = self.client.get(url)\n+        self.assertHttpStatus(response, [403, 404])\n+\n+    def test_get_object_dynamic_groups_with_permission(self):\n+        url = reverse(\"dcim:device_dynamicgroups\", kwargs={\"pk\": Device.objects.first().pk})\n+        self.add_permissions(\"dcim.view_device\", \"extras.view_dynamicgroup\")\n+        response = self.client.get(url)\n+        self.assertHttpStatus(response, 200)\n+        response_body = response.content.decode(response.charset)\n+        self.assertIn(\"DG 1\", response_body, msg=response_body)\n+        self.assertIn(\"DG 2\", response_body, msg=response_body)\n+        self.assertIn(\"DG 3\", response_body, msg=response_body)\n+\n+    def test_get_object_dynamic_groups_with_constrained_permission(self):\n+        self.add_permissions(\"extras.view_dynamicgroup\")\n+        obj_perm = ObjectPermission(\n+            name=\"View a device\",\n+            constraints={\"pk\": Device.objects.first().pk},\n+            actions=[\"view\"],\n+        )\n+        obj_perm.save()\n+        obj_perm.users.add(self.user)\n+        obj_perm.object_types.add(ContentType.objects.get_for_model(Device))\n+\n+        url = reverse(\"dcim:device_dynamicgroups\", kwargs={\"pk\": Device.objects.first().pk})\n+        response = self.client.get(url)\n+        self.assertHttpStatus(response, 200)\n+        response_body = response.content.decode(response.charset)\n+        self.assertIn(\"DG 1\", response_body, msg=response_body)\n+\n+        url = reverse(\"dcim:device_dynamicgroups\", kwargs={\"pk\": Device.objects.last().pk})\n+        response = self.client.get(url)\n+        self.assertHttpStatus(response, 404)\n+\n     @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n     def test_edit_saved_filter(self):\n         \"\"\"Test that editing a filter works using the edit view.\"\"\"\n@@ -760,6 +812,34 @@ def setUpTestData(cls):\n         cls.slug_source = \"name\"\n         cls.slug_test_object = \"Repo 4\"\n \n+    def test_post_sync_repo_anonymous(self):\n+        self.client.logout()\n+        url = reverse(\"extras:gitrepository_sync\", kwargs={\"slug\": self._get_queryset().first().slug})\n+        response = self.client.post(url, follow=True)\n+        self.assertHttpStatus(response, 200)\n+        self.assertRedirects(response, f\"/login/?next={url}\")\n+\n+    def test_post_sync_repo_without_permission(self):\n+        url = reverse(\"extras:gitrepository_sync\", kwargs={\"slug\": self._get_queryset().first().slug})\n+        response = self.client.post(url)\n+        self.assertHttpStatus(response, [403, 404])\n+\n+    # TODO: mock/stub out `enqueue_pull_git_repository_and_refresh_data` and test successful POST with permissions\n+\n+    def test_post_dryrun_repo_anonymous(self):\n+        self.client.logout()\n+        url = reverse(\"extras:gitrepository_dryrun\", kwargs={\"slug\": self._get_queryset().first().slug})\n+        response = self.client.post(url, follow=True)\n+        self.assertHttpStatus(response, 200)\n+        self.assertRedirects(response, f\"/login/?next={url}\")\n+\n+    def test_post_dryrun_repo_without_permission(self):\n+        url = reverse(\"extras:gitrepository_dryrun\", kwargs={\"slug\": self._get_queryset().first().slug})\n+        response = self.client.post(url)\n+        self.assertHttpStatus(response, [403, 404])\n+\n+    # TODO: mock/stub out `enqueue_git_repository_diff_origin_and_local` and test successful POST with permissions\n+\n \n class NoteTestCase(\n     ViewTestCases.CreateObjectViewTestCase,\n@@ -1507,6 +1587,34 @@ def setUpTestData(cls):\n             job_id=uuid.uuid4(),\n             obj_type=obj_type,\n         )\n+        JobLogEntry.objects.create(\n+            log_level=LogLevelChoices.LOG_INFO,\n+            job_result=JobResult.objects.first(),\n+            grouping=\"run\",\n+            message=\"This is a test\",\n+        )\n+\n+    def test_get_joblogentrytable_anonymous(self):\n+        url = reverse(\"extras:jobresult_log-table\", kwargs={\"pk\": JobResult.objects.first().pk})\n+        self.client.logout()\n+        response = self.client.get(url, follow=True)\n+        self.assertHttpStatus(response, 200)\n+        self.assertRedirects(response, f\"/login/?next={url}\")\n+\n+    def test_get_joblogentrytable_without_permission(self):\n+        url = reverse(\"extras:jobresult_log-table\", kwargs={\"pk\": JobResult.objects.first().pk})\n+        response = self.client.get(url)\n+        self.assertHttpStatus(response, [403, 404])\n+\n+    def test_get_joblogentrytable_with_permission(self):\n+        url = reverse(\"extras:jobresult_log-table\", kwargs={\"pk\": JobResult.objects.first().pk})\n+        self.add_permissions(\"extras.view_jobresult\", \"extras.view_joblogentry\")\n+        response = self.client.get(url)\n+        self.assertHttpStatus(response, 200)\n+        response_body = response.content.decode(response.charset)\n+        self.assertIn(\"This is a test\", response_body)\n+\n+    # TODO test with constrained permissions on both JobResult and JobLogEntry records\n \n \n class JobTestCase("
        },
        {
          "filename": "nautobot/extras/views.py",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -706,7 +706,7 @@ class DynamicGroupBulkDeleteView(generic.BulkDeleteView):\n     table = tables.DynamicGroupTable\n \n \n-class ObjectDynamicGroupsView(View):\n+class ObjectDynamicGroupsView(generic.GenericView):\n     \"\"\"\n     Present a list of dynamic groups associated to a particular object.\n     base_template: The name of the template to extend. If not provided, \"<app>/<model>.html\" will be used.\n@@ -894,18 +894,18 @@ def check_and_call_git_repository_function(request, slug, func):\n     if not get_worker_count():\n         messages.error(request, \"Unable to run job: Celery worker process not running.\")\n     else:\n-        repository = get_object_or_404(GitRepository, slug=slug)\n+        repository = get_object_or_404(GitRepository.objects.restrict(request.user, \"change\"), slug=slug)\n         func(repository, request)\n \n     return redirect(\"extras:gitrepository_result\", slug=slug)\n \n \n-class GitRepositorySyncView(View):\n+class GitRepositorySyncView(generic.GenericView):\n     def post(self, request, slug):\n         return check_and_call_git_repository_function(request, slug, enqueue_pull_git_repository_and_refresh_data)\n \n \n-class GitRepositoryDryRunView(View):\n+class GitRepositoryDryRunView(generic.GenericView):\n     def post(self, request, slug):\n         return check_and_call_git_repository_function(request, slug, enqueue_git_repository_diff_origin_and_local)\n \n@@ -1582,15 +1582,15 @@ def get_extra_context(self, request, instance):\n         }\n \n \n-class JobLogEntryTableView(View):\n+class JobLogEntryTableView(generic.GenericView):\n     \"\"\"\n     Display a table of `JobLogEntry` objects for a given `JobResult` instance.\n     \"\"\"\n \n     queryset = JobResult.objects.all()\n \n     def get(self, request, pk=None):\n-        instance = self.queryset.get(pk=pk)\n+        instance = get_object_or_404(self.queryset.restrict(request.user, \"view\"), pk=pk)\n         log_table = tables.JobLogEntryTable(data=instance.logs.all(), user=request.user)\n         RequestConfig(request).configure(log_table)\n         return HttpResponse(log_table.as_html(request))\n@@ -1663,7 +1663,7 @@ def get_extra_context(self, request, instance):\n         }\n \n \n-class ObjectChangeLogView(View):\n+class ObjectChangeLogView(generic.GenericView):\n     \"\"\"\n     Present a history of changes made to a particular object.\n     base_template: The name of the template to extend. If not provided, \"<app>/<model>.html\" will be used.\n@@ -1735,7 +1735,7 @@ class NoteDeleteView(generic.ObjectDeleteView):\n     queryset = Note.objects.all()\n \n \n-class ObjectNotesView(View):\n+class ObjectNotesView(generic.GenericView):\n     \"\"\"\n     Present a history of changes made to a particular object.\n     base_template: The name of the template to extend. If not provided, \"<app>/<model>.html\" will be used.\n@@ -1756,7 +1756,7 @@ def get(self, request, model, **kwargs):\n                 \"assigned_object_id\": obj.pk,\n             }\n         )\n-        notes_table = tables.NoteTable(obj.notes)\n+        notes_table = tables.NoteTable(obj.notes.restrict(request.user, \"view\"))\n \n         # Apply the request context\n         paginate = {\n@@ -1869,7 +1869,7 @@ def get_extra_context(self, request, instance):\n         }\n \n \n-class SecretProviderParametersFormView(View):\n+class SecretProviderParametersFormView(generic.GenericView):\n     \"\"\"\n     Helper view to SecretView; retrieve the HTML form appropriate for entering parameters for a given SecretsProvider.\n     \"\"\""
        },
        {
          "filename": "nautobot/ipam/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,8 +2,7 @@\n from . import views\n \n \n-router = OrderedDefaultRouter()\n-router.APIRootView = views.IPAMRootView\n+router = OrderedDefaultRouter(view_name=\"IPAM\")\n \n # VRFs\n router.register(\"vrfs\", views.VRFViewSet)"
        },
        {
          "filename": "nautobot/ipam/api/views.py",
          "status": "modified",
          "additions": 0,
          "deletions": 11,
          "patch": "@@ -6,7 +6,6 @@\n from rest_framework.decorators import action\n from rest_framework.exceptions import APIException\n from rest_framework.response import Response\n-from rest_framework.routers import APIRootView\n \n from nautobot.extras.api.views import NautobotModelViewSet, StatusViewSetMixin\n from nautobot.ipam import filters\n@@ -30,16 +29,6 @@\n )\n from . import serializers\n \n-\n-class IPAMRootView(APIRootView):\n-    \"\"\"\n-    IPAM API root view\n-    \"\"\"\n-\n-    def get_view_name(self):\n-        return \"IPAM\"\n-\n-\n #\n # VRFs\n #"
        },
        {
          "filename": "nautobot/ipam/tests/test_graphql.py",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,4 +1,3 @@\n-from django.test import override_settings\n from django.urls import reverse\n from rest_framework import status\n \n@@ -14,8 +13,8 @@ def setUp(self):\n         self.statuses = Status.objects.get_for_model(Prefix)\n         self.prefixv4 = Prefix.objects.ip_family(4).first()\n         self.prefixv6 = Prefix.objects.ip_family(6).first()\n+        self.add_permissions(\"ipam.view_prefix\")\n \n-    @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])\n     def test_prefix_family(self):\n         \"\"\"Test family is available for a Prefix via GraphQL.\"\"\"\n         get_prefixes_query = \"\"\"\n@@ -28,7 +27,7 @@ def test_prefix_family(self):\n         }\n         \"\"\"\n         payload = {\"query\": get_prefixes_query}\n-        response = self.client.post(self.api_url, payload, format=\"json\")\n+        response = self.client.post(self.api_url, payload, format=\"json\", **self.header)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         prefixes = response.data[\"data\"][\"prefixes\"]\n         self.assertIsInstance(prefixes, list)"
        },
        {
          "filename": "nautobot/ipam/views.py",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -696,9 +696,10 @@ class IPAddressAssignView(generic.ObjectView):\n     queryset = IPAddress.objects.all()\n \n     def dispatch(self, request, *args, **kwargs):\n-        # Redirect user if an interface has not been provided\n-        if \"interface\" not in request.GET and \"vminterface\" not in request.GET:\n-            return redirect(\"ipam:ipaddress_add\")\n+        if request.user.is_authenticated:\n+            # Redirect user if an interface has not been provided\n+            if \"interface\" not in request.GET and \"vminterface\" not in request.GET:\n+                return redirect(\"ipam:ipaddress_add\")\n \n         return super().dispatch(request, *args, **kwargs)\n "
        },
        {
          "filename": "nautobot/tenancy/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,8 +2,7 @@\n from . import views\n \n \n-router = OrderedDefaultRouter()\n-router.APIRootView = views.TenancyRootView\n+router = OrderedDefaultRouter(view_name=\"Tenancy\")\n \n # Tenants\n router.register(\"tenant-groups\", views.TenantGroupViewSet)"
        },
        {
          "filename": "nautobot/tenancy/api/views.py",
          "status": "modified",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -1,5 +1,3 @@\n-from rest_framework.routers import APIRootView\n-\n from nautobot.circuits.models import Circuit\n from nautobot.dcim.models import Device, Rack, Site\n from nautobot.extras.api.views import NautobotModelViewSet\n@@ -10,16 +8,6 @@\n from nautobot.virtualization.models import VirtualMachine\n from . import serializers\n \n-\n-class TenancyRootView(APIRootView):\n-    \"\"\"\n-    Tenancy API root view\n-    \"\"\"\n-\n-    def get_view_name(self):\n-        return \"Tenancy\"\n-\n-\n #\n # Tenant Groups\n #"
        },
        {
          "filename": "nautobot/users/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,8 +2,7 @@\n from . import views\n \n \n-router = OrderedDefaultRouter()\n-router.APIRootView = views.UsersRootView\n+router = OrderedDefaultRouter(view_name=\"Users\")\n \n # Users and groups\n router.register(\"users\", views.UserViewSet)"
        },
        {
          "filename": "nautobot/users/api/views.py",
          "status": "modified",
          "additions": 0,
          "deletions": 11,
          "patch": "@@ -5,7 +5,6 @@\n from rest_framework.authentication import BasicAuthentication\n from rest_framework.permissions import IsAuthenticated\n from rest_framework.response import Response\n-from rest_framework.routers import APIRootView\n from rest_framework.viewsets import ViewSet\n \n from nautobot.core.api.serializers import BulkOperationIntegerIDSerializer\n@@ -16,16 +15,6 @@\n from nautobot.utilities.utils import deepmerge\n from . import serializers\n \n-\n-class UsersRootView(APIRootView):\n-    \"\"\"\n-    Users API root view\n-    \"\"\"\n-\n-    def get_view_name(self):\n-        return \"Users\"\n-\n-\n #\n # Users and groups\n #"
        },
        {
          "filename": "nautobot/users/views.py",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -7,7 +7,6 @@\n     logout as auth_logout,\n     update_session_auth_hash,\n )\n-from django.contrib.auth.mixins import LoginRequiredMixin\n from django.http import HttpResponseForbidden, HttpResponseRedirect\n from django.shortcuts import get_object_or_404, redirect, render\n from django.urls import reverse\n@@ -16,7 +15,9 @@\n from django.views.decorators.debug import sensitive_post_parameters\n from django.views.generic import View\n \n+from nautobot.core.views.generic import GenericView\n from nautobot.utilities.forms import ConfirmationForm\n+\n from .forms import AdvancedProfileSettingsForm, LoginForm, PasswordChangeForm, TokenForm\n from .models import Token\n \n@@ -116,7 +117,7 @@ def is_django_auth_user(request):\n     return request.session.get(BACKEND_SESSION_KEY, None) == \"nautobot.core.authentication.ObjectPermissionBackend\"\n \n \n-class ProfileView(LoginRequiredMixin, View):\n+class ProfileView(GenericView):\n     template_name = \"users/profile.html\"\n \n     def get(self, request):\n@@ -130,7 +131,7 @@ def get(self, request):\n         )\n \n \n-class UserConfigView(LoginRequiredMixin, View):\n+class UserConfigView(GenericView):\n     template_name = \"users/preferences.html\"\n \n     def get(self, request):\n@@ -158,7 +159,7 @@ def post(self, request):\n         return redirect(\"user:preferences\")\n \n \n-class ChangePasswordView(LoginRequiredMixin, View):\n+class ChangePasswordView(GenericView):\n     template_name = \"users/change_password.html\"\n \n     RESTRICTED_NOTICE = \"Remotely authenticated user credentials cannot be changed within Nautobot.\"\n@@ -216,7 +217,7 @@ def post(self, request):\n #\n \n \n-class TokenListView(LoginRequiredMixin, View):\n+class TokenListView(GenericView):\n     def get(self, request):\n         tokens = Token.objects.filter(user=request.user)\n \n@@ -231,7 +232,7 @@ def get(self, request):\n         )\n \n \n-class TokenEditView(LoginRequiredMixin, View):\n+class TokenEditView(GenericView):\n     def get(self, request, pk=None):\n         if pk is not None:\n             if not request.user.has_perm(\"users.change_token\"):\n@@ -290,7 +291,7 @@ def post(self, request, pk=None):\n         )\n \n \n-class TokenDeleteView(LoginRequiredMixin, View):\n+class TokenDeleteView(GenericView):\n     def get(self, request, pk):\n         token = get_object_or_404(Token.objects.filter(user=request.user), pk=pk)\n         initial_data = {\n@@ -334,7 +335,7 @@ def post(self, request, pk):\n #\n \n \n-class AdvancedProfileSettingsEditView(LoginRequiredMixin, View):\n+class AdvancedProfileSettingsEditView(GenericView):\n     template_name = \"users/advanced_settings_edit.html\"\n \n     def get(self, request):"
        },
        {
          "filename": "nautobot/utilities/api.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -47,6 +47,10 @@ def get_view_name(view, suffix=None):\n \n     else:\n         # Replicate DRF's built-in behavior.\n+        name = getattr(view, \"name\", None)\n+        if name is not None:\n+            return view.name\n+\n         name = view.__class__.__name__\n         name = formatting.remove_trailing_string(name, \"View\")\n         name = formatting.remove_trailing_string(name, \"ViewSet\")"
        },
        {
          "filename": "nautobot/utilities/tests/test_api.py",
          "status": "modified",
          "additions": 5,
          "deletions": 6,
          "patch": "@@ -1,13 +1,12 @@\n from django.contrib.contenttypes.models import ContentType\n-from django.test import TestCase\n from django.urls import reverse\n from rest_framework import status\n \n from nautobot.dcim.models import Region, Site\n from nautobot.extras.choices import CustomFieldTypeChoices\n from nautobot.extras.models import CustomField\n from nautobot.ipam.models import VLAN\n-from nautobot.utilities.testing import APITestCase, NautobotTestClient, disable_warnings\n+from nautobot.utilities.testing import APITestCase, disable_warnings\n \n \n class WritableNestedSerializerTest(APITestCase):\n@@ -122,10 +121,9 @@ def test_related_by_invalid(self):\n         self.assertEqual(VLAN.objects.filter(name=\"Test VLAN 100\").count(), 0)\n \n \n-class APIDocsTestCase(TestCase):\n-    client_class = NautobotTestClient\n-\n+class APIDocsTestCase(APITestCase):\n     def setUp(self):\n+        super().setUp()\n         # Populate a CustomField to activate CustomFieldSerializer\n         content_type = ContentType.objects.get_for_model(Site)\n         self.cf_text = CustomField(type=CustomFieldTypeChoices.TYPE_TEXT, name=\"test\")\n@@ -135,10 +133,11 @@ def setUp(self):\n \n     def test_api_docs(self):\n         url = reverse(\"api_docs\")\n-        response = self.client.get(url)\n+        response = self.client.get(url, **self.header)\n         self.assertEqual(response.status_code, 200)\n \n         headers = {\n+            **self.header,\n             \"HTTP_ACCEPT\": \"application/vnd.oai.openapi\",\n         }\n         url = reverse(\"schema\")"
        },
        {
          "filename": "nautobot/utilities/utils.py",
          "status": "modified",
          "additions": 123,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@\n from django.db.models.functions import Coalesce\n from django.http import QueryDict\n from django.template import engines\n+from django.urls import get_resolver, URLPattern, URLResolver\n from django.utils.functional import SimpleLazyObject\n from django.utils.module_loading import import_string\n from django.utils.text import slugify\n@@ -692,6 +693,128 @@ def get_table_for_model(model):\n     return get_related_class_for_model(model, module_name=\"tables\", object_suffix=\"Table\")\n \n \n+def get_url_patterns(urlconf=None, patterns_list=None, base_path=\"/\"):\n+    \"\"\"\n+    Recursively yield a list of registered URL patterns.\n+\n+    Args:\n+        urlconf (URLConf): Python module such as `nautobot.core.urls`.\n+            Default if unspecified is the value of `settings.ROOT_URLCONF`, i.e. the `nautobot.core.urls` module.\n+        patterns_list (list): Used in recursion. Generally can be omitted on initial call.\n+            Default if unspecified is the `url_patterns` attribute of the given `urlconf` module.\n+        base_path (str): String to prepend to all URL patterns yielded.\n+            Default if unspecified is the string `\"/\"`.\n+\n+    Yields:\n+        (str): Each URL pattern defined in the given urlconf and its descendants\n+\n+    Examples:\n+        >>> generator = get_url_patterns()\n+        >>> next(generator)\n+        '/'\n+        >>> next(generator)\n+        '/search/'\n+        >>> next(generator)\n+        '/login/'\n+        >>> next(generator)\n+        '/logout/'\n+        >>> next(generator)\n+        '/circuits/circuits/<uuid:pk>/terminations/swap/'\n+\n+        >>> import example_plugin.urls as example_urls\n+        >>> for url_pattern in get_url_patterns(example_urls, base_path=\"/plugins/example-plugin/\"):\n+        ...     print(url_pattern)\n+        ...\n+        /plugins/example-plugin/\n+        /plugins/example-plugin/config/\n+        /plugins/example-plugin/models/<uuid:pk>/dynamic-groups/\n+        /plugins/example-plugin/other-models/<uuid:pk>/dynamic-groups/\n+        /plugins/example-plugin/docs/\n+        /plugins/example-plugin/circuits/<uuid:pk>/example-plugin-tab/\n+        /plugins/example-plugin/devices/<uuid:pk>/example-plugin-tab-1/\n+        /plugins/example-plugin/devices/<uuid:pk>/example-plugin-tab-2/\n+        /plugins/example-plugin/override-target/\n+        /plugins/example-plugin/^models/$\n+        /plugins/example-plugin/^models/add/$\n+        /plugins/example-plugin/^models/import/$\n+        /plugins/example-plugin/^models/edit/$\n+        /plugins/example-plugin/^models/delete/$\n+        /plugins/example-plugin/^models/all-names/$\n+        /plugins/example-plugin/^models/(?P<pk>[^/.]+)/$\n+        /plugins/example-plugin/^models/(?P<pk>[^/.]+)/delete/$\n+        /plugins/example-plugin/^models/(?P<pk>[^/.]+)/edit/$\n+        /plugins/example-plugin/^models/(?P<pk>[^/.]+)/changelog/$\n+        /plugins/example-plugin/^models/(?P<pk>[^/.]+)/notes/$\n+        /plugins/example-plugin/^other-models/$\n+        /plugins/example-plugin/^other-models/add/$\n+        /plugins/example-plugin/^other-models/edit/$\n+        /plugins/example-plugin/^other-models/delete/$\n+        /plugins/example-plugin/^other-models/(?P<pk>[^/.]+)/$\n+        /plugins/example-plugin/^other-models/(?P<pk>[^/.]+)/delete/$\n+        /plugins/example-plugin/^other-models/(?P<pk>[^/.]+)/edit/$\n+        /plugins/example-plugin/^other-models/(?P<pk>[^/.]+)/changelog/$\n+        /plugins/example-plugin/^other-models/(?P<pk>[^/.]+)/notes/$\n+    \"\"\"\n+    if urlconf is None:\n+        urlconf = settings.ROOT_URLCONF\n+    if patterns_list is None:\n+        patterns_list = get_resolver(urlconf).url_patterns\n+\n+    for item in patterns_list:\n+        if isinstance(item, URLPattern):\n+            yield base_path + str(item.pattern)\n+        elif isinstance(item, URLResolver):\n+            # Recurse!\n+            yield from get_url_patterns(urlconf, item.url_patterns, base_path + str(item.pattern))\n+\n+\n+def get_url_for_url_pattern(url_pattern):\n+    \"\"\"\n+    Given a URL pattern, construct a URL string that would match that pattern.\n+\n+    Examples:\n+        >>> get_url_for_url_pattern(\"/plugins/example-plugin/^models/(?P<pk>[^/.]+)/$\")\n+        '/plugins/example-plugin/models/00000000-0000-0000-0000-000000000000/'\n+        >>> get_url_for_url_pattern(\"/circuits/circuit-terminations/<uuid:termination_a_id>/connect/<str:termination_b_type>/\")\n+        '/circuits/circuit-terminations/00000000-0000-0000-0000-000000000000/connect/string/'\n+    \"\"\"\n+    url = url_pattern\n+    # Fixup tokens in path-style \"classic\" view URLs:\n+    # \"/admin/users/user/<id>/password/\"\n+    url = re.sub(r\"<id>\", \"00000000-0000-0000-0000-000000000000\", url)\n+    # \"/silk/request/<uuid:request_id>/profile/<int:profile_id>/\"\n+    url = re.sub(r\"<int:\\w+>\", \"1\", url)\n+    # \"/admin/admin/logentry/<path:object_id>/\"\n+    url = re.sub(r\"<path:\\w+>\", \"1\", url)\n+    # \"/dcim/sites/<slug:slug>/\"\n+    url = re.sub(r\"<slug:\\w+>\", \"slug\", url)\n+    # \"/apps/installed-apps/<str:app>/\"\n+    url = re.sub(r\"<str:\\w+>\", \"string\", url)\n+    # \"/dcim/locations/<uuid:pk>/\"\n+    url = re.sub(r\"<uuid:\\w+>\", \"00000000-0000-0000-0000-000000000000\", url)\n+    # tokens in regexp-style router urls, including REST and NautobotUIViewSet:\n+    # \"/extras/^external-integrations/(?P<pk>[^/.]+)/$\"\n+    # \"/api/virtualization/^interfaces/(?P<pk>[^/.]+)/$\"\n+    # \"/api/virtualization/^interfaces/(?P<pk>[^/.]+)\\\\.(?P<format>[a-z0-9]+)/?$\"\n+    url = re.sub(r\"[$^]\", \"\", url)\n+    url = re.sub(r\"/\\?\", \"/\", url)\n+    url = re.sub(r\"\\(\\?P<app_label>[^)]+\\)\", \"users\", url)\n+    url = re.sub(r\"\\(\\?P<class_path>[^)]+\\)\", \"foo/bar/baz\", url)\n+    url = re.sub(r\"\\(\\?P<format>[^)]+\\)\", \"json\", url)\n+    url = re.sub(r\"\\(\\?P<name>[^)]+\\)\", \"string\", url)\n+    url = re.sub(r\"\\(\\?P<pk>[^)]+\\)\", \"00000000-0000-0000-0000-000000000000\", url)\n+    url = re.sub(r\"\\(\\?P<slug>[^)]+\\)\", \"string\", url)\n+    url = re.sub(r\"\\(\\?P<url>[^)]+\\)\", \"any\", url)\n+    # Fallthru for generic URL parameters\n+    url = re.sub(r\"\\(\\?P<\\w+>[^)]+\\)\\??\", \"unknown\", url)\n+    url = re.sub(r\"\\\\\", \"\", url)\n+\n+    if any(char in url for char in \"<>[]()?+^$\"):\n+        raise RuntimeError(f\"Unhandled token in URL {url} derived from {url_pattern}\")\n+\n+    return url\n+\n+\n # Setup UtilizationData named tuple for use by multiple methods\n UtilizationData = namedtuple(\"UtilizationData\", [\"numerator\", \"denominator\"])\n "
        },
        {
          "filename": "nautobot/virtualization/api/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -2,8 +2,7 @@\n from . import views\n \n \n-router = OrderedDefaultRouter()\n-router.APIRootView = views.VirtualizationRootView\n+router = OrderedDefaultRouter(view_name=\"Virtualization\")\n \n # Clusters\n router.register(\"cluster-types\", views.ClusterTypeViewSet)"
        },
        {
          "filename": "nautobot/virtualization/api/views.py",
          "status": "modified",
          "additions": 0,
          "deletions": 11,
          "patch": "@@ -1,5 +1,4 @@\n from drf_spectacular.utils import extend_schema, extend_schema_view\n-from rest_framework.routers import APIRootView\n \n from nautobot.dcim.models import Device\n from nautobot.extras.api.views import (\n@@ -20,16 +19,6 @@\n )\n from . import serializers\n \n-\n-class VirtualizationRootView(APIRootView):\n-    \"\"\"\n-    Virtualization API root view\n-    \"\"\"\n-\n-    def get_view_name(self):\n-        return \"Virtualization\"\n-\n-\n #\n # Clusters\n #"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 29,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "082404e6cc63181ee2b47eae9cda5a6bec0601b2",
            "date": "2025-01-10T17:11:08Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "f979d876c9c747a129975124f213ee606d8846e8",
            "date": "2025-01-10T15:50:52Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "3e2f8b5787971c267c87a5f1ffdfda045fdd3eb9",
            "date": "2025-01-10T15:36:42Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "e5397443c821333bcfd193374458fb88ff45175f",
            "date": "2025-01-09T22:12:11Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "64ae4d2b7f018dc4fb43beff1f3a3144ae15ef0a",
            "date": "2025-01-09T22:09:46Z",
            "author_login": "HanlinMiao"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Nautobot is a Network Source of Truth and Network Automation Platform. A number of Nautobot URL endpoints were found to be improperly accessible to unauthenticated (anonymous) users. These endpoints will not disclose any Nautobot data to an unauthenticated user unless the Nautobot configuration variable EXEMPT_VIEW_PERMISSIONS is changed from its default value (an empty list) to permit access to specific data by unauthenticated users. This vulnerability is fixed in 1.6.16 and 2.1.9.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-03-26T03:15:13.707",
    "last_modified": "2024-11-21T09:07:47.030",
    "fix_date": "2024-03-25T19:12:27Z"
  },
  "references": [
    {
      "url": "https://github.com/nautobot/nautobot/commit/2fd95c365f8477b26e06d60b999ddd36882d5750",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/dd623e6c3307f48b6357fcc91925bcad5192abfb",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5464",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5465",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/releases/tag/v1.6.16",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/releases/tag/v2.1.9",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/2fd95c365f8477b26e06d60b999ddd36882d5750",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/dd623e6c3307f48b6357fcc91925bcad5192abfb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5464",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5465",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/releases/tag/v1.6.16",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/releases/tag/v2.1.9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-m732-wvh2-7cq4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.901718",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nautobot",
    "owner": "nautobot",
    "created_at": "2021-02-19T22:00:19Z",
    "updated_at": "2025-01-13T11:52:13Z",
    "pushed_at": "2025-01-14T12:37:17Z",
    "size": 158251,
    "stars": 1107,
    "forks": 298,
    "open_issues": 881,
    "watchers": 1107,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "ltm-1.6",
      "main",
      "next"
    ],
    "languages": {
      "Python": 8160292,
      "HTML": 1071092,
      "JavaScript": 95221,
      "CSS": 45096,
      "Jinja": 28376,
      "Gherkin": 14390,
      "Dockerfile": 11222,
      "Shell": 8955
    },
    "commit_activity": {
      "total_commits_last_year": 1444,
      "avg_commits_per_week": 27.76923076923077,
      "days_active_last_year": 230
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:49:58.690841"
  }
}