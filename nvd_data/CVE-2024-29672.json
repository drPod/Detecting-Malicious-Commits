{
  "cve_id": "CVE-2024-29672",
  "github_data": {
    "repository": "zly2006/reden-is-what-we-made",
    "fix_commit": "44c5320f0a1ccaa764dd91df6a12e747f81fe63a",
    "related_commits": [
      "44c5320f0a1ccaa764dd91df6a12e747f81fe63a",
      "44c5320f0a1ccaa764dd91df6a12e747f81fe63a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "44c5320f0a1ccaa764dd91df6a12e747f81fe63a",
      "commit_date": "2024-01-09T08:05:17Z",
      "author": {
        "login": "zly2006",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "refactor: rvc (#81)",
        "length": 195,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 72,
        "additions": 48,
        "deletions": 24
      },
      "files": [
        {
          "filename": "src/main/java/com/github/zly2006/reden/access/ClientData.kt",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@ import com.github.zly2006.reden.debugger.breakpoint.BreakPoint\n import com.github.zly2006.reden.debugger.breakpoint.BreakpointsManager\n import com.github.zly2006.reden.rvc.tracking.RvcRepository\n import net.minecraft.client.MinecraftClient\n+import net.minecraft.network.NetworkSide\n import org.eclipse.jgit.api.Git\n import java.io.File\n \n@@ -19,7 +20,7 @@ class ClientData(\n         File(\"rvc\").mkdirs()\n         File(\"rvc\").listFiles()!!.asSequence()\n             .filter { it.isDirectory && it.resolve(\".git\").exists() }\n-            .map { RvcRepository(Git.open(it)) }\n+            .map { RvcRepository(Git.open(it), side = NetworkSide.CLIENTBOUND) }\n             .forEach { rvcStructures[it.name] = it }\n     }\n "
        },
        {
          "filename": "src/main/java/com/github/zly2006/reden/debugger/tree/StageIo.kt",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -36,8 +36,9 @@ object StageIo {\n \n         constructors[\"world_root\"] = Constructor { WorldRootStage(null, it!!, null) }\n         constructors[\"network\"] = Constructor { EmptyTickStage(\"network\", it) }\n-        constructors[\"update_block\"] = Constructor { EmptyTickStage(\"update_block\", it!!) }\n-        constructors[\"commands_stage\"] = Constructor { EmptyTickStage(\"commands_stage\", it!!) }\n+        constructors[\"update_block\"] = Constructor { EmptyTickStage(\"update_block\", it) }\n+        constructors[\"commands_stage\"] = Constructor { EmptyTickStage(\"commands_stage\", it) }\n+        constructors[\"set_block\"] = Constructor { EmptyTickStage(\"set_block\", it) }\n \n         constructors[\"block_update\"] = Constructor { BlockUpdateStage(it!!) }\n         constructors[\"nc_update\"] = Constructor { StageBlockNCUpdate(it!!, null) }"
        },
        {
          "filename": "src/main/java/com/github/zly2006/reden/malilib/KeyCallbacks.kt",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -181,12 +181,17 @@ fun configureKeyCallbacks(mc: MinecraftClient) {\n     DEBUG_RVC_REQUEST_SYNC_DATA.callback {\n         ClientPlayNetworking.send(RvcTrackpointsC2SRequest(1, selectedStructure!!))\n         RvcDataS2CPacket.consumer = {\n+            val rootFile = mc.runDirectory.resolve(\"DEBUG_RVC_REQUEST_SYNC_DATA\").normalize()\n             ZipInputStream(it.inputStream()).use { zip ->\n                 var entry = zip.nextEntry\n                 while (entry != null) {\n                     val name = entry.name\n                     print(name)\n-                    val file = mc.runDirectory.resolve(\"DEBUG_RVC_REQUEST_SYNC_DATA\").resolve(name)\n+                    val file = rootFile.resolve(name).normalize()\n+                    if (!file.startsWith(rootFile)) {\n+                        Reden.LOGGER.error(\"Zip entry $name is outside of root directory\")\n+                        continue\n+                    }\n                     file.parentFile.mkdirs()\n                     file.writeBytes(zip.readAllBytes())\n                     entry = zip.nextEntry"
        },
        {
          "filename": "src/main/java/com/github/zly2006/reden/network/RvcTrackpointsC2SRequest.kt",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -1,12 +1,12 @@\n package com.github.zly2006.reden.network\n \n import com.github.zly2006.reden.Reden\n-import com.github.zly2006.reden.rvc.tracking.RvcFileIO\n-import com.github.zly2006.reden.rvc.tracking.TrackPredicate\n-import com.github.zly2006.reden.rvc.tracking.TrackedStructure\n+import com.github.zly2006.reden.rvc.tracking.*\n+import com.github.zly2006.reden.utils.server\n import net.fabricmc.fabric.api.networking.v1.FabricPacket\n import net.fabricmc.fabric.api.networking.v1.PacketType\n import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking\n+import net.minecraft.network.NetworkSide\n import net.minecraft.network.PacketByteBuf\n import java.io.ByteArrayOutputStream\n import java.util.zip.ZipEntry\n@@ -26,9 +26,12 @@ class RvcTrackpointsC2SRequest(\n         val id = Reden.identifier(\"rvc_trackpoints_c2s\")\n         val pType = PacketType.create(id) {\n             val op = it.readVarInt()\n-            val structure = TrackedStructure(it.readString())\n+            val structure = TrackedStructure(it.readString(), NetworkSide.SERVERBOUND)\n+            val origin = it.readBlockPos()\n             val size = it.readVarInt()\n             val trackpoints = ArrayList<TrackedStructure.TrackPoint>(size)\n+            structure.world = server.overworld\n+            structure.placementInfo = PlacementInfo(WorldInfo.ofLocal(server.overworld), origin)\n             for (i in 0 until size) {\n                 trackpoints.add(\n                     TrackedStructure.TrackPoint(\n@@ -76,6 +79,7 @@ class RvcTrackpointsC2SRequest(\n     override fun write(buf: PacketByteBuf) {\n         buf.writeVarInt(operation)\n         buf.writeString(structure.name)\n+        buf.writeBlockPos(structure.origin)\n         buf.writeVarInt(structure.trackPoints.size)\n         for (trackpoint in structure.trackPoints) {\n             buf.writeBlockPos(trackpoint.pos)"
        },
        {
          "filename": "src/main/java/com/github/zly2006/reden/rvc/gui/SelectionCreateScreen.kt",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -10,14 +10,15 @@ import io.wispforest.owo.ui.component.Components\n import io.wispforest.owo.ui.container.Containers\n import io.wispforest.owo.ui.container.FlowLayout\n import io.wispforest.owo.ui.core.*\n+import net.minecraft.network.NetworkSide\n import net.minecraft.text.Text\n \n private val DEFAULT_STATUS_TIP = Text.literal(\"Create a new RVC repository\")\n \n class SelectionCreateScreen: BaseOwoScreen<FlowLayout>() {\n     override fun createAdapter() = OwoUIAdapter.create(this, Containers::verticalFlow)!!\n     private val confirmNameButton: ButtonComponent = Components.button(Text.literal(\"OK\")) {\n-        val repository = RvcRepository.create(nameField.text, client!!.getWorldInfo())\n+        val repository = RvcRepository.create(nameField.text, client!!.getWorldInfo(), NetworkSide.CLIENTBOUND)\n         client!!.data.rvcStructures[nameField.text] = repository\n         selectedRepository = repository\n         client!!.data.mc.setScreen(null)"
        },
        {
          "filename": "src/main/java/com/github/zly2006/reden/rvc/tracking/RvcRepository.kt",
          "status": "modified",
          "additions": 11,
          "deletions": 8,
          "patch": "@@ -9,6 +9,7 @@ import kotlinx.serialization.json.Json\n import kotlinx.serialization.json.decodeFromStream\n import net.minecraft.client.MinecraftClient\n import net.minecraft.entity.player.PlayerEntity\n+import net.minecraft.network.NetworkSide\n import net.minecraft.util.math.BlockPos\n import org.eclipse.jgit.api.CloneCommand\n import org.eclipse.jgit.api.Git\n@@ -20,7 +21,8 @@ import kotlin.io.path.*\n @OptIn(ExperimentalSerializationApi::class)\n class RvcRepository(\n     private val git: Git,\n-    val name: String = git.repository.workTree.name\n+    val name: String = git.repository.workTree.name,\n+    val side: NetworkSide\n ) {\n     var headCache: TrackedStructure? = null\n         private set\n@@ -73,7 +75,7 @@ class RvcRepository(\n         if (headCache == null) {\n             val refs = git.branchList().call()\n             headCache = if (refs.isEmpty()) {\n-                TrackedStructure(name)\n+                TrackedStructure(name, side)\n             } else if (refs.any { it.name == RVC_BRANCH_REF }) {\n                 checkoutBranch(RVC_BRANCH)\n             } else {\n@@ -90,7 +92,7 @@ class RvcRepository(\n         return headCache!!\n     }\n \n-    fun checkout(tag: String) = TrackedStructure(name).apply {\n+    fun checkout(tag: String) = TrackedStructure(name, side).apply {\n         git.checkout().setName(tag).setForced(true).call()\n         this@RvcRepository.placementInfo?.let { this.placementInfo = it }\n         RvcFileIO.load(git.repository.workTree.toPath(), this)\n@@ -127,29 +129,30 @@ class RvcRepository(\n         val path = Path(\"rvc\")\n         const val RVC_BRANCH = \"rvc\"\n         const val RVC_BRANCH_REF = \"refs/heads/$RVC_BRANCH\"\n-        fun create(name: String, worldInfo: WorldInfo): RvcRepository {\n+        fun create(name: String, worldInfo: WorldInfo, side: NetworkSide): RvcRepository {\n             val git = Git.init()\n                 .setDirectory(path / name)\n                 .setInitialBranch(RVC_BRANCH)\n                 .call()\n-            return RvcRepository(git).apply {\n+            return RvcRepository(git, side = side).apply {\n                 placementInfo = PlacementInfo(worldInfo, BlockPos.ORIGIN)\n                 createReadmeIfNotExists()\n             }\n         }\n \n-        fun clone(url: String): RvcRepository {\n+        fun clone(url: String, side: NetworkSide): RvcRepository {\n             var name = url.split(\"/\").last().removeSuffix(\".git\")\n             var i = 1\n             while ((path / name).exists()) {\n                 name = \"$name$i\"\n                 i++\n             }\n             return RvcRepository(\n-                Git.cloneRepository()\n+                git = Git.cloneRepository()\n                     .setURI(url)\n                     .setDirectory(path / name)\n-                    .call()\n+                    .call(),\n+                side = side\n             )\n         }\n     }"
        },
        {
          "filename": "src/main/java/com/github/zly2006/reden/rvc/tracking/TrackedStructure.kt",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -11,6 +11,7 @@ import net.minecraft.entity.Entity\n import net.minecraft.entity.player.PlayerEntity\n import net.minecraft.fluid.Fluid\n import net.minecraft.nbt.NbtCompound\n+import net.minecraft.network.NetworkSide\n import net.minecraft.registry.Registries\n import net.minecraft.registry.Registry\n import net.minecraft.server.world.ServerWorld\n@@ -24,7 +25,8 @@ import java.util.*\n  * todo: see #81\n  */\n class TrackedStructure(\n-    name: String\n+    name: String,\n+    var side: NetworkSide\n ) : ReadWriteStructure(name), IPlacement, PositionIterable {\n     override var xSize: Int = 0\n     override var ySize: Int = 0\n@@ -64,6 +66,7 @@ class TrackedStructure(\n     }\n \n     fun debugRender() {\n+        if (side == NetworkSide.SERVERBOUND) return\n         BlockOutline.blocks.clear()\n         BlockBorder.tags.clear()\n         cachedPositions.forEach {"
        },
        {
          "filename": "src/main/java/com/github/zly2006/reden/rvc/tracking/WorldInfo.kt",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -7,6 +7,7 @@ import com.github.zly2006.reden.debugger.breakpoint.IdentifierSerializer\n import com.github.zly2006.reden.utils.isClient\n import com.github.zly2006.reden.utils.server\n import kotlinx.serialization.Serializable\n+import kotlinx.serialization.Transient\n import net.minecraft.client.MinecraftClient\n import net.minecraft.registry.RegistryKey\n import net.minecraft.registry.RegistryKeys\n@@ -52,7 +53,7 @@ data class WorldInfo(\n             )\n         }\n \n-        private fun ofLocal(world: ServerWorld): WorldInfo {\n+        fun ofLocal(world: ServerWorld): WorldInfo {\n             return WorldInfo(\n                 isRemoteServer = false,\n                 localSaveName = world.server.session.directory.path.name,\n@@ -89,17 +90,22 @@ data class WorldInfo(\n         }\n     }\n \n+    @Transient\n+    var world: World? = null\n+\n     fun getWorld(): World? {\n+        if (world != null) return world\n         val registryKey = RegistryKey.of(RegistryKeys.WORLD, worldKey)\n-        if (isClient) {\n+        world = if (isClient) {\n             val server = MinecraftClient.getInstance().server\n             if (server != null) {\n-                return server.getWorld(registryKey)\n-            }\n-            return MinecraftClient.getInstance().world\n+                server.getWorld(registryKey)\n+            }else\n+                MinecraftClient.getInstance().world\n         } else {\n-            return server.getWorld(registryKey)\n+            server.getWorld(registryKey)\n         }\n+        return world\n     }\n }\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f143d52522c747753fe3d9e9a2e433db63935a28",
            "date": "2024-12-23T21:53:28Z",
            "author_login": "zly2006"
          },
          {
            "sha": "c2a76a4c72b4feb90e9dbbff6a53175eb6f9f973",
            "date": "2024-12-23T21:50:35Z",
            "author_login": "zly2006"
          },
          {
            "sha": "26d89c7fc430f6791caf91b164f331cfe13ca795",
            "date": "2024-10-23T14:33:00Z",
            "author_login": "zly2006"
          },
          {
            "sha": "6a92ea9ef2609b35496fcb4e199e02d780ea0695",
            "date": "2024-10-20T15:06:27Z",
            "author_login": "morllz"
          },
          {
            "sha": "44a7b519601db3051213f0e9d12833e122af4e06",
            "date": "2024-09-16T22:12:27Z",
            "author_login": "zly2006"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-22",
    "description": "Directory Traversal vulnerability in zly2006 Reden before v.0.2.514 allows a remote attacker to execute arbitrary code via the DEBUG_RTC_REQUEST_SYNC_DATA in KeyCallbacks.kt.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-05T06:15:10.323",
    "last_modified": "2024-11-21T09:08:09.547",
    "fix_date": "2024-01-09T08:05:17Z"
  },
  "references": [
    {
      "url": "https://gist.github.com/apple502j/193358682885fe1a6708309ce934e4ed",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/zly2006/reden-is-what-we-made/commit/44c5320f0a1ccaa764dd91df6a12e747f81fe63a",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://gist.github.com/apple502j/193358682885fe1a6708309ce934e4ed",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/zly2006/reden-is-what-we-made/commit/44c5320f0a1ccaa764dd91df6a12e747f81fe63a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.431452",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "reden-is-what-we-made",
    "owner": "zly2006",
    "created_at": "2023-05-15T04:53:08Z",
    "updated_at": "2025-01-24T06:45:11Z",
    "pushed_at": "2024-12-23T21:53:50Z",
    "size": 36915,
    "stars": 216,
    "forks": 22,
    "open_issues": 15,
    "watchers": 216,
    "has_security_policy": false,
    "default_branch": "1.21",
    "protected_branches": [],
    "languages": {
      "Kotlin": 682311,
      "Java": 273658
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-26T07:43:25.065158"
  }
}