{
  "cve_id": "CVE-2024-29888",
  "github_data": {
    "repository": "saleor/saleor",
    "fix_commit": "22a1aa3ef0bc54156405f69146788016a7f3f761",
    "related_commits": [
      "22a1aa3ef0bc54156405f69146788016a7f3f761",
      "39abb0f4e4fe6503f81bfbb871227e4f70bcdd5c",
      "47cedfd7d6524d79bdb04708edcdbb235874de6b",
      "997f7ea4f576543ec88679a86bfe1b14f7f2ff26",
      "b7cecda8b603f7472790150bb4508c7b655946d4",
      "d8ba545c16ad3153febc5b5be8fd2ef75da9fc95",
      "dccc2c842b4e2e09470929c80f07dc137e439182",
      "ef003c76a304c89ddb2dc65b7f1d5b3b2ba1c640",
      "22a1aa3ef0bc54156405f69146788016a7f3f761",
      "39abb0f4e4fe6503f81bfbb871227e4f70bcdd5c",
      "47cedfd7d6524d79bdb04708edcdbb235874de6b",
      "997f7ea4f576543ec88679a86bfe1b14f7f2ff26",
      "b7cecda8b603f7472790150bb4508c7b655946d4",
      "d8ba545c16ad3153febc5b5be8fd2ef75da9fc95",
      "dccc2c842b4e2e09470929c80f07dc137e439182",
      "ef003c76a304c89ddb2dc65b7f1d5b3b2ba1c640"
    ],
    "patch_url": "https://github.com/saleor/saleor/commit/22a1aa3ef0bc54156405f69146788016a7f3f761.patch",
    "fix_commit_details": {
      "sha": "22a1aa3ef0bc54156405f69146788016a7f3f761",
      "commit_date": "2024-03-01T09:02:18Z",
      "author": {
        "login": "Air-t",
        "type": "User",
        "stats": {
          "total_commits": 50,
          "average_weekly_commits": 0.08025682182985554,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 29
        }
      },
      "commit_message": {
        "title": "Fix  tax calculation for Click and Collect option. (#15505)",
        "length": 59,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 352,
        "additions": 310,
        "deletions": 42
      },
      "files": [
        {
          "filename": "saleor/checkout/error_codes.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -32,6 +32,7 @@ class CheckoutErrorCode(Enum):\n     INACTIVE_PAYMENT = \"inactive_payment\"\n     NON_EDITABLE_GIFT_LINE = \"non_editable_gift_line\"\n     NON_REMOVABLE_GIFT_LINE = \"non_removable_gift_line\"\n+    SHIPPING_CHANGE_FORBIDDEN = \"shipping_change_forbidden\"\n \n \n class OrderCreateFromCheckoutErrorCode(Enum):"
        },
        {
          "filename": "saleor/graphql/checkout/mutations/checkout_delivery_method_update.py",
          "status": "modified",
          "additions": 14,
          "deletions": 7,
          "patch": "@@ -21,6 +21,7 @@\n from ....shipping import interface as shipping_interface\n from ....shipping import models as shipping_models\n from ....shipping.utils import convert_to_shipping_method_data\n+from ....warehouse import WarehouseClickAndCollectOption\n from ....warehouse import models as warehouse_models\n from ....webhook.const import APP_ID_PREFIX\n from ....webhook.event_types import WebhookEventAsyncType, WebhookEventSyncType\n@@ -59,7 +60,9 @@ class Arguments:\n     class Meta:\n         description = (\n             \"Updates the delivery method (shipping method or pick up point) \"\n-            \"of the checkout.\" + ADDED_IN_31\n+            \"of the checkout. \"\n+            \"Updates the checkout shipping_address for click and collect delivery \"\n+            \"for a warehouse address. \" + ADDED_IN_31\n         )\n         doc_category = DOC_CATEGORY_CHECKOUT\n         error_type_class = CheckoutError\n@@ -238,6 +241,7 @@ def _update_delivery_method(\n         external_shipping_method: Optional[shipping_interface.ShippingMethodData],\n         collection_point: Optional[Warehouse],\n     ) -> None:\n+        checkout_fields_to_update = [\"shipping_method\", \"collection_point\"]\n         checkout = checkout_info.checkout\n         if external_shipping_method:\n             set_external_shipping_id(\n@@ -247,15 +251,19 @@ def _update_delivery_method(\n             delete_external_shipping_id(checkout=checkout)\n         checkout.shipping_method = shipping_method\n         checkout.collection_point = collection_point\n+        if (\n+            collection_point is not None\n+            and collection_point.click_and_collect_option\n+            == WarehouseClickAndCollectOption.LOCAL_STOCK\n+        ):\n+            checkout.shipping_address = collection_point.address\n+            checkout_info.shipping_address = collection_point.address\n+            checkout_fields_to_update += [\"shipping_address\"]\n         invalidate_prices_updated_fields = invalidate_checkout(\n             checkout_info, lines, manager, save=False\n         )\n         checkout.save(\n-            update_fields=[\n-                \"shipping_method\",\n-                \"collection_point\",\n-            ]\n-            + invalidate_prices_updated_fields\n+            update_fields=checkout_fields_to_update + invalidate_prices_updated_fields\n         )\n         get_or_create_checkout_metadata(checkout).save()\n         cls.call_event(manager.checkout_updated, checkout)\n@@ -324,7 +332,6 @@ def perform_mutation(\n                 }\n             )\n         type_name = cls._resolve_delivery_method_type(delivery_method_id)\n-\n         checkout_info = fetch_checkout_info(checkout, lines, manager)\n         if type_name == \"Warehouse\":\n             return cls.perform_on_collection_point("
        },
        {
          "filename": "saleor/graphql/checkout/mutations/checkout_shipping_address_update.py",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@\n from ..types import Checkout\n from .checkout_create import CheckoutAddressValidationRules\n from .utils import (\n+    ERROR_CC_ADDRESS_CHANGE_FORBIDDEN,\n     ERROR_DOES_NOT_SHIP,\n     check_lines_quantity,\n     get_checkout,\n@@ -153,6 +154,16 @@ def perform_mutation(\n                     )\n                 }\n             )\n+        # prevent from changing the shipping address when click and collect is used.\n+        if checkout.collection_point_id:\n+            raise ValidationError(\n+                {\n+                    \"shipping_address\": ValidationError(\n+                        ERROR_CC_ADDRESS_CHANGE_FORBIDDEN,\n+                        code=CheckoutErrorCode.SHIPPING_CHANGE_FORBIDDEN.value,\n+                    )\n+                }\n+            )\n         address_validation_rules = validation_rules or {}\n         shipping_address_instance = cls.validate_address(\n             shipping_address,"
        },
        {
          "filename": "saleor/graphql/checkout/mutations/utils.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -46,6 +46,10 @@\n \n \n ERROR_DOES_NOT_SHIP = \"This checkout doesn't need shipping\"\n+ERROR_CC_ADDRESS_CHANGE_FORBIDDEN = (\n+    \"Can't change shipping address manually. \"\n+    \"For click and collect delivery, address is set to a warehouse address.\"\n+)\n \n \n @dataclass"
        },
        {
          "filename": "saleor/graphql/checkout/tests/mutations/test_checkout_delivery_method_update.py",
          "status": "modified",
          "additions": 251,
          "deletions": 33,
          "patch": "@@ -447,7 +447,116 @@ def test_checkout_delivery_method_update_shipping_zone_with_channel(\n     assert checkout.shipping_method == shipping_method\n \n \n-@pytest.mark.parametrize(\"is_valid_delivery_method\", [True, False])\n+@pytest.mark.parametrize(\n+    (\"delivery_method\", \"node_name\", \"attribute_name\"),\n+    [\n+        (\"shipping_method\", \"ShippingMethod\", \"shipping_method\"),\n+    ],\n+    indirect=(\"delivery_method\",),\n+)\n+@patch(\n+    \"saleor.graphql.checkout.mutations.checkout_delivery_method_update.\"\n+    \"clean_delivery_method\"\n+)\n+def test_checkout_delivery_method_update_valid_method_not_all_shipping_data(\n+    mock_clean_delivery,\n+    api_client,\n+    delivery_method,\n+    node_name,\n+    attribute_name,\n+    checkout_with_item_for_cc,\n+):\n+    # given\n+    mock_clean_delivery.return_value = True\n+\n+    checkout = checkout_with_item_for_cc\n+    checkout.shipping_address = Address.objects.create(country=\"US\")\n+    checkout.save()\n+    manager = get_plugins_manager(allow_replica=False)\n+    lines, _ = fetch_checkout_lines(checkout)\n+    checkout_info = fetch_checkout_info(checkout, lines, manager)\n+    shipping_method_data = convert_to_shipping_method_data(\n+        delivery_method,\n+        delivery_method.channel_listings.get(),\n+    )\n+    query = MUTATION_UPDATE_DELIVERY_METHOD\n+    mock_clean_delivery.return_value = True\n+\n+    method_id = graphene.Node.to_global_id(node_name, delivery_method.id)\n+\n+    # when\n+    response = api_client.post_graphql(\n+        query, {\"id\": to_global_id_or_none(checkout), \"deliveryMethodId\": method_id}\n+    )\n+\n+    # then\n+    data = get_graphql_content(response)[\"data\"][\"checkoutDeliveryMethodUpdate\"]\n+    checkout.refresh_from_db()\n+\n+    mock_clean_delivery.assert_called_once_with(\n+        checkout_info=checkout_info, lines=lines, method=shipping_method_data\n+    )\n+    errors = data[\"errors\"]\n+\n+    assert not errors\n+    assert getattr(checkout, attribute_name) == delivery_method\n+\n+\n+@pytest.mark.parametrize(\n+    \"delivery_method, node_name, attribute_name\",  # noqa: PT006\n+    [\n+        (\"warehouse\", \"Warehouse\", \"collection_point\"),\n+    ],\n+    indirect=(\"delivery_method\",),\n+)\n+@patch(\n+    \"saleor.graphql.checkout.mutations.checkout_delivery_method_update.\"\n+    \"clean_delivery_method\"\n+)\n+def test_checkout_delivery_method_update_valid_method_not_all_shipping_data_for_cc(\n+    mock_clean_delivery,\n+    api_client,\n+    delivery_method,\n+    node_name,\n+    attribute_name,\n+    checkout_with_item_for_cc,\n+    warehouse_for_cc,\n+):\n+    # given\n+    mock_clean_delivery.return_value = True\n+    checkout_address = Address.objects.create(country=\"US\")\n+    checkout = checkout_with_item_for_cc\n+    checkout.shipping_address = checkout_address\n+    checkout.save()\n+    manager = get_plugins_manager(allow_replica=False)\n+    lines, _ = fetch_checkout_lines(checkout)\n+    checkout_info = fetch_checkout_info(checkout, lines, manager)\n+\n+    shipping_method_data = delivery_method\n+    checkout_info.shipping_address = shipping_method_data.address\n+    query = MUTATION_UPDATE_DELIVERY_METHOD\n+    mock_clean_delivery.return_value = True\n+\n+    method_id = graphene.Node.to_global_id(node_name, delivery_method.id)\n+\n+    # when\n+    response = api_client.post_graphql(\n+        query, {\"id\": to_global_id_or_none(checkout), \"deliveryMethodId\": method_id}\n+    )\n+\n+    # then\n+    data = get_graphql_content(response)[\"data\"][\"checkoutDeliveryMethodUpdate\"]\n+    checkout.refresh_from_db()\n+\n+    mock_clean_delivery.assert_called_once_with(\n+        checkout_info=checkout_info, lines=lines, method=shipping_method_data\n+    )\n+    errors = data[\"errors\"]\n+    assert checkout.shipping_address == delivery_method.address\n+    assert not errors\n+    assert getattr(checkout, attribute_name) == delivery_method\n+\n+\n @pytest.mark.parametrize(\n     (\"delivery_method\", \"node_name\", \"attribute_name\"),\n     [\n@@ -460,17 +569,16 @@ def test_checkout_delivery_method_update_shipping_zone_with_channel(\n     \"saleor.graphql.checkout.mutations.checkout_delivery_method_update.\"\n     \"clean_delivery_method\"\n )\n-def test_checkout_delivery_method_update_with_not_all_required_shipping_address_data(\n+def test_checkout_delivery_method_update_invalid_method_not_all_shipping_data(\n     mock_clean_delivery,\n     api_client,\n     delivery_method,\n     node_name,\n     attribute_name,\n     checkout_with_item_for_cc,\n-    is_valid_delivery_method,\n ):\n     # given\n-    mock_clean_delivery.return_value = is_valid_delivery_method\n+    mock_clean_delivery.return_value = False\n \n     checkout = checkout_with_item_for_cc\n     checkout.shipping_address = Address.objects.create(country=\"US\")\n@@ -486,7 +594,7 @@ def test_checkout_delivery_method_update_with_not_all_required_shipping_address_\n             delivery_method.channel_listings.get(),\n         )\n     query = MUTATION_UPDATE_DELIVERY_METHOD\n-    mock_clean_delivery.return_value = is_valid_delivery_method\n+    mock_clean_delivery.return_value = False\n \n     method_id = graphene.Node.to_global_id(node_name, delivery_method.id)\n \n@@ -503,22 +611,16 @@ def test_checkout_delivery_method_update_with_not_all_required_shipping_address_\n         checkout_info=checkout_info, lines=lines, method=shipping_method_data\n     )\n     errors = data[\"errors\"]\n-    if is_valid_delivery_method:\n-        assert not errors\n-        assert getattr(checkout, attribute_name) == delivery_method\n-    else:\n-        assert len(errors) == 1\n-        assert errors[0][\"field\"] == \"deliveryMethodId\"\n-        assert (\n-            errors[0][\"code\"] == CheckoutErrorCode.DELIVERY_METHOD_NOT_APPLICABLE.name\n-        )\n-        assert checkout.shipping_method is None\n-        assert checkout.collection_point is None\n+\n+    assert len(errors) == 1\n+    assert errors[0][\"field\"] == \"deliveryMethodId\"\n+    assert errors[0][\"code\"] == CheckoutErrorCode.DELIVERY_METHOD_NOT_APPLICABLE.name\n+    assert checkout.shipping_method is None\n+    assert checkout.collection_point is None\n \n \n-@pytest.mark.parametrize(\"is_valid_delivery_method\", [True, False])\n @pytest.mark.parametrize(\n-    (\"delivery_method\", \"node_name\", \"attribute_name\"),\n+    \"delivery_method, node_name, attribute_name\",  # noqa: PT006\n     [\n         (\"warehouse\", \"Warehouse\", \"collection_point\"),\n         (\"shipping_method\", \"ShippingMethod\", \"shipping_method\"),\n@@ -529,17 +631,16 @@ def test_checkout_delivery_method_update_with_not_all_required_shipping_address_\n     \"saleor.graphql.checkout.mutations.checkout_delivery_method_update.\"\n     \"clean_delivery_method\"\n )\n-def test_checkout_delivery_method_update_with_not_valid_address_data(\n+def test_checkout_delivery_method_update_invalid_with_not_valid_address_data(\n     mock_clean_delivery,\n     api_client,\n     delivery_method,\n     node_name,\n     attribute_name,\n     checkout_with_item_for_cc,\n-    is_valid_delivery_method,\n ):\n     # given\n-    mock_clean_delivery.return_value = is_valid_delivery_method\n+    mock_clean_delivery.return_value = False\n \n     checkout = checkout_with_item_for_cc\n     checkout.shipping_address = Address.objects.create(\n@@ -561,7 +662,7 @@ def test_checkout_delivery_method_update_with_not_valid_address_data(\n             delivery_method.channel_listings.get(),\n         )\n     query = MUTATION_UPDATE_DELIVERY_METHOD\n-    mock_clean_delivery.return_value = is_valid_delivery_method\n+    mock_clean_delivery.return_value = False\n \n     method_id = graphene.Node.to_global_id(node_name, delivery_method.id)\n \n@@ -578,17 +679,134 @@ def test_checkout_delivery_method_update_with_not_valid_address_data(\n         checkout_info=checkout_info, lines=lines, method=shipping_method_data\n     )\n     errors = data[\"errors\"]\n-    if is_valid_delivery_method:\n-        assert not errors\n-        assert getattr(checkout, attribute_name) == delivery_method\n-    else:\n-        assert len(errors) == 1\n-        assert errors[0][\"field\"] == \"deliveryMethodId\"\n-        assert (\n-            errors[0][\"code\"] == CheckoutErrorCode.DELIVERY_METHOD_NOT_APPLICABLE.name\n-        )\n-        assert checkout.shipping_method is None\n-        assert checkout.collection_point is None\n+\n+    assert len(errors) == 1\n+    assert errors[0][\"field\"] == \"deliveryMethodId\"\n+    assert errors[0][\"code\"] == CheckoutErrorCode.DELIVERY_METHOD_NOT_APPLICABLE.name\n+    assert checkout.shipping_method is None\n+    assert checkout.collection_point is None\n+\n+\n+@pytest.mark.parametrize(\n+    \"delivery_method, node_name, attribute_name\",  # noqa: PT006\n+    [\n+        (\"shipping_method\", \"ShippingMethod\", \"shipping_method\"),\n+    ],\n+    indirect=(\"delivery_method\",),\n+)\n+@patch(\n+    \"saleor.graphql.checkout.mutations.checkout_delivery_method_update.\"\n+    \"clean_delivery_method\"\n+)\n+def test_checkout_delivery_method_update_valid_with_not_valid_address_data(\n+    mock_clean_delivery,\n+    api_client,\n+    delivery_method,\n+    node_name,\n+    attribute_name,\n+    checkout_with_item_for_cc,\n+):\n+    # given\n+    mock_clean_delivery.return_value = True\n+\n+    checkout = checkout_with_item_for_cc\n+    checkout.shipping_address = Address.objects.create(\n+        country=\"US\",\n+        city=\"New York\",\n+        city_area=\"ABC\",\n+        street_address_1=\"New street\",\n+        postal_code=\"53-601\",\n+    )\n+    checkout.save()\n+    manager = get_plugins_manager(allow_replica=False)\n+    lines, _ = fetch_checkout_lines(checkout)\n+    checkout_info = fetch_checkout_info(checkout, lines, manager)\n+\n+    shipping_method_data = convert_to_shipping_method_data(\n+        delivery_method,\n+        delivery_method.channel_listings.get(),\n+    )\n+    query = MUTATION_UPDATE_DELIVERY_METHOD\n+    mock_clean_delivery.return_value = True\n+\n+    method_id = graphene.Node.to_global_id(node_name, delivery_method.id)\n+\n+    # when\n+    response = api_client.post_graphql(\n+        query, {\"id\": to_global_id_or_none(checkout), \"deliveryMethodId\": method_id}\n+    )\n+\n+    # then\n+    data = get_graphql_content(response)[\"data\"][\"checkoutDeliveryMethodUpdate\"]\n+    checkout.refresh_from_db()\n+\n+    mock_clean_delivery.assert_called_once_with(\n+        checkout_info=checkout_info, lines=lines, method=shipping_method_data\n+    )\n+    errors = data[\"errors\"]\n+\n+    assert not errors\n+    assert getattr(checkout, attribute_name) == delivery_method\n+\n+\n+@pytest.mark.parametrize(\n+    \"delivery_method, node_name, attribute_name\",  # noqa: PT006\n+    [\n+        (\"warehouse\", \"Warehouse\", \"collection_point\"),\n+    ],\n+    indirect=(\"delivery_method\",),\n+)\n+@patch(\n+    \"saleor.graphql.checkout.mutations.checkout_delivery_method_update.\"\n+    \"clean_delivery_method\"\n+)\n+def test_checkout_delivery_method_update_valid_with_not_valid_address_data_for_cc(\n+    mock_clean_delivery,\n+    api_client,\n+    delivery_method,\n+    node_name,\n+    attribute_name,\n+    checkout_with_item_for_cc,\n+):\n+    # given\n+    mock_clean_delivery.return_value = True\n+\n+    checkout = checkout_with_item_for_cc\n+    checkout.shipping_address = Address.objects.create(\n+        country=\"US\",\n+        city=\"New York\",\n+        city_area=\"ABC\",\n+        street_address_1=\"New street\",\n+        postal_code=\"53-601\",\n+    )\n+    checkout.save()\n+    manager = get_plugins_manager(allow_replica=False)\n+    lines, _ = fetch_checkout_lines(checkout)\n+    checkout_info = fetch_checkout_info(checkout, lines, manager)\n+\n+    shipping_method_data = delivery_method\n+    checkout_info.shipping_address = shipping_method_data.address\n+    query = MUTATION_UPDATE_DELIVERY_METHOD\n+    mock_clean_delivery.return_value = True\n+\n+    method_id = graphene.Node.to_global_id(node_name, delivery_method.id)\n+\n+    # when\n+    response = api_client.post_graphql(\n+        query, {\"id\": to_global_id_or_none(checkout), \"deliveryMethodId\": method_id}\n+    )\n+\n+    # then\n+    data = get_graphql_content(response)[\"data\"][\"checkoutDeliveryMethodUpdate\"]\n+    checkout.refresh_from_db()\n+\n+    mock_clean_delivery.assert_called_once_with(\n+        checkout_info=checkout_info, lines=lines, method=shipping_method_data\n+    )\n+    errors = data[\"errors\"]\n+\n+    assert not errors\n+    assert getattr(checkout, attribute_name) == delivery_method\n \n \n def test_with_active_problems_flow("
        },
        {
          "filename": "saleor/graphql/checkout/tests/mutations/test_checkout_shipping_address_update.py",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -989,3 +989,29 @@ def test_with_active_problems_flow(\n \n     # then\n     assert not content[\"data\"][\"checkoutShippingAddressUpdate\"][\"errors\"]\n+\n+\n+def test_checkout_shipping_address_update_with_collection_point_already_set(\n+    user_api_client,\n+    checkout_with_item,\n+    graphql_address_data,\n+    warehouse_for_cc,\n+):\n+    checkout = checkout_with_item\n+    checkout.collection_point_id = warehouse_for_cc.id\n+    checkout.save(update_fields=[\"collection_point_id\"])\n+\n+    shipping_address = graphql_address_data\n+    variables = {\n+        \"id\": to_global_id_or_none(checkout),\n+        \"shippingAddress\": shipping_address,\n+    }\n+\n+    response = user_api_client.post_graphql(\n+        MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE, variables\n+    )\n+    content = get_graphql_content(response)\n+    data = content[\"data\"][\"checkoutShippingAddressUpdate\"]\n+    errors = data[\"errors\"]\n+    assert errors[0][\"code\"] == CheckoutErrorCode.SHIPPING_CHANGE_FORBIDDEN.name\n+    assert errors[0][\"field\"] == \"shippingAddress\""
        },
        {
          "filename": "saleor/graphql/schema.graphql",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -19056,7 +19056,7 @@ type Mutation {\n   ): CheckoutShippingMethodUpdate @doc(category: \"Checkout\") @webhookEventsInfo(asyncEvents: [CHECKOUT_UPDATED], syncEvents: [SHIPPING_LIST_METHODS_FOR_CHECKOUT]) @deprecated(reason: \"This field will be removed in Saleor 4.0. Use `checkoutDeliveryMethodUpdate` instead.\")\n \n   \"\"\"\n-  Updates the delivery method (shipping method or pick up point) of the checkout.\n+  Updates the delivery method (shipping method or pick up point) of the checkout. Updates the checkout shipping_address for click and collect delivery for a warehouse address. \n   \n   Added in Saleor 3.1.\n   \n@@ -28897,6 +28897,7 @@ enum CheckoutErrorCode @doc(category: \"Checkout\") {\n   INACTIVE_PAYMENT\n   NON_EDITABLE_GIFT_LINE\n   NON_REMOVABLE_GIFT_LINE\n+  SHIPPING_CHANGE_FORBIDDEN\n }\n \n \"\"\"\n@@ -29333,7 +29334,7 @@ type CheckoutShippingMethodUpdate @doc(category: \"Checkout\") @webhookEventsInfo(\n }\n \n \"\"\"\n-Updates the delivery method (shipping method or pick up point) of the checkout.\n+Updates the delivery method (shipping method or pick up point) of the checkout. Updates the checkout shipping_address for click and collect delivery for a warehouse address. \n \n Added in Saleor 3.1.\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "486877e53e05c27b4691647d1e0e7cc0f47e91bf",
            "date": "2025-01-14T09:18:31Z",
            "author_login": "patrys"
          },
          {
            "sha": "23b8d28989445f33ed35363156a8b675eb610472",
            "date": "2025-01-13T12:06:01Z",
            "author_login": "patrys"
          },
          {
            "sha": "789e33510a4225f20a0ccc9634ff7b49bb9ca912",
            "date": "2025-01-13T14:36:25Z",
            "author_login": "korycins"
          },
          {
            "sha": "83efad25c0813b7b3fe2741781a263e22ff84e1a",
            "date": "2025-01-13T08:42:38Z",
            "author_login": "szczecha"
          },
          {
            "sha": "5f8b1cc4db2d54295193eb92d7b862164ce197ce",
            "date": "2025-01-10T13:13:49Z",
            "author_login": "korycins"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-359",
    "description": "Saleor is an e-commerce platform that serves high-volume companies. When using `Pickup: Local stock only` click-and-collect as a delivery method in specific conditions the customer could overwrite the warehouse address with its own, which exposes its address as click-and-collect address. This issue has been patched in versions: `3.14.61`, `3.15.37`, `3.16.34`, `3.17.32`, `3.18.28`, `3.19.15`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-03-27T19:15:49.410",
    "last_modified": "2024-11-21T09:08:33.193",
    "fix_date": "2024-03-01T09:02:18Z"
  },
  "references": [
    {
      "url": "https://github.com/saleor/saleor/commit/22a1aa3ef0bc54156405f69146788016a7f3f761",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/39abb0f4e4fe6503f81bfbb871227e4f70bcdd5c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/47cedfd7d6524d79bdb04708edcdbb235874de6b",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/997f7ea4f576543ec88679a86bfe1b14f7f2ff26",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/b7cecda8b603f7472790150bb4508c7b655946d4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/d8ba545c16ad3153febc5b5be8fd2ef75da9fc95",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/dccc2c842b4e2e09470929c80f07dc137e439182",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/ef003c76a304c89ddb2dc65b7f1d5b3b2ba1c640",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/pull/15694",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/pull/15697",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/security/advisories/GHSA-mrj3-f2h4-7w45",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/22a1aa3ef0bc54156405f69146788016a7f3f761",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/39abb0f4e4fe6503f81bfbb871227e4f70bcdd5c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/47cedfd7d6524d79bdb04708edcdbb235874de6b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/997f7ea4f576543ec88679a86bfe1b14f7f2ff26",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/b7cecda8b603f7472790150bb4508c7b655946d4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/d8ba545c16ad3153febc5b5be8fd2ef75da9fc95",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/dccc2c842b4e2e09470929c80f07dc137e439182",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/ef003c76a304c89ddb2dc65b7f1d5b3b2ba1c640",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/pull/15694",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/pull/15697",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/security/advisories/GHSA-mrj3-f2h4-7w45",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.916575",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saleor",
    "owner": "saleor",
    "created_at": "2013-02-12T16:46:39Z",
    "updated_at": "2025-01-14T09:18:44Z",
    "pushed_at": "2025-01-14T13:41:59Z",
    "size": 264902,
    "stars": 20990,
    "forks": 5549,
    "open_issues": 341,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.20"
    ],
    "languages": {
      "Python": 22045293,
      "HTML": 249642,
      "Dockerfile": 2521,
      "Shell": 439,
      "Makefile": 121
    },
    "commit_activity": {
      "total_commits_last_year": 715,
      "avg_commits_per_week": 13.75,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:42:28.369369"
  }
}