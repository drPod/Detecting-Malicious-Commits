{
  "cve_id": "CVE-2024-29904",
  "github_data": {
    "repository": "codeigniter4/CodeIgniter4",
    "fix_commit": "fa851acbae7ae4c5a97f8f38ae87aa0822a334c0",
    "related_commits": [
      "fa851acbae7ae4c5a97f8f38ae87aa0822a334c0",
      "fa851acbae7ae4c5a97f8f38ae87aa0822a334c0"
    ],
    "patch_url": "https://github.com/codeigniter4/CodeIgniter4/commit/fa851acbae7ae4c5a97f8f38ae87aa0822a334c0.patch",
    "fix_commit_details": {
      "sha": "fa851acbae7ae4c5a97f8f38ae87aa0822a334c0",
      "commit_date": "2024-03-29T02:34:46Z",
      "author": {
        "login": "kenjis",
        "type": "User",
        "stats": {
          "total_commits": 8664,
          "average_weekly_commits": 17.64562118126273,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 193
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-39fp-mqmm-gxj6",
        "length": 79,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 351,
        "additions": 327,
        "deletions": 24
      },
      "files": [
        {
          "filename": "app/Config/App.php",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -59,6 +59,30 @@ class App extends BaseConfig\n      */\n     public string $uriProtocol = 'REQUEST_URI';\n \n+    /*\n+    |--------------------------------------------------------------------------\n+    | Allowed URL Characters\n+    |--------------------------------------------------------------------------\n+    |\n+    | This lets you specify which characters are permitted within your URLs.\n+    | When someone tries to submit a URL with disallowed characters they will\n+    | get a warning message.\n+    |\n+    | As a security measure you are STRONGLY encouraged to restrict URLs to\n+    | as few characters as possible.\n+    |\n+    | By default, only these are allowed: `a-z 0-9~%.:_-`\n+    |\n+    | Set an empty string to allow all characters -- but only if you are insane.\n+    |\n+    | The configured value is actually a regular expression character group\n+    | and it will be used as: '/\\A[<permittedURIChars>]+\\z/iu'\n+    |\n+    | DO NOT CHANGE THIS UNLESS YOU FULLY UNDERSTAND THE REPERCUSSIONS!!\n+    |\n+    */\n+    public string $permittedURIChars = 'a-z 0-9~%.:_\\-';\n+\n     /**\n      * --------------------------------------------------------------------------\n      * Default Locale"
        },
        {
          "filename": "phpstan-baseline.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -13713,7 +13713,7 @@\n ];\n $ignoreErrors[] = [\n \t'message' => '#^Assigning \\'GET\\' directly on offset \\'REQUEST_METHOD\\' of \\\\$_SERVER is discouraged\\\\.$#',\n-\t'count' => 35,\n+\t'count' => 36,\n \t'path' => __DIR__ . '/tests/system/Filters/FiltersTest.php',\n ];\n $ignoreErrors[] = ["
        },
        {
          "filename": "system/CodeIgniter.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -449,6 +449,7 @@ protected function handleRequest(?RouteCollectionInterface $routes, Cache $cache\n \n         $routeFilter = $this->tryToRouteIt($routes);\n \n+        // $uri is URL-encoded.\n         $uri = $this->determinePath();\n \n         if ($this->enableFilters) {\n@@ -813,6 +814,7 @@ protected function tryToRouteIt(?RouteCollectionInterface $routes = null)\n         // $routes is defined in Config/Routes.php\n         $this->router = Services::router($routes, $this->request);\n \n+        // $path is URL-encoded.\n         $path = $this->determinePath();\n \n         $this->benchmark->stop('bootstrap');"
        },
        {
          "filename": "system/Filters/Filters.php",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -245,6 +245,9 @@ public function initialize(?string $uri = null)\n             return $this;\n         }\n \n+        // Decode URL-encoded string\n+        $uri = urldecode($uri);\n+\n         $this->processGlobals($uri);\n         $this->processMethods();\n         $this->processFilters($uri);\n@@ -639,7 +642,7 @@ private function checkExcept(string $uri, $paths): bool\n     /**\n      * Check the URI path as pseudo-regex\n      *\n-     * @param string $uri   URI path relative to baseURL (all lowercase)\n+     * @param string $uri   URI path relative to baseURL (all lowercase, URL-decoded)\n      * @param array  $paths The except path patterns\n      */\n     private function checkPseudoRegex(string $uri, array $paths): bool\n@@ -652,7 +655,7 @@ private function checkPseudoRegex(string $uri, array $paths): bool\n             $path = strtolower(str_replace('*', '.*', $path));\n \n             // Does this rule apply here?\n-            if (preg_match('#^' . $path . '$#', $uri, $match) === 1) {\n+            if (preg_match('#\\A' . $path . '\\z#u', $uri, $match) === 1) {\n                 return true;\n             }\n         }"
        },
        {
          "filename": "system/HTTP/Exceptions/BadRequestException.php",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+<?php\n+\n+/**\n+ * This file is part of CodeIgniter 4 framework.\n+ *\n+ * (c) CodeIgniter Foundation <admin@codeigniter.com>\n+ *\n+ * For the full copyright and license information, please view\n+ * the LICENSE file that was distributed with this source code.\n+ */\n+\n+namespace CodeIgniter\\HTTP\\Exceptions;\n+\n+use CodeIgniter\\Exceptions\\HTTPExceptionInterface;\n+use RuntimeException;\n+\n+/**\n+ * 400 Bad Request\n+ */\n+class BadRequestException extends RuntimeException implements HTTPExceptionInterface\n+{\n+    /**\n+     * HTTP status code for Bad Request\n+     *\n+     * @var int\n+     */\n+    protected $code = 400; // @phpstan-ignore-line\n+}"
        },
        {
          "filename": "system/Language/Language.php",
          "status": "modified",
          "additions": 27,
          "deletions": 3,
          "patch": "@@ -12,7 +12,7 @@\n namespace CodeIgniter\\Language;\n \n use Config\\Services;\n-use InvalidArgumentException;\n+use IntlException;\n use MessageFormatter;\n \n /**\n@@ -194,9 +194,33 @@ protected function formatMessage($message, array $args = [])\n \n         $formatted = MessageFormatter::formatMessage($this->locale, $message, $args);\n         if ($formatted === false) {\n-            throw new InvalidArgumentException(\n-                lang('Language.invalidMessageFormat', [$message, implode(',', $args)])\n+            // Format again to get the error message.\n+            try {\n+                $fmt       = new MessageFormatter($this->locale, $message);\n+                $formatted = $fmt->format($args);\n+                $fmtError  = '\"' . $fmt->getErrorMessage() . '\" (' . $fmt->getErrorCode() . ')';\n+            } catch (IntlException $e) {\n+                $fmtError = '\"' . $e->getMessage() . '\" (' . $e->getCode() . ')';\n+            }\n+\n+            $argsString = implode(\n+                ', ',\n+                array_map(static fn ($element) => '\"' . $element . '\"', $args)\n+            );\n+            $argsUrlEncoded = implode(\n+                ', ',\n+                array_map(static fn ($element) => '\"' . rawurlencode($element) . '\"', $args)\n             );\n+\n+            log_message(\n+                'error',\n+                'Language.invalidMessageFormat: $message: \"' . $message\n+                . '\", $args: ' . $argsString\n+                . ' (urlencoded: ' . $argsUrlEncoded . '),'\n+                . ' MessageFormatter Error: ' . $fmtError\n+            );\n+\n+            return $message . \"\\n\u3010Warning\u3011Also, invalid string(s) was passed to the Language class. See log file for details.\";\n         }\n \n         return $formatted;"
        },
        {
          "filename": "system/Router/Router.php",
          "status": "modified",
          "additions": 33,
          "deletions": 2,
          "patch": "@@ -13,6 +13,7 @@\n \n use Closure;\n use CodeIgniter\\Exceptions\\PageNotFoundException;\n+use CodeIgniter\\HTTP\\Exceptions\\BadRequestException;\n use CodeIgniter\\HTTP\\Exceptions\\RedirectException;\n use CodeIgniter\\HTTP\\Request;\n use CodeIgniter\\HTTP\\ResponseInterface;\n@@ -120,11 +121,23 @@ class Router implements RouterInterface\n \n     protected ?AutoRouterInterface $autoRouter = null;\n \n+    /**\n+     * Permitted URI chars\n+     *\n+     * The default value is `''` (do not check) for backward compatibility.\n+     */\n+    protected string $permittedURIChars = '';\n+\n     /**\n      * Stores a reference to the RouteCollection object.\n      */\n     public function __construct(RouteCollectionInterface $routes, ?Request $request = null)\n     {\n+        $config = config(App::class);\n+        if (isset($config->permittedURIChars)) {\n+            $this->permittedURIChars = $config->permittedURIChars;\n+        }\n+\n         $this->collection = $routes;\n \n         // These are only for auto-routing\n@@ -179,6 +192,8 @@ public function handle(?string $uri = null)\n         // Decode URL-encoded string\n         $uri = urldecode($uri);\n \n+        $this->checkDisallowedChars($uri);\n+\n         // Restart filterInfo\n         $this->filterInfo  = null;\n         $this->filtersInfo = [];\n@@ -433,7 +448,7 @@ protected function checkRoutes(string $uri): bool\n                     }, is_array($handler) ? key($handler) : $handler);\n \n                     throw new RedirectException(\n-                        preg_replace('#^' . $routeKey . '$#u', $redirectTo, $uri),\n+                        preg_replace('#\\A' . $routeKey . '\\z#u', $redirectTo, $uri),\n                         $this->collection->getRedirectCode($routeKey)\n                     );\n                 }\n@@ -487,7 +502,7 @@ protected function checkRoutes(string $uri): bool\n                     }\n \n                     // Using back-references\n-                    $handler = preg_replace('#^' . $routeKey . '$#u', $handler, $uri);\n+                    $handler = preg_replace('#\\A' . $routeKey . '\\z#u', $handler, $uri);\n                 }\n \n                 $this->setRequest(explode('/', $handler));\n@@ -676,4 +691,20 @@ protected function setMatchedRoute(string $route, $handler): void\n \n         $this->matchedRouteOptions = $this->collection->getRoutesOptions($route);\n     }\n+\n+    /**\n+     * Checks disallowed characters\n+     */\n+    private function checkDisallowedChars(string $uri): void\n+    {\n+        foreach (explode('/', $uri) as $segment) {\n+            if ($segment !== '' && $this->permittedURIChars !== ''\n+                && preg_match('/\\A[' . $this->permittedURIChars . ']+\\z/iu', $segment) !== 1\n+            ) {\n+                throw new BadRequestException(\n+                    'The URI you submitted has disallowed characters: \"' . $segment . '\"'\n+                );\n+            }\n+        }\n+    }\n }"
        },
        {
          "filename": "tests/system/Filters/FiltersTest.php",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -1056,6 +1056,52 @@ public function testMatchesURICaseInsensitively(): void\n         $this->assertSame($expected, $filters->initialize($uri)->getFilters());\n     }\n \n+    public function testMatchesURIWithUnicode(): void\n+    {\n+        $_SERVER['REQUEST_METHOD'] = 'GET';\n+\n+        $config = [\n+            'aliases' => [\n+                'foo'  => '',\n+                'bar'  => '',\n+                'frak' => '',\n+                'baz'  => '',\n+            ],\n+            'globals' => [\n+                'before' => [\n+                    'foo' => ['except' => '\u65e5\u672c\u8a9e/*'],\n+                    'bar',\n+                ],\n+                'after' => [\n+                    'foo' => ['except' => '\u65e5\u672c\u8a9e/*'],\n+                    'baz',\n+                ],\n+            ],\n+            'filters' => [\n+                'frak' => [\n+                    'before' => ['\u65e5\u672c\u8a9e/*'],\n+                    'after'  => ['\u65e5\u672c\u8a9e/*'],\n+                ],\n+            ],\n+        ];\n+        $filtersConfig = $this->createConfigFromArray(FiltersConfig::class, $config);\n+        $filters       = $this->createFilters($filtersConfig);\n+\n+        // URIs passed to Filters are URL-encoded.\n+        $uri      = '%E6%97%A5%E6%9C%AC%E8%AA%9E/foo/bar';\n+        $expected = [\n+            'before' => [\n+                'bar',\n+                'frak',\n+            ],\n+            'after' => [\n+                'baz',\n+                'frak',\n+            ],\n+        ];\n+        $this->assertSame($expected, $filters->initialize($uri)->getFilters());\n+    }\n+\n     /**\n      * @see https://github.com/codeigniter4/CodeIgniter4/issues/1907\n      */"
        },
        {
          "filename": "tests/system/HTTP/URITest.php",
          "status": "modified",
          "additions": 18,
          "deletions": 6,
          "patch": "@@ -473,8 +473,8 @@ public static function providePathGetsFiltered(): iterable\n     {\n         return [\n             'dot-segment' => [\n-                '/./path/to/nowhere',\n-                '/path/to/nowhere',\n+                '/./path/to/nowhere', // path\n+                '/path/to/nowhere',   // expectedPath\n             ],\n             'double-dots' => [\n                 '/../path/to/nowhere',\n@@ -484,18 +484,30 @@ public static function providePathGetsFiltered(): iterable\n                 './path/to/nowhere',\n                 '/path/to/nowhere',\n             ],\n-            'start-double' => [\n+            'start-double-dot' => [\n                 '../path/to/nowhere',\n                 '/path/to/nowhere',\n             ],\n-            'decoded' => [\n-                '../%41path',\n+            'decode-percent-encoded-chars' => [\n+                '/%41path',\n                 '/Apath',\n             ],\n-            'encoded' => [\n+            'decode-slash' => [\n+                '/a%2Fb',\n+                '/a/b',\n+            ],\n+            'encode-unreserved-chars' => [\n                 '/path^here',\n                 '/path%5Ehere',\n             ],\n+            'encode-multibyte-chars' => [\n+                '/\u3042\u3044\u3046',\n+                '/%E3%81%82%E3%81%84%E3%81%86',\n+            ],\n+            'encode-invalid-percent-encoding' => [\n+                '/pa%2-th',\n+                '/pa%252-th',\n+            ],\n         ];\n     }\n "
        },
        {
          "filename": "tests/system/Language/LanguageTest.php",
          "status": "modified",
          "additions": 5,
          "deletions": 10,
          "patch": "@@ -14,7 +14,6 @@\n use CodeIgniter\\Test\\CIUnitTestCase;\n use CodeIgniter\\Test\\Mock\\MockLanguage;\n use Config\\Services;\n-use InvalidArgumentException;\n use MessageFormatter;\n use Tests\\Support\\Language\\SecondMockLanguage;\n \n@@ -137,18 +136,14 @@ public function testGetLineInvalidFormatMessage(): void\n             $this->markTestSkipped('No intl support.');\n         }\n \n-        $this->expectException(InvalidArgumentException::class);\n-        $this->expectExceptionMessage(\n-            'Invalid message format: \"\u062a\u0645 \u0627\u0644\u0643\u0634\u0641 \u0639\u0646 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 {0} \u0628\u0633\u0628\u0628 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0634\u0648\u0647\u062f\u062a {1 \u060c \u0639\u062f\u062f} \u0645\u0631\u0629 \u0641\u064a {2} \u0641\u064a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0645\u062e\u062a\u0631\u0642\u0629.\", args: \"password,hits,wording\"'\n-        );\n-\n         $this->lang->setLocale('ar');\n \n-        $this->lang->setData('Auth', [\n-            'errorPasswordPwned' => '\u062a\u0645 \u0627\u0644\u0643\u0634\u0641 \u0639\u0646 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 {0} \u0628\u0633\u0628\u0628 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0634\u0648\u0647\u062f\u062a {1 \u060c \u0639\u062f\u062f} \u0645\u0631\u0629 \u0641\u064a {2} \u0641\u064a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0645\u062e\u062a\u0631\u0642\u0629.',\n-        ]);\n+        $line = '\u062a\u0645 \u0627\u0644\u0643\u0634\u0641 \u0639\u0646 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 {0} \u0628\u0633\u0628\u0628 \u0627\u062e\u062a\u0631\u0627\u0642 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0634\u0648\u0647\u062f\u062a {1 \u060c \u0639\u062f\u062f} \u0645\u0631\u0629 \u0641\u064a {2} \u0641\u064a \u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u0645\u062e\u062a\u0631\u0642\u0629.';\n+        $this->lang->setData('Auth', ['errorPasswordPwned' => $line]);\n+\n+        $output = $this->lang->getLine('Auth.errorPasswordPwned', ['password', 'hits', 'wording']);\n \n-        $this->lang->getLine('Auth.errorPasswordPwned', ['password', 'hits', 'wording']);\n+        $this->assertSame($line . \"\\n\u3010Warning\u3011Also, invalid string(s) was passed to the Language class. See log file for details.\", $output);\n     }\n \n     /**"
        },
        {
          "filename": "tests/system/Router/RouterTest.php",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -13,10 +13,12 @@\n \n use CodeIgniter\\Config\\Services;\n use CodeIgniter\\Exceptions\\PageNotFoundException;\n+use CodeIgniter\\HTTP\\Exceptions\\BadRequestException;\n use CodeIgniter\\HTTP\\Exceptions\\RedirectException;\n use CodeIgniter\\HTTP\\IncomingRequest;\n use CodeIgniter\\Router\\Exceptions\\RouterException;\n use CodeIgniter\\Test\\CIUnitTestCase;\n+use Config\\App;\n use Config\\Modules;\n use Config\\Routing;\n use Tests\\Support\\Filters\\Customfilter;\n@@ -87,6 +89,16 @@ public function testZeroAsURIPath(): void\n         $router->handle('0');\n     }\n \n+    public function testNotPermittedChars(): void\n+    {\n+        $router = new Router($this->collection, $this->request);\n+\n+        $this->expectException(BadRequestException::class);\n+        $this->expectExceptionMessage('The URI you submitted has disallowed characters: \"<a>\"');\n+\n+        $router->handle('test/%3Ca%3E');\n+    }\n+\n     public function testURIMapsToController(): void\n     {\n         $router = new Router($this->collection, $this->request);\n@@ -783,6 +795,9 @@ public function testAutoRouteMethodEmpty(): void\n      */\n     public function testRegularExpressionWithUnicode(): void\n     {\n+        $config                    = config(App::class);\n+        $config->permittedURIChars = 'a-z 0-9~%.:_\\-\\x{0980}-\\x{09ff}';\n+\n         $this->collection->get('news/([a-z0-9\\x{0980}-\\x{09ff}-]+)', 'News::view/$1');\n \n         $router = new Router($this->collection, $this->request);\n@@ -802,6 +817,9 @@ public function testRegularExpressionWithUnicode(): void\n      */\n     public function testRegularExpressionPlaceholderWithUnicode(): void\n     {\n+        $config                    = config(App::class);\n+        $config->permittedURIChars = 'a-z 0-9~%.:_\\-\\x{0980}-\\x{09ff}';\n+\n         $this->collection->addPlaceholder('custom', '[a-z0-9\\x{0980}-\\x{09ff}-]+');\n         $this->collection->get('news/(:custom)', 'News::view/$1');\n "
        },
        {
          "filename": "user_guide_src/source/changelogs/v4.4.7.rst",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -10,6 +10,20 @@ Release Date: Unreleased\n     :local:\n     :depth: 3\n \n+********\n+SECURITY\n+********\n+\n+- **Language:** *Language class DoS Vulnerability* was fixed.\n+  See the `Security advisory GHSA-39fp-mqmm-gxj6 <https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-39fp-mqmm-gxj6>`_\n+  for more information.\n+- **URI Security:** The feature to check if URIs do not contain not permitted\n+  strings has been added. This check is equivalent to the URI Security found in\n+  CodeIgniter 3. This is enabled by default, but upgraded users need to add\n+  a setting to enable it. See :ref:`urls-uri-security` for details.\n+- **Filters:** A bug where URI paths processed by Filters were not URL-decoded\n+  has been fixed. See :ref:`upgrade-447-filter-paths` for details.\n+\n ********\n BREAKING\n ********"
        },
        {
          "filename": "user_guide_src/source/concepts/security.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -38,6 +38,7 @@ OWASP recommendations\n CodeIgniter provisions\n ======================\n \n+- :ref:`urls-uri-security`\n - :ref:`invalidchars` filter\n - :doc:`../libraries/validation` library\n - :doc:`HTTP library <../incoming/incomingrequest>` provides for :ref:`input field filtering <incomingrequest-filtering-input-data>` & content metadata"
        },
        {
          "filename": "user_guide_src/source/general/urls.rst",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -58,6 +58,52 @@ Route path /blog/news/2022/10                   The URI path relative to the Bas\n Query      page=2\n ========== ==================================== =========================================\n \n+.. _urls-uri-security:\n+\n+URI Security\n+============\n+\n+.. versionadded:: 4.4.7\n+\n+.. important::\n+    Users upgrading from versions prior to v4.4.7 will need to add the following\n+    to **app/Config/App.php** in order to use this feature::\n+\n+        public string $permittedURIChars = 'a-z 0-9~%.:_\\-';\n+\n+CodeIgniter is fairly restrictive regarding which characters it allows in your\n+URI strings (Route path) in order to help minimize the possibility that malicious\n+data can be passed to your application. URIs may only contain the following:\n+\n+-  Alpha-numeric text (latin characters only)\n+-  Tilde: ``~``\n+-  Percent sign: ``%``\n+-  Period: ``.``\n+-  Colon: ``:``\n+-  Underscore: ``_``\n+-  Dash: ``-``\n+-  Space: `` ``\n+\n+.. note::\n+    This check is performed by the ``Router``. The Router takes the URL-encoded\n+    value held by the ``SiteURI`` class, decodes it, and then checks that it\n+    does not contain not permitted strings.\n+\n+Adding Permitted Characters\n+---------------------------\n+\n+The permitted characters can be changed by ``Config\\App::$permittedURIChars``.\n+\n+If you want to use Unicode for URI paths, modify it to allow the characters to\n+be used. For example, if you want to use Bengali, you will need to set the\n+following value in **app/Config/App.php**::\n+\n+    public string $permittedURIChars = 'a-z 0-9~%.:_\\-\\x{0980}-\\x{09ff}';\n+\n+A full list of Unicode ranges can be found at Wikipedia's `Unicode block`_.\n+\n+.. _Unicode block: https://en.wikipedia.org/wiki/Unicode_block\n+\n .. _urls-remove-index-php:\n \n Removing the index.php file"
        },
        {
          "filename": "user_guide_src/source/incoming/filters.rst",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -140,6 +140,11 @@ an array with the ``except`` key and a URI path (relative to BaseURL) to match a\n \n .. literalinclude:: filters/006.php\n \n+.. Warning:: Prior to v4.4.7, due to a bug, the URI paths processed by the filter\n+    were not URL-decoded. In other words, the URI paths specified in the routing\n+    and the URI paths specified in the filter could be different.\n+    See :ref:`upgrade-447-filter-paths` for details.\n+\n Any place you can use a URI path (relative to BaseURL) in the filter settings, you can use a regular expression or, like in this example, use\n an asterisk (``*``) for a wildcard that will match all characters after that. In this example, any URI path starting with ``api/``\n would be exempted from CSRF protection, but the site's forms would all be protected.\n@@ -175,6 +180,11 @@ a list of URI path (relative to BaseURL) patterns that filter should apply to:\n \n .. literalinclude:: filters/009.php\n \n+.. Warning:: Prior to v4.4.7, due to a bug, the URI paths processed by the filter\n+    were not URL-decoded. In other words, the URI paths specified in the routing\n+    and the URI paths specified in the filter could be different.\n+    See :ref:`upgrade-447-filter-paths` for details.\n+\n .. _filters-filters-filter-arguments:\n \n Filter Arguments"
        },
        {
          "filename": "user_guide_src/source/installation/upgrade_447.rst",
          "status": "modified",
          "additions": 49,
          "deletions": 0,
          "patch": "@@ -16,6 +16,18 @@ Please refer to the upgrade instructions corresponding to your installation meth\n Mandatory File Changes\n **********************\n \n+URI Security\n+============\n+\n+The feature to check if URIs do not contain not permitted strings has been added.\n+This check is equivalent to the URI Security found in CodeIgniter 3.\n+\n+We recommend you enable this feature. Add the following to **app/Config/App.php**::\n+\n+        public string $permittedURIChars = 'a-z 0-9~%.:_\\-';.\n+\n+See :ref:`urls-uri-security` for details.\n+\n Error Files\n ===========\n \n@@ -28,6 +40,40 @@ The error page has been updated. Please update the following files:\n Breaking Changes\n ****************\n \n+.. _upgrade-447-filter-paths:\n+\n+Paths in Controller Filters\n+===========================\n+\n+A bug where URI paths processed by :doc:`../incoming/filters` were not URL-decoded has been fixed.\n+\n+.. note:: Note that :doc:`Router <../incoming/routing>` processes URL-decoded URI paths.\n+\n+``Config\\Filters`` has some places to specify the URI paths. If the paths have\n+different values when URL-decoded, change them to the URL-decoded values.\n+\n+E.g.,:\n+\n+.. code-block:: php\n+\n+    public array $globals = [\n+        'before' => [\n+            'csrf' => ['except' => '%E6%97%A5%E6%9C%AC%E8%AA%9E/*'],\n+        ],\n+        // ...\n+    ];\n+\n+\u2193\n+\n+.. code-block:: php\n+\n+    public array $globals = [\n+        'before' => [\n+            'csrf' => ['except' => '\u65e5\u672c\u8a9e/*'],\n+        ],\n+        // ...\n+    ];\n+\n Time::difference() and DST\n ==========================\n \n@@ -66,6 +112,9 @@ and it is recommended that you merge the updated versions with your application:\n Config\n ------\n \n+- app/Config/App.php\n+    - The property ``$permittedURIChars`` was added. See :ref:`urls-uri-security`\n+      for details.\n - @TODO\n \n All Changes"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 16,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d47a25850c2360387023164bd05222fb5e656c67",
            "date": "2025-01-14T03:42:27Z",
            "author_login": "neznaika0"
          },
          {
            "sha": "a3704a1df4e78e55d17b33b5e13ad9f45a4b6a69",
            "date": "2025-01-13T04:49:37Z",
            "author_login": "neznaika0"
          },
          {
            "sha": "c3ac0f948390965490bc8caf7cfec63cee72f6e4",
            "date": "2025-01-13T03:03:02Z",
            "author_login": "paulbalandan"
          },
          {
            "sha": "155f1c14de69cf144081df008f3aeb36789b724c",
            "date": "2025-01-13T02:52:54Z",
            "author_login": "neznaika0"
          },
          {
            "sha": "231b6b0ce05995163046d0adfc860d093215fff7",
            "date": "2025-01-11T15:47:23Z",
            "author_login": "samsonasik"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "CodeIgniter is a PHP full-stack web framework A vulnerability was found in the Language class that allowed DoS attacks. This vulnerability can be exploited by an attacker to consume a large amount of memory on the server. Upgrade to v4.4.7 or later. \n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-29T16:15:08.593",
    "last_modified": "2024-11-21T09:08:35.173",
    "fix_date": "2024-03-29T02:34:46Z"
  },
  "references": [
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/commit/fa851acbae7ae4c5a97f8f38ae87aa0822a334c0",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-39fp-mqmm-gxj6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/commit/fa851acbae7ae4c5a97f8f38ae87aa0822a334c0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-39fp-mqmm-gxj6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.932252",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "CodeIgniter4",
    "owner": "codeigniter4",
    "created_at": "2015-08-27T03:32:45Z",
    "updated_at": "2025-01-14T03:42:33Z",
    "pushed_at": "2025-01-14T05:50:28Z",
    "size": 319188,
    "stars": 5473,
    "forks": 1907,
    "open_issues": 85,
    "watchers": 5473,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "4.6",
      "develop"
    ],
    "languages": {
      "PHP": 6346790,
      "CSS": 44934,
      "JavaScript": 38194,
      "SCSS": 17971,
      "Shell": 9817,
      "Python": 5182,
      "Smarty": 4865,
      "HTML": 4653,
      "Clojure": 2862,
      "Batchfile": 764,
      "Makefile": 638,
      "Hack": 106
    },
    "commit_activity": {
      "total_commits_last_year": 2279,
      "avg_commits_per_week": 43.82692307692308,
      "days_active_last_year": 270
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:18:02.605920"
  }
}