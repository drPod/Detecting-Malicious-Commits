{
  "cve_id": "CVE-2024-29905",
  "github_data": {
    "repository": "DIRACGrid/DIRAC",
    "fix_commit": "1faa709341969a6321e29c843ca94039d33b2c3d",
    "related_commits": [
      "1faa709341969a6321e29c843ca94039d33b2c3d",
      "1faa709341969a6321e29c843ca94039d33b2c3d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1faa709341969a6321e29c843ca94039d33b2c3d",
      "commit_date": "2024-04-08T09:10:02Z",
      "author": {
        "login": "fstagni",
        "type": "User",
        "stats": {
          "total_commits": 6419,
          "average_weekly_commits": 6.939459459459459,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 602
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-v6f3-gh5h-mqwx",
        "length": 98,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 89,
        "additions": 39,
        "deletions": 50
      },
      "files": [
        {
          "filename": "src/DIRAC/Core/Security/ProxyFile.py",
          "status": "modified",
          "additions": 2,
          "deletions": 12,
          "patch": "@@ -6,6 +6,7 @@\n \n from DIRAC import S_OK, S_ERROR\n from DIRAC.Core.Utilities import DErrno\n+from DIRAC.Core.Utilities.File import secureOpenForWrite\n from DIRAC.Core.Security.X509Chain import X509Chain  # pylint: disable=import-error\n from DIRAC.Core.Security.Locations import getProxyLocation\n \n@@ -17,22 +18,11 @@ def writeToProxyFile(proxyContents, fileName=False):\n       - proxyContents : string object to dump to file\n       - fileName : filename to dump to\n     \"\"\"\n-    if not fileName:\n-        try:\n-            fd, proxyLocation = tempfile.mkstemp()\n-            os.close(fd)\n-        except OSError:\n-            return S_ERROR(DErrno.ECTMPF)\n-        fileName = proxyLocation\n     try:\n-        with open(fileName, \"w\") as fd:\n+        with secureOpenForWrite(fileName) as fd:\n             fd.write(proxyContents)\n     except Exception as e:\n         return S_ERROR(DErrno.EWF, f\" {fileName}: {repr(e).replace(',)', ')')}\")\n-    try:\n-        os.chmod(fileName, stat.S_IRUSR | stat.S_IWUSR)\n-    except Exception as e:\n-        return S_ERROR(DErrno.ESPF, f\"{fileName}: {repr(e).replace(',)', ')')}\")\n     return S_OK(fileName)\n \n "
        },
        {
          "filename": "src/DIRAC/Core/Security/m2crypto/X509CRL.py",
          "status": "modified",
          "additions": 2,
          "deletions": 11,
          "patch": "@@ -1,15 +1,13 @@\n \"\"\" X509CRL is a class for managing X509CRL\n This class is used to manage the revoked certificates....\n \"\"\"\n-import stat\n-import os\n-import tempfile\n import re\n import datetime\n \n import M2Crypto\n from DIRAC import S_OK, S_ERROR\n from DIRAC.Core.Utilities import DErrno\n+from DIRAC.Core.Utilities.File import secureOpenForWrite\n \n # pylint: disable=broad-except\n \n@@ -72,17 +70,10 @@ def dumpAllToFile(self, filename=False):\n         if not self.__loadedCert:\n             return S_ERROR(\"No certificate loaded\")\n         try:\n-            if not filename:\n-                fd, filename = tempfile.mkstemp()\n-                os.close(fd)\n-            with open(filename, \"w\", encoding=\"ascii\") as fd:\n+            with secureOpenForWrite(filename) as fd:\n                 fd.write(self.__pemData)\n         except Exception as e:\n             return S_ERROR(DErrno.EWF, f\"{filename}: {repr(e).replace(',)', ')')}\")\n-        try:\n-            os.chmod(filename, stat.S_IRUSR | stat.S_IWUSR)\n-        except Exception as e:\n-            return S_ERROR(DErrno.ESPF, f\"{filename}: {repr(e).replace(',)', ')')}\")\n         return S_OK(filename)\n \n     def hasExpired(self):"
        },
        {
          "filename": "src/DIRAC/Core/Security/m2crypto/X509Chain.py",
          "status": "modified",
          "additions": 4,
          "deletions": 17,
          "patch": "@@ -8,9 +8,6 @@\n \n \"\"\"\n import copy\n-import os\n-import stat\n-import tempfile\n import hashlib\n \n import re\n@@ -21,6 +18,7 @@\n from DIRAC import S_OK, S_ERROR\n from DIRAC.Core.Utilities import DErrno\n from DIRAC.Core.Utilities.Decorators import executeOnlyIf, deprecated\n+from DIRAC.Core.Utilities.File import secureOpenForWrite\n from DIRAC.ConfigurationSystem.Client.Helpers import Registry\n from DIRAC.Core.Security.m2crypto import PROXY_OID, LIMITED_PROXY_OID, DIRAC_GROUP_OID, DEFAULT_PROXY_STRENGTH\n from DIRAC.Core.Security.m2crypto.X509Certificate import X509Certificate\n@@ -492,14 +490,10 @@ def generateProxyToFile(self, filePath, lifetime, diracGroup=False, strength=DEF\n         if not retVal[\"OK\"]:\n             return retVal\n         try:\n-            with open(filePath, \"w\") as fd:\n+            with secureOpenForWrite(filePath) as fd:\n                 fd.write(retVal[\"Value\"])\n         except Exception as e:\n             return S_ERROR(DErrno.EWF, f\"{filePath} :{repr(e).replace(',)', ')')}\")\n-        try:\n-            os.chmod(filePath, stat.S_IRUSR | stat.S_IWUSR)\n-        except Exception as e:\n-            return S_ERROR(DErrno.ESPF, f\"{filePath} :{repr(e).replace(',)', ')')}\")\n         return S_OK()\n \n     @needCertList\n@@ -880,17 +874,10 @@ def dumpAllToFile(self, filename=False):\n             return retVal\n         pemData = retVal[\"Value\"]\n         try:\n-            if not filename:\n-                fd, filename = tempfile.mkstemp()\n-                os.close(fd)\n-            with open(filename, \"w\") as fp:\n-                fp.write(pemData)\n+            with secureOpenForWrite(filename) as fh:\n+                fh.write(pemData)\n         except Exception as e:\n             return S_ERROR(DErrno.EWF, f\"{filename} :{repr(e).replace(',)', ')')}\")\n-        try:\n-            os.chmod(filename, stat.S_IRUSR | stat.S_IWUSR)\n-        except Exception as e:\n-            return S_ERROR(DErrno.ESPF, f\"{filename} :{repr(e).replace(',)', ')')}\")\n         return S_OK(filename)\n \n     @needCertList"
        },
        {
          "filename": "src/DIRAC/Core/Utilities/File.py",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -11,6 +11,9 @@\n import sys\n import re\n import errno\n+import stat\n+import tempfile\n+from contextlib import contextmanager\n \n # Translation table of a given unit to Bytes\n # I know, it should be kB...\n@@ -253,6 +256,27 @@ def convertSizeUnits(size, srcUnit, dstUnit):\n         return -sys.maxsize\n \n \n+@contextmanager\n+def secureOpenForWrite(filename=None, *, text=True):\n+    \"\"\"Securely open a file for writing.\n+\n+    If filename is not provided, a file is created in tempfile.gettempdir().\n+    The file always created with mode 600.\n+\n+    :param string filename: name of file to be opened\n+    \"\"\"\n+    if filename:\n+        fd = os.open(\n+            path=filename,\n+            flags=os.O_WRONLY | os.O_CREAT | os.O_TRUNC,\n+            mode=stat.S_IRUSR | stat.S_IWUSR,\n+        )\n+    else:\n+        fd, filename = tempfile.mkstemp(text=text)\n+    with open(fd, \"w\" if text else \"wb\", encoding=\"ascii\") as fd:\n+        yield fd\n+\n+\n if __name__ == \"__main__\":\n     for p in sys.argv[1:]:\n         print(f\"{p} : {getGlobbedTotalSize(p)} bytes\")"
        },
        {
          "filename": "src/DIRAC/FrameworkSystem/private/authorization/utils/Tokens.py",
          "status": "modified",
          "additions": 2,
          "deletions": 6,
          "patch": "@@ -1,13 +1,13 @@\n import os\n import re\n import jwt\n-import stat\n import time\n import json\n import datetime\n \n from DIRAC import S_OK, S_ERROR\n from DIRAC.Core.Utilities import DErrno\n+from DIRAC.Core.Utilities.File import secureOpenForWrite\n from DIRAC.ConfigurationSystem.Client.Helpers import Registry\n from DIRAC.Resources.IdProvider.IdProviderFactory import IdProviderFactory\n \n@@ -83,14 +83,10 @@ def writeToTokenFile(tokenContents, fileName):\n     \"\"\"\n     location = getTokenFileLocation(fileName)\n     try:\n-        with open(location, \"w\") as fd:\n+        with secureOpenForWrite(location) as fd:\n             fd.write(tokenContents)\n     except Exception as e:\n         return S_ERROR(DErrno.EWF, f\" {location}: {repr(e)}\")\n-    try:\n-        os.chmod(location, stat.S_IRUSR | stat.S_IWUSR)\n-    except Exception as e:\n-        return S_ERROR(DErrno.ESPF, f\"{location}: {repr(e)}\")\n     return S_OK(location)\n \n "
        },
        {
          "filename": "src/DIRAC/Interfaces/Utilities/DConfigCache.py",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,12 +1,12 @@\n #!/usr/bin/env python\n import os\n import re\n-import stat\n import time\n import pickle\n import tempfile\n \n from DIRAC.Core.Base.Script import Script\n+from DIRAC.Core.Utilities.File import secureOpenForWrite\n from DIRAC.ConfigurationSystem.Client.ConfigurationData import gConfigurationData\n \n \n@@ -67,8 +67,7 @@ def cacheConfig(self):\n         if self.newConfig:\n             self.__cleanCacheDirectory()\n \n-            with open(self.configCacheName, \"wb\") as fcache:\n-                os.chmod(self.configCacheName, stat.S_IRUSR | stat.S_IWUSR)\n+            with secureOpenForWrite(self.configCacheName, text=False) as fcache:\n                 pickle.dump(gConfigurationData.mergedCFG, fcache)\n         else:\n             try:"
        },
        {
          "filename": "src/DIRAC/WorkloadManagementSystem/Utilities/PilotWrapper.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -34,6 +34,7 @@\n from __future__ import print_function\n \n import os\n+import io\n import stat\n import tempfile\n import sys\n@@ -130,7 +131,8 @@ def pilotWrapperScript(\n     for pfName, encodedPf in pilotFilesCompressedEncodedDict.items():\n         compressedString += \"\"\"\n try:\n-  with open('%(pfName)s', 'wb') as fd:\n+  fd = os.open('%(pfName)s', os.O_WRONLY | os.O_CREAT | os.O_TRUNC, stat.S_IRUSR | stat.S_IWUSR)\n+  with io.open(fd, 'wb') as fd:\n     if sys.version_info < (3,):\n       fd.write(bz2.decompress(base64.b64decode(\\\"\\\"\\\"%(encodedPf)s\\\"\\\"\\\")))\n     else:"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "97d11c12a5ceaf2dfa0c7dbfbdff9d0e04d86ed7",
            "date": "2025-01-22T14:29:15Z",
            "author_login": "chrisburr"
          },
          {
            "sha": "6e2247a91d6020733e495d6651e59d2ff1142454",
            "date": "2025-01-21T15:20:51Z",
            "author_login": "fstagni"
          },
          {
            "sha": "dcf2fa805873b97026205a5814ac3582170f78cf",
            "date": "2025-01-21T10:41:54Z",
            "author_login": "fstagni"
          },
          {
            "sha": "bfe4a833f743285a85c5e0067eb798695b7843be",
            "date": "2025-01-17T15:45:55Z",
            "author_login": "fstagni"
          },
          {
            "sha": "d89cc446d33569164974e27496f8205dd3ef078f",
            "date": "2025-01-17T15:45:42Z",
            "author_login": "fstagni"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:L",
    "cwe_id": "CWE-668",
    "description": "DIRAC is an interware, meaning a software framework for distributed computing. Prior to version 8.0.41, during the proxy generation process (e.g., when using `dirac-proxy-init`), it is possible for unauthorized users on the same machine to gain read access to the proxy. This allows the user to then perform any action that is possible with the original proxy. This vulnerability only exists for a short period of time (sub-millsecond) during the generation process. Version 8.0.41 contains a patch for the issue. As a workaround, setting the `X509_USER_PROXY` environment variable to a path that is inside a directory that is only readable to the current user avoids the potential risk. After the file has been written, it can be safely copied to the standard location (`/tmp/x509up_uNNNN`).",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-09T17:16:00.730",
    "last_modified": "2024-11-21T09:08:35.300",
    "fix_date": "2024-04-08T09:10:02Z"
  },
  "references": [
    {
      "url": "https://github.com/DIRACGrid/DIRAC/commit/1faa709341969a6321e29c843ca94039d33b2c3d",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/DIRACGrid/DIRAC/security/advisories/GHSA-v6f3-gh5h-mqwx",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/DIRACGrid/DIRAC/commit/1faa709341969a6321e29c843ca94039d33b2c3d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/DIRACGrid/DIRAC/security/advisories/GHSA-v6f3-gh5h-mqwx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.455929",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "DIRAC",
    "owner": "DIRACGrid",
    "created_at": "2011-04-06T11:47:53Z",
    "updated_at": "2025-01-22T14:29:20Z",
    "pushed_at": "2025-01-22T14:29:58Z",
    "size": 89433,
    "stars": 113,
    "forks": 176,
    "open_issues": 80,
    "watchers": 113,
    "has_security_policy": false,
    "default_branch": "integration",
    "protected_branches": [
      "integration",
      "rel-v6r0",
      "rel-v6r1",
      "rel-v6r2",
      "rel-v6r3",
      "rel-v6r4",
      "rel-v6r5",
      "rel-v6r6",
      "rel-v6r7",
      "rel-v6r8",
      "rel-v6r9",
      "rel-v6r10",
      "rel-v6r11",
      "rel-v6r12",
      "rel-v6r13",
      "rel-v6r14",
      "rel-v6r15",
      "rel-v6r16",
      "rel-v6r17",
      "rel-v6r18",
      "rel-v6r19",
      "rel-v6r20",
      "rel-v6r21",
      "rel-v6r22"
    ],
    "languages": {
      "Python": 9782742,
      "Shell": 108531
    },
    "commit_activity": {
      "total_commits_last_year": 565,
      "avg_commits_per_week": 10.865384615384615,
      "days_active_last_year": 156
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:35:56.834270"
  }
}