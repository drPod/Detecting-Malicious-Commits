{
  "cve_id": "CVE-2024-30253",
  "github_data": {
    "repository": "solana-labs/solana-web3.js",
    "fix_commit": "77d935221a4805107b20b60ae7c1148725e4e2d0",
    "related_commits": [
      "77d935221a4805107b20b60ae7c1148725e4e2d0",
      "77d935221a4805107b20b60ae7c1148725e4e2d0"
    ],
    "patch_url": "https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0.patch",
    "fix_commit_details": {
      "sha": "77d935221a4805107b20b60ae7c1148725e4e2d0",
      "commit_date": "2024-04-01T14:33:05Z",
      "author": {
        "login": "steveluscher",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: bounds check",
        "length": 17,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 157,
        "additions": 133,
        "deletions": 24
      },
      "files": [
        {
          "filename": "packages/library-legacy/src/message/legacy.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -16,6 +16,7 @@ import {\n import {TransactionInstruction} from '../transaction';\n import {CompiledKeys} from './compiled-keys';\n import {MessageAccountKeys} from './account-keys';\n+import {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n \n /**\n  * An instruction to execute by a program\n@@ -268,7 +269,7 @@ export class Message {\n     // Slice up wire data\n     let byteArray = [...buffer];\n \n-    const numRequiredSignatures = byteArray.shift()!;\n+    const numRequiredSignatures = guardedShift(byteArray);\n     if (\n       numRequiredSignatures !==\n       (numRequiredSignatures & VERSION_PREFIX_MASK)\n@@ -278,26 +279,26 @@ export class Message {\n       );\n     }\n \n-    const numReadonlySignedAccounts = byteArray.shift()!;\n-    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n+    const numReadonlySignedAccounts = guardedShift(byteArray);\n+    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n \n     const accountCount = shortvec.decodeLength(byteArray);\n     let accountKeys = [];\n     for (let i = 0; i < accountCount; i++) {\n-      const account = byteArray.splice(0, PUBLIC_KEY_LENGTH);\n+      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n       accountKeys.push(new PublicKey(Buffer.from(account)));\n     }\n \n-    const recentBlockhash = byteArray.splice(0, PUBLIC_KEY_LENGTH);\n+    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n \n     const instructionCount = shortvec.decodeLength(byteArray);\n     let instructions: CompiledInstruction[] = [];\n     for (let i = 0; i < instructionCount; i++) {\n-      const programIdIndex = byteArray.shift()!;\n+      const programIdIndex = guardedShift(byteArray);\n       const accountCount = shortvec.decodeLength(byteArray);\n-      const accounts = byteArray.splice(0, accountCount);\n+      const accounts = guardedSplice(byteArray, 0, accountCount);\n       const dataLength = shortvec.decodeLength(byteArray);\n-      const dataSlice = byteArray.splice(0, dataLength);\n+      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n       const data = bs58.encode(Buffer.from(dataSlice));\n       instructions.push({\n         programIdIndex,"
        },
        {
          "filename": "packages/library-legacy/src/message/v0.ts",
          "status": "modified",
          "additions": 29,
          "deletions": 12,
          "patch": "@@ -16,6 +16,7 @@ import {TransactionInstruction} from '../transaction';\n import {AddressLookupTableAccount} from '../programs';\n import {CompiledKeys} from './compiled-keys';\n import {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n+import {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n \n /**\n  * Message constructor arguments\n@@ -426,7 +427,7 @@ export class MessageV0 {\n   static deserialize(serializedMessage: Uint8Array): MessageV0 {\n     let byteArray = [...serializedMessage];\n \n-    const prefix = byteArray.shift() as number;\n+    const prefix = guardedShift(byteArray);\n     const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n     assert(\n       prefix !== maskedPrefix,\n@@ -440,29 +441,35 @@ export class MessageV0 {\n     );\n \n     const header: MessageHeader = {\n-      numRequiredSignatures: byteArray.shift() as number,\n-      numReadonlySignedAccounts: byteArray.shift() as number,\n-      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n+      numRequiredSignatures: guardedShift(byteArray),\n+      numReadonlySignedAccounts: guardedShift(byteArray),\n+      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n     };\n \n     const staticAccountKeys = [];\n     const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n     for (let i = 0; i < staticAccountKeysLength; i++) {\n       staticAccountKeys.push(\n-        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n+        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n       );\n     }\n \n-    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n+    const recentBlockhash = bs58.encode(\n+      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n+    );\n \n     const instructionCount = shortvec.decodeLength(byteArray);\n     const compiledInstructions: MessageCompiledInstruction[] = [];\n     for (let i = 0; i < instructionCount; i++) {\n-      const programIdIndex = byteArray.shift() as number;\n+      const programIdIndex = guardedShift(byteArray);\n       const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n-      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n+      const accountKeyIndexes = guardedSplice(\n+        byteArray,\n+        0,\n+        accountKeyIndexesLength,\n+      );\n       const dataLength = shortvec.decodeLength(byteArray);\n-      const data = new Uint8Array(byteArray.splice(0, dataLength));\n+      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n       compiledInstructions.push({\n         programIdIndex,\n         accountKeyIndexes,\n@@ -473,11 +480,21 @@ export class MessageV0 {\n     const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n     const addressTableLookups: MessageAddressTableLookup[] = [];\n     for (let i = 0; i < addressTableLookupsCount; i++) {\n-      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n+      const accountKey = new PublicKey(\n+        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n+      );\n       const writableIndexesLength = shortvec.decodeLength(byteArray);\n-      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n+      const writableIndexes = guardedSplice(\n+        byteArray,\n+        0,\n+        writableIndexesLength,\n+      );\n       const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n-      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n+      const readonlyIndexes = guardedSplice(\n+        byteArray,\n+        0,\n+        readonlyIndexesLength,\n+      );\n       addressTableLookups.push({\n         accountKey,\n         writableIndexes,"
        },
        {
          "filename": "packages/library-legacy/src/transaction/legacy.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -12,6 +12,7 @@ import type {Signer} from '../keypair';\n import type {Blockhash} from '../blockhash';\n import type {CompiledInstruction} from '../message';\n import {sign, verify} from '../utils/ed25519';\n+import {guardedSplice} from '../utils/guarded-array-utils';\n \n /** @internal */\n type MessageSignednessErrors = {\n@@ -904,7 +905,7 @@ export class Transaction {\n     const signatureCount = shortvec.decodeLength(byteArray);\n     let signatures = [];\n     for (let i = 0; i < signatureCount; i++) {\n-      const signature = byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES);\n+      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n       signatures.push(bs58.encode(Buffer.from(signature)));\n     }\n "
        },
        {
          "filename": "packages/library-legacy/src/transaction/versioned.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -8,6 +8,7 @@ import * as shortvec from '../utils/shortvec-encoding';\n import * as Layout from '../layout';\n import {sign} from '../utils/ed25519';\n import {PublicKey} from '../publickey';\n+import {guardedSplice} from '../utils/guarded-array-utils';\n \n export type TransactionVersion = 'legacy' | 0;\n \n@@ -82,7 +83,7 @@ export class VersionedTransaction {\n     const signaturesLength = shortvec.decodeLength(byteArray);\n     for (let i = 0; i < signaturesLength; i++) {\n       signatures.push(\n-        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n+        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n       );\n     }\n "
        },
        {
          "filename": "packages/library-legacy/src/utils/guarded-array-utils.ts",
          "status": "added",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -0,0 +1,34 @@\n+const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n+\n+/**\n+ * Delegates to `Array#shift`, but throws if the array is zero-length.\n+ */\n+export function guardedShift<T>(byteArray: T[]): T {\n+  if (byteArray.length === 0) {\n+    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n+  }\n+  return byteArray.shift() as T;\n+}\n+\n+/**\n+ * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n+ * the array.\n+ */\n+export function guardedSplice<T>(\n+  byteArray: T[],\n+  ...args:\n+    | [start: number, deleteCount?: number]\n+    | [start: number, deleteCount: number, ...items: T[]]\n+): T[] {\n+  const [start] = args;\n+  if (\n+    args.length === 2 // Implies that `deleteCount` was supplied\n+      ? start + (args[1] ?? 0) > byteArray.length\n+      : start >= byteArray.length\n+  ) {\n+    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n+  }\n+  return byteArray.splice(\n+    ...(args as Parameters<typeof Array.prototype.splice>),\n+  );\n+}"
        },
        {
          "filename": "packages/library-legacy/src/validator-info.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -9,6 +9,7 @@ import {\n import * as Layout from './layout';\n import * as shortvec from './utils/shortvec-encoding';\n import {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n+import {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n \n export const VALIDATOR_INFO_KEY = new PublicKey(\n   'Va1idator1nfo111111111111111111111111111111',\n@@ -83,8 +84,10 @@ export class ValidatorInfo {\n \n     const configKeys: Array<ConfigKey> = [];\n     for (let i = 0; i < 2; i++) {\n-      const publicKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n-      const isSigner = byteArray.splice(0, 1)[0] === 1;\n+      const publicKey = new PublicKey(\n+        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n+      );\n+      const isSigner = guardedShift(byteArray) === 1;\n       configKeys.push({publicKey, isSigner});\n     }\n "
        },
        {
          "filename": "packages/library-legacy/test/guarded-array-utils.test.ts",
          "status": "added",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -0,0 +1,52 @@\n+import {expect} from 'chai';\n+import {spy} from 'sinon';\n+\n+import {guardedShift, guardedSplice} from '../src/utils/guarded-array-utils';\n+\n+describe('guardedShift', () => {\n+  it('delegates to Array#shift', () => {\n+    const arr = [1, 2, 3];\n+    const shiftSpy = spy(arr, 'shift');\n+    const result = guardedShift(arr);\n+    expect(shiftSpy).is.calledWithExactly();\n+    expect(result).to.eq(shiftSpy.returnValues[0]);\n+  });\n+  it('throws when the array is zero-length', () => {\n+    const arr: number[] = [];\n+    expect(() => guardedShift(arr)).to.throw();\n+  });\n+});\n+\n+describe('guardedSplice', () => {\n+  it('delegates to Array#splice', () => {\n+    const arr = [1, 2, 3];\n+    const spliceSpy = spy(arr, 'splice');\n+    const result = guardedSplice(\n+      arr,\n+      /* start */ 0,\n+      /* deleteCount */ 3,\n+      /* ...items */\n+      100,\n+      101,\n+      102,\n+    );\n+    expect(spliceSpy).is.calledWithExactly(0, 3, 100, 101, 102);\n+    expect(result).to.eq(spliceSpy.returnValues[0]);\n+  });\n+  it('allows zero-length splices', () => {\n+    const arr: number[] = [1, 2, 3];\n+    expect(guardedSplice(arr, 0, 0)).to.be.an.empty('array');\n+  });\n+  it('allows zero-length splices via the `deleteCount` argument being the explicit value `undefined`', () => {\n+    const arr: number[] = [1, 2, 3];\n+    expect(guardedSplice(arr, 0, undefined)).to.be.an.empty('array');\n+  });\n+  it('throws when the `start` would take you past the end of the array', () => {\n+    const arr: number[] = [1, 2, 3];\n+    expect(() => guardedSplice(arr, 3)).to.throw();\n+  });\n+  it('throws when the `deleteCount` and `start` would take you past the end of the array', () => {\n+    const arr: number[] = [1, 2, 3];\n+    expect(() => guardedSplice(arr, 1, 3)).to.throw();\n+  });\n+});"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8ea27fcefe938eaec464c41bde15ac44c6821469",
            "date": "2024-12-16T04:34:29Z",
            "author_login": "buffalojoec"
          },
          {
            "sha": "a805cb929233fa83facfe51749f39961f97ad6a1",
            "date": "2024-12-16T04:27:20Z",
            "author_login": "buffalojoec"
          },
          {
            "sha": "60e39a67236ebc449c9c28fc8b6f0a697517865f",
            "date": "2024-12-16T04:15:12Z",
            "author_login": "buffalojoec"
          },
          {
            "sha": "f554544f1b1a509bca73519a6b7269782f3da67f",
            "date": "2024-12-15T15:06:23Z",
            "author_login": "steveluscher"
          },
          {
            "sha": "eb3b362c4e03098be2b1af432cd0864879c6886c",
            "date": "2024-12-14T00:34:23Z",
            "author_login": "steveluscher"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-119",
    "description": "@solana/web3.js is the Solana JavaScript SDK. Using particular inputs with `@solana/web3.js` will result in memory exhaustion (OOM). If you have a server, client, mobile, or desktop product that accepts untrusted input for use with `@solana/web3.js`, your application/service may crash, resulting in a loss of availability. This vulnerability is fixed in 1.0.1, 1.10.2, 1.11.1, 1.12.1, 1.1.2, 1.13.1, 1.14.1, 1.15.1, 1.16.2, 1.17.1, 1.18.1, 1.19.1, 1.20.3, 1.21.1, 1.22.1, 1.23.1, 1.24.3, 1.25.1, 1.26.1, 1.27.1, 1.28.1, 1.2.8, 1.29.4, 1.30.3, 1.31.1, 1.3.1, 1.32.3, 1.33.1, 1.34.1, 1.35.2, 1.36.1, 1.37.3, 1.38.1, 1.39.2, 1.40.2, 1.41.11, 1.4.1, 1.42.1, 1.43.7, 1.44.4, 1.45.1, 1.46.1, 1.47.5, 1.48.1, 1.49.1, 1.50.2, 1.51.1, 1.5.1, 1.52.1, 1.53.1, 1.54.2, 1.55.1, 1.56.3, 1.57.1, 1.58.1, 1.59.2, 1.60.1, 1.61.2, 1.6.1, 1.62.2, 1.63.2, 1.64.1, 1.65.1, 1.66.6, 1.67.3, 1.68.2, 1.69.1, 1.70.4, 1.71.1, 1.72.1, 1.7.2, 1.73.5, 1.74.1, 1.75.1, 1.76.1, 1.77.4, 1.78.8, 1.79.1, 1.80.1, 1.81.1, 1.8.1, 1.82.1, 1.83.1, 1.84.1, 1.85.1, 1.86.1, 1.87.7, 1.88.1, 1.89.2, 1.90.2, 1.9.2, and 1.91.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-17T15:15:07.253",
    "last_modified": "2024-11-21T09:11:32.927",
    "fix_date": "2024-04-01T14:33:05Z"
  },
  "references": [
    {
      "url": "https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:06.985395",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "solana-web3.js",
    "owner": "solana-labs",
    "created_at": "2018-08-22T20:30:39Z",
    "updated_at": "2025-01-14T13:15:31Z",
    "pushed_at": "2025-01-06T08:01:43Z",
    "size": 206262,
    "stars": 2356,
    "forks": 918,
    "open_issues": 8,
    "watchers": 2356,
    "has_security_policy": false,
    "default_branch": "maintenance/v1.x",
    "protected_branches": [],
    "languages": {
      "TypeScript": 896810,
      "JavaScript": 7244,
      "Shell": 3723
    },
    "commit_activity": {
      "total_commits_last_year": 973,
      "avg_commits_per_week": 18.71153846153846,
      "days_active_last_year": 204
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:31:43.488275"
  }
}