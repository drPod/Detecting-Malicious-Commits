{
  "cve_id": "CVE-2024-30258",
  "github_data": {
    "repository": "eProsima/Fast-DDS",
    "fix_commit": "65236f93e9c4ea3ff9a49fba4dfd9e43eb94037b",
    "related_commits": [
      "65236f93e9c4ea3ff9a49fba4dfd9e43eb94037b",
      "65236f93e9c4ea3ff9a49fba4dfd9e43eb94037b"
    ],
    "patch_url": "https://github.com/eProsima/Fast-DDS/commit/65236f93e9c4ea3ff9a49fba4dfd9e43eb94037b.patch",
    "fix_commit_details": {
      "sha": "65236f93e9c4ea3ff9a49fba4dfd9e43eb94037b",
      "commit_date": "2024-04-02T09:00:21Z",
      "author": {
        "login": "Mario-DL",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-53xw-465j-rxfh",
        "length": 105,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 53,
        "additions": 43,
        "deletions": 10
      },
      "files": [
        {
          "filename": "include/fastdds/rtps/messages/CDRMessage.h",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -140,15 +140,18 @@ inline bool readBinaryProperty(\n \n inline bool readPropertySeq(\n         CDRMessage_t* msg,\n-        PropertySeq& properties);\n+        PropertySeq& properties,\n+        const uint32_t parameter_length);\n \n inline bool readBinaryPropertySeq(\n         CDRMessage_t* msg,\n-        BinaryPropertySeq& binary_properties);\n+        BinaryPropertySeq& binary_properties,\n+        const uint32_t parameter_length);\n \n inline bool readDataHolder(\n         CDRMessage_t* msg,\n-        DataHolder& data_holder);\n+        DataHolder& data_holder,\n+        const uint32_t parameter_length);\n \n inline bool readDataHolderSeq(\n         CDRMessage_t* msg,"
        },
        {
          "filename": "include/fastdds/rtps/messages/CDRMessage.hpp",
          "status": "modified",
          "additions": 34,
          "deletions": 6,
          "patch": "@@ -860,7 +860,8 @@ inline bool CDRMessage::addPropertySeq(\n \n inline bool CDRMessage::readPropertySeq(\n         CDRMessage_t* msg,\n-        PropertySeq& properties)\n+        PropertySeq& properties,\n+        const uint32_t parameter_length)\n {\n     assert(msg);\n \n@@ -870,6 +871,13 @@ inline bool CDRMessage::readPropertySeq(\n         return false;\n     }\n \n+    // Length should be at least 16 times the number of elements, since each property contains\n+    // 2 empty strings, each with 4 bytes for its length + at least 4 bytes of data (single NUL character + padding)\n+    if (16 * length > parameter_length)\n+    {\n+        return false;\n+    }\n+\n     properties.resize(length);\n     bool returnedValue = true;\n     for (uint32_t i = 0; returnedValue && i < length; ++i)\n@@ -962,7 +970,8 @@ inline bool CDRMessage::addBinaryPropertySeq(\n \n inline bool CDRMessage::readBinaryPropertySeq(\n         CDRMessage_t* msg,\n-        BinaryPropertySeq& binary_properties)\n+        BinaryPropertySeq& binary_properties,\n+        const uint32_t parameter_length)\n {\n     assert(msg);\n \n@@ -972,6 +981,14 @@ inline bool CDRMessage::readBinaryPropertySeq(\n         return false;\n     }\n \n+    // Length should be at least 12 times the number of elements, since each each property contains at least\n+    // 1 empty string with 4 bytes for its length + at least 4 bytes of data (single NUL character + padding) and\n+    // 1 empty byte sequence with 4 bytes for its length\n+    if (12 * length > parameter_length)\n+    {\n+        return false;\n+    }\n+\n     binary_properties.resize(length);\n     bool returnedValue = true;\n     for (uint32_t i = 0; returnedValue && i < length; ++i)\n@@ -1006,19 +1023,20 @@ inline bool CDRMessage::addDataHolder(\n \n inline bool CDRMessage::readDataHolder(\n         CDRMessage_t* msg,\n-        DataHolder& data_holder)\n+        DataHolder& data_holder,\n+        const uint32_t parameter_length)\n {\n     assert(msg);\n \n     if (!CDRMessage::readString(msg, &data_holder.class_id()))\n     {\n         return false;\n     }\n-    if (!CDRMessage::readPropertySeq(msg, data_holder.properties()))\n+    if (!CDRMessage::readPropertySeq(msg, data_holder.properties(), parameter_length))\n     {\n         return false;\n     }\n-    if (!CDRMessage::readBinaryPropertySeq(msg, data_holder.binary_properties()))\n+    if (!CDRMessage::readBinaryPropertySeq(msg, data_holder.binary_properties(), parameter_length))\n     {\n         return false;\n     }\n@@ -1063,11 +1081,21 @@ inline bool CDRMessage::readDataHolderSeq(\n         return false;\n     }\n \n+    // Length should be at least 16 times the number of elements, since each DataHolder contains at least\n+    // 1 empty string with 4 bytes for its length + at least 4 bytes of data (single NUL character + padding) and\n+    // 2 empty property sequences, each with 4 bytes for its length\n+    if (msg->pos + 16 * length > msg->length)\n+    {\n+        return false;\n+    }\n+\n     data_holders.resize(length);\n     bool returnedValue = true;\n     for (uint32_t i = 0; returnedValue && i < length; ++i)\n     {\n-        returnedValue = CDRMessage::readDataHolder(msg, data_holders.at(i));\n+        //! The parameter length should be the remaining length of the message\n+        uint32_t remaining_length = msg->length - msg->pos;\n+        returnedValue = CDRMessage::readDataHolder(msg, data_holders.at(i), remaining_length);\n     }\n \n     return returnedValue;"
        },
        {
          "filename": "src/cpp/fastdds/core/policy/ParameterSerializer.hpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1039,7 +1039,7 @@ inline bool ParameterSerializer<ParameterToken_t>::read_content_from_cdr_message\n \n     parameter.length = parameter_length;\n     uint32_t pos_ref = cdr_message->pos;\n-    bool valid =  fastrtps::rtps::CDRMessage::readDataHolder(cdr_message, parameter.token);\n+    bool valid =  fastrtps::rtps::CDRMessage::readDataHolder(cdr_message, parameter.token, parameter_length);\n     uint32_t length_diff = cdr_message->pos - pos_ref;\n     valid &= (parameter_length == length_diff);\n     return valid;"
        },
        {
          "filename": "test/blackbox/common/BlackboxTestsTransportUDP.cpp",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -533,6 +533,8 @@ TEST(TransportUDP, DatagramInjection)\n \n     DatagramInjectionTransport::deliver_datagram_from_file(receivers, \"datagrams/16784.bin\");\n     DatagramInjectionTransport::deliver_datagram_from_file(receivers, \"datagrams/20140.bin\");\n+    DatagramInjectionTransport::deliver_datagram_from_file(receivers, \"datagrams/20574.bin\");\n+    DatagramInjectionTransport::deliver_datagram_from_file(receivers, \"datagrams/20660.bin\");\n }\n \n TEST(TransportUDP, MaliciousManipulatedDataOctetsToNextHeaderIgnore)"
        },
        {
          "filename": "test/blackbox/datagrams/20574.bin",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "test/blackbox/datagrams/20660.bin",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "74d8e279a4b18b5b525e64116aad112860dffcb9",
            "date": "2025-01-13T12:01:42Z",
            "author_login": "MiguelCompany"
          },
          {
            "sha": "490e80b0725e9e354726dadf5e5cdd855535f32c",
            "date": "2025-01-13T11:53:00Z",
            "author_login": "MiguelCompany"
          },
          {
            "sha": "25b117fcf5feaea8d4a0529e1a2d6bdded255cfd",
            "date": "2025-01-13T06:30:07Z",
            "author_login": "EugenioCollado"
          },
          {
            "sha": "5fc77861df383a7e94691295f7b07fdaa50f9402",
            "date": "2025-01-10T09:17:41Z",
            "author_login": "EugenioCollado"
          },
          {
            "sha": "b53a3899e035dcb3bc8c39d392a66a3a236bc4bb",
            "date": "2025-01-09T15:14:43Z",
            "author_login": "fujitatomoya"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H",
    "cwe_id": "CWE-20",
    "description": "FastDDS is a C++ implementation of the DDS (Data Distribution Service) standard of the OMG (Object Management Group). Prior to versions 2.14.1, 2.13.5, 2.10.4, and 2.6.8, when a publisher serves a malformed `RTPS` packet, the subscriber crashes when creating `pthread`. This can remotely crash any Fast-DDS process, potentially leading to a DOS attack. Versions 2.14.1, 2.13.5, 2.10.4, and 2.6.8 contain a patch for the issue.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-14T15:22:15.163",
    "last_modified": "2024-11-21T09:11:34.120",
    "fix_date": "2024-04-02T09:00:21Z"
  },
  "references": [
    {
      "url": "https://drive.google.com/file/d/19W5UC52hPnAqVq_boZWO45d1TJ4WoCSh/view?usp=sharing",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/eProsima/Fast-DDS/commit/65236f93e9c4ea3ff9a49fba4dfd9e43eb94037b",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/eProsima/Fast-DDS/security/advisories/GHSA-53xw-465j-rxfh",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://drive.google.com/file/d/19W5UC52hPnAqVq_boZWO45d1TJ4WoCSh/view?usp=sharing",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/eProsima/Fast-DDS/commit/65236f93e9c4ea3ff9a49fba4dfd9e43eb94037b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/eProsima/Fast-DDS/security/advisories/GHSA-53xw-465j-rxfh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.885315",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Fast-DDS",
    "owner": "eProsima",
    "created_at": "2014-05-29T14:36:15Z",
    "updated_at": "2025-01-14T10:05:06Z",
    "pushed_at": "2025-01-14T11:56:33Z",
    "size": 136008,
    "stars": 2273,
    "forks": 790,
    "open_issues": 127,
    "watchers": 2273,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.6.x"
    ],
    "languages": {
      "C++": 46757167,
      "C": 9849654,
      "CMake": 579263,
      "Python": 224282,
      "CSS": 28054,
      "Shell": 13873,
      "Makefile": 5345,
      "HTML": 2698,
      "Dockerfile": 1683,
      "Batchfile": 1395,
      "PowerShell": 954
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:10:57.643175"
  }
}