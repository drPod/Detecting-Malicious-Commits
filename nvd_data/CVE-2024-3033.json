{
  "cve_id": "CVE-2024-3033",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "bf8df60c02b9ddc7ba682809ca12c5637606393a",
    "related_commits": [
      "bf8df60c02b9ddc7ba682809ca12c5637606393a",
      "bf8df60c02b9ddc7ba682809ca12c5637606393a"
    ],
    "patch_url": "https://github.com/mintplex-labs/anything-llm/commit/bf8df60c02b9ddc7ba682809ca12c5637606393a.patch",
    "fix_commit_details": {
      "sha": "bf8df60c02b9ddc7ba682809ca12c5637606393a",
      "commit_date": "2024-03-27T20:19:28Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "move vector db debug endpoint to dev only",
        "length": 41,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 57,
        "additions": 29,
        "deletions": 28
      },
      "files": [
        {
          "filename": "server/index.js",
          "status": "modified",
          "additions": 29,
          "deletions": 28,
          "patch": "@@ -51,34 +51,6 @@ developerEndpoints(app, apiRouter);\n // Externally facing embedder endpoints\n embeddedEndpoints(apiRouter);\n \n-apiRouter.post(\"/v/:command\", async (request, response) => {\n-  try {\n-    const VectorDb = getVectorDbClass();\n-    const { command } = request.params;\n-    if (!Object.getOwnPropertyNames(VectorDb).includes(command)) {\n-      response.status(500).json({\n-        message: \"invalid interface command\",\n-        commands: Object.getOwnPropertyNames(VectorDb),\n-      });\n-      return;\n-    }\n-\n-    try {\n-      const body = reqBody(request);\n-      const resBody = await VectorDb[command](body);\n-      response.status(200).json({ ...resBody });\n-    } catch (e) {\n-      // console.error(e)\n-      console.error(JSON.stringify(e));\n-      response.status(500).json({ error: e.message });\n-    }\n-    return;\n-  } catch (e) {\n-    console.log(e.message, e);\n-    response.sendStatus(500).end();\n-  }\n-});\n-\n if (process.env.NODE_ENV !== \"development\") {\n   app.use(\n     express.static(path.resolve(__dirname, \"public\"), { extensions: [\"js\"] })\n@@ -92,6 +64,35 @@ if (process.env.NODE_ENV !== \"development\") {\n     response.type(\"text/plain\");\n     response.send(\"User-agent: *\\nDisallow: /\").end();\n   });\n+} else {\n+  // Debug route for development connections to vectorDBs\n+  apiRouter.post(\"/v/:command\", async (request, response) => {\n+    try {\n+      const VectorDb = getVectorDbClass();\n+      const { command } = request.params;\n+      if (!Object.getOwnPropertyNames(VectorDb).includes(command)) {\n+        response.status(500).json({\n+          message: \"invalid interface command\",\n+          commands: Object.getOwnPropertyNames(VectorDb),\n+        });\n+        return;\n+      }\n+\n+      try {\n+        const body = reqBody(request);\n+        const resBody = await VectorDb[command](body);\n+        response.status(200).json({ ...resBody });\n+      } catch (e) {\n+        // console.error(e)\n+        console.error(JSON.stringify(e));\n+        response.status(500).json({ error: e.message });\n+      }\n+      return;\n+    } catch (e) {\n+      console.log(e.message, e);\n+      response.sendStatus(500).end();\n+    }\n+  });\n }\n \n app.all(\"*\", function (_, response) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d5d8d4dec0e62662c8ec46537038353f45e0e66",
            "date": "2025-01-14T16:20:57Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "21af81085aeb049750942ac5f3b84775cb461693",
            "date": "2025-01-13T21:12:03Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "665e8e5bfe431ad93bed6736d0b450592617d042",
            "date": "2025-01-09T23:39:56Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "865f7eea296e544b2eb1ab8c1f322208eaf5eb05",
            "date": "2025-01-09T21:32:54Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "be886f7d61296a30d5b8a095ca8329f58a0c5a0a",
            "date": "2025-01-09T01:21:30Z",
            "author_login": "root-reindeer-flotilla"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H",
    "cwe_id": "CWE-863",
    "description": "An improper authorization vulnerability exists in the mintplex-labs/anything-llm application, specifically within the '/api/v/' endpoint and its sub-routes. This flaw allows unauthenticated users to perform destructive actions on the VectorDB, including resetting the database and deleting specific namespaces, without requiring any authorization or permissions. The issue affects all versions up to and including the latest version, with a fix introduced in version 1.0.0. Exploitation of this vulnerability can lead to complete data loss of document embeddings across all workspaces, rendering workspace chats and embeddable chat widgets non-functional. Additionally, attackers can list all namespaces, potentially exposing private workspace names.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-06T18:15:17.040",
    "last_modified": "2024-11-21T09:28:43.710",
    "fix_date": "2024-03-27T20:19:28Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/bf8df60c02b9ddc7ba682809ca12c5637606393a",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/8a98a0b4-7886-41c5-8624-fc5c21972e5a",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/bf8df60c02b9ddc7ba682809ca12c5637606393a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/8a98a0b4-7886-41c5-8624-fc5c21972e5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.345181",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-14T13:49:57Z",
    "pushed_at": "2025-01-13T21:12:06Z",
    "size": 42916,
    "stars": 30237,
    "forks": 3030,
    "open_issues": 206,
    "watchers": 30237,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3056909,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:33.088245"
  }
}