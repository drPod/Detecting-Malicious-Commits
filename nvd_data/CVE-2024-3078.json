{
  "cve_id": "CVE-2024-3078",
  "github_data": {
    "repository": "qdrant/qdrant",
    "fix_commit": "3ab5172e9c8f14fa1f7b24e7147eac74e2412b62",
    "related_commits": [
      "3ab5172e9c8f14fa1f7b24e7147eac74e2412b62",
      "3ab5172e9c8f14fa1f7b24e7147eac74e2412b62"
    ],
    "patch_url": "https://github.com/qdrant/qdrant/commit/3ab5172e9c8f14fa1f7b24e7147eac74e2412b62.patch",
    "fix_commit_details": {
      "sha": "3ab5172e9c8f14fa1f7b24e7147eac74e2412b62",
      "commit_date": "2024-03-18T19:51:17Z",
      "author": {
        "login": "timvisee",
        "type": "User",
        "stats": {
          "total_commits": 542,
          "average_weekly_commits": 2.230452674897119,
          "total_additions": 137735,
          "total_deletions": 31479,
          "weeks_active": 93
        }
      },
      "commit_message": {
        "title": "Fix arbitrary path traversal vulnerability in full snapshot REST API (#3856)",
        "length": 265,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 116,
        "additions": 87,
        "deletions": 29
      },
      "files": [
        {
          "filename": "lib/collection/src/collection/snapshots.rs",
          "status": "modified",
          "additions": 23,
          "deletions": 23,
          "patch": "@@ -232,35 +232,35 @@ impl Collection {\n             .await\n     }\n \n+    /// Get full file path for a collection snapshot by name\n+    ///\n+    /// This enforces the file to be inside the snapshots directory\n     pub async fn get_snapshot_path(&self, snapshot_name: &str) -> CollectionResult<PathBuf> {\n-        let snapshot_path = self.snapshots_path.join(snapshot_name);\n-\n-        let absolute_snapshot_path =\n-            snapshot_path\n-                .canonicalize()\n-                .map_err(|_| CollectionError::NotFound {\n-                    what: format!(\"Snapshot {snapshot_name}\"),\n-                })?;\n-\n-        let absolute_snapshot_dir =\n-            self.snapshots_path\n-                .canonicalize()\n-                .map_err(|_| CollectionError::NotFound {\n-                    what: format!(\"Snapshot directory: {}\", self.snapshots_path.display()),\n-                })?;\n+        let absolute_snapshot_dir = self.snapshots_path.canonicalize().map_err(|_| {\n+            CollectionError::not_found(format!(\n+                \"Snapshot directory: {}\",\n+                self.snapshots_path.display()\n+            ))\n+        })?;\n+\n+        let absolute_snapshot_path = absolute_snapshot_dir\n+            .join(snapshot_name)\n+            .canonicalize()\n+            .map_err(|_| CollectionError::not_found(format!(\"Snapshot {snapshot_name}\")))?;\n \n         if !absolute_snapshot_path.starts_with(absolute_snapshot_dir) {\n-            return Err(CollectionError::NotFound {\n-                what: format!(\"Snapshot {snapshot_name}\"),\n-            });\n+            return Err(CollectionError::not_found(format!(\n+                \"Snapshot {snapshot_name}\"\n+            )));\n         }\n \n-        if !snapshot_path.exists() {\n-            return Err(CollectionError::NotFound {\n-                what: format!(\"Snapshot {snapshot_name}\"),\n-            });\n+        if !absolute_snapshot_path.exists() {\n+            return Err(CollectionError::not_found(format!(\n+                \"Snapshot {snapshot_name}\"\n+            )));\n         }\n-        Ok(snapshot_path)\n+\n+        Ok(absolute_snapshot_path)\n     }\n \n     pub async fn list_shard_snapshots("
        },
        {
          "filename": "lib/collection/src/operations/types.rs",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -959,6 +959,10 @@ impl CollectionError {\n         CollectionError::BadInput { description }\n     }\n \n+    pub fn not_found(what: impl Into<String>) -> CollectionError {\n+        CollectionError::NotFound { what: what.into() }\n+    }\n+\n     pub fn bad_request(description: String) -> CollectionError {\n         CollectionError::BadRequest { description }\n     }"
        },
        {
          "filename": "lib/storage/src/content_manager/errors.rs",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -56,6 +56,12 @@ impl StorageError {\n         }\n     }\n \n+    pub fn not_found(description: impl Into<String>) -> StorageError {\n+        StorageError::NotFound {\n+            description: description.into(),\n+        }\n+    }\n+\n     pub fn checksum_mismatch(expected: impl Into<String>, actual: impl Into<String>) -> Self {\n         StorageError::ChecksumMismatch {\n             expected: expected.into(),"
        },
        {
          "filename": "lib/storage/src/content_manager/snapshots/mod.rs",
          "status": "modified",
          "additions": 22,
          "deletions": 6,
          "patch": "@@ -23,17 +23,33 @@ pub struct SnapshotConfig {\n     pub collections_aliases: HashMap<String, String>,\n }\n \n+/// Get full file path for a full snapshot by name\n+///\n+/// This enforces the file to be inside the snapshots directory\n pub async fn get_full_snapshot_path(\n     toc: &TableOfContent,\n     snapshot_name: &str,\n ) -> Result<PathBuf, StorageError> {\n-    let snapshot_path = Path::new(toc.snapshots_path()).join(snapshot_name);\n-    if !snapshot_path.exists() {\n-        return Err(StorageError::NotFound {\n-            description: format!(\"Full storage snapshot {snapshot_name} not found\"),\n-        });\n+    let snapshots_path = toc.snapshots_path();\n+\n+    let absolute_snapshot_dir = Path::new(snapshots_path)\n+        .canonicalize()\n+        .map_err(|_| StorageError::not_found(format!(\"Snapshot directory: {snapshots_path}\")))?;\n+\n+    let absolute_snapshot_path = absolute_snapshot_dir\n+        .join(snapshot_name)\n+        .canonicalize()\n+        .map_err(|_| StorageError::not_found(format!(\"Snapshot {snapshot_name}\")))?;\n+\n+    if !absolute_snapshot_path.starts_with(absolute_snapshot_dir) {\n+        return Err(StorageError::not_found(format!(\"Snapshot {snapshot_name}\")));\n     }\n-    Ok(snapshot_path)\n+\n+    if !absolute_snapshot_path.exists() {\n+        return Err(StorageError::not_found(format!(\"Snapshot {snapshot_name}\")));\n+    }\n+\n+    Ok(absolute_snapshot_path)\n }\n \n pub async fn do_delete_full_snapshot("
        },
        {
          "filename": "tests/openapi/openapi_integration/test_snapshot.py",
          "status": "modified",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -1,10 +1,14 @@\n from time import sleep\n import hashlib\n+import os\n import pytest\n+import requests\n \n from .helpers.collection_setup import basic_collection_setup, drop_collection\n from .helpers.helpers import request_with_validation\n \n+QDRANT_HOST = os.environ.get(\"QDRANT_HOST\", \"localhost:6333\")\n+\n collection_name = 'test_collection_snapshot'\n \n \n@@ -361,3 +365,31 @@ def test_snapshot_invalid_file_uri():\n     )\n     assert response.status_code == 400\n     assert response.json()[\"status\"][\"error\"] == \"Bad request: Snapshot file \\\"/whatever.snapshot\\\" does not exist\"\n+\n+\n+def test_security():\n+    # ensure we cannot do simple arbitrary path traversal\n+    name = \"/etc/passwd\"\n+    response = requests.get(\n+        f\"http://{QDRANT_HOST}/collections/{name}\",\n+        headers={\"Content-Type\": \"application/json\"},\n+    )\n+    assert not response.ok\n+    assert response.status_code == 404\n+\n+    name = \"../../../../../../../etc/passwd\"\n+    response = requests.get(\n+        f\"http://{QDRANT_HOST}/collections/{name}\",\n+        headers={\"Content-Type\": \"application/json\"},\n+    )\n+    assert not response.ok\n+    assert response.status_code == 404\n+\n+    # ensure we cannot do arbitrary path traversal with encoded slashes\n+    response = request_with_validation(\n+        api='/snapshots/{snapshot_name}',\n+        path_params={'snapshot_name': '..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd'},\n+        method=\"GET\",\n+    )\n+    assert not response.ok\n+    assert response.status_code == 404"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e545b6964b328b1ab1964c4656d077e4f7680034",
            "date": "2025-01-08T14:43:27Z",
            "author_login": "timvisee"
          },
          {
            "sha": "7ea41c794da98cb4bd9e457445d27f840659e013",
            "date": "2025-01-08T13:32:23Z",
            "author_login": "IvanPleshkov"
          },
          {
            "sha": "d841d7dbe60831083dafb07e93c79278fcd365a1",
            "date": "2025-01-08T12:51:15Z",
            "author_login": "IvanPleshkov"
          },
          {
            "sha": "157ef24cb2ad5714e13ef95dd60f327b8ef269de",
            "date": "2025-01-08T09:58:47Z",
            "author_login": "IvanPleshkov"
          },
          {
            "sha": "472f8e0a7167c49a2ec18064b757f0fbb8bfbd67",
            "date": "2025-01-07T20:45:09Z",
            "author_login": "generall"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-22",
    "description": "A vulnerability was found in Qdrant up to 1.6.1/1.7.4/1.8.2 and classified as critical. This issue affects some unknown processing of the file lib/collection/src/collection/snapshots.rs of the component Full Snapshot REST API. The manipulation leads to path traversal. Upgrading to version 1.8.3 is able to address this issue. The patch is named 3ab5172e9c8f14fa1f7b24e7147eac74e2412b62. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-258611.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-03-29T13:15:16.477",
    "last_modified": "2024-11-21T09:28:50.920",
    "fix_date": "2024-03-18T19:51:17Z"
  },
  "references": [
    {
      "url": "https://github.com/qdrant/qdrant/commit/3ab5172e9c8f14fa1f7b24e7147eac74e2412b62",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://github.com/qdrant/qdrant/pull/3856",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://github.com/qdrant/qdrant/releases/tag/v1.8.3",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://vuldb.com/?ctiid.258611",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://vuldb.com/?id.258611",
      "source": "cna@vuldb.com",
      "tags": []
    },
    {
      "url": "https://github.com/qdrant/qdrant/commit/3ab5172e9c8f14fa1f7b24e7147eac74e2412b62",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/qdrant/qdrant/pull/3856",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/qdrant/qdrant/releases/tag/v1.8.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://vuldb.com/?ctiid.258611",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://vuldb.com/?id.258611",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.929459",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "qdrant",
    "owner": "qdrant",
    "created_at": "2020-05-30T21:37:01Z",
    "updated_at": "2025-01-14T14:17:13Z",
    "pushed_at": "2025-01-14T14:15:51Z",
    "size": 27075,
    "stars": 21340,
    "forks": 1464,
    "open_issues": 358,
    "watchers": 21340,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Rust": 7514996,
      "Python": 911220,
      "Shell": 91875,
      "C": 16974,
      "Dockerfile": 7599,
      "Nix": 5997,
      "JavaScript": 1502,
      "Mermaid": 970
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:26:34.529008"
  }
}