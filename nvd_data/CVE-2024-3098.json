{
  "cve_id": "CVE-2024-3098",
  "github_data": {
    "repository": "run-llama/llama_index",
    "fix_commit": "5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
    "related_commits": [
      "5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
      "5fbcb5a8b9f20f81b791c7fc8849e352613ab475"
    ],
    "patch_url": "https://github.com/run-llama/llama_index/commit/5fbcb5a8b9f20f81b791c7fc8849e352613ab475.patch",
    "fix_commit_details": {
      "sha": "5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
      "commit_date": "2024-03-26T15:48:57Z",
      "author": {
        "login": "logan-markewich",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "stricter access to builting in pandas query engine",
        "length": 50,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 18,
        "additions": 11,
        "deletions": 7
      },
      "files": [
        {
          "filename": "llama-index-core/llama_index/core/exec_utils.py",
          "status": "modified",
          "additions": 11,
          "deletions": 7,
          "patch": "@@ -45,20 +45,16 @@ def _restricted_import(\n     \"float\": float,\n     \"format\": format,\n     \"frozenset\": frozenset,\n-    \"getattr\": getattr,\n-    \"hasattr\": hasattr,\n     \"hash\": hash,\n     \"hex\": hex,\n     \"int\": int,\n     \"isinstance\": isinstance,\n     \"issubclass\": issubclass,\n-    \"iter\": iter,\n     \"len\": len,\n     \"list\": list,\n     \"map\": map,\n     \"max\": max,\n     \"min\": min,\n-    \"next\": next,\n     \"oct\": oct,\n     \"ord\": ord,\n     \"pow\": pow,\n@@ -68,7 +64,6 @@ def _restricted_import(\n     \"reversed\": reversed,\n     \"round\": round,\n     \"set\": set,\n-    \"setattr\": setattr,\n     \"slice\": slice,\n     \"sorted\": sorted,\n     \"str\": str,\n@@ -94,23 +89,31 @@ def _get_restricted_globals(__globals: Union[dict, None]) -> Any:\n class DunderVisitor(ast.NodeVisitor):\n     def __init__(self) -> None:\n         self.has_access_to_private_entity = False\n+        self.has_access_to_disallowed_builtin = False\n \n     def visit_Name(self, node: ast.Name) -> None:\n         if node.id.startswith(\"_\"):\n             self.has_access_to_private_entity = True\n+        if node.id not in ALLOWED_BUILTINS:\n+            self.has_access_to_disallowed_builtin = True\n         self.generic_visit(node)\n \n     def visit_Attribute(self, node: ast.Attribute) -> None:\n         if node.attr.startswith(\"_\"):\n             self.has_access_to_private_entity = True\n+        if node.attr not in ALLOWED_BUILTINS:\n+            self.has_access_to_disallowed_builtin = True\n         self.generic_visit(node)\n \n \n def _contains_protected_access(code: str) -> bool:\n     tree = ast.parse(code)\n     dunder_visitor = DunderVisitor()\n     dunder_visitor.visit(tree)\n-    return dunder_visitor.has_access_to_private_entity\n+    return (\n+        dunder_visitor.has_access_to_private_entity\n+        or dunder_visitor.has_access_to_disallowed_builtin\n+    )\n \n \n def _verify_source_safety(__source: Union[str, bytes, CodeType]) -> None:\n@@ -124,7 +127,8 @@ def _verify_source_safety(__source: Union[str, bytes, CodeType]) -> None:\n         __source = __source.decode()\n     if _contains_protected_access(__source):\n         raise RuntimeError(\n-            \"Execution of code containing references to private or dunder methods is forbidden!\"\n+            \"Execution of code containing references to private or dunder methods, \"\n+            \"or disallowed builtins, is forbidden!\"\n         )\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "080faffa641bbb1b0f2304bee58faf58143b9223",
            "date": "2025-01-13T22:13:05Z",
            "author_login": "dnandha"
          },
          {
            "sha": "2668cb7101e4bd670d95ba7f181c6b07d0299353",
            "date": "2025-01-13T18:03:57Z",
            "author_login": "xjtushilei"
          },
          {
            "sha": "b4d004b7f259335255ec6e37f67784238dea034d",
            "date": "2025-01-13T17:39:00Z",
            "author_login": "mi-iro"
          },
          {
            "sha": "a2139caf2b65d30b687e73137b60dc95def2a863",
            "date": "2025-01-13T16:57:00Z",
            "author_login": "ashvin-a"
          },
          {
            "sha": "5e3d3964a51738065b010802efd7c4bdacf2d2c5",
            "date": "2025-01-13T16:24:26Z",
            "author_login": "ashvin-a"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-94",
    "description": "A vulnerability was identified in the `exec_utils` class of the `llama_index` package, specifically within the `safe_eval` function, allowing for prompt injection leading to arbitrary code execution. This issue arises due to insufficient validation of input, which can be exploited to bypass method restrictions and execute unauthorized code. The vulnerability is a bypass of the previously addressed CVE-2023-39662, demonstrated through a proof of concept that creates a file on the system by exploiting the flaw.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-04-10T17:15:56.213",
    "last_modified": "2024-11-21T09:28:53.823",
    "fix_date": "2024-03-26T15:48:57Z"
  },
  "references": [
    {
      "url": "https://github.com/run-llama/llama_index/commit/5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/1bce0d61-ad03-4b22-bc32-8f99f92974e7",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/run-llama/llama_index/commit/5fbcb5a8b9f20f81b791c7fc8849e352613ab475",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/1bce0d61-ad03-4b22-bc32-8f99f92974e7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.466581",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "llama_index",
    "owner": "run-llama",
    "created_at": "2022-11-02T04:24:54Z",
    "updated_at": "2025-01-14T13:47:30Z",
    "pushed_at": "2025-01-14T14:04:29Z",
    "size": 254256,
    "stars": 38015,
    "forks": 5451,
    "open_issues": 670,
    "watchers": 38015,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 11849706,
      "Jupyter Notebook": 11030218,
      "Makefile": 409782,
      "JavaScript": 85982,
      "Starlark": 73012,
      "Scheme": 17376,
      "Dockerfile": 5734,
      "Shell": 4557
    },
    "commit_activity": {
      "total_commits_last_year": 3116,
      "avg_commits_per_week": 59.92307692307692,
      "days_active_last_year": 351
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:11:33.494247"
  }
}