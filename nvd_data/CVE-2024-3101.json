{
  "cve_id": "CVE-2024-3101",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "52fac844221a9b951d08ceb93c4c014e9397b1f2",
    "related_commits": [
      "52fac844221a9b951d08ceb93c4c014e9397b1f2",
      "52fac844221a9b951d08ceb93c4c014e9397b1f2"
    ],
    "patch_url": "https://github.com/mintplex-labs/anything-llm/commit/52fac844221a9b951d08ceb93c4c014e9397b1f2.patch",
    "fix_commit_details": {
      "sha": "52fac844221a9b951d08ceb93c4c014e9397b1f2",
      "commit_date": "2024-03-29T17:56:32Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Patch ability to update multi-user-flag once set (#993)",
        "length": 159,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 63,
        "additions": 40,
        "deletions": 23
      },
      "files": [
        {
          "filename": "server/endpoints/system.js",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -400,7 +400,7 @@ function systemEndpoints(app) {\n           password,\n           role: ROLES.admin,\n         });\n-        await SystemSettings.updateSettings({\n+        await SystemSettings._updateSettings({\n           multi_user_mode: true,\n           users_can_delete_workspaces: false,\n           limit_user_messages: false,\n@@ -422,7 +422,7 @@ function systemEndpoints(app) {\n         response.status(200).json({ success: !!user, error });\n       } catch (e) {\n         await User.delete({});\n-        await SystemSettings.updateSettings({\n+        await SystemSettings._updateSettings({\n           multi_user_mode: false,\n         });\n \n@@ -623,7 +623,7 @@ function systemEndpoints(app) {\n         const existingLogoFilename = await SystemSettings.currentLogoFilename();\n         await removeCustomLogo(existingLogoFilename);\n \n-        const { success, error } = await SystemSettings.updateSettings({\n+        const { success, error } = await SystemSettings._updateSettings({\n           logo_filename: newFilename,\n         });\n \n@@ -657,7 +657,7 @@ function systemEndpoints(app) {\n       try {\n         const currentLogoFilename = await SystemSettings.currentLogoFilename();\n         await removeCustomLogo(currentLogoFilename);\n-        const { success, error } = await SystemSettings.updateSettings({\n+        const { success, error } = await SystemSettings._updateSettings({\n           logo_filename: LOGO_FILENAME,\n         });\n "
        },
        {
          "filename": "server/models/systemSettings.js",
          "status": "modified",
          "additions": 35,
          "deletions": 18,
          "patch": "@@ -5,8 +5,8 @@ process.env.NODE_ENV === \"development\"\n const prisma = require(\"../utils/prisma\");\n \n const SystemSettings = {\n+  protectedFields: [\"multi_user_mode\"],\n   supportedFields: [\n-    \"multi_user_mode\",\n     \"users_can_delete_workspaces\",\n     \"limit_user_messages\",\n     \"message_limit\",\n@@ -287,26 +287,43 @@ const SystemSettings = {\n     }\n   },\n \n+  // Can take generic keys and will pre-filter invalid keys\n+  // from the set before sending to the explicit update function\n+  // that will then enforce validations as well.\n   updateSettings: async function (updates = {}) {\n+    const validFields = Object.keys(updates).filter((key) =>\n+      this.supportedFields.includes(key)\n+    );\n+\n+    Object.entries(updates).forEach(([key]) => {\n+      if (validFields.includes(key)) return;\n+      delete updates[key];\n+    });\n+\n+    return this._updateSettings(updates);\n+  },\n+\n+  // Explicit update of settings + key validations.\n+  // Only use this method when directly setting a key value\n+  // that takes no user input for the keys being modified.\n+  _updateSettings: async function (updates = {}) {\n     try {\n-      const updatePromises = Object.keys(updates)\n-        .filter((key) => this.supportedFields.includes(key))\n-        .map((key) => {\n-          const validatedValue = this.validations.hasOwnProperty(key)\n-            ? this.validations[key](updates[key])\n-            : updates[key];\n-\n-          return prisma.system_settings.upsert({\n-            where: { label: key },\n-            update: {\n-              value: validatedValue === null ? null : String(validatedValue),\n-            },\n-            create: {\n-              label: key,\n-              value: validatedValue === null ? null : String(validatedValue),\n-            },\n-          });\n+      const updatePromises = Object.keys(updates).map((key) => {\n+        const validatedValue = this.validations.hasOwnProperty(key)\n+          ? this.validations[key](updates[key])\n+          : updates[key];\n+\n+        return prisma.system_settings.upsert({\n+          where: { label: key },\n+          update: {\n+            value: validatedValue === null ? null : String(validatedValue),\n+          },\n+          create: {\n+            label: key,\n+            value: validatedValue === null ? null : String(validatedValue),\n+          },\n         });\n+      });\n \n       await Promise.all(updatePromises);\n       return { success: true, error: null };"
        },
        {
          "filename": "server/models/telemetry.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -67,7 +67,7 @@ const Telemetry = {\n \n   setUid: async function () {\n     const newId = v4();\n-    await SystemSettings.updateSettings({ [this.label]: newId });\n+    await SystemSettings._updateSettings({ [this.label]: newId });\n     return newId;\n   },\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d5d8d4dec0e62662c8ec46537038353f45e0e66",
            "date": "2025-01-14T16:20:57Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "21af81085aeb049750942ac5f3b84775cb461693",
            "date": "2025-01-13T21:12:03Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "665e8e5bfe431ad93bed6736d0b450592617d042",
            "date": "2025-01-09T23:39:56Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "865f7eea296e544b2eb1ab8c1f322208eaf5eb05",
            "date": "2025-01-09T21:32:54Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "be886f7d61296a30d5b8a095ca8329f58a0c5a0a",
            "date": "2025-01-09T01:21:30Z",
            "author_login": "root-reindeer-flotilla"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-20",
    "description": "In mintplex-labs/anything-llm, an improper input validation vulnerability allows attackers to escalate privileges by deactivating 'Multi-User Mode'. By sending a specially crafted curl request with the 'multi_user_mode' parameter set to false, an attacker can deactivate 'Multi-User Mode'. This action permits the creation of a new admin user without requiring a password, leading to unauthorized administrative access.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-04-10T17:15:56.417",
    "last_modified": "2024-11-21T09:28:54.283",
    "fix_date": "2024-03-29T17:56:32Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/52fac844221a9b951d08ceb93c4c014e9397b1f2",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/c114c03e-3348-450f-88f7-538502047bcc",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/52fac844221a9b951d08ceb93c4c014e9397b1f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/c114c03e-3348-450f-88f7-538502047bcc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.466717",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-14T13:49:57Z",
    "pushed_at": "2025-01-13T21:12:06Z",
    "size": 42916,
    "stars": 30237,
    "forks": 3030,
    "open_issues": 206,
    "watchers": 30237,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3056909,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:33.088245"
  }
}