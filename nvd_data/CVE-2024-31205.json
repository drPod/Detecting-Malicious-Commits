{
  "cve_id": "CVE-2024-31205",
  "github_data": {
    "repository": "saleor/saleor",
    "fix_commit": "36699c6f5c99590d24f46e3d5c5b1a3c2fd072e7",
    "related_commits": [
      "36699c6f5c99590d24f46e3d5c5b1a3c2fd072e7",
      "36699c6f5c99590d24f46e3d5c5b1a3c2fd072e7"
    ],
    "patch_url": "https://github.com/saleor/saleor/commit/36699c6f5c99590d24f46e3d5c5b1a3c2fd072e7.patch",
    "fix_commit_details": {
      "sha": "36699c6f5c99590d24f46e3d5c5b1a3c2fd072e7",
      "commit_date": "2024-04-02T11:13:36Z",
      "author": {
        "login": "zedzior",
        "type": "User",
        "stats": {
          "total_commits": 102,
          "average_weekly_commits": 0.1637239165329053,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 57
        }
      },
      "commit_message": {
        "title": "Advisory fix merx-280.",
        "length": 22,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 30,
        "additions": 26,
        "deletions": 4
      },
      "files": [
        {
          "filename": "saleor/graphql/account/mutations/authentication/refresh_token.py",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -58,14 +58,13 @@ def get_refresh_token(\n         cls, info: ResolveInfo, refresh_token: Optional[str] = None\n     ) -> Optional[str]:\n         request = info.context\n-        refresh_token = refresh_token or request.COOKIES.get(\n-            JWT_REFRESH_TOKEN_COOKIE_NAME, None\n-        )\n+        if refresh_token is None:\n+            refresh_token = request.COOKIES.get(JWT_REFRESH_TOKEN_COOKIE_NAME, None)\n         return refresh_token\n \n     @classmethod\n     def clean_refresh_token(cls, refresh_token):\n-        if not refresh_token:\n+        if refresh_token is None:\n             raise ValidationError(\n                 {\n                     \"refresh_token\": ValidationError("
        },
        {
          "filename": "saleor/graphql/account/tests/mutations/authentication/test_token_refresh.py",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -1,5 +1,6 @@\n from datetime import datetime\n \n+import pytest\n from django.urls import reverse\n from freezegun import freeze_time\n \n@@ -269,3 +270,25 @@ def test_refresh_token_when_user_deactivated_token(api_client, customer_user):\n     assert not data[\"token\"]\n     assert len(errors) == 1\n     assert errors[0][\"code\"] == AccountErrorCode.JWT_INVALID_TOKEN.name\n+\n+\n+@pytest.mark.parametrize(\"token\", [\"incorrect-token\", \"\"])\n+def test_refresh_token_incorrect_token_provided(api_client, customer_user, token):\n+    # given\n+    csrf_token = _get_new_csrf_token()\n+    refresh_token = create_refresh_token(customer_user, {\"csrfToken\": csrf_token})\n+    api_client.cookies[JWT_REFRESH_TOKEN_COOKIE_NAME] = refresh_token\n+    api_client.cookies[JWT_REFRESH_TOKEN_COOKIE_NAME][\"httponly\"] = True\n+\n+    variables = {\"token\": token, \"csrf_token\": csrf_token}\n+\n+    # when\n+    response = api_client.post_graphql(MUTATION_TOKEN_REFRESH, variables)\n+    content = get_graphql_content(response)\n+\n+    # then\n+    data = content[\"data\"][\"tokenRefresh\"]\n+    errors = data[\"errors\"]\n+    assert not data.get(\"token\")\n+    assert len(errors) == 1\n+    assert errors[0][\"code\"] == AccountErrorCode.JWT_DECODE_ERROR.name"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "486877e53e05c27b4691647d1e0e7cc0f47e91bf",
            "date": "2025-01-14T09:18:31Z",
            "author_login": "patrys"
          },
          {
            "sha": "23b8d28989445f33ed35363156a8b675eb610472",
            "date": "2025-01-13T12:06:01Z",
            "author_login": "patrys"
          },
          {
            "sha": "789e33510a4225f20a0ccc9634ff7b49bb9ca912",
            "date": "2025-01-13T14:36:25Z",
            "author_login": "korycins"
          },
          {
            "sha": "83efad25c0813b7b3fe2741781a263e22ff84e1a",
            "date": "2025-01-13T08:42:38Z",
            "author_login": "szczecha"
          },
          {
            "sha": "5f8b1cc4db2d54295193eb92d7b862164ce197ce",
            "date": "2025-01-10T13:13:49Z",
            "author_login": "korycins"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-352",
    "description": "Saleor is an e-commerce platform. Starting in version 3.10.0 and prior to versions 3.14.64, 3.15.39, 3.16.39, 3.17.35, 3.18.31, and 3.19.19, an attacker may bypass cross-set request forgery (CSRF) validation when calling refresh token mutation with empty string. When a user provides an empty string in `refreshToken` mutation, while the token persists in `JWT_REFRESH_TOKEN_COOKIE_NAME` cookie, application omits validation against CSRF token and returns valid access token. Versions 3.14.64, 3.15.39, 3.16.39, 3.17.35, 3.18.31, and 3.19.19 contain a patch for the issue. As a workaround, one may replace `saleor.graphql.account.mutations.authentication.refresh_token.py.get_refresh_token`. This will fix the issue, but be aware, that it returns `JWT_MISSING_TOKEN` instead of `JWT_INVALID_TOKEN`.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-04-08T15:15:08.023",
    "last_modified": "2024-11-21T09:13:02.140",
    "fix_date": "2024-04-02T11:13:36Z"
  },
  "references": [
    {
      "url": "https://github.com/saleor/saleor/commit/36699c6f5c99590d24f46e3d5c5b1a3c2fd072e7",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/security/advisories/GHSA-ff69-fwjf-3c9w",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/commit/36699c6f5c99590d24f46e3d5c5b1a3c2fd072e7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/saleor/saleor/security/advisories/GHSA-ff69-fwjf-3c9w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.447760",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saleor",
    "owner": "saleor",
    "created_at": "2013-02-12T16:46:39Z",
    "updated_at": "2025-01-14T09:18:44Z",
    "pushed_at": "2025-01-14T13:41:59Z",
    "size": 264902,
    "stars": 20990,
    "forks": 5549,
    "open_issues": 341,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.20"
    ],
    "languages": {
      "Python": 22045293,
      "HTML": 249642,
      "Dockerfile": 2521,
      "Shell": 439,
      "Makefile": 121
    },
    "commit_activity": {
      "total_commits_last_year": 715,
      "avg_commits_per_week": 13.75,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:42:28.369369"
  }
}