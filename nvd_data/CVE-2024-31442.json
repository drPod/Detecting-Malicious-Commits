{
  "cve_id": "CVE-2024-31442",
  "github_data": {
    "repository": "Redon-Tech/Redon-Hub",
    "fix_commit": "38cb7c08d4d890e8a1badadbd46f459f06e3cdcd",
    "related_commits": [
      "38cb7c08d4d890e8a1badadbd46f459f06e3cdcd",
      "38cb7c08d4d890e8a1badadbd46f459f06e3cdcd"
    ],
    "patch_url": "https://github.com/Redon-Tech/Redon-Hub/commit/38cb7c08d4d890e8a1badadbd46f459f06e3cdcd.patch",
    "fix_commit_details": {
      "sha": "38cb7c08d4d890e8a1badadbd46f459f06e3cdcd",
      "commit_date": "2024-04-07T08:34:43Z",
      "author": {
        "login": "parker02311",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "V1.0.2",
        "length": 6,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 74,
        "additions": 55,
        "deletions": 19
      },
      "files": [
        {
          "filename": "bot/__init__.py",
          "status": "modified",
          "additions": 21,
          "deletions": 2,
          "patch": "@@ -3,16 +3,18 @@\n     Usage: The bot's main file.\n \"\"\"\n \n-from discord import Object as DiscordObject\n+from discord import Interaction, Embed\n from discord.ext.commands import Bot as BotBase\n+from discord.app_commands import AppCommandError, MissingPermissions\n from . import config\n from .data import database\n from glob import glob\n import logging\n import os\n+import datetime\n \n _log = logging.getLogger(__name__)\n-__version__ = \"1.0.0\"\n+__version__ = \"1.0.2\"\n \n \n class Bot(BotBase):\n@@ -21,6 +23,8 @@ def __init__(self, *args, **kwargs):\n         self.ready = False\n         super().__init__(*args, **kwargs)\n \n+        self.tree.on_error = self.on_app_command_error\n+\n     async def load_extensions(self):\n         # Original code from pycord\n \n@@ -54,3 +58,18 @@ async def on_ready(self):\n             await database.connect()\n \n             _log.info(\"Database Connected\")\n+\n+    async def on_app_command_error(\n+        self, interaction: Interaction, error: AppCommandError\n+    ):\n+        if isinstance(error, MissingPermissions):\n+            await interaction.response.send_message(\n+                embed=Embed(\n+                    title=\"Error\",\n+                    description=\"You are not allowed to use this command.\",\n+                    colour=interaction.user.colour,\n+                    timestamp=datetime.datetime.now(datetime.timezone.utc),\n+                ).set_footer(text=f\"Redon Hub \u2022 Version {self.version}\"),\n+            )\n+\n+        _log.error(error)"
        },
        {
          "filename": "bot/cogs/product.py",
          "status": "modified",
          "additions": 17,
          "deletions": 12,
          "patch": "@@ -2,10 +2,10 @@\n     File: /bot/cogs/product.py\n     Usage: Product related commands\n \"\"\"\n+\n from discord import (\n     app_commands,\n     Interaction,\n-    Member,\n     Embed,\n     utils,\n     ui,\n@@ -14,13 +14,13 @@\n     ButtonStyle,\n     Role,\n )\n+from discord.app_commands import MissingPermissions\n from asyncio import TimeoutError\n from discord.ext.commands import Cog\n from bot.data import (\n     get_users,\n     get_products,\n     get_product_by_name,\n-    get_product,\n     create_product,\n     delete_product,\n     get_tags,\n@@ -817,7 +817,6 @@ def __init__(self, bot):\n         name=\"admin\",\n         description=\"Product Admin Commands\",\n         parent=product_commands,\n-        default_permissions=None,\n     )\n \n     @app_commands.command(\n@@ -893,6 +892,7 @@ async def get_product_info_command_autocomplete(\n     @product_admin.command(\n         name=\"stats\", description=\"Get statistics on a specific product\"\n     )\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def get_product_stats_info_command(\n         self, interaction: Interaction, product_name: str\n     ):\n@@ -939,10 +939,12 @@ async def get_product_stats_info_command_autocomplete(\n         ]\n \n     @product_admin.command(name=\"create\", description=\"Create a new product\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def create_product_command(self, interaction: Interaction):\n         await interaction.response.send_modal(createProduct(bot=self.bot))\n \n     @product_admin.command(name=\"delete\", description=\"Delete a product\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def delete_product_command(self, interaction: Interaction, product_name: str):\n         try:\n             product = await get_product_by_name(product_name)\n@@ -1033,17 +1035,19 @@ async def update_product_command_autocomplete(\n         ]\n \n     @product_admin.command(name=\"clear\", description=\"Delete all products\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def clear_products_command(self, interaction: Interaction):\n         if interaction.user.id not in config.Bot.Owners:\n-            await interaction.response.send_message(\n-                embed=Embed(\n-                    title=\"Error\",\n-                    description=\"You are not allowed to use this command.\",\n-                    colour=interaction.user.colour,\n-                    timestamp=utils.utcnow(),\n-                ).set_footer(text=f\"Redon Hub \u2022 Version {self.bot.version}\"),\n-            )\n-            return\n+            # await interaction.response.send_message(\n+            #     embed=Embed(\n+            #         title=\"Error\",\n+            #         description=\"You are not allowed to use this command.\",\n+            #         colour=interaction.user.colour,\n+            #         timestamp=utils.utcnow(),\n+            #     ).set_footer(text=f\"Redon Hub \u2022 Version {self.bot.version}\"),\n+            # )\n+            # return\n+            raise MissingPermissions(\"Bot Owner\")\n \n         try:\n             products = await get_products()\n@@ -1114,6 +1118,7 @@ async def clear_products_command(self, interaction: Interaction):\n             )\n \n     @product_admin.command(name=\"update\", description=\"Update a product\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def update_product_command(self, interaction: Interaction, product_name: str):\n         await interaction.response.defer()\n "
        },
        {
          "filename": "bot/cogs/tag.py",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -2,15 +2,14 @@\n     File: /bot/cogs/tags.py\n     Usage: Tag related commands\n \"\"\"\n+\n from discord import (\n     app_commands,\n     Interaction,\n     Embed,\n     utils,\n     ui,\n-    TextStyle,\n     SelectOption,\n-    ButtonStyle,\n )\n from discord.ext.commands import Cog\n from bot.data import get_tag, get_tag_by_name, get_tags, create_tag, delete_tag, Tag\n@@ -192,7 +191,6 @@ def __init__(self, bot):\n         name=\"admin\",\n         description=\"Tag Admin Commands\",\n         parent=tag_commands,\n-        default_permissions=None,\n     )\n \n     @app_commands.command(name=\"tags\", description=\"View all the tags this server has\")\n@@ -260,10 +258,12 @@ async def get_tag_info_command_autocomplete(\n         ]\n \n     @tag_admin.command(name=\"create\", description=\"Create a new tag\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def create_tag_command(self, interaction: Interaction):\n         await interaction.response.send_modal(createTag(bot=self.bot))\n \n     @tag_admin.command(name=\"delete\", description=\"Delete a tag\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def delete_tag_command(self, interaction: Interaction):\n         await interaction.response.defer()\n \n@@ -280,6 +280,7 @@ async def delete_tag_command(self, interaction: Interaction):\n         )\n \n     @tag_admin.command(name=\"update\", description=\"Update a tag\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def update_tag_command(self, interaction: Interaction, tag_name: str):\n         try:\n             tag = await get_tag_by_name(tag_name)"
        },
        {
          "filename": "bot/cogs/user.py",
          "status": "modified",
          "additions": 13,
          "deletions": 2,
          "patch": "@@ -2,7 +2,15 @@\n     File: /bot/cogs/user.py\n     Usage: User related commands\n \"\"\"\n-from discord import app_commands, Interaction, Member, Embed, utils, Forbidden\n+\n+from discord import (\n+    app_commands,\n+    Interaction,\n+    Member,\n+    Embed,\n+    utils,\n+    Forbidden,\n+)\n from discord.ext.commands import Cog\n from bot.data import (\n     get_user_by_discord_id,\n@@ -27,7 +35,6 @@ def __init__(self, bot):\n         name=\"admin\",\n         description=\"User Admin Commands\",\n         parent=user_commands,\n-        default_permissions=None,\n     )\n \n     @app_commands.command(name=\"profile\", description=\"View a user's profile\")\n@@ -391,6 +398,7 @@ async def user_transfer_autocomplete(\n         ]\n \n     @user_admin.command(name=\"give\", description=\"Give a user a product\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def user_admin_give(\n         self, interaction: Interaction, product_name: str, member: Member\n     ):\n@@ -483,6 +491,7 @@ async def user_admin_give(\n             )\n \n     @user_admin_give.autocomplete(\"product_name\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def user_admin_give_autocomplete(\n         self, interaction: Interaction, current_product_name: str\n     ):\n@@ -498,6 +507,7 @@ async def user_admin_give_autocomplete(\n         ]\n \n     @user_admin.command(name=\"revoke\", description=\"Revoke a product from a user\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def user_admin_revoke(\n         self, interaction: Interaction, product_name: str, member: Member\n     ):\n@@ -572,6 +582,7 @@ async def user_admin_revoke(\n             )\n \n     @user_admin_revoke.autocomplete(\"product_name\")\n+    @app_commands.checks.has_permissions(administrator=True)\n     async def user_admin_revoke_autocomplete(\n         self, interaction: Interaction, current_product_name: str\n     ):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "51c1979318f9c69c81670faa58faf5c066fc6b59",
            "date": "2024-12-06T20:10:30Z",
            "author_login": "parker02311"
          },
          {
            "sha": "c3110a37646cfa1e5768a6177b01b3e17bc8d7b8",
            "date": "2024-12-06T20:07:31Z",
            "author_login": "parker02311"
          },
          {
            "sha": "cf9d8ebc9173e9c13dbb2edaa15f54d567ae82bd",
            "date": "2024-12-06T20:03:59Z",
            "author_login": "parker02311"
          },
          {
            "sha": "dc43dbf5a28a31e59ea87ab8fddcd9767f135f7c",
            "date": "2024-12-02T05:54:46Z",
            "author_login": "parker02311"
          },
          {
            "sha": "44ec92b943b448a61a482dc16ca9a4b6dbbd94a4",
            "date": "2024-12-02T05:46:52Z",
            "author_login": "parker02311"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-276",
    "description": "Redon Hub is a Roblox Product Delivery Bot, also known as a Hub. In all hubs before version 1.0.2, all commands are capable of being ran by all users, including admin commands. This allows users to receive products for free and delete/create/update products/tags/etc. The only non-affected command is `/products admin clear` as this was already programmed for bot owners only. All users should upgrade to version 1.0.2 to receive a patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-08T16:15:07.990",
    "last_modified": "2024-11-21T09:13:31.740",
    "fix_date": "2024-04-07T08:34:43Z"
  },
  "references": [
    {
      "url": "https://github.com/Redon-Tech/Redon-Hub/commit/38cb7c08d4d890e8a1badadbd46f459f06e3cdcd",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Redon-Tech/Redon-Hub/security/advisories/GHSA-3rx8-6453-7q26",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/Redon-Tech/Redon-Hub/commit/38cb7c08d4d890e8a1badadbd46f459f06e3cdcd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/Redon-Tech/Redon-Hub/security/advisories/GHSA-3rx8-6453-7q26",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.449018",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Redon-Hub",
    "owner": "Redon-Tech",
    "created_at": "2023-01-12T19:02:15Z",
    "updated_at": "2025-01-03T18:19:47Z",
    "pushed_at": "2024-12-24T01:08:29Z",
    "size": 6042,
    "stars": 9,
    "forks": 5,
    "open_issues": 6,
    "watchers": 9,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 147625,
      "Luau": 35787,
      "PowerShell": 265
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:53:43.009597"
  }
}