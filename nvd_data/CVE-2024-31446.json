{
  "cve_id": "CVE-2024-31446",
  "github_data": {
    "repository": "MightyPirates/OpenComputers",
    "fix_commit": "9d4f7ea297953c2fd8ccfd24fe549d5e9576400f",
    "related_commits": [
      "9d4f7ea297953c2fd8ccfd24fe549d5e9576400f",
      "9d4f7ea297953c2fd8ccfd24fe549d5e9576400f"
    ],
    "patch_url": "https://github.com/MightyPirates/OpenComputers/commit/9d4f7ea297953c2fd8ccfd24fe549d5e9576400f.patch",
    "fix_commit_details": {
      "sha": "9d4f7ea297953c2fd8ccfd24fe549d5e9576400f",
      "commit_date": "2024-04-16T16:39:11Z",
      "author": {
        "login": "asiekierka",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix pcall()/xpcall() bug.",
        "length": 25,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 35,
        "additions": 24,
        "deletions": 11
      },
      "files": [
        {
          "filename": "src/main/resources/assets/opencomputers/lua/machine.lua",
          "status": "modified",
          "additions": 24,
          "deletions": 11,
          "patch": "@@ -761,6 +761,10 @@ sandbox = {\n   next = next,\n   pairs = pairs,\n   pcall = function(...)\n+    -- prevent infinite pcall() loops by checking deadline before pcall()\n+    local status, err = pcall(checkDeadline)\n+    if not status then return false, err end\n+\n     return pcallTimeoutCheck(pcall(...))\n   end,\n   print = nil, -- in boot/*_base.lua\n@@ -807,18 +811,27 @@ sandbox = {\n   type = type,\n   _VERSION = _VERSION:match(\"Luaj\") and \"Luaj\" or _VERSION:match(\"5.4\") and \"Lua 5.4\" or _VERSION:match(\"5.3\") and \"Lua 5.3\" or \"Lua 5.2\",\n   xpcall = function(f, msgh, ...)\n-    local handled = false\n+    -- allow xpcall() to call the message handler recursively, per manual 2.3\n+    -- Lua itself promises to break the infinite loop; failing that, the timeout\n+    -- check will take care of this.\n+    local errorCapture\n+    errorCapture = function(ff, ...)\n+      -- prevent infinite xpcall() loops by checking deadline before xpcall()\n+      local status, err = pcall(checkDeadline)\n+      if not status then return false, err end\n+\n+      return xpcall(ff, function(...)\n+        if rawequal((...), tooLongWithoutYielding) then\n+          return tooLongWithoutYielding\n+        else\n+          return select(2, errorCapture(msgh, ...))\n+        end\n+      end, ...)\n+    end\n+\n     checkArg(2, msgh, \"function\")\n-    local result = table.pack(xpcall(f, function(...)\n-      if rawequal((...), tooLongWithoutYielding) then\n-        return tooLongWithoutYielding\n-      elseif handled then\n-        return ...\n-      else\n-        handled = true\n-        return msgh(...)\n-      end\n-    end, ...))\n+    local result = table.pack(errorCapture(f, ...))\n+    -- if the final returned error is due to timeout, run handler one last time\n     if rawequal(result[2], tooLongWithoutYielding) then\n       result = table.pack(result[1], select(2, pcallTimeoutCheck(pcall(msgh, tostring(tooLongWithoutYielding)))))\n     end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7fecb0732ce36b2e6246b5fd85ca298e00a79e2b",
            "date": "2025-01-05T18:24:08Z",
            "author_login": "asiekierka"
          },
          {
            "sha": "e8595d2086788c5d1ad969e0716eae7a3427a79f",
            "date": "2025-01-05T18:00:52Z",
            "author_login": "asiekierka"
          },
          {
            "sha": "a46e77b86ef11985f5fba8891647fe5d3ac93886",
            "date": "2025-01-05T17:56:59Z",
            "author_login": "asiekierka"
          },
          {
            "sha": "6f3634ac82b137ab4d373dcea384150d6c0e5415",
            "date": "2025-01-05T13:15:19Z",
            "author_login": "asiekierka"
          },
          {
            "sha": "7f2f4497ade57ae4434d6c9fd6f2ff73feaf3845",
            "date": "2025-01-05T12:43:36Z",
            "author_login": "asiekierka"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "OpenComputers is a Minecraft mod that adds programmable computers and robots to the game. A user can use OpenComputers to get a Computer thread stuck in the Lua VM, which eventually blocks the Server thread, requiring the server to be forcibly shut down. This can be accomplished using any device in the mod and can be performed by anyone who can execute Lua code on them. This occurs while using the native Lua library. LuaJ appears to not have this issue. This vulnerability is fixed in 1.8.4. The GregTech: New Horizons modpack uses its own modified version of OpenComputers. They have applied the relevant patch in version 1.10.10-GTNH.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-16T20:15:10.083",
    "last_modified": "2024-11-21T09:13:32.203",
    "fix_date": "2024-04-16T16:39:11Z"
  },
  "references": [
    {
      "url": "https://github.com/MightyPirates/OpenComputers/commit/9d4f7ea297953c2fd8ccfd24fe549d5e9576400f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/MightyPirates/OpenComputers/security/advisories/GHSA-54j4-xpgj-cq4g",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/MightyPirates/OpenComputers/commit/9d4f7ea297953c2fd8ccfd24fe549d5e9576400f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/MightyPirates/OpenComputers/security/advisories/GHSA-54j4-xpgj-cq4g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.497519",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OpenComputers",
    "owner": "MightyPirates",
    "created_at": "2013-12-04T17:11:24Z",
    "updated_at": "2025-01-14T11:36:13Z",
    "pushed_at": "2025-01-07T05:25:05Z",
    "size": 61925,
    "stars": 1611,
    "forks": 434,
    "open_issues": 145,
    "watchers": 1611,
    "has_security_policy": false,
    "default_branch": "master-MC1.7.10",
    "protected_branches": [],
    "languages": {
      "Scala": 2689181,
      "Lua": 860712,
      "Java": 621082,
      "Roff": 5094,
      "Shell": 470
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T19:24:25.735379"
  }
}