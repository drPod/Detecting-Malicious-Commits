{
  "cve_id": "CVE-2024-31981",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "480186f9d2fca880513da8bc5a609674d106cbd3",
    "related_commits": [
      "480186f9d2fca880513da8bc5a609674d106cbd3",
      "a4ad14d9c1605a5ab957237e505ebbb29f5b9d73",
      "d28e21a670c69880b951e415dd2ddd69d273eae9",
      "480186f9d2fca880513da8bc5a609674d106cbd3",
      "a4ad14d9c1605a5ab957237e505ebbb29f5b9d73",
      "d28e21a670c69880b951e415dd2ddd69d273eae9"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "480186f9d2fca880513da8bc5a609674d106cbd3",
      "commit_date": "2023-10-19T15:35:07Z",
      "author": {
        "login": "pjeanjean",
        "type": "User",
        "stats": {
          "total_commits": 36,
          "average_weekly_commits": 0.03765690376569038,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 23
        }
      },
      "commit_message": {
        "title": "XWIKI-21337: Apply PDF templates with the rights of their authors",
        "length": 135,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 261,
        "additions": 206,
        "deletions": 55
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/pdf/impl/PdfExportImpl.java",
          "status": "modified",
          "additions": 55,
          "deletions": 25,
          "patch": "@@ -29,6 +29,7 @@\n import java.io.StringWriter;\n import java.lang.reflect.Type;\n import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -37,9 +38,9 @@\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.velocity.VelocityContext;\n import org.dom4j.Element;\n import org.dom4j.io.OutputFormat;\n@@ -54,8 +55,11 @@\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.user.UserReferenceSerializer;\n import org.xwiki.velocity.VelocityManager;\n-import org.xwiki.velocity.XWikiVelocityException;\n import org.xwiki.xml.EntityResolver;\n import org.xwiki.xml.XMLReaderFactory;\n import org.xwiki.xml.XMLUtils;\n@@ -95,30 +99,37 @@ public class PdfExportImpl implements PdfExport\n     private static final Logger LOGGER = LoggerFactory.getLogger(PdfExportImpl.class);\n \n     /** Document name resolver. */\n-    private static DocumentReferenceResolver<String> referenceResolver =\n+    private final DocumentReferenceResolver<String> referenceResolver =\n         Utils.getComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n \n     /** Document name serializer. */\n-    private static EntityReferenceSerializer<String> referenceSerializer =\n+    private final EntityReferenceSerializer<String> referenceSerializer =\n         Utils.getComponent(EntityReferenceSerializer.TYPE_STRING);\n \n     /** Provides access to document properties. */\n-    private static DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);\n+    private final DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);\n \n     /** Velocity engine manager, used for interpreting velocity. */\n-    private static VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n+    private final VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n \n-    private static XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);\n+    private final XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);\n+\n+    private final AuthorizationManager authorizationManager = Utils.getComponent(AuthorizationManager.class);\n+\n+    private final AuthorExecutor authorExecutor = Utils.getComponent(AuthorExecutor.class);\n+\n+    private final UserReferenceSerializer<DocumentReference> userReferenceSerializer =\n+        Utils.getComponent(UserReferenceSerializer.TYPE_DOCUMENT_REFERENCE, \"document\");\n \n     /**\n      * Used to get the temporary directory.\n      */\n-    private Environment environment = Utils.getComponent((Type) Environment.class);\n+    private final Environment environment = Utils.getComponent((Type) Environment.class);\n \n     /**\n      * Used to render XSL-FO to PDF.\n      */\n-    private XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, \"fop\");\n+    private final XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, \"fop\");\n \n     @Override\n     public void exportToPDF(XWikiDocument doc, OutputStream out, XWikiContext context) throws XWikiException\n@@ -184,7 +195,7 @@ private String convertToStrictXHtml(String input)\n \n         HTMLCleaner cleaner = Utils.getComponent(HTMLCleaner.class);\n         HTMLCleanerConfiguration config = cleaner.getDefaultConfiguration();\n-        List<HTMLFilter> filters = new ArrayList<HTMLFilter>(config.getFilters());\n+        List<HTMLFilter> filters = new ArrayList<>(config.getFilters());\n         filters.add(Utils.getComponent(HTMLFilter.class, \"uniqueId\"));\n         config.setFilters(filters);\n         String result = HTMLUtils.toString(cleaner.clean(new StringReader(input), config));\n@@ -261,7 +272,7 @@ private void renderXSLFO(String xmlfo, OutputStream out, ExportType type, final\n         throws XWikiException\n     {\n         try {\n-            this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes(\"UTF-8\")), out, type.getMimeType());\n+            this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes(StandardCharsets.UTF_8)), out, type.getMimeType());\n         } catch (IllegalStateException e) {\n             throw createException(e, type, XWikiException.ERROR_XWIKI_APP_SEND_RESPONSE_EXCEPTION);\n         } catch (Exception e) {\n@@ -338,7 +349,7 @@ String applyCSS(String html, String css, XWikiContext context)\n \n             // Dom4J 2.1.1 disables external DTDs by default, so we set our own XMLReader.\n             // See https://github.com/dom4j/dom4j/issues/51\n-            XMLReader xmlReader = xmlReaderFactory.createXMLReader();\n+            XMLReader xmlReader = this.xmlReaderFactory.createXMLReader();\n             reader.setXMLReader(xmlReader);\n \n             reader.setEntityResolver(new DefaultEntityResolver());\n@@ -465,28 +476,47 @@ private String getPDFTemplateProperty(String propertyName, XWikiContext context)\n         DocumentReference templateReference;\n         DocumentReference classReference;\n         if (StringUtils.isNotEmpty(pdftemplate)) {\n-            templateReference = referenceResolver.resolve(pdftemplate);\n+            templateReference = this.referenceResolver.resolve(pdftemplate);\n             classReference = new DocumentReference(templateReference.getWikiReference().getName(), \"XWiki\", \"PDFClass\");\n         } else {\n-            templateReference = dab.getCurrentDocumentReference();\n-            String currentWiki = dab.getCurrentDocumentReference().getRoot().getName();\n+            templateReference = this.dab.getCurrentDocumentReference();\n+            String currentWiki = this.dab.getCurrentDocumentReference().getRoot().getName();\n             classReference = new DocumentReference(currentWiki, \"XWiki\", \"PDFClass\");\n         }\n \n-        String result = (String) dab.getProperty(templateReference, classReference, propertyName);\n-        if (StringUtils.isBlank(result)) {\n+        String templateContent = (String) this.dab.getProperty(templateReference, classReference, propertyName);\n+        if (StringUtils.isBlank(templateContent)) {\n             return \"\";\n         }\n-        String templateName = referenceSerializer.serialize(templateReference);\n+\n+        String templateName = this.referenceSerializer.serialize(templateReference);\n+        DocumentReference templateAuthorReference;\n+        String result = templateContent;\n         try {\n-            StringWriter writer = new StringWriter();\n-            VelocityContext vcontext = velocityManager.getVelocityContext();\n-            velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName, result);\n-            result = writer.toString();\n-        } catch (XWikiVelocityException e) {\n-            LOGGER.warn(\"Error applying Velocity to the [{}] property of the [{}] document. Using the property's value \"\n-                + \"without applying Velocity.\", propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));\n+             templateAuthorReference = this.userReferenceSerializer.serialize(\n+                 this.dab.getDocumentInstance(templateReference).getAuthors().getEffectiveMetadataAuthor());\n+        } catch (Exception e) {\n+            LOGGER.warn(\"Error fetching the author of template [{}] during PDF conversion. Using the [{}] property of \"\n+                + \"the document's value without applying Velocity.\", templateName, propertyName);\n+            return result;\n         }\n+\n+        if (this.authorizationManager.hasAccess(Right.SCRIPT, templateAuthorReference, templateReference)) {\n+            try {\n+                result = this.authorExecutor.call(() -> {\n+                    StringWriter writer = new StringWriter();\n+                    VelocityContext vcontext = this.velocityManager.getVelocityContext();\n+                    this.velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName,\n+                        templateContent);\n+                    return writer.toString();\n+                }, templateAuthorReference, templateReference);\n+            } catch (Exception e) {\n+                LOGGER.warn(\"Failed to run Velocity engine in author executor. Using the [{}] property of the [{}] \"\n+                    + \"document's value without applying Velocity. Reason: [{}]\",\n+                    propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));\n+            }\n+        }\n+\n         return result;\n     }\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/pdf/impl/PdfExportImplTest.java",
          "status": "modified",
          "additions": 151,
          "deletions": 30,
          "patch": "@@ -19,23 +19,55 @@\n  */\n package com.xpn.xwiki.pdf.impl;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.StringReader;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.w3c.dom.Document;\n import org.xwiki.bridge.DocumentAccessBridge;\n import org.xwiki.environment.Environment;\n-import org.xwiki.model.reference.DocumentReferenceResolver;\n-import org.xwiki.model.reference.EntityReferenceSerializer;\n+import org.xwiki.job.event.status.JobProgressManager;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.observation.ObservationManager;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.template.TemplateManager;\n import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+import org.xwiki.user.UserReference;\n+import org.xwiki.user.UserReferenceResolver;\n+import org.xwiki.velocity.VelocityEngine;\n import org.xwiki.velocity.VelocityManager;\n+import org.xwiki.xml.EntityResolver;\n+import org.xwiki.xml.html.HTMLCleaner;\n+import org.xwiki.xml.html.HTMLCleanerConfiguration;\n+import org.xwiki.xml.html.filter.HTMLFilter;\n+import org.xwiki.xml.internal.XMLReaderFactoryComponent;\n+import org.xwiki.xml.internal.html.DefaultHTMLCleanerConfiguration;\n \n import com.xpn.xwiki.XWikiContext;\n import com.xpn.xwiki.doc.XWikiDocument;\n import com.xpn.xwiki.internal.pdf.XSLFORenderer;\n+import com.xpn.xwiki.pdf.api.PdfExport;\n import com.xpn.xwiki.test.MockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+import com.xpn.xwiki.test.reference.ReferenceComponentList;\n+import com.xpn.xwiki.web.XWikiServletRequestStub;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n \n /**\n@@ -44,40 +76,59 @@\n  * @version $Id$\n  */\n @ComponentList({\n-    org.xwiki.xml.internal.XMLReaderFactoryComponent.class,\n+    XMLReaderFactoryComponent.class,\n })\n+@ReferenceComponentList\n @OldcoreTest\n-public class PdfExportImplTest\n+class PdfExportImplTest\n {\n+    private static final DocumentReference AUTHOR_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiAdmin\");\n+\n+    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"PDFClass\");\n+\n     @InjectMockitoOldcore\n     private MockitoOldcore oldcore;\n \n-    /**\n-     * Verify that PDF Export can apply some CSS on the XHTML when that XHTML already has some style defined and in\n-     * shorthand notation.\n-     */\n-    @Test\n-    public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exception\n+    @Mock\n+    private VelocityEngine velocityEngine;\n+\n+    @MockComponent\n+    private AuthorizationManager authorizationManager;\n+\n+    @MockComponent\n+    private HTMLCleaner htmlCleaner;\n+\n+    @MockComponent\n+    private AuthorExecutor authorExecutor;\n+\n+    private String htmlContent;\n+\n+    private String cssProperties;\n+\n+    private XWikiContext context;\n+\n+    private PdfExportImpl pdfExport;\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n     {\n-        this.oldcore.getMocker().registerMockComponent(DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n-        this.oldcore.getMocker().registerMockComponent(EntityReferenceSerializer.TYPE_STRING);\n-        this.oldcore.getMocker().registerMockComponent(DocumentAccessBridge.class);\n-        this.oldcore.getMocker().registerMockComponent(DocumentAccessBridge.class);\n         this.oldcore.getMocker().registerMockComponent(PDFResourceResolver.class);\n         this.oldcore.getMocker().registerMockComponent(Environment.class);\n-        this.oldcore.getMocker().registerMockComponent(VelocityManager.class);\n+        this.oldcore.getMocker().registerMockComponent(TemplateManager.class);\n+        this.oldcore.getMocker().registerMockComponent(ObservationManager.class);\n+        this.oldcore.getMocker().registerMockComponent(JobProgressManager.class);\n+        this.oldcore.getMocker().registerMockComponent(EntityResolver.class);\n         this.oldcore.getMocker().registerMockComponent(XSLFORenderer.class, \"fop\");\n-\n-        PdfExportImpl pdfExport = new PdfExportImpl();\n+        this.oldcore.getMocker().registerMockComponent(HTMLFilter.class, \"uniqueId\");\n \n         // The content below allows us to test several points:\n         // 1) The SPAN below already has some style defined in shorthand notation( \"background\" is shorthand,\n         //    see https://www.w3schools.com/css/css_background.asp). That's important for the test since that's what was\n         //    failing in the past and why this test was written.\n         // 2) We also test that HTML entities are correctly kept since we had issues with this at one point.\n-        String html = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n+        this.htmlContent = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n             + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n-                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\\n\"\n+            + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\\n\"\n             + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n             + \"<title>\\n\"\n             + \"  Main.ttt - ttt\\n\"\n@@ -98,13 +149,51 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n             + \"\\n\"\n             + \"</body></html>\";\n \n-        String css = \"span { color:red; }\";\n+        this.cssProperties = \"span { color:red; }\";\n \n-        XWikiContext xcontext = this.oldcore.getXWikiContext();\n+        // Set up HTML cleaner.\n+        Document htmlDocument = DocumentBuilderFactory.newInstance().newDocumentBuilder()\n+            .parse(new ByteArrayInputStream(this.htmlContent.getBytes()));\n+        HTMLCleanerConfiguration cleanerConfiguration = new DefaultHTMLCleanerConfiguration();\n+        when(this.htmlCleaner.getDefaultConfiguration()).thenReturn(cleanerConfiguration);\n+        when(this.htmlCleaner.clean(any(StringReader.class), eq(cleanerConfiguration))).thenReturn(htmlDocument);\n+\n+        // Get a mocked Velocity Engine.\n+        VelocityManager velocityManager = this.oldcore.getMocker().registerMockComponent(VelocityManager.class);\n+        when(velocityManager.getVelocityEngine()).thenReturn(this.velocityEngine);\n+\n+        // Prepare a document reference and author reference for the template.\n+        XWikiDocument template = new XWikiDocument(DOCUMENT_REFERENCE);\n+        UserReferenceResolver<DocumentReference> userReferenceResolver =\n+            this.oldcore.getMocker().getInstance(UserReferenceResolver.TYPE_DOCUMENT_REFERENCE, \"document\");\n+        UserReference userReference = userReferenceResolver.resolve(AUTHOR_REFERENCE);\n+        template.getAuthors().setEffectiveMetadataAuthor(userReference);\n+\n+        // Return a non-empty template property.\n+        DocumentAccessBridge dab = this.oldcore.getDocumentAccessBridge();\n+        when(dab.getProperty(template.getDocumentReference(), template.getDocumentReference(), \"style\"))\n+            .thenReturn(this.cssProperties);\n+        when(dab.getDocumentInstance(DOCUMENT_REFERENCE)).thenReturn(template);\n+\n+        // Set necessary parameters in the request.\n+        this.context = this.oldcore.getXWikiContext();\n+        XWikiServletRequestStub request = new XWikiServletRequestStub();\n+        request.put(\"pdftemplate\", \"XWiki.PDFClass\");\n+        this.context.setRequest(request);\n         XWikiDocument doc = mock(XWikiDocument.class);\n-        when(doc.getExternalURL(\"view\", xcontext)).thenReturn(\"http://localhost:8080/export\");\n-        xcontext.setDoc(doc);\n+        when(doc.getExternalURL(\"view\", this.context)).thenReturn(\"http://localhost:8080/export\");\n+        this.context.setDoc(doc);\n \n+        this.pdfExport = new PdfExportImpl();\n+    }\n+\n+    /**\n+     * Verify that PDF Export can apply some CSS on the XHTML when that XHTML already has some style defined and in\n+     * shorthand notation.\n+     */\n+    @Test\n+    void applyCSSWhenExistingStyleDefinedUsingShorthandNotation()\n+    {\n         // - Verify that element's style attributes are normalized and that the SPAN's color is set to red.\n         // - Verify that the accent in the content is still there.\n         //   TODO: right now we output the DOM with DOM4J and use the default of converting entities when using the\n@@ -113,8 +202,8 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n \n         String expected = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n             + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n-                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"\n-                + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n+            + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"\n+            + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head>\\n\"\n             + \"<title>\\n\"\n             + \"  Main.ttt - ttt\\n\"\n             + \"</title>\\n\"\n@@ -124,15 +213,47 @@ public void applyCSSWhenExistingStyleDefinedUsingShorthandNotation() throws Exce\n             + \"<div id=\\\"xwikimaincontainer\\\">\\n\"\n             + \"<div id=\\\"xwikimaincontainerinner\\\">\\n\\n\"\n             + \"<div id=\\\"xwikicontent\\\">\\n\"\n-                + \"      <p><span style=\\\"color: #f00; background-color: #fff; background-image: none; \"\n-                + \"background-position: 0% 0%; background-size: auto auto; background-origin: padding-box; \"\n-                + \"background-clip: border-box; background-repeat: repeat repeat; \"\n-                + \"background-attachment: scroll; \\\">Hello Cl\u00e9ment</span></p>\\n\"\n+            + \"      <p><span style=\\\"color: #f00; background-color: #fff; background-image: none; \"\n+            + \"background-position: 0% 0%; background-size: auto auto; background-origin: padding-box; \"\n+            + \"background-clip: border-box; background-repeat: repeat repeat; \"\n+            + \"background-attachment: scroll; \\\">Hello Cl\u00e9ment</span></p>\\n\"\n             + \"          </div>\\n\"\n             + \"</div>\\n\"\n             + \"</div>\\n\\n\"\n             + \"</body></html>\";\n \n-        assertEquals(expected, pdfExport.applyCSS(html, css, xcontext));\n+        assertEquals(expected, this.pdfExport.applyCSS(this.htmlContent, this.cssProperties, this.context));\n+    }\n+\n+    /**\n+     * Verify that the Velocity Engine is never accessed if the user does not have script rights.\n+     */\n+    @Test\n+    void applyPDFTemplateWithoutScriptRights() throws Exception\n+    {\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(false);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        this.pdfExport.exportHtml(this.htmlContent, baos, PdfExport.ExportType.PDF, this.context);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE);\n+        verifyNoInteractions(this.authorExecutor);\n+        verifyNoInteractions(this.velocityEngine);\n+    }\n+\n+    /**\n+     * Verify that the Velocity Engine is not accessed outside an Author Executor.\n+     */\n+    @Test\n+    void applyPDFTemplateWithAuthorExecutor() throws Exception\n+    {\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(true);\n+\n+        // Do not call the callable to check that the call to the Velocity engine is inside the author executor.\n+        doReturn(\"\").when(this.authorExecutor).call(any(), any(), any());\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        this.pdfExport.exportHtml(this.htmlContent, baos, PdfExport.ExportType.PDF, this.context);\n+        verify(this.authorizationManager).hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE);\n+        verify(this.authorExecutor).call(any(), eq(AUTHOR_REFERENCE), eq(DOCUMENT_REFERENCE));\n+        verifyNoInteractions(this.velocityEngine);\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "20d352276c008c8ea2a1cf1ea9ceb84193098477",
            "date": "2025-01-25T19:15:09Z",
            "author_login": "mflorea"
          },
          {
            "sha": "e29b630b2d5a42b6f12ed3f0e4f59bd078f8a0f7",
            "date": "2025-01-24T07:34:53Z",
            "author_login": "mflorea"
          },
          {
            "sha": "023144daf732d04b085c2423ebd4552edd09ac5c",
            "date": "2025-01-24T15:44:30Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "a46579427dc202957d623b8e69a6a894243c6690",
            "date": "2025-01-21T16:53:45Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "3d661180a9075925c3d2d75816356925f32ae89d",
            "date": "2025-01-21T16:13:46Z",
            "author_login": "Sereza7"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-862",
    "description": "XWiki Platform is a generic wiki platform. Starting in version 3.0.1 and prior to versions 4.10.20, 15.5.4, and 15.10-rc-1, remote code execution is possible via PDF export templates. This vulnerability has been patched in XWiki 14.10.20, 15.5.4 and 15.10-rc-1. If PDF templates are not typically used on the instance, an administrator can create the document `XWiki.PDFClass` and block its edition, after making sure that it does not contain a `style` attribute. Otherwise, there are no known workarounds aside from upgrading.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-10T20:15:08.280",
    "last_modified": "2024-11-21T09:14:16.483",
    "fix_date": "2023-10-19T15:35:07Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/480186f9d2fca880513da8bc5a609674d106cbd3",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/a4ad14d9c1605a5ab957237e505ebbb29f5b9d73",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/d28e21a670c69880b951e415dd2ddd69d273eae9",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-vxwr-wpjv-qjq7",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21337",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/480186f9d2fca880513da8bc5a609674d106cbd3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/a4ad14d9c1605a5ab957237e505ebbb29f5b9d73",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/d28e21a670c69880b951e415dd2ddd69d273eae9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-vxwr-wpjv-qjq7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21337",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.469022",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-25T19:23:49Z",
    "pushed_at": "2025-01-25T19:23:45Z",
    "size": 563394,
    "stars": 1035,
    "forks": 555,
    "open_issues": 143,
    "watchers": 1035,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34352251,
      "JavaScript": 2404688,
      "HTML": 388086,
      "Less": 318876,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115582,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 261
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:34:26.816515"
  }
}