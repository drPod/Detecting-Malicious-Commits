{
  "cve_id": "CVE-2024-31983",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "2a9ce88f33663c53c9c63b2ea573f4720ea2efb9",
    "related_commits": [
      "2a9ce88f33663c53c9c63b2ea573f4720ea2efb9",
      "73aef9648bbff04b697837f1b906932f0d5caacb",
      "c4c8d61c30de72298d805ccc82df2a307f131c54",
      "2a9ce88f33663c53c9c63b2ea573f4720ea2efb9",
      "73aef9648bbff04b697837f1b906932f0d5caacb",
      "c4c8d61c30de72298d805ccc82df2a307f131c54"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/2a9ce88f33663c53c9c63b2ea573f4720ea2efb9.patch",
    "fix_commit_details": {
      "sha": "2a9ce88f33663c53c9c63b2ea573f4720ea2efb9",
      "commit_date": "2023-10-24T14:47:32Z",
      "author": {
        "login": "pjeanjean",
        "type": "User",
        "stats": {
          "total_commits": 36,
          "average_weekly_commits": 0.03773584905660377,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 23
        }
      },
      "commit_message": {
        "title": "XWIKI-21411: Improve check of translation document author rights",
        "length": 194,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 324,
        "additions": 310,
        "deletions": 14
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/AbstractDocumentTranslationBundle.java",
          "status": "modified",
          "additions": 26,
          "deletions": 8,
          "patch": "@@ -138,39 +138,57 @@ protected void setReference(DocumentReference reference)\n         setId(this.idPrefix + this.serializer.serialize(reference));\n     }\n \n-    protected LocalizedTranslationBundle loadDocumentLocaleBundle(Locale locale) throws Exception\n+    /**\n+     * Gets the document that defines the translation bundle for a given locale.\n+     *\n+     * @param locale the requested locale\n+     * @return the document defining the translation bundle, or null if it could not be fetched yet and requires a retry\n+     */\n+    protected XWikiDocument getDocumentLocaleBundle(Locale locale) throws Exception\n     {\n         XWikiContext context = this.contextProvider.get();\n \n         if (context == null) {\n-            // No context for some reason, lets try later\n+            // No context for some reason, let's try later.\n             return null;\n         }\n \n         XWiki xwiki = context.getWiki();\n \n         if (xwiki == null) {\n-            // No XWiki instance ready, lets try later\n+            // No XWiki instance ready, let's try later.\n             return null;\n         }\n \n         XWikiDocument document = xwiki.getDocument(this.documentReference, context);\n \n         if (locale != null && !locale.equals(Locale.ROOT) && !locale.equals(document.getDefaultLocale())) {\n             document = xwiki.getDocument(new DocumentReference(document.getDocumentReference(), locale), context);\n+        }\n \n-            if (document.isNew()) {\n-                // No document found for this locale\n-                return LocalizedTranslationBundle.EMPTY;\n-            }\n+        return document;\n+    }\n+\n+    protected LocalizedTranslationBundle loadDocumentLocaleBundle(Locale locale) throws Exception\n+    {\n+        XWikiDocument document = getDocumentLocaleBundle(locale);\n+\n+        if (document == null) {\n+            // Either no context or XWiki instance not ready, let's try later.\n+            return null;\n+        }\n+\n+        if (document.isNew()) {\n+            // No document found for this locale.\n+            return LocalizedTranslationBundle.EMPTY;\n         }\n \n         String content = document.getContent();\n \n         Properties properties = new Properties();\n         properties.load(new StringReader(content));\n \n-        // Convert to LocalBundle\n+        // Convert to LocalBundle.\n         DefaultLocalizedTranslationBundle localeBundle = new DefaultLocalizedTranslationBundle(this, locale);\n \n         TranslationMessageParser parser = getTranslationMessageParser();"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundle.java",
          "status": "modified",
          "additions": 47,
          "deletions": 1,
          "patch": "@@ -19,6 +19,8 @@\n  */\n package org.xwiki.localization.wiki.internal;\n \n+import java.util.Locale;\n+\n import org.xwiki.bridge.event.WikiDeletedEvent;\n import org.xwiki.component.descriptor.ComponentDescriptor;\n import org.xwiki.component.manager.ComponentLookupException;\n@@ -27,6 +29,11 @@\n import org.xwiki.localization.message.TranslationMessageParser;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.observation.event.Event;\n+import org.xwiki.security.authorization.AccessDeniedException;\n+\n+import com.xpn.xwiki.XWiki;\n+import com.xpn.xwiki.XWikiContext;\n+import com.xpn.xwiki.doc.XWikiDocument;\n \n /**\n  * Component wiki document based implementation of Bundle.\n@@ -37,6 +44,8 @@\n  */\n public class ComponentDocumentTranslationBundle extends AbstractDocumentTranslationBundle\n {\n+    private DocumentTranslationBundleFactory factory;\n+\n     private ComponentDescriptor<TranslationBundle> descriptor;\n \n     /**\n@@ -45,17 +54,54 @@ public class ComponentDocumentTranslationBundle extends AbstractDocumentTranslat\n      * @param componentManager used to lookup components needed to manipulate wiki documents\n      * @param translationMessageParser the parser to use for each message\n      * @param descriptor the component descriptor used to unregister the bundle\n+     * @param factory the factory\n      * @throws ComponentLookupException failed to lookup some required components\n      */\n     public ComponentDocumentTranslationBundle(String idPrefix, DocumentReference documentReference,\n         ComponentManager componentManager, TranslationMessageParser translationMessageParser,\n-        ComponentDescriptor<TranslationBundle> descriptor) throws ComponentLookupException\n+        ComponentDescriptor<TranslationBundle> descriptor, DocumentTranslationBundleFactory factory)\n+        throws ComponentLookupException\n     {\n         super(idPrefix, documentReference, componentManager, translationMessageParser);\n \n+        this.factory = factory;\n         this.descriptor = descriptor;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     * This overrides the default implementation to first check the author rights for the document.\n+     *\n+     * @param locale the requested locale\n+     * @return the document defining the translation bundle if its author has the necessary rights, the default locale\n+     *     otherwise, and fallback on the original implementation if the document doesn't exist or could not be fetched\n+     */\n+    @Override\n+    protected XWikiDocument getDocumentLocaleBundle(Locale locale) throws Exception\n+    {\n+        XWikiDocument document = super.getDocumentLocaleBundle(locale);\n+\n+        if (document != null && !document.isNew()) {\n+            XWikiContext context = this.contextProvider.get();\n+            XWiki xwiki = context.getWiki();\n+            XWikiDocument defaultLocaleDocument = xwiki.getDocument(this.documentReference, context);\n+\n+            if (defaultLocaleDocument != document) {\n+                // We only need to check rights for non-default locales.\n+                try {\n+                    this.factory.checkRegistrationAuthorizationForDocumentLocaleBundle(document, defaultLocaleDocument);\n+                } catch (AccessDeniedException e) {\n+                    this.logger.warn(\"Failed to load and register the translation for locale [{}] from document [{}]. \"\n+                        + \"Falling back to default locale.\", locale, document.getDocumentReference());\n+                    // We return the default translation bundle if the requested one has permission issues.\n+                    return defaultLocaleDocument;\n+                }\n+            }\n+        }\n+\n+        return document;\n+    }\n+\n     @Override\n     public void onEvent(Event event, Object source, Object data)\n     {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/main/java/org/xwiki/localization/wiki/internal/DocumentTranslationBundleFactory.java",
          "status": "modified",
          "additions": 29,
          "deletions": 5,
          "patch": "@@ -56,6 +56,7 @@\n import org.xwiki.localization.wiki.internal.TranslationDocumentModel.Scope;\n import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.DocumentReferenceResolver;\n+import org.xwiki.model.reference.EntityReference;\n import org.xwiki.model.reference.EntityReferenceSerializer;\n import org.xwiki.model.reference.WikiReference;\n import org.xwiki.observation.EventListener;\n@@ -324,7 +325,7 @@ private ComponentDocumentTranslationBundle createComponentDocumentBundle(XWikiDo\n         try {\n             documentBundle =\n                 new ComponentDocumentTranslationBundle(ID_PREFIX, document.getDocumentReference(),\n-                    this.componentManagerProvider.get(), this.translationParser, descriptor);\n+                    this.componentManagerProvider.get(), this.translationParser, descriptor, this);\n         } catch (ComponentLookupException e) {\n             throw new TranslationBundleDoesNotExistsException(\"Failed to create document bundle\", e);\n         }\n@@ -434,6 +435,23 @@ private void registerTranslationBundle(XWikiDocument document) throws Translatio\n         }\n     }\n \n+    /**\n+     * Checks that the author of a document defining a translation bundle has the necessary rights to make it\n+     * available, based on the scope of the default locale translation bundle.\n+     *\n+     * @param document the document defining the translation bundle to check\n+     * @param defaultLocaleDocument the document containing the default locale translation bundle\n+     * @throws AccessDeniedException when the document author does not have enough rights for the defined scope\n+     */\n+    protected void checkRegistrationAuthorizationForDocumentLocaleBundle(XWikiDocument document,\n+        XWikiDocument defaultLocaleDocument) throws AccessDeniedException\n+    {\n+        Scope scope = getScope(defaultLocaleDocument);\n+        if (scope != null && scope != Scope.ON_DEMAND) {\n+            checkRegistrationAuthorization(document, scope);\n+        }\n+    }\n+\n     /**\n      * @param document the translation document\n      * @param scope the scope\n@@ -442,18 +460,24 @@ private void registerTranslationBundle(XWikiDocument document) throws Translatio\n      */\n     private void checkRegistrationAuthorization(XWikiDocument document, Scope scope) throws AccessDeniedException\n     {\n+        EntityReference entityReference;\n         switch (scope) {\n             case GLOBAL:\n                 this.authorizationManager.checkAccess(Right.PROGRAM, document.getAuthorReference(), null);\n+                this.authorizationManager.checkAccess(Right.PROGRAM, document.getContentAuthorReference(), null);\n                 break;\n             case WIKI:\n-                this.authorizationManager.checkAccess(Right.ADMIN, document.getAuthorReference(), document\n-                    .getDocumentReference().getWikiReference());\n+                entityReference = document.getDocumentReference().getWikiReference();\n+                this.authorizationManager.checkAccess(Right.ADMIN, document.getAuthorReference(), entityReference);\n+                this.authorizationManager.checkAccess(Right.ADMIN, document.getContentAuthorReference(),\n+                    entityReference);\n                 break;\n             case USER:\n                 if (this.configuration.isRestrictUserTranslations()) {\n-                    this.authorizationManager.checkAccess(Right.SCRIPT, document.getAuthorReference(),\n-                        document.getDocumentReference());\n+                    entityReference = document.getDocumentReference();\n+                    this.authorizationManager.checkAccess(Right.SCRIPT, document.getAuthorReference(), entityReference);\n+                    this.authorizationManager.checkAccess(Right.SCRIPT, document.getContentAuthorReference(),\n+                        entityReference);\n                 }\n                 break;\n             default:"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-localization/xwiki-platform-localization-sources/xwiki-platform-localization-source-wiki/src/test/java/org/xwiki/localization/wiki/internal/ComponentDocumentTranslationBundleTest.java",
          "status": "added",
          "additions": 208,
          "deletions": 0,
          "patch": "@@ -0,0 +1,208 @@\n+/*\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.xwiki.localization.wiki.internal;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.mockito.Mock;\n+import org.xwiki.cache.Cache;\n+import org.xwiki.cache.CacheManager;\n+import org.xwiki.cache.config.CacheConfiguration;\n+import org.xwiki.component.internal.multi.ComponentManagerManager;\n+import org.xwiki.job.event.status.JobProgressManager;\n+import org.xwiki.localization.LocalizationManager;\n+import org.xwiki.localization.Translation;\n+import org.xwiki.localization.TranslationBundleFactory;\n+import org.xwiki.localization.internal.DefaultLocalizationManager;\n+import org.xwiki.localization.internal.DefaultTranslationBundleContext;\n+import org.xwiki.localization.messagetool.internal.MessageToolTranslationMessageParser;\n+import org.xwiki.model.internal.DefaultModelContext;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.observation.internal.DefaultObservationManager;\n+import org.xwiki.query.Query;\n+import org.xwiki.query.QueryManager;\n+import org.xwiki.rendering.internal.parser.plain.PlainTextBlockParser;\n+import org.xwiki.rendering.internal.renderer.plain.PlainTextBlockRenderer;\n+import org.xwiki.rendering.internal.renderer.plain.PlainTextRendererFactory;\n+import org.xwiki.rendering.syntax.Syntax;\n+import org.xwiki.security.authorization.AccessDeniedException;\n+import org.xwiki.security.authorization.Right;\n+import org.xwiki.test.LogLevel;\n+import org.xwiki.test.annotation.BeforeComponent;\n+import org.xwiki.test.annotation.ComponentList;\n+import org.xwiki.test.junit5.LogCaptureExtension;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n+\n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+import com.xpn.xwiki.test.MockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\n+import com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\n+import com.xpn.xwiki.test.reference.ReferenceComponentList;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Unit tests for {@link ComponentDocumentTranslationBundle}.\n+ *\n+ * @version $Id$\n+ */\n+@OldcoreTest\n+@ComponentList({\n+    DocumentTranslationBundleFactory.class,\n+    DefaultLocalizationManager.class,\n+    DefaultTranslationBundleContext.class,\n+    TranslationDocumentClassInitializer.class,\n+    DefaultModelContext.class,\n+    PlainTextBlockRenderer.class,\n+    PlainTextRendererFactory.class,\n+    DefaultObservationManager.class,\n+    MessageToolTranslationMessageParser.class,\n+    PlainTextBlockParser.class\n+})\n+@ReferenceComponentList\n+class ComponentDocumentTranslationBundleTest\n+{\n+    private static final DocumentReference TRANSLATION_ROOT_REFERENCE = new DocumentReference(\"xwiki\", \"space\",\n+        \"Translations\");\n+\n+    private static final DocumentReference ADMIN_USER_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiAdmin\");\n+\n+    @InjectMockitoOldcore\n+    private MockitoOldcore oldcore;\n+\n+    @MockComponent\n+    private WikiTranslationConfiguration translationConfiguration;\n+\n+    @MockComponent\n+    private QueryManager mockQueryManager;\n+\n+    @Mock\n+    private Query mockQuery;\n+\n+    @MockComponent\n+    private ComponentManagerManager componentManagerManager;\n+\n+    @MockComponent\n+    private JobProgressManager jobProgressManager;\n+\n+    @Inject\n+    private LocalizationManager localization;\n+\n+    private XWikiDocument translationFrDocument;\n+\n+    private DocumentReference adminUserReference;\n+\n+    /**\n+     * Capture logs.\n+     */\n+    @RegisterExtension\n+    private LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n+\n+    @MockComponent\n+    private CacheManager cacheManager;\n+\n+    @BeforeComponent\n+    void before() throws Exception\n+    {\n+        Cache<Object> cache = mock(Cache.class);\n+        when(this.cacheManager.createNewCache(any(CacheConfiguration.class))).thenReturn(cache);\n+    }\n+\n+    @BeforeEach\n+    void setUp() throws Exception\n+    {\n+        this.oldcore.notifyDocumentCreatedEvent(true);\n+\n+        when(this.mockQueryManager.createQuery(anyString(), anyString())).thenReturn(this.mockQuery);\n+        when(this.mockQuery.execute()).thenReturn(Collections.emptyList());\n+\n+        when(this.componentManagerManager.getComponentManager(\"wiki:xwiki\", true)).thenReturn(this.oldcore.getMocker());\n+        this.oldcore.getMocker().getInstance(TranslationBundleFactory.class, DocumentTranslationBundleFactory.ID);\n+\n+        XWikiDocument translationRootDocument = this.oldcore.getSpyXWiki().getDocument(TRANSLATION_ROOT_REFERENCE,\n+            this.oldcore.getXWikiContext());\n+\n+        BaseObject translationObject = translationRootDocument.newXObject(\n+            new DocumentReference(\"xwiki\", \"XWiki\", \"TranslationDocumentClass\"),\n+            this.oldcore.getXWikiContext());\n+        translationObject.setStringValue(TranslationDocumentModel.TRANSLATIONCLASS_PROP_SCOPE,\n+            TranslationDocumentModel.Scope.WIKI.toString());\n+\n+        translationRootDocument.setSyntax(Syntax.PLAIN_1_0);\n+        translationRootDocument.setContent(\"xwiki.translation=root\");\n+        translationRootDocument.setAuthorReference(ADMIN_USER_REFERENCE);\n+        this.oldcore.getSpyXWiki().saveDocument(translationRootDocument, this.oldcore.getXWikiContext());\n+\n+        this.translationFrDocument = translationRootDocument.getTranslatedDocument(Locale.FRENCH,\n+            this.oldcore.getXWikiContext());\n+        if (this.translationFrDocument == translationRootDocument) {\n+            this.translationFrDocument =\n+                new XWikiDocument(this.translationFrDocument.getDocumentReference(), Locale.FRENCH);\n+            this.translationFrDocument.setDefaultLocale(this.translationFrDocument.getDefaultLocale());\n+        }\n+        this.translationFrDocument.setSyntax(Syntax.PLAIN_1_0);\n+        this.translationFrDocument.setContent(\"xwiki.translation=fr\");\n+        this.oldcore.getSpyXWiki().saveDocument(this.translationFrDocument, this.oldcore.getXWikiContext());\n+\n+        doThrow(new AccessDeniedException(Right.SCRIPT, null, translationRootDocument.getDocumentReference()))\n+            .when(this.oldcore.getMockAuthorizationManager()).checkAccess(Right.ADMIN, null,\n+                TRANSLATION_ROOT_REFERENCE.getWikiReference());\n+    }\n+\n+    @Test\n+    void checkTranslationWithExpectedRights() throws Exception\n+    {\n+        this.translationFrDocument.setAuthorReference(ADMIN_USER_REFERENCE);\n+        this.translationFrDocument.setContentAuthorReference(ADMIN_USER_REFERENCE);\n+        this.oldcore.getSpyXWiki().saveDocument(this.translationFrDocument, this.oldcore.getXWikiContext());\n+        Translation frTranslation = this.localization.getTranslation(\"xwiki.translation\", Locale.FRENCH);\n+        assertEquals(\"fr\", frTranslation.getRawSource());\n+        // Authorizations are checked twice because the mocked behavior is not actual locale bundle registration.\n+        verify(this.oldcore.getMockAuthorizationManager(), times(4)).checkAccess(Right.ADMIN, ADMIN_USER_REFERENCE,\n+            TRANSLATION_ROOT_REFERENCE.getWikiReference());\n+    }\n+\n+    @Test\n+    void checkTranslationWithoutExpectedRights() throws Exception\n+    {\n+        Translation frTranslation = this.localization.getTranslation(\"xwiki.translation\", Locale.FRENCH);\n+        assertEquals(\n+            \"Failed to load and register the translation for locale [fr] from document [xwiki:space.Translations]. \"\n+                + \"Falling back to default locale.\",\n+            this.logCapture.getMessage(0));\n+        assertEquals(\"root\", frTranslation.getRawSource());\n+        verify(this.oldcore.getMockAuthorizationManager()).checkAccess(Right.ADMIN, null,\n+            TRANSLATION_ROOT_REFERENCE.getWikiReference());\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 12
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-862",
    "description": "XWiki Platform is a generic wiki platform. In multilingual wikis, translations can be edited by any user who has edit right, circumventing the rights that are normally required for authoring translations (script right for user-scope translations, wiki admin for translations on the wiki). Starting in version 4.3-milestone-2 and prior to versions 4.10.20, 15.5.4, and 15.10-rc-1, this can be exploited for remote code execution if the translation value is not properly escaped where it is used. This has been patched in XWiki 14.10.20, 15.5.4 and 15.10RC1. As a workaround, one may restrict edit rights on documents that contain translations.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-10T20:15:08.650",
    "last_modified": "2024-11-21T09:14:16.737",
    "fix_date": "2023-10-24T14:47:32Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/2a9ce88f33663c53c9c63b2ea573f4720ea2efb9",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/73aef9648bbff04b697837f1b906932f0d5caacb",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/c4c8d61c30de72298d805ccc82df2a307f131c54",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-xxp2-9c9g-7wmj",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21411",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/2a9ce88f33663c53c9c63b2ea573f4720ea2efb9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/73aef9648bbff04b697837f1b906932f0d5caacb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/c4c8d61c30de72298d805ccc82df2a307f131c54",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-xxp2-9c9g-7wmj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21411",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.469436",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}