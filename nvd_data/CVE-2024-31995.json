{
  "cve_id": "CVE-2024-31995",
  "github_data": {
    "repository": "digitalbazaar/zcap",
    "fix_commit": "261eea040109b6e25159c88d8ed49d3c37f8fcfe",
    "related_commits": [
      "261eea040109b6e25159c88d8ed49d3c37f8fcfe",
      "55f8549c80124b85dfb0f3dcf83f2c63f42532e5",
      "261eea040109b6e25159c88d8ed49d3c37f8fcfe",
      "55f8549c80124b85dfb0f3dcf83f2c63f42532e5"
    ],
    "patch_url": "https://github.com/digitalbazaar/zcap/commit/261eea040109b6e25159c88d8ed49d3c37f8fcfe.patch",
    "fix_commit_details": {
      "sha": "261eea040109b6e25159c88d8ed49d3c37f8fcfe",
      "commit_date": "2024-03-29T19:04:30Z",
      "author": {
        "login": "dlongley",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix chain-depth-2 zcap invocation expiry check.",
        "length": 47,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 293,
        "additions": 275,
        "deletions": 18
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -1,5 +1,12 @@\n # @digitalbazaar/zcap ChangeLog\n \n+## 9.0.1 - 2024-mm-dd\n+\n+### Fixed\n+- Ensure that when invoking a capability with a chain depth of 2, i.e.,\n+  it is delegated directly from the root capability, that `expires`\n+  is properly checked against the current date or other `date` param.\n+\n ## 9.0.0 - 2022-10-25\n \n ### Changed"
        },
        {
          "filename": "lib/CapabilityInvocation.js",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -308,6 +308,25 @@ export class CapabilityInvocation extends CapabilityProofPurpose {\n       throw error;\n     }\n \n+    // if capability is delegated, verify that it has not expired\n+    if(capability.parentCapability) {\n+      // verify expiration dates\n+      // expires date has been previously validated, so just parse it\n+      const currentCapabilityExpirationTime = Date.parse(capability.expires);\n+\n+      // use `utils.compareTime` to allow for allow for clock drift because\n+      // we are comparing against `currentDate`\n+      const {date, maxClockSkew} = this;\n+      const currentDate = (date && new Date(date)) || new Date();\n+      if(utils.compareTime({\n+        t1: currentDate.getTime(),\n+        t2: currentCapabilityExpirationTime,\n+        maxClockSkew\n+      }) > 0) {\n+        throw new Error('The invoked capability has expired.');\n+      }\n+    }\n+\n     // run base level validation checks\n     const result = await this._runBaseProofValidation({proof, validateOptions});\n     if(!result.valid) {"
        },
        {
          "filename": "lib/CapabilityProofPurpose.js",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,5 +1,5 @@\n /*!\n- * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n+ * Copyright (c) 2018-2024 Digital Bazaar, Inc. All rights reserved.\n  */\n import jsigs from 'jsonld-signatures';\n import * as utils from './utils.js';\n@@ -317,7 +317,7 @@ export class CapabilityProofPurpose extends ControllerProofPurpose {\n    * @param {Function} options.documentLoader - A configured jsonld\n    *   documentLoader.\n    *\n-   * @returns {object} {verified, error}.\n+   * @returns {object} An object with `{verified, error}`.\n    */\n   async _verifyCapabilityChain({\n     CapabilityDelegation,\n@@ -446,7 +446,7 @@ export class CapabilityProofPurpose extends ControllerProofPurpose {\n           // we are comparing against `currentDate`\n           if(utils.compareTime({\n             t1: currentDate.getTime(),\n-            t2: currentCapabilityExpirationTime,\n+            t2: parentExpirationTime,\n             maxClockSkew\n           }) > 0) {\n             throw new Error("
        },
        {
          "filename": "lib/utils.js",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -1,5 +1,5 @@\n /*!\n- * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n+ * Copyright (c) 2018-2024 Digital Bazaar, Inc. All rights reserved.\n  */\n import {\n   MAX_CHAIN_LENGTH, ZCAP_CONTEXT_URL, ZCAP_ROOT_PREFIX\n@@ -316,7 +316,7 @@ export function computeCapabilityChain({\n  * @param {number} [options.maxChainLength=10] - The maximum length of the\n  *   capability delegation chain (this is inclusive of `capability` itself).\n  *\n- * @returns {Promise<object>} {dereferencedChain}.\n+ * @returns {Promise<object>} Resolves to `{dereferencedChain}`.\n  */\n export async function dereferenceCapabilityChain({\n   capability, getRootCapability, maxChainLength = MAX_CHAIN_LENGTH\n@@ -522,8 +522,7 @@ export function checkCapability({capability, expectRoot}) {\n         `\"${ZCAP_CONTEXT_URL}\".`);\n     }\n     if(capability.expires !== undefined) {\n-      throw new Error(\n-        'Root capability must not have an \"expires\" field.');\n+      throw new Error('Root capability must not have an \"expires\" field.');\n     }\n   } else {\n     if(!((Array.isArray(context) && context[0] === ZCAP_CONTEXT_URL))) {"
        },
        {
          "filename": "tests/test-common.js",
          "status": "modified",
          "additions": 243,
          "deletions": 11,
          "patch": "@@ -1,5 +1,5 @@\n /*!\n- * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n+ * Copyright (c) 2018-2024 Digital Bazaar, Inc. All rights reserved.\n  */\n \n import chai from 'chai';\n@@ -2115,9 +2115,244 @@ describe('zcap', () => {\n         expect(result.verified).to.be.true;\n       });\n \n-      it('should fail invoking a capability with `expires` ' +\n+      it('should fail invoking a chain depth 2 capability with `expires` ' +\n         'and `date` parameter in the past', async () => {\n         const rootCapability = {...capabilities.root.beta};\n+        rootCapability.id = 'urn:uuid:dada0e4d-bc52-4530-ac7f-4973eb8013e9';\n+        addToLoader({doc: rootCapability});\n+\n+        // alice delegates to bob a capability is already expired\n+        let expires = new Date();\n+        expires.setHours(expires.getHours() - 50);\n+        expires = expires.toISOString();\n+        const bobZcap = await _delegate({\n+          newCapability: {\n+            '@context': ZCAP_CONTEXT_URL,\n+            id: uuid(),\n+            controller: bob.id(),\n+            parentCapability: rootCapability.id,\n+            invocationTarget: rootCapability.invocationTarget,\n+            expires\n+          },\n+          purposeOptions: {\n+            // do not validate locally to allow expired zcap to be delegated\n+            _skipLocalValidationForTesting: true\n+          },\n+          parentCapability: rootCapability,\n+          delegator: alice\n+        });\n+\n+        // bob invokes\n+        const doc = clone(mock.exampleDoc);\n+        const invocation = await _invoke({\n+          doc, invoker: bob, capability: bobZcap, capabilityAction: 'read'\n+        });\n+        // pass current time as 20 hours ago\n+        const date = new Date();\n+        date.setHours(date.getHours() - 20);\n+        const result = await _verifyInvocation({\n+          invocation, purposeOptions: {\n+            expectedAction: 'read',\n+            expectedRootCapability: rootCapability.id,\n+            expectedTarget: rootCapability.invocationTarget,\n+            date\n+          }\n+        });\n+        expect(result).to.exist;\n+        expect(result.verified).to.be.false;\n+        should.exist(result.error);\n+        result.error.name.should.equal('VerificationError');\n+        const [error] = result.error.errors;\n+        error.message.should.equal('The invoked capability has expired.');\n+      });\n+\n+      it('should fail invoking a chain depth 2 capability with `expires` ' +\n+        'and `date` parameter in the future', async () => {\n+        const rootCapability = {...capabilities.root.beta};\n+        rootCapability.id = 'urn:zcap:1d0cd622-2e0a-4686-b0d7-bd71cc27db04';\n+        addToLoader({doc: rootCapability});\n+\n+        // alice delegates to bob a capability that is presently valid\n+        let expires = new Date();\n+        expires.setHours(expires.getHours() + 50);\n+        expires = expires.toISOString();\n+        const bobZcap = await _delegate({\n+          newCapability: {\n+            '@context': ZCAP_CONTEXT_URL,\n+            id: uuid(),\n+            controller: bob.id(),\n+            parentCapability: rootCapability.id,\n+            invocationTarget: rootCapability.invocationTarget,\n+            expires\n+          },\n+          parentCapability: rootCapability,\n+          delegator: alice\n+        });\n+\n+        // bob invokes\n+        const doc = clone(mock.exampleDoc);\n+        const invocation = await _invoke({\n+          doc, invoker: bob, capability: bobZcap, capabilityAction: 'read'\n+        });\n+        // the capability will have expired in 100 hours, so pass that future\n+        // time in as the verification date to trigger an error\n+        const date = new Date();\n+        date.setHours(date.getHours() + 100);\n+        const result = await _verifyInvocation({\n+          invocation, purposeOptions: {\n+            expectedAction: 'read',\n+            expectedRootCapability: rootCapability.id,\n+            expectedTarget: rootCapability.invocationTarget,\n+            suite: new Ed25519Signature2020(),\n+            date,\n+          }\n+        });\n+        expect(result).to.exist;\n+        expect(result.verified).to.be.false;\n+        should.exist(result.error);\n+        result.error.name.should.equal('VerificationError');\n+        const [error] = result.error.errors;\n+        error.message.should.equal('The invoked capability has expired.');\n+      });\n+\n+      it('should fail invoking a chain depth 3 capability with `expires` ' +\n+        'and `date` parameter in the past', async () => {\n+        const rootCapability = {...capabilities.root.beta};\n+        rootCapability.id = 'urn:zcap:59bcb98b-a7ee-4ba7-8629-8b52329bc506';\n+        addToLoader({doc: rootCapability});\n+\n+        // alice delegates to bob a capability has not yet expired\n+        let expires = new Date();\n+        expires.setHours(expires.getHours() + 50);\n+        expires = expires.toISOString();\n+        const bobZcap = await _delegate({\n+          newCapability: {\n+            '@context': ZCAP_CONTEXT_URL,\n+            id: uuid(),\n+            controller: bob.id(),\n+            parentCapability: rootCapability.id,\n+            invocationTarget: rootCapability.invocationTarget,\n+            expires\n+          },\n+          parentCapability: rootCapability,\n+          delegator: alice\n+        });\n+\n+        // bob delegates to carol a capability that has already expired\n+        expires = new Date();\n+        expires.setHours(expires.getHours() - 50);\n+        expires = expires.toISOString();\n+        const carolZcap = await _delegate({\n+          newCapability: {\n+            '@context': ZCAP_CONTEXT_URL,\n+            id: uuid(),\n+            controller: carol.id(),\n+            parentCapability: bobZcap.id,\n+            invocationTarget: bobZcap.invocationTarget,\n+            expires\n+          },\n+          purposeOptions: {\n+            // do not validate locally to allow expired zcap to be delegated\n+            _skipLocalValidationForTesting: true\n+          },\n+          parentCapability: bobZcap,\n+          delegator: bob\n+        });\n+\n+        // carol invokes\n+        const doc = clone(mock.exampleDoc);\n+        const invocation = await _invoke({\n+          doc, invoker: carol, capability: carolZcap, capabilityAction: 'read'\n+        });\n+        // pass current time as 20 hours ago\n+        const date = new Date();\n+        date.setHours(date.getHours() - 20);\n+        const result = await _verifyInvocation({\n+          invocation, purposeOptions: {\n+            expectedAction: 'read',\n+            expectedRootCapability: rootCapability.id,\n+            expectedTarget: rootCapability.invocationTarget,\n+            date\n+          }\n+        });\n+        expect(result).to.exist;\n+        expect(result.verified).to.be.false;\n+        should.exist(result.error);\n+        result.error.name.should.equal('VerificationError');\n+        const [error] = result.error.errors;\n+        error.message.should.equal('The invoked capability has expired.');\n+      });\n+\n+      it('should fail invoking a chain depth 3 capability with `expires` ' +\n+        'and `date` parameter in the future', async () => {\n+        const rootCapability = {...capabilities.root.beta};\n+        rootCapability.id = 'urn:zcap:80a8de39-df68-4fd8-ba78-4d65a27b2009';\n+        addToLoader({doc: rootCapability});\n+\n+        // alice delegates to bob a capability that is presently valid\n+        let expires = new Date();\n+        expires.setHours(expires.getHours() + 50);\n+        expires = expires.toISOString();\n+        const bobZcap = await _delegate({\n+          newCapability: {\n+            '@context': ZCAP_CONTEXT_URL,\n+            id: uuid(),\n+            controller: bob.id(),\n+            parentCapability: rootCapability.id,\n+            invocationTarget: rootCapability.invocationTarget,\n+            expires\n+          },\n+          parentCapability: rootCapability,\n+          delegator: alice\n+        });\n+\n+        // bob delegates to carol with an attenuated (shorter) expiration date\n+        expires = new Date();\n+        expires.setHours(expires.getHours() + 25);\n+        expires = expires.toISOString();\n+        const carolZcap = await _delegate({\n+          newCapability: {\n+            '@context': ZCAP_CONTEXT_URL,\n+            id: uuid(),\n+            controller: carol.id(),\n+            parentCapability: bobZcap.id,\n+            invocationTarget: bobZcap.invocationTarget,\n+            expires\n+          },\n+          parentCapability: bobZcap,\n+          delegator: bob\n+        });\n+\n+        // carol invokes\n+        const doc = clone(mock.exampleDoc);\n+        const invocation = await _invoke({\n+          doc, invoker: carol, capability: carolZcap, capabilityAction: 'read'\n+        });\n+        // the capability will have expired in 30 hours, which is before\n+        // bob's zcap's expiry but after carol's -- so pass that future\n+        // time in as the verification date to trigger an error\n+        const date = new Date();\n+        date.setHours(date.getHours() + 30);\n+        const result = await _verifyInvocation({\n+          invocation, purposeOptions: {\n+            expectedAction: 'read',\n+            expectedRootCapability: rootCapability.id,\n+            expectedTarget: rootCapability.invocationTarget,\n+            suite: new Ed25519Signature2020(),\n+            date,\n+          }\n+        });\n+        expect(result).to.exist;\n+        expect(result.verified).to.be.false;\n+        should.exist(result.error);\n+        result.error.name.should.equal('VerificationError');\n+        const [error] = result.error.errors;\n+        error.message.should.equal('The invoked capability has expired.');\n+      });\n+\n+      it('should fail invoking a chain depth 3 capability with `expires` ' +\n+        'and `date` parameter in the chain in the past', async () => {\n+        const rootCapability = {...capabilities.root.beta};\n         rootCapability.id = 'urn:zcap:142b0b4a-c664-4288-84e6-be0a59b6efa4';\n         addToLoader({doc: rootCapability});\n \n@@ -2165,7 +2400,7 @@ describe('zcap', () => {\n         const invocation = await _invoke({\n           doc, invoker: carol, capability: carolZcap, capabilityAction: 'read'\n         });\n-        // the capability was also expired 20 hours ago\n+        // pass current time as 20 hours ago\n         const date = new Date();\n         date.setHours(date.getHours() - 20);\n         const result = await _verifyInvocation({\n@@ -2185,8 +2420,8 @@ describe('zcap', () => {\n           'A capability in the delegation chain has expired.');\n       });\n \n-      it('should fail invoking a capability with `expires` ' +\n-        'and `date` parameter in the future', async () => {\n+      it('should fail invoking a chain depth 3 capability with `expires` ' +\n+        'and `date` parameter in the chain in the future', async () => {\n         const rootCapability = {...capabilities.root.beta};\n         rootCapability.id = 'urn:zcap:bcbcde5e-d64a-4f46-a76e-daf52f63f702';\n         addToLoader({doc: rootCapability});\n@@ -2636,8 +2871,7 @@ describe('zcap', () => {\n         should.exist(result.error);\n         result.error.name.should.equal('VerificationError');\n         const [error] = result.error.errors;\n-        error.message.should.equal(\n-          'A capability in the delegation chain has expired.');\n+        error.message.should.equal('The invoked capability has expired.');\n       });\n \n       it('should fail invoking a capability with second delegated ' +\n@@ -2700,8 +2934,7 @@ describe('zcap', () => {\n         should.exist(result.error);\n         result.error.errors.should.have.length(1);\n         const [error] = result.error.errors;\n-        error.message.should.contain(\n-          'capability in the delegation chain has expired');\n+        error.message.should.equal('The invoked capability has expired.');\n       });\n \n       it('should fail invoking a capability with ' +\n@@ -2895,8 +3128,7 @@ describe('zcap', () => {\n         should.exist(result.error);\n         result.error.name.should.equal('VerificationError');\n         const [error] = result.error.errors;\n-        error.message.should.equal(\n-          'A capability in the delegation chain has expired.');\n+        error.message.should.equal('The invoked capability has expired.');\n       });\n     }); // end Expiration date\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "62f6655ffd68c74e40785af76735f76b8cfc27b8",
            "date": "2024-10-16T18:18:05Z",
            "author_login": "davidlehn"
          },
          {
            "sha": "697face3434d2e82164b7f4a8a4eb6d503e52675",
            "date": "2024-10-16T18:17:49Z",
            "author_login": "davidlehn"
          },
          {
            "sha": "b41986c09dc944dce2e5f11d3cd466501af53e27",
            "date": "2024-10-16T18:17:07Z",
            "author_login": "davidlehn"
          },
          {
            "sha": "8b952960ea44232f44fb232bc3528d418d36a66c",
            "date": "2024-10-16T18:08:41Z",
            "author_login": "dmitrizagidulin"
          },
          {
            "sha": "518d1ce4816b89d9288948db00c7e9c1b597e2b3",
            "date": "2024-10-09T13:35:26Z",
            "author_login": "BigBlueHat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-613",
    "description": "`@digitalbazaar/zcap` provides JavaScript reference implementation for Authorization Capabilities. Prior to version 9.0.1, when invoking a capability with a chain depth of 2, i.e., it is delegated directly from the root capability, the `expires` property is not properly checked against the current date or other `date` param.  This can allow invocations outside of the original intended time period.  A zcap still cannot be invoked without being able to use the associated private key material. `@digitalbazaar/zcap` v9.0.1 fixes expiration checking. As a workaround, one may revoke a zcap at any time.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-10T22:15:07.340",
    "last_modified": "2024-11-21T09:14:18.343",
    "fix_date": "2024-03-29T19:04:30Z"
  },
  "references": [
    {
      "url": "https://github.com/digitalbazaar/zcap/commit/261eea040109b6e25159c88d8ed49d3c37f8fcfe",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/digitalbazaar/zcap/commit/55f8549c80124b85dfb0f3dcf83f2c63f42532e5",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/digitalbazaar/zcap/pull/82",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/digitalbazaar/zcap/security/advisories/GHSA-hp8h-7x69-4wmv",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/digitalbazaar/zcap/commit/261eea040109b6e25159c88d8ed49d3c37f8fcfe",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/digitalbazaar/zcap/commit/55f8549c80124b85dfb0f3dcf83f2c63f42532e5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/digitalbazaar/zcap/pull/82",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/digitalbazaar/zcap/security/advisories/GHSA-hp8h-7x69-4wmv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.471005",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "zcap",
    "owner": "digitalbazaar",
    "created_at": "2018-01-24T20:11:36Z",
    "updated_at": "2024-12-06T23:57:17Z",
    "pushed_at": "2024-10-16T18:21:22Z",
    "size": 534,
    "stars": 26,
    "forks": 4,
    "open_issues": 3,
    "watchers": 26,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 256411
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T19:26:44.929122"
  }
}