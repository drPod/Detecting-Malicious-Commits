{
  "cve_id": "CVE-2024-31997",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "171e7c7d0e56deaa7b3678657ae26ef95379b1ea",
    "related_commits": [
      "171e7c7d0e56deaa7b3678657ae26ef95379b1ea",
      "1b2574eb966457ca4ef34e557376b8751d1be90d",
      "56748e154a9011f0d6239bec0823eaaeab6ec3f7",
      "171e7c7d0e56deaa7b3678657ae26ef95379b1ea",
      "1b2574eb966457ca4ef34e557376b8751d1be90d",
      "56748e154a9011f0d6239bec0823eaaeab6ec3f7"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "171e7c7d0e56deaa7b3678657ae26ef95379b1ea",
      "commit_date": "2023-10-13T14:28:52Z",
      "author": {
        "login": "michitux",
        "type": "User",
        "stats": {
          "total_commits": 388,
          "average_weekly_commits": 0.40585774058577406,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 111
        }
      },
      "commit_message": {
        "title": "XWIKI-21335: Execute UI Extension parameters with the rights of their author",
        "length": 175,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 222,
        "additions": 170,
        "deletions": 52
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-uiextension/xwiki-platform-uiextension-api/src/main/java/org/xwiki/uiextension/internal/WikiUIExtensionComponentBuilder.java",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -136,12 +136,9 @@ public List<WikiComponent> buildComponents(BaseObject baseObject) throws WikiCom\n                 String.format(\"Failed to initialize Panel UI extension [%s]\", baseObject.getReference()), e);\n         }\n \n-        String rawParameters = baseObject.getStringValue(PARAMETERS_PROPERTY);\n-\n         // It would be nice to have PER_LOOKUP components for UIX parameters but without constructor injection it's\n         // safer to use a POJO and pass the Component Manager to it.\n-        WikiUIExtensionParameters parameters =\n-            new WikiUIExtensionParameters(id, rawParameters, this.wikiComponentManager);\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(baseObject, this.wikiComponentManager);\n         extension.setParameters(parameters);\n         extension.setScope(scope);\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-uiextension/xwiki-platform-uiextension-api/src/main/java/org/xwiki/uiextension/internal/WikiUIExtensionParameters.java",
          "status": "modified",
          "additions": 55,
          "deletions": 26,
          "patch": "@@ -22,9 +22,10 @@\n import java.io.IOException;\n import java.io.StringReader;\n import java.io.StringWriter;\n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -38,11 +39,20 @@\n import org.xwiki.logging.LoggerConfiguration;\n import org.xwiki.model.EntityType;\n import org.xwiki.model.ModelContext;\n+import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.velocity.VelocityEngine;\n import org.xwiki.velocity.VelocityManager;\n import org.xwiki.velocity.XWikiVelocityContext;\n import org.xwiki.velocity.XWikiVelocityException;\n \n+import com.xpn.xwiki.objects.BaseObject;\n+\n+import static org.xwiki.uiextension.internal.WikiUIExtensionConstants.ID_PROPERTY;\n+import static org.xwiki.uiextension.internal.WikiUIExtensionConstants.PARAMETERS_PROPERTY;\n+\n /**\n  * Wiki UI Extension parameter manager.\n  *\n@@ -97,25 +107,37 @@ public class WikiUIExtensionParameters\n      */\n     private Execution execution;\n \n+    private AuthorExecutor authorExecutor;\n+\n+    private final DocumentReference documentReference;\n+\n+    private final DocumentReference authorReference;\n+\n+    private final AuthorizationManager authorizationManager;\n+\n     /**\n      * Default constructor.\n      *\n-     * @param id the unique identifier of this set of parameters, mostly used to isolate parameters value execution\n-     * @param rawParameters raw parameters, their values can contain velocity directives\n+     * @param baseObject the object from which the parameters shall be loaded\n      * @param cm the XWiki component manager\n      * @throws WikiComponentException if some required components can't be found in the Component Manager\n      */\n-    public WikiUIExtensionParameters(String id, String rawParameters, ComponentManager cm)\n+    public WikiUIExtensionParameters(BaseObject baseObject, ComponentManager cm)\n         throws WikiComponentException\n     {\n-        this.id = id;\n-        this.parameters = parseParameters(rawParameters);\n+        this.id = baseObject.getStringValue(ID_PROPERTY);\n+        this.parameters = parseParameters(baseObject.getStringValue(PARAMETERS_PROPERTY));\n+\n+        this.documentReference = baseObject.getDocumentReference();\n+        this.authorReference = baseObject.getOwnerDocument().getAuthorReference();\n \n         try {\n             this.execution = cm.getInstance(Execution.class);\n             this.velocityManager = cm.getInstance(VelocityManager.class);\n             this.modelContext = cm.getInstance(ModelContext.class);\n             this.loggerConfiguration = cm.getInstance(LoggerConfiguration.class);\n+            this.authorExecutor = cm.getInstance(AuthorExecutor.class);\n+            this.authorizationManager = cm.getInstance(AuthorizationManager.class);\n         } catch (ComponentLookupException e) {\n             throw new WikiComponentException(\n                 \"Failed to get an instance for a component role required by Wiki Components.\", e);\n@@ -148,7 +170,7 @@ private Properties parseParameters(String rawParameters)\n      */\n     public Map<String, String> get()\n     {\n-        boolean isCacheValid = false;\n+        Map<String, String> result;\n \n         // Even though the parameters are dynamic, we cache a rendered version of them in order to improve performance.\n         // This cache has a short lifespan, it gets discarded for each new request, or if the database has been switched\n@@ -158,43 +180,50 @@ public Map<String, String> get()\n         if (currentContextId == this.previousContextId\n                 && currentWiki.equals(previousWiki) && this.evaluatedParameters != null)\n         {\n-            isCacheValid = true;\n-        }\n-\n-        if (!isCacheValid) {\n-            this.evaluatedParameters = new HashMap<>();\n-\n-            if (this.parameters.size() > 0) {\n+            result = this.evaluatedParameters;\n+        } else {\n+            result = this.parameters.stringPropertyNames().stream()\n+                .filter(StringUtils::isNotBlank)\n+                .collect(Collectors.toMap(Function.identity(), this.parameters::getProperty));\n+\n+            if (!this.parameters.isEmpty()\n+                && this.authorizationManager.hasAccess(Right.SCRIPT, this.authorReference, this.documentReference))\n+            {\n                 try {\n-                    VelocityEngine velocityEngine = this.velocityManager.getVelocityEngine();\n-                    VelocityContext velocityContext = this.velocityManager.getVelocityContext();\n+                    this.authorExecutor.call(() -> {\n+                        VelocityEngine velocityEngine = this.velocityManager.getVelocityEngine();\n+                        VelocityContext velocityContext = this.velocityManager.getVelocityContext();\n \n-                    for (String propertyKey : this.parameters.stringPropertyNames()) {\n-                        if (!StringUtils.isBlank(propertyKey)) {\n-                            String propertyValue = this.parameters.getProperty(propertyKey);\n+                        result.replaceAll((propertyKey, propertyValue) -> {\n                             StringWriter writer = new StringWriter();\n                             try {\n                                 String namespace = this.id + ':' + propertyKey;\n                                 velocityEngine.evaluate(\n                                     new XWikiVelocityContext(velocityContext,\n                                         this.loggerConfiguration.isDeprecatedLogEnabled()),\n                                     writer, namespace, propertyValue);\n-                                this.evaluatedParameters.put(propertyKey, writer.toString());\n+                                return writer.toString();\n                             } catch (XWikiVelocityException e) {\n                                 LOGGER.warn(String.format(\n                                     \"Failed to evaluate UI extension data value, key [%s], value [%s]. Reason: [%s]\",\n                                     propertyKey, propertyValue, e.getMessage()));\n                             }\n-                        }\n-                    }\n-                } catch (XWikiVelocityException ex) {\n+\n+                            return propertyValue;\n+                        });\n+\n+                        return null;\n+                    }, this.authorReference, this.documentReference);\n+                } catch (Exception ex) {\n                     LOGGER.warn(String.format(\"Failed to get velocity engine. Reason: [%s]\", ex.getMessage()));\n                 }\n-                this.previousContextId = currentContextId;\n-                this.previousWiki = currentWiki;\n             }\n+\n+            this.evaluatedParameters = result;\n+            this.previousContextId = currentContextId;\n+            this.previousWiki = currentWiki;\n         }\n \n-        return this.evaluatedParameters;\n+        return result;\n     }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-uiextension/xwiki-platform-uiextension-api/src/test/java/org/xwiki/uiextension/WikiUIExtensionComponentBuilderTest.java",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.concurrent.Callable;\n \n import org.apache.velocity.VelocityContext;\n import org.junit.jupiter.api.Test;\n@@ -43,6 +44,9 @@\n import org.xwiki.rendering.transformation.RenderingContext;\n import org.xwiki.rendering.transformation.Transformation;\n import org.xwiki.rendering.util.ErrorBlockGenerator;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.test.annotation.BeforeComponent;\n import org.xwiki.test.annotation.ComponentList;\n import org.xwiki.test.junit5.mockito.InjectMockComponents;\n@@ -93,6 +97,12 @@ class WikiUIExtensionComponentBuilderTest implements WikiUIExtensionConstants\n     @MockComponent\n     private LoggerConfiguration loggerConfiguration;\n \n+    @MockComponent\n+    private AuthorExecutor authorExecutor;\n+\n+    @MockComponent\n+    private AuthorizationManager authorizationManager;\n+\n     @InjectMockComponents\n     private WikiUIExtensionComponentBuilder builder;\n \n@@ -128,6 +138,13 @@ public void configure(MockitoComponentManager componentManager, MockitoOldcore o\n         componentManager.registerMockComponent(Transformation.class, \"macro\");\n         componentManager.registerMockComponent(ContentParser.class);\n \n+        when(this.authorExecutor.call(any(), any(), any())).thenAnswer(invocation -> {\n+            Callable<?> callable = invocation.getArgument(0);\n+            return callable.call();\n+        });\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOC_REF)).thenReturn(true);\n+\n         // The document holding the UI extension object.\n         this.componentDoc = mock(XWikiDocument.class, \"xwiki:XWiki.MyUIExtension\");\n         when(this.componentDoc.getDocumentReference()).thenReturn(DOC_REF);\n@@ -197,6 +214,7 @@ private BaseObject createExtensionObject(String id, String extensionPointId, Str\n         BaseObjectReference objectReference =\n             new BaseObjectReference(new ObjectReference(\"XWiki.UIExtensionClass[0]\", DOC_REF));\n         when(extensionObject.getReference()).thenReturn(objectReference);\n+        when(extensionObject.getDocumentReference()).thenReturn(DOC_REF);\n \n         when(extensionObject.getOwnerDocument()).thenReturn(this.componentDoc);\n "
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-uiextension/xwiki-platform-uiextension-api/src/test/java/org/xwiki/uiextension/WikiUIExtensionParametersTest.java",
          "status": "modified",
          "additions": 96,
          "deletions": 22,
          "patch": "@@ -20,6 +20,7 @@\n package org.xwiki.uiextension;\n \n import java.io.StringWriter;\n+import java.util.concurrent.Callable;\n \n import org.apache.commons.collections.MapUtils;\n import org.apache.velocity.VelocityContext;\n@@ -31,25 +32,35 @@\n import org.xwiki.context.ExecutionContext;\n import org.xwiki.logging.LoggerConfiguration;\n import org.xwiki.model.ModelContext;\n+import org.xwiki.model.reference.DocumentReference;\n import org.xwiki.model.reference.WikiReference;\n+import org.xwiki.security.authorization.AuthorExecutor;\n+import org.xwiki.security.authorization.AuthorizationManager;\n+import org.xwiki.security.authorization.Right;\n import org.xwiki.test.LogLevel;\n import org.xwiki.test.junit5.LogCaptureExtension;\n import org.xwiki.test.junit5.mockito.ComponentTest;\n import org.xwiki.test.junit5.mockito.InjectComponentManager;\n import org.xwiki.test.junit5.mockito.MockComponent;\n import org.xwiki.test.mockito.MockitoComponentManager;\n+import org.xwiki.uiextension.internal.WikiUIExtensionConstants;\n import org.xwiki.uiextension.internal.WikiUIExtensionParameters;\n import org.xwiki.velocity.VelocityEngine;\n import org.xwiki.velocity.VelocityManager;\n import org.xwiki.velocity.XWikiVelocityException;\n \n+import com.xpn.xwiki.doc.XWikiDocument;\n+import com.xpn.xwiki.objects.BaseObject;\n+\n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.eq;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n \n /**\n@@ -61,6 +72,10 @@\n @ComponentTest\n class WikiUIExtensionParametersTest\n {\n+    private static final DocumentReference AUTHOR_REFERENCE = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiAdmin\");\n+\n+    private static final DocumentReference DOCUMENT_REFERENCE = new DocumentReference(\"xwiki\", \"Space\", \"UIX\");\n+\n     @Mock\n     private VelocityEngine velocityEngine;\n \n@@ -76,6 +91,12 @@ class WikiUIExtensionParametersTest\n     @MockComponent\n     private LoggerConfiguration loggerConfiguration;\n \n+    @MockComponent\n+    private AuthorExecutor authorExecutor;\n+\n+    @MockComponent\n+    private AuthorizationManager authorizationManager;\n+\n     @RegisterExtension\n     private final LogCaptureExtension logCapture = new LogCaptureExtension(LogLevel.WARN);\n \n@@ -91,24 +112,33 @@ public void setUp() throws Exception\n         when(this.execution.getContext()).thenReturn(executionContext);\n         when(this.velocityManager.getVelocityContext()).thenReturn(velocityContext);\n         when(this.velocityManager.getVelocityEngine()).thenReturn(this.velocityEngine);\n+\n+        when(this.authorExecutor.call(any(), any(), any())).thenAnswer(invocation -> {\n+            Callable<?> callable = invocation.getArgument(0);\n+            return callable.call();\n+        });\n+\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(true);\n+\n+        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"xwiki\"));\n     }\n \n     @Test\n     void getParametersWithAnEmptyParametersProperty() throws Exception\n     {\n-        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"xwiki\"));\n-        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(\"id\", \"\", this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(\"\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n         assertEquals(MapUtils.EMPTY_MAP, parameters.get());\n     }\n \n     @Test\n     void getParametersWithAnEqualSignInAValue() throws Exception\n     {\n-        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"xwiki\"));\n         when(this.velocityEngine\n             .evaluate(any(VelocityContext.class), any(StringWriter.class), eq(\"id:key\"), eq(\"value\")))\n             .thenReturn(true);\n-        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(\"id\", \"key=value\", this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(\"key=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n \n         // Since the StringWriter is created within the method, the value is \"\" and not \"value\".\n         assertEquals(\"\", parameters.get().get(\"key\"));\n@@ -117,15 +147,13 @@ void getParametersWithAnEqualSignInAValue() throws Exception\n     @Test\n     void getParametersWithCommentAloneOnLine() throws Exception\n     {\n-        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"xwiki\"));\n-\n         String paramsStr = \"# a = 1\\n\"\n             + \"x=1\\n\"\n             + \"y=2\\n\"\n             + \"# ...\\n\"\n             + \"z=3\";\n-        WikiUIExtensionParameters parameters =\n-            new WikiUIExtensionParameters(\"id\", paramsStr, this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(paramsStr);\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n         parameters.get();\n \n         verify(this.velocityEngine).evaluate(any(), any(), eq(\"id:x\"), eq(\"1\"));\n@@ -136,13 +164,11 @@ void getParametersWithCommentAloneOnLine() throws Exception\n     @Test\n     void getParametersWithCommentEndOfLine() throws Exception\n     {\n-        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"xwiki\"));\n-\n         String paramsStr = \"x=1##b\\n\"\n             + \"y=2####x\\n\"\n             + \"z=3 ## xyz\\n\";\n-        WikiUIExtensionParameters parameters =\n-            new WikiUIExtensionParameters(\"id\", paramsStr, this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(paramsStr);\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n         parameters.get();\n \n         verify(this.velocityEngine).evaluate(any(), any(), eq(\"id:x\"), eq(\"1##b\"));\n@@ -153,26 +179,26 @@ void getParametersWithCommentEndOfLine() throws Exception\n     @Test\n     void getParametersWhenVelocityFails() throws Exception\n     {\n-        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"xwiki\"));\n         when(this.velocityEngine\n             .evaluate(any(VelocityContext.class), any(StringWriter.class), eq(\"id:key\"), eq(\"value\")))\n             .thenThrow(new XWikiVelocityException(\"\"));\n-        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(\"id\", \"key=value\", this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(\"key=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n \n-        // It should fail and put a warn in the logs\n-        assertNull(parameters.get().get(\"key\"));\n+        // It put a warning in the logs and return the not-evaluated value.\n+        assertEquals(\"value\", parameters.get().get(\"key\"));\n         assertEquals(\"Failed to evaluate UI extension data value, key [key], value [value]. Reason: []\",\n             this.logCapture.getMessage(0));\n     }\n \n     @Test\n     void getParametersFromTheSameRequestAndForTheSameWiki() throws Exception\n     {\n-        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"xwiki\"));\n         when(this.velocityEngine\n             .evaluate(any(VelocityContext.class), any(StringWriter.class), eq(\"id:key\"), eq(\"value\")))\n             .thenReturn(true);\n-        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(\"id\", \"key=value\", this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(\"key=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n \n         // It should fail silently\n         assertEquals(\"\", parameters.get().get(\"key\"));\n@@ -191,7 +217,8 @@ void getParametersFromTheSameRequestButForDifferentWikis() throws Exception\n         when(this.velocityEngine\n             .evaluate(any(VelocityContext.class), any(StringWriter.class), eq(\"id:key\"), eq(\"value\")))\n             .thenReturn(true);\n-        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(\"id\", \"key=value\", this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(\"key=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n \n         // It should fail silently\n         assertEquals(\"\", parameters.get().get(\"key\"));\n@@ -205,11 +232,11 @@ void getParametersFromTheSameRequestButForDifferentWikis() throws Exception\n     @Test\n     void getParametersFromDifferentRequests() throws Exception\n     {\n-        when(this.modelContext.getCurrentEntityReference()).thenReturn(new WikiReference(\"wiki1\"));\n         when(this.velocityEngine\n             .evaluate(any(VelocityContext.class), any(StringWriter.class), eq(\"id:key\"), eq(\"value\")))\n             .thenReturn(true);\n-        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(\"id\", \"key=value\", this.componentManager);\n+        BaseObject mockUIX = constructMockUIXObject(\"key=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n \n         ExecutionContext ec1 = mock(ExecutionContext.class, \"ec1\");\n         ExecutionContext ec2 = mock(ExecutionContext.class, \"ec2\");\n@@ -223,4 +250,51 @@ void getParametersFromDifferentRequests() throws Exception\n         verify(this.velocityEngine, times(2))\n             .evaluate(any(VelocityContext.class), any(StringWriter.class), eq(\"id:key\"), eq(\"value\"));\n     }\n+\n+    @Test\n+    void getParametersWithoutScriptRight() throws Exception\n+    {\n+        when(this.authorizationManager.hasAccess(Right.SCRIPT, AUTHOR_REFERENCE, DOCUMENT_REFERENCE)).thenReturn(false);\n+        BaseObject mockUIX = constructMockUIXObject(\"key=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n+\n+        assertEquals(\"value\", parameters.get().get(\"key\"));\n+        verifyNoInteractions(this.velocityEngine);\n+    }\n+\n+    @Test\n+    void getParametersWithAuthorExecutor() throws Exception\n+    {\n+        // Do not call the callable to check that the call to the Velocity engine is inside the author executor.\n+        doReturn(null).when(this.authorExecutor).call(any(), any(), any());\n+\n+        BaseObject mockUIX = constructMockUIXObject(\"key=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n+\n+        assertEquals(\"value\", parameters.get().get(\"key\"));\n+        verify(this.authorExecutor).call(any(), eq(AUTHOR_REFERENCE), eq(DOCUMENT_REFERENCE));\n+        verifyNoInteractions(this.velocityEngine);\n+    }\n+\n+    @Test\n+    void getParametersWithEmptyKey() throws Exception\n+    {\n+        BaseObject mockUIX = constructMockUIXObject(\"=value\");\n+        WikiUIExtensionParameters parameters = new WikiUIExtensionParameters(mockUIX, this.componentManager);\n+\n+        assertTrue(parameters.get().isEmpty());\n+    }\n+\n+    private BaseObject constructMockUIXObject(String parameters)\n+    {\n+        BaseObject result = mock();\n+\n+        when(result.getStringValue(WikiUIExtensionConstants.ID_PROPERTY)).thenReturn(\"id\");\n+        when(result.getStringValue(WikiUIExtensionConstants.PARAMETERS_PROPERTY)).thenReturn(parameters);\n+        when(result.getOwnerDocument()).thenReturn(mock(XWikiDocument.class));\n+        when(result.getOwnerDocument().getAuthorReference()).thenReturn(WikiUIExtensionParametersTest.AUTHOR_REFERENCE);\n+        when(result.getDocumentReference()).thenReturn(WikiUIExtensionParametersTest.DOCUMENT_REFERENCE);\n+\n+        return result;\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "20d352276c008c8ea2a1cf1ea9ceb84193098477",
            "date": "2025-01-25T19:15:09Z",
            "author_login": "mflorea"
          },
          {
            "sha": "e29b630b2d5a42b6f12ed3f0e4f59bd078f8a0f7",
            "date": "2025-01-24T07:34:53Z",
            "author_login": "mflorea"
          },
          {
            "sha": "023144daf732d04b085c2423ebd4552edd09ac5c",
            "date": "2025-01-24T15:44:30Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "a46579427dc202957d623b8e69a6a894243c6690",
            "date": "2025-01-21T16:53:45Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "3d661180a9075925c3d2d75816356925f32ae89d",
            "date": "2025-01-21T16:13:46Z",
            "author_login": "Sereza7"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-862",
    "description": "XWiki Platform is a generic wiki platform. Prior to versions 4.10.19, 15.5.4, and 15.10-rc-1, parameters of UI extensions are always interpreted as Velocity code and executed with programming rights. Any user with edit right on any document like the user's own profile can create UI extensions. This allows remote code execution and thereby impacts the confidentiality, integrity and availability of the whole XWiki installation. This vulnerability has been patched in XWiki 14.10.19, 15.5.4 and 15.9-RC1. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-10T22:15:07.527",
    "last_modified": "2025-01-09T19:02:51.310",
    "fix_date": "2023-10-13T14:28:52Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/171e7c7d0e56deaa7b3678657ae26ef95379b1ea",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/1b2574eb966457ca4ef34e557376b8751d1be90d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/56748e154a9011f0d6239bec0823eaaeab6ec3f7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-c2gg-4gq4-jv5j",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21335",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/171e7c7d0e56deaa7b3678657ae26ef95379b1ea",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/1b2574eb966457ca4ef34e557376b8751d1be90d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/56748e154a9011f0d6239bec0823eaaeab6ec3f7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-c2gg-4gq4-jv5j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21335",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.471171",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-25T19:23:49Z",
    "pushed_at": "2025-01-25T19:23:45Z",
    "size": 563394,
    "stars": 1035,
    "forks": 555,
    "open_issues": 143,
    "watchers": 1035,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34352251,
      "JavaScript": 2404688,
      "HTML": 388086,
      "Less": 318876,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115582,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1743,
      "avg_commits_per_week": 33.51923076923077,
      "days_active_last_year": 261
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:34:26.816515"
  }
}