{
  "cve_id": "CVE-2024-32002",
  "github_data": {
    "repository": "git/git",
    "fix_commit": "97065761333fd62db1912d81b489db938d8c991d",
    "related_commits": [
      "97065761333fd62db1912d81b489db938d8c991d",
      "97065761333fd62db1912d81b489db938d8c991d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "97065761333fd62db1912d81b489db938d8c991d",
      "commit_date": "2024-03-22T10:19:22Z",
      "author": {
        "login": "dscho",
        "type": "User",
        "stats": {
          "total_commits": 2340,
          "average_weekly_commits": 2.265246853823814,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 449
        }
      },
      "commit_message": {
        "title": "submodules: submodule paths must not contain symlinks",
        "length": 808,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 83,
        "additions": 83,
        "deletions": 0
      },
      "files": [
        {
          "filename": "builtin/submodule--helper.c",
          "status": "modified",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -1641,12 +1641,35 @@ static char *clone_submodule_sm_gitdir(const char *name)\n \treturn sm_gitdir;\n }\n \n+static int dir_contains_only_dotgit(const char *path)\n+{\n+\tDIR *dir = opendir(path);\n+\tstruct dirent *e;\n+\tint ret = 1;\n+\n+\tif (!dir)\n+\t\treturn 0;\n+\n+\te = readdir_skip_dot_and_dotdot(dir);\n+\tif (!e)\n+\t\tret = 0;\n+\telse if (strcmp(DEFAULT_GIT_DIR_ENVIRONMENT, e->d_name) ||\n+\t\t (e = readdir_skip_dot_and_dotdot(dir))) {\n+\t\terror(\"unexpected item '%s' in '%s'\", e->d_name, path);\n+\t\tret = 0;\n+\t}\n+\n+\tclosedir(dir);\n+\treturn ret;\n+}\n+\n static int clone_submodule(const struct module_clone_data *clone_data,\n \t\t\t   struct string_list *reference)\n {\n \tchar *p;\n \tchar *sm_gitdir = clone_submodule_sm_gitdir(clone_data->name);\n \tchar *sm_alternate = NULL, *error_strategy = NULL;\n+\tstruct stat st;\n \tstruct child_process cp = CHILD_PROCESS_INIT;\n \tconst char *clone_data_path = clone_data->path;\n \tchar *to_free = NULL;\n@@ -1660,6 +1683,10 @@ static int clone_submodule(const struct module_clone_data *clone_data,\n \t\t      \"git dir\"), sm_gitdir);\n \n \tif (!file_exists(sm_gitdir)) {\n+\t\tif (clone_data->require_init && !stat(clone_data_path, &st) &&\n+\t\t    !is_empty_dir(clone_data_path))\n+\t\t\tdie(_(\"directory not empty: '%s'\"), clone_data_path);\n+\n \t\tif (safe_create_leading_directories_const(sm_gitdir) < 0)\n \t\t\tdie(_(\"could not create directory '%s'\"), sm_gitdir);\n \n@@ -1704,6 +1731,14 @@ static int clone_submodule(const struct module_clone_data *clone_data,\n \t\tif(run_command(&cp))\n \t\t\tdie(_(\"clone of '%s' into submodule path '%s' failed\"),\n \t\t\t    clone_data->url, clone_data_path);\n+\n+\t\tif (clone_data->require_init && !stat(clone_data_path, &st) &&\n+\t\t    !dir_contains_only_dotgit(clone_data_path)) {\n+\t\t\tchar *dot_git = xstrfmt(\"%s/.git\", clone_data_path);\n+\t\t\tunlink(dot_git);\n+\t\t\tfree(dot_git);\n+\t\t\tdie(_(\"directory not empty: '%s'\"), clone_data_path);\n+\t\t}\n \t} else {\n \t\tchar *path;\n "
        },
        {
          "filename": "t/t7406-submodule-update.sh",
          "status": "modified",
          "additions": 48,
          "deletions": 0,
          "patch": "@@ -1179,4 +1179,52 @@ test_expect_success 'submodule update --recursive skip submodules with strategy=\n \ttest_cmp expect.err actual.err\n '\n \n+test_expect_success CASE_INSENSITIVE_FS,SYMLINKS \\\n+\t'submodule paths must not follow symlinks' '\n+\n+\t# This is only needed because we want to run this in a self-contained\n+\t# test without having to spin up an HTTP server; However, it would not\n+\t# be needed in a real-world scenario where the submodule is simply\n+\t# hosted on a public site.\n+\ttest_config_global protocol.file.allow always &&\n+\n+\t# Make sure that Git tries to use symlinks on Windows\n+\ttest_config_global core.symlinks true &&\n+\n+\ttell_tale_path=\"$PWD/tell.tale\" &&\n+\tgit init hook &&\n+\t(\n+\t\tcd hook &&\n+\t\tmkdir -p y/hooks &&\n+\t\twrite_script y/hooks/post-checkout <<-EOF &&\n+\t\techo HOOK-RUN >&2\n+\t\techo hook-run >\"$tell_tale_path\"\n+\t\tEOF\n+\t\tgit add y/hooks/post-checkout &&\n+\t\ttest_tick &&\n+\t\tgit commit -m post-checkout\n+\t) &&\n+\n+\thook_repo_path=\"$(pwd)/hook\" &&\n+\tgit init captain &&\n+\t(\n+\t\tcd captain &&\n+\t\tgit submodule add --name x/y \"$hook_repo_path\" A/modules/x &&\n+\t\ttest_tick &&\n+\t\tgit commit -m add-submodule &&\n+\n+\t\tprintf .git >dotgit.txt &&\n+\t\tgit hash-object -w --stdin <dotgit.txt >dot-git.hash &&\n+\t\tprintf \"120000 %s 0\\ta\\n\" \"$(cat dot-git.hash)\" >index.info &&\n+\t\tgit update-index --index-info <index.info &&\n+\t\ttest_tick &&\n+\t\tgit commit -m add-symlink\n+\t) &&\n+\n+\ttest_path_is_missing \"$tell_tale_path\" &&\n+\ttest_must_fail git clone --recursive captain hooked 2>err &&\n+\tgrep \"directory not empty\" err &&\n+\ttest_path_is_missing \"$tell_tale_path\"\n+'\n+\n test_done"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5f8f7081f7761acdf83d0a4c6819fe3d724f01d7",
            "date": "2025-01-23T22:24:50Z",
            "author_login": "gitster"
          },
          {
            "sha": "39ba2e8e5627a8a3062d257928824139ca71c5f3",
            "date": "2025-01-23T23:07:02Z",
            "author_login": "gitster"
          },
          {
            "sha": "6ecb4fc149c725e16392dc88f1f419dd56aaddcc",
            "date": "2025-01-23T23:07:02Z",
            "author_login": "gitster"
          },
          {
            "sha": "294673a17e818d8a29c8d23b0922855734e1925d",
            "date": "2025-01-23T23:07:02Z",
            "author_login": "gitster"
          },
          {
            "sha": "aa31820d9da83cecfb028c76327d74694e3fc11f",
            "date": "2025-01-23T23:07:01Z",
            "author_login": "gitster"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-22",
    "description": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, repositories with submodules can be crafted in a way that exploits a bug in Git whereby it can be fooled into writing files not into the submodule's worktree but into a `.git/` directory. This allows writing a hook that will be executed while the clone operation is still running, giving the user no opportunity to inspect the code that is being executed. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. If symbolic link support is disabled in Git (e.g. via `git config --global core.symlinks false`), the described attack won't work. As always, it is best to avoid cloning repositories from untrusted sources.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-05-14T19:15:10.810",
    "last_modified": "2024-11-21T09:14:19.267",
    "fix_date": "2024-03-22T10:19:22Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/05/14/2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---recurse-submodulesltpathspecgt",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://git-scm.com/docs/git-config#Documentation/git-config.txt-coresymlinks",
      "source": "security-advisories@github.com",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/git/git/commit/97065761333fd62db1912d81b489db938d8c991d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-8h77-4q3w-gfgv",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00018.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S4CK4IYTXEOBZTEM5K3T6LWOIZ3S44AR/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/05/14/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git-clone#Documentation/git-clone.txt---recurse-submodulesltpathspecgt",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://git-scm.com/docs/git-config#Documentation/git-config.txt-coresymlinks",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Not Applicable"
      ]
    },
    {
      "url": "https://github.com/git/git/commit/97065761333fd62db1912d81b489db938d8c991d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-8h77-4q3w-gfgv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00018.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S4CK4IYTXEOBZTEM5K3T6LWOIZ3S44AR/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.914763",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "git",
    "owner": "git",
    "created_at": "2008-07-23T14:21:26Z",
    "updated_at": "2025-01-26T05:23:02Z",
    "pushed_at": "2025-01-26T06:02:54Z",
    "size": 268239,
    "stars": 53304,
    "forks": 25843,
    "open_issues": 202,
    "watchers": 53304,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 11390380,
      "Shell": 8593314,
      "Perl": 1166701,
      "Tcl": 852369,
      "Python": 183463,
      "Makefile": 168744,
      "Meson": 107371,
      "JavaScript": 49713,
      "CMake": 46584,
      "M4": 38265,
      "Roff": 26859,
      "C++": 26403,
      "SmPL": 15676,
      "Go": 15064,
      "CSS": 10664,
      "Batchfile": 9822,
      "Emacs Lisp": 660,
      "PowerShell": 478,
      "ReScript": 92
    },
    "commit_activity": {
      "total_commits_last_year": 3696,
      "avg_commits_per_week": 71.07692307692308,
      "days_active_last_year": 309
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:50:10.099066"
  }
}