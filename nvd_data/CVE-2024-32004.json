{
  "cve_id": "CVE-2024-32004",
  "github_data": {
    "repository": "git/git",
    "fix_commit": "f4aa8c8bb11dae6e769cd930565173808cbb69c8",
    "related_commits": [
      "f4aa8c8bb11dae6e769cd930565173808cbb69c8",
      "f4aa8c8bb11dae6e769cd930565173808cbb69c8"
    ],
    "patch_url": "https://github.com/git/git/commit/f4aa8c8bb11dae6e769cd930565173808cbb69c8.patch",
    "fix_commit_details": {
      "sha": "f4aa8c8bb11dae6e769cd930565173808cbb69c8",
      "commit_date": "2024-04-10T12:39:37Z",
      "author": {
        "login": "dscho",
        "type": "User",
        "stats": {
          "total_commits": 2340,
          "average_weekly_commits": 2.2696411251212414,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 449
        }
      },
      "commit_message": {
        "title": "fetch/clone: detect dubious ownership of local repositories",
        "length": 1620,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 41,
        "additions": 38,
        "deletions": 3
      },
      "files": [
        {
          "filename": "cache.h",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -606,6 +606,18 @@ void set_git_work_tree(const char *tree);\n \n #define ALTERNATE_DB_ENVIRONMENT \"GIT_ALTERNATE_OBJECT_DIRECTORIES\"\n \n+/*\n+ * Check if a repository is safe and die if it is not, by verifying the\n+ * ownership of the worktree (if any), the git directory, and the gitfile (if\n+ * any).\n+ *\n+ * Exemptions for known-safe repositories can be added via `safe.directory`\n+ * config settings; for non-bare repositories, their worktree needs to be\n+ * added, for bare ones their git directory.\n+ */\n+void die_upon_dubious_ownership(const char *gitfile, const char *worktree,\n+\t\t\t\tconst char *gitdir);\n+\n void setup_work_tree(void);\n /*\n  * Find the commondir and gitdir of the repository that contains the current"
        },
        {
          "filename": "path.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -840,6 +840,7 @@ const char *enter_repo(const char *path, int strict)\n \t\tif (!suffix[i])\n \t\t\treturn NULL;\n \t\tgitfile = read_gitfile(used_path.buf);\n+\t\tdie_upon_dubious_ownership(gitfile, NULL, used_path.buf);\n \t\tif (gitfile) {\n \t\t\tstrbuf_reset(&used_path);\n \t\t\tstrbuf_addstr(&used_path, gitfile);\n@@ -850,6 +851,7 @@ const char *enter_repo(const char *path, int strict)\n \t}\n \telse {\n \t\tconst char *gitfile = read_gitfile(path);\n+\t\tdie_upon_dubious_ownership(gitfile, NULL, path);\n \t\tif (gitfile)\n \t\t\tpath = gitfile;\n \t\tif (chdir(path))"
        },
        {
          "filename": "setup.c",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -1165,6 +1165,27 @@ static int ensure_valid_ownership(const char *gitfile,\n \treturn data.is_safe;\n }\n \n+void die_upon_dubious_ownership(const char *gitfile, const char *worktree,\n+\t\t\t\tconst char *gitdir)\n+{\n+\tstruct strbuf report = STRBUF_INIT, quoted = STRBUF_INIT;\n+\tconst char *path;\n+\n+\tif (ensure_valid_ownership(gitfile, worktree, gitdir, &report))\n+\t\treturn;\n+\n+\tstrbuf_complete(&report, '\\n');\n+\tpath = gitfile ? gitfile : gitdir;\n+\tsq_quote_buf_pretty(&quoted, path);\n+\n+\tdie(_(\"detected dubious ownership in repository at '%s'\\n\"\n+\t      \"%s\"\n+\t      \"To add an exception for this directory, call:\\n\"\n+\t      \"\\n\"\n+\t      \"\\tgit config --global --add safe.directory %s\"),\n+\t    path, report.buf, quoted.buf);\n+}\n+\n static int allowed_bare_repo_cb(const char *key, const char *value, void *d)\n {\n \tenum allowed_bare_repo *allowed_bare_repo = d;"
        },
        {
          "filename": "t/t0411-clone-from-partial.sh",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -23,7 +23,7 @@ test_expect_success 'create evil repo' '\n \t>evil/.git/shallow\n '\n \n-test_expect_failure 'local clone must not fetch from promisor remote and execute script' '\n+test_expect_success 'local clone must not fetch from promisor remote and execute script' '\n \trm -f script-executed &&\n \ttest_must_fail git clone \\\n \t\t--upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\\n@@ -32,7 +32,7 @@ test_expect_failure 'local clone must not fetch from promisor remote and execute\n \ttest_path_is_missing script-executed\n '\n \n-test_expect_failure 'clone from file://... must not fetch from promisor remote and execute script' '\n+test_expect_success 'clone from file://... must not fetch from promisor remote and execute script' '\n \trm -f script-executed &&\n \ttest_must_fail git clone \\\n \t\t--upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\\n@@ -41,7 +41,7 @@ test_expect_failure 'clone from file://... must not fetch from promisor remote a\n \ttest_path_is_missing script-executed\n '\n \n-test_expect_failure 'fetch from file://... must not fetch from promisor remote and execute script' '\n+test_expect_success 'fetch from file://... must not fetch from promisor remote and execute script' '\n \trm -f script-executed &&\n \ttest_must_fail git fetch \\\n \t\t--upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "757161efcca150a9a96b312d9e780a071e601a03",
            "date": "2025-01-13T21:02:01Z",
            "author_login": "gitster"
          },
          {
            "sha": "46afc2ba91a3c7fa8f1591c0a6a1b7c4ad0d2a07",
            "date": "2025-01-13T21:00:48Z",
            "author_login": "gitster"
          },
          {
            "sha": "f93ff170b93a1782659637824b25923245ac9dd1",
            "date": "2025-01-13T20:57:19Z",
            "author_login": "gitster"
          },
          {
            "sha": "65faad6d841c29d4545e9cf3676d75f4e6e4872c",
            "date": "2025-01-13T20:55:26Z",
            "author_login": "gitster"
          },
          {
            "sha": "fbe8d3079d4a96aeb4e4529cc93cc0043b759a05",
            "date": "2025-01-10T17:20:20Z",
            "author_login": "gitster"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-114",
    "description": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, an attacker can prepare a local repository in such a way that, when cloned, will execute arbitrary code during the operation. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid cloning repositories from untrusted sources.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-05-14T19:15:11.377",
    "last_modified": "2024-11-21T09:14:19.607",
    "fix_date": "2024-04-10T12:39:37Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/05/14/2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git-clone",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/commit/f4aa8c8bb11dae6e769cd930565173808cbb69c8",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-xfc6-vwr8-r389",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00018.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S4CK4IYTXEOBZTEM5K3T6LWOIZ3S44AR/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/05/14/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git-clone",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/commit/f4aa8c8bb11dae6e769cd930565173808cbb69c8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-xfc6-vwr8-r389",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00018.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S4CK4IYTXEOBZTEM5K3T6LWOIZ3S44AR/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.914980",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "git",
    "owner": "git",
    "created_at": "2008-07-23T14:21:26Z",
    "updated_at": "2025-01-14T14:01:56Z",
    "pushed_at": "2025-01-13T19:45:30Z",
    "size": 271691,
    "stars": 53164,
    "forks": 25796,
    "open_issues": 201,
    "watchers": 53164,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 11381600,
      "Shell": 8590199,
      "Perl": 1166701,
      "Tcl": 852369,
      "Python": 183463,
      "Makefile": 168746,
      "Meson": 106388,
      "JavaScript": 49713,
      "CMake": 46584,
      "M4": 38265,
      "Roff": 26859,
      "C++": 26403,
      "SmPL": 15676,
      "Go": 15064,
      "CSS": 10664,
      "Batchfile": 9822,
      "Emacs Lisp": 660,
      "PowerShell": 478,
      "ReScript": 92
    },
    "commit_activity": {
      "total_commits_last_year": 3693,
      "avg_commits_per_week": 71.01923076923077,
      "days_active_last_year": 312
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:39:36.932072"
  }
}