{
  "cve_id": "CVE-2024-3219",
  "github_data": {
    "repository": "python/cpython",
    "fix_commit": "06fa244666ec6335a3b9bf2367e31b42b9a89b20",
    "related_commits": [
      "06fa244666ec6335a3b9bf2367e31b42b9a89b20",
      "0b65c8bf5367625673eafb92f85046a1b31259f2",
      "220e31adeaaa8436c9ff234cba1398bc49e2bb6c",
      "2621a8a40ba4b2c68ca564671b7daa5da80a4508",
      "31302f5fc24eecd693f0c8aaba7c2840b09b594d",
      "3f5d9d12c74787fbf3f5891835c85cc15526c86d",
      "5df322e91a40909e6904bbdbc0c3a6b6a9eead39",
      "5f90abaa786f994db3907fc31e2ee00ea2cf0929",
      "b252317956b7fc035bb3774ef6a177e227f9fc54",
      "c21a36112a0028d7ac3cf8f480e0dc88dba5922c",
      "c5655aa6ad120d2ed7f255bebd6e8b71a9c07dde",
      "e319f774f9e766a2b92949444a2d46081df3363a",
      "f071f01b7b7e19d7d6b3a4b0ec62f820ecb14660",
      "06fa244666ec6335a3b9bf2367e31b42b9a89b20",
      "0b65c8bf5367625673eafb92f85046a1b31259f2",
      "220e31adeaaa8436c9ff234cba1398bc49e2bb6c",
      "5f90abaa786f994db3907fc31e2ee00ea2cf0929",
      "b252317956b7fc035bb3774ef6a177e227f9fc54"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "06fa244666ec6335a3b9bf2367e31b42b9a89b20",
      "commit_date": "2024-07-30T12:44:26Z",
      "author": {
        "login": "miss-islington",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[3.9] gh-122133: Authenticate socket connection for `socket.socketpair()` fallback (GH-122134) (#122428)",
        "length": 532,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 150,
        "additions": 147,
        "deletions": 3
      },
      "files": [
        {
          "filename": "Lib/socket.py",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -646,6 +646,23 @@ def socketpair(family=AF_INET, type=SOCK_STREAM, proto=0):\n                 raise\n         finally:\n             lsock.close()\n+\n+        # Authenticating avoids using a connection from something else\n+        # able to connect to {host}:{port} instead of us.\n+        # We expect only AF_INET and AF_INET6 families.\n+        try:\n+            if (\n+                ssock.getsockname() != csock.getpeername()\n+                or csock.getsockname() != ssock.getpeername()\n+            ):\n+                raise ConnectionError(\"Unexpected peer connection\")\n+        except:\n+            # getsockname() and getpeername() can fail\n+            # if either socket isn't connected.\n+            ssock.close()\n+            csock.close()\n+            raise\n+\n         return (ssock, csock)\n     __all__.append(\"socketpair\")\n "
        },
        {
          "filename": "Lib/test/test_socket.py",
          "status": "modified",
          "additions": 125,
          "deletions": 3,
          "patch": "@@ -555,19 +555,27 @@ class SocketPairTest(unittest.TestCase, ThreadableTest):\n     def __init__(self, methodName='runTest'):\n         unittest.TestCase.__init__(self, methodName=methodName)\n         ThreadableTest.__init__(self)\n+        self.cli = None\n+        self.serv = None\n+\n+    def socketpair(self):\n+        # To be overridden by some child classes.\n+        return socket.socketpair()\n \n     def setUp(self):\n-        self.serv, self.cli = socket.socketpair()\n+        self.serv, self.cli = self.socketpair()\n \n     def tearDown(self):\n-        self.serv.close()\n+        if self.serv:\n+            self.serv.close()\n         self.serv = None\n \n     def clientSetUp(self):\n         pass\n \n     def clientTearDown(self):\n-        self.cli.close()\n+        if self.cli:\n+            self.cli.close()\n         self.cli = None\n         ThreadableTest.clientTearDown(self)\n \n@@ -4613,6 +4621,120 @@ def _testSend(self):\n         self.assertEqual(msg, MSG)\n \n \n+class PurePythonSocketPairTest(SocketPairTest):\n+\n+    # Explicitly use socketpair AF_INET or AF_INET6 to ensure that is the\n+    # code path we're using regardless platform is the pure python one where\n+    # `_socket.socketpair` does not exist.  (AF_INET does not work with\n+    # _socket.socketpair on many platforms).\n+    def socketpair(self):\n+        # called by super().setUp().\n+        try:\n+            return socket.socketpair(socket.AF_INET6)\n+        except OSError:\n+            return socket.socketpair(socket.AF_INET)\n+\n+    # Local imports in this class make for easy security fix backporting.\n+\n+    def setUp(self):\n+        import _socket\n+        self._orig_sp = getattr(_socket, 'socketpair', None)\n+        if self._orig_sp is not None:\n+            # This forces the version using the non-OS provided socketpair\n+            # emulation via an AF_INET socket in Lib/socket.py.\n+            del _socket.socketpair\n+            import importlib\n+            global socket\n+            socket = importlib.reload(socket)\n+        else:\n+            pass  # This platform already uses the non-OS provided version.\n+        super().setUp()\n+\n+    def tearDown(self):\n+        super().tearDown()\n+        import _socket\n+        if self._orig_sp is not None:\n+            # Restore the default socket.socketpair definition.\n+            _socket.socketpair = self._orig_sp\n+            import importlib\n+            global socket\n+            socket = importlib.reload(socket)\n+\n+    def test_recv(self):\n+        msg = self.serv.recv(1024)\n+        self.assertEqual(msg, MSG)\n+\n+    def _test_recv(self):\n+        self.cli.send(MSG)\n+\n+    def test_send(self):\n+        self.serv.send(MSG)\n+\n+    def _test_send(self):\n+        msg = self.cli.recv(1024)\n+        self.assertEqual(msg, MSG)\n+\n+    def test_ipv4(self):\n+        cli, srv = socket.socketpair(socket.AF_INET)\n+        cli.close()\n+        srv.close()\n+\n+    def _test_ipv4(self):\n+        pass\n+\n+    @unittest.skipIf(not hasattr(_socket, 'IPPROTO_IPV6') or\n+                     not hasattr(_socket, 'IPV6_V6ONLY'),\n+                     \"IPV6_V6ONLY option not supported\")\n+    @unittest.skipUnless(socket_helper.IPV6_ENABLED, 'IPv6 required for this test')\n+    def test_ipv6(self):\n+        cli, srv = socket.socketpair(socket.AF_INET6)\n+        cli.close()\n+        srv.close()\n+\n+    def _test_ipv6(self):\n+        pass\n+\n+    def test_injected_authentication_failure(self):\n+        orig_getsockname = socket.socket.getsockname\n+        inject_sock = None\n+\n+        def inject_getsocketname(self):\n+            nonlocal inject_sock\n+            sockname = orig_getsockname(self)\n+            # Connect to the listening socket ahead of the\n+            # client socket.\n+            if inject_sock is None:\n+                inject_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n+                inject_sock.setblocking(False)\n+                try:\n+                    inject_sock.connect(sockname[:2])\n+                except (BlockingIOError, InterruptedError):\n+                    pass\n+                inject_sock.setblocking(True)\n+            return sockname\n+\n+        sock1 = sock2 = None\n+        try:\n+            socket.socket.getsockname = inject_getsocketname\n+            with self.assertRaises(OSError):\n+                sock1, sock2 = socket.socketpair()\n+        finally:\n+            socket.socket.getsockname = orig_getsockname\n+            if inject_sock:\n+                inject_sock.close()\n+            if sock1:  # This cleanup isn't needed on a successful test.\n+                sock1.close()\n+            if sock2:\n+                sock2.close()\n+\n+    def _test_injected_authentication_failure(self):\n+        # No-op.  Exists for base class threading infrastructure to call.\n+        # We could refactor this test into its own lesser class along with the\n+        # setUp and tearDown code to construct an ideal; it is simpler to keep\n+        # it here and live with extra overhead one this _one_ failure test.\n+        pass\n+\n+\n class NonBlockingTCPTests(ThreadedTCPSocketTest):\n \n     def __init__(self, methodName='runTest'):"
        },
        {
          "filename": "Misc/NEWS.d/next/Security/2024-07-22-13-11-28.gh-issue-122133.0mPeta.rst",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+Authenticate the socket connection for the ``socket.socketpair()`` fallback\n+on platforms where ``AF_UNIX`` is not available like Windows.\n+\n+Patch by Gregory P. Smith <greg@krypto.org> and Seth Larson <seth@python.org>. Reported by Ellie\n+<el@horse64.org>"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0ef8d470b79889de065e94cecd0ee01e45037d3a",
            "date": "2025-01-26T03:43:23Z",
            "author_login": "AA-Turner"
          },
          {
            "sha": "3f2cfd0462e13368092a3edccdb2ebb5e57459f9",
            "date": "2025-01-25T18:20:09Z",
            "author_login": "kumaraditya303"
          },
          {
            "sha": "be98fda7c6698e8468afd528c864aca1f532af59",
            "date": "2025-01-25T17:19:48Z",
            "author_login": "vstinner"
          },
          {
            "sha": "7a54a653b718a70c96755f6fc39f01f5c582558a",
            "date": "2025-01-25T16:54:20Z",
            "author_login": "pablogsal"
          },
          {
            "sha": "e119526edface001ad7d7f70249a123c8a122d71",
            "date": "2025-01-25T13:36:58Z",
            "author_login": "hugovk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-306",
    "description": "The\n \u201csocket\u201d module provides a pure-Python fallback to the \nsocket.socketpair() function for platforms that don\u2019t support AF_UNIX, \nsuch as Windows. This pure-Python implementation uses AF_INET or \nAF_INET6 to create a local connected pair of sockets. The connection \nbetween the two sockets was not verified before passing the two sockets \nback to the user, which leaves the server socket vulnerable to a \nconnection race from a malicious local peer.\n\nPlatforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-07-29T22:15:04.970",
    "last_modified": "2024-11-21T09:29:10.427",
    "fix_date": "2024-07-30T12:44:26Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/07/29/3",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/06fa244666ec6335a3b9bf2367e31b42b9a89b20",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/0b65c8bf5367625673eafb92f85046a1b31259f2",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/220e31adeaaa8436c9ff234cba1398bc49e2bb6c",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/2621a8a40ba4b2c68ca564671b7daa5da80a4508",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/31302f5fc24eecd693f0c8aaba7c2840b09b594d",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/3f5d9d12c74787fbf3f5891835c85cc15526c86d",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/5df322e91a40909e6904bbdbc0c3a6b6a9eead39",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/5f90abaa786f994db3907fc31e2ee00ea2cf0929",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/b252317956b7fc035bb3774ef6a177e227f9fc54",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/c21a36112a0028d7ac3cf8f480e0dc88dba5922c",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/c5655aa6ad120d2ed7f255bebd6e8b71a9c07dde",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/e319f774f9e766a2b92949444a2d46081df3363a",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/f071f01b7b7e19d7d6b3a4b0ec62f820ecb14660",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/122133",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/pull/122134",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/WYKDQWIERRE2ICIYMSVRZJO33GSCWU2B/",
      "source": "cna@python.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/07/29/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/06fa244666ec6335a3b9bf2367e31b42b9a89b20",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/0b65c8bf5367625673eafb92f85046a1b31259f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/220e31adeaaa8436c9ff234cba1398bc49e2bb6c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/5f90abaa786f994db3907fc31e2ee00ea2cf0929",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/commit/b252317956b7fc035bb3774ef6a177e227f9fc54",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/issues/122133",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/python/cpython/pull/122134",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://mail.python.org/archives/list/security-announce@python.org/thread/WYKDQWIERRE2ICIYMSVRZJO33GSCWU2B/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:34.498113",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "cpython",
    "owner": "python",
    "created_at": "2017-02-10T19:23:51Z",
    "updated_at": "2025-01-26T07:16:41Z",
    "pushed_at": "2025-01-26T03:54:26Z",
    "size": 655018,
    "stars": 64897,
    "forks": 30950,
    "open_issues": 8992,
    "watchers": 64897,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.9",
      "3.10",
      "3.11",
      "3.12",
      "3.13",
      "main"
    ],
    "languages": {
      "Python": 35718688,
      "C": 20306103,
      "C++": 463750,
      "M4": 257812,
      "HTML": 206335,
      "Batchfile": 78178,
      "Shell": 71664,
      "Roff": 45666,
      "Makefile": 36321,
      "Objective-C": 33051,
      "Common Lisp": 24579,
      "PLSQL": 22886,
      "PowerShell": 20323,
      "Rich Text Format": 6905,
      "JavaScript": 4245,
      "Kotlin": 3800,
      "Assembly": 2552,
      "DTrace": 2196,
      "CSS": 1325,
      "XSLT": 1174,
      "CMake": 327,
      "VBScript": 70
    },
    "commit_activity": {
      "total_commits_last_year": 5713,
      "avg_commits_per_week": 109.86538461538461,
      "days_active_last_year": 355
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:39:56.999072"
  }
}