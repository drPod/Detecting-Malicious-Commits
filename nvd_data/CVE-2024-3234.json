{
  "cve_id": "CVE-2024-3234",
  "github_data": {
    "repository": "gaizhenbiao/chuanhuchatgpt",
    "fix_commit": "6b8f7db347b390f6f8bd07ea2a4ef01a47382f00",
    "related_commits": [
      "6b8f7db347b390f6f8bd07ea2a4ef01a47382f00",
      "6b8f7db347b390f6f8bd07ea2a4ef01a47382f00"
    ],
    "patch_url": "https://github.com/gaizhenbiao/chuanhuchatgpt/commit/6b8f7db347b390f6f8bd07ea2a4ef01a47382f00.patch",
    "fix_commit_details": {
      "sha": "6b8f7db347b390f6f8bd07ea2a4ef01a47382f00",
      "commit_date": "2024-02-17T05:46:12Z",
      "author": {
        "login": "tusik",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat:\u66ff\u4ee3\u5e76\u5b9e\u73b0gradio logout route\u5e76\u6dfb\u52a0\u9000\u51fa\u6309\u94ae (#1034)",
        "length": 99,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 127,
        "additions": 126,
        "deletions": 1
      },
      "files": [
        {
          "filename": "ChuanhuChatbot.py",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -16,7 +16,9 @@\n from modules import config\n import gradio as gr\n import colorama\n+from modules.gradio_patch import reg_patch\n \n+reg_patch()\n \n logging.getLogger(\"httpx\").setLevel(logging.WARNING)\n \n@@ -33,6 +35,8 @@ def create_new_model():\n \n with gr.Blocks(theme=small_and_beautiful_theme) as demo:\n     user_name = gr.Textbox(\"\", visible=False)\n+    # \u6fc0\u6d3b/logout\u8def\u7531\n+    logout_hidden_btn = gr.LogoutButton(visible=False)\n     promptTemplates = gr.State(load_template(get_template_names()[0], mode=2))\n     user_question = gr.State(\"\")\n     assert type(my_api_key) == str\n@@ -391,6 +395,8 @@ def create_new_model():\n                         single_turn_checkbox = gr.Checkbox(label=i18n(\n                             \"\u5355\u8f6e\u5bf9\u8bdd\"), value=False, elem_classes=\"switch-checkbox\", elem_id=\"gr-single-session-cb\", visible=False)\n                         # checkUpdateBtn = gr.Button(i18n(\"\ud83d\udd04 \u68c0\u67e5\u66f4\u65b0...\"), visible=check_update)\n+                        logout_btn = gr.Button(\n+                            i18n(\"\u9000\u51fa\u7528\u6237\"), variant=\"primary\", visible=authflag)\n \n                     with gr.Tab(i18n(\"\u7f51\u7edc\")):\n                         gr.Markdown(\n@@ -801,7 +807,12 @@ def create_greeting(request: gr.Request):\n         outputs=[saveFileName, systemPromptTxt, chatbot, single_turn_checkbox, temperature_slider, top_p_slider, n_choices_slider, stop_sequence_txt, max_context_length_slider, max_generation_slider, presence_penalty_slider, frequency_penalty_slider, logit_bias_txt, user_identifier_txt],\n         _js='(a,b)=>{return bgSelectHistory(a,b);}'\n     )\n-\n+    logout_btn.click(\n+            fn=None,\n+            inputs=[],\n+            outputs=[],\n+            _js='self.location=\"/logout\"'\n+        )\n # \u9ed8\u8ba4\u5f00\u542f\u672c\u5730\u670d\u52a1\u5668\uff0c\u9ed8\u8ba4\u53ef\u4ee5\u76f4\u63a5\u4eceIP\u8bbf\u95ee\uff0c\u9ed8\u8ba4\u4e0d\u521b\u5efa\u516c\u5f00\u5206\u4eab\u94fe\u63a5\n demo.title = i18n(\"\u5ddd\u864eChat \ud83d\ude80\")\n "
        },
        {
          "filename": "modules/gradio_patch.py",
          "status": "added",
          "additions": 114,
          "deletions": 0,
          "patch": "@@ -0,0 +1,114 @@\n+import logging\n+import os\n+\n+import fastapi\n+import gradio\n+from fastapi.responses import RedirectResponse\n+from gradio.oauth import MOCKED_OAUTH_TOKEN\n+\n+from modules.presets import i18n\n+\n+OAUTH_CLIENT_ID = os.environ.get(\"OAUTH_CLIENT_ID\")\n+OAUTH_CLIENT_SECRET = os.environ.get(\"OAUTH_CLIENT_SECRET\")\n+OAUTH_SCOPES = os.environ.get(\"OAUTH_SCOPES\")\n+OPENID_PROVIDER_URL = os.environ.get(\"OPENID_PROVIDER_URL\")\n+def _add_oauth_routes(app: fastapi.FastAPI) -> None:\n+    \"\"\"Add OAuth routes to the FastAPI app (login, callback handler and logout).\"\"\"\n+    try:\n+        from authlib.integrations.starlette_client import OAuth\n+    except ImportError as e:\n+        raise ImportError(\n+            \"Cannot initialize OAuth to due a missing library. Please run `pip install gradio[oauth]` or add \"\n+            \"`gradio[oauth]` to your requirements.txt file in order to install the required dependencies.\"\n+        ) from e\n+\n+    # Check environment variables\n+    msg = (\n+        \"OAuth is required but {} environment variable is not set. Make sure you've enabled OAuth in your Space by\"\n+        \" setting `hf_oauth: true` in the Space metadata.\"\n+    )\n+    if OAUTH_CLIENT_ID is None:\n+        raise ValueError(msg.format(\"OAUTH_CLIENT_ID\"))\n+    if OAUTH_CLIENT_SECRET is None:\n+        raise ValueError(msg.format(\"OAUTH_CLIENT_SECRET\"))\n+    if OAUTH_SCOPES is None:\n+        raise ValueError(msg.format(\"OAUTH_SCOPES\"))\n+    if OPENID_PROVIDER_URL is None:\n+        raise ValueError(msg.format(\"OPENID_PROVIDER_URL\"))\n+\n+    # Register OAuth server\n+    oauth = OAuth()\n+    oauth.register(\n+        name=\"huggingface\",\n+        client_id=OAUTH_CLIENT_ID,\n+        client_secret=OAUTH_CLIENT_SECRET,\n+        client_kwargs={\"scope\": OAUTH_SCOPES},\n+        server_metadata_url=OPENID_PROVIDER_URL + \"/.well-known/openid-configuration\",\n+    )\n+\n+    # Define OAuth routes\n+    @app.get(\"/login/huggingface\")\n+    async def oauth_login(request: fastapi.Request):\n+        \"\"\"Endpoint that redirects to HF OAuth page.\"\"\"\n+        redirect_uri = str(request.url_for(\"oauth_redirect_callback\"))\n+        if \".hf.space\" in redirect_uri:\n+            # In Space, FastAPI redirect as http but we want https\n+            redirect_uri = redirect_uri.replace(\"http://\", \"https://\")\n+        return await oauth.huggingface.authorize_redirect(request, redirect_uri)\n+\n+    @app.get(\"/login/callback\")\n+    async def oauth_redirect_callback(request: fastapi.Request) -> RedirectResponse:\n+        \"\"\"Endpoint that handles the OAuth callback.\"\"\"\n+        token = await oauth.huggingface.authorize_access_token(request)\n+        request.session[\"oauth_profile\"] = token[\"userinfo\"]\n+        request.session[\"oauth_token\"] = token\n+        return RedirectResponse(\"/\")\n+\n+    @app.get(\"/logout\")\n+    async def oauth_logout(request: fastapi.Request) -> RedirectResponse:\n+        \"\"\"Endpoint that logs out the user (e.g. delete cookie session).\"\"\"\n+        request.session.pop(\"oauth_profile\", None)\n+        request.session.pop(\"oauth_token\", None)\n+        # \u6e05\u9664cookie\u5e76\u8df3\u8f6c\u5230\u9996\u9875\n+        response = RedirectResponse(url=\"/\", status_code=302)\n+        response.delete_cookie(key=f\"access-token\")\n+        response.delete_cookie(key=f\"access-token-unsecure\")\n+        return response\n+\n+\n+def _add_mocked_oauth_routes(app: fastapi.FastAPI) -> None:\n+    \"\"\"Add fake oauth routes if Gradio is run locally and OAuth is enabled.\n+\n+    Clicking on a gr.LoginButton will have the same behavior as in a Space (i.e. gets redirected in a new tab) but\n+    instead of authenticating with HF, a mocked user profile is added to the session.\n+    \"\"\"\n+\n+    # Define OAuth routes\n+    @app.get(\"/login/huggingface\")\n+    async def oauth_login(request: fastapi.Request):\n+        \"\"\"Fake endpoint that redirects to HF OAuth page.\"\"\"\n+        return RedirectResponse(\"/login/callback\")\n+\n+    @app.get(\"/login/callback\")\n+    async def oauth_redirect_callback(request: fastapi.Request) -> RedirectResponse:\n+        \"\"\"Endpoint that handles the OAuth callback.\"\"\"\n+        request.session[\"oauth_profile\"] = MOCKED_OAUTH_TOKEN[\"userinfo\"]\n+        request.session[\"oauth_token\"] = MOCKED_OAUTH_TOKEN\n+        return RedirectResponse(\"/\")\n+\n+    @app.get(\"/logout\")\n+    async def oauth_logout(request: fastapi.Request) -> RedirectResponse:\n+        \"\"\"Endpoint that logs out the user (e.g. delete cookie session).\"\"\"\n+        request.session.pop(\"oauth_profile\", None)\n+        request.session.pop(\"oauth_token\", None)\n+        # \u6e05\u9664cookie\u5e76\u8df3\u8f6c\u5230\u9996\u9875\n+        response = RedirectResponse(url=\"/\", status_code=302)\n+        response.delete_cookie(key=f\"access-token\")\n+        response.delete_cookie(key=f\"access-token-unsecure\")\n+        return response\n+\n+\n+def reg_patch():\n+    gradio.oauth._add_mocked_oauth_routes = _add_mocked_oauth_routes\n+    gradio.oauth._add_oauth_routes = _add_oauth_routes\n+    logging.info(i18n(\"\u8986\u76d6gradio.oauth /logout\u8def\u7531\"))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3747cdbb95f9395146f29da7dcdc31c82cc23717",
            "date": "2024-12-12T14:54:00Z",
            "author_login": "GaiZhenbiao"
          },
          {
            "sha": "33869648f2a97759ec48cac475f7bc890b10e981",
            "date": "2024-11-16T06:20:15Z",
            "author_login": "Keldos-Li"
          },
          {
            "sha": "fb97fd65aee852248cfcf0d88f44e81304f58109",
            "date": "2024-11-13T16:17:40Z",
            "author_login": "Keldos-Li"
          },
          {
            "sha": "d1ca9f33c531ceaccd62dd73b819c9246c44813c",
            "date": "2024-11-13T16:08:51Z",
            "author_login": "Keldos-Li"
          },
          {
            "sha": "0752e6ec84434838de4cf00e6a38919a01cf0c33",
            "date": "2024-10-22T07:02:06Z",
            "author_login": "Keldos-Li"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-22",
    "description": "The gaizhenbiao/chuanhuchatgpt application is vulnerable to a path traversal attack due to its use of an outdated gradio component. The application is designed to restrict user access to resources within the `web_assets` folder. However, the outdated version of gradio it employs is susceptible to path traversal, as identified in CVE-2023-51449. This vulnerability allows unauthorized users to bypass the intended restrictions and access sensitive files, such as `config.json`, which contains API keys. The issue affects the latest version of chuanhuchatgpt prior to the fixed version released on 20240305.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-06T19:16:01.040",
    "last_modified": "2024-11-21T09:29:12.493",
    "fix_date": "2024-02-17T05:46:12Z"
  },
  "references": [
    {
      "url": "https://github.com/gaizhenbiao/chuanhuchatgpt/commit/6b8f7db347b390f6f8bd07ea2a4ef01a47382f00",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/277e3ff0-5878-4809-a4b9-73cdbb70dc9f",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gaizhenbiao/chuanhuchatgpt/commit/6b8f7db347b390f6f8bd07ea2a4ef01a47382f00",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/277e3ff0-5878-4809-a4b9-73cdbb70dc9f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.349782",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ChuanhuChatGPT",
    "owner": "gaizhenbiao",
    "created_at": "2023-03-02T13:37:13Z",
    "updated_at": "2025-01-14T08:24:11Z",
    "pushed_at": "2024-12-12T15:01:12Z",
    "size": 3223,
    "stars": 15343,
    "forks": 2288,
    "open_issues": 127,
    "watchers": 15343,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 433757,
      "JavaScript": 92092,
      "CSS": 63899,
      "HTML": 52103,
      "Shell": 1338,
      "Dockerfile": 1275,
      "Batchfile": 464
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:28:37.886262"
  }
}