{
  "cve_id": "CVE-2024-32465",
  "github_data": {
    "repository": "git/git",
    "fix_commit": "7b70e9efb18c2cc3f219af399bd384c5801ba1d7",
    "related_commits": [
      "7b70e9efb18c2cc3f219af399bd384c5801ba1d7",
      "7b70e9efb18c2cc3f219af399bd384c5801ba1d7"
    ],
    "patch_url": "https://github.com/git/git/commit/7b70e9efb18c2cc3f219af399bd384c5801ba1d7.patch",
    "fix_commit_details": {
      "sha": "7b70e9efb18c2cc3f219af399bd384c5801ba1d7",
      "commit_date": "2024-04-16T08:35:33Z",
      "author": {
        "login": "peff",
        "type": "User",
        "stats": {
          "total_commits": 4535,
          "average_weekly_commits": 4.398642095053346,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 717
        }
      },
      "commit_message": {
        "title": "upload-pack: disable lazy-fetching by default",
        "length": 4087,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 46,
        "additions": 46,
        "deletions": 0
      },
      "files": [
        {
          "filename": "Documentation/git-upload-pack.txt",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -55,6 +55,22 @@ ENVIRONMENT\n \tadmins may need to configure some transports to allow this\n \tvariable to be passed. See the discussion in linkgit:git[1].\n \n+`GIT_NO_LAZY_FETCH`::\n+\tWhen cloning or fetching from a partial repository (i.e., one\n+\titself cloned with `--filter`), the server-side `upload-pack`\n+\tmay need to fetch extra objects from its upstream in order to\n+\tcomplete the request. By default, `upload-pack` will refuse to\n+\tperform such a lazy fetch, because `git fetch` may run arbitrary\n+\tcommands specified in configuration and hooks of the source\n+\trepository (and `upload-pack` tries to be safe to run even in\n+\tuntrusted `.git` directories).\n++\n+This is implemented by having `upload-pack` internally set the\n+`GIT_NO_LAZY_FETCH` variable to `1`. If you want to override it\n+(because you are fetching from a partial clone, and you are sure\n+you trust it), you can explicitly set `GIT_NO_LAZY_FETCH` to\n+`0`.\n+\n SEE ALSO\n --------\n linkgit:gitnamespaces[7]"
        },
        {
          "filename": "builtin/upload-pack.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -35,6 +35,8 @@ int cmd_upload_pack(int argc, const char **argv, const char *prefix)\n \n \tpacket_trace_identity(\"upload-pack\");\n \tread_replace_refs = 0;\n+\t/* TODO: This should use NO_LAZY_FETCH_ENVIRONMENT */\n+\txsetenv(\"GIT_NO_LAZY_FETCH\", \"1\", 0);\n \n \targc = parse_options(argc, argv, prefix, options, upload_pack_usage, 0);\n "
        },
        {
          "filename": "promisor-remote.c",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -20,6 +20,16 @@ static int fetch_objects(struct repository *repo,\n \tint i;\n \tFILE *child_in;\n \n+\t/* TODO: This should use NO_LAZY_FETCH_ENVIRONMENT */\n+\tif (git_env_bool(\"GIT_NO_LAZY_FETCH\", 0)) {\n+\t\tstatic int warning_shown;\n+\t\tif (!warning_shown) {\n+\t\t\twarning_shown = 1;\n+\t\t\twarning(_(\"lazy fetching disabled; some objects may not be available\"));\n+\t\t}\n+\t\treturn -1;\n+\t}\n+\n \tchild.git_cmd = 1;\n \tchild.in = -1;\n \tif (repo != the_repository)"
        },
        {
          "filename": "t/t0411-clone-from-partial.sh",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ test_expect_success 'local clone must not fetch from promisor remote and execute\n \ttest_must_fail git clone \\\n \t\t--upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\\n \t\tevil clone1 2>err &&\n+\tgrep \"detected dubious ownership\" err &&\n \t! grep \"fake-upload-pack running\" err &&\n \ttest_path_is_missing script-executed\n '\n@@ -37,6 +38,7 @@ test_expect_success 'clone from file://... must not fetch from promisor remote a\n \ttest_must_fail git clone \\\n \t\t--upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\\n \t\t\"file://$(pwd)/evil\" clone2 2>err &&\n+\tgrep \"detected dubious ownership\" err &&\n \t! grep \"fake-upload-pack running\" err &&\n \ttest_path_is_missing script-executed\n '\n@@ -46,6 +48,7 @@ test_expect_success 'fetch from file://... must not fetch from promisor remote a\n \ttest_must_fail git fetch \\\n \t\t--upload-pack=\"GIT_TEST_ASSUME_DIFFERENT_OWNER=true git-upload-pack\" \\\n \t\t\"file://$(pwd)/evil\" 2>err &&\n+\tgrep \"detected dubious ownership\" err &&\n \t! grep \"fake-upload-pack running\" err &&\n \ttest_path_is_missing script-executed\n '\n@@ -57,4 +60,19 @@ test_expect_success 'pack-objects should fetch from promisor remote and execute\n \ttest_path_is_file script-executed\n '\n \n+test_expect_success 'clone from promisor remote does not lazy-fetch by default' '\n+\trm -f script-executed &&\n+\ttest_must_fail git clone evil no-lazy 2>err &&\n+\tgrep \"lazy fetching disabled\" err &&\n+\ttest_path_is_missing script-executed\n+'\n+\n+test_expect_success 'promisor lazy-fetching can be re-enabled' '\n+\trm -f script-executed &&\n+\ttest_must_fail env GIT_NO_LAZY_FETCH=0 \\\n+\t\tgit clone evil lazy-ok 2>err &&\n+\tgrep \"fake-upload-pack running\" err &&\n+\ttest_path_is_file script-executed\n+'\n+\n test_done"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "757161efcca150a9a96b312d9e780a071e601a03",
            "date": "2025-01-13T21:02:01Z",
            "author_login": "gitster"
          },
          {
            "sha": "46afc2ba91a3c7fa8f1591c0a6a1b7c4ad0d2a07",
            "date": "2025-01-13T21:00:48Z",
            "author_login": "gitster"
          },
          {
            "sha": "f93ff170b93a1782659637824b25923245ac9dd1",
            "date": "2025-01-13T20:57:19Z",
            "author_login": "gitster"
          },
          {
            "sha": "65faad6d841c29d4545e9cf3676d75f4e6e4872c",
            "date": "2025-01-13T20:55:26Z",
            "author_login": "gitster"
          },
          {
            "sha": "fbe8d3079d4a96aeb4e4529cc93cc0043b759a05",
            "date": "2025-01-10T17:20:20Z",
            "author_login": "gitster"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:P/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-22",
    "description": "Git is a revision control system. The Git project recommends to avoid working in untrusted repositories, and instead to clone it first with `git clone --no-local` to obtain a clean copy. Git has specific protections to make that a safe operation even with an untrusted source repository, but vulnerabilities allow those protections to be bypassed. In the context of cloning local repositories owned by other users, this vulnerability has been covered in CVE-2024-32004. But there are circumstances where the fixes for CVE-2024-32004 are not enough: For example, when obtaining a `.zip` file containing a full copy of a Git repository, it should not be trusted by default to be safe, as e.g. hooks could be configured to run within the context of that repository. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid using Git in repositories that have been obtained via archives from untrusted sources.",
    "attack_vector": "PHYSICAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-14T20:15:14.540",
    "last_modified": "2024-11-21T09:14:58.253",
    "fix_date": "2024-04-16T08:35:33Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/05/14/2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git#_security",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git-clone",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/commit/7b70e9efb18c2cc3f219af399bd384c5801ba1d7",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-vm9j-46j9-qvq4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00018.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S4CK4IYTXEOBZTEM5K3T6LWOIZ3S44AR/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2024/05/14/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git#_security",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://git-scm.com/docs/git-clone",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/commit/7b70e9efb18c2cc3f219af399bd384c5801ba1d7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-vm9j-46j9-qvq4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00018.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S4CK4IYTXEOBZTEM5K3T6LWOIZ3S44AR/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.915445",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "git",
    "owner": "git",
    "created_at": "2008-07-23T14:21:26Z",
    "updated_at": "2025-01-14T14:01:56Z",
    "pushed_at": "2025-01-13T19:45:30Z",
    "size": 271691,
    "stars": 53164,
    "forks": 25796,
    "open_issues": 201,
    "watchers": 53164,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 11381600,
      "Shell": 8590199,
      "Perl": 1166701,
      "Tcl": 852369,
      "Python": 183463,
      "Makefile": 168746,
      "Meson": 106388,
      "JavaScript": 49713,
      "CMake": 46584,
      "M4": 38265,
      "Roff": 26859,
      "C++": 26403,
      "SmPL": 15676,
      "Go": 15064,
      "CSS": 10664,
      "Batchfile": 9822,
      "Emacs Lisp": 660,
      "PowerShell": 478,
      "ReScript": 92
    },
    "commit_activity": {
      "total_commits_last_year": 3693,
      "avg_commits_per_week": 71.01923076923077,
      "days_active_last_year": 312
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:39:36.932072"
  }
}