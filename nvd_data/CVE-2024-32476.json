{
  "cve_id": "CVE-2024-32476",
  "github_data": {
    "repository": "argoproj/argo-cd",
    "fix_commit": "7893979a1e78d59cedd0ba790ded24e30bb40657",
    "related_commits": [
      "7893979a1e78d59cedd0ba790ded24e30bb40657",
      "9e5cc5a26ff0920a01816231d59fdb5eae032b5a",
      "e2df7315fb7d96652186bf7435773a27be330cac",
      "7893979a1e78d59cedd0ba790ded24e30bb40657",
      "9e5cc5a26ff0920a01816231d59fdb5eae032b5a",
      "e2df7315fb7d96652186bf7435773a27be330cac"
    ],
    "patch_url": "https://github.com/argoproj/argo-cd/commit/7893979a1e78d59cedd0ba790ded24e30bb40657.patch",
    "fix_commit_details": {
      "sha": "7893979a1e78d59cedd0ba790ded24e30bb40657",
      "commit_date": "2024-04-26T09:24:02Z",
      "author": {
        "login": "pasha-codefresh",
        "type": "User",
        "stats": {
          "total_commits": 261,
          "average_weekly_commits": 0.7209944751381215,
          "total_additions": 223909,
          "total_deletions": 165744,
          "weeks_active": 88
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9m6p-x4h2-6frq",
        "length": 685,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 207,
        "additions": 161,
        "deletions": 46
      },
      "files": [
        {
          "filename": "applicationset/controllers/applicationset_controller.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -42,6 +42,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/applicationset/generators\"\n \t\"github.com/argoproj/argo-cd/v2/applicationset/utils\"\n \t\"github.com/argoproj/argo-cd/v2/common\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \t\"github.com/argoproj/argo-cd/v2/util/db\"\n \t\"github.com/argoproj/argo-cd/v2/util/glob\"\n \n@@ -609,7 +610,7 @@ func (r *ApplicationSetReconciler) createOrUpdateInCluster(ctx context.Context,\n \t\t\t},\n \t\t}\n \n-\t\taction, err := utils.CreateOrUpdate(ctx, r.Client, found, func() error {\n+\t\taction, err := utils.CreateOrUpdate(ctx, r.Client, found, normalizers.IgnoreNormalizerOpts{}, func() error {\n \t\t\t// Copy only the Application/ObjectMeta fields that are significant, from the generatedApp\n \t\t\tfound.Spec = generatedApp.Spec\n "
        },
        {
          "filename": "applicationset/utils/createOrUpdate.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -14,6 +14,7 @@ import (\n \t\"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil\"\n \n \targov1alpha1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n )\n \n // CreateOrUpdate overrides \"sigs.k8s.io/controller-runtime\" function\n@@ -29,7 +30,7 @@ import (\n // The MutateFn is called regardless of creating or updating an object.\n //\n // It returns the executed operation and an error.\n-func CreateOrUpdate(ctx context.Context, c client.Client, obj client.Object, f controllerutil.MutateFn) (controllerutil.OperationResult, error) {\n+func CreateOrUpdate(ctx context.Context, c client.Client, obj client.Object, ignoreNormalizerOpts normalizers.IgnoreNormalizerOpts, f controllerutil.MutateFn) (controllerutil.OperationResult, error) {\n \n \tkey := client.ObjectKeyFromObject(obj)\n \tif err := c.Get(ctx, key, obj); err != nil {\n@@ -94,4 +95,4 @@ func mutate(f controllerutil.MutateFn, key client.ObjectKey, obj client.Object)\n \t\treturn fmt.Errorf(\"MutateFn cannot mutate object name and/or object namespace\")\n \t}\n \treturn nil\n-}\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "cmd/argocd-application-controller/commands/argocd_application_controller.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n \tappclientset \"github.com/argoproj/argo-cd/v2/pkg/client/clientset/versioned\"\n \t\"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \tcacheutil \"github.com/argoproj/argo-cd/v2/util/cache\"\n \tappstatecache \"github.com/argoproj/argo-cd/v2/util/cache/appstate\"\n \t\"github.com/argoproj/argo-cd/v2/util/cli\"\n@@ -64,6 +65,7 @@ func NewCommand() *cobra.Command {\n \t\tapplicationNamespaces    []string\n \t\tpersistResourceHealth    bool\n \t\tshardingAlgorithm        string\n+\t\tignoreNormalizerOpts             normalizers.IgnoreNormalizerOpts\n \t)\n \tvar command = cobra.Command{\n \t\tUse:               cliName,\n@@ -155,6 +157,7 @@ func NewCommand() *cobra.Command {\n \t\t\t\tpersistResourceHealth,\n \t\t\t\tclusterFilter,\n \t\t\t\tapplicationNamespaces,\n+\t\t\t\tignoreNormalizerOpts,\n \t\t\t)\n \t\t\terrors.CheckError(err)\n \t\t\tcacheutil.CollectMetrics(redisClient, appController.GetMetricsServer())\n@@ -199,6 +202,7 @@ func NewCommand() *cobra.Command {\n \tcommand.Flags().StringSliceVar(&applicationNamespaces, \"application-namespaces\", env.StringsFromEnv(\"ARGOCD_APPLICATION_NAMESPACES\", []string{}, \",\"), \"List of additional namespaces that applications are allowed to be reconciled from\")\n \tcommand.Flags().BoolVar(&persistResourceHealth, \"persist-resource-health\", env.ParseBoolFromEnv(\"ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH\", true), \"Enables storing the managed resources health in the Application CRD\")\n \tcommand.Flags().StringVar(&shardingAlgorithm, \"sharding-method\", env.StringFromEnv(common.EnvControllerShardingAlgorithm, common.DefaultShardingAlgorithm), \"Enables choice of sharding method. Supported sharding methods are : [legacy, round-robin] \")\n+\tcommand.Flags().DurationVar(&ignoreNormalizerOpts.JQExecutionTimeout, \"\", env.ParseDurationFromEnv(\"ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT\", 0*time.Second, 0, math.MaxInt64), \"Set ignore normalizer JQ execution timeout\")\n \tcacheSrc = appstatecache.AddCacheFlagsToCmd(&command, func(client *redis.Client) {\n \t\tredisClient = client\n \t})"
        },
        {
          "filename": "cmd/argocd/commands/admin/app.go",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -28,6 +28,7 @@ import (\n \tappinformers \"github.com/argoproj/argo-cd/v2/pkg/client/informers/externalversions\"\n \targocdclient \"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \tcacheutil \"github.com/argoproj/argo-cd/v2/util/cache\"\n \tappstatecache \"github.com/argoproj/argo-cd/v2/util/cache/appstate\"\n \t\"github.com/argoproj/argo-cd/v2/util/cli\"\n@@ -231,6 +232,7 @@ func NewReconcileCommand() *cobra.Command {\n \t\trepoServerAddress string\n \t\toutputFormat      string\n \t\trefresh           bool\n+\t\tignoreNormalizerOpts normalizers.IgnoreNormalizerOpts\n \t)\n \n \tvar command = &cobra.Command{\n@@ -267,7 +269,7 @@ func NewReconcileCommand() *cobra.Command {\n \n \t\t\t\tappClientset := appclientset.NewForConfigOrDie(cfg)\n \t\t\t\tkubeClientset := kubernetes.NewForConfigOrDie(cfg)\n-\t\t\t\tresult, err = reconcileApplications(ctx, kubeClientset, appClientset, namespace, repoServerClient, selector, newLiveStateCache)\n+\t\t\t\tresult, err = reconcileApplications(ctx, kubeClientset, appClientset, namespace, repoServerClient, selector, newLiveStateCache, ignoreNormalizerOpts)\n \t\t\t\terrors.CheckError(err)\n \t\t\t} else {\n \t\t\t\tappClientset := appclientset.NewForConfigOrDie(cfg)\n@@ -282,7 +284,7 @@ func NewReconcileCommand() *cobra.Command {\n \tcommand.Flags().StringVar(&selector, \"l\", \"\", \"Label selector\")\n \tcommand.Flags().StringVar(&outputFormat, \"o\", \"yaml\", \"Output format (yaml|json)\")\n \tcommand.Flags().BoolVar(&refresh, \"refresh\", false, \"If set to true then recalculates apps reconciliation\")\n-\n+\tcommand.Flags().DurationVar(&ignoreNormalizerOpts.JQExecutionTimeout, \"ignore-normalizer-jq-execution-timeout\", normalizers.DefaultJQExecutionTimeout, \"Set ignore normalizer JQ execution timeout\")\n \treturn command\n }\n \n@@ -331,6 +333,7 @@ func reconcileApplications(\n \trepoServerClient argocdclient.Clientset,\n \tselector string,\n \tcreateLiveStateCache func(argoDB db.ArgoDB, appInformer kubecache.SharedIndexInformer, settingsMgr *settings.SettingsManager, server *metrics.MetricsServer) cache.LiveStateCache,\n+\tignoreNormalizerOpts normalizers.IgnoreNormalizerOpts,\n ) ([]appReconcileResult, error) {\n \tsettingsMgr := settings.NewSettingsManager(ctx, kubeClientset, namespace)\n \targoDB := db.NewDB(namespace, settingsMgr, kubeClientset)\n@@ -371,7 +374,7 @@ func reconcileApplications(\n \t)\n \n \tappStateManager := controller.NewAppStateManager(\n-\t\targoDB, appClientset, repoServerClient, namespace, kubeutil.NewKubectl(), settingsMgr, stateCache, projInformer, server, cache, time.Second, argo.NewResourceTracking(), false)\n+\t\targoDB, appClientset, repoServerClient, namespace, kubeutil.NewKubectl(), settingsMgr, stateCache, projInformer, server, cache, time.Second, argo.NewResourceTracking(), false, ignoreNormalizerOpts)\n \n \tappsList, err := appClientset.ArgoprojV1alpha1().Applications(namespace).List(ctx, v1.ListOptions{LabelSelector: selector})\n \tif err != nil {"
        },
        {
          "filename": "cmd/argocd/commands/admin/app_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@ import (\n \targocdclient \"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"\n \t\"github.com/argoproj/argo-cd/v2/reposerver/apiclient/mocks\"\n \t\"github.com/argoproj/argo-cd/v2/test\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \t\"github.com/argoproj/argo-cd/v2/util/db\"\n \t\"github.com/argoproj/argo-cd/v2/util/settings\"\n )\n@@ -113,6 +114,7 @@ func TestGetReconcileResults_Refresh(t *testing.T) {\n \t\tfunc(argoDB db.ArgoDB, appInformer cache.SharedIndexInformer, settingsMgr *settings.SettingsManager, server *metrics.MetricsServer) statecache.LiveStateCache {\n \t\t\treturn &liveStateCache\n \t\t},\n+\t\tnormalizers.IgnoreNormalizerOpts{},\n \t)\n \n \tif !assert.NoError(t, err) {"
        },
        {
          "filename": "cmd/argocd/commands/admin/settings.go",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -432,7 +432,7 @@ argocd admin settings resource-overrides ignore-differences ./deploy.yaml --argo\n \t\t\t\t// configurations. This requires access to live resources which is not the\n \t\t\t\t// purpose of this command. This will just apply jsonPointers and\n \t\t\t\t// jqPathExpressions configurations.\n-\t\t\t\tnormalizer, err := normalizers.NewIgnoreNormalizer(nil, overrides)\n+\t\t\t\tnormalizer, err := normalizers.NewIgnoreNormalizer(nil, overrides, normalizers.IgnoreNormalizerOpts{})\n \t\t\t\terrors.CheckError(err)\n \n \t\t\t\tnormalizedRes := res.DeepCopy()\n@@ -457,6 +457,9 @@ argocd admin settings resource-overrides ignore-differences ./deploy.yaml --argo\n }\n \n func NewResourceIgnoreResourceUpdatesCommand(cmdCtx commandContext) *cobra.Command {\n+\tvar (\n+\t\tignoreNormalizerOpts normalizers.IgnoreNormalizerOpts\n+\t)\n \tvar command = &cobra.Command{\n \t\tUse:   \"ignore-resource-updates RESOURCE_YAML_PATH\",\n \t\tShort: \"Renders fields excluded from resource updates\",\n@@ -478,7 +481,7 @@ argocd admin settings resource-overrides ignore-resource-updates ./deploy.yaml -\n \t\t\t\t\treturn\n \t\t\t\t}\n \n-\t\t\t\tnormalizer, err := normalizers.NewIgnoreNormalizer(nil, overrides)\n+\t\t\t\tnormalizer, err := normalizers.NewIgnoreNormalizer(nil, overrides, ignoreNormalizerOpts)\n \t\t\t\terrors.CheckError(err)\n \n \t\t\t\tnormalizedRes := res.DeepCopy()\n@@ -499,6 +502,7 @@ argocd admin settings resource-overrides ignore-resource-updates ./deploy.yaml -\n \t\t\t})\n \t\t},\n \t}\n+\tcommand.Flags().DurationVar(&ignoreNormalizerOpts.JQExecutionTimeout, \"ignore-normalizer-jq-execution-timeout\", normalizers.DefaultJQExecutionTimeout, \"Set ignore normalizer JQ execution timeout\")\n \treturn command\n }\n "
        },
        {
          "filename": "cmd/argocd/commands/app.go",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -44,6 +44,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/reposerver/repository\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo\"\n \targodiff \"github.com/argoproj/argo-cd/v2/util/argo/diff\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \t\"github.com/argoproj/argo-cd/v2/util/cli\"\n \t\"github.com/argoproj/argo-cd/v2/util/errors\"\n \t\"github.com/argoproj/argo-cd/v2/util/git\"\n@@ -925,6 +926,7 @@ func NewApplicationDiffCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n \t\tlocalRepoRoot      string\n \t\tserverSideGenerate bool\n \t\tlocalIncludes      []string\n+\t\tignoreNormalizerOpts normalizers.IgnoreNormalizerOpts\n \t)\n \tshortDesc := \"Perform a diff against the target and live state.\"\n \tvar command = &cobra.Command{\n@@ -989,7 +991,7 @@ func NewApplicationDiffCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n \t\t\t\t\tdiffOption.cluster = cluster\n \t\t\t\t}\n \t\t\t}\n-\t\t\tfoundDiffs := findandPrintDiff(ctx, app, resources, argoSettings, diffOption)\n+\t\t\tfoundDiffs := findandPrintDiff(ctx, app, resources, argoSettings, diffOption, ignoreNormalizerOpts)\n \t\t\tif foundDiffs && exitCode {\n \t\t\t\tos.Exit(1)\n \t\t\t}\n@@ -1003,6 +1005,7 @@ func NewApplicationDiffCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n \tcommand.Flags().StringVar(&localRepoRoot, \"local-repo-root\", \"/\", \"Path to the repository root. Used together with --local allows setting the repository root\")\n \tcommand.Flags().BoolVar(&serverSideGenerate, \"server-side-generate\", false, \"Used with --local, this will send your manifests to the server for diffing\")\n \tcommand.Flags().StringArrayVar(&localIncludes, \"local-include\", []string{\"*.yaml\", \"*.yml\", \"*.json\"}, \"Used with --server-side-generate, specify patterns of filenames to send. Matching is based on filename and not path.\")\n+\tcommand.Flags().DurationVar(&ignoreNormalizerOpts.JQExecutionTimeout, \"ignore-normalizer-jq-execution-timeout\", normalizers.DefaultJQExecutionTimeout, \"Set ignore normalizer JQ execution timeout\")\n \treturn command\n }\n \n@@ -1017,7 +1020,7 @@ type DifferenceOption struct {\n }\n \n // findandPrintDiff ... Prints difference between application current state and state stored in git or locally, returns boolean as true if difference is found else returns false\n-func findandPrintDiff(ctx context.Context, app *argoappv1.Application, resources *application.ManagedResourcesResponse, argoSettings *settings.Settings, diffOptions *DifferenceOption) bool {\n+func findandPrintDiff(ctx context.Context, app *argoappv1.Application, resources *application.ManagedResourcesResponse, argoSettings *settings.Settings, diffOptions *DifferenceOption, ignoreNormalizerOpts normalizers.IgnoreNormalizerOpts) bool {\n \tvar foundDiffs bool\n \tliveObjs, err := cmdutil.LiveObjects(resources.Items)\n \terrors.CheckError(err)\n@@ -1072,7 +1075,7 @@ func findandPrintDiff(ctx context.Context, app *argoappv1.Application, resources\n \t\t// compareOptions in the protobuf\n \t\tignoreAggregatedRoles := false\n \t\tdiffConfig, err := argodiff.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(app.Spec.IgnoreDifferences, overrides, ignoreAggregatedRoles).\n+\t\t\tWithDiffSettings(app.Spec.IgnoreDifferences, overrides, ignoreAggregatedRoles, ignoreNormalizerOpts).\n \t\t\tWithTracking(argoSettings.AppLabelKey, argoSettings.TrackingMethod).\n \t\t\tWithNoCache().\n \t\t\tBuild()\n@@ -1543,6 +1546,7 @@ func NewApplicationSyncCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n \t\tdiffChanges             bool\n \t\tdiffChangesConfirm      bool\n \t\tprojects                []string\n+\t\tignoreNormalizerOpts    normalizers.IgnoreNormalizerOpts\n \t)\n \tvar command = &cobra.Command{\n \t\tUse:   \"sync [APPNAME... | -l selector | --project project-name]\",\n@@ -1764,7 +1768,7 @@ func NewApplicationSyncCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n \t\t\t\t\tfoundDiffs := false\n \t\t\t\t\tfmt.Printf(\"====== Previewing differences between live and desired state of application %s ======\\n\", appQualifiedName)\n \n-\t\t\t\t\tfoundDiffs = findandPrintDiff(ctx, app, resources, argoSettings, diffOption)\n+\t\t\t\t\tfoundDiffs = findandPrintDiff(ctx, app, resources, argoSettings, diffOption, ignoreNormalizerOpts)\n \t\t\t\t\tif foundDiffs {\n \t\t\t\t\t\tif !diffChangesConfirm {\n \t\t\t\t\t\t\tyesno := cli.AskToProceed(fmt.Sprintf(\"Please review changes to application %s shown above. Do you want to continue the sync process? (y/n): \", appQualifiedName))\n@@ -1820,6 +1824,7 @@ func NewApplicationSyncCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n \tcommand.Flags().BoolVar(&diffChangesConfirm, \"assumeYes\", false, \"Assume yes as answer for all user queries or prompts\")\n \tcommand.Flags().BoolVar(&diffChanges, \"preview-changes\", false, \"Preview difference against the target and live state before syncing app and wait for user confirmation\")\n \tcommand.Flags().StringArrayVar(&projects, \"project\", []string{}, \"Sync apps that belong to the specified projects. This option may be specified repeatedly.\")\n+\tcommand.Flags().DurationVar(&ignoreNormalizerOpts.JQExecutionTimeout, \"ignore-normalizer-jq-execution-timeout\", normalizers.DefaultJQExecutionTimeout, \"Set ignore normalizer JQ execution timeout\")\n \treturn command\n }\n "
        },
        {
          "filename": "controller/appcontroller.go",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -51,6 +51,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo\"\n \targodiff \"github.com/argoproj/argo-cd/v2/util/argo/diff\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \n \tappstatecache \"github.com/argoproj/argo-cd/v2/util/cache/appstate\"\n \t\"github.com/argoproj/argo-cd/v2/util/db\"\n@@ -120,6 +121,7 @@ type ApplicationController struct {\n \tclusterFilter                 func(cluster *appv1.Cluster) bool\n \tprojByNameCache               sync.Map\n \tapplicationNamespaces         []string\n+\tignoreNormalizerOpts          normalizers.IgnoreNormalizerOpts\n }\n \n // NewApplicationController creates new instance of ApplicationController.\n@@ -141,6 +143,7 @@ func NewApplicationController(\n \tpersistResourceHealth bool,\n \tclusterFilter func(cluster *appv1.Cluster) bool,\n \tapplicationNamespaces []string,\n+\tignoreNormalizerOpts normalizers.IgnoreNormalizerOpts,\n ) (*ApplicationController, error) {\n \tlog.Infof(\"appResyncPeriod=%v, appHardResyncPeriod=%v\", appResyncPeriod, appHardResyncPeriod)\n \tdb := db.NewDB(namespace, settingsMgr, kubeClientset)\n@@ -166,6 +169,7 @@ func NewApplicationController(\n \t\tclusterFilter:                 clusterFilter,\n \t\tprojByNameCache:               sync.Map{},\n \t\tapplicationNamespaces:         applicationNamespaces,\n+\t\tignoreNormalizerOpts:              ignoreNormalizerOpts,\n \t}\n \tif kubectlParallelismLimit > 0 {\n \t\tctrl.kubectlSemaphore = semaphore.NewWeighted(kubectlParallelismLimit)\n@@ -216,7 +220,7 @@ func NewApplicationController(\n \t\t}\n \t}\n \tstateCache := statecache.NewLiveStateCache(db, appInformer, ctrl.settingsMgr, kubectl, ctrl.metricsServer, ctrl.handleObjectUpdated, clusterFilter, argo.NewResourceTracking())\n-\tappStateManager := NewAppStateManager(db, applicationClientset, repoClientset, namespace, kubectl, ctrl.settingsMgr, stateCache, projInformer, ctrl.metricsServer, argoCache, ctrl.statusRefreshTimeout, argo.NewResourceTracking(), persistResourceHealth)\n+\tappStateManager := NewAppStateManager(db, applicationClientset, repoClientset, namespace, kubectl, ctrl.settingsMgr, stateCache, projInformer, ctrl.metricsServer, argoCache, ctrl.statusRefreshTimeout, argo.NewResourceTracking(), persistResourceHealth, ignoreNormalizerOpts)\n \tctrl.appInformer = appInformer\n \tctrl.appLister = appLister\n \tctrl.projInformer = projInformer\n@@ -666,7 +670,7 @@ func (ctrl *ApplicationController) hideSecretData(app *appv1.Application, compar\n \t\t\t\treturn nil, fmt.Errorf(\"error getting cluster cache: %s\", err)\n \t\t\t}\n \t\t\tdiffConfig, err := argodiff.NewDiffConfigBuilder().\n-\t\t\t\tWithDiffSettings(app.Spec.IgnoreDifferences, resourceOverrides, compareOptions.IgnoreAggregatedRoles).\n+\t\t\t\tWithDiffSettings(app.Spec.IgnoreDifferences, resourceOverrides, compareOptions.IgnoreAggregatedRoles, ctrl.ignoreNormalizerOpts).\n \t\t\t\tWithTracking(appLabelKey, trackingMethod).\n \t\t\t\tWithNoCache().\n \t\t\t\tWithLogger(logutils.NewLogrusLogger(logutils.NewWithCurrentConfig()))."
        },
        {
          "filename": "controller/appcontroller_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -38,6 +38,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"\n \tmockrepoclient \"github.com/argoproj/argo-cd/v2/reposerver/apiclient/mocks\"\n \t\"github.com/argoproj/argo-cd/v2/test\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \tcacheutil \"github.com/argoproj/argo-cd/v2/util/cache\"\n \tappstatecache \"github.com/argoproj/argo-cd/v2/util/cache/appstate\"\n \t\"github.com/argoproj/argo-cd/v2/util/settings\"\n@@ -123,6 +124,7 @@ func newFakeController(data *fakeData) *ApplicationController {\n \t\ttrue,\n \t\tnil,\n \t\tdata.applicationNamespaces,\n+\t\tnormalizers.IgnoreNormalizerOpts{},\n \t)\n \tif err != nil {\n \t\tpanic(err)"
        },
        {
          "filename": "controller/cache/cache.go",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -32,6 +32,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/pkg/apis/application\"\n \tappv1 \"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \t\"github.com/argoproj/argo-cd/v2/util/db\"\n \t\"github.com/argoproj/argo-cd/v2/util/env\"\n \tlogutils \"github.com/argoproj/argo-cd/v2/util/log\"\n@@ -197,6 +198,7 @@ type liveStateCache struct {\n \tmetricsServer    *metrics.MetricsServer\n \tclusterFilter    func(cluster *appv1.Cluster) bool\n \tresourceTracking argo.ResourceTracking\n+\tignoreNormalizerOpts normalizers.IgnoreNormalizerOpts\n \n \tclusters      map[string]clustercache.ClusterCache\n \tcacheSettings cacheSettings\n@@ -473,7 +475,7 @@ func (c *liveStateCache) getCluster(server string) (clustercache.ClusterCache, e\n \t\t\tgvk := un.GroupVersionKind()\n \n \t\t\tif cacheSettings.ignoreResourceUpdatesEnabled && shouldHashManifest(appName, gvk) {\n-\t\t\t\thash, err := generateManifestHash(un, nil, cacheSettings.resourceOverrides)\n+\t\t\t\thash, err := generateManifestHash(un, nil, cacheSettings.resourceOverrides, c.ignoreNormalizerOpts)\n \t\t\t\tif err != nil {\n \t\t\t\t\tlog.Errorf(\"Failed to generate manifest hash: %v\", err)\n \t\t\t\t} else {"
        },
        {
          "filename": "controller/cache/info.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -390,8 +390,8 @@ func populateHostNodeInfo(un *unstructured.Unstructured, res *ResourceInfo) {\n \t}\n }\n \n-func generateManifestHash(un *unstructured.Unstructured, ignores []v1alpha1.ResourceIgnoreDifferences, overrides map[string]v1alpha1.ResourceOverride) (string, error) {\n-\tnormalizer, err := normalizers.NewIgnoreNormalizer(ignores, overrides)\n+func generateManifestHash(un *unstructured.Unstructured, ignores []v1alpha1.ResourceIgnoreDifferences, overrides map[string]v1alpha1.ResourceOverride, opts normalizers.IgnoreNormalizerOpts) (string, error) {\n+\tnormalizer, err := normalizers.NewIgnoreNormalizer(ignores, overrides, opts)\n \tif err != nil {\n \t\treturn \"\", fmt.Errorf(\"error creating normalizer: %w\", err)\n \t}"
        },
        {
          "filename": "controller/cache/info_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -16,6 +16,7 @@ import (\n \t\"sigs.k8s.io/yaml\"\n \n \t\"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n )\n \n func strToUnstructured(jsonStr string) *unstructured.Unstructured {\n@@ -749,7 +750,7 @@ func TestManifestHash(t *testing.T) {\n \n \texpected := hash(data)\n \n-\thash, err := generateManifestHash(manifest, ignores, nil)\n+\thash, err := generateManifestHash(manifest, ignores, nil, normalizers.IgnoreNormalizerOpts{})\n \tassert.Equal(t, expected, hash)\n \tassert.Nil(t, err)\n }"
        },
        {
          "filename": "controller/state.go",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -4,11 +4,12 @@ import (\n \t\"context\"\n \t\"encoding/json\"\n \t\"fmt\"\n-\tv1 \"k8s.io/api/core/v1\"\n \t\"reflect\"\n \t\"strings\"\n \t\"time\"\n \n+\tv1 \"k8s.io/api/core/v1\"\n+\t\n \t\"github.com/argoproj/gitops-engine/pkg/diff\"\n \t\"github.com/argoproj/gitops-engine/pkg/health\"\n \t\"github.com/argoproj/gitops-engine/pkg/sync\"\n@@ -32,6 +33,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo\"\n \targodiff \"github.com/argoproj/argo-cd/v2/util/argo/diff\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \tappstatecache \"github.com/argoproj/argo-cd/v2/util/cache/appstate\"\n \t\"github.com/argoproj/argo-cd/v2/util/db\"\n \t\"github.com/argoproj/argo-cd/v2/util/gpg\"\n@@ -105,6 +107,7 @@ type appStateManager struct {\n \tstatusRefreshTimeout  time.Duration\n \tresourceTracking      argo.ResourceTracking\n \tpersistResourceHealth bool\n+\tignoreNormalizerOpts  normalizers.IgnoreNormalizerOpts\n }\n \n func (m *appStateManager) getRepoObjs(app *v1alpha1.Application, sources []v1alpha1.ApplicationSource, appLabelKey string, revisions []string, noCache, noRevisionCache, verifySignature bool, proj *v1alpha1.AppProject) ([]*unstructured.Unstructured, []*apiclient.ManifestResponse, error) {\n@@ -564,7 +567,7 @@ func (m *appStateManager) CompareAppState(app *v1alpha1.Application, project *v1\n \tnoCache = noCache || refreshRequested || app.Status.Expired(m.statusRefreshTimeout) || specChanged || revisionChanged\n \n \tdiffConfigBuilder := argodiff.NewDiffConfigBuilder().\n-\t\tWithDiffSettings(app.Spec.IgnoreDifferences, resourceOverrides, compareOptions.IgnoreAggregatedRoles).\n+\t\tWithDiffSettings(app.Spec.IgnoreDifferences, resourceOverrides, compareOptions.IgnoreAggregatedRoles, m.ignoreNormalizerOpts).\n \t\tWithTracking(appLabelKey, string(trackingMethod))\n \n \tif noCache {\n@@ -830,6 +833,7 @@ func NewAppStateManager(\n \tstatusRefreshTimeout time.Duration,\n \tresourceTracking argo.ResourceTracking,\n \tpersistResourceHealth bool,\n+\tignoreNormalizerOpts normalizers.IgnoreNormalizerOpts,\n ) AppStateManager {\n \treturn &appStateManager{\n \t\tliveStateCache:        liveStateCache,\n@@ -845,6 +849,7 @@ func NewAppStateManager(\n \t\tstatusRefreshTimeout:  statusRefreshTimeout,\n \t\tresourceTracking:      resourceTracking,\n \t\tpersistResourceHealth: persistResourceHealth,\n+\t\tignoreNormalizerOpts:  ignoreNormalizerOpts,\n \t}\n }\n "
        },
        {
          "filename": "controller/sync_test.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -19,6 +19,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/reposerver/apiclient\"\n \t\"github.com/argoproj/argo-cd/v2/test\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo/diff\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n )\n \n func TestPersistRevisionHistory(t *testing.T) {\n@@ -263,7 +264,7 @@ func TestNormalizeTargetResources(t *testing.T) {\n \tsetup := func(t *testing.T, ignores []v1alpha1.ResourceIgnoreDifferences) *fixture {\n \t\tt.Helper()\n \t\tdc, err := diff.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(ignores, nil, true).\n+\t\t\tWithDiffSettings(ignores, nil, true, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithNoCache().\n \t\t\tBuild()\n \t\trequire.NoError(t, err)\n@@ -396,7 +397,7 @@ func TestNormalizeTargetResourcesWithList(t *testing.T) {\n \tsetupHttpProxy := func(t *testing.T, ignores []v1alpha1.ResourceIgnoreDifferences) *fixture {\n \t\tt.Helper()\n \t\tdc, err := diff.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(ignores, nil, true).\n+\t\t\tWithDiffSettings(ignores, nil, true, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithNoCache().\n \t\t\tBuild()\n \t\trequire.NoError(t, err)"
        },
        {
          "filename": "docs/user-guide/diffing.md",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -182,3 +182,16 @@ data:\n ```\n \n The list of supported Kubernetes types is available in [diffing_known_types.txt](https://raw.githubusercontent.com/argoproj/argo-cd/master/util/argo/normalizers/diffing_known_types.txt)\n+\n+\n+### JQ Path expression timeout\n+\n+By default, the evaluation of a JQPathExpression is limited to one second. If you encounter a \"JQ patch execution timed out\" error message due to a complex JQPathExpression that requires more time to evaluate, you can extend the timeout period by configuring the `ignore.normalizer.jq.timeout` setting within the `argocd-cmd-params-cm` ConfigMap.\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: argocd-cmd-params-cm\n+data:\n+  ignore.normalizer.jq.timeout: \"5s\""
        },
        {
          "filename": "manifests/base/application-controller/argocd-application-controller-statefulset.yaml",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -155,6 +155,12 @@ spec:\n                 name: argocd-cmd-params-cm\n                 key: controller.kubectl.parallelism.limit\n                 optional: true\n+        - name: ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT\n+          valueFrom:\n+              configMapKeyRef:\n+                name: argocd-cmd-params-cm\n+                key: controller.ignore.normalizer.jq.timeout\n+                optional: true\n         image: quay.io/argoproj/argocd:latest\n         imagePullPolicy: Always\n         name: argocd-application-controller"
        },
        {
          "filename": "util/argo/diff/diff.go",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -10,6 +10,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo/managedfields\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \tappstatecache \"github.com/argoproj/argo-cd/v2/util/cache/appstate\"\n \n \t\"github.com/argoproj/gitops-engine/pkg/diff\"\n@@ -31,7 +32,7 @@ func NewDiffConfigBuilder() *DiffConfigBuilder {\n }\n \n // WithDiffSettings will set the diff settings in the builder.\n-func (b *DiffConfigBuilder) WithDiffSettings(id []v1alpha1.ResourceIgnoreDifferences, o map[string]v1alpha1.ResourceOverride, ignoreAggregatedRoles bool) *DiffConfigBuilder {\n+func (b *DiffConfigBuilder) WithDiffSettings(id []v1alpha1.ResourceIgnoreDifferences, o map[string]v1alpha1.ResourceOverride, ignoreAggregatedRoles bool, ignoreNormalizerOpts normalizers.IgnoreNormalizerOpts) *DiffConfigBuilder {\n \tignores := id\n \tif ignores == nil {\n \t\tignores = []v1alpha1.ResourceIgnoreDifferences{}\n@@ -44,6 +45,7 @@ func (b *DiffConfigBuilder) WithDiffSettings(id []v1alpha1.ResourceIgnoreDiffere\n \t}\n \tb.diffConfig.overrides = overrides\n \tb.diffConfig.ignoreAggregatedRoles = ignoreAggregatedRoles\n+\tb.diffConfig.ignoreNormalizerOpts = ignoreNormalizerOpts\n \treturn b\n }\n \n@@ -140,6 +142,8 @@ type DiffConfig interface {\n \t// Manager returns the manager that should be used by the diff while\n \t// calculating the structured merge diff.\n \tManager() string\n+\n+\tIgnoreNormalizerOpts() normalizers.IgnoreNormalizerOpts\n }\n \n // diffConfig defines the configurations used while applying diffs.\n@@ -156,6 +160,7 @@ type diffConfig struct {\n \tgvkParser             *k8smanagedfields.GvkParser\n \tstructuredMergeDiff   bool\n \tmanager               string\n+\tignoreNormalizerOpts  normalizers.IgnoreNormalizerOpts\n }\n \n func (c *diffConfig) Ignores() []v1alpha1.ResourceIgnoreDifferences {\n@@ -194,6 +199,9 @@ func (c *diffConfig) StructuredMergeDiff() bool {\n func (c *diffConfig) Manager() string {\n \treturn c.manager\n }\n+func (c *diffConfig) IgnoreNormalizerOpts() normalizers.IgnoreNormalizerOpts {\n+\treturn c.ignoreNormalizerOpts\n+}\n \n // Validate will check the current state of this diffConfig and return\n // error if it finds any required configuration missing.\n@@ -243,7 +251,7 @@ func StateDiffs(lives, configs []*unstructured.Unstructured, diffConfig DiffConf\n \t\treturn nil, fmt.Errorf(\"failed to perform pre-diff normalization: %w\", err)\n \t}\n \n-\tdiffNormalizer, err := newDiffNormalizer(diffConfig.Ignores(), diffConfig.Overrides())\n+\tdiffNormalizer, err := newDiffNormalizer(diffConfig.Ignores(), diffConfig.Overrides(), diffConfig.IgnoreNormalizerOpts())\n \tif err != nil {\n \t\treturn nil, fmt.Errorf(\"failed to create diff normalizer: %w\", err)\n \t}"
        },
        {
          "filename": "util/argo/diff/diff_test.go",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -10,6 +10,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n \ttestutil \"github.com/argoproj/argo-cd/v2/test\"\n \targo \"github.com/argoproj/argo-cd/v2/util/argo/diff\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo/testdata\"\n \tappstatecache \"github.com/argoproj/argo-cd/v2/util/cache/appstate\"\n )\n@@ -40,7 +41,7 @@ func TestStateDiff(t *testing.T) {\n \tdiffConfig := func(t *testing.T, params *diffConfigParams) argo.DiffConfig {\n \t\tt.Helper()\n \t\tdiffConfig, err := argo.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(params.ignores, params.overrides, params.ignoreRoles).\n+\t\t\tWithDiffSettings(params.ignores, params.overrides, params.ignoreRoles, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithTracking(params.label, params.trackingMethod).\n \t\t\tWithNoCache().\n \t\t\tBuild()\n@@ -185,7 +186,7 @@ func TestDiffConfigBuilder(t *testing.T) {\n \n \t\t// when\n \t\tdiffConfig, err := argo.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(f.ignores, f.overrides, f.ignoreRoles).\n+\t\t\tWithDiffSettings(f.ignores, f.overrides, f.ignoreRoles, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithTracking(f.label, f.trackingMethod).\n \t\t\tWithNoCache().\n \t\t\tBuild()\n@@ -209,7 +210,7 @@ func TestDiffConfigBuilder(t *testing.T) {\n \n \t\t// when\n \t\tdiffConfig, err := argo.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(nil, nil, f.ignoreRoles).\n+\t\t\tWithDiffSettings(nil, nil, f.ignoreRoles, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithTracking(f.label, f.trackingMethod).\n \t\t\tWithNoCache().\n \t\t\tBuild()\n@@ -231,7 +232,7 @@ func TestDiffConfigBuilder(t *testing.T) {\n \n \t\t// when\n \t\tdiffConfig, err := argo.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(f.ignores, f.overrides, f.ignoreRoles).\n+\t\t\tWithDiffSettings(f.ignores, f.overrides, f.ignoreRoles, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithTracking(f.label, f.trackingMethod).\n \t\t\tWithCache(&appstatecache.Cache{}, \"\").\n \t\t\tBuild()\n@@ -246,7 +247,7 @@ func TestDiffConfigBuilder(t *testing.T) {\n \n \t\t// when\n \t\tdiffConfig, err := argo.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(f.ignores, f.overrides, f.ignoreRoles).\n+\t\t\tWithDiffSettings(f.ignores, f.overrides, f.ignoreRoles, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithTracking(f.label, f.trackingMethod).\n \t\t\tWithCache(nil, f.appName).\n \t\t\tBuild()"
        },
        {
          "filename": "util/argo/diff/normalize.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -15,7 +15,7 @@ func Normalize(lives, configs []*unstructured.Unstructured, diffConfig DiffConfi\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdiffNormalizer, err := newDiffNormalizer(diffConfig.Ignores(), diffConfig.Overrides())\n+\tdiffNormalizer, err := newDiffNormalizer(diffConfig.Ignores(), diffConfig.Overrides(), diffConfig.IgnoreNormalizerOpts())\n \tif err != nil {\n \t\treturn nil, err\n \t}\n@@ -40,8 +40,8 @@ func Normalize(lives, configs []*unstructured.Unstructured, diffConfig DiffConfi\n }\n \n // newDiffNormalizer creates normalizer that uses Argo CD and application settings to normalize the resource prior to diffing.\n-func newDiffNormalizer(ignore []v1alpha1.ResourceIgnoreDifferences, overrides map[string]v1alpha1.ResourceOverride) (diff.Normalizer, error) {\n-\tignoreNormalizer, err := normalizers.NewIgnoreNormalizer(ignore, overrides)\n+func newDiffNormalizer(ignore []v1alpha1.ResourceIgnoreDifferences, overrides map[string]v1alpha1.ResourceOverride, opts normalizers.IgnoreNormalizerOpts) (diff.Normalizer, error) {\n+\tignoreNormalizer, err := normalizers.NewIgnoreNormalizer(ignore, overrides, opts)\n \tif err != nil {\n \t\treturn nil, err\n \t}"
        },
        {
          "filename": "util/argo/diff/normalize_test.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -10,6 +10,7 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1\"\n \t\"github.com/argoproj/argo-cd/v2/test\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo/diff\"\n+\t\"github.com/argoproj/argo-cd/v2/util/argo/normalizers\"\n \t\"github.com/argoproj/argo-cd/v2/util/argo/testdata\"\n )\n \n@@ -22,7 +23,7 @@ func TestNormalize(t *testing.T) {\n \tsetup := func(t *testing.T, ignores []v1alpha1.ResourceIgnoreDifferences) *fixture {\n \t\tt.Helper()\n \t\tdc, err := diff.NewDiffConfigBuilder().\n-\t\t\tWithDiffSettings(ignores, nil, true).\n+\t\t\tWithDiffSettings(ignores, nil, true, normalizers.IgnoreNormalizerOpts{}).\n \t\t\tWithNoCache().\n \t\t\tBuild()\n \t\trequire.NoError(t, err)"
        },
        {
          "filename": "util/argo/normalizers/diff_normalizer.go",
          "status": "modified",
          "additions": 33,
          "deletions": 4,
          "patch": "@@ -1,9 +1,11 @@\n package normalizers\n \n import (\n+\t\"context\"\n \t\"encoding/json\"\n \t\"fmt\"\n \t\"strings\"\n+\t\"time\"\n \n \t\"github.com/argoproj/gitops-engine/pkg/diff\"\n \tjsonpatch \"github.com/evanphx/json-patch\"\n@@ -16,6 +18,11 @@ import (\n \t\"github.com/argoproj/argo-cd/v2/util/glob\"\n )\n \n+const (\n+\t// DefaultJQExecutionTimeout is the maximum time allowed for a JQ patch to execute\n+\tDefaultJQExecutionTimeout = 1 * time.Second\n+)\n+\n type normalizerPatch interface {\n \tGetGroupKind() schema.GroupKind\n \tGetNamespace() string\n@@ -57,7 +64,8 @@ func (np *jsonPatchNormalizerPatch) Apply(data []byte) ([]byte, error) {\n \n type jqNormalizerPatch struct {\n \tbaseNormalizerPatch\n-\tcode *gojq.Code\n+\tcode               *gojq.Code\n+\tjqExecutionTimeout time.Duration\n }\n \n func (np *jqNormalizerPatch) Apply(data []byte) ([]byte, error) {\n@@ -67,11 +75,20 @@ func (np *jqNormalizerPatch) Apply(data []byte) ([]byte, error) {\n \t\treturn nil, err\n \t}\n \n-\titer := np.code.Run(dataJson)\n+\tctx, cancel := context.WithTimeout(context.Background(), np.jqExecutionTimeout)\n+\tdefer cancel()\n+\n+\titer := np.code.RunWithContext(ctx, dataJson)\n \tfirst, ok := iter.Next()\n \tif !ok {\n \t\treturn nil, fmt.Errorf(\"JQ patch did not return any data\")\n \t}\n+\tif err, ok = first.(error); ok {\n+\t\tif err == context.DeadlineExceeded {\n+\t\t\treturn nil, fmt.Errorf(\"JQ patch execution timed out (%v)\", np.jqExecutionTimeout.String())\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"JQ patch returned error: %w\", err)\n+\t}\n \t_, ok = iter.Next()\n \tif ok {\n \t\treturn nil, fmt.Errorf(\"JQ patch returned multiple objects\")\n@@ -88,8 +105,19 @@ type ignoreNormalizer struct {\n \tpatches []normalizerPatch\n }\n \n+type IgnoreNormalizerOpts struct {\n+\tJQExecutionTimeout time.Duration\n+}\n+\n+func (opts *IgnoreNormalizerOpts) getJQExecutionTimeout() time.Duration {\n+\tif opts == nil || opts.JQExecutionTimeout == 0 {\n+\t\treturn DefaultJQExecutionTimeout\n+\t}\n+\treturn opts.JQExecutionTimeout\n+}\n+\n // NewIgnoreNormalizer creates diff normalizer which removes ignored fields according to given application spec and resource overrides\n-func NewIgnoreNormalizer(ignore []v1alpha1.ResourceIgnoreDifferences, overrides map[string]v1alpha1.ResourceOverride) (diff.Normalizer, error) {\n+func NewIgnoreNormalizer(ignore []v1alpha1.ResourceIgnoreDifferences, overrides map[string]v1alpha1.ResourceOverride, opts IgnoreNormalizerOpts) (diff.Normalizer, error) {\n \tfor key, override := range overrides {\n \t\tgroup, kind, err := getGroupKindForOverrideKey(key)\n \t\tif err != nil {\n@@ -144,7 +172,8 @@ func NewIgnoreNormalizer(ignore []v1alpha1.ResourceIgnoreDifferences, overrides\n \t\t\t\t\tname:      ignore[i].Name,\n \t\t\t\t\tnamespace: ignore[i].Namespace,\n \t\t\t\t},\n-\t\t\t\tcode: jqDeletionCode,\n+\t\t\t\tcode:               jqDeletionCode,\n+\t\t\t\tjqExecutionTimeout: opts.getJQExecutionTimeout(),\n \t\t\t})\n \t\t}\n \t}"
        },
        {
          "filename": "util/argo/normalizers/diff_normalizer_test.go",
          "status": "modified",
          "additions": 31,
          "deletions": 9,
          "patch": "@@ -18,7 +18,7 @@ func TestNormalizeObjectWithMatchedGroupKind(t *testing.T) {\n \t\tGroup:        \"apps\",\n \t\tKind:         \"Deployment\",\n \t\tJSONPointers: []string{\"/not-matching-path\", \"/spec/template/spec/containers\"},\n-\t}}, make(map[string]v1alpha1.ResourceOverride))\n+\t}}, make(map[string]v1alpha1.ResourceOverride), IgnoreNormalizerOpts{})\n \n \tassert.Nil(t, err)\n \n@@ -43,7 +43,7 @@ func TestNormalizeNoMatchedGroupKinds(t *testing.T) {\n \t\tGroup:        \"\",\n \t\tKind:         \"Service\",\n \t\tJSONPointers: []string{\"/spec\"},\n-\t}}, make(map[string]v1alpha1.ResourceOverride))\n+\t}}, make(map[string]v1alpha1.ResourceOverride), IgnoreNormalizerOpts{})\n \n \tassert.Nil(t, err)\n \n@@ -62,7 +62,7 @@ func TestNormalizeMatchedResourceOverrides(t *testing.T) {\n \t\t\"apps/Deployment\": {\n \t\t\tIgnoreDifferences: v1alpha1.OverrideIgnoreDiff{JSONPointers: []string{\"/spec/template/spec/containers\"}},\n \t\t},\n-\t})\n+\t}, IgnoreNormalizerOpts{})\n \n \tassert.Nil(t, err)\n \n@@ -117,7 +117,7 @@ func TestNormalizeMissingJsonPointer(t *testing.T) {\n \t\t\"apiextensions.k8s.io/CustomResourceDefinition\": {\n \t\t\tIgnoreDifferences: v1alpha1.OverrideIgnoreDiff{JSONPointers: []string{\"/spec/additionalPrinterColumns/0/priority\"}},\n \t\t},\n-\t})\n+\t}, IgnoreNormalizerOpts{})\n \tassert.NoError(t, err)\n \n \tdeployment := test.NewDeployment()\n@@ -138,7 +138,7 @@ func TestNormalizeGlobMatch(t *testing.T) {\n \t\t\"*/*\": {\n \t\t\tIgnoreDifferences: v1alpha1.OverrideIgnoreDiff{JSONPointers: []string{\"/spec/template/spec/containers\"}},\n \t\t},\n-\t})\n+\t}, IgnoreNormalizerOpts{})\n \n \tassert.Nil(t, err)\n \n@@ -160,7 +160,7 @@ func TestNormalizeJQPathExpression(t *testing.T) {\n \t\tGroup:             \"apps\",\n \t\tKind:              \"Deployment\",\n \t\tJQPathExpressions: []string{\".spec.template.spec.initContainers[] | select(.name == \\\"init-container-0\\\")\"},\n-\t}}, make(map[string]v1alpha1.ResourceOverride))\n+\t}}, make(map[string]v1alpha1.ResourceOverride), IgnoreNormalizerOpts{})\n \n \tassert.Nil(t, err)\n \n@@ -196,7 +196,7 @@ func TestNormalizeIllegalJQPathExpression(t *testing.T) {\n \t\tKind:              \"Deployment\",\n \t\tJQPathExpressions: []string{\".spec.template.spec.containers[] | select(.name == \\\"missing-quote)\"},\n \t\t// JSONPointers: []string{\"no-starting-slash\"},\n-\t}}, make(map[string]v1alpha1.ResourceOverride))\n+\t}}, make(map[string]v1alpha1.ResourceOverride), IgnoreNormalizerOpts{})\n \n \tassert.Error(t, err)\n }\n@@ -206,7 +206,7 @@ func TestNormalizeJQPathExpressionWithError(t *testing.T) {\n \t\tGroup:             \"apps\",\n \t\tKind:              \"Deployment\",\n \t\tJQPathExpressions: []string{\".spec.fakeField.foo[]\"},\n-\t}}, make(map[string]v1alpha1.ResourceOverride))\n+\t}}, make(map[string]v1alpha1.ResourceOverride), IgnoreNormalizerOpts{})\n \n \tassert.Nil(t, err)\n \n@@ -229,7 +229,7 @@ func TestNormalizeExpectedErrorAreSilenced(t *testing.T) {\n \t\t\t\tJSONPointers: []string{\"/invalid\", \"/invalid/json/path\"},\n \t\t\t},\n \t\t},\n-\t})\n+\t}, IgnoreNormalizerOpts{})\n \tassert.Nil(t, err)\n \n \tignoreNormalizer := normalizer.(*ignoreNormalizer)\n@@ -252,3 +252,25 @@ func TestNormalizeExpectedErrorAreSilenced(t *testing.T) {\n \tassert.True(t, shouldLogError(fmt.Errorf(\"An error that should not be ignored\")))\n \n }\n+\n+func TestJqPathExpressionFailWithTimeout(t *testing.T) {\n+\tnormalizer, err := NewIgnoreNormalizer([]v1alpha1.ResourceIgnoreDifferences{}, map[string]v1alpha1.ResourceOverride{\n+\t\t\"*/*\": {\n+\t\t\tIgnoreDifferences: v1alpha1.OverrideIgnoreDiff{\n+\t\t\t\tJQPathExpressions: []string{\"until(true==false; [.] + [1])\"},\n+\t\t\t},\n+\t\t},\n+\t}, IgnoreNormalizerOpts{})\n+\tassert.Nil(t, err)\n+\n+\tignoreNormalizer := normalizer.(*ignoreNormalizer)\n+\tassert.Len(t, ignoreNormalizer.patches, 1)\n+\tjqPatch := ignoreNormalizer.patches[0]\n+\n+\tdeployment := test.NewDeployment()\n+\tdeploymentData, err := json.Marshal(deployment)\n+\tassert.Nil(t, err)\n+\n+\t_, err = jqPatch.Apply(deploymentData)\n+\tassert.ErrorContains(t, err, \"JQ patch execution timed out\")\n+}\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 11,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d23e6ac79bb95a911b988551ba33bfc9939c5f18",
            "date": "2025-01-14T16:10:14Z",
            "author_login": "crenshaw-dev"
          },
          {
            "sha": "9a51757049dc028596d4950d7a6c7cd5a446301a",
            "date": "2025-01-14T15:41:32Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c3600d240a42a4708ec65091ffb23689b4513f85",
            "date": "2025-01-14T12:37:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b77d9d9f5f9cf3862ef75e14a5877a3fcf60fa40",
            "date": "2025-01-14T12:16:41Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2f579404f68ded0b0156fc25d6e554640c4ad009",
            "date": "2025-01-14T12:12:38Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. There is a Denial of Service (DoS) vulnerability via OOM using jq in ignoreDifferences. This vulnerability has been patched in version(s) 2.10.7, 2.9.12 and 2.8.16.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-14T15:36:25.953",
    "last_modified": "2025-01-09T16:59:02.680",
    "fix_date": "2024-04-26T09:24:02Z"
  },
  "references": [
    {
      "url": "https://github.com/argoproj/argo-cd/commit/7893979a1e78d59cedd0ba790ded24e30bb40657",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/9e5cc5a26ff0920a01816231d59fdb5eae032b5a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/e2df7315fb7d96652186bf7435773a27be330cac",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-9m6p-x4h2-6frq",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/7893979a1e78d59cedd0ba790ded24e30bb40657",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/9e5cc5a26ff0920a01816231d59fdb5eae032b5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/commit/e2df7315fb7d96652186bf7435773a27be330cac",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/argoproj/argo-cd/security/advisories/GHSA-9m6p-x4h2-6frq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.887707",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "argo-cd",
    "owner": "argoproj",
    "created_at": "2018-02-09T11:12:01Z",
    "updated_at": "2025-01-14T12:37:12Z",
    "pushed_at": "2025-01-14T12:37:08Z",
    "size": 125601,
    "stars": 18420,
    "forks": 5620,
    "open_issues": 3601,
    "watchers": 18420,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 6686751,
      "TypeScript": 1298168,
      "Lua": 199797,
      "SCSS": 92938,
      "Shell": 58329,
      "Makefile": 24983,
      "Dockerfile": 15204,
      "Procfile": 10040,
      "JavaScript": 5975,
      "CSS": 2209,
      "Mustache": 1066,
      "HTML": 895
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:15:10.212233"
  }
}