{
  "cve_id": "CVE-2024-32481",
  "github_data": {
    "repository": "vyperlang/vyper",
    "fix_commit": "3de1415ee77a9244eb04bdb695e249d3ec9ed868",
    "related_commits": [
      "3de1415ee77a9244eb04bdb695e249d3ec9ed868",
      "5319cfbe14951e007ccdb323257e5ada869b35d5",
      "3de1415ee77a9244eb04bdb695e249d3ec9ed868",
      "5319cfbe14951e007ccdb323257e5ada869b35d5"
    ],
    "patch_url": "https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868.patch",
    "fix_commit_details": {
      "sha": "3de1415ee77a9244eb04bdb695e249d3ec9ed868",
      "commit_date": "2023-05-11T20:35:44Z",
      "author": {
        "login": "charles-cooper",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-6r8q-pfpv-7cgj",
        "length": 473,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 42,
        "additions": 42,
        "deletions": 0
      },
      "files": [
        {
          "filename": "tests/parser/features/iteration/test_for_range.py",
          "status": "renamed",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -128,6 +128,45 @@ def foo(a: {typ}) -> {typ}:\n     assert c.foo(100) == 31337\n \n \n+# test that we can get to the upper range of an integer\n+@pytest.mark.parametrize(\"typ\", [\"uint8\", \"int128\", \"uint256\"])\n+def test_for_range_edge(get_contract, typ):\n+    code = f\"\"\"\n+@external\n+def test():\n+    found: bool = False\n+    x: {typ} = max_value({typ})\n+    for i in range(x, x + 1):\n+        if i == max_value({typ}):\n+            found = True\n+\n+    assert found\n+\n+    found = False\n+    x = max_value({typ}) - 1\n+    for i in range(x, x + 2):\n+        if i == max_value({typ}):\n+            found = True\n+\n+    assert found\n+    \"\"\"\n+    c = get_contract(code)\n+    c.test()\n+\n+\n+@pytest.mark.parametrize(\"typ\", [\"uint8\", \"int128\", \"uint256\"])\n+def test_for_range_oob_check(get_contract, assert_tx_failed, typ):\n+    code = f\"\"\"\n+@external\n+def test():\n+    x: {typ} = max_value({typ})\n+    for i in range(x, x+2):\n+        pass\n+    \"\"\"\n+    c = get_contract(code)\n+    assert_tx_failed(lambda: c.test())\n+\n+\n @pytest.mark.parametrize(\"typ\", [\"int128\", \"uint256\"])\n def test_return_inside_nested_repeater(get_contract, typ):\n     code = f\"\"\""
        },
        {
          "filename": "vyper/codegen/stmt.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -10,6 +10,7 @@\n     IRnode,\n     append_dyn_array,\n     check_assign,\n+    clamp,\n     dummy_node_for_type,\n     get_dyn_array_count,\n     get_element_ptr,\n@@ -264,6 +265,8 @@ def _parse_For_range(self):\n             arg1 = self.stmt.iter.args[1]\n             rounds = self._get_range_const_value(arg1.right)\n             start = Expr.parse_value_expr(arg0, self.context)\n+            _, hi = start.typ.int_bounds\n+            start = clamp(\"le\", start, hi + 1 - rounds)\n \n         r = rounds if isinstance(rounds, int) else rounds.value\n         if r < 1:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c208b954564e8fffdd4c86cc3c497e0c3df1aeec",
            "date": "2025-01-14T17:09:31Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "db8dcc713168b16977b5b07267653c9024f6acea",
            "date": "2025-01-12T17:01:49Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "10e91d5a2ba6eaab2f7194fd86cefb7a0ff19964",
            "date": "2025-01-12T16:34:14Z",
            "author_login": "tserg"
          },
          {
            "sha": "43259f8953672ef7a19167c6c048d020d82e05da",
            "date": "2025-01-12T16:32:46Z",
            "author_login": "charles-cooper"
          },
          {
            "sha": "9b5523e6131335c81714e7e8af63cc49404f5ce7",
            "date": "2025-01-12T16:19:30Z",
            "author_login": "charles-cooper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-681",
    "description": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-25T17:15:50.273",
    "last_modified": "2024-11-21T09:15:00.013",
    "fix_date": "2023-05-11T20:35:44Z"
  },
  "references": [
    {
      "url": "https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/codegen/stmt.py#L286-L287",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/5319cfbe14951e007ccdb323257e5ada869b35d5",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-ppx5-q359-pvwj",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/codegen/stmt.py#L286-L287",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/commit/5319cfbe14951e007ccdb323257e5ada869b35d5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-ppx5-q359-pvwj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.022352",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vyper",
    "owner": "vyperlang",
    "created_at": "2016-11-11T08:56:41Z",
    "updated_at": "2025-01-13T17:32:27Z",
    "pushed_at": "2025-01-12T17:01:50Z",
    "size": 11939,
    "stars": 4948,
    "forks": 817,
    "open_issues": 489,
    "watchers": 4948,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 2662211,
      "Makefile": 2222,
      "Batchfile": 1614,
      "Dockerfile": 1145,
      "Shell": 472
    },
    "commit_activity": {
      "total_commits_last_year": 317,
      "avg_commits_per_week": 6.096153846153846,
      "days_active_last_year": 154
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:48:09.728520"
  }
}