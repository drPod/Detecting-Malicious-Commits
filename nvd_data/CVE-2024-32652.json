{
  "cve_id": "CVE-2024-32652",
  "github_data": {
    "repository": "honojs/node-server",
    "fix_commit": "d847e60249fd8183ba0998bc379ba20505643204",
    "related_commits": [
      "d847e60249fd8183ba0998bc379ba20505643204",
      "d847e60249fd8183ba0998bc379ba20505643204"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d847e60249fd8183ba0998bc379ba20505643204",
      "commit_date": "2024-04-19T05:48:36Z",
      "author": {
        "login": "usualoma",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: catch ERR_INVALID_URL error in listener (#162)",
        "length": 51,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 33,
        "deletions": 11
      },
      "files": [
        {
          "filename": "src/listener.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 11,
          "patch": "@@ -159,18 +159,18 @@ export const getRequestListener = (\n   ) => {\n     let res\n \n-    // `fetchCallback()` requests a Request object, but global.Request is expensive to generate,\n-    // so generate a pseudo Request object with only the minimum required information.\n-    const req = newRequest(incoming)\n-\n-    // Detect if request was aborted.\n-    outgoing.on('close', () => {\n-      if (incoming.destroyed) {\n-        req[getAbortController]().abort()\n-      }\n-    })\n-\n     try {\n+      // `fetchCallback()` requests a Request object, but global.Request is expensive to generate,\n+      // so generate a pseudo Request object with only the minimum required information.\n+      const req = newRequest(incoming)\n+\n+      // Detect if request was aborted.\n+      outgoing.on('close', () => {\n+        if (incoming.destroyed) {\n+          req[getAbortController]().abort()\n+        }\n+      })\n+\n       res = fetchCallback(req, { incoming, outgoing } as HttpBindings) as\n         | Response\n         | Promise<Response>"
        },
        {
          "filename": "test/listener.test.ts",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -4,6 +4,28 @@ import { getRequestListener } from '../src/listener'\n import { GlobalRequest, Request as LightweightRequest } from '../src/request'\n import { GlobalResponse, Response as LightweightResponse } from '../src/response'\n \n+describe('Invalid request', () => {\n+  const requestListener = getRequestListener(jest.fn())\n+  const server = createServer(async (req, res) => {\n+    await requestListener(req, res)\n+\n+    if (!res.writableEnded) {\n+      res.writeHead(500, { 'Content-Type': 'text/plain' })\n+      res.end('error handler did not return a response')\n+    }\n+  })\n+\n+  it('Should return server error for a request w/o host header', async () => {\n+    const res = await request(server).get('/').set('Host', '').send()\n+    expect(res.status).toBe(500)\n+  })\n+\n+  it('Should return server error for a request invalid host header', async () => {\n+    const res = await request(server).get('/').set('Host', 'a b').send()\n+    expect(res.status).toBe(500)\n+  })\n+})\n+\n describe('Error handling - sync fetchCallback', () => {\n   const fetchCallback = jest.fn(() => {\n     throw new Error('thrown error')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "590fe6cef8a795ea10c300033387f13ed31e144f",
            "date": "2024-11-12T11:02:36Z",
            "author_login": "yusukebe"
          },
          {
            "sha": "2fdcdad756b85564f1598ae3212374ca7bca4207",
            "date": "2024-11-12T10:59:24Z",
            "author_login": "Tomas2D"
          },
          {
            "sha": "b13dead8156e2f96d1f9144277fe13f2e4ce0f14",
            "date": "2024-11-11T02:10:51Z",
            "author_login": "yusukebe"
          },
          {
            "sha": "c1b482cbed47c230e593328189fa8f1ed8fa33fc",
            "date": "2024-11-11T02:07:46Z",
            "author_login": "nakasyou"
          },
          {
            "sha": "350f9b7fba008e26231771e3d82087250e6c9561",
            "date": "2024-11-04T01:44:59Z",
            "author_login": "yusukebe"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-755",
    "description": "The adapter @hono/node-server allows you to run your Hono application on Node.js. Prior to 1.10.1, the application hangs when receiving a Host header with a value that `@hono/node-server` can't handle well. Invalid values are those that cannot be parsed by the `URL` as a hostname such as an empty string, slashes `/`, and other strings. The version 1.10.1 includes the fix for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-19T19:15:07.067",
    "last_modified": "2024-11-21T09:15:24.090",
    "fix_date": "2024-04-19T05:48:36Z"
  },
  "references": [
    {
      "url": "https://github.com/honojs/node-server/commit/d847e60249fd8183ba0998bc379ba20505643204",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/node-server/issues/159",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/node-server/security/advisories/GHSA-hgxw-5xg3-69jx",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/node-server/commit/d847e60249fd8183ba0998bc379ba20505643204",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/node-server/issues/159",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/node-server/security/advisories/GHSA-hgxw-5xg3-69jx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.002815",
    "processing_status": "enhanced"
  }
}