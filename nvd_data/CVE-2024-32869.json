{
  "cve_id": "CVE-2024-32869",
  "github_data": {
    "repository": "honojs/hono",
    "fix_commit": "92e65fbb6e5e7372650e7690dbd84938432d9e65",
    "related_commits": [
      "92e65fbb6e5e7372650e7690dbd84938432d9e65",
      "92e65fbb6e5e7372650e7690dbd84938432d9e65"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "92e65fbb6e5e7372650e7690dbd84938432d9e65",
      "commit_date": "2024-04-23T08:14:16Z",
      "author": {
        "login": "yusukebe",
        "type": "User",
        "stats": {
          "total_commits": 1399,
          "average_weekly_commits": 8.582822085889571,
          "total_additions": 125187,
          "total_deletions": 101767,
          "weeks_active": 157
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-3mpf-rcc7-5347",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 72,
        "additions": 68,
        "deletions": 4
      },
      "files": [
        {
          "filename": "deno_dist/middleware/serve-static/index.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -30,9 +30,8 @@ export const serveStatic = <E extends Env = Env>(\n       await next()\n       return\n     }\n-    const url = new URL(c.req.url)\n \n-    let filename = options.path ?? decodeURI(url.pathname)\n+    let filename = options.path ?? decodeURI(c.req.path)\n     filename = options.rewriteRequestPath ? options.rewriteRequestPath(filename) : filename\n     const root = options.root\n "
        },
        {
          "filename": "runtime_tests/deno/middleware.test.tsx",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -117,6 +117,13 @@ Deno.test('Serve Static middleware', async () => {\n   assertEquals(res.status, 200)\n   assertEquals(await res.text(), 'Deno!!')\n   assertSpyCalls(onNotFound, 1)\n+\n+  res = await app.fetch({\n+    method: 'GET',\n+    url: 'http://localhost/static/%2e%2e/static/plain.txt',\n+  } as Request)\n+  assertEquals(res.status, 404)\n+  assertEquals(await res.text(), '404 Not Found')\n })\n \n Deno.test('JWT Authentication middleware', async () => {"
        },
        {
          "filename": "src/middleware/serve-static/index.test.ts",
          "status": "added",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -0,0 +1,59 @@\n+import { createMiddleware } from '../../helper'\n+import { Hono } from '../../hono'\n+import { serveStatic as baseServeStatic } from '.'\n+\n+describe('Serve Static Middleware', () => {\n+  const app = new Hono()\n+\n+  const serveStatic = createMiddleware(async (c, next) => {\n+    const mw = baseServeStatic({\n+      getContent: (path) => {\n+        if (path.endsWith('not-found.txt')) {\n+          return undefined\n+        }\n+        return `Hello in ${path}`\n+      },\n+      pathResolve: (path) => {\n+        return `./${path}`\n+      },\n+    })\n+    return await mw(c, next)\n+  })\n+\n+  app.get('/static/*', serveStatic)\n+\n+  it('Should return 200 response - /static/hello.html', async () => {\n+    const res = await app.request('/static/hello.html')\n+    expect(res.status).toBe(200)\n+    expect(res.headers.get('Content-Type')).toMatch(/^text\\/html/)\n+    expect(await res.text()).toBe('Hello in ./static/hello.html')\n+  })\n+\n+  it('Should return 200 response - /static/sub', async () => {\n+    const res = await app.request('/static/sub')\n+    expect(res.status).toBe(200)\n+    expect(res.headers.get('Content-Type')).toMatch(/^text\\/html/)\n+    expect(await res.text()).toBe('Hello in ./static/sub/index.html')\n+  })\n+\n+  it('Should decode URI strings - /static/%E7%82%8E.txt', async () => {\n+    const res = await app.request('/static/%E7%82%8E.txt')\n+    expect(res.status).toBe(200)\n+    expect(await res.text()).toBe('Hello in ./static/\u708e.txt')\n+  })\n+\n+  it('Should return 404 response - /static/not-found', async () => {\n+    const res = await app.request('/static/not-found.txt')\n+    expect(res.status).toBe(404)\n+    expect(await res.text()).toBe('404 Not Found')\n+  })\n+\n+  it('Should not allow a directory traversal - /static/%2e%2e/static/hello.html', async () => {\n+    const res = await app.fetch({\n+      method: 'GET',\n+      url: 'http://localhost/static/%2e%2e/static/hello.html',\n+    } as Request)\n+    expect(res.status).toBe(404)\n+    expect(await res.text()).toBe('404 Not Found')\n+  })\n+})"
        },
        {
          "filename": "src/middleware/serve-static/index.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -30,9 +30,8 @@ export const serveStatic = <E extends Env = Env>(\n       await next()\n       return\n     }\n-    const url = new URL(c.req.url)\n \n-    let filename = options.path ?? decodeURI(url.pathname)\n+    let filename = options.path ?? decodeURI(c.req.path)\n     filename = options.rewriteRequestPath ? options.rewriteRequestPath(filename) : filename\n     const root = options.root\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d75e9ec60518d042e3e67416ab9f0555046c3168",
            "date": "2025-01-25T13:46:10Z",
            "author_login": "sor4chi"
          },
          {
            "sha": "ecf5a0b2aeaf29c26ffe1eaf41520f867510cb17",
            "date": "2025-01-23T10:06:27Z",
            "author_login": "yusukebe"
          },
          {
            "sha": "7a7918d2d397022006e01ccfe4284fdae9e57a96",
            "date": "2025-01-23T10:01:51Z",
            "author_login": "yusukebe"
          },
          {
            "sha": "3fba7a5e7d92cdb69c817dd15702508812305171",
            "date": "2025-01-20T07:34:17Z",
            "author_login": "sushichan044"
          },
          {
            "sha": "ac4d42ce36706953502f8eab3b2260cce870809d",
            "date": "2025-01-19T06:51:07Z",
            "author_login": "yusukebe"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Hono is a Web application framework that provides support for any JavaScript runtime. Prior to version 4.2.7, when using serveStatic with deno, it is possible to traverse the directory where `main.ts` is located. This can result in retrieval of unexpected files. Version 4.2.7 contains a patch for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-23T21:15:48.623",
    "last_modified": "2024-11-21T09:15:54.040",
    "fix_date": "2024-04-23T08:14:16Z"
  },
  "references": [
    {
      "url": "https://github.com/honojs/hono/commit/92e65fbb6e5e7372650e7690dbd84938432d9e65",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/hono/security/advisories/GHSA-3mpf-rcc7-5347",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/hono/commit/92e65fbb6e5e7372650e7690dbd84938432d9e65",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/honojs/hono/security/advisories/GHSA-3mpf-rcc7-5347",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.013227",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "hono",
    "owner": "honojs",
    "created_at": "2021-12-14T20:05:30Z",
    "updated_at": "2025-01-26T07:35:31Z",
    "pushed_at": "2025-01-26T01:05:03Z",
    "size": 6945,
    "stars": 21747,
    "forks": 644,
    "open_issues": 264,
    "watchers": 21747,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1752505,
      "JavaScript": 8965,
      "Dockerfile": 251,
      "HTML": 12
    },
    "commit_activity": {
      "total_commits_last_year": 663,
      "avg_commits_per_week": 12.75,
      "days_active_last_year": 220
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:57:12.962230"
  }
}