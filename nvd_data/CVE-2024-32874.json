{
  "cve_id": "CVE-2024-32874",
  "github_data": {
    "repository": "blakeblackshear/frigate",
    "fix_commit": "cc851555e4029647986dccc8b8ecf54afee31442",
    "related_commits": [
      "cc851555e4029647986dccc8b8ecf54afee31442",
      "cc851555e4029647986dccc8b8ecf54afee31442"
    ],
    "patch_url": "https://github.com/blakeblackshear/frigate/commit/cc851555e4029647986dccc8b8ecf54afee31442.patch",
    "fix_commit_details": {
      "sha": "cc851555e4029647986dccc8b8ecf54afee31442",
      "commit_date": "2024-04-27T16:27:23Z",
      "author": {
        "login": "NickM-27",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Security improvement: ensure user provided file names don't exceed max length (#11129)",
        "length": 120,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 35,
        "additions": 33,
        "deletions": 2
      },
      "files": [
        {
          "filename": "frigate/api/media.py",
          "status": "modified",
          "additions": 33,
          "deletions": 2,
          "patch": "@@ -392,7 +392,17 @@ def recording_clip(camera_name, start_ts, end_ts):\n         if clip.end_time > end_ts:\n             playlist_lines.append(f\"outpoint {int(end_ts - clip.start_time)}\")\n \n-    file_name = secure_filename(f\"clip_{camera_name}_{start_ts}-{end_ts}.mp4\")\n+    file_name = f\"clip_{camera_name}_{start_ts}-{end_ts}.mp4\"\n+\n+    if len(file_name) > 1000:\n+        return make_response(\n+            jsonify(\n+                {\"success\": False, \"message\": \"Filename exceeded max length of 1000\"}\n+            ),\n+            403,\n+        )\n+\n+    file_name = secure_filename(file_name)\n     path = os.path.join(CACHE_DIR, file_name)\n \n     if not os.path.exists(path):\n@@ -1167,7 +1177,20 @@ def preview_gif(camera_name: str, start_ts, end_ts, max_cache_age=2592000):\n @MediaBp.route(\"/<camera_name>/start/<int:start_ts>/end/<int:end_ts>/preview.mp4\")\n @MediaBp.route(\"/<camera_name>/start/<float:start_ts>/end/<float:end_ts>/preview.mp4\")\n def preview_mp4(camera_name: str, start_ts, end_ts):\n-    file_name = secure_filename(f\"clip_{camera_name}_{start_ts}-{end_ts}.mp4\")\n+    file_name = f\"clip_{camera_name}_{start_ts}-{end_ts}.mp4\"\n+\n+    if len(file_name) > 1000:\n+        return make_response(\n+            jsonify(\n+                {\n+                    \"success\": False,\n+                    \"message\": \"Filename exceeded max length of 1000 characters.\",\n+                }\n+            ),\n+            403,\n+        )\n+\n+    file_name = secure_filename(file_name)\n     path = os.path.join(CACHE_DIR, file_name)\n \n     if datetime.fromtimestamp(start_ts) < datetime.now().replace(minute=0, second=0):\n@@ -1337,6 +1360,14 @@ def review_preview(id: str):\n @MediaBp.route(\"/preview/<file_name>/thumbnail.webp\")\n def preview_thumbnail(file_name: str):\n     \"\"\"Get a thumbnail from the cached preview frames.\"\"\"\n+    if len(file_name) > 1000:\n+        return make_response(\n+            jsonify(\n+                {\"success\": False, \"message\": \"Filename exceeded max length of 1000\"}\n+            ),\n+            403,\n+        )\n+\n     safe_file_name_current = secure_filename(file_name)\n     preview_dir = os.path.join(CACHE_DIR, \"preview_frames\")\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "409e911752f1dfe4e8be0116c9d6d719de1fb20a",
            "date": "2025-01-13T14:50:44Z",
            "author_login": "NickM-27"
          },
          {
            "sha": "9983bd8d92854f7f0faa16ccb654a85789a06216",
            "date": "2025-01-13T13:46:46Z",
            "author_login": "tpjanssen"
          },
          {
            "sha": "32c71c41089a5d7f3f2acd6fd77b7a583a767fab",
            "date": "2025-01-12T23:47:24Z",
            "author_login": "NickM-27"
          },
          {
            "sha": "ef6952e3ea484f547120063518dd8ac9cf477198",
            "date": "2025-01-11T21:23:52Z",
            "author_login": "hawkeye217"
          },
          {
            "sha": "173b7aa308963a9f33b921d636a346141c853449",
            "date": "2025-01-11T14:47:45Z",
            "author_login": "NickM-27"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "Frigate is a network video recorder (NVR) with realtime local object detection for IP cameras. Below 0.13.2 Release, when uploading a file or retrieving the filename, a user may intentionally use a large Unicode filename which would lead to a application-level denial of service. This is due to no limitation set on the length of the filename and the costy use of the Unicode normalization with the form NFKD under the hood of `secure_filename()`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-14T15:37:13.483",
    "last_modified": "2024-11-21T09:15:54.833",
    "fix_date": "2024-04-27T16:27:23Z"
  },
  "references": [
    {
      "url": "https://github.com/blakeblackshear/frigate/commit/cc851555e4029647986dccc8b8ecf54afee31442",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/blakeblackshear/frigate/security/advisories/GHSA-w4h6-9wrp-v5jq",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/blakeblackshear/frigate/commit/cc851555e4029647986dccc8b8ecf54afee31442",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/blakeblackshear/frigate/security/advisories/GHSA-w4h6-9wrp-v5jq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.888714",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "frigate",
    "owner": "blakeblackshear",
    "created_at": "2019-01-26T13:52:38Z",
    "updated_at": "2025-01-14T14:17:16Z",
    "pushed_at": "2025-01-14T11:32:30Z",
    "size": 89097,
    "stars": 20267,
    "forks": 1855,
    "open_issues": 163,
    "watchers": 20267,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1324555,
      "Python": 1236977,
      "CSS": 29273,
      "C++": 22557,
      "Shell": 19119,
      "Dockerfile": 17055,
      "JavaScript": 8418,
      "Makefile": 6616,
      "HCL": 4146,
      "HTML": 2323,
      "Jupyter Notebook": 1815,
      "CMake": 602
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:34:41.809909"
  }
}