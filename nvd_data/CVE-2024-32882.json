{
  "cve_id": "CVE-2024-32882",
  "github_data": {
    "repository": "wagtail/wagtail",
    "fix_commit": "ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
    "related_commits": [
      "ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
      "ab2a5d82b4ee3c909d2456704388ccf90e367c9b"
    ],
    "patch_url": "https://github.com/wagtail/wagtail/commit/ab2a5d82b4ee3c909d2456704388ccf90e367c9b.patch",
    "fix_commit_details": {
      "sha": "ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
      "commit_date": "2024-05-01T11:55:05Z",
      "author": {
        "login": "gasman",
        "type": "User",
        "stats": {
          "total_commits": 5988,
          "average_weekly_commits": 10.432055749128919,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 513
        }
      },
      "commit_message": {
        "title": "Revert \"Merge pull request from GHSA-w2v8-php4-p8hc\"",
        "length": 115,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 348,
        "additions": 24,
        "deletions": 324
      },
      "files": [
        {
          "filename": "wagtail/admin/tests/viewsets/test_model_viewset.py",
          "status": "modified",
          "additions": 0,
          "deletions": 29,
          "patch": "@@ -1474,35 +1474,6 @@ def test_edit_form_rendered_with_panels(self):\n         modal_workflow_script = soup.select_one(f'script[src=\"{modal_workflow_js}\"]')\n         self.assertIsNotNone(modal_workflow_script)\n \n-    def test_field_permissions(self):\n-        self.user.is_superuser = False\n-        self.user.save()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            ),\n-            Permission.objects.get(\n-                content_type__app_label=self.object._meta.app_label,\n-                codename=get_permission_codename(\"change\", self.object._meta),\n-            ),\n-        )\n-\n-        response = self.client.get(self.url)\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(list(response.context[\"form\"].fields), [\"name\"])\n-\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                codename=\"can_set_release_date\",\n-            )\n-        )\n-\n-        response = self.client.get(self.url)\n-        self.assertEqual(response.status_code, 200)\n-        self.assertEqual(\n-            list(response.context[\"form\"].fields), [\"name\", \"release_date\"]\n-        )\n-\n \n class TestDefaultMessages(WagtailTestUtils, TestCase):\n     def setUp(self):"
        },
        {
          "filename": "wagtail/admin/views/generic/models.py",
          "status": "modified",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -27,7 +27,6 @@\n from wagtail.actions.unpublish import UnpublishAction\n from wagtail.admin import messages\n from wagtail.admin.filters import WagtailFilterSet\n-from wagtail.admin.forms.models import WagtailAdminModelForm\n from wagtail.admin.forms.search import SearchForm\n from wagtail.admin.panels import get_edit_handler\n from wagtail.admin.ui.components import Component, MediaContainer\n@@ -617,24 +616,6 @@ def get_translations(self):\n             for locale in Locale.objects.all().exclude(id=self.locale.id)\n         ]\n \n-    def get_initial_form_instance(self):\n-        if self.locale:\n-            instance = self.model()\n-            instance.locale = self.locale\n-            return instance\n-\n-    def get_form_kwargs(self):\n-        if instance := self.get_initial_form_instance():\n-            # super().get_form_kwargs() will use self.object as the instance kwarg\n-            self.object = instance\n-        kwargs = super().get_form_kwargs()\n-\n-        form_class = self.get_form_class()\n-        # Add for_user support for PermissionedForm\n-        if issubclass(form_class, WagtailAdminModelForm):\n-            kwargs[\"for_user\"] = self.request.user\n-        return kwargs\n-\n     def save_instance(self):\n         \"\"\"\n         Called after the form is successfully validated - saves the object to the db\n@@ -805,13 +786,6 @@ def get_translations(self):\n             for translation in self.object.get_translations().select_related(\"locale\")\n         ]\n \n-    def get_form_kwargs(self):\n-        kwargs = super().get_form_kwargs()\n-        form_class = self.get_form_class()\n-        if issubclass(form_class, WagtailAdminModelForm):\n-            kwargs[\"for_user\"] = self.request.user\n-        return kwargs\n-\n     def save_instance(self):\n         \"\"\"\n         Called after the form is successfully validated - saves the object to the db."
        },
        {
          "filename": "wagtail/contrib/settings/tests/generic/test_admin.py",
          "status": "modified",
          "additions": 1,
          "deletions": 88,
          "patch": "@@ -14,7 +14,6 @@\n     PanelGenericSettings,\n     TabbedGenericSettings,\n     TestGenericSetting,\n-    TestPermissionedGenericSetting,\n )\n from wagtail.test.utils import WagtailTestUtils\n \n@@ -77,11 +76,6 @@ def edit_url(self, setting):\n class TestGenericSettingCreateView(BaseTestGenericSettingView):\n     def setUp(self):\n         self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -113,51 +107,14 @@ def test_file_upload_multipart(self):\n         # Ensure the form supports file uploads\n         self.assertContains(response, 'enctype=\"multipart/form-data\"')\n \n-    def test_create_restricted_field_without_permission(self):\n-        self.user.is_superuser = False\n-        self.user.save()\n-\n-        self.assertFalse(TestPermissionedGenericSetting.objects.exists())\n-        response = self.post(\n-            post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n-            setting=TestPermissionedGenericSetting,\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        settings = TestPermissionedGenericSetting.objects.get()\n-        self.assertEqual(settings.title, \"test\")\n-        self.assertEqual(settings.sensitive_email, \"\")\n-\n-    def test_create_restricted_field(self):\n-        self.user.is_superuser = False\n-        self.user.save()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")\n-        )\n-        self.assertFalse(TestPermissionedGenericSetting.objects.exists())\n-        response = self.post(\n-            post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n-            setting=TestPermissionedGenericSetting,\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        settings = TestPermissionedGenericSetting.objects.get()\n-        self.assertEqual(settings.title, \"test\")\n-        self.assertEqual(settings.sensitive_email, \"test@example.com\")\n-\n \n class TestGenericSettingEditView(BaseTestGenericSettingView):\n     def setUp(self):\n         self.test_setting = TestGenericSetting()\n         self.test_setting.title = \"Setting title\"\n         self.test_setting.save()\n \n-        self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n+        self.login()\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -196,50 +153,6 @@ def test_for_request(self):\n             expected_url=f\"{url}{TestGenericSetting.objects.first().pk}/\",\n         )\n \n-    def test_edit_restricted_field(self):\n-        test_setting = TestPermissionedGenericSetting()\n-        test_setting.sensitive_email = \"test@example.com\"\n-        test_setting.save()\n-        self.user.is_superuser = False\n-        self.user.save()\n-\n-        self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")\n-        )\n-\n-        response = self.get(setting=TestPermissionedGenericSetting)\n-        self.assertEqual(response.status_code, 200)\n-        self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n-\n-        response = self.post(\n-            setting=TestPermissionedGenericSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        test_setting.refresh_from_db()\n-        self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")\n-\n-    def test_edit_restricted_field_without_permission(self):\n-        test_setting = TestPermissionedGenericSetting()\n-        test_setting.sensitive_email = \"test@example.com\"\n-        test_setting.save()\n-        self.user.is_superuser = False\n-        self.user.save()\n-\n-        response = self.get(setting=TestPermissionedGenericSetting)\n-        self.assertEqual(response.status_code, 200)\n-        self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n-\n-        response = self.post(\n-            setting=TestPermissionedGenericSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        test_setting.refresh_from_db()\n-        self.assertEqual(test_setting.sensitive_email, \"test@example.com\")\n-\n \n class TestAdminPermission(WagtailTestUtils, TestCase):\n     def test_registered_permission(self):"
        },
        {
          "filename": "wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "status": "modified",
          "additions": 3,
          "deletions": 92,
          "patch": "@@ -14,7 +14,6 @@\n     IconSiteSetting,\n     PanelSiteSettings,\n     TabbedSiteSettings,\n-    TestPermissionedSiteSetting,\n     TestSiteSetting,\n )\n from wagtail.test.utils import WagtailTestUtils\n@@ -73,11 +72,6 @@ def edit_url(self, setting, site_pk=1):\n class TestSiteSettingCreateView(BaseTestSiteSettingView):\n     def setUp(self):\n         self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -109,55 +103,18 @@ def test_file_upload_multipart(self):\n         # Ensure the form supports file uploads\n         self.assertContains(response, 'enctype=\"multipart/form-data\"')\n \n-    def test_create_restricted_field_without_permission(self):\n-        self.user.is_superuser = False\n-        self.user.save()\n-\n-        self.assertFalse(TestPermissionedSiteSetting.objects.exists())\n-        response = self.post(\n-            post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n-            setting=TestPermissionedSiteSetting,\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        settings = TestPermissionedSiteSetting.objects.get()\n-        self.assertEqual(settings.title, \"test\")\n-        self.assertEqual(settings.sensitive_email, \"\")\n-\n-    def test_create_restricted_field(self):\n-        self.user.is_superuser = False\n-        self.user.save()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")\n-        )\n-        self.assertFalse(TestPermissionedSiteSetting.objects.exists())\n-        response = self.post(\n-            post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n-            setting=TestPermissionedSiteSetting,\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        settings = TestPermissionedSiteSetting.objects.get()\n-        self.assertEqual(settings.title, \"test\")\n-        self.assertEqual(settings.sensitive_email, \"test@example.com\")\n-\n \n class TestSiteSettingEditView(BaseTestSiteSettingView):\n     def setUp(self):\n-        self.default_site = Site.objects.get(is_default_site=True)\n+        default_site = Site.objects.get(is_default_site=True)\n \n         self.test_setting = TestSiteSetting()\n         self.test_setting.title = \"Site title\"\n         self.test_setting.email = \"initial@example.com\"\n-        self.test_setting.site = self.default_site\n+        self.test_setting.site = default_site\n         self.test_setting.save()\n \n-        self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n+        self.login()\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -201,52 +158,6 @@ def test_get_redirect_to_relevant_instance_invalid(self):\n         response = self.client.get(url)\n         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n \n-    def test_edit_restricted_field(self):\n-        test_setting = TestPermissionedSiteSetting()\n-        test_setting.sensitive_email = \"test@example.com\"\n-        test_setting.site = self.default_site\n-        test_setting.save()\n-        self.user.is_superuser = False\n-        self.user.save()\n-\n-        self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")\n-        )\n-\n-        response = self.get(setting=TestPermissionedSiteSetting)\n-        self.assertEqual(response.status_code, 200)\n-        self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n-\n-        response = self.post(\n-            setting=TestPermissionedSiteSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        test_setting.refresh_from_db()\n-        self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")\n-\n-    def test_edit_restricted_field_without_permission(self):\n-        test_setting = TestPermissionedSiteSetting()\n-        test_setting.sensitive_email = \"test@example.com\"\n-        test_setting.site = self.default_site\n-        test_setting.save()\n-        self.user.is_superuser = False\n-        self.user.save()\n-\n-        response = self.get(setting=TestPermissionedSiteSetting)\n-        self.assertEqual(response.status_code, 200)\n-        self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n-\n-        response = self.post(\n-            setting=TestPermissionedSiteSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n-        )\n-        self.assertEqual(response.status_code, 302)\n-\n-        test_setting.refresh_from_db()\n-        self.assertEqual(test_setting.sensitive_email, \"test@example.com\")\n-\n \n @override_settings(\n     ALLOWED_HOSTS=[\"testserver\", \"example.com\", \"noneoftheabove.example.com\"]"
        },
        {
          "filename": "wagtail/snippets/views/snippets.py",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -235,6 +235,22 @@ def run_after_hook(self):\n     def _get_action_menu(self):\n         return SnippetActionMenu(self.request, view=self.view_name, model=self.model)\n \n+    def _get_initial_form_instance(self):\n+        instance = self.model()\n+\n+        # Set locale of the new instance\n+        if self.locale:\n+            instance.locale = self.locale\n+\n+        return instance\n+\n+    def get_form_kwargs(self):\n+        return {\n+            **super().get_form_kwargs(),\n+            \"instance\": self._get_initial_form_instance(),\n+            \"for_user\": self.request.user,\n+        }\n+\n     def get_side_panels(self):\n         side_panels = [\n             SnippetStatusSidePanel(\n@@ -294,6 +310,9 @@ def _get_action_menu(self):\n             locked_for_user=self.locked_for_user,\n         )\n \n+    def get_form_kwargs(self):\n+        return {**super().get_form_kwargs(), \"for_user\": self.request.user}\n+\n     def get_side_panels(self):\n         side_panels = [\n             SnippetStatusSidePanel("
        },
        {
          "filename": "wagtail/test/testapp/migrations/0034_testpermissionedgenericsetting_and_more.py",
          "status": "removed",
          "additions": 0,
          "deletions": 42,
          "patch": "@@ -1,42 +0,0 @@\n-# Generated by Django 4.2.11 on 2024-04-25 15:51\n-\n-from django.db import migrations, models\n-import django.db.models.deletion\n-\n-\n-class Migration(migrations.Migration):\n-\n-    dependencies = [\n-        ('wagtailcore', '0091_remove_revision_submitted_for_moderation'),\n-        ('tests', '0033_customcopyformpage'),\n-    ]\n-\n-    operations = [\n-        migrations.CreateModel(\n-            name='TestPermissionedGenericSetting',\n-            fields=[\n-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n-                ('title', models.CharField(max_length=100)),\n-                ('sensitive_email', models.EmailField(max_length=50)),\n-            ],\n-            options={\n-                'permissions': [('can_edit_sensitive_email_generic_setting', 'Can edit sensitive email generic setting.')],\n-            },\n-        ),\n-        migrations.AlterModelOptions(\n-            name='featurecompletetoy',\n-            options={'permissions': [('can_set_release_date', 'Can set release date')]},\n-        ),\n-        migrations.CreateModel(\n-            name='TestPermissionedSiteSetting',\n-            fields=[\n-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n-                ('title', models.CharField(max_length=100)),\n-                ('sensitive_email', models.EmailField(max_length=50)),\n-                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),\n-            ],\n-            options={\n-                'permissions': [('can_edit_sensitive_email_site_setting', 'Can edit sensitive email site setting.')],\n-            },\n-        ),\n-    ]"
        },
        {
          "filename": "wagtail/test/testapp/models.py",
          "status": "modified",
          "additions": 0,
          "deletions": 46,
          "patch": "@@ -1640,49 +1640,6 @@ class TestGenericSetting(BaseGenericSetting):\n     email = models.EmailField(max_length=50)\n \n \n-@register_setting\n-class TestPermissionedGenericSetting(BaseGenericSetting):\n-    title = models.CharField(max_length=100)\n-    sensitive_email = models.EmailField(max_length=50)\n-\n-    panels = [\n-        FieldPanel(\"title\"),\n-        FieldPanel(\n-            \"sensitive_email\",\n-            permission=\"tests.can_edit_sensitive_email_generic_setting\",\n-        ),\n-    ]\n-\n-    class Meta:\n-        permissions = [\n-            (\n-                \"can_edit_sensitive_email_generic_setting\",\n-                \"Can edit sensitive email generic setting.\",\n-            ),\n-        ]\n-\n-\n-@register_setting\n-class TestPermissionedSiteSetting(BaseSiteSetting):\n-    title = models.CharField(max_length=100)\n-    sensitive_email = models.EmailField(max_length=50)\n-\n-    panels = [\n-        FieldPanel(\"title\"),\n-        FieldPanel(\n-            \"sensitive_email\", permission=\"tests.can_edit_sensitive_email_site_setting\"\n-        ),\n-    ]\n-\n-    class Meta:\n-        permissions = [\n-            (\n-                \"can_edit_sensitive_email_site_setting\",\n-                \"Can edit sensitive email site setting.\",\n-            ),\n-        ]\n-\n-\n @register_setting\n class ImportantPagesSiteSetting(BaseSiteSetting):\n     sign_up_page = models.ForeignKey(\n@@ -2272,9 +2229,6 @@ def is_cool(self):\n     def __str__(self):\n         return f\"{self.name} ({self.release_date})\"\n \n-    class Meta:\n-        permissions = [(\"can_set_release_date\", \"Can set release date\")]\n-\n \n class PurgeRevisionsProtectedTestModel(models.Model):\n     revision = models.OneToOneField("
        },
        {
          "filename": "wagtail/test/testapp/views.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -227,7 +227,7 @@ class FeatureCompleteToyViewSet(ModelViewSet):\n \n     panels = [\n         FieldPanel(\"name\"),\n-        FieldPanel(\"release_date\", permission=\"tests.can_set_release_date\"),\n+        FieldPanel(\"release_date\"),\n     ]\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 6,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "782aa0e16b48d33a3c964c7fee9f5724478e2015",
            "date": "2025-01-14T10:00:09Z",
            "author_login": "TARishabh"
          },
          {
            "sha": "cb11ec3e01899825e7d00e6791acdb95ccd7ceed",
            "date": "2025-01-14T08:44:47Z",
            "author_login": "ayaan-qadri"
          },
          {
            "sha": "75e07498f42c707089ac9e2371a29986f9e25abd",
            "date": "2024-12-18T12:52:13Z",
            "author_login": "tomusher"
          },
          {
            "sha": "d20c1b66bf0db9df13eea8b2d2be2fc2a2b98828",
            "date": "2025-01-13T13:05:06Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "da12f4a284f21a485f3191740563f507198a6e9a",
            "date": "2025-01-06T13:17:56Z",
            "author_login": "laymonage"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-280",
    "description": "Wagtail is an open source content management system built on Django. In affected versions if a model has been made available for editing through the `wagtail.contrib.settings` module or `ModelViewSet`, and the `permission` argument on `FieldPanel` has been used to further restrict access to one or more fields of the model, a user with edit permission over the model but not the specific field can craft an HTTP POST request that bypasses the permission check on the individual field, allowing them to update its value. This vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, or by a user who has not been granted edit access to the model in question. The editing interfaces for pages and snippets are also unaffected. Patched versions have been released as Wagtail 6.0.3 and 6.1. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability as follows: 1.For models registered through `ModelViewSet`, register the model as a snippet instead; 2. For settings models, place the restricted fields in a separate settings model, and configure permission at the model level.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-02T07:15:20.967",
    "last_modified": "2024-11-21T09:15:55.913",
    "fix_date": "2024-05-01T11:55:05Z"
  },
  "references": [
    {
      "url": "https://docs.wagtail.org/en/stable/extending/generic_views.html#modelviewset",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://docs.wagtail.org/en/stable/reference/contrib/settings.html",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://docs.wagtail.org/en/stable/reference/pages/panels.html#wagtail.admin.panels.FieldPanel.permission",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-w2v8-php4-p8hc",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://docs.wagtail.org/en/stable/extending/generic_views.html#modelviewset",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://docs.wagtail.org/en/stable/reference/contrib/settings.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://docs.wagtail.org/en/stable/reference/pages/panels.html#wagtail.admin.panels.FieldPanel.permission",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/ab2a5d82b4ee3c909d2456704388ccf90e367c9b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-w2v8-php4-p8hc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.050024",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wagtail",
    "owner": "wagtail",
    "created_at": "2014-02-03T12:41:59Z",
    "updated_at": "2025-01-14T14:01:28Z",
    "pushed_at": "2025-01-14T10:01:52Z",
    "size": 227820,
    "stars": 18619,
    "forks": 3952,
    "open_issues": 983,
    "watchers": 18619,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 8266424,
      "JavaScript": 1140099,
      "TypeScript": 556344,
      "HTML": 524532,
      "SCSS": 229702,
      "Shell": 6841,
      "CSS": 2719,
      "Dockerfile": 2038,
      "Makefile": 1389,
      "MDX": 271
    },
    "commit_activity": {
      "total_commits_last_year": 1489,
      "avg_commits_per_week": 28.634615384615383,
      "days_active_last_year": 270
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:05:24.057199"
  }
}