{
  "cve_id": "CVE-2024-32886",
  "github_data": {
    "repository": "vitessio/vitess",
    "fix_commit": "2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df",
    "related_commits": [
      "2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df",
      "9df4b66550e46b5d7079e21ed0e1b0f49f92b055",
      "c46dc5b6a4329a10589ca928392218d96031ac8d",
      "d438adf7e34a6cf00fe441db80842ec669a99202",
      "2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df",
      "9df4b66550e46b5d7079e21ed0e1b0f49f92b055",
      "c46dc5b6a4329a10589ca928392218d96031ac8d",
      "d438adf7e34a6cf00fe441db80842ec669a99202"
    ],
    "patch_url": "https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df.patch",
    "fix_commit_details": {
      "sha": "2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df",
      "commit_date": "2024-05-08T10:21:33Z",
      "author": {
        "login": "dbussink",
        "type": "User",
        "stats": {
          "total_commits": 407,
          "average_weekly_commits": 0.6038575667655787,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 120
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-649x-hxfx-57j2",
        "length": 477,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 80,
        "additions": 68,
        "deletions": 12
      },
      "files": [
        {
          "filename": "go/mysql/collations/charset/convert.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -72,7 +72,7 @@ func convertSlow(dst []byte, dstCharset Charset, src []byte, srcCharset Charset)\n \n \tfor len(src) > 0 {\n \t\tcp, width := srcCharset.DecodeRune(src)\n-\t\tif cp == utf8.RuneError && width < 3 {\n+\t\tif cp == utf8.RuneError {\n \t\t\tfailed++\n \t\t\tcp = '?'\n \t\t}"
        },
        {
          "filename": "go/mysql/collations/charset/helpers.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -41,7 +41,7 @@ func Validate(charset Charset, input []byte) bool {\n \t}\n \tfor len(input) > 0 {\n \t\tr, size := charset.DecodeRune(input)\n-\t\tif r == RuneError && size < 2 {\n+\t\tif r == RuneError {\n \t\t\treturn false\n \t\t}\n \t\tinput = input[size:]"
        },
        {
          "filename": "go/mysql/collations/charset/unicode/utf16.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -67,7 +67,7 @@ func (Charset_utf16be) EncodeRune(dst []byte, r rune) int {\n \n func (Charset_utf16be) DecodeRune(b []byte) (rune, int) {\n \tif len(b) < 2 {\n-\t\treturn utf8.RuneError, 0\n+\t\treturn utf8.RuneError, len(b)\n \t}\n \n \tr1 := uint16(b[1]) | uint16(b[0])<<8\n@@ -129,7 +129,7 @@ func (Charset_utf16le) EncodeRune(dst []byte, r rune) int {\n \n func (Charset_utf16le) DecodeRune(b []byte) (rune, int) {\n \tif len(b) < 2 {\n-\t\treturn utf8.RuneError, 0\n+\t\treturn utf8.RuneError, len(b)\n \t}\n \n \tr1 := uint16(b[0]) | uint16(b[1])<<8\n@@ -185,7 +185,7 @@ func (Charset_ucs2) EncodeRune(dst []byte, r rune) int {\n \n func (Charset_ucs2) DecodeRune(p []byte) (rune, int) {\n \tif len(p) < 2 {\n-\t\treturn utf8.RuneError, 0\n+\t\treturn utf8.RuneError, len(p)\n \t}\n \treturn rune(p[0])<<8 | rune(p[1]), 2\n }"
        },
        {
          "filename": "go/mysql/collations/charset/unicode/utf32.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -49,7 +49,7 @@ func (Charset_utf32) EncodeRune(dst []byte, r rune) int {\n \n func (Charset_utf32) DecodeRune(p []byte) (rune, int) {\n \tif len(p) < 4 {\n-\t\treturn utf8.RuneError, 0\n+\t\treturn utf8.RuneError, len(p)\n \t}\n \treturn (rune(p[0]) << 24) | (rune(p[1]) << 16) | (rune(p[2]) << 8) | rune(p[3]), 4\n }"
        },
        {
          "filename": "go/vt/vtgate/evalengine/compiler_asm.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4733,7 +4733,8 @@ func (asm *assembler) Fn_REGEXP_REPLACE_slow(merged collations.TypedCollation, f\n \n func (asm *assembler) Introduce(offset int, t sqltypes.Type, col collations.TypedCollation) {\n \tasm.emit(func(env *ExpressionEnv) int {\n-\t\targ := evalToBinary(env.vm.stack[env.vm.sp-offset])\n+\t\tvar arg *evalBytes\n+\t\targ, env.vm.err = introducerCast(env.vm.stack[env.vm.sp-offset], col.Collation)\n \t\targ.tt = int16(t)\n \t\targ.col = col\n \t\tenv.vm.stack[env.vm.sp-offset] = arg"
        },
        {
          "filename": "go/vt/vtgate/evalengine/compiler_test.go",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -503,6 +503,30 @@ func TestCompilerSingle(t *testing.T) {\n \t\t\texpression: `week('2024-12-31', 5)`,\n \t\t\tresult:     `INT64(53)`,\n \t\t},\n+\t\t{\n+\t\t\texpression: `convert(0xFF using utf16)`,\n+\t\t\tresult:     `VARCHAR(\"\u00ff\")`,\n+\t\t},\n+\t\t{\n+\t\t\texpression: `_utf16 0xFF`,\n+\t\t\tresult:     `VARCHAR(\"\u00ff\")`,\n+\t\t},\n+\t\t{\n+\t\t\texpression: `convert(0xFF using utf32)`,\n+\t\t\tresult:     `NULL`,\n+\t\t},\n+\t\t{\n+\t\t\texpression: `cast(_utf32 0xFF as binary)`,\n+\t\t\tresult:     `VARBINARY(\"\\x00\\x00\\x00\\xff\")`,\n+\t\t},\n+\t\t{\n+\t\t\texpression: `cast(_utf32 0x00FF as binary)`,\n+\t\t\tresult:     `VARBINARY(\"\\x00\\x00\\x00\\xff\")`,\n+\t\t},\n+\t\t{\n+\t\t\texpression: `cast(_utf32 0x0000FF as binary)`,\n+\t\t\tresult:     `VARBINARY(\"\\x00\\x00\\x00\\xff\")`,\n+\t\t},\n \t}\n \n \tfor _, tc := range testCases {"
        },
        {
          "filename": "go/vt/vtgate/evalengine/expr_collate.go",
          "status": "modified",
          "additions": 35,
          "deletions": 4,
          "patch": "@@ -18,6 +18,7 @@ package evalengine\n \n import (\n \t\"vitess.io/vitess/go/mysql/collations\"\n+\t\"vitess.io/vitess/go/mysql/collations/charset\"\n \t\"vitess.io/vitess/go/mysql/collations/colldata\"\n \t\"vitess.io/vitess/go/sqltypes\"\n \tquerypb \"vitess.io/vitess/go/vt/proto/query\"\n@@ -217,15 +218,45 @@ func (ca *collationAggregation) result() collations.TypedCollation {\n \n var _ Expr = (*IntroducerExpr)(nil)\n \n+func introducerCast(e eval, col collations.ID) (*evalBytes, error) {\n+\tif col == collations.CollationBinaryID {\n+\t\treturn evalToBinary(e), nil\n+\t}\n+\n+\tvar bytes []byte\n+\tif b, ok := e.(*evalBytes); !ok {\n+\t\tbytes = b.ToRawBytes()\n+\t} else {\n+\t\tcs := colldata.Lookup(col).Charset()\n+\t\tbytes = b.bytes\n+\t\t// We only need to pad here for encodings that have a minimum\n+\t\t// character byte width larger than 1, which is all UTF-16\n+\t\t// variations and UTF-32.\n+\t\tswitch cs.(type) {\n+\t\tcase charset.Charset_utf16, charset.Charset_utf16le, charset.Charset_ucs2:\n+\t\t\tif len(bytes)%2 != 0 {\n+\t\t\t\tbytes = append([]byte{0}, bytes...)\n+\t\t\t}\n+\t\tcase charset.Charset_utf32:\n+\t\t\tif mod := len(bytes) % 4; mod != 0 {\n+\t\t\t\tbytes = append(make([]byte, 4-mod), bytes...)\n+\t\t\t}\n+\t\t}\n+\t}\n+\ttypedcol := collations.TypedCollation{\n+\t\tCollation:    col,\n+\t\tCoercibility: collations.CoerceCoercible,\n+\t\tRepertoire:   collations.RepertoireASCII,\n+\t}\n+\treturn newEvalText(bytes, typedcol), nil\n+}\n+\n func (expr *IntroducerExpr) eval(env *ExpressionEnv) (eval, error) {\n \te, err := expr.Inner.eval(env)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tif expr.TypedCollation.Collation == collations.CollationBinaryID {\n-\t\treturn evalToBinary(e), nil\n-\t}\n-\treturn evalToVarchar(e, expr.TypedCollation.Collation, false)\n+\treturn introducerCast(e, expr.TypedCollation.Collation)\n }\n \n func (expr *IntroducerExpr) typeof(env *ExpressionEnv, fields []*querypb.Field) (sqltypes.Type, typeFlag) {"
        },
        {
          "filename": "go/vt/vtgate/evalengine/translate.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -361,7 +361,7 @@ func (ast *astCompiler) translateIntroducerExpr(introduced *sqlparser.Introducer\n \t\tcase collations.CollationBinaryID:\n \t\t\tlit.inner = evalToBinary(lit.inner)\n \t\tdefault:\n-\t\t\tlit.inner, err = evalToVarchar(lit.inner, collation, false)\n+\t\t\tlit.inner, err = introducerCast(lit.inner, collation)\n \t\t\tif err != nil {\n \t\t\t\treturn nil, err\n \t\t\t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fd0ffeb17b01d740a5a5116806300ae15ea15b04",
            "date": "2025-01-14T05:49:31Z",
            "author_login": "GuptaManan100"
          },
          {
            "sha": "a9d6969b3035f7df0578a476eba230d09408dbb4",
            "date": "2025-01-13T17:45:34Z",
            "author_login": "timvaillancourt"
          },
          {
            "sha": "ec29bdbebb4ba17ff2e385960d0f6f75fd569f2e",
            "date": "2025-01-13T09:35:25Z",
            "author_login": "rohit-nayak-ps"
          },
          {
            "sha": "ac8bbc6586ba462dc3a48e8064ec219bee7aac2c",
            "date": "2025-01-13T06:50:01Z",
            "author_login": "shlomi-noach"
          },
          {
            "sha": "f3cafe81a24ed994e0488048411b1ec7209c250c",
            "date": "2025-01-13T06:49:13Z",
            "author_login": "shlomi-noach"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "Vitess is a database clustering system for horizontal scaling of MySQL. When executing the following simple query, the `vtgate` will go into an endless loop that also keeps consuming memory and eventually will run out of memory. This vulnerability is fixed in 19.0.4, 18.0.5, and 17.0.7.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-08T14:15:08.310",
    "last_modified": "2024-11-21T09:15:56.327",
    "fix_date": "2024-05-08T10:21:33Z"
  },
  "references": [
    {
      "url": "https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.876966",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vitess",
    "owner": "vitessio",
    "created_at": "2013-06-27T21:20:28Z",
    "updated_at": "2025-01-14T12:28:35Z",
    "pushed_at": "2025-01-14T05:49:31Z",
    "size": 435033,
    "stars": 18957,
    "forks": 2121,
    "open_issues": 811,
    "watchers": 18957,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 36030309,
      "Java": 990686,
      "TypeScript": 719464,
      "Yacc": 190192,
      "Shell": 144847,
      "SCSS": 42117,
      "Smarty": 40107,
      "Assembly": 29554,
      "Dockerfile": 23032,
      "Makefile": 16729,
      "CSS": 10774,
      "JavaScript": 4145,
      "Perl": 3161,
      "Python": 1955,
      "HCL": 959,
      "HTML": 807
    },
    "commit_activity": {
      "total_commits_last_year": 1209,
      "avg_commits_per_week": 23.25,
      "days_active_last_year": 283
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:09:55.084417"
  }
}