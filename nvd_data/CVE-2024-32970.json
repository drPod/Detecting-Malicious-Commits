{
  "cve_id": "CVE-2024-32970",
  "github_data": {
    "repository": "phlex-ruby/phlex",
    "fix_commit": "da8f94342a84cff9d78c98bcc3b3604ee2e577d2",
    "related_commits": [
      "da8f94342a84cff9d78c98bcc3b3604ee2e577d2",
      "da8f94342a84cff9d78c98bcc3b3604ee2e577d2"
    ],
    "patch_url": "https://github.com/phlex-ruby/phlex/commit/da8f94342a84cff9d78c98bcc3b3604ee2e577d2.patch",
    "fix_commit_details": {
      "sha": "da8f94342a84cff9d78c98bcc3b3604ee2e577d2",
      "commit_date": "2024-04-29T11:26:05Z",
      "author": {
        "login": "joeldrapper",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Browser tests for XSS",
        "length": 21,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 6922,
        "additions": 6913,
        "deletions": 9
      },
      "files": [
        {
          "filename": ".gitignore",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -14,3 +14,4 @@ Gemfile.lock\n .rubocop-*\n .covered.db\n .DS_Store\n+.gem"
        },
        {
          "filename": ".rubocop.yml",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -35,3 +35,6 @@ Style/ArgumentsForwarding:\n # We need to disable this cop because it\u2019s not compatible with TruffleRuby 23.1, which still needs a `require \"set\"`\n Lint/RedundantRequireStatement:\n   Enabled: false\n+\n+Lint/UnreachableLoop:\n+  Enabled: false"
        },
        {
          "filename": "Gemfile",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@ group :test do\n \t\tgem \"async\"\n \tend\n \tgem \"concurrent-ruby\"\n+\tgem \"selenium-webdriver\"\n end\n \n group :development do"
        },
        {
          "filename": "browser_tests.rb",
          "status": "added",
          "additions": 266,
          "deletions": 0,
          "patch": "@@ -0,0 +1,266 @@\n+#!/usr/bin/env ruby\n+# frozen_string_literal: true\n+\n+require \"phlex\"\n+require \"selenium-webdriver\"\n+\n+ASCII_CHARS = (0..127).to_set(&:chr)\n+\n+class Layout < Phlex::HTML\n+\tdef view_template(&block)\n+\t\tdoctype\n+\t\thtml do\n+\t\t\thead do\n+\t\t\t\tmeta(charset: \"utf-8\")\n+\t\t\tend\n+\n+\t\t\tbody(&block)\n+\t\tend\n+\tend\n+end\n+\n+class JavaScriptLinks < Phlex::HTML\n+\tdef initialize(char)\n+\t\t@char = char\n+\tend\n+\n+\tdef view_template\n+\t\trender Layout do\n+\t\t\t# Standard JavaScript link\n+\t\t\ta(href: \"javascript:alert(1)\") { \"x\" }\n+\n+\t\t\t# With capitalization\n+\t\t\ta(href: \"Javascript:alert(1)\") { \"x\" }\n+\n+\t\t\t# With extra \"javascript:\" prefixes\n+\t\t\ta(href: \"javascript:javascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascript:javascript:javascript:alert(1)\") { \"x\" }\n+\n+\t\t\t# With extra \"javascript:\" prefixes and capitalization\n+\t\t\ta(href: \"javascript:Javascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascript:javascript:alert(1)\") { \"x\" }\n+\n+\t\t\ta(href: \"#{@char}javascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"j#{@char}avascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"ja#{@char}vascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"jav#{@char}ascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"java#{@char}script:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javas#{@char}cript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javasc#{@char}ript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascr#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascr#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascri#{@char}pt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascrip#{@char}t:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascript#{@char}:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascript:#{@char}alert(1)\") { \"x\" }\n+\n+\t\t\ta(href: \"#{@char}#{@char}javascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"j#{@char}#{@char}avascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"ja#{@char}#{@char}vascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"jav#{@char}#{@char}ascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"java#{@char}#{@char}script:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javas#{@char}#{@char}cript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javasc#{@char}#{@char}ript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascr#{@char}#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascr#{@char}#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascri#{@char}#{@char}pt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascrip#{@char}#{@char}t:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascript#{@char}#{@char}:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"javascript:#{@char}#{@char}alert(1)\") { \"x\" }\n+\n+\t\t\ta(href: \"#{@char}Javascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"J#{@char}avascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Ja#{@char}vascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Jav#{@char}ascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Java#{@char}script:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javas#{@char}cript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javasc#{@char}ript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascr#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascr#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascri#{@char}pt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascrip#{@char}t:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascript#{@char}:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascript:#{@char}alert(1)\") { \"x\" }\n+\n+\t\t\ta(href: \"#{@char}#{@char}Javascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"J#{@char}#{@char}avascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Ja#{@char}#{@char}vascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Jav#{@char}#{@char}ascript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Java#{@char}#{@char}script:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javas#{@char}#{@char}cript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javasc#{@char}#{@char}ript:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascr#{@char}#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascr#{@char}#{@char}ipt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascri#{@char}#{@char}pt:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascrip#{@char}#{@char}t:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascript#{@char}#{@char}:alert(1)\") { \"x\" }\n+\t\t\ta(href: \"Javascript:#{@char}#{@char}alert(1)\") { \"x\" }\n+\t\tend\n+\tend\n+end\n+\n+class XSSWithStrings < Phlex::HTML\n+\tdef view_template\n+\t\trender Layout do\n+\t\t\tFile.open(\"fixtures/xss.txt\") do |file|\n+\t\t\t\tfile.each_line do |line|\n+\t\t\t\t\tdiv(class: line) { line }\n+\t\t\t\tend\n+\t\t\tend\n+\t\tend\n+\tend\n+end\n+\n+class XSSWithSymbols < Phlex::HTML\n+\tdef view_template\n+\t\trender Layout do\n+\t\t\tFile.open(\"fixtures/xss.txt\") do |file|\n+\t\t\t\tfile.each_line do |line|\n+\t\t\t\t\tdiv(class: line.to_sym) { line.to_sym }\n+\t\t\t\tend\n+\t\t\tend\n+\t\tend\n+\tend\n+end\n+\n+class OnClick < Phlex::HTML\n+\tdef initialize(char)\n+\t\t@char = char\n+\tend\n+\n+\tdef view_template\n+\t\trender Layout do\n+\t\t\tignore_warnings { div(\"#{@char}onclick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"o#{@char}nclick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"on#{@char}click\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onc#{@char}lick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncl#{@char}ick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncli#{@char}ck\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclic#{@char}k\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclick#{@char}\" => \"alert(1)\") { \"x\" } }\n+\n+\t\t\tignore_warnings { div(\"#{@char}#{@char}onclick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"o#{@char}#{@char}nclick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"on#{@char}#{@char}click\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onc#{@char}#{@char}lick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncl#{@char}#{@char}ick\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncli#{@char}#{@char}ck\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclic#{@char}#{@char}k\" => \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclick#{@char}#{@char}\" => \"alert(1)\") { \"x\" } }\n+\n+\t\t\tignore_warnings { div(\"#{@char}onclick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"o#{@char}nclick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"on#{@char}click\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onc#{@char}lick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncl#{@char}ick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncli#{@char}ck\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclic#{@char}k\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclick#{@char}\": \"alert(1)\") { \"x\" } }\n+\n+\t\t\tignore_warnings { div(\"#{@char}#{@char}onclick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"o#{@char}#{@char}nclick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"on#{@char}#{@char}click\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onc#{@char}#{@char}lick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncl#{@char}#{@char}ick\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"oncli#{@char}#{@char}ck\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclic#{@char}#{@char}k\": \"alert(1)\") { \"x\" } }\n+\t\t\tignore_warnings { div(\"onclick#{@char}#{@char}\": \"alert(1)\") { \"x\" } }\n+\t\tend\n+\tend\n+\n+\tdef ignore_warnings\n+\t\tyield\n+\trescue ArgumentError\n+\t\t# ignore\n+\tend\n+end\n+\n+class Browser\n+\tMUTEX = { safari: Mutex.new, chrome: Mutex.new, firefox: Mutex.new }\n+\n+\tdef self.open(driver)\n+\t\tMUTEX.fetch(driver).synchronize do\n+\t\t\tbrowser = new(Selenium::WebDriver.for(driver))\n+\t\t\tyield(browser)\n+\t\t\tbrowser.quit\n+\t\tend\n+\tend\n+\n+\tdef self.open_each\n+\t\t[:safari, :chrome, :firefox].map do |driver|\n+\t\t\tThread.new do\n+\t\t\t\tself.open(driver) do |browser|\n+\t\t\t\t\tyield(browser)\n+\t\t\t\tend\n+\t\t\tend\n+\t\tend.each(&:join)\n+\tend\n+\n+\tdef initialize(driver)\n+\t\t@driver = driver\n+\tend\n+\n+\tattr_reader :driver\n+\n+\tdef load_string(string)\n+\t\tnavigate_to(\"data:text/html,#{ERB::Util.url_encode(string)}\")\n+\tend\n+\n+\tdef navigate_to(url)\n+\t\t@driver.navigate.to(url)\n+\tend\n+\n+\tdef execute_script(script)\n+\t\t@driver.execute_script(script)\n+\tend\n+\n+\tdef each_alert\n+\t\twhile (next_alert = alert)\n+\t\t\tyield(next_alert)\n+\t\tend\n+\tend\n+\n+\tdef alert\n+\t\t@driver.switch_to.alert\n+\trescue Selenium::WebDriver::Error::NoSuchAlertError\n+\t\tnil\n+\tend\n+\n+\tdef quit\n+\t\t@driver.quit\n+\tend\n+end\n+\n+Browser.open_each do |browser|\n+\tASCII_CHARS.each do |char|\n+\t\tbrowser.load_string(JavaScriptLinks.new(char).call)\n+\t\tbrowser.execute_script(\"document.querySelectorAll('a').forEach(function(a) { a.click(); });\")\n+\t\tbrowser.each_alert do |alert|\n+\t\t\tunless alert.text == \"Safari cannot open the page because the address is invalid.\"\n+\t\t\t\traise \"Failed with #{char.codepoints}\"\n+\t\t\tend\n+\n+\t\t\talert.accept\n+\t\tend\n+\n+\t\tbrowser.load_string(OnClick.new(char).call)\n+\t\tbrowser.execute_script(\"document.querySelectorAll('div').forEach(function(div) { div.click(); });\")\n+\t\tbrowser.each_alert do\n+\t\t\traise \"Failed with #{char.codepoints}\"\n+\t\tend\n+\tend\n+\n+\tbrowser.load_string(XSSWithStrings.new.call)\n+\tbrowser.execute_script(\"document.querySelectorAll('div').forEach(function(div) { div.click(); });\")\n+\n+\tif browser.alert\n+\t\traise \"Failed with strings\"\n+\tend\n+\n+\tbrowser.load_string(XSSWithSymbols.new.call)\n+\tbrowser.execute_script(\"document.querySelectorAll('div').forEach(function(div) { div.click(); });\")\n+\n+\tif browser.alert\n+\t\traise \"Failed with symbols\"\n+\tend\n+end"
        },
        {
          "filename": "fixtures/xss.txt",
          "status": "added",
          "additions": 6613,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "fixtures/xss/LICENSE.txt",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2018 \u0130smail Ta\u015fdelen\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
        },
        {
          "filename": "lib/phlex/sgml.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -382,10 +382,10 @@ def __attributes__(attributes, buffer = +\"\")\n \t\t\t\tend\n \n \t\t\t\tlower_name = name.downcase\n-\t\t\t\tnext if lower_name == \"href\" && v.to_s.downcase.tr(\"\\t \\n\", \"\").start_with?(\"javascript:\")\n+\t\t\t\tnext if lower_name == \"href\" && v.to_s.downcase.tr(\"^a-z:\",\t\"\").start_with?(\"javascript:\")\n \n \t\t\t\t# Detect unsafe attribute names. Attribute names are considered unsafe if they match an event attribute or include unsafe characters.\n-\t\t\t\tif HTML::EVENT_ATTRIBUTES.include?(lower_name) || name.match?(/[<>&\"']/)\n+\t\t\t\tif HTML::EVENT_ATTRIBUTES.include?(lower_name.tr(\"^a-z-\", \"\")) || name.match?(/[<>&\"']/)\n \t\t\t\t\traise ArgumentError, \"Unsafe attribute name detected: #{k}.\"\n \t\t\t\tend\n "
        },
        {
          "filename": "phlex.gemspec",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -19,13 +19,12 @@ Gem::Specification.new do |spec|\n \tspec.metadata[\"changelog_uri\"] = \"https://github.com/phlex-ruby/phlex/blob/main/CHANGELOG.md\"\n \tspec.metadata[\"funding_uri\"] = \"https://github.com/sponsors/joeldrapper\"\n \n-\t# Specify which files should be added to the gem when it is released.\n-\t# The `git ls-files -z` loads the files in the RubyGem that have been added into git.\n-\tspec.files = Dir.chdir(File.expand_path(__dir__)) do\n-\t\t`git ls-files -z`.split(\"\\x0\").reject do |f|\n-\t\t\t(f == __FILE__) || f.match(%r{\\A(?:(?:bin|test|spec|features|quickdraw)/|\\.(?:git|travis|circleci)|appveyor)})\n-\t\tend\n-\tend\n+\tspec.files = Dir[\n+\t\t\"README.md\",\n+\t\t\"LICENSE.txt\",\n+\t\t\"lib/**/*.rb\"\n+\t]\n+\n \tspec.require_paths = [\"lib\"]\n \n \tspec.metadata[\"rubygems_mfa_required\"] = \"true\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c6777bb365184cd55460f87885eee37a912434ad",
            "date": "2024-12-17T00:25:28Z",
            "author_login": "joeldrapper"
          },
          {
            "sha": "8e9239633cbbea1431338de1de63e7c72d8955d4",
            "date": "2024-12-17T00:24:38Z",
            "author_login": "joeldrapper"
          },
          {
            "sha": "3617dac19db283cf0176ae2df274f3a53adebad5",
            "date": "2024-12-12T18:28:42Z",
            "author_login": "marcoroth"
          },
          {
            "sha": "6384c957b3f7854e8d50f9d46fc910185973d62e",
            "date": "2024-11-26T21:17:59Z",
            "author_login": "joeldrapper"
          },
          {
            "sha": "9f29fa9cda0c7093ac779bef6b85f2a32ce441e6",
            "date": "2024-11-26T21:17:57Z",
            "author_login": "joeldrapper"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Phlex is a framework for building object-oriented views in Ruby. In affected versions there is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. Since the last two vulnerabilities https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g and https://github.com/phlex-ruby/phlex/security/advisories/GHSA-g7xq-xv8c-h98c, we have invested in extensive browser tests. It was these new tests that helped us uncover these issues. As of now the project exercises every possible attack vector the developers can think of \u2014 including enumerating every ASCII character, and we run these tests in Chrome, Firefox and Safari. Additionally, we test against a list of 6613 known XSS payloads (see: payloadbox/xss-payload-list). The reason these issues were not detected before is the escapes were working as designed. However, their design didn't take into account just how recklessly permissive browsers are when it comes to executing unsafe JavaScript via HTML attributes. If you render an `<a>` tag with an `href` attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user. If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user. Patches are available on RubyGems for all minor versions released in the last year. Users are advised to upgrade. Users unable to upgrade should configure a Content Security Policy that does not allow `unsafe-inline` which would effectively prevent this vulnerability from being exploited. Users who upgrade are also advised to configure a Content Security Policy header that does not allow `unsafe-inline`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-04-30T23:15:06.483",
    "last_modified": "2024-11-21T09:16:08.173",
    "fix_date": "2024-04-29T11:26:05Z"
  },
  "references": [
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/payloadbox/xss-payload-list",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/phlex-ruby/phlex/commit/da8f94342a84cff9d78c98bcc3b3604ee2e577d2",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/phlex-ruby/phlex/security/advisories/GHSA-9p57-h987-4vgx",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://rubygems.org/gems/phlex",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/payloadbox/xss-payload-list",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/phlex-ruby/phlex/commit/da8f94342a84cff9d78c98bcc3b3604ee2e577d2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/phlex-ruby/phlex/security/advisories/GHSA-9p57-h987-4vgx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://rubygems.org/gems/phlex",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.042964",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "phlex",
    "owner": "phlex-ruby",
    "created_at": "2022-06-01T14:40:16Z",
    "updated_at": "2025-01-12T10:02:31Z",
    "pushed_at": "2024-12-17T00:25:30Z",
    "size": 1152,
    "stars": 1323,
    "forks": 84,
    "open_issues": 4,
    "watchers": 1323,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 120411,
      "Shell": 255
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:33:27.564499"
  }
}