{
  "cve_id": "CVE-2024-32979",
  "github_data": {
    "repository": "nautobot/nautobot",
    "fix_commit": "42440ebd9b381534ad89d62420ebea00d703d64e",
    "related_commits": [
      "42440ebd9b381534ad89d62420ebea00d703d64e",
      "42440ebd9b381534ad89d62420ebea00d703d64e"
    ],
    "patch_url": "https://github.com/nautobot/nautobot/commit/42440ebd9b381534ad89d62420ebea00d703d64e.patch",
    "fix_commit_details": {
      "sha": "42440ebd9b381534ad89d62420ebea00d703d64e",
      "commit_date": "2024-04-30T14:29:41Z",
      "author": {
        "login": "glennmatthews",
        "type": "User",
        "stats": {
          "total_commits": 1756,
          "average_weekly_commits": 4.491048593350383,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 206
        }
      },
      "commit_message": {
        "title": "Fix quoting of query parameters in list view (#5646)",
        "length": 264,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 55,
        "additions": 41,
        "deletions": 14
      },
      "files": [
        {
          "filename": "changes/5646.security",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+Fixed a reflected-XSS vulnerability ([GHSA-jxgr-gcj5-cqqg](https://github.com/nautobot/nautobot/security/advisories/GHSA-jxgr-gcj5-cqqg)) in object-list view rendering of user-provided query parameters."
        },
        {
          "filename": "nautobot/core/templates/generic/object_list.html",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -74,7 +74,7 @@ <h1>{% block title %}{{ title }}{% endblock %}</h1>\n                     class=\"remove-filter-param\"\n                     title=\"Remove all items\"\n                     data-field-type=\"parent\"\n-                    data-field-value={{ field.name }}\n+                    data-field-value=\"{{ field.name }}\"\n             >\u00d7</span>\n             <ul class=\"filter-selection-rendered\">\n                 {% for value in field.values %}\n@@ -85,8 +85,8 @@ <h1>{% block title %}{{ title }}{% endblock %}</h1>\n                     <span\n                             class=\"filter-selection-choice-remove remove-filter-param\"\n                             data-field-type=\"child\"\n-                            data-field-parent={{ field.name }}\n-                            data-field-value={{ value.name }}\n+                            data-field-parent=\"{{ field.name }}\"\n+                            data-field-value=\"{{ value.name }}\"\n                     >\u00d7</span>{{ value.display }}\n                 </li>\n                 {% endfor %}"
        },
        {
          "filename": "nautobot/core/tests/test_views.py",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -242,6 +242,25 @@ def test_filtering_on_custom_select_filter_field(self):\n         self.assertInHTML(locations[0].name, response_content)\n         self.assertInHTML(locations[1].name, response_content)\n \n+    def test_filtering_crafted_query_params(self):\n+        \"\"\"Test for reflected-XSS vulnerability GHSA-jxgr-gcj5-cqqg.\"\"\"\n+        self.add_permissions(\"dcim.view_location\")\n+        query_param = \"?location_type=1 onmouseover=alert('hi') foo=bar\"\n+        url = reverse(\"dcim:location_list\") + query_param\n+        response = self.client.get(url)\n+        self.assertHttpStatus(response, 200)\n+        response_content = response.content.decode(response.charset)\n+        # The important thing here is that the data-field-parent and data-field-value are correctly quoted\n+        self.assertInHTML(\n+            \"\"\"\n+<span class=\"filter-selection-choice-remove remove-filter-param\"\n+      data-field-type=\"child\"\n+      data-field-parent=\"location_type\"\n+      data-field-value=\"1 onmouseover=alert(&#x27;hi&#x27;) foo=bar\"\n+>\u00d7</span>\"\"\",  # noqa: RUF001 - ambiguous-unicode-character-string\n+            response_content,\n+        )\n+\n \n class ForceScriptNameTestcase(TestCase):\n     \"\"\"Basic test to assert that `settings.FORCE_SCRIPT_NAME` works as intended.\"\"\""
        },
        {
          "filename": "nautobot/project-static/js/forms.js",
          "status": "modified",
          "additions": 18,
          "deletions": 11,
          "patch": "@@ -632,18 +632,19 @@ function initializeDynamicFilterForm(context){\n \n     // Remove applied filters\n     this_context.find(\".remove-filter-param\").on(\"click\", function(){\n-        let query_params = location.search;\n+        let query_params = new URLSearchParams(location.search);\n         let type = $(this).attr(\"data-field-type\");\n         let field_value = $(this).attr(\"data-field-value\");\n-        let query_string = location.search.substr(1).split(\"&\");\n \n         if (type === \"parent\") {\n-            query_string = query_string.filter(item => item.search(field_value) < 0);\n+            // Remove all instances of this query param\n+            query_params.delete(field_value);\n         } else {\n+            // Remove this specific instance of this query param\n             let parent = $(this).attr(\"data-field-parent\");\n-            query_string = query_string.filter(item => item.search(parent + \"=\" + field_value) < 0)\n+            query_params.delete(parent, field_value);\n         }\n-        location.replace(\"?\" + query_string.join(\"&\"))\n+        location.assign(\"?\" + query_params);\n     })\n \n     // On submit of filter form\n@@ -657,12 +658,18 @@ function initializeDynamicFilterForm(context){\n         q_field_phantom.val(q_field.val())\n         dynamic_form.append(q_field_phantom);\n \n-        // Get the serialize data from the forms and filter out query_params which values are empty e.g ?sam=&dan=2 becomes dan=2\n-        let dynamic_filter_form_query = $(\"#dynamic-filter-form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1]?.length || 0 )\n-        let default_filter_form_query = $(\"#default-filter form\").serialize().split(\"&\").filter(params => params.split(\"=\")[1]?.length || 0 )\n-        // Union Operation\n-        let search_query = [...new Set([...default_filter_form_query, ...dynamic_filter_form_query])].join(\"&\")\n-        location.replace(\"?\" + search_query)\n+        // Get the serialized data from the forms and:\n+        // 1) filter out query_params which values are empty e.g ?sam=&dan=2 becomes dan=2\n+        // 2) combine the two forms into a single set of data without duplicate entries\n+        let search_query = new URLSearchParams();\n+        let dynamic_query = new URLSearchParams(new FormData(document.getElementById(\"dynamic-filter-form\")));\n+        dynamic_query.forEach((value, key) => { if (value != \"\") { search_query.append(key, value); }});\n+        let default_query = new URLSearchParams(new FormData(document.getElementById(\"default-filter\").firstElementChild));\n+        default_query.forEach((value, key) => {\n+            if (value != \"\" && !search_query.has(key, value)) { search_query.append(key, value); }\n+        });\n+        $(\"#FilterForm_modal\").modal(\"hide\");\n+        location.assign(\"?\" + search_query);\n     })\n \n     // On submit of filter search form"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "082404e6cc63181ee2b47eae9cda5a6bec0601b2",
            "date": "2025-01-10T17:11:08Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "f979d876c9c747a129975124f213ee606d8846e8",
            "date": "2025-01-10T15:50:52Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "3e2f8b5787971c267c87a5f1ffdfda045fdd3eb9",
            "date": "2025-01-10T15:36:42Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "e5397443c821333bcfd193374458fb88ff45175f",
            "date": "2025-01-09T22:12:11Z",
            "author_login": "HanlinMiao"
          },
          {
            "sha": "64ae4d2b7f018dc4fb43beff1f3a3144ae15ef0a",
            "date": "2025-01-09T22:09:46Z",
            "author_login": "HanlinMiao"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:L",
    "cwe_id": "CWE-79",
    "description": "Nautobot is a Network Source of Truth and Network Automation Platform built as a web application atop the Django Python framework with a PostgreSQL or MySQL database. It was discovered that due to improper handling and escaping of user-provided query parameters, a maliciously crafted Nautobot URL could potentially be used to execute a Reflected Cross-Site Scripting (Reflected XSS) attack against users. All filterable object-list views in Nautobot are vulnerable. This issue has been fixed in Nautobot versions 1.6.20 and 2.2.3. There are no known workarounds for this vulnerability.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-05-01T11:15:47.407",
    "last_modified": "2024-11-21T09:16:09.433",
    "fix_date": "2024-04-30T14:29:41Z"
  },
  "references": [
    {
      "url": "https://github.com/nautobot/nautobot/commit/42440ebd9b381534ad89d62420ebea00d703d64e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5646",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5647",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-jxgr-gcj5-cqqg",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/commit/42440ebd9b381534ad89d62420ebea00d703d64e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5646",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/pull/5647",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/nautobot/nautobot/security/advisories/GHSA-jxgr-gcj5-cqqg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.046054",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nautobot",
    "owner": "nautobot",
    "created_at": "2021-02-19T22:00:19Z",
    "updated_at": "2025-01-13T11:52:13Z",
    "pushed_at": "2025-01-14T12:37:17Z",
    "size": 158251,
    "stars": 1107,
    "forks": 298,
    "open_issues": 881,
    "watchers": 1107,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "ltm-1.6",
      "main",
      "next"
    ],
    "languages": {
      "Python": 8160292,
      "HTML": 1071092,
      "JavaScript": 95221,
      "CSS": 45096,
      "Jinja": 28376,
      "Gherkin": 14390,
      "Dockerfile": 11222,
      "Shell": 8955
    },
    "commit_activity": {
      "total_commits_last_year": 1444,
      "avg_commits_per_week": 27.76923076923077,
      "days_active_last_year": 230
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:49:58.690841"
  }
}