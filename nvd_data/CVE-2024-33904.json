{
  "cve_id": "CVE-2024-33904",
  "github_data": {
    "repository": "hyprwm/Hyprland",
    "fix_commit": "28c85619243e6320e75d7abcfe8244fa99d054dd",
    "related_commits": [
      "28c85619243e6320e75d7abcfe8244fa99d054dd",
      "28c85619243e6320e75d7abcfe8244fa99d054dd"
    ],
    "patch_url": "https://github.com/hyprwm/Hyprland/commit/28c85619243e6320e75d7abcfe8244fa99d054dd.patch",
    "fix_commit_details": {
      "sha": "28c85619243e6320e75d7abcfe8244fa99d054dd",
      "commit_date": "2024-04-28T17:28:19Z",
      "author": {
        "login": "vaxerski",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "hooksystem: use a random 700 directory for assembler",
        "length": 52,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 27,
        "additions": 17,
        "deletions": 10
      },
      "files": [
        {
          "filename": "src/plugins/HookSystem.cpp",
          "status": "modified",
          "additions": 17,
          "deletions": 10,
          "patch": "@@ -1,6 +1,7 @@\n #include \"HookSystem.hpp\"\n #include \"../debug/Log.hpp\"\n #include \"../helpers/VarList.hpp\"\n+#include \"../managers/TokenManager.hpp\"\n \n #define register\n #include <udis86.h>\n@@ -135,24 +136,30 @@ CFunctionHook::SAssembly CFunctionHook::fixInstructionProbeRIPCalls(const SInstr\n         currentAddress += len;\n     }\n \n-    std::ofstream ofs(\"/tmp/hypr/.hookcode.asm\", std::ios::trunc);\n+    const auto RANDOMDIR = \"/tmp/hypr/\" + g_pTokenManager->getRandomUUID();\n+\n+    if (!std::filesystem::create_directory(RANDOMDIR))\n+        return {};\n+\n+    std::filesystem::permissions(RANDOMDIR, std::filesystem::perms::owner_all, std::filesystem::perm_options::replace);\n+\n+    std::ofstream ofs(RANDOMDIR + \"/.hookcode.asm\", std::ios::trunc);\n     ofs << assemblyBuilder;\n     ofs.close();\n-    std::string ret = execAndGet(\n-        \"cc -x assembler -c /tmp/hypr/.hookcode.asm -o /tmp/hypr/.hookbinary.o 2>&1 && objcopy -O binary -j .text /tmp/hypr/.hookbinary.o /tmp/hypr/.hookbinary2.o 2>&1\");\n+    std::string ret = execAndGet(std::string{\"cc -x assembler -c \" + RANDOMDIR + \"/.hookcode.asm -o \" + RANDOMDIR + \"/.hookbinary.o 2>&1 && objcopy -O binary -j .text \" +\n+                                             RANDOMDIR + \"/.hookbinary.o \" + RANDOMDIR + \"/.hookbinary2.o 2>&1\"}\n+                                     .c_str());\n     Debug::log(LOG, \"[functionhook] assembler returned:\\n{}\", ret);\n-    if (!std::filesystem::exists(\"/tmp/hypr/.hookbinary2.o\")) {\n-        std::filesystem::remove(\"/tmp/hypr/.hookcode.asm\");\n-        std::filesystem::remove(\"/tmp/hypr/.hookbinary.asm\");\n+    if (!std::filesystem::exists(RANDOMDIR + \"/.hookbinary2.o\")) {\n+        std::filesystem::remove(RANDOMDIR + \"/.hookcode.asm\");\n+        std::filesystem::remove(RANDOMDIR + \"/.hookbinary.asm\");\n         return {};\n     }\n \n-    std::ifstream ifs(\"/tmp/hypr/.hookbinary2.o\", std::ios::binary);\n+    std::ifstream ifs(RANDOMDIR + \"/.hookbinary2.o\", std::ios::binary);\n     returns = {std::vector<char>(std::istreambuf_iterator<char>(ifs), {})};\n     ifs.close();\n-    std::filesystem::remove(\"/tmp/hypr/.hookcode.asm\");\n-    std::filesystem::remove(\"/tmp/hypr/.hookbinary.o\");\n-    std::filesystem::remove(\"/tmp/hypr/.hookbinary2.o\");\n+    std::filesystem::remove_all(RANDOMDIR);\n \n     return returns;\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "25add26881d7b98d2b80eb7a95d3aee0449b72b9",
            "date": "2025-01-14T16:52:19Z",
            "author_login": "vaxerski"
          },
          {
            "sha": "f16f170433540d85cf672217bca2d64c6db9eb01",
            "date": "2025-01-14T16:44:09Z",
            "author_login": "outfoxxed"
          },
          {
            "sha": "a6b263713a2b862ed41362082e2147e081934077",
            "date": "2025-01-12T17:10:36Z",
            "author_login": "outfoxxed"
          },
          {
            "sha": "4f0f512cab5a8052c80b365449b69b953a97e169",
            "date": "2025-01-12T17:09:02Z",
            "author_login": "outfoxxed"
          },
          {
            "sha": "a3a74993173662c06025ca633faa68b5590e2c5b",
            "date": "2025-01-12T17:02:41Z",
            "author_login": "UjinT34"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.0,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-362",
    "description": "In plugins/HookSystem.cpp in Hyprland through 0.39.1 (before 28c8561), through a race condition, a local attacker can cause execution of arbitrary assembly code by writing to a predictable temporary file.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-04-29T06:15:17.320",
    "last_modified": "2024-11-21T09:17:42.640",
    "fix_date": "2024-04-28T17:28:19Z"
  },
  "references": [
    {
      "url": "https://github.com/hyprwm/Hyprland/commit/28c85619243e6320e75d7abcfe8244fa99d054dd",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/Hyprland/issues/5787",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.openwall.com/lists/oss-security/2024/04/28/3",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/Hyprland/commit/28c85619243e6320e75d7abcfe8244fa99d054dd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/hyprwm/Hyprland/issues/5787",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.openwall.com/lists/oss-security/2024/04/28/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:07.034006",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Hyprland",
    "owner": "hyprwm",
    "created_at": "2022-03-16T19:49:13Z",
    "updated_at": "2025-01-14T18:13:34Z",
    "pushed_at": "2025-01-14T16:52:35Z",
    "size": 69022,
    "stars": 22690,
    "forks": 956,
    "open_issues": 1227,
    "watchers": 22690,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C++": 2873945,
      "Shell": 52213,
      "CMake": 16082,
      "Nix": 14528,
      "Meson": 12761,
      "Makefile": 4085,
      "GLSL": 239
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T18:48:36.045654"
  }
}