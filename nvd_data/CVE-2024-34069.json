{
  "cve_id": "CVE-2024-34069",
  "github_data": {
    "repository": "pallets/werkzeug",
    "fix_commit": "3386395b24c7371db11a5b8eaac0c91da5362692",
    "related_commits": [
      "3386395b24c7371db11a5b8eaac0c91da5362692",
      "3386395b24c7371db11a5b8eaac0c91da5362692"
    ],
    "patch_url": "https://github.com/pallets/werkzeug/commit/3386395b24c7371db11a5b8eaac0c91da5362692.patch",
    "fix_commit_details": {
      "sha": "3386395b24c7371db11a5b8eaac0c91da5362692",
      "commit_date": "2024-05-05T23:00:13Z",
      "author": {
        "login": "davidism",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-2g68-c3qc-8985",
        "length": 76,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 80,
        "additions": 69,
        "deletions": 11
      },
      "files": [
        {
          "filename": "CHANGES.rst",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -5,6 +5,11 @@ Version 3.0.3\n \n Unreleased\n \n+-   Only allow ``localhost``, ``.localhost``, ``127.0.0.1``, or the specified\n+    hostname when running the dev server, to make debugger requests. Additional\n+    hosts can be added by using the debugger middleware directly. The debugger\n+    UI makes requests using the full URL rather than only the path.\n+    :ghsa:`2g68-c3qc-8985`\n -   Make reloader more robust when ``\"\"`` is in ``sys.path``. :pr:`2823`\n -   Better TLS cert format with ``adhoc`` dev certs. :pr:`2891`\n -   Inform Python < 3.12 how to handle ``itms-services`` URIs correctly, rather"
        },
        {
          "filename": "docs/debug.rst",
          "status": "modified",
          "additions": 30,
          "deletions": 5,
          "patch": "@@ -16,7 +16,8 @@ interactive debug console to execute code in any frame.\n     The debugger allows the execution of arbitrary code which makes it a\n     major security risk. **The debugger must never be used on production\n     machines. We cannot stress this enough. Do not enable the debugger\n-    in production.**\n+    in production.** Production means anything that is not development,\n+    and anything that is publicly accessible.\n \n .. note::\n \n@@ -72,10 +73,9 @@ argument to get a detailed list of all the attributes it has.\n Debugger PIN\n ------------\n \n-Starting with Werkzeug 0.11 the debug console is protected by a PIN.\n-This is a security helper to make it less likely for the debugger to be\n-exploited if you forget to disable it when deploying to production. The\n-PIN based authentication is enabled by default.\n+The debug console is protected by a PIN. This is a security helper to make it\n+less likely for the debugger to be exploited if you forget to disable it when\n+deploying to production. The PIN based authentication is enabled by default.\n \n The first time a console is opened, a dialog will prompt for a PIN that\n is printed to the command line. The PIN is generated in a stable way\n@@ -92,6 +92,31 @@ intended to make it harder for an attacker to exploit the debugger.\n Never enable the debugger in production.**\n \n \n+Allowed Hosts\n+-------------\n+\n+The debug console will only be served if the request comes from a trusted host.\n+If a request comes from a browser page that is not served on a trusted URL, a\n+400 error will be returned.\n+\n+By default, ``localhost``, any ``.localhost`` subdomain, and ``127.0.0.1`` are\n+trusted. ``run_simple`` will trust its ``hostname`` argument as well. To change\n+this further, use the debug middleware directly rather than through\n+``use_debugger=True``.\n+\n+.. code-block:: python\n+\n+    if os.environ.get(\"USE_DEBUGGER\") in {\"1\", \"true\"}:\n+        app = DebuggedApplication(app, evalex=True)\n+        app.trusted_hosts = [...]\n+\n+    run_simple(\"localhost\", 8080, app)\n+\n+**This feature is not meant to entirely secure the debugger. It is\n+intended to make it harder for an attacker to exploit the debugger.\n+Never enable the debugger in production.**\n+\n+\n Pasting Errors\n --------------\n "
        },
        {
          "filename": "src/werkzeug/debug/__init__.py",
          "status": "modified",
          "additions": 28,
          "deletions": 3,
          "patch": "@@ -19,7 +19,9 @@\n \n from .._internal import _log\n from ..exceptions import NotFound\n+from ..exceptions import SecurityError\n from ..http import parse_cookie\n+from ..sansio.utils import host_is_trusted\n from ..security import gen_salt\n from ..utils import send_file\n from ..wrappers.request import Request\n@@ -298,6 +300,14 @@ def __init__(\n         else:\n             self.pin = None\n \n+        self.trusted_hosts: list[str] = [\".localhost\", \"127.0.0.1\"]\n+        \"\"\"List of domains to allow requests to the debugger from. A leading dot\n+        allows all subdomains. This only allows ``\".localhost\"`` domains by\n+        default.\n+\n+        .. versionadded:: 3.0.3\n+        \"\"\"\n+\n     @property\n     def pin(self) -> str | None:\n         if not hasattr(self, \"_pin\"):\n@@ -344,7 +354,7 @@ def debug_application(\n \n             is_trusted = bool(self.check_pin_trust(environ))\n             html = tb.render_debugger_html(\n-                evalex=self.evalex,\n+                evalex=self.evalex and self.check_host_trust(environ),\n                 secret=self.secret,\n                 evalex_trusted=is_trusted,\n             )\n@@ -372,6 +382,9 @@ def execute_command(  # type: ignore[return]\n         frame: DebugFrameSummary | _ConsoleFrame,\n     ) -> Response:\n         \"\"\"Execute a command in a console.\"\"\"\n+        if not self.check_host_trust(request.environ):\n+            return SecurityError()  # type: ignore[return-value]\n+\n         contexts = self.frame_contexts.get(id(frame), [])\n \n         with ExitStack() as exit_stack:\n@@ -382,6 +395,9 @@ def execute_command(  # type: ignore[return]\n \n     def display_console(self, request: Request) -> Response:\n         \"\"\"Display a standalone shell.\"\"\"\n+        if not self.check_host_trust(request.environ):\n+            return SecurityError()  # type: ignore[return-value]\n+\n         if 0 not in self.frames:\n             if self.console_init_func is None:\n                 ns = {}\n@@ -434,12 +450,18 @@ def check_pin_trust(self, environ: WSGIEnvironment) -> bool | None:\n             return None\n         return (time.time() - PIN_TIME) < ts\n \n+    def check_host_trust(self, environ: WSGIEnvironment) -> bool:\n+        return host_is_trusted(environ.get(\"HTTP_HOST\"), self.trusted_hosts)\n+\n     def _fail_pin_auth(self) -> None:\n         time.sleep(5.0 if self._failed_pin_auth > 5 else 0.5)\n         self._failed_pin_auth += 1\n \n     def pin_auth(self, request: Request) -> Response:\n         \"\"\"Authenticates with the pin.\"\"\"\n+        if not self.check_host_trust(request.environ):\n+            return SecurityError()  # type: ignore[return-value]\n+\n         exhausted = False\n         auth = False\n         trust = self.check_pin_trust(request.environ)\n@@ -489,8 +511,11 @@ def pin_auth(self, request: Request) -> Response:\n             rv.delete_cookie(self.pin_cookie_name)\n         return rv\n \n-    def log_pin_request(self) -> Response:\n+    def log_pin_request(self, request: Request) -> Response:\n         \"\"\"Log the pin if needed.\"\"\"\n+        if not self.check_host_trust(request.environ):\n+            return SecurityError()  # type: ignore[return-value]\n+\n         if self.pin_logging and self.pin is not None:\n             _log(\n                 \"info\", \" * To enable the debugger you need to enter the security pin:\"\n@@ -517,7 +542,7 @@ def __call__(\n             elif cmd == \"pinauth\" and secret == self.secret:\n                 response = self.pin_auth(request)  # type: ignore\n             elif cmd == \"printpin\" and secret == self.secret:\n-                response = self.log_pin_request()  # type: ignore\n+                response = self.log_pin_request(request)  # type: ignore\n             elif (\n                 self.evalex\n                 and cmd is not None"
        },
        {
          "filename": "src/werkzeug/debug/shared/debugger.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -48,7 +48,7 @@ function initPinBox() {\n       btn.disabled = true;\n \n       fetch(\n-        `${document.location.pathname}?__debugger__=yes&cmd=pinauth&pin=${pin}&s=${encodedSecret}`\n+        `${document.location}?__debugger__=yes&cmd=pinauth&pin=${pin}&s=${encodedSecret}`\n       )\n         .then((res) => res.json())\n         .then(({auth, exhausted}) => {\n@@ -79,7 +79,7 @@ function promptForPin() {\n   if (!EVALEX_TRUSTED) {\n     const encodedSecret = encodeURIComponent(SECRET);\n     fetch(\n-      `${document.location.pathname}?__debugger__=yes&cmd=printpin&s=${encodedSecret}`\n+      `${document.location}?__debugger__=yes&cmd=printpin&s=${encodedSecret}`\n     );\n     const pinPrompt = document.getElementsByClassName(\"pin-prompt\")[0];\n     fadeIn(pinPrompt);"
        },
        {
          "filename": "src/werkzeug/sansio/utils.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -8,7 +8,7 @@\n from ..urls import uri_to_iri\n \n \n-def host_is_trusted(hostname: str, trusted_list: t.Iterable[str]) -> bool:\n+def host_is_trusted(hostname: str | None, trusted_list: t.Iterable[str]) -> bool:\n     \"\"\"Check if a host matches a list of trusted names.\n \n     :param hostname: The name to check."
        },
        {
          "filename": "src/werkzeug/serving.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1072,6 +1072,9 @@ def run_simple(\n         from .debug import DebuggedApplication\n \n         application = DebuggedApplication(application, evalex=use_evalex)\n+        # Allow the specified hostname to use the debugger, in addition to\n+        # localhost domains.\n+        application.trusted_hosts.append(hostname)\n \n     if not is_running_from_reloader():\n         fd = None"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7868bef5d978093a8baa0784464ebe5d775ae92a",
            "date": "2024-11-08T15:53:55Z",
            "author_login": "davidism"
          },
          {
            "sha": "6b56ed571b338e68fc378e6348266ee99de26646",
            "date": "2024-11-08T15:52:32Z",
            "author_login": "davidism"
          },
          {
            "sha": "6389612fd1ee1bd93579eed5026e8fd471d04abd",
            "date": "2024-11-08T15:46:09Z",
            "author_login": "davidism"
          },
          {
            "sha": "ba15683fb30b51187fa7efa9d212a030ad6ddb94",
            "date": "2024-11-07T16:34:12Z",
            "author_login": "davidism"
          },
          {
            "sha": "d99f72d12698d86e7ebcb894f3c6c729e2b6c067",
            "date": "2024-11-07T16:01:56Z",
            "author_login": "davidism"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-352",
    "description": "Werkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger. This vulnerability is fixed in 3.0.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-05-06T15:15:23.990",
    "last_modified": "2024-11-21T09:18:01.527",
    "fix_date": "2024-05-05T23:00:13Z"
  },
  "references": [
    {
      "url": "https://github.com/pallets/werkzeug/commit/3386395b24c7371db11a5b8eaac0c91da5362692",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pallets/werkzeug/security/advisories/GHSA-2g68-c3qc-8985",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/H4SH32AM3CTPMAAEOIDAN7VU565LO4IR/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HFERFN7PINV4MOGMGA3DPIXJPDCYOEJZ/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240614-0004/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/pallets/werkzeug/commit/3386395b24c7371db11a5b8eaac0c91da5362692",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/pallets/werkzeug/security/advisories/GHSA-2g68-c3qc-8985",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/H4SH32AM3CTPMAAEOIDAN7VU565LO4IR/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HFERFN7PINV4MOGMGA3DPIXJPDCYOEJZ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20240614-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.862825",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "werkzeug",
    "owner": "pallets",
    "created_at": "2010-10-18T11:42:40Z",
    "updated_at": "2025-01-14T07:44:16Z",
    "pushed_at": "2025-01-13T18:59:09Z",
    "size": 15910,
    "stars": 6687,
    "forks": 1734,
    "open_issues": 13,
    "watchers": 6687,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "stable"
    ],
    "languages": {
      "Python": 1061077,
      "JavaScript": 10068,
      "CSS": 6078,
      "Shell": 165,
      "HTML": 124
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:31:32.606928"
  }
}