{
  "cve_id": "CVE-2024-34353",
  "github_data": {
    "repository": "matrix-org/matrix-rust-sdk",
    "fix_commit": "71136e44c03c79f80d6d1a2446673bc4d53a2067",
    "related_commits": [
      "71136e44c03c79f80d6d1a2446673bc4d53a2067",
      "fa10bbb5dd0f9120a51aa1854cec752e25790bb0",
      "71136e44c03c79f80d6d1a2446673bc4d53a2067",
      "fa10bbb5dd0f9120a51aa1854cec752e25790bb0"
    ],
    "patch_url": "https://github.com/matrix-org/matrix-rust-sdk/commit/71136e44c03c79f80d6d1a2446673bc4d53a2067.patch",
    "fix_commit_details": {
      "sha": "71136e44c03c79f80d6d1a2446673bc4d53a2067",
      "commit_date": "2023-12-20T15:38:54Z",
      "author": {
        "login": "BillCarsonFr",
        "type": "User",
        "stats": {
          "total_commits": 134,
          "average_weekly_commits": 0.48905109489051096,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 44
        }
      },
      "commit_message": {
        "title": "Fix regenerate_olm_machine loosing backup state",
        "length": 47,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 27,
        "deletions": 0
      },
      "files": [
        {
          "filename": "crates/matrix-sdk/src/encryption/mod.rs",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -1180,6 +1180,10 @@ impl Encryption {\n                 drop(olm_machine_guard);\n                 // Recreate the OlmMachine.\n                 self.client.base_client().regenerate_olm().await?;\n+                // we need to trigger that so it gets back the cached key if known\n+                // otherwise the new olm machine `BackupMachine#backup_key` will be out of sync\n+                // and say backup is disabled.\n+                self.client.encryption().backups().setup_and_resume().await?;\n             }\n         }\n         Ok(())\n@@ -1452,6 +1456,21 @@ mod tests {\n         let initial_olm_machine =\n             client1.olm_machine().await.clone().expect(\"must have an olm machine\");\n \n+        // Also enable backup to check that new machine has the same backup keys.\n+        let decryption_key = matrix_sdk_base::crypto::store::BackupDecryptionKey::new()\n+            .expect(\"Can't create new recovery key\");\n+        let backup_key = decryption_key.megolm_v1_public_key();\n+        backup_key.set_version(\"1\".to_owned());\n+        initial_olm_machine\n+            .backup_machine()\n+            .save_decryption_key(Some(decryption_key.to_owned()), Some(\"1\".to_owned()))\n+            .await\n+            .expect(\"Should save\");\n+\n+        initial_olm_machine.backup_machine().enable_backup_v1(backup_key.clone()).await.unwrap();\n+\n+        assert!(client1.encryption().backups().are_enabled().await);\n+\n         // The other client can't take the lock too.\n         let acquired2 = client2.encryption().try_lock_store_once().await.unwrap();\n         assert!(acquired2.is_none());\n@@ -1486,7 +1505,15 @@ mod tests {\n \n         // But now its olm machine has been invalidated and thus regenerated!\n         let olm_machine = client1.olm_machine().await.clone().expect(\"must have an olm machine\");\n+\n+        let backup_key_new = olm_machine.backup_machine().get_backup_keys().await.unwrap();\n         assert!(!initial_olm_machine.same_as(&olm_machine));\n+        assert!(backup_key_new.decryption_key.is_some());\n+        assert_eq!(\n+            backup_key_new.decryption_key.unwrap().megolm_v1_public_key().to_base64(),\n+            backup_key.to_base64()\n+        );\n+        assert!(client1.encryption().backups().are_enabled().await);\n     }\n \n     #[cfg(feature = \"sqlite\")]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bd5d7aafee3cac797e709eadc2f914438211a526",
            "date": "2025-01-10T12:20:10Z",
            "author_login": "jmartinesp"
          },
          {
            "sha": "e015a531da018e6dece8be1e5369392c743475d9",
            "date": "2025-01-10T12:19:58Z",
            "author_login": "jmartinesp"
          },
          {
            "sha": "b9014a5e2a20b0c58cd5b8d0cf0f283c44498142",
            "date": "2025-01-14T10:15:08Z",
            "author_login": "bnjbvr"
          },
          {
            "sha": "e9487b085125d3cd2057c8258a5a1a2c25edc4eb",
            "date": "2025-01-13T16:32:07Z",
            "author_login": "jmartinesp"
          },
          {
            "sha": "c60bfb877af9f5aa34eac20725e50f857d640a8e",
            "date": "2025-01-13T16:16:37Z",
            "author_login": "poljar"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-532",
    "description": "The matrix-sdk-crypto crate, part of the Matrix Rust SDK project, is an implementation of a Matrix end-to-end encryption state machine in Rust. In Matrix, the server-side `key backup` stores encrypted copies of Matrix message keys. This facilitates key sharing between a user's devices and provides a redundant copy in case all devices are lost. The key backup uses asymmetric\ncryptography, with each server-side key backup assigned a unique public-private key pair. Due to a logic bug introduced in commit 71136e44c03c79f80d6d1a2446673bc4d53a2067, matrix-sdk-crypto version 0.7.0 will sometimes log the private part of the backup key pair to Rust debug logs (using the `tracing` crate). This issue has been resolved in matrix-sdk-crypto version 0.7.1. No known workarounds are available.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-14T15:38:43.910",
    "last_modified": "2024-11-21T09:18:29.380",
    "fix_date": "2023-12-20T15:38:54Z"
  },
  "references": [
    {
      "url": "https://crates.io/crates/matrix-sdk-crypto/0.7.1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/commit/71136e44c03c79f80d6d1a2446673bc4d53a2067",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/commit/fa10bbb5dd0f9120a51aa1854cec752e25790bb0",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/releases/tag/matrix-sdk-crypto-0.7.1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-9ggc-845v-gcgv",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://crates.io/crates/matrix-sdk-crypto/0.7.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/commit/71136e44c03c79f80d6d1a2446673bc4d53a2067",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/commit/fa10bbb5dd0f9120a51aa1854cec752e25790bb0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/releases/tag/matrix-sdk-crypto-0.7.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-9ggc-845v-gcgv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:20.896098",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "matrix-rust-sdk",
    "owner": "matrix-org",
    "created_at": "2020-02-21T15:47:16Z",
    "updated_at": "2025-01-14T15:23:56Z",
    "pushed_at": "2025-01-14T16:44:52Z",
    "size": 59856,
    "stars": 1304,
    "forks": 267,
    "open_issues": 221,
    "watchers": 1304,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Rust": 9387606,
      "Shell": 5632,
      "Swift": 3872,
      "Python": 2588,
      "Ruby": 2075,
      "Perl": 782,
      "Makefile": 288,
      "Dockerfile": 125
    },
    "commit_activity": {
      "total_commits_last_year": 2761,
      "avg_commits_per_week": 53.09615384615385,
      "days_active_last_year": 272
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:52:29.886936"
  }
}