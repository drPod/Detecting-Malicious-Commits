{
  "cve_id": "CVE-2024-35185",
  "github_data": {
    "repository": "stacklok/minder",
    "fix_commit": "065049336aac0621ee00a0bb2211f8051d47c14b",
    "related_commits": [
      "065049336aac0621ee00a0bb2211f8051d47c14b",
      "065049336aac0621ee00a0bb2211f8051d47c14b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "065049336aac0621ee00a0bb2211f8051d47c14b",
      "commit_date": "2024-05-16T06:49:03Z",
      "author": {
        "login": "JAORMX",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-fjw8-3gp8-4cvx",
        "length": 249,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 62,
        "additions": 60,
        "deletions": 2
      },
      "files": [
        {
          "filename": "internal/engine/ingester/rest/rest.go",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -40,6 +40,10 @@ import (\n const (\n \t// RestRuleDataIngestType is the type of the REST rule data ingest engine\n \tRestRuleDataIngestType = \"rest\"\n+\n+\t// MaxBytesLimit is the maximum number of bytes to read from the response body\n+\t// We limit to 1MB to prevent abuse\n+\tMaxBytesLimit int64 = 1 << 20\n )\n \n type ingestorFallback struct {\n@@ -201,16 +205,18 @@ func (rdi *Ingestor) parseBody(body io.Reader) (any, error) {\n \t\treturn nil, nil\n \t}\n \n+\tlr := io.LimitReader(body, MaxBytesLimit)\n+\n \tif rdi.restCfg.Parse == \"json\" {\n \t\tvar jsonData any\n-\t\tdec := json.NewDecoder(body)\n+\t\tdec := json.NewDecoder(lr)\n \t\tif err := dec.Decode(&jsonData); err != nil {\n \t\t\treturn nil, fmt.Errorf(\"cannot decode json: %w\", err)\n \t\t}\n \n \t\tdata = jsonData\n \t} else {\n-\t\tdata, err = io.ReadAll(body)\n+\t\tdata, err = io.ReadAll(lr)\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"cannot read response body: %w\", err)\n \t\t}"
        },
        {
          "filename": "internal/engine/ingester/rest/rest_test.go",
          "status": "modified",
          "additions": 52,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@ package rest\n \n import (\n \t\"context\"\n+\t\"encoding/binary\"\n \t\"encoding/json\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n@@ -319,3 +320,54 @@ func TestRestIngest(t *testing.T) {\n \t\t})\n \t}\n }\n+\n+func TestIngestor_parseBodyDoesNotReadTooLargeRequests(t *testing.T) {\n+\tt.Parallel()\n+\n+\ttests := []struct {\n+\t\tname    string\n+\t\tcfg     *pb.RestType\n+\t\tbody    string\n+\t\twantErr bool\n+\t}{\n+\t\t{\n+\t\t\tname: \"raw\",\n+\t\t\tcfg:  &pb.RestType{},\n+\t\t\t// really large body\n+\t\t\t// casting to `int` should work.\n+\t\t\tbody: strings.Repeat(\"a\", int(MaxBytesLimit)+1),\n+\t\t\t// This case does not error, it simply truncates.\n+\t\t\twantErr: false,\n+\t\t},\n+\t\t{\n+\t\t\tname: \"json\",\n+\t\t\tcfg: &pb.RestType{\n+\t\t\t\tParse: \"json\",\n+\t\t\t},\n+\t\t\t// really large body\n+\t\t\t// casting to `int` should work.\n+\t\t\tbody: \"{\\\"a\\\":\\\"\" + strings.Repeat(\"a\", int(MaxBytesLimit)+1) + \"\\\"}\",\n+\t\t\t// This case will error out, as truncating\n+\t\t\t// makes the JSON invalid.\n+\t\t\twantErr: true,\n+\t\t},\n+\t}\n+\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tt.Parallel()\n+\n+\t\t\trdi := &Ingestor{\n+\t\t\t\trestCfg: tt.cfg,\n+\t\t\t}\n+\n+\t\t\tgot, err := rdi.parseBody(strings.NewReader(tt.body))\n+\t\t\tif tt.wantErr {\n+\t\t\t\tassert.Error(t, err, \"expected error\")\n+\t\t\t} else {\n+\t\t\t\tassert.NoError(t, err, \"expected no error\")\n+\t\t\t\tassert.Equal(t, int(MaxBytesLimit), binary.Size(got), \"expected body to be truncated\")\n+\t\t\t}\n+\t\t})\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f726c74a48b48de9d3be4cbbfcc7382a83a8ed8",
            "date": "2025-01-24T08:41:45Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ac4b1f7ec7540c71f7e0e39b086dba49757da06d",
            "date": "2025-01-24T08:40:26Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "b6590506ae68b6783f4b12dac12493f7a92e3a71",
            "date": "2025-01-24T08:22:38Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d8b7e1f04c491a582770fe96058d3481e9f4aa14",
            "date": "2025-01-24T08:21:14Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "483b6a98a325229e410c508b300c7501b318e8a3",
            "date": "2025-01-24T08:19:28Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Minder is a software supply chain security platform. Prior to version 0.0.49, the Minder REST ingester is vulnerable to a denial of service attack via an attacker-controlled REST endpoint that can crash the Minder server. The REST ingester allows users to interact with REST endpoints to fetch data for rule evaluation. When fetching data with the REST ingester, Minder sends a request to an endpoint and will use the data from the body of the response as the data to evaluate against a certain rule. If the response is sufficiently large, it can drain memory on the machine and crash the Minder server. The attacker can control the remote REST endpoints that Minder sends requests to, and they can configure the remote REST endpoints to return responses with large bodies. They would then instruct Minder to send a request to their configured endpoint that would return the large response which would crash the Minder server. Version 0.0.49 fixes this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-05-16T16:15:09.990",
    "last_modified": "2024-11-21T09:19:53.460",
    "fix_date": "2024-05-16T06:49:03Z"
  },
  "references": [
    {
      "url": "https://github.com/stacklok/minder/commit/065049336aac0621ee00a0bb2211f8051d47c14b",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/stacklok/minder/security/advisories/GHSA-fjw8-3gp8-4cvx",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/stacklok/minder/commit/065049336aac0621ee00a0bb2211f8051d47c14b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/stacklok/minder/security/advisories/GHSA-fjw8-3gp8-4cvx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.247734",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "minder",
    "owner": "stacklok",
    "created_at": "2023-04-05T16:47:15Z",
    "updated_at": "2025-01-24T08:41:49Z",
    "pushed_at": "2025-01-24T15:49:23Z",
    "size": 129755,
    "stars": 308,
    "forks": 42,
    "open_issues": 125,
    "watchers": 308,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 3901844,
      "PLpgSQL": 125512,
      "Makefile": 14093,
      "Dockerfile": 3059,
      "HTML": 2450,
      "Shell": 1410,
      "Smarty": 538,
      "CSS": 429
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:24:19.396165"
  }
}