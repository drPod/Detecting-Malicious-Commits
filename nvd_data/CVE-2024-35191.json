{
  "cve_id": "CVE-2024-35191",
  "github_data": {
    "repository": "verbb/formie",
    "fix_commit": "90296edf7e707f117e760aa57e70dbd43a854420",
    "related_commits": [
      "90296edf7e707f117e760aa57e70dbd43a854420",
      "90296edf7e707f117e760aa57e70dbd43a854420"
    ],
    "patch_url": "https://github.com/verbb/formie/commit/90296edf7e707f117e760aa57e70dbd43a854420.patch",
    "fix_commit_details": {
      "sha": "90296edf7e707f117e760aa57e70dbd43a854420",
      "commit_date": "2024-03-03T05:01:49Z",
      "author": {
        "login": "engram-design",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Change all instances of dynamic Twig to use safe, sandboxed environment to protect against potential security issues",
        "length": 116,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 46,
        "additions": 22,
        "deletions": 24
      },
      "files": [
        {
          "filename": "src/base/PluginTrait.php",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@\n use verbb\\formie\\services\\Tokens;\n use verbb\\formie\\web\\assets\\forms\\FormsAsset;\n use verbb\\base\\BaseHelper;\n+use verbb\\base\\services\\Templates;\n \n use Craft;\n \n@@ -182,6 +183,11 @@ public function getSyncs(): Syncs\n         return $this->get('syncs');\n     }\n \n+    public function getTemplates(): Templates\n+    {\n+        return $this->get('templates');\n+    }\n+\n     public function getTokens(): Tokens\n     {\n         return $this->get('tokens');\n@@ -222,6 +228,10 @@ private function _registerComponents(): void\n             'submissions' => Submissions::class,\n             'subscriptions' => Subscriptions::class,\n             'syncs' => Syncs::class,\n+            'templates' => [\n+                'class' => Templates::class,\n+                'pluginClass' => Formie::class,\n+            ],\n             'tokens' => Tokens::class,\n             'vite' => [\n                 'class' => VitePluginService::class,"
        },
        {
          "filename": "src/base/Webhook.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,6 +1,7 @@\n <?php\n namespace verbb\\formie\\base;\n \n+use verbb\\formie\\Formie;\n use verbb\\formie\\elements\\Submission;\n use verbb\\formie\\events\\ModifyWebhookPayloadEvent;\n \n@@ -87,7 +88,7 @@ protected function generatePayloadValues(Submission $submission): array\n \n     protected function getWebhookUrl($url, Submission $submission): bool|string|null\n     {\n-        $url = Craft::$app->getView()->renderObjectTemplate($url, $submission);\n+        $url = Formie::$plugin->getTemplates()->renderObjectTemplate($url, $submission);\n \n         return App::parseEnv($url);\n     }"
        },
        {
          "filename": "src/controllers/FormsController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -356,7 +356,7 @@ public function actionDeleteForm(): ?Response\n \n         if ($this->request->getAcceptsJson()) {\n             $url = $this->request->getValidatedBodyParam('redirect');\n-            $url = Craft::$app->getView()->renderObjectTemplate($url, $form);\n+            $url = Formie::$plugin->getTemplates()->renderObjectTemplate($url, $form);\n \n             return $this->asJson([\n                 'success' => false,"
        },
        {
          "filename": "src/controllers/SubmissionsController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 6,
          "patch": "@@ -693,7 +693,7 @@ public function actionSubmit(): ?Response\n             // Refresh, there's still more pages to complete. Or check if we should \"redirect\" to a template-defined\n             // URL, which is set for every page (commonly the first one, once a submission is available)\n             if ($settings->pageRedirectUrl) {\n-                $url = $this->getView()->renderObjectTemplate($settings->pageRedirectUrl, $submission);\n+                $url = Formie::$plugin->getTemplates()->renderObjectTemplate($settings->pageRedirectUrl, $submission);\n \n                 return $this->redirect($url);\n             }\n@@ -1015,7 +1015,7 @@ private function _returnJsonResponse($success, $submission, $form, $nextPage, $e\n             $redirect = $form->getRedirectUrl();\n         }\n \n-        $redirectUrl = Craft::$app->getView()->renderObjectTemplate($redirect, $submission);\n+        $redirectUrl = Formie::$plugin->getTemplates()->renderObjectTemplate($redirect, $submission);\n \n         $params = array_merge([\n             'success' => $success,\n@@ -1189,10 +1189,7 @@ private function _checkPageFieldErrors($submission, $form, $nextPage)\n \n     private function _setTitle($submission, $form): void\n     {\n-        // Prevent users using long-hand Twig `{{` to prevent injection execution\n-        $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $form->settings->submissionTitleFormat);\n-\n-        $submission->title = Variables::getParsedValue($submissionTitleFormat, $submission, $form);\n+        $submission->title = Variables::getParsedValue($form->settings->submissionTitleFormat, $submission, $form);\n \n         // Set the default title for the submission, so it can save correctly\n         if (!$submission->title) {"
        },
        {
          "filename": "src/elements/Submission.php",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -535,10 +535,7 @@ public function getCpEditUrl(): ?string\n \n     public function updateTitle($form): void\n     {\n-        // Prevent users using long-hand Twig `{{` to prevent injection execution\n-        $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $form->settings->submissionTitleFormat);\n-\n-        if ($customTitle = Variables::getParsedValue($submissionTitleFormat, $this, $form)) {\n+        if ($customTitle = Variables::getParsedValue($form->settings->submissionTitleFormat, $this, $form)) {\n             $this->title = $customTitle;\n \n             // Rather than re-save, directly update the submission record"
        },
        {
          "filename": "src/fields/formfields/Hidden.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -125,8 +125,6 @@ public function serializeValue(mixed $value, ?ElementInterface $element = null):\n                 $value = $this->defaultValue;\n             }\n \n-            // Prevent users using long-hand Twig `{{` to prevent injection execution\n-            $value = str_replace(['{{', '}}'], ['{', '}'], $value);\n             $value = Variables::getParsedValue($value, $element);\n \n             // Immediately update the value for the element, so integrations use the up-to-date value"
        },
        {
          "filename": "src/gql/resolvers/mutations/SubmissionResolver.php",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -93,10 +93,7 @@ public function saveSubmission($source, array $arguments, $context, ResolveInfo\n         if (!$submission->title) {\n             $settings = $form->settings;\n \n-            // Prevent users using long-hand Twig `{{` to prevent injection execution\n-            $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $settings->submissionTitleFormat);\n-\n-            $submission->title = Variables::getParsedValue($submissionTitleFormat, $submission, $form);\n+            $submission->title = Variables::getParsedValue($settings->submissionTitleFormat, $submission, $form);\n \n             if (!$submission->title) {\n                 $timeZone = Craft::$app->getTimeZone();"
        },
        {
          "filename": "src/helpers/Variables.php",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -263,10 +263,8 @@ public static function getParsedValue(mixed $value, Submission $submission = nul\n         $variables = Formie::$plugin->getRenderCache()->getVariables($cacheKey);\n \n         // Try to parse submission + extra variables\n-        $view = Craft::$app->getView();\n-\n         try {\n-            return $view->renderObjectTemplate($value, $submission, $variables);\n+            return Formie::$plugin->getTemplates()->renderObjectTemplate($value, $submission, $variables);\n         } catch (Throwable $e) {\n             Formie::error(Craft::t('formie', 'Failed to render dynamic string \u201c{value}\u201d. Template error: \u201c{message}\u201d {file}:{line}', [\n                 'value' => $originalValue,"
        },
        {
          "filename": "src/services/Emails.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -658,7 +658,7 @@ private function _attachPdfToEmail(Notification $notification, Message $message,\n \n         // Generate the filename correctly.\n         $filenameFormat = $template->filenameFormat ?? 'Submission-{submission.id}';\n-        $fileName = Craft::$app->getView()->renderObjectTemplate($filenameFormat, $variables);\n+        $fileName = Formie::$plugin->getTemplates()->renderObjectTemplate($filenameFormat, $variables);\n \n         $message->attach($pdfPath, ['fileName' => $fileName . '.pdf', 'contentType' => 'application/pdf']);\n "
        },
        {
          "filename": "src/services/Rendering.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -487,9 +487,9 @@ public function populateFormValues($element, $values = [], $force = false): void\n             try {\n                 $field = $form->getFieldByHandle($key);\n \n-                // Prevent users using long-hand Twig `{{` to prevent injection execution. Only an issue for \n+                // Ensure that we protect against developers using Twig to populate values from query strings\n                 if (is_string($value)) {\n-                    $value = str_replace(['{{', '}}', '{%', '%}'], ['{', '}', '', ''], $value);\n+                    $value = Formie::$plugin->getTemplates()->renderString($value);\n                 }\n \n                 if ($field) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "621eb98612f1a0dd058fae1970494fd27bcff258",
            "date": "2025-01-14T10:12:56Z",
            "author_login": "engram-design"
          },
          {
            "sha": "35cade979960d4db649e9ad0ca4bdac97b562e44",
            "date": "2025-01-13T23:21:09Z",
            "author_login": "engram-design"
          },
          {
            "sha": "4d4720e9505ac9e8465d005d063d7c8be88ebe0f",
            "date": "2025-01-13T23:20:49Z",
            "author_login": "engram-design"
          },
          {
            "sha": "5f45886af6ffe74aaf91d2e7761dbf9c2aece980",
            "date": "2025-01-13T21:53:35Z",
            "author_login": "engram-design"
          },
          {
            "sha": "c1903159bbef4959477a6c611e07ec6e81647070",
            "date": "2025-01-13T00:08:40Z",
            "author_login": "engram-design"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.4,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-1336",
    "description": "Formie is a Craft CMS plugin for creating forms. Prior to 2.1.6, users with access to a form's settings can include malicious Twig code into fields that support Twig. These might be the Submission Title or the Success Message. This code will then be executed upon creating a submission, or rendering the text.  This has been fixed in Formie 2.1.6.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-20T21:15:09.307",
    "last_modified": "2024-11-21T09:19:54.113",
    "fix_date": "2024-03-03T05:01:49Z"
  },
  "references": [
    {
      "url": "https://github.com/verbb/formie/commit/90296edf7e707f117e760aa57e70dbd43a854420",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/verbb/formie/security/advisories/GHSA-v45m-hxqp-fwf5",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/verbb/formie/commit/90296edf7e707f117e760aa57e70dbd43a854420",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/verbb/formie/security/advisories/GHSA-v45m-hxqp-fwf5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.267063",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "formie",
    "owner": "verbb",
    "created_at": "2020-07-18T22:58:52Z",
    "updated_at": "2025-01-14T10:13:04Z",
    "pushed_at": "2025-01-14T10:13:00Z",
    "size": 118116,
    "stars": 97,
    "forks": 73,
    "open_issues": 237,
    "watchers": 97,
    "has_security_policy": false,
    "default_branch": "craft-5",
    "protected_branches": [],
    "languages": {
      "PHP": 3751448,
      "HTML": 793616,
      "JavaScript": 500158,
      "Vue": 409768,
      "SCSS": 328829
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T20:57:23.247149"
  }
}