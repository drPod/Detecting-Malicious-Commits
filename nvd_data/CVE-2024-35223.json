{
  "cve_id": "CVE-2024-35223",
  "github_data": {
    "repository": "dapr/dapr",
    "fix_commit": "e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c",
    "related_commits": [
      "e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c",
      "e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c"
    ],
    "patch_url": "https://github.com/dapr/dapr/commit/e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c.patch",
    "fix_commit_details": {
      "sha": "e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c",
      "commit_date": "2024-05-20T21:57:52Z",
      "author": {
        "login": "artursouza",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-284c-x8m7-9w5h",
        "length": 361,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1121,
        "additions": 1114,
        "deletions": 7
      },
      "files": [
        {
          "filename": "docs/release_notes/v1.13.3.md",
          "status": "added",
          "additions": 80,
          "deletions": 0,
          "patch": "@@ -0,0 +1,80 @@\n+# Dapr 1.13.3\n+\n+This update includes bug fixes:\n+\n+- [App API token forwarded from caller to receiving app](#app-api-token-forwarded-from-caller-to-receiving-app)\n+- [Upgrade Go version to 1.21.9](#upgrade-go-version-to-1219)\n+- [Placement server fails to disseminate placement tables](#placement-server-fails-to-disseminate-placement-tables)\n+- [Restore dapr_http_server_response_count HTTP metric](#restore-dapr_http_server_response_count-http-metric)\n+\n+## App API token forwarded from caller to receiving app\n+\n+### Problem\n+\n+The caller sidecar is appending the *local* app API token to the *egress* request, thereby leaking the API token protecting the local app to the foreign sidecar.\n+\n+### Impact\n+\n+Receiving app can have access to the calling app's API token and make unauthorized calls directly to the originating app - in case it is listening on 0.0.0.0 or an accessible IP address.\n+\n+### Root cause\n+\n+A pull request accidentally added this change.\n+\n+### Solution\n+\n+Fixed the issue and added integration tests to verify and avoid future regressions.\n+\n+## Upgrade Go version to 1.21.9\n+\n+### Problem\n+\n+Go version 1.21.8 or older are impacted by CVE-2023-45288.\n+\n+### Impact\n+\n+See https://nvd.nist.gov/vuln/detail/CVE-2023-45288\n+\n+### Root cause\n+\n+See https://nvd.nist.gov/vuln/detail/CVE-2023-45288\n+\n+### Solution\n+\n+Update Go version used to build Dapr.\n+\n+## Placement server fails to disseminate placement tables\n+\n+### Problem\n+\n+In case of an error during dissemination of placement table to a sidecar instance, the dissemination to the remaining instances do not complete. See https://github.com/dapr/dapr/issues/7031\n+\n+### Impact\n+\n+Sidecars can run with an old copy of the dissemination table and cannot invoke the correct Dapr sidecar for a given actor instance.\n+\n+### Root cause\n+\n+During shutdown, all publish calls to the application where being cancelled.\n+\n+### Solution\n+\n+Check the return value of performTableDissemination for errors.\n+\n+## Restore `dapr_http_server_response_count` HTTP metric\n+\n+### Problem\n+\n+An existing metrics was removed without deprecation notice, affecting users that relied on it. See https://github.com/dapr/dapr/issues/7642\n+\n+### Impact\n+\n+Users did not have this specific metric available anymore, potentially impacting their alerts and monitoring.\n+\n+### Root cause\n+\n+Metric removed without deprecation notice.\n+\n+### Solution\n+\n+Added the metric back.\n\\ No newline at end of file"
        },
        {
          "filename": "pkg/messaging/grpc_proxy.go",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -129,6 +129,12 @@ func (p *proxy) intercept(ctx context.Context, fullName string) (context.Context\n \t\tif err != nil {\n \t\t\treturn ctx, nil, nil, nopTeardown, err\n \t\t}\n+\n+\t\tappMetadataToken := security.GetAppToken()\n+\t\tif appMetadataToken != \"\" {\n+\t\t\toutCtx = metadata.AppendToOutgoingContext(outCtx, securityConsts.APITokenHeader, appMetadataToken)\n+\t\t}\n+\n \t\treturn outCtx, appClient.(*grpc.ClientConn), nil, nopTeardown, nil\n \t}\n \n@@ -139,11 +145,6 @@ func (p *proxy) intercept(ctx context.Context, fullName string) (context.Context\n \toutCtx = p.telemetryFn(outCtx)\n \toutCtx = metadata.AppendToOutgoingContext(outCtx, invokev1.CallerIDHeader, p.appID, invokev1.CalleeIDHeader, target.id)\n \n-\tappMetadataToken := security.GetAppToken()\n-\tif appMetadataToken != \"\" {\n-\t\toutCtx = metadata.AppendToOutgoingContext(outCtx, securityConsts.APITokenHeader, appMetadataToken)\n-\t}\n-\n \tpt := &grpcProxy.ProxyTarget{\n \t\tID:        target.id,\n \t\tNamespace: target.namespace,"
        },
        {
          "filename": "pkg/messaging/grpc_proxy_test.go",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -188,14 +188,19 @@ func TestIntercept(t *testing.T) {\n \t\t\t}, nil\n \t\t})\n \n+\t\tt.Setenv(securityConsts.AppAPITokenEnvVar, \"token1\")\n+\n \t\tctx := metadata.NewIncomingContext(context.TODO(), metadata.MD{diagnostics.GRPCProxyAppIDKey: []string{\"a\"}})\n \t\tproxy := p.(*proxy)\n-\t\t_, conn, _, teardown, err := proxy.intercept(ctx, \"/test\")\n+\t\tctx, conn, _, teardown, err := proxy.intercept(ctx, \"/test\")\n \t\tdefer teardown(true)\n \n \t\trequire.NoError(t, err)\n \t\tassert.NotNil(t, conn)\n \t\tassert.Equal(t, \"a\", conn.Target())\n+\n+\t\tmd, _ := metadata.FromOutgoingContext(ctx)\n+\t\tassert.Equal(t, \"token1\", md[securityConsts.APITokenHeader][0])\n \t})\n \n \tt.Run(\"proxy to a remote app\", func(t *testing.T) {\n@@ -231,7 +236,7 @@ func TestIntercept(t *testing.T) {\n \t\tassert.Equal(t, \"b\", md[\"a\"][0])\n \t\tassert.Equal(t, \"a\", md[invokev1.CallerIDHeader][0])\n \t\tassert.Equal(t, \"b\", md[invokev1.CalleeIDHeader][0])\n-\t\tassert.Equal(t, \"token1\", md[securityConsts.APITokenHeader][0])\n+\t\tassert.NotContains(t, md, securityConsts.APITokenHeader)\n \t})\n \n \tt.Run(\"access policies applied\", func(t *testing.T) {"
        },
        {
          "filename": "tests/integration/framework/process/daprd/options.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -287,3 +287,9 @@ func WithSocket(t *testing.T, socket *socket.Socket) Option {\n \t\t\"DAPR_COMPONENTS_SOCKETS_FOLDER\", socket.Directory(),\n \t))\n }\n+\n+func WithAppAPIToken(t *testing.T, token string) Option {\n+\treturn WithExecOptions(exec.WithEnvVars(t,\n+\t\t\"APP_API_TOKEN\", token,\n+\t))\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/grpc/appapitoken/remotebothtokens.go",
          "status": "added",
          "additions": 108,
          "deletions": 0,
          "patch": "@@ -0,0 +1,108 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/grpc/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+\ttestpb \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/grpc/proto\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(remotebothtokens))\n+}\n+\n+type remotebothtokens struct {\n+\tdaprd1 *daprd.Daprd\n+\tdaprd2 *daprd.Daprd\n+\tch     chan metadata.MD\n+}\n+\n+func (b *remotebothtokens) Setup(t *testing.T) []framework.Option {\n+\tfn, ch := newServer()\n+\tb.ch = ch\n+\tapp := app.New(t,\n+\t\tapp.WithRegister(fn),\n+\t\tapp.WithOnInvokeFn(func(ctx context.Context, _ *commonv1.InvokeRequest) (*commonv1.InvokeResponse, error) {\n+\t\t\tmd, ok := metadata.FromIncomingContext(ctx)\n+\t\t\trequire.True(t, ok)\n+\t\t\tb.ch <- md\n+\t\t\treturn new(commonv1.InvokeResponse), nil\n+\t\t}),\n+\t)\n+\n+\tb.daprd1 = daprd.New(t,\n+\t\tdaprd.WithAppID(\"app1\"),\n+\t\tdaprd.WithAppProtocol(\"grpc\"),\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t)\n+\n+\tb.daprd2 = daprd.New(t,\n+\t\tdaprd.WithAppProtocol(\"grpc\"),\n+\t\tdaprd.WithAppAPIToken(t, \"def\"),\n+\t\tdaprd.WithAppPort(app.Port(t)),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, b.daprd1, b.daprd2),\n+\t}\n+}\n+\n+func (b *remotebothtokens) Run(t *testing.T, ctx context.Context) {\n+\tb.daprd1.WaitUntilRunning(t, ctx)\n+\tb.daprd2.WaitUntilRunning(t, ctx)\n+\n+\tclient := testpb.NewTestServiceClient(b.daprd1.GRPCConn(t, ctx))\n+\tctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", b.daprd2.AppID())\n+\t_, err := client.Ping(ctx, new(testpb.PingRequest))\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-b.ch:\n+\t\trequire.Equal(t, []string{\"def\"}, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(10 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+\n+\tdclient := b.daprd1.GRPCClient(t, ctx)\n+\t_, err = dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: b.daprd2.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-b.ch:\n+\t\trequire.Equal(t, []string{\"def\"}, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/grpc/appapitoken/remotereceiverhastoken.go",
          "status": "added",
          "additions": 103,
          "deletions": 0,
          "patch": "@@ -0,0 +1,103 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/grpc/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+\ttestpb \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/grpc/proto\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(remotereceiverhastoken))\n+}\n+\n+type remotereceiverhastoken struct {\n+\tdaprd1 *daprd.Daprd\n+\tdaprd2 *daprd.Daprd\n+\tch     chan metadata.MD\n+}\n+\n+func (r *remotereceiverhastoken) Setup(t *testing.T) []framework.Option {\n+\tfn, ch := newServer()\n+\tr.ch = ch\n+\tapp := app.New(t,\n+\t\tapp.WithRegister(fn),\n+\t\tapp.WithOnInvokeFn(func(ctx context.Context, _ *commonv1.InvokeRequest) (*commonv1.InvokeResponse, error) {\n+\t\t\tmd, ok := metadata.FromIncomingContext(ctx)\n+\t\t\trequire.True(t, ok)\n+\t\t\tr.ch <- md\n+\t\t\treturn new(commonv1.InvokeResponse), nil\n+\t\t}),\n+\t)\n+\n+\tr.daprd1 = daprd.New(t)\n+\tr.daprd2 = daprd.New(t,\n+\t\tdaprd.WithAppProtocol(\"grpc\"),\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t\tdaprd.WithAppPort(app.Port(t)),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, r.daprd1, r.daprd2),\n+\t}\n+}\n+\n+func (r *remotereceiverhastoken) Run(t *testing.T, ctx context.Context) {\n+\tr.daprd1.WaitUntilRunning(t, ctx)\n+\tr.daprd2.WaitUntilRunning(t, ctx)\n+\n+\tclient := testpb.NewTestServiceClient(r.daprd1.GRPCConn(t, ctx))\n+\tctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", r.daprd2.AppID())\n+\t_, err := client.Ping(ctx, new(testpb.PingRequest))\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-r.ch:\n+\t\trequire.Equal(t, []string{\"abc\"}, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+\n+\tdclient := r.daprd1.GRPCClient(t, ctx)\n+\t_, err = dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: r.daprd2.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-r.ch:\n+\t\trequire.Equal(t, []string{\"abc\"}, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/grpc/appapitoken/remotereceivernotoken.go",
          "status": "added",
          "additions": 106,
          "deletions": 0,
          "patch": "@@ -0,0 +1,106 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/grpc/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+\ttestpb \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/grpc/proto\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(remotereceivernotoken))\n+}\n+\n+type remotereceivernotoken struct {\n+\tdaprd1 *daprd.Daprd\n+\tdaprd2 *daprd.Daprd\n+\tch     chan metadata.MD\n+}\n+\n+func (n *remotereceivernotoken) Setup(t *testing.T) []framework.Option {\n+\tfn, ch := newServer()\n+\tn.ch = ch\n+\tapp := app.New(t,\n+\t\tapp.WithRegister(fn),\n+\t\tapp.WithOnInvokeFn(func(ctx context.Context, _ *commonv1.InvokeRequest) (*commonv1.InvokeResponse, error) {\n+\t\t\tmd, ok := metadata.FromIncomingContext(ctx)\n+\t\t\trequire.True(t, ok)\n+\t\t\tn.ch <- md\n+\t\t\treturn new(commonv1.InvokeResponse), nil\n+\t\t}),\n+\t)\n+\n+\tn.daprd1 = daprd.New(t,\n+\t\tdaprd.WithAppProtocol(\"grpc\"),\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t)\n+\n+\tn.daprd2 = daprd.New(t,\n+\t\tdaprd.WithAppProtocol(\"grpc\"),\n+\t\tdaprd.WithAppPort(app.Port(t)),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, n.daprd1, n.daprd2),\n+\t}\n+}\n+\n+func (n *remotereceivernotoken) Run(t *testing.T, ctx context.Context) {\n+\tn.daprd1.WaitUntilRunning(t, ctx)\n+\tn.daprd2.WaitUntilRunning(t, ctx)\n+\n+\tclient := testpb.NewTestServiceClient(n.daprd1.GRPCConn(t, ctx))\n+\tctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", n.daprd2.AppID())\n+\t_, err := client.Ping(ctx, new(testpb.PingRequest))\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-n.ch:\n+\t\trequire.Empty(t, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+\n+\tdclient := n.daprd1.GRPCClient(t, ctx)\n+\t_, err = dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: n.daprd2.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-n.ch:\n+\t\trequire.Empty(t, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/grpc/appapitoken/selfnotoken.go",
          "status": "added",
          "additions": 99,
          "deletions": 0,
          "patch": "@@ -0,0 +1,99 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/grpc/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+\ttestpb \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/grpc/proto\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(selfnotoken))\n+}\n+\n+type selfnotoken struct {\n+\tdaprd *daprd.Daprd\n+\tch    chan metadata.MD\n+}\n+\n+func (n *selfnotoken) Setup(t *testing.T) []framework.Option {\n+\tfn, ch := newServer()\n+\tn.ch = ch\n+\tapp := app.New(t,\n+\t\tapp.WithRegister(fn),\n+\t\tapp.WithOnInvokeFn(func(ctx context.Context, _ *commonv1.InvokeRequest) (*commonv1.InvokeResponse, error) {\n+\t\t\tmd, ok := metadata.FromIncomingContext(ctx)\n+\t\t\trequire.True(t, ok)\n+\t\t\tn.ch <- md\n+\t\t\treturn new(commonv1.InvokeResponse), nil\n+\t\t}),\n+\t)\n+\n+\tn.daprd = daprd.New(t,\n+\t\tdaprd.WithAppProtocol(\"grpc\"),\n+\t\tdaprd.WithAppPort(app.Port(t)),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, n.daprd),\n+\t}\n+}\n+\n+func (n *selfnotoken) Run(t *testing.T, ctx context.Context) {\n+\tn.daprd.WaitUntilRunning(t, ctx)\n+\n+\tclient := testpb.NewTestServiceClient(n.daprd.GRPCConn(t, ctx))\n+\tctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", n.daprd.AppID())\n+\t_, err := client.Ping(ctx, new(testpb.PingRequest))\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-n.ch:\n+\t\trequire.Empty(t, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+\n+\tdclient := n.daprd.GRPCClient(t, ctx)\n+\t_, err = dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: n.daprd.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-n.ch:\n+\t\trequire.Empty(t, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/grpc/appapitoken/selfwithtoken.go",
          "status": "added",
          "additions": 100,
          "deletions": 0,
          "patch": "@@ -0,0 +1,100 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/grpc/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+\ttestpb \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/grpc/proto\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(selfwithtoken))\n+}\n+\n+type selfwithtoken struct {\n+\tdaprd *daprd.Daprd\n+\tch    chan metadata.MD\n+}\n+\n+func (s *selfwithtoken) Setup(t *testing.T) []framework.Option {\n+\tfn, ch := newServer()\n+\ts.ch = ch\n+\tapp := app.New(t,\n+\t\tapp.WithRegister(fn),\n+\t\tapp.WithOnInvokeFn(func(ctx context.Context, _ *commonv1.InvokeRequest) (*commonv1.InvokeResponse, error) {\n+\t\t\tmd, ok := metadata.FromIncomingContext(ctx)\n+\t\t\trequire.True(t, ok)\n+\t\t\ts.ch <- md\n+\t\t\treturn new(commonv1.InvokeResponse), nil\n+\t\t}),\n+\t)\n+\n+\ts.daprd = daprd.New(t,\n+\t\tdaprd.WithAppProtocol(\"grpc\"),\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t\tdaprd.WithAppPort(app.Port(t)),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, s.daprd),\n+\t}\n+}\n+\n+func (s *selfwithtoken) Run(t *testing.T, ctx context.Context) {\n+\ts.daprd.WaitUntilRunning(t, ctx)\n+\n+\tclient := testpb.NewTestServiceClient(s.daprd.GRPCConn(t, ctx))\n+\tctx = metadata.AppendToOutgoingContext(ctx, \"dapr-app-id\", s.daprd.AppID())\n+\t_, err := client.Ping(ctx, new(testpb.PingRequest))\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-s.ch:\n+\t\trequire.Equal(t, []string{\"abc\"}, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+\n+\tdclient := s.daprd.GRPCClient(t, ctx)\n+\t_, err = dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: s.daprd.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase md := <-s.ch:\n+\t\trequire.Equal(t, []string{\"abc\"}, md.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/grpc/appapitoken/server.go",
          "status": "added",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -0,0 +1,43 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/metadata\"\n+\n+\ttestpb \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/grpc/proto\"\n+)\n+\n+type pingServer struct {\n+\ttestpb.UnsafeTestServiceServer\n+\tch chan metadata.MD\n+}\n+\n+func newServer() (func(*grpc.Server), chan metadata.MD) {\n+\tch := make(chan metadata.MD, 1)\n+\treturn func(s *grpc.Server) {\n+\t\ttestpb.RegisterTestServiceServer(s, &pingServer{\n+\t\t\tch: ch,\n+\t\t})\n+\t}, ch\n+}\n+\n+func (p *pingServer) Ping(ctx context.Context, _ *testpb.PingRequest) (*testpb.PingResponse, error) {\n+\tmd, _ := metadata.FromIncomingContext(ctx)\n+\tp.ch <- md\n+\treturn new(testpb.PingResponse), nil\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/grpc/grpc.go",
          "status": "added",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -0,0 +1,18 @@\n+/*\n+Copyright 2023 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package grpc\n+\n+import (\n+\t_ \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/grpc/appapitoken\"\n+)"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/http/appapitoken/remotebothtokens.go",
          "status": "added",
          "additions": 89,
          "deletions": 0,
          "patch": "@@ -0,0 +1,89 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/http/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(remotebothtokens))\n+}\n+\n+type remotebothtokens struct {\n+\tdaprd1 *daprd.Daprd\n+\tdaprd2 *daprd.Daprd\n+\tch     chan http.Header\n+}\n+\n+func (b *remotebothtokens) Setup(t *testing.T) []framework.Option {\n+\tb.ch = make(chan http.Header, 1)\n+\tapp := app.New(t,\n+\t\tapp.WithHandlerFunc(\"/helloworld\", func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tb.ch <- r.Header\n+\t\t}),\n+\t)\n+\n+\tb.daprd1 = daprd.New(t,\n+\t\tdaprd.WithAppID(\"app1\"),\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t)\n+\n+\tb.daprd2 = daprd.New(t,\n+\t\tdaprd.WithAppAPIToken(t, \"def\"),\n+\t\tdaprd.WithAppPort(app.Port()),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, b.daprd1, b.daprd2),\n+\t}\n+}\n+\n+func (b *remotebothtokens) Run(t *testing.T, ctx context.Context) {\n+\tb.daprd1.WaitUntilRunning(t, ctx)\n+\tb.daprd2.WaitUntilRunning(t, ctx)\n+\tb.daprd2.WaitUntilAppHealth(t, ctx)\n+\n+\tdclient := b.daprd1.GRPCClient(t, ctx)\n+\t_, err := dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: b.daprd2.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase header := <-b.ch:\n+\t\trequire.Equal(t, \"def\", header.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for metadata\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/http/appapitoken/remotereceiverhastoken.go",
          "status": "added",
          "additions": 84,
          "deletions": 0,
          "patch": "@@ -0,0 +1,84 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/http/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(remotereceiverhastoken))\n+}\n+\n+type remotereceiverhastoken struct {\n+\tdaprd1 *daprd.Daprd\n+\tdaprd2 *daprd.Daprd\n+\tch     chan http.Header\n+}\n+\n+func (r *remotereceiverhastoken) Setup(t *testing.T) []framework.Option {\n+\tr.ch = make(chan http.Header, 1)\n+\tapp := app.New(t,\n+\t\tapp.WithHandlerFunc(\"/helloworld\", func(w http.ResponseWriter, req *http.Request) {\n+\t\t\tr.ch <- req.Header\n+\t\t}),\n+\t)\n+\n+\tr.daprd1 = daprd.New(t)\n+\tr.daprd2 = daprd.New(t,\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t\tdaprd.WithAppPort(app.Port()),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, r.daprd1, r.daprd2),\n+\t}\n+}\n+\n+func (r *remotereceiverhastoken) Run(t *testing.T, ctx context.Context) {\n+\tr.daprd1.WaitUntilRunning(t, ctx)\n+\tr.daprd2.WaitUntilRunning(t, ctx)\n+\n+\tdclient := r.daprd1.GRPCClient(t, ctx)\n+\t_, err := dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: r.daprd2.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase header := <-r.ch:\n+\t\trequire.Equal(t, \"abc\", header.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for header\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/http/appapitoken/remotereceivernotoken.go",
          "status": "added",
          "additions": 86,
          "deletions": 0,
          "patch": "@@ -0,0 +1,86 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/http/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(remotereceivernotoken))\n+}\n+\n+type remotereceivernotoken struct {\n+\tdaprd1 *daprd.Daprd\n+\tdaprd2 *daprd.Daprd\n+\tch     chan http.Header\n+}\n+\n+func (n *remotereceivernotoken) Setup(t *testing.T) []framework.Option {\n+\tn.ch = make(chan http.Header, 1)\n+\tapp := app.New(t,\n+\t\tapp.WithHandlerFunc(\"/helloworld\", func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tn.ch <- r.Header\n+\t\t}),\n+\t)\n+\n+\tn.daprd1 = daprd.New(t,\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t)\n+\n+\tn.daprd2 = daprd.New(t,\n+\t\tdaprd.WithAppPort(app.Port()),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, n.daprd1, n.daprd2),\n+\t}\n+}\n+\n+func (n *remotereceivernotoken) Run(t *testing.T, ctx context.Context) {\n+\tn.daprd1.WaitUntilRunning(t, ctx)\n+\tn.daprd2.WaitUntilRunning(t, ctx)\n+\n+\tdclient := n.daprd1.GRPCClient(t, ctx)\n+\t_, err := dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: n.daprd2.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase header := <-n.ch:\n+\t\trequire.Empty(t, header.Values(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for header\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/http/appapitoken/selfnotoken.go",
          "status": "added",
          "additions": 80,
          "deletions": 0,
          "patch": "@@ -0,0 +1,80 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/http/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(selfnotoken))\n+}\n+\n+type selfnotoken struct {\n+\tdaprd *daprd.Daprd\n+\tch    chan http.Header\n+}\n+\n+func (n *selfnotoken) Setup(t *testing.T) []framework.Option {\n+\tn.ch = make(chan http.Header, 1)\n+\tapp := app.New(t,\n+\t\tapp.WithHandlerFunc(\"/helloworld\", func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tn.ch <- r.Header\n+\t\t}),\n+\t)\n+\n+\tn.daprd = daprd.New(t,\n+\t\tdaprd.WithAppPort(app.Port()),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, n.daprd),\n+\t}\n+}\n+\n+func (n *selfnotoken) Run(t *testing.T, ctx context.Context) {\n+\tn.daprd.WaitUntilRunning(t, ctx)\n+\n+\tdclient := n.daprd.GRPCClient(t, ctx)\n+\t_, err := dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: n.daprd.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase header := <-n.ch:\n+\t\trequire.Empty(t, header.Values(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for header\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/http/appapitoken/selfwithtoken.go",
          "status": "added",
          "additions": 81,
          "deletions": 0,
          "patch": "@@ -0,0 +1,81 @@\n+/*\n+Copyright 2024 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package appapitoken\n+\n+import (\n+\t\"context\"\n+\t\"net/http\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"google.golang.org/protobuf/types/known/anypb\"\n+\n+\tcommonv1 \"github.com/dapr/dapr/pkg/proto/common/v1\"\n+\truntimev1 \"github.com/dapr/dapr/pkg/proto/runtime/v1\"\n+\t\"github.com/dapr/dapr/tests/integration/framework\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/daprd\"\n+\t\"github.com/dapr/dapr/tests/integration/framework/process/http/app\"\n+\t\"github.com/dapr/dapr/tests/integration/suite\"\n+)\n+\n+func init() {\n+\tsuite.Register(new(selfwithtoken))\n+}\n+\n+type selfwithtoken struct {\n+\tdaprd *daprd.Daprd\n+\tch    chan http.Header\n+}\n+\n+func (s *selfwithtoken) Setup(t *testing.T) []framework.Option {\n+\ts.ch = make(chan http.Header, 1)\n+\tapp := app.New(t,\n+\t\tapp.WithHandlerFunc(\"/helloworld\", func(w http.ResponseWriter, r *http.Request) {\n+\t\t\ts.ch <- r.Header\n+\t\t}),\n+\t)\n+\n+\ts.daprd = daprd.New(t,\n+\t\tdaprd.WithAppAPIToken(t, \"abc\"),\n+\t\tdaprd.WithAppPort(app.Port()),\n+\t)\n+\n+\treturn []framework.Option{\n+\t\tframework.WithProcesses(app, s.daprd),\n+\t}\n+}\n+\n+func (s *selfwithtoken) Run(t *testing.T, ctx context.Context) {\n+\ts.daprd.WaitUntilRunning(t, ctx)\n+\n+\tdclient := s.daprd.GRPCClient(t, ctx)\n+\t_, err := dclient.InvokeService(ctx, &runtimev1.InvokeServiceRequest{\n+\t\tId: s.daprd.AppID(),\n+\t\tMessage: &commonv1.InvokeRequest{\n+\t\t\tMethod:        \"helloworld\",\n+\t\t\tData:          new(anypb.Any),\n+\t\t\tHttpExtension: &commonv1.HTTPExtension{Verb: commonv1.HTTPExtension_GET},\n+\t\t},\n+\t})\n+\trequire.NoError(t, err)\n+\n+\tselect {\n+\tcase header := <-s.ch:\n+\t\trequire.Equal(t, \"abc\", header.Get(\"dapr-api-token\"))\n+\tcase <-time.After(5 * time.Second):\n+\t\tassert.Fail(t, \"timed out waiting for header\")\n+\t}\n+}"
        },
        {
          "filename": "tests/integration/suite/daprd/serviceinvocation/http/http.go",
          "status": "added",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -0,0 +1,18 @@\n+/*\n+Copyright 2023 The Dapr Authors\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+    http://www.apache.org/licenses/LICENSE-2.0\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implieh.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+*/\n+\n+package http\n+\n+import (\n+\t_ \"github.com/dapr/dapr/tests/integration/suite/daprd/serviceinvocation/http/appapitoken\"\n+)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 15,
        "unique_directories": 7,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3a0f55154984ae9c6b6b703081806be7e9523164",
            "date": "2025-01-10T15:17:07Z",
            "author_login": "Gallardot"
          },
          {
            "sha": "b618e8d1071eab4a96bc3603b4df6c22623b5e9c",
            "date": "2025-01-09T19:31:45Z",
            "author_login": "antontroshin"
          },
          {
            "sha": "6c488fdf7d2995d074413c875fc2e3fb4134a33b",
            "date": "2024-12-02T14:51:59Z",
            "author_login": "JoshVanL"
          },
          {
            "sha": "34f0b8765c1ad4eab025b21f8302cae29b935199",
            "date": "2024-12-02T03:04:13Z",
            "author_login": "artursouza"
          },
          {
            "sha": "24ac3b84a96c399e998e797a0a09719ec98ad1bc",
            "date": "2024-11-28T14:39:02Z",
            "author_login": "lrascao"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Dapr is a portable, event-driven, runtime for building distributed applications across cloud and edge. Dapr sends the app token of the invoker app instead of the app token of the invoked app. This causes of a leak of the application token of the invoker app to the invoked app when using Dapr as a gRPC proxy for remote service invocation. This vulnerability impacts Dapr users who use Dapr as a gRPC proxy for remote service invocation as well as the Dapr App API token functionality. An attacker could exploit this vulnerability to gain access to the app token of the invoker app, potentially compromising security and authentication mechanisms. This vulnerability was patched in version 1.13.3.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-23T09:15:09.890",
    "last_modified": "2024-11-21T09:19:58.247",
    "fix_date": "2024-05-20T21:57:52Z"
  },
  "references": [
    {
      "url": "https://github.com/dapr/dapr/commit/e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/issues/7344",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/pull/7404",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/releases/tag/v1.13.3",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/security/advisories/GHSA-284c-x8m7-9w5h",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/commit/e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/issues/7344",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/pull/7404",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/releases/tag/v1.13.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/dapr/dapr/security/advisories/GHSA-284c-x8m7-9w5h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.280610",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dapr",
    "owner": "dapr",
    "created_at": "2019-06-19T00:49:06Z",
    "updated_at": "2025-01-14T12:22:07Z",
    "pushed_at": "2025-01-14T00:40:09Z",
    "size": 124744,
    "stars": 24310,
    "forks": 1913,
    "open_issues": 427,
    "watchers": 24310,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release-0.1",
      "release-0.2",
      "release-0.3",
      "release-0.4",
      "release-0.5",
      "release-0.6",
      "release-0.7",
      "release-0.8",
      "release-0.9",
      "release-0.10",
      "release-0.11",
      "release-1.0-rc4_merge_master",
      "release-1.0",
      "release-1.1",
      "release-1.2",
      "release-1.3",
      "release-1.4",
      "release-1.5",
      "release-1.6",
      "release-1.7",
      "release-1.8",
      "release-1.9",
      "release-1.10",
      "release-1.11",
      "release-1.12"
    ],
    "languages": {
      "Go": 8421049,
      "Shell": 77924,
      "Makefile": 75429,
      "JavaScript": 26814,
      "Bicep": 26690,
      "C#": 20676,
      "Java": 17757,
      "Python": 13029,
      "Dockerfile": 9034,
      "Mustache": 7525,
      "Smarty": 4268,
      "PHP": 2600,
      "Batchfile": 1187
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:28:49.244398"
  }
}