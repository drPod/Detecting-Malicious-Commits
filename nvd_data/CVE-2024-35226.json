{
  "cve_id": "CVE-2024-35226",
  "github_data": {
    "repository": "smarty-php/smarty",
    "fix_commit": "0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a",
    "related_commits": [
      "0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a",
      "0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a"
    ],
    "patch_url": "https://github.com/smarty-php/smarty/commit/0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a.patch",
    "fix_commit_details": {
      "sha": "0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a",
      "commit_date": "2024-05-28T20:44:30Z",
      "author": {
        "login": "wisskid",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4rmg-292m-wg3w",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 172,
        "additions": 96,
        "deletions": 76
      },
      "files": [
        {
          "filename": "changelog/GHSA-4rmg-292m-wg3w.md",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+- Fixed a code injection vulnerability in extends-tag. This addresses CVE-2024-35226.\n+- Added `$smarty->setCacheModifiedCheck()` setter for cache_modified_check\n\\ No newline at end of file"
        },
        {
          "filename": "src/Compile/Tag/ExtendsTag.php",
          "status": "modified",
          "additions": 2,
          "deletions": 62,
          "patch": "@@ -32,7 +32,7 @@ class ExtendsTag extends Inheritance {\n \t *\n \t * @var array\n \t */\n-\tprotected $optional_attributes = ['extends_resource'];\n+\tprotected $optional_attributes = [];\n \n \t/**\n \t * Attribute definition: Overwrites base class.\n@@ -64,29 +64,7 @@ public function compile($args, \\Smarty\\Compiler\\Template $compiler, $parameter =\n \t\t}\n \t\t// add code to initialize inheritance\n \t\t$this->registerInit($compiler, true);\n-\t\t$file = trim($_attr['file'], '\\'\"');\n-\t\tif (strlen($file) > 8 && substr($file, 0, 8) === 'extends:') {\n-\t\t\t// generate code for each template\n-\t\t\t$files = array_reverse(explode('|', substr($file, 8)));\n-\t\t\t$i = 0;\n-\t\t\tforeach ($files as $file) {\n-\t\t\t\tif ($file[0] === '\"') {\n-\t\t\t\t\t$file = trim($file, '\".');\n-\t\t\t\t} else {\n-\t\t\t\t\t$file = \"'{$file}'\";\n-\t\t\t\t}\n-\t\t\t\t$i++;\n-\t\t\t\tif ($i === count($files) && isset($_attr['extends_resource'])) {\n-\t\t\t\t\t$this->compileEndChild($compiler);\n-\t\t\t\t}\n-\t\t\t\t$this->compileInclude($compiler, $file);\n-\t\t\t}\n-\t\t\tif (!isset($_attr['extends_resource'])) {\n-\t\t\t\t$this->compileEndChild($compiler);\n-\t\t\t}\n-\t\t} else {\n-\t\t\t$this->compileEndChild($compiler, $_attr['file']);\n-\t\t}\n+\t\t$this->compileEndChild($compiler, $_attr['file']);\n \t\treturn '';\n \t}\n \n@@ -106,42 +84,4 @@ private function compileEndChild(\\Smarty\\Compiler\\Template $compiler, $template\n \t\t\t(isset($template) ?\t\", {$template}, \\$_smarty_current_dir\" : '') . \");\\n?>\"\n \t\t);\n \t}\n-\n-\t/**\n-\t * Add code for including subtemplate to end of template\n-\t *\n-\t * @param \\Smarty\\Compiler\\Template $compiler\n-\t * @param string $template subtemplate name\n-\t *\n-\t * @throws \\Smarty\\CompilerException\n-\t * @throws \\Smarty\\Exception\n-\t */\n-\tprivate function compileInclude(\\Smarty\\Compiler\\Template $compiler, $template) {\n-\t\t$compiler->getParser()->template_postfix[] = new \\Smarty\\ParseTree\\Tag(\n-\t\t\t$compiler->getParser(),\n-\t\t\t$compiler->compileTag(\n-\t\t\t\t'include',\n-\t\t\t\t[\n-\t\t\t\t\t$template,\n-\t\t\t\t\t['scope' => 'parent'],\n-\t\t\t\t]\n-\t\t\t)\n-\t\t);\n-\t}\n-\n-\t/**\n-\t * Create source code for {extends} from source components array\n-\t *\n-\t * @param \\Smarty\\Template $template\n-\t *\n-\t * @return string\n-\t */\n-\tpublic static function extendsSourceArrayCode(\\Smarty\\Template $template) {\n-\t\t$resources = [];\n-\t\tforeach ($template->getSource()->components as $source) {\n-\t\t\t$resources[] = $source->resource;\n-\t\t}\n-\t\treturn $template->getLeftDelimiter() . 'extends file=\\'extends:' . join('|', $resources) .\n-\t\t\t'\\' extends_resource=true' . $template->getRightDelimiter();\n-\t}\n }"
        },
        {
          "filename": "src/Compiler/Template.php",
          "status": "modified",
          "additions": 27,
          "deletions": 11,
          "patch": "@@ -403,21 +403,37 @@ public function compileTemplateSource(\\Smarty\\Template $template, \\Smarty\\Compil\n \t\t\t}\n \t\t\t// get template source\n \t\t\tif (!empty($this->template->getSource()->components)) {\n-\t\t\t\t// we have array of inheritance templates by extends: resource\n-\t\t\t\t// generate corresponding source code sequence\n-\t\t\t\t$_content =\n-\t\t\t\t\tExtendsTag::extendsSourceArrayCode($this->template);\n+\n+\t\t\t\t$_compiled_code = '<?php $_smarty_tpl->getInheritance()->init($_smarty_tpl, true); ?>';\n+\n+\t\t\t\t$i = 0;\n+\t\t\t\t$reversed_components = array_reverse($this->template->getSource()->components);\n+\t\t\t\tforeach ($reversed_components as $source) {\n+\t\t\t\t\t$i++;\n+\t\t\t\t\tif ($i === count($reversed_components)) {\n+\t\t\t\t\t\t$_compiled_code .= '<?php $_smarty_tpl->getInheritance()->endChild($_smarty_tpl); ?>';\n+\t\t\t\t\t}\n+\t\t\t\t\t$_compiled_code .= $this->compileTag(\n+\t\t\t\t\t\t'include',\n+\t\t\t\t\t\t[\n+\t\t\t\t\t\t\tvar_export($source->resource, true),\n+\t\t\t\t\t\t\t['scope' => 'parent'],\n+\t\t\t\t\t\t]\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\t\t\t\t$_compiled_code = $this->smarty->runPostFilters($_compiled_code, $this->template);\n \t\t\t} else {\n \t\t\t\t// get template source\n \t\t\t\t$_content = $this->template->getSource()->getContent();\n+\t\t\t\t$_compiled_code = $this->smarty->runPostFilters(\n+\t\t\t\t\t$this->doCompile(\n+\t\t\t\t\t\t$this->smarty->runPreFilters($_content, $this->template),\n+\t\t\t\t\t\ttrue\n+\t\t\t\t\t),\n+\t\t\t\t\t$this->template\n+\t\t\t\t);\n \t\t\t}\n-\t\t\t$_compiled_code = $this->smarty->runPostFilters(\n-\t\t\t\t$this->doCompile(\n-\t\t\t\t\t$this->smarty->runPreFilters($_content, $this->template),\n-\t\t\t\t\ttrue\n-\t\t\t\t),\n-\t\t\t\t$this->template\n-\t\t\t);\n+\n \t\t} catch (\\Exception $e) {\n \t\t\tif ($this->smarty->debugging) {\n \t\t\t\t$this->smarty->getDebug()->end_compile($this->template);"
        },
        {
          "filename": "src/Smarty.php",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -2211,5 +2211,14 @@ private function returnOrCreateTemplate($template, $cache_id = null, $compile_id\n \t\treturn $template;\n \t}\n \n+\t/**\n+\t * Sets if Smarty should check If-Modified-Since headers to determine cache validity.\n+\t * @param bool $cache_modified_check\n+\t * @return void\n+\t */\n+\tpublic function setCacheModifiedCheck($cache_modified_check): void {\n+\t\t$this->cache_modified_check = (bool) $cache_modified_check;\n+\t}\n+\n }\n "
        },
        {
          "filename": "tests/UnitTests/TemplateSource/TagTests/BockExtend/CompileBlockExtendsTest.php",
          "status": "modified",
          "additions": 33,
          "deletions": 3,
          "patch": "@@ -1193,8 +1193,38 @@ public function dataTestBlockNocache()\n         );\n     }\n \n-\tpublic function testBlockWithAssign() {\n-\t\t$this->assertEquals('Captured content is: Content with lots of html here', $this->smarty->fetch('038_child.tpl'));\n-\t}\n+    public function testBlockWithAssign() {\n+        $this->assertEquals('Captured content is: Content with lots of html here', $this->smarty->fetch('038_child.tpl'));\n+    }\n+\n+    /**\n+     * Test escaping of file parameter\n+     */\n+    public function testEscaping()\n+    {\n+        $this->expectException(\\Smarty\\Exception::class);\n+        $this->expectExceptionMessageMatches('/Unable to load.*/');\n+        $this->assertEquals('hello world', $this->smarty->fetch('escaping.tpl'));\n+    }\n+\n+    /**\n+     * Test escaping of file parameter 2\n+     */\n+    public function testEscaping2()\n+    {\n+        $this->expectException(\\Smarty\\Exception::class);\n+        $this->expectExceptionMessageMatches('/Unable to load.*/');\n+        $this->assertEquals('hello world', $this->smarty->fetch('escaping2.tpl'));\n+    }\n+\n+    /**\n+     * Test escaping of file parameter 3\n+     */\n+    public function testEscaping3()\n+    {\n+        $this->expectException(\\Smarty\\Exception::class);\n+        $this->expectExceptionMessageMatches('/Unable to load.*/');\n+        $this->assertEquals('hello world', $this->smarty->fetch('escaping3.tpl'));\n+    }\n \n }"
        },
        {
          "filename": "tests/UnitTests/TemplateSource/TagTests/BockExtend/templates/escaping.tpl",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+{extends \"extends:helloworld.tpl', var_dump(shell_exec('ls')), 1, 2, 3);}}?>\"}\n\\ No newline at end of file"
        },
        {
          "filename": "tests/UnitTests/TemplateSource/TagTests/BockExtend/templates/escaping2.tpl",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+{extends 'extends:\"helloworld.tpl\\', var_dump(shell_exec(\\'ls\\')), 1, 2, 3);}}?>'}\n\\ No newline at end of file"
        },
        {
          "filename": "tests/UnitTests/TemplateSource/TagTests/BockExtend/templates/escaping3.tpl",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+{extends file='extends:\"helloworld.tpl'|cat:\"', var_dump(shell_exec('ls')), 1, 2, 3);}}?>\"}\n\\ No newline at end of file"
        },
        {
          "filename": "tests/UnitTests/TemplateSource/TagTests/Include/CompileIncludeTest.php",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -82,6 +82,18 @@ public function testSpacing_001V3($merge, $caching, $text)\n         $this->assertEquals('I1I2I3', $content, $text);\n     }\n \n+    /**\n+     * test template name escaping\n+     */\n+    public function testIncludeFilenameEscaping()\n+    {\n+        $this->expectException(\\Smarty\\Exception::class);\n+        $this->expectExceptionMessageMatches('/Unable to load.*/');\n+        $tpl = $this->smarty->createTemplate('test_include_security.tpl');\n+        $content = $this->smarty->fetch($tpl);\n+        $this->assertEquals(\"hello world\", $content);\n+    }\n+\n     /**\n      * test standard output\n      *"
        },
        {
          "filename": "tests/UnitTests/TemplateSource/TagTests/Include/templates/test_include_security.tpl",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+{include file=\"helloworld.tpl', var_dump(shell_exec('ls')), 1, 2, 3);}}?>\"}"
        },
        {
          "filename": "tests/UnitTests/TemplateSource/_Issues/419/ExtendsIssue419Test.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -32,4 +32,11 @@ public function testextends419()\n         $this->assertEquals('child', $this->smarty->fetch('extends:001_parent.tpl|001_child.tpl'));\n     }\n \n+    public function testextendsSecurity()\n+    {\n+        $this->expectException(\\Smarty\\Exception::class);\n+        $this->expectExceptionMessageMatches('/Unable to load.*/');\n+        $this->assertEquals('child', $this->smarty->fetch('string:{include \"001_parent.tpl\\', var_dump(shell_exec(\\'ls\\')), 1, 2, 3);}}?>\"}'));\n+    }\n+\n }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 9,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5d1ea5806a10071fdb6af0fa945c8e3f58e033c4",
            "date": "2024-12-28T16:40:25Z",
            "author_login": "wisskid"
          },
          {
            "sha": "ab247c723b58743f3ba9fe95dc13e91e11d9fc97",
            "date": "2024-12-27T22:37:21Z",
            "author_login": "wisskid"
          },
          {
            "sha": "fb997111f46c069ee140829a220bb3b69b34969b",
            "date": "2024-12-27T22:08:17Z",
            "author_login": "wisskid"
          },
          {
            "sha": "c6bff5795081ca5e60aabda59fb87daa511acd1e",
            "date": "2024-12-23T00:38:44Z",
            "author_login": "wisskid"
          },
          {
            "sha": "07faafe4da4b71489e0f9472242f0cc01e09250a",
            "date": "2024-12-23T00:38:41Z",
            "author_login": "wisskid"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-94",
    "description": "Smarty is a template engine for PHP, facilitating the separation of presentation (HTML/CSS) from application logic. In affected versions template authors could inject php code by choosing a malicious file name for an extends-tag. Sites that cannot fully trust template authors should update asap. All users are advised to update. There is no patch for users on the v3 branch. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-28T21:16:30.947",
    "last_modified": "2024-11-21T09:19:58.633",
    "fix_date": "2024-05-28T20:44:30Z"
  },
  "references": [
    {
      "url": "https://github.com/smarty-php/smarty/commit/0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/smarty-php/smarty/security/advisories/GHSA-4rmg-292m-wg3w",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/smarty-php/smarty/commit/0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/smarty-php/smarty/security/advisories/GHSA-4rmg-292m-wg3w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.321936",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "smarty",
    "owner": "smarty-php",
    "created_at": "2014-10-30T20:15:10Z",
    "updated_at": "2025-01-13T22:33:50Z",
    "pushed_at": "2025-01-08T11:27:01Z",
    "size": 23593,
    "stars": 2281,
    "forks": 715,
    "open_issues": 81,
    "watchers": 2281,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 1613277,
      "Smarty": 109878,
      "Yacc": 42889,
      "Dockerfile": 2385,
      "Shell": 2006,
      "Makefile": 906
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:19:38.611302"
  }
}