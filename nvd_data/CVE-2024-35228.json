{
  "cve_id": "CVE-2024-35228",
  "github_data": {
    "repository": "wagtail/wagtail",
    "fix_commit": "284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
    "related_commits": [
      "284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
      "284f75a6f91f7ab18cc304d7d34f33b559ae37b1"
    ],
    "patch_url": "https://github.com/wagtail/wagtail/commit/284f75a6f91f7ab18cc304d7d34f33b559ae37b1.patch",
    "fix_commit_details": {
      "sha": "284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
      "commit_date": "2024-05-22T19:34:30Z",
      "author": {
        "login": "gasman",
        "type": "User",
        "stats": {
          "total_commits": 5988,
          "average_weekly_commits": 10.432055749128919,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 513
        }
      },
      "commit_message": {
        "title": "Restore permission check on settings EditView",
        "length": 45,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 322,
        "additions": 289,
        "deletions": 33
      },
      "files": [
        {
          "filename": "wagtail/contrib/settings/tests/generic/test_admin.py",
          "status": "modified",
          "additions": 144,
          "deletions": 16,
          "patch": "@@ -77,11 +77,6 @@ def edit_url(self, setting):\n class TestGenericSettingCreateView(BaseTestGenericSettingView):\n     def setUp(self):\n         self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -113,11 +108,62 @@ def test_file_upload_multipart(self):\n         # Ensure the form supports file uploads\n         self.assertContains(response, 'enctype=\"multipart/form-data\"')\n \n-    def test_create_restricted_field_without_permission(self):\n+    def test_create_restricted_field_without_any_permission(self):\n+        # User has no permissions over the setting model, only access to the admin\n         self.user.is_superuser = False\n         self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+        )\n \n         self.assertFalse(TestPermissionedGenericSetting.objects.exists())\n+        # GET should redirect away with permission denied\n+        response = self.get(setting=TestPermissionedGenericSetting)\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # the GET might create a setting object, depending on when the permission check is done,\n+        # so remove any created objects prior to testing the POST\n+        TestPermissionedGenericSetting.objects.all().delete()\n+\n+        # POST should redirect away with permission denied\n+        response = self.post(\n+            post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n+            setting=TestPermissionedGenericSetting,\n+        )\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # The retrieved setting should contain none of the submitted data\n+        setting = TestPermissionedGenericSetting.load()\n+        self.assertEqual(setting.title, \"\")\n+        self.assertEqual(setting.sensitive_email, \"\")\n+\n+    def test_create_restricted_field_without_field_permission(self):\n+        # User has edit permission over the setting model, but not the sensitive_email field\n+        self.user.is_superuser = False\n+        self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedgenericsetting\",\n+            ),\n+        )\n+\n+        self.assertFalse(TestPermissionedGenericSetting.objects.exists())\n+        # GET should provide a form with title but not sensitive_email\n+        response = self.get(setting=TestPermissionedGenericSetting)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n+        self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n+\n+        # the GET creates a setting object, so remove any created objects prior to testing the POST\n+        TestPermissionedGenericSetting.objects.all().delete()\n+\n+        # POST should allow the title to be set, but not the sensitive_email\n         response = self.post(\n             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n             setting=TestPermissionedGenericSetting,\n@@ -129,11 +175,31 @@ def test_create_restricted_field_without_permission(self):\n         self.assertEqual(settings.sensitive_email, \"\")\n \n     def test_create_restricted_field(self):\n+        # User has edit permission over the setting model, including the sensitive_email field\n         self.user.is_superuser = False\n         self.user.save()\n         self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedgenericsetting\",\n+            ),\n+            Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\"),\n         )\n+\n+        self.assertFalse(TestPermissionedGenericSetting.objects.exists())\n+        # GET should provide a form with title and sensitive_email\n+        response = self.get(setting=TestPermissionedGenericSetting)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n+        self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n+\n+        # the GET creates a setting object, so remove any created objects prior to testing the POST\n+        TestPermissionedGenericSetting.objects.all().delete()\n+\n+        # POST should allow both title and sensitive_email to be set\n         self.assertFalse(TestPermissionedGenericSetting.objects.exists())\n         response = self.post(\n             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n@@ -153,11 +219,6 @@ def setUp(self):\n         self.test_setting.save()\n \n         self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -206,48 +267,115 @@ def test_for_request(self):\n         )\n \n     def test_edit_restricted_field(self):\n+        # User has edit permission over the setting model, including the sensitive_email field\n         test_setting = TestPermissionedGenericSetting()\n         test_setting.sensitive_email = \"test@example.com\"\n+        test_setting.title = \"Old title\"\n         test_setting.save()\n         self.user.is_superuser = False\n         self.user.save()\n \n         self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\")\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedgenericsetting\",\n+            ),\n+            Permission.objects.get(codename=\"can_edit_sensitive_email_generic_setting\"),\n         )\n \n+        # GET should provide a form with title and sensitive_email\n         response = self.get(setting=TestPermissionedGenericSetting)\n         self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n \n+        # POST should allow both title and sensitive_email to be set\n         response = self.post(\n             setting=TestPermissionedGenericSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n+            post_data={\n+                \"sensitive_email\": \"test-updated@example.com\",\n+                \"title\": \"New title\",\n+            },\n         )\n         self.assertEqual(response.status_code, 302)\n \n         test_setting.refresh_from_db()\n         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")\n+        self.assertEqual(test_setting.title, \"New title\")\n \n-    def test_edit_restricted_field_without_permission(self):\n+    def test_edit_restricted_field_without_field_permission(self):\n+        # User has edit permission over the setting model, but not the sensitive_email field\n         test_setting = TestPermissionedGenericSetting()\n         test_setting.sensitive_email = \"test@example.com\"\n+        test_setting.title = \"Old title\"\n         test_setting.save()\n         self.user.is_superuser = False\n         self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedgenericsetting\",\n+            ),\n+        )\n \n+        # GET should provide a form with title but not sensitive_email\n         response = self.get(setting=TestPermissionedGenericSetting)\n         self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n \n+        # POST should allow the title to be set, but not the sensitive_email\n         response = self.post(\n             setting=TestPermissionedGenericSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n+            post_data={\n+                \"sensitive_email\": \"test-updated@example.com\",\n+                \"title\": \"New title\",\n+            },\n         )\n         self.assertEqual(response.status_code, 302)\n \n         test_setting.refresh_from_db()\n         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")\n+        self.assertEqual(test_setting.title, \"New title\")\n+\n+    def test_edit_restricted_field_without_any_permission(self):\n+        # User has no permissions over the setting model, only access to the admin\n+        test_setting = TestPermissionedGenericSetting()\n+        test_setting.sensitive_email = \"test@example.com\"\n+        test_setting.title = \"Old title\"\n+        test_setting.save()\n+        self.user.is_superuser = False\n+        self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+        )\n+\n+        # GET should redirect away with permission denied\n+        response = self.get(setting=TestPermissionedGenericSetting)\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # POST should redirect away with permission denied\n+        response = self.post(\n+            setting=TestPermissionedGenericSetting,\n+            post_data={\n+                \"sensitive_email\": \"test-updated@example.com\",\n+                \"title\": \"new title\",\n+            },\n+        )\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # The retrieved setting should be unchanged\n+        test_setting.refresh_from_db()\n+        self.assertEqual(test_setting.sensitive_email, \"test@example.com\")\n+        self.assertEqual(test_setting.title, \"Old title\")\n \n \n class TestAdminPermission(WagtailTestUtils, TestCase):"
        },
        {
          "filename": "wagtail/contrib/settings/tests/site_specific/test_admin.py",
          "status": "modified",
          "additions": 142,
          "deletions": 17,
          "patch": "@@ -73,11 +73,6 @@ def edit_url(self, setting, site_pk=1):\n class TestSiteSettingCreateView(BaseTestSiteSettingView):\n     def setUp(self):\n         self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -109,11 +104,61 @@ def test_file_upload_multipart(self):\n         # Ensure the form supports file uploads\n         self.assertContains(response, 'enctype=\"multipart/form-data\"')\n \n-    def test_create_restricted_field_without_permission(self):\n+    def test_create_restricted_field_without_any_permission(self):\n+        # User has no permissions over the setting model, only access to the admin\n+        self.user.is_superuser = False\n+        self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+        )\n+\n+        self.assertFalse(TestPermissionedSiteSetting.objects.exists())\n+        # GET should redirect away with permission denied\n+        response = self.get(setting=TestPermissionedSiteSetting)\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # the GET might create a setting object, depending on when the permission check is done,\n+        # so remove any created objects prior to testing the POST\n+\n+        # POST should redirect away with permission denied\n+        response = self.post(\n+            post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n+            setting=TestPermissionedSiteSetting,\n+        )\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # The retrieved setting should contain none of the submitted data\n+        settings = TestPermissionedSiteSetting.for_site(Site.objects.get(pk=1))\n+        self.assertEqual(settings.title, \"\")\n+        self.assertEqual(settings.sensitive_email, \"\")\n+\n+    def test_create_restricted_field_without_field_permission(self):\n+        # User has edit permission over the setting model, but not the sensitive_email field\n         self.user.is_superuser = False\n         self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedsitesetting\",\n+            ),\n+        )\n \n         self.assertFalse(TestPermissionedSiteSetting.objects.exists())\n+        # GET should provide a form with title but not sensitive_email\n+        response = self.get(setting=TestPermissionedSiteSetting)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n+        self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n+\n+        # the GET creates a setting object, so remove any created objects prior to testing the POST\n+        TestPermissionedSiteSetting.objects.all().delete()\n+\n+        # POST should allow the title to be set, but not the sensitive_email\n         response = self.post(\n             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n             setting=TestPermissionedSiteSetting,\n@@ -125,12 +170,30 @@ def test_create_restricted_field_without_permission(self):\n         self.assertEqual(settings.sensitive_email, \"\")\n \n     def test_create_restricted_field(self):\n+        # User has edit permission over the setting model, including the sensitive_email field\n         self.user.is_superuser = False\n         self.user.save()\n         self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedsitesetting\",\n+            ),\n+            Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\"),\n         )\n         self.assertFalse(TestPermissionedSiteSetting.objects.exists())\n+        # GET should provide a form with title and sensitive_email\n+        response = self.get(setting=TestPermissionedSiteSetting)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n+        self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n+\n+        # the GET creates a setting object, so remove any created objects prior to testing the POST\n+        TestPermissionedSiteSetting.objects.all().delete()\n+\n+        # POST should allow both title and sensitive_email to be set\n         response = self.post(\n             post_data={\"sensitive_email\": \"test@example.com\", \"title\": \"test\"},\n             setting=TestPermissionedSiteSetting,\n@@ -153,11 +216,6 @@ def setUp(self):\n         self.test_setting.save()\n \n         self.user = self.login()\n-        self.user.user_permissions.add(\n-            Permission.objects.get(\n-                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n-            )\n-        )\n \n     def test_get_edit(self):\n         response = self.get()\n@@ -211,50 +269,117 @@ def test_get_redirect_to_relevant_instance_invalid(self):\n         self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n \n     def test_edit_restricted_field(self):\n+        # User has edit permission over the setting model, including the sensitive_email field\n         test_setting = TestPermissionedSiteSetting()\n+        test_setting.title = \"Old title\"\n         test_setting.sensitive_email = \"test@example.com\"\n         test_setting.site = self.default_site\n         test_setting.save()\n         self.user.is_superuser = False\n         self.user.save()\n-\n         self.user.user_permissions.add(\n-            Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\")\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedsitesetting\",\n+            ),\n+            Permission.objects.get(codename=\"can_edit_sensitive_email_site_setting\"),\n         )\n \n+        # GET should provide a form with title and sensitive_email\n         response = self.get(setting=TestPermissionedSiteSetting)\n         self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n         self.assertIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n \n+        # POST should allow both title and sensitive_email to be set\n         response = self.post(\n             setting=TestPermissionedSiteSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n+            post_data={\n+                \"sensitive_email\": \"test-updated@example.com\",\n+                \"title\": \"New title\",\n+            },\n         )\n         self.assertEqual(response.status_code, 302)\n \n         test_setting.refresh_from_db()\n         self.assertEqual(test_setting.sensitive_email, \"test-updated@example.com\")\n+        self.assertEqual(test_setting.title, \"New title\")\n \n-    def test_edit_restricted_field_without_permission(self):\n+    def test_edit_restricted_field_without_field_permission(self):\n+        # User has edit permission over the setting model, but not the sensitive_email field\n         test_setting = TestPermissionedSiteSetting()\n+        test_setting.title = \"Old title\"\n         test_setting.sensitive_email = \"test@example.com\"\n         test_setting.site = self.default_site\n         test_setting.save()\n         self.user.is_superuser = False\n         self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+            Permission.objects.get(\n+                content_type__app_label=\"tests\",\n+                codename=\"change_testpermissionedsitesetting\",\n+            ),\n+        )\n \n+        # GET should provide a form with title but not sensitive_email\n         response = self.get(setting=TestPermissionedSiteSetting)\n         self.assertEqual(response.status_code, 200)\n+        self.assertIn(\"title\", list(response.context[\"form\"].fields))\n         self.assertNotIn(\"sensitive_email\", list(response.context[\"form\"].fields))\n \n+        # POST should allow the title to be set, but not the sensitive_email\n         response = self.post(\n             setting=TestPermissionedSiteSetting,\n-            post_data={\"sensitive_email\": \"test-updated@example.com\", \"title\": \"title\"},\n+            post_data={\n+                \"sensitive_email\": \"test-updated@example.com\",\n+                \"title\": \"New title\",\n+            },\n         )\n         self.assertEqual(response.status_code, 302)\n \n         test_setting.refresh_from_db()\n         self.assertEqual(test_setting.sensitive_email, \"test@example.com\")\n+        self.assertEqual(test_setting.title, \"New title\")\n+\n+    def test_edit_restricted_field_without_any_permission(self):\n+        # User has no permissions over the setting model, only access to the admin\n+        test_setting = TestPermissionedSiteSetting()\n+        test_setting.title = \"Old title\"\n+        test_setting.sensitive_email = \"test@example.com\"\n+        test_setting.site = self.default_site\n+        test_setting.save()\n+        self.user.is_superuser = False\n+        self.user.save()\n+        self.user.user_permissions.add(\n+            Permission.objects.get(\n+                content_type__app_label=\"wagtailadmin\", codename=\"access_admin\"\n+            ),\n+        )\n+\n+        # GET should redirect away with permission denied\n+        response = self.get(setting=TestPermissionedSiteSetting)\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # POST should redirect away with permission denied\n+        response = self.post(\n+            setting=TestPermissionedSiteSetting,\n+            post_data={\n+                \"sensitive_email\": \"test-updated@example.com\",\n+                \"title\": \"New title\",\n+            },\n+        )\n+        self.assertRedirects(response, status_code=302, expected_url=\"/admin/\")\n+\n+        # The retrieved setting should be unchanged\n+        test_setting.refresh_from_db()\n+        self.assertEqual(test_setting.sensitive_email, \"test@example.com\")\n+        self.assertEqual(test_setting.title, \"Old title\")\n \n \n @override_settings("
        },
        {
          "filename": "wagtail/contrib/settings/views.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -14,6 +14,7 @@\n )\n from wagtail.admin.views import generic\n from wagtail.models import Site\n+from wagtail.permission_policies import ModelPermissionPolicy\n \n from .forms import SiteSwitchForm\n from .models import BaseGenericSetting, BaseSiteSetting\n@@ -81,11 +82,13 @@ def redirect_to_relevant_instance(request, app_name, model_name):\n class EditView(generic.EditView):\n     template_name = \"wagtailsettings/edit.html\"\n     error_message = gettext_lazy(\"The setting could not be saved due to errors.\")\n+    permission_required = \"change\"\n \n     def setup(self, request, app_name, model_name, *args, **kwargs):\n         self.app_name = app_name\n         self.model_name = model_name\n         self.model = get_model_from_url_params(app_name, model_name)\n+        self.permission_policy = ModelPermissionPolicy(self.model)\n         self.pk = kwargs.get(self.pk_url_kwarg)\n         super().setup(request, app_name, model_name, *args, **kwargs)\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "782aa0e16b48d33a3c964c7fee9f5724478e2015",
            "date": "2025-01-14T10:00:09Z",
            "author_login": "TARishabh"
          },
          {
            "sha": "cb11ec3e01899825e7d00e6791acdb95ccd7ceed",
            "date": "2025-01-14T08:44:47Z",
            "author_login": "ayaan-qadri"
          },
          {
            "sha": "75e07498f42c707089ac9e2371a29986f9e25abd",
            "date": "2024-12-18T12:52:13Z",
            "author_login": "tomusher"
          },
          {
            "sha": "d20c1b66bf0db9df13eea8b2d2be2fc2a2b98828",
            "date": "2025-01-13T13:05:06Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "da12f4a284f21a485f3191740563f507198a6e9a",
            "date": "2025-01-06T13:17:56Z",
            "author_login": "laymonage"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:H/A:N",
    "cwe_id": "CWE-280",
    "description": "Wagtail is an open source content management system built on Django. Due to an improperly applied permission check in the `wagtail.contrib.settings` module, a user with access to the Wagtail admin and knowledge of the URL of the edit view for a settings model can access and update that setting, even when they have not been granted permission over the model. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin. Patched versions have been released as Wagtail 6.0.5 and 6.1.2. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability in `ModelViewSet` by registering the model as a snippet instead. No workaround is available for `wagtail.contrib.settings`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-30T19:15:16.747",
    "last_modified": "2024-11-21T09:19:58.907",
    "fix_date": "2024-05-22T19:34:30Z"
  },
  "references": [
    {
      "url": "https://github.com/wagtail/wagtail/commit/284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-xxfm-vmcf-g33f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/284f75a6f91f7ab18cc304d7d34f33b559ae37b1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-xxfm-vmcf-g33f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.328991",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wagtail",
    "owner": "wagtail",
    "created_at": "2014-02-03T12:41:59Z",
    "updated_at": "2025-01-14T14:01:28Z",
    "pushed_at": "2025-01-14T10:01:52Z",
    "size": 227820,
    "stars": 18619,
    "forks": 3952,
    "open_issues": 983,
    "watchers": 18619,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 8266424,
      "JavaScript": 1140099,
      "TypeScript": 556344,
      "HTML": 524532,
      "SCSS": 229702,
      "Shell": 6841,
      "CSS": 2719,
      "Dockerfile": 2038,
      "Makefile": 1389,
      "MDX": 271
    },
    "commit_activity": {
      "total_commits_last_year": 1489,
      "avg_commits_per_week": 28.634615384615383,
      "days_active_last_year": 270
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:05:24.057199"
  }
}