{
  "cve_id": "CVE-2024-35231",
  "github_data": {
    "repository": "rack/rack-contrib",
    "fix_commit": "0eec2a9836329051c6742549e65a94a4c24fe6f7",
    "related_commits": [
      "0eec2a9836329051c6742549e65a94a4c24fe6f7",
      "0eec2a9836329051c6742549e65a94a4c24fe6f7"
    ],
    "patch_url": "https://github.com/rack/rack-contrib/commit/0eec2a9836329051c6742549e65a94a4c24fe6f7.patch",
    "fix_commit_details": {
      "sha": "0eec2a9836329051c6742549e65a94a4c24fe6f7",
      "commit_date": "2024-05-24T00:48:48Z",
      "author": {
        "login": "ioquatix",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Specify a maximum number of runs to limit the request params -> DoS. (#191)",
        "length": 75,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 32,
        "additions": 30,
        "deletions": 2
      },
      "files": [
        {
          "filename": "lib/rack/contrib/profiler.rb",
          "status": "modified",
          "additions": 23,
          "deletions": 2,
          "patch": "@@ -35,8 +35,11 @@ def initialize(app, options = {})\n       @profile = nil\n       @printer = parse_printer(options[:printer] || DEFAULT_PRINTER)\n       @times = (options[:times] || 1).to_i\n+      @maximum_runs = options.fetch(:maximum_runs, 10)\n     end\n \n+    attr :maximum_runs\n+\n     def call(env)\n       if mode = profiling?(env)\n         profile(env, mode)\n@@ -61,14 +64,32 @@ def profiling?(env)\n         end\n       end\n \n+      # How many times to run the request within the profiler.\n+      # If the profiler_runs query parameter is set, use that.\n+      # Otherwise, use the :times option passed to `#initialize`.\n+      # If the profiler_runs query parameter is greater than the\n+      # :maximum option passed to `#initialize`, use the :maximum\n+      # option.\n+      def runs(request)\n+        if profiler_runs = request.params['profiler_runs']\n+          profiler_runs = profiler_runs.to_i\n+          if profiler_runs > @maximum_runs\n+            return @maximum_runs\n+          else\n+            return profiler_runs\n+          end\n+        else\n+          return @times\n+        end\n+      end\n+\n       def profile(env, mode)\n         @profile = ::RubyProf::Profile.new(measure_mode: ::RubyProf.const_get(mode.upcase))\n \n         GC.enable_stats if GC.respond_to?(:enable_stats)\n         request = Rack::Request.new(env.clone)\n-        runs = (request.params['profiler_runs'] || @times).to_i\n         result = @profile.profile do\n-          runs.times { @app.call(env) }\n+          runs(request).times { @app.call(env) }\n         end\n         GC.disable_stats if GC.respond_to?(:disable_stats)\n "
        },
        {
          "filename": "test/spec_rack_profiler.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -27,6 +27,13 @@ def profiler(app, options = {})\n       _(body.to_enum.to_a.join).must_match(/\\[#{runs} calls, #{runs} total\\]/)\n     end\n \n+    specify 'called more than the default maximum times via query params' do\n+      runs = 20\n+      req = Rack::MockRequest.env_for(\"/\", :params => \"profile=process_time&profiler_runs=#{runs}\")\n+      body = profiler(app).call(req)[2]\n+      _(body.to_enum.to_a.join).must_match(/\\[10 calls, 10 total\\]/)\n+    end\n+\n     specify 'CallStackPrinter has content-type test/html' do\n       headers = profiler(app, :printer => :call_stack).call(request)[1]\n       _(headers).must_equal \"content-type\"=>\"text/html\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "92353864d5f94bbf2e8cb81c64622aed35763540",
            "date": "2024-11-15T16:56:46Z",
            "author_login": "nampas"
          },
          {
            "sha": "96de0b1e6602766606d382ecf8bd8931806afb48",
            "date": "2024-10-30T21:11:17Z",
            "author_login": "nampas"
          },
          {
            "sha": "d5265bc4f849f4bf55b230d3a0929e513acd5fac",
            "date": "2024-05-24T00:51:24Z",
            "author_login": "ioquatix"
          },
          {
            "sha": "0eec2a9836329051c6742549e65a94a4c24fe6f7",
            "date": "2024-05-24T00:48:48Z",
            "author_login": "ioquatix"
          },
          {
            "sha": "ddd96e9343417bb810bf96620cae609b920c8c3d",
            "date": "2024-05-10T08:36:07Z",
            "author_login": "rodrigoassis"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "rack-contrib provides contributed rack middleware and utilities for Rack, a Ruby web server interface. Versions of rack-contrib prior to 2.5.0 are vulnerable to denial of service due to the fact that the user controlled data `profiler_runs` was not constrained to any limitation. This would lead to allocating resources on the server side with no limitation and a potential denial of service by remotely user-controlled data. Version 2.5.0 contains a patch for the issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-27T17:15:09.760",
    "last_modified": "2024-11-21T09:19:59.130",
    "fix_date": "2024-05-24T00:48:48Z"
  },
  "references": [
    {
      "url": "https://github.com/rack/rack-contrib/commit/0eec2a9836329051c6742549e65a94a4c24fe6f7",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/rack/rack-contrib/security/advisories/GHSA-8c8q-2xw3-j869",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/rack/rack-contrib/commit/0eec2a9836329051c6742549e65a94a4c24fe6f7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/rack/rack-contrib/security/advisories/GHSA-8c8q-2xw3-j869",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.295273",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rack-contrib",
    "owner": "rack",
    "created_at": "2008-12-24T00:03:51Z",
    "updated_at": "2025-01-09T00:03:36Z",
    "pushed_at": "2024-11-15T20:30:55Z",
    "size": 447,
    "stars": 1259,
    "forks": 222,
    "open_issues": 1,
    "watchers": 1259,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 153659,
      "HTML": 93
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T20:11:28.127008"
  }
}