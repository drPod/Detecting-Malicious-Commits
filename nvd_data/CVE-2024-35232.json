{
  "cve_id": "CVE-2024-35232",
  "github_data": {
    "repository": "huandu/facebook",
    "fix_commit": "8b34431b91b32903c8821b1d7621bf81a029d8e4",
    "related_commits": [
      "8b34431b91b32903c8821b1d7621bf81a029d8e4",
      "8b34431b91b32903c8821b1d7621bf81a029d8e4"
    ],
    "patch_url": "https://github.com/huandu/facebook/commit/8b34431b91b32903c8821b1d7621bf81a029d8e4.patch",
    "fix_commit_details": {
      "sha": "8b34431b91b32903c8821b1d7621bf81a029d8e4",
      "commit_date": "2024-05-24T14:03:35Z",
      "author": {
        "login": "huandu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-3f65-m234-9mxr",
        "length": 84,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 44,
        "additions": 43,
        "deletions": 1
      },
      "files": [
        {
          "filename": "session.go",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -562,7 +562,22 @@ func (session *Session) sendRequest(request *http.Request) (response *http.Respo\n \t}\n \n \tif err != nil {\n-\t\terr = fmt.Errorf(\"facebook: cannot reach facebook server; %w\", err)\n+\t\toriginalErr := err\n+\t\terr = fmt.Errorf(\"facebook: cannot reach facebook server; %w\", originalErr)\n+\t\tnetUrlErr, ok := originalErr.(*url.Error)\n+\t\t// *url.Error can contain access_token in the URL, so we need to exclude it.\n+\t\tif !ok || netUrlErr.URL == \"\" {\n+\t\t\treturn\n+\t\t}\n+\t\tq := request.URL.Query()\n+\t\tif !q.Has(\"access_token\") {\n+\t\t\treturn\n+\t\t}\n+\t\tq.Del(\"access_token\")\n+\t\turl := *request.URL\n+\t\turl.RawQuery = q.Encode()\n+\t\tnetUrlErr.URL = url.String()\n+\t\terr = fmt.Errorf(\"facebook: cannot reach facebook server; %w\", netUrlErr)\n \t\treturn\n \t}\n "
        },
        {
          "filename": "session_test.go",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -11,8 +11,10 @@ import (\n \t\"bytes\"\n \t\"context\"\n \t\"encoding/base64\"\n+\t\"errors\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n+\t\"strings\"\n \t\"testing\"\n )\n \n@@ -400,3 +402,28 @@ func TestSessionGetWithQueryString(t *testing.T) {\n \n \tt.Logf(\"my extended info is: %v\", result)\n }\n+\n+func TestSessionGetFailingWithoutExposingAccessToken(t *testing.T) {\n+\tvar accessToken = \"CAACZA38ZAD8CoBAe2bDC6EdThnni3b56scyshKINjZARoC9ZAuEUTgYUkYnKdimqfA2ZAXcd2wLd7Rr8jLmMXTY9vqAhQGqObZBIUz1WwbqVoCsB3AAvLtwoWNhsxM76mK0eiJSLXHZCdPVpyhmtojvzXA7f69Bm6b5WZBBXia8iOpPZAUHTGp1UQLFMt47c7RqJTrYIl3VfAR0deN82GMFL2\"\n+\tsession := &Session{}\n+\tsession.SetAccessToken(accessToken)\n+\tsession.HttpClient = &http.Client{\n+\t\tTransport: alwaysFailRoundTripper{},\n+\t}\n+\n+\t_, err := session.Get(\"/me\", nil)\n+\tif err == nil {\n+\t\tt.Fatalf(\"request should fail\")\n+\t}\n+\tif strings.Contains(err.Error(), accessToken) {\n+\t\tt.Errorf(\"error message should not contain access token\")\n+\t}\n+}\n+\n+type alwaysFailRoundTripper struct{}\n+\n+var _ http.RoundTripper = alwaysFailRoundTripper{}\n+\n+func (a alwaysFailRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {\n+\treturn nil, errors.New(\"request failed since alwaysFailRoundTripper is used\")\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7c20bb74fb3aad9c5eb2ca0d0bd7e4678650a694",
            "date": "2025-01-10T10:23:53Z",
            "author_login": "huandu"
          },
          {
            "sha": "12fa9ae74e2aaa86e6bda9c32e7f132ac8fefb4f",
            "date": "2025-01-10T09:48:23Z",
            "author_login": "minjatJ"
          },
          {
            "sha": "6f358204a7a98111eefbcc720df83e3892741582",
            "date": "2024-10-07T11:58:35Z",
            "author_login": "huandu"
          },
          {
            "sha": "49ccd5150e8dc3a0936f2f8abb66fd668eb8383c",
            "date": "2024-10-02T14:41:57Z",
            "author_login": "pnmcosta"
          },
          {
            "sha": "38d95ed0de31a8fde36ee0def4dac98bc4b79144",
            "date": "2024-05-24T14:09:45Z",
            "author_login": "huandu"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-209",
    "description": "github.com/huandu/facebook is a Go package that fully supports the Facebook Graph API with file upload, batch request and marketing API. access_token can be exposed in error message on fail in HTTP request. This issue has been patched in version 2.7.2.\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-05-24T21:15:59.450",
    "last_modified": "2024-11-21T09:19:59.250",
    "fix_date": "2024-05-24T14:03:35Z"
  },
  "references": [
    {
      "url": "https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/http/client.go;l=629-633",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/url/url.go;l=30",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/huandu/facebook/blob/1591be276561bbdb019c0279f1d33cb18a650e1b/session.go#L558-L567",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/huandu/facebook/commit/8b34431b91b32903c8821b1d7621bf81a029d8e4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/huandu/facebook/security/advisories/GHSA-3f65-m234-9mxr",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/http/client.go;l=629-633",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/url/url.go;l=30",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/huandu/facebook/blob/1591be276561bbdb019c0279f1d33cb18a650e1b/session.go#L558-L567",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/huandu/facebook/commit/8b34431b91b32903c8821b1d7621bf81a029d8e4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/huandu/facebook/security/advisories/GHSA-3f65-m234-9mxr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.287158",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "facebook",
    "owner": "huandu",
    "created_at": "2012-07-28T19:05:56Z",
    "updated_at": "2025-01-13T20:41:49Z",
    "pushed_at": "2025-01-10T10:24:50Z",
    "size": 407,
    "stars": 1344,
    "forks": 521,
    "open_issues": 1,
    "watchers": 1344,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 138978
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:53:36.846374"
  }
}