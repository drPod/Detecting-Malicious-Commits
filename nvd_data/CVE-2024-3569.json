{
  "cve_id": "CVE-2024-3569",
  "github_data": {
    "repository": "mintplex-labs/anything-llm",
    "fix_commit": "efe9dfa5e3550d12abd34d06ab7f8fbcf2206cfa",
    "related_commits": [
      "efe9dfa5e3550d12abd34d06ab7f8fbcf2206cfa",
      "efe9dfa5e3550d12abd34d06ab7f8fbcf2206cfa"
    ],
    "patch_url": "https://github.com/mintplex-labs/anything-llm/commit/efe9dfa5e3550d12abd34d06ab7f8fbcf2206cfa.patch",
    "fix_commit_details": {
      "sha": "efe9dfa5e3550d12abd34d06ab7f8fbcf2206cfa",
      "commit_date": "2024-03-26T23:47:25Z",
      "author": {
        "login": "timothycarambat",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "handle expired token being null and prevent constant rerender (#956)",
        "length": 153,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 30,
        "additions": 21,
        "deletions": 9
      },
      "files": [
        {
          "filename": "frontend/src/components/Modals/Password/index.jsx",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -34,7 +34,7 @@ export default function PasswordModal({ mode = \"single\" }) {\n   );\n }\n \n-export function usePasswordModal() {\n+export function usePasswordModal(notry = false) {\n   const [auth, setAuth] = useState({\n     loading: true,\n     requiresAuth: false,\n@@ -47,7 +47,7 @@ export function usePasswordModal() {\n \n       // If the last validity check is still valid\n       // we can skip the loading.\n-      if (!System.needsAuthCheck()) {\n+      if (!System.needsAuthCheck() && notry === false) {\n         setAuth({\n           loading: false,\n           requiresAuth: false,\n@@ -60,7 +60,7 @@ export function usePasswordModal() {\n       if (settings?.MultiUserMode) {\n         const currentToken = window.localStorage.getItem(AUTH_TOKEN);\n         if (!!currentToken) {\n-          const valid = await System.checkAuth(currentToken);\n+          const valid = notry ? false : await System.checkAuth(currentToken);\n           if (!valid) {\n             setAuth({\n               loading: false,\n@@ -102,14 +102,16 @@ export function usePasswordModal() {\n \n         const currentToken = window.localStorage.getItem(AUTH_TOKEN);\n         if (!!currentToken) {\n-          const valid = await System.checkAuth(currentToken);\n+          const valid = notry ? false : await System.checkAuth(currentToken);\n           if (!valid) {\n             setAuth({\n               loading: false,\n               requiresAuth: true,\n               mode: \"single\",\n             });\n             window.localStorage.removeItem(AUTH_TOKEN);\n+            window.localStorage.removeItem(AUTH_USER);\n+            window.localStorage.removeItem(AUTH_TIMESTAMP);\n             return;\n           } else {\n             setAuth({"
        },
        {
          "filename": "frontend/src/components/PrivateRoute/index.jsx",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -136,6 +136,6 @@ export default function PrivateRoute({ Component }) {\n       <Component />\n     </UserMenu>\n   ) : (\n-    <Navigate to={paths.login()} />\n+    <Navigate to={paths.login(true)} />\n   );\n }"
        },
        {
          "filename": "frontend/src/pages/Login/index.jsx",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -3,9 +3,11 @@ import PasswordModal, { usePasswordModal } from \"@/components/Modals/Password\";\n import { FullScreenLoader } from \"@/components/Preloader\";\n import { Navigate } from \"react-router-dom\";\n import paths from \"@/utils/paths\";\n+import useQuery from \"@/hooks/useQuery\";\n \n export default function Login() {\n-  const { loading, requiresAuth, mode } = usePasswordModal();\n+  const query = useQuery();\n+  const { loading, requiresAuth, mode } = usePasswordModal(!!query.get(\"nt\"));\n   if (loading) return <FullScreenLoader />;\n   if (requiresAuth === false) return <Navigate to={paths.home()} />;\n "
        },
        {
          "filename": "frontend/src/utils/paths.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -4,8 +4,8 @@ export default {\n   home: () => {\n     return \"/\";\n   },\n-  login: () => {\n-    return \"/login\";\n+  login: (noTry = false) => {\n+    return `/login${noTry ? \"?nt=1\" : \"\"}`;\n   },\n   onboarding: {\n     home: () => {"
        },
        {
          "filename": "server/utils/middleware/validatedRequest.js",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -38,9 +38,17 @@ async function validatedRequest(request, response, next) {\n \n   const bcrypt = require(\"bcrypt\");\n   const { p } = decodeJWT(token);\n+\n+  if (p === null) {\n+    response.status(401).json({\n+      error: \"Token expired or failed validation.\",\n+    });\n+    return;\n+  }\n+\n   if (!bcrypt.compareSync(p, bcrypt.hashSync(process.env.AUTH_TOKEN, 10))) {\n     response.status(401).json({\n-      error: \"Invalid auth token found.\",\n+      error: \"Invalid auth credentials.\",\n     });\n     return;\n   }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4d5d8d4dec0e62662c8ec46537038353f45e0e66",
            "date": "2025-01-14T16:20:57Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "21af81085aeb049750942ac5f3b84775cb461693",
            "date": "2025-01-13T21:12:03Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "665e8e5bfe431ad93bed6736d0b450592617d042",
            "date": "2025-01-09T23:39:56Z",
            "author_login": "shatfield4"
          },
          {
            "sha": "865f7eea296e544b2eb1ab8c1f322208eaf5eb05",
            "date": "2025-01-09T21:32:54Z",
            "author_login": "timothycarambat"
          },
          {
            "sha": "be886f7d61296a30d5b8a095ca8329f58a0c5a0a",
            "date": "2025-01-09T01:21:30Z",
            "author_login": "root-reindeer-flotilla"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-400",
    "description": "A Denial of Service (DoS) vulnerability exists in the mintplex-labs/anything-llm repository when the application is running in 'just me' mode with a password. An attacker can exploit this vulnerability by making a request to the endpoint using the [validatedRequest] middleware with a specially crafted 'Authorization:' header. This vulnerability leads to uncontrolled resource consumption, causing a DoS condition.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-04-10T17:15:58.350",
    "last_modified": "2024-11-21T09:29:53.887",
    "fix_date": "2024-03-26T23:47:25Z"
  },
  "references": [
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/efe9dfa5e3550d12abd34d06ab7f8fbcf2206cfa",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/619e13bd-b723-4727-9ccb-5099d698432e",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/mintplex-labs/anything-llm/commit/efe9dfa5e3550d12abd34d06ab7f8fbcf2206cfa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/619e13bd-b723-4727-9ccb-5099d698432e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.467130",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "anything-llm",
    "owner": "mintplex-labs",
    "created_at": "2023-06-04T02:29:14Z",
    "updated_at": "2025-01-14T13:49:57Z",
    "pushed_at": "2025-01-13T21:12:06Z",
    "size": 42916,
    "stars": 30237,
    "forks": 3030,
    "open_issues": 206,
    "watchers": 30237,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 3056909,
      "CSS": 73785,
      "Dockerfile": 9030,
      "HTML": 3904,
      "Shell": 1382,
      "HCL": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:33.088245"
  }
}