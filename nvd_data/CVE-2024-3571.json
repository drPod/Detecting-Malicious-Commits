{
  "cve_id": "CVE-2024-3571",
  "github_data": {
    "repository": "langchain-ai/langchain",
    "fix_commit": "aad3d8bd47d7f5598156ff2bdcc8f736f24a7412",
    "related_commits": [
      "aad3d8bd47d7f5598156ff2bdcc8f736f24a7412",
      "aad3d8bd47d7f5598156ff2bdcc8f736f24a7412"
    ],
    "patch_url": "https://github.com/langchain-ai/langchain/commit/aad3d8bd47d7f5598156ff2bdcc8f736f24a7412.patch",
    "fix_commit_details": {
      "sha": "aad3d8bd47d7f5598156ff2bdcc8f736f24a7412",
      "commit_date": "2023-12-22T16:20:17Z",
      "author": {
        "login": "eyurtsev",
        "type": "User",
        "stats": {
          "total_commits": 822,
          "average_weekly_commits": 7.0256410256410255,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 81
        }
      },
      "commit_message": {
        "title": "langchain(patch): Restrict paths in LocalFileStore cache (#15065)",
        "length": 206,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 36,
        "additions": 34,
        "deletions": 2
      },
      "files": [
        {
          "filename": "libs/langchain/langchain/storage/file_system.py",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -1,3 +1,4 @@\n+import os\n import re\n from pathlib import Path\n from typing import Iterator, List, Optional, Sequence, Tuple, Union\n@@ -42,7 +43,7 @@ def __init__(self, root_path: Union[str, Path]) -> None:\n             root_path (Union[str, Path]): The root path of the file store. All keys are\n                 interpreted as paths relative to this root.\n         \"\"\"\n-        self.root_path = Path(root_path)\n+        self.root_path = Path(root_path).absolute()\n \n     def _get_full_path(self, key: str) -> Path:\n         \"\"\"Get the full path for a given key relative to the root path.\n@@ -55,7 +56,15 @@ def _get_full_path(self, key: str) -> Path:\n         \"\"\"\n         if not re.match(r\"^[a-zA-Z0-9_.\\-/]+$\", key):\n             raise InvalidKeyException(f\"Invalid characters in key: {key}\")\n-        return self.root_path / key\n+        full_path = os.path.abspath(self.root_path / key)\n+        common_path = os.path.commonpath([str(self.root_path), full_path])\n+        if common_path != str(self.root_path):\n+            raise InvalidKeyException(\n+                f\"Invalid key: {key}. Key should be relative to the full path.\"\n+                f\"{self.root_path} vs. {common_path} and full path of {full_path}\"\n+            )\n+\n+        return Path(full_path)\n \n     def mget(self, keys: Sequence[str]) -> List[Optional[bytes]]:\n         \"\"\"Get the values associated with the given keys."
        },
        {
          "filename": "libs/langchain/tests/unit_tests/storage/test_filesystem.py",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -77,3 +77,26 @@ def test_yield_keys(file_store: LocalFileStore) -> None:\n     # Assert that the yielded keys match the expected keys\n     expected_keys = [\"key1\", os.path.join(\"subdir\", \"key2\")]\n     assert keys == expected_keys\n+\n+\n+def test_catches_forbidden_keys(file_store: LocalFileStore) -> None:\n+    \"\"\"Make sure we raise exception on keys that are not allowed; e.g., absolute path\"\"\"\n+    with pytest.raises(InvalidKeyException):\n+        file_store.mset([(\"/etc\", b\"value1\")])\n+    with pytest.raises(InvalidKeyException):\n+        list(file_store.yield_keys(\"/etc/passwd\"))\n+    with pytest.raises(InvalidKeyException):\n+        file_store.mget([\"/etc/passwd\"])\n+\n+    # check relative paths\n+    with pytest.raises(InvalidKeyException):\n+        list(file_store.yield_keys(\"..\"))\n+\n+    with pytest.raises(InvalidKeyException):\n+        file_store.mget([\"../etc/passwd\"])\n+\n+    with pytest.raises(InvalidKeyException):\n+        file_store.mset([(\"../etc\", b\"value1\")])\n+\n+    with pytest.raises(InvalidKeyException):\n+        list(file_store.yield_keys(\"../etc/passwd\"))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d9b856abadef0e7e7338a82f0b2e1239ce3fbd61",
            "date": "2025-01-14T15:23:34Z",
            "author_login": "michaelnchin"
          },
          {
            "sha": "c55af44711ba9180ce8a51a55a385f31023341b5",
            "date": "2025-01-13T23:32:40Z",
            "author_login": "efriis"
          },
          {
            "sha": "cdf3a17e55bd594341c390051dc20c5e5a74b966",
            "date": "2025-01-13T21:25:00Z",
            "author_login": "efriis"
          },
          {
            "sha": "1bf6576709b8c4a4014d5f62cf955c19df1fdf02",
            "date": "2025-01-13T18:28:18Z",
            "author_login": "ccurme"
          },
          {
            "sha": "e156b372fb6da26deceffaff2f42aab1036da3b6",
            "date": "2025-01-13T16:00:02Z",
            "author_login": "varjas"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-22",
    "description": "langchain-ai/langchain is vulnerable to path traversal due to improper limitation of a pathname to a restricted directory ('Path Traversal') in its LocalFileStore functionality. An attacker can leverage this vulnerability to read or write files anywhere on the filesystem, potentially leading to information disclosure or remote code execution. The issue lies in the handling of file paths in the mset and mget methods, where user-supplied input is not adequately sanitized, allowing directory traversal sequences to reach unintended directories.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-04-16T00:15:12.203",
    "last_modified": "2024-11-21T09:29:54.123",
    "fix_date": "2023-12-22T16:20:17Z"
  },
  "references": [
    {
      "url": "https://github.com/langchain-ai/langchain/commit/aad3d8bd47d7f5598156ff2bdcc8f736f24a7412",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/2df3acdc-ee4f-4257-bbf8-a7de3870a9d8",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/langchain-ai/langchain/commit/aad3d8bd47d7f5598156ff2bdcc8f736f24a7412",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/2df3acdc-ee4f-4257-bbf8-a7de3870a9d8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:04.492787",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "langchain",
    "owner": "langchain-ai",
    "created_at": "2022-10-17T02:58:36Z",
    "updated_at": "2025-01-14T13:08:38Z",
    "pushed_at": "2025-01-13T23:32:41Z",
    "size": 376391,
    "stars": 98220,
    "forks": 15956,
    "open_issues": 435,
    "watchers": 98220,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Jupyter Notebook": 31945259,
      "Python": 19475935,
      "MDX": 56545,
      "Makefile": 55385,
      "Shell": 19562,
      "XSLT": 19446,
      "HTML": 9026,
      "TeX": 2242,
      "Dockerfile": 1311,
      "JavaScript": 471
    },
    "commit_activity": {
      "total_commits_last_year": 7057,
      "avg_commits_per_week": 135.71153846153845,
      "days_active_last_year": 327
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:11:47.805811"
  }
}