{
  "cve_id": "CVE-2024-36107",
  "github_data": {
    "repository": "minio/minio",
    "fix_commit": "e0fe7cc391724fc5baa85b45508f425020fe4272",
    "related_commits": [
      "e0fe7cc391724fc5baa85b45508f425020fe4272",
      "e0fe7cc391724fc5baa85b45508f425020fe4272"
    ],
    "patch_url": "https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272.patch",
    "fix_commit_details": {
      "sha": "e0fe7cc391724fc5baa85b45508f425020fe4272",
      "commit_date": "2024-05-27T19:17:46Z",
      "author": {
        "login": "harshavardhana",
        "type": "User",
        "stats": {
          "total_commits": 4369,
          "average_weekly_commits": 8.181647940074907,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 489
        }
      },
      "commit_message": {
        "title": "fix: information disclosure bug in preconditions GET (#19810)",
        "length": 515,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 183,
        "additions": 91,
        "deletions": 92
      },
      "files": [
        {
          "filename": ".github/workflows/multipart/migrate.sh",
          "status": "modified",
          "additions": 7,
          "deletions": 9,
          "patch": "@@ -24,8 +24,6 @@ if [ ! -f ./mc ]; then\n \t\tchmod +x mc\n fi\n \n-go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n export RELEASE=RELEASE.2023-08-29T23-07-35Z\n \n docker-compose -f docker-compose-site1.yaml up -d\n@@ -45,10 +43,10 @@ sleep 30s\n \n sleep 5\n \n-s3-check-md5 -h\n+./s3-check-md5 -h\n \n-failed_count_site1=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n-failed_count_site2=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n+failed_count_site1=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n+failed_count_site2=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n \n if [ $failed_count_site1 -ne 0 ]; then\n \techo \"failed with multipart on site1 uploads\"\n@@ -64,8 +62,8 @@ fi\n \n sleep 5\n \n-failed_count_site1=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n-failed_count_site2=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n+failed_count_site1=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n+failed_count_site2=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n \n ## we do not need to fail here, since we are going to test\n ## upgrading to master, healing and being able to recover\n@@ -93,8 +91,8 @@ for i in $(seq 1 10); do\n \t./mc admin heal -r --remove --json site2/ 2>&1 >/dev/null\n done\n \n-failed_count_site1=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n-failed_count_site2=$(s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n+failed_count_site1=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site1-nginx:9001 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n+failed_count_site2=$(./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://site2-nginx:9002 -bucket testbucket 2>&1 | grep FAILED | wc -l)\n \n if [ $failed_count_site1 -ne 0 ]; then\n \techo \"failed with multipart on site1 uploads\""
        },
        {
          "filename": ".gitignore",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -43,4 +43,13 @@ docs/debugging/inspect/inspect\n docs/debugging/pprofgoparser/pprofgoparser\n docs/debugging/reorder-disks/reorder-disks\n docs/debugging/populate-hard-links/populate-hardlinks\n-docs/debugging/xattr/xattr\n\\ No newline at end of file\n+docs/debugging/xattr/xattr\n+hash-set\n+healing-bin\n+inspect\n+pprofgoparser\n+reorder-disks\n+s3-check-md5\n+s3-verify\n+xattr\n+xl-meta"
        },
        {
          "filename": "Makefile",
          "status": "modified",
          "additions": 10,
          "deletions": 15,
          "patch": "@@ -45,7 +45,7 @@ lint-fix: getdeps ## runs golangci-lint suite of linters with automatic fixes\n \t@$(GOLANGCI) run --build-tags kqueue --timeout=10m --config ./.golangci.yml --fix\n \n check: test\n-test: verifiers build build-debugging ## builds minio, runs linters, tests\n+test: verifiers build ## builds minio, runs linters, tests\n \t@echo \"Running unit tests\"\n \t@MINIO_API_REQUESTS_MAX=10000 CGO_ENABLED=0 go test -v -tags kqueue ./...\n \n@@ -127,37 +127,32 @@ test-site-replication-minio: install-race ## verify automatic site replication\n \t@echo \"Running tests for automatic site replication of SSE-C objects with compression enabled for site\"\n \t@(env bash $(PWD)/docs/site-replication/run-ssec-object-replication-with-compression.sh)\n \n-verify: ## verify minio various setups\n+verify: install-race ## verify minio various setups\n \t@echo \"Verifying build with race\"\n-\t@GORACE=history_size=7 CGO_ENABLED=1 go build -race -tags kqueue -trimpath --ldflags \"$(LDFLAGS)\" -o $(PWD)/minio 1>/dev/null\n \t@(env bash $(PWD)/buildscripts/verify-build.sh)\n \n-verify-healing: ## verify healing and replacing disks with minio binary\n+verify-healing: install-race ## verify healing and replacing disks with minio binary\n \t@echo \"Verify healing build with race\"\n-\t@GORACE=history_size=7 CGO_ENABLED=1 go build -race -tags kqueue -trimpath --ldflags \"$(LDFLAGS)\" -o $(PWD)/minio 1>/dev/null\n \t@(env bash $(PWD)/buildscripts/verify-healing.sh)\n \t@(env bash $(PWD)/buildscripts/verify-healing-empty-erasure-set.sh)\n \t@(env bash $(PWD)/buildscripts/heal-inconsistent-versions.sh)\n \n-verify-healing-with-root-disks: ## verify healing root disks\n+verify-healing-with-root-disks: install-race ## verify healing root disks\n \t@echo \"Verify healing with root drives\"\n-\t@GORACE=history_size=7 CGO_ENABLED=1 go build -race -tags kqueue -trimpath --ldflags \"$(LDFLAGS)\" -o $(PWD)/minio 1>/dev/null\n \t@(env bash $(PWD)/buildscripts/verify-healing-with-root-disks.sh)\n \n-verify-healing-with-rewrite: ## verify healing to rewrite old xl.meta -> new xl.meta\n+verify-healing-with-rewrite: install-race ## verify healing to rewrite old xl.meta -> new xl.meta\n \t@echo \"Verify healing with rewrite\"\n-\t@GORACE=history_size=7 CGO_ENABLED=1 go build -race -tags kqueue -trimpath --ldflags \"$(LDFLAGS)\" -o $(PWD)/minio 1>/dev/null\n \t@(env bash $(PWD)/buildscripts/rewrite-old-new.sh)\n \n-verify-healing-inconsistent-versions: ## verify resolving inconsistent versions\n+verify-healing-inconsistent-versions: install-race ## verify resolving inconsistent versions\n \t@echo \"Verify resolving inconsistent versions build with race\"\n-\t@GORACE=history_size=7 CGO_ENABLED=1 go build -race -tags kqueue -trimpath --ldflags \"$(LDFLAGS)\" -o $(PWD)/minio 1>/dev/null\n \t@(env bash $(PWD)/buildscripts/resolve-right-versions.sh)\n \n build-debugging:\n \t@(env bash $(PWD)/docs/debugging/build.sh)\n \n-build: checks ## builds minio to $(PWD)\n+build: checks build-debugging ## builds minio to $(PWD)\n \t@echo \"Building minio binary to './minio'\"\n \t@CGO_ENABLED=0 go build -tags kqueue -trimpath --ldflags \"$(LDFLAGS)\" -o $(PWD)/minio 1>/dev/null\n \n@@ -196,15 +191,15 @@ docker: build ## builds minio docker container\n \t@echo \"Building minio docker image '$(TAG)'\"\n \t@docker build -q --no-cache -t $(TAG) . -f Dockerfile\n \n-install-race: checks ## builds minio to $(PWD)\n+install-race: checks build-debugging ## builds minio to $(PWD)\n \t@echo \"Building minio binary with -race to './minio'\"\n \t@GORACE=history_size=7 CGO_ENABLED=1 go build -tags kqueue -race -trimpath --ldflags \"$(LDFLAGS)\" -o $(PWD)/minio 1>/dev/null\n \t@echo \"Installing minio binary with -race to '$(GOPATH)/bin/minio'\"\n-\t@mkdir -p $(GOPATH)/bin && cp -f $(PWD)/minio $(GOPATH)/bin/minio\n+\t@mkdir -p $(GOPATH)/bin && cp -af $(PWD)/minio $(GOPATH)/bin/minio\n \n install: build ## builds minio and installs it to $GOPATH/bin.\n \t@echo \"Installing minio binary to '$(GOPATH)/bin/minio'\"\n-\t@mkdir -p $(GOPATH)/bin && cp -f $(PWD)/minio $(GOPATH)/bin/minio\n+\t@mkdir -p $(GOPATH)/bin && cp -af $(PWD)/minio $(GOPATH)/bin/minio\n \t@echo \"Installation successful. To learn more, try \\\"minio --help\\\".\"\n \n clean: ## cleanup all generated assets"
        },
        {
          "filename": "buildscripts/rewrite-old-new.sh",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -45,7 +45,8 @@ function verify_rewrite() {\n \t\"${MINIO_OLD[@]}\" --address \":$start_port\" \"${WORK_DIR}/xl{1...16}\" >\"${WORK_DIR}/server1.log\" 2>&1 &\n \tpid=$!\n \tdisown $pid\n-\tsleep 10\n+\n+\t\"${WORK_DIR}/mc\" ready minio/\n \n \tif ! ps -p ${pid} 1>&2 >/dev/null; then\n \t\techo \"server1 log:\"\n@@ -77,7 +78,8 @@ function verify_rewrite() {\n \t\"${MINIO[@]}\" --address \":$start_port\" \"${WORK_DIR}/xl{1...16}\" >\"${WORK_DIR}/server1.log\" 2>&1 &\n \tpid=$!\n \tdisown $pid\n-\tsleep 10\n+\n+\t\"${WORK_DIR}/mc\" ready minio/\n \n \tif ! ps -p ${pid} 1>&2 >/dev/null; then\n \t\techo \"server1 log:\"\n@@ -87,14 +89,12 @@ function verify_rewrite() {\n \t\texit 1\n \tfi\n \n-\tgo install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n-\tif ! s3-check-md5 \\\n+\tif ! ./s3-check-md5 \\\n \t\t-debug \\\n \t\t-versions \\\n \t\t-access-key minio \\\n \t\t-secret-key minio123 \\\n-\t\t-endpoint http://127.0.0.1:${start_port}/ 2>&1 | grep INTACT; then\n+\t\t-endpoint \"http://127.0.0.1:${start_port}/\" 2>&1 | grep INTACT; then\n \t\techo \"server1 log:\"\n \t\tcat \"${WORK_DIR}/server1.log\"\n \t\techo \"FAILED\"\n@@ -114,7 +114,7 @@ function verify_rewrite() {\n \tgo run ./buildscripts/heal-manual.go \"127.0.0.1:${start_port}\" \"minio\" \"minio123\"\n \tsleep 1\n \n-\tif ! s3-check-md5 \\\n+\tif ! ./s3-check-md5 \\\n \t\t-debug \\\n \t\t-versions \\\n \t\t-access-key minio \\"
        },
        {
          "filename": "buildscripts/verify-healing-empty-erasure-set.sh",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -19,7 +19,7 @@ function start_minio_3_node() {\n \texport MINIO_ERASURE_SET_DRIVE_COUNT=6\n \texport MINIO_CI_CD=1\n \n-\tstart_port=$2\n+\tstart_port=$1\n \targs=\"\"\n \tfor i in $(seq 1 3); do\n \t\targs=\"$args http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/1/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/2/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/3/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/4/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/5/ http://127.0.0.1:$((start_port + i))${WORK_DIR}/$i/6/\"\n@@ -37,7 +37,8 @@ function start_minio_3_node() {\n \tpid3=$!\n \tdisown $pid3\n \n-\tsleep \"$1\"\n+\texport MC_HOST_myminio=\"http://minio:minio123@127.0.0.1:$((start_port + 1))\"\n+\t/tmp/mc ready myminio\n \n \tif ! ps -p $pid1 1>&2 >/dev/null; then\n \t\techo \"server1 log:\"\n@@ -99,18 +100,23 @@ function __init__() {\n \n \t## version is purposefully set to '3' for minio to migrate configuration file\n \techo '{\"version\": \"3\", \"credential\": {\"accessKey\": \"minio\", \"secretKey\": \"minio123\"}, \"region\": \"us-east-1\"}' >\"$MINIO_CONFIG_DIR/config.json\"\n+\n+\tif [ ! -f /tmp/mc ]; then\n+\t\twget --quiet -O /tmp/mc https://dl.minio.io/client/mc/release/linux-amd64/mc &&\n+\t\t\tchmod +x /tmp/mc\n+\tfi\n }\n \n function perform_test() {\n-\tstart_minio_3_node 120 $2\n+\tstart_minio_3_node $2\n \n \techo \"Testing Distributed Erasure setup healing of drives\"\n \techo \"Remove the contents of the disks belonging to '${1}' erasure set\"\n \n \trm -rf ${WORK_DIR}/${1}/*/\n \n \tset -x\n-\tstart_minio_3_node 120 $2\n+\tstart_minio_3_node $2\n \n \trv=$(check_online)\n \tif [ \"$rv\" == \"1\" ]; then"
        },
        {
          "filename": "buildscripts/verify-healing.sh",
          "status": "modified",
          "additions": 11,
          "deletions": 9,
          "patch": "@@ -15,14 +15,18 @@ MINIO=(\"$PWD/minio\" --config-dir \"$MINIO_CONFIG_DIR\" server)\n GOPATH=/tmp/gopath\n \n function start_minio_3_node() {\n+\tfor i in $(seq 1 3); do\n+\t\trm \"${WORK_DIR}/dist-minio-server$i.log\"\n+\tdone\n+\n \texport MINIO_ROOT_USER=minio\n \texport MINIO_ROOT_PASSWORD=minio123\n \texport MINIO_ERASURE_SET_DRIVE_COUNT=6\n \texport MINIO_CI_CD=1\n \n \tfirst_time=$(find ${WORK_DIR}/ | grep format.json | wc -l)\n \n-\tstart_port=$2\n+\tstart_port=$1\n \targs=\"\"\n \tfor d in $(seq 1 3 5); do\n \t\targs=\"$args http://127.0.0.1:$((start_port + 1))${WORK_DIR}/1/${d}/ http://127.0.0.1:$((start_port + 2))${WORK_DIR}/2/${d}/ http://127.0.0.1:$((start_port + 3))${WORK_DIR}/3/${d}/ \"\n@@ -42,9 +46,11 @@ function start_minio_3_node() {\n \tpid3=$!\n \tdisown $pid3\n \n-\tsleep \"$1\"\n+\texport MC_HOST_myminio=\"http://minio:minio123@127.0.0.1:$((start_port + 1))\"\n+\t/tmp/mc ready myminio\n \n-\t[ ${first_time} -eq 0 ] && upload_objects $start_port\n+\t[ ${first_time} -eq 0 ] && upload_objects\n+\t[ ${first_time} -ne 0 ] && sleep 120\n \n \tif ! ps -p $pid1 1>&2 >/dev/null; then\n \t\techo \"server1 log:\"\n@@ -127,10 +133,6 @@ function __init__() {\n }\n \n function upload_objects() {\n-\tstart_port=$1\n-\n-\t/tmp/mc alias set myminio http://127.0.0.1:$((start_port + 1)) minio minio123 --api=s3v4\n-\t/tmp/mc ready myminio\n \t/tmp/mc mb myminio/testbucket/\n \tfor ((i = 0; i < 20; i++)); do\n \t\techo \"my content\" | /tmp/mc pipe myminio/testbucket/file-$i\n@@ -140,15 +142,15 @@ function upload_objects() {\n function perform_test() {\n \tstart_port=$2\n \n-\tstart_minio_3_node 120 $start_port\n+\tstart_minio_3_node $start_port\n \n \techo \"Testing Distributed Erasure setup healing of drives\"\n \techo \"Remove the contents of the disks belonging to '${1}' node\"\n \n \trm -rf ${WORK_DIR}/${1}/*/\n \n \tset -x\n-\tstart_minio_3_node 120 $start_port\n+\tstart_minio_3_node $start_port\n \n \tcheck_heal ${1}\n \trv=$?"
        },
        {
          "filename": "cmd/object-handlers.go",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -476,6 +476,15 @@ func (api objectAPIHandlers) getObjectHandler(ctx context.Context, objectAPI Obj\n \t\t\treturn true\n \t\t}\n \n+\t\tif oi.UserTags != \"\" {\n+\t\t\tr.Header.Set(xhttp.AmzObjectTagging, oi.UserTags)\n+\t\t}\n+\n+\t\tif s3Error := authorizeRequest(ctx, r, policy.GetObjectAction); s3Error != ErrNone {\n+\t\t\twriteErrorResponse(ctx, w, errorCodes.ToAPIErr(s3Error), r.URL)\n+\t\t\treturn true\n+\t\t}\n+\n \t\treturn checkPreconditions(ctx, w, r, oi, opts)\n \t}\n \n@@ -547,15 +556,6 @@ func (api objectAPIHandlers) getObjectHandler(ctx context.Context, objectAPI Obj\n \n \tobjInfo := gr.ObjInfo\n \n-\tif objInfo.UserTags != \"\" {\n-\t\tr.Header.Set(xhttp.AmzObjectTagging, objInfo.UserTags)\n-\t}\n-\n-\tif s3Error := authorizeRequest(ctx, r, policy.GetObjectAction); s3Error != ErrNone {\n-\t\twriteErrorResponse(ctx, w, errorCodes.ToAPIErr(s3Error), r.URL)\n-\t\treturn\n-\t}\n-\n \tif !proxy.Proxy { // apply lifecycle rules only for local requests\n \t\t// Automatically remove the object/version if an expiry lifecycle rule can be applied\n \t\tif lc, err := globalLifecycleSys.Get(bucket); err == nil {"
        },
        {
          "filename": "docs/bucket/replication/setup_3site_replication.sh",
          "status": "modified",
          "additions": 13,
          "deletions": 15,
          "patch": "@@ -43,8 +43,6 @@ unset MINIO_KMS_KES_KEY_FILE\n unset MINIO_KMS_KES_ENDPOINT\n unset MINIO_KMS_KES_KEY_NAME\n \n-go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n wget -q -O mc https://dl.minio.io/client/mc/release/linux-amd64/mc &&\n \tchmod +x mc\n \n@@ -202,19 +200,19 @@ head -c 221227088 </dev/urandom >200M\n sleep 10\n \n echo \"Verifying ETag for all objects\"\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9001/ -bucket bucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9002/ -bucket bucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9003/ -bucket bucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9004/ -bucket bucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9005/ -bucket bucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9006/ -bucket bucket\n-\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9001/ -bucket olockbucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9002/ -bucket olockbucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9003/ -bucket olockbucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9004/ -bucket olockbucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9005/ -bucket olockbucket\n-s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9006/ -bucket olockbucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9001/ -bucket bucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9002/ -bucket bucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9003/ -bucket bucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9004/ -bucket bucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9005/ -bucket bucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9006/ -bucket bucket\n+\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9001/ -bucket olockbucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9002/ -bucket olockbucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9003/ -bucket olockbucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9004/ -bucket olockbucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9005/ -bucket olockbucket\n+./s3-check-md5 -versions -access-key minio -secret-key minio123 -endpoint http://127.0.0.1:9006/ -bucket olockbucket\n \n # additional tests for encryption object alignment\n go install -v github.com/minio/multipart-debug@latest"
        },
        {
          "filename": "docs/debugging/build.sh",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -2,5 +2,6 @@\n \n export CGO_ENABLED=0\n for dir in docs/debugging/*/; do\n-\tgo build -C ${dir} -v\n+\tbin=$(basename ${dir})\n+\tgo build -C ${dir} -o ${PWD}/${bin}\n done"
        },
        {
          "filename": "docs/debugging/inspect/go.mod",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n module github.com/minio/minio/docs/debugging/inspect\n \n-go 1.19\n+go 1.21\n \n require (\n \tgithub.com/klauspost/compress v1.17.4"
        },
        {
          "filename": "docs/debugging/pprofgoparser/go.mod",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,3 +1,3 @@\n module github.com/minio/minio/docs/debugging/pprofgoparser\n \n-go 1.19\n+go 1.21"
        },
        {
          "filename": "docs/debugging/reorder-disks/go.mod",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,5 +1,5 @@\n module github.com/minio/minio/docs/debugging/reorder-disks\n \n-go 1.19\n+go 1.21\n \n-require github.com/minio/pkg/v2 v2.0.6\n+require github.com/minio/pkg/v3 v3.0.1"
        },
        {
          "filename": "docs/debugging/reorder-disks/go.sum",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,2 +1,2 @@\n-github.com/minio/pkg/v2 v2.0.6 h1:n+PpbSMaJK1FfQkP55l1y0wj5Hi9R5w2DtGhxiGdP9I=\n-github.com/minio/pkg/v2 v2.0.6/go.mod h1:Z9Z/LzhTIxZ6zhPeW658vmLRilRek3zBOqNB9j+lxSY=\n+github.com/minio/pkg/v3 v3.0.1 h1:qts6g9rYjAdeomRdwjnMc1IaQ6KbaJs3dwqBntXziaw=\n+github.com/minio/pkg/v3 v3.0.1/go.mod h1:53gkSUVHcfYoskOs5YAJ3D99nsd2SKru90rdE9whlXU="
        },
        {
          "filename": "docs/debugging/xattr/go.mod",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n module github.com/minio/minio/docs/debugging/xattr\n \n-go 1.19\n+go 1.21\n \n require (\n \tgithub.com/olekukonko/tablewriter v0.0.5"
        },
        {
          "filename": "docs/distributed/decom-compressed-sse-s3.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -148,8 +148,6 @@ if [ $ret -ne 0 ]; then\n \texit 1\n fi\n \n-go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n-s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n+./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n \n kill $pid"
        },
        {
          "filename": "docs/distributed/decom-encrypted-kes.sh",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -238,10 +238,8 @@ if [ $ret -ne 0 ]; then\n \texit 1\n fi\n \n-go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n-s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n-s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned-1\n+./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n+./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned-1\n \n kill $pid\n kill $kes_pid"
        },
        {
          "filename": "docs/distributed/decom-encrypted-sse-s3.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -158,8 +158,6 @@ if [ $ret -ne 0 ]; then\n \texit 1\n fi\n \n-go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n-s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n+./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n \n kill $pid"
        },
        {
          "filename": "docs/distributed/decom-encrypted.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -144,8 +144,6 @@ if [ \"${expected_checksum}\" != \"${got_checksum}\" ]; then\n \texit 1\n fi\n \n-go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n-s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n+./s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n \n kill $pid"
        },
        {
          "filename": "docs/distributed/decom.sh",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -212,8 +212,6 @@ if [ \"${expected_checksum}\" != \"${got_checksum}\" ]; then\n \texit 1\n fi\n \n-go install -v github.com/minio/minio/docs/debugging/s3-check-md5@latest\n-\n s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket bucket2\n s3-check-md5 -versions -access-key minioadmin -secret-key minioadmin -endpoint http://127.0.0.1:9001/ -bucket versioned\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 11,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "00b2ef29323e786a8958bf0bedced133cb06245f",
            "date": "2025-01-08T11:09:24Z",
            "author_login": "vadmeste"
          },
          {
            "sha": "4536ecfaa4d81dd3f648616094a4936162089db8",
            "date": "2025-01-06T15:51:54Z",
            "author_login": "klauspost"
          },
          {
            "sha": "43a74029685512ce9b1b76c053d48b43fc8d64fc",
            "date": "2025-01-03T05:34:47Z",
            "author_login": "harshavardhana"
          },
          {
            "sha": "330dca9a354cdf445d71979170bbe3d27971d127",
            "date": "2024-12-21T04:24:45Z",
            "author_login": "allanrogerr"
          },
          {
            "sha": "ddd137d31769185e6de4f27dfaba8de6498bb1ea",
            "date": "2024-12-19T18:21:46Z",
            "author_login": "klauspost"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "MinIO is a High Performance Object Storage released under GNU Affero General Public License v3.0. `If-Modified-Since` and `If-Unmodified-Since` headers when used with anonymous requests by sending a random object name requests can be used to determine if an object exists or not on the server on a specific bucket and also gain access to some amount of\ninformation such as  `Last-Modified (of the latest version)`, `Etag (of the latest version)`, `x-amz-version-id (of the latest version)`, `Expires (metadata value of the latest version)`, `Cache-Control (metadata value of the latest version)`. This conditional check was being honored before validating if the anonymous access is indeed allowed on the metadata of an object. This issue has been addressed in commit `e0fe7cc3917`. Users must upgrade to RELEASE.2024-05-27T19-17-46Z for the fix. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-28T19:15:10.687",
    "last_modified": "2024-11-21T09:21:37.483",
    "fix_date": "2024-05-27T19:17:46Z"
  },
  "references": [
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/pull/19810",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-95fr-cm4m-q5p9",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/pull/19810",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-95fr-cm4m-q5p9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.301827",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "minio",
    "owner": "minio",
    "created_at": "2015-01-14T19:23:58Z",
    "updated_at": "2025-01-14T10:52:24Z",
    "pushed_at": "2025-01-08T11:09:25Z",
    "size": 131770,
    "stars": 49440,
    "forks": 5609,
    "open_issues": 33,
    "watchers": 49440,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release"
    ],
    "languages": {
      "Go": 8661217,
      "Shell": 72203,
      "Makefile": 11634,
      "Mustache": 6628,
      "Smarty": 872,
      "Dockerfile": 229
    },
    "commit_activity": {
      "total_commits_last_year": 949,
      "avg_commits_per_week": 18.25,
      "days_active_last_year": 271
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:53:58.932687"
  }
}