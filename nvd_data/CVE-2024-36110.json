{
  "cve_id": "CVE-2024-36110",
  "github_data": {
    "repository": "ansibleguy/webui",
    "fix_commit": "7737b47e7f7ddbfec7b1418c724598363718d522",
    "related_commits": [
      "7737b47e7f7ddbfec7b1418c724598363718d522",
      "7737b47e7f7ddbfec7b1418c724598363718d522"
    ],
    "patch_url": "https://github.com/ansibleguy/webui/commit/7737b47e7f7ddbfec7b1418c724598363718d522.patch",
    "fix_commit_details": {
      "sha": "7737b47e7f7ddbfec7b1418c724598363718d522",
      "commit_date": "2024-05-20T09:10:34Z",
      "author": {
        "login": "ansibleguy",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "added validation against XSS (#44)",
        "length": 34,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 109,
        "additions": 93,
        "deletions": 16
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n \n ### 0.0.21\n \n-* ...\n+* Added [validation against XSS](https://github.com/ansibleguy/webui/issues/44)\n \n ----\n "
        },
        {
          "filename": "src/ansibleguy-webui/aw/api_endpoints/alert.py",
          "status": "modified",
          "additions": 22,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@\n \n from aw.model.job import Job\n from aw.api_endpoints.base import API_PERMISSION, GenericResponse, get_api_user, api_docs_put, api_docs_delete, \\\n-    api_docs_post\n+    api_docs_post, validate_no_xss\n from aw.utils.permission import has_manager_privileges\n from aw.model.alert import BaseAlert, AlertPlugin, AlertGlobal, AlertGroup, AlertUser\n \n@@ -197,6 +197,13 @@ class Meta:\n         model = AlertUser\n         fields = AlertUser.api_fields_write\n \n+    def validate(self, attrs: dict):\n+        for field in AlertUser.api_fields_write:\n+            if field in attrs:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n \n class APIAlertUser(GenericAPIView):\n     http_method_names = ['get', 'post']\n@@ -352,6 +359,13 @@ class Meta:\n         model = AlertGlobal\n         fields = AlertGlobal.api_fields_write\n \n+    def validate(self, attrs: dict):\n+        for field in AlertGlobal.api_fields_write:\n+            if field in attrs:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n \n class APIAlertGlobal(GenericAPIView):\n     http_method_names = ['get', 'post']\n@@ -513,6 +527,13 @@ class Meta:\n         model = AlertGroup\n         fields = AlertGroup.api_fields_write\n \n+    def validate(self, attrs: dict):\n+        for field in AlertGroup.api_fields_write:\n+            if field in attrs:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n \n class APIAlertGroup(GenericAPIView):\n     http_method_names = ['get', 'post']"
        },
        {
          "filename": "src/ansibleguy-webui/aw/api_endpoints/base.py",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -2,13 +2,16 @@\n from django.contrib.auth.models import AnonymousUser\n from django.core.exceptions import ObjectDoesNotExist\n from django.http import JsonResponse\n+from django.utils.html import escape as escape_html\n from rest_framework import serializers\n+from rest_framework.exceptions import ValidationError\n from rest_framework.permissions import IsAuthenticated\n from rest_framework_api_key.permissions import BaseHasAPIKey\n from drf_spectacular.utils import OpenApiResponse\n \n from aw.model.api import AwAPIKey\n from aw.base import USERS, GROUPS\n+from aw.utils.util import is_set\n \n \n class HasAwAPIKey(BaseHasAPIKey):\n@@ -88,3 +91,8 @@ def api_docs_post(item: str) -> dict:\n def not_implemented(*args, **kwargs):\n     del args, kwargs\n     return JsonResponse({'error': 'Not yet implemented'}, status=404)\n+\n+\n+def validate_no_xss(value: str, field: str):\n+    if is_set(value) and isinstance(value, str) and value != escape_html(value):\n+        raise ValidationError(f\"Found illegal characters in field '{field}'\")"
        },
        {
          "filename": "src/ansibleguy-webui/aw/api_endpoints/credentials.py",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -9,7 +9,7 @@\n from aw.model.job_credential import BaseJobCredentials, JobUserCredentials, JobGlobalCredentials\n from aw.model.permission import CHOICE_PERMISSION_READ, CHOICE_PERMISSION_WRITE, CHOICE_PERMISSION_DELETE\n from aw.api_endpoints.base import API_PERMISSION, get_api_user, GenericResponse, BaseResponse, api_docs_delete, \\\n-    api_docs_put, api_docs_post\n+    api_docs_put, api_docs_post, validate_no_xss\n from aw.utils.permission import has_credentials_permission, has_manager_privileges\n from aw.config.hardcoded import SECRET_HIDDEN\n from aw.utils.util import is_null\n@@ -50,12 +50,26 @@ class Meta:\n     connect_pass = serializers.CharField(max_length=100, required=False, default=None, allow_blank=True)\n     ssh_key = serializers.CharField(max_length=5000, required=False, default=None, allow_blank=True)\n \n+    def validate(self, attrs: dict):\n+        for field in JobGlobalCredentials.api_fields_write:\n+            if field in attrs and field not in BaseJobCredentials.SECRET_ATTRS:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n \n class JobUserCredentialsWriteRequest(JobGlobalCredentialsWriteRequest):\n     class Meta:\n         model = JobUserCredentials\n         fields = JobUserCredentials.api_fields_write\n \n+    def validate(self, attrs: dict):\n+        for field in JobUserCredentials.api_fields_write:\n+            if field in attrs and field not in BaseJobCredentials.SECRET_ATTRS:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n \n def are_global_credentials(request) -> bool:\n     if 'global' in request.GET and request.GET['global'] != 'true':"
        },
        {
          "filename": "src/ansibleguy-webui/aw/api_endpoints/job.py",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -11,7 +11,7 @@\n     CHOICE_PERMISSION_WRITE, CHOICE_PERMISSION_DELETE\n from aw.model.job_credential import JobGlobalCredentials\n from aw.api_endpoints.base import API_PERMISSION, get_api_user, BaseResponse, GenericResponse, \\\n-    LogDownloadResponse, api_docs_put, api_docs_delete, api_docs_post\n+    LogDownloadResponse, api_docs_put, api_docs_delete, api_docs_post, validate_no_xss\n from aw.api_endpoints.job_util import get_viewable_jobs_serialized, JobReadResponse, get_job_executions_serialized, \\\n     JobExecutionReadResponse, get_viewable_jobs, get_job_execution_serialized, get_log_file_content\n from aw.utils.permission import has_job_permission, has_credentials_permission, has_manager_privileges\n@@ -28,6 +28,13 @@ class Meta:\n \n     name = serializers.CharField(validators=[])  # uc on update\n \n+    def validate(self, attrs: dict):\n+        for field in Job.api_fields_write:\n+            if field in attrs:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n \n def _find_job(job_id: int) -> (Job, None):\n     try:"
        },
        {
          "filename": "src/ansibleguy-webui/aw/api_endpoints/permission.py",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@\n from aw.model.permission import JobPermission, JobPermissionMapping, JobPermissionMemberUser, \\\n     JobPermissionMemberGroup, JobCredentialsPermissionMapping, JobRepositoryPermissionMapping\n from aw.api_endpoints.base import API_PERMISSION, GenericResponse, get_api_user, api_docs_put, api_docs_delete, \\\n-    api_docs_post\n+    api_docs_post, validate_no_xss\n from aw.utils.permission import has_manager_privileges\n from aw.utils.util import is_set\n from aw.base import USERS, GROUPS\n@@ -60,6 +60,13 @@ def __init__(self, *args, **kwargs):\n         self.fields['users'] = serializers.MultipleChoiceField(choices=[user.id for user in USERS.objects.all()])\n         self.fields['groups'] = serializers.MultipleChoiceField(choices=[group.id for group in GROUPS.objects.all()])\n \n+    def validate(self, attrs: dict):\n+        for field in JobPermission.api_fields_write:\n+            if field in attrs:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n     @staticmethod\n     def create_or_update(validated_data: dict, perm: JobPermission = None):\n         # pylint: disable=R0912,R0915"
        },
        {
          "filename": "src/ansibleguy-webui/aw/api_endpoints/repository.py",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@\n \n from aw.model.repository import Repository\n from aw.api_endpoints.base import API_PERMISSION, GenericResponse, get_api_user, LogDownloadResponse, api_docs_put, \\\n-    api_docs_delete, api_docs_post\n+    api_docs_delete, api_docs_post, validate_no_xss\n from aw.utils.permission import has_manager_privileges, has_repository_permission, get_viewable_repositories\n from aw.model.job import Job\n from aw.utils.util import unset_or_null, is_set\n@@ -27,6 +27,13 @@ class Meta:\n \n     name = serializers.CharField(validators=[])  # uc on update\n \n+    def validate(self, attrs: dict):\n+        for field in Repository.api_fields_write:\n+            if field in attrs:\n+                validate_no_xss(value=attrs[field], field=field)\n+\n+        return attrs\n+\n \n class RepositoryReadResponse(RepositoryWriteRequest):\n     class Meta:"
        },
        {
          "filename": "src/ansibleguy-webui/aw/static/js/aw.js",
          "status": "modified",
          "additions": 21,
          "deletions": 2,
          "patch": "@@ -206,13 +206,32 @@ function sortTable($sortButton, order = 'desc') {\n     }\n }\n \n+function escapeRegExp(string) {\n+    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n+}\n+\n+function replaceAll(str, search, replace) {\n+    return str.replace(new RegExp(escapeRegExp(search), 'g'), replace);\n+}\n+\n+// see: https://docs.djangoproject.com/en/5.0/ref/templates/language/#automatic-html-escaping\n+function escapeHTML(data) {\n+    if (!is_set(data)) {\n+        return data;\n+    }\n+    data = data.replaceAll('<', '&lt;');\n+    data = data.replaceAll('>', '&gt;');\n+    data = data.replaceAll('&', '&amp;');\n+    return data;\n+}\n+\n // API CALLS\n const CSRF_TOKEN = getCookie('csrftoken');\n \n function apiActionSuccess(result) {\n     resultDiv = document.getElementById('aw-api-result');\n     if (result.msg) {\n-        resultDiv.innerHTML = 'Success: ' + result.msg;\n+        resultDiv.innerHTML = 'Success: ' + escapeHTML(result.msg);\n     } else {\n         resultDiv.innerHTML = 'Success';\n     }\n@@ -234,7 +253,7 @@ function apiActionError(result, exception) {\n     errorDiv =  document.getElementById('aw-api-error');\n     let errorHTML = \"Got error: \" + result.statusText + ' (' + result.status + ')';\n     if (is_set(result.responseJSON.msg)) {\n-        errorHTML += ' - ' + result.responseJSON.msg;\n+        errorHTML += ' - ' + escapeHTML(result.responseJSON.msg);\n     } else {\n         errorHTML += '<br><button class=\"btn btn-warning aw-btn-action\" title=\"Full error\" onclick=\"apiActionFullError()\">Show full error</button><br>';\n     }"
        },
        {
          "filename": "src/ansibleguy-webui/aw/static/js/jobs/logs.js",
          "status": "modified",
          "additions": 0,
          "deletions": 8,
          "patch": "@@ -1,11 +1,3 @@\n-function escapeRegExp(string) {\n-    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n-}\n-\n-function replaceAll(str, search, replace) {\n-    return str.replace(new RegExp(escapeRegExp(search), 'g'), replace);\n-}\n-\n function addLogLines($this) {\n     let logParentElement = $this.attr(\"aw-expand\");\n     let logElement = $this.attr(\"aw-log\");"
        },
        {
          "filename": "src/ansibleguy-webui/aw/static/js/jobs/manage.js",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -39,6 +39,8 @@ function updateApiTableDataJob(row, row2, entry) {\n     actionsTemplate = actionsTemplate.replaceAll('${ID}', entry.id);\n     if (lastExecution != null) {\n         actionsTemplate = actionsTemplate.replaceAll('${EXEC_ID_1}', lastExecution.id);\n+    } else {\n+        actionsTemplate = actionsTemplate.replaceAll('${EXEC_ID_1}', 0);\n     }\n     row.cells[7].innerHTML = actionsTemplate;\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "12379208ced1774ddbeef98ea37af95e1968f6f0",
            "date": "2025-01-05T13:36:25Z",
            "author_login": "superstes"
          },
          {
            "sha": "00880a880c06f08fb3598324b0a2d89010140f1e",
            "date": "2025-01-05T13:34:09Z",
            "author_login": "superstes"
          },
          {
            "sha": "96458b2981c893f990ef46fd02d5f399e1e4f86c",
            "date": "2024-12-11T18:00:20Z",
            "author_login": "superstes"
          },
          {
            "sha": "ac12f2448c4f093bc5b298ae0a3d10f76c1963ff",
            "date": "2024-12-11T17:59:33Z",
            "author_login": "superstes"
          },
          {
            "sha": "c299876b39de0a56b760840e78c8c2a64b6ff6c6",
            "date": "2024-12-11T17:37:23Z",
            "author_login": "superstes"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "ansibleguy-webui is an open source WebUI for using Ansible. Multiple forms in versions < 0.0.21 allowed injection of HTML elements. These are returned to the user after executing job actions and thus evaluated by the browser. These issues have been addressed in version 0.0.21 (0.0.21.post2 on pypi). Users are advised to upgrade. There are no known workarounds for these issues.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-28T19:15:11.110",
    "last_modified": "2024-11-21T09:21:38.370",
    "fix_date": "2024-05-20T09:10:34Z"
  },
  "references": [
    {
      "url": "https://github.com/ansibleguy/webui/commit/7737b47e7f7ddbfec7b1418c724598363718d522",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/ansibleguy/webui/files/15358522/Report.pdf",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/ansibleguy/webui/issues/44",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/ansibleguy/webui/security/advisories/GHSA-927p-xrc2-x2gj",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/ansibleguy/webui/commit/7737b47e7f7ddbfec7b1418c724598363718d522",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/ansibleguy/webui/files/15358522/Report.pdf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/ansibleguy/webui/issues/44",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/ansibleguy/webui/security/advisories/GHSA-927p-xrc2-x2gj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:24.302119",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "webui",
    "owner": "ansibleguy",
    "created_at": "2024-01-14T03:46:36Z",
    "updated_at": "2025-01-11T10:01:44Z",
    "pushed_at": "2025-01-05T13:36:30Z",
    "size": 2264,
    "stars": 108,
    "forks": 8,
    "open_issues": 16,
    "watchers": 108,
    "has_security_policy": false,
    "default_branch": "latest",
    "protected_branches": [
      "latest"
    ],
    "languages": {
      "Python": 399643,
      "HTML": 73331,
      "JavaScript": 66185,
      "CSS": 15198,
      "Shell": 12648,
      "Makefile": 3092
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T18:41:35.329370"
  }
}