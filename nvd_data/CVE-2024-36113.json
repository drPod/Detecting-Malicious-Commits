{
  "cve_id": "CVE-2024-36113",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "8470546f59b04bd82ce9b711406758fd5439936d",
    "related_commits": [
      "8470546f59b04bd82ce9b711406758fd5439936d",
      "9c4a5f39d3ad351410a1453ff5e5f7ffce17cd7e",
      "8470546f59b04bd82ce9b711406758fd5439936d",
      "9c4a5f39d3ad351410a1453ff5e5f7ffce17cd7e"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/8470546f59b04bd82ce9b711406758fd5439936d.patch",
    "fix_commit_details": {
      "sha": "8470546f59b04bd82ce9b711406758fd5439936d",
      "commit_date": "2024-05-28T21:58:34Z",
      "author": {
        "login": "OsamaSayegh",
        "type": "User",
        "stats": {
          "total_commits": 536,
          "average_weekly_commits": 0.7734487734487735,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 209
        }
      },
      "commit_message": {
        "title": "SECURITY: Don't allow suspending staff users via other_user_ids param",
        "length": 69,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 268,
        "additions": 228,
        "deletions": 40
      },
      "files": [
        {
          "filename": "app/controllers/admin/users_controller.rb",
          "status": "modified",
          "additions": 22,
          "deletions": 39,
          "patch": "@@ -46,7 +46,11 @@ def show\n     @user = User.find_by(id: params[:id])\n     raise Discourse::NotFound unless @user\n \n-    similar_users = User.real.where.not(id: @user.id).where(ip_address: @user.ip_address)\n+    similar_users =\n+      User\n+        .real\n+        .where.not(id: @user.id)\n+        .where(ip_address: @user.ip_address, admin: false, moderator: false)\n \n     render_serialized(\n       @user,\n@@ -144,52 +148,28 @@ def suspend\n \n     user_history = nil\n \n-    all_users.each do |user|\n-      user.suspended_till = params[:suspend_until]\n-      user.suspended_at = DateTime.now\n-\n-      message = params[:message]\n-\n-      User.transaction do\n-        user.save!\n-\n-        user_history =\n-          StaffActionLogger.new(current_user).log_user_suspend(\n-            user,\n-            params[:reason],\n-            message: message,\n-            post_id: params[:post_id],\n-          )\n-      end\n-      user.logged_out\n+    all_users.each { |user| raise Discourse::InvalidAccess.new if !guardian.can_suspend?(user) }\n \n-      if message.present?\n-        Jobs.enqueue(\n-          :critical_user_email,\n-          type: \"account_suspended\",\n-          user_id: user.id,\n-          user_history_id: user_history.id,\n+    all_users.each do |user|\n+      suspender =\n+        UserSuspender.new(\n+          user,\n+          suspended_till: params[:suspend_until],\n+          reason: params[:reason],\n+          by_user: current_user,\n+          message: params[:message],\n+          post_id: params[:post_id],\n         )\n-      end\n-\n-      DiscourseEvent.trigger(\n-        :user_suspended,\n-        user: user,\n-        reason: params[:reason],\n-        message: message,\n-        user_history: user_history,\n-        post_id: params[:post_id],\n-        suspended_till: params[:suspend_until],\n-        suspended_at: DateTime.now,\n-      )\n+      suspender.suspend\n+      user_history = suspender.user_history\n     end\n \n     perform_post_action\n \n     render_json_dump(\n       suspension: {\n         suspend_reason: params[:reason],\n-        full_suspend_reason: user_history.try(:details),\n+        full_suspend_reason: user_history&.details,\n         suspended_till: @user.suspended_till,\n         suspended_at: @user.suspended_at,\n         suspended_by: BasicUserSerializer.new(current_user, root: false).as_json,\n@@ -369,7 +349,6 @@ def deactivate\n   end\n \n   def silence\n-    guardian.ensure_can_silence_user! @user\n     reason = params[:reason]\n \n     if reason && (!reason.is_a?(String) || reason.size > 300)\n@@ -404,6 +383,10 @@ def silence\n \n     user_history = nil\n \n+    all_users.each do |user|\n+      raise Discourse::InvalidAccess.new if !guardian.can_silence_user?(user)\n+    end\n+\n     all_users.each do |user|\n       silencer =\n         UserSilencer.new("
        },
        {
          "filename": "app/services/user_suspender.rb",
          "status": "added",
          "additions": 55,
          "deletions": 0,
          "patch": "@@ -0,0 +1,55 @@\n+# frozen_string_literal: true\n+\n+class UserSuspender\n+  attr_reader :user_history\n+\n+  def initialize(user, suspended_till:, reason:, by_user:, message: nil, post_id: nil)\n+    @user = user\n+    @suspended_till = suspended_till\n+    @reason = reason\n+    @by_user = by_user\n+    @message = message\n+    @post_id = post_id\n+  end\n+\n+  def suspend\n+    suspended_at = DateTime.now\n+\n+    @user.suspended_till = @suspended_till\n+    @user.suspended_at = suspended_at\n+\n+    @user.transaction do\n+      @user.save!\n+\n+      @user_history =\n+        StaffActionLogger.new(@by_user).log_user_suspend(\n+          @user,\n+          @reason,\n+          message: @message,\n+          post_id: @post_id,\n+        )\n+    end\n+    @user.logged_out\n+\n+    if @message.present?\n+      Jobs.enqueue(\n+        Jobs::CriticalUserEmail,\n+        type: \"account_suspended\",\n+        user_id: @user.id,\n+        user_history_id: @user_history.id,\n+      )\n+    end\n+\n+    DiscourseEvent.trigger(\n+      :user_suspended,\n+      user: @user,\n+      reason: @reason,\n+      message: @message,\n+      user_history: @user_history,\n+      post_id: @post_id,\n+      suspended_till: @suspended_till,\n+      suspended_at: suspended_at,\n+    )\n+    nil\n+  end\n+end"
        },
        {
          "filename": "spec/requests/admin/users_controller_spec.rb",
          "status": "modified",
          "additions": 64,
          "deletions": 1,
          "patch": "@@ -5,6 +5,7 @@\n \n RSpec.describe Admin::UsersController do\n   fab!(:admin)\n+  fab!(:another_admin) { Fabricate(:admin) }\n   fab!(:moderator)\n   fab!(:user)\n   fab!(:coding_horror)\n@@ -108,8 +109,10 @@\n         expect(response.parsed_body[\"id\"]).to eq(user.id)\n       end\n \n-      it \"returns similar users\" do\n+      it \"includes similar users who aren't admin or mods\" do\n         Fabricate(:user, ip_address: \"88.88.88.88\")\n+        Fabricate(:admin, ip_address: user.ip_address)\n+        Fabricate(:moderator, ip_address: user.ip_address)\n         similar_user = Fabricate(:user, ip_address: user.ip_address)\n \n         get \"/admin/users/#{user.id}.json\"\n@@ -278,10 +281,37 @@\n       end\n     end\n \n+    shared_examples \"suspension of staff users\" do\n+      it \"doesn't allow suspending a staff user\" do\n+        put \"/admin/users/#{another_admin.id}/suspend.json\",\n+            params: {\n+              suspend_until: 5.hours.from_now,\n+              reason: \"naughty boy\",\n+            }\n+\n+        expect(response.status).to eq(403)\n+        expect(another_admin.reload).not_to be_suspended\n+      end\n+\n+      it \"doesn't allow suspending a staff user via other_user_ids\" do\n+        put \"/admin/users/#{user.id}/suspend.json\",\n+            params: {\n+              suspend_until: 5.hours.from_now,\n+              reason: \"naughty boy\",\n+              other_user_ids: [another_admin.id],\n+            }\n+\n+        expect(response.status).to eq(403)\n+        expect(user.reload).not_to be_suspended\n+        expect(another_admin.reload).not_to be_suspended\n+      end\n+    end\n+\n     context \"when logged in as an admin\" do\n       before { sign_in(admin) }\n \n       include_examples \"suspension of active user possible\"\n+      include_examples \"suspension of staff users\"\n \n       it \"checks if user is suspended\" do\n         put \"/admin/users/#{user.id}/suspend.json\",\n@@ -505,6 +535,7 @@\n       before { sign_in(moderator) }\n \n       include_examples \"suspension of active user possible\"\n+      include_examples \"suspension of staff users\"\n     end\n \n     context \"when logged in as a non-staff user\" do\n@@ -1517,6 +1548,22 @@\n         expect(response.status).to eq(404)\n       end\n \n+      it \"doesn't allow silencing another admin\" do\n+        put \"/admin/users/#{another_admin.id}/silence.json\"\n+        expect(response.status).to eq(403)\n+        expect(another_admin.reload).to_not be_silenced\n+      end\n+\n+      it \"doesn't allow silencing another admin via other_user_ids\" do\n+        put \"/admin/users/#{reg_user.id}/silence.json\",\n+            params: {\n+              other_user_ids: [another_admin.id],\n+            }\n+        expect(response.status).to eq(403)\n+        expect(another_admin.reload).to_not be_silenced\n+        expect(reg_user.reload).to_not be_silenced\n+      end\n+\n       it \"punishes the user for spamming\" do\n         put \"/admin/users/#{reg_user.id}/silence.json\"\n         expect(response.status).to eq(200)\n@@ -1633,6 +1680,22 @@\n         expect(reg_user).to be_silenced\n         expect(reg_user.silenced_record).to be_present\n       end\n+\n+      it \"doesn't allow silencing another admin\" do\n+        put \"/admin/users/#{another_admin.id}/silence.json\"\n+        expect(response.status).to eq(403)\n+        expect(another_admin.reload).to_not be_silenced\n+      end\n+\n+      it \"doesn't allow silencing another admin via other_user_ids\" do\n+        put \"/admin/users/#{reg_user.id}/silence.json\",\n+            params: {\n+              other_user_ids: [another_admin.id],\n+            }\n+        expect(response.status).to eq(403)\n+        expect(another_admin.reload).to_not be_silenced\n+        expect(reg_user.reload).to_not be_silenced\n+      end\n     end\n \n     context \"when logged in as a non-staff user\" do"
        },
        {
          "filename": "spec/services/user_suspender_spec.rb",
          "status": "added",
          "additions": 87,
          "deletions": 0,
          "patch": "@@ -0,0 +1,87 @@\n+# frozen_string_literal: true\n+\n+RSpec.describe UserSuspender do\n+  fab!(:user) { Fabricate(:user, trust_level: 0) }\n+  fab!(:post) { Fabricate(:post, user: user) }\n+  fab!(:admin)\n+\n+  describe \"suspend\" do\n+    subject(:suspend_user) { suspender.suspend }\n+\n+    let(:suspender) do\n+      UserSuspender.new(\n+        user,\n+        suspended_till: 5.hours.from_now,\n+        reason: \"because\",\n+        by_user: admin,\n+        post_id: post.id,\n+        message: \"you have been suspended\",\n+      )\n+    end\n+\n+    it \"suspends the user correctly\" do\n+      freeze_time\n+      suspend_user\n+      expect(user.reload).to be_suspended\n+      expect(user.suspended_till).to be_within_one_second_of(5.hours.from_now)\n+      expect(user.suspended_at).to be_within_one_second_of(Time.zone.now)\n+    end\n+\n+    it \"creates a staff action log\" do\n+      expect do suspend_user end.to change {\n+        UserHistory.where(\n+          action: UserHistory.actions[:suspend_user],\n+          acting_user_id: admin.id,\n+          target_user_id: user.id,\n+        ).count\n+      }.from(0).to(1)\n+    end\n+\n+    it \"logs the user out\" do\n+      messages = MessageBus.track_publish(\"/logout/#{user.id}\") { suspend_user }\n+      expect(messages.size).to eq(1)\n+      expect(messages[0].user_ids).to eq([user.id])\n+      expect(messages[0].data).to eq(user.id)\n+    end\n+\n+    it \"fires a user_suspended event\" do\n+      freeze_time\n+      events = DiscourseEvent.track_events(:user_suspended) { suspend_user }\n+      expect(events.size).to eq(1)\n+\n+      params = events[0][:params].first\n+      expect(params[:user].id).to eq(user.id)\n+      expect(params[:reason]).to eq(\"because\")\n+      expect(params[:message]).to eq(\"you have been suspended\")\n+      expect(params[:suspended_till]).to be_within_one_second_of(5.hours.from_now)\n+      expect(params[:suspended_at]).to eq(Time.zone.now)\n+    end\n+\n+    context \"when a message is provided\" do\n+      it \"enqueues a critical user email job\" do\n+        expect do suspend_user end.to change { Jobs::CriticalUserEmail.jobs.size }.from(0).to(1)\n+\n+        job = Jobs::CriticalUserEmail.jobs.first\n+        expect(job[\"args\"].first[\"user_id\"]).to eq(user.id)\n+        expect(job[\"args\"].first[\"user_history_id\"]).to eq(suspender.user_history.id)\n+      end\n+    end\n+\n+    context \"when a message is not provided\" do\n+      let(:suspender) do\n+        UserSuspender.new(\n+          user,\n+          suspended_till: 5.hours.from_now,\n+          reason: \"because\",\n+          by_user: admin,\n+          post_id: post.id,\n+          message: nil,\n+        )\n+      end\n+\n+      it \"doesn't enqueue a critical user email job\" do\n+        expect do suspend_user end.not_to change { Jobs::CriticalUserEmail.jobs.size }.from(0)\n+      end\n+    end\n+  end\n+end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "496a739788d58a7f1c6bd59643d062ae37e982a0",
            "date": "2025-01-14T15:19:49Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "a89086f7996f95024827df61fb0d86a516b269f6",
            "date": "2025-01-14T15:19:19Z",
            "author_login": "markvanlan"
          },
          {
            "sha": "473e37e7b3dcb254548a04695fb5e5f56a6de33b",
            "date": "2025-01-14T14:32:50Z",
            "author_login": "CvX"
          },
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-862",
    "description": "Discourse is an open-source discussion platform. Prior to version 3.2.3 on the `stable` branch, version 3.3.0.beta3 on the `beta` branch, and version 3.3.0.beta4-dev on the `tests-passed` branch, a rogue staff user could suspend other staff users preventing them from logging in to the site. The issue is patched in version 3.2.3 on the `stable` branch, version 3.3.0.beta3 on the `beta` branch, and version 3.3.0.beta4-dev on the `tests-passed` branch. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-07-03T19:15:04.523",
    "last_modified": "2024-11-21T09:21:38.790",
    "fix_date": "2024-05-28T21:58:34Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/8470546f59b04bd82ce9b711406758fd5439936d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/9c4a5f39d3ad351410a1453ff5e5f7ffce17cd7e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-3w3f-76p7-3c4g",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/8470546f59b04bd82ce9b711406758fd5439936d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/9c4a5f39d3ad351410a1453ff5e5f7ffce17cd7e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-3w3f-76p7-3c4g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.889265",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}