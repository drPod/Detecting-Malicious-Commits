{
  "cve_id": "CVE-2024-36114",
  "github_data": {
    "repository": "airlift/aircompressor",
    "fix_commit": "15e68df9eb0c2bfde7f796231ee7cd1982965071",
    "related_commits": [
      "15e68df9eb0c2bfde7f796231ee7cd1982965071",
      "2cea90a45534f9aacbb77426fb64e975504dee6e",
      "cf66151541edb062ea88b6f3baab3f95e48b7b7f",
      "d01ecb779375a092d00e224abe7869cdf49ddc3e",
      "15e68df9eb0c2bfde7f796231ee7cd1982965071",
      "2cea90a45534f9aacbb77426fb64e975504dee6e",
      "cf66151541edb062ea88b6f3baab3f95e48b7b7f",
      "d01ecb779375a092d00e224abe7869cdf49ddc3e"
    ],
    "patch_url": "https://github.com/airlift/aircompressor/commit/15e68df9eb0c2bfde7f796231ee7cd1982965071.patch",
    "fix_commit_details": {
      "sha": "15e68df9eb0c2bfde7f796231ee7cd1982965071",
      "commit_date": "2024-02-09T00:20:17Z",
      "author": {
        "login": "martint",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix out of bounds read due to negative length",
        "length": 214,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 224,
        "additions": 224,
        "deletions": 0
      },
      "files": [
        {
          "filename": "src/main/java/io/airlift/compress/lz4/Lz4RawDecompressor.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -69,6 +69,9 @@ public static int decompress(\n                 }\n                 while (value == 255 && input < inputLimit - 15);\n             }\n+            if (literalLength < 0) {\n+                throw new MalformedInputException(input - inputAddress);\n+            }\n \n             // copy literal\n             long literalEnd = input + literalLength;\n@@ -127,6 +130,9 @@ public static int decompress(\n                 while (value == 255);\n             }\n             matchLength += MIN_MATCH; // implicit length from initial 4-byte match in encoder\n+            if (matchLength < 0) {\n+                throw new MalformedInputException(input - inputAddress);\n+            }\n \n             long matchOutputLimit = output + matchLength;\n "
        },
        {
          "filename": "src/main/java/io/airlift/compress/lzo/LzoRawDecompressor.java",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -248,6 +248,10 @@ else if ((command & 0b1100_0000) != 0) {\n                 }\n                 firstCommand = false;\n \n+                if (matchLength < 0) {\n+                    throw new MalformedInputException(input - inputAddress);\n+                }\n+\n                 // copy match\n                 if (matchLength != 0) {\n                     // lzo encodes match offset minus one\n@@ -316,6 +320,9 @@ else if ((command & 0b1100_0000) != 0) {\n                 }\n \n                 // copy literal\n+                if (literalLength < 0) {\n+                    throw new MalformedInputException(input - inputAddress);\n+                }\n                 long literalOutputLimit = output + literalLength;\n                 if (literalOutputLimit > fastOutputLimit || input + literalLength > inputLimit - SIZE_OF_LONG) {\n                     if (literalOutputLimit > outputLimit) {"
        },
        {
          "filename": "src/main/java/io/airlift/compress/snappy/SnappyRawDecompressor.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -116,6 +116,9 @@ private static int uncompressAll(\n \n             if ((opCode & 0x3) == LITERAL) {\n                 int literalLength = length + trailer;\n+                if (literalLength < 0) {\n+                    throw new MalformedInputException(input - inputAddress);\n+                }\n \n                 // copy literal\n                 long literalOutputLimit = output + literalLength;\n@@ -147,6 +150,9 @@ private static int uncompressAll(\n                 // bit 8).\n                 int matchOffset = entry & 0x700;\n                 matchOffset += trailer;\n+                if (matchOffset < 0) {\n+                    throw new MalformedInputException(input - inputAddress);\n+                }\n \n                 long matchAddress = output - matchOffset;\n                 if (matchAddress < outputAddress || output + length > outputLimit) {"
        },
        {
          "filename": "src/main/java/io/airlift/compress/zstd/Huffman.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -172,6 +172,8 @@ public void decode4Streams(final Object inputBase, final long inputAddress, fina\n         long start3 = start2 + (UNSAFE.getShort(inputBase, inputAddress + 2) & 0xFFFF);\n         long start4 = start3 + (UNSAFE.getShort(inputBase, inputAddress + 4) & 0xFFFF);\n \n+        verify(start2 < start3 && start3 < start4 && start4 < inputLimit, inputAddress, \"Input is corrupted\");\n+\n         BitInputStream.Initializer initializer = new BitInputStream.Initializer(inputBase, start1, start2);\n         initializer.initialize();\n         int stream1bitsConsumed = initializer.getBitsConsumed();"
        },
        {
          "filename": "src/test/java/io/airlift/compress/lz4/TestLz4.java",
          "status": "modified",
          "additions": 49,
          "deletions": 0,
          "patch": "@@ -16,9 +16,17 @@\n import io.airlift.compress.AbstractTestCompression;\n import io.airlift.compress.Compressor;\n import io.airlift.compress.Decompressor;\n+import io.airlift.compress.MalformedInputException;\n import io.airlift.compress.thirdparty.JPountzLz4Compressor;\n import io.airlift.compress.thirdparty.JPountzLz4Decompressor;\n import net.jpountz.lz4.LZ4Factory;\n+import org.testng.annotations.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n public class TestLz4\n         extends AbstractTestCompression\n@@ -46,4 +54,45 @@ protected Decompressor getVerifyDecompressor()\n     {\n         return new JPountzLz4Decompressor(LZ4Factory.fastestInstance());\n     }\n+\n+    @Test\n+    public void testLiteralLengthOverflow()\n+            throws IOException\n+    {\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        buffer.write((byte) 0b1111_0000); // token\n+        // Causes overflow for `literalLength`\n+        byte[] literalLengthBytes = new byte[Integer.MAX_VALUE / 255 + 1]; // ~9MB\n+        Arrays.fill(literalLengthBytes, (byte) 255);\n+        buffer.write(literalLengthBytes);\n+        buffer.write(1);\n+        buffer.write(new byte[20]);\n+\n+        byte[] data = buffer.toByteArray();\n+\n+        assertThatThrownBy(() -> new Lz4Decompressor().decompress(data, 0, data.length, new byte[2048], 0, 2048))\n+                .isInstanceOf(MalformedInputException.class);\n+    }\n+\n+    @Test\n+    public void testMatchLengthOverflow()\n+            throws IOException\n+    {\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        buffer.write((byte) 0b0000_1111); // token\n+        buffer.write(new byte[2]); // offset\n+\n+        // Causes overflow for `matchLength`\n+        byte[] literalLengthBytes = new byte[Integer.MAX_VALUE / 255 + 1]; // ~9MB\n+        Arrays.fill(literalLengthBytes, (byte) 255);\n+        buffer.write(literalLengthBytes);\n+        buffer.write(1);\n+\n+        buffer.write(new byte[10]);\n+\n+        byte[] data = buffer.toByteArray();\n+\n+        assertThatThrownBy(() -> new Lz4Decompressor().decompress(data, 0, data.length, new byte[2048], 0, 2048))\n+                .isInstanceOf(MalformedInputException.class);\n+    }\n }"
        },
        {
          "filename": "src/test/java/io/airlift/compress/lzo/TestLzo.java",
          "status": "modified",
          "additions": 81,
          "deletions": 0,
          "patch": "@@ -17,8 +17,15 @@\n import io.airlift.compress.Compressor;\n import io.airlift.compress.Decompressor;\n import io.airlift.compress.HadoopNative;\n+import io.airlift.compress.MalformedInputException;\n import io.airlift.compress.thirdparty.HadoopLzoCompressor;\n import io.airlift.compress.thirdparty.HadoopLzoDecompressor;\n+import org.testng.annotations.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n public class TestLzo\n         extends AbstractTestCompression\n@@ -50,4 +57,78 @@ protected Decompressor getVerifyDecompressor()\n     {\n         return new HadoopLzoDecompressor();\n     }\n+\n+    @Test\n+    public void testLiteralLengthOverflow()\n+            throws IOException\n+    {\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        // Command\n+        buffer.write(0);\n+        // Causes overflow for `literalLength`\n+        buffer.write(new byte[Integer.MAX_VALUE / 255 + 1]); // ~9MB\n+        buffer.write(1);\n+\n+        byte[] data = buffer.toByteArray();\n+\n+        assertThatThrownBy(() -> new LzoDecompressor().decompress(data, 0, data.length, new byte[20000], 0, 20000))\n+                .isInstanceOf(MalformedInputException.class);\n+    }\n+\n+    @Test\n+    public void testMatchLengthOverflow1()\n+            throws IOException\n+    {\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        // Write some data so that `matchOffset` validation later passes\n+        // Command\n+        buffer.write(0);\n+        buffer.write(new byte[66]);\n+        buffer.write(8);\n+        buffer.write(new byte[2107 * 8]);\n+\n+        // Command\n+        buffer.write(0b001_0000);\n+        // Causes overflow for `matchLength`\n+        buffer.write(new byte[Integer.MAX_VALUE / 255 + 1]); // ~9MB\n+        buffer.write(1);\n+        // Trailer\n+        buffer.write(0b0000_0000);\n+        buffer.write(0b0000_0100);\n+\n+        buffer.write(new byte[10]);\n+\n+        byte[] data = buffer.toByteArray();\n+\n+        assertThatThrownBy(() -> new LzoDecompressor().decompress(data, 0, data.length, new byte[20000], 0, 20000))\n+                .isInstanceOf(MalformedInputException.class);\n+    }\n+\n+    @Test\n+    public void testMatchLengthOverflow2()\n+            throws IOException\n+    {\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        // Write some data so that `matchOffset` validation later passes\n+        // Command\n+        buffer.write(0);\n+        buffer.write(246);\n+        buffer.write(new byte[264]);\n+\n+        // Command\n+        buffer.write(0b0010_0000);\n+        // Causes overflow for `matchLength`\n+        buffer.write(new byte[Integer.MAX_VALUE / 255 + 1]); // ~9MB\n+        buffer.write(1);\n+        // Trailer\n+        buffer.write(0b0000_0000);\n+        buffer.write(0b0000_0100);\n+\n+        buffer.write(new byte[10]);\n+\n+        byte[] data = buffer.toByteArray();\n+\n+        assertThatThrownBy(() -> new LzoDecompressor().decompress(data, 0, data.length, new byte[20000], 0, 20000))\n+                .isInstanceOf(MalformedInputException.class);\n+    }\n }"
        },
        {
          "filename": "src/test/java/io/airlift/compress/snappy/TestSnappy.java",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -16,8 +16,12 @@\n import io.airlift.compress.AbstractTestCompression;\n import io.airlift.compress.Compressor;\n import io.airlift.compress.Decompressor;\n+import io.airlift.compress.MalformedInputException;\n import io.airlift.compress.thirdparty.XerialSnappyCompressor;\n import io.airlift.compress.thirdparty.XerialSnappyDecompressor;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n public class TestSnappy\n         extends AbstractTestCompression\n@@ -45,4 +49,22 @@ protected Decompressor getVerifyDecompressor()\n     {\n         return new XerialSnappyDecompressor();\n     }\n+\n+    @Test\n+    public void testInvalidLiteralLength()\n+    {\n+        byte[] data = {\n+                // Encoded uncompressed length 1024\n+                -128, 8,\n+                // op-code\n+                (byte) 252,\n+                // Trailer value Integer.MAX_VALUE\n+                (byte) 0b1111_1111, (byte) 0b1111_1111, (byte) 0b1111_1111, (byte) 0b0111_1111,\n+                // Some arbitrary data\n+                0, 0, 0, 0, 0, 0, 0, 0\n+        };\n+\n+        assertThatThrownBy(() -> new SnappyDecompressor().decompress(data, 0, data.length, new byte[1024], 0, 1024))\n+                .isInstanceOf(MalformedInputException.class);\n+    }\n }"
        },
        {
          "filename": "src/test/java/io/airlift/compress/zstd/TestZstd.java",
          "status": "modified",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@\n import io.airlift.compress.thirdparty.ZstdJniDecompressor;\n import org.testng.annotations.Test;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.util.Arrays;\n@@ -209,4 +210,54 @@ public void testDecompressIsMissingData()\n                 .matches(e -> e instanceof MalformedInputException || e instanceof UncheckedIOException)\n                 .hasMessageContaining(\"Not enough input bytes\");\n     }\n+\n+    @Test\n+    public void testBadHuffmanData()\n+            throws IOException\n+    {\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        // Magic\n+        buffer.write(new byte[] {\n+                (byte) 0b0010_1000,\n+                (byte) 0b1011_0101,\n+                (byte) 0b0010_1111,\n+                (byte) 0b1111_1101,\n+        });\n+        // Frame header\n+        buffer.write(0);\n+        buffer.write(0);\n+        // Block header COMPRESSED_BLOCK\n+        buffer.write(new byte[] {\n+                (byte) 0b1111_0100,\n+                (byte) 0b0000_0000,\n+                (byte) 0b0000_0000,\n+        });\n+        // Literals header\n+        buffer.write(new byte[] {\n+                // literalsBlockType COMPRESSED_LITERALS_BLOCK\n+                // + literals type\n+                0b0000_1010,\n+                // ... header remainder\n+                0b0000_0000,\n+                // compressedSize\n+                0b0011_1100,\n+                0b0000_0000,\n+        });\n+        // Huffman inputSize\n+        buffer.write(128);\n+        // weight value\n+        buffer.write(0b0001_0000);\n+        // Bad start values\n+        buffer.write(new byte[] {(byte) 255, (byte) 255});\n+        buffer.write(new byte[] {(byte) 255, (byte) 255});\n+        buffer.write(new byte[] {(byte) 255, (byte) 255});\n+\n+        buffer.write(new byte[10]);\n+\n+        byte[] data = buffer.toByteArray();\n+\n+        assertThatThrownBy(() -> new ZstdDecompressor().decompress(data, 0, data.length, new byte[10], 0, 10))\n+                .isInstanceOf(MalformedInputException.class)\n+                .hasMessageStartingWith(\"Input is corrupted\");\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 8,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9fc2697dc8e71e9d7886f54e76acd515eb3409a2",
            "date": "2024-12-02T02:33:16Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bf6c044f89bfaeb6d260445303eb07e3c67af7c2",
            "date": "2024-11-25T18:22:18Z",
            "author_login": "airlift-bot"
          },
          {
            "sha": "29a9c5068026b1ebb4d9417562330a61ad45f352",
            "date": "2024-11-25T18:22:18Z",
            "author_login": "airlift-bot"
          },
          {
            "sha": "42a6526f457d02e14e29d62b2642e09a350704fc",
            "date": "2024-11-20T02:59:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2faddfbc3ff15791135ca84a9b3662e1d8783c10",
            "date": "2024-11-08T02:55:56Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
    "cwe_id": "CWE-125",
    "description": "Aircompressor is a library with ports of the Snappy, LZO, LZ4, and Zstandard compression algorithms to Java. All decompressor implementations of Aircompressor (LZ4, LZO, Snappy, Zstandard) can crash the JVM for certain input, and in some cases also leak the content of other memory of the Java process (which could contain sensitive information). When decompressing certain data, the decompressors try to access memory outside the bounds of the given byte arrays or byte buffers. Because Aircompressor uses the JDK class `sun.misc.Unsafe` to speed up memory access, no additional bounds checks are performed and this has similar security consequences as out-of-bounds access in C or C++, namely it can lead to non-deterministic behavior or crash the JVM. Users should update to Aircompressor 0.27 or newer where these issues have been fixed. When decompressing data from untrusted users, this can be exploited for a denial-of-service attack by crashing the JVM, or to leak other sensitive information from the Java process. There are no known workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-05-29T21:15:49.237",
    "last_modified": "2024-11-21T09:21:38.970",
    "fix_date": "2024-02-09T00:20:17Z"
  },
  "references": [
    {
      "url": "https://github.com/airlift/aircompressor/commit/15e68df9eb0c2bfde7f796231ee7cd1982965071",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/commit/2cea90a45534f9aacbb77426fb64e975504dee6e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/commit/cf66151541edb062ea88b6f3baab3f95e48b7b7f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/commit/d01ecb779375a092d00e224abe7869cdf49ddc3e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/security/advisories/GHSA-973x-65j7-xcf4",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/commit/15e68df9eb0c2bfde7f796231ee7cd1982965071",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/commit/2cea90a45534f9aacbb77426fb64e975504dee6e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/commit/cf66151541edb062ea88b6f3baab3f95e48b7b7f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/commit/d01ecb779375a092d00e224abe7869cdf49ddc3e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/airlift/aircompressor/security/advisories/GHSA-973x-65j7-xcf4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.325203",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "aircompressor",
    "owner": "airlift",
    "created_at": "2012-07-25T02:57:20Z",
    "updated_at": "2025-01-13T10:29:20Z",
    "pushed_at": "2025-01-13T02:22:32Z",
    "size": 75842,
    "stars": 587,
    "forks": 116,
    "open_issues": 21,
    "watchers": 587,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release-2.x"
    ],
    "languages": {
      "Java": 906010,
      "Shell": 4054
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T21:30:20.453236"
  }
}