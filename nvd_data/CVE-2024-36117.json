{
  "cve_id": "CVE-2024-36117",
  "github_data": {
    "repository": "dzikoysk/reposilite",
    "fix_commit": "e172ae4b539c822d0d6e04cf090713c7202a79d6",
    "related_commits": [
      "e172ae4b539c822d0d6e04cf090713c7202a79d6"
    ],
    "patch_url": "https://github.com/dzikoysk/reposilite/commit/e172ae4b539c822d0d6e04cf090713c7202a79d6.patch",
    "fix_commit_details": {
      "sha": "e172ae4b539c822d0d6e04cf090713c7202a79d6",
      "commit_date": "2024-05-03T14:46:30Z",
      "author": {
        "login": "dzikoysk",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "GHSA-82j3-hf72-7x93 Make Location a bit safer to use out-of-the-box by immediately sanitazing invalid symbols",
        "length": 109,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 68,
        "additions": 42,
        "deletions": 26
      },
      "files": [
        {
          "filename": "gradle/wrapper/gradle-wrapper.properties",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-8.6-all.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-8.7-all.zip\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists"
        },
        {
          "filename": "reposilite-backend/src/main/kotlin/com/reposilite/frontend/infrastructure/FrontendHandler.kt",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -27,19 +27,18 @@ import com.reposilite.storage.getSimpleName\n import com.reposilite.storage.inputStream\n import com.reposilite.web.api.ReposiliteRoute\n import com.reposilite.web.api.ReposiliteRoutes\n-import io.javalin.community.routing.Route\n import io.javalin.community.routing.Route.GET\n import io.javalin.http.ContentType\n import io.javalin.http.Context\n import io.javalin.http.HttpStatus.INTERNAL_SERVER_ERROR\n-import panda.std.Result\n-import panda.std.asSuccess\n import java.io.InputStream\n import java.nio.charset.StandardCharsets.UTF_8\n import java.nio.file.Files\n import java.nio.file.Path\n import kotlin.io.path.isDirectory\n import kotlin.streams.asSequence\n+import panda.std.Result\n+import panda.std.asSuccess\n \n internal sealed class FrontendHandler(private val frontendFacade: FrontendFacade) : ReposiliteRoutes() {\n "
        },
        {
          "filename": "reposilite-backend/src/main/kotlin/com/reposilite/storage/api/Location.kt",
          "status": "modified",
          "additions": 30,
          "deletions": 15,
          "patch": "@@ -17,49 +17,54 @@\n package com.reposilite.storage.api\n \n import com.reposilite.storage.getExtension\n+import java.nio.file.Path\n+import java.nio.file.Paths\n import panda.std.Result\n import panda.std.asSuccess\n import panda.std.letIf\n-import java.nio.file.Path\n-import java.nio.file.Paths\n \n /**\n  * [Path] alternative, represents location of resource in [com.reposilite.storage.StorageProvider]\n  */\n-@Suppress(\"DataClassPrivateConstructor\")\n-data class Location private constructor(private val uri: String) {\n+class Location private constructor(private val uri: String) {\n \n     companion object {\n \n+        private val empty = Location(\"\")\n         private val multipleSlashes = Regex(\"/+\")\n+        private val multipleDirectoryOperators = Regex(\"\\\\.{2,}\")\n \n         @JvmStatic\n-        fun of(uri: String): Location =\n-            uri.replace(\"\\\\\", \"/\")\n+        fun of(uri: String): Location {\n+            return uri\n+                .replaceBefore(\":\", \"\")\n+                .replace(\":\", \"\")\n+                .replace(multipleDirectoryOperators, \".\")\n+                .replace(\"\\\\\", \"/\")\n                 .replace(multipleSlashes, \"/\")\n                 .letIf({ it.startsWith(\"/\") }) { it.removePrefix(\"/\") }\n                 .letIf({ it.endsWith(\"/\") }) { it.removeSuffix(\"/\") }\n                 .let { Location(it) }\n+        }\n \n         @JvmStatic\n         fun of(path: Path): Location =\n-            path.toString().toLocation()\n+            of(path.normalize().toString())\n \n         @JvmStatic\n         fun of(root: Path, path: Path): Location =\n-            of(root.relativize(path))\n+            of(root.relativize(path.normalize()))\n \n         @JvmStatic\n         fun empty(): Location =\n-            \"\".toLocation()\n+            empty\n \n     }\n \n     fun toPath(): Result<Path, String> {\n-        if (uri.contains(\"..\") || uri.contains(\":\") || uri.contains(\"\\\\\")) {\n+        if (uri.contains(\":\") || uri.contains(\"\\\\\") || uri.contains(multipleDirectoryOperators)) {\n             return Result.error(\"Illegal path operator in URI\")\n         }\n-\n         return Paths.get(uri).normalize().asSuccess()\n     }\n \n@@ -99,13 +104,23 @@ data class Location private constructor(private val uri: String) {\n     fun getSimpleName(): String =\n         uri.substringAfterLast(\"/\")\n \n+    override fun equals(other: Any?): Boolean =\n+        when {\n+            this === other -> true\n+            javaClass != other?.javaClass -> false\n+            else -> uri == (other as Location).uri\n+        }\n+\n+    override fun hashCode(): Int =\n+        uri.hashCode()\n+\n     override fun toString(): String =\n         uri\n \n }\n \n fun String?.toLocation(): Location =\n-    if (this != null)\n-        Location.of(this)\n-    else\n-        Location.empty()\n+    when {\n+        this != null -> Location.of(this)\n+        else -> Location.empty()\n+    }"
        },
        {
          "filename": "reposilite-backend/src/main/kotlin/com/reposilite/token/infrastructure/RouteCommands.kt",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -55,7 +55,7 @@ internal class RouteAdd(private val accessTokenFacade: AccessTokenFacade) : Repo\n                 val mappedPermissions = mapPermissions() ?: let {\n                     context.status = FAILED\n                     context.append(\"Unknown permission shortcuts (${permissions.toCharArray().joinToString()})\")\n-                    context.append(\"Available options (${RoutePermission.values().joinToString { perm -> perm.shortcut }})\")\n+                    context.append(\"Available options (${RoutePermission.entries.joinToString { perm -> perm.shortcut }})\")\n                     return\n                 }\n \n@@ -89,7 +89,7 @@ internal class RouteRemove(private val accessTokenFacade: AccessTokenFacade) : R\n     override fun execute(context: CommandContext) {\n         accessTokenFacade.getAccessToken(name)\n             ?.also { token ->\n-                RoutePermission.values().forEach { accessTokenFacade.deleteRoute(token.identifier, Route(path, it)) }\n+                RoutePermission.entries.forEach { accessTokenFacade.deleteRoute(token.identifier, Route(path, it)) }\n                 context.append(\"Routes of token $name has been updated\")\n             }\n             ?: run {"
        },
        {
          "filename": "reposilite-backend/src/test/kotlin/com/reposilite/SharedSpecification.kt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -23,5 +23,5 @@ internal fun assertCollectionsEquals(actual: Collection<Any?>, expected: Collect\n         return\n     }\n \n-    assertThat(actual.sortedBy { it.toString() }).isEqualTo(expected.sortedBy { it.toString() }) // pretty printing\n+    assertThat(actual.sortedBy { it.toString() }).containsExactlyElementsOf(expected.sortedBy { it.toString() }) // pretty printing\n }"
        },
        {
          "filename": "reposilite-backend/src/test/kotlin/com/reposilite/storage/LocationTest.kt",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -17,9 +17,10 @@\n package com.reposilite.storage\n \n import com.reposilite.storage.api.Location\n+import java.io.File\n+import java.nio.file.Path\n import org.assertj.core.api.Assertions.assertThat\n import org.junit.jupiter.api.Test\n-import panda.std.ResultAssertions.assertError\n \n class LocationTest {\n \n@@ -33,9 +34,10 @@ class LocationTest {\n     }\n \n     @Test\n-    fun `should drop corrupted paths`() {\n-        assertError(Location.of(\"../artifact\").toPath())\n-        assertError(Location.of(\"C:/artifact\").toPath())\n+    fun `should normalize corrupted paths`() {\n+        assertThat(Location.of(Path.of(\"../../artifact\")).toPath().get().toString()).isEqualTo(\"artifact\")\n+        assertThat(Location.of(Path.of(\"C:/artifact\")).toPath().get().toString()).isEqualTo(\"artifact\")\n+        assertThat(Location.of(\"artifact\").resolve(\"../../root\").toPath().get().toString()).isEqualTo(\"artifact\" + File.separator + \"root\")\n     }\n \n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9196d7b775aefacdea27a72e4b21ce68d3302c68",
            "date": "2025-01-02T21:18:23Z",
            "author_login": "dzikoysk"
          },
          {
            "sha": "f1a18326abefe80c604c1a82ad3a60bc3a64315a",
            "date": "2025-01-02T21:10:20Z",
            "author_login": "dzikoysk"
          },
          {
            "sha": "b09720f96fa9c5634bde32f15e81b7f181223702",
            "date": "2025-01-02T21:09:35Z",
            "author_login": "dzikoysk"
          },
          {
            "sha": "3b3a52745c93cd4460e4a98d6ed583594a1769ac",
            "date": "2025-01-02T20:40:31Z",
            "author_login": "dzikoysk"
          },
          {
            "sha": "b202895952dc684a1df4a6aa4e444d619ede57c4",
            "date": "2025-01-02T20:30:53Z",
            "author_login": "dzikoysk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-22",
    "description": "Reposilite is an open source, lightweight and easy-to-use repository manager for Maven based artifacts in JVM ecosystem. Reposilite v3.5.10 is affected by an Arbitrary File Read vulnerability via path traversal while serving expanded javadoc files. Reposilite has addressed this issue in version 3.5.12. There are no known workarounds for this vulnerability. This issue was discovered and reported by the GitHub Security lab and is also tracked as GHSL-2024-074.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-19T18:15:11.220",
    "last_modified": "2024-11-21T09:21:39.390",
    "fix_date": "2024-05-03T14:46:30Z"
  },
  "references": [
    {
      "url": "https://github.com/dzikoysk/reposilite/commit/e172ae4b539c822d0d6e04cf090713c7202a79d6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dzikoysk/reposilite/releases/tag/3.5.12",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dzikoysk/reposilite/security/advisories/GHSA-82j3-hf72-7x93",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dzikoysk/reposilite/releases/tag/3.5.12",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.844534",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "reposilite",
    "owner": "dzikoysk",
    "created_at": "2017-07-06T21:42:58Z",
    "updated_at": "2025-01-14T06:14:41Z",
    "pushed_at": "2025-01-03T18:45:02Z",
    "size": 120367,
    "stars": 1447,
    "forks": 194,
    "open_issues": 42,
    "watchers": 1447,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Kotlin": 788151,
      "Vue": 114279,
      "JavaScript": 99707,
      "CSS": 9452,
      "Java": 6529,
      "HTML": 4487,
      "Shell": 3298,
      "Dockerfile": 1760
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:14:43.169786"
  }
}