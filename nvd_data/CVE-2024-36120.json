{
  "cve_id": "CVE-2024-36120",
  "github_data": {
    "repository": "ben-sb/javascript-deobfuscator",
    "fix_commit": "630d3caec83d5f31c5f7a07e6fadf613d06699d6",
    "related_commits": [
      "630d3caec83d5f31c5f7a07e6fadf613d06699d6",
      "630d3caec83d5f31c5f7a07e6fadf613d06699d6"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "630d3caec83d5f31c5f7a07e6fadf613d06699d6",
      "commit_date": "2024-05-31T09:53:30Z",
      "author": {
        "login": "ben-sb",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: replaced expression simplification with approach from other deobfuscator",
        "length": 77,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 322,
        "additions": 232,
        "deletions": 90
      },
      "files": [
        {
          "filename": "src/modifications/expressions/expressionSimplifier.ts",
          "status": "modified",
          "additions": 232,
          "deletions": 90,
          "patch": "@@ -5,6 +5,36 @@ import TraversalHelper from '../../helpers/traversalHelper';\n \n export default class ExpressionSimplifier extends Modification {\n     private readonly types = new Set(['BinaryExpression', 'UnaryExpression']);\n+    private static readonly RESOLVABLE_UNARY_OPERATORS: Set<string> = new Set([\n+        '-',\n+        '+',\n+        '!',\n+        '~',\n+        'typeof',\n+        'void'\n+    ]);\n+    private static readonly RESOLVABLE_BINARY_OPERATORS: Set<string> = new Set([\n+        '==',\n+        '!=',\n+        '===',\n+        '!==',\n+        '<',\n+        '<=',\n+        '>',\n+        '>=',\n+        '<<',\n+        '>>',\n+        '>>>',\n+        '+',\n+        '-',\n+        '*',\n+        '/',\n+        '%',\n+        '**',\n+        '|',\n+        '^',\n+        '&'\n+    ]);\n \n     /**\n      * Creates a new modification.\n@@ -47,140 +77,252 @@ export default class ExpressionSimplifier extends Modification {\n     private simplifyExpression(expression: Shift.Expression): Shift.Expression {\n         switch (expression.type) {\n             case 'BinaryExpression':\n-                return this.simplifyBinaryExpression(expression);\n+                return this.simplifyBinaryExpression(expression) || expression;\n \n             case 'UnaryExpression':\n-                return this.simplifyUnaryExpression(expression);\n+                return this.simplifyUnaryExpression(expression) || expression;\n \n             default:\n                 return expression;\n         }\n     }\n \n+    /**\n+     * Attempts to simplify a unary expression node.\n+     * @param expression The unary expression node.\n+     */\n+    private simplifyUnaryExpression(expression: Shift.UnaryExpression): Shift.Expression | undefined {\n+        if (!ExpressionSimplifier.RESOLVABLE_UNARY_OPERATORS.has(expression.operator)) {\n+            return expression;\n+        } else if (expression.operator == '-' && expression.operand.type == 'LiteralNumericExpression') {\n+            return expression; // avoid trying to simplify negative numbers\n+        }\n+\n+        const argument = this.simplifyExpression(expression.operand);\n+\n+        if (this.isResolvableExpression(argument)) {\n+            const argumentValue = this.getResolvableExpressionValue(argument);\n+            const value = this.applyUnaryOperation(\n+                expression.operator as ResolvableUnaryOperator,\n+                argumentValue\n+            );\n+            return this.convertValueToExpression(value);\n+        } else {\n+            return expression;\n+        }\n+    }\n+\n     /**\n      * Attempts to simplify a binary expression node.\n      * @param expression The binary expression node.\n      */\n-    private simplifyBinaryExpression(expression: Shift.BinaryExpression): Shift.Expression {\n+    private simplifyBinaryExpression(expression: Shift.BinaryExpression): Shift.Expression | undefined {\n+        if (\n+            !expression.left.type.endsWith('Expression') ||\n+            !ExpressionSimplifier.RESOLVABLE_BINARY_OPERATORS.has(expression.operator)\n+        ) {\n+            return undefined;\n+        }\n+\n         const left = this.simplifyExpression(expression.left);\n         const right = this.simplifyExpression(expression.right);\n \n-        const leftValue = this.getExpressionValueAsString(left);\n-        const rightValue = this.getExpressionValueAsString(right);\n-\n-        if (leftValue != null && rightValue != null) {\n-            const code = `${leftValue} ${expression.operator} ${rightValue}`;\n-            const simplified = this.evalCodeToExpression(code);\n-            return simplified != null ? simplified : expression;\n-        } else {\n+        if (this.isResolvableExpression(left) && this.isResolvableExpression(right)) {\n+            const leftValue = this.getResolvableExpressionValue(left);\n+            const rightValue = this.getResolvableExpressionValue(right);\n+            const value = this.applyBinaryOperation(\n+                expression.operator as ResolvableBinaryOperator,\n+                leftValue,\n+                rightValue\n+            );\n+            return this.convertValueToExpression(value);\n+        } else if (expression.operator == '-' && right.type == 'UnaryExpression' && right.operator == '-' && right.operand.type == 'LiteralNumericExpression') {\n+            // convert (- -a) to +a (as long as a is a number)\n+            expression.right = right.operand;\n+            expression.operator = '+';\n             return expression;\n+        } else {\n+            return undefined;\n         }\n     }\n \n     /**\n-     * Attempts to simplify a unary expression node.\n-     * @param expression The unary expression node.\n+     * Applies a unary operation.\n+     * @param operator The operator.\n+     * @param argument The argument value.\n+     * @returns The resultant value.\n      */\n-    private simplifyUnaryExpression(expression: Shift.UnaryExpression): Shift.Expression {\n-        expression.operand = this.simplifyExpression(expression.operand);\n-        const code = this.getExpressionValueAsString(expression);\n+    private applyUnaryOperation(operator: ResolvableUnaryOperator, argument: any): any {\n+        switch (operator) {\n+            case '-':\n+                return -argument;\n+            case '+':\n+                return +argument;\n+            case '!':\n+                return !argument;\n+            case '~':\n+                return ~argument;\n+            case 'typeof':\n+                return typeof argument;\n+            case 'void':\n+                return void argument;\n+        }\n+    }\n \n-        if (code != null) {\n-            const simplified = this.evalCodeToExpression(code);\n-            return simplified != null ? simplified : expression;\n-        } else {\n-            return expression;\n+    /**\n+     * Applies a binary operation.\n+     * @param operator The resolvable binary operator.\n+     * @param left The value of the left expression.\n+     * @param right The value of the right expression.\n+     * @returns The resultant value.\n+     */\n+    private applyBinaryOperation(operator: ResolvableBinaryOperator, left: any, right: any): any {\n+        switch (operator) {\n+            case '==':\n+                return left == right;\n+            case '!=':\n+                return left != right;\n+            case '===':\n+                return left === right;\n+            case '!==':\n+                return left !== right;\n+            case '<':\n+                return left < right;\n+            case '<=':\n+                return left <= right;\n+            case '>':\n+                return left > right;\n+            case '>=':\n+                return left >= right;\n+            case '<<':\n+                return left << right;\n+            case '>>':\n+                return left >> right;\n+            case '>>>':\n+                return left >>> right;\n+            case '+':\n+                return left + right;\n+            case '-':\n+                return left - right;\n+            case '*':\n+                return left * right;\n+            case '/':\n+                return left / right;\n+            case '%':\n+                return left % right;\n+            case '**':\n+                return left ** right;\n+            case '|':\n+                return left | right;\n+            case '^':\n+                return left ^ right;\n+            case '&':\n+                return left & right;\n         }\n     }\n \n     /**\n-     * Returns the value of a node as a string, null if not possible.\n-     * @param expression The expression node.\n+     * Gets the real value from a resolvable expression.\n+     * @param expression The resolvable expression.\n+     * @returns The value.\n      */\n-    private getExpressionValueAsString(expression: Shift.Expression): string | null {\n+    private getResolvableExpressionValue(expression: ResolvableExpression): any {\n         switch (expression.type) {\n-            case 'LiteralStringExpression':\n-                const value = expression.value\n-                    .replace(/\"/g, '\\\\\"')\n-                    .replace(/\\n/g, '\\\\n')\n-                    .replace(/\\r/g, '\\\\r');\n-                return `\"${value}\"`;\n-\n             case 'LiteralNumericExpression':\n+            case 'LiteralStringExpression':\n             case 'LiteralBooleanExpression':\n-                return expression.value.toString();\n-\n-            case 'ArrayExpression':\n-                if (expression.elements.length == 0) {\n-                    return '[]';\n-                } else if (expression.elements.every(e => !e || e.type.startsWith('Literal'))) {\n-                    let content = '';\n-                    for (let i = 0; i < expression.elements.length; i++) {\n-                        if (expression.elements[i]) {\n-                            content += `${this.getExpressionValueAsString(\n-                                expression.elements[i] as Shift.Expression\n-                            )},`;\n-                        } else {\n-                            content += ',';\n-                        }\n-                    }\n-                    return `[${content.substring(0, content.length - 1)}]`;\n-                } else {\n-                    return null;\n-                }\n-\n-            case 'ObjectExpression':\n-                if (expression.properties.length == 0) {\n-                    expression.properties;\n-                    return '[]';\n-                } else {\n-                    return null;\n-                }\n-\n+                return expression.value;\n             case 'UnaryExpression':\n-                const operand = this.getExpressionValueAsString(expression.operand);\n-                return operand != null ? `${expression.operator} ${operand}` : null;\n-\n-            default:\n+                return -this.getResolvableExpressionValue(\n+                    expression.operand as Literal\n+                );\n+            case 'LiteralNullExpression':\n                 return null;\n+            case 'IdentifierExpression':\n+                return undefined;\n+            case 'ArrayExpression':\n+                return [];\n+            case 'ObjectExpression':\n+                return {};\n         }\n     }\n \n     /**\n-     * Evaluates a given piece of code and converts the result to an\n-     * expression node if possible.\n-     * @param code The code to be evaluated.\n+     * Attempts to convert a value of unknown type to an expression node.\n+     * @param value The value.\n+     * @returns The expression or undefined.\n      */\n-    private evalCodeToExpression(code: string): Shift.Expression | null {\n-        let value;\n-        try {\n-            value = eval(code);\n-        } catch (err) {\n-            return null;\n-        }\n-\n+    private convertValueToExpression(value: any): Shift.Expression | undefined {\n         switch (typeof value) {\n             case 'string':\n-                return new Shift.LiteralStringExpression({\n-                    value: value\n-                });\n-\n+                return new Shift.LiteralStringExpression({ value });\n             case 'number':\n-                return new Shift.LiteralNumericExpression({\n-                    value: value\n-                });\n-\n+                return value >= 0\n+                    ? new Shift.LiteralNumericExpression({ value })\n+                    : new Shift.UnaryExpression({ operator: '-', operand: new Shift.LiteralNumericExpression({ value: Math.abs(value) })});\n             case 'boolean':\n-                return new Shift.LiteralBooleanExpression({\n-                    value: value\n-                });\n-\n+                return new Shift.LiteralBooleanExpression({ value });\n+            case 'undefined':\n+                return new Shift.IdentifierExpression({ name: 'undefined' });\n             default:\n-                return null;\n+                return undefined;\n         }\n     }\n \n-    private isSimpleArray(array: Shift.ArrayExpression): boolean {\n-        return array.elements.every(e => !e || e.type.startsWith('Literal'));\n+    /**\n+     * Returns whether a node is a resolvable expression that can be\n+     * evaluated safely.\n+     * @param node The AST node.\n+     * @returns Whether.\n+     */\n+    private isResolvableExpression(node: Shift.Node): node is ResolvableExpression {\n+        return (\n+            this.isLiteral(node) ||\n+            (node.type == 'UnaryExpression' && node.operator == '-' && node.operand.type == 'LiteralNumericExpression') ||\n+            (node.type == 'IdentifierExpression' && node.name == 'undefined') ||\n+            (node.type == 'ArrayExpression' && node.elements.length == 0) ||\n+            (node.type == 'ObjectExpression' && node.properties.length == 0)\n+        );\n+    }\n+\n+    /**\n+     * Returns whether a node is a literal.\n+     * @param node The AST node.\n+     * @returns Whether.\n+     */\n+    private isLiteral(node: Shift.Node): node is Literal {\n+        return node.type == 'LiteralNumericExpression' || node.type == 'LiteralStringExpression' || node.type == 'LiteralBooleanExpression' || node.type == 'LiteralNullExpression';\n     }\n }\n+\n+type Literal = Shift.LiteralNumericExpression | Shift.LiteralStringExpression | Shift.LiteralBooleanExpression | Shift.LiteralNullExpression;\n+type ResolvableExpression =\n+    | Literal\n+    | (Shift.UnaryExpression & { operator: '-'; argument: Literal })\n+    | (Shift.IdentifierExpression & { name: 'undefined' })\n+    | (Shift.ArrayExpression & { elements: [] })\n+    | (Shift.ObjectExpression & { properties: [] });\n+\n+type ResolvableUnaryOperator = '-' | '+' | '!' | '~' | 'typeof' | 'void';\n+\n+type ResolvableBinaryOperator =\n+    | '=='\n+    | '!='\n+    | '==='\n+    | '!=='\n+    | '<'\n+    | '<='\n+    | '>'\n+    | '>='\n+    | '<<'\n+    | '>>'\n+    | '>>>'\n+    | '+'\n+    | '-'\n+    | '*'\n+    | '/'\n+    | '%'\n+    | '**'\n+    | '|'\n+    | '^'\n+    | '&';\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "19d9b93d27c892b5edeaf18c1ac9f4eb9764de8c",
            "date": "2025-01-23T18:16:28Z",
            "author_login": "ben-sb"
          },
          {
            "sha": "f99e035b036e99cdf597a33f02ef5562dc9b646d",
            "date": "2025-01-23T18:14:35Z",
            "author_login": "ben-sb"
          },
          {
            "sha": "92ccbe3999ffe865d3fb9d46ef8e792f51ecfb8e",
            "date": "2025-01-23T18:13:13Z",
            "author_login": "ben-sb"
          },
          {
            "sha": "aa460d696612c39a54832d6384eaf93883ff4040",
            "date": "2025-01-23T16:34:23Z",
            "author_login": "ben-sb"
          },
          {
            "sha": "d9fba9e89d66ad2e0de4bb6dfde690932fce4268",
            "date": "2025-01-23T16:33:31Z",
            "author_login": "ben-sb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "javascript-deobfuscator removes common JavaScript obfuscation techniques. In affected versions crafted payloads targeting expression simplification can lead to code execution. This issue has been patched in version 1.1.0. Users are advised to update. Users unable to upgrade should disable the expression simplification feature.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-05-31T17:15:09.317",
    "last_modified": "2024-11-21T09:21:39.810",
    "fix_date": "2024-05-31T09:53:30Z"
  },
  "references": [
    {
      "url": "https://github.com/ben-sb/javascript-deobfuscator/commit/630d3caec83d5f31c5f7a07e6fadf613d06699d6",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/ben-sb/javascript-deobfuscator/security/advisories/GHSA-9p6p-8v9r-8c9m",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/ben-sb/javascript-deobfuscator/commit/630d3caec83d5f31c5f7a07e6fadf613d06699d6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/ben-sb/javascript-deobfuscator/security/advisories/GHSA-9p6p-8v9r-8c9m",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.330825",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "javascript-deobfuscator",
    "owner": "ben-sb",
    "created_at": "2021-01-24T23:51:59Z",
    "updated_at": "2025-01-25T12:44:19Z",
    "pushed_at": "2025-01-23T18:16:32Z",
    "size": 1513,
    "stars": 835,
    "forks": 116,
    "open_issues": 18,
    "watchers": 835,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 72824,
      "JavaScript": 2040
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:17:41.524670"
  }
}