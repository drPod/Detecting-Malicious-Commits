{
  "cve_id": "CVE-2024-36400",
  "github_data": {
    "repository": "viz-rs/nano-id",
    "fix_commit": "a9022772b2f1ce38929b5b81eccc670ac9d3ab23",
    "related_commits": [
      "a9022772b2f1ce38929b5b81eccc670ac9d3ab23",
      "a9022772b2f1ce38929b5b81eccc670ac9d3ab23"
    ],
    "patch_url": "https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23.patch",
    "fix_commit_details": {
      "sha": "a9022772b2f1ce38929b5b81eccc670ac9d3ab23",
      "commit_date": "2024-06-02T22:28:23Z",
      "author": {
        "login": "fundon",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #10 from viz-rs/fix-security",
        "length": 61,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 49,
        "additions": 39,
        "deletions": 10
      },
      "files": [
        {
          "filename": "Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n [package]\n-version = \"0.3.3\"\n+version = \"0.4.0\"\n name = \"nano-id\"\n edition = \"2021\"\n authors = [\"Fangdun Tsai <cfddream@gmail.com>\"]"
        },
        {
          "filename": "src/lib.rs",
          "status": "modified",
          "additions": 38,
          "deletions": 9,
          "patch": "@@ -5,23 +5,30 @@ macro_rules! gen {\n     ($mod:tt, $len:tt, $alphabet:tt) => {\n         #[doc = concat!(\" Nanoid with alphabet table `\", stringify!($alphabet), \"`\")]\n         mod $mod {\n-            pub const MASK: usize = $len - 1;\n+            pub const MASK: usize = ($len as usize).next_power_of_two() - 1;\n             pub const ALPHABET: &'static [u8; $len] = $alphabet;\n         }\n \n         #[doc = concat!(\" Nanoid with \", stringify!($mod))]\n         #[must_use]\n         pub fn $mod<const N: usize>() -> String {\n-            let mut bytes = [0u8; N];\n+            let mut bytes = vec![0u8; 8 * N / 5];\n+            let mut id = String::with_capacity(N);\n \n-            ::getrandom::getrandom(&mut bytes)\n-                .unwrap_or_else(|err| panic!(\"could not retreive random bytes: {err}\"));\n+            loop {\n+                ::getrandom::getrandom(&mut bytes)\n+                    .unwrap_or_else(|err| panic!(\"could not retreive random bytes: {err}\"));\n \n-            bytes\n-                .iter_mut()\n-                .for_each(|b| *b = $mod::ALPHABET[*b as usize & $mod::MASK]);\n-\n-            String::from_utf8_lossy(&bytes).to_string()\n+                for byte in &bytes {\n+                    let idx = *byte as usize & $mod::MASK;\n+                    if idx < $len {\n+                        id.push($mod::ALPHABET[idx] as char)\n+                    }\n+                    if id.len() == N {\n+                        return id;\n+                    }\n+                }\n+            }\n         }\n     };\n }\n@@ -87,4 +94,26 @@ mod tests {\n         println!(\"{}\", &id);\n         assert_eq!(id.len(), 21);\n     }\n+\n+    #[test]\n+    #[cfg(feature = \"base62\")]\n+    fn symbols() {\n+        use std::collections::BTreeMap;\n+\n+        let mut counts = BTreeMap::new();\n+\n+        for _ in 0..1_000_000 {\n+            let id = base62::<10>();\n+            for c in id.chars() {\n+                *counts.entry(c).or_insert(0) += 1;\n+            }\n+        }\n+\n+        println!(\"{} symbols generated\", counts.len());\n+        for (c, count) in &counts {\n+            println!(\"{}: {}\", c, count);\n+        }\n+\n+        assert_eq!(counts.len(), 62);\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a9022772b2f1ce38929b5b81eccc670ac9d3ab23",
            "date": "2024-06-02T22:28:23Z",
            "author_login": "fundon"
          },
          {
            "sha": "2209b317ae4ea4caa982a09b0a8e5c0621dd4f83",
            "date": "2024-06-02T22:22:29Z",
            "author_login": "fundon"
          },
          {
            "sha": "9a5a094e121aab0d1f72549bc9d167aa1118b215",
            "date": "2024-06-01T21:24:39Z",
            "author_login": "fundon"
          },
          {
            "sha": "d8d2113aa68095ca129c32276ea883ca6324cdc5",
            "date": "2023-11-19T22:36:24Z",
            "author_login": "fundon"
          },
          {
            "sha": "a1ece6bbadad6b05f7e667a182a830b0c5ab27f0",
            "date": "2023-09-17T04:23:24Z",
            "author_login": "fundon"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
    "cwe_id": "CWE-331",
    "description": "nano-id is a unique string ID generator for Rust. Affected versions of the nano-id crate incorrectly generated IDs using a reduced character set in the `nano_id::base62` and `nano_id::base58` functions. Specifically, the `base62` function used a character set of 32 symbols instead of the intended 62 symbols, and the `base58` function used a character set of 16 symbols instead of the intended 58 symbols. Additionally, the `nano_id::gen` macro is also affected when a custom character set that is not a power of 2 in size is specified. It should be noted that `nano_id::base64` is not affected by this vulnerability. This can result in a significant reduction in entropy, making the generated IDs predictable and vulnerable to brute-force attacks when the IDs are used in security-sensitive contexts such as session tokens or unique identifiers. The vulnerability is fixed in 0.4.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-04T15:15:46.980",
    "last_modified": "2024-11-21T09:22:06.187",
    "fix_date": "2024-06-02T22:28:23Z"
  },
  "references": [
    {
      "url": "https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/viz-rs/nano-id/security/advisories/GHSA-9hc7-6w9r-wj94",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/viz-rs/nano-id/security/advisories/GHSA-9hc7-6w9r-wj94",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.336281",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nano-id",
    "owner": "viz-rs",
    "created_at": "2021-04-06T18:28:07Z",
    "updated_at": "2024-10-23T19:32:18Z",
    "pushed_at": "2024-06-02T22:28:26Z",
    "size": 38,
    "stars": 12,
    "forks": 6,
    "open_issues": 1,
    "watchers": 12,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Rust": 2894
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T22:08:02.844953"
  }
}