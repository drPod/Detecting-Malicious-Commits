{
  "cve_id": "CVE-2024-37153",
  "github_data": {
    "repository": "evmos/evmos",
    "fix_commit": "478b7a62e7af57a70cf3a01126c7f5a89bee69d7",
    "related_commits": [
      "478b7a62e7af57a70cf3a01126c7f5a89bee69d7",
      "478b7a62e7af57a70cf3a01126c7f5a89bee69d7"
    ],
    "patch_url": "https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7.patch",
    "fix_commit_details": {
      "sha": "478b7a62e7af57a70cf3a01126c7f5a89bee69d7",
      "commit_date": "2024-05-31T14:26:56Z",
      "author": {
        "login": "Vvaradinov",
        "type": "User",
        "stats": {
          "total_commits": 176,
          "average_weekly_commits": 1.0173410404624277,
          "total_additions": 259229,
          "total_deletions": 58592,
          "weeks_active": 59
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-xgr7-jgq3-mhmc",
        "length": 1167,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 322,
        "additions": 310,
        "deletions": 12
      },
      "files": [
        {
          "filename": "precompiles/ics20/ics20.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@ import (\n \t\"github.com/evmos/evmos/v18/precompiles/authorization\"\n \tcmn \"github.com/evmos/evmos/v18/precompiles/common\"\n \ttransferkeeper \"github.com/evmos/evmos/v18/x/ibc/transfer/keeper\"\n+\tstakingkeeper \"github.com/evmos/evmos/v18/x/staking/keeper\"\n )\n \n var _ vm.PrecompiledContract = &Precompile{}\n@@ -28,13 +29,15 @@ var f embed.FS\n \n type Precompile struct {\n \tcmn.Precompile\n+\tstakingKeeper  stakingkeeper.Keeper\n \ttransferKeeper transferkeeper.Keeper\n \tchannelKeeper  channelkeeper.Keeper\n }\n \n // NewPrecompile creates a new ICS-20 Precompile instance as a\n // PrecompiledContract interface.\n func NewPrecompile(\n+\tstakingKeeper stakingkeeper.Keeper,\n \ttransferKeeper transferkeeper.Keeper,\n \tchannelKeeper channelkeeper.Keeper,\n \tauthzKeeper authzkeeper.Keeper,\n@@ -59,6 +62,7 @@ func NewPrecompile(\n \t\t},\n \t\ttransferKeeper: transferKeeper,\n \t\tchannelKeeper:  channelKeeper,\n+\t\tstakingKeeper:  stakingKeeper,\n \t}, nil\n }\n "
        },
        {
          "filename": "precompiles/ics20/tx.go",
          "status": "modified",
          "additions": 16,
          "deletions": 8,
          "patch": "@@ -4,12 +4,16 @@\n package ics20\n \n import (\n+\t\"fmt\"\n+\n \terrorsmod \"cosmossdk.io/errors\"\n+\n \tsdk \"github.com/cosmos/cosmos-sdk/types\"\n \tchanneltypes \"github.com/cosmos/ibc-go/v7/modules/core/04-channel/types\"\n \t\"github.com/ethereum/go-ethereum/accounts/abi\"\n \t\"github.com/ethereum/go-ethereum/common\"\n \t\"github.com/ethereum/go-ethereum/core/vm\"\n+\t\"github.com/evmos/evmos/v18/x/evm/statedb\"\n )\n \n const (\n@@ -37,14 +41,12 @@ func (p Precompile) Transfer(\n \t\treturn nil, errorsmod.Wrapf(channeltypes.ErrChannelNotFound, \"port ID (%s) channel ID (%s)\", msg.SourcePort, msg.SourceChannel)\n \t}\n \n-\t// The provided sender address should always be equal to the origin address.\n-\t// In case the contract caller address is the same as the sender address provided,\n-\t// update the sender address to be equal to the origin address.\n-\t// Otherwise, if the provided delegator address is different from the origin address,\n-\t// return an error because is a forbidden operation\n-\tsender, err = CheckOriginAndSender(contract, origin, sender)\n-\tif err != nil {\n-\t\treturn nil, err\n+\t// isCallerSender is true when the contract caller is the same as the sender\n+\tisCallerSender := contract.CallerAddress == sender\n+\n+\t// If the contract caller is not the same as the sender, the sender must be the origin\n+\tif !isCallerSender && origin != sender {\n+\t\treturn nil, fmt.Errorf(ErrDifferentOriginFromSender, origin.String(), sender.String())\n \t}\n \n \t// no need to have authorization when the contract caller is the same as origin (owner of funds)\n@@ -78,5 +80,11 @@ func (p Precompile) Transfer(\n \t\treturn nil, err\n \t}\n \n+\t// NOTE: This ensures that the changes in the bank keeper are correctly mirrored to the EVM stateDB.\n+\t// This prevents the stateDB from overwriting the changed balance in the bank keeper when committing the EVM state.\n+\tif isCallerSender && msg.Token.Denom == p.stakingKeeper.BondDenom(ctx) {\n+\t\tstateDB.(*statedb.StateDB).SubBalance(contract.CallerAddress, msg.Token.Amount.BigInt())\n+\t}\n+\n \treturn method.Outputs.Pack(res.Sequence)\n }"
        },
        {
          "filename": "precompiles/ics20/types.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -374,7 +374,7 @@ func convertToAllocation(allocs []transfertypes.Allocation) []cmn.ICS20Allocatio\n // CheckOriginAndSender ensures the correct sender is being used.\n func CheckOriginAndSender(contract *vm.Contract, origin common.Address, sender common.Address) (common.Address, error) {\n \tif contract.CallerAddress == sender {\n-\t\treturn origin, nil\n+\t\treturn sender, nil\n \t} else if origin != sender {\n \t\treturn common.Address{}, fmt.Errorf(ErrDifferentOriginFromSender, origin.String(), sender.String())\n \t}"
        },
        {
          "filename": "precompiles/ics20/utils_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -273,7 +273,7 @@ func (s *PrecompileTestSuite) NewTestChainWithValSet(coord *ibctesting.Coordinat\n \ts.app.FeeMarketKeeper.SetBlockGasWanted(s.ctx, 0)\n \ts.app.FeeMarketKeeper.SetTransientBlockGasWanted(s.ctx, 0)\n \n-\tprecompile, err := ics20.NewPrecompile(s.app.TransferKeeper, s.app.IBCKeeper.ChannelKeeper, s.app.AuthzKeeper)\n+\tprecompile, err := ics20.NewPrecompile(s.app.StakingKeeper, s.app.TransferKeeper, s.app.IBCKeeper.ChannelKeeper, s.app.AuthzKeeper)\n \ts.Require().NoError(err)\n \ts.precompile = precompile\n "
        },
        {
          "filename": "tests/nix_tests/hardhat/contracts/ICS20FromContract.sol",
          "status": "added",
          "additions": 62,
          "deletions": 0,
          "patch": "@@ -0,0 +1,62 @@\n+// SPDX-License-Identifier: LGPL-3.0-only\n+pragma solidity >=0.8.18;\n+\n+import \"./evmos/ics20/ICS20I.sol\";\n+import \"./evmos/common/Types.sol\";\n+\n+\n+contract ICS20FromContract {\n+    int64 public counter;\n+\n+    function balanceOfContract() public view returns (uint256) {\n+        return address(this).balance;\n+    }\n+\n+    function deposit() public payable {}\n+\n+    function transfer(\n+        string memory sourcePort,\n+        string memory sourceChannel,\n+        string memory denom,\n+        uint256 amount,\n+        string memory receiver\n+    ) external {\n+        counter += 1;\n+        Height memory timeoutHeight =  Height(100, 100);\n+        ICS20_CONTRACT.transfer(\n+            sourcePort,\n+            sourceChannel,\n+            denom,\n+            amount,\n+            address(this),\n+            receiver,\n+            timeoutHeight,\n+            0,\n+            \"\"\n+        );\n+        counter -= 1;\n+    }\n+\n+    function transferFromEOA(\n+        string memory sourcePort,\n+        string memory sourceChannel,\n+        string memory denom,\n+        uint256 amount,\n+        string memory receiver\n+    ) external {\n+        counter += 1;\n+        Height memory timeoutHeight =  Height(100, 100);\n+        ICS20_CONTRACT.transfer(\n+            sourcePort,\n+            sourceChannel,\n+            denom,\n+            amount,\n+            msg.sender,\n+            receiver,\n+            timeoutHeight,\n+            0,\n+            \"\"\n+        );\n+        counter -= 1;\n+    }\n+}"
        },
        {
          "filename": "tests/nix_tests/test_ics20_precompile.py",
          "status": "added",
          "additions": 208,
          "deletions": 0,
          "patch": "@@ -0,0 +1,208 @@\n+import re\n+\n+import pytest\n+from .ibc_utils import EVMOS_IBC_DENOM, assert_ready, get_balance, prepare_network\n+from .network import Evmos\n+from .utils import (\n+    ADDRS,\n+    CONTRACTS,\n+    KEYS,\n+    deploy_contract,\n+    get_precompile_contract,\n+    send_transaction,\n+    wait_for_fn,\n+)\n+\n+\n+@pytest.fixture(scope=\"module\", params=[\"evmos\", \"evmos-rocksdb\"])\n+def ibc(request, tmp_path_factory):\n+    \"\"\"\n+    Prepares the network.\n+    \"\"\"\n+    name = \"ibc-precompile\"\n+    evmos_build = request.param\n+    path = tmp_path_factory.mktemp(name)\n+    network = prepare_network(path, name, [evmos_build, \"chainmain\"])\n+    yield from network\n+\n+\n+def test_ibc_transfer_from_contract(ibc):\n+    \"\"\"Test ibc transfer from contract\"\"\"\n+    assert_ready(ibc)\n+\n+    evmos: Evmos = ibc.chains[\"evmos\"]\n+    w3 = evmos.w3\n+\n+    dst_addr = ibc.chains[\"chainmain\"].cosmos_cli().address(\"signer2\")\n+    amt = 1000000000000000000\n+    src_denom = \"aevmos\"\n+    gas_limit = 200_000\n+\n+    pc = get_precompile_contract(ibc.chains[\"evmos\"].w3, \"ICS20I\")\n+    evmos_gas_price = ibc.chains[\"evmos\"].w3.eth.gas_price\n+\n+    src_adr = ibc.chains[\"evmos\"].cosmos_cli().address(\"signer2\")\n+\n+    # Deployment of contracts and initial checks\n+    eth_contract, tx_receipt = deploy_contract(w3, CONTRACTS[\"ICS20FromContract\"])\n+    assert tx_receipt.status == 1\n+\n+    counter = eth_contract.functions.counter().call()\n+    assert counter == 0\n+\n+    # Approve the contract to spend the src_denom\n+    approve_tx = pc.functions.approve(\n+        eth_contract.address, [[\"transfer\", \"channel-0\", [[src_denom, amt]], []]]\n+    ).build_transaction(\n+        {\n+            \"from\": ADDRS[\"signer2\"],\n+            \"gasPrice\": evmos_gas_price,\n+            \"gas\": gas_limit,\n+        }\n+    )\n+    tx_receipt = send_transaction(ibc.chains[\"evmos\"].w3, approve_tx, KEYS[\"signer2\"])\n+    assert tx_receipt.status == 1\n+\n+    def check_allowance_set():\n+        new_allowance = pc.functions.allowance(\n+            eth_contract.address, ADDRS[\"signer2\"]\n+        ).call()\n+        return new_allowance != []\n+\n+    wait_for_fn(\"allowance has changed\", check_allowance_set)\n+\n+    src_amount_evmos_prev = get_balance(ibc.chains[\"evmos\"], src_adr, src_denom)\n+    # Deposit into the contract\n+    deposit_tx = eth_contract.functions.deposit().build_transaction(\n+        {\n+            \"from\": ADDRS[\"signer2\"],\n+            \"value\": amt,\n+            \"gas\": gas_limit,\n+            \"gasPrice\": evmos_gas_price,\n+        }\n+    )\n+    deposit_receipt = send_transaction(\n+        ibc.chains[\"evmos\"].w3, deposit_tx, KEYS[\"signer2\"]\n+    )\n+    assert deposit_receipt.status == 1\n+    fees = deposit_receipt.gasUsed * evmos_gas_price\n+\n+    def check_contract_balance():\n+        new_contract_balance = eth_contract.functions.balanceOfContract().call()\n+        return new_contract_balance > 0\n+\n+    wait_for_fn(\"contract balance change\", check_contract_balance)\n+\n+    # Calling the actual transfer function on the custom contract\n+    send_tx = eth_contract.functions.transfer(\n+        \"transfer\", \"channel-0\", src_denom, amt, dst_addr\n+    ).build_transaction(\n+        {\n+            \"from\": ADDRS[\"signer2\"],\n+            \"gasPrice\": evmos_gas_price,\n+            \"gas\": gas_limit,\n+        }\n+    )\n+    receipt = send_transaction(ibc.chains[\"evmos\"].w3, send_tx, KEYS[\"signer2\"])\n+    assert receipt.status == 1\n+    fees += receipt.gasUsed * evmos_gas_price\n+\n+    final_dest_balance = 0\n+\n+    def check_dest_balance():\n+        nonlocal final_dest_balance\n+        final_dest_balance = get_balance(\n+            ibc.chains[\"chainmain\"], dst_addr, EVMOS_IBC_DENOM\n+        )\n+        return final_dest_balance > 0\n+\n+    # check balance of destination\n+    wait_for_fn(\"destination balance change\", check_dest_balance)\n+    assert final_dest_balance == amt\n+\n+    # check balance of contract\n+    final_contract_balance = eth_contract.functions.balanceOfContract().call()\n+    assert final_contract_balance == 0\n+\n+    src_amount_evmos = get_balance(ibc.chains[\"evmos\"], src_adr, src_denom)\n+    assert src_amount_evmos == src_amount_evmos_prev - amt - fees\n+\n+    # check counter of contract\n+    counter_after = eth_contract.functions.counter().call()\n+    assert counter_after == 0\n+\n+\n+def test_ibc_transfer_from_eoa_through_contract(ibc):\n+    \"\"\"Test ibc transfer from contract\"\"\"\n+    assert_ready(ibc)\n+\n+    evmos: Evmos = ibc.chains[\"evmos\"]\n+    w3 = evmos.w3\n+\n+    amt = 1000000000000000000\n+    src_denom = \"aevmos\"\n+    gas_limit = 200_000\n+    evmos_gas_price = ibc.chains[\"evmos\"].w3.eth.gas_price\n+\n+    dst_addr = ibc.chains[\"chainmain\"].cosmos_cli().address(\"signer2\")\n+    src_adr = ibc.chains[\"evmos\"].cosmos_cli().address(\"signer2\")\n+\n+    # Deployment of contracts and initial checks\n+    eth_contract, tx_receipt = deploy_contract(w3, CONTRACTS[\"ICS20FromContract\"])\n+    assert tx_receipt.status == 1\n+\n+    counter = eth_contract.functions.counter().call()\n+    assert counter == 0\n+\n+    pc = get_precompile_contract(ibc.chains[\"evmos\"].w3, \"ICS20I\")\n+    # Approve the contract to spend the src_denom\n+    approve_tx = pc.functions.approve(\n+        eth_contract.address, [[\"transfer\", \"channel-0\", [[src_denom, amt]], []]]\n+    ).build_transaction(\n+        {\n+            \"from\": ADDRS[\"signer2\"],\n+            \"gasPrice\": evmos_gas_price,\n+            \"gas\": gas_limit,\n+        }\n+    )\n+    tx_receipt = send_transaction(ibc.chains[\"evmos\"].w3, approve_tx, KEYS[\"signer2\"])\n+    assert tx_receipt.status == 1\n+\n+    def check_allowance_set():\n+        new_allowance = pc.functions.allowance(\n+            eth_contract.address, ADDRS[\"signer2\"]\n+        ).call()\n+        return new_allowance != []\n+\n+    wait_for_fn(\"allowance has changed\", check_allowance_set)\n+\n+    src_starting_balance = get_balance(ibc.chains[\"evmos\"], src_adr, \"aevmos\")\n+    dest_starting_balance = get_balance(\n+        ibc.chains[\"chainmain\"], dst_addr, EVMOS_IBC_DENOM\n+    )\n+    # Calling the actual transfer function on the custom contract\n+    send_tx = eth_contract.functions.transferFromEOA(\n+        \"transfer\", \"channel-0\", src_denom, amt, dst_addr\n+    ).build_transaction(\n+        {\"from\": ADDRS[\"signer2\"], \"gasPrice\": evmos_gas_price, \"gas\": gas_limit}\n+    )\n+    receipt = send_transaction(ibc.chains[\"evmos\"].w3, send_tx, KEYS[\"signer2\"])\n+    assert receipt.status == 1\n+    fees = receipt.gasUsed * evmos_gas_price\n+\n+    final_dest_balance = dest_starting_balance\n+    def check_dest_balance():\n+        nonlocal final_dest_balance\n+        final_dest_balance = get_balance(\n+            ibc.chains[\"chainmain\"], dst_addr, EVMOS_IBC_DENOM\n+        )\n+        return final_dest_balance > dest_starting_balance\n+\n+    wait_for_fn(\"destination balance change\", check_dest_balance)\n+    assert final_dest_balance == dest_starting_balance + amt\n+\n+    src_final_amount_evmos = get_balance(ibc.chains[\"evmos\"], src_adr, src_denom)\n+    assert src_final_amount_evmos == src_starting_balance - amt - fees\n+\n+    counter_after = eth_contract.functions.counter().call()\n+    assert counter_after == 0"
        },
        {
          "filename": "tests/nix_tests/test_precompiles.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -67,7 +67,7 @@ def test_ibc_transfer(ibc):\n \n     assert receipt.status == 1\n     # check gas used\n-    assert receipt.gasUsed == 48184\n+    assert receipt.gasUsed == 49307\n \n     # check gas estimation is accurate\n     assert receipt.gasUsed == gas_estimation"
        },
        {
          "filename": "tests/nix_tests/utils.py",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n import configparser\n import json\n import os\n+import requests\n import socket\n import subprocess\n import sys\n@@ -15,6 +16,7 @@\n from dotenv import load_dotenv\n from eth_account import Account\n from hexbytes import HexBytes\n+from pystarport import ports\n from pystarport.cluster import SUPERVISOR_CONFIG_FILE\n from web3 import Web3\n from web3._utils.transactions import fill_nonce, fill_transaction_defaults\n@@ -40,6 +42,7 @@\n     \"TestChainID\": \"ChainID.sol\",\n     \"Mars\": \"Mars.sol\",\n     \"StateContract\": \"StateContract.sol\",\n+    \"ICS20FromContract\": \"ICS20FromContract.sol\",\n     \"ICS20I\": \"evmos/ics20/ICS20I.sol\",\n     \"DistributionI\": \"evmos/distribution/DistributionI.sol\",\n     \"StakingI\": \"evmos/staking/StakingI.sol\",\n@@ -539,3 +542,16 @@ def erc20_balance(w3, erc20_contract_addr, addr):\n     info = json.loads(CONTRACTS[\"IERC20\"].read_text())\n     contract = w3.eth.contract(erc20_contract_addr, abi=info[\"abi\"])\n     return contract.functions.balanceOf(addr).call()\n+\n+\n+def debug_trace_tx(evmos, tx_hash: str):\n+    url = f\"http://127.0.0.1:{ports.evmrpc_port(evmos.base_port(0))}\"\n+    params = {\n+        \"method\": \"debug_traceTransaction\",\n+        \"params\": [tx_hash, {\"tracer\": \"callTracer\"}],\n+        \"id\": 1,\n+        \"jsonrpc\": \"2.0\",\n+    }\n+    rsp = requests.post(url, json=params)\n+    assert rsp.status_code == 200\n+    return rsp.json()[\"result\"]"
        },
        {
          "filename": "x/evm/keeper/precompiles.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -70,7 +70,7 @@ func AvailablePrecompiles(\n \t\tpanic(fmt.Errorf(\"failed to instantiate distribution precompile: %w\", err))\n \t}\n \n-\tibcTransferPrecompile, err := ics20precompile.NewPrecompile(transferKeeper, channelKeeper, authzKeeper)\n+\tibcTransferPrecompile, err := ics20precompile.NewPrecompile(stakingKeeper, transferKeeper, channelKeeper, authzKeeper)\n \tif err != nil {\n \t\tpanic(fmt.Errorf(\"failed to instantiate ICS20 precompile: %w\", err))\n \t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cb46d96dae36a26b3cd11570421c2edc2e804bd4",
            "date": "2025-01-13T13:35:37Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "116a676f8e9c4f4847a05fe7a3fbe627956f44fe",
            "date": "2025-01-13T08:22:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "392b2279dafa5182b3a5299f165a2e035d031e0a",
            "date": "2025-01-10T10:48:35Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9274fcaddad99ca39807a4e85d5e4c10585dc78a",
            "date": "2025-01-09T13:58:02Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1a507391b54073793be7bc4e6b14ce8d529054ae",
            "date": "2025-01-07T09:00:46Z",
            "author_login": "xujk-byte"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-670",
    "description": "Evmos is the Ethereum Virtual Machine (EVM) Hub on the Cosmos Network. There is an issue with how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the sender parameter in an ICS20 transfer using the ICS20 precompile. This is in essence the \"infinite money glitch\" allowing contracts to double the supply of Evmos after each transaction.The issue has been patched in versions >=V18.1.0. ",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-06T19:15:58.403",
    "last_modified": "2024-11-21T09:23:18.850",
    "fix_date": "2024-05-31T14:26:56Z"
  },
  "references": [
    {
      "url": "https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.348651",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "evmos",
    "owner": "evmos",
    "created_at": "2021-09-28T09:13:46Z",
    "updated_at": "2025-01-13T13:35:42Z",
    "pushed_at": "2025-01-14T13:36:57Z",
    "size": 197487,
    "stars": 1680,
    "forks": 878,
    "open_issues": 23,
    "watchers": 1680,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 4931570,
      "Python": 413227,
      "Solidity": 118737,
      "Jsonnet": 56049,
      "JavaScript": 47253,
      "Shell": 44165,
      "Nix": 23467,
      "Makefile": 21112,
      "Batchfile": 2623,
      "Dockerfile": 1717
    },
    "commit_activity": {
      "total_commits_last_year": 455,
      "avg_commits_per_week": 8.75,
      "days_active_last_year": 185
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:51:27.088637"
  }
}