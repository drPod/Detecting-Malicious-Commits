{
  "cve_id": "CVE-2024-37157",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "5b8cf11b69e05d5c058c1148ec69ec309491fa6e",
    "related_commits": [
      "5b8cf11b69e05d5c058c1148ec69ec309491fa6e",
      "67e78086035cec494b15ce79342a0cb9052c2d95",
      "5b8cf11b69e05d5c058c1148ec69ec309491fa6e",
      "67e78086035cec494b15ce79342a0cb9052c2d95"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "5b8cf11b69e05d5c058c1148ec69ec309491fa6e",
      "commit_date": "2024-05-31T02:52:53Z",
      "author": {
        "login": "Drenmi",
        "type": "User",
        "stats": {
          "total_commits": 237,
          "average_weekly_commits": 0.3410071942446043,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 85
        }
      },
      "commit_message": {
        "title": "SECURITY: Add FastImage SSRF safe freedom patch",
        "length": 47,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 141,
        "additions": 42,
        "deletions": 99
      },
      "files": [
        {
          "filename": "lib/cooked_processor_mixin.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -193,7 +193,7 @@ def get_size(url)\n     if upload && upload.width && upload.width > 0\n       @size_cache[url] = [upload.width, upload.height]\n     else\n-      @size_cache[url] = FinalDestination::FastImage.size(absolute_url)\n+      @size_cache[url] = FastImage.size(absolute_url)\n     end\n   rescue Zlib::BufError, URI::Error, OpenSSL::SSL::SSLError\n     # FastImage.size raises BufError for some gifs, leave it."
        },
        {
          "filename": "lib/final_destination/fast_image.rb",
          "status": "removed",
          "additions": 0,
          "deletions": 23,
          "patch": "@@ -1,23 +0,0 @@\n-# frozen_string_literal: true\n-\n-class FinalDestination::FastImage < ::FastImage\n-  def initialize(url, options = {})\n-    uri = URI(normalized_url(url))\n-    options.merge!(http_header: { \"Host\" => uri.hostname })\n-    uri.hostname = resolved_ip(uri)\n-\n-    super(uri.to_s, options)\n-  rescue FinalDestination::SSRFDetector::DisallowedIpError, SocketError, Timeout::Error\n-    super(\"\")\n-  end\n-\n-  private\n-\n-  def resolved_ip(uri)\n-    FinalDestination::SSRFDetector.lookup_and_filter_ips(uri.hostname).first\n-  end\n-\n-  def normalized_url(uri)\n-    UrlHelper.normalized_encode(uri)\n-  end\n-end"
        },
        {
          "filename": "lib/freedom_patches/fast_image.rb",
          "status": "added",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -0,0 +1,11 @@\n+# frozen_string_literal: true\n+\n+class FastImage\n+  def setup_http\n+    @http = FinalDestination::HTTP.new(@parsed_uri.host, @parsed_uri.port)\n+    @http.use_ssl = (@parsed_uri.scheme == \"https\")\n+    @http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n+    @http.open_timeout = @options[:timeout]\n+    @http.read_timeout = @options[:timeout]\n+  end\n+end"
        },
        {
          "filename": "spec/lib/final_destination/fast_image_spec.rb",
          "status": "removed",
          "additions": 0,
          "deletions": 70,
          "patch": "@@ -1,70 +0,0 @@\n-# frozen_string_literal: true\n-\n-describe FinalDestination::FastImage do\n-  before do\n-    # We need to test low-level stuff, switch off WebMock for FastImage\n-    WebMock.enable!(except: [:net_http])\n-    Socket.stubs(:tcp).never\n-    TCPSocket.stubs(:open).never\n-    Addrinfo.stubs(:getaddrinfo).never\n-  end\n-\n-  after { WebMock.enable! }\n-\n-  def expect_tcp_and_abort(stub_addr, &blk)\n-    success = Class.new(StandardError)\n-    TCPSocket.stubs(:open).with { |addr| stub_addr == addr }.once.raises(success)\n-    begin\n-      yield\n-    rescue success\n-    end\n-  end\n-\n-  def stub_ip_lookup(stub_addr, ips)\n-    FinalDestination::SSRFDetector.stubs(:lookup_ips).with { |addr| stub_addr == addr }.returns(ips)\n-  end\n-\n-  def stub_tcp_to_raise(stub_addr, exception)\n-    TCPSocket.stubs(:open).with { |addr| addr == stub_addr }.once.raises(exception)\n-  end\n-\n-  it \"uses the first resolved IP\" do\n-    stub_ip_lookup(\"example.com\", %w[1.1.1.1 2.2.2.2 3.3.3.3])\n-    expect_tcp_and_abort(\"1.1.1.1\") do\n-      FinalDestination::FastImage.size(URI(\"https://example.com/img.jpg\"))\n-    end\n-  end\n-\n-  it \"ignores private IPs\" do\n-    stub_ip_lookup(\"example.com\", %w[0.0.0.0 2.2.2.2])\n-    expect_tcp_and_abort(\"2.2.2.2\") do\n-      FinalDestination::FastImage.size(URI(\"https://example.com/img.jpg\"))\n-    end\n-  end\n-\n-  it \"returns a null object when all IPs are private\" do\n-    stub_ip_lookup(\"example.com\", %w[0.0.0.0 127.0.0.1])\n-    expect(FinalDestination::FastImage.size(URI(\"https://example.com/img.jpg\"))).to eq(nil)\n-  end\n-\n-  it \"returns a null object if all IPs are blocked\" do\n-    SiteSetting.blocked_ip_blocks = \"98.0.0.0/8|78.13.47.0/24|9001:82f3::/32\"\n-    stub_ip_lookup(\"ip6.example.com\", %w[9001:82f3:8873::3])\n-    stub_ip_lookup(\"ip4.example.com\", %w[98.23.19.111])\n-    expect(FinalDestination::FastImage.size(URI(\"https://ip4.example.com/img.jpg\"))).to eq(nil)\n-    expect(FinalDestination::FastImage.size(URI(\"https://ip6.example.com/img.jpg\"))).to eq(nil)\n-  end\n-\n-  it \"allows specified hosts to bypass IP checks\" do\n-    SiteSetting.blocked_ip_blocks = \"98.0.0.0/8|78.13.47.0/24|9001:82f3::/32\"\n-    SiteSetting.allowed_internal_hosts = \"internal.example.com|blocked-ip.example.com\"\n-    stub_ip_lookup(\"internal.example.com\", %w[0.0.0.0 127.0.0.1])\n-    stub_ip_lookup(\"blocked-ip.example.com\", %w[98.23.19.111])\n-    expect_tcp_and_abort(\"0.0.0.0\") do\n-      FinalDestination::FastImage.size(URI(\"https://internal.example.com/img.jpg\"))\n-    end\n-    expect_tcp_and_abort(\"98.23.19.111\") do\n-      FinalDestination::FastImage.size(URI(\"https://blocked-ip.example.com/img.jpg\"))\n-    end\n-  end\n-end"
        },
        {
          "filename": "spec/lib/freedom_patches/fast_image_spec.rb",
          "status": "added",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -0,0 +1,28 @@\n+# frozen_string_literal: true\n+\n+RSpec.describe FastImage do\n+  before do\n+    FinalDestination::SSRFDetector.allow_ip_lookups_in_test!\n+    WebMock.enable!(except: [:final_destination])\n+  end\n+\n+  after do\n+    WebMock.enable!\n+    FinalDestination::SSRFDetector.disallow_ip_lookups_in_test!\n+  end\n+\n+  it \"should filter endpoint hostname through our SSRF detector and return null object\" do\n+    stub_ip_lookup(\"example.com\", %W[0.0.0.0])\n+\n+    expect(described_class.type(\"http://example.com\")).to eq(nil)\n+  end\n+\n+  it \"should send the right request if endpoint hostname resolves to a public ip address\" do\n+    stub_ip_lookup(\"example.com\", %W[52.125.123.12])\n+\n+    success = Class.new(StandardError)\n+    TCPSocket.stubs(:open).with { |addr| \"52.125.123.12\" == addr }.once.raises(success)\n+\n+    expect { described_class.type(\"http://example.com\") }.to raise_error(success)\n+  end\n+end"
        },
        {
          "filename": "spec/services/search_indexer_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -238,13 +238,10 @@\n       Jobs.run_immediately!\n       SiteSetting.max_image_width = 1\n \n-      stub_request(:get, \"https://1.2.3.4/some.png\").to_return(\n-        status: 200,\n-        body: file_from_fixtures(\"logo.png\").read,\n-      )\n-\n       src = \"https://meta.discourse.org/some.png\"\n \n+      stub_request(:get, src).to_return(status: 200, body: file_from_fixtures(\"logo.png\").read)\n+\n       post = Fabricate(:post, raw: <<~RAW)\n       Let me see how I can fix this image\n       <img src=\"#{src}\" title=\"GOT\" alt=\"white walkers\" width=\"2\" height=\"2\">"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d2efdf5282a868d80e916caaeb51d40d1ea256a2",
            "date": "2025-01-24T21:33:06Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "4c1c4ba8d42db4d1c732af69c39740d2aee91410",
            "date": "2025-01-24T19:50:52Z",
            "author_login": "featheredtoast"
          },
          {
            "sha": "59a67758489683457e7dca5fd712710034c08631",
            "date": "2025-01-24T19:42:22Z",
            "author_login": "xfalcox"
          },
          {
            "sha": "9cc99ef6db77d82b4af95911ee503e227cceae62",
            "date": "2025-01-24T18:36:35Z",
            "author_login": "SamSaffron"
          },
          {
            "sha": "5a94ceda542e5a0d0d8b90219bb835a51780b502",
            "date": "2025-01-24T18:05:47Z",
            "author_login": "xfalcox"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L",
    "cwe_id": "CWE-918",
    "description": "Discourse is an open-source discussion platform. Prior to version 3.2.3 on the `stable` branch and version 3.3.0.beta4 on the `beta` and `tests-passed` branches, a malicious actor could get the FastImage library to redirect requests to an internal Discourse IP. This issue is patched in version 3.2.3 on the `stable` branch and version 3.3.0.beta4 on the `beta` and `tests-passed` branches. No known workarounds are available.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-07-03T20:15:04.573",
    "last_modified": "2024-11-21T09:23:19.470",
    "fix_date": "2024-05-31T02:52:53Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/5b8cf11b69e05d5c058c1148ec69ec309491fa6e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/67e78086035cec494b15ce79342a0cb9052c2d95",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-46pq-7958-fc68",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/5b8cf11b69e05d5c058c1148ec69ec309491fa6e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/67e78086035cec494b15ce79342a0cb9052c2d95",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-46pq-7958-fc68",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.889568",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-26T07:21:20Z",
    "pushed_at": "2025-01-25T09:40:42Z",
    "size": 701178,
    "stars": 42998,
    "forks": 8411,
    "open_issues": 82,
    "watchers": 42998,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20337451,
      "JavaScript": 9453662,
      "HTML": 1461712,
      "Handlebars": 1061673,
      "SCSS": 987048,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5042,
      "avg_commits_per_week": 96.96153846153847,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:34:08.623080"
  }
}