{
  "cve_id": "CVE-2024-37300",
  "github_data": {
    "repository": "jupyterhub/oauthenticator",
    "fix_commit": "d1aea05fa89f2beae15ab0fa0b0d071030f79654",
    "related_commits": [
      "d1aea05fa89f2beae15ab0fa0b0d071030f79654",
      "d1aea05fa89f2beae15ab0fa0b0d071030f79654"
    ],
    "patch_url": "https://github.com/jupyterhub/oauthenticator/commit/d1aea05fa89f2beae15ab0fa0b0d071030f79654.patch",
    "fix_commit_details": {
      "sha": "d1aea05fa89f2beae15ab0fa0b0d071030f79654",
      "commit_date": "2024-06-11T22:23:56Z",
      "author": {
        "login": "yuvipanda",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-gprj-3p75-f996",
        "length": 113,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 33,
        "additions": 21,
        "deletions": 12
      },
      "files": [
        {
          "filename": "oauthenticator/globus.py",
          "status": "modified",
          "additions": 21,
          "deletions": 12,
          "patch": "@@ -297,30 +297,39 @@ async def check_allowed(self, username, auth_model):\n         if auth_model is None:\n             return True\n \n+        if await super().check_allowed(username, auth_model):\n+            return True\n+\n+        if self.allowed_globus_groups:\n+            user_groups = set(auth_model[\"auth_state\"][\"globus_groups\"])\n+            if user_groups & self.allowed_globus_groups:\n+                return True\n+            self.log.warning(f\"{username} not in an allowed Globus Group\")\n+\n+        # users should be explicitly allowed via config, otherwise they aren't\n+        return False\n+\n+    async def check_blocked_users(self, username, authentication):\n+        \"\"\"Check if the user should be blocked\n+\n+        Called _before_ checking if the user should be allowed\n+        \"\"\"\n+        # any restrictions on access go here - allow config only _grants_ access,\n+        # restrictions belong in the `block` stage\n         # before considering allowing a username by being recognized in a list\n         # of usernames or similar, we must ensure that the authenticated user is\n         # from an allowed identity provider domain.\n         if self.identity_provider:\n             # It's possible for identity provider domains to be namespaced\n             # https://docs.globus.org/api/auth/specification/#identity_provider_namespaces\n-            user_info = auth_model[\"auth_state\"][self.user_auth_state_key]\n+            user_info = authentication[\"auth_state\"][self.user_auth_state_key]\n             user_domain = user_info.get(self.username_claim).split('@', 1)[-1]\n             if user_domain != self.identity_provider:\n                 message = f\"This site is restricted to {self.identity_provider} accounts. Link your account at app.globus.org/account.\"\n                 self.log.warning(message)\n                 raise web.HTTPError(403, message)\n \n-        if await super().check_allowed(username, auth_model):\n-            return True\n-\n-        if self.allowed_globus_groups:\n-            user_groups = set(auth_model[\"auth_state\"][\"globus_groups\"])\n-            if user_groups & self.allowed_globus_groups:\n-                return True\n-            self.log.warning(f\"{username} not in an allowed Globus Group\")\n-\n-        # users should be explicitly allowed via config, otherwise they aren't\n-        return False\n+        return super().check_blocked_users(username, authentication)\n \n     async def update_auth_model(self, auth_model):\n         \"\"\""
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d31bb193e84e7cda58b16f2f5d385c9b8affda4f",
            "date": "2025-01-08T08:17:05Z",
            "author_login": "minrk"
          },
          {
            "sha": "ff6a1c817a95f26fadc49ac132110f60a02e7ed5",
            "date": "2025-01-07T00:23:15Z",
            "author_login": "pre-commit-ci[bot]"
          },
          {
            "sha": "aadfbf5ff4f25c972bfa03ae65a24057c94f645c",
            "date": "2024-12-11T14:05:01Z",
            "author_login": "minrk"
          },
          {
            "sha": "109018ef6e62bb9eed62f86af4c08929ac37c524",
            "date": "2024-12-11T14:04:30Z",
            "author_login": "minrk"
          },
          {
            "sha": "878de9b46bcb87ba4b9ee2b53ec63c9dccf7672f",
            "date": "2024-12-11T14:04:15Z",
            "author_login": "minrk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-863",
    "description": "OAuthenticator is software that allows OAuth2 identity providers to be plugged in and used with JupyterHub. JupyterHub < 5.0, when used with `GlobusOAuthenticator`, could be configured to allow all users from a particular institution only. This worked fine prior to JupyterHub 5.0, because `allow_all` did not take precedence over `identity_provider`. Since JupyterHub 5.0, `allow_all` does take precedence over `identity_provider`. On a hub with the same config, now all users will be allowed to login, regardless of `identity_provider`. `identity_provider` will basically be ignored. This is a documented change in JupyterHub 5.0, but is likely to catch many users by surprise. OAuthenticator 16.3.1 fixes the issue with JupyterHub 5.0, and does not affect previous versions. As a workaround, do not upgrade to JupyterHub 5.0 when using `GlobusOAuthenticator` in the prior configuration.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-12T16:15:12.097",
    "last_modified": "2024-11-21T09:23:33.933",
    "fix_date": "2024-06-11T22:23:56Z"
  },
  "references": [
    {
      "url": "https://github.com/jupyterhub/oauthenticator/commit/d1aea05fa89f2beae15ab0fa0b0d071030f79654",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/jupyterhub/oauthenticator/security/advisories/GHSA-gprj-3p75-f996",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://jupyterhub.readthedocs.io/en/stable/howto/upgrading-v5.html#authenticator-allow-all-and-allow-existing-users",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/jupyterhub/oauthenticator/commit/d1aea05fa89f2beae15ab0fa0b0d071030f79654",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/jupyterhub/oauthenticator/security/advisories/GHSA-gprj-3p75-f996",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://jupyterhub.readthedocs.io/en/stable/howto/upgrading-v5.html#authenticator-allow-all-and-allow-existing-users",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.367908",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "oauthenticator",
    "owner": "jupyterhub",
    "created_at": "2014-09-23T21:37:06Z",
    "updated_at": "2025-01-13T00:54:46Z",
    "pushed_at": "2025-01-08T08:17:07Z",
    "size": 1723,
    "stars": 419,
    "forks": 367,
    "open_issues": 51,
    "watchers": 419,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 307581
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T16:41:10.766867"
  }
}