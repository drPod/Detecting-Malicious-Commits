{
  "cve_id": "CVE-2024-37307",
  "github_data": {
    "repository": "cilium/cilium",
    "fix_commit": "0191b1ebcfdd61cefd06da0315a0e7d504167407",
    "related_commits": [
      "0191b1ebcfdd61cefd06da0315a0e7d504167407",
      "224e288a5bf40d0bb0f16c9413693b319633431a",
      "9299c0fd0024e33397cffc666ff851e82af28741",
      "958d7b77274bf2c272d8cdfd812631d644250653",
      "9eb25ba40391a9b035d7e66401b862818f4aac4b",
      "bf9a1ae1b2d2b2c9cca329d7aa96aa4858032a61",
      "0191b1ebcfdd61cefd06da0315a0e7d504167407",
      "224e288a5bf40d0bb0f16c9413693b319633431a",
      "9299c0fd0024e33397cffc666ff851e82af28741",
      "958d7b77274bf2c272d8cdfd812631d644250653",
      "9eb25ba40391a9b035d7e66401b862818f4aac4b",
      "bf9a1ae1b2d2b2c9cca329d7aa96aa4858032a61"
    ],
    "patch_url": "https://github.com/cilium/cilium/commit/0191b1ebcfdd61cefd06da0315a0e7d504167407.patch",
    "fix_commit_details": {
      "sha": "0191b1ebcfdd61cefd06da0315a0e7d504167407",
      "commit_date": "2024-06-05T05:01:04Z",
      "author": {
        "login": "sayboras",
        "type": "User",
        "stats": {
          "total_commits": 901,
          "average_weekly_commits": 1.8968421052631579,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 177
        }
      },
      "commit_message": {
        "title": "bugtool: Add json masking function",
        "length": 217,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 250,
        "additions": 250,
        "deletions": 0
      },
      "files": [
        {
          "filename": "bugtool/cmd/mask.go",
          "status": "added",
          "additions": 56,
          "deletions": 0,
          "patch": "@@ -0,0 +1,56 @@\n+// SPDX-License-Identifier: Apache-2.0\n+// Copyright Authors of Cilium\n+\n+package cmd\n+\n+import (\n+\t\"encoding/json\"\n+\t\"slices\"\n+)\n+\n+const (\n+\tredacted = \"[redacted]\"\n+\tident    = \"\\t\"\n+)\n+\n+// jsonFieldMaskPostProcess returns a postProcessFunc that masks the specified field names.\n+// The input byte slice is expected to be a JSON object.\n+func jsonFieldMaskPostProcess(fieldNames []string) postProcessFunc {\n+\treturn func(b []byte) ([]byte, error) {\n+\t\treturn maskFields(b, fieldNames)\n+\t}\n+}\n+\n+func maskFields(b []byte, fieldNames []string) ([]byte, error) {\n+\tvar data map[string]interface{}\n+\n+\tif err := json.Unmarshal(b, &data); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tmask(data, fieldNames)\n+\n+\t// MarshalIndent is used to make the output more readable.\n+\treturn json.MarshalIndent(data, \"\", ident)\n+}\n+\n+func mask(data map[string]interface{}, fieldNames []string) {\n+\tfor k, v := range data {\n+\t\tif slices.Contains(fieldNames, k) {\n+\t\t\tdata[k] = redacted\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tswitch t := v.(type) {\n+\t\tcase map[string]interface{}:\n+\t\t\tmask(t, fieldNames)\n+\t\tcase []interface{}:\n+\t\t\tfor i, item := range t {\n+\t\t\t\tif subData, ok := item.(map[string]interface{}); ok {\n+\t\t\t\t\tmask(subData, fieldNames)\n+\t\t\t\t\tt[i] = subData\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}"
        },
        {
          "filename": "bugtool/cmd/mask_test.go",
          "status": "added",
          "additions": 192,
          "deletions": 0,
          "patch": "@@ -0,0 +1,192 @@\n+// SPDX-License-Identifier: Apache-2.0\n+// Copyright Authors of Cilium\n+\n+package cmd\n+\n+import (\n+\t\"testing\"\n+\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+func Test_jsonFieldMaskPostProcess(t *testing.T) {\n+\ttype args struct {\n+\t\tinput      []byte\n+\t\tfieldNames []string\n+\t}\n+\ttests := []struct {\n+\t\tname    string\n+\t\targs    args\n+\t\twant    []byte\n+\t\twantErr bool\n+\t}{\n+\t\t{\n+\t\t\tname: \"simple struct\",\n+\t\t\targs: args{\n+\t\t\t\tinput: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\"\n+\t\t\t\t}`),\n+\t\t\t\tfieldNames: []string{\"password\"},\n+\t\t\t},\n+\t\t\twant: []byte(`{\n+\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\"password\": \"[redacted]\",\n+\t\t\t\t\"email\": \"user1@example.com\"\n+\t\t\t}`),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"array struct\",\n+\t\t\targs: args{\n+\t\t\t\tinput: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"secrets\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"password\": \"mypassword\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"password\": \"anotherone\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t],\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\"\n+\t\t\t\t}`),\n+\t\t\t\tfieldNames: []string{\"password\"},\n+\t\t\t},\n+\t\t\twant: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"secrets\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"password\": \"[redacted]\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"password\": \"[redacted]\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t],\n+\t\t\t\t\t\"password\": \"[redacted]\",\n+\t\t\t\t\t\"email\": \"user1@example.com\"\n+\t\t\t}`),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"nested struct\",\n+\t\t\targs: args{\n+\t\t\t\tinput: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\t\"complex\": {\n+\t\t\t\t\t\t\"password\": \"anotherpassword\"\n+\t\t\t\t\t}\n+\t\t\t\t}`),\n+\t\t\t\tfieldNames: []string{\"password\"},\n+\t\t\t},\n+\t\t\twant: []byte(`{\n+\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\"password\": \"[redacted]\",\n+\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\"complex\": {\n+\t\t\t\t\t\"password\": \"[redacted]\"\n+\t\t\t\t}\n+\t\t\t}`),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"nested array struct\",\n+\t\t\targs: args{\n+\t\t\t\tinput: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\t\"complex\": {\n+\t\t\t\t\t\t\"secrets\": [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\"password\": \"mypassword\"\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\"password\": \"anotherpassword\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t]\n+\t\t\t\t\t}\n+\t\t\t\t}`),\n+\t\t\t\tfieldNames: []string{\"password\"},\n+\t\t\t},\n+\t\t\twant: []byte(`{\n+\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\"password\": \"[redacted]\",\n+\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\"complex\": {\n+\t\t\t\t\t\"secrets\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"password\": \"[redacted]\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"password\": \"[redacted]\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t}\n+\t\t\t}`),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"no masked field\",\n+\t\t\targs: args{\n+\t\t\t\tinput: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\t\"complex\": {\n+\t\t\t\t\t\t\"password\": \"anotherpassword\"\n+\t\t\t\t\t}\n+\t\t\t\t}`),\n+\t\t\t\tfieldNames: []string{\"no-such-field\"},\n+\t\t\t},\n+\t\t\twant: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\t\"complex\": {\n+\t\t\t\t\t\t\"password\": \"anotherpassword\"\n+\t\t\t\t\t}\n+\t\t\t\t}`),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"mask object field\",\n+\t\t\targs: args{\n+\t\t\t\tinput: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\t\"complex\": {\n+\t\t\t\t\t\t\"password\": \"anotherpassword\"\n+\t\t\t\t\t}\n+\t\t\t\t}`),\n+\t\t\t\tfieldNames: []string{\"complex\"},\n+\t\t\t},\n+\t\t\twant: []byte(`{\n+\t\t\t\t\t\"username\": \"user1\",\n+\t\t\t\t\t\"password\": \"mypassword\",\n+\t\t\t\t\t\"email\": \"user1@example.com\",\n+\t\t\t\t\t\"complex\": \"[redacted]\"\n+\t\t\t\t}`),\n+\t\t},\n+\t\t{\n+\t\t\tname: \"invalid input\",\n+\t\t\targs: args{\n+\t\t\t\tinput:      []byte(`{\"username\": \"user1\",}`),\n+\t\t\t\tfieldNames: []string{\"password\"},\n+\t\t\t},\n+\t\t\twant:    nil,\n+\t\t\twantErr: true,\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tt.Run(tt.name, func(t *testing.T) {\n+\t\t\tgot, err := jsonFieldMaskPostProcess(tt.args.fieldNames)(tt.args.input)\n+\t\t\trequire.Equal(t, tt.wantErr, err != nil)\n+\t\t\t// only assert the output if there is no error\n+\t\t\t// as JSONEq func is used to compare the output\n+\t\t\tif !tt.wantErr {\n+\t\t\t\trequire.JSONEq(t, string(tt.want), string(got))\n+\t\t\t}\n+\t\t})\n+\t}\n+}"
        },
        {
          "filename": "bugtool/cmd/root.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -168,6 +168,8 @@ func isValidArchiveType(archiveType string) bool {\n \treturn false\n }\n \n+type postProcessFunc func(output []byte) ([]byte, error)\n+\n func runTool() {\n \t// Validate archive type\n \tif !isValidArchiveType(archiveType) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b0382b5258660a2b464e46b29a3e33dca6d9ef59",
            "date": "2025-01-10T11:12:30Z",
            "author_login": "pippolo84"
          },
          {
            "sha": "6ee68135db4a2e6a6142f5e2ad438f4239b18797",
            "date": "2025-01-10T11:09:24Z",
            "author_login": "pippolo84"
          },
          {
            "sha": "5fc47e9521e085ef441c14360f305cb8cb69314e",
            "date": "2025-01-10T09:55:48Z",
            "author_login": "pippolo84"
          },
          {
            "sha": "705010764523eb7fb3e07890b63ad841ae06d46e",
            "date": "2024-06-21T12:39:33Z",
            "author_login": "aanm"
          },
          {
            "sha": "4ffb0befe8c76180011751e26bb123d0a5d822d1",
            "date": "2024-11-25T08:05:17Z",
            "author_login": "julianwiedmann"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.9,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-200",
    "description": "Cilium is a networking, observability, and security solution with an eBPF-based dataplane. Starting in version 1.13.0 and prior to versions 1.13.7, 1.14.12, and 1.15.6, the output of `cilium-bugtool` can contain sensitive data when the tool is run (with the `--envoy-dump` flag set) against Cilium deployments with the Envoy proxy enabled. Users of the TLS inspection, Ingress with TLS termination, Gateway API with TLS termination, and Kafka network policies with API key filtering features are affected. The sensitive data includes the CA certificate, certificate chain, and private key used by Cilium HTTP Network Policies, and when using Ingress/Gateway API and the API keys used in Kafka-related network policy. `cilium-bugtool` is a debugging tool that is typically invoked manually and does not run during the normal operation of a Cilium cluster. This issue has been patched in Cilium v1.15.6, v1.14.12, and v1.13.17. There is no workaround to this issue.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-13T16:15:11.180",
    "last_modified": "2025-01-09T16:37:54.713",
    "fix_date": "2024-06-05T05:01:04Z"
  },
  "references": [
    {
      "url": "https://github.com/cilium/cilium/commit/0191b1ebcfdd61cefd06da0315a0e7d504167407",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/224e288a5bf40d0bb0f16c9413693b319633431a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/9299c0fd0024e33397cffc666ff851e82af28741",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/958d7b77274bf2c272d8cdfd812631d644250653",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/9eb25ba40391a9b035d7e66401b862818f4aac4b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/bf9a1ae1b2d2b2c9cca329d7aa96aa4858032a61",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/security/advisories/GHSA-wh78-7948-358j",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/0191b1ebcfdd61cefd06da0315a0e7d504167407",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/224e288a5bf40d0bb0f16c9413693b319633431a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/9299c0fd0024e33397cffc666ff851e82af28741",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/958d7b77274bf2c272d8cdfd812631d644250653",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/9eb25ba40391a9b035d7e66401b862818f4aac4b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/commit/bf9a1ae1b2d2b2c9cca329d7aa96aa4858032a61",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cilium/cilium/security/advisories/GHSA-wh78-7948-358j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:26.371006",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cilium",
    "owner": "cilium",
    "created_at": "2015-12-16T12:33:31Z",
    "updated_at": "2025-01-14T13:11:02Z",
    "pushed_at": "2025-01-14T13:10:58Z",
    "size": 368013,
    "stars": 20686,
    "forks": 3031,
    "open_issues": 1031,
    "watchers": 20686,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "feature/main/svc-icmp-response",
      "feature/v1.11/beta-test",
      "feature/v1.11/k8s-ingress"
    ],
    "languages": {
      "Go": 18625849,
      "C": 1840788,
      "Shell": 217614,
      "Makefile": 77186,
      "Dockerfile": 31925,
      "Smarty": 25264,
      "Python": 12413,
      "SmPL": 12369,
      "HTML": 3439,
      "Lua": 2517,
      "Mustache": 1457,
      "TeX": 416
    },
    "commit_activity": {
      "total_commits_last_year": 5449,
      "avg_commits_per_week": 104.78846153846153,
      "days_active_last_year": 339
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:14:57.009385"
  }
}