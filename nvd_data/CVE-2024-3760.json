{
  "cve_id": "CVE-2024-3760",
  "github_data": {
    "repository": "lunary-ai/lunary",
    "fix_commit": "29374bb10020712009c1ec238affe098112a51d6",
    "related_commits": [
      "29374bb10020712009c1ec238affe098112a51d6"
    ],
    "patch_url": "https://github.com/lunary-ai/lunary/commit/29374bb10020712009c1ec238affe098112a51d6.patch",
    "fix_commit_details": {
      "sha": "29374bb10020712009c1ec238affe098112a51d6",
      "commit_date": "2024-04-13T19:18:29Z",
      "author": {
        "login": "hughcrt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: reate limit on reset password endpoint (#203)",
        "length": 50,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 91,
        "additions": 69,
        "deletions": 22
      },
      "files": [
        {
          "filename": "packages/backend/src/api/v1/auth/index.ts",
          "status": "modified",
          "additions": 35,
          "deletions": 13,
          "patch": "@@ -1,18 +1,20 @@\n+import { Db } from \"@/src/types\"\n import sql from \"@/src/utils/db\"\n import { sendVerifyEmail } from \"@/src/utils/emails\"\n import Context from \"@/src/utils/koa\"\n import { sendTelegramMessage } from \"@/src/utils/notifications\"\n import Router from \"koa-router\"\n import { z } from \"zod\"\n+import saml, { getLoginUrl } from \"./saml\"\n import {\n   hashPassword,\n+  isJWTExpired,\n   requestPasswordReset,\n   sanitizeEmail,\n-  signJwt,\n-  verifyJwt,\n+  signJWT,\n+  verifyJWT,\n   verifyPassword,\n } from \"./utils\"\n-import saml, { getLoginUrl } from \"./saml\"\n \n const auth = new Router({\n   prefix: \"/auth\",\n@@ -42,6 +44,7 @@ auth.post(\"/method\", async (ctx: Context) => {\n   }\n })\n \n+// TODO: split signup and join\n auth.post(\"/signup\", async (ctx: Context) => {\n   const bodySchema = z.object({\n     email: z.string().email().transform(sanitizeEmail),\n@@ -141,7 +144,7 @@ auth.post(\"/signup\", async (ctx: Context) => {\n       return { user, org }\n     })\n \n-    const token = await signJwt({\n+    const token = await signJWT({\n       userId: user.id,\n       email: user.email,\n       orgId: org.id,\n@@ -161,7 +164,7 @@ auth.post(\"/signup\", async (ctx: Context) => {\n     ctx.body = { token }\n     return\n   } else if (signupMethod === \"join\") {\n-    const { payload } = await verifyJwt(token!)\n+    const { payload } = await verifyJWT(token!)\n \n     if (payload.email !== email) {\n       ctx.throw(403, \"Invalid token\")\n@@ -193,7 +196,7 @@ auth.get(\"/join-data\", async (ctx: Context) => {\n \n   const {\n     payload: { orgId },\n-  } = await verifyJwt(token)\n+  } = await verifyJWT(token)\n \n   const [org] = await sql`\n     select name, plan from org where id = ${orgId}\n@@ -238,6 +241,8 @@ auth.post(\"/login\", async (ctx: Context) => {\n   }\n \n   if (!user.passwordHash) {\n+    // If SAML was the only auth method allowed since the account creation,\n+    // and that SAML is disabled by admin, accounts don't have a password yet\n     await requestPasswordReset(email)\n \n     ctx.body = { message: \"We sent you an email to reset your password\" }\n@@ -255,7 +260,7 @@ auth.post(\"/login\", async (ctx: Context) => {\n   // update last login\n   await sql`update account set last_login_at = now() where id = ${user.id}`\n \n-  const token = await signJwt({\n+  const token = await signJWT({\n     userId: user.id,\n     email: user.email,\n     orgId: user.orgId,\n@@ -276,11 +281,28 @@ auth.post(\"/request-password-reset\", async (ctx: Context) => {\n       ctx.body = { error: \"Invalid email format\" }\n       return\n     }\n-\n     const { email } = body.data\n \n-    await requestPasswordReset(email)\n+    const [{ recoveryToken }] = await sql<\n+      Db.Account[]\n+    >`select * from account where email = ${email}`\n+\n+    if (recoveryToken) {\n+      if (await isJWTExpired(recoveryToken)) {\n+        // Edge case 1: User has made a password reset request more than one hour ago, but has not completed the flow\n+        await requestPasswordReset(email)\n+        ctx.body = { ok: true }\n+        return\n+      } else {\n+        // Edge case 2: User has already made a password request less than one hour ago\n+        throw new Error(\n+          \"Password reset request already initiated less than one hour ago\",\n+        )\n+      }\n+    }\n \n+    // Base case: User is making his first password reset request since the last one has been successfully reset\n+    await requestPasswordReset(email)\n     ctx.body = { ok: true }\n   } catch (error) {\n     console.error(error)\n@@ -298,15 +320,15 @@ auth.post(\"/reset-password\", async (ctx: Context) => {\n \n   const {\n     payload: { email },\n-  } = await verifyJwt<{ email: string }>(token)\n+  } = await verifyJWT<{ email: string }>(token)\n \n   const passwordHash = await hashPassword(password)\n \n   const [user] = await sql`\n     update account set password_hash = ${passwordHash}, last_login_at = NOW() where email = ${email} returning *\n   `\n \n-  const authToken = await signJwt({\n+  const authToken = await signJWT({\n     userId: user.id,\n     email: user.email,\n     orgId: user.orgId,\n@@ -319,7 +341,7 @@ auth.post(\"/reset-password\", async (ctx: Context) => {\n auth.post(\"/exchange-token\", async (ctx: Context) => {\n   const { onetimeToken } = ctx.request.body as { onetimeToken: string }\n \n-  await verifyJwt(onetimeToken)\n+  await verifyJWT(onetimeToken)\n \n   // get account with onetime_token = token\n   const [account] = await sql`\n@@ -332,7 +354,7 @@ auth.post(\"/exchange-token\", async (ctx: Context) => {\n \n   const oneDay = 60 * 60 * 24\n \n-  const authToken = await signJwt(\n+  const authToken = await signJWT(\n     {\n       userId: account.id,\n       email: account.email,"
        },
        {
          "filename": "packages/backend/src/api/v1/auth/utils.ts",
          "status": "modified",
          "additions": 14,
          "deletions": 5,
          "patch": "@@ -37,7 +37,7 @@ export async function hashPassword(password: string): Promise<string> {\n \n const ONE_MONTH = 60 * 60 * 24 * 30\n \n-export function signJwt(\n+export function signJWT(\n   payload: any,\n   expiresIn: number = ONE_MONTH,\n ): Promise<string> {\n@@ -52,13 +52,22 @@ export function signJwt(\n     .sign(new TextEncoder().encode(process.env.JWT_SECRET))\n }\n \n-export function verifyJwt<Payload>(token: string) {\n-  return jose.jwtVerify<Payload>(\n+export function verifyJWT<Payload>(token: string) {\n+  return jose.jwtVerify<Payload & { iat: number; exp: number; nbf: number }>(\n     token,\n     new TextEncoder().encode(process.env.JWT_SECRET),\n   )\n }\n \n+export async function isJWTExpired(token: string) {\n+  try {\n+    await verifyJWT(token)\n+    return false\n+  } catch (error) {\n+    return true\n+  }\n+}\n+\n // TODO: shared\n interface SessionData {\n   userId: string\n@@ -144,7 +153,7 @@ export async function authMiddleware(ctx: Context, next: Next) {\n       if (!bearer) {\n         throw new Error(\"No bearer token provided.\")\n       }\n-      const { payload } = await verifyJwt<SessionData>(key)\n+      const { payload } = await verifyJWT<SessionData>(key)\n \n       ctx.state.userId = payload.userId\n       ctx.state.orgId = payload.orgId\n@@ -179,7 +188,7 @@ export async function requestPasswordReset(email: string) {\n   const [user] = await sql`select id from account where email = ${email}`\n \n   const ONE_HOUR = 60 * 60\n-  const token = await signJwt({ email }, ONE_HOUR)\n+  const token = await signJWT({ email }, ONE_HOUR)\n \n   await sql`update account set recovery_token = ${token} where id = ${user.id}`\n "
        },
        {
          "filename": "packages/backend/src/api/v1/users.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -9,7 +9,7 @@ import {\n import { jwtVerify } from \"jose\"\n import { z } from \"zod\"\n import { sendEmail } from \"@/src/utils/sendEmail\"\n-import { signJwt } from \"./auth/utils\"\n+import { signJWT } from \"./auth/utils\"\n import { roles } from \"shared\"\n import { checkAccess } from \"@/src/utils/authorization\"\n \n@@ -182,7 +182,7 @@ users.post(\"/\", checkAccess(\"teamMembers\", \"create\"), async (ctx: Context) => {\n   `\n   const orgUserCount = orgUserCountResult.count\n \n-  const token = await signJwt({ email, orgId }, FIFTEEN_DAYS)\n+  const token = await signJWT({ email, orgId }, FIFTEEN_DAYS)\n   const userToInsert = {\n     email,\n     orgId,"
        },
        {
          "filename": "packages/backend/src/types/database.ts",
          "status": "added",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -0,0 +1,14 @@\n+export interface Account {\n+  id: string\n+  createdAt: Date\n+  email: string | null\n+  passwordHash: string | null\n+  recoveryToken: string | null\n+  name: string | null\n+  orgId: string | null\n+  role: \"owner\" | \"admin\" | \"member\" | \"viewer\" | \"prompt_editor\" | \"billing\"\n+  verified: boolean\n+  avatarUrl: string | null\n+  lastLoginAt: Date | null\n+  singleUseToken: string | null\n+}"
        },
        {
          "filename": "packages/backend/src/types/index.ts",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+export * as Db from \"./database\""
        },
        {
          "filename": "packages/backend/src/utils/emails.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,4 +1,4 @@\n-import { signJwt } from \"@/src/api/v1/auth/utils\"\n+import { signJWT } from \"@/src/api/v1/auth/utils\"\n import { sendEmail } from \"./sendEmail\"\n \n function extractFirstName(name: string) {\n@@ -7,7 +7,7 @@ function extractFirstName(name: string) {\n }\n \n export async function sendVerifyEmail(email: string, name: string) {\n-  const token = await signJwt({ email })\n+  const token = await signJWT({ email })\n \n   const confirmLink = `${process.env.API_URL}/v1/users/verify-email?token=${token}`\n "
        },
        {
          "filename": "packages/db/0010.sql",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+alter table account alter column role set not null;\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a4c1a889ecc4329f4b8fc976904d08cd57636546",
            "date": "2025-01-13T15:25:14Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "2447a7cc873d1f96fcc150a00f3d46ff13f4964c",
            "date": "2025-01-12T16:53:00Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "a3211170ffe39424c54a102d4afa27cec99c362d",
            "date": "2025-01-12T16:48:23Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "ea73f8db2ec427defadb4d70c56ebfc65964b677",
            "date": "2025-01-11T00:32:52Z",
            "author_login": "hughcrt"
          },
          {
            "sha": "32974c788404aa69fd55709231e8834777dee7ab",
            "date": "2025-01-10T22:45:01Z",
            "author_login": "hughcrt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "In lunary-ai/lunary version 1.2.7, there is a lack of rate limiting on the forgot password page, leading to an email bombing vulnerability. Attackers can exploit this by automating forgot password requests to flood targeted user accounts with a high volume of password reset emails. This not only overwhelms the victim's mailbox, making it difficult to manage and locate legitimate emails, but also significantly impacts mail servers by consuming their resources. The increased load can cause performance degradation and, in severe cases, make the mail servers unresponsive or unavailable, disrupting email services for the entire organization.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-11-14T19:15:06.327",
    "last_modified": "2024-11-18T22:02:15.053",
    "fix_date": "2024-04-13T19:18:29Z"
  },
  "references": [
    {
      "url": "https://github.com/lunary-ai/lunary/commit/29374bb10020712009c1ec238affe098112a51d6",
      "source": "security@huntr.dev",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://huntr.com/bounties/c29e9f36-8261-463d-8862-7f4fdcc8eddc",
      "source": "security@huntr.dev",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.300566",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lunary",
    "owner": "lunary-ai",
    "created_at": "2023-05-12T10:03:05Z",
    "updated_at": "2025-01-13T15:25:18Z",
    "pushed_at": "2025-01-13T15:25:16Z",
    "size": 5319,
    "stars": 1133,
    "forks": 139,
    "open_issues": 0,
    "watchers": 1133,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "llm-1533-allow-filtering-by-feedback-in-thread-and-trace-page",
      "llm-1666-improve-exports-for-traces-enable-export-for-threads",
      "llm-1708-when-clicking-on-a-trace-row-theres-a-quick-render-bug-that",
      "llm-1711-save-row-sorting-in-views",
      "llm-1906-allow-a-team-owner-to-make-another-user-owner-instead-of",
      "llm-1910-prompts-settings-bug",
      "llm-1911-invite-button-doesnt-show-a-success-notification",
      "llm-1922-button-next-to-metadata-that-redirects-to-search",
      "llm-1939-integer-out-of-range-error-on-lunary-app",
      "llm-1942-implement-streaming-from-database-for-csvjsonl-exports",
      "llm-1966-long-project-names-are-croped-in-project-drowndopre",
      "llm-2101-sign-in-with-github",
      "main",
      "playwright_test_feedback_comment_dataset_user"
    ],
    "languages": {
      "TypeScript": 1181050,
      "Python": 112937,
      "CSS": 8238,
      "JavaScript": 3378,
      "Shell": 522
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:04:58.689247"
  }
}