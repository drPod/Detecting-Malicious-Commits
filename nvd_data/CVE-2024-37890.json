{
  "cve_id": "CVE-2024-37890",
  "github_data": {
    "repository": "websockets/ws",
    "fix_commit": "22c28763234aa75a7e1b76f5c01c181260d7917f",
    "related_commits": [
      "22c28763234aa75a7e1b76f5c01c181260d7917f",
      "4abd8f6de4b0b65ef80b3ff081989479ed93377e",
      "e55e5106f10fcbaac37cfa89759e4cc0d073a52c",
      "eeb76d313e2a00dd5247ca3597bba7877d064a63",
      "22c28763234aa75a7e1b76f5c01c181260d7917f",
      "4abd8f6de4b0b65ef80b3ff081989479ed93377e",
      "e55e5106f10fcbaac37cfa89759e4cc0d073a52c",
      "eeb76d313e2a00dd5247ca3597bba7877d064a63"
    ],
    "patch_url": "https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f.patch",
    "fix_commit_details": {
      "sha": "22c28763234aa75a7e1b76f5c01c181260d7917f",
      "commit_date": "2024-06-16T11:00:51Z",
      "author": {
        "login": "lpinca",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[security] Fix crash when the Upgrade header cannot be read (#2231)",
        "length": 476,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 75,
        "additions": 73,
        "deletions": 2
      },
      "files": [
        {
          "filename": "lib/websocket-server.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -210,12 +210,14 @@ class WebSocketServer extends EventEmitter {\n       req.headers['sec-websocket-key'] !== undefined\n         ? req.headers['sec-websocket-key'].trim()\n         : false;\n+    const upgrade = req.headers.upgrade;\n     const version = +req.headers['sec-websocket-version'];\n     const extensions = {};\n \n     if (\n       req.method !== 'GET' ||\n-      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n+      upgrade === undefined ||\n+      upgrade.toLowerCase() !== 'websocket' ||\n       !key ||\n       !keyRegex.test(key) ||\n       (version !== 8 && version !== 13) ||"
        },
        {
          "filename": "lib/websocket.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -799,7 +799,9 @@ function initAsClient(websocket, address, protocols, options) {\n \n     req = websocket._req = null;\n \n-    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\n+    const upgrade = res.headers.upgrade;\n+\n+    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n       abortHandshake(websocket, socket, 'Invalid Upgrade header');\n       return;\n     }"
        },
        {
          "filename": "test/websocket-server.test.js",
          "status": "modified",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -494,6 +494,47 @@ describe('WebSocketServer', () => {\n   });\n \n   describe('Connection establishing', () => {\n+    it('fails if the Upgrade header field value cannot be read', (done) => {\n+      const server = http.createServer();\n+      const wss = new WebSocket.Server({ noServer: true });\n+\n+      server.maxHeadersCount = 1;\n+\n+      server.on('upgrade', (req, socket, head) => {\n+        assert.deepStrictEqual(req.headers, { foo: 'bar' });\n+        wss.handleUpgrade(req, socket, head, () => {\n+          done(new Error('Unexpected callback invocation'));\n+        });\n+      });\n+\n+      server.listen(() => {\n+        const req = http.get({\n+          port: server.address().port,\n+          headers: {\n+            foo: 'bar',\n+            bar: 'baz',\n+            Connection: 'Upgrade',\n+            Upgrade: 'websocket'\n+          }\n+        });\n+\n+        req.on('response', (res) => {\n+          assert.strictEqual(res.statusCode, 400);\n+\n+          const chunks = [];\n+\n+          res.on('data', (chunk) => {\n+            chunks.push(chunk);\n+          });\n+\n+          res.on('end', () => {\n+            assert.strictEqual(Buffer.concat(chunks).toString(), 'Bad Request');\n+            server.close(done);\n+          });\n+        });\n+      });\n+    });\n+\n     it('fails if the Sec-WebSocket-Key header is invalid (1/2)', (done) => {\n       const wss = new WebSocket.Server({ port: 0 }, () => {\n         const req = http.get({"
        },
        {
          "filename": "test/websocket.test.js",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -528,6 +528,32 @@ describe('WebSocket', () => {\n     beforeEach((done) => server.listen(0, done));\n     afterEach((done) => server.close(done));\n \n+    it('fails if the Upgrade header field value cannot be read', (done) => {\n+      server.once('upgrade', (req, socket) => {\n+        socket.on('end', socket.end);\n+        socket.write(\n+          'HTTP/1.1 101 Switching Protocols\\r\\n' +\n+            'Connection: Upgrade\\r\\n' +\n+            'Upgrade: websocket\\r\\n' +\n+            '\\r\\n'\n+        );\n+      });\n+\n+      const ws = new WebSocket(`ws://localhost:${server.address().port}`);\n+\n+      ws._req.maxHeadersCount = 1;\n+\n+      ws.on('upgrade', (res) => {\n+        assert.deepStrictEqual(res.headers, { connection: 'Upgrade' });\n+\n+        ws.on('error', (err) => {\n+          assert.ok(err instanceof Error);\n+          assert.strictEqual(err.message, 'Invalid Upgrade header');\n+          done();\n+        });\n+      });\n+    });\n+\n     it('fails if the Upgrade header field value is not \"websocket\"', (done) => {\n       server.once('upgrade', (req, socket) => {\n         socket.on('end', socket.end);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b9ca55b0aa8c72b39a778542bd0fa9b6c455d4c4",
            "date": "2025-01-14T13:29:04Z",
            "author_login": "lpinca"
          },
          {
            "sha": "c798dd4ee20efb2d7591b5659839ad05cdb3eb70",
            "date": "2025-01-01T19:13:35Z",
            "author_login": "SadiqOnGithub"
          },
          {
            "sha": "68614728c164eb55462ff12ba24cb30451d28ec6",
            "date": "2024-10-26T15:47:34Z",
            "author_login": "lpinca"
          },
          {
            "sha": "019f28ff1ffddfcdc428d1de5ecd98648057a2ab",
            "date": "2024-07-14T13:20:58Z",
            "author_login": "ITenthusiasm"
          },
          {
            "sha": "bfe1b2a623eb881a107ccf9a95042e8b22933687",
            "date": "2024-07-04T17:37:58Z",
            "author_login": "yuhao423"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "ws is an open source WebSocket client and server for Node.js. A request with a number of headers exceeding theserver.maxHeadersCount threshold could be used to crash a ws server. The vulnerability was fixed in ws@8.17.1 (e55e510) and backported to ws@7.5.10 (22c2876), ws@6.2.3 (eeb76d3), and ws@5.2.4 (4abd8f6). In vulnerable versions of ws, the issue can be mitigated in the following ways: 1. Reduce the maximum allowed length of the request headers using the --max-http-header-size=size and/or the maxHeaderSize options so that no more headers than the server.maxHeadersCount limit can be sent. 2. Set server.maxHeadersCount to 0 so that no limit is applied.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-17T20:15:13.203",
    "last_modified": "2024-11-21T09:24:28.810",
    "fix_date": "2024-06-16T11:00:51Z"
  },
  "references": [
    {
      "url": "https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/issues/2230",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/pull/2231",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://nodejs.org/api/http.html#servermaxheaderscount",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/issues/2230",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/pull/2231",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://nodejs.org/api/http.html#servermaxheaderscount",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.836916",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ws",
    "owner": "websockets",
    "created_at": "2011-11-09T22:32:45Z",
    "updated_at": "2025-01-14T15:15:16Z",
    "pushed_at": "2025-01-14T13:29:47Z",
    "size": 14197,
    "stars": 21915,
    "forks": 2449,
    "open_issues": 6,
    "watchers": 21915,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 433648
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:44:17.485915"
  }
}