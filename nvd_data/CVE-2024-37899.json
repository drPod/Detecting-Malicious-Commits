{
  "cve_id": "CVE-2024-37899",
  "github_data": {
    "repository": "xwiki/xwiki-platform",
    "fix_commit": "f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a",
    "related_commits": [
      "f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a",
      "f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a"
    ],
    "patch_url": "https://github.com/xwiki/xwiki-platform/commit/f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a.patch",
    "fix_commit_details": {
      "sha": "f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a",
      "commit_date": "2024-01-16T11:49:59Z",
      "author": {
        "login": "pjeanjean",
        "type": "User",
        "stats": {
          "total_commits": 36,
          "average_weekly_commits": 0.03773584905660377,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 23
        }
      },
      "commit_message": {
        "title": "XWIKI-21611: Set right author when disabling/enabling an account",
        "length": 223,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 222,
        "additions": 128,
        "deletions": 94
      },
      "files": [
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/user/api/XWikiUser.java",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -31,6 +31,8 @@\n import org.xwiki.model.reference.EntityReferenceSerializer;\n import org.xwiki.model.reference.LocalDocumentReference;\n import org.xwiki.model.reference.WikiReference;\n+import org.xwiki.user.UserReference;\n+import org.xwiki.user.UserReferenceResolver;\n \n import com.xpn.xwiki.XWiki;\n import com.xpn.xwiki.XWikiContext;\n@@ -71,6 +73,8 @@ public class XWikiUser\n \n     private ContextualLocalizationManager localization;\n \n+    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;\n+\n     private Logger logger = LoggerFactory.getLogger(XWikiUser.class);\n \n     private String fullName;\n@@ -204,6 +208,15 @@ private EntityReferenceSerializer<String> getLocalEntityReferenceSerializer()\n         return localEntityReferenceSerializer;\n     }\n \n+    private UserReferenceResolver<DocumentReference> getDocumentReferenceUserReferenceResolver()\n+    {\n+        if (this.documentReferenceUserReferenceResolver == null) {\n+            this.documentReferenceUserReferenceResolver =\n+                Utils.getComponent(UserReferenceResolver.TYPE_DOCUMENT_REFERENCE, \"document\");\n+        }\n+        return this.documentReferenceUserReferenceResolver;\n+    }\n+\n     private ContextualLocalizationManager getLocalization()\n     {\n         if (this.localization == null) {\n@@ -337,7 +350,9 @@ public void setDisabled(boolean disable, XWikiContext context)\n                 XWikiDocument userdoc = getUserDocument(context);\n                 userdoc.setIntValue(getUserClassReference(userdoc.getDocumentReference().getWikiReference()),\n                     ACTIVE_PROPERTY, activeFlag);\n-                userdoc.setAuthorReference(context.getUserReference());\n+                UserReference userReference =\n+                    getDocumentReferenceUserReferenceResolver().resolve(context.getUserReference());\n+                userdoc.getAuthors().setOriginalMetadataAuthor(userReference);\n                 context.getWiki().saveDocument(userdoc,\n                     localizePlainOrKey(\"core.users.\" + (disable ? \"disable\" : \"enable\") + \".saveComment\"), context);\n             } catch (XWikiException e) {"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/user/api/XWikiUserTest.java",
          "status": "modified",
          "additions": 102,
          "deletions": 85,
          "patch": "@@ -19,12 +19,17 @@\n  */\n package com.xpn.xwiki.user.api;\n \n+import javax.inject.Named;\n+\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n import org.xwiki.localization.ContextualLocalizationManager;\n+import org.xwiki.model.document.DocumentAuthors;\n import org.xwiki.model.reference.DocumentReference;\n+import org.xwiki.test.junit5.mockito.MockComponent;\n import org.xwiki.test.mockito.MockitoComponentManager;\n+import org.xwiki.user.UserReferenceResolver;\n \n import com.xpn.xwiki.XWikiException;\n import com.xpn.xwiki.doc.XWikiDocument;\n@@ -56,21 +61,29 @@ public class XWikiUserTest\n     @InjectMockitoOldcore\n     private MockitoOldcore mockitoOldcore;\n \n+    @MockComponent\n+    @Named(\"document\")\n+    private UserReferenceResolver<DocumentReference> documentReferenceUserReferenceResolver;\n+\n     @Mock\n     private XWikiDocument userDocument;\n \n-    private DocumentReference userClassReference = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiUsers\");\n+    @Mock\n+    private DocumentAuthors authors;\n+\n+    private final DocumentReference userClassReference = new DocumentReference(\"xwiki\", \"XWiki\", \"XWikiUsers\");\n \n-    private DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n+    private final DocumentReference userReference = new DocumentReference(\"xwiki\", \"XWiki\", \"Foo\");\n \n     @BeforeEach\n     public void setup(MockitoComponentManager componentManager) throws Exception\n     {\n-        when(mockitoOldcore.getSpyXWiki().getDocument(userReference, mockitoOldcore.getXWikiContext()))\n-            .thenReturn(userDocument);\n-        when(userDocument.getDocumentReference()).thenReturn(userReference);\n-        when(userDocument.getDocumentReferenceWithLocale()).thenReturn(userReference);\n-        when(userDocument.clone()).thenReturn(userDocument);\n+        when(this.mockitoOldcore.getSpyXWiki().getDocument(this.userReference, this.mockitoOldcore.getXWikiContext()))\n+            .thenReturn(this.userDocument);\n+        when(this.userDocument.getDocumentReference()).thenReturn(this.userReference);\n+        when(this.userDocument.getDocumentReferenceWithLocale()).thenReturn(this.userReference);\n+        when(this.userDocument.getAuthors()).thenReturn(this.authors);\n+        when(this.userDocument.clone()).thenReturn(this.userDocument);\n         componentManager.registerMockComponent(ContextualLocalizationManager.class, \"default\");\n     }\n \n@@ -95,138 +108,142 @@ public void createWithNullFullName()\n     @Test\n     public void isDisabled()\n     {\n-        XWikiUser user = new XWikiUser(userReference);\n-        when(userDocument.getIntValue(userClassReference, XWikiUser.ACTIVE_PROPERTY, 1)).thenReturn(1);\n-        assertFalse(user.isDisabled(mockitoOldcore.getXWikiContext()));\n+        XWikiUser user = new XWikiUser(this.userReference);\n+        when(this.userDocument.getIntValue(this.userClassReference, XWikiUser.ACTIVE_PROPERTY, 1)).thenReturn(1);\n+        assertFalse(user.isDisabled(this.mockitoOldcore.getXWikiContext()));\n \n-        when(userDocument.getIntValue(userClassReference, XWikiUser.ACTIVE_PROPERTY, 1)).thenReturn(0);\n-        assertTrue(user.isDisabled(mockitoOldcore.getXWikiContext()));\n+        when(this.userDocument.getIntValue(this.userClassReference, XWikiUser.ACTIVE_PROPERTY, 1)).thenReturn(0);\n+        assertTrue(user.isDisabled(this.mockitoOldcore.getXWikiContext()));\n \n         user = new XWikiUser((DocumentReference) null);\n-        assertFalse(user.isDisabled(mockitoOldcore.getXWikiContext()));\n+        assertFalse(user.isDisabled(this.mockitoOldcore.getXWikiContext()));\n \n         user = new XWikiUser(XWikiRightService.SUPERADMIN_USER_FULLNAME);\n-        assertFalse(user.isDisabled(mockitoOldcore.getXWikiContext()));\n+        assertFalse(user.isDisabled(this.mockitoOldcore.getXWikiContext()));\n     }\n \n     @Test\n     public void setDisabledFalseNormalUser() throws XWikiException\n     {\n-        XWikiUser user = new XWikiUser(userReference);\n-        user.setDisabled(false, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, times(1)).setIntValue(userClassReference, XWikiUser.ACTIVE_PROPERTY, 1);\n-        verify(mockitoOldcore.getSpyXWiki(), times(1))\n-            .saveDocument(same(userDocument), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        XWikiUser user = new XWikiUser(this.userReference);\n+        user.setDisabled(false, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, times(1)).setIntValue(this.userClassReference, XWikiUser.ACTIVE_PROPERTY, 1);\n+        verify(this.mockitoOldcore.getSpyXWiki(), times(1))\n+            .saveDocument(same(this.userDocument), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n+        verify(this.authors, times(1)).setOriginalMetadataAuthor(any());\n+        verify(this.authors, never()).setEffectiveMetadataAuthor(any());\n     }\n \n     @Test\n     public void setDisabledTrueNormalUser() throws XWikiException\n     {\n-        XWikiUser user = new XWikiUser(userReference);\n-        user.setDisabled(true, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, times(1)).setIntValue(userClassReference, XWikiUser.ACTIVE_PROPERTY, 0);\n-        verify(mockitoOldcore.getSpyXWiki(), times(1))\n-            .saveDocument(same(userDocument), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        XWikiUser user = new XWikiUser(this.userReference);\n+        user.setDisabled(true, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, times(1)).setIntValue(this.userClassReference, XWikiUser.ACTIVE_PROPERTY, 0);\n+        verify(this.mockitoOldcore.getSpyXWiki(), times(1))\n+            .saveDocument(same(this.userDocument), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n+        verify(this.authors, times(1)).setOriginalMetadataAuthor(any());\n+        verify(this.authors, never()).setEffectiveMetadataAuthor(any());\n     }\n \n     @Test\n     public void setDisabledGuestOrSuperadminUser() throws XWikiException\n     {\n         // With guest user we never save anything\n         XWikiUser user = new XWikiUser((DocumentReference) null);\n-        user.setDisabled(true, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n-\n-        user.setDisabled(false, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        user.setDisabled(true, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n+\n+        user.setDisabled(false, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n \n         // With superadmin user we never save anything\n         user = new XWikiUser(XWikiRightService.SUPERADMIN_USER_FULLNAME);\n-        user.setDisabled(true, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n-\n-        user.setDisabled(false, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        user.setDisabled(true, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n+\n+        user.setDisabled(false, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n     }\n \n     @Test\n     public void isEmailChecked()\n     {\n-        XWikiUser user = new XWikiUser(userReference);\n-        when(userDocument.getIntValue(userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 1)).thenReturn(1);\n-        assertTrue(user.isEmailChecked(mockitoOldcore.getXWikiContext()));\n+        XWikiUser user = new XWikiUser(this.userReference);\n+        when(this.userDocument.getIntValue(this.userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 1)).thenReturn(1);\n+        assertTrue(user.isEmailChecked(this.mockitoOldcore.getXWikiContext()));\n \n-        when(userDocument.getIntValue(userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 1)).thenReturn(0);\n-        assertFalse(user.isEmailChecked(mockitoOldcore.getXWikiContext()));\n+        when(this.userDocument.getIntValue(this.userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 1)).thenReturn(0);\n+        assertFalse(user.isEmailChecked(this.mockitoOldcore.getXWikiContext()));\n \n         user = new XWikiUser((DocumentReference) null);\n-        assertTrue(user.isEmailChecked(mockitoOldcore.getXWikiContext()));\n+        assertTrue(user.isEmailChecked(this.mockitoOldcore.getXWikiContext()));\n \n         user = new XWikiUser(XWikiRightService.SUPERADMIN_USER_FULLNAME);\n-        assertTrue(user.isEmailChecked(mockitoOldcore.getXWikiContext()));\n+        assertTrue(user.isEmailChecked(this.mockitoOldcore.getXWikiContext()));\n     }\n \n     @Test\n     public void setEmailCheckedFalseNormalUser() throws XWikiException\n     {\n-        XWikiUser user = new XWikiUser(userReference);\n-        user.setEmailChecked(false, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, times(1)).setIntValue(userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 0);\n-        verify(mockitoOldcore.getSpyXWiki(), times(1))\n-            .saveDocument(same(userDocument), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        XWikiUser user = new XWikiUser(this.userReference);\n+        user.setEmailChecked(false, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, times(1)).setIntValue(this.userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 0);\n+        verify(this.mockitoOldcore.getSpyXWiki(), times(1))\n+            .saveDocument(same(this.userDocument), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n     }\n \n     @Test\n     public void setEmailCheckedTrueNormalUser() throws XWikiException\n     {\n-        XWikiUser user = new XWikiUser(userReference);\n-        user.setEmailChecked(true, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, times(1)).setIntValue(userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 1);\n-        verify(mockitoOldcore.getSpyXWiki(), times(1))\n-            .saveDocument(same(userDocument), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        XWikiUser user = new XWikiUser(this.userReference);\n+        user.setEmailChecked(true, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, times(1)).setIntValue(this.userClassReference, XWikiUser.EMAIL_CHECKED_PROPERTY, 1);\n+        verify(this.mockitoOldcore.getSpyXWiki(), times(1))\n+            .saveDocument(same(this.userDocument), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n     }\n \n     @Test\n     public void setEmailCheckedGuestOrSuperadminUser() throws XWikiException\n     {\n         // With guest user we never save anything\n         XWikiUser user = new XWikiUser((DocumentReference) null);\n-        user.setEmailChecked(true, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n-\n-        user.setEmailChecked(false, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        user.setEmailChecked(true, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n+\n+        user.setEmailChecked(false, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n \n         // With superadmin user we never save anything\n         user = new XWikiUser(XWikiRightService.SUPERADMIN_USER_FULLNAME);\n-        user.setEmailChecked(true, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n-\n-        user.setEmailChecked(false, mockitoOldcore.getXWikiContext());\n-        verify(userDocument, never())\n-            .setIntValue(same(userClassReference), any(String.class), any(Integer.class));\n-        verify(mockitoOldcore.getSpyXWiki(), never())\n-            .saveDocument(any(XWikiDocument.class), any(String.class), same(mockitoOldcore.getXWikiContext()));\n+        user.setEmailChecked(true, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n+\n+        user.setEmailChecked(false, this.mockitoOldcore.getXWikiContext());\n+        verify(this.userDocument, never())\n+            .setIntValue(same(this.userClassReference), any(String.class), any(Integer.class));\n+        verify(this.mockitoOldcore.getSpyXWiki(), never())\n+            .saveDocument(any(XWikiDocument.class), any(String.class), same(this.mockitoOldcore.getXWikiContext()));\n     }\n }"
        },
        {
          "filename": "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/getusers.vm",
          "status": "modified",
          "additions": 10,
          "deletions": 8,
          "patch": "@@ -128,16 +128,18 @@\n       'doc_hasdelete': $hasDelete,\n       'doc_delete_url': $user.getURL('delete'),\n       'doc_hasdisable': $hasDisable,\n-      'doc_disable_url': $user.getURL('save', $escapetool.url({\n-        \"${userClassName}_0_active\": 0,\n-        'comment': $services.localization.render('core.users.disable.saveComment'),\n-        'form_token': $services.csrf.token\n+      'doc_disable_url': $xwiki.getURL('XWiki.XWikiUserProfileSheet', 'get', $escapetool.url({\n+        'outputSyntax': 'plain',\n+        'action': 'disable',\n+        'userId': $user.documentReference,\n+        'csrf': $services.csrf.token\n       })),\n       'doc_hasenable': $hasEnable,\n-      'doc_enable_url': $user.getURL('save', $escapetool.url({\n-        \"${userClassName}_0_active\": 1,\n-        'comment': $services.localization.render('core.users.enable.saveComment'),\n-        'form_token': $services.csrf.token\n+      'doc_enable_url': $xwiki.getURL('XWiki.XWikiUserProfileSheet', 'get', $escapetool.url({\n+        'outputSyntax': 'plain',\n+        'action': 'enable',\n+        'userId': $user.documentReference,\n+        'csrf': $services.csrf.token\n       })),\n       'name': \"#displayUserAliasWithAvatar($user.documentReference $disabled)\",\n       'first_name': $userObject.getValue('first_name'),"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "88e3e7d23cbd3e6ed059dbcd6532f94016d42678",
            "date": "2025-01-13T16:58:06Z",
            "author_login": "Sereza7"
          },
          {
            "sha": "9b506ab2bed52744b52699ea05cde15986d42abb",
            "date": "2025-01-13T16:36:24Z",
            "author_login": "mflorea"
          },
          {
            "sha": "d53d6e347b97ac20f60e21fb2bae381f4aaf10f4",
            "date": "2025-01-13T13:25:24Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "d85bd8f9c67c412e0cfb45fb4695b8d4e759bab6",
            "date": "2025-01-13T12:03:22Z",
            "author_login": "tmortagne"
          },
          {
            "sha": "6f210dabc99167cf9f020a048c88325eca34ceea",
            "date": "2025-01-13T08:54:32Z",
            "author_login": "tmortagne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. When an admin disables a user account, the user's profile is executed with the admin's rights. This allows a user to place malicious code in the user profile before getting an admin to disable the user account. To reproduce, as a user without script nor programming rights, edit the about section of your user profile and add `{{groovy}}services.logging.getLogger(\"attacker\").error(\"Hello from Groovy!\"){{/groovy}}`.\nAs an admin, go to the user profile and click the \"Disable this account\" button. Then, reload the page. If the logs show `attacker - Hello from Groovy!` then the instance is vulnerable. This has been patched in XWiki 14.10.21, 15.5.5, 15.10.6 and 16.0.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n\n### Workarounds\nWe're not aware of any workaround except upgrading.\n\n### References\n* https://jira.xwiki.org/browse/XWIKI-21611\n* https://github.com/xwiki/xwiki-platform/commit/f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2024-06-20T23:15:52.460",
    "last_modified": "2024-11-21T09:24:29.807",
    "fix_date": "2024-01-16T11:49:59Z"
  },
  "references": [
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j584-j2vj-3f93",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21611",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/commit/f89c8f47fad6e5cc7e68c69a7e0acde07f5eed5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j584-j2vj-3f93",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://jira.xwiki.org/browse/XWIKI-21611",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:08:28.850539",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xwiki-platform",
    "owner": "xwiki",
    "created_at": "2011-03-10T13:26:41Z",
    "updated_at": "2025-01-13T16:58:10Z",
    "pushed_at": "2025-01-14T12:32:03Z",
    "size": 561595,
    "stars": 1030,
    "forks": 554,
    "open_issues": 136,
    "watchers": 1030,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 34276921,
      "JavaScript": 2392892,
      "HTML": 388086,
      "Less": 318945,
      "AspectJ": 280487,
      "Vue": 222987,
      "CSS": 115460,
      "XSLT": 109285,
      "Clean": 44054,
      "Shell": 32569,
      "Batchfile": 14604,
      "Python": 5046,
      "Groovy": 3012,
      "AMPL": 1296
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 263
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:58:58.685838"
  }
}